// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.
// EXTENDS ENGINE'S GAME CLASS.

using System;
using SomGame;

namespace SomEngine {
	static partial class Game13 {
		public static string name = "/tg/ Station 13";
		public const int fps = 10;
		public const int icon_size = 32;


		public static dynamic New(  ) {
			dynamic date_string = null;
			GlobalVars.map_ready = true;
			date_string = Misc13.formatTime( Game13.realtime, "YYYY/MM-Month/DD-Day" );
			GlobalVars.href_logfile = new File( "data/logs/" + date_string + " hrefs.htm" );
			GlobalVars.diary = new File( "data/logs/" + date_string + ".log" );
			GlobalVars.diaryofmeanpeople = new File( "data/logs/" + date_string + " Attack.log" );
			GlobalVars.diary.write( "\n\nStarting up. " + Misc13.formatTime( Game13.timeofday, "hh:mm.ss" ) + "\n---------------------" );
			GlobalVars.diaryofmeanpeople.write( "\n\nStarting up. " + Misc13.formatTime( Game13.timeofday, "hh:mm.ss" ) + "\n---------------------" );
			GlobalVars.changelog_hash = Misc13.call( GlobalVars.undefined, "icons/ss13_64.png" );
			GlobalFuncs.make_datum_references_lists();
			Game13./world/proc/load_configuration();
			Game13./world/proc/load_mode();
			Game13./world/proc/load_motd();
			GlobalFuncs.load_admins();
			if ( GlobalVars.config.usewhitelist ) {
				GlobalFuncs.load_whitelist();
			}
			GlobalFuncs.appearance_loadbanfile();
			GlobalFuncs.LoadBans();
			GlobalFuncs.investigate_reset();
			if ( ( GlobalVars.config != null ) && GlobalVars.config.server_name != null && GlobalVars.config.server_suffix && Game13.port > 0 ) {
				GlobalVars.config.server_name += " #" + Game13.port % 1000 / 100;
			}
			GlobalVars.timezoneOffset = Misc13.isValid( ( Misc13.parseNumber( Misc13.formatTime( 0, "hh" ) ) * 36000 ) );
			if ( GlobalVars.config.sql_enabled ) {
				if ( !Misc13.isValid( GlobalFuncs.setup_database_connection() ) ) {
					Game13.log.write( "Your server failed to establish a connection with the database." );
				} else {
					Game13.log.write( "Database connection established." );
				}
			}
			GlobalVars.data_core = new Datacore();
			Thread13.schedule( -1, (Thread13.Closure)(() => {
				GlobalVars.Master.Setup();
				return;
			}));
			GlobalFuncs.process_teleport_locs();
			GlobalFuncs.SortAreas();
			GlobalVars.map_name = "" + "Box Station";
			return null;
		}


/*FAILURE IsBanned TypeError: Cannot read property 'parent' of undefined
    at smart_decompile (E:\somnium\somnium\somdecomp.js:2139:55)
    at decomp_func (E:\somnium\somnium\somdecomp.js:3046:20)
    at decomp_func (E:\somnium\somnium\somstruct.js:95:12)
    at E:\somnium\somnium\somstruct.js:318:4
    at E:\somnium\somnium\sompipe.js:1852:4
    at fs.js:334:14
    at FSReqWrap.oncomplete (fs.js:95:15) */

		public static dynamic update_status(  ) {
			string s = "";
			ByTable features = null;
			int n = 0;
			dynamic M = null;
			s = "";
			if ( ( GlobalVars.config != null ) && ( GlobalVars.config.server_name != 0 ) ) {
				s += "<b>" + GlobalVars.config.server_name + "</b> &#8212; ";
			}
			s += "<b>" + GlobalFuncs.station_name() + "</b>";
			s += " (";
			s += "<a href=\"http://\">";
			s += "Default";
			s += "</a>";
			s += ")";
			features = new ByTable();
			if ( GlobalVars.ticker != null ) {
				if ( Misc13.isValid( GlobalVars.master_mode ) ) {
					features += GlobalVars.master_mode;
				}
			} else {
				features += "<b>STARTING</b>";
			}
			if ( !GlobalVars.enter_allowed ) {
				features += "closed";
			}
			features += GlobalVars.abandon_allowed ? "respawn" : "no respawn";
			if ( ( GlobalVars.config != null ) && GlobalVars.config.allow_vote_mode ) {
				features += "vote";
			}
			if ( ( GlobalVars.config != null ) && GlobalVars.config.allow_ai ) {
				features += "AI allowed";
			}
			n = 0;
			M = null;
			foreach (dynamic _a in GlobalVars.player_list ) {
				M = _a;
				if ( M == null ) {
					continue;
				}
				if ( Misc13.isValid( M.client ) ) {
					n++;
				}
			};
			if ( n > 1 ) {
				features += "~" + n + " players";
			} else if ( n > 0 ) {
				features += "~" + n + " player";
			}
			if ( !Misc13.isValid( Game13.host ) && ( GlobalVars.config != null ) && ( GlobalVars.config.hostedby != 0 ) ) {
				features += "hosted by <b>" + GlobalVars.config.hostedby + "</b>";
			}
			if ( features != null ) {
				s += ": " + GlobalFuncs.list2text( features, ", " );
			}
			if ( Game13.status != s ) {
				Game13.status = s;
			}
			return null;
		}

		public static dynamic load_configuration(  ) {
			GlobalVars.protected_config = new ProtectedConfiguration();
			GlobalVars.config = new Configuration();
			GlobalVars.config.load( "config/config.txt" );
			GlobalVars.config.load( "config/game_options.txt", "game_options" );
			GlobalVars.config.loadsql( "config/dbconfig.txt" );
			if ( GlobalVars.config.maprotation && false ) {
				GlobalVars.config.loadmaplist( "config/maps.txt" );
			}
			GlobalVars.abandon_allowed = GlobalVars.config.respawn;
			return null;
		}

		public static dynamic load_motd(  ) {
			GlobalVars.join_motd = File13.read( "config/motd.txt" );
			return null;
		}

		public static dynamic save_mode( dynamic the_mode = null ) {
			File F = null;
			F = new File( "data/mode.txt" );
			File13.del( F );
			F.write( the_mode );
			return null;
		}

		public static dynamic load_mode(  ) {
			ByTable Lines = null;
			Lines = GlobalFuncs.file2list( "data/mode.txt" );
			if ( Misc13.isValid( Lines.len ) ) {
				if ( Misc13.isValid( Lines[1] ) ) {
					GlobalVars.master_mode = Lines[1];
					GlobalVars.diary.write( "Saved mode is '" + GlobalVars.master_mode + "'" );
				}
			}
			return null;
		}


/*FAILURE Reboot TypeError: Cannot read property 'parent' of undefined
    at smart_decompile (E:\somnium\somnium\somdecomp.js:2139:55)
    at smart_decompile (E:\somnium\somnium\somdecomp.js:1477:23)
    at decomp_func (E:\somnium\somnium\somdecomp.js:3046:20)
    at decomp_func (E:\somnium\somnium\somstruct.js:95:12)
    at E:\somnium\somnium\somstruct.js:318:4
    at E:\somnium\somnium\sompipe.js:1852:4
    at fs.js:334:14
    at FSReqWrap.oncomplete (fs.js:95:15) */

		public static dynamic Topic( dynamic T = null, dynamic addr = null, dynamic master = null, dynamic key = null ) {
			int x = 0;
			dynamic C = null;
			int n = 0;
			dynamic M = null;
			ByTable s = null;
			int admins = 0;
			dynamic C2 = null;
			dynamic input = null;
			dynamic C3 = null;
			GlobalVars.diary.write( "TOPIC: \"" + T + "\", from:" + addr + ", master:" + master + ", key:" + key );
			if ( T == "ping" ) {
				x = 1;
				C = null;
				foreach (dynamic _a in GlobalVars.clients ) {
					C = _a;
					if ( C == null ) {
						continue;
					}
					if ( !Misc13.isValid( typeof(Client).IsInstanceOfType( C ) ) ) {
						continue;
					}
					x++;
				};
				return x;
			} else if ( T == "players" ) {
				n = 0;
				M = null;
				foreach (dynamic _b in GlobalVars.player_list ) {
					M = _b;
					if ( M == null ) {
						continue;
					}
					if ( Misc13.isValid( M.client ) ) {
						n++;
					}
				};
				return n;
			} else if ( T == "status" ) {
				s = new ByTable();
				s["version"] = GlobalVars.game_version;
				s["mode"] = GlobalVars.master_mode;
				s["respawn"] = GlobalVars.config != null ? GlobalVars.abandon_allowed : 0;
				s["enter"] = GlobalVars.enter_allowed;
				s["vote"] = GlobalVars.config.allow_vote_mode;
				s["ai"] = GlobalVars.config.allow_ai;
				s["host"] = Misc13.isValid( Game13.host ) ? Game13.host : null;
				admins = 0;
				C2 = null;
				foreach (dynamic _c in GlobalVars.clients ) {
					C2 = _c;
					if ( C2 == null ) {
						continue;
					}
					if ( !Misc13.isValid( typeof(Client).IsInstanceOfType( C2 ) ) ) {
						continue;
					}
					if ( Misc13.isValid( C2.holder ) ) {
						if ( Misc13.isValid( C2.holder.fakekey ) ) {
							continue;
						}
						admins++;
					}
				};
				s["active_players"] = GlobalFuncs.get_active_player_count();
				s["players"] = GlobalVars.clients.len;
				s["revision"] = GlobalVars.revdata.revision;
				s["revision_date"] = GlobalVars.revdata.date;
				s["admins"] = admins;
				s["gamestate"] = 1;
				if ( GlobalVars.ticker != null ) {
					s["gamestate"] = GlobalVars.ticker.current_state;
				}
				s["map_name"] = Misc13.isValid( GlobalVars.map_name ) ? GlobalVars.map_name : "Unknown";
				return Misc13.conv_list2urlParams( s );
			} else if ( Misc13.str_sub( T, 1, 9 ) == "announce" ) {
				input = Misc13.conv_urlParams2list( T );
				if ( GlobalVars.comms_allowed ) {
					if ( input["key"] != GlobalVars.comms_key ) {
						return "Bad Key";
					} else {
						C3 = null;
						foreach (dynamic _d in GlobalVars.clients ) {
							C3 = _d;
							if ( C3 == null ) {
								continue;
							}
							if ( !Misc13.isValid( typeof(Client).IsInstanceOfType( C3 ) ) ) {
								continue;
							}
							if ( Misc13.isValid( C3.prefs ) && Misc13.isValid( ( C3.prefs.chat_toggles & 64 ) ) ) {
								C3.write( "<span class='announce'>PR: " + input["announce"] + "</span>" );
							}
						};
					}
				}
			}
			return null;
		}

	}
}