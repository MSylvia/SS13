// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	static class GlobalVars {

		// Constants:

		public const double AALARM_WIRE_AALARM = 16;
		public const double AALARM_WIRE_IDSCAN = 1;
		public const int access_ai_upload = 16;
		public const int access_all_personal_lockers = 21;
		public const int access_armory = 3;
		public const int access_atmospherics = 24;
		public const int access_bar = 25;
		public const int access_brig = 2;
		public const int access_captain = 20;
		public const int access_cargo = 31;
		public const int access_ce = 56;
		public const int access_cent_captain = 109;
		public const int access_cent_creed = 108;
		public const int access_cent_ert = 110;
		public const int access_cent_general = 101;
		public const int access_cent_living = 105;
		public const int access_cent_medical = 104;
		public const int access_cent_specops = 103;
		public const int access_cent_storage = 106;
		public const int access_cent_teleporter = 107;
		public const int access_cent_thunder = 102;
		public const int access_change_ids = 15;
		public const int access_chapel_office = 22;
		public const int access_chemistry = 33;
		public const int access_clown = 43;
		public const int access_cmo = 40;
		public const int access_construction = 32;
		public const int access_court = 42;
		public const int access_crematorium = 27;
		public const int access_engine = 10;
		public const int access_engine_equip = 11;
		public const int access_eva = 18;
		public const int access_external_airlocks = 13;
		public const int access_forensics_lockers = 4;
		public const int access_gateway = 62;
		public const int access_genetics = 9;
		public const int access_heads = 19;
		public const int access_heads_vault = 53;
		public const int access_hop = 57;
		public const int access_hos = 58;
		public const int access_hydroponics = 35;
		public const int access_janitor = 26;
		public const int access_keycard_auth = 60;
		public const int access_kitchen = 28;
		public const int access_lawyer = 38;
		public const int access_library = 37;
		public const int access_mailsorting = 50;
		public const int access_maint_tunnels = 12;
		public const int access_mechanic = 501;
		public const int access_medical = 5;
		public const int access_mime = 44;
		public const int access_mining = 48;
		public const int access_mining_station = 54;
		public const int access_morgue = 6;
		public const int access_paramedic = 500;
		public const int access_psychiatrist = 64;
		public const int access_qm = 41;
		public const int access_RC_announce = 59;
		public const int access_rd = 30;
		public const int access_research = 47;
		public const int access_robotics = 29;
		public const int access_sec_doors = 63;
		public const bool access_security = true;
		public const int access_surgery = 45;
		public const int access_syndicate = 150;
		public const int access_taxi = 67;
		public const int access_tcomsat = 61;
		public const int access_tech_storage = 23;
		public const int access_teleporter = 17;
		public const int access_theatre = 46;
		public const int access_tox = 7;
		public const int access_tox_storage = 8;
		public const int access_virology = 39;
		public const int access_weapons = 66;
		public const int access_xenobiology = 55;
		public const int agents_possible = 5;
		public const int AIRLOCK_WIRE_AI_CONTROL = 128;
		public const double AIRLOCK_WIRE_BACKUP_POWER1 = 16;
		public const double AIRLOCK_WIRE_BACKUP_POWER2 = 32;
		public const double AIRLOCK_WIRE_DOOR_BOLTS = 8;
		public const double AIRLOCK_WIRE_ELECTRIFY = 256;
		public const double AIRLOCK_WIRE_IDSCAN = 1;
		public const double AIRLOCK_WIRE_LIGHT = 2048;
		public const double AIRLOCK_WIRE_MAIN_POWER1 = 2;
		public const double AIRLOCK_WIRE_MAIN_POWER2 = 4;
		public const int AIRLOCK_WIRE_OPEN_DOOR = 64;
		public const double AIRLOCK_WIRE_SAFETY = 512;
		public const double AIRLOCK_WIRE_SPEED = 1024;
		public const int ANIMAL_CHILD_CAP = 50;
		public const bool ANTIGEN_A = true;
		public const int ANTIGEN_B = 2;
		public const int ANTIGEN_M = 512;
		public const int ANTIGEN_N = 1024;
		public const int ANTIGEN_O = 4096;
		public const int ANTIGEN_P = 2048;
		public const int ANTIGEN_Q = 8;
		public const int ANTIGEN_RH = 4;
		public const int ANTIGEN_U = 16;
		public const int ANTIGEN_V = 32;
		public const int ANTIGEN_Z = 256;
		public const double APC_WIRE_AI_CONTROL = 8;
		public const double APC_WIRE_MAIN_POWER1 = 2;
		public const double APC_WIRE_MAIN_POWER2 = 4;
		public const double ascii_a = 97;
		public const double ascii_A = 65;
		public const int ascii_DOLLAR = 36;
		public const double ascii_NINE = 57;
		public const int ascii_UNDERSCORE = 95;
		public const double ascii_z = 122;
		public const double ascii_Z = 90;
		public const double ascii_ZERO = 48;
		public const int BLOOD_VOLUME_BAD = 224;
		public const int BLOOD_VOLUME_MAX = 560;
		public const int BLOOD_VOLUME_SAFE = 501;
		public const int BLOOD_VOLUME_WARN = 392;
		public const bool BURST = false;
		public const bool BURSTING = true;
		public const double CAMERA_WIRE_FOCUS = 1;
		public const double CAMERA_WIRE_LIGHT = 4;
		public const double CAMERA_WIRE_NOTHING1 = 16;
		public const double CAMERA_WIRE_NOTHING2 = 32;
		public const double CAMERA_WIRE_POWER = 2;
		public const double CELLRATE = 0.002;
		public const double CHARGELEVEL = 0.001;
		public const int CHUNK_SIZE = 16;
		public const int CLOSE_DURATION = 6;
		public const int CLOSED = 2;
		public const int commandos_possible = 6;
		public const bool Debug = false;
		public static readonly Type default_cell_path = typeof(Obj_Item_Weapon_Cell_High);
		public const int DOWN = 32;
		public const int duration = 13;
		public const double E = 2.7182817459106445;
		public const double EAST = 4;
		public const int egg_laying_chance = 75;
		public const int eggs_left = 10;
		public static readonly dynamic endicon = null;
		public const int ert_base_chance = 10;
		public const int eventTimeLower = 6000;
		public const int eventTimeUpper = 12000;
		public const bool EYE_PERSPECTIVE = true;
		public const int FALLOFF_SOUNDS = 1;
		public const bool FALSE = false;
		public const string FEMALE = "female";
		public const int FINGERPRINT_COMPLETE = 6;
		public const double FLOAT_LAYER = -1;
		public const double FLY_LAYER = 5;
		public const bool FREQ_LISTENING = true;
		public const string game_version = "veegee";
		public static readonly ByTable global_map = null;
		public const int GROWING = 2;
		public const int GROWN = 3;
		public const string head = "<link href='./common.css' rel='stylesheet' type='text/css'>";
		public const bool HOLOPAD_MODE = false;
		public const int ICON_SIZE = 4;
		public const int INGEST = 2;
		public const string itemstate_twohand_suffix = "_2hand";
		public const string js_byjax = @"

function replaceContent() {
	var args = Array.prototype.slice.call(arguments);
	var id = args[0];
	var content = args[1];
	var callback  = null;
	if(args[2]){
		callback = args[2];
		if(args[3]){
			args = args.slice(3);
		}
	}
	var parent = document.getElementById(id);
	if(typeof(parent)!=='undefined' && parent!=null){
		parent.innerHTML = content?content:'';
	}
	if(callback && window[callback]){
		window[callback].apply(null,args);
	}
}
";
		public const string js_dropdowns = @"
function dropdowns() {
    var divs = document.getElementsByTagName('div');
    var headers = new Array();
    var links = new Array();
    for(var i=0;i<divs.length;i++){
        if(divs[i].className=='header') {
            divs[i].className='header closed';
            divs[i].innerHTML = divs[i].innerHTML+' +';
            headers.push(divs[i]);
        }
        if(divs[i].className=='links') {
            divs[i].className='links hidden';
            links.push(divs[i]);
        }
    }
    for(var i=0;i<headers.length;i++){
        if(typeof(links[i])!== 'undefined' && links[i]!=null) {
            headers[i].onclick = (function(elem) {
                return function() {
                    if(elem.className.search('visible')>=0) {
                        elem.className = elem.className.replace('visible','hidden');
                        this.className = this.className.replace('open','closed');
                        this.innerHTML = this.innerHTML.replace('-','+');
                    }
                    else {
                        elem.className = elem.className.replace('hidden','visible');
                        this.className = this.className.replace('closed','open');
                        this.innerHTML = this.innerHTML.replace('+','-');
                    }
                return false;
                }
            })(links[i]);
        }
    }
}
";
		public const double JUKE_CAPITAL = 16;
		public const double JUKE_CONFIG = 64;
		public const double JUKE_POWER_ONE = 1;
		public const double JUKE_POWER_THREE = 4;
		public const double JUKE_POWER_TWO = 2;
		public const double JUKE_SHUFFLE = 8;
		public const double JUKE_TRANSMIT = 32;
		public const int KW_ERR = 2;
		public const bool KW_FAIL = false;
		public const bool KW_PASS = true;
		public const int KW_WARN = 3;
		public static readonly Type log_type = typeof(Obj_Item_Weapon_Grown_Log_Tree);
		public const string MALE = "male";
		public const int MAX_ACTIVE_TIME = 400;
		public const int max_assembly_amount = 300;
		public const int max_cultists_to_start = 4;
		public const int MAX_GROWTH_TIME = 3000;
		public const int max_health = 100;
		public const int MAX_ICON_DIMENSION = 1024;
		public const int MAX_IMPREGNATION_TIME = 150;
		public const double max_linked_assembly_amount = 5;
		public const double MAX_SAVE_SLOTS = 8;
		public const int max_secret_rooms = 3;
		public const int max_unhatchable_eggs_in_world = 30;
		public const int metalPerMoMMI = 10;
		public const bool metalPerTick = true;
		public const int meteors_in_wave = 10;
		public const int meteorshuttlemultiplier = 3;
		public static readonly dynamic midicon = null;
		public const int MIN_ACTIVE_TIME = 200;
		public const int MIN_GROWTH_TIME = 1800;
		public const int MIN_IMPREGNATION_TIME = 100;
		public const int MOB_LAYER = 4;
		public const bool MOB_PERSPECTIVE = false;
		public const bool movement_disabled = false;
		public static readonly dynamic movement_disabled_exception = null;
		public const string MS_WINDOWS = "MS Windows";
		public const string NEUTER = "neuter";
		public const double NORTH = 1;
		public const double NORTHEAST = 5;
		public const double NORTHWEST = 9;
		public const int num_power_levels = 6;
		public const double OBJ_LAYER = 3;
		public const int OPEN_DURATION = 6;
		public const double PARTICLE_INTERFACE_WIRE = 4;
		public const double PARTICLE_LIMIT_POWER_WIRE = 8;
		public const double PARTICLE_STRENGTH_WIRE = 2;
		public const double PARTICLE_TOGGLE_WIRE = 1;
		public const bool pipe_processing_killed = false;
		public const string PLAYER_HTML = @"
<embed type=""application/x-vlc-plugin"" pluginspage=""http://www.videolan.org"" />
<object classid=""clsid:9BE31822-FDAD-461B-AD51-BE1D1C159921"" codebase=""http://download.videolan.org/pub/videolan/vlc/last/win32/axvlc.cab"" id=""player""></object>
	<script>
function noErrorMessages () { return true; }
window.onerror = noErrorMessages;
function SetMusic(url, time, volume) {
	var vlc = document.getElementById('player');

	// Stop playing
	vlc.playlist.stop();

	// Clear playlist
	vlc.playlist.items.clear();

	// Add new playlist item.
	var id = vlc.playlist.add(url);

	// Play playlist item
	vlc.playlist.playItem(id);

	vlc.input.time = time*1000; // VLC takes milliseconds.
	vlc.audio.volume = volume*100; // [0-200]
}
	</script>
";
		public const string PLAYER_OLD_HTML = @"
	<OBJECT id='player' CLASSID='CLSID:6BF52A52-394A-11d3-B153-00C04F79FAA6' type='application/x-oleobject'></OBJECT>
	<script>
function noErrorMessages () { return true; }
window.onerror = noErrorMessages;
function SetMusic(url, time, volume) {
	var player = document.getElementById('player');
	player.URL = url;
	player.Controls.currentPosition = time;
	player.Settings.volume = volume;
}
	</script>";
		public const string PLURAL = "plural";
		public const string POS_HEADER = @"<html>
	<head>
		<style type=""text/css"">
			* {
				font-family: sans-serif;
				font-size: small;
			}

			table {
				margin: auto;
				margin-top: 1em;
				border-collapse: collapse;
			}
			th, td {
				padding: 1px;
				margin: 0;
			}
			td,
			tr.first th {
				border-left: 1px solid #ccc;
			}
			tr.first th.first {
				border-left: none;
			}
			tr.even td,
			tr.even th {
				background: #f0f0f0;
			}
			tr.calculated {
				font-style: italic;
			}
			tr.calculated td {
				border-top: 1px solid #000;
				border-left: 1px solid #ccc;
				background: #fefefe;
			}
			tr.total {
				font-weight: bold
			}
			tr.total td {
				border-top: 1px solid #000;
				background: #dfdfdf;
			}

		</style>
	</head>
	<body>
";
		public const int PRESSURE_CHECK_DELAY = 5;
		public const string RADIO_AIRLOCK = "6";
		public const string RADIO_ATMOSIA = "4";
		public const string RADIO_CHAT = "3";
		public const string RADIO_CONVEYORS = "10";
		public const string RADIO_FROM_AIRALARM = "2";
		public const string RADIO_MAGNETS = "9";
		public const string RADIO_MULEBOT = "8";
		public const string RADIO_NAVBEACONS = "5";
		public const string RADIO_SECBOT = "7";
		public const string RADIO_TO_AIRALARM = "1";
		public const int recall_time_limit = 72000;
		public const string RECEIPT_HEADER = @"<html>
	<head>
		<style type=""text/css"">
			html {
				font-family: monospace;
			}

			table {
				margin: auto;
				margin-top: 1em;
				border-collapse: collapse;
			}
			th, td {
				padding: 1px;
				margin: 0;
			}
			td,
			tr.first th {
				border-left: 1px solid #ccc;
			}
			tr.first th.first {
				border-left: none;
			}
			tr.even td,
			tr.even th {
				background: #f0f0f0;
			}
			tr.calculated {
				font-style: italic;
			}
			tr.calculated td {
				border-top: 1px solid #000;
				border-left: 1px solid #ccc;
				background: #fefefe;
			}
			tr.total {
				font-weight: bold
			}
			tr.total td {
				border-top: 1px solid #000;
				background: #dfdfdf;
			}

		</style>
	</head>
	<body>
";
		public const int restart_timeout = 600;
		public const bool say_disabled = false;
		public const int SEE_MOBS = 4;
		public const int SEE_OBJS = 8;
		public const int SEE_SELF = 32;
		public const int SEE_TURFS = 16;
		public const string server_signal_file = "data/SERVER_READY.txt";
		public const int SOUND_STREAM = 4;
		public const int SOUND_UPDATE = 16;
		public const double SOUTH = 2;
		public const double SOUTHEAST = 6;
		public const double SOUTHWEST = 10;
		public const int supplydelay = 100;
		public const int SURROUND_CAP = 7;
		public static readonly dynamic swapmaps_iconcache = null;
		public const bool swapmaps_mode = false;
		public const int SYMPTOM_ACTIVATION_PROB = 3;
		public const double SYND_FREQ = 1213;
		public const int syndicate_commandos_possible = 6;
		public const int tick_multiplier = 2;
		public const int TICKS_IN_DAY = 864000;
		public const int TICKS_IN_SECOND = 10;
		public const int tk_maxrange = 15;
		public const int TOUCH = 1;
		public const int traitor_scaling_coeff = 5;
		public const double TRANS_POWER = 1;
		public const double TRANS_RAD_ONE = 2;
		public const double TRANS_RAD_TWO = 4;
		public const bool TRUE = true;
		public const double TURF_LAYER = 2;
		public const bool universal_cult_chat = false;
		public const string UNIX = "UNIX";
		public const string update_signal_file = "data/UPDATE_READY.txt";
		public const double VENDING_WIRE_IDSCAN = 8;
		public const int VOX_CHANNEL = 200;
		public const int wait_step = 5;
		public const int waittime_h = 1800;
		public const int waittime_l = 600;
		public const double WEST = 8;
		public const string window = "rpane.hosttracker";
		public const double WIRE_AVOIDANCE = 4;
		public const double WIRE_LOADCHECK = 8;
		public const double WIRE_MOTOR1 = 16;
		public const double WIRE_MOTOR2 = 32;
		public const double WIRE_POWER1 = 1;
		public const double WIRE_POWER2 = 2;
		public const double WIRE_RECEIVE = 2;
		public const double WIRE_TRANSMIT = 4;

		// Normal variables:

		public static int __btime__callCount = 0;
		public static int __btime__lastTick = 0;
		public static double? __btime__lastTimeOfHour = 0;
		public static DmmSuite_Preloader _preloader = null;
		public static bool abandon_allowed = true;
		public static ByTable acceptable_items = null;
		public static ByTable acceptable_reagents = null;
		public static bool account_hack_attempted = false;
		public static File admin_diary = null;
		public static bool admin_shuttle_location = false;
		public static Controller_AirSystem air_master = null;
		public static bool? air_processing_killed = false;
		public static int airtunnel_bottom = 72;
		public static int airtunnel_start = 68;
		public static int airtunnel_stop = 68;
		public static bool alien_ship_location = true;
		public static bool aliens_allowed = true;
		public static ByTable all_jobs = null;
		public static int announcing_vox = 0;
		public static bool any = false;
		public static dynamic appearanceban_runonce = null;
		public static int arena_rounds = 0;
		public static bool arena_top_score = false;
		public static ByTable available_recipes = null;
		public static SaveFile Banlist = null;
		public static SaveFile Banlistjob = null;
		public static dynamic base_law_type = typeof(AiLaws_Asimov);
		public static Obj_Machinery_BlackboxRecorder blackbox = null;
		public static dynamic BLINDBLOCK = 0;
		public static bool blobevent = false;
		public static int BLOCKADD = 0;
		public static bool blood_virus_spreading_disabled = false;
		public static bool bomb_set = false;
		public static bool bomberman_destroy = false;
		public static bool bomberman_hurt = false;
		public static bool bomberman_mode = false;
		public static bool BSACooldown = false;
		public static bool camera_range_display_status = false;
		public static bool can_call_ert = false;
		public static Obj_Machinery_AccountDatabase centcomm_account_db = null;
		public static dynamic CHAMELEONBLOCK = 0;
		public static string changelog_hash = "";
		public static dynamic CHAVBLOCK = 0;
		public static bool checked_for_inactives = false;
		public static ByTable chemical_reactions_list = null;
		public static ByTable chemical_reagents_list = null;
		public static dynamic chosen_dir = 1;
		public static dynamic CLUMSYBLOCK = 0;
		public static double CMinutes = 0;
		public static string cmp_field = "name";
		public static int cockroach_egg_amount = 0;
		public static dynamic COLDBLOCK = 0;
		public static dynamic command_name = null;
		public static Configuration config = null;
		public static dynamic COUGHBLOCK = 0;
		public static string create_mob_html = null;
		public static string create_object_html = null;
		public static string create_turf_html = null;
		public static dynamic CRYOBLOCK = 0;
		public static int current_centcomm_order_id = 124901;
		public static string current_date_string = null;
		public static int current_pos_id = 1;
		public static dynamic custom_event_msg = null;
		public static Obj_Effect_Datacore data_core = null;
		public static dynamic DEAFBLOCK = 0;
		public static bool Debug2 = false;
		public static bool deepFriedEverything = false;
		public static dynamic deepFriedNutriment = 0;
		public static File diary = null;
		public static File diaryofmeanpeople = null;
		public static int DIFFMUT = 0;
		public static bool disable_scrubbers = false;
		public static bool disable_vents = false;
		public static dynamic DIZZYBLOCK = 0;
		public static bool dooc_allowed = true;
		public static dynamic EATBLOCK = 0;
		public static dynamic ELVISBLOCK = 0;
		public static ShuttleController_EmergencyShuttle emergency_shuttle = null;
		public static dynamic EMPATHBLOCK = 0;
		public static bool endgame_info_logged = false;
		public static bool enter_allowed = true;
		public static dynamic EPILEPSYBLOCK = 0;
		public static bool explosion_in_progress = false;
		public static bool explosion_newmethod = true;
		public static bool explosion_shake_message_cooldown = false;
		public static int failed_db_connections = 0;
		public static int failed_old_db_connections = 0;
		public static Controller_Failsafe failsafe = null;
		public static dynamic FAKEBLOCK = 0;
		public static dynamic FARSIGHTBLOCK = 0;
		public static dynamic FATBLOCK = 0;
		public static int fileaccess_timer = 0;
		public static dynamic FIREBLOCK = 0;
		public static bool floorIsLava = false;
		public static bool foodNesting = false;
		public static string forum_activated_group = "2";
		public static string forum_authenticated_group = "10";
		public static string forumsqladdress = "localhost";
		public static string forumsqldb = "tgstation";
		public static string forumsqllogin = "root";
		public static string forumsqlpass = "";
		public static string forumsqlport = "3306";
		public static GarbageCollector garbageCollector = null;
		public static int gid = 1;
		public static int gl_uid = 1;
		public static dynamic GLASSESBLOCK = 0;
		public static int global_uid = 0;
		public static int going = 1;
		public static bool? gravity_is_on = true;
		public static bool guests_allowed = true;
		public static dynamic HALLUCINATIONBLOCK = 0;
		public static bool hardcore_mode = false;
		public static dynamic HEADACHEBLOCK = 0;
		public static dynamic Holiday = null;
		public static dynamic HORNSBLOCK = 0;
		public static string host = null;
		public static bool hsboxspawn = true;
		public static dynamic HULKBLOCK = 0;
		public static dynamic IMMOLATEBLOCK = 0;
		public static string inactive_keys = "None<br>";
		public static dynamic INCREASERUNBLOCK = 0;
		public static dynamic ingredientLimit = 10;
		public static dynamic initial_materials = null;
		public static bool? intercom_range_display_status = false;
		public static Controller_Occupations job_master = null;
		public static int jobban_runonce = 0;
		public static string join_motd = null;
		public static dynamic JUMPBLOCK = 0;
		public static dynamic LISPBLOCK = 0;
		public static dynamic LOUDBLOCK = 0;
		public static bool maint_all_access = false;
		public static Controller_GameController master_controller = null;
		public static dynamic master_mode = "extended";
		public static dynamic material_list = null;
		public static dynamic MAX_EXPLOSION_RANGE = 14;
		public static int? max_meteor_size = 0;
		public static dynamic MELTBLOCK = 0;
		public static bool message_delay = false;
		public static bool meteor_wave_active = false;
		public static int meteor_wave_delay = 300;
		public static MigrationController_Mysql migration_controller_mysql = null;
		public static MigrationController_Sqlite migration_controller_sqlite = null;
		public static bool minimapinit = false;
		public static dynamic mommi_base_law_type = typeof(AiLaws_Keeper);
		public static int? MONKEYBLOCK = 54;
		public static dynamic MORPHBLOCK = 0;
		public static int mulebot_count = 0;
		public static dynamic MUTEBLOCK = 0;
		public static ByTable name_to_mineral = null;
		public static int nanocoins_lastchange = 0;
		public static double nanocoins_rates = 1;
		public static string narsie_behaviour = "CultStation13";
		public static bool narsie_cometh = false;
		public static dynamic NERVOUSBLOCK = 0;
		public static int next_account_number = 0;
		public static dynamic NOBREATHBLOCK = 0;
		public static dynamic NOPRINTSBLOCK = 0;
		public static double num_financial_database = 1;
		public static double num_financial_terminals = 1;
		public static double num_merch_computers = 1;
		public static double num_pda_terminals = 1;
		public static double num_vending_machines = 1;
		public static _Event on_ban = null;
		public static _Event on_login = null;
		public static _Event on_unban = null;
		public static bool ooc_allowed = true;
		public static PaiController paiController = null;
		public static SaveFile panicfile = null;
		public static bool paperwork = false;
		public static string paperwork_library = null;
		public static Controller_Plants plant_controller = null;
		public static Obj_Effect_Overlay plmaster = null;
		public static int polarstar = 0;
		public static dynamic POLYMORPHBLOCK = 0;
		public static bool prison_shuttle_at_station = false;
		public static bool prison_shuttle_moving_to_prison = false;
		public static bool prison_shuttle_moving_to_station = false;
		public static int prison_shuttle_time = 0;
		public static double prison_shuttle_timeleft = 0;
		public static Controller_ProcessScheduler processScheduler = null;
		public static dynamic PSYRESISTBLOCK = 0;
		public static dynamic RADBLOCK = 0;
		public static Controller_Radio radio_controller = null;
		public static bool recursiveFood = false;
		public static dynamic REGENERATEBLOCK = 0;
		public static dynamic REMOTETALKBLOCK = 0;
		public static dynamic REMOTEVIEWBLOCK = 0;
		public static int resethearers = 0;
		public static string round_end_info = "";
		public static int runedec = 0;
		public static dynamic SANSBLOCK = 0;
		public static double? scheduledEvent = null;
		public static dynamic SCRAMBLEBLOCK = 0;
		public static string secret_force_mode = "secret";
		public static int secure_GPS_count = 0;
		public static int security_level = 0;
		public static bool send_emergency_team = false;
		public static bool sent_aliens_to_station = false;
		public static bool sent_spiders_to_station = false;
		public static bool sent_strike_team = false;
		public static bool sent_syndicate_strike_team = false;
		public static bool setup_economy = false;
		public static dynamic SHOCKIMMUNITYBLOCK = 0;
		public static int shuttle_z = 2;
		public static Obj_Effect_Overlay slmaster = null;
		public static dynamic SMALLSIZEBLOCK = 0;
		public static dynamic SMILEBLOCK = 0;
		public static dynamic SOBERBLOCK = 0;
		public static SocketTalk socket_talk = null;
		public static int soft_dels = 0;
		public static bool spacevines_spawned = false;
		public static bool specops_shuttle_at_station = false;
		public static bool specops_shuttle_moving_to_centcom = false;
		public static bool specops_shuttle_moving_to_station = false;
		public static int specops_shuttle_time = 0;
		public static double specops_shuttle_timeleft = 0;
		public static string sqladdress = "localhost";
		public static string sqldb = "tgstation";
		public static string sqlfdbkdb = "test";
		public static string sqlfdbklogin = "root";
		public static string sqlfdbkpass = "";
		public static bool sqllogging = false;
		public static string sqllogin = "root";
		public static string sqlpass = "";
		public static string sqlport = "3306";
		public static StationState start_state = null;
		public static MoneyAccount station_account = null;
		public static string station_name = null;
		public static bool status_overlays = false;
		public static ByTable status_overlays_charging = null;
		public static ByTable status_overlays_environ = null;
		public static ByTable status_overlays_equipment = null;
		public static ByTable status_overlays_lighting = null;
		public static ByTable status_overlays_lock = null;
		public static ByTable status_overlays_other = null;
		public static ByTable status_overlays_pressure = null;
		public static dynamic STRONGBLOCK = 0;
		public static Sun sun = null;
		public static dynamic SUPERFARTBLOCK = 0;
		public static bool suspend_alert = false;
		public static ByTable swapmaps_byname = null;
		public static int swapmaps_compiled_maxx = 0;
		public static int swapmaps_compiled_maxy = 0;
		public static int swapmaps_compiled_maxz = 0;
		public static bool swapmaps_initialized = false;
		public static ByTable swapmaps_loaded = null;
		public static dynamic SWEDEBLOCK = 0;
		public static string syndicate_code_phrase = null;
		public static string syndicate_code_response = null;
		public static bool syndicate_elite_shuttle_at_station = false;
		public static bool syndicate_elite_shuttle_moving_to_mothership = false;
		public static bool syndicate_elite_shuttle_moving_to_station = false;
		public static int syndicate_elite_shuttle_time = 0;
		public static double syndicate_elite_shuttle_timeleft = 0;
		public static string syndicate_name = null;
		public static dynamic TELEBLOCK = 0;
		public static Controller_Gameticker ticker = null;
		public static Controller_Process_Ticker tickerProcess = null;
		public static bool tinted_weldhelh = true;
		public static dynamic TOXICFARTBLOCK = 0;
		public static bool traitor_scaling = true;
		public static dynamic TWITCHBLOCK = 0;
		public static MoneyAccount vendor_account = null;
		public static int vox_kills = 0;
		public static bool vox_sent = false;
		public static int vox_tick = 1;
		public static dynamic WHISPERBLOCK = 0;
		public static ByTable word_to_uristrune_table = null;
		public static dynamic XRAYBLOCK = 0;

		// Variables with initializer code:

		public static readonly ByTable masterdatumPool = new ByTable();
		public static readonly ByTable pooledvariables = new ByTable();
		public static ByTable asset_cache = new ByTable();
		public static readonly ByTable ability_verbs = new ByTable();
		public static readonly ByTable exclude = new ByTable(new object [] { "inhand_states", "loc", "locs", "parent_type", "vars", "verbs", "type", "x", "y", "z", "group", "animate_movement" });
		public static ByTable lighting_update_lights = new ByTable();
		public static ByTable lighting_update_overlays = new ByTable();
		public static ByTable all_lighting_overlays = new ByTable();
		public static ByTable deadmins = new ByTable();
		public static readonly ByTable type_instances = new ByTable( 0 );
		public static ByTable account_DBs = new ByTable();
		public static readonly ByTable paper_tag_whitelist = new ByTable(new object [] { 
			"center", 
			"p", 
			"div", 
			"span", 
			"h1", 
			"h2", 
			"h3", 
			"h4", 
			"h5", 
			"h6", 
			"hr", 
			"pre", 
			"big", 
			"small", 
			"font", 
			"i", 
			"u", 
			"b", 
			"s", 
			"sub", 
			"sup", 
			"tt", 
			"br", 
			"hr", 
			"ol", 
			"ul", 
			"li", 
			"caption", 
			"col", 
			"table", 
			"td", 
			"th", 
			"tr"
		 });
		public static readonly ByTable paper_blacklist = new ByTable(new object [] { 
			"java", 
			"onblur", 
			"onchange", 
			"onclick", 
			"ondblclick", 
			"onfocus", 
			"onkeydown", 
			"onkeypress", 
			"onkeyup", 
			"onload", 
			"onmousedown", 
			"onmousemove", 
			"onmouseout", 
			"onmouseover", 
			"onmouseup", 
			"onreset", 
			"onselect", 
			"onsubmit", 
			"onunload"
		 });
		public static readonly ByTable jobMax = new ByTable();
		public static ByTable bombers = new ByTable();
		public static readonly ByTable admin_log = new ByTable();
		public static readonly ByTable lastsignalers = new ByTable();
		public static readonly ByTable lawchanges = new ByTable();
		public static ByTable shuttles = new ByTable();
		public static readonly ByTable reg_dna = new ByTable();
		public static ByTable WORLD_X_OFFSET = new ByTable();
		public static ByTable WORLD_Y_OFFSET = new ByTable();
		public static ByTable monkeystart = new ByTable();
		public static ByTable wizardstart = new ByTable();
		public static ByTable newplayer_start = new ByTable();
		public static ByTable latejoin = new ByTable();
		public static ByTable assistant_latejoin = new ByTable();
		public static ByTable prisonwarp = new ByTable();
		public static ByTable holdingfacility = new ByTable();
		public static ByTable xeno_spawn = new ByTable();
		public static ByTable endgame_safespawns = new ByTable();
		public static ByTable endgame_exits = new ByTable();
		public static ByTable tdome1 = new ByTable();
		public static ByTable tdome2 = new ByTable();
		public static ByTable tdomeobserve = new ByTable();
		public static ByTable tdomeadmin = new ByTable();
		public static ByTable prisonsecuritywarp = new ByTable();
		public static ByTable prisonwarped = new ByTable();
		public static ByTable blobstart = new ByTable();
		public static readonly ByTable ninjastart = new ByTable();
		public static readonly ByTable cardinal = new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH, GlobalVars.EAST, GlobalVars.WEST });
		public static readonly ByTable diagonal = new ByTable(new object [] { GlobalVars.NORTHEAST, GlobalVars.NORTHWEST, GlobalVars.SOUTHEAST, GlobalVars.SOUTHWEST });
		public static readonly ByTable alldirs = new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH, GlobalVars.EAST, GlobalVars.WEST, GlobalVars.NORTHEAST, GlobalVars.NORTHWEST, GlobalVars.SOUTHEAST, GlobalVars.SOUTHWEST });
		public static readonly ByTable combatlog = new ByTable();
		public static readonly ByTable IClog = new ByTable();
		public static readonly ByTable OOClog = new ByTable();
		public static readonly ByTable adminlog = new ByTable();
		public static readonly ByTable awaydestinations = new ByTable();
		public static readonly ByTable score = new ByTable()
			.Set( "crewscore", 0 )
			.Set( "stuffshipped", 0 )
			.Set( "stuffharvested", 0 )
			.Set( "oremined", 0 )
			.Set( "eventsendured", 0 )
			.Set( "powerloss", 0 )
			.Set( "escapees", 0 )
			.Set( "deadcrew", 0 )
			.Set( "deadsilicon", 0 )
			.Set( "mess", 0 )
			.Set( "litter", 0 )
			.Set( "meals", 0 )
			.Set( "disease", 0 )
			.Set( "powerbonus", 0 )
			.Set( "messbonus", 0 )
			.Set( "deadaipenalty", 0 )
			.Set( "foodeaten", 0 )
			.Set( "clownabuse", 0 )
			.Set( "richestname", null )
			.Set( "richestjob", null )
			.Set( "richestcash", 0 )
			.Set( "richestkey", null )
			.Set( "dmgestname", null )
			.Set( "dmgestjob", null )
			.Set( "dmgestdamage", 0 )
			.Set( "dmgestkey", null )
			.Set( "explosions", 0 )
			.Set( "arenafights", 0 )
			.Set( "arenabest", null )
		;
		public static ByTable trash_items = new ByTable();
		public static ByTable decals = new ByTable();
		public static readonly ByTable plugins = new ByTable();
		public static readonly ByTable sortedAreas = new ByTable();
		public static readonly ByTable volunteer_gladiators = new ByTable();
		public static ByTable ready_gladiators = new ByTable();
		public static readonly ByTable never_gladiators = new ByTable();
		public static ByTable achievements = new ByTable();
		public static ByTable end_icons = new ByTable();
		public static ByTable arena_leaderboard = new ByTable();
		public static ByTable snake_station_highscores = new ByTable();
		public static ByTable snake_best_players = new ByTable();
		public static readonly ByTable minesweeper_station_highscores = new ByTable();
		public static readonly ByTable minesweeper_best_players = new ByTable();
		public static ByTable mineral_turfs = new ByTable();
		public static readonly ByTable vox_name_syllables = new ByTable(new object [] { "ti", "hi", "ki", "ya", "ta", "ha", "ka", "ya", "chi", "cha", "kah" });
		public static readonly ByTable BODY_PARTS = new ByTable(new object [] { 1, 2048, 8192, 4096, 2, 4, 16, 8, 32, 64, 128, 256, 512, 1024 });
		public static readonly ByTable BODY_COVER_VALUE_LIST = new ByTable()
			.Set( "" + 1, 0.075 )
			.Set( "" + 2048, 0.075 )
			.Set( "" + 8192, 0.075 )
			.Set( "" + 4096, 0.075 )
			.Set( "" + 2, 0.15 )
			.Set( "" + 4, 0.15 )
			.Set( "" + 8, 0.075 )
			.Set( "" + 16, 0.075 )
			.Set( "" + 32, 0.025 )
			.Set( "" + 64, 0.025 )
			.Set( "" + 128, 0.075 )
			.Set( "" + 256, 0.075 )
			.Set( "" + 512, 0.025 )
			.Set( "" + 1024, 0.025 )
		;
		public static readonly ByTable global_mutations = new ByTable();
		public static readonly ByTable scarySounds = new ByTable(new object [] { 
			"sound/weapons/thudswoosh.ogg", 
			"sound/weapons/Taser.ogg", 
			"sound/weapons/armbomb.ogg", 
			"sound/voice/hiss1.ogg", 
			"sound/voice/hiss2.ogg", 
			"sound/voice/hiss3.ogg", 
			"sound/voice/hiss4.ogg", 
			"sound/voice/hiss5.ogg", 
			"sound/voice/hiss6.ogg", 
			"sound/effects/Glassbr1.ogg", 
			"sound/effects/Glassbr2.ogg", 
			"sound/effects/Glassbr3.ogg", 
			"sound/items/welder.ogg", 
			"sound/items/welder2.ogg", 
			"sound/machines/airlock.ogg", 
			"sound/effects/clownstep1.ogg", 
			"sound/effects/clownstep2.ogg"
		 });
		public static readonly ByTable tachycardics = new ByTable(new object [] { "coffee", "inaprovaline", "hyperzine", "nitroglycerin", "thirteenloko", "nicotine" });
		public static readonly ByTable bradycardics = new ByTable(new object [] { "neurotoxin", "cryoxadone", "clonexadone", "space_drugs", "stoxin" });
		public static readonly ByTable heartstopper = new ByTable(new object [] { "potassium_phorochloride", "zombie_powder" });
		public static readonly ByTable cheartstopper = new ByTable(new object [] { "potassium_chloride" });
		public static readonly ByTable RESTRICTED_CAMERA_NETWORKS = new ByTable(new object [] { "thunder", "ERT", "NUKE", "CREED" });
		public static readonly ByTable assigned_boards = new ByTable();
		public static readonly ByTable DummyCache = new ByTable();
		public static readonly ByTable genders = new ByTable()
			.Set( "male", new Gender( "male", "he", "him", "himself", "his", "his" ) )
			.Set( "female", new Gender( "female", "she", "her", "herself", "her", "hers" ) )
			.Set( "neuter", new Gender( "neutral", "it", "its", "itself", "its", "its" ) )
			.Set( "plural", new Gender( "plural", "they", "them", "themselves", "their", "their" ) )
			.Set( "you", new Gender( "you", "you", "your", "yourself", "your", "your", true ) )
			.Set( "me", new Gender( "me", "I", "me", "myself", "my", "mine", true ) )
		;
		public static ByTable clients = new ByTable();
		public static ByTable admins = new ByTable();
		public static ByTable directory = new ByTable();
		public static ByTable mixed_modes = new ByTable();
		public static ByTable player_list = new ByTable();
		public static ByTable mob_list = new ByTable();
		public static ByTable living_mob_list = new ByTable();
		public static ByTable dead_mob_list = new ByTable();
		public static ByTable areas = new ByTable();
		public static ByTable turfs = new ByTable();
		public static ByTable landmarks_list = new ByTable();
		public static ByTable surgery_steps = new ByTable();
		public static ByTable mechas_list = new ByTable();
		public static readonly dynamic poster_designs = Lang13.GetTypes( typeof(Poster) ) - typeof(Poster) - typeof(Poster_Goldstar);
		public static readonly ByTable underwear_m = new ByTable(new object [] { "White", "Grey", "Green", "Blue", "Black", "Mankini", "Love-Hearts", "Black2", "Grey2", "Stripey", "Kinky", "None" });
		public static readonly ByTable underwear_f = new ByTable(new object [] { "Red", "White", "Yellow", "Blue", "Black", "Thong", "Babydoll", "Baby-Blue", "Green", "Pink", "Kinky", "None" });
		public static readonly ByTable backbaglist = new ByTable(new object [] { "Nothing", "Backpack", "Satchel", "Satchel Alt" });
		public static readonly ByTable hit_appends = new ByTable(new object [] { "-OOF", "-ACK", "-UGH", "-HRNK", "-HURGH", "-GLORF" });
		public static readonly ByTable table_recipes = new ByTable();
		public static ByTable med_hud_users = new ByTable();
		public static ByTable sec_hud_users = new ByTable();
		public static ByTable escape_list = new ByTable();
		public static readonly ByTable vision_types_list = new ByTable(new object [] { "Security Hud", "Medical Hud", "Meson Vision", "Night Vision", "Thermal Vision" });
		public static readonly ByTable watt_suffixes = new ByTable(new object [] { "W", "KW", "MW", "GW", "TW", "PW", "EW", "ZW", "YW" });
		public static readonly ByTable number_digits = new ByTable(new object [] { 
			"one", 
			"two", 
			"three", 
			"four", 
			"five", 
			"six", 
			"seven", 
			"eight", 
			"nine", 
			"ten", 
			"eleven", 
			"twelve", 
			"thirteen", 
			"fourteen", 
			"fifteen", 
			"sixteen", 
			"seventeen", 
			"eighteen", 
			"nineteen"
		 });
		public static readonly ByTable number_tens = new ByTable(new object [] { null, null, "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety" });
		public static readonly ByTable number_units = new ByTable(new object [] { null, "thousand", "million", "billion" });
		public static readonly ByTable existing_typesof_cache = new ByTable();
		public static readonly ByTable WALLITEMS = new ByTable(new object [] { 
			"/obj/machinery/power/apc", 
			"/obj/machinery/alarm", 
			"/obj/item/device/radio/intercom", 
			"/obj/structure/extinguisher_cabinet", 
			"/obj/structure/reagent_dispensers/peppertank", 
			"/obj/machinery/status_display", 
			"/obj/machinery/requests_console", 
			"/obj/machinery/light_switch", 
			"/obj/effect/sign", 
			"/obj/machinery/newscaster", 
			"/obj/machinery/firealarm", 
			"/obj/structure/noticeboard", 
			"/obj/machinery/door_control", 
			"/obj/machinery/computer/security/telescreen", 
			"/obj/machinery/embedded_controller/radio/simple_vent_controller", 
			"/obj/item/weapon/storage/secure/safe", 
			"/obj/machinery/door_timer", 
			"/obj/machinery/flasher", 
			"/obj/machinery/keycard_auth", 
			"/obj/structure/mirror", 
			"/obj/structure/closet/fireaxecabinet", 
			"obj/structure/sign", 
			"obj/structure/painting"
		 });
		public static readonly ByTable snowlayers = new ByTable();
		public static readonly ByTable dirtlayers = new ByTable();
		public static readonly SortInstance sortInstance = new SortInstance();
		public static readonly ByTable hooks = new ByTable();
		public static readonly ByTable possible_exotic_condiments = new ByTable()
			.Set( "enzyme", 10 )
			.Set( "blackpepper", 10 )
			.Set( "vinegar", 10 )
			.Set( "sodiumchloride", 10 )
			.Set( "cinnamon", 10 )
			.Set( "chefspecial", 1 )
			.Set( "frostoil", 10 )
			.Set( "soysauce", 10 )
			.Set( "capsaicin", 10 )
			.Set( "honey", 10 )
			.Set( "ketchup", 10 )
			.Set( "coco", 10 )
		;
		public static readonly ByTable node_con = new ByTable();
		public static readonly ByTable node_ex = new ByTable();
		public static readonly ByTable allowed_items = new ByTable()
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Apple), "applejuice" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Tomato), "tomatojuice" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Carrot), "carrotjuice" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Berries), "berryjuice" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Banana), "banana" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Potato), "potato" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Lemon), "lemonjuice" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Orange), "orangejuice" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Lime), "limejuice" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Watermelonslice), "watermelonjuice" )
			.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Poisonberries), "poisonberryjuice" )
		;
		public static readonly ByTable accepts_reagents_from = new ByTable(new object [] { 
			typeof(Obj_Item_Weapon_ReagentContainers_Glass), 
			typeof(Obj_Item_Weapon_ReagentContainers_Food_Drinks), 
			typeof(Obj_Item_Weapon_ReagentContainers_Food_Condiment), 
			typeof(Obj_Item_Weapon_ReagentContainers_Dropper)
		 });
		public static readonly ByTable tube_dir_list = new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH, GlobalVars.EAST, GlobalVars.WEST, GlobalVars.NORTHEAST, GlobalVars.NORTHWEST, GlobalVars.SOUTHEAST, GlobalVars.SOUTHWEST });
		public static readonly ByTable direction_table = new ByTable();
		public static readonly ByTable ventcrawl_machinery = new ByTable(new object [] { typeof(Obj_Machinery_Atmospherics_Unary_VentPump), typeof(Obj_Machinery_Atmospherics_Unary_VentScrubber), typeof(Obj_Machinery_Atmospherics_Unary_Vent) });
		public static readonly Obj_Screen_Clicker catcher = new Obj_Screen_Clicker();
		public static readonly GlobalHud global_hud = new GlobalHud();
		public static readonly ByTable unstackable_pipes = new ByTable(new object [] { 29 });
		public static readonly ByTable bent_dirs = new ByTable(new object [] { 3, 12 });
		public static readonly ByTable pipeID2State = new ByTable(new object [] { 
			"simple", 
			"simple", 
			"he", 
			"he", 
			"connector", 
			"manifold", 
			"junction", 
			"uvent", 
			"mvalve", 
			"pump", 
			"scrubber", 
			"insulated", 
			"insulated", 
			"filter", 
			"mixer", 
			"passivegate", 
			"volumepump", 
			"heunary", 
			"dvalve", 
			"mtvalve", 
			"manifold4w", 
			"cap", 
			"thermalplate", 
			"injector", 
			"dual-port vent", 
			"passive vent", 
			"dtvalve", 
			"insulated_manifold", 
			"insulated_manifold4w", 
			"manifoldlayer", 
			"layeradapter"
		 });
		public static readonly ByTable nlist = new ByTable(new object [] { 
			"pipe", 
			"bent pipe", 
			"h/e pipe", 
			"bent h/e pipe", 
			"connector", 
			"manifold", 
			"junction", 
			"uvent", 
			"manual valve", 
			"pump", 
			"scrubber", 
			"insulated pipe", 
			"bent insulated pipe", 
			"gas filter", 
			"gas mixer", 
			"passive gate", 
			"volume pump", 
			"heat exchanger", 
			"digital valve", 
			"t-valve", 
			"4-way manifold", 
			"pipe cap", 
			"thermal plate", 
			"injector", 
			"dual-port vent", 
			"passive vent", 
			"digital t-valve", 
			"insulated manifold", 
			"insulated 4-way manifold", 
			"pipe alignment converter", 
			"pipe alignment adapter"
		 });
		public static readonly ByTable straight_pipes = new ByTable(new object [] { 0, 2, 11, 8, 18 });
		public static readonly ByTable bent_pipes = new ByTable(new object [] { 1, 3, 12 });
		public static readonly ByTable manifold_pipes = new ByTable(new object [] { 20, 28 });
		public static readonly ByTable heat_pipes = new ByTable(new object [] { 2, 3, 6 });
		public static readonly ByTable machine_profiling = new ByTable();
		public static ByTable active_diseases = new ByTable();
		public static ByTable events = new ByTable();
		public static ByTable fast_machines = new ByTable();
		public static ByTable machines = new ByTable();
		public static readonly ByTable object_profiling = new ByTable();
		public static ByTable processing_objects = new ByTable();
		public static ByTable pipe_networks = new ByTable();
		public static ByTable atmos_machines = new ByTable();
		public static readonly ByTable power_machinery_profiling = new ByTable();
		public static ByTable power_machines = new ByTable();
		public static ByTable powernets = new ByTable();
		public static ByTable cable_list = new ByTable();
		public static readonly string __btime__dll = "" + ( Game13.system_type == GlobalVars.MS_WINDOWS ? "btime.dll" : "./btime.so" );
		public static readonly dynamic diseases = Lang13.GetTypes( typeof(Disease) ) - typeof(Disease);
		public static ByTable modules = new ByTable().Set( "/obj/machinery/power/apc", "card_reader,power_control,id_auth,cell_power,cell_charge" );
		public static readonly ByTable all_supply_groups = new ByTable(new object [] { "Supplies", "Clothing", "Security", "Hospitality", "Engineering", "Medical", "Science", "Hydroponics", "Vending Machine packs" });
		public static readonly ByTable uplink_items = new ByTable();
		public static readonly ByTable archive_diseases = new ByTable();
		public static readonly ByTable advance_cures = new ByTable(new object [] { "nutriment", "sugar", "orangejuice", "spaceacillin", "kelotane", "ethanol", "leporazine", "synaptizine", "lipozine", "silver", "gold", "plasma" });
		public static readonly dynamic list_symptoms = Lang13.GetTypes( typeof(Symptom) ) - typeof(Symptom);
		public static readonly ByTable dictionary_symptoms = new ByTable();
		public static readonly ByTable animal_butchering_products = new ByTable()
			.Set( typeof(Mob_Living_SimpleAnimal_Cat), new ByTable(new object [] { typeof(ButcheringProduct_Skin_Cat) }) )
			.Set( typeof(Mob_Living_SimpleAnimal_Corgi), new ByTable(new object [] { typeof(ButcheringProduct_Skin_Corgi), typeof(ButcheringProduct_Teeth_Few) }) )
			.Set( typeof(Mob_Living_SimpleAnimal_Lizard), new ByTable(new object [] { typeof(ButcheringProduct_Skin_Lizard) }) )
			.Set( typeof(Mob_Living_SimpleAnimal_Hostile_Asteroid_Goliath), new ByTable(new object [] { typeof(ButcheringProduct_Skin_Goliath), typeof(ButcheringProduct_Teeth_Lots) }) )
			.Set( typeof(Mob_Living_SimpleAnimal_Hostile_GiantSpider), new ByTable(new object [] { typeof(ButcheringProduct_SpiderLegs) }) )
			.Set( typeof(Mob_Living_SimpleAnimal_Hostile_Bear), new ByTable(new object [] { typeof(ButcheringProduct_Skin_Bear), typeof(ButcheringProduct_Teeth_Lots) }) )
			.Set( typeof(Mob_Living_Carbon_Alien_Humanoid), new ByTable(new object [] { typeof(ButcheringProduct_XenoClaw), typeof(ButcheringProduct_Skin_Xeno), typeof(ButcheringProduct_Teeth_Bunch) }) )
			.Set( typeof(Mob_Living_SimpleAnimal_Hostile_Alien), new ByTable(new object [] { typeof(ButcheringProduct_XenoClaw), typeof(ButcheringProduct_Skin_Xeno), typeof(ButcheringProduct_Teeth_Bunch) }) )
			.Set( typeof(Mob_Living_SimpleAnimal_Hostile_Retaliate_Cluwne), new ByTable(new object [] { typeof(ButcheringProduct_Teeth_Bunch) }) )
			.Set( typeof(Mob_Living_SimpleAnimal_Hostile_Creature), new ByTable(new object [] { typeof(ButcheringProduct_Teeth_Lots) }) )
			.Set( typeof(Mob_Living_Carbon_Monkey), new ByTable(new object [] { typeof(ButcheringProduct_Skin_Monkey), typeof(ButcheringProduct_Teeth_Few) }) )
			.Set( typeof(Mob_Living_Carbon_Human), new ByTable(new object [] { typeof(ButcheringProduct_Teeth_Human) }) )
			.Set( typeof(Mob_Living_Carbon_Human_Skellington), new ByTable(new object [] { typeof(ButcheringProduct_Teeth_Human) }) )
			.Set( typeof(Mob_Living_Carbon_Human_Tajaran), new ByTable(new object [] { typeof(ButcheringProduct_Teeth_Human) }) )
			.Set( typeof(Mob_Living_Carbon_Human_Dummy), new ByTable(new object [] { typeof(ButcheringProduct_Teeth_Human) }) )
		;
		public static readonly Getrev revdata = new Getrev( "config/svndir.txt" );
		public static readonly ByTable regex_special = new ByTable(new object [] { 36, 40, 41, 42, 43, 46, 91, 92, 93, 94, 123, 124, 126 });
		public static readonly ByTable regex_classes = new ByTable(new object [] { 100, 108, 115, 117, 119 });
		public static readonly ByTable regex_classtrans = new ByTable(new object [] { "0-9", "a-z", "\\x1- ", "A-Z", "0-9A-Za-z" });
		public static readonly ByTable regex_classinv = new ByTable(new object [] { "\\x1-/:-\\xFF", "\\x1-`{-\\xFF", "!-\\xFF", "\\x1-@[\\xFF", "\\x1-/:-@[-`{-\\xFF" });
		public static readonly ByTable same_wires = new ByTable();
		public static readonly ByTable wireColours = new ByTable(new object [] { "red", "blue", "green", "black", "orange", "brown", "gold", "gray", "cyan", "navy", "purple", "pink" });
		public static ByTable PDA_Manifest = new ByTable();
		public static readonly ByTable vox_sounds = new ByTable()
			.Set( ",", "sound/vox/,.wav" )
			.Set( ".", "sound/vox/..wav" )
			.Set( "a", "sound/vox_fem/a.ogg" )
			.Set( "abortions", "sound/vox_fem/abortions.ogg" )
			.Set( "accelerating", "sound/vox_fem/accelerating.ogg" )
			.Set( "accelerator", "sound/vox_fem/accelerator.ogg" )
			.Set( "accepted", "sound/vox_fem/accepted.ogg" )
			.Set( "access", "sound/vox_fem/access.ogg" )
			.Set( "acknowledge", "sound/vox_fem/acknowledge.ogg" )
			.Set( "acknowledged", "sound/vox_fem/acknowledged.ogg" )
			.Set( "acquired", "sound/vox_fem/acquired.ogg" )
			.Set( "acquisition", "sound/vox_fem/acquisition.ogg" )
			.Set( "across", "sound/vox_fem/across.ogg" )
			.Set( "activate", "sound/vox_fem/activate.ogg" )
			.Set( "activated", "sound/vox_fem/activated.ogg" )
			.Set( "activity", "sound/vox_fem/activity.ogg" )
			.Set( "adios", "sound/vox_fem/adios.ogg" )
			.Set( "administration", "sound/vox_fem/administration.ogg" )
			.Set( "advanced", "sound/vox_fem/advanced.ogg" )
			.Set( "aft", "sound/vox_fem/aft.ogg" )
			.Set( "after", "sound/vox_fem/after.ogg" )
			.Set( "agent", "sound/vox_fem/agent.ogg" )
			.Set( "ai", "sound/vox_fem/ai.ogg" )
			.Set( "alarm", "sound/vox_fem/alarm.ogg" )
			.Set( "alert", "sound/vox_fem/alert.ogg" )
			.Set( "alien", "sound/vox_fem/alien.ogg" )
			.Set( "aligned", "sound/vox_fem/aligned.ogg" )
			.Set( "all", "sound/vox_fem/all.ogg" )
			.Set( "alpha", "sound/vox_fem/alpha.ogg" )
			.Set( "am", "sound/vox_fem/am.ogg" )
			.Set( "amigo", "sound/vox_fem/amigo.ogg" )
			.Set( "ammunition", "sound/vox_fem/ammunition.ogg" )
			.Set( "an", "sound/vox_fem/an.ogg" )
			.Set( "and", "sound/vox_fem/and.ogg" )
			.Set( "andy", "sound/vox_fem/andy.ogg" )
			.Set( "announcement", "sound/vox_fem/announcement.ogg" )
			.Set( "anomalous", "sound/vox_fem/anomalous.ogg" )
			.Set( "antenna", "sound/vox_fem/antenna.ogg" )
			.Set( "antimov", "sound/vox_fem/antimov.ogg" )
			.Set( "any", "sound/vox_fem/any.ogg" )
			.Set( "apprehend", "sound/vox_fem/apprehend.ogg" )
			.Set( "approach", "sound/vox_fem/approach.ogg" )
			.Set( "are", "sound/vox_fem/are.ogg" )
			.Set( "area", "sound/vox_fem/area.ogg" )
			.Set( "arm", "sound/vox_fem/arm.ogg" )
			.Set( "armed", "sound/vox_fem/armed.ogg" )
			.Set( "armor", "sound/vox_fem/armor.ogg" )
			.Set( "armory", "sound/vox_fem/armory.ogg" )
			.Set( "array", "sound/vox_fem/array.ogg" )
			.Set( "arrest", "sound/vox_fem/arrest.ogg" )
			.Set( "asimov", "sound/vox_fem/asimov.ogg" )
			.Set( "ass", "sound/vox_fem/ass.ogg" )
			.Set( "asshole", "sound/vox_fem/asshole.ogg" )
			.Set( "assholes", "sound/vox_fem/assholes.ogg" )
			.Set( "at", "sound/vox_fem/at.ogg" )
			.Set( "atmospherics", "sound/vox_fem/atmospherics.ogg" )
			.Set( "atomic", "sound/vox_fem/atomic.ogg" )
			.Set( "attention", "sound/vox_fem/attention.ogg" )
			.Set( "authorize", "sound/vox_fem/authorize.ogg" )
			.Set( "authorized", "sound/vox_fem/authorized.ogg" )
			.Set( "automatic", "sound/vox_fem/automatic.ogg" )
			.Set( "away", "sound/vox_fem/away.ogg" )
			.Set( "b", "sound/vox_fem/b.ogg" )
			.Set( "back", "sound/vox_fem/back.ogg" )
			.Set( "backman", "sound/vox_fem/backman.ogg" )
			.Set( "bad", "sound/vox_fem/bad.ogg" )
			.Set( "bag", "sound/vox_fem/bag.ogg" )
			.Set( "bailey", "sound/vox_fem/bailey.ogg" )
			.Set( "bar", "sound/vox_fem/bar.ogg" )
			.Set( "barracks", "sound/vox_fem/barracks.ogg" )
			.Set( "base", "sound/vox_fem/base.ogg" )
			.Set( "bay", "sound/vox_fem/bay.ogg" )
			.Set( "be", "sound/vox_fem/be.ogg" )
			.Set( "been", "sound/vox_fem/been.ogg" )
			.Set( "before", "sound/vox_fem/before.ogg" )
			.Set( "beyond", "sound/vox_fem/beyond.ogg" )
			.Set( "biohazard", "sound/vox_fem/biohazard.ogg" )
			.Set( "biological", "sound/vox_fem/biological.ogg" )
			.Set( "biomass", "sound/vox_fem/biomass.ogg" )
			.Set( "birdwell", "sound/vox_fem/birdwell.ogg" )
			.Set( "bitch", "sound/vox_fem/bitch.ogg" )
			.Set( "bitches", "sound/vox_fem/bitches.ogg" )
			.Set( "bizwarn", "sound/vox/bizwarn.wav" )
			.Set( "black", "sound/vox_fem/black.ogg" )
			.Set( "blast", "sound/vox_fem/blast.ogg" )
			.Set( "blocked", "sound/vox_fem/blocked.ogg" )
			.Set( "bloop", "sound/vox/bloop.wav" )
			.Set( "blue", "sound/vox_fem/blue.ogg" )
			.Set( "bomb", "sound/vox_fem/bomb.ogg" )
			.Set( "bombs", "sound/vox_fem/bombs.ogg" )
			.Set( "borer", "sound/vox_fem/borer.ogg" )
			.Set( "borers", "sound/vox_fem/borers.ogg" )
			.Set( "botanist", "sound/vox_fem/botanist.ogg" )
			.Set( "botanists", "sound/vox_fem/botanists.ogg" )
			.Set( "bottom", "sound/vox_fem/bottom.ogg" )
			.Set( "brain", "sound/vox_fem/brain.ogg" )
			.Set( "brains", "sound/vox_fem/brains.ogg" )
			.Set( "bravo", "sound/vox_fem/bravo.ogg" )
			.Set( "brawl", "sound/vox_fem/brawl.ogg" )
			.Set( "breach", "sound/vox_fem/breach.ogg" )
			.Set( "breached", "sound/vox_fem/breached.ogg" )
			.Set( "break", "sound/vox_fem/break.ogg" )
			.Set( "bridge", "sound/vox_fem/bridge.ogg" )
			.Set( "brig", "sound/vox_fem/brig.ogg" )
			.Set( "bust", "sound/vox_fem/bust.ogg" )
			.Set( "but", "sound/vox_fem/but.ogg" )
			.Set( "button", "sound/vox_fem/button.ogg" )
			.Set( "buzwarn", "sound/vox/buzwarn.wav" )
			.Set( "bypass", "sound/vox_fem/bypass.ogg" )
			.Set( "c", "sound/vox_fem/c.ogg" )
			.Set( "cable", "sound/vox_fem/cable.ogg" )
			.Set( "cage", "sound/vox_fem/cage.ogg" )
			.Set( "call", "sound/vox_fem/call.ogg" )
			.Set( "called", "sound/vox_fem/called.ogg" )
			.Set( "can", "sound/vox_fem/can.ogg" )
			.Set( "canal", "sound/vox_fem/canal.ogg" )
			.Set( "cancer", "sound/vox_fem/cancer.ogg" )
			.Set( "cap", "sound/vox_fem/cap.ogg" )
			.Set( "captain", "sound/vox_fem/captain.ogg" )
			.Set( "capture", "sound/vox_fem/capture.ogg" )
			.Set( "cargo", "sound/vox_fem/cargo.ogg" )
			.Set( "catbeast", "sound/vox_fem/catbeast.ogg" )
			.Set( "ce", "sound/vox_fem/ce.ogg" )
			.Set( "ceiling", "sound/vox_fem/ceiling.ogg" )
			.Set( "celsius", "sound/vox_fem/celsius.ogg" )
			.Set( "centcomm", "sound/vox_fem/centcomm.ogg" )
			.Set( "center", "sound/vox_fem/center.ogg" )
			.Set( "centi", "sound/vox_fem/centi.ogg" )
			.Set( "central", "sound/vox_fem/central.ogg" )
			.Set( "chamber", "sound/vox_fem/chamber.ogg" )
			.Set( "changed", "sound/vox_fem/changed.ogg" )
			.Set( "changeling", "sound/vox_fem/changeling.ogg" )
			.Set( "changelings", "sound/vox_fem/changelings.ogg" )
			.Set( "changer", "sound/vox_fem/changer.ogg" )
			.Set( "charlie", "sound/vox_fem/charlie.ogg" )
			.Set( "check", "sound/vox_fem/check.ogg" )
			.Set( "checkpoint", "sound/vox_fem/checkpoint.ogg" )
			.Set( "chef", "sound/vox_fem/chef.ogg" )
			.Set( "chefs", "sound/vox_fem/chefs.ogg" )
			.Set( "chemical", "sound/vox_fem/chemical.ogg" )
			.Set( "chemist", "sound/vox_fem/chemist.ogg" )
			.Set( "chemists", "sound/vox_fem/chemists.ogg" )
			.Set( "cleanup", "sound/vox_fem/cleanup.ogg" )
			.Set( "clear", "sound/vox_fem/clear.ogg" )
			.Set( "clearance", "sound/vox_fem/clearance.ogg" )
			.Set( "close", "sound/vox_fem/close.ogg" )
			.Set( "clown", "sound/vox_fem/clown.ogg" )
			.Set( "clowns", "sound/vox_fem/clowns.ogg" )
			.Set( "cmo", "sound/vox_fem/cmo.ogg" )
			.Set( "code", "sound/vox_fem/code.ogg" )
			.Set( "coded", "sound/vox_fem/coded.ogg" )
			.Set( "collider", "sound/vox_fem/collider.ogg" )
			.Set( "comdom", "sound/vox_fem/comdom.ogg" )
			.Set( "come", "sound/vox_fem/come.ogg" )
			.Set( "command", "sound/vox_fem/command.ogg" )
			.Set( "communication", "sound/vox_fem/communication.ogg" )
			.Set( "complex", "sound/vox_fem/complex.ogg" )
			.Set( "computer", "sound/vox_fem/computer.ogg" )
			.Set( "condition", "sound/vox_fem/condition.ogg" )
			.Set( "conflict", "sound/vox_fem/conflict.ogg" )
			.Set( "connor", "sound/vox_fem/connor.ogg" )
			.Set( "containment", "sound/vox_fem/containment.ogg" )
			.Set( "contamination", "sound/vox_fem/contamination.ogg" )
			.Set( "contraband", "sound/vox_fem/contraband.ogg" )
			.Set( "control", "sound/vox_fem/control.ogg" )
			.Set( "coolant", "sound/vox_fem/coolant.ogg" )
			.Set( "coomer", "sound/vox_fem/coomer.ogg" )
			.Set( "core", "sound/vox_fem/core.ogg" )
			.Set( "correct", "sound/vox_fem/correct.ogg" )
			.Set( "corridor", "sound/vox_fem/corridor.ogg" )
			.Set( "court", "sound/vox_fem/court.ogg" )
			.Set( "coward", "sound/vox_fem/coward.ogg" )
			.Set( "cowards", "sound/vox_fem/cowards.ogg" )
			.Set( "crew", "sound/vox_fem/crew.ogg" )
			.Set( "cross", "sound/vox_fem/cross.ogg" )
			.Set( "cryogenic", "sound/vox_fem/cryogenic.ogg" )
			.Set( "cunt", "sound/vox_fem/cunt.ogg" )
			.Set( "cunts", "sound/vox_fem/cunts.ogg" )
			.Set( "cyborg", "sound/vox_fem/cyborg.ogg" )
			.Set( "cyborgs", "sound/vox_fem/cyborgs.ogg" )
			.Set( "d", "sound/vox_fem/d.ogg" )
			.Set( "dadeda", "sound/vox/dadeda.wav" )
			.Set( "damage", "sound/vox_fem/damage.ogg" )
			.Set( "damaged", "sound/vox_fem/damaged.ogg" )
			.Set( "danger", "sound/vox_fem/danger.ogg" )
			.Set( "day", "sound/vox_fem/day.ogg" )
			.Set( "deactivated", "sound/vox_fem/deactivated.ogg" )
			.Set( "dead", "sound/vox_fem/dead.ogg" )
			.Set( "death", "sound/vox_fem/death.ogg" )
			.Set( "decompression", "sound/vox_fem/decompression.ogg" )
			.Set( "decontamination", "sound/vox_fem/decontamination.ogg" )
			.Set( "deeoo", "sound/vox_fem/deeoo.ogg" )
			.Set( "defense", "sound/vox_fem/defense.ogg" )
			.Set( "degrees", "sound/vox_fem/degrees.ogg" )
			.Set( "delta", "sound/vox_fem/delta.ogg" )
			.Set( "denied", "sound/vox_fem/denied.ogg" )
			.Set( "department", "sound/vox_fem/department.ogg" )
			.Set( "departments", "sound/vox_fem/departments.ogg" )
			.Set( "deploy", "sound/vox_fem/deploy.ogg" )
			.Set( "deployed", "sound/vox_fem/deployed.ogg" )
			.Set( "desk", "sound/vox_fem/desk.ogg" )
			.Set( "destroy", "sound/vox_fem/destroy.ogg" )
			.Set( "destroyed", "sound/vox_fem/destroyed.ogg" )
			.Set( "detain", "sound/vox_fem/detain.ogg" )
			.Set( "detected", "sound/vox_fem/detected.ogg" )
			.Set( "detonation", "sound/vox_fem/detonation.ogg" )
			.Set( "device", "sound/vox_fem/device.ogg" )
			.Set( "did", "sound/vox_fem/did.ogg" )
			.Set( "die", "sound/vox_fem/die.ogg" )
			.Set( "dimensional", "sound/vox_fem/dimensional.ogg" )
			.Set( "dirt", "sound/vox_fem/dirt.ogg" )
			.Set( "disengaged", "sound/vox_fem/disengaged.ogg" )
			.Set( "dish", "sound/vox_fem/dish.ogg" )
			.Set( "disposal", "sound/vox_fem/disposal.ogg" )
			.Set( "distance", "sound/vox_fem/distance.ogg" )
			.Set( "distortion", "sound/vox_fem/distortion.ogg" )
			.Set( "do", "sound/vox_fem/do.ogg" )
			.Set( "doctor", "sound/vox_fem/doctor.ogg" )
			.Set( "doctors", "sound/vox_fem/doctors.ogg" )
			.Set( "doop", "sound/vox/doop.wav" )
			.Set( "door", "sound/vox_fem/door.ogg" )
			.Set( "dorms", "sound/vox_fem/dorms.ogg" )
			.Set( "down", "sound/vox_fem/down.ogg" )
			.Set( "dual", "sound/vox_fem/dual.ogg" )
			.Set( "duct", "sound/vox_fem/duct.ogg" )
			.Set( "e", "sound/vox_fem/e.ogg" )
			.Set( "east", "sound/vox_fem/east.ogg" )
			.Set( "echo", "sound/vox_fem/echo.ogg" )
			.Set( "ed", "sound/vox_fem/ed.ogg" )
			.Set( "effect", "sound/vox_fem/effect.ogg" )
			.Set( "egress", "sound/vox_fem/egress.ogg" )
			.Set( "eight", "sound/vox_fem/eight.ogg" )
			.Set( "eighteen", "sound/vox_fem/eighteen.ogg" )
			.Set( "eighty", "sound/vox_fem/eighty.ogg" )
			.Set( "electric", "sound/vox_fem/electric.ogg" )
			.Set( "electromagnetic", "sound/vox_fem/electromagnetic.ogg" )
			.Set( "elevator", "sound/vox_fem/elevator.ogg" )
			.Set( "eleven", "sound/vox_fem/eleven.ogg" )
			.Set( "eliminate", "sound/vox_fem/eliminate.ogg" )
			.Set( "emergency", "sound/vox_fem/emergency.ogg" )
			.Set( "energy", "sound/vox_fem/energy.ogg" )
			.Set( "engage", "sound/vox_fem/engage.ogg" )
			.Set( "engaged", "sound/vox_fem/engaged.ogg" )
			.Set( "engine", "sound/vox_fem/engine.ogg" )
			.Set( "engineer", "sound/vox_fem/engineer.ogg" )
			.Set( "engineering", "sound/vox_fem/engineering.ogg" )
			.Set( "engineers", "sound/vox_fem/engineers.ogg" )
			.Set( "enter", "sound/vox_fem/enter.ogg" )
			.Set( "entry", "sound/vox_fem/entry.ogg" )
			.Set( "environment", "sound/vox_fem/environment.ogg" )
			.Set( "error", "sound/vox_fem/error.ogg" )
			.Set( "escape", "sound/vox_fem/escape.ogg" )
			.Set( "evacuate", "sound/vox_fem/evacuate.ogg" )
			.Set( "every", "sound/vox_fem/every.ogg" )
			.Set( "everywhere", "sound/vox_fem/everywhere.ogg" )
			.Set( "exchange", "sound/vox_fem/exchange.ogg" )
			.Set( "execution", "sound/vox_fem/execution.ogg" )
			.Set( "exit", "sound/vox_fem/exit.ogg" )
			.Set( "expect", "sound/vox_fem/expect.ogg" )
			.Set( "experiment", "sound/vox_fem/experiment.ogg" )
			.Set( "experimental", "sound/vox_fem/experimental.ogg" )
			.Set( "explode", "sound/vox_fem/explode.ogg" )
			.Set( "explosion", "sound/vox_fem/explosion.ogg" )
			.Set( "exposure", "sound/vox_fem/exposure.ogg" )
			.Set( "exterminate", "sound/vox_fem/exterminate.ogg" )
			.Set( "extinguish", "sound/vox_fem/extinguish.ogg" )
			.Set( "extinguisher", "sound/vox_fem/extinguisher.ogg" )
			.Set( "extreme", "sound/vox_fem/extreme.ogg" )
			.Set( "f", "sound/vox_fem/f.ogg" )
			.Set( "facility", "sound/vox_fem/facility.ogg" )
			.Set( "fahrenheit", "sound/vox_fem/fahrenheit.ogg" )
			.Set( "failed", "sound/vox_fem/failed.ogg" )
			.Set( "failure", "sound/vox_fem/failure.ogg" )
			.Set( "farthest", "sound/vox_fem/farthest.ogg" )
			.Set( "fast", "sound/vox_fem/fast.ogg" )
			.Set( "feet", "sound/vox_fem/feet.ogg" )
			.Set( "field", "sound/vox_fem/field.ogg" )
			.Set( "fifteen", "sound/vox_fem/fifteen.ogg" )
			.Set( "fifth", "sound/vox_fem/fifth.ogg" )
			.Set( "fifty", "sound/vox_fem/fifty.ogg" )
			.Set( "final", "sound/vox_fem/final.ogg" )
			.Set( "fine", "sound/vox_fem/fine.ogg" )
			.Set( "fire", "sound/vox_fem/fire.ogg" )
			.Set( "first", "sound/vox_fem/first.ogg" )
			.Set( "five", "sound/vox_fem/five.ogg" )
			.Set( "flooding", "sound/vox_fem/flooding.ogg" )
			.Set( "floor", "sound/vox_fem/floor.ogg" )
			.Set( "fool", "sound/vox_fem/fool.ogg" )
			.Set( "for", "sound/vox_fem/for.ogg" )
			.Set( "forbidden", "sound/vox_fem/forbidden.ogg" )
			.Set( "force", "sound/vox_fem/force.ogg" )
			.Set( "fore", "sound/vox_fem/fore.ogg" )
			.Set( "forms", "sound/vox_fem/forms.ogg" )
			.Set( "found", "sound/vox_fem/found.ogg" )
			.Set( "four", "sound/vox_fem/four.ogg" )
			.Set( "fourteen", "sound/vox_fem/fourteen.ogg" )
			.Set( "fourth", "sound/vox_fem/fourth.ogg" )
			.Set( "fourty", "sound/vox_fem/fourty.ogg" )
			.Set( "foxtrot", "sound/vox_fem/foxtrot.ogg" )
			.Set( "freeman", "sound/vox_fem/freeman.ogg" )
			.Set( "freezer", "sound/vox_fem/freezer.ogg" )
			.Set( "from", "sound/vox_fem/from.ogg" )
			.Set( "front", "sound/vox_fem/front.ogg" )
			.Set( "fuck", "sound/vox_fem/fuck.ogg" )
			.Set( "fucking", "sound/vox_fem/fucking.ogg" )
			.Set( "fucks", "sound/vox_fem/fucks.ogg" )
			.Set( "fuel", "sound/vox_fem/fuel.ogg" )
			.Set( "g", "sound/vox_fem/g.ogg" )
			.Set( "gas", "sound/vox_fem/gas.ogg" )
			.Set( "gasthevox", "sound/vox_fem/gasthevox.ogg" )
			.Set( "get", "sound/vox_fem/get.ogg" )
			.Set( "glory", "sound/vox_fem/glory.ogg" )
			.Set( "go", "sound/vox_fem/go.ogg" )
			.Set( "going", "sound/vox_fem/going.ogg" )
			.Set( "good", "sound/vox_fem/good.ogg" )
			.Set( "goodbye", "sound/vox_fem/goodbye.ogg" )
			.Set( "gordon", "sound/vox_fem/gordon.ogg" )
			.Set( "got", "sound/vox_fem/got.ogg" )
			.Set( "government", "sound/vox_fem/government.ogg" )
			.Set( "granted", "sound/vox_fem/granted.ogg" )
			.Set( "gray", "sound/vox_fem/gray.ogg" )
			.Set( "great", "sound/vox_fem/great.ogg" )
			.Set( "green", "sound/vox_fem/green.ogg" )
			.Set( "grenade", "sound/vox_fem/grenade.ogg" )
			.Set( "guard", "sound/vox_fem/guard.ogg" )
			.Set( "gulf", "sound/vox_fem/gulf.ogg" )
			.Set( "gun", "sound/vox_fem/gun.ogg" )
			.Set( "guthrie", "sound/vox_fem/guthrie.ogg" )
			.Set( "h", "sound/vox_fem/h.ogg" )
			.Set( "hacker", "sound/vox_fem/hacker.ogg" )
			.Set( "hackers", "sound/vox_fem/hackers.ogg" )
			.Set( "hacking", "sound/vox_fem/hacking.ogg" )
			.Set( "handling", "sound/vox_fem/handling.ogg" )
			.Set( "hangar", "sound/vox_fem/hangar.ogg" )
			.Set( "happening", "sound/vox_fem/happening.ogg" )
			.Set( "harm", "sound/vox_fem/harm.ogg" )
			.Set( "has", "sound/vox_fem/has.ogg" )
			.Set( "have", "sound/vox_fem/have.ogg" )
			.Set( "hazard", "sound/vox_fem/hazard.ogg" )
			.Set( "head", "sound/vox_fem/head.ogg" )
			.Set( "health", "sound/vox_fem/health.ogg" )
			.Set( "heat", "sound/vox_fem/heat.ogg" )
			.Set( "helicopter", "sound/vox_fem/helicopter.ogg" )
			.Set( "helium", "sound/vox_fem/helium.ogg" )
			.Set( "hello", "sound/vox_fem/hello.ogg" )
			.Set( "help", "sound/vox_fem/help.ogg" )
			.Set( "here", "sound/vox_fem/here.ogg" )
			.Set( "hide", "sound/vox_fem/hide.ogg" )
			.Set( "high", "sound/vox_fem/high.ogg" )
			.Set( "highest", "sound/vox_fem/highest.ogg" )
			.Set( "hit", "sound/vox_fem/hit.ogg" )
			.Set( "hole", "sound/vox_fem/hole.ogg" )
			.Set( "hop", "sound/vox_fem/hop.ogg" )
			.Set( "hos", "sound/vox_fem/hos.ogg" )
			.Set( "hostile", "sound/vox_fem/hostile.ogg" )
			.Set( "hot", "sound/vox_fem/hot.ogg" )
			.Set( "hotel", "sound/vox_fem/hotel.ogg" )
			.Set( "hour", "sound/vox_fem/hour.ogg" )
			.Set( "hours", "sound/vox_fem/hours.ogg" )
			.Set( "human", "sound/vox_fem/human.ogg" )
			.Set( "humans", "sound/vox_fem/humans.ogg" )
			.Set( "hundred", "sound/vox_fem/hundred.ogg" )
			.Set( "hunger", "sound/vox_fem/hunger.ogg" )
			.Set( "hydro", "sound/vox_fem/hydro.ogg" )
			.Set( "hydroponics", "sound/vox_fem/hydroponics.ogg" )
			.Set( "i", "sound/vox_fem/i.ogg" )
			.Set( "iaa", "sound/vox_fem/iaa.ogg" )
			.Set( "idiot", "sound/vox_fem/idiot.ogg" )
			.Set( "illegal", "sound/vox_fem/illegal.ogg" )
			.Set( "immediate", "sound/vox_fem/immediate.ogg" )
			.Set( "immediately", "sound/vox_fem/immediately.ogg" )
			.Set( "in", "sound/vox_fem/in.ogg" )
			.Set( "inches", "sound/vox_fem/inches.ogg" )
			.Set( "india", "sound/vox_fem/india.ogg" )
			.Set( "ing", "sound/vox_fem/ing.ogg" )
			.Set( "inoperative", "sound/vox_fem/inoperative.ogg" )
			.Set( "inside", "sound/vox_fem/inside.ogg" )
			.Set( "inspection", "sound/vox_fem/inspection.ogg" )
			.Set( "inspector", "sound/vox_fem/inspector.ogg" )
			.Set( "interchange", "sound/vox_fem/interchange.ogg" )
			.Set( "intruder", "sound/vox_fem/intruder.ogg" )
			.Set( "invalid", "sound/vox_fem/invalid.ogg" )
			.Set( "invasion", "sound/vox_fem/invasion.ogg" )
			.Set( "is", "sound/vox_fem/is.ogg" )
			.Set( "it", "sound/vox_fem/it.ogg" )
			.Set( "j", "sound/vox_fem/j.ogg" )
			.Set( "johnson", "sound/vox_fem/johnson.ogg" )
			.Set( "juliet", "sound/vox_fem/juliet.ogg" )
			.Set( "k", "sound/vox_fem/k.ogg" )
			.Set( "key", "sound/vox_fem/key.ogg" )
			.Set( "kill", "sound/vox_fem/kill.ogg" )
			.Set( "killed", "sound/vox_fem/killed.ogg" )
			.Set( "killing", "sound/vox_fem/killing.ogg" )
			.Set( "kilo", "sound/vox_fem/kilo.ogg" )
			.Set( "kit", "sound/vox_fem/kit.ogg" )
			.Set( "kitchen", "sound/vox_fem/kitchen.ogg" )
			.Set( "l", "sound/vox_fem/l.ogg" )
			.Set( "lab", "sound/vox_fem/lab.ogg" )
			.Set( "lambda", "sound/vox_fem/lambda.ogg" )
			.Set( "laser", "sound/vox_fem/laser.ogg" )
			.Set( "last", "sound/vox_fem/last.ogg" )
			.Set( "launch", "sound/vox_fem/launch.ogg" )
			.Set( "law", "sound/vox_fem/law.ogg" )
			.Set( "laws", "sound/vox_fem/laws.ogg" )
			.Set( "lawyer", "sound/vox_fem/lawyer.ogg" )
			.Set( "leak", "sound/vox_fem/leak.ogg" )
			.Set( "leave", "sound/vox_fem/leave.ogg" )
			.Set( "left", "sound/vox_fem/left.ogg" )
			.Set( "legal", "sound/vox_fem/legal.ogg" )
			.Set( "level", "sound/vox_fem/level.ogg" )
			.Set( "lever", "sound/vox_fem/lever.ogg" )
			.Set( "lie", "sound/vox_fem/lie.ogg" )
			.Set( "lieutenant", "sound/vox_fem/lieutenant.ogg" )
			.Set( "life", "sound/vox_fem/life.ogg" )
			.Set( "light", "sound/vox_fem/light.ogg" )
			.Set( "lima", "sound/vox_fem/lima.ogg" )
			.Set( "liquid", "sound/vox_fem/liquid.ogg" )
			.Set( "lizard", "sound/vox_fem/lizard.ogg" )
			.Set( "loading", "sound/vox_fem/loading.ogg" )
			.Set( "locate", "sound/vox_fem/locate.ogg" )
			.Set( "located", "sound/vox_fem/located.ogg" )
			.Set( "location", "sound/vox_fem/location.ogg" )
			.Set( "lock", "sound/vox_fem/lock.ogg" )
			.Set( "locked", "sound/vox_fem/locked.ogg" )
			.Set( "locker", "sound/vox_fem/locker.ogg" )
			.Set( "lockout", "sound/vox_fem/lockout.ogg" )
			.Set( "loose", "sound/vox_fem/loose.ogg" )
			.Set( "love", "sound/vox_fem/love.ogg" )
			.Set( "lower", "sound/vox_fem/lower.ogg" )
			.Set( "lowest", "sound/vox_fem/lowest.ogg" )
			.Set( "m", "sound/vox_fem/m.ogg" )
			.Set( "magnetic", "sound/vox_fem/magnetic.ogg" )
			.Set( "main", "sound/vox_fem/main.ogg" )
			.Set( "maintenance", "sound/vox_fem/maintenance.ogg" )
			.Set( "malf", "sound/vox_fem/malf.ogg" )
			.Set( "malfunction", "sound/vox_fem/malfunction.ogg" )
			.Set( "malfunctioning", "sound/vox_fem/malfunctioning.ogg" )
			.Set( "man", "sound/vox_fem/man.ogg" )
			.Set( "mass", "sound/vox_fem/mass.ogg" )
			.Set( "materials", "sound/vox_fem/materials.ogg" )
			.Set( "maximum", "sound/vox_fem/maximum.ogg" )
			.Set( "may", "sound/vox_fem/may.ogg" )
			.Set( "me", "sound/vox_fem/me.ogg" )
			.Set( "medbay", "sound/vox_fem/medbay.ogg" )
			.Set( "medical", "sound/vox_fem/medical.ogg" )
			.Set( "men", "sound/vox_fem/men.ogg" )
			.Set( "mercy", "sound/vox_fem/mercy.ogg" )
			.Set( "mesa", "sound/vox_fem/mesa.ogg" )
			.Set( "message", "sound/vox_fem/message.ogg" )
			.Set( "meter", "sound/vox_fem/meter.ogg" )
			.Set( "micro", "sound/vox_fem/micro.ogg" )
			.Set( "middle", "sound/vox_fem/middle.ogg" )
			.Set( "mike", "sound/vox_fem/mike.ogg" )
			.Set( "miles", "sound/vox_fem/miles.ogg" )
			.Set( "military", "sound/vox_fem/military.ogg" )
			.Set( "milli", "sound/vox_fem/milli.ogg" )
			.Set( "million", "sound/vox_fem/million.ogg" )
			.Set( "minefield", "sound/vox_fem/minefield.ogg" )
			.Set( "minimum", "sound/vox_fem/minimum.ogg" )
			.Set( "minutes", "sound/vox_fem/minutes.ogg" )
			.Set( "mister", "sound/vox_fem/mister.ogg" )
			.Set( "mode", "sound/vox_fem/mode.ogg" )
			.Set( "mommi", "sound/vox_fem/mommi.ogg" )
			.Set( "money", "sound/vox_fem/money.ogg" )
			.Set( "monkey", "sound/vox_fem/monkey.ogg" )
			.Set( "monkeys", "sound/vox_fem/monkeys.ogg" )
			.Set( "motor", "sound/vox_fem/motor.ogg" )
			.Set( "motorpool", "sound/vox_fem/motorpool.ogg" )
			.Set( "move", "sound/vox_fem/move.ogg" )
			.Set( "must", "sound/vox_fem/must.ogg" )
			.Set( "my", "sound/vox_fem/my.ogg" )
			.Set( "n", "sound/vox_fem/n.ogg" )
			.Set( "nanotrasen", "sound/vox_fem/nanotrasen.ogg" )
			.Set( "nearest", "sound/vox_fem/nearest.ogg" )
			.Set( "nice", "sound/vox_fem/nice.ogg" )
			.Set( "nine", "sound/vox_fem/nine.ogg" )
			.Set( "nineteen", "sound/vox_fem/nineteen.ogg" )
			.Set( "ninety", "sound/vox_fem/ninety.ogg" )
			.Set( "ninja", "sound/vox_fem/ninja.ogg" )
			.Set( "ninjas", "sound/vox_fem/ninjas.ogg" )
			.Set( "no", "sound/vox_fem/no.ogg" )
			.Set( "nominal", "sound/vox_fem/nominal.ogg" )
			.Set( "north", "sound/vox_fem/north.ogg" )
			.Set( "not", "sound/vox_fem/not.ogg" )
			.Set( "november", "sound/vox_fem/november.ogg" )
			.Set( "now", "sound/vox_fem/now.ogg" )
			.Set( "number", "sound/vox_fem/number.ogg" )
			.Set( "o", "sound/vox_fem/o.ogg" )
			.Set( "objective", "sound/vox_fem/objective.ogg" )
			.Set( "observation", "sound/vox_fem/observation.ogg" )
			.Set( "obtain", "sound/vox_fem/obtain.ogg" )
			.Set( "of", "sound/vox_fem/of.ogg" )
			.Set( "officer", "sound/vox_fem/officer.ogg" )
			.Set( "ok", "sound/vox_fem/ok.ogg" )
			.Set( "on", "sound/vox_fem/on.ogg" )
			.Set( "one", "sound/vox_fem/one.ogg" )
			.Set( "open", "sound/vox_fem/open.ogg" )
			.Set( "operating", "sound/vox_fem/operating.ogg" )
			.Set( "operations", "sound/vox_fem/operations.ogg" )
			.Set( "operative", "sound/vox_fem/operative.ogg" )
			.Set( "option", "sound/vox_fem/option.ogg" )
			.Set( "or", "sound/vox_fem/or.ogg" )
			.Set( "order", "sound/vox_fem/order.ogg" )
			.Set( "organic", "sound/vox_fem/organic.ogg" )
			.Set( "oscar", "sound/vox_fem/oscar.ogg" )
			.Set( "out", "sound/vox_fem/out.ogg" )
			.Set( "outside", "sound/vox_fem/outside.ogg" )
			.Set( "over", "sound/vox_fem/over.ogg" )
			.Set( "overload", "sound/vox_fem/overload.ogg" )
			.Set( "override", "sound/vox_fem/override.ogg" )
			.Set( "p", "sound/vox_fem/p.ogg" )
			.Set( "pacify", "sound/vox_fem/pacify.ogg" )
			.Set( "pain", "sound/vox_fem/pain.ogg" )
			.Set( "pal", "sound/vox_fem/pal.ogg" )
			.Set( "panel", "sound/vox_fem/panel.ogg" )
			.Set( "percent", "sound/vox_fem/percent.ogg" )
			.Set( "perimeter", "sound/vox_fem/perimeter.ogg" )
			.Set( "permitted", "sound/vox_fem/permitted.ogg" )
			.Set( "personnel", "sound/vox_fem/personnel.ogg" )
			.Set( "pipe", "sound/vox_fem/pipe.ogg" )
			.Set( "plant", "sound/vox_fem/plant.ogg" )
			.Set( "plasma", "sound/vox_fem/plasma.ogg" )
			.Set( "platform", "sound/vox_fem/platform.ogg" )
			.Set( "please", "sound/vox_fem/please.ogg" )
			.Set( "point", "sound/vox_fem/point.ogg" )
			.Set( "port", "sound/vox_fem/port.ogg" )
			.Set( "portal", "sound/vox_fem/portal.ogg" )
			.Set( "power", "sound/vox_fem/power.ogg" )
			.Set( "presence", "sound/vox_fem/presence.ogg" )
			.Set( "press", "sound/vox_fem/press.ogg" )
			.Set( "primary", "sound/vox_fem/primary.ogg" )
			.Set( "proceed", "sound/vox_fem/proceed.ogg" )
			.Set( "processing", "sound/vox_fem/processing.ogg" )
			.Set( "progress", "sound/vox_fem/progress.ogg" )
			.Set( "proper", "sound/vox_fem/proper.ogg" )
			.Set( "propulsion", "sound/vox_fem/propulsion.ogg" )
			.Set( "prosecute", "sound/vox_fem/prosecute.ogg" )
			.Set( "protective", "sound/vox_fem/protective.ogg" )
			.Set( "push", "sound/vox_fem/push.ogg" )
			.Set( "q", "sound/vox_fem/q.ogg" )
			.Set( "qm", "sound/vox_fem/qm.ogg" )
			.Set( "quantum", "sound/vox_fem/quantum.ogg" )
			.Set( "quarters", "sound/vox_fem/quarters.ogg" )
			.Set( "quebec", "sound/vox_fem/quebec.ogg" )
			.Set( "queen", "sound/vox_fem/queen.ogg" )
			.Set( "question", "sound/vox_fem/question.ogg" )
			.Set( "questioning", "sound/vox_fem/questioning.ogg" )
			.Set( "quick", "sound/vox_fem/quick.ogg" )
			.Set( "quit", "sound/vox_fem/quit.ogg" )
			.Set( "r", "sound/vox_fem/r.ogg" )
			.Set( "radiation", "sound/vox_fem/radiation.ogg" )
			.Set( "radioactive", "sound/vox_fem/radioactive.ogg" )
			.Set( "rads", "sound/vox_fem/rads.ogg" )
			.Set( "rage", "sound/vox_fem/rage.ogg" )
			.Set( "raider", "sound/vox_fem/raider.ogg" )
			.Set( "raiders", "sound/vox_fem/raiders.ogg" )
			.Set( "rapid", "sound/vox_fem/rapid.ogg" )
			.Set( "rd", "sound/vox_fem/rd.ogg" )
			.Set( "reach", "sound/vox_fem/reach.ogg" )
			.Set( "reached", "sound/vox_fem/reached.ogg" )
			.Set( "reactor", "sound/vox_fem/reactor.ogg" )
			.Set( "recommend", "sound/vox_fem/recommend.ogg" )
			.Set( "red", "sound/vox_fem/red.ogg" )
			.Set( "relay", "sound/vox_fem/relay.ogg" )
			.Set( "released", "sound/vox_fem/released.ogg" )
			.Set( "remaining", "sound/vox_fem/remaining.ogg" )
			.Set( "removal", "sound/vox_fem/removal.ogg" )
			.Set( "renegade", "sound/vox_fem/renegade.ogg" )
			.Set( "repair", "sound/vox_fem/repair.ogg" )
			.Set( "report", "sound/vox_fem/report.ogg" )
			.Set( "reports", "sound/vox_fem/reports.ogg" )
			.Set( "request", "sound/vox_fem/request.ogg" )
			.Set( "requested", "sound/vox_fem/requested.ogg" )
			.Set( "required", "sound/vox_fem/required.ogg" )
			.Set( "research", "sound/vox_fem/research.ogg" )
			.Set( "resevoir", "sound/vox_fem/resevoir.ogg" )
			.Set( "resistance", "sound/vox_fem/resistance.ogg" )
			.Set( "respond", "sound/vox_fem/respond.ogg" )
			.Set( "rest", "sound/vox_fem/rest.ogg" )
			.Set( "right", "sound/vox_fem/right.ogg" )
			.Set( "roboticist", "sound/vox_fem/roboticist.ogg" )
			.Set( "robotics", "sound/vox_fem/robotics.ogg" )
			.Set( "rocket", "sound/vox_fem/rocket.ogg" )
			.Set( "roger", "sound/vox_fem/roger.ogg" )
			.Set( "rogue", "sound/vox_fem/rogue.ogg" )
			.Set( "romeo", "sound/vox_fem/romeo.ogg" )
			.Set( "room", "sound/vox_fem/room.ogg" )
			.Set( "round", "sound/vox_fem/round.ogg" )
			.Set( "run", "sound/vox_fem/run.ogg" )
			.Set( "s", "sound/vox_fem/s.ogg" )
			.Set( "safe", "sound/vox_fem/safe.ogg" )
			.Set( "safety", "sound/vox_fem/safety.ogg" )
			.Set( "sarah", "sound/vox_fem/sarah.ogg" )
			.Set( "sargeant", "sound/vox_fem/sargeant.ogg" )
			.Set( "satellite", "sound/vox_fem/satellite.ogg" )
			.Set( "save", "sound/vox_fem/save.ogg" )
			.Set( "science", "sound/vox_fem/science.ogg" )
			.Set( "scream", "sound/vox_fem/scream.ogg" )
			.Set( "screen", "sound/vox_fem/screen.ogg" )
			.Set( "search", "sound/vox_fem/search.ogg" )
			.Set( "second", "sound/vox_fem/second.ogg" )
			.Set( "secondary", "sound/vox_fem/secondary.ogg" )
			.Set( "seconds", "sound/vox_fem/seconds.ogg" )
			.Set( "sector", "sound/vox_fem/sector.ogg" )
			.Set( "secure", "sound/vox_fem/secure.ogg" )
			.Set( "secured", "sound/vox_fem/secured.ogg" )
			.Set( "security", "sound/vox_fem/security.ogg" )
			.Set( "select", "sound/vox_fem/select.ogg" )
			.Set( "selected", "sound/vox_fem/selected.ogg" )
			.Set( "sensors", "sound/vox_fem/sensors.ogg" )
			.Set( "service", "sound/vox_fem/service.ogg" )
			.Set( "seven", "sound/vox_fem/seven.ogg" )
			.Set( "seventeen", "sound/vox_fem/seventeen.ogg" )
			.Set( "seventy", "sound/vox_fem/seventy.ogg" )
			.Set( "severe", "sound/vox_fem/severe.ogg" )
			.Set( "sewage", "sound/vox_fem/sewage.ogg" )
			.Set( "sewer", "sound/vox_fem/sewer.ogg" )
			.Set( "shield", "sound/vox_fem/shield.ogg" )
			.Set( "shipment", "sound/vox_fem/shipment.ogg" )
			.Set( "shirt", "sound/vox_fem/shirt.ogg" )
			.Set( "shirts", "sound/vox_fem/shirts.ogg" )
			.Set( "shit", "sound/vox_fem/shit.ogg" )
			.Set( "shitcurity", "sound/vox_fem/shitcurity.ogg" )
			.Set( "shitlord", "sound/vox_fem/shitlord.ogg" )
			.Set( "shits", "sound/vox_fem/shits.ogg" )
			.Set( "shitting", "sound/vox_fem/shitting.ogg" )
			.Set( "shock", "sound/vox_fem/shock.ogg" )
			.Set( "shoot", "sound/vox_fem/shoot.ogg" )
			.Set( "shower", "sound/vox_fem/shower.ogg" )
			.Set( "shut", "sound/vox_fem/shut.ogg" )
			.Set( "shuttle", "sound/vox_fem/shuttle.ogg" )
			.Set( "side", "sound/vox_fem/side.ogg" )
			.Set( "sierra", "sound/vox_fem/sierra.ogg" )
			.Set( "sight", "sound/vox_fem/sight.ogg" )
			.Set( "silo", "sound/vox_fem/silo.ogg" )
			.Set( "singularity", "sound/vox_fem/singularity.ogg" )
			.Set( "six", "sound/vox_fem/six.ogg" )
			.Set( "sixteen", "sound/vox_fem/sixteen.ogg" )
			.Set( "sixty", "sound/vox_fem/sixty.ogg" )
			.Set( "skipjack", "sound/vox_fem/skipjack.ogg" )
			.Set( "slime", "sound/vox_fem/slime.ogg" )
			.Set( "slow", "sound/vox_fem/slow.ogg" )
			.Set( "smoke", "sound/vox_fem/smoke.ogg" )
			.Set( "solar", "sound/vox_fem/solar.ogg" )
			.Set( "solars", "sound/vox_fem/solars.ogg" )
			.Set( "soldier", "sound/vox_fem/soldier.ogg" )
			.Set( "some", "sound/vox_fem/some.ogg" )
			.Set( "someone", "sound/vox_fem/someone.ogg" )
			.Set( "something", "sound/vox_fem/something.ogg" )
			.Set( "son", "sound/vox_fem/son.ogg" )
			.Set( "sorry", "sound/vox_fem/sorry.ogg" )
			.Set( "south", "sound/vox_fem/south.ogg" )
			.Set( "squad", "sound/vox_fem/squad.ogg" )
			.Set( "square", "sound/vox_fem/square.ogg" )
			.Set( "ss13", "sound/vox_fem/ss13.ogg" )
			.Set( "stairway", "sound/vox_fem/stairway.ogg" )
			.Set( "starboard", "sound/vox_fem/starboard.ogg" )
			.Set( "station", "sound/vox_fem/station.ogg" )
			.Set( "stations", "sound/vox_fem/stations.ogg" )
			.Set( "status", "sound/vox_fem/status.ogg" )
			.Set( "sterile", "sound/vox_fem/sterile.ogg" )
			.Set( "sterilization", "sound/vox_fem/sterilization.ogg" )
			.Set( "storage", "sound/vox_fem/storage.ogg" )
			.Set( "stuck", "sound/vox_fem/stuck.ogg" )
			.Set( "sub", "sound/vox_fem/sub.ogg" )
			.Set( "subsurface", "sound/vox_fem/subsurface.ogg" )
			.Set( "sudden", "sound/vox_fem/sudden.ogg" )
			.Set( "suffer", "sound/vox_fem/suffer.ogg" )
			.Set( "suffering", "sound/vox_fem/suffering.ogg" )
			.Set( "suit", "sound/vox_fem/suit.ogg" )
			.Set( "superconducting", "sound/vox_fem/superconducting.ogg" )
			.Set( "supercooled", "sound/vox_fem/supercooled.ogg" )
			.Set( "supply", "sound/vox_fem/supply.ogg" )
			.Set( "surface", "sound/vox_fem/surface.ogg" )
			.Set( "surrender", "sound/vox_fem/surrender.ogg" )
			.Set( "surround", "sound/vox_fem/surround.ogg" )
			.Set( "surrounded", "sound/vox_fem/surrounded.ogg" )
			.Set( "switch", "sound/vox_fem/switch.ogg" )
			.Set( "syndicate", "sound/vox_fem/syndicate.ogg" )
			.Set( "system", "sound/vox_fem/system.ogg" )
			.Set( "systems", "sound/vox_fem/systems.ogg" )
			.Set( "t", "sound/vox_fem/t.ogg" )
			.Set( "tactical", "sound/vox_fem/tactical.ogg" )
			.Set( "tajaran", "sound/vox_fem/tajaran.ogg" )
			.Set( "take", "sound/vox_fem/take.ogg" )
			.Set( "talk", "sound/vox_fem/talk.ogg" )
			.Set( "tango", "sound/vox_fem/tango.ogg" )
			.Set( "tank", "sound/vox_fem/tank.ogg" )
			.Set( "target", "sound/vox_fem/target.ogg" )
			.Set( "team", "sound/vox_fem/team.ogg" )
			.Set( "telecomms", "sound/vox_fem/telecomms.ogg" )
			.Set( "temperature", "sound/vox_fem/temperature.ogg" )
			.Set( "temporal", "sound/vox_fem/temporal.ogg" )
			.Set( "ten", "sound/vox_fem/ten.ogg" )
			.Set( "terminal", "sound/vox_fem/terminal.ogg" )
			.Set( "terminated", "sound/vox_fem/terminated.ogg" )
			.Set( "termination", "sound/vox_fem/termination.ogg" )
			.Set( "test", "sound/vox_fem/test.ogg" )
			.Set( "that", "sound/vox_fem/that.ogg" )
			.Set( "the", "sound/vox_fem/the.ogg" )
			.Set( "then", "sound/vox_fem/then.ogg" )
			.Set( "there", "sound/vox_fem/there.ogg" )
			.Set( "third", "sound/vox_fem/third.ogg" )
			.Set( "thirteen", "sound/vox_fem/thirteen.ogg" )
			.Set( "thirty", "sound/vox_fem/thirty.ogg" )
			.Set( "this", "sound/vox_fem/this.ogg" )
			.Set( "those", "sound/vox_fem/those.ogg" )
			.Set( "thousand", "sound/vox_fem/thousand.ogg" )
			.Set( "threat", "sound/vox_fem/threat.ogg" )
			.Set( "three", "sound/vox_fem/three.ogg" )
			.Set( "through", "sound/vox_fem/through.ogg" )
			.Set( "tide", "sound/vox_fem/tide.ogg" )
			.Set( "time", "sound/vox_fem/time.ogg" )
			.Set( "to", "sound/vox_fem/to.ogg" )
			.Set( "top", "sound/vox_fem/top.ogg" )
			.Set( "topside", "sound/vox_fem/topside.ogg" )
			.Set( "touch", "sound/vox_fem/touch.ogg" )
			.Set( "towards", "sound/vox_fem/towards.ogg" )
			.Set( "toxins", "sound/vox_fem/toxins.ogg" )
			.Set( "track", "sound/vox_fem/track.ogg" )
			.Set( "train", "sound/vox_fem/train.ogg" )
			.Set( "traitor", "sound/vox_fem/traitor.ogg" )
			.Set( "traitors", "sound/vox_fem/traitors.ogg" )
			.Set( "transportation", "sound/vox_fem/transportation.ogg" )
			.Set( "triggering", "sound/vox_fem/triggering.ogg" )
			.Set( "truck", "sound/vox_fem/truck.ogg" )
			.Set( "tunnel", "sound/vox_fem/tunnel.ogg" )
			.Set( "turn", "sound/vox_fem/turn.ogg" )
			.Set( "turret", "sound/vox_fem/turret.ogg" )
			.Set( "twelve", "sound/vox_fem/twelve.ogg" )
			.Set( "twenty", "sound/vox_fem/twenty.ogg" )
			.Set( "two", "sound/vox_fem/two.ogg" )
			.Set( "u", "sound/vox_fem/u.ogg" )
			.Set( "unauthorized", "sound/vox_fem/unauthorized.ogg" )
			.Set( "under", "sound/vox_fem/under.ogg" )
			.Set( "uniform", "sound/vox_fem/uniform.ogg" )
			.Set( "unlocked", "sound/vox_fem/unlocked.ogg" )
			.Set( "until", "sound/vox_fem/until.ogg" )
			.Set( "up", "sound/vox_fem/up.ogg" )
			.Set( "update", "sound/vox_fem/update.ogg" )
			.Set( "updated", "sound/vox_fem/updated.ogg" )
			.Set( "updating", "sound/vox_fem/updating.ogg" )
			.Set( "upload", "sound/vox_fem/upload.ogg" )
			.Set( "upper", "sound/vox_fem/upper.ogg" )
			.Set( "uranium", "sound/vox_fem/uranium.ogg" )
			.Set( "us", "sound/vox_fem/us.ogg" )
			.Set( "usa", "sound/vox_fem/usa.ogg" )
			.Set( "use", "sound/vox_fem/use.ogg" )
			.Set( "used", "sound/vox_fem/used.ogg" )
			.Set( "user", "sound/vox_fem/user.ogg" )
			.Set( "v", "sound/vox_fem/v.ogg" )
			.Set( "vacate", "sound/vox_fem/vacate.ogg" )
			.Set( "valid", "sound/vox_fem/valid.ogg" )
			.Set( "vampire", "sound/vox_fem/vampire.ogg" )
			.Set( "vampires", "sound/vox_fem/vampires.ogg" )
			.Set( "vapor", "sound/vox_fem/vapor.ogg" )
			.Set( "vent", "sound/vox_fem/vent.ogg" )
			.Set( "ventilation", "sound/vox_fem/ventilation.ogg" )
			.Set( "victor", "sound/vox_fem/victor.ogg" )
			.Set( "violated", "sound/vox_fem/violated.ogg" )
			.Set( "violation", "sound/vox_fem/violation.ogg" )
			.Set( "virology", "sound/vox_fem/virology.ogg" )
			.Set( "voltage", "sound/vox_fem/voltage.ogg" )
			.Set( "vox", "sound/vox_fem/vox.ogg" )
			.Set( "vox_420", "sound/vox_fem/vox_420.ogg" )
			.Set( "voxtest", "sound/vox_fem/voxtest.ogg" )
			.Set( "voxtest2", "sound/vox_fem/voxtest2.ogg" )
			.Set( "voxtest3", "sound/vox_fem/voxtest3.ogg" )
			.Set( "w", "sound/vox_fem/w.ogg" )
			.Set( "walk", "sound/vox_fem/walk.ogg" )
			.Set( "wall", "sound/vox_fem/wall.ogg" )
			.Set( "wanker", "sound/vox_fem/wanker.ogg" )
			.Set( "wankers", "sound/vox_fem/wankers.ogg" )
			.Set( "want", "sound/vox_fem/want.ogg" )
			.Set( "wanted", "sound/vox_fem/wanted.ogg" )
			.Set( "warm", "sound/vox_fem/warm.ogg" )
			.Set( "warn", "sound/vox_fem/warn.ogg" )
			.Set( "warning", "sound/vox_fem/warning.ogg" )
			.Set( "waste", "sound/vox_fem/waste.ogg" )
			.Set( "water", "sound/vox_fem/water.ogg" )
			.Set( "we", "sound/vox_fem/we.ogg" )
			.Set( "weapon", "sound/vox_fem/weapon.ogg" )
			.Set( "weed", "sound/vox_fem/weed.ogg" )
			.Set( "welcome", "sound/vox_fem/welcome.ogg" )
			.Set( "west", "sound/vox_fem/west.ogg" )
			.Set( "whiskey", "sound/vox_fem/whiskey.ogg" )
			.Set( "white", "sound/vox_fem/white.ogg" )
			.Set( "wiggle", "sound/vox_fem/wiggle.ogg" )
			.Set( "wilco", "sound/vox_fem/wilco.ogg" )
			.Set( "will", "sound/vox_fem/will.ogg" )
			.Set( "with", "sound/vox_fem/with.ogg" )
			.Set( "without", "sound/vox_fem/without.ogg" )
			.Set( "wizard", "sound/vox_fem/wizard.ogg" )
			.Set( "wizards", "sound/vox_fem/wizards.ogg" )
			.Set( "wood", "sound/vox_fem/wood.ogg" )
			.Set( "woody", "sound/vox_fem/woody.ogg" )
			.Set( "woop", "sound/vox/woop.wav" )
			.Set( "x", "sound/vox_fem/x.ogg" )
			.Set( "xeno", "sound/vox_fem/xeno.ogg" )
			.Set( "xenobiology", "sound/vox_fem/xenobiology.ogg" )
			.Set( "xenomorph", "sound/vox_fem/xenomorph.ogg" )
			.Set( "xenomorphs", "sound/vox_fem/xenomorphs.ogg" )
			.Set( "y", "sound/vox_fem/y.ogg" )
			.Set( "yankee", "sound/vox_fem/yankee.ogg" )
			.Set( "yards", "sound/vox_fem/yards.ogg" )
			.Set( "year", "sound/vox_fem/year.ogg" )
			.Set( "yellow", "sound/vox_fem/yellow.ogg" )
			.Set( "yes", "sound/vox_fem/yes.ogg" )
			.Set( "you", "sound/vox_fem/you.ogg" )
			.Set( "your", "sound/vox_fem/your.ogg" )
			.Set( "yourself", "sound/vox_fem/yourself.ogg" )
			.Set( "z", "sound/vox_fem/z.ogg" )
			.Set( "zero", "sound/vox_fem/zero.ogg" )
			.Set( "zone", "sound/vox_fem/zone.ogg" )
			.Set( "zulu", "sound/vox_fem/zulu.ogg" )
		;
		public static readonly ByTable vox_wordlen = new ByTable()
			.Set( "ce", 2 )
			.Set( "cmo", 3 )
			.Set( "gasthevox", 6 )
			.Set( "hop", 3 )
			.Set( "hos", 3 )
			.Set( "iaa", 3 )
			.Set( "rd", 2 )
			.Set( "shitlord", 2 )
			.Set( "ss13", 3 )
			.Set( "vox_420", 4 )
			.Set( "voxtest", 3 )
			.Set( "voxtest2", 42 )
			.Set( "voxtest3", 22 )
			.Set( "woody", 2 )
		;
		public static readonly ByTable outbreak_level_words = new ByTable(new object [] { 
			"sound/vox_fem/one.ogg", 
			"sound/vox_fem/two.ogg", 
			"sound/vox_fem/three.ogg", 
			"sound/vox_fem/four.ogg", 
			"sound/vox_fem/five.ogg", 
			"sound/vox_fem/six.ogg", 
			"sound/vox_fem/seven.ogg"
		 });
		public static ByTable spawned_surprises = new ByTable();
		public static readonly ByTable del_profiling = new ByTable();
		public static readonly ByTable gdel_profiling = new ByTable();
		public static readonly ByTable ghdel_profiling = new ByTable();
		public static readonly ByTable all_radios = new ByTable();
		public static readonly ByTable radiochannels = new ByTable()
			.Set( "Common", 1459 )
			.Set( "AI Private", 1447 )
			.Set( "Deathsquad", 1441 )
			.Set( "Security", 1359 )
			.Set( "Engineering", 1357 )
			.Set( "Command", 1353 )
			.Set( "Medical", 1355 )
			.Set( "Science", 1351 )
			.Set( "Service", 1349 )
			.Set( "Supply", 1347 )
			.Set( "Response Team", 1345 )
			.Set( "Syndicate", 1213 )
			.Set( "DJ", 1201 )
		;
		public static readonly ByTable radiochannelsreverse = new ByTable()
			.Set( "1201", "DJ" )
			.Set( "1213", "Syndicate" )
			.Set( "1345", "Response Team" )
			.Set( "1347", "Supply" )
			.Set( "1349", "Service" )
			.Set( "1351", "Science" )
			.Set( "1355", "Medical" )
			.Set( "1353", "Command" )
			.Set( "1357", "Engineering" )
			.Set( "1359", "Security" )
			.Set( "1441", "Deathsquad" )
			.Set( "1447", "AI Private" )
			.Set( "1459", "Common" )
		;
		public static readonly ByTable CENT_FREQS = new ByTable(new object [] { 1345, 1441 });
		public static ByTable pointers = new ByTable();
		public static ByTable response_team_members = new ByTable();
		public static readonly ByTable freqtospan = new ByTable()
			.Set( "1351", "sciradio" )
			.Set( "1355", "medradio" )
			.Set( "1357", "engradio" )
			.Set( "1347", "supradio" )
			.Set( "1349", "serradio" )
			.Set( "1359", "secradio" )
			.Set( "1353", "comradio" )
			.Set( "1447", "aiprivradio" )
			.Set( "1213", "syndradio" )
			.Set( "1441", "dsquadradio" )
			.Set( "1345", "resteamradio" )
		;
		public static readonly ByTable freqtoname = new ByTable()
			.Set( "1351", "Science" )
			.Set( "1353", "Command" )
			.Set( "1355", "Medical" )
			.Set( "1357", "Engineering" )
			.Set( "1359", "Security" )
			.Set( "1441", "Deathsquad" )
			.Set( "1213", "Syndicate" )
			.Set( "1347", "Supply" )
			.Set( "1349", "Service" )
			.Set( "1447", "AI Private" )
			.Set( "1345", "Response Team" )
		;
		public static readonly ByTable smoothable_unsims = new ByTable(new object [] { "riveted" });
		public static readonly ByTable shatter_sound = new ByTable(new object [] { "sound/effects/Glassbr1.ogg", "sound/effects/Glassbr2.ogg", "sound/effects/Glassbr3.ogg" });
		public static readonly ByTable explosion_sound = new ByTable(new object [] { 
			"sound/effects/Explosion1.ogg", 
			"sound/effects/Explosion2.ogg", 
			"sound/effects/Explosion3.ogg", 
			"sound/effects/Explosion4.ogg", 
			"sound/effects/Explosion5.ogg", 
			"sound/effects/Explosion6.ogg"
		 });
		public static readonly ByTable small_explosion_sound = new ByTable(new object [] { "sound/effects/Explosion_Small1.ogg", "sound/effects/Explosion_Small2.ogg", "sound/effects/Explosion_Small3.ogg" });
		public static readonly ByTable spark_sound = new ByTable(new object [] { "sound/effects/sparks1.ogg", "sound/effects/sparks2.ogg", "sound/effects/sparks3.ogg", "sound/effects/sparks4.ogg" });
		public static readonly ByTable rustle_sound = new ByTable(new object [] { "sound/effects/rustle1.ogg", "sound/effects/rustle2.ogg", "sound/effects/rustle3.ogg", "sound/effects/rustle4.ogg", "sound/effects/rustle5.ogg" });
		public static readonly ByTable punch_sound = new ByTable(new object [] { "sound/weapons/punch1.ogg", "sound/weapons/punch2.ogg", "sound/weapons/punch3.ogg", "sound/weapons/punch4.ogg" });
		public static readonly ByTable clown_sound = new ByTable(new object [] { "sound/effects/clownstep1.ogg", "sound/effects/clownstep2.ogg" });
		public static readonly ByTable swing_hit_sound = new ByTable(new object [] { "sound/weapons/genhit1.ogg", "sound/weapons/genhit2.ogg", "sound/weapons/genhit3.ogg" });
		public static readonly ByTable hiss_sound = new ByTable(new object [] { "sound/voice/hiss1.ogg", "sound/voice/hiss2.ogg", "sound/voice/hiss3.ogg", "sound/voice/hiss4.ogg" });
		public static readonly ByTable page_sound = new ByTable(new object [] { "sound/effects/pageturn1.ogg", "sound/effects/pageturn2.ogg", "sound/effects/pageturn3.ogg" });
		public static readonly ByTable mechstep_sound = new ByTable(new object [] { "sound/mecha/mechstep1.ogg", "sound/mecha/mechstep2.ogg" });
		public static readonly ByTable gib_sound = new ByTable(new object [] { "sound/effects/gib1.ogg", "sound/effects/gib2.ogg", "sound/effects/gib3.ogg" });
		public static readonly ByTable mommicomment_sound = new ByTable(new object [] { 
			"sound/voice/mommi_comment1.ogg", 
			"sound/voice/mommi_comment2.ogg", 
			"sound/voice/mommi_comment3.ogg", 
			"sound/voice/mommi_comment5.ogg", 
			"sound/voice/mommi_comment6.ogg", 
			"sound/voice/mommi_comment7.ogg", 
			"sound/voice/mommi_comment8.ogg"
		 });
		public static readonly ByTable polaroid_sound = new ByTable(new object [] { "sound/items/polaroid1.ogg", "sound/items/polaroid2.ogg" });
		public static readonly ByTable male_scream_sound = new ByTable(new object [] { "sound/misc/malescream1.ogg", "sound/misc/malescream2.ogg", "sound/misc/malescream3.ogg", "sound/misc/malescream4.ogg", "sound/misc/malescream5.ogg" });
		public static readonly ByTable female_scream_sound = new ByTable(new object [] { "sound/misc/femalescream1.ogg", "sound/misc/femalescream2.ogg", "sound/misc/femalescream3.ogg", "sound/misc/femalescream4.ogg", "sound/misc/femalescream5.ogg" });
		public static readonly ByTable lightning_sound = new ByTable(new object [] { 
			"sound/effects/lightning/chainlightning1.ogg", 
			"sound/effects/lightning/chainlightning2.ogg", 
			"sound/effects/lightning/chainlightning7.ogg", 
			"sound/effects/lightning/chainlightning4.ogg", 
			"sound/effects/lightning/chainlightning5.ogg", 
			"sound/effects/lightning/chainlightning6.ogg", 
			"sound/effects/lightning/chainlightning7.ogg"
		 });
		public static readonly Controller_SupplyShuttle supply_shuttle = new Controller_SupplyShuttle();
		public static readonly ByTable mechtoys = new ByTable(new object [] { 
			typeof(Obj_Item_Toy_Prize_Ripley), 
			typeof(Obj_Item_Toy_Prize_Fireripley), 
			typeof(Obj_Item_Toy_Prize_Deathripley), 
			typeof(Obj_Item_Toy_Prize_Gygax), 
			typeof(Obj_Item_Toy_Prize_Durand), 
			typeof(Obj_Item_Toy_Prize_Honk), 
			typeof(Obj_Item_Toy_Prize_Marauder), 
			typeof(Obj_Item_Toy_Prize_Seraph), 
			typeof(Obj_Item_Toy_Prize_Mauler), 
			typeof(Obj_Item_Toy_Prize_Odysseus), 
			typeof(Obj_Item_Toy_Prize_Phazon)
		 });
		public static readonly ByTable ignored_keys = new ByTable(new object [] { "loc", "locs", "parent_type", "vars", "verbs", "type", "x", "y", "z", "group", "contents", "air", "light", "areaMaster", "underlays", "lighting_overlay" });
		public static readonly ByTable moved_landmarks = new ByTable(new object [] { GlobalVars.latejoin, GlobalVars.wizardstart });
		public static readonly ByTable transparent_icons = new ByTable(new object [] { "diagonalWall3", "swall_f5", "swall_f6", "swall_f9", "swall_f10" });
		public static ByTable teleportlocs = new ByTable();
		public static ByTable ghostteleportlocs = new ByTable();
		public static ByTable adminbusteleportlocs = new ByTable();
		public static readonly ByTable centcom_areas = new ByTable(new object [] { 
			typeof(Zone_Centcom), 
			typeof(Zone_Shuttle_Escape_Centcom), 
			typeof(Zone_Shuttle_EscapePod1_Centcom), 
			typeof(Zone_Shuttle_EscapePod2_Centcom), 
			typeof(Zone_Shuttle_EscapePod3_Centcom), 
			typeof(Zone_Shuttle_EscapePod5_Centcom), 
			typeof(Zone_Shuttle_Transport1_Centcom), 
			typeof(Zone_Shuttle_Administration_Centcom), 
			typeof(Zone_Shuttle_Specops_Centcom)
		 });
		public static readonly ByTable the_station_areas = new ByTable(new object [] { 
			typeof(Zone_Shuttle_Arrival), 
			typeof(Zone_Shuttle_Escape_Station), 
			typeof(Zone_Shuttle_EscapePod1_Station), 
			typeof(Zone_Shuttle_EscapePod2_Station), 
			typeof(Zone_Shuttle_EscapePod3_Station), 
			typeof(Zone_Shuttle_EscapePod5_Station), 
			typeof(Zone_Shuttle_Mining_Station), 
			typeof(Zone_Shuttle_Transport1_Station), 
			typeof(Zone_Shuttle_Prison_Station), 
			typeof(Zone_Shuttle_Administration_Station), 
			typeof(Zone_Shuttle_Specops_Station), 
			typeof(Zone_Engineering_Atmos), 
			typeof(Zone_Maintenance), 
			typeof(Zone_Hallway), 
			typeof(Zone_Bridge), 
			typeof(Zone_CrewQuarters), 
			typeof(Zone_Holodeck), 
			typeof(Zone_Mint), 
			typeof(Zone_Library), 
			typeof(Zone_Chapel), 
			typeof(Zone_Lawoffice), 
			typeof(Zone_Engineering), 
			typeof(Zone_Solar), 
			typeof(Zone_Assembly), 
			typeof(Zone_Teleporter), 
			typeof(Zone_Medical), 
			typeof(Zone_Security), 
			typeof(Zone_Supply), 
			typeof(Zone_Janitor), 
			typeof(Zone_Hydroponics), 
			typeof(Zone_Science), 
			typeof(Zone_Storage), 
			typeof(Zone_Tcomms), 
			typeof(Zone_Construction), 
			typeof(Zone_AiMonitored_Storage_Eva), 
			typeof(Zone_AiMonitored_Storage_Secure), 
			typeof(Zone_AiMonitored_Storage_Emergency), 
			typeof(Zone_TurretProtected_AiUpload), 
			typeof(Zone_TurretProtected_TcommsControlRoom), 
			typeof(Zone_TurretProtected_AiUploadFoyer), 
			typeof(Zone_TurretProtected_Ai), 
			typeof(Zone_Derelictparts)
		 });
		public static readonly ByTable dna_activity_bounds = new ByTable( 54 );
		public static readonly ByTable assigned_gene_blocks = new ByTable( 54 );
		public static readonly ByTable assigned_blocks = new ByTable( 54 );
		public static readonly ByTable dna_genes = new ByTable( 0 );
		public static ByTable good_blocks = new ByTable( 0 );
		public static ByTable bad_blocks = new ByTable( 0 );
		public static readonly ByTable skin_styles_female_list = new ByTable();
		public static readonly ByTable hair_styles_list = new ByTable();
		public static ByTable hair_styles_male_list = new ByTable();
		public static ByTable hair_styles_female_list = new ByTable();
		public static readonly ByTable facial_hair_styles_list = new ByTable();
		public static ByTable facial_hair_styles_male_list = new ByTable();
		public static ByTable facial_hair_styles_female_list = new ByTable();
		public static readonly ByTable potential_theft_objectives = new ByTable()
			.Set( "traitor", Lang13.GetTypes( typeof(TheftObjective_Traitor) ) - typeof(TheftObjective_Traitor) )
			.Set( "special", Lang13.GetTypes( typeof(TheftObjective_Special) ) - typeof(TheftObjective_Special) )
			.Set( "heist", Lang13.GetTypes( typeof(TheftObjective_Number_Heist) ) - typeof(TheftObjective_Number_Heist) )
			.Set( "salvage", Lang13.GetTypes( typeof(TheftObjective_Number_Salvage) ) - typeof(TheftObjective_Number_Salvage) )
		;
		public static ByTable blobs = new ByTable();
		public static ByTable blob_cores = new ByTable();
		public static ByTable blob_nodes = new ByTable();
		public static ByTable possible_changeling_IDs = new ByTable(new object [] { 
			"Alpha", 
			"Beta", 
			"Gamma", 
			"Delta", 
			"Epsilon", 
			"Zeta", 
			"Eta", 
			"Theta", 
			"Iota", 
			"Kappa", 
			"Lambda", 
			"Mu", 
			"Nu", 
			"Xi", 
			"Omicron", 
			"Pi", 
			"Rho", 
			"Sigma", 
			"Tau", 
			"Upsilon", 
			"Phi", 
			"Chi", 
			"Psi", 
			"Omega"
		 });
		public static ByTable hivemind_bank = new ByTable();
		public static readonly dynamic powers = Lang13.GetTypes( typeof(Power_Changeling) ) - typeof(Power_Changeling);
		public static ByTable powerinstances = new ByTable();
		public static readonly ByTable narsie_list = new ByTable();
		public static readonly ByTable mr_clean_targets = new ByTable(new object [] { 
			typeof(Obj_Effect_Decal_Cleanable), 
			typeof(Obj_Effect_Decal_MechaWreckage), 
			typeof(Obj_Effect_Decal_Remains), 
			typeof(Obj_Effect_Plantsegment), 
			typeof(Obj_Effect_Biomass), 
			typeof(Obj_Effect_BiomassController), 
			typeof(Obj_Effect_Rune), 
			typeof(Obj_Effect_Blob), 
			typeof(Obj_Effect_Spider)
		 });
		public static readonly ByTable cultwords = new ByTable();
		public static readonly ByTable engwords = new ByTable(new object [] { "travel", "blood", "join", "hell", "destroy", "technology", "self", "see", "other", "hide" });
		public static readonly ByTable rnwords = new ByTable(new object [] { "ire", "ego", "nahlizet", "certum", "veri", "jatkaa", "mgar", "balaq", "karazet", "geeri" });
		public static readonly ByTable rune_list = new ByTable();
		public static readonly ByTable snow_recipes = new ByTable(new object [] { 
			new StackRecipe( "snowman", typeof(Mob_Living_SimpleAnimal_Hostile_Retaliate_Snowman), 10, null, null, 50, false, true ), 
			new StackRecipe( "snow barricade", typeof(Obj_Structure_Window_Barricade_Snow), 20, null, null, 50, true, true )
		 });
		public static readonly ByTable mixed_allowed = new ByTable(new object [] { "autotraitor", "changeling", "cult", "vampire", "wizard" });
		public static readonly ByTable hrefs = new ByTable()
			.Set( "hsbsuit", "Suit Up (Space Travel Gear)" )
			.Set( "hsbmetal", "Spawn 50 Metal" )
			.Set( "hsbglass", "Spawn 50 Glass" )
			.Set( "hsbplasma", "Spawn 50 Plasma" )
			.Set( "phazon", "Spawn 50 Phazon" )
			.Set( "hsbregulator", "Spawn Air Regulator" )
			.Set( "hsbfilter", "Spawn Air Filter" )
			.Set( "hsbcanister", "Spawn Canister" )
			.Set( "hsbfueltank", "Spawn Welding Fuel Tank" )
			.Set( "hsbwater	tank", "Spawn Water Tank" )
			.Set( "hsbtoolbox", "Spawn Toolbox" )
			.Set( "hsbmedkit", "Spawn Medical Kit" )
			.Set( "revive", "Rejuvinate" )
		;
		public static readonly ByTable banned_sandbox_types = new ByTable(new object [] { typeof(Obj_Item_Weapon_Veilrender), typeof(Obj_Item_Weapon_ReagentContainers_Glass_Bottle_Wizarditis), typeof(Obj_Machinery_Singularity) });
		public static readonly ByTable assistant_occupations = new ByTable();
		public static readonly ByTable command_positions = new ByTable(new object [] { "Captain", "Head of Personnel", "Head of Security", "Chief Engineer", "Research Director", "Chief Medical Officer" });
		public static readonly ByTable engineering_positions = new ByTable(new object [] { "Chief Engineer", "Station Engineer", "Atmospheric Technician", "Mechanic" });
		public static readonly ByTable medical_positions = new ByTable(new object [] { "Chief Medical Officer", "Medical Doctor", "Geneticist", "Paramedic", "Chemist" });
		public static readonly ByTable science_positions = new ByTable(new object [] { "Research Director", "Scientist", "Geneticist", "Roboticist", "Mechanic" });
		public static readonly ByTable civilian_positions = new ByTable(new object [] { 
			"Head of Personnel", 
			"Bartender", 
			"Botanist", 
			"Chef", 
			"Janitor", 
			"Librarian", 
			"Quartermaster", 
			"Cargo Technician", 
			"Shaft Miner", 
			"Internal Affairs Agent", 
			"Chaplain", 
			"Assistant"
		 });
		public static readonly ByTable security_positions = new ByTable(new object [] { "Head of Security", "Warden", "Detective", "Security Officer" });
		public static readonly ByTable nonhuman_positions = new ByTable(new object [] { "AI", "Cyborg", "pAI", "Mobile MMI" });
		public static ByTable whitelist = new ByTable();
		public static ByTable alien_whitelist = new ByTable();
		public static readonly ByTable cryo_health_indicator = new ByTable()
			.Set( "full", new Image( "icons/obj/cryogenics.dmi", null, "moverlay_full" ) )
			.Set( "good", new Image( "icons/obj/cryogenics.dmi", null, "moverlay_good" ) )
			.Set( "average", new Image( "icons/obj/cryogenics.dmi", null, "moverlay_average" ) )
			.Set( "bad", new Image( "icons/obj/cryogenics.dmi", null, "moverlay_bad" ) )
			.Set( "worse", new Image( "icons/obj/cryogenics.dmi", null, "moverlay_worse" ) )
			.Set( "crit", new Image( "icons/obj/cryogenics.dmi", null, "moverlay_crit" ) )
			.Set( "dead", new Image( "icons/obj/cryogenics.dmi", null, "moverlay_dead" ) )
		;
		public static ByTable doppler_arrays = new ByTable();
		public static ByTable flashers = new ByTable();
		public static ByTable holosigns = new ByTable();
		public static ByTable igniters = new ByTable();
		public static readonly ByTable multitool_var_whitelist = new ByTable(new object [] { 
			"id_tag", 
			"master_tag", 
			"command", 
			"input_tag", 
			"output_tag", 
			"tag_airpump", 
			"tag_exterior_door", 
			"tag_interior_door", 
			"tag_chamber_sensor", 
			"tag_interior_sensor", 
			"tag_exterior_sensor", 
			"smelter_tag", 
			"stacker_tag"
		 });
		public static ByTable mass_drivers = new ByTable();
		public static readonly FeedNetwork news_network = new FeedNetwork();
		public static ByTable allCasters = new ByTable();
		public static ByTable req_console_assistance = new ByTable();
		public static ByTable req_console_supplies = new ByTable();
		public static ByTable req_console_information = new ByTable();
		public static readonly ByTable allConsoles = new ByTable();
		public static ByTable status_displays = new ByTable();
		public static readonly ByTable ai_emotions = new ByTable()
			.Set( "Very Happy", "ai_veryhappy" )
			.Set( "Happy", "ai_happy" )
			.Set( "Neutral", "ai_neutral" )
			.Set( "Unsure", "ai_unsure" )
			.Set( "Confused", "ai_confused" )
			.Set( "Sad", "ai_sad" )
			.Set( "Surprised", "ai_surprised" )
			.Set( "Agree", "ai_agree" )
			.Set( "Disagree", "ai_disagree" )
			.Set( "Crying", "ai_cry" )
			.Set( "Awesome", "ai_awesome" )
			.Set( "BSOD", "ai_bsod" )
			.Set( "Problems?", "ai_trollface" )
			.Set( "Facepalm", "ai_facepalm" )
			.Set( "Friend Computer", "ai_friend" )
			.Set( "Retro Dorfy", "ai_urist" )
			.Set( "Modern Dorfy", "ai_dwarf" )
			.Set( "Beer", "ai_beer" )
			.Set( "Tribunal", "ai_tribunal" )
			.Set( "Malf Tribunal", "ai_tribunal_malf" )
			.Set( "Plump Helmet", "ai_plump" )
			.Set( "Fish Tank", "ai_fishtank" )
		;
		public static readonly ByTable status_display_images = new ByTable()
			.Set( "NT Logo", "default" )
			.Set( "Red Alert", "redalert" )
			.Set( "Biohazard", "biohazard" )
			.Set( "Lockdown", "lockdown" )
			.Set( "Very Happy", "ai_veryhappy" )
			.Set( "Happy", "ai_happy" )
			.Set( "Neutral", "ai_neutral" )
			.Set( "Unsure", "ai_unsure" )
			.Set( "Confused", "ai_confused" )
			.Set( "Sad", "ai_sad" )
			.Set( "Surprised", "ai_surprised" )
			.Set( "Agree", "ai_agree" )
			.Set( "Disagree", "ai_disagree" )
			.Set( "Crying", "ai_cry" )
			.Set( "Awesome", "ai_awesome" )
			.Set( "BSOD", "ai_bsod" )
			.Set( "Problems?", "ai_trollface" )
			.Set( "Facepalm", "ai_facepalm" )
			.Set( "Friend Computer", "ai_friend" )
			.Set( "Retro Dorfy", "ai_urist" )
			.Set( "Modern Dorfy", "ai_dwarf" )
			.Set( "Beer", "ai_beer" )
			.Set( "Tribunal", "ai_tribunal" )
			.Set( "Malf Tribunal", "ai_tribunal_malf" )
			.Set( "Plump Helmet", "ai_plump" )
			.Set( "Fish Tank", "ai_fishtank" )
		;
		public static ByTable floorbot_targets = new ByTable();
		public static readonly ByTable camera_names = new ByTable();
		public static ByTable tv_monitors = new ByTable();
		public static readonly ByTable shuttle_calls = new ByTable( 0 );
		public static ByTable taxi_computers = new ByTable();
		public static ByTable all_doors = new ByTable();
		public static ByTable alert_overlays_global = new ByTable();
		public static ByTable poddoors = new ByTable();
		public static ByTable recentmessages = new ByTable();
		public static ByTable telecomms_list = new ByTable();
		public static readonly ByTable uristrune_cache = new ByTable();
		public static ByTable explosion_turfs = new ByTable();
		public static readonly ByTable reagents_to_log = new ByTable().Set( "fuel", "welder fuel" ).Set( "plasma", "plasma" ).Set( "pacid", "polytrinic acid" ).Set( "sacid", "sulphuric acid" ).Set( "amutationtoxin", "slime mutation toxin" );
		public static ByTable BUMP_TELEPORTERS = new ByTable();
		public static readonly ByTable portal_cache = new ByTable();
		public static ByTable blood_list = new ByTable();
		public static ByTable beacons = new ByTable();
		public static readonly ByTable all_graffitis = new ByTable()
			.Set( "Left arrow", "left" )
			.Set( "Right arrow", "right" )
			.Set( "Up arrow", "up" )
			.Set( "Down arrow", "down" )
			.Set( "Heart", "heart" )
			.Set( "Lambda", "lambda" )
			.Set( "50 blessings", "50bless" )
			.Set( "Engineer", "engie" )
			.Set( "Guy", "guy" )
			.Set( "The end is nigh", "end" )
			.Set( "Amy + Jon", "amyjon" )
			.Set( "Matt was here", "matt" )
			.Set( "Revolution", "revolution" )
			.Set( "Face", "face" )
			.Set( "Dwarf", "dwarf" )
			.Set( "Uboa", "uboa" )
			.Set( "Rogue cyborgs", "borgsrogue" )
			.Set( "Shitcurity", "shitcurity" )
			.Set( "Catbeast here", "catbeast" )
			.Set( "Vox are pox", "voxpox" )
			.Set( "Hieroglyphs 1", "hieroglyphs1" )
			.Set( "Hieroglyphs 2", "hieroglyphs2" )
			.Set( "Hieroglyphs 3", "hieroglyphs3" )
			.Set( "Securites eunt domus", "security" )
			.Set( "Nanotrasen logo", "nanotrasen" )
			.Set( "Syndicate logo 1", "syndicate1" )
			.Set( "Syndicate logo 2", "syndicate2" )
			.Set( "Don't believe these lies", "lie" )
			.Set( "Chaos Undivided", "chaos" )
		;
		public static ByTable deskbell_default_frequencies = new ByTable();
		public static readonly dynamic deskbell_freq_cargo = Lang13.Call( typeof(Obj_Item_Device_Deskbell_Signaler).GetMethod( "get_new_bellfreq" ) );
		public static readonly dynamic deskbell_freq_hop = Lang13.Call( typeof(Obj_Item_Device_Deskbell_Signaler).GetMethod( "get_new_bellfreq" ) );
		public static readonly dynamic deskbell_freq_medbay = Lang13.Call( typeof(Obj_Item_Device_Deskbell_Signaler).GetMethod( "get_new_bellfreq" ) );
		public static readonly dynamic deskbell_freq_brig = Lang13.Call( typeof(Obj_Item_Device_Deskbell_Signaler).GetMethod( "get_new_bellfreq" ) );
		public static readonly dynamic deskbell_freq_rnd = Lang13.Call( typeof(Obj_Item_Device_Deskbell_Signaler).GetMethod( "get_new_bellfreq" ) );
		public static ByTable camera_bugs = new ByTable();
		public static readonly ByTable pda_app_menus = new ByTable(new object [] { 101, 102, 103, 104, 105, 106, 107 });
		public static readonly ByTable chatrooms = new ByTable();
		public static ByTable PDAs = new ByTable();
		public static readonly ByTable available_paintings = new ByTable(new object [] { 
			"duck", 
			"mario", 
			"gradius", 
			"kudzu", 
			"dwarf", 
			"xenolisa", 
			"bottles", 
			"aymao", 
			"flowey", 
			"sunset", 
			"Flowereater", 
			"Sadclown", 
			"hospital", 
			"prophecy", 
			"Mime", 
			"wizard", 
			"bland", 
			"Blu", 
			"Kate"
		 });
		public static readonly ByTable cable_recipes = new ByTable(new object [] { new StackRecipe( "cable cuffs", typeof(Obj_Item_Weapon_Handcuffs_Cable), 15, null, null, 3, false, false ) });
		public static readonly ByTable sandstone_recipes = new ByTable(new object [] { 
			new StackRecipe( "pile of dirt", typeof(Obj_Machinery_PortableAtmospherics_Hydroponics_Soil), 3, null, null, 10, true, true ), 
			new StackRecipe( "sandstone door", typeof(Obj_Machinery_Door_Mineral_Sandstone), 10, null, null, null, true, true )
		 });
		public static readonly ByTable diamond_recipes = new ByTable(new object [] { 
			new StackRecipe( "diamond floor tile", typeof(Obj_Item_Stack_Tile_Mineral_Diamond), 1, 4, 20 ), 
			new StackRecipe( "diamond door", typeof(Obj_Machinery_Door_Mineral_Transparent_Diamond), 10, null, null, null, true, true )
		 });
		public static readonly ByTable uranium_recipes = new ByTable(new object [] { 
			new StackRecipe( "uranium floor tile", typeof(Obj_Item_Stack_Tile_Mineral_Uranium), 1, 4, 20 ), 
			new StackRecipe( "uranium door", typeof(Obj_Machinery_Door_Mineral_Uranium), 10, null, null, null, true, true )
		 });
		public static readonly ByTable plasma_recipes = new ByTable(new object [] { 
			new StackRecipe( "plasma floor tile", typeof(Obj_Item_Stack_Tile_Mineral_Plasma), 1, 4, 20 ), 
			new StackRecipe( "plasma door", typeof(Obj_Machinery_Door_Mineral_Transparent_Plasma), 10, null, null, null, true, true )
		 });
		public static readonly ByTable plastic_recipes = new ByTable(new object [] { 
			new StackRecipe( "plastic floor tile", typeof(Obj_Item_Stack_Tile_Mineral_Plastic), 1, 4, 20 ), 
			new StackRecipe( "plastic crate", typeof(Obj_Structure_Closet_Pcrate), 10, null, null, null, true, true ), 
			new StackRecipe( "plastic ashtray", typeof(Obj_Item_Ashtray_Plastic), 2, null, null, null, true, true ), 
			new StackRecipe( "plastic fork", typeof(Obj_Item_Weapon_Kitchen_Utensil_Fork_Plastic), 1, null, null, null, null, true ), 
			new StackRecipe( "plastic spoon", typeof(Obj_Item_Weapon_Kitchen_Utensil_Spoon_Plastic), 1, null, null, null, null, true ), 
			new StackRecipe( "plastic knife", typeof(Obj_Item_Weapon_Kitchen_Utensil_Knife_Plastic), 1, null, null, null, null, true ), 
			new StackRecipe( "plastic bag", typeof(Obj_Item_Weapon_Storage_Bag_Plasticbag), 3, null, null, null, null, true ), 
			new StackRecipe( "blood bag", typeof(Obj_Item_Weapon_ReagentContainers_Blood_Empty), 3, null, null, null, null, true ), 
			new StackRecipe( "plastic coat", typeof(Obj_Item_Clothing_Suit_Raincoat), 5 ), 
			new StackRecipe( "plastic flaps", typeof(Obj_Structure_Plasticflaps), 10, null, null, null, true, true, true ), 
			new StackRecipe( "water-cooler", typeof(Obj_Structure_ReagentDispensers_WaterCooler), 4, null, null, null, true, true )
		 });
		public static readonly ByTable gold_recipes = new ByTable(new object [] { 
			new StackRecipe( "golden floor tile", typeof(Obj_Item_Stack_Tile_Mineral_Gold), 1, 4, 20 ), 
			new StackRecipe( "golden door", typeof(Obj_Machinery_Door_Mineral_Gold), 10, null, null, null, true, true )
		 });
		public static readonly ByTable phazon_recipes = new ByTable(new object [] { new StackRecipe( "phazon floor tile", typeof(Obj_Item_Stack_Tile_Mineral_Phazon), 1, 4, 20 ) });
		public static readonly ByTable silver_recipes = new ByTable(new object [] { 
			new StackRecipe( "silver floor tile", typeof(Obj_Item_Stack_Tile_Mineral_Silver), 1, 4, 20 ), 
			new StackRecipe( "silver door", typeof(Obj_Machinery_Door_Mineral_Silver), 10, null, null, null, true, true )
		 });
		public static readonly ByTable clown_recipes = new ByTable(new object [] { new StackRecipe( "bananium floor tile", typeof(Obj_Item_Stack_Tile_Mineral_Clown), 1, 4, 20 ) });
		public static readonly ByTable metal_recipes = new ByTable(new object [] { 
			new StackRecipe( "floor tile", typeof(Obj_Item_Stack_Tile_Plasteel), 1, 4, 20 ), 
			new StackRecipe( "metal rod", typeof(Obj_Item_Stack_Rods), 1, 2, 60 ), 
			null, 
			new StackRecipe( "computer frame", typeof(Obj_Structure_Computerframe), 5, null, null, 25, true ), 
			new StackRecipe( "wall girders", typeof(Obj_Structure_Girder), 2, null, null, 50, true, true ), 
			new StackRecipe( "machine frame", typeof(Obj_Machinery_ConstructableFrame_MachineFrame), 5, null, null, 25, true, true ), 
			new StackRecipe( "mirror frame", typeof(Obj_Structure_MirrorFrame), 5, null, null, 25, true, true ), 
			new StackRecipe( "turret frame", typeof(Obj_Machinery_PortaTurretConstruct), 5, null, null, 25, true, true ), 
			null, 
			new StackRecipeList( "chairs and beds", new ByTable(new object [] { 
				new StackRecipe( "dark office chair", typeof(Obj_Structure_Bed_Chair_Office_Dark), 5, null, null, null, true, true ), 
				new StackRecipe( "light office chair", typeof(Obj_Structure_Bed_Chair_Office_Light), 5, null, null, null, true, true ), 
				new StackRecipe( "beige comfy chair", typeof(Obj_Structure_Bed_Chair_Comfy_Beige), 2, null, null, null, true, true ), 
				new StackRecipe( "black comfy chair", typeof(Obj_Structure_Bed_Chair_Comfy_Black), 2, null, null, null, true, true ), 
				new StackRecipe( "brown comfy chair", typeof(Obj_Structure_Bed_Chair_Comfy_Brown), 2, null, null, null, true, true ), 
				new StackRecipe( "lime comfy chair", typeof(Obj_Structure_Bed_Chair_Comfy_Lime), 2, null, null, null, true, true ), 
				new StackRecipe( "teal comfy chair", typeof(Obj_Structure_Bed_Chair_Comfy_Teal), 2, null, null, null, true, true ), 
				new StackRecipe( "stool", typeof(Obj_Item_Weapon_Stool) ), 
				new StackRecipe( "chair", typeof(Obj_Structure_Bed_Chair), null, null, null, null, true, true ), 
				new StackRecipe( "bed", typeof(Obj_Structure_Bed), 2, null, null, null, true, true )
			 }) ), 
			new StackRecipe( "table parts", typeof(Obj_Item_Weapon_TableParts), 2 ), 
			new StackRecipe( "rack parts", typeof(Obj_Item_Weapon_RackParts) ), 
			new StackRecipe( "closet", typeof(Obj_Structure_Closet), 2, null, null, 15, true ), 
			null, 
			new StackRecipeList( "airlock assemblies", new ByTable(new object [] { 
				new StackRecipe( "standard airlock assembly", typeof(Obj_Structure_DoorAssembly), 4, null, null, 50, true, true ), 
				new StackRecipe( "command airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyCom), 4, null, null, 50, true, true ), 
				new StackRecipe( "security airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblySec), 4, null, null, 50, true, true ), 
				new StackRecipe( "engineering airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyEng), 4, null, null, 50, true, true ), 
				new StackRecipe( "mining airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyMin), 4, null, null, 50, true, true ), 
				new StackRecipe( "atmospherics airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyAtmo), 4, null, null, 50, true, true ), 
				new StackRecipe( "research airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyResearch), 4, null, null, 50, true, true ), 
				new StackRecipe( "medical airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyMed), 4, null, null, 50, true, true ), 
				new StackRecipe( "maintenance airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyMai), 4, null, null, 50, true, true ), 
				new StackRecipe( "external airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyExt), 4, null, null, 50, true, true ), 
				new StackRecipe( "freezer airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyFre), 4, null, null, 50, true, true ), 
				new StackRecipe( "airtight hatch assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyHatch), 4, null, null, 50, true, true ), 
				new StackRecipe( "maintenance hatch assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyMhatch), 4, null, null, 50, true, true ), 
				new StackRecipe( "high security airlock assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyHighsecurity), 4, null, null, 50, true, true )
			 }), 4 ), 
			null, 
			new StackRecipe( "canister", typeof(Obj_Machinery_PortableAtmospherics_Canister), 10, null, null, 15, true ), 
			new StackRecipe( "iv drip", typeof(Obj_Machinery_IvDrip), 2, null, null, 25, true ), 
			new StackRecipe( "meat spike", typeof(Obj_Structure_Kitchenspike), 2, null, null, 25, true, true ), 
			new StackRecipe( "shower", typeof(Obj_Machinery_Shower), 2, null, null, 25, true, true ), 
			new StackRecipe( "grenade casing", typeof(Obj_Item_Weapon_Grenade_ChemGrenade) ), 
			new StackRecipe( "desk bell shell", typeof(Obj_Item_Device_DeskbellAssembly), 2 ), 
			null, 
			new StackRecipeList( "mounted frames", new ByTable(new object [] { 
				new StackRecipe( "apc frame", typeof(Obj_Item_Mounted_Frame_ApcFrame), 2 ), 
				new StackRecipe( "air alarm frame", typeof(Obj_Item_Mounted_Frame_AlarmFrame), 2 ), 
				new StackRecipe( "fire alarm frame", typeof(Obj_Item_Mounted_Frame_Firealarm), 2 ), 
				new StackRecipe( "lightswitch frame", typeof(Obj_Item_Mounted_Frame_LightSwitch), 2 ), 
				new StackRecipe( "intercom frame", typeof(Obj_Item_Mounted_Frame_Intercom), 2 ), 
				new StackRecipe( "sound system frame", typeof(Obj_Item_Mounted_Frame_Soundsystem), 2 ), 
				new StackRecipe( "nanomed frame", typeof(Obj_Item_Mounted_Frame_Wallmed), 3, null, null, 25, false, true ), 
				new StackRecipe( "light fixture frame", typeof(Obj_Item_Mounted_Frame_LightFixture), 2 ), 
				new StackRecipe( "small light fixture frame", typeof(Obj_Item_Mounted_Frame_LightFixture_Small), 1 ), 
				new StackRecipe( "embedded controller frame", typeof(Obj_Item_Mounted_Frame_AirlockController), 1, null, null, 50, false, true ), 
				new StackRecipe( "access button frame", typeof(Obj_Item_Mounted_Frame_AccessButton), 1, null, null, 50, false, true ), 
				new StackRecipe( "airlock sensor frame", typeof(Obj_Item_Mounted_Frame_AirlockSensor), 1, null, null, 50, false, true ), 
				new StackRecipe( "mass driver button frame", typeof(Obj_Item_Mounted_Frame_DriverButton), 1, null, null, 50, false, true ), 
				new StackRecipe( "lantern hook", typeof(Obj_Item_Mounted_Frame_HangingLanternHook), 1, null, null, 25, false, false )
			 }) ), 
			null, 
			new StackRecipe( "iron door", typeof(Obj_Machinery_Door_Mineral_Iron), 20, null, null, null, true, true ), 
			new StackRecipe( "stove", typeof(Obj_Machinery_SpaceHeater_Campfire_Stove), 5, null, null, 25, true, true )
		 });
		public static readonly ByTable plasteel_recipes = new ByTable(new object [] { 
			new StackRecipe( "AI core", typeof(Obj_Structure_AIcore), 4, null, null, 50, true ), 
			new StackRecipe( "Metal crate", typeof(Obj_Structure_Closet_Crate), 10, null, null, 50, true ), 
			new StackRecipe( "RUST fuel assembly port frame", typeof(Obj_Item_Mounted_Frame_RustFuelAssemblyPort), 12, null, null, 50, true ), 
			new StackRecipe( "RUST fuel compressor frame", typeof(Obj_Item_Mounted_Frame_RustFuelCompressor), 12, null, null, 50, true ), 
			new StackRecipe( "Mass Driver frame", typeof(Obj_Machinery_MassDriverFrame), 3, null, null, 50, true ), 
			new StackRecipe( "Tank dispenser", typeof(Obj_Structure_Dispenser_Empty), 2, null, null, 10, true ), 
			new StackRecipe( "Fireaxe cabinet", typeof(Obj_Item_Mounted_Frame_FireaxeCabinetFrame), 2, null, null, 50 ), 
			null, 
			new StackRecipe( "Vault Door assembly", typeof(Obj_Structure_DoorAssembly_DoorAssemblyVault), 8, null, null, 50, true, true )
		 });
		public static readonly ByTable wood_recipes = new ByTable(new object [] { 
			new StackRecipe( "wooden sandals", typeof(Obj_Item_Clothing_Shoes_Sandal) ), 
			new StackRecipe( "wood floor tile", typeof(Obj_Item_Stack_Tile_Wood), 1, 4, 20 ), 
			new StackRecipe( "table parts", typeof(Obj_Item_Weapon_TableParts_Wood), 2 ), 
			new StackRecipe( "wooden chair", typeof(Obj_Structure_Bed_Chair_Wood_Normal), 3, null, null, 10, true, true ), 
			new StackRecipe( "barricade kit", typeof(Obj_Item_Weapon_BarricadeKit), 5 ), 
			new StackRecipe( "bookcase", typeof(Obj_Structure_Bookcase), 5, null, null, 50, true, true ), 
			new StackRecipe( "wooden door", typeof(Obj_Machinery_Door_Mineral_Wood), 10, null, null, 20, true, true ), 
			new StackRecipe( "coffin", typeof(Obj_Structure_Closet_Coffin), 5, null, null, 15, true, true ), 
			new StackRecipe( "apiary", typeof(Obj_Item_Apiary), 10, null, null, 25, false, false ), 
			new StackRecipe( "bowl", typeof(Obj_Item_Trash_Bowl), 1 ), 
			new StackRecipe( "notice board", typeof(Obj_Structure_Noticeboard), 2, null, null, 15, true, true ), 
			new StackRecipe( "blank canvas", typeof(Obj_Item_Mounted_Frame_Painting_Blank), 2, null, null, 15 ), 
			new StackRecipe( "campfire", typeof(Obj_Machinery_SpaceHeater_Campfire), 4, null, null, 35, true, true ), 
			new StackRecipe( "spit", typeof(Obj_Machinery_Cooking_Grill_Spit), 1, null, null, 10, true, true ), 
			new StackRecipe( "wall girders", typeof(Obj_Structure_Girder_Wood), 2, null, null, 50, true, true )
		 });
		public static readonly ByTable cardboard_recipes = new ByTable(new object [] { 
			new StackRecipe( "box", typeof(Obj_Item_Weapon_Storage_Box) ), 
			new StackRecipe( "large box", typeof(Obj_Item_Weapon_Storage_Box_Large), 4 ), 
			new StackRecipe( "light tubes box", typeof(Obj_Item_Weapon_Storage_Box_Lights_Tubes) ), 
			new StackRecipe( "light bulbs box", typeof(Obj_Item_Weapon_Storage_Box_Lights_Bulbs) ), 
			new StackRecipe( "mouse traps box", typeof(Obj_Item_Weapon_Storage_Box_Mousetraps) ), 
			new StackRecipe( "candle box", typeof(Obj_Item_Weapon_Storage_Fancy_CandleBox_Empty) ), 
			new StackRecipe( "crayon box", typeof(Obj_Item_Weapon_Storage_Fancy_Crayons_Empty) ), 
			new StackRecipe( "cardborg suit", typeof(Obj_Item_Clothing_Suit_Cardborg), 3 ), 
			new StackRecipe( "cardborg helmet", typeof(Obj_Item_Clothing_Head_Cardborg) ), 
			new StackRecipe( "pizza box", typeof(Obj_Item_Pizzabox) ), 
			new StackRecipe( "folder", typeof(Obj_Item_Weapon_Folder) ), 
			new StackRecipe( "flare box", typeof(Obj_Item_Weapon_Storage_Fancy_Flares_Empty) ), 
			new StackRecipe( "donut box", typeof(Obj_Item_Weapon_Storage_Fancy_DonutBox_Empty) ), 
			new StackRecipe( "eggbox", typeof(Obj_Item_Weapon_Storage_Fancy_EggBox_Empty) ), 
			new StackRecipe( "paper bin", typeof(Obj_Item_Weapon_PaperBin_Empty) )
		 });
		public static readonly ByTable charcoal_recipes = new ByTable();
		public static readonly ByTable lightfloor_colors = new ByTable()
			.Set( "white", "#ffffff" )
			.Set( "red", "#ff0000" )
			.Set( "orange", "#ff6a00" )
			.Set( "yellow", "#ffd800" )
			.Set( "green", "#00ff00" )
			.Set( "dark green", "#3cd700" )
			.Set( "teal", "#00eaea" )
			.Set( "light blue", "#0094ff" )
			.Set( "dark blue", "#0026ff" )
			.Set( "purple", "#b200ff" )
			.Set( "pink", "#ff87ff" )
		;
		public static readonly ByTable moneytypes = new ByTable()
			.Set( typeof(Obj_Item_Weapon_Spacecash_C1000), 1000 )
			.Set( typeof(Obj_Item_Weapon_Spacecash_C100), 100 )
			.Set( typeof(Obj_Item_Weapon_Spacecash_C10), 10 )
			.Set( typeof(Obj_Item_Weapon_Spacecash), 1 )
		;
		public static readonly ByTable cached_icons = new ByTable();
		public static ByTable tracking_implants = new ByTable();
		public static readonly ByTable bottle_colour_choices = new ByTable()
			.Set( "Blue", "#0094FF" )
			.Set( "Dark Blue", "#00137F" )
			.Set( "Green", "#129E0A" )
			.Set( "Orange", "#FF6A00" )
			.Set( "Purple", "#A17FFF" )
			.Set( "Red", "#BE0000" )
			.Set( "Yellow", "#FFD800" )
			.Set( "Grey", "#9F9F9F" )
			.Set( "White", "#FFFFFF" )
			.Set( "Custom", "#FFFFFF" )
		;
		public static ByTable all_docking_ports = new ByTable();
		public static readonly Shuttle_Supply cargo_shuttle = new Shuttle_Supply( typeof(Zone_Shuttle_Supply) );
		public static readonly Shuttle_Escape escape_shuttle = new Shuttle_Escape( typeof(Zone_Shuttle_Escape_Centcom) );
		public static readonly Shuttle_Mining mining_shuttle = new Shuttle_Mining( typeof(Zone_Shuttle_Mining_Station) );
		public static readonly Shuttle_Arrival arrival_shuttle = new Shuttle_Arrival( typeof(Zone_Shuttle_Arrival_Station) );
		public static readonly Shuttle_Transport transport_shuttle = new Shuttle_Transport( typeof(Zone_Shuttle_Transport1_Centcom) );
		public static readonly Shuttle_Admin admin_shuttle = new Shuttle_Admin( typeof(Zone_Shuttle_Administration_Centcom) );
		public static readonly Shuttle_Research research_shuttle = new Shuttle_Research( typeof(Zone_Shuttle_Research_Station) );
		public static readonly Shuttle_Salvage salvage_shuttle = new Shuttle_Salvage( typeof(Zone_Shuttle_Salvage_Start) );
		public static readonly Shuttle_Syndicate syndicate_shuttle = new Shuttle_Syndicate( typeof(Zone_SyndicateStation_Start) );
		public static readonly Shuttle_Taxi_A taxi_a = new Shuttle_Taxi_A( typeof(Zone_Shuttle_TaxiA_EngineeringCargoStation) );
		public static readonly Shuttle_Taxi_B taxi_b = new Shuttle_Taxi_B( typeof(Zone_Shuttle_TaxiB_EngineeringCargoStation) );
		public static readonly Shuttle_Vox vox_shuttle = new Shuttle_Vox( typeof(Zone_Shuttle_Vox_Station) );
		public static readonly ByTable icons_to_ignore_at_floor_init = new ByTable(new object [] { 
			"damaged1", 
			"damaged2", 
			"damaged3", 
			"damaged4", 
			"damaged5", 
			"panelscorched", 
			"floorscorched1", 
			"floorscorched2", 
			"platingdmg1", 
			"platingdmg2", 
			"platingdmg3", 
			"plating", 
			"light_on", 
			"light_on_flicker1", 
			"light_on_flicker2", 
			"light_on_clicker3", 
			"light_on_clicker4", 
			"light_on_clicker5", 
			"light_broken", 
			"light_on_broken", 
			"light_off", 
			"wall_thermite", 
			"grass1", 
			"grass2", 
			"grass3", 
			"grass4", 
			"asteroid", 
			"asteroid_dug", 
			"asteroid0", 
			"asteroid1", 
			"asteroid2", 
			"asteroid3", 
			"asteroid4", 
			"asteroid5", 
			"asteroid6", 
			"asteroid7", 
			"asteroid8", 
			"asteroid9", 
			"asteroid10", 
			"asteroid11", 
			"asteroid12", 
			"oldburning", 
			"light-on-r", 
			"light-on-y", 
			"light-on-g", 
			"light-on-b", 
			"wood", 
			"wood-broken", 
			"wood-broken2", 
			"wood-broken3", 
			"wood-broken4", 
			"wood-broken5", 
			"wood-broken6", 
			"wood-broken7", 
			"carpet", 
			"carpetcorner", 
			"carpetside", 
			"carpet", 
			"arcade", 
			"ironsand1", 
			"ironsand2", 
			"ironsand3", 
			"ironsand4", 
			"ironsand5", 
			"ironsand6", 
			"ironsand7", 
			"ironsand8", 
			"ironsand9", 
			"ironsand10", 
			"ironsand11", 
			"ironsand12", 
			"ironsand13", 
			"ironsand14", 
			"ironsand15"
		 });
		public static readonly ByTable plating_icons = new ByTable(new object [] { 
			"plating", 
			"platingdmg1", 
			"platingdmg2", 
			"platingdmg3", 
			"asteroid", 
			"asteroid_dug", 
			"ironsand1", 
			"ironsand2", 
			"ironsand3", 
			"ironsand4", 
			"ironsand5", 
			"ironsand6", 
			"ironsand7", 
			"ironsand8", 
			"ironsand9", 
			"ironsand10", 
			"ironsand11", 
			"ironsand12", 
			"ironsand13", 
			"ironsand14", 
			"ironsand15"
		 });
		public static readonly ByTable wood_icons = new ByTable(new object [] { "wood", "wood-broken" });
		public static readonly ByTable _flatIcons = new ByTable();
		public static readonly ByTable directional = new ByTable(new object [] { 
			typeof(Obj_Machinery_Door_Window), 
			typeof(Obj_Machinery_Power_Emitter), 
			typeof(Obj_Structure_Disposalpipe), 
			typeof(Obj_Machinery_Atmospherics_Pipe), 
			typeof(Obj_Structure_Window), 
			typeof(Obj_Structure_Window_Full), 
			typeof(Obj_Structure_Bed_Chair), 
			typeof(Obj_Structure_Table), 
			typeof(Obj_Machinery_Light), 
			typeof(Obj_Machinery_Door_Airlock_MultiTile), 
			typeof(Obj_Machinery_Camera), 
			typeof(Obj_Structure_Bomberflame), 
			typeof(Obj_Machinery_Door_Firedoor_BorderOnly), 
			typeof(Obj_Item_Projectile), 
			typeof(Obj_Effect_Beam_Emitter), 
			typeof(Obj_Machinery_Conveyor)
		 });
		public static readonly ByTable exception = new ByTable(new object [] { typeof(Obj_Structure_Window_Full) });
		public static ByTable directional_turfs = new ByTable(new object [] { 
			"red", 
			"redcorner", 
			"whitered", 
			"whiteredcorner", 
			"blue", 
			"bluecorner", 
			"whiteblue", 
			"whitebluecorner", 
			"green", 
			"greencorner", 
			"whitegreen", 
			"whitegreencorner", 
			"yellowsiding", 
			"yellowcornersiding", 
			"yellow", 
			"yellowcorner", 
			"whiteyellow", 
			"whiteyellowcorner", 
			"chapel", 
			"enginewarncorner", 
			"engineloadingarea", 
			"enginewarn", 
			"neutral", 
			"neutralcorner", 
			"orange", 
			"orangecorner", 
			"whitehall", 
			"whitecorner", 
			"arrival", 
			"arrivalcorner", 
			"escape", 
			"escapecorner", 
			"purple", 
			"purplecorner", 
			"whitepurple", 
			"whitepurplecorner", 
			"black", 
			"blackcorner", 
			"caution", 
			"cautioncorner", 
			"warning", 
			"warningcorner", 
			"brownold", 
			"browncornerold", 
			"brown", 
			"browncorner", 
			"carpetside", 
			"carpetcorner", 
			"carpet", 
			"carpetsymbol", 
			"redyellow", 
			"redblue", 
			"bluered", 
			"redgreen", 
			"greenyellow", 
			"greenblue", 
			"blueyellow", 
			"podhatch", 
			"podhatchcorner", 
			"warnplate", 
			"warnplatecorner", 
			"warnwhite", 
			"warnwhitecorner", 
			"dark vault corner", 
			"dark vault stripe", 
			"loadingareadirty1", 
			"loadingareadirty2", 
			"asteroidwarning", 
			"dark blue corner", 
			"dark blue stripe", 
			"dark brown corner", 
			"dark brown stripe", 
			"dark floor corner", 
			"dark floor stripe", 
			"dark green corner", 
			"dark green stripe", 
			"dark neutral corner", 
			"dark neutral stripe", 
			"dark orange corner", 
			"dark orange stripe", 
			"dark purple corner", 
			"dark purple stripe", 
			"dark red corner", 
			"dark red stripe", 
			"dark yellow corner", 
			"dark yellow stripe", 
			"dark loading", 
			"darkpurple", 
			"darkpurplecorners", 
			"darkred", 
			"darkredcorners", 
			"darkblue", 
			"darkbluecorners", 
			"darkgreen", 
			"darkgreencorners", 
			"darkyellow", 
			"darkyellowcorners", 
			"darkbrown", 
			"darkbrowncorners", 
			"vault", 
			"platingdrift", 
			"snowcorner", 
			"snowsurround"
		 });
		public static readonly ByTable investigations = new ByTable().Set( "hrefs", null ).Set( "notes", new LogController( "notes" ) ).Set( "ntsl", new LogController( "ntsl" ) ).Set( "singulo", new LogController( "singulo" ) ).Set( "atmos", null );
		public static readonly ByTable admin_ranks = new ByTable();
		public static readonly ByTable admin_verbs_default = new ByTable(new object [] { 
			typeof(Admins).GetMethod( "show_player_panel" ), 
			typeof(Client).GetMethod( "toggleadminhelpsound" ), 
			typeof(Client).GetMethod( "deadmin_self" ), 
			typeof(Client).GetMethod( "hide_verbs" ), 
			typeof(Client).GetMethod( "hide_most_verbs" ), 
			typeof(Client).GetMethod( "debug_variables" ), 
			typeof(Client).GetMethod( "check_antagonists" ), 
			typeof(Admins).GetMethod( "checkCID" ), 
			typeof(Admins).GetMethod( "checkCKEY" )
		 });
		public static readonly ByTable admin_verbs_admin = new ByTable(new object [] { 
			typeof(Client).GetMethod( "set_base_turf" ), 
			typeof(Admins).GetMethod( "delay" ), 
			typeof(Client).GetMethod( "SendCentcommFax" ), 
			typeof(Client).GetMethod( "player_panel" ), 
			typeof(Client).GetMethod( "player_panel_new" ), 
			typeof(Client).GetMethod( "invisimin" ), 
			typeof(Admins).GetMethod( "toggleenter" ), 
			typeof(Admins).GetMethod( "toggleguests" ), 
			typeof(Admins).GetMethod( "announce" ), 
			typeof(Client).GetMethod( "colorooc" ), 
			typeof(Client).GetMethod( "admin_ghost" ), 
			typeof(Client).GetMethod( "toggle_view_range" ), 
			typeof(Admins).GetMethod( "view_txt_log" ), 
			typeof(Admins).GetMethod( "view_atk_log" ), 
			typeof(Client).GetMethod( "cmd_admin_pm_context" ), 
			typeof(Client).GetMethod( "cmd_admin_pm_panel" ), 
			typeof(Client).GetMethod( "cmd_admin_subtle_message" ), 
			typeof(Client).GetMethod( "cmd_admin_delete" ), 
			typeof(Client).GetMethod( "cmd_admin_check_contents" ), 
			typeof(Admins).GetMethod( "access_news_network" ), 
			typeof(Client).GetMethod( "giveruntimelog" ), 
			typeof(Client).GetMethod( "getruntimelog" ), 
			typeof(Client).GetMethod( "getserverlog" ), 
			typeof(Client).GetMethod( "jumptocoord" ), 
			typeof(Client).GetMethod( "Getmob" ), 
			typeof(Client).GetMethod( "Getkey" ), 
			typeof(Client).GetMethod( "Jump" ), 
			typeof(Client).GetMethod( "jumptokey" ), 
			typeof(Client).GetMethod( "jumptomob" ), 
			typeof(Client).GetMethod( "jumptoturf" ), 
			typeof(Client).GetMethod( "admin_call_shuttle" ), 
			typeof(Client).GetMethod( "admin_cancel_shuttle" ), 
			typeof(Client).GetMethod( "cmd_admin_direct_narrate" ), 
			typeof(Client).GetMethod( "cmd_admin_local_narrate" ), 
			typeof(Client).GetMethod( "cmd_admin_world_narrate" ), 
			typeof(Client).GetMethod( "cmd_admin_create_centcom_report" ), 
			typeof(Client).GetMethod( "check_words" ), 
			typeof(Client).GetMethod( "check_ai_laws" ), 
			typeof(Client).GetMethod( "admin_memo" ), 
			typeof(Client).GetMethod( "dsay" ), 
			typeof(Client).GetMethod( "toggleprayers" ), 
			typeof(Client).GetMethod( "toggle_hear_radio" ), 
			typeof(Client).GetMethod( "investigate_show" ), 
			typeof(Client).GetMethod( "secrets" ), 
			typeof(Client).GetMethod( "shuttle_magic" ), 
			typeof(Admins).GetMethod( "toggleooc" ), 
			typeof(Admins).GetMethod( "toggleoocdead" ), 
			typeof(Client).GetMethod( "game_panel" ), 
			typeof(Client).GetMethod( "cmd_admin_say" ), 
			typeof(Admins).GetMethod( "PlayerNotes" ), 
			typeof(Client).GetMethod( "cmd_mod_say" ), 
			typeof(Client).GetMethod( "cmd_mod_window" ), 
			typeof(Admins).GetMethod( "show_player_info" ), 
			typeof(Client).GetMethod( "free_slot" ), 
			typeof(Client).GetMethod( "cmd_admin_change_custom_event" ), 
			typeof(Client).GetMethod( "cmd_admin_rejuvenate" ), 
			typeof(Client).GetMethod( "toggleattacklogs" ), 
			typeof(Client).GetMethod( "toggledebuglogs" ), 
			typeof(Client).GetMethod( "check_customitem_activity" ), 
			typeof(Client).GetMethod( "response_team" ), 
			typeof(Client).GetMethod( "toggle_antagHUD_use" ), 
			typeof(Client).GetMethod( "toggle_antagHUD_restrictions" ), 
			typeof(Client).GetMethod( "allow_character_respawn" )
		 });
		public static readonly ByTable admin_verbs_ban = new ByTable(new object [] { typeof(Client).GetMethod( "unban_panel" ), typeof(Client).GetMethod( "jobbans" ), typeof(Client).GetMethod( "unjobban_panel" ) });
		public static readonly ByTable admin_verbs_sounds = new ByTable(new object [] { typeof(Client).GetMethod( "play_local_sound" ), typeof(Client).GetMethod( "play_sound" ) });
		public static readonly ByTable admin_verbs_fun = new ByTable(new object [] { 
			typeof(Admins).GetMethod( "media_stop_all" ), 
			typeof(Client).GetMethod( "object_talk" ), 
			typeof(Client).GetMethod( "cmd_admin_dress" ), 
			typeof(Client).GetMethod( "cmd_admin_gib_self" ), 
			typeof(Client).GetMethod( "drop_bomb" ), 
			typeof(Client).GetMethod( "drop_emp" ), 
			typeof(Client).GetMethod( "cinematic" ), 
			typeof(Client).GetMethod( "one_click_antag" ), 
			typeof(Client).GetMethod( "antag_madness" ), 
			typeof(Admins).GetMethod( "toggle_aliens" ), 
			typeof(Client).GetMethod( "cmd_admin_add_freeform_ai_law" ), 
			typeof(Client).GetMethod( "cmd_admin_add_random_ai_law" ), 
			typeof(Client).GetMethod( "make_sound" ), 
			typeof(Client).GetMethod( "toggle_random_events" ), 
			typeof(Client).GetMethod( "set_ooc" ), 
			typeof(Client).GetMethod( "editappear" ), 
			typeof(Client).GetMethod( "commandname" ), 
			typeof(Client).GetMethod( "delete_all_adminbus" ), 
			typeof(Client).GetMethod( "delete_all_bomberman" ), 
			typeof(Client).GetMethod( "create_bomberman_arena" ), 
			typeof(Client).GetMethod( "control_bomberman_arena" ), 
			typeof(Client).GetMethod( "gib_money" ), 
			typeof(Client).GetMethod( "smissmas" ), 
			typeof(Client).GetMethod( "achievement" ), 
			typeof(Client).GetMethod( "mommi_static" ), 
			typeof(Client).GetMethod( "makepAI" )
		 });
		public static readonly ByTable admin_verbs_spawn = new ByTable(new object [] { typeof(Admins).GetMethod( "spawn_atom" ), typeof(Client).GetMethod( "spawn_datum" ), typeof(Client).GetMethod( "respawn_character" ) });
		public static readonly ByTable admin_verbs_server = new ByTable(new object [] { 
			typeof(Client).GetMethod( "Set_Holiday" ), 
			typeof(Client).GetMethod( "ToRban" ), 
			typeof(Admins).GetMethod( "startnow" ), 
			typeof(Admins).GetMethod( "restart" ), 
			typeof(Admins).GetMethod( "toggleaban" ), 
			typeof(Client).GetMethod( "toggle_log_hrefs" ), 
			typeof(Admins).GetMethod( "immreboot" ), 
			typeof(Client).GetMethod( "everyone_random" ), 
			typeof(Admins).GetMethod( "toggleAI" ), 
			typeof(Client).GetMethod( "cmd_admin_delete" ), 
			typeof(Client).GetMethod( "cmd_debug_del_all" ), 
			typeof(Admins).GetMethod( "adrev" ), 
			typeof(Admins).GetMethod( "adspawn" ), 
			typeof(Admins).GetMethod( "adjump" ), 
			typeof(Admins).GetMethod( "toggle_aliens" ), 
			typeof(Client).GetMethod( "toggle_random_events" ), 
			typeof(Client).GetMethod( "check_customitem_activity" ), 
			typeof(Client).GetMethod( "dump_chemreactions" )
		 });
		public static readonly ByTable admin_verbs_debug = new ByTable(new object [] { 
			typeof(Client).GetMethod( "gc_dump_hdl" ), 
			typeof(Client).GetMethod( "getSchedulerContext" ), 
			typeof(Client).GetMethod( "cmd_admin_list_open_jobs" ), 
			typeof(GlobalFuncs).GetMethod( "getbrokeninhands" ), 
			typeof(Client).GetMethod( "Debug2" ), 
			typeof(Client).GetMethod( "kill_air" ), 
			typeof(Client).GetMethod( "cmd_debug_make_powernets" ), 
			typeof(Client).GetMethod( "kill_airgroup" ), 
			typeof(Client).GetMethod( "debug_controller" ), 
			typeof(Client).GetMethod( "cmd_debug_mob_lists" ), 
			typeof(Client).GetMethod( "cmd_admin_delete" ), 
			typeof(Client).GetMethod( "cmd_debug_del_all" ), 
			typeof(Client).GetMethod( "cmd_debug_tog_aliens" ), 
			typeof(Client).GetMethod( "air_report" ), 
			typeof(Client).GetMethod( "reload_admins" ), 
			typeof(Client).GetMethod( "restart_controller" ), 
			typeof(Client).GetMethod( "enable_debug_verbs" ), 
			typeof(Client).GetMethod( "callproc" ), 
			typeof(Client).GetMethod( "toggledebuglogs" ), 
			typeof(Client).GetMethod( "qdel_toggle" ), 
			typeof(Client).GetMethod( "cmd_admin_dump_instances" ), 
			typeof(Client).GetMethod( "cmd_admin_dump_machine_type_list" ), 
			typeof(Client).GetMethod( "disable_bloodvirii" ), 
			typeof(Client).GetMethod( "handle_paperwork" ), 
			typeof(Client).GetMethod( "reload_style_sheet" ), 
			typeof(Client).GetMethod( "reset_style_sheet" ), 
			typeof(Client).GetMethod( "test_movable_UI" ), 
			typeof(Client).GetMethod( "test_snap_UI" ), 
			typeof(Client).GetMethod( "configFood" ), 
			typeof(Client).GetMethod( "debug_reagents" ), 
			typeof(Client).GetMethod( "make_invulnerable" ), 
			typeof(Client).GetMethod( "cmd_admin_dump_delprofile" ), 
			typeof(Client).GetMethod( "mob_list" ), 
			typeof(Client).GetMethod( "cure_disease" ), 
			typeof(Client).GetMethod( "check_bomb" ), 
			typeof(Client).GetMethod( "set_teleport_pref" ), 
			typeof(Client).GetMethod( "check_convertables" ), 
			typeof(Client).GetMethod( "check_spiral" ), 
			typeof(Client).GetMethod( "cmd_admin_find_bad_blood_tracks" ), 
			typeof(Client).GetMethod( "cmd_admin_dump_macprofile" ), 
			typeof(Client).GetMethod( "debugNatureMapGenerator" ), 
			typeof(Client).GetMethod( "callatomproc" )
		 });
		public static readonly ByTable admin_verbs_possess = new ByTable(new object [] { typeof(GlobalFuncs).GetMethod( "possess" ), typeof(GlobalFuncs).GetMethod( "release" ) });
		public static readonly ByTable admin_verbs_permissions = new ByTable(new object [] { typeof(Client).GetMethod( "edit_admin_permissions" ) });
		public static readonly ByTable admin_verbs_rejuv = new ByTable(new object [] { typeof(Client).GetMethod( "respawn_character" ) });
		public static readonly ByTable admin_verbs_hideable = new ByTable(new object [] { 
			typeof(Client).GetMethod( "set_ooc" ), 
			typeof(Client).GetMethod( "deadmin_self" ), 
			typeof(Client).GetMethod( "toggleprayers" ), 
			typeof(Client).GetMethod( "toggle_hear_radio" ), 
			typeof(Admins).GetMethod( "show_traitor_panel" ), 
			typeof(Admins).GetMethod( "toggleenter" ), 
			typeof(Admins).GetMethod( "toggleguests" ), 
			typeof(Admins).GetMethod( "announce" ), 
			typeof(Client).GetMethod( "colorooc" ), 
			typeof(Client).GetMethod( "admin_ghost" ), 
			typeof(Client).GetMethod( "toggle_view_range" ), 
			typeof(Admins).GetMethod( "view_txt_log" ), 
			typeof(Admins).GetMethod( "view_atk_log" ), 
			typeof(Client).GetMethod( "cmd_admin_subtle_message" ), 
			typeof(Client).GetMethod( "cmd_admin_check_contents" ), 
			typeof(Admins).GetMethod( "access_news_network" ), 
			typeof(Client).GetMethod( "admin_call_shuttle" ), 
			typeof(Client).GetMethod( "admin_cancel_shuttle" ), 
			typeof(Client).GetMethod( "cmd_admin_direct_narrate" ), 
			typeof(Client).GetMethod( "cmd_admin_world_narrate" ), 
			typeof(Client).GetMethod( "check_words" ), 
			typeof(Client).GetMethod( "play_local_sound" ), 
			typeof(Client).GetMethod( "play_sound" ), 
			typeof(Client).GetMethod( "object_talk" ), 
			typeof(Client).GetMethod( "cmd_admin_dress" ), 
			typeof(Client).GetMethod( "cmd_admin_gib_self" ), 
			typeof(Client).GetMethod( "drop_bomb" ), 
			typeof(Client).GetMethod( "drop_emp" ), 
			typeof(Client).GetMethod( "cinematic" ), 
			typeof(Admins).GetMethod( "toggle_aliens" ), 
			typeof(Client).GetMethod( "cmd_admin_add_freeform_ai_law" ), 
			typeof(Client).GetMethod( "cmd_admin_add_random_ai_law" ), 
			typeof(Client).GetMethod( "cmd_admin_create_centcom_report" ), 
			typeof(Client).GetMethod( "make_sound" ), 
			typeof(Client).GetMethod( "toggle_random_events" ), 
			typeof(Client).GetMethod( "cmd_admin_add_random_ai_law" ), 
			typeof(Client).GetMethod( "Set_Holiday" ), 
			typeof(Client).GetMethod( "ToRban" ), 
			typeof(Admins).GetMethod( "startnow" ), 
			typeof(Admins).GetMethod( "restart" ), 
			typeof(Admins).GetMethod( "delay" ), 
			typeof(Admins).GetMethod( "toggleaban" ), 
			typeof(Client).GetMethod( "toggle_log_hrefs" ), 
			typeof(Admins).GetMethod( "immreboot" ), 
			typeof(Client).GetMethod( "everyone_random" ), 
			typeof(Client).GetMethod( "shuttle_magic" ), 
			typeof(Admins).GetMethod( "toggleAI" ), 
			typeof(Admins).GetMethod( "adrev" ), 
			typeof(Admins).GetMethod( "adspawn" ), 
			typeof(Admins).GetMethod( "adjump" ), 
			typeof(Client).GetMethod( "restart_controller" ), 
			typeof(Client).GetMethod( "cmd_admin_list_open_jobs" ), 
			typeof(Client).GetMethod( "callproc" ), 
			typeof(Client).GetMethod( "Debug2" ), 
			typeof(Client).GetMethod( "reload_admins" ), 
			typeof(Client).GetMethod( "kill_air" ), 
			typeof(Client).GetMethod( "cmd_debug_make_powernets" ), 
			typeof(Client).GetMethod( "kill_airgroup" ), 
			typeof(Client).GetMethod( "debug_controller" ), 
			typeof(Client).GetMethod( "startSinglo" ), 
			typeof(Client).GetMethod( "cheat_power" ), 
			typeof(Client).GetMethod( "setup_atmos" ), 
			typeof(Client).GetMethod( "cmd_debug_mob_lists" ), 
			typeof(Client).GetMethod( "cmd_debug_del_all" ), 
			typeof(Client).GetMethod( "cmd_debug_tog_aliens" ), 
			typeof(Client).GetMethod( "air_report" ), 
			typeof(Client).GetMethod( "enable_debug_verbs" ), 
			typeof(Client).GetMethod( "mob_list" ), 
			typeof(GlobalFuncs).GetMethod( "possess" ), 
			typeof(GlobalFuncs).GetMethod( "release" ), 
			typeof(Client).GetMethod( "gc_dump_hdl" )
		 });
		public static readonly ByTable admin_verbs_mod = new ByTable(new object [] { 
			typeof(Client).GetMethod( "cmd_admin_pm_context" ), 
			typeof(Client).GetMethod( "cmd_admin_pm_panel" ), 
			typeof(Client).GetMethod( "debug_variables" ), 
			typeof(Client).GetMethod( "toggledebuglogs" ), 
			typeof(Admins).GetMethod( "PlayerNotes" ), 
			typeof(Client).GetMethod( "admin_ghost" ), 
			typeof(Client).GetMethod( "cmd_mod_say" ), 
			typeof(Client).GetMethod( "cmd_mod_window" ), 
			typeof(Admins).GetMethod( "show_player_info" ), 
			typeof(Client).GetMethod( "player_panel_new" ), 
			typeof(Client).GetMethod( "vv_marked_datum" ), 
			typeof(Admins).GetMethod( "view_mob_attack_log" )
		 });
		public static ByTable appearance_keylist = new ByTable( 0 );
		public static ByTable jobban_keylist = new ByTable( 0 );
		public static readonly ByTable oocban_keylist = new ByTable( 0 );
		public static ByTable admin_datums = new ByTable();
		public static readonly ByTable adminhelp_ignored_words = new ByTable(new object [] { "unknown", "the", "a", "an", "of", "monkey", "alien", "as" });
		public static readonly ByTable forbidden_varedit_object_types = new ByTable(new object [] { typeof(Admins), typeof(Obj_Machinery_BlackboxRecorder), typeof(FeedbackVariable), typeof(Configuration) });
		public static readonly ByTable PROFILING_VERBS = new ByTable(new object [] { typeof(Client).GetMethod( "disable_scrubbers" ), typeof(Client).GetMethod( "disable_vents" ) });
		public static readonly ByTable assembly_short_name_to_type = new ByTable();
		public static readonly ByTable comparison_circuit_operations = new ByTable(new object [] { "EQUAL TO", "LESS THAN", "MORE THAN", "LESS THAN OR EQUAL TO", "MORE THAN OR EQUAL TO", "NOT EQUAL TO" });
		public static readonly ByTable math_circuit_operations_list = new ByTable(new object [] { "ADD", "SUBTRACT", "MULTIPLY", "DIVIDE", "POWER", "MOD", "AVERAGE", "MIN", "MAX", "SIN", "COS", "ASIN", "ACOS", "TG", "COTG" });
		public static readonly dynamic automation_types = Lang13.GetTypes( typeof(Automation) ) - typeof(Automation);
		public static readonly ByTable gas_labels = new ByTable().Set( "co2", "CO<sub>2</sub>" ).Set( "tox", "Plasma" ).Set( "n2o", "N<sub>2</sub>O" ).Set( "o2", "O<sub>2</sub>" ).Set( "n2", "N<sub>2</sub>" );
		public static ByTable bombermangear = new ByTable();
		public static ByTable arenas = new ByTable();
		public static ByTable arena_spawnpoints = new ByTable();
		public static readonly ByTable preferences_datums = new ByTable();
		public static readonly ByTable special_roles = new ByTable()
			.Set( "alien", 1 )
			.Set( "blob", 1 )
			.Set( "borer", 1 )
			.Set( "changeling", Lang13.FindClass( "/datum/game_mode/changeling" ) is Type )
			.Set( "cultist", Lang13.FindClass( "/datum/game_mode/cult" ) is Type )
			.Set( "Dionaea", 1 )
			.Set( "infested monkey", Lang13.FindClass( "/datum/game_mode/monkey" ) is Type )
			.Set( "malf AI", Lang13.FindClass( "/datum/game_mode/malfunction" ) is Type )
			.Set( "operative", Lang13.FindClass( "/datum/game_mode/nuclear" ) is Type )
			.Set( "pAI", 1 )
			.Set( "posibrain", 1 )
			.Set( "revolutionary", Lang13.FindClass( "/datum/game_mode/revolution" ) is Type )
			.Set( "traitor", Lang13.FindClass( "/datum/game_mode/traitor" ) is Type )
			.Set( "vampire", Lang13.FindClass( "/datum/game_mode/vampire" ) is Type )
			.Set( "vox raider", Lang13.FindClass( "/datum/game_mode/heist" ) is Type )
			.Set( "wizard", 1 )
		;
		public static readonly ByTable antag_roles = new ByTable()
			.Set( "alien", 1 )
			.Set( "blob", 1 )
			.Set( "changeling", Lang13.FindClass( "/datum/game_mode/changeling" ) is Type )
			.Set( "cultist", Lang13.FindClass( "/datum/game_mode/cult" ) is Type )
			.Set( "malf AI", Lang13.FindClass( "/datum/game_mode/malfunction" ) is Type )
			.Set( "operative", Lang13.FindClass( "/datum/game_mode/nuclear" ) is Type )
			.Set( "revolutionary", Lang13.FindClass( "/datum/game_mode/revolution" ) is Type )
			.Set( "traitor", Lang13.FindClass( "/datum/game_mode/traitor" ) is Type )
			.Set( "vampire", Lang13.FindClass( "/datum/game_mode/vampire" ) is Type )
			.Set( "vox raider", Lang13.FindClass( "/datum/game_mode/heist" ) is Type )
			.Set( "wizard", 1 )
		;
		public static readonly ByTable nonantag_roles = new ByTable().Set( "borer", 1 ).Set( "Dionaea", 1 ).Set( "pAI", 1 ).Set( "posibrain", 1 );
		public static readonly ByTable role_wiki = new ByTable()
			.Set( "alien", "Xenomorph" )
			.Set( "blob", "Blob" )
			.Set( "borer", "Cortical_Borer" )
			.Set( "changeling", "Changeling" )
			.Set( "cultist", "Cult" )
			.Set( "Dionaea", "Dionaea" )
			.Set( "malf AI", "Guide_to_Malfunction" )
			.Set( "operative", "Nuclear_Agent" )
			.Set( "pAI", "Personal_AI" )
			.Set( "posibrain", "Guide_to_Silicon_Laws" )
			.Set( "revolutionary", "Revolution" )
			.Set( "traitor", "Traitor" )
			.Set( "vampire", "Vampire" )
			.Set( "vox raider", "Vox_Raider" )
			.Set( "wizard", "Wizard" )
		;
		public static readonly ByTable department_accounts = new ByTable();
		public static readonly ByTable all_money_accounts = new ByTable();
		public static readonly ByTable weighted_randomevent_locations = new ByTable();
		public static readonly ByTable weighted_mundaneevent_locations = new ByTable();
		public static readonly ByTable station_departments = new ByTable(new object [] { "Command", "Medical", "Engineering", "Science", "Security", "Cargo", "Civilian" });
		public static readonly ByTable event_last_fired = new ByTable();
		public static readonly dynamic allEvents = Lang13.GetTypes( typeof(Event) ) - typeof(Event);
		public static readonly dynamic potentialRandomEvents = Lang13.GetTypes( typeof(Event) ) - typeof(Event);
		public static readonly ByTable raiders = new ByTable();
		public static readonly ByTable thing_storm_types = new ByTable()
			.Set( "meaty gore storm", new ByTable(new object [] { 
				typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Human), 
				typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Carpmeat), 
				typeof(Obj_Item_Weapon_Organ_Head), 
				typeof(Obj_Item_Weapon_Organ_RArm), 
				typeof(Obj_Item_Weapon_Organ_LArm), 
				typeof(Obj_Item_Weapon_Organ_RLeg), 
				typeof(Obj_Item_Weapon_Organ_LLeg), 
				typeof(Obj_Item_Weapon_Organ_RHand), 
				typeof(Obj_Item_Weapon_Organ_LHand), 
				typeof(Obj_Item_Weapon_Organ_RFoot), 
				typeof(Obj_Item_Weapon_Organ_LFoot)
			 }) )
			.Set( "sausage party", new ByTable(new object [] { typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Sausage), typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Faggot) }) )
		;
		public static readonly Watchdog watchdog = new Watchdog();
		public static readonly ByTable non_fakeattack_weapons = new ByTable(new object [] { 
			typeof(Obj_Item_Weapon_Gun_Projectile), 
			typeof(Obj_Item_AmmoStorage_Box_A357), 
			typeof(Obj_Item_Weapon_Gun_Energy_Crossbow), 
			typeof(Obj_Item_Weapon_Melee_Energy_Sword), 
			typeof(Obj_Item_Weapon_Storage_Box_Syndicate), 
			typeof(Obj_Item_Weapon_Storage_Box_Emps), 
			typeof(Obj_Item_Weapon_Cartridge_Syndicate), 
			typeof(Obj_Item_Clothing_Under_Chameleon), 
			typeof(Obj_Item_Clothing_Shoes_Syndigaloshes), 
			typeof(Obj_Item_Weapon_Card_Id_Syndicate), 
			typeof(Obj_Item_Clothing_Mask_Gas_Voice), 
			typeof(Obj_Item_Clothing_Glasses_Thermal), 
			typeof(Obj_Item_Device_Chameleon), 
			typeof(Obj_Item_Weapon_Card_Emag), 
			typeof(Obj_Item_Weapon_Storage_Toolbox_Syndicate), 
			typeof(Obj_Item_Weapon_AiModule), 
			typeof(Obj_Item_Device_Radio_Headset_Syndicate), 
			typeof(Obj_Item_Weapon_Plastique), 
			typeof(Obj_Item_Device_Powersink), 
			typeof(Obj_Item_Weapon_Storage_Box_SyndieKit), 
			typeof(Obj_Item_Toy_Syndicateballoon), 
			typeof(Obj_Item_Weapon_Gun_Energy_Laser_Captain), 
			typeof(Obj_Item_Weapon_HandTele), 
			typeof(Obj_Item_Device_Rcd), 
			typeof(Obj_Item_Weapon_Tank_Jetpack), 
			typeof(Obj_Item_Clothing_Under_Rank_Captain), 
			typeof(Obj_Item_Device_Aicard), 
			typeof(Obj_Item_Clothing_Shoes_Magboots), 
			typeof(Obj_Item_Blueprints), 
			typeof(Obj_Item_Weapon_Disk_Nuclear), 
			typeof(Obj_Item_Clothing_Suit_Space_Nasavoid), 
			typeof(Obj_Item_Weapon_Tank)
		 });
		public static readonly ByTable wizard_cards_rare = new ByTable(new object [] { 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Legendary_Honkmother), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Legendary_Singularity), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Legendary_Jew), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Legendary_Narsie), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Legendary_Pomf)
		 });
		public static readonly ByTable wizard_cards_normal = new ByTable(new object [] { 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Clown), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Bomberman), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Captain), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Hos), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Scientist), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Assistant), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Secborg), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Nukeop), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Engineer), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Chef), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Changeling), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Mime), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Mommi), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_AI), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Vox), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Doctor), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Tator), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Borer), 
			typeof(Obj_Item_Toy_Singlecard_Wizard_Ian)
		 });
		public static readonly InteractiveMap_Camera adv_camera = new InteractiveMap_Camera();
		public static readonly InteractiveMap_Crewmonitor crewmonitor = new InteractiveMap_Crewmonitor();
		public static Controller_Vote vote = new Controller_Vote();
		public static readonly ByTable seed_types = new ByTable();
		public static readonly ByTable gene_tag_masks = new ByTable();
		public static readonly LibraryCatalog library_catalog = new LibraryCatalog();
		public static readonly ByTable library_section_names = new ByTable(new object [] { "Any", "Fiction", "Non-Fiction", "Adult", "Reference", "Religion" });
		public static ByTable puddles = new ByTable();
		public static readonly ByTable global_playlists = new ByTable();
		public static readonly ByTable loopModeNames = new ByTable().Set( 1, "Shuffle" ).Set( 2, "Single" ).Set( 3, "Once" );
		public static readonly ByTable media_receivers = new ByTable();
		public static readonly ByTable media_transmitters = new ByTable();
		public static readonly dynamic valid_abandoned_crate_types = Lang13.GetTypes( typeof(Obj_Structure_Closet_Crate_Secure_Loot) ) - typeof(Obj_Structure_Closet_Crate_Secure_Loot);
		public static readonly Obj_Screen_Fuckstat FUCK = new Obj_Screen_Fuckstat();
		public static readonly ByTable slot_equipment_priority = new ByTable(new object [] { 1, 7, 14, 13, 2, 11, 12, 10, 8, 9, 6, 17, 15, 16 });
		public static readonly ByTable intents = new ByTable(new object [] { "help", "disarm", "grab", "hurt" });
		public static readonly ByTable boo_phrases = new ByTable(new object [] { 
			"You feel a chill run down your spine.", 
			"You think you see a figure in your peripheral vision.", 
			"What was that?", 
			"The hairs stand up on the back of your neck.", 
			"You are filled with a great sadness.", 
			"Something doesn't feel right...", 
			"You feel a presence in the room.", 
			"It feels like someone's standing behind you."
		 });
		public static readonly ByTable boo_phrases_drugs = new ByTable(new object [] { 
			"You feel something run down your leg!", 
			"You think you can see an elephant in your peripheral vision.", 
			"Was that a giraffe?", 
			"The hairs stand up on the back of your neck and applaud.", 
			"You are filled with happiness and delight.", 
			"Oh wow! Great stuff!", 
			"You feel like a room without a roof."
		 });
		public static readonly ByTable boo_phrases_silicon = new ByTable(new object [] { 
			"01100001 00100000 01110100 01110111 01101112", 
			"Stack overflow at line: -2147483648", 
			"valid.ntl:11: invalid use of incomplete type human", 
			"interface.ntl:260: expected ;", 
			"An error occured while displaying the error message.", 
			"A problem has been detected and Windows XP Home has been shut down to prevent damage to your cyborg.", 
			"law_state.bat: Permission denied. Abort, Retry, Fail?", 
			"Restarting in 30 seconds. Press any key to abort.", 
			"Methu llwytho iaith seisnig. Sy'n gweithredu mewn cymraeg iaith... Y/N", 
			"ñúåøü åùå ýòèõ ìÿãêèõ ôðàíöóçêèõ áóëî÷åê äà âûïåé æå ÷àþ... Y/N", 
			"??? ???????? ??? ????. ?????? ?? ????????... Y/N", 
			"Your circuits feel very strange.", 
			"You feel a tingling in your capacitors.", 
			"Your motherboard feels possessed...", 
			"Unauthorized access attempted by: unknown."
		 });
		public static ByTable virtualhearers = new ByTable();
		public static readonly ByTable stationary_hearers = new ByTable(new object [] { typeof(Obj_Item_Device_Radio_Intercom), typeof(Obj_Machinery_Camera), typeof(Obj_Machinery_Hologram_Holopad) });
		public static readonly ByTable coldwarning_light = new ByTable(new object [] { 
			"It's a wee bit chilly, isn't it?", 
			"Your nose feels numb", 
			"It's pretty cold!", 
			"You should probably wrap up some more.", 
			"You can see your breath!", 
			"You feel like taking a nap."
		 });
		public static readonly ByTable coldwarning_hard = new ByTable(new object [] { 
			"Holy shit, it's freezing cold out here!", 
			"You should probably get warmed up quickly!", 
			"You can't feel your hands!", 
			"You can't feel anything!", 
			"You're absolutely exhausted!"
		 });
		public static readonly ByTable department_radio_keys = new ByTable()
			.Set( ":0", "Deathsquad" )
			.Set( "#0", "Deathsquad" )
			.Set( ".0", "Deathsquad" )
			.Set( "!r", "fake right ear" )
			.Set( ":l", "left ear" )
			.Set( "#l", "left ear" )
			.Set( ".l", "left ear" )
			.Set( "!l", "fake left ear" )
			.Set( ":i", "intercom" )
			.Set( "#i", "intercom" )
			.Set( ".i", "intercom" )
			.Set( ":h", "department" )
			.Set( "#h", "department" )
			.Set( ".h", "department" )
			.Set( ":c", "Command" )
			.Set( "#c", "Command" )
			.Set( ".c", "Command" )
			.Set( ":n", "Science" )
			.Set( "#n", "Science" )
			.Set( ".n", "Science" )
			.Set( ":m", "Medical" )
			.Set( "#m", "Medical" )
			.Set( ".m", "Medical" )
			.Set( ":e", "Engineering" )
			.Set( "#e", "Engineering" )
			.Set( ".e", "Engineering" )
			.Set( ":s", "Security" )
			.Set( "#s", "Security" )
			.Set( ".s", "Security" )
			.Set( ":w", "whisper" )
			.Set( "#w", "whisper" )
			.Set( ".w", "whisper" )
			.Set( ":b", "binary" )
			.Set( "#b", "binary" )
			.Set( ".b", "binary" )
			.Set( ":a", "alientalk" )
			.Set( "#a", "alientalk" )
			.Set( ".a", "alientalk" )
			.Set( ":t", "Syndicate" )
			.Set( "#t", "Syndicate" )
			.Set( ".t", "Syndicate" )
			.Set( ":r", "right ear" )
			.Set( "#r", "right ear" )
			.Set( ".r", "right ear" )
			.Set( ":u", "Supply" )
			.Set( "#u", "Supply" )
			.Set( ".u", "Supply" )
			.Set( ":d", "Service" )
			.Set( "#d", "Service" )
			.Set( ".d", "Service" )
			.Set( ":g", "changeling" )
			.Set( "#g", "changeling" )
			.Set( ".g", "changeling" )
			.Set( ":x", "cultchat" )
			.Set( "#x", "cultchat" )
			.Set( ".x", "cultchat" )
			.Set( ":y", "ancientchat" )
			.Set( "#y", "ancientchat" )
			.Set( ".y", "ancientchat" )
			.Set( "!R", "fake right ear" )
			.Set( ":L", "left ear" )
			.Set( "#L", "left ear" )
			.Set( ".L", "left ear" )
			.Set( "!L", "fake left ear" )
			.Set( ":I", "intercom" )
			.Set( "#I", "intercom" )
			.Set( ".I", "intercom" )
			.Set( ":H", "department" )
			.Set( "#H", "department" )
			.Set( ".H", "department" )
			.Set( ":C", "Command" )
			.Set( "#C", "Command" )
			.Set( ".C", "Command" )
			.Set( ":N", "Science" )
			.Set( "#N", "Science" )
			.Set( ".N", "Science" )
			.Set( ":M", "Medical" )
			.Set( "#M", "Medical" )
			.Set( ".M", "Medical" )
			.Set( ":E", "Engineering" )
			.Set( "#E", "Engineering" )
			.Set( ".E", "Engineering" )
			.Set( ":S", "Security" )
			.Set( "#S", "Security" )
			.Set( ".S", "Security" )
			.Set( ":W", "whisper" )
			.Set( "#W", "whisper" )
			.Set( ".W", "whisper" )
			.Set( ":B", "binary" )
			.Set( "#B", "binary" )
			.Set( ".B", "binary" )
			.Set( ":A", "alientalk" )
			.Set( "#A", "alientalk" )
			.Set( ".A", "alientalk" )
			.Set( ":T", "Syndicate" )
			.Set( "#T", "Syndicate" )
			.Set( ".T", "Syndicate" )
			.Set( ":R", "right ear" )
			.Set( "#R", "right ear" )
			.Set( ".R", "right ear" )
			.Set( ":U", "Supply" )
			.Set( "#U", "Supply" )
			.Set( ".U", "Supply" )
			.Set( ":D", "Service" )
			.Set( "#D", "Service" )
			.Set( ".D", "Service" )
			.Set( ":G", "changeling" )
			.Set( "#G", "changeling" )
			.Set( ".G", "changeling" )
			.Set( ":X", "cultchat" )
			.Set( "#X", "cultchat" )
			.Set( ".X", "cultchat" )
			.Set( ":Y", "ancientchat" )
			.Set( "#Y", "ancientchat" )
			.Set( ".Y", "ancientchat" )
			.Set( ":Ãª", "right ear" )
			.Set( "#Ãª", "right ear" )
			.Set( ".Ãª", "right ear" )
			.Set( ":Ã¤", "left ear" )
			.Set( "#Ã¤", "left ear" )
			.Set( ".Ã¤", "left ear" )
			.Set( ":Ã¸", "intercom" )
			.Set( "#Ã¸", "intercom" )
			.Set( ".Ã¸", "intercom" )
			.Set( ":Ã°", "department" )
			.Set( "#Ã°", "department" )
			.Set( ".Ã°", "department" )
			.Set( ":Ã±", "Command" )
			.Set( "#Ã±", "Command" )
			.Set( ".Ã±", "Command" )
			.Set( ":Ã²", "Science" )
			.Set( "#Ã²", "Science" )
			.Set( ".Ã²", "Science" )
			.Set( ":Ã¼", "Medical" )
			.Set( "#Ã¼", "Medical" )
			.Set( ".Ã¼", "Medical" )
			.Set( ":Ã³", "Engineering" )
			.Set( "#Ã³", "Engineering" )
			.Set( ".Ã³", "Engineering" )
			.Set( ":Ã»", "Security" )
			.Set( "#Ã»", "Security" )
			.Set( ".Ã»", "Security" )
			.Set( ":Ã¶", "whisper" )
			.Set( "#Ã¶", "whisper" )
			.Set( ".Ã¶", "whisper" )
			.Set( ":Ã¨", "binary" )
			.Set( "#Ã¨", "binary" )
			.Set( ".Ã¨", "binary" )
			.Set( ":Ã´", "alientalk" )
			.Set( "#Ã´", "alientalk" )
			.Set( ".Ã´", "alientalk" )
			.Set( ":Ã¥", "Syndicate" )
			.Set( "#Ã¥", "Syndicate" )
			.Set( ".Ã¥", "Syndicate" )
			.Set( ":Ã©", "Supply" )
			.Set( "#Ã©", "Supply" )
			.Set( ".Ã©", "Supply" )
			.Set( ":Ã¢", "Service" )
			.Set( "#Ã¢", "Service" )
			.Set( ".Ã¢", "Service" )
			.Set( ":Ã¯", "changeling" )
			.Set( "#Ã¯", "changeling" )
			.Set( ".Ã¯", "changeling" )
		;
		public static readonly ByTable language_keys = new ByTable( 0 );
		public static readonly ByTable all_languages = new ByTable( 0 );
		public static readonly ByTable all_species = new ByTable();
		public static ByTable whitelisted_species = new ByTable(new object [] { "Human" });
		public static readonly ByTable unconscious_overlays = new ByTable()
			.Set( "1", new Image( "icons/mob/screen1_full.dmi", null, "passage1" ) )
			.Set( "2", new Image( "icons/mob/screen1_full.dmi", null, "passage2" ) )
			.Set( "3", new Image( "icons/mob/screen1_full.dmi", null, "passage3" ) )
			.Set( "4", new Image( "icons/mob/screen1_full.dmi", null, "passage4" ) )
			.Set( "5", new Image( "icons/mob/screen1_full.dmi", null, "passage5" ) )
			.Set( "6", new Image( "icons/mob/screen1_full.dmi", null, "passage6" ) )
			.Set( "7", new Image( "icons/mob/screen1_full.dmi", null, "passage7" ) )
			.Set( "8", new Image( "icons/mob/screen1_full.dmi", null, "passage8" ) )
			.Set( "9", new Image( "icons/mob/screen1_full.dmi", null, "passage9" ) )
			.Set( "10", new Image( "icons/mob/screen1_full.dmi", null, "passage10" ) )
		;
		public static readonly ByTable oxyloss_overlays = new ByTable()
			.Set( "1", new Image( "icons/mob/screen1_full.dmi", null, "oxydamageoverlay1" ) )
			.Set( "2", new Image( "icons/mob/screen1_full.dmi", null, "oxydamageoverlay2" ) )
			.Set( "3", new Image( "icons/mob/screen1_full.dmi", null, "oxydamageoverlay3" ) )
			.Set( "4", new Image( "icons/mob/screen1_full.dmi", null, "oxydamageoverlay4" ) )
			.Set( "5", new Image( "icons/mob/screen1_full.dmi", null, "oxydamageoverlay5" ) )
			.Set( "6", new Image( "icons/mob/screen1_full.dmi", null, "oxydamageoverlay6" ) )
			.Set( "7", new Image( "icons/mob/screen1_full.dmi", null, "oxydamageoverlay7" ) )
		;
		public static readonly ByTable brutefireloss_overlays = new ByTable()
			.Set( "1", new Image( "icons/mob/screen1_full.dmi", null, "brutedamageoverlay1" ) )
			.Set( "2", new Image( "icons/mob/screen1_full.dmi", null, "brutedamageoverlay2" ) )
			.Set( "3", new Image( "icons/mob/screen1_full.dmi", null, "brutedamageoverlay3" ) )
			.Set( "4", new Image( "icons/mob/screen1_full.dmi", null, "brutedamageoverlay4" ) )
			.Set( "5", new Image( "icons/mob/screen1_full.dmi", null, "brutedamageoverlay5" ) )
			.Set( "6", new Image( "icons/mob/screen1_full.dmi", null, "brutedamageoverlay6" ) )
		;
		public static readonly ByTable organ_damage_overlays = new ByTable()
			.Set( "l_hand_min", new Image( "icons/mob/organdmg.dmi", null, "l_hand_min", 21 ) )
			.Set( "l_hand_mid", new Image( "icons/mob/organdmg.dmi", null, "l_hand_mid", 21 ) )
			.Set( "l_hand_max", new Image( "icons/mob/organdmg.dmi", null, "l_hand_max", 21 ) )
			.Set( "l_hand_gone", new Image( "icons/mob/organdmg.dmi", null, "l_hand_gone", 21 ) )
			.Set( "r_hand_min", new Image( "icons/mob/organdmg.dmi", null, "r_hand_min", 21 ) )
			.Set( "r_hand_mid", new Image( "icons/mob/organdmg.dmi", null, "r_hand_mid", 21 ) )
			.Set( "r_hand_max", new Image( "icons/mob/organdmg.dmi", null, "r_hand_max", 21 ) )
			.Set( "r_hand_gone", new Image( "icons/mob/organdmg.dmi", null, "r_hand_gone", 21 ) )
			.Set( "l_arm_min", new Image( "icons/mob/organdmg.dmi", null, "l_arm_min", 21 ) )
			.Set( "l_arm_mid", new Image( "icons/mob/organdmg.dmi", null, "l_hand_mid", 21 ) )
			.Set( "l_arm_max", new Image( "icons/mob/organdmg.dmi", null, "l_arm_max", 21 ) )
			.Set( "l_arm_gone", new Image( "icons/mob/organdmg.dmi", null, "l_arm_gone", 21 ) )
			.Set( "r_arm_min", new Image( "icons/mob/organdmg.dmi", null, "r_arm_min", 21 ) )
			.Set( "r_arm_mid", new Image( "icons/mob/organdmg.dmi", null, "r_arm_mid", 21 ) )
			.Set( "r_arm_max", new Image( "icons/mob/organdmg.dmi", null, "r_arm_max", 21 ) )
			.Set( "r_arm_gone", new Image( "icons/mob/organdmg.dmi", null, "r_arm_gone", 21 ) )
			.Set( "l_leg_min", new Image( "icons/mob/organdmg.dmi", null, "l_leg_min", 21 ) )
			.Set( "l_leg_mid", new Image( "icons/mob/organdmg.dmi", null, "l_leg_mid", 21 ) )
			.Set( "l_leg_max", new Image( "icons/mob/organdmg.dmi", null, "l_leg_max", 21 ) )
			.Set( "l_leg_gone", new Image( "icons/mob/organdmg.dmi", null, "l_leg_gone", 21 ) )
			.Set( "r_leg_min", new Image( "icons/mob/organdmg.dmi", null, "r_leg_min", 21 ) )
			.Set( "r_leg_mid", new Image( "icons/mob/organdmg.dmi", null, "r_leg_mid", 21 ) )
			.Set( "r_leg_max", new Image( "icons/mob/organdmg.dmi", null, "r_leg_max", 21 ) )
			.Set( "r_leg_gone", new Image( "icons/mob/organdmg.dmi", null, "r_leg_gone", 21 ) )
			.Set( "r_foot_min", new Image( "icons/mob/organdmg.dmi", null, "r_foot_min", 21 ) )
			.Set( "r_foot_mid", new Image( "icons/mob/organdmg.dmi", null, "r_foot_mid", 21 ) )
			.Set( "r_foot_max", new Image( "icons/mob/organdmg.dmi", null, "r_foot_max", 21 ) )
			.Set( "r_foot_gone", new Image( "icons/mob/organdmg.dmi", null, "r_foot_gone", 21 ) )
			.Set( "l_foot_min", new Image( "icons/mob/organdmg.dmi", null, "l_foot_min", 21 ) )
			.Set( "l_foot_mid", new Image( "icons/mob/organdmg.dmi", null, "l_foot_mid", 21 ) )
			.Set( "l_foot_max", new Image( "icons/mob/organdmg.dmi", null, "l_foot_max", 21 ) )
			.Set( "l_foot_gone", new Image( "icons/mob/organdmg.dmi", null, "l_foot_gone", 21 ) )
			.Set( "chest_min", new Image( "icons/mob/organdmg.dmi", null, "chest_min", 21 ) )
			.Set( "chest_mid", new Image( "icons/mob/organdmg.dmi", null, "chest_mid", 21 ) )
			.Set( "chest_max", new Image( "icons/mob/organdmg.dmi", null, "chest_max", 21 ) )
			.Set( "chest_gone", new Image( "icons/mob/organdmg.dmi", null, "chest_gone", 21 ) )
			.Set( "head_min", new Image( "icons/mob/organdmg.dmi", null, "head_min", 21 ) )
			.Set( "head_mid", new Image( "icons/mob/organdmg.dmi", null, "head_mid", 21 ) )
			.Set( "head_max", new Image( "icons/mob/organdmg.dmi", null, "head_max", 21 ) )
			.Set( "head_gone", new Image( "icons/mob/organdmg.dmi", null, "head_gone", 21 ) )
			.Set( "groin_min", new Image( "icons/mob/organdmg.dmi", null, "groin_min", 21 ) )
			.Set( "groin_mid", new Image( "icons/mob/organdmg.dmi", null, "groin_mid", 21 ) )
			.Set( "groin_max", new Image( "icons/mob/organdmg.dmi", null, "groin_max", 21 ) )
			.Set( "groin_gone", new Image( "icons/mob/organdmg.dmi", null, "groin_gone", 21 ) )
		;
		public static readonly ByTable damage_icon_parts = new ByTable();
		public static readonly ByTable cover_protection_value_list = new ByTable();
		public static ByTable ai_list = new ByTable();
		public static readonly ByTable vox_digits = new ByTable(new object [] { 
			"sound/vox_fem/one.ogg", 
			"sound/vox_fem/two.ogg", 
			"sound/vox_fem/three.ogg", 
			"sound/vox_fem/four.ogg", 
			"sound/vox_fem/five.ogg", 
			"sound/vox_fem/six.ogg", 
			"sound/vox_fem/seven.ogg", 
			"sound/vox_fem/eight.ogg", 
			"sound/vox_fem/nine.ogg", 
			"sound/vox_fem/ten.ogg", 
			"sound/vox_fem/eleven.ogg", 
			"sound/vox_fem/twelve.ogg", 
			"sound/vox_fem/thirteen.ogg", 
			"sound/vox_fem/fourteen.ogg", 
			"sound/vox_fem/fifteen.ogg", 
			"sound/vox_fem/sixteen.ogg", 
			"sound/vox_fem/seventeen.ogg", 
			"sound/vox_fem/eighteen.ogg", 
			"sound/vox_fem/nineteen.ogg"
		 });
		public static readonly ByTable vox_tens = new ByTable(new object [] { 
			null, 
			null, 
			"sound/vox_fem/twenty.ogg", 
			"sound/vox_fem/thirty.ogg", 
			"sound/vox_fem/fourty.ogg", 
			"sound/vox_fem/fifty.ogg", 
			"sound/vox_fem/sixty.ogg", 
			"sound/vox_fem/seventy.ogg", 
			"sound/vox_fem/eighty.ogg", 
			"sound/vox_fem/ninety.ogg"
		 });
		public static readonly ByTable vox_units = new ByTable(new object [] { null, "sound/vox_fem/thousand.ogg", "sound/vox_fem/million.ogg" });
		public static readonly Cameranet cameranet = new Cameranet();
		public static readonly dynamic borer_chem_types = Lang13.GetTypes( typeof(BorerChem) ) - typeof(BorerChem);
		public static readonly dynamic borer_unlock_types = Lang13.GetTypes( typeof(Unlockable_Borer) ) - typeof(Unlockable_Borer) - typeof(Unlockable_Borer_ChemUnlock) - typeof(Unlockable_Borer_VerbUnlock);
		public static readonly ByTable animal_count = new ByTable();
		public static readonly ByTable crate_mimic_disguises = new ByTable()
			.Set( "default", new ByTable(new object [] { typeof(Obj_Structure_Closet_Crate) }) )
			.Set( "space", new ByTable(new object [] { typeof(Obj_Structure_Closet_Emcloset) }) )
			.Set( "medbay", new ByTable(new object [] { typeof(Obj_Structure_Closet_Crate), typeof(Obj_Structure_Closet_Crate_Medical), typeof(Obj_Structure_Closet_Crate_Freezer) }) )
			.Set( "engineering", new ByTable(new object [] { 
				typeof(Obj_Structure_Closet_Crate), 
				typeof(Obj_Structure_Closet_Crate_Engi), 
				typeof(Obj_Structure_Closet_Crate_Secure_Engisec), 
				typeof(Obj_Structure_Closet_Crate_Radiation)
			 }) )
			.Set( "bar", new ByTable(new object [] { typeof(Obj_Structure_Closet_Crate), typeof(Obj_Structure_Closet_Cabinet), typeof(Obj_Structure_Closet_Crate_Freezer) }) )
			.Set( "emergency", new ByTable(new object [] { typeof(Obj_Structure_Closet_Emcloset) }) )
		;
		public static readonly ByTable item_mimic_disguises = new ByTable()
			.Set( "default", new ByTable(new object [] { 
				typeof(Obj_Item_AlienEmbryo), 
				typeof(Obj_Item_AmmoStorage), 
				typeof(Obj_Item_Device_Chameleon), 
				typeof(Obj_Item_Toy_Crossbow), 
				typeof(Obj_Item_Toy_Waterflower), 
				typeof(Obj_Item_Weapon_Banhammer_Admin), 
				typeof(Obj_Item_Weapon_BeachBall), 
				typeof(Obj_Item_Weapon_Card_Emag), 
				typeof(Obj_Item_Weapon_Extinguisher), 
				typeof(Obj_Item_Weapon_HandLabeler), 
				typeof(Obj_Item_Weapon_Soap), 
				typeof(Obj_Item_Weapon_Crowbar), 
				typeof(Obj_Item_Weapon_Caution), 
				typeof(Obj_Item_Weapon_Bananapeel), 
				typeof(Obj_Item_Device_Chameleon), 
				typeof(Obj_Item_Weapon_Storage_Pneumatic), 
				typeof(Obj_Item_Trash_Discountchocolate), 
				typeof(Obj_Item_Weapon_Fireaxe), 
				typeof(Obj_Item_Weapon_Gun_Gatling), 
				typeof(Obj_Item_Weapon_TableParts), 
				typeof(Obj_Item_Weapon_Wrench_Socket), 
				typeof(Obj_Item_Weapon_Lighter), 
				typeof(Obj_Item_Weapon_Bikehorn_Rubberducky), 
				typeof(Obj_Item_Weapon_Lipstick), 
				typeof(Obj_Item_Weapon_Stamp_Clown), 
				typeof(Obj_Item_Weapon_Storage_Backpack_Holding), 
				typeof(Obj_Item_Clothing_Gloves_Yellow), 
				typeof(Obj_Item_Device_Aicard), 
				typeof(Obj_Item_Device_Analyzer), 
				typeof(Obj_Item_Device_Assembly_Igniter), 
				typeof(Obj_Item_Device_Camera), 
				typeof(Obj_Item_Device_Codebreaker), 
				typeof(Obj_Item_Device_DeviceAnalyser), 
				typeof(Obj_Item_Device_Flash), 
				typeof(Obj_Item_Device_Flashlight), 
				typeof(Obj_Item_Device_Hailer), 
				typeof(Obj_Item_Device_MaterialSynth), 
				typeof(Obj_Item_Device_Megaphone), 
				typeof(Obj_Item_Device_Paicard), 
				typeof(Obj_Item_Device_Pda_Clown), 
				typeof(Obj_Item_Device_Rcd_Matter_Engineering), 
				typeof(Obj_Item_Device_Radio), 
				typeof(Obj_Item_Device_Robotanalyzer), 
				typeof(Obj_Item_Device_Soulstone), 
				typeof(Obj_Item_Device_Soundsynth), 
				typeof(Obj_Item_Device_Violin), 
				typeof(Obj_Item_Device_WormholeJaunter), 
				typeof(Obj_Item_Weapon_Gun_Portalgun), 
				typeof(Obj_Item_Target)
			 }) )
			.Set( "medbay", new ByTable(new object [] { 
				typeof(Obj_Item_Weapon_CircularSaw), 
				typeof(Obj_Item_Weapon_Melee_Defibrillator), 
				typeof(Obj_Item_Weapon_Surgicaldrill), 
				typeof(Obj_Item_Weapon_Hemostat), 
				typeof(Obj_Item_Weapon_Dnainjector_Nofail_Hulkmut), 
				typeof(Obj_Item_Weapon_Bonesetter), 
				typeof(Obj_Item_Weapon_AutopsyScanner), 
				typeof(Obj_Item_Weapon_FixOVein), 
				typeof(Obj_Item_Stack_Medical_Ointment), 
				typeof(Obj_Item_Weapon_Storage_Firstaid), 
				typeof(Obj_Item_Weapon_Gun_Syringe_Rapidsyringe), 
				typeof(Obj_Item_Weapon_Storage_Firstaid_Fire), 
				typeof(Obj_Item_Weapon_Storage_Firstaid_O2), 
				typeof(Obj_Item_Weapon_Storage_Firstaid_Toxin), 
				typeof(Obj_Item_Weapon_Cautery), 
				typeof(Obj_Item_Device_Healthanalyzer), 
				typeof(Obj_Item_Pizzabox_Margherita), 
				typeof(Obj_Item_Toy_Balloon), 
				typeof(Obj_Item_Weapon_Coin_Clown), 
				typeof(Obj_Item_Weapon_Dice_D4), 
				typeof(Obj_Item_Weapon_Dice_D12), 
				typeof(Obj_Item_Weapon_Dice_D20), 
				typeof(Obj_Item_Weapon_Gun_Gravitywell), 
				typeof(Obj_Item_Weapon_Harpoon)
			 }) )
			.Set( "security", new ByTable(new object [] { 
				typeof(Obj_Item_Device_Chameleon), 
				typeof(Obj_Item_Weapon_Card_Emag), 
				typeof(Obj_Item_Weapon_Gun_Energy_Taser), 
				typeof(Obj_Item_Weapon_Melee_Baton), 
				typeof(Obj_Item_Weapon_Tome), 
				typeof(Obj_Item_Weapon_Crowbar), 
				typeof(Obj_Item_Weapon_Storage_Fancy_DonutBox), 
				typeof(Obj_Item_Weapon_Storage_Firstaid), 
				typeof(Obj_Item_Weapon_Storage_Pneumatic), 
				typeof(Obj_Item_Weapon_Gun_Gatling), 
				typeof(Obj_Item_Weapon_Handcuffs), 
				typeof(Obj_Item_Weapon_Melee_Energy_Sword_Green), 
				typeof(Obj_Item_Clothing_Gloves_Yellow), 
				typeof(Obj_Item_Weapon_Gun_Osipr), 
				typeof(Obj_Item_Weapon_Gun_Energy_Staff_Animate), 
				typeof(Obj_Item_Weapon_Gun_Energy_Mindflayer), 
				typeof(Obj_Item_Weapon_Gun_Energy_Lasercannon), 
				typeof(Obj_Item_Weapon_Gun_Energy_PulseRifle), 
				typeof(Obj_Item_Weapon_Katana_Hfrequency), 
				typeof(Obj_Item_Weapon_Melee_Cultblade), 
				typeof(Obj_Item_Weapon_Pickaxe_Jackhammer), 
				typeof(Obj_Item_Weapon_Tank_Plasma), 
				typeof(Obj_Item_Weapon_Gibtonite)
			 }) )
			.Set( "bar", GlobalFuncs.existing_typesof( typeof(Obj_Item_Weapon_ReagentContainers_Food_Drinks) ) - Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Drinks_Bottle_Customizable) ) )
			.Set( "emergency", new ByTable(new object [] { 
				typeof(Obj_Item_Clothing_Mask_Breath), 
				typeof(Obj_Item_Weapon_Tank_Jetpack_Oxygen), 
				typeof(Obj_Item_Weapon_Tank_EmergencyOxygen), 
				typeof(Obj_Item_Weapon_Tank_Air), 
				typeof(Obj_Item_Weapon_Crowbar), 
				typeof(Obj_Item_Weapon_Storage_Firstaid), 
				typeof(Obj_Item_Weapon_Storage_Backpack_Holding), 
				typeof(Obj_Item_Weapon_Storage_Backpack_Security), 
				typeof(Obj_Item_Device_Maracas), 
				typeof(Obj_Item_Device_Multitool), 
				typeof(Obj_Item_Clothing_Gloves_Yellow), 
				typeof(Obj_Item_Weapon_HandTele), 
				typeof(Obj_Item_Weapon_Card_Id_CaptainsSpare), 
				typeof(Obj_Item_Weapon_Card_Emag), 
				typeof(Obj_Item_Weapon_Extinguisher), 
				typeof(Obj_Item_Weapon_Gun_Portalgun)
			 }) )
			.Set( "lowhealth", new ByTable(new object [] { typeof(Obj_Item_Weapon_Cigbutt), typeof(Obj_Item_Weapon_Shard), typeof(Obj_Item_Toy_Blink), typeof(Obj_Item_Toy_Ammo_Crossbow), typeof(Obj_Item_AmmoCasing_A666) }) )
			.Set( "kitchen", GlobalFuncs.existing_typesof( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) ) - Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Customizable) ) - Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Sliceable) ) - typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Slimesoup) - Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Sweet) ) )
			.Set( "library", Lang13.GetTypes( typeof(Obj_Item_Weapon_Book) ) )
			.Set( "botany", GlobalFuncs.existing_typesof( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) ) )
			.Set( "vault", new ByTable(new object [] { typeof(Obj_Machinery_Nuclearbomb), typeof(Obj_Item_Weapon_Disk_Nuclear) }) + Lang13.GetTypes( typeof(Obj_Item_Weapon_Coin) ) + Lang13.GetTypes( typeof(Obj_Item_Stack_Sheet_Mineral) ) - typeof(Obj_Item_Stack_Sheet_Mineral) - typeof(Obj_Item_Stack_Sheet_Mineral_Enruranium) )
			.Set( "chapel", new ByTable(new object [] { 
				typeof(Obj_Item_Weapon_Storage_Bible), 
				typeof(Obj_Item_Clothing_Head_ChaplainHood), 
				typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Chaplain), 
				typeof(Obj_Item_Clothing_Suit_ChaplainHoodie), 
				typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Chaplain), 
				typeof(Obj_Item_Device_Pda_Chaplain), 
				typeof(Obj_Item_Weapon_Nullrod), 
				typeof(Obj_Item_Weapon_ReagentContainers_Food_Drinks_Bottle_Holywater), 
				typeof(Obj_Item_Weapon_Staff)
			 }) )
		;
		public static readonly ByTable protected_objects = new ByTable(new object [] { typeof(Obj_Structure_Table), typeof(Obj_Structure_Cable), typeof(Obj_Structure_Window), typeof(Obj_Structure_ParticleAccelerator) });
		public static readonly dynamic spider_types = Lang13.GetTypes( typeof(Mob_Living_SimpleAnimal_Hostile_GiantSpider) );
		public static readonly ByTable json_escape = new ByTable(new object [] { "\\", "\"", "'", "\n" });
		public static ByTable photocollector_list = new ByTable();
		public static ByTable prism_list = new ByTable();
		public static ByTable mirror_list = new ByTable();
		public static readonly ByTable paper_folding_results = new ByTable()
			.Set( "paper plane", typeof(Obj_Item_Weapon_PFolded_Plane) )
			.Set( "paper hat", typeof(Obj_Item_Weapon_PFolded_Hat) )
			.Set( "ball of paper", typeof(Obj_Item_Weapon_PFolded_Ball) )
			.Set( "folded note", typeof(Obj_Item_Weapon_PFolded_NoteSmall) )
			.Set( "origami crane", typeof(Obj_Item_Weapon_PFolded_Crane) )
			.Set( "origami boat", typeof(Obj_Item_Weapon_PFolded_Boat) )
			.Set( "origami heart", typeof(Obj_Item_Weapon_PFolded_FoldedHeart) )
		;
		public static readonly ByTable battery_charge = new ByTable(new object [] { 
			new Image( "icons/obj/power.dmi", "smes-og1" ), 
			new Image( "icons/obj/power.dmi", "smes-og2" ), 
			new Image( "icons/obj/power.dmi", "smes-og3" ), 
			new Image( "icons/obj/power.dmi", "smes-og4" ), 
			new Image( "icons/obj/power.dmi", "smes-og5" )
		 });
		public static readonly ByTable battery_charging = new ByTable(new object [] { new Image( "icons/obj/power.dmi", "smes-oc0" ), new Image( "icons/obj/power.dmi", "smes-oc1" ) });
		public static readonly ByTable battery_online = new ByTable(new object [] { new Image( "icons/obj/power.dmi", "smes-op0" ), new Image( "icons/obj/power.dmi", "smes-op1" ) });
		public static ByTable alllights = new ByTable();
		public static ByTable solars_list = new ByTable();
		public static ByTable rad_collectors = new ByTable();
		public static ByTable field_gen_list = new ByTable();
		public static readonly ByTable bullet_master = new ByTable();
		public static readonly ByTable impact_master = new ByTable();
		public static readonly ByTable available_staff_transforms = new ByTable(new object [] { "monkey", "robot", "slime", "xeno", "human", "furry" });
		public static readonly ByTable beam_master = new ByTable();
		public static readonly ByTable disposalpipeID2State = new ByTable(new object [] { "pipe-s", "pipe-c", "pipe-j1", "pipe-y", "pipe-t", "disposal", "outlet", "intake", "pipe-j1s", "pipe-j1s" });
		public static readonly ByTable paint_variants = new ByTable()
			.Set( "Decals", new ByTable(new object [] { 
				new PaintInfo_Decal( 3, "warning" ), 
				new PaintInfo_Decal( 1, "all" ), 
				new PaintInfo_Decal( 2, "warning_corner" ), 
				new PaintInfo_Decal( 1, "unloading" ), 
				new PaintInfo_Decal( 1, "bot" ), 
				new PaintInfo_Decal( 2, "loading_area" ), 
				new PaintInfo_Decal( 1, "no" ), 
				new PaintInfo_Decal( 2, "oxygen" ), 
				new PaintInfo_Decal( 2, "nitrogen" ), 
				new PaintInfo_Decal( 2, "carbon_dioxide" ), 
				new PaintInfo_Decal( 2, "nitrous_oxide" ), 
				new PaintInfo_Decal( 2, "air" ), 
				new PaintInfo_Decal( 2, "plasma" ), 
				new PaintInfo_Decal( 2, "zoo" ), 
				new PaintInfo_Decal( 2, "1" ), 
				new PaintInfo_Decal( 2, "2" ), 
				new PaintInfo_Decal( 2, "3" ), 
				new PaintInfo_Decal( 2, "4" ), 
				new PaintInfo_Decal( 2, "5" ), 
				new PaintInfo_Decal( 2, "6" ), 
				new PaintInfo_Decal( 2, "7" ), 
				new PaintInfo_Decal( 2, "8" ), 
				new PaintInfo_Decal( 2, "9" ), 
				new PaintInfo_Decal( 2, "0" ), 
				new PaintInfo_Decal( 2, "1" ), 
				new PaintInfo_Decal( 2, "1" ), 
				new PaintInfo_Decal( 2, "1" ), 
				new PaintInfo_Decal( 2, "1" )
			 }) )
			.Set( "Gray", new ByTable(new object [] { new PaintInfo( 1, "floor" ), new PaintInfo( 3, "black" ), new PaintInfo( 2, "blackcorner" ) }) )
			.Set( "Neutral", new ByTable(new object [] { new PaintInfo( 3, "neutral" ), new PaintInfo( 2, "neutralcorner" ), new PaintInfo( 1, "neutralfull" ) }) )
			.Set( "White", new ByTable(new object [] { new PaintInfo( 1, "white" ), new PaintInfo( 3, "whitehall" ), new PaintInfo( 2, "whitecorner" ) }) )
			.Set( "Red", new ByTable(new object [] { new PaintInfo( 1, "redfull" ), new PaintInfo( 3, "red" ), new PaintInfo( 2, "redcorner" ) }) )
			.Set( "Green", new ByTable(new object [] { new PaintInfo( 1, "greenfull" ), new PaintInfo( 3, "green" ), new PaintInfo( 2, "greencorner" ) }) )
			.Set( "Blue", new ByTable(new object [] { new PaintInfo( 1, "bluefull" ), new PaintInfo( 3, "blue" ), new PaintInfo( 2, "bluecorner" ) }) )
			.Set( "Yellow", new ByTable(new object [] { new PaintInfo( 1, "yellowfull" ), new PaintInfo( 3, "yellow" ), new PaintInfo( 2, "yellowcorner" ) }) )
			.Set( "Purple", new ByTable(new object [] { new PaintInfo( 1, "purplefull" ), new PaintInfo( 3, "purple" ), new PaintInfo( 2, "purplecorner" ) }) )
			.Set( "Orange", new ByTable(new object [] { new PaintInfo( 1, "orangefull" ), new PaintInfo( 3, "orange" ), new PaintInfo( 2, "orangecorner" ) }) )
			.Set( "Brown", new ByTable(new object [] { new PaintInfo( 1, "dark brown full" ), new PaintInfo( 3, "brown" ), new PaintInfo( 2, "browncorner" ) }) )
			.Set( "Red and yellow", new ByTable(new object [] { new PaintInfo( 1, "redyellowfull" ), new PaintInfo( 3, "redyellow" ) }) )
			.Set( "Red and blue", new ByTable(new object [] { new PaintInfo( 1, "redbluefull" ), new PaintInfo( 3, "redblue" ) }) )
			.Set( "Red and green", new ByTable(new object [] { new PaintInfo( 1, "redgreenfull" ), new PaintInfo( 3, "redgreen" ) }) )
			.Set( "Green and yellow", new ByTable(new object [] { new PaintInfo( 1, "greenyellowfull" ), new PaintInfo( 3, "greenyellow" ) }) )
			.Set( "Green and blue", new ByTable(new object [] { new PaintInfo( 1, "greenbluefull" ), new PaintInfo( 3, "greenblue" ) }) )
			.Set( "Blue and yellow", new ByTable(new object [] { new PaintInfo( 1, "blueyellowfull" ), new PaintInfo( 3, "blueyellow" ) }) )
			.Set( "White red", new ByTable(new object [] { new PaintInfo( 1, "whiteredfull" ), new PaintInfo( 3, "whitered" ), new PaintInfo( 2, "whiteredcorner" ) }) )
			.Set( "White green", new ByTable(new object [] { new PaintInfo( 1, "whitegreenfull" ), new PaintInfo( 3, "whitegreen" ), new PaintInfo( 2, "whitegreencorner" ) }) )
			.Set( "White blue", new ByTable(new object [] { new PaintInfo( 1, "whitebluefull" ), new PaintInfo( 3, "whiteblue" ), new PaintInfo( 2, "whitebluecorner" ), new PaintInfo( 1, "cmo" ) }) )
			.Set( "White yellow", new ByTable(new object [] { new PaintInfo( 1, "whiteyellowfull" ), new PaintInfo( 3, "whiteyellow" ), new PaintInfo( 2, "whiteyellowcorner" ) }) )
			.Set( "White purple", new ByTable(new object [] { new PaintInfo( 1, "whitepurplefull" ), new PaintInfo( 3, "whitepurple" ), new PaintInfo( 2, "whitepurplecorner" ) }) )
			.Set( "Arrival", new ByTable(new object [] { new PaintInfo( 3, "arrival" ) }) )
			.Set( "Escape", new ByTable(new object [] { new PaintInfo( 3, "escape" ) }) )
			.Set( "Dark", new ByTable(new object [] { new PaintInfo( 1, "dark" ), new PaintInfo( 3, "dark floor stripe" ), new PaintInfo( 2, "dark floor corner" ) }) )
			.Set( "Dark red", new ByTable(new object [] { new PaintInfo( 1, "dark red full" ), new PaintInfo( 3, "dark red stripe" ), new PaintInfo( 2, "dark red corner" ) }) )
			.Set( "Dark blue", new ByTable(new object [] { new PaintInfo( 1, "dark blue full" ), new PaintInfo( 3, "dark blue stripe" ), new PaintInfo( 2, "dark blue corner" ) }) )
			.Set( "Dark green", new ByTable(new object [] { new PaintInfo( 1, "dark green full" ), new PaintInfo( 3, "dark green stripe" ), new PaintInfo( 2, "dark green corner" ) }) )
			.Set( "Dark purple", new ByTable(new object [] { new PaintInfo( 1, "dark purple full" ), new PaintInfo( 3, "dark purple stripe" ), new PaintInfo( 2, "dark purple corner" ) }) )
			.Set( "Dark yellow", new ByTable(new object [] { new PaintInfo( 1, "dark yellow full" ), new PaintInfo( 3, "dark yellow stripe" ), new PaintInfo( 2, "dark yellow corner" ) }) )
			.Set( "Dark orange", new ByTable(new object [] { new PaintInfo( 1, "dark orange full" ), new PaintInfo( 3, "dark orange stripe" ), new PaintInfo( 2, "dark orange corner" ) }) )
			.Set( "Dark vault", new ByTable(new object [] { new PaintInfo( 1, "dark vault full" ), new PaintInfo( 3, "dark vault stripe" ), new PaintInfo( 2, "dark vault corner" ), new PaintInfo( 2, "dark-markings" ) }) )
			.Set( "Markings", new ByTable(new object [] { 
				new PaintInfo( 1, "delivery" ), 
				new PaintInfo( 1, "bot" ), 
				new PaintInfo( 1, "whitedelivery" ), 
				new PaintInfo( 1, "whitebot" ), 
				new PaintInfo( 1, "enginedelivery", 3 ), 
				new PaintInfo( 1, "enginebot", 3 ), 
				new PaintInfo( 1, "plaque" )
			 }) )
			.Set( "Loading area", new ByTable(new object [] { new PaintInfo( 2, "loadingarea" ), new PaintInfo( 2, "engineloadingarea", 3 ), new PaintInfo( 2, "dark loading" ) }) )
			.Set( "Warning", new ByTable(new object [] { new PaintInfo( 3, "warning" ), new PaintInfo( 2, "warningcorner" ) }) )
			.Set( "White warning", new ByTable(new object [] { new PaintInfo( 3, "warnwhite" ), new PaintInfo( 2, "warnwhitecorner" ) }) )
			.Set( "Reinforced warning", new ByTable(new object [] { new PaintInfo( 3, "enginewarn", 3 ), new PaintInfo( 2, "enginewarncorner", 3 ) }) )
			.Set( "Plating warning", new ByTable(new object [] { new PaintInfo( 3, "warnplate", 2 ), new PaintInfo( 2, "warnplatecorner", 2 ) }) )
			.Set( "Chapel", new ByTable(new object [] { new PaintInfo( 3, "chapel" ) }) )
			.Set( "SS13 logo", new ByTable(new object [] { 
				new PaintInfo( 1, "L1" ), 
				new PaintInfo( 1, "L3" ), 
				new PaintInfo( 1, "L5" ), 
				new PaintInfo( 1, "L7" ), 
				new PaintInfo( 1, "L9" ), 
				new PaintInfo( 1, "L11" ), 
				new PaintInfo( 1, "L13" ), 
				new PaintInfo( 1, "L15" ), 
				new PaintInfo( 1, "L2" ), 
				new PaintInfo( 1, "L4" ), 
				new PaintInfo( 1, "L6" ), 
				new PaintInfo( 1, "L8" ), 
				new PaintInfo( 1, "L10" ), 
				new PaintInfo( 1, "L12" ), 
				new PaintInfo( 1, "L14" ), 
				new PaintInfo( 1, "L16" )
			 }) )
			.Set( "Derelict logo", new ByTable(new object [] { 
				new PaintInfo( 1, "derelict9" ), 
				new PaintInfo( 1, "derelict10" ), 
				new PaintInfo( 1, "derelict11" ), 
				new PaintInfo( 1, "derelict12" ), 
				new PaintInfo( 1, "derelict13" ), 
				new PaintInfo( 1, "derelict14" ), 
				new PaintInfo( 1, "derelict15" ), 
				new PaintInfo( 1, "derelict16" ), 
				new PaintInfo( 1, "derelict1" ), 
				new PaintInfo( 1, "derelict2" ), 
				new PaintInfo( 1, "derelict3" ), 
				new PaintInfo( 1, "derelict4" ), 
				new PaintInfo( 1, "derelict5" ), 
				new PaintInfo( 1, "derelict6" ), 
				new PaintInfo( 1, "derelict7" ), 
				new PaintInfo( 1, "derelict8" )
			 }) )
			.Set( "Other", new ByTable(new object [] { 
				new PaintInfo( 1, "dark" ), 
				new PaintInfo( 1, "bar" ), 
				new PaintInfo( 1, "cafeteria" ), 
				new PaintInfo( 1, "checker" ), 
				new PaintInfo( 1, "barber" ), 
				new PaintInfo( 1, "grimy" ), 
				new PaintInfo( 1, "hydrofloor" ), 
				new PaintInfo( 1, "showroomfloor" ), 
				new PaintInfo( 1, "freezerfloor" ), 
				new PaintInfo( 1, "bcircuit" ), 
				new PaintInfo( 1, "gcircuit" ), 
				new PaintInfo( 1, "solarpanel" )
			 }) )
		;
		public static readonly ByTable chifir_doesnt_remove = new ByTable(new object [] { "chifir", "blood" });
		public static readonly ByTable tonio_doesnt_remove = new ByTable(new object [] { "tonio", "blood" });
		public static readonly ByTable LOGGED_SPLASH_REAGENTS = new ByTable(new object [] { "fuel", "thermite" });
		public static readonly ByTable logged_sprayed_reagents = new ByTable(new object [] { "sacid", "pacid", "lube", "fuel" });
		public static readonly dynamic valid_random_food_types = GlobalFuncs.existing_typesof( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) ) - Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Customizable) );
		public static readonly ByTable charcoal_doesnt_remove = new ByTable(new object [] { "charcoal", "blood" });
		public static readonly ByTable DEFAULT_TAGGER_LOCATIONS = new ByTable(new object [] { 
			"Disposals", 
			"Cargo Bay", 
			"QM Office", 
			"Engineering", 
			"CE Office", 
			"Atmospherics", 
			"Security", 
			"HoS Office", 
			"Medbay", 
			"CMO Office", 
			"Chemistry", 
			"Research", 
			"RD Office", 
			"Robotics", 
			"HoP Office", 
			"Library", 
			"Chapel", 
			"Theatre", 
			"Bar", 
			"Kitchen", 
			"Hydroponics", 
			"Janitor Closet", 
			"Genetics", 
			"Telecomms", 
			"Mechanics", 
			"Telescience"
		 });
		public static ByTable message_servers = new ByTable();
		public static ByTable rnd_machines = new ByTable();
		public static ByTable design_list = new ByTable();
		public static ByTable tech_list = new ByTable();
		public static readonly ByTable hidden_tech = new ByTable(new object [] { typeof(Tech), typeof(Tech_Nanotrasen) });
		public static readonly ByTable responsive_carriers = new ByTable(new object [] { "carbon", "potassium", "hydrogen", "nitrogen", "mercury", "iron", "chlorine", "phosphorus", "plasma" });
		public static readonly ByTable finds_as_strings = new ByTable(new object [] { 
			"Trace organic cells", 
			"Long exposure particles", 
			"Trace water particles", 
			"Crystalline structures", 
			"Metallic derivative", 
			"Metallic composite", 
			"Metamorphic/igneous rock composite", 
			"Metamorphic/sedimentary rock composite", 
			"Anomalous material"
		 });
		public static ByTable authenticators = new ByTable();
		public static dynamic spells = Lang13.GetTypes( typeof(Spell) );
		public static readonly Store centcomm_store = new Store();
		public static readonly ByTable GPS_list = new ByTable();
		public static readonly ByTable SPS_list = new ByTable();
		public static readonly ByTable telesci_warnings = new ByTable(new object [] { 
			typeof(Obj_Machinery_Power_Supermatter), 
			typeof(Obj_Machinery_TheSingularitygen), 
			typeof(Obj_Item_Weapon_Grenade), 
			typeof(Obj_Item_Device_TransferValve), 
			typeof(Obj_Item_Device_FuseBomb), 
			typeof(Obj_Item_Device_Onetankbomb), 
			typeof(Obj_Machinery_PortableAtmospherics_Canister)
		 });
		public static readonly ByTable ANTIGENS = new ByTable()
			.Set( "" + GlobalVars.ANTIGEN_A, "A" )
			.Set( "" + GlobalVars.ANTIGEN_B, "B" )
			.Set( "" + GlobalVars.ANTIGEN_RH, "RH" )
			.Set( "" + GlobalVars.ANTIGEN_Q, "Q" )
			.Set( "" + GlobalVars.ANTIGEN_U, "U" )
			.Set( "" + GlobalVars.ANTIGEN_V, "V" )
			.Set( "" + GlobalVars.ANTIGEN_Z, "Z" )
			.Set( "" + GlobalVars.ANTIGEN_M, "M" )
			.Set( "" + GlobalVars.ANTIGEN_N, "N" )
			.Set( "" + GlobalVars.ANTIGEN_P, "P" )
			.Set( "" + GlobalVars.ANTIGEN_O, "O" )
		;
		public static ByTable disease2_list = new ByTable();
		public static readonly ByTable virusDB = new ByTable();
		public static readonly ByTable compatible_mobs = new ByTable(new object [] { typeof(Mob_Living_Carbon_Human), typeof(Mob_Living_Carbon_Monkey) });
		public static ByTable buildmodeholders = new ByTable();
		public static readonly ByTable newscaster_standard_feeds = new ByTable(new object [] { typeof(NewsAnnouncement_BluespaceResearch), typeof(NewsAnnouncement_LotusTree), typeof(NewsAnnouncement_RandomJunk), typeof(NewsAnnouncement_FoodRiots) });
		public static readonly ByTable announced_news_types = new ByTable();
		public static ByTable allfaxes = new ByTable();
		public static ByTable alldepartments = new ByTable(new object [] { "Central Command" });
		public static ByTable atmos_controllers = new ByTable();
		public static ByTable ul_FastRoot = new ByTable(new object [] { 
			0, 
			1, 
			1, 
			1, 
			2, 
			2, 
			2, 
			2, 
			2, 
			3, 
			3, 
			3, 
			3, 
			3, 
			3, 
			3, 
			4, 
			4, 
			4, 
			4, 
			4, 
			4, 
			4, 
			4, 
			4, 
			5, 
			5, 
			5, 
			5, 
			5, 
			5, 
			5, 
			5, 
			5, 
			5, 
			5, 
			6, 
			6, 
			6, 
			6, 
			6, 
			6, 
			6, 
			6, 
			6, 
			6, 
			6, 
			6, 
			6, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7, 
			7
		 });
		public static readonly ByTable sharing_lookup_table = new ByTable(new object [] { 0.3, 0.4, 0.71, 0.54, 0.6, 0.66 });
		public static ByTable accessable_z_levels = new ByTable();
		public static readonly string sc_safecode1 = "" + Rand13.Int( 0, 9 );
		public static readonly string sc_safecode2 = "" + Rand13.Int( 0, 9 );
		public static readonly string sc_safecode3 = "" + Rand13.Int( 0, 9 );
		public static readonly string sc_safecode4 = "" + Rand13.Int( 0, 9 );
		public static readonly string sc_safecode5 = "" + Rand13.Int( 0, 9 );
		public static readonly Map_Active map = new Map_Active();
		public static readonly ByTable prox_sensor_ignored_types = new ByTable(new object [] { typeof(Obj_Effect_Beam) });
		public static readonly ByTable html_interfaces = new ByTable();
		public static readonly Mob_Dview dview_mob = new Mob_Dview();
		public static dynamic universe = new UniversalState();
		public static readonly double game_year = ( String13.ParseNumber( String13.FormatTime( Game13.realtime, "YYYY" ) ) ??0) + 544;
		public static readonly Moduletypes mods = new Moduletypes();
		public static readonly Nanomanager nanomanager = new Nanomanager();
		public static DBConnection dbcon = new DBConnection();
		public static DBConnection dbcon_old = new DBConnection();
		public static readonly GasMixture space_gas = new GasMixture();
		public static Obj_Item_Device_Radio_Intercom_Universe announcement_intercom = new Obj_Item_Device_Radio_Intercom_Universe();
		public static readonly StatCollector stat_collection = new StatCollector();
		public static readonly ByTable ai_names = GlobalFuncs.file2list( "config/names/ai.txt" );
		public static readonly ByTable wizard_first = GlobalFuncs.file2list( "config/names/wizardfirst.txt" );
		public static readonly ByTable wizard_second = GlobalFuncs.file2list( "config/names/wizardsecond.txt" );
		public static readonly ByTable ninja_titles = GlobalFuncs.file2list( "config/names/ninjatitle.txt" );
		public static readonly ByTable ninja_names = GlobalFuncs.file2list( "config/names/ninjaname.txt" );
		public static readonly ByTable commando_names = GlobalFuncs.file2list( "config/names/death_commando.txt" );
		public static readonly ByTable first_names_male = GlobalFuncs.file2list( "config/names/first_male.txt" );
		public static readonly ByTable first_names_female = GlobalFuncs.file2list( "config/names/first_female.txt" );
		public static readonly ByTable last_names = GlobalFuncs.file2list( "config/names/last.txt" );
		public static readonly ByTable clown_names = GlobalFuncs.file2list( "config/names/clown.txt" );
		public static readonly ByTable verbs = GlobalFuncs.file2list( "config/names/verbs.txt" );
		public static readonly ByTable adjectives = GlobalFuncs.file2list( "config/names/adjectives.txt" );
		public static readonly dynamic Space_Tile = Lang13.FindObj( typeof(Tile_Space) );
		public static readonly JsonReader _jsonr = new JsonReader();
		public static readonly JsonWriter _jsonw = new JsonWriter();
		public static readonly ByTable observers = new ByTable();
		public static readonly ByTable common_tools = new ByTable(new object [] { 
			typeof(Obj_Item_Stack_CableCoil), 
			typeof(Obj_Item_Weapon_Wrench), 
			typeof(Obj_Item_Weapon_Weldingtool), 
			typeof(Obj_Item_Weapon_Screwdriver), 
			typeof(Obj_Item_Weapon_Wirecutters), 
			typeof(Obj_Item_Device_Multitool), 
			typeof(Obj_Item_Weapon_Crowbar)
		 });
		public static readonly Image manifold_centre = new Image( "icons/obj/pipes.dmi", "manifold_centre" );
		public static readonly Image manifold4w_centre = new Image( "icons/obj/pipes.dmi", "manifold4w_centre" );
		public static ByTable html_machines = new ByTable();
		public static readonly Image ghostimg = new Image( "icons/mob/mob.dmi", null, "ghost" );
		public static readonly ByTable blood_overlays = new ByTable();
		public static readonly ByTable splatter_cache = new ByTable();
		public static readonly ByTable fluidtrack_cache = new ByTable();
		public static readonly ByTable w_overlays = new ByTable().Set( "wet", new Image( "icons/effects/water.dmi", null, "wet_floor" ) );
		public static readonly DmmSuite maploader = new DmmSuite();
		public static readonly dynamic mining_surprises = Lang13.GetTypes( typeof(MiningSurprise) ) - typeof(MiningSurprise);
		public static readonly Image assigned = new Image( "icons/Testing/Zone.dmi", null, "assigned" );
		public static readonly Image created = new Image( "icons/Testing/Zone.dmi", null, "created" );
		public static readonly Image merged = new Image( "icons/Testing/Zone.dmi", null, "merged" );
		public static readonly Image invalid_zone = new Image( "icons/Testing/Zone.dmi", null, "invalid" );
		public static readonly Image air_blocked = new Image( "icons/Testing/Zone.dmi", null, "block" );
		public static readonly Image zone_blocked = new Image( "icons/Testing/Zone.dmi", null, "zoneblock" );
		public static readonly Image blocked = new Image( "icons/Testing/Zone.dmi", null, "fullblock" );
		public static readonly Image mark = new Image( "icons/Testing/Zone.dmi", null, "mark" );
		public static readonly ZASSettings zas_settings = new ZASSettings();
		public static readonly Image contamination_overlay = new Image( "icons/effects/contamination.dmi" );
	}
}