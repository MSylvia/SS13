// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Client : Base_Client {

		public TimedAlert timed_alert = null;
		public ByTable open_uis = new ByTable();
		public dynamic zone_debug_images = null;
		public Admins holder = null;
		public int buildmode = 0;
		public ByTable buildmode_objs = new ByTable();
		public dynamic last_message = "";
		public int last_message_count = 0;
		public string teleport_here_pref = "Flashy";
		public dynamic flashy_level = 1;
		public dynamic stealthy_level = 20;
		public Preferences prefs = null;
		public dynamic moving = null;
		public bool adminobs = false;
		public dynamic area = null;
		public int time_died_as_mouse = 0;
		public bool ambience_playing = false;
		public bool played = false;
		public int next_allowed_topic_time = 10;
		public string player_age = "Requires database";
		public string related_accounts_ip = "Requires database";
		public string related_accounts_cid = "Requires database";
		public string hi_last_pos = null;
		public MediaManager media = null;
		public bool filling = false;
		public bool haszoomed = false;
		public dynamic account_joined = "";
		public double? account_age = null;
		public ByTable cache = new ByTable();
		public ByTable completed_asset_jobs = new ByTable();
		public ByTable sending = new ByTable();
		public int last_asset_job = 0;
		public DelayController move_delayer = new DelayController( true, 10000 );
		public bool target_can_move = false;
		public bool target_can_run = false;
		public bool target_can_click = false;
		public bool gun_mode = false;

		// Function from file: client procs.dm
		public Client ( dynamic TopicData = null ) {
			
			if ( GlobalVars.config != null ) {
				Interface13.WindowSet( this, null, "outputwindow.output.style=" + GlobalVars.config.world_style_config + ";" );
				Interface13.WindowSet( this, null, "window1.msay_output.style=" + GlobalVars.config.world_style_config + ";" );
			} else {
				GlobalFuncs.to_chat( this, "<span class='warning'>The stylesheet wasn't properly setup call an administrator to reload the stylesheet or relog.</span>" );
			}
			TopicData = null;
			this.holder = GlobalVars.admin_datums[this.ckey];

			if ( this.holder != null ) {
				GlobalVars.admins.Add( this );
				this.holder.owner = this;
			}

			if ( this.connection != "seeker" ) {
				return; // Warning! Attempt to return some other value!
			}

			if ( this.byond_version < 0 ) {
				return; // Warning! Attempt to return some other value!
			}

			if ( GlobalFuncs.IsGuestKey( this.key ) ) {
				Interface13.Alert( this, "This server doesn't allow guest accounts to play. Please go to http://www.byond.com/ and register for a key.", "Guest", "OK" );
				Lang13.Delete( this );
				Task13.Source = null;
				return;
				return;
			}

			if ( GlobalVars.config.resource_urls != null ) {
				this.preload_rsc = Rand13.PickFromTable( GlobalVars.config.resource_urls );
			} else {
				this.preload_rsc = 1;
			}
			GlobalFuncs.to_chat( this, "<span class='warning'>If the title screen is black, resources are still downloading. Please be patient until the title screen appears.</span>" );
			GlobalVars.clients.Add( this );
			GlobalVars.directory[this.ckey] = this;
			this.prefs = GlobalVars.preferences_datums[this.ckey];

			if ( !( this.prefs != null ) ) {
				this.prefs = new Preferences( this );
				GlobalVars.preferences_datums[this.ckey] = this.prefs;
			}
			this.prefs.last_ip = this.address;
			this.prefs.last_id = this.computer_id;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( GlobalVars.custom_event_msg ) && GlobalVars.custom_event_msg != "" ) {
				GlobalFuncs.to_chat( this, "<h1 class='alert'>Custom Event</h1>" );
				GlobalFuncs.to_chat( this, "<h2 class='alert'>A custom event is taking place. OOC Info:</h2>" );
				GlobalFuncs.to_chat( this, "<span class='alert'>" + String13.HtmlEncode( GlobalVars.custom_event_msg ) + "</span>" );
				GlobalFuncs.to_chat( this, "<br>" );
			}

			if ( ( Game13.address == this.address || !Lang13.Bool( this.address ) ) && !Lang13.Bool( GlobalVars.host ) ) {
				GlobalVars.host = this.key;
				Game13.update_status();
			}

			if ( this.holder != null ) {
				this.add_admin_verbs();
				this.admin_memo_show();
			}
			this.log_client_to_db();
			this.send_resources();

			if ( this.prefs.lastchangelog != GlobalVars.changelog_hash ) {
				Interface13.WindowSet( this, "rpane.changelog", "background-color=#eaeaea;font-style=bold" );
				this.prefs.SetChangelog( this.ckey, GlobalVars.changelog_hash );
				GlobalFuncs.to_chat( this, "<span class='info'>Changelog has changed since your last visit.</span>" );
			}
			Interface13.WindowSet( this, "rpane.map", "text=\"" + GlobalVars.map.nameLong + "\"" );

			if ( GlobalVars.on_login is _Event ) {
				GlobalVars.on_login.Invoke( new ByTable().Set( "client", this ).Set( "admin", this.holder != null ) );
			}

			if ( !Interface13.WindowExists( this, "asset_cache_browser" ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>Unable to access asset cache browser, if you are using a custom skin file, please allow DS to download the updated version, if you are not, then make a bug report. This is not a critical issue but can cause issues with resource downloading, as it is impossible to know when extra resources arrived to you.</span>" );
			}
			return;
		}

		// Function from file: buildmode.dm
		public dynamic MouseDrop( dynamic src_object = null, dynamic over_object = null, dynamic src_location = null, dynamic over_location = null, dynamic src_control = null, dynamic over_control = null, dynamic _params = null ) {
			Obj_Effect_Bmode_Buildholder holder = null;
			Obj_Effect_Bmode_Buildholder H = null;
			dynamic start = null;
			dynamic end = null;
			ByTable fillturfs = null;
			int areaAction = 0;
			dynamic whatfill = null;
			string msglog = null;
			bool strict = false;
			dynamic chosen = null;
			dynamic turf_op = null;
			int deletions = 0;
			dynamic T = null;
			Ent_Static thing = null;
			Ent_Static thing2 = null;
			dynamic A = null;
			dynamic A2 = null;
			ByTable fillturfs2 = null;
			int areaAction2 = 0;
			bool? reset = null;
			string msglog2 = null;
			bool strict2 = false;
			dynamic chosen2 = null;
			int edits = 0;
			dynamic T2 = null;
			Ent_Static thing3 = null;

			
			if ( !( this.buildmode != 0 ) ) {
				return Lang13.SuperCall( src_object, over_object, src_location, over_location, src_control, over_control, _params );
			}
			holder = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.buildmodeholders, typeof(Obj_Effect_Bmode_Buildholder) )) {
				H = _a;
				

				if ( H.cl == this ) {
					holder = H;
					break;
				}
			}

			if ( !( holder != null ) ) {
				return null;
			}
			start = GlobalFuncs.get_turf( src_location );
			end = GlobalFuncs.get_turf( over_location );

			if ( !Lang13.Bool( start ) || !Lang13.Bool( end ) ) {
				return null;
			}

			dynamic _i = this.buildmode; // Was a switch-case, sorry for the mess.
			if ( 1<=_i&&_i<=2 ) {
				fillturfs = Map13.FetchInBlock( start, end );

				if ( fillturfs.len != 0 ) {
					
					if ( Interface13.Alert( "You're about to do a fill operation spanning " + fillturfs.len + " tiles, are you sure?", "Panic", "Yes", "No" ) == "Yes" ) {
						
						if ( fillturfs.len > 150 ) {
							
							if ( Interface13.Alert( "Are you completely sure about filling " + fillturfs.len + " tiles?", "Panic!!!!", "Yes", "No" ) != "Yes" ) {
								return null;
							}
						}
						areaAction = Interface13.Alert( "FILL tiles or DELETE them? areaAction will destroy EVERYTHING IN THE SELECTED AREA", "Create or destroy, your chance to be a GOD", "FILL", "DELETE" ) == "DELETE" ?1:0;

						if ( areaAction != 0 ) {
							areaAction = ( Interface13.Alert( "Selective(TYPE) Delete or MASS Delete?", "Scorched Earth or selective destruction?", "Selective", "MASS" ) == "Selective" ? 2 : 1 );
						} else {
							areaAction = ( Interface13.Alert( "Mass FILL or Selective(Type => Type) FILL?", "Do they really need " + fillturfs.len + " of closets?", "Selective", "Mass" ) == "Selective" ? 3 : 0 );
						}
						whatfill = ( this.buildmode == 1 ? Interface13.Input( "What are we filling with?", "So many choices", null, null, new ByTable(new object [] { typeof(Tile_Simulated_Floor), typeof(Tile_Simulated_Wall), typeof(Tile_Simulated_Wall_RWall), typeof(Obj_Machinery_Door_Airlock), typeof(Obj_Structure_Window_Reinforced) }), InputType.Null | InputType.Any ) : ((dynamic)( holder.buildmode.objholder )) );

						if ( !Lang13.Bool( whatfill ) ) {
							return null;
						}
						msglog = "<span class='danger'>" + GlobalFuncs.key_name_admin( Task13.User ) + " just buildmode";
						strict = true;
						chosen = null;

						switch ((int)( areaAction )) {
							case 1:
								msglog += new Txt( " <big>DELETED EVERYTHING</big> in " ).item( fillturfs.len ).str( " tile" ).s().str( " " ).ToString();
								break;
							case 2:
								chosen = GlobalFuncs.easyTypeSelector();

								if ( !Lang13.Bool( chosen ) ) {
									return null;
								}
								strict = Interface13.Alert( "Delete all children of " + chosen + "?", "Children being all types and subtypes of " + chosen, "Yes", "No" ) == "No";
								msglog += new Txt( " <big>DELETED " ).item( ( !strict ? "ALL TYPES OF " : "" ) ).item( chosen ).str( "</big> in " ).item( fillturfs.len ).str( " tile" ).s().str( " " ).ToString();
								break;
							case 3:
								chosen = GlobalFuncs.easyTypeSelector();

								if ( !Lang13.Bool( chosen ) ) {
									return null;
								}
								strict = Interface13.Alert( "Change all children of " + chosen + "?", "Children being all types and subtypes of " + chosen, "Yes", "No" ) == "No";
								msglog += new Txt( " Changed all " ).item( chosen ).str( " in " ).item( fillturfs.len ).str( " tile" ).s().str( " to " ).item( whatfill ).str( " " ).ToString();
								break;
							default:
								msglog += new Txt( " FILLED " ).item( fillturfs.len ).str( " tile" ).s().str( " with " ).item( whatfill ).str( " " ).ToString();
								break;
						}
						msglog += "at (" + GlobalFuncs.formatJumpTo( start ) + " to " + GlobalFuncs.formatJumpTo( end ) + ")</span>";
						GlobalFuncs.message_admins( msglog );
						GlobalFuncs.log_admin( msglog );
						GlobalFuncs.to_chat( Task13.User, "<span class='notice'>If the server is lagging the operation will periodically sleep so the fill may take longer than typical.</span>" );
						turf_op = whatfill.IsSubclassOf( typeof(Tile) );
						deletions = 0;

						foreach (dynamic _e in Lang13.Enumerate( fillturfs )) {
							T = _e;
							

							if ( areaAction == 1 || areaAction == 2 ) {
								
								if ( Lang13.Bool( chosen.IsSubclassOf( typeof(Tile) ) ) ) {
									((Tile)T).ChangeTurf( chosen );
									deletions++;
								} else {
									
									foreach (dynamic _c in Lang13.Enumerate( T.contents, typeof(Ent_Static) )) {
										thing = _c;
										

										if ( thing == Task13.User ) {
											continue;
										}

										if ( areaAction == 1 || strict && thing.type == chosen || Lang13.Bool( chosen.IsInstanceOfType( thing ) ) ) {
											GlobalFuncs.qdel( thing );
										}
										deletions++;

										if ( Game13.cpu > 80 ) {
											Task13.Sleep( ((int)( Game13.tick_lag )) );
										}
									}

									if ( areaAction == 1 ) {
										((Tile)T).ChangeTurf( GlobalFuncs.get_base_turf( T.z ) );
									}
								}
							} else if ( Lang13.Bool( turf_op ) ) {
								
								if ( areaAction == 3 ) {
									
									if ( strict ) {
										
										if ( T.type != chosen ) {
											continue;
										}
									} else if ( !Lang13.Bool( chosen.IsInstanceOfType( T ) ) ) {
										continue;
									}
								}
								((Tile)T).ChangeTurf( whatfill );
							} else if ( areaAction == 3 ) {
								
								foreach (dynamic _d in Lang13.Enumerate( T.contents, typeof(Ent_Static) )) {
									thing2 = _d;
									

									if ( strict ) {
										
										if ( thing2.type != chosen ) {
											continue;
										}
									} else if ( !Lang13.Bool( chosen.IsInstanceOfType( thing2 ) ) ) {
										continue;
									}
									A = Lang13.Call( whatfill, T );
									A.dir = thing2.dir;
									GlobalFuncs.qdel( thing2 );

									if ( Game13.cpu > 80 ) {
										Task13.Sleep( ((int)( Game13.tick_lag )) );
									}
								}
							} else {
								A2 = Lang13.Call( whatfill, T );

								if ( A2 is Obj ) {
									A2.dir = holder.builddir.dir;
								}
							}

							if ( Game13.cpu > 80 ) {
								Task13.Sleep( ((int)( Game13.tick_lag )) );
							}
						}

						if ( deletions != 0 ) {
							GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>Successfully deleted " ).item( deletions ).str( " " ).item( chosen ).str( "'" ).s().str( "</span>" ).ToString() );
						}
					}
				}
			} else if ( _i==3 ) {
				fillturfs2 = Map13.FetchInBlock( start, end );

				if ( fillturfs2.len != 0 ) {
					
					if ( Interface13.Alert( "You're about to do a mass edit operation spanning " + fillturfs2.len + " tiles, are you sure?", "Panic", "Yes", "No" ) == "Yes" ) {
						
						if ( fillturfs2.len > 150 ) {
							
							if ( Interface13.Alert( "Are you completely sure about mass editng " + fillturfs2.len + " tiles?", "Panic!!!!", "Yes", "No" ) != "Yes" ) {
								return null;
							}
						}
						areaAction2 = ( Interface13.Alert( "Selective(TYPE) Edit or MASS Edit?", "Editing things one by one sure is annoying", "Selective", "MASS" ) == "Selective" ? 2 : 1 );
						reset = ( Interface13.Alert( "Reset target variable to initial value?", "Aw shit cletus i dun fucked up", "Yes", "No" ) == "Yes" ? true : false );
						msglog2 = "<span class='danger'>" + GlobalFuncs.key_name_admin( Task13.User ) + " just buildmode";
						strict2 = true;
						chosen2 = null;

						switch ((int)( areaAction2 )) {
							case 1:
								msglog2 += new Txt( " <big>EDITED EVERYTHING</big> in " ).item( fillturfs2.len ).str( " tile" ).s().str( " " ).ToString();
								break;
							case 2:
								chosen2 = GlobalFuncs.easyTypeSelector();

								if ( !Lang13.Bool( chosen2 ) ) {
									return null;
								}
								strict2 = Interface13.Alert( "Edit all children of " + chosen2 + "?", "Children being all types and subtypes of " + chosen2, "Yes", "No" ) == "No";
								msglog2 += new Txt( " <big>EDITED " ).item( ( !strict2 ? "ALL TYPES OF " : "" ) ).item( chosen2 ).str( "</big> in " ).item( fillturfs2.len ).str( " tile" ).s().str( " " ).ToString();
								break;
							default:
								return null;
								break;
						}
						msglog2 += "at (" + GlobalFuncs.formatJumpTo( start ) + " to " + GlobalFuncs.formatJumpTo( end ) + ")</span>";
						GlobalFuncs.message_admins( msglog2 );
						GlobalFuncs.log_admin( msglog2 );
						GlobalFuncs.to_chat( Task13.User, "<span class='notice'>If the server is lagging the operation will periodically sleep so the mass edit may take longer than typical.</span>" );
						edits = 0;

						foreach (dynamic _h in Lang13.Enumerate( fillturfs2 )) {
							T2 = _h;
							

							if ( Lang13.Bool( chosen2.IsSubclassOf( typeof(Tile) ) ) ) {
								GlobalFuncs.setvar( holder.buildmode.varholder, holder.buildmode.valueholder, T2, reset );
							} else {
								
								foreach (dynamic _g in Lang13.Enumerate( T2.contents, typeof(Ent_Static) )) {
									thing3 = _g;
									

									if ( thing3 == Task13.User ) {
										continue;
									}

									if ( areaAction2 == 1 || strict2 && thing3.type == chosen2 || Lang13.Bool( chosen2.IsInstanceOfType( thing3 ) ) ) {
										GlobalFuncs.setvar( holder.buildmode.varholder, holder.buildmode.valueholder, thing3, reset );
										edits++;
									}

									if ( Game13.cpu > 80 ) {
										Task13.Sleep( ((int)( Game13.tick_lag )) );
									}
								}
							}
							edits++;

							if ( Game13.cpu > 80 ) {
								Task13.Sleep( ((int)( Game13.tick_lag )) );
							}
						}

						if ( edits != 0 ) {
							GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>Successfully edited " ).item( edits ).str( " " ).item( chosen2 ).str( "'" ).s().str( "</span>" ).ToString() );
						}
					}
				}
			} else {
				return null;
			}
			return null;
		}

		// Function from file: buildmode.dm
		public void MouseWheel( dynamic _object = null, dynamic delta_x = null, bool delta_y = false, dynamic location = null, dynamic control = null, dynamic _params = null ) {
			
			if ( this.mob is Mob_Dead_Observer || this.buildmode != 0 ) {
				
				if ( ( delta_y ?1:0) > 0 ) {
					this.view--;
				} else {
					this.view++;
				}
				this.view = Num13.MaxInt( this.view, 1 );
				this.haszoomed = true;
			}
			Lang13.SuperCall( _object, delta_x, delta_y, location, control, _params );
			return;
		}

		// Function from file: mob_movement.dm
		public override bool Move( dynamic loc = null, int dir = 0 ) {
			bool _default = false;

			Obj_Effect_Stop S = null;
			bool can_move_without_gravity = false;
			Ent_Static AM = null;
			Ent_Static O = null;
			dynamic M = null;
			Chain chain_datum = null;
			double move_delay = 0;
			dynamic Findgrab = null;
			ByTable L = null;
			Ent_Dynamic M2 = null;
			Ent_Static T = null;
			int? diag = null;
			dynamic M3 = null;
			dynamic M4 = null;

			
			if ( !( this.mob != null ) ) {
				return _default;
			}

			if ( this.mob.timestopped ) {
				return false;
			}

			if ( this.move_delayer.next_allowed > Game13.time ) {
				return false;
			}

			if ( this.mob.deny_client_move ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot move this mob.</span>" );
				return _default;
			}

			if ( this.mob.control_object != null ) {
				this.Move_object( dir );
			}

			if ( this.mob.orient_object != null ) {
				this.Dir_object( dir );
				return _default;
			}

			if ( this.mob.incorporeal_move != 0 ) {
				this.Process_Incorpmove( dir );
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.mob.loc, typeof(Obj_Effect_Stop) )) {
				S = _a;
				

				if ( S.victim == this.mob ) {
					return _default;
				}
			}

			if ( this.mob.stat == 2 ) {
				return _default;
			}

			if ( this.mob is Mob_Living_Silicon_Ai ) {
				this.AIMove( loc, dir, this.mob ); return false;
			}

			if ( this.mob.monkeyizing ) {
				return _default;
			}

			if ( this.Process_Grab() ) {
				return _default;
			}

			if ( Lang13.Bool( this.mob.locked_to ) ) {
				return Lang13.Bool( ((Ent_Static)this.mob.locked_to).relaymove( this.mob, dir ) );
			}

			if ( !this.mob.canmove ) {
				return _default;
			}

			if ( this.mob.loc is Tile_Space || Lang13.Bool( this.mob.areaMaster ) && this.mob.areaMaster.has_gravity == false ) {
				can_move_without_gravity = false;

				if ( this.mob.loc is Ent_Dynamic ) {
					AM = this.mob.loc;

					if ( Lang13.Bool( ((dynamic)AM).internal_gravity ) ) {
						can_move_without_gravity = true;
					}
				}

				if ( !can_move_without_gravity && !( this.mob.Process_Spacemove( false ) != 0 ) ) {
					return false;
				}
			}

			if ( this.mob.loc is Obj || this.mob.loc is Mob ) {
				O = this.mob.loc;
				return Lang13.Bool( O.relaymove( this.mob, dir ) );
			}

			if ( this.mob.loc is Tile ) {
				
				if ( this.mob.restrained() ) {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( 1, this.mob ) )) {
						M = _b;
						

						if ( M.pulling == this.mob ) {
							
							if ( !((Mob)M).restrained() && Lang13.Bool( M.stat ) == false && M.canmove && this.mob.Adjacent( M ) ) {
								GlobalFuncs.to_chat( this, "<span class='notice'>You're restrained! You can't move!</span>" );
								return false;
							} else {
								((Mob)M).stop_pulling();
							}
						}
					}

					if ( this.mob.tether != null ) {
						chain_datum = ((dynamic)this.mob.tether).chain_datum;

						if ( chain_datum.extremity_A == this.mob ) {
							
							if ( chain_datum.extremity_B is Mob_Living ) {
								GlobalFuncs.to_chat( this, "<span class='notice'>You're restrained! You can't move!</span>" );
								return false;
							}
						} else if ( chain_datum.extremity_B == this.mob ) {
							
							if ( chain_datum.extremity_A is Mob_Living ) {
								GlobalFuncs.to_chat( this, "<span class='notice'>You're restrained! You can't move!</span>" );
								return false;
							}
						}
					}
				}

				if ( this.mob.pinned.len != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='notice'>You're pinned to a wall by " + this.mob.pinned[1] + "!</span>" );
					return false;
				}
				move_delay = 0;
				this.mob.last_move_intent = Game13.time + 10;

				switch ((string)( this.mob.m_intent )) {
					case "run":
						
						if ( Convert.ToDouble( this.mob.drowsyness ) > 0 ) {
							move_delay += 6;
						}
						move_delay += Convert.ToDouble( GlobalVars.config.run_speed + 1 );
						break;
					case "walk":
						move_delay += Convert.ToDouble( GlobalVars.config.walk_speed + 7 );
						break;
				}
				move_delay += Convert.ToDouble( this.mob.movement_delay() );
				Findgrab = Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), this.mob );

				if ( Lang13.Bool( Findgrab ) ) {
					move_delay += 7;
				}
				move_delay = Num13.MaxInt( ((int)( move_delay )), 1 );
				this.mob.delayNextMove( move_delay );

				if ( Lang13.Bool( Findgrab ) ) {
					L = this.mob.ret_grab();

					if ( L is ByTable ) {
						
						if ( L.len == 2 ) {
							L.Remove( this.mob );
							M2 = L[1];

							if ( M2 != null ) {
								
								if ( this.mob.Adjacent( M2 ) || M2.loc == this.mob.loc ) {
									T = this.mob.loc;
									_default = base.Move( (object)(loc), dir );

									if ( M2.loc is Tile ) {
										diag = Map13.GetDistance( this.mob, M2 );

										if ( ( ( diag ??0) - 1 & ( diag ??0) ) != 0 ) {
											
										} else {
											diag = null;
										}

										if ( Map13.GetDistance( this.mob, M2 ) > 1 || Lang13.Bool( diag ) ) {
											Map13.Step( M2, Map13.GetDistance( M2.loc, T ) );
										}
									}
								}
							}
						} else {
							
							foreach (dynamic _d in Lang13.Enumerate( L )) {
								M3 = _d;
								
								M3.other_mobs = true;

								if ( this.mob != M3 ) {
									M3.animate_movement = 3;
								}
							}

							foreach (dynamic _e in Lang13.Enumerate( L )) {
								M4 = _e;
								
								Task13.Schedule( 0, (Task13.Closure)(() => {
									Map13.Step( M4, dir );
									return;
									return;
								}));
								Task13.Schedule( 1, (Task13.Closure)(() => {
									M4.other_mobs = null;
									M4.animate_movement = 2;
									return;
									return;
								}));
							}
						}
					}
				} else if ( this.mob.confused != 0 ) {
					Map13.StepRandom( this.mob );
					this.mob.last_movement = Game13.time;
				} else {
					_default = base.Move( (object)(loc), dir );
					this.mob.last_movement = Game13.time;
				}
			}
			return _default;
		}

		// Function from file: mob_movement.dm
		public void Center(  ) {
			return;
		}

		// Function from file: mob_movement.dm
		public void Northwest(  ) {
			Mob C = null;
			Mob M = null;
			Mob R = null;

			
			if ( Task13.User is Mob_Living_Carbon ) {
				C = Task13.User;

				if ( !Lang13.Bool( C.get_active_hand() ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You have nothing to drop in your hand.</span>" );
					return;
				}
				this.__CallVerb("drop item" );
			} else if ( Task13.User is Mob_Living_Silicon_Robot_Mommi ) {
				M = Task13.User;

				if ( !Lang13.Bool( M.get_active_hand() ) ) {
					GlobalFuncs.to_chat( M, "<span class='warning'>You have nothing to drop or store.</span>" );
					return;
				}
				((Mob_Living_Silicon_Robot)M).uneq_active();
			} else if ( Task13.User is Mob_Living_Silicon_Robot ) {
				R = Task13.User;

				if ( !Lang13.Bool( ((dynamic)R).module_active ) ) {
					return;
				}
				((Mob_Living_Silicon_Robot)R).uneq_active();
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>This mob type cannot drop items.</span>" );
			}
			return;
		}

		// Function from file: mob_movement.dm
		public void Southwest(  ) {
			Mob C = null;

			
			if ( Task13.User is Mob_Living_Carbon ) {
				C = Task13.User;
				((Mob_Living_Carbon)C).toggle_throw_mode();
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>This mob type cannot throw items.</span>" );
			}
			return;
		}

		// Function from file: mob_movement.dm
		public void Southeast(  ) {
			this.attack_self();
			return;
		}

		// Function from file: mob_movement.dm
		public void Northeast(  ) {
			this.swap_hand();
			return;
		}

		// Function from file: mob_movement.dm
		public void East(  ) {
			Lang13.SuperCall();
			return;
		}

		// Function from file: mob_movement.dm
		public void West(  ) {
			Lang13.SuperCall();
			return;
		}

		// Function from file: mob_movement.dm
		public void South(  ) {
			Lang13.SuperCall();
			return;
		}

		// Function from file: mob_movement.dm
		public void North(  ) {
			Lang13.SuperCall();
			return;
		}

		// Function from file: client procs.dm
		public override void Del(  ) {
			
			if ( this.holder != null ) {
				this.holder.owner = null;
				GlobalVars.admins.Remove( this );
			}
			GlobalVars.directory.Remove( this.ckey );
			GlobalVars.clients.Remove( this );
			base.Del(); return;
		}

		// Function from file: client procs.dm
		public bool AllowUpload( dynamic filename = null, int filelength = 0 ) {
			
			if ( filelength > 10485760 ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: AllowUpload(): File Upload too large. Upload Limit: " + 10240 + "KiB.</font>" );
				return false;
			}
			return true;
		}

		// Function from file: client procs.dm
		public override void Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic C = null;
			dynamic M = null;
			dynamic url = null;
			double? job = null;
			dynamic I = null;

			
			if ( !( Task13.User != null ) || Task13.User != this.mob ) {
				return;
			}

			if ( String13.FindIgnoreCase( href, "<script", 1, 0 ) != 0 ) {
				Game13.log.WriteMsg( "Attempted use of scripts within a topic call, by " + this );
				GlobalFuncs.message_admins( "Attempted use of scripts within a topic call, by " + this );
				return;
			}

			if ( Lang13.Bool( href_list["priv_msg"] ) ) {
				C = Lang13.FindObj( href_list["priv_msg"] );

				if ( C is Mob ) {
					M = C;
					C = M.client;
				}
				this.cmd_admin_pm( C, null );
				return;
			}

			if ( Lang13.Bool( href_list["getwiki"] ) ) {
				url = href_list["getwiki"];
				Interface13.Link( Task13.User, GlobalFuncs.getVGWiki( url ) );
				return;
			}

			if ( Lang13.Bool( href_list["asset_cache_confirm_arrival"] ) ) {
				job = String13.ParseNumber( href_list["asset_cache_confirm_arrival"] );
				this.completed_asset_jobs.Add( job );
				return;
			}

			if ( GlobalVars.config != null && GlobalVars.config.log_hrefs && Lang13.Bool( GlobalVars.investigations["hrefs"] ) ) {
				I = GlobalVars.investigations["hrefs"];
				I.write( "<small>" + String13.FormatTime( Game13.timeofday, "hh:mm" ) + " " + this + " (usr:" + Task13.User + ")</small> || " + ( Lang13.Bool( hsrc ) ? "" + hsrc + " " : "" ) + href + "<br />" );
			}

			dynamic _a = href_list["_src_"]; // Was a switch-case, sorry for the mess.
			if ( _a=="holder" ) {
				hsrc = this.holder;
			} else if ( _a=="usr" ) {
				hsrc = this.mob;
			} else if ( _a=="prefs" ) {
				this.prefs.process_link( Task13.User, href_list ); return;
			} else if ( _a=="vars" ) {
				this.view_var_Topic( href, href_list, hsrc ); return;
			}
			base.Topic( href, href_list, (object)(hsrc) );
			return;
		}

		// Function from file: _map.dm
		[VerbInfo( name: "Set Base Turf", desc: "Set the base turf for a z-level. Defaults to space, does not replace existing tiles.", group: "Debug" )]
		public void set_base_turf(  ) {
			dynamic choice = null;
			dynamic new_base_path = null;
			dynamic update_old_base = null;

			
			if ( GlobalFuncs.check_rights( 32, false ) ) {
				
				if ( !( this.holder != null ) ) {
					return;
				}
				choice = Interface13.Input( "Which Z-level do you wish to set the base turf for?", null, null, null, null, InputType.Num | InputType.Null );

				if ( !Lang13.Bool( choice ) ) {
					return;
				}
				new_base_path = Interface13.Input( "Please select a turf path (cancel to reset to /turf/space).", null, null, null, Lang13.GetTypes( typeof(Tile) ), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( new_base_path ) ) {
					new_base_path = typeof(Tile_Space);
				}
				update_old_base = Interface13.Alert( this, "Do you wish to update the old base? This will LAG.", "Update old turfs?", "Yes", "No" );
				update_old_base = ( update_old_base == "No" ? false : true );

				if ( Lang13.Bool( update_old_base ) ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " is replacing the old base turf on Z level " + choice + " with " + GlobalFuncs.get_base_turf( choice ) + ". This is likely to lag." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has replaced the old base turf on Z level " + choice + " with " + GlobalFuncs.get_base_turf( choice ) + "." );
				}
				GlobalFuncs.change_base_turf( choice, new_base_path, update_old_base );
				GlobalFuncs.feedback_add_details( "admin_verb", "BTC" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set the base turf for Z-level " + choice + " to " + GlobalFuncs.get_base_turf( choice ) + ". This will affect all destroyed turfs from now on." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has set the base turf for Z-level " + choice + " to " + GlobalFuncs.get_base_turf( choice ) + ". This will affect all destroyed turfs from now on." );
			}
			return;
		}

		// Function from file: Diagnostic.dm
		[VerbInfo( group: "Debug" )]
		[VerbArg( 1, InputType.Tile )]
		public void Test_ZAS_Connection( Ent_Static T = null ) {
			ByTable direction_list = null;
			dynamic direction = null;
			Tile other_turf = null;
			int t_block = 0;
			int o_block = 0;

			
			if ( !( T is Tile_Simulated ) ) {
				return;
			}
			direction_list = new ByTable().Set( "North", GlobalVars.NORTH ).Set( "South", GlobalVars.SOUTH ).Set( "East", GlobalVars.EAST ).Set( "West", GlobalVars.WEST ).Set( "N/A", null );
			direction = Interface13.Input( "What direction do you wish to test?", "Set direction", null, null, direction_list, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( direction ) ) {
				return;
			}

			if ( direction == "N/A" ) {
				
				if ( !( ( T.c_airblock( T ) & 1 ) != 0 ) ) {
					GlobalFuncs.to_chat( this.mob, "The turf can pass air! :D" );
				} else {
					GlobalFuncs.to_chat( this.mob, "No air passage :x" );
				}
				return;
			}
			other_turf = Map13.GetStep( T, Convert.ToInt32( direction_list[direction] ) );

			if ( !( other_turf is Tile_Simulated ) ) {
				return;
			}
			t_block = T.c_airblock( other_turf );
			o_block = other_turf.c_airblock( T );

			if ( ( o_block & 1 ) != 0 ) {
				
				if ( ( t_block & 1 ) != 0 ) {
					GlobalFuncs.to_chat( this.mob, "Neither turf can connect. :(" );
				} else {
					GlobalFuncs.to_chat( this.mob, "The initial turf only can connect. :\\" );
				}
			} else if ( ( t_block & 1 ) != 0 ) {
				GlobalFuncs.to_chat( this.mob, "The other turf can connect, but not the initial turf. :/" );
			} else {
				GlobalFuncs.to_chat( this.mob, "Both turfs can connect! :)" );
			}
			GlobalFuncs.to_chat( this.mob, "Additionally, ÿ" );

			if ( ( o_block & 2 ) != 0 ) {
				
				if ( ( t_block & 2 ) != 0 ) {
					GlobalFuncs.to_chat( this.mob, "neither turf can merge." );
				} else {
					GlobalFuncs.to_chat( this.mob, "the other turf cannot merge." );
				}
			} else if ( ( t_block & 2 ) != 0 ) {
				GlobalFuncs.to_chat( this.mob, "the initial turf cannot merge." );
			} else {
				GlobalFuncs.to_chat( this.mob, "both turfs can merge." );
			}
			return;
		}

		// Function from file: Diagnostic.dm
		[VerbInfo( group: "Debug" )]
		[VerbArg( 1, InputType.Tile | InputType.Null )]
		public void Zone_Info( Ent_Static T = null ) {
			GasMixture mix = null;
			dynamic zone = null;

			
			if ( T != null ) {
				
				if ( T is Tile_Simulated && Lang13.Bool( ((dynamic)T).zone ) ) {
					((_Zone)((dynamic)T).zone).dbg_data( this );
				} else {
					GlobalFuncs.to_chat( this.mob, "No zone here." );
					mix = T.return_air();
					GlobalFuncs.to_chat( this.mob, "" + mix.return_pressure() + " kPa " + mix.temperature + "C" );
					GlobalFuncs.to_chat( this.mob, "O2: " + mix.oxygen + " N2: " + mix.nitrogen + " CO2: " + mix.carbon_dioxide + " TX: " + mix.toxins );
				}
			} else if ( Lang13.Bool( this.zone_debug_images ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.zone_debug_images )) {
					zone = _a;
					
					this.images.Remove( this.zone_debug_images[zone] );
				}
				this.zone_debug_images = null;
			}
			return;
		}

		// Function from file: Diagnostic.dm
		[VerbInfo( name: "Process Atmos", group: "Debug" )]
		public void ZoneTick(  ) {
			bool result = false;

			result = GlobalVars.air_master.Tick();

			if ( result ) {
				GlobalFuncs.to_chat( this, "Sucessfully Processed." );
			} else {
				GlobalFuncs.to_chat( this, "Failed to process! (" + GlobalVars.air_master.tick_progress + ")" );
			}
			return;
		}

		// Function from file: targeting.dm
		public void remove_gun_icons(  ) {
			
			if ( !( Task13.User != null ) ) {
				return;
			}

			if ( Task13.User.gun_move_icon != null ) {
				GlobalFuncs.returnToPool( Task13.User.gun_move_icon );
				this.screen.Remove( Task13.User.gun_move_icon );
				Task13.User.gun_move_icon = null;
			}

			if ( Task13.User.item_use_icon != null ) {
				GlobalFuncs.returnToPool( Task13.User.item_use_icon );
				this.screen.Remove( Task13.User.item_use_icon );
				Task13.User.item_use_icon = null;
			}

			if ( Task13.User.gun_run_icon != null ) {
				GlobalFuncs.returnToPool( Task13.User.gun_run_icon );
				this.screen.Remove( Task13.User.gun_run_icon );
				Task13.User.gun_run_icon = null;
			}
			return;
		}

		// Function from file: targeting.dm
		public void add_gun_icons(  ) {
			
			if ( !( Task13.User.item_use_icon != null ) ) {
				Task13.User.item_use_icon = GlobalFuncs.getFromPool( typeof(Obj_Screen_Gun_Item) );
				((dynamic)Task13.User.item_use_icon).icon_state = "no_item" + this.target_can_click;
				((dynamic)Task13.User.item_use_icon).name = "" + ( this.target_can_click ? "Disallow" : "Allow" ) + " Item Use";
			}

			if ( !( Task13.User.gun_move_icon != null ) ) {
				Task13.User.gun_move_icon = GlobalFuncs.getFromPool( typeof(Obj_Screen_Gun_Move) );
				((dynamic)Task13.User.gun_move_icon).icon_state = "no_walk" + this.target_can_move;
				((dynamic)Task13.User.gun_move_icon).name = "" + ( this.target_can_move ? "Disallow" : "Allow" ) + " Walking";
			}

			if ( this.target_can_move && !( Task13.User.gun_run_icon != null ) ) {
				Task13.User.gun_run_icon = GlobalFuncs.getFromPool( typeof(Obj_Screen_Gun_Run) );
				((dynamic)Task13.User.gun_run_icon).icon_state = "no_run" + this.target_can_run;
				((dynamic)Task13.User.gun_run_icon).name = "" + ( this.target_can_run ? "Disallow" : "Allow" ) + " Running";
			}
			this.screen.Add( Task13.User.item_use_icon );
			this.screen.Add( Task13.User.gun_move_icon );

			if ( this.target_can_move ) {
				this.screen.Add( Task13.User.gun_run_icon );
			}
			return;
		}

		// Function from file: mapGenerator.dm
		[VerbInfo( name: "Test Nature Map Generator", group: "Debug" )]
		public void debugNatureMapGenerator(  ) {
			MapGenerator_Nature N = null;
			dynamic startInput = null;
			dynamic endInput = null;
			ByTable startCoords = null;
			ByTable endCoords = null;
			Tile Start = null;
			Tile End = null;
			ByTable clusters = null;
			dynamic moduleClusters = null;
			bool theCluster = false;
			MapGeneratorModule M = null;

			N = new MapGenerator_Nature();
			startInput = Interface13.Input( Task13.User, "Start turf of Map, (X;Y;Z)", "Map Gen Settings", "1;1;1", null, InputType.Str );
			endInput = Interface13.Input( Task13.User, "End turf of Map (X;Y;Z)", "Map Gen Settings", "" + Game13.map_size_x + ";" + Game13.map_size_y + ";" + ( this.mob != null ? this.mob.z : 1 ), null, InputType.Str );

			if ( !Lang13.Bool( startInput ) || !Lang13.Bool( endInput ) ) {
				GlobalFuncs.to_chat( this, "Missing Input" );
				return;
			}
			startCoords = GlobalFuncs.text2list( startInput, ";" );
			endCoords = GlobalFuncs.text2list( endInput, ";" );

			if ( !( startCoords != null ) || !( endCoords != null ) ) {
				GlobalFuncs.to_chat( this, "Invalid Coords" );
				GlobalFuncs.to_chat( this, "Start Input: " + startInput );
				GlobalFuncs.to_chat( this, "End Input: " + endInput );
				return;
			}
			Start = Map13.GetTile( ((int)( String13.ParseNumber( startCoords[1] ) ??0 )), ((int)( String13.ParseNumber( startCoords[2] ) ??0 )), ((int)( String13.ParseNumber( startCoords[3] ) ??0 )) );
			End = Map13.GetTile( ((int)( String13.ParseNumber( endCoords[1] ) ??0 )), ((int)( String13.ParseNumber( endCoords[2] ) ??0 )), ((int)( String13.ParseNumber( endCoords[3] ) ??0 )) );

			if ( !( Start != null ) || !( End != null ) ) {
				GlobalFuncs.to_chat( this, "Invalid Turfs" );
				GlobalFuncs.to_chat( this, "Start Coords: " + startCoords[1] + " - " + startCoords[2] + " - " + startCoords[3] );
				GlobalFuncs.to_chat( this, "End Coords: " + endCoords[1] + " - " + endCoords[2] + " - " + endCoords[3] );
				return;
			}
			clusters = new ByTable()
				.Set( "None", 0 )
				.Set( "All", 30 )
				.Set( "Sames", 24 )
				.Set( "Differents", 6 )
				.Set( "Same turfs", 8 )
				.Set( "Same atoms", 16 )
				.Set( "Different turfs", 2 )
				.Set( "Different atoms", 4 )
				.Set( "All turfs", 10 )
				.Set( "All atoms", 20 )
			;
			moduleClusters = Interface13.Input( "Cluster Flags (Cancel to leave unchanged from defaults)", "Map Gen Settings", null, null, clusters, InputType.Null | InputType.Any );
			theCluster = false;

			if ( moduleClusters != "None" ) {
				
				if ( !Lang13.Bool( clusters[moduleClusters] ) ) {
					GlobalFuncs.to_chat( this, "Invalid Cluster Flags" );
					return;
				}
				theCluster = Lang13.Bool( clusters[moduleClusters] );
			} else {
				theCluster = false;
			}

			if ( theCluster ) {
				
				foreach (dynamic _a in Lang13.Enumerate( N.modules, typeof(MapGeneratorModule) )) {
					M = _a;
					
					M.clusterCheckFlags = theCluster ?1:0;
				}
			}
			GlobalFuncs.to_chat( this, "Defining Region" );
			N.defineRegion( Start, End );
			GlobalFuncs.to_chat( this, "Region Defined" );
			GlobalFuncs.to_chat( this, "Generating Region" );
			N.generate();
			GlobalFuncs.to_chat( this, "Generated Region" );
			return;
		}

		// Function from file: pen.dm
		[VerbInfo( name: "Modify Paperwork Mode", group: "Debug" )]
		public void handle_paperwork(  ) {
			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}

			if ( !GlobalVars.paperwork ) {
				GlobalFuncs.paperwork_setup();
			} else {
				GlobalFuncs.paperwork_stop();
				GlobalVars.paperwork = false;
			}
			return;
		}

		// Function from file: nanomapgen.dm
		public int nanomapgen_DumpTile( int? startX = null, int? startY = null, int? currentZ = null, int? endX = null, int? endY = null, bool? allz = null ) {
			startX = startX ?? 1;
			startY = startY ?? 1;
			currentZ = currentZ ?? 1;
			endX = endX ?? -1;
			endY = endY ?? -1;
			allz = allz ?? false;

			int? newz = null;
			Icon Tile = null;
			int count = 0;
			int? WorldX = null;
			int? WorldY = null;
			Tile Turf = null;
			Icon TurfIcon = null;
			dynamic F = null;
			int? newz2 = null;

			
			if ( currentZ == 2 ) {
				
				if ( allz == true ) {
					
					if ( ( currentZ ??0) < Game13.map_size_z ) {
						newz = ( currentZ ??0) + 1;
						this.nanomapgen_DumpTile( 1, 1, newz, -1, -1, true );
					}
				} else {
					return 0;
				}
			}

			if ( ( endX ??0) < 0 || ( endX ??0) > Game13.map_size_x ) {
				endX = Game13.map_size_x;
			}

			if ( ( endY ??0) < 0 || ( endY ??0) > Game13.map_size_y ) {
				endY = Game13.map_size_y;
			}

			if ( ( startX ??0) > ( endX ??0) ) {
				Game13.log.WriteMsg( "NanoMapGen: <B>ERROR: startX (" + startX + ") cannot be greater than endX (" + endX + ")</B>" );
				Task13.Sleep( 3 );
				return 5;
			}

			if ( ( startY ??0) > ( endX ??0) ) {
				Game13.log.WriteMsg( "NanoMapGen: <B>ERROR: startY (" + startY + ") cannot be greater than endY (" + endY + ")</B>" );
				Task13.Sleep( 3 );
				return 5;
			}
			Tile = new Icon( new File( "nano/mapbase1024.png" ) );

			if ( Tile.Width() != 1024 || Tile.Height() != 1024 ) {
				Game13.log.WriteMsg( "NanoMapGen: <B>ERROR: BASE IMAGE DIMENSIONS ARE NOT " + 1024 + "x" + 1024 + "</B>" );
				Task13.Sleep( 3 );
				return 5;
			}
			GlobalFuncs.to_chat( typeof(Game13), "NanoMapGen: <B>GENERATE MAP (" + startX + "," + startY + "," + currentZ + ") to (" + endX + "," + endY + "," + currentZ + ")</B>" );
			count = 0;
			WorldX = null;
			WorldX = startX;

			while (( WorldX ??0) <= ( endX ??0)) {
				WorldY = null;
				WorldY = startY;

				while (( WorldY ??0) <= ( endY ??0)) {
					Turf = Map13.GetTile( WorldX ??0, WorldY ??0, currentZ ??0 );

					if ( Turf.type == typeof(Tile_Space) ) {
						
					} else {
						TurfIcon = new Icon( Turf.icon, Turf.icon_state, Turf, 1, false );
						TurfIcon.Scale( 4, 4 );
						Tile.Blend( TurfIcon, 3, ( ( WorldX ??0) - 1 ) * 4, ( ( WorldY ??0) - 1 ) * 4 );
						count++;

						if ( count % 1024 == 0 ) {
							Game13.log.WriteMsg( "NanoMapGen: " + count + " tiles done" );
							Task13.Sleep( 5 );
						}
					}
					WorldY++;
				}
				WorldX++;
			}
			Game13.log.WriteMsg( "NanoMapGen: sending nanoMap.png to client" );
			Interface13.Browse( Task13.User, Tile, "window=picture;file=nanoMap" + currentZ + ".png;display=0" );
			F = new File( "nano/images/genned/" + GlobalVars.map.map_dir + "/nanoMap" + currentZ + ".png" );
			File13.Delete( F );
			File13.Copy( Tile, F );
			Game13.log.WriteMsg( "NanoMapGen: z-level " + currentZ + " Done." );

			if ( Tile.Width() != 1024 || Tile.Height() != 1024 ) {
				return 2;
			}

			if ( allz == true ) {
				
				if ( ( currentZ ??0) < Game13.map_size_z ) {
					newz2 = ( currentZ ??0) + 1;
					this.nanomapgen_DumpTile( 1, 1, newz2, -1, -1, true );
				}
			}
			return 1;
		}

		// Function from file: nanomapgen.dm
		[VerbInfo( name: "Generate all NanoUI Maps", group: "Mapping" )]
		public void nanomapgen_DumpImageAll(  ) {
			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( Interface13.Alert( "Sure you want to do this? It will cause a lot of lag", "generate maps", "Yes", "No" ) == "No" ) {
				return;
			}
			GlobalFuncs.message_admins( "" + this.ckey + "/" + this + " started nanoui map generation" );
			GlobalFuncs.log_admin( "" + this.ckey + "/" + this + " started nanoui map generation" );
			this.nanomapgen_DumpTile( null, null, null, null, null, true );
			return;
		}

		// Function from file: nanomapgen.dm
		[VerbInfo( name: "Generate NanoUI Map", group: "Mapping" )]
		public void nanomapgen_DumpImage(  ) {
			dynamic T = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( Interface13.Alert( "Sure you want to do this? It will cause a lot of lag", "generate maps", "Yes", "No" ) == "No" ) {
				return;
			}
			GlobalFuncs.message_admins( "" + this.ckey + "/" + this + " started nanoui map generation" );
			GlobalFuncs.log_admin( "" + this.ckey + "/" + this + " started nanoui map generation" );
			T = GlobalFuncs.get_turf( this );
			this.nanomapgen_DumpTile( 1, 1, Lang13.IntNullable( T.z ) );
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Infest", desc: "Infest a suitable humanoid host.", group: "Alien" )]
		public void borer_infest(  ) {
			Mob B = null;

			B = this.mob;

			if ( !( B is Mob_Living_SimpleAnimal_Borer ) ) {
				return;
			}
			((Mob_Living_SimpleAnimal_Borer)B).infest();
			return;
		}

		// Function from file: eye.dm
		public void AIMove( dynamic n = null, int direct = 0, Mob user = null ) {
			dynamic initial = null;
			int max_sprint = 0;
			int? i = null;
			dynamic step = null;

			initial = Lang13.Initial( user, "sprint" );
			max_sprint = 50;

			if ( Lang13.Bool( ((dynamic)user).cooldown ) && Convert.ToDouble( ((dynamic)user).cooldown ) < Game13.timeofday ) {
				((dynamic)user).sprint = initial;
			}
			i = null;
			i = 0;

			while (( i ??0) < Num13.MaxInt( Convert.ToInt32( ((dynamic)user).sprint ), Convert.ToInt32( initial ) )) {
				step = GlobalFuncs.get_turf( Map13.GetStep( ((dynamic)user).eyeobj, direct ) );

				if ( Lang13.Bool( step ) ) {
					((Ent_Dynamic)((dynamic)user).eyeobj).forceMove( step );
				}
				i += 20;
			}
			((dynamic)user).cooldown = Game13.timeofday + 5;

			if ( Lang13.Bool( ((dynamic)user).acceleration ) ) {
				((dynamic)user).sprint = Num13.MinInt( Convert.ToInt32( ((dynamic)user).sprint + 0.5 ), max_sprint );
			} else {
				((dynamic)user).sprint = initial;
			}
			((dynamic)user).cameraFollow = null;

			if ( Lang13.Bool( ((dynamic)user).camera_light_on ) ) {
				((Mob_Living_Silicon_Ai)user).light_cameras();
			}
			return;
		}

		// Function from file: mob_movement.dm
		public bool Process_Incorpmove( int direct = 0 ) {
			dynamic mobloc = null;
			Mob observer = null;
			Tile T = null;
			dynamic A = null;
			int? locx = null;
			int? locy = null;
			int limit = 0;
			dynamic T2 = null;
			Tile newLoc = null;
			Obj S = null;

			mobloc = GlobalFuncs.get_turf( this.mob );

			switch ((int)( this.mob.incorporeal_move )) {
				case 1:
					
					if ( this.mob is Mob_Dead_Observer ) {
						observer = this.mob;

						if ( Lang13.Bool( observer.locked_to ) ) {
							((Mob_Dead_Observer)observer).manual_stop_follow( observer.locked_to );
						}
					}
					T = Map13.GetStep( this.mob, direct );
					A = GlobalFuncs.get_area( T );

					if ( Lang13.Bool( A ) && A.anti_ethereal && !GlobalFuncs.isAdminGhost( this.mob ) ) {
						GlobalFuncs.to_chat( this.mob, "<span class='sinister'>A dark forcefield prevents you from entering the area.</span>" );
					} else if ( T != null && T.holy && this.mob is Mob_Dead_Observer && ( this.mob.invisibility == 0 || Lang13.Bool( GlobalVars.ticker.mode ) && Lang13.Bool( GlobalVars.ticker.mode.cult.Contains( this.mob.mind ) ) ) ) {
						GlobalFuncs.to_chat( this.mob, "<span class='warning'>You cannot get past holy grounds while you are in this plane of existence!</span>" );
					} else {
						this.mob.forceEnter( Map13.GetStep( this.mob, direct ) );
						this.mob.dir = direct;
					}
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						locx = null;
						locy = null;

						switch ((int)( direct )) {
							case 1:
								locx = Lang13.IntNullable( mobloc.x );
								locy = Lang13.IntNullable( mobloc.y + 2 );

								if ( ( locy ??0) > Game13.map_size_y ) {
									return false;
								}
								break;
							case 2:
								locx = Lang13.IntNullable( mobloc.x );
								locy = Lang13.IntNullable( mobloc.y - 2 );

								if ( ( locy ??0) < 1 ) {
									return false;
								}
								break;
							case 4:
								locy = Lang13.IntNullable( mobloc.y );
								locx = Lang13.IntNullable( mobloc.x + 2 );

								if ( ( locx ??0) > Game13.map_size_x ) {
									return false;
								}
								break;
							case 8:
								locy = Lang13.IntNullable( mobloc.y );
								locx = Lang13.IntNullable( mobloc.x - 2 );

								if ( ( locx ??0) < 1 ) {
									return false;
								}
								break;
							default:
								return false;
								break;
						}
						this.mob.loc = Map13.GetTile( locx ??0, locy ??0, Convert.ToInt32( mobloc.z ) );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							limit = 2;

							foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.getline( mobloc, this.mob.loc ) )) {
								T2 = _b;
								
								GlobalFuncs.anim( T2, this.mob, "icons/mob/mob.dmi", null, "shadow", null, this.mob.dir );
								limit--;

								if ( limit <= 0 ) {
									break;
								}
							}
							return;
						}));
					} else {
						GlobalFuncs.anim( mobloc, this.mob, "icons/mob/mob.dmi", null, "shadow", null, this.mob.dir );
						this.mob.forceEnter( Map13.GetStep( this.mob, direct ) );
					}
					this.mob.dir = direct;
					break;
				case 3:
					newLoc = Map13.GetStep( this.mob, direct );

					if ( !Lang13.Bool( newLoc.flags & 1 ) ) {
						this.mob.forceEnter( newLoc );
						this.mob.dir = direct;
					} else {
						GlobalFuncs.to_chat( this.mob, "<span class='warning'>Some strange aura is blocking the way!</span>" );
					}
					this.mob.delayNextMove( 2 );
					return true;
					break;
			}

			foreach (dynamic _d in Lang13.Enumerate( this.mob.loc, typeof(Obj) )) {
				S = _d;
				

				if ( S is Obj_Effect_StepTrigger || S is Obj_Effect_Beam ) {
					S.Crossed( this.mob );
				}
			}
			this.mob.delayNextMove( 1 );
			return true;
		}

		// Function from file: mob_movement.dm
		public bool Process_Grab(  ) {
			ByTable grabbing = null;
			dynamic G = null;
			dynamic G2 = null;
			Obj_Item_Weapon_Grab G3 = null;

			
			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), this.mob.grabbed_by.len ) ) ) ) {
				grabbing = new ByTable();

				if ( this.mob.l_hand is Obj_Item_Weapon_Grab ) {
					G = this.mob.l_hand;
					grabbing.Add( G.affecting );
				}

				if ( this.mob.r_hand is Obj_Item_Weapon_Grab ) {
					G2 = this.mob.r_hand;
					grabbing.Add( G2.affecting );
				}

				foreach (dynamic _a in Lang13.Enumerate( this.mob.grabbed_by, typeof(Obj_Item_Weapon_Grab) )) {
					G3 = _a;
					

					if ( G3.state == 1 && !( grabbing.Find( G3.assailant ) != 0 ) ) {
						Lang13.Delete( G3 );
						G3 = null;
					}

					if ( G3.state == 2 ) {
						this.mob.delayNextMove( 10 );

						if ( !Rand13.PercentChance( 25 ) ) {
							return true;
						}
						this.mob.visible_message( "<span class='warning'>" + this.mob + " has broken free of " + G3.assailant + "'s grip!</span>", null, null, "<span class='warning'>" + this.mob + " has broken free of " + G3.assailant + "'s hug!</span>" );
						GlobalFuncs.returnToPool( G3 );
					}

					if ( G3.state == 3 ) {
						this.mob.delayNextMove( 10 );

						if ( !Rand13.PercentChance( 5 ) ) {
							return true;
						}
						this.mob.visible_message( "<span class='warning'>" + this.mob + " has broken free of " + G3.assailant + "'s headlock!</span>", null, null, "<span class='warning'>" + this.mob + " has broken free of " + G3.assailant + "'s passionate hug!</span>" );
						GlobalFuncs.returnToPool( G3 );
					}
				}
			}
			return false;
		}

		// Function from file: mob_movement.dm
		public void Dir_object( int direct = 0 ) {
			Obj_Item_Projectile_Nikita O = null;

			
			if ( this.mob != null && this.mob.orient_object != null ) {
				O = this.mob.orient_object;
				O.dir = direct;
			}
			return;
		}

		// Function from file: mob_movement.dm
		public void Move_object( int direct = 0 ) {
			
			if ( this.mob != null && this.mob.control_object != null ) {
				
				if ( Lang13.Bool( ((dynamic)this.mob.control_object).density ) ) {
					Map13.Step( (Ent_Dynamic)(this.mob.control_object), direct );

					if ( !( this.mob.control_object != null ) ) {
						return;
					}
					((dynamic)this.mob.control_object).dir = direct;
				} else {
					((dynamic)this.mob.control_object).loc = Map13.GetStep( (Ent_Static)(this.mob.control_object), direct );
				}
			}
			return;
		}

		// Function from file: splash_simulation.dm
		[VerbInfo( group: "Debug" )]
		public void splash(  ) {
			dynamic volume = null;
			dynamic T = null;

			volume = Interface13.Input( "Volume?", "Volume?", 0, null, null, InputType.Num );

			if ( !Lang13.Bool( Lang13.IsNumber( volume ) ) ) {
				return;
			}

			if ( Convert.ToDouble( volume ) <= 0.05 ) {
				return;
			}
			T = GlobalFuncs.get_turf( this.mob );

			if ( !( T is Tile ) ) {
				return;
			}
			GlobalFuncs.trigger_splash( T, volume );
			return;
		}

		// Function from file: seed_controller.dm
		[VerbInfo( name: "Show Plant Genes", desc: "Prints the round's plant gene masks.", group: "Debug" )]
		public void show_plant_genes(  ) {
			dynamic mask = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}

			if ( !( GlobalVars.plant_controller != null ) || !( GlobalVars.plant_controller.gene_tag_masks != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "Gene masks not set." );
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.plant_controller.gene_tag_masks )) {
				mask = _a;
				
				GlobalFuncs.to_chat( Task13.User, "" + mask + ": " + GlobalVars.plant_controller.gene_tag_masks[mask] );
			}
			return;
		}

		// Function from file: cooking_machines.dm
		[VerbInfo( name: "Configure Food", group: "Debug" )]
		public dynamic configFood(  ) {
			dynamic _default = null;

			_default = Interface13.Alert( "Deep Fried Everything?", null, "Yes", "No" ) == "Yes";

			if ( Lang13.Bool( _default ) ) {
				GlobalVars.deepFriedEverything = true;
			} else {
				GlobalVars.deepFriedEverything = false;
			}
			_default = Interface13.Alert( "Food Nesting?", null, "Yes", "No" ) == "Yes";

			if ( Lang13.Bool( _default ) ) {
				GlobalVars.foodNesting = true;
			} else {
				GlobalVars.foodNesting = false;
			}
			_default = Interface13.Alert( "Enable recursive food? (WARNING: May cause server instability!)", null, "Yes", "No" ) == "Yes";

			if ( Lang13.Bool( _default ) ) {
				GlobalVars.recursiveFood = true;
			} else {
				GlobalVars.recursiveFood = false;
			}
			_default = Interface13.Input( "Deep Fried Nutriment? (1 to 50)", null, null, null, null, InputType.Any );
			_default = String13.ParseNumber( _default );

			if ( Lang13.Bool( Lang13.IsNumber( _default ) ) && Lang13.IsInRange( Convert.ToDouble( _default ), 1, 50 ) ) {
				GlobalVars.deepFriedNutriment = _default;
			} else {
				GlobalFuncs.to_chat( Task13.User, "That wasn't a valid number." );
			}
			_default = Interface13.Input( "Ingredient Limit? (1 to 100)", null, null, null, null, InputType.Any );
			_default = String13.ParseNumber( _default );

			if ( Lang13.Bool( Lang13.IsNumber( _default ) ) && Lang13.IsInRange( Convert.ToDouble( _default ), 1, 100 ) ) {
				GlobalVars.ingredientLimit = _default;
			} else {
				GlobalFuncs.to_chat( Task13.User, "That wasn't a valid number." );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set deepFriedEverything to " + GlobalVars.deepFriedEverything + "." );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set foodNesting to " + GlobalVars.foodNesting + "." );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set deepFriedNutriment to " + GlobalVars.deepFriedNutriment );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set ingredientLimit to " + GlobalVars.ingredientLimit );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " set deepFriedEverything to " + GlobalVars.deepFriedEverything + "." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " set foodNesting to " + GlobalVars.foodNesting + "." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " set deepFriedNutriment to " + GlobalVars.deepFriedNutriment );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " set ingredientLimit to " + GlobalVars.ingredientLimit );
			return _default;
		}

		// Function from file: event_manager.dm
		[VerbInfo( name: "Trigger Event (Debug Only)", group: "Debug" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.FromGlobalVar, "allEvents" )]
		public void forceEvent( dynamic type = null ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}

			if ( type is Type ) {
				Lang13.Call( type );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has triggered an event. (" + type + ")" );
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[VerbInfo( name: "Show/Hide Prayers", desc: "Toggles seeing prayers", group: "Preferences" )]
		public void toggleprayers(  ) {
			this.prefs.toggles ^= 256;
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.to_chat( this, "You will " + ( Lang13.Bool( this.prefs.toggles & 256 ) ? "now" : "no longer" ) + " see prayerchat." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TP" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[VerbInfo( name: "Hear/Silence Adminhelps", desc: "Toggle hearing a notification when admin PMs are recieved", group: "Preferences" )]
		public void toggleadminhelpsound(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.prefs.toggles ^= 1;
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.to_chat( Task13.User, "You will " + ( Lang13.Bool( this.prefs.toggles & 1 ) ? "now" : "no longer" ) + " hear a sound when adminhelps arrive." );
			GlobalFuncs.feedback_add_details( "admin_verb", "AHS" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[VerbInfo( name: "Show/Hide RadioChatter", desc: "Toggle seeing radiochatter from radios and speakers", group: "Preferences" )]
		public void toggle_hear_radio(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.prefs.toggles ^= 512;
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.to_chat( Task13.User, "You will " + ( Lang13.Bool( this.prefs.toggles & 512 ) ? "now" : "no longer" ) + " see radio chatter from radios or speakers" );
			GlobalFuncs.feedback_add_details( "admin_verb", "THR" );
			return;
		}

		// Function from file: client procs.dm
		public dynamic desires_role( string role_id = null, dynamic display_to_user = null ) {
			display_to_user = display_to_user ?? 0;

			dynamic role_desired = null;
			string answer = null;

			role_desired = this.prefs.roles[role_id];

			if ( Lang13.Bool( display_to_user ) && !Lang13.Bool( role_desired & 2 ) ) {
				
				if ( !Lang13.Bool( role_desired & 4 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						answer = Interface13.Alert( this, "" + role_id + "\n\nNOTE:  You will only be polled about this role once per round. To change your choice, use Preferences > Setup Special Roles.  The change will take place AFTER this recruiting period.", "Role Recruitment", "Yes", "No", "Never" );

						switch ((string)( answer )) {
							case "Never":
								this.prefs.roles[role_id] = 2;
								break;
							case "No":
								this.prefs.roles[role_id] = 0;
								break;
							case "Yes":
								this.prefs.roles[role_id] = 1;
								break;
						}
						this.prefs.roles[role_id] |= 4;
						return;
					}));
				} else {
					GlobalFuncs.to_chat( this, new Txt( "<span style='recruit'>The game is currently looking for " ).item( role_id ).str( " candidates.  Your current answer is <a href='?src=" ).Ref( this.prefs ).str( "&preference=set_role&role_id=" ).item( role_id ).str( "'>" ).item( GlobalFuncs.get_role_desire_str( role_desired ) ).str( "</a>.</span>" ).ToString() );
				}
			}
			return role_desired & 1;
		}

		// Function from file: client procs.dm
		public void send_html_resources(  ) {
			
			if ( GlobalVars.crewmonitor != null && GlobalVars.minimapinit ) {
				GlobalVars.crewmonitor.sendResources( this );
			}

			if ( GlobalVars.adv_camera != null && GlobalVars.minimapinit ) {
				GlobalVars.adv_camera.sendResources( this );
			}

			while (!( GlobalVars.vote != null ) || !( GlobalVars.vote.v_interface != null )) {
				Task13.Sleep( 1 );
			}
			GlobalVars.vote.v_interface.sendAssets( this );
			return;
		}

		// Function from file: client procs.dm
		public void send_resources(  ) {
			this.getFiles( "html/search.js", "html/panels.css" );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.send_html_resources();
				return;
			}));
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalVars.nanomanager.send_resources( this );
				return;
			}));
			return;
		}

		// Function from file: client procs.dm
		public int is_afk( int? duration = null ) {
			duration = duration ?? 3000;

			
			if ( this.inactivity > ( duration ??0) ) {
				return this.inactivity;
			}
			return 0;
		}

		// Function from file: client procs.dm
		public void Query7( string sql_ckey = null, string sql_address = null, string sql_computerid = null ) {
			string server_address_port = null;
			string sql_server_address_port = null;
			DBQuery query_connection_log = null;

			server_address_port = "" + Game13.internet_address + ":" + Game13.port;
			sql_server_address_port = GlobalFuncs.sanitizeSQL( server_address_port );
			query_connection_log = GlobalVars.dbcon.NewQuery( "INSERT INTO `erro_connection_log`(`id`,`datetime`,`serverip`,`ckey`,`ip`,`computerid`) VALUES(null,Now(),'" + sql_server_address_port + "','" + sql_ckey + "','" + sql_address + "','" + sql_computerid + "');" );
			query_connection_log.Execute();
			return;
		}

		// Function from file: client procs.dm
		public double? Query6( string sql_ckey = null ) {
			DBQuery query_age = null;
			double? age = null;

			query_age = GlobalVars.dbcon.NewQuery( "SELECT datediff(Now(),accountjoined) as age2 FROM erro_player WHERE ckey = '" + sql_ckey + "'" );
			query_age.Execute();

			while (query_age.NextRow()) {
				age = String13.ParseNumber( query_age.item[1] );
			}
			return age;
		}

		// Function from file: client procs.dm
		public void Query5( string sql_ckey = null, string sql_address = null, string sql_computerid = null, string sql_admin_rank = null, dynamic Joined = null ) {
			DBQuery query_insert = null;

			query_insert = GlobalVars.dbcon.NewQuery( "INSERT INTO erro_player (id, ckey, firstseen, lastseen, ip, computerid, lastadminrank, accountjoined) VALUES (null, '" + sql_ckey + "', Now(), Now(), '" + sql_address + "', '" + sql_computerid + "', '" + sql_admin_rank + "', '" + Joined + "')" );
			query_insert.Execute();
			return;
		}

		// Function from file: client procs.dm
		public void Query4( double? age = null, string sql_address = null, string sql_computerid = null, string sql_admin_rank = null, dynamic sql_id = null, dynamic Joined = null ) {
			DBQuery query_update = null;

			
			if ( Lang13.Bool( Lang13.IsNumber( age ) ) ) {
				query_update = GlobalVars.dbcon.NewQuery( "UPDATE erro_player SET lastseen = Now(), ip = '" + sql_address + "', computerid = '" + sql_computerid + "', lastadminrank = '" + sql_admin_rank + "' WHERE id = " + sql_id );
			} else {
				query_update = GlobalVars.dbcon.NewQuery( "UPDATE erro_player SET lastseen = Now(), ip = '" + sql_address + "', computerid = '" + sql_computerid + "', lastadminrank = '" + sql_admin_rank + "', accountjoined = '" + Joined + "' WHERE id = " + sql_id );
			}
			query_update.Execute();
			return;
		}

		// Function from file: client procs.dm
		public void Query3( string sql_computerid = null ) {
			DBQuery query_cid = null;

			query_cid = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM erro_player WHERE computerid = '" + sql_computerid + "'" );
			query_cid.Execute();
			this.related_accounts_cid = "";

			while (query_cid.NextRow()) {
				this.related_accounts_cid += "" + query_cid.item[1] + ", ";
			}
			return;
		}

		// Function from file: client procs.dm
		public void Query2( string sql_address = null ) {
			DBQuery query_ip = null;

			query_ip = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM erro_player WHERE ip = '" + sql_address + "'" );
			query_ip.Execute();
			this.related_accounts_ip = "";

			while (query_ip.NextRow()) {
				this.related_accounts_ip += "" + query_ip.item[1] + ", ";
			}
			return;
		}

		// Function from file: client procs.dm
		public ByTable Query1( dynamic sql_address = null, dynamic sql_computerid = null, dynamic sql_ckey = null ) {
			DBQuery query = null;
			dynamic sql_id = null;
			double? player_age = null;
			double? age = null;

			query = GlobalVars.dbcon.NewQuery( "SELECT id, datediff(Now(),firstseen) as age, datediff(Now(),accountjoined) as age2 FROM erro_player WHERE ckey = '" + sql_ckey + "'" );
			query.Execute();

			while (query.NextRow()) {
				sql_id = query.item[1];
				player_age = String13.ParseNumber( query.item[2] );
				age = String13.ParseNumber( query.item[3] );
				break;
			}
			return new ByTable(new object [] { sql_id, player_age, age });
		}

		// Function from file: client procs.dm
		public void log_client_to_db(  ) {
			dynamic http = null;
			dynamic Joined = null;
			string String = null;
			int JoinPos = 0;
			dynamic sql_id = null;
			string sql_ckey = null;
			double? age = null;
			ByTable query1 = null;
			string sql_address = null;
			string sql_computerid = null;
			dynamic admin_rank = null;
			string sql_admin_rank = null;

			
			if ( GlobalFuncs.IsGuestKey( this.key ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			http = Game13.Export( "http://www.byond.com/members/" + this.key + "?format=text" );
			Joined = 2548;

			if ( Lang13.Bool( http ) && http.len != 0 && Lang13.Bool( http.Contains( "CONTENT" ) ) ) {
				String = File13.Read( http["CONTENT"] );
				JoinPos = String13.FindIgnoreCase( String, "joined", 1, 0 ) + 10;
				Joined = String13.SubStr( String, JoinPos, JoinPos + 10 );
			}
			this.account_joined = Joined;
			sql_id = 0;
			sql_ckey = GlobalFuncs.sanitizeSQL( this.ckey );
			Game13.log.WriteMsg( "## TESTING: " + ( "sql_ckey = " + sql_ckey ) );
			query1 = this.Query1();
			sql_id = query1[1];
			this.player_age = query1[2];
			age = Lang13.DoubleNullable( query1[3] );
			sql_address = GlobalFuncs.sanitizeSQL( this.address );
			this.Query2( sql_address );
			sql_computerid = GlobalFuncs.sanitizeSQL( this.computer_id );
			this.Query3( sql_computerid );

			if ( Lang13.Bool( sql_id ) ) {
				
				if ( sql_id is string ) {
					sql_id = String13.ParseNumber( sql_id );
				}

				if ( !Lang13.Bool( Lang13.IsNumber( sql_id ) ) ) {
					return;
				}
			}
			admin_rank = "Player";

			if ( this.holder is Admins ) {
				admin_rank = this.holder.rank;
			}
			sql_admin_rank = GlobalFuncs.sanitizeSQL( admin_rank );

			if ( Lang13.Bool( sql_id ) ) {
				this.Query4( age, sql_address, sql_computerid, sql_admin_rank, sql_id, Joined );
			} else {
				this.Query5( sql_ckey, sql_address, sql_computerid, sql_admin_rank, Joined );
			}

			if ( !Lang13.Bool( Lang13.IsNumber( age ) ) ) {
				age = this.Query6( sql_ckey );
			}

			if ( ( age ??0) < 14 ) {
				GlobalFuncs.message_admins( "" + String13.CKey( this.key ) + "/(" + this + ") is a relatively new player, may consider watching them. AGE = " + age + "  First seen = " + this.player_age );
				GlobalFuncs.log_admin( "" + String13.CKey( this.key ) + "/(" + this + ") is a relatively new player, may consider watching them. AGE = " + age + " First seen = " + this.player_age );
			}
			Game13.log.WriteMsg( "## TESTING: " + ( "" + this + "/" + String13.CKey( this.key ) + " logged in with age of " + age + "/" + this.player_age + "/" + Joined ) );
			this.account_age = age;
			this.Query7( sql_ckey, sql_address, sql_computerid );
			return;
		}

		// Function from file: client procs.dm
		public bool handle_spam_prevention( dynamic message = null, int mute_type = 0 ) {
			
			if ( GlobalVars.config.automute_on && !( this.holder != null ) && this.last_message == message ) {
				this.last_message_count++;

				if ( this.last_message_count >= 10 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You have exceeded the spam filter limit for identical messages. An auto-mute was applied.</span>" );
					GlobalFuncs.cmd_admin_mute( this.mob, mute_type, true );
					return true;
				}

				if ( this.last_message_count >= 5 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You are nearing the spam filter limit for identical messages.</span>" );
					return false;
				}
			} else {
				this.last_message = message;
				this.last_message_count = 0;
				return false;
			}
			return false;
		}

		// Function from file: SDQL_2.dm
		[VerbInfo( group: "Debug" )]
		[VerbArg( 1, InputType.StrMultiline )]
		public void SDQL2_query( string query_text = null ) {
			string query_log = null;
			ByTable query_list = null;
			ByTable query_tree = null;
			ByTable from_objs = null;
			ByTable select_types = null;
			ByTable objs = null;
			dynamic type = null;
			string _char = null;
			dynamic from = null;
			ByTable objs_temp = null;
			Game_Data d = null;
			dynamic call_list = null;
			dynamic args_list = null;
			Game_Data d2 = null;
			ByTable new_args = null;
			dynamic arg = null;
			dynamic v = null;
			Game_Data d3 = null;
			string text = null;
			Game_Data t = null;
			Game_Data a = null;
			dynamic set_list = null;
			Game_Data d4 = null;
			ByTable sets = null;
			Game_Data temp = null;
			int i = 0;
			dynamic v2 = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				GlobalFuncs.message_admins( "<span class='warning'>ERROR: Non-admin " + Task13.User.key + " attempted to execute the following SDQL query: " + query_text + "</span>" );
				GlobalFuncs.log_admin( "Non-admin " + Task13.User.key + " attempted to execute the following SDQL query: " + query_text + "!" );
				return;
			}

			if ( !Lang13.Bool( query_text ) || Lang13.Length( query_text ) < 1 ) {
				return;
			}
			query_log = "" + GlobalFuncs.key_name( this ) + " executed SDQL query: \"" + query_text + "\".";
			Game13.log.WriteMsg( query_log );
			GlobalFuncs.message_admins( query_log );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + query_log ) );
			Task13.Sleep( -1 );
			query_list = GlobalFuncs.SDQL2_tokenize( query_text );

			if ( !( query_list != null ) || query_list.len < 1 ) {
				return;
			}
			query_tree = GlobalFuncs.SDQL_parse( query_list );

			if ( query_tree.len < 1 ) {
				return;
			}
			from_objs = new ByTable();
			select_types = new ByTable();

			dynamic _a = query_tree[1]; // Was a switch-case, sorry for the mess.
			if ( _a=="explain" ) {
				GlobalFuncs.SDQL_testout( query_tree["explain"] );
				return;
			} else if ( _a=="call" ) {
				
				if ( query_tree.Contains( "on" ) ) {
					select_types = query_tree["on"];
				} else {
					return;
				}
			} else if ( _a=="select" || _a=="delete" || _a=="update" ) {
				select_types = query_tree[query_tree[1]];
			}
			from_objs = GlobalFuncs.SDQL_from_objs( query_tree["from"] );
			objs = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( select_types )) {
				type = _c;
				
				_char = String13.SubStr( type, 1, 2 );

				if ( _char == "/" || _char == "*" ) {
					
					foreach (dynamic _b in Lang13.Enumerate( from_objs )) {
						from = _b;
						
						objs.Add( GlobalFuncs.SDQL_get_all( type, from ) );
					}
				} else if ( _char == "'" || _char == "\"" ) {
					objs.Add( Lang13.FindObj( String13.SubStr( type, 2, Lang13.Length( type ) ) ) );
				}
			}

			if ( query_tree.Contains( "where" ) ) {
				objs_temp = objs;
				objs = new ByTable();

				foreach (dynamic _d in Lang13.Enumerate( objs_temp, typeof(Game_Data) )) {
					d = _d;
					

					if ( Lang13.Bool( GlobalFuncs.SDQL_expression( d, query_tree["where"] ) ) ) {
						objs.Add( d );
					}
				}
			}

			dynamic _m = query_tree[1]; // Was a switch-case, sorry for the mess.
			if ( _m=="call" ) {
				call_list = query_tree["call"];
				args_list = query_tree["args"];

				foreach (dynamic _g in Lang13.Enumerate( objs, typeof(Game_Data) )) {
					d2 = _g;
					
					new_args = new ByTable();

					foreach (dynamic _e in Lang13.Enumerate( args_list )) {
						arg = _e;
						
						new_args.Add( GlobalFuncs.SDQL_expression( d2, arg ) );
					}

					foreach (dynamic _f in Lang13.Enumerate( call_list )) {
						v = _f;
						

						if ( d2 != null ) {
							
							if ( Lang13.HasCall( d2, v ) ) {
								Task13.Schedule( 0, (Task13.Closure)(() => {
									new_args.Apply( Lang13.BindFunc( d2, v ) );
									return;
								}));
							}
						}
					}
				}
			} else if ( _m=="delete" ) {
				
				foreach (dynamic _h in Lang13.Enumerate( objs, typeof(Game_Data) )) {
					d3 = _h;
					
					GlobalFuncs.qdel( d3 );
				}
			} else if ( _m=="select" ) {
				text = "";

				foreach (dynamic _i in Lang13.Enumerate( objs, typeof(Game_Data) )) {
					t = _i;
					
					text += new Txt( "<A HREF='?_src_=vars;Vars=" ).Ref( t ).str( "'>" ).Ref( t ).str( "</A>" ).ToString();

					if ( t is Ent_Static ) {
						a = t;

						if ( Lang13.Bool( ((dynamic)a).x ) ) {
							text += ": " + t + " at (" + ((dynamic)a).x + ", " + ((dynamic)a).y + ", " + ((dynamic)a).z + ")<br>";
						} else if ( Lang13.Bool( ((dynamic)a).loc ) && Lang13.Bool( ((dynamic)a).loc.x ) ) {
							text += ": " + t + " in " + ((dynamic)a).loc + " at (" + ((dynamic)a).loc.x + ", " + ((dynamic)a).loc.y + ", " + ((dynamic)a).loc.z + ")<br>";
						} else {
							text += ": " + t + "<br>";
						}
					} else {
						text += ": " + t + "<br>";
					}
				}
				Interface13.Browse( Task13.User, text, "window=SDQL-result" );
			} else if ( _m=="update" ) {
				
				if ( query_tree.Contains( "set" ) ) {
					set_list = query_tree["set"];

					foreach (dynamic _l in Lang13.Enumerate( objs, typeof(Game_Data) )) {
						d4 = _l;
						

						foreach (dynamic _k in Lang13.Enumerate( set_list, typeof(ByTable) )) {
							sets = _k;
							
							temp = d4;
							i = 0;

							foreach (dynamic _j in Lang13.Enumerate( sets )) {
								v2 = _j;
								

								if ( ++i == sets.len ) {
									
									if ( temp is Tile && ( v2 == "x" || v2 == "y" || v2 == "z" ) ) {
										break;
									}
									temp.SDQL_update( v2, GlobalFuncs.SDQL_expression( d4, set_list[sets] ) );
									break;
								}

								if ( temp.vars.Find( v2 ) != 0 && ( temp.vars[v2] is Game_Data || Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( temp.vars[v2] ) ) ) ) {
									temp = temp.vars[v2];
								} else {
									break;
								}
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: SDQL_2.dm
		public bool SDQL_update( dynamic var_name = null, dynamic new_value = null ) {
			((dynamic)this).vars[var_name] = new_value;
			return true;
		}

		// Function from file: tripAI.dm
		[VerbInfo( name: "Create AI Triumvirate", group: "Fun" )]
		public void triple_ai(  ) {
			Job job = null;

			
			if ( GlobalVars.ticker.current_state > 1 ) {
				GlobalFuncs.to_chat( Task13.User, "This option is currently only usable during pregame. This may change at a later date." );
				return;
			}

			if ( GlobalVars.job_master != null && GlobalVars.ticker != null ) {
				job = GlobalVars.job_master.GetJob( "AI" );

				if ( !( job != null ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unable to locate the AI job" );
					return;
				}

				if ( GlobalVars.ticker.triai ) {
					GlobalVars.ticker.triai = false;
					GlobalFuncs.to_chat( Task13.User, "Only one AI will be spawned at round start." );
					GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has toggled off triple AIs at round start.</span>" );
				} else {
					GlobalVars.ticker.triai = true;
					GlobalFuncs.to_chat( Task13.User, "There will be an AI Triumvirate at round start." );
					GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has toggled on triple AIs at round start.</span>" );
				}
			}
			return;
		}

		// Function from file: ticklag.dm
		[VerbInfo( name: "Set Ticklag", desc: "Sets a new tick lag. Recommend you don't mess with this too much! The standard value has been .55 for some time", group: "Debug" )]
		public void ticklag(  ) {
			dynamic newtick = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}
			newtick = Interface13.Input( "Sets a new tick lag. Please don't mess with this too much! The standard value has been .55 for some time", "Lag of Tick", Game13.tick_lag, null, null, InputType.Num | InputType.Null );

			if ( !Lang13.Bool( newtick ) ) {
				return;
			}

			if ( Convert.ToDouble( newtick ) <= 2 && Convert.ToDouble( newtick ) > 0 ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has modified world.tick_lag to " + newtick );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " has modified world.tick_lag to " + newtick );
				Game13.tick_lag = Convert.ToDouble( newtick );
				GlobalFuncs.feedback_add_details( "admin_verb", "TICKLAG" );
			} else {
				GlobalFuncs.to_chat( this, "<span class='warning'>Error: ticklag(): Invalid world.ticklag value. No changes made.</span>" );
			}
			return;
		}

		// Function from file: striketeam_syndicate.dm
		public Mob_Living_Carbon_Human create_syndicate_death_commando( Obj_Effect_Landmark spawn_location = null, bool? syndicate_leader_selected = null ) {
			syndicate_leader_selected = syndicate_leader_selected ?? false;

			Mob_Living_Carbon_Human new_syndicate_commando = null;
			dynamic syndicate_commando_leader_rank = null;
			dynamic syndicate_commando_rank = null;
			dynamic syndicate_commando_name = null;
			Preferences A = null;

			new_syndicate_commando = new Mob_Living_Carbon_Human( spawn_location.loc );
			syndicate_commando_leader_rank = Rand13.Pick(new object [] { "Lieutenant", "Captain", "Major" });
			syndicate_commando_rank = Rand13.Pick(new object [] { "Corporal", "Sergeant", "Staff Sergeant", "Sergeant 1st Class", "Master Sergeant", "Sergeant Major" });
			syndicate_commando_name = Rand13.PickFromTable( GlobalVars.last_names );
			new_syndicate_commando.setGender( Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE }) );
			A = new Preferences();
			A.randomize_appearance_for( new_syndicate_commando );
			new_syndicate_commando.real_name = "" + ( !( syndicate_leader_selected == true ) ? syndicate_commando_rank : syndicate_commando_leader_rank ) + " " + syndicate_commando_name;
			new_syndicate_commando.age = ( !( syndicate_leader_selected == true ) ? Rand13.Int( 23, 35 ) : Rand13.Int( 35, 45 ) );
			new_syndicate_commando.dna.ready_dna( new_syndicate_commando );
			new_syndicate_commando.mind_initialize();
			new_syndicate_commando.mind.assigned_role = "MODE";
			new_syndicate_commando.mind.special_role = "Syndicate Commando";
			GlobalVars.ticker.mode.traitors.Or( new_syndicate_commando.mind );
			new_syndicate_commando.equip_syndicate_commando( syndicate_leader_selected );
			Lang13.Delete( spawn_location );
			spawn_location = null;
			return new_syndicate_commando;
		}

		// Function from file: striketeam_syndicate.dm
		[VerbInfo( name: "Spawn Syndicate Strike Team", desc: "Spawns a squad of commandos in the Syndicate Mothership if you want to run an admin event.", group: "Fun" )]
		public void syndicate_strike_team(  ) {
			string input = null;
			int syndicate_commando_number = 0;
			bool? syndicate_leader_selected = null;
			string nuke_code = null;
			double? temp_code = null;
			Obj_Machinery_Nuclearbomb N = null;
			ByTable candidates = null;
			ByTable commandos = null;
			Mob_Dead_Observer G = null;
			int? i = null;
			dynamic candidate = null;
			Obj_Effect_Landmark L = null;
			Mob_Living_Carbon_Human new_syndicate_commando = null;
			Obj_Effect_Landmark L2 = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "The game hasn't started yet!" );
				return;
			}

			if ( GlobalVars.sent_syndicate_strike_team ) {
				Interface13.Alert( "The Syndicate are already sending a team, Mr. Dumbass." );
				return;
			}

			if ( Interface13.Alert( "Do you want to send in the Syndicate Strike Team? Once enabled, this is irreversible.", null, "Yes", "No" ) == "No" ) {
				return;
			}
			Interface13.Alert( "This 'mode' will go on until everyone is dead or the station is destroyed. You may also admin-call the evac shuttle when appropriate. Spawned syndicates have internals cameras which are viewable through a monitor inside the Syndicate Mothership Bridge. Assigning the team's detailed task is recommended from there. While you will be able to manually pick the candidates from active ghosts, their assignment in the squad will be random." );
			input = null;

			while (!Lang13.Bool( input )) {
				input = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( this, "Please specify which mission the syndicate strike team shall undertake.", "Specify Mission", "", null, InputType.Any ) ), 1, 1024 );

				if ( !Lang13.Bool( input ) ) {
					
					if ( Interface13.Alert( "Error, no mission set. Do you want to exit the setup process?", null, "Yes", "No" ) == "Yes" ) {
						return;
					}
				}
			}

			if ( GlobalVars.sent_syndicate_strike_team ) {
				GlobalFuncs.to_chat( this, "Looks like someone beat you to it." );
				return;
			}
			GlobalVars.sent_syndicate_strike_team = true;

			if ( GlobalVars.emergency_shuttle.direction == 1 && GlobalVars.emergency_shuttle.online ) {
				GlobalVars.emergency_shuttle.recall();
			}
			syndicate_commando_number = GlobalVars.syndicate_commandos_possible;
			syndicate_leader_selected = false;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
				N = _a;
				
				temp_code = String13.ParseNumber( N.r_code );

				if ( Lang13.Bool( temp_code ) ) {
					nuke_code = N.r_code;
					break;
				}
			}
			candidates = new ByTable();
			commandos = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
				G = _b;
				

				if ( !( G.client.holder != null ) && !( G.client.is_afk() != 0 ) ) {
					
					if ( !( G.mind != null && Lang13.Bool( G.mind.current ) && Convert.ToInt32( G.mind.current.stat ) != 2 ) ) {
						candidates.Add( G.key );
					}
				}
			}
			i = null;
			i = GlobalVars.commandos_possible;

			while (( i ??0) > 0 && candidates.len != 0) {
				candidate = Interface13.Input( "Pick characters to spawn as the commandos. This will go on until there either no more ghosts to pick from or the slots are full.", "Active Players", null, null, candidates, InputType.Null | InputType.Any );
				candidates.Remove( candidate );
				commandos.Add( candidate );
				i--;
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
				L = _c;
				

				if ( syndicate_commando_number <= 0 ) {
					break;
				}

				if ( L.name == "Syndicate-Commando" ) {
					syndicate_leader_selected = ( syndicate_commando_number == 1 ? true : false );
					new_syndicate_commando = this.create_syndicate_death_commando( L, syndicate_leader_selected );

					if ( commandos.len != 0 ) {
						new_syndicate_commando.key = Rand13.PickFromTable( commandos );
						commandos.Remove( new_syndicate_commando.key );
						new_syndicate_commando.v_internal = new_syndicate_commando.s_store;
						((dynamic)new_syndicate_commando.internals).icon_state = "internal1";
					}

					if ( Lang13.Bool( nuke_code ) ) {
						new_syndicate_commando.mind.store_memory( "<B>Nuke Code:</B> <span class='warning'>" + nuke_code + ".</span>" );
					}
					new_syndicate_commando.mind.store_memory( "<B>Mission:</B> <span class='warning'>" + input + ".</span>" );
					GlobalFuncs.to_chat( new_syndicate_commando, "<span class='notice'>You are an Elite Syndicate. " + ( !( syndicate_leader_selected == true ) ? "commando" : "<B>LEADER</B>" ) + " in the service of the Syndicate. \nYour current mission is: <span class='danger'>" + input + "</span></span>" );
					syndicate_commando_number--;
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
				L2 = _d;
				

				if ( L2.name == "Syndicate-Commando-Bomb" ) {
					new Obj_Effect_Spawner_Newbomb_Timer_Syndicate( L2.loc );
					Lang13.Delete( L2 );
					L2 = null;
				}
			}
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned a Syndicate strike squad.</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used Spawn Syndicate Squad." );
			GlobalFuncs.feedback_add_details( "admin_verb", "SDTHS" );
			return;
		}

		// Function from file: striketeam.dm
		public Mob_Living_Carbon_Human create_death_commando( Obj_Effect_Landmark spawn_location = null, bool? leader_selected = null ) {
			leader_selected = leader_selected ?? false;

			Mob_Living_Carbon_Human new_commando = null;
			dynamic commando_leader_rank = null;
			dynamic commando_rank = null;
			dynamic commando_name = null;
			Preferences A = null;

			new_commando = new Mob_Living_Carbon_Human( spawn_location.loc );
			commando_leader_rank = Rand13.Pick(new object [] { "Lieutenant", "Captain", "Major" });
			commando_rank = Rand13.Pick(new object [] { "Corporal", "Sergeant", "Staff Sergeant", "Sergeant 1st Class", "Master Sergeant", "Sergeant Major" });
			commando_name = Rand13.PickFromTable( GlobalVars.last_names );
			new_commando.gender = Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE });
			A = new Preferences();
			A.randomize_appearance_for( new_commando );
			new_commando.real_name = "" + ( !( leader_selected == true ) ? commando_rank : commando_leader_rank ) + " " + commando_name;
			new_commando.age = ( !( leader_selected == true ) ? Rand13.Int( 23, 35 ) : Rand13.Int( 35, 45 ) );
			new_commando.dna.ready_dna( new_commando );
			new_commando.mind_initialize();
			new_commando.mind.assigned_role = "MODE";
			new_commando.mind.special_role = "Death Commando";
			GlobalVars.ticker.mode.traitors.Or( new_commando.mind );
			new_commando.equip_death_commando( leader_selected );
			GlobalVars.ticker.mode.deathsquad.Add( new_commando.mind );
			return new_commando;
		}

		// Function from file: striketeam.dm
		public bool strike_team(  ) {
			string input = null;
			int commando_number = 0;
			bool? leader_selected = null;
			string nuke_code = null;
			double? temp_code = null;
			Obj_Machinery_Nuclearbomb N = null;
			ByTable candidates = null;
			ByTable commandos = null;
			Mob_Dead_Observer G = null;
			int? i = null;
			dynamic candidate = null;
			Obj_Effect_Landmark L = null;
			Mob_Living_Carbon_Human new_commando = null;
			Obj_Effect_Landmark L2 = null;
			Obj_Item_Weapon_Paper P = null;
			Obj_Effect_Landmark L3 = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>The game hasn't started yet!</font>" );
				return false;
			}

			if ( Game13.time < 6000 ) {
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>There are " + ( 6000 - Game13.time ) / 10 + " seconds remaining before it may be called.</font>" );
				return false;
			}

			if ( GlobalVars.sent_strike_team ) {
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>CentCom is already sending a team.</font>" );
				return false;
			}

			if ( Interface13.Alert( "Do you want to send in the CentCom death squad? Once enabled, this is irreversible.", null, "Yes", "No" ) != "Yes" ) {
				return false;
			}
			Interface13.Alert( "This 'mode' will go on until everyone is dead or the station is destroyed. You may also admin-call the evac shuttle when appropriate. Spawned commandos have internals cameras which are viewable through a monitor inside the Spec. Ops. Office. Assigning the team's detailed task is recommended from there. While you will be able to manually pick the candidates from active ghosts, their assignment in the squad will be random." );
			input = null;

			while (!Lang13.Bool( input )) {
				input = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( this, "Please specify which mission the death commando squad shall undertake.", "Specify Mission", "", null, InputType.Any ) ), 1, 1024 );

				if ( !Lang13.Bool( input ) ) {
					
					if ( Interface13.Alert( "Error, no mission set. Do you want to exit the setup process?", null, "Yes", "No" ) == "Yes" ) {
						return false;
					}
				}
			}

			if ( GlobalVars.sent_strike_team ) {
				GlobalFuncs.to_chat( Task13.User, "Looks like someone beat you to it." );
				return false;
			}
			GlobalVars.sent_strike_team = true;

			if ( GlobalVars.emergency_shuttle.direction == 1 && GlobalVars.emergency_shuttle.online ) {
				GlobalVars.emergency_shuttle.recall();
			}
			commando_number = GlobalVars.commandos_possible;
			leader_selected = false;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
				N = _a;
				
				temp_code = String13.ParseNumber( N.r_code );

				if ( Lang13.Bool( temp_code ) ) {
					nuke_code = N.r_code;
					break;
				}
			}
			candidates = new ByTable();
			commandos = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
				G = _b;
				

				if ( !( G.client.holder != null ) && !( G.client.is_afk() != 0 ) ) {
					
					if ( !( G.mind != null && Lang13.Bool( G.mind.current ) && Convert.ToInt32( G.mind.current.stat ) != 2 ) ) {
						candidates.Add( G.key );
					}
				}
			}
			i = null;
			i = GlobalVars.commandos_possible;

			while (( i ??0) > 0 && candidates.len != 0) {
				candidate = Interface13.Input( "Pick characters to spawn as the commandos. This will go on until there either no more ghosts to pick from or the slots are full.", "Active Players", null, null, candidates, InputType.Null | InputType.Any );
				candidates.Remove( candidate );
				commandos.Add( candidate );
				i--;
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
				L = _c;
				

				if ( commando_number <= 0 ) {
					break;
				}

				if ( L.name == "Commando" ) {
					leader_selected = ( commando_number == 1 ? true : false );
					new_commando = this.create_death_commando( L, leader_selected );

					if ( commandos.len != 0 ) {
						new_commando.key = Rand13.PickFromTable( commandos );
						commandos.Remove( new_commando.key );
						new_commando.v_internal = new_commando.s_store;
						((dynamic)new_commando.internals).icon_state = "internal1";
					}

					if ( Lang13.Bool( nuke_code ) ) {
						new_commando.mind.store_memory( "<B>Nuke Code:</B> <span class='warning'>" + nuke_code + ".</span>" );
					}
					new_commando.mind.store_memory( "<B>Mission:</B> <span class='warning'>" + input + ".</span>" );
					GlobalFuncs.to_chat( new_commando, "<span class='notice'>You are a Special Ops. " + ( !( leader_selected == true ) ? "commando" : "<B>LEADER</B>" ) + " in the service of Central Command. Check the table ahead for detailed instructions.\nYour current mission is: <span class='danger'>" + input + "</span></span>" );
					commando_number--;
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
				L2 = _d;
				

				if ( L2.name == "Commando_Manual" ) {
					P = new Obj_Item_Weapon_Paper( L2.loc );
					P.info = "<p><b>Good morning soldier!</b>. This compact guide will familiarize you with standard operating procedure. There are three basic rules to follow:<br>#1 Work as a team.<br>#2 Accomplish your objective at all costs.<br>#3 Leave no witnesses.<br>You are fully equipped and stocked for your mission--before departing on the Spec. Ops. Shuttle due South, make sure that all operatives are ready. Actual mission objective will be relayed to you by Central Command through your headsets.<br>If deemed appropriate, Central Command will also allow members of your team to equip assault power-armor for the mission. You will find the armor storage due West of your position. Once you are ready to leave, utilize the Special Operations shuttle console and toggle the hull doors via the other console.</p><p>In the event that the team does not accomplish their assigned objective in a timely manner, or finds no other way to do so, attached below are instructions on how to operate a Nanotrasen Nuclear Device. Your operations <b>LEADER</b> is provided with a nuclear authentication disk and a pin-pointer for this reason. You may easily recognize them by their rank: Lieutenant, Captain, or Major. The nuclear device itself will be present somewhere on your destination.</p><p>Hello and thank you for choosing Nanotrasen for your nuclear information needs. Today's crash course will deal with the operation of a Fission Class Nanotrasen made Nuclear Device.<br>First and foremost, <b>DO NOT TOUCH ANYTHING UNTIL THE BOMB IS IN PLACE.</b> Pressing any button on the compacted bomb will cause it to extend and bolt itself into place. If this is done to unbolt it one must completely log in which at this time may not be possible.<br>To make the device functional:<br>#1 Place bomb in designated detonation zone<br> #2 Extend and anchor bomb (attack with hand).<br>#3 Insert Nuclear Auth. Disk into slot.<br>#4 Type numeric code into keypad (" + nuke_code + ").<br>Note: If you make a mistake press R to reset the device.<br>#5 Press the E button to log onto the device.<br>You now have activated the device. To deactivate the buttons at anytime, for example when you have already prepped the bomb for detonation, remove the authentication disk OR press the R on the keypad. Now the bomb CAN ONLY be detonated using the timer. A manual detonation is not an option.<br>Note: Toggle off the <b>SAFETY</b>.<br>Use the - - and + + to set a detonation time between 5 seconds and 10 minutes. Then press the timer toggle button to start the countdown. Now remove the authentication disk so that the buttons deactivate.<br>Note: <b>THE BOMB IS STILL SET AND WILL DETONATE</b><br>Now before you remove the disk if you need to move the bomb you can: Toggle off the anchor, move it, and re-anchor.</p><p>The nuclear authorization code is: <b>" + ( Lang13.Bool( nuke_code ) ? nuke_code : "None provided" ) + "</b></p><p><b>Good luck, soldier!</b></p>";
					P.name = "Spec. Ops. Manual";
				}
			}

			foreach (dynamic _e in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
				L3 = _e;
				

				if ( L3.name == "Commando-Bomb" ) {
					new Obj_Effect_Spawner_Newbomb_Timer_Syndicate( L3.loc );
					Lang13.Delete( L3 );
					L3 = null;
				}
			}
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned a CentCom strike squad.</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used Spawn Death Squad." );
			return true;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Toggle random events on/off", desc: "Toggles random events such as meteors, black holes, blob (but not space dust) on/off", group: "Server" )]
		public void toggle_random_events(  ) {
			
			if ( !GlobalFuncs.check_rights( 16 ) ) {
				return;
			}

			if ( !GlobalVars.config.allow_random_events ) {
				GlobalVars.config.allow_random_events = true;
				GlobalFuncs.to_chat( Task13.User, "Random events enabled" );
				GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has enabled random events." );
			} else {
				GlobalVars.config.allow_random_events = false;
				GlobalFuncs.to_chat( Task13.User, "Random events disabled" );
				GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has disabled random events." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TRE" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Make Everyone Random", desc: "Make everyone have a random appearance. You can only use this before rounds!", group: "Fun" )]
		public void everyone_random(  ) {
			string notifyplayers = null;

			
			if ( !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				GlobalFuncs.to_chat( Task13.User, "Nope you can't do this, the game's already started. This only works before rounds!" );
				return;
			}

			if ( GlobalVars.ticker.random_players ) {
				GlobalVars.ticker.random_players = false;
				GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has disabled \"Everyone is Special\" mode." );
				GlobalFuncs.to_chat( Task13.User, "Disabled." );
				return;
			}
			notifyplayers = Interface13.Alert( this, "Do you want to notify the players?", "Options", "Yes", "No", "Cancel" );

			if ( notifyplayers == "Cancel" ) {
				return;
			}
			GlobalFuncs.log_admin( "Admin " + GlobalFuncs.key_name( this ) + " has forced the players to have random appearances." );
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has forced the players to have random appearances." );

			if ( notifyplayers == "Yes" ) {
				GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><b>Admin " + Task13.User.key + " has forced the players to have completely random identities!</span>" );
			}
			GlobalFuncs.to_chat( Task13.User, "<i>Remember: you can always disable the randomness by using the verb again, assuming the round hasn't started yet</i>." );
			GlobalVars.ticker.random_players = true;
			GlobalFuncs.feedback_add_details( "admin_verb", "MER" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Attack Log", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_attack_log( Mob M = null ) {
			dynamic t = null;

			GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Attack Log for " + this.mob + "</span>" );

			foreach (dynamic _a in Lang13.Enumerate( M.attack_log )) {
				t = _a;
				
				GlobalFuncs.to_chat( Task13.User, t );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "ATTL" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Toggle Deny Shuttle", group: "Admin" )]
		public void admin_deny_shuttle(  ) {
			
			if ( !( GlobalVars.ticker != null ) ) {
				return;
			}

			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return;
			}
			GlobalVars.emergency_shuttle.deny_shuttle = !GlobalVars.emergency_shuttle.deny_shuttle;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has " + ( GlobalVars.emergency_shuttle.deny_shuttle ? "denied" : "allowed" ) + " the shuttle to be called." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has " + ( GlobalVars.emergency_shuttle.deny_shuttle ? "denied" : "allowed" ) + " the shuttle to be called." );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Cancel Shuttle", group: "Admin" )]
		public void admin_cancel_shuttle(  ) {
			
			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return;
			}

			if ( Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" ) != "Yes" ) {
				return;
			}

			if ( !( GlobalVars.ticker != null ) || GlobalVars.emergency_shuttle.location != 0 || GlobalVars.emergency_shuttle.direction == 0 ) {
				return;
			}
			GlobalVars.emergency_shuttle.recall();
			GlobalFuncs.feedback_add_details( "admin_verb", "CCSHUT" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " admin-recalled the emergency shuttle." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " admin-recalled the emergency shuttle.</span>" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Call Shuttle", group: "Admin" )]
		public void admin_call_shuttle(  ) {
			string confirm = null;
			dynamic choice = null;

			
			if ( !( GlobalVars.ticker != null ) || GlobalVars.emergency_shuttle.location != 0 ) {
				return;
			}

			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return;
			}
			confirm = Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}

			if ( GlobalVars.ticker.mode.name == "revolution" || GlobalVars.ticker.mode.name == "AI malfunction" || GlobalVars.ticker.mode.name == "confliction" ) {
				choice = Interface13.Input( "The shuttle will just return if you call it. Call anyway?", null, null, null, new ByTable(new object [] { "Confirm", "Cancel" }), InputType.Any );

				if ( choice == "Confirm" ) {
					GlobalVars.emergency_shuttle.fake_recall = Rand13.Int( 300, 500 );
				} else {
					return;
				}
			}
			GlobalVars.emergency_shuttle.incall();
			GlobalFuncs.captain_announce( "The emergency shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes." );
			GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/shuttlecalled.ogg" ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "CSHUT" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " admin-called the emergency shuttle." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " admin-called the emergency shuttle.</span>" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Change View Range", desc: "switches between 1x and custom views", group: "Special Verbs" )]
		public void toggle_view_range(  ) {
			
			if ( this.view == Game13.view ) {
				this.view = Convert.ToInt32( Interface13.Input( "Select view range:", "FUCK YE", 7, null, new ByTable(new object [] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 128 }), InputType.Any ) );
			} else {
				this.view = Convert.ToInt32( Game13.view );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " changed their view range to " + this.view + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "CVRA" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Check Mob Contents", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_check_contents( dynamic L = null ) {
			dynamic content = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_contents_in_object( L ) )) {
				content = _a;
				

				if ( Lang13.Bool( content ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( content ).str( " " ).item( content ).ToString() );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "CC" );
			return;
		}

		// Function from file: randomverbs.dm
		public void update_world(  ) {
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Gibself", group: "Fun" )]
		public void cmd_admin_gib_self(  ) {
			string confirm = null;

			confirm = Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" );

			if ( confirm == "Yes" ) {
				
				if ( this.mob is Mob_Dead_Observer ) {
					return;
				} else {
					this.mob.gib();
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used gibself." );
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " used gibself.</span>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "GIBS" );
			}
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Gib", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_gib( dynamic M = null ) {
			string confirm = null;

			
			if ( !GlobalFuncs.check_rights( 10 ) ) {
				return;
			}
			confirm = Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}

			if ( !Lang13.Bool( M ) ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has gibbed " + GlobalFuncs.key_name( M ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has gibbed " + GlobalFuncs.key_name_admin( M ) );

			if ( M is Mob_Dead_Observer ) {
				GlobalFuncs.gibs( M.loc, M.viruses );
				return;
			}
			((Mob)M).gib();
			GlobalFuncs.feedback_add_details( "admin_verb", "GIB" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "EM Pulse", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public void cmd_admin_emp( dynamic O = null ) {
			dynamic heavy = null;
			dynamic light = null;

			
			if ( !GlobalFuncs.check_rights( 40 ) ) {
				return;
			}
			heavy = Interface13.Input( "Range of heavy pulse.", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( heavy == null ) {
				return;
			}
			light = Interface13.Input( "Range of light pulse.", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( light == null ) {
				return;
			}

			if ( Lang13.Bool( heavy ) || Lang13.Bool( light ) ) {
				GlobalFuncs.empulse( O, heavy, light );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created an EM Pulse (" + heavy + "," + light + ") at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created an EM PUlse (" + heavy + "," + light + ") at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.feedback_add_details( "admin_verb", "EMP" );
				return;
			} else {
				return;
			}
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Explosion", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public void cmd_admin_explosion( dynamic O = null ) {
			dynamic devastation = null;
			dynamic heavy = null;
			dynamic light = null;
			dynamic flash = null;

			
			if ( !GlobalFuncs.check_rights( 40 ) ) {
				return;
			}
			devastation = Interface13.Input( "Range of total devastation. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( devastation == null ) {
				return;
			}
			heavy = Interface13.Input( "Range of heavy impact. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( heavy == null ) {
				return;
			}
			light = Interface13.Input( "Range of light impact. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( light == null ) {
				return;
			}
			flash = Interface13.Input( "Range of flash. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( flash == null ) {
				return;
			}

			if ( devastation != -1 || heavy != -1 || light != -1 || flash != -1 ) {
				
				if ( Convert.ToDouble( devastation ) > 20 || Convert.ToDouble( heavy ) > 20 || Convert.ToDouble( light ) > 20 ) {
					
					if ( Interface13.Alert( this, "Are you sure you want to do this? It will laaag.", "Confirmation", "Yes", "No" ) == "No" ) {
						return;
					}
				}
				GlobalFuncs.explosion( O, devastation, heavy, light, flash );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created an explosion (" + devastation + "," + heavy + "," + light + "," + flash + ") at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created an explosion (" + devastation + "," + heavy + "," + light + "," + flash + ") at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.feedback_add_details( "admin_verb", "EXPL" );
				return;
			} else {
				return;
			}
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "List free slots", group: "Admin" )]
		public void cmd_admin_list_open_jobs(  ) {
			Job job = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( GlobalVars.job_master != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.job_master.occupations, typeof(Job) )) {
					job = _a;
					
					GlobalFuncs.to_chat( this, "" + job.title + ": " + job.total_positions );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "LFS" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Delete", group: "Admin" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public void cmd_admin_delete( dynamic O = null ) {
			Tile T = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( Interface13.Alert( this, "Are you sure you want to delete:\n" + O + "\nat (" + O.x + ", " + O.y + ", " + O.z + ")?", "Confirmation", "Yes", "No" ) == "Yes" ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted " + O + " at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " deleted " + O + " at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.feedback_add_details( "admin_verb", "DEL" );

				if ( O is Tile ) {
					T = O;
					T.ChangeTurf( GlobalFuncs.get_base_turf( T.z ) );
				} else {
					GlobalFuncs.qdel( O );
				}
			}
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Create Command Report", group: "Special Verbs" )]
		public void cmd_admin_create_centcom_report(  ) {
			dynamic input = null;
			dynamic customname = null;
			Obj_Machinery_Computer_Communications C = null;
			Obj_Item_Weapon_Paper P = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			input = Interface13.Input( Task13.User, "Please enter anything you want. Anything. Serious.", "What?", "", null, InputType.Null | InputType.StrMultiline );
			customname = Interface13.Input( Task13.User, "Pick a title for the report.", "Title", null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( input ) ) {
				return;
			}

			if ( !Lang13.Bool( customname ) ) {
				customname = "Nanotrasen Update";
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_Communications) )) {
				C = _a;
				

				if ( !( ( C.stat & 3 ) != 0 ) ) {
					P = new Obj_Item_Weapon_Paper( C.loc );
					P.name = "'" + GlobalFuncs.command_name() + " Update.'";
					P.info = input;
					P.update_icon();
					C.messagetitle.Add( "" + GlobalFuncs.command_name() + " Update" );
					C.messagetext.Add( P.info );
				}
			}

			switch ((string)( Interface13.Alert( "Should this be announced to the general population?", null, "Yes", "No" ) )) {
				case "Yes":
					GlobalFuncs.command_alert( input, customname );
					break;
				case "No":
					GlobalFuncs.to_chat( typeof(Game13), "<span class='warning'>New Nanotrasen Update available at all communication consoles.</span>" );
					break;
			}
			GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/commandreport.ogg", null, null, null, 60 ) );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has created a command report: " + input );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has created a command report" );
			GlobalFuncs.feedback_add_details( "admin_verb", "CCR" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Rejuvenate", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_rejuvenate( Mob_Living M = null ) {
			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( !( this.mob != null ) ) {
				return;
			}

			if ( !( M is Mob_Living ) ) {
				Interface13.Alert( "Cannot revive a ghost" );
				return;
			}

			if ( GlobalVars.config.allow_admin_rev ) {
				M.revive( false );
				M.suiciding = false;
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " healed / revived " + GlobalFuncs.key_name( M ) );
				GlobalFuncs.message_admins( "<span class='warning'>Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " healed / revived " + GlobalFuncs.key_name_admin( M ) + "!</span>" );
			} else {
				Interface13.Alert( "Admin revive disabled" );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "REJU" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Add Custom AI law", group: "Fun" )]
		public void cmd_admin_add_freeform_ai_law(  ) {
			dynamic input = null;
			Mob_Living_Silicon_Ai M = null;
			Mob_Living_Silicon_Ai O = null;
			string show_log = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			input = Interface13.Input( Task13.User, "Please enter anything you want the AI to do. Anything. Serious.", "What?", "", null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( input ) ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon_Ai) )) {
				M = _b;
				

				if ( M.stat == 2 ) {
					GlobalFuncs.to_chat( Task13.User, "Upload failed. No signal is being detected from the AI." );
				} else if ( M.see_in_dark == 0 ) {
					GlobalFuncs.to_chat( Task13.User, "Upload failed. Only a faint signal is being detected from the AI, and it is not responding to our requests. It may be low on power." );
				} else {
					M.add_ion_law( input );

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon_Ai) )) {
						O = _a;
						
						GlobalFuncs.to_chat( O, "<span class='danger'></span>" + input + "<span class='warning'>...LAWS UPDATED</span>" );
					}
				}
			}
			GlobalFuncs.log_admin( "Admin " + GlobalFuncs.key_name( Task13.User ) + " has added a new AI law - " + input );
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has added a new AI law - " + input );
			show_log = Interface13.Alert( this, "Show ion message?", "Message", "Yes", "No" );

			if ( show_log == "Yes" ) {
				GlobalFuncs.command_alert( "Ion storm detected near the station. Please check all AI-controlled equipment for errors.", "Anomaly Alert" );
				GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/ionstorm.ogg" ) );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "IONC" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Respawn Character", desc: "Respawn a person that has been gibbed/dusted/killed. They must be a ghost for this to work and preferably should not have a body to go back into.", group: "Special Verbs" )]
		public dynamic respawn_character(  ) {
			string input = null;
			Mob_Dead_Observer G_found = null;
			Mob_Dead_Observer G = null;
			dynamic T = null;
			Mob_Living_Carbon_Alien_Humanoid new_xeno = null;
			Mob_Living_Carbon_Monkey new_monkey = null;
			dynamic new_character = null;
			Data_Record record_found = null;
			string id = null;
			Preferences A = null;
			dynamic newSE = null;
			dynamic newUI = null;
			string admin = null;
			string player_key = null;
			dynamic synd_spawn = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return null;
			}
			input = String13.CKey( Interface13.Input( this, "Please specify which key will be respawned.", "Key", "", null, InputType.Any ) );

			if ( !Lang13.Bool( input ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
				G = _a;
				

				if ( G.ckey == input ) {
					G_found = G;
					break;
				}
			}

			if ( !( G_found != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>There is no active key like that in the game or the person is not currently a ghost.</font>" );
				return null;
			}

			if ( G_found.mind != null && !G_found.mind.active ) {
				
				if ( G_found.mind.assigned_role == "Alien" ) {
					
					if ( Interface13.Alert( "This character appears to have been an alien. Would you like to respawn them as such?", null, "Yes", "No" ) == "Yes" ) {
						T = null;

						if ( GlobalVars.xeno_spawn.len != 0 ) {
							T = Rand13.PickFromTable( GlobalVars.xeno_spawn );
						} else {
							T = Rand13.PickFromTable( GlobalVars.latejoin );
						}
						new_xeno = null;

						switch ((string)( G_found.mind.special_role )) {
							case "Hunter":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Hunter( T );
								break;
							case "Sentinel":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Sentinel( T );
								break;
							case "Drone":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Drone( T );
								break;
							case "Queen":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Queen( T );
								break;
							default:
								GlobalFuncs.create_xeno( G_found.ckey );
								return null;
								break;
						}
						G_found.mind.transfer_to( new_xeno );
						new_xeno.key = G_found.key;
						GlobalFuncs.to_chat( new_xeno, "You have been fully respawned. Enjoy the game." );
						GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has respawned " + new_xeno.key + " as a filthy xeno.</span>" );
						return null;
					}
				} else if ( String13.FindIgnoreCase( G_found.real_name, "monkey", 1, 0 ) != 0 ) {
					
					if ( Interface13.Alert( "This character appears to have been a monkey. Would you like to respawn them as such?", null, "Yes", "No" ) == "Yes" ) {
						new_monkey = new Mob_Living_Carbon_Monkey( Rand13.PickFromTable( GlobalVars.latejoin ) );
						G_found.mind.transfer_to( new_monkey );
						new_monkey.key = G_found.key;
						GlobalFuncs.to_chat( new_monkey, "You have been fully respawned. Enjoy the game." );
						GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has respawned " + new_monkey.key + " as a filthy xeno.</span>" );
						return null;
					}
				}
			}
			new_character = new Mob_Living_Carbon_Human( Rand13.PickFromTable( GlobalVars.latejoin ) );
			record_found = null;

			if ( G_found.mind != null && !G_found.mind.active ) {
				id = Num13.Md5( "" + G_found.real_name + G_found.mind.assigned_role );
				record_found = GlobalFuncs.find_record( "id", id, GlobalVars.data_core.locked );
			}

			if ( record_found != null ) {
				new_character.real_name = record_found.fields["name"];
				((Game_Data)new_character).setGender( record_found.fields["sex"] );
				new_character.age = record_found.fields["age"];
				new_character.b_type = record_found.fields["b_type"];
			} else {
				((Game_Data)new_character).setGender( Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE }) );
				A = new Preferences();
				A.randomize_appearance_for( new_character );
				new_character.real_name = G_found.real_name;
			}

			if ( !Lang13.Bool( new_character.real_name ) ) {
				((Mob)new_character).generate_name();
			}
			new_character.name = new_character.real_name;

			if ( G_found.mind != null && !G_found.mind.active ) {
				G_found.mind.transfer_to( new_character );
				new_character.mind.special_verbs = new ByTable();
			} else {
				((Mob)new_character).mind_initialize();
			}

			if ( !Lang13.Bool( new_character.mind.assigned_role ) ) {
				new_character.mind.assigned_role = "Assistant";
			}

			if ( record_found != null ) {
				new_character.dna = new Dna();
				new_character.dna.unique_enzymes = record_found.fields["b_dna"];
				newSE = record_found.fields["enzymes"];
				newUI = record_found.fields["identity"];
				new_character.dna.SE = newSE.Copy();
				((Dna)new_character.dna).UpdateSE();
				((Mob)new_character).UpdateAppearance( newUI.Copy() );
			} else {
				((Dna)new_character.dna).ready_dna( new_character );
			}
			new_character.key = G_found.key;
			admin = GlobalFuncs.key_name_admin( this );
			player_key = G_found.key;

			dynamic _d = new_character.mind.special_role; // Was a switch-case, sorry for the mess.
			if ( _d=="traitor" ) {
				GlobalVars.job_master.EquipRank( new_character, new_character.mind.assigned_role, true );
				((GameMode)GlobalVars.ticker.mode).equip_traitor( new_character );
			} else if ( _d=="Wizard" ) {
				new_character.loc = Rand13.PickFromTable( GlobalVars.wizardstart );
				((GameMode)GlobalVars.ticker.mode).equip_wizard( new_character );
			} else if ( _d=="Syndicate" ) {
				synd_spawn = Lang13.FindObj( "landmark*Syndicate-Spawn" );

				if ( Lang13.Bool( synd_spawn ) ) {
					new_character.loc = GlobalFuncs.get_turf( synd_spawn );
				}
				Lang13.Call( typeof(GameMode).GetMethod( "equip_syndicate" ), new_character );
			} else if ( _d=="Death Commando" ) {
				((Mob_Living_Carbon_Human)new_character).equip_death_commando();
				new_character.v_internal = new_character.s_store;
				((dynamic)new_character.internals).icon_state = "internal1";
			} else {
				
				dynamic _c = new_character.mind.assigned_role; // Was a switch-case, sorry for the mess.
				if ( _c=="AI" ) {
					new_character = ((Mob)new_character).AIize();

					if ( new_character.mind.special_role == "traitor" ) {
						Lang13.Call( typeof(GameMode).GetMethod( "add_law_zero" ), new_character );
					}
				} else if ( _c=="Cyborg" ) {
					new_character = ((Mob_Living_Carbon_Human)new_character).Robotize();

					if ( new_character.mind.special_role == "traitor" ) {
						Lang13.Call( typeof(GameMode).GetMethod( "add_law_zero" ), new_character );
					}
				} else {
					GlobalVars.job_master.EquipRank( new_character, new_character.mind.assigned_role, true );
				}
			}

			if ( !( new_character is Mob_Living_Silicon ) ) {
				
				if ( !( record_found != null ) && new_character.mind.assigned_role != "MODE" ) {
					
					if ( Interface13.Alert( new_character, "Warning: No data core entry detected. Would you like to announce the arrival of this character by adding them to various databases, such as medical records?", null, "No", "Yes" ) == "Yes" ) {
						GlobalVars.data_core.manifest_inject( new_character );
					}

					if ( Interface13.Alert( new_character, "Would you like an active AI to announce this character?", null, "No", "Yes" ) == "Yes" ) {
						GlobalFuncs.AnnounceArrival( new_character, new_character.mind.assigned_role );
					}
				}
			}
			GlobalFuncs.message_admins( "<span class='notice'>" + admin + " has respawned " + player_key + " as " + new_character.real_name + ".</span>" );
			GlobalFuncs.to_chat( new_character, "You have been fully respawned. Enjoy the game." );
			GlobalFuncs.feedback_add_details( "admin_verb", "RSPCH" );
			return new_character;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Toggle antagHUD Restrictions", desc: "Restricts players that have used antagHUD from being able to join this round.", group: "Server" )]
		public void toggle_antagHUD_restrictions(  ) {
			string action = null;
			Mob_Dead_Observer g = null;
			Mob_Dead_Observer g2 = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
			}
			action = "";

			if ( GlobalVars.config.antag_hud_restricted ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.get_ghosts(), typeof(Mob_Dead_Observer) )) {
					g = _a;
					
					GlobalFuncs.to_chat( g, "<span class='notice'><B>The administrator has lifted restrictions on joining the round if you use AntagHUD</B></span>" );
				}
				action = "lifted restrictions";
				GlobalVars.config.antag_hud_restricted = false;
				GlobalFuncs.to_chat( this, "<span class='notice'><B>AntagHUD restrictions have been lifted</B></span>" );
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( this.get_ghosts(), typeof(Mob_Dead_Observer) )) {
					g2 = _b;
					
					GlobalFuncs.to_chat( g2, "<span class='danger'>The administrator has placed restrictions on joining the round if you use AntagHUD</span>" );
					GlobalFuncs.to_chat( g2, "<span class='danger'>Your AntagHUD has been disabled, you may choose to re-enabled it but will be under restrictions </span>" );
					g2.antagHUD = false;
					g2.has_enabled_antagHUD = 0;
				}
				action = "placed restrictions";
				GlobalVars.config.antag_hud_restricted = true;
				GlobalFuncs.to_chat( this, "<span class='danger'>AntagHUD restrictions have been enabled</span>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has " + action + " on joining the round if they use AntagHUD" );
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has " + action + " on joining the round if they use AntagHUD" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Toggle antagHUD usage", desc: "Toggles antagHUD usage for observers", group: "Server" )]
		public void toggle_antagHUD_use(  ) {
			string action = null;
			Mob_Dead_Observer g = null;
			Mob_Dead_Observer g2 = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
			}
			action = "";

			if ( GlobalVars.config.antag_hud_allowed ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.get_ghosts(), typeof(Mob_Dead_Observer) )) {
					g = _a;
					

					if ( !( g.client.holder != null ) ) {
						g.verbs.Remove( typeof(Mob_Dead_Observer).GetMethod( "toggle_antagHUD" ) );
					}

					if ( g.antagHUD ) {
						g.antagHUD = false;
						g.has_enabled_antagHUD = 2;
						GlobalFuncs.to_chat( g, "<span class='danger'>The Administrator has disabled AntagHUD </span>" );
					}
				}
				GlobalVars.config.antag_hud_allowed = false;
				GlobalFuncs.to_chat( this, "<span class='danger'>AntagHUD usage has been disabled</span>" );
				action = "disabled";
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( this.get_ghosts(), typeof(Mob_Dead_Observer) )) {
					g2 = _b;
					

					if ( !( g2.client.holder != null ) ) {
						g2.verbs.Add( typeof(Mob_Dead_Observer).GetMethod( "toggle_antagHUD" ) );
						GlobalFuncs.to_chat( g2, "<span class='notice'><B>The Administrator has enabled AntagHUD </B></span>" );
					}
				}
				GlobalVars.config.antag_hud_allowed = true;
				action = "enabled";
				GlobalFuncs.to_chat( this, "<span class='notice'><B>AntagHUD usage has been enabled</B></span>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has " + action + " antagHUD usage for observers" );
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has " + action + " antagHUD usage for observers" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Allow player to respawn", desc: "Let's the player bypass the 30 minute wait to respawn or allow them to re-enter their corpse.", group: "Special Verbs" )]
		public void allow_character_respawn(  ) {
			ByTable ghosts = null;
			dynamic target = null;
			Mob_Dead_Observer G = null;
			string response = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
			}
			ghosts = this.get_ghosts( true, 1 );
			target = Interface13.Input( "Please, select a ghost!", "COME BACK TO LIFE!", null, null, ghosts, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( target ) ) {
				GlobalFuncs.to_chat( this, "Hrm, appears you didn't select a ghost" );
				return;
			}
			G = ghosts[target];

			if ( G.has_enabled_antagHUD != 0 && GlobalVars.config.antag_hud_restricted ) {
				response = Interface13.Alert( this, "Are you sure you wish to allow this individual to play?", "Ghost has used AntagHUD", "Yes", "No" );

				if ( response == "No" ) {
					return;
				}
			}
			G.timeofdeath = -19999;
			G.has_enabled_antagHUD = 2;
			G.can_reenter_corpse = 1;
			G.show_message( "<span class='notice'><B>You may now respawn.  You should roleplay as if you learned nothing about the round during your time with the dead.</B></span>", 1 );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " allowed " + GlobalFuncs.key_name( G ) + " to bypass the 30 minute respawn limit" );
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " allowed " + GlobalFuncs.key_name_admin( G ) + " to bypass the 30 minute respawn limit" );
			return;
		}

		// Function from file: randomverbs.dm
		public ByTable get_ghosts( bool? notify = null, int? what = null ) {
			notify = notify ?? false;
			what = what ?? 2;

			ByTable mobs = null;
			ByTable ghosts = null;
			dynamic sortmob = null;
			Mob_Dead_Observer M = null;
			dynamic M2 = null;
			dynamic name = null;

			mobs = new ByTable();
			ghosts = new ByTable();
			sortmob = GlobalFuncs.sortNames( GlobalVars.mob_list );

			foreach (dynamic _a in Lang13.Enumerate( sortmob, typeof(Mob_Dead_Observer) )) {
				M = _a;
				
				mobs.Add( M );
				GlobalVars.any = true;
			}

			if ( !GlobalVars.any ) {
				
				if ( notify == true ) {
					GlobalFuncs.to_chat( this, "There doesn't appear to be any ghosts for you to select." );
				}
				return null;
			}

			foreach (dynamic _b in Lang13.Enumerate( mobs )) {
				M2 = _b;
				
				name = M2.name;
				ghosts[name] = M2;
			}

			if ( what == 1 ) {
				return ghosts;
			} else {
				return mobs;
			}
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Add Random AI Law", group: "Fun" )]
		public void cmd_admin_add_random_ai_law(  ) {
			string confirm = null;
			string show_log = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			confirm = Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has added a random AI law." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has added a random AI law." );
			show_log = Interface13.Alert( this, "Show ion message?", "Message", "Yes", "No" );

			if ( show_log == "Yes" ) {
				GlobalFuncs.command_alert( "Ion storm detected near the station. Please check all AI-controlled equipment for errors.", "Anomaly Alert" );
				GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/ionstorm.ogg" ) );
			}
			GlobalFuncs.generate_ion_law();
			GlobalFuncs.feedback_add_details( "admin_verb", "ION" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Godmode", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_godmode( dynamic M = null ) {
			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			M.status_flags ^= 4096;
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Toggled " + ( ( M.status_flags & 4096 ) != 0 ? "ON" : "OFF" ) + "</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has toggled " + GlobalFuncs.key_name( M ) + "'s nodamage to " + ( ( M.status_flags & 4096 ) != 0 ? "On" : "Off" ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has toggled " + GlobalFuncs.key_name_admin( M ) + "'s nodamage to " + ( ( M.status_flags & 4096 ) != 0 ? "On" : "Off" ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "GOD" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Local Narrate", group: "Special Verbs" )]
		public void cmd_admin_local_narrate(  ) {
			dynamic msg = null;
			dynamic M = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			msg = Interface13.Input( "Message:", "Enter the text you wish to appear to your target:", null, null, null, InputType.Str );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
				M = _a;
				

				if ( GlobalVars.player_list.Contains( M ) ) {
					GlobalFuncs.to_chat( M, msg );
				}
			}
			GlobalFuncs.log_admin( "LocalNarrate: " + GlobalFuncs.key_name( Task13.User ) + " at " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( Task13.User ) ) + ": " + msg );
			GlobalFuncs.message_admins( "<span class='notice'><B>DirectNarrate: " + GlobalFuncs.key_name( Task13.User ) + " at " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( Task13.User ) ) + ": " + msg + "<BR></B></span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "LIRN" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Direct Narrate", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob )]
		public void cmd_admin_direct_narrate( dynamic M = null ) {
			dynamic msg = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( !Lang13.Bool( M ) ) {
				M = Interface13.Input( "Direct narrate to who?", "Active Players", null, null, GlobalVars.player_list, InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( M ) ) {
				return;
			}
			msg = Interface13.Input( "Message:", "Enter the text you wish to appear to your target:", null, null, null, InputType.Str );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			GlobalFuncs.to_chat( M, msg );
			GlobalFuncs.log_admin( "DirectNarrate: " + GlobalFuncs.key_name( Task13.User ) + " to (" + M.name + "/" + M.key + "): " + msg );
			GlobalFuncs.message_admins( "<span class='notice'><B>DirectNarrate: " + GlobalFuncs.key_name( Task13.User ) + " to (" + M.name + "/" + M.key + "): " + msg + "<BR></B></span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "DIRN" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Global Narrate", group: "Special Verbs" )]
		public void cmd_admin_world_narrate(  ) {
			dynamic msg = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			msg = Interface13.Input( "Message:", "Enter the text you wish to appear to everyone:", null, null, null, InputType.Str );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			GlobalFuncs.to_chat( typeof(Game13), "" + msg );
			GlobalFuncs.log_admin( "GlobalNarrate: " + GlobalFuncs.key_name( Task13.User ) + " : " + msg );
			GlobalFuncs.message_admins( "<span class='notice'><B>GlobalNarrate: " + GlobalFuncs.key_name_admin( Task13.User ) + " : " + msg + "<BR></B></span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "GLN" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Subtle Message", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_subtle_message( dynamic M = null ) {
			dynamic msg = null;

			
			if ( !( M is Mob ) ) {
				return;
			}

			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			msg = Interface13.Input( "Message:", "Subtle PM to " + M.key, null, null, null, InputType.Str );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}

			if ( Task13.User != null ) {
				
				if ( Task13.User.client != null ) {
					
					if ( Task13.User.client.holder != null ) {
						((Mob)M).get_subtle_message( msg );
					}
				}
			}
			GlobalFuncs.log_admin( "SubtlePM: " + GlobalFuncs.key_name( Task13.User ) + " -> " + GlobalFuncs.key_name( M ) + " : " + msg );
			GlobalFuncs.message_admins( "<span class='notice'><B>SubtleMessage: " + GlobalFuncs.key_name_admin( Task13.User ) + " -> " + GlobalFuncs.key_name_admin( M ) + " : " + msg + "</B></span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "SMS" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Prison", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_prison( Mob M = null ) {
			Obj_Item W = null;
			Mob prisoner = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( M is Mob ) {
				
				if ( M is Mob_Living_Silicon_Ai ) {
					Interface13.Alert( "The AI can't be sent to prison you jerk!" );
					return;
				}

				foreach (dynamic _a in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					W = _a;
					
					M.drop_from_inventory( W );
				}
				M.Paralyse( 5 );
				Task13.Sleep( 5 );
				M.loc = Rand13.PickFromTable( GlobalVars.prisonwarp );

				if ( M is Mob_Living_Carbon_Human ) {
					prisoner = M;
					prisoner.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Prisoner( prisoner ), 14 );
					prisoner.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Orange( prisoner ), 12 );
				}
				Task13.Schedule( 50, (Task13.Closure)(() => {
					GlobalFuncs.to_chat( M, "<span class='warning'>You have been sent to the prison station!</span>" );
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " sent " + GlobalFuncs.key_name( M ) + " to the prison station." );
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " sent " + GlobalFuncs.key_name_admin( M ) + " to the prison station.</span>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "PRISON" );
			}
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Drop Everything" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_drop_everything( dynamic M = null ) {
			string confirm = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			confirm = Interface13.Alert( this, "Make " + M + " drop everything?", "Message", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}
			((Mob)M).drop_all();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " drop everything!" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + GlobalFuncs.key_name_admin( M ) + " drop everything!" );
			GlobalFuncs.feedback_add_details( "admin_verb", "DEVR" );
			return;
		}

		// Function from file: profiling.dm
		[VerbInfo( name: "Disable all Vents", group: "Debug" )]
		public void disable_vents(  ) {
			GlobalVars.disable_vents = !GlobalVars.disable_vents;
			GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'></span>" + "Vents" + ( " are now <b>" + ( GlobalVars.disable_vents ? "OFF" : "ON" ) + "</b>." ) );
			return;
		}

		// Function from file: profiling.dm
		[VerbInfo( name: "Disable all Scrubbers", group: "Debug" )]
		public void disable_scrubbers(  ) {
			GlobalVars.disable_scrubbers = !GlobalVars.disable_scrubbers;
			GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'></span>" + "Scrubbers" + ( " are now <b>" + ( GlobalVars.disable_scrubbers ? "OFF" : "ON" ) + "</b>." ) );
			return;
		}

		// Function from file: playsound.dm
		[VerbInfo( name: "Play Local Sound", group: "Fun" )]
		[VerbArg( 1, InputType.Sound )]
		public void play_local_sound( Sound S = null ) {
			
			if ( !GlobalFuncs.check_rights( 2048 ) ) {
				return;
			}

			if ( !( S is Sound ) ) {
				S = new Sound( S );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " played a local sound " + S );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " played a local sound " + S );
			S.status = 20;
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this.mob ), S, 50, 0, 0 );
			GlobalFuncs.feedback_add_details( "admin_verb", "PLS" );
			return;
		}

		// Function from file: playsound.dm
		[VerbInfo( name: "Play Global Sound", group: "Fun" )]
		[VerbArg( 1, InputType.Sound )]
		public void play_sound( dynamic S = null ) {
			Sound uploaded_sound = null;
			dynamic M = null;

			
			if ( !GlobalFuncs.check_rights( 2048 ) ) {
				return;
			}
			uploaded_sound = new Sound( S, false, true, 777 );
			uploaded_sound.status = 20;
			uploaded_sound.priority = 250;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " played sound " + S );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " played sound " + S );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( !Lang13.Bool( M.client ) ) {
					continue;
				}

				if ( Lang13.Bool( M.client.prefs.toggles & 2 ) ) {
					GlobalFuncs.to_chat( M, uploaded_sound );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "PGS" );
			return;
		}

		// Function from file: onlyone.dm
		public void only_one(  ) {
			Mob_Living_Carbon_Human H = null;
			Objective_Hijack hijack_objective = null;
			int obj_count = 0;
			Objective OBJ = null;
			Obj_Item I = null;
			Obj_Item_Weapon_Card_Id W = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "The game hasn't started yet!" );
				return;
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				H = _c;
				

				if ( H.stat == 2 || !( H.client != null ) ) {
					continue;
				}

				if ( GlobalFuncs.is_special_character( H ) != 0 ) {
					continue;
				}
				GlobalVars.ticker.mode.traitors.Add( H.mind );
				H.mind.special_role = "traitor";
				hijack_objective = new Objective_Hijack();
				hijack_objective.owner = H.mind;
				H.mind.objectives.Add( hijack_objective );
				GlobalFuncs.to_chat( H, "<B>You are the traitor.</B>" );
				obj_count = 1;

				foreach (dynamic _a in Lang13.Enumerate( H.mind.objectives, typeof(Objective) )) {
					OBJ = _a;
					
					GlobalFuncs.to_chat( H, "<B>Objective #" + obj_count + "</B>: " + OBJ.explanation_text );
					obj_count++;
				}

				foreach (dynamic _b in Lang13.Enumerate( H, typeof(Obj_Item) )) {
					I = _b;
					

					if ( I is Obj_Item_Weapon_Implant ) {
						continue;
					}
					Lang13.Delete( I );
					I = null;
				}
				H.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Kilt( H ), 14 );
				H.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Heads_Captain(  ), 8 );
				H.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Beret( H ), 11 );
				H.equip_to_slot_or_del( new Obj_Item_Weapon_Claymore( H ), 4 );
				H.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Combat( H ), 12 );
				H.equip_to_slot_or_del( new Obj_Item_Weapon_Pinpointer( H.loc ), 15 );
				W = new Obj_Item_Weapon_Card_Id( H );
				W.name = "" + H.real_name + "'s ID Card";
				W.icon_state = "centcom";
				W.access = GlobalFuncs.get_all_accesses();
				W.access += GlobalFuncs.get_all_centcom_access();
				W.assignment = "Highlander";
				W.registered_name = H.real_name;
				H.equip_to_slot_or_del( W, 7 );
			}
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " used THERE CAN BE ONLY ONE!</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used there can be only one." );
			return;
		}

		// Function from file: one_click_antag.dm
		[VerbInfo( name: "Create Antagonist", desc: "Auto-create an antagonist of your choice", group: "Admin" )]
		public void one_click_antag(  ) {
			
			if ( this.holder != null ) {
				this.holder.one_click_antag();
			}
			return;
		}

		// Function from file: modifyvariables.dm
		public void modify_variables( dynamic O = null, string param_var_name = null, bool? autodetect_class = null ) {
			autodetect_class = autodetect_class ?? false;

			ByTable locked = null;
			dynamic p = null;
			dynamic _class = null;
			dynamic variable = null;
			string var_value = null;
			dynamic names = null;
			dynamic V = null;
			dynamic dir = null;
			string __default = null;
			string original_name = null;
			dynamic var_new = null;
			dynamic var_new2 = null;
			dynamic var_new3 = null;
			dynamic var_new4 = null;
			dynamic var_new5 = null;
			dynamic M = null;
			dynamic var_new6 = null;
			dynamic var_new7 = null;
			dynamic var_new8 = null;
			dynamic var_new9 = null;
			dynamic var_new10 = null;
			dynamic var_new11 = null;

			
			if ( !GlobalFuncs.check_rights( 1024 ) ) {
				return;
			}
			locked = new ByTable(new object [] { "vars", "client", "firemut", "ishulk", "telekinesis", "xray", "virus", "cuffed", "ka", "last_eaten", "icon", "icon_state", "mutantrace" });

			if ( this.holder != null && !Lang13.Bool( this.holder.rights & 128 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.forbidden_varedit_object_types )) {
					p = _a;
					

					if ( Lang13.Bool( p.IsInstanceOfType( O ) ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>It is forbidden to edit this object's variables.</span>" );
						return;
					}
				}
			}
			_class = null;
			variable = null;
			var_value = null;

			if ( Lang13.Bool( param_var_name ) ) {
				
				if ( O.vars.Contains( !Lang13.Bool( param_var_name ) ) ) {
					GlobalFuncs.to_chat( this, "A variable with this name (" + param_var_name + ") doesn't exist in this atom (" + O + ")" );
					return;
				}

				if ( param_var_name == "holder" || locked.Contains( param_var_name ) ) {
					
					if ( !GlobalFuncs.check_rights( 32 ) ) {
						return;
					}
				}
				variable = param_var_name;
				var_value = O.vars[variable];

				if ( autodetect_class == true ) {
					
					if ( var_value == null ) {
						GlobalFuncs.to_chat( Task13.User, "Unable to determine variable type." );
						_class = null;
						autodetect_class = null;
					} else if ( Lang13.Bool( Lang13.IsNumber( var_value ) ) ) {
						GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>NUM</b>." );
						_class = "num";
						this.dir = 1;
					} else if ( var_value is string ) {
						GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>TEXT</b>." );
						_class = "text";
					} else if ( Lang13.Bool( Lang13.IsLocation( var_value ) ) ) {
						GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>REFERENCE</b>." );
						_class = "reference";
					} else if ( var_value is Icon ) {
						GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>ICON</b>." );
						var_value = new Txt().icon( var_value ).ToString();
						_class = "icon";
					} else if ( var_value is Ent_Static || var_value is Game_Data ) {
						GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>TYPE</b>." );
						_class = "type";
					} else if ( var_value is ByTable ) {
						GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>LIST</b>." );
						_class = "list";
					} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( var_value ) ) ) {
						GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>CLIENT</b>." );
						_class = "cancel";
					} else {
						GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>FILE</b>." );
						_class = "file";
					}
				}
			} else {
				names = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( O.vars )) {
					V = _b;
					
					names += V;
				}
				names = GlobalFuncs.sortList( names );
				variable = Interface13.Input( "Which var?", "Var", null, null, names, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( variable ) ) {
					return;
				}
				var_value = O.vars[variable];

				if ( variable == "holder" || locked.Contains( variable ) ) {
					
					if ( !GlobalFuncs.check_rights( 32 ) ) {
						return;
					}
				}
			}

			if ( !( autodetect_class == true ) ) {
				dir = null;
				__default = null;

				if ( var_value == null ) {
					GlobalFuncs.to_chat( Task13.User, "Unable to determine variable type." );
				} else if ( Lang13.Bool( Lang13.IsNumber( var_value ) ) ) {
					GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>NUM</b>." );
					__default = "num";
					dir = 1;
				} else if ( var_value is string ) {
					GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>TEXT</b>." );
					__default = "text";
				} else if ( Lang13.Bool( Lang13.IsLocation( var_value ) ) ) {
					GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>REFERENCE</b>." );
					__default = "reference";
				} else if ( var_value is Icon ) {
					GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>ICON</b>." );
					var_value = new Txt().icon( var_value ).ToString();
					__default = "icon";
				} else if ( var_value is Ent_Static || var_value is Game_Data ) {
					GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>TYPE</b>." );
					__default = "type";
				} else if ( var_value is ByTable ) {
					GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>LIST</b>." );
					__default = "list";
				} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( var_value ) ) ) {
					GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>CLIENT</b>." );
					__default = "cancel";
				} else {
					GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>FILE</b>." );
					__default = "file";
				}
				GlobalFuncs.to_chat( Task13.User, "Variable contains: " + var_value );

				if ( Lang13.Bool( dir ) ) {
					
					switch ((string)( var_value )) {
						case 1:
							dir = "NORTH";
							break;
						case 2:
							dir = "SOUTH";
							break;
						case 4:
							dir = "EAST";
							break;
						case 8:
							dir = "WEST";
							break;
						case 5:
							dir = "NORTHEAST";
							break;
						case 6:
							dir = "SOUTHEAST";
							break;
						case 9:
							dir = "NORTHWEST";
							break;
						case 10:
							dir = "SOUTHWEST";
							break;
						default:
							dir = null;
							break;
					}

					if ( Lang13.Bool( dir ) ) {
						GlobalFuncs.to_chat( Task13.User, "If a direction, direction is: " + dir );
					}
				}

				if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
					_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { 
						"text", 
						"num", 
						"type", 
						"reference", 
						"mob reference", 
						"icon", 
						"file", 
						"list", 
						"edit referenced object", 
						"restore to default", 
						"marked datum (" + this.holder.marked_datum.type + ")"
					 }), InputType.Null | InputType.Any );
				} else {
					_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "list", "edit referenced object", "restore to default" }), InputType.Null | InputType.Any );
				}

				if ( !Lang13.Bool( _class ) ) {
					return;
				}
			}
			original_name = null;

			if ( !( O is Ent_Static ) ) {
				original_name = new Txt().Ref( O ).str( " (" ).item( O ).str( ")" ).ToString();
			} else {
				original_name = O.name;
			}

			if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
				_class = "marked datum";
			}

			dynamic _d = _class; // Was a switch-case, sorry for the mess.
			if ( _d=="list" ) {
				this.mod_list( O.vars[variable] );
				return;
			} else if ( _d=="restore to default" ) {
				O.vars[variable] = Lang13.Initial( O, variable );
			} else if ( _d=="edit referenced object" ) {
				this.modify_variables( O.vars[variable] ); return;
			} else if ( _d=="text" ) {
				
				if ( variable == "light_color" ) {
					var_new = Interface13.Input( "Enter new text:", "Text", O.vars[variable], null, null, InputType.Null | InputType.StrMultiline );

					if ( var_new == null ) {
						return;
					}
					((Ent_Static)O).set_light( null, null, var_new );
				} else {
					var_new2 = Interface13.Input( "Enter new text:", "Text", O.vars[variable], null, null, InputType.Null | InputType.StrMultiline );

					if ( var_new2 == null ) {
						return;
					}
					O.vars[variable] = var_new2;
				}
			} else if ( _d=="num" ) {
				
				if ( variable == "light_range" ) {
					var_new3 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

					if ( var_new3 == null ) {
						return;
					}
					((Ent_Static)O).set_light( var_new3 );
				} else if ( variable == "light_power" ) {
					var_new4 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

					if ( var_new4 == null ) {
						return;
					}
					((Ent_Static)O).set_light( null, var_new4 );
				} else if ( variable == "stat" ) {
					var_new5 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

					if ( var_new5 == null ) {
						return;
					}

					if ( Convert.ToInt32( O.vars[variable] ) == 2 && Convert.ToDouble( var_new5 ) < 2 ) {
						
						if ( O is Mob ) {
							M = O;
							((Mob)M).resurrect();
						}
					}

					if ( Convert.ToDouble( O.vars[variable] ) < 2 && var_new5 == 2 ) {
						GlobalVars.living_mob_list.Remove( O );
						GlobalVars.dead_mob_list.Add( O );
					}
					O.vars[variable] = var_new5;
				} else {
					var_new6 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

					if ( var_new6 == null ) {
						return;
					}
					O.vars[variable] = var_new6;
				}
			} else if ( _d=="type" ) {
				var_new7 = Interface13.Input( "Enter type:", "Type", O.vars[variable], null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Null | InputType.Any );

				if ( var_new7 == null ) {
					return;
				}
				O.vars[variable] = var_new7;
			} else if ( _d=="reference" ) {
				var_new8 = Interface13.Input( "Select reference:", "Reference", O.vars[variable], null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Null | InputType.Zone );

				if ( var_new8 == null ) {
					return;
				}
				O.vars[variable] = var_new8;
			} else if ( _d=="mob reference" ) {
				var_new9 = Interface13.Input( "Select reference:", "Reference", O.vars[variable], null, Game13.contents, InputType.Mob | InputType.Null );

				if ( var_new9 == null ) {
					return;
				}
				O.vars[variable] = var_new9;
			} else if ( _d=="file" ) {
				var_new10 = Interface13.Input( "Pick file:", "File", O.vars[variable], null, null, InputType.File | InputType.Null );

				if ( var_new10 == null ) {
					return;
				}
				O.vars[variable] = var_new10;
			} else if ( _d=="icon" ) {
				var_new11 = Interface13.Input( "Pick icon:", "Icon", O.vars[variable], null, null, InputType.Null | InputType.Icon );

				if ( var_new11 == null ) {
					return;
				}
				O.vars[variable] = var_new11;
			} else if ( _d=="marked datum" ) {
				O.vars[variable] = this.holder.marked_datum;
			}
			Game13.log.WriteMsg( "### VarEdit by " + this + ": " + O.type + " " + variable + "=" + String13.HtmlEncode( "" + O.vars[variable] ) );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " modified " + original_name + "'s " + variable + " to " + O.vars[variable] );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " modified " + original_name + "'s " + variable + " to " + O.vars[variable] );
			return;
		}

		// Function from file: modifyvariables.dm
		public void mod_list( dynamic L = null ) {
			ByTable locked = null;
			dynamic names = null;
			dynamic variable = null;
			string __default = null;
			dynamic dir = null;
			dynamic _class = null;
			dynamic thing = null;
			dynamic newText = null;
			dynamic thing2 = null;
			dynamic newNum = null;
			dynamic thing3 = null;
			dynamic newType = null;
			dynamic thing4 = null;
			dynamic newRef = null;
			dynamic thing5 = null;
			dynamic newMob = null;
			dynamic thing6 = null;
			dynamic newFile = null;
			dynamic thing7 = null;
			dynamic newIcon = null;
			dynamic thing8 = null;
			dynamic newThing = null;

			
			if ( !GlobalFuncs.check_rights( 1024 ) ) {
				return;
			}

			if ( !( L is ByTable ) ) {
				
				if ( Interface13.Alert( "Make a new list?", "Not a List.", "Yes", "No" ) == "No" ) {
					return;
				} else {
					L = new ByTable();
				}
			}
			locked = new ByTable(new object [] { "vars", "client", "firemut", "ishulk", "telekinesis", "xray", "virus", "viruses", "cuffed", "ka", "last_eaten", "urine", "poo", "icon", "icon_state" });
			names = GlobalFuncs.sortList( L );
			variable = Interface13.Input( "Which var?", "Var", null, null, names + "(ADD VAR)", InputType.Null | InputType.Any );

			if ( variable == "(ADD VAR)" ) {
				this.mod_list_add( L );
				return;
			}

			if ( !Lang13.Bool( variable ) ) {
				return;
			}

			if ( locked.Contains( variable ) ) {
				
				if ( !GlobalFuncs.check_rights( 32 ) ) {
					return;
				}
			}

			if ( variable == null ) {
				GlobalFuncs.to_chat( Task13.User, "Unable to determine variable type." );
			} else if ( Lang13.Bool( Lang13.IsNumber( variable ) ) ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>NUM</b>." );
				__default = "num";
				dir = 1;
			} else if ( variable is string ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>TEXT</b>." );
				__default = "text";
			} else if ( Lang13.Bool( Lang13.IsLocation( variable ) ) ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>REFERENCE</b>." );
				__default = "reference";
			} else if ( variable is Icon ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>ICON</b>." );
				variable = new Txt().icon( variable ).ToString();
				__default = "icon";
			} else if ( variable is Ent_Static || variable is Game_Data ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>TYPE</b>." );
				__default = "type";
			} else if ( variable is ByTable ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>LIST</b>." );
				__default = "list";
			} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( variable ) ) ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>CLIENT</b>." );
				__default = "cancel";
			} else {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>FILE</b>." );
				__default = "file";
			}
			GlobalFuncs.to_chat( Task13.User, "Variable contains: " + variable );

			if ( Lang13.Bool( dir ) ) {
				
				dynamic _a = variable; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					dir = "NORTH";
				} else if ( _a==2 ) {
					dir = "SOUTH";
				} else if ( _a==4 ) {
					dir = "EAST";
				} else if ( _a==8 ) {
					dir = "WEST";
				} else if ( _a==5 ) {
					dir = "NORTHEAST";
				} else if ( _a==6 ) {
					dir = "SOUTHEAST";
				} else if ( _a==9 ) {
					dir = "NORTHWEST";
				} else if ( _a==10 ) {
					dir = "SOUTHWEST";
				} else {
					dir = null;
				}

				if ( Lang13.Bool( dir ) ) {
					GlobalFuncs.to_chat( Task13.User, "If a direction, direction is: " + dir );
				}
			}
			_class = "text";

			if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { 
					"text", 
					"num", 
					"type", 
					"reference", 
					"mob reference", 
					"icon", 
					"file", 
					"list", 
					"edit referenced object", 
					"restore to default", 
					"marked datum (" + this.holder.marked_datum.type + ")", 
					"DELETE FROM LIST"
				 }), InputType.Null | InputType.Any );
			} else {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "list", "edit referenced object", "restore to default", "DELETE FROM LIST" }), InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( _class ) ) {
				return;
			}

			if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
				_class = "marked datum";
			}

			dynamic _b = _class; // Was a switch-case, sorry for the mess.
			if ( _b=="list" ) {
				this.mod_list( variable );
			} else if ( _b=="restore to default" ) {
				L[L.Find( variable )] = Lang13.InitialBroken( variable );
			} else if ( _b=="edit referenced object" ) {
				this.modify_variables( variable );
			} else if ( _b=="DELETE FROM LIST" ) {
				L -= variable;
				return;
			} else if ( _b=="text" ) {
				thing = L["" + variable];
				newText = Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.Null | InputType.StrMultiline );

				if ( !Lang13.Bool( newText ) ) {
					return;
				}

				if ( !( thing == null ) ) {
					L["" + variable] = newText;
				} else {
					L[L.Find( variable )] = newText;
				}
			} else if ( _b=="num" ) {
				thing2 = L["" + variable];
				newNum = Interface13.Input( "Enter new number:", "Num", null, null, null, InputType.Num | InputType.Null );

				if ( !Lang13.Bool( newNum ) ) {
					return;
				}

				if ( !( thing2 == null ) ) {
					L["" + variable] = newNum;
				} else {
					L[L.Find( variable )] = newNum;
				}
			} else if ( _b=="type" ) {
				thing3 = L["" + variable];
				newType = Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Any );

				if ( !( thing3 == null ) ) {
					L["" + variable] = newType;
				} else {
					L[L.Find( variable )] = newType;
				}
			} else if ( _b=="reference" ) {
				thing4 = L["" + variable];
				newRef = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Null | InputType.Zone );

				if ( !Lang13.Bool( newRef ) ) {
					return;
				}

				if ( !( thing4 == null ) ) {
					L["" + variable] = newRef;
				} else {
					L[L.Find( variable )] = newRef;
				}
			} else if ( _b=="mob reference" ) {
				thing5 = L["" + variable];
				newMob = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Null );

				if ( !Lang13.Bool( newMob ) ) {
					return;
				}

				if ( !( thing5 == null ) ) {
					L["" + variable] = newMob;
				} else {
					L[L.Find( variable )] = newMob;
				}
			} else if ( _b=="file" ) {
				thing6 = L["" + variable];
				newFile = Interface13.Input( "Pick file:", "File", null, null, null, InputType.File );

				if ( !( thing6 == null ) ) {
					L["" + variable] = newFile;
				} else {
					L[L.Find( variable )] = newFile;
				}
			} else if ( _b=="icon" ) {
				thing7 = L["" + variable];
				newIcon = Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Icon );

				if ( !( thing7 == null ) ) {
					L["" + variable] = newIcon;
				} else {
					L[L.Find( variable )] = newIcon;
				}
			} else if ( _b=="marked datum" ) {
				thing8 = L["" + variable];
				newThing = this.holder.marked_datum;

				if ( !( thing8 == null ) ) {
					L["" + variable] = newThing;
				} else {
					L[L.Find( variable )] = newThing;
				}
			}
			return;
		}

		// Function from file: modifyvariables.dm
		public void mod_list_add( dynamic L = null ) {
			dynamic _class = null;
			dynamic var_value = null;

			_class = "text";

			if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { 
					"text", 
					"num", 
					"type", 
					"reference", 
					"mob reference", 
					"icon", 
					"file", 
					"list", 
					"edit referenced object", 
					"restore to default", 
					"marked datum (" + this.holder.marked_datum.type + ")"
				 }), InputType.Null | InputType.Any );
			} else {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "list", "edit referenced object", "restore to default" }), InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( _class ) ) {
				return;
			}

			if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
				_class = "marked datum";
			}
			var_value = null;

			dynamic _a = _class; // Was a switch-case, sorry for the mess.
			if ( _a=="text" ) {
				var_value = Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.StrMultiline );
			} else if ( _a=="num" ) {
				var_value = Interface13.Input( "Enter new number:", "Num", null, null, null, InputType.Num );
			} else if ( _a=="type" ) {
				var_value = Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Any );
			} else if ( _a=="reference" ) {
				var_value = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone );
			} else if ( _a=="mob reference" ) {
				var_value = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob );
			} else if ( _a=="file" ) {
				var_value = Interface13.Input( "Pick file:", "File", null, null, null, InputType.File );
			} else if ( _a=="icon" ) {
				var_value = Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Icon );
			} else if ( _a=="marked datum" ) {
				var_value = this.holder.marked_datum;
			}

			if ( !Lang13.Bool( var_value ) ) {
				return;
			}

			switch ((string)( Interface13.Alert( "Would you like to associate a var with the list entry?", null, "Yes", "No" ) )) {
				case "Yes":
					L += var_value;
					L[var_value] = this.mod_list_add_ass();
					break;
				case "No":
					L += var_value;
					break;
			}
			return;
		}

		// Function from file: modifyvariables.dm
		public dynamic mod_list_add_ass(  ) {
			dynamic _class = null;
			dynamic var_value = null;

			_class = "text";

			if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { 
					"text", 
					"num", 
					"type", 
					"reference", 
					"mob reference", 
					"icon", 
					"file", 
					"list", 
					"edit referenced object", 
					"restore to default", 
					"marked datum (" + this.holder.marked_datum.type + ")"
				 }), InputType.Null | InputType.Any );
			} else {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "list", "edit referenced object", "restore to default" }), InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( _class ) ) {
				return null;
			}

			if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
				_class = "marked datum";
			}
			var_value = null;

			dynamic _a = _class; // Was a switch-case, sorry for the mess.
			if ( _a=="text" ) {
				var_value = Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.Null | InputType.StrMultiline );
			} else if ( _a=="num" ) {
				var_value = Interface13.Input( "Enter new number:", "Num", null, null, null, InputType.Num | InputType.Null );
			} else if ( _a=="type" ) {
				var_value = Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Null | InputType.Any );
			} else if ( _a=="reference" ) {
				var_value = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Null | InputType.Zone );
			} else if ( _a=="mob reference" ) {
				var_value = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Null );
			} else if ( _a=="file" ) {
				var_value = Interface13.Input( "Pick file:", "File", null, null, null, InputType.File | InputType.Null );
			} else if ( _a=="icon" ) {
				var_value = Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Null | InputType.Icon );
			} else if ( _a=="marked datum" ) {
				var_value = this.holder.marked_datum;
			}

			if ( !Lang13.Bool( var_value ) ) {
				return null;
			}
			return var_value;
		}

		// Function from file: modifyvariables.dm
		[VerbInfo( name: "Edit Ticker Variables", group: "Debug" )]
		public void cmd_modify_ticker_variables(  ) {
			
			if ( GlobalVars.ticker == null ) {
				GlobalFuncs.to_chat( this, "Game hasn't started yet." );
			} else {
				this.modify_variables( GlobalVars.ticker );
				GlobalFuncs.feedback_add_details( "admin_verb", "ETV" );
			}
			return;
		}

		// Function from file: massmodvar.dm
		public void massmodify_variables( dynamic O = null, string var_name = null, bool? method = null ) {
			var_name = var_name ?? "";
			method = method ?? false;

			ByTable locked = null;
			dynamic p = null;
			dynamic names = null;
			dynamic V = null;
			dynamic variable = null;
			string __default = null;
			string var_value = null;
			dynamic dir = null;
			dynamic _class = null;
			string original_name = null;
			dynamic M = null;
			Obj A = null;
			dynamic A2 = null;
			dynamic M2 = null;
			Obj A3 = null;
			int count = 0;
			dynamic A4 = null;
			dynamic new_value = null;
			dynamic M3 = null;
			Obj A5 = null;
			int count2 = 0;
			dynamic A6 = null;
			dynamic M4 = null;
			Obj A7 = null;
			int count3 = 0;
			dynamic A8 = null;
			dynamic new_value2 = null;
			dynamic M5 = null;
			Obj A9 = null;
			int count4 = 0;
			dynamic A10 = null;
			dynamic M6 = null;
			Obj A11 = null;
			int count5 = 0;
			dynamic A12 = null;
			dynamic new_value3 = null;
			dynamic M7 = null;
			Obj A13 = null;
			int count6 = 0;
			dynamic A14 = null;
			dynamic M8 = null;
			Obj A15 = null;
			int count7 = 0;
			dynamic A16 = null;
			dynamic new_value4 = null;
			dynamic M9 = null;
			Obj A17 = null;
			int count8 = 0;
			dynamic A18 = null;
			dynamic M10 = null;
			Obj A19 = null;
			int count9 = 0;
			dynamic A20 = null;
			dynamic new_value5 = null;
			dynamic M11 = null;
			Obj A21 = null;
			int count10 = 0;
			dynamic A22 = null;
			dynamic M12 = null;
			Obj A23 = null;
			int count11 = 0;
			dynamic A24 = null;

			
			if ( !GlobalFuncs.check_rights( 1024 ) ) {
				return;
			}
			locked = new ByTable(new object [] { "vars", "key", "ckey", "client" });

			if ( this.holder != null && !Lang13.Bool( this.holder.rights & 128 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.forbidden_varedit_object_types )) {
					p = _a;
					

					if ( Lang13.Bool( p.IsInstanceOfType( O ) ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>It is forbidden to edit this object's variables.</span>" );
						return;
					}
				}
			}
			names = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( O.vars )) {
				V = _b;
				
				names += V;
			}
			names = GlobalFuncs.sortList( names );
			variable = "";

			if ( !Lang13.Bool( var_name ) ) {
				variable = Interface13.Input( "Which var?", "Var", null, null, names, InputType.Null | InputType.Any );
			} else {
				variable = var_name;
			}

			if ( !Lang13.Bool( variable ) ) {
				return;
			}
			__default = null;
			var_value = O.vars[variable];
			dir = null;

			if ( variable == "holder" || locked.Contains( variable ) ) {
				
				if ( !GlobalFuncs.check_rights( 32 ) ) {
					return;
				}
			}

			if ( var_value == null ) {
				GlobalFuncs.to_chat( Task13.User, "Unable to determine variable type." );
			} else if ( Lang13.Bool( Lang13.IsNumber( var_value ) ) ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>NUM</b>." );
				__default = "num";
				dir = 1;
			} else if ( var_value is string ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>TEXT</b>." );
				__default = "text";
			} else if ( Lang13.Bool( Lang13.IsLocation( var_value ) ) ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>REFERENCE</b>." );
				__default = "reference";
			} else if ( var_value is Icon ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>ICON</b>." );
				var_value = new Txt().icon( var_value ).ToString();
				__default = "icon";
			} else if ( var_value is Ent_Static || var_value is Game_Data ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>TYPE</b>." );
				__default = "type";
			} else if ( var_value is ByTable ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>LIST</b>." );
				__default = "list";
			} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( var_value ) ) ) {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>CLIENT</b>." );
				__default = "cancel";
			} else {
				GlobalFuncs.to_chat( Task13.User, "Variable appears to be <b>FILE</b>." );
				__default = "file";
			}
			GlobalFuncs.to_chat( Task13.User, "Variable contains: " + var_value );

			if ( Lang13.Bool( dir ) ) {
				
				switch ((string)( var_value )) {
					case 1:
						dir = "NORTH";
						break;
					case 2:
						dir = "SOUTH";
						break;
					case 4:
						dir = "EAST";
						break;
					case 8:
						dir = "WEST";
						break;
					case 5:
						dir = "NORTHEAST";
						break;
					case 6:
						dir = "SOUTHEAST";
						break;
					case 9:
						dir = "NORTHWEST";
						break;
					case 10:
						dir = "SOUTHWEST";
						break;
					default:
						dir = null;
						break;
				}

				if ( Lang13.Bool( dir ) ) {
					GlobalFuncs.to_chat( Task13.User, "If a direction, direction is: " + dir );
				}
			}
			_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { "text", "num", "type", "icon", "file", "edit referenced object", "restore to default" }), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( _class ) ) {
				return;
			}
			original_name = null;

			if ( !( O is Ent_Static ) ) {
				original_name = new Txt().Ref( O ).str( " (" ).item( O ).str( ")" ).ToString();
			} else {
				original_name = O.name;
			}

			dynamic _bn = _class; // Was a switch-case, sorry for the mess.
			if ( _bn=="restore to default" ) {
				O.vars[variable] = Lang13.Initial( O, variable );

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.mob_list )) {
							M = _d;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M ) ) ) {
								M.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _e in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A = _e;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A ) ) ) {
								A.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Tile ) {
						
						foreach (dynamic _f in Lang13.Enumerate( typeof(Game13) )) {
							A2 = _f;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A2 ) ) ) {
								A2.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _g in Lang13.Enumerate( GlobalVars.mob_list )) {
						M2 = _g;
						

						if ( M2.type == O.type ) {
							M2.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _h in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A3 = _h;
						

						if ( A3.type == O.type ) {
							A3.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Tile ) {
					count = 0;

					foreach (dynamic _i in Lang13.Enumerate( GlobalVars.turfs )) {
						A4 = _i;
						
						count++;

						if ( !( count % 50000 != 0 ) ) {
							Task13.Sleep( ((int)( Game13.tick_lag )) );
						}

						if ( A4.type == O.type ) {
							A4.vars[variable] = O.vars[variable];
						}
					}
				}
			} else if ( _bn=="edit referenced object" ) {
				this.massmodify_variables( O.vars[variable] ); return;
			} else if ( _bn=="text" ) {
				new_value = Interface13.Input( "Enter new text:", "Text", O.vars[variable], null, null, InputType.Str | InputType.Null );

				if ( new_value == null ) {
					return;
				}

				if ( variable == "light_color" ) {
					((Ent_Static)O).set_light( null, null, new_value );
				} else {
					O.vars[variable] = new_value;
				}

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _j in Lang13.Enumerate( GlobalVars.mob_list )) {
							M3 = _j;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M3 ) ) ) {
								
								if ( variable == "light_color" ) {
									((Ent_Static)M3).set_light( null, null, new_value );
								} else {
									M3.vars[variable] = O.vars[variable];
								}
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _k in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A5 = _k;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A5 ) ) ) {
								
								if ( variable == "light_color" ) {
									A5.set_light( null, null, new_value );
								} else {
									A5.vars[variable] = O.vars[variable];
								}
							}
						}
					} else if ( O is Tile ) {
						count2 = 0;

						foreach (dynamic _l in Lang13.Enumerate( GlobalVars.turfs )) {
							A6 = _l;
							
							count2++;

							if ( !( count2 % 50000 != 0 ) ) {
								Task13.Sleep( ((int)( Game13.tick_lag )) );
							}

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A6 ) ) ) {
								
								if ( variable == "light_color" ) {
									((Ent_Static)A6).set_light( null, null, new_value );
								} else {
									A6.vars[variable] = O.vars[variable];
								}
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _m in Lang13.Enumerate( GlobalVars.mob_list )) {
						M4 = _m;
						

						if ( M4.type == O.type ) {
							
							if ( variable == "light_color" ) {
								((Ent_Static)M4).set_light( null, null, new_value );
							} else {
								M4.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _n in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A7 = _n;
						

						if ( A7.type == O.type ) {
							
							if ( variable == "light_color" ) {
								A7.set_light( null, null, new_value );
							} else {
								A7.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Tile ) {
					count3 = 0;

					foreach (dynamic _o in Lang13.Enumerate( GlobalVars.turfs )) {
						A8 = _o;
						
						count3++;

						if ( !( count3 % 50000 != 0 ) ) {
							Task13.Sleep( ((int)( Game13.tick_lag )) );
						}

						if ( A8.type == O.type ) {
							
							if ( variable == "light_color" ) {
								((Ent_Static)A8).set_light( null, null, new_value );
							} else {
								A8.vars[variable] = O.vars[variable];
							}
						}
					}
				}
			} else if ( _bn=="num" ) {
				new_value2 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

				if ( new_value2 == null ) {
					return;
				}

				if ( variable == "light_range" ) {
					((Ent_Static)O).set_light( new_value2 );
				} else if ( variable == "light_power" ) {
					((Ent_Static)O).set_light( null, new_value2 );
				} else {
					O.vars[variable] = new_value2;
				}

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _p in Lang13.Enumerate( GlobalVars.mob_list )) {
							M5 = _p;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M5 ) ) ) {
								
								if ( variable == "light_range" ) {
									((Ent_Static)M5).set_light( new_value2 );
								} else if ( variable == "light_power" ) {
									((Ent_Static)M5).set_light( null, new_value2 );
								} else {
									M5.vars[variable] = O.vars[variable];
								}
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _q in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A9 = _q;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A9 ) ) ) {
								
								if ( variable == "light_range" ) {
									A9.set_light( new_value2 );
								} else if ( variable == "light_power" ) {
									A9.set_light( null, new_value2 );
								} else {
									A9.vars[variable] = O.vars[variable];
								}
							}
						}
					} else if ( O is Tile ) {
						count4 = 0;

						foreach (dynamic _r in Lang13.Enumerate( GlobalVars.turfs )) {
							A10 = _r;
							
							count4++;

							if ( !( count4 % 50000 != 0 ) ) {
								Task13.Sleep( ((int)( Game13.tick_lag )) );
							}

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A10 ) ) ) {
								
								if ( variable == "light_range" ) {
									((Ent_Static)A10).set_light( new_value2 );
								} else if ( variable == "light_power" ) {
									((Ent_Static)A10).set_light( null, new_value2 );
								} else {
									A10.vars[variable] = O.vars[variable];
								}
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _s in Lang13.Enumerate( GlobalVars.mob_list )) {
						M6 = _s;
						

						if ( M6.type == O.type ) {
							
							if ( variable == "light_range" ) {
								((Ent_Static)M6).set_light( new_value2 );
							} else if ( variable == "light_power" ) {
								((Ent_Static)M6).set_light( null, new_value2 );
							} else {
								M6.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _t in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A11 = _t;
						

						if ( A11.type == O.type ) {
							
							if ( variable == "light_range" ) {
								A11.set_light( new_value2 );
							} else if ( variable == "light_power" ) {
								A11.set_light( null, new_value2 );
							} else {
								A11.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Tile ) {
					count5 = 0;

					foreach (dynamic _u in Lang13.Enumerate( GlobalVars.turfs )) {
						A12 = _u;
						
						count5++;

						if ( !( count5 % 50000 != 0 ) ) {
							Task13.Sleep( ((int)( Game13.tick_lag )) );
						}

						if ( A12.type == O.type ) {
							
							if ( variable == "light_range" ) {
								((Ent_Static)A12).set_light( new_value2 );
							} else if ( variable == "light_power" ) {
								((Ent_Static)A12).set_light( null, new_value2 );
							} else {
								A12.vars[variable] = O.vars[variable];
							}
						}
					}
				}
			} else if ( _bn=="type" ) {
				new_value3 = null;
				new_value3 = Interface13.Input( "Enter type:", "Type", O.vars[variable], null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Null | InputType.Any );

				if ( new_value3 == null ) {
					return;
				}
				O.vars[variable] = new_value3;

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _v in Lang13.Enumerate( GlobalVars.mob_list )) {
							M7 = _v;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M7 ) ) ) {
								M7.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _w in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A13 = _w;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A13 ) ) ) {
								A13.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Tile ) {
						count6 = 0;

						foreach (dynamic _x in Lang13.Enumerate( GlobalVars.turfs )) {
							A14 = _x;
							
							count6++;

							if ( !( count6 % 50000 != 0 ) ) {
								Task13.Sleep( ((int)( Game13.tick_lag )) );
							}

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A14 ) ) ) {
								A14.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _y in Lang13.Enumerate( GlobalVars.mob_list )) {
						M8 = _y;
						

						if ( M8.type == O.type ) {
							M8.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _z in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A15 = _z;
						

						if ( A15.type == O.type ) {
							A15.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Tile ) {
					count7 = 0;

					foreach (dynamic _ba in Lang13.Enumerate( GlobalVars.turfs )) {
						A16 = _ba;
						
						count7++;

						if ( !( count7 % 50000 != 0 ) ) {
							Task13.Sleep( ((int)( Game13.tick_lag )) );
						}

						if ( A16.type == O.type ) {
							A16.vars[variable] = O.vars[variable];
						}
					}
				}
			} else if ( _bn=="file" ) {
				new_value4 = Interface13.Input( "Pick file:", "File", O.vars[variable], null, null, InputType.File | InputType.Null );

				if ( new_value4 == null ) {
					return;
				}
				O.vars[variable] = new_value4;

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _bb in Lang13.Enumerate( GlobalVars.mob_list )) {
							M9 = _bb;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M9 ) ) ) {
								M9.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O.type is Obj ) {
						
						foreach (dynamic _bc in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A17 = _bc;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A17 ) ) ) {
								A17.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O.type is Tile ) {
						count8 = 0;

						foreach (dynamic _bd in Lang13.Enumerate( GlobalVars.turfs )) {
							A18 = _bd;
							
							count8++;

							if ( !( count8 % 50000 != 0 ) ) {
								Task13.Sleep( ((int)( Game13.tick_lag )) );
							}

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A18 ) ) ) {
								A18.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _be in Lang13.Enumerate( GlobalVars.mob_list )) {
						M10 = _be;
						

						if ( M10.type == O.type ) {
							M10.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O.type is Obj ) {
					
					foreach (dynamic _bf in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A19 = _bf;
						

						if ( A19.type == O.type ) {
							A19.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O.type is Tile ) {
					count9 = 0;

					foreach (dynamic _bg in Lang13.Enumerate( GlobalVars.turfs )) {
						A20 = _bg;
						
						count9++;

						if ( !( count9 % 50000 != 0 ) ) {
							Task13.Sleep( ((int)( Game13.tick_lag )) );
						}

						if ( A20.type == O.type ) {
							A20.vars[variable] = O.vars[variable];
						}
					}
				}
			} else if ( _bn=="icon" ) {
				new_value5 = Interface13.Input( "Pick icon:", "Icon", O.vars[variable], null, null, InputType.Null | InputType.Icon );

				if ( new_value5 == null ) {
					return;
				}
				O.vars[variable] = new_value5;

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _bh in Lang13.Enumerate( GlobalVars.mob_list )) {
							M11 = _bh;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M11 ) ) ) {
								M11.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _bi in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A21 = _bi;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A21 ) ) ) {
								A21.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Tile ) {
						count10 = 0;

						foreach (dynamic _bj in Lang13.Enumerate( GlobalVars.turfs )) {
							A22 = _bj;
							
							count10++;

							if ( !( count10 % 50000 != 0 ) ) {
								Task13.Sleep( ((int)( Game13.tick_lag )) );
							}

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A22 ) ) ) {
								A22.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _bk in Lang13.Enumerate( GlobalVars.mob_list )) {
						M12 = _bk;
						

						if ( M12.type == O.type ) {
							M12.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _bl in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A23 = _bl;
						

						if ( A23.type == O.type ) {
							A23.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Tile ) {
					count11 = 0;

					foreach (dynamic _bm in Lang13.Enumerate( GlobalVars.turfs )) {
						A24 = _bm;
						
						count11++;

						if ( !( count11 % 50000 != 0 ) ) {
							Task13.Sleep( ((int)( Game13.tick_lag )) );
						}

						if ( A24.type == O.type ) {
							A24.vars[variable] = O.vars[variable];
						}
					}
				}
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " mass modified " + original_name + "'s " + variable + " to " + O.vars[variable] );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " mass modified " + original_name + "'s " + variable + " to " + O.vars[variable] );
			return;
		}

		// Function from file: massmodvar.dm
		[VerbInfo( name: "Mass Edit Variables", desc: "(target) Edit all instances of a target item's variables", group: "Debug" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public void cmd_mass_modify_object_variables( dynamic A = null, string var_name = null ) {
			bool? method = null;

			method = false;

			if ( !GlobalFuncs.check_rights( 1024 ) ) {
				return;
			}

			if ( Lang13.Bool( A ) && A.type != null ) {
				
				if ( Lang13.Bool( Lang13.GetTypes( A.type ) ) ) {
					
					dynamic _a = Interface13.Input( "Strict object type detection?", null, null, null, new ByTable(new object [] { "Strictly this type", "This type and subtypes", "Cancel" }), InputType.Null | InputType.Any ); // Was a switch-case, sorry for the mess.
					if ( _a=="Strictly this type" ) {
						method = false;
					} else if ( _a=="This type and subtypes" ) {
						method = true;
					} else if ( _a=="Cancel" ) {
						return;
					} else if ( _a==null ) {
						return;
					}
				}
			}
			this.massmodify_variables( A, var_name, method );
			GlobalFuncs.feedback_add_details( "admin_verb", "MEV" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Check Sim/Unsim Bounds", group: "Mapping" )]
		public void check_sim_unsim(  ) {
			ByTable acceptable_types = null;
			ByTable wallify = null;
			dynamic T = null;
			dynamic basetype = null;
			ByTable badtiles = null;
			Ent_Static A = null;
			dynamic D = null;
			Tile AT = null;
			dynamic oldcolor = null;
			dynamic newcolor = null;

			acceptable_types = new ByTable()
				.Set( typeof(Tile_Simulated_Wall), new ByTable(new object [] { typeof(Tile_Simulated), typeof(Tile_Unsimulated_Mineral), typeof(Tile_Unsimulated_Floor_Airless), typeof(Tile_Unsimulated_Floor_Asteroid), typeof(Tile_Space) }) )
				.Set( typeof(Tile_Simulated_Shuttle_Floor), new ByTable(new object [] { typeof(Tile_Simulated_Shuttle), typeof(Tile_Space) }) )
				.Set( typeof(Tile_Simulated_Shuttle_Floor4), new ByTable(new object [] { typeof(Tile_Simulated_Shuttle), typeof(Tile_Space) }) )
				.Set( typeof(Tile_Simulated_Floor_Plating_Airless), new ByTable(new object [] { typeof(Tile_Simulated_Floor_Plating_Airless), typeof(Tile_Simulated_Floor_Airless), typeof(Tile_Simulated_Wall), typeof(Tile_Space) }) )
				.Set( typeof(Tile_Simulated_Floor_Airless), new ByTable(new object [] { typeof(Tile_Simulated_Floor_Airless), typeof(Tile_Simulated_Floor_Plating_Airless), typeof(Tile_Simulated_Wall), typeof(Tile_Space) }) )
				.Set( typeof(Tile_Simulated_Floor), new ByTable(new object [] { typeof(Tile_Simulated_Floor), typeof(Tile_Simulated_Wall), typeof(Tile_Simulated_Shuttle_Wall) }) )
			;
			wallify = new ByTable(new object [] { typeof(Tile_Simulated_Wall), typeof(Obj_Structure_Window), typeof(Obj_Structure_Shuttle), typeof(Obj_Machinery_Door) });

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.turfs )) {
				T = _d;
				

				foreach (dynamic _c in Lang13.Enumerate( acceptable_types )) {
					basetype = _c;
					
					badtiles = null;
					badtiles = new ByTable( 0 );

					if ( Lang13.Bool( basetype.IsInstanceOfType( T ) ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
							A = _a;
							

							if ( GlobalFuncs.is_type_in_list( A, wallify ) ) {
								basetype = typeof(Tile_Simulated_Wall);
								break;
							}
						}

						foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
							D = _b;
							
							AT = Map13.GetStep( T, Convert.ToInt32( D ) );

							if ( !GlobalFuncs.is_type_in_list( AT, acceptable_types[basetype] ) ) {
								badtiles.Add( AT.type );
							}
						}
						oldcolor = Lang13.Initial( T, "color" );
						newcolor = oldcolor;

						if ( badtiles.len > 0 ) {
							GlobalFuncs.message_admins( "Tile " + GlobalFuncs.formatJumpTo( T ) + " (BT: " + basetype + ") is next to: " + GlobalFuncs.list2text( badtiles, ", " ) );
							newcolor = "#ff0000";
						}

						if ( newcolor != oldcolor ) {
							T.color = newcolor;
						}
						break;
					}
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "mSIM" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Count Objects All", group: "Mapping" )]
		public void count_objects_all(  ) {
			dynamic type_text = null;
			Type type_path = null;
			int count = 0;
			Ent_Static A = null;

			type_text = Interface13.Input( "Which type path?", "", null, null, null, InputType.Str );

			if ( !Lang13.Bool( type_text ) ) {
				return;
			}
			type_path = Lang13.FindClass( type_text );

			if ( !( type_path != null ) ) {
				return;
			}
			count = 0;

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Ent_Static) )) {
				A = _a;
				

				if ( Lang13.Bool( ((dynamic)type_path).IsInstanceOfType( A ) ) ) {
					count++;
				}
			}
			GlobalFuncs.to_chat( Task13.User, "There are " + count + " objects of type " + type_path + " in the game world" );
			GlobalFuncs.feedback_add_details( "admin_verb", "mOBJ" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Count Objects On Level", group: "Mapping" )]
		public void count_objects_on_z_level(  ) {
			dynamic level = null;
			double? num_level = null;
			dynamic type_text = null;
			Type type_path = null;
			int count = 0;
			ByTable atom_list = null;
			Ent_Static A = null;
			Ent_Static B = null;

			level = Interface13.Input( "Which z-level?", "Level?", null, null, null, InputType.Str );

			if ( !Lang13.Bool( level ) ) {
				return;
			}
			num_level = String13.ParseNumber( level );

			if ( !Lang13.Bool( num_level ) ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( num_level ) ) ) {
				return;
			}
			type_text = Interface13.Input( "Which type path?", "Path?", null, null, null, InputType.Str );

			if ( !Lang13.Bool( type_text ) ) {
				return;
			}
			type_path = Lang13.FindClass( type_text );

			if ( !( type_path != null ) ) {
				return;
			}
			count = 0;
			atom_list = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Ent_Static) )) {
				A = _a;
				

				if ( Lang13.Bool( ((dynamic)type_path).IsInstanceOfType( A ) ) ) {
					B = A;

					while (!( B.loc is Tile )) {
						
						if ( B != null && B.loc != null ) {
							B = B.loc;
						} else {
							break;
						}
					}

					if ( B != null ) {
						
						if ( B.z == num_level ) {
							count++;
							atom_list.Add( A );
						}
					}
				}
			}
			GlobalFuncs.to_chat( typeof(Game13), "There are " + count + " objects of type " + type_path + " on z-level " + num_level );
			GlobalFuncs.feedback_add_details( "admin_verb", "mOBJZ" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Debug verbs", group: "Debug" )]
		public void enable_debug_verbs(  ) {
			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}
			this.verbs.Add( typeof(Client).GetMethod( "do_not_use_these" ) );
			this.verbs.Add( typeof(Client).GetMethod( "camera_view" ) );
			this.verbs.Add( typeof(Client).GetMethod( "sec_camera_report" ) );
			this.verbs.Add( typeof(Client).GetMethod( "intercom_view" ) );
			this.verbs.Add( typeof(Client).GetMethod( "air_status" ) );
			this.verbs.Add( typeof(Client).GetMethod( "Cell" ) );
			this.verbs.Add( typeof(Client).GetMethod( "pdiff" ) );
			this.verbs.Add( typeof(Client).GetMethod( "atmosscan" ) );
			this.verbs.Add( typeof(Client).GetMethod( "powerdebug" ) );
			this.verbs.Add( typeof(Client).GetMethod( "count_objects_on_z_level" ) );
			this.verbs.Add( typeof(Client).GetMethod( "count_objects_all" ) );
			this.verbs.Add( typeof(Client).GetMethod( "cmd_assume_direct_control" ) );
			this.verbs.Add( typeof(Client).GetMethod( "jump_to_dead_group" ) );
			this.verbs.Add( typeof(Client).GetMethod( "startSinglo" ) );
			this.verbs.Add( typeof(Client).GetMethod( "cheat_power" ) );
			this.verbs.Add( typeof(Client).GetMethod( "setup_atmos" ) );
			this.verbs.Add( typeof(Client).GetMethod( "ticklag" ) );
			this.verbs.Add( typeof(Client).GetMethod( "cmd_admin_grantfullaccess" ) );
			this.verbs.Add( typeof(Client).GetMethod( "kaboom" ) );
			this.verbs.Add( typeof(Client).GetMethod( "splash" ) );
			this.verbs.Add( typeof(Client).GetMethod( "cmd_admin_areatest" ) );
			this.verbs.Add( typeof(Client).GetMethod( "cmd_admin_rejuvenate" ) );
			this.verbs.Add( typeof(Admins).GetMethod( "show_traitor_panel" ) );
			this.verbs.Add( typeof(Client).GetMethod( "print_jobban_old" ) );
			this.verbs.Add( typeof(Client).GetMethod( "print_jobban_old_filter" ) );
			this.verbs.Add( typeof(Client).GetMethod( "forceEvent" ) );
			this.verbs.Add( typeof(Client).GetMethod( "Zone_Info" ) );
			this.verbs.Add( typeof(Client).GetMethod( "Test_ZAS_Connection" ) );
			this.verbs.Add( typeof(Client).GetMethod( "SDQL2_query" ) );
			this.verbs.Add( typeof(Client).GetMethod( "check_sim_unsim" ) );
			this.verbs.Add( typeof(Client).GetMethod( "nanomapgen_DumpImage" ) );
			this.verbs.Add( typeof(Client).GetMethod( "nanomapgen_DumpImageAll" ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "mDV" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Intercom Range Display", group: "Mapping" )]
		public void intercom_view(  ) {
			Obj_Effect_Debugging_Marker M = null;
			Obj_Item_Device_Radio_Intercom I = null;
			dynamic T = null;

			
			if ( GlobalVars.intercom_range_display_status == true ) {
				GlobalVars.intercom_range_display_status = GlobalVars.FALSE;
			} else {
				GlobalVars.intercom_range_display_status = GlobalVars.TRUE;
			}

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Effect_Debugging_Marker) )) {
				M = _a;
				
				GlobalFuncs.qdel( M );
			}

			if ( GlobalVars.intercom_range_display_status == true ) {
				
				foreach (dynamic _c in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_Radio_Intercom) )) {
					I = _c;
					

					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( I, I.canhear_range ) )) {
						T = _b;
						
						new Obj_Effect_Debugging_Marker( T );
					}
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "mIRD" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Camera Report", group: "Mapping" )]
		public bool sec_camera_report(  ) {
			ByTable CL = null;
			Obj_Machinery_Camera C = null;
			string output = null;
			Obj_Machinery_Camera C1 = null;
			Obj_Machinery_Camera C2 = null;
			Tile T = null;
			bool window_check = false;
			Obj_Structure_Window W = null;

			
			if ( !( GlobalVars.master_controller != null ) ) {
				Interface13.Alert( Task13.User, "Master_controller not found.", "Sec Camera Report" );
				return false;
			}
			CL = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _a;
				
				CL.Add( C );
			}
			output = "<B>CAMERA ANOMALIES REPORT</B><HR>\n<B>The following anomalies have been detected. The ones in red need immediate attention: Some of those in black may be intentional.</B><BR><ul>";

			foreach (dynamic _d in Lang13.Enumerate( CL, typeof(Obj_Machinery_Camera) )) {
				C1 = _d;
				

				foreach (dynamic _b in Lang13.Enumerate( CL, typeof(Obj_Machinery_Camera) )) {
					C2 = _b;
					

					if ( C1 != C2 ) {
						
						if ( C1.c_tag == C2.c_tag ) {
							output += "<li><font color='red'>c_tag match for sec. cameras at [" + C1.x + ", " + C1.y + ", " + C1.z + "] (" + C1.loc.loc + ") and [" + C2.x + ", " + C2.y + ", " + C2.z + "] (" + C2.loc.loc + ") - c_tag is " + C1.c_tag + "</font></li>";
						}

						if ( C1.loc == C2.loc && C1.dir == C2.dir && C1.pixel_x == C2.pixel_x && C1.pixel_y == C2.pixel_y ) {
							output += "<li><font color='red'>FULLY overlapping sec. cameras at [" + C1.x + ", " + C1.y + ", " + C1.z + "] (" + C1.loc.loc + ") Networks: " + C1.network + " and " + C2.network + "</font></li>";
						}

						if ( C1.loc == C2.loc ) {
							output += "<li>overlapping sec. cameras at [" + C1.x + ", " + C1.y + ", " + C1.z + "] (" + C1.loc.loc + ") Networks: " + C1.network + " and " + C2.network + "</font></li>";
						}
					}
				}
				T = Map13.GetStep( C1, Num13.Rotate( C1.dir, 180 ) );

				if ( !( T != null ) || !( T is Tile ) || !T.density ) {
					
					if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Grille), T ) ) ) {
						window_check = false;

						foreach (dynamic _c in Lang13.Enumerate( T, typeof(Obj_Structure_Window) )) {
							W = _c;
							

							if ( W.dir == Num13.Rotate( C1.dir, 180 ) || W.is_fulltile() ) {
								window_check = true;
								break;
							}
						}

						if ( !window_check ) {
							output += "<li><font color='red'>Camera not connected to wall at [" + C1.x + ", " + C1.y + ", " + C1.z + "] (" + C1.loc.loc + ") Network: " + C1.network + "</color></li>";
						}
					}
				}
			}
			output += "</ul>";
			Interface13.Browse( Task13.User, output, "window=airreport;size=1000x500" );
			GlobalFuncs.feedback_add_details( "admin_verb", "mCRP" );
			return false;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Camera Range Display", group: "Mapping" )]
		public void camera_view(  ) {
			Obj_Effect_Debugging_CameraRange C = null;
			Obj_Machinery_Camera C2 = null;

			
			if ( GlobalVars.camera_range_display_status ) {
				GlobalVars.camera_range_display_status = false;
			} else {
				GlobalVars.camera_range_display_status = true;
			}

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Effect_Debugging_CameraRange) )) {
				C = _a;
				
				Lang13.Delete( C );
				C = null;
			}

			if ( GlobalVars.camera_range_display_status ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
					C2 = _b;
					
					new Obj_Effect_Debugging_CameraRange( C2.loc );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "mCRD" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "-None of these are for ingame use!!", group: "Mapping" )]
		public void do_not_use_these(  ) {
			Lang13.SuperCall();
			return;
		}

		// Function from file: getlogs.dm
		[VerbInfo( name: ".getserverlog", desc: "Fetch logfiles from data/logs" )]
		public void getserverlog(  ) {
			string path = null;

			path = this.browse_files( "data/logs/" );

			if ( !Lang13.Bool( path ) ) {
				return;
			}

			if ( this.file_spam_check() ) {
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " accessed file: " + path );
			Interface13.OpenFile( this, new File( path ) );
			GlobalFuncs.to_chat( this, "Attempting to send file, this may take a fair few minutes if the file is very large." );
			return;
		}

		// Function from file: getlogs.dm
		[VerbInfo( name: ".getruntimelog", desc: "Retrieve any session logfiles saved by dreamdeamon." )]
		public void getruntimelog(  ) {
			string path = null;

			path = this.browse_files( "data/logs/runtime/" );

			if ( !Lang13.Bool( path ) ) {
				return;
			}

			if ( this.file_spam_check() ) {
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " accessed file: " + path );
			Interface13.OpenFile( this, new File( path ) );
			GlobalFuncs.to_chat( this, "Attempting to send file, this may take a fair few minutes if the file is very large." );
			return;
		}

		// Function from file: getlogs.dm
		[VerbInfo( name: ".giveruntimelog", desc: "Give somebody access to any session logfiles saved to the /log/runtime/ folder." )]
		public void giveruntimelog(  ) {
			dynamic target = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Only Admins may use this command.</font>" );
				return;
			}
			target = Interface13.Input( this, "Choose somebody to grant access to the server's runtime logs (permissions expire at the end of each round):", "Grant Permissions", null, GlobalVars.clients, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( target ) ) ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: giveruntimelog(): Client not found.</font>" );
				return;
			}
			target.verbs |= typeof(Client).GetMethod( "getruntimelog" );
			GlobalFuncs.to_chat( target, "<font color='red'>You have been granted access to runtime logs. Please use them responsibly or risk being banned.</font>" );
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Dump Chemical Reactions", group: "Debug" )]
		public void dump_chemreactions(  ) {
			dynamic paths = null;
			string str = null;
			dynamic path = null;
			dynamic R = null;
			dynamic r_id = null;
			dynamic r_id2 = null;

			paths = Lang13.GetTypes( typeof(ChemicalReaction) ) - typeof(ChemicalReaction);
			str = @"
{| class=""wikitable""
|-
! Name
! Reactants
! Result";

			foreach (dynamic _c in Lang13.Enumerate( paths )) {
				path = _c;
				
				R = Lang13.Call( path );
				str += "\n|-\n! " + R.name;

				if ( R.required_reagents != null ) {
					str += "\n|<ul>";

					foreach (dynamic _a in Lang13.Enumerate( R.required_reagents )) {
						r_id = _a;
						
						str += "<li>{{reagent|" + R.required_reagents[r_id] + "|" + r_id + "}}</li>";
					}

					foreach (dynamic _b in Lang13.Enumerate( R.required_catalysts )) {
						r_id2 = _b;
						
						str += "<li>{{reagent|" + R.required_catalysts[r_id2] + "|" + r_id2 + "}}</li>";
					}
					str += "</ul>";
				} else {
					str += "\n|''None!''";
				}

				if ( Lang13.Bool( R.result ) ) {
					str += "\n|{{reagent|" + R.result_amount + "|" + R.result + "}}";
				} else {
					str += "\n|''(Check " + R.type + "/on_reaction()!)''";
				}
			}
			File13.Write( "chemistry-recipes.wiki", str + "\n|}" );
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Search Jobban Log", desc: "This searches all the active jobban entries for the current round and outputs the results to standard output.", group: "Debug" )]
		public void print_jobban_old_filter(  ) {
			dynamic filter = null;
			dynamic t = null;

			filter = Interface13.Input( "Contains what?", "Filter", null, null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( filter ) ) {
				return;
			}
			GlobalFuncs.to_chat( Task13.User, "<b>Jobbans active in this round.</b>" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.jobban_keylist )) {
				t = _a;
				

				if ( String13.FindIgnoreCase( t, filter, 1, 0 ) != 0 ) {
					GlobalFuncs.to_chat( Task13.User, "" + t );
				}
			}
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Print Jobban Log", desc: "This spams all the active jobban entries for the current round to standard output.", group: "Debug" )]
		public void print_jobban_old(  ) {
			dynamic t = null;

			GlobalFuncs.to_chat( Task13.User, "<b>Jobbans active in this round.</b>" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.jobban_keylist )) {
				t = _a;
				
				GlobalFuncs.to_chat( Task13.User, "" + t );
			}
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Kill Local Airgroup", desc: "Use this to allow manual manupliation of atmospherics.", group: "Debug" )]
		public void kill_airgroup(  ) {
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Jump to dead group", group: "Debug" )]
		public void jump_to_dead_group(  ) {
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Reload Admins", group: "Debug" )]
		public void reload_admins(  ) {
			
			if ( !GlobalFuncs.check_rights( 16 ) ) {
				return;
			}
			GlobalFuncs.message_admins( "" + Task13.User + " manually reloaded admins" );
			GlobalFuncs.load_admins();
			GlobalFuncs.feedback_add_details( "admin_verb", "RLDA" );
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Radio report", group: "Debug" )]
		public void radio_report(  ) {
			ByTable filters = null;
			string output = null;
			dynamic fq = null;
			RadioFrequency fqs = null;
			dynamic filter = null;
			ByTable f = null;
			dynamic device = null;

			filters = new ByTable()
				.Set( "1", "RADIO_TO_AIRALARM" )
				.Set( "2", "RADIO_FROM_AIRALARM" )
				.Set( "3", "RADIO_CHAT" )
				.Set( "4", "RADIO_ATMOSIA" )
				.Set( "5", "RADIO_NAVBEACONS" )
				.Set( "6", "RADIO_AIRLOCK" )
				.Set( "7", "RADIO_SECBOT" )
				.Set( "8", "RADIO_MULEBOT" )
				.Set( "_default", "NO_FILTER" )
			;
			output = "<b>Radio Report</b><hr>";

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.radio_controller.frequencies )) {
				fq = _c;
				
				output += "<b>Freq: " + fq + "</b><br>";
				fqs = GlobalVars.radio_controller.frequencies[fq];

				if ( !( fqs != null ) ) {
					output += "&nbsp;&nbsp;<b>ERROR</b><br>";
					continue;
				}

				foreach (dynamic _b in Lang13.Enumerate( fqs.devices )) {
					filter = _b;
					
					f = fqs.devices[filter];

					if ( !( f != null ) ) {
						output += "&nbsp;&nbsp;" + filters[filter] + ": ERROR<br>";
						continue;
					}
					output += "&nbsp;&nbsp;" + filters[filter] + ": " + f.len + "<br>";

					foreach (dynamic _a in Lang13.Enumerate( f )) {
						device = _a;
						

						if ( device is Obj ) {
							output += "&nbsp;&nbsp;&nbsp;&nbsp;" + device + " (" + device.x + "," + device.y + "," + device.z + " in area " + GlobalFuncs.get_area( device.loc ) + ")<br>";
						} else {
							output += "&nbsp;&nbsp;&nbsp;&nbsp;" + device + "<br>";
						}
					}
				}
			}
			Interface13.Browse( Task13.User, output, "window=radioreport" );
			GlobalFuncs.feedback_add_details( "admin_verb", "RR" );
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Unfreeze Everyone", group: "Debug" )]
		public void fix_next_move(  ) {
			
			if ( !( Task13.User.client.holder != null ) ) {
				return;
			}
			this._fix_delayers( "move" );
			this._fix_delayers( "click" );
			this._fix_delayers( "attack" );
			this._fix_delayers( "special" );
			GlobalFuncs.message_admins( "world.time = " + Game13.time );
			GlobalFuncs.feedback_add_details( "admin_verb", "UFE" );
			return;
		}

		// Function from file: diagnostics.dm
		public void _fix_delayers( string dtype = null ) {
			double largest_delay = 0;
			dynamic most_delayed_mob = null;
			double delay = 0;
			dynamic M = null;
			DelayController delayer = null;

			largest_delay = 0;
			most_delayed_mob = null;
			delay = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( !Lang13.Bool( M.client ) ) {
					continue;
				}
				delayer = M.vars["" + dtype + "_delayer"];

				if ( delayer.blocked() ) {
					delay = delayer.next_allowed - Game13.time;

					if ( delay > largest_delay ) {
						most_delayed_mob = M;
						largest_delay = delay;
					}
				}
				delayer.next_allowed = 0;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( most_delayed_mob ) + " had the largest " + dtype + " delay with " + largest_delay + " frames / " + largest_delay / 10 + " seconds!" );
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Display Air Status", group: "Debug" )]
		[VerbArg( 1, InputType.Tile )]
		public void air_status( dynamic target = null ) {
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Show Air Report", group: "Debug" )]
		public void air_report(  ) {
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Check Spiral Block", group: "Debug" )]
		public void check_spiral(  ) {
			dynamic epicenter = null;
			dynamic max_range = null;
			string inward = null;

			epicenter = GlobalFuncs.get_turf( Task13.User );
			max_range = Interface13.Input( "Set the max range", null, null, null, null, InputType.Num );
			inward = Interface13.Alert( "Which way?", "Spiral Block", "Inward", "Outward" );

			if ( inward == "Inward" ) {
				GlobalFuncs.spiral_block( epicenter, max_range, true, true );
			} else {
				GlobalFuncs.spiral_block( epicenter, max_range, false, true );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "View Marked Datum's Vars", desc: "Opens a VV menu for your marked datum.", group: "Debug" )]
		public void vv_marked_datum(  ) {
			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}

			if ( !Lang13.Bool( this.holder.marked_datum ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You do not have a marked datum!</span>" );
				return;
			}
			this.debug_variables( this.holder.marked_datum );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Create Datum", desc: "(datum path) Spawn a datum (turfs NOT supported)", group: "Debug" )]
		[VerbArg( 1, InputType.Str )]
		public void spawn_datum( string _object = null ) {
			ByTable matches = null;
			dynamic path = null;
			dynamic chosen = null;

			
			if ( !GlobalFuncs.check_rights( 4096 ) ) {
				return;
			}
			matches = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Game_Data) ) - Lang13.GetTypes( typeof(Tile) ) )) {
				path = _a;
				

				if ( String13.FindIgnoreCase( "" + path, _object, 1, 0 ) != 0 ) {
					matches.Add( path );
				}
			}

			if ( matches.len == 0 ) {
				GlobalFuncs.to_chat( Task13.User, "Unable to find any matches." );
				return;
			}
			chosen = null;

			if ( matches.len == 1 ) {
				chosen = matches[1];
			} else {
				chosen = Interface13.Input( "Select a datum type", "Spawn Datum", matches[1], null, matches, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( chosen ) ) {
					return;
				}
			}
			this.holder.marked_datum = Lang13.Call( chosen );
			GlobalFuncs.to_chat( Task13.User, "<span class='notify'>A reference to the new " + chosen + " has been stored in your marked datum.</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " spawned the datum " + chosen + " to his marked datum." );
			GlobalFuncs.feedback_add_details( "admin_verb", "SD" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Check Convertables", group: "Debug" )]
		public void check_convertables(  ) {
			string dat = null;
			dynamic M = null;

			
			if ( !( this.holder != null ) || !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				return;
			}
			dat = "";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( !Lang13.Bool( M.mind ) ) {
					dat += "" + M.real_name + "/(" + String13.CKey( M.key ) + "): <font color=grey><b>NO MIND</b></font></br>";
				} else if ( !( M is Mob_Living_Carbon_Human ) ) {
					dat += "" + M.real_name + "/(" + String13.CKey( M.key ) + "): <b>NOT HUMAN</b></br>";
				} else if ( !GlobalFuncs.is_convertable_to_cult( M.mind ) ) {
					dat += "" + M.real_name + "/(" + String13.CKey( M.key ) + "): <font color=red><b>UNCONVERTABLE</b></font></br>";
				} else if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M, "cultist" ) ) ) {
					dat += "" + M.real_name + "/(" + String13.CKey( M.key ) + "): <font color=red><b>JOBBANNED</b></font></br>";
				} else if ( Lang13.Bool( GlobalVars.ticker.mode.cult.Contains( M.mind ) ) ) {
					dat += "" + M.real_name + "/(" + String13.CKey( M.key ) + "): <font color=blue><b>CULTIST</b></font></br>";
				} else {
					dat += "" + M.real_name + "/(" + String13.CKey( M.key ) + "): <font color=green><b>CONVERTABLE</b></font></br>";
				}
			}
			GlobalFuncs.to_chat( Task13.User, dat );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Cure Disease", group: "Debug" )]
		public void cure_disease(  ) {
			ByTable disease_by_name = null;
			dynamic disease_name = null;
			int count = 0;
			Mob_Living_Carbon C = null;
			dynamic ID = null;
			dynamic DD = null;
			Disease D = null;
			Mob_Living_Carbon C2 = null;
			dynamic ID2 = null;
			dynamic DD2 = null;
			Disease D2 = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			disease_by_name = new ByTable().Set( "-Cure All-", null ) + GlobalVars.disease2_list + GlobalVars.active_diseases;
			disease_name = Interface13.Input( this, "Disease to cure?", null, null, GlobalFuncs.sortTim( disease_by_name, typeof(GlobalFuncs).GetMethod( "cmp_text_asc" ) ), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( disease_name ) ) {
				return;
			}
			count = 0;

			if ( disease_name == "-Cure All-" ) {
				
				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon) )) {
					C = _c;
					

					foreach (dynamic _a in Lang13.Enumerate( C.virus2 )) {
						ID = _a;
						

						if ( Lang13.Bool( ID ) && Lang13.Bool( C.virus2[ID] ) ) {
							DD = C.virus2[ID];
							DD.cure( C );
							count++;
						}
					}

					foreach (dynamic _b in Lang13.Enumerate( C.viruses, typeof(Disease) )) {
						D = _b;
						

						if ( D != null ) {
							D.f_cure( true );
							count++;
							GlobalVars.active_diseases.Remove( D );
						}
					}
				}
			} else {
				
				foreach (dynamic _f in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon) )) {
					C2 = _f;
					

					foreach (dynamic _d in Lang13.Enumerate( C2.virus2 )) {
						ID2 = _d;
						

						if ( ID2 == disease_name ) {
							DD2 = C2.virus2[ID2];
							DD2.cure( C2 );
							count++;
						}
					}

					foreach (dynamic _e in Lang13.Enumerate( C2.viruses, typeof(Disease) )) {
						D2 = _e;
						

						if ( D2 != null && D2.name == disease_name ) {
							D2.f_cure( true );
							count++;
							GlobalVars.active_diseases.Remove( D2 );
						}
					}
				}
			}
			GlobalFuncs.to_chat( this, new Txt( "<span class='notice'>Cured " ).item( count ).str( " mob" ).s().str( " of " ).item( ( disease_name == "-Cure All-" ? "all diseases." : "" + disease_name ) ).str( "</span>" ).ToString() );
			GlobalFuncs.log_admin( "" + this + "/(" + String13.CKey( this.key ) + " Cured all mobs of " + ( disease_name == "-Cure All-" ? "all diseases." : "" + disease_name ) );
			GlobalFuncs.message_admins( "" + this + "/(" + String13.CKey( this.key ) + " Cured all mobs of " + ( disease_name == "-Cure All-" ? "all diseases." : "" + disease_name ) );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Set Teleport-Here Preferences", group: "Debug" )]
		public void set_teleport_pref(  ) {
			this.teleport_here_pref = Interface13.Alert( "Do you want to teleport atoms in a flashy way or a discret way?", "Teleport-Here Preferences", "Flashy", "Stealthy" );

			switch ((string)( this.teleport_here_pref )) {
				case "Flashy":
					this.flashy_level = Interface13.Input( "How much flashy do you want it to be? 0=no effect; 1=flash; 2=screen-shake; 3=global X HAS RISEN announcement", "Flashy Preferences", null, null, null, InputType.Num );
					break;
				case "Stealthy":
					this.stealthy_level = Interface13.Input( "How long do you want the fade-in to last? (in tenth of seconds)", "Stealthy Preferences", null, null, null, InputType.Num );
					break;
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Check Bomb Impact", group: "Debug" )]
		public bool check_bomb(  ) {
			string newmode = null;
			dynamic epicenter = null;
			dynamic devastation_range = null;
			dynamic heavy_impact_range = null;
			dynamic light_impact_range = null;
			ByTable choices = null;
			dynamic choice = null;
			int max_range = 0;
			int x0 = 0;
			int y0 = 0;
			ByTable wipe_colors = null;
			dynamic T = null;
			double dist = 0;
			dynamic Trajectory = null;
			Obj_Machinery_Door D = null;
			dynamic T2 = null;

			newmode = Interface13.Alert( "Use the new method?", "Check Bomb Impact", "Yes", "No" );
			epicenter = GlobalFuncs.get_turf( Task13.User );
			devastation_range = 0;
			heavy_impact_range = 0;
			light_impact_range = 0;
			choices = new ByTable(new object [] { "Small Bomb", "Medium Bomb", "Big Bomb", "Custom Bomb" });
			choice = Interface13.Input( "What size explosion would you like to produce?", null, null, null, choices, InputType.Any );

			dynamic _a = choice; // Was a switch-case, sorry for the mess.
			if ( _a==null ) {
				return false;
			} else if ( _a=="Small Bomb" ) {
				devastation_range = 1;
				heavy_impact_range = 2;
				light_impact_range = 3;
			} else if ( _a=="Medium Bomb" ) {
				devastation_range = 2;
				heavy_impact_range = 3;
				light_impact_range = 4;
			} else if ( _a=="Big Bomb" ) {
				devastation_range = 3;
				heavy_impact_range = 5;
				light_impact_range = 7;
			} else if ( _a=="Custom Bomb" ) {
				devastation_range = Interface13.Input( "Devastation range (in tiles):", null, null, null, null, InputType.Num );
				heavy_impact_range = Interface13.Input( "Heavy impact range (in tiles):", null, null, null, null, InputType.Num );
				light_impact_range = Interface13.Input( "Light impact range (in tiles):", null, null, null, null, InputType.Num );
			}
			max_range = Num13.MaxInt( Convert.ToInt32( devastation_range ), Convert.ToInt32( heavy_impact_range ), Convert.ToInt32( light_impact_range ) );
			x0 = Convert.ToInt32( epicenter.x );
			y0 = Convert.ToInt32( epicenter.y );
			wipe_colors = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.trange( max_range, epicenter ) )) {
				T = _c;
				
				wipe_colors.Add( T );
				dist = GlobalFuncs.cheap_pythag( Convert.ToDouble( T.x - x0 ), Convert.ToDouble( T.y - y0 ) );

				if ( newmode == "Yes" ) {
					Trajectory = T;

					while (Trajectory != epicenter) {
						Trajectory = Map13.GetStepTowardsSimple( Trajectory, epicenter );

						if ( Trajectory.density && Lang13.Bool( Trajectory.explosion_block ) ) {
							dist += Convert.ToDouble( Trajectory.explosion_block );
						}

						foreach (dynamic _b in Lang13.Enumerate( Trajectory.contents, typeof(Obj_Machinery_Door) )) {
							D = _b;
							

							if ( D.density && D.explosion_block != 0 ) {
								dist += D.explosion_block;
							}
						}
					}
				}

				if ( dist < Convert.ToDouble( devastation_range ) ) {
					T.color = "red";
				} else if ( dist < Convert.ToDouble( heavy_impact_range ) ) {
					T.color = "yellow";
				} else if ( dist < Convert.ToDouble( light_impact_range ) ) {
					T.color = "blue";
				} else {
					continue;
				}
			}
			Task13.Sleep( 100 );

			foreach (dynamic _d in Lang13.Enumerate( wipe_colors )) {
				T2 = _d;
				
				T2.color = null;
			}
			return false;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "show mob list", group: "Debug" )]
		public void mob_list(  ) {
			int foundnull = 0;
			dynamic V = null;
			string msg = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			GlobalFuncs.to_chat( Task13.User, "mob list length is " + GlobalVars.mob_list.len );
			foundnull = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				V = _a;
				
				msg = "mob (" + V + ") is in slot " + GlobalVars.mob_list.Find( V );

				if ( !( V is Mob ) ) {
					
					if ( V == null ) {
						foundnull++;
					}
					msg = "<span class='danger'><font size=3>Non mob found in mob list " + ( V == null ? "null entry found at mob_list.Find(V)" : "" + V + "'s type is " + V.type ) + "</span></font>";
				}
				GlobalFuncs.to_chat( Task13.User, msg );
			}

			if ( foundnull != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "Found " + foundnull + " null entries in the mob list, running null clearer." );
				GlobalFuncs.listclearnulls( GlobalVars.mob_list );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Arena Control Panel", desc: "Control or Remove an existing Bomberman-type arena.", group: "Fun" )]
		public void control_bomberman_arena(  ) {
			dynamic arena_target = null;
			string arena_status = null;
			int i = 0;
			BombermanSpawn S = null;
			string j = null;
			BombermanSpawn S2 = null;
			ByTable choices = null;
			dynamic choice = null;
			Obj_Structure_Softwall L = null;
			Tile_Unsimulated_Wall_Bomberman L2 = null;

			
			if ( !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}

			if ( !( GlobalVars.arenas.len != 0 ) ) {
				GlobalFuncs.to_chat( Task13.User, "There are no arenas in the world!" );
				return;
			}
			arena_target = Interface13.Input( "Which arena do you wish to control?", "Arena Control Panel", null, null, GlobalVars.arenas, InputType.Any );
			GlobalFuncs.to_chat( Task13.User, "Arena Control Panel: " + arena_target );
			arena_status = "";

			dynamic _a = arena_target.status; // Was a switch-case, sorry for the mess.
			if ( _a==0 ) {
				arena_status = "SETUP";
			} else if ( _a==1 ) {
				arena_status = "AVAILABLE";
			} else if ( _a==2 ) {
				arena_status = "IN-GAME";
			} else if ( _a==3 ) {
				arena_status = "END-GAME";
			}
			GlobalFuncs.to_chat( Task13.User, "status: <b>" + arena_status + "</b>" );
			GlobalFuncs.to_chat( Task13.User, "violence mode: " + ( arena_target.violence ? "ON" : "OFF" ) );
			GlobalFuncs.to_chat( Task13.User, "opacity mode: " + ( Lang13.Bool( arena_target.opacity ) ? "ON" : "OFF" ) );

			if ( arena_status == "SETUP" ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Arena Under Construction</span>" );
			}

			if ( arena_status == "AVAILABLE" ) {
				i = 0;

				foreach (dynamic _b in Lang13.Enumerate( arena_target.spawns, typeof(BombermanSpawn) )) {
					S = _b;
					

					if ( S.availability ) {
						i++;
					}
				}
				GlobalFuncs.to_chat( Task13.User, "Available spawn points: <b>" + i + "</b>" );
			}

			if ( arena_status == "IN-GAME" || arena_status == "END-GAME" ) {
				j = "players: ";

				foreach (dynamic _c in Lang13.Enumerate( arena_target.spawns, typeof(BombermanSpawn) )) {
					S2 = _c;
					

					if ( S2.player_client != null ) {
						j += "<b>" + S2.player_client.key + "</b>, ";
					}
				}
				GlobalFuncs.to_chat( Task13.User, "" + j );
			}
			choices = new ByTable(new object [] { "CANCEL", "Close Arena(space)", "Close Arena(floors)", "Reset Arena", "Toggle Violence", "Toggle Opacity", "View Variables" });

			if ( arena_status == "AVAILABLE" ) {
				choices.Add( "Force Start" );
			}
			choice = Interface13.Input( "Which action do you wish to take?", "Arena Control Panel", null, null, choices, InputType.Any );

			dynamic _f = choice; // Was a switch-case, sorry for the mess.
			if ( _f=="CANCEL" ) {
				return;
			} else if ( _f=="Close Arena(space)" ) {
				arena_target.close();

				if ( GlobalVars.arenas.Contains( arena_target ) ) {
					GlobalVars.arenas.Remove( arena_target );
				}
			} else if ( _f=="Close Arena(floors)" ) {
				arena_target.close( 0 );

				if ( GlobalVars.arenas.Contains( arena_target ) ) {
					GlobalVars.arenas.Remove( arena_target );
				}
			} else if ( _f=="Reset Arena" ) {
				arena_target.reset();
			} else if ( _f=="Toggle Violence" ) {
				arena_target.violence = !arena_target.violence;
			} else if ( _f=="Toggle Opacity" ) {
				arena_target.opacity = !Lang13.Bool( arena_target.opacity );

				foreach (dynamic _d in Lang13.Enumerate( arena_target.swalls, typeof(Obj_Structure_Softwall) )) {
					L = _d;
					
					L.opacity = Lang13.Bool( arena_target.opacity );
				}

				foreach (dynamic _e in Lang13.Enumerate( arena_target.turfs, typeof(Tile_Unsimulated_Wall_Bomberman) )) {
					L2 = _e;
					
					L2.opacity = Lang13.Bool( arena_target.opacity );
				}
			} else if ( _f=="View Variables" ) {
				this.debug_variables( arena_target );
			} else if ( _f=="Force Start" ) {
				((BombermanArena)arena_target).start();
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Create a Bomberman Arena", desc: "Create a customizable Bomberman-type arena.", group: "Fun" )]
		public void create_bomberman_arena(  ) {
			ByTable arena_sizes = null;
			dynamic arena_type = null;
			dynamic T = null;
			BombermanArena A = null;

			
			if ( !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}
			arena_sizes = new ByTable(new object [] { "15x13 (2 players)", "15x15 (4 players)", "39x23 (10 players)" });
			arena_type = Interface13.Input( "What size for the arena?", "Arena Construction", null, null, arena_sizes, InputType.Any );
			T = GlobalFuncs.get_turf( this.mob );
			A = new BombermanArena( T, arena_type, this.mob );
			GlobalVars.arenas.Add( A );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Remove all that Bomberman shit", desc: "4th wall ointment.", group: "Fun" )]
		public void delete_all_bomberman(  ) {
			BombermanArena target = null;
			Obj_Structure_Bomberflame O = null;
			Obj_Structure_Bomberman O2 = null;
			Obj_Item_Weapon_Bomberman O3 = null;
			Ent_Static C = null;
			Obj_Item_Clothing_Suit_Space_Bomberman O4 = null;
			Ent_Static C2 = null;
			Obj_Item_Clothing_Head_Helmet_Space_Bomberman O5 = null;
			Ent_Static C3 = null;
			Obj_Structure_Softwall O6 = null;
			Tile_Unsimulated_Wall_Bomberman T = null;
			Obj_Structure_Powerup O7 = null;

			
			if ( !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}

			if ( Interface13.Alert( Task13.User, "Remove all Bomberman-related objects in the game world?", "Remove Bomberman", "Yes", "No" ) != "Yes" ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.arenas, typeof(BombermanArena) )) {
				target = _a;
				
				target.close();

				if ( GlobalVars.arenas.Contains( target ) ) {
					GlobalVars.arenas.Remove( target );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Structure_Bomberflame) )) {
				O = _b;
				
				GlobalFuncs.qdel( O );
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Structure_Bomberman) )) {
				O2 = _c;
				
				GlobalFuncs.qdel( O2 );
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Item_Weapon_Bomberman) )) {
				O3 = _d;
				

				if ( O3.loc is Mob_Living_Carbon ) {
					C = O3.loc;
					((Mob)C).u_equip( O3, true );
					O3.loc = C.loc;
				}
				GlobalFuncs.qdel( O3 );
			}

			foreach (dynamic _e in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Item_Clothing_Suit_Space_Bomberman) )) {
				O4 = _e;
				

				if ( O4.loc is Mob_Living_Carbon ) {
					C2 = O4.loc;
					((Mob)C2).u_equip( O4, true );
					O4.loc = C2.loc;
				}
				GlobalFuncs.qdel( O4 );
			}

			foreach (dynamic _f in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Item_Clothing_Head_Helmet_Space_Bomberman) )) {
				O5 = _f;
				

				if ( O5.loc is Mob_Living_Carbon ) {
					C3 = O5.loc;
					((Mob)C3).u_equip( O5, true );
					O5.loc = C3.loc;
				}
				GlobalFuncs.qdel( O5 );
			}

			foreach (dynamic _g in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Structure_Softwall) )) {
				O6 = _g;
				
				GlobalFuncs.qdel( O6 );
			}

			foreach (dynamic _h in Lang13.Enumerate( GlobalVars.turfs, typeof(Tile_Unsimulated_Wall_Bomberman) )) {
				T = _h;
				
				T.ChangeTurf( typeof(Tile_Simulated_Wall) );
			}

			foreach (dynamic _i in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Structure_Powerup) )) {
				O7 = _i;
				
				GlobalFuncs.qdel( O7 );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Delete every Adminbus", desc: "When the world cannot handle them anymore.", group: "Fun" )]
		public void delete_all_adminbus(  ) {
			Obj_Structure_Bed_Chair_Vehicle_Adminbus AB = null;

			
			if ( Interface13.Alert( Task13.User, "Delete every single Adminbus in the game world?", "Delete Adminbus", "Yes", "No" ) != "Yes" ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Structure_Bed_Chair_Vehicle_Adminbus) )) {
				AB = _a;
				
				AB.Adminbus_Deletion();
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Toggle Invulnerability", desc: "Make the target atom invulnerable to all form of damage.", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void make_invulnerable( dynamic M = null ) {
			bool isinvuln = false;

			isinvuln = false;

			if ( Lang13.Bool( M.flags & 128 ) ) {
				isinvuln = true;
			}

			switch ((bool)( isinvuln )) {
				case false:
					
					if ( Interface13.Alert( Task13.User, "Make the target atom invulnerable to all form of damage?", "Toggle Invulnerability", "Yes", "No" ) != "Yes" ) {
						return;
					}
					M.flags |= 128;
					break;
				case true:
					
					if ( Interface13.Alert( Task13.User, "Make the target atom vulnerable again?", "Toggle Invulnerability", "Yes", "No" ) != "Yes" ) {
						return;
					}
					M.flags &= 65407;
					break;
			}
			GlobalFuncs.log_admin( "" + String13.CKey( this.key ) + "/(" + this.mob + ") has toggled " + M + "'s invulnerability " + ( Lang13.Bool( M.flags & 128 ) ? "on" : "off" ) );
			GlobalFuncs.message_admins( "" + String13.CKey( this.key ) + "/(" + this.mob + ") has toggled " + M + "'s invulnerability " + ( Lang13.Bool( M.flags & 128 ) ? "on" : "off" ) );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Cluwne", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public Mob_Living_SimpleAnimal_Hostile_Retaliate_Cluwne cmd_admin_cluwneize( dynamic M = null ) {
			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return null;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				return ((Mob_Living_Carbon_Human)M).Cluwneize();
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into a cluwne.</span>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "MKCLU" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has cluwne-ified " + M.key + "." );
			} else {
				Interface13.Alert( "Invalid mob, needs to be a human." );
			}
			return null;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Reset Style Sheet", desc: "Reset the Style Sheet (restore to default).", group: "Server" )]
		public void reset_style_sheet(  ) {
			dynamic C = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.clients )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}
				Interface13.WindowSet( C, null, "outputwindow.output.style=" + @"""body 					{font-family: Verdana, sans-serif;}
h1, h2, h3, h4, h5, h6	{color: #0000ff;font-family: Georgia, Verdana, sans-serif;}
em						{font-style: normal;	font-weight: bold;}
.motd					{color: #638500;	font-family: Verdana, sans-serif;}
.motd h1, .motd h2, .motd h3, .motd h4, .motd h5, .motd h6
						{color: #638500;	text-decoration: underline;}
.motd a, .motd a:link, .motd a:visited, .motd a:active, .motd a:hover
						{color: #638500;}
.prefix					{					font-weight: bold;}
.ooc					{					font-weight: bold;}
.adminobserverooc		{color: #0099cc;	font-weight: bold;}
.adminooc				{color: #b82e00;	font-weight: bold;}
.adminobserver			{color: #996600;	font-weight: bold;}
.admin					{color: #386aff;	font-weight: bold;}
.adminsay				{color: #9611D4;	font-weight: bold;}
.name					{					font-weight: bold;}
.say					{}
.siliconsay				{font-family: 'Courier New', Courier, monospace;}
.deadsay				{color: #5c00e6;}
.radio					{color: #008000;}
.deptradio				{color: #993399;}
.comradio				{color: #193A7A;}
.syndradio				{color: #6d3f40;}
.dsquadradio			{color: #686868;}
.resteamradio			{color: #18BC46;}
.aiprivradio			{color: #ff00ff;}
.centradio				{color: #5C5C8A;}
.secradio				{color: #A30000;}
.engradio				{color: #A66300;}
.medradio				{color: #008160;}
.sciradio				{color: #993399;}
.supradio				{color: #5F4519;}
.serradio				{color: #3399CC;}
.djradio				{color: #663300;}
.mommi					{color: navy;}
.alert					{color: #ff0000;}
h1.alert, h2.alert		{color: #000000;}
.emote					{					font-style: italic;}
.selecteddna			{color: #FFFFFF; 	background-color: #001B1B}
.attack					{color: #ff0000;}
.moderate				{color: #CC0000;}
.disarm					{color: #990000;}
.passive				{color: #660000;}
.danger					{color: #ff0000;	font-weight: bold;}
.userdanger				{color: #ff0000;	font-weight: bold;	font-size: 120%}
.warning				{color: #ff0000;	font-style: italic;}
.sinister				{color: #800080;	font-weight: bold;	font-style: italic;} /* /vg/ */
.blob					{color: #006221;	font-weight: bold;	font-style: italic;}
.confirm				{color: #00af3b;}
.rose					{color: #ff5050;}
.info					{color: #0000CC;}
.notice					{color: #000099;}
.bnotice				{color: #000099; 	font-weight: bold;}
.sans					{font-family: 'Comic Sans MS', cursive, sans-serif;}
.alien					{color: #543354;}
.ancient				{color: #008B8B;	font-stye: italic;}
.newscaster				{color: #800000;}
.mod					{color: #735638;	font-weight: bold;}
.modooc					{color: #000000;	font-weight: bold;}
.adminmod				{color: #402A14;	font-weight: bold;}
.tajaran				{color: #803B56;}
.skrell					{color: #00CED1;}
.solcom					{color: #22228B;}
.soghun					{color: #228B22;}
.vox					{color: #AA00AA;}
.rough					{font-family: 'Trebuchet MS', cursive, sans-serif;}
.say_quote				{font-family: Georgia, Verdana, sans-serif;}
.cult					{color: #800080; font-weight: bold; font-style: italic;}
.interface				{color: #330033;}
.big					{font-size: 150%;}
.bold					{font-weight: bold;}
.center					{text-align: center;}
.red					{color: #FF0000;}
.grey					{color: #585858; font-family: Dotum, sans-serif;}
.skeleton				{color: #585858; font-weight: bold; font-style: italic;}
.gutter					{color: #61380B; font-style: italic;}
/* /vg/ */
.good					{color: green;}
.average				{color: #FF8000;}
.bad					{color: #FF0000;}
/* /vg/ Saycode Rewrite */
.italics, .talkinto		{font-style:italic;}
.whisper				{font-style:italic;color:#333333;}
/* Recruiting stuff */
.recruit 				{color: #5c00e6; font-weight: bold; font-style: italic;}
" + ";" );
			}
			GlobalVars.config.world_style_config = @"""body 					{font-family: Verdana, sans-serif;}
h1, h2, h3, h4, h5, h6	{color: #0000ff;font-family: Georgia, Verdana, sans-serif;}
em						{font-style: normal;	font-weight: bold;}
.motd					{color: #638500;	font-family: Verdana, sans-serif;}
.motd h1, .motd h2, .motd h3, .motd h4, .motd h5, .motd h6
						{color: #638500;	text-decoration: underline;}
.motd a, .motd a:link, .motd a:visited, .motd a:active, .motd a:hover
						{color: #638500;}
.prefix					{					font-weight: bold;}
.ooc					{					font-weight: bold;}
.adminobserverooc		{color: #0099cc;	font-weight: bold;}
.adminooc				{color: #b82e00;	font-weight: bold;}
.adminobserver			{color: #996600;	font-weight: bold;}
.admin					{color: #386aff;	font-weight: bold;}
.adminsay				{color: #9611D4;	font-weight: bold;}
.name					{					font-weight: bold;}
.say					{}
.siliconsay				{font-family: 'Courier New', Courier, monospace;}
.deadsay				{color: #5c00e6;}
.radio					{color: #008000;}
.deptradio				{color: #993399;}
.comradio				{color: #193A7A;}
.syndradio				{color: #6d3f40;}
.dsquadradio			{color: #686868;}
.resteamradio			{color: #18BC46;}
.aiprivradio			{color: #ff00ff;}
.centradio				{color: #5C5C8A;}
.secradio				{color: #A30000;}
.engradio				{color: #A66300;}
.medradio				{color: #008160;}
.sciradio				{color: #993399;}
.supradio				{color: #5F4519;}
.serradio				{color: #3399CC;}
.djradio				{color: #663300;}
.mommi					{color: navy;}
.alert					{color: #ff0000;}
h1.alert, h2.alert		{color: #000000;}
.emote					{					font-style: italic;}
.selecteddna			{color: #FFFFFF; 	background-color: #001B1B}
.attack					{color: #ff0000;}
.moderate				{color: #CC0000;}
.disarm					{color: #990000;}
.passive				{color: #660000;}
.danger					{color: #ff0000;	font-weight: bold;}
.userdanger				{color: #ff0000;	font-weight: bold;	font-size: 120%}
.warning				{color: #ff0000;	font-style: italic;}
.sinister				{color: #800080;	font-weight: bold;	font-style: italic;} /* /vg/ */
.blob					{color: #006221;	font-weight: bold;	font-style: italic;}
.confirm				{color: #00af3b;}
.rose					{color: #ff5050;}
.info					{color: #0000CC;}
.notice					{color: #000099;}
.bnotice				{color: #000099; 	font-weight: bold;}
.sans					{font-family: 'Comic Sans MS', cursive, sans-serif;}
.alien					{color: #543354;}
.ancient				{color: #008B8B;	font-stye: italic;}
.newscaster				{color: #800000;}
.mod					{color: #735638;	font-weight: bold;}
.modooc					{color: #000000;	font-weight: bold;}
.adminmod				{color: #402A14;	font-weight: bold;}
.tajaran				{color: #803B56;}
.skrell					{color: #00CED1;}
.solcom					{color: #22228B;}
.soghun					{color: #228B22;}
.vox					{color: #AA00AA;}
.rough					{font-family: 'Trebuchet MS', cursive, sans-serif;}
.say_quote				{font-family: Georgia, Verdana, sans-serif;}
.cult					{color: #800080; font-weight: bold; font-style: italic;}
.interface				{color: #330033;}
.big					{font-size: 150%;}
.bold					{font-weight: bold;}
.center					{text-align: center;}
.red					{color: #FF0000;}
.grey					{color: #585858; font-family: Dotum, sans-serif;}
.skeleton				{color: #585858; font-weight: bold; font-style: italic;}
.gutter					{color: #61380B; font-style: italic;}
/* /vg/ */
.good					{color: green;}
.average				{color: #FF8000;}
.bad					{color: #FF0000;}
/* /vg/ Saycode Rewrite */
.italics, .talkinto		{font-style:italic;}
.whisper				{font-style:italic;color:#333333;}
/* Recruiting stuff */
.recruit 				{color: #5c00e6; font-weight: bold; font-style: italic;}
";
			GlobalFuncs.message_admins( "The style sheet has been reset by " + this.ckey );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Reload Style Sheet", desc: "Reload the Style Sheet (be careful).", group: "Server" )]
		public void reload_style_sheet(  ) {
			dynamic C = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.clients )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}
				Interface13.WindowSet( C, null, "outputwindow.output.style=" + GlobalVars.config.world_style_config + ";" );
			}
			GlobalFuncs.message_admins( "The style sheet has been reloaded by " + this.ckey );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Disable Blood Virus Spreading", group: "Debug" )]
		public void disable_bloodvirii(  ) {
			GlobalVars.blood_virus_spreading_disabled = !GlobalVars.blood_virus_spreading_disabled;

			if ( GlobalVars.blood_virus_spreading_disabled ) {
				GlobalFuncs.message_admins( "" + this.ckey + " disabled findAirborneVirii." );
			} else {
				GlobalFuncs.message_admins( "" + this.ckey + " enabled findAirborneVirii." );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Dispense Money", desc: "Honk", group: "Fun" )]
		public void gib_money(  ) {
			dynamic response = null;

			response = Interface13.Input( this, "How much moneys?", null, null, null, InputType.Num );

			if ( Convert.ToDouble( response ) < 1 ) {
				return;
			}
			GlobalFuncs.dispense_cash( response, this.mob.loc );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Dump Del Profiling", group: "Debug" )]
		public void cmd_admin_dump_delprofile(  ) {
			string date_string = null;
			dynamic F = null;
			dynamic typepath = null;
			dynamic ns = null;
			dynamic typepath2 = null;
			dynamic ns2 = null;
			dynamic typepath3 = null;
			dynamic ns3 = null;

			date_string = String13.FormatTime( Game13.realtime, "YYYY-MM-DD" );
			F = new File( "data/logs/profiling/" + date_string + "_del_profiling.csv" );
			File13.Delete( F );
			GlobalFuncs.to_chat( F, "type,deletes" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.del_profiling )) {
				typepath = _a;
				
				ns = GlobalVars.del_profiling[typepath];
				GlobalFuncs.to_chat( F, "" + typepath + "," + ns );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + F + ".</span>" );
			F = new File( "data/logs/profiling/" + date_string + "_gdel_profiling.csv" );
			File13.Delete( F );
			GlobalFuncs.to_chat( F, "type,soft deletes" );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.gdel_profiling )) {
				typepath2 = _b;
				
				ns2 = GlobalVars.gdel_profiling[typepath2];
				GlobalFuncs.to_chat( F, "" + typepath2 + "," + ns2 );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + F + ".</span>" );
			F = new File( "data/logs/profiling/" + date_string + "_ghdel_profiling.csv" );
			File13.Delete( F );
			GlobalFuncs.to_chat( F, "type,hard deletes" );

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.ghdel_profiling )) {
				typepath3 = _c;
				
				ns3 = GlobalVars.ghdel_profiling[typepath3];
				GlobalFuncs.to_chat( F, "" + typepath3 + "," + ns3 );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + F + ".</span>" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Dump Machine type list", group: "Debug" )]
		public void cmd_admin_dump_machine_type_list(  ) {
			string date_string = null;
			dynamic F = null;
			ByTable machineinstances = null;
			Ent_Static typepath = null;
			dynamic T = null;
			dynamic count = null;
			Ent_Static typepath2 = null;
			dynamic T2 = null;
			dynamic count2 = null;

			
			if ( !( GlobalVars.machines.len != 0 ) && !( GlobalVars.power_machines.len != 0 ) ) {
				GlobalFuncs.to_chat( Task13.User, "Machines has no length!" );
				return;
			}
			date_string = String13.FormatTime( Game13.realtime, "YYYY-MM-DD" );
			F = new File( "data/logs/profiling/" + date_string + "_machine_instances.csv" );
			File13.Delete( F );
			GlobalFuncs.to_chat( F, "type,count" );
			machineinstances = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Ent_Static) )) {
				typepath = _a;
				

				if ( machineinstances.Contains( !( typepath.type != null ) ) ) {
					machineinstances["" + typepath.type] = 0;
				}
				machineinstances["" + typepath.type] += 1;
			}

			foreach (dynamic _b in Lang13.Enumerate( machineinstances )) {
				T = _b;
				
				count = machineinstances[T];
				GlobalFuncs.to_chat( F, "" + T + "," + count );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + F + ".</span>" );
			F = new File( "data/logs/profiling/" + date_string + "_power_machine_instances.csv" );
			File13.Delete( F );
			GlobalFuncs.to_chat( F, "type,count" );
			machineinstances.len = 0;

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.power_machines, typeof(Ent_Static) )) {
				typepath2 = _c;
				

				if ( machineinstances.Contains( !( typepath2.type != null ) ) ) {
					machineinstances["" + typepath2.type] = 0;
				}
				machineinstances["" + typepath2.type] += 1;
			}

			foreach (dynamic _d in Lang13.Enumerate( machineinstances )) {
				T2 = _d;
				
				count2 = machineinstances[T2];
				GlobalFuncs.to_chat( F, "" + T2 + "," + count2 );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + F + ".</span>" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Dump Machine and Object Profiling", group: "Debug" )]
		public void cmd_admin_dump_macprofile(  ) {
			string date_string = null;
			dynamic F = null;
			dynamic typepath = null;
			dynamic ns = null;
			dynamic FF = null;
			dynamic typepath2 = null;
			dynamic ns2 = null;

			date_string = String13.FormatTime( Game13.realtime, "YYYY-MM-DD" );
			F = new File( "data/logs/profiling/" + date_string + "_machine_profiling.csv" );
			File13.Delete( F );
			GlobalFuncs.to_chat( F, "type,nanoseconds" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machine_profiling )) {
				typepath = _a;
				
				ns = GlobalVars.machine_profiling[typepath];
				GlobalFuncs.to_chat( F, "" + typepath + "," + ns );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + F + "</span>" );
			FF = new File( "data/logs/profiling/" + date_string + "_object_profiling.csv" );
			File13.Delete( FF );
			GlobalFuncs.to_chat( FF, "type,nanoseconds" );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.object_profiling )) {
				typepath2 = _b;
				
				ns2 = GlobalVars.object_profiling[typepath2];
				GlobalFuncs.to_chat( FF, "" + typepath2 + "," + ns2 );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + FF + ".</span>" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Find broken blood tracks", group: "Debug" )]
		public void cmd_admin_find_bad_blood_tracks(  ) {
			string date_string = null;
			dynamic F = null;
			Obj_Effect_Decal_Cleanable_Blood_Tracks T = null;
			dynamic dat = null;
			dynamic b = null;
			dynamic key = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			GlobalFuncs.message_admins( "" + this + " used find broken blood tracks" );
			date_string = String13.FormatTime( Game13.realtime, "YYYY-MM-DD" );
			F = new File( "data/logs/profiling/" + date_string + "_broken_blood.log" );
			File13.Delete( F );

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.blood_list, typeof(Obj_Effect_Decal_Cleanable_Blood_Tracks) )) {
				T = _c;
				

				if ( !( T.loc != null ) ) {
					GlobalFuncs.to_chat( F, "Found " + T + " in a null location but still in the blood list" );
					GlobalFuncs.to_chat( F, "--------------------------------------" );
					continue;
				}
				dat = null;

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					b = _b;
					

					if ( T.setdirs["" + b] == null ) {
						dat += "" + T + " (" + GlobalFuncs.formatJumpTo( T ) + ") had a bad directional " + b + " or bad list " + T.setdirs.len;
						dat += "Setdirs keys:";

						foreach (dynamic _a in Lang13.Enumerate( T.setdirs )) {
							key = _a;
							
							dat += key;
						}
					}
				}
				dat += "--------------------------------------";
				GlobalFuncs.to_chat( F, dat );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + F + "</span>" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Dump Instance Counts", desc: "MEMORY PROFILING IS TOO HIGH TECH", group: "Debug" )]
		public void cmd_admin_dump_instances(  ) {
			string date_string = null;
			dynamic F = null;
			dynamic key = null;

			date_string = String13.FormatTime( Game13.realtime, "YYYY-MM-DD" );
			F = new File( "data/logs/profiling/" + date_string + "_instances.csv" );
			File13.Delete( F );
			GlobalFuncs.to_chat( F, "Types,Number of Instances" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.type_instances )) {
				key = _a;
				
				GlobalFuncs.to_chat( F, "" + key + "," + GlobalVars.type_instances[key] );
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Dumped to " + F + "</span>" );
			return;
		}

		// Function from file: debug.dm
		public void cmd_admin_toggle_block( dynamic M = null, double? block = null ) {
			string state = null;
			dynamic blockname = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon ) {
				((Dna)M.dna).SetSEState( block, !((Dna)M.dna).GetSEState( block ) );
				GlobalFuncs.genemutcheck( M, block, null, true );
				((Mob)M).update_mutations();
				state = "" + ( ((Dna)M.dna).GetSEState( block ) ? "on" : "off" );
				blockname = GlobalVars.assigned_blocks[block];
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has toggled " + M.key + "'s " + blockname + " block " + state + "!" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has toggled " + M.key + "'s " + blockname + " block " + state + "!" );
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Debug Mob Lists", desc: "For when you just gotta know", group: "Debug" )]
		public void cmd_debug_mob_lists(  ) {
			
			dynamic _a = Interface13.Input( "Which list?", null, null, null, new ByTable(new object [] { "Players", "Admins", "Mobs", "Living Mobs", "Dead Mobs", "Clients" }), InputType.Any ); // Was a switch-case, sorry for the mess.
			if ( _a=="Players" ) {
				GlobalFuncs.to_chat( Task13.User, GlobalFuncs.list2text( GlobalVars.player_list, "," ) );
			} else if ( _a=="Admins" ) {
				GlobalFuncs.to_chat( Task13.User, GlobalFuncs.list2text( GlobalVars.admins, "," ) );
			} else if ( _a=="Mobs" ) {
				GlobalFuncs.to_chat( Task13.User, GlobalFuncs.list2text( GlobalVars.mob_list, "," ) );
			} else if ( _a=="Living Mobs" ) {
				GlobalFuncs.to_chat( Task13.User, GlobalFuncs.list2text( GlobalVars.living_mob_list, "," ) );
			} else if ( _a=="Dead Mobs" ) {
				GlobalFuncs.to_chat( Task13.User, GlobalFuncs.list2text( GlobalVars.dead_mob_list, "," ) );
			} else if ( _a=="Clients" ) {
				GlobalFuncs.to_chat( Task13.User, GlobalFuncs.list2text( GlobalVars.clients, "," ) );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Start Atmos", desc: "WOW ATMOS DID THEIR JOBS!!!1", group: "Debug" )]
		public void setup_atmos(  ) {
			Obj_Machinery_Atmospherics_Binary_Pump P = null;
			Obj_Machinery_Atmospherics_Unary_VentPump_HighVolume P2 = null;
			Obj_Machinery_Atmospherics_Trinary_Filter F = null;

			
			if ( Interface13.Alert( "Are you sure? This will completely fuck over your round!", null, "Yes", "No" ) != "Yes" ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " haxed atmos." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " haxed atmos.</span>" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Binary_Pump) )) {
				P = _a;
				
				P.target_pressure = 4500;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Unary_VentPump_HighVolume) )) {
				P2 = _b;
				

				if ( P2.id_tag == "air_out" ) {
					P2.internal_pressure_bound = 4500;
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Trinary_Filter) )) {
				F = _c;
				
				F.target_pressure = 4500;
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Free Power", desc: "Replaces all SMES on the map with magical ones.", group: "Debug" )]
		public void cheat_power(  ) {
			Obj_Machinery_Power_Battery_Smes SMES = null;
			Ent_Static T = null;
			Obj_Machinery_Power_Battery_Smes_Infinite magic = null;

			
			if ( Interface13.Alert( "Are you sure? This will completely fuck over your round!", null, "Yes", "No" ) != "Yes" ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " haxed the powergrid with magic SMES." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " haxed the powergrid with magic SMES.</span>" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Battery_Smes) )) {
				SMES = _a;
				
				T = SMES.loc;
				Lang13.Delete( SMES );
				SMES = null;
				magic = new Obj_Machinery_Power_Battery_Smes_Infinite( T );
				magic.connect_to_network();
				magic.output = 200000;
				magic.online = true;
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Start Singularity", desc: "Sets up the singularity and all machines to get power flowing through the station", group: "Debug" )]
		public void startSinglo(  ) {
			Obj_Machinery_Power_Emitter E = null;
			Obj_Machinery_FieldGenerator F = null;
			Obj_Machinery_Power_RadCollector Rad = null;
			Obj_Item_Weapon_Tank_Plasma Plasma = null;
			Obj_Machinery_TheSingularitygen G = null;
			Obj_Machinery_Singularity S = null;
			Obj_Machinery_Power_Battery_Smes SMES = null;

			
			if ( Interface13.Alert( "Are you sure? This will start up the engine. Should only be used during debug!", null, "Yes", "No" ) != "Yes" ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set up the singulo." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " set up the singulo.</span>" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Emitter) )) {
				E = _a;
				

				if ( Lang13.Bool( E.anchored ) ) {
					E.turn_on();
					E.investigation_log( "singulo", "turned <font color='green'>on</font> <font color='red'>via Start Singularity Debug verb.</font>" );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.field_gen_list, typeof(Obj_Machinery_FieldGenerator) )) {
				F = _b;
				

				if ( Lang13.Bool( F.anchored ) ) {
					F.turn_on();
					F.investigation_log( "singulo", "<font color='green'>activated</font> <font color='red'>via Start Singularity Debug verb.</font>" );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.rad_collectors, typeof(Obj_Machinery_Power_RadCollector) )) {
				Rad = _c;
				

				if ( Lang13.Bool( Rad.anchored ) ) {
					
					if ( !Lang13.Bool( Rad.P ) ) {
						Plasma = new Obj_Item_Weapon_Tank_Plasma( Rad );
						Plasma.air_contents.toxins = 100;
						Plasma.air_contents.temperature = 73.15;
						Rad.drain_ratio = 0;
						Rad.P = Plasma;
						Plasma.loc = Rad;
					}

					if ( !Rad.active ) {
						Rad.toggle_power();
						Rad.locked = true;
					}
				}
			}
			Task13.Sleep( 200 );

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_TheSingularitygen) )) {
				G = _d;
				

				if ( Lang13.Bool( G.anchored ) ) {
					S = new Obj_Machinery_Singularity( GlobalFuncs.get_turf( G ), 50 );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						Lang13.Delete( G );
						G = null;
						return;
					}));
					S.energy = 1250;
					S.current_size = 7;
					S.icon = "icons/effects/224x224.dmi";
					S.icon_state = "singularity_s7";
					S.pixel_x = -96;
					S.pixel_y = -96;
					S.grav_pull = 0;
					S.dissipate = false;
					S.consume_range = 0;
				}
			}
			Task13.Sleep( 50 );

			foreach (dynamic _e in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Battery_Smes) )) {
				SMES = _e;
				

				if ( Lang13.Bool( SMES.anchored ) ) {
					SMES.connect_to_network();
					SMES.chargemode = true;
					SMES.online = true;
				}
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Select equipment", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_dress( Mob_Living_Carbon_Human M = null ) {
			ByTable dresspacks = null;
			dynamic dostrip = null;
			dynamic dresscode = null;
			Obj_Item I = null;
			Obj_Item_Weapon_Tank_Jetpack_Oxygen J = null;
			Obj_Item_Weapon_Tank_Jetpack_Oxygen J2 = null;
			Obj_Item_Weapon_Storage_Backpack backpack = null;
			Obj_Item I2 = null;
			Obj_Item_Weapon_ReagentContainers_Glass_Bucket bucket = null;
			Obj_Item_Weapon_Card_Id W = null;
			Obj_Item_Weapon fire_axe = null;
			Obj_Item_Weapon fire_axe2 = null;
			Obj_Item carried_item = null;
			Obj_Item_Weapon_Storage_Secure_Briefcase sec_briefcase = null;
			Obj_Item briefcase_item = null;
			int? i = null;
			Obj_Item_Device_Pda_Heads pda = null;
			Obj_Item_Weapon_Card_Id_Syndicate W2 = null;
			Obj_Item_Device_Pda_Heads pda2 = null;
			Obj_Item_Weapon_Card_Id W3 = null;
			Obj_Item_Device_Pda_Heads pda3 = null;
			Obj_Item_Weapon_Card_Id_Centcom W4 = null;
			Obj_Item_Device_Pda_Heads pda4 = null;
			Obj_Item_Weapon_Card_Id_Centcom W5 = null;
			Obj_Item_Weapon_Card_Id W6 = null;
			Obj_Item_Weapon_Card_Id W7 = null;
			Obj_Item_Weapon_Card_Id W8 = null;
			Obj_Item_Clothing_Suit_Space_Bomberman bombsuit = null;
			ByTable randomhexes = null;
			Obj_Item_Clothing C = null;

			
			if ( !( M is Mob_Living_Carbon_Human ) ) {
				Interface13.Alert( "Invalid mob" );
				return;
			}
			dresspacks = new ByTable(new object [] { 
				"strip", 
				"Engineer RIG", 
				"CE RIG", 
				"Mining RIG", 
				"Syndi RIG", 
				"Wizard RIG", 
				"Medical RIG", 
				"Atmos RIG", 
				"standard space gear", 
				"tournament standard red", 
				"tournament standard green", 
				"tournament gangster", 
				"tournament chef", 
				"tournament janitor", 
				"pirate", 
				"space pirate", 
				"soviet admiral", 
				"tunnel clown", 
				"masked killer", 
				"assassin", 
				"death commando", 
				"syndicate commando", 
				"special ops officer", 
				"blue wizard", 
				"red wizard", 
				"marisa wizard", 
				"emergency rescue team", 
				"nanotrasen representative", 
				"nanotrasen officer", 
				"nanotrasen captain", 
				"Bomberman", 
				"Bomberman(arena)"
			 });
			dostrip = Interface13.Input( "Do you want to strip " + M + " before equipping them? (0=no, 1=yes)", "STRIPTEASE", null, null, new ByTable(new object [] { 0, 1 }), InputType.Null | InputType.Any );

			if ( dostrip == null ) {
				return;
			}
			dresscode = Interface13.Input( "Select dress for " + M, "Robust quick dress shop", null, null, dresspacks, InputType.Null | InputType.Any );

			if ( dresscode == null ) {
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SEQ" );

			if ( Lang13.Bool( dostrip ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I = _a;
					

					if ( I is Obj_Item_Weapon_Implant ) {
						continue;
					}
					Lang13.Delete( I );
					I = null;
				}
			}

			dynamic _f = dresscode; // Was a switch-case, sorry for the mess.
			if ( _f=="strip" ) {
				
			} else if ( _f=="standard space gear" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Grey( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space( M ), 11 );
				J = new Obj_Item_Weapon_Tank_Jetpack_Oxygen( M );
				M.equip_to_slot_or_del( J, 1 );
				J.__CallVerb("Toggle Jetpack" );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Breath( M ), 2 );
				J.Topic( null, new ByTable().Set( "stat", 1 ) );
			} else if ( _f=="Engineer RIG" || _f=="CE RIG" || _f=="Mining RIG" || _f=="Syndi RIG" || _f=="Wizard RIG" || _f=="Medical RIG" || _f=="Atmos RIG" ) {
				
				if ( dresscode == "Engineer RIG" ) {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig( M ), 13 );
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig( M ), 11 );
				} else if ( dresscode == "CE RIG" ) {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Elite( M ), 13 );
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Elite( M ), 11 );
				} else if ( dresscode == "Mining RIG" ) {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Mining( M ), 13 );
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Mining( M ), 11 );
				} else if ( dresscode == "Syndi RIG" ) {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Syndi( M ), 13 );
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Syndi( M ), 11 );
				} else if ( dresscode == "Wizard RIG" ) {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Wizard( M ), 13 );
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Wizard( M ), 11 );
				} else if ( dresscode == "Medical RIG" ) {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Medical( M ), 13 );
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Medical( M ), 11 );
				} else if ( dresscode == "Atmos RIG" ) {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Atmos( M ), 13 );
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Atmos( M ), 11 );
				}
				J2 = new Obj_Item_Weapon_Tank_Jetpack_Oxygen( M );
				M.equip_to_slot_or_del( J2, 1 );
				J2.__CallVerb("Toggle Jetpack" );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Breath( M ), 2 );
				J2.Topic( null, new ByTable().Set( "stat", 1 ) );
			} else if ( _f=="tournament standard red" || _f=="tournament standard green" ) {
				
				if ( dresscode == "tournament standard red" ) {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Red( M ), 14 );
				} else {
					M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Green( M ), 14 );
				}
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Armor_Vest( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Thunderdome( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_PulseRifle_Destroyer( M ), 5 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Kitchen_Utensil_Knife_Large( M ), 4 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Grenade_Smokebomb( M ), 16 );
			} else if ( _f=="tournament gangster" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Det( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Storage_DetSuit( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal_Monocle( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_DetHat( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_CloakingDevice( M ), 16 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Projectile( M ), 5 );
				M.equip_to_slot_or_del( new Obj_Item_AmmoStorage_Box_A357( M ), 15 );
			} else if ( _f=="tournament chef" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Rank_Chef( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Chef( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Chefhat( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Kitchen_Rollingpin( M ), 5 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Kitchen_Utensil_Knife_Large( M ), 4 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Kitchen_Utensil_Knife_Large( M ), 16 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Kitchen_Utensil_Knife_Large( M ), 17 );
			} else if ( _f=="tournament janitor" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Rank_Janitor( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( M ), 12 );
				backpack = new Obj_Item_Weapon_Storage_Backpack( M );

				foreach (dynamic _b in Lang13.Enumerate( backpack, typeof(Obj_Item) )) {
					I2 = _b;
					
					Lang13.Delete( I2 );
					I2 = null;
				}
				M.equip_to_slot_or_del( backpack, 1 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Mop( M ), 5 );
				bucket = new Obj_Item_Weapon_ReagentContainers_Glass_Bucket( M );
				((Reagents)bucket.reagents).add_reagent( "water", 70 );
				M.equip_to_slot_or_del( bucket, 4 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Grenade_ChemGrenade_Cleaner( M ), 16 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Grenade_ChemGrenade_Cleaner( M ), 15 );
				M.equip_to_slot_or_del( new Obj_Item_Stack_Tile_Plasteel( M ), 18 );
				M.equip_to_slot_or_del( new Obj_Item_Stack_Tile_Plasteel( M ), 18 );
				M.equip_to_slot_or_del( new Obj_Item_Stack_Tile_Plasteel( M ), 18 );
				M.equip_to_slot_or_del( new Obj_Item_Stack_Tile_Plasteel( M ), 18 );
				M.equip_to_slot_or_del( new Obj_Item_Stack_Tile_Plasteel( M ), 18 );
				M.equip_to_slot_or_del( new Obj_Item_Stack_Tile_Plasteel( M ), 18 );
				M.equip_to_slot_or_del( new Obj_Item_Stack_Tile_Plasteel( M ), 18 );
			} else if ( _f=="pirate" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Pirate( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Brown( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Bandana( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Eyepatch( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Energy_Sword_Pirate( M ), 5 );
			} else if ( _f=="space pirate" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Pirate( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Brown( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Pirate( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Pirate( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Eyepatch( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Energy_Sword_Pirate( M ), 5 );
			} else if ( _f=="soviet soldier" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Soviet( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Ushanka( M ), 11 );
			} else if ( _f=="tunnel clown" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Rank_Clown( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_ClownShoes( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Black( M ), 10 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_ClownHat( M ), 2 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_ChaplainHood( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal_Monocle( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_ChaplainHoodie( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Banana( M ), 15 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Bikehorn( M ), 16 );
				W = new Obj_Item_Weapon_Card_Id( M );
				W.name = "" + M.real_name + "'s ID Card";
				W.access = GlobalFuncs.get_all_accesses();
				W.assignment = "Tunnel Clown!";
				W.registered_name = M.real_name;
				M.equip_to_slot_or_del( W, 7 );
				fire_axe = new Obj_Item_Weapon( M );
				M.equip_to_slot_or_del( fire_axe, 5 );
			} else if ( _f=="masked killer" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Overalls( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_White( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Latex( M ), 10 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Surgical( M ), 2 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Welding( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal_Monocle( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Apron( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Kitchen_Utensil_Knife_Large( M ), 15 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Scalpel( M ), 16 );
				fire_axe2 = new Obj_Item_Weapon( M );
				M.equip_to_slot_or_del( fire_axe2, 5 );

				foreach (dynamic _c in Lang13.Enumerate( M.contents, typeof(Obj_Item) )) {
					carried_item = _c;
					

					if ( !( carried_item is Obj_Item_Weapon_Implant ) ) {
						carried_item.add_blood( M );
					}
				}
			} else if ( _f=="assassin" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_SuitJacket( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Black( M ), 10 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Sunglasses( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Wcoat( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Energy_Sword( M ), 15 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_CloakingDevice( M ), 16 );
				sec_briefcase = new Obj_Item_Weapon_Storage_Secure_Briefcase( M );

				foreach (dynamic _d in Lang13.Enumerate( sec_briefcase, typeof(Obj_Item) )) {
					briefcase_item = _d;
					
					Lang13.Delete( briefcase_item );
					briefcase_item = null;
				}
				i = null;
				i = 3;

				while (( i ??0) > 0) {
					sec_briefcase.contents.Add( new Obj_Item_Weapon_Spacecash_C1000() );
					i--;
				}
				sec_briefcase.contents.Add( new Obj_Item_Weapon_Gun_Energy_Crossbow() );
				sec_briefcase.contents.Add( new Obj_Item_Weapon_Gun_Projectile_Mateba() );
				sec_briefcase.contents.Add( new Obj_Item_AmmoStorage_Box_A357() );
				sec_briefcase.contents.Add( new Obj_Item_Weapon_Plastique() );
				M.equip_to_slot_or_del( sec_briefcase, 4 );
				pda = new Obj_Item_Device_Pda_Heads( M );
				pda.owner = M.real_name;
				pda.ownjob = "Reaper";
				pda.name = "PDA-" + M.real_name + " (" + pda.ownjob + ")";
				M.equip_to_slot_or_del( pda, 6 );
				W2 = new Obj_Item_Weapon_Card_Id_Syndicate( M );
				W2.name = "" + M.real_name + "'s ID Card";
				W2.access = GlobalFuncs.get_all_accesses();
				W2.assignment = "Reaper";
				W2.registered_name = M.real_name;
				M.equip_to_slot_or_del( W2, 7 );
			} else if ( _f=="death commando" ) {
				M.equip_death_commando();
			} else if ( _f=="syndicate commando" ) {
				M.equip_syndicate_commando();
			} else if ( _f=="nanotrasen representative" ) {
				M.equip_if_possible( new Obj_Item_Clothing_Under_Rank_Centcom_Representative( M ), 14 );
				M.equip_if_possible( new Obj_Item_Clothing_Shoes_Centcom( M ), 12 );
				M.equip_if_possible( new Obj_Item_Clothing_Gloves_White( M ), 10 );
				M.equip_if_possible( new Obj_Item_Device_Radio_Headset_Heads_Hop(  ), 8 );
				pda2 = new Obj_Item_Device_Pda_Heads( M );
				pda2.owner = M.real_name;
				pda2.ownjob = "Nanotrasen Navy Representative";
				pda2.name = "PDA-" + M.real_name + " (" + pda2.ownjob + ")";
				M.equip_if_possible( pda2, 16 );
				M.equip_if_possible( new Obj_Item_Clothing_Glasses_Sunglasses( M ), 15 );
				M.equip_if_possible( new Obj_Item_Weapon_Clipboard( M ), 6 );
				W3 = new Obj_Item_Weapon_Card_Id( M );
				W3.name = "" + M.real_name + "'s ID Card";
				W3.icon_state = "centcom";
				W3.item_state = "id_inv";
				W3.access = GlobalFuncs.get_all_accesses();
				W3.access += new ByTable(new object [] { "VIP Guest", "Custodian", "Thunderdome Overseer", "Intel Officer", "Medical Officer", "Death Commando", "Research Officer" });
				W3.assignment = "Nanotrasen Navy Representative";
				W3.registered_name = M.real_name;
				M.equip_if_possible( W3, 7 );
			} else if ( _f=="nanotrasen officer" ) {
				M.equip_if_possible( new Obj_Item_Clothing_Under_Rank_Centcom_Officer( M ), 14 );
				M.equip_if_possible( new Obj_Item_Clothing_Shoes_Centcom( M ), 12 );
				M.equip_if_possible( new Obj_Item_Clothing_Gloves_White( M ), 10 );
				M.equip_if_possible( new Obj_Item_Device_Radio_Headset_Heads_Captain(  ), 8 );
				M.equip_if_possible( new Obj_Item_Clothing_Head_Beret_Centcom_Officer( M ), 11 );
				pda3 = new Obj_Item_Device_Pda_Heads( M );
				pda3.owner = M.real_name;
				pda3.ownjob = "Nanotrasen Navy Officer";
				pda3.name = "PDA-" + M.real_name + " (" + pda3.ownjob + ")";
				M.equip_if_possible( pda3, 16 );
				M.equip_if_possible( new Obj_Item_Clothing_Glasses_Sunglasses( M ), 15 );
				M.equip_if_possible( new Obj_Item_Weapon_Gun_Energy( M ), 6 );
				W4 = new Obj_Item_Weapon_Card_Id_Centcom( M );
				W4.name = "" + M.real_name + "'s ID Card";
				W4.access = GlobalFuncs.get_all_accesses();
				W4.access += GlobalFuncs.get_all_centcom_access();
				W4.assignment = "Nanotrasen Navy Officer";
				W4.registered_name = M.real_name;
				M.equip_if_possible( W4, 7 );
			} else if ( _f=="nanotrasen captain" ) {
				M.equip_if_possible( new Obj_Item_Clothing_Under_Rank_Centcom_Captain( M ), 14 );
				M.equip_if_possible( new Obj_Item_Clothing_Shoes_Centcom( M ), 12 );
				M.equip_if_possible( new Obj_Item_Clothing_Gloves_White( M ), 10 );
				M.equip_if_possible( new Obj_Item_Device_Radio_Headset_Heads_Captain(  ), 8 );
				M.equip_if_possible( new Obj_Item_Clothing_Head_Beret_Centcom_Captain( M ), 11 );
				pda4 = new Obj_Item_Device_Pda_Heads( M );
				pda4.owner = M.real_name;
				pda4.ownjob = "Nanotrasen Navy Captain";
				pda4.name = "PDA-" + M.real_name + " (" + pda4.ownjob + ")";
				M.equip_if_possible( pda4, 16 );
				M.equip_if_possible( new Obj_Item_Clothing_Glasses_Sunglasses( M ), 15 );
				M.equip_if_possible( new Obj_Item_Weapon_Gun_Energy( M ), 6 );
				W5 = new Obj_Item_Weapon_Card_Id_Centcom( M );
				W5.name = "" + M.real_name + "'s ID Card";
				W5.access = GlobalFuncs.get_all_accesses();
				W5.access += GlobalFuncs.get_all_centcom_access();
				W5.assignment = "Nanotrasen Navy Captain";
				W5.registered_name = M.real_name;
				M.equip_if_possible( W5, 7 );
			} else if ( _f=="emergency rescue team" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Rank_CentcomOfficer( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Swat( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Swat( M ), 10 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Ert(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_Gun( M ), 6 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Sunglasses( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Satchel( M ), 1 );
				W6 = new Obj_Item_Weapon_Card_Id( M );
				W6.name = "" + M.real_name + "'s ID Card";
				W6.icon_state = "centcom";
				W6.access = GlobalFuncs.get_all_accesses();
				W6.access += GlobalFuncs.get_all_centcom_access();
				W6.assignment = "Emergency Response Team";
				W6.registered_name = M.real_name;
				M.equip_to_slot_or_del( W6, 7 );
			} else if ( _f=="special ops officer" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Syndicate_Combat( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Armor_Swat_Officer( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Combat( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Combat( M ), 10 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Heads_Captain(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal_Eyepatch( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Cigarette_Cigar_Havana( M ), 2 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Beret_Centcom( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_PulseRifle_M1911( M ), 6 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Lighter_Zippo( M ), 16 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Satchel( M ), 1 );
				W7 = new Obj_Item_Weapon_Card_Id( M );
				W7.name = "" + M.real_name + "'s ID Card";
				W7.icon_state = "centcom";
				W7.access = GlobalFuncs.get_all_accesses();
				W7.access += GlobalFuncs.get_all_centcom_access();
				W7.assignment = "Special Operations Officer";
				W7.registered_name = M.real_name;
				M.equip_to_slot_or_del( W7, 7 );
			} else if ( _f=="blue wizard" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Lightpurple( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Wizrobe( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Sandal( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Wizard( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_TeleportationScroll( M ), 16 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Spellbook( M ), 5 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Staff( M ), 4 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack( M ), 1 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box( M ), 18 );
			} else if ( _f=="red wizard" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Lightpurple( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Wizrobe_Red( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Sandal( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Wizard_Red( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_TeleportationScroll( M ), 16 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Spellbook( M ), 5 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Staff( M ), 4 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack( M ), 1 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box( M ), 18 );
			} else if ( _f=="marisa wizard" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Lightpurple( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Wizrobe_Marisa( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Sandal_Marisa( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Wizard_Marisa( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_TeleportationScroll( M ), 16 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Spellbook( M ), 5 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Staff( M ), 4 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack( M ), 1 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box( M ), 18 );
			} else if ( _f=="soviet admiral" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Hgpiratecap( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Combat( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Combat( M ), 10 );
				M.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Heads_Captain(  ), 8 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal_Eyepatch( M ), 9 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Hgpirate( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Satchel( M ), 1 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Projectile_Mateba( M ), 6 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Soviet( M ), 14 );
				W8 = new Obj_Item_Weapon_Card_Id( M );
				W8.name = "" + M.real_name + "'s ID Card";
				W8.icon_state = "centcom";
				W8.access = GlobalFuncs.get_all_accesses();
				W8.access += GlobalFuncs.get_all_centcom_access();
				W8.assignment = "Admiral";
				W8.registered_name = M.real_name;
				M.equip_to_slot_or_del( W8, 7 );
			} else if ( _f=="Bomberman" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Darkblue( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Purple( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Bomberman( M ), 11 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Bomberman( M ), 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Purple( M ), 10 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Bomberman( M ), 17 );
			} else if ( _f=="Bomberman(arena)" ) {
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Darkblue( M ), 14 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Purple( M ), 12 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Bomberman( M ), 11 );
				bombsuit = new Obj_Item_Clothing_Suit_Space_Bomberman( M );
				M.equip_to_slot_or_del( bombsuit, 13 );
				M.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Purple( M ), 10 );
				M.equip_to_slot_or_del( new Obj_Item_Weapon_Bomberman( M ), 17 );
				bombsuit.slowdown = 1;
				randomhexes = new ByTable(new object [] { "7", "8", "9", "a", "b", "c", "d", "e", "f" });
				M.color = "#" + Rand13.PickFromTable( randomhexes ) + Rand13.PickFromTable( randomhexes ) + Rand13.PickFromTable( randomhexes ) + Rand13.PickFromTable( randomhexes ) + Rand13.PickFromTable( randomhexes ) + Rand13.PickFromTable( randomhexes );

				foreach (dynamic _e in Lang13.Enumerate( M, typeof(Obj_Item_Clothing) )) {
					C = _e;
					
					C.canremove = false;
				}
				M.name = "Bomberman #" + Rand13.Int( 1, 999 );
			}
			M.regenerate_icons();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " changed the equipment of " + GlobalFuncs.key_name( M ) + " to " + dresscode + "." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " changed the equipment of " + GlobalFuncs.key_name_admin( M ) + " to " + dresscode + "..</span>" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Test areas", group: "Mapping" )]
		public void cmd_admin_areatest(  ) {
			ByTable areas_all = null;
			ByTable areas_with_APC = null;
			ByTable areas_with_air_alarm = null;
			ByTable areas_with_RC = null;
			ByTable areas_with_light = null;
			ByTable areas_with_LS = null;
			ByTable areas_with_intercom = null;
			ByTable areas_with_camera = null;
			dynamic A = null;
			Obj_Machinery_Power_Apc APC = null;
			dynamic A2 = null;
			Obj_Machinery_Alarm alarm = null;
			dynamic A3 = null;
			Obj_Machinery_RequestsConsole RC = null;
			dynamic A4 = null;
			Obj_Machinery_Light L = null;
			dynamic A5 = null;
			Obj_Machinery_LightSwitch LS = null;
			dynamic A6 = null;
			Obj_Item_Device_Radio_Intercom I = null;
			dynamic A7 = null;
			Obj_Machinery_Camera C = null;
			dynamic A8 = null;
			ByTable areas_without_APC = null;
			ByTable areas_without_air_alarm = null;
			ByTable areas_without_RC = null;
			ByTable areas_without_light = null;
			ByTable areas_without_LS = null;
			ByTable areas_without_intercom = null;
			ByTable areas_without_camera = null;
			dynamic areatype = null;
			dynamic areatype2 = null;
			dynamic areatype3 = null;
			dynamic areatype4 = null;
			dynamic areatype5 = null;
			dynamic areatype6 = null;
			dynamic areatype7 = null;

			areas_all = new ByTable();
			areas_with_APC = new ByTable();
			areas_with_air_alarm = new ByTable();
			areas_with_RC = new ByTable();
			areas_with_light = new ByTable();
			areas_with_LS = new ByTable();
			areas_with_intercom = new ByTable();
			areas_with_camera = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
				A = _a;
				

				if ( !areas_all.Contains( A.type ) ) {
					areas_all.Add( A.type );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Apc) )) {
				APC = _b;
				
				A2 = GlobalFuncs.get_area( APC );

				if ( !areas_with_APC.Contains( A2.type ) ) {
					areas_with_APC.Add( A2.type );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Alarm) )) {
				alarm = _c;
				
				A3 = GlobalFuncs.get_area( alarm );

				if ( !areas_with_air_alarm.Contains( A3.type ) ) {
					areas_with_air_alarm.Add( A3.type );
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.allConsoles, typeof(Obj_Machinery_RequestsConsole) )) {
				RC = _d;
				
				A4 = GlobalFuncs.get_area( RC );

				if ( !areas_with_RC.Contains( A4.type ) ) {
					areas_with_RC.Add( A4.type );
				}
			}

			foreach (dynamic _e in Lang13.Enumerate( GlobalVars.alllights, typeof(Obj_Machinery_Light) )) {
				L = _e;
				
				A5 = GlobalFuncs.get_area( L );

				if ( !areas_with_light.Contains( A5.type ) ) {
					areas_with_light.Add( A5.type );
				}
			}

			foreach (dynamic _f in Lang13.Enumerate( typeof(Game13), typeof(Obj_Machinery_LightSwitch) )) {
				LS = _f;
				
				A6 = GlobalFuncs.get_area( LS );

				if ( !areas_with_LS.Contains( A6.type ) ) {
					areas_with_LS.Add( A6.type );
				}
			}

			foreach (dynamic _g in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_Radio_Intercom) )) {
				I = _g;
				
				A7 = GlobalFuncs.get_area( I );

				if ( !areas_with_intercom.Contains( A7.type ) ) {
					areas_with_intercom.Add( A7.type );
				}
			}

			foreach (dynamic _h in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _h;
				
				A8 = GlobalFuncs.get_area( C );

				if ( !areas_with_camera.Contains( A8.type ) ) {
					areas_with_camera.Add( A8.type );
				}
			}
			areas_without_APC = areas_all - areas_with_APC;
			areas_without_air_alarm = areas_all - areas_with_air_alarm;
			areas_without_RC = areas_all - areas_with_RC;
			areas_without_light = areas_all - areas_with_light;
			areas_without_LS = areas_all - areas_with_LS;
			areas_without_intercom = areas_all - areas_with_intercom;
			areas_without_camera = areas_all - areas_with_camera;
			GlobalFuncs.to_chat( typeof(Game13), "<b>AREAS WITHOUT AN APC:</b>" );

			foreach (dynamic _i in Lang13.Enumerate( areas_without_APC )) {
				areatype = _i;
				
				GlobalFuncs.to_chat( typeof(Game13), "* " + areatype );
			}
			GlobalFuncs.to_chat( typeof(Game13), "<b>AREAS WITHOUT AN AIR ALARM:</b>" );

			foreach (dynamic _j in Lang13.Enumerate( areas_without_air_alarm )) {
				areatype2 = _j;
				
				GlobalFuncs.to_chat( typeof(Game13), "* " + areatype2 );
			}
			GlobalFuncs.to_chat( typeof(Game13), "<b>AREAS WITHOUT A REQUEST CONSOLE:</b>" );

			foreach (dynamic _k in Lang13.Enumerate( areas_without_RC )) {
				areatype3 = _k;
				
				GlobalFuncs.to_chat( typeof(Game13), "* " + areatype3 );
			}
			GlobalFuncs.to_chat( typeof(Game13), "<b>AREAS WITHOUT ANY LIGHTS:</b>" );

			foreach (dynamic _l in Lang13.Enumerate( areas_without_light )) {
				areatype4 = _l;
				
				GlobalFuncs.to_chat( typeof(Game13), "* " + areatype4 );
			}
			GlobalFuncs.to_chat( typeof(Game13), "<b>AREAS WITHOUT A LIGHT SWITCH:</b>" );

			foreach (dynamic _m in Lang13.Enumerate( areas_without_LS )) {
				areatype5 = _m;
				
				GlobalFuncs.to_chat( typeof(Game13), "* " + areatype5 );
			}
			GlobalFuncs.to_chat( typeof(Game13), "<b>AREAS WITHOUT ANY INTERCOMS:</b>" );

			foreach (dynamic _n in Lang13.Enumerate( areas_without_intercom )) {
				areatype6 = _n;
				
				GlobalFuncs.to_chat( typeof(Game13), "* " + areatype6 );
			}
			GlobalFuncs.to_chat( typeof(Game13), "<b>AREAS WITHOUT ANY CAMERAS:</b>" );

			foreach (dynamic _o in Lang13.Enumerate( areas_without_camera )) {
				areatype7 = _o;
				
				GlobalFuncs.to_chat( typeof(Game13), "* " + areatype7 );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Assume direct control", desc: "Direct intervention", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_assume_direct_control( dynamic M = null ) {
			Mob_Dead_Observer ghost = null;
			Mob adminmob = null;

			
			if ( !GlobalFuncs.check_rights( 34 ) ) {
				return;
			}

			if ( Lang13.Bool( M.ckey ) ) {
				
				if ( Interface13.Alert( "This mob is being controlled by " + M.ckey + ". Are you sure you wish to assume control of it? " + M.ckey + " will be made a ghost.", null, "Yes", "No" ) != "Yes" ) {
					return;
				} else {
					ghost = new Mob_Dead_Observer( M, true );
					ghost.ckey = M.ckey;
				}
			}
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " assumed direct control of " + M + ".</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " assumed direct control of " + M + "." );
			adminmob = this.mob;
			M.ckey = this.ckey;

			if ( adminmob is Mob_Dead_Observer ) {
				Lang13.Delete( adminmob );
				adminmob = null;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "ADC" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Grant Full Access", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_grantfullaccess( dynamic M = null ) {
			Mob H = null;
			dynamic id = null;
			dynamic pda = null;
			Obj_Item_Weapon_Card_Id id2 = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( Lang13.Bool( ((dynamic)H).wear_id ) ) {
					id = ((dynamic)H).wear_id;

					if ( ((dynamic)H).wear_id is Obj_Item_Device_Pda ) {
						pda = ((dynamic)H).wear_id;
						id = pda.id;
					}
					id.icon_state = "gold";
					id.access = GlobalFuncs.get_all_accesses() + GlobalFuncs.get_all_centcom_access() + GlobalFuncs.get_all_syndicate_access();
				} else {
					id2 = new Obj_Item_Weapon_Card_Id( M );
					id2.icon_state = "gold";
					id2.access = GlobalFuncs.get_all_accesses() + GlobalFuncs.get_all_centcom_access() + GlobalFuncs.get_all_syndicate_access();
					id2.registered_name = H.real_name;
					id2.assignment = "Captain";
					id2.name = "" + id2.registered_name + "'s ID Card (" + id2.assignment + ")";
					H.equip_to_slot_or_del( id2, 7 );
					H.update_inv_wear_id();
				}
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "GFA" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has granted " + M.key + " full access." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has granted " + M.key + " full access.</span>" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Toggle Aliens", group: "Server" )]
		public void cmd_debug_tog_aliens(  ) {
			GlobalVars.aliens_allowed = !GlobalVars.aliens_allowed;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has turned aliens " + ( GlobalVars.aliens_allowed ? "on" : "off" ) + "." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has turned aliens " + ( GlobalVars.aliens_allowed ? "on" : "off" ) + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAL" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Powernets", group: "Debug" )]
		public void cmd_debug_make_powernets(  ) {
			GlobalFuncs.makepowernets();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has remade the powernet. makepowernets() called." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has remade the powernets. makepowernets() called." );
			GlobalFuncs.feedback_add_details( "admin_verb", "MPWN" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Del-All", group: "Debug" )]
		public void cmd_debug_del_all(  ) {
			ByTable blocked = null;
			dynamic hsbitem = null;
			Ent_Static O = null;

			blocked = new ByTable(new object [] { 
				typeof(Obj), 
				typeof(Mob), 
				typeof(Mob_Living), 
				typeof(Mob_Living_Carbon), 
				typeof(Mob_Living_Carbon_Human), 
				typeof(Mob_Dead), 
				typeof(Mob_Dead_Observer), 
				typeof(Mob_Living_Silicon), 
				typeof(Mob_Living_Silicon_Robot), 
				typeof(Mob_Living_Silicon_Ai)
			 });
			hsbitem = Interface13.Input( Task13.User, "Choose an object to delete.", "Delete:", null, Lang13.GetTypes( typeof(Obj) ) + Lang13.GetTypes( typeof(Mob) ) - blocked, InputType.Null | InputType.Any );

			if ( Lang13.Bool( hsbitem ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Ent_Static) )) {
					O = _a;
					

					if ( Lang13.Bool( hsbitem.IsInstanceOfType( O ) ) ) {
						Lang13.Delete( O );
						O = null;
					}
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has deleted all instances of " + hsbitem + "." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has deleted all instances of " + hsbitem + "." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "DELA" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make slime", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_slimeize( dynamic M = null ) {
			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has slimeized " + M.key + "." );
				Task13.Schedule( 10, (Task13.Closure)(() => {
					GlobalFuncs.feedback_add_details( "admin_verb", "MKMET" );
					((Mob_Living_Carbon_Human)M).slimeize(); return;
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into a slime." );
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into a slime.</span>" );
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Alien", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_alienize( dynamic M = null ) {
			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has alienized " + M.key + "." );
				Task13.Schedule( 10, (Task13.Closure)(() => {
					GlobalFuncs.feedback_add_details( "admin_verb", "MKAL" );
					((Mob_Living_Carbon_Human)M).Alienize(); return;
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into an alien." );
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into an alien.</span>" );
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make pAI", desc: "Specify a location to spawn a pAI device, then specify a key to play that pAI", group: "Fun" )]
		[VerbArg( 1, InputType.Tile )]
		public bool makepAI( dynamic T = null ) {
			ByTable available = null;
			dynamic C = null;
			dynamic choice = null;
			dynamic confirm = null;
			Obj_Item_Device_Paicard card = null;
			Mob_Living_Silicon_Pai pai = null;
			PaiCandidate candidate = null;

			
			if ( !Lang13.Bool( T ) ) {
				T = GlobalFuncs.get_turf( Task13.User );
			}
			available = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				C = _a;
				

				if ( Lang13.Bool( C.key ) ) {
					available.Add( C );
				}
			}
			choice = Interface13.Input( "Choose a player to play the pAI", "Spawn pAI", null, null, available, InputType.Any );

			if ( !Lang13.Bool( choice ) ) {
				return false;
			}

			if ( !( choice is Mob_Dead_Observer ) ) {
				confirm = Interface13.Input( "" + choice.key + " isn't ghosting right now. Are you sure you want to yank him out of them out of their body and place them in this pAI?", "Spawn pAI Confirmation", "No", null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

				if ( confirm != "Yes" ) {
					return false;
				}
			}
			card = new Obj_Item_Device_Paicard( T );
			pai = new Mob_Living_Silicon_Pai( card );
			pai.name = Interface13.Input( choice, "Enter your pAI name:", "pAI Name", "Personal AI", null, InputType.Str );
			pai.real_name = pai.name;
			pai.key = choice.key;
			card.setPersonality( pai );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.paiController.pai_candidates, typeof(PaiCandidate) )) {
				candidate = _b;
				

				if ( candidate.key == choice.key ) {
					GlobalVars.paiController.pai_candidates.Remove( candidate );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "MPAI" );
			return false;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Simple Animal", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public dynamic cmd_admin_animalize( dynamic M = null ) {
			dynamic _default = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return _default;
			}

			if ( !Lang13.Bool( M ) ) {
				Interface13.Alert( "That mob doesn't seem to exist, close the panel and try again." );
				return _default;
			}

			if ( M is Mob_NewPlayer ) {
				Interface13.Alert( "The mob must not be a new_player." );
				return _default;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has animalized " + M.key + "." );
			_default = ((Mob)M).Animalize();
			return _default;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make MoMMI", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public Mob_Living_Silicon_Robot_Mommi cmd_admin_mommify( dynamic M = null ) {
			Mob_Living_Silicon_Robot_Mommi _default = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return _default;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has MoMMIfied " + M.key + "." );
				_default = ((Mob_Living_Carbon_Human)M).MoMMIfy();
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return _default;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Robot", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public Mob_Living_Silicon_Robot cmd_admin_robotize( dynamic M = null ) {
			Mob_Living_Silicon_Robot _default = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return _default;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has robotized " + M.key + "." );
				_default = ((Mob_Living_Carbon_Human)M).Robotize();
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return _default;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Air Status in Location", group: "Debug" )]
		public void Cell(  ) {
			Ent_Static T = null;
			GasMixture env = null;
			string t = null;

			
			if ( !( this.mob != null ) ) {
				return;
			}
			T = this.mob.loc;

			if ( !( T is Tile ) ) {
				return;
			}
			env = T.return_air();
			t = "";
			t += "Nitrogen : " + env.nitrogen + "\nOxygen : " + env.oxygen + "\nPlasma : " + env.toxins + "\nCO2: " + env.carbon_dioxide + "\nPressure: " + env.return_pressure();
			Task13.User.show_message( t, 1 );
			GlobalFuncs.feedback_add_details( "admin_verb", "ASL" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Atom ProcCall", group: "Debug" )]
		[VerbArg( 1, InputType.Any )]
		public void callatomproc( dynamic target = null ) {
			ByTable lst = null;
			dynamic returnval = null;
			dynamic _class = null;
			dynamic procname = null;
			dynamic argnum = null;
			int i = 0;
			ByTable keys = null;
			dynamic M = null;
			dynamic temp = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				lst = new ByTable();
				returnval = null;
				_class = null;
				procname = Interface13.Input( "Proc path, eg: /proc/fake_blood", "Path:", null, null, null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( procname ) ) {
					return;
				}

				if ( !Lang13.HasCall( target, procname ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span style='color: red;'>Error: callatomproc(): target has no such call " + procname + ".</span>" );
				}
				argnum = Interface13.Input( "Number of arguments", "Number:", 0, null, null, InputType.Num | InputType.Null );

				if ( !Lang13.Bool( argnum ) && argnum != 0 ) {
					return;
				}
				lst.len = Convert.ToInt32( argnum );
				i = 1;

				while (i < Convert.ToDouble( argnum + 1 )) {
					_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { 
						"text", 
						"num", 
						"type", 
						"reference", 
						"mob reference", 
						"icon", 
						"file", 
						"client", 
						"mob's area", 
						( Lang13.Bool( this.holder.marked_datum ) ? "marked datum (" + this.holder.marked_datum.type + ")" : null ), 
						"CANCEL"
					 }), InputType.Any );

					if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
						_class = "marked_datum";
					}

					dynamic _b = _class; // Was a switch-case, sorry for the mess.
					if ( _b=="CANCEL" ) {
						return;
					} else if ( _b=="text" ) {
						lst[i] = Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.Str );
					} else if ( _b=="num" ) {
						lst[i] = Interface13.Input( "Enter new number:", "Num", 0, null, null, InputType.Num );
					} else if ( _b=="type" ) {
						lst[i] = Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Any );
					} else if ( _b=="reference" ) {
						lst[i] = Interface13.Input( "Select reference:", "Reference", this, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone );
					} else if ( _b=="mob reference" ) {
						lst[i] = Interface13.Input( "Select reference:", "Reference", Task13.User, null, Game13.contents, InputType.Mob );
					} else if ( _b=="file" ) {
						lst[i] = Interface13.Input( "Pick file:", "File", null, null, null, InputType.File );
					} else if ( _b=="icon" ) {
						lst[i] = Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Icon );
					} else if ( _b=="client" ) {
						keys = new ByTable();

						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
							M = _a;
							
							keys.Add( M.client );
						}
						lst[i] = Interface13.Input( "Please, select a player!", "Selection", null, null, keys, InputType.Null | InputType.Any );
					} else if ( _b=="mob's area" ) {
						temp = Interface13.Input( "Select mob", "Selection", Task13.User, null, Game13.contents, InputType.Mob );
						lst[i] = temp.loc;
					} else if ( _b=="marked_datum" ) {
						lst[i] = this.holder.marked_datum;
					}
					i++;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " called " + target + "'s " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
				returnval = lst.Apply( Lang13.BindFunc( target, procname ) );
				GlobalFuncs.to_chat( Task13.User, "<font color='blue'>" + procname + " returned: " + ( Lang13.Bool( returnval ) ? returnval : "null" ) + "</font>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "APC" );
				return;
			}));
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Advanced ProcCall", group: "Debug" )]
		public void callproc(  ) {
			dynamic target = null;
			bool targetselected = false;
			ByTable lst = null;
			dynamic returnval = null;
			dynamic _class = null;
			ByTable keys = null;
			dynamic C = null;
			dynamic procname = null;
			dynamic argnum = null;
			int? i = null;
			ByTable keys2 = null;
			dynamic M = null;
			dynamic temp = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				target = null;
				targetselected = false;
				lst = new ByTable();
				returnval = null;
				_class = null;

				switch ((string)( Interface13.Alert( "Proc owned by something?", null, "Yes", "No" ) )) {
					case "Yes":
						targetselected = true;
						_class = Interface13.Input( "Proc owned by...", "Owner", null, null, new ByTable(new object [] { "Obj", "Mob", "Area or Turf", "Client" }), InputType.Null | InputType.Any );

						dynamic _b = _class; // Was a switch-case, sorry for the mess.
						if ( _b=="Obj" ) {
							target = Interface13.Input( "Enter target:", "Target", Task13.User, null, Game13.contents, InputType.Obj );
						} else if ( _b=="Mob" ) {
							target = Interface13.Input( "Enter target:", "Target", Task13.User, null, Game13.contents, InputType.Mob );
						} else if ( _b=="Area or Turf" ) {
							target = Interface13.Input( "Enter target:", "Target", Task13.User.loc, null, Game13.contents, InputType.Tile | InputType.Zone );
						} else if ( _b=="Client" ) {
							keys = new ByTable();

							foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) { // THERE IS A SMALL CHANCE THIS LOOP IS BROKEN! TYPECODE = 16384
								C = _a;
								
								keys.Add( C );
							}
							target = Interface13.Input( "Please, select a player!", "Selection", null, null, keys, InputType.Null | InputType.Any );
						} else {
							return;
						}
						break;
					case "No":
						target = null;
						targetselected = false;
						break;
				}
				procname = Interface13.Input( "Proc path, eg: /proc/fake_blood", "Path:", null, null, null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( procname ) ) {
					return;
				}

				if ( Lang13.Bool( target ) && !Lang13.HasCall( target, procname ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span style='color: red;'>Error: callproc(): target has no such call " + procname + ".</span>" );
					return;
				}
				argnum = Interface13.Input( "Number of arguments", "Number:", 0, null, null, InputType.Num | InputType.Null );

				if ( !Lang13.Bool( argnum ) && argnum != 0 ) {
					return;
				}
				lst.len = Convert.ToInt32( argnum );
				i = null;
				i = 1;

				while (( i ??0) < Convert.ToDouble( argnum + 1 )) {
					_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { 
						"text", 
						"num", 
						"type", 
						"reference", 
						"mob reference", 
						"icon", 
						"file", 
						"client", 
						"mob's area", 
						( Lang13.Bool( this.holder.marked_datum ) ? "marked datum (" + this.holder.marked_datum.type + ")" : null ), 
						"CANCEL"
					 }), InputType.Any );

					if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
						_class = "marked_datum";
					}

					dynamic _e = _class; // Was a switch-case, sorry for the mess.
					if ( _e=="CANCEL" ) {
						return;
					} else if ( _e=="text" ) {
						lst[i] = Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.Str );
					} else if ( _e=="num" ) {
						lst[i] = Interface13.Input( "Enter new number:", "Num", 0, null, null, InputType.Num );
					} else if ( _e=="type" ) {
						lst[i] = Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Any );
					} else if ( _e=="reference" ) {
						lst[i] = Interface13.Input( "Select reference:", "Reference", this, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone );
					} else if ( _e=="mob reference" ) {
						lst[i] = Interface13.Input( "Select reference:", "Reference", Task13.User, null, Game13.contents, InputType.Mob );
					} else if ( _e=="file" ) {
						lst[i] = Interface13.Input( "Pick file:", "File", null, null, null, InputType.File );
					} else if ( _e=="icon" ) {
						lst[i] = Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Icon );
					} else if ( _e=="client" ) {
						keys2 = new ByTable();

						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.mob_list )) {
							M = _d;
							
							keys2.Add( M.client );
						}
						lst[i] = Interface13.Input( "Please, select a player!", "Selection", null, null, keys2, InputType.Null | InputType.Any );
					} else if ( _e=="mob's area" ) {
						temp = Interface13.Input( "Select mob", "Selection", Task13.User, null, Game13.contents, InputType.Mob );
						lst[i] = temp.loc;
					} else if ( _e=="marked_datum" ) {
						lst[i] = this.holder.marked_datum;
					}
					i++;
				}

				if ( targetselected ) {
					
					if ( !Lang13.Bool( target ) ) {
						GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: callproc(): owner of proc no longer exists.</font>" );
						return;
					}
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " called " + target + "'s " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
					returnval = lst.Apply( Lang13.BindFunc( target, procname ) );
				} else {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " called " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
					returnval = lst.Apply( typeof(GlobalFuncs).GetMethod( procname ) );
				}
				GlobalFuncs.to_chat( Task13.User, "<font color='blue'>" + procname + " returned: " + ( Lang13.Bool( returnval ) ? returnval : "null" ) + "</font>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "APC" );
				return;
			}));
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Debug-Game", group: "Debug" )]
		public void Debug2(  ) {
			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}

			if ( GlobalVars.Debug2 ) {
				GlobalVars.Debug2 = false;
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " toggled debugging off." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " toggled debugging off." );
			} else {
				GlobalVars.Debug2 = true;
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " toggled debugging on." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " toggled debugging on." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "DG2" );
			return;
		}

		// Function from file: deadsay.dm
		[VerbInfo( name: "Dsay", group: "Special Verbs", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void dsay( string msg = null ) {
			string rendered = null;
			dynamic M = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( !( this.mob != null ) ) {
				return;
			}

			if ( ( this.prefs.muted & 16 ) != 0 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot send DSAY messages (muted).</span>" );
				return;
			}

			if ( !Lang13.Bool( this.prefs.toggles & 32 ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You have deadchat muted.</span>" );
				return;
			}

			if ( this.handle_spam_prevention( msg, 16 ) ) {
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " : " + msg );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			rendered = "<span class='game deadsay'><span class='prefix'>DEAD:</span> <span class='name'>ADMIN(" + ( Lang13.Bool( this.holder.fakekey ) ? Rand13.Pick(new object [] { "BADMIN", "hornigranny", "TLF", "scaredforshadows", "KSI", "Silnazi", "HerpEs", "BJ69", "SpoofedEdd", "Uhangay", "Wario90900", "Regarity", "MissPhareon", "LastFish", "unMportant", "Deurpyn", "Fatbeaver" }) : this.key ) + ")</span> says, <span class='message'>\"" + msg + "\"</span></span>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( M is Mob_NewPlayer || !Lang13.Bool( M.client ) ) {
					continue;
				}

				if ( Lang13.Bool( M.client ) && Lang13.Bool( M.client.holder ) && Lang13.Bool( M.client.prefs.toggles & 32 ) ) {
					((Mob)M).show_message( rendered, 2 );
				} else if ( Lang13.Bool( M.client ) && Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client ) && Lang13.Bool( M.client.prefs.toggles & 32 ) ) {
					((Mob)M).show_message( rendered, 2 );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "D" );
			return;
		}

		// Function from file: custom_event.dm
		[VerbInfo( name: "Change Custom Event", group: "Fun" )]
		public void cmd_admin_change_custom_event(  ) {
			dynamic input = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			input = Interface13.Input( Task13.User, "Enter the description of the custom event. Be descriptive. To cancel the event, make this blank or hit cancel.", "Custom Event", GlobalVars.custom_event_msg, null, InputType.Null | InputType.StrMultiline );

			if ( !Lang13.Bool( input ) || input == "" ) {
				GlobalVars.custom_event_msg = null;
				GlobalFuncs.log_admin( "" + Task13.User.key + " has cleared the custom event text." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has cleared the custom event text." );
				return;
			}
			GlobalFuncs.log_admin( "" + Task13.User.key + " has changed the custom event text." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has changed the custom event text." );
			GlobalVars.custom_event_msg = input;
			GlobalFuncs.to_chat( typeof(Game13), "<h1 class='alert'>Custom Event</h1>" );
			GlobalFuncs.to_chat( typeof(Game13), "<h2 class='alert'>A custom event is starting. OOC Info:</h2>" );
			GlobalFuncs.to_chat( typeof(Game13), "<span class='alert'>" + String13.HtmlEncode( GlobalVars.custom_event_msg ) + "</span>" );
			GlobalFuncs.to_chat( typeof(Game13), "<br>" );
			return;
		}

		// Function from file: vgstation13.dme
		[VerbInfo( desc: "Shows a cinematic.", group: "Fun", hidden: true )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "explosion", null )]
		public void cinematic( dynamic cinematic = null ) {
			dynamic parameter = null;
			dynamic _override = null;

			
			if ( Interface13.Alert( "Are you sure you want to run " + cinematic + "?", "Confirmation", "Yes", "No" ) == "No" ) {
				return;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				return;
			}

			dynamic _b = cinematic; // Was a switch-case, sorry for the mess.
			if ( _b=="explosion" ) {
				parameter = Interface13.Input( this, "station_missed = ?", "Enter Parameter", 0, null, InputType.Num );
				_override = null;

				dynamic _a = parameter; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					_override = Interface13.Input( this, "mode = ?", "Enter Parameter", null, new ByTable(new object [] { "nuclear emergency", "no override" }), InputType.Any );
				} else if ( _a==0 ) {
					_override = Interface13.Input( this, "mode = ?", "Enter Parameter", null, new ByTable(new object [] { "blob", "nuclear emergency", "AI malfunction", "no override" }), InputType.Any );
				}
				GlobalVars.ticker.station_explosion_cinematic( parameter, _override );
			}
			return;
		}

		// Function from file: check_customitem_activity.dm
		[VerbInfo( name: "Check activity of players with custom items", group: "Admin" )]
		public void check_customitem_activity(  ) {
			string dat = null;

			dat = "<b>Inactive players with custom items</b><br>";
			dat += "<br>\n		The list below contains players with custom items that have not logged\n		in for the past two months, or have not logged in since this system was implemented.\n		This system requires the feedback SQL database to be properly setup and linked.<br>";
			dat += "<br>\n		Populating this list is done automatically, but must be manually triggered on a per\n	 round basis. Populating the list may cause a lag spike, so use it sparingly.<br>";
			dat += "<hr>";

			if ( GlobalVars.checked_for_inactives ) {
				dat += GlobalVars.inactive_keys;
				dat += "<hr>\n			This system was implemented on March 1 2013, and the database a few days before that. Root server access is required to add or disable access to specific custom items.<br>";
			} else {
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";_src_=holder;populate_inactive_customitems=1'>Populate list (requires an active database connection)</a><br>" ).ToString();
			}
			Interface13.Browse( Task13.User, dat, "window=inactive_customitems;size=600x480" );
			return;
		}

		// Function from file: atmosdebug.dm
		[VerbInfo( name: "Check Power", group: "Mapping" )]
		public void powerdebug(  ) {
			Powernet PN = null;
			Ent_Static C = null;
			Ent_Static C2 = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "CPOW" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.powernets, typeof(Powernet) )) {
				PN = _a;
				

				if ( !( PN.nodes != null ) || !( PN.nodes.len != 0 ) ) {
					
					if ( PN.cables != null && PN.cables.len > 1 ) {
						C = PN.cables[1];
						GlobalFuncs.to_chat( Task13.User, "Powernet with no nodes! (number " + PN.number + ") - example cable at " + C.x + ", " + C.y + ", " + C.z + " in area " + GlobalFuncs.get_area( C.loc ) );
					}
				}

				if ( !( PN.cables != null ) || PN.cables.len < 10 ) {
					
					if ( PN.cables != null && PN.cables.len > 1 ) {
						C2 = PN.cables[1];
						GlobalFuncs.to_chat( Task13.User, "Powernet with fewer than 10 cables! (number " + PN.number + ") - example cable at " + C2.x + ", " + C2.y + ", " + C2.z + " in area " + GlobalFuncs.get_area( C2.loc ) );
					}
				}
			}
			return;
		}

		// Function from file: atmosdebug.dm
		[VerbInfo( name: "Check Plumbing", group: "Mapping" )]
		public void atmosscan(  ) {
			Obj_Machinery_Atmospherics plumbing = null;
			Obj_Machinery_Atmospherics_Pipe_Manifold pipe = null;
			Obj_Machinery_Atmospherics_Pipe_Manifold4w pipe2 = null;
			Obj_Machinery_Atmospherics_Pipe_Simple pipe3 = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "CP" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics) )) {
				plumbing = _a;
				

				if ( plumbing.nodealert ) {
					GlobalFuncs.to_chat( Task13.User, "Unconnected " + plumbing.name + " located at " + GlobalFuncs.formatJumpTo( plumbing.loc ) );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Pipe_Manifold) )) {
				pipe = _b;
				

				if ( !( pipe.node1 != null ) || !( pipe.node2 != null ) || !( pipe.node3 != null ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unconnected " + pipe.name + " located at " + GlobalFuncs.formatJumpTo( pipe.loc ) );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Pipe_Manifold4w) )) {
				pipe2 = _c;
				

				if ( !( pipe2.node1 != null ) || !( pipe2.node2 != null ) || !( pipe2.node3 != null ) || !( pipe2.node4 != null ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unconnected " + pipe2.name + " located at " + GlobalFuncs.formatJumpTo( pipe2.loc ) );
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Pipe_Simple) )) {
				pipe3 = _d;
				

				if ( !( pipe3.node1 != null ) || !( pipe3.node2 != null ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unconnected " + pipe3.name + " located at " + GlobalFuncs.formatJumpTo( pipe3.loc ) );
				}
			}
			return;
		}

		// Function from file: antag_madness.dm
		[VerbInfo( name: "Antag Madness", desc: "Turns the target player into a random fully geared antag.", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void antag_madness( Mob_Living_Carbon_Human M = null ) {
			ByTable role_list = null;
			bool got_a_job = false;
			ByTable input_list = null;
			dynamic procedure = null;
			dynamic choice = null;
			dynamic T = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}

			if ( !( M.mind != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>That mob has no mind.</span>" );
				return;
			}

			if ( !( M is Mob_Living_Carbon_Human ) && !( M is Mob_Living_Carbon_Monkey ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Only humans and monkeys can become overpowered antags.</span>" );
				return;
			}
			role_list = new ByTable(new object [] { "traitor", "changeling", "vampire", "cult", "rev", "nuke", "deathsquad", "wizard", "monkey" });
			got_a_job = false;

			if ( M is Mob_Living_Carbon_Monkey ) {
				role_list = new ByTable(new object [] { "cult", "monkey" });
			}
			input_list = new ByTable(new object [] { "RANDOM" });
			input_list.Add( role_list );
			input_list.Add( "CANCEL" );
			procedure = Interface13.Input( "Choose antag type.", "Antag Madness", null, null, input_list, InputType.Any );

			if ( procedure == "CANCEL" ) {
				return;
			} else if ( procedure == "RANDOM" ) {
				
				while (role_list.len > 0) {
					choice = Rand13.PickFromTable( role_list );

					if ( GlobalFuncs.create_madness( M, choice ) ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " turned " + GlobalFuncs.key_name( M ) + " into an overpowered " + choice );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " turned " + GlobalFuncs.key_name_admin( M ) + "into an overpowered " + choice );
						got_a_job = true;
						break;
					} else {
						role_list.Remove( choice );
					}
				}

				if ( !got_a_job ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='danger'>The mob is already every type of antag at once holy shit stop that.</span>" );
					return;
				}
			} else if ( GlobalFuncs.create_madness( M, procedure ) ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " turned " + GlobalFuncs.key_name( M ) + " into an overpowered " + procedure );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " turned " + GlobalFuncs.key_name_admin( M ) + "into an overpowered " + procedure );
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>The mob is already a " + procedure + ".</span>" );
				return;
			}
			T = GlobalFuncs.get_turf( M );
			((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
			GlobalFuncs.feedback_add_details( "admin_verb", "AM" );
			return;
		}

		// Function from file: adminsay.dm
		[VerbInfo( name: "Msay", group: "Special Verbs", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void cmd_mod_say( string msg = null ) {
			string color = null;
			dynamic C = null;

			
			if ( !GlobalFuncs.check_rights( 8194 ) ) {
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );
			GlobalFuncs.log_admin( "MOD: " + GlobalFuncs.key_name( this ) + " : " + msg );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			color = "mod";

			if ( GlobalFuncs.check_rights( 2, false ) ) {
				color = "adminmod";
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( Lang13.Bool( C.holder.rights & 8194 ) ) {
					
					if ( Lang13.Bool( C.prefs.special_popup ) ) {
						Interface13.Output( C, new Txt( "[" ).item( GlobalFuncs.time_stamp() ).str( "] <span style='color:" ).item( color ).str( ";'><b>" ).item( GlobalFuncs.key_name( this, 1 ) ).str( "</b> (<A HREF='?src=" ).Ref( C.holder ).str( ";adminplayerobservejump=" ).Ref( this.mob ).str( "'>JMP</A>): <span class='modooc'>" ).item( msg ).str( "</span></span>" ).ToString(), "window1.msay_output" );
					} else {
						GlobalFuncs.to_chat( C, new Txt( "<span class='prefix'>MOD: </span><span class='" ).item( color ).str( "'><EM>" ).item( GlobalFuncs.key_name( this, 1 ) ).str( "</EM> (<A HREF='?src=" ).Ref( C.holder ).str( ";adminplayerobservejump=" ).Ref( this.mob ).str( "'>JMP</A>): <span class='modooc'>" ).item( msg ).str( "</span></span>" ).ToString() );
					}
				}
			}
			return;
		}

		// Function from file: adminsay.dm
		[VerbInfo( name: "mWindow", group: "Special Verbs", hidden: true )]
		public void cmd_mod_window(  ) {
			
			if ( !GlobalFuncs.check_rights( 8194 ) ) {
				return;
			}
			Interface13.WindowSet( this, "window1", "is-visible=true" );
			return;
		}

		// Function from file: adminsay.dm
		[VerbInfo( name: "Asay", group: "Special Verbs", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void cmd_admin_say( string msg = null ) {
			dynamic C = null;

			
			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " : " + msg );

			if ( GlobalFuncs.check_rights( 2, false ) ) {
				msg = new Txt( "<span class='admin'><span class='prefix'>ADMIN:</span> <EM>" ).item( GlobalFuncs.key_name( Task13.User, 1 ) ).str( "</EM> (<a href='?_src_=holder;adminplayerobservejump=" ).Ref( this.mob ).str( "'>JMP</A>): <span class='message'>" ).item( msg ).str( "</span></span>" ).ToString();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
					C = _a;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
						continue;
					}

					if ( Lang13.Bool( C.holder.rights & 2 ) ) {
						GlobalFuncs.to_chat( C, msg );
					}
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "M" );
			return;
		}

		// Function from file: adminpm.dm
		public void cmd_admin_pm( dynamic C = null, dynamic msg = null ) {
			string recieve_color = null;
			dynamic send_pm_type = null;
			dynamic recieve_pm_type = null;
			string recieve_message = null;
			Client sender = null;
			string sendername = null;
			dynamic reply = null;
			dynamic X = null;

			
			if ( ( this.prefs.muted & 8 ) != 0 ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: Private-Message: You are unable to use PM-s (muted).</font>" );
				return;
			}

			if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
				
				if ( this.holder != null ) {
					GlobalFuncs.to_chat( this, "<font color='red'>Error: Private-Message: Client not found.</font>" );
				} else {
					this.adminhelp( msg );
				}
				return;
			}

			if ( !Lang13.Bool( msg ) ) {
				msg = Interface13.Input( this, "Message:", "Private message to " + GlobalFuncs.key_name( C, 0, false ), "", null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( msg ) ) {
					return;
				}

				if ( !Lang13.Bool( C ) ) {
					
					if ( this.holder != null ) {
						GlobalFuncs.to_chat( this, "<font color='red'>Error: Admin-PM: Client not found.</font>" );
					} else {
						this.adminhelp( msg );
					}
					return;
				}
			}

			if ( this.handle_spam_prevention( msg, 8 ) ) {
				return;
			}

			if ( !GlobalFuncs.check_rights( 48, false ) ) {
				msg = GlobalFuncs.sanitize( String13.SubStr( msg, 1, 1024 ) );

				if ( !Lang13.Bool( msg ) ) {
					return;
				}
			}
			recieve_color = "purple";
			send_pm_type = " ";
			recieve_pm_type = "Player";

			if ( this.holder != null ) {
				
				if ( this.holder != null ) {
					
					if ( Lang13.Bool( this.holder.rights & 8192 ) ) {
						recieve_color = "maroon";
					} else {
						recieve_color = "red";
					}
					send_pm_type = this.holder.rank + " ";
					recieve_pm_type = this.holder.rank;
				}
			} else if ( !Lang13.Bool( C.holder ) ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: Admin-PM: Non-admin to non-admin PM communication is forbidden.</font>" );
				return;
			}
			recieve_message = "";

			if ( this.holder != null && !Lang13.Bool( C.holder ) ) {
				recieve_message = "<font color='" + recieve_color + "' size='4'><b>-- Administrator private message --</b></font>\n";

				if ( GlobalVars.config.popup_admin_pm ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						sender = this;
						sendername = this.key;
						reply = Interface13.Input( C, msg, "" + recieve_pm_type + " PM from-" + sendername, "", null, InputType.Str | InputType.Null );

						if ( Lang13.Bool( C ) && Lang13.Bool( reply ) ) {
							
							if ( sender != null ) {
								((Client)C).cmd_admin_pm( sender, reply );
							} else {
								this.adminhelp( reply );
							}
						}
						return;
						return;
					}));
				}
			}
			recieve_message = "[" + GlobalFuncs.time_stamp() + "] <font color='" + recieve_color + "'>" + recieve_pm_type + " PM from-<b>" + GlobalFuncs.key_name( this, C, ( Lang13.Bool( C.holder ) ? true : false ) ) + "</b>: " + msg + "</font>";

			if ( Lang13.Bool( C.prefs.special_popup ) ) {
				Interface13.Output( C, recieve_message, "window1.msay_output" );

				if ( !Lang13.Bool( C.holder ) ) {
					Interface13.WindowSet( C, "rpane.special_button", "is-checked=true" );
					Interface13.WindowSet( C, null, "rpanewindow.left=window1" );
				}
			} else {
				GlobalFuncs.to_chat( C, recieve_message );
			}

			if ( Lang13.Bool( this.prefs.special_popup ) ) {
				Interface13.Output( this, "[" + GlobalFuncs.time_stamp() + "] <font color='blue'>" + send_pm_type + "PM to-<b>" + GlobalFuncs.key_name( C, this, ( this.holder != null ? true : false ) ) + "</b>: " + msg + "</font>", "window1.msay_output" );
			} else {
				GlobalFuncs.to_chat( this, "<font color='blue'>" + send_pm_type + "PM to-<b>" + GlobalFuncs.key_name( C, this, ( this.holder != null ? true : false ) ) + "</b>: " + msg + "</font>" );
			}

			if ( Lang13.Bool( C.prefs.toggles & 1 ) ) {
				GlobalFuncs.to_chat( C, "sound/effects/adminhelp.ogg" );
			}
			GlobalFuncs.log_admin( "PM: " + GlobalFuncs.key_name( this ) + "->" + GlobalFuncs.key_name( C ) + ": " + msg );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				X = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( X ) ) ) {
					continue;
				}

				if ( X == C || X == this ) {
					continue;
				}

				if ( X.key != this.key && X.key != C.key && Lang13.Bool( X.holder.rights & 2 ) || Lang13.Bool( X.holder.rights & 8192 ) ) {
					
					if ( Lang13.Bool( X.prefs.special_popup ) ) {
						Interface13.Output( X, "[" + GlobalFuncs.time_stamp() + "] <B><font color='blue'>PM: " + GlobalFuncs.key_name( this, X, false ) + "-&gt;" + GlobalFuncs.key_name( C, X, false ) + ":</B> <span class='notice'>" + msg + "</font></span>", "window1.msay_output" );
					} else {
						GlobalFuncs.to_chat( X, "<B><font color='blue'>PM: " + GlobalFuncs.key_name( this, X, false ) + "-&gt;" + GlobalFuncs.key_name( C, X, false ) + ":</B> <span class='notice'>" + msg + "</font></span>" );
					}
				}
			}
			return;
		}

		// Function from file: adminpm.dm
		[VerbInfo( name: "Admin PM", group: "Admin" )]
		public void cmd_admin_pm_panel(  ) {
			ByTable targets = null;
			dynamic T = null;
			dynamic sorted = null;
			dynamic target = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: Admin-PM-Panel: Only administrators may use this command.</font>" );
				return;
			}
			targets = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) { // THERE IS A SMALL CHANCE THIS LOOP IS BROKEN! TYPECODE = 16384
				T = _a;
				

				if ( Lang13.Bool( T.mob ) ) {
					
					if ( T.mob is Mob_NewPlayer ) {
						targets["(New Player) - " + T] = T;
					} else if ( T.mob is Mob_Dead_Observer ) {
						targets["" + T.mob.name + "(Ghost) - " + T] = T;
					} else {
						targets["" + T.mob.real_name + "(as " + T.mob.name + ") - " + T] = T;
					}
				} else {
					targets["(No Mob) - " + T] = T;
				}
			}
			sorted = GlobalFuncs.sortList( targets );
			target = Interface13.Input( this, "To whom shall we send a message?", "Admin PM", null, sorted | null, InputType.Any );
			this.cmd_admin_pm( targets[target], null );
			GlobalFuncs.feedback_add_details( "admin_verb", "APM" );
			return;
		}

		// Function from file: adminpm.dm
		[VerbInfo( name: "Admin PM Mob" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_pm_context( dynamic M = null ) {
			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: Admin-PM-Context: Only administrators may use this command.</font>" );
				return;
			}

			if ( !( M is Mob ) || !Lang13.Bool( M.client ) ) {
				return;
			}
			this.cmd_admin_pm( M.client, null );
			GlobalFuncs.feedback_add_details( "admin_verb", "APMM" );
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Send Mob", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalFunc, "sortmobs" )]
		public void sendmob( dynamic M = null ) {
			dynamic A = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}
			A = Interface13.Input( Task13.User, "Pick an area.", "Pick an area", null, GlobalVars.sortedAreas, InputType.Any );

			if ( Lang13.Bool( A ) ) {
				
				if ( GlobalVars.config.allow_admin_jump ) {
					((Mob)M).teleport_to( Rand13.PickFromTable( GlobalFuncs.get_area_turfs( A ) ) );
					GlobalFuncs.feedback_add_details( "admin_verb", "SMOB" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " teleported " + GlobalFuncs.key_name( M ) + " to " + A );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " teleported " + GlobalFuncs.key_name_admin( M ) + " to " + A );
				} else {
					Interface13.Alert( "Admin jumping disabled" );
				}
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Get Key", desc: "Key to teleport", group: "Admin" )]
		public void Getkey(  ) {
			ByTable keys = null;
			dynamic M = null;
			dynamic selection = null;
			dynamic M2 = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( GlobalVars.config.allow_admin_jump ) {
				keys = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( Lang13.Bool( M ) ) {
						keys.Add( M );
					}
				}
				selection = Interface13.Input( "Please, select a player!", "Admin Jumping", null, null, GlobalFuncs.sortKey( keys ), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( selection ) ) {
					return;
				}
				M2 = selection;

				if ( !Lang13.Bool( M2 ) ) {
					return;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " teleported " + GlobalFuncs.key_name( M2 ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " teleported " + GlobalFuncs.key_name( M2 ) );

				if ( Lang13.Bool( M2 ) ) {
					((Mob)M2).teleport_to( Task13.User );
					GlobalFuncs.feedback_add_details( "admin_verb", "GK" );
				}
			} else {
				Interface13.Alert( "Admin jumping disabled" );
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Get Mob", desc: "Mob to teleport", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void Getmob( dynamic M = null ) {
			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( GlobalVars.config.allow_admin_jump ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " teleported " + GlobalFuncs.key_name( M ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " teleported " + GlobalFuncs.key_name_admin( M ) );
				((Mob)M).teleport_to( Task13.User );
				GlobalFuncs.feedback_add_details( "admin_verb", "GM" );
			} else {
				Interface13.Alert( "Admin jumping disabled" );
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Key", group: "Admin" )]
		public void jumptokey(  ) {
			ByTable keys = null;
			dynamic M = null;
			dynamic selection = null;
			dynamic M2 = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( GlobalVars.config.allow_admin_jump ) {
				keys = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( Lang13.Bool( M.ckey ) ) {
						keys["" + M.ckey] = M;
					}
				}
				selection = Interface13.Input( "Please, select a player!", "Admin Jumping", null, null, GlobalFuncs.sortList( keys ), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( selection ) ) {
					GlobalFuncs.to_chat( this, "No keys found." );
					return;
				}
				M2 = keys[selection];
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " jumped to " + GlobalFuncs.key_name( M2 ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to " + GlobalFuncs.key_name_admin( M2 ) );
				Task13.User.loc = GlobalFuncs.get_turf( M2 );
				GlobalFuncs.feedback_add_details( "admin_verb", "JK" );
			} else {
				Interface13.Alert( "Admin jumping disabled" );
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Coordinate", group: "Admin" )]
		[VerbArg( 1, InputType.Num )]
		[VerbArg( 2, InputType.Num )]
		[VerbArg( 3, InputType.Num )]
		public void jumptocoord( double? tx = null, double? ty = null, double? tz = null ) {
			Mob A = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( GlobalVars.config.allow_admin_jump ) {
				
				if ( this.mob != null ) {
					A = this.mob;
					A.x = ((int)( tx ??0 ));
					A.y = ((int)( ty ??0 ));
					A.z = ((int)( tz ??0 ));
					GlobalFuncs.feedback_add_details( "admin_verb", "JC" );
				}
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to coordinates " + tx + ", " + ty + ", " + tz );
			} else {
				Interface13.Alert( "Admin jumping disabled" );
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Mob", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void jumptomob( dynamic M = null ) {
			Mob A = null;
			dynamic T = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( GlobalVars.config.allow_admin_jump ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " jumped to " + GlobalFuncs.key_name( M ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to " + GlobalFuncs.key_name_admin( M ) );

				if ( this.mob != null ) {
					A = this.mob;
					T = GlobalFuncs.get_turf( M );

					if ( Lang13.Bool( T ) && T is Tile ) {
						GlobalFuncs.feedback_add_details( "admin_verb", "JM" );
						A.loc = T;
					} else {
						GlobalFuncs.to_chat( A, "This mob is not located in the game world." );
					}
				}
			} else {
				Interface13.Alert( "Admin jumping disabled" );
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Turf", group: "Admin" )]
		[VerbArg( 1, InputType.Tile )]
		public void jumptoturf( Ent_Static T = null ) {
			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( GlobalVars.config.allow_admin_jump ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " jumped to " + T.x + "," + T.y + "," + T.z + " in " + T.loc );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to " + T.x + "," + T.y + "," + T.z + " in " + T.loc );
				Task13.User.loc = T;
				GlobalFuncs.feedback_add_details( "admin_verb", "JT" );
			} else {
				Interface13.Alert( "Admin jumping disabled" );
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Area", desc: "Area to jump to", group: "Admin" )]
		[VerbArg( 1, InputType.Zone, VerbArgFilter.FromGlobalVar, "sortedAreas" )]
		public void Jump( dynamic A = null ) {
			ByTable turfs = null;
			dynamic T = null;
			dynamic T2 = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( GlobalVars.config.allow_admin_jump ) {
				
				if ( !Lang13.Bool( A ) ) {
					return;
				}
				turfs = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( A )) {
					T = _a;
					

					if ( T.density ) {
						continue;
					}
					turfs.Add( T );
				}
				T2 = GlobalFuncs.pick_n_take( turfs );

				if ( !Lang13.Bool( T2 ) ) {
					GlobalFuncs.to_chat( this, "Nowhere to jump to!" );
					return;
				}
				Task13.User.loc = T2;
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " jumped to " + A );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to " + A );
				GlobalFuncs.feedback_add_details( "admin_verb", "JA" );
			} else {
				Interface13.Alert( "Admin jumping disabled" );
			}
			return;
		}

		// Function from file: permissionedit.dm
		[VerbInfo( name: "Permissions Panel", desc: "Edit admin permissions", group: "Admin" )]
		public void edit_admin_permissions(  ) {
			
			if ( !GlobalFuncs.check_rights( 128 ) ) {
				return;
			}
			Task13.User.client.holder.edit_admin_permissions();
			return;
		}

		// Function from file: functions.dm
		[VerbInfo( name: "Banning Panel", desc: "Edit admin permissions", group: "Admin" )]
		public void DB_ban_panel(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.holder.DB_ban_panel();
			return;
		}

		// Function from file: ToRban.dm
		[VerbInfo( group: "Server" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "update", "toggle", "show", "remove", "remove all", "find" )]
		public void ToRban( dynamic task = null ) {
			SaveFile F = null;
			string dat = null;
			int? i = null;
			SaveFile F2 = null;
			dynamic choice = null;
			dynamic input = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}

			dynamic _a = task; // Was a switch-case, sorry for the mess.
			if ( _a=="update" ) {
				GlobalFuncs.ToRban_update();
			} else if ( _a=="toggle" ) {
				
				if ( GlobalVars.config != null ) {
					
					if ( GlobalVars.config.ToRban ) {
						GlobalVars.config.ToRban = false;
						GlobalFuncs.message_admins( "<font color='red'>ToR banning disabled.</font>" );
					} else {
						GlobalVars.config.ToRban = true;
						GlobalFuncs.message_admins( "<font colot='green'>ToR banning enabled.</font>" );
					}
				}
			} else if ( _a=="show" ) {
				F = new SaveFile( "data/ToR_ban.bdb" );
				dat = null;

				if ( Lang13.Length( F.dir ) != 0 ) {
					i = null;
					i = 1;

					while (( i ??0) <= Lang13.Length( F.dir )) {
						dat += "<tr><td>#" + i + "</td><td> " + F.dir[i] + "</td></tr>";
						i++;
					}
					dat = "<table width='100%'>" + dat + "</table>";
				} else {
					dat = "No addresses in list.";
				}
				Interface13.Browse( this, dat, "window=ToRban_show" );
			} else if ( _a=="remove" ) {
				F2 = new SaveFile( "data/ToR_ban.bdb" );
				choice = Interface13.Input( this, "Please select an IP address to remove from the ToR banlist:", "Remove ToR ban", null, F2.dir, InputType.Null | InputType.Any );

				if ( Lang13.Bool( choice ) ) {
					F2.dir.Remove( choice );
					GlobalFuncs.to_chat( this, "<b>Address removed</b>" );
				}
			} else if ( _a=="remove all" ) {
				GlobalFuncs.to_chat( this, "<b>" + "data/ToR_ban.bdb" + " was " + ( File13.Delete( "data/ToR_ban.bdb" ) ? "" : "not " ) + "removed.</b>" );
			} else if ( _a=="find" ) {
				input = Interface13.Input( this, "Please input an IP address to search for:", "Find ToR ban", null, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( input ) ) {
					
					if ( GlobalFuncs.ToRban_isbanned( input ) ) {
						GlobalFuncs.to_chat( this, "<font color='green'><b>Address is a known ToR address</b></font>" );
					} else {
						GlobalFuncs.to_chat( this, "<font color='red'><b>Address is not a known ToR address</b></font>" );
					}
				}
			}
			return;
		}

		// Function from file: holder2.dm
		public bool deadmin(  ) {
			GlobalVars.admin_datums.Remove( this.ckey );

			if ( this.holder != null ) {
				this.holder.disassociate();
				Lang13.Delete( this.holder );
				this.holder = null;
			}
			return true;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Send Fax", desc: "Sends a fax to all fax machines.", group: "Fun" )]
		public void SendCentcommFax(  ) {
			dynamic sent = null;
			dynamic sentname = null;

			sent = Interface13.Input( this, "Please enter a message send via secure connection. NOTE: BBCode does not work, but HTML tags do! Use <br> for line breaks.", "Outgoing message from Centcomm", "", null, InputType.Null | InputType.StrMultiline );

			if ( !Lang13.Bool( sent ) ) {
				return;
			}
			sentname = Interface13.Input( this, "Pick a title for the report", "Title", null, null, InputType.Str | InputType.Null );
			GlobalFuncs.SendFax( sent, sentname, null, null, true );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " sent a fax to all machines.: " + sent );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " sent a fax to all machines." );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Shuttle Magic", desc: "Open a menu with magic", group: "Admin" )]
		public void shuttle_magic(  ) {
			
			if ( !( this.holder != null ) || !( GlobalVars.config != null ) ) {
				return;
			}
			this.holder.shuttle_magic();
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Toggle MoMMI Static", desc: "Toggle whether MoMMIs can see mobs or if the mobs are cloaked in static", group: "Fun" )]
		public void mommi_static(  ) {
			Mob_Living_Silicon_Robot_Mommi M = null;

			
			if ( !( this.holder != null ) || !( GlobalVars.config != null ) ) {
				return;
			}
			GlobalVars.config.mommi_static = !GlobalVars.config.mommi_static;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " turned MoMMI static " + ( GlobalVars.config.mommi_static ? "on" : "off" ) + "." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " turned MoMMI static " + ( GlobalVars.config.mommi_static ? "on" : "off" ) + "." );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Robot_Mommi) )) {
				M = _a;
				

				if ( M.can_see_static() ) {
					M.add_static_overlays();
				} else {
					M.remove_static_overlays();
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Give Achievement", group: "Fun" )]
		public void achievement(  ) {
			string achoice = null;
			dynamic winner = null;
			dynamic name = null;
			dynamic desc = null;
			string glob = null;
			Obj_Item_Weapon_ReagentContainers_Food_Drinks_GoldenCup C = null;
			Icon cup = null;
			Mob_Dead_Observer O = null;

			
			if ( !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}
			achoice = "Cancel";

			if ( !( GlobalVars.player_list.len != 0 ) ) {
				GlobalFuncs.to_chat( Task13.User, "player list is empty!" );
				return;
			}
			winner = Interface13.Input( "Who's a winner?", "Achievement Winner", null, null, GlobalVars.player_list, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( winner ) ) {
				return;
			}
			name = Interface13.Input( "What will you call your achievement?", "Achievement Winner", "New Achievement", null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( name ) ) {
				return;
			}
			desc = Interface13.Input( "What description will you give it?", "Achievement Description", "You Win", null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( desc ) ) {
				return;
			}

			if ( winner is Mob_Living ) {
				achoice = Interface13.Alert( "Give our winner his own trophy?", "Achievement Trophy", "Confirm", "Cancel" );

				if ( achoice == "Cancel" ) {
					return;
				}
			}
			glob = Interface13.Alert( "Announce the achievement globally? (Beware! Ruins immersion!)", "Last Question", "No!", "Yes!" );

			if ( achoice == "Confirm" ) {
				C = new Obj_Item_Weapon_ReagentContainers_Food_Drinks_GoldenCup( GlobalFuncs.get_turf( winner ) );
				C.name = name;
				C.desc = desc;

				if ( winner is Mob_Living_Carbon && Lang13.Bool( winner.stat ) == false ) {
					((Mob)winner).put_in_hands( C );
				}
			} else {
				GlobalFuncs.to_chat( winner, "<span class='danger'>You win " + name + "! " + desc + "</span>" );
			}
			cup = new Icon( "icons/obj/drinks.dmi", "golden_cup" );

			if ( glob == "No!" ) {
				GlobalFuncs.to_chat( winner.client, new Sound( "sound/misc/achievement.ogg" ) );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
					O = _a;
					
					GlobalFuncs.to_chat( O, new Txt( "<span class='danger'>" ).icon( cup ).str( " <b>" ).item( winner.name ).str( "</b> wins \"<b>" ).item( name ).str( "</b>\"!</span>" ).ToString() );
				}
			} else {
				GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/misc/achievement.ogg" ) );
				GlobalFuncs.to_chat( typeof(Game13), new Txt( "<span class='danger'>" ).icon( cup ).str( " <b>" ).item( winner.name ).str( "</b> wins \"<b>" ).item( name ).str( "</b>\"!</span>" ).ToString() );
			}
			GlobalFuncs.to_chat( winner, "<span class='danger'>Congratulations!</span>" );
			GlobalVars.achievements.Add( "<b>" + winner.key + "</b> as <b>" + winner.name + "</b> won \"<b>" + name + "</b>\"! \"" + desc + "\"" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has awarded <b>" + winner.key + "</b>(" + winner.name + ") with the achievement \"<b>" + name + "</b>\"! \"" + desc + "\"." );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Re-admin self", desc: "Regain your admin powers.", group: "Admin" )]
		public void readmin(  ) {
			Admins D = null;
			string sql_ckey = null;
			DBQuery query = null;
			string dckey = null;
			string rank = null;
			dynamic rights = null;

			D = GlobalVars.admin_datums[this.ckey];

			if ( GlobalVars.config.admin_legacy_system ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>Legacy admins is not supported yet</span>" );
				return;
			} else {
				
				if ( !GlobalVars.dbcon.IsConnected() ) {
					GlobalFuncs.message_admins( "Warning, mysql database is not connected." );
					GlobalFuncs.to_chat( this, "Warning, mysql database is not connected." );
					return;
				}

				if ( D != null ) {
					GlobalFuncs.to_chat( this, "You are already an admin." );
					this.verbs.Remove( typeof(Client).GetMethod( "readmin" ) );
					return;
				}
				sql_ckey = GlobalFuncs.sanitizeSQL( String13.CKey( this.ckey ) );
				query = GlobalVars.dbcon.NewQuery( "SELECT ckey, rank, level, flags FROM erro_admin WHERE ckey = '" + sql_ckey + "'" );
				query.Execute();

				while (query.NextRow()) {
					dckey = query.item[1];
					rank = query.item[2];

					if ( rank == "Removed" ) {
						continue;
					}
					rights = query.item[4];

					if ( rights is string ) {
						rights = String13.ParseNumber( rights );
					}
					D = new Admins( rank, rights, dckey );
					D.associate( this );
					GlobalFuncs.message_admins( "" + this + " re-adminned themselves." );
					GlobalFuncs.log_admin( "" + this + " re-adminned themselves." );
					GlobalFuncs.feedback_add_details( "admin_verb", "RAS" );
					this.verbs.Remove( typeof(Client).GetMethod( "readmin" ) );
					return;
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Man Up Global", desc: "Tells everyone to man up and deal with it.", group: "Fun" )]
		public void global_man_up(  ) {
			dynamic T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				T = _a;
				
				GlobalFuncs.to_chat( T, "<br><center><span class='notice'><b><font size=4>Man up.<br> Deal with it.</font></b><br>Move on.</span></center><br>" );
				GlobalFuncs.to_chat( T, "sound/voice/ManUp1.ogg" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " told everyone to man up and deal with it." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " told everyone to man up and deal with it.</span>" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Man Up", desc: "Tells mob to man up and deal with it.", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void man_up( dynamic T = null ) {
			GlobalFuncs.to_chat( T, "<span class='notice'><b><font size=3>Man up and deal with it.</font></b></span>" );
			GlobalFuncs.to_chat( T, "<span class='notice'>Move on.</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " told " + GlobalFuncs.key_name( T ) + " to man up and deal with it." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " told " + GlobalFuncs.key_name( T ) + " to man up and deal with it.</span>" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Toggle Debug Log Messages", group: "Preferences" )]
		public void toggledebuglogs(  ) {
			this.prefs.toggles ^= 2048;
			this.prefs.save_preferences_sqlite( this, this.ckey );

			if ( Lang13.Bool( this.prefs.toggles & 2048 ) ) {
				GlobalFuncs.to_chat( Task13.User, "You now will get debug log messages" );
			} else {
				GlobalFuncs.to_chat( Task13.User, "You now won't get debug log messages" );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Set Command Name", group: "Fun" )]
		public void commandname(  ) {
			dynamic text = null;

			text = Interface13.Input( Task13.User, "Please select a new Central Command name.", null, null, null, InputType.Str | InputType.Null );

			if ( Lang13.Bool( text ) ) {
				GlobalFuncs.change_command_name( text );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Toggle Attack Log Messages", group: "Preferences" )]
		public void toggleattacklogs(  ) {
			this.prefs.toggles ^= 1024;
			this.prefs.save_preferences_sqlite( this, this.ckey );

			if ( Lang13.Bool( this.prefs.toggles & 1024 ) ) {
				GlobalFuncs.to_chat( Task13.User, "You now will get attack log messages" );
			} else {
				GlobalFuncs.to_chat( Task13.User, "You now won't get attack log messages" );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Free Job Slot", group: "Admin" )]
		public void free_slot(  ) {
			ByTable jobs = null;
			Job J = null;
			dynamic job = null;

			
			if ( this.holder != null ) {
				jobs = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.job_master.occupations, typeof(Job) )) {
					J = _a;
					

					if ( ( J.current_positions ??0) >= ( J.total_positions ??0) && J.total_positions != -1 ) {
						jobs.Add( J.title );
					}
				}

				if ( !( jobs.len != 0 ) ) {
					GlobalFuncs.to_chat( Task13.User, "There are no fully staffed jobs." );
					return;
				}
				job = Interface13.Input( "Please select job slot to free", "Free job slot", null, null, jobs, InputType.Null | InputType.Any );

				if ( Lang13.Bool( job ) ) {
					GlobalVars.job_master.FreeRole( job );
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Show Player Info", group: "Admin" )]
		public void playernotes(  ) {
			
			if ( this.holder != null ) {
				this.holder.PlayerNotes();
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Edit Appearance", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void editappear( Mob_Living_Carbon_Human M = null ) {
			dynamic new_facial = null;
			dynamic new_hair = null;
			dynamic new_eyes = null;
			dynamic new_tone = null;
			dynamic new_hstyle = null;
			dynamic new_fstyle = null;
			string new_gender = null;

			
			if ( !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}

			if ( !( M is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can only do this to humans!</span>" );
				return;
			}

			switch ((string)( Interface13.Alert( "Are you sure you wish to edit this mob's appearance? Skrell, Unathi, Vox and Tajaran can result in unintended consequences.", null, "Yes", "No" ) )) {
				case "No":
					return;
					break;
			}
			new_facial = Interface13.Input( "Please select facial hair color.", "Character Generation", null, null, null, InputType.Color );

			if ( Lang13.Bool( new_facial ) ) {
				M.r_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 2, 4 ) );
				M.g_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 4, 6 ) );
				M.b_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 6, 8 ) );
			}
			new_hair = Interface13.Input( "Please select hair color.", "Character Generation", null, null, null, InputType.Color );

			if ( Lang13.Bool( new_facial ) ) {
				M.r_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 2, 4 ) );
				M.g_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 4, 6 ) );
				M.b_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 6, 8 ) );
			}
			new_eyes = Interface13.Input( "Please select eye color.", "Character Generation", null, null, null, InputType.Color );

			if ( Lang13.Bool( new_eyes ) ) {
				M.r_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 2, 4 ) );
				M.g_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 4, 6 ) );
				M.b_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 6, 8 ) );
			}
			new_tone = Interface13.Input( "Please select skin tone level: 1-220 (1=albino, 35=caucasian, 150=black, 220='very' black)", "Character Generation", null, null, null, InputType.Str );

			if ( Lang13.Bool( new_tone ) ) {
				M.s_tone = Num13.MaxInt( Num13.MinInt( Num13.Floor( String13.ParseNumber( new_tone ) ??0 ), 220 ), 1 );
				M.s_tone = -( M.s_tone ??0) + 35;
			}
			new_hstyle = Interface13.Input( Task13.User, "Select a hair style", "Grooming", null, GlobalVars.hair_styles_list, InputType.Null | InputType.Any );

			if ( Lang13.Bool( new_hstyle ) ) {
				M.h_style = new_hstyle;
			}
			new_fstyle = Interface13.Input( Task13.User, "Select a facial hair style", "Grooming", null, GlobalVars.facial_hair_styles_list, InputType.Null | InputType.Any );

			if ( Lang13.Bool( new_fstyle ) ) {
				M.f_style = new_fstyle;
			}
			new_gender = Interface13.Alert( Task13.User, "Please select gender.", "Character Generation", "Male", "Female" );

			if ( Lang13.Bool( new_gender ) ) {
				
				if ( new_gender == "Male" ) {
					M.setGender( GlobalVars.MALE );
				} else {
					M.setGender( GlobalVars.FEMALE );
				}
			}
			M.update_hair();
			M.update_body();
			M.check_dna(  );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Moderator Panel", group: "Admin" )]
		public void mod_panel(  ) {
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Check AI Laws", group: "Admin" )]
		public void check_ai_laws(  ) {
			
			if ( this.holder != null ) {
				this.holder.output_ai_laws();
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Toggle href logging", group: "Server" )]
		public void toggle_log_hrefs(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}

			if ( GlobalVars.config != null ) {
				
				if ( GlobalVars.config.log_hrefs ) {
					GlobalVars.config.log_hrefs = false;
					GlobalFuncs.to_chat( this, "<b>Stopped logging hrefs</b>" );
				} else {
					GlobalVars.config.log_hrefs = true;
					GlobalFuncs.to_chat( this, "<b>Started logging hrefs</b>" );
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "De-admin self", group: "Admin" )]
		public void deadmin_self(  ) {
			
			if ( this.holder != null ) {
				
				if ( Interface13.Alert( "Are you sure you want to deadmin?", "Deadmin", "Yes", "No" ) == "No" ) {
					return;
				}
				GlobalFuncs.log_admin( "" + this + " deadminned themself." );
				GlobalFuncs.message_admins( "" + this + " deadminned themself." );
				this.deadmin();
				this.verbs.Add( typeof(Client).GetMethod( "readmin" ) );
				GlobalVars.deadmins.Add( this.ckey );
				GlobalFuncs.to_chat( this, "<span class='interface'>You are now a normal player.</span>" );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "DAS" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Kill Air", desc: "Toggle Air Processing", group: "Debug" )]
		public void kill_air(  ) {
			
			if ( GlobalVars.air_processing_killed == true ) {
				GlobalVars.air_processing_killed = false;
				GlobalFuncs.to_chat( Task13.User, "<b>Enabled air processing.</b>" );
			} else {
				GlobalVars.air_processing_killed = true;
				GlobalFuncs.to_chat( Task13.User, "<b>Disabled air processing.</b>" );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "KA" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used 'kill air'." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " used 'kill air'.</span>" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "OSay", desc: "Make an object say something", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Obj )]
		public void object_talk( Ent_Dynamic O = null ) {
			dynamic message = null;
			Ent_Dynamic M = null;
			bool olduniv = false;

			message = Interface13.Input( Task13.User, "What do you want the message to be?", "Make Sound", null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( message ) ) {
				return;
			}

			if ( O is Mob ) {
				M = O;
				olduniv = Lang13.Bool( ((dynamic)M).universal_speak );
				((dynamic)M).universal_speak = 1;
			}
			O.say( message );

			if ( M != null ) {
				((dynamic)M).universal_speak = olduniv;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + O + " at " + O.x + ", " + O.y + ", " + O.z + " say \"" + message + "\"" );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + O + " at " + O.x + ", " + O.y + ", " + O.z + ". say \"" + message + "\"</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "OT" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Toggle Build Mode Self", group: "Special Verbs" )]
		public void togglebuildmodeself(  ) {
			
			if ( this.mob != null ) {
				GlobalFuncs.togglebuildmode( this.mob );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TBMS" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Make Sound", desc: "Display a message to everyone who can hear the target", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Obj )]
		public void make_sound( Ent_Dynamic O = null ) {
			dynamic message = null;
			Ent_Dynamic M = null;
			bool olduniv = false;

			
			if ( O is Obj ) {
				message = Interface13.Input( "What do you want the message to be?", "Make Sound", null, null, null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( message ) ) {
					return;
				}

				if ( O is Mob ) {
					M = O;
					olduniv = Lang13.Bool( ((dynamic)M).universal_speak );
					((dynamic)M).universal_speak = 1;
				}
				O.say( message );

				if ( M != null ) {
					((dynamic)M).universal_speak = olduniv;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + O + " at " + O.x + ", " + O.y + ", " + O.z + ". make a sound" );
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + O + " at " + O.x + ", " + O.y + ", " + O.z + ". make a sound</span>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "MS" );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Give Disease", desc: "Gives a Disease to a mob.", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void give_disease( dynamic T = null ) {
			dynamic D = null;

			D = Interface13.Input( "Choose the disease to give to that guy", "ACHOO", null, null, GlobalVars.diseases, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( D ) ) {
				return;
			}
			((Mob)T).contract_disease( Lang13.Call( D ), true );
			GlobalFuncs.feedback_add_details( "admin_verb", "GD" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " gave " + GlobalFuncs.key_name( T ) + " the disease " + D + "." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " gave " + GlobalFuncs.key_name( T ) + " the disease " + D + ".</span>" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Give Spell", desc: "Gives a spell to a mob.", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void give_spell( dynamic T = null ) {
			dynamic S = null;

			S = Interface13.Input( "Choose the spell to give to that guy", "ABRAKADABRA", null, null, GlobalVars.spells, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( S ) ) {
				return;
			}
			((Mob)T).add_spell( Lang13.Call( S ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "GS" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " gave " + GlobalFuncs.key_name( T ) + " the spell " + S + "." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " gave " + GlobalFuncs.key_name( T ) + " the spell " + S + ".</span>" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Drop EMP", desc: "Cause an EMP of varying strength at your location.", group: "Special Verbs" )]
		public bool drop_emp(  ) {
			Ent_Static epicenter = null;
			ByTable choices = null;
			dynamic choice = null;
			dynamic heavy_impact_range = null;
			dynamic light_impact_range = null;

			epicenter = this.mob.loc;
			choices = new ByTable(new object [] { "Small EMP (1,2)", "Medium EMP (2,4)", "Big EMP (4,8)", "Custom EMP" });
			choice = Interface13.Input( "What size EMP would you like to produce?", null, null, null, choices, InputType.Any );

			dynamic _a = choice; // Was a switch-case, sorry for the mess.
			if ( _a==null ) {
				return false;
			} else if ( _a=="Small EMP (1,2)" ) {
				GlobalFuncs.empulse( epicenter, 1, 2 );
			} else if ( _a=="Medium EMP (2,4)" ) {
				GlobalFuncs.empulse( epicenter, 2, 4 );
			} else if ( _a=="Big EMP (4,8)" ) {
				GlobalFuncs.empulse( epicenter, 4, 8 );
			} else if ( _a=="Custom EMP" ) {
				heavy_impact_range = Interface13.Input( "Heavy impact range (in tiles):", null, null, null, null, InputType.Num );
				light_impact_range = Interface13.Input( "Light impact range (in tiles):", null, null, null, null, InputType.Num );
				GlobalFuncs.empulse( epicenter, heavy_impact_range, light_impact_range );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " creating an admin EMP at " + epicenter.loc + " (" + epicenter.x + "," + epicenter.y + "," + epicenter.z + ")." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( this ) + " creating an admin EMP at " + epicenter.loc + " (" + epicenter.x + "," + epicenter.y + "," + epicenter.z + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + epicenter.x + ";Y=" + epicenter.y + ";Z=" + epicenter.z + "'>JMP</A>).</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "DE" );
			return false;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Drop Bomb", desc: "Cause an explosion of varying strength at your location.", group: "Special Verbs" )]
		public bool drop_bomb(  ) {
			Ent_Static epicenter = null;
			ByTable choices = null;
			dynamic choice = null;
			dynamic devastation_range = null;
			dynamic heavy_impact_range = null;
			dynamic light_impact_range = null;
			dynamic flash_range = null;

			epicenter = this.mob.loc;
			choices = new ByTable(new object [] { "Small Bomb (1,2,3)", "Medium Bomb (2,3,4)", "Big Bomb (3,5,7)", "Custom Bomb" });
			choice = Interface13.Input( "What size explosion would you like to produce?", null, null, null, choices, InputType.Any );

			dynamic _a = choice; // Was a switch-case, sorry for the mess.
			if ( _a==null ) {
				return false;
			} else if ( _a=="Small Bomb (1,2,3)" ) {
				GlobalFuncs.explosion( epicenter, 1, 2, 3, 3 );
			} else if ( _a=="Medium Bomb (2,3,4)" ) {
				GlobalFuncs.explosion( epicenter, 2, 3, 4, 4 );
			} else if ( _a=="Big Bomb (3,5,7)" ) {
				GlobalFuncs.explosion( epicenter, 3, 5, 7, 5 );
			} else if ( _a=="Custom Bomb" ) {
				devastation_range = Interface13.Input( "Devastation range (in tiles):", null, null, null, null, InputType.Num );
				heavy_impact_range = Interface13.Input( "Heavy impact range (in tiles):", null, null, null, null, InputType.Num );
				light_impact_range = Interface13.Input( "Light impact range (in tiles):", null, null, null, null, InputType.Num );
				flash_range = Interface13.Input( "Flash range (in tiles):", null, null, null, null, InputType.Num );
				GlobalFuncs.explosion( epicenter, devastation_range, heavy_impact_range, light_impact_range, flash_range );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " creating an admin explosion at " + epicenter.loc + " (" + epicenter.x + "," + epicenter.y + "," + epicenter.z + ")." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( this ) + " creating an admin explosion at " + epicenter.loc + " (" + epicenter.x + "," + epicenter.y + "," + epicenter.z + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + epicenter.x + ";Y=" + epicenter.y + ";Z=" + epicenter.z + "'>JMP</A>).</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "DB" );
			return false;
		}

		// Function from file: admin_verbs.dm
		public void unwarn( dynamic warned_ckey = null ) {
			Preferences D = null;
			Client C = null;
			double strikesleft = 0;

			
			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return;
			}

			if ( !Lang13.Bool( warned_ckey ) || !( warned_ckey is string ) ) {
				return;
			}
			C = GlobalVars.directory[warned_ckey];

			if ( C != null ) {
				D = C.prefs;
			} else {
				D = GlobalVars.preferences_datums[warned_ckey];
			}

			if ( !( D != null ) ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: unwarn(): No such ckey found.</font>" );
				return;
			}

			if ( D.warns == 0 ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: unwarn(): You can't unwarn someone with 0 warnings, you big dummy.</font>" );
				return;
			}
			D.warns -= 1;
			strikesleft = 3 - ( D.warns ??0);

			if ( C != null ) {
				GlobalFuncs.to_chat( C, new Txt( "<font color='red'><BIG><B>One of your warnings has been removed.</B></BIG><br>You currently have " ).item( strikesleft ).str( " strike" ).s().str( " left</font>" ).ToString() );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has unwarned " + GlobalFuncs.key_name_admin( C ) + ". They have " + strikesleft + " strike(s) remaining, and have been warn banned " + D.warnbans + " " + ( D.warnbans == 1 ? "time" : "times" ) );
			} else {
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has unwarned " + warned_ckey + " (DC). They have " + strikesleft + " strike(s) remaining, and have been warn banned " + D.warnbans + " " + ( D.warnbans == 1 ? "time" : "times" ) );
			}
			D.save_preferences_sqlite( C, C.ckey );
			GlobalFuncs.feedback_add_details( "admin_verb", "UNWARN" );
			return;
		}

		// Function from file: admin_verbs.dm
		public void warn( string warned_ckey = null ) {
			string reason = null;
			Preferences D = null;
			Client C = null;
			dynamic warn_reason = null;
			int bantime = 0;
			double? i = null;

			reason = "Autobanning due to too many formal warnings";

			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return;
			}

			if ( !Lang13.Bool( warned_ckey ) || !( warned_ckey is string ) ) {
				return;
			}
			C = GlobalVars.directory[warned_ckey];

			if ( C != null ) {
				D = C.prefs;
			} else {
				D = GlobalVars.preferences_datums[warned_ckey];
			}

			if ( !( D != null ) ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: warn(): No such ckey found.</font>" );
				return;
			}
			warn_reason = Interface13.Input( "Reason for warning?", "Admin abuuuuuuuse", null, null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( warn_reason ) ) {
				return;
			}
			GlobalFuncs.notes_add( warned_ckey, warn_reason, this.mob );

			if ( ( ++D.warns ??0) >= 3 ) {
				bantime = 90;
				D.warns = 0;
				D.warnbans++;
				i = null;
				i = 1;

				while (( i ??0) < ( D.warnbans ??0)) {
					bantime *= 2;
					i++;
				}
				GlobalFuncs.ban_unban_log_save( "" + this.ckey + " warned " + warned_ckey + " - " + warn_reason + ", resulting in a " + bantime + " minute autoban." );

				if ( C != null ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has warned " + GlobalFuncs.key_name_admin( C ) + " - " + warn_reason + ", resulting in a " + bantime + " minute ban." );
					GlobalFuncs.to_chat( C, "<span class='danger'><BIG>You have been autobanned due to a warning by " + this.ckey + " - Reason: " + warn_reason + ".</BIG></span><br>This is a temporary ban, it will be removed in " + bantime + " minutes." );
				} else {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has warned " + warned_ckey + " - " + warn_reason + ", resulting in a " + bantime + " minute ban." );
				}
				GlobalFuncs.AddBan( warned_ckey, D.last_id, "Autobanning due to too many formal warnings - " + warn_reason, this.ckey, true, bantime );
				this.holder.DB_ban_record( 2, null, bantime, "" + reason + " - " + warn_reason, null, null, warned_ckey );
				GlobalFuncs.feedback_inc( "ban_warn", 1 );
				D.save_preferences_sqlite( C, C.ckey );
				Lang13.Delete( C );
				C = null;
			} else {
				
				if ( C != null ) {
					GlobalFuncs.to_chat( C, "<span class='danger'><BIG>You have been formally warned by an administrator - Reason: " + warn_reason + ".</span></BIG><br>Further warnings will result in an autoban.</font>" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has warned " + GlobalFuncs.key_name_admin( C ) + " - " + warn_reason + ". They have " + ( 3 - ( D.warns ??0) ) + " strikes remaining. And have been warn banned " + D.warnbans + " " + ( D.warnbans == 1 ? "time" : "times" ) );
				} else {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has warned " + warned_ckey + " (DC) - " + warn_reason + ". They have " + ( 3 - ( D.warns ??0) ) + " strikes remaining. And have been warn banned " + D.warnbans + " " + ( D.warnbans == 1 ? "time" : "times" ) );
				}
				D.save_preferences_sqlite( C, C.ckey );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "WARN" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Stealth Mode", group: "Admin" )]
		public void stealth(  ) {
			string new_key = null;

			
			if ( this.holder != null ) {
				
				if ( Lang13.Bool( this.holder.fakekey ) ) {
					this.holder.fakekey = null;
				} else {
					new_key = String13.CKeyPreserveCase( Interface13.Input( "Enter your desired display name.", "Fake Key", this.key, null, null, InputType.Str | InputType.Null ) );

					if ( !Lang13.Bool( new_key ) ) {
						return;
					}

					if ( Lang13.Length( new_key ) >= 26 ) {
						new_key = String13.SubStr( new_key, 1, 26 );
					}
					this.holder.fakekey = new_key;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has turned stealth mode " + ( Lang13.Bool( this.holder.fakekey ) ? "ON" : "OFF" ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has turned stealth mode " + ( Lang13.Bool( this.holder.fakekey ) ? "ON" : "OFF" ) );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SM" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "OOC Text Color", group: "Fun" )]
		public void colorooc(  ) {
			dynamic new_ooccolor = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			new_ooccolor = Interface13.Input( this, "Please select your OOC colour.", "OOC colour", null, null, InputType.Null | InputType.Color );

			if ( Lang13.Bool( new_ooccolor ) ) {
				this.prefs.ooccolor = new_ooccolor;
				this.prefs.save_preferences_sqlite( this, this.ckey );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "OC" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Secrets", group: "Admin" )]
		public void secrets(  ) {
			
			if ( this.holder != null ) {
				this.holder.Secrets();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "S" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Game Panel", group: "Admin" )]
		public void game_panel(  ) {
			
			if ( this.holder != null ) {
				this.holder.Game();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "GP" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Unban Panel", group: "Admin" )]
		public void unban_panel(  ) {
			
			if ( this.holder != null ) {
				
				if ( GlobalVars.config.ban_legacy_system ) {
					this.holder.unbanpanel();
				} else {
					this.holder.DB_ban_panel();
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "UBP" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Display Job bans", group: "Admin" )]
		public void jobbans(  ) {
			
			if ( this.holder != null ) {
				
				if ( GlobalVars.config.ban_legacy_system ) {
					this.holder.Jobbans();
				} else {
					this.holder.DB_ban_panel();
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "VJB" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Check Antagonists", group: "Admin" )]
		public void check_antagonists(  ) {
			
			if ( this.holder != null ) {
				this.holder.check_antagonists();
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " checked antagonists." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "CHA" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Player Panel New", group: "Admin" )]
		public void player_panel_new(  ) {
			
			if ( this.holder != null ) {
				this.holder.player_panel_new();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "PPN" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Player Panel", group: "Admin" )]
		public void player_panel(  ) {
			
			if ( this.holder != null ) {
				this.holder.player_panel_old();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "PP" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Invisimin", desc: "Toggles ghost-like invisibility (Don't abuse this)", group: "Admin" )]
		public void invisimin(  ) {
			
			if ( this.holder != null && this.mob != null ) {
				
				if ( this.mob.invisibility == 60 ) {
					this.mob.invisibility = Convert.ToInt32( Lang13.Initial( this.mob, "invisibility" ) );
					GlobalFuncs.to_chat( this.mob, "<span class='danger'>Invisimin off. Invisibility reset.</span>" );
					this.mob.icon_state = "ghost";
					this.mob.icon = "icons/mob/human.dmi";
					this.mob.update_icons();
				} else {
					this.mob.invisibility = 60;
					GlobalFuncs.to_chat( this.mob, "<span class='notice'><b>Invisimin on. You are now as invisible as a ghost.</b></span>" );
					this.mob.icon_state = "ghost";
					this.mob.icon = "icons/mob/mob.dmi";
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Aghost", group: "Admin" )]
		public void admin_ghost(  ) {
			Mob ghost = null;
			Mob body = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}

			if ( this.mob is Mob_Dead_Observer ) {
				ghost = this.mob;
				((dynamic)ghost).can_reenter_corpse = 1;
				((Mob_Dead_Observer)ghost).reenter_corpse();
				GlobalFuncs.feedback_add_details( "admin_verb", "P" );
			} else if ( this.mob is Mob_NewPlayer ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: Aghost: Can't admin-ghost whilst in the lobby. Join or Observe first.</font>" );
			} else {
				body = this.mob;

				if ( body.mind != null ) {
					body.mind.isScrying = true;
				}
				body.ghostize( true );

				if ( body != null && !Lang13.Bool( body.key ) ) {
					body.key = "@" + this.key;
				}
				GlobalFuncs.feedback_add_details( "admin_verb", "O" );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Adminverbs - Show", group: "Admin" )]
		public void show_verbs(  ) {
			this.verbs.Remove( typeof(Client).GetMethod( "show_verbs" ) );
			this.add_admin_verbs();
			GlobalFuncs.to_chat( this, "<span class='interface'>All of your adminverbs are now visible.</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAVVS" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Adminverbs - Hide All", group: "Admin" )]
		public void hide_verbs(  ) {
			this.remove_admin_verbs();
			this.verbs.Add( typeof(Client).GetMethod( "show_verbs" ) );
			GlobalFuncs.to_chat( this, "<span class='interface'>Almost all of your adminverbs have been hidden.</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAVVH" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Adminverbs - Hide Most", group: "Admin" )]
		public void hide_most_verbs(  ) {
			this.verbs.Remove( typeof(Client).GetMethod( "hide_most_verbs" ), GlobalVars.admin_verbs_hideable );
			this.verbs.Add( typeof(Client).GetMethod( "show_verbs" ) );
			GlobalFuncs.to_chat( this, "<span class='interface'>Most of your adminverbs have been hidden.</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "HMV" );
			return;
		}

		// Function from file: admin_verbs.dm
		public void remove_admin_verbs(  ) {
			this.verbs.Remove( GlobalVars.admin_verbs_default, typeof(Client).GetMethod( "togglebuildmodeself" ), GlobalVars.admin_verbs_admin, GlobalVars.admin_verbs_ban, GlobalVars.admin_verbs_fun, GlobalVars.admin_verbs_server, GlobalVars.admin_verbs_debug, GlobalVars.admin_verbs_possess, GlobalVars.admin_verbs_permissions, typeof(Client).GetMethod( "stealth" ), GlobalVars.admin_verbs_rejuv, GlobalVars.admin_verbs_sounds, GlobalVars.admin_verbs_spawn, GlobalVars.admin_verbs_mod, typeof(Client).GetMethod( "Cell" ), typeof(Client).GetMethod( "pdiff" ), typeof(Client).GetMethod( "do_not_use_these" ), typeof(Client).GetMethod( "camera_view" ), typeof(Client).GetMethod( "sec_camera_report" ), typeof(Client).GetMethod( "intercom_view" ), typeof(Client).GetMethod( "air_status" ), typeof(Client).GetMethod( "atmosscan" ), typeof(Client).GetMethod( "powerdebug" ), typeof(Client).GetMethod( "count_objects_on_z_level" ), typeof(Client).GetMethod( "count_objects_all" ), typeof(Client).GetMethod( "cmd_assume_direct_control" ), typeof(Client).GetMethod( "jump_to_dead_group" ), typeof(Client).GetMethod( "startSinglo" ), typeof(Client).GetMethod( "cheat_power" ), typeof(Client).GetMethod( "setup_atmos" ), typeof(Client).GetMethod( "ticklag" ), typeof(Client).GetMethod( "cmd_admin_grantfullaccess" ), typeof(Client).GetMethod( "kaboom" ), typeof(Client).GetMethod( "splash" ), typeof(Client).GetMethod( "cmd_admin_areatest" ), typeof(Client).GetMethod( "readmin" ), typeof(Client).GetMethod( "nanomapgen_DumpImage" ), typeof(Client).GetMethod( "nanomapgen_DumpImageAll" ) );
			return;
		}

		// Function from file: admin_verbs.dm
		public void add_admin_verbs(  ) {
			
			if ( this.holder != null ) {
				this.verbs.Add( GlobalVars.admin_verbs_default );

				if ( Lang13.Bool( this.holder.rights & 1 ) ) {
					this.verbs.Add( typeof(Client).GetMethod( "togglebuildmodeself" ) );
				}

				if ( Lang13.Bool( this.holder.rights & 2 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_admin );
				}

				if ( Lang13.Bool( this.holder.rights & 4 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_ban );
				}

				if ( Lang13.Bool( this.holder.rights & 8 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_fun );
				}

				if ( Lang13.Bool( this.holder.rights & 16 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_server );
				}

				if ( Lang13.Bool( this.holder.rights & 32 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_debug );
				}

				if ( Lang13.Bool( this.holder.rights & 64 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_possess );
				}

				if ( Lang13.Bool( this.holder.rights & 128 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_permissions );
				}

				if ( Lang13.Bool( this.holder.rights & 256 ) ) {
					this.verbs.Add( typeof(Client).GetMethod( "stealth" ) );
				}

				if ( Lang13.Bool( this.holder.rights & 512 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_rejuv );
				}

				if ( Lang13.Bool( this.holder.rights & 2048 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_sounds );
				}

				if ( Lang13.Bool( this.holder.rights & 4096 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_spawn );
				}

				if ( Lang13.Bool( this.holder.rights & 8192 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_mod );
				}

				if ( Lang13.Bool( this.holder.rights & 16384 ) ) {
					this.verbs.Add( typeof(Client).GetMethod( "secrets" ) );
				}
			}
			return;
		}

		// Function from file: admin_memo.dm
		public void admin_memo_delete(  ) {
			SaveFile F = null;
			dynamic ckey = null;

			F = new SaveFile( "data/memo.sav" );

			if ( F != null ) {
				
				if ( GlobalFuncs.check_rights( 16, false ) ) {
					ckey = Interface13.Input( this, "Whose memo shall we remove?", "Remove Memo", null, F.dir, InputType.Null | InputType.Any );
				} else {
					ckey = this.ckey;
				}

				if ( Lang13.Bool( ckey ) ) {
					F.dir.Remove( ckey );
					GlobalFuncs.to_chat( this, "<b>Removed Memo created by " + ckey + ".</b>" );
				}
			}
			return;
		}

		// Function from file: admin_memo.dm
		public void admin_memo_show(  ) {
			SaveFile F = null;
			dynamic ckey = null;

			F = new SaveFile( "data/memo.sav" );

			if ( F != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( F.dir )) {
					ckey = _a;
					
					GlobalFuncs.to_chat( this, "<center><span class='motd'><b>Admin Memo</b><i> by " + F[ckey] + "</i></span></center>" );
				}
			}
			return;
		}

		// Function from file: admin_memo.dm
		public void admin_memo_write(  ) {
			SaveFile F = null;
			dynamic memo = null;

			F = new SaveFile( "data/memo.sav" );

			if ( F != null ) {
				memo = Interface13.Input( this, "Type your memo\n(Leaving it blank will delete your current memo):", "Write Memo", null, null, InputType.Null | InputType.StrMultiline );

				dynamic _a = memo; // Was a switch-case, sorry for the mess.
				if ( _a==null ) {
					return;
				} else if ( _a=="" ) {
					F.dir.Remove( this.ckey );
					GlobalFuncs.to_chat( this, "<b>Memo removed</b>" );
					return;
				}

				if ( String13.FindIgnoreCase( memo, "<script", 1, 0 ) != 0 ) {
					return;
				}
				F[this.ckey].WriteMsg( "" + this.key + " on " + String13.FormatTime( Game13.realtime, "(DDD) DD MMM hh:mm" ) + "<br>" + memo );
				GlobalFuncs.message_admins( "" + this.key + " set an admin memo:<br>" + memo );
			}
			return;
		}

		// Function from file: admin_memo.dm
		[VerbInfo( name: "Memo", group: "Server" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "write", "show", "delete" )]
		public void admin_memo( dynamic task = null ) {
			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}

			dynamic _a = task; // Was a switch-case, sorry for the mess.
			if ( _a=="write" ) {
				this.admin_memo_write();
			} else if ( _a=="show" ) {
				this.admin_memo_show();
			} else if ( _a=="delete" ) {
				this.admin_memo_delete();
			}
			return;
		}

		// Function from file: admin_investigate.dm
		[VerbInfo( name: "Investigate", group: "Admin" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "hrefs", "notes", "ntsl", "singulo", "atmos" )]
		public void investigate_show( dynamic subject = null ) {
			LogController I = null;

			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're not an admin, go away.</span>" );
				return;
			}

			if ( !GlobalVars.investigations.Contains( subject ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>Unable to find that subject.</span>" );
				return;
			}
			I = GlobalVars.investigations[subject];

			if ( !( I != null ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>No log for " + subject + " can be found.</span>" );
				return;
			}
			I.read( Task13.User );
			return;
		}

		// Function from file: admin.dm
		[VerbInfo( name: "Update Mob Sprite", desc: "Should fix any mob sprite update errors.", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void update_mob_sprite( Mob H = null ) {
			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( this, "Only administrators may use this command." );
				return;
			}

			if ( H is Mob_Living_Carbon_Human ) {
				H.regenerate_icons();
			}
			return;
		}

		// Function from file: admin.dm
		[VerbInfo( name: "Unjobban Panel", group: "Admin" )]
		public void unjobban_panel(  ) {
			
			if ( this.holder != null ) {
				this.holder.unjobbanpanel();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "UJBP" );
			return;
		}

		// Function from file: ooc.dm
		[VerbInfo( name: "Set Player OOC Colour", desc: "Set to yellow for eye burning goodness.", group: "Fun" )]
		public void set_ooc( dynamic newColor = null ) {
			GlobalVars.config.default_ooc_color = newColor;
			return;
		}

		// Function from file: false_walls.dm
		[VerbInfo( name: "Get PDiff", group: "Debug" )]
		public void pdiff(  ) {
			Ent_Static T = null;
			double pdiff = 0;
			double fwpcheck = 0;
			double wpcheck = 0;

			
			if ( !( this.mob != null ) || !( this.holder != null ) ) {
				return;
			}
			T = this.mob.loc;

			if ( !( T is Tile ) ) {
				return;
			}
			pdiff = GlobalFuncs.getOPressureDifferential( T );
			fwpcheck = GlobalFuncs.performFalseWallPressureCheck( T );
			wpcheck = GlobalFuncs.performWallPressureCheck( T );
			GlobalFuncs.to_chat( this, "Pressure Differential (cardinals): " + pdiff );
			GlobalFuncs.to_chat( this, "FWPCheck: " + fwpcheck );
			GlobalFuncs.to_chat( this, "WPCheck: " + wpcheck );
			return;
		}

		// Function from file: explosion_recursive.dm
		[VerbInfo( group: "Debug" )]
		public void kaboom(  ) {
			dynamic power = null;
			dynamic T = null;

			power = Interface13.Input( this, "power?", "power?", null, null, InputType.Num );
			T = GlobalFuncs.get_turf( this.mob );
			GlobalFuncs.explosion_rec( T, power );
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Spawn Cape", desc: "Acquire a fabulous, yet fearsome cape.", group: "Vampire" )]
		public void vampire_spawncape(  ) {
			Mind M = null;
			Obj_Item_Clothing_Suit_Storage_Draculacoat D = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 0, 0 ) ) {
				D = new Obj_Item_Clothing_Suit_Storage_Draculacoat( M.current.loc );
				((Mob)M.current).put_in_any_hand_if_possible( D );
				M.current.verbs -= typeof(Client).GetMethod( "vampire_spawncape" );
				Task13.Sleep( 300 );
				M.current.verbs += typeof(Client).GetMethod( "vampire_spawncape" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Shadowy Menace (toggle)", desc: "Terrify anyone who looks at you in the dark.", group: "Vampire" )]
		public void vampire_shadowmenace(  ) {
			Mind M = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 0, 0 ) ) {
				M.vampire.ismenacing = !M.vampire.ismenacing;
				GlobalFuncs.to_chat( M.current, "<span class='notice'>You will " + ( M.vampire.ismenacing ? "now" : "no longer" ) + " terrify those who see you the in dark.</span>" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Shadowstep (20)", desc: "Vanish into the shadows.", group: "Vampire" )]
		public void vampire_shadowstep(  ) {
			Mind M = null;
			bool inner_tele_radius = false;
			int outer_tele_radius = 0;
			double max_lum = 0;
			ByTable turfs = null;
			dynamic T = null;
			dynamic picked = null;
			dynamic T2 = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}
			inner_tele_radius = false;
			outer_tele_radius = 6;
			max_lum = 1;

			if ( ((Mob)M.current).vampire_power( 20, 0 ) ) {
				
				if ( Lang13.Bool( M.current.locked_to ) ) {
					((Ent_Dynamic)M.current.locked_to).unlock_atom( M.current );
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					turfs = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( outer_tele_radius, Task13.User ) )) {
						T = _a;
						

						if ( Map13.FetchInRange( inner_tele_radius, Task13.User ).Contains( T ) ) {
							continue;
						}

						if ( T is Tile_Space ) {
							continue;
						}

						if ( T.density ) {
							continue;
						}

						if ( Convert.ToDouble( T.x ) > Game13.map_size_x - outer_tele_radius || Convert.ToDouble( T.x ) < outer_tele_radius ) {
							continue;
						}

						if ( Convert.ToDouble( T.y ) > Game13.map_size_y - outer_tele_radius || Convert.ToDouble( T.y ) < outer_tele_radius ) {
							continue;
						}

						if ( ((Tile)T).get_lumcount() * 10 > max_lum ) {
							continue;
						}
						turfs.Add( T );
					}

					if ( !( turfs.len != 0 ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You cannot find darkness to step to.</span>" );
						return;
					}
					picked = Rand13.PickFromTable( turfs );

					if ( !Lang13.Bool( picked ) || !( picked is Tile ) ) {
						return;
					}
					((Mob_Living)M.current).ExtinguishMob();

					if ( Lang13.Bool( M.current.locked_to ) ) {
						((Ent_Dynamic)M.current.locked_to).unlock_atom( M.current );
					}
					T2 = GlobalFuncs.get_turf( M.current );
					((Tile)T2).turf_animation( "icons/effects/effects.dmi", "shadowstep" );
					Task13.User.loc = picked;
					return;
				}));
				M.current.verbs -= typeof(Client).GetMethod( "vampire_shadowstep" );
				Task13.Sleep( 20 );
				M.current.verbs += typeof(Client).GetMethod( "vampire_shadowstep" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Bat Form (30)", desc: "You become etheral and can travel through walls for a short time, while leaving a scary bat behind.", group: "Vampire" )]
		public void vampire_jaunt(  ) {
			int? duration = null;
			Mind M = null;

			duration = 50;
			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 30, 0 ) ) {
				M.current.verbs -= typeof(Client).GetMethod( "vampire_jaunt" );
				new Mob_Living_SimpleAnimal_Hostile_Scarybat( M.current.loc, M.current );
				GlobalFuncs.ethereal_jaunt( M.current, duration, "batify", "debatify", false );
				Task13.Sleep( 600 );
				M.current.verbs += typeof(Client).GetMethod( "vampire_jaunt" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Summon Bats (75)", desc: "You summon a pair of space bats who attack nearby targets until they or their target is dead.", group: "Vampire" )]
		public void vampire_bats(  ) {
			Mind M = null;
			ByTable locs = null;
			int number = 0;
			dynamic direction = null;
			Tile T = null;
			dynamic tospawn = null;
			int? i = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 75, 0 ) ) {
				locs = new ByTable();
				number = 0;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.alldirs )) {
					direction = _a;
					

					if ( locs.len >= 3 ) {
						break;
					}
					T = Map13.GetStep( M.current, Convert.ToInt32( direction ) );

					if ( Lang13.Bool( GlobalFuncs.AStar( M.current.loc, T, typeof(Tile).GetMethod( "AdjacentTurfs" ), typeof(Tile).GetMethod( "Distance" ), 1 ) ) ) {
						locs.Add( T );
					}
				}

				if ( locs.len != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( locs )) {
						tospawn = _b;
						
						number++;
						new Mob_Living_SimpleAnimal_Hostile_Scarybat( tospawn, M.current );
					}

					if ( number < 3 ) {
						i = null;
						i = number;

						while (( i ??0) < 3) {
							new Mob_Living_SimpleAnimal_Hostile_Scarybat( M.current.loc, M.current );
							i++;
						}
					}
				} else {
					new Mob_Living_SimpleAnimal_Hostile_Scarybat( M.current.loc, M.current );
					new Mob_Living_SimpleAnimal_Hostile_Scarybat( M.current.loc, M.current );
					new Mob_Living_SimpleAnimal_Hostile_Scarybat( M.current.loc, M.current );
				}
				((Mob)M.current).remove_vampire_blood( 75 );
				M.current.verbs -= typeof(Client).GetMethod( "vampire_bats" );
				Task13.Sleep( 1200 );
				M.current.verbs += typeof(Client).GetMethod( "vampire_bats" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Cloak of Darkness (toggle)", desc: "Toggles whether you are currently cloaking yourself in darkness.", group: "Vampire" )]
		public void vampire_cloak(  ) {
			Mind M = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 0, 0 ) ) {
				M.vampire.iscloaking = !M.vampire.iscloaking;
				GlobalFuncs.to_chat( M.current, "<span class='notice'>You will now be " + ( M.vampire.iscloaking ? "hidden" : "seen" ) + " in darkness.</span>" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Enthrall", desc: "You use a large portion of your power to sway those loyal to none to be loyal to you only.", group: "Vampire" )]
		public void vampire_enthrall(  ) {
			Mind M = null;
			dynamic C = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}
			C = ((Mob)M.current).vampire_active( 300, 0, true );

			if ( !Lang13.Bool( C ) ) {
				return;
			}
			((Ent_Static)M.current).visible_message( "<span class='warning'>" + M.current.name + " bites " + C.name + "'s neck!</span>", "<span class='warning'>You bite " + C.name + "'s neck and begin the flow of power.</span>" );
			GlobalFuncs.to_chat( C, "<span class='sinister'>You feel the tendrils of evil " + ((dynamic)( M.vampire.powers != null ? "aggressively" : "slowly" )).Contains( 15 ) + " invade your mind.</span>" );

			if ( !( C is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( M.current, "<span class='warning'>You can only enthrall humanoids.</span>" );
				return;
			}

			if ( ((Mob)M.current).can_enthrall( C ) && GlobalFuncs.do_mob( M.current, C, ( M.vampire.powers.Contains( 15 ) ? 150 : 300 ) ) ) {
				
				if ( !((Mob)M.current).can_enthrall( C ) ) {
					GlobalFuncs.to_chat( M.current, "<span class='warning'>Either you or your target moved, and you couldn't finish enthralling them!</span>" );
					return;
				}

				if ( ((Mob)M.current).vampire_power( 300, 0 ) ) {
					((Mob)M.current).handle_enthrall( C );
					M.current.verbs -= typeof(Client).GetMethod( "vampire_enthrall" );
					Task13.Sleep( ( M.vampire.powers.Contains( 15 ) ? 600 : 1800 ) );
					M.current.verbs += typeof(Client).GetMethod( "vampire_enthrall" );
					return;
				}
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Chiroptean Screech (30)", desc: "An extremely loud shriek that stuns nearby humans and breaks windows as well.", group: "Vampire" )]
		public void vampire_screech(  ) {
			Mind M = null;
			Mob_Living C = null;
			Mob_Living H = null;
			Obj_Structure_Window W = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 30, 0 ) ) {
				((Ent_Static)M.current).visible_message( "<span class='warning'>" + M.current.name + " lets out an ear piercing shriek!</span>", "<span class='warning'>You let out a loud shriek.</span>", "<span class='warning'>You hear a loud painful shriek!</span>" );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( M.current, 4 ), typeof(Mob_Living_Carbon) )) {
					C = _a;
					

					if ( C == M.current ) {
						continue;
					}

					if ( C is Mob_Living_Carbon_Human ) {
						H = C;

						if ( ((Mob_Living_Carbon_Human)H).earprot() ) {
							continue;
						}
					}

					if ( !C.vampire_affected( M ) ) {
						continue;
					}
					GlobalFuncs.to_chat( C, "<span class='danger'><font size='3'>You hear a ear piercing shriek and your senses dull!</font></span>" );
					C.Weaken( 8 );
					C.ear_deaf = 20;
					C.stuttering = 20;
					C.Stun( 8 );
					C.Jitter( 150 );
				}

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( null, 4 ), typeof(Obj_Structure_Window) )) {
					W = _b;
					
					W.Destroy( 1 );
				}
				GlobalFuncs.playsound( M.current.loc, "sound/effects/creepyshriek.ogg", 100, 1 );
				((Mob)M.current).remove_vampire_blood( 10 );
				M.current.verbs -= typeof(Client).GetMethod( "vampire_screech" );
				Task13.Sleep( 1800 );
				M.current.verbs += typeof(Client).GetMethod( "vampire_screech" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Shapeshift", desc: "Changes your name and appearance and has a cooldown of 3 minutes.", group: "Vampire" )]
		public void vampire_shapeshift(  ) {
			Mind M = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 0, 0 ) ) {
				((Ent_Static)M.current).visible_message( "<span class='sinister'>" + M.current.name + " transforms!</span>" );
				M.current.client.prefs.real_name = ((Mob)M.current).generate_name();
				M.current.client.prefs.randomize_appearance_for( M.current );
				((Mob)M.current).regenerate_icons();
				M.current.verbs -= typeof(Client).GetMethod( "vampire_shapeshift" );
				Task13.Sleep( 1800 );
				M.current.verbs += typeof(Client).GetMethod( "vampire_shapeshift" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Glare", desc: "A scary glare that incapacitates people for a short while around you.", group: "Vampire" )]
		public void vampire_glare(  ) {
			Mind M = null;
			ByTable close_mobs = null;
			ByTable dist_mobs = null;
			Mob_Living_Carbon C = null;
			Mob_Living_Carbon C2 = null;
			Mob_Living_Carbon C3 = null;
			Mob_Living_Carbon C4 = null;
			int distance_value = 0;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 0, 1 ) ) {
				
				if ( M.current.glasses is Obj_Item_Clothing_Glasses_Sunglasses_Blindfold ) {
					GlobalFuncs.to_chat( M.current, "<span class='warning'>You're blindfolded!</span>" );
					return;
				}

				if ( Lang13.Bool( M.current.stat ) ) {
					GlobalFuncs.to_chat( M.current, "<span class='warning'>You're incapacitated, you can't do that right now!</span>" );
					return;
				}
				((Ent_Static)M.current).visible_message( "<span class='danger'>" + M.current.name + "'s eyes emit a blinding flash!</span>" );
				M.current.verbs -= typeof(Client).GetMethod( "vampire_glare" );
				Task13.Schedule( 300, (Task13.Closure)(() => {
					M.current.verbs += typeof(Client).GetMethod( "vampire_glare" );
					return;
				}));
				close_mobs = new ByTable();
				dist_mobs = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, 1 ), typeof(Mob_Living_Carbon) )) {
					C = _a;
					

					if ( !C.vampire_affected( M ) ) {
						continue;
					}

					if ( C is Mob_Living_Carbon ) {
						close_mobs.Or( C );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( null, 3 ), typeof(Mob_Living_Carbon) )) {
					C2 = _b;
					

					if ( !C2.vampire_affected( M ) ) {
						continue;
					}

					if ( C2 is Mob_Living_Carbon ) {
						dist_mobs.Or( C2 );
					}
				}
				dist_mobs.Remove( close_mobs );

				foreach (dynamic _c in Lang13.Enumerate( close_mobs, typeof(Mob_Living_Carbon) )) {
					C3 = _c;
					
					C3.Stun( 8 );
					C3.Weaken( 8 );
					C3.stuttering += 20;

					if ( !Lang13.Bool( C3.blinded ) ) {
						C3.blinded = 1;
					}
					C3.blinded += 5;
				}

				foreach (dynamic _d in Lang13.Enumerate( dist_mobs, typeof(Mob_Living_Carbon) )) {
					C4 = _d;
					
					distance_value = Num13.MaxInt( 0, ((int)( Math.Abs( Map13.GetDistance( C4, M.current ) - 3 ) + 1 )) );
					C4.Stun( distance_value );

					if ( distance_value > 1 ) {
						C4.Weaken( distance_value );
					}
					C4.stuttering += distance_value * ( M.vampire.powers.Contains( 15 ) ? 2 : 1 ) + 5;

					if ( !Lang13.Bool( C4.blinded ) ) {
						C4.blinded = 1;
					}
					C4.blinded += Num13.MaxInt( 1, distance_value );
				}
				GlobalFuncs.to_chat( dist_mobs + close_mobs, "<span class='warning'>You are blinded by " + M.current.name + "'s glare</span>" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Diseased Touch (50)", desc: "Touches your victim with infected blood giving them the Shutdown Syndrome which quickly shutsdown their major organs resulting in a quick painful death.", group: "Vampire" )]
		public void vampire_disease(  ) {
			Mind M = null;
			dynamic C = null;
			Disease2_Disease shutdown = null;
			Disease2_Effectholder holder = null;
			Disease2_Effect_Organs_Vampire O = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}
			C = ((Mob)M.current).vampire_active( 50, 0, true );

			if ( !Lang13.Bool( C ) ) {
				return;
			}

			if ( !((Mob)M.current).vampire_can_reach( C, true ) ) {
				GlobalFuncs.to_chat( M.current, "<span class='danger'>You cannot touch " + C.name + " from where you are standing!</span>" );
				return;
			}
			GlobalFuncs.to_chat( M.current, "<span class='sinister'>You stealthily infect " + C.name + " with your diseased touch.</span>" );
			((Mob_Living_Carbon)C).help_shake_act( M.current );

			if ( !((Mob)C).vampire_affected( M ) ) {
				GlobalFuncs.to_chat( M.current, "<span class='warning'>They seem to be unaffected.</span>" );
				return;
			}
			GlobalFuncs.log_admin( "" + String13.CKey( this.key ) + " has death-touched " + String13.CKey( C.key ) + ". The latter will die in moments." );
			GlobalFuncs.message_admins( "" + String13.CKey( this.key ) + " has death-touched " + String13.CKey( C.key ) + " (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + C.x + ";Y=" + C.y + ";Z=" + C.z + "'>JMP</A>). The latter will die in moments." );
			shutdown = new Disease2_Disease( "Created by vamp " + GlobalFuncs.key_name( M ) + "." );
			holder = new Disease2_Effectholder();
			O = new Disease2_Effect_Organs_Vampire();
			holder.effect += O;
			holder.chance = 10;
			shutdown.infectionchance = 100;
			shutdown.antigen = ((int)( shutdown.antigen )) | ( ((int)( String13.ParseNumber( Rand13.PickFromTable( GlobalVars.ANTIGENS ) ) ??0 )) );
			shutdown.antigen = ((int)( shutdown.antigen )) | ( ((int)( String13.ParseNumber( Rand13.PickFromTable( GlobalVars.ANTIGENS ) ) ??0 )) );
			shutdown.spreadtype = "None";
			shutdown.uniqueID = Rand13.Int( 0, 10000 );
			shutdown.effects.Add( holder );
			shutdown.speed = true;
			shutdown.stage = 2;
			shutdown.clicks = 185;
			GlobalFuncs.infect_virus2( C, shutdown, false );
			((Mob)M.current).remove_vampire_blood( 50 );
			M.current.verbs -= typeof(Client).GetMethod( "vampire_disease" );
			Task13.Sleep( 1800 );
			M.current.verbs += typeof(Client).GetMethod( "vampire_disease" );
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Hypnotise (10)", desc: "A piercing stare that incapacitates your victim for a good length of time.", group: "Vampire" )]
		public void vampire_hypnotise(  ) {
			Mind M = null;
			dynamic C = null;
			int enhancements = 0;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}
			C = ((Mob)M.current).vampire_active( 10, 0, true );

			if ( !Lang13.Bool( C ) ) {
				return;
			}
			((Ent_Static)M.current).visible_message( "<span class='warning'>" + M.current.name + "'s eyes flash briefly as he stares into " + C.name + "'s eyes</span>" );
			M.current.verbs -= typeof(Client).GetMethod( "vampire_hypnotise" );
			Task13.Schedule( 1800, (Task13.Closure)(() => {
				M.current.verbs += typeof(Client).GetMethod( "vampire_hypnotise" );
				return;
			}));
			enhancements = ( C.weakened != 0 ? 2 : 0 ) + ( ( Lang13.Bool( C.stunned ) ? true : false ) ?1:0) + ( Lang13.Bool( C.sleeping ) || C.paralysis != 0 ? 3 : 0 );

			if ( GlobalFuncs.do_mob( M.current, C, 10 - enhancements ) ) {
				
				if ( Lang13.Bool( C.mind ) && C.mind.vampire != null ) {
					GlobalFuncs.to_chat( M.current, "<span class='warning'>Your piercing gaze fails to knock out " + C.name + ".</span>" );
					GlobalFuncs.to_chat( C, "<span class='notice'>" + M.current.name + "'s feeble gaze is ineffective.</span>" );
					return;
				} else {
					GlobalFuncs.to_chat( M.current, "<span class='warning'>Your piercing gaze knocks out " + C.name + ".</span>" );
					GlobalFuncs.to_chat( C, "<span class='sinister'>You find yourself unable to move and barely able to speak.</span>" );
					C.stuttering = 50;
					((Mob)C).Paralyse( 20 );
				}
			} else {
				GlobalFuncs.to_chat( M.current, "<span class='warning'>You broke your gaze.</span>" );
				return;
			}
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Cheat Death", desc: "Instantly return to un-life.", group: "Vampire" )]
		public bool vampire_undeath(  ) {
			Mind M = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return false;
			}

			if ( ((Mob)M.current).vampire_power( 0, 3 ) ) {
				
				if ( !Lang13.Bool( M.current.stat ) ) {
					GlobalFuncs.to_chat( M.current, "<span class='warning'>You need to be dead to do that. Well, you're already dead; undead to be precise, but you need to be DEAD dead to use it.</span>" );
					return false;
				}

				if ( M.current.on_fire || M.vampire.smitecounter != 0 ) {
					GlobalFuncs.to_chat( M.current, "span class='warning'>Your corpse has been sanctified!</span>" );
					return false;
				}
				GlobalFuncs.to_chat( M.current, "<span class='notice'>You attempt to recover.</span>" );
				((Mob)M.current).update_canmove();
				((Mob)M.current).remove_vampire_powers();
				Task13.Sleep( Rand13.Int( 300, 450 ) );
				GlobalFuncs.to_chat( this, "<span class='sinister'>Your corpse twitches slightly. It's safe to assume nobody noticed.</span>" );
				this.verbs.Add( typeof(Client).GetMethod( "vampire_returntolife" ) );
				return true;
			}
			return false;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Return To Life", desc: "Instantly return to un-life.", group: "Vampire" )]
		public void vampire_returntolife(  ) {
			Mind M = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( M.current.on_fire || M.vampire.smitecounter != 0 ) {
				GlobalFuncs.to_chat( M.current, "span class='warning'>Your corpse has been sanctified!</span>" );
				return;
			}

			if ( ((Mob)M.current).vampire_power( 0, 3 ) ) {
				((Mob)M.current).remove_vampire_blood( M.vampire.bloodusable );
				((Mob_Living)M.current).revive( false );
				GlobalFuncs.to_chat( M.current, "<span class='sinister'>You awaken, ready to strike fear into the hearts of mortals once again.</span>" );
				((Mob)M.current).update_canmove();
				((Mob_Living)M.current).make_vampire();
			}
			((Mob)M.current).regenerate_icons();
			this.verbs.Remove( typeof(Client).GetMethod( "vampire_returntolife" ) );
			return;
		}

		// Function from file: vampire_powers.dm
		[VerbInfo( name: "Rejuvenate ", desc: "Flush your system with spare blood to remove any incapacitating effects.", group: "Vampire" )]
		public void vampire_rejuvinate(  ) {
			Mind M = null;
			int? i = null;

			M = Task13.User.mind;

			if ( !( M != null ) ) {
				return;
			}

			if ( ((Mob)M.current).vampire_power( 0, 1 ) ) {
				M.current.weakened = 0;
				M.current.stunned = 0;
				M.current.paralysis = 0;
				GlobalFuncs.to_chat( M.current, "<span class='notice'>You flush your system with clean blood and remove any incapacitating effects.</span>" );
				Task13.Schedule( 1, (Task13.Closure)(() => {
					
					if ( M.vampire.bloodtotal >= 200 ) {
						i = null;
						i = 0;

						while (( i ??0) < 5) {
							((Mob_Living)M.current).adjustBruteLoss( -2 );
							((Mob_Living)M.current).adjustOxyLoss( -5 );
							((Mob_Living)M.current).adjustToxLoss( -2 );
							((Mob_Living)M.current).adjustFireLoss( -2 );
							Task13.Sleep( 35 );
							i++;
						}
					}
					return;
				}));
				M.current.verbs -= typeof(Client).GetMethod( "vampire_rejuvinate" );
				Task13.Sleep( 200 );
				M.current.verbs += typeof(Client).GetMethod( "vampire_rejuvinate" );
			}
			return;
		}

		// Function from file: Holidays.dm
		[VerbInfo( name: ".Set Holiday", desc: "Force-set the Holiday variable to make the game think it's a certain day.", group: "Fun" )]
		[VerbArg( 1, InputType.Str | InputType.Null )]
		public void Set_Holiday( dynamic T = null ) {
			
			if ( !GlobalFuncs.check_rights( 16 ) ) {
				return;
			}
			GlobalVars.Holiday = T;
			GlobalVars.station_name = null;
			GlobalFuncs.station_name();
			Game13.update_status();
			GlobalFuncs.Holiday_Game_Start();
			GlobalFuncs.message_admins( "<span class='notice'>ADMIN: Event: " + GlobalFuncs.key_name( this ) + " force-set Holiday to \"" + GlobalVars.Holiday + "\"</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " force-set Holiday to \"" + GlobalVars.Holiday + "\"" );
			return;
		}

		// Function from file: xmas.dm
		[VerbInfo( name: "Execute Smissmas", group: "Fun" )]
		public void smissmas(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			GlobalFuncs.SetUniversalState( typeof(UniversalState_Christmas) );
			return;
		}

		// Function from file: ritual.dm
		[VerbInfo( name: "Check Rune Words", desc: "Check the rune-word meaning", group: "Special Verbs" )]
		public void check_words(  ) {
			dynamic word = null;

			
			if ( !Lang13.Bool( GlobalVars.cultwords["travel"] ) ) {
				GlobalFuncs.runerandom();
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.engwords )) {
				word = _a;
				
				GlobalFuncs.to_chat( Task13.User, "" + GlobalVars.cultwords[word] + " is " + word );
			}
			return;
		}

		// Function from file: horror.dm
		[VerbInfo( name: "Force Airlock", desc: "We will attempt to force open an airlock in front of us.", group: "Changeling" )]
		public void changeling_force_airlock(  ) {
			dynamic H = null;
			Tile T = null;
			Obj_Machinery_Door D = null;
			Obj_Machinery_Door_Firedoor FD = null;

			H = this;

			if ( !( H is Mob_Living_Carbon_Human ) ) {
				return;
			}

			if ( Lang13.Bool( H.stat ) || !( H.mind.changeling != null ) || H.species.name != "Horror" ) {
				return;
			}
			T = Map13.GetStep( H, Convert.ToInt32( H.dir ) );

			if ( !( T != null ) ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( T, typeof(Obj_Machinery_Door) )) {
				D = _b;
				

				if ( D.density ) {
					D.visible_message( new Txt( "<span class='warning'>" ).The( D ).item().str( "'s motors whine as several great tendrils begin trying to force it open!</span>" ).ToString() );

					if ( GlobalFuncs.do_after( H, D, 50 ) && Rand13.PercentChance( 50 ) ) {
						D.open( 1 );
						D.visible_message( new Txt( "<span class='warning'>" ).item( H.name ).str( " forces " ).the( D ).item().str( " open!</span>" ).ToString() );

						foreach (dynamic _a in Lang13.Enumerate( D.loc, typeof(Obj_Machinery_Door_Firedoor) )) {
							FD = _a;
							

							if ( FD != null && FD.density ) {
								FD.open( 1 );
							}
						}
					} else {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>You fail to open " ).the( D ).item().str( ".</span>" ).ToString() );
					}
					return;
				}
			}
			return;
		}

		// Function from file: sound.dm
		public void playtitlemusic(  ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.login_music ) ) {
				return;
			}

			if ( Lang13.Bool( this.prefs.toggles & 8 ) ) {
				
				if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( this ) ) ) {
					this.WriteMsg( new Sound( GlobalVars.ticker.login_music, false, false, 1, 85 ) );
				}
			}
			return;
		}

		// Function from file: response_team.dm
		public Mob_Living_Carbon_Human create_response_team( Ent_Static spawn_location = null, bool? leader_selected = null, dynamic commando_name = null ) {
			leader_selected = leader_selected ?? false;

			Mob_Living_Carbon_Human M = null;
			dynamic new_facial = null;
			dynamic new_hair = null;
			dynamic new_eyes = null;
			dynamic new_tone = null;
			dynamic all_hairs = null;
			ByTable hairs = null;
			dynamic x = null;
			dynamic H = null;
			dynamic new_hstyle = null;
			dynamic new_fstyle = null;
			string new_gender = null;

			M = new Mob_Living_Carbon_Human( null );
			GlobalVars.response_team_members.Or( M );
			new_facial = Interface13.Input( "Please select facial hair color.", "Character Generation", null, null, null, InputType.Color );

			if ( Lang13.Bool( new_facial ) ) {
				M.r_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 2, 4 ) );
				M.g_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 4, 6 ) );
				M.b_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 6, 8 ) );
			}
			new_hair = Interface13.Input( "Please select hair color.", "Character Generation", null, null, null, InputType.Color );

			if ( Lang13.Bool( new_facial ) ) {
				M.r_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 2, 4 ) );
				M.g_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 4, 6 ) );
				M.b_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 6, 8 ) );
			}
			new_eyes = Interface13.Input( "Please select eye color.", "Character Generation", null, null, null, InputType.Color );

			if ( Lang13.Bool( new_eyes ) ) {
				M.r_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 2, 4 ) );
				M.g_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 4, 6 ) );
				M.b_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 6, 8 ) );
			}
			new_tone = Interface13.Input( "Please select skin tone level: 1-220 (1=albino, 35=caucasian, 150=black, 220='very' black)", "Character Generation", null, null, null, InputType.Str );

			if ( !Lang13.Bool( new_tone ) ) {
				new_tone = 35;
			}
			M.s_tone = Num13.MaxInt( Num13.MinInt( Num13.Floor( String13.ParseNumber( new_tone ) ??0 ), 220 ), 1 );
			M.s_tone = -( M.s_tone ??0) + 35;
			all_hairs = Lang13.GetTypes( typeof(SpriteAccessory_Hair) ) - typeof(SpriteAccessory_Hair);
			hairs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( all_hairs )) {
				x = _a;
				
				H = Lang13.Call( x );
				hairs.Add( H.name );
				GlobalFuncs.qdel( H );
				H = null;
			}
			new_hstyle = Interface13.Input( Task13.User, "Select a hair style", "Grooming", null, GlobalVars.hair_styles_list, InputType.Null | InputType.Any );

			if ( Lang13.Bool( new_hstyle ) ) {
				M.h_style = new_hstyle;
			}
			new_fstyle = Interface13.Input( Task13.User, "Select a facial hair style", "Grooming", null, GlobalVars.facial_hair_styles_list, InputType.Null | InputType.Any );

			if ( Lang13.Bool( new_fstyle ) ) {
				M.f_style = new_fstyle;
			}
			new_gender = Interface13.Alert( Task13.User, "Please select gender.", "Character Generation", "Male", "Female" );

			if ( Lang13.Bool( new_gender ) ) {
				
				if ( new_gender == "Male" ) {
					M.setGender( GlobalVars.MALE );
				} else {
					M.setGender( GlobalVars.FEMALE );
				}
			}
			M.update_hair();
			M.update_body();
			M.check_dna(  );
			M.real_name = commando_name;
			M.name = commando_name;
			M.age = ( !( leader_selected == true ) ? Rand13.Int( 23, 35 ) : Rand13.Int( 35, 45 ) );
			M.dna.ready_dna( M );
			M.mind = new Mind();
			M.mind.current = M;
			M.mind.original = M;
			M.mind.assigned_role = "MODE";
			M.mind.special_role = "Response Team";

			if ( !GlobalVars.ticker.minds.Contains( M.mind ) ) {
				GlobalVars.ticker.minds.Add( M.mind );
			}
			M.loc = spawn_location;
			M.equip_strike_team( leader_selected );
			return M;
		}

		// Function from file: response_team.dm
		[VerbInfo( name: "Dispatch Emergency Response Team", desc: "Send an emergency response team to the station", group: "Special Verbs" )]
		public void response_team(  ) {
			
			if ( !( this.holder != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Only administrators may use this command.</span>" );
				return;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The game hasn't started yet!</span>" );
				return;
			}

			if ( GlobalVars.ticker.current_state == 1 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The round hasn't started yet!</span>" );
				return;
			}

			if ( GlobalVars.send_emergency_team ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Central Command has already dispatched an emergency response team!</span>" );
				return;
			}

			if ( Interface13.Alert( "Do you want to dispatch an Emergency Response Team?", null, "Yes", "No" ) != "Yes" ) {
				return;
			}

			if ( GlobalFuncs.get_security_level() != "red" ) {
				
				switch ((string)( Interface13.Alert( "The station is not in red alert. Do you still want to dispatch a response team?", null, "Yes", "No" ) )) {
					case "No":
						return;
						break;
				}
			}

			if ( GlobalVars.send_emergency_team ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Looks like somebody beat you to it!</span>" );
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " is dispatching an Emergency Response Team." );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used Dispatch Response Team." );
			GlobalFuncs.trigger_armed_response_team( true );
			return;
		}

		// Function from file: communications.dm
		[VerbInfo( name: "Debug Signals", group: "Debug" )]
		public void print_pointers(  ) {
			dynamic p = null;
			dynamic S = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			GlobalFuncs.to_chat( this, "There are " + GlobalVars.pointers.len + " pointers:" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.pointers )) {
				p = _a;
				
				GlobalFuncs.to_chat( this, p );
				S = Lang13.FindObj( p );

				if ( S is Signal ) {
					GlobalFuncs.to_chat( this, ((Signal)S).debug_print() );
				}
			}
			return;
		}

		// Function from file: datumvars.dm
		public void view_var_Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic M = null;
			string new_name = null;
			dynamic D = null;
			dynamic D2 = null;
			dynamic value = null;
			dynamic D3 = null;
			dynamic A = null;
			dynamic M2 = null;
			dynamic M3 = null;
			dynamic M4 = null;
			dynamic M5 = null;
			dynamic M6 = null;
			dynamic M7 = null;
			dynamic M8 = null;
			dynamic M9 = null;
			dynamic H = null;
			dynamic O = null;
			string action_type = null;
			Type O_type = null;
			int i = 0;
			Obj Obj = null;
			int i2 = 0;
			Obj Obj2 = null;
			dynamic A2 = null;
			dynamic A3 = null;
			dynamic D4 = null;
			dynamic A4 = null;
			dynamic T = null;
			dynamic M10 = null;
			dynamic M11 = null;
			Mob user = null;
			dynamic A5 = null;
			dynamic A6 = null;
			dynamic M12 = null;
			dynamic A7 = null;
			dynamic H2 = null;
			dynamic H3 = null;
			dynamic H4 = null;
			dynamic H5 = null;
			dynamic H6 = null;
			dynamic H7 = null;
			dynamic new_mutantrace = null;
			dynamic H8 = null;
			dynamic new_species = null;
			dynamic H9 = null;
			dynamic new_language = null;
			dynamic H10 = null;
			dynamic rem_language = null;
			dynamic M13 = null;
			dynamic L = null;
			dynamic Text = null;
			dynamic amount = null;
			dynamic DAT = null;
			dynamic DAT2 = null;

			
			if ( Task13.User.client != this || !( this.holder != null ) ) {
				return;
			}

			if ( Lang13.Bool( href_list["Vars"] ) ) {
				this.debug_variables( Lang13.FindObj( href_list["Vars"] ) );
			} else if ( Lang13.Bool( href_list["rename"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 1024 ) ) {
					return;
				}
				M = Lang13.FindObj( href_list["rename"] );

				if ( !( M is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}
				new_name = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "What would you like to name this mob?", "Input a name", M.real_name, null, InputType.Str | InputType.Null ) ), 1, 26 );

				if ( !Lang13.Bool( new_name ) || !Lang13.Bool( M ) ) {
					return;
				}
				GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " renamed " + GlobalFuncs.key_name_admin( M ) + " to " + new_name + "." );
				((Mob)M).fully_replace_character_name( M.real_name, new_name );
				href_list["datumrefresh"] = href_list["rename"];
			} else if ( Lang13.Bool( href_list["varnameedit"] ) && Lang13.Bool( href_list["datumedit"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 1024 ) ) {
					return;
				}
				D = Lang13.FindObj( href_list["datumedit"] );

				if ( !( D is Game_Data ) && !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( D ) ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of types /client or /datum" );
					return;
				}
				this.modify_variables( D, href_list["varnameedit"], true );
			} else if ( Lang13.Bool( href_list["togbit"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 1024 ) ) {
					return;
				}
				D2 = Lang13.FindObj( href_list["subject"] );

				if ( !( D2 is Game_Data ) && !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( D2 ) ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of types /client or /datum" );
					return;
				}

				if ( !D2.vars.Contains( href_list["var"] ) ) {
					GlobalFuncs.to_chat( Task13.User, "Unable to find variable specified." );
					return;
				}
				value = D2.vars[href_list["var"]];
				value ^= 1 << ((int)( String13.ParseNumber( href_list["togbit"] ) ??0 ));
				D2.vars[href_list["var"]] = value;
			} else if ( Lang13.Bool( href_list["varnamechange"] ) && Lang13.Bool( href_list["datumchange"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 1024 ) ) {
					return;
				}
				D3 = Lang13.FindObj( href_list["datumchange"] );

				if ( !( D3 is Game_Data ) && !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( D3 ) ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of types /client or /datum" );
					return;
				}
				this.modify_variables( D3, href_list["varnamechange"], false );
			} else if ( Lang13.Bool( href_list["varnamemass"] ) && Lang13.Bool( href_list["datummass"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 1024 ) ) {
					return;
				}
				A = Lang13.FindObj( href_list["datummass"] );

				if ( !( A is Ent_Static ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /atom" );
					return;
				}
				this.cmd_mass_modify_object_variables( A, href_list["varnamemass"] );
			} else if ( Lang13.Bool( href_list["mob_player_panel"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				M2 = Lang13.FindObj( href_list["mob_player_panel"] );

				if ( !( M2 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}
				this.holder.show_player_panel( M2 );
				href_list["datumrefresh"] = href_list["mob_player_panel"];
			} else if ( Lang13.Bool( href_list["give_spell"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 10 ) ) {
					return;
				}
				M3 = Lang13.FindObj( href_list["give_spell"] );

				if ( !( M3 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}
				this.give_spell( M3 );
				href_list["datumrefresh"] = href_list["give_spell"];
			} else if ( Lang13.Bool( href_list["give_disease"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 10 ) ) {
					return;
				}
				M4 = Lang13.FindObj( href_list["give_disease"] );

				if ( !( M4 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}
				this.give_disease( M4 );
				href_list["datumrefresh"] = href_list["give_spell"];
			} else if ( Lang13.Bool( href_list["godmode"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 512 ) ) {
					return;
				}
				M5 = Lang13.FindObj( href_list["godmode"] );

				if ( !( M5 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}
				this.cmd_admin_godmode( M5 );
				href_list["datumrefresh"] = href_list["godmode"];
			} else if ( Lang13.Bool( href_list["gib"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				M6 = Lang13.FindObj( href_list["gib"] );

				if ( !( M6 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}
				this.cmd_admin_gib( M6 );
			} else if ( Lang13.Bool( href_list["build_mode"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 1 ) ) {
					return;
				}
				M7 = Lang13.FindObj( href_list["build_mode"] );

				if ( !( M7 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}
				GlobalFuncs.togglebuildmode( M7 );
				href_list["datumrefresh"] = href_list["build_mode"];
			} else if ( Lang13.Bool( href_list["drop_everything"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 34 ) ) {
					return;
				}
				M8 = Lang13.FindObj( href_list["drop_everything"] );

				if ( !( M8 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}

				if ( Task13.User.client != null ) {
					Task13.User.client.cmd_admin_drop_everything( M8 );
				}
			} else if ( Lang13.Bool( href_list["direct_control"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				M9 = Lang13.FindObj( href_list["direct_control"] );

				if ( !( M9 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
					return;
				}

				if ( Task13.User.client != null ) {
					Task13.User.client.cmd_assume_direct_control( M9 );
				}
			} else if ( Lang13.Bool( href_list["make_skeleton"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 8 ) ) {
					return;
				}
				H = Lang13.FindObj( href_list["make_skeleton"] );

				if ( !( H is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
					return;
				}
				((Mob_Living_Carbon_Human)H).makeSkeleton();
				href_list["datumrefresh"] = href_list["make_skeleton"];
			} else if ( Lang13.Bool( href_list["delall"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 48 ) ) {
					return;
				}
				O = Lang13.FindObj( href_list["delall"] );

				if ( !( O is Obj ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /obj" );
					return;
				}
				action_type = Interface13.Alert( "Strict type (" + O.type + ") or type and all subtypes?", null, "Strict type", "Type and subtypes", "Cancel" );

				if ( action_type == "Cancel" || !Lang13.Bool( action_type ) ) {
					return;
				}

				if ( Interface13.Alert( "Are you really sure you want to delete all objects of type " + O.type + "?", null, "Yes", "No" ) != "Yes" ) {
					return;
				}

				if ( Interface13.Alert( "Second confirmation required. Delete?", null, "Yes", "No" ) != "Yes" ) {
					return;
				}
				O_type = O.type;

				switch ((string)( action_type )) {
					case "Strict type":
						i = 0;

						foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							Obj = _a;
							

							if ( Obj.type == O_type ) {
								i++;
								GlobalFuncs.qdel( Obj );
							}
						}

						if ( !( i != 0 ) ) {
							GlobalFuncs.to_chat( Task13.User, "No objects of this type exist" );
							return;
						}
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted all objects of type " + O_type + " (" + i + " objects deleted) " );
						GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " deleted all objects of type " + O_type + " (" + i + " objects deleted) </span>" );
						break;
					case "Type and subtypes":
						i2 = 0;

						foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							Obj2 = _b;
							

							if ( Lang13.Bool( ((dynamic)O_type).IsInstanceOfType( Obj2 ) ) ) {
								i2++;
								GlobalFuncs.qdel( Obj2 );
							}
						}

						if ( !( i2 != 0 ) ) {
							GlobalFuncs.to_chat( Task13.User, "No objects of this type exist" );
							return;
						}
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted all objects of type or subtype of " + O_type + " (" + i2 + " objects deleted) " );
						GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " deleted all objects of type or subtype of " + O_type + " (" + i2 + " objects deleted) </span>" );
						break;
				}
			} else if ( Lang13.Bool( href_list["explode"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 40 ) ) {
					return;
				}
				A2 = Lang13.FindObj( href_list["explode"] );

				if ( !( A2 is Obj ) && !( A2 is Mob ) && !( A2 is Tile ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /obj, /mob and /turf" );
					return;
				}
				this.cmd_admin_explosion( A2 );
				href_list["datumrefresh"] = href_list["explode"];
			} else if ( Lang13.Bool( href_list["emp"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 40 ) ) {
					return;
				}
				A3 = Lang13.FindObj( href_list["emp"] );

				if ( !( A3 is Obj ) && !( A3 is Mob ) && !( A3 is Tile ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /obj, /mob and /turf" );
					return;
				}
				this.cmd_admin_emp( A3 );
				href_list["datumrefresh"] = href_list["emp"];
			} else if ( Lang13.Bool( href_list["mark_object"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				D4 = Lang13.FindObj( href_list["mark_object"] );

				if ( !( D4 is Game_Data ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /datum" );
					return;
				}
				this.holder.marked_datum = D4;
				href_list["datumrefresh"] = href_list["mark_object"];
			} else if ( Lang13.Bool( href_list["teleport_here"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				A4 = Lang13.FindObj( href_list["teleport_here"] );

				if ( !( A4 is Ent_Dynamic ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of movable atoms." );
					return;
				}
				T = GlobalFuncs.get_turf( Task13.User );

				if ( A4 is Mob ) {
					M10 = A4;
					((Mob)M10).teleport_to( T );
				} else {
					((Ent_Dynamic)A4).forceMove( T );
				}

				switch ((string)( this.teleport_here_pref )) {
					case "Flashy":
						
						if ( Convert.ToDouble( this.flashy_level ) > 0 ) {
							((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
						}

						if ( Convert.ToDouble( this.flashy_level ) > 1 ) {
							
							foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInRange( 7, T ) )) {
								M11 = _d;
								
								GlobalFuncs.shake_camera( M11, 4, 1 );
							}
						}

						if ( Convert.ToDouble( this.flashy_level ) > 2 ) {
							GlobalFuncs.to_chat( typeof(Game13), "<font size='15' color='red'><b>" + String13.ToUpper( A4.name ) + " HAS RISEN</b></font>" );
						}
						break;
					case "Stealthy":
						A4.alpha = 0;
						Icon13.Animate( new ByTable().Set( 1, A4 ).Set( "alpha", 255 ).Set( "time", this.stealthy_level ) );
						break;
				}
			} else if ( Lang13.Bool( href_list["teleport_to"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				user = Task13.User;

				if ( !( user is Mob ) ) {
					return;
				}
				A5 = Lang13.FindObj( href_list["teleport_to"] );

				if ( !( A5 is Ent_Static ) ) {
					GlobalFuncs.to_chat( user, "This can only be done to instances of atoms." );
					return;
				}
				user.teleport_to( A5 );
			} else if ( Lang13.Bool( href_list["delete"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				A6 = Lang13.FindObj( href_list["delete"] );

				if ( !( A6 is Ent_Dynamic ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of movable atoms." );
					return;
				}

				if ( A6 is Mob ) {
					M12 = A6;

					if ( Lang13.Bool( M12.client ) ) {
						
						if ( Interface13.Alert( "You sure?", "Confirm", "Yes", "No" ) != "Yes" ) {
							return;
						}
					}
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted " + A6 + " at (" + A6.x + "," + A6.y + "," + A6.z + ")" );
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " deleted " + A6 + " at <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + A6.x + ";Y=" + A6.y + ";Z=" + A6.z + "'>(" + A6.x + "," + A6.y + "," + A6.z + ")</a></span>" );
				GlobalFuncs.qdel( A6 );
			} else if ( Lang13.Bool( href_list["rotatedatum"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				A7 = Lang13.FindObj( href_list["rotatedatum"] );

				if ( !( A7 is Ent_Static ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /atom" );
					return;
				}

				dynamic _f = href_list["rotatedir"]; // Was a switch-case, sorry for the mess.
				if ( _f=="right" ) {
					A7.dir = Num13.Rotate( A7.dir, -45 );
				} else if ( _f=="left" ) {
					A7.dir = Num13.Rotate( A7.dir, 45 );
				}
				href_list["datumrefresh"] = href_list["rotatedatum"];
			} else if ( Lang13.Bool( href_list["makemonkey"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H2 = Lang13.FindObj( href_list["makemonkey"] );

				if ( !( H2 is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob/living/carbon/human" );
					return;
				}

				if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
					return;
				}

				if ( !Lang13.Bool( H2 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}
				this.holder.Topic( href, new ByTable().Set( "monkeyone", href_list["makemonkey"] ) );
			} else if ( Lang13.Bool( href_list["makerobot"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H3 = Lang13.FindObj( href_list["makerobot"] );

				if ( !( H3 is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob/living/carbon/human" );
					return;
				}

				if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
					return;
				}

				if ( !Lang13.Bool( H3 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}
				this.holder.Topic( href, new ByTable().Set( "makerobot", href_list["makerobot"] ) );
			} else if ( Lang13.Bool( href_list["makealien"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H4 = Lang13.FindObj( href_list["makealien"] );

				if ( !( H4 is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob/living/carbon/human" );
					return;
				}

				if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
					return;
				}

				if ( !Lang13.Bool( H4 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}
				this.holder.Topic( href, new ByTable().Set( "makealien", href_list["makealien"] ) );
			} else if ( Lang13.Bool( href_list["makeslime"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H5 = Lang13.FindObj( href_list["makeslime"] );

				if ( !( H5 is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob/living/carbon/human" );
					return;
				}

				if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
					return;
				}

				if ( !Lang13.Bool( H5 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}
				this.holder.Topic( href, new ByTable().Set( "makeslime", href_list["makeslime"] ) );
			} else if ( Lang13.Bool( href_list["makeai"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H6 = Lang13.FindObj( href_list["makeai"] );

				if ( !( H6 is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob/living/carbon/human" );
					return;
				}

				if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
					return;
				}

				if ( !Lang13.Bool( H6 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}
				this.holder.Topic( href, new ByTable().Set( "makeai", href_list["makeai"] ) );
			} else if ( Lang13.Bool( href_list["setmutantrace"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H7 = Lang13.FindObj( href_list["setmutantrace"] );

				if ( !( H7 is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob/living/carbon/human" );
					return;
				}
				new_mutantrace = Interface13.Input( "Please choose a new mutantrace", "Mutantrace", null, null, new ByTable(new object [] { "NONE", "golem", "lizard", "slime", "plant", "shadow", "tajaran", "skrell", "vox" }), InputType.Null | InputType.Any );

				dynamic _g = new_mutantrace; // Was a switch-case, sorry for the mess.
				if ( _g==null ) {
					return;
				} else if ( _g=="NONE" ) {
					new_mutantrace = "";
				}

				if ( !Lang13.Bool( H7 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}

				if ( Lang13.Bool( H7.dna ) ) {
					H7.dna.mutantrace = new_mutantrace;
					((Mob_Living_Carbon_Human)H7).update_mutantrace();
				}
			} else if ( Lang13.Bool( href_list["setspecies"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H8 = Lang13.FindObj( href_list["setspecies"] );

				if ( !( H8 is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob/living/carbon/human" );
					return;
				}
				new_species = Interface13.Input( "Please choose a new species.", "Species", null, null, GlobalVars.all_species, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( H8 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}

				if ( ((Mob_Living_Carbon_Human)H8).set_species( new_species ) ) {
					GlobalFuncs.to_chat( Task13.User, "Set species of " + H8 + " to " + H8.species + "." );
					((Mob)H8).regenerate_icons();
				} else {
					GlobalFuncs.to_chat( Task13.User, "Failed! Something went wrong." );
				}
			} else if ( Lang13.Bool( href_list["addlanguage"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H9 = Lang13.FindObj( href_list["addlanguage"] );

				if ( !( H9 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob" );
					return;
				}
				new_language = Interface13.Input( "Please choose a language to add.", "Language", null, null, GlobalVars.all_languages, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( new_language ) ) {
					return;
				}

				if ( !Lang13.Bool( H9 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}

				if ( ((Mob)H9).add_language( new_language ) ) {
					GlobalFuncs.to_chat( Task13.User, "Added " + new_language + " to " + H9 + "." );
				} else {
					GlobalFuncs.to_chat( Task13.User, "Mob already knows that language." );
				}
			} else if ( Lang13.Bool( href_list["remlanguage"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 4096 ) ) {
					return;
				}
				H10 = Lang13.FindObj( href_list["remlanguage"] );

				if ( !( H10 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob" );
					return;
				}

				if ( !( H10.languages.len != 0 ) ) {
					GlobalFuncs.to_chat( Task13.User, "This mob knows no languages." );
					return;
				}
				rem_language = Interface13.Input( "Please choose a language to remove.", "Language", null, null, H10.languages, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( rem_language ) ) {
					return;
				}

				if ( !Lang13.Bool( H10 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}

				if ( ((Mob)H10).remove_language( rem_language.name ) ) {
					GlobalFuncs.to_chat( Task13.User, "Removed " + rem_language + " from " + H10 + "." );
				} else {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't know that language." );
				}
			} else if ( Lang13.Bool( href_list["regenerateicons"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				M13 = Lang13.FindObj( href_list["regenerateicons"] );

				if ( !( M13 is Mob ) ) {
					GlobalFuncs.to_chat( Task13.User, "This can only be done to instances of type /mob" );
					return;
				}
				((Mob)M13).regenerate_icons();
			} else if ( Lang13.Bool( href_list["adjustDamage"] ) && Lang13.Bool( href_list["mobToDamage"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 42 ) ) {
					return;
				}
				L = Lang13.FindObj( href_list["mobToDamage"] );

				if ( !( L is Mob_Living ) ) {
					return;
				}
				Text = href_list["adjustDamage"];
				amount = Interface13.Input( "Deal how much damage to mob? (Negative values here heal)", "Adjust " + Text + "loss", 0, null, null, InputType.Num );

				if ( !Lang13.Bool( L ) ) {
					GlobalFuncs.to_chat( Task13.User, "Mob doesn't exist anymore" );
					return;
				}

				dynamic _h = Text; // Was a switch-case, sorry for the mess.
				if ( _h=="brute" ) {
					((Mob_Living)L).adjustBruteLoss( amount );
				} else if ( _h=="fire" ) {
					((Mob_Living)L).adjustFireLoss( amount );
				} else if ( _h=="toxin" ) {
					((Mob_Living)L).adjustToxLoss( amount );
				} else if ( _h=="oxygen" ) {
					((Mob_Living)L).adjustOxyLoss( amount );
				} else if ( _h=="brain" ) {
					((Mob_Living)L).adjustBrainLoss( amount );
				} else if ( _h=="clone" ) {
					((Mob_Living)L).adjustCloneLoss( amount );
				} else {
					GlobalFuncs.to_chat( Task13.User, "You caused an error. DEBUG: Text:" + Text + " Mob:" + L );
					return;
				}

				if ( amount != 0 ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " dealt " + amount + " amount of " + Text + " damage to " + L + " " );
					GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " dealt " + amount + " amount of " + Text + " damage to " + L + " </span>" );
					href_list["datumrefresh"] = href_list["mobToDamage"];
				}
			} else if ( Lang13.Bool( href_list["datumrefresh"] ) ) {
				DAT = Lang13.FindObj( href_list["datumrefresh"] );

				if ( !( DAT is Game_Data ) ) {
					return;
				}
				this.debug_variables( DAT );
			} else if ( Lang13.Bool( href_list["proc_call"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 32 ) ) {
					return;
				}
				DAT2 = Lang13.FindObj( href_list["proc_call"] );

				if ( !Lang13.Bool( DAT2 ) ) {
					return;
				}
				this.callatomproc( DAT2 );
			}
			return;
		}

		// Function from file: datumvars.dm
		public string debug_variable( dynamic name = null, string value = null, int level = 0, dynamic DA = null ) {
			string html = null;
			dynamic D = null;
			dynamic C = null;
			dynamic L = null;
			int index = 0;
			dynamic entry = null;

			html = "";

			if ( Lang13.Bool( DA ) ) {
				html += new Txt( "<li style='backgroundColor:white'>(<a href='?_src_=vars;datumedit=" ).Ref( DA ).str( ";varnameedit=" ).item( name ).str( "'>E</a>) (<a href='?_src_=vars;datumchange=" ).Ref( DA ).str( ";varnamechange=" ).item( name ).str( "'>C</a>) (<a href='?_src_=vars;datummass=" ).Ref( DA ).str( ";varnamemass=" ).item( name ).str( "'>M</a>) " ).ToString();
			} else {
				html += "<li>";
			}

			if ( value == null ) {
				html += "" + name + " = <span class='value'>null</span>";
			} else if ( value is string ) {
				html += "" + name + " = <span class='value'>\"" + String13.HtmlEncode( value ) + "\"</span>";
			} else if ( value is Icon ) {
				html += "" + name + " = /icon (<span class='value'>" + value + "</span>)";
			} else if ( value is File ) {
				html += "" + name + " = <span class='value'>'" + value + "'</span>";
			} else if ( value is Game_Data ) {
				D = value;
				html += new Txt( "<a href='?_src_=vars;Vars=" ).Ref( value ).str( "'>" ).item( name ).str( " " ).Ref( value ).str( "</a> = " ).item( D.type ).ToString();
			} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( value ) ) ) {
				C = value;
				html += new Txt( "<a href='?_src_=vars;Vars=" ).Ref( value ).str( "'>" ).item( name ).str( " " ).Ref( value ).str( "</a> = " ).item( C ).str( " " ).item( C.type ).ToString();
			} else if ( value is ByTable ) {
				L = value;
				html += "" + name + " = /list (" + L.len + ")";

				if ( L.len > 0 && !( name == "underlays" || name == "overlays" || name == "vars" || L.len > 500 ) ) {
					html += "<ul>";
					index = 1;

					foreach (dynamic _a in Lang13.Enumerate( L )) {
						entry = _a;
						

						if ( entry is string ) {
							html += this.debug_variable( entry, L[entry], level + 1 );
						} else {
							html += this.debug_variable( index, L[index], level + 1 );
						}
						index++;
					}
					html += "</ul>";
				}
			} else {
				html += "" + name + " = <span class='value'>" + value + "</span>";
			}
			html += "</li>";
			return html;
		}

		// Function from file: datumvars.dm
		[VerbInfo( name: "View Variables", group: "Debug" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public void debug_variables( dynamic D = null ) {
			string title = null;
			dynamic body = null;
			dynamic A = null;
			Icon sprite = null;
			dynamic AT = null;
			dynamic A2 = null;
			dynamic M = null;
			string formatted_type = null;
			double middle_point = 0;
			int splitpoint = 0;
			dynamic names = null;
			dynamic V = null;
			dynamic V2 = null;
			string html = null;

			
			if ( !( Task13.User.client != null ) || !( Task13.User.client.holder != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You need to be an administrator to access this.</span>" );
				return;
			}
			title = "";
			body = new ByTable();

			if ( !Lang13.Bool( D ) ) {
				return;
			}

			if ( D is Ent_Static ) {
				A = D;
				title = new Txt().item( A.name ).str( " (" ).Ref( A ).str( ") = " ).item( A.type ).ToString();
			}

			if ( D is Ent_Static ) {
				AT = D;

				if ( Lang13.Bool( AT.icon ) && Lang13.Bool( AT.icon_state ) ) {
					sprite = new Icon( AT.icon, AT.icon_state );
					Interface13.CacheBrowseResource( Task13.User, sprite, "view_vars_sprite.png" );
				}
			}
			title = new Txt().item( D ).str( " (" ).Ref( D ).str( ") = " ).item( D.type ).ToString();
			body += @"<script type=""text/javascript"">

				function updateSearch(){
					var filter_text = document.getElementById('filter');
					var filter = filter_text.value.toLowerCase();

					if(event.keyCode == 13){	//Enter / return
						var vars_ol = document.getElementById('vars');
						var lis = vars_ol.getElementsByTagName(""li"");
						for ( var i = 0; i < lis.length; ++i )
						{
							try{
								var li = lis[i];
								if ( li.style.backgroundColor == ""#ffee88"" )
								{
									alist = lis[i].getElementsByTagName(""a"")
									if(alist.length > 0){
										location.href=alist[0].href;
									}
								}
							}catch(err) {   }
						}
						return
					}

					if(event.keyCode == 38){	//Up arrow
						var vars_ol = document.getElementById('vars');
						var lis = vars_ol.getElementsByTagName(""li"");
						for ( var i = 0; i < lis.length; ++i )
						{
							try{
								var li = lis[i];
								if ( li.style.backgroundColor == ""#ffee88"" )
								{
									if( (i-1) >= 0){
										var li_new = lis[i-1];
										li.style.backgroundColor = ""white"";
										li_new.style.backgroundColor = ""#ffee88"";
										return
									}
								}
							}catch(err) {  }
						}
						return
					}

					if(event.keyCode == 40){	//Down arrow
						var vars_ol = document.getElementById('vars');
						var lis = vars_ol.getElementsByTagName(""li"");
						for ( var i = 0; i < lis.length; ++i )
						{
							try{
								var li = lis[i];
								if ( li.style.backgroundColor == ""#ffee88"" )
								{
									if( (i+1) < lis.length){
										var li_new = lis[i+1];
										li.style.backgroundColor = ""white"";
										li_new.style.backgroundColor = ""#ffee88"";
										return
									}
								}
							}catch(err) {  }
						}
						return
					}

					//This part here resets everything to how it was at the start so the filter is applied to the complete list. Screw efficiency, it's client-side anyway and it only looks through 200 or so variables at maximum anyway (mobs).
					if(complete_list != null && complete_list != """"){
						var vars_ol1 = document.getElementById(""vars"");
						vars_ol1.innerHTML = complete_list
					}

					if(filter.value == """"){
						return;
					}else{
						var vars_ol = document.getElementById('vars');
						var lis = vars_ol.getElementsByTagName(""li"");

						for ( var i = 0; i < lis.length; ++i )
						{
							try{
								var li = lis[i];
								if ( li.innerText.toLowerCase().indexOf(filter) == -1 )
								{
									vars_ol.removeChild(li);
									i--;
								}
							}catch(err) {   }
						}
					}
					var lis_new = vars_ol.getElementsByTagName(""li"");
					for ( var j = 0; j < lis_new.length; ++j )
					{
						var li1 = lis[j];
						if (j == 0){
							li1.style.backgroundColor = ""#ffee88"";
						}else{
							li1.style.backgroundColor = ""white"";
						}
					}
				}



				function selectTextField(){
					var filter_text = document.getElementById('filter');
					filter_text.focus();
					filter_text.select();

				}

				function loadPage(list) {

					if(list.options[list.selectedIndex].value == """"){
						return;
					}

					location.href=list.options[list.selectedIndex].value;

				}
			</script> ";
			body += "<body onload='selectTextField(); updateSearch()' onkeyup='updateSearch()'>\n		<div align='center'><table width='100%'><tr><td width='50%'>";

			if ( sprite != null ) {
				body += "<table align='center' width='100%'><tr><td><img src='view_vars_sprite.png'></td><td>";
			} else {
				body += "<table align='center' width='100%'><tr><td>";
			}
			body += "<div align='center'>";

			if ( D is Ent_Static ) {
				A2 = D;

				if ( A2 is Mob_Living ) {
					body += new Txt( "<a href='?_src_=vars;rename=" ).Ref( D ).str( "'><b>" ).item( D ).str( "</b></a>" ).ToString();

					if ( Lang13.Bool( A2.dir ) ) {
						body += new Txt( "<br><font size='1'><a href='?_src_=vars;rotatedatum=" ).Ref( D ).str( ";rotatedir=left'><<</a> <a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=dir'>" ).item( GlobalFuncs.dir2text( A2.dir ) ).str( "</a> <a href='?_src_=vars;rotatedatum=" ).Ref( D ).str( ";rotatedir=right'>>></a></font>" ).ToString();
					}
					M = A2;
					body += new Txt( "<br><font size='1'><a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=ckey'>" ).item( ( Lang13.Bool( M.ckey ) ? M.ckey : "No ckey" ) ).str( "</a> / <a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=real_name'>" ).item( ( Lang13.Bool( M.real_name ) ? M.real_name : "No real name" ) ).str( "</a></font>" ).ToString();
					body += new Txt( "\n			<br><font size='1'>\n			BRUTE:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=brute'>" ).item( ((Mob_Living)M).getBruteLoss() ).str( "</a>\n			FIRE:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=fire'>" ).item( ((Mob_Living)M).getFireLoss() ).str( "</a>\n			TOXIN:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=toxin'>" ).item( ((Mob_Living)M).getToxLoss() ).str( "</a>\n			OXY:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=oxygen'>" ).item( ((Mob_Living)M).getOxyLoss() ).str( "</a>\n			CLONE:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=clone'>" ).item( ((Mob_Living)M).getCloneLoss() ).str( "</a>\n			BRAIN:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=brain'>" ).item( ((Mob_Living)M).getBrainLoss() ).str( @"</a>
			</font>


			" ).ToString();
				} else {
					body += new Txt( "<a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=name'><b>" ).item( D ).str( "</b></a>" ).ToString();

					if ( Lang13.Bool( A2.dir ) ) {
						body += new Txt( "<br><font size='1'><a href='?_src_=vars;rotatedatum=" ).Ref( D ).str( ";rotatedir=left'><<</a> <a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=dir'>" ).item( GlobalFuncs.dir2text( A2.dir ) ).str( "</a> <a href='?_src_=vars;rotatedatum=" ).Ref( D ).str( ";rotatedir=right'>>></a></font>" ).ToString();
					}
				}
			} else {
				body += "<b>" + D + "</b>";
			}
			body += "</div>\n		</tr></td></table>";
			formatted_type = "" + D.type;

			if ( Lang13.Length( formatted_type ) > 25 ) {
				middle_point = Lang13.Length( formatted_type ) / 2;
				splitpoint = String13.FindIgnoreCase( formatted_type, "/", ((int)( middle_point )), 0 );

				if ( splitpoint != 0 ) {
					formatted_type = "" + String13.SubStr( formatted_type, 1, splitpoint ) + "<br>" + String13.SubStr( formatted_type, splitpoint, 0 );
				} else {
					formatted_type = "Type too long";
				}
			}
			body += "<div align='center'><b><font size='1'>" + formatted_type + "</font></b>";

			if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) && this.holder.marked_datum == D ) {
				body += "<br><font size='1' color='red'><b>Marked Object</b></font>";
			}
			body += new Txt( "</div>\n		</div></td>\n		<td width='50%'><div align='center'><a href='?_src_=vars;datumrefresh=" ).Ref( D ).str( "'>Refresh</a>" ).ToString();
			body += @"	<form>
				<select name=""file"" size=""1""
				onchange=""loadPage(this.form.elements[0])""
				target=""_parent._top""
				onmouseclick=""this.focus()""
				style=""background-color:#ffffff"">
			";
			body += "	<option value>Select option</option>\n				<option value> </option>\n			";
			body += new Txt( "<option value='?_src_=vars;mark_object=" ).Ref( D ).str( "'>Mark Object</option>" ).ToString();

			if ( D is Mob ) {
				body += new Txt( "<option value='?_src_=vars;mob_player_panel=" ).Ref( D ).str( "'>Show player panel</option>" ).ToString();
			}

			if ( D is Ent_Dynamic ) {
				body += new Txt( "<option value='?_src_=vars;teleport_here=" ).Ref( D ).str( "'>Teleport Here</option>" ).ToString();
			}

			if ( D is Ent_Static ) {
				body += new Txt( "<option value='?_src_=vars;teleport_to=" ).Ref( D ).str( "'>Teleport To</option>" ).ToString();
			}
			body += new Txt( "<option value='?_src_=vars;proc_call=" ).Ref( D ).str( "'>Proc call</option>" ).ToString();
			body += "<option value>---</option>";

			if ( D is Mob ) {
				body += new Txt( "<option value='?_src_=vars;give_spell=" ).Ref( D ).str( "'>Give Spell</option>\n			<option value='?_src_=vars;give_disease=" ).Ref( D ).str( "'>Give Disease</option>\n			<option value='?_src_=vars;godmode=" ).Ref( D ).str( "'>Toggle Godmode</option>\n			<option value='?_src_=vars;build_mode=" ).Ref( D ).str( "'>Toggle Build Mode</option>\n			<option value='?_src_=vars;make_skeleton=" ).Ref( D ).str( "'>Make 2spooky</option>\n			<option value='?_src_=vars;direct_control=" ).Ref( D ).str( "'>Assume Direct Control</option>\n			<option value='?_src_=vars;drop_everything=" ).Ref( D ).str( "'>Drop Everything</option>\n			<option value='?_src_=vars;regenerateicons=" ).Ref( D ).str( "'>Regenerate Icons</option>\n			<option value='?_src_=vars;addlanguage=" ).Ref( D ).str( "'>Add Language</option>\n			<option value='?_src_=vars;remlanguage=" ).Ref( D ).str( "'>Remove Language</option>" ).ToString();

				if ( D is Mob_Living_Carbon_Human ) {
					body += new Txt( "<option value>---</option>\n				<option value='?_src_=vars;setmutantrace=" ).Ref( D ).str( "'>Set Mutantrace</option>\n				<option value='?_src_=vars;setspecies=" ).Ref( D ).str( "'>Set Species</option>\n				<option value='?_src_=vars;makeai=" ).Ref( D ).str( "'>Make AI</option>\n				<option value='?_src_=vars;makerobot=" ).Ref( D ).str( "'>Make cyborg</option>\n				<option value='?_src_=vars;makemonkey=" ).Ref( D ).str( "'>Make monkey</option>\n				<option value='?_src_=vars;makealien=" ).Ref( D ).str( "'>Make alien</option>\n				<option value='?_src_=vars;makeslime=" ).Ref( D ).str( "'>Make slime</option>\n				<option value='?_src_=vars;makecluwne=" ).Ref( D ).str( "'>Make cluwne</option>" ).ToString();
				}
				body += new Txt( "<option value>---</option>\n			<option value='?_src_=vars;gib=" ).Ref( D ).str( "'>Gib</option>" ).ToString();
			}

			if ( D is Ent_Static ) {
				body += new Txt( "<option value='?_src_=vars;delete=" ).Ref( D ).str( "'>Delete</option>" ).ToString();
			}

			if ( D is Obj ) {
				body += new Txt( "<option value='?_src_=vars;delall=" ).Ref( D ).str( "'>Delete all of type</option>" ).ToString();
			}

			if ( D is Obj || D is Mob || D is Tile ) {
				body += new Txt( "<option value='?_src_=vars;explode=" ).Ref( D ).str( "'>Trigger explosion</option>\n			<option value='?_src_=vars;emp=" ).Ref( D ).str( "'>Trigger EM pulse</option>" ).ToString();
			}
			body += @"</select></form>
		</div></td></tr></table></div><hr>
		<font size='1'><b>E</b> - Edit, tries to determine the variable type by itself.<br>
		<b>C</b> - Change, asks you for the var type first.<br>
		<b>M</b> - Mass modify: changes this variable for all objects of this type.</font><br>
		<hr><table width='100%'><tr><td width='20%'><div align='center'><b>Search:</b></div></td><td width='80%'><input type='text' id='filter' name='filter_text' value='' style='width:100%;'></td></tr></table><hr>
		<ol id='vars'>";
			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( D.vars )) {
				V = _a;
				
				names += V;
			}
			names = GlobalFuncs.sortList( names );

			foreach (dynamic _b in Lang13.Enumerate( names )) {
				V2 = _b;
				
				body += this.debug_variable( V2, D.vars[V2], 0, D );
			}
			body += "</ol>";
			body = GlobalFuncs.list2text( body );
			html = "<html><head>";

			if ( Lang13.Bool( title ) ) {
				html += "<title>" + title + "</title>";
			}
			html += @"<style>
body
{
	font-family: Verdana, sans-serif;
	font-size: 9pt;
}
.value
{
	font-family: ""Courier New"", monospace;
	font-size: 8pt;
}
</style>";
			html += "</head><body>";
			html += body;
			html += @"
		<script type='text/javascript'>
			var vars_ol = document.getElementById(""vars"");
			var complete_list = vars_ol.innerHTML;
		</script>
	";
			html += "</body></html>";
			Interface13.Browse( Task13.User, html, new Txt( "window=variables" ).Ref( D ).str( ";size=475x650" ).ToString() );
			return;
		}

		// Function from file: datumvars.dm
		[VerbInfo( name: "Add Reagent", group: "Debug" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public void debug_reagents( dynamic D = null ) {
			dynamic A = null;
			dynamic reagentDatum = null;
			dynamic reagentAmount = null;

			
			if ( !( Task13.User.client != null ) || !( Task13.User.client.holder != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You need to be an administrator to access this.</span>" );
				return;
			}

			if ( !Lang13.Bool( D ) ) {
				return;
			}

			if ( D is Ent_Static ) {
				A = D;
				reagentDatum = Interface13.Input( Task13.User, "Reagent", "Insert Reagent", "", null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( reagentDatum ) ) {
					reagentAmount = Interface13.Input( Task13.User, "Amount", "Insert Amount", "", null, InputType.Num );

					if ( ((Reagents)A.reagents).add_reagent( reagentDatum, reagentAmount ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>" + reagentDatum + " doesn't exist.</span>" );
						return;
					}
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " added " + reagentDatum + " with " + reagentAmount + " units to " + A + " " );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " added " + reagentDatum + " with " + reagentAmount + " units to " + A + " " );
				}
			}
			return;
		}

		// Function from file: processSchedulerView.dm
		[VerbInfo( name: "Process Scheduler Debug", group: "Debug" )]
		public void getSchedulerContext(  ) {
			ProcessSchedulerView processView = null;

			processView = new ProcessSchedulerView();
			processView.getContext();
			processView.v_interface.show( Task13.User );
			return;
		}

		// Function from file: verbs.dm
		[VerbInfo( desc: "debug the various periodic loop controllers for the game (be careful!).", group: "Debug" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "Air", "Cameras", "Configuration", "Emergency Shuttle", "failsafe", "Garbage", "Jobs", "master", "pAI", "Radio", "Scheduler", "Sun", "Supply Shuttle", "Ticker", "Vote" )]
		public void debug_controller( dynamic controller = null ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}

			dynamic _a = controller; // Was a switch-case, sorry for the mess.
			if ( _a=="master" ) {
				this.debug_variables( GlobalVars.master_controller );
				GlobalFuncs.feedback_add_details( "admin_verb", "dmaster" );
			} else if ( _a=="failsafe" ) {
				this.debug_variables( GlobalVars.failsafe );
				GlobalFuncs.feedback_add_details( "admin_verb", "dfailsafe" );
			} else if ( _a=="Ticker" ) {
				this.debug_variables( GlobalVars.ticker );
				GlobalFuncs.feedback_add_details( "admin_verb", "DTicker" );
			} else if ( _a=="Air" ) {
				this.debug_variables( GlobalVars.air_master );
				GlobalFuncs.feedback_add_details( "admin_verb", "DAir" );
			} else if ( _a=="Jobs" ) {
				this.debug_variables( GlobalVars.job_master );
				GlobalFuncs.feedback_add_details( "admin_verb", "DJobs" );
			} else if ( _a=="Sun" ) {
				this.debug_variables( GlobalVars.sun );
				GlobalFuncs.feedback_add_details( "admin_verb", "DSun" );
			} else if ( _a=="Radio" ) {
				this.debug_variables( GlobalVars.radio_controller );
				GlobalFuncs.feedback_add_details( "admin_verb", "DRadio" );
			} else if ( _a=="Supply Shuttle" ) {
				this.debug_variables( GlobalVars.supply_shuttle );
				GlobalFuncs.feedback_add_details( "admin_verb", "DSupply" );
			} else if ( _a=="Emergency Shuttle" ) {
				this.debug_variables( GlobalVars.emergency_shuttle );
				GlobalFuncs.feedback_add_details( "admin_verb", "DEmergency" );
			} else if ( _a=="Configuration" ) {
				this.debug_variables( GlobalVars.config );
				GlobalFuncs.feedback_add_details( "admin_verb", "DConf" );
			} else if ( _a=="pAI" ) {
				this.debug_variables( GlobalVars.paiController );
				GlobalFuncs.feedback_add_details( "admin_verb", "DpAI" );
			} else if ( _a=="Cameras" ) {
				this.debug_variables( GlobalVars.cameranet );
				GlobalFuncs.feedback_add_details( "admin_verb", "DCameras" );
			} else if ( _a=="Garbage" ) {
				this.debug_variables( GlobalVars.garbageCollector );
				GlobalFuncs.feedback_add_details( "admin_verb", "DGarbage" );
			} else if ( _a=="Scheduler" ) {
				this.debug_variables( GlobalVars.processScheduler );
				GlobalFuncs.feedback_add_details( "admin_verb", "DprocessScheduler" );
			} else if ( _a=="Vote" ) {
				this.debug_variables( GlobalVars.vote );
				GlobalFuncs.feedback_add_details( "admin_verb", "DprocessVote" );
			}
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " is debugging the " + controller + " controller." );
			return;
		}

		// Function from file: verbs.dm
		[VerbInfo( name: "Restart Controller", desc: "Restart one of the various periodic loop controllers for the game (be careful!)", group: "Debug" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "Master", "Failsafe", "Supply Shuttle", "Process Scheduler" )]
		public void restart_controller( dynamic controller = null ) {
			Controller_ProcessScheduler psched = null;
			Controller_Process P = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			Task13.User = null;
			Task13.Source = null;

			dynamic _b = controller; // Was a switch-case, sorry for the mess.
			if ( _b=="Supply Shuttle" ) {
				GlobalVars.supply_shuttle.process();
				GlobalFuncs.feedback_add_details( "admin_verb", "RSupply" );
			} else if ( _b=="Process Scheduler" ) {
				psched = new Controller_ProcessScheduler();
				psched.processes = GlobalVars.processScheduler.processes.Copy();
				psched.idle = GlobalVars.processScheduler.idle.Copy();
				psched.idle = GlobalVars.processScheduler.idle.Copy();
				psched.last_start = GlobalVars.processScheduler.last_start.Copy();
				psched.last_run_time = GlobalVars.processScheduler.last_run_time.Copy();
				psched.last_twenty_run_times = GlobalVars.processScheduler.last_twenty_run_times.Copy();
				psched.highest_run_time = GlobalVars.processScheduler.highest_run_time.Copy();
				psched.nameToProcessMap = GlobalVars.processScheduler.nameToProcessMap.Copy();
				psched.last_start = GlobalVars.processScheduler.last_start.Copy();

				foreach (dynamic _a in Lang13.Enumerate( psched.processes, typeof(Controller_Process) )) {
					P = _a;
					
					P.main = psched;
				}
				Lang13.Delete( GlobalVars.processScheduler );
				GlobalVars.processScheduler = null;
				GlobalVars.processScheduler = psched;
				GlobalVars.processScheduler.start();
				GlobalFuncs.to_chat( typeof(Game13), "<h1><span class='warning'>Process Scheduler was restarted</span></h1>" );
			}
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has restarted the " + controller + " controller." );
			return;
		}

		// Function from file: garbage.dm
		[VerbInfo( name: "Toggle qdel Behavior", desc: "Toggle qdel usage between normal and force del().", group: "Debug" )]
		public void qdel_toggle(  ) {
			GlobalVars.garbageCollector.del_everything = !GlobalVars.garbageCollector.del_everything;
			GlobalFuncs.to_chat( typeof(Game13), "<b>GC: qdel turned " + ( GlobalVars.garbageCollector.del_everything ? "off" : "on" ) + ".</b>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " turned qdel " + ( GlobalVars.garbageCollector.del_everything ? "off" : "on" ) + "." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " turned qdel " + ( GlobalVars.garbageCollector.del_everything ? "off" : "on" ) + ".</span>" );
			return;
		}

		// Function from file: garbage.dm
		[VerbInfo( name: "(GC) Hard Del List", desc: "List types that fail to soft del and are hard del()'d by the GC.", group: "Debug" )]
		public void gc_dump_hdl(  ) {
			ByTable L = null;
			dynamic A = null;

			L = new ByTable();
			L.Add( "<b>Garbage Collector Forced Deletions in this round</b><br>" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ghdel_profiling )) {
				A = _a;
				
				L.Add( "<br>" + A + " = " + GlobalVars.ghdel_profiling[A] );
			}

			if ( L.len == 1 ) {
				GlobalFuncs.to_chat( Task13.User, "No garbage collector deletions this round" );
				return;
			}
			Interface13.Browse( Task13.User, GlobalFuncs.list2text( L ), "window=harddellogs" );
			return;
		}

		// Function from file: screen_objects.dm
		public void reset_screen(  ) {
			Obj_Screen objects = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.screen, typeof(Obj_Screen) )) {
				objects = _a;
				

				if ( !objects.globalscreen ) {
					GlobalFuncs.returnToPool( objects );
				}
			}
			this.screen = null;
			return;
		}

		// Function from file: movable_screen_objects.dm
		[VerbInfo( name: "Spawn Snap UI Object", group: "Debug" )]
		public void test_snap_UI(  ) {
			Obj_Screen_Movable_Snap S = null;
			dynamic screen_l = null;

			S = new Obj_Screen_Movable_Snap();
			S.name = "Snap UI Object";
			S.icon_state = "block";
			S.maptext = "Snap";
			S.maptext_width = 64;
			screen_l = Interface13.Input( Task13.User, "Where on the screen? (Formatted as 'X,Y' e.g: '1,1' for bottom left)", "Spawn Snap UI Object", null, null, InputType.Str );

			if ( !Lang13.Bool( screen_l ) ) {
				return;
			}
			S.screen_loc = screen_l;
			this.screen.Add( S );
			return;
		}

		// Function from file: movable_screen_objects.dm
		[VerbInfo( name: "Spawn Movable UI Object", group: "Debug" )]
		public void test_movable_UI(  ) {
			Obj_Screen_Movable M = null;
			dynamic screen_l = null;

			M = new Obj_Screen_Movable();
			M.name = "Movable UI Object";
			M.icon_state = "block";
			M.maptext = "Movable";
			M.maptext_width = 64;
			screen_l = Interface13.Input( Task13.User, "Where on the screen? (Formatted as 'X,Y' e.g: '1,1' for bottom left)", "Spawn Movable UI Object", null, null, InputType.Str );

			if ( !Lang13.Bool( screen_l ) ) {
				return;
			}
			M.screen_loc = screen_l;
			this.screen.Add( M );
			return;
		}

		// Function from file: timed_alerts.dm
		[VerbInfo( name: "timed alert" )]
		public string f_timed_alert( int? time = null, Mob target = null, string message = null, string title = null, string button1 = null, string button2 = null, string button3 = null ) {
			time = time ?? 300;

			
			if ( this.timed_alert != null ) {
				return "";
			}
			this.timed_alert = new TimedAlert( target, message, title, button1, button2, button3 );
			Task13.Sleep( time ??0 );
			GlobalFuncs.qdel( this.timed_alert );
			return null;
		}

		// Function from file: files.dm
		public bool file_spam_check(  ) {
			int time_to_wait = 0;

			time_to_wait = GlobalVars.fileaccess_timer - Game13.time;

			if ( time_to_wait > 0 ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: file_spam_check(): Spam. Please wait " + Num13.Floor( time_to_wait / 10 ) + " seconds.</font>" );
				return true;
			}
			GlobalVars.fileaccess_timer = Game13.time + 200;
			return false;
		}

		// Function from file: files.dm
		public string browse_files( string root = null, int? max_iterations = null, ByTable valid_extensions = null ) {
			root = root ?? "data/logs/";
			max_iterations = max_iterations ?? 10;
			valid_extensions = valid_extensions ?? new ByTable(new object [] { ".txt", ".log", ".htm", ".csv" });

			string path = null;
			int? i = null;
			ByTable choices = null;
			dynamic choice = null;
			string extension = null;

			path = root;
			i = null;
			i = 0;

			while (( i ??0) < ( max_iterations ??0)) {
				choices = File13.List( path );

				if ( path != root ) {
					choices.Insert( 1, "/" );
				}
				choice = Interface13.Input( this, "Choose a file to access:", "Download", null, choices, InputType.Null | InputType.Any );

				dynamic _a = choice; // Was a switch-case, sorry for the mess.
				if ( _a==null ) {
					return null;
				} else if ( _a=="/" ) {
					path = root;
					i++;
					continue;
				}
				path += choice;

				if ( String13.SubStr( path, -1, 0 ) != "/" ) {
					break;
				}
				i++;
			}
			extension = String13.SubStr( path, -4, 0 );

			if ( !File13.Exists( path ) || !valid_extensions.Contains( extension ) ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: browse_files(): File not found/Invalid file(" + path + ").</font>" );
				return null;
			}
			return path;
		}

		// Function from file: files.dm
		public void getFiles( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			dynamic file = null;

			
			foreach (dynamic _a in Lang13.Enumerate( _args )) {
				file = _a;
				
				Interface13.CacheBrowseResource( this, file, null );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( name: "RoundEndInformation", desc: "Open the Round End Information window.", hidden: true )]
		public void roundendinfo(  ) {
			Interface13.Browse( this, GlobalVars.round_end_info, "window=roundstats;size=1000x600" );
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( name: ".swinset", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void _swinset( dynamic x = null ) {
			Interface13.WindowSet( this, null, x );
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( name: "hotkeys-help", group: "OOC" )]
		public void hotkeys_help(  ) {
			string hotkey_mode = null;
			string other = null;
			string admin = null;

			hotkey_mode = @"<font color='purple'>
Hotkey-Mode: (hotkey-mode must be on)
	TAB = toggle hotkey-mode
	a = left
	s = down
	d = right
	w = up
	q = drop
	e = equip
	r = throw
	m = me
	t = say
	o = OOC
	x = swap-hand
	z = activate held object (or y)
	f = cycle-intents-left
	g = cycle-intents-right
	1 = help-intent
	2 = disarm-intent
	3 = grab-intent
	4 = harm-intent
</font>";
			other = @"<font color='purple'>
Any-Mode: (hotkey doesn't need to be on)
	Ctrl+a = left
	Ctrl+s = down
	Ctrl+d = right
	Ctrl+w = up
	Ctrl+q = drop
	Ctrl+e = equip
	Ctrl+r = throw
	Ctrl+x = swap-hand
	Ctrl+z = activate held object (or Ctrl+y)
	Ctrl+f = cycle-intents-left
	Ctrl+g = cycle-intents-right
	Ctrl+1 = help-intent
	Ctrl+2 = disarm-intent
	Ctrl+3 = grab-intent
	Ctrl+4 = harm-intent
	DEL = pull
	INS = cycle-intents-right
	HOME = drop
	PGUP = swap-hand
	PGDN = activate held object
	END = throw
</font>";
			admin = @"<font color='purple'>
Admin:
	F5 = Aghost (admin-ghost)
	F6 = player-panel-new
	F7 = admin-pm
	F8 = Invisimin
</font>";
			GlobalFuncs.to_chat( this, hotkey_mode );
			GlobalFuncs.to_chat( this, other );

			if ( this.holder != null ) {
				GlobalFuncs.to_chat( this, admin );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( name: "Rules", desc: "Show Server Rules.", hidden: true )]
		public void rules(  ) {
			Interface13.Browse( this, new File( "config/rules.html" ), "window=rules;size=480x320" );
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( desc: "Visit the forum.", hidden: true )]
		public void forum(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.forumurl ) ) {
				
				if ( Interface13.Alert( "This will open the forum in your browser. Are you sure?", null, "Yes", "No" ) == "No" ) {
					return;
				}
				Interface13.Link( this, GlobalVars.config.forumurl );
			} else {
				GlobalFuncs.to_chat( this, "<span class='danger'>The forum URL is not set in the server configuration.</span>" );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( desc: "Visit the wiki.", hidden: true )]
		public void wiki(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.wikiurl ) ) {
				
				if ( Interface13.Alert( "This will open the wiki in your browser. Are you sure?", null, "Yes", "No" ) == "No" ) {
					return;
				}
				Interface13.Link( this, GlobalVars.config.wikiurl );
			} else {
				GlobalFuncs.to_chat( this, "<span class='danger'>The wiki URL is not set in the server configuration.</span>" );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( desc: "Shows a high scale rendering of the current map in your browser.", hidden: true )]
		public void MapRender(  ) {
			
			if ( !Lang13.Bool( GlobalVars.config.renders_url ) || GlobalVars.config.renders_url == "" ) {
				GlobalFuncs.to_chat( this, "<span class='danger'>The Map Renders url has not been set in the server configuration.</span>" );
				return;
			}

			if ( Interface13.Alert( "This will open the map render(s) in your browser. Are you sure?", null, "Yes", "No" ) == "No" ) {
				return;
			}

			if ( GlobalVars.map != null ) {
				
				switch ((string)( GlobalVars.map.nameShort )) {
					case "meta":
						Interface13.Link( this, "" + GlobalVars.config.renders_url + "/metaclub/" );
						break;
					case "deff":
						Interface13.Link( this, "" + GlobalVars.config.renders_url + "/defficiency/" );
						break;
					case "box":
						Interface13.Link( this, "" + GlobalVars.config.renders_url + "/tgstation/" );
						break;
					case "taxi":
						Interface13.Link( this, "" + GlobalVars.config.renders_url + "/taxistation/" );
						break;
					default:
						GlobalFuncs.to_chat( this, "<span class='warning'>No map render for " + GlobalVars.map.nameLong + ", bug Pomf about it!</span>" );
						break;
				}
			}
			return;
		}

		// Function from file: IDE.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void tcsclearmem(  ) {
			dynamic Machine = null;
			dynamic Server = null;
			dynamic M = null;

			
			if ( Lang13.Bool( this.mob.machine ) || this.mob is Mob_Living_Silicon ) {
				
				if ( GlobalFuncs.telecomms_check( this.mob ) ) {
					Machine = this.mob.machine;

					if ( Machine.editingcode != this.mob ) {
						return;
					}

					if ( Lang13.Bool( Machine.SelectedServer ) ) {
						Server = Machine.SelectedServer;
						Server.memory = new ByTable();
						Interface13.Output( this, null, "tcserror" );
						Interface13.Output( this, "<font color = blue>Server memory cleared!</font color>", "tcserror" );

						foreach (dynamic _a in Lang13.Enumerate( Machine.viewingcode )) {
							M = _a;
							

							if ( Lang13.Bool( M.client ) ) {
								Interface13.Output( M, "<font color = blue>Server memory cleared!</font color>", "tcserror" );
							}
						}
					} else {
						Interface13.Output( this, null, "tcserror" );
						Interface13.Output( this, "<font color = red>Failed to clear memory: Unable to locate server machine.</font color>", "tcserror" );
					}
				} else {
					Interface13.Output( this, null, "tcserror" );
					Interface13.Output( this, "<font color = red>Failed to clear memory: Unable to locate machine.</font color>", "tcserror" );
				}
			} else {
				Interface13.Output( this, null, "tcserror" );
				Interface13.Output( this, "<font color = red>Failed to clear memory: Unable to locate machine.</font color>", "tcserror" );
			}
			return;
		}

		// Function from file: IDE.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void tcsrevert(  ) {
			dynamic Machine = null;
			Obj_Machinery_Telecomms_Server Server = null;
			string showcode = null;

			
			if ( Lang13.Bool( this.mob.machine ) || this.mob is Mob_Living_Silicon ) {
				
				if ( GlobalFuncs.telecomms_check( this.mob ) ) {
					Machine = this.mob.machine;

					if ( Machine.editingcode != this.mob ) {
						return;
					}

					if ( Lang13.Bool( Machine.SelectedServer ) ) {
						Server = Machine.SelectedServer;
						showcode = GlobalFuncs.replacetext( Server.rawcode, "\\\"", "\\\\\"" );
						showcode = GlobalFuncs.replacetext( showcode, "\"", "\\\"" );
						Interface13.WindowSet( this.mob, "tcscode", "text=\"" + showcode + "\"" );
						Interface13.Output( this, null, "tcserror" );
					} else {
						Interface13.Output( this, null, "tcserror" );
						Interface13.Output( this, "<font color = red>Failed to revert: Unable to locate server machine.</font color>", "tcserror" );
					}
				} else {
					Interface13.Output( this, null, "tcserror" );
					Interface13.Output( this, "<font color = red>Failed to revert: Unable to locate machine.</font color>", "tcserror" );
				}
			} else {
				Interface13.Output( this, null, "tcserror" );
				Interface13.Output( this, "<font color = red>Failed to revert: Unable to locate machine.</font color>", "tcserror" );
			}
			return;
		}

		// Function from file: IDE.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void exittcs(  ) {
			dynamic Machine = null;

			
			if ( Lang13.Bool( this.mob.machine ) || this.mob is Mob_Living_Silicon ) {
				
				if ( GlobalFuncs.telecomms_check( this.mob ) ) {
					Machine = this.mob.machine;

					if ( Machine.editingcode == this.mob ) {
						Machine.storedcode = "" + Interface13.WindowGet( this.mob, "tcscode", "text" );
						Machine.editingcode = null;
					} else if ( Machine.viewingcode.Contains( this.mob ) ) {
						Machine.viewingcode.Remove( this.mob );
					}
				}
			}
			return;
		}

		// Function from file: IDE.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void tcsrun(  ) {
			dynamic Machine = null;
			Obj_Machinery_Telecomms Server = null;
			Game_Data signal = null;

			
			if ( Lang13.Bool( this.mob.machine ) || this.mob is Mob_Living_Silicon ) {
				
				if ( GlobalFuncs.telecomms_check( this.mob ) ) {
					Machine = this.mob.machine;

					if ( Machine.editingcode != this.mob ) {
						return;
					}

					if ( Lang13.Bool( Machine.SelectedServer ) ) {
						Server = Machine.SelectedServer;
						signal = GlobalFuncs.getFromPool( typeof(Signal) );
						((dynamic)signal).data["message"] = "";

						if ( Server.freq_listening.len > 0 ) {
							((dynamic)signal).frequency = Server.freq_listening[1];
						} else {
							((dynamic)signal).frequency = 1459;
						}
						((dynamic)signal).data["name"] = "";
						((dynamic)signal).data["job"] = "";
						((dynamic)signal).data["reject"] = 0;
						((dynamic)signal).data["server"] = Server;
						((dynamic)Server).Compiler.Run( signal );
					} else {
						Interface13.Output( this, null, "tcserror" );
						Interface13.Output( this, "<font color = red>Failed to run: Unable to locate server machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
					}
				} else {
					Interface13.Output( this, null, "tcserror" );
					Interface13.Output( this, "<font color = red>Failed to run: Unable to locate machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
				}
			} else {
				Interface13.Output( this, null, "tcserror" );
				Interface13.Output( this, "<font color = red>Failed to run: Unable to locate machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
			}
			return;
		}

		// Function from file: IDE.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void tcscompile(  ) {
			dynamic Machine = null;
			Obj_Machinery_Telecomms_Server Server = null;
			ByTable compileerrors = null;
			ScriptError e = null;
			dynamic M = null;
			ScriptError e2 = null;
			dynamic M2 = null;

			
			if ( Lang13.Bool( this.mob.machine ) || this.mob is Mob_Living_Silicon ) {
				
				if ( GlobalFuncs.telecomms_check( this.mob ) ) {
					Machine = this.mob.machine;

					if ( Machine.editingcode != this.mob ) {
						return;
					}

					if ( Lang13.Bool( Machine.SelectedServer ) ) {
						Server = Machine.SelectedServer;
						Server.setcode( Interface13.WindowGet( this, "tcscode", "text" ) );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							Interface13.Output( this, null, "tcserror" );
							Interface13.Output( this, "<font color = black>Please wait, compiling...</font>", "tcserror" );
							compileerrors = Server.compile( this.mob );

							if ( !GlobalFuncs.telecomms_check( this.mob ) ) {
								return;
							}

							if ( compileerrors.len != 0 ) {
								Interface13.Output( this, "<b>Compile Errors</b>", "tcserror" );

								foreach (dynamic _a in Lang13.Enumerate( compileerrors, typeof(ScriptError) )) {
									e = _a;
									
									Interface13.Output( this, "<font color = red>	>" + e.message + "</font color>", "tcserror" );
								}
								Interface13.Output( this, "(" + compileerrors.len + " errors)", "tcserror" );

								foreach (dynamic _c in Lang13.Enumerate( Machine.viewingcode )) {
									M = _c;
									

									if ( Lang13.Bool( M.client ) ) {
										Interface13.Output( M, null, "tcserror" );
										Interface13.Output( M, "<b>Compile Errors</b>", "tcserror" );

										foreach (dynamic _b in Lang13.Enumerate( compileerrors, typeof(ScriptError) )) {
											e2 = _b;
											
											Interface13.Output( M, "<font color = red>	>" + e2.message + "</font color>", "tcserror" );
										}
										Interface13.Output( M, "(" + compileerrors.len + " errors)", "tcserror" );
									}
								}
							} else {
								Interface13.Output( this, "<font color = blue>TCS compilation successful!</font color>", "tcserror" );
								Interface13.Output( this, "(0 errors)", "tcserror" );

								foreach (dynamic _d in Lang13.Enumerate( Machine.viewingcode )) {
									M2 = _d;
									

									if ( Lang13.Bool( M2.client ) ) {
										Interface13.Output( M2, "<font color = blue>TCS compilation successful!</font color>", "tcserror" );
										Interface13.Output( M2, "(0 errors)", "tcserror" );
									}
								}
							}
							return;
						}));
					} else {
						Interface13.Output( this, null, "tcserror" );
						Interface13.Output( this, "<font color = red>Failed to compile: Unable to locate server machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
					}
				} else {
					Interface13.Output( this, null, "tcserror" );
					Interface13.Output( this, "<font color = red>Failed to compile: Unable to locate machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
				}
			} else {
				Interface13.Output( this, null, "tcserror" );
				Interface13.Output( this, "<font color = red>Failed to compile: Unable to locate machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
			}
			return;
		}

		// Function from file: IDE.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void tcssave(  ) {
			dynamic Machine = null;
			Obj_Machinery_Telecomms_Server Server = null;
			string tcscode = null;

			
			if ( Lang13.Bool( this.mob.machine ) || this.mob is Mob_Living_Silicon ) {
				
				if ( GlobalFuncs.telecomms_check( this.mob ) ) {
					Machine = this.mob.machine;

					if ( Machine.editingcode != this.mob ) {
						return;
					}

					if ( Lang13.Bool( Machine.SelectedServer ) ) {
						Server = Machine.SelectedServer;
						tcscode = Interface13.WindowGet( this, "tcscode", "text" );
						Server.setcode( tcscode );
						Interface13.Output( this, null, "tcserror" );
					} else {
						Interface13.Output( this, null, "tcserror" );
						Interface13.Output( this, "<font color = red>Failed to save: Unable to locate server machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
					}
				} else {
					Interface13.Output( this, null, "tcserror" );
					Interface13.Output( this, "<font color = red>Failed to save: Unable to locate machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
				}
			} else {
				Interface13.Output( this, null, "tcserror" );
				Interface13.Output( this, "<font color = red>Failed to save: Unable to locate machine. (Back up your code before exiting the window!)</font color>", "tcserror" );
			}
			return;
		}

		// Function from file: targeting.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void AllowTargetClick(  ) {
			Obj_Item_Weapon_Gun G = null;
			Mob_Living M = null;

			this.target_can_click = !this.target_can_click;

			if ( this.target_can_click ) {
				GlobalFuncs.to_chat( Task13.User, "Target may now use items." );
			} else {
				GlobalFuncs.to_chat( Task13.User, "Target may no longer use items." );
			}

			if ( Task13.User.item_use_icon != null ) {
				((dynamic)Task13.User.item_use_icon).icon_state = "no_item" + this.target_can_click;
				((dynamic)Task13.User.item_use_icon).name = "" + ( this.target_can_click ? "Disallow" : "Allow" ) + " Item Use";
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Gun) )) {
				G = _b;
				
				G.lock_time = Game13.time + 5;

				if ( G.target != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( G.target, typeof(Mob_Living) )) {
						M = _a;
						

						if ( this.target_can_click ) {
							GlobalFuncs.to_chat( M, "Your character may now <b>use items</b> at the discretion of their targeter." );
						} else {
							GlobalFuncs.to_chat( M, "<span class='danger'>Your character will now be shot if they use items.</span>" );
						}
					}
				}
			}
			return;
		}

		// Function from file: targeting.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void AllowTargetRun(  ) {
			Obj_Item_Weapon_Gun G = null;
			Mob_Living M = null;

			this.target_can_run = !this.target_can_run;

			if ( this.target_can_run ) {
				GlobalFuncs.to_chat( Task13.User, "Target may now run." );
			} else {
				GlobalFuncs.to_chat( Task13.User, "Target may no longer run." );
			}

			if ( Task13.User.gun_run_icon != null ) {
				((dynamic)Task13.User.gun_run_icon).icon_state = "no_run" + this.target_can_run;
				((dynamic)Task13.User.gun_run_icon).name = "" + ( this.target_can_run ? "Disallow" : "Allow" ) + " Running";
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Gun) )) {
				G = _b;
				
				G.lock_time = Game13.time + 5;

				if ( G.target != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( G.target, typeof(Mob_Living) )) {
						M = _a;
						

						if ( this.target_can_run ) {
							GlobalFuncs.to_chat( M, "Your character may now <b>run</b> at the discretion of their targeter." );
						} else {
							GlobalFuncs.to_chat( M, "<span class='danger'>Your character will now be shot if they run.</span>" );
						}
					}
				}
			}
			return;
		}

		// Function from file: targeting.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void AllowTargetMove(  ) {
			Obj_Item_Weapon_Gun G = null;
			Mob_Living M = null;

			this.target_can_move = !this.target_can_move;

			if ( this.target_can_move ) {
				GlobalFuncs.to_chat( Task13.User, "Target may now walk." );
				Task13.User.gun_run_icon = GlobalFuncs.getFromPool( typeof(Obj_Screen_Gun_Run) );
				this.screen.Add( Task13.User.gun_run_icon );
			} else {
				GlobalFuncs.to_chat( Task13.User, "Target may no longer move." );
				this.target_can_run = false;
				GlobalFuncs.qdel( Task13.User.gun_run_icon );
				Task13.User.gun_run_icon = null;
			}

			if ( Task13.User.gun_move_icon != null ) {
				((dynamic)Task13.User.gun_move_icon).icon_state = "no_walk" + this.target_can_move;
				((dynamic)Task13.User.gun_move_icon).name = "" + ( this.target_can_move ? "Disallow" : "Allow" ) + " Walking";
			}

			foreach (dynamic _b in Lang13.Enumerate( Task13.User, typeof(Obj_Item_Weapon_Gun) )) {
				G = _b;
				
				G.lock_time = Game13.time + 5;

				if ( G.target != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( G.target, typeof(Mob_Living) )) {
						M = _a;
						

						if ( this.target_can_move ) {
							GlobalFuncs.to_chat( M, "Your character may now <b>walk</b> at the discretion of their targeter." );

							if ( !this.target_can_run && M is Mob_Living_Carbon_Human ) {
								GlobalFuncs.to_chat( M, "<span class='warning'>Your move intent is now set to walk, as your targeter permits it.</span>" );
								M.set_m_intent( "walk" );
							}
						} else {
							GlobalFuncs.to_chat( M, "<span class='danger'>Your character will now be shot if they move.</span>" );
						}
					}
				}
			}
			return;
		}

		// Function from file: targeting.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void ToggleGunMode(  ) {
			Obj_Item_Weapon_Gun G = null;

			this.gun_mode = !this.gun_mode;

			if ( this.gun_mode ) {
				GlobalFuncs.to_chat( Task13.User, "You will now take people captive." );
				this.add_gun_icons();
			} else {
				GlobalFuncs.to_chat( Task13.User, "You will now shoot where you target." );

				foreach (dynamic _a in Lang13.Enumerate( Task13.User, typeof(Obj_Item_Weapon_Gun) )) {
					G = _a;
					
					G.stop_aim();
				}
				this.remove_gun_icons();
			}

			if ( Task13.User.gun_setting_icon != null ) {
				((dynamic)Task13.User.gun_setting_icon).icon_state = "gun" + this.gun_mode;
			}
			return;
		}

		// Function from file: nanoexternal.dm
		[Verb]
		[VerbInfo( hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void nanoclose( dynamic uiref = null ) {
			dynamic ui = null;
			string href = null;
			string href2 = null;

			ui = Lang13.FindObj( uiref );

			if ( ui is Nanoui ) {
				ui.close();

				if ( Lang13.Bool( ui.v_ref ) ) {
					href = "close=1";
					this.Topic( href, String13.ParseUrlParams( href ), ui.v_ref );
				} else if ( ui.src_object != null ) {
					href2 = "close=1";
					this.Topic( href2, String13.ParseUrlParams( href2 ), ui.src_object );
				} else if ( ui.on_close_logic ) {
					
					if ( this != null && this.mob != null ) {
						this.mob.unset_machine();
					}
				}
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void drop_item(  ) {
			
			if ( !( this.mob is Mob_Living_Silicon_Robot ) ) {
				this.mob.drop_item_v();
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void toggle_throw_mode(  ) {
			
			if ( !( this.mob is Mob_Living_Carbon ) ) {
				return;
			}

			if ( !Lang13.Bool( this.mob.stat ) && this.mob.loc is Tile && !this.mob.restrained() ) {
				((Mob_Living_Carbon)this.mob).toggle_throw_mode();
			} else {
				return;
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void attack_self(  ) {
			
			if ( this.mob != null ) {
				this.mob.mode();
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void swap_hand(  ) {
			Mob R = null;

			
			if ( this.mob is Mob_Living_Carbon ) {
				((dynamic)this.mob).swap_hand();
			}

			if ( this.mob is Mob_Living_Silicon_Robot_Mommi ) {
				return;
			}

			if ( this.mob is Mob_Living_Silicon_Robot ) {
				R = this.mob;

				if ( !Lang13.Bool( ((dynamic)R).module_active ) ) {
					
					if ( !Lang13.Bool( ((dynamic)R).module_state_1 ) ) {
						
						if ( !Lang13.Bool( ((dynamic)R).module_state_2 ) ) {
							
							if ( !Lang13.Bool( ((dynamic)R).module_state_3 ) ) {
								return;
							} else {
								((dynamic)R).inv1.icon_state = "inv1";
								((dynamic)R).inv2.icon_state = "inv2";
								((dynamic)R).inv3.icon_state = "inv3 +a";
								((dynamic)R).module_active = ((dynamic)R).module_state_3;
							}
						} else {
							((dynamic)R).inv1.icon_state = "inv1";
							((dynamic)R).inv2.icon_state = "inv2 +a";
							((dynamic)R).inv3.icon_state = "inv3";
							((dynamic)R).module_active = ((dynamic)R).module_state_2;
						}
					} else {
						((dynamic)R).inv1.icon_state = "inv1 +a";
						((dynamic)R).inv2.icon_state = "inv2";
						((dynamic)R).inv3.icon_state = "inv3";
						((dynamic)R).module_active = ((dynamic)R).module_state_1;
					}
				} else if ( ((dynamic)R).module_active == ((dynamic)R).module_state_1 ) {
					
					if ( !Lang13.Bool( ((dynamic)R).module_state_2 ) ) {
						
						if ( !Lang13.Bool( ((dynamic)R).module_state_3 ) ) {
							return;
						} else {
							((dynamic)R).inv1.icon_state = "inv1";
							((dynamic)R).inv2.icon_state = "inv2";
							((dynamic)R).inv3.icon_state = "inv3 +a";
							((dynamic)R).module_active = ((dynamic)R).module_state_3;
						}
					} else {
						((dynamic)R).inv1.icon_state = "inv1";
						((dynamic)R).inv2.icon_state = "inv2 +a";
						((dynamic)R).inv3.icon_state = "inv3";
						((dynamic)R).module_active = ((dynamic)R).module_state_2;
					}
				} else if ( ((dynamic)R).module_active == ((dynamic)R).module_state_2 ) {
					
					if ( !Lang13.Bool( ((dynamic)R).module_state_3 ) ) {
						
						if ( !Lang13.Bool( ((dynamic)R).module_state_1 ) ) {
							return;
						} else {
							((dynamic)R).inv1.icon_state = "inv1 +a";
							((dynamic)R).inv2.icon_state = "inv2";
							((dynamic)R).inv3.icon_state = "inv3";
							((dynamic)R).module_active = ((dynamic)R).module_state_1;
						}
					} else {
						((dynamic)R).inv1.icon_state = "inv1";
						((dynamic)R).inv2.icon_state = "inv2";
						((dynamic)R).inv3.icon_state = "inv3 +a";
						((dynamic)R).module_active = ((dynamic)R).module_state_3;
					}
				} else if ( ((dynamic)R).module_active == ((dynamic)R).module_state_3 ) {
					
					if ( !Lang13.Bool( ((dynamic)R).module_state_1 ) ) {
						
						if ( !Lang13.Bool( ((dynamic)R).module_state_2 ) ) {
							return;
						} else {
							((dynamic)R).inv1.icon_state = "inv1";
							((dynamic)R).inv2.icon_state = "inv2 +a";
							((dynamic)R).inv3.icon_state = "inv3";
							((dynamic)R).module_active = ((dynamic)R).module_state_2;
						}
					} else {
						((dynamic)R).inv1.icon_state = "inv1 +a";
						((dynamic)R).inv2.icon_state = "inv2";
						((dynamic)R).inv3.icon_state = "inv3";
						((dynamic)R).module_active = ((dynamic)R).module_state_1;
					}
				} else {
					return;
				}
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void delete_key_pressed(  ) {
			
			if ( !( Task13.User.pulling != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You are not pulling anything.</span>" );
				return;
			}
			Task13.User.stop_pulling();
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Changelog", group: "OOC" )]
		public void changes(  ) {
			this.getFiles( "html/postcardsmall.jpg", "html/somerights20.png", "html/88x31.png", "html/bug-minus.png", "html/cross-circle.png", "html/hard-hat-exclamation.png", "html/image-minus.png", "html/image-plus.png", "html/music-minus.png", "html/music-plus.png", "html/tick-circle.png", "html/wrench-screwdriver.png", "html/spell-check.png", "html/burn-exclamation.png", "html/chevron.png", "html/chevron-expand.png", "html/changelog.css", "html/changelog.js", "html/changelog.html" );
			Interface13.Browse( this, "html/changelog.html", "window=changes;size=675x650" );

			if ( this.prefs.lastchangelog != GlobalVars.changelog_hash ) {
				this.prefs.lastchangelog = GlobalVars.changelog_hash;
				this.prefs.save_preferences();
				Interface13.WindowSet( this, "rpane.changelog", "background-color=none;font-style=;" );
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Github Report", group: "OOC" )]
		public void issue_report(  ) {
			string dat = null;

			dat = "	<title>/vg/station Github Ingame Reporting</title>\n					Revision: " + GlobalFuncs.return_revision() + "\n					<iframe src='http://ss13.moe/issues/?ckey=" + String13.CKey( this.key ) + "&address=" + Game13.internet_address + ":" + Game13.port + "' style='border:none' width='480' height='480' scroll=no></iframe>";
			Interface13.Browse( this, dat, "window=github;size=480x480" );
			return;
		}

		// Function from file: mediamanager.dm
		[Verb]
		[VerbInfo( name: "Set Volume", desc: "Set jukebox volume", group: "Preferences" )]
		public void change_volume(  ) {
			dynamic value = null;

			
			if ( !( this.media != null ) || !( this.media is MediaManager ) ) {
				GlobalFuncs.to_chat( Task13.User, "You have no media datum to change, if you're not in the lobby tell an admin." );
				return;
			}
			value = Interface13.Input( "Choose your Jukebox volume.", "Jukebox volume", this.media.volume, null, null, InputType.Any );
			value = Num13.Floor( Num13.MaxInt( 0, Num13.MinInt( 100, Convert.ToInt32( value ) ) ) );
			this.media.update_volume( value );

			if ( this.prefs != null ) {
				this.prefs.volume = value;
				this.prefs.save_preferences_sqlite( this, this.ckey );
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Toggle Progress Bars", desc: "Toggle the display of a progress bar above the target of action.", group: "Preferences" )]
		public void toggle_progress_bars(  ) {
			this.prefs.progress_bars = !Lang13.Bool( this.prefs.progress_bars );
			this.prefs.save_preferences_sqlite( this, this.ckey );

			if ( !Lang13.Bool( this.prefs.progress_bars ) ) {
				GlobalFuncs.to_chat( Task13.User, "You will no longer see progress bars when doing delayed actions." );
			} else {
				GlobalFuncs.to_chat( Task13.User, "You will now see progress bars when doing delayed actions" );
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Toggle nanoUI", desc: "Toggle using nanoUI or retro style UIs for objects that support both.", group: "Preferences" )]
		public void toggle_nanoui(  ) {
			this.prefs.usenanoui = !Lang13.Bool( this.prefs.usenanoui );
			this.prefs.save_preferences_sqlite( this, this.ckey );

			if ( !Lang13.Bool( this.prefs.usenanoui ) ) {
				GlobalFuncs.to_chat( Task13.User, "You will no longer use nanoUI on cross compatible UIs." );
			} else {
				GlobalFuncs.to_chat( Task13.User, "You will now use nanoUI on cross compatible UIs." );
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Setup Special Roles", desc: "Toggle hearing streaming media (radios, jukeboxes, etc)", group: "Preferences" )]
		public void setup_special_roles(  ) {
			this.prefs.configure_special_roles( Task13.User );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Change Streaming Program", desc: "Toggle between using VLC and WMP to stream jukebox media", group: "Preferences" )]
		public void toggle_wmp(  ) {
			this.prefs.usewmp = !Lang13.Bool( this.prefs.usewmp );
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.to_chat( Task13.User, "You will use " + ( Lang13.Bool( this.prefs.usewmp ) ? "WMP" : "VLC" ) + " to hear streamed media." );

			if ( !( this.media != null ) ) {
				return;
			}
			this.media.stop_music();
			this.media.playerstyle = ( Lang13.Bool( this.prefs.usewmp ) ? GlobalVars.PLAYER_OLD_HTML : GlobalVars.PLAYER_HTML );

			if ( Lang13.Bool( this.prefs.toggles & 16384 ) ) {
				this.media.open();
				this.media.update_music();
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Streaming", desc: "Toggle hearing streaming media (radios, jukeboxes, etc)", group: "Preferences" )]
		public void toggle_media(  ) {
			this.prefs.toggles ^= 16384;
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.to_chat( Task13.User, "You will " + ( Lang13.Bool( this.prefs.toggles & 16384 ) ? "now" : "no longer" ) + " hear streamed media." );

			if ( !( this.media != null ) ) {
				return;
			}

			if ( Lang13.Bool( this.prefs.toggles & 16384 ) ) {
				this.media.update_music();
			} else {
				this.media.stop_music();
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Change UI", desc: "Configure your user interface", group: "Preferences" )]
		public void change_ui(  ) {
			dynamic UI_style_new = null;
			dynamic UI_style_alpha_new = null;
			dynamic UI_style_color_new = null;
			ByTable icons = null;
			Obj_Screen I = null;

			
			if ( !( Task13.User is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( Task13.User, "This only for human" );
				return;
			}
			UI_style_new = Interface13.Input( Task13.User, "Select a style, we recommend White for customization", null, null, new ByTable(new object [] { "White", "Midnight", "Orange", "old" }), InputType.Any );

			if ( !Lang13.Bool( UI_style_new ) ) {
				return;
			}
			UI_style_alpha_new = Interface13.Input( Task13.User, "Select a new alpha(transparence) parametr for UI, between 50 and 255", null, null, null, InputType.Num );

			if ( ( ( !Lang13.Bool( UI_style_alpha_new ) ?1:0) | ( !( Convert.ToDouble( UI_style_alpha_new ) <= 255 && Convert.ToDouble( UI_style_alpha_new ) >= 50 ) ?1:0) ) != 0 ) {
				return;
			}
			UI_style_color_new = Interface13.Input( Task13.User, "Choose your UI color, dark colors are not recommended!", null, null, null, InputType.Null | InputType.Color );

			if ( !Lang13.Bool( UI_style_color_new ) ) {
				return;
			}
			icons = Task13.User.hud_used.adding + Task13.User.hud_used.other + Task13.User.hud_used.hotkeybuttons;
			icons.Add( Task13.User.zone_sel );

			if ( Interface13.Alert( "Like it? Save changes?", null, "Yes", "No" ) == "Yes" ) {
				this.prefs.UI_style = UI_style_new;
				this.prefs.UI_style_alpha = UI_style_alpha_new;
				this.prefs.UI_style_color = UI_style_color_new;
				this.prefs.save_preferences_sqlite( this, this.ckey );
				GlobalFuncs.to_chat( Task13.User, "UI was saved" );

				foreach (dynamic _a in Lang13.Enumerate( icons, typeof(Obj_Screen) )) {
					I = _a;
					

					if ( Lang13.Bool( I.color ) && I.alpha != 0 ) {
						I.icon = GlobalFuncs.ui_style2icon( UI_style_new );
						I.color = UI_style_color_new;
						I.alpha = Convert.ToInt32( UI_style_alpha_new );
					}
				}
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Ambience", desc: "Toggles hearing ambient sound effects", group: "Preferences" )]
		public void Toggle_Soundscape(  ) {
			this.prefs.toggles ^= 4;
			this.prefs.save_preferences_sqlite( this, this.ckey );

			if ( Lang13.Bool( this.prefs.toggles & 4 ) ) {
				GlobalFuncs.to_chat( this, "You will now hear ambient sounds." );
			} else {
				GlobalFuncs.to_chat( this, "You will no longer hear ambient sounds." );
				GlobalFuncs.to_chat( this, new Sound( null, false, false, 1, 0 ) );
				GlobalFuncs.to_chat( this, new Sound( null, false, false, 2, 0 ) );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TAmbi" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide LOOC", desc: "Toggles seeing Local OutOfCharacter chat", group: "Preferences" )]
		public void listen_looc(  ) {
			this.prefs.toggles ^= 4096;
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.to_chat( this, "You will " + ( Lang13.Bool( this.prefs.toggles & 4096 ) ? "now" : "no longer" ) + " see messages on the LOOC channel." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TLOOC" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide OOC", desc: "Toggles seeing OutOfCharacter chat", group: "Preferences" )]
		public void listen_ooc(  ) {
			this.prefs.toggles ^= 16;
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.to_chat( this, "You will " + ( Lang13.Bool( this.prefs.toggles & 16 ) ? "now" : "no longer" ) + " see messages on the OOC channel." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TOOC" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Midis", desc: "Toggles hearing sounds uploaded by admins", group: "Preferences" )]
		public void togglemidis(  ) {
			Sound break_sound = null;

			this.prefs.toggles ^= 2;
			this.prefs.save_preferences_sqlite( this, this.ckey );

			if ( Lang13.Bool( this.prefs.toggles & 2 ) ) {
				GlobalFuncs.to_chat( this, "You will now hear any sounds uploaded by admins." );
			} else {
				break_sound = new Sound( null, false, false, 777 );
				break_sound.priority = 255;
				this.WriteMsg( break_sound );
				GlobalFuncs.to_chat( this, "You will no longer hear sounds uploaded by admins; any currently playing midis have been disabled." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TMidi" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence LobbyMusic", desc: "Toggles hearing the GameLobby music", group: "Preferences" )]
		public void toggletitlemusic(  ) {
			this.prefs.toggles ^= 8;
			this.prefs.save_preferences_sqlite( this, this.ckey );

			if ( Lang13.Bool( this.prefs.toggles & 8 ) ) {
				GlobalFuncs.to_chat( this, "You will now hear music in the game lobby." );

				if ( this.mob is Mob_NewPlayer ) {
					this.playtitlemusic();
				}
			} else {
				GlobalFuncs.to_chat( this, "You will no longer hear music in the game lobby." );

				if ( this.mob is Mob_NewPlayer ) {
					GlobalFuncs.to_chat( this, new Sound( null, false, false, 1, 85 ) );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TLobby" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide Deadchat", desc: "Toggles seeing deadchat", group: "Preferences" )]
		public void deadchat(  ) {
			this.prefs.toggles ^= 32;
			this.prefs.save_preferences_sqlite( this, this.ckey );

			if ( this.holder != null ) {
				GlobalFuncs.to_chat( this, "You will " + ( Lang13.Bool( this.prefs.toggles & 32 ) ? "now" : "no longer" ) + " see deadchat." );
			} else {
				GlobalFuncs.to_chat( this, "As a ghost, you will " + ( Lang13.Bool( this.prefs.toggles & 32 ) ? "now" : "no longer" ) + " see deadchat." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TDV" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Enable/Disable GhostPDA", desc: "Toggle between hearing all PDA messages, or none", group: "Preferences" )]
		public void toggle_ghost_pda(  ) {
			this.prefs.toggles ^= 32768;
			GlobalFuncs.to_chat( this, "As a ghost, you will now " + ( Lang13.Bool( this.prefs.toggles & 32768 ) ? "hear all PDA messages in the world" : "hear no PDA messages at all" ) + "." );
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.feedback_add_details( "admin_verb", "TGP" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Enable/Disable GhostRadio", desc: "Toggle between hearing all radio chatter, or only from nearby speakers", group: "Preferences" )]
		public void toggle_ghost_radio(  ) {
			this.prefs.toggles ^= 8192;
			GlobalFuncs.to_chat( this, "As a ghost, you will now " + ( Lang13.Bool( this.prefs.toggles & 8192 ) ? "hear all radio chat in the world" : "only hear from nearby speakers" ) + "." );
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.feedback_add_details( "admin_verb", "TGR" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide GhostSight", desc: "Toggle Between seeing all mob emotes, and only emotes of nearby mobs", group: "Preferences" )]
		public void toggle_ghost_sight(  ) {
			this.prefs.toggles ^= 128;
			GlobalFuncs.to_chat( this, "As a ghost, you will now " + ( Lang13.Bool( this.prefs.toggles & 128 ) ? "see all emotes in the world" : "only see emotes from nearby mobs" ) + "." );
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.feedback_add_details( "admin_verb", "TGS" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide GhostEars", desc: "Toggle Between seeing all mob speech, and only speech of nearby mobs", group: "Preferences" )]
		public void toggle_ghost_ears(  ) {
			this.prefs.toggles ^= 64;
			GlobalFuncs.to_chat( this, "As a ghost, you will now " + ( Lang13.Bool( this.prefs.toggles & 64 ) ? "see all speech in the world" : "only see speech from nearby mobs" ) + "." );
			this.prefs.save_preferences_sqlite( this, this.ckey );
			GlobalFuncs.feedback_add_details( "admin_verb", "TGE" );
			return;
		}

		// Function from file: client procs.dm
		[Verb]
		[VerbInfo( name: "Resend Resources", desc: "Re-send resources for NanoUI. May help those with NanoUI issues.", group: "Preferences" )]
		public void resend_resources(  ) {
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Re-sending NanoUI resources.  This may result in lag.</span>" );
			GlobalVars.nanomanager.send_resources( this );
			return;
		}

		// Function from file: custom_event.dm
		[Verb]
		[VerbInfo( name: "Custom Event Info", group: "OOC" )]
		public void cmd_view_custom_event(  ) {
			
			if ( !Lang13.Bool( GlobalVars.custom_event_msg ) || GlobalVars.custom_event_msg == "" ) {
				GlobalFuncs.to_chat( this, "There currently is no known custom event taking place." );
				GlobalFuncs.to_chat( this, "Keep in mind: it is possible that an admin has not properly set this." );
				return;
			}
			GlobalFuncs.to_chat( this, "<h1 class='alert'>Custom Event</h1>" );
			GlobalFuncs.to_chat( this, "<h2 class='alert'>A custom event is taking place. OOC Info:</h2>" );
			GlobalFuncs.to_chat( this, "<span class='alert'>" + String13.HtmlEncode( GlobalVars.custom_event_msg ) + "</span>" );
			GlobalFuncs.to_chat( this, "<br>" );
			return;
		}

		// Function from file: vgstation13.dme
		[Verb]
		[VerbInfo( name: "Adminhelp", group: "Admin" )]
		[VerbArg( 1, InputType.Str )]
		public void adminhelp( dynamic msg = null ) {
			dynamic original_msg = null;
			ByTable msglist = null;
			ByTable surnames = null;
			ByTable forenames = null;
			ByTable ckeys = null;
			dynamic M = null;
			ByTable indexing = null;
			dynamic _string = null;
			ByTable L = null;
			int? surname_found = null;
			int? i = null;
			string word = null;
			int? i2 = null;
			string word2 = null;
			bool ai_found = false;
			ByTable mobs_found = null;
			dynamic original_word = null;
			string word3 = null;
			dynamic found = null;
			string ref_mob = null;
			int admin_number_afk = 0;
			dynamic X = null;
			int admin_number_present = 0;

			
			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( ( this.prefs.muted & 8 ) != 0 ) {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: Admin-PM: You cannot send adminhelps (Muted).</font>" );
				return;
			}

			if ( this.handle_spam_prevention( msg, 8 ) ) {
				return;
			}

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			msg = GlobalFuncs.sanitize( String13.SubStr( msg, 1, 1024 ) );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			original_msg = msg;
			msglist = GlobalFuncs.text2list( msg, " " );
			surnames = new ByTable();
			forenames = new ByTable();
			ckeys = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _b;
				
				indexing = new ByTable(new object [] { M.real_name, M.name });

				if ( Lang13.Bool( M.mind ) ) {
					indexing.Add( M.mind.name );
				}

				foreach (dynamic _a in Lang13.Enumerate( indexing )) {
					_string = _a;
					
					L = GlobalFuncs.text2list( _string, " " );
					surname_found = 0;
					i = null;
					i = L.len;

					while (( i ??0) >= 1) {
						word = String13.CKey( L[i] );

						if ( Lang13.Bool( word ) ) {
							surnames[word] = M;
							surname_found = i;
							break;
						}
						i--;
					}
					i2 = null;
					i2 = 1;

					while (( i2 ??0) < ( surname_found ??0)) {
						word2 = String13.CKey( L[i2] );

						if ( Lang13.Bool( word2 ) ) {
							forenames[word2] = M;
						}
						i2++;
					}
					ckeys[M.ckey] = M;
				}
			}
			ai_found = false;
			msg = "";
			mobs_found = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( msglist )) {
				original_word = _c;
				
				word3 = String13.CKey( original_word );

				if ( Lang13.Bool( word3 ) ) {
					
					if ( !GlobalVars.adminhelp_ignored_words.Contains( word3 ) ) {
						
						if ( word3 == "ai" ) {
							ai_found = true;
						} else {
							found = ckeys[word3];

							if ( !Lang13.Bool( found ) ) {
								found = surnames[word3];

								if ( !Lang13.Bool( found ) ) {
									found = forenames[word3];
								}
							}

							if ( Lang13.Bool( found ) ) {
								
								if ( !mobs_found.Contains( found ) ) {
									mobs_found.Add( found );

									if ( !ai_found && found is Mob_Living_Silicon_Ai ) {
										ai_found = true;
									}
									msg += new Txt( "<b><font color='black'>" ).item( original_word ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( found ).str( "'>?</A>)</font></b> " ).ToString();
									continue;
								}
							}
						}
					}
					msg += "" + original_word + " ";
				}
			}

			if ( !( this.mob != null ) ) {
				return;
			}
			ref_mob = new Txt().Ref( this.mob ).ToString();
			msg = "[" + GlobalFuncs.time_stamp() + "] <span class='notice'><b><font color=red>HELP: </font>" + GlobalFuncs.key_name( this, 1 ) + " (<A HREF='?_src_=holder;adminmoreinfo=" + ref_mob + "'>?</A>) (<A HREF='?_src_=holder;adminplayeropts=" + ref_mob + "'>PP</A>) (<A HREF='?_src_=vars;Vars=" + ref_mob + "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" + ref_mob + "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservejump=" + ref_mob + "'>JMP</A>) (<A HREF='?_src_=holder;check_antagonist=1'>CA</A>) " + ( ai_found ? " (<A HREF='?_src_=holder;adminchecklaws=" + ref_mob + "'>CL</A>)" : "" ) + ":</b> " + msg + "</span>";
			admin_number_afk = 0;

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.admins )) {
				X = _d;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( X ) ) ) {
					continue;
				}

				if ( Lang13.Bool( X.holder.rights & 8194 ) ) {
					
					if ( ((Client)X).is_afk() != 0 ) {
						admin_number_afk++;
					}

					if ( Lang13.Bool( X.prefs.toggles & 1 ) ) {
						GlobalFuncs.to_chat( X, "sound/effects/adminhelp.ogg" );
					}

					if ( Lang13.Bool( X.prefs.special_popup ) ) {
						Interface13.Output( X, msg, "window1.msay_output" );
					} else {
						GlobalFuncs.to_chat( X, msg );
					}
				}
			}

			if ( Lang13.Bool( this.prefs.special_popup ) ) {
				Interface13.Output( this, "[" + GlobalFuncs.time_stamp() + "] <span class='info'>PM to - <b>Admins</b>: " + original_msg + "</span>", "window1.msay_output" );
			} else {
				GlobalFuncs.to_chat( this, "<font color='blue'>PM to-<b>Admins</b>: " + original_msg + "</font>" );
			}
			admin_number_present = GlobalVars.admins.len - admin_number_afk;
			GlobalFuncs.log_admin( "HELP: " + GlobalFuncs.key_name( this ) + ": " + original_msg + " - heard by " + admin_number_present + " non-AFK admins." );

			if ( admin_number_present <= 0 ) {
				
				if ( !( admin_number_afk != 0 ) ) {
					GlobalFuncs.send2adminirc( "HELP " + GlobalFuncs.key_name( this ) + ": " + original_msg + " - No admins online" );
				} else {
					GlobalFuncs.send2adminirc( "HELP " + GlobalFuncs.key_name( this ) + ": " + original_msg + " - All admins AFK (" + admin_number_afk + ")" );
				}
			} else {
				GlobalFuncs.send2adminirc( "HELP " + GlobalFuncs.key_name( this ) + ": " + original_msg );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "AH" );
			return;
		}

		// Function from file: who.dm
		[Verb]
		[VerbInfo( name: "Adminwho", group: "Admin" )]
		public void adminwho(  ) {
			string aNames = null;
			string mNames = null;
			int numAdminsOnline = 0;
			int numModsOnline = 0;
			dynamic C = null;
			dynamic C2 = null;

			aNames = "";
			mNames = "";
			numAdminsOnline = 0;
			numModsOnline = 0;

			if ( this.holder != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
					C = _a;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
						continue;
					}

					if ( Lang13.Bool( C.holder.rights & 2 ) || !Lang13.Bool( C.holder.rights & 8192 ) ) {
						aNames += "	" + C + " is a " + C.holder.rank;

						if ( Lang13.Bool( C.holder.fakekey ) ) {
							aNames += " <i>(as " + C.holder.fakekey + ")</i>";
						}

						if ( C.mob is Mob_Dead_Observer ) {
							aNames += " - Observing";
						} else if ( C.mob is Mob_NewPlayer ) {
							aNames += " - Lobby";
						} else {
							aNames += " - Playing";
						}

						if ( ((Client)C).is_afk() != 0 ) {
							aNames += " (AFK)";
						}
						aNames += "\n";
						numAdminsOnline++;
					} else {
						mNames += "	" + C + " is a " + C.holder.rank;

						if ( Lang13.Bool( C.holder.fakekey ) ) {
							mNames += " <i>(as " + C.holder.fakekey + ")</i>";
						}

						if ( C.mob is Mob_Dead_Observer ) {
							mNames += " - Observing";
						} else if ( C.mob is Mob_NewPlayer ) {
							mNames += " - Lobby";
						} else {
							mNames += " - Playing";
						}

						if ( ((Client)C).is_afk() != 0 ) {
							mNames += " (AFK)";
						}
						mNames += "\n";
						numModsOnline++;
					}
				}
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.admins )) {
					C2 = _b;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
						continue;
					}

					if ( Lang13.Bool( C2.holder.rights & 2 ) || !Lang13.Bool( C2.holder.rights & 8192 ) ) {
						
						if ( !Lang13.Bool( C2.holder.fakekey ) ) {
							aNames += "	" + C2 + " is a " + C2.holder.rank + "\n";
							numAdminsOnline++;
						}
					} else if ( !Lang13.Bool( C2.holder.fakekey ) ) {
						mNames += "	" + C2 + " is a " + C2.holder.rank + "\n";
						numModsOnline++;
					}
				}
			}
			GlobalFuncs.to_chat( this, "\n<b>Current Admins (" + numAdminsOnline + "):</b>\n" + aNames + ( "\n<b>Current Moderators (" + numModsOnline + "):</b>\n" ) + mNames + "\n" );
			return;
		}

		// Function from file: who.dm
		[Verb]
		[VerbInfo( name: "Who", group: "OOC" )]
		public void who(  ) {
			string msg = null;
			ByTable Lines = null;
			dynamic C = null;
			string entry = null;
			Mob_Dead_Observer O = null;
			dynamic C2 = null;
			dynamic line = null;

			msg = "\n<b>Current Players:</b>\n";
			Lines = new ByTable();

			if ( this.holder != null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.clients )) {
					C = _b;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
						continue;
					}
					entry = "	" + C.key;

					if ( Lang13.Bool( C.holder ) && Lang13.Bool( C.holder.fakekey ) ) {
						entry += " <i>(as " + C.holder.fakekey + ")</i>";
					}

					if ( Lang13.Bool( C.mob.real_name ) ) {
						entry += " - Playing as " + C.mob.real_name;
					}

					dynamic _a = C.mob.stat; // Was a switch-case, sorry for the mess.
					if ( _a==1 ) {
						entry += " - <font color='darkgray'><b>Unconscious</b></font>";
					} else if ( _a==2 ) {
						
						if ( C.mob is Mob_Dead_Observer ) {
							O = C.mob;

							if ( O.started_as_observer != 0 ) {
								entry += " - <font color='gray'>Observing</font>";
							} else {
								entry += " - <font color='black'><b>DEAD</b></font>";
							}
						} else if ( C.mob is Mob_NewPlayer ) {
							entry += " - <font color='gray'><i>Lobby</i></font>";
						} else {
							entry += " - <font color='black'><b>DEAD</b></font>";
						}
					}

					if ( GlobalFuncs.is_special_character( C.mob ) != 0 ) {
						entry += " - <b><font color='red'>Antagonist</font></b>";
					}
					entry += new Txt( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( C.mob ).str( "'>?</A>)" ).ToString();
					Lines.Add( entry );
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used who verb advanced (shows OOC key - IC name, status and if antagonist)" );
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.clients )) {
					C2 = _c;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
						continue;
					}

					if ( Lang13.Bool( C2.holder ) && Lang13.Bool( C2.holder.fakekey ) ) {
						Lines.Add( C2.holder.fakekey );
					} else {
						Lines.Add( C2.key );
					}
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalFuncs.sortList( Lines ) )) {
				line = _d;
				
				msg += "" + line + "\n";
			}
			msg += "<b>Total Players: " + Lang13.Length( Lines ) + "</b>\n";
			GlobalFuncs.to_chat( this, msg );
			return;
		}

		// Function from file: ooc.dm
		[Verb]
		[VerbInfo( name: "LOOC", desc: "Local OOC, seen only by those in view.", group: "OOC" )]
		[VerbArg( 1, InputType.Str )]
		public void looc( string msg = null ) {
			ByTable heard = null;
			Mob AI = null;
			dynamic M = null;
			Client C = null;
			dynamic E = null;
			string display_name = null;
			dynamic C2 = null;
			string prefix = null;
			Client C3 = null;
			string display_name2 = null;

			
			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( !( this.mob != null ) ) {
				return;
			}

			if ( GlobalFuncs.IsGuestKey( this.key ) ) {
				GlobalFuncs.to_chat( this, "Guests may not use OOC." );
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}

			if ( !Lang13.Bool( this.prefs.toggles & 4096 ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You have LOOC muted.</span>" );
				return;
			}

			if ( !( this.holder != null ) ) {
				
				if ( !GlobalVars.ooc_allowed ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>LOOC is globally muted</span>" );
					return;
				}

				if ( !GlobalVars.dooc_allowed && this.mob.stat == 2 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>LOOC for dead mobs has been turned off.</span>" );
					return;
				}

				if ( ( this.prefs.muted & 2 ) != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You cannot use LOOC (muted).</span>" );
					return;
				}

				if ( GlobalVars.oocban_keylist.Find( "" + String13.CKey( this.ckey ) ) != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You cannot use LOOC (banned).</span>" );
					return;
				}

				if ( this.handle_spam_prevention( msg, 2 ) ) {
					return;
				}
			}
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]OOC: " + ( "(LOCAL) " + this.mob.name + "/" + this.key + " (@" + this.mob.x + "," + this.mob.y + "," + this.mob.z + "): " + msg ) ) );

			if ( !( this.mob is Mob_Living_Silicon_Ai ) ) {
				heard = GlobalFuncs.get_hearers_in_view( 7, this.mob );
			} else {
				AI = this.mob;
				heard = GlobalFuncs.get_hearers_in_view( 7, ( ((dynamic)AI).eyeobj is Mob_Camera_AiEye ? ((dynamic)AI).eyeobj : AI ) );
			}

			foreach (dynamic _a in Lang13.Enumerate( heard )) {
				M = _a;
				

				if ( AI == M ) {
					continue;
				}

				if ( !Lang13.Bool( M.client ) ) {
					continue;
				}
				C = M.client;

				if ( GlobalVars.admins.Contains( C ) ) {
					continue;
				}

				if ( M is Mob_Camera_AiEye ) {
					E = M;

					if ( Lang13.Bool( E.ai ) ) {
						C = E.ai.client;
					}
				}

				if ( Lang13.Bool( C.prefs.toggles & 4096 ) ) {
					display_name = this.key;

					if ( this.holder != null ) {
						
						if ( Lang13.Bool( this.holder.fakekey ) ) {
							
							if ( C.holder != null ) {
								display_name = "" + this.holder.fakekey + "/(" + this.key + ")";
							} else {
								display_name = this.holder.fakekey;
							}
						}
					}
					GlobalFuncs.to_chat( C, "<font color='#6699CC'><span class='ooc'><span class='prefix'>LOOC:</span> <EM>" + display_name + ":</EM> <span class='message'>" + msg + "</span></span></font>" );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.admins )) {
				C2 = _b;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
					continue;
				}

				if ( Lang13.Bool( C2.prefs.toggles & 4096 ) ) {
					prefix = "(R)LOOC";

					if ( heard.Contains( C2.mob ) ) {
						prefix = "LOOC";
					}
					GlobalFuncs.to_chat( C2, "<font color='#6699CC'><span class='ooc'><span class='prefix'>" + prefix + ":</span> <EM>" + this.key + ":</EM> <span class='message'>" + msg + "</span></span></font>" );
				}
			}

			if ( AI is Mob_Living_Silicon_Ai ) {
				C3 = AI.client;

				if ( GlobalVars.admins.Contains( C3 ) ) {
					return;
				}

				if ( Lang13.Bool( C3.prefs.toggles & 4096 ) ) {
					display_name2 = this.key;

					if ( this.holder != null ) {
						
						if ( Lang13.Bool( this.holder.fakekey ) ) {
							
							if ( C3.holder != null ) {
								display_name2 = "" + this.holder.fakekey + "/(" + this.key + ")";
							} else {
								display_name2 = this.holder.fakekey;
							}
						}
					}
					GlobalFuncs.to_chat( C3, "<font color='#6699CC'><span class='ooc'><span class='prefix'>LOOC:</span> <EM>" + display_name2 + ":</EM> <span class='message'>" + msg + "</span></span></font>" );
				}
			}
			return;
		}

		// Function from file: ooc.dm
		[Verb]
		[VerbInfo( name: "OOC", group: "OOC" )]
		[VerbArg( 1, InputType.Str )]
		public void ooc( string msg = null ) {
			dynamic display_colour = null;
			dynamic C = null;
			string display_name = null;

			
			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( !( this.mob != null ) ) {
				return;
			}

			if ( GlobalFuncs.IsGuestKey( this.key ) ) {
				GlobalFuncs.to_chat( this, "Guests may not use OOC." );
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}

			if ( !Lang13.Bool( this.prefs.toggles & 16 ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You have OOC muted.</span>" );
				return;
			}

			if ( !( this.holder != null ) ) {
				
				if ( !GlobalVars.ooc_allowed ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>OOC is globally muted</span>" );
					return;
				}

				if ( !GlobalVars.dooc_allowed && this.mob.stat == 2 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>OOC for dead mobs has been turned off.</span>" );
					return;
				}

				if ( ( this.prefs.muted & 2 ) != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You cannot use OOC (muted).</span>" );
					return;
				}

				if ( GlobalVars.oocban_keylist.Find( "" + String13.CKey( this.ckey ) ) != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You cannot use OOC (banned).</span>" );
					return;
				}

				if ( this.handle_spam_prevention( msg, 2 ) ) {
					return;
				}
			}
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]OOC: " + ( "" + this.mob.name + "/" + this.key + " (@" + this.mob.x + "," + this.mob.y + "," + this.mob.z + "): " + msg ) ) );
			display_colour = GlobalVars.config.default_ooc_color;

			if ( this.holder != null && !Lang13.Bool( this.holder.fakekey ) ) {
				display_colour = "#0099cc";

				if ( Lang13.Bool( this.holder.rights & 8192 ) && !Lang13.Bool( this.holder.rights & 2 ) ) {
					display_colour = "#184880";
				}

				if ( Lang13.Bool( this.holder.rights & 32 ) && !Lang13.Bool( this.holder.rights & 2 ) ) {
					display_colour = "#1b521f";
				} else if ( Lang13.Bool( this.holder.rights & 2 ) ) {
					
					if ( GlobalVars.config.allow_admin_ooccolor ) {
						display_colour = this.prefs.ooccolor;
					} else {
						display_colour = "#b82e00";
					}
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.clients )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( Lang13.Bool( C.prefs.toggles & 16 ) ) {
					display_name = this.key;

					if ( this.holder != null ) {
						
						if ( Lang13.Bool( this.holder.fakekey ) ) {
							
							if ( Lang13.Bool( C.holder ) ) {
								display_name = "" + this.holder.fakekey + "/(" + this.key + ")";
							} else {
								display_name = this.holder.fakekey;
							}
						}
					}
					GlobalFuncs.to_chat( C, "<font color='" + display_colour + "'><span class='ooc'><span class='prefix'>OOC:</span> <EM>" + display_name + ":</EM> <span class='message'>" + msg + "</span></span></font>" );
				}
			}
			return;
		}

		// Function from file: response_team.dm
		[Verb]
		[VerbInfo( group: "IC" )]
		public void JoinResponseTeam(  ) {
			Obj_Effect_Landmark L = null;
			dynamic new_name = null;
			bool? leader_selected = null;
			Mob_Living_Carbon_Human new_commando = null;

			
			if ( Task13.User is Mob_Dead_Observer || Task13.User is Mob_NewPlayer ) {
				
				if ( !GlobalVars.send_emergency_team ) {
					GlobalFuncs.to_chat( Task13.User, "No emergency response team is currently being sent." );
					return;
				}

				if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( Task13.User, "Syndicate" ) ) || Lang13.Bool( GlobalFuncs.jobban_isbanned( Task13.User, "Emergency Response Team" ) ) || Lang13.Bool( GlobalFuncs.jobban_isbanned( Task13.User, "Security Officer" ) ) ) {
					GlobalFuncs.to_chat( Task13.User, "<font color=red><b>You are jobbanned from the emergency reponse team!" );
					return;
				}

				if ( GlobalVars.response_team_members.len > 5 ) {
					GlobalFuncs.to_chat( Task13.User, "The emergency response team is already full!" );
				}

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					L = _a;
					

					if ( L.name == "ERT" ) {
						L.name = null;
						new_name = Interface13.Input( Task13.User, "Pick a name", "Name", null, null, InputType.Str | InputType.Null );

						if ( !Lang13.Bool( new_name ) ) {
							L.name = "ERT";
							return;
						}
						leader_selected = GlobalFuncs.isemptylist( GlobalVars.response_team_members );
						new_commando = this.create_response_team( L.loc, leader_selected, new_name );
						GlobalFuncs.qdel( L );
						L = null;
						new_commando.mind.key = Task13.User.key;
						new_commando.key = Task13.User.key;
						GlobalFuncs.to_chat( new_commando, "<span class='notice'>You are " + ( !( leader_selected == true ) ? "a member" : "the <B>LEADER</B>" ) + " of an Emergency Response Team, a type of military division, under CentComm's service. There is a code red alert on " + GlobalFuncs.station_name() + ", you are tasked to go and fix the problem.</span>" );
						GlobalFuncs.to_chat( new_commando, "<b>You should first gear up and discuss a plan with your team. More members may be joining, don't move out before you're ready." );

						if ( !( leader_selected == true ) ) {
							GlobalFuncs.to_chat( new_commando, "<b>As member of the Emergency Response Team, you answer only to your leader and CentComm officials.</b>" );
						} else {
							GlobalFuncs.to_chat( new_commando, "<b>As leader of the Emergency Response Team, you answer only to CentComm, and have authority to override the Captain where it is necessary to achieve your mission goals. It is recommended that you attempt to cooperate with the captain where possible, however." );
						}
						GlobalVars.ticker.mode.ert.Add( new_commando.mind );
						return;
					}
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "You need to be an observer or new player to use this." );
			}
			return;
		}

		// Function from file: getrev.dm
		[Verb]
		[VerbInfo( name: "Show Server Revision", group: "OOC" )]
		public void showrevinfo(  ) {
			string output = null;

			output = "Sorry, the revision info is unavailable.";
			output = File13.Read( ".git/refs/heads/Bleeding-Edge" );

			if ( !Lang13.Bool( output ) || output == "" ) {
				output = "Unable to load revision info from HEAD";
			}
			output += "Current Infomational Settings: <br>\n		Protect Authority Roles From Tratior: " + GlobalVars.config.protect_roles_from_antagonist + "<br>";
			Interface13.Browse( Task13.User, output, "window=revdata" );
			return;
		}

		// Function from file: browser.dm
		[Verb]
		[VerbInfo( name: ".windowclose", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void windowclosed( string atomref = null ) {
			dynamic hsrc = null;
			string href = null;

			
			if ( atomref != "null" ) {
				hsrc = Lang13.FindObj( atomref );
				href = "close=1";

				if ( Lang13.Bool( hsrc ) ) {
					Task13.User = this.mob;
					this.Topic( href, String13.ParseUrlParams( href ), hsrc );
					return;
				}
			}

			if ( this != null && this.mob != null ) {
				this.mob.unset_machine();
			}
			return;
		}

		// Function from file: unsorted.dm
		[Verb]
		[VerbInfo( name: ".windowclose", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void windowclose( string atomref = null ) {
			dynamic hsrc = null;
			string href = null;

			
			if ( atomref != "null" ) {
				hsrc = Lang13.FindObj( atomref );
				href = "close=1";

				if ( Lang13.Bool( hsrc ) ) {
					Task13.User = this.mob;
					this.Topic( href, String13.ParseUrlParams( href ), hsrc );
					return;
				}
			}

			if ( this != null && this.mob != null ) {
				this.mob.unset_machine();
			}
			return;
		}

	}

}