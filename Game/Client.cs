// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Client : Base_Client {

		public int adminhelptimerid = 0;
		public ByTable cache = new ByTable();
		public ByTable completed_asset_jobs = new ByTable();
		public ByTable sending = new ByTable();
		public int last_asset_job = 0;
		public Admins holder = null;
		public Buildmode click_intercept = null;
		public bool AI_Interact = false;
		public ByTable jobbancache = null;
		public dynamic last_message = "";
		public int last_message_count = 0;
		public Preferences prefs = null;
		public dynamic move_delay = 1;
		public bool moving = false;
		public dynamic area = null;
		public bool ambience_playing = false;
		public bool played = false;
		public dynamic player_age = "Requires database";
		public string related_accounts_ip = "Requires database";
		public string related_accounts_cid = "Requires database";
		public dynamic v_void = null;
		public string hi_last_pos = null;
		public Tooltip tooltips = null;

		// Function from file: client procs.dm
		public Client ( dynamic TopicData = null ) {
			AdminRank autorank = null;
			AdminRank R = null;
			Admins D = null;
			dynamic message = null;

			TopicData = null;

			if ( this.connection != "seeker" && this.connection != "web" ) {
				return; // Warning! Attempt to return some other value!
			}

			if ( this.byond_version < 0 ) {
				return; // Warning! Attempt to return some other value!
			}
			GlobalVars.clients.Add( this );
			GlobalVars.directory[this.ckey] = this;

			if ( GlobalVars.protected_config.autoadmin ) {
				
				if ( !Lang13.Bool( GlobalVars.admin_datums[this.ckey] ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admin_ranks, typeof(AdminRank) )) {
						R = _a;
						

						if ( R.name == GlobalVars.protected_config.autoadmin_rank ) {
							autorank = R;
							break;
						}
					}

					if ( !( autorank != null ) ) {
						Game13.WriteMsg( "Autoadmin rank not found" );
					} else {
						D = new Admins( autorank, this.ckey );
						GlobalVars.admin_datums[this.ckey] = D;
					}
				}
			}
			this.holder = GlobalVars.admin_datums[this.ckey];

			if ( this.holder != null ) {
				GlobalVars.admins.Add( this );
				this.holder.owner = this;
			}
			this.prefs = GlobalVars.preferences_datums[this.ckey];

			if ( !( this.prefs != null ) ) {
				this.prefs = new Preferences( this );
				GlobalVars.preferences_datums[this.ckey] = this.prefs;
			}
			this.prefs.last_ip = this.address;
			this.prefs.last_id = this.computer_id;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.connection == "web" ) {
				
				if ( !GlobalVars.config.allowwebclient ) {
					this.WriteMsg( "Web client is disabled" );
					Lang13.Delete( this );
					Task13.Source = null;
					return;
					return; // Warning! Attempt to return some other value!
				}

				if ( GlobalVars.config.webclientmembersonly && !Lang13.Bool( ((dynamic)this).IsByondMember() ) ) {
					this.WriteMsg( "Sorry, but the web client is restricted to byond members only." );
					Lang13.Delete( this );
					Task13.Source = null;
					return;
					return; // Warning! Attempt to return some other value!
				}
			}

			if ( ( Game13.address == this.address || !Lang13.Bool( this.address ) ) && !Lang13.Bool( GlobalVars.host ) ) {
				GlobalVars.host = this.key;
				Game13.update_status();
			}

			if ( this.holder != null ) {
				this.add_admin_verbs();
				this.admin_memo_output( "Show" );
				this.adminGreet();

				if ( ( GlobalVars.comms_key == "default_pwd" || Lang13.Length( GlobalVars.comms_key ) <= 6 ) && GlobalVars.comms_allowed ) {
					this.WriteMsg( "<span class='danger'>The server's API key is either too short or is the default value! Consider changing it immediately!</span>" );
				}
			}
			this.add_verbs_from_config();
			this.set_client_age_from_db();

			if ( Lang13.Bool( Lang13.IsNumber( this.player_age ) ) && this.player_age == -1 ) {
				
				if ( GlobalVars.config.panic_bunker && !( this.holder != null ) && !GlobalVars.deadmins.Contains( this.ckey ) ) {
					GlobalFuncs.log_access( "Failed Login: " + this.key + " - New account attempting to connect during panic bunker" );
					GlobalFuncs.message_admins( "<span class='adminnotice'>Failed Login: " + this.key + " - New account attempting to connect during panic bunker</span>" );
					this.WriteMsg( "Sorry but the server is currently not accepting connections from never before seen players." );
					Lang13.Delete( this );
					Task13.Source = null;
					return;
					return; // Warning! Attempt to return some other value!
				}

				if ( ( GlobalVars.config.notify_new_player_age ??0) >= 0 ) {
					GlobalFuncs.message_admins( "New user: " + GlobalFuncs.key_name_admin( this ) + " is connecting here for the first time." );

					if ( GlobalVars.config.irc_first_connection_alert ) {
						GlobalFuncs.send2irc_adminless_only( "New-user", "" + GlobalFuncs.key_name( this ) + " is connecting for the first time!" );
					}
				}
				this.player_age = 0;
			} else if ( Lang13.Bool( Lang13.IsNumber( this.player_age ) ) && Convert.ToDouble( this.player_age ) < ( GlobalVars.config.notify_new_player_age ??0) ) {
				GlobalFuncs.message_admins( "New user: " + GlobalFuncs.key_name_admin( this ) + " just connected with an age of " + this.player_age + " day" + ( this.player_age == 1 ? "" : "s" ) );
			}
			this.sync_client_with_db();
			this.send_resources();

			if ( !( GlobalVars._void != null ) ) {
				GlobalVars._void = new Obj_Screen_ClickCatcher();
			}
			this.screen.Add( GlobalVars._void );

			if ( this.prefs.lastchangelog != GlobalVars.changelog_hash ) {
				this.WriteMsg( "<span class='info'>You have unread updates in the changelog.</span>" );

				if ( GlobalVars.config.aggressive_changelog ) {
					this.__CallVerb("Changelog" );
				} else {
					Interface13.WindowSet( this, "infowindow.changelog", "font-style=bold" );
				}
			}

			if ( GlobalVars.clientmessages.Contains( this.ckey ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.clientmessages[this.ckey] )) {
					message = _b;
					
					this.WriteMsg( message );
				}
				GlobalVars.clientmessages.Remove( this.ckey );
			}

			if ( GlobalVars.config != null && GlobalVars.config.autoconvert_notes ) {
				GlobalFuncs.convert_notes_sql( this.ckey );
			}

			if ( !Interface13.WindowExists( this, "asset_cache_browser" ) ) {
				this.WriteMsg( "<span class='warning'>Unable to access asset cache browser, if you are using a custom skin file, please allow DS to download the updated version, if you are not, then make a bug report. This is not a critical issue but can cause issues with resource downloading, as it is impossible to know when extra resources arrived to you.</span>" );
			}

			if ( !( this.tooltips != null ) ) {
				this.tooltips = new Tooltip( this );
			}
			return;
		}

		// Function from file: mob_movement.dm
		public override bool Move( dynamic loc = null, int dir = 0 ) {
			bool _default = false;

			Mob L = null;
			Ent_Static O = null;
			dynamic M = null;
			ByTable L2 = null;
			Ent_Dynamic M2 = null;
			int? diag = null;
			dynamic M3 = null;
			dynamic M4 = null;

			
			if ( !( this.mob != null ) || !( this.mob.loc != null ) ) {
				return false;
			}

			if ( Lang13.Bool( this.mob.notransform ) ) {
				return false;
			}

			if ( this.mob.control_object != null ) {
				this.Move_object( dir ); return false;
			}

			if ( Game13.time < Convert.ToDouble( this.move_delay ) ) {
				return false;
			}

			if ( !( this.mob is Mob_Living ) ) {
				return this.mob.Move( loc, dir );
			}

			if ( this.mob.stat == 2 ) {
				this.mob.ghostize();
				return false;
			}

			if ( this.moving ) {
				return false;
			}

			if ( this.mob is Mob_Living ) {
				L = this.mob;

				if ( Lang13.Bool( ((dynamic)L).incorporeal_move ) ) {
					this.Process_Incorpmove( dir );
					return false;
				}
			}

			if ( this.Process_Grab() ) {
				return _default;
			}

			if ( this.mob.buckled != null ) {
				return this.mob.buckled.relaymove( this.mob, dir );
			}

			if ( this.mob.remote_control != null ) {
				return this.mob.remote_control.relaymove( this.mob, dir );
			}

			if ( this.mob is Mob_Living_Silicon_Ai ) {
				this.AIMove( loc, dir, this.mob ); return false;
			}

			if ( !this.mob.canmove ) {
				return false;
			}

			if ( this.mob.loc is Obj || this.mob.loc is Mob ) {
				O = this.mob.loc;
				return O.relaymove( this.mob, dir );
			}

			if ( !( this.mob.Process_Spacemove( dir ) != 0 ) ) {
				return false;
			}

			if ( this.mob.restrained() ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this.mob, 1 ) )) {
					M = _a;
					

					if ( M.pulling == this.mob ) {
						
						if ( !((Mob)M).incapacitated() && this.mob.Adjacent( M ) ) {
							this.WriteMsg( "<span class='warning'>You're restrained! You can't move!</span>" );
							this.move_delay = Game13.time + 10;
							return false;
						} else {
							((Mob)M).stop_pulling();
						}
					}
				}
			}
			this.moving = true;
			this.move_delay = this.mob.movement_delay() + Game13.time;

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), this.mob ) ) ) {
				this.move_delay = Num13.MaxInt( Convert.ToInt32( this.move_delay ), Game13.time + 7 );
				L2 = this.mob.ret_grab();

				if ( L2 is ByTable ) {
					
					if ( L2.len == 2 ) {
						L2.Remove( this.mob );
						M2 = L2[1];

						if ( M2 != null ) {
							
							if ( Map13.GetDistance( this.mob, M2 ) <= 1 || M2.loc == this.mob.loc ) {
								_default = base.Move( (object)(loc), dir );

								if ( M2 != null ) {
									
									if ( M2.loc is Tile ) {
										diag = Map13.GetDistance( this.mob, M2 );

										if ( ( ( diag ??0) - 1 & ( diag ??0) ) != 0 ) {
											
										} else {
											diag = null;
										}

										if ( Map13.GetDistance( this.mob, M2 ) > 1 || Lang13.Bool( diag ) ) {
											Map13.Step( M2, Map13.GetDistance( M2.loc, this.mob.loc ) );
										}
									}
								}
							}
						}
					} else {
						
						foreach (dynamic _b in Lang13.Enumerate( L2 )) {
							M3 = _b;
							
							M3.other_mobs = true;

							if ( this.mob != M3 ) {
								M3.animate_movement = 3;
							}
						}

						foreach (dynamic _c in Lang13.Enumerate( L2 )) {
							M4 = _c;
							
							Task13.Schedule( 0, (Task13.Closure)(() => {
								Map13.Step( M4, dir );
								return;
								return;
							}));
							Task13.Schedule( 1, (Task13.Closure)(() => {
								M4.other_mobs = null;
								M4.animate_movement = 2;
								return;
								return;
							}));
						}
					}
				}
			}

			if ( this.mob.confused != 0 ) {
				
				if ( this.mob.confused > 40 ) {
					Map13.Step( this.mob, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) ) );
				} else if ( Rand13.PercentChance( ((int)( this.mob.confused * 1.5 )) ) ) {
					Map13.Step( this.mob, ((int)( GlobalFuncs.angle2dir( ( GlobalFuncs.dir2angle( dir ) ??0) + Convert.ToDouble( Rand13.Pick(new object [] { 90, -90 }) ) ) ??0 )) );
				} else if ( Rand13.PercentChance( ((int)( this.mob.confused * 3 )) ) ) {
					Map13.Step( this.mob, ((int)( GlobalFuncs.angle2dir( ( GlobalFuncs.dir2angle( dir ) ??0) + Convert.ToDouble( Rand13.Pick(new object [] { 45, -45 }) ) ) ??0 )) );
				} else {
					Map13.Step( this.mob, dir );
				}
			} else {
				_default = base.Move( (object)(loc), dir );
			}
			this.moving = false;

			if ( this.mob != null && _default ) {
				this.mob.throwing = false;
			}
			return _default;
		}

		// Function from file: mob_movement.dm
		public bool Center(  ) {
			Ent_Static O = null;

			
			if ( this.mob.loc is Obj ) {
				O = this.mob.loc;

				if ( this.mob.canmove ) {
					return O.relaymove( this.mob, 0 );
				}
			}
			return false;
		}

		// Function from file: mob_movement.dm
		public void Northwest(  ) {
			
			if ( !Lang13.Bool( Task13.User.get_active_hand() ) ) {
				Task13.User.WriteMsg( "<span class='warning'>You have nothing to drop in your hand!</span>" );
				return;
			}
			Task13.User.drop_item();
			return;
		}

		// Function from file: mob_movement.dm
		public void Southwest(  ) {
			Mob C = null;

			
			if ( Task13.User is Mob_Living_Carbon ) {
				C = Task13.User;
				((Mob_Living_Carbon)C).toggle_throw_mode();
			} else {
				Task13.User.WriteMsg( "<span class='danger'>This mob type cannot throw items.</span>" );
			}
			return;
		}

		// Function from file: mob_movement.dm
		public void Southeast(  ) {
			this.attack_self();
			return;
		}

		// Function from file: mob_movement.dm
		public void Northeast(  ) {
			this.swap_hand();
			return;
		}

		// Function from file: client procs.dm
		public override dynamic Stat(  ) {
			dynamic _default = null;

			_default = base.Stat();

			if ( this.holder != null ) {
				Task13.Sleep( 1 );
			} else {
				Task13.Sleep( 5 );
			}
			return _default;
		}

		// Function from file: client procs.dm
		public override void Del(  ) {
			
			if ( this.holder != null ) {
				this.adminGreet( true );
				this.holder.owner = null;
				GlobalVars.admins.Remove( this );
			}
			GlobalVars.directory.Remove( this.ckey );
			GlobalVars.clients.Remove( this );
			base.Del(); return;
		}

		// Function from file: client procs.dm
		public bool AllowUpload( dynamic filename = null, int filelength = 0 ) {
			
			if ( filelength > 1048576 ) {
				this.WriteMsg( "<font color='red'>Error: AllowUpload(): File Upload too large. Upload Limit: " + 1024 + "KiB.</font>" );
				return false;
			}
			return true;
		}

		// Function from file: client procs.dm
		public override void Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? job = null;

			
			if ( !( Task13.User != null ) || Task13.User != this.mob ) {
				return;
			}

			if ( Lang13.Bool( href_list["asset_cache_confirm_arrival"] ) ) {
				job = String13.ParseNumber( href_list["asset_cache_confirm_arrival"] );
				this.completed_asset_jobs.Add( job );
				return;
			}

			if ( Lang13.Bool( href_list["priv_msg"] ) ) {
				
				if ( Lang13.Bool( href_list["ahelp_reply"] ) ) {
					this.cmd_ahelp_reply( href_list["priv_msg"] );
					return;
				}
				this.cmd_admin_pm( href_list["priv_msg"], null );
				return;
			}

			if ( GlobalVars.config != null && GlobalVars.config.log_hrefs && GlobalVars.href_logfile != null ) {
				GlobalVars.href_logfile.WriteMsg( "<small>" + String13.FormatTime( Game13.timeofday, "hh:mm" ) + " " + this + " (usr:" + Task13.User + ")</small> || " + ( Lang13.Bool( hsrc ) ? "" + hsrc + " " : "" ) + href + "<br>" );
			}

			dynamic _a = href_list["_src_"]; // Was a switch-case, sorry for the mess.
			if ( _a=="holder" ) {
				hsrc = this.holder;
			} else if ( _a=="usr" ) {
				hsrc = this.mob;
			} else if ( _a=="prefs" ) {
				this.prefs.process_link( Task13.User, href_list ); return;
			} else if ( _a=="vars" ) {
				this.view_var_Topic( href, href_list, hsrc ); return;
			}
			base.Topic( href, href_list, (object)(hsrc) );
			return;
		}

		// Function from file: mapGenerator.dm
		[VerbInfo( name: "Test Nature Map Generator", group: "Debug" )]
		public void debugNatureMapGenerator(  ) {
			MapGenerator_Nature N = null;
			dynamic startInput = null;
			dynamic endInput = null;
			ByTable startCoords = null;
			ByTable endCoords = null;
			Tile Start = null;
			Tile End = null;
			ByTable clusters = null;
			dynamic moduleClusters = null;
			bool theCluster = false;
			MapGeneratorModule M = null;

			N = new MapGenerator_Nature();
			startInput = Interface13.Input( Task13.User, "Start turf of Map, (X;Y;Z)", "Map Gen Settings", "1;1;1", null, InputType.Str );
			endInput = Interface13.Input( Task13.User, "End turf of Map (X;Y;Z)", "Map Gen Settings", "" + Game13.map_size_x + ";" + Game13.map_size_y + ";" + ( this.mob != null ? this.mob.z : 1 ), null, InputType.Str );

			if ( !Lang13.Bool( startInput ) || !Lang13.Bool( endInput ) ) {
				this.WriteMsg( "Missing Input" );
				return;
			}
			startCoords = GlobalFuncs.splittext( startInput, ";" );
			endCoords = GlobalFuncs.splittext( endInput, ";" );

			if ( !( startCoords != null ) || !( endCoords != null ) ) {
				this.WriteMsg( "Invalid Coords" );
				this.WriteMsg( "Start Input: " + startInput );
				this.WriteMsg( "End Input: " + endInput );
				return;
			}
			Start = Map13.GetTile( ((int)( String13.ParseNumber( startCoords[1] ) ??0 )), ((int)( String13.ParseNumber( startCoords[2] ) ??0 )), ((int)( String13.ParseNumber( startCoords[3] ) ??0 )) );
			End = Map13.GetTile( ((int)( String13.ParseNumber( endCoords[1] ) ??0 )), ((int)( String13.ParseNumber( endCoords[2] ) ??0 )), ((int)( String13.ParseNumber( endCoords[3] ) ??0 )) );

			if ( !( Start != null ) || !( End != null ) ) {
				this.WriteMsg( "Invalid Turfs" );
				this.WriteMsg( "Start Coords: " + startCoords[1] + " - " + startCoords[2] + " - " + startCoords[3] );
				this.WriteMsg( "End Coords: " + endCoords[1] + " - " + endCoords[2] + " - " + endCoords[3] );
				return;
			}
			clusters = new ByTable()
				.Set( "None", 0 )
				.Set( "All", 30 )
				.Set( "Sames", 24 )
				.Set( "Differents", 6 )
				.Set( "Same turfs", 8 )
				.Set( "Same atoms", 16 )
				.Set( "Different turfs", 2 )
				.Set( "Different atoms", 4 )
				.Set( "All turfs", 10 )
				.Set( "All atoms", 20 )
			;
			moduleClusters = Interface13.Input( "Cluster Flags (Cancel to leave unchanged from defaults)", "Map Gen Settings", null, null, clusters, InputType.Null | InputType.Any );
			theCluster = false;

			if ( moduleClusters != "None" ) {
				
				if ( !Lang13.Bool( clusters[moduleClusters] ) ) {
					this.WriteMsg( "Invalid Cluster Flags" );
					return;
				}
				theCluster = Lang13.Bool( clusters[moduleClusters] );
			} else {
				theCluster = false;
			}

			if ( theCluster ) {
				
				foreach (dynamic _a in Lang13.Enumerate( N.modules, typeof(MapGeneratorModule) )) {
					M = _a;
					
					M.clusterCheckFlags = theCluster ?1:0;
				}
			}
			this.WriteMsg( "Defining Region" );
			N.defineRegion( Start, End );
			this.WriteMsg( "Region Defined" );
			this.WriteMsg( "Generating Region" );
			N.generate();
			this.WriteMsg( "Generated Region" );
			return;
		}

		// Function from file: tgstation.dme
		[VerbInfo( name: "Spawn Space Ninja", desc: "Spawns a space ninja for when you need a teenager with attitude.", group: "Fun" )]
		public void send_space_ninja(  ) {
			dynamic C = null;
			RoundEvent_Ninja E = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}

			if ( !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "The game hasn't started yet!" );
				return;
			}

			if ( Interface13.Alert( "Are you sure you want to send in a space ninja?", null, "Yes", "No" ) == "No" ) {
				return;
			}
			C = Interface13.Input( "Pick character to spawn as the Space Ninja", "Key", "", null, GlobalVars.clients, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( C ) ) {
				return;
			}
			E = new RoundEvent_Ninja();
			E.key = C.key;
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( this.key ) + " has spawned " + GlobalFuncs.key_name_admin( C.key ) + " as a Space Ninja.</span>" );
			GlobalFuncs.log_admin( "" + this.key + " used Spawn Space Ninja." );
			return;
		}

		// Function from file: admin_ninja_verbs.dm
		[VerbInfo( name: "Make Space Ninja" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "player_list" )]
		public void cmd_admin_ninjafy( dynamic H = null ) {
			
			if ( !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( !( H is Mob_Living_Carbon_Human ) ) {
				return;
			}

			if ( Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" ) != "Yes" ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " turned " + H.key + " into a Space Ninja." );
			H.mind = GlobalFuncs.create_ninja_mind( H.key );
			((Mob)H).mind_initialize();
			((Mob_Living_Carbon_Human)H).equip_space_ninja( true );

			if ( H.wear_suit is Obj_Item_Clothing_Suit_Space_SpaceNinja ) {
				((Obj_Item_Clothing_Suit_Space_SpaceNinja)H.wear_suit).randomize_param();
				Task13.Schedule( 0, (Task13.Closure)(() => {
					((Obj_Item_Clothing_Suit_Space_SpaceNinja)H.wear_suit).ninitialize( 10, H );
					return;
				}));
			}
			return;
		}

		// Function from file: eye.dm
		public void AIMove( dynamic n = null, int direct = 0, Mob user = null ) {
			dynamic initial = null;
			int max_sprint = 0;
			int? i = null;
			dynamic step = null;

			initial = Lang13.Initial( user, "sprint" );
			max_sprint = 50;

			if ( Lang13.Bool( ((dynamic)user).cooldown ) && Convert.ToDouble( ((dynamic)user).cooldown ) < Game13.timeofday ) {
				((dynamic)user).sprint = initial;
			}
			i = null;
			i = 0;

			while (( i ??0) < Num13.MaxInt( Convert.ToInt32( ((dynamic)user).sprint ), Convert.ToInt32( initial ) )) {
				step = GlobalFuncs.get_turf( Map13.GetStep( ((dynamic)user).eyeobj, direct ) );

				if ( Lang13.Bool( step ) ) {
					((Mob_Camera_AiEye)((dynamic)user).eyeobj).setLoc( step );
				}
				i += 20;
			}
			((dynamic)user).cooldown = Game13.timeofday + 5;

			if ( Lang13.Bool( ((dynamic)user).acceleration ) ) {
				((dynamic)user).sprint = Num13.MinInt( Convert.ToInt32( ((dynamic)user).sprint + 0.5 ), max_sprint );
			} else {
				((dynamic)user).sprint = initial;
			}

			if ( !Lang13.Bool( ((dynamic)user).tracking ) ) {
				((dynamic)user).cameraFollow = null;
			}

			if ( Lang13.Bool( ((dynamic)user).camera_light_on ) ) {
				((Mob_Living_Silicon_Ai)user).light_cameras();
			}
			return;
		}

		// Function from file: mob_movement.dm
		public bool Process_Incorpmove( int direct = 0 ) {
			dynamic mobloc = null;
			Mob L = null;
			int? locx = null;
			int? locy = null;
			int limit = 0;
			dynamic T = null;
			Tile stepTurf = null;

			mobloc = GlobalFuncs.get_turf( this.mob );

			if ( !( this.mob is Mob_Living ) ) {
				return false;
			}
			L = this.mob;

			dynamic _c = ((dynamic)L).incorporeal_move; // Was a switch-case, sorry for the mess.
			if ( _c==1 ) {
				L.loc = Map13.GetStep( L, direct );
				L.dir = direct;
			} else if ( _c==2 ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					locx = null;
					locy = null;

					switch ((int)( direct )) {
						case 1:
							locx = Lang13.IntNullable( mobloc.x );
							locy = Lang13.IntNullable( mobloc.y + 2 );

							if ( ( locy ??0) > Game13.map_size_y ) {
								return false;
							}
							break;
						case 2:
							locx = Lang13.IntNullable( mobloc.x );
							locy = Lang13.IntNullable( mobloc.y - 2 );

							if ( ( locy ??0) < 1 ) {
								return false;
							}
							break;
						case 4:
							locy = Lang13.IntNullable( mobloc.y );
							locx = Lang13.IntNullable( mobloc.x + 2 );

							if ( ( locx ??0) > Game13.map_size_x ) {
								return false;
							}
							break;
						case 8:
							locy = Lang13.IntNullable( mobloc.y );
							locx = Lang13.IntNullable( mobloc.x - 2 );

							if ( ( locx ??0) < 1 ) {
								return false;
							}
							break;
						default:
							return false;
							break;
					}
					L.loc = Map13.GetTile( locx ??0, locy ??0, Convert.ToInt32( mobloc.z ) );
					limit = 2;

					foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.getline( mobloc, L.loc ) )) {
						T = _b;
						
						Task13.Schedule( 0, (Task13.Closure)(() => {
							GlobalFuncs.anim( T, L, "icons/mob/mob.dmi", null, "shadow", null, L.dir );
							return;
						}));
						limit--;

						if ( limit <= 0 ) {
							break;
						}
					}
				} else {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						GlobalFuncs.anim( mobloc, this.mob, "icons/mob/mob.dmi", null, "shadow", null, L.dir );
						return;
					}));
					L.loc = Map13.GetStep( L, direct );
				}
				L.dir = direct;
			} else if ( _c==3 ) {
				stepTurf = Map13.GetStep( L, direct );

				if ( Lang13.Bool( stepTurf.flags & 1 ) ) {
					L.WriteMsg( "<span class='warning'>Holy energies block your path.</span>" );
					L.notransform = 1;
					Task13.Schedule( 2, (Task13.Closure)(() => {
						L.notransform = 0;
						return;
					}));
				} else {
					L.loc = Map13.GetStep( L, direct );
					L.dir = direct;
				}
			}
			return true;
		}

		// Function from file: mob_movement.dm
		public bool Process_Grab(  ) {
			ByTable grabbing = null;
			dynamic G = null;
			dynamic G2 = null;
			Obj_Item_Weapon_Grab G3 = null;

			
			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), this.mob.grabbed_by.len ) ) ) ) {
				grabbing = new ByTable();

				if ( this.mob.l_hand is Obj_Item_Weapon_Grab ) {
					G = this.mob.l_hand;
					grabbing.Add( G.affecting );
				}

				if ( this.mob.r_hand is Obj_Item_Weapon_Grab ) {
					G2 = this.mob.r_hand;
					grabbing.Add( G2.affecting );
				}

				foreach (dynamic _a in Lang13.Enumerate( this.mob.grabbed_by, typeof(Obj_Item_Weapon_Grab) )) {
					G3 = _a;
					

					if ( G3.state == 1 && !( grabbing.Find( G3.assailant ) != 0 ) ) {
						GlobalFuncs.qdel( G3 );
					}

					if ( G3.state == 2 ) {
						this.move_delay = Game13.time + 10;

						if ( !Rand13.PercentChance( 25 ) ) {
							return true;
						}
						this.mob.visible_message( "<span class='warning'>" + this.mob + " has broken free of " + G3.assailant + "'s grip!</span>" );
						GlobalFuncs.qdel( G3 );
					}

					if ( G3.state == 3 ) {
						this.move_delay = Game13.time + 10;

						if ( !Rand13.PercentChance( 5 ) ) {
							return true;
						}
						this.mob.visible_message( "<span class='warning'>" + this.mob + " has broken free of " + G3.assailant + "'s headlock!</span>" );
						GlobalFuncs.qdel( G3 );
					}
				}
			}
			return false;
		}

		// Function from file: mob_movement.dm
		public void Move_object( int direct = 0 ) {
			
			if ( this.mob != null && this.mob.control_object != null ) {
				
				if ( Lang13.Bool( ((dynamic)this.mob.control_object).density ) ) {
					Map13.Step( (Ent_Dynamic)(this.mob.control_object), direct );

					if ( !( this.mob.control_object != null ) ) {
						return;
					}
					((dynamic)this.mob.control_object).dir = direct;
				} else {
					((dynamic)this.mob.control_object).loc = Map13.GetStep( (Ent_Static)(this.mob.control_object), direct );
				}
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[VerbInfo( name: "Show/Hide Prayers", desc: "Toggles seeing prayers", group: "Preferences" )]
		public void toggleprayers(  ) {
			this.prefs.chat_toggles ^= 16;
			this.prefs.save_preferences();
			this.WriteMsg( "You will " + ( ( this.prefs.chat_toggles & 16 ) != 0 ? "now" : "no longer" ) + " see prayerchat." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TP" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[VerbInfo( name: "Show/Hide Deadchat", desc: "Toggles seeing deadchat", group: "Preferences" )]
		public void deadchat(  ) {
			this.prefs.chat_toggles ^= 2;
			this.prefs.save_preferences();
			this.WriteMsg( "You will " + ( ( this.prefs.chat_toggles & 2 ) != 0 ? "now" : "no longer" ) + " see deadchat." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TDV" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[VerbInfo( name: "Do/Don't Announce Login", desc: "Toggle if you want an announcement to admins when you login during a round", group: "Preferences" )]
		public void toggleannouncelogin(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.prefs.toggles ^= 1024;
			this.prefs.save_preferences();
			Task13.User.WriteMsg( "You will " + ( Lang13.Bool( this.prefs.toggles & 1024 ) ? "now" : "no longer" ) + " have an announcement to other admins when you login." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAL" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[VerbInfo( name: "Hear/Silence Adminhelps", desc: "Toggle hearing a notification when admin PMs are received", group: "Preferences" )]
		public void toggleadminhelpsound(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.prefs.toggles ^= 1;
			this.prefs.save_preferences();
			Task13.User.WriteMsg( "You will " + ( Lang13.Bool( this.prefs.toggles & 1 ) ? "now" : "no longer" ) + " hear a sound when adminhelps arrive." );
			GlobalFuncs.feedback_add_details( "admin_verb", "AHS" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[VerbInfo( name: "Show/Hide RadioChatter", desc: "Toggle seeing radiochatter from nearby radios and speakers", group: "Preferences" )]
		public void toggle_hear_radio(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.prefs.chat_toggles ^= 32;
			this.prefs.save_preferences();
			Task13.User.WriteMsg( "You will " + ( ( this.prefs.chat_toggles & 32 ) != 0 ? "now" : "no longer" ) + " see radio chatter from nearby radios or speakers" );
			GlobalFuncs.feedback_add_details( "admin_verb", "THR" );
			return;
		}

		// Function from file: client procs.dm
		public void send_resources(  ) {
			this.getFiles( "html/search.js", "html/panels.css", "html/browser/common.css", "html/browser/scannernew.css", "html/browser/playeroptions.css" );
			Task13.Schedule( 10, (Task13.Closure)(() => {
				GlobalFuncs.getFilesSlow( this, GlobalVars.SSasset.cache, GlobalVars.FALSE );
				return;
			}));
			return;
		}

		// Function from file: client procs.dm
		public int is_afk( int? duration = null ) {
			duration = duration ?? 3000;

			
			if ( this.inactivity > ( duration ??0) ) {
				return this.inactivity;
			}
			return 0;
		}

		// Function from file: client procs.dm
		public void add_verbs_from_config(  ) {
			
			if ( GlobalVars.config.see_own_notes ) {
				this.verbs.Add( typeof(Client).GetMethod( "self_notes" ) );
			}
			return;
		}

		// Function from file: client procs.dm
		public void sync_client_with_db(  ) {
			string sql_ckey = null;
			DBQuery query_ip = null;
			DBQuery query_cid = null;
			bool watchreason = false;
			dynamic admin_rank = null;
			string sql_ip = null;
			string sql_computerid = null;
			string sql_admin_rank = null;
			DBQuery query_insert = null;
			string serverip = null;
			DBQuery query_accesslog = null;

			
			if ( GlobalFuncs.IsGuestKey( this.key ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			sql_ckey = GlobalFuncs.sanitizeSQL( this.ckey );
			query_ip = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM " + GlobalFuncs.format_table_name( "player" ) + " WHERE ip = '" + this.address + "' AND ckey != '" + sql_ckey + "'" );
			query_ip.Execute();
			this.related_accounts_ip = "";

			while (query_ip.NextRow()) {
				this.related_accounts_ip += "" + query_ip.item[1] + ", ";
			}
			query_cid = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM " + GlobalFuncs.format_table_name( "player" ) + " WHERE computerid = '" + this.computer_id + "' AND ckey != '" + sql_ckey + "'" );
			query_cid.Execute();
			this.related_accounts_cid = "";

			while (query_cid.NextRow()) {
				this.related_accounts_cid += "" + query_cid.item[1] + ", ";
			}
			watchreason = this.check_watchlist( sql_ckey );

			if ( watchreason ) {
				GlobalFuncs.message_admins( "<font color='red'><B>Notice: </B></font><font color='blue'>" + GlobalFuncs.key_name_admin( this ) + " is on the watchlist and has just connected - Reason: " + watchreason + "</font>" );
				GlobalFuncs.send2irc_adminless_only( "Watchlist", "" + GlobalFuncs.key_name( this ) + " is on the watchlist and has just connected - Reason: " + watchreason );
			}
			admin_rank = "Player";

			if ( this.holder != null && this.holder.rank != null ) {
				admin_rank = this.holder.rank.name;
			}
			sql_ip = GlobalFuncs.sanitizeSQL( this.address );
			sql_computerid = GlobalFuncs.sanitizeSQL( this.computer_id );
			sql_admin_rank = GlobalFuncs.sanitizeSQL( admin_rank );
			query_insert = GlobalVars.dbcon.NewQuery( "INSERT INTO " + GlobalFuncs.format_table_name( "player" ) + " (id, ckey, firstseen, lastseen, ip, computerid, lastadminrank) VALUES (null, '" + sql_ckey + "', Now(), Now(), '" + sql_ip + "', '" + sql_computerid + "', '" + sql_admin_rank + "') ON DUPLICATE KEY UPDATE lastseen = VALUES(lastseen), ip = VALUES(ip), computerid = VALUES(computerid), lastadminrank = VALUES(lastadminrank)" );
			query_insert.Execute();
			serverip = "" + Game13.internet_address + ":" + Game13.port;
			query_accesslog = GlobalVars.dbcon.NewQuery( "INSERT INTO `" + GlobalFuncs.format_table_name( "connection_log" ) + "` (`id`,`datetime`,`serverip`,`ckey`,`ip`,`computerid`) VALUES(null,Now(),'" + serverip + "','" + sql_ckey + "','" + sql_ip + "','" + sql_computerid + "');" );
			query_accesslog.Execute();
			return;
		}

		// Function from file: client procs.dm
		public void set_client_age_from_db(  ) {
			string sql_ckey = null;
			DBQuery query = null;

			
			if ( GlobalFuncs.IsGuestKey( this.key ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			sql_ckey = GlobalFuncs.sanitizeSQL( this.ckey );
			query = GlobalVars.dbcon.NewQuery( "SELECT id, datediff(Now(),firstseen) as age FROM " + GlobalFuncs.format_table_name( "player" ) + " WHERE ckey = '" + sql_ckey + "'" );

			if ( !query.Execute() ) {
				return;
			}

			while (query.NextRow()) {
				this.player_age = String13.ParseNumber( query.item[2] );
				return;
			}
			this.player_age = -1;
			return;
		}

		// Function from file: client procs.dm
		public bool handle_spam_prevention( dynamic message = null, double? mute_type = null ) {
			
			if ( GlobalVars.config.automute_on && !( this.holder != null ) && this.last_message == message ) {
				this.last_message_count++;

				if ( this.last_message_count >= 10 ) {
					this.WriteMsg( "<span class='danger'>You have exceeded the spam filter limit for identical messages. An auto-mute was applied.</span>" );
					GlobalFuncs.cmd_admin_mute( this, mute_type, true );
					return true;
				}

				if ( this.last_message_count >= 5 ) {
					this.WriteMsg( "<span class='danger'>You are nearing the spam filter limit for identical messages.</span>" );
					return false;
				}
			} else {
				this.last_message = message;
				this.last_message_count = 0;
				return false;
			}
			return false;
		}

		// Function from file: client procs.dm
		public bool is_content_unlocked(  ) {
			
			if ( !Lang13.Bool( this.prefs.unlock_content ) ) {
				this.WriteMsg( "Become a BYOND member to access member-perks and features, as well as support the engine that makes this game possible. Only 10 bucks for 3 months! <a href='http://www.byond.com/membership'>Click Here to find out more</a>." );
				return false;
			}
			return true;
		}

		// Function from file: SDQL_2.dm
		[VerbInfo( group: "Debug" )]
		[VerbArg( 1, InputType.StrMultiline )]
		public void SDQL2_query( string query_text = null ) {
			ByTable query_list = null;
			ByTable querys = null;
			string query_log = null;
			ByTable query_tree = null;
			ByTable from_objs = null;
			ByTable select_types = null;
			ByTable objs = null;
			dynamic type = null;
			string _char = null;
			dynamic from = null;
			ByTable objs_temp = null;
			Game_Data d = null;
			dynamic call_list = null;
			dynamic args_list = null;
			Game_Data d2 = null;
			dynamic v = null;
			Game_Data d3 = null;
			string text = null;
			Game_Data t = null;
			Game_Data a = null;
			dynamic set_list = null;
			Game_Data d4 = null;
			ByTable vals = null;
			dynamic v2 = null;
			dynamic v3 = null;
			dynamic v4 = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				GlobalFuncs.message_admins( "<span class='danger'>ERROR: Non-admin " + GlobalFuncs.key_name( Task13.User, Task13.User.client ) + " attempted to execute a SDQL query!</span>" );
				GlobalFuncs.log_admin( "Non-admin " + Task13.User.ckey + "(" + Task13.User + ") attempted to execute a SDQL query!" );
			}

			if ( !Lang13.Bool( query_text ) || Lang13.Length( query_text ) < 1 ) {
				return;
			}
			query_list = GlobalFuncs.SDQL2_tokenize( query_text );

			if ( !( query_list != null ) || query_list.len < 1 ) {
				return;
			}
			querys = GlobalFuncs.SDQL_parse( query_list );

			if ( !( querys != null ) || querys.len < 1 ) {
				return;
			}
			query_log = "executed SDQL query: \"" + query_text + "\".";
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " " + query_log );
			query_log = "" + Task13.User.ckey + "(" + Task13.User + ") " + query_log;
			GlobalFuncs.log_game( query_log );
			GlobalFuncs.notice( query_log );

			foreach (dynamic _n in Lang13.Enumerate( querys, typeof(ByTable) )) {
				query_tree = _n;
				
				from_objs = new ByTable();
				select_types = new ByTable();

				dynamic _a = query_tree[1]; // Was a switch-case, sorry for the mess.
				if ( _a=="explain" ) {
					GlobalFuncs.SDQL_testout( query_tree["explain"] );
					return;
				} else if ( _a=="call" ) {
					
					if ( query_tree.Contains( "on" ) ) {
						select_types = query_tree["on"];
					} else {
						return;
					}
				} else if ( _a=="select" || _a=="delete" || _a=="update" ) {
					select_types = query_tree[query_tree[1]];
				}
				from_objs = GlobalFuncs.SDQL_from_objs( query_tree["from"] );
				objs = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( select_types )) {
					type = _c;
					
					_char = String13.SubStr( type, 1, 2 );

					if ( _char == "/" || _char == "*" ) {
						
						foreach (dynamic _b in Lang13.Enumerate( from_objs )) {
							from = _b;
							
							objs.Add( GlobalFuncs.SDQL_get_all( type, from ) );
						}
					} else if ( _char == "'" || _char == "\"" ) {
						objs.Add( Lang13.FindObj( String13.SubStr( type, 2, Lang13.Length( type ) ) ) );
					}
				}

				if ( query_tree.Contains( "where" ) ) {
					objs_temp = objs;
					objs = new ByTable();

					foreach (dynamic _d in Lang13.Enumerate( objs_temp, typeof(Game_Data) )) {
						d = _d;
						

						if ( Lang13.Bool( GlobalFuncs.SDQL_expression( d, query_tree["where"] ) ) ) {
							objs.Add( d );
						}
					}
				}

				dynamic _m = query_tree[1]; // Was a switch-case, sorry for the mess.
				if ( _m=="call" ) {
					call_list = query_tree["call"];
					args_list = query_tree["args"];

					foreach (dynamic _f in Lang13.Enumerate( objs, typeof(Game_Data) )) {
						d2 = _f;
						

						foreach (dynamic _e in Lang13.Enumerate( call_list )) {
							v = _e;
							
							GlobalFuncs.SDQL_callproc( d2, v, args_list );
						}
					}
				} else if ( _m=="delete" ) {
					
					foreach (dynamic _g in Lang13.Enumerate( objs, typeof(Game_Data) )) {
						d3 = _g;
						
						GlobalFuncs.qdel( d3 );
					}
				} else if ( _m=="select" ) {
					text = "";

					foreach (dynamic _h in Lang13.Enumerate( objs, typeof(Game_Data) )) {
						t = _h;
						
						text += new Txt( "<A HREF='?_src_=vars;Vars=" ).Ref( t ).str( "'>" ).Ref( t ).str( "</A>" ).ToString();

						if ( t is Ent_Static ) {
							a = t;

							if ( Lang13.Bool( ((dynamic)a).x ) ) {
								text += ": " + t + " at (" + ((dynamic)a).x + ", " + ((dynamic)a).y + ", " + ((dynamic)a).z + ")<br>";
							} else if ( Lang13.Bool( ((dynamic)a).loc ) && Lang13.Bool( ((dynamic)a).loc.x ) ) {
								text += ": " + t + " in " + ((dynamic)a).loc + " at (" + ((dynamic)a).loc.x + ", " + ((dynamic)a).loc.y + ", " + ((dynamic)a).loc.z + ")<br>";
							} else {
								text += ": " + t + "<br>";
							}
						} else {
							text += ": " + t + "<br>";
						}
					}
					Interface13.Browse( Task13.User, text, "window=SDQL-result" );
				} else if ( _m=="update" ) {
					
					if ( query_tree.Contains( "set" ) ) {
						set_list = query_tree["set"];

						foreach (dynamic _l in Lang13.Enumerate( objs, typeof(Game_Data) )) {
							d4 = _l;
							
							vals = new ByTable();

							foreach (dynamic _i in Lang13.Enumerate( set_list )) {
								v2 = _i;
								

								if ( d4.vars.Contains( v2 ) ) {
									vals.Add( v2 );
									vals[v2] = GlobalFuncs.SDQL_expression( d4, set_list[v2] );
								}
							}

							if ( d4 is Tile ) {
								
								foreach (dynamic _j in Lang13.Enumerate( vals )) {
									v3 = _j;
									

									if ( v3 == "x" || v3 == "y" || v3 == "z" ) {
										continue;
									}
									d4.vars[v3] = vals[v3];
								}
							} else {
								
								foreach (dynamic _k in Lang13.Enumerate( vals )) {
									v4 = _k;
									
									d4.vars[v4] = vals[v4];
								}
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: tripAI.dm
		[VerbInfo( name: "Create AI Triumvirate", group: "Fun" )]
		public void triple_ai(  ) {
			Job job = null;

			
			if ( GlobalVars.ticker.current_state > 1 ) {
				Task13.User.WriteMsg( "This option is currently only usable during pregame. This may change at a later date." );
				return;
			}
			job = GlobalVars.SSjob.GetJob( "AI" );

			if ( !( job != null ) ) {
				Task13.User.WriteMsg( "Unable to locate the AI job" );
				return;
			}

			if ( GlobalVars.ticker.triai ) {
				GlobalVars.ticker.triai = false;
				Task13.User.WriteMsg( "Only one AI will be spawned at round start." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has toggled off triple AIs at round start.</span>" );
			} else {
				GlobalVars.ticker.triai = true;
				Task13.User.WriteMsg( "There will be an AI Triumvirate at round start." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has toggled on triple AIs at round start.</span>" );
			}
			return;
		}

		// Function from file: reestablish_db_connection.dm
		[VerbInfo( name: "Reestablish DB Connection", group: "Special Verbs" )]
		public void reestablish_db_connection(  ) {
			string reconnect = null;

			
			if ( !GlobalVars.config.sql_enabled ) {
				Task13.User.WriteMsg( "<span class='adminnotice'>The Database is not enabled!</span>" );
				return;
			}

			if ( GlobalVars.dbcon != null && GlobalVars.dbcon.IsConnected() ) {
				
				if ( !GlobalFuncs.check_rights( 32, false ) ) {
					Interface13.Alert( "The database is already connected! (Only those with +debug can force a reconnection)", "The database is already connected!" );
					return;
				}
				reconnect = Interface13.Alert( "The database is already connected! If you *KNOW* that this is incorrect, you can force a reconnection", "The database is already connected!", "Force Reconnect", "Cancel" );

				if ( reconnect != "Force Reconnect" ) {
					return;
				}
				GlobalVars.dbcon.Disconnect();
				GlobalVars.failed_db_connections = 0;
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has forced the database to disconnect" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has <b>forced</b> the database to disconnect!" );
				GlobalFuncs.feedback_add_details( "admin_verb", "FRDB" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " is attempting to re-established the DB Connection" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " is attempting to re-established the DB Connection" );
			GlobalFuncs.feedback_add_details( "admin_verb", "RDB" );
			GlobalVars.failed_db_connections = 0;

			if ( !GlobalFuncs.establish_db_connection() ) {
				GlobalFuncs.message_admins( "Database connection failed: " + GlobalVars.dbcon.ErrorMsg() );
			} else {
				GlobalFuncs.message_admins( "Database connection re-established" );
			}
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Toggle AntagHUD", desc: "Toggles the Admin AntagHUD", group: "Admin" )]
		public void toggle_antag_hud(  ) {
			AtomHud A = null;
			bool adding_hud = false;
			AtomHud H = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			A = GlobalVars.huds[2];
			adding_hud = ( A.hudusers.Contains( Task13.User ) ? false : true );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.huds, typeof(AtomHud) )) {
				H = _a;
				

				if ( H is AtomHud_Antag || H is AtomHud_Data_Human_Security_Advanced ) {
					if ( adding_hud ) H.add_hud_to( Task13.User ); else H.remove_hud_from( Task13.User );
				}
			}
			Task13.User.WriteMsg( "You toggled your admin antag HUD " + ( adding_hud ? "ON" : "OFF" ) + "." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled their admin antag HUD " + ( adding_hud ? "ON" : "OFF" ) + "." );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled their admin antag HUD " + ( adding_hud ? "ON" : "OFF" ) + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAH" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Create Custom Outfit", group: "Debug" )]
		public void create_outfits(  ) {
			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}
			this.holder.create_outfit();
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Remove Latejoin Spawns", group: "Debug" )]
		public void reset_latejoin_spawns(  ) {
			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}
			GlobalVars.latejoin.Cut();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed latejoin spawnpoints." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " removed latejoin spawnpoints." );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Toggle Nuke", group: "Fun" )]
		[VerbArg( 1, InputType.Obj, VerbArgFilter.FromGlobalVar, "nuke_list" )]
		public void toggle_nuke( Obj_Machinery_Nuclearbomb N = null ) {
			dynamic newtime = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}

			if ( !( N.timing != 0 ) ) {
				newtime = Interface13.Input( Task13.User, "Set activation timer.", "Activate Nuke", "" + N.timeleft, null, InputType.Num );

				if ( !Lang13.Bool( newtime ) ) {
					return;
				}
				N.timeleft = newtime;
			}
			N.set_safety();
			N.set_active();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " " + ( N.timing != 0 ? "activated" : "deactivated" ) + " a nuke at (" + N.x + "," + N.y + "," + N.z + ")." );
			GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( Task13.User ) ).str( " (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( Task13.User ).str( "'>FLW</A>) " ).item( ( N.timing != 0 ? "activated" : "deactivated" ) ).str( " a nuke at (" ).item( N.x ).str( "," ).item( N.y ).str( "," ).item( N.z ).str( " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( N.x ).str( ";Y=" ).item( N.y ).str( ";Z=" ).item( N.z ).str( "'>JMP</a>)." ).ToString() );
			GlobalFuncs.feedback_add_details( "admin_verb", "TN" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Set Security Level", desc: "Changes the security level. Announcement only, i.e. setting to Delta won't activate nuke", group: "Special Verbs" )]
		public void admin_change_sec_level(  ) {
			dynamic level = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			level = Interface13.Input( "Select security level to change to", "Set Security Level", null, null, new ByTable(new object [] { "green", "blue", "red", "delta" }), InputType.Null | InputType.Any );

			if ( Lang13.Bool( level ) ) {
				GlobalFuncs.set_security_level( level );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " changed the security level to " + level );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " changed the security level to " + level );
				GlobalFuncs.feedback_add_details( "admin_verb", "CSL" );
			}
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Toggle random events on/off", desc: "Toggles random events such as meteors, black holes, blob (but not space dust) on/off", group: "Server" )]
		public void toggle_random_events(  ) {
			
			if ( !GlobalVars.config.allow_random_events ) {
				GlobalVars.config.allow_random_events = true;
				Task13.User.WriteMsg( "Random events enabled" );
				GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has enabled random events." );
			} else {
				GlobalVars.config.allow_random_events = false;
				Task13.User.WriteMsg( "Random events disabled" );
				GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has disabled random events." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TRE" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Make Everyone Random", desc: "Make everyone have a random appearance. You can only use this before rounds!", group: "Fun" )]
		public void everyone_random(  ) {
			string notifyplayers = null;

			
			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Task13.User.WriteMsg( "Nope you can't do this, the game's already started. This only works before rounds!" );
				return;
			}

			if ( GlobalVars.config.force_random_names ) {
				GlobalVars.config.force_random_names = false;
				GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has disabled \"Everyone is Special\" mode." );
				Task13.User.WriteMsg( "Disabled." );
				return;
			}
			notifyplayers = Interface13.Alert( this, "Do you want to notify the players?", "Options", "Yes", "No", "Cancel" );

			if ( notifyplayers == "Cancel" ) {
				return;
			}
			GlobalFuncs.log_admin( "Admin " + GlobalFuncs.key_name( this ) + " has forced the players to have random appearances." );
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has forced the players to have random appearances." );

			if ( notifyplayers == "Yes" ) {
				Game13.WriteMsg( "<span class='adminnotice'>Admin " + Task13.User.key + " has forced the players to have completely random identities!</span>" );
			}
			Task13.User.WriteMsg( "<i>Remember: you can always disable the randomness by using the verb again, assuming the round hasn't started yet</i>." );
			GlobalVars.config.force_random_names = true;
			GlobalFuncs.feedback_add_details( "admin_verb", "MER" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Attack Log", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_attack_log( dynamic M = null ) {
			dynamic t = null;

			Task13.User.WriteMsg( "<span class='boldannounce'>Attack Log for " + this.mob + "</span>" );

			foreach (dynamic _a in Lang13.Enumerate( M.attack_log )) {
				t = _a;
				
				Task13.User.WriteMsg( t );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "ATTL" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Cancel Shuttle", group: "Admin" )]
		public void admin_cancel_shuttle(  ) {
			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}

			if ( Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" ) != "Yes" ) {
				return;
			}

			if ( GlobalVars.SSshuttle.emergency.mode >= 3 ) {
				return;
			}
			GlobalVars.SSshuttle.emergency.cancel();
			GlobalFuncs.feedback_add_details( "admin_verb", "CCSHUT" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " admin-recalled the emergency shuttle." );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " admin-recalled the emergency shuttle.</span>" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Call Shuttle", group: "Admin" )]
		public void admin_call_shuttle(  ) {
			string confirm = null;

			
			if ( GlobalVars.SSshuttle.emergency.mode >= 3 ) {
				return;
			}

			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			confirm = Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}
			GlobalVars.SSshuttle.emergency.request();
			GlobalFuncs.feedback_add_details( "admin_verb", "CSHUT" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " admin-called the emergency shuttle." );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " admin-called the emergency shuttle.</span>" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Change View Range", desc: "switches between 1x and custom views", group: "Special Verbs" )]
		public void toggle_view_range(  ) {
			
			if ( this.view == Game13.view ) {
				this.view = Convert.ToInt32( Interface13.Input( "Select view range:", "FUCK YE", 7, null, new ByTable(new object [] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 128 }), InputType.Any ) );
			} else {
				this.view = Convert.ToInt32( Game13.view );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " changed their view range to " + this.view + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "CVRA" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Check Contents", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_check_contents( Mob M = null ) {
			ByTable L = null;
			dynamic t = null;

			L = M.get_contents();

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				t = _a;
				
				Task13.User.WriteMsg( "" + t );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "CC" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Gibself", group: "Fun" )]
		public void cmd_admin_gib_self(  ) {
			string confirm = null;

			confirm = Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" );

			if ( confirm == "Yes" ) {
				
				if ( this.mob is Mob_Dead_Observer ) {
					return;
				} else {
					this.mob.gib();
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used gibself." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " used gibself.</span>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "GIBS" );
			}
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Gib", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_gib( dynamic M = null ) {
			string confirm = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			confirm = Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}

			if ( !Lang13.Bool( M ) ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has gibbed " + GlobalFuncs.key_name( M ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has gibbed " + GlobalFuncs.key_name_admin( M ) );

			if ( M is Mob_Dead_Observer ) {
				GlobalFuncs.gibs( M.loc, M.viruses );
				return;
			}
			((Mob)M).gib();
			GlobalFuncs.feedback_add_details( "admin_verb", "GIB" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "EM Pulse", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public void cmd_admin_emp( dynamic O = null ) {
			dynamic heavy = null;
			dynamic light = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			heavy = Interface13.Input( "Range of heavy pulse.", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( heavy == null ) {
				return;
			}
			light = Interface13.Input( "Range of light pulse.", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( light == null ) {
				return;
			}

			if ( Lang13.Bool( heavy ) || Lang13.Bool( light ) ) {
				GlobalFuncs.empulse( O, heavy, light );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created an EM Pulse (" + heavy + "," + light + ") at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created an EM PUlse (" + heavy + "," + light + ") at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.feedback_add_details( "admin_verb", "EMP" );
				return;
			} else {
				return;
			}
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Explosion", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public void cmd_admin_explosion( dynamic O = null ) {
			dynamic devastation = null;
			dynamic heavy = null;
			dynamic light = null;
			dynamic flash = null;
			dynamic flames = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			devastation = Interface13.Input( "Range of total devastation. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( devastation == null ) {
				return;
			}
			heavy = Interface13.Input( "Range of heavy impact. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( heavy == null ) {
				return;
			}
			light = Interface13.Input( "Range of light impact. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( light == null ) {
				return;
			}
			flash = Interface13.Input( "Range of flash. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( flash == null ) {
				return;
			}
			flames = Interface13.Input( "Range of flames. -1 to none", "Input", null, null, null, InputType.Num | InputType.Null );

			if ( flames == null ) {
				return;
			}

			if ( devastation != -1 || heavy != -1 || light != -1 || flash != -1 || flames != -1 ) {
				
				if ( Convert.ToDouble( devastation ) > 20 || Convert.ToDouble( heavy ) > 20 || Convert.ToDouble( light ) > 20 || Convert.ToDouble( flames ) > 20 ) {
					
					if ( Interface13.Alert( this, "Are you sure you want to do this? It will laaag.", "Confirmation", "Yes", "No" ) == "No" ) {
						return;
					}
				}
				GlobalFuncs.explosion( O, devastation, heavy, light, flash, null, null, flames );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created an explosion (" + devastation + "," + heavy + "," + light + "," + flames + ") at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created an explosion (" + devastation + "," + heavy + "," + light + "," + flames + ") at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.feedback_add_details( "admin_verb", "EXPL" );
				return;
			} else {
				return;
			}
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Manage Job Slots", group: "Admin" )]
		public void cmd_admin_list_open_jobs(  ) {
			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			this.holder.manage_free_slots();
			GlobalFuncs.feedback_add_details( "admin_verb", "MFS" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Delete", group: "Admin" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public void cmd_admin_delete( dynamic O = null ) {
			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}

			if ( Interface13.Alert( this, "Are you sure you want to delete:\n" + O + "\nat (" + O.x + ", " + O.y + ", " + O.z + ")?", "Confirmation", "Yes", "No" ) == "Yes" ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted " + O + " at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " deleted " + O + " at (" + O.x + "," + O.y + "," + O.z + ")" );
				GlobalFuncs.feedback_add_details( "admin_verb", "DEL" );
				GlobalFuncs.qdel( O );
			}
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Create Command Report", group: "Special Verbs" )]
		public void cmd_admin_create_centcom_report(  ) {
			dynamic input = null;
			string confirm = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			input = Interface13.Input( Task13.User, "Please enter anything you want. Anything. Serious.", "What?", "", null, InputType.Null | InputType.StrMultiline );

			if ( !Lang13.Bool( input ) ) {
				return;
			}
			confirm = Interface13.Alert( this, "Do you want to announce the contents of the report to the crew?", "Announce", "Yes", "No" );

			if ( confirm == "Yes" ) {
				GlobalFuncs.priority_announce( input, null, "sound/AI/commandreport.ogg" );
			} else {
				GlobalFuncs.priority_announce( "A report has been downloaded and printed out at all communications consoles.", "Incoming Classified Message", "sound/AI/commandreport.ogg" );
			}
			GlobalFuncs.print_command_report( input, "" + ( confirm == "Yes" ? "" : "Classified " ) + GlobalFuncs.command_name() + " Update" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has created a command report: " + input );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has created a command report" );
			GlobalFuncs.feedback_add_details( "admin_verb", "CCR" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Rejuvenate", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_rejuvenate( Mob_Living M = null ) {
			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}

			if ( !( this.mob != null ) ) {
				return;
			}

			if ( !( M is Mob_Living ) ) {
				Interface13.Alert( "Cannot revive a ghost" );
				return;
			}
			M.revive();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " healed / revived " + GlobalFuncs.key_name( M ) );
			GlobalFuncs.message_admins( "<span class='danger'>Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " healed / revived " + GlobalFuncs.key_name_admin( M ) + "!</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "REJU" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Add Custom AI law", group: "Fun" )]
		public void cmd_admin_add_freeform_ai_law(  ) {
			dynamic input = null;
			string show_log = null;
			int? announce_ion_laws = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			input = Interface13.Input( Task13.User, "Please enter anything you want the AI to do. Anything. Serious.", "What?", "", null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( input ) ) {
				return;
			}
			GlobalFuncs.log_admin( "Admin " + GlobalFuncs.key_name( Task13.User ) + " has added a new AI law - " + input );
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has added a new AI law - " + input );
			show_log = Interface13.Alert( this, "Show ion message?", "Message", "Yes", "No" );
			announce_ion_laws = ( show_log == "Yes" ? 1 : -1 );
			new RoundEvent_IonStorm( 0, announce_ion_laws, input );
			GlobalFuncs.feedback_add_details( "admin_verb", "IONC" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Respawn Character", desc: "Respawn a person that has been gibbed/dusted/killed. They must be a ghost for this to work and preferably should not have a body to go back into.", group: "Special Verbs" )]
		public dynamic respawn_character(  ) {
			string input = null;
			Mob_Dead_Observer G_found = null;
			Mob_Dead_Observer G = null;
			dynamic T = null;
			Mob_Living_Carbon_Alien_Humanoid new_xeno = null;
			Mob_Living_Carbon_Monkey new_monkey = null;
			dynamic new_character = null;
			Data_Record record_found = null;
			string id = null;
			Preferences A = null;
			string admin = null;
			string player_key = null;
			dynamic synd_spawn = null;
			ByTable ninja_spawn = null;
			Obj_Effect_Landmark L = null;
			dynamic ninja_spawn_here = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return null;
			}
			input = String13.CKey( Interface13.Input( this, "Please specify which key will be respawned.", "Key", "", null, InputType.Any ) );

			if ( !Lang13.Bool( input ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
				G = _a;
				

				if ( G.ckey == input ) {
					G_found = G;
					break;
				}
			}

			if ( !( G_found != null ) ) {
				Task13.User.WriteMsg( "<font color='red'>There is no active key like that in the game or the person is not currently a ghost.</font>" );
				return null;
			}

			if ( G_found.mind != null && !G_found.mind.active ) {
				
				if ( G_found.mind.assigned_role == "Alien" ) {
					
					if ( Interface13.Alert( "This character appears to have been an alien. Would you like to respawn them as such?", null, "Yes", "No" ) == "Yes" ) {
						T = null;

						if ( GlobalVars.xeno_spawn.len != 0 ) {
							T = Rand13.PickFromTable( GlobalVars.xeno_spawn );
						} else {
							T = Rand13.PickFromTable( GlobalVars.latejoin );
						}
						new_xeno = null;

						switch ((string)( G_found.mind.special_role )) {
							case "Hunter":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Hunter( T );
								break;
							case "Sentinel":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Sentinel( T );
								break;
							case "Drone":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Drone( T );
								break;
							case "Praetorian":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Royal_Praetorian( T );
								break;
							case "Queen":
								new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Royal_Queen( T );
								break;
							default:
								GlobalFuncs.create_xeno( G_found.ckey );
								return null;
								break;
						}
						G_found.mind.transfer_to( new_xeno );
						new_xeno.key = G_found.key;
						new_xeno.WriteMsg( "You have been fully respawned. Enjoy the game." );
						GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has respawned " + new_xeno.key + " as a filthy xeno.</span>" );
						return null;
					}
				} else if ( String13.FindIgnoreCase( G_found.real_name, "monkey", 1, 0 ) != 0 ) {
					
					if ( Interface13.Alert( "This character appears to have been a monkey. Would you like to respawn them as such?", null, "Yes", "No" ) == "Yes" ) {
						new_monkey = new Mob_Living_Carbon_Monkey( Rand13.PickFromTable( GlobalVars.latejoin ) );
						G_found.mind.transfer_to( new_monkey );
						new_monkey.key = G_found.key;
						new_monkey.WriteMsg( "You have been fully respawned. Enjoy the game." );
						GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has respawned " + new_monkey.key + " as a filthy xeno.</span>" );
						return null;
					}
				}
			}
			new_character = new Mob_Living_Carbon_Human( Rand13.PickFromTable( GlobalVars.latejoin ) );
			record_found = null;

			if ( G_found.mind != null && !G_found.mind.active ) {
				id = Num13.Md5( "" + G_found.real_name + G_found.mind.assigned_role );
				record_found = GlobalFuncs.find_record( "id", id, GlobalVars.data_core.locked );
			}

			if ( record_found != null ) {
				new_character.real_name = record_found.fields["name"];
				new_character.gender = record_found.fields["sex"];
				new_character.age = record_found.fields["age"];
				((Mob_Living_Carbon_Human)new_character).hardset_dna( record_found.fields["identity"], record_found.fields["enzymes"], record_found.fields["name"], record_found.fields["blood_type"], record_found.fields["species"], record_found.fields["features"] );
			} else {
				A = new Preferences();
				A.copy_to( new_character );
				A.real_name = G_found.real_name;
				((Dna)new_character.dna).update_dna_identity();
			}
			new_character.name = new_character.real_name;

			if ( G_found.mind != null && !G_found.mind.active ) {
				G_found.mind.transfer_to( new_character );
				new_character.mind.special_verbs = new ByTable();
			} else {
				((Mob)new_character).mind_initialize();
			}

			if ( !Lang13.Bool( new_character.mind.assigned_role ) ) {
				new_character.mind.assigned_role = "Assistant";
			}
			new_character.key = G_found.key;
			admin = GlobalFuncs.key_name_admin( this );
			player_key = G_found.key;

			switch ((string)( new_character.mind.special_role )) {
				case "traitor":
					GlobalVars.SSjob.EquipRank( new_character, new_character.mind.assigned_role, true );
					((GameMode)GlobalVars.ticker.mode).equip_traitor( new_character );
					break;
				case "Wizard":
					new_character.loc = Rand13.PickFromTable( GlobalVars.wizardstart );
					((GameMode)GlobalVars.ticker.mode).equip_wizard( new_character );
					break;
				case "Syndicate":
					synd_spawn = Lang13.FindObj( "landmark*Syndicate-Spawn" );

					if ( Lang13.Bool( synd_spawn ) ) {
						new_character.loc = GlobalFuncs.get_turf( synd_spawn );
					}
					Lang13.Call( typeof(GameMode).GetMethod( "equip_syndicate" ), new_character );
					break;
				case "Space Ninja":
					ninja_spawn = new ByTable();

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
						L = _c;
						

						if ( L.name == "carpspawn" ) {
							ninja_spawn.Add( L );
						}
					}
					((Mob_Living_Carbon_Human)new_character).equip_space_ninja();
					new_character.v_internal = new_character.s_store;
					((Mob_Living_Carbon)new_character).update_internals_hud_icon( true );

					if ( ninja_spawn.len != 0 ) {
						ninja_spawn_here = Rand13.PickFromTable( ninja_spawn );
						new_character.loc = ninja_spawn_here.loc;
					}
					break;
				default:
					
					dynamic _d = new_character.mind.assigned_role; // Was a switch-case, sorry for the mess.
					if ( _d=="Cyborg" ) {
						new_character = ((Mob_Living_Carbon_Human)new_character).Robotize();

						if ( new_character.mind.special_role == "traitor" ) {
							((GameMode)GlobalVars.ticker.mode).add_law_zero( new_character );
						}
					} else if ( _d=="AI" ) {
						new_character = ((Mob)new_character).AIize();

						if ( new_character.mind.special_role == "traitor" ) {
							((GameMode)GlobalVars.ticker.mode).add_law_zero( new_character );
						}
					} else {
						GlobalVars.SSjob.EquipRank( new_character, new_character.mind.assigned_role, true );
					}
					break;
			}

			if ( !( new_character is Mob_Living_Silicon ) ) {
				
				if ( !( record_found != null ) && new_character.mind.assigned_role != new_character.mind.special_role ) {
					
					if ( Interface13.Alert( new_character, "Warning: No data core entry detected. Would you like to announce the arrival of this character by adding them to various databases, such as medical records?", null, "No", "Yes" ) == "Yes" ) {
						GlobalVars.data_core.manifest_inject( new_character );
					}

					if ( Interface13.Alert( new_character, "Would you like an active AI to announce this character?", null, "No", "Yes" ) == "Yes" ) {
						Lang13.Call( typeof(Mob_NewPlayer).GetMethod( "AnnounceArrival" ), new_character, new_character.mind.assigned_role );
					}
				}
			}
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + admin + " has respawned " + player_key + " as " + new_character.real_name + ".</span>" );
			new_character.WriteMsg( "You have been fully respawned. Enjoy the game." );
			GlobalFuncs.feedback_add_details( "admin_verb", "RSPCH" );
			return new_character;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Add Random AI Law", group: "Fun" )]
		public void cmd_admin_add_random_ai_law(  ) {
			string confirm = null;
			string show_log = null;
			int? announce_ion_laws = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			confirm = Interface13.Alert( this, "You sure?", "Confirm", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has added a random AI law." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has added a random AI law." );
			show_log = Interface13.Alert( this, "Show ion message?", "Message", "Yes", "No" );
			announce_ion_laws = ( show_log == "Yes" ? 1 : -1 );
			new RoundEvent_IonStorm( 0, announce_ion_laws );
			GlobalFuncs.feedback_add_details( "admin_verb", "ION" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Godmode", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_godmode( dynamic M = null ) {
			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			M.status_flags ^= 4096;
			Task13.User.WriteMsg( "<span class='adminnotice'>Toggled " + ( ( M.status_flags & 4096 ) != 0 ? "ON" : "OFF" ) + "</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has toggled " + GlobalFuncs.key_name( M ) + "'s nodamage to " + ( ( M.status_flags & 4096 ) != 0 ? "On" : "Off" ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has toggled " + GlobalFuncs.key_name_admin( M ) + "'s nodamage to " + ( ( M.status_flags & 4096 ) != 0 ? "On" : "Off" ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "GOD" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Local Narrate", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public void cmd_admin_local_narrate( dynamic A = null ) {
			dynamic range = null;
			dynamic msg = null;
			dynamic M = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}

			if ( !Lang13.Bool( A ) ) {
				return;
			}
			range = Interface13.Input( "Range:", "Narrate to mobs within how many tiles:", 7, null, null, InputType.Num );

			if ( !Lang13.Bool( range ) ) {
				return;
			}
			msg = Interface13.Input( "Message:", "Enter the text you wish to appear to everyone within view:", null, null, null, InputType.Str );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( A, range ) )) {
				M = _a;
				
				M.WriteMsg( msg );
			}
			GlobalFuncs.log_admin( "LocalNarrate: " + GlobalFuncs.key_name( Task13.User ) + " at (" + GlobalFuncs.get_area( A ) + "): " + msg );
			GlobalFuncs.message_admins( "<span class='adminnotice'><b> LocalNarrate: " + GlobalFuncs.key_name_admin( Task13.User ) + " at (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + A.x + ";Y=" + A.y + ";Z=" + A.z + "'>" + GlobalFuncs.get_area( A ) + "</a>):</b> " + msg + "<BR></span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "LN" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Direct Narrate", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob )]
		public void cmd_admin_direct_narrate( dynamic M = null ) {
			dynamic msg = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}

			if ( !Lang13.Bool( M ) ) {
				M = Interface13.Input( "Direct narrate to who?", "Active Players", null, null, GlobalVars.player_list, InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( M ) ) {
				return;
			}
			msg = Interface13.Input( "Message:", "Enter the text you wish to appear to your target:", null, null, null, InputType.Str );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			M.WriteMsg( msg );
			GlobalFuncs.log_admin( "DirectNarrate: " + GlobalFuncs.key_name( Task13.User ) + " to (" + M.name + "/" + M.key + "): " + msg );
			GlobalFuncs.message_admins( "<span class='adminnotice'><b> DirectNarrate: " + GlobalFuncs.key_name( Task13.User ) + " to (" + M.name + "/" + M.key + "):</b> " + msg + "<BR></span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "DIRN" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Global Narrate", group: "Special Verbs" )]
		public void cmd_admin_world_narrate(  ) {
			dynamic msg = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			msg = Interface13.Input( "Message:", "Enter the text you wish to appear to everyone:", null, null, null, InputType.Str );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			Game13.WriteMsg( "" + msg );
			GlobalFuncs.log_admin( "GlobalNarrate: " + GlobalFuncs.key_name( Task13.User ) + " : " + msg );
			GlobalFuncs.message_admins( "<span class='adminnotice'><b> GlobalNarrate: " + GlobalFuncs.key_name_admin( Task13.User ) + " :</b> " + msg + "<BR></span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "GLN" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Subtle Message", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_subtle_message( dynamic M = null ) {
			dynamic msg = null;

			
			if ( !( M is Mob ) ) {
				return;
			}

			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has started answering " + GlobalFuncs.key_name( M.key, 0, 0 ) + "'s prayer." );
			msg = Interface13.Input( "Message:", "Subtle PM to " + M.key, null, null, null, InputType.Str );

			if ( !Lang13.Bool( msg ) ) {
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " decided not to answer " + GlobalFuncs.key_name( M.key, 0, 0 ) + "'s prayer" );
				return;
			}

			if ( Task13.User != null ) {
				
				if ( Task13.User.client != null ) {
					
					if ( Task13.User.client.holder != null ) {
						M.WriteMsg( "<i>You hear a voice in your head... <b>" + msg + "</i></b>" );
					}
				}
			}
			GlobalFuncs.log_admin( "SubtlePM: " + GlobalFuncs.key_name( Task13.User ) + " -> " + GlobalFuncs.key_name( M ) + " : " + msg );
			GlobalFuncs.message_admins( "<span class='adminnotice'><b> SubtleMessage: " + GlobalFuncs.key_name_admin( Task13.User ) + " -> " + GlobalFuncs.key_name_admin( M ) + " :</b> " + msg + "</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "SMS" );
			return;
		}

		// Function from file: randomverbs.dm
		[VerbInfo( name: "Drop Everything" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_drop_everything( dynamic M = null ) {
			string confirm = null;
			Obj_Item W = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			confirm = Interface13.Alert( this, "Make " + M + " drop everything?", "Message", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( M, typeof(Obj_Item) )) {
				W = _a;
				

				if ( !((Mob)M).unEquip( W ) ) {
					GlobalFuncs.qdel( W );
					((Mob)M).regenerate_icons();
				}
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " drop everything!" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + GlobalFuncs.key_name_admin( M ) + " drop everything!" );
			GlobalFuncs.feedback_add_details( "admin_verb", "DEVR" );
			return;
		}

		// Function from file: playsound.dm
		[VerbInfo( name: "Stop All Playing Sounds", group: "Debug" )]
		public void stop_sounds(  ) {
			dynamic M = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " stopped all currently playing sounds." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " stopped all currently playing sounds." );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					M.WriteMsg( new Sound( null ) );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SS" );
			return;
		}

		// Function from file: playsound.dm
		[VerbInfo( name: "Set Round End Sound", group: "Fun" )]
		[VerbArg( 1, InputType.Sound )]
		public void set_round_end_sound( dynamic S = null ) {
			
			if ( !GlobalFuncs.check_rights( 2048 ) ) {
				return;
			}

			if ( GlobalVars.ticker != null ) {
				GlobalVars.ticker.round_end_sound = File13.Cache( S );
			} else {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " set the round end sound to " + S );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " set the round end sound to " + S );
			GlobalFuncs.feedback_add_details( "admin_verb", "SRES" );
			return;
		}

		// Function from file: playsound.dm
		[VerbInfo( name: "Play Local Sound", group: "Fun" )]
		[VerbArg( 1, InputType.Sound )]
		public void play_local_sound( dynamic S = null ) {
			
			if ( !GlobalFuncs.check_rights( 2048 ) ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " played a local sound " + S );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " played a local sound " + S );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this.mob ), S, 50, 0, 0 );
			GlobalFuncs.feedback_add_details( "admin_verb", "PLS" );
			return;
		}

		// Function from file: playsound.dm
		[VerbInfo( name: "Play Global Sound", group: "Fun" )]
		[VerbArg( 1, InputType.Sound )]
		public void play_sound( dynamic S = null ) {
			dynamic M = null;

			
			if ( !GlobalFuncs.check_rights( 2048 ) ) {
				return;
			}
			GlobalVars.admin_sound = new Sound( S, false, true, 777 );
			GlobalVars.admin_sound.priority = 250;
			GlobalVars.admin_sound.status = 20;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " played sound " + S );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " played sound " + S );

			if ( Lang13.Bool( GlobalVars.SSevent.holidays ) && Lang13.Bool( GlobalVars.SSevent.holidays["April Fool's Day"] ) ) {
				GlobalVars.admin_sound.frequency = Lang13.DoubleNullable( Rand13.Pick(new object [] { 0.5, 061, 0.8, 0.85, 081, 0.41, 1.1, 1.2, 131, 1.6, 2, 2.5 }) );
				this.WriteMsg( "You feel the Honkmother messing with your song..." );
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( Lang13.Bool( M.client.prefs.toggles & 2 ) ) {
					M.WriteMsg( GlobalVars.admin_sound );
				}
			}
			GlobalVars.admin_sound.frequency = 1;
			GlobalVars.admin_sound.wait = false;
			GlobalFuncs.feedback_add_details( "admin_verb", "PGS" );
			return;
		}

		// Function from file: panicbunker.dm
		[VerbInfo( name: "Toggle Panic Bunker", group: "Server" )]
		public void panicbunker(  ) {
			
			if ( !GlobalVars.config.sql_enabled ) {
				Task13.User.WriteMsg( "<span class='adminnotice'>The Database is not enabled!</span>" );
				return;
			}
			GlobalVars.config.panic_bunker = !GlobalVars.config.panic_bunker;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has toggled the Panic Bunker, it is now " + ( GlobalVars.config.panic_bunker ? "on" : "off" ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has toggled the Panic Bunker, it is now " + ( GlobalVars.config.panic_bunker ? "enabled" : "disabled" ) + "." );

			if ( GlobalVars.config.panic_bunker && ( !( GlobalVars.dbcon != null ) || !GlobalVars.dbcon.IsConnected() ) ) {
				GlobalFuncs.message_admins( "The Database is not connected! Panic bunker will not work until the connection is reestablished." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "PANIC" );
			return;
		}

		// Function from file: onlyone.dm
		public void only_one(  ) {
			Mob_Living_Carbon_Human H = null;
			Objective_Steal steal_objective = null;
			Objective_Hijack hijack_objective = null;
			int obj_count = 0;
			Objective OBJ = null;
			Obj_Item I = null;
			Obj_Item_Weapon_Card_Id W = null;

			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "The game hasn't started yet!" );
				return;
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				H = _c;
				

				if ( H.stat == 2 || !( H.client != null ) ) {
					continue;
				}

				if ( GlobalFuncs.is_special_character( H ) != 0 ) {
					continue;
				}
				GlobalVars.ticker.mode.traitors.Add( H.mind );
				H.mind.special_role = "traitor";
				steal_objective = new Objective_Steal();
				steal_objective.owner = H.mind;
				steal_objective.set_target( new ObjectiveItem_Steal_Nukedisc() );
				H.mind.objectives.Add( steal_objective );
				hijack_objective = new Objective_Hijack();
				hijack_objective.owner = H.mind;
				H.mind.objectives.Add( hijack_objective );
				H.WriteMsg( "<B>You are the traitor.</B>" );
				obj_count = 1;

				foreach (dynamic _a in Lang13.Enumerate( H.mind.objectives, typeof(Objective) )) {
					OBJ = _a;
					
					H.WriteMsg( "<B>Objective #" + obj_count + "</B>: " + OBJ.explanation_text );
					obj_count++;
				}

				foreach (dynamic _b in Lang13.Enumerate( H, typeof(Obj_Item) )) {
					I = _b;
					

					if ( I is Obj_Item_Weapon_Implant ) {
						continue;
					}
					GlobalFuncs.qdel( I );
				}
				H.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Kilt( H ), 14 );
				H.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Heads_Captain( H ), 8 );
				H.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Beret( H ), 11 );
				H.equip_to_slot_or_del( new Obj_Item_Weapon_Claymore( H ), 4 );
				H.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Combat( H ), 12 );
				H.equip_to_slot_or_del( new Obj_Item_Weapon_Pinpointer( H.loc ), 15 );
				W = new Obj_Item_Weapon_Card_Id( H );
				W.icon_state = "centcom";
				W.access = GlobalFuncs.get_all_accesses();
				W.access += GlobalFuncs.get_all_centcom_access();
				W.assignment = "Highlander";
				W.registered_name = H.real_name;
				W.update_label( H.real_name );
				H.equip_to_slot_or_del( W, 7 );
			}
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " used THERE CAN BE ONLY ONE!</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used there can be only one." );
			return;
		}

		// Function from file: one_click_antag.dm
		[VerbInfo( name: "Create Antagonist", desc: "Auto-create an antagonist of your choice", group: "Admin" )]
		public void one_click_antag(  ) {
			
			if ( this.holder != null ) {
				this.holder.one_click_antag();
			}
			return;
		}

		// Function from file: modifyvariables.dm
		public void modify_variables( dynamic O = null, string param_var_name = null, bool? autodetect_class = null ) {
			autodetect_class = autodetect_class ?? false;

			dynamic p = null;
			dynamic _class = null;
			dynamic variable = null;
			dynamic var_value = null;
			dynamic names = null;
			dynamic V = null;
			dynamic dir = null;
			string __default = null;
			string original_name = null;
			dynamic var_new = null;
			string process_vars = null;
			ByTable varsvars = null;
			dynamic V2 = null;
			dynamic var_new2 = null;
			dynamic var_new3 = null;
			dynamic var_new4 = null;
			dynamic var_new5 = null;
			dynamic var_new6 = null;
			dynamic var_new7 = null;
			dynamic var_new8 = null;
			dynamic var_new9 = null;

			
			if ( !GlobalFuncs.check_rights( 1024 ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.forbidden_varedit_object_types )) {
				p = _a;
				

				if ( Lang13.Bool( p.IsInstanceOfType( O ) ) ) {
					Task13.User.WriteMsg( "<span class='danger'>It is forbidden to edit this object's variables.</span>" );
					return;
				}
			}

			if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( O ) ) && ( param_var_name == "ckey" || param_var_name == "key" ) ) {
				Task13.User.WriteMsg( "<span class='danger'>You cannot edit ckeys on client objects.</span>" );
				return;
			}
			_class = null;
			variable = null;
			var_value = null;

			if ( Lang13.Bool( param_var_name ) ) {
				
				if ( O.vars.Contains( !Lang13.Bool( param_var_name ) ) ) {
					this.WriteMsg( "A variable with this name (" + param_var_name + ") doesn't exist in this atom (" + O + ")" );
					return;
				}

				if ( GlobalVars.VVlocked.Contains( param_var_name ) ) {
					
					if ( !GlobalFuncs.check_rights( 32 ) ) {
						return;
					}
				}

				if ( GlobalVars.VVckey_edit.Contains( param_var_name ) ) {
					
					if ( !GlobalFuncs.check_rights( 4128 ) ) {
						return;
					}
				}

				if ( GlobalVars.VVicon_edit_lock.Contains( param_var_name ) ) {
					
					if ( !GlobalFuncs.check_rights( 40 ) ) {
						return;
					}
				}
				variable = param_var_name;
				var_value = O.vars[variable];

				if ( autodetect_class == true ) {
					
					if ( var_value == null ) {
						Task13.User.WriteMsg( "Unable to determine variable type." );
						_class = null;
						autodetect_class = null;
					} else if ( Lang13.Bool( Lang13.IsNumber( var_value ) ) ) {
						Task13.User.WriteMsg( "Variable appears to be <b>NUM</b>." );
						_class = "num";
						this.dir = 1;
					} else if ( var_value is string ) {
						Task13.User.WriteMsg( "Variable appears to be <b>TEXT</b>." );
						_class = "text";
					} else if ( Lang13.Bool( Lang13.IsLocation( var_value ) ) ) {
						Task13.User.WriteMsg( "Variable appears to be <b>REFERENCE</b>." );
						_class = "reference";
					} else if ( var_value is Icon ) {
						Task13.User.WriteMsg( "Variable appears to be <b>ICON</b>." );
						var_value = new Txt().icon( var_value ).ToString();
						_class = "icon";
					} else if ( var_value is Ent_Static || var_value is Game_Data ) {
						Task13.User.WriteMsg( "Variable appears to be <b>TYPE</b>." );
						_class = "type";
					} else if ( var_value is ByTable ) {
						Task13.User.WriteMsg( "Variable appears to be <b>LIST</b>." );
						_class = "list";
					} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( var_value ) ) ) {
						Task13.User.WriteMsg( "Variable appears to be <b>CLIENT</b>." );
						_class = "cancel";
					} else {
						Task13.User.WriteMsg( "Variable appears to be <b>FILE</b>." );
						_class = "file";
					}
				}
			} else {
				names = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( O.vars )) {
					V = _b;
					
					names += V;
				}
				names = GlobalFuncs.sortList( names );
				variable = Interface13.Input( "Which var?", "Var", null, null, names, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( variable ) ) {
					return;
				}
				var_value = O.vars[variable];

				if ( GlobalVars.VVlocked.Contains( variable ) ) {
					
					if ( !GlobalFuncs.check_rights( 32 ) ) {
						return;
					}
				}

				if ( GlobalVars.VVckey_edit.Contains( variable ) ) {
					
					if ( !GlobalFuncs.check_rights( 4128 ) ) {
						return;
					}
				}

				if ( GlobalVars.VVicon_edit_lock.Contains( variable ) ) {
					
					if ( !GlobalFuncs.check_rights( 40 ) ) {
						return;
					}
				}
			}

			if ( !( autodetect_class == true ) ) {
				dir = null;
				__default = null;

				if ( var_value == null ) {
					Task13.User.WriteMsg( "Unable to determine variable type." );
				} else if ( Lang13.Bool( Lang13.IsNumber( var_value ) ) ) {
					Task13.User.WriteMsg( "Variable appears to be <b>NUM</b>." );
					__default = "num";
					dir = 1;
				} else if ( var_value is string ) {
					Task13.User.WriteMsg( "Variable appears to be <b>TEXT</b>." );
					__default = "text";
				} else if ( Lang13.Bool( Lang13.IsLocation( var_value ) ) ) {
					Task13.User.WriteMsg( "Variable appears to be <b>REFERENCE</b>." );
					__default = "reference";
				} else if ( var_value is Icon ) {
					Task13.User.WriteMsg( "Variable appears to be <b>ICON</b>." );
					var_value = new Txt().icon( var_value ).ToString();
					__default = "icon";
				} else if ( var_value is Ent_Static || var_value is Game_Data ) {
					Task13.User.WriteMsg( "Variable appears to be <b>TYPE</b>." );
					__default = "type";
				} else if ( var_value is ByTable ) {
					Task13.User.WriteMsg( "Variable appears to be <b>LIST</b>." );
					__default = "list";
				} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( var_value ) ) ) {
					Task13.User.WriteMsg( "Variable appears to be <b>CLIENT</b>." );
					__default = "cancel";
				} else {
					Task13.User.WriteMsg( "Variable appears to be <b>FILE</b>." );
					__default = "file";
				}
				Task13.User.WriteMsg( "Variable contains: " + var_value );

				if ( Lang13.Bool( dir ) ) {
					
					switch ((int)( var_value )) {
						case 1:
							dir = "NORTH";
							break;
						case 2:
							dir = "SOUTH";
							break;
						case 4:
							dir = "EAST";
							break;
						case 8:
							dir = "WEST";
							break;
						case 5:
							dir = "NORTHEAST";
							break;
						case 6:
							dir = "SOUTHEAST";
							break;
						case 9:
							dir = "NORTHWEST";
							break;
						case 10:
							dir = "SOUTHWEST";
							break;
						default:
							dir = null;
							break;
					}

					if ( Lang13.Bool( dir ) ) {
						Task13.User.WriteMsg( "If a direction, direction is: " + dir );
					}
				}

				if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
					_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { 
						"text", 
						"num", 
						"type", 
						"reference", 
						"mob reference", 
						"icon", 
						"file", 
						"list", 
						"edit referenced object", 
						"restore to default", 
						"marked datum (" + this.holder.marked_datum.type + ")"
					 }), InputType.Null | InputType.Any );
				} else {
					_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "list", "edit referenced object", "restore to default" }), InputType.Null | InputType.Any );
				}

				if ( !Lang13.Bool( _class ) ) {
					return;
				}
			}
			original_name = null;

			if ( !( O is Ent_Static ) ) {
				original_name = new Txt().Ref( O ).str( " (" ).item( O ).str( ")" ).ToString();
			} else {
				original_name = O.name;
			}

			if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
				_class = "marked datum";
			}

			dynamic _e = _class; // Was a switch-case, sorry for the mess.
			if ( _e=="list" ) {
				this.mod_list( O.vars[variable], O, original_name, variable );
				return;
			} else if ( _e=="restore to default" ) {
				O.vars[variable] = Lang13.Initial( O, variable );
			} else if ( _e=="edit referenced object" ) {
				this.modify_variables( O.vars[variable] ); return;
			} else if ( _e=="text" ) {
				var_new = Interface13.Input( "Enter new text:", "Text", O.vars[variable], null, null, InputType.Null | InputType.StrMultiline );

				if ( var_new == null ) {
					return;
				}

				if ( String13.FindIgnoreCase( var_new, "[", 1, 0 ) != 0 ) {
					process_vars = Interface13.Alert( Task13.User, "[] detected in string, process as variables?", "Process Variables?", "Yes", "No" );

					if ( process_vars == "Yes" ) {
						varsvars = GlobalFuncs.string2listofvars( var_new, O );

						foreach (dynamic _d in Lang13.Enumerate( varsvars )) {
							V2 = _d;
							
							var_new = GlobalFuncs.replacetext( var_new, "[" + V2 + "]", "" + O.vars[V2] );
						}
					}
				}
				O.vars[variable] = var_new;
			} else if ( _e=="num" ) {
				
				if ( variable == "luminosity" ) {
					var_new2 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

					if ( var_new2 == null ) {
						return;
					}
					((Ent_Static)O).SetLuminosity( var_new2 );
				} else if ( variable == "stat" ) {
					var_new3 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

					if ( var_new3 == null ) {
						return;
					}

					if ( Convert.ToInt32( O.vars[variable] ) == 2 && Convert.ToDouble( var_new3 ) < 2 ) {
						GlobalVars.dead_mob_list.Remove( O );
						GlobalVars.living_mob_list.Add( O );
					}

					if ( Convert.ToDouble( O.vars[variable] ) < 2 && var_new3 == 2 ) {
						GlobalVars.living_mob_list.Remove( O );
						GlobalVars.dead_mob_list.Add( O );
					}
					O.vars[variable] = var_new3;
				} else {
					var_new4 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

					if ( var_new4 == null ) {
						return;
					}
					O.vars[variable] = var_new4;
				}
			} else if ( _e=="type" ) {
				var_new5 = Interface13.Input( "Enter type:", "Type", O.vars[variable], null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Null | InputType.Any );

				if ( var_new5 == null ) {
					return;
				}
				O.vars[variable] = var_new5;
			} else if ( _e=="reference" ) {
				var_new6 = Interface13.Input( "Select reference:", "Reference", O.vars[variable], null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Null | InputType.Zone );

				if ( var_new6 == null ) {
					return;
				}
				O.vars[variable] = var_new6;
			} else if ( _e=="mob reference" ) {
				var_new7 = Interface13.Input( "Select reference:", "Reference", O.vars[variable], null, Game13.contents, InputType.Mob | InputType.Null );

				if ( var_new7 == null ) {
					return;
				}
				O.vars[variable] = var_new7;
			} else if ( _e=="file" ) {
				var_new8 = Interface13.Input( "Pick file:", "File", O.vars[variable], null, null, InputType.File | InputType.Null );

				if ( var_new8 == null ) {
					return;
				}
				O.vars[variable] = var_new8;
			} else if ( _e=="icon" ) {
				var_new9 = Interface13.Input( "Pick icon:", "Icon", O.vars[variable], null, null, InputType.Null | InputType.Icon );

				if ( var_new9 == null ) {
					return;
				}
				O.vars[variable] = var_new9;
			} else if ( _e=="marked datum" ) {
				O.vars[variable] = this.holder.marked_datum;
			}
			((Game_Data)O).on_varedit( variable );
			Game13.log.WriteMsg( "### VarEdit by " + this + ": " + O.type + " " + variable + "=" + String13.HtmlEncode( "" + O.vars[variable] ) );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " modified " + original_name + "'s " + variable + " to " + O.vars[variable] );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " modified " + original_name + "'s " + variable + " to " + O.vars[variable] );
			return;
		}

		// Function from file: modifyvariables.dm
		public void mod_list( dynamic L = null, dynamic O = null, string original_name = null, dynamic objectvar = null ) {
			string confirm = null;
			bool assoc = false;
			dynamic a = null;
			dynamic names = null;
			dynamic variable = null;
			dynamic assoc_key = null;
			string __default = null;
			dynamic dir = null;
			dynamic _class = null;
			dynamic original_var = null;
			dynamic new_var = null;
			string process_vars = null;
			ByTable varsvars = null;
			dynamic V = null;

			
			if ( !GlobalFuncs.check_rights( 1024 ) ) {
				return;
			}

			if ( !( L is ByTable ) ) {
				this.WriteMsg( "Not a List." );
			}

			if ( L.len > 1000 ) {
				confirm = Interface13.Alert( this, "The list you're trying to edit is very long, continuing may crash the server.", "Warning", "Continue", "Abort" );

				if ( confirm != "Continue" ) {
					return;
				}
			}
			assoc = false;

			if ( L.len > 0 ) {
				a = L[1];

				if ( a is string && L[a] != null ) {
					assoc = true;
					Task13.User.WriteMsg( "List appears to be associative." );
				}
			}
			names = null;

			if ( !assoc ) {
				names = GlobalFuncs.sortList( L );
			}

			if ( assoc ) {
				variable = Interface13.Input( "Which var?", "Var", null, null, L + "(ADD VAR)", InputType.Null | InputType.Any );
			} else {
				variable = Interface13.Input( "Which var?", "Var", null, null, names + "(ADD VAR)", InputType.Null | InputType.Any );
			}

			if ( variable == "(ADD VAR)" ) {
				this.mod_list_add( L, O, original_name, objectvar );
				return;
			}

			if ( assoc ) {
				assoc_key = variable;
				variable = L[assoc_key];
			}

			if ( !assoc && !Lang13.Bool( variable ) || assoc && !Lang13.Bool( assoc_key ) ) {
				return;
			}

			if ( GlobalVars.VVlocked.Contains( variable ) ) {
				
				if ( !GlobalFuncs.check_rights( 32 ) ) {
					return;
				}
			}

			if ( GlobalVars.VVckey_edit.Contains( variable ) ) {
				
				if ( !GlobalFuncs.check_rights( 4128 ) ) {
					return;
				}
			}

			if ( GlobalVars.VVicon_edit_lock.Contains( variable ) ) {
				
				if ( !GlobalFuncs.check_rights( 40 ) ) {
					return;
				}
			}

			if ( variable == null ) {
				Task13.User.WriteMsg( "Unable to determine variable type." );
			} else if ( Lang13.Bool( Lang13.IsNumber( variable ) ) ) {
				Task13.User.WriteMsg( "Variable appears to be <b>NUM</b>." );
				__default = "num";
				dir = 1;
			} else if ( variable is string ) {
				Task13.User.WriteMsg( "Variable appears to be <b>TEXT</b>." );
				__default = "text";
			} else if ( Lang13.Bool( Lang13.IsLocation( variable ) ) ) {
				Task13.User.WriteMsg( "Variable appears to be <b>REFERENCE</b>." );
				__default = "reference";
			} else if ( variable is Icon ) {
				Task13.User.WriteMsg( "Variable appears to be <b>ICON</b>." );
				variable = new Txt().icon( variable ).ToString();
				__default = "icon";
			} else if ( variable is Ent_Static || variable is Game_Data ) {
				Task13.User.WriteMsg( "Variable appears to be <b>TYPE</b>." );
				__default = "type";
			} else if ( variable is ByTable ) {
				Task13.User.WriteMsg( "Variable appears to be <b>LIST</b>." );
				__default = "list";
			} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( variable ) ) ) {
				Task13.User.WriteMsg( "Variable appears to be <b>CLIENT</b>." );
				__default = "cancel";
			} else {
				Task13.User.WriteMsg( "Variable appears to be <b>FILE</b>." );
				__default = "file";
			}
			Task13.User.WriteMsg( "Variable contains: " + variable );

			if ( Lang13.Bool( dir ) ) {
				
				dynamic _a = variable; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					dir = "NORTH";
				} else if ( _a==2 ) {
					dir = "SOUTH";
				} else if ( _a==4 ) {
					dir = "EAST";
				} else if ( _a==8 ) {
					dir = "WEST";
				} else if ( _a==5 ) {
					dir = "NORTHEAST";
				} else if ( _a==6 ) {
					dir = "SOUTHEAST";
				} else if ( _a==9 ) {
					dir = "NORTHWEST";
				} else if ( _a==10 ) {
					dir = "SOUTHWEST";
				} else {
					dir = null;
				}

				if ( Lang13.Bool( dir ) ) {
					Task13.User.WriteMsg( "If a direction, direction is: " + dir );
				}
			}
			_class = "text";

			if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { 
					"text", 
					"num", 
					"type", 
					"reference", 
					"mob reference", 
					"icon", 
					"file", 
					"list", 
					"edit referenced object", 
					"restore to default", 
					"marked datum (" + this.holder.marked_datum.type + ")", 
					"DELETE FROM LIST"
				 }), InputType.Null | InputType.Any );
			} else {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "list", "edit referenced object", "restore to default", "DELETE FROM LIST" }), InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( _class ) ) {
				return;
			}

			if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
				_class = "marked datum";
			}
			original_var = null;

			if ( assoc ) {
				original_var = L[assoc_key];
			} else {
				original_var = L[L.Find( variable )];
			}
			new_var = null;

			dynamic _c = _class; // Was a switch-case, sorry for the mess.
			if ( _c=="list" ) {
				this.mod_list( variable, O, original_name, objectvar );
			} else if ( _c=="restore to default" ) {
				new_var = Lang13.InitialBroken( variable );

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			} else if ( _c=="edit referenced object" ) {
				this.modify_variables( variable );
			} else if ( _c=="DELETE FROM LIST" ) {
				Game13.log.WriteMsg( "### ListVarEdit by " + this + ": " + O.type + " " + objectvar + ": REMOVED=" + String13.HtmlEncode( "" + variable ) );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " modified " + original_name + "'s " + objectvar + ": REMOVED=" + variable );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " modified " + original_name + "'s " + objectvar + ": REMOVED=" + variable );
				L -= variable;
				((Game_Data)O).on_varedit( objectvar );
				return;
			} else if ( _c=="text" ) {
				new_var = Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.StrMultiline );

				if ( String13.FindIgnoreCase( new_var, "[", 1, 0 ) != 0 ) {
					process_vars = Interface13.Alert( Task13.User, "[] detected in string, process as variables?", "Process Variables?", "Yes", "No" );

					if ( process_vars == "Yes" ) {
						varsvars = GlobalFuncs.string2listofvars( new_var, O );

						foreach (dynamic _b in Lang13.Enumerate( varsvars )) {
							V = _b;
							
							new_var = GlobalFuncs.replacetext( new_var, "[" + V + "]", "" + O.vars[V] );
						}
					}
				}

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			} else if ( _c=="num" ) {
				new_var = Interface13.Input( "Enter new number:", "Num", null, null, null, InputType.Num );

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			} else if ( _c=="type" ) {
				new_var = Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Any );

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			} else if ( _c=="reference" ) {
				new_var = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone );

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			} else if ( _c=="mob reference" ) {
				new_var = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob );

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			} else if ( _c=="file" ) {
				new_var = Interface13.Input( "Pick file:", "File", null, null, null, InputType.File );

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			} else if ( _c=="icon" ) {
				new_var = Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Icon );

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			} else if ( _c=="marked datum" ) {
				new_var = this.holder.marked_datum;

				if ( assoc ) {
					L[assoc_key] = new_var;
				} else {
					L[L.Find( variable )] = new_var;
				}
			}
			((Game_Data)O).on_varedit( objectvar );
			Game13.log.WriteMsg( "### ListVarEdit by " + this + ": " + O.type + " " + objectvar + ": " + original_var + "=" + new_var );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " modified " + original_name + "'s " + objectvar + ": " + original_var + "=" + new_var );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " modified " + original_name + "'s varlist " + objectvar + ": " + original_var + "=" + new_var );
			return;
		}

		// Function from file: modifyvariables.dm
		public void mod_list_add( dynamic L = null, dynamic O = null, string original_name = null, dynamic objectvar = null ) {
			dynamic _class = null;
			dynamic var_value = null;
			string process_vars = null;
			ByTable varsvars = null;
			dynamic V = null;

			_class = "text";

			if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { 
					"text", 
					"num", 
					"type", 
					"reference", 
					"mob reference", 
					"icon", 
					"file", 
					"list", 
					"edit referenced object", 
					"restore to default", 
					"marked datum (" + this.holder.marked_datum.type + ")"
				 }), InputType.Null | InputType.Any );
			} else {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "list", "edit referenced object", "restore to default" }), InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( _class ) ) {
				return;
			}

			if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
				_class = "marked datum";
			}
			var_value = null;

			dynamic _a = _class; // Was a switch-case, sorry for the mess.
			if ( _a=="text" ) {
				var_value = Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.StrMultiline );
			} else if ( _a=="num" ) {
				var_value = Interface13.Input( "Enter new number:", "Num", null, null, null, InputType.Num );
			} else if ( _a=="type" ) {
				var_value = Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Any );
			} else if ( _a=="reference" ) {
				var_value = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone );
			} else if ( _a=="mob reference" ) {
				var_value = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob );
			} else if ( _a=="file" ) {
				var_value = Interface13.Input( "Pick file:", "File", null, null, null, InputType.File );
			} else if ( _a=="icon" ) {
				var_value = Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Icon );
			} else if ( _a=="marked datum" ) {
				var_value = this.holder.marked_datum;
			}

			if ( !Lang13.Bool( var_value ) ) {
				return;
			}

			if ( var_value is string ) {
				
				if ( String13.FindIgnoreCase( var_value, "[", 1, 0 ) != 0 ) {
					process_vars = Interface13.Alert( Task13.User, "[] detected in string, process as variables?", "Process Variables?", "Yes", "No" );

					if ( process_vars == "Yes" ) {
						varsvars = GlobalFuncs.string2listofvars( var_value, O );

						foreach (dynamic _b in Lang13.Enumerate( varsvars )) {
							V = _b;
							
							var_value = GlobalFuncs.replacetext( var_value, "[" + V + "]", "" + O.vars[V] );
						}
					}
				}
			}
			L += var_value;

			switch ((string)( Interface13.Alert( "Would you like to associate a var with the list entry?", null, "Yes", "No" ) )) {
				case "Yes":
					L[var_value] = this.mod_list_add_ass( O );
					break;
			}
			((Game_Data)O).on_varedit( objectvar );
			Game13.log.WriteMsg( "### ListVarEdit by " + this + ": " + O.type + " " + objectvar + ": ADDED=" + var_value );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " modified " + original_name + "'s " + objectvar + ": ADDED=" + var_value );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " modified " + original_name + "'s " + objectvar + ": ADDED=" + var_value );
			return;
		}

		// Function from file: modifyvariables.dm
		public dynamic mod_list_add_ass( dynamic O = null ) {
			dynamic _class = null;
			dynamic var_value = null;
			string process_vars = null;
			ByTable varsvars = null;
			dynamic V = null;

			_class = "text";

			if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { 
					"text", 
					"num", 
					"type", 
					"reference", 
					"mob reference", 
					"icon", 
					"file", 
					"list", 
					"edit referenced object", 
					"restore to default", 
					"marked datum (" + this.holder.marked_datum.type + ")"
				 }), InputType.Null | InputType.Any );
			} else {
				_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "list", "edit referenced object", "restore to default" }), InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( _class ) ) {
				return null;
			}

			if ( Lang13.Bool( this.holder.marked_datum ) && _class == "marked datum (" + this.holder.marked_datum.type + ")" ) {
				_class = "marked datum";
			}
			var_value = null;

			dynamic _a = _class; // Was a switch-case, sorry for the mess.
			if ( _a=="text" ) {
				var_value = Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.Null | InputType.StrMultiline );
			} else if ( _a=="num" ) {
				var_value = Interface13.Input( "Enter new number:", "Num", null, null, null, InputType.Num | InputType.Null );
			} else if ( _a=="type" ) {
				var_value = Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Null | InputType.Any );
			} else if ( _a=="reference" ) {
				var_value = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Null | InputType.Zone );
			} else if ( _a=="mob reference" ) {
				var_value = Interface13.Input( "Select reference:", "Reference", null, null, Game13.contents, InputType.Mob | InputType.Null );
			} else if ( _a=="file" ) {
				var_value = Interface13.Input( "Pick file:", "File", null, null, null, InputType.File | InputType.Null );
			} else if ( _a=="icon" ) {
				var_value = Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Null | InputType.Icon );
			} else if ( _a=="marked datum" ) {
				var_value = this.holder.marked_datum;
			}

			if ( !Lang13.Bool( var_value ) ) {
				return null;
			}

			if ( var_value is string ) {
				
				if ( String13.FindIgnoreCase( var_value, "[", 1, 0 ) != 0 ) {
					process_vars = Interface13.Alert( Task13.User, "[] detected in string, process as variables?", "Process Variables?", "Yes", "No" );

					if ( process_vars == "Yes" ) {
						varsvars = GlobalFuncs.string2listofvars( var_value, O );

						foreach (dynamic _b in Lang13.Enumerate( varsvars )) {
							V = _b;
							
							var_value = GlobalFuncs.replacetext( var_value, "[" + V + "]", "" + O.vars[V] );
						}
					}
				}
			}
			return var_value;
		}

		// Function from file: modifyvariables.dm
		[VerbInfo( name: "Edit Ticker Variables", group: "Debug" )]
		public void cmd_modify_ticker_variables(  ) {
			
			if ( GlobalVars.ticker == null ) {
				this.WriteMsg( "Game hasn't started yet." );
			} else {
				this.modify_variables( GlobalVars.ticker );
				GlobalFuncs.feedback_add_details( "admin_verb", "ETV" );
			}
			return;
		}

		// Function from file: massmodvar.dm
		public void massmodify_variables( dynamic O = null, string var_name = null, bool? method = null ) {
			var_name = var_name ?? "";
			method = method ?? false;

			dynamic p = null;
			dynamic names = null;
			dynamic V = null;
			dynamic variable = null;
			string __default = null;
			dynamic var_value = null;
			dynamic dir = null;
			dynamic _class = null;
			string original_name = null;
			dynamic M = null;
			Obj A = null;
			dynamic A2 = null;
			dynamic M2 = null;
			Obj A3 = null;
			dynamic A4 = null;
			dynamic new_value = null;
			dynamic process_vars = null;
			dynamic unique = null;
			dynamic pre_processing = null;
			ByTable varsvars = null;
			dynamic V2 = null;
			dynamic M3 = null;
			dynamic V3 = null;
			Obj A5 = null;
			dynamic V4 = null;
			dynamic A6 = null;
			dynamic V5 = null;
			dynamic M4 = null;
			dynamic V6 = null;
			Obj A7 = null;
			dynamic V7 = null;
			dynamic A8 = null;
			dynamic V8 = null;
			dynamic new_value2 = null;
			dynamic M5 = null;
			Obj A9 = null;
			dynamic A10 = null;
			dynamic M6 = null;
			Obj A11 = null;
			dynamic A12 = null;
			dynamic new_value3 = null;
			dynamic M7 = null;
			Obj A13 = null;
			dynamic A14 = null;
			dynamic M8 = null;
			Obj A15 = null;
			dynamic A16 = null;
			dynamic new_value4 = null;
			dynamic M9 = null;
			Obj A17 = null;
			dynamic A18 = null;
			dynamic M10 = null;
			Obj A19 = null;
			dynamic A20 = null;
			dynamic new_value5 = null;
			dynamic M11 = null;
			Obj A21 = null;
			dynamic A22 = null;
			dynamic M12 = null;
			Obj A23 = null;
			dynamic A24 = null;
			dynamic M13 = null;
			Obj A25 = null;
			dynamic A26 = null;
			dynamic M14 = null;
			Obj A27 = null;
			dynamic A28 = null;

			
			if ( !GlobalFuncs.check_rights( 1024 ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.forbidden_varedit_object_types )) {
				p = _a;
				

				if ( Lang13.Bool( p.IsInstanceOfType( O ) ) ) {
					Task13.User.WriteMsg( "<span class='danger'>It is forbidden to edit this object's variables.</span>" );
					return;
				}
			}
			names = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( O.vars )) {
				V = _b;
				
				names += V;
			}
			names = GlobalFuncs.sortList( names );
			variable = "";

			if ( !Lang13.Bool( var_name ) ) {
				variable = Interface13.Input( "Which var?", "Var", null, null, names, InputType.Null | InputType.Any );
			} else {
				variable = var_name;
			}

			if ( !Lang13.Bool( variable ) ) {
				return;
			}
			__default = null;
			var_value = O.vars[variable];
			dir = null;

			if ( GlobalVars.VVckey_edit.Contains( variable ) ) {
				Task13.User.WriteMsg( "It's forbidden to mass-modify ckeys. I'll crash everyone's client you dummy." );
				return;
			}

			if ( GlobalVars.VVlocked.Contains( variable ) ) {
				
				if ( !GlobalFuncs.check_rights( 32 ) ) {
					return;
				}
			}

			if ( GlobalVars.VVicon_edit_lock.Contains( variable ) ) {
				
				if ( !GlobalFuncs.check_rights( 40 ) ) {
					return;
				}
			}

			if ( var_value == null ) {
				Task13.User.WriteMsg( "Unable to determine variable type." );
			} else if ( Lang13.Bool( Lang13.IsNumber( var_value ) ) ) {
				Task13.User.WriteMsg( "Variable appears to be <b>NUM</b>." );
				__default = "num";
				dir = 1;
			} else if ( var_value is string ) {
				Task13.User.WriteMsg( "Variable appears to be <b>TEXT</b>." );
				__default = "text";
			} else if ( Lang13.Bool( Lang13.IsLocation( var_value ) ) ) {
				Task13.User.WriteMsg( "Variable appears to be <b>REFERENCE</b>." );
				__default = "reference";
			} else if ( var_value is Icon ) {
				Task13.User.WriteMsg( "Variable appears to be <b>ICON</b>." );
				var_value = new Txt().icon( var_value ).ToString();
				__default = "icon";
			} else if ( var_value is Ent_Static || var_value is Game_Data ) {
				Task13.User.WriteMsg( "Variable appears to be <b>TYPE</b>." );
				__default = "type";
			} else if ( var_value is ByTable ) {
				Task13.User.WriteMsg( "Variable appears to be <b>LIST</b>." );
				__default = "list";
			} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( var_value ) ) ) {
				Task13.User.WriteMsg( "Variable appears to be <b>CLIENT</b>." );
				__default = "cancel";
			} else {
				Task13.User.WriteMsg( "Variable appears to be <b>FILE</b>." );
				__default = "file";
			}
			Task13.User.WriteMsg( "Variable contains: " + var_value );

			if ( Lang13.Bool( dir ) ) {
				
				switch ((int)( var_value )) {
					case 1:
						dir = "NORTH";
						break;
					case 2:
						dir = "SOUTH";
						break;
					case 4:
						dir = "EAST";
						break;
					case 8:
						dir = "WEST";
						break;
					case 5:
						dir = "NORTHEAST";
						break;
					case 6:
						dir = "SOUTHEAST";
						break;
					case 9:
						dir = "NORTHWEST";
						break;
					case 10:
						dir = "SOUTHWEST";
						break;
					default:
						dir = null;
						break;
				}

				if ( Lang13.Bool( dir ) ) {
					Task13.User.WriteMsg( "If a direction, direction is: " + dir );
				}
			}
			_class = Interface13.Input( "What kind of variable?", "Variable Type", __default, null, new ByTable(new object [] { "text", "num", "type", "icon", "file", "edit referenced object", "restore to default" }), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( _class ) ) {
				return;
			}
			original_name = null;

			if ( !( O is Ent_Static ) ) {
				original_name = new Txt().Ref( O ).str( " (" ).item( O ).str( ")" ).ToString();
			} else {
				original_name = O.name;
			}

			dynamic _bu = _class; // Was a switch-case, sorry for the mess.
			if ( _bu=="restore to default" ) {
				O.vars[variable] = Lang13.Initial( O, variable );

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.mob_list )) {
							M = _d;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M ) ) ) {
								M.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _e in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A = _e;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A ) ) ) {
								A.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Tile ) {
						
						foreach (dynamic _f in Lang13.Enumerate( typeof(Game13) )) {
							A2 = _f;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A2 ) ) ) {
								A2.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _g in Lang13.Enumerate( GlobalVars.mob_list )) {
						M2 = _g;
						

						if ( M2.type == O.type ) {
							M2.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _h in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A3 = _h;
						

						if ( A3.type == O.type ) {
							A3.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Tile ) {
					
					foreach (dynamic _i in Lang13.Enumerate( typeof(Game13) )) {
						A4 = _i;
						

						if ( A4.type == O.type ) {
							A4.vars[variable] = O.vars[variable];
						}
					}
				}
			} else if ( _bu=="edit referenced object" ) {
				this.massmodify_variables( O.vars[variable] ); return;
			} else if ( _bu=="text" ) {
				new_value = Interface13.Input( "Enter new text:", "Text", O.vars[variable], null, null, InputType.Null | InputType.StrMultiline );

				if ( new_value == null ) {
					return;
				}
				process_vars = 0;
				unique = 0;

				if ( String13.FindIgnoreCase( new_value, "[", 1, 0 ) != 0 ) {
					process_vars = Interface13.Alert( Task13.User, "[] detected in string, process as variables?", "Process Variables?", "Yes", "No" );

					if ( process_vars == "Yes" ) {
						process_vars = 1;
						unique = Interface13.Alert( Task13.User, "Process vars unique to each instance, or same for all?", "Variable Association", "Unique", "Same" );

						if ( unique == "Unique" ) {
							unique = 1;
						} else {
							unique = 0;
						}
					} else {
						process_vars = 0;
					}
				}
				pre_processing = new_value;
				varsvars = new ByTable();

				if ( Lang13.Bool( process_vars ) ) {
					varsvars = GlobalFuncs.string2listofvars( new_value, O );

					if ( varsvars.len != 0 ) {
						
						foreach (dynamic _j in Lang13.Enumerate( varsvars )) {
							V2 = _j;
							
							new_value = GlobalFuncs.replacetext( new_value, "[" + V2 + "]", "" + O.vars[V2] );
						}
					}
				}
				O.vars[variable] = new_value;

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _l in Lang13.Enumerate( GlobalVars.mob_list )) {
							M3 = _l;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M3 ) ) ) {
								new_value = pre_processing;

								if ( Lang13.Bool( process_vars ) ) {
									
									if ( Lang13.Bool( unique ) ) {
										
										foreach (dynamic _k in Lang13.Enumerate( varsvars )) {
											V3 = _k;
											
											new_value = GlobalFuncs.replacetext( new_value, "[" + V3 + "]", "" + M3.vars[V3] );
										}
									} else {
										new_value = O.vars[variable];
									}
								}
								M3.vars[variable] = new_value;
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _n in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A5 = _n;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A5 ) ) ) {
								new_value = pre_processing;

								if ( Lang13.Bool( process_vars ) ) {
									
									if ( Lang13.Bool( unique ) ) {
										
										foreach (dynamic _m in Lang13.Enumerate( varsvars )) {
											V4 = _m;
											
											new_value = GlobalFuncs.replacetext( new_value, "[" + V4 + "]", "" + A5.vars[V4] );
										}
									} else {
										new_value = O.vars[variable];
									}
								}
								A5.vars[variable] = new_value;
							}
						}
					} else if ( O is Tile ) {
						
						foreach (dynamic _p in Lang13.Enumerate( typeof(Game13) )) {
							A6 = _p;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A6 ) ) ) {
								new_value = pre_processing;

								if ( Lang13.Bool( process_vars ) ) {
									
									if ( Lang13.Bool( unique ) ) {
										
										foreach (dynamic _o in Lang13.Enumerate( varsvars )) {
											V5 = _o;
											
											new_value = GlobalFuncs.replacetext( new_value, "[" + V5 + "]", "" + A6.vars[V5] );
										}
									} else {
										new_value = O.vars[variable];
									}
								}
								A6.vars[variable] = new_value;
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _r in Lang13.Enumerate( GlobalVars.mob_list )) {
						M4 = _r;
						

						if ( M4.type == O.type ) {
							new_value = pre_processing;

							if ( Lang13.Bool( process_vars ) ) {
								
								if ( Lang13.Bool( unique ) ) {
									
									foreach (dynamic _q in Lang13.Enumerate( varsvars )) {
										V6 = _q;
										
										new_value = GlobalFuncs.replacetext( new_value, "[" + V6 + "]", "" + M4.vars[V6] );
									}
								} else {
									new_value = O.vars[variable];
								}
							}
							M4.vars[variable] = new_value;
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _t in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A7 = _t;
						

						if ( A7.type == O.type ) {
							new_value = pre_processing;

							if ( Lang13.Bool( process_vars ) ) {
								
								if ( Lang13.Bool( unique ) ) {
									
									foreach (dynamic _s in Lang13.Enumerate( varsvars )) {
										V7 = _s;
										
										new_value = GlobalFuncs.replacetext( new_value, "[" + V7 + "]", "" + A7.vars[V7] );
									}
								} else {
									new_value = O.vars[variable];
								}
							}
							A7.vars[variable] = new_value;
						}
					}
				} else if ( O is Tile ) {
					
					foreach (dynamic _v in Lang13.Enumerate( typeof(Game13) )) {
						A8 = _v;
						

						if ( A8.type == O.type ) {
							new_value = pre_processing;

							if ( Lang13.Bool( process_vars ) ) {
								
								if ( Lang13.Bool( unique ) ) {
									
									foreach (dynamic _u in Lang13.Enumerate( varsvars )) {
										V8 = _u;
										
										new_value = GlobalFuncs.replacetext( new_value, "[" + V8 + "]", "" + A8.vars[V8] );
									}
								} else {
									new_value = O.vars[variable];
								}
							}
							A8.vars[variable] = new_value;
						}
					}
				}
			} else if ( _bu=="num" ) {
				new_value2 = Interface13.Input( "Enter new number:", "Num", O.vars[variable], null, null, InputType.Num | InputType.Null );

				if ( new_value2 == null ) {
					return;
				}

				if ( variable == "luminosity" ) {
					((Ent_Static)O).SetLuminosity( new_value2 );
				} else {
					O.vars[variable] = new_value2;
				}

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _w in Lang13.Enumerate( GlobalVars.mob_list )) {
							M5 = _w;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M5 ) ) ) {
								
								if ( variable == "luminosity" ) {
									((Ent_Static)M5).SetLuminosity( new_value2 );
								} else {
									M5.vars[variable] = O.vars[variable];
								}
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _x in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A9 = _x;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A9 ) ) ) {
								
								if ( variable == "luminosity" ) {
									A9.SetLuminosity( new_value2 );
								} else {
									A9.vars[variable] = O.vars[variable];
								}
							}
						}
					} else if ( O is Tile ) {
						
						foreach (dynamic _y in Lang13.Enumerate( typeof(Game13) )) {
							A10 = _y;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A10 ) ) ) {
								
								if ( variable == "luminosity" ) {
									((Ent_Static)A10).SetLuminosity( new_value2 );
								} else {
									A10.vars[variable] = O.vars[variable];
								}
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _z in Lang13.Enumerate( GlobalVars.mob_list )) {
						M6 = _z;
						

						if ( M6.type == O.type ) {
							
							if ( variable == "luminosity" ) {
								((Ent_Static)M6).SetLuminosity( new_value2 );
							} else {
								M6.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _ba in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A11 = _ba;
						

						if ( A11.type == O.type ) {
							
							if ( variable == "luminosity" ) {
								A11.SetLuminosity( new_value2 );
							} else {
								A11.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Tile ) {
					
					foreach (dynamic _bb in Lang13.Enumerate( typeof(Game13) )) {
						A12 = _bb;
						

						if ( A12.type == O.type ) {
							
							if ( variable == "luminosity" ) {
								((Ent_Static)A12).SetLuminosity( new_value2 );
							} else {
								A12.vars[variable] = O.vars[variable];
							}
						}
					}
				}
			} else if ( _bu=="type" ) {
				new_value3 = null;
				new_value3 = Interface13.Input( "Enter type:", "Type", O.vars[variable], null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Null | InputType.Any );

				if ( new_value3 == null ) {
					return;
				}
				O.vars[variable] = new_value3;

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _bc in Lang13.Enumerate( GlobalVars.mob_list )) {
							M7 = _bc;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M7 ) ) ) {
								M7.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _bd in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A13 = _bd;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A13 ) ) ) {
								A13.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Tile ) {
						
						foreach (dynamic _be in Lang13.Enumerate( typeof(Game13) )) {
							A14 = _be;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A14 ) ) ) {
								A14.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _bf in Lang13.Enumerate( GlobalVars.mob_list )) {
						M8 = _bf;
						

						if ( M8.type == O.type ) {
							M8.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _bg in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A15 = _bg;
						

						if ( A15.type == O.type ) {
							A15.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Tile ) {
					
					foreach (dynamic _bh in Lang13.Enumerate( typeof(Game13) )) {
						A16 = _bh;
						

						if ( A16.type == O.type ) {
							A16.vars[variable] = O.vars[variable];
						}
					}
				}
			} else if ( _bu=="file" ) {
				new_value4 = Interface13.Input( "Pick file:", "File", O.vars[variable], null, null, InputType.File | InputType.Null );

				if ( new_value4 == null ) {
					return;
				}
				O.vars[variable] = new_value4;

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _bi in Lang13.Enumerate( GlobalVars.mob_list )) {
							M9 = _bi;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M9 ) ) ) {
								M9.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O.type is Obj ) {
						
						foreach (dynamic _bj in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A17 = _bj;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A17 ) ) ) {
								A17.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O.type is Tile ) {
						
						foreach (dynamic _bk in Lang13.Enumerate( typeof(Game13) )) {
							A18 = _bk;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A18 ) ) ) {
								A18.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _bl in Lang13.Enumerate( GlobalVars.mob_list )) {
						M10 = _bl;
						

						if ( M10.type == O.type ) {
							M10.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O.type is Obj ) {
					
					foreach (dynamic _bm in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A19 = _bm;
						

						if ( A19.type == O.type ) {
							A19.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O.type is Tile ) {
					
					foreach (dynamic _bn in Lang13.Enumerate( typeof(Game13) )) {
						A20 = _bn;
						

						if ( A20.type == O.type ) {
							A20.vars[variable] = O.vars[variable];
						}
					}
				}
			} else if ( _bu=="icon" ) {
				new_value5 = Interface13.Input( "Pick icon:", "Icon", O.vars[variable], null, null, InputType.Null | InputType.Icon );

				if ( new_value5 == null ) {
					return;
				}
				O.vars[variable] = new_value5;

				if ( method == true ) {
					
					if ( O is Mob ) {
						
						foreach (dynamic _bo in Lang13.Enumerate( GlobalVars.mob_list )) {
							M11 = _bo;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M11 ) ) ) {
								M11.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Obj ) {
						
						foreach (dynamic _bp in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
							A21 = _bp;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A21 ) ) ) {
								A21.vars[variable] = O.vars[variable];
							}
						}
					} else if ( O is Tile ) {
						
						foreach (dynamic _bq in Lang13.Enumerate( typeof(Game13) )) {
							A22 = _bq;
							

							if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A22 ) ) ) {
								A22.vars[variable] = O.vars[variable];
							}
						}
					}
				} else if ( O is Mob ) {
					
					foreach (dynamic _br in Lang13.Enumerate( GlobalVars.mob_list )) {
						M12 = _br;
						

						if ( M12.type == O.type ) {
							M12.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _bs in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A23 = _bs;
						

						if ( A23.type == O.type ) {
							A23.vars[variable] = O.vars[variable];
						}
					}
				} else if ( O is Tile ) {
					
					foreach (dynamic _bt in Lang13.Enumerate( typeof(Game13) )) {
						A24 = _bt;
						

						if ( A24.type == O.type ) {
							A24.vars[variable] = O.vars[variable];
						}
					}
				}
			}

			if ( method == true ) {
				
				if ( O is Mob ) {
					
					foreach (dynamic _bv in Lang13.Enumerate( GlobalVars.mob_list )) {
						M13 = _bv;
						

						if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( M13 ) ) ) {
							((Game_Data)M13).on_varedit( variable );
						}
					}
				} else if ( O is Obj ) {
					
					foreach (dynamic _bw in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
						A25 = _bw;
						

						if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A25 ) ) ) {
							A25.on_varedit( variable );
						}
					}
				} else if ( O is Tile ) {
					
					foreach (dynamic _bx in Lang13.Enumerate( Map13.FetchInBlock( Map13.GetTile( 1, 1, 1 ), Map13.GetTile( Game13.map_size_x, Game13.map_size_y, Game13.map_size_z ) ) )) {
						A26 = _bx;
						

						if ( Lang13.Bool( ((dynamic)O.type).IsInstanceOfType( A26 ) ) ) {
							((Game_Data)A26).on_varedit( variable );
						}
					}
				}
			} else if ( O is Mob ) {
				
				foreach (dynamic _by in Lang13.Enumerate( GlobalVars.mob_list )) {
					M14 = _by;
					

					if ( M14.type == O.type ) {
						((Game_Data)M14).on_varedit( variable );
					}
				}
			} else if ( O is Obj ) {
				
				foreach (dynamic _bz in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
					A27 = _bz;
					

					if ( A27.type == O.type ) {
						A27.on_varedit( variable );
					}
				}
			} else if ( O is Tile ) {
				
				foreach (dynamic _ca in Lang13.Enumerate( typeof(Game13) )) {
					A28 = _ca;
					

					if ( A28.type == O.type ) {
						((Game_Data)A28).on_varedit( variable );
					}
				}
			}
			Game13.log.WriteMsg( "### MassVarEdit by " + this + ": " + O.type + " " + variable + "=" + String13.HtmlEncode( "" + O.vars[variable] ) );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " mass modified " + original_name + "'s " + variable + " to " + O.vars[variable] );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " mass modified " + original_name + "'s " + variable + " to " + O.vars[variable] );
			return;
		}

		// Function from file: massmodvar.dm
		[VerbInfo( name: "Mass Edit Variables", desc: "(target) Edit all instances of a target item's variables", group: "Debug" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public void cmd_mass_modify_object_variables( dynamic A = null, string var_name = null ) {
			bool? method = null;

			method = false;

			if ( !GlobalFuncs.check_rights( 1024 ) ) {
				return;
			}

			if ( Lang13.Bool( A ) && A.type != null ) {
				
				if ( Lang13.Bool( Lang13.GetTypes( A.type ) ) ) {
					
					dynamic _a = Interface13.Input( "Strict object type detection?", null, null, null, new ByTable(new object [] { "Strictly this type", "This type and subtypes", "Cancel" }), InputType.Null | InputType.Any ); // Was a switch-case, sorry for the mess.
					if ( _a=="Strictly this type" ) {
						method = false;
					} else if ( _a=="This type and subtypes" ) {
						method = true;
					} else if ( _a=="Cancel" ) {
						return;
					} else if ( _a==null ) {
						return;
					}
				}
			}
			this.massmodify_variables( A, var_name, method );
			GlobalFuncs.feedback_add_details( "admin_verb", "MEV" );
			return;
		}

		// Function from file: maprotation.dm
		[VerbInfo( name: "Change Map", group: "Server" )]
		public void adminchangemap(  ) {
			ByTable maprotatechoices = null;
			dynamic map = null;
			Votablemap VM = null;
			string mapname = null;
			dynamic chosenmap = null;
			Votablemap VM2 = null;

			maprotatechoices = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.config.maplist )) {
				map = _a;
				
				VM = GlobalVars.config.maplist[map];
				mapname = VM.friendlyname;

				if ( VM == GlobalVars.config.defaultmap ) {
					mapname += " (Default)";
				}

				if ( ( VM.minusers ??0) > 0 || ( VM.maxusers ??0) > 0 ) {
					mapname += " [";

					if ( ( VM.minusers ??0) > 0 ) {
						mapname += "" + VM.minusers;
					} else {
						mapname += "0";
					}
					mapname += "-";

					if ( ( VM.maxusers ??0) > 0 ) {
						mapname += "" + VM.maxusers;
					} else {
						mapname += "inf";
					}
					mapname += "]";
				}
				maprotatechoices[mapname] = VM;
			}
			chosenmap = Interface13.Input( "Choose a map to change to", "Change Map", null, null, maprotatechoices, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( chosenmap ) ) {
				return;
			}
			GlobalVars.ticker.maprotatechecked = true;
			VM2 = maprotatechoices[chosenmap];
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " is changing the map to " + VM2.name + "(" + VM2.friendlyname + ")" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " is changing the map to " + VM2.name + "(" + VM2.friendlyname + ")" );

			if ( GlobalFuncs.changemap( VM2 ) == 0 ) {
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has changed the map to " + VM2.name + "(" + VM2.friendlyname + ")" );
			}
			return;
		}

		// Function from file: maprotation.dm
		[VerbInfo( name: "Trigger Random Map Rotation", group: "Server" )]
		public void forcerandomrotate(  ) {
			string rotate = null;

			rotate = Interface13.Alert( "Force a random map rotation to trigger?", "Rotate map?", "Yes", "Cancel" );

			if ( rotate != "Yes" ) {
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " is forcing a random map rotation." );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " is forcing a random map rotation." );
			GlobalVars.ticker.maprotatechecked = true;
			GlobalFuncs.maprotate();
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Disable all communication verbs", group: "Mapping" )]
		public void disable_communication(  ) {
			GlobalVars.say_disabled = !GlobalVars.say_disabled;

			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.message_admins( "" + this.ckey + " used 'Disable all communication verbs', killing all communication methods." );
			} else {
				GlobalFuncs.message_admins( "" + this.ckey + " used 'Disable all communication verbs', restoring all communication methods." );
			}
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Count Objects All", group: "Mapping" )]
		public void count_objects_all(  ) {
			dynamic type_text = null;
			Type type_path = null;
			int count = 0;
			Ent_Static A = null;

			type_text = Interface13.Input( "Which type path?", "", null, null, null, InputType.Str );

			if ( !Lang13.Bool( type_text ) ) {
				return;
			}
			type_path = Lang13.FindClass( type_text );

			if ( !( type_path != null ) ) {
				return;
			}
			count = 0;

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Ent_Static) )) {
				A = _a;
				

				if ( Lang13.Bool( ((dynamic)type_path).IsInstanceOfType( A ) ) ) {
					count++;
				}
			}
			Game13.WriteMsg( "There are " + count + " objects of type " + type_path + " in the game world" );
			GlobalFuncs.feedback_add_details( "admin_verb", "mOBJ" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Count Objects On Level", group: "Mapping" )]
		public void count_objects_on_z_level(  ) {
			dynamic level = null;
			double? num_level = null;
			dynamic type_text = null;
			Type type_path = null;
			int count = 0;
			ByTable atom_list = null;
			Ent_Static A = null;
			Ent_Static B = null;

			level = Interface13.Input( "Which z-level?", "Level?", null, null, null, InputType.Str );

			if ( !Lang13.Bool( level ) ) {
				return;
			}
			num_level = String13.ParseNumber( level );

			if ( !Lang13.Bool( num_level ) ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( num_level ) ) ) {
				return;
			}
			type_text = Interface13.Input( "Which type path?", "Path?", null, null, null, InputType.Str );

			if ( !Lang13.Bool( type_text ) ) {
				return;
			}
			type_path = Lang13.FindClass( type_text );

			if ( !( type_path != null ) ) {
				return;
			}
			count = 0;
			atom_list = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Ent_Static) )) {
				A = _a;
				

				if ( Lang13.Bool( ((dynamic)type_path).IsInstanceOfType( A ) ) ) {
					B = A;

					while (!( B.loc is Tile )) {
						
						if ( B != null && B.loc != null ) {
							B = B.loc;
						} else {
							break;
						}
					}

					if ( B != null ) {
						
						if ( B.z == num_level ) {
							count++;
							atom_list.Add( A );
						}
					}
				}
			}
			Game13.WriteMsg( "There are " + count + " objects of type " + type_path + " on z-level " + num_level );
			GlobalFuncs.feedback_add_details( "admin_verb", "mOBJZ" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Debug verbs - Disable", group: "Debug" )]
		public void disable_debug_verbs(  ) {
			this.verbs.Remove( typeof(Client).GetMethod( "disable_debug_verbs" ), GlobalVars.admin_verbs_debug_mapping );
			this.verbs.Add( typeof(Client).GetMethod( "enable_debug_verbs" ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "mDVD" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Debug verbs - Enable", group: "Debug" )]
		public void enable_debug_verbs(  ) {
			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}
			this.verbs.Remove( typeof(Client).GetMethod( "enable_debug_verbs" ) );
			this.verbs.Add( typeof(Client).GetMethod( "disable_debug_verbs" ), GlobalVars.admin_verbs_debug_mapping );
			GlobalFuncs.feedback_add_details( "admin_verb", "mDVE" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Show roundstart AT list", desc: "Displays a list of active turfs coordinates at roundstart", group: "Mapping" )]
		public void cmd_show_at_list(  ) {
			string dat = null;
			int? i = null;

			dat = "<b>Coordinate list of Active Turfs at Roundstart</b>\n	 <br>Real-time Active Turfs list you can see in Air Subsystem at active_turfs var<br>";
			i = null;
			i = 1;

			while (( i ??0) <= GlobalVars.active_turfs_startlist.len) {
				dat += GlobalVars.active_turfs_startlist[i];
				dat += "<br>";
				i++;
			}
			Interface13.Browse( Task13.User, dat, "window=at_list" );
			GlobalFuncs.feedback_add_details( "admin_verb", "mATL" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Intercom Range Display", group: "Mapping" )]
		public void intercom_view(  ) {
			Obj_Effect_Debugging_Marker M = null;
			Obj_Item_Device_Radio_Intercom I = null;
			dynamic T = null;
			Obj_Effect_Debugging_Marker F = null;

			
			if ( GlobalVars.intercom_range_display_status ) {
				GlobalVars.intercom_range_display_status = false;
			} else {
				GlobalVars.intercom_range_display_status = true;
			}

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Effect_Debugging_Marker) )) {
				M = _a;
				
				GlobalFuncs.qdel( M );
			}

			if ( GlobalVars.intercom_range_display_status ) {
				
				foreach (dynamic _c in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_Radio_Intercom) )) {
					I = _c;
					

					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( I, 7 ) )) {
						T = _b;
						
						F = new Obj_Effect_Debugging_Marker( T );

						if ( !Map13.FetchInView( I.loc, 7 ).Contains( F ) ) {
							GlobalFuncs.qdel( F );
						}
					}
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "mIRD" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Camera Report", group: "Mapping" )]
		public bool sec_camera_report(  ) {
			ByTable CL = null;
			Obj_Machinery_Camera C = null;
			string output = null;
			Obj_Machinery_Camera C1 = null;
			Obj_Machinery_Camera C2 = null;
			Tile T = null;
			bool window_check = false;
			Obj_Structure_Window W = null;

			
			if ( !( GlobalVars.Master != null ) ) {
				Interface13.Alert( Task13.User, "Master_controller not found.", "Sec Camera Report" );
				return false;
			}
			CL = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _a;
				
				CL.Add( C );
			}
			output = "<B>CAMERA ANNOMALITIES REPORT</B><HR>\n<B>The following annomalities have been detected. The ones in red need immediate attention: Some of those in black may be intentional.</B><BR><ul>";

			foreach (dynamic _d in Lang13.Enumerate( CL, typeof(Obj_Machinery_Camera) )) {
				C1 = _d;
				

				foreach (dynamic _b in Lang13.Enumerate( CL, typeof(Obj_Machinery_Camera) )) {
					C2 = _b;
					

					if ( C1 != C2 ) {
						
						if ( C1.c_tag == C2.c_tag ) {
							output += "<li><font color='red'>c_tag match for sec. cameras at [" + C1.x + ", " + C1.y + ", " + C1.z + "] (" + C1.loc.loc + ") and [" + C2.x + ", " + C2.y + ", " + C2.z + "] (" + C2.loc.loc + ") - c_tag is " + C1.c_tag + "</font></li>";
						}

						if ( C1.loc == C2.loc && C1.dir == C2.dir && C1.pixel_x == C2.pixel_x && C1.pixel_y == C2.pixel_y ) {
							output += "<li><font color='red'>FULLY overlapping sec. cameras at [" + C1.x + ", " + C1.y + ", " + C1.z + "] (" + C1.loc.loc + ") Networks: " + C1.network + " and " + C2.network + "</font></li>";
						}

						if ( C1.loc == C2.loc ) {
							output += "<li>overlapping sec. cameras at [" + C1.x + ", " + C1.y + ", " + C1.z + "] (" + C1.loc.loc + ") Networks: " + C1.network + " and " + C2.network + "</font></li>";
						}
					}
				}
				T = Map13.GetStep( C1, Num13.Rotate( C1.dir, 180 ) );

				if ( !( T != null ) || !( T is Tile ) || !T.density ) {
					
					if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Grille), T ) ) ) {
						window_check = false;

						foreach (dynamic _c in Lang13.Enumerate( T, typeof(Obj_Structure_Window) )) {
							W = _c;
							

							if ( new ByTable(new object [] { 5, 6, 9, 10 }).Contains( W.dir == Num13.Rotate( C1.dir, 180 ) || W.dir != 0 ) ) {
								window_check = true;
								break;
							}
						}

						if ( !window_check ) {
							output += "<li><font color='red'>Camera not connected to wall at [" + C1.x + ", " + C1.y + ", " + C1.z + "] (" + C1.loc.loc + ") Network: " + C1.network + "</color></li>";
						}
					}
				}
			}
			output += "</ul>";
			Interface13.Browse( Task13.User, output, "window=airreport;size=1000x500" );
			GlobalFuncs.feedback_add_details( "admin_verb", "mCRP" );
			return false;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "Camera Range Display", group: "Mapping" )]
		public void camera_view(  ) {
			bool on = false;
			dynamic T = null;
			ByTable seen = null;
			Obj_Machinery_Camera C = null;
			dynamic T2 = null;
			dynamic T3 = null;

			on = false;

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) {
				T = _a;
				

				if ( Lang13.Bool( T.maptext ) ) {
					on = true;
				}
				T.maptext = null;
			}

			if ( !on ) {
				seen = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
					C = _c;
					

					foreach (dynamic _b in Lang13.Enumerate( C.can_see() )) {
						T2 = _b;
						
						seen[T2]++;
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( seen )) {
					T3 = _d;
					
					T3.maptext = "" + seen[T3];
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "mCRD" );
			return;
		}

		// Function from file: mapping.dm
		[VerbInfo( name: "-None of these are for ingame use!!", group: "Mapping" )]
		public void do_not_use_these(  ) {
			Lang13.SuperCall();
			return;
		}

		// Function from file: map_template_loadverb.dm
		[VerbInfo( name: "Map Template - Upload", group: "Debug" )]
		public void map_template_upload(  ) {
			dynamic map = null;
			MapTemplate M = null;

			map = Interface13.Input( Task13.User, "Choose a Map Template to upload to template storage", "Upload Map Template", null, null, InputType.File | InputType.Null );

			if ( !Lang13.Bool( map ) ) {
				return;
			}

			if ( String13.SubStr( "" + map, -4, 0 ) != ".dmm" ) {
				Task13.User.WriteMsg( "Bad map file: " + map );
				return;
			}
			M = new MapTemplate( null, map, "" + map );
			GlobalVars.map_templates[M.name] = M;
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has uploaded a map template (" + map + ")</span>" );
			return;
		}

		// Function from file: map_template_loadverb.dm
		[VerbInfo( name: "Map template - Place", group: "Debug" )]
		public void map_template_load(  ) {
			dynamic T = null;
			MapTemplate template = null;
			dynamic map = null;

			T = GlobalFuncs.get_turf( this.mob );

			if ( !Lang13.Bool( T ) ) {
				return;
			}
			map = Interface13.Input( Task13.User, "Choose a Map Template to place at your CURRENT LOCATION", "Place Map Template", null, GlobalVars.map_templates, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( map ) ) {
				return;
			}
			template = GlobalVars.map_templates[map];
			template.load( T );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has placed a map template (" + template.name + ") at <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + T.x + ";Y=" + T.y + ";Z=" + T.z + "'>(JMP)</a></span>" );
			return;
		}

		// Function from file: manipulate_organs.dm
		[VerbInfo( name: "Manipulate Organs", group: "Debug" )]
		[VerbArg( 1, InputType.Mob )]
		public void manipulate_organs( dynamic C = null ) {
			dynamic operation = null;
			ByTable organs = null;
			dynamic path = null;
			dynamic dat = null;
			dynamic organ = null;
			dynamic path2 = null;
			dynamic dat2 = null;
			dynamic organ2 = null;
			Obj_Item_Organ_Internal I = null;
			Obj_Item_Weapon_Implant I2 = null;
			dynamic organ3 = null;
			dynamic O = null;
			dynamic I3 = null;
			Obj_Item_Weapon_Implantcase _case = null;

			operation = Interface13.Input( "Select organ operation.", "Organ Manipulation", "cancel", null, new ByTable(new object [] { "add organ", "add implant", "drop organ/implant", "remove organ/implant", "cancel" }), InputType.Any );
			organs = new ByTable();

			dynamic _e = operation; // Was a switch-case, sorry for the mess.
			if ( _e=="add organ" ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item_Organ_Internal) ) - typeof(Obj_Item_Organ_Internal) )) {
					path = _a;
					
					dat = GlobalFuncs.replacetext( "" + path, "/obj/item/organ/internal/", ":" );
					organs[dat] = path;
				}
				organ = Interface13.Input( "Select organ type:", "Organ Manipulation", null, null, organs, InputType.Any );
				organ = organs[organ];
				organ = Lang13.Call( organ );
				((Obj_Item_Organ_Internal)organ).Insert( C );
			} else if ( _e=="add implant" ) {
				
				foreach (dynamic _b in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item_Weapon_Implant) ) - typeof(Obj_Item_Weapon_Implant) )) {
					path2 = _b;
					
					dat2 = GlobalFuncs.replacetext( "" + path2, "/obj/item/weapon/implant/", ":" );
					organs[dat2] = path2;
				}
				organ2 = Interface13.Input( "Select implant type:", "Organ Manipulation", null, null, organs, InputType.Any );
				organ2 = organs[organ2];
				organ2 = Lang13.Call( organ2 );
				((Obj_Item_Weapon_Implant)organ2).implant( C );
			} else if ( _e=="drop organ/implant" || _e=="remove organ/implant" ) {
				
				foreach (dynamic _c in Lang13.Enumerate( C.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
					I = _c;
					
					organs["" + I.name + " (" + I.type + ")"] = I;
				}

				foreach (dynamic _d in Lang13.Enumerate( C, typeof(Obj_Item_Weapon_Implant) )) {
					I2 = _d;
					
					organs["" + I2.name + " (" + I2.type + ")"] = I2;
				}
				organ3 = Interface13.Input( "Select organ/implant:", "Organ Manipulation", null, null, organs, InputType.Any );
				organ3 = organs[organ3];

				if ( !Lang13.Bool( organ3 ) ) {
					return;
				}
				O = null;
				I3 = null;

				if ( GlobalFuncs.isorgan( organ3 ) ) {
					O = organ3;
					((Obj_Item_Organ_Internal)O).Remove( C );
				} else {
					I3 = organ3;
					((Obj_Item_Weapon_Implant)I3).removed( C );
				}
				organ3.loc = GlobalFuncs.get_turf( C );

				if ( operation == "remove organ/implant" ) {
					GlobalFuncs.qdel( organ3 );
				} else if ( Lang13.Bool( I3 ) ) {
					_case = new Obj_Item_Weapon_Implantcase( GlobalFuncs.get_turf( C ) );
					_case.imp = I3;
					I3.loc = _case;
					_case.update_icon();
				}
			}
			return;
		}

		// Function from file: getlogs.dm
		[VerbInfo( name: ".getserverlog", desc: "Fetch logfiles from data/logs" )]
		public void getserverlog(  ) {
			string path = null;

			path = this.browse_files( "data/logs/" );

			if ( !Lang13.Bool( path ) ) {
				return;
			}

			if ( this.file_spam_check() ) {
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " accessed file: " + path );
			Interface13.SendFile( this, new File( path ), null );
			this.WriteMsg( "Attempting to send file, this may take a fair few minutes if the file is very large." );
			return;
		}

		// Function from file: getlogs.dm
		[VerbInfo( name: ".getruntimelog", desc: "Retrieve any session logfiles saved by dreamdeamon." )]
		public void getruntimelog(  ) {
			string path = null;

			path = this.browse_files( "data/logs/runtimes/" );

			if ( !Lang13.Bool( path ) ) {
				return;
			}

			if ( this.file_spam_check() ) {
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " accessed file: " + path );
			Interface13.SendFile( this, new File( path ), null );
			this.WriteMsg( "Attempting to send file, this may take a fair few minutes if the file is very large." );
			return;
		}

		// Function from file: getlogs.dm
		[VerbInfo( name: ".giveruntimelog", desc: "Give somebody access to any session logfiles saved to the /log/runtime/ folder." )]
		public void giveruntimelog(  ) {
			dynamic target = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "<font color='red'>Only Admins may use this command.</font>" );
				return;
			}
			target = Interface13.Input( this, "Choose somebody to grant access to the server's runtime logs (permissions expire at the end of each round):", "Grant Permissions", null, GlobalVars.clients, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( target ) ) ) {
				this.WriteMsg( "<font color='red'>Error: giveruntimelog(): Client not found.</font>" );
				return;
			}
			target.verbs |= typeof(Client).GetMethod( "getruntimelog" );
			target.WriteMsg( "<font color='red'>You have been granted access to runtime logs. Please use them responsibly or risk being banned.</font>" );
			return;
		}

		// Function from file: fps.dm
		[VerbInfo( name: "Set fps", desc: "Sets game speed in frames-per-second. Can potentially break the game", group: "Debug" )]
		public void fps(  ) {
			int fps = 0;
			string msg = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}
			fps = Num13.Floor( Convert.ToDouble( Interface13.Input( "Sets game frames-per-second. Can potentially break the game", "FPS", GlobalVars.config.fps, null, null, InputType.Num | InputType.Null ) ) );

			if ( fps <= 0 ) {
				this.WriteMsg( "<span class='danger'>Error: ticklag(): Invalid world.ticklag value. No changes made.</span>" );
				return;
			}

			if ( fps > Convert.ToDouble( GlobalVars.config.fps ) ) {
				
				if ( Interface13.Alert( this, "You are setting fps to a high value:\n	" + fps + " frames-per-second\n	config.fps = " + GlobalVars.config.fps, "Warning!", "Confirm", "ABORT-ABORT-ABORT" ) != "Confirm" ) {
					return;
				}
			}
			msg = "" + GlobalFuncs.key_name( this ) + " has modified world.fps to " + fps;
			GlobalFuncs.log_admin( msg );
			GlobalFuncs.message_admins( msg );
			GlobalFuncs.feedback_add_details( "admin_verb", "TICKLAG" );
			Game13.fps = fps;
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Reload Admins", group: "Admin" )]
		public void reload_admins(  ) {
			string confirm = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			confirm = Interface13.Alert( this, "Are you sure you want to reload all admins?", "Confirm", "Yes", "No" );

			if ( confirm != "Yes" ) {
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " manually reloaded admins" );
			GlobalFuncs.load_admins();
			GlobalFuncs.feedback_add_details( "admin_verb", "RLDA" );
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Radio report", group: "Debug" )]
		public void radio_report(  ) {
			ByTable filters = null;
			string output = null;
			dynamic fq = null;
			dynamic fqs = null;
			dynamic filter = null;
			ByTable f = null;
			dynamic device = null;

			filters = new ByTable()
				.Set( "1", "RADIO_TO_AIRALARM" )
				.Set( "2", "RADIO_FROM_AIRALARM" )
				.Set( "3", "RADIO_CHAT" )
				.Set( "4", "RADIO_ATMOSIA" )
				.Set( "5", "RADIO_NAVBEACONS" )
				.Set( "6", "RADIO_AIRLOCK" )
				.Set( "7", "RADIO_SECBOT" )
				.Set( "8", "RADIO_MULEBOT" )
				.Set( "_default", "NO_FILTER" )
			;
			output = "<b>Radio Report</b><hr>";

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.SSradio.frequencies )) {
				fq = _c;
				
				output += "<b>Freq: " + fq + "</b><br>";
				fqs = GlobalVars.SSradio.frequencies[fq];

				if ( !Lang13.Bool( fqs ) ) {
					output += "&nbsp;&nbsp;<b>ERROR</b><br>";
					continue;
				}

				foreach (dynamic _b in Lang13.Enumerate( fqs.devices )) {
					filter = _b;
					
					f = fqs.devices[filter];

					if ( !( f != null ) ) {
						output += "&nbsp;&nbsp;" + filters[filter] + ": ERROR<br>";
						continue;
					}
					output += "&nbsp;&nbsp;" + filters[filter] + ": " + f.len + "<br>";

					foreach (dynamic _a in Lang13.Enumerate( f )) {
						device = _a;
						

						if ( device is Obj ) {
							output += "&nbsp;&nbsp;&nbsp;&nbsp;" + device + " (" + device.x + "," + device.y + "," + device.z + " in area " + GlobalFuncs.get_area( device.loc ) + ")<br>";
						} else {
							output += "&nbsp;&nbsp;&nbsp;&nbsp;" + device + "<br>";
						}
					}
				}
			}
			Interface13.Browse( Task13.User, output, "window=radioreport" );
			GlobalFuncs.feedback_add_details( "admin_verb", "RR" );
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Unfreeze Everyone", group: "Debug" )]
		public void fix_next_move(  ) {
			double largest_move_time = 0;
			int largest_click_time = 0;
			dynamic largest_move_mob = null;
			dynamic largest_click_mob = null;
			dynamic M = null;

			largest_move_time = 0;
			largest_click_time = 0;
			largest_move_mob = null;
			largest_click_mob = null;

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) {
				M = _a;
				

				if ( !Lang13.Bool( M.client ) ) {
					continue;
				}

				if ( M.next_move >= largest_move_time ) {
					largest_move_mob = M;

					if ( M.next_move > Game13.time ) {
						largest_move_time = M.next_move - Game13.time;
					} else {
						largest_move_time = 1;
					}
				}

				if ( M.next_click >= largest_click_time ) {
					largest_click_mob = M;

					if ( M.next_click > Game13.time ) {
						largest_click_time = M.next_click - Game13.time;
					} else {
						largest_click_time = 0;
					}
				}
				GlobalFuncs.log_admin( "DEBUG: " + GlobalFuncs.key_name( M ) + "  next_move = " + M.next_move + "  lastDblClick = " + M.next_click + "  world.time = " + Game13.time );
				M.next_move = 1;
				M.next_click = 0;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( largest_move_mob ) + " had the largest move delay with " + largest_move_time + " frames / " + largest_move_time / 10 + " seconds!" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( largest_click_mob ) + " had the largest click delay with " + largest_click_time + " frames / " + largest_click_time / 10 + " seconds!" );
			GlobalFuncs.message_admins( "world.time = " + Game13.time );
			GlobalFuncs.feedback_add_details( "admin_verb", "UFE" );
			return;
		}

		// Function from file: diagnostics.dm
		[VerbInfo( name: "Display Air Status", group: "Debug" )]
		[VerbArg( 1, InputType.Tile )]
		public void air_status( Ent_Static target = null ) {
			GasMixture GM = null;
			dynamic GM_gases = null;
			bool burning = false;
			Ent_Static T = null;
			dynamic id = null;

			
			if ( !( target is Tile ) ) {
				return;
			}
			GM = target.return_air();
			burning = false;

			if ( target is Tile_Simulated ) {
				T = target;

				if ( Lang13.Bool( ((dynamic)T).active_hotspot ) ) {
					burning = true;
				}
			}
			Task13.User.WriteMsg( "<span class='adminnotice'>@" + target.x + "," + target.y + ": " + GM.temperature + " Kelvin, " + GM.return_pressure() + " kPa " + ( burning ? "ÿBURNING" : null ) + "</span>" );

			foreach (dynamic _a in Lang13.Enumerate( GM_gases )) {
				id = _a;
				

				if ( Lang13.Bool( ((dynamic)( GlobalVars.hardcoded_gases != null || Lang13.Bool( GM_gases[id][1] ) )).Contains( id ) ) ) {
					Task13.User.WriteMsg( "" + GM_gases[id][3][2] + ": " + GM_gases[id][1] );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "DAST" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Debug HUDs", desc: "Debug the data or antag HUDs", group: "Debug" )]
		[VerbArg( 1, InputType.Num )]
		public void debug_huds( dynamic i = null ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.debug_variables( GlobalVars.huds[i] );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Display del() Log", desc: "Displays a list of things that have failed to GC this round", group: "Debug" )]
		public void cmd_display_del_log(  ) {
			string dat = null;
			dynamic path = null;
			dynamic path2 = null;

			dat = "<B>List of things that failed to GC this round</B><BR><BR>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSgarbage.didntgc )) {
				path = _a;
				
				dat += "" + path + " - " + GlobalVars.SSgarbage.didntgc[path] + " times<BR>";
			}
			dat += "<B>List of paths that did not return a qdel hint in Destroy()</B><BR><BR>";

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSgarbage.noqdelhint )) {
				path2 = _b;
				
				dat += "" + path2 + "<BR>";
			}
			Interface13.Browse( Task13.User, dat, "window=dellog" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Debug Mob Lists", desc: "For when you just gotta know", group: "Debug" )]
		public void cmd_debug_mob_lists(  ) {
			
			dynamic _a = Interface13.Input( "Which list?", null, null, null, new ByTable(new object [] { "Players", "Admins", "Mobs", "Living Mobs", "Dead Mobs", "Clients", "Joined Clients" }), InputType.Any ); // Was a switch-case, sorry for the mess.
			if ( _a=="Players" ) {
				Task13.User.WriteMsg( GlobalFuncs.jointext( GlobalVars.player_list, "," ) );
			} else if ( _a=="Admins" ) {
				Task13.User.WriteMsg( GlobalFuncs.jointext( GlobalVars.admins, "," ) );
			} else if ( _a=="Mobs" ) {
				Task13.User.WriteMsg( GlobalFuncs.jointext( GlobalVars.mob_list, "," ) );
			} else if ( _a=="Living Mobs" ) {
				Task13.User.WriteMsg( GlobalFuncs.jointext( GlobalVars.living_mob_list, "," ) );
			} else if ( _a=="Dead Mobs" ) {
				Task13.User.WriteMsg( GlobalFuncs.jointext( GlobalVars.dead_mob_list, "," ) );
			} else if ( _a=="Clients" ) {
				Task13.User.WriteMsg( GlobalFuncs.jointext( GlobalVars.clients, "," ) );
			} else if ( _a=="Joined Clients" ) {
				Task13.User.WriteMsg( GlobalFuncs.jointext( GlobalVars.joined_player_list, "," ) );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Start Singularity", desc: "Sets up the singularity and all machines to get power flowing through the station", group: "Debug" )]
		public void startSinglo(  ) {
			Obj_Machinery_Power_Emitter E = null;
			Obj_Machinery_Field_Generator F = null;
			Obj_Machinery_TheSingularitygen G = null;
			Obj_Singularity S = null;
			Obj_Machinery_Power_RadCollector Rad = null;
			Obj_Item_Weapon_Tank_Internals_Plasma Plasma = null;
			Obj_Machinery_Power_Smes SMES = null;

			
			if ( Interface13.Alert( "Are you sure? This will start up the engine. Should only be used during debug!", null, "Yes", "No" ) != "Yes" ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Power_Emitter) )) {
				E = _a;
				

				if ( Lang13.Bool( E.anchored ) ) {
					E.active = true;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Field_Generator) )) {
				F = _b;
				

				if ( Lang13.Bool( F.anchored ) ) {
					F.Varedit_start = true;
				}
			}
			Task13.Schedule( 30, (Task13.Closure)(() => {
				
				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_TheSingularitygen) )) {
					G = _c;
					

					if ( Lang13.Bool( G.anchored ) ) {
						S = new Obj_Singularity( GlobalFuncs.get_turf( G ), 50 );
						S.energy = 1750;
						S.current_size = 7;
						S.icon = "icons/effects/224x224.dmi";
						S.icon_state = "singularity_s7";
						S.pixel_x = -96;
						S.pixel_y = -96;
						S.grav_pull = 0;
						S.dissipate = false;
					}
				}
				return;
			}));

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Power_RadCollector) )) {
				Rad = _d;
				

				if ( Lang13.Bool( Rad.anchored ) ) {
					
					if ( !Lang13.Bool( Rad.P ) ) {
						Plasma = new Obj_Item_Weapon_Tank_Internals_Plasma( Rad );
						Plasma.air_contents.assert_gas( "plasma" );
						Plasma.air_contents.gases["plasma"][1] = 70;
						Rad.drainratio = false;
						Rad.P = Plasma;
						Plasma.loc = Rad;
					}

					if ( !Rad.active ) {
						Rad.toggle_power();
					}
				}
			}

			foreach (dynamic _e in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Power_Smes) )) {
				SMES = _e;
				

				if ( Lang13.Bool( SMES.anchored ) ) {
					SMES.input_attempt = 1;
				}
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Select equipment", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_dress( Mob_Living_Carbon_Human M = null ) {
			ByTable outfits = null;
			dynamic paths = null;
			dynamic path = null;
			dynamic O = null;
			dynamic dresscode = null;
			Job jobdatum = null;
			dynamic jobname = null;
			dynamic custom = null;
			ByTable custom_names = null;
			Outfit D = null;
			dynamic selected_name = null;
			Obj_Item I = null;

			
			if ( !( M is Mob_Living_Carbon_Human ) ) {
				Interface13.Alert( "Invalid mob" );
				return;
			}
			outfits = new ByTable(new object [] { "Naked", "Custom", "As Job..." });
			paths = Lang13.GetTypes( typeof(Outfit) ) - typeof(Outfit) - Lang13.GetTypes( typeof(Outfit_Job) );

			foreach (dynamic _a in Lang13.Enumerate( paths )) {
				path = _a;
				
				O = path;
				outfits[Lang13.Initial( O, "name" )] = path;
			}
			dresscode = Interface13.Input( "Select dress for " + M, "Robust quick dress shop", null, null, outfits, InputType.Null | InputType.Any );

			if ( dresscode == null ) {
				return;
			}
			jobdatum = null;

			if ( dresscode == "As Job..." ) {
				jobname = Interface13.Input( "Select job", "Robust quick dress shop", null, null, GlobalFuncs.get_all_jobs(), InputType.Null | InputType.Any );

				if ( jobname == null ) {
					return;
				}
				jobdatum = GlobalVars.SSjob.GetJob( jobname );
			}
			custom = null;

			if ( dresscode == "Custom" ) {
				custom_names = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.custom_outfits, typeof(Outfit) )) {
					D = _b;
					
					custom_names[D.name] = D;
				}
				selected_name = Interface13.Input( "Select outfit", "Robust quick dress shop", null, null, custom_names, InputType.Null | InputType.Any );
				custom = custom_names[selected_name];

				if ( custom == null ) {
					return;
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SEQ" );

			foreach (dynamic _c in Lang13.Enumerate( M, typeof(Obj_Item) )) {
				I = _c;
				

				if ( I is Obj_Item_Weapon_Implant ) {
					continue;
				}
				GlobalFuncs.qdel( I );
			}

			dynamic _d = dresscode; // Was a switch-case, sorry for the mess.
			if ( _d=="Naked" ) {
				
			} else if ( _d=="Custom" ) {
				M.equipOutfit( custom );
			} else if ( _d=="As Job..." ) {
				
				if ( jobdatum != null ) {
					dresscode = jobdatum.title;
					M.job = jobdatum.title;
					jobdatum.equip( M );
				}
			} else {
				M.equipOutfit( outfits[dresscode] );
			}
			M.regenerate_icons();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " changed the equipment of " + GlobalFuncs.key_name( M ) + " to " + dresscode + "." );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " changed the equipment of " + GlobalFuncs.key_name_admin( M ) + " to " + dresscode + "..</span>" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Test areas", group: "Mapping" )]
		public void cmd_admin_areatest(  ) {
			ByTable areas_all = null;
			ByTable areas_with_APC = null;
			ByTable areas_with_air_alarm = null;
			ByTable areas_with_RC = null;
			ByTable areas_with_light = null;
			ByTable areas_with_LS = null;
			ByTable areas_with_intercom = null;
			ByTable areas_with_camera = null;
			dynamic A = null;
			Obj_Machinery_Power_Apc APC = null;
			dynamic A2 = null;
			Obj_Machinery_Airalarm AA = null;
			dynamic A3 = null;
			Obj_Machinery_RequestsConsole RC = null;
			dynamic A4 = null;
			Obj_Machinery_Light L = null;
			dynamic A5 = null;
			Obj_Machinery_LightSwitch LS = null;
			dynamic A6 = null;
			Obj_Item_Device_Radio_Intercom I = null;
			dynamic A7 = null;
			Obj_Machinery_Camera C = null;
			dynamic A8 = null;
			ByTable areas_without_APC = null;
			ByTable areas_without_air_alarm = null;
			ByTable areas_without_RC = null;
			ByTable areas_without_light = null;
			ByTable areas_without_LS = null;
			ByTable areas_without_intercom = null;
			ByTable areas_without_camera = null;
			dynamic areatype = null;
			dynamic areatype2 = null;
			dynamic areatype3 = null;
			dynamic areatype4 = null;
			dynamic areatype5 = null;
			dynamic areatype6 = null;
			dynamic areatype7 = null;

			areas_all = new ByTable();
			areas_with_APC = new ByTable();
			areas_with_air_alarm = new ByTable();
			areas_with_RC = new ByTable();
			areas_with_light = new ByTable();
			areas_with_LS = new ByTable();
			areas_with_intercom = new ByTable();
			areas_with_camera = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) {
				A = _a;
				

				if ( !areas_all.Contains( A.type ) ) {
					areas_all.Add( A.type );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.apcs_list, typeof(Obj_Machinery_Power_Apc) )) {
				APC = _b;
				
				A2 = GlobalFuncs.get_area( APC );

				if ( !areas_with_APC.Contains( A2.type ) ) {
					areas_with_APC.Add( A2.type );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Airalarm) )) {
				AA = _c;
				
				A3 = GlobalFuncs.get_area( AA );

				if ( !areas_with_air_alarm.Contains( A3.type ) ) {
					areas_with_air_alarm.Add( A3.type );
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_RequestsConsole) )) {
				RC = _d;
				
				A4 = GlobalFuncs.get_area( RC );

				if ( !areas_with_RC.Contains( A4.type ) ) {
					areas_with_RC.Add( A4.type );
				}
			}

			foreach (dynamic _e in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Light) )) {
				L = _e;
				
				A5 = GlobalFuncs.get_area( L );

				if ( !areas_with_light.Contains( A5.type ) ) {
					areas_with_light.Add( A5.type );
				}
			}

			foreach (dynamic _f in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_LightSwitch) )) {
				LS = _f;
				
				A6 = GlobalFuncs.get_area( LS );

				if ( !areas_with_LS.Contains( A6.type ) ) {
					areas_with_LS.Add( A6.type );
				}
			}

			foreach (dynamic _g in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Item_Device_Radio_Intercom) )) {
				I = _g;
				
				A7 = GlobalFuncs.get_area( I );

				if ( !areas_with_intercom.Contains( A7.type ) ) {
					areas_with_intercom.Add( A7.type );
				}
			}

			foreach (dynamic _h in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Camera) )) {
				C = _h;
				
				A8 = GlobalFuncs.get_area( C );

				if ( !areas_with_camera.Contains( A8.type ) ) {
					areas_with_camera.Add( A8.type );
				}
			}
			areas_without_APC = areas_all - areas_with_APC;
			areas_without_air_alarm = areas_all - areas_with_air_alarm;
			areas_without_RC = areas_all - areas_with_RC;
			areas_without_light = areas_all - areas_with_light;
			areas_without_LS = areas_all - areas_with_LS;
			areas_without_intercom = areas_all - areas_with_intercom;
			areas_without_camera = areas_all - areas_with_camera;
			Game13.WriteMsg( "<b>AREAS WITHOUT AN APC:</b>" );

			foreach (dynamic _i in Lang13.Enumerate( areas_without_APC )) {
				areatype = _i;
				
				Game13.WriteMsg( "* " + areatype );
			}
			Game13.WriteMsg( "<b>AREAS WITHOUT AN AIR ALARM:</b>" );

			foreach (dynamic _j in Lang13.Enumerate( areas_without_air_alarm )) {
				areatype2 = _j;
				
				Game13.WriteMsg( "* " + areatype2 );
			}
			Game13.WriteMsg( "<b>AREAS WITHOUT A REQUEST CONSOLE:</b>" );

			foreach (dynamic _k in Lang13.Enumerate( areas_without_RC )) {
				areatype3 = _k;
				
				Game13.WriteMsg( "* " + areatype3 );
			}
			Game13.WriteMsg( "<b>AREAS WITHOUT ANY LIGHTS:</b>" );

			foreach (dynamic _l in Lang13.Enumerate( areas_without_light )) {
				areatype4 = _l;
				
				Game13.WriteMsg( "* " + areatype4 );
			}
			Game13.WriteMsg( "<b>AREAS WITHOUT A LIGHT SWITCH:</b>" );

			foreach (dynamic _m in Lang13.Enumerate( areas_without_LS )) {
				areatype5 = _m;
				
				Game13.WriteMsg( "* " + areatype5 );
			}
			Game13.WriteMsg( "<b>AREAS WITHOUT ANY INTERCOMS:</b>" );

			foreach (dynamic _n in Lang13.Enumerate( areas_without_intercom )) {
				areatype6 = _n;
				
				Game13.WriteMsg( "* " + areatype6 );
			}
			Game13.WriteMsg( "<b>AREAS WITHOUT ANY CAMERAS:</b>" );

			foreach (dynamic _o in Lang13.Enumerate( areas_without_camera )) {
				areatype7 = _o;
				
				Game13.WriteMsg( "* " + areatype7 );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Assume direct control", desc: "Direct intervention", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_assume_direct_control( dynamic M = null ) {
			Mob_Dead_Observer ghost = null;
			Mob adminmob = null;

			
			if ( Lang13.Bool( M.ckey ) ) {
				
				if ( Interface13.Alert( "This mob is being controlled by " + M.ckey + ". Are you sure you wish to assume control of it? " + M.ckey + " will be made a ghost.", null, "Yes", "No" ) != "Yes" ) {
					return;
				} else {
					ghost = new Mob_Dead_Observer( M );
					ghost.ckey = M.ckey;
				}
			}
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " assumed direct control of " + M + ".</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " assumed direct control of " + M + "." );
			adminmob = this.mob;
			M.ckey = this.ckey;

			if ( adminmob is Mob_Dead_Observer ) {
				GlobalFuncs.qdel( adminmob );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "ADC" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Grant Full Access", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_grantfullaccess( dynamic M = null ) {
			Ent_Static H = null;
			Obj_Item worn = null;
			dynamic id = null;

			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				worn = ((dynamic)H).wear_id;
				id = null;

				if ( worn != null ) {
					id = worn.GetID();
				}

				if ( Lang13.Bool( id ) ) {
					id.icon_state = "gold";
					id.access = GlobalFuncs.get_all_accesses() + GlobalFuncs.get_all_centcom_access() + GlobalFuncs.get_all_syndicate_access();
				} else {
					id = new Obj_Item_Weapon_Card_Id_Gold( H.loc );
					id.access = GlobalFuncs.get_all_accesses() + GlobalFuncs.get_all_centcom_access() + GlobalFuncs.get_all_syndicate_access();
					id.registered_name = ((dynamic)H).real_name;
					id.assignment = "Captain";
					id.update_label();

					if ( worn != null ) {
						
						if ( worn is Obj_Item_Device_Pda ) {
							((dynamic)worn).id = id;
							id.loc = worn;
						} else if ( worn is Obj_Item_Weapon_Storage_Wallet ) {
							((dynamic)worn).front_id = id;
							id.loc = worn;
							worn.update_icon();
						}
					} else {
						((dynamic)H).equip_to_slot( id, 7 );
					}
				}
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "GFA" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has granted " + M.key + " full access." );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has granted " + M.key + " full access.</span>" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Powernets", group: "Debug" )]
		public void cmd_debug_make_powernets(  ) {
			GlobalVars.SSmachine.makepowernets();
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has remade the powernet. makepowernets() called." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has remade the powernets. makepowernets() called." );
			GlobalFuncs.feedback_add_details( "admin_verb", "MPWN" );
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Del-All", group: "Debug" )]
		[VerbArg( 1, InputType.Str )]
		public void cmd_debug_del_all( string _object = null ) {
			ByTable matches = null;
			dynamic hsbitem = null;
			int counter = 0;
			Ent_Static O = null;

			matches = GlobalFuncs.get_fancy_list_of_types();

			if ( !( _object == null ) && _object != "" ) {
				matches = GlobalFuncs.filter_fancy_list( matches, _object );
			}

			if ( matches.len == 0 ) {
				return;
			}
			hsbitem = Interface13.Input( Task13.User, "Choose an object to delete.", "Delete:", null, matches, InputType.Null | InputType.Any );

			if ( Lang13.Bool( hsbitem ) ) {
				hsbitem = matches[hsbitem];
				counter = 0;

				foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Ent_Static) )) {
					O = _a;
					

					if ( Lang13.Bool( hsbitem.IsInstanceOfType( O ) ) ) {
						counter++;
						GlobalFuncs.qdel( O );
					}
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has deleted all (" + counter + ") instances of " + hsbitem + "." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has deleted all (" + counter + ") instances of " + hsbitem + "." );
				GlobalFuncs.feedback_add_details( "admin_verb", "DELA" );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make slime", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_slimeize( dynamic M = null ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has slimeized " + M.key + "." );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					((Mob_Living_Carbon_Human)M).slimeize();
					GlobalFuncs.feedback_add_details( "admin_verb", "MKMET" );
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into a slime." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into a slime.</span>" );
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Alien", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_alienize( dynamic M = null ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has alienized " + M.key + "." );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					((Mob_Living_Carbon_Human)M).Alienize();
					GlobalFuncs.feedback_add_details( "admin_verb", "MKAL" );
					return;
				}));
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into an alien." );
				GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + GlobalFuncs.key_name( M ) + " into an alien.</span>" );
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make pAI", desc: "Specify a location to spawn a pAI device, then specify a key to play that pAI", group: "Fun" )]
		[VerbArg( 1, InputType.Tile, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public bool makepAI( dynamic T = null ) {
			ByTable available = null;
			dynamic C = null;
			dynamic choice = null;
			dynamic confirm = null;
			Obj_Item_Device_Paicard card = null;
			Mob_Living_Silicon_Pai pai = null;
			PaiCandidate candidate = null;

			available = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				C = _a;
				

				if ( Lang13.Bool( C.key ) ) {
					available.Add( C );
				}
			}
			choice = Interface13.Input( "Choose a player to play the pAI", "Spawn pAI", null, null, available, InputType.Any );

			if ( !Lang13.Bool( choice ) ) {
				return false;
			}

			if ( !( choice is Mob_Dead_Observer ) ) {
				confirm = Interface13.Input( "" + choice.key + " isn't ghosting right now. Are you sure you want to yank him out of them out of their body and place them in this pAI?", "Spawn pAI Confirmation", "No", null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

				if ( confirm != "Yes" ) {
					return false;
				}
			}
			card = new Obj_Item_Device_Paicard( T );
			pai = new Mob_Living_Silicon_Pai( card );
			pai.name = Interface13.Input( choice, "Enter your pAI name:", "pAI Name", "Personal AI", null, InputType.Str );
			pai.real_name = pai.name;
			pai.key = choice.key;
			card.setPersonality( pai );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSpai.candidates, typeof(PaiCandidate) )) {
				candidate = _b;
				

				if ( candidate.key == choice.key ) {
					GlobalVars.SSpai.candidates.Remove( candidate );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "MPAI" );
			return false;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Simple Animal", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_animalize( dynamic M = null ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( !Lang13.Bool( M ) ) {
				Interface13.Alert( "That mob doesn't seem to exist, close the panel and try again." );
				return;
			}

			if ( M is Mob_NewPlayer ) {
				Interface13.Alert( "The mob must not be a new_player." );
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has animalized " + M.key + "." );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				((Mob)M).Animalize();
				return;
			}));
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Blob", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_blobize( dynamic M = null ) {
			dynamic H = null;

			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has blobized " + M.key + "." );
				H = M;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					((Mob_Living_Carbon_Human)H).Blobize();
					return;
				}));
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Make Robot", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_robotize( dynamic M = null ) {
			dynamic H = null;

			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Wait until the game starts" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has robotized " + M.key + "." );
				H = M;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					((Mob_Living_Carbon_Human)H).Robotize();
					return;
				}));
			} else {
				Interface13.Alert( "Invalid mob" );
			}
			return;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Air Status in Location", group: "Debug" )]
		public void Cell(  ) {
			Ent_Static T = null;
			GasMixture env = null;
			ByTable env_gases = null;
			string t = null;
			dynamic id = null;

			
			if ( !( this.mob != null ) ) {
				return;
			}
			T = this.mob.loc;

			if ( !( T is Tile ) ) {
				return;
			}
			env = T.return_air();
			env_gases = env.gases;
			t = "";

			foreach (dynamic _a in Lang13.Enumerate( env_gases )) {
				id = _a;
				

				if ( Lang13.Bool( ((dynamic)( GlobalVars.hardcoded_gases != null || Lang13.Bool( env_gases[id][1] ) )).Contains( id ) ) ) {
					t += "" + env_gases[id][3][2] + " : " + env_gases[id][1] + "\n";
				}
			}
			Task13.User.WriteMsg( t );
			GlobalFuncs.feedback_add_details( "admin_verb", "ASL" );
			return;
		}

		// Function from file: debug.dm
		public string get_callproc_returnval( dynamic returnval = null, dynamic procname = null ) {
			string _default = null;

			ByTable returnedlist = null;
			dynamic assoc_check = null;
			dynamic key = null;
			dynamic elem = null;

			_default = "";

			if ( returnval is ByTable ) {
				returnedlist = returnval;
				_default = "<font color='blue'>";

				if ( returnedlist.len != 0 ) {
					assoc_check = returnedlist[1];

					if ( assoc_check is string && returnedlist[assoc_check] != null ) {
						_default += "" + procname + " returned an associative list:";

						foreach (dynamic _a in Lang13.Enumerate( returnedlist )) {
							key = _a;
							
							_default += "\n" + key + " = " + returnedlist[key];
						}
					} else {
						_default += "" + procname + " returned a list:";

						foreach (dynamic _b in Lang13.Enumerate( returnedlist )) {
							elem = _b;
							
							_default += "\n" + elem;
						}
					}
				} else {
					_default = "" + procname + " returned an empty list";
				}
				_default += "</font>";
			} else {
				_default = "<font color='blue'>" + procname + " returned: " + ( Lang13.Bool( returnval ) ? returnval : "null" ) + "</font>";
			}
			return _default;
		}

		// Function from file: debug.dm
		public ByTable get_callproc_args(  ) {
			dynamic argnum = null;
			ByTable lst = null;
			dynamic _class = null;
			ByTable keys = null;
			dynamic M = null;
			dynamic temp = null;

			argnum = Interface13.Input( "Number of arguments", "Number:", 0, null, null, InputType.Num | InputType.Null );

			if ( !Lang13.Bool( argnum ) && argnum != 0 ) {
				return null;
			}
			lst = new ByTable();

			while (Lang13.Bool( argnum-- )) {
				_class = null;

				if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
					_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "client", "mob's area", "Marked datum (" + this.holder.marked_datum.type + ")", "CANCEL" }), InputType.Any );

					if ( Lang13.Bool( this.holder.marked_datum ) && _class == "Marked datum (" + this.holder.marked_datum.type + ")" ) {
						_class = "Marked datum";
					}
				} else {
					_class = Interface13.Input( "What kind of variable?", "Variable Type", null, null, new ByTable(new object [] { "text", "num", "type", "reference", "mob reference", "icon", "file", "client", "mob's area", "CANCEL" }), InputType.Any );
				}

				dynamic _b = _class; // Was a switch-case, sorry for the mess.
				if ( _b=="CANCEL" ) {
					return null;
				} else if ( _b=="text" ) {
					lst.Add( Interface13.Input( "Enter new text:", "Text", null, null, null, InputType.Str ) );
				} else if ( _b=="num" ) {
					lst.Add( Interface13.Input( "Enter new number:", "Num", 0, null, null, InputType.Num ) );
				} else if ( _b=="type" ) {
					lst.Add( Interface13.Input( "Enter type:", "Type", null, null, Lang13.GetTypes( typeof(Obj), typeof(Mob), typeof(Zone), typeof(Tile) ), InputType.Any ) );
				} else if ( _b=="reference" ) {
					lst.Add( Interface13.Input( "Select reference:", "Reference", this, null, Game13.contents, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone ) );
				} else if ( _b=="mob reference" ) {
					lst.Add( Interface13.Input( "Select reference:", "Reference", Task13.User, null, Game13.contents, InputType.Mob ) );
				} else if ( _b=="file" ) {
					lst.Add( Interface13.Input( "Pick file:", "File", null, null, null, InputType.File ) );
				} else if ( _b=="icon" ) {
					lst.Add( Interface13.Input( "Pick icon:", "Icon", null, null, null, InputType.Icon ) );
				} else if ( _b=="client" ) {
					keys = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) {
						M = _a;
						
						keys.Add( M.client );
					}
					lst.Add( Interface13.Input( "Please, select a player!", "Selection", null, null, keys, InputType.Null | InputType.Any ) );
				} else if ( _b=="mob's area" ) {
					temp = Interface13.Input( "Select mob", "Selection", Task13.User, null, Game13.contents, InputType.Mob );
					lst.Add( temp.loc );
				} else if ( _b=="Marked datum" ) {
					lst.Add( this.holder.marked_datum );
				}
			}
			return lst;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Atom ProcCall", group: "Debug" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Null | InputType.Zone )]
		public string callproc_datum( dynamic A = null ) {
			string _default = null;

			dynamic procname = null;
			ByTable lst = null;
			dynamic returnval = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return _default;
			}
			procname = Interface13.Input( "Proc name, eg: fake_blood", "Proc:", null, null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( procname ) ) {
				return _default;
			}

			if ( !Lang13.HasCall( A, procname ) ) {
				Task13.User.WriteMsg( "<span class='warning'>Error: callproc_datum(): target has no such call " + procname + ".</span>" );
				return _default;
			}
			lst = this.get_callproc_args();

			if ( !( lst != null ) ) {
				return _default;
			}

			if ( !Lang13.Bool( A ) || !GlobalFuncs.IsValidSrc( A ) ) {
				Task13.User.WriteMsg( "<span class='warning'>Error: callproc_datum(): owner of proc no longer exists.</span>" );
				return _default;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " called " + A + "'s " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " called " + A + "'s " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "DPC" );
			returnval = lst.Apply( Lang13.BindFunc( A, procname ) );
			_default = this.get_callproc_returnval( returnval, procname );

			if ( Lang13.Bool( _default ) ) {
				Task13.User.WriteMsg( _default );
			}
			return _default;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Advanced ProcCall", group: "Debug" )]
		public string callproc(  ) {
			string _default = null;

			dynamic target = null;
			bool targetselected = false;
			dynamic returnval = null;
			dynamic _class = null;
			ByTable keys = null;
			dynamic C = null;
			dynamic procname = null;
			Type procpath = null;
			ByTable lst = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return _default;
			}
			target = null;
			targetselected = false;
			returnval = null;
			_class = null;

			switch ((string)( Interface13.Alert( "Proc owned by something?", null, "Yes", "No" ) )) {
				case "Yes":
					targetselected = true;

					if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) ) {
						_class = Interface13.Input( "Proc owned by...", "Owner", null, null, new ByTable(new object [] { "Obj", "Mob", "Area or Turf", "Client", "Marked datum (" + this.holder.marked_datum.type + ")" }), InputType.Null | InputType.Any );

						if ( _class == "Marked datum (" + this.holder.marked_datum.type + ")" ) {
							_class = "Marked datum";
						}
					} else {
						_class = Interface13.Input( "Proc owned by...", "Owner", null, null, new ByTable(new object [] { "Obj", "Mob", "Area or Turf", "Client" }), InputType.Null | InputType.Any );
					}

					dynamic _b = _class; // Was a switch-case, sorry for the mess.
					if ( _b=="Obj" ) {
						target = Interface13.Input( "Enter target:", "Target", Task13.User, null, Game13.contents, InputType.Obj );
					} else if ( _b=="Mob" ) {
						target = Interface13.Input( "Enter target:", "Target", Task13.User, null, Game13.contents, InputType.Mob );
					} else if ( _b=="Area or Turf" ) {
						target = Interface13.Input( "Enter target:", "Target", Task13.User.loc, null, Game13.contents, InputType.Tile | InputType.Zone );
					} else if ( _b=="Client" ) {
						keys = new ByTable();

						foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) { // THERE IS A SMALL CHANCE THIS LOOP IS BROKEN! TYPECODE = 16384
							C = _a;
							
							keys.Add( C );
						}
						target = Interface13.Input( "Please, select a player!", "Selection", null, null, keys, InputType.Null | InputType.Any );
					} else if ( _b=="Marked datum" ) {
						target = this.holder.marked_datum;
					} else {
						return _default;
					}
					break;
				case "No":
					target = null;
					targetselected = false;
					break;
			}
			procname = Interface13.Input( "Proc path, eg: /proc/fake_blood", "Path:", null, null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( procname ) ) {
				return _default;
			}

			if ( targetselected && !Lang13.HasCall( target, procname ) ) {
				Task13.User.WriteMsg( "<font color='red'>Error: callproc(): target has no such call " + procname + ".</font>" );
				return _default;
			} else {
				procpath = Lang13.FindClass( procname );

				if ( !( procpath != null ) ) {
					Task13.User.WriteMsg( "<font color='red'>Error: callproc(): proc " + procname + " does not exist. (Did you forget the /proc/ part?)</font>" );
					return _default;
				}
			}
			lst = this.get_callproc_args();

			if ( !( lst != null ) ) {
				return _default;
			}

			if ( targetselected ) {
				
				if ( !Lang13.Bool( target ) ) {
					Task13.User.WriteMsg( "<font color='red'>Error: callproc(): owner of proc no longer exists.</font>" );
					return _default;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " called " + target + "'s " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " called " + target + "'s " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
				returnval = lst.Apply( Lang13.BindFunc( target, procname ) );
			} else {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " called " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " called " + procname + "() with " + ( lst.len != 0 ? "the arguments " + String13.MakeUrlParams( lst ) : "no arguments" ) + "." );
				returnval = lst.Apply( typeof(GlobalFuncs).GetMethod( procname ) );
			}
			_default = this.get_callproc_returnval( returnval, procname );

			if ( Lang13.Bool( _default ) ) {
				Task13.User.WriteMsg( _default );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "APC" );
			return _default;
		}

		// Function from file: debug.dm
		[VerbInfo( name: "Debug-Game", group: "Debug" )]
		public void Debug2(  ) {
			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return;
			}

			if ( GlobalVars.Debug2 ) {
				GlobalVars.Debug2 = false;
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " toggled debugging off." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " toggled debugging off." );
			} else {
				GlobalVars.Debug2 = true;
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( this ) + " toggled debugging on." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " toggled debugging on." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "DG2" );
			return;
		}

		// Function from file: deadsay.dm
		[VerbInfo( name: "Dsay", group: "Special Verbs", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void dsay( string msg = null ) {
			ByTable nicknames = null;
			string rendered = null;
			dynamic M = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}

			if ( !( this.mob != null ) ) {
				return;
			}

			if ( ( this.prefs.muted & 16 ) != 0 ) {
				this.WriteMsg( "<span class='danger'>You cannot send DSAY messages (muted).</span>" );
				return;
			}

			if ( this.handle_spam_prevention( msg, 16 ) ) {
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );
			GlobalFuncs.log_dsay( "" + GlobalFuncs.key_name( this ) + " : " + msg );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			nicknames = GlobalFuncs.file2list( "config/admin_nicknames.txt" );
			rendered = "<span class='game deadsay'><span class='prefix'>DEAD:</span> <span class='name'>ADMIN(" + ( Lang13.Bool( this.holder.fakekey ) ? Rand13.PickFromTable( nicknames ) : ((dynamic)( this.key )) ) + ")</span> says, <span class='message'>\"" + msg + "\"</span></span>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( M is Mob_NewPlayer ) {
					continue;
				}

				if ( Convert.ToInt32( M.stat ) == 2 || Lang13.Bool( M.client ) && Lang13.Bool( M.client.holder ) && ( M.client.prefs.chat_toggles & 2 ) != 0 ) {
					((Mob)M).show_message( rendered, 2 );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "D" );
			return;
		}

		// Function from file: tgstation.dme
		[VerbInfo( desc: "Shows a cinematic.", group: "Fun", hidden: true )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "explosion", null )]
		public void cinematic( dynamic cinematic = null ) {
			dynamic parameter = null;
			dynamic _override = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				return;
			}

			dynamic _b = cinematic; // Was a switch-case, sorry for the mess.
			if ( _b=="explosion" ) {
				parameter = Interface13.Input( this, "station_missed = ?", "Enter Parameter", 0, null, InputType.Num );
				_override = null;

				dynamic _a = parameter; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					_override = Interface13.Input( this, "mode = ?", "Enter Parameter", null, new ByTable(new object [] { "nuclear emergency", "gang war", "fake", "no override" }), InputType.Any );
				} else if ( _a==0 ) {
					_override = Interface13.Input( this, "mode = ?", "Enter Parameter", null, new ByTable(new object [] { "blob", "nuclear emergency", "AI malfunction", "no override" }), InputType.Any );
				}
				GlobalVars.ticker.station_explosion_cinematic( parameter, _override );
			}
			return;
		}

		// Function from file: bluespacearty.dm
		[VerbInfo( name: "Bluespace Artillery", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void bluespace_artillery( dynamic M = null ) {
			dynamic target = null;
			dynamic T = null;

			
			if ( !( this.holder != null ) || !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}
			target = M;

			if ( !( target is Mob_Living ) ) {
				Task13.User.WriteMsg( "This can only be used on instances of type /mob/living" );
				return;
			}

			if ( Interface13.Alert( Task13.User, "Are you sure you wish to hit " + GlobalFuncs.key_name( target ) + " with Blue Space Artillery?", "Confirm Firing?", "Yes", "No" ) != "Yes" ) {
				return;
			}
			GlobalFuncs.explosion( target.loc, 0, 0, 0, 0 );
			T = GlobalFuncs.get_turf( target );

			if ( T is Tile_Simulated_Floor ) {
				
				if ( Rand13.PercentChance( 80 ) ) {
					((Tile_Simulated_Floor)T).break_tile_to_plating();
				} else {
					((Tile_Simulated_Floor)T).break_tile();
				}
			}
			target.WriteMsg( "<span class='userdanger'>You're hit by bluespace artillery!</span>" );
			GlobalFuncs.log_admin( "" + target.name + " has been hit by Bluespace Artillery fired by " + Task13.User );
			GlobalFuncs.message_admins( "" + target.name + " has been hit by Bluespace Artillery fired by " + Task13.User );

			if ( Convert.ToDouble( target.health ) <= 1 ) {
				((Mob)target).gib();
			} else {
				((Mob_Living)target).adjustBruteLoss( Num13.MinInt( 99, Convert.ToInt32( target.health - 1 ) ) );
				((Mob)target).Stun( 20 );
				((Mob)target).Weaken( 20 );
				target.stuttering = 20;
			}
			return;
		}

		// Function from file: tgstation.dme
		[VerbInfo( name: "Check Power", group: "Mapping" )]
		public void powerdebug(  ) {
			Powernet PN = null;
			Ent_Static C = null;
			Ent_Static C2 = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "CPOW" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.powernets, typeof(Powernet) )) {
				PN = _a;
				

				if ( !( PN.nodes != null ) || !( PN.nodes.len != 0 ) ) {
					
					if ( PN.cables != null && PN.cables.len > 1 ) {
						C = PN.cables[1];
						Task13.User.WriteMsg( "Powernet with no nodes! (number " + PN.number + ") - example cable at " + C.x + ", " + C.y + ", " + C.z + " in area " + GlobalFuncs.get_area( C.loc ) );
					}
				}

				if ( !( PN.cables != null ) || PN.cables.len < 10 ) {
					
					if ( PN.cables != null && PN.cables.len > 1 ) {
						C2 = PN.cables[1];
						Task13.User.WriteMsg( "Powernet with fewer than 10 cables! (number " + PN.number + ") - example cable at " + C2.x + ", " + C2.y + ", " + C2.z + " in area " + GlobalFuncs.get_area( C2.loc ) );
					}
				}
			}
			return;
		}

		// Function from file: atmosdebug.dm
		[VerbInfo( name: "Check Plumbing", group: "Mapping" )]
		public void atmosscan(  ) {
			Obj_Machinery_Atmospherics plumbing = null;
			Obj_Machinery_Atmospherics_Pipe_Manifold pipe = null;
			Obj_Machinery_Atmospherics_Pipe_Simple pipe2 = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "CP" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Atmospherics) )) {
				plumbing = _a;
				

				if ( plumbing.nodealert ) {
					Task13.User.WriteMsg( "Unconnected " + plumbing.name + " located at " + plumbing.x + "," + plumbing.y + "," + plumbing.z + " (" + GlobalFuncs.get_area( plumbing.loc ) + ")" );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Atmospherics_Pipe_Manifold) )) {
				pipe = _b;
				

				if ( !Lang13.Bool( pipe.nodes[1] ) || !Lang13.Bool( pipe.nodes[2] ) || !Lang13.Bool( pipe.nodes[3] ) ) {
					Task13.User.WriteMsg( "Unconnected " + pipe.name + " located at " + pipe.x + "," + pipe.y + "," + pipe.z + " (" + GlobalFuncs.get_area( pipe.loc ) + ")" );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Atmospherics_Pipe_Simple) )) {
				pipe2 = _c;
				

				if ( !Lang13.Bool( pipe2.nodes[1] ) || !Lang13.Bool( pipe2.nodes[2] ) ) {
					Task13.User.WriteMsg( "Unconnected " + pipe2.name + " located at " + pipe2.x + "," + pipe2.y + "," + pipe2.z + " (" + GlobalFuncs.get_area( pipe2.loc ) + ")" );
				}
			}
			return;
		}

		// Function from file: adminsay.dm
		[VerbInfo( name: "Asay", group: "Special Verbs", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void cmd_admin_say( dynamic msg = null ) {
			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			GlobalFuncs.log_adminsay( "" + GlobalFuncs.key_name( this ) + " : " + msg );
			msg = GlobalFuncs.keywords_lookup( msg );

			if ( GlobalFuncs.check_rights( 2, false ) ) {
				msg = new Txt( "<span class='admin'><span class='prefix'>ADMIN:</span> <EM>" ).item( GlobalFuncs.key_name( Task13.User, 1 ) ).str( "</EM> (<a href='?_src_=holder;adminplayerobservefollow=" ).Ref( this.mob ).str( "'>FLW</A>): <span class='message'>" ).item( msg ).str( "</span></span>" ).ToString();
				GlobalVars.admins.WriteMsg( msg );
			} else {
				msg = "<span class='adminobserver'><span class='prefix'>ADMIN:</span> <EM>" + GlobalFuncs.key_name( Task13.User, 1 ) + ":</EM> <span class='message'>" + msg + "</span></span>";
				GlobalVars.admins.WriteMsg( msg );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "M" );
			return;
		}

		// Function from file: adminpm.dm
		public void cmd_admin_pm( dynamic whom = null, dynamic msg = null ) {
			dynamic C = null;
			dynamic rawmsg = null;
			dynamic keywordparsedmsg = null;
			Client sender = null;
			string sendername = null;
			dynamic reply = null;
			dynamic X = null;

			
			if ( ( this.prefs.muted & 8 ) != 0 ) {
				this.WriteMsg( "<font color='red'>Error: Admin-PM: You are unable to use admin PM-s (muted).</font>" );
				return;
			}

			if ( whom is string ) {
				
				if ( String13.CompareIgnoreCase( "@", String13.SubStr( whom, 1, 2 ) ) ) {
					whom = this.findStealthKey( whom );
				}
				C = GlobalVars.directory[whom];
			} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( whom ) ) ) {
				C = whom;
			}

			if ( !Lang13.Bool( C ) ) {
				
				if ( this.holder != null ) {
					this.WriteMsg( "<font color='red'>Error: Admin-PM: Client not found.</font>" );
				} else {
					this.adminhelp( msg );
				}
				return;
			}

			if ( !Lang13.Bool( msg ) ) {
				msg = Interface13.Input( this, "Message:", "Private message to " + GlobalFuncs.key_name( C, 0, 0 ), null, null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( msg ) ) {
					return;
				}

				if ( !Lang13.Bool( C ) ) {
					
					if ( this.holder != null ) {
						this.WriteMsg( "<font color='red'>Error: Admin-PM: Client not found.</font>" );
					} else {
						this.adminhelp( msg );
					}
					return;
				}
			}

			if ( this.handle_spam_prevention( msg, 8 ) ) {
				return;
			}

			if ( !GlobalFuncs.check_rights( 48, false ) ) {
				msg = GlobalFuncs.sanitize( String13.SubStr( msg, 1, 1024 ) );

				if ( !Lang13.Bool( msg ) ) {
					return;
				}
			}
			rawmsg = msg;

			if ( this.holder != null ) {
				msg = GlobalFuncs.emoji_parse( msg );
			}
			keywordparsedmsg = GlobalFuncs.keywords_lookup( msg );

			if ( Lang13.Bool( C.holder ) ) {
				
				if ( this.holder != null ) {
					C.WriteMsg( "<font color='red'>Admin PM from-<b>" + GlobalFuncs.key_name( this, C, 1 ) + "</b>: " + keywordparsedmsg + "</font>" );
					this.WriteMsg( "<font color='blue'>Admin PM to-<b>" + GlobalFuncs.key_name( C, this, 1 ) + "</b>: " + keywordparsedmsg + "</font>" );
				} else {
					C.WriteMsg( "<font color='red'>Reply PM from-<b>" + GlobalFuncs.key_name( this, C, 1 ) + "</b>: " + keywordparsedmsg + "</font>" );
					this.WriteMsg( "<font color='blue'>PM to-<b>Admins</b>: " + msg + "</font>" );
				}

				if ( Lang13.Bool( C.prefs.toggles & 1 ) ) {
					C.WriteMsg( "sound/effects/adminhelp.ogg" );
				}
			} else if ( this.holder != null ) {
				C.WriteMsg( "<font color='red' size='4'><b>-- Administrator private message --</b></font>" );
				C.WriteMsg( "<font color='red'>Admin PM from-<b>" + GlobalFuncs.key_name( this, C, 0 ) + "</b>: " + msg + "</font>" );
				C.WriteMsg( "<font color='red'><i>Click on the administrator's name to reply.</i></font>" );
				this.WriteMsg( "<font color='blue'>Admin PM to-<b>" + GlobalFuncs.key_name( C, this, 1 ) + "</b>: " + msg + "</font>" );
				C.WriteMsg( "sound/effects/adminhelp.ogg" );

				if ( GlobalVars.config.popup_admin_pm ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						sender = this;
						sendername = this.key;
						reply = Interface13.Input( C, msg, "Admin PM from-" + sendername, "", null, InputType.Str | InputType.Null );

						if ( Lang13.Bool( C ) && Lang13.Bool( reply ) ) {
							
							if ( sender != null ) {
								((Client)C).cmd_admin_pm( sender, reply );
							} else {
								this.adminhelp( reply );
							}
						}
						return;
						return;
					}));
				}
			} else {
				this.WriteMsg( "<font color='red'>Error: Admin-PM: Non-admin to non-admin PM communication is forbidden.</font>" );
				return;
			}
			GlobalFuncs.log_admin( "PM: " + GlobalFuncs.key_name( this ) + "->" + GlobalFuncs.key_name( C ) + ": " + rawmsg );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				X = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( X ) ) ) {
					continue;
				}

				if ( X.key != this.key && X.key != C.key ) {
					X.WriteMsg( new Txt( "<B><font color='blue'>PM: " ).item( GlobalFuncs.key_name( this, X, 0 ) ).str( "-&gt;" ).item( GlobalFuncs.key_name( C, X, 0 ) ).str( ":</B> " ).blue().item( keywordparsedmsg ).str( "</font>" ).ToString() );
				}
			}
			return;
		}

		// Function from file: adminpm.dm
		public void cmd_ahelp_reply( dynamic whom = null ) {
			dynamic C = null;
			dynamic msg = null;

			
			if ( ( this.prefs.muted & 8 ) != 0 ) {
				this.WriteMsg( "<font color='red'>Error: Admin-PM: You are unable to use admin PM-s (muted).</font>" );
				return;
			}

			if ( whom is string ) {
				
				if ( String13.CompareIgnoreCase( "@", String13.SubStr( whom, 1, 2 ) ) ) {
					whom = this.findStealthKey( whom );
				}
				C = GlobalVars.directory[whom];
			} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( whom ) ) ) {
				C = whom;
			}

			if ( !Lang13.Bool( C ) ) {
				
				if ( this.holder != null ) {
					this.WriteMsg( "<font color='red'>Error: Admin-PM: Client not found.</font>" );
				}
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has started replying to " + GlobalFuncs.key_name( C, 0, 0 ) + "'s admin help." );
			msg = Interface13.Input( this, "Message:", "Private message to " + GlobalFuncs.key_name( C, 0, 0 ), null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( msg ) ) {
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has cancelled their reply to " + GlobalFuncs.key_name( C, 0, 0 ) + "'s admin help." );
				return;
			}
			this.cmd_admin_pm( whom, msg );
			return;
		}

		// Function from file: adminpm.dm
		[VerbInfo( name: "Admin PM", group: "Admin" )]
		public void cmd_admin_pm_panel(  ) {
			ByTable targets = null;
			dynamic T = null;
			dynamic sorted = null;
			dynamic target = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "<font color='red'>Error: Admin-PM-Panel: Only administrators may use this command.</font>" );
				return;
			}
			targets = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) { // THERE IS A SMALL CHANCE THIS LOOP IS BROKEN! TYPECODE = 16384
				T = _a;
				

				if ( Lang13.Bool( T.mob ) ) {
					
					if ( T.mob is Mob_NewPlayer ) {
						targets["(New Player) - " + T] = T;
					} else if ( T.mob is Mob_Dead_Observer ) {
						targets["" + T.mob.name + "(Ghost) - " + T] = T;
					} else {
						targets["" + T.mob.real_name + "(as " + T.mob.name + ") - " + T] = T;
					}
				} else {
					targets["(No Mob) - " + T] = T;
				}
			}
			sorted = GlobalFuncs.sortList( targets );
			target = Interface13.Input( this, "To whom shall we send a message?", "Admin PM", null, sorted | null, InputType.Any );
			this.cmd_admin_pm( targets[target], null );
			GlobalFuncs.feedback_add_details( "admin_verb", "APM" );
			return;
		}

		// Function from file: adminpm.dm
		[VerbInfo( name: "Admin PM Mob" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void cmd_admin_pm_context( dynamic M = null ) {
			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "<font color='red'>Error: Admin-PM-Context: Only administrators may use this command.</font>" );
				return;
			}

			if ( !( M is Mob ) || !Lang13.Bool( M.client ) ) {
				return;
			}
			this.cmd_admin_pm( M.client, null );
			GlobalFuncs.feedback_add_details( "admin_verb", "APMM" );
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Send Mob", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalFunc, "sortmobs" )]
		public void sendmob( dynamic M = null ) {
			dynamic A = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			A = Interface13.Input( Task13.User, "Pick an area.", "Pick an area", null, GlobalVars.sortedAreas | null, InputType.Any );

			if ( Lang13.Bool( A ) && A is Zone ) {
				
				if ( ((Ent_Dynamic)M).forceMove( GlobalFuncs.safepick( GlobalFuncs.get_area_turfs( A ) ) ) ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " teleported " + GlobalFuncs.key_name( M ) + " to " + A );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " teleported " + GlobalFuncs.key_name_admin( M ) + " to " + A );
				} else {
					this.WriteMsg( "Failed to move mob to a valid location." );
				}
				GlobalFuncs.feedback_add_details( "admin_verb", "SMOB" );
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Get Key", desc: "Key to teleport", group: "Admin" )]
		public void Getkey(  ) {
			ByTable keys = null;
			dynamic M = null;
			dynamic selection = null;
			Ent_Dynamic M2 = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			keys = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				
				keys.Add( M.client );
			}
			selection = Interface13.Input( "Please, select a player!", "Admin Jumping", null, null, GlobalFuncs.sortKey( keys ), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( selection ) ) {
				return;
			}
			M2 = selection.mob;

			if ( !( M2 != null ) ) {
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " teleported " + GlobalFuncs.key_name( M2 ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " teleported " + GlobalFuncs.key_name( M2 ) );

			if ( M2 != null ) {
				M2.forceMove( GlobalFuncs.get_turf( Task13.User ) );
				Task13.User.loc = M2.loc;
				GlobalFuncs.feedback_add_details( "admin_verb", "GK" );
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Get Mob", desc: "Mob to teleport", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void Getmob( dynamic M = null ) {
			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " teleported " + GlobalFuncs.key_name( M ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " teleported " + GlobalFuncs.key_name_admin( M ) );
			((Ent_Dynamic)M).forceMove( GlobalFuncs.get_turf( Task13.User ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "GM" );
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Key", group: "Admin" )]
		public void jumptokey(  ) {
			ByTable keys = null;
			dynamic M = null;
			dynamic selection = null;
			Ent_Static M2 = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			keys = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				
				keys.Add( M.client );
			}
			selection = Interface13.Input( "Please, select a player!", "Admin Jumping", null, null, GlobalFuncs.sortKey( keys ), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( selection ) ) {
				this.WriteMsg( "No keys found." );
				return;
			}
			M2 = selection.mob;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " jumped to " + GlobalFuncs.key_name( M2 ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to " + GlobalFuncs.key_name_admin( M2 ) );
			Task13.User.forceMove( M2.loc );
			GlobalFuncs.feedback_add_details( "admin_verb", "JK" );
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Coordinate", group: "Admin" )]
		[VerbArg( 1, InputType.Num )]
		[VerbArg( 2, InputType.Num )]
		[VerbArg( 3, InputType.Num )]
		public void jumptocoord( double? tx = null, double? ty = null, double? tz = null ) {
			Mob A = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}

			if ( this.mob != null ) {
				A = this.mob;
				A.x = ((int)( tx ??0 ));
				A.y = ((int)( ty ??0 ));
				A.z = ((int)( tz ??0 ));
				GlobalFuncs.feedback_add_details( "admin_verb", "JC" );
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to coordinates " + tx + ", " + ty + ", " + tz );
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Mob", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void jumptomob( dynamic M = null ) {
			Mob A = null;
			dynamic T = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " jumped to " + GlobalFuncs.key_name( M ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to " + GlobalFuncs.key_name_admin( M ) );

			if ( this.mob != null ) {
				A = this.mob;
				T = GlobalFuncs.get_turf( M );

				if ( Lang13.Bool( T ) && T is Tile ) {
					GlobalFuncs.feedback_add_details( "admin_verb", "JM" );
					A.forceMove( M.loc );
				} else {
					A.WriteMsg( "This mob is not located in the game world." );
				}
			}
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Turf", group: "Admin" )]
		[VerbArg( 1, InputType.Tile )]
		public void jumptoturf( Ent_Static T = null ) {
			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " jumped to " + T.x + "," + T.y + "," + T.z + " in " + T.loc );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to " + T.x + "," + T.y + "," + T.z + " in " + T.loc );
			Task13.User.loc = T;
			GlobalFuncs.feedback_add_details( "admin_verb", "JT" );
			return;
		}

		// Function from file: adminjump.dm
		[VerbInfo( name: "Jump to Area", desc: "Area to jump to", group: "Admin" )]
		[VerbArg( 1, InputType.Zone, VerbArgFilter.FromGlobalVar, "sortedAreas" )]
		public void jumptoarea( Zone A = null ) {
			ByTable turfs = null;
			dynamic Ar = null;
			dynamic T = null;
			dynamic T2 = null;

			
			if ( !( this.holder != null ) ) {
				this.WriteMsg( "Only administrators may use this command." );
				return;
			}

			if ( !( A != null ) ) {
				return;
			}
			turfs = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( A.related )) {
				Ar = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( Ar )) {
					T = _a;
					

					if ( T.density ) {
						continue;
					}
					turfs.Add( T );
				}
			}
			T2 = GlobalFuncs.safepick( turfs );

			if ( !Lang13.Bool( T2 ) ) {
				this.WriteMsg( "Nowhere to jump to!" );
				return;
			}
			Task13.User.forceMove( T2 );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " jumped to " + A );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " jumped to " + A );
			GlobalFuncs.feedback_add_details( "admin_verb", "JA" );
			return;
		}

		// Function from file: adminhelp.dm
		public void giveadminhelpverb(  ) {
			this.verbs.Or( typeof(Client).GetMethod( "adminhelp" ) );
			this.adminhelptimerid = 0;
			return;
		}

		// Function from file: permissionedit.dm
		[VerbInfo( name: "Permissions Panel", desc: "Edit admin permissions", group: "Admin" )]
		public void edit_admin_permissions(  ) {
			
			if ( !GlobalFuncs.check_rights( 128 ) ) {
				return;
			}
			Task13.User.client.holder.edit_admin_permissions();
			return;
		}

		// Function from file: functions.dm
		[VerbInfo( name: "Banning Panel", desc: "Edit admin permissions", group: "Admin" )]
		public void DB_ban_panel(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.holder.DB_ban_panel();
			return;
		}

		// Function from file: watchlist.dm
		public bool check_watchlist( string target_ckey = null ) {
			string target_sql_ckey = null;
			DBQuery query_watch = null;
			dynamic err = null;

			target_sql_ckey = GlobalFuncs.sanitizeSQL( target_ckey );
			query_watch = GlobalVars.dbcon.NewQuery( "SELECT reason FROM " + GlobalFuncs.format_table_name( "watch" ) + " WHERE ckey = '" + target_sql_ckey + "'" );

			if ( !query_watch.Execute() ) {
				err = query_watch.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR obtaining reason from watch table. Error : [" + err + "]\n" );
				return false;
			}

			if ( query_watch.NextRow() ) {
				return Lang13.Bool( query_watch.item[1] );
			} else {
				return false;
			}
		}

		// Function from file: watchlist.dm
		public void watchlist_show( string search = null ) {
			dynamic output = null;
			DBQuery query_watchlist = null;
			dynamic err = null;
			dynamic ckey = null;
			dynamic reason = null;
			dynamic adminckey = null;
			dynamic timestamp = null;
			dynamic last_editor = null;

			output += "<form method='GET' name='search' action='?'><input type='hidden' name='_src_' value='holder'><input type='text' name='watchsearch' value='" + search + "'><input type='submit' value='Search'></form>";
			output += "<a href='?_src_=holder;watchshow=1'>[Clear Search]</a> <a href='?_src_=holder;watchaddbrowse=1'>[Add Ckey]</a>";
			output += "<hr style='background:#000000; border:0; height:3px'>";

			if ( Lang13.Bool( search ) ) {
				search = "^" + search;
			} else {
				search = "^.";
			}
			search = GlobalFuncs.sanitizeSQL( search );
			query_watchlist = GlobalVars.dbcon.NewQuery( "SELECT ckey, reason, adminckey, timestamp, last_editor FROM " + GlobalFuncs.format_table_name( "watch" ) + " WHERE ckey REGEXP '" + search + "' ORDER BY ckey" );

			if ( !query_watchlist.Execute() ) {
				err = query_watchlist.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR obtaining ckey, reason, adminckey, timestamp, last_editor from watch table. Error : [" + err + "]\n" );
				return;
			}

			while (query_watchlist.NextRow()) {
				ckey = query_watchlist.item[1];
				reason = query_watchlist.item[2];
				adminckey = query_watchlist.item[3];
				timestamp = query_watchlist.item[4];
				last_editor = query_watchlist.item[5];
				output += "<b>" + ckey + "</b> | Added by <b>" + adminckey + "</b> on <b>" + timestamp + "</b> <a href='?_src_=holder;watchremovebrowse=" + ckey + "'>[Remove]</a> <a href='?_src_=holder;watcheditbrowse=" + ckey + "'>[Edit Reason]</a>";

				if ( Lang13.Bool( last_editor ) ) {
					output += " <font size='2'>Last edit by " + last_editor + " <a href='?_src_=holder;watcheditlog=" + ckey + "'>(Click here to see edit log)</a></font>";
				}
				output += "<br>" + reason + "<hr style='background:#000000; border:0; height:1px'>";
			}
			Interface13.Browse( Task13.User, output, "window=watchwin;size=900x500" );
			return;
		}

		// Function from file: watchlist.dm
		public void watchlist_edit( dynamic target_ckey = null, bool? browse = null ) {
			browse = browse ?? false;

			string target_sql_ckey = null;
			DBQuery query_watchreason = null;
			dynamic err = null;
			dynamic watch_reason = null;
			dynamic new_reason = null;
			string sql_ckey = null;
			string edit_text = null;
			DBQuery query_watchupdate = null;
			dynamic err2 = null;

			target_sql_ckey = GlobalFuncs.sanitizeSQL( target_ckey );
			query_watchreason = GlobalVars.dbcon.NewQuery( "SELECT reason FROM " + GlobalFuncs.format_table_name( "watch" ) + " WHERE ckey = '" + target_sql_ckey + "'" );

			if ( !query_watchreason.Execute() ) {
				err = query_watchreason.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR obtaining reason from watch table. Error : [" + err + "]\n" );
				return;
			}

			if ( query_watchreason.NextRow() ) {
				watch_reason = query_watchreason.item[1];
				new_reason = Interface13.Input( "Input new reason", "New Reason", "" + watch_reason, null, null, InputType.StrMultiline );
				new_reason = GlobalFuncs.sanitizeSQL( new_reason );

				if ( !Lang13.Bool( new_reason ) ) {
					return;
				}
				sql_ckey = GlobalFuncs.sanitizeSQL( Task13.User.ckey );
				edit_text = "Edited by " + sql_ckey + " on " + GlobalFuncs.SQLtime() + " from<br>" + watch_reason + "<br>to<br>" + new_reason + "<hr>";
				edit_text = GlobalFuncs.sanitizeSQL( edit_text );
				query_watchupdate = GlobalVars.dbcon.NewQuery( "UPDATE " + GlobalFuncs.format_table_name( "watch" ) + " SET reason = '" + new_reason + "', last_editor = '" + sql_ckey + "', edits = CONCAT(IFNULL(edits,''),'" + edit_text + "') WHERE ckey = '" + target_sql_ckey + "'" );

				if ( !query_watchupdate.Execute() ) {
					err2 = query_watchupdate.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR editing watchlist reason. Error : [" + err2 + "]\n" );
					return;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has edited " + target_ckey + "'s watchlist reason from " + watch_reason + " to " + new_reason );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has edited " + target_ckey + "'s watchlist reason from<br>" + watch_reason + "<br>to<br>" + new_reason );

				if ( browse == true ) {
					this.watchlist_show( target_sql_ckey );
				}
			}
			return;
		}

		// Function from file: watchlist.dm
		public void watchlist_remove( dynamic target_ckey = null, bool? browse = null ) {
			browse = browse ?? false;

			string target_sql_ckey = null;
			DBQuery query_watchdel = null;
			dynamic err = null;

			target_sql_ckey = GlobalFuncs.sanitizeSQL( target_ckey );
			query_watchdel = GlobalVars.dbcon.NewQuery( "DELETE FROM " + GlobalFuncs.format_table_name( "watch" ) + " WHERE ckey = '" + target_sql_ckey + "'" );

			if ( !query_watchdel.Execute() ) {
				err = query_watchdel.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR during removing watch entry. Error : [" + err + "]\n" );
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has removed " + target_ckey + " from the watchlist" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has removed " + target_ckey + " from the watchlist" );

			if ( browse == true ) {
				this.watchlist_show();
			}
			return;
		}

		// Function from file: watchlist.dm
		public void watchlist_add( dynamic target_ckey = null, bool? browse = null ) {
			browse = browse ?? false;

			string new_ckey = null;
			DBQuery query_watchfind = null;
			dynamic err = null;
			string target_sql_ckey = null;
			dynamic reason = null;
			string timestamp = null;
			string adminckey = null;
			string admin_sql_ckey = null;
			DBQuery query_watchadd = null;
			dynamic err2 = null;

			
			if ( !Lang13.Bool( target_ckey ) ) {
				new_ckey = String13.CKey( Interface13.Input( Task13.User, "Who would you like to add to the watchlist?", "Enter a ckey", null, null, InputType.Str ) );

				if ( !Lang13.Bool( new_ckey ) ) {
					return;
				}
				new_ckey = GlobalFuncs.sanitizeSQL( new_ckey );
				query_watchfind = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM " + GlobalFuncs.format_table_name( "player" ) + " WHERE ckey = '" + new_ckey + "'" );

				if ( !query_watchfind.Execute() ) {
					err = query_watchfind.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining ckey from player table. Error : [" + err + "]\n" );
					return;
				}

				if ( !query_watchfind.NextRow() ) {
					
					if ( Interface13.Alert( Task13.User, "" + new_ckey + " has not been seen before, are you sure you want to add them to the watchlist?", "Unknown ckey", "Yes", "No", "Cancel" ) != "Yes" ) {
						return;
					}
				}
				target_ckey = new_ckey;
			}
			target_sql_ckey = GlobalFuncs.sanitizeSQL( target_ckey );

			if ( this.check_watchlist( target_sql_ckey ) ) {
				Task13.User.WriteMsg( "<span class='redtext'>" + target_sql_ckey + " is already on the watchlist.</span>" );
				return;
			}
			reason = Interface13.Input( Task13.User, "Please State Reason", "Reason", null, null, InputType.StrMultiline );

			if ( !Lang13.Bool( reason ) ) {
				return;
			}
			reason = GlobalFuncs.sanitizeSQL( reason );
			timestamp = GlobalFuncs.SQLtime();
			adminckey = Task13.User.ckey;

			if ( !Lang13.Bool( adminckey ) ) {
				return;
			}
			admin_sql_ckey = GlobalFuncs.sanitizeSQL( adminckey );
			query_watchadd = GlobalVars.dbcon.NewQuery( "INSERT INTO " + GlobalFuncs.format_table_name( "watch" ) + " (ckey, reason, adminckey, timestamp) VALUES ('" + target_sql_ckey + "', '" + reason + "', '" + admin_sql_ckey + "', '" + timestamp + "')" );

			if ( !query_watchadd.Execute() ) {
				err2 = query_watchadd.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR during adding new watch entry. Error : [" + err2 + "]\n" );
				return;
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has added " + target_ckey + " to the watchlist - Reason: " + reason );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has added " + target_ckey + " to the watchlist - Reason: " + reason );

			if ( browse == true ) {
				this.watchlist_show( target_sql_ckey );
			}
			return;
		}

		// Function from file: stickyban.dm
		[VerbInfo( name: "Sticky Ban Panel", group: "Admin" )]
		public void stickybanpanel(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.holder.stickyban_show();
			return;
		}

		// Function from file: create_poll.dm
		public bool create_poll_function(  ) {
			dynamic polltype = null;
			dynamic choice_amount = null;
			string starttime = null;
			dynamic endtime = null;
			DBQuery query_validate_time = null;
			dynamic err = null;
			DBQuery query_time_later = null;
			dynamic err2 = null;
			double? checklate = null;
			bool? adminonly = null;
			string sql_ckey = null;
			dynamic question = null;
			DBQuery query_polladd_question = null;
			dynamic err3 = null;
			bool pollid = false;
			DBQuery query_get_id = null;
			dynamic err4 = null;
			bool add_option = false;
			dynamic option = null;
			bool? percentagecalc = null;
			dynamic minval = null;
			dynamic maxval = null;
			dynamic descmin = null;
			dynamic descmid = null;
			dynamic descmax = null;
			DBQuery query_polladd_option = null;
			dynamic err5 = null;

			polltype = Interface13.Input( "Choose poll type.", "Poll Type", null, null, new ByTable(new object [] { "Single Option", "Text Reply", "Rating", "Multiple Choice" }), InputType.Any );
			choice_amount = 0;

			dynamic _a = polltype; // Was a switch-case, sorry for the mess.
			if ( _a=="Single Option" ) {
				polltype = "OPTION";
			} else if ( _a=="Text Reply" ) {
				polltype = "TEXT";
			} else if ( _a=="Rating" ) {
				polltype = "NUMVAL";
			} else if ( _a=="Multiple Choice" ) {
				polltype = "MULTICHOICE";
				choice_amount = Interface13.Input( "How many choices should be allowed?", "Select choice amount", null, null, null, InputType.Num | InputType.Null );

				if ( !Lang13.Bool( choice_amount ) ) {
					return false;
				}
			}
			starttime = GlobalFuncs.SQLtime();
			endtime = Interface13.Input( "Set end time for poll as format YYYY-MM-DD HH:MM:SS. All times in server time. HH:MM:SS is optional and 24-hour. Must be later than starting time for obvious reasons.", "Set end time", GlobalFuncs.SQLtime(), null, null, InputType.Str );

			if ( !Lang13.Bool( endtime ) ) {
				return false;
			}
			endtime = GlobalFuncs.sanitizeSQL( endtime );
			query_validate_time = GlobalVars.dbcon.NewQuery( "SELECT STR_TO_DATE('" + endtime + "','%Y-%c-%d %T')" );

			if ( !query_validate_time.Execute() ) {
				err = query_validate_time.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR validating endtime. Error : [" + err + "]\n" );
				return false;
			}

			if ( query_validate_time.NextRow() ) {
				endtime = query_validate_time.item[1];

				if ( !Lang13.Bool( endtime ) ) {
					this.WriteMsg( "Datetime entered is invalid." );
					return false;
				}
			}
			query_time_later = GlobalVars.dbcon.NewQuery( "SELECT TIMESTAMP('" + endtime + "') < NOW()" );

			if ( !query_time_later.Execute() ) {
				err2 = query_time_later.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR comparing endtime to NOW(). Error : [" + err2 + "]\n" );
				return false;
			}

			if ( query_time_later.NextRow() ) {
				checklate = String13.ParseNumber( query_time_later.item[1] );

				if ( Lang13.Bool( checklate ) ) {
					this.WriteMsg( "Datetime entered is not later than current server time." );
					return false;
				}
			}
			adminonly = null;

			switch ((string)( Interface13.Alert( "Admin only poll?", null, "Yes", "No", "Cancel" ) )) {
				case "Yes":
					adminonly = true;
					break;
				case "No":
					adminonly = false;
					break;
				default:
					return false;
					break;
			}
			sql_ckey = GlobalFuncs.sanitizeSQL( this.ckey );
			question = Interface13.Input( "Write your question", "Question", null, null, null, InputType.Null | InputType.StrMultiline );

			if ( !Lang13.Bool( question ) ) {
				return false;
			}
			question = GlobalFuncs.sanitizeSQL( question );
			query_polladd_question = GlobalVars.dbcon.NewQuery( "INSERT INTO " + GlobalFuncs.format_table_name( "poll_question" ) + " (polltype, starttime, endtime, question, adminonly, multiplechoiceoptions, createdby_ckey, createdby_ip) VALUES ('" + polltype + "', '" + starttime + "', '" + endtime + "', '" + question + "', '" + adminonly + "', '" + choice_amount + "', '" + sql_ckey + "', '" + this.address + "')" );

			if ( !query_polladd_question.Execute() ) {
				err3 = query_polladd_question.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR adding new poll question to table. Error : [" + err3 + "]\n" );
				return false;
			}

			if ( polltype == "TEXT" ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has created a new server poll. Poll type: " + polltype + " - Admin Only: " + ( adminonly == true ? "Yes" : "No" ) + " - Question: " + question );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new server poll. Poll type: " + polltype + " - Admin Only: " + ( adminonly == true ? "Yes" : "No" ) + "<br>Question: " + question );
				return false;
			}
			pollid = false;
			query_get_id = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE question = '" + question + "' AND starttime = '" + starttime + "' AND endtime = '" + endtime + "' AND createdby_ckey = '" + sql_ckey + "' AND createdby_ip = '" + this.address + "'" );

			if ( !query_get_id.Execute() ) {
				err4 = query_get_id.ErrorMsg();
				GlobalFuncs.log_game( "SQL ERROR obtaining id from poll_question table. Error : [" + err4 + "]\n" );
				return false;
			}

			if ( query_get_id.NextRow() ) {
				pollid = Lang13.Bool( query_get_id.item[1] );
			}
			add_option = true;

			while (add_option) {
				option = Interface13.Input( "Write your option", "Option", null, null, null, InputType.Null | InputType.StrMultiline );

				if ( !Lang13.Bool( option ) ) {
					return pollid;
				}
				option = GlobalFuncs.sanitizeSQL( option );
				percentagecalc = null;

				switch ((string)( Interface13.Alert( "Calculate option results as percentage?", null, "Yes", "No", "Cancel" ) )) {
					case "Yes":
						percentagecalc = true;
						break;
					case "No":
						percentagecalc = false;
						break;
					default:
						return pollid;
						break;
				}
				minval = 0;
				maxval = 0;
				descmin = "";
				descmid = "";
				descmax = "";

				if ( polltype == "NUMVAL" ) {
					minval = Interface13.Input( "Set minimum rating value.", "Minimum rating", null, null, null, InputType.Num | InputType.Null );

					if ( !Lang13.Bool( minval ) ) {
						return pollid;
					}
					maxval = Interface13.Input( "Set maximum rating value.", "Maximum rating", null, null, null, InputType.Num | InputType.Null );

					if ( !Lang13.Bool( maxval ) ) {
						return pollid;
					}

					if ( Convert.ToDouble( minval ) >= Convert.ToDouble( maxval ) ) {
						this.WriteMsg( "Minimum rating value can't be more than maximum rating value" );
						return pollid;
					}
					descmin = Interface13.Input( "Optional: Set description for minimum rating", "Minimum rating description", null, null, null, InputType.Null | InputType.StrMultiline );

					if ( Lang13.Bool( descmin ) ) {
						descmin = GlobalFuncs.sanitizeSQL( descmin );
					} else if ( descmin == null ) {
						return pollid;
					}
					descmid = Interface13.Input( "Optional: Set description for median rating", "Median rating description", null, null, null, InputType.Null | InputType.StrMultiline );

					if ( Lang13.Bool( descmid ) ) {
						descmid = GlobalFuncs.sanitizeSQL( descmid );
					} else if ( descmid == null ) {
						return pollid;
					}
					descmax = Interface13.Input( "Optional: Set description for maximum rating", "Maximum rating description", null, null, null, InputType.Null | InputType.StrMultiline );

					if ( Lang13.Bool( descmax ) ) {
						descmax = GlobalFuncs.sanitizeSQL( descmax );
					} else if ( descmax == null ) {
						return pollid;
					}
				}
				query_polladd_option = GlobalVars.dbcon.NewQuery( "INSERT INTO " + GlobalFuncs.format_table_name( "poll_option" ) + " (pollid, text, percentagecalc, minval, maxval, descmin, descmid, descmax) VALUES ('" + pollid + "', '" + option + "', '" + percentagecalc + "', '" + minval + "', '" + maxval + "', '" + descmin + "', '" + descmid + "', '" + descmax + "')" );

				if ( !query_polladd_option.Execute() ) {
					err5 = query_polladd_option.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR adding new poll option to table. Error : [" + err5 + "]\n" );
					return pollid;
				}

				switch ((string)( Interface13.Alert( " ", null, "Add option", "Finish" ) )) {
					case "Add option":
						add_option = true;
						break;
					case "Finish":
						add_option = false;
						break;
				}
			}
			return pollid;
		}

		// Function from file: create_poll.dm
		[VerbInfo( name: "Create Poll", group: "Special Verbs" )]
		public void create_poll(  ) {
			bool returned = false;
			DBQuery query_check_option = null;
			dynamic err = null;
			DBQuery query_log_get = null;
			dynamic err2 = null;
			dynamic polltype = null;
			dynamic question = null;
			double? adminonly = null;
			DBQuery query_del_poll = null;
			dynamic err3 = null;

			
			if ( !GlobalFuncs.check_rights( 128 ) ) {
				return;
			}

			if ( !GlobalVars.dbcon.IsConnected() ) {
				this.WriteMsg( "<span class='danger'>Failed to establish database connection.</span>" );
				return;
			}
			returned = this.create_poll_function();

			if ( returned ) {
				query_check_option = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "poll_option" ) + " WHERE pollid = " + returned );

				if ( !query_check_option.Execute() ) {
					err = query_check_option.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining id from poll_option table. Error : [" + err + "]\n" );
					return;
				}

				if ( query_check_option.NextRow() ) {
					query_log_get = GlobalVars.dbcon.NewQuery( "SELECT polltype, question, adminonly FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE id = " + returned );

					if ( !query_log_get.Execute() ) {
						err2 = query_log_get.ErrorMsg();
						GlobalFuncs.log_game( "SQL ERROR obtaining polltype, question, adminonly from poll_question table. Error : [" + err2 + "]\n" );
						return;
					}

					if ( query_log_get.NextRow() ) {
						polltype = query_log_get.item[1];
						question = query_log_get.item[2];
						adminonly = String13.ParseNumber( query_log_get.item[3] );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has created a new server poll. Poll type: " + polltype + " - Admin Only: " + ( Lang13.Bool( adminonly ) ? "Yes" : "No" ) + " - Question: " + question );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new server poll. Poll type: " + polltype + " - Admin Only: " + ( Lang13.Bool( adminonly ) ? "Yes" : "No" ) + "<br>Question: " + question );
					}
				} else {
					this.WriteMsg( "Poll question created without any options, poll will be deleted." );
					query_del_poll = GlobalVars.dbcon.NewQuery( "DELETE FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE id = " + returned );

					if ( !query_del_poll.Execute() ) {
						err3 = query_del_poll.ErrorMsg();
						GlobalFuncs.log_game( "SQL ERROR deleting poll question " + returned + ". Error : [" + err3 + "]\n" );
						return;
					}
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Toggle Admin AI Interact", desc: "Allows you to interact with most machines as an AI would as a ghost", group: "Admin" )]
		public void toggle_AI_interact(  ) {
			this.AI_Interact = !this.AI_Interact;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has " + ( this.AI_Interact ? "activated" : "deactivated" ) + " Admin AI Interact" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has " + ( this.AI_Interact ? "activated" : "deactivated" ) + " their AI interaction" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Populate World", desc: "(\"Amount of mobs to create\") Populate the world with test mobs.", group: "Debug" )]
		[VerbArg( 1, InputType.Num )]
		public void populate_world( int? amount = null ) {
			amount = amount ?? 50;

			dynamic area = null;
			ByTable candidates = null;
			dynamic tile = null;
			int j = 0;
			int k = 0;
			Mob_Living_Carbon_Human_Interactive mob = null;
			double i = 0;

			
			if ( ( amount ??0) > 0 ) {
				
				foreach (dynamic _a in Lang13.IterateRange( 1, amount )) {
					i = _a;
					
					j = 100;

					do {
						area = Rand13.PickFromTable( GlobalVars.the_station_areas );

						if ( Lang13.Bool( area ) ) {
							candidates = GlobalFuncs.get_area_turfs( area );

							if ( candidates.len != 0 ) {
								k = 100;

								do {
									tile = Rand13.PickFromTable( candidates );
								} while ( ( !Lang13.Bool( tile ) || !( tile is Tile_Simulated_Floor ) ) && --k > 0 );

								if ( Lang13.Bool( tile ) ) {
									mob = new Mob_Living_Carbon_Human_Interactive( tile );
									GlobalFuncs.testing( "Spawned test mob with name \"" + mob.name + "\" at " + tile.x + "," + tile.y + "," + tile.z );
								}
							}
						}
					} while ( !Lang13.Bool( area ) && --j > 0 );
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Readmin", desc: "Regain your admin powers.", group: "Admin" )]
		public void readmin(  ) {
			GlobalFuncs.load_admins( this.ckey );

			if ( !( this.holder != null ) ) {
				return;
			}
			GlobalVars.deadmins.Remove( this.ckey );
			this.verbs.Remove( typeof(Client).GetMethod( "readmin" ) );
			this.WriteMsg( "<span class='interface'>You are now an admin.</span>" );
			GlobalFuncs.message_admins( "" + this + " re-adminned themselves." );
			GlobalFuncs.log_admin( "" + this + " re-adminned themselves." );
			GlobalFuncs.feedback_add_details( "admin_verb", "RAS" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Deadmin", desc: "Shed your admin powers.", group: "Admin" )]
		public void deadmin(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.holder.disassociate();
			GlobalFuncs.qdel( this.holder );
			GlobalVars.deadmins.Add( this.ckey );
			GlobalVars.admin_datums.Remove( this.ckey );
			this.verbs.Add( typeof(Client).GetMethod( "readmin" ) );
			this.WriteMsg( "<span class='interface'>You are now a normal player.</span>" );
			GlobalFuncs.log_admin( "" + this + " deadmined themself." );
			GlobalFuncs.message_admins( "" + this + " deadmined themself." );
			GlobalFuncs.feedback_add_details( "admin_verb", "DAS" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Check AI Laws", group: "Admin" )]
		public void check_ai_laws(  ) {
			
			if ( this.holder != null ) {
				this.holder.output_ai_laws();
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Toggle href logging", group: "Server" )]
		public void toggle_log_hrefs(  ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}

			if ( GlobalVars.config != null ) {
				
				if ( GlobalVars.config.log_hrefs ) {
					GlobalVars.config.log_hrefs = false;
					this.WriteMsg( "<b>Stopped logging hrefs</b>" );
				} else {
					GlobalVars.config.log_hrefs = true;
					this.WriteMsg( "<b>Started logging hrefs</b>" );
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Toggle Build Mode Self", group: "Special Verbs" )]
		public void togglebuildmodeself(  ) {
			
			if ( this.mob != null ) {
				GlobalFuncs.togglebuildmode( this.mob );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TBMS" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "OSay", desc: "Makes an object say something.", group: "Special Verbs" )]
		[VerbArg( 1, InputType.Obj )]
		public void object_say( Ent_Dynamic O = null ) {
			dynamic message = null;
			int templanguages = 0;

			message = Interface13.Input( Task13.User, "What do you want the message to be?", "Make Sound", null, null, InputType.Str | InputType.Null );

			if ( !Lang13.Bool( message ) ) {
				return;
			}
			templanguages = O.languages;
			O.languages |= 65535;
			O.say( message );
			O.languages = templanguages;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made " + O + " at " + O.x + ", " + O.y + ", " + O.z + " say \"" + message + "\"" );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made " + O + " at " + O.x + ", " + O.y + ", " + O.z + ". say \"" + message + "\"</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "OS" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Give Disease", desc: "Gives a Disease to a mob.", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void give_disease( dynamic T = null ) {
			dynamic D = null;

			D = Interface13.Input( "Choose the disease to give to that guy", "ACHOO", null, null, GlobalVars.diseases, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( D ) ) {
				return;
			}
			((Mob)T).ForceContractDisease( Lang13.Call( D ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "GD" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " gave " + GlobalFuncs.key_name( T ) + " the disease " + D + "." );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " gave " + GlobalFuncs.key_name( T ) + " the disease " + D + ".</span>" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Give Spell", desc: "Gives a spell to a mob.", group: "Fun" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void give_spell( dynamic T = null ) {
			ByTable spell_list = null;
			int type_length = 0;
			dynamic A = null;
			dynamic S = null;

			spell_list = new ByTable();
			type_length = Lang13.Length( "/obj/effect/proc_holder/spell" ) + 2;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.spells )) {
				A = _a;
				
				spell_list[String13.SubStr( "" + A, type_length, 0 )] = A;
			}
			S = Interface13.Input( "Choose the spell to give to that guy", "ABRAKADABRA", null, null, spell_list, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( S ) ) {
				return;
			}
			S = spell_list[S];
			GlobalFuncs.feedback_add_details( "admin_verb", "GS" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " gave " + GlobalFuncs.key_name( T ) + " the spell " + S + "." );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " gave " + GlobalFuncs.key_name( T ) + " the spell " + S + ".</span>" );

			if ( Lang13.Bool( T.mind ) ) {
				T.mind.AddSpell( Lang13.Call( S ) );
			} else {
				((Mob)T).AddSpell( Lang13.Call( S ) );
				GlobalFuncs.message_admins( "<span class='danger'>Spells given to mindless mobs will not be transferred in mindswap or cloning!</span>" );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Drop Bomb", desc: "Cause an explosion of varying strength at your location.", group: "Special Verbs" )]
		public bool drop_bomb(  ) {
			Ent_Static epicenter = null;
			ByTable choices = null;
			dynamic choice = null;
			dynamic devastation_range = null;
			dynamic heavy_impact_range = null;
			dynamic light_impact_range = null;
			dynamic flash_range = null;

			epicenter = this.mob.loc;
			choices = new ByTable(new object [] { "Small Bomb", "Medium Bomb", "Big Bomb", "Custom Bomb" });
			choice = Interface13.Input( "What size explosion would you like to produce?", null, null, null, choices, InputType.Any );

			dynamic _a = choice; // Was a switch-case, sorry for the mess.
			if ( _a==null ) {
				return false;
			} else if ( _a=="Small Bomb" ) {
				GlobalFuncs.explosion( epicenter, 1, 2, 3, 3 );
			} else if ( _a=="Medium Bomb" ) {
				GlobalFuncs.explosion( epicenter, 2, 3, 4, 4 );
			} else if ( _a=="Big Bomb" ) {
				GlobalFuncs.explosion( epicenter, 3, 5, 7, 5 );
			} else if ( _a=="Custom Bomb" ) {
				devastation_range = Interface13.Input( "Devastation range (in tiles):", null, null, null, null, InputType.Num | InputType.Null );

				if ( devastation_range == null ) {
					return false;
				}
				heavy_impact_range = Interface13.Input( "Heavy impact range (in tiles):", null, null, null, null, InputType.Num | InputType.Null );

				if ( heavy_impact_range == null ) {
					return false;
				}
				light_impact_range = Interface13.Input( "Light impact range (in tiles):", null, null, null, null, InputType.Num | InputType.Null );

				if ( light_impact_range == null ) {
					return false;
				}
				flash_range = Interface13.Input( "Flash range (in tiles):", null, null, null, null, InputType.Num | InputType.Null );

				if ( flash_range == null ) {
					return false;
				}
				GlobalFuncs.explosion( epicenter, devastation_range, heavy_impact_range, light_impact_range, flash_range );
			}
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + this.ckey + " creating an admin explosion at " + epicenter.loc + ".</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "DB" );
			return false;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Stealth Mode", group: "Admin" )]
		public void stealth(  ) {
			string new_key = null;

			
			if ( this.holder != null ) {
				
				if ( Lang13.Bool( this.holder.fakekey ) ) {
					this.holder.fakekey = null;

					if ( this.mob is Mob_Dead_Observer ) {
						this.mob.invisibility = Convert.ToInt32( Lang13.Initial( this.mob, "invisibility" ) );
						this.mob.alpha = Convert.ToInt32( Lang13.Initial( this.mob, "alpha" ) );
						this.mob.name = Lang13.Initial( this.mob, "name" );
						this.mob.mouse_opacity = Convert.ToInt32( Lang13.Initial( this.mob, "mouse_opacity" ) );
					}
				} else {
					new_key = String13.CKeyPreserveCase( Interface13.Input( "Enter your desired display name.", "Fake Key", this.key, null, null, InputType.Str | InputType.Null ) );

					if ( !Lang13.Bool( new_key ) ) {
						return;
					}

					if ( Lang13.Length( new_key ) >= 26 ) {
						new_key = String13.SubStr( new_key, 1, 26 );
					}
					this.holder.fakekey = new_key;
					this.createStealthKey();

					if ( this.mob is Mob_Dead_Observer ) {
						this.mob.invisibility = 101;
						this.mob.alpha = 0;
						this.mob.name = " ";
						this.mob.mouse_opacity = 0;
					}
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has turned stealth mode " + ( Lang13.Bool( this.holder.fakekey ) ? "ON" : "OFF" ) );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has turned stealth mode " + ( Lang13.Bool( this.holder.fakekey ) ? "ON" : "OFF" ) );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SM" );
			return;
		}

		// Function from file: admin_verbs.dm
		public void createStealthKey(  ) {
			double num = 0;
			bool i = false;
			dynamic P = null;

			num = Rand13.Int( 0, 1000 );
			i = false;

			while (!i) {
				i = true;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.stealthminID )) {
					P = _a;
					

					if ( num == Convert.ToDouble( GlobalVars.stealthminID[P] ) ) {
						num++;
						i = false;
					}
				}
			}
			GlobalVars.stealthminID["" + this.ckey] = "@" + String13.NumberToString( num );
			return;
		}

		// Function from file: admin_verbs.dm
		public dynamic findStealthKey( dynamic txt = null ) {
			dynamic P = null;

			
			if ( Lang13.Bool( txt ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.stealthminID )) {
					P = _a;
					

					if ( GlobalVars.stealthminID[P] == txt ) {
						return P;
					}
				}
			}
			txt = GlobalVars.stealthminID[this.ckey];
			return txt;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Secrets", group: "Admin" )]
		public void secrets(  ) {
			
			if ( this.holder != null ) {
				this.holder.Secrets();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "S" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Game Panel", group: "Admin" )]
		public void game_panel(  ) {
			
			if ( this.holder != null ) {
				this.holder.Game();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "GP" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Unban Panel", group: "Admin" )]
		public void unban_panel(  ) {
			
			if ( this.holder != null ) {
				
				if ( GlobalVars.config.ban_legacy_system ) {
					this.holder.unbanpanel();
				} else {
					this.holder.DB_ban_panel();
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "UBP" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Check Antagonists", group: "Admin" )]
		public void check_antagonists(  ) {
			
			if ( this.holder != null ) {
				this.holder.check_antagonists();
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " checked antagonists." );

				if ( !( Task13.User is Mob_Dead_Observer ) ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " checked antagonists." );
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "CHA" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Player Panel", group: "Admin" )]
		public void player_panel_new(  ) {
			
			if ( this.holder != null ) {
				this.holder.player_panel_new();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "PPN" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Invisimin", desc: "Toggles ghost-like invisibility (Don't abuse this)", group: "Admin" )]
		public void invisimin(  ) {
			
			if ( this.holder != null && this.mob != null ) {
				
				if ( this.mob.invisibility == 60 ) {
					this.mob.invisibility = Convert.ToInt32( Lang13.Initial( this.mob, "invisibility" ) );
					this.mob.WriteMsg( "<span class='boldannounce'>Invisimin off. Invisibility reset.</span>" );
				} else {
					this.mob.invisibility = 60;
					this.mob.WriteMsg( "<span class='adminnotice'><b>Invisimin on. You are now as invisible as a ghost.</b></span>" );
				}
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Aghost", group: "Admin" )]
		public void admin_ghost(  ) {
			Mob ghost = null;
			Mob body = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}

			if ( this.mob is Mob_Dead_Observer ) {
				ghost = this.mob;

				if ( !( ghost.mind != null ) || !Lang13.Bool( ghost.mind.current ) ) {
					return;
				}

				if ( !Lang13.Bool( ((dynamic)ghost).can_reenter_corpse ) ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " re-entered corpse" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " re-entered corpse" );
				}
				((dynamic)ghost).can_reenter_corpse = 1;
				((Mob_Dead_Observer)ghost).reenter_corpse();
				GlobalFuncs.feedback_add_details( "admin_verb", "P" );
			} else if ( this.mob is Mob_NewPlayer ) {
				this.WriteMsg( "<font color='red'>Error: Aghost: Can't admin-ghost whilst in the lobby. Join or Observe first.</font>" );
			} else {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " admin ghosted" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " admin ghosted" );
				body = this.mob;
				body.ghostize( true );

				if ( body != null && !Lang13.Bool( body.key ) ) {
					body.key = "@" + this.key;
				}
				GlobalFuncs.feedback_add_details( "admin_verb", "O" );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Adminverbs - Show", group: "Admin" )]
		public void show_verbs(  ) {
			this.verbs.Remove( typeof(Client).GetMethod( "show_verbs" ) );
			this.add_admin_verbs();
			this.WriteMsg( "<span class='interface'>All of your adminverbs are now visible.</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAVVS" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Adminverbs - Hide All", group: "Admin" )]
		public void hide_verbs(  ) {
			this.remove_admin_verbs();
			this.verbs.Add( typeof(Client).GetMethod( "show_verbs" ) );
			this.WriteMsg( "<span class='interface'>Almost all of your adminverbs have been hidden.</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAVVH" );
			return;
		}

		// Function from file: admin_verbs.dm
		[VerbInfo( name: "Adminverbs - Hide Most", group: "Admin" )]
		public void hide_most_verbs(  ) {
			this.verbs.Remove( typeof(Client).GetMethod( "hide_most_verbs" ), GlobalVars.admin_verbs_hideable );
			this.verbs.Add( typeof(Client).GetMethod( "show_verbs" ) );
			this.WriteMsg( "<span class='interface'>Most of your adminverbs have been hidden.</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "HMV" );
			return;
		}

		// Function from file: admin_verbs.dm
		public void remove_admin_verbs(  ) {
			this.verbs.Remove( GlobalVars.admin_verbs_default, typeof(Client).GetMethod( "togglebuildmodeself" ), GlobalVars.admin_verbs_admin, GlobalVars.admin_verbs_ban, GlobalVars.admin_verbs_fun, GlobalVars.admin_verbs_server, GlobalVars.admin_verbs_debug, GlobalVars.admin_verbs_possess, GlobalVars.admin_verbs_permissions, typeof(Client).GetMethod( "stealth" ), GlobalVars.admin_verbs_rejuv, GlobalVars.admin_verbs_sounds, GlobalVars.admin_verbs_spawn, typeof(Client).GetMethod( "Cell" ), typeof(Client).GetMethod( "do_not_use_these" ), typeof(Client).GetMethod( "camera_view" ), typeof(Client).GetMethod( "sec_camera_report" ), typeof(Client).GetMethod( "intercom_view" ), typeof(Client).GetMethod( "air_status" ), typeof(Client).GetMethod( "atmosscan" ), typeof(Client).GetMethod( "powerdebug" ), typeof(Client).GetMethod( "count_objects_on_z_level" ), typeof(Client).GetMethod( "count_objects_all" ), typeof(Client).GetMethod( "cmd_assume_direct_control" ), typeof(Client).GetMethod( "startSinglo" ), typeof(Client).GetMethod( "fps" ), typeof(Client).GetMethod( "cmd_admin_grantfullaccess" ), typeof(Client).GetMethod( "cmd_admin_areatest" ), typeof(Client).GetMethod( "readmin" ) );

			if ( this.holder != null ) {
				this.verbs.Remove( this.holder.rank.adds );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		public void add_admin_verbs(  ) {
			dynamic rights = null;
			dynamic path = null;
			dynamic path2 = null;

			
			if ( this.holder != null ) {
				this.control_freak = 6;
				rights = this.holder.rank.rights;
				this.verbs.Add( GlobalVars.admin_verbs_default );

				if ( Lang13.Bool( rights & 1 ) ) {
					this.verbs.Add( typeof(Client).GetMethod( "togglebuildmodeself" ) );
				}

				if ( Lang13.Bool( rights & 2 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_admin );
				}

				if ( Lang13.Bool( rights & 4 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_ban );
				}

				if ( Lang13.Bool( rights & 8 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_fun );
				}

				if ( Lang13.Bool( rights & 16 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_server );
				}

				if ( Lang13.Bool( rights & 32 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_debug );
				}

				if ( Lang13.Bool( rights & 64 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_possess );
				}

				if ( Lang13.Bool( rights & 128 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_permissions );
				}

				if ( Lang13.Bool( rights & 256 ) ) {
					this.verbs.Add( typeof(Client).GetMethod( "stealth" ) );
				}

				if ( Lang13.Bool( rights & 512 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_rejuv );
				}

				if ( Lang13.Bool( rights & 2048 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_sounds );
				}

				if ( Lang13.Bool( rights & 4096 ) ) {
					this.verbs.Add( GlobalVars.admin_verbs_spawn );
				}

				foreach (dynamic _a in Lang13.Enumerate( this.holder.rank.adds )) {
					path = _a;
					
					this.verbs.Add( path );
				}

				foreach (dynamic _b in Lang13.Enumerate( this.holder.rank.subs )) {
					path2 = _b;
					
					this.verbs.Remove( path2 );
				}
			}
			return;
		}

		// Function from file: admin_memo.dm
		public void admin_memo_output( dynamic task = null ) {
			string sql_ckey = null;
			DBQuery query_memocheck = null;
			dynamic err = null;
			dynamic memotext = null;
			string timestamp = null;
			DBQuery query_memoadd = null;
			dynamic err2 = null;
			DBQuery query_memolist = null;
			dynamic err3 = null;
			ByTable memolist = null;
			dynamic lkey = null;
			dynamic target_ckey = null;
			string target_sql_ckey = null;
			DBQuery query_memofind = null;
			dynamic err4 = null;
			dynamic old_memo = null;
			dynamic new_memo = null;
			string edit_text = null;
			DBQuery update_query = null;
			dynamic err5 = null;
			DBQuery query_memoshow = null;
			dynamic err6 = null;
			dynamic output = null;
			dynamic ckey = null;
			dynamic memotext2 = null;
			dynamic timestamp2 = null;
			dynamic last_editor = null;
			DBQuery query_memodellist = null;
			dynamic err7 = null;
			ByTable memolist2 = null;
			dynamic ckey2 = null;
			dynamic target_ckey2 = null;
			string target_sql_ckey2 = null;
			DBQuery query_memodel = null;
			dynamic err8 = null;

			
			if ( !Lang13.Bool( task ) ) {
				return;
			}

			if ( !GlobalVars.dbcon.IsConnected() ) {
				this.WriteMsg( "<span class='danger'>Failed to establish database connection.</span>" );
				return;
			}
			sql_ckey = GlobalFuncs.sanitizeSQL( this.ckey );

			dynamic _a = task; // Was a switch-case, sorry for the mess.
			if ( _a=="Write" ) {
				query_memocheck = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM " + GlobalFuncs.format_table_name( "memo" ) + " WHERE ckey = '" + sql_ckey + "'" );

				if ( !query_memocheck.Execute() ) {
					err = query_memocheck.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining ckey from memo table. Error : [" + err + "]\n" );
					return;
				}

				if ( query_memocheck.NextRow() ) {
					this.WriteMsg( "You already have set a memo." );
					return;
				}
				memotext = Interface13.Input( this, "Write your Memo", "Memo", null, null, InputType.StrMultiline );

				if ( !Lang13.Bool( memotext ) ) {
					return;
				}
				memotext = GlobalFuncs.sanitizeSQL( memotext );
				timestamp = GlobalFuncs.SQLtime();
				query_memoadd = GlobalVars.dbcon.NewQuery( "INSERT INTO " + GlobalFuncs.format_table_name( "memo" ) + " (ckey, memotext, timestamp) VALUES ('" + sql_ckey + "', '" + memotext + "', '" + timestamp + "')" );

				if ( !query_memoadd.Execute() ) {
					err2 = query_memoadd.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR adding new memo. Error : [" + err2 + "]\n" );
					return;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has set a memo: " + memotext );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has set a memo:<br>" + memotext );
			} else if ( _a=="Edit" ) {
				query_memolist = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM " + GlobalFuncs.format_table_name( "memo" ) );

				if ( !query_memolist.Execute() ) {
					err3 = query_memolist.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining ckey from memo table. Error : [" + err3 + "]\n" );
					return;
				}
				memolist = new ByTable();

				while (query_memolist.NextRow()) {
					lkey = query_memolist.item[1];
					memolist.Add( "" + lkey );
				}

				if ( !( memolist.len != 0 ) ) {
					this.WriteMsg( "No memos found in database." );
					return;
				}
				target_ckey = Interface13.Input( this, "Select whose memo to edit", "Select memo", null, memolist, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( target_ckey ) ) {
					return;
				}
				target_sql_ckey = GlobalFuncs.sanitizeSQL( target_ckey );
				query_memofind = GlobalVars.dbcon.NewQuery( "SELECT memotext FROM " + GlobalFuncs.format_table_name( "memo" ) + " WHERE ckey = '" + target_sql_ckey + "'" );

				if ( !query_memofind.Execute() ) {
					err4 = query_memofind.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining memotext from memo table. Error : [" + err4 + "]\n" );
					return;
				}

				if ( query_memofind.NextRow() ) {
					old_memo = query_memofind.item[1];
					new_memo = Interface13.Input( "Input new memo", "New Memo", "" + old_memo, null, null, InputType.StrMultiline );

					if ( !Lang13.Bool( new_memo ) ) {
						return;
					}
					new_memo = GlobalFuncs.sanitizeSQL( new_memo );
					edit_text = "Edited by " + sql_ckey + " on " + GlobalFuncs.SQLtime() + " from<br>" + old_memo + "<br>to<br>" + new_memo + "<hr>";
					edit_text = GlobalFuncs.sanitizeSQL( edit_text );
					update_query = GlobalVars.dbcon.NewQuery( "UPDATE " + GlobalFuncs.format_table_name( "memo" ) + " SET memotext = '" + new_memo + "', last_editor = '" + sql_ckey + "', edits = CONCAT(IFNULL(edits,''),'" + edit_text + "') WHERE ckey = '" + target_sql_ckey + "'" );

					if ( !update_query.Execute() ) {
						err5 = update_query.ErrorMsg();
						GlobalFuncs.log_game( "SQL ERROR editing memo. Error : [" + err5 + "]\n" );
						return;
					}

					if ( target_sql_ckey == sql_ckey ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has edited their memo from " + old_memo + " to " + new_memo );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has edited their memo from<br>" + old_memo + "<br>to<br>" + new_memo );
					} else {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has edited " + target_sql_ckey + "'s memo from " + old_memo + " to " + new_memo );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has edited " + target_sql_ckey + "'s memo from<br>" + old_memo + "<br>to<br>" + new_memo );
					}
				}
			} else if ( _a=="Show" ) {
				query_memoshow = GlobalVars.dbcon.NewQuery( "SELECT ckey, memotext, timestamp, last_editor FROM " + GlobalFuncs.format_table_name( "memo" ) );

				if ( !query_memoshow.Execute() ) {
					err6 = query_memoshow.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining ckey, memotext, timestamp, last_editor from memo table. Error : [" + err6 + "]\n" );
					return;
				}
				output = null;

				while (query_memoshow.NextRow()) {
					ckey = query_memoshow.item[1];
					memotext2 = query_memoshow.item[2];
					timestamp2 = query_memoshow.item[3];
					last_editor = query_memoshow.item[4];
					output += "<span class='memo'>Memo by <span class='prefix'>" + ckey + "</span> on " + timestamp2;

					if ( Lang13.Bool( last_editor ) ) {
						output += "<br><span class='memoedit'>Last edit by " + last_editor + " <A href='?_src_=holder;memoeditlist=" + ckey + "'>(Click here to see edit log)</A></span>";
					}
					output += "<br>" + memotext2 + "</span><br>";
				}

				if ( !Lang13.Bool( output ) ) {
					this.WriteMsg( "No memos found in database." );
					return;
				}
				this.WriteMsg( output );
			} else if ( _a=="Remove" ) {
				query_memodellist = GlobalVars.dbcon.NewQuery( "SELECT ckey FROM " + GlobalFuncs.format_table_name( "memo" ) );

				if ( !query_memodellist.Execute() ) {
					err7 = query_memodellist.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR obtaining ckey from memo table. Error : [" + err7 + "]\n" );
					return;
				}
				memolist2 = new ByTable();

				while (query_memodellist.NextRow()) {
					ckey2 = query_memodellist.item[1];
					memolist2.Add( "" + ckey2 );
				}

				if ( !( memolist2.len != 0 ) ) {
					this.WriteMsg( "No memos found in database." );
					return;
				}
				target_ckey2 = Interface13.Input( this, "Select whose memo to delete", "Select memo", null, memolist2, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( target_ckey2 ) ) {
					return;
				}
				target_sql_ckey2 = GlobalFuncs.sanitizeSQL( target_ckey2 );
				query_memodel = GlobalVars.dbcon.NewQuery( "DELETE FROM " + GlobalFuncs.format_table_name( "memo" ) + " WHERE ckey = '" + target_sql_ckey2 + "'" );

				if ( !query_memodel.Execute() ) {
					err8 = query_memodel.ErrorMsg();
					GlobalFuncs.log_game( "SQL ERROR removing memo. Error : [" + err8 + "]\n" );
					return;
				}

				if ( target_sql_ckey2 == sql_ckey ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has removed their memo." );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has removed their memo." );
				} else {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has removed " + target_sql_ckey2 + "'s memo." );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has removed " + target_sql_ckey2 + "'s memo." );
				}
			}
			return;
		}

		// Function from file: admin_memo.dm
		[VerbInfo( name: "Memo", group: "Server" )]
		public void admin_memo(  ) {
			dynamic memotask = null;

			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}

			if ( !GlobalVars.dbcon.IsConnected() ) {
				this.WriteMsg( "<span class='danger'>Failed to establish database connection.</span>" );
				return;
			}
			memotask = Interface13.Input( Task13.User, "Choose task.", "Memo", null, new ByTable(new object [] { "Show", "Write", "Edit", "Remove" }), InputType.Any );

			if ( !Lang13.Bool( memotask ) ) {
				return;
			}
			this.admin_memo_output( memotask );
			return;
		}

		// Function from file: admin_investigate.dm
		[VerbInfo( name: "Investigate", group: "Admin" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "hrefs", "notes", "watchlist", "singulo", "wires", "telesci", "gravity", "records", "cargo", "supermatter", "atmos", "experimentor", "kudzu" )]
		public void investigate_show( string subject = null ) {
			File F = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}

			switch ((string)( subject )) {
				case "singulo":
				case "wires":
				case "telesci":
				case "gravity":
				case "records":
				case "cargo":
				case "supermatter":
				case "atmos":
				case "kudzu":
					F = GlobalFuncs.investigate_subject2file( subject );

					if ( !( F != null ) ) {
						this.WriteMsg( "<font color='red'>Error: admin_investigate: " + "data/investigate/" + subject + " is an invalid path or cannot be accessed.</font>" );
						return;
					}
					Interface13.Browse( this, F, "window=investigate" + subject + ";size=800x300" );
					break;
				case "hrefs":
					
					if ( GlobalVars.config != null && GlobalVars.config.log_hrefs ) {
						
						if ( GlobalVars.href_logfile != null ) {
							Interface13.Browse( this, GlobalVars.href_logfile, "window=investigate" + subject + ";size=800x300" );
						} else {
							this.WriteMsg( "<font color='red'>Error: admin_investigate: No href logfile found.</font>" );
							return;
						}
					} else {
						this.WriteMsg( "<font color='red'>Error: admin_investigate: Href Logging is not on.</font>" );
						return;
					}
					break;
				case "notes":
					GlobalFuncs.show_note();
					break;
				case "watchlist":
					this.watchlist_show();
					break;
			}
			return;
		}

		// Function from file: admin.dm
		public void adminGreet( bool? logout = null ) {
			dynamic _string = null;

			
			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
				
				if ( logout == true && GlobalVars.config != null && GlobalVars.config.announce_admin_logout ) {
					_string = Rand13.PickFromTable( "Admin logout: " + GlobalFuncs.key_name( this ) );
				} else if ( !( logout == true ) && GlobalVars.config != null && GlobalVars.config.announce_admin_login && Lang13.Bool( this.prefs.toggles & 1024 ) ) {
					_string = Rand13.PickFromTable( "Admin login: " + GlobalFuncs.key_name( this ) );
				}

				if ( Lang13.Bool( _string ) ) {
					GlobalFuncs.message_admins( "" + _string );
				}
			}
			return;
		}

		// Function from file: ooc.dm
		public void ignore_key( dynamic client = null ) {
			dynamic C = null;

			C = client;

			if ( this.prefs.ignoring.Contains( C.key ) ) {
				this.prefs.ignoring.Remove( C.key );
			} else {
				this.prefs.ignoring.Or( C.key );
			}
			this.WriteMsg( "You are " + ( this.prefs.ignoring.Contains( C.key ) ? "now" : "no longer" ) + " ignoring " + C.key + " on the OOC channel." );
			this.prefs.save_preferences();
			return;
		}

		// Function from file: ooc.dm
		[VerbInfo( name: "View Admin Notes", desc: "View the notes that admins have written about you", group: "OOC" )]
		public void self_notes(  ) {
			
			if ( !GlobalVars.config.see_own_notes ) {
				Task13.User.WriteMsg( "<span class='notice'>Sorry, that function is not enabled on this server.</span>" );
				return;
			}
			GlobalFuncs.show_note( Task13.User, null, true );
			return;
		}

		// Function from file: ooc.dm
		[VerbInfo( name: "Reset Player OOC Color", desc: "Returns player OOC Color to default", group: "Fun" )]
		public void reset_ooc(  ) {
			GlobalVars.normal_ooc_colour = "#002eb8";
			return;
		}

		// Function from file: ooc.dm
		[VerbInfo( name: "Set Player OOC Color", desc: "Modifies player OOC Color", group: "Fun" )]
		public void set_ooc( dynamic newColor = null ) {
			GlobalVars.normal_ooc_colour = GlobalFuncs.sanitize_ooccolor( newColor );
			return;
		}

		// Function from file: explosion.dm
		[VerbInfo( name: "Check Bomb Impact", group: "Debug" )]
		public bool check_bomb_impacts(  ) {
			string newmode = null;
			dynamic epicenter = null;
			dynamic dev = null;
			dynamic heavy = null;
			dynamic light = null;
			ByTable choices = null;
			dynamic choice = null;
			int? max_range = null;
			int x0 = 0;
			int y0 = 0;
			ByTable wipe_colours = null;
			dynamic T = null;
			double dist = 0;
			dynamic TT = null;
			Obj_Machinery_Door D = null;
			Obj_Structure_Window W = null;
			Obj_Effect_Blob B = null;
			dynamic T2 = null;

			newmode = Interface13.Alert( "Use reactionary explosions?", "Check Bomb Impact", "Yes", "No" );
			epicenter = GlobalFuncs.get_turf( this.mob );

			if ( !Lang13.Bool( epicenter ) ) {
				return false;
			}
			dev = 0;
			heavy = 0;
			light = 0;
			choices = new ByTable(new object [] { "Small Bomb", "Medium Bomb", "Big Bomb", "Custom Bomb" });
			choice = Interface13.Input( "Bomb Size?", null, null, null, choices, InputType.Any );

			dynamic _a = choice; // Was a switch-case, sorry for the mess.
			if ( _a==null ) {
				return false;
			} else if ( _a=="Small Bomb" ) {
				dev = 1;
				heavy = 2;
				light = 3;
			} else if ( _a=="Medium Bomb" ) {
				dev = 2;
				heavy = 3;
				light = 4;
			} else if ( _a=="Big Bomb" ) {
				dev = 3;
				heavy = 5;
				light = 7;
			} else if ( _a=="Custom Bomb" ) {
				dev = Interface13.Input( "Devestation range (Tiles):", null, null, null, null, InputType.Num );
				heavy = Interface13.Input( "Heavy impact range (Tiles):", null, null, null, null, InputType.Num );
				light = Interface13.Input( "Light impact range (Tiles):", null, null, null, null, InputType.Num );
			}
			max_range = Num13.MaxInt( Convert.ToInt32( dev ), Convert.ToInt32( heavy ), Convert.ToInt32( light ) );
			x0 = Convert.ToInt32( epicenter.x );
			y0 = Convert.ToInt32( epicenter.y );
			wipe_colours = new ByTable();

			foreach (dynamic _e in Lang13.Enumerate( GlobalFuncs.trange( max_range, epicenter ) )) {
				T = _e;
				
				wipe_colours.Add( T );
				dist = GlobalFuncs.cheap_hypotenuse( Convert.ToInt32( T.x ), Convert.ToInt32( T.y ), x0, y0 );

				if ( newmode == "Yes" ) {
					TT = T;

					while (TT != epicenter) {
						TT = Map13.GetStepTowardsSimple( TT, epicenter );

						if ( TT.density && TT.explosion_block != 0 ) {
							dist += TT.explosion_block;
						}

						foreach (dynamic _b in Lang13.Enumerate( TT, typeof(Obj_Machinery_Door) )) {
							D = _b;
							

							if ( D.density && D.explosion_block != 0 ) {
								dist += D.explosion_block;
							}
						}

						foreach (dynamic _c in Lang13.Enumerate( TT, typeof(Obj_Structure_Window) )) {
							W = _c;
							

							if ( W.explosion_block != 0 && W.fulltile ) {
								dist += W.explosion_block;
							}
						}

						foreach (dynamic _d in Lang13.Enumerate( T, typeof(Obj_Effect_Blob) )) {
							B = _d;
							
							dist += B.explosion_block;
						}
					}
				}

				if ( dist < Convert.ToDouble( dev ) ) {
					T.color = "red";
					T.maptext = "Dev";
				} else if ( dist < Convert.ToDouble( heavy ) ) {
					T.color = "yellow";
					T.maptext = "Heavy";
				} else if ( dist < Convert.ToDouble( light ) ) {
					T.color = "blue";
					T.maptext = "Light";
				} else {
					continue;
				}
			}
			Task13.Sleep( 100 );

			foreach (dynamic _f in Lang13.Enumerate( wipe_colours )) {
				T2 = _f;
				
				T2.color = null;
				T2.maptext = "";
			}
			return false;
		}

		// Function from file: sound.dm
		public void playtitlemusic(  ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.login_music ) ) {
				return;
			}

			if ( this.prefs != null && Lang13.Bool( this.prefs.toggles & 8 ) ) {
				this.WriteMsg( new Sound( GlobalVars.ticker.login_music, false, false, 1, 85 ) );
			}
			return;
		}

		// Function from file: communications.dm
		[VerbInfo( name: "Debug Signals", group: "Debug" )]
		public void print_pointers(  ) {
			dynamic p = null;
			dynamic S = null;

			
			if ( !( this.holder != null ) ) {
				return;
			}
			this.WriteMsg( "There are " + GlobalVars.pointers.len + " pointers:" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.pointers )) {
				p = _a;
				
				this.WriteMsg( p );
				S = Lang13.FindObj( p );

				if ( S is Signal ) {
					this.WriteMsg( ((Signal)S).debug_print() );
				}
			}
			return;
		}

		// Function from file: datumvars.dm
		public void view_var_Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic DAT = null;
			dynamic M = null;
			dynamic M2 = null;
			dynamic D = null;
			dynamic T = null;
			dynamic M3 = null;
			dynamic M4 = null;
			string new_name = null;
			dynamic D2 = null;
			dynamic D3 = null;
			dynamic A = null;
			dynamic M5 = null;
			dynamic M6 = null;
			dynamic M7 = null;
			dynamic M8 = null;
			dynamic M9 = null;
			dynamic M10 = null;
			dynamic M11 = null;
			dynamic M12 = null;
			string poll_message = null;
			ByTable candidates = null;
			dynamic theghost = null;
			dynamic O = null;
			string action_type = null;
			Type O_type = null;
			int i = 0;
			Obj Obj = null;
			int i2 = 0;
			Obj Obj2 = null;
			dynamic A2 = null;
			dynamic amount = null;
			ByTable reagent_options = null;
			dynamic r_id = null;
			dynamic R = null;
			dynamic chosen = null;
			dynamic chosen_id = null;
			dynamic amount2 = null;
			dynamic A3 = null;
			dynamic A4 = null;
			dynamic A5 = null;
			dynamic C = null;
			dynamic Mo = null;
			dynamic H = null;
			dynamic H2 = null;
			dynamic H3 = null;
			dynamic H4 = null;
			dynamic H5 = null;
			dynamic H6 = null;
			dynamic result = null;
			dynamic newtype = null;
			Species old_species = null;
			dynamic H7 = null;
			dynamic L = null;
			dynamic Text = null;
			dynamic amount3 = null;

			
			if ( Task13.User.client != this || !( this.holder != null ) ) {
				return;
			}

			if ( Lang13.Bool( href_list["Vars"] ) ) {
				this.debug_variables( Lang13.FindObj( href_list["Vars"] ) );
			} else if ( Lang13.Bool( href_list["datumrefresh"] ) ) {
				DAT = Lang13.FindObj( href_list["datumrefresh"] );

				if ( !Lang13.Bool( DAT ) ) {
					return;
				}
				this.debug_variables( DAT );
			} else if ( Lang13.Bool( href_list["mob_player_panel"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				M = Lang13.FindObj( href_list["mob_player_panel"] );

				if ( !( M is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return;
				}
				this.holder.show_player_panel( M );
				href_list["datumrefresh"] = href_list["mob_player_panel"];
			} else if ( Lang13.Bool( href_list["godmode"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 512 ) ) {
					return;
				}
				M2 = Lang13.FindObj( href_list["godmode"] );

				if ( !( M2 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
					return;
				}
				this.cmd_admin_godmode( M2 );
				href_list["datumrefresh"] = href_list["godmode"];
			} else if ( Lang13.Bool( href_list["mark_object"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				D = Lang13.FindObj( href_list["mark_object"] );

				if ( !( D is Game_Data ) ) {
					Task13.User.WriteMsg( "This can only be done to instances of type /datum" );
					return;
				}
				this.holder.marked_datum = D;
				href_list["datumrefresh"] = href_list["mark_object"];
			} else if ( Lang13.Bool( href_list["proc_call"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				T = Lang13.FindObj( href_list["proc_call"] );

				if ( Lang13.Bool( T ) ) {
					this.callproc_datum( T );
				}
			} else if ( Lang13.Bool( href_list["regenerateicons"] ) ) {
				
				if ( !GlobalFuncs.check_rights( 0 ) ) {
					return;
				}
				M3 = Lang13.FindObj( href_list["regenerateicons"] );

				if ( !( M3 is Mob ) ) {
					Task13.User.WriteMsg( "This can only be done to instances of type /mob" );
					return;
				}
				((Mob)M3).regenerate_icons();
			} else if ( GlobalFuncs.check_rights( 1024 ) ) {
				
				if ( Lang13.Bool( href_list["rename"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					M4 = Lang13.FindObj( href_list["rename"] );

					if ( !( M4 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}
					new_name = GlobalFuncs.stripped_input( Task13.User, "What would you like to name this mob?", "Input a name", M4.real_name, 26 );

					if ( !Lang13.Bool( new_name ) || !Lang13.Bool( M4 ) ) {
						return;
					}
					GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " renamed " + GlobalFuncs.key_name_admin( M4 ) + " to " + new_name + "." );
					((Mob)M4).fully_replace_character_name( M4.real_name, new_name );
					href_list["datumrefresh"] = href_list["rename"];
				} else if ( Lang13.Bool( href_list["varnameedit"] ) && Lang13.Bool( href_list["datumedit"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					D2 = Lang13.FindObj( href_list["datumedit"] );

					if ( !( D2 is Game_Data ) && !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( D2 ) ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of types /client or /datum" );
						return;
					}
					this.modify_variables( D2, href_list["varnameedit"], true );
				} else if ( Lang13.Bool( href_list["varnamechange"] ) && Lang13.Bool( href_list["datumchange"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					D3 = Lang13.FindObj( href_list["datumchange"] );

					if ( !( D3 is Game_Data ) && !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( D3 ) ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of types /client or /datum" );
						return;
					}
					this.modify_variables( D3, href_list["varnamechange"], false );
				} else if ( Lang13.Bool( href_list["varnamemass"] ) && Lang13.Bool( href_list["datummass"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					A = Lang13.FindObj( href_list["datummass"] );

					if ( !( A is Ent_Static ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /atom" );
						return;
					}
					this.cmd_mass_modify_object_variables( A, href_list["varnamemass"] );
				} else if ( Lang13.Bool( href_list["give_spell"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					M5 = Lang13.FindObj( href_list["give_spell"] );

					if ( !( M5 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}
					this.give_spell( M5 );
					href_list["datumrefresh"] = href_list["give_spell"];
				} else if ( Lang13.Bool( href_list["give_disease"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					M6 = Lang13.FindObj( href_list["give_disease"] );

					if ( !( M6 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}
					this.give_disease( M6 );
					href_list["datumrefresh"] = href_list["give_spell"];
				} else if ( Lang13.Bool( href_list["ninja"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 8 ) ) {
						return;
					}
					M7 = Lang13.FindObj( href_list["ninja"] );

					if ( !( M7 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}
					this.cmd_admin_ninjafy( M7 );
					href_list["datumrefresh"] = href_list["ninja"];
				} else if ( Lang13.Bool( href_list["gib"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 8 ) ) {
						return;
					}
					M8 = Lang13.FindObj( href_list["gib"] );

					if ( !( M8 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}
					this.cmd_admin_gib( M8 );
				} else if ( Lang13.Bool( href_list["build_mode"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 1 ) ) {
						return;
					}
					M9 = Lang13.FindObj( href_list["build_mode"] );

					if ( !( M9 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}
					GlobalFuncs.togglebuildmode( M9 );
					href_list["datumrefresh"] = href_list["build_mode"];
				} else if ( Lang13.Bool( href_list["drop_everything"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					M10 = Lang13.FindObj( href_list["drop_everything"] );

					if ( !( M10 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}

					if ( Task13.User.client != null ) {
						Task13.User.client.cmd_admin_drop_everything( M10 );
					}
				} else if ( Lang13.Bool( href_list["direct_control"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					M11 = Lang13.FindObj( href_list["direct_control"] );

					if ( !( M11 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}

					if ( Task13.User.client != null ) {
						Task13.User.client.cmd_assume_direct_control( M11 );
					}
				} else if ( Lang13.Bool( href_list["offer_control"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					M12 = Lang13.FindObj( href_list["offer_control"] );

					if ( !( M12 is Mob ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /mob" );
						return;
					}
					M12.WriteMsg( "Control of your mob has been offered to dead players." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has offered control of (" + GlobalFuncs.key_name( M12 ) + ") to ghosts." );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has offered control of (" + GlobalFuncs.key_name_admin( M12 ) + ") to ghosts" );
					poll_message = "Do you want to play as " + M12.real_name + "?";

					if ( Lang13.Bool( M12.mind ) && Lang13.Bool( M12.mind.assigned_role ) ) {
						poll_message = "" + poll_message + " Job:" + M12.mind.assigned_role + ".";
					}

					if ( Lang13.Bool( M12.mind ) && Lang13.Bool( M12.mind.special_role ) ) {
						poll_message = "" + poll_message + " Status:" + M12.mind.special_role + ".";
					}
					candidates = GlobalFuncs.pollCandidates( poll_message, "pAI", null, GlobalVars.FALSE, 100 );
					theghost = null;

					if ( candidates.len != 0 ) {
						theghost = Rand13.PickFromTable( candidates );
						M12.WriteMsg( "Your mob has been taken over by a ghost!" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( theghost ) + " has taken control of (" + GlobalFuncs.key_name_admin( M12 ) + ")" );
						((Mob)M12).ghostize( false );
						M12.key = theghost.key;
					} else {
						M12.WriteMsg( "There were no ghosts willing to take control." );
						GlobalFuncs.message_admins( "No ghosts were willing to take control of " + GlobalFuncs.key_name_admin( M12 ) + ")" );
					}
				} else if ( Lang13.Bool( href_list["delall"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 48 ) ) {
						return;
					}
					O = Lang13.FindObj( href_list["delall"] );

					if ( !( O is Obj ) ) {
						Task13.User.WriteMsg( "This can only be used on instances of type /obj" );
						return;
					}
					action_type = Interface13.Alert( "Strict type (" + O.type + ") or type and all subtypes?", null, "Strict type", "Type and subtypes", "Cancel" );

					if ( action_type == "Cancel" || !Lang13.Bool( action_type ) ) {
						return;
					}

					if ( Interface13.Alert( "Are you really sure you want to delete all objects of type " + O.type + "?", null, "Yes", "No" ) != "Yes" ) {
						return;
					}

					if ( Interface13.Alert( "Second confirmation required. Delete?", null, "Yes", "No" ) != "Yes" ) {
						return;
					}
					O_type = O.type;

					switch ((string)( action_type )) {
						case "Strict type":
							i = 0;

							foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
								Obj = _a;
								

								if ( Obj.type == O_type ) {
									i++;
									GlobalFuncs.qdel( Obj );
								}
							}

							if ( !( i != 0 ) ) {
								Task13.User.WriteMsg( "No objects of this type exist" );
								return;
							}
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted all objects of type " + O_type + " (" + i + " objects deleted) " );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " deleted all objects of type " + O_type + " (" + i + " objects deleted) </span>" );
							break;
						case "Type and subtypes":
							i2 = 0;

							foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
								Obj2 = _b;
								

								if ( Lang13.Bool( ((dynamic)O_type).IsInstanceOfType( Obj2 ) ) ) {
									i2++;
									GlobalFuncs.qdel( Obj2 );
								}
							}

							if ( !( i2 != 0 ) ) {
								Task13.User.WriteMsg( "No objects of this type exist" );
								return;
							}
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " deleted all objects of type or subtype of " + O_type + " (" + i2 + " objects deleted) " );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " deleted all objects of type or subtype of " + O_type + " (" + i2 + " objects deleted) </span>" );
							break;
					}
				} else if ( Lang13.Bool( href_list["addreagent"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					A2 = Lang13.FindObj( href_list["addreagent"] );

					if ( !Lang13.Bool( A2.reagents ) ) {
						amount = Interface13.Input( Task13.User, "Specify the reagent size of " + A2, "Set Reagent Size", 50, null, InputType.Num );

						if ( Lang13.Bool( amount ) ) {
							((Ent_Static)A2).create_reagents( amount );
						}
					}

					if ( Lang13.Bool( A2.reagents ) ) {
						reagent_options = new ByTable();

						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.chemical_reagents_list )) {
							r_id = _d;
							
							R = GlobalVars.chemical_reagents_list[r_id];
							reagent_options[R.name] = r_id;
						}

						if ( reagent_options.len != 0 ) {
							GlobalFuncs.sortList( reagent_options );
							reagent_options.Insert( 1, "CANCEL" );
							chosen = Interface13.Input( Task13.User, "Choose a reagent to add.", "Choose a reagent.", null, reagent_options, InputType.Any );
							chosen_id = reagent_options[chosen];

							if ( Lang13.Bool( chosen_id ) ) {
								amount2 = Interface13.Input( Task13.User, "Choose the amount to add.", "Choose the amount.", A2.reagents.maximum_volume, null, InputType.Num );

								if ( Lang13.Bool( amount2 ) ) {
									A2.reagents.add_reagent( chosen_id, amount2 );
									GlobalFuncs.log_admin( new Txt().item( GlobalFuncs.key_name( Task13.User ) ).str( " has added " ).item( amount2 ).str( " units of " ).item( chosen ).str( " to " ).the( A2 ).item().ToString() );
									GlobalFuncs.message_admins( new Txt( "<span class='notice'>" ).item( GlobalFuncs.key_name( Task13.User ) ).str( " has added " ).item( amount2 ).str( " units of " ).item( chosen ).str( " to " ).the( A2 ).item().str( "</span>" ).ToString() );
								}
							}
						}
					}
					href_list["datumrefresh"] = href_list["addreagent"];
				} else if ( Lang13.Bool( href_list["explode"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 8 ) ) {
						return;
					}
					A3 = Lang13.FindObj( href_list["explode"] );

					if ( !( A3 is Obj ) && !( A3 is Mob ) && !( A3 is Tile ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /obj, /mob and /turf" );
						return;
					}
					this.cmd_admin_explosion( A3 );
					href_list["datumrefresh"] = href_list["explode"];
				} else if ( Lang13.Bool( href_list["emp"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 8 ) ) {
						return;
					}
					A4 = Lang13.FindObj( href_list["emp"] );

					if ( !( A4 is Obj ) && !( A4 is Mob ) && !( A4 is Tile ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /obj, /mob and /turf" );
						return;
					}
					this.cmd_admin_emp( A4 );
					href_list["datumrefresh"] = href_list["emp"];
				} else if ( Lang13.Bool( href_list["rotatedatum"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					A5 = Lang13.FindObj( href_list["rotatedatum"] );

					if ( !( A5 is Ent_Static ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /atom" );
						return;
					}

					dynamic _e = href_list["rotatedir"]; // Was a switch-case, sorry for the mess.
					if ( _e=="right" ) {
						A5.dir = Num13.Rotate( A5.dir, -45 );
					} else if ( _e=="left" ) {
						A5.dir = Num13.Rotate( A5.dir, 45 );
					}
					href_list["datumrefresh"] = href_list["rotatedatum"];
				} else if ( Lang13.Bool( href_list["editorgans"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					C = Lang13.FindObj( href_list["editorgans"] );

					if ( !( C is Mob_Living_Carbon ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon" );
						return;
					}
					this.manipulate_organs( C );
					href_list["datumrefresh"] = href_list["editorgans"];
				} else if ( Lang13.Bool( href_list["makehuman"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 4096 ) ) {
						return;
					}
					Mo = Lang13.FindObj( href_list["makehuman"] );

					if ( !( Mo is Mob_Living_Carbon_Monkey ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon/monkey" );
						return;
					}

					if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
						return;
					}

					if ( !Lang13.Bool( Mo ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}
					this.holder.Topic( href, new ByTable().Set( "humanone", href_list["makehuman"] ) );
				} else if ( Lang13.Bool( href_list["makemonkey"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 4096 ) ) {
						return;
					}
					H = Lang13.FindObj( href_list["makemonkey"] );

					if ( !( H is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon/human" );
						return;
					}

					if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
						return;
					}

					if ( !Lang13.Bool( H ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}
					this.holder.Topic( href, new ByTable().Set( "monkeyone", href_list["makemonkey"] ) );
				} else if ( Lang13.Bool( href_list["makerobot"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 4096 ) ) {
						return;
					}
					H2 = Lang13.FindObj( href_list["makerobot"] );

					if ( !( H2 is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon/human" );
						return;
					}

					if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
						return;
					}

					if ( !Lang13.Bool( H2 ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}
					this.holder.Topic( href, new ByTable().Set( "makerobot", href_list["makerobot"] ) );
				} else if ( Lang13.Bool( href_list["makealien"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 4096 ) ) {
						return;
					}
					H3 = Lang13.FindObj( href_list["makealien"] );

					if ( !( H3 is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon/human" );
						return;
					}

					if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
						return;
					}

					if ( !Lang13.Bool( H3 ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}
					this.holder.Topic( href, new ByTable().Set( "makealien", href_list["makealien"] ) );
				} else if ( Lang13.Bool( href_list["makeslime"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 4096 ) ) {
						return;
					}
					H4 = Lang13.FindObj( href_list["makeslime"] );

					if ( !( H4 is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon/human" );
						return;
					}

					if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
						return;
					}

					if ( !Lang13.Bool( H4 ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}
					this.holder.Topic( href, new ByTable().Set( "makeslime", href_list["makeslime"] ) );
				} else if ( Lang13.Bool( href_list["makeai"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 4096 ) ) {
						return;
					}
					H5 = Lang13.FindObj( href_list["makeai"] );

					if ( !( H5 is Mob_Living_Carbon ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon" );
						return;
					}

					if ( Interface13.Alert( "Confirm mob type change?", null, "Transform", "Cancel" ) != "Transform" ) {
						return;
					}

					if ( !Lang13.Bool( H5 ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}
					this.holder.Topic( href, new ByTable().Set( "makeai", href_list["makeai"] ) );
				} else if ( Lang13.Bool( href_list["setspecies"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 4096 ) ) {
						return;
					}
					H6 = Lang13.FindObj( href_list["setspecies"] );

					if ( !( H6 is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon/human" );
						return;
					}
					result = Interface13.Input( Task13.User, "Please choose a new species", "Species", null, GlobalVars.species_list, InputType.Null | InputType.Any );

					if ( !Lang13.Bool( H6 ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}

					if ( Lang13.Bool( result ) ) {
						newtype = GlobalVars.species_list[result];
						old_species = H6.dna.species;
						((Mob)H6).set_species( newtype );
						((Species)H6.dna.species).admin_set_species( H6, old_species );
					}
				} else if ( Lang13.Bool( href_list["purrbation"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 4096 ) ) {
						return;
					}
					H7 = Lang13.FindObj( href_list["purrbation"] );

					if ( !( H7 is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "This can only be done to instances of type /mob/living/carbon/human" );
						return;
					}

					if ( !Lang13.Bool( H7 ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}

					if ( H7.dna.species.id == "human" ) {
						
						if ( H7.dna.features["tail_human"] == "None" || H7.dna.features["ears"] == "None" ) {
							Task13.User.WriteMsg( "Put " + H7 + " on purrbation." );
							H7.WriteMsg( "Something is nya~t right." );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has put " + GlobalFuncs.key_name( H7 ) + " on purrbation." );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " has put " + GlobalFuncs.key_name( H7 ) + " on purrbation.</span>" );
							H7.dna.features["tail_human"] = "Cat";
							H7.dna.features["ears"] = "Cat";
						} else {
							Task13.User.WriteMsg( "Removed " + H7 + " from purrbation." );
							H7.WriteMsg( "You are no longer a cat." );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has removed " + GlobalFuncs.key_name( H7 ) + " from purrbation." );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " has removed " + GlobalFuncs.key_name( H7 ) + " from purrbation.</span>" );
							H7.dna.features["tail_human"] = "None";
							H7.dna.features["ears"] = "None";
						}
						((Mob)H7).regenerate_icons();
						return;
					}
					Task13.User.WriteMsg( "You can only put humans on purrbation." );
				} else if ( Lang13.Bool( href_list["adjustDamage"] ) && Lang13.Bool( href_list["mobToDamage"] ) ) {
					
					if ( !GlobalFuncs.check_rights( 0 ) ) {
						return;
					}
					L = Lang13.FindObj( href_list["mobToDamage"] );

					if ( !( L is Mob_Living ) ) {
						return;
					}
					Text = href_list["adjustDamage"];
					amount3 = Interface13.Input( "Deal how much damage to mob? (Negative values here heal)", "Adjust " + Text + "loss", 0, null, null, InputType.Num );

					if ( !Lang13.Bool( L ) ) {
						Task13.User.WriteMsg( "Mob doesn't exist anymore" );
						return;
					}

					dynamic _f = Text; // Was a switch-case, sorry for the mess.
					if ( _f=="brute" ) {
						((Mob_Living)L).adjustBruteLoss( amount3 );
					} else if ( _f=="fire" ) {
						((Mob_Living)L).adjustFireLoss( amount3 );
					} else if ( _f=="toxin" ) {
						((Mob_Living)L).adjustToxLoss( amount3 );
					} else if ( _f=="oxygen" ) {
						((Mob_Living)L).adjustOxyLoss( amount3 );
					} else if ( _f=="brain" ) {
						((Mob_Living)L).adjustBrainLoss( amount3 );
					} else if ( _f=="clone" ) {
						((Mob_Living)L).adjustCloneLoss( amount3 );
					} else if ( _f=="stamina" ) {
						((Mob_Living)L).adjustStaminaLoss( amount3 );
					} else {
						Task13.User.WriteMsg( "You caused an error. DEBUG: Text:" + Text + " Mob:" + L );
						return;
					}

					if ( amount3 != 0 ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " dealt " + amount3 + " amount of " + Text + " damage to " + L + " " );
						GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " dealt " + amount3 + " amount of " + Text + " damage to " + L + " </span>" );
						href_list["datumrefresh"] = href_list["mobToDamage"];
					}
				}
			}
			return;
		}

		// Function from file: datumvars.dm
		public string debug_variable( dynamic name = null, string value = null, int level = 0, dynamic DA = null ) {
			string html = null;
			dynamic D = null;
			dynamic C = null;
			dynamic L = null;
			int index = 0;
			dynamic entry = null;

			html = "";

			if ( Lang13.Bool( DA ) ) {
				html += new Txt( "<li style='backgroundColor:white'>(<a href='?_src_=vars;datumedit=" ).Ref( DA ).str( ";varnameedit=" ).item( name ).str( "'>E</a>) (<a href='?_src_=vars;datumchange=" ).Ref( DA ).str( ";varnamechange=" ).item( name ).str( "'>C</a>) (<a href='?_src_=vars;datummass=" ).Ref( DA ).str( ";varnamemass=" ).item( name ).str( "'>M</a>) " ).ToString();
			} else {
				html += "<li>";
			}

			if ( value == null ) {
				html += "" + name + " = <span class='value'>null</span>";
			} else if ( value is string ) {
				html += "" + name + " = <span class='value'>\"" + String13.HtmlEncode( value ) + "\"</span>";
			} else if ( value is Icon ) {
				html += "" + name + " = /icon (<span class='value'>" + value + "</span>)";
			} else if ( value is File ) {
				html += "" + name + " = <span class='value'>'" + value + "'</span>";
			} else if ( value is Game_Data ) {
				D = value;
				html += new Txt( "<a href='?_src_=vars;Vars=" ).Ref( value ).str( "'>" ).item( name ).str( " " ).Ref( value ).str( "</a> = " ).item( D.type ).ToString();
			} else if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( value ) ) ) {
				C = value;
				html += new Txt( "<a href='?_src_=vars;Vars=" ).Ref( value ).str( "'>" ).item( name ).str( " " ).Ref( value ).str( "</a> = " ).item( C ).str( " " ).item( C.type ).ToString();
			} else if ( value is ByTable ) {
				L = value;
				html += "" + name + " = /list (" + L.len + ")";

				if ( L.len > 0 && !( name == "underlays" || name == "overlays" || name == "vars" || L.len > 500 ) ) {
					html += "<ul>";
					index = 1;

					foreach (dynamic _a in Lang13.Enumerate( L )) {
						entry = _a;
						

						if ( entry is string ) {
							html += this.debug_variable( entry, L[entry], level + 1 );
						} else {
							html += this.debug_variable( index, L[index], level + 1 );
						}
						index++;
					}
					html += "</ul>";
				}
			} else {
				html += "" + name + " = <span class='value'>" + String13.HtmlEncode( value ) + "</span>";
			}
			html += "</li>";
			return html;
		}

		// Function from file: datumvars.dm
		[VerbInfo( name: "View Variables", group: "Debug" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public void debug_variables( dynamic D = null ) {
			string title = null;
			string body = null;
			dynamic A = null;
			Icon sprite = null;
			dynamic AT = null;
			dynamic A2 = null;
			dynamic M = null;
			string formatted_type = null;
			double middle_point = 0;
			int splitpoint = 0;
			dynamic A3 = null;
			dynamic names = null;
			dynamic V = null;
			dynamic V2 = null;
			string html = null;

			
			if ( !( Task13.User.client != null ) || !( Task13.User.client.holder != null ) ) {
				Task13.User.WriteMsg( "<span class='danger'>You need to be an administrator to access this.</span>" );
				return;
			}
			title = "";
			body = "";

			if ( !Lang13.Bool( D ) ) {
				return;
			}

			if ( D is Ent_Static ) {
				A = D;
				title = new Txt().item( A.name ).str( " (" ).Ref( A ).str( ") = " ).item( A.type ).ToString();
			}

			if ( D is Ent_Static ) {
				AT = D;

				if ( Lang13.Bool( AT.icon ) && Lang13.Bool( AT.icon_state ) ) {
					sprite = new Icon( AT.icon, AT.icon_state );
					Interface13.CacheBrowseResource( Task13.User, sprite, "view_vars_sprite.png" );
				}
			}
			title = new Txt().item( D ).str( " (" ).Ref( D ).str( ") = " ).item( D.type ).ToString();
			body += @"<script type=""text/javascript"">

				function updateSearch(){
					var filter_text = document.getElementById('filter');
					var filter = filter_text.value.toLowerCase();

					if(event.keyCode == 13){	//Enter / return
						var vars_ol = document.getElementById('vars');
						var lis = vars_ol.getElementsByTagName(""li"");
						for ( var i = 0; i < lis.length; ++i )
						{
							try{
								var li = lis[i];
								if ( li.style.backgroundColor == ""#ffee88"" )
								{
									alist = lis[i].getElementsByTagName(""a"")
									if(alist.length > 0){
										location.href=alist[0].href;
									}
								}
							}catch(err) {   }
						}
						return
					}

					if(event.keyCode == 38){	//Up arrow
						var vars_ol = document.getElementById('vars');
						var lis = vars_ol.getElementsByTagName(""li"");
						for ( var i = 0; i < lis.length; ++i )
						{
							try{
								var li = lis[i];
								if ( li.style.backgroundColor == ""#ffee88"" )
								{
									if( (i-1) >= 0){
										var li_new = lis[i-1];
										li.style.backgroundColor = ""white"";
										li_new.style.backgroundColor = ""#ffee88"";
										return
									}
								}
							}catch(err) {  }
						}
						return
					}

					if(event.keyCode == 40){	//Down arrow
						var vars_ol = document.getElementById('vars');
						var lis = vars_ol.getElementsByTagName(""li"");
						for ( var i = 0; i < lis.length; ++i )
						{
							try{
								var li = lis[i];
								if ( li.style.backgroundColor == ""#ffee88"" )
								{
									if( (i+1) < lis.length){
										var li_new = lis[i+1];
										li.style.backgroundColor = ""white"";
										li_new.style.backgroundColor = ""#ffee88"";
										return
									}
								}
							}catch(err) {  }
						}
						return
					}

					//This part here resets everything to how it was at the start so the filter is applied to the complete list. Screw efficiency, it's client-side anyway and it only looks through 200 or so variables at maximum anyway (mobs).
					if(complete_list != null && complete_list != """"){
						var vars_ol1 = document.getElementById(""vars"");
						vars_ol1.innerHTML = complete_list
					}

					if(filter.value == """"){
						return;
					}else{
						var vars_ol = document.getElementById('vars');
						var lis = vars_ol.getElementsByTagName(""li"");

						for ( var i = 0; i < lis.length; ++i )
						{
							try{
								var li = lis[i];
								if ( li.innerText.toLowerCase().indexOf(filter) == -1 )
								{
									vars_ol.removeChild(li);
									i--;
								}
							}catch(err) {   }
						}
					}
					var lis_new = vars_ol.getElementsByTagName(""li"");
					for ( var j = 0; j < lis_new.length; ++j )
					{
						var li1 = lis[j];
						if (j == 0){
							li1.style.backgroundColor = ""#ffee88"";
						}else{
							li1.style.backgroundColor = ""white"";
						}
					}
				}



				function selectTextField(){
					var filter_text = document.getElementById('filter');
					filter_text.focus();
					filter_text.select();

				}

				function loadPage(list) {

					if(list.options[list.selectedIndex].value == """"){
						return;
					}

					location.href=list.options[list.selectedIndex].value;

				}
			</script> ";
			body += "<body onload='selectTextField(); updateSearch()' onkeyup='updateSearch()'>";
			body += "<div align='center'><table width='100%'><tr><td width='50%'>";

			if ( sprite != null ) {
				body += "<table align='center' width='100%'><tr><td><img src='view_vars_sprite.png'></td><td>";
			} else {
				body += "<table align='center' width='100%'><tr><td>";
			}
			body += "<div align='center'>";

			if ( D is Ent_Static ) {
				A2 = D;

				if ( A2 is Mob_Living ) {
					body += new Txt( "<a href='?_src_=vars;rename=" ).Ref( D ).str( "'><b>" ).item( D ).str( "</b></a>" ).ToString();

					if ( Lang13.Bool( A2.dir ) ) {
						body += new Txt( "<br><font size='1'><a href='?_src_=vars;rotatedatum=" ).Ref( D ).str( ";rotatedir=left'><<</a> <a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=dir'>" ).item( GlobalFuncs.dir2text( Lang13.DoubleNullable( A2.dir ) ) ).str( "</a> <a href='?_src_=vars;rotatedatum=" ).Ref( D ).str( ";rotatedir=right'>>></a></font>" ).ToString();
					}
					M = A2;
					body += new Txt( "<br><font size='1'><a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=ckey'>" ).item( ( Lang13.Bool( M.ckey ) ? M.ckey : "No ckey" ) ).str( "</a> / <a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=real_name'>" ).item( ( Lang13.Bool( M.real_name ) ? M.real_name : "No real name" ) ).str( "</a></font>" ).ToString();
					body += new Txt( "\n			<br><font size='1'>\n			BRUTE:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=brute'>" ).item( ((Mob_Living)M).getBruteLoss() ).str( "</a>\n			FIRE:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=fire'>" ).item( ((Mob_Living)M).getFireLoss() ).str( "</a>\n			TOXIN:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=toxin'>" ).item( ((Mob_Living)M).getToxLoss() ).str( "</a>\n			OXY:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=oxygen'>" ).item( ((Mob_Living)M).getOxyLoss() ).str( "</a>\n			CLONE:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=clone'>" ).item( ((Mob_Living)M).getCloneLoss() ).str( "</a>\n			BRAIN:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=brain'>" ).item( ((Mob_Living)M).getBrainLoss() ).str( "</a>\n			STAMINA:<font size='1'><a href='?_src_=vars;mobToDamage=" ).Ref( D ).str( ";adjustDamage=stamina'>" ).item( ((Mob_Living)M).getStaminaLoss() ).str( @"</a>
			</font>


			" ).ToString();
				} else {
					body += new Txt( "<a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=name'><b>" ).item( D ).str( "</b></a>" ).ToString();

					if ( Lang13.Bool( A2.dir ) ) {
						body += new Txt( "<br><font size='1'><a href='?_src_=vars;rotatedatum=" ).Ref( D ).str( ";rotatedir=left'><<</a> <a href='?_src_=vars;datumedit=" ).Ref( D ).str( ";varnameedit=dir'>" ).item( GlobalFuncs.dir2text( Lang13.DoubleNullable( A2.dir ) ) ).str( "</a> <a href='?_src_=vars;rotatedatum=" ).Ref( D ).str( ";rotatedir=right'>>></a></font>" ).ToString();
					}
				}
			} else {
				body += "<b>" + D + "</b>";
			}
			body += "</div>";
			body += "</tr></td></table>";
			formatted_type = "" + D.type;

			if ( Lang13.Length( formatted_type ) > 25 ) {
				middle_point = Lang13.Length( formatted_type ) / 2;
				splitpoint = String13.FindIgnoreCase( formatted_type, "/", ((int)( middle_point )), 0 );

				if ( splitpoint != 0 ) {
					formatted_type = "" + String13.SubStr( formatted_type, 1, splitpoint ) + "<br>" + String13.SubStr( formatted_type, splitpoint, 0 );
				} else {
					formatted_type = "Type too long";
				}
			}
			body += "<div align='center'><b><font size='1'>" + formatted_type + "</font></b>";

			if ( this.holder != null && Lang13.Bool( this.holder.marked_datum ) && this.holder.marked_datum == D ) {
				body += "<br><font size='1' color='red'><b>Marked Object</b></font>";
			}
			body += "</div>";
			body += "</div></td>";
			body += new Txt( "<td width='50%'><div align='center'><a href='?_src_=vars;datumrefresh=" ).Ref( D ).str( "'>Refresh</a>" ).ToString();
			body += @"	<form>
				<select name=""file"" size=""1""
				onchange=""loadPage(this.form.elements[0])""
				target=""_parent._top""
				onmouseclick=""this.focus()""
				style=""background-color:#ffffff"">
			";
			body += "	<option value>Select option</option>\n				<option value> </option>\n			";
			body += new Txt( "<option value='?_src_=vars;mark_object=" ).Ref( D ).str( "'>Mark Object</option>" ).ToString();
			body += new Txt( "<option value='?_src_=vars;proc_call=" ).Ref( D ).str( "'>Call Proc</option>" ).ToString();

			if ( D is Mob ) {
				body += new Txt( "<option value='?_src_=vars;mob_player_panel=" ).Ref( D ).str( "'>Show player panel</option>" ).ToString();
			}

			if ( D is Ent_Dynamic ) {
				body += new Txt( "<option value='?_src_=holder;adminplayerobservefollow=" ).Ref( D ).str( "'>Follow</option>" ).ToString();
			} else {
				A3 = D;

				if ( A3 is Ent_Static ) {
					body += "<option value='?_src_=holder;adminplayerobservecoodjump=1;X=" + A3.x + ";Y=" + A3.y + ";Z=" + A3.z + "'>Jump to</option>";
				}
			}
			body += "<option value>---</option>";

			if ( D is Mob ) {
				body += new Txt( "<option value='?_src_=vars;give_spell=" ).Ref( D ).str( "'>Give Spell</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;give_disease=" ).Ref( D ).str( "'>Give Disease</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;ninja=" ).Ref( D ).str( "'>Make Space Ninja</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;godmode=" ).Ref( D ).str( "'>Toggle Godmode</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;build_mode=" ).Ref( D ).str( "'>Toggle Build Mode</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;direct_control=" ).Ref( D ).str( "'>Assume Direct Control</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;drop_everything=" ).Ref( D ).str( "'>Drop Everything</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;regenerateicons=" ).Ref( D ).str( "'>Regenerate Icons</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;offer_control=" ).Ref( D ).str( "'>Offer Control to Ghosts</option>" ).ToString();

				if ( D is Mob_Living_Carbon ) {
					body += "<option value>---</option>";
					body += new Txt( "<option value='?_src_=vars;editorgans=" ).Ref( D ).str( "'>Modify organs</option>" ).ToString();
					body += new Txt( "<option value='?_src_=vars;makeai=" ).Ref( D ).str( "'>Make AI</option>" ).ToString();
				}

				if ( D is Mob_Living_Carbon_Human ) {
					body += new Txt( "<option value='?_src_=vars;makemonkey=" ).Ref( D ).str( "'>Make monkey</option>" ).ToString();
					body += new Txt( "<option value='?_src_=vars;setspecies=" ).Ref( D ).str( "'>Set Species</option>" ).ToString();
					body += new Txt( "<option value='?_src_=vars;makerobot=" ).Ref( D ).str( "'>Make cyborg</option>" ).ToString();
					body += new Txt( "<option value='?_src_=vars;makealien=" ).Ref( D ).str( "'>Make alien</option>" ).ToString();
					body += new Txt( "<option value='?_src_=vars;makeslime=" ).Ref( D ).str( "'>Make slime</option>" ).ToString();
					body += new Txt( "<option value='?_src_=vars;purrbation=" ).Ref( D ).str( "'>Toggle Purrbation</option>" ).ToString();
				}
				body += "<option value>---</option>";
				body += new Txt( "<option value='?_src_=vars;gib=" ).Ref( D ).str( "'>Gib</option>" ).ToString();
			}

			if ( D is Obj ) {
				body += new Txt( "<option value='?_src_=vars;delall=" ).Ref( D ).str( "'>Delete all of type</option>" ).ToString();
			}

			if ( D is Obj || D is Mob || D is Tile ) {
				body += new Txt( "<option value='?_src_=vars;addreagent=" ).Ref( D ).str( "'>Add reagent</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;explode=" ).Ref( D ).str( "'>Trigger explosion</option>" ).ToString();
				body += new Txt( "<option value='?_src_=vars;emp=" ).Ref( D ).str( "'>Trigger EM pulse</option>" ).ToString();
			}
			body += "</select></form>";
			body += "</div></td></tr></table></div><hr>";
			body += "<font size='1'><b>E</b> - Edit, tries to determine the variable type by itself.<br>";
			body += "<b>C</b> - Change, asks you for the var type first.<br>";
			body += "<b>M</b> - Mass modify: changes this variable for all objects of this type.</font><br>";
			body += "<hr><table width='100%'><tr><td width='20%'><div align='center'><b>Search:</b></div></td><td width='80%'><input type='text' id='filter' name='filter_text' value='' style='width:100%;'></td></tr></table><hr>";
			body += "<ol id='vars'>";
			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( D.vars )) {
				V = _a;
				
				names += V;
			}
			names = GlobalFuncs.sortList( names );

			foreach (dynamic _b in Lang13.Enumerate( names )) {
				V2 = _b;
				
				body += this.debug_variable( V2, D.vars[V2], 0, D );
			}
			body += "</ol>";
			html = "<html><head>";

			if ( Lang13.Bool( title ) ) {
				html += "<title>" + title + "</title>";
			}
			html += @"<style>
body
{
	font-family: Verdana, sans-serif;
	font-size: 9pt;
}
.value
{
	font-family: ""Courier New"", monospace;
	font-size: 8pt;
}
</style>";
			html += "</head><body>";
			html += body;
			html += @"
		<script type='text/javascript'>
			var vars_ol = document.getElementById(""vars"");
			var complete_list = vars_ol.innerHTML;
		</script>
	";
			html += "</body></html>";
			Interface13.Browse( Task13.User, html, new Txt( "window=variables" ).Ref( D ).str( ";size=475x650" ).ToString() );
			return;
		}

		// Function from file: events.dm
		[VerbInfo( name: "Trigger Event", group: "Fun" )]
		public void forceEvent(  ) {
			
			if ( !( this.holder != null ) || !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}
			this.holder.forceEvent();
			return;
		}

		// Function from file: admin.dm
		[VerbInfo( name: "Restart Controller", desc: "Restart one of the various periodic loop controllers for the game (be careful!)", group: "Debug" )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.TheseValues, "Master", "Failsafe" )]
		public void restart_controller( dynamic controller = null ) {
			
			if ( !( this.holder != null ) ) {
				return;
			}

			dynamic _a = controller; // Was a switch-case, sorry for the mess.
			if ( _a=="Master" ) {
				new Controller_Master();
				GlobalVars.Master.process();
				GlobalFuncs.feedback_add_details( "admin_verb", "RMC" );
			} else if ( _a=="Failsafe" ) {
				new Controller_Failsafe();
				GlobalFuncs.feedback_add_details( "admin_verb", "RFailsafe" );
			}
			GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has restarted the " + controller + " controller." );
			return;
		}

		// Function from file: movable_screen_objects.dm
		[VerbInfo( name: "Spawn Snap UI Object", group: "Debug" )]
		public void test_snap_UI(  ) {
			Obj_Screen_Movable_Snap S = null;
			dynamic screen_l = null;

			S = new Obj_Screen_Movable_Snap();
			S.name = "Snap UI Object";
			S.icon_state = "block";
			S.maptext = "Snap";
			S.maptext_width = 64;
			screen_l = Interface13.Input( Task13.User, "Where on the screen? (Formatted as 'X,Y' e.g: '1,1' for bottom left)", "Spawn Snap UI Object", null, null, InputType.Str );

			if ( !Lang13.Bool( screen_l ) ) {
				return;
			}
			S.screen_loc = screen_l;
			this.screen.Add( S );
			return;
		}

		// Function from file: movable_screen_objects.dm
		[VerbInfo( name: "Spawn Movable UI Object", group: "Debug" )]
		public void test_movable_UI(  ) {
			Obj_Screen_Movable M = null;
			dynamic screen_l = null;

			M = new Obj_Screen_Movable();
			M.name = "Movable UI Object";
			M.icon_state = "block";
			M.maptext = "Movable";
			M.maptext_width = 64;
			screen_l = Interface13.Input( Task13.User, "Where on the screen? (Formatted as 'X,Y' e.g: '1,1' for bottom left)", "Spawn Movable UI Object", null, null, InputType.Str );

			if ( !Lang13.Bool( screen_l ) ) {
				return;
			}
			M.screen_loc = screen_l;
			this.screen.Add( M );
			return;
		}

		// Function from file: files.dm
		public bool file_spam_check(  ) {
			int time_to_wait = 0;

			time_to_wait = GlobalVars.fileaccess_timer - Game13.time;

			if ( time_to_wait > 0 ) {
				this.WriteMsg( "<font color='red'>Error: file_spam_check(): Spam. Please wait " + Num13.Floor( time_to_wait / 10 ) + " seconds.</font>" );
				return true;
			}
			GlobalVars.fileaccess_timer = Game13.time + 200;
			return false;
		}

		// Function from file: files.dm
		public string browse_files( string root = null, int? max_iterations = null, ByTable valid_extensions = null ) {
			root = root ?? "data/logs/";
			max_iterations = max_iterations ?? 10;
			valid_extensions = valid_extensions ?? new ByTable(new object [] { ".txt", ".log", ".htm" });

			string path = null;
			int? i = null;
			ByTable choices = null;
			dynamic choice = null;
			string extension = null;

			path = root;
			i = null;
			i = 0;

			while (( i ??0) < ( max_iterations ??0)) {
				choices = File13.List( path );

				if ( path != root ) {
					choices.Insert( 1, "/" );
				}
				choice = Interface13.Input( this, "Choose a file to access:", "Download", null, choices, InputType.Null | InputType.Any );

				dynamic _a = choice; // Was a switch-case, sorry for the mess.
				if ( _a==null ) {
					return null;
				} else if ( _a=="/" ) {
					path = root;
					i++;
					continue;
				}
				path += choice;

				if ( String13.SubStr( path, -1, 0 ) != "/" ) {
					break;
				}
				i++;
			}
			extension = String13.SubStr( path, -4, 0 );

			if ( !File13.Exists( path ) || !valid_extensions.Contains( extension ) ) {
				this.WriteMsg( "<font color='red'>Error: browse_files(): File not found/Invalid file(" + path + ").</font>" );
				return null;
			}
			return path;
		}

		// Function from file: files.dm
		public void getFiles( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			dynamic file = null;

			
			foreach (dynamic _a in Lang13.Enumerate( _args )) {
				file = _a;
				
				Interface13.CacheBrowseResource( this, file, null );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( name: ".swinset", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void _swinset( dynamic x = null ) {
			Interface13.WindowSet( this, null, x );
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( name: "Changelog", group: "OOC" )]
		public void changelog(  ) {
			this.getFiles( "html/88x31.png", "html/bug-minus.png", "html/cross-circle.png", "html/hard-hat-exclamation.png", "html/image-minus.png", "html/image-plus.png", "html/music-minus.png", "html/music-plus.png", "html/tick-circle.png", "html/wrench-screwdriver.png", "html/spell-check.png", "html/burn-exclamation.png", "html/chevron.png", "html/chevron-expand.png", "html/changelog.css", "html/changelog.html" );
			Interface13.Browse( this, "html/changelog.html", "window=changes;size=675x650" );

			if ( this.prefs.lastchangelog != GlobalVars.changelog_hash ) {
				this.prefs.lastchangelog = GlobalVars.changelog_hash;
				this.prefs.save_preferences();
				Interface13.WindowSet( this, "infowindow.changelog", "font-style=;" );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( name: "hotkeys-help", group: "OOC" )]
		public void hotkeys_help(  ) {
			string adminhotkeys = null;

			adminhotkeys = @"<font color='purple'>
Admin:
	F5 = Aghost (admin-ghost)
	F6 = player-panel
	F7 = admin-pm
	F8 = Invisimin
</font>";
			this.mob.hotkey_help();

			if ( this.holder != null ) {
				this.WriteMsg( adminhotkeys );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( name: "report-issue", desc: "Report an issue", hidden: true )]
		public void reportissue(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.githuburl ) ) {
				
				if ( Interface13.Alert( "This will open the Github issue reporter in your browser. Are you sure?", null, "Yes", "No" ) == "No" ) {
					return;
				}
				Interface13.Link( this, "" + GlobalVars.config.githuburl + "/issues/new" );
			} else {
				this.WriteMsg( "<span class='danger'>The Github URL is not set in the server configuration.</span>" );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( desc: "Visit Github", hidden: true )]
		public void github(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.githuburl ) ) {
				
				if ( Interface13.Alert( "This will open the Github repository in your browser. Are you sure?", null, "Yes", "No" ) == "No" ) {
					return;
				}
				Interface13.Link( this, GlobalVars.config.githuburl );
			} else {
				this.WriteMsg( "<span class='danger'>The Github URL is not set in the server configuration.</span>" );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( desc: "Show Server Rules.", hidden: true )]
		public void rules(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.rulesurl ) ) {
				
				if ( Interface13.Alert( "This will open the rules in your browser. Are you sure?", null, "Yes", "No" ) == "No" ) {
					return;
				}
				Interface13.Link( this, GlobalVars.config.rulesurl );
			} else {
				this.WriteMsg( "<span class='danger'>The rules URL is not set in the server configuration.</span>" );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( desc: "Visit the forum.", hidden: true )]
		public void forum(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.forumurl ) ) {
				
				if ( Interface13.Alert( "This will open the forum in your browser. Are you sure?", null, "Yes", "No" ) == "No" ) {
					return;
				}
				Interface13.Link( this, GlobalVars.config.forumurl );
			} else {
				this.WriteMsg( "<span class='danger'>The forum URL is not set in the server configuration.</span>" );
			}
			return;
		}

		// Function from file: interface.dm
		[Verb]
		[VerbInfo( desc: "Visit the wiki.", hidden: true )]
		public void wiki(  ) {
			
			if ( Lang13.Bool( GlobalVars.config.wikiurl ) ) {
				
				if ( Interface13.Alert( "This will open the wiki in your browser. Are you sure?", null, "Yes", "No" ) == "No" ) {
					return;
				}
				Interface13.Link( this, GlobalVars.config.wikiurl );
			} else {
				this.WriteMsg( "<span class='danger'>The wiki URL is not set in the server configuration.</span>" );
			}
			return;
		}

		// Function from file: external.dm
		[Verb]
		[VerbInfo( hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void uiclose( dynamic _ref = null ) {
			dynamic ui = null;

			ui = Lang13.FindObj( _ref );

			if ( ui is Tgui ) {
				ui.close();

				if ( this != null && this.mob != null ) {
					this.mob.unset_machine();
				}
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void drop_item(  ) {
			
			if ( !( this.mob is Mob_Living_Silicon_Robot ) ) {
				this.mob.drop_item_v();
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void attack_self(  ) {
			
			if ( this.mob != null ) {
				this.mob.mode();
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( name: "Swap hands", group: "IC" )]
		public void swap_hand(  ) {
			
			if ( this.mob != null ) {
				this.mob.swap_hand();
			}
			return;
		}

		// Function from file: mob_movement.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void delete_key_pressed(  ) {
			
			if ( !Lang13.Bool( Task13.User.pulling ) ) {
				Task13.User.WriteMsg( "<span class='notice'>You are not pulling anything.</span>" );
				return;
			}
			Task13.User.stop_pulling();
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Announcments", desc: ".Toggles hearing Central Command, Captain, VOX, and other announcment sounds", group: "Preferences" )]
		public void toggle_announcment_sound(  ) {
			this.prefs.toggles ^= 2048;
			this.WriteMsg( "You will now " + ( Lang13.Bool( this.prefs.toggles & 2048 ) ? "hear announcment sounds" : "no longer hear announcments" ) + "." );
			this.prefs.save_preferences();
			GlobalFuncs.feedback_add_details( "admin_verb", "TAS" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Toggle Inquisitiveness", desc: "Sets whether your ghost examines everything on click by default", group: "Preferences" )]
		public void toggle_inquisition(  ) {
			this.prefs.inquisitive_ghost = !this.prefs.inquisitive_ghost;
			this.prefs.save_preferences();

			if ( this.prefs.inquisitive_ghost ) {
				this.WriteMsg( "<span class='notice'>You will now examine everything you click on.</span>" );
			} else {
				this.WriteMsg( "<span class='notice'>You will no longer examine things you click on.</span>" );
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Toggle Ghost HUD", desc: "Hide/Show Ghost HUD", group: "Preferences" )]
		public void toggle_ghost_hud_pref(  ) {
			this.prefs.ghost_hud = !this.prefs.ghost_hud;
			this.WriteMsg( "Ghost HUD will now be " + ( this.prefs.ghost_hud ? "visible" : "hidden" ) + "." );
			this.prefs.save_preferences();

			if ( this.mob is Mob_Dead_Observer ) {
				this.mob.hud_used.show_hud();
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Game Preferences", desc: "Allows you to access the Setup Character screen. Changes to your character won't take effect until next round, but other changes will.", group: "Preferences" )]
		public void setup_character(  ) {
			this.prefs.current_tab = 1;
			this.prefs.ShowChoices( Task13.User );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Toggle Intent Selection Style", desc: "Toggle between directly clicking the desired intent or clicking to rotate through.", group: "Preferences" )]
		public void toggle_intent_style(  ) {
			this.prefs.toggles ^= 32;
			this.WriteMsg( "" + ( Lang13.Bool( this.prefs.toggles & 32 ) ? "Clicking directly on intents selects them." : "Clicking on intents rotates selection clockwise." ) );
			this.prefs.save_preferences();
			GlobalFuncs.feedback_add_details( "admin_verb", "ITENTS" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Choose Ghost Orbit", desc: "Choose your preferred ghostly orbit.", group: "Preferences" )]
		public void pick_ghost_orbit(  ) {
			dynamic new_orbit = null;
			Mob O = null;

			
			if ( !this.is_content_unlocked() ) {
				return;
			}
			new_orbit = Interface13.Input( this, "Thanks for supporting BYOND - Choose your ghostly orbit:", "Thanks for supporting BYOND", null, GlobalVars.ghost_orbits, InputType.Null | InputType.Any );

			if ( Lang13.Bool( new_orbit ) ) {
				this.prefs.ghost_orbit = new_orbit;
				this.prefs.save_preferences();

				if ( this.mob is Mob_Dead_Observer ) {
					O = this.mob;
					((dynamic)O).ghost_orbit = new_orbit;
				}
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Choose Ghost Form", desc: "Choose your preferred ghostly appearance.", group: "Preferences" )]
		public void pick_form(  ) {
			dynamic new_form = null;

			
			if ( !this.is_content_unlocked() ) {
				return;
			}
			new_form = Interface13.Input( this, "Thanks for supporting BYOND - Choose your ghostly form:", "Thanks for supporting BYOND", null, GlobalVars.ghost_forms, InputType.Null | InputType.Any );

			if ( Lang13.Bool( new_form ) ) {
				this.prefs.ghost_form = new_form;
				this.prefs.save_preferences();

				if ( this.mob is Mob_Dead_Observer ) {
					this.mob.icon_state = new_form;
				}
			}
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Ship Ambience", desc: "Toggles hearing generalized ship ambience, no matter your area.", group: "Preferences" )]
		public void toggle_ship_ambience(  ) {
			this.prefs.toggles ^= 256;
			this.prefs.save_preferences();

			if ( Lang13.Bool( this.prefs.toggles & 256 ) ) {
				this.WriteMsg( "You will now hear ship ambience." );
			} else {
				this.WriteMsg( "You will no longer hear ship ambience." );
				this.WriteMsg( new Sound( null, false, false, 2, 0 ) );
				this.ambience_playing = false;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SAmbi" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Instruments", desc: "Toggles hearing musical instruments like the violin and piano", group: "Preferences" )]
		public void toggle_instruments(  ) {
			this.prefs.toggles ^= 128;
			this.prefs.save_preferences();

			if ( Lang13.Bool( this.prefs.toggles & 128 ) ) {
				this.WriteMsg( "You will now hear people playing musical instruments." );
			} else {
				this.WriteMsg( "You will no longer hear musical instruments." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TInstru" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Ambience", desc: "Toggles hearing ambient sound effects", group: "Preferences" )]
		public void Toggle_Soundscape(  ) {
			this.prefs.toggles ^= 4;
			this.prefs.save_preferences();

			if ( Lang13.Bool( this.prefs.toggles & 4 ) ) {
				this.WriteMsg( "You will now hear ambient sounds." );
			} else {
				this.WriteMsg( "You will no longer hear ambient sounds." );
				this.WriteMsg( new Sound( null, false, false, 1, 0 ) );
				this.WriteMsg( new Sound( null, false, false, 2, 0 ) );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TAmbi" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide OOC", desc: "Toggles seeing OutOfCharacter chat", group: "Preferences" )]
		public void listen_ooc(  ) {
			this.prefs.chat_toggles ^= 1;
			this.prefs.save_preferences();
			this.WriteMsg( "You will " + ( ( this.prefs.chat_toggles & 1 ) != 0 ? "now" : "no longer" ) + " see messages on the OOC channel." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TOOC" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Stop Sounds", desc: "Kills all currently playing sounds, use if admin taste in midis a shite", group: "Preferences" )]
		public void stop_client_sounds(  ) {
			this.WriteMsg( new Sound( null ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "SAPS" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Midis", desc: "Toggles hearing sounds uploaded by admins", group: "Preferences" )]
		public void togglemidis(  ) {
			this.prefs.toggles ^= 2;
			this.prefs.save_preferences();

			if ( Lang13.Bool( this.prefs.toggles & 2 ) ) {
				this.WriteMsg( "You will now hear any sounds uploaded by admins." );

				if ( GlobalVars.admin_sound != null ) {
					this.WriteMsg( GlobalVars.admin_sound );
				}
			} else {
				this.WriteMsg( "You will no longer hear sounds uploaded by admins; any currently playing midis have been disabled." );

				if ( GlobalVars.admin_sound != null && !( ( GlobalVars.admin_sound.status & 2 ) != 0 ) ) {
					GlobalVars.admin_sound.status |= GlobalVars.SOUND_PAUSED;
					this.WriteMsg( GlobalVars.admin_sound );
					GlobalVars.admin_sound.status ^= GlobalVars.SOUND_PAUSED;
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TMidi" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence LobbyMusic", desc: "Toggles hearing the GameLobby music", group: "Preferences" )]
		public void toggletitlemusic(  ) {
			this.prefs.toggles ^= 8;
			this.prefs.save_preferences();

			if ( Lang13.Bool( this.prefs.toggles & 8 ) ) {
				this.WriteMsg( "You will now hear music in the game lobby." );

				if ( this.mob is Mob_NewPlayer ) {
					this.playtitlemusic();
				}
			} else {
				this.WriteMsg( "You will no longer hear music in the game lobby." );

				if ( this.mob is Mob_NewPlayer ) {
					this.mob.stopLobbySound();
				}
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "TLobby" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Toggle Midround Antagonist", desc: "Toggles whether or not you will be considered for antagonist status given during a round.", group: "Preferences" )]
		public void togglemidroundantag(  ) {
			this.prefs.toggles ^= 64;
			this.prefs.save_preferences();
			this.WriteMsg( "You will " + ( Lang13.Bool( this.prefs.toggles & 64 ) ? "now" : "no longer" ) + " be considered for midround antagonist positions." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TMidroundA" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Hear/Silence Prayer Sounds", desc: "Toggles hearing pray sounds.", group: "Preferences" )]
		public void toggleprayersounds(  ) {
			this.prefs.toggles ^= 512;
			this.prefs.save_preferences();

			if ( Lang13.Bool( this.prefs.toggles & 512 ) ) {
				this.WriteMsg( "You will now hear prayer sounds." );
			} else {
				this.WriteMsg( "You will no longer prayer sounds." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "PSounds" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide GhostPDA", desc: ".Toggle Between seeing all mob pda messages, and only pda messages of nearby mobs", group: "Preferences" )]
		public void toggle_ghost_pda(  ) {
			this.prefs.chat_toggles ^= 256;
			this.WriteMsg( "As a ghost, you will now " + ( ( this.prefs.chat_toggles & 256 ) != 0 ? "see all pda messages in the world" : "only see pda messages from nearby mobs" ) + "." );
			this.prefs.save_preferences();
			GlobalFuncs.feedback_add_details( "admin_verb", "TGP" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide GhostRadio", desc: ".Enable or disable hearing radio chatter as a ghost", group: "Preferences" )]
		public void toggle_ghost_radio(  ) {
			this.prefs.chat_toggles ^= 512;
			this.WriteMsg( "As a ghost, you will now " + ( ( this.prefs.chat_toggles & 512 ) != 0 ? "see radio chatter" : "not see radio chatter" ) + "." );
			this.prefs.save_preferences();
			GlobalFuncs.feedback_add_details( "admin_verb", "TGR" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide GhostWhispers", desc: ".Toggle between hearing all whispers, and only whispers of nearby mobs", group: "Preferences" )]
		public void toggle_ghost_whispers(  ) {
			this.prefs.chat_toggles ^= 128;
			this.WriteMsg( "As a ghost, you will now " + ( ( this.prefs.chat_toggles & 128 ) != 0 ? "see all whispers in the world" : "only see whispers from nearby mobs" ) + "." );
			this.prefs.save_preferences();
			GlobalFuncs.feedback_add_details( "admin_verb", "TGW" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide GhostSight", desc: ".Toggle Between seeing all mob emotes, and only emotes of nearby mobs", group: "Preferences" )]
		public void toggle_ghost_sight(  ) {
			this.prefs.chat_toggles ^= 8;
			this.WriteMsg( "As a ghost, you will now " + ( ( this.prefs.chat_toggles & 8 ) != 0 ? "see all emotes in the world" : "only see emotes from nearby mobs" ) + "." );
			this.prefs.save_preferences();
			GlobalFuncs.feedback_add_details( "admin_verb", "TGS" );
			return;
		}

		// Function from file: preferences_toggles.dm
		[Verb]
		[VerbInfo( name: "Show/Hide GhostEars", desc: ".Toggle Between seeing all mob speech, and only speech of nearby mobs", group: "Preferences" )]
		public void toggle_ghost_ears(  ) {
			this.prefs.chat_toggles ^= 4;
			this.WriteMsg( "As a ghost, you will now " + ( ( this.prefs.chat_toggles & 4 ) != 0 ? "see all speech in the world" : "only see speech from nearby mobs" ) + "." );
			this.prefs.save_preferences();
			GlobalFuncs.feedback_add_details( "admin_verb", "TGE" );
			return;
		}

		// Function from file: adminhelp.dm
		[Verb]
		[VerbInfo( name: "Adminhelp", group: "Admin" )]
		[VerbArg( 1, InputType.Str )]
		public void adminhelp( dynamic msg = null ) {
			dynamic original_msg = null;
			string ref_mob = null;
			string ref_client = null;
			dynamic X = null;
			int admin_number_present = 0;

			
			if ( GlobalVars.say_disabled ) {
				Task13.User.WriteMsg( "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( ( this.prefs.muted & 8 ) != 0 ) {
				this.WriteMsg( "<span class='danger'>Error: Admin-PM: You cannot send adminhelps (Muted).</span>" );
				return;
			}

			if ( this.handle_spam_prevention( msg, 8 ) ) {
				return;
			}

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			msg = GlobalFuncs.sanitize( String13.SubStr( msg, 1, 1024 ) );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			original_msg = msg;
			this.verbs.Remove( typeof(Client).GetMethod( "adminhelp" ) );
			this.adminhelptimerid = GlobalFuncs.addtimer( this, "giveadminhelpverb", 1200, GlobalVars.FALSE );
			msg = GlobalFuncs.keywords_lookup( msg );

			if ( !( this.mob != null ) ) {
				return;
			}
			ref_mob = new Txt().Ref( this.mob ).ToString();
			ref_client = new Txt().Ref( this ).ToString();
			msg = "<span class='adminnotice'><b><font color=red>HELP: </font><A HREF='?priv_msg=" + this.ckey + ";ahelp_reply=1'>" + GlobalFuncs.key_name( this ) + "</A> (<A HREF='?_src_=holder;adminmoreinfo=" + ref_mob + "'>?</A>) (<A HREF='?_src_=holder;adminplayeropts=" + ref_mob + "'>PP</A>) (<A HREF='?_src_=vars;Vars=" + ref_mob + "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" + ref_mob + "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" + ref_mob + "'>FLW</A>) (<A HREF='?_src_=holder;traitor=" + ref_mob + "'>TP</A>) (<A HREF='?_src_=holder;rejectadminhelp=" + ref_client + "'>REJT</A>):</b> " + msg + "</span>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				X = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( X ) ) ) {
					continue;
				}

				if ( Lang13.Bool( X.prefs.toggles & 1 ) ) {
					X.WriteMsg( "sound/effects/adminhelp.ogg" );
				}
				X.WriteMsg( msg );
			}
			this.WriteMsg( "<span class='adminnotice'>PM to-<b>Admins</b>: " + original_msg + "</span>" );
			admin_number_present = GlobalFuncs.send2irc_adminless_only( this.ckey, original_msg );
			GlobalFuncs.log_admin( "HELP: " + GlobalFuncs.key_name( this ) + ": " + original_msg + " - heard by " + admin_number_present + " non-AFK admins who have +BAN." );
			GlobalFuncs.feedback_add_details( "admin_verb", "AH" );
			return;
		}

		// Function from file: who.dm
		[Verb]
		[VerbInfo( name: "Adminwho", group: "Admin" )]
		public void adminwho(  ) {
			string msg = null;
			dynamic C = null;
			dynamic C2 = null;

			msg = "<b>Current Admins:</b>\n";

			if ( this.holder != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
					C = _a;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
						continue;
					}
					msg += "	" + C + " is a " + C.holder.rank;

					if ( Lang13.Bool( C.holder.fakekey ) ) {
						msg += " <i>(as " + C.holder.fakekey + ")</i>";
					}

					if ( C.mob is Mob_Dead_Observer ) {
						msg += " - Observing";
					} else if ( C.mob is Mob_NewPlayer ) {
						msg += " - Lobby";
					} else {
						msg += " - Playing";
					}

					if ( ((Client)C).is_afk() != 0 ) {
						msg += " (AFK)";
					}
					msg += "\n";
				}
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.admins )) {
					C2 = _b;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
						continue;
					}

					if ( !Lang13.Bool( C2.holder.fakekey ) ) {
						msg += "	" + C2 + " is a " + C2.holder.rank + "\n";
					}
				}
			}
			this.WriteMsg( msg );
			return;
		}

		// Function from file: who.dm
		[Verb]
		[VerbInfo( name: "Who", group: "OOC" )]
		public void who(  ) {
			string msg = null;
			ByTable Lines = null;
			Mob G = null;
			dynamic C = null;
			string entry = null;
			Mob_Dead_Observer O = null;
			dynamic C2 = null;
			string entry2 = null;
			dynamic C3 = null;
			dynamic line = null;

			msg = "<b>Current Players:</b>\n";
			Lines = new ByTable();

			if ( this.holder != null ) {
				
				if ( GlobalFuncs.check_rights( 2, false ) && this.mob is Mob_Dead_Observer ) {
					G = this.mob;

					if ( !Lang13.Bool( ((dynamic)G).started_as_observer ) ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " checked advanced who in-round" );
					}

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.clients )) {
						C = _b;
						

						if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
							continue;
						}
						entry = "	" + C.key;

						if ( Lang13.Bool( C.holder ) && Lang13.Bool( C.holder.fakekey ) ) {
							entry += " <i>(as " + C.holder.fakekey + ")</i>";
						}

						if ( C.mob is Mob_NewPlayer ) {
							entry += " - <font color='darkgray'><b>In Lobby</b></font>";
						} else {
							entry += " - Playing as " + C.mob.real_name;

							dynamic _a = C.mob.stat; // Was a switch-case, sorry for the mess.
							if ( _a==1 ) {
								entry += " - <font color='darkgray'><b>Unconscious</b></font>";
							} else if ( _a==2 ) {
								
								if ( C.mob is Mob_Dead_Observer ) {
									O = C.mob;

									if ( O.started_as_observer ) {
										entry += " - <font color='gray'>Observing</font>";
									} else {
										entry += " - <font color='black'><b>DEAD</b></font>";
									}
								} else {
									entry += " - <font color='black'><b>DEAD</b></font>";
								}
							}

							if ( GlobalFuncs.is_special_character( C.mob ) != 0 ) {
								entry += " - <b><font color='red'>Antagonist</font></b>";
							}
						}
						entry += new Txt( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( C.mob ).str( "'>?</A>)" ).ToString();
						Lines.Add( entry );
					}
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.clients )) {
						C2 = _c;
						

						if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
							continue;
						}
						entry2 = "	" + C2.key;

						if ( Lang13.Bool( C2.holder ) && Lang13.Bool( C2.holder.fakekey ) ) {
							entry2 += " <i>(as " + C2.holder.fakekey + ")</i>";
						}
						Lines.Add( entry2 );
					}
				}
			} else {
				
				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.clients )) {
					C3 = _d;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C3 ) ) ) {
						continue;
					}

					if ( Lang13.Bool( C3.holder ) && Lang13.Bool( C3.holder.fakekey ) ) {
						Lines.Add( C3.holder.fakekey );
					} else {
						Lines.Add( C3.key );
					}
				}
			}

			foreach (dynamic _e in Lang13.Enumerate( GlobalFuncs.sortList( Lines ) )) {
				line = _e;
				
				msg += "" + line + "\n";
			}
			msg += "<b>Total Players: " + Lang13.Length( Lines ) + "</b>";
			this.WriteMsg( msg );
			return;
		}

		// Function from file: ooc.dm
		[Verb]
		[VerbInfo( name: "Ignore", desc: "Ignore a player's messages on the OOC channel", group: "OOC" )]
		public void select_ignore(  ) {
			dynamic selection = null;

			selection = Interface13.Input( "Please, select a player!", "Ignore", null, null, GlobalFuncs.sortKey( GlobalVars.clients ), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( selection ) ) {
				return;
			}

			if ( selection == this ) {
				this.WriteMsg( "You can't ignore yourself." );
				return;
			}
			this.ignore_key( selection );
			return;
		}

		// Function from file: ooc.dm
		[Verb]
		[VerbInfo( name: "MOTD", desc: "Check the Message of the Day", group: "OOC" )]
		public void motd(  ) {
			
			if ( Lang13.Bool( GlobalVars.join_motd ) ) {
				this.WriteMsg( "<div class=\"motd\">" + GlobalVars.join_motd + "</div>" );
			} else {
				this.WriteMsg( "<span class='notice'>The Message of the Day has not been set.</span>" );
			}
			return;
		}

		// Function from file: ooc.dm
		[Verb]
		[VerbInfo( name: "Adminnotice", desc: "Check the admin notice if it has been set", group: "Admin" )]
		public void admin_notice(  ) {
			
			if ( Lang13.Bool( GlobalVars.admin_notice ) ) {
				this.WriteMsg( "<span class='boldnotice'>Admin Notice:</span>\n 	 " + GlobalVars.admin_notice );
			} else {
				this.WriteMsg( "<span class='notice'>There are no admin notices at the moment.</span>" );
			}
			return;
		}

		// Function from file: ooc.dm
		[Verb]
		[VerbInfo( name: "Reset Your OOC Color", desc: "Returns your OOC Color to default", group: "Preferences" )]
		public void resetcolorooc(  ) {
			
			if ( !( this.holder != null ) || GlobalFuncs.check_rights_for( this, 2 ) ) {
				
				if ( !this.is_content_unlocked() ) {
					return;
				}
				this.prefs.ooccolor = Lang13.Initial( this.prefs, "ooccolor" );
				this.prefs.save_preferences();
			}
			return;
		}

		// Function from file: ooc.dm
		[Verb]
		[VerbInfo( name: "Set Your OOC Color", group: "Preferences" )]
		public void colorooc(  ) {
			dynamic new_ooccolor = null;

			
			if ( !( this.holder != null ) || GlobalFuncs.check_rights_for( this, 2 ) ) {
				
				if ( !this.is_content_unlocked() ) {
					return;
				}
			}
			new_ooccolor = Interface13.Input( this, "Please select your OOC color.", "OOC color", this.prefs.ooccolor, null, InputType.Null | InputType.Color );

			if ( Lang13.Bool( new_ooccolor ) ) {
				this.prefs.ooccolor = GlobalFuncs.sanitize_ooccolor( new_ooccolor );
				this.prefs.save_preferences();
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "OC" );
			return;
		}

		// Function from file: ooc.dm
		[Verb]
		[VerbInfo( name: "OOC", group: "OOC" )]
		[VerbArg( 1, InputType.Str )]
		public void ooc( dynamic msg = null ) {
			dynamic raw_msg = null;
			string keyname = null;
			dynamic C = null;

			
			if ( GlobalVars.say_disabled ) {
				Task13.User.WriteMsg( "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( !( this.mob != null ) ) {
				return;
			}

			if ( GlobalFuncs.IsGuestKey( this.key ) ) {
				this.WriteMsg( "Guests may not use OOC." );
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}

			if ( !( ( this.prefs.chat_toggles & 1 ) != 0 ) ) {
				this.WriteMsg( "<span class='danger'>You have OOC muted.</span>" );
				return;
			}

			if ( !( this.holder != null ) ) {
				
				if ( !( GlobalVars.ooc_allowed == true ) ) {
					this.WriteMsg( "<span class='danger'>OOC is globally muted.</span>" );
					return;
				}

				if ( !GlobalVars.dooc_allowed && this.mob.stat == 2 ) {
					Task13.User.WriteMsg( "<span class='danger'>OOC for dead mobs has been turned off.</span>" );
					return;
				}

				if ( ( this.prefs.muted & 2 ) != 0 ) {
					this.WriteMsg( "<span class='danger'>You cannot use OOC (muted).</span>" );
					return;
				}

				if ( GlobalFuncs.jobban_isbanned( this, "OOC" ) ) {
					this.WriteMsg( "<span class='danger'>You have been banned from OOC.</span>" );
					return;
				}

				if ( this.handle_spam_prevention( msg, 2 ) ) {
					return;
				}

				if ( String13.FindIgnoreCase( msg, "byond://", 1, 0 ) != 0 ) {
					this.WriteMsg( "<B>Advertising other servers is not allowed.</B>" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this ) + " has attempted to advertise in OOC: " + msg );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this ) + " has attempted to advertise in OOC: " + msg );
					return;
				}
			}
			raw_msg = msg;
			msg = GlobalFuncs.emoji_parse( msg );

			if ( new ByTable(new object [] { ".", ";", ":", "#" }).Contains( String13.SubStr( msg, 1, 2 ) ) || String13.FindIgnoreCase( String13.ToLower( String13.SubStr( msg, 1, 5 ) ), "say", 1, 0 ) != 0 ) {
				
				if ( Interface13.Alert( "Your message \"" + raw_msg + "\" looks like it was meant for in game communication, say it in OOC?", "Meant for OOC?", "No", "Yes" ) != "Yes" ) {
					return;
				}
			}
			GlobalFuncs.log_ooc( "" + this.mob.name + "/" + this.key + " : " + raw_msg );
			keyname = this.key;

			if ( Lang13.Bool( this.prefs.unlock_content ) ) {
				
				if ( Lang13.Bool( this.prefs.toggles & 16 ) ) {
					keyname = new Txt( "<font color='" ).item( ( Lang13.Bool( this.prefs.ooccolor ) ? this.prefs.ooccolor : ((dynamic)( GlobalVars.normal_ooc_colour )) ) ).str( "'><img style='width:9px;height:9px;' class=icon src=" ).Ref( "icons/member_content.dmi" ).str( " iconstate=blag>" ).item( keyname ).str( "</font>" ).ToString();
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.clients )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( ( C.prefs.chat_toggles & 1 ) != 0 ) {
					
					if ( this.holder != null ) {
						
						if ( !Lang13.Bool( this.holder.fakekey ) || Lang13.Bool( C.holder ) ) {
							
							if ( GlobalFuncs.check_rights_for( this, 2 ) ) {
								C.WriteMsg( "<span class='adminooc'>" + ( GlobalVars.config.allow_admin_ooccolor && Lang13.Bool( this.prefs.ooccolor ) ? "<font color=" + this.prefs.ooccolor + ">" : "" ) + "<span class='prefix'>OOC:</span> <EM>" + keyname + ( Lang13.Bool( this.holder.fakekey ) ? "/(" + this.holder.fakekey + ")" : "" ) + ":</EM> <span class='message'>" + msg + "</span></span></font>" );
							} else {
								C.WriteMsg( "<span class='adminobserverooc'><span class='prefix'>OOC:</span> <EM>" + keyname + ( Lang13.Bool( this.holder.fakekey ) ? "/(" + this.holder.fakekey + ")" : "" ) + ":</EM> <span class='message'>" + msg + "</span></span>" );
							}
						} else {
							C.WriteMsg( "<font color='" + GlobalVars.normal_ooc_colour + "'><span class='ooc'><span class='prefix'>OOC:</span> <EM>" + ( Lang13.Bool( this.holder.fakekey ) ? this.holder.fakekey : this.key ) + ":</EM> <span class='message'>" + msg + "</span></span></font>" );
						}
					} else if ( !C.prefs.ignoring.Contains( this.key ) ) {
						C.WriteMsg( "<font color='" + GlobalVars.normal_ooc_colour + "'><span class='ooc'><span class='prefix'>OOC:</span> <EM>" + keyname + ":</EM> <span class='message'>" + msg + "</span></span></font>" );
					}
				}
			}
			return;
		}

		// Function from file: getrev.dm
		[Verb]
		[VerbInfo( name: "Show Server Revision", desc: "Check the current server code revision", group: "OOC" )]
		public void showrevinfo(  ) {
			double sum = 0;
			int? i = null;
			int? i2 = null;
			double percentage = 0;

			
			if ( Lang13.Bool( GlobalVars.revdata.revision ) ) {
				this.WriteMsg( "<b>Server revision compiled on:</b> " + GlobalVars.revdata.date );
				this.WriteMsg( "<a href='" + GlobalVars.config.githuburl + "/commit/" + GlobalVars.revdata.revision + "'>" + GlobalVars.revdata.revision + "</a>" );
			} else {
				this.WriteMsg( "Revision unknown" );
			}
			this.WriteMsg( "<b>Current Infomational Settings:</b>" );
			this.WriteMsg( "Protect Authority Roles From Traitor: " + GlobalVars.config.protect_roles_from_antagonist );
			this.WriteMsg( "Protect Assistant Role From Traitor: " + GlobalVars.config.protect_assistant_from_antagonist );
			this.WriteMsg( "Enforce Human Authority: " + GlobalVars.config.enforce_human_authority );
			this.WriteMsg( "Allow Latejoin Antagonists: " + GlobalVars.config.allow_latejoin_antagonists );
			this.WriteMsg( "Enforce Continuous Rounds: " + GlobalVars.config.continuous.len + " of " + GlobalVars.config.modes.len + " roundtypes" );
			this.WriteMsg( "Allow Midround Antagonists: " + GlobalVars.config.midround_antag.len + " of " + GlobalVars.config.modes.len + " roundtypes" );

			if ( GlobalVars.config.show_game_type_odds ) {
				this.WriteMsg( "<b>Game Mode Odds:</b>" );
				sum = 0;
				i = null;
				i = 1;

				while (( i ??0) <= GlobalVars.config.probabilities.len) {
					sum += Convert.ToDouble( GlobalVars.config.probabilities[GlobalVars.config.probabilities[i]] );
					i++;
				}
				i2 = null;
				i2 = 1;

				while (( i2 ??0) <= GlobalVars.config.probabilities.len) {
					
					if ( Convert.ToDouble( GlobalVars.config.probabilities[GlobalVars.config.probabilities[i2]] ) > 0 ) {
						percentage = Num13.Round( Convert.ToDouble( GlobalVars.config.probabilities[GlobalVars.config.probabilities[i2]] / sum * 100 ), 0.1 );
						this.WriteMsg( "" + GlobalVars.config.probabilities[i2] + " " + percentage + "%" );
					}
					i2++;
				}
			}
			return;
		}

		// Function from file: tgstation.dme
		[Verb]
		[VerbInfo( name: ".windowclose", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void windowclose( string atomref = null ) {
			dynamic hsrc = null;
			string href = null;

			
			if ( atomref != "null" ) {
				hsrc = Lang13.FindObj( atomref );
				href = "close=1";

				if ( Lang13.Bool( hsrc ) ) {
					Task13.User = this.mob;
					this.Topic( href, String13.ParseUrlParams( href ), hsrc );
					return;
				}
			}

			if ( this != null && this.mob != null ) {
				this.mob.unset_machine();
			}
			return;
		}

	}

}