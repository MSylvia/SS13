// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Paper : Obj_Item_Weapon {

		public dynamic info = null;
		public dynamic info_links = null;
		public dynamic stamps = null;
		public double? fields = null;
		public ByTable stamped = null;
		public bool rigged = false;
		public bool spam_flag = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.throw_range = 1;
			this.throw_speed = 1;
			this.pressure_resistance = 0;
			this.slot_flags = 64;
			this.body_parts_covered = 1;
			this.burn_state = 0;
			this.burntime = 5;
			this.icon = "icons/obj/bureaucracy.dmi";
			this.icon_state = "paper";
		}

		// Function from file: paper.dm
		public Obj_Item_Weapon_Paper ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pixel_y = Rand13.Int( -8, 8 );
			this.pixel_x = Rand13.Int( -9, 9 );
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.update_icon();
				this.updateinfolinks();
				return;
			}));
			return;
		}

		// Function from file: paper.dm
		public override void extinguish(  ) {
			base.extinguish();
			this.update_icon();
			return;
		}

		// Function from file: paper.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			base.fire_act( false, (object)(exposed_temperature), exposed_volume );
			this.icon_state = "paper_onfire";
			this.info = "" + GlobalFuncs.stars( this.info );
			return false;
		}

		// Function from file: paper.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Image stampoverlay = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( this.burn_state == 1 ) {
				return null;
			}

			if ( GlobalFuncs.is_blind( user ) != 0 ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Pen || A is Obj_Item_Toy_Crayon ) {
				
				if ( ((Mob)user).IsAdvancedToolUser() ) {
					Interface13.Browse( user, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY>" + this.info_links + "<HR>" + this.stamps + "</BODY></HTML>", "window=" + this.name );
					return null;
				} else {
					user.WriteMsg( "<span class='notice'>You don't know how to read or write.</span>" );
					return null;
				}

				if ( this is Obj_Item_Weapon_Paper_Talisman ) {
					user.WriteMsg( "<span class='warning'>" + A + "'s ink fades away shortly after it is written.</span>" );
					return null;
				}
			} else if ( A is Obj_Item_Weapon_Stamp ) {
				
				if ( !( Map13.GetDistance( this, Task13.User ) <= 1 ) && this.loc != user && !( this.loc is Obj_Item_Weapon_Clipboard ) && this.loc.loc != user && ((Mob)user).get_active_hand() != A ) {
					return null;
				}
				this.stamps += "<img src=large_" + A.icon_state + ".png>";
				stampoverlay = new Image( "icons/obj/bureaucracy.dmi" );
				stampoverlay.pixel_x = Rand13.Int( -2, 2 );
				stampoverlay.pixel_y = Rand13.Int( -3, 2 );
				stampoverlay.icon_state = "paper_" + A.icon_state;

				if ( !( this.stamped != null ) ) {
					this.stamped = new ByTable();
				}
				this.stamped.Add( A.type );
				this.overlays.Add( stampoverlay );
				user.WriteMsg( "<span class='notice'>You stamp the paper with your rubber stamp.</span>" );
			}

			if ( ((Obj_Item)A).is_hot() != 0 ) {
				
				if ( Lang13.Bool( user.disabilities & 256 ) && Rand13.PercentChance( 10 ) ) {
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " accidentally ignites themselves!</span>", "<span class='userdanger'>You miss the paper and accidentally light yourself on fire!</span>" );
					((Mob)user).unEquip( A );
					((Mob_Living)user).adjust_fire_stacks( 1 );
					user.IgniteMob();
					return null;
				}

				if ( !( Map13.GetDistance( user, this ) <= 1 ) ) {
					return null;
				}
				((Mob)user).unEquip( this );
				((Ent_Static)user).visible_message( "<span class='danger'>" + user + " lights " + this + " ablaze with " + A + "!</span>", "<span class='danger'>You light " + this + " on fire!</span>" );
				this.fire_act();
			}
			this.add_fingerprint( user );
			return null;
		}

		// Function from file: paper.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string id = null;
			dynamic t = null;
			dynamic i = null;
			bool? iscrayon = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.stat != 0 || Task13.User.restrained() ) {
				return null;
			}

			if ( Lang13.Bool( href_list["write"] ) ) {
				id = href_list["write"];
				t = GlobalFuncs.stripped_multiline_input( "Enter what you want to write:", "Write" );

				if ( !Lang13.Bool( t ) ) {
					return null;
				}
				i = Task13.User.get_active_hand();
				iscrayon = false;

				if ( !( i is Obj_Item_Weapon_Pen ) ) {
					
					if ( !( i is Obj_Item_Toy_Crayon ) ) {
						return null;
					}
					iscrayon = true;
				}

				if ( !( Map13.GetDistance( this, Task13.User ) <= 1 ) && this.loc != Task13.User && !( this.loc is Obj_Item_Weapon_Clipboard ) && this.loc.loc != Task13.User && Task13.User.get_active_hand() != i ) {
					return null;
				}
				t = this.parsepencode( t, i, Task13.User, iscrayon );

				if ( t != null ) {
					
					if ( id != "end" ) {
						this.addtofield( String13.ParseNumber( id ), t );
					} else {
						this.info += t;
						this.updateinfolinks();
					}
					Interface13.Browse( Task13.User, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY>" + this.info_links + "<HR>" + this.stamps + "</BODY></HTML>", "window=" + this.name );
					this.update_icon();
				}
			}
			return null;
		}

		// Function from file: paper.dm
		public void openhelp( dynamic user = null ) {
			Interface13.Browse( user, @"<HTML><HEAD><TITLE>Pen Help</TITLE></HEAD>
	<BODY>
		<b><center>Crayon&Pen commands</center></b><br>
		<br>
		[br] : Creates a linebreak.<br>
		[center] - [/center] : Centers the text.<br>
		[b] - [/b] : Makes the text <b>bold</b>.<br>
		[i] - [/i] : Makes the text <i>italic</i>.<br>
		[u] - [/u] : Makes the text <u>underlined</u>.<br>
		[large] - [/large] : Increases the <font size = ""4"">size</font> of the text.<br>
		[sign] : Inserts a signature of your name in a foolproof way.<br>
		[field] : Inserts an invisible field which lets you start type from there. Useful for forms.<br>
		<br>
		<b><center>Pen exclusive commands</center></b><br>
		[small] - [/small] : Decreases the <font size = ""1"">size</font> of the text.<br>
		[list] - [/list] : A list.<br>
		[*] : A dot used for lists.<br>
		[hr] : Adds a horizontal rule.
	</BODY></HTML>", "window=paper_help" );
			return;
		}

		// Function from file: paper.dm
		public dynamic parsepencode( dynamic t = null, dynamic P = null, Mob user = null, bool? iscrayon = null ) {
			iscrayon = iscrayon ?? false;

			dynamic C = null;
			int laststart = 0;
			int i = 0;

			
			if ( Lang13.Length( t ) < 1 ) {
				return null;
			}
			t = GlobalFuncs.replacetext( t, "[center]", "<center>" );
			t = GlobalFuncs.replacetext( t, "[/center]", "</center>" );
			t = GlobalFuncs.replacetext( t, "[br]", "<BR>" );
			t = GlobalFuncs.replacetext( t, "[b]", "<B>" );
			t = GlobalFuncs.replacetext( t, "[/b]", "</B>" );
			t = GlobalFuncs.replacetext( t, "[i]", "<I>" );
			t = GlobalFuncs.replacetext( t, "[/i]", "</I>" );
			t = GlobalFuncs.replacetext( t, "[u]", "<U>" );
			t = GlobalFuncs.replacetext( t, "[/u]", "</U>" );
			t = GlobalFuncs.replacetext( t, "[large]", "<font size=\"4\">" );
			t = GlobalFuncs.replacetext( t, "[/large]", "</font>" );
			t = GlobalFuncs.replacetext( t, "[sign]", "<font face=\"" + "Times New Roman" + "\"><i>" + user.real_name + "</i></font>" );
			t = GlobalFuncs.replacetext( t, "[field]", "<span class=\"paper_field\"></span>" );

			if ( !( iscrayon == true ) ) {
				t = GlobalFuncs.replacetext( t, "[*]", "<li>" );
				t = GlobalFuncs.replacetext( t, "[hr]", "<HR>" );
				t = GlobalFuncs.replacetext( t, "[small]", "<font size = \"1\">" );
				t = GlobalFuncs.replacetext( t, "[/small]", "</font>" );
				t = GlobalFuncs.replacetext( t, "[list]", "<ul>" );
				t = GlobalFuncs.replacetext( t, "[/list]", "</ul>" );
				t = "<font face=\"" + "Verdana" + "\" color=" + P.colour + ">" + t + "</font>";
			} else {
				C = P;
				t = GlobalFuncs.replacetext( t, "[*]", "" );
				t = GlobalFuncs.replacetext( t, "[hr]", "" );
				t = GlobalFuncs.replacetext( t, "[small]", "" );
				t = GlobalFuncs.replacetext( t, "[/small]", "" );
				t = GlobalFuncs.replacetext( t, "[list]", "" );
				t = GlobalFuncs.replacetext( t, "[/list]", "" );
				t = "<font face=\"" + "Comic Sans MS" + "\" color=" + C.paint_color + "><b>" + t + "</b></font>";
			}
			laststart = 1;

			while (true) {
				i = String13.FindIgnoreCase( t, "<span class=\"paper_field\">", laststart, 0 );

				if ( i == 0 ) {
					break;
				}
				laststart = i + 1;
				this.fields++;
			}
			return t;
		}

		// Function from file: paper.dm
		public void clearpaper(  ) {
			this.info = null;
			this.stamps = null;
			this.stamped = new ByTable();
			this.overlays.Cut();
			this.updateinfolinks();
			this.update_icon();
			return;
		}

		// Function from file: paper.dm
		public void updateinfolinks(  ) {
			double? i = null;

			this.info_links = this.info;
			i = 0;
			i = 1;

			while (( i ??0) <= ( this.fields ??0)) {
				this.addtofield( i, new Txt( "<font face=\"" ).item( "Verdana" ).str( "\"><A href='?src=" ).Ref( this ).str( ";write=" ).item( i ).str( "'>write</A></font>" ).ToString(), true );
				i++;
			}
			this.info_links = this.info_links + new Txt( "<font face=\"" ).item( "Verdana" ).str( "\"><A href='?src=" ).Ref( this ).str( ";write=end'>write</A></font>" ).ToString();
			return;
		}

		// Function from file: paper.dm
		public void addtofield( double? id = null, dynamic text = null, bool? links = null ) {
			links = links ?? false;

			double? locid = null;
			int laststart = 0;
			int textindex = 0;
			int istart = 0;
			int iend = 0;
			string before = null;
			string after = null;
			string before2 = null;
			string after2 = null;

			locid = 0;
			laststart = 1;
			textindex = 1;

			while (true) {
				istart = 0;

				if ( links == true ) {
					istart = String13.FindIgnoreCase( this.info_links, "<span class=\"paper_field\">", laststart, 0 );
				} else {
					istart = String13.FindIgnoreCase( this.info, "<span class=\"paper_field\">", laststart, 0 );
				}

				if ( istart == 0 ) {
					return;
				}
				laststart = istart + 1;
				locid++;

				if ( locid == id ) {
					iend = 1;

					if ( links == true ) {
						iend = String13.FindIgnoreCase( this.info_links, "</span>", istart, 0 );
					} else {
						iend = String13.FindIgnoreCase( this.info, "</span>", istart, 0 );
					}
					textindex = iend;
					break;
				}
			}

			if ( links == true ) {
				before = String13.SubStr( this.info_links, 1, textindex );
				after = String13.SubStr( this.info_links, textindex, 0 );
				this.info_links = before + text + after;
			} else {
				before2 = String13.SubStr( this.info, 1, textindex );
				after2 = String13.SubStr( this.info, textindex, 0 );
				this.info = before2 + text + after2;
				this.updateinfolinks();
			}
			return;
		}

		// Function from file: paper.dm
		public override dynamic attack_ai( dynamic user = null ) {
			int dist = 0;

			
			if ( user is Mob_Living_Silicon_Ai && Lang13.Bool( user.current ) ) {
				dist = Map13.GetDistance( this, user.current );
			} else {
				dist = Map13.GetDistance( this, user );
			}

			if ( dist < 2 ) {
				Interface13.Browse( Task13.User, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY>" + this.info + "<HR>" + this.stamps + "</BODY></HTML>", "window=" + this.name );
				GlobalFuncs.onclose( Task13.User, "" + this.name );
			} else {
				Interface13.Browse( Task13.User, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY>" + GlobalFuncs.stars( this.info ) + "<HR>" + this.stamps + "</BODY></HTML>", "window=" + this.name );
				GlobalFuncs.onclose( Task13.User, "" + this.name );
			}
			return null;
		}

		// Function from file: paper.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			user.__CallVerb("Examine", this );

			if ( this.rigged && Lang13.Bool( GlobalVars.SSevent.holidays ) && Lang13.Bool( GlobalVars.SSevent.holidays["April Fool's Day"] ) ) {
				
				if ( !this.spam_flag ) {
					this.spam_flag = true;
					GlobalFuncs.playsound( this.loc, "sound/items/bikehorn.ogg", 50, 1 );
					Task13.Schedule( 20, (Task13.Closure)(() => {
						this.spam_flag = false;
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: paper.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " scratches a grid on their wrist with the paper! It looks like " ).he_she_it_they().str( "'s trying to commit sudoku..</span>" ).ToString() );
			return 1;
		}

		// Function from file: paper.dm
		public override double examine( dynamic user = null ) {
			dynamic assets = null;

			base.examine( (object)(user) );
			assets = GlobalFuncs.get_asset_datum( typeof(Asset_Simple_Paper) );
			((Asset)assets).send( user );

			if ( Map13.GetDistance( user, this ) <= 1 || user is Mob_Dead_Observer ) {
				
				if ( !( user is Mob_Living_Carbon_Human || user is Mob_Dead_Observer || user is Mob_Living_Silicon ) ) {
					Interface13.Browse( user, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY>" + GlobalFuncs.stars( this.info ) + "<HR>" + this.stamps + "</BODY></HTML>", "window=" + this.name );
					GlobalFuncs.onclose( user, "" + this.name );
				} else {
					Interface13.Browse( user, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY>" + this.info + "<HR>" + this.stamps + "</BODY></HTML>", "window=" + this.name );
					GlobalFuncs.onclose( user, "" + this.name );
				}
			} else {
				user.WriteMsg( "<span class='notice'>It is too far away.</span>" );
			}
			return 0;
		}

		// Function from file: paper.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.burn_state == 1 ) {
				this.icon_state = "paper_onfire";
				return null;
			}

			if ( Lang13.Bool( this.info ) ) {
				this.icon_state = "paper_words";
				return null;
			}
			this.icon_state = "paper";
			return null;
		}

		// Function from file: cosmetics.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic H = null;

			
			if ( user.zone_sel.selecting == "mouth" ) {
				
				if ( !( M is Mob ) ) {
					return false;
				}

				if ( M is Mob_Living_Carbon_Human ) {
					H = M;

					if ( H == user ) {
						user.WriteMsg( "<span class='notice'>You wipe off the lipstick with " + this + ".</span>" );
						H.lip_style = null;
						((Mob_Living_Carbon_Human)H).update_body();
					} else {
						((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " begins to wipe " ).item( H ).str( "'s lipstick off with " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='notice'>You begin to wipe off " + H + "'s lipstick...</span>" );

						if ( GlobalFuncs.do_after( user, 10, null, H ) ) {
							((Ent_Static)user).visible_message( new Txt().item( user ).str( " wipes " ).item( H ).str( "'s lipstick off with " ).the( this ).item().str( "." ).ToString(), "<span class='notice'>You wipe off " + H + "'s lipstick.</span>" );
							H.lip_style = null;
							((Mob_Living_Carbon_Human)H).update_body();
						}
					}
				}
			} else {
				base.attack( (object)(M), (object)(user), def_zone );
			}
			return false;
		}

		// Function from file: paper.dm
		[Verb]
		[VerbInfo( name: "Rename paper", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void rename(  ) {
			Mob H = null;
			string n_name = null;

			
			if ( Task13.User.stat != 0 || !Task13.User.canmove || Task13.User.restrained() ) {
				return;
			}

			if ( !( Task13.User is Mob_Living_Carbon_Human ) ) {
				return;
			}
			H = Task13.User;

			if ( Lang13.Bool( H.disabilities & 256 ) && Rand13.PercentChance( 25 ) ) {
				H.WriteMsg( "<span class='warning'>You cut yourself on the paper! Ahhhh! Ahhhhh!</span>" );
				H.damageoverlaytemp = 9001;
				return;
			}
			n_name = GlobalFuncs.stripped_input( Task13.User, "What would you like to label the paper?", "Paper Labelling", null, 26 );

			if ( this.loc == Task13.User && Task13.User.stat == 0 ) {
				this.name = "paper" + ( Lang13.Bool( n_name ) ? "- '" + n_name + "'" : null );
			}
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}