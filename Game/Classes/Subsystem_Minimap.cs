// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Minimap : Subsystem {

		public int MAX_ICON_DIMENSION = 1024;
		public int ICON_SIZE = 4;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Minimap";
			this.priority = -2;
		}

		// Function from file: minimap.dm
		public Subsystem_Minimap (  ) {
			
			if ( GlobalVars.SSminimap != this ) {
				
				if ( GlobalVars.SSminimap is Subsystem_Minimap ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSminimap );
				}
				GlobalVars.SSminimap = this;
			}
			return;
		}

		// Function from file: minimap.dm
		public void sendMinimaps( Client client = null ) {
			double z = 0;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, Game13.map_size_z )) {
				z = _a;
				
				GlobalFuncs.send_asset( client, "minimap_" + z + ".png" );
			}
			return;
		}

		// Function from file: minimap.dm
		public string getMinimapFile( double zlevel = 0 ) {
			return "data/minimaps/" + "Box Station" + "_" + zlevel;
		}

		// Function from file: minimap.dm
		public void generate( double z = 0, int? x1 = null, int? y1 = null, int? x2 = null, int? y2 = null ) {
			x1 = x1 ?? 1;
			y1 = y1 ?? 1;
			x2 = x2 ?? Game13.map_size_x;
			y2 = y2 ?? Game13.map_size_y;

			string result_path = null;
			string hash_path = null;
			ByTable tiles = null;
			string hash = null;
			string temp = null;
			dynamic obj = null;
			dynamic tile = null;
			Icon map_icon = null;
			int i = 0;
			Icon turf_icon = null;
			Icon obj_icon = null;
			string old_icon = null;
			string old_icon_state = null;
			double? old_dir = null;
			string new_icon = null;
			string new_icon_state = null;
			double? new_dir = null;
			dynamic tile2 = null;
			Icon result_icon = null;

			result_path = "" + this.getMinimapFile( z ) + ".png";
			hash_path = "" + this.getMinimapFile( z ) + ".md5";
			tiles = Map13.FetchInBlock( Map13.GetTile( x1 ??0, y1 ??0, ((int)( z )) ), Map13.GetTile( x2 ??0, y2 ??0, ((int)( z )) ) );
			hash = "";

			foreach (dynamic _a in Lang13.Enumerate( tiles )) {
				tile = _a;
				

				if ( tile.loc is Zone_Asteroid || tile.loc is Zone_Mine_Unexplored || tile is Tile_Simulated_Mineral || tile.loc is Zone_Space && tile is Tile_Simulated_Floor_Plating_Asteroid ) {
					temp = "/area/asteroid";
				} else if ( tile.loc is Zone_Mine && tile is Tile_Simulated_Floor_Plating_Asteroid ) {
					temp = "/area/mine/explored";
				} else if ( tile.loc.type == typeof(Zone_Start) || tile.type == typeof(Tile_Space) && !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), tile ) ) || tile is Tile_Space_Transit ) {
					temp = "/turf/space";

					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice_Catwalk), tile ) ) ) {
						
					}
				} else if ( tile.type == typeof(Tile_Space) ) {
					
					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice_Catwalk), tile ) ) ) {
						temp = "/obj/structure/lattice/catwalk";
					} else {
						temp = "/obj/structure/lattice";
					}
				} else if ( tile.type == typeof(Tile_Simulated_Floor_Plating_Abductor) ) {
					temp = "/turf/simulated/floor/plating/abductor";
				} else if ( tile.type == typeof(Tile_Simulated_Floor_Plating) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Window_Shuttle), tile ) ) ) {
					temp = "/obj/structure/window/shuttle";
				} else {
					temp = "" + tile.icon + tile.icon_state + tile.dir;
				}
				obj = Lang13.FindIn( typeof(Obj_Structure_TransitTube), tile );

				if ( Lang13.Bool( obj ) ) {
					temp = "" + temp + "/obj/structure/transit_tube" + obj.icon_state + obj.dir;
				}
				hash = Num13.Md5( "" + hash + temp );
			}

			if ( File13.Exists( result_path ) ) {
				
				if ( !File13.Exists( hash_path ) || GlobalFuncs.trim( File13.Read( hash_path ) ) != hash ) {
					File13.Delete( result_path );
					File13.Delete( hash_path );
				}
			}

			if ( !File13.Exists( result_path ) ) {
				
				if ( !( ( x1 ??0) > 0 ) ) {
					Task13.Crash( "" + "code/controllers/subsystem/minimap.dm" + ":" + 85 + ":Assertion Failed: " + "x1 > 0" );
				}

				if ( !( ( y1 ??0) > 0 ) ) {
					Task13.Crash( "" + "code/controllers/subsystem/minimap.dm" + ":" + 86 + ":Assertion Failed: " + "y1 > 0" );
				}

				if ( !( ( x2 ??0) <= Game13.map_size_x ) ) {
					Task13.Crash( "" + "code/controllers/subsystem/minimap.dm" + ":" + 87 + ":Assertion Failed: " + "x2 <= world.maxx" );
				}

				if ( !( ( y2 ??0) <= Game13.map_size_y ) ) {
					Task13.Crash( "" + "code/controllers/subsystem/minimap.dm" + ":" + 88 + ":Assertion Failed: " + "y2 <= world.maxy" );
				}
				map_icon = new Icon( "html/mapbase1024.png" );

				if ( !( map_icon.Width() == GlobalVars.MAX_ICON_DIMENSION && map_icon.Height() == GlobalVars.MAX_ICON_DIMENSION ) ) {
					Task13.Crash( "" + "code/controllers/subsystem/minimap.dm" + ":" + 94 + ":Assertion Failed: " + "map_icon.Width() == MAX_ICON_DIMENSION && map_icon.Height() == MAX_ICON_DIMENSION" );
				}
				i = 0;
				turf_icon = null;
				obj_icon = null;
				old_icon = null;
				old_icon_state = null;
				old_dir = null;
				new_icon = null;
				new_icon_state = null;
				new_dir = null;

				foreach (dynamic _b in Lang13.Enumerate( tiles )) {
					tile2 = _b;
					

					if ( tile2.loc.type != typeof(Zone_Start) && ( tile2.type != typeof(Tile_Space) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), tile2 ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_TransitTube), tile2 ) ) ) && !( tile2 is Tile_Space_Transit ) ) {
						
						if ( tile2.loc is Zone_Asteroid || tile2.loc is Zone_Mine_Unexplored || tile2 is Tile_Simulated_Mineral || tile2.loc is Zone_Space && tile2 is Tile_Simulated_Floor_Plating_Asteroid ) {
							new_icon = "icons/turf/mining.dmi";
							new_icon_state = "rock";
							new_dir = 2;
						} else if ( tile2.loc is Zone_Mine && tile2 is Tile_Simulated_Floor_Plating_Asteroid ) {
							new_icon = "icons/turf/floors.dmi";
							new_icon_state = "asteroid";
							new_dir = 2;
						} else if ( tile2.type == typeof(Tile_Simulated_Floor_Plating_Abductor) ) {
							new_icon = "icons/turf/floors.dmi";
							new_icon_state = "alienpod1";
							new_dir = 2;
						} else if ( tile2.type == typeof(Tile_Space) ) {
							obj = Lang13.FindIn( typeof(Obj_Structure_Lattice), tile2 );

							if ( !Lang13.Bool( obj ) ) {
								obj = Lang13.FindIn( typeof(Obj_Structure_TransitTube), tile2 );
							}

							if ( !( obj != null ) ) {
								Task13.Crash( "" + "code/controllers/subsystem/minimap.dm" + ":" + 126 + ":Assertion Failed: " + "obj != null" );
							}

							if ( Lang13.Bool( obj ) ) {
								new_icon = obj.icon;
								new_dir = Lang13.DoubleNullable( obj.dir );
								new_icon_state = obj.icon_state;
							}
						} else if ( tile2.type == typeof(Tile_Simulated_Floor_Plating) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Window_Shuttle), tile2 ) ) ) {
							new_icon = "icons/obj/structures.dmi";
							new_dir = 2;
							new_icon_state = "swindow";
						} else {
							new_icon = tile2.icon;
							new_icon_state = tile2.icon_state;
							new_dir = Lang13.DoubleNullable( tile2.dir );
						}

						if ( new_icon != old_icon || new_icon_state != old_icon_state || new_dir != old_dir ) {
							old_icon = new_icon;
							old_icon_state = new_icon_state;
							old_dir = new_dir;
							turf_icon = new Icon( new_icon, new_icon_state, new_dir, 1, false );
							turf_icon.Scale( GlobalVars.ICON_SIZE, GlobalVars.ICON_SIZE );
						}

						if ( tile2.type != typeof(Tile_Space) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), tile2 ) ) ) {
							obj = Lang13.FindIn( typeof(Obj_Structure_TransitTube), tile2 );

							if ( Lang13.Bool( obj ) ) {
								obj_icon = new Icon( obj.icon, obj.icon_state, Lang13.DoubleNullable( obj.dir ), 1, false );
								obj_icon.Scale( GlobalVars.ICON_SIZE, GlobalVars.ICON_SIZE );
								turf_icon.Blend( obj_icon, 3 );
							}
						}
						map_icon.Blend( turf_icon, 3, Lang13.DoubleNullable( ( tile2.x - 1 ) * 4 ), Lang13.DoubleNullable( ( tile2.y - 1 ) * 4 ) );

						if ( ++i % 512 == 0 ) {
							Task13.Sleep( 1 );
						}
					} else {
						Task13.Sleep( -1 );
					}
				}
				result_icon = new Icon();
				result_icon.Insert( map_icon, "", GlobalVars.SOUTH, 1, false );
				File13.Copy( result_icon, result_path );
				File13.Write( hash_path, hash );
			}
			return;
		}

		// Function from file: minimap.dm
		public override double Initialize( int start_timeofday = 0, double? zlevel = null ) {
			double z = 0;
			double z2 = 0;

			
			if ( Lang13.Bool( zlevel ) ) {
				return base.Initialize( start_timeofday, zlevel );
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, 7 )) {
				z = _a;
				
				this.generate( z );
			}

			foreach (dynamic _b in Lang13.IterateRange( 1, 7 )) {
				z2 = _b;
				
				GlobalFuncs.register_asset( "minimap_" + z2 + ".png", new File( "" + this.getMinimapFile( z2 ) + ".png" ) );
			}
			base.Initialize( start_timeofday, zlevel );
			return 0;
		}

	}

}