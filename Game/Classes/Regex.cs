// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Regex : Game_Data {

		public dynamic str = null;
		public string exp = null;
		public dynamic error = null;
		public double anchors = 0;
		public ByTable matches = new ByTable();

		// Function from file: bygex.dm
		public Regex ( dynamic str = null, string exp = null, dynamic results = null ) {
			ByTable L = null;
			dynamic M = null;
			dynamic i = null;
			int j = 0;

			this.str = str;
			this.exp = exp;

			if ( String13.FindIgnoreCase( results, "$Err$", 1, 6 ) != 0 ) {
				this.error = results;
			} else {
				L = String13.ParseUrlParams( results );

				foreach (dynamic _a in Lang13.Enumerate( L )) {
					i = _a;
					
					M = L[i];
					j = 2;

					while (j <= Convert.ToDouble( M.len )) {
						this.matches.Add( new Match( String13.ParseNumber( M[j - 1] ), String13.ParseNumber( M[j] ) ) );
						j += 2;
					}
				}
				this.anchors = ( j - 2 ) / 2;
			}
			return; // Warning! Attempt to return some other value!
		}

		// Function from file: bygex.dm
		public string report(  ) {
			string _default = null;

			int? i = null;

			_default = ":: RESULTS ::\n:: str :: " + String13.HtmlEncode( this.str ) + "\n:: exp :: " + String13.HtmlEncode( this.exp ) + "\n:: anchors :: " + this.anchors;

			if ( Lang13.Bool( this.error ) ) {
				_default += "\n<font color='red'>" + this.error + "</font>";
				return _default;
			}
			i = null;
			i = 1;

			while (( i ??0) <= this.matches.len) {
				_default += "\nMatch" + i + "\n	" + String13.HtmlEncode( this.f_str( i ) ) + "\n	pos=" + this.pos( i ) + " len=" + this.len( i );
				i++;
			}
			return _default;
		}

		// Function from file: bygex.dm
		public double end( int i = 0 ) {
			Match M = null;

			
			if ( !( i != 0 ) ) {
				return Lang13.Length( this.str );
			}

			if ( i < 1 || i > this.matches.len ) {
				throw new Exception( "end() out of bounds" );
			}
			M = this.matches[i];
			return ( M.pos ??0) + ( M.len ??0);
		}

		// Function from file: bygex.dm
		public int len( int? i = null ) {
			dynamic M = null;

			
			if ( !Lang13.Bool( i ) ) {
				return Lang13.Length( this.str );
			}

			if ( ( i ??0) < 1 || ( i ??0) > this.matches.len ) {
				throw new Exception( "len(): out of bounds" );
			}
			M = this.matches[i];
			return Convert.ToInt32( M.len );
		}

		// Function from file: bygex.dm
		public double? pos( int? i = null ) {
			Match M = null;

			
			if ( !Lang13.Bool( i ) ) {
				return 1;
			}

			if ( ( i ??0) < 1 || ( i ??0) > this.matches.len ) {
				throw new Exception( "pos(): out of bounds" );
			}
			M = this.matches[i];
			return M.pos;
		}

		// Function from file: bygex.dm
		[VerbInfo( name: "str" )]
		public dynamic f_str( int? i = null ) {
			Match M = null;

			
			if ( !Lang13.Bool( i ) ) {
				return this.str;
			}
			M = this.matches[i];

			if ( ( i ??0) < 1 || ( i ??0) > this.matches.len ) {
				throw new Exception( "str(): out of bounds" );
			}
			return String13.SubStr( this.str, ((int)( M.pos ??0 )), ((int)( ( M.pos ??0) + ( M.len ??0) )) );
		}

	}

}