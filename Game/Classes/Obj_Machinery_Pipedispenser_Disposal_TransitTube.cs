// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Pipedispenser_Disposal_TransitTube : Obj_Machinery_Pipedispenser_Disposal {

		public Obj_Machinery_Pipedispenser_Disposal_TransitTube ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pipe_dispenser.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? tube_type = null;
			Obj_Structure_CTransitTube C = null;
			Obj_Structure_CTransitTube_Station C2 = null;
			Obj_Structure_CTransitTube_Station_Reverse C3 = null;
			Obj_Structure_CTransitTube_Station_Block C4 = null;
			Obj_Structure_CTransitTubePod C5 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return 1;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( !this.wait ) {
				
				if ( Lang13.Bool( href_list["tube"] ) ) {
					tube_type = String13.ParseNumber( href_list["tube"] );

					if ( ( tube_type ??0) <= 4 ) {
						C = new Obj_Structure_CTransitTube( this.loc );

						switch ((double?)( tube_type )) {
							case 0:
								C.icon_state = "E-W";
								break;
							case 1:
								C.icon_state = "E-W-Pass";
								break;
							case 2:
								C.icon_state = "S-NE";
								break;
							case 3:
								C.icon_state = "NE-SW";
								break;
							case 4:
								C.icon_state = "W-NE-SE";
								break;
						}
						C.add_fingerprint( Task13.User );
					} else {
						
						switch ((double?)( tube_type )) {
							case 5:
								C2 = new Obj_Structure_CTransitTube_Station( this.loc );
								C2.add_fingerprint( Task13.User );
								break;
							case 6:
								C3 = new Obj_Structure_CTransitTube_Station_Reverse( this.loc );
								C3.add_fingerprint( Task13.User );
								break;
							case 7:
								C4 = new Obj_Structure_CTransitTube_Station_Block( this.loc );
								C4.add_fingerprint( Task13.User );
								break;
							case 8:
								C5 = new Obj_Structure_CTransitTubePod( this.loc );
								C5.add_fingerprint( Task13.User );
								break;
						}
					}
					this.wait = true;
					Task13.Schedule( 15, (Task13.Closure)(() => {
						this.wait = false;
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: pipe_dispenser.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return 1;
			}
			dat = new Txt( "<B>Transit Tubes:</B><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=0'>Straight Tube</A><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=1'>Straight Tube with Crossing</A><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=2'>Curved Tube</A><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=3'>Diagonal Tube</A><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=4'>Junction</A><BR>\n<b>Station Equipment:</b><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=5'>Through Tube Station</A><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=6'>Terminus Tube Station</A><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=7'>Tube Blocker</A><BR>\n<A href='?src=" ).Ref( this ).str( ";tube=8'>Transit Tube Pod</A><BR>\n" ).ToString();
			Interface13.Browse( a, "<HEAD><TITLE>" + this + "</TITLE></HEAD><TT>" + dat + "</TT>", "window=pipedispenser" );
			return null;
		}

	}

}