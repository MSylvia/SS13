// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers : Obj_Item_Weapon {

		public double? amount_per_transfer_from_this = 5;
		public ByTable possible_transfer_amounts = new ByTable(new object [] { 5, 10, 15, 20, 25, 30 });
		public double? volume = 30;
		public ByTable list_reagents = null;
		public Type spawned_disease = null;
		public double? disease_amount = 20;
		public bool spillable = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.icon = "icons/obj/chemical.dmi";
		}

		// Function from file: reagent_containers.dm
		public Obj_Item_Weapon_ReagentContainers ( dynamic location = null, int? vol = null ) : base( (object)(location) ) {
			vol = vol ?? 0;

			dynamic F = null;
			ByTable data = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( ( vol ??0) > 0 ) {
				this.volume = vol;
			}
			this.create_reagents( this.volume );

			if ( this.spawned_disease != null ) {
				F = Lang13.Call( this.spawned_disease, 0 );
				data = new ByTable().Set( "viruses", new ByTable(new object [] { F }) );
				this.reagents.add_reagent( "blood", this.disease_amount, data );
			}

			if ( this.list_reagents != null ) {
				this.reagents.add_reagent_list( this.list_reagents );
			}
			return;
		}

		// Function from file: reagent_containers.dm
		public override bool throw_impact( dynamic target = null, Mob_Living_Carbon thrower = null ) {
			bool _default = false;

			dynamic M = null;
			dynamic R = null;
			Reagent A = null;

			_default = base.throw_impact( (object)(target), thrower );

			if ( !( this.reagents != null ) || !Lang13.Bool( this.reagents.total_volume ) || !this.spillable ) {
				return _default;
			}

			if ( target is Mob && Lang13.Bool( target.reagents ) ) {
				this.reagents.total_volume *= Rand13.Int( 5, 10 ) * 0.1;
				M = target;
				((Ent_Static)target).visible_message( "<span class='danger'>" + M + " has been splashed with something!</span>", "<span class='userdanger'>" + M + " has been splashed with something!</span>" );

				foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
					A = _a;
					
					R += A.id + " (";
					R += String13.NumberToString( A.volume ) + "),";
				}

				if ( Lang13.Bool( this.thrownby ) ) {
					GlobalFuncs.add_logs( this.thrownby, M, "splashed", R );
				}
				this.reagents.reaction( target, GlobalVars.TOUCH );
			} else if ( ((Ent_Static)target).CanPass( this, GlobalFuncs.get_turf( this ) ) && Lang13.Bool( this.thrownby ) && Lang13.Bool( this.thrownby.mind ) && this.thrownby.mind.assigned_role == "Bartender" ) {
				this.visible_message( "<span class='notice'>" + this + " lands onto the " + target.name + " without spilling a single drop.</span>" );
				return _default;
			} else {
				this.visible_message( "<span class='notice'>" + this + " spills its contents all over " + target + ".</span>" );
				this.reagents.reaction( target, GlobalVars.TOUCH );

				if ( GlobalFuncs.qdeleted( this ) ) {
					return _default;
				}
			}
			this.reagents.clear_reagents();
			return _default;
		}

		// Function from file: reagent_containers.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			this.reagents.chem_temp += 30;
			this.reagents.handle_reactions();
			base.fire_act( air, (object)(exposed_temperature), exposed_volume );
			return false;
		}

		// Function from file: reagent_containers.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			Reagent R = null;

			
			if ( this.reagents != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					R.on_ex_act();
				}
			}
			base.ex_act( severity, (object)(target) );
			return false;
		}

		// Function from file: reagent_containers.dm
		public virtual bool canconsume( dynamic eater = null, dynamic user = null ) {
			dynamic C = null;
			string covered = null;
			string who = null;

			
			if ( !( eater is Mob_Living_Carbon ) ) {
				return false;
			}
			C = eater;
			covered = "";

			if ( ((Mob_Living_Carbon)C).is_mouth_covered( true ) ) {
				covered = "headgear";
			} else if ( ((Mob_Living_Carbon)C).is_mouth_covered( null, true ) ) {
				covered = "mask";
			}

			if ( Lang13.Bool( covered ) ) {
				who = ( user == null || eater == user ? "your" : "their" );
				user.WriteMsg( "<span class='warning'>You have to remove " + who + " " + covered + " first!</span>" );
				return false;
			}
			return true;
		}

		// Function from file: reagent_containers.dm
		public string reagentlist( Obj_Item_Weapon_ReagentContainers snack = null ) {
			dynamic data = null;
			Reagent R = null;

			
			if ( snack.reagents.reagent_list != null && snack.reagents.reagent_list.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( snack.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					data += "" + R.id + "(" + R.volume + " units); ";
				}
				return data;
			} else {
				return "No reagents";
			}
		}

		// Function from file: reagent_containers.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			return false;
		}

		// Function from file: reagent_containers.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			return false;
		}

		// Function from file: reagent_containers.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			int i = 0;
			dynamic A = null;

			
			if ( this.possible_transfer_amounts.len != 0 ) {
				i = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.possible_transfer_amounts )) {
					A = _a;
					
					i++;

					if ( A == this.amount_per_transfer_from_this ) {
						
						if ( i < this.possible_transfer_amounts.len ) {
							this.amount_per_transfer_from_this = Lang13.DoubleNullable( this.possible_transfer_amounts[i + 1] );
						} else {
							this.amount_per_transfer_from_this = Lang13.DoubleNullable( this.possible_transfer_amounts[1] );
						}
						user.WriteMsg( "<span class='notice'>" + this + "'s transfer amount is now " + this.amount_per_transfer_from_this + " units.</span>" );
						return null;
					}
				}
			}
			return null;
		}

	}

}