// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet : Obj_Structure {

		public string icon_door = null;
		public bool icon_door_override = false;
		public bool secure = false;
		public bool opened = false;
		public bool welded = false;
		public bool locked = false;
		public bool broken = false;
		public bool large = true;
		public bool wall_mounted = false;
		public double health = 100;
		public int lastbang = 0;
		public bool can_weld_shut = true;
		public int max_mob_size = 2;
		public int mob_storage_capacity = 3;
		public int storage_capacity = 30;
		public Type cutting_tool = typeof(Obj_Item_Weapon_Weldingtool);
		public string open_sound = "sound/machines/click.ogg";
		public string cutting_sound = "sound/items/welder.ogg";
		public Type material_drop = typeof(Obj_Item_Stack_Sheet_Metal);

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/closet.dmi";
			this.icon_state = "generic";
		}

		// Function from file: closets.dm
		public Obj_Structure_Closet ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: closets.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( this.secure && !this.broken ) {
				this.broken = true;
				this.locked = false;
				this.desc += " It appears to be broken.";
				this.update_icon();

				if ( Lang13.Bool( user ) ) {
					this.visible_message( "<span class='warning'>The " + this.name + " has been broken by " + user + " with an electromagnetic card!</span>", "<span class='italics'>You hear a faint electrical spark.</span>" );
				}
				this.overlays.Add( "sparking" );
				Task13.Schedule( 4, (Task13.Closure)(() => {
					this.update_icon();
					return;
				}));
			}
			return false;
		}

		// Function from file: closets.dm
		public override double emp_act( int severity = 0 ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				
				O.emp_act( severity );
			}

			if ( this.secure && !this.broken ) {
				
				if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
					this.locked = !this.locked;
					this.update_icon();
				}

				if ( Rand13.PercentChance( ((int)( 20 / severity )) ) && !this.opened ) {
					
					if ( !this.locked ) {
						this.open();
					} else {
						this.req_access = new ByTable();
						this.req_access += Rand13.PickFromTable( GlobalFuncs.get_all_accesses() );
					}
				}
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: closets.dm
		public override bool AltClick( Mob user = null ) {
			base.AltClick( user );

			if ( !user.canUseTopic( user ) || this.broken ) {
				user.WriteMsg( "<span class='warning'>You can't do that right now!</span>" );
				return false;
			}

			if ( this.opened || !this.secure || !( Map13.GetDistance( this, user ) <= 1 ) ) {
				return false;
			} else {
				this.togglelock( user );
			}
			return false;
		}

		// Function from file: closets.dm
		public override void container_resist(  ) {
			Mob user = null;
			double breakout_time = 0;
			dynamic O = null;
			Ent_Static D = null;

			user = Task13.User;
			breakout_time = 2;

			if ( user.loc is Obj_Structure_Closet_Critter && !this.welded ) {
				breakout_time = 0.75;
			}

			if ( this.opened || !this.welded && !this.locked && !( this.loc is Obj_Mecha ) ) {
				return;
			}
			user.changeNext_move( 100 );
			((dynamic)user).last_special = Game13.time + 100;
			user.WriteMsg( "<span class='notice'>You lean on the back of " + this + " and start pushing the door open. (this will take about " + breakout_time + " minutes.)</span>" );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
				O = _a;
				
				O.WriteMsg( "<span class='warning'>" + this + " begins to shake violently!</span>" );
			}

			if ( GlobalFuncs.do_after( user, breakout_time * 600, null, this ) ) {
				
				if ( !( user != null ) || user.stat != 0 || user.loc != this || this.opened || !this.locked && !this.welded && !( this.loc is Obj_Mecha ) ) {
					return;
				}
				this.welded = false;
				this.locked = false;
				this.broken = true;
				user.visible_message( "<span class='danger'>" + user + " successfully broke out of " + this + "!</span>", "<span class='notice'>You successfully break out of " + this + "!</span>" );

				if ( this.loc is Obj_Structure_BigDelivery ) {
					D = this.loc;
					GlobalFuncs.qdel( D );
				} else if ( this.loc is Obj_Mecha ) {
					this.loc = GlobalFuncs.get_turf( this.loc );
				}
				this.open();
			} else {
				user.WriteMsg( "<span class='warning'>You fail to break out of " + this + "!</span>" );
			}
			return;
		}

		// Function from file: closets.dm
		public override bool Exit( Ent_Dynamic O = null, Ent_Static newloc = null ) {
			this.open();

			if ( O.loc == this ) {
				return false;
			}
			return true;
		}

		// Function from file: closets.dm
		public override dynamic attack_self_tk( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: closets.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			this.add_fingerprint( a );

			if ( Lang13.Bool( a.lying ) && Map13.GetDistance( this, a ) > 0 ) {
				return null;
			}

			if ( !this.toggle() ) {
				this.togglelock( a );
				return null;
			}
			return null;
		}

		// Function from file: closets.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: closets.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			dynamic M = null;

			
			if ( user.stat != 0 || !( this.loc is Tile ) ) {
				return false;
			}

			if ( !this.open() ) {
				this.container_resist();

				if ( Game13.time > this.lastbang + 5 ) {
					this.lastbang = Game13.time;

					foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_hearers_in_view( this, null ) )) {
						M = _a;
						
						M.show_message( "<FONT size=" + Num13.MaxInt( 0, 5 - Map13.GetDistance( this, M ) ) + ">BANG, bang!</FONT>", 2 );
					}
				}
			}
			return false;
		}

		// Function from file: closets.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			needs_opened = needs_opened ?? true;
			show_message = show_message ?? true;
			move_them = move_them ?? true;

			
			if ( O is Obj_Screen ) {
				return false;
			}

			if ( !( O.loc is Tile ) ) {
				return false;
			}

			if ( ((Mob)user).restrained() || Lang13.Bool( user.stat ) || user.weakened != 0 || user.stunned != 0 || user.paralysis != 0 || Lang13.Bool( user.lying ) ) {
				return false;
			}

			if ( !( O is Ent_Dynamic ) || Lang13.Bool( ((dynamic)O).anchored ) || Map13.GetDistance( user, this ) > 1 || Map13.GetDistance( user, O ) > 1 ) {
				return false;
			}

			if ( !( user.loc is Tile ) ) {
				return false;
			}

			if ( needs_opened == true && !this.opened ) {
				return false;
			}

			if ( O is Obj_Structure_Closet ) {
				return false;
			}

			if ( move_them == true ) {
				Map13.StepTowardsSimple( (Ent_Dynamic)(O), this.loc );
			}

			if ( show_message == true && user != O ) {
				((Mob)user).show_viewers( "<span class='danger'>" + user + " stuffs " + O + " into " + this + "!</span>" );
			}
			this.add_fingerprint( user );
			return true;
		}

		// Function from file: closets.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic G = null;
			dynamic WT = null;
			dynamic WT2 = null;

			
			if ( user.loc == this ) {
				return null;
			}

			if ( this.opened ) {
				
				if ( A is Obj_Item_Weapon_Grab ) {
					
					if ( this.large ) {
						G = A;
						this.MouseDrop_T( G.affecting, user );
						user.drop_item();
					} else {
						user.WriteMsg( "<span class='notice'>The locker is too small to stuff " + A + " into!</span>" );
					}
					return null;
				}

				if ( A is Obj_Item_TkGrab ) {
					return 0;
				}

				if ( Lang13.Bool( ((dynamic)this.cutting_tool).IsInstanceOfType( A ) ) ) {
					
					if ( this.cutting_tool is Obj_Item_Weapon_Weldingtool ) {
						WT = A;

						if ( !((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
							return null;
						}
						user.WriteMsg( new Txt( "<span class='notice'>You begin cutting " ).the( this ).item().str( " apart...</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, this.cutting_sound, 40, 1 );

						if ( GlobalFuncs.do_after( user, 40 / A.toolspeed, true, this ) ) {
							
							if ( !this.opened || !( this is Obj_Structure_Closet ) || !Lang13.Bool( user ) || !Lang13.Bool( WT ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() || !( user.loc != null ) ) {
								return null;
							}
							GlobalFuncs.playsound( this.loc, this.cutting_sound, 50, 1 );
							Lang13.Call( this.material_drop, this.loc );
							this.visible_message( new Txt().item( user ).str( " has cut " ).the( this ).item().str( " apart with " ).the( WT ).item().str( "." ).ToString(), "<span class='italics'>You hear welding.</span>" );
							GlobalFuncs.qdel( this );
						}
						return null;
					}
				}

				if ( user is Mob_Living_Silicon_Robot ) {
					return null;
				}

				if ( Lang13.Bool( user.drop_item() ) ) {
					A.Move( this.loc );
				}
			} else {
				
				if ( A is Obj_Item_Stack_PackageWrap ) {
					return null;
				}

				if ( A is Obj_Item_Weapon_Weldingtool && this.can_weld_shut ) {
					WT2 = A;

					if ( ((Obj_Item_Weapon_Weldingtool)WT2).remove_fuel( 0, user ) ) {
						user.WriteMsg( new Txt( "<span class='notice'>You begin " ).item( ( this.welded ? "unwelding" : "welding" ) ).str( " " ).the( this ).item().str( "...</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/items/welder2.ogg", 40, 1 );

						if ( GlobalFuncs.do_after( user, 40, true, this ) ) {
							
							if ( this.opened || !( this is Obj_Structure_Closet ) || !Lang13.Bool( user ) || !Lang13.Bool( WT2 ) || !((Obj_Item_Weapon_Weldingtool)WT2).isOn() || !( user.loc != null ) ) {
								return null;
							}
							GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 50, 1 );
							this.welded = !this.welded;
							user.WriteMsg( "<span class='notice'>You " + ( this.welded ? "weld " + this + " shut" : "unweld " + this ) + ".</span>" );
							this.update_icon();
							((Ent_Static)user).visible_message( "" + user.name + " has " + ( this.welded ? "welded " + this + " shut" : "unwelded " + this ) + ".", "<span class='warning'>You " + ( this.welded ? "weld " + this + " shut" : "unweld " + this ) + ".</span>" );
						}
						return null;
					}
				}

				if ( this.secure && this.broken ) {
					user.WriteMsg( "<span class='notice'>The locker appears to be broken.</span>" );
					return null;
				}

				if ( !this.place( user, A ) && !( A == null ) ) {
					this.attack_hand( user );
				}
			}
			return null;
		}

		// Function from file: closets.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				this.dump_contents();
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: closets.dm
		public override bool attack_animal( Mob_Living user = null ) {
			
			if ( Lang13.Bool( ((dynamic)user).environment_smash ) ) {
				user.do_attack_animation( this );
				this.visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " destroys " ).the( this ).item().str( ".</span>" ).ToString() );
				this.dump_contents();
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: closets.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			base.bullet_act( (object)(P), (object)(def_zone) );

			if ( P.damage_type == "brute" || P.damage_type == "fire" ) {
				this.health -= Convert.ToDouble( P.damage );

				if ( this.health <= 0 ) {
					this.dump_contents();
					GlobalFuncs.qdel( this );
				}
			}
			return null;
		}

		// Function from file: closets.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			this.contents_explosion( severity, target );

			if ( this.loc != null && this.material_drop is Type && !Lang13.Bool( this.flags & 128 ) ) {
				Lang13.Call( this.material_drop, this.loc );
			}
			this.dump_contents();
			GlobalFuncs.qdel( this );
			base.ex_act( severity, (object)(target) );
			return false;
		}

		// Function from file: closets.dm
		public void togglelock( dynamic user = null ) {
			dynamic O = null;

			
			if ( this.secure ) {
				
				if ( this.allowed( user ) ) {
					this.locked = !this.locked;
					this.add_fingerprint( user );

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( 3, user ) )) {
						O = _a;
						

						if ( Lang13.Bool( O.client ) && !( O.eye_blind != 0 ) ) {
							O.WriteMsg( "<span class='notice'>" + user + " has " + ( this.locked ? null : "un" ) + "locked the locker.</span>" );
						}
					}
					this.update_icon();
				} else {
					user.WriteMsg( "<span class='notice'>Access Denied</span>" );
				}
			} else {
				return;
			}
			return;
		}

		// Function from file: closets.dm
		public virtual bool place( dynamic user = null, dynamic I = null ) {
			
			if ( !this.opened && this.secure ) {
				this.togglelock( user );
				return true;
			}
			return false;
		}

		// Function from file: closets.dm
		public virtual bool toggle(  ) {
			
			if ( this.opened ) {
				return this.close();
			}
			return this.open();
		}

		// Function from file: closets.dm
		public virtual bool close(  ) {
			
			if ( !this.opened ) {
				return false;
			}

			if ( !this.can_close() ) {
				return false;
			}
			this.take_contents();
			this.opened = false;
			GlobalFuncs.playsound( this.loc, this.open_sound, 15, 1, -3 );
			this.density = true;
			this.update_icon();
			return true;
		}

		// Function from file: closets.dm
		public virtual int insert( dynamic I = null, bool? include_mobs = null, bool? animate = null ) {
			dynamic L = null;
			int mobs_stored = 0;
			Mob_Living M = null;

			
			if ( this.contents.len >= this.storage_capacity ) {
				return -1;
			}

			if ( I is Mob_Living ) {
				L = I;

				if ( L.buckled != null || Lang13.Bool( L.buckled_mob ) || L.mob_size > this.max_mob_size ) {
					return 0;
				}

				if ( L.mob_size > 0 ) {
					mobs_stored = 0;

					foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Mob_Living) )) {
						M = _a;
						
						mobs_stored++;

						if ( mobs_stored >= this.mob_storage_capacity ) {
							return 0;
						}
					}
				}

				if ( Lang13.Bool( L.client ) ) {
					L.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
					L.client.eye = this;
				}
				((Mob)L).stop_pulling();
			} else if ( !( I is Obj_Item ) && !( I is Obj_Effect_Dummy_Chameleon ) ) {
				return 0;
			} else if ( I.density || Lang13.Bool( I.anchored ) ) {
				return 0;
			} else if ( Lang13.Bool( I.flags & 2 ) ) {
				return 0;
			}
			I.loc = this;

			if ( I.pulledby != null ) {
				I.pulledby.stop_pulling();
			}
			return 1;
		}

		// Function from file: closets.dm
		public virtual bool open(  ) {
			
			if ( this.opened || !this.can_open() ) {
				return false;
			}
			this.opened = true;
			GlobalFuncs.playsound( this.loc, this.open_sound, 15, 1, -3 );
			this.density = false;
			this.dump_contents();
			this.update_icon();
			return true;
		}

		// Function from file: closets.dm
		public virtual void take_contents(  ) {
			Ent_Dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Ent_Dynamic) )) {
				AM = _a;
				

				if ( this.insert( AM ) == -1 ) {
					break;
				}
			}
			return;
		}

		// Function from file: closets.dm
		public virtual void dump_contents(  ) {
			Obj O = null;
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				
				O.loc = this.loc;

				if ( this.throwing ) {
					Map13.Step( O, this.dir );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this )) {
				M = _b;
				
				M.loc = this.loc;

				if ( Lang13.Bool( M.client ) ) {
					M.client.eye = M.client.mob;
					M.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
				}

				if ( this.throwing ) {
					Map13.Step( M, this.dir );
				}
			}

			if ( this.throwing ) {
				this.throwing = false;
			}
			return;
		}

		// Function from file: closets.dm
		public bool can_close(  ) {
			Obj_Structure_Closet closet = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Obj_Structure_Closet) )) {
				closet = _a;
				

				if ( closet != this && !closet.wall_mounted ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: closets.dm
		public virtual bool can_open(  ) {
			
			if ( this.welded || this.locked ) {
				return false;
			}
			return true;
		}

		// Function from file: closets.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			
			if ( height == 0 || this.wall_mounted ) {
				return true;
			}
			return !this.density;
		}

		// Function from file: closets.dm
		public override dynamic alter_health(  ) {
			return GlobalFuncs.get_turf( this );
		}

		// Function from file: closets.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.secure ) {
				
				if ( this.broken || this.opened || !( user is Mob_Living_Carbon_Human ) ) {
					return 0;
				} else {
					user.WriteMsg( "<span class='notice'>Alt-click the locker to " + ( this.locked ? "unlock" : "lock" ) + " it.</span>" );
				}
			}
			return 0;
		}

		// Function from file: closets.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( !this.opened ) {
				
				if ( Lang13.Bool( this.icon_door ) ) {
					this.overlays.Add( "" + this.icon_door + "_door" );
				} else {
					this.overlays.Add( "" + this.icon_state + "_door" );
				}

				if ( this.welded ) {
					this.overlays.Add( "welded" );
				}

				if ( this.secure ) {
					
					if ( !this.broken ) {
						
						if ( this.locked ) {
							this.overlays.Add( "locked" );
						} else {
							this.overlays.Add( "unlocked" );
						}
					} else {
						this.overlays.Add( "off" );
					}
				}
			} else if ( this.icon_door_override ) {
				this.overlays.Add( "" + this.icon_door + "_open" );
			} else {
				this.overlays.Add( "" + this.icon_state + "_open" );
			}
			return null;
		}

		// Function from file: closets.dm
		public override void initialize(  ) {
			base.initialize();

			if ( !this.opened ) {
				this.take_contents();
			}
			return;
		}

		// Function from file: closets.dm
		[Verb]
		[VerbInfo( name: "Toggle Open", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public virtual void verb_toggleopen(  ) {
			
			if ( !Task13.User.canmove || Task13.User.stat != 0 || Task13.User.restrained() ) {
				return;
			}

			if ( Task13.User is Mob_Living_Carbon || Task13.User is Mob_Living_Silicon ) {
				this.attack_hand( Task13.User );
			} else {
				Task13.User.WriteMsg( "<span class='warning'>This mob type can't use this verb.</span>" );
			}
			return;
		}

	}

}