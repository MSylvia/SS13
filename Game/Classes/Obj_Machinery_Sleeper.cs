// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Sleeper : Obj_Machinery {

		public double efficiency = 0;
		public bool initial_bin_rating = true;
		public double min_health = 25;
		public ByTable injection_chems = new ByTable();
		public ByTable possible_chems = new ByTable(new object [] { 
											new ByTable(new object [] { "morphine", "salbutamol", "bicaridine", "kelotane" }), 
											new ByTable(new object [] { "morphine", "salbutamol", "bicaridine", "kelotane", "oculine" }), 
											new ByTable(new object [] { "morphine", "salbutamol", "bicaridine", "kelotane", "oculine", "antitoxin", "mutadone", "mannitol", "pen_acid" }), 
											new ByTable(new object [] { "morphine", "salbutamol", "bicaridine", "kelotane", "oculine", "antitoxin", "mutadone", "mannitol", "pen_acid", "omnizine" })
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.state_open = true;
			this.icon = "icons/obj/Cryogenic2.dmi";
			this.icon_state = "sleeper-open";
		}

		// Function from file: Sleeper.dm
		public Obj_Machinery_Sleeper ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_Weapon_StockParts_MatterBin B = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Sleeper( null ) );
			B = new Obj_Item_Weapon_StockParts_MatterBin( null );
			B.rating = this.initial_bin_rating;
			this.component_parts.Add( B );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			this.RefreshParts();
			return;
		}

		// Function from file: Sleeper.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.state_open ) {
				this.icon_state = "sleeper-open";
			} else {
				this.icon_state = "sleeper";
			}
			return null;
		}

		// Function from file: Sleeper.dm
		public override dynamic close_machine( Ent_Static target = null ) {
			
			if ( this.state_open && !( this.panel_open == true ) ) {
				base.close_machine( target );
			}
			return null;
		}

		// Function from file: Sleeper.dm
		public override bool open_machine(  ) {
			
			if ( !this.state_open && !( this.panel_open == true ) ) {
				base.open_machine();
			}
			return false;
		}

		// Function from file: Sleeper.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: Sleeper.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: Sleeper.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) || Task13.User == this.occupant ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["refresh"] ) ) {
				this.updateUsrDialog();
				return null;
			}

			if ( Lang13.Bool( href_list["open"] ) ) {
				this.open_machine();
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				this.close_machine();
				return null;
			}

			if ( Lang13.Bool( this.occupant ) && Convert.ToInt32( this.occupant.stat ) != 2 ) {
				
				if ( href_list["inject"] == "epinephrine" || Convert.ToDouble( this.occupant.health ) > this.min_health ) {
					this.inject_chem( Task13.User, href_list["inject"] );
				} else {
					Task13.User.WriteMsg( "<span class='notice'>ERROR: Subject is not in stable condition for auto-injection.</span>" );
				}
			} else {
				Task13.User.WriteMsg( "<span class='notice'>ERROR: Subject cannot metabolise chemicals.</span>" );
			}
			this.updateUsrDialog();
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: Sleeper.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.sleeperUI( a );
			return null;
		}

		// Function from file: Sleeper.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			base.relaymove( user, direction );
			this.open_machine();
			return false;
		}

		// Function from file: Sleeper.dm
		public override void container_resist(  ) {
			this.open_machine();
			return;
		}

		// Function from file: Sleeper.dm
		public void inject_chem( Mob user = null, dynamic chem = null ) {
			int units = 0;

			
			if ( !this.is_operational() ) {
				return;
			}

			if ( Lang13.Bool( this.occupant ) && Lang13.Bool( this.occupant.reagents ) ) {
				
				if ( ( this.injection_chems + "epinephrine" ).Contains( chem ) ) {
					
					if ( ( ((Reagents)this.occupant.reagents).get_reagent_amount( chem ) ?1:0) + 10 <= this.efficiency * 20 ) {
						this.occupant.reagents.add_reagent( chem, 10 );
					}
					units = Num13.Floor( ((Reagents)this.occupant.reagents).get_reagent_amount( chem ) ?1:0 );
					user.WriteMsg( new Txt( "<span class='notice'>Occupant now has " ).item( units ).str( " unit" ).s().str( " of " ).item( GlobalVars.chemical_reagents_list[chem] ).str( " in their bloodstream.</span>" ).ToString() );
				}
			}
			return;
		}

		// Function from file: Sleeper.dm
		public void sleeperUI( dynamic user = null ) {
			dynamic dat = null;
			dynamic re = null;
			dynamic C = null;
			dynamic re2 = null;
			dynamic C2 = null;
			Reagent R = null;
			Browser popup = null;

			dat += "<h3>Injector</h3>";

			if ( Lang13.Bool( this.occupant ) ) {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";inject=epinephrine'>Inject Epinephrine</A>" ).ToString();
			} else {
				dat += "<span class='linkOff'>Inject Epinephrine</span>";
			}

			if ( Lang13.Bool( this.occupant ) && Convert.ToDouble( this.occupant.health ) > this.min_health ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.injection_chems )) {
					re = _a;
					
					C = GlobalVars.chemical_reagents_list[re];

					if ( Lang13.Bool( C ) ) {
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";inject=" ).item( C.id ).str( "'>Inject " ).item( C.name ).str( "</A>" ).ToString();
					}
				}
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( this.injection_chems )) {
					re2 = _b;
					
					C2 = GlobalVars.chemical_reagents_list[re2];

					if ( Lang13.Bool( C2 ) ) {
						dat += "<BR><span class='linkOff'>Inject " + C2.name + "</span>";
					}
				}
			}
			dat += "<h3>Sleeper Status</h3>";
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";refresh=1'>Scan</A>" ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";" ).item( ( this.state_open ? "close=1'>Close</A>" : "open=1'>Open</A>" ) ).ToString();
			dat += "<div class='statusDisplay'>";

			if ( !Lang13.Bool( this.occupant ) ) {
				dat += "Sleeper Unoccupied";
			} else {
				dat += "" + this.occupant.name + " => ";

				dynamic _c = this.occupant.stat; // Was a switch-case, sorry for the mess.
				if ( _c==0 ) {
					dat += "<span class='good'>Conscious</span>";
				} else if ( _c==1 ) {
					dat += "<span class='average'>Unconscious</span>";
				} else {
					dat += "<span class='bad'>DEAD</span>";
				}
				dat += "<br />";
				dat += "<div class='line'><div class='statusLabel'>Health:</div><div class='progressBar'><div style='width: " + ( Convert.ToDouble( this.occupant.health ) < 0 ? "0" : "" + this.occupant.health ) + "%;' class='progressFill good'></div></div><div class='statusValue'>" + ( Convert.ToDouble( this.occupant.stat ) > 1 ? "" : "" + this.occupant.health + "%" ) + "</div></div>";
				dat += "<div class='line'><div class='statusLabel'>&gt; Brute Damage:</div><div class='progressBar'><div style='width: " + ((Mob_Living)this.occupant).getBruteLoss() + "%;' class='progressFill bad'></div></div><div class='statusValue'>" + ((Mob_Living)this.occupant).getBruteLoss() + "%</div></div>";
				dat += "<div class='line'><div class='statusLabel'>&gt; Resp. Damage:</div><div class='progressBar'><div style='width: " + ((Mob_Living)this.occupant).getOxyLoss() + "%;' class='progressFill bad'></div></div><div class='statusValue'>" + ((Mob_Living)this.occupant).getOxyLoss() + "%</div></div>";
				dat += "<div class='line'><div class='statusLabel'>&gt; Toxin Content:</div><div class='progressBar'><div style='width: " + ((Mob_Living)this.occupant).getToxLoss() + "%;' class='progressFill bad'></div></div><div class='statusValue'>" + ((Mob_Living)this.occupant).getToxLoss() + "%</div></div>";
				dat += "<div class='line'><div class='statusLabel'>&gt; Burn Severity:</div><div class='progressBar'><div style='width: " + ((Mob_Living)this.occupant).getFireLoss() + "%;' class='progressFill bad'></div></div><div class='statusValue'>" + ((Mob_Living)this.occupant).getFireLoss() + "%</div></div><br>";
				dat += "<HR><div class='line'><div style='width: 170px;' class='statusLabel'>Paralysis Summary:</div><div class='statusValue'>" + Num13.Floor( this.occupant.paralysis ) + "% " + ( this.occupant.paralysis != 0 ? "(" + Num13.Floor( this.occupant.paralysis / 4 ) + " seconds left)" : "" ) + "</div></div><br>";

				if ( ((Mob_Living)this.occupant).getCloneLoss() != 0 ) {
					dat += "<div class='line'><span class='average'>Subject appears to have cellular damage.</span></div><br>";
				}

				if ( ((Mob_Living)this.occupant).getBrainLoss() != 0 ) {
					dat += "<div class='line'><span class='average'>Significant brain damage detected.</span></div><br>";
				}

				if ( Lang13.Bool( this.occupant.reagents.reagent_list.len ) ) {
					
					foreach (dynamic _d in Lang13.Enumerate( this.occupant.reagents.reagent_list, typeof(Reagent) )) {
						R = _d;
						
						dat += "<div class='line'><div style='width: 170px;' class='statusLabel'>" + R.name + ":</div><div class='statusValue'>" + Num13.Round( R.volume, 0.1 ) + " units</div></div><br>";
					}
				}
			}
			dat += "</div>";
			popup = new Browser( user, "sleeper", "Sleeper Console", 520, 540 );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: Sleeper.dm
		public void go_out(  ) {
			Ent_Dynamic O = null;

			
			if ( !Lang13.Bool( this.occupant ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				O = _a;
				
				O.loc = this.loc;
			}

			if ( Lang13.Bool( this.occupant.client ) ) {
				this.occupant.client.eye = this.occupant.client.mob;
				this.occupant.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
			}
			this.occupant = null;
			this.icon_state = "sleeper-open";
			return;
		}

		// Function from file: Sleeper.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return 0;
			}

			if ( Lang13.Bool( this.occupant ) ) {
				this.go_out();
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: Sleeper.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			this.go_out();
			base.ex_act( severity, (object)(target) );
			return false;
		}

		// Function from file: Sleeper.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( !this.state_open && !Lang13.Bool( this.occupant ) ) {
				
				if ( this.default_deconstruction_screwdriver( user, "sleeper-o", "sleeper", A ) ) {
					return null;
				}
			}

			if ( this.default_change_direction_wrench( user, A ) ) {
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( this.default_pry_open( A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );
			return null;
		}

		// Function from file: Sleeper.dm
		public override bool attack_animal( Mob_Living user = null ) {
			
			if ( Lang13.Bool( ((dynamic)user).environment_smash ) ) {
				user.do_attack_animation( this );
				this.visible_message( "<span class='danger'>" + user.name + " smashes " + this + " apart!</span>" );
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: Sleeper.dm
		public override bool blob_act( dynamic severity = null ) {
			Ent_Dynamic A = null;

			
			if ( Rand13.PercentChance( 75 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
					A = _a;
					
					A.loc = this.loc;
					A.blob_act();
				}
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: Sleeper.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			
			if ( this.stat != 0 || Lang13.Bool( user.stat ) || Lang13.Bool( user.lying ) || !this.Adjacent( user ) || !O.Adjacent( user ) || !( O is Mob_Living_Carbon ) ) {
				return false;
			}
			this.close_machine( O );
			return false;
		}

		// Function from file: Sleeper.dm
		public override void RefreshParts(  ) {
			double E = 0;
			dynamic I = null;
			Obj_Item_Weapon_StockParts_MatterBin B = null;
			Obj_Item_Weapon_StockParts_Manipulator M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				B = _a;
				
				E += Convert.ToDouble( B.rating );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M = _b;
				
				I += M.rating;
			}
			this.injection_chems = this.possible_chems[I];
			this.efficiency = E;
			this.min_health = -E * 25;
			return;
		}

	}

}