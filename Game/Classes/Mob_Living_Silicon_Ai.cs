// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon_Ai : Mob_Living_Silicon {

		public dynamic network = new ByTable(new object [] { "SS13" });
		public dynamic current = null;
		public ByTable connected_robots = new ByTable();
		public int aiRestorePowerRoutine = 0;
		public ByTable alarms = new ByTable()
											.Set( "Motion", new ByTable() )
											.Set( "Fire", new ByTable() )
											.Set( "Atmosphere", new ByTable() )
											.Set( "Power", new ByTable() )
											.Set( "Camera", new ByTable() )
											.Set( "Burglar", new ByTable() )
										;
		public bool viewalerts = false;
		public Icon holo_icon = null;
		public Obj_Mecha controlled_mech = null;
		public bool radio_enabled = true;
		public Obj_Item_Device_Pda_Ai aiPDA = null;
		public Obj_Item_Device_Multitool aiMulti = null;
		public dynamic Bot = null;
		public bool tracking = false;
		public EffectSystem_SparkSpread spark_system = null;
		public ModulePicker malf_picker = null;
		public ByTable current_modules = new ByTable();
		public bool fire_res_on_core = false;
		public bool can_dominate_mechs = false;
		public bool shunted = false;
		public bool control_disabled = false;
		public bool malfhacking = false;
		public bool malf_cooldown = false;
		public dynamic malfhack = null;
		public bool explosive = false;
		public Mob parent = null;
		public bool camera_light_on = false;
		public ByTable lit_cameras = new ByTable();
		public Trackable track = new Trackable();
		public string last_paper_seen = null;
		public bool can_shunt = true;
		public dynamic last_announcement = "";
		public dynamic waypoint = null;
		public bool waypoint_mode = false;
		public bool apc_override = false;
		public bool nuking = false;
		public Obj_Machinery_DoomsdayDevice doomsday_device = null;
		public Mob_Camera_AiEye eyeobj = new Mob_Camera_AiEye();
		public int sprint = 10;
		public bool cooldown = false;
		public bool acceleration = true;
		public Obj_Machinery_Camera_Portable builtInCamera = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.status_flags = 13;
			this.force_compose = true;
			this.med_hud = 3;
			this.sec_hud = 1;
			this.radiomod = ";";
			this.icon = "icons/mob/AI.dmi";
			this.icon_state = "ai";
		}

		// Function from file: ai.dm
		public Mob_Living_Silicon_Ai ( dynamic loc = null, AiLaws L = null, dynamic B = null, bool? safety = null ) : base( (object)(loc) ) {
			safety = safety ?? false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.rename_self( "ai", true );
			this.name = this.real_name;
			this.anchored = 1;
			this.canmove = false;
			this.density = true;
			loc = loc;
			this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo1" ) );
			this.spark_system = new EffectSystem_SparkSpread();
			this.spark_system.set_up( 5, 0, this );
			this.spark_system.attach( this );

			if ( L != null ) {
				
				if ( L is AiLaws ) {
					this.laws = L;
				}
			} else {
				this.make_laws();
			}
			this.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "show_laws_verb" ) );
			this.aiPDA = new Obj_Item_Device_Pda_Ai( this );
			this.aiPDA.owner = this.name;
			this.aiPDA.ownjob = "AI";
			this.aiPDA.name = this.name + " (" + this.aiPDA.ownjob + ")";
			this.aiMulti = new Obj_Item_Device_Multitool( this );
			this.v_radio = new Obj_Item_Device_Radio_Headset_Ai( this );
			this.aicamera = new Obj_Item_Device_Camera_Siliconcam_AiCamera( this );

			if ( loc is Tile ) {
				this.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "ai_network_change" ), typeof(Mob_Living_Silicon_Ai).GetMethod( "ai_statuschange" ), typeof(Mob_Living_Silicon_Ai).GetMethod( "ai_hologram_change" ), typeof(Mob_Living_Silicon_Ai).GetMethod( "toggle_camera_light" ), typeof(Mob_Living_Silicon_Ai).GetMethod( "botcall" ), typeof(Mob_Living_Silicon_Ai).GetMethod( "control_integrated_radio" ), typeof(Mob_Living_Silicon_Ai).GetMethod( "set_automatic_say_channel" ) );
			}

			if ( !( safety == true ) ) {
				
				if ( !Lang13.Bool( B ) ) {
					new Obj_Structure_AIcore_Deactivated( loc );
					GlobalFuncs.qdel( this );
					return;
				} else {
					
					if ( Lang13.Bool( B.brainmob.mind ) ) {
						((Mind)B.brainmob.mind).transfer_to( this );

						if ( Lang13.Bool( this.mind.special_role ) ) {
							this.mind.store_memory( "As an AI, you must obey your silicon laws above all else. Your objectives will consider you to be dead." );
							this.WriteMsg( "<span class='userdanger'>You have been installed as an AI! </span>" );
							this.WriteMsg( "<span class='danger'>You must obey your silicon laws above all else. Your objectives will consider you to be dead.</span>" );
						}
					}
					this.WriteMsg( "<B>You are playing the station's AI. The AI cannot move, but can interact with many objects while viewing them (through cameras).</B>" );
					this.WriteMsg( "<B>To look at other parts of the station, click on yourself to get a camera menu.</B>" );
					this.WriteMsg( "<B>While observing through a camera, you can use most (networked) devices which you can see, such as computers, APCs, intercoms, doors, etc.</B>" );
					this.WriteMsg( "To use something, simply click on it." );
					this.WriteMsg( "Use say :b to speak to your cyborgs through binary." );
					this.WriteMsg( "For department channels, use the following say commands:" );
					this.WriteMsg( ":o - AI Private, :c - Command, :s - Security, :e - Engineering, :u - Supply, :v - Service, :m - Medical, :n - Science." );
					this.show_laws();
					this.WriteMsg( "<b>These laws may be changed by other players, or by you being the traitor.</b>" );
					this.job = "AI";
				}
			}
			GlobalVars.ai_list.Add( this );
			GlobalVars.shuttle_caller_list.Add( this );
			this.eyeobj.ai = this;
			this.eyeobj.name = "" + this.name + " (AI Eye)";
			this.eyeobj.loc = this.loc;
			this.builtInCamera = new Obj_Machinery_Camera_Portable( this );
			this.builtInCamera.network = new ByTable(new object [] { "SS13" });
			return;
		}

		// Function from file: states.dm
		public override int shared_ui_interaction( Game_Data src_object = null ) {
			
			if ( this.lacks_power() ) {
				return -1;
			}
			return base.shared_ui_interaction( src_object );
		}

		// Function from file: default.dm
		public override int default_can_use_topic( Game_Data src_object = null ) {
			int _default = 0;

			_default = this.shared_ui_interaction( src_object );

			if ( _default < 2 ) {
				return _default;
			}

			if ( Map13.GetDistance( this, src_object ) <= this.client.view || GlobalVars.cameranet.checkTurfVis( GlobalFuncs.get_turf_pixel( src_object ) ) ) {
				return 2;
			}
			return -1;
		}

		// Function from file: say.dm
		public override int handle_inherent_channels( dynamic message = null, string message_mode = null ) {
			int _default = 0;

			_default = base.handle_inherent_channels( (object)(message), message_mode );

			if ( _default != 0 ) {
				return _default;
			}

			if ( message_mode == "holopad" ) {
				this.holopad_talk( message );
				return 1;
			}
			return _default;
		}

		// Function from file: say.dm
		public override string get_message_mode( dynamic message = null ) {
			
			if ( new ByTable(new object [] { ":h", ":H", ".h", ".H", "#h", "#H" }).Contains( String13.SubStr( message, 1, 3 ) ) ) {
				return "holopad";
			} else {
				return base.get_message_mode( (object)(message) );
			}
		}

		// Function from file: say.dm
		public override int radio( dynamic message = null, string message_mode = null, ByTable spans = null ) {
			
			if ( !this.radio_enabled || this.aiRestorePowerRoutine != 0 || this.stat != 0 ) {
				this.WriteMsg( "<span class='danger'>Your radio transmitter is offline!</span>" );
				return 0;
			}
			base.radio( (object)(message), message_mode, spans );
			return 0;
		}

		// Function from file: say.dm
		public override bool IsVocal(  ) {
			return !GlobalVars.config.silent_ai;
		}

		// Function from file: say.dm
		public override string compose_job( dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null ) {
			return "" + ( Lang13.Bool( radio_freq ) ? " (" + speaker.GetJob() + ")" : "" ) + ( "" + ( Lang13.Bool( ((Ent_Dynamic)speaker).GetSource() ) ? "</a>" : "" ) );
		}

		// Function from file: say.dm
		public override string compose_track_href( dynamic speaker = null, string message_langs = null, dynamic raw_message = null, dynamic radio_freq = null ) {
			dynamic M = null;

			M = ((Ent_Dynamic)speaker).GetSource();

			if ( Lang13.Bool( M ) ) {
				return new Txt( "<a href='?src=" ).Ref( this ).str( ";track=" ).item( String13.HtmlEncode( message_langs ) ).str( "'>" ).ToString();
			}
			return "";
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			
			if ( this.parent != null && this.parent is Mob_Living_Silicon_Ai && this.parent.stat != 2 ) {
				this.parent.say( message );
				return false;
			}
			base.say( (object)(message), bubble_type );
			return false;
		}

		// Function from file: tgstation.dme
		public override bool Logout(  ) {
			Obj_Machinery_AiStatusDisplay O = null;

			base.Logout();

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Machinery_AiStatusDisplay) )) {
				O = _a;
				
				O.mode = 0;
			}

			if ( !( this.loc is Tile ) ) {
				
				if ( this.client != null ) {
					this.client.eye = this.loc;
					this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
				}
			}
			this.view_core();
			return false;
		}

		// Function from file: tgstation.dme
		public override dynamic Login(  ) {
			Obj_Effect_Rune rune = null;
			Image blood = null;
			Obj_Machinery_AiStatusDisplay O = null;

			base.Login();

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Effect_Rune) )) {
				rune = _a;
				
				blood = new Image( null, rune );
				blood.v_override = true;
				this.client.images.Add( blood );
			}
			this.regenerate_icons();
			this.flash = new Obj_Screen();
			this.flash.icon_state = "blank";
			this.flash.name = "flash";
			this.flash.screen_loc = "1,1 to 15,15";
			this.flash.layer = 17;
			this.blind = new Obj_Screen();
			this.blind.icon_state = "black";
			this.blind.name = " ";
			this.blind.screen_loc = "1,1 to 15,15";
			this.blind.layer = 0;
			this.client.screen.Add( this.blind, this.flash );

			if ( this.stat != 2 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_AiStatusDisplay) )) {
					O = _b;
					
					O.mode = 1;
					O.emotion = "Neutral";
				}
			}
			this.view_core();
			return null;
		}

		// Function from file: life.dm
		public override void updatehealth(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				this.health = this.maxHealth;
				this.stat = 0;
				return;
			}
			this.health = this.maxHealth - this.getOxyLoss() - this.getToxLoss() - this.getBruteLoss();

			if ( !this.fire_res_on_core ) {
				this.health -= this.getFireLoss();
			}
			this.diag_hud_set_status();
			this.diag_hud_set_health();
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			dynamic T = null;
			bool blindness = false;
			Ent_Static loc = null;
			dynamic home = null;
			Obj_Machinery_Power_Apc theAPC = null;
			int PRP = 0;
			dynamic AIarea = null;
			dynamic A = null;
			Obj_Machinery_Power_Apc APC = null;

			
			if ( this.stat == 2 ) {
				return false;
			} else {
				T = GlobalFuncs.get_turf( this );

				if ( this.stat != 0 ) {
					this.cameraFollow = null;
					this.reset_view( null );
					this.unset_machine();
				}
				this.updatehealth();
				this.update_gravity( this.mob_has_gravity() );
				this.update_action_buttons();

				if ( Lang13.Bool( this.malfhack ) ) {
					
					if ( Lang13.Bool( this.malfhack.aidisabled ) ) {
						this.WriteMsg( "<span class='danger'>ERROR: APC access disabled, hack attempt canceled.</span>" );
						this.malfhacking = false;
						this.malfhack = null;
					}
				}

				if ( Convert.ToDouble( this.health ) <= ( GlobalVars.config.health_threshold_dead ??0) ) {
					this.death();
					return false;
				}

				if ( this.machine != null ) {
					
					if ( !( this.machine.check_eye( this ) == true ) ) {
						this.reset_view( null );
					}
				}

				if ( this.aiRestorePowerRoutine != 0 ) {
					this.adjustOxyLoss( 1 );
				} else {
					this.adjustOxyLoss( -1 );
				}
				blindness = false;
				loc = null;

				if ( T is Tile ) {
					loc = T.loc;

					if ( loc is Zone ) {
						
						if ( this.lacks_power() ) {
							blindness = true;
						}
					}
				}

				if ( !blindness ) {
					
					if ( this.blind.layer != 0 ) {
						this.blind.layer = 0;
					}
					this.sight |= GlobalVars.SEE_TURFS;
					this.sight |= GlobalVars.SEE_MOBS;
					this.sight |= GlobalVars.SEE_OBJS;
					this.see_in_dark = 8;
					this.see_invisible = 45;

					if ( this.see_override != 0 ) {
						this.see_invisible = this.see_override;
					}
					home = GlobalFuncs.get_area( this );

					if ( !Lang13.Bool( home ) ) {
						return false;
					}

					if ( Lang13.Bool( home.powered( 1 ) ) ) {
						home.use_power( 1000, 1 );
					}

					if ( this.aiRestorePowerRoutine == 2 ) {
						this.WriteMsg( "Alert cancelled. Power has been restored without our assistance." );
						this.aiRestorePowerRoutine = 0;
						this.blind.layer = 0;
						return false;
					} else if ( this.aiRestorePowerRoutine == 3 ) {
						this.WriteMsg( "Alert cancelled. Power has been restored." );
						this.aiRestorePowerRoutine = 0;
						this.blind.layer = 0;
						return false;
					}
				} else {
					this.blind.screen_loc = "1,1 to 15,15";

					if ( this.blind.layer != 18 ) {
						this.blind.layer = 18;
					}
					this.sight = this.sight & 65519;
					this.sight = this.sight & 65531;
					this.sight = this.sight & 65527;
					this.see_in_dark = 0;
					this.see_invisible = 25;

					if ( this.lacks_power() ) {
						
						if ( this.aiRestorePowerRoutine == 0 ) {
							this.aiRestorePowerRoutine = 1;
							this.WriteMsg( "You've lost power!" );
							Task13.Schedule( 20, (Task13.Closure)(() => {
								this.WriteMsg( "Backup battery online. Scanners, camera, and radio interface offline. Beginning fault-detection." );
								Task13.Sleep( 50 );

								if ( ((dynamic)loc).master.power_equip ) {
									
									if ( !( T is Tile_Space ) ) {
										this.WriteMsg( "Alert cancelled. Power has been restored without our assistance." );
										this.aiRestorePowerRoutine = 0;
										this.blind.layer = 0;
										return;
									}
								}
								this.WriteMsg( "Fault confirmed: missing external power. Shutting down main control system to save power." );
								Task13.Sleep( 20 );
								this.WriteMsg( "Emergency control system online. Verifying connection to power network." );
								Task13.Sleep( 50 );

								if ( T is Tile_Space ) {
									this.WriteMsg( "Unable to verify! No power connection detected!" );
									this.aiRestorePowerRoutine = 2;
									return;
								}
								this.WriteMsg( "Connection verified. Searching for APC in power network." );
								Task13.Sleep( 50 );
								theAPC = null;
								PRP = 1;

								while (PRP <= 4) {
									AIarea = GlobalFuncs.get_area( this );

									foreach (dynamic _b in Lang13.Enumerate( AIarea.master.related )) {
										A = _b;
										

										foreach (dynamic _a in Lang13.Enumerate( A, typeof(Obj_Machinery_Power_Apc) )) {
											APC = _a;
											

											if ( !( ( APC.stat & 1 ) != 0 ) ) {
												theAPC = APC;
												break;
											}
										}
									}

									if ( !( theAPC != null ) ) {
										
										switch ((int)( PRP )) {
											case 1:
												this.WriteMsg( "Unable to locate APC!" );
												break;
											default:
												this.WriteMsg( "Lost connection with the APC!" );
												break;
										}
										this.aiRestorePowerRoutine = 2;
										return;
									}

									if ( ((dynamic)loc).master.power_equip ) {
										
										if ( !( T is Tile_Space ) ) {
											this.WriteMsg( "Alert cancelled. Power has been restored without our assistance." );
											this.aiRestorePowerRoutine = 0;
											this.blind.layer = 0;
											return;
										}
									}

									switch ((int)( PRP )) {
										case 1:
											this.WriteMsg( "APC located. Optimizing route to APC to avoid needless power waste." );
											break;
										case 2:
											this.WriteMsg( "Best route identified. Hacking offline APC power port." );
											break;
										case 3:
											this.WriteMsg( "Power port upload access confirmed. Loading control program into APC power port software." );
											break;
										case 4:
											this.WriteMsg( "Transfer complete. Forcing APC to execute program." );
											Task13.Sleep( 50 );
											this.WriteMsg( "Receiving control information from APC." );
											Task13.Sleep( 2 );
											this.apc_override = true;
											theAPC.ui_interact( this, null, null, null, null, GlobalVars.conscious_state );
											this.apc_override = false;
											this.aiRestorePowerRoutine = 3;
											this.WriteMsg( "Here are your current laws:" );
											this.show_laws();
											break;
									}
									Task13.Sleep( 50 );
									theAPC = null;
									PRP++;
								}
								return;
							}));
						}
					}
				}
			}
			return false;
		}

		// Function from file: laws.dm
		public override void show_laws( bool? everyone = null ) {
			everyone = everyone ?? false;

			dynamic who = null;
			Mob_Living_Silicon_Robot R = null;

			
			if ( everyone == true ) {
				who = typeof(Game13);
			} else {
				who = this;
			}
			who.WriteMsg( "<b>Obey these laws:</b>" );
			this.laws_sanity_check();
			this.laws.show_laws( who );

			if ( !( everyone == true ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.connected_robots, typeof(Mob_Living_Silicon_Robot) )) {
					R = _a;
					

					if ( R.lawupdate ) {
						R.lawsync();
						R.show_laws();
						R.law_change_counter++;
					}
				}
			}
			return;
		}

		// Function from file: examine.dm
		public override double examine( dynamic user = null ) {
			string msg = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " <EM>" ).item( this ).str( "</EM>!\n" ).ToString();

			if ( this.stat == 2 ) {
				msg += "<span class='deadsay'>It appears to be powered-down.</span>\n";
			} else {
				msg += "<span class='warning'>";

				if ( this.getBruteLoss() != 0 ) {
					
					if ( this.getBruteLoss() < 30 ) {
						msg += "It looks slightly dented.\n";
					} else {
						msg += "<B>It looks severely dented!</B>\n";
					}
				}

				if ( this.getFireLoss() != 0 ) {
					
					if ( this.getFireLoss() < 30 ) {
						msg += "It looks slightly charred.\n";
					} else {
						msg += "<B>Its casing is melted and heat-warped!</B>\n";
					}
				}

				if ( this.stat == 1 ) {
					msg += "It is non-responsive and displaying the text: \"RUNTIME: Sensory Overload, stack 26/3\".\n";
				}
				msg += "</span>";

				if ( !this.shunted && !( this.client != null ) ) {
					msg += "" + this + "Core.exe has stopped responding! NTOS is searching for a solution to the problem...\n";
				}
			}
			msg += "*---------*</span>";
			user.WriteMsg( msg );
			return 0;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			Obj_Machinery_AiStatusDisplay O = null;

			
			if ( this.stat == 2 ) {
				return false;
			}

			if ( !( gibbed == true ) ) {
				this.emote( "me", 1, "sparks and its screen flickers, its systems slowly coming to a halt." );
			}
			this.stat = 2;

			if ( Icon13.States( this.icon, 1 ).Contains( "" + this.icon_state + "_dead" ) ) {
				this.icon_state = "" + this.icon_state + "_dead";
			} else {
				this.icon_state = "ai_dead";
			}
			this.anchored = 0;
			this.update_canmove();

			if ( this.eyeobj != null ) {
				this.eyeobj.setLoc( GlobalFuncs.get_turf( this ) );
			}

			if ( this.blind != null ) {
				this.blind.layer = 0;
			}
			this.sight |= 28;
			this.see_in_dark = 8;
			this.see_invisible = 45;
			GlobalVars.shuttle_caller_list.Remove( this );
			GlobalVars.SSshuttle.autoEvac();

			if ( this.nuking ) {
				GlobalFuncs.set_security_level( "red" );
				this.nuking = false;
				GlobalVars.SSshuttle.emergencyNoEscape = false;

				if ( GlobalVars.SSshuttle.emergency.mode == 4 ) {
					GlobalVars.SSshuttle.emergency.mode = 3;
					GlobalVars.SSshuttle.emergency.timer = Game13.time;
					GlobalFuncs.priority_announce( "Hostile enviroment resolved. You have 3 minutes to board the Emergency Shuttle.", null, "sound/AI/shuttledock.ogg", "Priority" );
				}
			}

			if ( this.doomsday_device != null ) {
				this.doomsday_device.timing = false;
				GlobalFuncs.qdel( this.doomsday_device );
			}

			if ( this.explosive ) {
				Task13.Schedule( 10, (Task13.Closure)(() => {
					GlobalFuncs.explosion( this.loc, 3, 6, 12, 15 );
					return;
				}));
			}

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Machinery_AiStatusDisplay) )) {
				O = _a;
				

				if ( Lang13.Bool( this.key ) ) {
					O.mode = 2;

					if ( this.loc is Obj_Item_Device_Aicard ) {
						this.loc.icon_state = "aicard-404";
					}
				}
			}
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );
			}
			return base.death( gibbed, toast );
		}

		// Function from file: ai.dm
		public override bool canUseTopic( dynamic M = null, bool? be_close = null, bool? no_dextery = null ) {
			be_close = be_close ?? false;

			
			if ( this.stat != 0 ) {
				return false;
			}

			if ( be_close == true && !( Map13.GetDistance( M, this ) <= 1 ) ) {
				return false;
			}

			if ( Lang13.Bool( M ) && GlobalVars.cameranet != null && !GlobalVars.cameranet.checkTurfVis( GlobalFuncs.get_turf_pixel( M ) ) && !this.apc_override ) {
				return false;
			}
			return true;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "can buckle" )]
		public override bool f_can_buckle(  ) {
			return false;
		}

		// Function from file: ai.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( Lang13.Bool( A.force ) && A.damtype != "stamina" && this.stat != 2 ) {
				this.spark_system.start();
			}
			return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
		}

		// Function from file: ai.dm
		public override bool flash_eyes( double? intensity = null, bool? override_blindness_check = null, bool? affect_silicon = null ) {
			intensity = intensity ?? 1;
			override_blindness_check = override_blindness_check ?? false;
			affect_silicon = affect_silicon ?? false;

			return false;
		}

		// Function from file: ai.dm
		public override bool transfer_ai( dynamic interaction = null, dynamic user = null, dynamic AI = null, dynamic card = null ) {
			
			if ( !base.transfer_ai( (object)(interaction), (object)(user), (object)(AI), (object)(card) ) ) {
				return false;
			}

			if ( interaction == 1 ) {
				
				if ( !( this.mind != null ) ) {
					user.WriteMsg( "<span class='warning'>No intelligence patterns detected.</span>" );
					return false;
				}
				new Obj_Structure_AIcore_Deactivated( this.loc );
				this.aiRestorePowerRoutine = 0;
				this.control_disabled = true;
				this.radio_enabled = false;
				this.loc = card;
				this.WriteMsg( "You have been downloaded to a mobile storage device. Remote device connection severed." );
				user.WriteMsg( "<span class='boldnotice'>Transfer successful</span>: " + this.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) removed from host terminal and stored within local memory." );
			}
			return false;
		}

		// Function from file: ai.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			return false;
		}

		// Function from file: ai.dm
		public override bool cancelAlarm( string _class = null, dynamic A = null, Ent_Static origin = null ) {
			dynamic L = null;
			bool cleared = false;
			dynamic I = null;
			dynamic alarm = null;
			dynamic srcs = null;

			L = this.alarms[_class];
			cleared = false;

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					srcs = alarm[3];

					if ( Lang13.Bool( srcs.Contains( origin ) ) ) {
						srcs -= origin;
					}

					if ( Lang13.Bool( srcs.len ) == false ) {
						cleared = true;
						L -= I;
					}
				}
			}

			if ( cleared ) {
				this.queueAlarm( "--- " + _class + " alarm in " + A.name + " has been cleared.", _class, false );

				if ( this.viewalerts ) {
					this.ai_alerts();
				}
			}
			return !cleared;
		}

		// Function from file: ai.dm
		public override bool triggerAlarm( string _class = null, dynamic A = null, ByTable O = null, Ent_Static alarmsource = null ) {
			dynamic L = null;
			dynamic I = null;
			dynamic alarm = null;
			dynamic sources = null;
			dynamic C = null;
			ByTable CL = null;
			bool foo = false;
			string dat2 = null;
			Obj_Machinery_Camera I2 = null;

			
			if ( alarmsource.z != this.z ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return true;
			}
			L = this.alarms[_class];

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					sources = alarm[3];

					if ( !Lang13.Bool( sources.Contains( alarmsource ) ) ) {
						sources += alarmsource;
					}
					return true;
				}
			}
			C = null;
			CL = null;

			if ( O != null && O is ByTable ) {
				CL = O;

				if ( CL.len == 1 ) {
					C = CL[1];
				}
			} else if ( O != null && O is Obj_Machinery_Camera ) {
				C = O;
			}
			L[A.name] = new ByTable(new object [] { A, ( Lang13.Bool( C ) ? C : ((dynamic)( O )) ), new ByTable(new object [] { alarmsource }) });

			if ( O != null ) {
				
				if ( Lang13.Bool( C ) && ((Obj_Machinery_Camera)C).can_use() ) {
					this.queueAlarm( new Txt( "--- " ).item( _class ).str( " alarm detected in " ).item( A.name ).str( "! (<A HREF=?src=" ).Ref( this ).str( ";switchcamera=" ).Ref( C ).str( ">" ).item( C.c_tag ).str( "</A>)" ).ToString(), _class );
				} else if ( CL != null && CL.len != 0 ) {
					foo = false;
					dat2 = "";

					foreach (dynamic _b in Lang13.Enumerate( CL, typeof(Obj_Machinery_Camera) )) {
						I2 = _b;
						
						dat2 += new Txt().item( ( !foo ? "" : " | " ) ).str( "<A HREF=?src=" ).Ref( this ).str( ";switchcamera=" ).Ref( I2 ).str( ">" ).item( I2.c_tag ).str( "</A>" ).ToString();
						foo = true;
					}
					this.queueAlarm( "--- " + _class + " alarm detected in " + A.name + "! (" + dat2 + ")", _class );
				} else {
					this.queueAlarm( "--- " + _class + " alarm detected in " + A.name + "! (No Camera)", _class );
				}
			} else {
				this.queueAlarm( "--- " + _class + " alarm detected in " + A.name + "! (No Camera)", _class );
			}

			if ( this.viewalerts ) {
				this.ai_alerts();
			}
			return true;
		}

		// Function from file: ai.dm
		public override void reset_view( dynamic A = null ) {
			
			if ( this.camera_light_on ) {
				this.light_cameras();
			}

			if ( A is Obj_Machinery_Camera ) {
				this.current = A;
			}
			base.reset_view( (object)(A) );
			return;
		}

		// Function from file: ai.dm
		public override bool attack_alien( dynamic user = null ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				user.WriteMsg( "You cannot attack people before the game has started." );
				return false;
			}
			base.attack_alien( (object)(user) );
			return false;
		}

		// Function from file: ai.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			base.bullet_act( (object)(P), (object)(def_zone) );
			this.updatehealth();
			return 2;
		}

		// Function from file: ai.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string t1 = null;
			dynamic H = null;
			string _string = null;
			ByTable trackeable = null;
			ByTable target = null;
			dynamic I = null;
			dynamic M = null;
			dynamic M2 = null;

			
			if ( Task13.User != this ) {
				return null;
			}
			base.Topic( href, href_list, (object)(hsrc) );

			if ( Lang13.Bool( href_list["mach_close"] ) ) {
				
				if ( href_list["mach_close"] == "aialerts" ) {
					this.viewalerts = false;
				}
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
			}

			if ( Lang13.Bool( href_list["switchcamera"] ) ) {
				
			}

			if ( Lang13.Bool( href_list["showalerts"] ) ) {
				this.ai_alerts();
			}

			if ( Lang13.Bool( href_list["say_word"] ) ) {
				GlobalFuncs.play_vox_word( href_list["say_word"], null, this );
				return null;
			}

			if ( Lang13.Bool( href_list["show_paper"] ) ) {
				
				if ( Lang13.Bool( this.last_paper_seen ) ) {
					Interface13.Browse( this, this.last_paper_seen, "window=show_paper" );
				}
			}

			if ( Lang13.Bool( href_list["jumptoholopad"] ) ) {
				H = Lang13.FindObj( href_list["jumptoholopad"] );

				if ( this.stat == 0 ) {
					
					if ( Lang13.Bool( H ) ) {
						((Ent_Static)H).attack_ai( this );
					} else {
						this.WriteMsg( "<span class='notice'>Unable to locate the holopad.</span>" );
					}
				}
			}

			if ( Lang13.Bool( href_list["track"] ) ) {
				_string = href_list["track"];
				this.trackable_mobs();
				trackeable = new ByTable();
				trackeable.Add( this.track.humans + this.track.others );
				target = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( trackeable )) {
					I = _a;
					
					M = trackeable[I];

					if ( M.name == _string ) {
						target.Add( M );
					}
				}

				if ( this.name == _string ) {
					target.Add( this );
				}

				if ( target.len != 0 ) {
					this.ai_actual_track( Rand13.PickFromTable( target ) );
				} else {
					this.WriteMsg( "Target is not on or near any active cameras on the station." );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["callbot"] ) ) {
				this.Bot = Lang13.FindIn( href_list["callbot"], GlobalVars.living_mob_list );

				if ( !Lang13.Bool( this.Bot ) || this.Bot.remote_disabled || this.control_disabled ) {
					return null;
				}
				this.waypoint_mode = true;
				this.WriteMsg( "<span class='notice'>Set your waypoint by clicking on a valid location free of obstructions.</span>" );
				return null;
			}

			if ( Lang13.Bool( href_list["interface"] ) ) {
				this.Bot = Lang13.FindIn( href_list["interface"], GlobalVars.living_mob_list );

				if ( !Lang13.Bool( this.Bot ) || this.Bot.remote_disabled || this.control_disabled ) {
					return null;
				}
				((Ent_Static)this.Bot).attack_ai( this );
			}

			if ( Lang13.Bool( href_list["botrefresh"] ) ) {
				this.botcall();
				return null;
			}

			if ( Lang13.Bool( href_list["ai_take_control"] ) ) {
				M2 = Lang13.FindObj( href_list["ai_take_control"] );

				if ( this.controlled_mech != null ) {
					this.WriteMsg( "You are already loaded into an onboard computer!" );
					return null;
				}

				if ( Lang13.Bool( M2 ) ) {
					((Ent_Static)M2).transfer_ai( 3, this, Task13.User );
				}
			}
			return null;
		}

		// Function from file: ai.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			switch ((double?)( severity )) {
				case 1:
					this.gib();
					break;
				case 2:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 60 );
						this.adjustFireLoss( 60 );
					}
					break;
				case 3:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 30 );
					}
					break;
			}
			return false;
		}

		// Function from file: ai.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( Rand13.PercentChance( 30 ) ) {
				
				dynamic _a = Rand13.Pick(new object [] { 1, 2 }); // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					this.view_core();
				} else if ( _a==2 ) {
					GlobalVars.SSshuttle.requestEvac( this, "ALERT: Energy surge detected in AI core! Station integrity may be compromised! Initiati--%m091#ar-BZZT" );
				}
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: ai.dm
		public override bool restrained(  ) {
			return false;
		}

		// Function from file: ai.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( this.stat != 2 ) {
				this.adjustBruteLoss( 60 );
				this.updatehealth();
				return true;
			}
			return false;
		}

		// Function from file: ai.dm
		public override bool? check_eye( Mob user = null ) {
			
			if ( !Lang13.Bool( this.current ) ) {
				return null;
			}
			user.reset_view( this.current );
			return true;
		}

		// Function from file: ai.dm
		public override bool update_canmove(  ) {
			return false;
		}

		// Function from file: ai.dm
		public override dynamic Stat(  ) {
			dynamic borg_area = null;
			Mob_Living_Silicon_Robot R = null;
			string robot_status = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				
				if ( !( this.stat != 0 ) ) {
					Interface13.Stat( null, "System integrity: " + ( this.health + 100 ) / 2 + "%" );
					Interface13.Stat( null, "Station Time: " + GlobalFuncs.worldtime2text() );
					Interface13.Stat( null, "Connected cyborgs: " + this.connected_robots.len );

					foreach (dynamic _a in Lang13.Enumerate( this.connected_robots, typeof(Mob_Living_Silicon_Robot) )) {
						R = _a;
						
						borg_area = GlobalFuncs.get_area( R );
						robot_status = "Nominal";

						if ( R.stat != 0 || !( R.client != null ) ) {
							robot_status = "OFFLINE";
						} else if ( !Lang13.Bool( R.cell ) || Convert.ToDouble( R.cell.charge ) <= 0 ) {
							robot_status = "DEPOWERED";
						}
						Interface13.Stat( null, "" + R.name + " | S.Integrity: " + R.health + "% | Cell: " + ( Lang13.Bool( R.cell ) ? "" + R.cell.charge + "/" + R.cell.maxcharge : "Empty" ) + " | Module: " + R.designation + " | Loc: " + borg_area.name + " | Status: " + robot_status );
					}
				} else {
					Interface13.Stat( null, "Systems nonfunctional" );
				}
			}
			return null;
		}

		// Function from file: ai.dm
		public override dynamic Destroy(  ) {
			GlobalVars.ai_list.Remove( this );
			GlobalVars.shuttle_caller_list.Remove( this );
			GlobalVars.SSshuttle.autoEvac();
			GlobalFuncs.qdel( this.eyeobj );
			return base.Destroy();
		}

		// Function from file: tracking.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.ai_camera_list();
			return null;
		}

		// Function from file: eye.dm
		public void view_core(  ) {
			this.current = null;
			this.cameraFollow = null;
			this.unset_machine();

			if ( this.eyeobj != null && this.loc != null ) {
				this.eyeobj.loc = this.loc;
			} else {
				this.WriteMsg( "ERROR: Eyeobj not found. Creating new eye..." );
				this.eyeobj = new Mob_Camera_AiEye( this.loc );
				this.eyeobj.ai = this;
				this.eyeobj.name = "" + this.name + " (AI Eye)";
			}
			this.eyeobj.setLoc( this.loc );
			return;
		}

		// Function from file: say.dm
		public void announcement(  ) {
			dynamic message = null;
			ByTable words = null;
			ByTable incorrect_words = null;
			dynamic word = null;
			dynamic word2 = null;

			
			if ( GlobalVars.announcing_vox > Game13.time ) {
				this.WriteMsg( "<span class='notice'>Please wait " + Num13.Floor( ( GlobalVars.announcing_vox - Game13.time ) / 10 ) + " seconds.</span>" );
				return;
			}
			message = Interface13.Input( this, "WARNING: Misuse of this verb can result in you being job banned. More help is available in 'Announcement Help'", "Announcement", this.last_announcement, null, InputType.Str );
			this.last_announcement = message;

			if ( !Lang13.Bool( message ) || GlobalVars.announcing_vox > Game13.time ) {
				return;
			}

			if ( this.stat != 0 ) {
				return;
			}

			if ( this.control_disabled ) {
				this.WriteMsg( "<span class='notice'>Wireless interface disabled, unable to interact with announcement PA.</span>" );
				return;
			}
			words = GlobalFuncs.text2list( GlobalFuncs.trim( message ), " " );
			incorrect_words = new ByTable();

			if ( words.len > 30 ) {
				words.len = 30;
			}

			foreach (dynamic _a in Lang13.Enumerate( words )) {
				word = _a;
				
				word = String13.ToLower( GlobalFuncs.trim( word ) );

				if ( !Lang13.Bool( word ) ) {
					words.Remove( word );
					continue;
				}

				if ( !Lang13.Bool( GlobalVars.vox_sounds[word] ) ) {
					incorrect_words.Add( word );
				}
			}

			if ( incorrect_words.len != 0 ) {
				this.WriteMsg( "<span class='notice'>These words are not available on the announcement system: " + GlobalFuncs.english_list( incorrect_words ) + ".</span>" );
				return;
			}
			GlobalVars.announcing_vox = Game13.time + 600;
			GlobalFuncs.log_game( "" + GlobalFuncs.key_name( this ) + " made a vocal announcement with the following message: " + message + "." );

			foreach (dynamic _b in Lang13.Enumerate( words )) {
				word2 = _b;
				
				GlobalFuncs.play_vox_word( word2, this.z, null );
			}
			return;
		}

		// Function from file: say.dm
		public void holopad_talk( dynamic message = null ) {
			dynamic T = null;

			GlobalFuncs.log_say( "" + GlobalFuncs.key_name( this ) + " : " + message );
			message = GlobalFuncs.trim( message );

			if ( !Lang13.Bool( message ) ) {
				return;
			}
			T = this.current;

			if ( T is Obj_Machinery_Hologram_Holopad && Lang13.Bool( T.masters[this] ) ) {
				this.send_speech( message, 7, T, "R", this.get_spans() );
				this.WriteMsg( "<i><span class='game say'>Holopad transmitted, <span class='name'>" + this.real_name + "</span> <span class='message robot'>\"" + message + "\"</span></span></i>" );
			} else {
				this.WriteMsg( "No holopad connected." );
			}
			return;
		}

		// Function from file: life.dm
		public bool lacks_power(  ) {
			dynamic T = null;
			dynamic A = null;

			T = GlobalFuncs.get_turf( this );
			A = GlobalFuncs.get_area( this );
			return ( !A.power_equip || T is Tile_Space ) && !GlobalFuncs.is_type_in_list( this.loc, new ByTable(new object [] { typeof(Obj_Item), typeof(Obj_Mecha) }) );
		}

		// Function from file: laws.dm
		[VerbInfo( name: "Show Laws", group: "AI Commands" )]
		public void show_laws_verb(  ) {
			
			if ( Task13.User.stat == 2 ) {
				return;
			}
			this.show_laws();
			return;
		}

		// Function from file: ai.dm
		public void relay_speech( string message = null, dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null, ByTable spans = null ) {
			dynamic name_used = null;
			string rendered = null;

			raw_message = this.lang_treat( speaker, message_langs, raw_message, spans );
			name_used = ((Ent_Dynamic)speaker).GetVoice();
			rendered = "<i><span class='game say'>Relayed Speech: <span class='name'>" + name_used + "</span> <span class='message'>" + raw_message + "</span></span></i>";
			this.show_message( rendered, 2 );
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Set Auto Announce Mode", desc: "Modify the default radio setting for your automatic announcements.", group: "AI Commands" )]
		public void set_automatic_say_channel(  ) {
			
			if ( this.stat == 2 ) {
				return;
			}
			this.set_autosay();
			return;
		}

		// Function from file: ai.dm
		public void set_syndie_radio(  ) {
			
			if ( this.v_radio != null ) {
				this.v_radio.make_syndie();
			}
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Transceiver Settings", desc: "Allows you to change settings of your radio.", group: "AI Commands" )]
		public void control_integrated_radio(  ) {
			
			if ( this.stat == 2 ) {
				return;
			}
			this.WriteMsg( "Accessing Subspace Transceiver control..." );

			if ( this.v_radio != null ) {
				this.v_radio.interact( this );
			}
			return;
		}

		// Function from file: ai.dm
		public void light_cameras(  ) {
			ByTable add = null;
			ByTable remove = null;
			ByTable visible = null;
			Camerachunk CC = null;
			Obj_Machinery_Camera C = null;
			Obj_Machinery_Camera C2 = null;
			Obj_Machinery_Camera C3 = null;

			add = new ByTable();
			remove = new ByTable();
			visible = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.eyeobj.visibleCameraChunks, typeof(Camerachunk) )) {
				CC = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( CC.cameras, typeof(Obj_Machinery_Camera) )) {
					C = _a;
					

					if ( !C.can_use() || C.light_disabled || Map13.GetDistance( C, this.eyeobj ) > 7 ) {
						continue;
					}
					visible.Or( C );
				}
			}
			add = visible - this.lit_cameras;
			remove = this.lit_cameras - visible;

			foreach (dynamic _c in Lang13.Enumerate( remove, typeof(Obj_Machinery_Camera) )) {
				C2 = _c;
				
				C2.SetLuminosity( 0 );
				this.lit_cameras.Remove( C2 );
			}

			foreach (dynamic _d in Lang13.Enumerate( add, typeof(Obj_Machinery_Camera) )) {
				C3 = _d;
				
				C3.SetLuminosity( 5 );
				this.lit_cameras.Or( C3 );
			}
			return;
		}

		// Function from file: ai.dm
		public void toggle_camera_light(  ) {
			Obj_Machinery_Camera C = null;

			
			if ( this.stat != 0 ) {
				return;
			}
			this.camera_light_on = !this.camera_light_on;

			if ( !this.camera_light_on ) {
				this.WriteMsg( "Camera lights deactivated." );

				foreach (dynamic _a in Lang13.Enumerate( this.lit_cameras, typeof(Obj_Machinery_Camera) )) {
					C = _a;
					
					C.SetLuminosity( 0 );
					this.lit_cameras = new ByTable();
				}
				return;
			}
			this.light_cameras();
			this.WriteMsg( "Camera lights activated." );
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Return to Main Core", group: "Malfunction" )]
		public void corereturn(  ) {
			Ent_Static apc = null;

			apc = this.loc;

			if ( !( apc is Obj_Machinery_Power_Apc ) ) {
				this.WriteMsg( "<span class='notice'>You are already in your Main Core.</span>" );
				return;
			}
			((Obj_Machinery_Power_Apc)apc).malfvacate();
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Change Hologram", desc: "Change the default hologram available to AI to something else.", group: "AI Commands" )]
		public void ai_hologram_change(  ) {
			dynamic input = null;
			ByTable personnel_list = null;
			Data_Record t = null;
			dynamic character_icon = null;
			ByTable icon_list = null;

			
			if ( this.stat == 2 ) {
				return;
			}

			if ( Interface13.Alert( "Would you like to select a hologram based on a crew member or switch to unique avatar?", null, "Crew Member", "Unique" ) == "Crew Member" ) {
				personnel_list = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.data_core.locked, typeof(Data_Record) )) {
					t = _a;
					
					personnel_list["" + t.fields["name"] + ": " + t.fields["rank"]] = t.fields["image"];
				}

				if ( personnel_list.len != 0 ) {
					input = Interface13.Input( "Select a crew member:", null, null, null, personnel_list, InputType.Null | InputType.Any );
					character_icon = personnel_list[input];

					if ( Lang13.Bool( character_icon ) ) {
						GlobalFuncs.qdel( this.holo_icon );
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( character_icon ) );
					}
				} else {
					Interface13.Alert( "No suitable records found. Aborting." );
				}
			} else {
				icon_list = new ByTable(new object [] { "default", "floating face", "xeno queen", "space carp" });
				input = Interface13.Input( "Please select a hologram:", null, null, null, icon_list, InputType.Null | InputType.Any );

				if ( Lang13.Bool( input ) ) {
					GlobalFuncs.qdel( this.holo_icon );

					dynamic _b = input; // Was a switch-case, sorry for the mess.
					if ( _b=="default" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo1" ) );
					} else if ( _b=="floating face" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo2" ) );
					} else if ( _b=="xeno queen" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo3" ) );
					} else if ( _b=="space carp" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo4" ) );
					}
				}
			}
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "AI Status", group: "AI Commands" )]
		public void ai_statuschange(  ) {
			ByTable ai_emotions = null;
			dynamic emote = null;
			Obj_Machinery M = null;
			Obj_Machinery AISD = null;
			Obj_Machinery SD = null;

			
			if ( this.stat == 2 ) {
				return;
			}
			ai_emotions = new ByTable(new object [] { "Very Happy", "Happy", "Neutral", "Unsure", "Confused", "Sad", "BSOD", "Blank", "Problems?", "Awesome", "Facepalm", "Friend Computer", "Dorfy", "Blue Glow", "Red Glow" });
			emote = Interface13.Input( "Please, select a status!", "AI Status", null, null, ai_emotions, InputType.Any );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery) )) {
				M = _a;
				

				if ( M is Obj_Machinery_AiStatusDisplay ) {
					AISD = M;
					((dynamic)AISD).emotion = emote;
				} else if ( M is Obj_Machinery_StatusDisplay ) {
					SD = M;

					if ( emote == "Friend Computer" ) {
						((dynamic)SD).friendc = 1;
					} else {
						((dynamic)SD).friendc = 0;
					}
				}
			}
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Choose Module", group: "Malfunction" )]
		public void choose_modules(  ) {
			this.malf_picker.use( this );
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Jump To Network", group: "AI Commands" )]
		public void ai_network_change(  ) {
			ByTable cameralist = null;
			Mob U = null;
			Obj_Machinery_Camera C = null;
			ByTable tempnetwork = null;
			dynamic i = null;
			dynamic old_network = null;
			Obj_Machinery_Camera C2 = null;

			this.unset_machine();
			this.cameraFollow = null;
			cameralist = new ByTable( 0 );

			if ( this.stat == 2 ) {
				return;
			}
			U = Task13.User;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _b;
				

				if ( !C.can_use() ) {
					continue;
				}
				tempnetwork = C.network;
				tempnetwork.Remove( "CREED", "thunder", "RD", "toxins", "Prison" );

				if ( tempnetwork.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( C.network )) {
						i = _a;
						
						cameralist[i] = i;
					}
				}
			}
			old_network = this.network;
			this.network = Interface13.Input( U, "Which network would you like to view?", null, null, cameralist, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( ((dynamic)U).eyeobj ) ) {
				((Mob_Living_Silicon_Ai)U).view_core();
				return;
			}

			if ( this.network == null ) {
				this.network = old_network;
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
					C2 = _c;
					

					if ( !C2.can_use() ) {
						continue;
					}

					if ( C2.network.Contains( this.network ) ) {
						((Mob_Camera_AiEye)((dynamic)U).eyeobj).setLoc( GlobalFuncs.get_turf( C2 ) );
						break;
					}
				}
			}
			this.WriteMsg( "<span class='notice'>Switched to " + this.network + " camera network.</span>" );
			return;
		}

		// Function from file: ai.dm
		public void call_bot( dynamic waypoint = null ) {
			
			if ( !Lang13.Bool( this.Bot ) ) {
				return;
			}

			if ( this.Bot.calling_ai != null && this.Bot.calling_ai != this ) {
				this.WriteMsg( "<span class='danger'>Interface error. Unit is already in use.</span>" );
				return;
			}
			((Mob_Living_SimpleAnimal_Bot)this.Bot).call_bot( this, waypoint );
			return;
		}

		// Function from file: ai.dm
		public void set_waypoint( dynamic A = null ) {
			dynamic turf_check = null;

			turf_check = GlobalFuncs.get_turf( A );

			if ( Map13.FetchInRange( null, GlobalFuncs.get_turf( this ) ).Contains( turf_check ) ) {
				this.call_bot( turf_check );
			} else if ( GlobalVars.cameranet != null && GlobalVars.cameranet.checkTurfVis( turf_check ) ) {
				this.call_bot( turf_check );
			} else {
				this.WriteMsg( "<span class='danger'>Selected location is not visible.</span>" );
			}
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Access Robot Control", desc: "Wirelessly control various automatic robots.", group: "AI Commands" )]
		public void botcall(  ) {
			dynamic ai_current_turf = null;
			int ai_Zlevel = 0;
			dynamic d = null;
			dynamic bot_area = null;
			string bot_mode = null;
			Browser popup = null;

			
			if ( this.stat == 2 ) {
				return;
			}

			if ( this.control_disabled ) {
				this.WriteMsg( "Wireless communication is disabled." );
				return;
			}
			ai_current_turf = GlobalFuncs.get_turf( this );
			ai_Zlevel = Convert.ToInt32( ai_current_turf.z );
			d += new Txt( "<A HREF=?src=" ).Ref( this ).str( ";botrefresh=1>Query network status</A><br>" ).ToString();
			d += "<table width='100%'><tr><td width='40%'><h3>Name</h3></td><td width='30%'><h3>Status</h3></td><td width='30%'><h3>Location</h3></td><td width='10%'><h3>Control</h3></td></tr>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.living_mob_list )) {
				this.Bot = _a;
				

				if ( !( this.Bot is Mob_Living_SimpleAnimal_Bot ) ) {
					continue;
				}

				if ( Convert.ToInt32( this.Bot.z ) == ai_Zlevel && !this.Bot.remote_disabled ) {
					bot_area = GlobalFuncs.get_area( this.Bot );
					bot_mode = ((Mob_Living_SimpleAnimal_Bot)this.Bot).get_mode();
					d += "<tr><td width='30%'>" + ( Lang13.Bool( this.Bot.hacked ) ? "<span class='bad'>(!)</span>" : "" ) + " " + this.Bot.name + "</A> (" + this.Bot.model + ")</td>";
					d += "<td width='30%'>" + bot_mode + "</td>";
					d += "<td width='30%'>" + bot_area.name + "</td>";
					d += new Txt( "<td width='10%'><A HREF=?src=" ).Ref( this ).str( ";interface=" ).Ref( this.Bot ).str( ">Interface</A></td>" ).ToString();
					d += new Txt( "<td width='10%'><A HREF=?src=" ).Ref( this ).str( ";callbot=" ).Ref( this.Bot ).str( ">Call</A></td>" ).ToString();
					d += "</tr>";
					d = GlobalFuncs.format_text( d );
				}
			}
			popup = new Browser( this, "botcall", "Remote Robot Control", 700, 400 );
			popup.set_content( d );
			popup.open();
			return;
		}

		// Function from file: ai.dm
		public bool switchCamera( dynamic C = null ) {
			
			if ( !this.tracking ) {
				this.cameraFollow = null;
			}

			if ( !Lang13.Bool( C ) || this.stat == 2 ) {
				return false;
			}

			if ( !( this.eyeobj != null ) ) {
				this.view_core();
				return false;
			}
			this.eyeobj.setLoc( GlobalFuncs.get_turf( C ) );
			return true;
		}

		// Function from file: ai.dm
		[VerbInfo( group: "Malfunction" )]
		public void ai_cancel_call(  ) {
			Mob_Living_Silicon_Ai AI = null;

			
			if ( this.stat == 2 ) {
				return;
			}

			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				AI = this;

				if ( AI.control_disabled ) {
					this.WriteMsg( "Wireless control is disabled!" );
					return;
				}
			}
			GlobalVars.SSshuttle.cancelEvac( this );
			return;
		}

		// Function from file: ai.dm
		public void ai_call_shuttle(  ) {
			Mob_Living_Silicon_Ai AI = null;
			dynamic reason = null;
			dynamic C = null;

			
			if ( this.stat == 2 ) {
				return;
			}

			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				AI = this;

				if ( AI.control_disabled ) {
					Task13.User.WriteMsg( "Wireless control is disabled!" );
					return;
				}
			}
			reason = Interface13.Input( this, "What is the nature of your emergency? (" + GlobalVars.CALL_SHUTTLE_REASON_LENGTH + " characters required.)", "Confirm Shuttle Call", null, null, InputType.Str | InputType.Null );

			if ( Lang13.Bool( GlobalFuncs.trim( reason ) ) ) {
				GlobalVars.SSshuttle.requestEvac( this, reason );
			}

			if ( GlobalVars.SSshuttle.emergency.mode >= 2 ) {
				C = Lang13.FindIn( typeof(Obj_Machinery_Computer_Communications), GlobalVars.machines );

				if ( Lang13.Bool( C ) ) {
					((Obj_Machinery_Computer_Communications)C).post_status( "shuttle" );
				}
			}
			return;
		}

		// Function from file: ai.dm
		public void ai_roster(  ) {
			string dat = null;
			Data_Record t = null;

			dat = "<html><head><title>Crew Roster</title></head><body><b>Crew Roster:</b><br><br>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
				t = _a;
				
				dat += t.fields["name"] + " - " + t.fields["rank"] + "<br>";
			}
			dat += "</body></html>";
			Interface13.Browse( this, dat, "window=airoster" );
			GlobalFuncs.onclose( this, "airoster" );
			return;
		}

		// Function from file: ai.dm
		public void ai_alerts(  ) {
			string dat = null;
			dynamic cat = null;
			dynamic L = null;
			dynamic alarm = null;
			dynamic alm = null;
			dynamic A = null;
			dynamic C = null;
			dynamic sources = null;
			string dat2 = null;
			Obj_Machinery_Camera I = null;
			Obj_Machinery_Camera Ctmp = null;

			dat = "<HEAD><TITLE>Current Station Alerts</TITLE><META HTTP-EQUIV='Refresh' CONTENT='10'></HEAD><BODY>\n";
			dat += new Txt( "<A HREF='?src=" ).Ref( this ).str( ";mach_close=aialerts'>Close</A><BR><BR>" ).ToString();

			foreach (dynamic _c in Lang13.Enumerate( this.alarms )) {
				cat = _c;
				
				dat += "<B>" + cat + "</B><BR>\n";
				L = this.alarms[cat];

				if ( Lang13.Bool( L.len ) ) {
					
					foreach (dynamic _b in Lang13.Enumerate( L )) {
						alarm = _b;
						
						alm = L[alarm];
						A = alm[1];
						C = alm[2];
						sources = alm[3];
						dat += "<NOBR>";

						if ( Lang13.Bool( C ) && C is ByTable ) {
							dat2 = "";

							foreach (dynamic _a in Lang13.Enumerate( C, typeof(Obj_Machinery_Camera) )) {
								I = _a;
								
								dat2 += new Txt().item( ( dat2 == "" ? "" : " | " ) ).str( "<A HREF=?src=" ).Ref( this ).str( ";switchcamera=" ).Ref( I ).str( ">" ).item( I.c_tag ).str( "</A>" ).ToString();
							}
							dat += "-- " + A.name + " (" + ( dat2 != "" ? dat2 : "No Camera" ) + ")";
						} else if ( Lang13.Bool( C ) && C is Obj_Machinery_Camera ) {
							Ctmp = C;
							dat += new Txt( "-- " ).item( A.name ).str( " (<A HREF=?src=" ).Ref( this ).str( ";switchcamera=" ).Ref( C ).str( ">" ).item( Ctmp.c_tag ).str( "</A>)" ).ToString();
						} else {
							dat += "-- " + A.name + " (No Camera)";
						}

						if ( Convert.ToDouble( sources.len ) > 1 ) {
							dat += "- " + sources.len + " sources";
						}
						dat += "</NOBR><BR>\n";
					}
				} else {
					dat += "-- All Systems Nominal<BR>\n";
				}
				dat += "<BR>\n";
			}
			this.viewalerts = true;
			Interface13.Browse( this, dat, "window=aialerts&can_close=0" );
			return;
		}

		// Function from file: PDA.dm
		public void cmd_show_message_log( Mob user = null ) {
			string HTML = null;

			
			if ( user.stat == 2 ) {
				return;
			}

			if ( !( this.aiPDA == null ) ) {
				HTML = "<html><head><title>AI PDA Message Log</title></head><body>" + this.aiPDA.tnote + "</body></html>";
				Interface13.Browse( user, HTML, "window=log;size=400x444;border=1;can_resize=1;can_close=1;can_minimize=0" );
			} else {
				user.WriteMsg( "You do not have a PDA. You should make an issue report about this." );
			}
			return;
		}

		// Function from file: PDA.dm
		public void cmd_send_pdamesg( Mob user = null ) {
			ByTable names = null;
			ByTable plist = null;
			ByTable namecounts = null;
			Obj P = null;
			string name = null;
			dynamic c = null;
			dynamic selected = null;
			dynamic add_photo = null;
			Picture Pic = null;

			names = new ByTable();
			plist = new ByTable();
			namecounts = new ByTable();

			if ( user.stat == 2 ) {
				return;
			}

			if ( this.aiPDA.toff ) {
				user.WriteMsg( "Turn on your receiver in order to send messages." );
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_viewable_pdas(), typeof(Obj_Item_Device_Pda) )) {
				P = _a;
				

				if ( P == this ) {
					continue;
				} else if ( P == this.aiPDA ) {
					continue;
				}
				name = ((dynamic)P).owner;

				if ( names.Contains( name ) ) {
					namecounts[name]++;
					name = "" + name + " (" + namecounts[name] + ")";
				} else {
					names.Add( name );
					namecounts[name] = 1;
				}
				plist["" + name] = P;
			}
			c = Interface13.Input( user, "Please select a PDA", null, null, GlobalFuncs.sortList( plist ), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( c ) ) {
				return;
			}
			selected = plist[c];

			if ( this.aicamera.aipictures.len > 0 ) {
				add_photo = Interface13.Input( user, "Do you want to attach a photo?", "Photo", "No", new ByTable(new object [] { "Yes", "No" }), InputType.Null | InputType.Any );

				if ( add_photo == "Yes" ) {
					Pic = this.aicamera.selectpicture( this.aicamera );
					this.aiPDA.photo = Pic.fields["img"];
				}
			}
			this.aiPDA.create_message( this, selected );
			return;
		}

		// Function from file: tracking.dm
		public void ai_actual_track( dynamic target = null ) {
			Mob U = null;
			int cameraticks = 0;

			
			if ( !( target is Mob_Living ) ) {
				return;
			}
			U = Task13.User;
			((dynamic)U).cameraFollow = target;
			((dynamic)U).tracking = 1;
			U.WriteMsg( "<span class='notice'>Attempting to track " + ((Mob_Living)target).get_visible_name() + "...</span>" );
			Task13.Sleep( Num13.MinInt( 30, ((int)( Map13.GetDistance( target, ((dynamic)U).eyeobj ) / 4 )) ) );
			Task13.Schedule( 15, (Task13.Closure)(() => {
				((dynamic)U).tracking = 0;
				return;
			}));

			if ( !Lang13.Bool( target ) || !((Mob_Living)target).can_track( Task13.User ) ) {
				U.WriteMsg( "<span class='warning'>Target is not near any active cameras.</span>" );
				((dynamic)U).cameraFollow = null;
				return;
			}
			U.WriteMsg( "<span class='notice'>Now tracking " + ((Mob_Living)target).get_visible_name() + " on camera.</span>" );
			cameraticks = 0;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (((dynamic)U).cameraFollow == target) {
					
					if ( ((dynamic)U).cameraFollow == null ) {
						return;
					}

					if ( !((Mob_Living)target).can_track( Task13.User ) ) {
						((dynamic)U).tracking = 1;

						if ( !( cameraticks != 0 ) ) {
							U.WriteMsg( "<span class='warning'>Target is not near any active cameras. Attempting to reacquire...</span>" );
						}
						cameraticks++;

						if ( cameraticks > 9 ) {
							((dynamic)U).cameraFollow = null;
							U.WriteMsg( "<span class='warning'>Unable to reacquire, cancelling track...</span>" );
							this.tracking = false;
							return;
						} else {
							Task13.Sleep( 10 );
							continue;
						}
					} else {
						cameraticks = 0;
						((dynamic)U).tracking = 0;
					}

					if ( Lang13.Bool( ((dynamic)U).eyeobj ) ) {
						((Mob_Camera_AiEye)((dynamic)U).eyeobj).setLoc( GlobalFuncs.get_turf( target ) );
					} else {
						this.view_core();
						((dynamic)U).cameraFollow = null;
						return;
					}
					Task13.Sleep( 10 );
				}
				return;
			}));
			return;
		}

		// Function from file: tracking.dm
		public dynamic trackable_mobs(  ) {
			Mob_Living M = null;
			bool human = false;
			string name = null;
			dynamic targets = null;

			this.track.names.Cut();
			this.track.namecounts.Cut();
			this.track.humans.Cut();
			this.track.others.Cut();

			if ( Task13.User.stat == 2 ) {
				return new ByTable();
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living) )) {
				M = _a;
				

				if ( !M.can_track( Task13.User ) ) {
					continue;
				}
				human = false;

				if ( M is Mob_Living_Carbon_Human ) {
					human = true;
				}
				name = M.name;

				if ( this.track.names.Contains( name ) ) {
					this.track.namecounts[name]++;
					name = "" + name + " (" + this.track.namecounts[name] + ")";
				} else {
					this.track.names.Add( name );
					this.track.namecounts[name] = 1;
				}

				if ( human ) {
					this.track.humans[name] = M;
				} else {
					this.track.others[name] = M;
				}
			}
			targets = GlobalFuncs.sortList( this.track.humans ) + GlobalFuncs.sortList( this.track.others );
			return targets;
		}

		// Function from file: tracking.dm
		public bool ai_camera_list( dynamic camera = null ) {
			Ent_Static C = null;

			
			if ( !Lang13.Bool( camera ) ) {
				return false;
			}
			C = this.track.cameras[camera];
			this.eyeobj.setLoc( C );
			return false;
		}

		// Function from file: tracking.dm
		public ByTable get_camera_list(  ) {
			ByTable L = null;
			Obj_Machinery_Camera C = null;
			ByTable T = null;
			Obj_Machinery_Camera C2 = null;
			ByTable tempnetwork = null;

			this.track.cameras.Cut();

			if ( this.stat == 2 ) {
				return null;
			}
			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _a;
				
				L.Add( C );
			}
			GlobalFuncs.camera_sort( L );
			T = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( L, typeof(Obj_Machinery_Camera) )) {
				C2 = _b;
				
				tempnetwork = C2.network & this.network;

				if ( tempnetwork.len != 0 ) {
					T["" + C2.c_tag + ( C2.can_use() ? null : " (Deactivated)" )] = C2;
				}
			}
			this.track.cameras = T;
			return T;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Enhanced Surveillance", group: "Malfunction" )]
		public void surveillance(  ) {
			
			if ( this.eyeobj != null ) {
				this.eyeobj.relay_speech = GlobalVars.TRUE;
			}
			this.WriteMsg( "<span class='notice'>OTA firmware distribution complete! Cameras upgraded: Enhanced surveillance package online.</span>" );
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "surveillance" ) );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Upgrade Cameranet", group: "Malfunction" )]
		public void upgrade_cameras(  ) {
			int upgradedcams = 0;
			Obj_Machinery_Camera C = null;
			bool upgraded = false;

			
			if ( !this.canUseTopic() ) {
				return;
			}
			upgradedcams = 0;
			this.see_override = 5;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _a;
				

				if ( C.assembly != null ) {
					upgraded = false;

					if ( !( C.isXRay() != 0 ) ) {
						C.upgradeXRay();
						GlobalVars.cameranet.updateVisibility( C, false );
						upgraded = true;
					}

					if ( !( C.isEmpProof() != 0 ) ) {
						C.upgradeEmpProof();
						upgraded = true;
					}

					if ( upgraded ) {
						upgradedcams++;
					}
				}
			}
			this.WriteMsg( "<span class='notice'>OTA firmware distribution complete! Cameras upgraded: " + upgradedcams + ". Light amplification system online.</span>" );
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "upgrade_cameras" ) );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Reactivate Cameranet", group: "Malfunction" )]
		public void reactivate_cameras(  ) {
			int fixedcams = 0;
			AIModule_Small_ReactivateCameras camera = null;
			Obj_Machinery_Camera C = null;
			dynamic initial_range = null;

			
			if ( !this.canUseTopic() || this.malf_cooldown ) {
				return;
			}
			fixedcams = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.current_modules, typeof(AIModule_Small_ReactivateCameras) )) {
				camera = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
					C = _a;
					
					initial_range = Lang13.Initial( C, "view_range" );

					if ( camera.uses > 0 ) {
						
						if ( !C.status ) {
							C.deactivate( this, false );
							fixedcams++;
							camera.uses--;
						}

						if ( C.view_range != initial_range ) {
							C.view_range = initial_range;
							camera.uses--;
							fixedcams++;
						}
					} else {
						this.WriteMsg( "<span class='warning'>Out of uses.</span>" );
						this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "reactivate_cameras" ) );
						break;
					}
				}
			}
			this.WriteMsg( "<span class='notice'>Diagnostic complete! Operations completed: " + fixedcams + ".</span>" );
			this.malf_cooldown = true;
			Task13.Schedule( 30, (Task13.Closure)(() => {
				this.malf_cooldown = false;
				return;
			}));
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Blackout", group: "Malfunction" )]
		public void blackout(  ) {
			AIModule_Small_Blackout blackout = null;
			Obj_Machinery_Power_Apc apc = null;

			
			if ( !this.canUseTopic() ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.current_modules, typeof(AIModule_Small_Blackout) )) {
				blackout = _b;
				

				if ( blackout.uses > 0 ) {
					blackout.uses--;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Power_Apc) )) {
						apc = _a;
						

						if ( Rand13.PercentChance( apc.overload * 30 ) ) {
							apc.overload_lighting();
						} else {
							apc.overload++;
						}
					}
					this.WriteMsg( "<span class='notice'>Overcurrent applied to the powernet.</span>" );
				} else {
					this.WriteMsg( "<span class='notice'>Out of uses.</span>" );
				}
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		public bool canPlaceTransformer(  ) {
			dynamic PCT = null;
			dynamic middle = null;
			ByTable turfs = null;
			string alert_msg = null;
			bool success = false;
			int? n = null;
			bool? fail = null;
			Ent_Static T = null;
			Camerachunk C = null;
			Ent_Dynamic AM = null;
			Ent_Static I = null;

			
			if ( !( this.eyeobj != null ) || !( this.loc is Tile ) || !this.canUseTopic() ) {
				return false;
			}
			PCT = Lang13.FindIn( typeof(AIModule_Large_PlaceCyborgTransformer), this.current_modules );

			if ( !Lang13.Bool( PCT ) || Convert.ToDouble( PCT.uses ) < 1 ) {
				Interface13.Alert( this, "Out of uses." );
				return false;
			}
			middle = GlobalFuncs.get_turf( this.eyeobj );
			turfs = new ByTable(new object [] { 
				middle, 
				Map13.GetTile( Convert.ToInt32( middle.x - 1 ), Convert.ToInt32( middle.y ), Convert.ToInt32( middle.z ) ), 
				Map13.GetTile( Convert.ToInt32( middle.x + 1 ), Convert.ToInt32( middle.y ), Convert.ToInt32( middle.z ) )
			 });
			alert_msg = "There isn't enough room. Make sure you are placing the machine in a clear area and on a floor.";
			success = true;

			if ( turfs.len == 3 ) {
				n = null;
				n = 1;

				while (( n ??0) < 4) {
					fail = null;
					T = turfs[n];

					if ( !( T is Tile_Simulated_Floor ) ) {
						fail = true;
					}
					C = GlobalVars.cameranet.getCameraChunk( T.x, T.y, T.z );

					if ( !Lang13.Bool( C.visibleTurfs[T] ) ) {
						alert_msg = "We cannot get camera vision of this location.";
						fail = true;
					}

					foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Ent_Dynamic) )) {
						AM = _a;
						

						if ( AM.density ) {
							fail = true;
						}
					}
					I = PCT.turfOverlays[n];
					I.loc = T;
					this.client.images.Add( I );

					if ( fail == true ) {
						success = false;
						I.icon_state = "redOverlay";
					} else {
						I.icon_state = "greenOverlay";
					}
					Task13.Schedule( 30, (Task13.Closure)(() => {
						
						if ( this.client != null && I.loc == T ) {
							this.client.images.Remove( I );
						}
						return;
					}));
					n++;
				}
			}

			if ( success ) {
				return true;
			}
			Interface13.Alert( this, alert_msg );
			return false;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Place Robotic Factory", group: "Malfunction" )]
		public void place_transformer(  ) {
			string sure = null;
			dynamic T = null;
			dynamic PCT = null;

			
			if ( !this.canPlaceTransformer() ) {
				return;
			}
			sure = Interface13.Alert( this, "Are you sure you want to place the machine here?", "Are you sure?", "Yes", "No" );

			if ( sure == "Yes" ) {
				
				if ( !this.canPlaceTransformer() ) {
					return;
				}
				T = GlobalFuncs.get_turf( this.eyeobj );
				new Obj_Machinery_Transformer_Conveyor( T );
				GlobalFuncs.playsound( T, "sound/effects/phasein.ogg", 100, 1 );
				PCT = Lang13.FindIn( typeof(AIModule_Large_PlaceCyborgTransformer), this.current_modules );
				PCT.uses--;
				this.can_shunt = false;
				this.WriteMsg( "<span class='warning'>You cannot shunt anymore.</span>" );
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Override Machine", group: "Malfunction" )]
		[VerbArg( 1, InputType.Obj, VerbArgFilter.FromGlobalVar, "machines" )]
		public void override_machine( Game_Data M = null ) {
			AIModule_Small_OverrideMachine _override = null;

			
			if ( !this.canUseTopic() ) {
				return;
			}

			if ( M is Obj_Machinery ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.current_modules, typeof(AIModule_Small_OverrideMachine) )) {
					_override = _a;
					

					if ( _override.uses > 0 ) {
						_override.uses--;
						this.audible_message( "<span class='italics'>You hear a loud electrical buzzing sound!</span>" );
						this.WriteMsg( "<span class='warning'>Reprogramming machine behaviour...</span>" );
						Task13.Schedule( 50, (Task13.Closure)(() => {
							
							if ( M != null && !Lang13.Bool( M.gc_destroyed ) ) {
								new Mob_Living_SimpleAnimal_Hostile_Mimic_Copy_Machine( GlobalFuncs.get_turf( M ), M, this, true );
							}
							return;
						}));
					} else {
						this.WriteMsg( "<span class='notice'>Out of uses.</span>" );
					}
				}
			} else {
				this.WriteMsg( "<span class='notice'>That's not a machine.</span>" );
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Overload Machine", group: "Malfunction" )]
		[VerbArg( 1, InputType.Obj, VerbArgFilter.FromGlobalVar, "machines" )]
		public void overload_machine( dynamic M = null ) {
			AIModule_Small_OverloadMachine overload = null;

			
			if ( !this.canUseTopic() ) {
				return;
			}

			if ( M is Obj_Machinery ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.current_modules, typeof(AIModule_Small_OverloadMachine) )) {
					overload = _a;
					

					if ( overload.uses > 0 ) {
						overload.uses--;
						this.audible_message( "<span class='italics'>You hear a loud electrical buzzing sound!</span>" );
						this.WriteMsg( "<span class='warning'>Overloading machine circuitry...</span>" );
						Task13.Schedule( 50, (Task13.Closure)(() => {
							
							if ( Lang13.Bool( M ) ) {
								GlobalFuncs.explosion( GlobalFuncs.get_turf( M ), 0, 1, 1, 0 );
								GlobalFuncs.qdel( M );
							}
							return;
						}));
					} else {
						this.WriteMsg( "<span class='notice'>Out of uses.</span>" );
					}
				}
			} else {
				this.WriteMsg( "<span class='notice'>That's not a machine.</span>" );
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Disable Air Alarm Safeties", group: "Malfunction" )]
		public void break_air_alarms(  ) {
			Obj_Machinery_Alarm A = null;

			
			if ( !this.canUseTopic() ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Alarm) )) {
				A = _a;
				

				if ( A.z != 1 ) {
					continue;
				}
				A.emagged = 1;
			}
			this.WriteMsg( "<span class='notice'>All air alarm safeties on the station have been overriden. Air alarms may now use the Flood environmental mode." );
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "break_air_alarms" ) );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Override Thermal Sensors", group: "Malfunction" )]
		public void break_fire_alarms(  ) {
			Obj_Machinery_Firealarm F = null;

			
			if ( !this.canUseTopic() ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Firealarm) )) {
				F = _a;
				

				if ( F.z != 1 ) {
					continue;
				}
				F.emagged = 1;
			}
			this.WriteMsg( "<span class='notice'>All thermal sensors on the station have been disabled. Fire alerts will no longer be recognized.</span>" );
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "break_fire_alarms" ) );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Compile Mecha Virus", desc: "Target a mech by clicking it. Click the appropriate command when ready.", group: "Malfunction" )]
		public void mech_takeover(  ) {
			
			if ( this.stat != 0 ) {
				return;
			}
			this.can_dominate_mechs = true;
			this.WriteMsg( "Virus package compiled. Select a target mech at any time. <b>You must remain on the station at all times. Loss of signal will result in total system lockout.</b>" );
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "mech_takeover" ) );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Destroy RCDs", desc: "Detonate all RCDs on the station, while sparing onboard cyborg RCDs.", group: "Malfunction" )]
		public void disable_rcd(  ) {
			Obj_Item RCD = null;

			
			if ( !this.canUseTopic() || this.malf_cooldown ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.rcd_list, typeof(Obj_Item) )) {
				RCD = _a;
				

				if ( !( RCD is Obj_Item_Weapon_Rcd_Borg ) ) {
					RCD.audible_message( "<span class='danger'><b>" + RCD + " begins to vibrate and buzz loudly!</b></span>", "<span class='danger'><b>" + RCD + " begins vibrating violently!</b></span>" );
					Task13.Schedule( 50, (Task13.Closure)(() => {
						
						if ( RCD != null ) {
							GlobalFuncs.explosion( RCD, 0, 0, 3, 1, null, null, 1 );
							GlobalFuncs.qdel( RCD );
						}
						return;
					}));
				}
			}
			this.WriteMsg( "<span class='warning'>RCD detonation pulse emitted.</span>" );
			this.malf_cooldown = true;
			Task13.Schedule( 100, (Task13.Closure)(() => {
				this.malf_cooldown = false;
				return;
			}));
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Disable Lockdown", group: "Malfunction" )]
		public void disablelockdown(  ) {
			Obj_Machinery_Door AL = null;
			Obj_Machinery_Door D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.airlocks, typeof(Obj_Machinery_Door) )) {
				D = _a;
				
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( D is Obj_Machinery_Door_Airlock ) {
						AL = D;

						if ( ((Obj_Machinery_Door_Airlock)AL).canAIControl() && !( AL.stat != 0 ) ) {
							((Obj_Machinery_Door_Airlock)AL).unbolt();
							AL.secondsElectrified = 0;
							AL.open();
							((dynamic)AL).safe = 1;
						}
					} else if ( !( D.stat != 0 ) ) {
						D.open();
					}
					return;
				}));
			}
			GlobalFuncs.minor_announce( "Automatic system reboot complete. Have a secure day.", "Network reset:" );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Initiate Hostile Lockdown", group: "Malfunction" )]
		public void lockdown(  ) {
			Obj_Machinery_Door AL = null;
			Obj_Machinery_Door D = null;
			dynamic C = null;

			
			if ( !this.canUseTopic() ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.airlocks, typeof(Obj_Machinery_Door) )) {
				D = _a;
				

				if ( D.z != 1 && D.z != 5 ) {
					continue;
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( D is Obj_Machinery_Door_Airlock ) {
						AL = D;

						if ( ((Obj_Machinery_Door_Airlock)AL).canAIControl() && !( AL.stat != 0 ) ) {
							((dynamic)AL).locked = 0;
							((dynamic)AL).safe = 0;
							AL.close();
							((Obj_Machinery_Door_Airlock)AL).bolt();
							AL.secondsElectrified = -1;
						}
					} else if ( !( D.stat != 0 ) ) {
						D.close();
					}
					return;
				}));
			}
			C = Lang13.FindIn( typeof(Obj_Machinery_Computer_Communications), GlobalVars.machines );

			if ( Lang13.Bool( C ) ) {
				((Obj_Machinery_Computer_Communications)C).post_status( "alert", "lockdown" );
			}
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "lockdown" ) );
			GlobalFuncs.minor_announce( "Hostile runtime detected in door controllers. Isolation Lockdown protocols are now in effect. Please remain calm.", "Network Alert:", true );
			this.WriteMsg( "<span class = 'warning'>Lockdown Initiated. Network reset in 90 seconds.</span>" );
			Task13.Schedule( 900, (Task13.Closure)(() => {
				this.disablelockdown();
				return;
			}));
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Upgrade Turrets", group: "Malfunction" )]
		public void upgrade_turrets(  ) {
			Obj_Machinery_PortaTurret turret = null;

			
			if ( !this.canUseTopic() ) {
				return;
			}
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "upgrade_turrets" ) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_PortaTurret) )) {
				turret = _a;
				

				if ( turret.ai ) {
					turret.health += 30;
					turret.eprojectile = typeof(Obj_Item_Projectile_Beam_Heavylaser);
					turret.eshot_sound = "sound/weapons/lasercannonfire.ogg";
				}
			}
			this.WriteMsg( "<span class='notice'>Turrets upgraded.</span>" );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Fireproof Core", group: "Malfunction" )]
		public void fireproof_core(  ) {
			Mob_Living_Silicon_Ai ai = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
				ai = _a;
				
				ai.fire_res_on_core = true;
			}
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "fireproof_core" ) );
			this.WriteMsg( "<span class='notice'>Core fireproofed.</span>" );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Doomsday Device", group: "Malfunction" )]
		public void nuke_station(  ) {
			Tile_Simulated_Floor_Bluegrid T = null;
			Obj_Machinery_DoomsdayDevice DOOM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this, 5 ), typeof(Tile_Simulated_Floor_Bluegrid) )) {
				T = _a;
				
				T.icon_state = "rcircuitanim";
			}
			this.WriteMsg( "<span class='notice'>Nuclear device armed.</span>" );
			GlobalFuncs.priority_announce( "Hostile runtimes detected in all station systems, please deactivate your AI to prevent possible damage to its morality core.", "Anomaly Alert", "sound/AI/aimalf.ogg" );
			GlobalFuncs.set_security_level( "delta" );
			GlobalVars.SSshuttle.emergencyNoEscape = true;
			this.nuking = true;
			DOOM = new Obj_Machinery_DoomsdayDevice( this );
			this.doomsday_device = DOOM;
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "nuke_station" ) );
			return;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.assigned_role = "AI";
			return;
		}

		// Function from file: ai.dm
		public override bool TurfAdjacent( dynamic T = null ) {
			return GlobalVars.cameranet != null && GlobalVars.cameranet.checkTurfVis( T );
		}

		// Function from file: ai.dm
		public override void AltClickOn( dynamic A = null ) {
			((Ent_Static)A).AIAltClick( this );
			return;
		}

		// Function from file: ai.dm
		public override void CtrlClickOn( dynamic A = null ) {
			((Ent_Static)A).AICtrlClick(  );
			return;
		}

		// Function from file: ai.dm
		public override void ShiftClickOn( dynamic A = null ) {
			((Ent_Static)A).AIShiftClick(  );
			return;
		}

		// Function from file: ai.dm
		public override void CtrlShiftClickOn( dynamic A = null ) {
			((Ent_Static)A).AICtrlShiftClick(  );
			return;
		}

		// Function from file: ai.dm
		public override void RangedAttack( dynamic A = null, string _params = null ) {
			((Ent_Static)A).attack_ai( this );
			return;
		}

		// Function from file: ai.dm
		public override void UnarmedAttack( dynamic A = null, bool? proximity_flag = null ) {
			((Ent_Static)A).attack_ai( this );
			return;
		}

		// Function from file: ai.dm
		public override void ClickOn( dynamic A = null, string _params = null ) {
			ByTable modifiers = null;

			
			if ( Game13.time <= this.next_click ) {
				return;
			}
			this.next_click = Game13.time + 1;

			if ( this.client.buildmode != 0 ) {
				GlobalFuncs.build_click( this, this.client.buildmode, _params, A );
				return;
			}

			if ( this.control_disabled || this.stat != 0 ) {
				return;
			}
			modifiers = String13.ParseUrlParams( _params );

			if ( Lang13.Bool( modifiers["shift"] ) && Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlShiftClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["middle"] ) ) {
				
				if ( this.controlled_mech != null ) {
					this.controlled_mech.click_action( A, this );
				}
				return;
				return;
			}

			if ( Lang13.Bool( modifiers["shift"] ) ) {
				this.ShiftClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["alt"] ) ) {
				this.AltClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlClickOn( A );
				return;
			}

			if ( Game13.time <= this.next_move ) {
				return;
			}

			if ( this.aicamera.in_camera_mode ) {
				this.aicamera.camera_mode_off();
				this.aicamera.captureimage( A, Task13.User );
				return;
			}

			if ( this.waypoint_mode ) {
				this.set_waypoint( A );
				this.waypoint_mode = false;
				return;
			}
			((Ent_Static)A).attack_ai( this );
			return;
		}

		// Function from file: ai.dm
		public override void DblClickOn( Ent_Static A = null, string _params = null ) {
			
			if ( this.client.buildmode != 0 ) {
				GlobalFuncs.build_click( this, this.client.buildmode, _params, A );
				return;
			}

			if ( this.control_disabled || this.stat != 0 ) {
				return;
			}

			if ( A is Mob ) {
				this.ai_actual_track( A );
			} else {
				A.move_camera_by_click();
			}
			return;
		}

		// Function from file: ai.dm
		[Verb]
		[VerbInfo( name: "Cancel Camera View", group: "OOC" )]
		public override void cancel_camera(  ) {
			this.view_core();
			return;
		}

		// Function from file: eye.dm
		[Verb]
		[VerbInfo( name: "Toggle Camera Acceleration", group: "AI Commands" )]
		public void toggle_acceleration(  ) {
			
			if ( Task13.User.stat == 2 ) {
				return;
			}
			this.acceleration = !this.acceleration;
			Task13.User.WriteMsg( "Camera acceleration has been toggled " + ( this.acceleration ? "on" : "off" ) + "." );
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Announcement Help", desc: "Display a list of vocal words to announce to the crew.", group: "AI Commands" )]
		public void announcement_help(  ) {
			string dat = null;
			int index = 0;
			dynamic word = null;
			Browser popup = null;

			
			if ( Task13.User.stat == 2 ) {
				return;
			}
			dat = "Here is a list of words you can type into the 'Announcement' button to create sentences to vocally announce to everyone on the same level at you.<BR> <UL><LI>You can also click on the word to preview it.</LI><LI>You can only say 30 words for every announcement.</LI><LI>Do not use punctuation as you would normally, if you want a pause you can use the full stop and comma characters by separating them with spaces, like so: 'Alpha . Test , Bravo'.</LI></UL><font class='bad'>WARNING:</font><BR>Misuse of the announcement system will get you job banned.<HR>";
			index = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.vox_sounds )) {
				word = _a;
				
				index++;
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";say_word=" ).item( word ).str( "'>" ).item( GlobalFuncs.capitalize( word ) ).str( "</A>" ).ToString();

				if ( index != GlobalVars.vox_sounds.len ) {
					dat += " / ";
				}
			}
			popup = new Browser( this, "announce_help", "Announcement Help", 500, 400 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: ai.dm
		[Verb]
		[VerbInfo( name: "Toggle Floor Bolts", group: "AI Commands" )]
		public void toggle_anchor(  ) {
			
			if ( !( this.loc is Tile ) ) {
				return;
			}

			if ( this.stat == 2 ) {
				return;
			}
			this.anchored = !Lang13.Bool( this.anchored );
			this.WriteMsg( "" + ( Lang13.Bool( this.anchored ) ? "<b>You are now anchored.</b>" : "<b>You are now unanchored.</b>" ) );
			return;
		}

		// Function from file: ai.dm
		[Verb]
		[VerbInfo( name: "Set AI Core Display", group: "AI Commands" )]
		public void pick_icon(  ) {
			dynamic icontype = null;

			
			if ( this.stat != 0 || this.aiRestorePowerRoutine != 0 ) {
				return;
			}
			icontype = Interface13.Input( "Please, select a display!", "AI", null, null, new ByTable(new object [] { 
				"Clown", 
				"Monochrome", 
				"Blue", 
				"Inverted", 
				"Firewall", 
				"Green", 
				"Red", 
				"Static", 
				"Red October", 
				"House", 
				"Heartline", 
				"Hades", 
				"Helios", 
				"President", 
				"Syndicat Meow", 
				"Alien", 
				"Too Deep", 
				"Triumvirate", 
				"Triumvirate-M", 
				"Text", 
				"Matrix", 
				"Dorf", 
				"Bliss", 
				"Not Malf", 
				"Fuzzy", 
				"Goon", 
				"Database", 
				"Glitchman", 
				"Murica", 
				"Nanotrasen", 
				"Gentoo"
			 }), InputType.Any );

			if ( icontype == "Clown" ) {
				this.icon_state = "ai-clown2";
			} else if ( icontype == "Monochrome" ) {
				this.icon_state = "ai-mono";
			} else if ( icontype == "Blue" ) {
				this.icon_state = "ai";
			} else if ( icontype == "Inverted" ) {
				this.icon_state = "ai-u";
			} else if ( icontype == "Firewall" ) {
				this.icon_state = "ai-magma";
			} else if ( icontype == "Green" ) {
				this.icon_state = "ai-wierd";
			} else if ( icontype == "Red" ) {
				this.icon_state = "ai-malf";
			} else if ( icontype == "Static" ) {
				this.icon_state = "ai-static";
			} else if ( icontype == "Red October" ) {
				this.icon_state = "ai-redoctober";
			} else if ( icontype == "House" ) {
				this.icon_state = "ai-house";
			} else if ( icontype == "Heartline" ) {
				this.icon_state = "ai-heartline";
			} else if ( icontype == "Hades" ) {
				this.icon_state = "ai-hades";
			} else if ( icontype == "Helios" ) {
				this.icon_state = "ai-helios";
			} else if ( icontype == "President" ) {
				this.icon_state = "ai-pres";
			} else if ( icontype == "Syndicat Meow" ) {
				this.icon_state = "ai-syndicatmeow";
			} else if ( icontype == "Alien" ) {
				this.icon_state = "ai-alien";
			} else if ( icontype == "Too Deep" ) {
				this.icon_state = "ai-toodeep";
			} else if ( icontype == "Triumvirate" ) {
				this.icon_state = "ai-triumvirate";
			} else if ( icontype == "Triumvirate-M" ) {
				this.icon_state = "ai-triumvirate-malf";
			} else if ( icontype == "Text" ) {
				this.icon_state = "ai-text";
			} else if ( icontype == "Matrix" ) {
				this.icon_state = "ai-matrix";
			} else if ( icontype == "Dorf" ) {
				this.icon_state = "ai-dorf";
			} else if ( icontype == "Bliss" ) {
				this.icon_state = "ai-bliss";
			} else if ( icontype == "Not Malf" ) {
				this.icon_state = "ai-notmalf";
			} else if ( icontype == "Fuzzy" ) {
				this.icon_state = "ai-fuzz";
			} else if ( icontype == "Goon" ) {
				this.icon_state = "ai-goon";
			} else if ( icontype == "Database" ) {
				this.icon_state = "ai-database";
			} else if ( icontype == "Glitchman" ) {
				this.icon_state = "ai-glitchman";
			} else if ( icontype == "Murica" ) {
				this.icon_state = "ai-murica";
			} else if ( icontype == "Nanotrasen" ) {
				this.icon_state = "ai-nanotrasen";
			} else if ( icontype == "Gentoo" ) {
				this.icon_state = "ai-gentoo";
			}
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( !this.canSuicide() ) {
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( !this.canSuicide() ) {
				return;
			}

			if ( confirm == "Yes" ) {
				this.suiciding = true;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " is powering down. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).item( this ).str( " is powering down. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.adjustOxyLoss( Num13.MaxInt( Convert.ToInt32( this.maxHealth * 2 - this.getToxLoss() - this.getFireLoss() - this.getBruteLoss() - this.getOxyLoss() ), 0 ) );
				this.updatehealth();
				this.death( false );
			}
			return;
		}

		// Function from file: PDA.dm
		[Verb]
		[VerbInfo( name: "PDA - Toggle Ringer", group: "AI Commands" )]
		public void cmd_toggle_pda_silent(  ) {
			
			if ( Task13.User.stat == 2 ) {
				return;
			}

			if ( !( this.aiPDA == null ) ) {
				this.aiPDA.silent = !this.aiPDA.silent;
				Task13.User.WriteMsg( "<span class='notice'>PDA ringer toggled " + ( this.aiPDA.silent ? "Off" : "On" ) + "!</span>" );
			} else {
				Task13.User.WriteMsg( "You do not have a PDA. You should make an issue report about this." );
			}
			return;
		}

		// Function from file: PDA.dm
		[Verb]
		[VerbInfo( name: "PDA - Toggle Sender/Receiver", group: "AI Commands" )]
		public void cmd_toggle_pda_receiver(  ) {
			
			if ( Task13.User.stat == 2 ) {
				return;
			}

			if ( !( this.aiPDA == null ) ) {
				this.aiPDA.toff = !this.aiPDA.toff;
				Task13.User.WriteMsg( "<span class='notice'>PDA sender/receiver toggled " + ( this.aiPDA.toff ? "Off" : "On" ) + "!</span>" );
			} else {
				Task13.User.WriteMsg( "You do not have a PDA. You should make an issue report about this." );
			}
			return;
		}

		// Function from file: tracking.dm
		[Verb]
		[VerbInfo( name: "track", hidden: true )]
		[VerbArg( 1, InputType.Any, VerbArgFilter.FromMemberFunc, "trackable_mobs" )]
		public void ai_camera_track( dynamic target_name = null ) {
			dynamic target = null;

			
			if ( !Lang13.Bool( target_name ) ) {
				return;
			}
			target = ( this.track.humans[target_name] == null ? this.track.others[target_name] : this.track.humans[target_name] );
			this.ai_actual_track( target );
			return;
		}

	}

}