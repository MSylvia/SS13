// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Shieldgen : Obj_Machinery {

		public int max_health = 100;
		public double health = 100;
		public bool active = false;
		public bool malfunction = false;
		public ByTable deployed_shields = new ByTable();
		public bool is_open = false;
		public bool locked = false;
		public int shield_range = 4;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pressure_resistance = 202.41;
			this.req_access = new ByTable(new object [] { 10 });
			this.icon = "icons/obj/objects.dmi";
			this.icon_state = "shieldoff";
		}

		public Obj_Machinery_Shieldgen ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: shieldgen.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.active ) {
				this.icon_state = ( this.malfunction ? "shieldonbr" : "shieldon" );
			} else {
				this.icon_state = ( this.malfunction ? "shieldoffbr" : "shieldoff" );
			}
			return null;
		}

		// Function from file: shieldgen.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !this.malfunction ) {
				this.malfunction = true;
				this.update_icon();
			}
			return false;
		}

		// Function from file: shieldgen.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic coil = null;

			
			if ( A is Obj_Item_Weapon_Screwdriver ) {
				GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 100, 1 );

				if ( this.is_open ) {
					user.WriteMsg( "<span class='notice'>You close the panel.</span>" );
					this.is_open = false;
				} else {
					user.WriteMsg( "<span class='notice'>You open the panel and expose the wiring.</span>" );
					this.is_open = true;
				}
			} else if ( A is Obj_Item_Stack_CableCoil && this.malfunction && this.is_open ) {
				coil = A;

				if ( ( ((Obj_Item_Stack)coil).get_amount() ??0) < 1 ) {
					user.WriteMsg( "<span class='warning'>You need one length of cable to repair " + this + "!</span>" );
					return null;
				}
				user.WriteMsg( "<span class='notice'>You begin to replace the wires...</span>" );

				if ( GlobalFuncs.do_after( user, 30, null, this ) ) {
					
					if ( ( ((Obj_Item_Stack)coil).get_amount() ??0) < 1 ) {
						return null;
					}
					coil.use( 1 );
					this.health = GlobalVars.max_health;
					this.malfunction = false;
					user.WriteMsg( new Txt( "<span class='notice'>You repair " ).the( this ).item().str( ".</span>" ).ToString() );
					this.update_icon();
				}
			} else if ( A is Obj_Item_Weapon_Wrench ) {
				
				if ( this.locked ) {
					user.WriteMsg( "<span class='warning'>The bolts are covered! Unlocking this would retract the covers.</span>" );
					return null;
				}

				if ( !Lang13.Bool( this.anchored ) && !this.isinspace() ) {
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 100, 1 );
					user.WriteMsg( new Txt( "<span class='notice'>You secure " ).the( this ).item().str( " to the floor!</span>" ).ToString() );
					this.anchored = 1;
				} else if ( Lang13.Bool( this.anchored ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 100, 1 );
					user.WriteMsg( new Txt( "<span class='notice'>You unsecure " ).the( this ).item().str( " from the floor!</span>" ).ToString() );

					if ( this.active ) {
						user.WriteMsg( new Txt( "<span class='notice'>" ).The( this ).item().str( " shuts off!</span>" ).ToString() );
						this.shields_down();
					}
					this.anchored = 0;
				}
			} else if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
				
				if ( this.allowed( user ) ) {
					this.locked = !this.locked;
					user.WriteMsg( "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the controls.</span>" );
				} else {
					user.WriteMsg( "<span class='danger'>Access denied.</span>" );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: shieldgen.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( this.locked ) {
				a.WriteMsg( "<span class='warning'>The machine is locked, you are unable to use it!</span>" );
				return null;
			}

			if ( this.is_open ) {
				a.WriteMsg( "<span class='warning'>The panel must be closed before operating this machine!</span>" );
				return null;
			}

			if ( this.active ) {
				((Ent_Static)a).visible_message( "" + this + " " + a + " deactivated the shield generator.", "<span class='notice'>" + this + " You deactivate the shield generator.</span>", "<span class='italics'>You hear heavy droning fade out.</span>" );
				this.shields_down();
			} else if ( Lang13.Bool( this.anchored ) ) {
				((Ent_Static)a).visible_message( "" + this + " " + a + " activated the shield generator.", "<span class='notice'>" + this + " You activate the shield generator.</span>", "<span class='italics'>You hear heavy droning.</span>" );
				this.shields_up();
			} else {
				a.WriteMsg( "<span class='warning'>The device must first be secured to the floor!</span>" );
			}
			return null;
		}

		// Function from file: shieldgen.dm
		public override double emp_act( int severity = 0 ) {
			
			switch ((int)( severity )) {
				case 1:
					this.health /= 2;
					this.malfunction = true;
					this.locked = Lang13.Bool( Rand13.Pick(new object [] { 0, 1 }) );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.health *= 0.3;
						this.malfunction = true;
					}
					break;
			}
			this.checkhp();
			return 0;
		}

		// Function from file: shieldgen.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					this.health -= 75;
					this.checkhp();
					break;
				case 2:
					this.health -= 30;

					if ( Rand13.PercentChance( 15 ) ) {
						this.malfunction = true;
					}
					this.checkhp();
					break;
				case 3:
					this.health -= 10;
					this.checkhp();
					break;
			}
			return false;
		}

		// Function from file: shieldgen.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( this.malfunction && this.active ) {
				
				if ( this.deployed_shields.len != 0 && Rand13.PercentChance( 5 ) ) {
					GlobalFuncs.qdel( Rand13.PickFromTable( this.deployed_shields ) );
				}
			}
			return null;
		}

		// Function from file: shieldgen.dm
		public void checkhp(  ) {
			
			if ( this.health <= 30 ) {
				this.malfunction = true;
			}

			if ( this.health <= 0 ) {
				GlobalFuncs.qdel( this );
			}
			this.update_icon();
			return;
		}

		// Function from file: shieldgen.dm
		public bool shields_down(  ) {
			Obj_Machinery_Shield shield_tile = null;

			
			if ( !this.active ) {
				return false;
			}
			this.active = false;
			this.update_icon();

			foreach (dynamic _a in Lang13.Enumerate( this.deployed_shields, typeof(Obj_Machinery_Shield) )) {
				shield_tile = _a;
				
				GlobalFuncs.qdel( shield_tile );
			}
			this.deployed_shields.Cut();
			return false;
		}

		// Function from file: shieldgen.dm
		public bool shields_up(  ) {
			dynamic target_tile = null;

			
			if ( this.active ) {
				return false;
			}
			this.active = true;
			this.update_icon();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, this.shield_range ) )) {
				target_tile = _a;
				

				if ( target_tile is Tile_Space && !Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Shield), target_tile ) ) ) {
					
					if ( this.malfunction && Rand13.PercentChance( 33 ) || !this.malfunction ) {
						this.deployed_shields.Add( new Obj_Machinery_Shield( target_tile ) );
					}
				}
			}
			return false;
		}

		// Function from file: shieldgen.dm
		public override dynamic Destroy(  ) {
			Obj_Machinery_Shield shield_tile = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.deployed_shields, typeof(Obj_Machinery_Shield) )) {
				shield_tile = _a;
				
				GlobalFuncs.qdel( shield_tile );
			}
			this.deployed_shields = null;
			return base.Destroy();
		}

	}

}