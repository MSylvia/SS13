// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Cult : GameMode {

		public bool eldergod = false;
		public int orbs_needed = 3;
		public Obj_Structure_Constructshell_Large large_shell_reference = null;
		public int attempts_left = 3;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "cult";
			this.config_tag = "cult";
			this.antag_flag = "cultist";
			this.restricted_jobs = new ByTable(new object [] { "Chaplain", "AI", "Cyborg", "Security Officer", "Warden", "Detective", "Head of Security", "Captain", "Head of Personnel" });
			this.protected_jobs = new ByTable();
			this.required_players = 10;
			this.required_enemies = 2;
			this.recommended_enemies = 2;
			this.enemy_minimum_age = 14;
		}

		// Function from file: cult.dm
		public override bool declare_completion(  ) {
			
			if ( this.eldergod ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "win - cult win" );
				Game13.WriteMsg( "<span class='greentext'>The cult wins! It has succeeded in serving its dark master!</span>" );
			} else {
				GlobalFuncs.feedback_set_details( "round_end_result", "loss - staff stopped the cult" );
				Game13.WriteMsg( "<span class='redtext'>The staff managed to stop the cult!</span>" );
			}
			base.declare_completion();
			return true;
		}

		// Function from file: cult.dm
		public override bool add_cultist( Mind cult_mind = null ) {
			
			if ( !base.add_cultist( cult_mind ) ) {
				return false;
			}
			this.memorize_cult_objectives( cult_mind );
			return false;
		}

		// Function from file: cult.dm
		public void memorize_cult_objectives( Mind cult_mind = null ) {
			cult_mind.current.WriteMsg( "Your objective is to summon Nar-Sie by building and defending a suitable shell for the Geometer. Adequate supplies can be procured through human sacrifices." );
			return;
		}

		// Function from file: cult.dm
		public override bool post_setup( bool? report = null ) {
			Mind cult_mind = null;

			this.modePlayer.Add( this.cult );

			foreach (dynamic _a in Lang13.Enumerate( this.cult, typeof(Mind) )) {
				cult_mind = _a;
				
				this.equip_cultist( cult_mind.current );
				this.update_cult_icons_added( cult_mind );
				cult_mind.current.WriteMsg( "<span class='userdanger'>You are a member of the cult!</span>" );
				this.memorize_cult_objectives( cult_mind );
			}
			base.post_setup( report );
			return false;
		}

		// Function from file: cult.dm
		public override bool pre_setup(  ) {
			double cultists_number = 0;
			dynamic cultist = null;

			
			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				this.restricted_jobs.Add( "Assistant" );
			}
			this.recommended_enemies = Num13.Floor( this.num_players() / 8 ) + 1;
			this.orbs_needed = this.recommended_enemies;

			foreach (dynamic _a in Lang13.IterateRange( 1, this.recommended_enemies )) {
				cultists_number = _a;
				

				if ( !( this.antag_candidates.len != 0 ) ) {
					break;
				}
				cultist = Rand13.PickFromTable( this.antag_candidates );
				this.antag_candidates.Remove( cultist );
				this.cult.Add( cultist );
				cultist.special_role = "Cultist";
				cultist.restricted_roles = this.restricted_jobs;
				GlobalFuncs.log_game( "" + cultist.key + " (ckey) has been selected as a cultist" );
			}
			return this.cult.len >= this.required_enemies;
		}

		// Function from file: cult.dm
		public override void announce(  ) {
			Game13.WriteMsg( "<B>The current game mode is - Cult!</B>" );
			Game13.WriteMsg( "<B>Some crewmembers are attempting to start a cult!<BR>\nCultists - summon the elder god. Sacrifice crewmembers and turn them into constructs. Remember - there is no you, there is only the cult.<BR>\nPersonnel - Do not let the cult succeed in its mission. Deal with the cultists and any constructs that they might summon.</B>" );
			return;
		}

	}

}