// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Screwdriver : Obj_Item_Weapon {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 64;
			this.slot_flags = 512;
			this.force = 5;
			this.w_class = 1;
			this.throwforce = 5;
			this.throw_speed = 3;
			this.throw_range = 5;
			this.materials = new ByTable().Set( "$metal", 75 );
			this.attack_verb = new ByTable(new object [] { "stabbed" });
			this.hitsound = "sound/weapons/bladeslice.ogg";
			this.icon_state = "screwdriver";
		}

		// Function from file: tools.dm
		public Obj_Item_Weapon_Screwdriver ( dynamic loc = null, string param_color = null ) : base( (object)(loc) ) {
			
			if ( !Lang13.Bool( param_color ) ) {
				param_color = Rand13.Pick(new object [] { "red", "blue", "purple", "brown", "green", "cyan", "yellow" });
			}

			switch ((string)( param_color )) {
				case "red":
					this.icon_state = "screwdriver2";
					this.item_state = "screwdriver";
					break;
				case "blue":
					this.icon_state = "screwdriver";
					this.item_state = "screwdriver_blue";
					break;
				case "purple":
					this.icon_state = "screwdriver3";
					this.item_state = "screwdriver_purple";
					break;
				case "brown":
					this.icon_state = "screwdriver4";
					this.item_state = "screwdriver_brown";
					break;
				case "green":
					this.icon_state = "screwdriver5";
					this.item_state = "screwdriver_green";
					break;
				case "cyan":
					this.icon_state = "screwdriver6";
					this.item_state = "screwdriver_cyan";
					break;
				case "yellow":
					this.icon_state = "screwdriver7";
					this.item_state = "screwdriver_yellow";
					break;
			}

			if ( Rand13.PercentChance( 75 ) ) {
				this.pixel_y = Rand13.Int( 0, 16 );
			}
			return;
		}

		// Function from file: tools.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( !( M is Mob_Living_Carbon ) ) {
				return base.attack( (object)(M), (object)(user), def_zone );
			}

			if ( user.zone_sel.selecting != "eyes" && user.zone_sel.selecting != "head" ) {
				return base.attack( (object)(M), (object)(user), def_zone );
			}

			if ( Lang13.Bool( user.disabilities & 256 ) && Rand13.PercentChance( 50 ) ) {
				M = user;
			}
			this.eyestab( M, user ); return false;
		}

		// Function from file: tools.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( Rand13.Pick(new object [] { new Txt( "<span class='suicide'>" ).item( user ).str( " is stabbing the " ).item( this.name ).str( " into " ).his_her_its_their().str( " temple! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), new Txt( "<span class='suicide'>" ).item( user ).str( " is stabbing the " ).item( this.name ).str( " into " ).his_her_its_their().str( " heart! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() }) );
			return 1;
		}

	}

}