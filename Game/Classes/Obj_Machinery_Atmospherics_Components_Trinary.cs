// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Trinary : Obj_Machinery_Atmospherics_Components {

		public bool flipped = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.initialize_directions = 11;
			this.device_type = 3;
			this.icon = "icons/obj/atmospherics/components/trinary_devices.dmi";
		}

		public Obj_Machinery_Atmospherics_Components_Trinary ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: trinary_base.dm
		public override void atmosinit( ByTable node_connects = null ) {
			int node1_connect = 0;
			int node2_connect = 0;
			int node3_connect = 0;
			ByTable node_connects2 = null;

			node1_connect = Num13.Rotate( this.dir, -180 );
			node2_connect = Num13.Rotate( this.dir, -90 );
			node3_connect = this.dir;

			if ( this.flipped ) {
				node1_connect = Num13.Rotate( node1_connect, 180 );
				node3_connect = Num13.Rotate( node3_connect, 180 );
			}
			node_connects2 = new ByTable(new object [] { node1_connect, node2_connect, node3_connect });
			base.atmosinit( node_connects2 );
			return;
		}

		// Function from file: trinary_base.dm
		public override void SetInitDirections(  ) {
			
			switch ((int)( this.dir )) {
				case 1:
					this.initialize_directions = 7;
					break;
				case 2:
					this.initialize_directions = 11;
					break;
				case 4:
					this.initialize_directions = 14;
					break;
				case 8:
					this.initialize_directions = 13;
					break;
			}
			return;
		}

	}

}