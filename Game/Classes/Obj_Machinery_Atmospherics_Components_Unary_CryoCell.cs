// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_CryoCell : Obj_Machinery_Atmospherics_Components_Unary {

		public bool? on = false;
		public dynamic temperature_archived = null;
		public dynamic beaker = null;
		public int next_trans = 0;
		public int current_heat_capacity = 50;
		public double efficiency = 1;
		public bool autoEject = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/cryogenics.dmi";
			this.icon_state = "cell-off";
			this.layer = 4;
		}

		// Function from file: cryo.dm
		public Obj_Machinery_Atmospherics_Components_Unary_CryoCell ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.initialize_directions = this.dir;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_CryoTube( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			return;
		}

		// Function from file: cryo.dm
		public void expel_gas(  ) {
			GasMixture air_contents = null;
			GasMixture expel_gas = null;
			double remove_amount = 0;

			air_contents = this.airs[1];

			if ( air_contents.total_moles() < 1 ) {
				return;
			}
			expel_gas = new GasMixture();
			remove_amount = air_contents.total_moles() / 100;
			expel_gas = air_contents.remove( remove_amount );
			expel_gas.temperature = 293.41;
			this.loc.assume_air( expel_gas );
			this.air_update_turf();
			return;
		}

		// Function from file: cryo.dm
		public void heat_gas_contents(  ) {
			GasMixture air_contents = null;
			double air_heat_capacity = 0;
			double combined_heat_capacity = 0;
			double combined_energy = 0;

			air_contents = this.airs[1];

			if ( air_contents.total_moles() < 1 ) {
				return;
			}
			air_heat_capacity = air_contents.heat_capacity();
			combined_heat_capacity = this.current_heat_capacity + air_heat_capacity;

			if ( combined_heat_capacity > 0 ) {
				combined_energy = this.current_heat_capacity * 293.41 + air_heat_capacity * Convert.ToDouble( air_contents.temperature );
				air_contents.temperature = combined_energy / combined_heat_capacity;
			}
			return;
		}

		// Function from file: cryo.dm
		public void process_occupant(  ) {
			GasMixture air_contents = null;
			double heal_brute = 0;
			double heal_fire = 0;

			air_contents = this.airs[1];

			if ( !( this.on == true ) ) {
				return;
			}

			if ( air_contents.total_moles() < 10 ) {
				return;
			}

			if ( Lang13.Bool( this.occupant ) ) {
				
				if ( Convert.ToInt32( this.occupant.stat ) == 2 || Convert.ToDouble( this.occupant.health ) >= 100 ) {
					this.occupant.bodytemperature = 273.41;
					return;
				}
				this.occupant.bodytemperature += ( air_contents.temperature - this.occupant.bodytemperature ) * this.current_heat_capacity * 2 / ( this.current_heat_capacity + air_contents.heat_capacity() );
				this.occupant.bodytemperature = Num13.MaxInt( Convert.ToInt32( this.occupant.bodytemperature ), Convert.ToInt32( air_contents.temperature ) );

				if ( Convert.ToDouble( this.occupant.bodytemperature ) < 273.41 ) {
					this.occupant.sleeping = Num13.MaxInt( ((int)( 5 / this.efficiency )), ((int)( 1 / Convert.ToDouble( this.occupant.bodytemperature ) * 2000 / this.efficiency )) );
					((Mob)this.occupant).Paralyse( Num13.MaxInt( ((int)( 5 / this.efficiency )), ((int)( 1 / Convert.ToDouble( this.occupant.bodytemperature ) * 3000 / this.efficiency )) ) );

					if ( ( air_contents.oxygen ??0) > 2 ) {
						
						if ( Lang13.Bool( ((Mob_Living)this.occupant).getOxyLoss() ) ) {
							((Mob_Living)this.occupant).adjustOxyLoss( -1 );
						}
					} else {
						((Mob_Living)this.occupant).adjustOxyLoss( -1 );
					}

					if ( Convert.ToDouble( this.occupant.bodytemperature ) < 225 ) {
						
						if ( Lang13.Bool( ((Mob_Living)this.occupant).getToxLoss() ) ) {
							((Mob_Living)this.occupant).adjustToxLoss( Num13.MaxInt( ((int)( -this.efficiency )), ((int)( Math.Pow( this.efficiency, 2 ) * -20 / Convert.ToDouble( ((Mob_Living)this.occupant).getToxLoss() ) )) ) );
						}
						heal_brute = ( ((Mob_Living)this.occupant).getBruteLoss() != 0 ? Num13.MinInt( ((int)( this.efficiency )), ((int)( Math.Pow( this.efficiency, 2 ) * 20 / ((Mob_Living)this.occupant).getBruteLoss() )) ) : 0 );
						heal_fire = ( ((Mob_Living)this.occupant).getFireLoss() != 0 ? Num13.MinInt( ((int)( this.efficiency )), ((int)( Math.Pow( this.efficiency, 2 ) * 20 / ((Mob_Living)this.occupant).getFireLoss() )) ) : 0 );
						((Mob_Living)this.occupant).heal_organ_damage( heal_brute, heal_fire );
					}
				}

				if ( Lang13.Bool( this.beaker ) && this.next_trans == 0 ) {
					((Reagents)this.beaker.reagents).trans_to( this.occupant, 1, 10 );
					((Reagents)this.beaker.reagents).reaction( this.occupant, GlobalVars.VAPOR );
				}
			}
			this.next_trans++;

			if ( this.next_trans == 10 ) {
				this.next_trans = 0;
			}
			return;
		}

		// Function from file: cryo.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: cryo.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.panel_open == true ) {
				this.icon_state = "cell-o";
				return null;
			}

			if ( this.state_open ) {
				this.icon_state = "cell-open";
				return null;
			}

			if ( this.on == true && this.is_operational() ) {
				
				if ( Lang13.Bool( this.occupant ) ) {
					this.icon_state = "cell-occupied";
				} else {
					this.icon_state = "cell-on";
				}
			} else {
				this.icon_state = "cell-off";
			}
			return null;
		}

		// Function from file: cryo.dm
		public override dynamic close_machine( Ent_Static target = null ) {
			
			if ( this.state_open && !( this.panel_open == true ) ) {
				this.layer = 4;
				base.close_machine( target );
				return this.occupant;
			}
			return null;
		}

		// Function from file: cryo.dm
		public override bool open_machine(  ) {
			
			if ( !this.state_open && !( this.panel_open == true ) ) {
				this.on = false;
				this.layer = 3;

				if ( Lang13.Bool( this.occupant ) ) {
					this.occupant.bodytemperature = Num13.MaxInt( 261, Num13.MinInt( Convert.ToInt32( this.occupant.bodytemperature ), 360 ) );
				}
				base.open_machine();

				if ( Lang13.Bool( this.beaker ) ) {
					this.beaker.loc = this;
				}
			}
			return false;
		}

		// Function from file: cryo.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_ReagentContainers_Glass ) {
				
				if ( user is Mob_Living_Silicon_Robot ) {
					return null;
				}

				if ( Lang13.Bool( this.beaker ) ) {
					user.WriteMsg( "<span class='warning'>A beaker is already loaded into " + this + "!</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				this.beaker = A;
				A.loc = this;
				((Ent_Static)user).visible_message( "" + user + " places " + A + " in " + this + ".", "<span class='notice'>You place " + A + " in " + this + ".</span>" );
			}

			if ( !( this.on == true || Lang13.Bool( this.occupant ) || this.state_open ) ) {
				
				if ( this.default_deconstruction_screwdriver( user, "cell-o", "cell-off", A ) ) {
					return null;
				}
			}

			if ( this.default_change_direction_wrench( user, A ) ) {
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( this.default_pry_open( A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );
			return null;
		}

		// Function from file: cryo.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _a = action; // Was a switch-case, sorry for the mess.
			if ( _a=="power" ) {
				
				if ( this.on == true ) {
					this.on = GlobalVars.FALSE;
				} else if ( !this.state_open ) {
					this.on = GlobalVars.TRUE;
				}
			} else if ( _a=="door" ) {
				
				if ( this.state_open ) {
					this.close_machine();
				} else {
					this.open_machine();
				}
			} else if ( _a=="autoeject" ) {
				this.autoEject = !this.autoEject;
			} else if ( _a=="ejectbeaker" ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					this.beaker.loc = Map13.GetStep( this.loc, ((int)( GlobalVars.SOUTH )) );
					this.beaker = null;
				}
			}
			this.update_icon();
			return true;
		}

		// Function from file: cryo.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			dynamic air_contents = null;
			ByTable data = null;
			ByTable occupantData = null;
			ByTable beakerContents = null;
			Reagent R = null;

			air_contents = this.airs[1];
			data = new ByTable();
			data["isOperating"] = this.on;
			data["hasOccupant"] = ( Lang13.Bool( this.occupant ) ? true : false );
			data["autoEject"] = this.autoEject;
			occupantData = new ByTable();

			if ( !Lang13.Bool( this.occupant ) ) {
				occupantData["name"] = null;
				occupantData["stat"] = null;
				occupantData["health"] = null;
				occupantData["maxHealth"] = null;
				occupantData["minHealth"] = null;
				occupantData["bruteLoss"] = null;
				occupantData["oxyLoss"] = null;
				occupantData["toxLoss"] = null;
				occupantData["fireLoss"] = null;
				occupantData["bodyTemperature"] = null;
			} else {
				occupantData["name"] = this.occupant.name;
				occupantData["stat"] = this.occupant.stat;
				occupantData["health"] = this.occupant.health;
				occupantData["maxHealth"] = this.occupant.maxHealth;
				occupantData["minHealth"] = GlobalVars.config.health_threshold_dead;
				occupantData["bruteLoss"] = ((Mob_Living)this.occupant).getBruteLoss();
				occupantData["oxyLoss"] = ((Mob_Living)this.occupant).getOxyLoss();
				occupantData["toxLoss"] = ((Mob_Living)this.occupant).getToxLoss();
				occupantData["fireLoss"] = ((Mob_Living)this.occupant).getFireLoss();
				occupantData["bodyTemperature"] = this.occupant.bodytemperature;
			}
			data["occupant"] = occupantData;
			data["isOpen"] = this.state_open;
			data["cellTemperature"] = Num13.Floor( Convert.ToDouble( air_contents.temperature ) );
			data["isBeakerLoaded"] = ( Lang13.Bool( this.beaker ) ? true : false );
			beakerContents = new ByTable( 0 );

			if ( Lang13.Bool( this.beaker ) && Lang13.Bool( this.beaker.reagents ) && Lang13.Bool( this.beaker.reagents.reagent_list.len ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.beaker.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					beakerContents.Add( new ByTable(new object [] { new ByTable().Set( "name", R.name ).Set( "volume", R.volume ) }) );
				}
			}
			data["beakerContents"] = beakerContents;
			return data;
		}

		// Function from file: cryo.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.notcontained_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "cryo", this.name, 400, 550, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: cryo.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( this.panel_open == true ) {
				return null;
			}
			this.ui_interact( user );
			return null;
		}

		// Function from file: cryo.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) | !Lang13.Bool( a ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: cryo.dm
		public override double examine( dynamic user = null ) {
			ByTable otherstuff = null;
			Ent_Dynamic floater = null;

			base.examine( (object)(user) );
			otherstuff = this.contents - this.beaker;

			if ( otherstuff.len > 0 ) {
				user.WriteMsg( "You can just about make out some loose objects floating in the murk:" );

				foreach (dynamic _a in Lang13.Enumerate( otherstuff, typeof(Ent_Dynamic) )) {
					floater = _a;
					
					user.WriteMsg( new Txt().icon( floater ).str( " " ).item( floater.name ).ToString() );
				}
			} else {
				user.WriteMsg( "Seems empty." );
			}
			return 0;
		}

		// Function from file: cryo.dm
		public override void container_resist(  ) {
			Task13.User.WriteMsg( "<span class='notice'>You struggle inside the cryotube, kicking the release with your foot.</span>" );
			Task13.Sleep( 150 );

			if ( !( this != null ) || !( Task13.User != null ) || !Lang13.Bool( this.occupant ) && !( this.contents.Find( Task13.User ) != 0 ) ) {
				return;
			}
			this.open_machine();
			return;
		}

		// Function from file: cryo.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			return false;
		}

		// Function from file: cryo.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			
			if ( Lang13.Bool( user.stat ) || Lang13.Bool( user.lying ) || !this.Adjacent( user ) || !O.Adjacent( user ) || !( O is Mob_Living_Carbon ) ) {
				return false;
			}
			this.close_machine( O );
			return false;
		}

		// Function from file: cryo.dm
		public override int? process( dynamic seconds = null ) {
			base.process( (object)(seconds) );

			if ( Lang13.Bool( this.occupant ) && Convert.ToDouble( this.occupant.health ) >= 100 ) {
				this.on = false;
				GlobalFuncs.playsound( this.loc, "sound/machines/ding.ogg", 50, 1 );

				if ( this.autoEject ) {
					this.open_machine();
				}
			}

			if ( !Lang13.Bool( this.nodes[1] ) || !this.is_operational() ) {
				return null;
			}

			if ( Lang13.Bool( this.airs[1] ) ) {
				
				if ( this.on == true && Lang13.Bool( this.occupant ) ) {
					this.process_occupant();
				}
				this.expel_gas();
			}
			return 1;
		}

		// Function from file: cryo.dm
		public override int process_atmos(  ) {
			dynamic air_contents = null;

			base.process_atmos();
			air_contents = this.airs[1];

			if ( Lang13.Bool( air_contents ) ) {
				this.temperature_archived = air_contents.temperature;
				this.heat_gas_contents();
			}

			if ( Math.Abs( Convert.ToDouble( this.temperature_archived - air_contents.temperature ) ) > 1 ) {
				this.update_parents();
			}
			return 0;
		}

		// Function from file: cryo.dm
		public override dynamic Destroy(  ) {
			Ent_Static T = null;

			T = this.loc;
			T.contents.Add( this.contents );

			if ( Lang13.Bool( this.beaker ) ) {
				this.beaker.loc = Map13.GetStep( this.loc, ((int)( GlobalVars.SOUTH )) );
			}
			this.beaker = null;
			return base.Destroy();
		}

		// Function from file: cryo.dm
		public override void RefreshParts(  ) {
			dynamic C = null;
			Obj_Item_Weapon_StockParts_MatterBin M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _a;
				
				C += M.rating;
			}
			this.current_heat_capacity = Convert.ToInt32( C * 50 );
			this.efficiency = Convert.ToDouble( C );
			return;
		}

		// Function from file: cryo.dm
		public override void construction( dynamic pipe_type = null, dynamic obj_color = null ) {
			base.construction( this.dir, this.dir );
			return;
		}

	}

}