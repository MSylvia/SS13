// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Objective : Game_Data {

		public dynamic owner = null;
		public dynamic explanation_text = "Nothing";
		public dynamic target = null;
		public double? target_amount = 0;
		public bool completed = false;
		public int dangerrating = 0;
		public bool martyr_compatible = false;
		public string required_role = null;
		public bool randomgen = true;
		public string error_text = "";

		// Function from file: objective.dm
		public Objective ( string text = null ) {
			
			if ( Lang13.Bool( text ) ) {
				this.explanation_text = text;
			}
			return;
		}

		// Function from file: objective.dm
		public virtual void give_special_equipment(  ) {
			return;
		}

		// Function from file: objective.dm
		public virtual void update_explanation_text(  ) {
			return;
		}

		// Function from file: objective.dm
		public virtual dynamic find_target_by_role( string role = null, bool? role_type = null, bool? invert = null ) {
			role_type = role_type ?? false;
			invert = invert ?? false;

			Mind possible_target = null;
			int is_role = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
				possible_target = _a;
				

				if ( possible_target != this.owner && possible_target.current is Mob_Living_Carbon_Human ) {
					is_role = 0;

					if ( role_type == true ) {
						
						if ( possible_target.special_role == role ) {
							is_role++;
						}
					} else if ( possible_target.assigned_role == role ) {
						is_role++;
					}

					if ( invert == true ) {
						
						if ( is_role != 0 ) {
							continue;
						}
						this.target = possible_target;
						break;
					} else if ( is_role != 0 ) {
						this.target = possible_target;
						break;
					}
				}
			}
			this.update_explanation_text();
			return null;
		}

		// Function from file: objective.dm
		public dynamic find_target_admin(  ) {
			this.target = Interface13.Input( "Select target:", "Objective target", null, null, this.find_possible_targets(), InputType.Null | InputType.Any );
			return this.target;
		}

		// Function from file: objective.dm
		public virtual dynamic find_target(  ) {
			ByTable possible_targets = null;

			possible_targets = this.find_possible_targets();

			if ( possible_targets.len > 0 ) {
				this.target = Rand13.PickFromTable( possible_targets );
			}
			this.update_explanation_text();
			return this.target;
		}

		// Function from file: objective.dm
		public virtual ByTable find_possible_targets(  ) {
			ByTable possible_targets = null;
			Mind possible_target = null;

			possible_targets = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
				possible_target = _a;
				

				if ( possible_target != this.owner && possible_target.current is Mob_Living_Carbon_Human && Convert.ToInt32( possible_target.current.stat ) != 2 && this.is_unique_objective( possible_target ) ) {
					possible_targets.Add( possible_target );
				}
			}
			return possible_targets;
		}

		// Function from file: objective.dm
		public virtual dynamic get_target(  ) {
			return this.target;
		}

		// Function from file: objective.dm
		public bool is_unique_objective( dynamic possible_target = null ) {
			Objective O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.owner.objectives, typeof(Objective) )) {
				O = _a;
				

				if ( Lang13.Bool( ((dynamic)this.type).IsInstanceOfType( O ) ) && O.get_target() == possible_target ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: objective.dm
		public virtual bool extra_prep(  ) {
			return true;
		}

		// Function from file: objective.dm
		public virtual int check_completion(  ) {
			return this.completed ?1:0;
		}

	}

}