// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Reagent_Toxin_Acid : Reagent_Toxin {

		public int acidpwr = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Sulphuric acid";
			this.id = "sacid";
			this.description = "A strong mineral acid with the molecular formula H2SO4.";
			this.color = "#DB5008";
			this.toxpwr = 1;
		}

		// Function from file: toxin_reagents.dm
		public override void reaction_turf( dynamic T = null, double? volume = null ) {
			Obj O = null;

			
			if ( !( T is Tile ) ) {
				return;
			}
			volume = Num13.Round( volume ??0, 0.1 );

			foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj) )) {
				O = _a;
				
				O.acid_act( this.acidpwr, volume );
			}
			return;
		}

		// Function from file: toxin_reagents.dm
		public override bool reaction_obj( dynamic O = null, double? volume = null ) {
			
			if ( O.loc is Mob ) {
				return false;
			}
			volume = Num13.Round( volume ??0, 0.1 );
			((Ent_Static)O).acid_act( this.acidpwr, volume );
			return false;
		}

		// Function from file: toxin_reagents.dm
		public override double reaction_mob( dynamic M = null, int? method = null, double? reac_volume = null, bool? show_message = null, dynamic touch_protection = null ) {
			method = method ?? GlobalVars.TOUCH;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return 0;
			}
			reac_volume = Num13.Round( reac_volume ??0, 0.1 );

			if ( method == GlobalVars.INGEST ) {
				((Mob_Living)M).adjustBruteLoss( Num13.MinInt( ((int)( ( this.toxpwr ??0) * 6 )), ((int)( ( reac_volume ??0) * ( this.toxpwr ??0) )) ) );
				return 0;
			}

			if ( method == GlobalVars.INJECT ) {
				((Mob_Living)M).adjustBruteLoss( Num13.MinInt( ((int)( ( this.toxpwr ??0) * 6 )), ((int)( ( reac_volume ??0) * ( this.toxpwr ??0) )) ) * 1.5 );
				return 0;
			}
			((Ent_Static)M).acid_act( this.acidpwr, this.toxpwr, reac_volume );
			return 0;
		}

	}

}