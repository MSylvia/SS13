// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Grenade_Barrier : Obj_Item_Weapon_Grenade {

		public string mode = "single";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.action_button_name = "Toggle Barrier Spread";
			this.icon_state = "flashbang";
		}

		public Obj_Item_Weapon_Grenade_Barrier ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: deployable.dm
		public override void ui_action_click(  ) {
			this.toggle_mode( Task13.User );
			return;
		}

		// Function from file: deployable.dm
		public override void prime(  ) {
			Tile target_turf = null;
			Tile target_turf2 = null;
			Tile target_turf3 = null;
			Tile target_turf22 = null;

			new Obj_Structure_Barricade_Security( GlobalFuncs.get_turf( this.loc ) );

			switch ((string)( this.mode )) {
				case "vertical":
					target_turf = Map13.GetStep( this, ((int)( GlobalVars.NORTH )) );

					if ( !GlobalFuncs.is_blocked_turf( target_turf ) ) {
						new Obj_Structure_Barricade_Security( target_turf );
					}
					target_turf2 = Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) );

					if ( !GlobalFuncs.is_blocked_turf( target_turf2 ) ) {
						new Obj_Structure_Barricade_Security( target_turf2 );
					}
					break;
				case "horizontal":
					target_turf3 = Map13.GetStep( this, ((int)( GlobalVars.EAST )) );

					if ( !GlobalFuncs.is_blocked_turf( target_turf3 ) ) {
						new Obj_Structure_Barricade_Security( target_turf3 );
					}
					target_turf22 = Map13.GetStep( this, ((int)( GlobalVars.WEST )) );

					if ( !GlobalFuncs.is_blocked_turf( target_turf22 ) ) {
						new Obj_Structure_Barricade_Security( target_turf22 );
					}
					break;
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: deployable.dm
		public void toggle_mode( Mob user = null ) {
			
			switch ((string)( this.mode )) {
				case "single":
					this.mode = "vertical";
					break;
				case "vertical":
					this.mode = "horizontal";
					break;
				case "horizontal":
					this.mode = "single";
					break;
			}
			user.WriteMsg( "" + this + " is now in " + this.mode + " mode." );
			return;
		}

		// Function from file: deployable.dm
		public override bool AltClick( Mob user = null ) {
			this.toggle_mode( user );
			return false;
		}

	}

}