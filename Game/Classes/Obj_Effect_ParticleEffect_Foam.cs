// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_ParticleEffect_Foam : Obj_Effect_ParticleEffect {

		public int amount = 3;
		public int metal = 0;
		public int lifetime = 6;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon_state = "foam";
			this.layer = 2.5;
		}

		// Function from file: effects_foam.dm
		public Obj_Effect_ParticleEffect_Foam ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( 1000 );
			GlobalVars.SSobj.processing.Or( this );
			GlobalFuncs.playsound( this, "sound/effects/bubbles2.ogg", 80, 1, -3 );
			return;
		}

		// Function from file: effects_foam.dm
		public override dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			
			if ( Rand13.PercentChance( Num13.MaxInt( 0, Convert.ToInt32( exposed_temperature - 475 ) ) ) ) {
				this.kill_foam();
			}
			return null;
		}

		// Function from file: effects_foam.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic M = null;

			
			if ( O is Mob_Living_Carbon ) {
				M = O;
				((dynamic)M).slip( 5, 2, this );
			}
			return null;
		}

		// Function from file: effects_foam.dm
		public override int? process( dynamic seconds = null ) {
			double? fraction = null;
			Obj O = null;
			double hit = 0;
			Mob_Living L = null;
			dynamic T = null;

			this.lifetime--;

			if ( this.lifetime < 1 ) {
				this.kill_foam();
				return null;
			}
			fraction = 1 / Convert.ToDouble( Lang13.Initial( this, "lifetime" ) );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 0 ), typeof(Obj) )) {
				O = _a;
				

				if ( O.type == this.type ) {
					continue;
				}
				this.reagents.reaction( O, GlobalVars.VAPOR, fraction );
			}
			hit = 0;

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this, 0 ), typeof(Mob_Living) )) {
				L = _b;
				
				hit += this.foam_mob( L ) ?1:0;
			}

			if ( hit != 0 ) {
				this.lifetime++;
			}
			T = GlobalFuncs.get_turf( this );
			this.reagents.reaction( T, GlobalVars.VAPOR, fraction );

			if ( --this.amount < 0 ) {
				return null;
			}
			this.spread_foam();
			return null;
		}

		// Function from file: effects_foam.dm
		public void spread_foam(  ) {
			dynamic t_loc = null;
			dynamic T = null;
			dynamic foundfoam = null;
			Mob_Living L = null;
			dynamic F = null;

			t_loc = GlobalFuncs.get_turf( this );

			foreach (dynamic _b in Lang13.Enumerate( ((Tile)t_loc).GetAtmosAdjacentTurfs() )) {
				T = _b;
				
				foundfoam = Lang13.FindIn( typeof(Obj_Effect_ParticleEffect_Foam), T );

				if ( Lang13.Bool( foundfoam ) ) {
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Mob_Living) )) {
					L = _a;
					
					this.foam_mob( L );
				}
				F = GlobalFuncs.PoolOrNew( this.type, T );
				F.amount = this.amount;
				this.reagents.copy_to( F, this.reagents.total_volume );
				F.color = this.color;
				F.metal = this.metal;
			}
			return;
		}

		// Function from file: effects_foam.dm
		public bool foam_mob( Mob_Living L = null ) {
			double? fraction = null;

			
			if ( this.lifetime < 1 ) {
				return false;
			}

			if ( !( L is Mob_Living ) ) {
				return false;
			}
			fraction = 1 / Convert.ToDouble( Lang13.Initial( this, "lifetime" ) );
			this.reagents.reaction( L, GlobalVars.VAPOR, fraction );
			this.lifetime--;
			return true;
		}

		// Function from file: effects_foam.dm
		public void kill_foam(  ) {
			Obj_Structure_Foamedmetal M = null;

			GlobalVars.SSobj.processing.Remove( this );

			if ( this.metal != 0 ) {
				M = new Obj_Structure_Foamedmetal( this.loc );
				M.metal = this.metal;
				M.updateicon();
			}
			Icon13.Flick( "" + this.icon_state + "-disolve", this );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return;
		}

		// Function from file: effects_foam.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSobj.processing.Remove( this );
			return base.Destroy();
		}

	}

}