// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Twohanded : Obj_Item_Weapon {

		public bool wielded = false;
		public int force_unwielded = 0;
		public int force_wielded = 0;
		public string wieldsound = null;
		public string unwieldsound = null;

		public Obj_Item_Weapon_Twohanded ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: twohanded.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			base.attack_self( (object)(user), (object)(flag), emp );

			if ( this.wielded ) {
				this.unwield( user );
			} else {
				this.wield( user );
			}
			return null;
		}

		// Function from file: twohanded.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			return null;
		}

		// Function from file: twohanded.dm
		public override bool dropped( dynamic user = null ) {
			dynamic O = null;

			
			if ( Lang13.Bool( user ) ) {
				O = ((Mob)user).get_inactive_hand();

				if ( O is Obj_Item_Weapon_Twohanded ) {
					((Obj_Item_Weapon_Twohanded)O).unwield( user );
				}
			}
			this.unwield( user ); return false;
		}

		// Function from file: twohanded.dm
		public override dynamic mob_can_equip( Mob M = null, dynamic slot = null, bool? disable_warning = null ) {
			
			if ( this.wielded ) {
				M.WriteMsg( "<span class='warning'>Unwield the " + this.name + " first!</span>" );
				return 0;
			}
			return base.mob_can_equip( M, (object)(slot), disable_warning );
		}

		// Function from file: twohanded.dm
		public virtual void wield( dynamic user = null ) {
			Obj_Item_Weapon_Twohanded_Offhand O = null;

			
			if ( this.wielded ) {
				return;
			}

			if ( user is Mob_Living_Carbon_Monkey ) {
				user.WriteMsg( "<span class='warning'>It's too heavy for you to wield fully.</span>" );
				return;
			}

			if ( Lang13.Bool( ((Mob)user).get_inactive_hand() ) ) {
				user.WriteMsg( "<span class='warning'>You need your other hand to be empty!</span>" );
				return;
			}
			this.wielded = true;

			if ( this.force_wielded != 0 ) {
				this.force = this.force_wielded;
			}
			this.name = "" + this.name + " (Wielded)";
			this.update_icon();

			if ( user is Mob_Living_Silicon_Robot ) {
				user.WriteMsg( "<span class='notice'>You dedicate your module to " + this.name + ".</span>" );
			} else {
				user.WriteMsg( "<span class='notice'>You grab the " + this.name + " with both hands.</span>" );
			}

			if ( Lang13.Bool( this.wieldsound ) ) {
				GlobalFuncs.playsound( this.loc, this.wieldsound, 50, 1 );
			}
			O = new Obj_Item_Weapon_Twohanded_Offhand( user );
			O.name = "" + this.name + " - offhand";
			O.desc = "Your second grip on the " + this.name;
			((Mob)user).put_in_inactive_hand( O );
			return;
		}

		// Function from file: twohanded.dm
		public virtual void unwield( dynamic user = null ) {
			int sf = 0;
			dynamic O = null;

			
			if ( !this.wielded || !Lang13.Bool( user ) ) {
				return;
			}
			this.wielded = false;

			if ( this.force_unwielded != 0 ) {
				this.force = this.force_unwielded;
			}
			sf = String13.FindIgnoreCase( this.name, " (Wielded)", 1, 0 );

			if ( sf != 0 ) {
				this.name = String13.SubStr( this.name, 1, sf );
			} else {
				this.name = "" + Lang13.Initial( this, "name" );
			}
			this.update_icon();

			if ( user is Mob_Living_Silicon_Robot ) {
				user.WriteMsg( "<span class='notice'>You free up your module.</span>" );
			} else if ( this is Obj_Item_Weapon_Twohanded_Required ) {
				user.WriteMsg( new Txt( "<span class='notice'>You drop " ).the( this.name ).item().str( ".</span>" ).ToString() );
			} else {
				user.WriteMsg( "<span class='notice'>You are now carrying the " + this.name + " with one hand.</span>" );
			}

			if ( Lang13.Bool( this.unwieldsound ) ) {
				GlobalFuncs.playsound( this.loc, this.unwieldsound, 50, 1 );
			}
			O = ((Mob)user).get_inactive_hand();

			if ( Lang13.Bool( O ) && O is Obj_Item_Weapon_Twohanded_Offhand ) {
				((Obj_Item_Weapon_Twohanded)O).unwield();
			}
			return;
		}

	}

}