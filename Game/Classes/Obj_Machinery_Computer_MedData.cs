// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_MedData : Obj_Machinery_Computer {

		public dynamic scan = null;
		public bool? authenticated = null;
		public dynamic rank = null;
		public double? screen = null;
		public Data_Record active1 = null;
		public Data_Record active2 = null;
		public dynamic a_id = null;
		public string temp = null;
		public bool? printing = null;
		public string sortBy = "name";
		public dynamic order = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "medcomp";
			this.icon_keyboard = "med_key";
			this.req_one_access = new ByTable(new object [] { 5, 4 });
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_MedData);
		}

		public Obj_Machinery_Computer_MedData ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: medical.dm
		public bool canUseMedicalRecordsConsole( Mob user = null, dynamic message = null, Data_Record record1 = null, Data_Record record2 = null ) {
			message = message ?? 1;

			
			if ( user != null ) {
				
				if ( Lang13.Bool( message ) ) {
					
					if ( this.authenticated == true ) {
						
						if ( user.canUseTopic( this ) ) {
							
							if ( !( record1 != null ) || record1 == this.active1 ) {
								
								if ( !( record2 != null ) || record2 == this.active2 ) {
									return true;
								}
							}
						}
					}
				}
			}
			return false;
		}

		// Function from file: medical.dm
		public override double emp_act( int severity = 0 ) {
			Data_Record R = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return 0;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
				R = _b;
				

				if ( Rand13.PercentChance( ((int)( 10 / severity )) ) ) {
					
					switch ((int)( Rand13.Int( 1, 6 ) )) {
						case 1:
							
							if ( Rand13.PercentChance( 10 ) ) {
								R.fields["name"] = GlobalFuncs.random_unique_lizard_name( R.fields["sex"], 1 );
							} else {
								R.fields["name"] = GlobalFuncs.random_unique_name( R.fields["sex"], 1 );
							}
							break;
						case 2:
							R.fields["sex"] = Rand13.Pick(new object [] { "Male", "Female" });
							break;
						case 3:
							R.fields["age"] = Rand13.Int( 17, 85 );
							break;
						case 4:
							R.fields["blood_type"] = GlobalFuncs.random_blood_type();
							break;
						case 5:
							R.fields["p_stat"] = Rand13.Pick(new object [] { "*Unconcious*", "Active", "Physically Unfit" });
							break;
						case 6:
							R.fields["m_stat"] = Rand13.Pick(new object [] { "*Insane*", "*Unstable*", "*Watch*", "Stable" });
							break;
					}
					continue;
				} else if ( Rand13.PercentChance( 1 ) ) {
					GlobalFuncs.qdel( R );
					continue;
				}
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: medical.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic _default = null;

			dynamic I = null;
			dynamic type = null;
			dynamic Dis = null;
			string AfS = null;
			dynamic M = null;
			Data_Record a1 = null;
			Data_Record a2 = null;
			dynamic t1 = null;
			dynamic t12 = null;
			string t13 = null;
			string t14 = null;
			string t15 = null;
			string t16 = null;
			string t17 = null;
			string t18 = null;
			string t19 = null;
			string t110 = null;
			string t111 = null;
			string t112 = null;
			string t113 = null;
			dynamic P = null;
			dynamic P2 = null;
			Data_Record R = null;
			Data_Record a22 = null;
			string t114 = null;
			int counter = 0;
			string t115 = null;
			Data_Record R2 = null;
			Data_Record E = null;
			Obj_Item_Weapon_Paper P3 = null;
			int counter2 = 0;

			_default = base.Topic( href, href_list, (object)(hsrc) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( !GlobalVars.data_core.general.Contains( this.active1 ) ) {
				this.active1 = null;
			}

			if ( !GlobalVars.data_core.medical.Contains( this.active2 ) ) {
				this.active2 = null;
			}

			if ( Task13.User.contents.Find( this ) != 0 || Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile || Task13.User is Mob_Living_Silicon || GlobalFuncs.IsAdminGhost( Task13.User ) ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["temp"] ) ) {
					this.temp = null;
				}

				if ( Lang13.Bool( href_list["scan"] ) ) {
					
					if ( Lang13.Bool( this.scan ) ) {
						
						if ( Task13.User is Mob_Living_Carbon_Human && !Lang13.Bool( Task13.User.get_active_hand() ) ) {
							Task13.User.put_in_hands( this.scan );
						} else {
							this.scan.loc = GlobalFuncs.get_turf( this );
						}
						this.scan = null;
					} else {
						I = Task13.User.get_active_hand();

						if ( I is Obj_Item_Weapon_Card_Id ) {
							
							if ( !Task13.User.drop_item() ) {
								return _default;
							}
							I.loc = this;
							this.scan = I;
						}
					}
				} else if ( Lang13.Bool( href_list["logout"] ) ) {
					this.authenticated = null;
					this.screen = null;
					this.active1 = null;
					this.active2 = null;
				} else if ( Lang13.Bool( href_list["choice"] ) ) {
					
					if ( href_list["choice"] == "Sorting" ) {
						
						if ( this.sortBy == href_list["sort"] ) {
							
							if ( this.order == 1 ) {
								this.order = -1;
							} else {
								this.order = 1;
							}
						} else {
							this.sortBy = href_list["sort"];
							this.order = Lang13.Initial( this, "order" );
						}
					}
				} else if ( Lang13.Bool( href_list["login"] ) ) {
					
					if ( Task13.User is Mob_Living_Silicon ) {
						this.active1 = null;
						this.active2 = null;
						this.authenticated = true;
						this.rank = "AI";
						this.screen = 1;
					} else if ( GlobalFuncs.IsAdminGhost( Task13.User ) ) {
						this.active1 = null;
						this.active2 = null;
						this.authenticated = true;
						this.rank = "Central Command";
						this.screen = 1;
					} else if ( this.scan is Obj_Item_Weapon_Card_Id ) {
						this.active1 = null;
						this.active2 = null;

						if ( this.check_access( this.scan ) ) {
							this.authenticated = Lang13.BoolNullable( this.scan.registered_name );
							this.rank = this.scan.assignment;
							this.screen = 1;
						}
					}
				}

				if ( this.authenticated == true ) {
					
					if ( Lang13.Bool( href_list["screen"] ) ) {
						this.screen = String13.ParseNumber( href_list["screen"] );

						if ( ( this.screen ??0) < 1 ) {
							this.screen = 1;
						}
						this.active1 = null;
						this.active2 = null;
					} else if ( Lang13.Bool( href_list["vir"] ) ) {
						type = href_list["vir"];
						Dis = Lang13.Call( type, 0 );
						AfS = "";

						foreach (dynamic _a in Lang13.Enumerate( Dis.viable_mobtypes )) {
							M = _a;
							
							AfS += " " + Lang13.Initial( M, "name" ) + ";";
						}
						this.temp = "<b>Name:</b> " + Dis.name + "\n<BR><b>Number of stages:</b> " + Dis.max_stages + "\n<BR><b>Spread:</b> " + Dis.spread_text + " Transmission\n<BR><b>Possible Cure:</b> " + ( Lang13.Bool( Dis.cure_text ) || Lang13.Bool( "none" ) ) + "\n<BR><b>Affected Lifeforms:</b>" + AfS + "\n<BR>\n<BR><b>Notes:</b> " + Dis.desc + "\n<BR>\n<BR><b>Severity:</b> " + Dis.severity;
					} else if ( Lang13.Bool( href_list["del_all"] ) ) {
						this.temp = new Txt( "Are you sure you wish to delete all records?<br>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;del_all2=1'>Yes</A><br>\n	<A href='?src=" ).Ref( this ).str( ";temp=1'>No</A><br>" ).ToString();
					} else if ( Lang13.Bool( href_list["del_all2"] ) ) {
						this.investigate_log( "" + Task13.User.name + " (" + Task13.User.key + ") has deleted all medical records.", "records" );
						GlobalVars.data_core.medical.Cut();
						this.temp = "All records deleted.";
					} else if ( Lang13.Bool( href_list["field"] ) ) {
						a1 = this.active1;
						a2 = this.active2;

						dynamic _b = href_list["field"]; // Was a switch-case, sorry for the mess.
						if ( _b=="fingerprint" ) {
							
							if ( this.active1 != null ) {
								t1 = GlobalFuncs.stripped_input( "Please input fingerprint hash:", "Med. records", this.active1.fields["fingerprint"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t1, a1 ) ) {
									return _default;
								}
								this.active1.fields["fingerprint"] = t1;
							}
						} else if ( _b=="sex" ) {
							
							if ( this.active1 != null ) {
								
								if ( this.active1.fields["sex"] == "Male" ) {
									this.active1.fields["sex"] = "Female";
								} else {
									this.active1.fields["sex"] = "Male";
								}
							}
						} else if ( _b=="age" ) {
							
							if ( this.active1 != null ) {
								t12 = Interface13.Input( "Please input age:", "Med. records", this.active1.fields["age"], null, null, InputType.Num );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t12, a1 ) ) {
									return _default;
								}
								this.active1.fields["age"] = t12;
							}
						} else if ( _b=="species" ) {
							
							if ( this.active1 != null ) {
								t13 = GlobalFuncs.stripped_input( "Please input species name", "Med. records", this.active1.fields["species"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t13, a1 ) ) {
									return _default;
								}
								this.active1.fields["species"] = t13;
							}
						} else if ( _b=="mi_dis" ) {
							
							if ( this.active2 != null ) {
								t14 = GlobalFuncs.stripped_input( "Please input minor disabilities list:", "Med. records", this.active2.fields["mi_dis"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t14, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["mi_dis"] = t14;
							}
						} else if ( _b=="mi_dis_d" ) {
							
							if ( this.active2 != null ) {
								t15 = GlobalFuncs.stripped_multiline_input( "Please summarize minor dis.:", "Med. records", this.active2.fields["mi_dis_d"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t15, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["mi_dis_d"] = t15;
							}
						} else if ( _b=="ma_dis" ) {
							
							if ( this.active2 != null ) {
								t16 = GlobalFuncs.stripped_input( "Please input major diabilities list:", "Med. records", this.active2.fields["ma_dis"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t16, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["ma_dis"] = t16;
							}
						} else if ( _b=="ma_dis_d" ) {
							
							if ( this.active2 != null ) {
								t17 = GlobalFuncs.stripped_multiline_input( "Please summarize major dis.:", "Med. records", this.active2.fields["ma_dis_d"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t17, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["ma_dis_d"] = t17;
							}
						} else if ( _b=="alg" ) {
							
							if ( this.active2 != null ) {
								t18 = GlobalFuncs.stripped_input( "Please state allergies:", "Med. records", this.active2.fields["alg"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t18, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["alg"] = t18;
							}
						} else if ( _b=="alg_d" ) {
							
							if ( this.active2 != null ) {
								t19 = GlobalFuncs.stripped_multiline_input( "Please summarize allergies:", "Med. records", this.active2.fields["alg_d"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t19, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["alg_d"] = t19;
							}
						} else if ( _b=="cdi" ) {
							
							if ( this.active2 != null ) {
								t110 = GlobalFuncs.stripped_input( "Please state diseases:", "Med. records", this.active2.fields["cdi"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t110, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["cdi"] = t110;
							}
						} else if ( _b=="cdi_d" ) {
							
							if ( this.active2 != null ) {
								t111 = GlobalFuncs.stripped_multiline_input( "Please summarize diseases:", "Med. records", this.active2.fields["cdi_d"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t111, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["cdi_d"] = t111;
							}
						} else if ( _b=="notes" ) {
							
							if ( this.active2 != null ) {
								t112 = GlobalFuncs.stripped_multiline_input( "Please summarize notes:", "Med. records", this.active2.fields["notes"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t112, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["notes"] = t112;
							}
						} else if ( _b=="p_stat" ) {
							
							if ( this.active1 != null ) {
								this.temp = new Txt( "<B>Physical Condition:</B><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;p_stat=deceased'>*Deceased*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;p_stat=unconscious'>*Unconscious*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;p_stat=active'>Active</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;p_stat=unfit'>Physically Unfit</A><BR>" ).ToString();
							}
						} else if ( _b=="m_stat" ) {
							
							if ( this.active1 != null ) {
								this.temp = new Txt( "<B>Mental Condition:</B><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;m_stat=insane'>*Insane*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;m_stat=unstable'>*Unstable*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;m_stat=watch'>*Watch*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;m_stat=stable'>Stable</A><BR>" ).ToString();
							}
						} else if ( _b=="blood_type" ) {
							
							if ( this.active2 != null ) {
								this.temp = new Txt( "<B>Blood Type:</B><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;blood_type=an'>A-</A> <A href='?src=" ).Ref( this ).str( ";temp=1;blood_type=ap'>A+</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;blood_type=bn'>B-</A> <A href='?src=" ).Ref( this ).str( ";temp=1;blood_type=bp'>B+</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;blood_type=abn'>AB-</A> <A href='?src=" ).Ref( this ).str( ";temp=1;blood_type=abp'>AB+</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;blood_type=on'>O-</A> <A href='?src=" ).Ref( this ).str( ";temp=1;blood_type=op'>O+</A><BR>" ).ToString();
							}
						} else if ( _b=="b_dna" ) {
							
							if ( this.active2 != null ) {
								t113 = GlobalFuncs.stripped_input( "Please input DNA hash:", "Med. records", this.active2.fields["b_dna"], null );

								if ( !this.canUseMedicalRecordsConsole( Task13.User, t113, null, a2 ) ) {
									return _default;
								}
								this.active2.fields["b_dna"] = t113;
							}
						} else if ( _b=="show_photo_front" ) {
							
							if ( this.active1 != null ) {
								
								if ( Lang13.Bool( this.active1.fields["photo_front"] ) ) {
									
									if ( this.active1.fields["photo_front"] is Obj_Item_Weapon_Photo ) {
										P = this.active1.fields["photo_front"];
										P.show( Task13.User );
									}
								}
							}
						} else if ( _b=="show_photo_side" ) {
							
							if ( this.active1 != null ) {
								
								if ( Lang13.Bool( this.active1.fields["photo_side"] ) ) {
									
									if ( this.active1.fields["photo_side"] is Obj_Item_Weapon_Photo ) {
										P2 = this.active1.fields["photo_side"];
										P2.show( Task13.User );
									}
								}
							}
						}
					} else if ( Lang13.Bool( href_list["p_stat"] ) ) {
						
						if ( this.active1 != null ) {
							
							dynamic _c = href_list["p_stat"]; // Was a switch-case, sorry for the mess.
							if ( _c=="deceased" ) {
								this.active1.fields["p_stat"] = "*Deceased*";
							} else if ( _c=="unconscious" ) {
								this.active1.fields["p_stat"] = "*Unconscious*";
							} else if ( _c=="active" ) {
								this.active1.fields["p_stat"] = "Active";
							} else if ( _c=="unfit" ) {
								this.active1.fields["p_stat"] = "Physically Unfit";
							}
						}
					} else if ( Lang13.Bool( href_list["m_stat"] ) ) {
						
						if ( this.active1 != null ) {
							
							dynamic _d = href_list["m_stat"]; // Was a switch-case, sorry for the mess.
							if ( _d=="insane" ) {
								this.active1.fields["m_stat"] = "*Insane*";
							} else if ( _d=="unstable" ) {
								this.active1.fields["m_stat"] = "*Unstable*";
							} else if ( _d=="watch" ) {
								this.active1.fields["m_stat"] = "*Watch*";
							} else if ( _d=="stable" ) {
								this.active1.fields["m_stat"] = "Stable";
							}
						}
					} else if ( Lang13.Bool( href_list["blood_type"] ) ) {
						
						if ( this.active2 != null ) {
							
							dynamic _e = href_list["blood_type"]; // Was a switch-case, sorry for the mess.
							if ( _e=="an" ) {
								this.active2.fields["blood_type"] = "A-";
							} else if ( _e=="bn" ) {
								this.active2.fields["blood_type"] = "B-";
							} else if ( _e=="abn" ) {
								this.active2.fields["blood_type"] = "AB-";
							} else if ( _e=="on" ) {
								this.active2.fields["blood_type"] = "O-";
							} else if ( _e=="ap" ) {
								this.active2.fields["blood_type"] = "A+";
							} else if ( _e=="bp" ) {
								this.active2.fields["blood_type"] = "B+";
							} else if ( _e=="abp" ) {
								this.active2.fields["blood_type"] = "AB+";
							} else if ( _e=="op" ) {
								this.active2.fields["blood_type"] = "O+";
							}
						}
					} else if ( Lang13.Bool( href_list["del_r"] ) ) {
						
						if ( this.active2 != null ) {
							this.temp = new Txt( "Are you sure you wish to delete the record (Medical Portion Only)?<br>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;del_r2=1'>Yes</A><br>\n	<A href='?src=" ).Ref( this ).str( ";temp=1'>No</A><br>" ).ToString();
						}
					} else if ( Lang13.Bool( href_list["del_r2"] ) ) {
						this.investigate_log( "" + Task13.User.name + " (" + Task13.User.key + ") has deleted the medical records for " + this.active1.fields["name"] + ".", "records" );

						if ( this.active2 != null ) {
							GlobalVars.data_core.medical.Remove( this.active2 );
							this.active2 = null;
						}
					} else if ( Lang13.Bool( href_list["d_rec"] ) ) {
						this.active1 = GlobalFuncs.find_record( "id", href_list["d_rec"], GlobalVars.data_core.general );

						if ( this.active1 != null ) {
							this.active2 = GlobalFuncs.find_record( "id", href_list["d_rec"], GlobalVars.data_core.medical );
						}

						if ( !( this.active2 != null ) ) {
							this.active1 = null;
						}
						this.screen = 4;
					} else if ( Lang13.Bool( href_list["new"] ) ) {
						
						if ( this.active1 is Data_Record && !( this.active2 is Data_Record ) ) {
							R = new Data_Record();
							R.fields["name"] = this.active1.fields["name"];
							R.fields["id"] = this.active1.fields["id"];
							R.name = "Medical Record #" + R.fields["id"];
							R.fields["blood_type"] = "Unknown";
							R.fields["b_dna"] = "Unknown";
							R.fields["mi_dis"] = "None";
							R.fields["mi_dis_d"] = "No minor disabilities have been diagnosed.";
							R.fields["ma_dis"] = "None";
							R.fields["ma_dis_d"] = "No major disabilities have been diagnosed.";
							R.fields["alg"] = "None";
							R.fields["alg_d"] = "No allergies have been detected in this patient.";
							R.fields["cdi"] = "None";
							R.fields["cdi_d"] = "No diseases have been diagnosed at the moment.";
							R.fields["notes"] = "No notes.";
							GlobalVars.data_core.medical.Add( R );
							this.active2 = R;
							this.screen = 4;
						}
					} else if ( Lang13.Bool( href_list["add_c"] ) ) {
						
						if ( !GlobalVars.data_core.medical.Contains( this.active2 ) ) {
							return _default;
						}
						a22 = this.active2;
						t114 = GlobalFuncs.stripped_multiline_input( "Add Comment:", "Med. records", null, null );

						if ( !this.canUseMedicalRecordsConsole( Task13.User, t114, null, a22 ) ) {
							return _default;
						}
						counter = 1;

						while (Lang13.Bool( this.active2.fields["com_" + counter] )) {
							counter++;
						}
						this.active2.fields["com_" + counter] = "Made by " + this.authenticated + " (" + this.rank + ") on " + GlobalFuncs.worldtime2text() + " " + String13.FormatTime( Game13.realtime, "MMM DD" ) + ", " + ( GlobalVars.year_integer + 540 ) + "<BR>" + t114;
					} else if ( Lang13.Bool( href_list["del_c"] ) ) {
						
						if ( this.active2 is Data_Record && Lang13.Bool( this.active2.fields["com_" + href_list["del_c"]] ) ) {
							this.active2.fields["com_" + href_list["del_c"]] = "<B>Deleted</B>";
						}
					} else if ( Lang13.Bool( href_list["search"] ) ) {
						t115 = GlobalFuncs.stripped_input( Task13.User, "Search String: (Name, DNA, or ID)", "Med. records" );

						if ( !this.canUseMedicalRecordsConsole( Task13.User, t115 ) ) {
							return _default;
						}
						this.active1 = null;
						this.active2 = null;
						t115 = String13.ToLower( t115 );

						foreach (dynamic _f in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
							R2 = _f;
							

							if ( String13.ToLower( R2.fields["name"] ) == t115 || t115 == String13.ToLower( R2.fields["id"] ) || t115 == String13.ToLower( R2.fields["b_dna"] ) ) {
								this.active2 = R2;
							}
						}

						if ( !( this.active2 != null ) ) {
							this.temp = "Could not locate record " + GlobalFuncs.sanitize( t115 ) + ".";
						} else {
							
							foreach (dynamic _g in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
								E = _g;
								

								if ( E.fields["name"] == this.active2.fields["name"] || E.fields["id"] == this.active2.fields["id"] ) {
									this.active1 = E;
								}
							}
							this.screen = 4;
						}
					} else if ( Lang13.Bool( href_list["print_p"] ) ) {
						
						if ( !( this.printing == true ) ) {
							this.printing = true;
							GlobalVars.data_core.medicalPrintCount++;
							GlobalFuncs.playsound( this.loc, "sound/items/poster_being_created.ogg", 100, 1 );
							Task13.Sleep( 30 );
							P3 = new Obj_Item_Weapon_Paper( this.loc );
							P3.info = "<CENTER><B>Medical Record - (MR-" + GlobalVars.data_core.medicalPrintCount + ")</B></CENTER><BR>";

							if ( GlobalVars.data_core.general.Contains( this.active1 ) ) {
								P3.info += "Name: " + this.active1.fields["name"] + " ID: " + this.active1.fields["id"] + "<BR>\nSex: " + this.active1.fields["sex"] + "<BR>\nAge: " + this.active1.fields["age"] + "<BR>";

								if ( GlobalVars.config.mutant_races ) {
									P3.info += "\nSpecies: " + this.active1.fields["species"] + "<BR>";
								}
								P3.info += "\nFingerprint: " + this.active1.fields["fingerprint"] + "<BR>\nPhysical Status: " + this.active1.fields["p_stat"] + "<BR>\nMental Status: " + this.active1.fields["m_stat"] + "<BR>";
							} else {
								P3.info += "<B>General Record Lost!</B><BR>";
							}

							if ( GlobalVars.data_core.medical.Contains( this.active2 ) ) {
								P3.info += "<BR>\n<CENTER><B>Medical Data</B></CENTER><BR>\nBlood Type: " + this.active2.fields["blood_type"] + "<BR>\nDNA: " + this.active2.fields["b_dna"] + "<BR>\n<BR>\nMinor Disabilities: " + this.active2.fields["mi_dis"] + "<BR>\nDetails: " + this.active2.fields["mi_dis_d"] + "<BR>\n<BR>\nMajor Disabilities: " + this.active2.fields["ma_dis"] + "<BR>\nDetails: " + this.active2.fields["ma_dis_d"] + "<BR>\n<BR>\nAllergies: " + this.active2.fields["alg"] + "<BR>\nDetails: " + this.active2.fields["alg_d"] + "<BR>\n<BR>\nCurrent Diseases: " + this.active2.fields["cdi"] + " (per disease info placed in log/comment section)<BR>\nDetails: " + this.active2.fields["cdi_d"] + "<BR>\n<BR>\nImportant Notes:<BR>\n	" + this.active2.fields["notes"] + "<BR>\n<BR>\n<CENTER><B>Comments/Log</B></CENTER><BR>";
								counter2 = 1;

								while (Lang13.Bool( this.active2.fields["com_" + counter2] )) {
									P3.info += "" + this.active2.fields["com_" + counter2] + "<BR>";
									counter2++;
								}
								P3.name = "MR-" + GlobalVars.data_core.medicalPrintCount + " '" + this.active1.fields["name"] + "'";
							} else {
								P3.info += "<B>Medical Record Lost!</B><BR>";
								P3.name = "MR-" + GlobalVars.data_core.medicalPrintCount + " '" + "Record Lost" + "'";
							}
							P3.info += "</TT>";
							this.printing = null;
						}
					}
				}
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return _default;
		}

		// Function from file: medical.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;
			Data_Record R = null;
			string blood_type = null;
			string b_dna = null;
			Data_Record E = null;
			string background = null;
			dynamic P1 = null;
			dynamic P2 = null;
			int counter = 0;
			dynamic Dt = null;
			dynamic Dis = null;
			dynamic bdat = null;
			Mob_Living_SimpleAnimal_Bot_Medbot M = null;
			dynamic bl = null;
			Browser popup = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}

			if ( Lang13.Bool( this.temp ) ) {
				dat = new Txt( "<TT>" ).item( this.temp ).str( "</TT><BR><BR><A href='?src=" ).Ref( this ).str( ";temp=1'>Clear Screen</A>" ).ToString();
			} else {
				dat = new Txt( "Confirm Identity: <A href='?src=" ).Ref( this ).str( ";scan=1'>" ).item( ( Lang13.Bool( this.scan ) ? "" + this.scan.name : "----------" ) ).str( "</A><HR>" ).ToString();

				if ( this.authenticated == true ) {
					
					switch ((double?)( this.screen )) {
						case 1:
							dat += new Txt( "\n<A href='?src=" ).Ref( this ).str( ";search=1'>Search Records</A>\n<BR><A href='?src=" ).Ref( this ).str( ";screen=2'>List Records</A>\n<BR>\n<BR><A href='?src=" ).Ref( this ).str( ";screen=5'>Virus Database</A>\n<BR><A href='?src=" ).Ref( this ).str( ";screen=6'>Medbot Tracking</A>\n<BR>\n<BR><A href='?src=" ).Ref( this ).str( ";screen=3'>Record Maintenance</A>\n<BR><A href='?src=" ).Ref( this ).str( ";logout=1'>{Log Out}</A><BR>\n" ).ToString();
							break;
						case 2:
							dat += new Txt( @"
</p>
<table style=""text-align:center;"" cellspacing=""0"" width=""100%"">
<tr>
<th>Records:</th>
</tr>
</table>
<table style=""text-align:center;"" border=""1"" cellspacing=""0"" width=""100%"">
<tr>
<th><A href='?src=" ).Ref( this ).str( ";choice=Sorting;sort=name'>Name</A></th>\n<th><A href='?src=" ).Ref( this ).str( ";choice=Sorting;sort=id'>ID</A></th>\n<th>Fingerprints (F) | DNA (D)</th>\n<th><A href='?src=" ).Ref( this ).str( ";choice=Sorting;sort=bloodtype'>Blood Type</A></th>\n<th>Physical Status</th>\n<th>Mental Status</th>\n</tr>" ).ToString();

							if ( !( GlobalVars.data_core.general == null ) ) {
								
								foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general, this.sortBy, this.order ), typeof(Data_Record) )) {
									R = _b;
									
									blood_type = "";
									b_dna = "";

									foreach (dynamic _a in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
										E = _a;
										

										if ( E.fields["name"] == R.fields["name"] && E.fields["id"] == R.fields["id"] ) {
											blood_type = E.fields["blood_type"];
											b_dna = E.fields["b_dna"];
										}
									}
									background = null;

									if ( R.fields["m_stat"] == "*Insane*" || R.fields["p_stat"] == "*Deceased*" ) {
										background = "'background-color:#990000;'";
									} else if ( R.fields["p_stat"] == "*Unconscious*" || R.fields["m_stat"] == "*Unstable*" ) {
										background = "'background-color:#CD6500;'";
									} else if ( R.fields["p_stat"] == "Physically Unfit" || R.fields["m_stat"] == "*Watch*" ) {
										background = "'background-color:#3BB9FF;'";
									} else {
										background = "'background-color:#4F7529;'";
									}
									dat += new Txt( "<tr style=" ).item( background ).str( "><td><A href='?src=" ).Ref( this ).str( ";d_rec=" ).item( R.fields["id"] ).str( "'>" ).item( R.fields["name"] ).str( "</a></td>" ).ToString();
									dat += "<td>" + R.fields["id"] + "</td>";
									dat += "<td><b>F:</b> " + R.fields["fingerprint"] + "<BR><b>D:</b> " + b_dna + "</td>";
									dat += "<td>" + blood_type + "</td>";
									dat += "<td>" + R.fields["p_stat"] + "</td>";
									dat += "<td>" + R.fields["m_stat"] + "</td></tr>";
								}
							}
							dat += "</table><hr width='75%' />";
							dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";screen=1'>Back</A>" ).ToString();
							break;
						case 3:
							dat += new Txt( "<B>Records Maintenance</B><HR>\n<A href='?src=" ).Ref( this ).str( ";back=1'>Backup To Disk</A><BR>\n<A href='?src=" ).Ref( this ).str( ";u_load=1'>Upload From Disk</A><BR>\n<A href='?src=" ).Ref( this ).str( ";del_all=1'>Delete All Records</A><BR>\n<BR>\n<A href='?src=" ).Ref( this ).str( ";screen=1'>Back</A>" ).ToString();
							break;
						case 4:
							dat += "<table><tr><td><b><font size='4'>Medical Record</font></b></td></tr>";

							if ( GlobalVars.data_core.general.Contains( this.active1 ) ) {
								
								if ( this.active1.fields["photo_front"] is Obj_Item_Weapon_Photo ) {
									P1 = this.active1.fields["photo_front"];
									Interface13.CacheBrowseResource( a, P1.img, "photo_front" );
								}

								if ( this.active1.fields["photo_side"] is Obj_Item_Weapon_Photo ) {
									P2 = this.active1.fields["photo_side"];
									Interface13.CacheBrowseResource( a, P2.img, "photo_side" );
								}
								dat += "<tr><td>Name:</td><td>" + this.active1.fields["name"] + "</td>";
								dat += new Txt( "<td><a href='?src=" ).Ref( this ).str( ";field=show_photo_front'><img src=photo_front height=80 width=80 border=4></a></td>" ).ToString();
								dat += new Txt( "<td><a href='?src=" ).Ref( this ).str( ";field=show_photo_side'><img src=photo_side height=80 width=80 border=4></a></td></tr>" ).ToString();
								dat += "<tr><td>ID:</td><td>" + this.active1.fields["id"] + "</td></tr>";
								dat += new Txt( "<tr><td>Sex:</td><td><A href='?src=" ).Ref( this ).str( ";field=sex'>&nbsp;" ).item( this.active1.fields["sex"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td>Age:</td><td><A href='?src=" ).Ref( this ).str( ";field=age'>&nbsp;" ).item( this.active1.fields["age"] ).str( "&nbsp;</A></td></tr>" ).ToString();

								if ( GlobalVars.config.mutant_races ) {
									dat += new Txt( "<tr><td>Species:</td><td><A href='?src=" ).Ref( this ).str( ";field=species'>&nbsp;" ).item( this.active1.fields["species"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								}
								dat += new Txt( "<tr><td>Fingerprint:</td><td><A href='?src=" ).Ref( this ).str( ";field=fingerprint'>&nbsp;" ).item( this.active1.fields["fingerprint"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td>Physical Status:</td><td><A href='?src=" ).Ref( this ).str( ";field=p_stat'>&nbsp;" ).item( this.active1.fields["p_stat"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td>Mental Status:</td><td><A href='?src=" ).Ref( this ).str( ";field=m_stat'>&nbsp;" ).item( this.active1.fields["m_stat"] ).str( "&nbsp;</A></td></tr>" ).ToString();
							} else {
								dat += "<tr><td>General Record Lost!</td></tr>";
							}
							dat += "<tr><td><br><b><font size='4'>Medical Data</font></b></td></tr>";

							if ( GlobalVars.data_core.medical.Contains( this.active2 ) ) {
								dat += new Txt( "<tr><td>Blood Type:</td><td><A href='?src=" ).Ref( this ).str( ";field=blood_type'>&nbsp;" ).item( this.active2.fields["blood_type"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td>DNA:</td><td><A href='?src=" ).Ref( this ).str( ";field=b_dna'>&nbsp;" ).item( this.active2.fields["b_dna"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td><br>Minor Disabilities:</td><td><br><A href='?src=" ).Ref( this ).str( ";field=mi_dis'>&nbsp;" ).item( this.active2.fields["mi_dis"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td>Details:</td><td><A href='?src=" ).Ref( this ).str( ";field=mi_dis_d'>&nbsp;" ).item( this.active2.fields["mi_dis_d"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td><br>Major Disabilities:</td><td><br><A href='?src=" ).Ref( this ).str( ";field=ma_dis'>&nbsp;" ).item( this.active2.fields["ma_dis"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td>Details:</td><td><A href='?src=" ).Ref( this ).str( ";field=ma_dis_d'>&nbsp;" ).item( this.active2.fields["ma_dis_d"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td><br>Allergies:</td><td><br><A href='?src=" ).Ref( this ).str( ";field=alg'>&nbsp;" ).item( this.active2.fields["alg"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td>Details:</td><td><A href='?src=" ).Ref( this ).str( ";field=alg_d'>&nbsp;" ).item( this.active2.fields["alg_d"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td><br>Current Diseases:</td><td><br><A href='?src=" ).Ref( this ).str( ";field=cdi'>&nbsp;" ).item( this.active2.fields["cdi"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td>Details:</td><td><A href='?src=" ).Ref( this ).str( ";field=cdi_d'>&nbsp;" ).item( this.active2.fields["cdi_d"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td><br>Important Notes:</td><td><br><A href='?src=" ).Ref( this ).str( ";field=notes'>&nbsp;" ).item( this.active2.fields["notes"] ).str( "&nbsp;</A></td></tr>" ).ToString();
								dat += "<tr><td><br><b><font size='4'>Comments/Log</font></b></td></tr>";
								counter = 1;

								while (Lang13.Bool( this.active2.fields["com_" + counter] )) {
									dat += new Txt( "<tr><td>" ).item( this.active2.fields["com_" + counter] ).str( "</td></tr><tr><td><A href='?src=" ).Ref( this ).str( ";del_c=" ).item( counter ).str( "'>Delete Entry</A></td></tr>" ).ToString();
									counter++;
								}
								dat += new Txt( "<tr><td><A href='?src=" ).Ref( this ).str( ";add_c=1'>Add Entry</A></td></tr>" ).ToString();
								dat += new Txt( "<tr><td><br><A href='?src=" ).Ref( this ).str( ";del_r=1'>Delete Record (Medical Only)</A></td></tr>" ).ToString();
							} else {
								dat += "<tr><td>Medical Record Lost!</tr>";
								dat += new Txt( "<tr><td><br><A href='?src=" ).Ref( this ).str( ";new=1'>New Record</A></td></tr>" ).ToString();
							}
							dat += new Txt( "<tr><td><A href='?src=" ).Ref( this ).str( ";print_p=1'>Print Record</A></td></tr>" ).ToString();
							dat += new Txt( "<tr><td><A href='?src=" ).Ref( this ).str( ";screen=2'>Back</A></td></tr>" ).ToString();
							dat += "</table>";
							break;
						case 5:
							dat += "<CENTER><B>Virus Database</B></CENTER>";

							foreach (dynamic _c in Lang13.Enumerate( Lang13.GetTypes( typeof(Disease) ) )) {
								Dt = _c;
								
								Dis = Lang13.Call( Dt, 0 );

								if ( Dis is Disease_Advance ) {
									continue;
								}

								if ( !Lang13.Bool( Dis.desc ) ) {
									continue;
								}
								dat += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";vir=" ).item( Dt ).str( "'>" ).item( Dis.name ).str( "</a>" ).ToString();
							}
							dat += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";screen=1'>Back</a>" ).ToString();
							break;
						case 6:
							dat += "<center><b>Medical Robot Monitor</b></center>";
							dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";screen=1'>Back</a>" ).ToString();
							dat += "<br><b>Medical Robots:</b>";
							bdat = null;

							foreach (dynamic _d in Lang13.Enumerate( GlobalVars.living_mob_list, typeof(Mob_Living_SimpleAnimal_Bot_Medbot) )) {
								M = _d;
								

								if ( M.z != this.z ) {
									continue;
								}
								bl = GlobalFuncs.get_turf( M );

								if ( Lang13.Bool( bl ) ) {
									bdat += "" + M.name + " - <b>[" + bl.x + "," + bl.y + "]</b> - " + ( M.on ? "Online" : "Offline" ) + "<br>";

									if ( !( M.reagent_glass == null ) && M.use_beaker ) {
										bdat += "Reservoir: [" + M.reagent_glass.reagents.total_volume + "/" + M.reagent_glass.reagents.maximum_volume + "]<br>";
									} else {
										bdat += "Using Internal Synthesizer.<br>";
									}
								}
							}

							if ( !Lang13.Bool( bdat ) ) {
								dat += "<br><center>None detected</center>";
							} else {
								dat += "<br>" + bdat;
							}
							break;
					}
				} else {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";login=1'>{Log In}</A>" ).ToString();
				}
			}
			popup = new Browser( a, "med_rec", "Medical Records Console", 600, 400 );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: medical.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Card_Id && !Lang13.Bool( this.scan ) ) {
				
				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				A.loc = this;
				this.scan = A;
				user.WriteMsg( "<span class='notice'>You insert " + A + ".</span>" );
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

	}

}