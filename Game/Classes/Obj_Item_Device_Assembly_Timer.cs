// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Timer : Obj_Item_Device_Assembly {

		public double? timing = 0;
		public dynamic time = 5;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.materials = new ByTable().Set( "$metal", 500 ).Set( "$glass", 50 );
			this.attachable = true;
			this.icon_state = "timer";
		}

		// Function from file: timer.dm
		public Obj_Item_Device_Assembly_Timer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSobj.processing.Or( this );
			return;
		}

		// Function from file: timer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string timer_message = null;
			double? tp = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.incapacitated() || !( Map13.GetDistance( this.loc, Task13.User ) <= 1 ) ) {
				Interface13.Browse( Task13.User, null, "window=timer" );
				GlobalFuncs.onclose( Task13.User, "timer" );
				return null;
			}

			if ( Lang13.Bool( href_list["time"] ) ) {
				this.timing = String13.ParseNumber( href_list["time"] );

				if ( Lang13.Bool( this.timing ) && this.holder is Obj_Item_Device_TransferValve ) {
					timer_message = new Txt().item( GlobalFuncs.key_name_admin( Task13.User ) ).str( "(<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( Task13.User ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( Task13.User ).str( "'>FLW</A>) activated " ).item( this ).str( " attachment on " ).item( this.holder ).str( "." ).ToString();
					GlobalFuncs.message_admins( timer_message );
					GlobalVars.bombers.Add( timer_message );
					GlobalFuncs.log_game( "" + GlobalFuncs.key_name( Task13.User ) + " activated " + this + " attachment for " + this.loc );
				}
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["tp"] ) ) {
				tp = String13.ParseNumber( href_list["tp"] );
				this.time += tp;
				this.time = Num13.MinInt( Num13.MaxInt( Num13.Floor( Convert.ToDouble( this.time ) ), 1 ), 600 );
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=timer" );
				return null;
			}

			if ( Task13.User != null ) {
				this.attack_self( Task13.User );
			}
			return null;
		}

		// Function from file: timer.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic second = null;
			dynamic minute = null;
			string dat = null;
			Browser popup = null;

			
			if ( this.is_secured( user ) ) {
				second = this.time % 60;
				minute = ( this.time - second ) / 60;
				dat = new Txt( "<TT><B>Timing Unit</B>\n" ).item( ( Lang13.Bool( this.timing ) ? new Txt( "<A href='?src=" ).Ref( this ).str( ";time=0'>Timing</A>" ).ToString() : new Txt( "<A href='?src=" ).Ref( this ).str( ";time=1'>Not Timing</A>" ).ToString() ) ).str( " " ).item( minute ).str( ":" ).item( second ).str( "\n<A href='?src=" ).Ref( this ).str( ";tp=-30'>-</A> <A href='?src=" ).Ref( this ).str( ";tp=-1'>-</A> <A href='?src=" ).Ref( this ).str( ";tp=1'>+</A> <A href='?src=" ).Ref( this ).str( ";tp=30'>+</A>\n</TT>" ).ToString();
				dat += new Txt( "<BR><BR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>" ).ToString();
				dat += new Txt( "<BR><BR><A href='?src=" ).Ref( this ).str( ";close=1'>Close</A>" ).ToString();
				popup = new Browser( user, "timer", this.name );
				popup.set_content( dat );
				popup.open();
			}
			return null;
		}

		// Function from file: timer.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();
			this.attached_overlays = new ByTable();

			if ( Lang13.Bool( this.timing ) ) {
				this.overlays.Add( "timer_timing" );
				this.attached_overlays.Add( "timer_timing" );
			}

			if ( this.holder != null ) {
				this.holder.update_icon();
			}
			return null;
		}

		// Function from file: timer.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( Lang13.Bool( this.timing ) ) {
				this.time--;

				if ( Convert.ToDouble( this.time ) <= 0 ) {
					this.timing = 0;
					this.timer_end();
					this.time = Lang13.Initial( this, "time" );
				}
			}
			return null;
		}

		// Function from file: timer.dm
		public bool timer_end(  ) {
			
			if ( !this.secured || this.cooldown > 0 ) {
				return false;
			}
			this.pulse( false );
			this.audible_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString(), null, 3 );
			this.cooldown = 2;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.process_cooldown();
				return;
			}));
			this.update_icon();
			return false;
		}

		// Function from file: timer.dm
		public override bool toggle_secure(  ) {
			this.secured = !this.secured;

			if ( this.secured ) {
				GlobalVars.SSobj.processing.Or( this );
			} else {
				this.timing = 0;
				GlobalVars.SSobj.processing.Remove( this );
			}
			this.update_icon();
			return this.secured;
		}

		// Function from file: timer.dm
		public override bool activate(  ) {
			
			if ( !base.activate() ) {
				return false;
			}
			this.timing = !Lang13.Bool( this.timing ) ?1:0;
			this.update_icon();
			return true;
		}

		// Function from file: timer.dm
		public override string describe(  ) {
			
			if ( Lang13.Bool( this.timing ) ) {
				return "The timer is counting down from " + this.time + "!";
			}
			return "The timer is set for " + this.time + " seconds.";
		}

	}

}