// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Sun : Subsystem {

		public double angle = 0;
		public double dx = 0;
		public double dy = 0;
		public double rate = 0;
		public ByTable solars = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Sun";
			this.wait = 600;
			this.priority = 2;
		}

		// Function from file: sun.dm
		public Subsystem_Sun (  ) {
			
			if ( GlobalVars.SSsun != this ) {
				
				if ( GlobalVars.SSsun is Subsystem_Sun ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSsun );
				}
				GlobalVars.SSsun = this;
			}
			this.angle = Rand13.Int( 0, 360 );
			this.rate = Rand13.Int( 50, 200 ) / 100;

			if ( Rand13.PercentChance( 50 ) ) {
				this.rate = -this.rate;
			}
			return;
		}

		// Function from file: sun.dm
		public override void fire(  ) {
			double s = 0;
			double c = 0;
			Obj_Machinery_Power_SolarControl SC = null;

			this.angle = ( this.angle + this.rate * 6 + 360 ) % 360;
			s = Math.Sin( this.angle );
			c = Math.Cos( this.angle );

			if ( Math.Abs( s ) < Math.Abs( c ) ) {
				this.dx = s / Math.Abs( c );
				this.dy = c / Math.Abs( c );
			} else {
				this.dx = s / Math.Abs( s );
				this.dy = c / Math.Abs( s );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.solars, typeof(Obj_Machinery_Power_SolarControl) )) {
				SC = _a;
				

				if ( !Lang13.Bool( SC.powernet ) ) {
					this.solars.Remove( SC );
					continue;
				}
				SC.update();
			}
			return;
		}

		// Function from file: sun.dm
		public override void stat_entry( string msg = null ) {
			base.stat_entry( "P:" + this.solars.len );
			return;
		}

	}

}