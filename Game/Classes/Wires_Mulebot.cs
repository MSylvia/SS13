// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Mulebot : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.random = true;
			this.holder_type = typeof(Mob_Living_SimpleAnimal_Bot_Mulebot);
			this.wire_count = 10;
		}

		public Wires_Mulebot ( Obj holder = null ) : base( holder ) {
			
		}

		// Function from file: mulebot.dm
		public bool BeaconRX(  ) {
			return !( ( this.wires_status & 256 ) != 0 );
		}

		// Function from file: mulebot.dm
		public bool RemoteRX(  ) {
			return !( ( this.wires_status & 64 ) != 0 );
		}

		// Function from file: mulebot.dm
		public bool RemoteTX(  ) {
			return !( ( this.wires_status & 128 ) != 0 );
		}

		// Function from file: mulebot.dm
		public bool MobAvoid(  ) {
			return !( ( this.wires_status & 4 ) != 0 );
		}

		// Function from file: mulebot.dm
		public bool LoadCheck(  ) {
			return !( ( this.wires_status & 8 ) != 0 );
		}

		// Function from file: mulebot.dm
		public bool HasPower(  ) {
			return !( ( this.wires_status & 1 ) != 0 ) && !( ( this.wires_status & 2 ) != 0 );
		}

		// Function from file: mulebot.dm
		public bool Motor2(  ) {
			return !( ( this.wires_status & 32 ) != 0 );
		}

		// Function from file: mulebot.dm
		public bool Motor1(  ) {
			return !( ( this.wires_status & 16 ) != 0 );
		}

		// Function from file: mulebot.dm
		public override void UpdatePulsed( double? index = null ) {
			
			switch ((double?)( index )) {
				case 1:
				case 2:
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( this.holder ).str( " The charge light flickers.</span>" ).ToString() );
					break;
				case 4:
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( this.holder ).str( " The external warning lights flash briefly.</span>" ).ToString() );
					break;
				case 8:
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( this.holder ).str( " The load platform clunks.</span>" ).ToString() );
					break;
				case 16:
				case 32:
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( this.holder ).str( " The drive motor whines briefly.</span>" ).ToString() );
					break;
				default:
					this.holder.visible_message( new Txt( "<span class='notice'>" ).icon( this.holder ).str( " You hear a radio crackle.</span>" ).ToString() );
					break;
			}
			return;
		}

		// Function from file: mulebot.dm
		public override void Interact( dynamic user = null ) {
			Obj M = null;

			
			if ( this.CanUse( user ) ) {
				M = this.holder;
				((dynamic)M).update_controls();
			}
			return;
		}

		// Function from file: mulebot.dm
		public override bool CanUse( dynamic L = null ) {
			Obj M = null;

			M = this.holder;

			if ( Lang13.Bool( ((dynamic)M).open ) ) {
				return true;
			}
			return false;
		}

	}

}