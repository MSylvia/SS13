// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Twohanded_Required_Gibtonite : Obj_Item_Weapon_Twohanded_Required {

		public bool primed = false;
		public int det_time = 100;
		public int quality = 1;
		public string attacher = "UNKNOWN";
		public Wires_Explosive_Gibtonite wires = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "Gibtonite ore";
			this.w_class = 4;
			this.throw_range = 0;
			this.anchored = 1;
			this.icon = "icons/obj/mining.dmi";
			this.icon_state = "Gibtonite ore";
		}

		public Obj_Item_Weapon_Twohanded_Required_Gibtonite ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: ores_coins.dm
		public void GibtoniteReaction( dynamic user = null, int? triggered_by = null ) {
			triggered_by = triggered_by ?? 0;

			dynamic bombturf = null;
			dynamic A = null;
			int? notify_admins = null;

			
			if ( !this.primed ) {
				GlobalFuncs.playsound( this, "sound/effects/hit_on_shattered_glass.ogg", 50, 1 );
				this.primed = true;
				this.icon_state = "Gibtonite active";
				bombturf = GlobalFuncs.get_turf( this );
				A = GlobalFuncs.get_area( bombturf );
				notify_admins = 0;

				if ( this.z != 5 ) {
					notify_admins = 1;
				}

				if ( Lang13.Bool( notify_admins ) ) {
					
					if ( triggered_by == 1 ) {
						GlobalFuncs.message_admins( "An explosion has triggered a " + this.name + " to detonate at <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + bombturf.x + ";Y=" + bombturf.y + ";Z=" + bombturf.z + "'>" + A.name + " (JMP)</a>." );
					} else if ( triggered_by == 2 ) {
						GlobalFuncs.message_admins( new Txt( "A signal has triggered a " ).item( this.name ).str( " to detonate at <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( bombturf.x ).str( ";Y=" ).item( bombturf.y ).str( ";Z=" ).item( bombturf.z ).str( "'>" ).item( A.name ).str( " (JMP)</a>. Igniter attacher: " ).item( GlobalFuncs.key_name_admin( this.attacher ) ).str( "<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( this.attacher ).str( "'>?</A> (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( this.attacher ).str( "'>FLW</A>)" ).ToString() );
					} else {
						GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( user ) ).str( "<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( user ).str( "'>?</A> (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( user ).str( "'>FLW</A>) has triggered a " ).item( this.name ).str( " to detonate at <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( bombturf.x ).str( ";Y=" ).item( bombturf.y ).str( ";Z=" ).item( bombturf.z ).str( "'>" ).item( A.name ).str( " (JMP)</a>." ).ToString() );
					}
				}

				if ( triggered_by == 1 ) {
					GlobalFuncs.log_game( "An explosion has primed a " + this.name + " for detonation at " + A.name + "(" + bombturf.x + "," + bombturf.y + "," + bombturf.z + ")" );
				} else if ( triggered_by == 2 ) {
					GlobalFuncs.log_game( "A signal has primed a " + this.name + " for detonation at " + A.name + "(" + bombturf.x + "," + bombturf.y + "," + bombturf.z + "). Igniter attacher: " + GlobalFuncs.key_name( this.attacher ) + "." );
				} else {
					((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " strikes " ).the( this ).item().str( ", causing a chain reaction!</span>" ).ToString(), new Txt( "<span class='danger'>You strike " ).the( this ).item().str( ", causing a chain reaction.</span>" ).ToString() );
					GlobalFuncs.log_game( "" + GlobalFuncs.key_name( user ) + " has primed a " + this.name + " for detonation at " + A.name + "(" + bombturf.x + "," + bombturf.y + "," + bombturf.z + ")" );
				}
				Task13.Schedule( this.det_time, (Task13.Closure)(() => {
					
					if ( this.primed ) {
						
						if ( this.quality == 3 ) {
							GlobalFuncs.explosion( this.loc, 2, 4, 9, null, notify_admins );
						}

						if ( this.quality == 2 ) {
							GlobalFuncs.explosion( this.loc, 1, 2, 5, null, notify_admins );
						}

						if ( this.quality == 1 ) {
							GlobalFuncs.explosion( this.loc, -1, 1, 3, null, notify_admins );
						}
						GlobalFuncs.qdel( this );
					}
					return;
				}));
			}
			return;
		}

		// Function from file: ores_coins.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			this.GibtoniteReaction( null, 1 );
			return false;
		}

		// Function from file: ores_coins.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			this.GibtoniteReaction( P.firer );
			base.bullet_act( (object)(P), (object)(def_zone) );
			return null;
		}

		// Function from file: ores_coins.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.wires != null ) {
				this.wires.Interact( user );
			} else {
				base.attack_self( (object)(user), (object)(flag), emp );
			}
			return null;
		}

		// Function from file: ores_coins.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( !( this.wires != null ) && A is Obj_Item_Device_Assembly_Igniter ) {
				((Ent_Static)user).visible_message( "" + user + " attaches " + A + " to " + this + ".", "<span class='notice'>You attach " + A + " to " + this + ".</span>" );
				this.wires = new Wires_Explosive_Gibtonite( this );
				this.attacher = GlobalFuncs.key_name( user );
				GlobalFuncs.qdel( A );
				this.overlays.Add( "Gibtonite_igniter" );
				return null;
			}

			if ( this.wires != null && !this.primed ) {
				
				if ( this.wires.IsInteractionTool( A ) ) {
					this.wires.Interact( user );
					return null;
				}
			}

			if ( A is Obj_Item_Weapon_Pickaxe || A is Obj_Item_Weapon_Resonator || Convert.ToDouble( A.force ) >= 10 ) {
				this.GibtoniteReaction( user );
				return null;
			}

			if ( this.primed ) {
				
				if ( A is Obj_Item_Device_MiningScanner || A is Obj_Item_Device_TScanner_AdvMiningScanner || A is Obj_Item_Device_Multitool ) {
					this.primed = false;
					((Ent_Static)user).visible_message( "The chain reaction was stopped! ...The ore's quality looks diminished.", "<span class='notice'>You stopped the chain reaction. ...The ore's quality looks diminished.</span>" );
					this.icon_state = "Gibtonite ore";
					this.quality = 1;
					return null;
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: ores_coins.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.wires );
			this.wires = null;
			return base.Destroy();
		}

	}

}