// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe_HeatExchanging : Obj_Machinery_Atmospherics_Pipe {

		public dynamic initialize_directions_he = null;
		public double minimum_temperature_difference = 20;
		public double thermal_conductivity = 0.1;
		public dynamic icon_temperature = 293.41;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.color = "#404040";
			this.buckle_lying = 1;
			this.icon = "icons/obj/atmospherics/pipes/heat.dmi";
		}

		// Function from file: he_pipes.dm
		public Obj_Machinery_Atmospherics_Pipe_HeatExchanging ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.color = "#404040";
			return;
		}

		// Function from file: he_pipes.dm
		public override int? process( dynamic seconds = null ) {
			GasMixture pipe_air = null;
			double h_r = 0;
			double h_g = 0;
			double h_b = 0;
			dynamic scale = null;
			int heat_limit = 0;

			pipe_air = this.return_air();

			if ( !( pipe_air != null ) ) {
				return null;
			}

			if ( Lang13.Bool( pipe_air.temperature ) && ( Convert.ToDouble( this.icon_temperature ) > 500 || Convert.ToDouble( pipe_air.temperature ) > 500 ) ) {
				
				if ( Math.Abs( Convert.ToDouble( pipe_air.temperature - this.icon_temperature ) ) > 10 ) {
					this.icon_temperature = pipe_air.temperature;
					h_r = GlobalFuncs.heat2colour_r( this.icon_temperature );
					h_g = GlobalFuncs.heat2colour_g( this.icon_temperature );
					h_b = GlobalFuncs.heat2colour_b( this.icon_temperature );

					if ( Convert.ToDouble( this.icon_temperature ) < 2000 ) {
						scale = ( this.icon_temperature - 500 ) / 1500;
						h_r = ( h_r - 64 ) * Convert.ToDouble( scale ) + 64;
						h_g = ( h_g - 64 ) * Convert.ToDouble( scale ) + 64;
						h_b = ( h_b - 64 ) * Convert.ToDouble( scale ) + 64;
					}
					Icon13.Animate( new ByTable().Set( 1, this ).Set( "color", String13.ColorCode( ((int)( h_r )), ((int)( h_g )), ((int)( h_b )) ) ).Set( "time", 20 ).Set( "easing", 1 ) );
				}
			}

			if ( Lang13.Bool( this.buckled_mob ) ) {
				heat_limit = 1000;

				if ( Convert.ToDouble( pipe_air.temperature ) > heat_limit + 1 ) {
					this.buckled_mob.apply_damage( Math.Log( Convert.ToDouble( pipe_air.temperature - heat_limit ) ) * 4, "fire", "chest" );
				}
			}
			return null;
		}

		// Function from file: he_pipes.dm
		public override int process_atmos(  ) {
			dynamic environment_temperature = null;
			GasMixture pipe_air = null;
			Ent_Static T = null;
			GasMixture environment = null;
			double hc = 0;
			dynamic avg_temp = null;

			environment_temperature = 0;
			pipe_air = this.return_air();
			T = this.loc;

			if ( T is Tile_Simulated ) {
				
				if ( Lang13.Bool( ((dynamic)T).blocks_air ) ) {
					environment_temperature = ((dynamic)T).temperature;
				} else {
					environment = T.return_air();
					environment_temperature = environment.temperature;
				}
			} else {
				environment_temperature = ((dynamic)T).temperature;
			}

			if ( Math.Abs( Convert.ToDouble( environment_temperature - pipe_air.temperature ) ) > this.minimum_temperature_difference ) {
				this.parent.temperature_interact( T, this.volume, this.thermal_conductivity );
			}

			if ( Lang13.Bool( this.buckled_mob ) ) {
				hc = pipe_air.heat_capacity();
				avg_temp = ( pipe_air.temperature * hc + this.buckled_mob.bodytemperature * 3500 ) / ( hc + 3500 );
				pipe_air.temperature = avg_temp;
				this.buckled_mob.bodytemperature = avg_temp;
			}
			return 0;
		}

		// Function from file: he_pipes.dm
		public override dynamic GetInitDirections(  ) {
			return base.GetInitDirections() | this.initialize_directions_he;
		}

		// Function from file: he_pipes.dm
		public override void hide( bool h = false ) {
			return;
		}

		// Function from file: he_pipes.dm
		public override bool can_be_node( Obj_Machinery_Atmospherics target = null, double iteration = 0 ) {
			
			if ( !( target is Obj_Machinery_Atmospherics_Pipe_HeatExchanging ) ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)target).initialize_directions_he & Map13.GetDistance( target, this ) ) ) {
				return true;
			}
			return false;
		}

	}

}