// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Pet_Dog : Mob_Living_SimpleAnimal_Pet {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.response_help = "pets";
			this.response_disarm = "bops";
			this.response_harm = "kicks";
			this.speak = new ByTable(new object [] { "YAP", "Woof!", "Bark!", "AUUUUUU" });
			this.speak_emote = new ByTable(new object [] { "barks", "woofs" });
			this.emote_hear = new ByTable(new object [] { "barks!", "woofs!", "yaps.", "pants." });
			this.emote_see = new ByTable(new object [] { "shakes its head.", "chases its tail.", "shivers." });
			this.speak_chance = 1;
			this.turns_per_move = 10;
			this.see_in_dark = 5;
		}

		public Mob_Living_SimpleAnimal_Pet_Dog ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: dog.dm
		public void wuv( int change = 0, dynamic M = null ) {
			
			if ( change != 0 ) {
				
				if ( change > 0 ) {
					
					if ( Lang13.Bool( M ) && this.stat != 2 ) {
						GlobalFuncs.flick_overlay( new Image( "icons/mob/animal.dmi", this, "heart-ani2", 5 ), new ByTable(new object [] { M.client }), 20 );
						this.emote( "me", 1, "yaps happily!" );
					}
				} else if ( Lang13.Bool( M ) && this.stat != 2 ) {
					this.emote( "me", 1, "growls!" );
				}
			}
			return;
		}

		// Function from file: dog.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), b, c );

			dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.wuv( 1, a );
			} else if ( _a=="harm" ) {
				this.wuv( -1, a );
			}
			return _default;
		}

	}

}