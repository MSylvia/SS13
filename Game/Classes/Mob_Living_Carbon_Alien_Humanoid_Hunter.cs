// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Alien_Humanoid_Hunter : Mob_Living_Carbon_Alien_Humanoid {

		public dynamic leap_icon = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.caste = "h";
			this.maxHealth = 125;
			this.health = 125;
			this.icon_state = "alienh_s";
		}

		// Function from file: hunter.dm
		public Mob_Living_Carbon_Alien_Humanoid_Hunter ( dynamic loc = null ) : base( (object)(loc) ) {
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Alien_Plasmavessel_Small() );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: hunter.dm
		public override bool throw_impact( dynamic target = null, Mob_Living_Carbon thrower = null ) {
			dynamic L = null;
			bool blocked = false;
			dynamic H = null;

			
			if ( !this.leaping ) {
				return base.throw_impact( (object)(target), thrower );
			}

			if ( Lang13.Bool( target ) ) {
				
				if ( target is Mob_Living ) {
					L = target;
					blocked = false;

					if ( target is Mob_Living_Carbon_Human ) {
						H = target;

						if ( ((Mob_Living_Carbon_Human)H).check_shields( 90, "the " + this.name, this, 4 ) ) {
							blocked = true;
						}
					}

					if ( !blocked ) {
						((Ent_Static)L).visible_message( "<span class ='danger'>" + this + " pounces on " + L + "!</span>", "<span class ='userdanger'>" + this + " pounces on you!</span>" );
						((Mob)L).Weaken( 5 );
						Task13.Sleep( 2 );
						Map13.StepTowardsSimple( this, L );
					}
					this.toggle_leap( false );
					this.pounce_cooldown = !this.pounce_cooldown;
					Task13.Schedule( this.pounce_cooldown_time, (Task13.Closure)(() => {
						this.pounce_cooldown = !this.pounce_cooldown;
						return;
					}));
				} else if ( target.density && !((Ent_Static)target).CanPass( this ) ) {
					this.visible_message( "<span class ='danger'>" + this + " smashes into " + target + "!</span>", "<span class ='alertalien'>" + this + " smashes into " + target + "!</span>" );
					this.weakened = 2;
				}

				if ( this.leaping ) {
					this.leaping = false;
					this.update_icons();
					this.update_canmove();
				}
			}
			return false;
		}

		// Function from file: hunter.dm
		public override void ClickOn( dynamic A = null, string _params = null ) {
			this.face_atom( A );

			if ( this.leap_on_click ) {
				this.leap_at( A );
			} else {
				base.ClickOn( (object)(A), _params );
			}
			return;
		}

		// Function from file: hunter.dm
		public void leap_at( dynamic A = null ) {
			
			if ( this.pounce_cooldown ) {
				this.WriteMsg( "<span class='alertalien'>You are too fatigued to pounce right now!</span>" );
				return;
			}

			if ( this.leaping || this.stat != 0 || this.buckled != null || Lang13.Bool( this.lying ) ) {
				return;
			}

			if ( !GlobalFuncs.has_gravity( this ) || !GlobalFuncs.has_gravity( A ) ) {
				this.WriteMsg( "<span class='alertalien'>It is unsafe to leap without gravity!</span>" );
				return;
			} else {
				this.leaping = true;
				this.update_icons();
				this.throw_at( A, 7, 1, null, false, true );
				this.leaping = false;
				this.update_icons();
			}
			return;
		}

		// Function from file: hunter.dm
		public void toggle_leap( bool? message = null ) {
			message = message ?? true;

			this.leap_on_click = !this.leap_on_click;
			this.leap_icon.icon_state = "leap_" + ( this.leap_on_click ? "on" : "off" );
			this.update_icons();

			if ( message == true ) {
				this.WriteMsg( "<span class='noticealien'>You will now " + ( this.leap_on_click ? "leap at" : "slash at" ) + " enemies!</span>" );
			} else {
				return;
			}
			return;
		}

		// Function from file: hunter.dm
		public override dynamic movement_delay(  ) {
			dynamic _default = null;

			_default = -1;
			_default += base.movement_delay();
			return _default;
		}

		// Function from file: hunter.dm
		public override void handle_hud_icons_health(  ) {
			
			if ( this.healths != null ) {
				
				if ( this.stat != 2 ) {
					
					dynamic _a = this.health; // Was a switch-case, sorry for the mess.
					if ( 150<=_a&&_a<=Double.PositiveInfinity ) {
						this.healths.icon_state = "health0";
					} else if ( 120<=_a&&_a<=150 ) {
						this.healths.icon_state = "health1";
					} else if ( 90<=_a&&_a<=120 ) {
						this.healths.icon_state = "health2";
					} else if ( 60<=_a&&_a<=90 ) {
						this.healths.icon_state = "health3";
					} else if ( 30<=_a&&_a<=60 ) {
						this.healths.icon_state = "health4";
					} else if ( 0<=_a&&_a<=30 ) {
						this.healths.icon_state = "health5";
					} else {
						this.healths.icon_state = "health6";
					}
				} else {
					this.healths.icon_state = "health7";
				}
			}
			return;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.special_role = "Hunter";
			return;
		}

	}

}