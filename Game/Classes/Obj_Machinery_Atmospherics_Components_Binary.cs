// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Binary : Obj_Machinery_Atmospherics_Components {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.initialize_directions = 3;
			this.device_type = 2;
			this.icon = "icons/obj/atmospherics/components/binary_devices.dmi";
		}

		public Obj_Machinery_Atmospherics_Components_Binary ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: binary_atmos_base.dm
		public override void atmosinit( ByTable node_connects = null ) {
			int node2_connect = 0;
			int node1_connect = 0;
			ByTable node_connects2 = null;

			node2_connect = this.dir;
			node1_connect = Num13.Rotate( this.dir, 180 );
			node_connects2 = new ByTable(new object [] { node1_connect, node2_connect });
			base.atmosinit( node_connects2 );
			return;
		}

		// Function from file: binary_atmos_base.dm
		public override void hide( bool h = false ) {
			this.update_icon();
			base.hide( h );
			return;
		}

		// Function from file: binary_atmos_base.dm
		public override void SetInitDirections(  ) {
			
			switch ((int)( this.dir )) {
				case 1:
					this.initialize_directions = 3;
					break;
				case 2:
					this.initialize_directions = 3;
					break;
				case 4:
					this.initialize_directions = 12;
					break;
				case 8:
					this.initialize_directions = 12;
					break;
			}
			return;
		}

	}

}