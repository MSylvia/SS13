// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_AiModule : Obj_Item_Weapon {

		public ByTable laws = new ByTable();
		public bool bypass_law_amt_check = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "electronic";
			this.flags = 64;
			this.force = 5;
			this.w_class = 2;
			this.throw_speed = 3;
			this.origin_tech = "programming=3";
			this.materials = new ByTable().Set( "$gold", 50 );
			this.icon = "icons/obj/module.dmi";
			this.icon_state = "std_mod";
		}

		public Obj_Item_Weapon_AiModule ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: AI_modules.dm
		public virtual dynamic transmitInstructions( dynamic target = null, dynamic sender = null ) {
			target.WriteMsg( "<span class='userdanger'>" + sender + " has uploaded a change to the laws you must follow using a " + this.name + ". From now on, these are your laws: </span>" );
			return null;
		}

		// Function from file: AI_modules.dm
		public virtual bool install( dynamic reciever = null, dynamic user = null ) {
			double? tot_laws = null;
			dynamic lawlist = null;
			dynamic mylaw = null;
			dynamic law2log = null;
			string time = null;

			
			if ( !this.bypass_law_amt_check && ( !( this.laws.len != 0 ) || this.laws[1] == "" ) ) {
				user.WriteMsg( "<span class='warning'>ERROR: No laws found on board.</span>" );
				return false;
			}

			if ( Lang13.Bool( reciever.laws ) ) {
				tot_laws = 0;

				foreach (dynamic _b in Lang13.Enumerate( new ByTable(new object [] { reciever.laws.inherent, reciever.laws.supplied, reciever.laws.ion, this.laws }) )) {
					lawlist = _b;
					

					foreach (dynamic _a in Lang13.Enumerate( lawlist )) {
						mylaw = _a;
						

						if ( mylaw != "" ) {
							tot_laws++;
						}
					}
				}

				if ( ( tot_laws ??0) > ( GlobalVars.config.silicon_max_law_amount ??0) && !this.bypass_law_amt_check ) {
					user.WriteMsg( "<span class='caution'>Not enough memory allocated to " + reciever + "'s law processor to handle this amount of laws." );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " tried to upload laws to " + GlobalFuncs.key_name_admin( reciever ) + " that would exceed the law cap." );
					return false;
				}
			}
			law2log = this.transmitInstructions( reciever, user );
			user.WriteMsg( "Upload complete. " + reciever + "'s laws have been modified." );
			reciever.show_laws();
			reciever.law_change_counter++;
			time = String13.FormatTime( Game13.realtime, "hh:mm:ss" );
			GlobalVars.lawchanges.Add( "" + time + " <B>:</B> " + user.name + "(" + user.key + ") used " + this.name + " on " + reciever.name + "(" + reciever.key + ")." + ( Lang13.Bool( law2log ) ? " The law specified " + law2log : "" ) );
			GlobalFuncs.log_law( "" + user.key + "/" + user.name + " used " + this.name + " on " + reciever.key + "/(" + reciever.name + ")." + ( Lang13.Bool( law2log ) ? " The law specified " + law2log : "" ) );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " used " + this.name + " on " + GlobalFuncs.key_name_admin( reciever ) + "." + ( Lang13.Bool( law2log ) ? " The law specified " + law2log : "" ) );
			return false;
		}

		// Function from file: AI_modules.dm
		public void show_laws( dynamic user = null ) {
			dynamic law = null;

			
			if ( this.laws.len != 0 ) {
				user.WriteMsg( "<B>Programmed Law" + ( this.laws.len > 1 ? "s" : "" ) + ":</B>" );

				foreach (dynamic _a in Lang13.Enumerate( this.laws )) {
					law = _a;
					
					user.WriteMsg( "\"" + law + "\"" );
				}
			}
			return;
		}

		// Function from file: AI_modules.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			base.attack_self( (object)(user), (object)(flag), emp );
			this.show_laws( user );
			return null;
		}

		// Function from file: AI_modules.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.Adjacent( user ) ) {
				this.show_laws( user );
			}
			return 0;
		}

	}

}