// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Sleeper : Obj_Item_MechaParts_MechaEquipment {

		public dynamic patient = null;
		public int inject_amount = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "programming=2;biotech=3";
			this.energy_drain = 20;
			this.equip_cooldown = 20;
			this.salvageable = false;
			this.icon = "icons/obj/Cryogenic2.dmi";
			this.icon_state = "sleeper";
		}

		public Obj_Item_MechaParts_MechaEquipment_Sleeper ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: medical_tools.dm
		public override int? process( dynamic seconds = null ) {
			dynamic M = null;

			
			if ( !( this.chassis != null ) ) {
				GlobalVars.SSobj.processing.Remove( this );
				return null;
			}

			if ( !this.chassis.has_charge( this.energy_drain ) ) {
				this.set_ready_state( true );
				this.log_message( "Deactivated." );
				this.occupant_message( "" + this + " deactivated - no power." );
				GlobalVars.SSobj.processing.Remove( this );
				return null;
			}
			M = this.patient;

			if ( !Lang13.Bool( M ) ) {
				return null;
			}

			if ( Convert.ToDouble( M.health ) > 0 ) {
				((Mob_Living)M).adjustOxyLoss( -1 );
				((Mob_Living)M).updatehealth();
			}
			((Mob)M).AdjustStunned( -4 );
			((Mob)M).AdjustWeakened( -4 );
			((Mob)M).AdjustStunned( -4 );

			if ( ( ((Reagents)M.reagents).get_reagent_amount( "epinephrine" ) ?1:0) < 5 ) {
				M.reagents.add_reagent( "epinephrine", 5 );
			}
			this.chassis.use_power( this.energy_drain );
			this.update_equip_info();
			return null;
		}

		// Function from file: medical_tools.dm
		public override void container_resist(  ) {
			this.go_out();
			return;
		}

		// Function from file: medical_tools.dm
		public override bool update_equip_info(  ) {
			
			if ( base.update_equip_info() ) {
				
				if ( Lang13.Bool( this.patient ) ) {
					GlobalFuncs.send_byjax( this.chassis.occupant, "msleeper.browser", "lossinfo", this.get_patient_dam() );
					GlobalFuncs.send_byjax( this.chassis.occupant, "msleeper.browser", "reagents", this.get_patient_reagents() );
					GlobalFuncs.send_byjax( this.chassis.occupant, "msleeper.browser", "injectwith", this.get_available_reagents() );
				}
				return true;
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			TopicInput filter = null;

			base.Topic( href, href_list, (object)(hsrc) );
			filter = new TopicInput( href, href_list );

			if ( Lang13.Bool( filter.get( "eject" ) ) ) {
				this.go_out();
			}

			if ( Lang13.Bool( filter.get( "view_stats" ) ) ) {
				Interface13.Browse( this.chassis.occupant, this.get_patient_stats(), "window=msleeper" );
				GlobalFuncs.onclose( this.chassis.occupant, "msleeper" );
				return null;
			}

			if ( Lang13.Bool( filter.get( "inject" ) ) ) {
				this.inject_reagent( filter.getType( "inject", typeof(Reagent) ), filter.getObj( "source" ) );
			}
			return null;
		}

		// Function from file: medical_tools.dm
		public override string get_equip_info(  ) {
			string output = null;
			string temp = null;

			output = base.get_equip_info();

			if ( Lang13.Bool( output ) ) {
				temp = "";

				if ( Lang13.Bool( this.patient ) ) {
					temp = new Txt( "<br />[Occupant: " ).item( this.patient ).str( " (" ).item( ( Convert.ToDouble( this.patient.stat ) > 1 ? "*DECEASED*" : "Health: " + this.patient.health + "%" ) ).str( ")]<br /><a href='?src=" ).Ref( this ).str( ";view_stats=1'>View stats</a>|<a href='?src=" ).Ref( this ).str( ";eject=1'>Eject</a>" ).ToString();
				}
				return "" + output + " " + temp;
			}
			return null;
		}

		// Function from file: medical_tools.dm
		public override void detach( dynamic moveto = null ) {
			
			if ( Lang13.Bool( this.patient ) ) {
				this.occupant_message( "<span class='warning'>Unable to detach " + this + " - equipment occupied!</span>" );
				return;
			}
			GlobalVars.SSobj.processing.Remove( this );
			base.detach( (object)(moveto) ); return;
		}

		// Function from file: medical_tools.dm
		public bool inject_reagent( dynamic R = null, dynamic SG = null ) {
			double? to_inject = null;

			
			if ( !Lang13.Bool( R ) || !Lang13.Bool( this.patient ) || !Lang13.Bool( SG ) || !this.chassis.equipment.Contains( SG ) ) {
				return false;
			}
			to_inject = Num13.MinInt( Convert.ToInt32( R.volume ), this.inject_amount );

			if ( Lang13.Bool( to_inject ) && ( ((Reagents)this.patient.reagents).get_reagent_amount( R.id ) ?1:0) + ( to_inject ??0) <= this.inject_amount * 2 ) {
				this.occupant_message( "Injecting " + this.patient + " with " + to_inject + " units of " + R.name + "." );
				this.log_message( "Injecting " + this.patient + " with " + to_inject + " units of " + R.name + "." );
				GlobalFuncs.add_logs( this.chassis.occupant, this.patient, "injected", "" + this.name + " (" + R + " - " + to_inject + " units)" );
				((Reagents)SG.reagents).trans_id_to( this.patient, R.id, to_inject );
				this.update_equip_info();
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public dynamic get_available_reagents(  ) {
			dynamic output = null;
			dynamic SG = null;
			Reagent R = null;

			SG = Lang13.FindIn( typeof(Obj_Item_MechaParts_MechaEquipment_SyringeGun), this.chassis );

			if ( Lang13.Bool( SG ) && Lang13.Bool( SG.reagents ) && SG.reagents.reagent_list is ByTable ) {
				
				foreach (dynamic _a in Lang13.Enumerate( SG.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					

					if ( R.volume > 0 ) {
						output += new Txt( "<a href=\"?src=" ).Ref( this ).str( ";inject=" ).Ref( R ).str( ";source=" ).Ref( SG ).str( "\">Inject " ).item( R.name ).str( "</a><br />" ).ToString();
					}
				}
			}
			return output;
		}

		// Function from file: medical_tools.dm
		public double get_patient_reagents(  ) {
			double _default = 0;

			Reagent R = null;

			
			if ( Lang13.Bool( this.patient.reagents ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.patient.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					

					if ( R.volume > 0 ) {
						_default += /*[I CANNOT CONVERT SOME RANDOM SHIT TO A DOUBLE: string]*/ 0;
					}
				}
			}
			return _default != 0 || Lang13.Bool( "None" ) ?1:0;
		}

		// Function from file: medical_tools.dm
		public string get_patient_dam(  ) {
			string t1 = null;

			
			dynamic _a = this.patient.stat; // Was a switch-case, sorry for the mess.
			if ( _a==0 ) {
				t1 = "Conscious";
			} else if ( _a==1 ) {
				t1 = "Unconscious";
			} else if ( _a==2 ) {
				t1 = "*dead*";
			} else {
				t1 = "Unknown";
			}
			return "<font color=\"" + ( Convert.ToDouble( this.patient.health ) > 50 ? "blue" : "red" ) + "\"><b>Health:</b> " + ( Convert.ToDouble( this.patient.stat ) > 1 ? "" + t1 : "" + this.patient.health + "% (" + t1 + ")" ) + "</font><br />\n				<font color=\"" + ( Convert.ToDouble( this.patient.bodytemperature ) > 50 ? "blue" : "red" ) + "\"><b>Core Temperature:</b> " + ( this.patient.bodytemperature - 273.41 ) + "&deg;C (" + ( this.patient.bodytemperature * 171 - 459.6700134277344 ) + "&deg;F)</font><br />\n				<font color=\"" + ( ((Mob_Living)this.patient).getBruteLoss() < 60 ? "blue" : "red" ) + "\"><b>Brute Damage:</b> " + ((Mob_Living)this.patient).getBruteLoss() + "%</font><br />\n				<font color=\"" + ( Convert.ToDouble( ((Mob_Living)this.patient).getOxyLoss() ) < 60 ? "blue" : "red" ) + "\"><b>Respiratory Damage:</b> " + ((Mob_Living)this.patient).getOxyLoss() + "%</font><br />\n				<font color=\"" + ( Convert.ToDouble( ((Mob_Living)this.patient).getToxLoss() ) < 60 ? "blue" : "red" ) + "\"><b>Toxin Content:</b> " + ((Mob_Living)this.patient).getToxLoss() + "%</font><br />\n				<font color=\"" + ( ((Mob_Living)this.patient).getFireLoss() < 60 ? "blue" : "red" ) + "\"><b>Burn Severity:</b> " + ((Mob_Living)this.patient).getFireLoss() + "%</font><br />\n				<font color=\"red\">" + ( ((Mob_Living)this.patient).getCloneLoss() != 0 ? "Subject appears to have cellular damage." : "" ) + "</font><br />\n				<font color=\"red\">" + ( ((Mob_Living)this.patient).getBrainLoss() != 0 ? "Significant brain damage detected." : "" ) + "</font><br />\n				";
		}

		// Function from file: medical_tools.dm
		public string get_patient_stats(  ) {
			
			if ( !Lang13.Bool( this.patient ) ) {
				return null;
			}
			return "<html>\n				<head>\n				<title>" + this.patient + " statistics</title>\n				<script language='javascript' type='text/javascript'>\n				" + GlobalVars.js_byjax + @"
				</script>
				<style>
				h3 {margin-bottom:2px;font-size:14px;}
				#lossinfo, #reagents, #injectwith {padding-left:15px;}
				</style>
				</head>
				<body>
				<h3>Health statistics</h3>
				<div id=""lossinfo"">
				" + this.get_patient_dam() + @"
				</div>
				<h3>Reagents in bloodstream</h3>
				<div id=""reagents"">
				" + this.get_patient_reagents() + "\n				</div>\n				<div id=\"injectwith\">\n				" + this.get_available_reagents() + "\n				</div>\n				</body>\n				</html>";
		}

		// Function from file: medical_tools.dm
		public void go_out(  ) {
			
			if ( !Lang13.Bool( this.patient ) ) {
				return;
			}
			((Ent_Dynamic)this.patient).forceMove( GlobalFuncs.get_turf( this ) );
			this.occupant_message( "" + this.patient + " ejected. Life support functions disabled." );
			this.log_message( "" + this.patient + " ejected. Life support functions disabled." );
			((Mob)this.patient).reset_view();
			GlobalVars.SSobj.processing.Remove( this );
			this.patient = null;
			this.update_equip_info();
			return;
		}

		// Function from file: medical_tools.dm
		public bool patient_insertion_check( dynamic target = null ) {
			
			if ( target.buckled != null ) {
				this.occupant_message( "<span class='warning'>" + target + " will not fit into the sleeper because they are buckled to " + target.buckled + "!</span>" );
				return false;
			}

			if ( Lang13.Bool( target.buckled_mob ) ) {
				this.occupant_message( "<span class='warning'>" + target + " will not fit into the sleeper because " + target.buckled_mob + " is attached to it!</span>" );
				return false;
			}

			if ( Lang13.Bool( this.patient ) ) {
				this.occupant_message( "<span class='warning'>The sleeper is already occupied!</span>" );
				return false;
			}
			return true;
		}

		// Function from file: medical_tools.dm
		[VerbInfo( name: "action" )]
		[VerbArg( 1, InputType.Mob )]
		public override bool f_action( dynamic target = null ) {
			
			if ( !this.action_checks( target ) ) {
				return false;
			}

			if ( !( target is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( !this.patient_insertion_check( target ) ) {
				return false;
			}
			this.occupant_message( "<span class='notice'>You start putting " + target + " into " + this + "...</span>" );
			this.chassis.visible_message( new Txt( "<span class='warning'>" ).item( this.chassis ).str( " starts putting " ).item( target ).str( " into " ).the( this ).item().str( ".</span>" ).ToString() );

			if ( this.do_after_cooldown( target ) ) {
				
				if ( !this.patient_insertion_check( target ) ) {
					return false;
				}
				((Ent_Dynamic)target).forceMove( this );
				this.patient = target;
				((Mob)target).reset_view( this );
				GlobalVars.SSobj.processing.Or( this );
				this.update_equip_info();
				this.occupant_message( "<span class='notice'>" + target + " successfully loaded into " + this + ". Life support functions engaged.</span>" );
				this.chassis.visible_message( "<span class='warning'>" + this.chassis + " loads " + target + " into " + this + ".</span>" );
				this.log_message( "" + target + " loaded. Life support functions engaged." );
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public override bool Exit( Ent_Dynamic O = null, Ent_Static newloc = null ) {
			return false;
		}

		// Function from file: medical_tools.dm
		public override dynamic Destroy(  ) {
			Ent_Dynamic AM = null;

			GlobalVars.SSobj.processing.Remove( this );

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				AM = _a;
				
				AM.forceMove( GlobalFuncs.get_turf( this ) );
			}
			return base.Destroy();
		}

		// Function from file: medical_tools.dm
		public override bool allow_drop(  ) {
			return false;
		}

		// Function from file: medical_tools.dm
		public override void attach( Obj_Mecha M = null ) {
			base.attach( M );
			GlobalVars.SSobj.processing.Or( this );
			return;
		}

		// Function from file: medical_tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( M is Obj_Mecha_Medical ) {
					return true;
				}
			}
			return false;
		}

	}

}