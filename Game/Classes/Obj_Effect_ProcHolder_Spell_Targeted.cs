// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_ProcHolder_Spell_Targeted : Obj_Effect_ProcHolder_Spell {

		public int? max_targets = 1;
		public bool target_ignore_prev = true;
		public bool include_user = false;
		public bool random_target = false;
		public bool random_target_priority = true;

		public Obj_Effect_ProcHolder_Spell_Targeted ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: spell.dm
		public bool los_check( dynamic A = null, Mob_Living B = null ) {
			Obj dummy = null;
			dynamic turf = null;
			Ent_Dynamic AM = null;

			dummy = new Obj( A.loc );
			dummy.pass_flags |= 1;

			foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.getline( A, B ) )) {
				turf = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( turf, typeof(Ent_Dynamic) )) {
					AM = _a;
					

					if ( !AM.CanPass( dummy, turf, 1 ) ) {
						GlobalFuncs.qdel( dummy );
						return false;
					}
				}
			}
			GlobalFuncs.qdel( dummy );
			return true;
		}

		// Function from file: spell.dm
		public override void choose_targets( Mob user = null ) {
			user = user ?? Task13.User;

			ByTable targets = null;
			Mob_Living target = null;
			ByTable possible_targets = null;
			Mob_Living M = null;
			dynamic M2 = null;
			Mob_Living L = null;
			ByTable possible_targets2 = null;
			Mob_Living target2 = null;
			int? i = null;
			dynamic target3 = null;

			targets = new ByTable();

			switch ((int?)( this.max_targets )) {
				case 0:
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.view_or_range( this.range, user, this.selection_type ), typeof(Mob_Living) )) {
						target = _a;
						
						targets.Add( target );
					}
					break;
				case 1:
					
					if ( ( this.range ??0) < 0 ) {
						targets.Add( user );
					} else {
						possible_targets = new ByTable();

						foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.view_or_range( this.range, user, this.selection_type ), typeof(Mob_Living) )) {
							M = _b;
							

							if ( !this.include_user && user == M ) {
								continue;
							}
							possible_targets.Add( M );
						}
						M2 = null;

						if ( !this.random_target ) {
							M2 = Interface13.Input( "Choose the target for the spell.", "Targeting", null, null, possible_targets, InputType.Mob | InputType.Null );
						} else {
							
							switch ((bool)( this.random_target_priority )) {
								case 2:
									M2 = Rand13.PickFromTable( possible_targets );
									break;
								case 1:
									
									foreach (dynamic _c in Lang13.Enumerate( possible_targets, typeof(Mob_Living) )) {
										L = _c;
										

										if ( Lang13.Bool( M2 ) ) {
											
											if ( Map13.GetDistance( user, L ) < Map13.GetDistance( user, M2 ) ) {
												
												if ( this.los_check( user, L ) ) {
													M2 = L;
												}
											}
										} else if ( this.los_check( user, L ) ) {
											M2 = L;
										}
									}
									break;
							}
						}

						if ( GlobalFuncs.view_or_range( this.range, user, this.selection_type ).Contains( M2 ) ) {
							targets.Add( M2 );
						}
					}
					break;
				default:
					possible_targets2 = new ByTable();

					foreach (dynamic _e in Lang13.Enumerate( GlobalFuncs.view_or_range( this.range, user, this.selection_type ), typeof(Mob_Living) )) {
						target2 = _e;
						
						possible_targets2.Add( target2 );
					}
					i = null;
					i = 1;

					while (( i ??0) <= ( this.max_targets ??0)) {
						
						if ( !( possible_targets2.len != 0 ) ) {
							break;
						}

						if ( this.target_ignore_prev ) {
							target3 = Rand13.PickFromTable( possible_targets2 );
							possible_targets2.Remove( target3 );
							targets.Add( target3 );
						} else {
							targets.Add( Rand13.PickFromTable( possible_targets2 ) );
						}
						i++;
					}
					break;
			}

			if ( !this.include_user && targets.Contains( user ) ) {
				targets.Remove( user );
			}

			if ( !( targets.len != 0 ) ) {
				this.revert_cast( user );
				return;
			}
			this.perform( targets, null, user );
			return;
		}

	}

}