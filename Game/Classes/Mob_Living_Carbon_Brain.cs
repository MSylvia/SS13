// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Brain : Mob_Living_Carbon {

		public Obj_Item_Device_Mmi container = null;
		public int timeofhostdeath = 0;
		public double emp_damage = 0;
		public bool alert = false;

		public Mob_Living_Carbon_Brain ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: say.dm
		public override int lingcheck(  ) {
			return 0;
		}

		// Function from file: say.dm
		public override int radio( dynamic message = null, string message_mode = null, ByTable spans = null ) {
			Obj_Item_Device_Mmi R = null;

			
			if ( Lang13.Bool( message_mode ) && this.container is Obj_Item_Device_Mmi_RadioEnabled ) {
				R = this.container;

				if ( Lang13.Bool( ((dynamic)R).radio ) ) {
					((Obj_Item)((dynamic)R).radio).talk_into( this, message, null, spans );
					return 3;
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			
			if ( !( this.container != null && this.container is Obj_Item_Device_Mmi ) ) {
				return false;
			} else {
				
				if ( Rand13.PercentChance( ((int)( this.emp_damage * 4 )) ) ) {
					
					if ( Rand13.PercentChance( 10 ) ) {
						return false;
					} else {
						message = GlobalFuncs.Gibberish( message, this.emp_damage * 6 );
					}
				}
				base.say( (object)(message), bubble_type );
			}
			return false;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			return base.Login();
		}

		// Function from file: life.dm
		public override bool handle_regular_hud_updates(  ) {
			this.handle_vision();
			this.handle_hud_icons_health();
			this.update_action_buttons();
			return true;
		}

		// Function from file: life.dm
		public override void handle_changeling(  ) {
			return;
		}

		// Function from file: life.dm
		public override void handle_status_effects(  ) {
			return;
		}

		// Function from file: life.dm
		public override void handle_disabilities(  ) {
			
			if ( Lang13.Bool( this.disabilities & 1 ) || this.stat != 0 ) {
				this.eye_blind = Num13.MaxInt( ((int)( this.eye_blind )), 1 );
			} else {
				
				if ( this.eye_blind != 0 ) {
					this.eye_blind = 0;
				}

				if ( this.eye_blurry != 0 ) {
					this.eye_blurry = 0;
				}

				if ( this.eye_stat != 0 ) {
					this.eye_stat = 0;
				}
			}

			if ( Lang13.Bool( this.disabilities & 4 ) ) {
				this.setEarDamage( -1, Num13.MaxInt( ((int)( this.ear_deaf ??0 )), 1 ) );
			} else if ( this.ear_damage < 100 ) {
				this.setEarDamage( 0, 0 );
			}
			return;
		}

		// Function from file: life.dm
		public override bool handle_regular_status_updates(  ) {
			
			if ( this.stat == 2 ) {
				this.eye_blind = Num13.MaxInt( ((int)( this.eye_blind )), 1 );
				this.silent = 0;
			} else {
				this.updatehealth();

				if ( !( this.container != null ) && ( Convert.ToDouble( this.health ) < ( GlobalVars.config.health_threshold_dead ??0) || Game13.time - this.timeofhostdeath > ( GlobalVars.config.revival_brain_life ??0) ) ) {
					this.death();
					this.eye_blind = Num13.MaxInt( ((int)( this.eye_blind )), 1 );
					this.silent = 0;
					return false;
				} else {
					this.stat = 0;

					if ( this.emp_damage != 0 ) {
						
						if ( !( this.container != null && this.container is Obj_Item_Device_Mmi ) ) {
							this.emp_damage = 0;
						} else {
							this.emp_damage = Num13.Round( this.emp_damage, 1 );
						}

						dynamic _a = this.emp_damage; // Was a switch-case, sorry for the mess.
						if ( 31<=_a&&_a<=Double.PositiveInfinity ) {
							this.emp_damage = 30;
						} else if ( 21<=_a&&_a<=30 ) {
							this.eye_blind = Num13.MaxInt( ((int)( this.eye_blind )), 1 );
							this.setEarDamage( -1, 1 );
							this.silent = 1;

							if ( !this.alert ) {
								this.emote( "alarm" );
								this.WriteMsg( "<span class='danger'>Major electrical distruption detected: System rebooting.</span>" );
								this.alert = true;
							}

							if ( Rand13.PercentChance( 75 ) ) {
								this.emp_damage -= 1;
							}
						} else if ( 11<=_a&&_a<=19 ) {
							this.eye_blurry = 1;
							this.setEarDamage( 1, -1 );

							if ( !this.alert ) {
								this.emote( "alert" );
								this.WriteMsg( "<span class='danger'>Primary systems are now online.</span>" );
								this.alert = true;
							}

							if ( Rand13.PercentChance( 50 ) ) {
								this.emp_damage -= 1;
							}
						} else if ( 2<=_a&&_a<=9 ) {
							
							if ( !this.alert ) {
								this.emote( "notice" );
								this.WriteMsg( "<span class='danger'>System reboot nearly complete.</span>" );
								this.alert = true;
							}

							if ( Rand13.PercentChance( 25 ) ) {
								this.emp_damage -= 1;
							}
						} else if ( _a==20 ) {
							this.alert = false;
							this.eye_blind = 0;
							this.setEarDamage( -1, 0 );
							this.silent = 0;
							this.emp_damage -= 1;
						} else if ( _a==10 ) {
							this.alert = false;
							this.eye_blurry = 0;
							this.setEarDamage( 0, -1 );
							this.emp_damage -= 1;
						} else if ( _a==1 ) {
							this.alert = false;
							this.WriteMsg( "<span class='danger'>All systems restored.</span>" );
							this.emp_damage -= 1;
						}
					} else {
						this.eye_blind = 0;
					}
				}
				return true;
			}
			return false;
		}

		// Function from file: life.dm
		public void handle_temperature_damage( bool body_part = false, dynamic exposed_temperature = null, double exposed_intensity = 0 ) {
			int discomfort = 0;
			int discomfort2 = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}

			if ( Convert.ToDouble( exposed_temperature ) > Convert.ToDouble( this.bodytemperature ) ) {
				discomfort = Num13.MinInt( ((int)( Math.Abs( Convert.ToDouble( exposed_temperature - this.bodytemperature ) ) * exposed_intensity / 2000000 )), 1 );
				this.adjustFireLoss( discomfort * 20 );
			} else {
				discomfort2 = Num13.MinInt( ((int)( Math.Abs( Convert.ToDouble( exposed_temperature - this.bodytemperature ) ) * exposed_intensity / 2000000 )), 1 );
				this.adjustFireLoss( discomfort2 * 5 );
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_environment( GasMixture environment = null ) {
			double environment_heat_capacity = 0;
			dynamic heat_turf = null;
			bool transfer_coefficient = false;

			
			if ( !( environment != null ) ) {
				return;
			}
			environment_heat_capacity = environment.heat_capacity();

			if ( GlobalFuncs.get_turf( this ) is Tile_Space ) {
				heat_turf = GlobalFuncs.get_turf( this );
				environment_heat_capacity = heat_turf.heat_capacity;
			}

			if ( Convert.ToDouble( environment.temperature ) > 323.41 || Convert.ToDouble( environment.temperature ) < 283.41 ) {
				transfer_coefficient = true;
				this.handle_temperature_damage( true, environment.temperature, environment_heat_capacity * ( transfer_coefficient ?1:0) );
			}

			if ( this.stat == 2 ) {
				this.bodytemperature += ( environment.temperature - this.bodytemperature ) * environment_heat_capacity * 0.1 / ( environment_heat_capacity + 270000 );
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_mutations_and_radiation(  ) {
			
			if ( this.radiation != 0 ) {
				
				if ( this.radiation > 100 ) {
					
					if ( !( this.container != null ) ) {
						this.WriteMsg( "<span class='danger'>You feel weak.</span>" );
					} else {
						this.WriteMsg( "<span class='danger'>STATUS: CRITICAL AMOUNTS OF RADIATION DETECTED.</span>" );
					}
				}

				dynamic _a = this.radiation; // Was a switch-case, sorry for the mess.
				if ( 50<=_a&&_a<=75 ) {
					
					if ( Rand13.PercentChance( 5 ) ) {
						
						if ( !( this.container != null ) ) {
							this.WriteMsg( "<span class='danger'>You feel weak.</span>" );
						} else {
							this.WriteMsg( "<span class='danger'>STATUS: DANGEROUS LEVELS OF RADIATION DETECTED.</span>" );
						}
					}
				}
				base.handle_mutations_and_radiation();
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_breathing(  ) {
			return;
		}

		// Function from file: emote.dm
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			int t1 = 0;
			dynamic M = null;

			
			if ( !( this.container != null && this.container is Obj_Item_Device_Mmi ) ) {
				return;
			}

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( this.stat == 2 ) {
				return;
			}

			switch ((string)( act )) {
				case "alarm":
					this.WriteMsg( "You sound an alarm." );
					message = "<B>" + this + "</B> sounds an alarm.";
					m_type = 2;
					break;
				case "alert":
					this.WriteMsg( "You let out a distressed noise." );
					message = "<B>" + this + "</B> lets out a distressed noise.";
					m_type = 2;
					break;
				case "beep":
				case "beeps":
					this.WriteMsg( "You beep." );
					message = "<B>" + this + "</B> beeps.";
					m_type = 2;
					break;
				case "blink":
				case "blinks":
					message = "<B>" + this + "</B> blinks.";
					m_type = 1;
					break;
				case "boop":
				case "boops":
					this.WriteMsg( "You boop." );
					message = "<B>" + this + "</B> boops.";
					m_type = 2;
					break;
				case "flash":
					message = "The lights on <B>" + this + "</B> flash quickly.";
					m_type = 1;
					break;
				case "notice":
					this.WriteMsg( "You play a loud tone." );
					message = "<B>" + this + "</B> plays a loud tone.";
					m_type = 2;
					break;
				case "whistle":
				case "whistles":
					this.WriteMsg( "You whistle." );
					message = "<B>" + this + "</B> whistles.";
					m_type = 2;
					break;
				case "help":
					this.WriteMsg( "Help for MMI emotes. You can use these emotes with say \"*emote\":\nalarm, alert, beep, blink, boop, flash, notice, whistle" );
					break;
				default:
					this.WriteMsg( "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
					break;
			}

			if ( Lang13.Bool( message ) ) {
				GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
					M = _b;
					

					if ( !Lang13.Bool( M.client ) || M is Mob_NewPlayer ) {
						continue;
					}

					if ( Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client ) && ( M.client.prefs.chat_toggles & 8 ) != 0 && !Map13.FetchViewers( null, this ).Contains( M ) ) {
						M.show_message( message );
					}
				}

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else if ( ( ( m_type ??0) & 2 ) != 0 ) {
					this.audible_message( message );
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( dynamic animation = null ) {
			animation = animation ?? 0;

			
			if ( this.container != null && this.container is Obj_Item_Device_Mmi ) {
				GlobalFuncs.qdel( this.container );
			}

			if ( this.loc != null ) {
				
				if ( this.loc is Obj_Item_Organ_Internal_Brain ) {
					GlobalFuncs.qdel( this.loc );
				}
			}
			base.gib( (object)(animation) );
			return null;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			
			if ( this.stat == 2 ) {
				return false;
			}

			if ( !( gibbed == true ) && this.container != null && this.container is Obj_Item_Device_Mmi ) {
				this.container.visible_message( "<span class='warning'>" + this + "'s MMI flatlines!</span>", "<span class='italics'>You hear something flatline.</span>" );

				if ( this is Obj_Item_Organ_Internal_Brain_Alien ) {
					this.container.icon_state = "mmi_alien_dead";
				} else {
					this.container.icon_state = "mmi_dead";
				}
			}
			this.stat = 2;

			if ( this.blind != null ) {
				this.blind.layer = 0;
			}
			this.sight |= 28;
			this.see_in_dark = 8;
			this.see_invisible = 45;
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );
			}
			return base.death( gibbed, toast );
		}

		// Function from file: brain.dm
		public override bool flash_eyes( double? intensity = null, bool? override_blindness_check = null, bool? affect_silicon = null ) {
			intensity = intensity ?? 1;
			override_blindness_check = override_blindness_check ?? false;
			affect_silicon = affect_silicon ?? false;

			return false;
		}

		// Function from file: brain.dm
		public override bool check_ear_prot(  ) {
			return true;
		}

		// Function from file: brain.dm
		public override void UnarmedAttack( dynamic A = null, bool? proximity_flag = null ) {
			return;
		}

		// Function from file: brain.dm
		public override void on_forcemove( dynamic newloc = null ) {
			
			if ( this.container != null ) {
				this.container.loc = newloc;
			} else {
				Task13.Crash( "Brainmob without container." );
			}
			this.loc = this.container;
			return;
		}

		// Function from file: brain.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: brain.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			return false;
		}

		// Function from file: brain.dm
		public override void toggle_throw_mode(  ) {
			return;
		}

		// Function from file: brain.dm
		public override bool update_canmove(  ) {
			
			if ( this.in_contents_of( typeof(Obj_Mecha) ) ) {
				this.canmove = true;
			} else {
				this.canmove = false;
			}
			return this.canmove;
		}

		// Function from file: brain.dm
		public override dynamic Destroy(  ) {
			
			if ( Lang13.Bool( this.key ) ) {
				
				if ( this.stat != 2 ) {
					this.death( true );
				}
				this.ghostize();
			}
			return base.Destroy();
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( !this.canSuicide() ) {
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( !this.canSuicide() ) {
				return;
			}

			if ( confirm == "Yes" ) {
				this.suiciding = true;
				this.visible_message( "<span class='danger'>" + this + "'s brain is growing dull and lifeless. It looks like it's lost the will to live.</span>", "<span class='userdanger'>" + this + "'s brain is growing dull and lifeless. It looks like it's lost the will to live.</span>" );
				Task13.Schedule( 50, (Task13.Closure)(() => {
					this.death( false );
					this.suiciding = false;
					return;
				}));
			}
			return;
		}

	}

}