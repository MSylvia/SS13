// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SpellbookEntry : Game_Data {

		public string name = "Entry Name";
		public Type spell_type = null;
		public string desc = "";
		public string category = "Offensive";
		public string log_name = "XX";
		public int cost = 2;
		public bool refundable = true;
		public int surplus = -1;
		public dynamic S = null;
		public string buy_word = "Learn";
		public int? limit = null;

		// Function from file: spellbook.dm
		public virtual string GetInfo(  ) {
			string dat = null;

			
			if ( !Lang13.Bool( this.S ) ) {
				this.S = Lang13.Call( this.spell_type );
			}
			dat = "";
			dat += "<b>" + Lang13.Initial( this.S, "name" ) + "</b>";

			if ( this.S.charge_type == "recharge" ) {
				dat += " Cooldown:" + this.S.charge_max / 10;
			}
			dat += " Cost:" + this.cost + "<br>";
			dat += "<i>" + this.S.desc + this.desc + "</i><br>";
			dat += "" + ( Lang13.Bool( this.S.clothes_req ) ? "Needs wizard garb" : "Can be cast without wizard garb" ) + "<br>";
			return dat;
		}

		// Function from file: spellbook.dm
		public int Refund( Mob user = null, Obj_Item_Weapon_Spellbook book = null ) {
			dynamic A = null;
			int spell_levels = 0;
			Obj_Effect_ProcHolder_Spell aspell = null;

			A = Lang13.FindObj( typeof(Zone_WizardStation) );

			if ( !A.contents.Contains( user ) ) {
				user.WriteMsg( "<span clas=='warning'>You can only refund spells at the wizard lair</span>" );
				return -1;
			}

			if ( !Lang13.Bool( this.S ) ) {
				this.S = Lang13.Call( this.spell_type );
			}
			spell_levels = 0;

			foreach (dynamic _a in Lang13.Enumerate( user.mind.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
				aspell = _a;
				

				if ( Lang13.Initial( this.S, "name" ) == Lang13.Initial( aspell, "name" ) ) {
					spell_levels = aspell.spell_level;
					user.mind.spell_list.Remove( aspell );
					GlobalFuncs.qdel( this.S );
					return this.cost * ( spell_levels + 1 );
				}
			}
			return -1;
		}

		// Function from file: spellbook.dm
		public bool CanRefund( dynamic user = null, Obj_Item_Weapon_Spellbook book = null ) {
			Obj_Effect_ProcHolder_Spell aspell = null;

			
			if ( !this.refundable ) {
				return false;
			}

			if ( !Lang13.Bool( this.S ) ) {
				this.S = Lang13.Call( this.spell_type );
			}

			foreach (dynamic _a in Lang13.Enumerate( user.mind.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
				aspell = _a;
				

				if ( Lang13.Initial( this.S, "name" ) == Lang13.Initial( aspell, "name" ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: spellbook.dm
		public virtual bool Buy( Mob user = null, Obj_Item_Weapon_Spellbook book = null ) {
			Obj_Effect_ProcHolder_Spell aspell = null;

			
			if ( !Lang13.Bool( this.S ) || GlobalFuncs.qdeleted( this.S ) ) {
				this.S = Lang13.Call( this.spell_type );
			}

			foreach (dynamic _b in Lang13.Enumerate( user.mind.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
				aspell = _b;
				

				if ( Lang13.Initial( this.S, "name" ) == Lang13.Initial( aspell, "name" ) ) {
					
					if ( aspell.spell_level >= aspell.level_max ) {
						user.WriteMsg( "<span class='warning'>This spell cannot be improved further.</span>" );
						return false;
					} else {
						aspell.name = Lang13.Initial( aspell, "name" );
						aspell.spell_level++;
						aspell.charge_max = Num13.Floor( Convert.ToDouble( Lang13.Initial( aspell, "charge_max" ) - aspell.spell_level * Convert.ToDouble( Lang13.Initial( aspell, "charge_max" ) - aspell.cooldown_min ) / aspell.level_max ) );

						if ( aspell.charge_max < aspell.charge_counter ) {
							aspell.charge_counter = aspell.charge_max;
						}

						switch ((int)( aspell.spell_level )) {
							case 1:
								user.WriteMsg( "<span class='notice'>You have improved " + aspell.name + " into Efficient " + aspell.name + ".</span>" );
								aspell.name = "Efficient " + aspell.name;
								break;
							case 2:
								user.WriteMsg( "<span class='notice'>You have further improved " + aspell.name + " into Quickened " + aspell.name + ".</span>" );
								aspell.name = "Quickened " + aspell.name;
								break;
							case 3:
								user.WriteMsg( "<span class='notice'>You have further improved " + aspell.name + " into Free " + aspell.name + ".</span>" );
								aspell.name = "Free " + aspell.name;
								break;
							case 4:
								user.WriteMsg( "<span class='notice'>You have further improved " + aspell.name + " into Instant " + aspell.name + ".</span>" );
								aspell.name = "Instant " + aspell.name;
								break;
						}

						if ( aspell.spell_level >= aspell.level_max ) {
							user.WriteMsg( "<span class='notice'>This spell cannot be strengthened any further.</span>" );
						}
						return true;
					}
				}
			}
			GlobalFuncs.feedback_add_details( "wizard_spell_learned", this.log_name );
			user.mind.AddSpell( this.S );
			user.WriteMsg( "<span class='notice'>You have learned " + this.S.name + ".</span>" );
			return true;
		}

		// Function from file: spellbook.dm
		public virtual bool CanBuy( dynamic user = null, Obj_Item_Weapon_Spellbook book = null ) {
			
			if ( book.uses < this.cost || this.limit == 0 ) {
				return false;
			}
			return true;
		}

		// Function from file: spellbook.dm
		public virtual bool IsAvailible(  ) {
			return true;
		}

	}

}