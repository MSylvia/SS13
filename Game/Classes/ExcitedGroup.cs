// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ExcitedGroup : Game_Data {

		public ByTable turf_list = new ByTable();
		public int breakdown_cooldown = 0;

		// Function from file: LINDA_turf_tile.dm
		public ExcitedGroup (  ) {
			GlobalVars.SSair.excited_groups.Add( this );
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void garbage_collect(  ) {
			Tile_Simulated T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.turf_list, typeof(Tile_Simulated) )) {
				T = _a;
				
				T.excited_group = null;
			}
			this.turf_list.Cut();
			GlobalVars.SSair.excited_groups.Remove( this );
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void dismantle(  ) {
			Tile_Simulated T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.turf_list, typeof(Tile_Simulated) )) {
				T = _a;
				
				T.excited = false;
				T.recently_active = false;
				T.excited_group = null;
				GlobalVars.SSair.active_turfs.Remove( T );
			}
			this.garbage_collect();
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void self_breakdown(  ) {
			GasMixture A = null;
			Gas_SleepingAgent S = null;
			Tile_Simulated T = null;
			Gas N = null;
			Tile_Simulated T2 = null;
			Gas G = null;
			Gas_SleepingAgent G2 = null;

			A = new GasMixture();
			S = new Gas_SleepingAgent();
			A.trace_gases.Add( S );

			foreach (dynamic _b in Lang13.Enumerate( this.turf_list, typeof(Tile_Simulated) )) {
				T = _b;
				
				A.oxygen += T.air.oxygen ??0;
				A.carbon_dioxide += T.air.carbon_dioxide ??0;
				A.nitrogen += T.air.nitrogen;
				A.toxins += T.air.toxins ??0;

				if ( T.air.trace_gases.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( T.air.trace_gases, typeof(Gas) )) {
						N = _a;
						
						S.moles += N.moles ??0;
					}
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( this.turf_list, typeof(Tile_Simulated) )) {
				T2 = _d;
				
				T2.air.oxygen = ( A.oxygen ??0) / this.turf_list.len;
				T2.air.carbon_dioxide = ( A.carbon_dioxide ??0) / this.turf_list.len;
				T2.air.nitrogen = A.nitrogen / this.turf_list.len;
				T2.air.toxins = ( A.toxins ??0) / this.turf_list.len;

				if ( ( S.moles ??0) > 0 ) {
					
					if ( T2.air.trace_gases.len != 0 ) {
						
						foreach (dynamic _c in Lang13.Enumerate( T2.air.trace_gases, typeof(Gas) )) {
							G = _c;
							
							G.moles = ( S.moles ??0) / this.turf_list.len;
						}
					} else {
						G2 = new Gas_SleepingAgent();
						G2.moles = ( S.moles ??0) / this.turf_list.len;
						T2.air.trace_gases.Add( G2 );
					}
				}
				T2.update_visuals();
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void reset_cooldowns(  ) {
			this.breakdown_cooldown = 0;
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void merge_groups( ExcitedGroup E = null ) {
			Tile_Simulated T = null;
			Tile_Simulated T2 = null;

			
			if ( this.turf_list.len > E.turf_list.len ) {
				GlobalVars.SSair.excited_groups.Remove( E );

				foreach (dynamic _a in Lang13.Enumerate( E.turf_list, typeof(Tile_Simulated) )) {
					T = _a;
					
					T.excited_group = this;
					this.turf_list.Add( T );
					this.reset_cooldowns();
				}
			} else {
				GlobalVars.SSair.excited_groups.Remove( this );

				foreach (dynamic _b in Lang13.Enumerate( this.turf_list, typeof(Tile_Simulated) )) {
					T2 = _b;
					
					T2.excited_group = E;
					E.turf_list.Add( T2 );
					E.reset_cooldowns();
				}
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void add_turf( Tile T = null ) {
			this.turf_list.Add( T );
			((dynamic)T).excited_group = this;
			((dynamic)T).recently_active = 1;
			this.reset_cooldowns();
			return;
		}

	}

}