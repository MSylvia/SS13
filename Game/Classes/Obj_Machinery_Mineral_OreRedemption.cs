// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_OreRedemption : Obj_Machinery_Mineral {

		public ByTable stk_types = new ByTable();
		public ByTable stk_amt = new ByTable();
		public ByTable stack_list = new ByTable( 0 );
		public dynamic inserted_id = null;
		public double points = 0;
		public dynamic ore_pickup_rate = 15;
		public dynamic sheet_per_ore = 1;
		public dynamic point_upgrade = 1;
		public ByTable ore_values = new ByTable().Set( "sand", 1 ).Set( "iron", 1 ).Set( "plasma", 15 ).Set( "silver", 16 ).Set( "gold", 18 ).Set( "uranium", 30 ).Set( "diamond", 50 ).Set( "bananium", 60 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.req_access = new ByTable(new object [] { 64 });
			this.icon = "icons/obj/machines/mining_machines.dmi";
			this.icon_state = "ore_redemption";
		}

		// Function from file: equipment_locker.dm
		public Obj_Machinery_Mineral_OreRedemption ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_OreRedemption( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Device_Assembly_Igniter( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.RefreshParts();
			return;
		}

		// Function from file: equipment_locker.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( Lang13.Bool( this.powered() ) ) {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			} else {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-off";
			}
			return null;
		}

		// Function from file: equipment_locker.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: equipment_locker.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			EffectSystem_SparkSpread s = null;

			s = new EffectSystem_SparkSpread();
			s.set_up( 5, 1, this );
			s.start();

			if ( severity == 1 ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					this.empty_content();
					GlobalFuncs.qdel( this );
				}
			} else if ( severity == 2 ) {
				
				if ( Rand13.PercentChance( 25 ) ) {
					this.empty_content();
					GlobalFuncs.qdel( this );
				}
			}
			return false;
		}

		// Function from file: equipment_locker.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic I = null;
			Base_Data inp = null;
			dynamic _out = null;
			dynamic desired = null;
			dynamic metalstack = null;
			dynamic plasmastack = null;
			dynamic desired2 = null;
			Obj_Item_Stack_Sheet_Plasteel plasteelout = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["choice"] ) ) {
				
				if ( this.inserted_id is Obj_Item_Weapon_Card_Id ) {
					
					if ( href_list["choice"] == "eject" ) {
						this.inserted_id.loc = this.loc;
						this.inserted_id.__CallVerb("Pick up" );
						this.inserted_id = null;
					}

					if ( href_list["choice"] == "claim" ) {
						
						if ( Lang13.Bool( this.inserted_id.access.Contains( GlobalVars.access_mining_station ) ) ) {
							this.inserted_id.mining_points += this.points;
							this.points = 0;
						} else {
							Task13.User.WriteMsg( "<span class='warning'>Required access not found.</span>" );
						}
					}
				} else if ( href_list["choice"] == "insert" ) {
					I = Task13.User.get_active_hand();

					if ( I is Obj_Item_Weapon_Card_Id ) {
						
						if ( !Task13.User.drop_item() ) {
							return null;
						}
						I.loc = this;
						this.inserted_id = I;
					} else {
						Task13.User.WriteMsg( "<span class='warning'>No valid ID.</span>" );
					}
				}
			}

			if ( Lang13.Bool( href_list["release"] ) ) {
				
				if ( this.check_access( this.inserted_id ) || this.allowed( Task13.User ) ) {
					
					if ( !this.stack_list.Contains( Lang13.FindClass( href_list["release"] ) ) ) {
						return null;
					}
					inp = this.stack_list[Lang13.FindClass( href_list["release"] )];
					_out = Lang13.Call( inp.type );
					desired = Interface13.Input( "How much?", "How much to eject?", 1, null, null, InputType.Num );
					_out.amount = Num13.MinInt( Convert.ToInt32( desired ), 50, Convert.ToInt32( ((dynamic)inp).amount ) );

					if ( Convert.ToDouble( _out.amount ) >= 1 ) {
						((dynamic)inp).amount -= _out.amount;
						this.unload_mineral( _out );
					}

					if ( Convert.ToDouble( ((dynamic)inp).amount ) < 1 ) {
						this.stack_list.Remove( Lang13.FindClass( href_list["release"] ) );
					}
				} else {
					Task13.User.WriteMsg( "<span class='warning'>Required access not found.</span>" );
				}
			}

			if ( Lang13.Bool( href_list["plasteel"] ) ) {
				
				if ( this.check_access( this.inserted_id ) || this.allowed( Task13.User ) ) {
					
					if ( !this.stack_list.Contains( typeof(Obj_Item_Stack_Sheet_Metal) ) ) {
						return null;
					}

					if ( !this.stack_list.Contains( typeof(Obj_Item_Stack_Sheet_Mineral_Plasma) ) ) {
						return null;
					}
					metalstack = this.stack_list[typeof(Obj_Item_Stack_Sheet_Metal)];
					plasmastack = this.stack_list[typeof(Obj_Item_Stack_Sheet_Mineral_Plasma)];
					desired2 = Interface13.Input( "How much?", "How much would you like to smelt?", 1, null, null, InputType.Num );
					plasteelout = new Obj_Item_Stack_Sheet_Plasteel();
					plasteelout.amount = Num13.MinInt( Convert.ToInt32( desired2 ), 50, Convert.ToInt32( metalstack.amount ), Convert.ToInt32( plasmastack.amount ) );

					if ( ( plasteelout.amount ??0) >= 1 ) {
						metalstack.amount -= plasteelout.amount;
						plasmastack.amount -= plasteelout.amount;
						this.unload_mineral( plasteelout );
					}
				} else {
					Task13.User.WriteMsg( "<span class='warning'>Required access not found.</span>" );
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: equipment_locker.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			Base_Data s = null;
			dynamic dat = null;
			dynamic O = null;
			dynamic metalstack = null;
			dynamic plasmastack = null;
			Browser popup = null;

			dat += "This machine only accepts ore. Gibtonite and Slag are not accepted.<br><br>";
			dat += "Current unclaimed points: " + this.points + "<br>";

			if ( this.inserted_id is Obj_Item_Weapon_Card_Id ) {
				dat += new Txt( "You have " ).item( this.inserted_id.mining_points ).str( " mining points collected. <A href='?src=" ).Ref( this ).str( ";choice=eject'>Eject ID.</A><br>" ).ToString();
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choice=claim'>Claim points.</A><br>" ).ToString();
			} else {
				dat += new Txt( "No ID inserted.  <A href='?src=" ).Ref( this ).str( ";choice=insert'>Insert ID.</A><br>" ).ToString();
			}

			foreach (dynamic _a in Lang13.Enumerate( this.stack_list )) {
				O = _a;
				
				s = this.stack_list[O];

				if ( Convert.ToDouble( ((dynamic)s).amount ) > 0 ) {
					
					if ( O == this.stack_list[1] ) {
						dat += "<br>";
					}
					dat += new Txt().item( GlobalFuncs.capitalize( ((dynamic)s).name ) ).str( ": " ).item( ((dynamic)s).amount ).str( " <A href='?src=" ).Ref( this ).str( ";release=" ).item( s.type ).str( "'>Release</A><br>" ).ToString();
				}
			}

			if ( this.stack_list.Contains( typeof(Obj_Item_Stack_Sheet_Metal) ) && this.stack_list.Contains( typeof(Obj_Item_Stack_Sheet_Mineral_Plasma) ) ) {
				metalstack = this.stack_list[typeof(Obj_Item_Stack_Sheet_Metal)];
				plasmastack = this.stack_list[typeof(Obj_Item_Stack_Sheet_Mineral_Plasma)];

				if ( Num13.MinInt( Convert.ToInt32( metalstack.amount ), Convert.ToInt32( plasmastack.amount ) ) != 0 ) {
					dat += new Txt( "Plasteel Alloy (Metal + Plasma): <A href='?src=" ).Ref( this ).str( ";plasteel=1'>Smelt</A><BR>" ).ToString();
				}
			}
			dat += "<br><div class='statusDisplay'><b>Mineral Value List:</b><BR>" + this.get_ore_values() + "</div>";
			popup = new Browser( user, "console_stacking_machine", "Ore Redemption Machine", 400, 500 );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: equipment_locker.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: equipment_locker.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic I = null;

			
			if ( !Lang13.Bool( this.powered() ) ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Card_Id ) {
				I = Task13.User.get_active_hand();

				if ( I is Obj_Item_Weapon_Card_Id && !( this.inserted_id is Obj_Item_Weapon_Card_Id ) ) {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					I.loc = this;
					this.inserted_id = I;
					this.interact( user );
				}
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( this.default_pry_open( A ) ) {
				return null;
			}

			if ( this.default_unfasten_wrench( user, A ) ) {
				return null;
			}

			if ( this.default_deconstruction_screwdriver( user, "ore_redemption-open", "ore_redemption", A ) ) {
				this.updateUsrDialog();
				return null;
			}

			if ( this.panel_open == true ) {
				
				if ( A is Obj_Item_Weapon_Crowbar ) {
					this.empty_content();
					this.default_deconstruction_crowbar( A );
				}
				return 1;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: equipment_locker.dm
		public override int? process( dynamic seconds = null ) {
			Tile T = null;
			int i = 0;
			Obj_Item_Weapon_Ore O = null;
			dynamic B = null;
			Obj_Item_Weapon_Ore O2 = null;

			
			if ( !( this.panel_open == true ) && Lang13.Bool( this.powered() ) ) {
				T = Map13.GetStep( this, this.input_dir );
				i = 0;

				if ( T != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Item_Weapon_Ore) )) {
						O = _a;
						

						if ( i >= Convert.ToDouble( this.ore_pickup_rate ) ) {
							break;
						} else if ( !( O != null ) || !( O.refined_type != null ) ) {
							continue;
						} else {
							this.process_sheet( O );
							i++;
						}
					}
				} else {
					B = Lang13.FindIn( typeof(Obj_Structure_OreBox), T );

					if ( Lang13.Bool( B ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( B.contents, typeof(Obj_Item_Weapon_Ore) )) {
							O2 = _b;
							

							if ( i >= Convert.ToDouble( this.ore_pickup_rate ) ) {
								break;
							} else if ( !( O2 != null ) || !( O2.refined_type != null ) ) {
								continue;
							} else {
								this.process_sheet( O2 );
								i++;
							}
						}
					}
				}
			}
			return null;
		}

		// Function from file: equipment_locker.dm
		public void empty_content(  ) {
			Obj_Item_Stack s = null;
			dynamic O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.stack_list )) {
				O = _a;
				
				s = this.stack_list[O];

				while (( s.amount ??0) > ( s.max_amount ??0)) {
					Lang13.Call( s.type, this.loc, s.max_amount );
					s.use( s.max_amount );
				}
				s.loc = this.loc;
				s.layer = Convert.ToDouble( Lang13.Initial( s, "layer" ) );
			}
			return;
		}

		// Function from file: equipment_locker.dm
		public string get_ore_values(  ) {
			string dat = null;
			dynamic ore = null;
			dynamic value = null;

			dat = "<table border='0' width='300'>";

			foreach (dynamic _a in Lang13.Enumerate( this.ore_values )) {
				ore = _a;
				
				value = this.ore_values[ore];
				dat += "<tr><td>" + GlobalFuncs.capitalize( ore ) + "</td><td>" + value * this.point_upgrade + "</td></tr>";
			}
			dat += "</table>";
			return dat;
		}

		// Function from file: equipment_locker.dm
		public Type SmeltMineral( Obj_Item_Weapon_Ore O = null ) {
			Type M = null;

			
			if ( O.refined_type != null ) {
				M = O.refined_type;
				this.points += O.points * Convert.ToDouble( this.point_upgrade );
				return M;
			}
			GlobalFuncs.qdel( O );
			return null;
		}

		// Function from file: equipment_locker.dm
		public void process_sheet( Obj_Item_Weapon_Ore O = null ) {
			Type processed_sheet = null;
			dynamic s = null;
			string msg = null;
			Obj_Machinery_RequestsConsole D = null;
			dynamic storage = null;

			processed_sheet = this.SmeltMineral( O );

			if ( processed_sheet != null ) {
				
				if ( !this.stack_list.Contains( processed_sheet ) ) {
					s = Lang13.Call( processed_sheet, this, 0 );
					s.amount = 0;
					this.stack_list[processed_sheet] = s;

					if ( s.name != "glass" && s.name != "metal" ) {
						msg = "" + GlobalFuncs.capitalize( s.name ) + " sheets are now available in the Cargo Bay.";

						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.allConsoles, typeof(Obj_Machinery_RequestsConsole) )) {
							D = _a;
							

							if ( D.department == "Science" || D.department == "Robotics" || D.department == "Research Director's Desk" || D.department == "Chemistry" && ( s.name == "uranium" || s.name == "solid plasma" ) ) {
								D.createmessage( "Ore Redemption Machine", "New minerals available!", msg, 1 );
							}
						}
					}
				}
				storage = this.stack_list[processed_sheet];
				storage.amount += this.sheet_per_ore;
				O.loc = null;
				GlobalFuncs.qdel( O );
			}
			return;
		}

		// Function from file: equipment_locker.dm
		public override void RefreshParts(  ) {
			dynamic ore_pickup_rate_temp = null;
			dynamic point_upgrade_temp = null;
			dynamic sheet_per_ore_temp = null;
			Obj_Item_Weapon_StockParts_MatterBin B = null;
			Obj_Item_Weapon_StockParts_Manipulator M = null;
			Obj_Item_Weapon_StockParts_MicroLaser L = null;

			ore_pickup_rate_temp = 15;
			point_upgrade_temp = 1;
			sheet_per_ore_temp = 1;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				B = _a;
				
				sheet_per_ore_temp = B.rating;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M = _b;
				
				ore_pickup_rate_temp = M.rating * 15;
			}

			foreach (dynamic _c in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				L = _c;
				
				point_upgrade_temp = L.rating;
			}
			this.ore_pickup_rate = ore_pickup_rate_temp;
			this.point_upgrade = point_upgrade_temp;
			this.sheet_per_ore = sheet_per_ore_temp;
			return;
		}

	}

}