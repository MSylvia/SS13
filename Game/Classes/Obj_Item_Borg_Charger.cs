// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Borg_Charger : Obj_Item_Borg {

		public string mode = "draw";
		public ByTable charge_machines = new ByTable(new object [] { typeof(Obj_Machinery_CellCharger), typeof(Obj_Machinery_Recharger), typeof(Obj_Machinery_RechargeStation), typeof(Obj_Machinery_MechBayRechargePort) });
		public ByTable charge_items = new ByTable(new object [] { typeof(Obj_Item_Weapon_StockParts_Cell), typeof(Obj_Item_Weapon_Gun_Energy) });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 4;
			this.icon_state = "charger_draw";
		}

		public Obj_Item_Borg_Charger ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: robot_items.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic M = null;
			dynamic cell = null;
			dynamic E = null;
			int draw = 0;
			dynamic cell2 = null;
			dynamic E2 = null;
			int draw2 = 0;

			
			if ( !( proximity_flag == true ) || !( user is Mob_Living_Silicon_Robot ) ) {
				return false;
			}

			if ( this.mode == "draw" ) {
				
				if ( GlobalFuncs.is_type_in_list( target, this.charge_machines ) ) {
					M = target;

					if ( Lang13.Bool( M.stat & 3 ) || !Lang13.Bool( M.anchored ) ) {
						user.WriteMsg( "<span class='warning'>" + M + " is unpowered!</span>" );
						return false;
					}
					user.WriteMsg( "<span class='notice'>You connect to " + M + "'s power line...</span>" );

					while (GlobalFuncs.do_after( user, 15, null, M, false )) {
						
						if ( !Lang13.Bool( user ) || !Lang13.Bool( user.cell ) || this.mode != "draw" ) {
							return false;
						}

						if ( Lang13.Bool( M.stat & 3 ) || !Lang13.Bool( M.anchored ) ) {
							break;
						}

						if ( !Lang13.Bool( user.cell.give( 150 ) ) ) {
							break;
						}
						((Obj_Machinery)M).f_use_power( 200 );
					}
					user.WriteMsg( "<span class='notice'>You stop charging youself.</span>" );
				} else if ( GlobalFuncs.is_type_in_list( target, this.charge_items ) ) {
					cell = target;

					if ( !( cell is Obj_Item_Weapon_StockParts_Cell ) ) {
						cell = Lang13.FindIn( typeof(Obj_Item_Weapon_StockParts_Cell), target );
					}

					if ( !Lang13.Bool( cell ) ) {
						user.WriteMsg( "<span class='warning'>" + target + " has no power cell!</span>" );
						return false;
					}

					if ( target is Obj_Item_Weapon_Gun_Energy ) {
						E = target;

						if ( !Lang13.Bool( E.can_charge ) ) {
							user.WriteMsg( "<span class='warning'>" + target + " has no power port!</span>" );
							return false;
						}
					}

					if ( !Lang13.Bool( cell.charge ) ) {
						user.WriteMsg( "<span class='warning'>" + target + " has no power!</span>" );
					}
					user.WriteMsg( "<span class='notice'>You connect to " + target + "'s power port...</span>" );

					while (GlobalFuncs.do_after( user, 15, null, target, false )) {
						
						if ( !Lang13.Bool( user ) || !Lang13.Bool( user.cell ) || this.mode != "draw" ) {
							return false;
						}

						if ( !Lang13.Bool( cell ) || !Lang13.Bool( target ) ) {
							return false;
						}

						if ( cell != target && cell.loc != target ) {
							return false;
						}
						draw = Num13.MinInt( Convert.ToInt32( cell.charge ), ((int)( cell.chargerate * 0.5 )), ((int)( ( user.cell.maxcharge ??0) - Convert.ToDouble( user.cell.charge ) )) );

						if ( !Lang13.Bool( cell.use( draw ) ) ) {
							break;
						}

						if ( !Lang13.Bool( user.cell.give( draw ) ) ) {
							break;
						}
						target.update_icon();
					}
					user.WriteMsg( "<span class='notice'>You stop charging youself.</span>" );
				}
			} else if ( GlobalFuncs.is_type_in_list( target, this.charge_items ) ) {
				cell2 = target;

				if ( !( cell2 is Obj_Item_Weapon_StockParts_Cell ) ) {
					cell2 = Lang13.FindIn( typeof(Obj_Item_Weapon_StockParts_Cell), target );
				}

				if ( !Lang13.Bool( cell2 ) ) {
					user.WriteMsg( "<span class='warning'>" + target + " has no power cell!</span>" );
					return false;
				}

				if ( target is Obj_Item_Weapon_Gun_Energy ) {
					E2 = target;

					if ( !Lang13.Bool( E2.can_charge ) ) {
						user.WriteMsg( "<span class='warning'>" + target + " has no power port!</span>" );
						return false;
					}
				}

				if ( Convert.ToDouble( cell2.charge ) >= ( cell2.maxcharge ??0) ) {
					user.WriteMsg( "<span class='warning'>" + target + " is already charged!</span>" );
				}
				user.WriteMsg( "<span class='notice'>You connect to " + target + "'s power port...</span>" );

				while (GlobalFuncs.do_after( user, 15, null, target, false )) {
					
					if ( !Lang13.Bool( user ) || !Lang13.Bool( user.cell ) || this.mode != "charge" ) {
						return false;
					}

					if ( !Lang13.Bool( cell2 ) || !Lang13.Bool( target ) ) {
						return false;
					}

					if ( cell2 != target && cell2.loc != target ) {
						return false;
					}
					draw2 = Num13.MinInt( Convert.ToInt32( user.cell.charge ), ((int)( cell2.chargerate * 0.5 )), ((int)( ( cell2.maxcharge ??0) - Convert.ToDouble( cell2.charge ) )) );

					if ( !Lang13.Bool( user.cell.use( draw2 ) ) ) {
						break;
					}

					if ( !Lang13.Bool( cell2.give( draw2 ) ) ) {
						break;
					}
					target.update_icon();
				}
				user.WriteMsg( "<span class='notice'>You stop charging " + target + ".</span>" );
			}
			return false;
		}

		// Function from file: robot_items.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.mode == "draw" ) {
				this.mode = "charge";
			} else {
				this.mode = "draw";
			}
			user.WriteMsg( "<span class='notice'>You toggle " + this + " to \"" + this.mode + "\" mode.</span>" );
			this.update_icon();
			return null;
		}

		// Function from file: robot_items.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
			this.icon_state = "charger_" + this.mode;
			return null;
		}

	}

}