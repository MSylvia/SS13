// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class AirlockMaker : Game_Data {

		public Obj_Structure_DoorAssembly linked = null;
		public ByTable access_used = null;
		public bool require_all = true;
		public string paintjob = "none";
		public bool glassdoor = false;
		public string doorname = "airlock";

		// Function from file: airlock_maker.dm
		public AirlockMaker ( Ent_Static target_loc = null ) {
			this.linked = new Obj_Structure_DoorAssembly( target_loc );
			this.linked.maker = this;
			this.linked.anchored = 0;
			this.access_used = new ByTable();
			this.interact();
			return;
		}

		// Function from file: airlock_maker.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string newname = null;
			double? value = null;
			Ent_Static t_loc = null;
			dynamic target_type = null;
			dynamic final = null;
			dynamic D = null;

			
			if ( !( Task13.User != null ) ) {
				return null;
			}

			if ( !( this != null ) || !( this.linked != null ) || !( this.linked.loc != null ) ) {
				Interface13.Browse( Task13.User, null, "window=airlockmaker" );
				return null;
			}

			if ( href_list.Contains( "rename" ) ) {
				newname = GlobalFuncs.stripped_input( Task13.User, "New airlock name:", "Name the airlock", this.doorname );

				if ( Lang13.Bool( newname ) ) {
					this.doorname = newname;
				}
			}

			if ( href_list.Contains( "access" ) ) {
				value = String13.ParseNumber( href_list["access"] );
				this.access_used.Xor( value );
			}

			if ( href_list.Contains( "reqall" ) ) {
				this.require_all = !this.require_all;
			}

			if ( href_list.Contains( "paint" ) ) {
				this.paintjob = href_list["paint"];
			}

			if ( href_list.Contains( "glass" ) ) {
				this.glassdoor = !this.glassdoor;
			}

			if ( href_list.Contains( "cancel" ) ) {
				Interface13.Browse( Task13.User, null, "window=airlockmaker" );
				GlobalFuncs.qdel( this.linked );
				GlobalFuncs.qdel( this );
				return null;
			}

			if ( href_list.Contains( "done" ) ) {
				Interface13.Browse( Task13.User, null, "window=airlockmaker" );
				t_loc = this.linked.loc;
				GlobalFuncs.qdel( this.linked );

				if ( !( t_loc is Tile ) ) {
					return null;
				}
				target_type = "/obj/machinery/door/airlock";

				if ( this.glassdoor ) {
					
					if ( this.paintjob != "none" ) {
						
						if ( new ByTable(new object [] { "external", "highsecurity", "maintenance" }).Contains( this.paintjob ) ) {
							target_type += "/" + this.paintjob;
						} else {
							target_type += "/glass_" + this.paintjob;
						}
					} else {
						target_type += "/glass";
					}
				} else if ( this.paintjob != "none" ) {
					target_type += "/" + this.paintjob;
				}
				final = target_type;
				target_type = Lang13.FindClass( final );

				if ( !Lang13.Bool( target_type ) ) {
					Task13.User.WriteMsg( "Didn't work, contact Sayu with this: " + final );
					Interface13.Browse( Task13.User, null, "window=airlockmaker" );
					return null;
				}
				D = Lang13.Call( target_type, t_loc );
				D.name = this.doorname;

				if ( this.access_used.len == 0 ) {
					D.req_access = null;
					D.req_one_access = null;
				} else if ( this.require_all ) {
					D.req_access = this.access_used.Copy();
					D.req_one_access = null;
				} else {
					D.req_access = null;
					D.req_one_access = this.access_used.Copy();
				}
				return null;
			}
			this.interact();
			return null;
		}

		// Function from file: airlock_maker.dm
		public void interact(  ) {
			ByTable leftcolumn = null;
			ByTable rightcolumn = null;
			dynamic access = null;
			dynamic option = null;
			int? length = null;
			string dat = null;
			int? i = null;

			leftcolumn = new ByTable();
			rightcolumn = new ByTable();
			leftcolumn.Add( "<u><b>Required Access</b></u>" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_all_accesses() )) {
				access = _a;
				
				leftcolumn.Add( this.linkpretty( "access=" + access, GlobalFuncs.get_access_desc( access ), this.access_used.Contains( access ) ) );
			}
			leftcolumn.Add( "Require all listed accesses: " + this.linkpretty( "reqall", null, this.require_all ) );
			rightcolumn.Add( "<u><b>Paintjob</b></u>" );

			foreach (dynamic _b in Lang13.Enumerate( new ByTable(new object [] { "none", "engineering", "atmos", "security", "command", "medical", "research", "mining", "maintenance", "external", "highsecurity" }) )) {
				option = _b;
				
				rightcolumn.Add( this.linkpretty( "paint=" + option, option, option == this.paintjob ) );
			}
			rightcolumn.Add( "Glass door: " + this.linkpretty( "glass", null, this.glassdoor ) + "<br><br>" );
			length = Num13.MaxInt( leftcolumn.len, rightcolumn.len );
			dat = "You may move the model airlock around.  A new airlock will be built in its space when you click done, below.<hr><br>";
			dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";rename'>Door name</a>: \"" ).item( this.doorname ).str( "\"" ).ToString();
			dat += "<table>";
			i = null;
			i = 1;

			while (( i ??0) <= ( length ??0)) {
				dat += "<tr><td>";

				if ( ( i ??0) <= leftcolumn.len ) {
					dat += leftcolumn[i];
				}
				dat += "</td><td>";

				if ( ( i ??0) <= rightcolumn.len ) {
					dat += rightcolumn[i];
				}
				dat += "</td></tr>";
				i++;
			}
			dat += new Txt( "</table><hr><a href='?src=" ).Ref( this ).str( ";done'>Finalize Airlock Construction</a> | <a href='?src=" ).Ref( this ).str( ";cancel'>Cancel and Destroy Airlock</a>" ).ToString();
			Interface13.Browse( Task13.User, dat, "window=airlockmaker" );
			return;
		}

		// Function from file: airlock_maker.dm
		public string linkpretty( string href = null, dynamic desc = null, bool active = false ) {
			
			if ( !Lang13.Bool( desc ) ) {
				desc = GlobalVars.defaults[( active ?1:0) + 1];
			}

			if ( active ) {
				return new Txt( "<a href='?src=" ).Ref( this ).str( ";" ).item( href ).str( "'><b>" ).item( desc ).str( "</b></a>" ).ToString();
			}
			return new Txt( "<a href='?src=" ).Ref( this ).str( ";" ).item( href ).str( "'><i>" ).item( desc ).str( "</i></a>" ).ToString();
		}

	}

}