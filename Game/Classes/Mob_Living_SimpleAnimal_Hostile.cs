// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile : Mob_Living_SimpleAnimal {

		public dynamic target = null;
		public bool ranged = false;
		public bool rapid = false;
		public dynamic projectiletype = null;
		public string projectilesound = null;
		public dynamic casingtype = null;
		public int move_to_delay = 3;
		public ByTable friends = new ByTable();
		public ByTable emote_taunt = new ByTable();
		public dynamic taunt_chance = 0;
		public string ranged_message = "fires";
		public int ranged_cooldown = 0;
		public int ranged_cooldown_cap = 3;
		public dynamic retreat_distance = null;
		public dynamic minimum_distance = 1;
		public bool robust_searching = false;
		public int? vision_range = 9;
		public int? aggro_vision_range = 9;
		public int idle_vision_range = 9;
		public int search_objects = 0;
		public ByTable wanted_objects = new ByTable();
		public int stat_attack = 0;
		public bool stat_exclusive = false;
		public int attack_same = 0;
		public int AIStatus = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.faction = new ByTable(new object [] { "hostile" });
			this.stop_automated_movement_when_pulled = false;
			this.environment_smash = 1;
		}

		public Mob_Living_SimpleAnimal_Hostile ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: hostile.dm
		public override void RangedAttack( dynamic A = null, string _params = null ) {
			
			if ( this.ranged && this.ranged_cooldown <= 0 ) {
				this.target = A;
				this.OpenFire( A );
			}
			base.RangedAttack( (object)(A), _params );
			return;
		}

		// Function from file: hostile.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			this.LoseTarget();
			base.death( gibbed, toast );
			return false;
		}

		// Function from file: hostile.dm
		public override bool adjustHealth( dynamic amount = null ) {
			base.adjustHealth( (object)(amount) );

			if ( !Lang13.Bool( this.ckey ) && !( this.stat != 0 ) && this.search_objects < 3 && Convert.ToDouble( amount ) > 0 ) {
				
				if ( this.search_objects != 0 ) {
					this.search_objects = 0;
					this.target = null;
				}

				if ( this.AIStatus == 2 ) {
					this.AIStatus = 1;
					this.FindTarget();
				} else if ( this.target != null && Rand13.PercentChance( 40 ) ) {
					this.FindTarget();
				}
			}
			return false;
		}

		// Function from file: hostile.dm
		public override bool CanAttack( dynamic the_target = null ) {
			dynamic M = null;
			dynamic L = null;
			bool faction_check = false;

			
			if ( this.see_invisible < Convert.ToDouble( the_target.invisibility ) ) {
				return false;
			}

			if ( this.search_objects < 2 ) {
				
				if ( the_target is Obj_Mecha ) {
					M = the_target;

					if ( Lang13.Bool( M.occupant ) ) {
						
						if ( this.CanAttack( M.occupant ) ) {
							return true;
						}
					}
				}

				if ( the_target is Mob_Living ) {
					L = the_target;
					faction_check = this.faction_check( L );

					if ( this.robust_searching ) {
						
						if ( Convert.ToDouble( L.stat ) > this.stat_attack || Convert.ToInt32( L.stat ) != this.stat_attack && this.stat_exclusive ) {
							return false;
						}

						if ( faction_check && !( this.attack_same != 0 ) || !faction_check && this.attack_same == 2 ) {
							return false;
						}

						if ( this.friends.Contains( L ) ) {
							return false;
						}
					} else {
						
						if ( Lang13.Bool( L.stat ) ) {
							return false;
						}

						if ( faction_check && !( this.attack_same != 0 ) ) {
							return false;
						}
					}
					return true;
				}
			}

			if ( the_target is Obj ) {
				
				if ( this.wanted_objects.Contains( the_target.type ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: hostile.dm
		public virtual bool AIShouldSleep( ByTable possible_targets = null ) {
			return !Lang13.Bool( this.FindTarget( possible_targets, true ) );
		}

		// Function from file: hostile.dm
		public bool AICanContinue( ByTable possible_targets = null ) {
			bool _default = false;

			
			switch ((int)( this.AIStatus )) {
				case 1:
					_default = true;
					break;
				case 2:
					
					if ( Lang13.Bool( this.FindTarget( possible_targets, true ) ) ) {
						_default = true;
						this.AIStatus = 1;
					} else {
						_default = false;
					}
					break;
			}
			return _default;
		}

		// Function from file: hostile.dm
		public bool FindHidden(  ) {
			Ent_Static A = null;

			
			if ( this.target.loc is Obj_Structure_Closet || this.target.loc is Obj_Machinery_Disposal || this.target.loc is Obj_Machinery_Sleeper ) {
				A = this.target.loc;
				this.Goto( A, this.move_to_delay, this.minimum_distance );

				if ( A.Adjacent( this ) ) {
					A.attack_animal( this );
				}
				return true;
			}
			return false;
		}

		// Function from file: hostile.dm
		public void EscapeConfinement(  ) {
			Ent_Static A = null;

			
			if ( this.buckled != null ) {
				this.buckled.attack_animal( this );
			}

			if ( !( this.loc is Tile ) && this.loc != null ) {
				A = this.loc;
				A.attack_animal( this );
			}
			return;
		}

		// Function from file: hostile.dm
		public virtual void DestroySurroundings(  ) {
			dynamic dir = null;
			Tile T = null;
			Ent_Static A = null;

			
			if ( this.environment_smash != 0 ) {
				this.EscapeConfinement();

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					dir = _b;
					
					T = Map13.GetStep( this, Convert.ToInt32( dir ) );

					if ( T is Tile_Simulated_Wall || T is Tile_Simulated_Mineral ) {
						
						if ( T.Adjacent( this ) ) {
							T.attack_animal( this );
						}
					}

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
						A = _a;
						

						if ( !A.Adjacent( this ) ) {
							continue;
						}

						if ( A is Obj_Structure_Window || A is Obj_Structure_Closet || A is Obj_Structure_Table || A is Obj_Structure_Grille || A is Obj_Structure_Rack ) {
							A.attack_animal( this );
						}
					}
				}
			}
			return;
		}

		// Function from file: hostile.dm
		public virtual void Shoot( dynamic targeted_atom = null ) {
			dynamic startloc = null;
			dynamic casing = null;
			dynamic P = null;

			
			if ( targeted_atom == this.loc ) {
				return;
			}
			startloc = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( this.casingtype ) ) {
				casing = Lang13.Call( this.casingtype );
				GlobalFuncs.playsound( this, this.projectilesound, 100, 1 );
				new ByTable().Set( 1, targeted_atom ).Set( 2, this ).Set( "zone_override", GlobalFuncs.ran_zone() ).Apply( Lang13.BindFunc( casing, "fire" ) );
				casing.loc = startloc;
			} else if ( Lang13.Bool( this.projectiletype ) ) {
				P = Lang13.Call( this.projectiletype, this.loc );
				GlobalFuncs.playsound( this, this.projectilesound, 100, 1 );
				P.current = startloc;
				P.starting = startloc;
				P.firer = this;
				P.yo = Convert.ToDouble( targeted_atom.y - startloc.y );
				P.xo = Convert.ToDouble( targeted_atom.x - startloc.x );

				if ( this.AIStatus == 3 ) {
					this.newtonian_move( Map13.GetDistance( targeted_atom, this ) );
				}
				P.original = targeted_atom;
				P.fire();
			}
			return;
		}

		// Function from file: hostile.dm
		public virtual void OpenFire( dynamic A = null ) {
			this.visible_message( "<span class='danger'><b>" + this + "</b> " + this.ranged_message + " at " + A + "!</span>" );

			if ( this.rapid ) {
				Task13.Schedule( 1, (Task13.Closure)(() => {
					this.Shoot( A );
					return;
				}));
				Task13.Schedule( 4, (Task13.Closure)(() => {
					this.Shoot( A );
					return;
				}));
				Task13.Schedule( 6, (Task13.Closure)(() => {
					this.Shoot( A );
					return;
				}));
			} else {
				this.Shoot( A );
			}
			this.ranged_cooldown = this.ranged_cooldown_cap;
			return;
		}

		// Function from file: hostile.dm
		public void summon_backup( int distance = 0 ) {
			Mob_Living_SimpleAnimal_Hostile M = null;
			dynamic L = null;

			this.do_alert_animation( this );
			GlobalFuncs.playsound( this.loc, "sound/machines/chime.ogg", 50, 1, -1 );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, distance ), typeof(Mob_Living_SimpleAnimal_Hostile) )) {
				M = _a;
				
				L = M.faction & this.faction;

				if ( Lang13.Bool( L.len ) ) {
					
					if ( M.AIStatus == 3 ) {
						return;
					} else {
						M.Goto( this, M.move_to_delay, M.minimum_distance );
					}
				}
			}
			return;
		}

		// Function from file: hostile.dm
		public virtual void LoseTarget(  ) {
			this.target = null;
			Map13.Walk( this, 0, 0 );
			this.LoseAggro();
			return;
		}

		// Function from file: hostile.dm
		public virtual void LoseAggro(  ) {
			this.stop_automated_movement = false;
			this.vision_range = this.idle_vision_range;
			this.taunt_chance = Lang13.Initial( this, "taunt_chance" );
			return;
		}

		// Function from file: hostile.dm
		public virtual void Aggro(  ) {
			this.vision_range = this.aggro_vision_range;

			if ( Lang13.Bool( this.target ) && this.emote_taunt.len != 0 && Rand13.PercentChance( Convert.ToInt32( this.taunt_chance ) ) ) {
				this.emote( "me", 1, "" + Rand13.PickFromTable( this.emote_taunt ) + " at " + this.target + "." );
				this.taunt_chance = Num13.MaxInt( Convert.ToInt32( this.taunt_chance - 7 ), 2 );
			}
			return;
		}

		// Function from file: hostile.dm
		public virtual dynamic AttackingTarget(  ) {
			((Ent_Static)this.target).attack_animal( this );
			return null;
		}

		// Function from file: hostile.dm
		public void Goto( dynamic target = null, int delay = 0, dynamic minimum_distance = null ) {
			Map13.WalkTowards( this, target, Convert.ToInt32( minimum_distance ), delay );
			return;
		}

		// Function from file: hostile.dm
		public virtual bool MoveToTarget( ByTable possible_targets = null ) {
			int target_distance = 0;

			this.stop_automated_movement = true;

			if ( !Lang13.Bool( this.target ) || !this.CanAttack( this.target ) ) {
				this.LoseTarget();
				return false;
			}

			if ( possible_targets.Contains( this.target ) ) {
				target_distance = Map13.GetDistance( this, this.target );

				if ( this.ranged ) {
					
					if ( target_distance >= 2 && this.ranged_cooldown <= 0 ) {
						this.OpenFire( this.target );
					}
				}

				if ( !( this.Process_Spacemove() != 0 ) ) {
					Map13.Walk( this, 0, 0 );
					return true;
				}

				if ( this.retreat_distance != null ) {
					
					if ( target_distance <= Convert.ToDouble( this.retreat_distance ) ) {
						Map13.WalkAway( this, this.target, Lang13.IntNullable( this.retreat_distance ), this.move_to_delay );
					} else {
						this.Goto( this.target, this.move_to_delay, this.minimum_distance );
					}
				} else {
					this.Goto( this.target, this.move_to_delay, this.minimum_distance );
				}

				if ( this.loc is Tile && ((Ent_Static)this.target).Adjacent( this ) ) {
					this.AttackingTarget();
				}
				return true;
			}

			if ( this.environment_smash != 0 ) {
				
				if ( this.target.loc != null && Map13.GetDistance( this, this.target.loc ) <= ( this.vision_range ??0) ) {
					
					if ( this.environment_smash >= 2 ) {
						this.Goto( this.target, this.move_to_delay, this.minimum_distance );
						this.FindHidden();
						return true;
					} else if ( this.FindHidden() ) {
						return true;
					}
				}
			}
			this.LoseTarget();
			return false;
		}

		// Function from file: hostile.dm
		public virtual bool GiveTarget( dynamic new_target = null ) {
			this.target = new_target;

			if ( this.target != null ) {
				this.Aggro();
				return true;
			}
			return false;
		}

		// Function from file: hostile.dm
		public dynamic PickTarget( ByTable Targets = null ) {
			Ent_Static A = null;
			int target_dist = 0;
			int possible_target_distance = 0;
			dynamic chosen_target = null;

			
			if ( this.target != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Targets, typeof(Ent_Static) )) {
					A = _a;
					
					target_dist = Map13.GetDistance( this, this.target );
					possible_target_distance = Map13.GetDistance( this, A );

					if ( target_dist < possible_target_distance ) {
						Targets.Remove( A );
					}
				}
			}

			if ( !( Targets.len != 0 ) ) {
				return null;
			}
			chosen_target = Rand13.PickFromTable( Targets );
			return chosen_target;
		}

		// Function from file: hostile.dm
		public virtual dynamic Found( dynamic A = null ) {
			return null;
		}

		// Function from file: hostile.dm
		public virtual dynamic FindTarget( ByTable possible_targets = null, bool? HasTargetsList = null ) {
			HasTargetsList = HasTargetsList ?? false;

			ByTable Targets = null;
			Ent_Static A = null;
			dynamic Target = null;

			Targets = new ByTable();

			if ( !( HasTargetsList == true ) ) {
				possible_targets = this.ListTargets();
			}

			foreach (dynamic _a in Lang13.Enumerate( possible_targets, typeof(Ent_Static) )) {
				A = _a;
				

				if ( Lang13.Bool( this.Found( A ) ) ) {
					Targets = new ByTable(new object [] { A });
					break;
				}

				if ( this.CanAttack( A ) ) {
					Targets.Add( A );
					continue;
				}
			}
			Target = this.PickTarget( Targets );
			this.GiveTarget( Target );
			return Target;
		}

		// Function from file: hostile.dm
		public virtual ByTable ListTargets(  ) {
			ByTable L = null;
			ByTable Mobs = null;
			Obj_Mecha M = null;
			ByTable Objects = null;

			L = new ByTable();

			if ( !( this.search_objects != 0 ) ) {
				Mobs = Map13.FetchHearers( this, this.vision_range ) - this;
				L.Add( Mobs );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mechas_list, typeof(Obj_Mecha) )) {
					M = _a;
					

					if ( Map13.GetDistance( M, this ) <= ( this.vision_range ??0) && GlobalFuncs.can_see( this, M, this.vision_range ) ) {
						L.Add( M );
					}
				}
			} else {
				Objects = Map13.FetchInViewExcludeThis( this, this.vision_range );
				L.Add( Objects );
			}
			return L;
		}

		// Function from file: hostile.dm
		public override bool handle_automated_action(  ) {
			ByTable possible_targets = null;

			
			if ( this.AIStatus == 3 ) {
				return false;
			}
			possible_targets = this.ListTargets();

			if ( this.environment_smash != 0 ) {
				this.EscapeConfinement();
			}

			if ( this.AICanContinue( possible_targets ) ) {
				this.DestroySurroundings();

				if ( !this.MoveToTarget( possible_targets ) ) {
					
					if ( this.AIShouldSleep( possible_targets ) ) {
						this.AIStatus = 2;
					}
				}
			}
			return true;
		}

		// Function from file: hostile.dm
		public override bool Life(  ) {
			bool _default = false;

			_default = base.Life();

			if ( this.ranged ) {
				this.ranged_cooldown--;
			}

			if ( !_default ) {
				Map13.Walk( this, 0, 0 );
				return false;
			}
			return _default;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( dynamic A = null, bool? proximity_flag = null ) {
			this.target = A;
			this.AttackingTarget();
			return;
		}

	}

}