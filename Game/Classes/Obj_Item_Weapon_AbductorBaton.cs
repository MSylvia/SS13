// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_AbductorBaton : Obj_Item_Weapon {

		public int mode = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "wonderprod";
			this.slot_flags = 512;
			this.origin_tech = "materials=6;combat=5;biotech=7";
			this.force = 7;
			this.action_button_name = "Toggle Mode";
			this.icon = "icons/obj/abductor.dmi";
			this.icon_state = "wonderprodStun";
		}

		public Obj_Item_Weapon_AbductorBaton ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: abduction_gear.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			switch ((int)( this.mode )) {
				case 0:
					user.WriteMsg( "<span class='warning'>The baton is in stun mode.</span>" );
					break;
				case 1:
					user.WriteMsg( "<span class='warning'>The baton is in sleep inducement mode.</span>" );
					break;
				case 2:
					user.WriteMsg( "<span class='warning'>The baton is in restraining mode.</span>" );
					break;
				case 3:
					user.WriteMsg( "<span class='warning'>The baton is in probing mode.</span>" );
					break;
			}
			return 0;
		}

		// Function from file: abduction_gear.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.toggle( user );
			return null;
		}

		// Function from file: abduction_gear.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic L = null;

			
			if ( !this.IsAbductor( user ) ) {
				return false;
			}

			if ( M is Mob_Living_Silicon_Robot ) {
				base.attack( (object)(M), (object)(user), def_zone );
				return false;
			}

			if ( !( M is Mob_Living ) ) {
				return false;
			}
			L = M;
			((Ent_Dynamic)user).do_attack_animation( L );

			switch ((int)( this.mode )) {
				case 0:
					this.StunAttack( L, user );
					break;
				case 1:
					this.SleepAttack( L, user );
					break;
				case 2:
					this.CuffAttack( L, user );
					break;
				case 3:
					this.ProbeAttack( L, user );
					break;
			}
			return false;
		}

		// Function from file: abduction_gear.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			switch ((int)( this.mode )) {
				case 0:
					this.icon_state = "wonderprodStun";
					this.item_state = "wonderprodStun";
					break;
				case 1:
					this.icon_state = "wonderprodSleep";
					this.item_state = "wonderprodSleep";
					break;
				case 2:
					this.icon_state = "wonderprodCuff";
					this.item_state = "wonderprodCuff";
					break;
				case 3:
					this.icon_state = "wonderprodProbe";
					this.item_state = "wonderprodProbe";
					break;
			}
			return null;
		}

		// Function from file: abduction_gear.dm
		public void ProbeAttack( dynamic L = null, dynamic user = null ) {
			string species = null;
			string helptext = null;
			dynamic H = null;
			dynamic temp = null;

			((Ent_Static)L).visible_message( "<span class='danger'>" + user + " probes " + L + " with " + this + "!</span>", "<span class='userdanger'>" + user + " probes you!</span>" );
			species = "<span class='warning'>Unknown species</span>";
			helptext = "<span class='warning'>Species unsuitable for experiments.</span>";

			if ( L is Mob_Living_Carbon_Human ) {
				H = L;
				species = "<span clas=='notice'>" + H.dna.species.name + "</span>";

				if ( Lang13.Bool( L.mind ) && L.mind.changeling != null ) {
					species = "<span class='warning'>Changeling lifeform</span>";
				}
				temp = Lang13.FindIn( typeof(Obj_Item_Organ_Internal_Gland), H.internal_organs );

				if ( Lang13.Bool( temp ) ) {
					helptext = "<span class='warning'>Experimental gland detected!</span>";
				} else {
					helptext = "<span class='notice'>Subject suitable for experiments.</span>";
				}
			}
			user.WriteMsg( "<span class='notice'>Probing result:</span>" + species );
			user.WriteMsg( "" + helptext );
			return;
		}

		// Function from file: abduction_gear.dm
		public void CuffAttack( dynamic L = null, dynamic user = null ) {
			dynamic C = null;

			
			if ( !( L is Mob_Living_Carbon ) ) {
				return;
			}
			C = L;

			if ( !Lang13.Bool( C.handcuffed ) ) {
				GlobalFuncs.playsound( this.loc, "sound/weapons/cablecuff.ogg", 30, 1, -2 );
				((Ent_Static)C).visible_message( "<span class='danger'>" + user + " begins restraining " + C + " with " + this + "!</span>", "<span class='userdanger'>" + user + " begins shaping an energy field around your hands!</span>" );

				if ( GlobalFuncs.do_mob( user, C, 30 ) ) {
					
					if ( !Lang13.Bool( C.handcuffed ) ) {
						C.handcuffed = new Obj_Item_Weapon_Restraints_Handcuffs_Energy_Used( C );
						((Mob)C).update_inv_handcuffed(  );
						user.WriteMsg( "<span class='notice'>You handcuff " + C + ".</span>" );
						GlobalFuncs.add_logs( user, C, "handcuffed" );
					}
				} else {
					user.WriteMsg( "<span class='warning'>You fail to handcuff " + C + ".</span>" );
				}
			}
			return;
		}

		// Function from file: abduction_gear.dm
		public void SleepAttack( dynamic L = null, dynamic user = null ) {
			
			if ( L.stunned != 0 ) {
				((Mob)L).SetSleeping( 60 );
				((Ent_Static)L).visible_message( "<span class='danger'>" + user + " has induced sleep in " + L + " with " + this + "!</span>", "<span class='userdanger'>You suddenly feel very drowsy!</span>" );
				GlobalFuncs.playsound( this.loc, "sound/weapons/Egloves.ogg", 50, 1, -1 );
				GlobalFuncs.add_logs( user, L, "put to sleep" );
			} else {
				L.drowsyness += 1;
				user.WriteMsg( "<span class='warning'>Sleep inducement works fully only on stunned specimens! </span>" );
				((Ent_Static)L).visible_message( "<span class='danger'>" + user + " tried to induce sleep in " + L + " with " + this + "!</span>", "<span class='userdanger'>You suddenly feel drowsy!</span>" );
			}
			return;
		}

		// Function from file: abduction_gear.dm
		public void StunAttack( dynamic L = null, dynamic user = null ) {
			dynamic H = null;

			user.lastattacked = L;
			L.lastattacker = user;
			((Mob)L).Stun( 7 );
			((Mob)L).Weaken( 7 );
			((Mob_Living)L).apply_effect( "stutter", 7 );
			((Ent_Static)L).visible_message( "<span class='danger'>" + user + " has stunned " + L + " with " + this + "!</span>", "<span class='userdanger'>" + user + " has stunned you with " + this + "!</span>" );
			GlobalFuncs.playsound( this.loc, "sound/weapons/Egloves.ogg", 50, 1, -1 );

			if ( L is Mob_Living_Carbon_Human ) {
				H = L;
				((Mob_Living_Carbon_Human)H).forcesay( GlobalVars.hit_appends );
			}
			GlobalFuncs.add_logs( user, L, "stunned" );
			return;
		}

		// Function from file: abduction_gear.dm
		public bool IsAbductor( dynamic user = null ) {
			dynamic H = null;

			
			if ( !( user is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			H = user;

			if ( H.dna.species.id != "abductor" ) {
				return false;
			}
			return true;
		}

		// Function from file: abduction_gear.dm
		public void toggle( dynamic user = null ) {
			user = user ?? Task13.User;

			string txt = null;

			this.mode = ( this.mode + 1 ) % 4;

			switch ((int)( this.mode )) {
				case 0:
					txt = "stunning";
					break;
				case 1:
					txt = "sleep inducement";
					break;
				case 2:
					txt = "restraining";
					break;
				case 3:
					txt = "probing";
					break;
			}
			Task13.User.WriteMsg( "<span class='notice'>You switch the baton to " + txt + " mode.</span>" );
			this.update_icon();
			return;
		}

	}

}