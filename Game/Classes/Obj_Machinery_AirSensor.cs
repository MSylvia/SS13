// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_AirSensor : Obj_Machinery {

		public bool state = false;
		public dynamic id_tag = null;
		public double? frequency = 1439;
		public bool on = true;
		public int output = 3;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon_state = "gsensor1";
		}

		// Function from file: atmo_control.dm
		public Obj_Machinery_AirSensor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSair.atmos_machinery.Add( this );

			if ( GlobalVars.SSradio != null ) {
				this.set_frequency( this.frequency );
			}
			return;
		}

		// Function from file: atmo_control.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSair.atmos_machinery.Remove( this );

			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

		// Function from file: atmo_control.dm
		public override void initialize(  ) {
			this.set_frequency( this.frequency );
			return;
		}

		// Function from file: atmo_control.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			return;
		}

		// Function from file: atmo_control.dm
		public override int process_atmos(  ) {
			Signal signal = null;
			GasMixture air_sample = null;
			double total_moles = 0;

			
			if ( this.on ) {
				signal = new Signal();
				signal.transmission_method = 1;
				signal.data["tag"] = this.id_tag;
				signal.data["timestamp"] = Game13.time;
				air_sample = this.return_air();

				if ( ( this.output & 1 ) != 0 ) {
					signal.data["pressure"] = String13.NumberToString( Num13.Round( air_sample.return_pressure(), 0.1 ) );
				}

				if ( ( this.output & 2 ) != 0 ) {
					signal.data["temperature"] = Num13.Round( Convert.ToDouble( air_sample.temperature ), 0.1 );
				}

				if ( this.output > 4 ) {
					total_moles = air_sample.total_moles();

					if ( total_moles > 0 ) {
						
						if ( ( this.output & 4 ) != 0 ) {
							signal.data["oxygen"] = Num13.Round( ( air_sample.oxygen ??0) * 100 / total_moles, 0.1 );
						}

						if ( ( this.output & 8 ) != 0 ) {
							signal.data["toxins"] = Num13.Round( ( air_sample.toxins ??0) * 100 / total_moles, 0.1 );
						}

						if ( ( this.output & 16 ) != 0 ) {
							signal.data["nitrogen"] = Num13.Round( air_sample.nitrogen * 100 / total_moles, 0.1 );
						}

						if ( ( this.output & 32 ) != 0 ) {
							signal.data["carbon_dioxide"] = Num13.Round( ( air_sample.carbon_dioxide ??0) * 100 / total_moles, 0.1 );
						}
					} else {
						signal.data["oxygen"] = 0;
						signal.data["toxins"] = 0;
						signal.data["nitrogen"] = 0;
						signal.data["carbon_dioxide"] = 0;
					}
				}
				signal.data["sigtype"] = "status";
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			}
			return 0;
		}

		// Function from file: atmo_control.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = "gsensor" + this.on;
			return null;
		}

	}

}