// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GasMixture : Game_Data {

		public double? oxygen = 0;
		public double? carbon_dioxide = 0;
		public double nitrogen = 0;
		public double? toxins = 0;
		public double volume = 2500;
		public dynamic temperature = 0;
		public double last_share = 0;
		public ByTable trace_gases = new ByTable();
		public double? oxygen_archived = null;
		public double? carbon_dioxide_archived = null;
		public double nitrogen_archived = 0;
		public double? toxins_archived = null;
		public dynamic temperature_archived = null;
		public double fuel_burnt = 0;

		// Function from file: gas_mixture.dm
		public bool compare( GasMixture sample = null ) {
			dynamic gas = null;
			dynamic trace_gas = null;
			dynamic corresponding = null;
			dynamic gas2 = null;
			dynamic trace_gas2 = null;
			dynamic corresponding2 = null;

			
			if ( Math.Abs( ( this.oxygen ??0) - ( sample.oxygen ??0) ) > 0.5199189782142639 && ( ( this.oxygen ??0) < ( sample.oxygen ??0) * 0.995 || ( this.oxygen ??0) > ( sample.oxygen ??0) * 1.041 ) ) {
				return false;
			}

			if ( Math.Abs( this.nitrogen - sample.nitrogen ) > 0.5199189782142639 && ( this.nitrogen < sample.nitrogen * 0.995 || this.nitrogen > sample.nitrogen * 1.041 ) ) {
				return false;
			}

			if ( Math.Abs( ( this.carbon_dioxide ??0) - ( sample.carbon_dioxide ??0) ) > 0.5199189782142639 && ( ( this.carbon_dioxide ??0) < ( sample.carbon_dioxide ??0) * 0.995 || ( this.oxygen ??0) > ( sample.carbon_dioxide ??0) * 1.041 ) ) {
				return false;
			}

			if ( Math.Abs( ( this.toxins ??0) - ( sample.toxins ??0) ) > 0.5199189782142639 && ( ( this.toxins ??0) < ( sample.toxins ??0) * 0.995 || ( this.toxins ??0) > ( sample.toxins ??0) * 1.041 ) ) {
				return false;
			}

			if ( this.total_moles() > 0.5199189782142639 ) {
				
				if ( Math.Abs( Convert.ToDouble( this.temperature - sample.temperature ) ) > 4 && ( Convert.ToDouble( this.temperature ) < Convert.ToDouble( sample.temperature * 0.971 ) || Convert.ToDouble( this.temperature ) > Convert.ToDouble( sample.temperature * 1.011 ) ) ) {
					return false;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( sample.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;

				if ( ( trace_gas.moles_archived ??0) > 0.5199189782142639 ) {
					corresponding = Lang13.FindIn( trace_gas.type, this.trace_gases );

					if ( Lang13.Bool( corresponding ) ) {
						
						if ( Math.Abs( ( trace_gas.moles ??0) - ( corresponding.moles ??0) ) > 0.5199189782142639 && ( ( corresponding.moles ??0) < ( trace_gas.moles ??0) * 0.995 || ( corresponding.moles ??0) > ( trace_gas.moles ??0) * 1.041 ) ) {
							return false;
						}
					} else {
						return false;
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.trace_gases )) {
				gas2 = _b;
				
				trace_gas2 = gas2;

				if ( ( trace_gas2.moles ??0) > 0.5199189782142639 ) {
					corresponding2 = Lang13.FindIn( trace_gas2.type, sample.trace_gases );

					if ( Lang13.Bool( corresponding2 ) ) {
						
						if ( Math.Abs( ( trace_gas2.moles ??0) - ( corresponding2.moles ??0) ) > 0.5199189782142639 && ( ( trace_gas2.moles ??0) < ( corresponding2.moles ??0) * 0.995 || ( trace_gas2.moles ??0) > ( corresponding2.moles ??0) * 1.041 ) ) {
							return false;
						}
					} else {
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: gas_mixture.dm
		public void temperature_turf_share( Tile sharer = null, double conduction_coefficient = 0 ) {
			dynamic delta_temperature = null;
			double self_heat_capacity = 0;
			double heat = 0;

			delta_temperature = this.temperature_archived - sharer.temperature;

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity();

				if ( sharer.heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * Convert.ToDouble( delta_temperature ) * ( self_heat_capacity * sharer.heat_capacity / ( self_heat_capacity + sharer.heat_capacity ) );
					this.temperature -= heat / self_heat_capacity;
					sharer.temperature += heat / sharer.heat_capacity;
				}
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public void temperature_mimic( Tile model = null, double conduction_coefficient = 0 ) {
			dynamic delta_temperature = null;
			double self_heat_capacity = 0;
			double heat = 0;

			delta_temperature = this.temperature - model.temperature;

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity();

				if ( model.heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * Convert.ToDouble( delta_temperature ) * ( self_heat_capacity * model.heat_capacity / ( self_heat_capacity + model.heat_capacity ) );
					this.temperature -= heat / self_heat_capacity;
				}
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public void temperature_share( GasMixture sharer = null, double conduction_coefficient = 0 ) {
			dynamic delta_temperature = null;
			double self_heat_capacity = 0;
			double sharer_heat_capacity = 0;
			double heat = 0;

			delta_temperature = this.temperature_archived - sharer.temperature_archived;

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity_archived();
				sharer_heat_capacity = sharer.heat_capacity_archived();

				if ( sharer_heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * Convert.ToDouble( delta_temperature ) * ( self_heat_capacity * sharer_heat_capacity / ( self_heat_capacity + sharer_heat_capacity ) );
					this.temperature -= heat / self_heat_capacity;
					sharer.temperature += heat / sharer_heat_capacity;
				}
			}
			return;
		}

		// Function from file: gas_mixture.dm
		public dynamic mimic( Tile model = null, int? atmos_adjacent_turfs = null ) {
			atmos_adjacent_turfs = atmos_adjacent_turfs ?? 4;

			double delta_oxygen = 0;
			double delta_carbon_dioxide = 0;
			double delta_nitrogen = 0;
			double delta_toxins = 0;
			dynamic delta_temperature = null;
			double heat_transferred = 0;
			double old_self_heat_capacity = 0;
			double heat_capacity_transferred = 0;
			double delta_air = 0;
			double air_heat_capacity = 0;
			double carbon_dioxide_heat_capacity = 0;
			double toxins_heat_capacity = 0;
			double moved_moles = 0;
			dynamic gas = null;
			dynamic trace_gas = null;
			double delta = 0;
			double heat_cap_transferred = 0;
			double new_self_heat_capacity = 0;
			dynamic delta_pressure = null;

			delta_oxygen = Num13.Round( ( this.oxygen_archived ??0) - model.oxygen, 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_carbon_dioxide = Num13.Round( ( this.carbon_dioxide_archived ??0) - ( model.carbon_dioxide ?1:0), 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_nitrogen = Num13.Round( this.nitrogen_archived - model.nitrogen, 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_toxins = Num13.Round( ( this.toxins_archived ??0) - ( model.toxins ?1:0), 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_temperature = this.temperature_archived - model.temperature;
			heat_transferred = 0;
			old_self_heat_capacity = 0;
			heat_capacity_transferred = 0;

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 0.5 ) {
				delta_air = delta_oxygen + delta_nitrogen;

				if ( delta_air != 0 ) {
					air_heat_capacity = delta_air * 20;
					heat_transferred -= air_heat_capacity * model.temperature;
					heat_capacity_transferred -= air_heat_capacity;
				}

				if ( delta_carbon_dioxide != 0 ) {
					carbon_dioxide_heat_capacity = delta_carbon_dioxide * 30;
					heat_transferred -= carbon_dioxide_heat_capacity * model.temperature;
					heat_capacity_transferred -= carbon_dioxide_heat_capacity;
				}

				if ( delta_toxins != 0 ) {
					toxins_heat_capacity = delta_toxins * 200;
					heat_transferred -= toxins_heat_capacity * model.temperature;
					heat_capacity_transferred -= toxins_heat_capacity;
				}
				old_self_heat_capacity = this.heat_capacity();
			}
			this.oxygen -= delta_oxygen;
			this.carbon_dioxide -= delta_carbon_dioxide;
			this.nitrogen -= delta_nitrogen;
			this.toxins -= delta_toxins;
			moved_moles = delta_oxygen + delta_carbon_dioxide + delta_nitrogen + delta_toxins;
			this.last_share = Math.Abs( delta_oxygen ) + Math.Abs( delta_carbon_dioxide ) + Math.Abs( delta_nitrogen ) + Math.Abs( delta_toxins );

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
					gas = _a;
					
					trace_gas = gas;
					delta = 0;
					delta = ( trace_gas.moles_archived ??0) / ( ( atmos_adjacent_turfs ??0) + 1 );
					trace_gas.moles -= delta;
					heat_cap_transferred = delta * trace_gas.specific_heat;
					heat_transferred += heat_cap_transferred * Convert.ToDouble( this.temperature_archived );
					heat_capacity_transferred += heat_cap_transferred;
					moved_moles += delta;
					moved_moles += Math.Abs( delta );
				}
			}

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 0.5 ) {
				new_self_heat_capacity = old_self_heat_capacity - heat_capacity_transferred;

				if ( new_self_heat_capacity > 0.0003 ) {
					this.temperature = ( old_self_heat_capacity * Convert.ToDouble( this.temperature ) - heat_capacity_transferred * Convert.ToDouble( this.temperature_archived ) ) / new_self_heat_capacity;
				}
				this.temperature_mimic( model, model.thermal_conductivity );
			}

			if ( Convert.ToDouble( delta_temperature ) > 393.41 || Math.Abs( moved_moles ) > 0.5199189782142639 ) {
				delta_pressure = this.temperature_archived * ( this.total_moles() + moved_moles ) - model.temperature * ( model.oxygen + ( model.carbon_dioxide ?1:0) + model.nitrogen + ( model.toxins ?1:0) );
				return delta_pressure * 8.31 / this.volume;
			} else {
				return 0;
			}
		}

		// Function from file: gas_mixture.dm
		public dynamic share( GasMixture sharer = null, int? atmos_adjacent_turfs = null ) {
			atmos_adjacent_turfs = atmos_adjacent_turfs ?? 4;

			double delta_oxygen = 0;
			double delta_carbon_dioxide = 0;
			double delta_nitrogen = 0;
			double delta_toxins = 0;
			dynamic delta_temperature = null;
			double old_self_heat_capacity = 0;
			double old_sharer_heat_capacity = 0;
			double heat_capacity_self_to_sharer = 0;
			double heat_capacity_sharer_to_self = 0;
			double delta_air = 0;
			double air_heat_capacity = 0;
			double carbon_dioxide_heat_capacity = 0;
			double toxins_heat_capacity = 0;
			double moved_moles = 0;
			ByTable trace_types_considered = null;
			dynamic gas = null;
			dynamic trace_gas = null;
			dynamic corresponding = null;
			double delta = 0;
			double individual_heat_capacity = 0;
			dynamic gas2 = null;
			dynamic trace_gas2 = null;
			dynamic corresponding2 = null;
			double delta2 = 0;
			double individual_heat_capacity2 = 0;
			double new_self_heat_capacity = 0;
			double new_sharer_heat_capacity = 0;
			dynamic delta_pressure = null;

			
			if ( !( sharer != null ) ) {
				return 0;
			}
			delta_oxygen = Num13.Round( ( this.oxygen_archived ??0) - ( sharer.oxygen_archived ??0), 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_carbon_dioxide = Num13.Round( ( this.carbon_dioxide_archived ??0) - ( sharer.carbon_dioxide_archived ??0), 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_nitrogen = Num13.Round( this.nitrogen_archived - sharer.nitrogen_archived, 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_toxins = Num13.Round( ( this.toxins_archived ??0) - ( sharer.toxins_archived ??0), 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_temperature = this.temperature_archived - sharer.temperature_archived;
			old_self_heat_capacity = 0;
			old_sharer_heat_capacity = 0;
			heat_capacity_self_to_sharer = 0;
			heat_capacity_sharer_to_self = 0;

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 0.5 ) {
				delta_air = delta_oxygen + delta_nitrogen;

				if ( delta_air != 0 ) {
					air_heat_capacity = delta_air * 20;

					if ( delta_air > 0 ) {
						heat_capacity_self_to_sharer += air_heat_capacity;
					} else {
						heat_capacity_sharer_to_self -= air_heat_capacity;
					}
				}

				if ( delta_carbon_dioxide != 0 ) {
					carbon_dioxide_heat_capacity = delta_carbon_dioxide * 30;

					if ( delta_carbon_dioxide > 0 ) {
						heat_capacity_self_to_sharer += carbon_dioxide_heat_capacity;
					} else {
						heat_capacity_sharer_to_self -= carbon_dioxide_heat_capacity;
					}
				}

				if ( delta_toxins != 0 ) {
					toxins_heat_capacity = delta_toxins * 200;

					if ( delta_toxins > 0 ) {
						heat_capacity_self_to_sharer += toxins_heat_capacity;
					} else {
						heat_capacity_sharer_to_self -= toxins_heat_capacity;
					}
				}
				old_self_heat_capacity = this.heat_capacity();
				old_sharer_heat_capacity = sharer.heat_capacity();
			}
			this.oxygen -= delta_oxygen;
			sharer.oxygen += delta_oxygen;
			this.carbon_dioxide -= delta_carbon_dioxide;
			sharer.carbon_dioxide += delta_carbon_dioxide;
			this.nitrogen -= delta_nitrogen;
			sharer.nitrogen += delta_nitrogen;
			this.toxins -= delta_toxins;
			sharer.toxins += delta_toxins;
			moved_moles = delta_oxygen + delta_carbon_dioxide + delta_nitrogen + delta_toxins;
			this.last_share = Math.Abs( delta_oxygen ) + Math.Abs( delta_carbon_dioxide ) + Math.Abs( delta_nitrogen ) + Math.Abs( delta_toxins );
			trace_types_considered = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				corresponding = Lang13.FindIn( trace_gas.type, sharer.trace_gases );
				delta = 0;

				if ( Lang13.Bool( corresponding ) ) {
					delta = Num13.Round( ( trace_gas.moles_archived ??0) - ( corresponding.moles_archived ??0), 1.0000000116860974e-7 ) / ( ( atmos_adjacent_turfs ??0) + 1 );
				} else {
					corresponding = Lang13.Call( trace_gas.type );
					sharer.trace_gases.Add( corresponding );
					delta = ( trace_gas.moles_archived ??0) / ( ( atmos_adjacent_turfs ??0) + 1 );
				}
				trace_gas.moles -= delta;
				corresponding.moles += delta;

				if ( delta != 0 ) {
					individual_heat_capacity = trace_gas.specific_heat * delta;

					if ( delta > 0 ) {
						heat_capacity_self_to_sharer += individual_heat_capacity;
					} else {
						heat_capacity_sharer_to_self -= individual_heat_capacity;
					}
				}
				moved_moles += delta;
				this.last_share += Math.Abs( delta );
				trace_types_considered.Add( trace_gas.type );
			}

			foreach (dynamic _b in Lang13.Enumerate( sharer.trace_gases )) {
				gas2 = _b;
				
				trace_gas2 = gas2;

				if ( trace_types_considered.Contains( trace_gas2.type ) ) {
					continue;
				}
				corresponding2 = null;
				delta2 = 0;
				corresponding2 = Lang13.Call( trace_gas2.type );
				this.trace_gases.Add( corresponding2 );
				delta2 = ( trace_gas2.moles_archived ??0) / 5;
				trace_gas2.moles -= delta2;
				corresponding2.moles += delta2;
				individual_heat_capacity2 = trace_gas2.specific_heat * delta2;
				heat_capacity_sharer_to_self += individual_heat_capacity2;
				moved_moles += -delta2;
				this.last_share += Math.Abs( delta2 );
			}

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 0.5 ) {
				new_self_heat_capacity = old_self_heat_capacity + heat_capacity_sharer_to_self - heat_capacity_self_to_sharer;
				new_sharer_heat_capacity = old_sharer_heat_capacity + heat_capacity_self_to_sharer - heat_capacity_sharer_to_self;

				if ( new_self_heat_capacity > 0.0003 ) {
					this.temperature = ( old_self_heat_capacity * Convert.ToDouble( this.temperature ) - heat_capacity_self_to_sharer * Convert.ToDouble( this.temperature_archived ) + heat_capacity_sharer_to_self * Convert.ToDouble( sharer.temperature_archived ) ) / new_self_heat_capacity;
				}

				if ( new_sharer_heat_capacity > 0.0003 ) {
					sharer.temperature = ( old_sharer_heat_capacity * Convert.ToDouble( sharer.temperature ) - heat_capacity_sharer_to_self * Convert.ToDouble( sharer.temperature_archived ) + heat_capacity_self_to_sharer * Convert.ToDouble( this.temperature_archived ) ) / new_sharer_heat_capacity;

					if ( Math.Abs( old_sharer_heat_capacity ) > 0.0003 ) {
						
						if ( Math.Abs( new_sharer_heat_capacity / old_sharer_heat_capacity - 1 ) < 0.1 ) {
							this.temperature_share( sharer, 0.4 );
						}
					}
				}
			}

			if ( Convert.ToDouble( delta_temperature ) > 393.41 || Math.Abs( moved_moles ) > 0.5199189782142639 ) {
				delta_pressure = this.temperature_archived * ( this.total_moles() + moved_moles ) - sharer.temperature_archived * ( sharer.total_moles() - moved_moles );
				return delta_pressure * 8.31 / this.volume;
			}
			return null;
		}

		// Function from file: gas_mixture.dm
		public bool check_turf( Tile model = null, int? atmos_adjacent_turfs = null ) {
			atmos_adjacent_turfs = atmos_adjacent_turfs ?? 4;

			double delta_oxygen = 0;
			double delta_carbon_dioxide = 0;
			double delta_nitrogen = 0;
			double delta_toxins = 0;
			dynamic delta_temperature = null;
			dynamic gas = null;
			dynamic trace_gas = null;

			delta_oxygen = ( ( this.oxygen_archived ??0) - model.oxygen ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_carbon_dioxide = ( ( this.carbon_dioxide_archived ??0) - ( model.carbon_dioxide ?1:0) ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_nitrogen = ( this.nitrogen_archived - model.nitrogen ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_toxins = ( ( this.toxins_archived ??0) - ( model.toxins ?1:0) ) / ( ( atmos_adjacent_turfs ??0) + 1 );
			delta_temperature = this.temperature_archived - model.temperature;

			if ( Math.Abs( delta_oxygen ) > 0.5199189782142639 && Math.Abs( delta_oxygen ) >= ( this.oxygen_archived ??0) * 0.041 || Math.Abs( delta_carbon_dioxide ) > 0.5199189782142639 && Math.Abs( delta_carbon_dioxide ) >= ( this.carbon_dioxide_archived ??0) * 0.041 || Math.Abs( delta_nitrogen ) > 0.5199189782142639 && Math.Abs( delta_nitrogen ) >= this.nitrogen_archived * 0.041 || Math.Abs( delta_toxins ) > 0.5199189782142639 && Math.Abs( delta_toxins ) >= ( this.toxins_archived ??0) * 0.041 ) {
				return false;
			}

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 4 ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;

				if ( ( trace_gas.moles_archived ??0) > 2.0796759128570557 ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: gas_mixture.dm
		public bool copy_from( GasMixture sample = null ) {
			dynamic gas = null;
			dynamic trace_gas = null;
			dynamic corresponding = null;

			this.oxygen = sample.oxygen;
			this.carbon_dioxide = sample.carbon_dioxide;
			this.nitrogen = sample.nitrogen;
			this.toxins = sample.toxins;
			this.trace_gases.len = 0;

			foreach (dynamic _a in Lang13.Enumerate( sample.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				corresponding = Lang13.Call( trace_gas.type );
				this.trace_gases.Add( corresponding );
				corresponding.moles = trace_gas.moles;
			}
			this.temperature = sample.temperature;
			return true;
		}

		// Function from file: gas_mixture.dm
		public GasMixture remove_ratio( double? ratio = null ) {
			GasMixture removed = null;
			dynamic gas = null;
			dynamic trace_gas = null;
			dynamic corresponding = null;

			
			if ( ( ratio ??0) <= 0 ) {
				return null;
			}
			ratio = Num13.MinInt( ((int)( ratio ??0 )), 1 );
			removed = new GasMixture();
			removed.oxygen = Num13.Round( ( this.oxygen ??0) * ( ratio ??0), 1.0000000116860974e-7 );
			removed.nitrogen = Num13.Round( this.nitrogen * ( ratio ??0), 1.0000000116860974e-7 );
			removed.carbon_dioxide = Num13.Round( ( this.carbon_dioxide ??0) * ( ratio ??0), 1.0000000116860974e-7 );
			removed.toxins = Num13.Round( ( this.toxins ??0) * ( ratio ??0), 1.0000000116860974e-7 );
			this.oxygen -= removed.oxygen ??0;
			this.nitrogen -= removed.nitrogen;
			this.carbon_dioxide -= removed.carbon_dioxide ??0;
			this.toxins -= removed.toxins ??0;

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				corresponding = Lang13.Call( trace_gas.type );
				removed.trace_gases.Add( corresponding );
				corresponding.moles = ( trace_gas.moles ??0) * ( ratio ??0);
				trace_gas.moles -= corresponding.moles ??0;
			}
			removed.temperature = this.temperature;
			return removed;
		}

		// Function from file: gas_mixture.dm
		public GasMixture remove( dynamic amount = null ) {
			double sum = 0;
			GasMixture removed = null;
			dynamic gas = null;
			dynamic trace_gas = null;
			dynamic corresponding = null;

			sum = this.total_moles();
			amount = Num13.MinInt( Convert.ToInt32( amount ), ((int)( sum )) );

			if ( Convert.ToDouble( amount ) <= 0 ) {
				return null;
			}
			removed = new GasMixture();
			removed.oxygen = Num13.Round( ( this.oxygen ??0) / sum * Convert.ToDouble( amount ), 1.0000000116860974e-7 );
			removed.nitrogen = Num13.Round( this.nitrogen / sum * Convert.ToDouble( amount ), 1.0000000116860974e-7 );
			removed.carbon_dioxide = Num13.Round( ( this.carbon_dioxide ??0) / sum * Convert.ToDouble( amount ), 1.0000000116860974e-7 );
			removed.toxins = Num13.Round( ( this.toxins ??0) / sum * Convert.ToDouble( amount ), 1.0000000116860974e-7 );
			this.oxygen -= removed.oxygen ??0;
			this.nitrogen -= removed.nitrogen;
			this.carbon_dioxide -= removed.carbon_dioxide ??0;
			this.toxins -= removed.toxins ??0;

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				corresponding = Lang13.Call( trace_gas.type );
				removed.trace_gases.Add( corresponding );
				corresponding.moles = ( trace_gas.moles ??0) / sum * Convert.ToDouble( amount );
				trace_gas.moles -= corresponding.moles ??0;
			}
			removed.temperature = this.temperature;
			return removed;
		}

		// Function from file: gas_mixture.dm
		public bool merge( dynamic giver = null ) {
			double self_heat_capacity = 0;
			double giver_heat_capacity = 0;
			double combined_heat_capacity = 0;
			dynamic gas = null;
			dynamic trace_gas = null;
			dynamic corresponding = null;

			
			if ( !Lang13.Bool( giver ) ) {
				return false;
			}

			if ( Math.Abs( Convert.ToDouble( this.temperature - giver.temperature ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity();
				giver_heat_capacity = ((GasMixture)giver).heat_capacity();
				combined_heat_capacity = giver_heat_capacity + self_heat_capacity;

				if ( combined_heat_capacity != 0 ) {
					this.temperature = ( giver.temperature * giver_heat_capacity + this.temperature * self_heat_capacity ) / combined_heat_capacity;
				}
			}
			this.oxygen += Convert.ToDouble( giver.oxygen );
			this.carbon_dioxide += Convert.ToDouble( giver.carbon_dioxide );
			this.nitrogen += Convert.ToDouble( giver.nitrogen );
			this.toxins += Convert.ToDouble( giver.toxins );

			foreach (dynamic _a in Lang13.Enumerate( giver.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				corresponding = Lang13.FindIn( trace_gas.type, this.trace_gases );

				if ( !Lang13.Bool( corresponding ) ) {
					corresponding = Lang13.Call( trace_gas.type );
					this.trace_gases.Add( corresponding );
				}
				corresponding.moles += trace_gas.moles ??0;
			}
			return true;
		}

		// Function from file: gas_mixture.dm
		public bool archive(  ) {
			dynamic gas = null;
			dynamic trace_gas = null;

			this.oxygen_archived = this.oxygen;
			this.carbon_dioxide_archived = this.carbon_dioxide;
			this.nitrogen_archived = this.nitrogen;
			this.toxins_archived = this.toxins;

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				trace_gas.moles_archived = trace_gas.moles;
			}
			this.temperature_archived = this.temperature;
			return true;
		}

		// Function from file: gas_mixture.dm
		public dynamic get_true_breath_pressure( dynamic breath_pp = null ) {
			return breath_pp * 0.5 / ( this.temperature * 8.31 );
		}

		// Function from file: gas_mixture.dm
		public double get_breath_partial_pressure( double? gas_pressure = null ) {
			return ( gas_pressure ??0) * Convert.ToDouble( this.temperature ) * 8.31 / 0.5;
		}

		// Function from file: gas_mixture.dm
		public bool check_turf_total( Tile model = null ) {
			double delta_oxygen = 0;
			double delta_carbon_dioxide = 0;
			double delta_nitrogen = 0;
			double delta_toxins = 0;
			dynamic delta_temperature = null;
			dynamic gas = null;
			dynamic trace_gas = null;

			delta_oxygen = ( this.oxygen ??0) - model.oxygen;
			delta_carbon_dioxide = ( this.carbon_dioxide ??0) - ( model.carbon_dioxide ?1:0);
			delta_nitrogen = this.nitrogen - model.nitrogen;
			delta_toxins = ( this.toxins ??0) - ( model.toxins ?1:0);
			delta_temperature = this.temperature - model.temperature;

			if ( Math.Abs( delta_oxygen ) > 0.5199189782142639 && Math.Abs( delta_oxygen ) >= ( this.oxygen ??0) * 0.041 || Math.Abs( delta_carbon_dioxide ) > 0.5199189782142639 && Math.Abs( delta_carbon_dioxide ) >= ( this.carbon_dioxide ??0) * 0.041 || Math.Abs( delta_nitrogen ) > 0.5199189782142639 && Math.Abs( delta_nitrogen ) >= this.nitrogen * 0.041 || Math.Abs( delta_toxins ) > 0.5199189782142639 && Math.Abs( delta_toxins ) >= ( this.toxins ??0) * 0.041 ) {
				return false;
			}

			if ( Math.Abs( Convert.ToDouble( delta_temperature ) ) > 4 ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;

				if ( ( trace_gas.moles ??0) > 2.0796759128570557 ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "compare" )]
		public void _internal_compare( dynamic sample = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "temperature turf share" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_temperature_turf_share( dynamic sharer = null, dynamic conduction_coefficient = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "temperature share" )]
		public void _internal_temperature_share( dynamic sharer = null, dynamic conduction_coefficient = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "temperature mimic" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_temperature_mimic( dynamic model = null, dynamic conduction_coefficient = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "check turf" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_check_turf( dynamic model = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "mimic" )]
		[VerbArg( 1, InputType.Tile )]
		public void _internal_mimic( dynamic model = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "share" )]
		public void _internal_share( dynamic sharer = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "copy from" )]
		public void _internal_copy_from( dynamic sample = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "remove ratio" )]
		public void _internal_remove_ratio( dynamic ratio = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "remove" )]
		public void _internal_remove( dynamic amount = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "merge" )]
		public void _internal_merge( dynamic giver = null ) {
			return;
		}

		// Function from file: gas_mixture.dm
		[VerbInfo( name: "archive" )]
		public void _internal_archive(  ) {
			return;
		}

		// Function from file: gas_mixture.dm
		public double fire(  ) {
			double energy_released = 0;
			double old_heat_capacity = 0;
			dynamic fuel_store = null;
			double? burned_fuel = null;
			dynamic plasma_burn_rate = null;
			double oxygen_burn_rate = 0;
			dynamic temperature_scale = null;
			double new_heat_capacity = 0;

			energy_released = 0;
			old_heat_capacity = this.heat_capacity();
			fuel_store = Lang13.FindIn( typeof(Gas_VolatileFuel), this.trace_gases );

			if ( Lang13.Bool( fuel_store ) ) {
				burned_fuel = 0;

				if ( ( this.oxygen ??0) < ( fuel_store.moles ??0) ) {
					burned_fuel = this.oxygen;
					fuel_store.moles -= burned_fuel ??0;
					this.oxygen = 0;
				} else {
					burned_fuel = fuel_store.moles;
					this.oxygen -= fuel_store.moles ??0;
					this.trace_gases.Remove( fuel_store );
					fuel_store = null;
				}
				energy_released += ( burned_fuel ??0) * 500000;
				this.carbon_dioxide += burned_fuel ??0;
				this.fuel_burnt += burned_fuel ??0;
			}

			if ( ( this.toxins ??0) > 0.0003 ) {
				plasma_burn_rate = 0;
				oxygen_burn_rate = 0;

				if ( Convert.ToDouble( this.temperature ) > 1643.1500244140625 ) {
					temperature_scale = 1;
				} else {
					temperature_scale = ( this.temperature - 100 + 273.41 ) / 1816.3;
				}

				if ( Convert.ToDouble( temperature_scale ) > 0 ) {
					oxygen_burn_rate = 131 - Convert.ToDouble( temperature_scale );

					if ( ( this.oxygen ??0) > ( this.toxins ??0) * 10 ) {
						plasma_burn_rate = ( this.toxins ??0) * Convert.ToDouble( temperature_scale ) / 8;
					} else {
						plasma_burn_rate = temperature_scale * ( ( this.oxygen ??0) / 10 ) / 8;
					}

					if ( Convert.ToDouble( plasma_burn_rate ) > 0.0003 ) {
						this.toxins -= Convert.ToDouble( plasma_burn_rate );
						this.oxygen -= Convert.ToDouble( plasma_burn_rate * oxygen_burn_rate );
						this.carbon_dioxide += Convert.ToDouble( plasma_burn_rate );
						energy_released += Convert.ToDouble( plasma_burn_rate * 3000000 );
						this.fuel_burnt += Convert.ToDouble( plasma_burn_rate * ( oxygen_burn_rate + 1 ) );
					}
				}
			}

			if ( energy_released > 0 ) {
				new_heat_capacity = this.heat_capacity();

				if ( new_heat_capacity > 0.0003 ) {
					this.temperature = ( this.temperature * old_heat_capacity + energy_released ) / new_heat_capacity;
				}
			}
			return this.fuel_burnt;
		}

		// Function from file: gas_mixture.dm
		public bool react( dynamic dump_location = null ) {
			bool reacting = false;
			dynamic trace_gas = null;
			int reaction_rate = 0;
			double old_heat_capacity = 0;
			int carbon_efficency = 0;
			dynamic reaction_energy = null;
			double moles_impurities = 0;
			double plasma_fused = 0;
			double carbon_catalyzed = 0;
			double oxygen_added = 0;
			double nitrogen_added = 0;
			double new_heat_capacity = 0;

			reacting = false;

			if ( Convert.ToDouble( this.temperature ) < 2.7 ) {
				this.temperature = 2.7;
			}

			if ( this.trace_gases.len > 0 ) {
				
				if ( Convert.ToDouble( this.temperature ) > 900 ) {
					
					if ( ( this.toxins ??0) > 0.0003 && ( this.carbon_dioxide ??0) > 0.0003 ) {
						trace_gas = Lang13.FindIn( typeof(Gas_OxygenAgentB), this.trace_gases );

						if ( Lang13.Bool( trace_gas ) ) {
							reaction_rate = Num13.MinInt( ((int)( ( this.carbon_dioxide ??0) * 0.75 )), ((int)( ( this.toxins ??0) * 0.25 )), ((int)( ( trace_gas.moles ??0) * 0.05 )) );
							this.carbon_dioxide -= reaction_rate;
							this.oxygen += reaction_rate;
							trace_gas.moles -= reaction_rate * 0.05;
							this.temperature -= reaction_rate * 20000 / this.heat_capacity();
							reacting = true;
						}
					}
				}
			}

			if ( Convert.ToDouble( this.thermal_energy() ) > 30000000 ) {
				
				if ( ( this.toxins ??0) > 0.0003 && ( this.carbon_dioxide ??0) > 0.0003 && ( ( this.toxins ??0) + ( this.carbon_dioxide ??0) ) / this.total_moles() >= 081 ) {
					old_heat_capacity = this.heat_capacity();
					carbon_efficency = Num13.MinInt( ((int)( ( this.toxins ??0) / ( this.carbon_dioxide ??0) )), 9 );
					reaction_energy = this.thermal_energy();
					moles_impurities = this.total_moles() - ( ( this.toxins ??0) + ( this.carbon_dioxide ??0) );
					plasma_fused = carbon_efficency * Convert.ToDouble( this.temperature / 3000000 ) * 0.71;
					carbon_catalyzed = carbon_efficency * Convert.ToDouble( this.temperature / 3000000 ) * 0.01;
					oxygen_added = carbon_catalyzed;
					nitrogen_added = plasma_fused - oxygen_added - Convert.ToDouble( this.thermal_energy() / 3000000 );
					reaction_energy = Num13.MaxInt( Convert.ToInt32( reaction_energy + carbon_efficency * ( this.toxins ??0) / ( moles_impurities / carbon_efficency + 2 ) * 10 + plasma_fused / ( moles_impurities / carbon_efficency ) * 3000000 ), 0 );
					this.toxins = Num13.MaxInt( ((int)( ( this.toxins ??0) - plasma_fused )), 0 );
					this.carbon_dioxide = Num13.MaxInt( ((int)( ( this.carbon_dioxide ??0) - carbon_catalyzed )), 0 );
					this.oxygen = Num13.MaxInt( ((int)( ( this.oxygen ??0) + oxygen_added )), 0 );
					this.nitrogen = Num13.MaxInt( ((int)( this.nitrogen + nitrogen_added )), 0 );

					if ( Convert.ToDouble( reaction_energy ) > 0 ) {
						reacting = true;
						new_heat_capacity = this.heat_capacity();

						if ( new_heat_capacity > 0.0003 ) {
							this.temperature = Num13.MaxInt( Convert.ToInt32( ( this.temperature * old_heat_capacity + reaction_energy ) / new_heat_capacity ), ((int)( 2.7 )) );
						}
					}
				}
			}
			this.fuel_burnt = 0;

			if ( Convert.ToDouble( this.temperature ) > 373.41 ) {
				
				if ( this.fire() > 0 ) {
					reacting = true;
				}
			}
			return reacting;
		}

		// Function from file: gas_mixture.dm
		public dynamic thermal_energy(  ) {
			return this.temperature * this.heat_capacity();
		}

		// Function from file: gas_mixture.dm
		public int return_volume(  ) {
			return Num13.MaxInt( 0, ((int)( this.volume )) );
		}

		// Function from file: gas_mixture.dm
		public dynamic return_temperature(  ) {
			return this.temperature;
		}

		// Function from file: gas_mixture.dm
		public double return_pressure(  ) {
			
			if ( this.volume > 0 ) {
				return this.total_moles() * Convert.ToDouble( this.temperature ) * 8.31 / this.volume;
			}
			return 0;
		}

		// Function from file: gas_mixture.dm
		public double total_moles(  ) {
			double moles = 0;
			dynamic gas = null;
			dynamic trace_gas = null;

			moles = ( this.oxygen ??0) + ( this.carbon_dioxide ??0) + this.nitrogen + ( this.toxins ??0);

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				moles += trace_gas.moles ??0;
			}
			return moles;
		}

		// Function from file: gas_mixture.dm
		public double heat_capacity_archived(  ) {
			double heat_capacity_archived = 0;
			dynamic gas = null;
			dynamic trace_gas = null;

			heat_capacity_archived = ( this.carbon_dioxide_archived ??0) * 30 + ( ( this.oxygen_archived ??0) + this.nitrogen_archived ) * 20 + ( this.toxins_archived ??0) * 200;

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				heat_capacity_archived += ( trace_gas.moles_archived ??0) * trace_gas.specific_heat;
			}
			return heat_capacity_archived;
		}

		// Function from file: gas_mixture.dm
		public double heat_capacity(  ) {
			double heat_capacity = 0;
			dynamic gas = null;
			dynamic trace_gas = null;

			heat_capacity = ( this.carbon_dioxide ??0) * 30 + ( ( this.oxygen ??0) + this.nitrogen ) * 20 + ( this.toxins ??0) * 200;

			foreach (dynamic _a in Lang13.Enumerate( this.trace_gases )) {
				gas = _a;
				
				trace_gas = gas;
				heat_capacity += ( trace_gas.moles ??0) * trace_gas.specific_heat;
			}
			return heat_capacity;
		}

	}

}