// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Disposalpipe : Obj_Structure {

		public int dpdir = 0;
		public int health = 10;
		public string base_icon_state = null;
		public Game_Data stored = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.level = 1;
			this.icon = "icons/obj/atmospherics/pipes/disposal.dmi";
			this.layer = 2.3;
		}

		// Function from file: disposal-structures.dm
		public Obj_Structure_Disposalpipe ( dynamic loc = null, Game_Data make_from = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( make_from != null && !Lang13.Bool( make_from.gc_destroyed ) ) {
				this.base_icon_state = ((dynamic)make_from).base_state;
				this.dir = Convert.ToInt32( ((dynamic)make_from).dir );
				this.dpdir = Convert.ToInt32( ((dynamic)make_from).dpdir );
				((dynamic)make_from).loc = this;
				this.stored = make_from;
			} else {
				this.base_icon_state = this.icon_state;
				this.stored = new Obj_Structure_Disposalconstruct( this, null, this.dir );

				switch ((string)( this.base_icon_state )) {
					case "pipe-s":
						((dynamic)this.stored).ptype = 0;
						break;
					case "pipe-c":
						((dynamic)this.stored).ptype = 1;
						break;
					case "pipe-j1":
						((dynamic)this.stored).ptype = 2;
						break;
					case "pipe-j2":
						((dynamic)this.stored).ptype = 3;
						break;
					case "pipe-y":
						((dynamic)this.stored).ptype = 4;
						break;
					case "pipe-t":
						((dynamic)this.stored).ptype = 5;
						break;
					case "pipe-j1s":
						((dynamic)this.stored).ptype = 9;
						break;
					case "pipe-j2s":
						((dynamic)this.stored).ptype = 10;
						break;
				}
			}
			return;
		}

		// Function from file: disposal-structures.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			
			if ( ( current_size ??0) >= 9 ) {
				this.Deconstruct();
			}
			return;
		}

		// Function from file: disposal-structures.dm
		public override void Deconstruct(  ) {
			Ent_Static T = null;

			
			if ( this.stored != null ) {
				T = this.loc;
				((dynamic)this.stored).loc = T;
				this.transfer_fingerprints_to( this.stored );
				((dynamic)this.stored).dir = this.dir;
				((dynamic)this.stored).density = 0;
				((dynamic)this.stored).anchored = 1;
				((Obj_Structure_Disposalconstruct)this.stored).update();
				base.Deconstruct();
			}
			return;
		}

		// Function from file: disposal-structures.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Ent_Static T = null;
			dynamic W = null;

			T = this.loc;

			if ( Lang13.Bool( ((dynamic)T).intact ) ) {
				return null;
			}
			this.add_fingerprint( user );

			if ( A is Obj_Item_Weapon_Weldingtool ) {
				W = A;

				if ( ((Obj_Item_Weapon_Weldingtool)W).remove_fuel( 0, user ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/welder2.ogg", 100, 1 );
					user.WriteMsg( "<span class='notice'>You start slicing the disposal pipe...</span>" );

					if ( GlobalFuncs.do_after( user, 30, null, this ) ) {
						
						if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)W).isOn() ) {
							return null;
						}
						this.Deconstruct();
						user.WriteMsg( "<span class='notice'>You slice the disposal pipe.</span>" );
					}
				} else {
					return null;
				}
			}
			return null;
		}

		// Function from file: disposal-structures.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			dynamic H = null;

			H = Lang13.FindIn( typeof(Obj_Structure_Disposalholder), this );

			if ( Lang13.Bool( H ) ) {
				((Ent_Static)H).contents_explosion( severity, target );
			}

			switch ((double?)( severity )) {
				case 1:
					this.broken( false );
					return false;
					break;
				case 2:
					this.health -= Rand13.Int( 5, 15 );
					this.healthcheck();
					return false;
					break;
				case 3:
					this.health -= Rand13.Int( 0, 15 );
					this.healthcheck();
					return false;
					break;
			}
			return false;
		}

		// Function from file: disposal-structures.dm
		public override void hide( bool h = false ) {
			this.invisibility = ( h ? 101 : 0 );
			this.updateicon();
			return;
		}

		// Function from file: disposal-structures.dm
		public void healthcheck(  ) {
			
			if ( this.health < -2 ) {
				this.broken( false );
			} else if ( this.health < 1 ) {
				this.broken( true );
			}
			return;
		}

		// Function from file: disposal-structures.dm
		public void broken( bool? remains = null ) {
			remains = remains ?? false;

			dynamic D = null;
			Obj_Structure_Disposalpipe_Broken P = null;
			dynamic H = null;
			Ent_Static T = null;
			Ent_Dynamic AM = null;

			
			if ( remains == true ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					D = _a;
					

					if ( Lang13.Bool( D & this.dpdir ) ) {
						P = new Obj_Structure_Disposalpipe_Broken( this.loc );
						P.dir = Convert.ToInt32( D );
					}
				}
			}
			this.invisibility = 101;
			H = Lang13.FindIn( typeof(Obj_Structure_Disposalholder), this );

			if ( Lang13.Bool( H ) ) {
				H.active = 0;
				T = this.loc;

				if ( T.density ) {
					
					foreach (dynamic _b in Lang13.Enumerate( H, typeof(Ent_Dynamic) )) {
						AM = _b;
						
						AM.loc = T;
						AM.pipe_eject( 0 );
					}
					GlobalFuncs.qdel( H );
					return;
				}

				if ( Lang13.Bool( H ) ) {
					this.expel( H, T, 0 );
				}
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return;
		}

		// Function from file: disposal-structures.dm
		public void expel( dynamic H = null, Ent_Static T = null, int? direction = null ) {
			dynamic target = null;
			Ent_Static myturf = null;
			Ent_Dynamic AM = null;
			Ent_Dynamic AM2 = null;

			
			if ( T is Tile_Simulated_Floor ) {
				myturf = T;

				if ( Lang13.Bool( ((dynamic)myturf).builtin_tile ) ) {
					((dynamic)myturf).builtin_tile.loc = T;
					((dynamic)myturf).builtin_tile = null;
				}
				((Tile_Simulated_Floor)myturf).make_plating();
			}

			if ( Lang13.Bool( direction ) ) {
				
				if ( T is Tile_Space ) {
					target = GlobalFuncs.get_edge_target_turf( T, direction );
				} else {
					target = GlobalFuncs.get_ranged_target_turf( T, direction, 10 );
				}
				GlobalFuncs.playsound( this, "sound/machines/hiss.ogg", 50, 0, 0 );

				if ( Lang13.Bool( H ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( H, typeof(Ent_Dynamic) )) {
						AM = _a;
						
						AM.loc = T;
						AM.pipe_eject( direction );
						AM.throw_at_fast( target, 10, 1 );
					}
				}
			} else {
				GlobalFuncs.playsound( this, "sound/machines/hiss.ogg", 50, 0, 0 );

				if ( Lang13.Bool( H ) ) {
					
					foreach (dynamic _b in Lang13.Enumerate( H, typeof(Ent_Dynamic) )) {
						AM2 = _b;
						
						target = GlobalFuncs.get_offset_target_turf( T, Rand13.Int( 5 ) - Rand13.Int( 5 ), Rand13.Int( 5 ) - Rand13.Int( 5 ) );
						AM2.loc = T;
						AM2.pipe_eject( 0 );
						AM2.throw_at_fast( target, 5, 1 );
					}
				}
			}
			((Obj_Structure_Disposalholder)H).vent_gas( T );
			GlobalFuncs.qdel( H );
			return;
		}

		// Function from file: disposal-structures.dm
		public void updateicon(  ) {
			
			if ( this.invisibility != 0 ) {
				this.icon_state = "" + this.base_icon_state + "f";
			} else {
				this.icon_state = this.base_icon_state;
			}
			return;
		}

		// Function from file: disposal-structures.dm
		public void update(  ) {
			Ent_Static T = null;

			T = this.loc;
			this.hide( Lang13.Bool( ((dynamic)T).intact ) && !( T is Tile_Space ) );
			return;
		}

		// Function from file: disposal-structures.dm
		public virtual Obj_Structure_Disposalpipe transfer( Obj_Structure_Disposalholder H = null ) {
			double? nextdir = null;
			Tile T = null;
			Obj_Structure_Disposalpipe P = null;
			dynamic H2 = null;

			nextdir = this.nextdir( H.dir );
			H.dir = ((int)( nextdir ??0 ));
			T = H.nextloc();
			P = H.findpipe( T );

			if ( P != null ) {
				H2 = Lang13.FindIn( typeof(Obj_Structure_Disposalholder), P );

				if ( Lang13.Bool( H2 ) && !Lang13.Bool( H2.active ) ) {
					H.merge( H2 );
				}
				H.loc = P;
			} else {
				H.loc = T;
				return null;
			}
			return P;
		}

		// Function from file: disposal-structures.dm
		public virtual double? nextdir( int fromdir = 0, double? sortTag = null ) {
			return this.dpdir & ~Num13.Rotate( fromdir, 180 );
		}

		// Function from file: disposal-structures.dm
		public override dynamic Destroy(  ) {
			dynamic H = null;
			Ent_Static T = null;
			Ent_Dynamic AM = null;

			H = Lang13.FindIn( typeof(Obj_Structure_Disposalholder), this );

			if ( Lang13.Bool( H ) ) {
				H.active = 0;
				T = this.loc;

				if ( T.density ) {
					
					foreach (dynamic _a in Lang13.Enumerate( H, typeof(Ent_Dynamic) )) {
						AM = _a;
						
						AM.loc = T;
						AM.pipe_eject( 0 );
					}
					GlobalFuncs.qdel( H );
					return base.Destroy();
				}

				if ( Lang13.Bool( H ) ) {
					this.expel( H, T, 0 );
				}
			}
			return base.Destroy();
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			return;
		}

	}

}