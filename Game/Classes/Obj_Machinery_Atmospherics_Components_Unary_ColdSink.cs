// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_ColdSink : Obj_Machinery_Atmospherics_Components_Unary {

		public bool on = false;
		public double current_temperature = 293.41;
		public double current_heat_capacity = 50000;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "cold_map";
		}

		public Obj_Machinery_Atmospherics_Components_Unary_ColdSink ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: cold_sink.dm
		public override int process_atmos(  ) {
			GasMixture air_contents = null;
			double air_heat_capacity = 0;
			double combined_heat_capacity = 0;
			dynamic old_temperature = null;
			double combined_energy = 0;

			base.process_atmos();

			if ( !this.on ) {
				return 0;
			}
			air_contents = this.airs[1];
			air_heat_capacity = air_contents.heat_capacity();
			combined_heat_capacity = this.current_heat_capacity + air_heat_capacity;
			old_temperature = air_contents.temperature;

			if ( combined_heat_capacity > 0 ) {
				combined_energy = this.current_temperature * this.current_heat_capacity + air_heat_capacity * Convert.ToDouble( air_contents.temperature );
				air_contents.temperature = combined_energy / combined_heat_capacity;
			}

			if ( Math.Abs( Convert.ToDouble( old_temperature - air_contents.temperature ) ) > 1 ) {
				this.update_parents();
			}
			return 1;
		}

		// Function from file: cold_sink.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			this.overlays.Cut();

			if ( this.showpipe ) {
				this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/unary_devices.dmi", "scrub_cap", this.initialize_directions ) );
			}

			if ( !Lang13.Bool( this.nodes[1] ) || !this.on || ( this.stat & 3 ) != 0 ) {
				this.icon_state = "cold_off";
				return;
			} else {
				this.icon_state = "cold_on";
			}
			return;
		}

	}

}