// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Bombcore_Training : Obj_Item_Weapon_Bombcore {

		public int defusals = 0;
		public int attempts = 0;

		public Obj_Item_Weapon_Bombcore_Training ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: syndicatebomb.dm
		public override void defuse(  ) {
			Ent_Static holder = null;

			holder = this.loc;

			if ( holder is Obj_Machinery_Syndicatebomb ) {
				this.attempts++;
				this.defusals++;
				holder.loc.visible_message( new Txt( "<span class='notice'>" ).icon( holder ).str( " Alert: Bomb has been defused. Your score is now " ).item( this.defusals ).str( " for " ).item( this.attempts ).str( "! Resetting wires in 5 seconds...</span>" ).ToString() );
				Task13.Sleep( 50 );

				if ( holder is Obj_Machinery_Syndicatebomb ) {
					this.reset();
				}
			}
			return;
		}

		// Function from file: syndicatebomb.dm
		public override void detonate(  ) {
			Ent_Static holder = null;

			holder = this.loc;

			if ( holder is Obj_Machinery_Syndicatebomb ) {
				this.attempts++;
				holder.loc.visible_message( new Txt( "<span class='danger'>" ).icon( holder ).str( " Alert: Bomb has detonated. Your score is now " ).item( this.defusals ).str( " for " ).item( this.attempts ).str( ". Resetting wires...</span>" ).ToString() );
				this.reset();
			} else {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: syndicatebomb.dm
		public void reset(  ) {
			Ent_Static holder = null;

			holder = this.loc;

			if ( holder is Obj_Machinery_Syndicatebomb ) {
				
				if ( Lang13.Bool( ((dynamic)holder).wires ) ) {
					((Wires)((dynamic)holder).wires).Shuffle();
				}
				((dynamic)holder).defused = 0;
				((dynamic)holder).open_panel = 0;
				((dynamic)holder).update_icon();
				((dynamic)holder).updateDialog();
			}
			return;
		}

	}

}