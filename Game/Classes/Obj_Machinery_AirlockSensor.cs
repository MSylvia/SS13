// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_AirlockSensor : Obj_Machinery {

		public dynamic id_tag = null;
		public dynamic master_tag = null;
		public double? frequency = 1449;
		public RadioFrequency radio_connection = null;
		public bool on = true;
		public bool alert = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.power_channel = 3;
			this.icon = "icons/obj/airlock_machines.dmi";
			this.icon_state = "airlock_sensor_off";
		}

		// Function from file: airlock_control.dm
		public Obj_Machinery_AirlockSensor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.SSradio != null ) {
				this.set_frequency( this.frequency );
			}
			return;
		}

		// Function from file: airlock_control.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

		// Function from file: airlock_control.dm
		public override void initialize(  ) {
			this.set_frequency( this.frequency );
			return;
		}

		// Function from file: airlock_control.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_AIRLOCK );
			return;
		}

		// Function from file: airlock_control.dm
		public override int? process( dynamic seconds = null ) {
			Signal signal = null;
			GasMixture air_sample = null;
			double pressure = 0;

			
			if ( this.on ) {
				signal = new Signal();
				signal.transmission_method = 1;
				signal.data["tag"] = this.id_tag;
				signal.data["timestamp"] = Game13.time;
				air_sample = this.return_air();
				pressure = Num13.Round( air_sample.return_pressure(), 0.1 );
				this.alert = pressure < 81.51;
				signal.data["pressure"] = String13.NumberToString( pressure );
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_AIRLOCK, 5 );
			}
			this.update_icon();
			return null;
		}

		// Function from file: airlock_control.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			Signal signal = null;

			signal = new Signal();
			signal.transmission_method = 1;
			signal.data["tag"] = this.master_tag;
			signal.data["command"] = "cycle";
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_AIRLOCK, 5 );
			Icon13.Flick( "airlock_sensor_cycle", this );
			return null;
		}

		// Function from file: airlock_control.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.on ) {
				
				if ( this.alert ) {
					this.icon_state = "airlock_sensor_alert";
				} else {
					this.icon_state = "airlock_sensor_standby";
				}
			} else {
				this.icon_state = "airlock_sensor_off";
			}
			return null;
		}

	}

}