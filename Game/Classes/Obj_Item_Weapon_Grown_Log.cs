// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Grown_Log : Obj_Item_Weapon_Grown {

		public Type plank_type = typeof(Obj_Item_Stack_Sheet_Mineral_Wood);
		public string plank_name = "wooden planks";
		public ByTable accepted = new ByTable(new object [] { 
											typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Tobacco), 
											typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Tobacco_Space), 
											typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Tea_Aspera), 
											typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Tea_Astra), 
											typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Ambrosia_Vulgaris), 
											typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Ambrosia_Deus), 
											typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Wheat)
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.seed = typeof(Obj_Item_Seeds_Towermycelium);
			this.force = 5;
			this.throwforce = 5;
			this.throw_range = 3;
			this.plant_type = 2;
			this.origin_tech = "materials=1";
			this.attack_verb = new ByTable(new object [] { "bashed", "battered", "bludgeoned", "whacked" });
			this.icon_state = "logs";
		}

		public Obj_Item_Weapon_Grown_Log ( dynamic newloc = null, int? new_potency = null ) : base( (object)(newloc), new_potency ) {
			
		}

		// Function from file: growninedible.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic plank = null;
			dynamic old_plank_amount = null;
			Obj_Item_Stack ST = null;
			dynamic leaf = null;
			Obj_Item_Device_Flashlight_Flare_Torch T = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Weapon_CircularSaw || A is Obj_Item_Weapon_Hatchet || A is Obj_Item_Weapon_Twohanded_Fireaxe && A.wielded || A is Obj_Item_Weapon_Melee_Energy || A is Obj_Item_Weapon_Twohanded_Required_Chainsaw ) {
				user.show_message( new Txt( "<span class='notice'>You make " ).item( this.plank_name ).str( " out of " ).the( this ).item().str( "!</span>" ).ToString(), 1 );
				plank = Lang13.Call( this.plank_type, user.loc, Num13.Floor( ( this.potency ??0) / 25 ) + 1 );
				old_plank_amount = plank.amount;

				foreach (dynamic _a in Lang13.Enumerate( user.loc, typeof(Obj_Item_Stack) )) {
					ST = _a;
					

					if ( ST != plank && Lang13.Bool( ((dynamic)this.plank_type).IsInstanceOfType( ST ) ) && ( ST.amount ??0) < ( ST.max_amount ??0) ) {
						ST.attackby( plank, user );
					}
				}

				if ( Convert.ToDouble( plank.amount ) > Convert.ToDouble( old_plank_amount ) ) {
					user.WriteMsg( "<span class='notice'>You add the newly-formed " + this.plank_name + " to the stack. It now contains " + plank.amount + " " + this.plank_name + ".</span>" );
				}
				GlobalFuncs.qdel( this );
			}

			if ( GlobalFuncs.is_type_in_list( A, this.accepted ) ) {
				leaf = A;

				if ( leaf.dry ) {
					user.show_message( new Txt( "<span class='notice'>You wrap " ).the( A ).item().str( " around the log, turning it into a torch!</span>" ).ToString() );
					T = new Obj_Item_Device_Flashlight_Flare_Torch( user.loc );
					Task13.User.unEquip( A );
					Task13.User.put_in_active_hand( T );
					GlobalFuncs.qdel( leaf );
					GlobalFuncs.qdel( this );
					return null;
				} else {
					Task13.User.WriteMsg( "<span class ='warning'>You must dry this first!</span>" );
				}
			}
			return null;
		}

	}

}