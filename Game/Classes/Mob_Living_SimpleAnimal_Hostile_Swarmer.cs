// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Swarmer : Mob_Living_SimpleAnimal_Hostile {

		public int? resources = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.unique_name = true;
			this.speak_emote = new ByTable(new object [] { "tones" });
			this.health = 40;
			this.maxHealth = 40;
			this.icon_living = "swarmer";
			this.icon_dead = "swarmer_unactivated";
			this.wander = false;
			this.harm_intent_damage = 5;
			this.minbodytemp = 0;
			this.maxbodytemp = 500;
			this.atmos_requirements = new ByTable().Set( "min_oxy", 0 ).Set( "max_oxy", 0 ).Set( "min_tox", 0 ).Set( "max_tox", 0 ).Set( "min_co2", 0 ).Set( "max_co2", 0 ).Set( "min_n2", 0 ).Set( "max_n2", 0 );
			this.unsuitable_atmos_damage = 0;
			this.melee_damage_lower = 15;
			this.melee_damage_upper = 15;
			this.melee_damage_type = "stamina";
			this.damage_coeff = new ByTable().Set( "brute", 1 ).Set( "fire", 1 ).Set( "tox", 0 ).Set( "clone", 0 ).Set( "stamina", 0 ).Set( "oxy", 0 );
			this.languages = 64;
			this.attacktext = "shocks";
			this.attack_sound = "sound/effects/EMPulse.ogg";
			this.friendly = "pinches";
			this.speed = 0;
			this.faction = new ByTable(new object [] { "swarmer" });
			this.AIStatus = 3;
			this.projectiletype = typeof(Obj_Item_Projectile_Beam_Disabler);
			this.pass_flags = 1;
			this.ventcrawler = 2;
			this.ranged = true;
			this.ranged_cooldown_cap = 2;
			this.projectilesound = "sound/weapons/taser2.ogg";
			this.icon = "icons/mob/swarmer.dmi";
			this.icon_state = "swarmer";
		}

		// Function from file: swarmer.dm
		public Mob_Living_SimpleAnimal_Hostile_Swarmer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.verbs.Remove( typeof(Mob_Living).GetMethod( "pulled" ) );
			return;
		}

		// Function from file: swarmer.dm
		public void ContactSwarmers(  ) {
			dynamic message = null;
			dynamic M = null;

			message = Interface13.Input( this, "Announce to other swarmers", "Swarmer contact", null, null, InputType.Any );

			if ( Lang13.Bool( message ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
					M = _a;
					

					if ( M is Mob_Living_SimpleAnimal_Hostile_Swarmer || GlobalVars.dead_mob_list.Contains( M ) ) {
						M.WriteMsg( "<B>Swarm communication - </b> " + this + " states: " + message );
					}
				}
			}
			return;
		}

		// Function from file: swarmer.dm
		public void ToggleLight(  ) {
			
			if ( !( this.luminosity != 0 ) ) {
				this.SetLuminosity( 3 );
			} else {
				this.SetLuminosity( 0 );
			}
			return;
		}

		// Function from file: swarmer.dm
		[VerbInfo( name: "Self Repair", desc: "Attempts to repair damage to our body. You will have to remain motionless until repairs are complete.", group: "Swarmer" )]
		public void RepairSelf(  ) {
			
			if ( !( this.loc is Tile ) ) {
				return;
			}
			this.WriteMsg( "<span class='info'>Attempting to repair damage to our body, stand by...</span>" );

			if ( GlobalFuncs.do_mob( this, this, 100 ) ) {
				this.adjustHealth( -100 );
				this.WriteMsg( "<span class='info'>We successfully repaired ourselves.</span>" );
			}
			return;
		}

		// Function from file: swarmer.dm
		[VerbInfo( name: "Replicate", desc: "Creates a shell for a new swarmer. Swarmers will self activate.", group: "Swarmer" )]
		public void CreateSwarmer(  ) {
			this.WriteMsg( "<span class='info'>We are attempting to replicate ourselves. We will need to stand still until the process is complete.</span>" );

			if ( ( this.resources ??0) < 50 ) {
				this.WriteMsg( "<span class='warning'>We do not have the resources for this!</span>" );
				return;
			}

			if ( !( this.loc is Tile ) ) {
				this.WriteMsg( "<span class='warning'>This is not a suitable location for replicating ourselves. We need more room.</span>" );
				return;
			}

			if ( GlobalFuncs.do_mob( this, this, 100 ) ) {
				
				if ( this.Fabricate( typeof(Obj_Item_UnactivatedSwarmer), 50 ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/poster_being_created.ogg", 50, 1, -1 );
				}
			}
			return;
		}

		// Function from file: swarmer.dm
		[VerbInfo( name: "Create barricade", desc: "Creates a barricade that will stop anything but swarmers and disabler beams from passing through.", group: "Swarmer" )]
		public void CreateBarricade(  ) {
			
			if ( Lang13.Bool( ((dynamic)this.loc).Contains( typeof(Obj_Effect_Swarmer_Destructible_Blockade) ) ) ) {
				this.WriteMsg( "<span class='warning'>There is already a blockade here. Aborting.</span>" );
				return;
			}

			if ( ( this.resources ??0) < 5 ) {
				this.WriteMsg( "<span class='warning'>We do not have the resources for this!</span>" );
				return;
			}

			if ( GlobalFuncs.do_mob( this, this, 10 ) ) {
				this.Fabricate( typeof(Obj_Effect_Swarmer_Destructible_Blockade), 5 );
			}
			return;
		}

		// Function from file: swarmer.dm
		[VerbInfo( name: "Create trap", desc: "Creates a simple trap that will non-lethally electrocute anything that steps on it. Costs 5 resources", group: "Swarmer" )]
		public void CreateTrap(  ) {
			
			if ( Lang13.Bool( ((dynamic)this.loc).Contains( typeof(Obj_Effect_Swarmer_Destructible_Trap) ) ) ) {
				this.WriteMsg( "<span class='warning'>There is already a trap here. Aborting.</span>" );
				return;
			}
			this.Fabricate( typeof(Obj_Effect_Swarmer_Destructible_Trap), 5 );
			return;
		}

		// Function from file: swarmer.dm
		public void DismantleMachine( Obj_Machinery target = null ) {
			Obj_Effect_Swarmer_Dismantle D = null;
			Obj_Item_Stack_Sheet_Metal M = null;
			Obj_Item I = null;
			Obj_Effect_Swarmer_Disintegration N = null;
			Obj_Machinery C = null;

			this.do_attack_animation( target );
			this.WriteMsg( "<span class='info'>We begin to dismantle this machine. We will need to be uninterrupted.</span>" );
			D = new Obj_Effect_Swarmer_Dismantle( GlobalFuncs.get_turf( target ) );
			D.pixel_x = target.pixel_x;
			D.pixel_y = target.pixel_y;
			D.pixel_z = target.pixel_z;

			if ( GlobalFuncs.do_mob( this, target, 100 ) ) {
				this.WriteMsg( "<span class='info'>Dismantling complete.</span>" );
				M = new Obj_Item_Stack_Sheet_Metal( target.loc );
				M.amount = 5;

				foreach (dynamic _a in Lang13.Enumerate( target.component_parts, typeof(Obj_Item) )) {
					I = _a;
					
					I.loc = M.loc;
				}
				N = new Obj_Effect_Swarmer_Disintegration( GlobalFuncs.get_turf( target ) );
				N.pixel_x = target.pixel_x;
				N.pixel_y = target.pixel_y;
				N.pixel_z = target.pixel_z;
				target.dropContents();

				if ( target is Obj_Machinery_Computer ) {
					C = target;

					if ( Lang13.Bool( ((dynamic)C).circuit ) ) {
						((dynamic)C).circuit.loc = M.loc;
					}
				}
				GlobalFuncs.qdel( target );
			}
			return;
		}

		// Function from file: swarmer.dm
		public void DisperseTarget( Mob_Living target = null ) {
			int cycle = 0;
			Tile random_location = null;
			Tile F = null;
			GasMixture A = null;
			double pressure = 0;
			Obj_Item_Weapon_Restraints_Handcuffs_Cable_Zipties Z = null;
			Mob_Living H = null;

			
			if ( target != this ) {
				this.WriteMsg( "<span class='info'>Attempting to remove this being from our presence.</span>" );

				if ( this.z != 1 ) {
					this.WriteMsg( "<span class='warning'>Our bluespace transceiver cannot locate a viable bluespace link, our teleportation abilities are useless in this area.</span>" );
					return;
				}

				if ( GlobalFuncs.do_mob( this, target, 30 ) ) {
					cycle = 0;

					while (cycle < 100) {
						random_location = Map13.GetTile( Rand13.Int( 37, 202 ), Rand13.Int( 75, 192 ), 1 );

						if ( random_location is Tile_Simulated_Floor ) {
							F = random_location;

							if ( Lang13.Bool( ((dynamic)F).air ) ) {
								A = ((dynamic)F).air;

								if ( ( A.oxygen ??0) >= 16 && !Lang13.Bool( A.toxins ) && ( A.carbon_dioxide ??0) < 10 && !( A.trace_gases.len != 0 ) ) {
									
									if ( Convert.ToDouble( A.temperature ) > 270 && Convert.ToDouble( A.temperature ) < 360 ) {
										pressure = A.return_pressure();

										if ( pressure > 20 && pressure < 550 ) {
											
											if ( target is Mob_Living_Carbon_Human ) {
												Z = new Obj_Item_Weapon_Restraints_Handcuffs_Cable_Zipties( this );
												H = target;
												Z.apply_cuffs( H, this );
											}
											GlobalFuncs.do_teleport( target, F, 0 );
											GlobalFuncs.playsound( this, "sound/effects/sparks4.ogg", 50, 1 );
											break;
										}
									}
								}
							}
						}
						cycle++;
					}
					return;
				}
			}
			return;
		}

		// Function from file: swarmer.dm
		public void DisIntegrate( Ent_Static target = null ) {
			new Obj_Effect_Swarmer_Disintegration( GlobalFuncs.get_turf( target ) );
			this.do_attack_animation( target );
			this.changeNext_move( 8 );
			target.ex_act( 3 );
			return;
		}

		// Function from file: swarmer.dm
		public void Integrate( Obj_Item target = null ) {
			Obj_Effect_Swarmer_Integrate I = null;
			Obj_Item S = null;

			
			if ( ( this.resources ??0) >= 100 ) {
				this.WriteMsg( "<span class='warning'>We cannot hold more materials!</span>" );
				return;
			}

			if ( Lang13.Bool( target.materials["$metal"] ) || Lang13.Bool( target.materials["$glass"] ) ) {
				this.resources++;
				this.do_attack_animation( target );
				this.changeNext_move( 8 );
				I = new Obj_Effect_Swarmer_Integrate( GlobalFuncs.get_turf( target ) );
				I.pixel_x = target.pixel_x;
				I.pixel_y = target.pixel_y;
				I.pixel_z = target.pixel_z;

				if ( target is Obj_Item_Stack ) {
					S = target;
					((Obj_Item_Stack)S).use( 1 );

					if ( Lang13.Bool( ((dynamic)S).amount ) ) {
						return;
					}
				}
				GlobalFuncs.qdel( target );
			} else {
				this.WriteMsg( new Txt( "<span class='warning'>" ).the( target ).item().str( " is incompatible with our internal matter recycler.</span>" ).ToString() );
				return;
			}
			return;
		}

		// Function from file: swarmer.dm
		public bool Fabricate( Type fabrication_object = null, int? fabrication_cost = null ) {
			fabrication_cost = fabrication_cost ?? 0;

			
			if ( !( this.loc is Tile ) ) {
				this.WriteMsg( "<span class='warning'>This is not a suitable location for fabrication. We need more space.</span>" );
			}

			if ( ( this.resources ??0) >= ( fabrication_cost ??0) ) {
				this.resources -= fabrication_cost ??0;
			} else {
				this.WriteMsg( "<span class='warning'>You do not have the necessary resources to fabricate this object.</span>" );
				return false;
			}
			Lang13.Call( fabrication_object, this.loc );
			return true;
		}

		// Function from file: swarmer.dm
		public override void CtrlClickOn( dynamic A = null ) {
			this.face_atom( A );

			if ( !( this.loc is Tile ) ) {
				return;
			}

			if ( this.next_move > Game13.time ) {
				return;
			}

			if ( !((Ent_Static)A).Adjacent( this ) ) {
				return;
			}
			((Ent_Static)A).swarmer_act( this );
			return;
		}

		// Function from file: swarmer.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			
			if ( mover is Obj_Item_Projectile_Beam_Disabler ) {
				return true;
			}

			if ( mover is Mob_Living_SimpleAnimal_Hostile_Swarmer ) {
				return true;
			}
			base.CanPass( (object)(mover), (object)(target), height, air_group );
			return false;
		}

		// Function from file: swarmer.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( Convert.ToDouble( this.health ) > 1 ) {
				this.health = 1;
				return 0;
			} else {
				this.death();
			}
			return 0;
		}

		// Function from file: swarmer.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			base.death( gibbed, toast );
			new Obj_Effect_Decal_Cleanable_RobotDebris( this.loc );
			new Obj_Item_Weapon_Ore_BluespaceCrystal_Artificial( this.loc );
			this.ghostize();
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: swarmer.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( "Resources:", this.resources );
			}
			return null;
		}

		// Function from file: swarmer.dm
		public override dynamic Login(  ) {
			base.Login();
			this.WriteMsg( "<b>You are a swarmer, a weapon of a long dead civilization. Until further orders from your original masters are received, you must continue to consume and replicate.</b>" );
			this.WriteMsg( "<b>Ctrl + Click provides most of your swarmer specific interactions, such as cannibalizing metal or glass, destroying the environment, or teleporting mobs away from you." );
			this.WriteMsg( "<b>Objectives:</b>" );
			this.WriteMsg( "1. Consume resources and replicate until there are no more resources left." );
			this.WriteMsg( "2. Ensure that the station is fit for invasion at a later date, do not perform actions that would render it dangerous or inhospitable." );
			this.WriteMsg( "3. Biological resources will be harvested at a later date, do not harm them." );
			return null;
		}

	}

}