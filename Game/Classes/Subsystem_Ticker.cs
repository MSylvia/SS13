// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Ticker : Subsystem {

		public int current_state = 0;
		public dynamic force_ending = 0;
		public bool hide_mode = false;
		public dynamic mode = null;
		public dynamic event_time = null;
		public bool v_event = false;
		public dynamic login_music = null;
		public dynamic round_end_sound = null;
		public ByTable minds = new ByTable();
		public dynamic Bible_icon_state = null;
		public dynamic Bible_item_state = null;
		public string Bible_name = null;
		public string Bible_deity_name = null;
		public ByTable syndicate_coalition = new ByTable();
		public ByTable factions = new ByTable();
		public ByTable availablefactions = new ByTable();
		public bool delay_end = false;
		public bool triai = false;
		public bool tipped = false;
		public dynamic timeLeft = 1200;
		public int totalPlayers = 0;
		public int totalPlayersReady = 0;
		public int queue_delay = 0;
		public ByTable queued_players = new ByTable();
		public Obj_Screen cinematic = null;
		public bool maprotatechecked = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Ticker";
			this.can_fire = true;
		}

		// Function from file: ticker.dm
		public Subsystem_Ticker (  ) {
			
			if ( GlobalVars.ticker != this ) {
				
				if ( GlobalVars.ticker is Subsystem_Ticker ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.ticker );
				}
				GlobalVars.ticker = this;
			}
			this.login_music = GlobalFuncs.pickweight( new ByTable().Set( "sound/ambience/title2.ogg", 31 ).Set( "sound/ambience/title1.ogg", 31 ).Set( "sound/ambience/title3.ogg", 31 ).Set( "sound/ambience/clown.ogg", 7 ) );

			if ( Lang13.Bool( GlobalVars.SSevent.holidays ) && Lang13.Bool( GlobalVars.SSevent.holidays["April Fool's Day"] ) ) {
				this.login_music = "sound/ambience/clown.ogg";
			}
			return;
		}

		// Function from file: setupgame.dm
		public void setupFactions(  ) {
			dynamic typepath = null;
			dynamic F = null;
			Faction_Syndicate S = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Faction) ) )) {
				typepath = _a;
				
				F = Lang13.Call( typepath );

				if ( !Lang13.Bool( F.name ) ) {
					GlobalFuncs.qdel( F );
					continue;
				} else {
					this.factions.Add( F );
					this.availablefactions.Add( F );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.factions, typeof(Faction_Syndicate) )) {
				S = _b;
				
				this.syndicate_coalition.Add( S );
			}
			return;
		}

		// Function from file: ticker.dm
		public void check_maprotate(  ) {
			
			if ( !GlobalVars.config.maprotation || true ) {
				return;
			}

			if ( GlobalVars.SSshuttle.emergency.mode != 5 || GlobalVars.SSshuttle.canRecall() ) {
				return;
			}

			if ( this.maprotatechecked ) {
				return;
			}
			this.maprotatechecked = true;

			if ( !Rand13.PercentChance( ((int)( Game13.time / 600 * ( GlobalVars.config.maprotatechancedelta ??0) )) ) ) {
				return;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.maprotate();
				return;
			}));
			return;
		}

		// Function from file: ticker.dm
		public void check_queue(  ) {
			Mob_NewPlayer next_in_line = null;

			
			if ( !( this.queued_players.len != 0 ) || !Lang13.Bool( GlobalVars.config.hard_popcap ) ) {
				return;
			}
			this.queue_delay++;
			next_in_line = this.queued_players[1];

			dynamic _a = this.queue_delay; // Was a switch-case, sorry for the mess.
			if ( 25<=_a&&_a<=Double.PositiveInfinity ) {
				next_in_line.WriteMsg( "<span class='danger'>No response recieved. You have been removed from the line.</span>" );
				this.queued_players.Remove( next_in_line );
				this.queue_delay = 0;
			} else if ( _a==5 ) {
				
				if ( GlobalFuncs.living_player_count() < ( GlobalVars.config.hard_popcap ??0) ) {
					
					if ( next_in_line != null && next_in_line.client != null ) {
						next_in_line.WriteMsg( new Txt( "<span class='userdanger'>A slot has opened! You have approximately 20 seconds to join. <a href='?src=" ).Ref( next_in_line ).str( ";late_join=override'>&gt;&gt;Join Game&lt;&lt;</a></span>" ).ToString() );
						next_in_line.WriteMsg( new Sound( "sound/misc/notice1.ogg" ) );
						next_in_line.LateChoices();
						return;
					}
					this.queued_players.Remove( next_in_line );
				}
				this.queue_delay = 0;
			}
			return;
		}

		// Function from file: ticker.dm
		public void send_random_tip(  ) {
			ByTable randomtips = null;

			randomtips = GlobalFuncs.file2list( "config/tips.txt" );

			if ( randomtips.len != 0 ) {
				Game13.WriteMsg( "<font color='purple'><b>Tip of the round: </b>" + String13.HtmlEncode( Rand13.PickFromTable( randomtips ) ) + "</font>" );
			}
			return;
		}

		// Function from file: ticker.dm
		public bool declare_completion(  ) {
			bool station_evacuated = false;
			int num_survivors = 0;
			int num_escapees = 0;
			dynamic Player = null;
			StationState end_state = null;
			int station_integrity = 0;
			Mob_Living_Silicon_Ai aiPlayer = null;
			string robolist = null;
			Mob_Living_Silicon_Robot robo = null;
			Mob_Living_Silicon_Robot robo2 = null;
			dynamic handler = null;
			ByTable total_antagonists = null;
			Mind Mind = null;
			string temprole = null;
			dynamic i = null;
			string dellog = null;
			dynamic path = null;

			
			if ( GlobalVars.SSshuttle.emergency.mode >= 5 ) {
				station_evacuated = true;
			}
			num_survivors = 0;
			num_escapees = 0;
			Game13.WriteMsg( "<BR><BR><BR><FONT size=3><B>The round has ended.</B></FONT>" );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				Player = _a;
				

				if ( Lang13.Bool( Player.mind ) && !( Player is Mob_NewPlayer ) ) {
					
					if ( Convert.ToInt32( Player.stat ) != 2 && !( Player is Mob_Living_Carbon_Brain ) ) {
						num_survivors++;

						if ( station_evacuated ) {
							
							if ( !((Ent_Static)Player).onCentcom() && !((Ent_Static)Player).onSyndieBase() ) {
								Player.WriteMsg( "<font color='blue'><b>You managed to survive, but were marooned on " + GlobalFuncs.station_name() + "...</b></FONT>" );
							} else {
								num_escapees++;
								Player.WriteMsg( "<font color='green'><b>You managed to survive the events on " + GlobalFuncs.station_name() + " as " + Player.real_name + ".</b></FONT>" );
							}
						} else {
							Player.WriteMsg( "<font color='green'><b>You managed to survive the events on " + GlobalFuncs.station_name() + " as " + Player.real_name + ".</b></FONT>" );
						}
					} else {
						Player.WriteMsg( "<font color='red'><b>You did not survive the events on " + GlobalFuncs.station_name() + "...</b></FONT>" );
					}
				}
			}
			end_state = new StationState();
			end_state.count();
			station_integrity = Num13.MinInt( ((int)( Num13.Round( GlobalVars.start_state.score( end_state ) * 100, 0.1 ) )), 100 );
			Game13.WriteMsg( "<BR>" + GlobalVars.TAB + "Shift Duration: <B>" + Num13.Floor( Game13.time / 36000 ) + ":" + GlobalFuncs.add_zero( "" + Game13.time / 600 % 60, 2 ) + ":" + Game13.time / 100 % 6 + Game13.time / 100 % 10 + "</B>" );
			Game13.WriteMsg( "<BR>" + GlobalVars.TAB + "Station Integrity: <B>" + ( this.mode.station_was_nuked ? "<font color='red'>Destroyed</font>" : "" + station_integrity + "%" ) + "</B>" );

			if ( GlobalVars.joined_player_list.len != 0 ) {
				Game13.WriteMsg( "<BR>" + GlobalVars.TAB + "Total Population: <B>" + GlobalVars.joined_player_list.len + "</B>" );

				if ( station_evacuated ) {
					Game13.WriteMsg( "<BR>" + GlobalVars.TAB + "Evacuation Rate: <B>" + num_escapees + " (" + Num13.Round( num_escapees / GlobalVars.joined_player_list.len * 100, 0.1 ) + "%)</B>" );
				}
				Game13.WriteMsg( "<BR>" + GlobalVars.TAB + "Survival Rate: <B>" + num_survivors + " (" + Num13.Round( num_survivors / GlobalVars.joined_player_list.len * 100, 0.1 ) + "%)</B>" );
			}
			Game13.WriteMsg( "<BR>" );

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon_Ai) )) {
				aiPlayer = _c;
				

				if ( aiPlayer.stat != 2 && aiPlayer.mind != null ) {
					Game13.WriteMsg( "<b>" + aiPlayer.name + " (Played by: " + aiPlayer.mind.key + ")'s laws at the end of the round were:</b>" );
					aiPlayer.show_laws( true );
				} else if ( aiPlayer.mind != null ) {
					Game13.WriteMsg( "<b>" + aiPlayer.name + " (Played by: " + aiPlayer.mind.key + ")'s laws when it was deactivated were:</b>" );
					aiPlayer.show_laws( true );
				}
				Game13.WriteMsg( "<b>Total law changes: " + aiPlayer.law_change_counter + "</b>" );

				if ( aiPlayer.connected_robots.len != 0 ) {
					robolist = "<b>" + aiPlayer.real_name + "'s minions were:</b> ";

					foreach (dynamic _b in Lang13.Enumerate( aiPlayer.connected_robots, typeof(Mob_Living_Silicon_Robot) )) {
						robo = _b;
						

						if ( robo.mind != null ) {
							robolist += "" + robo.name + ( robo.stat != 0 ? " (Deactivated) (Played by: " + robo.mind.key + "), " : " (Played by: " + robo.mind.key + "), " );
						}
					}
					Game13.WriteMsg( "" + robolist );
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon_Robot) )) {
				robo2 = _d;
				

				if ( !Lang13.Bool( robo2.connected_ai ) && robo2.mind != null ) {
					
					if ( robo2.stat != 2 ) {
						Game13.WriteMsg( "<b>" + robo2.name + " (Played by: " + robo2.mind.key + ") survived as an AI-less borg! Its laws were:</b>" );
					} else {
						Game13.WriteMsg( "<b>" + robo2.name + " (Played by: " + robo2.mind.key + ") was unable to survive the rigors of being a cyborg without an AI. Its laws were:</b>" );
					}

					if ( robo2 != null ) {
						robo2.laws.show_laws( typeof(Game13) );
					}
				}
			}
			this.mode.declare_completion();

			foreach (dynamic _e in Lang13.Enumerate( Lang13.GetTypes( "/datum/game_mode/proc" ) )) {
				handler = _e;
				

				if ( String13.FindIgnoreCase( "" + handler, "auto_declare_completion_", 1, 0 ) != 0 ) {
					Lang13.Call( Lang13.BindFunc( this.mode, handler ), this.force_ending );
				}
			}
			total_antagonists = new ByTable();

			foreach (dynamic _f in Lang13.Enumerate( this.minds, typeof(Mind) )) {
				Mind = _f;
				
				temprole = Mind.special_role;

				if ( Lang13.Bool( temprole ) ) {
					
					if ( total_antagonists.Contains( temprole ) ) {
						total_antagonists[temprole] += ", " + Mind.name + "(" + Mind.key + ")";
					} else {
						total_antagonists.Add( temprole );
						total_antagonists[temprole] += ": " + Mind.name + "(" + Mind.key + ")";
					}
				}
			}
			GlobalFuncs.log_game( "Antagonists at round end were..." );

			foreach (dynamic _g in Lang13.Enumerate( total_antagonists )) {
				i = _g;
				
				GlobalFuncs.log_game( "" + i + "s" + total_antagonists[i] + "." );
			}

			if ( GlobalVars.SSgarbage.didntgc.len != 0 ) {
				dellog = "";

				foreach (dynamic _h in Lang13.Enumerate( GlobalVars.SSgarbage.didntgc )) {
					path = _h;
					
					dellog += "Path : " + path + " \n";
					dellog += "Failures : " + GlobalVars.SSgarbage.didntgc[path] + " \n";
				}
				Game13.log.WriteMsg( dellog );
			}
			return true;
		}

		// Function from file: ticker.dm
		public void equip_characters(  ) {
			bool captainless = false;
			Mob_Living_Carbon_Human player = null;
			Mob_NewPlayer M = null;

			captainless = true;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				player = _a;
				

				if ( player != null && player.mind != null && Lang13.Bool( player.mind.assigned_role ) ) {
					
					if ( player.mind.assigned_role == "Captain" ) {
						captainless = false;
					}

					if ( player.mind.assigned_role != player.mind.special_role ) {
						GlobalVars.SSjob.EquipRank( player, player.mind.assigned_role, false );
					}
				}
			}

			if ( captainless ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
					M = _b;
					
				}
			}
			return;
		}

		// Function from file: ticker.dm
		public void collect_minds(  ) {
			Mob_Living player = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
				player = _a;
				

				if ( player.mind != null ) {
					GlobalVars.ticker.minds.Add( player.mind );
				}
			}
			return;
		}

		// Function from file: ticker.dm
		public void create_characters(  ) {
			Mob_NewPlayer player = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				player = _a;
				

				if ( Lang13.Bool( player.ready ) && player.mind != null ) {
					GlobalVars.joined_player_list.Add( player.ckey );

					if ( player.mind.assigned_role == "AI" ) {
						player.close_spawn_windows();
						player.AIize();
					} else {
						player.create_character();
						GlobalFuncs.qdel( player );
					}
				} else {
					player.new_player_panel();
				}
			}
			return;
		}

		// Function from file: ticker.dm
		public void station_explosion_cinematic( dynamic station_missed = null, dynamic _override = null ) {
			station_missed = station_missed ?? 0;

			HtmlInterface hi = null;
			Obj_Structure_Bed temp_buckle = null;
			dynamic M = null;
			dynamic M2 = null;
			dynamic T = null;

			
			if ( this.cinematic != null ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.html_interfaces, typeof(HtmlInterface) )) {
				hi = _a;
				
				hi.closeAll();
			}
			this.cinematic = new Obj_Screen( this ) {
				icon = "icons/effects/station_explosion.dmi",
				icon_state = "station_intact",
				layer = 20,
				mouse_opacity = 0,
				screen_loc = "1,0"
				
			};
			temp_buckle = new Obj_Structure_Bed( this );

			if ( Lang13.Bool( station_missed ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list )) {
					M = _b;
					
					M.buckled = temp_buckle;

					if ( Lang13.Bool( M.client ) ) {
						M.client.screen += this.cinematic;
					}
				}
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.mob_list )) {
					M2 = _c;
					
					M2.buckled = temp_buckle;

					if ( Lang13.Bool( M2.client ) ) {
						M2.client.screen += this.cinematic;
					}

					if ( Convert.ToInt32( M2.stat ) != 2 ) {
						T = GlobalFuncs.get_turf( M2 );

						if ( Lang13.Bool( T ) && Lang13.Bool( T.z ) == true ) {
							((Mob)M2).death( false );
						}
					}
				}
			}

			dynamic _f = station_missed; // Was a switch-case, sorry for the mess.
			if ( _f==1 ) {
				
				if ( Lang13.Bool( this.mode ) && !Lang13.Bool( _override ) ) {
					_override = this.mode.name;
				}

				dynamic _d = _override; // Was a switch-case, sorry for the mess.
				if ( _d=="nuclear emergency" ) {
					Icon13.Flick( "intro_nuke", this.cinematic );
					Task13.Sleep( 35 );
					Game13.WriteMsg( new Sound( "sound/effects/explosionfar.ogg" ) );
					Icon13.Flick( "station_intact_fade_red", this.cinematic );
					this.cinematic.icon_state = "summary_nukefail";
				} else if ( _d=="gang war" ) {
					this.cinematic.icon_state = "intro_malf_still";
					Icon13.Flick( "intro_malf", this.cinematic );
					Task13.Sleep( 70 );
				} else if ( _d=="fake" ) {
					Icon13.Flick( "intro_nuke", this.cinematic );
					Task13.Sleep( 35 );
					Game13.WriteMsg( new Sound( "sound/items/bikehorn.ogg" ) );
					Icon13.Flick( "summary_selfdes", this.cinematic );
				} else {
					Icon13.Flick( "intro_nuke", this.cinematic );
					Task13.Sleep( 35 );
					Game13.WriteMsg( new Sound( "sound/effects/explosionfar.ogg" ) );
				}
			} else if ( _f==2 ) {
				Task13.Sleep( 50 );
				Game13.WriteMsg( new Sound( "sound/effects/explosionfar.ogg" ) );
			} else {
				
				if ( Lang13.Bool( this.mode ) && !Lang13.Bool( _override ) ) {
					_override = this.mode.name;
				}

				dynamic _e = _override; // Was a switch-case, sorry for the mess.
				if ( _e=="nuclear emergency" ) {
					Icon13.Flick( "intro_nuke", this.cinematic );
					Task13.Sleep( 35 );
					Icon13.Flick( "station_explode_fade_red", this.cinematic );
					Game13.WriteMsg( new Sound( "sound/effects/explosionfar.ogg" ) );
					this.cinematic.icon_state = "summary_nukewin";
				} else if ( _e=="AI malfunction" ) {
					Icon13.Flick( "intro_malf", this.cinematic );
					Task13.Sleep( 76 );
					Icon13.Flick( "station_explode_fade_red", this.cinematic );
					Game13.WriteMsg( new Sound( "sound/effects/explosionfar.ogg" ) );
					this.cinematic.icon_state = "summary_malf";
				} else if ( _e=="blob" ) {
					Icon13.Flick( "intro_nuke", this.cinematic );
					Task13.Sleep( 35 );
					Icon13.Flick( "station_explode_fade_red", this.cinematic );
					Game13.WriteMsg( new Sound( "sound/effects/explosionfar.ogg" ) );
					this.cinematic.icon_state = "summary_selfdes";
				} else if ( _e=="no_core" ) {
					Icon13.Flick( "intro_nuke", this.cinematic );
					Task13.Sleep( 35 );
					Icon13.Flick( "station_intact", this.cinematic );
					Game13.WriteMsg( new Sound( "sound/ambience/signal.ogg" ) );
					Task13.Sleep( 100 );

					if ( this.cinematic != null ) {
						GlobalFuncs.qdel( this.cinematic );
						this.cinematic = null;
					}

					if ( temp_buckle != null ) {
						GlobalFuncs.qdel( temp_buckle );
					}
					return;
				} else {
					Icon13.Flick( "intro_nuke", this.cinematic );
					Task13.Sleep( 35 );
					Icon13.Flick( "station_explode_fade_red", this.cinematic );
					Game13.WriteMsg( new Sound( "sound/effects/explosionfar.ogg" ) );
					this.cinematic.icon_state = "summary_selfdes";
				}
			}
			Task13.Schedule( 300, (Task13.Closure)(() => {
				
				if ( this.cinematic != null ) {
					GlobalFuncs.qdel( this.cinematic );
				}

				if ( temp_buckle != null ) {
					GlobalFuncs.qdel( temp_buckle );
				}
				return;
			}));
			return;
		}

		// Function from file: ticker.dm
		public bool setup(  ) {
			ByTable runnable_modes = null;
			dynamic smode = null;
			bool can_continue = false;
			dynamic modes = null;
			GameMode M = null;
			dynamic holidayname = null;
			Holiday holiday = null;
			Obj_Effect_Landmark_Start S = null;

			
			if ( GlobalVars.master_mode == "random" || GlobalVars.master_mode == "secret" ) {
				runnable_modes = GlobalVars.config.get_runnable_modes();

				if ( GlobalVars.master_mode == "secret" ) {
					this.hide_mode = true;

					if ( GlobalVars.secret_force_mode != "secret" ) {
						smode = GlobalVars.config.pick_mode( GlobalVars.secret_force_mode );

						if ( !((GameMode)smode).can_start() ) {
							GlobalFuncs.message_admins( new Txt().blue().str( "Unable to force secret " ).item( GlobalVars.secret_force_mode ).str( ". " ).item( smode.required_players ).str( " players and " ).item( smode.required_enemies ).str( " eligible antagonists needed." ).ToString() );
						} else {
							this.mode = smode;
						}
					}
				}

				if ( !Lang13.Bool( this.mode ) ) {
					
					if ( !( runnable_modes.len != 0 ) ) {
						Game13.WriteMsg( "<B>Unable to choose playable game mode.</B> Reverting to pre-game lobby." );
						return false;
					}
					this.mode = GlobalFuncs.pickweight( runnable_modes );
				}
			} else {
				this.mode = GlobalVars.config.pick_mode( GlobalVars.master_mode );

				if ( !((GameMode)this.mode).can_start() ) {
					Game13.WriteMsg( "<B>Unable to start " + this.mode.name + ".</B> Not enough players, " + this.mode.required_players + " players and " + this.mode.required_enemies + " eligible antagonists needed. Reverting to pre-game lobby." );
					GlobalFuncs.qdel( this.mode );
					this.mode = null;
					GlobalVars.SSjob.ResetOccupations();
					return false;
				}
			}
			can_continue = false;
			can_continue = ((GameMode)this.mode).pre_setup();
			GlobalVars.SSjob.DivideOccupations();

			if ( !GlobalVars.Debug2 ) {
				
				if ( !can_continue ) {
					GlobalFuncs.qdel( this.mode );
					this.mode = null;
					Game13.WriteMsg( "<B>Error setting up " + GlobalVars.master_mode + ".</B> Reverting to pre-game lobby." );
					GlobalVars.SSjob.ResetOccupations();
					return false;
				}
			} else {
				Game13.WriteMsg( "<span class='notice'>DEBUG: Bypassing prestart checks..." );
			}

			if ( this.hide_mode ) {
				modes = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( runnable_modes, typeof(GameMode) )) {
					M = _a;
					
					modes += M.name;
				}
				modes = GlobalFuncs.sortList( modes );
				Game13.WriteMsg( "<B>The current game mode is - Secret!</B>" );
				Game13.WriteMsg( "<B>Possibilities:</B> " + GlobalFuncs.english_list( modes ) );
			} else {
				((GameMode)this.mode).announce();
			}
			this.current_state = 3;

			if ( !GlobalVars.config.ooc_during_round ) {
				GlobalFuncs.toggle_ooc( false );
			}
			GlobalVars.round_start_time = Game13.time;
			GlobalVars.start_landmarks_list = GlobalFuncs.shuffle( GlobalVars.start_landmarks_list );
			this.create_characters();
			this.collect_minds();
			this.equip_characters();
			GlobalVars.data_core.manifest();
			GlobalVars.Master.RoundStart();
			Game13.WriteMsg( "<FONT color='blue'><B>Welcome to " + GlobalFuncs.station_name() + ", enjoy your stay!</B></FONT>" );
			Game13.WriteMsg( new Sound( "sound/AI/welcome.ogg" ) );

			if ( Lang13.Bool( GlobalVars.SSevent.holidays ) ) {
				Game13.WriteMsg( "<font color='blue'>and...</font>" );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSevent.holidays )) {
					holidayname = _b;
					
					holiday = GlobalVars.SSevent.holidays[holidayname];
					Game13.WriteMsg( "<h4>" + holiday.greet() + "</h4>" );
				}
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				((GameMode)this.mode).post_setup();

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark_Start) )) {
					S = _c;
					

					if ( S.name != "AI" ) {
						GlobalFuncs.qdel( S );
					}
				}

				if ( !( GlobalVars.admins.len != 0 ) ) {
					GlobalFuncs.send2irc( "Server", "Round just started with no admins online!" );
				}
				return;
			}));
			return true;
		}

		// Function from file: ticker.dm
		public override void fire(  ) {
			Mob_NewPlayer player = null;

			
			switch ((int)( this.current_state )) {
				case 0:
					this.timeLeft = ( GlobalVars.config.lobby_countdown ??0) * 10;
					Game13.WriteMsg( "<b><font color='blue'>Welcome to the pre-game lobby!</font></b>" );
					Game13.WriteMsg( "Please, setup your character and select ready. Game will start in " + GlobalVars.config.lobby_countdown + " seconds" );
					this.current_state = 1;
					break;
				case 1:
					this.totalPlayers = 0;
					this.totalPlayersReady = 0;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
						player = _a;
						
						this.totalPlayers++;

						if ( Lang13.Bool( player.ready ) ) {
							this.totalPlayersReady++;
						}
					}

					if ( Convert.ToDouble( this.timeLeft ) < 0 ) {
						return;
					}
					this.timeLeft -= this.wait;

					if ( Convert.ToDouble( this.timeLeft ) <= 300 && !this.tipped ) {
						this.send_random_tip();
						this.tipped = true;
					}

					if ( Convert.ToDouble( this.timeLeft ) <= 0 ) {
						this.current_state = 2;
					}
					break;
				case 2:
					
					if ( !this.setup() ) {
						this.current_state = 0;
					}
					break;
				case 3:
					((Game_Data)this.mode).process( this.wait * 0.1 );
					this.check_queue();
					this.check_maprotate();

					if ( !this.mode.explosion_in_progress && ((GameMode)this.mode).check_finished() || Lang13.Bool( this.force_ending ) ) {
						this.current_state = 4;
						GlobalFuncs.toggle_ooc( true );
						this.declare_completion(  );
						Task13.Schedule( 50, (Task13.Closure)(() => {
							
							if ( this.mode.station_was_nuked ) {
								Game13.Reboot( "Station destroyed by Nuclear Device.", "end_proper", "nuke" );
							} else {
								Game13.Reboot( "Round ended.", "end_proper", "proper completion" );
							}
							return;
						}));
					}
					break;
			}
			return;
		}

		// Function from file: ticker.dm
		public override double Initialize( int start_timeofday = 0, double? zlevel = null ) {
			
			if ( Lang13.Bool( zlevel ) ) {
				return base.Initialize( start_timeofday, zlevel );
			}

			if ( !Lang13.Bool( GlobalVars.syndicate_code_phrase ) ) {
				GlobalVars.syndicate_code_phrase = GlobalFuncs.generate_code_phrase();
			}

			if ( !Lang13.Bool( GlobalVars.syndicate_code_response ) ) {
				GlobalVars.syndicate_code_response = GlobalFuncs.generate_code_phrase();
			}
			this.setupFactions();
			base.Initialize( start_timeofday, zlevel );
			return 0;
		}

	}

}