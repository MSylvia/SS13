// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Autolathe : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Autolathe);
			this.wire_count = 10;
		}

		public Wires_Autolathe ( Obj holder = null ) : base( holder ) {
			
		}

		// Function from file: autolathe.dm
		public override void UpdatePulsed( double? index = null ) {
			Ent_Static A = null;

			
			if ( this.IsIndexCut( index ) != 0 ) {
				return;
			}
			A = this.holder;

			switch ((double?)( index )) {
				case 1:
					((dynamic)A).adjust_hacked( !Lang13.Bool( ((dynamic)A).hacked ) );
					Task13.Schedule( 50, (Task13.Closure)(() => {
						
						if ( A != null && !( this.IsIndexCut( index ) != 0 ) ) {
							((dynamic)A).adjust_hacked( 0 );
							this.Interact( Task13.User );
						}
						return;
					}));
					break;
				case 2:
					((dynamic)A).shocked = !Lang13.Bool( ((dynamic)A).shocked );
					Task13.Schedule( 50, (Task13.Closure)(() => {
						
						if ( A != null && !( this.IsIndexCut( index ) != 0 ) ) {
							((dynamic)A).shocked = 0;
							this.Interact( Task13.User );
						}
						return;
					}));
					break;
				case 4:
					((dynamic)A).disabled = !Lang13.Bool( ((dynamic)A).disabled );
					Task13.Schedule( 50, (Task13.Closure)(() => {
						
						if ( A != null && !( this.IsIndexCut( index ) != 0 ) ) {
							((dynamic)A).disabled = 0;
							this.Interact( Task13.User );
						}
						return;
					}));
					break;
			}
			return;
		}

		// Function from file: autolathe.dm
		public override void UpdateCut( double? index = null, bool mended = false ) {
			Ent_Static A = null;

			A = this.holder;

			switch ((double?)( index )) {
				case 1:
					
					if ( !Lang13.Bool( ((dynamic)A).hacked ) ) {
						((dynamic)A).adjust_hacked( 1 );
					}
					break;
				case 2:
					((dynamic)A).shocked = !mended;
					break;
				case 4:
					((dynamic)A).disabled = !mended;
					break;
			}
			return;
		}

		// Function from file: autolathe.dm
		public override void Interact( dynamic user = null ) {
			Obj V = null;

			
			if ( this.CanUse( user ) ) {
				V = this.holder;
				V.attack_hand( user );
			}
			return;
		}

		// Function from file: autolathe.dm
		public override bool CanUse( dynamic L = null ) {
			Obj A = null;

			A = this.holder;

			if ( Lang13.Bool( ((dynamic)A).panel_open ) ) {
				return true;
			}
			return false;
		}

		// Function from file: autolathe.dm
		public override string GetInteractWindow(  ) {
			string _default = null;

			Obj A = null;

			A = this.holder;
			_default += base.GetInteractWindow();
			_default += "<BR>The red light is " + ( Lang13.Bool( ((dynamic)A).disabled ) ? "off" : "on" ) + ".<BR>The green light is " + ( Lang13.Bool( ((dynamic)A).shocked ) ? "off" : "on" ) + ".<BR>The blue light is " + ( Lang13.Bool( ((dynamic)A).hacked ) ? "off" : "on" ) + ".<BR>";
			return _default;
		}

	}

}