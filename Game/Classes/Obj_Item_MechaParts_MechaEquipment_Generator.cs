// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Generator : Obj_Item_MechaParts_MechaEquipment {

		public int coeff = 100;
		public Obj_Item_Stack_Sheet_Mineral fuel = null;
		public int max_fuel = 150000;
		public int fuel_per_cycle_idle = 25;
		public int fuel_per_cycle_active = 200;
		public int power_per_cycle = 20;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "plasmatech=2;powerstorage=2;engineering=1";
			this.icon_state = "tesla";
		}

		// Function from file: other_tools.dm
		public Obj_Item_MechaParts_MechaEquipment_Generator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.generator_init();
			return;
		}

		// Function from file: other_tools.dm
		public override int? process( dynamic seconds = null ) {
			double? cur_charge = null;
			int use_fuel = 0;

			
			if ( !( this.chassis != null ) ) {
				GlobalVars.SSobj.processing.Remove( this );
				this.set_ready_state( true );
				return null;
			}

			if ( ( this.fuel.amount ??0) <= 0 ) {
				GlobalVars.SSobj.processing.Remove( this );
				this.log_message( "Deactivated - no fuel." );
				this.set_ready_state( true );
				return null;
			}

			if ( GlobalFuncs.anyprob( this.reliability ) ) {
				this.set_ready_state( true );
				this.critfail();
				GlobalVars.SSobj.processing.Remove( this );
				return null;
			}
			cur_charge = this.chassis.get_charge();

			if ( cur_charge == null ) {
				this.set_ready_state( true );
				this.occupant_message( "No powercell detected." );
				this.log_message( "Deactivated." );
				GlobalVars.SSobj.processing.Remove( this );
				return null;
			}
			use_fuel = this.fuel_per_cycle_idle;

			if ( ( cur_charge ??0) < ( this.chassis.cell.maxcharge ??0) ) {
				use_fuel = this.fuel_per_cycle_active;
				this.chassis.give_power( this.power_per_cycle );
			}
			this.fuel.amount -= Num13.MinInt( ((int)( use_fuel / this.fuel.perunit )), ((int)( this.fuel.amount ??0 )) );
			this.update_equip_info();
			return 1;
		}

		// Function from file: other_tools.dm
		public override void critfail(  ) {
			dynamic T = null;
			GasMixture GM = null;

			base.critfail();
			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return;
			}
			GM = new GasMixture();

			if ( Rand13.PercentChance( 10 ) ) {
				GM.toxins += 100;
				GM.temperature = 1773.1500244140625;
				((Ent_Static)T).visible_message( "The " + this + " suddenly disgorges a cloud of heated plasma." );
				GlobalFuncs.qdel( this );
			} else {
				GM.toxins += 5;
				GM.temperature = ( T is Tile_Simulated ? T.air.return_temperature() : ((dynamic)( 293.41 )) );
				((Ent_Static)T).visible_message( "The " + this + " suddenly disgorges a cloud of plasma." );
			}
			((Ent_Static)T).assume_air( GM );
			return;
		}

		// Function from file: other_tools.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			this.load_fuel( A );
			return null;
		}

		// Function from file: other_tools.dm
		[VerbInfo( name: "action" )]
		public override bool f_action( dynamic target = null ) {
			double? result = null;

			
			if ( this.chassis != null ) {
				result = this.load_fuel( target );

				if ( Lang13.Bool( result ) ) {
					GlobalFuncs.send_byjax( this.chassis.occupant, "exosuit.browser", new Txt().Ref( this ).ToString(), this.get_equip_info() );
				}
			}
			return false;
		}

		// Function from file: other_tools.dm
		public override string get_equip_info(  ) {
			string output = null;

			output = base.get_equip_info();

			if ( Lang13.Bool( output ) ) {
				return new Txt().item( output ).str( " [" ).item( this.fuel ).str( ": " ).item( Num13.Round( ( this.fuel.amount ??0) * this.fuel.perunit, 0.1 ) ).str( " cm<sup>3</sup>] - <a href='?src=" ).Ref( this ).str( ";toggle=1'>" ).item( ( this.equip_ready ? "A" : "Dea" ) ).str( "ctivate</a>" ).ToString();
			}
			return null;
		}

		// Function from file: other_tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			base.Topic( href, href_list, (object)(hsrc) );

			if ( Lang13.Bool( href_list["toggle"] ) ) {
				
				if ( this.equip_ready ) {
					this.set_ready_state( false );
					GlobalVars.SSobj.processing.Or( this );
					this.log_message( "Activated." );
				} else {
					this.set_ready_state( true );
					GlobalVars.SSobj.processing.Remove( this );
					this.log_message( "Deactivated." );
				}
			}
			return null;
		}

		// Function from file: other_tools.dm
		public override void detach( dynamic moveto = null ) {
			GlobalVars.SSobj.processing.Remove( this );
			base.detach( (object)(moveto) );
			return;
		}

		// Function from file: other_tools.dm
		public double? load_fuel( dynamic P = null ) {
			int to_load = 0;
			double? units = null;

			
			if ( P.type == this.fuel.type && Convert.ToDouble( P.amount ) > 0 ) {
				to_load = Num13.MaxInt( ((int)( this.max_fuel - ( this.fuel.amount ??0) * this.fuel.perunit )), 0 );

				if ( to_load != 0 ) {
					units = Num13.MinInt( Num13.MaxInt( Num13.Floor( to_load / P.perunit ), 1 ), Convert.ToInt32( P.amount ) );
					this.fuel.amount += units ??0;
					((Obj_Item_Stack)P).use( units );
					this.occupant_message( new Txt().item( units ).str( " unit" ).s().str( " of " ).item( this.fuel ).str( " successfully loaded." ).ToString() );
					return units;
				} else {
					this.occupant_message( "Unit is full." );
					return 0;
				}
			} else {
				this.occupant_message( "<span class='warning'>" + this.fuel + " traces in target minimal! " + P + " cannot be used as fuel.</span>" );
				return null;
			}
			return null;
		}

		// Function from file: other_tools.dm
		public virtual void generator_init(  ) {
			this.fuel = new Obj_Item_Stack_Sheet_Mineral_Plasma( this );
			this.fuel.amount = 0;
			return;
		}

		// Function from file: other_tools.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSobj.processing.Remove( this );
			return base.Destroy();
		}

	}

}