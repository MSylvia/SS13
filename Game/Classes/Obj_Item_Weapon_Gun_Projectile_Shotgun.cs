// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Projectile_Shotgun : Obj_Item_Weapon_Gun_Projectile {

		public bool recentpump = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "shotgun";
			this.w_class = 4;
			this.force = 10;
			this.slot_flags = 1024;
			this.origin_tech = "combat=4;materials=2";
			this.mag_type = typeof(Obj_Item_AmmoBox_Magazine_Internal_Shot);
			this.icon_state = "shotgun";
		}

		public Obj_Item_Weapon_Gun_Projectile_Shotgun ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: shotgun.dm
		public override bool blow_up( dynamic user = null ) {
			bool _default = false;

			_default = false;

			if ( Lang13.Bool( this.chambered ) && Lang13.Bool( this.chambered.BB ) ) {
				this.process_fire( user, user, false );
				_default = true;
			}
			return _default;
		}

		// Function from file: shotgun.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( Lang13.Bool( this.chambered ) ) {
				user.WriteMsg( "A " + ( Lang13.Bool( this.chambered.BB ) ? "live" : "spent" ) + " one is in the chamber." );
			}
			return 0;
		}

		// Function from file: shotgun.dm
		public bool pump_reload( dynamic M = null ) {
			dynamic AC = null;

			
			if ( !( ((Obj_Item_AmmoBox_Magazine)this.magazine).ammo_count() != 0 ) ) {
				return false;
			}
			AC = ((Obj_Item_AmmoBox)this.magazine).get_round();
			this.chambered = AC;
			return false;
		}

		// Function from file: shotgun.dm
		public void pump_unload( dynamic M = null ) {
			
			if ( Lang13.Bool( this.chambered ) ) {
				this.chambered.loc = GlobalFuncs.get_turf( this );
				((Ent_Static)this.chambered).SpinAnimation( 5, 1 );
				this.chambered = null;
			}
			return;
		}

		// Function from file: shotgun.dm
		public virtual bool pump( dynamic M = null ) {
			GlobalFuncs.playsound( M, "sound/weapons/shotgunpump.ogg", 60, 1 );
			this.pump_unload( M );
			this.pump_reload( M );
			this.update_icon();
			return true;
		}

		// Function from file: shotgun.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.recentpump ) {
				return null;
			}
			this.pump( user );
			this.recentpump = true;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.recentpump = false;
				return;
			}));
			return null;
		}

		// Function from file: shotgun.dm
		public override dynamic can_shoot(  ) {
			
			if ( !Lang13.Bool( this.chambered ) ) {
				return 0;
			}
			return ( Lang13.Bool( this.chambered.BB ) ? true : false );
		}

		// Function from file: shotgun.dm
		public override void chamber_round( bool? spin = null ) {
			return;
		}

		// Function from file: shotgun.dm
		public override bool process_chamber( bool? eject_casing = null, bool? empty_chamber = null ) {
			return base.process_chamber( false, false );
		}

		// Function from file: shotgun.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic num_loaded = null;

			num_loaded = ((Ent_Static)this.magazine).attackby( A, user, _params, true );

			if ( Lang13.Bool( num_loaded ) ) {
				user.WriteMsg( new Txt( "<span class='notice'>You load " ).item( num_loaded ).str( " shell" ).s().str( " into " ).the( this ).item().str( "!</span>" ).ToString() );
				A.update_icon();
				this.update_icon();
			}
			return null;
		}

	}

}