// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class MaterialContainer : Game_Data {

		public double total_amount = 0;
		public dynamic max_amount = null;
		public dynamic sheet_type = null;
		public Obj owner = null;
		public ByTable materials = new ByTable();

		// Function from file: material_container.dm
		public MaterialContainer ( Obj O = null, ByTable mat_list = null, int? max_amt = null ) {
			max_amt = max_amt ?? 0;

			this.owner = O;
			this.max_amount = Num13.MaxInt( 0, max_amt ??0 );

			if ( Lang13.Bool( mat_list["$metal"] ) ) {
				this.materials["$metal"] = new Material_Metal();
			}

			if ( Lang13.Bool( mat_list["$glass"] ) ) {
				this.materials["$glass"] = new Material_Glass();
			}

			if ( Lang13.Bool( mat_list["$silver"] ) ) {
				this.materials["$silver"] = new Material_Silver();
			}

			if ( Lang13.Bool( mat_list["$gold"] ) ) {
				this.materials["$gold"] = new Material_Gold();
			}

			if ( Lang13.Bool( mat_list["$diamond"] ) ) {
				this.materials["$diamond"] = new Material_Diamond();
			}

			if ( Lang13.Bool( mat_list["$uranium"] ) ) {
				this.materials["$uranium"] = new Material_Uranium();
			}

			if ( Lang13.Bool( mat_list["$plasma"] ) ) {
				this.materials["$plasma"] = new Material_Plasma();
			}

			if ( Lang13.Bool( mat_list["$bananium"] ) ) {
				this.materials["$bananium"] = new Material_Bananium();
			}
			return;
		}

		// Function from file: material_container.dm
		public double get_item_material_amount( dynamic I = null ) {
			double material_amount = 0;
			dynamic MAT = null;

			
			if ( !( I is Obj_Item ) ) {
				return 0;
			}
			material_amount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.materials )) {
				MAT = _a;
				
				material_amount += Convert.ToDouble( I.materials[MAT] );
			}
			return material_amount;
		}

		// Function from file: material_container.dm
		public bool amount( string material_type = null ) {
			dynamic M = null;

			M = this.materials[material_type];
			return ( Lang13.Bool( M ) ? Lang13.Bool( M.amount ) : false );
		}

		// Function from file: material_container.dm
		public int sheet2amount( bool sheet_amt = false ) {
			
			if ( ( sheet_amt ?1:0) > 0 ) {
				return ( sheet_amt ?1:0) * 2000;
			}
			return 0;
		}

		// Function from file: material_container.dm
		public int amount2sheet( int amt = 0 ) {
			
			if ( amt >= 2000 ) {
				return Num13.Floor( amt / 2000 );
			}
			return 0;
		}

		// Function from file: material_container.dm
		public bool has_materials( ByTable mats = null, double? multiplier = null ) {
			multiplier = multiplier ?? 1;

			dynamic M = null;
			dynamic MAT = null;

			
			if ( !( mats != null ) || !( mats.len != 0 ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( mats )) {
				MAT = _a;
				
				M = this.materials[MAT];

				if ( Convert.ToDouble( M.amount ) < Convert.ToDouble( mats[MAT] * multiplier ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: material_container.dm
		public bool has_space( double? amt = null ) {
			amt = amt ?? 0;

			return this.total_amount + ( amt ??0) <= Convert.ToDouble( this.max_amount );
		}

		// Function from file: material_container.dm
		public double retrieve_all(  ) {
			double result = 0;
			dynamic M = null;
			dynamic MAT = null;

			result = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.materials )) {
				MAT = _a;
				
				M = this.materials[MAT];
				result += this.retrieve_sheets( this.amount2sheet( Convert.ToInt32( M.amount ) ), MAT );
			}
			return result;
		}

		// Function from file: material_container.dm
		public double retrieve_amount( int amt = 0, dynamic material_type = null ) {
			return this.retrieve_sheets( this.amount2sheet( amt ), material_type );
		}

		// Function from file: material_container.dm
		public double retrieve_sheets( double? sheet_amt = null, dynamic material_type = null ) {
			
			if ( Lang13.Bool( this.materials[material_type] ) ) {
				return this.retrieve( sheet_amt, this.materials[material_type] );
			}
			return 0;
		}

		// Function from file: material_container.dm
		public double retrieve( double? sheet_amt = null, Material M = null ) {
			double count = 0;

			
			if ( ( sheet_amt ??0) > 0 ) {
				
				if ( M.amount < ( sheet_amt ??0) * 2000 ) {
					sheet_amt = Num13.Floor( M.amount / 2000 );
				}
				count = 0;

				while (( sheet_amt ??0) > 50) {
					Lang13.Call( M.sheet_type, GlobalFuncs.get_turf( this.owner ), 50 );
					count += 50;
					this.use_amount_type( ( sheet_amt ??0) * 2000, M.material_type );
					sheet_amt -= 50;
				}

				if ( Num13.Floor( M.amount / 2000 ) != 0 ) {
					Lang13.Call( M.sheet_type, GlobalFuncs.get_turf( this.owner ), sheet_amt );
					count += sheet_amt ??0;
					this.use_amount_type( ( sheet_amt ??0) * 2000, M.material_type );
				}
				return count;
			}
			return 0;
		}

		// Function from file: material_container.dm
		public double use_amount_type( double amt = 0, string material_type = null ) {
			dynamic M = null;

			M = this.materials[material_type];

			if ( Lang13.Bool( M ) ) {
				
				if ( Convert.ToDouble( M.amount ) >= amt ) {
					M.amount -= amt;
					this.total_amount -= amt;
					return amt;
				}
			}
			return 0;
		}

		// Function from file: material_container.dm
		public double use_amount( ByTable mats = null, double? multiplier = null ) {
			multiplier = multiplier ?? 1;

			dynamic M = null;
			dynamic MAT = null;
			double total_amount_save = 0;
			dynamic MAT2 = null;

			
			if ( !( mats != null ) || !( mats.len != 0 ) ) {
				return 0;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.materials )) {
				MAT = _a;
				
				M = this.materials[MAT];

				if ( Convert.ToDouble( M.amount ) < Convert.ToDouble( mats[MAT] * multiplier ) ) {
					return 0;
				}
			}
			total_amount_save = this.total_amount;

			foreach (dynamic _b in Lang13.Enumerate( this.materials )) {
				MAT2 = _b;
				
				M = this.materials[MAT2];
				M.amount -= mats[MAT2] * multiplier;
				this.total_amount -= Convert.ToDouble( mats[MAT2] * multiplier );
			}
			return total_amount_save - this.total_amount;
		}

		// Function from file: material_container.dm
		public void insert_materials( dynamic I = null, double? multiplier = null ) {
			multiplier = multiplier ?? 1;

			dynamic M = null;
			dynamic MAT = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.materials )) {
				MAT = _a;
				
				M = this.materials[MAT];
				M.amount += I.materials[MAT] * multiplier;
				this.total_amount += Convert.ToDouble( I.materials[MAT] * multiplier );
			}
			return;
		}

		// Function from file: material_container.dm
		public double? insert_item( dynamic I = null, double? multiplier = null ) {
			multiplier = multiplier ?? 1;

			dynamic S = null;
			double? material_amount = null;

			
			if ( !Lang13.Bool( I ) ) {
				return 0;
			}

			if ( I is Obj_Item_Stack ) {
				S = I;
				return this.insert_stack( I, Lang13.DoubleNullable( S.amount ) );
			}
			material_amount = this.get_item_material_amount( I );

			if ( !Lang13.Bool( material_amount ) || !this.has_space( material_amount ) ) {
				return 0;
			}
			this.insert_materials( I, multiplier );
			return material_amount;
		}

		// Function from file: material_container.dm
		public double? insert_stack( dynamic S = null, double? amt = null ) {
			amt = amt ?? 0;

			double material_amt = 0;

			
			if ( ( amt ??0) <= 0 ) {
				return 0;
			}

			if ( ( amt ??0) > Convert.ToDouble( S.amount ) ) {
				amt = Lang13.DoubleNullable( S.amount );
			}
			material_amt = this.get_item_material_amount( S );

			if ( !( material_amt != 0 ) ) {
				return 0;
			}
			amt = Num13.MinInt( ((int)( amt ??0 )), Num13.Floor( Convert.ToDouble( ( this.max_amount - this.total_amount ) / material_amt ) ) );

			if ( !Lang13.Bool( amt ) ) {
				return 0;
			}
			this.insert_materials( S, amt );
			((Obj_Item_Stack)S).use( amt );
			return amt;
		}

		// Function from file: material_container.dm
		public double insert_amount( double? amt = null, dynamic material_type = null ) {
			double total_amount_saved = 0;
			dynamic M = null;
			Material M2 = null;

			
			if ( ( amt ??0) > 0 && this.has_space( amt ) ) {
				total_amount_saved = this.total_amount;

				if ( Lang13.Bool( material_type ) ) {
					M = this.materials[material_type];

					if ( Lang13.Bool( M ) ) {
						M.amount += amt;
						this.total_amount += amt ??0;
					}
				} else {
					
					foreach (dynamic _a in Lang13.Enumerate( this.materials, typeof(Material) )) {
						M2 = _a;
						
						M2.amount += amt ??0;
						this.total_amount += amt ??0;
					}
				}
				return this.total_amount - total_amount_saved;
			}
			return 0;
		}

		// Function from file: material_container.dm
		public override dynamic Destroy(  ) {
			this.owner = null;
			return base.Destroy();
		}

	}

}