// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Energy_KineticAccelerator : Obj_Item_Weapon_Gun_Energy {

		public bool overheat = false;
		public int overheat_time = 16;
		public bool recent_reload = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "kineticgun";
			this.ammo_type = new ByTable(new object [] { typeof(Obj_Item_AmmoCasing_Energy_Kinetic) });
			this.cell_type = "/obj/item/weapon/stock_parts/cell/emproof";
			this.unique_rename = true;
			this.origin_tech = "combat=2;powerstorage=1";
			this.icon_state = "kineticgun";
		}

		public Obj_Item_Weapon_Gun_Energy_KineticAccelerator ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: special.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			
			if ( !Lang13.Bool( this.suppressed ) ) {
				GlobalFuncs.playsound( this.loc, "sound/weapons/kenetic_reload.ogg", 60, 1 );
			}
			user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " cocks the " ).item( this.name ).str( " and pretends to blow " ).his_her_its_their().str( " brains out! It looks like " ).he_she_it_they().str( "'s trying to commit suicide!</b></span>" ).ToString() );
			this.shoot_live_shot();
			return 8;
		}

		// Function from file: special.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			Obj_Item_AmmoCasing_Energy shot = null;

			shot = this.ammo_type[this.select];

			if ( Convert.ToDouble( this.power_supply.charge ) < ( shot.e_cost ??0) ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_empty";
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			return null;
		}

		// Function from file: special.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.overheat || this.recent_reload ) {
				return null;
			}
			((Obj_Item_Weapon_StockParts_Cell)this.power_supply).give( 500 );

			if ( !Lang13.Bool( this.suppressed ) ) {
				GlobalFuncs.playsound( this.loc, "sound/weapons/kenetic_reload.ogg", 60, 1 );
			} else {
				user.WriteMsg( "<span class='warning'>You silently charge " + this + ".<span>" );
			}
			this.recent_reload = true;
			this.update_icon();
			return null;
		}

		// Function from file: special.dm
		public override double emp_act( int severity = 0 ) {
			return 0;
		}

		// Function from file: special.dm
		public override void shoot_live_shot( dynamic user = null, bool? pointblank = null, dynamic pbtarget = null, bool? message = null ) {
			this.overheat = true;
			Task13.Schedule( this.overheat_time, (Task13.Closure)(() => {
				this.overheat = false;
				this.recent_reload = false;
				return;
			}));
			base.shoot_live_shot( (object)(user), pointblank, (object)(pbtarget), message );
			return;
		}

	}

}