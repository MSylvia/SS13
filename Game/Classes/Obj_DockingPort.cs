// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_DockingPort : Obj {

		public string id = null;
		public int? width = 0;
		public int? height = 0;
		public int dwidth = 0;
		public bool dheight = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 101;
			this.unacidable = true;
			this.anchored = 1;
			this.icon = "icons/obj/device.dmi";
			this.icon_state = "pinonfar";
			this.dir = 1;
		}

		public Obj_DockingPort ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: shuttle.dm
		public dynamic getDockedId(  ) {
			dynamic P = null;

			P = this.get_docked();

			if ( Lang13.Bool( P ) ) {
				return P.id;
			}
			return null;
		}

		// Function from file: shuttle.dm
		public virtual dynamic get_docked(  ) {
			return Lang13.FindIn( typeof(Obj_DockingPort_Stationary), this.loc );
		}

		// Function from file: shuttle.dm
		public ByTable return_ordered_turfs( int? ___x = null, int? ___y = null, int? ___z = null, int? _dir = null, dynamic A = null ) {
			ByTable _default = null;

			int cos = 0;
			int sin = 0;
			int? xi = null;
			int? yi = null;
			int? dx = null;
			int? dy = null;
			Tile T = null;

			
			if ( !Lang13.Bool( _dir ) ) {
				_dir = this.dir;
			}

			if ( !Lang13.Bool( ___x ) ) {
				___x = this.x;
			}

			if ( !Lang13.Bool( ___y ) ) {
				___y = this.y;
			}

			if ( !Lang13.Bool( ___z ) ) {
				___z = this.z;
			}
			cos = 1;
			sin = 0;

			switch ((int?)( _dir )) {
				case 8:
					cos = 0;
					sin = 1;
					break;
				case 2:
					cos = -1;
					sin = 0;
					break;
				case 4:
					cos = 0;
					sin = -1;
					break;
			}
			_default = new ByTable();
			xi = null;
			yi = null;
			dx = null;
			dx = 0;

			while (( dx ??0) < ( this.width ??0)) {
				dy = null;
				dy = 0;

				while (( dy ??0) < ( this.height ??0)) {
					xi = ( ___x ??0) + ( ( dx ??0) - this.dwidth ) * cos - ( ( dy ??0) - ( this.dheight ?1:0) ) * sin;
					yi = ( ___y ??0) + ( ( dy ??0) - ( this.dheight ?1:0) ) * cos + ( ( dx ??0) - this.dwidth ) * sin;
					T = Map13.GetTile( xi ??0, yi ??0, ___z ??0 );

					if ( Lang13.Bool( A ) ) {
						
						if ( GlobalFuncs.get_area( T ) == A ) {
							_default.Add( T );
						} else {
							_default.Add( null );
						}
					} else {
						_default.Add( T );
					}
					dy++;
				}
				dx++;
			}
			return _default;
		}

		// Function from file: shuttle.dm
		public ByTable return_coords( int ___x = 0, int ___y = 0, int _dir = 0 ) {
			int cos = 0;
			int sin = 0;

			
			if ( !( _dir != 0 ) ) {
				_dir = this.dir;
			}

			if ( !( ___x != 0 ) ) {
				___x = this.x;
			}

			if ( !( ___y != 0 ) ) {
				___y = this.y;
			}
			cos = 1;
			sin = 0;

			switch ((int)( _dir )) {
				case 8:
					cos = 0;
					sin = 1;
					break;
				case 2:
					cos = -1;
					sin = 0;
					break;
				case 4:
					cos = 0;
					sin = -1;
					break;
			}
			return new ByTable(new object [] { 
				___x + -this.dwidth * cos - -( this.dheight ?1:0) * sin, 
				___y + -this.dwidth * sin + -( this.dheight ?1:0) * cos, 
				___x + ( -this.dwidth + ( this.width ??0) - 1 ) * cos - ( -( this.dheight ?1:0) + ( this.height ??0) - 1 ) * sin, 
				___y + ( -this.dwidth + ( this.width ??0) - 1 ) * sin + ( -( this.dheight ?1:0) + ( this.height ??0) - 1 ) * cos
			 });
		}

		// Function from file: shuttle.dm
		public override void shuttleRotate( double? rotation = null ) {
			return;
		}

		// Function from file: shuttle.dm
		public override double singularity_act( int? current_size = null, Obj_Singularity S = null ) {
			return 0;
		}

		// Function from file: shuttle.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			return;
		}

		// Function from file: shuttle.dm
		public override dynamic Destroy(  ) {
			return 1;
		}

	}

}