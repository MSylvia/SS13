// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_TransitTubePod : Obj_Structure {

		public bool moving = false;
		public GasMixture air_contents = new GasMixture();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/atmospherics/pipes/transit_tube_pod.dmi";
			this.icon_state = "pod";
		}

		// Function from file: transit_tube_pod.dm
		public Obj_Structure_TransitTubePod ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.air_contents.oxygen = 43.67319107055664;
			this.air_contents.nitrogen = 82.14720153808594;
			this.air_contents.temperature = 293.41;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.follow_tube();
				return;
			}));
			return;
		}

		// Function from file: tgstation.dme
		public override bool relaymove( Mob user = null, int? direction = null ) {
			Obj_Structure_TransitTube_Station station = null;
			Obj_Structure_TransitTube tube = null;

			
			if ( user is Mob && user.client != null ) {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_TransitTube), this.loc ) ) ) {
					user.loc = this.loc;
					user.client.Move( Map13.GetStep( this.loc, direction ??0 ), direction ??0 );
					user.reset_view( null );
				}

				if ( !this.moving ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_TransitTube_Station) )) {
						station = _a;
						

						if ( station.directions().Contains( this.dir ) ) {
							
							if ( !station.pod_moving ) {
								
								if ( direction == station.dir ) {
									
									if ( station.icon_state == "open" ) {
										user.loc = this.loc;
										user.client.Move( Map13.GetStep( this.loc, direction ??0 ), direction ??0 );
										user.reset_view( null );
									} else {
										station.open_animation();
									}
								} else if ( station.directions().Contains( direction ) ) {
									this.dir = direction ??0;
									station.launch_pod();
								}
							}
							return false;
						}
					}

					foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Obj_Structure_TransitTube) )) {
						tube = _b;
						

						if ( tube.directions().Contains( this.dir ) ) {
							
							if ( tube.has_exit( direction ) ) {
								this.dir = direction ??0;
								return false;
							}
						}
					}
				}
			}
			return false;
		}

		// Function from file: transit_tube_pod.dm
		public override dynamic remove_air( dynamic amount = null ) {
			return this.air_contents.remove( amount );
		}

		// Function from file: transit_tube_pod.dm
		public override bool? assume_air( dynamic giver = null ) {
			return this.air_contents.merge( giver );
		}

		// Function from file: transit_tube_pod.dm
		public override GasMixture return_air(  ) {
			GasMixture GM = null;

			GM = new GasMixture();
			GM.oxygen = this.air_contents.oxygen;
			GM.carbon_dioxide = this.air_contents.carbon_dioxide;
			GM.nitrogen = this.air_contents.nitrogen;
			GM.toxins = this.air_contents.toxins;
			GM.temperature = this.air_contents.temperature;
			return GM;
		}

		// Function from file: transit_tube_pod.dm
		public override int Process_Spacemove( dynamic movement_dir = null ) {
			
			if ( this.moving ) {
				return 1;
			} else {
				return base.Process_Spacemove( (object)(movement_dir) );
			}
		}

		// Function from file: transit_tube_pod.dm
		public void mix_air(  ) {
			GasMixture environment = null;
			double env_pressure = 0;
			double int_pressure = 0;
			double total_pressure = 0;
			int transfer_in = 0;
			int transfer_out = 0;
			dynamic from_env = null;
			GasMixture from_int = null;

			environment = this.loc.return_air();
			env_pressure = environment.return_pressure();
			int_pressure = this.air_contents.return_pressure();
			total_pressure = env_pressure + int_pressure;

			if ( total_pressure == 0 ) {
				return;
			}
			transfer_in = Num13.MaxInt( ((int)( 0.1 )), ((int)( ( env_pressure - int_pressure ) * 0.5 / total_pressure )) );
			transfer_out = Num13.MaxInt( ((int)( 0.1 )), ((int)( ( int_pressure - env_pressure ) * 0.3 / total_pressure )) );
			from_env = this.loc.remove_air( environment.total_moles() * transfer_in );
			from_int = this.air_contents.remove( this.air_contents.total_moles() * transfer_out );
			this.loc.assume_air( from_int );
			this.air_contents.merge( from_env );
			return;
		}

		// Function from file: transit_tube_pod.dm
		public void follow_tube( bool? reverse_launch = null ) {
			Obj_Structure_TransitTube current_tube = null;
			dynamic next_dir = null;
			Tile next_loc = null;
			int last_delay = 0;
			int exit_delay = 0;
			Obj_Structure_TransitTube tube = null;
			Obj_Structure_TransitTube tube2 = null;

			
			if ( this.moving ) {
				return;
			}
			this.moving = true;
			current_tube = null;
			last_delay = 0;

			if ( reverse_launch == true ) {
				this.dir = Num13.Rotate( this.dir, 180 );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_TransitTube) )) {
				tube = _a;
				

				if ( tube.has_exit( this.dir ) ) {
					current_tube = tube;
					break;
				}
			}

			while (current_tube != null) {
				next_dir = current_tube.get_exit( this.dir );

				if ( !Lang13.Bool( next_dir ) ) {
					break;
				}
				exit_delay = current_tube.f_exit_delay( this, this.dir ) ?1:0;
				last_delay += exit_delay;
				Task13.Sleep( exit_delay );
				next_loc = Map13.GetStep( this.loc, Convert.ToInt32( next_dir ) );
				current_tube = null;

				foreach (dynamic _b in Lang13.Enumerate( next_loc, typeof(Obj_Structure_TransitTube) )) {
					tube2 = _b;
					

					if ( tube2.has_entrance( next_dir ) ) {
						current_tube = tube2;
						break;
					}
				}

				if ( current_tube == null ) {
					this.dir = Convert.ToInt32( next_dir );
					this.Move( Map13.GetStep( this.loc, this.dir ), this.dir );
					break;
				}
				last_delay = current_tube.f_enter_delay( this, next_dir );
				Task13.Sleep( last_delay );
				this.dir = Convert.ToInt32( next_dir );
				this.loc = next_loc;
				this.density = current_tube.density;

				if ( current_tube != null && current_tube.should_stop_pod( this, next_dir ) ) {
					current_tube.pod_stopped( this, this.dir );
					break;
				}
			}
			this.density = true;
			this.moving = false;
			return;
		}

		// Function from file: transit_tube_pod.dm
		public void empty(  ) {
			Ent_Dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
				M = _a;
				
				M.loc = this.loc;
			}
			return;
		}

		// Function from file: transit_tube_pod.dm
		public override void container_resist(  ) {
			Mob user = null;

			user = Task13.User;

			if ( !this.moving ) {
				user.changeNext_move( 100 );
				((dynamic)user).last_special = Game13.time + 100;
				user.WriteMsg( "<span class='notice'>You start trying to escape from the pod...</span>" );

				if ( GlobalFuncs.do_after( user, 600, null, this ) ) {
					user.WriteMsg( "<span class='notice'>You manage to open the pod.</span>" );
					this.empty();
				}
			}
			return;
		}

		// Function from file: transit_tube_pod.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Structure_TransitTube_Station T = null;
			Obj_Structure_CTransitTubePod R = null;

			
			if ( A is Obj_Item_Weapon_Crowbar ) {
				
				if ( !this.moving ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_TransitTube_Station) )) {
						T = _a;
						
						return null;
					}

					if ( this.contents.len != 0 ) {
						((Ent_Static)user).visible_message( new Txt().item( user ).str( " empties " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You empty " ).the( this ).item().str( ".</span>" ).ToString() );
						this.empty();
						return null;
					} else {
						user.WriteMsg( new Txt( "<span class='notice'>You free " ).the( this ).item().str( ".</span>" ).ToString() );
						R = new Obj_Structure_CTransitTubePod( this.loc );
						this.transfer_fingerprints_to( R );
						R.add_fingerprint( user );
						GlobalFuncs.qdel( this );
					}
				}
			}
			return null;
		}

		// Function from file: transit_tube_pod.dm
		public override dynamic Destroy(  ) {
			Ent_Dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
				AM = _a;
				
				AM.loc = this.loc;
			}
			return base.Destroy();
		}

	}

}