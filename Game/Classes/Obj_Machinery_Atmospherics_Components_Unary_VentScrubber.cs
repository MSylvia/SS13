// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_VentScrubber : Obj_Machinery_Atmospherics_Components_Unary {

		public dynamic initial_loc = null;
		public string id_tag = null;
		public double? frequency = 1439;
		public RadioFrequency radio_connection = null;
		public ByTable adjacent_turfs = new ByTable();
		public double? on = 0;
		public double? scrubbing = 1;
		public double? scrub_CO2 = 1;
		public double? scrub_Toxins = 0;
		public double? scrub_N2O = 0;
		public int volume_rate = 200;
		public double? widenet = 0;
		public dynamic area_uid = null;
		public string radio_filter_out = null;
		public string radio_filter_in = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 10;
			this.active_power_usage = 60;
			this.level = 1;
			this.can_unwrench = true;
			this.icon_state = "scrub_map";
		}

		// Function from file: vent_scrubber.dm
		public Obj_Machinery_Atmospherics_Components_Unary_VentScrubber ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.initial_loc = GlobalFuncs.get_area( this.loc );

			if ( Lang13.Bool( this.initial_loc.master ) ) {
				this.initial_loc = this.initial_loc.master;
			}
			this.area_uid = this.initial_loc.uid;

			if ( !Lang13.Bool( this.id_tag ) ) {
				this.assign_uid();
				this.id_tag = String13.NumberToString( this.uid );
			}
			return;
		}

		// Function from file: vent_scrubber.dm
		public override bool can_crawl_through(  ) {
			return !( this.welded == true );
		}

		// Function from file: vent_scrubber.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic WT = null;

			
			if ( A is Obj_Item_Weapon_Weldingtool ) {
				WT = A;

				if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 40, 1 );
					user.WriteMsg( "<span class='notice'>Now welding the scrubber.</span>" );

					if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
						
						if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
							return null;
						}
						GlobalFuncs.playsound( this.loc, "sound/items/welder2.ogg", 50, 1 );

						if ( !( this.welded == true ) ) {
							((Ent_Static)user).visible_message( "" + user + " welds the scrubber shut.", "You weld the scrubber shut.", "You hear welding." );
							this.welded = true;
						} else {
							((Ent_Static)user).visible_message( "" + user + " unwelds the scrubber.", "You unweld the scrubber.", "You hear welding." );
							this.welded = false;
						}
						this.update_icon();
						this.pipe_vision_img = new Image( this, this.loc, null, 20, this.dir );
					}
					return 0;
				}
			}

			if ( !( A is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}

			if ( !( ( this.stat & 2 ) != 0 ) && Lang13.Bool( this.on ) ) {
				user.WriteMsg( "<span class='warning'>You cannot unwrench this " + this + ", turn it off first!</span>" );
				return 1;
			}
			return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
		}

		// Function from file: vent_scrubber.dm
		public override void power_change(  ) {
			
			if ( Lang13.Bool( this.powered( this.power_channel ) ) ) {
				this.stat &= 65533;
			} else {
				this.stat |= 2;
			}
			this.update_icon_nopipes();
			return;
		}

		// Function from file: vent_scrubber.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( signal.data["tag"] ) || signal.data["tag"] != this.id_tag || signal.data["sigtype"] != "command" ) {
				return false;
			}

			if ( signal.data.Contains( "power" ) ) {
				this.on = String13.ParseNumber( signal.data["power"] );
			}

			if ( signal.data.Contains( "power_toggle" ) ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
			}

			if ( signal.data.Contains( "widenet" ) ) {
				this.widenet = String13.ParseNumber( signal.data["widenet"] );
			}

			if ( signal.data.Contains( "toggle_widenet" ) ) {
				this.widenet = !Lang13.Bool( this.widenet ) ?1:0;
			}

			if ( signal.data.Contains( "scrubbing" ) ) {
				this.scrubbing = String13.ParseNumber( signal.data["scrubbing"] );
			}

			if ( signal.data.Contains( "toggle_scrubbing" ) ) {
				this.scrubbing = !Lang13.Bool( this.scrubbing ) ?1:0;
			}

			if ( signal.data.Contains( "co2_scrub" ) ) {
				this.scrub_CO2 = String13.ParseNumber( signal.data["co2_scrub"] );
			}

			if ( signal.data.Contains( "toggle_co2_scrub" ) ) {
				this.scrub_CO2 = !Lang13.Bool( this.scrub_CO2 ) ?1:0;
			}

			if ( signal.data.Contains( "tox_scrub" ) ) {
				this.scrub_Toxins = String13.ParseNumber( signal.data["tox_scrub"] );
			}

			if ( signal.data.Contains( "toggle_tox_scrub" ) ) {
				this.scrub_Toxins = !Lang13.Bool( this.scrub_Toxins ) ?1:0;
			}

			if ( signal.data.Contains( "n2o_scrub" ) ) {
				this.scrub_N2O = String13.ParseNumber( signal.data["n2o_scrub"] );
			}

			if ( signal.data.Contains( "toggle_n2o_scrub" ) ) {
				this.scrub_N2O = !Lang13.Bool( this.scrub_N2O ) ?1:0;
			}

			if ( signal.data.Contains( "init" ) ) {
				this.name = signal.data["init"];
				return false;
			}

			if ( signal.data.Contains( "status" ) ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					this.broadcast_status();
					return;
				}));
				return false;
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.broadcast_status();
				return;
			}));
			this.update_icon();
			return false;
		}

		// Function from file: vent_scrubber.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( Lang13.Bool( this.widenet ) ) {
				this.check_turfs();
			}
			return null;
		}

		// Function from file: vent_scrubber.dm
		public override int process_atmos(  ) {
			Tile_Simulated tile = null;

			base.process_atmos();

			if ( ( this.stat & 3 ) != 0 ) {
				return 0;
			}

			if ( !Lang13.Bool( this.nodes[1] ) ) {
				this.on = 0;
			}

			if ( !Lang13.Bool( this.on ) || this.welded == true ) {
				return 0;
			}
			this.scrub( this.loc );

			if ( Lang13.Bool( this.widenet ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.adjacent_turfs, typeof(Tile_Simulated) )) {
					tile = _a;
					
					this.scrub( tile );
				}
			}
			return 0;
		}

		// Function from file: vent_scrubber.dm
		public override void atmosinit( ByTable node_connects = null ) {
			this.radio_filter_in = ( this.frequency == Lang13.Initial( this, "frequency" ) ? GlobalVars.RADIO_FROM_AIRALARM : null );
			this.radio_filter_out = ( this.frequency == Lang13.Initial( this, "frequency" ) ? GlobalVars.RADIO_TO_AIRALARM : null );

			if ( Lang13.Bool( this.frequency ) ) {
				this.set_frequency( this.frequency );
			}
			this.broadcast_status();
			this.check_turfs();
			base.atmosinit( node_connects );
			return;
		}

		// Function from file: vent_scrubber.dm
		public void check_turfs(  ) {
			Ent_Static T = null;

			this.adjacent_turfs.Cut();
			T = this.loc;

			if ( T is Tile ) {
				this.adjacent_turfs = ((Tile)T).GetAtmosAdjacentTurfs( true );
			}
			return;
		}

		// Function from file: vent_scrubber.dm
		public bool scrub( Ent_Static tile = null ) {
			GasMixture environment = null;
			dynamic air_contents = null;
			double transfer_moles = 0;
			dynamic removed = null;
			GasMixture filtered_out = null;
			Gas trace_gas = null;
			double transfer_moles2 = 0;
			dynamic removed2 = null;

			
			if ( !( tile != null ) || !( tile is Tile_Simulated ) ) {
				return false;
			}
			environment = tile.return_air();
			air_contents = this.airs[1];

			if ( ( ((int)( this.scrubbing ??0 )) & 1 ) != 0 ) {
				
				if ( ( environment.toxins ??0) > 0 || ( environment.carbon_dioxide ??0) > 0 || environment.trace_gases.len > 0 ) {
					transfer_moles = Num13.MinInt( 1, ((int)( this.volume_rate / environment.volume )) ) * environment.total_moles();
					removed = tile.remove_air( transfer_moles );

					if ( removed == null ) {
						return false;
					}
					filtered_out = new GasMixture();
					filtered_out.temperature = removed.temperature;

					if ( Lang13.Bool( this.scrub_Toxins ) ) {
						filtered_out.toxins = Lang13.DoubleNullable( removed.toxins );
						removed.toxins = 0;
					}

					if ( Lang13.Bool( this.scrub_CO2 ) ) {
						filtered_out.carbon_dioxide = Lang13.DoubleNullable( removed.carbon_dioxide );
						removed.carbon_dioxide = 0;
					}

					if ( removed.trace_gases.len > 0 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
							trace_gas = _a;
							

							if ( trace_gas is Gas_OxygenAgentB ) {
								removed.trace_gases.Remove( trace_gas );
								filtered_out.trace_gases.Add( trace_gas );
							} else if ( trace_gas is Gas_SleepingAgent && Lang13.Bool( this.scrub_N2O ) ) {
								removed.trace_gases.Remove( trace_gas );
								filtered_out.trace_gases.Add( trace_gas );
							}
						}
					}
					air_contents.merge( filtered_out );
					tile.assume_air( removed );
					((Tile)tile).air_update_turf();
				}
			} else {
				
				if ( Convert.ToDouble( air_contents.return_pressure() ) >= 5066.25 ) {
					return false;
				}
				transfer_moles2 = environment.total_moles() * ( this.volume_rate / environment.volume );
				removed2 = tile.remove_air( transfer_moles2 );
				air_contents.merge( removed2 );
				((Tile)tile).air_update_turf();
			}
			this.update_parents();
			return true;
		}

		// Function from file: vent_scrubber.dm
		public bool broadcast_status(  ) {
			Signal signal = null;
			string new_name = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = new Signal();
			signal.transmission_method = 1;
			signal.source = this;
			signal.data = new ByTable()
				.Set( "area", this.area_uid )
				.Set( "tag", this.id_tag )
				.Set( "device", "AScr" )
				.Set( "timestamp", Game13.time )
				.Set( "power", this.on )
				.Set( "scrubbing", this.scrubbing )
				.Set( "widenet", this.widenet )
				.Set( "filter_co2", this.scrub_CO2 )
				.Set( "filter_toxins", this.scrub_Toxins )
				.Set( "filter_n2o", this.scrub_N2O )
				.Set( "sigtype", "status" )
			;

			if ( !Lang13.Bool( this.initial_loc.air_scrub_names[this.id_tag] ) ) {
				new_name = new Txt().improper().item( this.initial_loc.name ).str( " air scrubber #" ).item( this.initial_loc.air_scrub_names.len + 1 ).ToString();
				this.initial_loc.air_scrub_names[this.id_tag] = new_name;
				this.name = new_name;
			}
			this.initial_loc.air_scrub_info[this.id_tag] = signal.data;
			this.radio_connection.post_signal( this, signal, this.radio_filter_out );
			return true;
		}

		// Function from file: vent_scrubber.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, this.radio_filter_in );
			return;
		}

		// Function from file: vent_scrubber.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			this.overlays.Cut();

			if ( this.showpipe ) {
				this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/unary_devices.dmi", "scrub_cap", this.initialize_directions ) );
			}

			if ( this.welded == true ) {
				this.icon_state = "scrub_welded";
				return;
			}

			if ( !Lang13.Bool( this.nodes[1] ) || !Lang13.Bool( this.on ) || ( this.stat & 3 ) != 0 ) {
				this.icon_state = "scrub_off";
				return;
			}

			if ( ( ((int)( this.scrubbing ??0 )) & 1 ) != 0 ) {
				this.icon_state = "scrub_on";
			} else {
				this.icon_state = "scrub_purge";
			}
			return;
		}

		// Function from file: vent_scrubber.dm
		public override bool auto_use_power(  ) {
			dynamic amount = null;

			
			if ( !Lang13.Bool( this.powered( this.power_channel ) ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.on ) || this.welded == true ) {
				return false;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}
			amount = this.idle_power_usage;

			if ( ( ((int)( this.scrubbing ??0 )) & 1 ) != 0 ) {
				
				if ( Lang13.Bool( this.scrub_CO2 ) ) {
					amount += this.idle_power_usage;
				}

				if ( Lang13.Bool( this.scrub_Toxins ) ) {
					amount += this.idle_power_usage;
				}

				if ( Lang13.Bool( this.scrub_N2O ) ) {
					amount += this.idle_power_usage;
				}
			} else {
				amount = this.active_power_usage;
			}

			if ( Lang13.Bool( this.widenet ) ) {
				amount += amount * this.adjacent_turfs.len * ( this.adjacent_turfs.len / 2 );
			}
			this.f_use_power( amount, this.power_channel );
			return true;
		}

		// Function from file: vent_scrubber.dm
		public override dynamic Destroy(  ) {
			dynamic I = null;

			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			this.radio_connection = null;

			if ( Lang13.Bool( this.initial_loc ) ) {
				this.initial_loc.air_scrub_info.Remove( this.id_tag );
				this.initial_loc.air_scrub_names.Remove( this.id_tag );
				this.initial_loc = null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.adjacent_turfs )) {
				I = _a;
				
				I = null;
			}
			return base.Destroy();
		}

	}

}