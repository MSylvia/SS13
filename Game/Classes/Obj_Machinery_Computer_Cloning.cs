// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Cloning : Obj_Machinery_Computer {

		public dynamic scanner = null;
		public dynamic pod1 = null;
		public string temp = "Inactive";
		public string scantemp_ckey = null;
		public string scantemp = "Ready to Scan";
		public double? menu = 1;
		public ByTable records = new ByTable();
		public Data_Record active_record = null;
		public dynamic diskette = null;
		public bool loading = false;
		public bool autoprocess = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "dna";
			this.icon_keyboard = "med_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Cloning);
			this.req_access = new ByTable(new object [] { 19 });
		}

		// Function from file: cloning.dm
		public Obj_Machinery_Computer_Cloning ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.updatemodules();
				return;
				return;
			}));
			return;
		}

		// Function from file: cloning.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic C = null;
			Data_Record C2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( this.loading ) {
				return null;
			}

			if ( Lang13.Bool( href_list["task"] ) ) {
				
				dynamic _a = href_list["task"]; // Was a switch-case, sorry for the mess.
				if ( _a=="autoprocess" ) {
					this.autoprocess = true;
				} else if ( _a=="stopautoprocess" ) {
					this.autoprocess = false;
				}
			} else if ( Lang13.Bool( href_list["scan"] ) && !( this.scanner == null ) && ((Obj_Machinery)this.scanner).is_operational() ) {
				this.scantemp = "";
				this.loading = true;
				this.updateUsrDialog();
				Task13.Schedule( 20, (Task13.Closure)(() => {
					this.scan_mob( this.scanner.occupant );
					this.loading = false;
					this.updateUsrDialog();
					return;
				}));
			} else if ( Lang13.Bool( href_list["lock"] ) && !( this.scanner == null ) && ((Obj_Machinery)this.scanner).is_operational() ) {
				
				if ( !Lang13.Bool( this.scanner.locked ) && Lang13.Bool( this.scanner.occupant ) ) {
					this.scanner.locked = 1;
				} else {
					this.scanner.locked = 0;
				}
			} else if ( Lang13.Bool( href_list["view_rec"] ) ) {
				this.active_record = GlobalFuncs.find_record( "id", href_list["view_rec"], this.records );

				if ( this.active_record != null ) {
					
					if ( !Lang13.Bool( this.active_record.fields["ckey"] ) ) {
						this.records.Remove( this.active_record );
						this.active_record = null;
						this.temp = "<font class='bad'>Record Corrupt</font>";
					} else {
						this.menu = 3;
					}
				} else {
					this.temp = "Record missing.";
				}
			} else if ( Lang13.Bool( href_list["del_rec"] ) ) {
				
				if ( !( this.active_record != null ) || ( this.menu ??0) < 3 ) {
					return null;
				}

				if ( this.menu == 3 ) {
					this.temp = "Delete record?";
					this.menu = 4;
				} else if ( this.menu == 4 ) {
					C = Task13.User.get_active_hand();

					if ( C is Obj_Item_Weapon_Card_Id || C is Obj_Item_Device_Pda ) {
						
						if ( this.check_access( C ) ) {
							this.temp = "" + this.active_record.fields["name"] + " => Record deleted.";
							this.records.Remove( this.active_record );
							this.active_record = null;
							this.menu = 2;
						} else {
							this.temp = "<font class='bad'>Access Denied.</font>";
						}
					}
				}
			} else if ( Lang13.Bool( href_list["disk"] ) ) {
				
				dynamic _b = href_list["disk"]; // Was a switch-case, sorry for the mess.
				if ( _b=="load" ) {
					
					if ( !Lang13.Bool( this.diskette ) || !( this.diskette.fields is ByTable ) || !Lang13.Bool( this.diskette.fields["name"] ) || !Lang13.Bool( this.diskette.fields ) ) {
						this.temp = "<font class='bad'>Load error.</font>";
						this.updateUsrDialog();
						return null;
					}

					if ( !( this.active_record != null ) ) {
						this.temp = "<font class='bad'>Record error.</font>";
						this.menu = 1;
						this.updateUsrDialog();
						return null;
					}
					this.active_record.fields = this.diskette.fields.Copy();
					this.temp = "Load successful.";
				} else if ( _b=="eject" ) {
					
					if ( Lang13.Bool( this.diskette ) ) {
						this.diskette.loc = this.loc;
						this.diskette = null;
					}
				} else if ( _b=="save" ) {
					
					if ( !Lang13.Bool( this.diskette ) || this.diskette.read_only || !( this.active_record != null ) || !Lang13.Bool( this.active_record.fields ) ) {
						this.temp = "<font class='bad'>Save error.</font>";
						this.updateUsrDialog();
						return null;
					}
					this.diskette.fields = this.active_record.fields.Copy();
					this.diskette.name = "data disk - '" + this.diskette.fields["name"] + "'";
					this.temp = "Save successful.";
				}
			} else if ( Lang13.Bool( href_list["refresh"] ) ) {
				this.updateUsrDialog();
			} else if ( Lang13.Bool( href_list["clone"] ) ) {
				C2 = GlobalFuncs.find_record( "id", href_list["clone"], this.records );

				if ( C2 != null ) {
					
					if ( !Lang13.Bool( this.pod1 ) ) {
						this.temp = "<font class='bad'>No Clonepod detected.</font>";
					} else if ( Lang13.Bool( this.pod1.occupant ) ) {
						this.temp = "<font class='bad'>Clonepod is currently occupied.</font>";
					} else if ( this.pod1.mess ) {
						this.temp = "<font class='bad'>Clonepod malfunction.</font>";
					} else if ( !Lang13.Bool( GlobalVars.config.revival_cloning ) ) {
						this.temp = "<font class='bad'>Unable to initiate cloning cycle.</font>";
					} else if ( ((Obj_Machinery_Clonepod)this.pod1).growclone( C2.fields["ckey"], C2.fields["name"], C2.fields["UI"], C2.fields["SE"], C2.fields["mind"], C2.fields["mrace"], C2.fields["features"], C2.fields["factions"] ) ) {
						this.temp = "" + C2.fields["name"] + " => <font class='good'>Cloning cycle in progress...</font>";
						this.records.Remove( C2 );

						if ( this.active_record == C2 ) {
							this.active_record = null;
						}
						this.menu = 1;
					} else {
						this.temp = "" + C2.fields["name"] + " => <font class='bad'>Initialisation failure.</font>";
					}
				} else {
					this.temp = "<font class='bad'>Data corruption.</font>";
				}
			} else if ( Lang13.Bool( href_list["menu"] ) ) {
				this.menu = String13.ParseNumber( href_list["menu"] );
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			Data_Record R = null;
			dynamic H = null;
			ByTable L = null;
			Browser popup = null;

			((Mob)user).set_machine( this );
			this.add_fingerprint( user );

			if ( Lang13.Bool( base.interact( (object)(user), flag1 ) ) ) {
				return null;
			}
			this.updatemodules();
			dat = "";
			dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";refresh=1'>Refresh</a>" ).ToString();

			if ( Lang13.Bool( this.scanner ) && Lang13.Bool( this.pod1 ) && ( this.scanner.scan_level > 2 || Convert.ToDouble( this.pod1.efficiency ) > 5 ) ) {
				
				if ( !this.autoprocess ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";task=autoprocess'>Autoprocess</a>" ).ToString();
				} else {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";task=stopautoprocess'>Stop autoprocess</a>" ).ToString();
				}
			} else {
				dat += "<span class='linkOff'>Autoprocess</span>";
			}
			dat += "<h3>Cloning Pod Status</h3>";
			dat += "<div class='statusDisplay'>" + this.temp + "&nbsp;</div>";

			switch ((double?)( this.menu )) {
				case 1:
					
					if ( this.scanner == null || this.pod1 == null ) {
						dat += "<h3>Modules</h3>";

						if ( this.scanner == null ) {
							dat += "<font class='bad'>ERROR: No Scanner detected!</font><br>";
						}

						if ( this.pod1 == null ) {
							dat += "<font class='bad'>ERROR: No Pod detected</font><br>";
						}
					}

					if ( !( this.scanner == null ) ) {
						dat += "<h3>Scanner Functions</h3>";
						dat += "<div class='statusDisplay'>";

						if ( !Lang13.Bool( this.scanner.occupant ) ) {
							dat += "Scanner Unoccupied";
						} else if ( this.loading ) {
							dat += "" + this.scanner.occupant + " => Scanning...";
						} else {
							
							if ( this.scanner.occupant.ckey != this.scantemp_ckey ) {
								this.scantemp = "Ready to Scan";
								this.scantemp_ckey = this.scanner.occupant.ckey;
							}
							dat += "" + this.scanner.occupant + " => " + this.scantemp;
						}
						dat += "</div>";

						if ( Lang13.Bool( this.scanner.occupant ) ) {
							dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";scan=1'>Start Scan</a>" ).ToString();
							dat += new Txt( "<br><a href='byond://?src=" ).Ref( this ).str( ";lock=1'>" ).item( ( Lang13.Bool( this.scanner.locked ) ? "Unlock Scanner" : "Lock Scanner" ) ).str( "</a>" ).ToString();
						} else {
							dat += "<span class='linkOff'>Start Scan</span>";
						}
					}
					dat += "<h3>Database Functions</h3>";

					if ( this.records.len != 0 && this.records.len > 0 ) {
						dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";menu=2'>View Records (" ).item( this.records.len ).str( ")</a><br>" ).ToString();
					} else {
						dat += "<span class='linkOff'>View Records (0)</span><br>";
					}

					if ( Lang13.Bool( this.diskette ) ) {
						dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";disk=eject'>Eject Disk</a><br>" ).ToString();
					}
					break;
				case 2:
					dat += "<h3>Current records</h3>";
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";menu=1'><< Back</a><br><br>" ).ToString();

					foreach (dynamic _a in Lang13.Enumerate( this.records, typeof(Data_Record) )) {
						R = _a;
						
						dat += new Txt( "<h4>" ).item( R.fields["name"] ).str( "</h4>Scan ID " ).item( R.fields["id"] ).str( " <a href='byond://?src=" ).Ref( this ).str( ";view_rec=" ).item( R.fields["id"] ).str( "'>View Record</a>" ).ToString();
					}
					break;
				case 3:
					dat += "<h3>Selected Record</h3>";
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";menu=2'><< Back</a><br>" ).ToString();

					if ( !( this.active_record != null ) ) {
						dat += "<font class='bad'>Record not found.</font>";
					} else {
						dat += "<h4>" + this.active_record.fields["name"] + "</h4>";
						dat += new Txt( "Scan ID " ).item( this.active_record.fields["id"] ).str( " <a href='byond://?src=" ).Ref( this ).str( ";clone=" ).item( this.active_record.fields["id"] ).str( "'>Clone</a><br>" ).ToString();
						H = Lang13.FindObj( this.active_record.fields["imp"] );

						if ( Lang13.Bool( H ) && H is Obj_Item_Weapon_Implant_Health ) {
							dat += "<b>Health Implant Data:</b><br />" + ((Obj_Item_Weapon_Implant_Health)H).sensehealth() + "<br><br />";
						} else {
							dat += "<font class='bad'>Unable to locate Health Implant.</font><br /><br />";
						}
						dat += "<b>Unique Identifier:</b><br /><span class='highlight'>" + this.active_record.fields["UI"] + "</span><br>";
						dat += "<b>Structural Enzymes:</b><br /><span class='highlight'>" + this.active_record.fields["SE"] + "</span><br>";

						if ( Lang13.Bool( this.diskette ) && Lang13.Bool( this.diskette.fields ) ) {
							dat += "<div class='block'>";
							dat += "<h4>Inserted Disk</h4>";
							dat += "<b>Contents:</b> ";
							L = new ByTable();

							if ( Lang13.Bool( this.diskette.fields["UI"] ) ) {
								L.Add( "Unique Identifier" );
							}

							if ( Lang13.Bool( this.diskette.fields["UE"] ) && Lang13.Bool( this.diskette.fields["name"] ) && Lang13.Bool( this.diskette.fields["blood_type"] ) ) {
								L.Add( "Unique Enzymes" );
							}

							if ( Lang13.Bool( this.diskette.fields["SE"] ) ) {
								L.Add( "Structural Enzymes" );
							}
							dat += GlobalFuncs.english_list( L, "Empty", " + ", " + " );
							dat += new Txt( "<br /><a href='byond://?src=" ).Ref( this ).str( ";disk=load'>Load from Disk</a>" ).ToString();
							dat += new Txt( "<br /><a href='byond://?src=" ).Ref( this ).str( ";disk=save'>Save to Disk</a>" ).ToString();
							dat += "</div>";
						}
						dat += new Txt( "<font size=1><a href='byond://?src=" ).Ref( this ).str( ";del_rec=1'>Delete Record</a></font>" ).ToString();
					}
					break;
				case 4:
					
					if ( !( this.active_record != null ) ) {
						this.menu = 2;
					}
					dat = "" + this.temp + "<br>";
					dat += "<h3>Confirm Record Deletion</h3>";
					dat += new Txt( "<b><a href='byond://?src=" ).Ref( this ).str( ";del_rec=1'>Scan card to confirm.</a></b><br>" ).ToString();
					dat += new Txt( "<b><a href='byond://?src=" ).Ref( this ).str( ";menu=3'>Cancel</a></b>" ).ToString();
					break;
			}
			popup = new Browser( user, "cloning", "Cloning System Control" );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: cloning.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Disk_Data ) {
				
				if ( !Lang13.Bool( this.diskette ) ) {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
					}
					A.loc = this;
					this.diskette = A;
					user.WriteMsg( "<span class='notice'>You insert " + A + ".</span>" );
					this.updateUsrDialog();
					return null;
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: cloning.dm
		public void scan_mob( Mob subject = null ) {
			Data_Record R = null;
			dynamic imp = null;

			
			if ( !( subject is Mob_Living_Carbon_Human ) ) {
				this.scantemp = "<font class='bad'>Unable to locate valid genetic data.</font>";
				return;
			}

			if ( !Lang13.Bool( subject.getorgan( typeof(Obj_Item_Organ_Internal_Brain) ) ) ) {
				this.scantemp = "<font class='bad'>No signs of intelligence detected.</font>";
				return;
			}

			if ( subject.suiciding ) {
				this.scantemp = "<font class='bad'>Subject's brain is not responding to scanning stimuli.</font>";
				return;
			}

			if ( Lang13.Bool( subject.disabilities & 128 ) && this.scanner.scan_level < 2 ) {
				this.scantemp = "<font class='bad'>Subject no longer contains the fundamental materials required to create a living clone.</font>";
				return;
			}

			if ( !Lang13.Bool( subject.ckey ) || !( subject.client != null ) ) {
				this.scantemp = "<font class='bad'>Mental interface failure.</font>";
				return;
			}

			if ( GlobalFuncs.find_record( "ckey", subject.ckey, this.records ) != null ) {
				this.scantemp = "<font class='average'>Subject already in database.</font>";
				return;
			}
			R = new Data_Record();

			if ( Lang13.Bool( ((dynamic)subject).dna.species ) ) {
				R.fields["mrace"] = ((dynamic)subject).dna.species.type;
			} else {
				R.fields["mrace"] = typeof(Species_Human);
			}
			R.fields["ckey"] = subject.ckey;
			R.fields["name"] = subject.real_name;
			R.fields["id"] = String13.SubStr( Num13.Md5( subject.real_name ), 2, 6 );
			R.fields["UE"] = ((dynamic)subject).dna.unique_enzymes;
			R.fields["UI"] = ((dynamic)subject).dna.uni_identity;
			R.fields["SE"] = ((dynamic)subject).dna.struc_enzymes;
			R.fields["blood_type"] = ((dynamic)subject).dna.blood_type;
			R.fields["features"] = ((dynamic)subject).dna.features;
			R.fields["factions"] = subject.faction;
			imp = Lang13.FindIn( typeof(Obj_Item_Weapon_Implant_Health), subject );

			if ( !Lang13.Bool( imp ) ) {
				imp = new Obj_Item_Weapon_Implant_Health( subject );
				imp.implanted = subject;
				R.fields["imp"] = new Txt().Ref( imp ).ToString();
			} else {
				R.fields["imp"] = new Txt().Ref( imp ).ToString();
			}

			if ( !( subject.mind == null ) ) {
				R.fields["mind"] = new Txt().Ref( subject.mind ).ToString();
			}
			this.records.Add( R );
			this.scantemp = "Subject successfully scanned.";
			return;
		}

		// Function from file: cloning.dm
		public dynamic findcloner(  ) {
			dynamic podf = null;

			podf = null;

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				this.dir = Convert.ToInt32( _a );
				
				podf = Lang13.FindIn( typeof(Obj_Machinery_Clonepod), Map13.GetStep( this, this.dir ) );

				if ( !( podf == null ) && ((Obj_Machinery)podf).is_operational() ) {
					return podf;
				}
			}
			return null;
		}

		// Function from file: cloning.dm
		public dynamic findscanner(  ) {
			dynamic scannerf = null;

			scannerf = null;

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				this.dir = Convert.ToInt32( _a );
				
				scannerf = Lang13.FindIn( typeof(Obj_Machinery_DnaScannernew), Map13.GetStep( this, this.dir ) );

				if ( !( scannerf == null ) && ((Obj_Machinery)scannerf).is_operational() ) {
					return scannerf;
				}
			}
			return null;
		}

		// Function from file: cloning.dm
		public void updatemodules(  ) {
			this.scanner = this.findscanner();
			this.pod1 = this.findcloner();

			if ( !( this.pod1 == null ) ) {
				this.pod1.connected = this;
			}
			return;
		}

		// Function from file: cloning.dm
		public override int? process( dynamic seconds = null ) {
			Data_Record R = null;

			
			if ( !( Lang13.Bool( this.scanner ) && Lang13.Bool( this.pod1 ) && this.autoprocess ) ) {
				return null;
			}

			if ( Lang13.Bool( this.scanner.occupant ) && this.scanner.scan_level > 2 ) {
				this.scan_mob( this.scanner.occupant );
			}

			if ( !( Lang13.Bool( this.pod1.occupant ) || this.pod1.mess ) && Convert.ToDouble( this.pod1.efficiency ) > 5 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.records, typeof(Data_Record) )) {
					R = _a;
					

					if ( !( Lang13.Bool( this.pod1.occupant ) || this.pod1.mess ) ) {
						
						if ( ((Obj_Machinery_Clonepod)this.pod1).growclone( R.fields["ckey"], R.fields["name"], R.fields["UI"], R.fields["SE"], R.fields["mind"], R.fields["mrace"], R.fields["features"], R.fields["factions"] ) ) {
							this.records.Remove( R );
						}
					}
				}
			}
			return null;
		}

	}

}