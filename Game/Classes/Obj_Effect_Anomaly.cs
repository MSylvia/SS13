// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Anomaly : Obj_Effect {

		public int movechance = 70;
		public Obj_Item_Device_Assembly_Signaler_Anomaly aSignal = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 3;
			this.unacidable = true;
			this.anchored = 1;
			this.icon = "icons/effects/effects.dmi";
			this.icon_state = "bhole3";
		}

		// Function from file: anomalies.dm
		public Obj_Effect_Anomaly ( dynamic loc = null ) : base( (object)(loc) ) {
			this.SetLuminosity( Lang13.Initial( this, "luminosity" ) );
			this.aSignal = new Obj_Item_Device_Assembly_Signaler_Anomaly( this );
			this.aSignal.code = Rand13.Int( 1, 100 );
			this.aSignal.frequency = Rand13.Int( 1200, 1599 );

			if ( GlobalFuncs.IsMultiple( this.aSignal.frequency, 2 ) ) {
				this.aSignal.frequency++;
			}
			return;
		}

		// Function from file: anomalies.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Device_Analyzer ) {
				user.WriteMsg( "<span class='notice'>Analyzing... " + this + "'s unstable field is fluctuating along frequency " + GlobalFuncs.format_frequency( this.aSignal.frequency ) + ", code " + this.aSignal.code + ".</span>" );
			}
			return null;
		}

		// Function from file: anomalies.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			if ( severity == 1 ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: anomalies.dm
		public void anomalyNeutralize(  ) {
			Ent_Dynamic O = null;

			GlobalFuncs.PoolOrNew( typeof(Obj_Effect_ParticleEffect_Smoke_Bad), this.loc );

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				O = _a;
				
				O.loc = this.loc;
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: anomalies.dm
		public virtual void anomalyEffect(  ) {
			
			if ( Rand13.PercentChance( this.movechance ) ) {
				Map13.Step( this, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.alldirs ) ) );
			}
			return;
		}

	}

}