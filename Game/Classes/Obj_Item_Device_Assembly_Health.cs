// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Health : Obj_Item_Device_Assembly {

		public bool scanning = false;
		public int health_scan = 0;
		public int alarm_health = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.materials = new ByTable().Set( "$metal", 800 ).Set( "$glass", 200 );
			this.origin_tech = "magnets=1;biotech=1";
			this.attachable = true;
			this.secured = false;
			this.icon_state = "health";
		}

		public Obj_Item_Device_Assembly_Health ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tgstation.dme
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob user = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( !( Task13.User is Mob ) ) {
				return null;
			}
			user = Task13.User;

			if ( !user.canUseTopic( user ) ) {
				Interface13.Browse( Task13.User, null, "window=hscan" );
				GlobalFuncs.onclose( Task13.User, "hscan" );
				return null;
			}

			if ( Lang13.Bool( href_list["scanning"] ) ) {
				this.toggle_scan();
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=hscan" );
				return null;
			}
			this.attack_self( user );
			return null;
		}

		// Function from file: health.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			
			if ( !this.secured ) {
				user.show_message( "<span class='warning'>The " + this.name + " is unsecured!</span>" );
				return 0;
			}
			dat = new Txt( "<TT><B>Health Sensor</B> <A href='?src=" ).Ref( this ).str( ";scanning=1'>" ).item( ( this.scanning ? "On" : "Off" ) ).str( "</A>" ).ToString();

			if ( this.scanning && this.health_scan != 0 ) {
				dat += "<BR>Health: " + this.health_scan;
			}
			Interface13.Browse( user, dat, "window=hscan" );
			GlobalFuncs.onclose( user, "hscan" );
			return null;
		}

		// Function from file: health.dm
		public bool toggle_scan(  ) {
			
			if ( !this.secured ) {
				return false;
			}
			this.scanning = !this.scanning;

			if ( this.scanning ) {
				GlobalVars.SSobj.processing.Or( this );
			} else {
				GlobalVars.SSobj.processing.Remove( this );
			}
			return false;
		}

		// Function from file: health.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static A = null;
			Ent_Static M = null;

			
			if ( !this.scanning || !this.secured ) {
				return null;
			}
			A = this;

			if ( this.connected != null && this.connected.holder != null ) {
				A = this.connected.holder;
			}

			while (A != null && !( A is Mob )) {
				A = A.loc;
			}
			M = A;

			if ( M != null ) {
				this.health_scan = Convert.ToInt32( ((dynamic)M).health );

				if ( this.health_scan <= this.alarm_health ) {
					this.pulse();
					this.audible_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString(), "*beep* *beep*" );
					this.toggle_scan();
				}
				return null;
			}
			return null;
		}

		// Function from file: health.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Device_Multitool ) {
				
				if ( this.alarm_health == 0 ) {
					this.alarm_health = -90;
					user.show_message( "You toggle " + this + " to \"detect death\" mode." );
				} else {
					this.alarm_health = 0;
					user.show_message( "You toggle " + this + " to \"detect critical state\" mode." );
				}
				return null;
			} else {
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
		}

		// Function from file: health.dm
		public override bool toggle_secure(  ) {
			this.secured = !this.secured;

			if ( this.secured && this.scanning ) {
				GlobalVars.SSobj.processing.Or( this );
			} else {
				this.scanning = false;
				GlobalVars.SSobj.processing.Remove( this );
			}
			this.update_icon();
			return this.secured;
		}

		// Function from file: health.dm
		public override bool activate(  ) {
			
			if ( !base.activate() ) {
				return false;
			}
			this.toggle_scan();
			return false;
		}

	}

}