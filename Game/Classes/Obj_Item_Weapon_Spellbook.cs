// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Spellbook : Obj_Item_Weapon {

		public int uses = 10;
		public string temp = null;
		public bool op = true;
		public string tab = null;
		public dynamic owner = null;
		public ByTable entries = new ByTable();
		public ByTable categories = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throw_range = 5;
			this.w_class = 1;
			this.icon = "icons/obj/library.dmi";
			this.icon_state = "book";
		}

		// Function from file: spellbook.dm
		public Obj_Item_Weapon_Spellbook ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.Initialize();
			return;
		}

		// Function from file: spellbook.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob H = null;
			SpellbookEntry E = null;
			int result = 0;

			base.Topic( href, href_list, (object)(hsrc) );
			H = Task13.User;

			if ( H.stat != 0 || H.restrained() ) {
				return null;
			}

			if ( !( H is Mob_Living_Carbon_Human ) ) {
				return 1;
			}

			if ( H.mind.special_role == "apprentice" ) {
				this.temp = "If you got caught sneaking a peak from your teacher's spellbook, you'd likely be expelled from the Wizard Academy. Better not.";
				return null;
			}
			E = null;

			if ( this.loc == H || Map13.GetDistance( this, H ) <= 1 && this.loc is Tile ) {
				H.set_machine( this );

				if ( Lang13.Bool( href_list["buy"] ) ) {
					E = this.entries[String13.ParseNumber( href_list["buy"] )];

					if ( E != null && E.CanBuy( H, this ) ) {
						
						if ( E.Buy( H, this ) ) {
							
							if ( Lang13.Bool( E.limit ) ) {
								E.limit--;
							}
							this.uses -= E.cost;
						}
					}
				} else if ( Lang13.Bool( href_list["refund"] ) ) {
					E = this.entries[String13.ParseNumber( href_list["refund"] )];

					if ( E != null && E.refundable ) {
						result = E.Refund( H, this );

						if ( result > 0 ) {
							
							if ( !( E.limit == null ) ) {
								E.limit += result;
							}
							this.uses += result;
						}
					}
				} else if ( Lang13.Bool( href_list["page"] ) ) {
					this.tab = GlobalFuncs.sanitize( href_list["page"] );
				}
			}
			this.attack_self( H );
			return null;
		}

		// Function from file: spellbook.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;
			ByTable cat_dat = null;
			dynamic category = null;
			SpellbookEntry E = null;
			int? i = null;
			string spell_info = null;
			dynamic category2 = null;

			
			if ( !Lang13.Bool( this.owner ) ) {
				user.WriteMsg( "<span class='notice'>You bind the spellbook to yourself.</span>" );
				this.owner = user;
				return null;
			}

			if ( user != this.owner ) {
				user.WriteMsg( "<span class='warning'>The " + this.name + " does not recognize you as it's owner and refuses to open!</span>" );
				return null;
			}
			((Mob)user).set_machine( this );
			dat = "";
			dat += "<ul id=\"tabs\">";
			cat_dat = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.categories )) {
				category = _a;
				
				cat_dat[category] = "<hr>";
				dat += new Txt( "<li><a " ).item( ( this.tab == category ? "class=selected" : "" ) ).str( " href='byond://?src=" ).Ref( this ).str( ";page=" ).item( category ).str( "'>" ).item( category ).str( "</a></li>" ).ToString();
			}
			dat += "<li><a><b>Points remaining : " + this.uses + "</b></a></li>";
			dat += "</ul>";
			E = null;
			i = null;
			i = 1;

			while (( i ??0) <= this.entries.len) {
				spell_info = "";
				E = this.entries[i];
				spell_info += E.GetInfo();

				if ( E.CanBuy( user, this ) ) {
					spell_info += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";buy=" ).item( i ).str( "'>" ).item( E.buy_word ).str( "</A><br>" ).ToString();
				} else {
					spell_info += "<span>Can't " + E.buy_word + "</span><br>";
				}

				if ( E.CanRefund( user, this ) ) {
					spell_info += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";refund=" ).item( i ).str( "'>Refund</A><br>" ).ToString();
				}
				spell_info += "<hr>";

				if ( Lang13.Bool( cat_dat[E.category] ) ) {
					cat_dat[E.category] += spell_info;
				}
				i++;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.categories )) {
				category2 = _b;
				
				dat += "<div class=\"" + ( this.tab == category2 ? "tabContent" : "tabContent hide" ) + "\" id=\"" + category2 + "\">";
				dat += this.GetCategoryHeader( category2 );
				dat += cat_dat[category2];
				dat += "</div>";
			}
			Interface13.Browse( user, this.wrap( dat ), "window=spellbook;size=700x500" );
			GlobalFuncs.onclose( user, "spellbook" );
			return null;
		}

		// Function from file: spellbook.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic contract = null;
			SpellbookEntry_Item_Contract CT = null;
			SpellbookEntry_Item_Bloodbottle BB = null;

			
			if ( A is Obj_Item_Weapon_AntagSpawner_Contract ) {
				contract = A;

				if ( Lang13.Bool( contract.used ) ) {
					user.WriteMsg( "<span class='warning'>The contract has been used, you can't get your points back now!</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>You feed the contract back into the spellbook, refunding your points.</span>" );
					this.uses++;

					foreach (dynamic _a in Lang13.Enumerate( this.entries, typeof(SpellbookEntry_Item_Contract) )) {
						CT = _a;
						

						if ( !( CT.limit == null ) ) {
							CT.limit++;
						}
					}
					GlobalFuncs.qdel( A );
				}
			}

			if ( A is Obj_Item_Weapon_AntagSpawner_SlaughterDemon ) {
				user.WriteMsg( "<span class='notice'>On second thought, maybe summoning a demon is a bad idea. You refund your points.</span>" );
				this.uses++;

				foreach (dynamic _b in Lang13.Enumerate( this.entries, typeof(SpellbookEntry_Item_Bloodbottle) )) {
					BB = _b;
					

					if ( !( BB.limit == null ) ) {
						BB.limit++;
					}
				}
				GlobalFuncs.qdel( A );
			}
			return null;
		}

		// Function from file: spellbook.dm
		public string wrap( string content = null ) {
			string dat = null;

			dat = "";
			dat += "<html><head><title>Spellbook</title></head>";
			dat += @"
	<head>
		<style type=""text/css"">
      		body { font-size: 80%; font-family: 'Lucida Grande', Verdana, Arial, Sans-Serif; }
      		ul#tabs { list-style-type: none; margin: 30px 0 0 0; padding: 0 0 0.3em 0; }
      		ul#tabs li { display: inline; }
      		ul#tabs li a { color: #42454a; background-color: #dedbde; border: 1px solid #c9c3ba; border-bottom: none; padding: 0.3em; text-decoration: none; }
      		ul#tabs li a:hover { background-color: #f1f0ee; }
      		ul#tabs li a.selected { color: #000; background-color: #f1f0ee; font-weight: bold; padding: 0.7em 0.3em 0.38em 0.3em; }
      		div.tabContent { border: 1px solid #c9c3ba; padding: 0.5em; background-color: #f1f0ee; }
      		div.tabContent.hide { display: none; }
    	</style>
  	</head>
	";
			dat += "" + content + "</body></html>";
			return dat;
		}

		// Function from file: spellbook.dm
		public string GetCategoryHeader( dynamic category = null ) {
			string dat = null;

			dat = "";

			dynamic _a = category; // Was a switch-case, sorry for the mess.
			if ( _a=="Offensive" ) {
				dat += "Spells and items geared towards debilitating and destroying.<BR><BR>";
				dat += "Items are not bound to you and can be stolen. Additionaly they cannot typically be returned once purchased.<BR>";
				dat += "For spells: the number after the spell name is the cooldown time.<BR>";
				dat += "You can reduce this number by spending more points on the spell.<BR>";
			} else if ( _a=="Defensive" ) {
				dat += "Spells and items geared towards improving your survivabilty or reducing foes ability to attack.<BR><BR>";
				dat += "Items are not bound to you and can be stolen. Additionaly they cannot typically be returned once purchased.<BR>";
				dat += "For spells: the number after the spell name is the cooldown time.<BR>";
				dat += "You can reduce this number by spending more points on the spell.<BR>";
			} else if ( _a=="Mobility" ) {
				dat += "Spells and items geared towards improving your ability to move. It is a good idea to take at least one.<BR><BR>";
				dat += "Items are not bound to you and can be stolen. Additionaly they cannot typically be returned once purchased.<BR>";
				dat += "For spells: the number after the spell name is the cooldown time.<BR>";
				dat += "You can reduce this number by spending more points on the spell.<BR>";
			} else if ( _a=="Assistance" ) {
				dat += "Spells and items geared towards bringing in outside forces to aid you or improving upon your other items and abilties.<BR><BR>";
				dat += "Items are not bound to you and can be stolen. Additionaly they cannot typically be returned once purchased.<BR>";
				dat += "For spells: the number after the spell name is the cooldown time.<BR>";
				dat += "You can reduce this number by spending more points on the spell.<BR>";
			} else if ( _a=="Challenges" ) {
				dat += "The Wizard Federation typically has hard limits on the potency and number of spells brought to the station based on risk.<BR>";
				dat += "Arming the station against you will increases the risk, but will grant you one more charge for your spellbook.<BR>";
			} else if ( _a=="Rituals" ) {
				dat += "These powerful spells change the very fabric of reality. Not always in your favour.<BR>";
			}
			return dat;
		}

		// Function from file: spellbook.dm
		public virtual void Initialize(  ) {
			dynamic entry_types = null;
			dynamic T = null;
			dynamic E = null;

			entry_types = Lang13.GetTypes( typeof(SpellbookEntry) ) - typeof(SpellbookEntry) - typeof(SpellbookEntry_Item) - typeof(SpellbookEntry_Summon);

			foreach (dynamic _a in Lang13.Enumerate( entry_types )) {
				T = _a;
				
				E = Lang13.Call( T );

				if ( ((SpellbookEntry)E).IsAvailible() ) {
					this.entries.Or( E );
					this.categories.Or( E.category );
				} else {
					GlobalFuncs.qdel( E );
				}
			}
			this.tab = this.categories[1];
			return;
		}

		// Function from file: spellbook.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( Lang13.Bool( this.owner ) ) {
				user.WriteMsg( "There is a small signature on the front cover: \"" + this.owner + "\"." );
			} else {
				user.WriteMsg( "It appears to have no author." );
			}
			return 0;
		}

	}

}