// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Symptom_DamageConverter : Symptom {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Toxic Compensation";
			this.stealth = 1;
			this.resistance = -4;
			this.stage_speed = -4;
			this.transmittable = -2;
			this.level = 4;
		}

		// Function from file: damage_converter.dm
		public bool Convert( dynamic M = null ) {
			double get_damage = 0;
			dynamic H = null;
			ByTable parts = null;
			Obj_Item_Organ_Limb L = null;

			get_damage = Rand13.Int( 1, 2 );

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				parts = ((Mob_Living_Carbon_Human)H).get_damaged_organs( 1, 1 );

				if ( !( parts.len != 0 ) ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( parts, typeof(Obj_Item_Organ_Limb) )) {
					L = _a;
					
					L.heal_damage( get_damage, get_damage, false );
				}
			} else if ( ((Mob_Living)M).getFireLoss() > 0 || ((Mob_Living)M).getBruteLoss() > 0 ) {
				((Mob_Living)M).adjustFireLoss( -get_damage );
				((Mob_Living)M).adjustBruteLoss( -get_damage );
			} else {
				return false;
			}
			((Mob_Living)M).adjustToxLoss( get_damage );
			return true;
		}

		// Function from file: damage_converter.dm
		public override void Activate( Disease_Advance A = null ) {
			dynamic M = null;

			base.Activate( A );

			if ( Rand13.PercentChance( 30 ) ) {
				M = A.affected_mob;

				switch ((int?)( A.stage )) {
					case 4:
					case 5:
						this.Convert( M );
						break;
				}
			}
			return;
		}

	}

}