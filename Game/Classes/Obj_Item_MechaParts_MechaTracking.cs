// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaTracking : Obj_Item_MechaParts {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 2;
			this.origin_tech = "programming=2;magnets=2";
			this.icon = "icons/obj/device.dmi";
			this.icon_state = "motion2";
		}

		public Obj_Item_MechaParts_MechaTracking ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: mecha_control_console.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: mecha_control_console.dm
		public override double emp_act( int severity = 0 ) {
			GlobalFuncs.qdel( this );
			return 0;
		}

		// Function from file: mecha_control_console.dm
		public dynamic get_mecha_log(  ) {
			Ent_Static M = null;

			
			if ( !Lang13.Bool( this.in_mecha() ) ) {
				return 0;
			}
			M = this.loc;
			return ((Obj_Mecha)M).get_log_html();
		}

		// Function from file: mecha_control_console.dm
		public void shock(  ) {
			dynamic M = null;

			M = this.in_mecha();

			if ( Lang13.Bool( M ) ) {
				((Ent_Static)M).emp_act( 2 );
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: mecha_control_console.dm
		public dynamic in_mecha(  ) {
			
			if ( this.loc is Obj_Mecha ) {
				return this.loc;
			}
			return 0;
		}

		// Function from file: mecha_control_console.dm
		public dynamic get_mecha_info(  ) {
			Ent_Static M = null;
			int? cell_charge = null;
			string answer = null;
			Ent_Static RM = null;

			
			if ( !Lang13.Bool( this.in_mecha() ) ) {
				return 0;
			}
			M = this.loc;
			cell_charge = ((Obj_Mecha)M).get_charge();
			answer = "<b>Name:</b> " + M.name + "<br>\n						<b>Integrity:</b> " + ((dynamic)M).health / Lang13.Initial( M, "health" ) * 100 + "%<br>\n						<b>Cell charge:</b> " + ( cell_charge == null ? "Not found" : "" + ((Obj_Item_Weapon_StockParts_Cell)((dynamic)M).cell).percent() + "%" ) + "<br>\n						<b>Airtank:</b> " + ((dynamic)M).return_pressure() + "kPa<br>\n						<b>Pilot:</b> " + ( Lang13.Bool( ((dynamic)M).occupant ) || Lang13.Bool( "None" ) ) + "<br>\n						<b>Location:</b> " + ( Lang13.Bool( GlobalFuncs.get_area( M ) ) || Lang13.Bool( "Unknown" ) ) + "<br>\n						<b>Active equipment:</b> " + ( Lang13.Bool( ((dynamic)M).selected ) || Lang13.Bool( "None" ) ) + "<br>";

			if ( M is Obj_Mecha_Working_Ripley ) {
				RM = M;
				answer += "<b>Used cargo space:</b> " + ((dynamic)RM).cargo.len / ((dynamic)RM).cargo_capacity * 100 + "%<br>";
			}
			return answer;
		}

	}

}