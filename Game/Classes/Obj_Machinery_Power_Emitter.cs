// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Emitter : Obj_Machinery_Power {

		public bool active = false;
		public bool v_powered = false;
		public double fire_delay = 100;
		public double maximum_fire_delay = 100;
		public double minimum_fire_delay = 20;
		public int last_shot = 0;
		public int shot_number = 0;
		public int state = 0;
		public bool locked = false;
		public Type projectile_type = typeof(Obj_Item_Projectile_Beam_Emitter);
		public string projectile_sound = "sound/weapons/emitter.ogg";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 11 });
			this.idle_power_usage = 10;
			this.active_power_usage = 300;
			this.icon = "icons/obj/singularity.dmi";
			this.icon_state = "emitter";
		}

		// Function from file: emitter.dm
		public Obj_Machinery_Power_Emitter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Emitter( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.RefreshParts();
			return;
		}

		// Function from file: emitter.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				this.locked = false;
				this.emagged = 1;

				if ( Lang13.Bool( user ) ) {
					((Ent_Static)user).visible_message( "" + user.name + " emags the " + this.name + ".", "<span class='notice'>You short out the lock.</span>" );
				}
			}
			return false;
		}

		// Function from file: emitter.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic WT = null;

			
			if ( A is Obj_Item_Weapon_Wrench ) {
				
				if ( this.active ) {
					user.WriteMsg( new Txt( "<span class='warning'>Turn off " ).the( this ).item().str( " first!</span>" ).ToString() );
					return null;
				}

				switch ((int)( this.state )) {
					case 0:
						
						if ( this.isinspace() ) {
							return null;
						}
						this.state = 1;
						GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
						((Ent_Static)user).visible_message( "" + user.name + " secures " + this.name + " to the floor.", "<span class='notice'>You secure the external reinforcing bolts to the floor.</span>", "<span class='italics'>You hear a ratchet</span>" );
						this.anchored = 1;
						break;
					case 1:
						this.state = 0;
						GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
						((Ent_Static)user).visible_message( "" + user.name + " unsecures " + this.name + " reinforcing bolts from the floor.", "<span class='notice'>You undo the external reinforcing bolts.</span>", "<span class='italics'>You hear a ratchet.</span>" );
						this.anchored = 0;
						break;
					case 2:
						user.WriteMsg( "<span class='warning'>The " + this.name + " needs to be unwelded from the floor!</span>" );
						break;
				}
				return null;
			}

			if ( A is Obj_Item_Weapon_Weldingtool ) {
				WT = A;

				if ( this.active ) {
					user.WriteMsg( new Txt( "Turn off " ).the( this ).item().str( " first." ).ToString() );
					return null;
				}

				switch ((int)( this.state )) {
					case 0:
						user.WriteMsg( "<span class='warning'>The " + this.name + " needs to be wrenched to the floor!</span>" );
						break;
					case 1:
						
						if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
							GlobalFuncs.playsound( this.loc, "sound/items/welder2.ogg", 50, 1 );
							((Ent_Static)user).visible_message( "" + user.name + " starts to weld the " + this.name + " to the floor.", new Txt( "<span class='notice'>You start to weld " ).the( this ).item().str( " to the floor...</span>" ).ToString(), "<span class='italics'>You hear welding.</span>" );

							if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
								
								if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
									return null;
								}
								this.state = 2;
								user.WriteMsg( new Txt( "<span class='notice'>You weld " ).the( this ).item().str( " to the floor.</span>" ).ToString() );
								this.connect_to_network();
							}
						}
						break;
					case 2:
						
						if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
							GlobalFuncs.playsound( this.loc, "sound/items/welder2.ogg", 50, 1 );
							((Ent_Static)user).visible_message( "" + user.name + " starts to cut the " + this.name + " free from the floor.", new Txt( "<span class='notice'>You start to cut " ).the( this ).item().str( " free from the floor...</span>" ).ToString(), "<span class='italics'>You hear welding.</span>" );

							if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
								
								if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
									return null;
								}
								this.state = 1;
								user.WriteMsg( new Txt( "<span class='notice'>You cut " ).the( this ).item().str( " free from the floor.</span>" ).ToString() );
								this.disconnect_from_network();
							}
						}
						break;
				}
				return null;
			}

			if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
				
				if ( this.emagged != 0 ) {
					user.WriteMsg( "<span class='warning'>The lock seems to be broken!</span>" );
					return null;
				}

				if ( this.allowed( user ) ) {
					
					if ( this.active ) {
						this.locked = !this.locked;
						user.WriteMsg( "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the controls.</span>" );
					} else {
						this.locked = false;
						user.WriteMsg( new Txt( "<span class='warning'>The controls can only be locked when " ).the( this ).item().str( " is online!</span>" ).ToString() );
					}
				} else {
					user.WriteMsg( "<span class='danger'>Access denied.</span>" );
				}
				return null;
			}

			if ( this.default_deconstruction_screwdriver( user, "emitter_open", "emitter", A ) ) {
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( this.default_pry_open( A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: emitter.dm
		public override int? process( dynamic seconds = null ) {
			dynamic A = null;
			EffectSystem_SparkSpread s = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( this.state != 2 || !Lang13.Bool( this.powernet ) && Lang13.Bool( this.active_power_usage ) ) {
				this.active = false;
				this.update_icon();
				return null;
			}

			if ( this.last_shot + this.fire_delay <= Game13.time && this.active ) {
				
				if ( !Lang13.Bool( this.active_power_usage ) || Lang13.Bool( this.avail(  ) ) ) {
					this.add_load( this.active_power_usage );

					if ( !this.v_powered ) {
						this.v_powered = true;
						this.update_icon();
						this.investigate_log( "regained power and turned <font color='green'>on</font>", "singulo" );
					}
				} else {
					
					if ( this.v_powered ) {
						this.v_powered = false;
						this.update_icon();
						this.investigate_log( "lost power and turned <font color='red'>off</font>", "singulo" );
						GlobalFuncs.log_game( "Emitter lost power in (" + this.x + "," + this.y + "," + this.z + ")" );
						GlobalFuncs.message_admins( "Emitter lost power in (" + this.x + "," + this.y + "," + this.z + " - <a href='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)" );
					}
					return null;
				}
				this.last_shot = Game13.time;

				if ( this.shot_number < 3 ) {
					this.fire_delay = 2;
					this.shot_number++;
				} else {
					this.fire_delay = Rand13.Int( ((int)( this.minimum_fire_delay )), ((int)( this.maximum_fire_delay )) );
					this.shot_number = 0;
				}
				A = GlobalFuncs.PoolOrNew( this.projectile_type, this.loc );
				A.dir = this.dir;
				GlobalFuncs.playsound( this.loc, this.projectile_sound, 25, 1 );

				if ( Rand13.PercentChance( 35 ) ) {
					s = new EffectSystem_SparkSpread();
					s.set_up( 5, 1, this );
					s.start();
				}

				switch ((int)( this.dir )) {
					case 1:
						A.yo = 20;
						A.xo = 0;
						break;
					case 4:
						A.yo = 0;
						A.xo = 20;
						break;
					case 8:
						A.yo = 0;
						A.xo = -20;
						break;
					default:
						A.yo = -20;
						A.xo = 0;
						break;
				}
				A.starting = this.loc;
				A.fire();
			}
			return null;
		}

		// Function from file: emitter.dm
		public override double emp_act( int severity = 0 ) {
			return 1;
		}

		// Function from file: emitter.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			this.add_fingerprint( a );

			if ( this.state == 2 ) {
				
				if ( !Lang13.Bool( this.powernet ) ) {
					a.WriteMsg( "<span class='warning'>The emitter isn't connected to a wire!</span>" );
					return 1;
				}

				if ( !this.locked ) {
					
					if ( this.active ) {
						this.active = false;
						a.WriteMsg( new Txt( "<span class='notice'>You turn off " ).the( this ).item().str( ".</span>" ).ToString() );
						GlobalFuncs.message_admins( new Txt( "Emitter turned off by " ).item( GlobalFuncs.key_name_admin( a ) ).str( "(<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( a ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( a ).str( "'>FLW</A>) in (" ).item( this.x ).str( "," ).item( this.y ).str( "," ).item( this.z ).str( " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( this.x ).str( ";Y=" ).item( this.y ).str( ";Z=" ).item( this.z ).str( "'>JMP</a>)" ).ToString() );
						GlobalFuncs.log_game( "Emitter turned off by " + GlobalFuncs.key_name( a ) + " in (" + this.x + "," + this.y + "," + this.z + ")" );
						this.investigate_log( "turned <font color='red'>off</font> by " + GlobalFuncs.key_name( a ), "singulo" );
					} else {
						this.active = true;
						a.WriteMsg( new Txt( "<span class='notice'>You turn on " ).the( this ).item().str( ".</span>" ).ToString() );
						this.shot_number = 0;
						this.fire_delay = this.maximum_fire_delay;
						this.investigate_log( "turned <font color='green'>on</font> by " + GlobalFuncs.key_name( a ), "singulo" );
					}
					this.update_icon();
				} else {
					a.WriteMsg( "<span class='warning'>The controls are locked!</span>" );
				}
			} else {
				a.WriteMsg( "<span class='warning'>The " + this + " needs to be firmly secured to the floor first!</span>" );
				return 1;
			}
			return null;
		}

		// Function from file: emitter.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.active && Lang13.Bool( this.powernet ) && Lang13.Bool( this.avail(  ) ) ) {
				this.icon_state = "emitter_+a";
			} else {
				this.icon_state = "emitter";
			}
			return null;
		}

		// Function from file: emitter.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
				GlobalFuncs.message_admins( "Emitter deleted at (" + this.x + "," + this.y + "," + this.z + " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)" );
				GlobalFuncs.log_game( "Emitter deleted at (" + this.x + "," + this.y + "," + this.z + ")" );
				this.investigate_log( "<font color='red'>deleted</font> at (" + this.x + "," + this.y + "," + this.z + ")", "singulo" );
			}
			return base.Destroy();
		}

		// Function from file: emitter.dm
		public override void initialize(  ) {
			base.initialize();

			if ( this.state == 2 && Lang13.Bool( this.anchored ) ) {
				this.connect_to_network();
			}
			return;
		}

		// Function from file: emitter.dm
		public override bool AltClick( Mob user = null ) {
			base.AltClick( user );

			if ( user.incapacitated() ) {
				user.WriteMsg( "<span class='warning'>You can't do that right now!</span>" );
				return false;
			}

			if ( !( Map13.GetDistance( this, user ) <= 1 ) ) {
				return false;
			} else {
				this.__CallVerb("Rotate" );
			}
			return false;
		}

		// Function from file: emitter.dm
		public override void RefreshParts(  ) {
			double max_firedelay = 0;
			double firedelay = 0;
			double min_firedelay = 0;
			double power_usage = 0;
			Obj_Item_Weapon_StockParts_MicroLaser L = null;
			Obj_Item_Weapon_StockParts_Manipulator M = null;

			max_firedelay = 120;
			firedelay = 120;
			min_firedelay = 24;
			power_usage = 350;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				L = _a;
				
				max_firedelay -= Convert.ToDouble( L.rating * 20 );
				min_firedelay -= Convert.ToDouble( L.rating * 4 );
				firedelay -= Convert.ToDouble( L.rating * 20 );
			}
			this.maximum_fire_delay = max_firedelay;
			this.minimum_fire_delay = min_firedelay;
			this.fire_delay = firedelay;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M = _b;
				
				power_usage -= Convert.ToDouble( M.rating * 50 );
			}
			this.active_power_usage = power_usage;
			return;
		}

		// Function from file: emitter.dm
		[Verb]
		[VerbInfo( name: "Rotate", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotate(  ) {
			
			if ( Task13.User.stat != 0 || !Task13.User.canmove || Task13.User.restrained() ) {
				return false;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				Task13.User.WriteMsg( "<span class='warning'>It is fastened to the floor!</span>" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, 270 );
			return true;
		}

	}

}