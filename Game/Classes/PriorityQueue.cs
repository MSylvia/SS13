// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class PriorityQueue : Game_Data {

		public ByTable L = null;
		public dynamic cmp = null;

		// Function from file: priority_queue.dm
		public PriorityQueue ( dynamic compare = null ) {
			this.L = new ByTable();
			this.cmp = compare;
			return;
		}

		// Function from file: priority_queue.dm
		public void ReSort( dynamic A = null ) {
			int i = 0;

			i = this.Seek( A );

			if ( i == 0 ) {
				return;
			}

			while (i < this.L.len && Convert.ToDouble( Lang13.Call( this.cmp, this.L[i], this.L[i + 1] ) ) > 0) {
				this.L.Swap( i, i + 1 );
				i++;
			}

			while (i > 1 && Convert.ToDouble( Lang13.Call( this.cmp, this.L[i], this.L[i - 1] ) ) <= 0) {
				this.L.Swap( i, i - 1 );
				i--;
			}
			return;
		}

		// Function from file: priority_queue.dm
		public bool Get( int i = 0 ) {
			
			if ( i > this.L.len || i < 1 ) {
				return false;
			}
			return Lang13.Bool( this.L[i] );
		}

		// Function from file: priority_queue.dm
		public int Seek( dynamic A = null ) {
			int _default = 0;

			_default = this.L.Find( A );
			return _default;
		}

		// Function from file: priority_queue.dm
		public ByTable List(  ) {
			ByTable _default = null;

			_default = this.L.Copy();
			return _default;
		}

		// Function from file: priority_queue.dm
		public bool Remove( bool A = false ) {
			return this.L.Remove( A );
		}

		// Function from file: priority_queue.dm
		public bool Dequeue(  ) {
			bool _default = false;

			
			if ( !( this.L.len != 0 ) ) {
				return false;
			}
			_default = Lang13.Bool( this.L[1] );
			this.Remove( _default );
			return _default;
		}

		// Function from file: priority_queue.dm
		public void Enqueue( dynamic A = null ) {
			
			if ( !( this.L.len != 0 ) ) {
				this.L.Add( A );
				return;
			}
			this.L.Insert( this.FindElementIndex( A ), A );
			return;
		}

		// Function from file: priority_queue.dm
		public int FindElementIndex( dynamic A = null ) {
			int i = 0;
			int j = 0;
			int mid = 0;

			i = 1;
			j = this.L.len;

			while (i < j) {
				mid = Num13.Floor( ( i + j ) / 2 );

				if ( Convert.ToDouble( Lang13.Call( this.cmp, this.L[mid], A ) ) < 0 ) {
					i = mid + 1;
				} else {
					j = mid;
				}
			}

			if ( i == 1 || i == this.L.len ) {
				return ( Convert.ToDouble( Lang13.Call( this.cmp, this.L[i], A ) ) > 0 ? i : i + 1 );
			} else {
				return i;
			}
		}

		// Function from file: priority_queue.dm
		public bool IsEmpty(  ) {
			return !( this.L.len != 0 );
		}

	}

}