// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SuitStorageUnit : Obj_Machinery {

		public Ent_Static OCCUPANT = null;
		public dynamic SUIT = null;
		public dynamic HELMET = null;
		public dynamic MASK = null;
		public dynamic STORAGE = null;
		public Type SUIT_TYPE = null;
		public Type HELMET_TYPE = null;
		public Type MASK_TYPE = null;
		public Type STORAGE_TYPE = null;
		public bool isopen = false;
		public bool islocked = false;
		public bool isUV = false;
		public bool ispowered = true;
		public bool isbroken = false;
		public bool issuperUV = false;
		public bool safetieson = true;
		public int cycletime_left = 0;
		public int repair_stage = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/suitstorage.dmi";
			this.icon_state = "close";
		}

		// Function from file: suit_storage_unit.dm
		public Obj_Machinery_SuitStorageUnit ( dynamic loc = null ) : base( (object)(loc) ) {
			this.update_icon();

			if ( this.SUIT_TYPE != null ) {
				this.SUIT = Lang13.Call( this.SUIT_TYPE, this );
			}

			if ( this.HELMET_TYPE != null ) {
				this.HELMET = Lang13.Call( this.HELMET_TYPE, this );
			}

			if ( this.MASK_TYPE != null ) {
				this.MASK = Lang13.Call( this.MASK_TYPE, this );
			}

			if ( this.STORAGE_TYPE != null ) {
				this.STORAGE = Lang13.Call( this.STORAGE_TYPE, this );
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			a.WriteMsg( "<span class='warning'>You don't know how to work this!</span>" );
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic C = null;
			dynamic M = null;
			dynamic G = null;
			dynamic S = null;
			dynamic H = null;
			dynamic M2 = null;
			dynamic ITEM = null;

			
			if ( !this.ispowered ) {
				
				if ( A is Obj_Item_Weapon_Crowbar && !this.isopen ) {
					
					if ( this.toggle_open( user ) ) {
						this.dump_everything();
						user.WriteMsg( "<span class='notice'>You pry open " + this + "'s doors.</span>" );
						this.update_icon();
					}
				}
				return null;
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				this.panel_open = !( this.panel_open == true );
				GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );
				user.WriteMsg( "<span class='notice'>You " + ( this.panel_open == true ? "open up" : "close" ) + " the unit's maintenance panel.</span>" );
				this.updateUsrDialog();
				return null;
			}

			if ( this.isbroken && this.panel_open == true ) {
				
				if ( A is Obj_Item_Weapon_Wirecutters && this.repair_stage == 1 ) {
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " starts removing " + this + "'s damaged wires.</span>", "<span class='notice'>You begin removing the damaged wires from " + this + "...</span>" );
					GlobalFuncs.playsound( this, "sound/items/Wirecutter.ogg", 50, 1 );

					if ( !GlobalFuncs.do_after( user, 30 / A.toolspeed, null, this ) ) {
						return null;
					}
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " removes the damaged wires from " + this + ".</span>", "<spna class='notice'>You remove the damaged wiring from " + this + ".</span>" );
					GlobalFuncs.playsound( this, "sound/items/Deconstruct.ogg", 50, 1 );
					this.repair_stage = 2;
					return null;
				}

				if ( A is Obj_Item_Stack_CableCoil && this.repair_stage == 2 ) {
					C = A;

					if ( Convert.ToDouble( C.amount ) < 5 ) {
						user.WriteMsg( "<span class='warning'>You need at least five cables to rewire " + this + "!</span>" );
						return null;
					}
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " begins replacing " + this + " wires.</span>", "<span class='notice'>You begin rewiring " + this + "...</span>" );
					GlobalFuncs.playsound( this, "sound/items/Deconstruct.ogg", 50, 1 );

					if ( !GlobalFuncs.do_after( user, 30, null, this ) ) {
						return null;
					}
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " adds wires to " + this + ".</span>", "<span class='notice'>You rewire " + this + ".</span>" );
					C.amount -= 5;

					if ( Convert.ToDouble( C.amount ) <= 0 ) {
						user.drop_item();
						GlobalFuncs.qdel( C );
					}
					GlobalFuncs.playsound( this, "sound/items/Deconstruct.ogg", 50, 1 );
					this.repair_stage = 3;
					return null;
				}

				if ( A is Obj_Item_Weapon_Crowbar && this.repair_stage == 3 ) {
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " starts removing " + this + "'s broken interior plating.</span>", "<span class='notice'>You begin removing the damaged interior plating from " + this + "...</span>" );
					GlobalFuncs.playsound( this, "sound/items/Crowbar.ogg", 50, 1 );

					if ( !GlobalFuncs.do_after( user, 30 / A.toolspeed, null, this ) ) {
						return null;
					}
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " removes the damaged interior plating from " + this + ".</span>", "<spna class='notice'>You remove the damaged interior plating from " + this + ".</span>" );
					GlobalFuncs.playsound( this, "sound/items/Deconstruct.ogg", 50, 1 );
					this.repair_stage = 4;
					return null;
				}

				if ( A is Obj_Item_Stack_Sheet_Metal && this.repair_stage == 4 ) {
					M = A;

					if ( Convert.ToDouble( M.amount ) < 3 ) {
						user.WriteMsg( "<span class='warning'>You need at least three sheets of metal to repair " + this + "!</span>" );
						return null;
					}
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " starts adding interior plating to " + this + ".</span>", "<span class='notice'>You begin adding interior plating to " + this + "...</span>" );
					GlobalFuncs.playsound( this, "sound/items/Deconstruct.ogg", 50, 1 );

					if ( !GlobalFuncs.do_after( user, 30, null, this ) ) {
						return null;
					}
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " adds interior plating to " + this + ".</span>", "<spna class='notice'>You add interior plating to " + this + ".</span>" );
					this.fix();
					return null;
				}
			}

			if ( A is Obj_Item_Weapon_Grab ) {
				G = A;
				this.store_mob( G.affecting, user );
				return null;
			}

			if ( A is Obj_Item_Clothing_Suit_Space ) {
				
				if ( !this.isopen || this.isbroken ) {
					return null;
				}
				S = A;

				if ( Lang13.Bool( this.SUIT ) ) {
					user.WriteMsg( "<span class='notice'>The unit already contains a suit.</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					user.WriteMsg( "<span class='warning'>" + S + " is stuck to your hand, you cannot put it in " + this + "!</span>" );
					return null;
				}
				user.WriteMsg( "<span class='notice'>You load " + S + " into the suit storage compartment.</span>" );
				S.loc = this;
				this.SUIT = S;
				this.update_icon();
				this.updateUsrDialog();
				return null;
			}

			if ( A is Obj_Item_Clothing_Head_Helmet ) {
				
				if ( !this.isopen || this.isbroken ) {
					return null;
				}
				H = A;

				if ( Lang13.Bool( this.HELMET ) ) {
					user.WriteMsg( "<span class='warning'>The unit already contains a helmet!</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					user.WriteMsg( "<span class='warning'>" + H + " is stuck to your hand, you cannot put it in the Suit Storage Unit!</span>" );
					return null;
				}
				user.WriteMsg( "<span class='notice'>You load " + H + " into the helmet storage compartment.</span>" );
				H.loc = this;
				this.HELMET = H;
				this.update_icon();
				this.updateUsrDialog();
				return null;
			}

			if ( A is Obj_Item_Clothing_Mask ) {
				
				if ( !this.isopen || this.isbroken ) {
					return null;
				}
				M2 = A;

				if ( Lang13.Bool( this.MASK ) ) {
					user.WriteMsg( "<span class='warning'>The unit already contains a mask!</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					user.WriteMsg( "<span class='warning'>" + M2 + " is stuck to your hand, you cannot put it in the Suit Storage Unit!</span>" );
					return null;
				}
				user.WriteMsg( "<span class='notice'>You load " + M2 + " into the mask storage compartment.</span>" );
				M2.loc = this;
				this.MASK = M2;
				this.update_icon();
				this.updateUsrDialog();
				return null;
			}

			if ( A is Obj_Item ) {
				
				if ( !this.isopen || this.isbroken ) {
					return null;
				}
				ITEM = A;

				if ( Lang13.Bool( this.STORAGE ) ) {
					user.WriteMsg( "<span class='warning'>The auxiliary storage compartment is full!</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					user.WriteMsg( "<span class='warning'>" + ITEM + " is stuck to your hand, you cannot put it in the Suit Storage Unit!</span>" );
					return null;
				}
				user.WriteMsg( "<span class='notice'>You load " + ITEM + " into the auxiliary storage compartment.</span>" );
				ITEM.loc = this;
				this.STORAGE = ITEM;
			}
			this.update_icon();
			this.updateUsrDialog();
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			this.store_mob( O, user );
			return false;
		}

		// Function from file: suit_storage_unit.dm
		public override void container_resist(  ) {
			Mob user = null;
			int breakout_time = 0;

			user = Task13.User;

			if ( this.islocked ) {
				user.changeNext_move( 100 );
				((dynamic)user).last_special = Game13.time + 100;
				breakout_time = 2;
				user.WriteMsg( "<span class='notice'>You start kicking against the doors to escape... (This will take about " + breakout_time + " minutes.)</span>" );
				this.visible_message( new Txt( "You see " ).item( user ).str( " kicking against the doors of " ).the( this ).item().str( "!" ).ToString() );

				if ( GlobalFuncs.do_after( user, breakout_time * 600, null, this ) ) {
					
					if ( !( user != null ) || user.stat != 0 || user.loc != this || this.isopen || !this.islocked ) {
						return;
					} else {
						this.isopen = true;
						this.islocked = false;
						this.visible_message( "<span class='warning'>" + user + " kicks their way out of " + this + "!</span>" );
					}
				} else {
					return;
				}
			}
			this.eject_occupant( user );
			this.add_fingerprint( user );
			this.updateUsrDialog();
			this.update_icon();
			return;
		}

		// Function from file: suit_storage_unit.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			
			if ( user.stat != 0 || !( this.loc is Tile ) ) {
				return false;
			}
			this.container_resist();
			return false;
		}

		// Function from file: suit_storage_unit.dm
		public void fix(  ) {
			this.audible_message( "<span class='notice'>" + this + " beeps and comes back online!</span>" );
			GlobalFuncs.playsound( this, "sound/machines/defib_ready.ogg", 50, 1 );
			this.repair_stage = 0;
			this.isbroken = false;
			this.update_icon();
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void store_mob( Ent_Static M = null, dynamic user = null ) {
			
			if ( !( M is Mob_Living ) ) {
				return;
			}

			if ( Lang13.Bool( user.stat ) != false ) {
				return;
			}

			if ( !this.isopen ) {
				user.WriteMsg( "<span class='warning'>The unit's doors are shut!</span>" );
				return;
			}

			if ( !this.ispowered || this.isbroken ) {
				user.WriteMsg( "<span class='warning'>The unit is not operational!</span>" );
				return;
			}

			if ( this.OCCUPANT != null || Lang13.Bool( this.HELMET ) || Lang13.Bool( this.SUIT ) || Lang13.Bool( this.STORAGE ) ) {
				user.WriteMsg( "<span class='warning'>It's too cluttered inside to fit in!</span>" );
				return;
			}

			if ( M == user ) {
				this.visible_message( "<span class='warning'>" + user + " squeezes into " + this + "!</span>", "<span class='notice'>You squeeze into " + this + ".</span>" );
			} else {
				M.visible_message( "<span class='warning'>" + user + " starts putting " + M + " into " + this + "!</span>", "<span class='userdanger'>" + user + " starts shoving you into " + this + "!</span>" );
			}

			if ( GlobalFuncs.do_mob( user, M, 10 ) ) {
				((Mob)user).stop_pulling();

				if ( Lang13.Bool( ((dynamic)M).client ) ) {
					((dynamic)M).client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
					((dynamic)M).client.eye = this;
				}
				M.loc = this;
				this.OCCUPANT = M;
				this.isopen = false;
				this.update_icon();
				this.add_fingerprint( user );
				this.updateUsrDialog();
				return;
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void eject_occupant( dynamic user = null ) {
			
			if ( this.islocked ) {
				return;
			}

			if ( !( this.OCCUPANT != null ) ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)this.OCCUPANT).client ) ) {
				
				if ( user != this.OCCUPANT ) {
					((dynamic)this.OCCUPANT).WriteMsg( "<span class='warning'>The machine kicks you out!</span>" );
				}

				if ( user.loc != this.loc ) {
					((dynamic)this.OCCUPANT).WriteMsg( "<span class='warning'>You leave the not-so-cozy confines of " + this + ".</span>" );
				}
				((dynamic)this.OCCUPANT).client.eye = ((dynamic)this.OCCUPANT).client.mob;
				((dynamic)this.OCCUPANT).client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
			}

			if ( this.OCCUPANT.loc == this ) {
				this.OCCUPANT.loc = this.loc;
			}
			this.OCCUPANT = null;

			if ( !this.isopen ) {
				this.isopen = true;
			}
			this.update_icon();
			return;
		}

		// Function from file: suit_storage_unit.dm
		public int cycletimeleft(  ) {
			
			if ( this.cycletime_left >= 1 ) {
				this.cycletime_left--;
			}
			return this.cycletime_left;
		}

		// Function from file: suit_storage_unit.dm
		public void start_UV( Mob user = null ) {
			int i = 0;
			int burndamage = 0;
			Obj_Item ITEM = null;

			
			if ( this.isUV || this.isopen ) {
				return;
			}

			if ( this.OCCUPANT != null && this.safetieson ) {
				user.WriteMsg( "<font color='red'><B>WARNING:</B> Biological entity detected in the confines of the unit's storage. Cannot initiate cycle.</font>" );
				return;
			}

			if ( !Lang13.Bool( this.HELMET ) && !Lang13.Bool( this.MASK ) && !Lang13.Bool( this.SUIT ) && !Lang13.Bool( this.STORAGE ) && !( this.OCCUPANT != null ) ) {
				user.WriteMsg( "<font color='red'>Unit storage bays empty. Nothing to disinfect -- Aborting.</font>" );
				return;
			}
			user.WriteMsg( "<span class='notice'>You start the unit's cauterisation cycle.</span>" );
			this.cycletime_left = 20;
			this.isUV = true;

			if ( this.OCCUPANT != null && !this.islocked ) {
				this.islocked = true;
			}
			this.update_icon();
			this.updateUsrDialog();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				i = 0;

				while (i < 4) {
					Task13.Sleep( 50 );

					if ( this.OCCUPANT != null ) {
						burndamage = Rand13.Int( 6, 10 );

						if ( this.issuperUV ) {
							burndamage = Rand13.Int( 28, 35 );
						}

						if ( this.OCCUPANT is Mob_Living_Carbon ) {
							((dynamic)this.OCCUPANT).take_organ_damage( 0, burndamage );
							((dynamic)this.OCCUPANT).emote( "scream" );
						} else {
							((dynamic)this.OCCUPANT).take_organ_damage( burndamage );
						}
					}

					if ( i == 3 ) {
						
						if ( !this.issuperUV ) {
							
							foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
								ITEM = _a;
								
								ITEM.clean_blood();
							}

							if ( this.STORAGE is Obj_Item_Weapon_ReagentContainers_Food ) {
								GlobalFuncs.qdel( this.STORAGE );
							}
						} else {
							this.HELMET = null;
							this.SUIT = null;
							this.MASK = null;
							GlobalFuncs.qdel( this.STORAGE );
							this.visible_message( "<span class='warning'>With a loud whining noise, " + this + "'s door grinds open. A foul cloud of smoke emanates from the chamber.</span>" );
							this.isbroken = true;
							this.isopen = true;
							this.islocked = false;
							this.repair_stage = 1;
							this.eject_occupant( this.OCCUPANT );
						}
						this.isUV = false;
					}
					i++;
				}
				this.update_icon();
				this.updateUsrDialog();
				return;
				return;
			}));
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void toggle_lock( Mob user = null ) {
			
			if ( this.OCCUPANT != null && this.safetieson ) {
				user.WriteMsg( "<span class='warning'>The unit's safety protocols disallow locking when a biological form is detected inside its compartments.</span>" );
				return;
			}

			if ( this.isopen ) {
				return;
			}
			this.islocked = !this.islocked;
			return;
		}

		// Function from file: suit_storage_unit.dm
		public bool toggle_open( dynamic user = null ) {
			
			if ( this.islocked || this.isUV ) {
				user.WriteMsg( "<span class='warning'>You're unable to open unit!</span>" );
				return false;
			}

			if ( this.OCCUPANT != null ) {
				this.eject_occupant( user );
				return true;
			}
			this.isopen = !this.isopen;
			return true;
		}

		// Function from file: suit_storage_unit.dm
		public void dump_everything(  ) {
			Obj_Item ITEM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				ITEM = _a;
				
				this.eject( ITEM );
			}
			this.SUIT = null;
			this.HELMET = null;
			this.MASK = null;
			this.STORAGE = null;

			if ( this.OCCUPANT != null ) {
				this.eject_occupant( this.OCCUPANT );
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void eject( dynamic ITEM = null ) {
			
			if ( Lang13.Bool( ITEM ) ) {
				ITEM.loc = this.loc;
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void eject_storage(  ) {
			this.eject( this.STORAGE );
			this.STORAGE = null;
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void dispense_mask(  ) {
			this.eject( this.MASK );
			this.MASK = null;
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void dispense_suit(  ) {
			this.eject( this.SUIT );
			this.SUIT = null;
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void dispense_helmet(  ) {
			this.eject( this.HELMET );
			this.HELMET = null;
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void togglesafeties( Mob user = null ) {
			
			if ( !( this.panel_open == true ) ) {
				return;
			} else {
				user.WriteMsg( "<span class='notice'>You push the button. The coloured LED next to it changes.</span>" );
				this.safetieson = !this.safetieson;
			}
			return;
		}

		// Function from file: suit_storage_unit.dm
		public void toggleUV( Mob user = null ) {
			
			if ( !( this.panel_open == true ) ) {
				return;
			} else {
				
				if ( this.issuperUV ) {
					user.WriteMsg( "<span class='notice'>You slide the dial back towards \"185nm\".</span>" );
					this.issuperUV = false;
				} else {
					user.WriteMsg( "<span class='notice'>You crank the dial all the way up to \"15nm\".</span>" );
					this.issuperUV = true;
				}
				return;
			}
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Task13.User == this.OCCUPANT ) {
				return null;
			}

			if ( Task13.User.contents.Find( this ) != 0 || Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile || Task13.User is Mob_Living_Silicon_Ai ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["toggleUV"] ) ) {
					this.toggleUV( Task13.User );
				}

				if ( Lang13.Bool( href_list["togglesafeties"] ) ) {
					this.togglesafeties( Task13.User );
				}

				if ( Lang13.Bool( href_list["dispense_helmet"] ) ) {
					this.dispense_helmet(  );
				}

				if ( Lang13.Bool( href_list["dispense_suit"] ) ) {
					this.dispense_suit(  );
				}

				if ( Lang13.Bool( href_list["dispense_mask"] ) ) {
					this.dispense_mask(  );
				}

				if ( Lang13.Bool( href_list["eject_storage"] ) ) {
					this.eject_storage(  );
				}

				if ( Lang13.Bool( href_list["toggle_open"] ) ) {
					this.toggle_open( Task13.User );
				}

				if ( Lang13.Bool( href_list["toggle_lock"] ) ) {
					this.toggle_lock( Task13.User );
				}

				if ( Lang13.Bool( href_list["start_UV"] ) ) {
					this.start_UV( Task13.User );
				}

				if ( Lang13.Bool( href_list["eject_guy"] ) ) {
					this.eject_occupant( Task13.User );
				}
				this.updateUsrDialog();
				this.update_icon();
			}
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic dat = null;
			Browser popup = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}

			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( this.panel_open == true ) {
				dat += "<HEAD><TITLE>Suit storage unit: Maintenance panel</TITLE></HEAD>";
				dat += "<B>Maintenance panel controls</B><HR>";
				dat += "The panel is ridden with controls, button and meters, labeled in strange signs and symbols that you cannot understand; probably the manufacturing world's language. Among other things, a few controls catch your eye...<BR><BR>";
				dat += new Txt( "A small dial with a \"Ã«\" symbol embroidded on it. It's pointing towards a gauge that reads " ).item( ( this.issuperUV ? "15nm" : "185nm" ) ).str( ".<BR> <A href='?src=" ).Ref( this ).str( ";toggleUV=1'>Turn towards " ).item( ( this.issuperUV ? "185nm" : "15nm" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "A thick old-style button, with 2 grimy LED lights next to it. The " ).item( ( this.safetieson ? "<font color='green'><B>GREEN</B></font>" : "<font color='red'><B>RED</B></font>" ) ).str( " LED is on.<BR><A href='?src=" ).Ref( this ).str( ";togglesafeties=1'>Press button</a>" ).ToString();
				dat += new Txt( "<HR><BR><A href='?src=" ).Ref( a ).str( ";mach_close=suit_storage_unit'>Close panel</A>" ).ToString();
			} else if ( this.isUV ) {
				dat += "<HEAD><TITLE>Suit storage unit</TITLE></HEAD>";
				dat += "<font color ='red'><B>Unit is cauterising contents with selected UV ray intensity. Please wait.</font></B><BR>";
			} else if ( !this.isbroken ) {
				dat += "<HEAD><TITLE>Suit storage unit</TITLE></HEAD>";
				dat += "<font size = 4><B>U-Stor-It Suit Storage Unit, model DS1900</B></FONT><BR>";
				dat += "<B>Welcome to the Unit control panel.</B><HR>";
				dat += "Helmet storage compartment: <B>" + ( Lang13.Bool( this.HELMET ) ? this.HELMET.name : "<font color ='grey'>No helmet detected.</font>" ) + "</B><BR>";

				if ( Lang13.Bool( this.HELMET ) && this.isopen ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";dispense_helmet=1'>Dispense helmet</A><BR>" ).ToString();
				}
				dat += "Suit storage compartment: <B>" + ( Lang13.Bool( this.SUIT ) ? this.SUIT.name : "<font color ='grey'>No exosuit detected.</font>" ) + "</B><BR>";

				if ( Lang13.Bool( this.SUIT ) && this.isopen ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";dispense_suit=1'>Dispense suit</A><BR>" ).ToString();
				}
				dat += "Breathmask storage compartment: <B>" + ( Lang13.Bool( this.MASK ) ? this.MASK.name : "<font color ='grey'>No breathmask detected.</font>" ) + "</B><BR>";

				if ( Lang13.Bool( this.MASK ) && this.isopen ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";dispense_mask=1'>Dispense mask</A><BR>" ).ToString();
				}
				dat += "Auxiliary storage compartment: <B>" + ( Lang13.Bool( this.STORAGE ) ? this.STORAGE.name : "<font color ='grey'>Contents empty.</font>" ) + "</B><BR>";

				if ( Lang13.Bool( this.STORAGE ) && this.isopen ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";eject_storage=1'>Eject contents</A><BR>" ).ToString();
				}

				if ( this.OCCUPANT != null ) {
					dat += "<HR><B><font color ='red'>WARNING: Biological entity detected inside the Unit's storage. Please remove.</B></font><BR>";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";eject_guy=1'>Eject extra load</A>" ).ToString();
				}
				dat += new Txt( "<HR>Unit is: " ).item( ( this.isopen ? "Open" : "Closed" ) ).str( " - <A href='?src=" ).Ref( this ).str( ";toggle_open=1'>" ).item( ( this.isopen ? "Close" : "Open" ) ).str( " Unit</A> " ).ToString();

				if ( this.isopen ) {
					dat += "<HR>";
				} else {
					dat += new Txt( " - <A href='?src=" ).Ref( this ).str( ";toggle_lock=1'><font color ='orange'>*" ).item( ( this.islocked ? "Unlock" : "Lock" ) ).str( " Unit*</A></font><HR>" ).ToString();
				}
				dat += "Unit status: " + ( this.islocked ? "<font color ='red'><B>**LOCKED**</B></font><BR>" : "<font color ='green'><B>**UNLOCKED**</B></font><BR>" );
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";start_UV=1'>Start Disinfection cycle</A><BR>" ).ToString();
				dat += new Txt( "<BR><BR><A href='?src=" ).Ref( a ).str( ";mach_close=suit_storage_unit'>Close control panel</A>" ).ToString();
			} else {
				dat += "<HEAD><TITLE>Suit storage unit</TITLE></HEAD>";
				dat += "<B>Unit chamber is too contaminated to continue usage. Please call for a qualified individual to perform maintenance.</B><BR><BR>";
				dat += new Txt( "<HR><A href='?src=" ).Ref( a ).str( ";mach_close=suit_storage_unit'>Close control panel</A>" ).ToString();
			}
			popup = new Browser( a, "suit_storage_unit", "Suit Storage Unit", 440, 500 );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.dump_everything();
					}
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.dump_everything();
						GlobalFuncs.qdel( this );
					}
					return false;
					break;
				default:
					return false;
					break;
			}
			return false;
		}

		// Function from file: suit_storage_unit.dm
		public override void power_change(  ) {
			base.power_change();
			this.ispowered = !( ( this.stat & 2 ) != 0 );

			if ( ( this.stat & 2 ) != 0 && this.isopen ) {
				this.dump_everything();
			}
			this.update_icon();
			return;
		}

		// Function from file: suit_storage_unit.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays = 0;

			if ( !this.isopen ) {
				this.overlays.Add( "close" );
			}

			if ( this.OCCUPANT != null ) {
				this.overlays.Add( "human" );
			}

			if ( this.OCCUPANT != null && this.isUV ) {
				this.overlays.Add( "uvhuman" );
			}

			if ( this.isUV ) {
				this.overlays.Add( "uv" );
			}

			if ( this.issuperUV && this.isUV ) {
				this.overlays.Add( "super" );
			}

			if ( this.isopen ) {
				this.overlays.Add( "open" );

				if ( Lang13.Bool( this.SUIT ) ) {
					this.overlays.Add( "suit" );
				}

				if ( Lang13.Bool( this.HELMET ) ) {
					this.overlays.Add( "helm" );
				}

				if ( Lang13.Bool( this.STORAGE ) ) {
					this.overlays.Add( "storage" );
				}

				if ( this.isbroken ) {
					this.overlays.Add( "broken" );
				}
			}
			return null;
		}

		// Function from file: suit_storage_unit.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.isbroken && this.isopen ) {
				
				if ( !( this.panel_open == true ) ) {
					user.WriteMsg( "<span class='warning'>A small LED above the maintenance panel is flashing red.</span>" );
					return 0;
				}

				switch ((int)( this.repair_stage )) {
					case 1:
						user.WriteMsg( "<span class='warning'>The wires inside are charred and snapped.</span>" );
						break;
					case 2:
						user.WriteMsg( "<span class='warning'>There are no wires inside.</span>" );
						break;
					case 3:
						user.WriteMsg( "<span class='warning'>Some of the interior metal is burnt and broken.</span>" );
						break;
					case 4:
						user.WriteMsg( "<span class='warning'>It lacks interior plating.</span>" );
						break;
				}
			}
			return 0;
		}

	}

}