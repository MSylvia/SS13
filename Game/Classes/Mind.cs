// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mind : Game_Data {

		public string key = null;
		public dynamic name = null;
		public dynamic current = null;
		public bool active = false;
		public string memory = null;
		public dynamic attack_log = null;
		public dynamic assigned_role = null;
		public string special_role = null;
		public ByTable restricted_roles = new ByTable();
		public dynamic assigned_job = null;
		public ByTable objectives = new ByTable();
		public ByTable special_verbs = new ByTable();
		public ByTable spell_list = new ByTable();
		public dynamic faction = null;
		public Changeling changeling = null;
		public bool miming = false;
		public string antag_hud_icon_state = null;
		public AtomHud_Antag antag_hud = null;
		public dynamic gang_datum = null;

		// Function from file: mind.dm
		public Mind ( string key = null ) {
			this.key = key;
			return;
		}

		// Function from file: mind.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic new_role = null;
			string new_memo = null;
			dynamic objective = null;
			int objective_pos = 0;
			Type def_value = null;
			dynamic new_obj_type = null;
			dynamic new_objective = null;
			string expl = null;
			dynamic objective2 = null;
			dynamic objective3 = null;
			dynamic valid_head = null;
			Objective_Mutiny O = null;
			Objective_Mutiny rev_obj = null;
			ByTable L = null;
			dynamic flash = null;
			ByTable L2 = null;
			dynamic flash2 = null;
			ByTable L3 = null;
			Obj_Item_Weapon_Pen_Gang pen = null;
			Obj_Item_Device_Gangtool gangtool = null;
			Obj_Item_Toy_Crayon_Spraycan_Gang SC = null;
			ByTable names = null;
			dynamic gangname = null;
			Gang newgang = null;
			dynamic G = null;
			dynamic G2 = null;
			dynamic C = null;
			dynamic H = null;
			dynamic code = null;
			Obj_Machinery_Nuclearbomb bombue = null;
			dynamic A = null;
			string gear = null;
			GameMode_Abduction temp = null;
			dynamic L4 = null;
			dynamic H2 = null;
			dynamic M = null;
			Disease D = null;
			dynamic H3 = null;
			dynamic M2 = null;
			dynamic H4 = null;
			dynamic M3 = null;
			Disease D2 = null;
			dynamic R = null;
			dynamic ai = null;
			Mob_Living_Silicon_Robot R2 = null;
			Obj_Item W = null;
			Obj_Item_Device_Uplink_Hidden suplink = null;
			dynamic crystals = null;
			int obj_count = 0;
			Objective objective4 = null;

			
			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["role_edit"] ) ) {
				new_role = Interface13.Input( "Select new role", "Assigned role", this.assigned_role, null, GlobalFuncs.get_all_jobs(), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( new_role ) ) {
					return null;
				}
				this.assigned_role = new_role;
			} else if ( Lang13.Bool( href_list["memory_edit"] ) ) {
				new_memo = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Write new memory", "Memory", this.memory, null, null, InputType.Null | InputType.StrMultiline ) ), 1, 1024 );

				if ( new_memo == null ) {
					return null;
				}
				this.memory = new_memo;
			} else if ( Lang13.Bool( href_list["obj_edit"] ) || Lang13.Bool( href_list["obj_add"] ) ) {
				
				if ( Lang13.Bool( href_list["obj_edit"] ) ) {
					objective = Lang13.FindObj( href_list["obj_edit"] );

					if ( !Lang13.Bool( objective ) ) {
						return null;
					}
					def_value = objective.type;
				}
				new_obj_type = Interface13.Input( "Select objective type:", "Objective type", def_value, null, Lang13.GetTypes( typeof(Objective) ) - new ByTable(new object [] { typeof(Objective), typeof(Objective_Default), typeof(Objective_EscapeObj), typeof(Objective_ChangelingTeamObjective) }), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( new_obj_type ) ) {
					return null;
				}

				if ( Lang13.Initial( new_obj_type, "required_role" ) != this.special_role && Lang13.Initial( new_obj_type, "required_role" ) != null ) {
					
					if ( Interface13.Alert( "The objective requires a special_role that this mind does not have. The player may not be able to complete the objective. Are you sure you want to continue?", "uh oh", "Yes", "No" ) == "No" ) {
						return null;
					}
				}
				new_objective = GlobalFuncs.add_objective( this, new_obj_type );

				if ( new_objective is Objective_Custom ) {
					expl = GlobalFuncs.stripped_input( Task13.User, "Custom objective:", "Objective", ( Lang13.Bool( objective ) ? objective.explanation_text : ((dynamic)( "" )) ) );

					if ( !Lang13.Bool( expl ) ) {
						GlobalFuncs.qdel( new_objective );
						return null;
					}
					new_objective.explanation_text = expl;
				}

				if ( !Lang13.Bool( new_objective ) ) {
					Task13.User.WriteMsg( Lang13.Initial( new_obj_type, "error_text" ) );
					return null;
				}

				if ( Lang13.Bool( objective ) ) {
					this.objectives.Remove( objective );
					this.objectives.Insert( objective_pos, new_objective );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " edited " + this.current + "'s objective to " + new_objective.explanation_text );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " edited " + this.current + "'s objective to " + new_objective.explanation_text );
				} else {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " added a new objective for " + this.current + ": " + new_objective.explanation_text );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " added a new objective for " + this.current + ": " + new_objective.explanation_text );
				}
			} else if ( Lang13.Bool( href_list["obj_delete"] ) ) {
				objective2 = Lang13.FindObj( href_list["obj_delete"] );

				if ( !( objective2 is Objective ) ) {
					return null;
				}
				this.objectives.Remove( objective2 );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " removed an objective for " + this.current + ": " + objective2.explanation_text );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed an objective for " + this.current + ": " + objective2.explanation_text );
			} else if ( Lang13.Bool( href_list["obj_completed"] ) ) {
				objective3 = Lang13.FindObj( href_list["obj_completed"] );

				if ( !( objective3 is Objective ) ) {
					return null;
				}
				objective3.completed = !objective3.completed;
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled the win state for " + this.current + "'s objective: " + objective3.explanation_text );
			} else if ( Lang13.Bool( href_list["handofgod"] ) ) {
				
				dynamic _a = href_list["handofgod"]; // Was a switch-case, sorry for the mess.
				if ( _a=="clear" ) {
					
					if ( GlobalVars.ticker.mode.red_deity_followers.Contains( this ) || GlobalVars.ticker.mode.blue_deity_followers.Contains( this ) || GlobalVars.ticker.mode.red_deity_prophets.Contains( this ) || GlobalVars.ticker.mode.blue_deity_prophets.Contains( this ) ) {
						this.remove_hog_follower_prophet();
						this.current.WriteMsg( "<span class='danger'><B>You have been brainwashed... again! Your faith is no more!</B></span>" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-hand of god'ed " + this.current + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-hand of god'ed " + this.current + "." );
					}
				} else if ( _a=="red follower" ) {
					this.make_Handofgod_follower( "red" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has red follower'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has red follower'ed " + this.current + "." );
				} else if ( _a=="red prophet" ) {
					this.make_Handofgod_prophet( "red" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has red prophet'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has red prophet'ed " + this.current + "." );
				} else if ( _a=="blue follower" ) {
					this.make_Handofgod_follower( "blue" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has blue follower'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has blue follower'ed " + this.current + "." );
				} else if ( _a=="blue prophet" ) {
					this.make_Handofgod_prophet( "blue" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has blue prophet'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has blue prophet'ed " + this.current + "." );
				} else if ( _a=="red god" ) {
					this.make_Handofgod_god( "red" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has red god'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has red god'ed " + this.current + "." );
				} else if ( _a=="blue god" ) {
					this.make_Handofgod_god( "blue" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has blue god'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has blue god'ed " + this.current + "." );
				}
			} else if ( Lang13.Bool( href_list["revolution"] ) ) {
				
				dynamic _c = href_list["revolution"]; // Was a switch-case, sorry for the mess.
				if ( _c=="clear" ) {
					this.remove_rev();
					this.current.WriteMsg( "<span class='userdanger'>You have been brainwashed! You are no longer a revolutionary!</span>" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-rev'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-rev'ed " + this.current + "." );
				} else if ( _c=="rev" ) {
					
					if ( GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) ) {
						GlobalVars.ticker.mode.head_revolutionaries.Remove( this );
						((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( this );
						this.current.WriteMsg( "<span class='userdanger'>Revolution has been disappointed of your leader traits! You are a regular revolutionary now!</span>" );
					} else if ( !GlobalVars.ticker.mode.revolutionaries.Contains( this ) ) {
						this.current.WriteMsg( "<span class='danger'><FONT size = 3> You are now a revolutionary! Help your cause. Do not harm your fellow freedom fighters. You can identify your comrades by the red \"R\" icons, and your leaders by the blue \"R\" icons. Help them kill the heads to win the revolution!</FONT></span>" );
					} else {
						return null;
					}
					GlobalVars.ticker.mode.revolutionaries.Add( this );
					((GameMode)GlobalVars.ticker.mode).update_rev_icons_added( this );
					this.special_role = "Revolutionary";
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has rev'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has rev'ed " + this.current + "." );
				} else if ( _c=="headrev" ) {
					
					if ( GlobalVars.ticker.mode.revolutionaries.Contains( this ) ) {
						GlobalVars.ticker.mode.revolutionaries.Remove( this );
						((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( this );
						this.current.WriteMsg( "<span class='userdanger'>You have proved your devotion to revoltion! Yea are a head revolutionary now!</span>" );
					} else if ( !GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) ) {
						this.current.WriteMsg( "<span class='userdanger'>You are a member of the revolutionaries' leadership now!</span>" );
					} else {
						return null;
					}

					if ( GlobalVars.ticker.mode.head_revolutionaries.len > 0 ) {
						valid_head = Lang13.FindIn( typeof(Mind), GlobalVars.ticker.mode.head_revolutionaries );

						if ( Lang13.Bool( valid_head ) ) {
							
							foreach (dynamic _b in Lang13.Enumerate( valid_head.objectives, typeof(Objective_Mutiny) )) {
								O = _b;
								
								rev_obj = new Objective_Mutiny();
								rev_obj.owner = this;
								rev_obj.target = O.target;
								rev_obj.explanation_text = "Assassinate " + O.target.name + ", the " + O.target.assigned_role + ".";
								this.objectives.Add( rev_obj );
							}
							((GameMode)GlobalVars.ticker.mode).greet_revolutionary( this, false );
						}
					}
					GlobalVars.ticker.mode.head_revolutionaries.Add( this );
					((GameMode)GlobalVars.ticker.mode).update_rev_icons_added( this );
					this.special_role = "Head Revolutionary";
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has head-rev'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has head-rev'ed " + this.current + "." );
				} else if ( _c=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_revolutionary_objectives( this );
					((GameMode)GlobalVars.ticker.mode).greet_revolutionary( this, false );
					Task13.User.WriteMsg( "<span class='notice'>The objectives for revolution have been generated and shown to " + this.key + "</span>" );
				} else if ( _c=="flash" ) {
					
					if ( !((GameMode)GlobalVars.ticker.mode).equip_revolutionary( this.current ) ) {
						Task13.User.WriteMsg( "<span class='danger'>Spawning flash failed!</span>" );
					}
				} else if ( _c=="takeflash" ) {
					L = ((Mob)this.current).get_contents();
					flash = Lang13.FindIn( typeof(Obj_Item_Device_Assembly_Flash), L );

					if ( !Lang13.Bool( flash ) ) {
						Task13.User.WriteMsg( "<span class='danger'>Deleting flash failed!</span>" );
					}
					GlobalFuncs.qdel( flash );
				} else if ( _c=="repairflash" ) {
					L2 = ((Mob)this.current).get_contents();
					flash2 = Lang13.FindIn( typeof(Obj_Item_Device_Assembly_Flash), L2 );

					if ( !Lang13.Bool( flash2 ) ) {
						Task13.User.WriteMsg( "<span class='danger'>Repairing flash failed!</span>" );
					} else {
						flash2.crit_fail = false;
						flash2.update_icon();
					}
				}
			} else if ( Lang13.Bool( href_list["gang"] ) ) {
				
				dynamic _h = href_list["gang"]; // Was a switch-case, sorry for the mess.
				if ( _h=="clear" ) {
					this.remove_gang();
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-gang'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-gang'ed " + this.current + "." );
				} else if ( _h=="equip" ) {
					
					switch ((int)( ((GameMode)GlobalVars.ticker.mode).equip_gang( this.current, this.gang_datum ) )) {
						case 1:
							Task13.User.WriteMsg( "<span class='warning'>Unable to equip territory spraycan!</span>" );
							break;
						case 2:
							Task13.User.WriteMsg( "<span class='warning'>Unable to equip recruitment pen and spraycan!</span>" );
							break;
						case 3:
							Task13.User.WriteMsg( "<span class='warning'>Unable to equip gangtool, pen, and spraycan!</span>" );
							break;
					}
				} else if ( _h=="takeequip" ) {
					L3 = ((Mob)this.current).get_contents();

					foreach (dynamic _e in Lang13.Enumerate( L3, typeof(Obj_Item_Weapon_Pen_Gang) )) {
						pen = _e;
						
						GlobalFuncs.qdel( pen );
					}

					foreach (dynamic _f in Lang13.Enumerate( L3, typeof(Obj_Item_Device_Gangtool) )) {
						gangtool = _f;
						
						GlobalFuncs.qdel( gangtool );
					}

					foreach (dynamic _g in Lang13.Enumerate( L3, typeof(Obj_Item_Toy_Crayon_Spraycan_Gang) )) {
						SC = _g;
						
						GlobalFuncs.qdel( SC );
					}
				} else if ( _h=="new" ) {
					
					if ( GlobalVars.gang_colors_pool.len != 0 ) {
						names = new ByTable(new object [] { "Random" }) + GlobalVars.gang_name_pool;
						gangname = Interface13.Input( "Pick a gang name.", "Select Name", null, null, names, InputType.Null | InputType.Any );

						if ( Lang13.Bool( gangname ) && GlobalVars.gang_colors_pool.len != 0 ) {
							
							if ( !GlobalVars.gang_name_pool.Contains( gangname ) ) {
								gangname = null;
							}
							newgang = new Gang( null, gangname );
							GlobalVars.ticker.mode.gangs.Add( newgang );
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has created the " + newgang.name + " Gang." );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has created the " + newgang.name + " Gang." );
						}
					}
				}
			} else if ( Lang13.Bool( href_list["gangboss"] ) ) {
				G = Lang13.FindIn( href_list["gangboss"], GlobalVars.ticker.mode.gangs );

				if ( !Lang13.Bool( G ) || G.bosses.Contains( this ) ) {
					return null;
				}
				((GameMode)GlobalVars.ticker.mode).remove_gangster( this, false, 2, true );
				G.bosses.Add( this );
				this.gang_datum = G;
				this.special_role = "" + G.name + " Gang Boss";
				((Gang)G).add_gang_hud( this );
				this.current.WriteMsg( "<FONT size=3 color=red><B>You are a " + G.name + " Gang Boss!</B></FONT>" );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has added " + this.current + " to the " + G.name + " Gang leadership." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has added " + this.current + " to the " + G.name + " Gang leadership." );
				((GameMode)GlobalVars.ticker.mode).forge_gang_objectives( this );
				((GameMode)GlobalVars.ticker.mode).greet_gang( this, false );
			} else if ( Lang13.Bool( href_list["gangster"] ) ) {
				G2 = Lang13.FindIn( href_list["gangster"], GlobalVars.ticker.mode.gangs );

				if ( !Lang13.Bool( G2 ) || G2.gangsters.Contains( this ) ) {
					return null;
				}
				((GameMode)GlobalVars.ticker.mode).remove_gangster( this, false, 2, true );
				((GameMode)GlobalVars.ticker.mode).add_gangster( this, G2, false );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has added " + this.current + " to the " + G2.name + " Gang (A)." );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has added " + this.current + " to the " + G2.name + " Gang (A)." );
			} else if ( Lang13.Bool( href_list["cult"] ) ) {
				
				dynamic _i = href_list["cult"]; // Was a switch-case, sorry for the mess.
				if ( _i=="clear" ) {
					this.remove_cultist();
					this.current.WriteMsg( "<span class='userdanger'>You have been brainwashed! You are no longer a cultist!</span>" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-cult'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-cult'ed " + this.current + "." );
				} else if ( _i=="cultist" ) {
					
					if ( !GlobalVars.ticker.mode.cult.Contains( this ) ) {
						((GameMode)GlobalVars.ticker.mode).add_cultist( this );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has cult'ed " + this.current + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has cult'ed " + this.current + "." );
					}
				} else if ( _i=="equip" ) {
					
					if ( !Lang13.Bool( ((GameMode)GlobalVars.ticker.mode).equip_cultist( this.current ) ) ) {
						Task13.User.WriteMsg( "equip_cultist() failed! " + this.current + "'s starting equipment will be incomplete.</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["wizard"] ) ) {
				
				dynamic _j = href_list["wizard"]; // Was a switch-case, sorry for the mess.
				if ( _j=="clear" ) {
					this.remove_wizard();
					this.current.WriteMsg( "<span class='userdanger'>You have been brainwashed! You are no longer a wizard!</span>" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-wizard'ed " + this.current + "." );
				} else if ( _j=="wizard" ) {
					
					if ( !GlobalVars.ticker.mode.wizards.Contains( this ) ) {
						GlobalVars.ticker.mode.wizards.Add( this );
						this.special_role = "Wizard";
						this.current.WriteMsg( "<span class='boldannounce'>You are the Space Wizard!</span>" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has wizard'ed " + this.current + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has wizard'ed " + this.current + "." );
					}
				} else if ( _j=="lair" ) {
					this.current.loc = Rand13.PickFromTable( GlobalVars.wizardstart );
				} else if ( _j=="dressup" ) {
					((GameMode)GlobalVars.ticker.mode).equip_wizard( this.current );
				} else if ( _j=="name" ) {
					((GameMode)GlobalVars.ticker.mode).name_wizard( this.current );
				} else if ( _j=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_wizard_objectives( this );
					Task13.User.WriteMsg( "<span class='notice'>The objectives for wizard " + this.key + " have been generated. You can edit them and anounce manually.</span>" );
				}
			} else if ( Lang13.Bool( href_list["changeling"] ) ) {
				
				dynamic _k = href_list["changeling"]; // Was a switch-case, sorry for the mess.
				if ( _k=="clear" ) {
					this.remove_changeling();
					this.current.WriteMsg( "<span class='userdanger'>You grow weak and lose your powers! You are no longer a changeling and are stuck in your current form!</span>" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-changeling'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-changeling'ed " + this.current + "." );
				} else if ( _k=="changeling" ) {
					
					if ( !GlobalVars.ticker.mode.changelings.Contains( this ) ) {
						GlobalVars.ticker.mode.changelings.Add( this );
						((Mob)this.current).make_changeling();
						this.special_role = "Changeling";
						this.current.WriteMsg( "<span class='boldannounce'>Your powers are awoken. A flash of memory returns to us...we are " + this.changeling.changelingID + ", a changeling!</span>" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has changeling'ed " + this.current + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has changeling'ed " + this.current + "." );
					}
				} else if ( _k=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_changeling_objectives( this );
					Task13.User.WriteMsg( "<span class='notice'>The objectives for changeling " + this.key + " have been generated. You can edit them and anounce manually.</span>" );
				} else if ( _k=="initialdna" ) {
					
					if ( !( this.changeling != null ) || !( this.changeling.stored_profiles.len != 0 ) || !( this.current is Mob_Living_Carbon ) ) {
						Task13.User.WriteMsg( "<span class='danger'>Resetting DNA failed!</span>" );
					} else {
						C = this.current;
						new ByTable().Set( 1, C ).Set( "transfer_SE", 1 ).Apply( Lang13.BindFunc( this.changeling.first_prof.dna, "transfer_identity" ) );
						C.real_name = this.changeling.first_prof.name;
						((Mob_Living_Carbon)C).updateappearance( null, true );
						((Mob)C).domutcheck();
					}
				}
			} else if ( Lang13.Bool( href_list["nuclear"] ) ) {
				
				dynamic _m = href_list["nuclear"]; // Was a switch-case, sorry for the mess.
				if ( _m=="clear" ) {
					this.remove_nukeop();
					this.current.WriteMsg( "<span class='userdanger'>You have been brainwashed! You are no longer a syndicate operative!</span>" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-nuke op'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-nuke op'ed " + this.current + "." );
				} else if ( _m=="nuclear" ) {
					
					if ( !GlobalVars.ticker.mode.syndicates.Contains( this ) ) {
						GlobalVars.ticker.mode.syndicates.Add( this );
						((GameMode)GlobalVars.ticker.mode).update_synd_icons_added( this );

						if ( GlobalVars.ticker.mode.syndicates.len == 1 ) {
							((GameMode)GlobalVars.ticker.mode).prepare_syndicate_leader( this );
						} else {
							this.current.real_name = "" + GlobalFuncs.syndicate_name() + " Operative #" + ( GlobalVars.ticker.mode.syndicates.len - 1 );
						}
						this.special_role = "Syndicate";
						this.assigned_role = "Syndicate";
						this.current.WriteMsg( "<span class='notice'>You are a " + GlobalFuncs.syndicate_name() + " agent!</span>" );
						((GameMode)GlobalVars.ticker.mode).forge_syndicate_objectives( this );
						((GameMode)GlobalVars.ticker.mode).greet_syndicate( this );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has nuke op'ed " + this.current + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has nuke op'ed " + this.current + "." );
					}
				} else if ( _m=="lair" ) {
					this.current.loc = GlobalFuncs.get_turf( Lang13.FindObj( "landmark*Syndicate-Spawn" ) );
				} else if ( _m=="dressup" ) {
					H = this.current;
					GlobalFuncs.qdel( H.belt );
					GlobalFuncs.qdel( H.back );
					GlobalFuncs.qdel( H.ears );
					GlobalFuncs.qdel( H.gloves );
					GlobalFuncs.qdel( H.head );
					GlobalFuncs.qdel( H.shoes );
					GlobalFuncs.qdel( H.wear_id );
					GlobalFuncs.qdel( H.wear_suit );
					GlobalFuncs.qdel( H.w_uniform );

					if ( !((GameMode)GlobalVars.ticker.mode).equip_syndicate( this.current ) ) {
						Task13.User.WriteMsg( "<span class='danger'>Equipping a syndicate failed!</span>" );
					}
				} else if ( _m=="tellcode" ) {
					code = null;

					foreach (dynamic _l in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
						bombue = _l;
						

						if ( Lang13.Length( bombue.r_code ) <= 5 && bombue.r_code != "LOLNO" && bombue.r_code != "ADMIN" ) {
							code = bombue.r_code;
							break;
						}
					}

					if ( Lang13.Bool( code ) ) {
						this.store_memory( "<B>Syndicate Nuclear Bomb Code</B>: " + code );
						this.current.WriteMsg( "The nuclear authorization code is: <B>" + code + "</B>" );
					} else {
						Task13.User.WriteMsg( "<span class='danger'>No valid nuke found!</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["traitor"] ) ) {
				
				dynamic _n = href_list["traitor"]; // Was a switch-case, sorry for the mess.
				if ( _n=="clear" ) {
					this.remove_traitor();
					this.current.WriteMsg( "<span class='userdanger'>You have been brainwashed! You are no longer a traitor!</span>" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-traitor'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-traitor'ed " + this.current + "." );
				} else if ( _n=="traitor" ) {
					
					if ( !GlobalVars.ticker.mode.traitors.Contains( this ) ) {
						GlobalVars.ticker.mode.traitors.Add( this );
						this.special_role = "traitor";
						this.current.WriteMsg( "<span class='boldannounce'>You are a traitor!</span>" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has traitor'ed " + this.current + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has traitor'ed " + this.current + "." );

						if ( this.current is Mob_Living_Silicon_Ai ) {
							A = this.current;
							((GameMode)GlobalVars.ticker.mode).add_law_zero( A );
							A.show_laws();
						}
					}
				} else if ( _n=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_traitor_objectives( this );
					Task13.User.WriteMsg( "<span class='notice'>The objectives for traitor " + this.key + " have been generated. You can edit them and anounce manually.</span>" );
				}
			} else if ( Lang13.Bool( href_list["shadowling"] ) ) {
				
				dynamic _o = href_list["shadowling"]; // Was a switch-case, sorry for the mess.
				if ( _o=="clear" ) {
					((GameMode)GlobalVars.ticker.mode).update_shadow_icons_removed( this );

					if ( GlobalVars.ticker.mode.shadows.Contains( this ) ) {
						GlobalVars.ticker.mode.shadows.Remove( this );
						this.special_role = null;
						this.current.WriteMsg( "<span class='userdanger'>Your powers have been quenched! You are no longer a shadowling!</span>" );
						this.remove_spell( typeof(Obj_Effect_ProcHolder_Spell_Self_ShadowlingHatch) );
						this.remove_spell( typeof(Obj_Effect_ProcHolder_Spell_Self_ShadowlingAscend) );
						this.remove_spell( typeof(Obj_Effect_ProcHolder_Spell_Targeted_Enthrall) );
						this.remove_spell( typeof(Obj_Effect_ProcHolder_Spell_Self_ShadowlingHivemind) );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-shadowling'ed " + this.current + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-shadowling'ed " + this.current + "." );
					} else if ( GlobalVars.ticker.mode.thralls.Contains( this ) ) {
						((GameMode)GlobalVars.ticker.mode).remove_thrall( this, false );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-thrall'ed " + this.current + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has de-thrall'ed " + this.current + "." );
					}
				} else if ( _o=="shadowling" ) {
					
					if ( !( this.current is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "<span class='warning'>This only works on humans!</span>" );
						return null;
					}
					GlobalVars.ticker.mode.shadows.Add( this );
					this.special_role = "shadowling";
					this.current.WriteMsg( "<span class='shadowling'><b>Something stirs deep in your mind. A red light floods your vision, and slowly you remember. Though your human disguise has served you well, the time is nigh to cast it off and enter your true form. You have disguised yourself amongst the humans, but you are not one of them. You are a shadowling, and you are to ascend at all costs.</b></span>" );
					((GameMode)GlobalVars.ticker.mode).finalize_shadowling( this );
					((GameMode)GlobalVars.ticker.mode).update_shadow_icons_added( this );
				} else if ( _o=="thrall" ) {
					
					if ( !( this.current is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "<span class='warning'>This only works on humans!</span>" );
						return null;
					}
					((GameMode)GlobalVars.ticker.mode).add_thrall( this );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has thrall'ed " + this.current + "." );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has thrall'ed " + this.current + "." );
				}
			} else if ( Lang13.Bool( href_list["abductor"] ) ) {
				
				dynamic _p = href_list["abductor"]; // Was a switch-case, sorry for the mess.
				if ( _p=="clear" ) {
					Task13.User.WriteMsg( "Not implemented yet. Sorry!" );
				} else if ( _p=="abductor" ) {
					
					if ( !( this.current is Mob_Living_Carbon_Human ) ) {
						Task13.User.WriteMsg( "<span class='warning'>This only works on humans!</span>" );
						return null;
					}
					this.make_Abductor();
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " turned " + this.current + " into abductor." );
				} else if ( _p=="equip" ) {
					gear = Interface13.Alert( "Agent or Scientist Gear", "Gear", "Agent", "Scientist" );

					if ( Lang13.Bool( gear ) ) {
						temp = new GameMode_Abduction();
						temp.equip_common( this.current );

						if ( gear == "Agent" ) {
							temp.equip_agent( this.current );
						} else {
							temp.equip_scientist( this.current );
						}
					}
				}
			} else if ( Lang13.Bool( href_list["monkey"] ) ) {
				L4 = this.current;

				if ( L4.notransform == true ) {
					return null;
				}

				dynamic _s = href_list["monkey"]; // Was a switch-case, sorry for the mess.
				if ( _s=="healthy" ) {
					
					if ( GlobalFuncs.check_rights( 2 ) ) {
						H2 = this.current;
						M = this.current;

						if ( H2 is Mob_Living_Carbon_Human ) {
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to monkeyize " + GlobalFuncs.key_name( this.current ) );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to monkeyize " + GlobalFuncs.key_name_admin( this.current ) + "</span>" );
							Task13.Source = null;
							M = ((Mob_Living_Carbon)H2).monkeyize();
							Task13.Source = M.mind;
						} else if ( M is Mob_Living_Carbon_Monkey && Lang13.Length( M.viruses ) != 0 ) {
							
							foreach (dynamic _q in Lang13.Enumerate( M.viruses, typeof(Disease) )) {
								D = _q;
								
								D.cure( 0 );
							}
							Task13.Sleep( 0 );
						}
					}
				} else if ( _s=="infected" ) {
					
					if ( GlobalFuncs.check_rights( 2, false ) ) {
						H3 = this.current;
						M2 = this.current;

						if ( H3 is Mob_Living_Carbon_Human ) {
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to monkeyize and infect " + GlobalFuncs.key_name( this.current ) );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to monkeyize and infect " + GlobalFuncs.key_name_admin( this.current ) + "</span>" );
							Task13.Source = null;
							M2 = ((Mob_Living_Carbon)H3).monkeyize();
							Task13.Source = M2.mind;
							((Mob)this.current).ForceContractDisease( new Disease_Transformation_JungleFever() );
						} else if ( M2 is Mob_Living_Carbon_Monkey ) {
							((Mob)this.current).ForceContractDisease( new Disease_Transformation_JungleFever() );
						}
					}
				} else if ( _s=="human" ) {
					
					if ( GlobalFuncs.check_rights( 2, false ) ) {
						H4 = this.current;
						M3 = this.current;

						if ( M3 is Mob_Living_Carbon_Monkey ) {
							
							foreach (dynamic _r in Lang13.Enumerate( M3.viruses, typeof(Disease) )) {
								D2 = _r;
								

								if ( D2 is Disease_Transformation_JungleFever ) {
									D2.cure( 0 );
									Task13.Sleep( 0 );
								}
							}
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to humanize " + GlobalFuncs.key_name( this.current ) );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to humanize " + GlobalFuncs.key_name_admin( this.current ) + "</span>" );
							H4 = ((Mob_Living_Carbon)M3).humanize( 343 );

							if ( Lang13.Bool( H4 ) ) {
								Task13.Source = H4.mind;
							}
						}
					}
				}
			} else if ( Lang13.Bool( href_list["silicon"] ) ) {
				
				dynamic _u = href_list["silicon"]; // Was a switch-case, sorry for the mess.
				if ( _u=="unemag" ) {
					R = this.current;

					if ( R is Mob_Living_Silicon_Robot ) {
						((Mob_Living_Silicon_Robot)R).SetEmagged( false );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has unemag'ed " + R + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has unemag'ed " + R + "." );
					}
				} else if ( _u=="unemagcyborgs" ) {
					
					if ( this.current is Mob_Living_Silicon_Ai ) {
						ai = this.current;

						foreach (dynamic _t in Lang13.Enumerate( ai.connected_robots, typeof(Mob_Living_Silicon_Robot) )) {
							R2 = _t;
							
							R2.SetEmagged( false );
						}
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has unemag'ed " + ai + "'s Cyborgs." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has unemag'ed " + ai + "'s Cyborgs." );
					}
				}
			} else if ( Lang13.Bool( href_list["common"] ) ) {
				
				dynamic _w = href_list["common"]; // Was a switch-case, sorry for the mess.
				if ( _w=="undress" ) {
					
					foreach (dynamic _v in Lang13.Enumerate( this.current, typeof(Obj_Item) )) {
						W = _v;
						
						((Mob)this.current).unEquip( W, true );
					}
				} else if ( _w=="takeuplink" ) {
					this.take_uplink();
					this.memory = null;
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + this.current + "'s uplink." );
				} else if ( _w=="crystals" ) {
					
					if ( GlobalFuncs.check_rights( 8, false ) ) {
						suplink = this.find_syndicate_uplink();
						crystals = null;

						if ( suplink != null ) {
							crystals = suplink.uses;
						}
						crystals = Interface13.Input( "Amount of telecrystals for " + this.key, "Syndicate uplink", crystals, null, null, InputType.Num | InputType.Null );

						if ( !( crystals == null ) ) {
							
							if ( suplink != null ) {
								suplink.uses = crystals;
								GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " changed " + this.current + "'s telecrystal count to " + crystals + "." );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " changed " + this.current + "'s telecrystal count to " + crystals + "." );
							}
						}
					}
				} else if ( _w=="uplink" ) {
					
					if ( !((GameMode)GlobalVars.ticker.mode).equip_traitor( this.current, !GlobalVars.ticker.mode.traitors.Contains( this ) ) ) {
						Task13.User.WriteMsg( "<span class='danger'>Equipping a syndicate failed!</span>" );
					}
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempted to give " + this.current + " an uplink." );
				}
			} else if ( Lang13.Bool( href_list["obj_announce"] ) ) {
				obj_count = 1;
				this.current.WriteMsg( "<span class='notice'>Your current objectives:</span>" );

				foreach (dynamic _x in Lang13.Enumerate( this.objectives, typeof(Objective) )) {
					objective4 = _x;
					
					this.current.WriteMsg( "<B>Objective #" + obj_count + "</B>: " + objective4.explanation_text );
					obj_count++;
				}
			}
			this.edit_memory();
			return null;
		}

		// Function from file: wizard.dm
		public void remove_spell( dynamic spell = null ) {
			Obj_Effect_ProcHolder_Spell S = null;

			
			if ( !Lang13.Bool( spell ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
				S = _a;
				

				if ( Lang13.Bool( spell.IsInstanceOfType( S ) ) ) {
					GlobalFuncs.qdel( S );
					this.spell_list.Remove( S );
				}
			}
			return;
		}

		// Function from file: antag_hud.dm
		public void leave_all_huds(  ) {
			AtomHud_Antag hud = null;
			AtomHud_Data hud2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.huds, typeof(AtomHud_Antag) )) {
				hud = _a;
				

				if ( hud.hudusers.Contains( this.current ) ) {
					hud.leave_hud( this.current );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.huds, typeof(AtomHud_Data) )) {
				hud2 = _b;
				

				if ( hud2.hudusers.Contains( this.current ) ) {
					hud2.remove_hud_from( this.current );
				}
			}
			return;
		}

		// Function from file: antag_hud.dm
		public void transfer_antag_huds( AtomHud_Antag newhud = null ) {
			this.leave_all_huds();
			((GameMode)GlobalVars.ticker.mode).set_antag_hud( this.current, this.antag_hud_icon_state );

			if ( newhud != null ) {
				newhud.join_hud( this.current );
			}
			return;
		}

		// Function from file: mind.dm
		public void transfer_mindbound_actions( dynamic new_character = null ) {
			Obj_Effect_ProcHolder_Spell spell = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
				spell = _a;
				

				if ( !( spell.action != null ) ) {
					spell.action = new Action_SpellAction();
					spell.action.target = spell;
					spell.action.name = spell.name;
					spell.action.button_icon = spell.action_icon;
					spell.action.button_icon_state = spell.action_icon_state;
					spell.action.background_icon_state = spell.action_background_icon_state;
				}
				spell.action.Grant( new_character );
			}
			return;
		}

		// Function from file: mind.dm
		public void transfer_actions( dynamic new_character = null ) {
			Action A = null;

			
			if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.actions ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.current.actions, typeof(Action) )) {
					A = _a;
					
					A.Grant( new_character );
				}
			}
			this.transfer_mindbound_actions( new_character );
			return;
		}

		// Function from file: mind.dm
		public void AddSpell( dynamic spell = null ) {
			this.spell_list.Add( spell );

			if ( !Lang13.Bool( spell.action ) ) {
				spell.action = new Action_SpellAction();
				spell.action.target = spell;
				spell.action.name = spell.name;
				spell.action.button_icon = spell.action_icon;
				spell.action.button_icon_state = spell.action_icon_state;
				spell.action.background_icon_state = spell.action_background_icon_state;
			}
			((Action)spell.action).Grant( this.current );
			return;
		}

		// Function from file: mind.dm
		public bool make_Handofgod_god( string colour = null ) {
			
			switch ((string)( colour )) {
				case "red":
					((Mob)this.current).become_god( "red" );
					((GameMode)GlobalVars.ticker.mode).add_god( this, "red" );
					break;
				case "blue":
					((Mob)this.current).become_god( "blue" );
					((GameMode)GlobalVars.ticker.mode).add_god( this, "blue" );
					break;
				default:
					return false;
					break;
			}
			((GameMode)GlobalVars.ticker.mode).forge_deity_objectives( this );
			((GameMode)GlobalVars.ticker.mode).remove_hog_follower( this, false );
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_added( this, colour );
			return true;
		}

		// Function from file: mind.dm
		public bool make_Handofgod_prophet( string colour = null ) {
			bool _default = false;

			_default = false;

			switch ((string)( colour )) {
				case "red":
					
					if ( GlobalVars.ticker.mode.blue_deity_prophets.Contains( ((dynamic)( GlobalVars.ticker.mode.blue_deity_followers != null || this != null )).Contains( this ) ) ) {
						this.current.WriteMsg( "<span class='danger'><B>You are no longer a member of the Blue cult!<B></span>" );
						this.current.faction -= "blue god";
					}
					this.current.faction |= "red god";
					GlobalVars.ticker.mode.blue_deity_followers.Remove( this );
					GlobalVars.ticker.mode.blue_deity_prophets.Remove( this );
					GlobalVars.ticker.mode.red_deity_followers.Remove( this );
					GlobalVars.ticker.mode.red_deity_prophets.Or( this );
					this.current.WriteMsg( "<span class='danger'><B>You are now a prophet of the red cult's god!</b></span>" );
					this.special_role = "Hand of God: Red Prophet";
					_default = true;
					break;
				case "blue":
					
					if ( GlobalVars.ticker.mode.red_deity_prophets.Contains( ((dynamic)( GlobalVars.ticker.mode.red_deity_followers != null || this != null )).Contains( this ) ) ) {
						this.current.WriteMsg( "<span class='danger'><B>You are no longer a member of the Red cult!<B></span>" );
						this.current.faction -= "red god";
					}
					this.current.faction |= "blue god";
					GlobalVars.ticker.mode.red_deity_followers.Remove( this );
					GlobalVars.ticker.mode.red_deity_prophets.Remove( this );
					GlobalVars.ticker.mode.blue_deity_followers.Remove( this );
					GlobalVars.ticker.mode.blue_deity_prophets.Or( this );
					this.current.WriteMsg( "<span class='danger'><B>You are now a prophet of the blue cult's god!</b></span>" );
					this.special_role = "Hand of God: Blue Prophet";
					_default = true;
					break;
				default:
					return false;
					break;
			}
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_removed( this, "red" );
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_removed( this, "blue" );
			((GameMode)GlobalVars.ticker.mode).greet_hog_follower( this, colour );
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_added( this, colour );
			return _default;
		}

		// Function from file: mind.dm
		public bool make_Handofgod_follower( string colour = null ) {
			bool _default = false;

			_default = false;

			switch ((string)( colour )) {
				case "red":
					
					if ( GlobalVars.ticker.mode.blue_deity_prophets.Contains( ((dynamic)( GlobalVars.ticker.mode.blue_deity_followers != null || this != null )).Contains( this ) ) ) {
						this.current.WriteMsg( "<span class='danger'><B>You are no longer a member of the Blue cult!<B></span>" );
					}
					GlobalVars.ticker.mode.blue_deity_followers.Remove( this );
					GlobalVars.ticker.mode.blue_deity_prophets.Remove( this );
					this.current.faction |= "red god";
					this.current.faction -= "blue god";

					if ( GlobalVars.ticker.mode.red_deity_prophets.Contains( this ) ) {
						this.current.WriteMsg( "<span class='danger'><B>You have lost the connection with your deity, but you still believe in their grand design, You are no longer a prophet!</b></span>" );
						GlobalVars.ticker.mode.red_deity_prophets.Remove( this );
					}
					GlobalVars.ticker.mode.red_deity_followers.Or( this );
					this.current.WriteMsg( "<span class='danger'><B>You are now a follower of the red cult's god!</b></span>" );
					this.special_role = "Hand of God: Red Follower";
					_default = true;
					break;
				case "blue":
					
					if ( GlobalVars.ticker.mode.red_deity_prophets.Contains( ((dynamic)( GlobalVars.ticker.mode.red_deity_followers != null || this != null )).Contains( this ) ) ) {
						this.current.WriteMsg( "<span class='danger'><B>You are no longer a member of the Red cult!<B></span>" );
					}
					GlobalVars.ticker.mode.red_deity_followers.Remove( this );
					GlobalVars.ticker.mode.red_deity_prophets.Remove( this );
					this.current.faction -= "red god";
					this.current.faction |= "blue god";

					if ( GlobalVars.ticker.mode.blue_deity_prophets.Contains( this ) ) {
						this.current.WriteMsg( "<span class='danger'><B>You have lost the connection with your deity, but you still believe in their grand design, You are no longer a prophet!</b></span>" );
						GlobalVars.ticker.mode.blue_deity_prophets.Remove( this );
					}
					GlobalVars.ticker.mode.blue_deity_followers.Or( this );
					this.current.WriteMsg( "<span class='danger'><B>You are now a follower of the blue cult's god!</b></span>" );
					this.special_role = "Hand of God: Blue Follower";
					_default = true;
					break;
				default:
					return false;
					break;
			}
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_removed( this, "red" );
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_removed( this, "blue" );
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_added( this, colour );
			return _default;
		}

		// Function from file: mind.dm
		public void make_Abductor(  ) {
			string role = null;
			dynamic team = null;
			string teleport = null;
			Objective_Experiment O = null;
			dynamic H = null;
			Species_Abductor S = null;
			ByTable agent_landmarks = null;
			ByTable scientist_landmarks = null;
			Obj_Effect_Landmark_Abductor A = null;
			Ent_Static L = null;

			role = Interface13.Alert( "Abductor Role ?", "Role", "Agent", "Scientist" );
			team = Interface13.Input( "Abductor Team ?", "Team ?", null, null, new ByTable(new object [] { 1, 2, 3, 4 }), InputType.Any );
			teleport = Interface13.Alert( "Teleport to ship ?", "Teleport", "Yes", "No" );

			if ( !Lang13.Bool( role ) || !Lang13.Bool( team ) || !Lang13.Bool( teleport ) ) {
				return;
			}

			if ( !( this.current is Mob_Living_Carbon_Human ) ) {
				return;
			}
			GlobalVars.ticker.mode.abductors.Or( this );
			O = new Objective_Experiment();
			O.owner = this;
			this.objectives.Add( O );
			H = this.current;
			((Mob)H).set_species( typeof(Species_Abductor) );
			S = H.dna.species;

			switch ((string)( role )) {
				case "Agent":
					S.agent = true;
					break;
				case "Scientist":
					S.scientist = true;
					break;
			}
			S.team = team;
			agent_landmarks = new ByTable();
			scientist_landmarks = new ByTable();
			agent_landmarks.len = 4;
			scientist_landmarks.len = 4;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark_Abductor) )) {
				A = _b;
				

				if ( A is Obj_Effect_Landmark_Abductor_Agent ) {
					agent_landmarks[String13.ParseNumber( A.team )] = A;
				} else if ( A is Obj_Effect_Landmark_Abductor_Scientist ) {
					scientist_landmarks[String13.ParseNumber( A.team )] = A;
				}
			}
			L = null;

			if ( teleport == "Yes" ) {
				
				switch ((string)( role )) {
					case "Agent":
						S.agent = true;
						L = agent_landmarks[team];
						H.loc = L.loc;
						break;
					case "Scientist":
						S.scientist = true;
						L = agent_landmarks[team];
						H.loc = L.loc;
						break;
				}
			}
			return;
		}

		// Function from file: mind.dm
		public void make_Gang( Gang G = null ) {
			this.special_role = "" + G.name + " Gang Boss";
			G.bosses.Add( this );
			this.gang_datum = G;
			G.add_gang_hud( this );
			((GameMode)GlobalVars.ticker.mode).forge_gang_objectives( this );
			((GameMode)GlobalVars.ticker.mode).greet_gang( this );
			((GameMode)GlobalVars.ticker.mode).equip_gang( this.current, G );
			return;
		}

		// Function from file: mind.dm
		public void make_Rev(  ) {
			dynamic valid_head = null;
			Objective_Mutiny O = null;
			Objective_Mutiny rev_obj = null;
			ByTable L = null;
			dynamic flash = null;
			int fail = 0;

			
			if ( GlobalVars.ticker.mode.head_revolutionaries.len > 0 ) {
				valid_head = Lang13.FindIn( typeof(Mind), GlobalVars.ticker.mode.head_revolutionaries );

				if ( Lang13.Bool( valid_head ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( valid_head.objectives, typeof(Objective_Mutiny) )) {
						O = _a;
						
						rev_obj = new Objective_Mutiny();
						rev_obj.owner = this;
						rev_obj.target = O.target;
						rev_obj.explanation_text = "Assassinate " + O.target.current.real_name + ", the " + O.target.assigned_role + ".";
						this.objectives.Add( rev_obj );
					}
					((GameMode)GlobalVars.ticker.mode).greet_revolutionary( this, false );
				}
			}
			GlobalVars.ticker.mode.head_revolutionaries.Add( this );
			((GameMode)GlobalVars.ticker.mode).update_rev_icons_added( this );
			this.special_role = "Head Revolutionary";
			((GameMode)GlobalVars.ticker.mode).forge_revolutionary_objectives( this );
			((GameMode)GlobalVars.ticker.mode).greet_revolutionary( this, false );
			L = ((Mob)this.current).get_contents();
			flash = Lang13.FindIn( typeof(Obj_Item_Device_Assembly_Flash), L );
			GlobalFuncs.qdel( flash );
			this.take_uplink();
			fail = 0;
			fail |= !((GameMode)GlobalVars.ticker.mode).equip_revolutionary( this.current ) ?1:0;
			return;
		}

		// Function from file: mind.dm
		public void make_Cultist(  ) {
			
			if ( !GlobalVars.ticker.mode.cult.Contains( this ) ) {
				GlobalVars.ticker.mode.cult.Add( this );
				((GameMode)GlobalVars.ticker.mode).update_cult_icons_added( this );
				this.special_role = "Cultist";
				this.current.WriteMsg( "<font color=\"purple\"><b><i>You catch a glimpse of the Realm of Nar-Sie, The Geometer of Blood. You now see how flimsy the world is, you see that it should be open to the knowledge of Nar-Sie.</b></i></font>" );
				this.current.WriteMsg( "<font color=\"purple\"><b><i>Assist your new compatriots in their dark dealings. Their goal is yours, and yours is theirs. You serve the Dark One above all else. Bring It back.</b></i></font>" );
				this.current.WriteMsg( "Your objective is to summon Nar-Sie by building and defending a suitable shell for the Geometer. Adequate supplies can be procured through human sacrifices." );
				((GameMode)GlobalVars.ticker.mode).equip_cultist( this.current );
			}
			return;
		}

		// Function from file: mind.dm
		public void make_Wizard(  ) {
			Obj_Item_Weapon_Spellbook S = null;

			
			if ( !GlobalVars.ticker.mode.wizards.Contains( this ) ) {
				GlobalVars.ticker.mode.wizards.Add( this );
				this.special_role = "Wizard";
				this.assigned_role = "Wizard";

				if ( !( GlobalVars.wizardstart.len != 0 ) ) {
					this.current.loc = Rand13.PickFromTable( GlobalVars.latejoin );
					this.current.WriteMsg( "HOT INSERTION, GO GO GO" );
				} else {
					this.current.loc = Rand13.PickFromTable( GlobalVars.wizardstart );
				}
				((GameMode)GlobalVars.ticker.mode).equip_wizard( this.current );

				foreach (dynamic _a in Lang13.Enumerate( this.current.contents, typeof(Obj_Item_Weapon_Spellbook) )) {
					S = _a;
					
					S.op = false;
				}
				((GameMode)GlobalVars.ticker.mode).name_wizard( this.current );
				((GameMode)GlobalVars.ticker.mode).forge_wizard_objectives( this );
				((GameMode)GlobalVars.ticker.mode).greet_wizard( this );
			}
			return;
		}

		// Function from file: mind.dm
		public void make_Changling(  ) {
			
			if ( !GlobalVars.ticker.mode.changelings.Contains( this ) ) {
				GlobalVars.ticker.mode.changelings.Add( this );
				((Mob)this.current).make_changeling();
				this.special_role = "Changeling";
				((GameMode)GlobalVars.ticker.mode).forge_changeling_objectives( this );
				((GameMode)GlobalVars.ticker.mode).greet_changeling( this );
			}
			return;
		}

		// Function from file: mind.dm
		public void make_Nuke( dynamic spawnloc = null, dynamic nuke_code = null, bool? leader = null, bool? telecrystals = null ) {
			leader = leader ?? false;
			telecrystals = telecrystals ?? GlobalVars.TRUE;

			dynamic H = null;

			
			if ( !GlobalVars.ticker.mode.syndicates.Contains( this ) ) {
				GlobalVars.ticker.mode.syndicates.Add( this );
				((GameMode)GlobalVars.ticker.mode).update_synd_icons_added( this );
				this.special_role = "Syndicate";
				((GameMode)GlobalVars.ticker.mode).forge_syndicate_objectives( this );
				((GameMode)GlobalVars.ticker.mode).greet_syndicate( this );
				this.current.loc = spawnloc;
				H = this.current;
				GlobalFuncs.qdel( H.belt );
				GlobalFuncs.qdel( H.back );
				GlobalFuncs.qdel( H.ears );
				GlobalFuncs.qdel( H.gloves );
				GlobalFuncs.qdel( H.head );
				GlobalFuncs.qdel( H.shoes );
				GlobalFuncs.qdel( H.wear_id );
				GlobalFuncs.qdel( H.wear_suit );
				GlobalFuncs.qdel( H.w_uniform );
				((GameMode)GlobalVars.ticker.mode).equip_syndicate( this.current, telecrystals );

				if ( Lang13.Bool( nuke_code ) ) {
					this.store_memory( "<B>Syndicate Nuclear Bomb Code</B>: " + nuke_code );
					this.current.WriteMsg( "The nuclear authorization code is: <B>" + nuke_code + "</B>" );
				}

				if ( leader == true ) {
					((GameMode)GlobalVars.ticker.mode).prepare_syndicate_leader( this, nuke_code );
				} else {
					this.current.real_name = "" + GlobalFuncs.syndicate_name() + " Operative #" + ( GlobalVars.ticker.mode.syndicates.len - 1 );
				}
			}
			return;
		}

		// Function from file: mind.dm
		public void make_Traitor(  ) {
			
			if ( !GlobalVars.ticker.mode.traitors.Contains( this ) ) {
				GlobalVars.ticker.mode.traitors.Add( this );
				this.special_role = "traitor";
				((GameMode)GlobalVars.ticker.mode).forge_traitor_objectives( this );
				((GameMode)GlobalVars.ticker.mode).finalize_traitor( this );
				((GameMode)GlobalVars.ticker.mode).greet_traitor( this );
			}
			return;
		}

		// Function from file: mind.dm
		public void take_uplink(  ) {
			Obj_Item_Device_Uplink_Hidden H = null;

			H = this.find_syndicate_uplink();

			if ( H != null ) {
				GlobalFuncs.qdel( H );
			}
			return;
		}

		// Function from file: mind.dm
		public Obj_Item_Device_Uplink_Hidden find_syndicate_uplink(  ) {
			ByTable L = null;
			Obj_Item I = null;

			L = ((Mob)this.current).get_contents();

			foreach (dynamic _a in Lang13.Enumerate( L, typeof(Obj_Item) )) {
				I = _a;
				

				if ( I.hidden_uplink != null ) {
					return I.hidden_uplink;
				}
			}
			return null;
		}

		// Function from file: mind.dm
		public void edit_memory(  ) {
			string _out = null;
			ByTable sections = null;
			string text = null;
			ByTable L = null;
			dynamic flash = null;
			Gang G = null;
			ByTable L2 = null;
			dynamic gangtool = null;
			dynamic code = null;
			Obj_Machinery_Nuclearbomb bombue = null;
			bool found = false;
			Disease D = null;
			dynamic robot = null;
			dynamic ai = null;
			int n_e_robots = 0;
			Mob_Living_Silicon_Robot R = null;
			dynamic i = null;
			Obj_Item_Device_Uplink_Hidden suplink = null;
			dynamic crystals = null;
			int obj_count = 0;
			Objective objective = null;

			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Not before round-start!", "Alert" );
				return;
			}
			_out = "<B>" + this.name + "</B>" + ( Lang13.Bool( this.current ) && this.current.real_name != this.name ? " (as " + this.current.real_name + ")" : "" ) + "<br>";
			_out += "Mind currently owned by key: " + this.key + " " + ( this.active ? "(synced)" : "(not synced)" ) + "<br>";
			_out += new Txt( "Assigned role: " ).item( this.assigned_role ).str( ". <a href='?src=" ).Ref( this ).str( ";role_edit=1'>Edit</a><br>" ).ToString();
			_out += "Faction and special role: <b><font color='red'>" + this.special_role + "</font></b><br>";
			sections = new ByTable(new object [] { "revolution", "gang", "cult", "wizard", "changeling", "nuclear", "traitor", "monkey" });
			text = "";

			if ( this.current is Mob_Living_Carbon_Human || this.current is Mob_Living_Carbon_Monkey ) {
				text = "revolution";

				if ( GlobalVars.ticker.mode.config_tag == "revolution" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";

				if ( GlobalVars.command_positions.Contains( this.assigned_role ) ) {
					text += "<b>HEAD</b>|loyal|employee|headrev|rev";
				} else if ( GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) ) {
					text += new Txt( "head|loyal|<a href='?src=" ).Ref( this ).str( ";revolution=clear'>employee</a>|<b>HEADREV</b>|<a href='?src=" ).Ref( this ).str( ";revolution=rev'>rev</a>" ).ToString();
					text += new Txt( "<br>Flash: <a href='?src=" ).Ref( this ).str( ";revolution=flash'>give</a>" ).ToString();
					L = ((Mob)this.current).get_contents();
					flash = Lang13.FindIn( typeof(Obj_Item_Device_Assembly_Flash), L );

					if ( Lang13.Bool( flash ) ) {
						
						if ( !flash.crit_fail ) {
							text += new Txt( "|<a href='?src=" ).Ref( this ).str( ";revolution=takeflash'>take</a>." ).ToString();
						} else {
							text += new Txt( "|<a href='?src=" ).Ref( this ).str( ";revolution=takeflash'>take</a>|<a href='?src=" ).Ref( this ).str( ";revolution=repairflash'>repair</a>." ).ToString();
						}
					} else {
						text += ".";
					}
					text += new Txt( " <a href='?src=" ).Ref( this ).str( ";revolution=reequip'>Reequip</a> (gives traitor uplink)." ).ToString();

					if ( this.objectives.len == 0 ) {
						text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";revolution=autoobjectives'>Set to kill all heads</a>." ).ToString();
					}
				} else if ( GlobalFuncs.isloyal( this.current ) ) {
					text += new Txt( "head|<b>LOYAL</b>|employee|<a href='?src=" ).Ref( this ).str( ";revolution=headrev'>headrev</a>|rev" ).ToString();
				} else if ( GlobalVars.ticker.mode.revolutionaries.Contains( this ) ) {
					text += new Txt( "head|loyal|<a href='?src=" ).Ref( this ).str( ";revolution=clear'>employee</a>|<a href='?src=" ).Ref( this ).str( ";revolution=headrev'>headrev</a>|<b>REV</b>" ).ToString();
				} else {
					text += new Txt( "head|loyal|<b>EMPLOYEE</b>|<a href='?src=" ).Ref( this ).str( ";revolution=headrev'>headrev</a>|<a href='?src=" ).Ref( this ).str( ";revolution=rev'>rev</a>" ).ToString();
				}

				if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "revolutionary" ) ) {
					text += "|Enabled in Prefs";
				} else {
					text += "|Disabled in Prefs";
				}
				sections["revolution"] = text;
				text = "gang";

				if ( GlobalVars.ticker.mode.config_tag == "gang" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";
				text += "" + ( GlobalFuncs.isloyal( this.current ) ? "<B>LOYAL</B>" : "loyal" ) + "|";

				if ( ((GameMode)GlobalVars.ticker.mode).get_all_gangsters().Contains( this ) ) {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";gang=clear'>none</a>" ).ToString();
				} else {
					text += "<B>NONE</B>";
				}

				if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "gangster" ) ) {
					text += "|Enabled in Prefs<BR>";
				} else {
					text += "|Disabled in Prefs<BR>";
				}

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.mode.gangs, typeof(Gang) )) {
					G = _a;
					
					text += "<i>" + G.name + "</i>: ";

					if ( G.gangsters.Contains( this ) ) {
						text += "<B>GANGSTER</B>";
					} else {
						text += new Txt( "<a href='?src=" ).Ref( this ).str( ";gangster=" ).Ref( G ).str( "'>gangster</a>" ).ToString();
					}
					text += "|";

					if ( G.bosses.Contains( this ) ) {
						text += "<B>GANG LEADER</B>";
						text += new Txt( "|Equipment: <a href='?src=" ).Ref( this ).str( ";gang=equip'>give</a>" ).ToString();
						L2 = ((Mob)this.current).get_contents();
						gangtool = Lang13.FindIn( typeof(Obj_Item_Device_Gangtool), L2 );

						if ( Lang13.Bool( gangtool ) ) {
							text += new Txt( "|<a href='?src=" ).Ref( this ).str( ";gang=takeequip'>take</a>" ).ToString();
						}
					} else {
						text += new Txt( "<a href='?src=" ).Ref( this ).str( ";gangboss=" ).Ref( G ).str( "'>gang leader</a>" ).ToString();
					}
					text += "<BR>";
				}

				if ( GlobalVars.gang_colors_pool.len != 0 ) {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";gang=new'>Create New Gang</a>" ).ToString();
				}
				sections["gang"] = text;
				text = "cult";

				if ( GlobalVars.ticker.mode.config_tag == "cult" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";

				if ( GlobalVars.ticker.mode.cult.Contains( this ) ) {
					text += new Txt( "loyal|<a href='?src=" ).Ref( this ).str( ";cult=clear'>employee</a>|<b>CULTIST</b>" ).ToString();
					text += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";cult=equip'>Equip</a>" ).ToString();
				} else if ( GlobalFuncs.isloyal( this.current ) ) {
					text += new Txt( "<b>LOYAL</b>|employee|<a href='?src=" ).Ref( this ).str( ";cult=cultist'>cultist</a>" ).ToString();
				} else {
					text += new Txt( "loyal|<b>EMPLOYEE</b>|<a href='?src=" ).Ref( this ).str( ";cult=cultist'>cultist</a>" ).ToString();
				}

				if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "cultist" ) ) {
					text += "|Enabled in Prefs";
				} else {
					text += "|Disabled in Prefs";
				}
				sections["cult"] = text;
				text = "wizard";

				if ( GlobalVars.ticker.mode.config_tag == "wizard" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";

				if ( GlobalVars.ticker.mode.wizards.Contains( this ) || GlobalVars.ticker.mode.apprentices.Contains( this ) ) {
					text += new Txt( "<b>YES</b>|<a href='?src=" ).Ref( this ).str( ";wizard=clear'>no</a>" ).ToString();
					text += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";wizard=lair'>To lair</a>, <a href='?src=" ).Ref( this ).str( ";common=undress'>undress</a>, <a href='?src=" ).Ref( this ).str( ";wizard=dressup'>dress up</a>, <a href='?src=" ).Ref( this ).str( ";wizard=name'>let choose name</a>." ).ToString();

					if ( this.objectives.len == 0 ) {
						text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";wizard=autoobjectives'>Randomize!</a>" ).ToString();
					}
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";wizard=wizard'>yes</a>|<b>NO</b>" ).ToString();
				}

				if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "wizard" ) ) {
					text += "|Enabled in Prefs";
				} else {
					text += "|Disabled in Prefs";
				}
				sections["wizard"] = text;
				text = "changeling";

				if ( GlobalVars.ticker.mode.config_tag == "changeling" || GlobalVars.ticker.mode.config_tag == "traitorchan" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";

				if ( GlobalVars.ticker.mode.changelings.Contains( this ) && Lang13.Bool( this.special_role ) ) {
					text += new Txt( "<b>YES</b>|<a href='?src=" ).Ref( this ).str( ";changeling=clear'>no</a>" ).ToString();

					if ( this.objectives.len == 0 ) {
						text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";changeling=autoobjectives'>Randomize!</a>" ).ToString();
					}

					if ( this.changeling != null && this.changeling.stored_profiles.len != 0 && this.current.real_name != this.changeling.first_prof.name ) {
						text += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";changeling=initialdna'>Transform to initial appearance.</a>" ).ToString();
					}
				} else if ( GlobalVars.ticker.mode.changelings.Contains( this ) ) {
					text += new Txt( "<b>YES (but not an antag)</b>|<a href='?src=" ).Ref( this ).str( ";changeling=clear'>no</a>" ).ToString();

					if ( this.objectives.len == 0 ) {
						text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";changeling=autoobjectives'>Randomize!</a>" ).ToString();
					}

					if ( this.changeling != null && this.changeling.stored_profiles.len != 0 && this.current.real_name != this.changeling.first_prof.name ) {
						text += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";changeling=initialdna'>Transform to initial appearance.</a>" ).ToString();
					}
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";changeling=changeling'>yes</a>|<b>NO</b>" ).ToString();
				}

				if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "changeling" ) ) {
					text += "|Enabled in Prefs";
				} else {
					text += "|Disabled in Prefs";
				}
				sections["changeling"] = text;
				text = "nuclear";

				if ( GlobalVars.ticker.mode.config_tag == "nuclear" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";

				if ( GlobalVars.ticker.mode.syndicates.Contains( this ) ) {
					text += new Txt( "<b>OPERATIVE</b>|<a href='?src=" ).Ref( this ).str( ";nuclear=clear'>nanotrasen</a>" ).ToString();
					text += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";nuclear=lair'>To shuttle</a>, <a href='?src=" ).Ref( this ).str( ";common=undress'>undress</a>, <a href='?src=" ).Ref( this ).str( ";nuclear=dressup'>dress up</a>." ).ToString();
					code = null;

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
						bombue = _b;
						

						if ( Lang13.Length( bombue.r_code ) <= 5 && bombue.r_code != "LOLNO" && bombue.r_code != "ADMIN" ) {
							code = bombue.r_code;
							break;
						}
					}

					if ( Lang13.Bool( code ) ) {
						text += new Txt( " Code is " ).item( code ).str( ". <a href='?src=" ).Ref( this ).str( ";nuclear=tellcode'>tell the code.</a>" ).ToString();
					}
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";nuclear=nuclear'>operative</a>|<b>NANOTRASEN</b>" ).ToString();
				}

				if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "operative" ) ) {
					text += "|Enabled in Prefs";
				} else {
					text += "|Disabled in Prefs";
				}
				sections["nuclear"] = text;
			}
			text = "traitor";

			if ( GlobalVars.ticker.mode.config_tag == "traitor" || GlobalVars.ticker.mode.config_tag == "traitorchan" ) {
				text = String13.ToUpper( text );
			}
			text = "<i><b>" + text + "</b></i>: ";

			if ( GlobalVars.ticker.mode.traitors.Contains( this ) ) {
				text += new Txt( "<b>TRAITOR</b>|<a href='?src=" ).Ref( this ).str( ";traitor=clear'>loyal</a>" ).ToString();

				if ( this.objectives.len == 0 ) {
					text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";traitor=autoobjectives'>Randomize</a>!" ).ToString();
				}
			} else {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";traitor=traitor'>traitor</a>|<b>LOYAL</b>" ).ToString();
			}

			if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "traitor" ) ) {
				text += "|Enabled in Prefs";
			} else {
				text += "|Disabled in Prefs";
			}
			sections["traitor"] = text;
			text = "shadowling";

			if ( GlobalVars.ticker.mode.config_tag == "shadowling" ) {
				text = String13.ToUpper( text );
			}
			text = "<i><b>" + text + "</b></i>: ";

			if ( GlobalVars.ticker.mode.shadows.Contains( this ) ) {
				text += new Txt( "<b>SHADOWLING</b>|thrall|<a href='?src=" ).Ref( this ).str( ";shadowling=clear'>human</a>" ).ToString();
			} else if ( GlobalVars.ticker.mode.thralls.Contains( this ) ) {
				text += new Txt( "shadowling|<b>THRALL</b>|<a href='?src=" ).Ref( this ).str( ";shadowling=clear'>human</a>" ).ToString();
			} else {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";shadowling=shadowling'>shadowling</a>|<a href='?src=" ).Ref( this ).str( ";shadowling=thrall'>thrall</a>|<b>HUMAN</b>" ).ToString();
			}

			if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "shadowling" ) ) {
				text += "|Enabled in Prefs";
			} else {
				text += "|Disabled in Prefs";
			}
			sections["shadowling"] = text;
			text = "Abductor";

			if ( GlobalVars.ticker.mode.config_tag == "abductor" ) {
				text = String13.ToUpper( text );
			}
			text = "<i><b>" + text + "</b></i>: ";

			if ( GlobalVars.ticker.mode.abductors.Contains( this ) ) {
				text += new Txt( "<b>Abductor</b>|<a href='?src=" ).Ref( this ).str( ";abductor=clear'>human</a>" ).ToString();
				text += new Txt( "|<a href='?src=" ).Ref( this ).str( ";common=undress'>undress</a>|<a href='?src=" ).Ref( this ).str( ";abductor=equip'>equip</a>" ).ToString();
			} else {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";abductor=abductor'>Abductor</a>|<b>human</b>" ).ToString();
			}

			if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "abductor" ) ) {
				text += "|Enabled in Prefs";
			} else {
				text += "|Disabled in Prefs";
			}
			sections["abductor"] = text;
			text = "hand of god";

			if ( GlobalVars.ticker.mode.config_tag == "handofgod" ) {
				text = String13.ToUpper( text );
			}
			text = "<i><b>" + text + "</b></i>: ";

			if ( GlobalVars.ticker.mode.red_deity_prophets.Contains( this ) ) {
				text += new Txt( "<b>RED PROPHET</b>|<a href='?src=" ).Ref( this ).str( ";handofgod=red follower'>red follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=clear'>employee</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue follower'>blue follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue prophet'>blue prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red god'>red god</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue god'>blue god</a>" ).ToString();
			} else if ( GlobalVars.ticker.mode.red_deity_followers.Contains( this ) ) {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";handofgod=red prophet'>red prophet</a>|<b>RED FOLLOWER</b>|<a href='?src=" ).Ref( this ).str( ";handofgod=clear'>employee</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue follower'>blue follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue prophet'>blue prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red god'>red god</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue god'>blue god</a>" ).ToString();
			} else if ( GlobalVars.ticker.mode.blue_deity_followers.Contains( this ) ) {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";handofgod=red prophet'>red prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red follower'>red follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=clear'>employee</a>|BLUE FOLLOWER|<a href='?src=" ).Ref( this ).str( ";handofgod=blue prophet'>blue prophet|<a href='?src=" ).Ref( this ).str( ";handofgod=red god'>red god</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue god'>blue god</a></a>" ).ToString();
			} else if ( GlobalVars.ticker.mode.blue_deity_prophets.Contains( this ) ) {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";handofgod=red prophet'>red prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red follower'>red follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=clear'>employee</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue follower'>blue follower</a>|BLUE PROPHET|<a href='?src=" ).Ref( this ).str( ";handofgod=red god'>red god</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue god'>blue god</a>" ).ToString();
			} else if ( GlobalVars.ticker.mode.red_deities.Contains( this ) ) {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";handofgod=red prophet'>red prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red follower'>red follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=clear'>employee</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue follower'>blue follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue prophet'>blue prophet</a>|RED GOD|<a href='?src=" ).Ref( this ).str( ";handofgod=blue god'>blue god</a>" ).ToString();
			} else if ( GlobalVars.ticker.mode.blue_deities.Contains( this ) ) {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";handofgod=red prophet'>red prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red follower'>red follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=clear'>employee</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue follower'>blue follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue prophet'>blue prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red god'>red god</a>|BLUE GOD" ).ToString();
			} else {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";handofgod=red prophet'>red prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red follower'>red follower</a>|<b>EMPLOYEE</b>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue follower'>blue follower</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue prophet'>blue prophet</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=red god'>red god</a>|<a href='?src=" ).Ref( this ).str( ";handofgod=blue god'>blue god</a>" ).ToString();
			}

			if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "hand of god: god" ) ) {
				text += "|HOG God Enabled in Prefs";
			} else {
				text += "|HOG God Disabled in Prefs";
			}

			if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "hand of god: cultist" ) ) {
				text += "|HOG Cultist Enabled in Prefs";
			} else {
				text += "|HOG Disabled in Prefs";
			}
			sections["follower"] = text;

			if ( this.current is Mob_Living_Carbon ) {
				text = "monkey";

				if ( GlobalVars.ticker.mode.config_tag == "monkey" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";

				if ( this.current is Mob_Living_Carbon_Human ) {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";monkey=healthy'>healthy</a>|<a href='?src=" ).Ref( this ).str( ";monkey=infected'>infected</a>|<b>HUMAN</b>|other" ).ToString();
				} else if ( this.current is Mob_Living_Carbon_Monkey ) {
					found = false;

					foreach (dynamic _c in Lang13.Enumerate( this.current.viruses, typeof(Disease) )) {
						D = _c;
						

						if ( D is Disease_Transformation_JungleFever ) {
							found = true;
						}
					}

					if ( found ) {
						text += new Txt( "<a href='?src=" ).Ref( this ).str( ";monkey=healthy'>healthy</a>|<b>INFECTED</b>|<a href='?src=" ).Ref( this ).str( ";monkey=human'>human</a>|other" ).ToString();
					} else {
						text += new Txt( "<b>HEALTHY</b>|<a href='?src=" ).Ref( this ).str( ";monkey=infected'>infected</a>|<a href='?src=" ).Ref( this ).str( ";monkey=human'>human</a>|other" ).ToString();
					}
				} else {
					text += "healthy|infected|human|<b>OTHER</b>";
				}

				if ( Lang13.Bool( this.current ) && Lang13.Bool( this.current.client ) && this.current.client.prefs.be_special.Contains( "monkey" ) ) {
					text += "|Enabled in Prefs";
				} else {
					text += "|Disabled in Prefs";
				}
				sections["monkey"] = text;
			}

			if ( this.current is Mob_Living_Silicon ) {
				text = "silicon";
				robot = this.current;

				if ( robot is Mob_Living_Silicon_Robot && Lang13.Bool( robot.emagged ) ) {
					text += new Txt( "<br>Cyborg: Is emagged! <a href='?src=" ).Ref( this ).str( ";silicon=unemag'>Unemag!</a><br>0th law: " ).item( robot.laws.zeroth ).ToString();
				}
				ai = this.current;

				if ( ai is Mob_Living_Silicon_Ai && ai.connected_robots.len != 0 ) {
					n_e_robots = 0;

					foreach (dynamic _d in Lang13.Enumerate( ai.connected_robots, typeof(Mob_Living_Silicon_Robot) )) {
						R = _d;
						

						if ( R.emagged ) {
							n_e_robots++;
						}
					}
					text += new Txt( "<br>" ).item( n_e_robots ).str( " of " ).item( ai.connected_robots.len ).str( " slaved cyborgs are emagged. <a href='?src=" ).Ref( this ).str( ";silicon=unemagcyborgs'>Unemag</a>" ).ToString();
				}
			}

			if ( GlobalVars.ticker.mode.config_tag == "traitorchan" ) {
				
				if ( Lang13.Bool( sections["traitor"] ) ) {
					_out += sections["traitor"] + "<br>";
				}

				if ( Lang13.Bool( sections["changeling"] ) ) {
					_out += sections["changeling"] + "<br><br>";
				}
				sections.Remove( "traitor" );
				sections.Remove( "changeling" );
			} else {
				
				if ( Lang13.Bool( sections[GlobalVars.ticker.mode.config_tag] ) ) {
					_out += sections[GlobalVars.ticker.mode.config_tag] + "<br><br>";
				}
				sections.Remove( GlobalVars.ticker.mode.config_tag );
			}

			foreach (dynamic _e in Lang13.Enumerate( sections )) {
				i = _e;
				

				if ( Lang13.Bool( sections[i] ) ) {
					_out += sections[i] + "<br>";
				}
			}

			if ( ( GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) || GlobalVars.ticker.mode.traitors.Contains( this ) || GlobalVars.ticker.mode.syndicates.Contains( this ) ) && this.current is Mob_Living_Carbon_Human ) {
				text = new Txt( "Uplink: <a href='?src=" ).Ref( this ).str( ";common=uplink'>give</a>" ).ToString();
				suplink = this.find_syndicate_uplink();
				crystals = null;

				if ( suplink != null ) {
					crystals = suplink.uses;
				}

				if ( suplink != null ) {
					text += new Txt( "|<a href='?src=" ).Ref( this ).str( ";common=takeuplink'>take</a>" ).ToString();

					if ( GlobalFuncs.check_rights( 8, false ) ) {
						text += new Txt( ", <a href='?src=" ).Ref( this ).str( ";common=crystals'>" ).item( crystals ).str( "</a> crystals" ).ToString();
					} else {
						text += ", " + crystals + " crystals";
					}
				}
				text += ".";
				_out += text;
			}
			_out += "<br><br>";
			_out += "<b>Memory:</b><br>";
			_out += this.memory;
			_out += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";memory_edit=1'>Edit memory</a><br>" ).ToString();
			_out += "Objectives:<br>";

			if ( this.objectives.len == 0 ) {
				_out += "EMPTY<br>";
			} else {
				obj_count = 1;

				foreach (dynamic _f in Lang13.Enumerate( this.objectives, typeof(Objective) )) {
					objective = _f;
					
					_out += new Txt( "<B>" ).item( obj_count ).str( "</B>: " ).item( objective.explanation_text ).str( " <a href='?src=" ).Ref( this ).str( ";obj_edit=" ).Ref( objective ).str( "'>Edit</a> <a href='?src=" ).Ref( this ).str( ";obj_delete=" ).Ref( objective ).str( "'>Delete</a> <a href='?src=" ).Ref( this ).str( ";obj_completed=" ).Ref( objective ).str( "'><font color=" ).item( ( objective.completed ? "green" : "red" ) ).str( ">Toggle Completion</font></a><br>" ).ToString();
					obj_count++;
				}
			}
			_out += new Txt( "<a href='?src=" ).Ref( this ).str( ";obj_add=1'>Add objective</a><br><br>" ).ToString();
			_out += new Txt( "<a href='?src=" ).Ref( this ).str( ";obj_announce=1'>Announce objectives</a><br><br>" ).ToString();
			Interface13.Browse( Task13.User, _out, "window=edit_memory" + this + ";size=500x600" );
			return;
		}

		// Function from file: mind.dm
		public void show_memory( dynamic recipient = null, bool? window = null ) {
			window = window ?? true;

			string output = null;
			int obj_count = 0;
			Objective objective = null;

			
			if ( !Lang13.Bool( recipient ) ) {
				recipient = this.current;
			}
			output = "<B>" + this.current.real_name + "'s Memories:</B><br>";
			output += this.memory;

			if ( this.objectives.len != 0 ) {
				output += "<B>Objectives:</B>";
				obj_count = 1;

				foreach (dynamic _a in Lang13.Enumerate( this.objectives, typeof(Objective) )) {
					objective = _a;
					
					output += "<br><B>Objective #" + obj_count++ + "</B>: " + objective.explanation_text;
				}
			}

			if ( window == true ) {
				Interface13.Browse( recipient, output, "window=memory" );
			} else {
				recipient.WriteMsg( "<i>" + output + "</i>" );
			}
			return;
		}

		// Function from file: mind.dm
		public void remove_all_antag(  ) {
			this.remove_changeling();
			this.remove_traitor();
			this.remove_nukeop();
			this.remove_wizard();
			this.remove_cultist();
			this.remove_rev();
			this.remove_gang();
			return;
		}

		// Function from file: mind.dm
		public void remove_antag_equip(  ) {
			ByTable Mob_Contents = null;
			Obj_Item I = null;
			Obj_Item P = null;
			Obj_Item R = null;

			Mob_Contents = ((Mob)this.current).get_contents();

			foreach (dynamic _a in Lang13.Enumerate( Mob_Contents, typeof(Obj_Item) )) {
				I = _a;
				

				if ( I is Obj_Item_Device_Pda ) {
					P = I;
					((dynamic)P).lock_code = "";
				} else if ( I is Obj_Item_Device_Radio ) {
					R = I;
					((dynamic)R).traitor_frequency = 0;
				}
			}
			return;
		}

		// Function from file: mind.dm
		public void remove_hog_follower_prophet(  ) {
			GlobalVars.ticker.mode.red_deity_followers.Remove( this );
			GlobalVars.ticker.mode.red_deity_prophets.Remove( this );
			GlobalVars.ticker.mode.blue_deity_prophets.Remove( this );
			GlobalVars.ticker.mode.blue_deity_followers.Remove( this );
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_removed( this, "red" );
			((GameMode)GlobalVars.ticker.mode).update_hog_icons_removed( this, "blue" );
			return;
		}

		// Function from file: mind.dm
		public void remove_gang(  ) {
			((GameMode)GlobalVars.ticker.mode).remove_gangster( this, false, 1, true );
			this.remove_objectives();
			return;
		}

		// Function from file: mind.dm
		public void remove_rev(  ) {
			
			if ( GlobalVars.ticker.mode.revolutionaries.Contains( this ) ) {
				GlobalVars.ticker.mode.revolutionaries.Remove( this );
				((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( this );
			}

			if ( GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) ) {
				GlobalVars.ticker.mode.head_revolutionaries.Remove( this );
				((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( this );
			}
			this.special_role = null;
			this.remove_objectives();
			this.remove_antag_equip();
			return;
		}

		// Function from file: mind.dm
		public void remove_cultist(  ) {
			
			if ( GlobalVars.ticker.mode.cult.Contains( this ) ) {
				GlobalVars.ticker.mode.cult.Remove( this );
				((GameMode)GlobalVars.ticker.mode).update_cult_icons_removed( this );
			}
			this.special_role = null;
			return;
		}

		// Function from file: mind.dm
		public void remove_wizard(  ) {
			
			if ( GlobalVars.ticker.mode.wizards.Contains( this ) ) {
				GlobalVars.ticker.mode.wizards.Remove( this );
				((Mob)this.current).spellremove( this.current );
			}
			this.special_role = null;
			this.remove_antag_equip();
			return;
		}

		// Function from file: mind.dm
		public void remove_nukeop(  ) {
			
			if ( GlobalVars.ticker.mode.syndicates.Contains( this ) ) {
				GlobalVars.ticker.mode.syndicates.Remove( this );
				((GameMode)GlobalVars.ticker.mode).update_synd_icons_removed( this );
			}
			this.special_role = null;
			this.remove_objectives();
			this.remove_antag_equip();
			return;
		}

		// Function from file: mind.dm
		public void remove_traitor(  ) {
			dynamic A = null;

			
			if ( GlobalVars.ticker.mode.traitors.Contains( this ) ) {
				GlobalVars.ticker.mode.traitors.Remove( this );

				if ( this.current is Mob_Living_Silicon_Ai ) {
					A = this.current;
					((Mob_Living_Silicon)A).set_zeroth_law( "" );
					A.show_laws();
					A.verbs -= typeof(Mob_Living_Silicon_Ai).GetMethod( "choose_modules" );
					A.malf_picker.remove_verbs( A );
					GlobalFuncs.qdel( A.malf_picker );
				}
			}
			this.special_role = null;
			this.remove_antag_equip();
			return;
		}

		// Function from file: mind.dm
		public void remove_changeling(  ) {
			
			if ( GlobalVars.ticker.mode.changelings.Contains( this ) ) {
				GlobalVars.ticker.mode.changelings.Remove( this );
				((Mob)this.current).remove_changeling_powers();

				if ( this.changeling != null ) {
					GlobalFuncs.qdel( this.changeling );
					this.changeling = null;
				}
			}
			this.special_role = null;
			this.remove_antag_equip();
			return;
		}

		// Function from file: mind.dm
		public void remove_objectives(  ) {
			Objective O = null;

			
			if ( this.objectives.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.objectives, typeof(Objective) )) {
					O = _a;
					
					this.objectives.Remove( O );
					GlobalFuncs.qdel( O );
				}
			}
			return;
		}

		// Function from file: mind.dm
		public void wipe_memory(  ) {
			this.memory = null;
			return;
		}

		// Function from file: mind.dm
		public void store_memory( string new_text = null ) {
			this.memory += "" + new_text + "<BR>";
			return;
		}

		// Function from file: mind.dm
		public void transfer_to( dynamic new_character = null ) {
			AtomHud_Antag hud_to_transfer = null;

			
			if ( Lang13.Bool( this.current ) ) {
				this.current.mind = null;
				GlobalVars.SStgui.on_transfer( this.current, new_character );
			}

			if ( Lang13.Bool( this.key ) ) {
				
				if ( new_character.key != this.key ) {
					((Mob)new_character).ghostize( true );
				}
			} else {
				this.key = new_character.key;
			}

			if ( Lang13.Bool( new_character.mind ) ) {
				new_character.mind.current = null;
			}
			hud_to_transfer = this.antag_hud;
			this.leave_all_huds();
			this.current = new_character;
			new_character.mind = this;
			this.transfer_antag_huds( hud_to_transfer );
			this.transfer_actions( new_character );

			if ( this.active ) {
				new_character.key = this.key;
			}
			return;
		}

	}

}