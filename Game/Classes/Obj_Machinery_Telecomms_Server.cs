// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Telecomms_Server : Obj_Machinery_Telecomms {

		public ByTable log_entries = new ByTable();
		public ByTable stored_names = new ByTable();
		public ByTable TrafficActions = new ByTable();
		public int? logs = 0;
		public int totaltraffic = 0;
		public ByTable memory = new ByTable();
		public string encryption = "null";
		public string salt = "null";
		public string language = "human";
		public Obj_Item_Device_Radio_Headset server_radio = null;
		public bool last_signal = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 15;
			this.machinetype = 4;
			this.circuitboard = "/obj/item/weapon/circuitboard/telecomms/server";
			this.icon_state = "comm_server";
		}

		// Function from file: server.dm
		public Obj_Machinery_Telecomms_Server ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Telecomms_Server( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Subspace_Filter( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			this.RefreshParts();
			this.server_radio = new Obj_Item_Device_Radio_Headset();
			return;
		}

		// Function from file: server.dm
		public void add_entry( dynamic content = null, dynamic input = null ) {
			CommLogEntry log = null;
			string identifier = null;

			log = new CommLogEntry();
			identifier = String13.NumberToString( Rand13.Int( -1000, 1000 ) + Game13.time );
			log.name = "" + input + " (" + Num13.Md5( identifier ) + ")";
			log.input_type = input;
			log.parameters["message"] = content;
			this.log_entries.Add( log );
			this.update_logs();
			return;
		}

		// Function from file: server.dm
		public void update_logs(  ) {
			int? i = null;
			CommLogEntry L = null;

			
			if ( ( this.logs ??0) >= 400 ) {
				i = null;
				i = 1;

				while (( i ??0) <= ( this.logs ??0)) {
					L = this.log_entries[i];

					if ( L.garbage_collector ) {
						this.log_entries.Remove( L );
						this.logs--;
						break;
					}
					i++;
				}
			}
			return;
		}

		// Function from file: server.dm
		public override void receive_information( Signal signal = null, Obj_Machinery_Telecomms machine_from = null ) {
			CommLogEntry log = null;
			string identifier = null;
			int? can_send = null;

			
			if ( Lang13.Bool( signal.data["message"] ) ) {
				
				if ( this.is_freq_listening( signal ) ) {
					
					if ( this.traffic > 0 ) {
						this.totaltraffic += this.traffic;
					}

					if ( Convert.ToInt32( signal.data["type"] ) != 4 ) {
						this.update_logs();
						log = new CommLogEntry();
						log.parameters["mobtype"] = signal.data["mobtype"];
						log.parameters["job"] = signal.data["job"];
						log.parameters["key"] = signal.data["key"];
						log.parameters["message"] = signal.data["message"];
						log.parameters["name"] = signal.data["name"];
						log.parameters["realname"] = signal.data["realname"];
						log.parameters["uspeech"] = signal.data["languages"] & 1;

						if ( Convert.ToDouble( signal.data["compression"] ) > 0 ) {
							log.parameters["message"] = GlobalFuncs.Gibberish( signal.data["message"], Convert.ToDouble( signal.data["compression"] + 50 ) );
							log.parameters["job"] = GlobalFuncs.Gibberish( signal.data["job"], Convert.ToDouble( signal.data["compression"] + 50 ) );
							log.parameters["name"] = GlobalFuncs.Gibberish( signal.data["name"], Convert.ToDouble( signal.data["compression"] + 50 ) );
							log.parameters["realname"] = GlobalFuncs.Gibberish( signal.data["realname"], Convert.ToDouble( signal.data["compression"] + 50 ) );
							log.input_type = "Corrupt File";
						}
						this.log_entries.Add( log );

						if ( !this.stored_names.Contains( signal.data["name"] ) ) {
							this.stored_names.Add( signal.data["name"] );
						}
						this.logs++;
						signal.data["server"] = this;
						identifier = String13.NumberToString( Rand13.Int( -1000, 1000 ) + Game13.time );
						log.name = "data packet (" + Num13.Md5( identifier ) + ")";
					}
					can_send = this.relay_information( signal, "/obj/machinery/telecomms/hub" );

					if ( !Lang13.Bool( can_send ) ) {
						this.relay_information( signal, "/obj/machinery/telecomms/broadcaster" );
					}
				}
			}
			return;
		}

	}

}