// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Dnainjector : Obj_Item_Weapon {

		public double damage_coeff = 1;
		public ByTable fields = null;
		public ByTable add_mutations = new ByTable();
		public ByTable remove_mutations = new ByTable();
		public ByTable add_mutations_static = new ByTable();
		public ByTable remove_mutations_static = new ByTable();
		public bool used = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throw_speed = 3;
			this.throw_range = 5;
			this.w_class = 1;
			this.origin_tech = "biotech=1";
			this.icon_state = "dnainjector";
		}

		public Obj_Item_Weapon_Dnainjector ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: dna_injector.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic humantarget = null;

			
			if ( !((Mob)user).IsAdvancedToolUser() ) {
				user.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return false;
			}

			if ( this.used ) {
				user.WriteMsg( "<span class='warning'>This injector is used up!</span>" );
				return false;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				humantarget = M;

				if ( !((Mob_Living)humantarget).can_inject( user, true ) ) {
					return false;
				}
			}
			GlobalFuncs.add_logs( user, M, "attempted to inject", this );

			if ( M != user ) {
				((Ent_Static)M).visible_message( "<span class='danger'>" + user + " is trying to inject " + M + " with " + this + "!</span>", "<span class='userdanger'>" + user + " is trying to inject " + M + " with " + this + "!</span>" );

				if ( !GlobalFuncs.do_mob( user, M ) ) {
					return false;
				}
				((Ent_Static)M).visible_message( "<span class='danger'>" + user + " injects " + M + " with the syringe with " + this + "!", "<span class='userdanger'>" + user + " injects " + M + " with the syringe with " + this + "!" );
			} else {
				user.WriteMsg( "<span class='notice'>You inject yourself with " + this + ".</span>" );
			}
			GlobalFuncs.add_logs( user, M, "injected", this );
			this.inject( M, user );
			this.used = true;
			this.icon_state = "dnainjector0";
			this.desc += " This one is used up.";
			return false;
		}

		// Function from file: dna_injector.dm
		public virtual void inject( dynamic M = null, dynamic user = null ) {
			string log_msg = null;
			Mutation_Human HM = null;
			Mutation_Human HM2 = null;

			this.prepare();

			if ( Lang13.Bool( M.has_dna() ) && !Lang13.Bool( M.disabilities & 128 ) ) {
				M.radiation += Rand13.Int( ((int)( 20 / Math.Pow( this.damage_coeff, 2 ) )), ((int)( 50 / Math.Pow( this.damage_coeff, 2 ) )) );
				log_msg = "" + GlobalFuncs.key_name( user ) + " injected " + GlobalFuncs.key_name( M ) + " with the " + this.name;

				foreach (dynamic _a in Lang13.Enumerate( this.remove_mutations, typeof(Mutation_Human) )) {
					HM = _a;
					
					HM.force_lose( M );
				}

				foreach (dynamic _b in Lang13.Enumerate( this.add_mutations, typeof(Mutation_Human) )) {
					HM2 = _b;
					

					if ( HM2.name == "Monkified" ) {
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " injected " + GlobalFuncs.key_name_admin( M ) + " with the " + this.name + " <span class='danger'>(MONKEY)</span>" );
						log_msg += " (MONKEY)";
					}
					HM2.force_give( M );
				}

				if ( this.fields != null ) {
					
					if ( Lang13.Bool( this.fields["name"] ) && Lang13.Bool( this.fields["UE"] ) && Lang13.Bool( this.fields["blood_type"] ) ) {
						M.real_name = this.fields["name"];
						M.dna.unique_enzymes = this.fields["UE"];
						M.name = M.real_name;
						M.dna.blood_type = this.fields["blood_type"];
					}

					if ( Lang13.Bool( this.fields["UI"] ) ) {
						M.dna.uni_identity = GlobalFuncs.merge_text( M.dna.uni_identity, this.fields["UI"] );
						((Mob_Living_Carbon)M).updateappearance( null, null, true );
					}
				}
				GlobalFuncs.log_attack( log_msg );
			} else {
				user.WriteMsg( "<span class='notice'>It appears that " + M + " does not have compatible DNA.</span>" );
				return;
			}
			return;
		}

		// Function from file: dna_injector.dm
		public void prepare(  ) {
			dynamic mut_key = null;
			dynamic mut_key2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.add_mutations_static )) {
				mut_key = _a;
				
				this.add_mutations.Add( GlobalVars.mutations_list[mut_key] );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.remove_mutations_static )) {
				mut_key2 = _b;
				
				this.remove_mutations.Add( GlobalVars.mutations_list[mut_key2] );
			}
			return;
		}

		// Function from file: dna_injector.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

	}

}