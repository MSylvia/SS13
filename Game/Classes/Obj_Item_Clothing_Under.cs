// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Under : Obj_Item_Clothing {

		public dynamic fitted = 1;
		public int has_sensor = 1;
		public bool random_sensor = true;
		public int sensor_mode = 0;
		public bool? can_adjust = true;
		public bool adjusted = false;
		public bool alt_covers_chest = false;
		public dynamic suit_color = null;
		public dynamic hastie = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.body_parts_covered = 414;
			this.permeability_coefficient = 081;
			this.slot_flags = 2;
			this.armor = new ByTable().Set( "melee", 0 ).Set( "bullet", 0 ).Set( "laser", 0 ).Set( "energy", 0 ).Set( "bomb", 0 ).Set( "bio", 0 ).Set( "rad", 0 );
			this.icon = "icons/obj/clothing/uniforms.dmi";
		}

		// Function from file: clothing.dm
		public Obj_Item_Clothing_Under ( dynamic loc = null ) : base( (object)(loc) ) {
			
			if ( this.random_sensor ) {
				this.sensor_mode = Convert.ToInt32( Rand13.Pick(new object [] { 0, 1, 2, 3 }) );
			}
			this.adjusted = false;
			this.suit_color = this.item_color;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: clothing.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			switch ((int)( this.sensor_mode )) {
				case 0:
					user.WriteMsg( "Its sensors appear to be disabled." );
					break;
				case 1:
					user.WriteMsg( "Its binary life sensors appear to be enabled." );
					break;
				case 2:
					user.WriteMsg( "Its vital tracker appears to be enabled." );
					break;
				case 3:
					user.WriteMsg( "Its vital tracker and tracking beacon appear to be enabled." );
					break;
			}

			if ( Lang13.Bool( this.hastie ) ) {
				user.WriteMsg( new Txt().A( this.hastie ).item().str( " is attached to it." ).ToString() );
			}
			return 0;
		}

		// Function from file: clothing.dm
		public override bool AltClick( Mob user = null ) {
			base.AltClick( user );

			if ( !user.canUseTopic( user ) ) {
				user.WriteMsg( "<span class='warning'>You can't do that right now!</span>" );
				return false;
			}

			if ( !( Map13.GetDistance( this, user ) <= 1 ) ) {
				return false;
			} else {
				this.rolldown();
			}
			return false;
		}

		// Function from file: clothing.dm
		public void rolldown(  ) {
			
			if ( !this.can_use( Task13.User ) ) {
				return;
			}

			if ( !( this.can_adjust == true ) ) {
				Task13.User.WriteMsg( "<span class='warning'>You cannot wear this suit any differently!</span>" );
				return;
			}

			if ( this.adjusted ) {
				this.fitted = Lang13.Initial( this, "fitted" );
				this.item_color = Lang13.Initial( this, "item_color" );
				this.item_color = this.suit_color;
				this.body_parts_covered = 414;
				Task13.User.WriteMsg( "<span class='notice'>You adjust the suit back to normal.</span>" );
				this.adjusted = false;
			} else {
				
				if ( this.fitted != 2 ) {
					this.fitted = 0;
				}
				this.item_color += "_d";

				if ( this.alt_covers_chest ) {
					this.body_parts_covered = 30;
				} else {
					this.body_parts_covered = 28;
				}
				Task13.User.WriteMsg( "<span class='notice'>You adjust the suit to wear it more casually.</span>" );
				this.adjusted = true;
			}
			Task13.User.update_inv_w_uniform();
			Lang13.SuperCall();
			return;
		}

		// Function from file: clothing.dm
		public bool attachTie( dynamic I = null, dynamic user = null, bool? notifyAttach = null ) {
			notifyAttach = notifyAttach ?? true;

			Ent_Static H = null;

			
			if ( I is Obj_Item_Clothing_Tie ) {
				
				if ( Lang13.Bool( this.hastie ) ) {
					
					if ( Lang13.Bool( user ) ) {
						user.WriteMsg( "<span class='warning'>" + this + " already has an accessory.</span>" );
					}
					return false;
				} else {
					
					if ( Lang13.Bool( user ) ) {
						
						if ( !Lang13.Bool( user.drop_item() ) ) {
							return false;
						}
					}
					this.hastie = I;
					I.loc = this;

					if ( Lang13.Bool( user ) && notifyAttach == true ) {
						user.WriteMsg( "<span class='notice'>You attach " + I + " to " + this + ".</span>" );
					}
					I.transform *= 0.5;
					I.pixel_x += 8;
					I.pixel_y -= 8;
					I.layer = GlobalVars.FLOAT_LAYER;
					this.overlays.Add( I );

					if ( this.loc is Mob_Living_Carbon_Human ) {
						H = this.loc;
						((dynamic)H).update_inv_w_uniform();
					}
					return true;
				}
			}
			return false;
		}

		// Function from file: clothing.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			this.attachTie( A, user );
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: clothing.dm
		public override ByTable worn_overlays( bool? isinhands = null ) {
			isinhands = isinhands ?? GlobalVars.FALSE;

			ByTable _default = null;

			dynamic tie_color = null;

			_default = new ByTable();

			if ( !( isinhands == true ) ) {
				
				if ( this.blood_DNA != null ) {
					_default.Add( new Image( "icons/effects/blood.dmi", null, "uniformblood" ) );
				}

				if ( Lang13.Bool( this.hastie ) ) {
					tie_color = this.hastie.item_color;

					if ( !Lang13.Bool( tie_color ) ) {
						tie_color = this.hastie.icon_state;
					}
					_default.Add( new Image( "icons/mob/ties.dmi", null, "" + tie_color ) );
				}
			}
			return _default;
		}

		// Function from file: clothing.dm
		[Verb]
		[VerbInfo( name: "Remove Accessory", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void removetie(  ) {
			Ent_Static H = null;

			
			if ( !( Task13.User is Mob_Living ) ) {
				return;
			}

			if ( !this.can_use( Task13.User ) ) {
				return;
			}

			if ( Lang13.Bool( this.hastie ) ) {
				this.hastie.transform *= 2;
				this.hastie.pixel_x -= 8;
				this.hastie.pixel_y += 8;
				this.hastie.layer = Lang13.Initial( this.hastie, "layer" );
				this.overlays = null;
				Task13.User.put_in_hands( this.hastie );
				this.hastie = null;

				if ( this.loc is Mob_Living_Carbon_Human ) {
					H = this.loc;
					((dynamic)H).update_inv_w_uniform();
				}
			}
			return;
		}

		// Function from file: clothing.dm
		[Verb]
		[VerbInfo( name: "Adjust Jumpsuit Style", access: VerbAccess.InUserContents, range: 127 )]
		public void jumpsuit_adjust(  ) {
			this.rolldown();
			return;
		}

		// Function from file: clothing.dm
		[Verb]
		[VerbInfo( name: "Adjust Suit Sensors", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public bool toggle(  ) {
			Mob M = null;
			ByTable modes = null;
			dynamic switchMode = null;
			Ent_Static H = null;

			M = Task13.User;

			if ( M is Mob_Dead ) {
				return false;
			}

			if ( !this.can_use( M ) ) {
				return false;
			}

			if ( this.has_sensor >= 2 ) {
				Task13.User.WriteMsg( "The controls are locked." );
				return false;
			}

			if ( this.has_sensor <= 0 ) {
				Task13.User.WriteMsg( "This suit does not have any sensors." );
				return false;
			}
			modes = new ByTable(new object [] { "Off", "Binary vitals", "Exact vitals", "Tracking beacon" });
			switchMode = Interface13.Input( "Select a sensor mode:", "Suit Sensor Mode", modes[this.sensor_mode + 1], null, modes, InputType.Any );

			if ( Map13.GetDistance( Task13.User, this ) > 1 ) {
				Task13.User.WriteMsg( "<span class='warning'>You have moved too far away!</span>" );
				return false;
			}
			this.sensor_mode = modes.Find( switchMode ) - 1;

			if ( this.loc == Task13.User ) {
				
				switch ((int)( this.sensor_mode )) {
					case 0:
						Task13.User.WriteMsg( "<span class='notice'>You disable your suit's remote sensing equipment.</span>" );
						break;
					case 1:
						Task13.User.WriteMsg( "<span class='notice'>Your suit will now only report whether you are alive or dead.</span>" );
						break;
					case 2:
						Task13.User.WriteMsg( "<span class='notice'>Your suit will now only report your exact vital lifesigns.</span>" );
						break;
					case 3:
						Task13.User.WriteMsg( "<span class='notice'>Your suit will now report your exact vital lifesigns as well as your coordinate position.</span>" );
						break;
				}
			}

			if ( this.loc is Mob_Living_Carbon_Human ) {
				H = this.loc;

				if ( ((dynamic)H).w_uniform == this ) {
					((dynamic)H).update_suit_sensors();
				}
			}
			Lang13.SuperCall();
			return false;
		}

	}

}