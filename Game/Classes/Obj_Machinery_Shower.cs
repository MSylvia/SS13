// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Shower : Obj_Machinery {

		public bool on = false;
		public Obj_Effect_Mist mymist = null;
		public bool ismist = false;
		public string watertemp = "normal";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.use_power = 0;
			this.icon = "icons/obj/watercloset.dmi";
			this.icon_state = "shower";
		}

		public Obj_Machinery_Shower ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: watercloset.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Dynamic G = null;
			Ent_Dynamic L = null;

			
			if ( this.on ) {
				this.wash_turf();

				foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Ent_Dynamic) )) {
					G = _a;
					

					if ( G is Mob_Living ) {
						L = G;
						this.wash_mob( L );
					} else {
						this.wash_obj( G );
					}
				}
			}
			return null;
		}

		// Function from file: watercloset.dm
		public void check_heat( Ent_Dynamic C = null ) {
			
			if ( this.watertemp == "freezing" ) {
				((dynamic)C).bodytemperature = Num13.MaxInt( 80, Convert.ToInt32( ((dynamic)C).bodytemperature - 80 ) );
				((dynamic)C).WriteMsg( "<span class='warning'>The water is freezing!</span>" );
			} else if ( this.watertemp == "boiling" ) {
				((dynamic)C).bodytemperature = Num13.MinInt( 500, Convert.ToInt32( ((dynamic)C).bodytemperature + 35 ) );
				((Mob_Living)C).adjustFireLoss( 5 );
				((dynamic)C).WriteMsg( "<span class='danger'>The water is searing!</span>" );
			}
			return;
		}

		// Function from file: watercloset.dm
		public bool wash_mob( Ent_Dynamic L = null ) {
			bool _default = false;

			Ent_Dynamic M = null;
			Ent_Dynamic H = null;
			bool washgloves = false;
			bool washshoes = false;
			bool washmask = false;
			bool washears = false;
			bool washglasses = false;

			((dynamic)L).ExtinguishMob();
			((dynamic)L).adjust_fire_stacks( -20 );

			if ( L is Mob_Living_Carbon ) {
				M = L;
				_default = true;
				this.check_heat( M );

				if ( Lang13.Bool( ((dynamic)M).r_hand ) ) {
					((Ent_Static)((dynamic)M).r_hand).clean_blood();
				}

				if ( Lang13.Bool( ((dynamic)M).l_hand ) ) {
					((Ent_Static)((dynamic)M).l_hand).clean_blood();
				}

				if ( Lang13.Bool( ((dynamic)M).back ) ) {
					
					if ( ((Ent_Static)((dynamic)M).back).clean_blood() ) {
						((dynamic)M).update_inv_back( 0 );
					}
				}

				if ( M is Mob_Living_Carbon_Human ) {
					H = M;
					washgloves = true;
					washshoes = true;
					washmask = true;
					washears = true;
					washglasses = true;

					if ( Lang13.Bool( ((dynamic)H).wear_suit ) ) {
						washgloves = !( ( ( ((dynamic)H).wear_suit.flags_inv ??0) & 1 ) != 0 );
						washshoes = !( ( ( ((dynamic)H).wear_suit.flags_inv ??0) & 8 ) != 0 );
					}

					if ( Lang13.Bool( ((dynamic)H).head ) ) {
						washmask = !( ( ( ((dynamic)H).head.flags_inv ??0) & 1 ) != 0 );
						washglasses = !( ( ( ((dynamic)H).head.flags_inv ??0) & 4 ) != 0 );
						washears = !( ( ( ((dynamic)H).head.flags_inv ??0) & 2 ) != 0 );
					}

					if ( Lang13.Bool( ((dynamic)H).wear_mask ) ) {
						
						if ( washears ) {
							washears = !( ( ( ((dynamic)H).wear_mask.flags_inv ??0) & 2 ) != 0 );
						}

						if ( washglasses ) {
							washglasses = !( ( ( ((dynamic)H).wear_mask.flags_inv ??0) & 4 ) != 0 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).head ) ) {
						
						if ( ((Ent_Static)((dynamic)H).head).clean_blood() ) {
							((dynamic)H).update_inv_head();
						}
					}

					if ( Lang13.Bool( ((dynamic)H).wear_suit ) ) {
						
						if ( ((Ent_Static)((dynamic)H).wear_suit).clean_blood() ) {
							((dynamic)H).update_inv_wear_suit();
						}
					} else if ( Lang13.Bool( ((dynamic)H).w_uniform ) ) {
						
						if ( ((Ent_Static)((dynamic)H).w_uniform).clean_blood() ) {
							((dynamic)H).update_inv_w_uniform();
						}
					}

					if ( washgloves ) {
						this.clean_blood();
					}

					if ( Lang13.Bool( ((dynamic)H).shoes ) && washshoes ) {
						
						if ( ((Ent_Static)((dynamic)H).shoes).clean_blood() ) {
							((dynamic)H).update_inv_shoes();
						}
					}

					if ( Lang13.Bool( ((dynamic)H).wear_mask ) ) {
						
						if ( washmask ) {
							
							if ( ((Ent_Static)((dynamic)H).wear_mask).clean_blood() ) {
								((dynamic)H).update_inv_wear_mask();
							}
						}
					} else {
						((dynamic)H).lip_style = null;
						((dynamic)H).update_body();
					}

					if ( Lang13.Bool( ((dynamic)H).glasses ) && washglasses ) {
						
						if ( ((Ent_Static)((dynamic)H).glasses).clean_blood() ) {
							((dynamic)H).update_inv_glasses();
						}
					}

					if ( Lang13.Bool( ((dynamic)H).ears ) && washears ) {
						
						if ( ((Ent_Static)((dynamic)H).ears).clean_blood() ) {
							((dynamic)H).update_inv_ears();
						}
					}

					if ( Lang13.Bool( ((dynamic)H).belt ) ) {
						
						if ( ((Ent_Static)((dynamic)H).belt).clean_blood() ) {
							((dynamic)H).update_inv_belt();
						}
					}
				} else {
					
					if ( Lang13.Bool( ((dynamic)M).wear_mask ) ) {
						
						if ( ((Ent_Static)((dynamic)M).wear_mask).clean_blood() ) {
							((dynamic)M).update_inv_wear_mask( 0 );
						}
					}
					M.clean_blood();
				}
			} else {
				L.clean_blood();
			}
			return _default;
		}

		// Function from file: watercloset.dm
		public void wash_turf(  ) {
			Ent_Static tile = null;
			Obj_Effect E = null;

			
			if ( this.loc is Tile ) {
				tile = this.loc;
				this.loc.clean_blood();

				foreach (dynamic _a in Lang13.Enumerate( tile, typeof(Obj_Effect) )) {
					E = _a;
					

					if ( E is Obj_Effect_Decal_Cleanable || E is Obj_Effect_Rune ) {
						GlobalFuncs.qdel( E );
					}
				}
			}
			return;
		}

		// Function from file: watercloset.dm
		public void wash_obj( Ent_Dynamic O = null ) {
			Ent_Dynamic I = null;

			O.clean_blood();

			if ( O is Obj_Item ) {
				I = O;
				((Obj)I).extinguish();
			}
			return;
		}

		// Function from file: watercloset.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic L = null;
			Ent_Dynamic C = null;

			base.Crossed( O, (object)(X) );

			if ( this.on ) {
				
				if ( O is Mob_Living ) {
					L = O;

					if ( this.wash_mob( L ) ) {
						C = L;
						((dynamic)C).slip( 4, 2, null, GlobalVars.NO_SLIP_WHEN_WALKING );
					}
				} else {
					this.wash_obj( O );
				}
			}
			return null;
		}

		// Function from file: watercloset.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( this.mymist != null ) {
				GlobalFuncs.qdel( this.mymist );
			}

			if ( this.on ) {
				this.overlays.Add( new Image( "icons/obj/watercloset.dmi", this, "water", 5, this.dir ) );

				if ( this.watertemp == "freezing" ) {
					return null;
				}

				if ( !this.ismist ) {
					Task13.Schedule( 50, (Task13.Closure)(() => {
						
						if ( this != null && this.on ) {
							this.ismist = true;
							this.mymist = new Obj_Effect_Mist( this.loc );
						}
						return;
					}));
				} else {
					this.ismist = true;
					this.mymist = new Obj_Effect_Mist( this.loc );
				}
			} else if ( this.ismist ) {
				this.ismist = true;
				this.mymist = new Obj_Effect_Mist( this.loc );
				Task13.Schedule( 250, (Task13.Closure)(() => {
					
					if ( !this.on && this.mymist != null ) {
						GlobalFuncs.qdel( this.mymist );
						this.ismist = false;
					}
					return;
				}));
			}
			return null;
		}

		// Function from file: watercloset.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A.type == typeof(Obj_Item_Device_Analyzer) ) {
				user.WriteMsg( "<span class='notice'>The water temperature seems to be " + this.watertemp + ".</span>" );
			}

			if ( A is Obj_Item_Weapon_Wrench ) {
				user.WriteMsg( new Txt( "<span class='notice'>You begin to adjust the temperature valve with " ).the( A ).item().str( "...</span>" ).ToString() );

				if ( GlobalFuncs.do_after( user, 50 / A.toolspeed, null, this ) ) {
					
					switch ((string)( this.watertemp )) {
						case "normal":
							this.watertemp = "freezing";
							break;
						case "freezing":
							this.watertemp = "boiling";
							break;
						case "boiling":
							this.watertemp = "normal";
							break;
					}
					((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " adjusts the shower with " ).the( A ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You adjust the shower with " ).the( A ).item().str( " to " ).item( this.watertemp ).str( " temperature.</span>" ).ToString() );
					GlobalFuncs.log_game( "" + GlobalFuncs.key_name( user ) + " has wrenched a shower to " + this.watertemp + " at (" + this.x + "," + this.y + "," + this.z + ")" );
					this.add_hiddenprint( user );
				}
			}
			return null;
		}

		// Function from file: watercloset.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			Ent_Dynamic G = null;
			Ent_Dynamic L = null;
			Ent_Static tile = null;

			this.on = !this.on;
			this.update_icon();
			this.add_fingerprint( a );

			if ( this.on ) {
				this.wash_turf();

				foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Ent_Dynamic) )) {
					G = _a;
					

					if ( G is Mob_Living ) {
						L = G;
						this.wash_mob( L );
					} else {
						this.wash_obj( G );
					}
				}
			} else if ( this.loc is Tile_Simulated ) {
				tile = this.loc;
				((Tile_Simulated)tile).MakeSlippery();
			}
			return null;
		}

	}

}