// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Paicard : Obj_Item_Device {

		public dynamic radio = null;
		public bool looking_for_personality = false;
		public Mob_Living_Silicon_Pai pai = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "electronic";
			this.w_class = 2;
			this.slot_flags = 512;
			this.origin_tech = "programming=2";
			this.icon = "icons/obj/aicards.dmi";
			this.icon_state = "pai";
		}

		// Function from file: paicard.dm
		public Obj_Item_Device_Paicard ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.overlays.Add( "pai-off" );
			return;
		}

		// Function from file: paicard.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( this.pai != null ) {
				this.pai.emp_act( severity );
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: paicard.dm
		public void alertUpdate(  ) {
			this.visible_message( "<span class ='info'>" + this + " flashes a message across its screen, \"Additional personalities available for download.\"", "<span class='notice'>" + this + " bleeps electronically.</span>" );
			return;
		}

		// Function from file: paicard.dm
		public void setEmotion( int emotion = 0 ) {
			
			if ( this.pai != null ) {
				this.overlays.Cut();

				switch ((int)( emotion )) {
					case 1:
						this.overlays.Add( "pai-happy" );
						break;
					case 2:
						this.overlays.Add( "pai-cat" );
						break;
					case 3:
						this.overlays.Add( "pai-extremely-happy" );
						break;
					case 4:
						this.overlays.Add( "pai-face" );
						break;
					case 5:
						this.overlays.Add( "pai-laugh" );
						break;
					case 6:
						this.overlays.Add( "pai-off" );
						break;
					case 7:
						this.overlays.Add( "pai-sad" );
						break;
					case 8:
						this.overlays.Add( "pai-angry" );
						break;
					case 9:
						this.overlays.Add( "pai-what" );
						break;
					case 10:
						this.overlays.Add( "pai-null" );
						break;
				}
			}
			return;
		}

		// Function from file: paicard.dm
		public void removePersonality(  ) {
			this.pai = null;
			this.overlays.Cut();
			this.overlays.Add( "pai-off" );
			return;
		}

		// Function from file: paicard.dm
		public void setPersonality( Mob_Living_Silicon_Pai personality = null ) {
			this.pai = personality;
			this.overlays.Add( "pai-null" );
			return;
		}

		// Function from file: paicard.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob M = null;
			dynamic confirm = null;
			double? t1 = null;
			string newlaws = null;
			dynamic slaws = null;

			
			if ( !( Task13.User != null ) || Task13.User.stat != 0 ) {
				return null;
			}

			if ( Lang13.Bool( href_list["request"] ) ) {
				this.looking_for_personality = true;
				GlobalVars.SSpai.findPAI( this, Task13.User );
			}

			if ( this.pai != null ) {
				
				if ( Lang13.Bool( href_list["setdna"] ) ) {
					
					if ( Lang13.Bool( this.pai.master_dna ) ) {
						return null;
					}

					if ( !( Task13.User is Mob_Living_Carbon ) ) {
						Task13.User.WriteMsg( "<span class='warning'>You don't have any DNA, or your DNA is incompatible with this device!</span>" );
					} else {
						M = Task13.User;
						this.pai.master = M.real_name;
						this.pai.master_dna = ((dynamic)M).dna.unique_enzymes;
						this.pai.WriteMsg( "<span class='notice'>You have been bound to a new master.</span>" );
					}
				}

				if ( Lang13.Bool( href_list["wipe"] ) ) {
					confirm = Interface13.Input( "Are you CERTAIN you wish to delete the current personality? This action cannot be undone.", "Personality Wipe", null, null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

					if ( confirm == "Yes" ) {
						
						if ( this.pai != null ) {
							this.pai.WriteMsg( "<span class='warning'>You feel yourself slipping away from reality.</span>" );
							this.pai.WriteMsg( "<span class='danger'>Byte by byte you lose your sense of self.</span>" );
							this.pai.WriteMsg( "<span class='userdanger'>Your mental faculties leave you.</span>" );
							this.pai.WriteMsg( "<span class='rose'>oblivion... </span>" );
							this.pai.death( false );
						}
						this.removePersonality();
					}
				}

				if ( Lang13.Bool( href_list["wires"] ) ) {
					t1 = String13.ParseNumber( href_list["wires"] );

					if ( Lang13.Bool( this.radio ) ) {
						((Wires)this.radio.wires).CutWireIndex( t1 );
					}
				}

				if ( Lang13.Bool( href_list["setlaws"] ) ) {
					newlaws = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Enter any additional directives you would like your pAI personality to follow. Note that these directives will not override the personality's allegiance to its imprinted master. Conflicting directives will be ignored.", "pAI Directive Configuration", this.pai.laws.supplied[1], null, null, InputType.StrMultiline ) ), 1, 1024 );

					if ( Lang13.Bool( newlaws ) && this.pai != null ) {
						this.pai.add_supplied_law( 0, newlaws );
						this.pai.WriteMsg( "Your supplemental directives have been updated. Your new directives are:" );
						this.pai.WriteMsg( "Prime Directive : <br>" + this.pai.laws.zeroth );

						foreach (dynamic _a in Lang13.Enumerate( this.pai.laws.supplied )) {
							slaws = _a;
							
							this.pai.WriteMsg( "Supplemental Directives: <br>" + slaws );
						}
					}
				}
			}
			this.attack_self( Task13.User );
			return null;
		}

		// Function from file: paicard.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;
			dynamic slaws = null;

			
			if ( !( Map13.GetDistance( this, user ) <= 1 ) ) {
				return null;
			}
			((Mob)user).set_machine( this );
			dat = "<TT><B>Personal AI Device</B><BR>";

			if ( this.pai != null && ( !Lang13.Bool( this.pai.master_dna ) || !Lang13.Bool( this.pai.master ) ) ) {
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";setdna=1'>Imprint Master DNA</a><br>" ).ToString();
			}

			if ( this.pai != null ) {
				dat += "Installed Personality: " + this.pai.name + "<br>";
				dat += "Prime directive: <br>" + this.pai.laws.zeroth + "<br>";

				foreach (dynamic _a in Lang13.Enumerate( this.pai.laws.supplied )) {
					slaws = _a;
					
					dat += "Additional directives: <br>" + slaws + "<br>";
				}
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";setlaws=1'>Configure Directives</a><br>" ).ToString();
				dat += "<br>";
				dat += "<h3>Device Settings</h3><br>";

				if ( Lang13.Bool( this.radio ) ) {
					dat += "<b>Radio Uplink</b><br>";
					dat += new Txt( "Transmit: <A href='byond://?src=" ).Ref( this ).str( ";wires=" ).item( GlobalVars.WIRE_TRANSMIT ).str( "'>" ).item( ( ((Wires)this.radio.wires).IsIndexCut( GlobalVars.WIRE_TRANSMIT ) != 0 ? "Disabled" : "Enabled" ) ).str( "</A><br>" ).ToString();
					dat += new Txt( "Receive: <A href='byond://?src=" ).Ref( this ).str( ";wires=" ).item( GlobalVars.WIRE_RECEIVE ).str( "'>" ).item( ( ((Wires)this.radio.wires).IsIndexCut( GlobalVars.WIRE_RECEIVE ) != 0 ? "Disabled" : "Enabled" ) ).str( "</A><br>" ).ToString();
				} else {
					dat += "<b>Radio Uplink</b><br>";
					dat += "<font color=red><i>Radio firmware not loaded. Please install a pAI personality to load firmware.</i></font><br>";
				}
				dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";wipe=1'>[Wipe current pAI personality]</a><br>" ).ToString();
			} else if ( this.looking_for_personality ) {
				dat += "Searching for a personality...";
				dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";request=1'>[View available personalities]</a><br>" ).ToString();
			} else {
				dat += "No personality is installed.<br>";
				dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";request=1'>[Request personal AI personality]</a><br>" ).ToString();
				dat += "Each time this button is pressed, a request will be sent out to any available personalities. Check back often and give a lot of time for personalities to respond. This process could take anywhere from 15 seconds to several minutes, depending on the available personalities' timeliness.";
			}
			Interface13.Browse( user, dat, "window=paicard" );
			GlobalFuncs.onclose( user, "paicard" );
			return null;
		}

		// Function from file: paicard.dm
		public override dynamic Destroy(  ) {
			
			if ( !( this.pai == null ) ) {
				this.pai.death( false );
			}
			return base.Destroy();
		}

	}

}