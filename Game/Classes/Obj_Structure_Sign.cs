// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Sign : Obj_Structure {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/decals.dmi";
			this.layer = 3.5;
		}

		public Obj_Structure_Sign ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: signs.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			ByTable sign_types = null;
			Type sign_type = null;

			
			if ( A is Obj_Item_Weapon_Wrench ) {
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " starts removing " + this + "...</span>", "<span class='notice'>You start unfastening " + this + ".</span>" );
				GlobalFuncs.playsound( this, "sound/items/ratchet.ogg", 50, 1 );

				if ( !GlobalFuncs.do_after( user, 30 / A.toolspeed, null, this ) ) {
					return null;
				}
				GlobalFuncs.playsound( this, "sound/items/Deconstruct.ogg", 50, 1 );
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " unfastens " + this + ".</span>", "<span class='notice'>You unfasten " + this + ".</span>" );
				new Obj_Item_SignBacking( GlobalFuncs.get_turf( user ) );
				GlobalFuncs.qdel( this );
			}

			if ( A is Obj_Item_Weapon_Pen ) {
				sign_types = new ByTable(new object [] { 
					"Secure Area", 
					"Biohazard", 
					"High Voltage", 
					"Radiation", 
					"Hard Vacuum Ahead", 
					"Disposal: Leads To Space", 
					"Danger: Fire", 
					"No Smoking", 
					"Medbay", 
					"Science", 
					"Chemistry", 
					"Hydroponics", 
					"Xenobiology"
				 });

				dynamic _a = Interface13.Input( user, "Select a sign type.", "Sign Customization", null, sign_types, InputType.Null | InputType.Any ); // Was a switch-case, sorry for the mess.
				if ( _a=="Blank" ) {
					sign_type = typeof(Obj_Structure_Sign_Basic);
				} else if ( _a=="Secure Area" ) {
					sign_type = typeof(Obj_Structure_Sign_Securearea);
				} else if ( _a=="Biohazard" ) {
					sign_type = typeof(Obj_Structure_Sign_Biohazard);
				} else if ( _a=="High Voltage" ) {
					sign_type = typeof(Obj_Structure_Sign_Electricshock);
				} else if ( _a=="Radiation" ) {
					sign_type = typeof(Obj_Structure_Sign_Radiation);
				} else if ( _a=="Hard Vacuum Ahead" ) {
					sign_type = typeof(Obj_Structure_Sign_Vacuum);
				} else if ( _a=="Disposal: Leads To Space" ) {
					sign_type = typeof(Obj_Structure_Sign_Deathsposal);
				} else if ( _a=="Danger: Fire" ) {
					sign_type = typeof(Obj_Structure_Sign_Fire);
				} else if ( _a=="No Smoking" ) {
					sign_type = typeof(Obj_Structure_Sign_Nosmoking1);
				} else if ( _a=="Medbay" ) {
					sign_type = typeof(Obj_Structure_Sign_Bluecross2);
				} else if ( _a=="Science" ) {
					sign_type = typeof(Obj_Structure_Sign_Science);
				} else if ( _a=="Chemistry" ) {
					sign_type = typeof(Obj_Structure_Sign_Chemistry);
				} else if ( _a=="Hydroponics" ) {
					sign_type = typeof(Obj_Structure_Sign_Botany);
				} else if ( _a=="Xenobiology" ) {
					sign_type = typeof(Obj_Structure_Sign_Xenobio);
				}

				if ( !( sign_type != null ) ) {
					return null;
				}
				Lang13.Call( sign_type, GlobalFuncs.get_turf( this ) );
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: signs.dm
		public override bool blob_act( dynamic severity = null ) {
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: signs.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			GlobalFuncs.qdel( this );
			return false;
		}

	}

}