// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Glass : Obj_Item_Weapon_ReagentContainers {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.amount_per_transfer_from_this = 10;
			this.possible_transfer_amounts = new ByTable(new object [] { 5, 10, 15, 20, 25, 30, 50 });
			this.volume = 50;
			this.flags = 4096;
			this.spillable = true;
			this.can_be_placed_into = new ByTable(new object [] { 
				typeof(Obj_Machinery_ChemMaster), 
				typeof(Obj_Machinery_ChemDispenser), 
				typeof(Obj_Machinery_ChemHeater), 
				typeof(Obj_Machinery_Reagentgrinder), 
				typeof(Obj_Machinery_Biogenerator), 
				typeof(Obj_Machinery_RND_DestructiveAnalyzer), 
				typeof(Obj_Machinery_RND_Experimentor), 
				typeof(Obj_Machinery_Autolathe), 
				typeof(Obj_Structure_Table), 
				typeof(Obj_Structure_Rack), 
				typeof(Obj_Structure_Closet), 
				typeof(Obj_Structure_Sink), 
				typeof(Obj_Item_Weapon_Storage), 
				typeof(Obj_Machinery_Atmospherics_Components_Unary_CryoCell), 
				typeof(Obj_Item_Weapon_Grenade_ChemGrenade), 
				typeof(Mob_Living_SimpleAnimal_Bot_Medbot), 
				typeof(Obj_Machinery_Computer_Pandemic), 
				typeof(Obj_Structure_Safe), 
				typeof(Obj_Machinery_Disposal), 
				typeof(Obj_Machinery_Hydroponics), 
				typeof(Obj_Machinery_Biogenerator), 
				typeof(Mob_Living_SimpleAnimal_Cow), 
				typeof(Mob_Living_SimpleAnimal_Hostile_Retaliate_Goat)
			 });
		}

		public Obj_Item_Weapon_ReagentContainers_Glass ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			
		}

		// Function from file: glass.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic hotness = null;
			dynamic added_heat = null;
			dynamic E = null;

			hotness = ((Obj_Item)A).is_hot();

			if ( Lang13.Bool( hotness ) ) {
				added_heat = hotness / 100;

				if ( this.reagents != null ) {
					
					if ( Convert.ToDouble( this.reagents.chem_temp ) < Convert.ToDouble( hotness ) ) {
						this.reagents.chem_temp += added_heat;
						user.WriteMsg( "<span class='notice'>You heat " + this + " with " + A + ".</span>" );
						this.reagents.handle_reactions();
					} else {
						user.WriteMsg( "<span class='warning'>" + this + " is already hotter than " + A + "!</span>" );
					}
				}
			}

			if ( A is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Egg ) {
				E = A;

				if ( this.reagents != null ) {
					
					if ( ( this.reagents.total_volume ??0) >= Convert.ToDouble( this.reagents.maximum_volume ) ) {
						user.WriteMsg( "<span class='notice'>" + this + " is full.</span>" );
					} else {
						user.WriteMsg( "<span class='notice'>You break " + E + " in " + this + ".</span>" );
						this.reagents.add_reagent( "eggyolk", 5 );
						GlobalFuncs.qdel( E );
					}
					return null;
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: glass.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic trans = null;
			dynamic trans2 = null;

			
			if ( !( proximity_flag == true ) || !this.check_allowed_items( target, null, true ) ) {
				return false;
			} else if ( target is Obj_Structure_ReagentDispensers ) {
				
				if ( Lang13.Bool( target.reagents ) && !Lang13.Bool( target.reagents.total_volume ) ) {
					user.WriteMsg( "<span class='warning'>" + target + " is empty and can't be refilled!</span>" );
					return false;
				}

				if ( ( this.reagents.total_volume ??0) >= Convert.ToDouble( this.reagents.maximum_volume ) ) {
					user.WriteMsg( "<span class='notice'>" + this + " is full.</span>" );
					return false;
				}
				trans = ((Reagents)target.reagents).trans_to( this, this.amount_per_transfer_from_this );
				user.WriteMsg( new Txt( "<span class='notice'>You fill " ).item( this ).str( " with " ).item( trans ).str( " unit" ).s().str( " of the contents of " ).item( target ).str( ".</span>" ).ToString() );
			} else if ( Lang13.Bool( ((Ent_Static)target).is_open_container() ) && Lang13.Bool( target.reagents ) ) {
				
				if ( !Lang13.Bool( this.reagents.total_volume ) ) {
					user.WriteMsg( "<span class='warning'>" + this + " is empty!</span>" );
					return false;
				}

				if ( ( target.reagents.total_volume ??0) >= Convert.ToDouble( target.reagents.maximum_volume ) ) {
					user.WriteMsg( "<span class='notice'>" + target + " is full.</span>" );
					return false;
				}
				trans2 = this.reagents.trans_to( target, this.amount_per_transfer_from_this );
				user.WriteMsg( new Txt( "<span class='notice'>You transfer " ).item( trans2 ).str( " unit" ).s().str( " of the solution to " ).item( target ).str( ".</span>" ).ToString() );
			} else if ( target is Obj_Item_Clothing_Suit_Space_SpaceNinja ) {
				return false;
			} else if ( target is Obj_Effect_Decal_Cleanable ) {
				return false;
			} else if ( Lang13.Bool( this.reagents.total_volume ) ) {
				
				if ( user.a_intent == "harm" ) {
					((Ent_Static)user).visible_message( "<span class='danger'>" + user + " splashes the contents of " + this + " onto " + target + "!</span>", "<span class='notice'>You splash the contents of " + this + " onto " + target + ".</span>" );
					this.reagents.reaction( target, GlobalVars.TOUCH );
					this.reagents.clear_reagents();
				}
			}
			return false;
		}

		// Function from file: glass.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic R = null;
			Reagent A = null;
			double? fraction = null;

			
			if ( !this.canconsume( M, user ) ) {
				return false;
			}

			if ( !this.spillable ) {
				return false;
			}

			if ( !( this.reagents != null ) || !Lang13.Bool( this.reagents.total_volume ) ) {
				user.WriteMsg( "<span class='warning'>" + this + " is empty!</span>" );
				return false;
			}

			if ( M is Mob ) {
				
				if ( user.a_intent == "harm" ) {
					((Ent_Static)M).visible_message( "<span class='danger'>" + user + " splashes the contents of " + this + " onto " + M + "!</span>", "<span class='userdanger'>" + user + " splashes the contents of " + this + " onto " + M + "!</span>" );

					if ( this.reagents != null ) {
						
						foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
							A = _a;
							
							R += A.id + " (";
							R += String13.NumberToString( A.volume ) + "),";
						}
					}
					this.reagents.reaction( M, GlobalVars.TOUCH );
					GlobalFuncs.add_logs( user, M, "splashed", R );
					this.reagents.clear_reagents();
				} else {
					
					if ( M != user ) {
						((Ent_Static)M).visible_message( "<span class='danger'>" + user + " attempts to feed something to " + M + ".</span>", "<span class='userdanger'>" + user + " attempts to feed something to you.</span>" );

						if ( !GlobalFuncs.do_mob( user, M ) ) {
							return false;
						}

						if ( !( this.reagents != null ) || !Lang13.Bool( this.reagents.total_volume ) ) {
							return false;
						}
						((Ent_Static)M).visible_message( "<span class='danger'>" + user + " feeds something to " + M + ".</span>", "<span class='userdanger'>" + user + " feeds something to you.</span>" );
						GlobalFuncs.add_logs( user, M, "fed", this.reagentlist( this ) );
					} else {
						user.WriteMsg( "<span class='notice'>You swallow a gulp of " + this + ".</span>" );
					}
					fraction = Num13.MinInt( ((int)( 5 / ( this.reagents.total_volume ??0) )), 1 );
					this.reagents.reaction( M, GlobalVars.INGEST, fraction );
					Task13.Schedule( 5, (Task13.Closure)(() => {
						this.reagents.trans_to( M, 5 );
						return;
					}));
					GlobalFuncs.playsound( M.loc, "sound/items/drink.ogg", Rand13.Int( 10, 50 ), 1 );
				}
			}
			return false;
		}

	}

}