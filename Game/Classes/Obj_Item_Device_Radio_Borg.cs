// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Radio_Borg : Obj_Item_Device_Radio {

		public Obj_Item_Device_Radio_Borg ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: radio.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			dynamic ch_name = null;

			
			if ( !Lang13.Bool( this.on ) ) {
				return null;
			}
			dat = "<html><head><title>" + this + "</title></head><body><TT>";
			dat += new Txt( "\n				Speaker: " ).item( ( Lang13.Bool( this.listening ) ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=0'>Engaged</A>" ).ToString() : new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=1'>Disengaged</A>" ).ToString() ) ).str( "<BR>\n				Frequency:\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=-10'>-</A>\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=-2'>-</A>\n				" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=2'>+</A>\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=10'>+</A><BR>\n				<A href='byond://?src=" ).Ref( this ).str( ";mode=1'>Toggle Broadcast Mode</A><BR>\n				" ).ToString();

			if ( this.subspace_transmission ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
					ch_name = _a;
					
					dat += this.text_sec_channel( ch_name, this.channels[ch_name] );
				}
			}
			dat += "" + this.text_wires() + "</TT></body></html>";
			Interface13.Browse( user, dat, "window=radio" );
			GlobalFuncs.onclose( user, "radio" );
			return null;
		}

		// Function from file: radio.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Task13.User.stat != 0 || !Lang13.Bool( this.on ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["mode"] ) ) {
				this.subspace_transmission = !this.subspace_transmission;

				if ( !this.subspace_transmission ) {
					this.channels = new ByTable();
				} else {
					this.recalculateChannels();
				}
				Task13.User.WriteMsg( "Subspace Transmission is " + ( this.subspace_transmission ? "enabled" : "disabled" ) );
			}
			base.Topic( href, href_list, (object)(hsrc) );
			return null;
		}

		// Function from file: radio.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic ch_name = null;
			dynamic T = null;

			((Mob)user).set_machine( this );

			if ( !( A is Obj_Item_Weapon_Screwdriver || A is Obj_Item_Device_Encryptionkey ) ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( Lang13.Bool( this.keyslot ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
						ch_name = _a;
						
						GlobalVars.SSradio.remove_object( this, Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name] ) );
						this.secure_radio_connections[ch_name] = null;
					}

					if ( Lang13.Bool( this.keyslot ) ) {
						T = GlobalFuncs.get_turf( user );

						if ( Lang13.Bool( T ) ) {
							this.keyslot.loc = T;
							this.keyslot = null;
						}
					}
					this.recalculateChannels();
					user.WriteMsg( "<span class='notice'>You pop out the encryption key in the radio.</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>This radio doesn't have any encryption keys!</span>" );
				}
			}

			if ( A is Obj_Item_Device_Encryptionkey ) {
				
				if ( Lang13.Bool( this.keyslot ) ) {
					user.WriteMsg( "<span class='warning'>The radio can't hold another key!</span>" );
					return null;
				}

				if ( !Lang13.Bool( this.keyslot ) ) {
					
					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}
					A.loc = this;
					this.keyslot = A;
				}
				this.recalculateChannels();
			}
			return null;
		}

	}

}