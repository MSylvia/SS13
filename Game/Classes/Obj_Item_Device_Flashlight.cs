// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Flashlight : Obj_Item_Device {

		public bool on = false;
		public double brightness_on = 4;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "flashlight";
			this.w_class = 2;
			this.flags = 64;
			this.slot_flags = 512;
			this.materials = new ByTable().Set( "$metal", 50 ).Set( "$glass", 20 );
			this.action_button_name = "Toggle Light";
			this.icon = "icons/obj/lighting.dmi";
			this.icon_state = "flashlight";
		}

		public Obj_Item_Device_Flashlight ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: flashlight.dm
		public override bool dropped( dynamic user = null ) {
			
			if ( this.on ) {
				((Ent_Static)user).AddLuminosity( -this.brightness_on );
				this.SetLuminosity( this.brightness_on );
			}
			return false;
		}

		// Function from file: flashlight.dm
		public override bool pickup( dynamic user = null ) {
			
			if ( this.on ) {
				((Ent_Static)user).AddLuminosity( this.brightness_on );
				this.SetLuminosity( 0 );
			}
			return false;
		}

		// Function from file: flashlight.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic H = null;

			this.add_fingerprint( user );

			if ( this.on && user.zone_sel.selecting == "eyes" ) {
				
				if ( ( Lang13.Bool( user.disabilities & 256 ) || ((Mob_Living)user).getBrainLoss() >= 60 ) && Rand13.PercentChance( 50 ) ) {
					return base.attack( (object)(M), (object)(user), def_zone );
				}

				if ( !((Mob)user).IsAdvancedToolUser() ) {
					user.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
					return false;
				}
				H = M;

				if ( M is Mob_Living_Carbon_Human && ( Lang13.Bool( H.head ) && Lang13.Bool( H.head.flags_cover & 4 ) || Lang13.Bool( H.wear_mask ) && Lang13.Bool( H.wear_mask.flags_cover & 2 ) || Lang13.Bool( H.glasses ) && Lang13.Bool( H.glasses.flags_cover & 1 ) ) ) {
					user.WriteMsg( "<span class='notice'>You're going to need to remove that " + ( Lang13.Bool( H.head ) && Lang13.Bool( H.head.flags_cover & 4 ) ? "helmet" : ( Lang13.Bool( H.wear_mask ) && Lang13.Bool( H.wear_mask.flags_cover & 2 ) ? "mask" : "glasses" ) ) + " first.</span>" );
					return false;
				}

				if ( M == user ) {
					
					if ( !( M.eye_blind != 0 ) ) {
						Icon13.Flick( "flash", M.flash );
						((Ent_Static)M).visible_message( new Txt().item( M ).str( " directs " ).item( this ).str( " to " ).his_her_its_their().str( " eyes." ).ToString(), "<span class='notice'>You wave the light in front of your eyes! Trippy!</span>" );
					} else {
						((Ent_Static)M).visible_message( new Txt().item( M ).str( " directs " ).item( this ).str( " to " ).his_her_its_their().str( " eyes." ).ToString(), "<span class='notice'>You wave the light in front of your eyes.</span>" );
					}
					return false;
				}
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " directs " + this + " to " + M + "'s eyes.</span>", "<span class='danger'>You direct " + this + " to " + M + "'s eyes.</span>" );
				M.WriteMsg( "<span class='danger'>" + user + " directs " + this + " to your eyes.</span>" );

				if ( M is Mob_Living_Carbon_Human || M is Mob_Living_Carbon_Monkey ) {
					
					if ( Convert.ToInt32( M.stat ) == 2 || Lang13.Bool( M.disabilities & 1 ) ) {
						user.WriteMsg( "<span class='warning'>" + M + " pupils don't react to the light!</span>" );
					} else if ( ((Dna)M.dna).check_mutation( "X Ray Vision" ) != 0 ) {
						user.WriteMsg( "<span class='danger'>" + M + " pupils give an eerie glow!</span>" );
					} else if ( !( M.eye_blind != 0 ) ) {
						Icon13.Flick( "flash", M.flash );
						user.WriteMsg( "<span class='notice'>" + M + "'s pupils narrow.</span>" );
					}
				}
			} else {
				return base.attack( (object)(M), (object)(user), def_zone );
			}
			return false;
		}

		// Function from file: flashlight.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !( user.loc is Tile ) ) {
				user.WriteMsg( "<span class='warning'>You cannot turn the light on while in this " + user.loc + "!</span>" );
				return 0;
			}
			this.on = !this.on;
			this.update_brightness( user );
			return 1;
		}

		// Function from file: flashlight.dm
		public virtual void update_brightness( dynamic user = null ) {
			
			if ( this.on ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-on";

				if ( this.loc == user ) {
					((Ent_Static)user).AddLuminosity( this.brightness_on );
				} else if ( this.loc is Tile ) {
					this.SetLuminosity( this.brightness_on );
				}
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );

				if ( this.loc == user ) {
					((Ent_Static)user).AddLuminosity( -this.brightness_on );
				} else if ( this.loc is Tile ) {
					this.SetLuminosity( 0 );
				}
			}
			return;
		}

		// Function from file: flashlight.dm
		public override void initialize(  ) {
			base.initialize();

			if ( this.on ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-on";
				this.SetLuminosity( this.brightness_on );
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
				this.SetLuminosity( 0 );
			}
			return;
		}

	}

}