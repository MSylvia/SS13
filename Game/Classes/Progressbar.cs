// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Progressbar : Game_Data {

		public dynamic goal = 1;
		public Image bar = null;
		public bool shown = false;
		public dynamic user = null;
		public Base_Client client = null;

		// Function from file: progressbar.dm
		public Progressbar ( dynamic User = null, dynamic goal_number = null, dynamic target = null ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !( target is Ent_Static ) ) {
				new Exception( "Invalid target given" );
			}

			if ( Lang13.Bool( goal_number ) ) {
				this.goal = goal_number;
			}
			this.bar = new Image( "icons/effects/progessbar.dmi", target, "prog_bar_0" );
			this.bar.pixel_y = 32;
			this.user = User;

			if ( Lang13.Bool( this.user ) ) {
				this.client = this.user.client;
			}
			return;
		}

		// Function from file: progressbar.dm
		public override dynamic Destroy(  ) {
			dynamic _default = null;

			
			if ( this.client != null ) {
				this.client.images.Remove( this.bar );
			}
			GlobalFuncs.qdel( this.bar );
			_default = base.Destroy();
			return _default;
		}

		// Function from file: progressbar.dm
		public void update( int progress = 0 ) {
			
			if ( !Lang13.Bool( this.user ) || !Lang13.Bool( this.user.client ) ) {
				this.shown = false;
				return;
			}

			if ( this.user.client != this.client ) {
				
				if ( this.client != null ) {
					this.client.images.Remove( this.bar );
				}

				if ( Lang13.Bool( this.user.client ) ) {
					this.user.client.images.Add( this.bar );
				}
			}
			progress = Num13.MaxInt( 0, Num13.MinInt( progress, Convert.ToInt32( this.goal ) ) );
			this.bar.icon_state = "prog_bar_" + Num13.Round( progress / Convert.ToDouble( this.goal ) * 100, 5 );

			if ( !this.shown ) {
				this.user.client.images.Add( this.bar );
				this.shown = true;
			}
			return;
		}

	}

}