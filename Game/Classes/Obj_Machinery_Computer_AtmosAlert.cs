// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_AtmosAlert : Obj_Machinery_Computer {

		public ByTable priority_alarms = new ByTable();
		public ByTable minor_alarms = new ByTable();
		public double? receive_frequency = 1437;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_AtmosAlert);
			this.icon_screen = "alert:0";
			this.icon_keyboard = "atmos_key";
		}

		public Obj_Machinery_Computer_AtmosAlert ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: atmos_alert.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string removing_zone = null;
			dynamic zone = null;
			string removing_zone2 = null;
			dynamic zone2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["priority_clear"] ) ) {
				removing_zone = href_list["priority_clear"];

				foreach (dynamic _a in Lang13.Enumerate( this.priority_alarms )) {
					zone = _a;
					

					if ( String13.CKey( zone ) == removing_zone ) {
						Task13.User.WriteMsg( new Txt().green().str( "Priority Alert for " ).item( GlobalFuncs.format_text( zone ) ).str( " cleared." ).ToString() );
						this.priority_alarms.Remove( zone );
					}
				}
			}

			if ( Lang13.Bool( href_list["minor_clear"] ) ) {
				removing_zone2 = href_list["minor_clear"];

				foreach (dynamic _b in Lang13.Enumerate( this.minor_alarms )) {
					zone2 = _b;
					

					if ( String13.CKey( zone2 ) == removing_zone2 ) {
						Task13.User.WriteMsg( new Txt().green().str( "Minor Alert for " ).item( GlobalFuncs.format_text( zone2 ) ).str( " cleared." ).ToString() );
						this.minor_alarms.Remove( zone2 );
					}
				}
			}
			this.update_icon();
			return null;
		}

		// Function from file: atmos_alert.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.priority_alarms.len != 0 ) {
				this.overlays.Add( "alert:2" );
			} else if ( this.minor_alarms.len != 0 ) {
				this.overlays.Add( "alert:1" );
			}
			return null;
		}

		// Function from file: atmos_alert.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( Lang13.Bool( base.process( (object)(seconds) ) ) ) {
				this.updateDialog();
			}
			return null;
		}

		// Function from file: atmos_alert.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			Browser popup = null;

			popup = new Browser( user, "computer", this.name );
			popup.set_content( this.return_text() );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: atmos_alert.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: atmos_alert.dm
		public string return_text(  ) {
			string priority_text = null;
			string minor_text = null;
			dynamic zone = null;
			dynamic zone2 = null;
			string output = null;

			
			if ( this.priority_alarms.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.priority_alarms )) {
					zone = _a;
					
					priority_text += new Txt( "<FONT color='red'><B>" ).item( GlobalFuncs.format_text( zone ) ).str( "</B></FONT>  <A href='?src=" ).Ref( this ).str( ";priority_clear=" ).item( String13.CKey( zone ) ).str( "'>X</A><BR>" ).ToString();
				}
			} else {
				priority_text = "No priority alerts detected.<BR>";
			}

			if ( this.minor_alarms.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.minor_alarms )) {
					zone2 = _b;
					
					minor_text += new Txt( "<B>" ).item( GlobalFuncs.format_text( zone2 ) ).str( "</B>  <A href='?src=" ).Ref( this ).str( ";minor_clear=" ).item( String13.CKey( zone2 ) ).str( "'>X</A><BR>" ).ToString();
				}
			} else {
				minor_text = "No minor alerts detected.<BR>";
			}
			output = "<h2>Priority Alerts:</h2>\n" + priority_text + @"
<BR>
<HR>
<h2>Minor Alerts:</h2>
" + minor_text + "\n<BR>";
			return output;
		}

		// Function from file: atmos_alert.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalVars.SSradio.remove_object( this, this.receive_frequency );
			this.receive_frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.receive_frequency, GlobalVars.RADIO_ATMOSIA );
			return;
		}

		// Function from file: atmos_alert.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic zone = null;
			string severity = null;

			
			if ( !( signal != null ) || signal.encryption != 0 ) {
				return false;
			}
			zone = signal.data["zone"];
			severity = signal.data["alert"];

			if ( !Lang13.Bool( zone ) || !Lang13.Bool( severity ) ) {
				return false;
			}
			this.minor_alarms.Remove( zone );
			this.priority_alarms.Remove( zone );

			if ( severity == "severe" ) {
				this.priority_alarms.Add( zone );
			} else if ( severity == "minor" ) {
				this.minor_alarms.Add( zone );
			}
			this.update_icon();
			return false;
		}

		// Function from file: atmos_alert.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.receive_frequency );
			}
			return base.Destroy();
		}

		// Function from file: atmos_alert.dm
		public override void initialize(  ) {
			base.initialize();
			this.set_frequency( this.receive_frequency );
			return;
		}

	}

}