// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Singularity_Narsie_ScNarsie : Obj_Singularity_Narsie {

		public ByTable uneatable = new ByTable(new object [] { typeof(Tile_Space), typeof(Obj_Effect_Overlay), typeof(Mob_Living_SimpleAnimal_Hostile_Construct) });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.move_self = false;
			this.grav_pull = 0;
		}

		public Obj_Singularity_Narsie_ScNarsie ( dynamic loc = null, int? starting_energy = null, bool? temp = null ) : base( (object)(loc), starting_energy, temp ) {
			
		}

		// Function from file: tgstation.dme
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			return false;
		}

		// Function from file: stationCollision.dm
		public override bool consume( dynamic A = null ) {
			dynamic L = null;
			dynamic O = null;
			dynamic T = null;
			Obj O2 = null;

			
			if ( GlobalFuncs.is_type_in_list( A, this.uneatable ) ) {
				return false;
			}

			if ( A is Mob_Living ) {
				L = A;
				((Mob)L).gib();
			} else if ( A is Obj ) {
				O = A;
				((Ent_Static)O).ex_act( 1 );

				if ( Lang13.Bool( O ) ) {
					GlobalFuncs.qdel( O );
				}
			} else if ( A is Tile ) {
				T = A;

				if ( T.intact ) {
					
					foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Obj) )) {
						O2 = _a;
						

						if ( O2.level != 1 ) {
							continue;
						}

						if ( O2.invisibility == 101 ) {
							this.consume( O2 );
						}
					}
				}
				((Tile)T).ChangeTurf( typeof(Tile_Space) );
			}
			return false;
		}

		// Function from file: stationCollision.dm
		public override int? process( dynamic seconds = null ) {
			this.eat();

			if ( Rand13.PercentChance( 25 ) ) {
				this.mezzer();
			}
			return null;
		}

		// Function from file: stationCollision.dm
		public override void admin_investigate_setup(  ) {
			return;
		}

	}

}