// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Spray_Chemsprayer : Obj_Item_Weapon_ReagentContainers_Spray {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "chemsprayer";
			this.spray_maxrange = 7;
			this.spray_currentrange = 7;
			this.amount_per_transfer_from_this = 10;
			this.volume = 600;
			this.origin_tech = "combat=3;materials=3;engineering=3";
			this.icon = "icons/obj/guns/projectile.dmi";
			this.icon_state = "chemsprayer";
		}

		public Obj_Item_Weapon_ReagentContainers_Spray_Chemsprayer ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			
		}

		// Function from file: spray.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.amount_per_transfer_from_this = ( this.amount_per_transfer_from_this == 10 ? 5 : 10 );
			user.WriteMsg( "<span class='notice'>You adjust the output switch. You'll now use " + this.amount_per_transfer_from_this + " units per spray.</span>" );
			return null;
		}

		// Function from file: spray.dm
		public override void spray( dynamic A = null ) {
			int direction = 0;
			dynamic T = null;
			Tile T1 = null;
			Tile T2 = null;
			ByTable the_targets = null;
			int? i = null;

			direction = Map13.GetDistance( this, A );
			T = GlobalFuncs.get_turf( A );
			T1 = Map13.GetStep( T, Num13.Rotate( direction, 90 ) );
			T2 = Map13.GetStep( T, Num13.Rotate( direction, -90 ) );
			the_targets = new ByTable(new object [] { T, T1, T2 });
			i = null;
			i = 1;

			while (( i ??0) <= 3) {
				
				if ( ( this.reagents.total_volume ??0) < 1 ) {
					return;
				}
				base.spray( (object)(the_targets[i]) );
				i++;
			}
			return;
		}

	}

}