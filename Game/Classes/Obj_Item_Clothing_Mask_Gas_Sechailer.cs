// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Mask_Gas_Sechailer : Obj_Item_Clothing_Mask_Gas {

		public int aggressiveness = 2;
		public int cooldown_special = 0;
		public dynamic recent_uses = 0;
		public bool broken_hailer = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.action_button_name = "HALT!";
			this.ignore_maskadjust = false;
			this.flags_inv = 8;
			this.w_class = 2;
			this.visor_flags = 8200;
			this.visor_flags_inv = 8;
			this.flags_cover = 8;
			this.icon_state = "sechailer";
		}

		public Obj_Item_Clothing_Mask_Gas_Sechailer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: hailer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.halt();
			return null;
		}

		// Function from file: hailer.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				switch ((int)( this.aggressiveness )) {
					case 1:
						user.WriteMsg( "<span class='notice'>You set the restrictor to the middle position.</span>" );
						this.aggressiveness = 2;
						break;
					case 2:
						user.WriteMsg( "<span class='notice'>You set the restrictor to the last position.</span>" );
						this.aggressiveness = 3;
						break;
					case 3:
						user.WriteMsg( "<span class='notice'>You set the restrictor to the first position.</span>" );
						this.aggressiveness = 1;
						break;
					case 4:
						user.WriteMsg( "<span class='danger'>You adjust the restrictor but nothing happens, probably because its broken.</span>" );
						break;
				}
			} else if ( A is Obj_Item_Weapon_Wirecutters ) {
				
				if ( this.aggressiveness != 4 ) {
					user.WriteMsg( "<span class='danger'>You broke the restrictor!</span>" );
					this.aggressiveness = 4;
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: hailer.dm
		[Verb]
		[VerbInfo( name: "HALT", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void halt(  ) {
			int phrase = 0;
			string phrase_text = null;
			string phrase_sound = null;

			
			if ( !( Task13.User is Mob_Living ) ) {
				return;
			}

			if ( !this.can_use( Task13.User ) ) {
				return;
			}

			if ( this.broken_hailer ) {
				Task13.User.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( "'s hailing system is broken.</span>" ).ToString() );
				return;
			}
			phrase = 0;
			phrase_text = null;
			phrase_sound = null;

			if ( this.cooldown < Game13.time - 30 ) {
				this.recent_uses++;

				if ( this.cooldown_special < Game13.time - 180 ) {
					this.recent_uses = Lang13.Initial( this, "recent_uses" );
				}

				dynamic _a = this.recent_uses; // Was a switch-case, sorry for the mess.
				if ( _a==3 ) {
					Task13.User.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " is starting to heat up.</span>" ).ToString() );
				} else if ( _a==4 ) {
					Task13.User.WriteMsg( new Txt( "<span class='userdanger'>" ).The( this ).item().str( " is heating up dangerously from overuse!</span>" ).ToString() );
				} else if ( _a==5 ) {
					this.broken_hailer = true;
					Task13.User.WriteMsg( new Txt( "<span class='userdanger'>" ).The( this ).item().str( "'s power modulator overloads and breaks.</span>" ).ToString() );
					return;
				}

				switch ((int)( this.aggressiveness )) {
					case 1:
						phrase = Rand13.Int( 1, 5 );
						break;
					case 2:
						phrase = Rand13.Int( 1, 11 );
						break;
					case 3:
						phrase = Rand13.Int( 1, 18 );
						break;
					case 4:
						phrase = Rand13.Int( 12, 18 );
						break;
				}

				switch ((int)( phrase )) {
					case 1:
						phrase_text = "HALT! HALT! HALT!";
						phrase_sound = "halt";
						break;
					case 2:
						phrase_text = "Stop in the name of the Law.";
						phrase_sound = "bobby";
						break;
					case 3:
						phrase_text = "Compliance is in your best interest.";
						phrase_sound = "compliance";
						break;
					case 4:
						phrase_text = "Prepare for justice!";
						phrase_sound = "justice";
						break;
					case 5:
						phrase_text = "Running will only increase your sentence.";
						phrase_sound = "running";
						break;
					case 6:
						phrase_text = "Don't move, Creep!";
						phrase_sound = "dontmove";
						break;
					case 7:
						phrase_text = "Down on the floor, Creep!";
						phrase_sound = "floor";
						break;
					case 8:
						phrase_text = "Dead or alive you're coming with me.";
						phrase_sound = "robocop";
						break;
					case 9:
						phrase_text = "God made today for the crooks we could not catch yesterday.";
						phrase_sound = "god";
						break;
					case 10:
						phrase_text = "Freeze, Scum Bag!";
						phrase_sound = "freeze";
						break;
					case 11:
						phrase_text = "Stop right there, criminal scum!";
						phrase_sound = "imperial";
						break;
					case 12:
						phrase_text = "Stop or I'll bash you.";
						phrase_sound = "bash";
						break;
					case 13:
						phrase_text = "Go ahead, make my day.";
						phrase_sound = "harry";
						break;
					case 14:
						phrase_text = "Stop breaking the law, ass hole.";
						phrase_sound = "asshole";
						break;
					case 15:
						phrase_text = "You have the right to shut the fuck up.";
						phrase_sound = "stfu";
						break;
					case 16:
						phrase_text = "Shut up crime!";
						phrase_sound = "shutup";
						break;
					case 17:
						phrase_text = "Face the wrath of the golden bolt.";
						phrase_sound = "super";
						break;
					case 18:
						phrase_text = "I am, the LAW!";
						phrase_sound = "dredd";
						break;
				}
				Task13.User.visible_message( "" + Task13.User + "'s Compli-o-Nator: <font color='red' size='4'><b>" + phrase_text + "</b></font>" );
				GlobalFuncs.playsound( this.loc, "sound/voice/complionator/" + phrase_sound + ".ogg", 100, 0, 4 );
				this.cooldown = Game13.time;
				this.cooldown_special = Game13.time;
			}
			return;
		}

		// Function from file: hailer.dm
		[Verb]
		[VerbInfo( name: "Adjust Mask", group: "Object" )]
		public void adjust(  ) {
			this.adjustmask( Task13.User );
			return;
		}

	}

}