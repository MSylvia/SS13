// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_LightConstruct : Obj_Machinery {

		public int stage = 1;
		public string fixture_type = "tube";
		public int? sheets_refunded = 2;
		public Obj_Machinery_Light newlight = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/lighting.dmi";
			this.icon_state = "tube-construct-stage1";
			this.layer = 5;
		}

		// Function from file: lighting.dm
		public Obj_Machinery_LightConstruct ( dynamic loc = null, dynamic ndir = null, dynamic building = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( building ) ) {
				this.dir = Convert.ToInt32( ndir );
			}
			return;
		}

		// Function from file: lighting.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic coil = null;

			this.add_fingerprint( user );

			switch ((int)( this.stage )) {
				case 1:
					
					if ( A is Obj_Item_Weapon_Wrench ) {
						GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
						Task13.User.WriteMsg( "<span class='notice'>You begin deconstructing " + this + "...</span>" );

						if ( !GlobalFuncs.do_after( Task13.User, 30 / A.toolspeed, null, this ) ) {
							return null;
						}
						new Obj_Item_Stack_Sheet_Metal( GlobalFuncs.get_turf( this.loc ), this.sheets_refunded );
						((Ent_Static)user).visible_message( "" + user.name + " deconstructs " + this + ".", "<span class='notice'>You deconstruct " + this + ".</span>", "<span class='italics'>You hear a ratchet.</span>" );
						GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 75, 1 );
						GlobalFuncs.qdel( this );
						return null;
					}

					if ( A is Obj_Item_Stack_CableCoil ) {
						coil = A;

						if ( Lang13.Bool( coil.use( 1 ) ) ) {
							
							switch ((string)( this.fixture_type )) {
								case "tube":
									this.icon_state = "tube-construct-stage2";
									break;
								case "bulb":
									this.icon_state = "bulb-construct-stage2";
									break;
							}
							this.stage = 2;
							((Ent_Static)user).visible_message( "" + user.name + " adds wires to " + this + ".", "<span class='notice'>You add wires to " + this + ".</span>" );
						} else {
							user.WriteMsg( "<span class='warning'>You need one length of cable to wire " + this + "!</span>" );
						}
						return null;
					}
					break;
				case 2:
					
					if ( A is Obj_Item_Weapon_Wrench ) {
						Task13.User.WriteMsg( "<span class='warning'>You have to remove the wires first!</span>" );
						return null;
					}

					if ( A is Obj_Item_Weapon_Wirecutters ) {
						this.stage = 1;

						switch ((string)( this.fixture_type )) {
							case "tube":
								this.icon_state = "tube-construct-stage1";
								break;
							case "bulb":
								this.icon_state = "bulb-construct-stage1";
								break;
						}
						new Obj_Item_Stack_CableCoil( GlobalFuncs.get_turf( this.loc ), 1, "red" );
						((Ent_Static)user).visible_message( "" + user.name + " removes the wiring from " + this + ".", "<span class='notice'>You remove the wiring from " + this + ".</span>", "<span class='italics'>You hear clicking.</span>" );
						GlobalFuncs.playsound( this.loc, "sound/items/Wirecutter.ogg", 100, 1 );
						return null;
					}

					if ( A is Obj_Item_Weapon_Screwdriver ) {
						((Ent_Static)user).visible_message( "" + user.name + " closes " + this + "'s casing.", "<span class='notice'>You close " + this + "'s casing.</span>", "<span class='italics'>You hear screwing.</span>" );
						GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 75, 1 );

						switch ((string)( this.fixture_type )) {
							case "tube":
								this.newlight = new Obj_Machinery_Light_Built( this.loc );
								break;
							case "bulb":
								this.newlight = new Obj_Machinery_Light_Small_Built( this.loc );
								break;
						}
						this.newlight.dir = this.dir;
						this.transfer_fingerprints_to( this.newlight );
						GlobalFuncs.qdel( this );
						return null;
					}
					break;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: lighting.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			switch ((int)( this.stage )) {
				case 1:
					user.WriteMsg( "It's an empty frame." );
					break;
				case 2:
					user.WriteMsg( "It's wired." );
					break;
				case 3:
					user.WriteMsg( "The casing is closed." );
					break;
			}
			return 0;
		}

	}

}