// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Trinary_Filter : Obj_Machinery_Atmospherics_Components_Trinary {

		public bool on = false;
		public double target_pressure = 101.32499694824219;
		public double? filter_type = 0;
		public double? frequency = 0;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_unwrench = true;
			this.icon_state = "filter_off";
		}

		public Obj_Machinery_Atmospherics_Components_Trinary_Filter ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: filter.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			string filtering_name = null;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _c = action; // Was a switch-case, sorry for the mess.
			if ( _c=="power" ) {
				this.on = !this.on;
				this.investigate_log( "was turned " + ( this.on ? "on" : "off" ) + " by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
			} else if ( _c=="pressure" ) {
				
				dynamic _a = _params["pressure"]; // Was a switch-case, sorry for the mess.
				if ( _a=="max" ) {
					this.target_pressure = 4500;
				} else if ( _a=="custom" ) {
					this.target_pressure = Num13.MaxInt( 0, Num13.MinInt( 4500, Convert.ToInt32( this.safe_input( "Pressure control", "Enter new output pressure (0-" + 4500 + " kPa):", this.target_pressure ) ) ) );
				}
				this.investigate_log( "was set to " + this.target_pressure + " kPa by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
			} else if ( _c=="filter" ) {
				this.filter_type = String13.ParseNumber( _params["mode"] );
				filtering_name = "nothing";

				switch ((double?)( this.filter_type )) {
					case 0:
						filtering_name = "plasma";
						break;
					case 1:
						filtering_name = "oxygen";
						break;
					case 2:
						filtering_name = "nitrogen";
						break;
					case 3:
						filtering_name = "carbon dioxide";
						break;
					case 4:
						filtering_name = "nitrous oxide";
						break;
				}
				this.investigate_log( "was set to filter " + filtering_name + " by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
			}
			this.update_icon();
			return true;
		}

		// Function from file: filter.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable();
			data["on"] = this.on;
			data["set_pressure"] = Num13.Floor( this.target_pressure );
			data["max_pressure"] = Num13.Floor( 4500 );
			data["filter_type"] = this.filter_type;
			return data;
		}

		// Function from file: filter.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "atmos_filter", this.name, 430, 140, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: filter.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !this.allowed( Task13.User ) ) {
				Task13.User.WriteMsg( "<span class='danger'>Access denied.</span>" );
				return null;
			}
			this.ui_interact( user );
			return null;
		}

		// Function from file: filter.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) | !Lang13.Bool( a ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: filter.dm
		public override void atmosinit( ByTable node_connects = null ) {
			this.set_frequency( this.frequency );
			base.atmosinit( node_connects ); return;
		}

		// Function from file: filter.dm
		public override int process_atmos(  ) {
			dynamic air1 = null;
			dynamic air2 = null;
			dynamic air3 = null;
			dynamic output_starting_pressure = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			dynamic removed = null;
			GasMixture filtered_out = null;
			Gas trace_gas = null;
			Gas trace_gas2 = null;

			base.process_atmos();

			if ( !this.on ) {
				return 0;
			}

			if ( !( Lang13.Bool( this.nodes[1] ) && Lang13.Bool( this.nodes[2] ) && Lang13.Bool( this.nodes[3] ) ) ) {
				return 0;
			}
			air1 = this.airs[1];
			air2 = this.airs[2];
			air3 = this.airs[3];
			output_starting_pressure = air3.return_pressure();

			if ( Convert.ToDouble( output_starting_pressure ) >= this.target_pressure ) {
				return 1;
			}
			pressure_delta = this.target_pressure - Convert.ToDouble( output_starting_pressure );

			if ( Convert.ToDouble( air1.temperature ) > 0 ) {
				transfer_moles = pressure_delta * Convert.ToDouble( air3.volume ) / Convert.ToDouble( air1.temperature * 8.31 );
			}

			if ( transfer_moles > 0 ) {
				removed = air1.remove( transfer_moles );

				if ( !Lang13.Bool( removed ) ) {
					return 0;
				}
				filtered_out = new GasMixture();
				filtered_out.temperature = removed.temperature;

				switch ((double?)( this.filter_type )) {
					case 0:
						filtered_out.toxins = Lang13.DoubleNullable( removed.toxins );
						removed.toxins = 0;

						if ( removed.trace_gases.len > 0 ) {
							
							foreach (dynamic _a in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
								trace_gas = _a;
								

								if ( trace_gas is Gas_OxygenAgentB ) {
									removed.trace_gases.Remove( trace_gas );
									filtered_out.trace_gases.Add( trace_gas );
								}
							}
						}
						break;
					case 1:
						filtered_out.oxygen = Lang13.DoubleNullable( removed.oxygen );
						removed.oxygen = 0;
						break;
					case 2:
						filtered_out.nitrogen = Convert.ToDouble( removed.nitrogen );
						removed.nitrogen = 0;
						break;
					case 3:
						filtered_out.carbon_dioxide = Lang13.DoubleNullable( removed.carbon_dioxide );
						removed.carbon_dioxide = 0;
						break;
					case 4:
						
						if ( removed.trace_gases.len > 0 ) {
							
							foreach (dynamic _b in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
								trace_gas2 = _b;
								

								if ( trace_gas2 is Gas_SleepingAgent ) {
									removed.trace_gases.Remove( trace_gas2 );
									filtered_out.trace_gases.Add( trace_gas2 );
								}
							}
						}
						break;
					default:
						filtered_out = null;
						break;
				}
				air2.merge( filtered_out );
				air3.merge( removed );
			}
			this.update_parents();
			return 1;
		}

		// Function from file: filter.dm
		public override void power_change(  ) {
			int old_stat = 0;

			old_stat = this.stat;
			base.power_change();

			if ( ( this.stat & 2 ) != 0 ) {
				this.on = false;
			}

			if ( old_stat != this.stat ) {
				this.update_icon();
			}
			return;
		}

		// Function from file: filter.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			
			if ( !( ( this.stat & 2 ) != 0 ) && this.on && Lang13.Bool( this.nodes[1] ) && Lang13.Bool( this.nodes[2] ) && Lang13.Bool( this.nodes[3] ) ) {
				this.icon_state = "filter_on" + ( this.flipped ? "_f" : "" );
				return;
			}
			this.icon_state = "filter_off" + ( this.flipped ? "_f" : "" );
			return;
		}

		// Function from file: filter.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			dynamic direction = null;
			Obj_Machinery_Atmospherics node = null;

			this.overlays.Cut();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				

				if ( Lang13.Bool( direction & this.initialize_directions ) ) {
					node = this.findConnecting( direction );

					if ( node != null ) {
						this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/trinary_devices.dmi", "cap", direction, node.pipe_color ) );
						continue;
					}
					this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/trinary_devices.dmi", "cap", direction ) );
				}
			}
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
			return null;
		}

		// Function from file: filter.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

		// Function from file: filter.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( Lang13.Bool( this.frequency ) ) {
				this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			}
			return;
		}

	}

}