// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Transformer : Obj_Machinery {

		public bool transform_dead = false;
		public bool transform_standing = false;
		public int cooldown_duration = 600;
		public bool cooldown = false;
		public int robot_cell_charge = 5000;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/recycling.dmi";
			this.icon_state = "separator-AO1";
			this.layer = 5;
		}

		// Function from file: transformer.dm
		public Obj_Machinery_Transformer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			new Obj_Machinery_Conveyor_Auto( this.loc, GlobalVars.WEST );
			return;
		}

		// Function from file: transformer.dm
		public void do_transform( dynamic H = null ) {
			dynamic R = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			if ( this.cooldown ) {
				return;
			}

			if ( !this.transform_dead && Convert.ToInt32( H.stat ) == 2 ) {
				GlobalFuncs.playsound( this.loc, "sound/machines/buzz-sigh.ogg", 50, 0 );
				return;
			}
			this.cooldown = true;
			this.update_icon();
			Task13.Schedule( this.cooldown_duration, (Task13.Closure)(() => {
				this.cooldown = false;
				this.update_icon();
				return;
			}));
			GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 50, 1 );
			((Mob)H).emote( "scream" );
			((Mob_Living)H).adjustBruteLoss( Num13.MaxInt( 0, ((int)( 80 - ((Mob_Living)H).getBruteLoss() )) ) );
			((Mob_Living)H).handle_regular_hud_updates();
			Task13.Sleep( 5 );
			this.f_use_power( 5000 );
			R = ((Mob_Living_Carbon_Human)H).Robotize( true );
			R.cell.maxcharge = this.robot_cell_charge;
			R.cell.charge = this.robot_cell_charge;
			((Mob_Living_Silicon_Robot)R).SetLockdown();
			Task13.Schedule( 50, (Task13.Closure)(() => {
				GlobalFuncs.playsound( this.loc, "sound/machines/ping.ogg", 50, 0 );
				Task13.Sleep( 30 );

				if ( Lang13.Bool( R ) ) {
					((Mob_Living_Silicon_Robot)R).SetLockdown( false );
					((Mob_Living_Silicon_Robot)R).notify_ai( 1 );
				}
				return;
			}));
			return;
		}

		// Function from file: transformer.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			double? dir = null;

			
			if ( !( mover is Mob_Living_Carbon_Human ) ) {
				dir = Map13.GetDistance( this, mover );

				if ( dir == GlobalVars.EAST ) {
					return base.CanPass( (object)(mover), (object)(target), height, air_group );
				}
			}
			return false;
		}

		// Function from file: transformer.dm
		public override bool Bumped( dynamic AM = null ) {
			double? move_dir = null;
			dynamic H = null;

			
			if ( this.cooldown ) {
				return false;
			}

			if ( AM is Mob_Living_Carbon_Human ) {
				move_dir = Map13.GetDistance( this.loc, AM.loc );
				H = AM;

				if ( ( this.transform_standing || Lang13.Bool( H.lying ) ) && move_dir == GlobalVars.EAST ) {
					AM.loc = this.loc;
					this.do_transform( AM );
				}
			}
			return false;
		}

		// Function from file: transformer.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );

			if ( ( this.stat & 3 ) != 0 || this.cooldown ) {
				this.icon_state = "separator-AO0";
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			return null;
		}

		// Function from file: transformer.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

	}

}