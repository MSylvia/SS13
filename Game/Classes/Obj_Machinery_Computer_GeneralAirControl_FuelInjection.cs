// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_GeneralAirControl_FuelInjection : Obj_Machinery_Computer_GeneralAirControl {

		public dynamic device_tag = null;
		public ByTable device_info = null;
		public bool automation = false;
		public int cutoff_temperature = 2000;
		public int on_temperature = 1200;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "atmos";
		}

		public Obj_Machinery_Computer_GeneralAirControl_FuelInjection ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: atmo_control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Signal signal = null;
			Signal signal2 = null;
			Signal signal3 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["refresh_status"] ) ) {
				this.device_info = null;

				if ( !( this.radio_connection != null ) ) {
					return 0;
				}
				signal = new Signal();
				signal.transmission_method = 1;
				signal.source = this;
				signal.data = new ByTable().Set( "tag", this.device_tag ).Set( 2, "status" ).Set( "sigtype", "command" );
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			}

			if ( Lang13.Bool( href_list["toggle_automation"] ) ) {
				this.automation = !this.automation;
			}

			if ( Lang13.Bool( href_list["toggle_injector"] ) ) {
				this.device_info = null;

				if ( !( this.radio_connection != null ) ) {
					return 0;
				}
				signal2 = new Signal();
				signal2.transmission_method = 1;
				signal2.source = this;
				signal2.data = new ByTable().Set( "tag", this.device_tag ).Set( 2, "power_toggle" ).Set( "sigtype", "command" );
				this.radio_connection.post_signal( this, signal2, GlobalVars.RADIO_ATMOSIA );
			}

			if ( Lang13.Bool( href_list["injection"] ) ) {
				
				if ( !( this.radio_connection != null ) ) {
					return 0;
				}
				signal3 = new Signal();
				signal3.transmission_method = 1;
				signal3.source = this;
				signal3.data = new ByTable().Set( "tag", this.device_tag ).Set( 2, "inject" ).Set( "sigtype", "command" );
				this.radio_connection.post_signal( this, signal3, GlobalVars.RADIO_ATMOSIA );
			}
			return null;
		}

		// Function from file: atmo_control.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic id_tag = null;

			
			if ( !( signal != null ) || signal.encryption != 0 ) {
				return false;
			}
			id_tag = signal.data["tag"];

			if ( this.device_tag == id_tag ) {
				this.device_info = signal.data;
			} else {
				base.receive_signal( signal, receive_method, (object)(receive_param) );
			}
			return false;
		}

		// Function from file: atmo_control.dm
		public override string return_text(  ) {
			string output = null;
			dynamic power = null;
			dynamic volume_rate = null;

			output = base.return_text();
			output += "<B>Fuel Injection System</B><BR>";

			if ( this.device_info != null ) {
				power = this.device_info["power"];
				volume_rate = this.device_info["volume_rate"];
				output += new Txt( "Status: " ).item( ( Lang13.Bool( power ) ? "Injecting" : "On Hold" ) ).str( " <A href='?src=" ).Ref( this ).str( ";refresh_status=1'>Refresh</A><BR>\nRate: " ).item( volume_rate ).str( " L/sec<BR>" ).ToString();

				if ( this.automation ) {
					output += new Txt( "Automated Fuel Injection: <A href='?src=" ).Ref( this ).str( ";toggle_automation=1'>Engaged</A><BR>" ).ToString();
					output += "Injector Controls Locked Out<BR>";
				} else {
					output += new Txt( "Automated Fuel Injection: <A href='?src=" ).Ref( this ).str( ";toggle_automation=1'>Disengaged</A><BR>" ).ToString();
					output += new Txt( "Injector: <A href='?src=" ).Ref( this ).str( ";toggle_injector=1'>Toggle Power</A> <A href='?src=" ).Ref( this ).str( ";injection=1'>Inject (1 Cycle)</A><BR>" ).ToString();
				}
			} else {
				output += new Txt( "<FONT color='red'>ERROR: Can not find device</FONT> <A href='?src=" ).Ref( this ).str( ";refresh_status=1'>Search</A><BR>" ).ToString();
			}
			return output;
		}

		// Function from file: atmo_control.dm
		public override int? process( dynamic seconds = null ) {
			bool injecting = false;
			dynamic id_tag = null;
			dynamic data = null;
			Signal signal = null;

			
			if ( this.automation ) {
				
				if ( !( this.radio_connection != null ) ) {
					return 0;
				}
				injecting = false;

				foreach (dynamic _a in Lang13.Enumerate( this.sensor_information )) {
					id_tag = _a;
					
					data = this.sensor_information[id_tag];

					if ( Lang13.Bool( data["temperature"] ) ) {
						
						if ( Convert.ToDouble( data["temperature"] ) >= this.cutoff_temperature ) {
							injecting = false;
							break;
						}

						if ( Convert.ToDouble( data["temperature"] ) <= this.on_temperature ) {
							injecting = true;
						}
					}
				}
				signal = new Signal();
				signal.transmission_method = 1;
				signal.source = this;
				signal.data = new ByTable().Set( "tag", this.device_tag ).Set( "power", injecting ).Set( "sigtype", "command" );
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			}
			base.process( (object)(seconds) );
			return null;
		}

	}

}