// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Reagent_Blob_Reactive : Reagent_Blob {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Reactive Gelatin";
			this.id = "reactive_gelatin";
			this.description = "will do high brute damage and react to brute damage.";
			this.color = "#FFA500";
			this.blobbernaut_message = "pummels";
			this.message = "The blob pummels you";
		}

		// Function from file: blob_reagents.dm
		public override dynamic damage_reaction( Obj_Effect_Blob B = null, double original_health = 0, dynamic damage = null, dynamic damage_type = null, dynamic cause = null ) {
			Ent_Static A = null;

			
			if ( Lang13.Bool( damage ) && damage_type == "brute" && original_health - Convert.ToDouble( damage ) > 0 && cause is Mob_Living ) {
				B.visible_message( "<span class='warning'><b>The blob retaliates, lashing out!</b></span>" );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( B, 1 ), typeof(Ent_Static) )) {
					A = _a;
					
					A.blob_act();
				}
			}
			return base.damage_reaction( B, original_health, (object)(damage), (object)(damage_type), (object)(cause) );
		}

		// Function from file: blob_reagents.dm
		public override double reaction_mob( dynamic M = null, int? method = null, double? reac_volume = null, bool? show_message = null, dynamic touch_protection = null ) {
			method = method ?? GlobalVars.TOUCH;

			double damage = 0;

			reac_volume = base.reaction_mob( (object)(M), method, reac_volume, show_message, (object)(touch_protection) );
			damage = Rand13.Int( 10, 25 ) / 25;

			if ( Lang13.Bool( M ) ) {
				((Mob_Living)M).apply_damage( damage * ( reac_volume ??0), "brute" );
			}
			return 0;
		}

	}

}