// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Glasses_Meson_Engine : Obj_Item_Clothing_Glasses_Meson {

		public bool mode = false;
		public ByTable invis_objects = new ByTable();
		public int range = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.action_button_name = "Change Scanning Mode";
			this.icon_state = "trayson-meson";
		}

		public Obj_Item_Clothing_Glasses_Meson_Engine ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: engine_goggles.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			Ent_Static user = null;

			this.icon_state = ( this.mode ? "trayson-tray" : "trayson-meson" );

			if ( this.loc is Mob_Living_Carbon_Human ) {
				user = this.loc;

				if ( ((dynamic)user).glasses == this ) {
					((dynamic)user).update_inv_glasses();
				}
			}
			return null;
		}

		// Function from file: engine_goggles.dm
		public virtual int t_ray_on(  ) {
			Ent_Static user = null;

			
			if ( !( this.loc is Mob_Living_Carbon_Human ) ) {
				return 0;
			}
			user = this.loc;
			return ( this.mode ?1:0) & ( ((dynamic)user).glasses == this ?1:0);
		}

		// Function from file: engine_goggles.dm
		public void invis_update(  ) {
			Obj O = null;
			Ent_Static T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.invis_objects, typeof(Obj) )) {
				O = _a;
				

				if ( !( this.t_ray_on() != 0 ) || !Map13.FetchInRange( this.loc, this.range ).Contains( O ) ) {
					this.invis_objects.Remove( O );
					T = O.loc;

					if ( T != null && Lang13.Bool( ((dynamic)T).intact ) ) {
						O.invisibility = 101;
					}
				}
			}
			return;
		}

		// Function from file: engine_goggles.dm
		public void scan(  ) {
			dynamic T = null;
			Obj O = null;

			
			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this.loc, this.range ) )) {
				T = _b;
				

				if ( !T.intact ) {
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Obj) )) {
					O = _a;
					

					if ( O.level != 1 ) {
						continue;
					}

					if ( O.invisibility == 101 ) {
						O.invisibility = 0;
						this.invis_objects.Add( O );
					}
				}
			}
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.invis_update();
				return;
			}));
			return;
		}

		// Function from file: engine_goggles.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static user = null;

			
			if ( !this.mode ) {
				return null;
			}

			if ( !( this.loc is Mob_Living_Carbon_Human ) ) {
				this.invis_update();
				return null;
			}
			user = this.loc;

			if ( ((dynamic)user).glasses != this ) {
				this.invis_update();
				return null;
			}
			this.scan();
			return null;
		}

		// Function from file: engine_goggles.dm
		public override void ui_action_click(  ) {
			this.mode = !this.mode;

			if ( this.mode ) {
				GlobalVars.SSobj.processing.Or( this );
				this.vision_flags = 0;
				this.darkness_view = 2;
				this.invis_view = 25;
				((dynamic)this.loc).WriteMsg( "<span class='notice'>You toggle the goggles' scanning mode to [T-Ray].</span>" );
			} else {
				GlobalVars.SSobj.processing.Remove( this );
				this.vision_flags = GlobalVars.SEE_TURFS;
				this.darkness_view = 1;
				this.invis_view = 5;
				((dynamic)this.loc).WriteMsg( "<span class='notice'>You toggle the goggles' scanning mode to [Meson].</span>" );
				this.invis_update();
			}
			this.update_icon();
			return;
		}

		// Function from file: engine_goggles.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.ui_action_click();
			return null;
		}

	}

}