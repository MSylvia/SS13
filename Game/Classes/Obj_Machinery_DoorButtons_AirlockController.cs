// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_DoorButtons_AirlockController : Obj_Machinery_DoorButtons {

		public Obj_Machinery_Door_Airlock interiorAirlock = null;
		public Obj_Machinery_Door_Airlock exteriorAirlock = null;
		public string idInterior = null;
		public string idExterior = null;
		public int busy = 0;
		public bool lostPower = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/airlock_machines.dmi";
			this.icon_state = "access_control_standby";
		}

		public Obj_Machinery_DoorButtons_AirlockController ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: access_controller.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			Browser popup = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			popup = new Browser( a, "computer", this.name );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.set_content( this.returnText() );
			popup.open();
			return null;
		}

		// Function from file: access_controller.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "access_control_off";
				return null;
			}

			if ( this.busy != 0 || this.lostPower ) {
				this.icon_state = "access_control_process";
			} else {
				this.icon_state = "access_control_standby";
			}
			return null;
		}

		// Function from file: access_controller.dm
		public override void findObjsByTag(  ) {
			Obj_Machinery_Door_Airlock A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Door_Airlock) )) {
				A = _a;
				

				if ( A.id_tag == this.idInterior ) {
					this.interiorAirlock = A;
				} else if ( A.id_tag == this.idExterior ) {
					this.exteriorAirlock = A;
				}
			}
			return;
		}

		// Function from file: access_controller.dm
		public override void power_change(  ) {
			base.power_change();

			if ( ( this.stat & 2 ) != 0 ) {
				this.lostPower = true;
			} else if ( !( this.busy != 0 ) ) {
				this.lostPower = false;
			}
			this.update_icon();
			return;
		}

		// Function from file: access_controller.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( this.busy == 4 ) {
				this.cycleOpen( this.exteriorAirlock );
			} else if ( this.busy == 5 ) {
				this.cycleOpen( this.interiorAirlock );
			}
			return null;
		}

		// Function from file: access_controller.dm
		public string returnText(  ) {
			string output = null;

			
			if ( !( this.exteriorAirlock != null ) && !( this.interiorAirlock != null ) ) {
				return "ERROR ERROR ERROR ERROR";
			}

			if ( this.lostPower ) {
				output = "Initializing...";
			} else if ( !( this.exteriorAirlock != null ) || !( this.interiorAirlock != null ) ) {
				
				if ( !( this.exteriorAirlock != null ) ) {
					
					if ( this.interiorAirlock.density ) {
						output = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=open_interior'>Open Interior Airlock</A><BR>" ).ToString();
					} else {
						output = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=close_interior'>Close Interior Airlock</A><BR>" ).ToString();
					}
				} else if ( this.exteriorAirlock.density ) {
					output = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=open_exterior'>Open Exterior Airlock</A><BR>" ).ToString();
				} else {
					output = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=close_exterior'>Close Exterior Airlock</A><BR>" ).ToString();
				}
			} else if ( this.exteriorAirlock.density ) {
				
				if ( this.interiorAirlock.density ) {
					output = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=open_exterior'>Open Exterior Airlock</A><BR>\n					<A href='?src=" ).Ref( this ).str( ";command=open_interior'>Open Interior Airlock</A><BR>" ).ToString();
				} else {
					output = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=cycle_exterior'>Cycle to Exterior Airlock</A><BR>\n					<A href='?src=" ).Ref( this ).str( ";command=close_interior'>Close Interior Airlock</A><BR>" ).ToString();
				}
			} else if ( this.interiorAirlock.density ) {
				output = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=close_exterior'>Close Exterior Airlock</A><BR>\n					<A href='?src=" ).Ref( this ).str( ";command=cycle_interior'>Cycle to Interior Airlock</A><BR>" ).ToString();
			} else {
				output = new Txt( "<A href='?src=" ).Ref( this ).str( ";command=close_exterior'>Close Exterior Airlock</A><BR>\n					<A href='?src=" ).Ref( this ).str( ";command=close_interior'>Close Interior Airlock</A><BR>" ).ToString();
			}
			output = "<B>Access Control Console</B><HR>\n				" + output + "<HR>";

			if ( this.exteriorAirlock != null ) {
				output += "<B>Exterior Door: </B> " + ( this.exteriorAirlock.density ? "closed" : "open" ) + "<BR>";
			}

			if ( this.interiorAirlock != null ) {
				output += "<B>Interior Door: </B> " + ( this.interiorAirlock.density ? "closed" : "open" ) + "<BR>";
			}
			return output;
		}

		// Function from file: access_controller.dm
		public void goIdle( bool? update = null ) {
			this.lostPower = false;
			this.busy = 0;

			if ( update == true ) {
				this.update_icon();
			}
			this.updateUsrDialog();
			return;
		}

		// Function from file: access_controller.dm
		public void openDoor( Ent_Static A = null ) {
			
			if ( this.exteriorAirlock != null && this.interiorAirlock != null && ( !this.exteriorAirlock.density || !this.interiorAirlock.density ) ) {
				this.goIdle( true );
				return;
			}
			((dynamic)A).unbolt();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( A != null && Lang13.Bool( ((dynamic)A).open() ) ) {
					
					if ( ( this.stat | 2 ) != 0 && !this.lostPower && A != null && !Lang13.Bool( A.gc_destroyed ) ) {
						((dynamic)A).bolt();
					}
				}
				this.goIdle( true );
				return;
			}));
			return;
		}

		// Function from file: access_controller.dm
		public void cycleOpen( Obj_Machinery_Door_Airlock A = null ) {
			
			if ( !( A != null ) ) {
				this.goIdle( true );
			}

			if ( A == this.exteriorAirlock ) {
				
				if ( this.interiorAirlock != null ) {
					
					if ( !this.interiorAirlock.density || !this.interiorAirlock.locked ) {
						return;
					}
				}
			} else if ( this.exteriorAirlock != null ) {
				
				if ( !this.exteriorAirlock.density || !this.exteriorAirlock.locked ) {
					return;
				}
			}

			if ( this.busy != 2 ) {
				this.busy = 2;
				this.openDoor( A );
			}
			return;
		}

		// Function from file: access_controller.dm
		public void cycleClose( Obj_Machinery_Door_Airlock A = null ) {
			
			if ( !( A != null ) || !( this.exteriorAirlock != null ) || !( this.interiorAirlock != null ) ) {
				return;
			}

			if ( this.exteriorAirlock.density == this.interiorAirlock.density || !A.density ) {
				return;
			}
			this.busy = 3;
			this.update_icon();

			if ( A == this.interiorAirlock ) {
				
				if ( this.closeDoor( this.exteriorAirlock ) ) {
					this.busy = 5;
				}
			} else if ( this.closeDoor( this.interiorAirlock ) ) {
				this.busy = 4;
			}
			return;
		}

		// Function from file: access_controller.dm
		public bool closeDoor( Ent_Static A = null ) {
			
			if ( A.density ) {
				this.goIdle();
				return false;
			}
			this.update_icon();
			((dynamic)A).unbolt();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( A != null && Lang13.Bool( ((dynamic)A).close() ) ) {
					
					if ( ( this.stat & 2 ) != 0 || this.lostPower || !( A != null ) || Lang13.Bool( A.gc_destroyed ) ) {
						this.goIdle( true );
						return;
					}
					((dynamic)A).bolt();

					if ( this.busy == 1 ) {
						this.goIdle( true );
					}
				} else {
					this.goIdle( true );
				}
				return;
			}));
			return true;
		}

		// Function from file: access_controller.dm
		public void onlyClose( Obj_Machinery_Door_Airlock A = null ) {
			
			if ( A != null ) {
				this.busy = 1;
				this.closeDoor( A );
			}
			return;
		}

		// Function from file: access_controller.dm
		public void onlyOpen( Obj_Machinery_Door_Airlock A = null ) {
			
			if ( A != null ) {
				this.busy = 1;
				this.update_icon();
				this.openDoor( A );
			}
			return;
		}

		// Function from file: access_controller.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( this.busy != 0 ) {
				return null;
			}

			if ( !this.allowed( Task13.User ) ) {
				Task13.User.WriteMsg( "<span class='warning'>Access denied.</span>" );
				return null;
			}

			dynamic _a = href_list["command"]; // Was a switch-case, sorry for the mess.
			if ( _a=="close_exterior" ) {
				this.onlyClose( this.exteriorAirlock );
			} else if ( _a=="close_interior" ) {
				this.onlyClose( this.interiorAirlock );
			} else if ( _a=="cycle_exterior" ) {
				this.cycleClose( this.exteriorAirlock );
			} else if ( _a=="cycle_interior" ) {
				this.cycleClose( this.interiorAirlock );
			} else if ( _a=="open_exterior" ) {
				this.onlyOpen( this.exteriorAirlock );
			} else if ( _a=="open_interior" ) {
				this.onlyOpen( this.interiorAirlock );
			}
			return null;
		}

		// Function from file: access_controller.dm
		public override dynamic Destroy(  ) {
			Obj_Machinery_DoorButtons_AccessButton A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_DoorButtons_AccessButton) )) {
				A = _a;
				

				if ( A.controller == this ) {
					A.controller = null;
				}
			}
			return base.Destroy();
		}

		// Function from file: access_controller.dm
		public override void removeMe( Obj_Machinery_Door_Airlock O = null ) {
			
			if ( O == this.interiorAirlock ) {
				this.interiorAirlock = null;
			} else if ( O == this.exteriorAirlock ) {
				this.exteriorAirlock = null;
			}
			return;
		}

	}

}