// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Mmi : Obj_Item_Device {

		public string braintype = "Cyborg";
		public bool syndiemmi = false;
		public Mob_Living_Carbon_Brain brainmob = null;
		public dynamic robot = null;
		public Obj_Mecha mecha = null;
		public dynamic brain = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "biotech=3";
			this.icon = "icons/obj/assemblies.dmi";
			this.icon_state = "mmi_empty";
		}

		public Obj_Item_Device_Mmi ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: MMI.dm
		public override double examine( dynamic user = null ) {
			Mob_Living_Carbon_Brain B = null;

			base.examine( (object)(user) );

			if ( this.brainmob != null ) {
				B = this.brainmob;

				if ( !Lang13.Bool( B.key ) || !( B.mind != null ) || B.stat == 2 ) {
					user.WriteMsg( "<span class='warning'>The MMI indicates the brain is completely unresponsive.</span>" );
				} else if ( !( B.client != null ) ) {
					user.WriteMsg( "<span class='warning'>The MMI indicates the brain is currently inactive; it might change.</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>The MMI indicates the brain is active.</span>" );
				}
			}
			return 0;
		}

		// Function from file: MMI.dm
		public override dynamic Destroy(  ) {
			Ent_Static borg = null;

			
			if ( this.loc is Mob_Living_Silicon_Robot ) {
				borg = this.loc;
				((dynamic)borg).mmi = null;
			}

			if ( this.brainmob != null ) {
				GlobalFuncs.qdel( this.brainmob );
				this.brainmob = null;
			}
			return base.Destroy();
		}

		// Function from file: MMI.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( !( this.brainmob != null ) ) {
				return 0;
			} else {
				
				switch ((int)( severity )) {
					case 1:
						this.brainmob.emp_damage += Rand13.Int( 20, 30 );
						break;
					case 2:
						this.brainmob.emp_damage += Rand13.Int( 10, 20 );
						break;
					case 3:
						this.brainmob.emp_damage += Rand13.Int( 0, 10 );
						break;
				}
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: MMI.dm
		public virtual void transfer_identity( Mob L = null ) {
			Mob C = null;
			Mob H = null;
			dynamic newbrain = null;

			this.brainmob = new Mob_Living_Carbon_Brain( this );
			this.brainmob.name = L.real_name;
			this.brainmob.real_name = L.real_name;

			if ( L.has_dna() != null ) {
				C = L;

				if ( !( this.brainmob.dna != null ) ) {
					this.brainmob.dna = new Dna( this.brainmob );
				}
				((Dna)((dynamic)C).dna).copy_dna( this.brainmob.dna );
			}
			this.brainmob.container = this;

			if ( L is Mob_Living_Carbon_Human ) {
				H = L;
				newbrain = H.getorgan( typeof(Obj_Item_Organ_Internal_Brain) );
				newbrain.loc = this;
				this.brain = newbrain;
			}
			this.name = "Man-Machine Interface: " + this.brainmob.real_name;
			this.update_icon();
			return;
		}

		// Function from file: MMI.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !Lang13.Bool( this.brain ) ) {
				user.WriteMsg( "<span class='warning'>You upend the MMI, but there's nothing in it!</span>" );
			} else {
				user.WriteMsg( "<span class='notice'>You unlock and upend the MMI, spilling the brain onto the floor.</span>" );
				this.brainmob.container = null;
				this.brainmob.loc = this.brain;
				GlobalVars.living_mob_list.Remove( this.brainmob );
				this.brain.brainmob = this.brainmob;
				this.brainmob = null;
				this.brain.loc = Task13.User.loc;
				this.brain = null;
				this.update_icon();
				this.name = "Man-Machine Interface";
			}
			return null;
		}

		// Function from file: MMI.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic newbrain = null;
			Mob B = null;

			((Mob)user).changeNext_move( 8 );

			if ( A is Obj_Item_Organ_Internal_Brain ) {
				newbrain = A;

				if ( Lang13.Bool( this.brain ) ) {
					user.WriteMsg( "<span class='warning'>There's already a brain in the MMI!</span>" );
					return null;
				}

				if ( !Lang13.Bool( newbrain.brainmob ) ) {
					user.WriteMsg( "<span class='warning'>You aren't sure where this brain came from, but you're pretty sure it's a useless brain!</span>" );
					return null;
				}

				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				B = newbrain.brainmob;

				if ( !Lang13.Bool( B.key ) ) {
					B.notify_ghost_cloning( "Someone has put your brain in a MMI!", null, this );
				}
				this.visible_message( new Txt().item( user ).str( " sticks " ).a( newbrain ).item().str( " into " ).the( this ).item().str( "." ).ToString() );
				this.brainmob = newbrain.brainmob;
				newbrain.brainmob = null;
				this.brainmob.loc = this;
				this.brainmob.container = this;
				this.brainmob.stat = 0;
				GlobalVars.dead_mob_list.Remove( this.brainmob );
				GlobalVars.living_mob_list.Add( this.brainmob );
				newbrain.loc = this;
				this.brain = newbrain;
				this.name = "Man-Machine Interface: " + this.brainmob.real_name;
				this.update_icon();
				GlobalFuncs.feedback_inc( "cyborg_mmis_filled", 1 );
				return null;
			}

			if ( this.brainmob != null ) {
				((Obj_Item)A).attack( this.brainmob, user );
				return null;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: MMI.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( Lang13.Bool( this.brain ) ) {
				
				if ( this.brain is Obj_Item_Organ_Internal_Brain_Alien ) {
					this.icon_state = "mmi_alien";
					this.braintype = "Xenoborg";
				} else {
					this.icon_state = "mmi_full";
					this.braintype = "Cyborg";
				}
			} else {
				this.icon_state = "mmi_empty";
			}
			return null;
		}

	}

}