// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Medbeam : Obj_Item_Weapon_Gun {

		public dynamic current_target = null;
		public int last_check = 0;
		public int check_delay = 10;
		public int max_range = 8;
		public bool active = false;
		public Beam current_beam = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "chronogun";
			this.heavy_weapon = true;
			this.icon = "icons/obj/chronos.dmi";
			this.icon_state = "chronogun";
		}

		// Function from file: medbeam.dm
		public Obj_Item_Weapon_Gun_Medbeam ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSobj.processing.Or( this );
			return;
		}

		// Function from file: medbeam.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static H = null;

			H = this.loc;

			if ( !( H is Mob_Living_Carbon_Human ) ) {
				this.LoseTarget();
				return null;
			}

			if ( !Lang13.Bool( this.current_target ) ) {
				this.LoseTarget();
				return null;
			}

			if ( Game13.time <= this.last_check + this.check_delay ) {
				return null;
			}
			this.last_check = Game13.time;

			if ( Map13.GetDistance( H, this.current_target ) > this.max_range || !this.los_check( H, this.current_target ) ) {
				this.LoseTarget();
				((dynamic)H).WriteMsg( "<span class='warning'>You lose control of the beam!</span>" );
				return null;
			}

			if ( Lang13.Bool( this.current_target ) ) {
				this.on_beam_tick( this.current_target );
			}
			return null;
		}

		// Function from file: medbeam.dm
		public override bool process_fire( dynamic target = null, dynamic user = null, bool? message = null, string _params = null, string zone_override = null ) {
			message = message ?? true;

			this.add_fingerprint( user );

			if ( Lang13.Bool( this.current_target ) ) {
				this.LoseTarget();
			}

			if ( !( target is Mob_Living ) ) {
				return false;
			}
			this.current_target = target;
			this.active = true;
			this.current_beam = new Beam( user, this.current_target, null, "medbeam", 6000, null, typeof(Obj_Effect_Ebeam_Medical) );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.current_beam.Start();
				return;
			}));
			GlobalFuncs.feedback_add_details( "gun_fired", "" + this.type );
			return false;
		}

		// Function from file: medbeam.dm
		public void on_beam_release( dynamic target = null ) {
			return;
		}

		// Function from file: medbeam.dm
		public void on_beam_tick( dynamic target = null ) {
			((Mob_Living)target).adjustBruteLoss( -4 );
			((Mob_Living)target).adjustFireLoss( -4 );
			return;
		}

		// Function from file: medbeam.dm
		public void on_beam_hit( dynamic target = null ) {
			return;
		}

		// Function from file: medbeam.dm
		public bool los_check( Ent_Static user = null, dynamic target = null ) {
			Ent_Static user_turf = null;
			Obj dummy = null;
			dynamic turf = null;
			Ent_Dynamic AM = null;
			Obj_Effect_Ebeam_Medical B = null;

			user_turf = user.loc;

			if ( !( user_turf is Tile ) ) {
				return false;
			}
			dummy = new Obj( user_turf );
			dummy.pass_flags |= 0;

			foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.getline( user_turf, target ) )) {
				turf = _c;
				

				if ( turf.density ) {
					GlobalFuncs.qdel( dummy );
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( turf, typeof(Ent_Dynamic) )) {
					AM = _a;
					

					if ( !AM.CanPass( dummy, turf, 1 ) ) {
						GlobalFuncs.qdel( dummy );
						return false;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( turf, typeof(Obj_Effect_Ebeam_Medical) )) {
					B = _b;
					

					if ( B.owner != this.current_beam ) {
						GlobalFuncs.explosion( B.loc, 0, 3, 5, 8 );
						GlobalFuncs.qdel( dummy );
						return false;
					}
				}
			}
			GlobalFuncs.qdel( dummy );
			return true;
		}

		// Function from file: medbeam.dm
		public void LoseTarget(  ) {
			
			if ( this.active ) {
				GlobalFuncs.qdel( this.current_beam );
				this.active = false;
				this.on_beam_release( this.current_target );
			}
			this.current_target = null;
			return;
		}

		// Function from file: medbeam.dm
		public override bool dropped( dynamic user = null ) {
			base.dropped( (object)(user) );
			this.LoseTarget();
			return false;
		}

	}

}