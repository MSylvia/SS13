// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_MonkeyRecycler : Obj_Machinery {

		public double grinded = 0;
		public double required_grind = 5;
		public dynamic cube_production = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 5;
			this.active_power_usage = 50;
			this.icon = "icons/obj/kitchen.dmi";
			this.icon_state = "grinder";
			this.layer = 2.9;
		}

		// Function from file: monkeyrecycler.dm
		public Obj_Machinery_MonkeyRecycler ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_MonkeyRecycler( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.RefreshParts();
			return;
		}

		// Function from file: monkeyrecycler.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			int? i = null;

			
			if ( this.stat != 0 ) {
				return null;
			}

			if ( this.grinded >= this.required_grind ) {
				a.WriteMsg( "<span class='notice'>The machine hisses loudly as it condenses the grinded monkey meat. After a moment, it dispenses a brand new monkey cube.</span>" );
				GlobalFuncs.playsound( this.loc, "sound/machines/hiss.ogg", 50, 1 );
				this.grinded -= this.required_grind;
				i = null;
				i = 0;

				while (( i ??0) < Convert.ToDouble( this.cube_production )) {
					new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Monkeycube_Wrapped( this.loc );
					i++;
				}
				a.WriteMsg( "<span class='notice'>The machine's display flashes that it has " + this.grinded + " monkeys worth of material left.</span>" );
			} else {
				a.WriteMsg( "<span class='danger'>The machine needs at least " + this.required_grind + " monkey(s) worth of material to produce a monkey cube. It only has " + this.grinded + ".</span>" );
			}
			return null;
		}

		// Function from file: monkeyrecycler.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic G = null;
			dynamic grabbed = null;
			Mob target = null;
			int offset = 0;

			
			if ( this.default_deconstruction_screwdriver( user, "grinder_open", "grinder", A ) ) {
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( this.default_pry_open( A ) ) {
				return null;
			}

			if ( this.default_unfasten_wrench( user, A ) ) {
				this.power_change();
				return null;
			}
			this.default_deconstruction_crowbar( A );

			if ( this.stat != 0 ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Grab ) {
				G = A;

				if ( !((Ent_Static)user).Adjacent( G.affecting ) ) {
					return null;
				}
				grabbed = G.affecting;

				if ( grabbed is Mob_Living_Carbon_Monkey ) {
					target = grabbed;

					if ( target.stat == 0 ) {
						user.WriteMsg( "<span class='warning'>The monkey is struggling far too much to put it in the recycler.</span>" );
						return null;
					}

					if ( target.buckled != null || Lang13.Bool( target.buckled_mob ) ) {
						user.WriteMsg( "<span class='warning'>The monkey is attached to something.</span>" );
						return null;
					}

					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					GlobalFuncs.qdel( target );
					user.WriteMsg( "<span class='notice'>You stuff the monkey into the machine.</span>" );
					GlobalFuncs.playsound( this.loc, "sound/machines/juicer.ogg", 50, 1 );
					offset = ( Rand13.PercentChance( 50 ) ? -2 : 2 );
					Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + offset ).Set( "time", 0.2 ).Set( "loop", 200 ) );
					this.f_use_power( 500 );
					this.grinded++;
					Task13.Sleep( 50 );
					this.pixel_x = Convert.ToInt32( Lang13.Initial( this, "pixel_x" ) );
					user.WriteMsg( new Txt( "<span class='notice'>The machine now has " ).item( this.grinded ).str( " monkey" ).s().str( " worth of material stored.</span>" ).ToString() );
				} else {
					user.WriteMsg( "<span class='danger'>The machine only accepts monkeys!</span>" );
				}
			}
			return null;
		}

		// Function from file: monkeyrecycler.dm
		public override void RefreshParts(  ) {
			double req_grind = 0;
			dynamic cubes_made = null;
			Obj_Item_Weapon_StockParts_Manipulator B = null;
			Obj_Item_Weapon_StockParts_MatterBin M = null;

			req_grind = 5;
			cubes_made = 1;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				B = _a;
				
				req_grind -= Convert.ToDouble( B.rating );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _b;
				
				cubes_made = M.rating;
			}
			this.cube_production = cubes_made;
			this.required_grind = req_grind;
			this.desc = "A machine used for recycling dead monkeys into monkey cubes. It currently produces " + cubes_made + " cube(s) for every " + this.required_grind + " monkey(s) inserted.";
			return;
		}

	}

}