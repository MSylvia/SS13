// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Mecha_Combat_Marauder : Obj_Mecha_Combat {

		public bool zoom = false;
		public int smoke = 5;
		public bool smoke_ready = true;
		public int smoke_cooldown = 100;
		public EffectSystem_SmokeSpread smoke_system = new EffectSystem_SmokeSpread();
		public Action_Innate_Mecha_MechSmoke smoke_action = new Action_Innate_Mecha_MechSmoke();
		public Action_Innate_Mecha_MechZoom zoom_action = new Action_Innate_Mecha_MechZoom();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.infra_luminosity = 3;
			this.step_in = 5;
			this.health = 500;
			this.deflect_chance = 25;
			this.damage_absorption = new ByTable().Set( "brute", 0.5 ).Set( "fire", 061 ).Set( "bullet", 0.41 ).Set( "laser", 0.6 ).Set( "energy", 061 ).Set( "bomb", 061 );
			this.max_temperature = 60000;
			this.operation_req_access = new ByTable(new object [] { 103 });
			this.wreckage = typeof(Obj_Structure_MechaWreckage_Marauder);
			this.add_req_access = false;
			this.internal_damage_threshold = 25;
			this.force = 45;
			this.max_equip = 4;
			this.icon_state = "marauder";
		}

		// Function from file: marauder.dm
		public Obj_Mecha_Combat_Marauder ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.smoke_system.set_up( 3, this );
			this.smoke_system.attach( this );
			return;
		}

		// Function from file: marauder.dm
		public override string get_stats_part(  ) {
			string output = null;

			output = base.get_stats_part();
			output += "<b>Smoke:</b> " + this.smoke + "<br>\n				<b>Thrusters:</b> " + ( this.thrusters ? "on" : "off" ) + "<br>\n				<b>Zoom:</b> " + ( this.zoom ? "on" : "off" ) + "\n					";
			return output;
		}

		// Function from file: marauder.dm
		public override void go_out( bool? forced = null, Ent_Static newloc = null ) {
			
			if ( Lang13.Bool( this.occupant ) && Lang13.Bool( this.occupant.client ) ) {
				this.occupant.client.view = Convert.ToInt32( Game13.view );
				this.zoom = false;
			}
			base.go_out( forced, newloc );
			return;
		}

		// Function from file: marauder.dm
		public override void RemoveActions( dynamic user = null, bool? human_occupant = null ) {
			human_occupant = human_occupant ?? false;

			base.RemoveActions( (object)(user), human_occupant );
			this.smoke_action.Remove( user );
			this.thrusters_action.Remove( user );
			this.zoom_action.Remove( user );
			return;
		}

		// Function from file: marauder.dm
		public override void GrantActions( dynamic user = null, bool? human_occupant = null ) {
			human_occupant = human_occupant ?? false;

			base.GrantActions( (object)(user), human_occupant );
			this.smoke_action.chassis = this;
			this.smoke_action.Grant( user );
			this.thrusters_action.chassis = this;
			this.thrusters_action.Grant( user );
			this.zoom_action.chassis = this;
			this.zoom_action.Grant( user );
			return;
		}

		// Function from file: marauder.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			
			if ( this.zoom ) {
				
				if ( Game13.time - this.last_message > 20 ) {
					this.occupant_message( "Unable to move while in zoom mode." );
					this.last_message = Game13.time;
				}
				return false;
			}
			return base.relaymove( user, direction );
		}

		// Function from file: marauder.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.smoke_system );
			this.smoke_system = null;
			return base.Destroy();
		}

	}

}