// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Pump : Obj_Machinery_PortableAtmospherics {

		public bool on = false;
		public bool direction_out = false;
		public int target_pressure = 100;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 1000;
			this.icon = "icons/obj/atmos.dmi";
			this.icon_state = "psiphon:0";
		}

		public Obj_Machinery_PortableAtmospherics_Pump ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tgstation.dme
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? diff = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.stat != 0 || Task13.User.restrained() ) {
				return null;
			}

			if ( Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["power"] ) ) {
					this.on = !this.on;
				}

				if ( Lang13.Bool( href_list["direction"] ) ) {
					this.direction_out = !this.direction_out;
				}

				if ( Lang13.Bool( href_list["remove_tank"] ) ) {
					
					if ( Lang13.Bool( this.holding ) ) {
						this.holding.loc = this.loc;
						this.holding = null;
					}
				}

				if ( Lang13.Bool( href_list["pressure_adj"] ) ) {
					diff = String13.ParseNumber( href_list["pressure_adj"] );
					this.target_pressure = Num13.MinInt( ((int)( 1013.25 )), Num13.MaxInt( 0, ((int)( this.target_pressure + ( diff ??0) )) ) );
				}
				this.updateUsrDialog();
				this.add_fingerprint( Task13.User );
				this.update_icon();
			} else {
				Interface13.Browse( Task13.User, null, "window=pump" );
				return null;
			}
			return null;
		}

		// Function from file: pump.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string holding_text = null;
			string output_text = null;

			((Mob)a).set_machine( this );

			if ( Lang13.Bool( this.holding ) ) {
				holding_text = new Txt( "<BR><B>Tank Pressure</B>: " ).item( this.holding.air_contents.return_pressure() ).str( " KPa<BR>\n<A href='?src=" ).Ref( this ).str( ";remove_tank=1'>Remove Tank</A><BR>\n" ).ToString();
			}
			output_text = new Txt( "<TT><B>" ).item( this.name ).str( "</B><BR>\nPressure: " ).item( this.air_contents.return_pressure() ).str( " KPa<BR>\nPort Status: " ).item( ( Lang13.Bool( this.connected_port ) ? "Connected" : "Disconnected" ) ).str( "\n" ).item( holding_text ).str( "\n<BR>\nPower Switch: <A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.on ? "On" : "Off" ) ).str( "</A><BR>\nPump Direction: <A href='?src=" ).Ref( this ).str( ";direction=1'>" ).item( ( this.direction_out ? "Out" : "In" ) ).str( "</A><BR>\nTarget Pressure: <A href='?src=" ).Ref( this ).str( ";pressure_adj=-1000'>-</A> <A href='?src=" ).Ref( this ).str( ";pressure_adj=-100'>-</A> <A href='?src=" ).Ref( this ).str( ";pressure_adj=-10'>-</A> <A href='?src=" ).Ref( this ).str( ";pressure_adj=-1'>-</A> " ).item( this.target_pressure ).str( " <A href='?src=" ).Ref( this ).str( ";pressure_adj=1'>+</A> <A href='?src=" ).Ref( this ).str( ";pressure_adj=10'>+</A> <A href='?src=" ).Ref( this ).str( ";pressure_adj=100'>+</A> <A href='?src=" ).Ref( this ).str( ";pressure_adj=1000'>+</A><BR>\n<HR>\n<A href='?src=" ).Ref( a ).str( ";mach_close=pump'>Close</A><BR>\n" ).ToString();
			Interface13.Browse( a, output_text, "window=pump;size=600x300" );
			GlobalFuncs.onclose( a, "pump" );
			return null;
		}

		// Function from file: pump.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: pump.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: pump.dm
		public override GasMixture return_air(  ) {
			return this.air_contents;
		}

		// Function from file: pump.dm
		public override int? process( dynamic seconds = null ) {
			base.process( (object)(seconds) );
			this.updateDialog();
			return null;
		}

		// Function from file: pump.dm
		public override int process_atmos(  ) {
			GasMixture environment = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;
			double pressure_delta2 = 0;
			double transfer_moles2 = 0;
			dynamic removed2 = null;

			base.process_atmos();

			if ( this.on ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					environment = this.holding.air_contents;
				} else {
					environment = this.loc.return_air();
				}

				if ( this.direction_out ) {
					pressure_delta = this.target_pressure - environment.return_pressure();
					transfer_moles = 0;

					if ( Convert.ToDouble( this.air_contents.temperature ) > 0 ) {
						transfer_moles = pressure_delta * environment.volume / Convert.ToDouble( this.air_contents.temperature * 8.31 );
						removed = this.air_contents.remove( transfer_moles );

						if ( Lang13.Bool( this.holding ) ) {
							environment.merge( removed );
						} else {
							this.loc.assume_air( removed );
							this.air_update_turf();
						}
					}
				} else {
					pressure_delta2 = this.target_pressure - this.air_contents.return_pressure();
					transfer_moles2 = 0;

					if ( Convert.ToDouble( environment.temperature ) > 0 ) {
						transfer_moles2 = pressure_delta2 * this.air_contents.volume / Convert.ToDouble( environment.temperature * 8.31 );

						if ( Lang13.Bool( this.holding ) ) {
							removed2 = environment.remove( transfer_moles2 );
						} else {
							removed2 = this.loc.remove_air( transfer_moles2 );
							this.air_update_turf();
						}
						this.air_contents.merge( removed2 );
					}
				}
			}
			return 0;
		}

		// Function from file: pump.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return 0;
			}

			if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
				this.on = !this.on;
			}

			if ( Rand13.PercentChance( ((int)( 100 / severity )) ) ) {
				this.direction_out = !this.direction_out;
			}
			this.target_pressure = Rand13.Int( 0, 1300 );
			this.update_icon();
			base.emp_act( severity );
			return 0;
		}

		// Function from file: pump.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays = 0;

			if ( this.on ) {
				this.icon_state = "psiphon:1";
			} else {
				this.icon_state = "psiphon:0";
			}

			if ( Lang13.Bool( this.holding ) ) {
				this.overlays.Add( "siphon-open" );
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				this.overlays.Add( "siphon-connector" );
			}
			return null;
		}

	}

}