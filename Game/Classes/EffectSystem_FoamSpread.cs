// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class EffectSystem_FoamSpread : EffectSystem {

		public double amount = 10;
		public dynamic chemholder = null;
		public dynamic metal = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.effect_type = typeof(Obj_Effect_ParticleEffect_Foam);
		}

		// Function from file: effects_foam.dm
		public EffectSystem_FoamSpread (  ) {
			Reagents R = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.chemholder = GlobalFuncs.PoolOrNew( typeof(Obj) );
			R = new Reagents( 1000 );
			this.chemholder.reagents = R;
			R.my_atom = this.chemholder;
			return;
		}

		// Function from file: effects_foam.dm
		public override void start(  ) {
			dynamic foundfoam = null;
			dynamic F = null;
			string foamcolor = null;

			foundfoam = Lang13.FindIn( typeof(Obj_Effect_ParticleEffect_Foam), this.location );

			if ( Lang13.Bool( foundfoam ) ) {
				foundfoam.amount += this.amount;
			} else {
				F = GlobalFuncs.PoolOrNew( this.effect_type, this.location );
				foamcolor = GlobalFuncs.mix_color_from_reagents( this.chemholder.reagents.reagent_list );
				this.chemholder.reagents.copy_to( F, ( this.chemholder.reagents.total_volume ??0) / this.amount );
				F.color = foamcolor;
				F.amount = this.amount;
				F.metal = this.metal;
			}
			return;
		}

		// Function from file: effects_foam.dm
		public override void set_up( dynamic amt = null, dynamic loca = null, dynamic flash = null, dynamic flash_fact = null, bool? message = null ) {
			amt = amt ?? 5;

			
			if ( loca is Tile ) {
				this.location = loca;
			} else {
				this.location = GlobalFuncs.get_turf( loca );
			}
			this.amount = Num13.Round( Math.Sqrt( Convert.ToDouble( amt / 2 ) ), 1 );
			((Reagents)flash).copy_to( this.chemholder, ( flash.total_volume ??0) * 4 );
			return;
		}

		// Function from file: effects_foam.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.chemholder );
			this.chemholder = null;
			return base.Destroy();
		}

	}

}