// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Monitor : Obj_Machinery_Computer {

		public Powernet powernet = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "power";
			this.icon_keyboard = "power_key";
			this.use_power = 2;
			this.idle_power_usage = 20;
			this.active_power_usage = 80;
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Powermonitor);
		}

		// Function from file: power.dm
		public Obj_Machinery_Computer_Monitor ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			dynamic attached = null;
			Ent_Static T = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			attached = null;
			T = this.loc;

			if ( T is Tile ) {
				attached = Lang13.FindIn( typeof(Obj_Structure_Cable), T );
			}

			if ( Lang13.Bool( attached ) ) {
				this.powernet = ((Obj_Structure_Cable)attached).get_powernet();
			}
			return;
		}

		// Function from file: tgstation.dme
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=powcomp" );
				Task13.User.unset_machine();
				return null;
			}

			if ( Lang13.Bool( href_list["update"] ) ) {
				this.updateDialog();
				return null;
			}
			return null;
		}

		// Function from file: power.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string t = null;
			ByTable L = null;
			Obj_Machinery_Power_Terminal term = null;
			Obj_Machinery_Power A = null;
			ByTable S = null;
			ByTable chg = null;
			int percent = 0;
			string c = null;
			Obj_Machinery_Power_Apc A2 = null;
			Browser popup = null;

			
			if ( Map13.GetDistance( this, user ) > 1 || ( this.stat & 3 ) != 0 ) {
				
				if ( !( user is Mob_Living_Silicon || GlobalFuncs.IsAdminGhost( user ) ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=powcomp" );
					return null;
				}
			}
			((Mob)user).set_machine( this );
			t = "";
			t += new Txt( "<A href='?src=" ).Ref( this ).str( ";update=1'>Refresh</A> <A href='?src=" ).Ref( this ).str( ";close=1'>Close</A><br /><br />" ).ToString();

			if ( !( this.powernet != null ) ) {
				t += "<span class='danger'>No connection.</span>";
			} else {
				L = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.powernet.nodes, typeof(Obj_Machinery_Power_Terminal) )) {
					term = _a;
					

					if ( term.master is Obj_Machinery_Power_Apc ) {
						A = term.master;
						L.Add( A );
					}
				}
				t += "<PRE>Total power: " + this.powernet.avail + " W<BR>Total load:  " + String13.NumberToString( this.powernet.viewload, 10 ) + " W<BR>";
				t += "<FONT SIZE=-1>";

				if ( L.len > 0 ) {
					t += "Area                           Eqp./Lgt./Env.  Load   Cell<HR>";
					S = new ByTable(new object [] { "<SPAN class='bad'> Off</SPAN>", "<SPAN class='bad'>AOff</SPAN>", "<SPAN class='good'>  On</SPAN>", "<SPAN class='good'> AOn</SPAN>" });
					chg = new ByTable(new object [] { "<SPAN class='bad'>N</SPAN>", "<SPAN class='average'>C</SPAN>", "<SPAN class='good'>F</SPAN>" });
					percent = 0;
					c = "";

					foreach (dynamic _b in Lang13.Enumerate( L, typeof(Obj_Machinery_Power_Apc) )) {
						A2 = _b;
						
						t += String13.SubStr( GlobalFuncs.add_tspace( "" + GlobalFuncs.format_text( A2.area.name ), 30 ), 1, 30 );
						t += " " + S[( A2.equipment ??0) + 1] + " " + S[( A2.lighting ??0) + 1] + " " + S[( A2.environ ??0) + 1] + " " + GlobalFuncs.add_lspace( A2.lastused_total, 6 );

						if ( Lang13.Bool( A2.cell ) ) {
							percent = Num13.Floor( ((Obj_Item_Weapon_StockParts_Cell)A2.cell).percent() );
							c = "bad";

							if ( percent > 50 ) {
								c = "good";
							} else if ( percent > 25 ) {
								c = "average";
							}
							t += "<SPAN class='" + c + "'>" + GlobalFuncs.add_lspace( percent, 4 ) + "%</SPAN> " + chg[A2.charging + 1] + "<BR>";
						} else {
							t += "   N/C<BR>";
						}
					}
				}
				t += "</FONT></PRE>";
			}
			popup = new Browser( user, "powcomp", this.name, 500, 450 );
			popup.set_content( t );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: power.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: power.dm
		public override int? process( dynamic seconds = null ) {
			dynamic attached = null;
			Ent_Static T = null;

			
			if ( !( this.powernet != null ) ) {
				attached = null;
				T = this.loc;

				if ( T is Tile ) {
					attached = Lang13.FindIn( typeof(Obj_Structure_Cable), T );
				}

				if ( Lang13.Bool( attached ) ) {
					this.powernet = ((Obj_Structure_Cable)attached).get_powernet();
				}
			}
			return null;
		}

	}

}