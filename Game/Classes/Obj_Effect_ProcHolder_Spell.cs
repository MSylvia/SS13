// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_ProcHolder_Spell : Obj_Effect_ProcHolder {

		public string sound = null;
		public string school = "evocation";
		public string charge_type = "recharge";
		public int charge_max = 100;
		public int charge_counter = 0;
		public string still_recharging_msg = "<span class='notice'>The spell is still recharging.</span>";
		public string holder_var_type = "bruteloss";
		public int holder_var_amount = 20;
		public dynamic clothes_req = 1;
		public bool cult_req = false;
		public dynamic human_req = 0;
		public bool nonabstract_req = false;
		public bool stat_allowed = false;
		public string invocation = "HURP DURP";
		public string invocation_emote_self = null;
		public string invocation_type = "none";
		public int? range = 7;
		public string message = "";
		public string selection_type = "view";
		public int spell_level = 0;
		public int level_max = 4;
		public int cooldown_min = 0;
		public bool player_lock = true;
		public bool? overlay = false;
		public string overlay_icon = "icons/obj/wizard.dmi";
		public string overlay_icon_state = "spell";
		public bool overlay_lifespan = false;
		public bool sparks_spread = false;
		public bool sparks_amt = false;
		public int smoke_spread = 0;
		public int smoke_amt = 0;
		public int critfailchance = 0;
		public bool centcom_cancast = true;
		public Action_SpellAction action = null;
		public string action_icon = "icons/mob/actions.dmi";
		public string action_icon_state = "spell_default";
		public string action_background_icon_state = "bg_spell";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.panel = "Spells";
			this.anchored = 1;
			this.pass_flags = 1;
		}

		// Function from file: spell.dm
		public Obj_Effect_ProcHolder_Spell ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.still_recharging_msg = "<span class='notice'>" + this.name + " is still recharging.</span>";
			this.charge_counter = this.charge_max;
			return;
		}

		// Function from file: spell.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			
			if ( this.cast_check() ) {
				this.choose_targets();
			}
			return true;
		}

		// Function from file: shadowling_abilities.dm
		public bool shadowling_check( dynamic H = null ) {
			
			if ( !Lang13.Bool( H ) || !( H is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( H.dna.species.id == "shadowling" && GlobalFuncs.is_shadow( H ) ) {
				return true;
			}

			if ( H.dna.species.id == "l_shadowling" && GlobalFuncs.is_thrall( H ) ) {
				return true;
			}

			if ( !GlobalFuncs.is_shadow_or_thrall( Task13.User ) ) {
				Task13.User.WriteMsg( "<span class='warning'>You can't wrap your head around how to do this.</span>" );
			} else if ( GlobalFuncs.is_thrall( Task13.User ) ) {
				Task13.User.WriteMsg( "<span class='warning'>You aren't powerful enough to do this.</span>" );
			} else if ( GlobalFuncs.is_shadow( Task13.User ) ) {
				Task13.User.WriteMsg( "<span class='warning'>Your telepathic ability is suppressed. Hatch or use Rapid Re-Hatch first.</span>" );
			}
			return false;
		}

		// Function from file: spell.dm
		public virtual bool can_cast( dynamic user = null ) {
			user = user ?? Task13.User;

			dynamic H = null;

			
			if ( ( !Lang13.Bool( user.mind ) || !user.mind.spell_list.Contains( this ) ) && !user.mob_spell_list.Contains( this ) ) {
				return false;
			}

			if ( Convert.ToInt32( user.z ) == 2 && !this.centcom_cancast ) {
				return false;
			}

			if ( Convert.ToInt32( user.z ) == 2 && GlobalVars.ticker.mode.name == "ragin' mages" ) {
				return false;
			}

			switch ((string)( this.charge_type )) {
				case "recharge":
					
					if ( this.charge_counter < this.charge_max ) {
						return false;
					}
					break;
				case "charges":
					
					if ( !( this.charge_counter != 0 ) ) {
						return false;
					}
					break;
			}

			if ( Lang13.Bool( user.stat ) && !this.stat_allowed ) {
				return false;
			}

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				if ( ( this.invocation_type == "whisper" || this.invocation_type == "shout" ) && ((Mob)H).is_muzzled() ) {
					return false;
				}

				if ( Lang13.Bool( this.clothes_req ) ) {
					
					if ( !( H.wear_suit is Obj_Item_Clothing_Suit_Wizrobe ) && !( H.wear_suit is Obj_Item_Clothing_Suit_Space_Hardsuit_Wizard ) ) {
						return false;
					}

					if ( !( H.shoes is Obj_Item_Clothing_Shoes_Sandal ) ) {
						return false;
					}

					if ( !( H.head is Obj_Item_Clothing_Head_Wizard ) && !( H.head is Obj_Item_Clothing_Head_Helmet_Space_Hardsuit_Wizard ) ) {
						return false;
					}
				}
			} else {
				
				if ( Lang13.Bool( this.clothes_req ) || Lang13.Bool( this.human_req ) ) {
					return false;
				}

				if ( this.nonabstract_req && ( user is Mob_Living_Carbon_Brain || user is Mob_Living_Silicon_Pai ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: spell.dm
		public bool can_be_cast_by( Mob caster = null ) {
			
			if ( ( Lang13.Bool( this.human_req ) || Lang13.Bool( this.clothes_req ) ) && !( caster is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			return true;
		}

		// Function from file: spell.dm
		public void adjust_var( Mob target = null, string type = null, int amount = 0 ) {
			target = target ?? Task13.User;

			
			switch ((string)( type )) {
				case "bruteloss":
					((Mob_Living)target).adjustBruteLoss( amount );
					break;
				case "fireloss":
					((Mob_Living)target).adjustFireLoss( amount );
					break;
				case "toxloss":
					((Mob_Living)target).adjustToxLoss( amount );
					break;
				case "oxyloss":
					((Mob_Living)target).adjustOxyLoss( amount );
					break;
				case "stunned":
					target.AdjustStunned( amount );
					break;
				case "weakened":
					target.AdjustWeakened( amount );
					break;
				case "paralysis":
					target.AdjustParalysis( amount );
					break;
				default:
					target.vars[type] += amount;
					break;
			}
			return;
		}

		// Function from file: spell.dm
		public virtual void revert_cast( Mob user = null ) {
			user = user ?? Task13.User;

			
			switch ((string)( this.charge_type )) {
				case "recharge":
					this.charge_counter = this.charge_max;
					break;
				case "charges":
					this.charge_counter++;
					break;
				case "holdervar":
					this.adjust_var( user, this.holder_var_type, -this.holder_var_amount );
					break;
			}
			return;
		}

		// Function from file: spell.dm
		public void critfail( dynamic targets = null ) {
			return;
		}

		// Function from file: spell.dm
		public virtual bool cast( dynamic targets = null, dynamic thearea = null, dynamic user = null ) {
			thearea = thearea ?? Task13.User;

			return false;
		}

		// Function from file: spell.dm
		public void after_cast( dynamic targets = null ) {
			Ent_Static target = null;
			Ent_Static location = null;
			EffectSystem_SparkSpread sparks = null;
			EffectSystem_SmokeSpread smoke = null;
			EffectSystem_SmokeSpread_Bad smoke2 = null;
			EffectSystem_SmokeSpread_Sleeping smoke3 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( targets, typeof(Ent_Static) )) {
				target = _a;
				
				location = null;

				if ( target is Mob_Living ) {
					location = target.loc;
				} else if ( target is Tile ) {
					location = target;
				}

				if ( target is Mob_Living && Lang13.Bool( this.message ) ) {
					((dynamic)target).WriteMsg( "" + this.message );
				}

				if ( this.sparks_spread ) {
					sparks = new EffectSystem_SparkSpread();
					sparks.set_up( this.sparks_amt, 0, location );
					sparks.start();
				}

				if ( this.smoke_spread != 0 ) {
					
					if ( this.smoke_spread == 1 ) {
						smoke = new EffectSystem_SmokeSpread();
						smoke.set_up( this.smoke_amt, location );
						smoke.start();
					} else if ( this.smoke_spread == 2 ) {
						smoke2 = new EffectSystem_SmokeSpread_Bad();
						smoke2.set_up( this.smoke_amt, location );
						smoke2.start();
					} else if ( this.smoke_spread == 3 ) {
						smoke3 = new EffectSystem_SmokeSpread_Sleeping();
						smoke3.set_up( this.smoke_amt, location );
						smoke3.start();
					}
				}
			}
			return;
		}

		// Function from file: spell.dm
		public virtual dynamic before_cast( dynamic targets = null ) {
			Ent_Static target = null;
			Ent_Static location = null;
			Obj_Effect_Overlay spell = null;

			
			if ( this.overlay == true ) {
				
				foreach (dynamic _a in Lang13.Enumerate( targets, typeof(Ent_Static) )) {
					target = _a;
					
					location = null;

					if ( target is Mob_Living ) {
						location = target.loc;
					} else if ( target is Tile ) {
						location = target;
					}
					spell = new Obj_Effect_Overlay( location );
					spell.icon = this.overlay_icon;
					spell.icon_state = this.overlay_icon_state;
					spell.anchored = 1;
					spell.density = false;
					Task13.Schedule( this.overlay_lifespan ?1:0, (Task13.Closure)(() => {
						GlobalFuncs.qdel( spell );
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: spell.dm
		public virtual void perform( dynamic targets = null, bool? recharge = null, dynamic user = null ) {
			recharge = recharge ?? true;
			user = user ?? Task13.User;

			this.before_cast( targets );
			this.f_invocation( user );

			if ( Lang13.Bool( user ) && Lang13.Bool( user.ckey ) ) {
				user.attack_log += "[" + GlobalFuncs.time_stamp() + "] <span class='danger'>" + user.real_name + " (" + user.ckey + ") cast the spell " + this.name + ".</span>";
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( this.charge_type == "recharge" && recharge == true ) {
					this.start_recharge();
				}
				return;
			}));

			if ( Lang13.Bool( this.sound ) ) {
				this.playMagSound();
			}

			if ( Rand13.PercentChance( this.critfailchance ) ) {
				this.critfail( targets );
			} else {
				this.cast( targets, null, user );
			}
			this.after_cast( targets );
			return;
		}

		// Function from file: spell.dm
		public void start_recharge(  ) {
			
			while (this.charge_counter < this.charge_max && this.gc_destroyed == null) {
				Task13.Sleep( 1 );
				this.charge_counter++;
			}
			return;
		}

		// Function from file: spell.dm
		public virtual void choose_targets( Mob user = null ) {
			user = user ?? Task13.User;

			return;
		}

		// Function from file: spell.dm
		public void playMagSound(  ) {
			GlobalFuncs.playsound( GlobalFuncs.get_turf( Task13.User ), this.sound, 50, 1 );
			return;
		}

		// Function from file: spell.dm
		[VerbInfo( name: "invocation" )]
		[VerbArg( 1, InputType.Mob )]
		public virtual void f_invocation( dynamic chosenarea = null, dynamic user = null ) {
			chosenarea = chosenarea ?? Task13.User;

			
			switch ((string)( this.invocation_type )) {
				case "shout":
					
					if ( Rand13.PercentChance( 50 ) ) {
						((Ent_Dynamic)chosenarea).say( this.invocation );
					} else {
						((Ent_Dynamic)chosenarea).say( GlobalFuncs.replacetext( this.invocation, " ", "`" ) );
					}
					break;
				case "whisper":
					
					if ( Rand13.PercentChance( 50 ) ) {
						chosenarea.__CallVerb("Whisper", this.invocation );
					} else {
						chosenarea.__CallVerb("Whisper", GlobalFuncs.replacetext( this.invocation, " ", "`" ) );
					}
					break;
				case "emote":
					((Ent_Static)chosenarea).visible_message( this.invocation, this.invocation_emote_self );
					break;
			}
			return;
		}

		// Function from file: spell.dm
		public bool cast_check( bool? skipcharge = null, Mob user = null ) {
			skipcharge = skipcharge ?? false;
			user = user ?? Task13.User;

			Mob H = null;

			
			if ( this.player_lock ) {
				
				if ( !( user.mind != null ) || !user.mind.spell_list.Contains( this ) && !user.mob_spell_list.Contains( this ) ) {
					user.WriteMsg( "<span class='warning'>You shouldn't have this spell! Something's wrong.</span>" );
					return false;
				}
			} else if ( !user.mob_spell_list.Contains( this ) ) {
				return false;
			}

			if ( user.z == 2 && !this.centcom_cancast ) {
				return false;
			}

			if ( user.z == 2 && GlobalVars.ticker.mode.name == "ragin' mages" ) {
				return false;
			}

			if ( !( skipcharge == true ) ) {
				
				switch ((string)( this.charge_type )) {
					case "recharge":
						
						if ( this.charge_counter < this.charge_max ) {
							user.WriteMsg( this.still_recharging_msg );
							return false;
						}
						break;
					case "charges":
						
						if ( !( this.charge_counter != 0 ) ) {
							user.WriteMsg( "<span class='notice'>" + this.name + " has no charges left.</span>" );
							return false;
						}
						break;
				}
			}

			if ( user.stat != 0 && !this.stat_allowed ) {
				user.WriteMsg( "<span class='notice'>Not when you're incapacitated.</span>" );
				return false;
			}

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				if ( ( this.invocation_type == "whisper" || this.invocation_type == "shout" ) && H.is_muzzled() ) {
					user.WriteMsg( "<span class='notice'>You can't get the words out!</span>" );
					return false;
				}

				if ( Lang13.Bool( this.clothes_req ) ) {
					
					if ( !( ((dynamic)H).wear_suit is Obj_Item_Clothing_Suit_Wizrobe ) && !( ((dynamic)H).wear_suit is Obj_Item_Clothing_Suit_Space_Hardsuit_Wizard ) ) {
						H.WriteMsg( "<span class='notice'>I don't feel strong enough without my robe.</span>" );
						return false;
					}

					if ( !( ((dynamic)H).shoes is Obj_Item_Clothing_Shoes_Sandal ) ) {
						H.WriteMsg( "<span class='notice'>I don't feel strong enough without my sandals.</span>" );
						return false;
					}

					if ( !( ((dynamic)H).head is Obj_Item_Clothing_Head_Wizard ) && !( ((dynamic)H).head is Obj_Item_Clothing_Head_Helmet_Space_Hardsuit_Wizard ) ) {
						H.WriteMsg( "<span class='notice'>I don't feel strong enough without my hat.</span>" );
						return false;
					}
				}

				if ( this.cult_req ) {
					
					if ( !( ((dynamic)H).wear_suit is Obj_Item_Clothing_Suit_Magusred ) && !( ((dynamic)H).wear_suit is Obj_Item_Clothing_Suit_Space_Cult ) ) {
						H.WriteMsg( "<span class='notice'>I don't feel strong enough without my armor.</span>" );
						return false;
					}

					if ( !( ((dynamic)H).head is Obj_Item_Clothing_Head_Magus ) && !( ((dynamic)H).head is Obj_Item_Clothing_Head_Helmet_Space_Cult ) ) {
						H.WriteMsg( "<span class='notice'>I don't feel strong enough without my helmet.</span>" );
						return false;
					}
				}
			} else {
				
				if ( Lang13.Bool( this.clothes_req ) || Lang13.Bool( this.human_req ) ) {
					user.WriteMsg( "<span class='notice'>This spell can only be cast by humans!</span>" );
					return false;
				}

				if ( this.nonabstract_req && ( user is Mob_Living_Carbon_Brain || user is Mob_Living_Silicon_Pai ) ) {
					user.WriteMsg( "<span class='notice'>This spell can only be cast by physical beings!</span>" );
					return false;
				}
			}

			if ( !( skipcharge == true ) ) {
				
				switch ((string)( this.charge_type )) {
					case "recharge":
						this.charge_counter = 0;
						break;
					case "charges":
						this.charge_counter--;
						break;
					case "holdervar":
						this.adjust_var( user, this.holder_var_type, this.holder_var_amount );
						break;
				}
			}
			return true;
		}

	}

}