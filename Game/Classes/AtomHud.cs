// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class AtomHud : Game_Data {

		public ByTable hudatoms = new ByTable();
		public ByTable hudusers = new ByTable();
		public ByTable hud_icons = new ByTable();

		// Function from file: hud.dm
		public virtual void add_to_single_hud( dynamic M = null, dynamic A = null ) {
			dynamic i = null;

			
			if ( !Lang13.Bool( M ) || !Lang13.Bool( M.client ) || !Lang13.Bool( A ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.hud_icons )) {
				i = _a;
				

				if ( Lang13.Bool( A.hud_list[i] ) ) {
					M.client.images.Or( A.hud_list[i] );
				}
			}
			return;
		}

		// Function from file: hud.dm
		public void add_to_hud( dynamic A = null ) {
			dynamic M = null;

			
			if ( !Lang13.Bool( A ) ) {
				return;
			}
			this.hudatoms.Or( A );

			foreach (dynamic _a in Lang13.Enumerate( this.hudusers )) {
				M = _a;
				
				this.add_to_single_hud( M, A );
			}
			return;
		}

		// Function from file: hud.dm
		public void add_hud_to( dynamic M = null ) {
			Ent_Static A = null;

			
			if ( !Lang13.Bool( M ) ) {
				return;
			}
			this.hudusers.Or( M );

			foreach (dynamic _a in Lang13.Enumerate( this.hudatoms, typeof(Ent_Static) )) {
				A = _a;
				
				this.add_to_single_hud( M, A );
			}
			return;
		}

		// Function from file: hud.dm
		public void remove_from_single_hud( dynamic M = null, dynamic A = null ) {
			dynamic i = null;

			
			if ( !Lang13.Bool( M ) || !Lang13.Bool( M.client ) || !Lang13.Bool( A ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.hud_icons )) {
				i = _a;
				
				M.client.images.Remove( A.hud_list[i] );
			}
			return;
		}

		// Function from file: hud.dm
		public void remove_from_hud( dynamic A = null ) {
			dynamic M = null;

			
			if ( !Lang13.Bool( A ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.hudusers )) {
				M = _a;
				
				this.remove_from_single_hud( M, A );
			}
			this.hudatoms.Remove( A );
			return;
		}

		// Function from file: hud.dm
		public void remove_hud_from( dynamic M = null ) {
			Ent_Static A = null;

			
			if ( !Lang13.Bool( M ) ) {
				return;
			}

			if ( M.permanent_huds.Contains( this ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.hudatoms, typeof(Ent_Static) )) {
				A = _a;
				
				this.remove_from_single_hud( M, A );
			}
			this.hudusers.Remove( M );
			return;
		}

	}

}