// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Rack : Obj_Structure {

		public int health = 5;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.pass_flags = 32;
			this.icon = "icons/obj/objects.dmi";
			this.icon_state = "rack";
		}

		public Obj_Structure_Rack ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tables_racks.dm
		public void rack_destroy(  ) {
			Obj_Item_Weapon_RackParts newparts = null;

			
			if ( !Lang13.Bool( this.flags & 128 ) ) {
				this.density = false;
				newparts = new Obj_Item_Weapon_RackParts( this.loc );
				this.transfer_fingerprints_to( newparts );
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: tables_racks.dm
		public void healthcheck(  ) {
			
			if ( this.health <= 0 ) {
				this.rack_destroy();
			}
			return;
		}

		// Function from file: tables_racks.dm
		public override void attack_tk( Mob_Living_Carbon_Human user = null ) {
			return;
		}

		// Function from file: tables_racks.dm
		public override bool attack_animal( Mob_Living user = null ) {
			
			if ( Lang13.Bool( ((dynamic)user).environment_smash ) ) {
				user.do_attack_animation( this );
				this.visible_message( "<span class='warning'>" + user + " smashes " + this + " apart.</span>" );
				this.rack_destroy();
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool attack_alien( dynamic user = null ) {
			((Ent_Dynamic)user).do_attack_animation( this );
			this.visible_message( "<span class='warning'>" + user + " slices " + this + " apart.</span>" );
			this.rack_destroy();
			return false;
		}

		// Function from file: tables_racks.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			((Mob)a).changeNext_move( 8 );
			((Ent_Dynamic)a).do_attack_animation( this );
			GlobalFuncs.playsound( this.loc, "sound/items/dodgeball.ogg", 80, 1 );
			((Ent_Static)a).visible_message( "<span class='warning'>" + a + " kicks " + this + ".</span>", "<span class='danger'>You kick " + this + ".</span>" );
			this.health -= Rand13.Int( 1, 2 );
			this.healthcheck();
			return null;
		}

		// Function from file: tables_racks.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			base.attack_hulk( hulk, true );
			this.rack_destroy();
			return true;
		}

		// Function from file: tables_racks.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.attack_hand( a );
			return null;
		}

		// Function from file: tables_racks.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Wrench && !Lang13.Bool( this.flags & 128 ) ) {
				GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
				this.rack_destroy();
				return null;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				return null;
			}

			if ( !Lang13.Bool( user.drop_item() ) ) {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( A ).item().str( " is stuck to your hand, you cannot put it in the rack!</span>" ).ToString() );
				return null;
			}
			A.Move( this.loc );
			return 1;
		}

		// Function from file: tables_racks.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			
			if ( !( O is Obj_Item_Weapon ) || ((Mob)user).get_active_hand() != O ) {
				return false;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				return false;
			}

			if ( !Lang13.Bool( user.drop_item() ) ) {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( O ).item().str( " is stuck to your hand, you cannot put it in the rack!</span>" ).ToString() );
				return false;
			}

			if ( O.loc != this.loc ) {
				Map13.Step( (Ent_Dynamic)(O), Map13.GetDistance( O, this ) );
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			
			if ( height == 0 ) {
				return true;
			}

			if ( !this.density ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Dynamic)mover).checkpass( 1 ) != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: tables_racks.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				GlobalFuncs.qdel( this );
				return false;
			} else if ( Rand13.PercentChance( 50 ) ) {
				this.rack_destroy();
				return false;
			}
			return false;
		}

		// Function from file: tables_racks.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.rack_destroy();
					} else {
						GlobalFuncs.qdel( this );
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.rack_destroy();
					}
					break;
			}
			return false;
		}

	}

}