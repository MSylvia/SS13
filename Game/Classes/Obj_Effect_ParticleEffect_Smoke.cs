// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_ParticleEffect_Smoke : Obj_Effect_ParticleEffect {

		public int amount = 4;
		public int lifetime = 5;
		public bool opaque = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pixel_x = -32;
			this.pixel_y = -32;
			this.anchored = 1;
			this.icon = "icons/effects/96x96.dmi";
			this.icon_state = "smoke";
		}

		// Function from file: effects_smoke.dm
		public Obj_Effect_ParticleEffect_Smoke ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( 500 );
			GlobalVars.SSobj.processing.Or( this );
			return;
		}

		// Function from file: effects_smoke.dm
		public override int? process( dynamic seconds = null ) {
			Mob_Living L = null;

			this.lifetime--;

			if ( this.lifetime < 1 ) {
				this.kill_smoke();
				return 0;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 0 ), typeof(Mob_Living) )) {
				L = _a;
				
				this.smoke_mob( L );
			}
			return 1;
		}

		// Function from file: effects_smoke.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSobj.processing.Remove( this );
			return base.Destroy();
		}

		// Function from file: effects_smoke.dm
		public void spread_smoke(  ) {
			dynamic t_loc = null;
			ByTable newsmokes = null;
			dynamic T = null;
			dynamic foundsmoke = null;
			Mob_Living L = null;
			dynamic S = null;
			Obj_Effect_ParticleEffect_Smoke SM = null;

			t_loc = GlobalFuncs.get_turf( this );
			newsmokes = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( ((Tile)t_loc).GetAtmosAdjacentTurfs() )) {
				T = _b;
				
				foundsmoke = Lang13.FindIn( typeof(Obj_Effect_ParticleEffect_Smoke), T );

				if ( Lang13.Bool( foundsmoke ) ) {
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Mob_Living) )) {
					L = _a;
					
					this.smoke_mob( L );
				}
				S = Lang13.Call( this.type, T );
				this.reagents.copy_to( S, this.reagents.total_volume );
				S.dir = Rand13.PickFromTable( GlobalVars.cardinal );
				S.amount = this.amount - 1;
				S.color = this.color;
				S.lifetime = this.lifetime;

				if ( Convert.ToDouble( S.amount ) > 0 ) {
					
					if ( this.opaque ) {
						S.opacity = 1;
					}
					newsmokes.Add( S );
				}
			}

			if ( newsmokes.len != 0 ) {
				Task13.Schedule( 1, (Task13.Closure)(() => {
					
					foreach (dynamic _c in Lang13.Enumerate( newsmokes, typeof(Obj_Effect_ParticleEffect_Smoke) )) {
						SM = _c;
						
						SM.spread_smoke();
					}
					return;
				}));
			}
			return;
		}

		// Function from file: effects_smoke.dm
		public virtual bool smoke_mob( Mob_Living C = null ) {
			
			if ( !( C is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( this.lifetime < 1 ) {
				return false;
			}

			if ( ((dynamic)C).v_internal != null || Lang13.Bool( ((dynamic)C).has_smoke_protection() ) ) {
				return false;
			}

			if ( C.smoke_delay != 0 ) {
				return false;
			}
			C.smoke_delay++;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				
				if ( C != null ) {
					C.smoke_delay = 0;
				}
				return;
			}));
			return true;
		}

		// Function from file: effects_smoke.dm
		public void kill_smoke(  ) {
			GlobalVars.SSobj.processing.Remove( this );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.fade_out();
				return;
			}));
			Task13.Schedule( 10, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return;
		}

		// Function from file: effects_smoke.dm
		public void fade_out( int? frames = null ) {
			frames = frames ?? 16;

			double step = 0;
			int? i = null;

			
			if ( this.alpha == 0 ) {
				return;
			}

			if ( frames == 0 ) {
				frames = 1;
			}
			step = this.alpha / ( frames ??0);
			i = null;
			i = 0;

			while (( i ??0) < ( frames ??0)) {
				this.alpha -= ((int)( step ));
				Task13.Sleep( ((int)( Game13.tick_lag )) );
				i++;
			}
			return;
		}

	}

}