// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Flash : Obj_Item_Device_Assembly {

		public int times_used = 0;
		public int last_used = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "flashtool";
			this.w_class = 1;
			this.materials = new ByTable().Set( "$metal", 300 ).Set( "$glass", 300 );
			this.origin_tech = "magnets=2;combat=1";
			this.icon_state = "flash";
		}

		public Obj_Item_Device_Assembly_Flash ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: flash.dm
		public override double emp_act( int severity = 0 ) {
			Mob_Living_Carbon M = null;

			
			if ( !this.try_use_flash() || !( this.loc != null ) ) {
				return 0;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( this.loc, 3 ), typeof(Mob_Living_Carbon) )) {
				M = _a;
				
				this.flash_carbon( M, null, 10, false );
			}
			this.burn_out();
			base.emp_act( severity );
			return 0;
		}

		// Function from file: flash.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			flag = flag ?? 0;
			emp = emp ?? false;

			Mob_Living_Carbon M = null;

			
			if ( this.holder != null ) {
				return 0;
			}

			if ( !this.try_use_flash( user ) ) {
				return 0;
			}
			((Ent_Static)user).visible_message( "<span class='disarm'>" + user + "'s flash emits a blinding light!</span>", "<span class='danger'>Your flash emits a blinding light!</span>" );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewersExcludeThis( null, 3 ), typeof(Mob_Living_Carbon) )) {
				M = _a;
				
				this.flash_carbon( M, user, 1, false );
			}
			return null;
		}

		// Function from file: flash.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( !this.try_use_flash( user ) ) {
				return false;
			}

			if ( M is Mob_Living_Carbon ) {
				this.flash_carbon( M, user, 5, true );
				return true;
			} else if ( M is Mob_Living_Silicon ) {
				GlobalFuncs.add_logs( user, M, "flashed", this );
				this.update_icon( 1 );
				((Mob)M).Weaken( Rand13.Int( 5, 10 ) );
				((Ent_Static)user).visible_message( "<span class='disarm'>" + user + " overloads " + M + "'s sensors with the flash!</span>", "<span class='danger'>You overload " + M + "'s sensors with the flash!</span>" );
				return true;
			}
			((Ent_Static)user).visible_message( "<span class='disarm'>" + user + " fails to blind " + M + " with the flash!</span>", "<span class='warning'>You fail to blind " + M + " with the flash!</span>" );
			return false;
		}

		// Function from file: flash.dm
		public override bool activate(  ) {
			dynamic T = null;
			Mob_Living_Carbon M = null;

			
			if ( !this.try_use_flash() ) {
				return false;
			}
			T = GlobalFuncs.get_turf( this );
			((Ent_Static)T).visible_message( "<span class='disarm'>" + this + " emits a blinding light!</span>" );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, 3 ), typeof(Mob_Living_Carbon) )) {
				M = _a;
				
				this.flash_carbon( M, null, 5, false );
			}
			return false;
		}

		// Function from file: flash.dm
		public void terrible_conversion_proc( dynamic M = null, dynamic user = null ) {
			bool resisted = false;

			
			if ( M is Mob_Living_Carbon_Human && user is Mob_Living_Carbon_Human && Convert.ToInt32( M.stat ) != 2 ) {
				
				if ( Lang13.Bool( user.mind ) && GlobalVars.ticker.mode.head_revolutionaries.Contains( user.mind ) ) {
					
					if ( Lang13.Bool( M.client ) ) {
						
						if ( Lang13.Bool( M.stat ) == false ) {
							((Mob)M).mind_initialize();

							if ( !GlobalFuncs.isloyal( M ) ) {
								
								if ( GlobalVars.ticker.mode.head_revolutionaries.Contains( user.mind ) ) {
									
									if ( ((GameMode)GlobalVars.ticker.mode).add_revolutionary( M.mind ) ) {
										this.times_used--;
									} else {
										resisted = true;
									}
								}
							} else {
								resisted = true;
							}

							if ( resisted ) {
								user.WriteMsg( "<span class='warning'>This mind seems resistant to the flash!</span>" );
							}
						} else {
							user.WriteMsg( "<span class='warning'>They must be conscious before you can convert them!</span>" );
						}
					} else {
						user.WriteMsg( "<span class='warning'>This mind is so vacant that it is not susceptible to influence!</span>" );
					}
				}
			}
			return;
		}

		// Function from file: flash.dm
		public void flash_carbon( dynamic M = null, dynamic user = null, int? power = null, bool? targeted = null ) {
			power = power ?? 15;
			targeted = targeted ?? true;

			GlobalFuncs.add_logs( user, M, "flashed", this );

			if ( Lang13.Bool( user ) && targeted == true ) {
				
				if ( M.weakeyes ) {
					((Mob)M).Weaken( 3 );
				}

				if ( ((Mob_Living)M).flash_eyes( 1, true ) ) {
					M.confused += power ??0;
					this.terrible_conversion_proc( M, user );
					((Mob)M).Stun( 1 );
					this.visible_message( "<span class='disarm'>" + user + " blinds " + M + " with the flash!</span>" );
					user.WriteMsg( "<span class='danger'>You blind " + M + " with the flash!</span>" );
					M.WriteMsg( "<span class='userdanger'>" + user + " blinds you with the flash!</span>" );

					if ( M.weakeyes ) {
						((Mob)M).Stun( 2 );
						((Ent_Static)M).visible_message( "<span class='disarm'>" + M + " gasps and shields their eyes!</span>", "<span class='userdanger'>You gasp and shields your eyes!</span>" );
					}
				} else {
					this.visible_message( "<span class='disarm'>" + user + " fails to blind " + M + " with the flash!</span>" );
					user.WriteMsg( "<span class='warning'>You fail to blind " + M + " with the flash!</span>" );
					M.WriteMsg( "<span class='danger'>" + user + " fails to blind you with the flash!</span>" );
				}
			} else if ( ((Mob_Living)M).flash_eyes() ) {
				M.confused += power ??0;
			}
			return;
		}

		// Function from file: flash.dm
		public bool try_use_flash( dynamic user = null ) {
			this.flash_recharge( 10 );

			if ( this.crit_fail ) {
				return false;
			}
			GlobalFuncs.playsound( this.loc, "sound/weapons/flash.ogg", 100, 1 );
			this.update_icon( 1 );
			this.times_used++;

			if ( Lang13.Bool( user ) && !this.clown_check( user ) ) {
				return false;
			}
			return true;
		}

		// Function from file: flash.dm
		public bool flash_recharge( double? interval = null ) {
			interval = interval ?? 10;

			int deciseconds_passed = 0;
			double? seconds = null;

			
			if ( Rand13.PercentChance( this.times_used * 3 ) ) {
				this.burn_out();
				return false;
			}
			deciseconds_passed = Game13.time - this.last_used;
			seconds = null;
			seconds = deciseconds_passed / 10;

			while (( seconds ??0) >= ( interval ??0)) {
				this.times_used--;
				seconds -= interval ??0;
			}
			this.last_used = Game13.time;
			this.times_used = Num13.MaxInt( 0, this.times_used );
			return true;
		}

		// Function from file: flash.dm
		public void burn_out(  ) {
			dynamic T = null;

			
			if ( !this.crit_fail ) {
				this.crit_fail = true;
				this.update_icon();
				T = GlobalFuncs.get_turf( this );
				((Ent_Static)T).visible_message( "The " + this.name + " burns out!" );
			}
			return;
		}

		// Function from file: flash.dm
		public bool clown_check( dynamic user = null ) {
			
			if ( Lang13.Bool( user.disabilities & 256 ) && Rand13.PercentChance( 50 ) ) {
				this.flash_carbon( user, user, 15, false );
				return false;
			}
			return true;
		}

		// Function from file: flash.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			new_state = new_state ?? 0;

			this.overlays.Cut();
			this.attached_overlays = new ByTable();

			if ( this.crit_fail ) {
				this.overlays.Add( "flashburnt" );
				this.attached_overlays.Add( "flashburnt" );
			}

			if ( Lang13.Bool( new_state ) ) {
				this.overlays.Add( "flash-f" );
				this.attached_overlays.Add( "flash-f" );
				Task13.Schedule( 5, (Task13.Closure)(() => {
					this.update_icon();
					return;
				}));
			}

			if ( this.holder != null ) {
				this.holder.update_icon();
			}
			return null;
		}

	}

}