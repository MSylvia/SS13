// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet_Crate_Secure : Obj_Structure_Closet_Crate {

		public string redlight = "securecrater";
		public string greenlight = "securecrateg";
		public string sparks = "securecratesparks";
		public string emag = "securecrateemag";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_crate = "securecrate";
			this.locked = true;
			this.health = 1000;
			this.icon_state = "securecrate";
		}

		public Obj_Structure_Closet_Crate_Secure ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: crates.dm
		public override double emp_act( int severity = 0 ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				
				O.emp_act( severity );
			}

			if ( !this.broken && !this.opened && Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
				
				if ( !this.locked ) {
					this.locked = true;
					this.update_icon();
				} else {
					this.locked = false;
					this.broken = true;
					this.update_icon();
					this.overlays.Add( this.sparks );
					Task13.Schedule( 6, (Task13.Closure)(() => {
						this.overlays.Remove( this.sparks );
						return;
					}));
					GlobalFuncs.playsound( this.loc, "sound/effects/sparks4.ogg", 75, 1 );
				}
			}

			if ( !this.opened && Rand13.PercentChance( ((int)( 20 / severity )) ) ) {
				
				if ( !this.locked ) {
					this.open();
				} else {
					this.req_access = new ByTable();
					this.req_access += Rand13.PickFromTable( GlobalFuncs.get_all_accesses() );
				}
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: crates.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( this.locked && !this.broken ) {
				this.locked = false;
				this.broken = true;
				this.update_icon();
				this.overlays.Add( this.sparks );
				Task13.Schedule( 6, (Task13.Closure)(() => {
					this.overlays.Remove( this.sparks );
					return;
				}));
				GlobalFuncs.playsound( this.loc, "sparks", 60, 1 );
				user.WriteMsg( new Txt( "<span class='notice'>You unlock " ).the( this ).item().str( ".</span>" ).ToString() );
				this.add_fingerprint( user );
			}
			return false;
		}

		// Function from file: crates.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Card && this.allowed( user ) && !this.locked && !this.opened && !this.broken ) {
				user.WriteMsg( new Txt( "<span class='notice'>You lock " ).the( this ).item().str( ".</span>" ).ToString() );
				this.locked = true;
				this.update_icon();
				this.add_fingerprint( user );
				return null;
			}
			return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
		}

		// Function from file: crates.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( this.manifest != null ) {
				this.tear_manifest( a );
				return null;
			}

			if ( this.locked && !this.broken ) {
				
				if ( this.allowed( a ) ) {
					a.WriteMsg( "<span class='notice'>You unlock " + this + ".</span>" );
					this.locked = false;
					this.update_icon();
					this.add_fingerprint( a );
					return null;
				} else {
					a.WriteMsg( "<span class='notice'>" + this + " is locked.</span>" );
					return null;
				}
			} else {
				base.attack_hand( (object)(a), b, c );
			}
			return null;
		}

		// Function from file: crates.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );

			if ( this.locked ) {
				this.overlays.Add( this.redlight );
			} else if ( this.broken ) {
				this.overlays.Add( this.emag );
			} else {
				this.overlays.Add( this.greenlight );
			}
			return null;
		}

	}

}