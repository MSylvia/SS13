// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Canister : Obj_Machinery_PortableAtmospherics {

		public double health = 100;
		public bool valve_open = false;
		public dynamic release_pressure = 101.32499694824219;
		public string canister_color = "yellow";
		public bool can_label = true;
		public double filled = 0.5;
		public double temperature_resistance = 1273.1500244140625;
		public string release_log = "";
		public int update_flag = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pressure_resistance = 709.2749633789062;
			this.volume = 1000;
			this.icon = "icons/obj/atmos.dmi";
			this.icon_state = "yellow";
		}

		public Obj_Machinery_PortableAtmospherics_Canister ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: canister.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			ByTable colors = null;
			dynamic label = null;
			dynamic custom = null;
			string logmsg = null;
			dynamic sleeping_agent = null;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _b = action; // Was a switch-case, sorry for the mess.
			if ( _b=="relabel" ) {
				
				if ( this.can_label ) {
					colors = new ByTable().Set( "[N2O]", "redws" ).Set( "[N2]", "red" ).Set( "[O2]", "blue" ).Set( "[Plasma]", "orange" ).Set( "[CO2]", "black" ).Set( "[Air]", "grey" ).Set( "[CAUTION]", "yellow" );
					label = Interface13.Input( "Label canister:", "Gas Canister", null, null, colors, InputType.Null | InputType.Any );

					if ( Lang13.Bool( label ) ) {
						this.canister_color = colors[label];
						this.icon_state = colors[label];
						this.name = "canister: " + label;
					}
				}
			} else if ( _b=="pressure" ) {
				
				dynamic _a = _params["pressure"]; // Was a switch-case, sorry for the mess.
				if ( _a=="custom" ) {
					custom = Interface13.Input( Task13.User, "What rate do you set the regulator to? The dial reads from " + 10.132499694824219 + " to " + 1013.25 + ".", null, null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( custom ) ) {
						this.release_pressure = custom;
					}
				} else if ( _a=="reset" ) {
					this.release_pressure = 101.32499694824219;
				} else if ( _a=="min" ) {
					this.release_pressure = 10.132499694824219;
				} else if ( _a=="max" ) {
					this.release_pressure = 1013.25;
				}
				this.release_pressure = Num13.MaxInt( ((int)( 10.132499694824219 )), Num13.MinInt( Num13.Floor( Convert.ToDouble( this.release_pressure ) ), ((int)( 1013.25 )) ) );
			} else if ( _b=="valve" ) {
				logmsg = null;

				if ( this.valve_open ) {
					
					if ( Lang13.Bool( this.holding ) ) {
						logmsg = "Valve was <b>closed</b> by " + GlobalFuncs.key_name( Task13.User ) + ", stopping the transfer into the " + this.holding + "<br>";
					} else {
						logmsg = "Valve was <b>closed</b> by " + GlobalFuncs.key_name( Task13.User ) + ", stopping the transfer into the <span class='boldannounce'>air</span><br>";
					}
				} else if ( Lang13.Bool( this.holding ) ) {
					logmsg = "Valve was <b>opened</b> by " + GlobalFuncs.key_name( Task13.User ) + ", starting the transfer into the " + this.holding + "<br>";
				} else {
					logmsg = "Valve was <b>opened</b> by " + GlobalFuncs.key_name( Task13.User ) + ", starting the transfer into the <span class='boldannounce'>air</span><br>";

					if ( ( this.air_contents.toxins ??0) > 0 ) {
						GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( Task13.User ) ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( Task13.User ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( Task13.User ).str( "'>FLW</A>) opened a canister that contains plasma! (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( this.x ).str( ";Y=" ).item( this.y ).str( ";Z=" ).item( this.z ).str( "'>JMP</a>)" ).ToString() );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " opened a canister that contains plasma at " + this.x + ", " + this.y + ", " + this.z );
					}
					sleeping_agent = Lang13.FindIn( typeof(Gas_SleepingAgent), this.air_contents.trace_gases );

					if ( Lang13.Bool( sleeping_agent ) && ( sleeping_agent.moles ??0) > 1 ) {
						GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( Task13.User ) ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( Task13.User ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( Task13.User ).str( "'>FLW</A>) opened a canister that contains N2O! (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( this.x ).str( ";Y=" ).item( this.y ).str( ";Z=" ).item( this.z ).str( "'>JMP</a>)" ).ToString() );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " opened a canister that contains N2O at " + this.x + ", " + this.y + ", " + this.z );
					}
				}
				this.investigate_log( logmsg, "atmos" );
				this.release_log += logmsg;
				this.valve_open = !this.valve_open;
			} else if ( _b=="eject" ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					
					if ( this.valve_open ) {
						this.investigate_log( "" + GlobalFuncs.key_name( Task13.User ) + " removed the " + this.holding + ", leaving the valve open and transfering into the <span class='boldannounce'>air</span><br>", "atmos" );
					}
					this.holding.loc = this.loc;
					this.holding = null;
				}
			}
			this.add_fingerprint( Task13.User );
			this.update_icon();
			return true;
		}

		// Function from file: canister.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable();
			data["name"] = this.name;
			data["canLabel"] = ( this.can_label ? true : false );
			data["portConnected"] = ( Lang13.Bool( this.connected_port ) ? true : false );
			data["tankPressure"] = Num13.Floor( ( this.air_contents.return_pressure() != 0 ? this.air_contents.return_pressure() : 0 ) );
			data["releasePressure"] = Num13.Floor( Convert.ToDouble( ( Lang13.Bool( this.release_pressure ) ? this.release_pressure : ((dynamic)( 0 )) ) ) );
			data["defaultReleasePressure"] = Num13.Floor( 101.32499694824219 );
			data["minReleasePressure"] = Num13.Floor( 10.132499694824219 );
			data["maxReleasePressure"] = Num13.Floor( 1013.25 );
			data["valveOpen"] = ( this.valve_open ? true : false );
			data["hasHoldingTank"] = ( Lang13.Bool( this.holding ) ? true : false );

			if ( Lang13.Bool( this.holding ) ) {
				data["holdingTank"] = new ByTable();
				data["holdingTank"]["name"] = this.holding.name;
				data["holdingTank"]["tankPressure"] = Num13.Floor( Convert.ToDouble( this.holding.air_contents.return_pressure() ) );
			}
			return data;
		}

		// Function from file: canister.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.physical_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "canister", this.name, 405, 405, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: canister.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( this.destroyed ) {
				return null;
			}
			this.ui_interact( user );
			return null;
		}

		// Function from file: canister.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: canister.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic thejetpack = null;
			dynamic env_pressure = null;
			int pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;

			
			if ( !( A is Obj_Item_Weapon_Wrench ) && !( A is Obj_Item_Weapon_Tank ) && !( A is Obj_Item_Device_Analyzer ) && !( A is Obj_Item_Device_Pda ) ) {
				this.investigate_log( new Txt( "was smacked with " ).a( A ).item().str( " by " ).item( GlobalFuncs.key_name( user ) ).ToString(), "atmos" );
				this.health -= Convert.ToDouble( A.force );
				this.add_fingerprint( user );
				this.healthcheck();
			}

			if ( user is Mob_Living_Silicon_Robot && A is Obj_Item_Weapon_Tank_Jetpack ) {
				thejetpack = A.air_contents;
				env_pressure = thejetpack.return_pressure();
				pressure_delta = Num13.MinInt( ((int)( 1013.25 - Convert.ToDouble( env_pressure ) )), ((int)( ( this.air_contents.return_pressure() - Convert.ToDouble( env_pressure ) ) / 2 )) );
				transfer_moles = 0;

				if ( Convert.ToDouble( this.air_contents.temperature ) > 0 && pressure_delta > 0 ) {
					transfer_moles = pressure_delta * Convert.ToDouble( thejetpack.volume ) / Convert.ToDouble( this.air_contents.temperature * 8.31 );
					removed = this.air_contents.remove( transfer_moles );
					thejetpack.merge( removed );
					user.WriteMsg( "<span class='notice'>You pulse-pressurize your jetpack from the tank.</span>" );
				}
				return null;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: canister.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					
					if ( this.destroyed || Rand13.PercentChance( 30 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						this.health = 0;
						this.healthcheck();
					}
					return false;
					break;
				case 2:
					
					if ( this.destroyed ) {
						GlobalFuncs.qdel( this );
					} else {
						this.health -= Rand13.Int( 40, 100 );
						this.healthcheck();
					}
					return false;
					break;
				case 3:
					this.health -= Rand13.Int( 15, 40 );
					this.healthcheck();
					return false;
					break;
			}
			return false;
		}

		// Function from file: canister.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( P.damage_type == "brute" || P.damage_type == "fire" ) {
				
				if ( Lang13.Bool( P.damage ) ) {
					this.health -= Num13.Floor( Convert.ToDouble( P.damage / 2 ) );
					this.healthcheck();
				}
			}
			base.bullet_act( (object)(P), (object)(def_zone) );
			return null;
		}

		// Function from file: canister.dm
		public override bool blob_act( dynamic severity = null ) {
			this.health -= 200;
			this.healthcheck();
			return false;
		}

		// Function from file: canister.dm
		public override GasMixture return_air(  ) {
			return this.air_contents;
		}

		// Function from file: canister.dm
		public override int? process( dynamic seconds = null ) {
			this.updateDialog();
			return base.process( (object)(seconds) );
		}

		// Function from file: canister.dm
		public override int process_atmos(  ) {
			GasMixture environment = null;
			double env_pressure = 0;
			int pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;

			
			if ( this.destroyed ) {
				return 26;
			}
			base.process_atmos();

			if ( this.valve_open ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					environment = this.holding.air_contents;
				} else {
					environment = this.loc.return_air();
				}
				env_pressure = environment.return_pressure();
				pressure_delta = Num13.MinInt( Convert.ToInt32( this.release_pressure - env_pressure ), ((int)( ( this.air_contents.return_pressure() - env_pressure ) / 2 )) );
				transfer_moles = 0;

				if ( Convert.ToDouble( this.air_contents.temperature ) > 0 && pressure_delta > 0 ) {
					transfer_moles = pressure_delta * environment.volume / Convert.ToDouble( this.air_contents.temperature * 8.31 );
					removed = this.air_contents.remove( transfer_moles );

					if ( Lang13.Bool( this.holding ) ) {
						environment.merge( removed );
					} else {
						this.loc.assume_air( removed );
						this.air_update_turf();
					}
					this.update_icon();
				}
			}

			if ( this.air_contents.return_pressure() < 1 ) {
				this.can_label = true;
			} else {
				this.can_label = false;
			}
			return 0;
		}

		// Function from file: canister.dm
		public override dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			
			if ( Convert.ToDouble( exposed_temperature ) > this.temperature_resistance ) {
				this.health -= 5;
				this.healthcheck();
			}
			return null;
		}

		// Function from file: canister.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.destroyed ) {
				this.overlays = 0;
				this.icon_state = "" + this.canister_color + "-1";
				return null;
			}

			if ( this.icon_state != "" + this.canister_color ) {
				this.icon_state = "" + this.canister_color;
			}

			if ( this.check_change() ) {
				return null;
			}
			this.overlays = 0;

			if ( ( this.update_flag & 1 ) != 0 ) {
				this.overlays.Add( "can-open" );
			}

			if ( ( this.update_flag & 2 ) != 0 ) {
				this.overlays.Add( "can-connector" );
			}

			if ( ( this.update_flag & 4 ) != 0 ) {
				this.overlays.Add( "can-o0" );
			}

			if ( ( this.update_flag & 8 ) != 0 ) {
				this.overlays.Add( "can-o1" );
			} else if ( ( this.update_flag & 16 ) != 0 ) {
				this.overlays.Add( "can-o2" );
			} else if ( ( this.update_flag & 32 ) != 0 ) {
				this.overlays.Add( "can-o3" );
			}
			return null;
		}

		// Function from file: canister.dm
		public double return_pressure(  ) {
			GasMixture GM = null;

			GM = this.return_air();

			if ( GM != null && GM.volume > 0 ) {
				return GM.return_pressure();
			}
			return 0;
		}

		// Function from file: canister.dm
		public dynamic return_temperature(  ) {
			GasMixture GM = null;

			GM = this.return_air();

			if ( GM != null && GM.volume > 0 ) {
				return GM.temperature;
			}
			return 0;
		}

		// Function from file: canister.dm
		public bool healthcheck(  ) {
			Ent_Static location = null;

			
			if ( this.destroyed ) {
				return true;
			}

			if ( this.health <= 10 ) {
				location = this.loc;
				location.assume_air( this.air_contents );
				this.air_update_turf();
				this.destroyed = true;
				GlobalFuncs.playsound( this.loc, "sound/effects/spray.ogg", 10, 1, -3 );
				this.density = false;
				this.update_icon();
				this.investigate_log( "was destroyed by heat/gunfire.", "atmos" );

				if ( Lang13.Bool( this.holding ) ) {
					this.holding.loc = this.loc;
					this.holding = null;
				}
				return true;
			} else {
				return true;
			}
		}

		// Function from file: canister.dm
		public bool check_change(  ) {
			int old_flag = 0;
			double tank_pressure = 0;

			old_flag = this.update_flag;
			this.update_flag = 0;

			if ( Lang13.Bool( this.holding ) ) {
				this.update_flag |= 1;
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				this.update_flag |= 2;
			}
			tank_pressure = this.air_contents.return_pressure();

			if ( tank_pressure < 10 ) {
				this.update_flag |= 4;
			} else if ( tank_pressure < 101.32499694824219 ) {
				this.update_flag |= 8;
			} else if ( tank_pressure < 1519.875 ) {
				this.update_flag |= 16;
			} else {
				this.update_flag |= 32;
			}

			if ( this.update_flag == old_flag ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.WriteMsg( "<span class='warning'>An inhospitable area may be created as a result of destroying this object. Aborting.</span>" );
			return;
		}

	}

}