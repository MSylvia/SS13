// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Areaeditor : Obj_Item {

		public string fluffnotice = "Nobody's gonna read this stuff!";
		public bool AREA_ERRNONE = false;
		public bool AREA_STATION = true;
		public int AREA_SPACE = 2;
		public int AREA_SPECIAL = 3;
		public bool BORDER_ERROR = false;
		public bool BORDER_NONE = true;
		public int BORDER_BETWEEN = 2;
		public int BORDER_2NDTILE = 3;
		public int BORDER_SPACE = 4;
		public bool ROOM_ERR_LOLWAT = false;
		public int ROOM_ERR_SPACE = -1;
		public int ROOM_ERR_TOOLARGE = -2;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.attack_verb = new ByTable(new object [] { "attacked", "bapped", "hit" });
			this.icon_state = "blueprints";
		}

		public Obj_Item_Areaeditor ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: blueprints.dm
		public dynamic detect_room( dynamic first = null ) {
			ByTable found = null;
			ByTable pending = null;
			Ent_Static T = null;
			dynamic dir = null;
			bool skip = false;
			Obj_Structure_Window W = null;
			Obj_Machinery_Door_Window D = null;
			Tile NT = null;

			found = new ByTable();
			pending = new ByTable(new object [] { first });

			while (pending.len != 0) {
				
				if ( found.len + pending.len > 300 ) {
					return GlobalVars.ROOM_ERR_TOOLARGE;
				}
				T = pending[1];
				pending.Remove( T );

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.cardinal )) {
					dir = _d;
					
					skip = false;

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Structure_Window) )) {
						W = _a;
						

						if ( dir == W.dir || new ByTable(new object [] { GlobalVars.NORTHEAST, GlobalVars.SOUTHEAST, GlobalVars.NORTHWEST, GlobalVars.SOUTHWEST }).Contains( W.dir ) ) {
							skip = true;
							break;
						}
					}

					if ( skip ) {
						continue;
					}

					foreach (dynamic _b in Lang13.Enumerate( T, typeof(Obj_Machinery_Door_Window) )) {
						D = _b;
						

						if ( dir == D.dir ) {
							skip = true;
							break;
						}
					}

					if ( skip ) {
						continue;
					}
					NT = Map13.GetStep( T, Convert.ToInt32( dir ) );

					if ( !( NT is Tile ) || found.Contains( NT ) || pending.Contains( NT ) ) {
						continue;
					}

					switch ((int)( this.check_tile_is_border( NT, dir ) )) {
						case 1:
							pending.Add( NT );
							break;
						case 2:
							
							break;
						case 3:
							found.Add( NT );
							break;
						case 4:
							return GlobalVars.ROOM_ERR_SPACE;
							break;
					}
				}
				found.Add( T );
			}
			return found;
		}

		// Function from file: blueprints.dm
		public int check_tile_is_border( Tile T2 = null, dynamic dir = null ) {
			Obj_Structure_Window W = null;
			Obj_Machinery_Door_Window D = null;

			
			if ( T2 is Tile_Space ) {
				return GlobalVars.BORDER_SPACE;
			}

			if ( this.get_area_type( T2.loc ) != GlobalVars.AREA_SPACE ) {
				return GlobalVars.BORDER_BETWEEN;
			}

			if ( T2 is Tile_Simulated_Wall ) {
				return GlobalVars.BORDER_2NDTILE;
			}

			if ( !( T2 is Tile_Simulated ) ) {
				return GlobalVars.BORDER_BETWEEN;
			}

			foreach (dynamic _a in Lang13.Enumerate( T2, typeof(Obj_Structure_Window) )) {
				W = _a;
				

				if ( Num13.Rotate( dir, 180 ) == W.dir ) {
					return GlobalVars.BORDER_BETWEEN;
				}

				if ( new ByTable(new object [] { GlobalVars.NORTHEAST, GlobalVars.SOUTHEAST, GlobalVars.NORTHWEST, GlobalVars.SOUTHWEST }).Contains( W.dir ) ) {
					return GlobalVars.BORDER_2NDTILE;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( T2, typeof(Obj_Machinery_Door_Window) )) {
				D = _b;
				

				if ( Num13.Rotate( dir, 180 ) == D.dir ) {
					return GlobalVars.BORDER_BETWEEN;
				}
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Door), T2 ) ) ) {
				return GlobalVars.BORDER_2NDTILE;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Falsewall), T2 ) ) ) {
				return GlobalVars.BORDER_2NDTILE;
			}
			return GlobalVars.BORDER_NONE ?1:0;
		}

		// Function from file: blueprints.dm
		public void set_area_machinery_title( Ent_Static A = null, string title = null, string oldtitle = null ) {
			dynamic RA = null;
			Obj_Machinery_Alarm M = null;
			Obj_Machinery_Power_Apc M2 = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentScrubber M3 = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump M4 = null;
			Obj_Machinery_Door M5 = null;

			
			if ( !Lang13.Bool( oldtitle ) ) {
				return;
			}

			foreach (dynamic _f in Lang13.Enumerate( ((dynamic)A).related )) {
				RA = _f;
				

				foreach (dynamic _a in Lang13.Enumerate( RA, typeof(Obj_Machinery_Alarm) )) {
					M = _a;
					
					M.name = GlobalFuncs.replacetext( M.name, oldtitle, title );
				}

				foreach (dynamic _b in Lang13.Enumerate( RA, typeof(Obj_Machinery_Power_Apc) )) {
					M2 = _b;
					
					M2.name = GlobalFuncs.replacetext( M2.name, oldtitle, title );
				}

				foreach (dynamic _c in Lang13.Enumerate( RA, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentScrubber) )) {
					M3 = _c;
					
					M3.name = GlobalFuncs.replacetext( M3.name, oldtitle, title );
				}

				foreach (dynamic _d in Lang13.Enumerate( RA, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
					M4 = _d;
					
					M4.name = GlobalFuncs.replacetext( M4.name, oldtitle, title );
				}

				foreach (dynamic _e in Lang13.Enumerate( RA, typeof(Obj_Machinery_Door) )) {
					M5 = _e;
					
					M5.name = GlobalFuncs.replacetext( M5.name, oldtitle, title );
				}
			}
			return;
		}

		// Function from file: blueprints.dm
		public virtual bool edit_area(  ) {
			Ent_Static A = null;
			string prevname = null;
			string str = null;
			dynamic RA = null;

			A = this.get_area();
			prevname = "" + A.name;
			str = GlobalFuncs.trim( GlobalFuncs.stripped_input( Task13.User, "New area name:", "Blueprint Editing", "", 26 ) );

			if ( !Lang13.Bool( str ) || !( Lang13.Length( str ) != 0 ) || str == prevname ) {
				return false;
			}

			if ( Lang13.Length( str ) > 50 ) {
				Task13.User.WriteMsg( "<span class='warning'>The given name is too long.  The area's name is unchanged.</span>" );
				return false;
			}
			this.set_area_machinery_title( A, str, prevname );

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)A).related )) {
				RA = _a;
				
				RA.name = str;
			}
			Task13.User.WriteMsg( "<span class='notice'>You rename the '" + prevname + "' to '" + str + "'.</span>" );
			this.interact();
			return true;
		}

		// Function from file: blueprints.dm
		public void move_turfs_to_area( dynamic turfs = null, Zone A = null ) {
			A.contents.Add( turfs );
			return;
		}

		// Function from file: blueprints.dm
		public virtual bool create_area(  ) {
			dynamic res = null;
			dynamic turfs = null;
			string str = null;
			Zone A = null;

			res = this.detect_room( GlobalFuncs.get_turf( Task13.User ) );

			if ( !( res is ByTable ) ) {
				
				dynamic _a = res; // Was a switch-case, sorry for the mess.
				if ( _a==-1 ) {
					Task13.User.WriteMsg( "<span class='warning'>The new area must be completely airtight.</span>" );
					return false;
				} else if ( _a==-2 ) {
					Task13.User.WriteMsg( "<span class='warning'>The new area is too large.</span>" );
					return false;
				} else {
					Task13.User.WriteMsg( "<span class='warning'>Error! Please notify administration.</span>" );
					return false;
				}
			}
			turfs = res;
			str = GlobalFuncs.trim( GlobalFuncs.stripped_input( Task13.User, "New area name:", "Blueprint Editing", "", 26 ) );

			if ( !Lang13.Bool( str ) || !( Lang13.Length( str ) != 0 ) ) {
				return false;
			}

			if ( Lang13.Length( str ) > 50 ) {
				Task13.User.WriteMsg( "<span class='warning'>The given name is too long.  The area remains undefined.</span>" );
				return false;
			}
			A = new Zone();
			A.name = str;
			A.power_equip = false;
			A.power_light = false;
			A.power_environ = false;
			A.always_unpowered = false;
			A.valid_territory = false;
			this.move_turfs_to_area( turfs, A );
			A.SetDynamicLighting();
			A.addSorted();
			this.interact();
			return true;
		}

		// Function from file: blueprints.dm
		public int get_area_type( Ent_Static A = null ) {
			A = A ?? this.get_area();

			ByTable SPECIALS = null;
			dynamic type = null;

			
			if ( A is Zone_Space ) {
				return GlobalVars.AREA_SPACE;
			}
			SPECIALS = new ByTable(new object [] { 
				typeof(Zone_Shuttle), 
				typeof(Zone_Admin), 
				typeof(Zone_Arrival), 
				typeof(Zone_Centcom), 
				typeof(Zone_Asteroid), 
				typeof(Zone_Tdome), 
				typeof(Zone_WizardStation), 
				typeof(Zone_Prison)
			 });

			foreach (dynamic _a in Lang13.Enumerate( SPECIALS )) {
				type = _a;
				

				if ( Lang13.Bool( type.IsInstanceOfType( A ) ) ) {
					return GlobalVars.AREA_SPECIAL;
				}
			}
			return GlobalVars.AREA_STATION ?1:0;
		}

		// Function from file: blueprints.dm
		public Ent_Static get_area(  ) {
			dynamic T = null;
			Ent_Static A = null;

			T = GlobalFuncs.get_turf( Task13.User );
			A = T.loc;
			A = ((dynamic)A).master;
			return A;
		}

		// Function from file: blueprints.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["create_area"] ) ) {
				
				if ( this.get_area_type() == GlobalVars.AREA_SPACE ) {
					this.create_area();
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: blueprints.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string text = null;

			this.add_fingerprint( user );
			text = "<BODY><HTML><head><title>" + this + "</title></head> <h2>" + GlobalFuncs.station_name() + " " + this.name + "</h2> <small>" + this.fluffnotice + "</small><hr>";

			switch ((int)( this.get_area_type() )) {
				case 2:
					text += new Txt( "<p>According to the " ).item( this.name ).str( ", you are now in <b>outer space</b>.  Hold your breath.</p> <p><a href='?src=" ).Ref( this ).str( ";create_area=1'>Mark this place as new area.</a></p>" ).ToString();
					break;
				case 3:
					text += "<p>This place is not noted on the " + this.name + ".</p>";
					break;
			}
			return text;
		}

	}

}