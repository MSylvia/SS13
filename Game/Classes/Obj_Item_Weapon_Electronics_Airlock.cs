// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Electronics_Airlock : Obj_Item_Weapon_Electronics {

		public dynamic accesses = new ByTable();
		public bool one_access = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 12 });
		}

		public Obj_Item_Weapon_Electronics_Airlock ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: airlock_electronics.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			double? access = null;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _a = action; // Was a switch-case, sorry for the mess.
			if ( _a=="clear" ) {
				this.accesses = new ByTable();
				this.one_access = false;
			} else if ( _a=="one_access" ) {
				this.one_access = !this.one_access;
			} else if ( _a=="set" ) {
				access = String13.ParseNumber( _params["access"] );

				if ( !Lang13.Bool( this.accesses.Contains( access ) ) ) {
					this.accesses += access;
				} else {
					this.accesses -= access;
				}
			}
			return true;
		}

		// Function from file: airlock_electronics.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			ByTable data = null;
			ByTable regions = null;
			double? i = null;
			ByTable region = null;
			ByTable accesses = null;
			dynamic j = null;
			ByTable access = null;

			data = new ByTable();
			regions = new ByTable();

			foreach (dynamic _b in Lang13.IterateRange( 1, 7 )) {
				i = _b;
				
				region = new ByTable();
				accesses = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_region_accesses( i ) )) {
					j = _a;
					
					access = new ByTable();
					access["name"] = GlobalFuncs.get_access_desc( j );
					access["id"] = j;
					access["req"] = this.accesses.Contains( j );
					accesses[++accesses.len] = access;
				}
				region["name"] = GlobalFuncs.get_region_accesses_name( i );
				region["accesses"] = accesses;
				regions[++regions.len] = region;
			}
			data["regions"] = regions;
			data["oneAccess"] = this.one_access;
			return data;
		}

		// Function from file: airlock_electronics.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.hands_state;

			GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "airlock_electronics", this.name, 975, 420, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: airlock_electronics.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.add_fingerprint( user );
			this.ui_interact( user );
			return null;
		}

		// Function from file: airlock_electronics.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return null;
			}
			this.interact( user );
			return null;
		}

	}

}