// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Disposal_Bin : Obj_Machinery_Disposal {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "disposal";
		}

		public Obj_Machinery_Disposal_Bin ( dynamic loc = null, Obj_Structure_Disposalconstruct make_from = null ) : base( (object)(loc), make_from ) {
			
		}

		// Function from file: disposal-unit.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static L = null;
			GasMixture env = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			this.flush_count++;

			if ( this.flush_count >= this.flush_every_ticks ) {
				
				if ( this.contents.len != 0 ) {
					
					if ( this.mode == 2 ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							GlobalFuncs.feedback_inc( "disposal_auto_flush", 1 );
							this.f_flush();
							return;
						}));
					}
				}
				this.flush_count = 0;
			}
			this.updateDialog();

			if ( Lang13.Bool( this.flush ) && this.air_contents.return_pressure() >= 5.066249847412109 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.f_flush();
					return;
				}));
			}

			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}
			this.f_use_power( 100 );

			if ( this.mode != 1 ) {
				return null;
			}
			this.f_use_power( 500 );
			L = this.loc;
			env = L.return_air();
			pressure_delta = 5.116912364959717 - this.air_contents.return_pressure();

			if ( Convert.ToDouble( env.temperature ) > 0 ) {
				transfer_moles = pressure_delta * this.air_contents.volume * 0.1 / Convert.ToDouble( env.temperature * 8.31 );
				removed = env.remove( transfer_moles );
				this.air_contents.merge( removed );
				this.air_update_turf();
			}

			if ( this.air_contents.return_pressure() >= 5.066249847412109 ) {
				this.mode = 2;
				this.update();
			}
			return null;
		}

		// Function from file: disposal-unit.dm
		public override void update(  ) {
			this.overlays.Cut();

			if ( ( this.stat & 1 ) != 0 ) {
				this.mode = 0;
				this.flush = 0;
				return;
			}

			if ( Lang13.Bool( this.flush ) ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/disposal.dmi", "dispover-handle" ) );
			}

			if ( ( this.stat & 2 ) != 0 || this.mode == -1 ) {
				return;
			}

			if ( this.contents.len > 0 ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/disposal.dmi", "dispover-full" ) );
			}

			if ( this.mode == 1 ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/disposal.dmi", "dispover-charge" ) );
			} else if ( this.mode == 2 ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/disposal.dmi", "dispover-ready" ) );
			}
			return;
		}

		// Function from file: disposal-unit.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			dynamic I = null;

			
			if ( mover is Obj_Item && mover.throwing ) {
				I = mover;

				if ( I is Obj_Item_Projectile ) {
					return false;
				}

				if ( Rand13.PercentChance( 75 ) ) {
					I.loc = this;
					this.visible_message( new Txt( "<span class='notice'>" ).the( I ).item().str( " lands in " ).the( this ).item().str( ".</span>" ).ToString() );
					this.update();
				} else {
					this.visible_message( new Txt( "<span class='notice'>" ).the( I ).item().str( " bounces off of " ).the( this ).item().str( "'s rim!</span>" ).ToString() );
				}
				return false;
			} else {
				return base.CanPass( (object)(mover), (object)(target), height, air_group );
			}
		}

		// Function from file: disposal-unit.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Task13.User.loc == this ) {
				Task13.User.WriteMsg( "<span class='warning'>You cannot reach the controls from inside!</span>" );
				return null;
			}

			if ( this.mode == -1 && !Lang13.Bool( href_list["eject"] ) ) {
				Task13.User.WriteMsg( new Txt( "<span class='danger'>" ).The( this ).item().str( "'s power is disabled.</span>" ).ToString() );
				return null;
			}
			base.Topic( href, href_list, (object)(hsrc) );
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["close"] ) ) {
				Task13.User.unset_machine();
				Interface13.Browse( Task13.User, null, "window=disposal" );
				return null;
			}

			if ( Lang13.Bool( href_list["pump"] ) ) {
				
				if ( Lang13.Bool( String13.ParseNumber( href_list["pump"] ) ) ) {
					this.mode = 1;
				} else {
					this.mode = 0;
				}
				this.update();
			}

			if ( Lang13.Bool( href_list["handle"] ) ) {
				this.flush = String13.ParseNumber( href_list["handle"] );
				this.update();
			}

			if ( Lang13.Bool( href_list["eject"] ) ) {
				this.eject();
			}
			return null;
		}

		// Function from file: disposal-unit.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			flag1 = flag1 ?? false;

			string dat = null;
			double per = 0;

			this.add_fingerprint( user );

			if ( ( this.stat & 1 ) != 0 ) {
				((Mob)user).unset_machine();
				return null;
			}
			dat = "<head><title>Waste Disposal Unit</title></head><body><TT><B>Waste Disposal Unit</B><HR>";

			if ( !( flag1 == true ) ) {
				
				if ( Lang13.Bool( this.flush ) ) {
					dat += new Txt( "Disposal handle: <A href='?src=" ).Ref( this ).str( ";handle=0'>Disengage</A> <B>Engaged</B>" ).ToString();
				} else {
					dat += new Txt( "Disposal handle: <B>Disengaged</B> <A href='?src=" ).Ref( this ).str( ";handle=1'>Engage</A>" ).ToString();
				}
				dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";eject=1'>Eject contents</A><HR>" ).ToString();
			}

			if ( Convert.ToDouble( this.mode ) <= 0 ) {
				dat += new Txt( "Pump: <B>Off</B> <A href='?src=" ).Ref( this ).str( ";pump=1'>On</A><BR>" ).ToString();
			} else if ( this.mode == 1 ) {
				dat += new Txt( "Pump: <A href='?src=" ).Ref( this ).str( ";pump=0'>Off</A> <B>On</B> (pressurizing)<BR>" ).ToString();
			} else {
				dat += new Txt( "Pump: <A href='?src=" ).Ref( this ).str( ";pump=0'>Off</A> <B>On</B> (idle)<BR>" ).ToString();
			}
			per = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.air_contents.return_pressure() * 100 / 5.066249847412109 )), 100 ) );
			dat += "Pressure: " + Num13.Round( per, 1 ) + "%<BR></body>";
			((Mob)user).set_machine( this );
			Interface13.Browse( user, dat, "window=disposal;size=360x170" );
			GlobalFuncs.onclose( user, "disposal" );
			return null;
		}

		// Function from file: disposal-unit.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic T = null;
			Obj_Item O = null;
			dynamic G = null;

			
			if ( !Lang13.Bool( base.attackby( (object)(A), (object)(user), _params, silent, replace_spent ) ) ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Storage_Bag_Trash ) {
				T = A;
				user.WriteMsg( "<span class='warning'>You empty the bag.</span>" );

				foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Obj_Item) )) {
					O = _a;
					
					((Obj_Item_Weapon_Storage)T).remove_from_storage( O, this );
				}
				T.update_icon();
				this.update();
				return null;
			}
			G = A;

			if ( G is Obj_Item_Weapon_Grab ) {
				
				if ( G.affecting is Mob ) {
					this.stuff_mob_in( G.affecting, user );
				}
				return null;
			}

			if ( !Lang13.Bool( user.drop_item() ) ) {
				return null;
			}
			A.loc = this;
			((Ent_Static)user).visible_message( new Txt().item( user.name ).str( " places " ).the( A ).item().str( " into " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You place " ).the( A ).item().str( " into " ).the( this ).item().str( ".</span>" ).ToString() );
			this.update();
			return null;
		}

		// Function from file: disposal-unit.dm
		[VerbInfo( name: "flush" )]
		public override void f_flush(  ) {
			base.f_flush();

			if ( this.mode == 2 ) {
				this.mode = 1;
			}
			this.update();
			return;
		}

	}

}