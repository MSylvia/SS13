// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent_AlienInfestation : RoundEvent {

		public int spawncount = 1;
		public bool successSpawn = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.announceWhen = 400;
		}

		// Function from file: alien_infestation.dm
		public void find_alien(  ) {
			GlobalFuncs.message_admins( "Event attempted to spawn an alien but no candidates were available. Will try again momentarily..." );
			Task13.Schedule( 50, (Task13.Closure)(() => {
				
				if ( this.get_alien( true ) ) {
					GlobalFuncs.message_admins( "Situation has been resolved" );
					return;
				}
				GlobalFuncs.message_admins( "Unfortunately, no candidates were available for becoming an alien. Shutting down." );
				return;
			}));
			this.kill(); return;
		}

		// Function from file: alien_infestation.dm
		public bool get_alien( bool? end_if_fail = null ) {
			end_if_fail = end_if_fail ?? false;

			ByTable vents = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump temp_vent = null;
			Pipeline temp_vent_parent = null;
			ByTable candidates = null;
			Ent_Static vent = null;
			dynamic C = null;
			Mob_Living_Carbon_Alien_Larva new_xeno = null;

			vents = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
				temp_vent = _a;
				

				if ( GlobalFuncs.qdeleted( temp_vent ) ) {
					continue;
				}

				if ( temp_vent.loc.z == 1 && !( temp_vent.welded == true ) ) {
					temp_vent_parent = temp_vent.parents[1];

					if ( temp_vent_parent.other_atmosmch.len > 20 ) {
						vents.Add( temp_vent );
					}
				}
			}

			if ( !( vents.len != 0 ) ) {
				GlobalFuncs.message_admins( "An event attempted to spawn an alien but no suitable vents were found. Shutting down." );
				this.kill(); return false;
			}
			candidates = GlobalFuncs.get_candidates( "xenomorph", GlobalVars.ALIEN_AFK_BRACKET, "alien candidate" );

			if ( !( candidates.len != 0 ) ) {
				
				if ( end_if_fail == true ) {
					return false;
				}
				this.find_alien(); return false;
			}

			while (this.spawncount > 0 && vents.len != 0 && candidates.len != 0) {
				vent = GlobalFuncs.pick_n_take( vents );
				C = GlobalFuncs.pick_n_take( candidates );
				new_xeno = new Mob_Living_Carbon_Alien_Larva( vent.loc );
				new_xeno.key = C.key;
				this.spawncount--;
				this.successSpawn = true;
				GlobalFuncs.message_admins( "" + new_xeno.key + " has been made into an alien by an event." );
				GlobalFuncs.log_game( "" + new_xeno.key + " was spawned as an alien by an event." );
			}

			if ( this.successSpawn ) {
				return true;
			}
			return false;
		}

		// Function from file: alien_infestation.dm
		public override bool start(  ) {
			this.get_alien();
			return false;
		}

		// Function from file: alien_infestation.dm
		public override void announce(  ) {
			
			if ( this.successSpawn ) {
				GlobalFuncs.priority_announce( "Unidentified lifesigns detected coming aboard " + GlobalFuncs.station_name() + ". Secure any exterior access, including ducting and ventilation.", "Lifesign Alert", "sound/AI/aliens.ogg" );
			}
			return;
		}

		// Function from file: alien_infestation.dm
		public override void kill(  ) {
			
			if ( !this.successSpawn && this.control != null ) {
				this.control.occurrences--;
			}
			base.kill(); return;
		}

		// Function from file: alien_infestation.dm
		public override void setup( int? loop = null ) {
			this.announceWhen = Rand13.Int( ((int)( this.announceWhen ??0 )), ((int)( ( this.announceWhen ??0) + 50 )) );
			this.spawncount = Rand13.Int( 1, 2 );
			return;
		}

	}

}