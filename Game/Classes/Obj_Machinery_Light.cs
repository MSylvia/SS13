// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Light : Obj_Machinery {

		public string base_state = "tube";
		public bool on = false;
		public bool on_gs = false;
		public dynamic static_power_used = 0;
		public dynamic brightness = 8;
		public int status = 0;
		public bool flickering = false;
		public Type light_type = typeof(Obj_Item_Weapon_Light_Tube);
		public string fitting = "tube";
		public int switchcount = 0;
		public bool rigged = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.use_power = 2;
			this.idle_power_usage = 2;
			this.active_power_usage = 20;
			this.power_channel = 2;
			this.icon = "icons/obj/lighting.dmi";
			this.icon_state = "tube1";
			this.layer = 5;
		}

		// Function from file: lighting.dm
		public Obj_Machinery_Light ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 2, (Task13.Closure)(() => {
				
				switch ((string)( this.fitting )) {
					case "tube":
						this.brightness = 8;

						if ( Rand13.PercentChance( 2 ) ) {
							this.broken( true );
						}
						break;
					case "bulb":
						this.brightness = 4;

						if ( Rand13.PercentChance( 5 ) ) {
							this.broken( true );
						}
						break;
				}
				Task13.Schedule( 1, (Task13.Closure)(() => {
					this.update( false );
					return;
				}));
				return;
			}));
			return;
		}

		// Function from file: lighting.dm
		public override dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			
			if ( Rand13.PercentChance( Num13.MaxInt( 0, Convert.ToInt32( exposed_temperature - 673 ) ) ) ) {
				this.broken();
			}
			return null;
		}

		// Function from file: lighting.dm
		public override void power_change(  ) {
			dynamic A = null;

			A = GlobalFuncs.get_area( this );
			A = A.master;
			this.seton( A.lightswitch && A.power_light );
			return;
		}

		// Function from file: lighting.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			if ( !Lang13.Bool( this.gc_destroyed ) ) {
				
				switch ((double?)( severity )) {
					case 2:
						
						if ( Rand13.PercentChance( 50 ) ) {
							this.broken();
						}
						break;
					case 3:
						
						if ( Rand13.PercentChance( 25 ) ) {
							this.broken();
						}
						break;
				}
			}
			return false;
		}

		// Function from file: lighting.dm
		public override void attack_tk( Mob_Living_Carbon_Human user = null ) {
			dynamic L = null;

			
			if ( this.status == 1 ) {
				user.WriteMsg( "There is no " + this.fitting + " in this light." );
				return;
			}
			user.WriteMsg( "<span class='notice'>You telekinetically remove the light " + this.fitting + ".</span>" );
			L = Lang13.Call( this.light_type );
			L.status = this.status;
			L.rigged = this.rigged;
			L.brightness = this.brightness;
			L.switchcount = this.switchcount;
			this.switchcount = 0;
			L.update();
			((Ent_Static)L).add_fingerprint( user );
			L.loc = this.loc;
			this.status = 1;
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			bool prot = false;
			dynamic H = null;
			Obj_Item G = null;
			Obj_Item_Organ_Limb affecting = null;
			dynamic L = null;

			((Mob)a).changeNext_move( 8 );
			this.add_fingerprint( a );

			if ( this.status == 1 ) {
				a.WriteMsg( "There is no " + this.fitting + " in this light." );
				return null;
			}

			if ( this.on ) {
				prot = false;
				H = a;

				if ( H is Mob_Living_Carbon_Human ) {
					
					if ( Lang13.Bool( H.gloves ) ) {
						G = H.gloves;

						if ( Lang13.Bool( G.max_heat_protection_temperature ) ) {
							prot = ( G.max_heat_protection_temperature ??0) > 360;
						}
					}
				} else {
					prot = true;
				}

				if ( ( prot ?1:0) > 0 ) {
					a.WriteMsg( "<span class='notice'>You remove the light " + this.fitting + ".</span>" );
				} else if ( a is Mob_Living_Carbon_Human && ((Dna)a.dna).check_mutation( "Telekinesis" ) != 0 ) {
					a.WriteMsg( "<span class='notice'>You telekinetically remove the light " + this.fitting + ".</span>" );
				} else {
					a.WriteMsg( "<span class='warning'>You try to remove the light " + this.fitting + ", but you burn your hand on it!</span>" );
					affecting = ((Mob_Living_Carbon_Human)H).get_organ( "" + ( a.hand ? "l" : "r" ) + "_arm" );

					if ( affecting.take_damage( 0, 5 ) ) {
						((Mob_Living)H).update_damage_overlays(  );
					}
					((Mob_Living)H).updatehealth();
					return null;
				}
			} else {
				a.WriteMsg( "<span class='notice'>You remove the light " + this.fitting + ".</span>" );
			}
			L = Lang13.Call( this.light_type );
			L.status = this.status;
			L.rigged = this.rigged;
			L.brightness = this.brightness;
			L.switchcount = this.switchcount;
			this.switchcount = 0;
			L.update();
			((Ent_Static)L).add_fingerprint( a );
			L.loc = this.loc;
			((Mob)a).put_in_active_hand( L );
			this.status = 1;
			this.update();
			return null;
		}

		// Function from file: lighting.dm
		public override bool attack_animal( Mob_Living user = null ) {
			
			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				return false;
			}

			if ( this.status == 1 || this.status == 2 ) {
				user.WriteMsg( "<span class='danger'>That object is useless to you.</span>" );
				return false;
			} else if ( this.status == 0 || this.status == 3 ) {
				user.do_attack_animation( this );
				this.visible_message( "<span class='danger'>" + user.name + " smashed the light!</span>", "<span class='italics'>You hear a tinkle of breaking glass.</span>" );
				this.broken();
			}
			return false;
		}

		// Function from file: lighting.dm
		public override bool attack_alien( dynamic user = null ) {
			
			if ( this.status == 1 || this.status == 2 ) {
				user.WriteMsg( "Ã¿ That object is useless to you." );
				return false;
			} else if ( this.status == 0 || this.status == 3 ) {
				((Ent_Dynamic)user).do_attack_animation( this );
				this.visible_message( "<span class='danger'>" + user.name + " smashed the light!</span>", "<span class='italics'>You hear a tinkle of breaking glass.</span>" );
				this.broken();
			}
			return false;
		}

		// Function from file: lighting.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.flicker( 1 );
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic LR = null;
			dynamic U = null;
			dynamic L = null;
			Obj_Machinery_LightConstruct newlight = null;
			EffectSystem_SparkSpread s = null;

			
			if ( A is Obj_Item_Device_Lightreplacer ) {
				LR = A;

				if ( user is Mob_Living ) {
					U = user;
					((Obj_Item_Device_Lightreplacer)LR).ReplaceLight( this, U );
					return null;
				}
			}

			if ( A is Obj_Item_Weapon_Light ) {
				
				if ( this.status != 1 ) {
					user.WriteMsg( "<span class='warning'>There is a " + this.fitting + " already inserted!</span>" );
					return null;
				} else {
					this.add_fingerprint( user );
					L = A;

					if ( Lang13.Bool( ((dynamic)this.light_type).IsInstanceOfType( L ) ) ) {
						
						if ( !Lang13.Bool( user.drop_item() ) ) {
							return null;
						}
						this.status = Convert.ToInt32( L.status );
						user.WriteMsg( "<span class='notice'>You insert the " + L.name + ".</span>" );
						this.switchcount = Convert.ToInt32( L.switchcount );
						this.rigged = Lang13.Bool( L.rigged );
						this.brightness = L.brightness;
						this.on = this.has_power();
						this.update();
						GlobalFuncs.qdel( L );

						if ( this.on && this.rigged ) {
							this.explode();
						}
					} else {
						user.WriteMsg( "<span class='warning'>This type of light requires a " + this.fitting + "!</span>" );
						return null;
					}
				}
			} else if ( this.status != 2 && this.status != 1 ) {
				((Mob)user).changeNext_move( 8 );
				((Ent_Dynamic)user).do_attack_animation( this );

				if ( A.damtype == "stamina" ) {
					return null;
				}

				if ( Rand13.PercentChance( Convert.ToInt32( A.force * 5 + 1 ) ) ) {
					((Ent_Static)user).visible_message( "<span class='danger'>" + user.name + " smashed the light!</span>", "<span class='danger'>You hit the light, and it smashes!</span>", "<span class='italics'>You hear a tinkle of breaking glass.</span>" );

					if ( this.on && Lang13.Bool( A.flags & 64 ) ) {
						
						if ( Rand13.PercentChance( 12 ) ) {
							GlobalFuncs.electrocute_mob( user, GlobalFuncs.get_area( this ), this, 0.3 );
						}
					}
					this.broken();
				} else {
					((Ent_Static)user).visible_message( "<span class='danger'>" + user.name + " hits the light!</span>" );
				}
			} else if ( this.status == 1 ) {
				
				if ( A is Obj_Item_Weapon_Screwdriver ) {
					GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 75, 1 );
					((Ent_Static)user).visible_message( "" + user.name + " opens " + this + "'s casing.", "<span class='notice'>You open " + this + "'s casing.</span>", "<span class='italics'>You hear a noise.</span>" );
					newlight = null;

					switch ((string)( this.fitting )) {
						case "tube":
							newlight = new Obj_Machinery_LightConstruct( this.loc );
							newlight.icon_state = "tube-construct-stage2";
							break;
						case "bulb":
							newlight = new Obj_Machinery_LightConstruct_Small( this.loc );
							newlight.icon_state = "bulb-construct-stage2";
							break;
					}
					newlight.dir = this.dir;
					newlight.stage = 2;
					this.transfer_fingerprints_to( newlight );
					GlobalFuncs.qdel( this );
					return null;
				}
				user.WriteMsg( new Txt( "<span class='userdanger'>You stick " ).the( A ).item().str( " into the light socket!</span>" ).ToString() );

				if ( this.has_power() && Lang13.Bool( A.flags & 64 ) ) {
					s = new EffectSystem_SparkSpread();
					s.set_up( 3, 1, this );
					s.start();

					if ( Rand13.PercentChance( 75 ) ) {
						GlobalFuncs.electrocute_mob( user, GlobalFuncs.get_area( this ), this, Rand13.Int( ((int)( 061 )), 1 ) );
					}
				}
			}
			return null;
		}

		// Function from file: lighting.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			switch ((int)( this.status )) {
				case 0:
					user.WriteMsg( "It is turned " + ( this.on ? "on" : "off" ) + "." );
					break;
				case 1:
					user.WriteMsg( "The " + this.fitting + " has been removed." );
					break;
				case 3:
					user.WriteMsg( "The " + this.fitting + " is burnt out." );
					break;
				case 2:
					user.WriteMsg( "The " + this.fitting + " has been smashed." );
					break;
			}
			return 0;
		}

		// Function from file: lighting.dm
		public void explode(  ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( this.loc );
			this.broken();
			Task13.Sleep( 2 );
			GlobalFuncs.explosion( T, 0, 0, 2, 2 );
			Task13.Sleep( 1 );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: lighting.dm
		public void fix(  ) {
			
			if ( this.status == 0 ) {
				return;
			}
			this.status = 0;
			this.brightness = Lang13.Initial( this, "brightness" );
			this.on = true;
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public void broken( bool? skip_sound_and_sparks = null ) {
			skip_sound_and_sparks = skip_sound_and_sparks ?? false;

			EffectSystem_SparkSpread s = null;

			
			if ( this.status == 1 ) {
				return;
			}

			if ( !( skip_sound_and_sparks == true ) ) {
				
				if ( this.status == 0 || this.status == 3 ) {
					GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 75, 1 );
				}

				if ( this.on ) {
					s = new EffectSystem_SparkSpread();
					s.set_up( 3, 1, this );
					s.start();
				}
			}
			this.status = 2;
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public void flicker( int? amount = null ) {
			amount = amount ?? Rand13.Int( 10, 20 );

			int? i = null;

			
			if ( this.flickering ) {
				return;
			}
			this.flickering = true;

			if ( this.on && this.status == 0 ) {
				i = null;
				i = 0;

				while (( i ??0) < ( amount ??0)) {
					
					if ( this.status != 0 ) {
						break;
					}
					this.on = !this.on;
					this.update( false );
					Task13.Sleep( Rand13.Int( 5, 15 ) );
					i++;
				}
				this.on = this.status == 0;
				this.update( false );
			}
			this.flickering = false;
			return;
		}

		// Function from file: lighting.dm
		public bool has_power(  ) {
			Ent_Static A = null;

			A = this.loc.loc;
			return ((dynamic)A).master.lightswitch && ((dynamic)A).master.power_light;
		}

		// Function from file: lighting.dm
		public void seton( bool s = false ) {
			this.on = s && this.status == 0;
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public void update( bool? trigger = null ) {
			trigger = trigger ?? true;

			this.update_icon();

			if ( this.on ) {
				
				if ( !( this.light != null ) || this.light.luminosity != this.brightness ) {
					this.switchcount++;

					if ( this.rigged ) {
						
						if ( this.status == 0 && trigger == true ) {
							this.explode();
						}
					} else if ( Rand13.PercentChance( Num13.MinInt( 60, ((int)( this.switchcount * this.switchcount * 0.01 )) ) ) ) {
						
						if ( this.status == 0 && trigger == true ) {
							this.status = 3;
							this.icon_state = "" + this.base_state + "-burned";
							this.on = false;
							this.SetLuminosity( 0 );
						}
					} else {
						this.use_power = 2;
						this.SetLuminosity( this.brightness );
					}
				}
			} else {
				this.use_power = 1;
				this.SetLuminosity( 0 );
			}
			this.active_power_usage = this.brightness * 10;

			if ( this.on != this.on_gs ) {
				this.on_gs = this.on;

				if ( this.on ) {
					this.static_power_used = this.brightness * 20;
					this.addStaticPower( this.static_power_used, 6 );
				} else {
					this.removeStaticPower( this.static_power_used, 6 );
				}
			}
			return;
		}

		// Function from file: lighting.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			switch ((int)( this.status )) {
				case 0:
					this.icon_state = "" + this.base_state + this.on;
					break;
				case 1:
					this.icon_state = "" + this.base_state + "-empty";
					this.on = false;
					break;
				case 3:
					this.icon_state = "" + this.base_state + "-burned";
					this.on = false;
					break;
				case 2:
					this.icon_state = "" + this.base_state + "-broken";
					this.on = false;
					break;
			}
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic Destroy(  ) {
			dynamic A = null;

			A = GlobalFuncs.get_area( this );

			if ( Lang13.Bool( A ) ) {
				this.on = false;
			}
			return base.Destroy();
		}

		// Function from file: lighting.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			
			if ( this.status != 2 ) {
				this.broken( true );
			}
			return base.Move( (object)(NewLoc), Dir, step_x, step_y );
		}

		// Function from file: lighting_system.dm
		public override int get_light_range( int radius = 0 ) {
			return Num13.MinInt( radius, 8 );
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.DisIntegrate( this );
			return;
		}

	}

}