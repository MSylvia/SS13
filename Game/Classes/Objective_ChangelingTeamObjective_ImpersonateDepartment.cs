// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Objective_ChangelingTeamObjective_ImpersonateDepartment : Objective_ChangelingTeamObjective {

		public bool command_staff_only = false;
		public ByTable department_minds = new ByTable();
		public ByTable department_real_names = new ByTable();
		public string department_string = "";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.explanation_text = "Ensure X derpartment are killed, impersonated, and replaced by Changelings";
		}

		// Function from file: objective.dm
		public Objective_ChangelingTeamObjective_ImpersonateDepartment ( string text = null ) : base( text ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.command_staff_only ) {
				this.get_heads();
			} else {
				this.get_department_staff();
			}
			this.update_explanation_text();
			return;
		}

		// Function from file: objective.dm
		public override int check_completion(  ) {
			ByTable check_names = null;
			Mind M = null;
			dynamic mloc = null;
			int success = 0;
			Mind changeling = null;
			dynamic H = null;
			dynamic cloc = null;
			dynamic name = null;

			
			if ( !( this.department_real_names.len != 0 ) || !( this.department_minds.len != 0 ) ) {
				return 1;
			}
			check_names = this.department_real_names.Copy();

			foreach (dynamic _a in Lang13.Enumerate( this.department_minds, typeof(Mind) )) {
				M = _a;
				

				if ( GlobalVars.ticker.mode.changelings.Contains( M ) ) {
					continue;
				}

				if ( Lang13.Bool( M.current ) ) {
					mloc = GlobalFuncs.get_turf( M.current );

					if ( ((Ent_Static)mloc).onCentcom() && Convert.ToInt32( M.current.stat ) != 2 ) {
						return 0;
					}
				}
			}
			success = 0;

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.ticker.mode.changelings, typeof(Mind) )) {
				changeling = _c;
				

				if ( success >= this.department_minds.len ) {
					return 1;
				}

				if ( changeling.current is Mob_Living_Carbon_Human ) {
					H = changeling.current;
					cloc = GlobalFuncs.get_turf( changeling.current );

					if ( Lang13.Bool( cloc ) && ((Ent_Static)cloc).onCentcom() && Convert.ToInt32( changeling.current.stat ) != 2 ) {
						string _loop_ctrl_1 = null;

						foreach (dynamic _b in Lang13.Enumerate( check_names )) {
							name = _b;
							

							if ( H.dna.real_name == name ) {
								check_names.Remove( name );
								success++;
								_loop_ctrl_1 = "continue";
								break;
							}
						}

						if ( _loop_ctrl_1 == "break" ) {
							break;
						} else if ( _loop_ctrl_1 == "continue" ) {
							continue;
						}
					}
				}
			}

			if ( success >= this.department_minds.len ) {
				return 1;
			}
			return 0;
		}

		// Function from file: objective.dm
		public override void update_explanation_text(  ) {
			int first = 0;
			Mind M = null;
			string _string = null;

			base.update_explanation_text();

			if ( !( this.department_real_names.len != 0 ) || !( this.department_minds.len != 0 ) ) {
				this.explanation_text = "Free Objective";
				return;
			}

			if ( this.command_staff_only ) {
				this.explanation_text = "Ensure changelings impersonate and escape as the following heads of staff: ";
			} else {
				this.explanation_text = new Txt( "Ensure changelings impersonate and escape as the following members of " ).the( this.department_string ).item().str( " department: " ).ToString();
			}
			first = 1;

			foreach (dynamic _a in Lang13.Enumerate( this.department_minds, typeof(Mind) )) {
				M = _a;
				
				_string = "" + M.name + " the " + M.assigned_role;

				if ( !( first != 0 ) ) {
					_string = ", " + M.name + " the " + M.assigned_role;
				} else {
					first--;
				}
				this.explanation_text += _string;
			}

			if ( this.command_staff_only ) {
				this.explanation_text += ", while the real heads are dead. This is a team objective.";
			} else {
				this.explanation_text += ", while the real members are dead. This is a team objective.";
			}
			return;
		}

		// Function from file: objective.dm
		public void get_heads(  ) {
			int needed_heads = 0;
			ByTable heads = null;
			Mind head = null;

			this.department_minds = new ByTable();
			this.department_real_names = new ByTable();
			needed_heads = Rand13.Int( this.min_lings, GlobalVars.command_positions.len );
			needed_heads = Num13.MinInt( GlobalVars.ticker.mode.changelings.len, needed_heads );
			heads = ((GameMode)GlobalVars.ticker.mode).get_living_heads();

			foreach (dynamic _a in Lang13.Enumerate( heads, typeof(Mind) )) {
				head = _a;
				

				if ( GlobalVars.ticker.mode.changelings.Contains( head ) ) {
					continue;
				}

				if ( needed_heads != 0 ) {
					this.department_minds.Add( head );
					this.department_real_names.Add( head.current.real_name );
					needed_heads--;
				} else {
					break;
				}
			}

			if ( !( this.department_minds.len != 0 ) ) {
				GlobalFuncs.log_game( "" + this.type + " has failed to find department heads, and has removed itself. the round will continue normally" );
				this.owner.objectives.Remove( this );
				GlobalFuncs.qdel( this );
				return;
			}
			return;
		}

		// Function from file: objective.dm
		public void get_department_staff(  ) {
			ByTable departments = null;
			dynamic department_head = null;
			dynamic ling_count = null;
			Mind M = null;

			this.department_minds = new ByTable();
			this.department_real_names = new ByTable();
			departments = new ByTable(new object [] { "Head of Security", "Research Director", "Chief Engineer", "Chief Medical Officer" });
			department_head = Rand13.PickFromTable( departments );

			dynamic _a = department_head; // Was a switch-case, sorry for the mess.
			if ( _a=="Head of Security" ) {
				this.department_string = "security";
			} else if ( _a=="Research Director" ) {
				this.department_string = "science";
			} else if ( _a=="Chief Engineer" ) {
				this.department_string = "engineering";
			} else if ( _a=="Chief Medical Officer" ) {
				this.department_string = "medical";
			}
			ling_count = GlobalVars.ticker.mode.changelings;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
				M = _b;
				

				if ( GlobalVars.ticker.mode.changelings.Contains( M ) ) {
					continue;
				}

				if ( GlobalFuncs.get_department_heads( M.assigned_role ).Contains( department_head ) ) {
					
					if ( Lang13.Bool( ling_count ) ) {
						ling_count--;
						this.department_minds.Add( M );
						this.department_real_names.Add( M.current.real_name );
					} else {
						break;
					}
				}
			}

			if ( !( this.department_minds.len != 0 ) ) {
				GlobalFuncs.log_game( "" + this.type + " has failed to find department staff, and has removed itself. the round will continue normally" );
				this.owner.objectives.Remove( this );
				GlobalFuncs.qdel( this );
				return;
			}
			return;
		}

	}

}