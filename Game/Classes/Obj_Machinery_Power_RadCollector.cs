// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_RadCollector : Obj_Machinery_Power {

		public dynamic P = null;
		public double last_power = 0;
		public bool active = false;
		public bool locked = false;
		public bool drainratio = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 11 });
			this.icon = "icons/obj/singularity.dmi";
			this.icon_state = "ca";
		}

		// Function from file: collector.dm
		public Obj_Machinery_Power_RadCollector ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.rad_collectors.Add( this );
			return;
		}

		// Function from file: collector.dm
		public void toggle_power(  ) {
			this.active = !this.active;

			if ( this.active ) {
				this.icon_state = "ca_on";
				Icon13.Flick( "ca_active", this );
			} else {
				this.icon_state = "ca";
				Icon13.Flick( "ca_deactive", this );
			}
			this.update_icons();
			return;
		}

		// Function from file: collector.dm
		public void update_icons(  ) {
			this.overlays.Cut();

			if ( Lang13.Bool( this.P ) ) {
				this.overlays.Add( new Image( "icons/obj/singularity.dmi", "ptank" ) );
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			if ( this.active ) {
				this.overlays.Add( new Image( "icons/obj/singularity.dmi", "on" ) );
			}
			return;
		}

		// Function from file: collector.dm
		public void receive_pulse( double? pulse_strength = null ) {
			double power_produced = 0;

			
			if ( Lang13.Bool( this.P ) && this.active ) {
				power_produced = 0;
				power_produced = Convert.ToDouble( this.P.air_contents.toxins * pulse_strength * 20 );
				this.add_avail( power_produced );
				this.last_power = power_produced;
				return;
			}
			return;
		}

		// Function from file: collector.dm
		public void eject(  ) {
			dynamic Z = null;

			this.locked = false;
			Z = this.P;

			if ( !Lang13.Bool( Z ) ) {
				return;
			}
			Z.loc = GlobalFuncs.get_turf( this );
			Z.layer = Lang13.Initial( Z, "layer" );
			this.P = null;

			if ( this.active ) {
				this.toggle_power();
			} else {
				this.update_icons();
			}
			return;
		}

		// Function from file: collector.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((double?)( severity )) {
				case 2:
				case 3:
					this.eject();
					break;
			}
			return base.ex_act( severity, (object)(target) );
		}

		// Function from file: collector.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Device_Multitool ) {
				user.WriteMsg( "<span class='notice'>The " + A.name + " detects that " + this.last_power + "W were recently produced.</span>" );
				return 1;
			} else if ( A is Obj_Item_Device_Analyzer && Lang13.Bool( this.P ) ) {
				this.atmosanalyzer_scan( this.P.air_contents, user );
			} else if ( A is Obj_Item_Weapon_Tank_Internals_Plasma ) {
				
				if ( !Lang13.Bool( this.anchored ) ) {
					user.WriteMsg( "<span class='warning'>The " + this + " needs to be secured to the floor first!</span>" );
					return 1;
				}

				if ( Lang13.Bool( this.P ) ) {
					user.WriteMsg( "<span class='warning'>There's already a plasma tank loaded!</span>" );
					return 1;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return 1;
				}
				this.P = A;
				A.loc = this;
				this.update_icons();
			} else if ( A is Obj_Item_Weapon_Crowbar ) {
				
				if ( Lang13.Bool( this.P ) && !this.locked ) {
					this.eject();
					return 1;
				}
			} else if ( A is Obj_Item_Weapon_Wrench ) {
				
				if ( Lang13.Bool( this.P ) ) {
					user.WriteMsg( "<span class='warning'>Remove the plasma tank first!</span>" );
					return 1;
				}

				if ( !Lang13.Bool( this.anchored ) && !this.isinspace() ) {
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
					this.anchored = 1;
					((Ent_Static)user).visible_message( "" + user.name + " secures the " + this.name + ".", "<span class='notice'>You secure the external bolts.</span>", "<span class='italics'>You hear a ratchet.</span>" );
					this.connect_to_network();
				} else if ( Lang13.Bool( this.anchored ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
					this.anchored = 0;
					((Ent_Static)user).visible_message( "" + user.name + " unsecures the " + this.name + ".", "<span class='notice'>You unsecure the external bolts.</span>", "<span class='italics'>You hear a ratchet.</span>" );
					this.disconnect_from_network();
				}
			} else if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
				
				if ( this.allowed( user ) ) {
					
					if ( this.active ) {
						this.locked = !this.locked;
						user.WriteMsg( "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the controls.</span>" );
					} else {
						this.locked = false;
						user.WriteMsg( new Txt( "<span class='warning'>The controls can only be locked when " ).the( this ).item().str( " is active!</span>" ).ToString() );
					}
				} else {
					user.WriteMsg( "<span class='danger'>Access denied.</span>" );
					return 1;
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
				return 1;
			}
			return null;
		}

		// Function from file: collector.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				
				if ( !this.locked ) {
					this.toggle_power();
					((Ent_Static)a).visible_message( "" + a.name + " turns the " + this.name + " " + ( this.active ? "on" : "off" ) + ".", "<span class='notice'>You turn the " + this.name + " " + ( this.active ? "on" : "off" ) + ".</span>" );
					this.investigate_log( "turned " + ( this.active ? "<font color='green'>on</font>" : "<font color='red'>off</font>" ) + " by " + a.key + ". " + ( Lang13.Bool( this.P ) ? "Fuel: " + Num13.Floor( Convert.ToDouble( this.P.air_contents.toxins / 0.81 ) ) + "%" : "<font color='red'>It is empty</font>" ) + ".", "singulo" );
					return null;
				} else {
					a.WriteMsg( "<span class='warning'>The controls are locked!</span>" );
					return null;
				}
			}
			return null;
		}

		// Function from file: collector.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( Lang13.Bool( this.P ) ) {
				
				if ( Convert.ToDouble( this.P.air_contents.toxins ) <= 0 ) {
					this.investigate_log( "<font color='red'>out of fuel</font>.", "singulo" );
					this.P.air_contents.toxins = 0;
					this.eject();
				} else {
					this.P.air_contents.toxins -= ( this.drainratio ?1:0) * 0.001;
				}
			}
			return null;
		}

		// Function from file: collector.dm
		public override dynamic Destroy(  ) {
			GlobalVars.rad_collectors.Remove( this );
			return base.Destroy();
		}

	}

}