// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Floor_Light : Tile_Simulated_Floor {

		public bool on = true;
		public bool state = false;
		public ByTable coloredlights = new ByTable(new object [] { "g", "r", "y", "b", "p", "w", "s", "o", "g" });
		public int currentcolor = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 5;
			this.floor_tile = typeof(Obj_Item_Stack_Tile_Light);
			this.broken_states = new ByTable(new object [] { "light_broken" });
			this.icon_state = "light_on";
		}

		// Function from file: light_floor.dm
		public Tile_Simulated_Floor_Light ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic L = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				if ( this.builtin_tile is Obj_Item_Stack_Tile_Light ) {
					L = this.builtin_tile;
					L.state = this.state;
				}
				return;
			}));
			this.update_icon();
			return;
		}

		// Function from file: light_floor.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(A), (object)(user), _params, silent, replace_spent ) ) ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Light_Bulb ) {
				
				if ( this.state && ((Mob)user).drop_item() ) {
					GlobalFuncs.qdel( A );
					this.state = false;
					this.update_icon();
					user.WriteMsg( "<span class='notice'>You replace the light bulb.</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>The lightbulb seems fine, no need to replace it.</span>" );
				}
			}
			return null;
		}

		// Function from file: light_floor.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.attack_hand( user );
			return null;
		}

		// Function from file: light_floor.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !this.on ) {
				this.on = true;
				this.currentcolor = 1;
				return null;
			} else {
				this.currentcolor++;
			}

			if ( this.currentcolor > this.coloredlights.len ) {
				this.on = false;
			}
			this.update_icon();
			base.attack_hand( (object)(a), b, c );
			return null;
		}

		// Function from file: light_floor.dm
		public override dynamic ChangeTurf( dynamic path = null ) {
			this.SetLuminosity( 0 );
			base.ChangeTurf( (object)(path) );
			return null;
		}

		// Function from file: light_floor.dm
		public override bool update_icon(  ) {
			dynamic num = null;

			base.update_icon();

			if ( this.on ) {
				
				switch ((bool)( this.state )) {
					case 0:
						this.icon_state = "light_on-" + this.coloredlights[this.currentcolor];
						this.SetLuminosity( 1 );
						break;
					case 1:
						num = Rand13.Pick(new object [] { "1", "2", "3", "4" });
						this.icon_state = "light_on_flicker" + num;
						this.SetLuminosity( 1 );
						break;
					case 2:
						this.icon_state = "light_on_broken";
						this.SetLuminosity( 1 );
						break;
					case 3:
						this.icon_state = "light_off";
						this.SetLuminosity( 0 );
						break;
				}
			} else {
				this.SetLuminosity( 0 );
				this.icon_state = "light_off";
			}
			return false;
		}

	}

}