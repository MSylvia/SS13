// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class JsonHelper : Game_Data {

		public int? readPos = null;
		public int? jsonLen = null;
		public string json = null;
		public int curAscii = 0;
		public string curChar = null;
		public dynamic whitespace = null;

		// Function from file: json.dm
		public ByTable ParseArray(  ) {
			ByTable array = null;

			
			if ( !( this.curChar == "[" ) ) {
				Task13.Crash( "" + "code/modules/json/json.dm" + ":" + 258 + ":Assertion Failed: " + "curChar == \"\\[\"" );
			}
			array = new ByTable();

			if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
				this.curAscii = 0;
				this.curChar = "";
			} else {
				this.curAscii = String13.GetCharCode( this.json, this.readPos );
				this.curChar = String13.GetCharFromCode( this.curAscii );
			}

			while (GlobalVars.whitespace.Contains( this.curAscii )) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
			}

			while (this.curChar != "]") {
				array.Add( new ByTable(new object [] { this.ParseValue() }) );

				if ( this.curChar == "," ) {
					
					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}

					while (GlobalVars.whitespace.Contains( this.curAscii )) {
						
						if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
							this.curAscii = 0;
							this.curChar = "";
						} else {
							this.curAscii = String13.GetCharCode( this.json, this.readPos );
							this.curChar = String13.GetCharFromCode( this.curAscii );
						}
					}
				} else {
					break;
				}
			}

			if ( this.curChar != "]" ) {
				throw new Exception( "Expected: ']'" );
			}

			if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
				this.curAscii = 0;
				this.curChar = "";
			} else {
				this.curAscii = String13.GetCharCode( this.json, this.readPos );
				this.curChar = String13.GetCharFromCode( this.curAscii );
			}

			while (GlobalVars.whitespace.Contains( this.curAscii )) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
			}
			return array;
		}

		// Function from file: json.dm
		public ByTable ParseObject(  ) {
			ByTable _object = null;
			string key = null;

			
			if ( !( this.curChar == "{" ) ) {
				Task13.Crash( "" + "code/modules/json/json.dm" + ":" + 239 + ":Assertion Failed: " + "curChar == \"{\"" );
			}
			_object = new ByTable();

			if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
				this.curAscii = 0;
				this.curChar = "";
			} else {
				this.curAscii = String13.GetCharCode( this.json, this.readPos );
				this.curChar = String13.GetCharFromCode( this.curAscii );
			}

			while (GlobalVars.whitespace.Contains( this.curAscii )) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
			}

			while (this.curChar == "\"") {
				key = this.ParseString();

				if ( this.curChar != ":" ) {
					throw new Exception( "Expected: ':'" );
				}

				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}

				while (GlobalVars.whitespace.Contains( this.curAscii )) {
					
					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}
				}
				_object[key] = this.ParseValue();

				if ( this.curChar == "," ) {
					
					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}

					while (GlobalVars.whitespace.Contains( this.curAscii )) {
						
						if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
							this.curAscii = 0;
							this.curChar = "";
						} else {
							this.curAscii = String13.GetCharCode( this.json, this.readPos );
							this.curChar = String13.GetCharFromCode( this.curAscii );
						}
					}
				} else {
					break;
				}
			}

			if ( this.curChar != "}" ) {
				throw new Exception( "Expected: string or '}'" );
			}

			if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
				this.curAscii = 0;
				this.curChar = "";
			} else {
				this.curAscii = String13.GetCharCode( this.json, this.readPos );
				this.curChar = String13.GetCharFromCode( this.curAscii );
			}

			while (GlobalVars.whitespace.Contains( this.curAscii )) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
			}
			return _object;
		}

		// Function from file: json.dm
		public double? ParseNumber(  ) {
			int? firstPos = null;
			bool? found = null;
			bool? found2 = null;

			firstPos = this.readPos;

			if ( this.curChar == "-" ) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
			}

			if ( this.curAscii >= 49 && this.curAscii <= 57 ) {
				
				do {
					
					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}
				} while ( this.curAscii >= 48 && this.curAscii <= 57 );
			} else if ( this.curAscii == 48 ) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
			} else {
				throw new Exception( "Expected: digit" );
			}

			if ( this.curChar == "." ) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
				found = GlobalVars.FALSE;

				while (this.curAscii >= 48 && this.curAscii <= 57) {
					found = GlobalVars.TRUE;

					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}
				}

				if ( !( found == true ) ) {
					throw new Exception( "Expected: digit" );
				}
			}

			if ( this.curChar == "E" || this.curChar == "e" ) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
				found2 = GlobalVars.FALSE;

				if ( this.curChar == "-" ) {
					
					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}
				} else if ( this.curChar == "+" ) {
					
					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}
				}

				while (this.curAscii >= 48 && this.curAscii <= 57) {
					found2 = GlobalVars.TRUE;

					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}
				}

				if ( !( found2 == true ) ) {
					throw new Exception( "Expected: digit" );
				}
			}

			while (GlobalVars.whitespace.Contains( this.curAscii )) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( this.json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
			}
			return String13.ParseNumber( String13.SubStr( this.json, firstPos ??0, this.readPos ??0 ) );
		}

		// Function from file: json.dm
		public string ParseString(  ) {
			ByTable chars = null;

			
			if ( !( this.curChar == "\"" ) ) {
				Task13.Crash( "" + "code/modules/json/json.dm" + ":" + 168 + ":Assertion Failed: " + "curChar == \"\\\"\"" );
			}

			if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
				this.curAscii = 0;
				this.curChar = "";
			} else {
				this.curAscii = String13.GetCharCode( this.json, this.readPos );
				this.curChar = String13.GetCharFromCode( this.curAscii );
			}
			chars = new ByTable();

			while (( this.readPos ??0) <= ( this.jsonLen ??0)) {
				
				if ( this.curChar == "\"" ) {
					
					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}

					while (GlobalVars.whitespace.Contains( this.curAscii )) {
						
						if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
							this.curAscii = 0;
							this.curChar = "";
						} else {
							this.curAscii = String13.GetCharCode( this.json, this.readPos );
							this.curChar = String13.GetCharFromCode( this.curAscii );
						}
					}
					return GlobalFuncs.list2text( chars );
				} else if ( this.curChar == "\\" ) {
					
					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}

					switch ((string)( this.curChar )) {
						case "\"":
						case "\\":
						case "/":
							chars.Add( String13.GetCharFromCode( this.curAscii ) );
							break;
						case "b":
							chars.Add( String13.GetCharFromCode( 8 ) );
							break;
						case "f":
							chars.Add( String13.GetCharFromCode( 12 ) );
							break;
						case "n":
							chars.Add( "\n" );
							break;
						case "r":
							chars.Add( String13.GetCharFromCode( 13 ) );
							break;
						case "t":
							chars.Add( "	" );
							break;
						case "u":
							throw new Exception( "JSON \\uXXXX escape sequence not supported" );
							break;
						default:
							throw new Exception( "Invalid escape sequence" );
							break;
					}

					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}
				} else {
					chars.Add( String13.GetCharFromCode( this.curAscii ) );

					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}
				}
			}
			throw new Exception( "Unterminated string" );
			return null;
		}

		// Function from file: json.dm
		public dynamic ParseValue(  ) {
			
			if ( this.curChar == "\"" ) {
				return this.ParseString();
			} else if ( this.curChar == "-" || this.curAscii >= 48 && this.curAscii <= 57 ) {
				return this.ParseNumber();
			} else if ( this.curChar == "{" ) {
				return this.ParseObject();
			} else if ( this.curChar == "[" ) {
				return this.ParseArray();
			} else if ( this.curChar == "t" ) {
				
				if ( String13.SubStr( this.json, this.readPos ??0, ( this.readPos ??0) + 4 ) == "true" ) {
					this.readPos += 3;

					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}

					while (GlobalVars.whitespace.Contains( this.curAscii )) {
						
						if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
							this.curAscii = 0;
							this.curChar = "";
						} else {
							this.curAscii = String13.GetCharCode( this.json, this.readPos );
							this.curChar = String13.GetCharFromCode( this.curAscii );
						}
					}
					return GlobalVars.TRUE;
				} else {
					throw new Exception( "Expected: 'true'" );
				}
			} else if ( this.curChar == "f" ) {
				
				if ( String13.SubStr( this.json, this.readPos ??0, ( this.readPos ??0) + 5 ) == "false" ) {
					this.readPos += 4;

					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}

					while (GlobalVars.whitespace.Contains( this.curAscii )) {
						
						if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
							this.curAscii = 0;
							this.curChar = "";
						} else {
							this.curAscii = String13.GetCharCode( this.json, this.readPos );
							this.curChar = String13.GetCharFromCode( this.curAscii );
						}
					}
					return GlobalVars.FALSE;
				} else {
					throw new Exception( "Expected: 'false'" );
				}
			} else if ( this.curChar == "n" ) {
				
				if ( String13.SubStr( this.json, this.readPos ??0, ( this.readPos ??0) + 4 ) == "null" ) {
					this.readPos += 3;

					if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
						this.curAscii = 0;
						this.curChar = "";
					} else {
						this.curAscii = String13.GetCharCode( this.json, this.readPos );
						this.curChar = String13.GetCharFromCode( this.curAscii );
					}

					while (GlobalVars.whitespace.Contains( this.curAscii )) {
						
						if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
							this.curAscii = 0;
							this.curChar = "";
						} else {
							this.curAscii = String13.GetCharCode( this.json, this.readPos );
							this.curChar = String13.GetCharFromCode( this.curAscii );
						}
					}
					return null;
				} else {
					throw new Exception( "Expected: 'null'" );
				}
			} else if ( this.curChar == "" ) {
				throw new Exception( "Unexpected: End of JSON" );
			} else {
				throw new Exception( "Unexpected: '" + this.curChar + "'" );
			}
			return null;
		}

		// Function from file: json.dm
		public dynamic parse( string json = null ) {
			dynamic value = null;

			this.readPos = 0;
			this.jsonLen = Lang13.Length( json );
			this.json = json;
			this.curAscii = 0;
			this.curChar = "";

			if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
				this.curAscii = 0;
				this.curChar = "";
			} else {
				this.curAscii = String13.GetCharCode( json, this.readPos );
				this.curChar = String13.GetCharFromCode( this.curAscii );
			}

			while (GlobalVars.whitespace.Contains( this.curAscii )) {
				
				if ( ( ++this.readPos ??0) > ( this.jsonLen ??0) ) {
					this.curAscii = 0;
					this.curChar = "";
				} else {
					this.curAscii = String13.GetCharCode( json, this.readPos );
					this.curChar = String13.GetCharFromCode( this.curAscii );
				}
			}
			value = this.ParseValue();

			if ( ( this.readPos ??0) < ( this.jsonLen ??0) ) {
				throw new Exception( "Expected: End of JSON" );
			}
			return value;
		}

		// Function from file: json.dm
		public ByTable WriteList( ByTable json = null, dynamic listVal = null ) {
			ByTable _default = null;

			int listType = 0;
			dynamic key = null;
			bool? addComma = null;
			dynamic key2 = null;
			bool? addComma2 = null;
			dynamic key3 = null;

			_default = json;
			listType = 0;

			foreach (dynamic _a in Lang13.Enumerate( listVal )) {
				key = _a;
				

				if ( key is string ) {
					
					if ( !( listVal[key] == null ) ) {
						listType |= 1;
					}
				} else if ( !Lang13.Bool( Lang13.IsNumber( key ) ) && !( listVal[key] == null ) ) {
					listType = 3;
				} else {
					listType |= 2;
				}

				if ( listType == 3 ) {
					throw new Exception( "The given list cannot be converted to JSON." );
				}
			}

			if ( listType == 1 ) {
				json.Add( "{" );
				addComma = null;

				foreach (dynamic _b in Lang13.Enumerate( listVal )) {
					key2 = _b;
					

					if ( addComma == true ) {
						json.Add( "," );
					} else {
						addComma = GlobalVars.TRUE;
					}
					this.WriteString( json, key2 );
					json.Add( ":" );
					this.WriteValue( json, listVal[key2] );
				}
				json.Add( "}" );
			} else {
				json.Add( "[" );
				addComma2 = null;

				foreach (dynamic _c in Lang13.Enumerate( listVal )) {
					key3 = _c;
					

					if ( addComma2 == true ) {
						json.Add( "," );
					} else {
						addComma2 = GlobalVars.TRUE;
					}
					this.WriteValue( json, key3 );
				}
				json.Add( "]" );
			}
			return _default;
		}

		// Function from file: json.dm
		public ByTable WriteString( ByTable json = null, dynamic str = null ) {
			ByTable _default = null;

			int? quotePos = null;
			int? bsPos = null;
			int? lastStop = null;
			int? escPos = null;

			_default = json;
			quotePos = String13.Find( str, "\"", 1, 0 );
			bsPos = String13.Find( str, "\\", 1, 0 );

			if ( quotePos == 0 && bsPos == 0 ) {
				json.Add( "\"", str, "\"" );
			} else {
				json.Add( "\"" );
				lastStop = 1;

				while (quotePos != 0 || bsPos != 0) {
					escPos = null;

					if ( ( quotePos ??0) < ( bsPos ??0) && quotePos != 0 || bsPos == 0 ) {
						escPos = quotePos;
					} else {
						escPos = bsPos;
					}
					json.Add( String13.SubStr( str, lastStop ??0, escPos ??0 ), "\\" );
					lastStop = escPos;

					if ( escPos == quotePos ) {
						quotePos = String13.Find( str, "\"", ( escPos ??0) + 1, 0 );
					} else if ( escPos == bsPos ) {
						bsPos = String13.Find( str, "\\", ( escPos ??0) + 1, 0 );
					}
				}
				json.Add( String13.SubStr( str, lastStop ??0, 0 ), "\"" );
			}
			return _default;
		}

		// Function from file: json.dm
		public ByTable WriteValue( ByTable json = null, dynamic value = null ) {
			ByTable _default = null;

			_default = json;

			if ( Lang13.Bool( Lang13.IsNumber( value ) ) ) {
				json.Add( value );
			} else if ( value == null ) {
				json.Add( "null" );
			} else if ( value is string ) {
				this.WriteString( json, value );
			} else if ( value is ByTable ) {
				this.WriteList( json, value );
			} else {
				throw new Exception( "Datums cannot be converted to JSON." );
			}
			return _default;
		}

		// Function from file: json.dm
		public string stringify( ByTable value = null ) {
			return GlobalFuncs.list2text( this.WriteValue( new ByTable(), value ) );
		}

	}

}