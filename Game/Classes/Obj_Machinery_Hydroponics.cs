// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Hydroponics : Obj_Machinery {

		public double waterlevel = 100;
		public double maxwater = 100;
		public double nutrilevel = 10;
		public double maxnutri = 10;
		public double pestlevel = 0;
		public double weedlevel = 0;
		public dynamic yieldmod = 1;
		public dynamic mutmod = 1;
		public double toxic = 0;
		public int age = 0;
		public bool dead = false;
		public double health = 0;
		public int lastproduce = 0;
		public int lastcycle = 0;
		public int cycledelay = 200;
		public bool planted = false;
		public bool harvest = false;
		public dynamic myseed = null;
		public dynamic rating = 1;
		public bool unwrenchable = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pixel_y = 8;
			this.anchored = 1;
			this.icon = "icons/obj/hydroponics/equipment.dmi";
			this.icon_state = "hydrotray";
		}

		public Obj_Machinery_Hydroponics ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: hydroponics.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( a is Mob_Living_Silicon ) {
				return null;
			}

			if ( this.harvest ) {
				this.myseed.harvest();
			} else if ( this.dead ) {
				this.planted = false;
				this.dead = false;
				a.WriteMsg( "<span class='notice'>You remove the dead plant from " + this + ".</span>" );
				GlobalFuncs.qdel( this.myseed );
				this.update_icon();
			} else {
				
				if ( this.planted && !this.dead ) {
					a.WriteMsg( "" + this + " has <span class='info'>" + this.myseed.plantname + "</span> planted." );

					if ( this.health <= Convert.ToDouble( this.myseed.endurance / 2 ) ) {
						a.WriteMsg( "The plant looks unhealthy." );
					}
				} else {
					a.WriteMsg( "" + this + " is empty." );
				}
				a.WriteMsg( "Water: " + this.waterlevel + "/" + this.maxwater );
				a.WriteMsg( "Nutrient: " + this.nutrilevel + "/" + this.maxnutri );

				if ( this.weedlevel >= 5 ) {
					a.WriteMsg( "" + this + " is filled with weeds!" );
				}

				if ( this.pestlevel >= 5 ) {
					a.WriteMsg( "" + this + " is filled with tiny worms!" );
				}
				a.WriteMsg( "" );
			}
			return null;
		}

		// Function from file: hydroponics.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic reagent_source = null;
			dynamic syr = null;
			ByTable trays = null;
			dynamic target = null;
			string visi_msg = null;
			bool irrigate = false;
			dynamic syr2 = null;
			int split = 0;
			Obj_Machinery_Hydroponics H = null;
			Reagents S = null;
			ByTable text_strings = null;
			dynamic _string = null;
			dynamic S2 = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown G = null;
			Obj_Machinery_Hydroponics h = null;

			
			if ( A is Obj_Item_Weapon_ReagentContainers ) {
				reagent_source = A;

				if ( reagent_source is Obj_Item_Weapon_ReagentContainers_Syringe ) {
					syr = reagent_source;

					if ( Lang13.Bool( syr.mode ) != true ) {
						user.WriteMsg( "<span class='warning'>You can't get any extract out of this plant.</span>" );
						return null;
					}
				}

				if ( !Lang13.Bool( reagent_source.reagents.total_volume ) ) {
					user.WriteMsg( "<span class='notice'>" + reagent_source + " is empty.</span>" );
					return 1;
				}
				trays = new ByTable(new object [] { this });
				target = ( Lang13.Bool( this.myseed ) ? this.myseed.plantname : this );
				visi_msg = "";
				irrigate = false;

				if ( reagent_source is Obj_Item_Weapon_ReagentContainers_Food_Snacks || reagent_source is Obj_Item_Weapon_ReagentContainers_Pill ) {
					visi_msg = "" + user + " composts " + reagent_source + ", spreading it through " + target;
				} else {
					
					if ( reagent_source is Obj_Item_Weapon_ReagentContainers_Syringe ) {
						syr2 = reagent_source;
						visi_msg = "" + user + " injects " + target + " with " + syr2;

						if ( ( syr2.reagents.total_volume ??0) <= Convert.ToDouble( syr2.amount_per_transfer_from_this ) ) {
							syr2.mode = 0;
						}
					} else if ( reagent_source is Obj_Item_Weapon_ReagentContainers_Spray ) {
						visi_msg = "" + user + " sprays " + target + " with " + reagent_source;
						GlobalFuncs.playsound( this.loc, "sound/effects/spray3.ogg", 50, 1, -6 );
						irrigate = true;
					} else if ( Lang13.Bool( reagent_source.amount_per_transfer_from_this ) ) {
						visi_msg = "" + user + " uses " + reagent_source + " on " + target;
						irrigate = true;
					}

					if ( reagent_source is Obj_Item_Weapon_ReagentContainers_Glass ) {
						GlobalFuncs.playsound( this.loc, "sound/effects/slosh.ogg", 25, 1 );
					}
				}

				if ( irrigate && Convert.ToDouble( reagent_source.amount_per_transfer_from_this ) > 30 && ( reagent_source.reagents.total_volume ??0) >= 30 && this.anchored == 2 ) {
					trays = this.FindConnected();

					if ( trays.len > 1 ) {
						visi_msg += ", setting off the irrigation system";
					}
				}

				if ( Lang13.Bool( visi_msg ) ) {
					this.visible_message( "<span class='notice'>" + visi_msg + ".</span>" );
				}
				split = Num13.Floor( Convert.ToDouble( reagent_source.amount_per_transfer_from_this / trays.len ) );

				foreach (dynamic _a in Lang13.Enumerate( trays, typeof(Obj_Machinery_Hydroponics) )) {
					H = _a;
					
					S = new Reagents();
					S.my_atom = H;
					((Reagents)reagent_source.reagents).trans_to( S, split );

					if ( reagent_source is Obj_Item_Weapon_ReagentContainers_Food_Snacks || reagent_source is Obj_Item_Weapon_ReagentContainers_Pill ) {
						GlobalFuncs.qdel( reagent_source );
					}
					H.applyChemicals( S );
					S.clear_reagents();
					GlobalFuncs.qdel( S );
					H.update_icon();
				}

				if ( Lang13.Bool( reagent_source ) ) {
					reagent_source.update_icon();
				}
				return 1;
			} else if ( A is Obj_Item_Seeds ) {
				
				if ( !this.planted ) {
					this.investigate_log( "had Kudzu planted in it by " + user.ckey + "(" + user + ") at (" + this.x + "," + this.y + "," + this.z + ")", "kudzu" );
					((Mob)user).unEquip( A );
					user.WriteMsg( "<span class='notice'>You plant " + A + ".</span>" );
					this.dead = false;
					this.myseed = A;
					this.planted = true;
					this.age = 1;
					this.health = Convert.ToDouble( this.myseed.endurance );
					this.lastcycle = Game13.time;
					A.loc = this;

					if ( Lang13.Bool( user.client ) && user.s_active != this ) {
						user.client.screen -= A;
					}
					((Obj_Item)A).dropped( user );
					this.update_icon();
				} else {
					user.WriteMsg( "<span class='warning'>" + this + " already has seeds in it!</span>" );
				}
			} else if ( A is Obj_Item_Device_Analyzer_PlantAnalyzer ) {
				
				if ( this.planted && Lang13.Bool( this.myseed ) ) {
					user.WriteMsg( "*** <B>" + this.myseed.plantname + "</B> ***" );
					user.WriteMsg( "-Plant Age: <span class='notice'>" + this.age + "</span>" );
					user.WriteMsg( "-Plant Endurance: <span class='notice'>" + this.myseed.endurance + "</span>" );
					user.WriteMsg( "-Plant Lifespan: <span class='notice'>" + this.myseed.lifespan + "</span>" );

					if ( Convert.ToInt32( this.myseed.yield ) != -1 ) {
						user.WriteMsg( "-Plant Yield: <span class='notice'>" + this.myseed.yield + "</span>" );
					}
					user.WriteMsg( "-Plant Production: <span class='notice'>" + this.myseed.production + "</span>" );

					if ( Convert.ToInt32( this.myseed.potency ) != -1 ) {
						user.WriteMsg( "-Plant Potency: <span class='notice'>" + this.myseed.potency + "</span>" );
					}
					text_strings = ((Obj_Item_Seeds)this.myseed).get_analyzer_text();

					if ( text_strings != null ) {
						
						foreach (dynamic _b in Lang13.Enumerate( text_strings )) {
							_string = _b;
							
							user.WriteMsg( _string );
						}
					}
				} else {
					user.WriteMsg( "<B>No plant found.</B>" );
				}
				user.WriteMsg( "-Weed level: <span class='notice'>" + this.weedlevel + " / 10</span>" );
				user.WriteMsg( "-Pest level: <span class='notice'>" + this.pestlevel + " / 10</span>" );
				user.WriteMsg( "-Toxicity level: <span class='notice'>" + this.toxic + " / 100</span>" );
				user.WriteMsg( "-Water level: <span class='notice'>" + this.waterlevel + " / " + this.maxwater + "</span>" );
				user.WriteMsg( "-Nutrition level: <span class='notice'>" + this.nutrilevel + " / " + this.maxnutri + "</span>" );
				user.WriteMsg( "" );
			} else if ( A is Obj_Item_Weapon_Cultivator ) {
				
				if ( this.weedlevel > 0 ) {
					((Ent_Static)user).visible_message( "" + user + " uproots the weeds.", "<span class='notice'>You remove the weeds from " + this + ".</span>" );
					this.weedlevel = 0;
					this.update_icon();
				} else {
					user.WriteMsg( "<span class='warning'>This plot is completely devoid of weeds! It doesn't need uprooting.</span>" );
				}
			} else if ( A is Obj_Item_Weapon_Storage_Bag_Plants ) {
				this.attack_hand( user );
				S2 = A;

				foreach (dynamic _c in Lang13.Enumerate( Map13.GetTile( Convert.ToInt32( user.x ), Convert.ToInt32( user.y ), Convert.ToInt32( user.z ) ), typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) )) {
					G = _c;
					

					if ( !((Obj_Item_Weapon_Storage)S2).can_be_inserted( G ) ) {
						return null;
					}
					((Obj_Item_Weapon_Storage)S2).handle_item_insertion( G, true );
				}
			} else if ( A is Obj_Item_Weapon_Wrench && this.unwrenchable ) {
				
				if ( this.anchored == 2 ) {
					user.WriteMsg( "<span class='warning'>Unscrew the hoses first!</span>" );
					return null;
				}

				if ( !Lang13.Bool( this.anchored ) && !this.isinspace() ) {
					((Ent_Static)user).visible_message( "" + user + " begins to wrench " + this + " into place.", "<span class='notice'>You begin to wrench " + this + " in place...</span>" );
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );

					if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
						
						if ( Lang13.Bool( this.anchored ) ) {
							return null;
						}
						this.anchored = 1;
						((Ent_Static)user).visible_message( "" + user + " wrenches " + this + " into place.", "<span class='notice'>You wrench " + this + " in place.</span>" );
					}
				} else if ( Lang13.Bool( this.anchored ) ) {
					((Ent_Static)user).visible_message( "" + user + " begins to unwrench " + this + ".", "<span class='notice'>You begin to unwrench " + this + "...</span>" );
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );

					if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
						
						if ( !Lang13.Bool( this.anchored ) ) {
							return null;
						}
						this.anchored = 0;
						((Ent_Static)user).visible_message( "" + user + " unwrenches " + this + ".", "<span class='notice'>You unwrench " + this + ".</span>" );
					}
				}
			} else if ( A is Obj_Item_Weapon_Wirecutters && this.unwrenchable ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					
					if ( this.anchored == 2 ) {
						GlobalFuncs.playsound( this.loc, "sound/items/Wirecutter.ogg", 50, 1 );
						this.anchored = 1;
						user.WriteMsg( new Txt( "<span class='notice'>You snip " ).the( this ).item().str( "'s hoses.</span>" ).ToString() );
					} else if ( this.anchored == 1 ) {
						GlobalFuncs.playsound( this.loc, "sound/items/Wirecutter.ogg", 50, 1 );
						this.anchored = 2;
						user.WriteMsg( new Txt( "<span class='notice'>You reconnect " ).the( this ).item().str( "'s hoses.</span>" ).ToString() );
					}

					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInRange( this, 1 ), typeof(Obj_Machinery_Hydroponics) )) {
						h = _d;
						
						h.update_icon();
					}
				}
			}
			return null;
		}

		// Function from file: hydroponics.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			double n = 0;
			dynamic Dir = null;
			dynamic t = null;
			Image I = null;
			double t_growthstate = 0;

			this.overlays.Cut();
			n = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				Dir = _a;
				
				t = Lang13.FindIn( typeof(Obj_Machinery_Hydroponics), Map13.GetStep( this, Convert.ToInt32( Dir ) ) );

				if ( Lang13.Bool( t ) && t.anchored == 2 && this.anchored == 2 ) {
					n += Convert.ToDouble( Dir );
				}
			}
			this.icon_state = "hoses-" + n;
			this.UpdateDescription();

			if ( this.planted ) {
				I = null;

				if ( this.dead ) {
					I = new Image( "icons/obj/hydroponics/growing.dmi", null, "" + this.myseed.species + "-dead" );
				} else if ( this.harvest ) {
					
					if ( Convert.ToInt32( this.myseed.plant_type ) == 2 ) {
						I = new Image( "icons/obj/hydroponics/growing.dmi", null, "" + this.myseed.species + "-grow" + this.myseed.growthstages );
					} else {
						I = new Image( "icons/obj/hydroponics/growing.dmi", null, "" + this.myseed.species + "-harvest" );
					}
				} else if ( this.age < Convert.ToDouble( this.myseed.maturation ) ) {
					t_growthstate = this.age / Convert.ToDouble( this.myseed.maturation ) * this.myseed.growthstages;
					I = new Image( "icons/obj/hydroponics/growing.dmi", null, "" + this.myseed.species + "-grow" + Num13.Floor( t_growthstate ) );
					this.lastproduce = this.age;
				} else {
					I = new Image( "icons/obj/hydroponics/growing.dmi", null, "" + this.myseed.species + "-grow" + this.myseed.growthstages );
				}
				I.layer = 401;
				this.overlays.Add( I );

				if ( this.waterlevel <= 10 ) {
					this.overlays.Add( new Image( "icons/obj/hydroponics/equipment.dmi", null, "over_lowwater3" ) );
				}

				if ( this.nutrilevel <= 2 ) {
					this.overlays.Add( new Image( "icons/obj/hydroponics/equipment.dmi", null, "over_lownutri3" ) );
				}

				if ( this.health <= Convert.ToDouble( this.myseed.endurance / 2 ) ) {
					this.overlays.Add( new Image( "icons/obj/hydroponics/equipment.dmi", null, "over_lowhealth3" ) );
				}

				if ( this.weedlevel >= 5 || this.pestlevel >= 5 || this.toxic >= 40 ) {
					this.overlays.Add( new Image( "icons/obj/hydroponics/equipment.dmi", null, "over_alert3" ) );
				}

				if ( this.harvest ) {
					this.overlays.Add( new Image( "icons/obj/hydroponics/equipment.dmi", null, "over_harvest3" ) );
				}
			}

			if ( this.myseed is Obj_Item_Seeds_Glowshroom ) {
				this.SetLuminosity( Num13.Floor( Convert.ToDouble( this.myseed.potency / 10 ) ) );
			} else {
				this.SetLuminosity( 0 );
			}
			return null;
		}

		// Function from file: hydroponics.dm
		public override int? process( dynamic seconds = null ) {
			bool needs_update = false;
			Ent_Static currentTurf = null;
			int lightAmt = 0;

			needs_update = false;

			if ( Lang13.Bool( this.myseed ) && this.myseed.loc != this ) {
				this.myseed.loc = this;
			}

			if ( Game13.time > this.lastcycle + this.cycledelay ) {
				this.lastcycle = Game13.time;

				if ( this.planted && !this.dead ) {
					this.age++;
					needs_update = true;

					if ( Rand13.PercentChance( 50 ) ) {
						this.adjustNutri( -1 / Convert.ToDouble( this.rating ) );
					}

					if ( this.nutrilevel <= 0 && Lang13.Bool( this.myseed.plant_type ) != true ) {
						this.adjustHealth( -Rand13.Int( 1, 3 ) );
					}

					if ( this.loc is Tile ) {
						currentTurf = this.loc;
						lightAmt = Convert.ToInt32( ((dynamic)currentTurf).lighting_lumcount );

						if ( Convert.ToInt32( this.myseed.plant_type ) == 2 ) {
							
							if ( lightAmt < 2 ) {
								this.adjustHealth( -1 / Convert.ToDouble( this.rating ) );
							}
						} else if ( lightAmt < 4 ) {
							this.adjustHealth( -2 / Convert.ToDouble( this.rating ) );
						}
					}
					this.adjustWater( -Rand13.Int( 1, 6 ) / Convert.ToDouble( this.rating ) );

					if ( this.waterlevel <= 10 && Convert.ToInt32( this.myseed.plant_type ) != 2 ) {
						this.adjustHealth( -Rand13.Int( 0, 1 ) / Convert.ToDouble( this.rating ) );

						if ( this.waterlevel <= 0 ) {
							this.adjustHealth( -Rand13.Int( 0, 2 ) / Convert.ToDouble( this.rating ) );
						}
					} else if ( this.waterlevel > 10 && this.nutrilevel > 0 ) {
						this.adjustHealth( Rand13.Int( 1, 2 ) / Convert.ToDouble( this.rating ) );

						if ( Rand13.PercentChance( 5 ) ) {
							this.adjustWeeds( 1 / Convert.ToDouble( this.rating ) );
						}
					}

					if ( this.toxic >= 40 && this.toxic < 80 ) {
						this.adjustHealth( -1 / Convert.ToDouble( this.rating ) );
						this.adjustToxic( -Rand13.Int( 1, 10 ) / Convert.ToDouble( this.rating ) );
					} else if ( this.toxic >= 80 ) {
						this.adjustHealth( -3 );
						this.adjustToxic( -Rand13.Int( 1, 10 ) / Convert.ToDouble( this.rating ) );
					} else if ( this.pestlevel >= 5 ) {
						this.adjustHealth( -1 / Convert.ToDouble( this.rating ) );
					}

					if ( this.weedlevel >= 5 && Lang13.Bool( this.myseed.plant_type ) != true ) {
						this.adjustHealth( -1 / Convert.ToDouble( this.rating ) );
					}

					if ( this.health <= 0 ) {
						this.plantdies();
						this.adjustWeeds( 1 / Convert.ToDouble( this.rating ) );
					}

					if ( this.age > Convert.ToDouble( this.myseed.lifespan ) ) {
						this.adjustHealth( -Rand13.Int( 1, 5 ) / Convert.ToDouble( this.rating ) );
					}

					if ( this.age > Convert.ToDouble( this.myseed.production ) && this.age - this.lastproduce > Convert.ToDouble( this.myseed.production ) && !this.harvest && !this.dead ) {
						this.nutrimentMutation();

						if ( Lang13.Bool( this.myseed ) && Convert.ToInt32( this.myseed.yield ) != -1 ) {
							this.harvest = true;
						} else {
							this.lastproduce = this.age;
						}
					}

					if ( Rand13.PercentChance( 5 ) ) {
						this.adjustPests( 1 / Convert.ToDouble( this.rating ) );
					}
				} else if ( this.waterlevel > 10 && this.nutrilevel > 0 && Rand13.PercentChance( 10 ) ) {
					this.adjustWeeds( 1 / Convert.ToDouble( this.rating ) );
				}

				if ( this.weedlevel >= 10 && Rand13.PercentChance( 50 ) ) {
					
					if ( this.planted ) {
						
						if ( Lang13.Bool( this.myseed.plant_type ) == false ) {
							this.weedinvasion();
						}
					} else {
						this.weedinvasion();
					}
					needs_update = true;
				}

				if ( needs_update ) {
					this.update_icon();
				}
			}
			return null;
		}

		// Function from file: hydroponics.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( !this.planted ) {
				base.bullet_act( (object)(P), (object)(def_zone) );
				return null;
			}

			if ( P is Obj_Item_Projectile_Energy_Floramut ) {
				this.mutate();
			} else if ( P is Obj_Item_Projectile_Energy_Florayield ) {
				
				if ( Lang13.Bool( this.myseed.yield ) == false ) {
					this.adjustSYield( this.rating );
				} else if ( Rand13.PercentChance( ((int)( 1 / Convert.ToDouble( this.myseed.yield * this.myseed.yield ) * 100 )) ) ) {
					this.adjustSYield( this.rating );
				}
			} else {
				base.bullet_act( (object)(P), (object)(def_zone) );
				return null;
			}
			return null;
		}

		// Function from file: hydroponics.dm
		public void spawnplant(  ) {
			ByTable livingplants = null;
			dynamic chosen = null;
			dynamic C = null;

			livingplants = new ByTable(new object [] { typeof(Mob_Living_SimpleAnimal_Hostile_Tree), typeof(Mob_Living_SimpleAnimal_Hostile_Killertomato) });
			chosen = Rand13.PickFromTable( livingplants );
			C = Lang13.Call( chosen );
			C.faction = new ByTable(new object [] { "plants" });
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustSPot( int adjustamt = 0 ) {
			
			if ( Lang13.Bool( this.myseed ) && Convert.ToInt32( this.myseed.potency ) != -1 ) {
				this.myseed.potency += adjustamt;
				this.myseed.potency = Num13.MaxInt( Convert.ToInt32( this.myseed.potency ), 0 );
				this.myseed.potency = Num13.MinInt( Convert.ToInt32( this.myseed.potency ), 100 );
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustSProduct( int adjustamt = 0 ) {
			
			if ( Lang13.Bool( this.myseed ) ) {
				this.myseed.production += adjustamt;
				this.myseed.production = Num13.MaxInt( Convert.ToInt32( this.myseed.production ), 2 );
				this.myseed.production = Num13.MinInt( Convert.ToInt32( this.myseed.production ), 10 );
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustSEnd( int adjustamt = 0 ) {
			
			if ( Lang13.Bool( this.myseed ) ) {
				this.myseed.endurance += adjustamt;
				this.myseed.endurance = Num13.MaxInt( Convert.ToInt32( this.myseed.endurance ), 10 );
				this.myseed.endurance = Num13.MinInt( Convert.ToInt32( this.myseed.endurance ), 100 );
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustSLife( int adjustamt = 0 ) {
			
			if ( Lang13.Bool( this.myseed ) ) {
				this.myseed.lifespan += adjustamt;
				this.myseed.lifespan = Num13.MaxInt( Convert.ToInt32( this.myseed.lifespan ), 10 );
				this.myseed.lifespan = Num13.MinInt( Convert.ToInt32( this.myseed.lifespan ), 100 );
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustSYield( dynamic adjustamt = null ) {
			
			if ( Lang13.Bool( this.myseed ) && Convert.ToInt32( this.myseed.yield ) != -1 ) {
				this.myseed.yield += adjustamt;
				this.myseed.yield = Num13.MaxInt( Convert.ToInt32( this.myseed.yield ), 0 );
				this.myseed.yield = Num13.MinInt( Convert.ToInt32( this.myseed.yield ), 10 );

				if ( Convert.ToDouble( this.myseed.yield ) <= 0 && Convert.ToInt32( this.myseed.plant_type ) == 2 ) {
					this.myseed.yield = 1;
				}
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustWeeds( double adjustamt = 0 ) {
			this.weedlevel += adjustamt;
			this.weedlevel = Num13.MaxInt( ((int)( this.weedlevel )), 0 );
			this.weedlevel = Num13.MinInt( ((int)( this.weedlevel )), 10 );
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustPests( double adjustamt = 0 ) {
			this.pestlevel += adjustamt;
			this.pestlevel = Num13.MaxInt( ((int)( this.pestlevel )), 0 );
			this.pestlevel = Num13.MinInt( ((int)( this.pestlevel )), 10 );
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustToxic( double adjustamt = 0 ) {
			this.toxic += adjustamt;
			this.toxic = Num13.MaxInt( ((int)( this.toxic )), 0 );
			this.toxic = Num13.MinInt( ((int)( this.toxic )), 100 );
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustHealth( double adjustamt = 0 ) {
			
			if ( this.planted && !this.dead ) {
				this.health += adjustamt;
				this.health = Num13.MaxInt( ((int)( this.health )), 0 );
				this.health = Num13.MinInt( ((int)( this.health )), Convert.ToInt32( this.myseed.endurance ) );
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustWater( double adjustamt = 0 ) {
			this.waterlevel += adjustamt;
			this.waterlevel = Num13.MaxInt( ((int)( this.waterlevel )), 0 );
			this.waterlevel = Num13.MinInt( ((int)( this.waterlevel )), ((int)( this.maxwater )) );

			if ( adjustamt > 0 ) {
				this.adjustToxic( -Num13.Floor( adjustamt / 4 ) );
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void adjustNutri( double adjustamt = 0 ) {
			this.nutrilevel += adjustamt;
			this.nutrilevel = Num13.MaxInt( ((int)( this.nutrilevel )), 0 );
			this.nutrilevel = Num13.MinInt( ((int)( this.nutrilevel )), ((int)( this.maxnutri )) );
			return;
		}

		// Function from file: hydroponics.dm
		public void update_tray( Mob user = null ) {
			user = user ?? Task13.User;

			this.harvest = false;
			this.lastproduce = this.age;

			if ( this.myseed is Obj_Item_Seeds_Replicapod ) {
				user.WriteMsg( "<span class='notice'>You harvest from the " + this.myseed.plantname + ".</span>" );
			} else if ( ((Obj_Item_Seeds)this.myseed).getYield() <= 0 ) {
				user.WriteMsg( "<span class='warning'>You fail to harvest anything useful!</span>" );
			} else {
				user.WriteMsg( "<span class='notice'>You harvest " + ((Obj_Item_Seeds)this.myseed).getYield() + " items from the " + this.myseed.plantname + ".</span>" );
			}

			if ( this.myseed.oneharvest ) {
				GlobalFuncs.qdel( this.myseed );
				this.planted = false;
				this.dead = false;
			}
			this.update_icon();
			return;
		}

		// Function from file: hydroponics.dm
		public void applyChemicals( Reagents S = null ) {
			
			if ( Lang13.Bool( this.myseed ) ) {
				((Obj_Item_Seeds)this.myseed).on_chem_reaction( S );
			}

			if ( Lang13.Bool( S.has_reagent( "mutagen", 5 ) ) || Lang13.Bool( S.has_reagent( "radium", 10 ) ) || Lang13.Bool( S.has_reagent( "uranium", 10 ) ) ) {
				
				dynamic _a = Rand13.Int( 100 ); // Was a switch-case, sorry for the mess.
				if ( 91<=_a&&_a<=100 ) {
					this.plantdies();
				} else if ( 81<=_a&&_a<=90 ) {
					this.mutatespecie();
				} else if ( 66<=_a&&_a<=80 ) {
					this.hardmutate();
				} else if ( 41<=_a&&_a<=65 ) {
					this.mutate();
				} else if ( 21<=_a&&_a<=41 ) {
					Task13.User.WriteMsg( "The plants don't seem to react..." );
				} else if ( 11<=_a&&_a<=20 ) {
					this.mutateweed();
				} else if ( 1<=_a&&_a<=10 ) {
					this.mutatepest();
				} else {
					Task13.User.WriteMsg( "Nothing happens..." );
				}
			} else if ( Lang13.Bool( S.has_reagent( "mutagen", 2 ) ) || Lang13.Bool( S.has_reagent( "radium", 5 ) ) || Lang13.Bool( S.has_reagent( "uranium", 5 ) ) ) {
				this.hardmutate();
			} else if ( Lang13.Bool( S.has_reagent( "mutagen", 1 ) ) || Lang13.Bool( S.has_reagent( "radium", 2 ) ) || Lang13.Bool( S.has_reagent( "uranium", 2 ) ) ) {
				this.mutate();
			}

			if ( Lang13.Bool( S.has_reagent( "uranium", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( S.get_reagent_amount( "uranium" ) ?1:0 ) );
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "uranium" ) ?1:0) * 2 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "radium", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( S.get_reagent_amount( "radium" ) ?1:0 ) );
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "radium" ) ?1:0) * 3 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "eznutriment", 1 ) ) ) {
				this.yieldmod = this.rating;
				this.mutmod = this.rating;
				this.adjustNutri( Num13.Floor( S.get_reagent_amount( "eznutriment" ) ?1:0 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "left4zednutriment", 1 ) ) ) {
				this.yieldmod = this.rating * 0;
				this.mutmod = this.rating * 2;
				this.adjustNutri( Num13.Floor( S.get_reagent_amount( "left4zednutriment" ) ?1:0 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "robustharvestnutriment", 1 ) ) ) {
				this.yieldmod = this.rating * 2;
				this.mutmod = this.rating * 0;
				this.adjustNutri( Num13.Floor( S.get_reagent_amount( "robustharvestnutriment" ) ?1:0 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "charcoal", 1 ) ) ) {
				this.adjustToxic( -Num13.Floor( ( S.get_reagent_amount( "charcoal" ) ?1:0) * 2 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "toxin", 1 ) ) ) {
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "toxin" ) ?1:0) * 2 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "milk", 1 ) ) ) {
				this.adjustNutri( Num13.Floor( ( S.get_reagent_amount( "milk" ) ?1:0) * 0.1 ) );
				this.adjustWater( Num13.Floor( ( S.get_reagent_amount( "milk" ) ?1:0) * 081 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "beer", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( ( S.get_reagent_amount( "beer" ) ?1:0) * 0.05 ) );
				this.adjustNutri( Num13.Floor( ( S.get_reagent_amount( "beer" ) ?1:0) * 0.25 ) );
				this.adjustWater( Num13.Floor( ( S.get_reagent_amount( "beer" ) ?1:0) * 061 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "fluorine", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( ( S.get_reagent_amount( "fluorine" ) ?1:0) * 2 ) );
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "flourine" ) ?1:0) * 2.5 ) );
				this.adjustWater( -Num13.Floor( ( S.get_reagent_amount( "flourine" ) ?1:0) * 0.5 ) );
				this.adjustWeeds( -Rand13.Int( 1, 4 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "chlorine", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( S.get_reagent_amount( "chlorine" ) ?1:0 ) );
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "chlorine" ) ?1:0) * 1.5 ) );
				this.adjustWater( -Num13.Floor( ( S.get_reagent_amount( "chlorine" ) ?1:0) * 0.5 ) );
				this.adjustWeeds( -Rand13.Int( 1, 3 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "phosphorus", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( ( S.get_reagent_amount( "phosphorus" ) ?1:0) * 0.75 ) );
				this.adjustNutri( Num13.Floor( ( S.get_reagent_amount( "phosphorus" ) ?1:0) * 0.1 ) );
				this.adjustWater( -Num13.Floor( ( S.get_reagent_amount( "phosphorus" ) ?1:0) * 0.5 ) );
				this.adjustWeeds( -Rand13.Int( 1, 2 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "sugar", 1 ) ) ) {
				this.adjustWeeds( Rand13.Int( 1, 2 ) );
				this.adjustPests( Rand13.Int( 1, 2 ) );
				this.adjustNutri( Num13.Floor( ( S.get_reagent_amount( "sugar" ) ?1:0) * 0.1 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "water", 1 ) ) ) {
				this.adjustWater( Num13.Floor( S.get_reagent_amount( "water" ) ?1:0 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "holywater", 1 ) ) ) {
				this.adjustWater( Num13.Floor( S.get_reagent_amount( "holywater" ) ?1:0 ) );
				this.adjustHealth( Num13.Floor( ( S.get_reagent_amount( "holywater" ) ?1:0) * 0.1 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "sodawater", 1 ) ) ) {
				this.adjustWater( Num13.Floor( S.get_reagent_amount( "sodawater" ) ?1:0 ) );
				this.adjustHealth( Num13.Floor( ( S.get_reagent_amount( "sodawater" ) ?1:0) * 0.1 ) );
				this.adjustNutri( Num13.Floor( ( S.get_reagent_amount( "sodawater" ) ?1:0) * 0.1 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "sacid", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( S.get_reagent_amount( "sacid" ) ?1:0 ) );
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "sacid" ) ?1:0) * 1.5 ) );
				this.adjustWeeds( -Rand13.Int( 1, 2 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "facid", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( ( S.get_reagent_amount( "facid" ) ?1:0) * 2 ) );
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "facid" ) ?1:0) * 3 ) );
				this.adjustWeeds( -Rand13.Int( 1, 4 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "plantbgone", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( ( S.get_reagent_amount( "plantbgone" ) ?1:0) * 5 ) );
				this.adjustToxic( -Num13.Floor( ( S.get_reagent_amount( "plantbgone" ) ?1:0) * 6 ) );
				this.adjustWeeds( -Rand13.Int( 4, 8 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "napalm", 1 ) ) ) {
				this.adjustHealth( -Num13.Floor( ( S.get_reagent_amount( "napalm" ) ?1:0) * 6 ) );
				this.adjustToxic( -Num13.Floor( ( S.get_reagent_amount( "napalm" ) ?1:0) * 7 ) );
				this.adjustWeeds( -Rand13.Int( 5, 9 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "weedkiller", 1 ) ) ) {
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "weedkiller" ) ?1:0) * 0.5 ) );
				this.adjustWeeds( -Rand13.Int( 1, 2 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "pestkiller", 1 ) ) ) {
				this.adjustToxic( Num13.Floor( ( S.get_reagent_amount( "pestkiller" ) ?1:0) * 0.5 ) );
				this.adjustPests( -Rand13.Int( 1, 2 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "cryoxadone", 1 ) ) ) {
				this.adjustHealth( Num13.Floor( ( S.get_reagent_amount( "cryoxadone" ) ?1:0) * 3 ) );
				this.adjustToxic( -Num13.Floor( ( S.get_reagent_amount( "cryoxadone" ) ?1:0) * 3 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "ammonia", 1 ) ) ) {
				this.adjustHealth( Num13.Floor( ( S.get_reagent_amount( "ammonia" ) ?1:0) * 0.5 ) );
				this.adjustNutri( Num13.Floor( S.get_reagent_amount( "ammonia" ) ?1:0 ) );
				this.adjustSYield( Num13.Floor( ( S.get_reagent_amount( "ammonia" ) ?1:0) * 0.01 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "saltpetre", 1 ) ) ) {
				this.adjustHealth( Num13.Floor( ( S.get_reagent_amount( "saltpetre" ) ?1:0) * 0.25 ) );
				this.adjustSProduct( -Num13.Floor( ( S.get_reagent_amount( "saltpetre" ) ?1:0) * 0.11 ) );
				this.adjustSPot( Num13.Floor( ( S.get_reagent_amount( "saltpetre" ) ?1:0) * 0.01 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "ash", 1 ) ) ) {
				this.adjustHealth( Num13.Floor( ( S.get_reagent_amount( "ash" ) ?1:0) * 0.25 ) );
				this.adjustNutri( Num13.Floor( ( S.get_reagent_amount( "ash" ) ?1:0) * 0.5 ) );
				this.adjustWeeds( -1 );
			}

			if ( Lang13.Bool( S.has_reagent( "diethylamine", 1 ) ) ) {
				this.adjustHealth( Num13.Floor( S.get_reagent_amount( "diethylamine" ) ?1:0 ) );
				this.adjustNutri( Num13.Floor( ( S.get_reagent_amount( "diethylamine" ) ?1:0) * 2 ) );
				this.adjustSYield( Num13.Floor( ( S.get_reagent_amount( "diethylamine" ) ?1:0) * 0.11 ) );
				this.adjustPests( -Rand13.Int( 1, 2 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "nutriment", 1 ) ) ) {
				this.adjustHealth( Num13.Floor( ( S.get_reagent_amount( "nutriment" ) ?1:0) * 0.5 ) );
				this.adjustNutri( Num13.Floor( S.get_reagent_amount( "nutriment" ) ?1:0 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "virusfood", 1 ) ) ) {
				this.adjustNutri( Num13.Floor( ( S.get_reagent_amount( "virusfood" ) ?1:0) * 0.5 ) );
				this.adjustHealth( -Num13.Floor( ( S.get_reagent_amount( "virusfood" ) ?1:0) * 0.5 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "blood", 1 ) ) ) {
				this.adjustNutri( Num13.Floor( S.get_reagent_amount( "blood" ) ?1:0 ) );
				this.adjustPests( Rand13.Int( 2, 4 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "strangereagent", 1 ) ) ) {
				this.spawnplant();
			}

			if ( Lang13.Bool( S.has_reagent( "adminordrazine", 1 ) ) ) {
				this.adjustWater( Num13.Floor( S.get_reagent_amount( "adminordrazine" ) ?1:0 ) );
				this.adjustHealth( Num13.Floor( S.get_reagent_amount( "adminordrazine" ) ?1:0 ) );
				this.adjustNutri( Num13.Floor( S.get_reagent_amount( "adminordrazine" ) ?1:0 ) );
				this.adjustPests( -Rand13.Int( 1, 5 ) );
				this.adjustWeeds( -Rand13.Int( 1, 5 ) );
			}

			if ( Lang13.Bool( S.has_reagent( "adminordrazine", 5 ) ) ) {
				
				dynamic _b = Rand13.Int( 100 ); // Was a switch-case, sorry for the mess.
				if ( 66<=_b&&_b<=100 ) {
					this.mutatespecie();
				} else if ( 33<=_b&&_b<=65 ) {
					this.mutateweed();
				} else if ( 1<=_b&&_b<=32 ) {
					this.mutatepest();
				} else {
					Task13.User.WriteMsg( "Nothing happens..." );
				}
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void mutatepest(  ) {
			int? i = null;
			Obj_Effect_Spider_Spiderling S = null;

			
			if ( this.pestlevel > 5 ) {
				this.visible_message( "The pests seem to behave oddly..." );
				i = null;
				i = 0;

				while (( i ??0) < 3) {
					S = new Obj_Effect_Spider_Spiderling( this.loc );
					S.grow_as = typeof(Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider_Hunter);
					i++;
				}
			} else {
				Task13.User.WriteMsg( "The pests seem to behave oddly, but quickly settle down..." );
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void plantdies(  ) {
			this.health = 0;
			this.harvest = false;
			this.pestlevel = 0;

			if ( !this.dead ) {
				this.update_icon();
				this.dead = true;
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void mutateweed(  ) {
			dynamic newWeed = null;

			
			if ( this.weedlevel > 5 ) {
				
				if ( Lang13.Bool( this.myseed ) ) {
					GlobalFuncs.qdel( this.myseed );
				}
				newWeed = Rand13.Pick(new object [] { typeof(Obj_Item_Seeds_Libertymycelium), typeof(Obj_Item_Seeds_Angelmycelium), typeof(Obj_Item_Seeds_Deathnettleseed), typeof(Obj_Item_Seeds_Kudzuseed) });
				this.myseed = Lang13.Call( newWeed );
				this.dead = false;
				this.hardmutate();
				this.planted = true;
				this.age = 0;
				this.health = Convert.ToDouble( this.myseed.endurance );
				this.lastcycle = Game13.time;
				this.harvest = false;
				this.weedlevel = 0;
				Task13.Sleep( 5 );
				this.update_icon();
				this.visible_message( "<span class='warning'>The mutated weeds in " + this + " spawned a " + this.myseed.plantname + "!</span>" );
			} else {
				Task13.User.WriteMsg( "The few weeds in " + this + " seem to react, but only for a moment..." );
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void mutatespecie(  ) {
			dynamic oldPlantName = null;
			dynamic mutantseed = null;

			
			if ( !this.planted || this.dead ) {
				return;
			}
			oldPlantName = this.myseed.plantname;

			if ( this.myseed.mutatelist.len > 0 ) {
				mutantseed = Rand13.PickFromTable( this.myseed.mutatelist );
				GlobalFuncs.qdel( this.myseed );
				this.myseed = Lang13.Call( mutantseed );
			} else {
				return;
			}
			this.dead = false;
			this.hardmutate();
			this.planted = true;
			this.age = 0;
			this.health = Convert.ToDouble( this.myseed.endurance );
			this.lastcycle = Game13.time;
			this.harvest = false;
			this.weedlevel = 0;
			Task13.Sleep( 5 );
			this.update_icon();
			this.visible_message( "<span class='warning'>" + oldPlantName + " suddenly mutated into " + this.myseed.plantname + "!</span>" );
			return;
		}

		// Function from file: hydroponics.dm
		public void hardmutate(  ) {
			this.mutate( 4, 10, 2, 4, 50 );
			return;
		}

		// Function from file: hydroponics.dm
		public void mutate( int? lifemut = null, int? endmut = null, int? productmut = null, int? yieldmut = null, int? potmut = null ) {
			lifemut = lifemut ?? 2;
			endmut = endmut ?? 5;
			productmut = productmut ?? 1;
			yieldmut = yieldmut ?? 2;
			potmut = potmut ?? 25;

			
			if ( !this.planted ) {
				return;
			}
			this.adjustSLife( Rand13.Int( -( lifemut ??0), lifemut ??0 ) );
			this.adjustSEnd( Rand13.Int( -( endmut ??0), endmut ??0 ) );
			this.adjustSProduct( Rand13.Int( -( productmut ??0), productmut ??0 ) );
			this.adjustSYield( Rand13.Int( -( yieldmut ??0), yieldmut ??0 ) );
			this.adjustSPot( Rand13.Int( -( potmut ??0), potmut ??0 ) );
			return;
		}

		// Function from file: hydroponics.dm
		public void weedinvasion(  ) {
			string oldPlantName = null;

			this.dead = false;

			if ( Lang13.Bool( this.myseed ) ) {
				oldPlantName = this.myseed.plantname;
				GlobalFuncs.qdel( this.myseed );
			} else {
				oldPlantName = "Empty tray";
			}

			dynamic _a = Rand13.Int( 1, 18 ); // Was a switch-case, sorry for the mess.
			if ( 16<=_a&&_a<=18 ) {
				this.myseed = new Obj_Item_Seeds_Reishimycelium();
			} else if ( 14<=_a&&_a<=15 ) {
				this.myseed = new Obj_Item_Seeds_Nettleseed();
			} else if ( 12<=_a&&_a<=13 ) {
				this.myseed = new Obj_Item_Seeds_Harebell();
			} else if ( 10<=_a&&_a<=11 ) {
				this.myseed = new Obj_Item_Seeds_Amanitamycelium();
			} else if ( 8<=_a&&_a<=9 ) {
				this.myseed = new Obj_Item_Seeds_Chantermycelium();
			} else if ( 6<=_a&&_a<=7 ) {
				this.myseed = new Obj_Item_Seeds_Towermycelium();
			} else if ( 4<=_a&&_a<=5 ) {
				this.myseed = new Obj_Item_Seeds_Plumpmycelium();
			} else {
				this.myseed = new Obj_Item_Seeds_Weeds();
			}
			this.planted = true;
			this.age = 0;
			this.health = Convert.ToDouble( this.myseed.endurance );
			this.lastcycle = Game13.time;
			this.harvest = false;
			this.weedlevel = 0;
			this.pestlevel = 0;
			this.update_icon();
			this.visible_message( "<span class='info'>" + oldPlantName + " overtaken by " + this.myseed.plantname + ".</span>" );
			return;
		}

		// Function from file: hydroponics.dm
		public void UpdateDescription(  ) {
			this.desc = null;

			if ( this.planted ) {
				this.desc = "" + this + " has <span class='info'>" + this.myseed.plantname + "</span> planted.";

				if ( this.dead ) {
					this.desc += " It's dead.";
				} else if ( this.harvest ) {
					this.desc += " It's ready to harvest.";
				}
			}
			return;
		}

		// Function from file: hydroponics.dm
		public void nutrimentMutation(  ) {
			
			if ( this.mutmod == 0 ) {
				return;
			}

			if ( this.mutmod == 1 ) {
				
				if ( Rand13.PercentChance( 80 ) ) {
					this.mutate();
				} else if ( Rand13.PercentChance( 75 ) ) {
					this.hardmutate();
				}
				return;
			}

			if ( this.mutmod == 2 ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					this.mutate();
				} else if ( Rand13.PercentChance( 50 ) ) {
					this.hardmutate();
				} else if ( Rand13.PercentChance( 50 ) ) {
					this.mutatespecie();
				}
				return;
			}
			return;
		}

		// Function from file: hydroponics.dm
		public ByTable FindConnected(  ) {
			ByTable connected = null;
			ByTable processing_atoms = null;
			Ent_Static a = null;
			dynamic step_dir = null;
			dynamic h = null;

			connected = new ByTable();
			processing_atoms = new ByTable(new object [] { this });

			while (processing_atoms.len != 0) {
				a = processing_atoms[1];

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					step_dir = _a;
					
					h = Lang13.FindIn( typeof(Obj_Machinery_Hydroponics), Map13.GetStep( a, Convert.ToInt32( step_dir ) ) );

					if ( Lang13.Bool( h ) && h.anchored == 2 && h.density && !connected.Contains( h ) && !processing_atoms.Contains( h ) ) {
						processing_atoms.Add( h );
					}
				}
				processing_atoms.Remove( a );
				connected.Add( a );
			}
			return connected;
		}

		// Function from file: hydroponics.dm
		public override dynamic Destroy(  ) {
			
			if ( Lang13.Bool( this.myseed ) ) {
				GlobalFuncs.qdel( this.myseed );
				this.myseed = null;
			}
			return base.Destroy();
		}

	}

}