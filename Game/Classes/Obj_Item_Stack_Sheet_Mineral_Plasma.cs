// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Stack_Sheet_Mineral_Plasma : Obj_Item_Stack_Sheet_Mineral {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.singular_name = "plasma sheet";
			this.origin_tech = "plasmatech=2;materials=2";
			this.sheettype = "plasma";
			this.burn_state = 0;
			this.burntime = 5;
			this.materials = new ByTable().Set( "$plasma", 2000 );
			this.icon_state = "sheet-plasma";
		}

		// Function from file: mineral.dm
		public Obj_Item_Stack_Sheet_Mineral_Plasma ( dynamic loc = null, int? amount = null ) : base( (object)(loc), amount ) {
			this.recipes = GlobalVars.plasma_recipes;
			this.pixel_x = Rand13.Int( 0, 4 ) - 4;
			this.pixel_y = Rand13.Int( 0, 4 ) - 4;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: mineral.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			this.atmos_spawn_air( 5, ( this.amount ??0) * 10 );
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: mineral.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( ((Obj_Item)A).is_hot() > 300 ) {
				GlobalFuncs.message_admins( new Txt( "Plasma sheets ignited by " ).item( GlobalFuncs.key_name_admin( user ) ).str( "(<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( user ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( user ).str( "'>FLW</A>) in (" ).item( this.x ).str( "," ).item( this.y ).str( "," ).item( this.z ).str( " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( this.x ).str( ";Y=" ).item( this.y ).str( ";Z=" ).item( this.z ).str( "'>JMP</a>)" ).ToString() );
				GlobalFuncs.log_game( "Plasma sheets ignited by " + GlobalFuncs.key_name( user ) + " in (" + this.x + "," + this.y + "," + this.z + ")" );
				this.fire_act();
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

	}

}