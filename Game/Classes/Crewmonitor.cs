// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Crewmonitor : Game_Data {

		public ByTable jobs = null;
		public ByTable interfaces = null;
		public ByTable data = null;

		// Function from file: crew.dm
		public Crewmonitor (  ) {
			ByTable jobs = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			jobs = new ByTable();
			jobs["Captain"] = 0;
			jobs["Head of Personnel"] = 50;
			jobs["Head of Security"] = 10;
			jobs["Warden"] = 11;
			jobs["Security Officer"] = 12;
			jobs["Detective"] = 13;
			jobs["Chief Medical Officer"] = 20;
			jobs["Chemist"] = 21;
			jobs["Geneticist"] = 22;
			jobs["Virologist"] = 23;
			jobs["Medical Doctor"] = 24;
			jobs["Research Director"] = 30;
			jobs["Scientist"] = 31;
			jobs["Roboticist"] = 32;
			jobs["Chief Engineer"] = 40;
			jobs["Station Engineer"] = 41;
			jobs["Atmospheric Technician"] = 42;
			jobs["Quartermaster"] = 51;
			jobs["Shaft Miner"] = 52;
			jobs["Cargo Technician"] = 53;
			jobs["Bartender"] = 61;
			jobs["Cook"] = 62;
			jobs["Botanist"] = 63;
			jobs["Librarian"] = 64;
			jobs["Chaplain"] = 65;
			jobs["Clown"] = 66;
			jobs["Mime"] = 67;
			jobs["Janitor"] = 68;
			jobs["Lawyer"] = 69;
			jobs["Admiral"] = 200;
			jobs["Centcom Commander"] = 210;
			jobs["Custodian"] = 211;
			jobs["Medical Officer"] = 212;
			jobs["Research Officer"] = 213;
			jobs["Emergency Response Team Commander"] = 220;
			jobs["Security Response Officer"] = 221;
			jobs["Engineer Response Officer"] = 222;
			jobs["Medical Response Officer"] = 223;
			jobs["Assistant"] = 999;
			this.jobs = jobs;
			this.interfaces = new ByTable();
			this.data = new ByTable();
			GlobalFuncs.register_asset( "crewmonitor.js", "crew.js" );
			GlobalFuncs.register_asset( "crewmonitor.css", "crew.css" );
			return;
		}

		// Function from file: crew.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob_Living_Silicon_Ai AI = null;
			double? x = null;
			double? y = null;
			Tile tile = null;
			dynamic C = null;
			Ent_Static current_loc = null;

			
			if ( hsrc is HtmlInterfaceClient ) {
				
				if ( Lang13.Bool( hsrc ) && Lang13.Bool( hsrc.client ) && Lang13.Bool( hsrc.client.mob ) && hsrc.client.mob is Mob_Living_Silicon_Ai ) {
					AI = hsrc.client.mob;

					dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
					if ( _a=="select_person" ) {
						AI.__CallVerb("track", href_list["name"] );
					} else if ( _a=="select_position" ) {
						x = String13.ParseNumber( href_list["x"] );
						y = String13.ParseNumber( href_list["y"] );
						tile = Map13.GetTile( ((int)( x ??0 )), ((int)( y ??0 )), AI.z );
						C = Lang13.FindIn( typeof(Obj_Machinery_Camera), Map13.FetchInRange( tile, 5 ) );

						if ( !Lang13.Bool( C ) ) {
							C = Lang13.FindIn( typeof(Obj_Machinery_Camera), GlobalFuncs.ultra_range( 10, tile ) );
						}

						if ( !Lang13.Bool( C ) ) {
							C = Lang13.FindIn( typeof(Obj_Machinery_Camera), GlobalFuncs.ultra_range( 15, tile ) );
						}

						if ( Lang13.Bool( C ) ) {
							current_loc = AI.eyeobj.loc;
							Task13.Schedule( Num13.MinInt( 30, ((int)( Map13.GetDistance( GlobalFuncs.get_turf( C ), AI.eyeobj ) / 4 )) ), (Task13.Closure)(() => {
								
								if ( AI != null && AI.eyeobj != null && current_loc == AI.eyeobj.loc ) {
									AI.switchCamera( C );
								}
								return;
							}));
						}
					}
				}
			}
			return null;
		}

		// Function from file: crew.dm
		public void sendResources( Client client = null ) {
			GlobalFuncs.send_asset( client, "crewmonitor.js" );
			GlobalFuncs.send_asset( client, "crewmonitor.css" );
			GlobalVars.SSminimap.sendMinimaps( client );
			return;
		}

		// Function from file: crew.dm
		public void queueUpdate( int z = 0 ) {
			GlobalFuncs.addtimer( GlobalVars.crewmonitor, "update", 5, GlobalVars.TRUE, z );
			return;
		}

		// Function from file: crew.dm
		public bool? hiIsValidClient( dynamic hclient = null, dynamic hi = null ) {
			dynamic z = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.interfaces )) {
				z = _a;
				

				if ( this.interfaces[z] == hi ) {
					break;
				}
			}

			if ( Lang13.Bool( hclient.client.mob ) && Lang13.Bool( hclient.client.mob.stat ) == false && Lang13.DoubleNullable( hclient.client.mob.z ) == String13.ParseNumber( z ) ) {
				
				if ( hclient.client.mob is Mob_Living_Silicon_Ai ) {
					return GlobalVars.TRUE;
				} else if ( hclient.client.mob is Mob_Living_Silicon_Robot ) {
					return Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Computer_Crew), Map13.FetchInRange( hclient.client.mob, Game13.view ) ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Device_SensorDevice), hclient.client.mob.contents ) );
				} else {
					return Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Computer_Crew), Map13.FetchInRange( hclient.client.mob, 1 ) ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Device_SensorDevice), hclient.client.mob.contents ) );
				}
			} else {
				return GlobalVars.FALSE;
			}
			return null;
		}

		// Function from file: crew.dm
		public void update( int? z = null, bool? ignore_unused = null ) {
			ignore_unused = ignore_unused ?? GlobalVars.FALSE;

			HtmlInterface hi = null;
			ByTable results = null;
			dynamic U = null;
			dynamic I = null;
			dynamic pos = null;
			int ijob = 0;
			dynamic name = null;
			dynamic assignment = null;
			double? dam1 = null;
			double? dam2 = null;
			double? dam3 = null;
			double? dam4 = null;
			dynamic area = null;
			int? pos_x = null;
			int? pos_y = null;
			string life_status = null;
			Mob_Living_Carbon_Human H = null;
			dynamic player_area = null;

			
			if ( Lang13.Bool( this.interfaces["" + z] ) ) {
				hi = this.interfaces["" + z];

				if ( ignore_unused == true || hi.isUsed() == true ) {
					results = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
						H = _a;
						

						if ( ( H.z == 0 || H.z == z ) && H.w_uniform is Obj_Item_Clothing_Under ) {
							U = H.w_uniform;

							if ( U.has_sensor != 0 && U.sensor_mode != 0 ) {
								pos = ( H.z == 0 || U.sensor_mode == 3 ? GlobalFuncs.get_turf( H ) : null );

								if ( H.z == 0 && ( !Lang13.Bool( pos ) || Lang13.IntNullable( pos.z ) != z ) ) {
									continue;
								}
								I = ( Lang13.Bool( H.wear_id ) ? ((Obj_Item)H.wear_id).GetID() : null );

								if ( Lang13.Bool( I ) ) {
									name = I.registered_name;
									assignment = I.assignment;
									ijob = Convert.ToInt32( this.jobs[I.assignment] );
								} else {
									name = "<i>Unknown</i>";
									assignment = "";
									ijob = 80;
								}

								if ( U.sensor_mode >= 1 ) {
									life_status = ( !( H.stat != 0 ) ? "true" : "false" );
								} else {
									life_status = null;
								}

								if ( U.sensor_mode >= 2 ) {
									dam1 = Num13.Round( Convert.ToDouble( H.getOxyLoss() ), 1 );
									dam2 = Num13.Round( Convert.ToDouble( H.getToxLoss() ), 1 );
									dam3 = Num13.Round( H.getFireLoss(), 1 );
									dam4 = Num13.Round( H.getBruteLoss(), 1 );
								} else {
									dam1 = null;
									dam2 = null;
									dam3 = null;
									dam4 = null;
								}

								if ( U.sensor_mode >= 3 ) {
									
									if ( !Lang13.Bool( pos ) ) {
										pos = GlobalFuncs.get_turf( H );
									}
									player_area = GlobalFuncs.get_area( H );
									area = GlobalFuncs.format_text( player_area.name );
									pos_x = Lang13.IntNullable( pos.x );
									pos_y = Lang13.IntNullable( pos.y );
								} else {
									area = null;
									pos_x = null;
									pos_y = null;
								}
								results[++results.len] = new ByTable(new object [] { name, assignment, ijob, life_status, dam1, dam2, dam3, dam4, area, pos_x, pos_y, H.can_track( null ) });
							}
						}
					}
					this.data = results;
					this.updateFor( null, hi, z );
				}
			}
			return;
		}

		// Function from file: crew.dm
		public void updateFor( dynamic hclient_or_mob = null, HtmlInterface hi = null, int? z = null ) {
			ByTable L = null;

			hi.callJavaScript( "clearAll", null, hclient_or_mob );

			foreach (dynamic _a in Lang13.Enumerate( this.data, typeof(ByTable) )) {
				L = _a;
				
				hi.callJavaScript( "add", L, hclient_or_mob );
			}
			hi.callJavaScript( "onAfterUpdate", null, hclient_or_mob );
			return;
		}

		// Function from file: crew.dm
		public void show( dynamic mob = null, int? z = null ) {
			HtmlInterface hi = null;

			
			if ( Lang13.Bool( mob.client ) ) {
				this.sendResources( mob.client );
			}

			if ( !Lang13.Bool( z ) ) {
				z = Lang13.IntNullable( mob.z );
			}

			if ( ( z ??0) > 0 && this.interfaces != null ) {
				
				if ( !Lang13.Bool( this.interfaces["" + z] ) ) {
					this.interfaces["" + z] = new HtmlInterface_Nanotrasen( this, "Crew Monitoring", 900, 540, "<link rel=\"stylesheet\" type=\"text/css\" href=\"crewmonitor.css\" /><script type=\"text/javascript\">var z = " + z + "; var tile_size = " + Game13.icon_size + "; var maxx = " + Game13.map_size_x + "; var maxy = " + Game13.map_size_y + ";</script><script type=\"text/javascript\" src=\"crewmonitor.js\"></script>" );
					hi = this.interfaces["" + z];
					hi.updateContent( "content", "<div id=\"minimap\"><a href=\"javascript:zoomIn();\" class=\"zoom in\">+</a><a href=\"javascript:zoomOut();\" class=\"zoom\">-</a></div><div id=\"textbased\"></div>" );
					this.update( z, GlobalVars.TRUE );
				} else {
					hi = this.interfaces["" + z];
				}
				Interface13.CacheBrowseResource( mob, new File( "code/game/machinery/computer/crew.js" ), "crew.js" );
				Interface13.CacheBrowseResource( mob, new File( "code/game/machinery/computer/crew.css" ), "crew.css" );
				hi = this.interfaces["" + z];
				hi.show( mob );
				this.updateFor( mob, hi, z );
			}
			return;
		}

		// Function from file: crew.dm
		public override dynamic Destroy(  ) {
			HtmlInterface hi = null;

			
			if ( this.interfaces != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.interfaces, typeof(HtmlInterface) )) {
					hi = _a;
					
					GlobalFuncs.qdel( hi );
				}
				this.interfaces = null;
			}
			return base.Destroy();
		}

	}

}