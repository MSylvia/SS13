// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Storage : Obj_Item_Weapon {

		public bool silent = false;
		public ByTable can_hold = new ByTable();
		public ByTable cant_hold = new ByTable();
		public ByTable is_seeing = new ByTable();
		public int max_w_class = 2;
		public double max_combined_w_class = 14;
		public double? storage_slots = 7;
		public Obj_Screen_Storage boxes = null;
		public Obj_Screen_Close closer = null;
		public bool use_to_pickup = false;
		public bool display_contents_with_number = false;
		public bool allow_quick_empty = false;
		public bool allow_quick_gather = false;
		public int collection_mode = 1;
		public string preposition = "in";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/storage.dmi";
		}

		// Function from file: storage.dm
		public Obj_Item_Weapon_Storage ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.allow_quick_empty ) {
				this.verbs.Add( typeof(Obj_Item_Weapon_Storage).GetMethod( "quick_empty" ) );
			} else {
				this.verbs.Remove( typeof(Obj_Item_Weapon_Storage).GetMethod( "quick_empty" ) );
			}

			if ( this.allow_quick_gather ) {
				this.verbs.Add( typeof(Obj_Item_Weapon_Storage).GetMethod( "toggle_gathering_mode" ) );
			} else {
				this.verbs.Remove( typeof(Obj_Item_Weapon_Storage).GetMethod( "toggle_gathering_mode" ) );
			}
			this.boxes = new Obj_Screen_Storage();
			this.boxes.name = "storage";
			this.boxes.master = this;
			this.boxes.icon_state = "block";
			this.boxes.screen_loc = "7,7 to 10,8";
			this.boxes.layer = 19;
			this.closer = new Obj_Screen_Close();
			this.closer.master = this;
			this.closer.icon_state = "x";
			this.closer.layer = 20;
			this.orient2hud();
			return;
		}

		// Function from file: storage.dm
		public override void handle_atom_del( Ent_Dynamic A = null ) {
			
			if ( this.contents.Contains( A ) ) {
				Task13.User = null;
				this.remove_from_storage( A, this.loc );
			}
			return;
		}

		// Function from file: storage.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( ((Mob)user).get_active_hand() == this ) {
				
				if ( this.verbs.Find( typeof(Obj_Item_Weapon_Storage).GetMethod( "quick_empty" ) ) != 0 ) {
					this.__CallVerb("Empty Contents" );
				}
			}
			return null;
		}

		// Function from file: storage.dm
		public override double emp_act( int severity = 0 ) {
			Obj O = null;

			
			if ( !( this.loc is Mob_Living ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					O = _a;
					
					O.emp_act( severity );
				}
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: storage.dm
		public override dynamic Destroy(  ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				
				O.mouse_opacity = Convert.ToInt32( Lang13.Initial( O, "mouse_opacity" ) );
			}
			this.close_all();
			GlobalFuncs.qdel( this.boxes );
			GlobalFuncs.qdel( this.closer );
			return base.Destroy();
		}

		// Function from file: storage.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: storage.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic H = null;
			dynamic M = null;

			GlobalFuncs.playsound( this.loc, "rustle", 50, 1, -5 );

			if ( a is Mob_Living_Carbon_Human ) {
				H = a;

				if ( H.l_store == this && !Lang13.Bool( ((Mob)H).get_active_hand() ) ) {
					((Mob)H).put_in_hands( this );
					H.l_store = null;
					return null;
				}

				if ( H.r_store == this && !Lang13.Bool( ((Mob)H).get_active_hand() ) ) {
					((Mob)H).put_in_hands( this );
					H.r_store = null;
					return null;
				}
			}
			this.orient2hud( a );

			if ( this.loc == a ) {
				
				if ( Lang13.Bool( a.s_active ) ) {
					a.s_active.close( a );
				}
				this.show_to( a );
			} else {
				base.attack_hand( (object)(a), b, c );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( null, 1 ) )) {
					M = _a;
					

					if ( M.s_active == this ) {
						this.close( M );
					}
				}
			}
			this.add_fingerprint( a );
			return null;
		}

		// Function from file: storage.dm
		public override bool dropped( dynamic user = null ) {
			return false;
		}

		// Function from file: storage.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( user is Mob_Living_Silicon_Robot ) {
				user.WriteMsg( "<span class='warning'>You're a robot. No.</span>" );
				return 0;
			}

			if ( !this.can_be_inserted( A, false, user ) ) {
				return 0;
			}
			this.handle_item_insertion( A, false, user );
			return 1;
		}

		// Function from file: storage.dm
		public override void empty_object_contents( bool? burn = null, Ent_Static new_loc = null ) {
			Obj_Item Item = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item) )) {
				Item = _a;
				
				this.remove_from_storage( Item, this.loc, burn );
			}
			return;
		}

		// Function from file: storage.dm
		public override bool throw_at( dynamic target = null, double? range = null, dynamic speed = null, dynamic thrower = null, bool? spin = null, bool? diagonals_first = null ) {
			this.close_all();
			return base.throw_at( (object)(target), range, (object)(speed), (object)(thrower), spin, diagonals_first );
		}

		// Function from file: storage.dm
		public override bool storage_contents_dump_act( Obj_Item_Weapon_Storage src_object = null, Mob user = null ) {
			Obj_Item I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( src_object, typeof(Obj_Item) )) {
				I = _a;
				

				if ( user.s_active != src_object ) {
					
					if ( I.on_found( user ) ) {
						return false;
					}
				}

				if ( this.can_be_inserted( I, false, user ) ) {
					src_object.remove_from_storage( I, this );
				}
			}
			this.orient2hud( user );
			src_object.orient2hud( user );

			if ( user.s_active != null ) {
				user.s_active.close( user );
				user.s_active.show_to( user );
			}
			return true;
		}

		// Function from file: storage.dm
		public void do_quick_empty(  ) {
			dynamic T = null;
			Obj_Item I = null;

			T = GlobalFuncs.get_turf( this );

			if ( Task13.User != null ) {
				this.hide_from( Task13.User );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item) )) {
				I = _a;
				
				this.remove_from_storage( I, T );
			}
			return;
		}

		// Function from file: storage.dm
		public virtual bool remove_from_storage( dynamic W = null, dynamic new_location = null, bool? burn = null ) {
			burn = burn ?? false;

			Obj_Item_Weapon_Storage F = null;
			dynamic M = null;
			Ent_Static M2 = null;

			
			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( this is Obj_Item_Weapon_Storage_Fancy ) {
				F = this;
				F.update_icon( 1 );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.can_see_contents() )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					M.client.screen -= W;
				}
			}

			if ( this.loc is Mob ) {
				M2 = this.loc;
				((Obj_Item)W).dropped( M2 );
			}
			W.layer = Lang13.Initial( W, "layer" );
			W.loc = new_location;

			if ( Task13.User != null ) {
				this.orient2hud( Task13.User );

				if ( Task13.User.s_active != null ) {
					Task13.User.s_active.show_to( Task13.User );
				}
			}

			if ( Lang13.Bool( W.maptext ) ) {
				W.maptext = "";
			}
			((Obj_Item)W).on_exit_storage( this );
			this.update_icon();
			W.mouse_opacity = Lang13.Initial( W, "mouse_opacity" );

			if ( burn == true ) {
				((Ent_Static)W).fire_act();
			}
			return true;
		}

		// Function from file: storage.dm
		public virtual bool handle_item_insertion( dynamic W = null, bool? prevent_warning = null, dynamic user = null ) {
			prevent_warning = prevent_warning ?? false;

			dynamic M = null;
			dynamic M2 = null;

			
			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( Task13.User != null ) {
				
				if ( !Task13.User.unEquip( W ) ) {
					return false;
				}
			}

			if ( this.silent ) {
				prevent_warning = true;
			}
			W.loc = this;
			((Obj_Item)W).on_enter_storage( this );

			if ( Task13.User != null ) {
				
				if ( Task13.User.client != null && Task13.User.s_active != this ) {
					Task13.User.client.screen.Remove( W );
				}
				this.add_fingerprint( Task13.User );

				if ( !( prevent_warning == true ) && !( W is Obj_Item_Weapon_Gun_Energy_KineticAccelerator_Crossbow ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, Task13.User ) )) {
						M = _a;
						

						if ( M == Task13.User ) {
							Task13.User.WriteMsg( "<span class='notice'>You put " + W + " " + this.preposition + "to " + this + ".</span>" );
						} else if ( Map13.GetDistance( M, Task13.User ) <= 1 ) {
							M.show_message( "<span class='notice'>" + Task13.User + " puts " + W + " " + this.preposition + "to " + this + ".</span>", 1 );
						} else if ( Lang13.Bool( W ) && Convert.ToDouble( W.w_class ) >= 3 ) {
							M.show_message( "<span class='notice'>" + Task13.User + " puts " + W + " " + this.preposition + "to " + this + ".</span>", 1 );
						}
					}
				}
				this.orient2hud( Task13.User );

				foreach (dynamic _b in Lang13.Enumerate( this.can_see_contents() )) {
					M2 = _b;
					
					this.show_to( M2 );
				}
			}
			W.mouse_opacity = 2;
			this.update_icon();
			return true;
		}

		// Function from file: storage.dm
		public virtual bool can_be_inserted( dynamic W = null, bool? stop_messages = null, dynamic user = null ) {
			stop_messages = stop_messages ?? false;

			bool ok = false;
			dynamic A = null;
			dynamic A2 = null;
			dynamic sum_w_class = null;
			Obj_Item I = null;

			
			if ( !( W is Obj_Item ) || Lang13.Bool( W.flags & 128 ) ) {
				return false;
			}

			if ( this.loc == W ) {
				return false;
			}

			if ( this.contents.len >= ( this.storage_slots ??0) ) {
				
				if ( !( stop_messages == true ) ) {
					Task13.User.WriteMsg( "<span class='warning'>" + this + " is full, make some space!</span>" );
				}
				return false;
			}

			if ( this.can_hold.len != 0 ) {
				ok = false;

				foreach (dynamic _a in Lang13.Enumerate( this.can_hold )) {
					A = _a;
					

					if ( Lang13.Bool( A.IsInstanceOfType( W ) ) ) {
						ok = true;
						break;
					}
				}

				if ( !ok ) {
					
					if ( !( stop_messages == true ) ) {
						Task13.User.WriteMsg( "<span class='warning'>" + this + " cannot hold " + W + "!</span>" );
					}
					return false;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.cant_hold )) {
				A2 = _b;
				

				if ( Lang13.Bool( A2.IsInstanceOfType( W ) ) ) {
					
					if ( !( stop_messages == true ) ) {
						Task13.User.WriteMsg( "<span class='warning'>" + this + " cannot hold " + W + "!</span>" );
					}
					return false;
				}
			}

			if ( Convert.ToDouble( W.w_class ) > this.max_w_class ) {
				
				if ( !( stop_messages == true ) ) {
					Task13.User.WriteMsg( "<span class='warning'>" + W + " is too big for " + this + "!</span>" );
				}
				return false;
			}
			sum_w_class = W.w_class;

			foreach (dynamic _c in Lang13.Enumerate( this.contents, typeof(Obj_Item) )) {
				I = _c;
				
				sum_w_class += I.w_class;
			}

			if ( Convert.ToDouble( sum_w_class ) > this.max_combined_w_class ) {
				
				if ( !( stop_messages == true ) ) {
					Task13.User.WriteMsg( "<span class='warning'>" + W + " won't fit in " + this + ", make some space!</span>" );
				}
				return false;
			}

			if ( Convert.ToDouble( W.w_class ) >= Convert.ToDouble( this.w_class ) && W is Obj_Item_Weapon_Storage ) {
				
				if ( !( this is Obj_Item_Weapon_Storage_Backpack_Holding ) ) {
					
					if ( !( stop_messages == true ) ) {
						Task13.User.WriteMsg( "<span class='warning'>" + this + " cannot hold " + W + " as it's a storage item of the same size!</span>" );
					}
					return false;
				}
			}

			if ( Lang13.Bool( W.flags & 2 ) ) {
				Task13.User.WriteMsg( new Txt( "<span class='warning'>" ).the( W ).item().str( " is stuck to your hand, you can't put it in " ).the( this ).item().str( "!</span>" ).ToString() );
				return false;
			}
			return true;
		}

		// Function from file: storage.dm
		public virtual void orient2hud( dynamic user = null ) {
			int adjusted_contents = 0;
			ByTable numbered_contents = null;
			Obj_Item I = null;
			bool found = false;
			NumberedDisplay ND = null;
			int row_num = 0;
			int col_count = 0;

			adjusted_contents = this.contents.len;

			if ( this.display_contents_with_number ) {
				numbered_contents = new ByTable();
				adjusted_contents = 0;

				foreach (dynamic _b in Lang13.Enumerate( this.contents, typeof(Obj_Item) )) {
					I = _b;
					
					found = false;

					foreach (dynamic _a in Lang13.Enumerate( numbered_contents, typeof(NumberedDisplay) )) {
						ND = _a;
						

						if ( ND.sample_object.type == I.type ) {
							ND.number++;
							found = true;
							break;
						}
					}

					if ( !found ) {
						adjusted_contents++;
						numbered_contents.Add( new NumberedDisplay( I ) );
					}
				}
			}
			row_num = 0;
			col_count = Num13.MinInt( 7, ((int)( this.storage_slots ??0 )) ) - 1;

			if ( adjusted_contents > 7 ) {
				row_num = Num13.Floor( ( adjusted_contents - 1 ) / 7 );
			}
			this.standard_orient_objs( row_num, col_count, numbered_contents );
			return;
		}

		// Function from file: storage.dm
		public void standard_orient_objs( int rows = 0, int cols = 0, ByTable display_contents = null ) {
			int cx = 0;
			int cy = 0;
			NumberedDisplay ND = null;
			Obj O = null;

			cx = 4;
			cy = rows + 2;
			this.boxes.screen_loc = "4:16,2:16 to " + ( cols + 4 ) + ":16," + ( rows + 2 ) + ":16";

			if ( this.display_contents_with_number ) {
				
				foreach (dynamic _a in Lang13.Enumerate( display_contents, typeof(NumberedDisplay) )) {
					ND = _a;
					
					ND.sample_object.mouse_opacity = 2;
					ND.sample_object.screen_loc = "" + cx + ":16," + cy + ":16";
					ND.sample_object.maptext = "<font color='white'>" + ( ( ND.number ??0) > 1 ? "" + ND.number : "" ) + "</font>";
					ND.sample_object.layer = 20;
					cx++;

					if ( cx > cols + 4 ) {
						cx = 4;
						cy--;
					}
				}
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					O = _b;
					
					O.mouse_opacity = 2;
					O.screen_loc = "" + cx + ":16," + cy + ":16";
					O.maptext = "";
					O.layer = 20;
					cx++;

					if ( cx > cols + 4 ) {
						cx = 4;
						cy--;
					}
				}
			}
			this.closer.screen_loc = "" + ( cols + 5 ) + ":16,2:16";
			return;
		}

		// Function from file: storage.dm
		public void orient_objs( dynamic tx = null, dynamic ty = null, int mx = 0, dynamic my = null ) {
			int cx = 0;
			int cy = 0;
			Obj O = null;

			cx = Convert.ToInt32( tx );
			cy = Convert.ToInt32( ty );
			this.boxes.screen_loc = "" + tx + ":," + ty + " to " + mx + "," + my;

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				
				O.screen_loc = "" + cx + "," + cy;
				O.layer = 20;
				cx++;

				if ( cx > mx ) {
					cx = Convert.ToInt32( tx );
					cy--;
				}
			}
			this.closer.screen_loc = "" + ( mx + 1 ) + "," + my;
			return;
		}

		// Function from file: storage.dm
		public bool close_all(  ) {
			bool _default = false;

			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.can_see_contents() )) {
				M = _a;
				
				this.close( M );
				_default = true;
			}
			return _default;
		}

		// Function from file: storage.dm
		public void close( dynamic user = null ) {
			this.hide_from( user );
			user.s_active = null;
			return;
		}

		// Function from file: storage.dm
		public ByTable can_see_contents(  ) {
			ByTable cansee = null;
			dynamic M = null;

			cansee = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.is_seeing )) {
				M = _a;
				

				if ( M.s_active == this && Lang13.Bool( M.client ) ) {
					cansee.Or( M );
				} else {
					this.is_seeing.Remove( M );
				}
			}
			return cansee;
		}

		// Function from file: storage.dm
		public void hide_from( dynamic user = null ) {
			
			if ( !Lang13.Bool( user.client ) ) {
				return;
			}
			user.client.screen -= this.boxes;
			user.client.screen -= this.closer;
			user.client.screen -= this.contents;

			if ( user.s_active == this ) {
				user.s_active = null;
			}
			this.is_seeing.Remove( user );
			return;
		}

		// Function from file: storage.dm
		public virtual void show_to( dynamic user = null ) {
			Obj_Item I = null;

			
			if ( user.s_active != this && Lang13.Bool( user.stat ) == false ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
					I = _a;
					

					if ( I.on_found( user ) ) {
						return;
					}
				}
			}

			if ( Lang13.Bool( user.s_active ) ) {
				((Obj_Item_Weapon_Storage)user.s_active).hide_from( user );
			}
			user.client.screen -= this.boxes;
			user.client.screen -= this.closer;
			user.client.screen -= this.contents;
			user.client.screen += this.boxes;
			user.client.screen += this.closer;
			user.client.screen += this.contents;
			user.s_active = this;
			this.is_seeing.Or( user );
			return;
		}

		// Function from file: storage.dm
		public ByTable return_inv(  ) {
			ByTable L = null;
			Obj_Item_Weapon_Storage S = null;

			L = new ByTable();
			L.Add( this.contents );

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Storage) )) {
				S = _a;
				
				L.Add( S.return_inv() );
			}
			return L;
		}

		// Function from file: storage.dm
		public virtual bool content_can_dump( dynamic dest_object = null, Mob user = null ) {
			
			if ( this.Adjacent( user ) && ((Ent_Static)dest_object).Adjacent( user ) ) {
				
				if ( ((Ent_Static)dest_object).storage_contents_dump_act( this, user ) ) {
					GlobalFuncs.playsound( this.loc, "rustle", 50, 1, -5 );
					return true;
				}
			}
			return false;
		}

		// Function from file: storage.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			Mob M = null;

			
			if ( Task13.User is Mob_Living_Carbon || Task13.User is Mob_Living_SimpleAnimal_Drone ) {
				M = Task13.User;

				if ( !Lang13.Bool( over ) ) {
					return null;
				}

				if ( Task13.User.loc is Obj_Mecha ) {
					return null;
				}

				if ( over == M && this.Adjacent( M ) ) {
					this.orient2hud( M );

					if ( M.s_active != null ) {
						M.s_active.close( M );
					}
					this.show_to( M );
					return null;
				}

				if ( !M.restrained() && !( M.stat != 0 ) ) {
					
					if ( !( over is Obj_Screen ) ) {
						return this.content_can_dump( over, M );
					}

					if ( this.loc != Task13.User || this.loc != null && this.loc.loc == Task13.User ) {
						return null;
					}
					GlobalFuncs.playsound( this.loc, "rustle", 50, 1, -5 );

					dynamic _a = over.name; // Was a switch-case, sorry for the mess.
					if ( _a=="r_hand" ) {
						
						if ( !M.unEquip( this ) ) {
							return null;
						}
						M.put_in_r_hand( this );
					} else if ( _a=="l_hand" ) {
						
						if ( !M.unEquip( this ) ) {
							return null;
						}
						M.put_in_l_hand( this );
					}
					this.add_fingerprint( Task13.User );
				}
			}
			return null;
		}

		// Function from file: observer.dm
		public override void attack_ghost( Mob user = null ) {
			this.orient2hud( user );
			this.show_to( user );
			return;
		}

		// Function from file: storage.dm
		[Verb]
		[VerbInfo( name: "Empty Contents", group: "Object" )]
		public virtual void quick_empty(  ) {
			
			if ( !( Task13.User is Mob_Living_Carbon_Human ) && this.loc != Task13.User || Task13.User.stat != 0 || Task13.User.restrained() || !Task13.User.canmove ) {
				return;
			}
			this.do_quick_empty();
			return;
		}

		// Function from file: storage.dm
		[Verb]
		[VerbInfo( name: "Switch Gathering Method", group: "Object" )]
		public void toggle_gathering_mode(  ) {
			
			if ( Task13.User.stat != 0 || !Task13.User.canmove || Task13.User.restrained() ) {
				return;
			}
			this.collection_mode = ( this.collection_mode + 1 ) % 3;

			switch ((int)( this.collection_mode )) {
				case 2:
					Task13.User.WriteMsg( "" + this + " now picks up all items of a single type at once." );
					break;
				case 1:
					Task13.User.WriteMsg( "" + this + " now picks up all items in a tile at once." );
					break;
				case 0:
					Task13.User.WriteMsg( "" + this + " now picks up one item at a time." );
					break;
			}
			return;
		}

	}

}