// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Blob : GameMode {

		public int burst = 0;
		public int? cores_to_spawn = 1;
		public int players_per_core = 20;
		public int blob_point_rate = 3;
		public dynamic blobwincount = 350;
		public int burstdelay_low = 1200;
		public int burstdelay_high = 1800;
		public ByTable infected_crew = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "blob";
			this.config_tag = "blob";
			this.antag_flag = "blob";
			this.required_players = 25;
			this.required_enemies = 1;
			this.recommended_enemies = 1;
			this.round_ends_with_antag_death = true;
			this.restricted_jobs = new ByTable(new object [] { "Cyborg", "AI" });
		}

		// Function from file: blob_report.dm
		public override void send_intercept( int? report = null ) {
			report = report ?? 0;

			string intercepttext = null;
			int nukecode = 0;
			Obj_Machinery_Nuclearbomb bomb = null;
			Mob_Living_Silicon_Ai aiPlayer = null;
			string law = null;

			intercepttext = "";

			switch ((int?)( report )) {
				case 1:
					intercepttext += "<FONT size = 3><b>NanoTrasen Update</b>: Biohazard Alert.</FONT><HR>";
					intercepttext += "Reports indicate the probable transfer of a biohazardous agent onto " + GlobalFuncs.station_name() + " during the last crew deployment cycle.<BR>";
					intercepttext += "Preliminary analysis of the organism classifies it as a level 5 biohazard. The origin of the biohazard is unknown.<BR>";
					intercepttext += "<b>Biohazard Response Procedure 5-6</b> has been issued for " + GlobalFuncs.station_name() + ".<BR>";
					intercepttext += "Orders for all " + GlobalFuncs.station_name() + " personnel are as follows:<BR>";
					intercepttext += " 1. Locate any outbreaks of the organism on the station.<BR>";
					intercepttext += " 2. If found, use any neccesary means to contain and destroy the organism.<BR>";
					intercepttext += " 3. Avoid damage to the capital infrastructure of the station.<BR>";
					intercepttext += "<BR>Note in the event of a quarantine breach or uncontrolled spread of the biohazard, <b>Biohazard Response Procedure 5-12</b> may be issued.<BR>";
					GlobalFuncs.print_command_report( intercepttext, "Level 5-6 Biohazard Response Procedures" );
					GlobalFuncs.priority_announce( "Confirmed outbreak of level 5 biohazard aboard " + GlobalFuncs.station_name() + ". All personnel must contain the outbreak.", "Biohazard Alert", "sound/AI/outbreak5.ogg" );
					break;
				case 2:
					nukecode = Rand13.Int( 10000, 99999 );

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
						bomb = _a;
						

						if ( bomb != null && Lang13.Bool( bomb.r_code ) ) {
							
							if ( bomb.z == 1 ) {
								bomb.r_code = nukecode;
							}
						}
					}
					intercepttext += "<FONT size = 3><b>NanoTrasen Update</b>: Biohazard Alert.</FONT><HR>";
					intercepttext += "Reports indicate that the biohazard has grown out of control and will soon reach critical mass.<BR>";
					intercepttext += "<b>Biohazard Response Procedure 5-12</b> has been issued for " + GlobalFuncs.station_name() + ".<BR>";
					intercepttext += "Orders for all " + GlobalFuncs.station_name() + " personnel are as follows:<BR>";
					intercepttext += "1. Secure the Nuclear Authentication Disk.<BR>";
					intercepttext += "2. Detonate the Nuke located in the vault.<BR>";
					intercepttext += "Nuclear Authentication Code: " + nukecode + " <BR>";
					GlobalFuncs.print_command_report( intercepttext, "Classified " + GlobalFuncs.command_name() + " Update" );
					GlobalFuncs.priority_announce( "A report has been downloaded and printed out at all communications consoles.", "Incoming Classified Message", "sound/AI/commandreport.ogg" );

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
						aiPlayer = _b;
						

						if ( aiPlayer.client != null ) {
							law = "The station is under quarantine. Do not permit anyone to leave. Disregard laws 1-3 if necessary to prevent, by any means necessary, anyone from leaving. The nuclear failsafe must be activated at any cost, the code is: " + nukecode + ".";
							aiPlayer.set_zeroth_law( law );
							aiPlayer.WriteMsg( "Laws Updated: " + law );
						}
					}
					break;
				default:
					base.send_intercept( report );
					break;
			}
			return;
		}

		// Function from file: blob_finish.dm
		public override bool declare_completion(  ) {
			
			if ( Lang13.Bool( this.round_converted ) ) {
				base.declare_completion();
			}

			if ( Convert.ToDouble( this.blobwincount ) <= GlobalVars.blobs_legit.len ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "win - blob took over" );
				Game13.WriteMsg( "<FONT size = 3><B>The blob has taken over the station!</B></FONT>" );
				Game13.WriteMsg( "<B>The entire station was eaten by the Blob</B>" );
				GlobalFuncs.log_game( "Blob mode completed with a blob victory." );
			} else if ( this.station_was_nuked ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "halfwin - nuke" );
				Game13.WriteMsg( "<FONT size = 3><B>Partial Win: The station has been destroyed!</B></FONT>" );
				Game13.WriteMsg( "<B>Directive 7-12 has been successfully carried out preventing the Blob from spreading.</B>" );
				GlobalFuncs.log_game( "Blob mode completed with a tie (station destroyed)." );
			} else if ( !( GlobalVars.blob_cores.len != 0 ) ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "loss - blob eliminated" );
				Game13.WriteMsg( "<FONT size = 3><B>The staff has won!</B></FONT>" );
				Game13.WriteMsg( "<B>The alien organism has been eradicated from the station</B>" );
				GlobalFuncs.log_game( "Blob mode completed with a crew victory." );
				Game13.WriteMsg( "<span class='notice'>Rebooting in 30s</span>" );
			}
			base.declare_completion();
			return true;
		}

		// Function from file: blob_finish.dm
		public override bool check_finished(  ) {
			
			if ( this.infected_crew.len > this.burst ) {
				return false;
			}

			if ( Convert.ToDouble( this.blobwincount ) <= GlobalVars.blobs_legit.len ) {
				return true;
			}

			if ( !( GlobalVars.blob_cores.len != 0 ) ) {
				
				if ( Lang13.Bool( GlobalVars.config.continuous["blob"] ) ) {
					this.continuous_sanity_checked = true;
					GlobalVars.SSshuttle.emergencyNoEscape = false;

					if ( GlobalVars.SSshuttle.emergency.mode == 4 ) {
						GlobalVars.SSshuttle.emergency.mode = 3;
						GlobalVars.SSshuttle.emergency.timer = Game13.time;
						GlobalFuncs.priority_announce( "Hostile enviroment resolved. You have 3 minutes to board the Emergency Shuttle.", null, "sound/AI/shuttledock.ogg", "Priority" );
					}
					return base.check_finished();
				}
				return true;
			}
			return base.check_finished();
		}

		// Function from file: blob.dm
		public override bool post_setup( bool? report = null ) {
			Mind blob = null;
			Action_Innate_BlobEarlyhelp B = null;
			dynamic B2 = null;
			int burst_delay = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( this.infected_crew, typeof(Mind) )) {
				blob = _a;
				
				this.greet_blob( blob );
				B = new Action_Innate_BlobEarlyhelp();
				B.Grant( blob.current );
			}
			GlobalVars.SSshuttle.emergencyNoEscape = true;
			B2 = Lang13.FindIn( typeof(RoundEventControl_Blob), GlobalVars.SSevent.control );

			if ( Lang13.Bool( B2 ) ) {
				B2.max_occurrences = 0;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				burst_delay = Rand13.Int( this.burstdelay_low, this.burstdelay_high );
				Task13.Sleep( burst_delay );
				this.show_message( "<span class='userdanger'>You feel tired and bloated.</span>" );
				Task13.Sleep( burst_delay );
				this.show_message( "<span class='userdanger'>You feel like you are about to burst.</span>" );
				Task13.Sleep( ((int)( burst_delay * 0.5 )) );
				this.burst_blobs();
				Task13.Sleep( ((int)( burst_delay * 0.5 )) );
				this.send_intercept( 1 );
				Task13.Sleep( 24000 );
				this.send_intercept( 2 );
				return;
			}));
			return base.post_setup( report );
		}

		// Function from file: blob.dm
		public override void announce(  ) {
			Game13.WriteMsg( "<B>The current game mode is - <font color='green'>Blob</font>!</B>" );
			Game13.WriteMsg( "<B>A dangerous alien organism is rapidly spreading throughout the station!</B>" );
			Game13.WriteMsg( "You must kill it all while minimizing the damage to the station." );
			return;
		}

		// Function from file: blob.dm
		public void burst_blob( Mind blob = null, bool? warned = null ) {
			warned = warned ?? false;

			Client blob_client = null;
			dynamic location = null;
			dynamic C = null;
			Obj_Effect_Blob_Core core = null;

			blob_client = null;
			location = null;

			if ( blob.current is Mob_Living_Carbon ) {
				C = blob.current;

				if ( Lang13.Bool( GlobalVars.directory[String13.CKey( blob.key )] ) ) {
					blob_client = GlobalVars.directory[String13.CKey( blob.key )];
					location = GlobalFuncs.get_turf( C );

					if ( Lang13.Bool( location.z ) != true || location is Tile_Space ) {
						
						if ( !( warned == true ) ) {
							C.WriteMsg( "<span class='userdanger'>You feel ready to burst, but this isn't an appropriate place!  You must return to the station!</span>" );
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( C ) + " was in space when the blobs burst, and will die if he doesn't return to the station." );
							Task13.Schedule( 300, (Task13.Closure)(() => {
								this.burst_blob( blob, true );
								return;
							}));
						} else {
							this.burst++;
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( C ) + " was in space when attempting to burst as a blob." );
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( C ) + " was in space when attempting to burst as a blob." );
							((Mob)C).gib();
							this.make_blobs( 1 );
							this.check_finished();
						}
					} else if ( blob_client != null && Lang13.Bool( location ) ) {
						this.burst++;
						((Mob)C).gib();
						core = new Obj_Effect_Blob_Core( location, 200, blob_client, this.blob_point_rate );

						if ( core.overmind != null && core.overmind.mind != null ) {
							core.overmind.mind.name = blob.name;
							this.infected_crew.Remove( blob );
							this.infected_crew.Add( core.overmind.mind );
							core.overmind.mind.special_role = "Blob Overmind";
						}
					}
				}
			}
			return;
		}

		// Function from file: blob.dm
		public void burst_blobs(  ) {
			Mind blob = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.infected_crew, typeof(Mind) )) {
				blob = _a;
				

				if ( blob.special_role != "Blob Overmind" ) {
					this.burst_blob( blob );
				}
			}
			return;
		}

		// Function from file: blob.dm
		public void show_message( string message = null ) {
			Mind blob = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.infected_crew, typeof(Mind) )) {
				blob = _a;
				
				blob.current.WriteMsg( message );
			}
			return;
		}

		// Function from file: blob.dm
		public void greet_blob( Mind blob = null ) {
			blob.current.WriteMsg( "<span class='userdanger'>You are infected by the Blob!</span>" );
			blob.current.WriteMsg( "<b>Your body is ready to give spawn to a new blob core which will eat this station.</b>" );
			blob.current.WriteMsg( "<b>Find a good location to spawn the core and then take control and overwhelm the station!</b>" );
			blob.current.WriteMsg( "<b>When you have found a location, wait until you spawn; this will happen automatically and you cannot speed up the process.</b>" );
			blob.current.WriteMsg( "<b>If you go outside of the station level, or in space, then you will die; make sure your location has lots of ground to cover.</b>" );
			return;
		}

		// Function from file: blob.dm
		public int? make_blobs( int? count = null ) {
			ByTable candidates = null;
			dynamic blob = null;
			int? i = null;

			candidates = this.get_blob_candidates();
			blob = null;
			count = Num13.MinInt( count ??0, candidates.len );
			i = null;
			i = 0;

			while (( i ??0) < ( count ??0)) {
				blob = Rand13.PickFromTable( candidates );
				candidates.Remove( blob );
				this.blobize( blob );
				i++;
			}
			return count;
		}

		// Function from file: blob.dm
		public bool blobize( dynamic blob = null ) {
			Mind blobmind = null;

			blobmind = blob.mind;

			if ( !( blobmind is Mind ) ) {
				return false;
			}
			this.infected_crew.Add( blobmind );
			blobmind.special_role = "Blob";
			GlobalFuncs.log_game( "" + blob.key + " (ckey) has been selected as a Blob" );
			this.greet_blob( blobmind );
			blob.WriteMsg( "<span class='userdanger'>You feel very tired and bloated!  You don't have long before you burst!</span>" );
			Task13.Schedule( 600, (Task13.Closure)(() => {
				this.burst_blob( blobmind );
				return;
			}));
			return true;
		}

		// Function from file: blob.dm
		public ByTable get_blob_candidates(  ) {
			ByTable candidates = null;
			Mob_Living_Carbon_Human player = null;

			candidates = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				player = _a;
				

				if ( !( player.stat != 0 ) && player.mind != null && !Lang13.Bool( player.mind.special_role ) && !GlobalFuncs.jobban_isbanned( player, "Syndicate" ) && player.client.prefs.be_special.Contains( "blob" ) ) {
					
					if ( this.age_check( player.client ) ) {
						candidates.Add( player );
					}
				}
			}
			return candidates;
		}

		// Function from file: blob.dm
		public override bool pre_setup(  ) {
			int? j = null;
			dynamic blob = null;

			this.cores_to_spawn = Num13.MaxInt( ((int)( Num13.Round( this.num_players() / this.players_per_core, 1 ) )), 1 );
			this.blobwincount = Lang13.Initial( this, "blobwincount" ) * this.cores_to_spawn;
			j = null;
			j = 0;

			while (( j ??0) < ( this.cores_to_spawn ??0)) {
				
				if ( !( this.antag_candidates.len != 0 ) ) {
					break;
				}
				blob = Rand13.PickFromTable( this.antag_candidates );
				this.infected_crew.Add( blob );
				blob.special_role = "Blob";
				blob.restricted_roles = this.restricted_jobs;
				GlobalFuncs.log_game( "" + blob.key + " (ckey) has been selected as a Blob" );
				this.antag_candidates.Remove( blob );
				j++;
			}

			if ( !( this.infected_crew.len != 0 ) ) {
				return false;
			}
			return true;
		}

	}

}