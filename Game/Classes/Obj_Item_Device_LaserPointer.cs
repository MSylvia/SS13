// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_LaserPointer : Obj_Item_Device {

		public string pointer_icon_state = null;
		public dynamic pointer_loc = null;
		public int energy = 5;
		public int max_energy = 5;
		public int effectchance = 33;
		public bool recharging = false;
		public bool recharge_locked = false;
		public dynamic diode = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "pen";
			this.flags = 64;
			this.slot_flags = 512;
			this.materials = new ByTable().Set( "$metal", 500 ).Set( "$glass", 500 );
			this.w_class = 2;
			this.origin_tech = "combat=1;magnets=2";
			this.icon_state = "pointer";
		}

		// Function from file: laserpointer.dm
		public Obj_Item_Device_LaserPointer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.diode = new Obj_Item_Weapon_StockParts_MicroLaser( this );

			if ( !Lang13.Bool( this.pointer_icon_state ) ) {
				this.pointer_icon_state = Rand13.Pick(new object [] { "red_laser", "green_laser", "blue_laser", "purple_laser" });
			}
			return;
		}

		// Function from file: laserpointer.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( Rand13.PercentChance( 20 - ( this.recharge_locked ?1:0) * 5 ) ) {
				this.energy += 1;

				if ( this.energy >= this.max_energy ) {
					this.energy = this.max_energy;
					this.recharging = false;
					this.recharge_locked = false;
					base.process( (object)(seconds) );
				}
			}
			return null;
		}

		// Function from file: laserpointer.dm
		public void laser_act( dynamic target = null, dynamic user = null, string _params = null ) {
			dynamic H = null;
			string outmsg = null;
			dynamic targloc = null;
			dynamic C = null;
			double? severity = null;
			dynamic S = null;
			dynamic C2 = null;
			ByTable showto = null;
			dynamic M = null;
			Image I = null;
			ByTable click_params = null;

			
			if ( !Map13.FetchViewers( target, 7 ).Contains( user ) ) {
				return;
			}

			if ( !Lang13.Bool( this.diode ) ) {
				user.WriteMsg( "<span class='notice'>You point " + this + " at " + target + ", but nothing happens!</span>" );
				return;
			}

			if ( !((Mob)user).IsAdvancedToolUser() ) {
				user.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return;
			}

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				if ( H.dna.species.specflags.Contains( ((Dna)H.dna).check_mutation( "Hulk" ) != 0 || 512 != 0 ) ) {
					user.WriteMsg( "<span class='warning'>Your fingers can't press the button!</span>" );
					return;
				}
			}
			this.add_fingerprint( user );

			if ( this.recharge_locked ) {
				user.WriteMsg( "<span class='notice'>You point " + this + " at " + target + ", but it's still charging.</span>" );
				return;
			}
			targloc = GlobalFuncs.get_turf( target );

			if ( target is Mob_Living_Carbon ) {
				C = target;

				if ( user.zone_sel.selecting == "eyes" ) {
					GlobalFuncs.add_logs( user, C, "shone in the eyes", this );
					severity = 1;

					if ( Rand13.PercentChance( 33 ) ) {
						severity = 2;
					} else if ( Rand13.PercentChance( 50 ) ) {
						severity = 0;
					}

					if ( Rand13.PercentChance( ((int)( this.effectchance * Convert.ToDouble( this.diode.rating ) )) ) && ((Mob_Living)C).flash_eyes( severity ) ) {
						outmsg = "<span class='notice'>You blind " + C + " by shining " + this + " in their eyes.</span>";

						if ( C.weakeyes ) {
							((Mob)C).Stun( 1 );
						}
					} else {
						outmsg = "<span class='warning'>You fail to blind " + C + " by shining " + this + " at their eyes!</span>";
					}
				}
			} else if ( target is Mob_Living_Silicon_Robot ) {
				S = target;

				if ( Rand13.PercentChance( ((int)( this.effectchance * Convert.ToDouble( this.diode.rating ) )) ) ) {
					Icon13.Flick( "e_flash", S.flash );
					((Mob)S).Weaken( Rand13.Int( 5, 10 ) );
					S.WriteMsg( "<span class='danger'>Your sensors were overloaded by a laser!</span>" );
					outmsg = "<span class='notice'>You overload " + S + " by shining " + this + " at their sensors.</span>";
					GlobalFuncs.add_logs( user, S, "shone in the sensors", this );
				} else {
					outmsg = "<span class='warning'>You fail to overload " + S + " by shining " + this + " at their sensors!</span>";
				}
			} else if ( target is Obj_Machinery_Camera ) {
				C2 = target;

				if ( Rand13.PercentChance( ((int)( this.effectchance * Convert.ToDouble( this.diode.rating ) )) ) ) {
					((Ent_Static)C2).emp_act( 1 );
					outmsg = "<span class='notice'>You hit the lens of " + C2 + " with " + this + ", temporarily disabling the camera!</span>";
					GlobalFuncs.add_logs( user, C2, "EMPed", this );
				} else {
					outmsg = "<span class='warning'>You miss the lens of " + C2 + " with " + this + "!</span>";
				}
			}
			this.icon_state = "pointer_" + this.pointer_icon_state;
			showto = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( targloc, 7 ) )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					showto.Add( M.client );
				}
			}
			I = new Image( "icons/obj/projectiles.dmi", targloc, this.pointer_icon_state, 10 );
			click_params = String13.ParseUrlParams( _params );

			if ( click_params != null ) {
				
				if ( Lang13.Bool( click_params["icon-x"] ) ) {
					I.pixel_x = ((int)( ( String13.ParseNumber( click_params["icon-x"] ) ??0) - 16 ));
				}

				if ( Lang13.Bool( click_params["icon-y"] ) ) {
					I.pixel_y = ((int)( ( String13.ParseNumber( click_params["icon-y"] ) ??0) - 16 ));
				}
			} else {
				I.pixel_x = Convert.ToInt32( target.pixel_x + Rand13.Int( -5, 5 ) );
				I.pixel_y = Convert.ToInt32( target.pixel_y + Rand13.Int( -5, 5 ) );
			}

			if ( Lang13.Bool( outmsg ) ) {
				user.WriteMsg( outmsg );
			} else {
				user.WriteMsg( "<span class='info'>You point " + this + " at " + target + ".</span>" );
			}
			this.energy -= 1;

			if ( this.energy <= this.max_energy ) {
				
				if ( !this.recharging ) {
					this.recharging = true;
					GlobalVars.SSobj.processing.Or( this );
				}

				if ( this.energy <= 0 ) {
					user.WriteMsg( "<span class='warning'>The " + this + "'s battery is overused, it needs time to recharge!</span>" );
					this.recharge_locked = true;
				}
			}
			GlobalFuncs.flick_overlay( I, showto, 10 );
			this.icon_state = "pointer";
			return;
		}

		// Function from file: laserpointer.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			
			if ( proximity_flag == true ) {
				return false;
			}
			this.laser_act( target, user, click_parameters );
			return false;
		}

		// Function from file: laserpointer.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_StockParts_MicroLaser ) {
				
				if ( !Lang13.Bool( this.diode ) ) {
					
					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}
					A.loc = this;
					this.diode = A;
					user.WriteMsg( "<span class='notice'>You install a " + this.diode.name + " in " + this + ".</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>" + this + " already has a diode installed.</span>" );
				}
				return null;
			} else if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( Lang13.Bool( this.diode ) ) {
					user.WriteMsg( new Txt( "<span class='notice'>You remove the " ).item( this.diode.name ).str( " from " ).the( this ).item().str( ".</span>" ).ToString() );
					this.diode.loc = GlobalFuncs.get_turf( this.loc );
					this.diode = null;
				}
				return null;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: laserpointer.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			this.laser_act( M, user );
			return false;
		}

	}

}