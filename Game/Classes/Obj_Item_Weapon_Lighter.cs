// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Lighter : Obj_Item_Weapon {

		public bool lit = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "zippo";
			this.w_class = 1;
			this.flags = 64;
			this.slot_flags = 512;
			this.heat = 1500;
			this.icon = "icons/obj/cigarettes.dmi";
			this.icon_state = "zippo";
		}

		public Obj_Item_Weapon_Lighter ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: cigs_lighters.dm
		public override int is_hot(  ) {
			return ( this.lit ?1:0) * this.heat;
		}

		// Function from file: cigs_lighters.dm
		public override bool dropped( dynamic user = null ) {
			
			if ( this.lit ) {
				
				if ( Lang13.Bool( user ) ) {
					((Ent_Static)user).AddLuminosity( -1 );
				}
				this.SetLuminosity( 1 );
			}
			return false;
		}

		// Function from file: cigs_lighters.dm
		public override bool pickup( dynamic user = null ) {
			
			if ( this.lit ) {
				this.SetLuminosity( 0 );
				((Ent_Static)user).AddLuminosity( 1 );
			}
			return false;
		}

		// Function from file: cigs_lighters.dm
		public override int? process( dynamic seconds = null ) {
			dynamic location = null;

			location = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( location ) ) {
				((Tile)location).hotspot_expose( 700, 5 );
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic cig = null;

			
			if ( !( M is Mob_Living ) ) {
				return false;
			}

			if ( this.lit ) {
				M.IgniteMob();
			}
			cig = this.help_light_cig( M, user );

			if ( this.lit && Lang13.Bool( cig ) && user.a_intent == "help" ) {
				
				if ( Lang13.Bool( cig.lit ) ) {
					user.WriteMsg( "<span class='notice'>The " + cig.name + " is already lit.</span>" );
				}

				if ( M == user ) {
					((Ent_Static)cig).attackby( this, user );
				} else if ( !( this is Obj_Item_Weapon_Lighter_Greyscale ) ) {
					((Obj_Item_Clothing_Mask_Cigarette)cig).f_light( new Txt( "<span class='rose'>" ).item( user ).str( " whips the " ).item( this.name ).str( " out and holds it for " ).item( M ).str( ". Their arm is as steady as the unflickering flame they light " ).the( cig ).item().str( " with.</span>" ).ToString() );
				} else {
					((Obj_Item_Clothing_Mask_Cigarette)cig).f_light( "<span class='notice'>" + user + " holds the " + this.name + " out for " + M + ", and lights the " + cig.name + ".</span>" );
				}
			} else {
				base.attack( (object)(M), (object)(user), def_zone );
			}
			return false;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string hitzone = null;

			
			if ( user.r_hand == this || user.l_hand == this ) {
				
				if ( !this.lit ) {
					this.lit = true;
					this.update_icon();
					this.force = 5;
					this.damtype = "fire";
					this.hitsound = "sound/items/welder.ogg";
					this.attack_verb = new ByTable(new object [] { "burnt", "singed" });

					if ( !( this is Obj_Item_Weapon_Lighter_Greyscale ) ) {
						((Ent_Static)user).visible_message( "Without even breaking stride, " + user + " flips open and lights " + this + " in one smooth movement.", "<span class='notice'>Without even breaking stride, you flip open and lights " + this + " in one smooth movement.</span>" );
					} else if ( Rand13.PercentChance( 75 ) ) {
						((Ent_Static)user).visible_message( "After a few attempts, " + user + " manages to light " + this + ".", "<span class='notice'>After a few attempts, you manage to light " + this + ".</span>" );
					} else {
						hitzone = ( user.r_hand == this ? "r_hand" : "l_hand" );
						user.apply_damage( 5, "fire", hitzone );
						((Ent_Static)user).visible_message( "<span class='warning'>After a few attempts, " + user + " manages to light " + this + " - they however burn their finger in the process.</span>", "<span class='warning'>You burn yourself while lighting the lighter!</span>" );
					}
					((Ent_Static)user).AddLuminosity( 1 );
					GlobalVars.SSobj.processing.Or( this );
				} else {
					this.lit = false;
					this.update_icon();
					this.hitsound = "swing_hit";
					this.force = 0;
					this.attack_verb = null;

					if ( !( this is Obj_Item_Weapon_Lighter_Greyscale ) ) {
						((Ent_Static)user).visible_message( "You hear a quiet click, as " + user + " shuts off " + this + " without even looking at what they're doing. Wow.", "<span class='notice'>You quietly shut off " + this + " without even looking at what you're doing. Wow.</span>" );
					} else {
						((Ent_Static)user).visible_message( "" + user + " quietly shuts off " + this + ".", "<span class='notice'>You quietly shut off " + this + "." );
					}
					((Ent_Static)user).AddLuminosity( -1 );
					GlobalVars.SSobj.processing.Remove( this );
				}
			} else {
				return base.attack_self( (object)(user), (object)(flag), emp );
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = ( this.lit ? "" + this.icon_state + "_on" : "" + Lang13.Initial( this, "icon_state" ) );
			return null;
		}

	}

}