// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_HandLabeler : Obj_Item_Weapon {

		public string label = null;
		public dynamic labels_left = 30;
		public bool mode = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "flight";
			this.icon = "icons/obj/bureaucracy.dmi";
			this.icon_state = "labeler0";
		}

		public Obj_Item_Weapon_HandLabeler ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: handlabeler.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_HandLabelerRefill ) {
				
				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				user.WriteMsg( "<span class='notice'>You insert " + A + " into " + this + ".</span>" );
				GlobalFuncs.qdel( A );
				this.labels_left = Lang13.Initial( this, "labels_left" );
				return null;
			}
			return null;
		}

		// Function from file: handlabeler.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string str = null;

			
			if ( !((Mob)user).IsAdvancedToolUser() ) {
				user.WriteMsg( "<span class='warning'>You don't have the dexterity to use " + this + "!</span>" );
				return null;
			}
			this.mode = !this.mode;
			this.icon_state = "labeler" + this.mode;

			if ( this.mode ) {
				user.WriteMsg( "<span class='notice'>You turn on " + this + ".</span>" );
				str = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( user, "Label text?", "Set label", "", null, InputType.Any ) ), 1, 26 );

				if ( !Lang13.Bool( str ) || !( Lang13.Length( str ) != 0 ) ) {
					user.WriteMsg( "<span class='warning'>Invalid text!</span>" );
					return null;
				}
				this.label = str;
				user.WriteMsg( "<span class='notice'>You set the text to '" + str + "'.</span>" );
			} else {
				user.WriteMsg( "<span class='notice'>You turn off " + this + ".</span>" );
			}
			return null;
		}

		// Function from file: handlabeler.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			
			if ( !( proximity_flag == true ) ) {
				return false;
			}

			if ( !this.mode ) {
				return false;
			}

			if ( target == this.loc ) {
				return false;
			}

			if ( !Lang13.Bool( this.labels_left ) ) {
				user.WriteMsg( "<span class='warning'>No labels left!</span>" );
				return false;
			}

			if ( !Lang13.Bool( this.label ) || !( Lang13.Length( this.label ) != 0 ) ) {
				user.WriteMsg( "<span class='warning'>No text set!</span>" );
				return false;
			}

			if ( Lang13.Length( target.name ) + Lang13.Length( this.label ) > 64 ) {
				user.WriteMsg( "<span class='warning'>Label too big!</span>" );
				return false;
			}

			if ( target is Mob_Living_Carbon_Human ) {
				user.WriteMsg( "<span class='warning'>You can't label humans!</span>" );
				return false;
			}

			if ( target is Mob_Living_Silicon ) {
				user.WriteMsg( "<span class='warning'>You can't label cyborgs!</span>" );
				return false;
			}
			((Ent_Static)user).visible_message( "" + user + " labels " + target + " as " + this.label + ".", "<span class='notice'>You label " + target + " as " + this.label + ".</span>" );
			target.name = "" + target.name + " (" + this.label + ")";
			this.labels_left--;
			return false;
		}

	}

}