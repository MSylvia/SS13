// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent_Anomaly_AnomalyPyro : RoundEvent_Anomaly {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.startWhen = 10;
			this.announceWhen = 3;
			this.endWhen = 85;
		}

		// Function from file: anomaly_pyro.dm
		public override void end(  ) {
			dynamic T = null;
			Mob_Living_SimpleAnimal_Slime S = null;

			
			if ( this.newAnomaly.loc != null ) {
				T = GlobalFuncs.get_turf( this.newAnomaly );

				if ( T is Tile_Simulated ) {
					((Tile_Simulated)T).atmos_spawn_air( 13, 200 );
				}
				S = new Mob_Living_SimpleAnimal_Slime( T );
				S.colour = Rand13.Pick(new object [] { "red", "orange" });
				S.rabid = true;
				GlobalFuncs.qdel( this.newAnomaly );
			}
			return;
		}

		// Function from file: anomaly_pyro.dm
		public override void tick(  ) {
			
			if ( !( this.newAnomaly != null ) ) {
				this.kill();
				return;
			}

			if ( GlobalFuncs.IsMultiple( this.activeFor, 5 ) ) {
				this.newAnomaly.anomalyEffect();
			}
			return;
		}

		// Function from file: anomaly_pyro.dm
		public override bool start(  ) {
			dynamic T = null;

			T = Rand13.PickFromTable( GlobalFuncs.get_area_turfs( this.impact_area ) );

			if ( Lang13.Bool( T ) ) {
				this.newAnomaly = new Obj_Effect_Anomaly_Pyro( T );
			}
			return false;
		}

		// Function from file: anomaly_pyro.dm
		public override void announce(  ) {
			GlobalFuncs.priority_announce( "Pyroclastic anomaly detected on long range scanners. Expected location: " + this.impact_area.name + ".", "Anomaly Alert" );
			return;
		}

	}

}