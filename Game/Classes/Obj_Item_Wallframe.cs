// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Wallframe : Obj_Item {

		public Type result_path = null;
		public bool inverse = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.materials = new ByTable().Set( "$metal", 4000 );
			this.flags = 64;
			this.origin_tech = "materials=1;engineering=1";
			this.item_state = "syringe_kit";
			this.w_class = 2;
		}

		public Obj_Item_Wallframe ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: apc_frame.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Tile T = null;
			int? metal_amt = null;
			int? glass_amt = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				T = Map13.GetStep( GlobalFuncs.get_turf( user ), Convert.ToInt32( user.dir ) );

				if ( T is Tile_Simulated_Wall ) {
					T.attackby( this, user, _params );
				}
			}
			metal_amt = Num13.Floor( Convert.ToDouble( this.materials["$metal"] / 2000 ) );
			glass_amt = Num13.Floor( Convert.ToDouble( this.materials["$glass"] / 2000 ) );

			if ( A is Obj_Item_Weapon_Wrench && ( Lang13.Bool( metal_amt ) || Lang13.Bool( glass_amt ) ) ) {
				user.WriteMsg( "<span class='notice'>You dismantle " + this + ".</span>" );

				if ( Lang13.Bool( metal_amt ) ) {
					new Obj_Item_Stack_Sheet_Metal( GlobalFuncs.get_turf( this ), metal_amt );
				}

				if ( Lang13.Bool( glass_amt ) ) {
					new Obj_Item_Stack_Sheet_Glass( GlobalFuncs.get_turf( this ), glass_amt );
				}
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: apc_frame.dm
		public void attach( dynamic on_wall = null ) {
			int ndir = 0;
			dynamic O = null;

			
			if ( this.result_path != null ) {
				GlobalFuncs.playsound( this.loc, "sound/machines/click.ogg", 75, 1 );
				Task13.User.visible_message( "" + Task13.User.name + " attaches " + this + " to the wall.", "<span class='notice'>You attach " + this + " to the wall.</span>", "<span class='italics'>You hear clicking.</span>" );
				ndir = Map13.GetDistance( on_wall, Task13.User );

				if ( this.inverse ) {
					ndir = Num13.Rotate( ndir, 180 );
				}
				O = Lang13.Call( this.result_path, GlobalFuncs.get_turf( Task13.User ), ndir, 1 );
				this.transfer_fingerprints_to( O );
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: apc_frame.dm
		public virtual bool try_build( Tile_Simulated_Wall on_wall = null ) {
			int ndir = 0;
			dynamic loc = null;
			Ent_Static A = null;

			
			if ( Map13.GetDistance( on_wall, Task13.User ) > 1 ) {
				return false;
			}
			ndir = Map13.GetDistance( on_wall, Task13.User );

			if ( !GlobalVars.cardinal.Contains( ndir ) ) {
				return false;
			}
			loc = GlobalFuncs.get_turf( Task13.User );
			A = loc.loc;

			if ( !( loc is Tile_Simulated_Floor ) ) {
				Task13.User.WriteMsg( "<span class='warning'>You cannot place " + this + " on this spot!</span>" );
				return false;
			}

			if ( Lang13.Bool( ((dynamic)A).requires_power ) == false || A is Zone_Space ) {
				Task13.User.WriteMsg( "<span class='warning'>You cannot place " + this + " in this area!</span>" );
				return false;
			}

			if ( GlobalFuncs.gotwallitem( loc, ndir, ( this.inverse ?1:0) * 2 ) ) {
				Task13.User.WriteMsg( "<span class='warning'>There's already an item on this wall!</span>" );
				return false;
			}
			return true;
		}

	}

}