// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Lightreplacer : Obj_Item_Device {

		public double max_uses = 20;
		public double uses = 0;
		public bool emagged = false;
		public string failmsg = "";
		public int? increment = 5;
		public double? decrement = 1;
		public int charge = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "electronic";
			this.flags = 64;
			this.slot_flags = 512;
			this.origin_tech = "magnets=3;materials=2";
			this.icon = "icons/obj/janitor.dmi";
			this.icon_state = "lightreplacer0";
		}

		// Function from file: lightreplacer.dm
		public Obj_Item_Device_Lightreplacer ( dynamic loc = null ) : base( (object)(loc) ) {
			this.uses = this.max_uses / 2;
			this.failmsg = "The " + this.name + "'s refill light blinks red.";
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: lightreplacer.dm
		public virtual void janicart_insert( dynamic user = null, Obj_Structure_Janitorialcart J = null ) {
			J.put_in_cart( this, user );
			J.myreplacer = this;
			J.update_icon();
			return;
		}

		// Function from file: lightreplacer.dm
		public bool CanUse( dynamic user = null ) {
			this.add_fingerprint( user );

			if ( this.uses > 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: lightreplacer.dm
		public void Emag(  ) {
			this.emagged = !this.emagged;
			GlobalFuncs.playsound( this.loc, "sparks", 100, 1 );

			if ( this.emagged ) {
				this.name = "shortcircuited " + Lang13.Initial( this, "name" );
			} else {
				this.name = Lang13.Initial( this, "name" );
			}
			this.update_icon();
			return;
		}

		// Function from file: lightreplacer.dm
		public void ReplaceLight( Obj_Machinery_Light target = null, dynamic U = null ) {
			dynamic L1 = null;
			dynamic L2 = null;

			
			if ( target.status != 0 ) {
				
				if ( this.CanUse( U ) ) {
					
					if ( !this.Use( U ) ) {
						return;
					}
					U.WriteMsg( new Txt( "<span class='notice'>You replace the " ).item( target.fitting ).str( " with " ).the( this ).item().str( ".</span>" ).ToString() );

					if ( target.status != 1 ) {
						L1 = Lang13.Call( target.light_type, target.loc );
						L1.status = target.status;
						L1.rigged = target.rigged;
						L1.brightness = target.brightness;
						L1.switchcount = target.switchcount;
						target.switchcount = 0;
						L1.update();
						target.status = 1;
						target.update();
					}
					L2 = Lang13.Call( target.light_type );
					target.status = Convert.ToInt32( L2.status );
					target.switchcount = Convert.ToInt32( L2.switchcount );
					target.rigged = this.emagged;
					target.brightness = L2.brightness;
					target.on = target.has_power();
					target.update();
					GlobalFuncs.qdel( L2 );

					if ( target.on && target.rigged ) {
						target.explode();
					}
					return;
				} else {
					U.WriteMsg( this.failmsg );
					return;
				}
			} else {
				U.WriteMsg( "<span class='warning'>There is a working " + target.fitting + " already inserted!</span>" );
				return;
			}
			return;
		}

		// Function from file: lightreplacer.dm
		public void Charge( dynamic user = null ) {
			this.charge += 1;

			if ( this.charge > 7 ) {
				this.AddUses( 1 );
				this.charge = 1;
			}
			return;
		}

		// Function from file: lightreplacer.dm
		public void AddUses( int? amount = null ) {
			amount = amount ?? 1;

			this.uses = Num13.MinInt( Num13.MaxInt( ((int)( this.uses + ( amount ??0) )), 0 ), ((int)( this.max_uses )) );
			return;
		}

		// Function from file: lightreplacer.dm
		public bool Use( dynamic user = null ) {
			GlobalFuncs.playsound( this.loc, "sound/machines/click.ogg", 50, 1 );
			this.AddUses( -1 );
			return true;
		}

		// Function from file: lightreplacer.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = "lightreplacer" + this.emagged;
			return null;
		}

		// Function from file: lightreplacer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			Task13.User.WriteMsg( "It has " + this.uses + " lights remaining." );
			return null;
		}

		// Function from file: lightreplacer.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !this.emagged ) {
				this.Emag();
			}
			return false;
		}

		// Function from file: lightreplacer.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic G = null;
			dynamic L = null;
			dynamic S = null;
			bool found_good_light = false;
			bool replaced_something = false;
			Obj_Item I = null;
			Obj_Item L2 = null;

			
			if ( A is Obj_Item_Stack_Sheet_Glass ) {
				G = A;

				if ( this.uses >= this.max_uses ) {
					user.WriteMsg( "<span class='warning'>" + this.name + " is full.</span>" );
					return null;
				} else if ( ((Obj_Item_Stack)G).use( this.decrement ) != 0 ) {
					this.AddUses( this.increment );
					user.WriteMsg( "<span class='notice'>You insert a piece of glass into the " + this.name + ". You have " + this.uses + " lights remaining.</span>" );
					return null;
				} else {
					user.WriteMsg( "<span class='warning'>You need one sheet of glass to replace lights!</span>" );
				}
			}

			if ( A is Obj_Item_Weapon_Light ) {
				L = A;

				if ( Lang13.Bool( L.status ) == false ) {
					
					if ( this.uses < this.max_uses ) {
						
						if ( !((Mob)user).unEquip( A ) ) {
							return null;
						}
						this.AddUses( 1 );
						user.WriteMsg( "<span class='notice'>You insert the " + L.name + " into the " + this.name + ". You have " + this.uses + " lights remaining.</span>" );
						GlobalFuncs.qdel( L );
						return null;
					}
				} else {
					user.WriteMsg( "<span class='warning'>You need a working light!</span>" );
					return null;
				}
			}

			if ( A is Obj_Item_Weapon_Storage ) {
				S = A;
				found_good_light = false;
				replaced_something = false;

				foreach (dynamic _a in Lang13.Enumerate( S.contents, typeof(Obj_Item) )) {
					I = _a;
					

					if ( I is Obj_Item_Weapon_Light ) {
						L2 = I;

						if ( Lang13.Bool( ((dynamic)L2).status ) == false ) {
							found_good_light = true;

							if ( this.uses < this.max_uses ) {
								GlobalFuncs.qdel( L2 );
								this.AddUses( 1 );
								replaced_something = true;
							} else {
								break;
							}
						}
					}
				}

				if ( !found_good_light ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( S ).item().str( " contains no useable lights!</span>" ).ToString() );
					return null;
				}

				if ( !replaced_something && this.uses == this.max_uses ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " is full!</span>" ).ToString() );
					return null;
				}
				user.WriteMsg( new Txt( "<span class='notice'>You fill " ).the( this ).item().str( " with lights from " ).the( S ).item().str( ". You have " ).item( this.uses ).str( " lights remaining.</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: lightreplacer.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( new Txt( "It has " ).item( this.uses ).str( " light" ).s().str( " remaining." ).ToString() );
			return 0;
		}

	}

}