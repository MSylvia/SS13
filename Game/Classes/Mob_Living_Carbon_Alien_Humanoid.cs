// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Alien_Humanoid : Mob_Living_Carbon_Alien {

		public Ent_Static r_store = null;
		public Ent_Static l_store = null;
		public string caste = "";
		public string alt_icon = "icons/mob/alienleap.dmi";
		public bool leap_on_click = false;
		public bool pounce_cooldown = false;
		public int pounce_cooldown_time = 30;
		public bool custom_pixel_x_offset = false;
		public bool custom_pixel_y_offset = false;
		public bool sneaking = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pass_flags = 1;
			this.butcher_results = new ByTable().Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Xeno), 5 ).Set( typeof(Obj_Item_Stack_Sheet_Animalhide_Xeno), 1 );
			this.icon_state = "alien_s";
		}

		// Function from file: humanoid.dm
		public Mob_Living_Carbon_Alien_Humanoid ( dynamic loc = null ) : base( (object)(loc) ) {
			this.AddAbility( new Obj_Effect_ProcHolder_Alien_Regurgitate( null ) );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: hunter.dm
		[VerbInfo( name: "float" )]
		public override void f_float( bool on = false ) {
			
			if ( this.leaping ) {
				return;
			}
			base.f_float( on );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_transform(  ) {
			
			if ( ( this.lying ??0) > 0 ) {
				this.lying = 90;
			}
			base.update_transform();
			this.update_icons();
			return;
		}

		// Function from file: update_icons.dm
		public override bool regenerate_icons(  ) {
			
			if ( !base.regenerate_icons() ) {
				this.update_hud();
				this.update_transform();
			}
			return false;
		}

		// Function from file: update_icons.dm
		public override void update_icons(  ) {
			Image I = null;
			string old_icon = null;
			string old_icon2 = null;

			this.update_hud();
			this.overlays.Cut();

			foreach (dynamic _a in Lang13.Enumerate( this.overlays_standing, typeof(Image) )) {
				I = _a;
				
				this.overlays.Add( I );
			}

			if ( this.stat == 2 ) {
				
				if ( this.fireloss > 125 ) {
					this.icon_state = "alien" + this.caste + "_husked";
				} else {
					this.icon_state = "alien" + this.caste + "_dead";
				}
			} else if ( this.stat == 1 && !( this.sleeping != 0 ) || this.weakened != 0 ) {
				this.icon_state = "alien" + this.caste + "_unconscious";
			} else if ( this.leap_on_click ) {
				this.icon_state = "alien" + this.caste + "_pounce";
			} else if ( Lang13.Bool( this.lying ) || this.resting != 0 || this.sleeping != 0 ) {
				this.icon_state = "alien" + this.caste + "_sleep";
			} else if ( this.mob_size == 3 ) {
				this.icon_state = "alien" + this.caste;
			} else {
				this.icon_state = "alien" + this.caste + "_s";
			}

			if ( this.leaping ) {
				
				if ( this.alt_icon == Lang13.Initial( this, "alt_icon" ) ) {
					old_icon = this.icon;
					this.icon = this.alt_icon;
					this.alt_icon = old_icon;
				}
				this.icon_state = "alien" + this.caste + "_leap";
				this.pixel_x = -32;
				this.pixel_y = -32;
			} else {
				
				if ( this.alt_icon != Lang13.Initial( this, "alt_icon" ) ) {
					old_icon2 = this.icon;
					this.icon = this.alt_icon;
					this.alt_icon = old_icon2;
				}
				this.pixel_x = Convert.ToInt32( this.get_standard_pixel_x_offset( this.lying ) );
				this.pixel_y = Convert.ToInt32( this.get_standard_pixel_y_offset( this.lying ) );
			}
			return;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.update_hud();

			if ( !( this.loc is Tile ) ) {
				this.client.eye = this.loc;
				this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
			}
			return null;
		}

		// Function from file: life.dm
		public double adjust_body_temperature( dynamic current = null, dynamic loc_temp = null, dynamic boost = null ) {
			int temperature = 0;
			double difference = 0;
			double increments = 0;
			double change = 0;
			double temp_change = 0;

			temperature = Convert.ToInt32( current );
			difference = Math.Abs( Convert.ToDouble( current - loc_temp ) );

			if ( difference > 50 ) {
				increments = difference / 5;
			} else {
				increments = difference / 10;
			}
			change = increments * Convert.ToDouble( boost );

			if ( Convert.ToDouble( current ) < Convert.ToDouble( loc_temp ) ) {
				temperature = Num13.MinInt( Convert.ToInt32( loc_temp ), ((int)( temperature + change )) );
			} else if ( Convert.ToDouble( current ) > Convert.ToDouble( loc_temp ) ) {
				temperature = Num13.MaxInt( Convert.ToInt32( loc_temp ), ((int)( temperature - change )) );
			}
			temp_change = temperature - Convert.ToDouble( current );
			return temp_change;
		}

		// Function from file: inventory.dm
		public override bool unEquip( dynamic I = null, bool? force = null ) {
			bool _default = false;

			_default = base.unEquip( (object)(I), force );

			if ( !_default || !Lang13.Bool( I ) ) {
				return _default;
			}
			return _default;
		}

		// Function from file: humanoid.dm
		public override void alien_evolve( Mob_Living_Carbon_Alien_Humanoid_Royal new_xeno = null ) {
			Ent_Dynamic A = null;

			this.drop_l_hand();
			this.drop_r_hand();

			foreach (dynamic _a in Lang13.Enumerate( this.stomach_contents, typeof(Ent_Dynamic) )) {
				A = _a;
				
				this.stomach_contents.Remove( A );
				new_xeno.stomach_contents.Add( A );
				A.loc = new_xeno;
			}
			base.alien_evolve( new_xeno );
			return;
		}

		// Function from file: humanoid.dm
		public override double get_permeability_protection(  ) {
			return 0.8;
		}

		// Function from file: humanoid.dm
		public override bool check_ear_prot(  ) {
			return true;
		}

		// Function from file: humanoid.dm
		public override dynamic get_standard_pixel_x_offset( int? lying = null ) {
			lying = lying ?? 0;

			
			if ( this.leaping ) {
				return -32;
			} else if ( this.custom_pixel_x_offset ) {
				return this.custom_pixel_x_offset;
			} else {
				return Lang13.Initial( this, "pixel_x" );
			}
			return null;
		}

		// Function from file: humanoid.dm
		public override dynamic get_standard_pixel_y_offset( int? lying = null ) {
			lying = lying ?? 0;

			
			if ( this.leaping ) {
				return -32;
			} else if ( this.custom_pixel_y_offset ) {
				return this.custom_pixel_y_offset;
			} else {
				return Lang13.Initial( this, "pixel_y" );
			}
			return null;
		}

		// Function from file: humanoid.dm
		public override void cuff_resist( dynamic I = null, double? breakouttime = null, bool? cuff_break = null ) {
			GlobalFuncs.playsound( this, "sound/voice/hiss5.ogg", 40, 1, 1 );
			base.cuff_resist( (object)(I), (double?)(null), true );
			return;
		}

		// Function from file: humanoid.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.canUseTopic( this, true, true ) ) {
				
				if ( Lang13.Bool( href_list["pouches"] ) ) {
					this.visible_message( "<span class='danger'>" + Task13.User + " tries to empty " + this + "'s pouches.</span>", "<span class='userdanger'>" + Task13.User + " tries to empty " + this + "'s pouches.</span>" );

					if ( GlobalFuncs.do_mob( Task13.User, this, 20 ) ) {
						this.unEquip( this.r_store );
						this.unEquip( this.l_store );
					}
				}
			}
			return null;
		}

		// Function from file: humanoid.dm
		public override void show_inv( Ent_Static user = null ) {
			string dat = null;

			((dynamic)user).set_machine( this );
			dat = new Txt( "\n	<HR>\n	<B><FONT size=3>" ).item( this.name ).str( "</FONT></B>\n	<HR>\n	<BR><B>Left Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=" ).item( 4 ).str( "'>		" ).item( ( Lang13.Bool( this.l_hand ) ? this.l_hand : ((dynamic)( "Nothing" )) ) ).str( "</A>\n	<BR><B>Right Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=" ).item( 5 ).str( "'>		" ).item( ( Lang13.Bool( this.r_hand ) ? this.r_hand : ((dynamic)( "Nothing" )) ) ).str( "</A>\n	<BR><A href='?src=" ).Ref( this ).str( ";pouches=1'>Empty Pouches</A>" ).ToString();

			if ( Lang13.Bool( this.handcuffed ) ) {
				dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";item=" ).item( 3 ).str( "'>Handcuffed</A>" ).ToString();
			}

			if ( Lang13.Bool( this.legcuffed ) ) {
				dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";item=" ).item( 19 ).str( "'>Legcuffed</A>" ).ToString();
			}
			dat += new Txt( "\n	<BR>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).Ref( this ).str( "'>Close</A>\n	" ).ToString();
			Interface13.Browse( user, dat, new Txt( "window=mob" ).Ref( this ).str( ";size=325x500" ).ToString() );
			GlobalFuncs.onclose( user, new Txt( "mob" ).Ref( this ).ToString() );
			return;
		}

		// Function from file: humanoid.dm
		public override bool restrained(  ) {
			
			if ( Lang13.Bool( this.handcuffed ) ) {
				return true;
			}
			return false;
		}

		// Function from file: humanoid.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			int damage = 0;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				
				dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
				if ( _a=="harm" ) {
					damage = Rand13.Int( 1, 9 );

					if ( Rand13.PercentChance( 90 ) ) {
						GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
						this.visible_message( "<span class='danger'>" + a + " has punched " + this + "!</span>", "<span class='userdanger'>" + a + " has punched " + this + "!</span>" );

						if ( this.stat != 2 && ( damage > 9 || Rand13.PercentChance( 5 ) ) ) {
							this.Paralyse( 2 );
							this.visible_message( "<span class='danger'>" + a + " has weakened " + this + "!</span>", "<span class='userdanger'>" + a + " has weakened " + this + "!</span>" );
						}
						this.adjustBruteLoss( damage );
						GlobalFuncs.add_logs( a, this, "attacked" );
						this.updatehealth();
					} else {
						GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
						this.visible_message( "<span class='danger'>" + a + " has attempted to punch " + this + "!</span>" );
					}
				} else if ( _a=="disarm" ) {
					
					if ( !Lang13.Bool( this.lying ) ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							this.Paralyse( 2 );
							GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
							GlobalFuncs.add_logs( a, this, "pushed" );
							this.visible_message( "<span class='danger'>" + a + " has pushed down " + this + "!</span>", "<span class='userdanger'>" + a + " has pushed down " + this + "!</span>" );
						} else if ( Rand13.PercentChance( 50 ) ) {
							this.drop_item();
							GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
							this.visible_message( "<span class='danger'>" + a + " has disarmed " + this + "!</span>", "<span class='userdanger'>" + a + " has disarmed " + this + "!</span>" );
						} else {
							GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
							this.visible_message( "<span class='danger'>" + a + " has attempted to disarm " + this + "!</span>" );
						}
					}
				}
			}
			return null;
		}

		// Function from file: humanoid.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			string hitverb = null;

			
			if ( hulk.a_intent == "harm" ) {
				base.attack_hulk( hulk, true );
				this.adjustBruteLoss( 15 );
				hitverb = "punched";

				if ( this.mob_size < 3 ) {
					this.Paralyse( 1 );
					Map13.StepAway( this, hulk, 15 );
					Task13.Sleep( 1 );
					Map13.StepAway( this, hulk, 15 );
					hitverb = "slammed";
				}
				GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
				this.visible_message( "<span class='danger'>" + hulk + " has " + hitverb + " " + this + "!</span>", "<span class='userdanger'>" + hulk + " has " + hitverb + " " + this + "!</span>" );
				return true;
			}
			return false;
		}

		// Function from file: humanoid.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( this.r_store != null ) {
				this.r_store.emp_act( severity );
			}

			if ( this.l_store != null ) {
				this.l_store.emp_act( severity );
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: humanoid.dm
		public override dynamic movement_delay(  ) {
			dynamic _default = null;

			_default = base.movement_delay();
			_default += this.move_delay_add + ( GlobalVars.config.alien_delay ??0) + ( this.sneaking ?1:0);
			return _default;
		}

		// Function from file: tgstation.dme
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			string param = null;
			int t1 = 0;
			bool muzzled = false;

			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}
			muzzled = this.is_muzzled();

			switch ((string)( act )) {
				case "deathgasp":
				case "deathgasps":
					message = "<span class='name'>" + this + "</span> lets out a waning guttural screech, green blood bubbling from its maw...";
					m_type = 2;
					break;
				case "gnarl":
				case "gnarls":
					
					if ( !muzzled ) {
						message = "<span class='name'>" + this + "</span> gnarls and shows its teeth..";
						m_type = 2;
					}
					break;
				case "hiss":
				case "hisses":
					
					if ( !muzzled ) {
						message = "<span class='name'>" + this + "</span> hisses.";
						m_type = 2;
					}
					break;
				case "me":
					base.emote( act, m_type, (object)(message) );
					return;
					break;
				case "moan":
				case "moans":
					message = "<span class='name'>" + this + "</span> moans!";
					m_type = 2;
					break;
				case "roar":
				case "roars":
					
					if ( !muzzled ) {
						message = "<span class='name'>" + this + "</span> roars.";
						m_type = 2;
					}
					break;
				case "roll":
				case "rolls":
					
					if ( !this.restrained() ) {
						message = "<span class='name'>" + this + "</span> rolls.";
						m_type = 1;
					}
					break;
				case "scratch":
				case "scratches":
					
					if ( !this.restrained() ) {
						message = "<span class='name'>" + this + "</span> scratches.";
						m_type = 1;
					}
					break;
				case "screech":
				case "screeches":
					
					if ( !muzzled ) {
						message = "<span class='name'>" + this + "</span> screeches.";
						m_type = 2;
					}
					break;
				case "shiver":
				case "shivers":
					message = "<span class='name'>" + this + "</span> shivers.";
					m_type = 2;
					break;
				case "sign":
				case "signs":
					
					if ( !this.restrained() ) {
						message = "<span class='name'>" + this + "</span> signs" + ( Lang13.Bool( String13.ParseNumber( param ) ) ? " the number " + String13.ParseNumber( param ) : null ) + ".";
						m_type = 1;
					}
					break;
				case "tail":
					message = "<span class='name'>" + this + "</span> waves its tail.";
					m_type = 1;
					break;
				case "help":
					this.WriteMsg( "Help for xenomorph emotes. You can use these emotes with say \"*emote\":\n\naflap, airguitar, blink, blink_r, blush, bow, burp, choke, chucke, clap, collapse, cough, dance, deathgasp, drool, flap, frown, gasp, giggle, glare-(none)/mob, gnarl, hiss, jump, laugh, look-atom, me, moan, nod, point-atom, roar, roll, scream, scratch, screech, shake, shiver, sign-#, sit, smile, sneeze, sniff, snore, stare-(none)/mob, sulk, sway, tail, tremble, twitch, twitch_s, wave, whimper, wink, yawn" );
					break;
				default:
					base.emote( act, m_type, (object)(message) );
					break;
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message );

				if ( act == "roar" ) {
					GlobalFuncs.playsound( this.loc, "sound/voice/hiss5.ogg", 40, 1, 1 );
				}

				if ( act == "deathgasp" ) {
					GlobalFuncs.playsound( this.loc, "sound/voice/hiss6.ogg", 80, 1, 1 );
				}

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else {
					this.audible_message( message );
				}
			}
			return;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			
			if ( this.stat == 2 ) {
				return false;
			}

			if ( this.healths != null ) {
				this.healths.icon_state = "health6";
			}
			this.stat = 2;

			if ( !( gibbed == true ) ) {
				GlobalFuncs.playsound( this.loc, "sound/voice/hiss6.ogg", 80, 1, 1 );
				this.visible_message( "<span class='name'>" + this + "</span> lets out a waning guttural screech, green blood bubbling from its maw..." );
				this.update_canmove();

				if ( this.client != null ) {
					this.blind.layer = 0;
				}
				this.update_icons();
				this.status_flags |= 8;
			}
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );
			}
			return base.death( gibbed, toast );
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( !this.canSuicide() ) {
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( !this.canSuicide() ) {
				return;
			}

			if ( confirm == "Yes" ) {
				this.suiciding = true;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " is thrashing wildly! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).item( this ).str( " is thrashing wildly! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), "<span class='italics'>You hear thrashing.</span>" );
				this.adjustOxyLoss( Num13.MaxInt( ((int)( 200 - this.getFireLoss() - this.getBruteLoss() - Convert.ToDouble( this.getOxyLoss() ) )), 0 ) );
				this.updatehealth();
				this.death( false );
			}
			return;
		}

	}

}