// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Window : Obj_Machinery_Door {

		public string base_state = "left";
		public int health = 150;
		public dynamic electronics = null;
		public bool reinf = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.visible = false;
			this.flags = 512;
			this.icon = "icons/obj/doors/windoor.dmi";
			this.icon_state = "left";
		}

		// Function from file: windowdoor.dm
		public Obj_Machinery_Door_Window ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( this.req_access ) && Lang13.Bool( this.req_access.len ) ) {
				this.icon_state = "" + this.icon_state;
				this.base_state = this.icon_state;
			}
			return;
		}

		// Function from file: windowdoor.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			base.attack_hulk( hulk, true );
			hulk.visible_message( "<span class='danger'>" + hulk + " smashes through the windoor!</span>", "<span class='danger'>You tear through the windoor!</span>" );
			hulk.say( Rand13.Pick(new object [] { ";RAAAAAAAARGH!", ";HNNNNNNNNNGGGGGGH!", ";GWAAAAAAAARRRHHH!", "NNNNNNNNGGGGGGGGHH!", ";AAAAAAARRRGH!" }) );
			GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 100, 1 );
			this.take_damage( this.health );
			return false;
		}

		// Function from file: windowdoor.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Structure_WindoorAssembly WA = null;
			dynamic ae = null;
			dynamic aforce = null;

			
			if ( this.operating ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Card_Emag ) {
				return null;
			}
			this.add_fingerprint( user );

			if ( !Lang13.Bool( this.flags & 128 ) ) {
				
				if ( A is Obj_Item_Weapon_Screwdriver ) {
					
					if ( this.density || this.operating ) {
						user.WriteMsg( "<span class='warning'>You need to open the door to access the maintenance panel!</span>" );
						return null;
					}
					GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );
					this.p_open = !this.p_open;
					user.WriteMsg( "<span class='notice'>You " + ( this.p_open ? "open" : "close" ) + " the maintenance panel of the " + this.name + ".</span>" );
					return null;
				}

				if ( A is Obj_Item_Weapon_Crowbar ) {
					
					if ( this.p_open && !this.density && !this.operating ) {
						GlobalFuncs.playsound( this.loc, "sound/items/Crowbar.ogg", 100, 1 );
						((Ent_Static)user).visible_message( "" + user + " removes the electronics from the " + this.name + ".", "<span class='notice'>You start to remove electronics from the " + this.name + "...</span>" );

						if ( GlobalFuncs.do_after( user, 40 / A.toolspeed, null, this ) ) {
							
							if ( this.p_open && !this.density && !this.operating && this.loc != null ) {
								WA = new Obj_Structure_WindoorAssembly( this.loc );

								switch ((string)( this.base_state )) {
									case "left":
										WA.facing = "l";
										break;
									case "right":
										WA.facing = "r";
										break;
									case "leftsecure":
										WA.facing = "l";
										WA.secure = true;
										break;
									case "rightsecure":
										WA.facing = "r";
										WA.secure = true;
										break;
								}
								WA.anchored = 1;
								WA.state = "02";
								WA.dir = this.dir;
								WA.ini_dir = this.dir;
								WA.update_icon();
								WA.created_name = this.name;

								if ( this.emagged != 0 ) {
									user.WriteMsg( "<span class='warning'>You discard the damaged electronics.</span>" );
									GlobalFuncs.qdel( this );
									return null;
								}
								user.WriteMsg( "<span class='notice'>You remove the airlock electronics.</span>" );
								ae = null;

								if ( !Lang13.Bool( this.electronics ) ) {
									ae = new Obj_Item_Weapon_Electronics_Airlock( this.loc );

									if ( Lang13.Bool( this.req_one_access ) ) {
										ae.one_access = true;
										ae.accesses = this.req_one_access;
									} else {
										ae.accesses = this.req_access;
									}
								} else {
									ae = this.electronics;
									this.electronics = null;
									ae.loc = this.loc;
								}
								GlobalFuncs.qdel( this );
							}
						}
						return null;
					}
				}
			}

			if ( A is Obj_Item_Weapon_Crowbar || A is Obj_Item_Weapon_Twohanded_Fireaxe || A is Obj_Item_Weapon_Melee_ArmBlade ) {
				
				if ( !this.hasPower() ) {
					
					if ( this.density ) {
						this.open( 2 );
					} else {
						this.close( 2 );
					}
					return null;
				}
			}

			if ( this.density && A is Obj_Item_Weapon && !( A is Obj_Item_Weapon_Card ) ) {
				((Mob)user).changeNext_move( 8 );
				((Ent_Dynamic)user).do_attack_animation( this );

				if ( Lang13.Bool( A.flags & 4 ) || !Lang13.Bool( A.force ) ) {
					return null;
				}
				aforce = A.force;
				GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 75, 1 );
				this.visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " has hit " ).the( this ).item().str( " with " ).item( A ).str( ".</span>" ).ToString() );

				if ( A.damtype == "fire" || A.damtype == "brute" ) {
					this.take_damage( aforce );
				}
				return null;
			}

			if ( !this.requiresID() ) {
				user = null;
			}

			if ( this.allowed( user ) ) {
				
				if ( this.density ) {
					this.open();
				} else {
					this.close();
				}
			} else if ( this.density ) {
				Icon13.Flick( "" + this.base_state + "deny", this );
			}
			return null;
		}

		// Function from file: windowdoor.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !this.operating && this.density && !( this.emagged != 0 ) ) {
				this.operating = true;
				Icon13.Flick( "" + this.base_state + "spark", this );
				Task13.Sleep( 6 );
				this.operating = false;
				this.desc += "<BR><span class='warning'>Its access panel is smoking slightly.</span>";
				this.open();
				this.emagged = 1;
			}
			return false;
		}

		// Function from file: windowdoor.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			return this.attackby( a, a );
		}

		// Function from file: windowdoor.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: windowdoor.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			user.do_attack_animation( this );

			if ( !user.is_adult ) {
				return false;
			}
			this.attack_generic( user, 25 );
			return false;
		}

		// Function from file: windowdoor.dm
		public override bool attack_animal( Mob_Living user = null ) {
			Mob_Living M = null;

			
			if ( !( user is Mob_Living_SimpleAnimal ) ) {
				return false;
			}
			M = user;
			M.do_attack_animation( this );

			if ( Convert.ToDouble( ((dynamic)M).melee_damage_upper ) > 0 && ( ((dynamic)M).melee_damage_type == "brute" || ((dynamic)M).melee_damage_type == "fire" ) ) {
				this.attack_generic( M, Lang13.DoubleNullable( ((dynamic)M).melee_damage_upper ) );
			}
			return false;
		}

		// Function from file: windowdoor.dm
		public override bool attack_alien( dynamic user = null ) {
			((Ent_Dynamic)user).do_attack_animation( this );

			if ( user is Mob_Living_Carbon_Alien_Larva ) {
				return false;
			}
			this.attack_generic( user, 25 );
			return false;
		}

		// Function from file: windowdoor.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: windowdoor.dm
		public override bool mech_melee_attack( Obj_Mecha M = null ) {
			
			if ( M.damtype == "brute" ) {
				GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 75, 1 );
				this.visible_message( "<span class='danger'>" + M.name + " has hit " + this + ".</span>" );
				this.take_damage( M.force );
			}
			return false;
		}

		// Function from file: windowdoor.dm
		public override bool hitby( Ent_Dynamic AM = null, bool? skipcatch = null, bool? hitpush = null, bool? blocked = null ) {
			dynamic tforce = null;

			base.hitby( AM, skipcatch, hitpush, blocked );
			tforce = 0;

			if ( AM is Mob ) {
				tforce = 40;
			} else {
				tforce = ((dynamic)AM).throwforce;
			}
			GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 100, 1 );
			this.take_damage( tforce );
			return false;
		}

		// Function from file: windowdoor.dm
		public override dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			
			if ( Convert.ToDouble( exposed_temperature ) > ( this.reinf ? 1600 : 800 ) + 273.41 ) {
				this.take_damage( Num13.Floor( ( exposed_volume ??0) / 200 ) );
			}
			base.temperature_expose( air, (object)(exposed_temperature), exposed_volume );
			return null;
		}

		// Function from file: windowdoor.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( Lang13.Bool( P.damage ) ) {
				
				if ( P.damage_type == "brute" || P.damage_type == "fire" ) {
					this.take_damage( Num13.Floor( Convert.ToDouble( P.damage / 2 ) ) );
				}
			}
			base.bullet_act( (object)(P), (object)(def_zone) );
			return null;
		}

		// Function from file: windowdoor.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 25 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						this.take_damage( 120 );
					}
					break;
				case 3:
					this.take_damage( 60 );
					break;
			}
			return false;
		}

		// Function from file: windowdoor.dm
		public override bool close( int? surpress_send = null ) {
			surpress_send = surpress_send ?? 0;

			
			if ( this.operating ) {
				return false;
			}

			if ( !Lang13.Bool( surpress_send ) ) {
				
				if ( !this.hasPower() ) {
					return false;
				}
			}

			if ( ( surpress_send ??0) < 2 ) {
				
				if ( this.emagged != 0 ) {
					return false;
				}
			}
			this.operating = true;
			Icon13.Flick( "" + this.base_state + "closing", this );
			GlobalFuncs.playsound( this.loc, "sound/machines/windowdoor.ogg", 100, 1 );
			this.icon_state = this.base_state;
			this.density = true;
			this.air_update_turf( true );
			this.update_freelook_sight();
			Task13.Sleep( 10 );
			this.operating = false;
			return true;
		}

		// Function from file: windowdoor.dm
		public override bool open( int? surpress_send = null ) {
			surpress_send = surpress_send ?? 0;

			
			if ( this.operating ) {
				return false;
			}

			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				return false;
			}

			if ( !Lang13.Bool( surpress_send ) ) {
				
				if ( !this.hasPower() ) {
					return false;
				}
			}

			if ( ( surpress_send ??0) < 2 ) {
				
				if ( this.emagged != 0 ) {
					return false;
				}
			}

			if ( !this.operating ) {
				this.operating = true;
			}
			Icon13.Flick( "" + this.base_state + "opening", this );
			GlobalFuncs.playsound( this.loc, "sound/machines/windowdoor.ogg", 100, 1 );
			this.icon_state = "" + this.base_state + "open";
			Task13.Sleep( 10 );
			this.density = false;
			this.air_update_turf( true );
			this.update_freelook_sight();

			if ( this.operating ) {
				this.operating = false;
			}
			return true;
		}

		// Function from file: windowdoor.dm
		public override bool CheckExit( Ent_Dynamic O = null, Tile target = null ) {
			
			if ( O is Ent_Dynamic && O.checkpass( 2 ) != 0 ) {
				return true;
			}

			if ( Map13.GetDistance( this.loc, target ) == this.dir ) {
				return !this.density;
			} else {
				return true;
			}
		}

		// Function from file: windowdoor.dm
		public override bool CanAStarPass( dynamic ID = null, int to_dir = 0 ) {
			return !this.density || this.dir != to_dir || this.check_access( ID ) && this.hasPower();
		}

		// Function from file: windowdoor.dm
		public override bool CanAtmosPass( dynamic T = null ) {
			
			if ( Map13.GetDistance( this.loc, T ) == this.dir ) {
				return !this.density;
			} else {
				return true;
			}
		}

		// Function from file: windowdoor.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			
			if ( mover is Ent_Dynamic && ((Ent_Dynamic)mover).checkpass( 2 ) != 0 ) {
				return true;
			}

			if ( Map13.GetDistance( this.loc, target ) == this.dir ) {
				return !this.density;
			} else {
				return true;
			}
		}

		// Function from file: windowdoor.dm
		public override void bumpopen( dynamic user = null ) {
			
			if ( this.operating || !this.density ) {
				return;
			}
			this.add_fingerprint( user );

			if ( !this.requiresID() ) {
				user = null;
			}

			if ( this.allowed( user ) ) {
				this.open_and_close();
			} else {
				Icon13.Flick( "" + this.base_state + "deny", this );
			}
			return;
		}

		// Function from file: windowdoor.dm
		public override bool Bumped( dynamic AM = null ) {
			dynamic mecha = null;
			dynamic M = null;

			
			if ( this.operating || !this.density ) {
				return false;
			}

			if ( !( AM is Mob ) ) {
				
				if ( AM is Obj_Mecha ) {
					mecha = AM;

					if ( Lang13.Bool( mecha.occupant ) && this.allowed( mecha.occupant ) ) {
						this.open_and_close();
					} else {
						Icon13.Flick( "" + this.base_state + "deny", this );
					}
				}
				return false;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				return false;
			}
			M = AM;

			if ( !((Mob)M).restrained() ) {
				this.bumpopen( M );
			}
			return false;
		}

		// Function from file: windowdoor.dm
		public void attack_generic( dynamic user = null, double? damage = null ) {
			damage = damage ?? 0;

			
			if ( this.operating ) {
				return;
			}
			((Mob)user).changeNext_move( 8 );
			GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 75, 1 );
			((Ent_Static)user).visible_message( "<span class='danger'>" + user + " smashes against the " + this.name + "!</span>", "<span class='userdanger'>You smash against the " + this.name + "!</span>" );
			this.take_damage( damage );
			return;
		}

		// Function from file: windowdoor.dm
		public void take_damage( dynamic damage = null ) {
			ByTable debris = null;
			Obj fragment = null;

			this.health = Num13.MaxInt( 0, ((int)( this.health - Convert.ToDouble( damage ) )) );

			if ( this.health <= 0 ) {
				
				if ( !Lang13.Bool( this.flags & 128 ) ) {
					debris = new ByTable(new object [] { new Obj_Item_Weapon_Shard( this.loc ), new Obj_Item_Weapon_Shard( this.loc ), new Obj_Item_Stack_Rods( this.loc, 2 ), new Obj_Item_Stack_CableCoil( this.loc, 2 ) });

					foreach (dynamic _a in Lang13.Enumerate( debris, typeof(Obj) )) {
						fragment = _a;
						
						this.transfer_fingerprints_to( fragment );
					}
				}
				this.density = false;
				GlobalFuncs.qdel( this );
				return;
			}
			return;
		}

		// Function from file: windowdoor.dm
		public void open_and_close(  ) {
			this.open();

			if ( this.check_access( null ) ) {
				Task13.Sleep( 50 );
			} else {
				Task13.Sleep( 20 );
			}
			this.close();
			return;
		}

		// Function from file: windowdoor.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.density ) {
				this.icon_state = this.base_state;
			} else {
				this.icon_state = "" + this.base_state + "open";
			}
			return null;
		}

		// Function from file: windowdoor.dm
		public override dynamic Destroy(  ) {
			this.density = false;

			if ( this.health == 0 ) {
				GlobalFuncs.playsound( this, "shatter", 70, 1 );
			}
			this.electronics = null;
			return base.Destroy();
		}

	}

}