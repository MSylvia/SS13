// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Floor : Tile_Simulated {

		public string icon_regular_floor = "floor";
		public string icon_plating = "plating";
		public bool broken = false;
		public bool burnt = false;
		public Type floor_tile = null;
		public dynamic builtin_tile = null;
		public ByTable broken_states = new ByTable(new object [] { "damaged1", "damaged2", "damaged3", "damaged4", "damaged5" });
		public ByTable burnt_states = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.thermal_conductivity = 0.31;
			this.heat_capacity = 10000;
		}

		// Function from file: floor.dm
		public Tile_Simulated_Floor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.icons_to_ignore_at_floor_init.Contains( this.icon_state ) ) {
				this.icon_regular_floor = "floor";
			} else {
				this.icon_regular_floor = this.icon_state;
			}

			if ( this.floor_tile != null ) {
				this.builtin_tile = Lang13.Call( this.floor_tile );
			}
			return;
		}

		// Function from file: floor.dm
		public override int can_have_cabling(  ) {
			return ( !this.burnt ?1:0) & ( !this.broken ?1:0);
		}

		// Function from file: floor.dm
		public override void narsie_act(  ) {
			
			if ( Rand13.PercentChance( 20 ) ) {
				this.ChangeTurf( typeof(Tile_Simulated_Floor_Engine_Cult) );
			}
			return;
		}

		// Function from file: floor.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			
			if ( current_size == 5 ) {
				
				if ( Rand13.PercentChance( 30 ) ) {
					
					if ( Lang13.Bool( this.builtin_tile ) ) {
						this.builtin_tile.loc = this;
						this.make_plating();
					}
				}
			} else if ( current_size == 7 ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					
					if ( Lang13.Bool( this.builtin_tile ) ) {
						this.builtin_tile.loc = this;
						this.make_plating();
					}
				}
			} else if ( ( current_size ??0) >= 9 ) {
				
				if ( Lang13.Bool( this.builtin_tile ) ) {
					
					if ( Rand13.PercentChance( 70 ) ) {
						this.builtin_tile.loc = this;
						this.make_plating();
					}
				} else if ( Rand13.PercentChance( 50 ) ) {
					this.ReplaceWithLattice();
				}
			}
			return;
		}

		// Function from file: floor.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( !Lang13.Bool( A ) || !Lang13.Bool( user ) ) {
				return 1;
			}

			if ( Lang13.Bool( base.attackby( (object)(A), (object)(user), _params, silent, replace_spent ) ) ) {
				return 1;
			}

			if ( this.intact && A is Obj_Item_Weapon_Crowbar ) {
				
				if ( this.broken || this.burnt ) {
					this.broken = false;
					this.burnt = false;
					user.WriteMsg( "<span class='danger'>You remove the broken plating.</span>" );
				} else if ( this is Tile_Simulated_Floor_Wood ) {
					user.WriteMsg( "<span class='danger'>You forcefully pry off the planks, destroying them in the process.</span>" );
				} else {
					user.WriteMsg( "<span class='danger'>You remove the floor tile.</span>" );
					this.builtin_tile.loc = this;
				}
				this.make_plating();
				GlobalFuncs.playsound( this, "sound/items/Crowbar.ogg", 80, 1 );
				return 1;
			}
			return 0;
		}

		// Function from file: floor.dm
		public override dynamic ChangeTurf( dynamic path = null ) {
			string old_icon = null;
			int old_dir = 0;
			dynamic W = null;

			
			if ( !( this is Tile_Simulated_Floor ) ) {
				return base.ChangeTurf( (object)(path) );
			}

			if ( !Lang13.Bool( path.IsSubclassOf( typeof(Tile_Simulated_Floor) ) ) ) {
				return base.ChangeTurf( (object)(path) );
			}
			old_icon = this.icon_regular_floor;
			old_dir = this.dir;
			W = base.ChangeTurf( (object)(path) );
			W.icon_regular_floor = old_icon;
			W.dir = old_dir;
			W.update_icon();
			return W;
		}

		// Function from file: floor.dm
		public override void burn_tile(  ) {
			
			if ( this.broken || this.burnt ) {
				return;
			}

			if ( this.burnt_states.len != 0 ) {
				this.icon_state = Rand13.PickFromTable( this.burnt_states );
			} else {
				this.icon_state = Rand13.PickFromTable( this.broken_states );
			}
			this.burnt = true;
			return;
		}

		// Function from file: floor.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: floor.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: floor.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			if ( target == this ) {
				this.ChangeTurf( this.baseturf );
			}

			if ( target != null ) {
				this.ex_act( 3 );
				return false;
			}

			switch ((double?)( severity )) {
				case 1:
					this.ChangeTurf( this.baseturf );
					break;
				case 2:
					
					dynamic _a = Rand13.PickWeighted(new object [] { 32443, 1, 33091, 75, 65535, 3 }); // Was a switch-case, sorry for the mess.
					if ( _a==1 ) {
						this.ReplaceWithLattice();

						if ( Rand13.PercentChance( 33 ) ) {
							new Obj_Item_Stack_Sheet_Metal( this );
						}
					} else if ( _a==2 ) {
						this.ChangeTurf( this.baseturf );
					} else if ( _a==3 ) {
						
						if ( Rand13.PercentChance( 80 ) ) {
							this.break_tile_to_plating();
						} else {
							this.break_tile();
						}
						this.hotspot_expose( 1000, 2500 );

						if ( Rand13.PercentChance( 33 ) ) {
							new Obj_Item_Stack_Sheet_Metal( this );
						}
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.break_tile();
						this.hotspot_expose( 1000, 2500 );
					}
					break;
			}
			return false;
		}

		// Function from file: floor.dm
		public override dynamic Destroy(  ) {
			
			if ( Lang13.Bool( this.builtin_tile ) ) {
				GlobalFuncs.qdel( this.builtin_tile );
				this.builtin_tile = null;
			}
			return base.Destroy();
		}

		// Function from file: floor.dm
		public virtual dynamic make_plating( bool? force = null ) {
			return this.ChangeTurf( typeof(Tile_Simulated_Floor_Plating) );
		}

		// Function from file: floor.dm
		public virtual void break_tile(  ) {
			
			if ( this.broken ) {
				return;
			}
			this.icon_state = Rand13.PickFromTable( this.broken_states );
			this.broken = true;
			return;
		}

		// Function from file: floor.dm
		public virtual void break_tile_to_plating(  ) {
			dynamic T = null;

			T = this.make_plating();
			((Tile_Simulated_Floor)T).break_tile();
			return;
		}

		// Function from file: floor.dm
		public void gets_drilled(  ) {
			return;
		}

		// Function from file: floor.dm
		public virtual bool update_icon(  ) {
			
			if ( this.air != null ) {
				this.update_visuals();
			}
			return true;
		}

		// Function from file: dirtystation.dm
		public void MakeDirty(  ) {
			Ent_Static A = null;

			
			if ( Rand13.PercentChance( 66 ) ) {
				return;
			}

			if ( this is Tile_Simulated_Floor_Carpet || this is Tile_Simulated_Floor_Grass || this is Tile_Simulated_Floor_Plating_Beach || this is Tile_Simulated_Floor_Holofloor || this is Tile_Simulated_Floor_Plating_Ironsand ) {
				return;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Grille), this.contents ) ) ) {
				return;
			}
			A = this.loc;

			if ( !( A is Zone ) || A is Zone_Centcom || A is Zone_Holodeck || A is Zone_Library || A is Zone_Janitor || A is Zone_Chapel || A is Zone_Mine_Explored || A is Zone_Mine_Unexplored || A is Zone_Solar || A is Zone_Atmos || A is Zone_Medical_Virology ) {
				return;
			}

			if ( A is Zone_Toxins_TestArea || A is Zone_Mine_Production || A is Zone_Mine_LivingQuarters || A is Zone_Mine_NorthOutpost || A is Zone_Mine_WestOutpost || A is Zone_Wreck || A is Zone_Derelict || A is Zone_Djstation ) {
				new Obj_Effect_Decal_Cleanable_Dirt( this );
				return;
			}

			if ( Rand13.PercentChance( 80 ) ) {
				return;
			}

			if ( A is Zone_Engine || A is Zone_Assembly || A is Zone_Maintenance || A is Zone_Construction ) {
				
				if ( Rand13.PercentChance( 3 ) ) {
					new Obj_Effect_Decal_Cleanable_Blood_Old( this );
				} else if ( Rand13.PercentChance( 35 ) ) {
					
					if ( Rand13.PercentChance( 4 ) ) {
						new Obj_Effect_Decal_Cleanable_RobotDebris_Old( this );
					} else {
						new Obj_Effect_Decal_Cleanable_Oil( this );
					}
				} else {
					new Obj_Effect_Decal_Cleanable_Dirt( this );
				}
				return;
			}

			if ( A is Zone_CrewQuarters_Toilet || A is Zone_CrewQuarters_Locker_LockerToilet ) {
				
				if ( Rand13.PercentChance( 40 ) ) {
					
					if ( Rand13.PercentChance( 90 ) ) {
						new Obj_Effect_Decal_Cleanable_Vomit_Old( this );
					} else {
						new Obj_Effect_Decal_Cleanable_Blood_Old( this );
					}
				}
				return;
			}

			if ( A is Zone_Quartermaster ) {
				
				if ( Rand13.PercentChance( 25 ) ) {
					new Obj_Effect_Decal_Cleanable_Oil( this );
				}
				return;
			}

			if ( Rand13.PercentChance( 75 ) ) {
				return;
			}

			if ( A is Zone_TurretProtected || A is Zone_Security ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					
					if ( Rand13.PercentChance( 5 ) ) {
						new Obj_Effect_Decal_Cleanable_Blood_Gibs_Old( this );
					} else {
						new Obj_Effect_Decal_Cleanable_Blood_Old( this );
					}
				}
				return;
			}

			if ( A is Zone_CrewQuarters_Kitchen ) {
				
				if ( Rand13.PercentChance( 60 ) ) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						new Obj_Effect_Decal_Cleanable_EggSmudge( this );
					} else {
						new Obj_Effect_Decal_Cleanable_Flour( this );
					}
				}
				return;
			}

			if ( A is Zone_Medical ) {
				
				if ( Rand13.PercentChance( 66 ) ) {
					
					if ( Rand13.PercentChance( 5 ) ) {
						new Obj_Effect_Decal_Cleanable_Blood_Gibs_Old( this );
					} else {
						new Obj_Effect_Decal_Cleanable_Blood_Old( this );
					}
				} else if ( Rand13.PercentChance( 30 ) ) {
					
					if ( A is Zone_Medical_Morgue ) {
						new Obj_Item_Weapon_Ectoplasm( this );
					} else {
						new Obj_Effect_Decal_Cleanable_Vomit_Old( this );
					}
				}
				return;
			}

			if ( A is Zone_Toxins ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					new Obj_Effect_Decal_Cleanable_Greenglow( this );
				}
				return;
			}
			return;
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			return;
		}

	}

}