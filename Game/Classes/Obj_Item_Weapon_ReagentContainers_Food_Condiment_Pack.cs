// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Food_Condiment_Pack : Obj_Item_Weapon_ReagentContainers_Food_Condiment {

		public string originalname = "condiment";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 10;
			this.amount_per_transfer_from_this = 10;
			this.possible_transfer_amounts = new ByTable();
			this.possible_states = new ByTable()
				.Set( "ketchup", new ByTable(new object [] { "condi_ketchup", "Ketchup", "You feel more American already." }) )
				.Set( "capsaicin", new ByTable(new object [] { "condi_hotsauce", "Hotsauce", "You can almost TASTE the stomach ulcers now!" }) )
				.Set( "soysauce", new ByTable(new object [] { "condi_soysauce", "Soy Sauce", "A salty soy-based flavoring" }) )
				.Set( "frostoil", new ByTable(new object [] { "condi_frostoil", "Coldsauce", "Leaves the tongue numb in it's passage" }) )
				.Set( "sodiumchloride", new ByTable(new object [] { "condi_salt", "Salt Shaker", "Salt. From space oceans, presumably" }) )
				.Set( "blackpepper", new ByTable(new object [] { "condi_pepper", "Pepper Mill", "Often used to flavor food or make people sneeze" }) )
				.Set( "cornoil", new ByTable(new object [] { "condi_cornoil", "Corn Oil", "A delicious oil used in cooking. Made from corn" }) )
				.Set( "sugar", new ByTable(new object [] { "condi_sugar", "Sugar", "Tasty spacey sugar!" }) )
			;
			this.icon_state = "condi_empty";
		}

		public Obj_Item_Weapon_ReagentContainers_Food_Condiment_Pack ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			
		}

		// Function from file: condiment.dm
		public override void on_reagent_change(  ) {
			string main_reagent = null;
			dynamic temp_list = null;

			
			if ( this.reagents.reagent_list.len > 0 ) {
				main_reagent = this.reagents.get_master_reagent_id();

				if ( this.possible_states.Contains( main_reagent ) ) {
					temp_list = this.possible_states[main_reagent];
					this.icon_state = temp_list[1];
					this.desc = temp_list[3];
				} else {
					this.icon_state = "condi_mixed";
					this.desc = "A small condiment pack. The label says it contains " + this.originalname;
				}
			} else {
				this.icon_state = "condi_empty";
				this.desc = "A small condiment pack. It is empty.";
			}
			return;
		}

		// Function from file: condiment.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			
			if ( !( proximity_flag == true ) ) {
				return false;
			}

			if ( target is Obj_Item_Weapon_ReagentContainers_Food_Snacks ) {
				
				if ( !Lang13.Bool( this.reagents.total_volume ) ) {
					user.WriteMsg( "<span class='warning'>You tear open " + this + ", but there's nothing in it.</span>" );
					GlobalFuncs.qdel( this );
					return false;
				}

				if ( ( target.reagents.total_volume ??0) >= Convert.ToDouble( target.reagents.maximum_volume ) ) {
					user.WriteMsg( "<span class='warning'>You tear open " + this + ", but " + target + " is stacked so high that it just drips off!</span>" );
					GlobalFuncs.qdel( this );
					return false;
				} else {
					user.WriteMsg( "<span class='notice'>You tear open " + this + " above " + target + " and the condiments drip onto it.</span>" );
					this.reagents.trans_to( target, this.amount_per_transfer_from_this );
					GlobalFuncs.qdel( this );
				}
			}
			return false;
		}

		// Function from file: condiment.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			return false;
		}

	}

}