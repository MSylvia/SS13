// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_ColdSink_Freezer : Obj_Machinery_Atmospherics_Components_Unary_ColdSink {

		public int min_temperature = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.current_heat_capacity = 1000;
			this.icon = "icons/obj/Cryogenic2.dmi";
			this.icon_state = "freezer";
		}

		// Function from file: Freezer.dm
		public Obj_Machinery_Atmospherics_Components_Unary_ColdSink_Freezer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.initialize_directions = this.dir;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Thermomachine( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			this.RefreshParts();
			return;
		}

		// Function from file: Freezer.dm
		public override void power_change(  ) {
			base.power_change();

			if ( ( this.stat & 2 ) != 0 ) {
				this.on = false;
				this.update_icon();
			}
			return;
		}

		// Function from file: Freezer.dm
		public override int? process( dynamic seconds = null ) {
			base.process( (object)(seconds) );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: Freezer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? amount = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["start"] ) ) {
				this.on = !this.on;
				this.use_power = ( this.on ?1:0) + 1;
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["temp"] ) ) {
				amount = String13.ParseNumber( href_list["temp"] );

				if ( ( amount ??0) > 0 ) {
					this.current_temperature = Num13.MinInt( ((int)( 293.41 )), ((int)( this.current_temperature + ( amount ??0) )) );
				} else {
					this.current_temperature = Num13.MaxInt( this.min_temperature, ((int)( this.current_temperature + ( amount ??0) )) );
				}
				this.active_power_usage = this.current_heat_capacity * ( 293.41 - this.current_temperature ) / 100 + this.idle_power_usage;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: Freezer.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic air_contents = null;
			string temp_text = null;
			string dat = null;
			Browser popup = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			air_contents = this.airs[1];
			((Mob)user).set_machine( this );
			temp_text = "";

			if ( Convert.ToDouble( air_contents.temperature ) > 253.41 ) {
				temp_text = "<span class='bad'>" + air_contents.temperature + "</span>";
			} else if ( Convert.ToDouble( air_contents.temperature ) < 253.41 && Convert.ToDouble( air_contents.temperature ) > 173.41 ) {
				temp_text = "<span class='average'>" + air_contents.temperature + "</span>";
			} else {
				temp_text = "<span class='good'>" + air_contents.temperature + "</span>";
			}
			dat = new Txt( "\n	Current Status: " ).item( ( this.on ? new Txt( "<A href='?src=" ).Ref( this ).str( ";start=1'>Off</A> <span class='linkOn'>On</span>" ).ToString() : new Txt( "<span class='linkOn'>Off</span> <A href='?src=" ).Ref( this ).str( ";start=1'>On</A>" ).ToString() ) ).str( "<BR>\n	Current Gas Temperature: " ).item( temp_text ).str( "<BR>\n	Current Air Pressure: " ).item( air_contents.return_pressure() ).str( "<BR>\n	Target Gas Temperature: <A href='?src=" ).Ref( this ).str( ";temp=-100'>-</A> <A href='?src=" ).Ref( this ).str( ";temp=-10'>-</A> <A href='?src=" ).Ref( this ).str( ";temp=-1'>-</A> " ).item( this.current_temperature ).str( " <A href='?src=" ).Ref( this ).str( ";temp=1'>+</A> <A href='?src=" ).Ref( this ).str( ";temp=10'>+</A> <A href='?src=" ).Ref( this ).str( ";temp=100'>+</A><BR>\n	" ).ToString();
			popup = new Browser( user, "freezer", "Cryo Gas Cooling System", 400, 240 );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: Freezer.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			return this.interact( a );
		}

		// Function from file: Freezer.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.interact( a );
		}

		// Function from file: Freezer.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.interact( user );
		}

		// Function from file: Freezer.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.panel_open == true ) {
				this.icon_state = "freezer-o";
			} else if ( this.on ) {
				this.icon_state = "freezer_1";
			} else {
				this.icon_state = "freezer";
			}
			return null;
		}

		// Function from file: Freezer.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( this.default_deconstruction_screwdriver( user, "freezer-o", "freezer", A ) ) {
				this.on = false;
				this.update_icon();
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );

			if ( this.default_change_direction_wrench( user, A ) ) {
				return null;
			}
			return null;
		}

		// Function from file: Freezer.dm
		public override void RefreshParts(  ) {
			dynamic H = null;
			dynamic T = null;
			Obj_Item_Weapon_StockParts_MatterBin M = null;
			Obj_Item_Weapon_StockParts_MicroLaser M2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _a;
				
				H += M.rating;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				M2 = _b;
				
				T += M2.rating;
			}
			this.min_temperature = Num13.MaxInt( ((int)( 273.41 - Convert.ToDouble( T * 15 + 170 ) )), ((int)( 2.7 )) );
			this.current_heat_capacity = Math.Pow( Convert.ToDouble( H - 1 ), 2 ) * 1000;
			return;
		}

		// Function from file: Freezer.dm
		public override void construction( dynamic pipe_type = null, dynamic obj_color = null ) {
			base.construction( this.dir, this.dir );
			return;
		}

	}

}