// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Glowshroom : Obj_Effect {

		public double endurance = 30;
		public int potency = 30;
		public int delay = 1200;
		public bool floor = false;
		public int? yield = 3;
		public int generation = 1;
		public int spreadIntoAdjacentChance = 60;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/lighting.dmi";
			this.icon_state = "glowshroom";
			this.layer = 2.1;
		}

		// Function from file: glowshroom.dm
		public Obj_Effect_Glowshroom ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic base_icon_state = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.SetLuminosity( Num13.Floor( this.potency / 10 ) );
			this.dir = Convert.ToInt32( this.CalcDir() );
			base_icon_state = Lang13.Initial( this, "icon_state" );

			if ( !this.floor ) {
				
				switch ((int)( this.dir )) {
					case 1:
						this.pixel_y = 32;
						break;
					case 2:
						this.pixel_y = -32;
						break;
					case 4:
						this.pixel_x = 32;
						break;
					case 8:
						this.pixel_x = -32;
						break;
				}
				this.icon_state = "" + base_icon_state + Rand13.Int( 1, 3 );
			} else {
				this.icon_state = "" + base_icon_state + "f";
			}
			Task13.Schedule( this.delay, (Task13.Closure)(() => {
				this.Spread();
				return;
			}));
			return;
		}

		// Function from file: glowshroom.dm
		public override dynamic acid_act( int acidpwr = 0, double? toxpwr = null, double? acid_volume = null ) {
			Obj_Effect_Decal_Cleanable_MoltenItem I = null;

			this.visible_message( "<span class='danger'>" + this + " melts away!</span>" );
			I = new Obj_Effect_Decal_Cleanable_MoltenItem( GlobalFuncs.get_turf( this ) );
			I.desc = new Txt( "Looks like this was " ).a( this ).item().str( " some time ago." ).ToString();
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: glowshroom.dm
		public override dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			
			if ( Convert.ToDouble( exposed_temperature ) > 300 ) {
				this.endurance -= 5;
				this.CheckEndurance();
			}
			return null;
		}

		// Function from file: glowshroom.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 5 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: glowshroom.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			this.endurance -= Convert.ToDouble( A.force );
			this.CheckEndurance();
			return null;
		}

		// Function from file: glowshroom.dm
		public void CheckEndurance(  ) {
			
			if ( this.endurance <= 0 ) {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: glowshroom.dm
		public dynamic CalcDir( Ent_Static location = null ) {
			location = location ?? this.loc;

			int direction = 0;
			dynamic wallDir = null;
			Tile newTurf = null;
			Obj_Effect_Glowshroom shroom = null;
			ByTable dirList = null;
			int? i = null;
			dynamic newDir = null;

			direction = 16;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				wallDir = _a;
				
				newTurf = Map13.GetStep( location, Convert.ToInt32( wallDir ) );

				if ( newTurf.density ) {
					direction |= Convert.ToInt32( wallDir );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( location, typeof(Obj_Effect_Glowshroom) )) {
				shroom = _b;
				

				if ( shroom == this ) {
					continue;
				}

				if ( shroom.floor ) {
					direction &= 65519;
				} else {
					direction &= ~shroom.dir;
				}
			}
			dirList = new ByTable();
			i = null;
			i = 1;

			while (( i ??0) <= 16) {
				
				if ( ( direction & ( i ??0) ) != 0 ) {
					dirList.Add( i );
				}
				i <<= 1;
			}

			if ( dirList.len != 0 ) {
				newDir = Rand13.PickFromTable( dirList );

				if ( newDir == 16 ) {
					this.floor = true;
					newDir = 1;
				}
				return newDir;
			}
			this.floor = true;
			return 1;
		}

		// Function from file: glowshroom.dm
		public void Spread(  ) {
			int? i = null;
			ByTable possibleLocs = null;
			bool spreadsIntoAdjacent = false;
			Tile_Simulated_Floor earth = null;
			dynamic newLoc = null;
			int shroomCount = 0;
			int placeCount = 0;
			Obj_Effect_Glowshroom shroom = null;
			dynamic wallDir = null;
			Tile isWall = null;
			dynamic child = null;

			i = null;
			i = 1;

			while (( i ??0) <= ( this.yield ??0)) {
				
				if ( Rand13.PercentChance( ((int)( 1 / ( this.generation * this.generation ) * 100 )) ) ) {
					possibleLocs = new ByTable();
					spreadsIntoAdjacent = false;

					if ( Rand13.PercentChance( this.spreadIntoAdjacentChance ) ) {
						spreadsIntoAdjacent = true;
					}

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 3 ), typeof(Tile_Simulated_Floor) )) {
						earth = _a;
						

						if ( spreadsIntoAdjacent || !Lang13.Bool( Lang13.FindIn( typeof(Obj_Effect_Glowshroom), Map13.FetchInView( earth, 1 ) ) ) ) {
							possibleLocs.Add( earth );
						}
					}

					if ( !( possibleLocs.len != 0 ) ) {
						break;
					}
					newLoc = Rand13.PickFromTable( possibleLocs );
					shroomCount = 0;
					placeCount = 1;

					foreach (dynamic _b in Lang13.Enumerate( newLoc, typeof(Obj_Effect_Glowshroom) )) {
						shroom = _b;
						
						shroomCount++;
					}

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.cardinal )) {
						wallDir = _c;
						
						isWall = Map13.GetStep( newLoc, Convert.ToInt32( wallDir ) );

						if ( isWall.density ) {
							placeCount++;
						}
					}

					if ( shroomCount >= placeCount ) {
						
					} else {
						child = Lang13.Call( this.type, newLoc );
						child.potency = Num13.MaxInt( this.potency + Rand13.Int( -3, 6 ), 0 );
						child.yield = Num13.MaxInt( ( this.yield ??0) + Rand13.Int( -1, 2 ), 0 );
						child.delay = Num13.MaxInt( this.delay + Rand13.Int( -30, 60 ), 0 );
						child.endurance = Num13.MaxInt( ((int)( this.endurance + Rand13.Int( -3, 6 ) )), 1 );
						child.generation = this.generation + 1;
						child.desc = new Txt( "This is a " ).st_nd_rd( child.generation ).str( " generation " ).item( child.name ).str( "!" ).ToString();
					}
				}
				i++;
			}
			return;
		}

	}

}