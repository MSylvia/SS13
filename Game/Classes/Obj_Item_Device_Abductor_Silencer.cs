// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Abductor_Silencer : Obj_Item_Device_Abductor {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "gizmo";
			this.origin_tech = "materials=5;magnets=5";
			this.icon = "icons/obj/abductor.dmi";
			this.icon_state = "silencer";
		}

		public Obj_Item_Device_Abductor_Silencer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: abduction_gear.dm
		public void radio_off_mob( Mob_Living_Carbon_Human M = null ) {
			ByTable all_items = null;
			Obj I = null;
			Obj r = null;

			all_items = M.GetAllContents();

			foreach (dynamic _a in Lang13.Enumerate( all_items, typeof(Obj) )) {
				I = _a;
				

				if ( I is Obj_Item_Device_Radio ) {
					r = I;
					((dynamic)r).listening = 0;

					if ( !( I is Obj_Item_Device_Radio_Headset ) ) {
						((dynamic)r).broadcasting = 0;
					}
				}
			}
			return;
		}

		// Function from file: abduction_gear.dm
		public void radio_off( dynamic target = null, dynamic user = null ) {
			dynamic targloc = null;
			Mob_Living_Carbon_Human M = null;

			
			if ( !Map13.FetchViewers( target, 7 ).Contains( user ) ) {
				return;
			}
			targloc = GlobalFuncs.get_turf( target );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( targloc, 2 ), typeof(Mob_Living_Carbon_Human) )) {
				M = _a;
				

				if ( M == user ) {
					continue;
				}
				user.WriteMsg( "<span class='notice'>You silence " + M + "'s radio devices.</span>" );
				this.radio_off_mob( M );
			}
			return;
		}

		// Function from file: abduction_gear.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			
			if ( proximity_flag == true ) {
				return false;
			}

			if ( !this.AbductorCheck( user ) ) {
				return false;
			}
			this.radio_off( target, user );
			return false;
		}

		// Function from file: abduction_gear.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( !this.AbductorCheck( user ) ) {
				return false;
			}
			this.radio_off( M, user );
			return false;
		}

	}

}