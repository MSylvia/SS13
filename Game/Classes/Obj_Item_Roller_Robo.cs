// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Roller_Robo : Obj_Item_Roller {

		public dynamic loaded = null;

		// Function from file: bed.dm
		public Obj_Item_Roller_Robo ( dynamic loc = null ) : base( (object)(loc) ) {
			this.loaded = new Obj_Structure_Bed_Roller( this );
			this.desc = "A collapsed roller bed that can be ejected for emergency use. Must be collected or replaced after use.";
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: bed.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic R = null;

			
			if ( target is Obj_Structure_Bed_Roller ) {
				
				if ( !( proximity_flag == true ) ) {
					return false;
				}

				if ( Lang13.Bool( this.loaded ) ) {
					user.WriteMsg( "<span class='warning'>You already have a roller bed docked!</span>" );
					return false;
				}
				R = target;

				if ( Lang13.Bool( R.buckled_mob ) ) {
					((Ent_Dynamic)R).user_unbuckle_mob( user );
				}
				this.loaded = target;
				target.loc = this;
				((Ent_Static)user).visible_message( "" + user + " collects " + this.loaded + ".", "<span class='notice'>You collect " + this.loaded + ".</span>" );
			}
			base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );
			return false;
		}

		// Function from file: bed.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic R = null;

			
			if ( Lang13.Bool( this.loaded ) ) {
				R = this.loaded;
				R.loc = user.loc;
				((Ent_Static)user).visible_message( "" + user + " deploys " + this.loaded + ".", "<span class='notice'>You deploy " + this.loaded + ".</span>" );
				this.loaded = null;
			} else {
				user.WriteMsg( "<span class='warning'>The dock is empty!</span>" );
			}
			return null;
		}

		// Function from file: bed.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( "The dock is " + ( Lang13.Bool( this.loaded ) ? "loaded" : "empty" ) );
			return 0;
		}

	}

}