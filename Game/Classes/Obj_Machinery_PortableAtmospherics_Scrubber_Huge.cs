// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Scrubber_Huge : Obj_Machinery_PortableAtmospherics_Scrubber {

		public bool gid = true;
		public int id = 0;
		public bool stationary = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.volume = 50000;
			this.widenet = true;
			this.icon_state = "scrubber:0";
		}

		// Function from file: scrubber.dm
		public Obj_Machinery_PortableAtmospherics_Scrubber_Huge ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.id = GlobalVars.gid;
			GlobalVars.gid++;
			this.name = "" + this.name + " (ID " + this.id + ")";
			return;
		}

		// Function from file: scrubber.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Wrench ) {
				
				if ( this.stationary ) {
					user.WriteMsg( "<span class='warning'>The bolts are too tight for you to unscrew!</span>" );
					return null;
				}

				if ( this.on ) {
					user.WriteMsg( "<span class='warning'>Turn it off first!</span>" );
					return null;
				}
				this.anchored = !Lang13.Bool( this.anchored );
				GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
				user.WriteMsg( new Txt( "<span class='notice'>You " ).item( ( Lang13.Bool( this.anchored ) ? "wrench" : "unwrench" ) ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );
			} else if ( A is Obj_Item_Device_Analyzer && Map13.GetDistance( user, this ) <= 1 ) {
				this.atmosanalyzer_scan( this.air_contents, user );
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays = 0;

			if ( this.on ) {
				this.icon_state = "scrubber:1";
			} else {
				this.icon_state = "scrubber:0";
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			Task13.User.WriteMsg( "<span class='warning'>You can't directly interact with this machine! Use the area atmos computer.</span>" );
			return null;
		}

	}

}