// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_GeneralAirControl_LargeTankControl : Obj_Machinery_Computer_GeneralAirControl {

		public string input_tag = null;
		public string output_tag = null;
		public ByTable input_info = null;
		public ByTable output_info = null;
		public double pressure_setting = 4559.625;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.frequency = 1441;
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_LargeTankControl);
		}

		public Obj_Machinery_Computer_GeneralAirControl_LargeTankControl ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: atmo_control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? change = null;
			Signal signal = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["adj_pressure"] ) ) {
				change = String13.ParseNumber( href_list["adj_pressure"] );
				this.pressure_setting = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.pressure_setting + ( change ??0) )), ((int)( 5066.25 )) ) );
				return null;
			}

			if ( !( this.radio_connection != null ) ) {
				return 0;
			}
			signal = new Signal();
			signal.transmission_method = 1;
			signal.source = this;

			if ( Lang13.Bool( href_list["reconnect"] ) ) {
				this.reconnect( Task13.User );
			}

			if ( Lang13.Bool( href_list["in_refresh_status"] ) ) {
				this.input_info = null;
				signal.data = new ByTable().Set( "tag", this.input_tag ).Set( 2, "status" );
			}

			if ( Lang13.Bool( href_list["in_toggle_injector"] ) ) {
				this.input_info = null;
				signal.data = new ByTable().Set( "tag", this.input_tag ).Set( 2, "power_toggle" );
			}

			if ( Lang13.Bool( href_list["out_refresh_status"] ) ) {
				this.output_info = null;
				signal.data = new ByTable().Set( "tag", this.output_tag ).Set( 2, "status" );
			}

			if ( Lang13.Bool( href_list["out_toggle_power"] ) ) {
				this.output_info = null;
				signal.data = new ByTable().Set( "tag", this.output_tag ).Set( 2, "power_toggle" );
			}

			if ( Lang13.Bool( href_list["out_set_pressure"] ) ) {
				this.output_info = null;
				signal.data = new ByTable().Set( "tag", this.output_tag ).Set( "set_internal_pressure", "" + this.pressure_setting );
			}
			signal.data["sigtype"] = "command";
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			return null;
		}

		// Function from file: atmo_control.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			string id_tag = null;

			
			if ( !( signal != null ) || signal.encryption != 0 ) {
				return false;
			}
			id_tag = signal.data["tag"];

			if ( this.input_tag == id_tag ) {
				this.input_info = signal.data;
			} else if ( this.output_tag == id_tag ) {
				this.output_info = signal.data;
			} else {
				base.receive_signal( signal, receive_method, (object)(receive_param) );
			}
			return false;
		}

		// Function from file: atmo_control.dm
		public override string return_text(  ) {
			string output = null;
			dynamic power = null;
			dynamic volume_rate = null;
			dynamic power2 = null;
			dynamic output_pressure = null;

			output = new Txt( "<A href='?src=" ).Ref( this ).str( ";reconnect=1'>Reconnect</A><BR>" ).ToString();

			if ( this.sensors.len != 0 ) {
				output += base.return_text();
			} else {
				output += "No sensors connected.";
			}
			output += "<h1>Tank Control System</h1>";

			if ( this.input_info != null ) {
				power = this.input_info["power"];
				volume_rate = this.input_info["volume_rate"];
				output += new Txt( "<B>Input</B>: " ).item( ( Lang13.Bool( power ) ? "Injecting" : "On Hold" ) ).str( " <A href='?src=" ).Ref( this ).str( ";in_refresh_status=1'>Refresh</A><BR>\nRate: " ).item( volume_rate ).str( " L/sec<BR>" ).ToString();
				output += new Txt( "<B>Command:</B> <A href='?src=" ).Ref( this ).str( ";in_toggle_injector=1'>Toggle Power</A><BR>" ).ToString();
			} else {
				output += "<FONT color='red'>ERROR: Can not find input port</FONT><BR>";
			}
			output += "<BR>";

			if ( this.output_info != null ) {
				power2 = this.output_info["power"];
				output_pressure = this.output_info["internal"];
				output += new Txt( "<B>Output</B>: " ).item( ( Lang13.Bool( power2 ) ? "Open" : "On Hold" ) ).str( " <A href='?src=" ).Ref( this ).str( ";out_refresh_status=1'>Refresh</A><BR>\n<B>Max Output Pressure:</B> " ).item( output_pressure ).str( " kPa<BR>" ).ToString();
				output += new Txt( "<B>Command:</B> <A href='?src=" ).Ref( this ).str( ";out_toggle_power=1'>Toggle Power</A> <A href='?src=" ).Ref( this ).str( ";out_set_pressure=1'>Set Pressure</A><BR>" ).ToString();
				output += new Txt( "<B>Max Output Pressure Set:</B> <A href='?src=" ).Ref( this ).str( ";adj_pressure=-1000'>-</A> <A href='?src=" ).Ref( this ).str( ";adj_pressure=-100'>-</A> <A href='?src=" ).Ref( this ).str( ";adj_pressure=-10'>-</A> <A href='?src=" ).Ref( this ).str( ";adj_pressure=-1'>-</A> " ).item( this.pressure_setting ).str( " kPa <A href='?src=" ).Ref( this ).str( ";adj_pressure=1'>+</A> <A href='?src=" ).Ref( this ).str( ";adj_pressure=10'>+</A> <A href='?src=" ).Ref( this ).str( ";adj_pressure=100'>+</A> <A href='?src=" ).Ref( this ).str( ";adj_pressure=1000'>+</A><BR>" ).ToString();
			} else {
				output += "<FONT color='red'>ERROR: Can not find output port</FONT><BR>";
			}
			return output;
		}

		// Function from file: atmo_control.dm
		public void reconnect( Mob user = null ) {
			ByTable IO = null;
			RadioFrequency air_freq = null;
			RadioFrequency gas_freq = null;
			dynamic devices = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump U = null;
			ByTable text = null;
			Obj_Machinery_Atmospherics_Components_Unary_OutletInjector U2 = null;
			ByTable text2 = null;
			dynamic S = null;
			dynamic new_devices = null;
			Obj_Machinery_AirSensor U3 = null;
			ByTable text3 = null;
			Obj_Machinery_Atmospherics_Components_Unary_OutletInjector U4 = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump U5 = null;

			IO = new ByTable();
			air_freq = GlobalVars.SSradio.return_frequency( 1443 );
			gas_freq = GlobalVars.SSradio.return_frequency( 1441 );
			devices = air_freq.devices["_default"];
			devices |= gas_freq.devices["_default"];

			foreach (dynamic _a in Lang13.Enumerate( devices, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
				U = _a;
				
				text = GlobalFuncs.text2list( U.id_tag, "_" );
				IO.Or( text[1] );
			}

			foreach (dynamic _b in Lang13.Enumerate( devices, typeof(Obj_Machinery_Atmospherics_Components_Unary_OutletInjector) )) {
				U2 = _b;
				
				text2 = GlobalFuncs.text2list( U2.id, "_" );
				IO.Or( text2[1] );
			}

			if ( !( IO.len != 0 ) ) {
				user.WriteMsg( "<span class='alert'>No machinery detected.</span>" );
			}
			S = Interface13.Input( "Select the device set: ", "Selection", IO[1], null, IO, InputType.Any );

			if ( this != null ) {
				this.input_tag = "" + S + "_in";
				this.output_tag = "" + S + "_out";
				this.name = "" + String13.ToUpper( S ) + " Supply Control";
				new_devices = gas_freq.devices["4"];
				new_devices |= air_freq.devices["4"];

				foreach (dynamic _c in Lang13.Enumerate( new_devices, typeof(Obj_Machinery_AirSensor) )) {
					U3 = _c;
					
					text3 = GlobalFuncs.text2list( U3.id_tag, "_" );

					if ( text3[1] == S ) {
						this.sensors = new ByTable().Set( "" + S + "_sensor", "Tank" );
						break;
					}
				}
			}

			if ( S == "air" ) {
				this.frequency = 1443;
			} else {
				this.frequency = 1441;
			}
			this.set_frequency( this.frequency );

			foreach (dynamic _d in Lang13.Enumerate( devices, typeof(Obj_Machinery_Atmospherics_Components_Unary_OutletInjector) )) {
				U4 = _d;
				
				U4.broadcast_status();
			}

			foreach (dynamic _e in Lang13.Enumerate( devices, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
				U5 = _e;
				
				U5.broadcast_status();
			}
			return;
		}

	}

}