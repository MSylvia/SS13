// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Mask_Cigarette_Pipe : Obj_Item_Clothing_Mask_Cigarette {

		public bool packeditem = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "pipeoff";
			this.icon_on = "pipeon";
			this.icon_off = "pipeoff";
			this.smoketime = 0;
			this.chem_volume = 100;
			this.icon_state = "pipeoff";
		}

		// Function from file: cigs_lighters.dm
		public Obj_Item_Clothing_Mask_Cigarette_Pipe ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.name = "empty " + Lang13.Initial( this, "name" );
			return;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic location = null;

			location = GlobalFuncs.get_turf( user );

			if ( this.lit ) {
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " puts out " + this + ".</span>", "<span class='notice'>You put out " + this + ".</span>" );
				this.lit = false;
				this.icon_state = this.icon_off;
				this.item_state = this.icon_off;
				GlobalVars.SSobj.processing.Remove( this );
				return null;
			}

			if ( !this.lit && this.smoketime > 0 ) {
				user.WriteMsg( "<span class='notice'>You empty " + this + " onto " + location + ".</span>" );
				new Obj_Effect_Decal_Cleanable_Ash( location );
				this.packeditem = false;
				this.smoketime = 0;
				this.reagents.clear_reagents();
				this.name = "empty " + Lang13.Initial( this, "name" );
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic G = null;
			string lighting_text = null;

			
			if ( A is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown ) {
				G = A;

				if ( !this.packeditem ) {
					
					if ( G.dry ) {
						user.WriteMsg( "<span class='notice'>You stuff " + A + " into " + this + ".</span>" );
						this.smoketime = 400;
						this.packeditem = true;
						this.name = "" + A.name + "-packed " + Lang13.Initial( this, "name" );

						if ( Lang13.Bool( A.reagents ) ) {
							((Reagents)A.reagents).trans_to( this, A.reagents.total_volume );
						}
						GlobalFuncs.qdel( A );
					} else {
						user.WriteMsg( "<span class='warning'>It has to be dried first!</span>" );
					}
				} else {
					user.WriteMsg( "<span class='warning'>It is already packed!</span>" );
				}
			} else {
				lighting_text = this.is_lighter( A, user );

				if ( Lang13.Bool( lighting_text ) ) {
					
					if ( this.smoketime > 0 ) {
						this.f_light( lighting_text );
					} else {
						user.WriteMsg( "<span class='warning'>There is nothing to smoke!</span>" );
					}
				} else {
					user.WriteMsg( "<span class='warning'>You can't put that in the pipe!</span>" );
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override int? process( dynamic seconds = null ) {
			dynamic location = null;
			Ent_Static M = null;

			location = GlobalFuncs.get_turf( this );
			this.smoketime--;

			if ( this.smoketime < 1 ) {
				new Obj_Effect_Decal_Cleanable_Ash( location );

				if ( this.loc is Mob ) {
					M = this.loc;
					((dynamic)M).WriteMsg( "<span class='notice'>Your " + this.name + " goes out.</span>" );
					this.lit = false;
					this.icon_state = this.icon_off;
					this.item_state = this.icon_off;
					((dynamic)M).update_inv_wear_mask();
					this.packeditem = false;
					this.name = "empty " + Lang13.Initial( this, "name" );
				}
				GlobalVars.SSobj.processing.Remove( this );
				return null;
			}

			if ( Lang13.Bool( location ) ) {
				((Tile)location).hotspot_expose( 700, 5 );
			}

			if ( this.reagents != null && Lang13.Bool( this.reagents.total_volume ) ) {
				this.handle_reagents();
			}
			return null;
		}

	}

}