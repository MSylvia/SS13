// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Blood : Obj_Item_Weapon_ReagentContainers {

		public string blood_type = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 200;
			this.icon = "icons/obj/bloodpack.dmi";
			this.icon_state = "empty";
		}

		// Function from file: blood_pack.dm
		public Obj_Item_Weapon_ReagentContainers_Blood ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.blood_type != null ) {
				this.name = "blood pack " + this.blood_type;
				this.reagents.add_reagent( "blood", 200, new ByTable().Set( "donor", null ).Set( "viruses", null ).Set( "blood_DNA", null ).Set( "blood_type", this.blood_type ).Set( "resistances", null ).Set( "trace_chem", null ) );
				this.update_icon();
			}
			return;
		}

		// Function from file: blood_pack.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			string t = null;

			
			if ( A is Obj_Item_Weapon_Pen || A is Obj_Item_Toy_Crayon ) {
				t = GlobalFuncs.stripped_input( user, "What would you like to label the blood pack?", this.name, null, 53 );

				if ( !((Mob)user).canUseTopic( this ) ) {
					return null;
				}

				if ( ((Mob)user).get_active_hand() != A ) {
					return null;
				}

				if ( !( Map13.GetDistance( this, user ) <= 1 ) && this.loc != user ) {
					return null;
				}

				if ( Lang13.Bool( t ) ) {
					this.name = "blood pack - " + t;
				} else {
					this.name = "blood pack";
				}
				return null;
			}
			return null;
		}

		// Function from file: blood_pack.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			int percent = 0;

			percent = Num13.Floor( ( this.reagents.total_volume ??0) / ( this.volume ??0) * 100 );

			dynamic _a = percent; // Was a switch-case, sorry for the mess.
			if ( 0<=_a&&_a<=9 ) {
				this.icon_state = "empty";
			} else if ( 10<=_a&&_a<=50 ) {
				this.icon_state = "half";
			} else if ( 51<=_a&&_a<=Double.PositiveInfinity ) {
				this.icon_state = "full";
			}
			return null;
		}

		// Function from file: blood_pack.dm
		public override void on_reagent_change(  ) {
			this.update_icon();
			return;
		}

	}

}