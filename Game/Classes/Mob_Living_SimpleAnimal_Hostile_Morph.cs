// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Morph : Mob_Living_SimpleAnimal_Hostile {

		public bool morphed = false;
		public dynamic form = null;
		public int morph_time = 0;
		public string playstyle_string = "<b><font size=3 color='red'>You are a morph,</font> an abomination of science created primarily with changeling cells. You may take the form of anything nearby by shift-clicking it. This process will alert any nearby observers, and can only be performed once every five seconds. While morphed, you move faster, but do less damage. In addition, anyone within three tiles will note an uncanny wrongness if examining you. You can attack any item or dead creature to consume it - creatures will fully restore your health. Finally, you can restore yourself to your original form while morphed by shift-clicking yourself.</b>";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "morph";
			this.speak_emote = new ByTable(new object [] { "gurgles" });
			this.emote_hear = new ByTable(new object [] { "gurgles" });
			this.icon_living = "morph";
			this.icon_dead = "morph_dead";
			this.speed = 2;
			this.a_intent = "harm";
			this.stop_automated_movement = true;
			this.pass_flags = 1;
			this.ventcrawler = 2;
			this.atmos_requirements = new ByTable().Set( "min_oxy", 0 ).Set( "max_oxy", 0 ).Set( "min_tox", 0 ).Set( "max_tox", 0 ).Set( "min_co2", 0 ).Set( "max_co2", 0 ).Set( "min_n2", 0 ).Set( "max_n2", 0 );
			this.minbodytemp = 0;
			this.maxHealth = 150;
			this.health = 150;
			this.healable = false;
			this.melee_damage_lower = 20;
			this.melee_damage_upper = 20;
			this.idle_vision_range = 1;
			this.wander = false;
			this.attacktext = "glomps";
			this.attack_sound = "sound/effects/blobattack.ogg";
			this.butcher_results = new ByTable().Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab), 2 );
			this.icon_state = "morph";
			this.see_in_dark = 8;
			this.see_invisible = 5;
		}

		public Mob_Living_SimpleAnimal_Hostile_Morph ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: morph.dm
		public override void update_action_buttons(  ) {
			return;
		}

		// Function from file: morph.dm
		public override dynamic AttackingTarget(  ) {
			dynamic L = null;
			dynamic I = null;

			
			if ( this.target is Mob_Living ) {
				L = this.target;

				if ( Convert.ToInt32( L.stat ) == 2 ) {
					
					if ( GlobalFuncs.do_after( this, 30, null, L ) ) {
						this.visible_message( "<span class='warning'>" + this + " swallows " + this.target + " whole!</span>" );
						L.loc = this;
						this.adjustHealth( -50 );
					}
					return null;
				}
			} else if ( this.target is Obj_Item ) {
				I = this.target;

				if ( !Lang13.Bool( I.anchored ) ) {
					
					if ( GlobalFuncs.do_after( this, 20, null, I ) ) {
						this.visible_message( "<span class='warning'>" + this + " swallows " + this.target + " whole!</span>" );
						I.loc = this;
					}
					return null;
				}
			}
			((Ent_Static)this.target).attack_animal( this );
			return null;
		}

		// Function from file: morph.dm
		public override bool can_track( Mob user = null ) {
			
			if ( this.morphed ) {
				return false;
			}
			return base.can_track( user );
		}

		// Function from file: morph.dm
		public override bool AIShouldSleep( ByTable possible_targets = null ) {
			bool _default = false;

			ByTable things = null;
			Ent_Dynamic A = null;
			dynamic T = null;

			_default = base.AIShouldSleep( possible_targets );

			if ( _default ) {
				things = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, this ), typeof(Ent_Dynamic) )) {
					A = _a;
					

					if ( this.allowed( A ) ) {
						things.Add( A );
					}
				}
				T = Rand13.PickFromTable( things );
				this.assume( T );
			}
			return _default;
		}

		// Function from file: morph.dm
		public override void LoseAggro(  ) {
			this.vision_range = this.idle_vision_range;
			return;
		}

		// Function from file: morph.dm
		public override void Aggro(  ) {
			base.Aggro();
			this.restore();
			return;
		}

		// Function from file: morph.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			Ent_Dynamic AM = null;

			
			if ( this.morphed ) {
				this.visible_message( "<span class='warning'>" + this + " twists and dissolves into a pile of green flesh!</span>", "<span class='userdanger'>Your skin ruptures! Your flesh breaks apart! No disguise can ward off de--</span>" );
				this.restore();
			}

			if ( gibbed == true ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
					AM = _a;
					
					AM.loc = this.loc;

					if ( Rand13.PercentChance( 90 ) ) {
						Map13.Step( AM, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.alldirs ) ) );
					}
				}
			}
			base.death( gibbed, toast );
			return false;
		}

		// Function from file: morph.dm
		public override void ShiftClickOn( dynamic A = null ) {
			
			if ( this.morph_time <= Game13.time && !( this.stat != 0 ) ) {
				
				if ( A == this ) {
					this.restore();
					return;
				}

				if ( A is Ent_Dynamic && this.allowed( A ) ) {
					this.assume( A );
				}
			} else {
				this.WriteMsg( "<span class='warning'>Your chameleon skin is still repairing itself!</span>" );
				base.ShiftClickOn( (object)(A) );
			}
			return;
		}

		// Function from file: morph.dm
		public void restore(  ) {
			
			if ( !this.morphed ) {
				return;
			}
			this.morphed = false;
			this.form = null;
			this.visible_message( "<span class='warning'>" + this + " suddenly collapses in on itself, dissolving into a pile of green flesh!</span>", "<span class='notice'>You reform to your normal body.</span>" );
			this.name = Lang13.Initial( this, "name" );
			this.icon = Lang13.Initial( this, "icon" );
			this.icon_state = Lang13.Initial( this, "icon_state" );
			this.overlays.Cut();
			this.melee_damage_lower = Lang13.Initial( this, "melee_damage_lower" );
			this.melee_damage_upper = Lang13.Initial( this, "melee_damage_upper" );
			this.speed = Lang13.Initial( this, "speed" );
			this.morph_time = Game13.time + 50;
			return;
		}

		// Function from file: morph.dm
		public void assume( dynamic target = null ) {
			this.morphed = true;
			this.form = target;
			this.appearance = target.appearance;
			this.transform = Lang13.Initial( this, "transform" );
			this.pixel_y = Convert.ToInt32( Lang13.Initial( this, "pixel_y" ) );
			this.pixel_x = Convert.ToInt32( Lang13.Initial( this, "pixel_x" ) );
			this.visible_message( "<span class='warning'>" + this + " suddenly twists and changes shape, becoming a copy of " + target + "!</span>", "<span class='notice'>You twist your body and assume the form of " + target + ".</span>" );
			this.melee_damage_lower = 5;
			this.melee_damage_upper = 5;
			this.speed = 0;
			this.morph_time = Game13.time + 50;
			return;
		}

		// Function from file: morph.dm
		public override bool allowed( dynamic M = null ) {
			
			if ( M is Obj_Screen ) {
				return false;
			}

			if ( M is Obj_Singularity ) {
				return false;
			}

			if ( M is Mob_Living_SimpleAnimal_Hostile_Morph ) {
				return false;
			}
			return true;
		}

		// Function from file: morph.dm
		public override double examine( dynamic user = null ) {
			
			if ( this.morphed ) {
				((Ent_Static)this.form).examine( user );

				if ( Map13.GetDistance( user, this ) <= 3 ) {
					user.WriteMsg( "<span class='warning'>It doesn't look quite right...</span>" );
				}
			} else {
				base.examine( (object)(user) );
			}
			return 0;
		}

	}

}