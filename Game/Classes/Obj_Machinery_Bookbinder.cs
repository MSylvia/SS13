// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Bookbinder : Obj_Machinery {

		public bool busy = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/library.dmi";
			this.icon_state = "binder";
		}

		public Obj_Machinery_Bookbinder ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: lib_machines.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Item_Weapon_Book b = null;

			
			if ( A is Obj_Item_Weapon_Paper ) {
				
				if ( this.busy ) {
					user.WriteMsg( "<span class='warning'>The book binder is busy. Please wait for completion of previous operation.</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				A.loc = this;
				((Ent_Static)user).visible_message( "" + user + " loads some paper into " + this + ".", "You load some paper into " + this + "." );
				this.visible_message( "" + this + " begins to hum as it warms up its printing drums." );
				this.busy = true;
				Task13.Sleep( Rand13.Int( 200, 400 ) );
				this.busy = false;
				this.visible_message( "" + this + " whirs as it prints and binds a new book." );
				b = new Obj_Item_Weapon_Book( this.loc );
				b.dat = A.info;
				b.name = "Print Job #" + ( "" + Rand13.Int( 100, 999 ) );
				b.icon_state = "book" + Rand13.Int( 1, 7 );
				GlobalFuncs.qdel( A );
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

	}

}