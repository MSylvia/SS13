// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Hallucination_Delusion : Obj_Effect_Hallucination {

		public ByTable delusions = new ByTable();

		// Function from file: Hallucination.dm
		public Obj_Effect_Hallucination_Delusion ( dynamic loc = null, Ent_Dynamic T = null, string force_kind = null, int? duration = null, bool? skip_nearby = null ) : base( (object)(loc) ) {
			duration = duration ?? 300;
			skip_nearby = skip_nearby ?? true;

			Image A = null;
			string kind = null;
			Mob_Living_Carbon_Human H = null;
			Image I = null;

			this.target = T;
			A = null;
			kind = ( Lang13.Bool( force_kind ) ? force_kind : Rand13.Pick(new object [] { "clown", "corgi", "carp", "skeleton", "demon" }) );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.living_mob_list, typeof(Mob_Living_Carbon_Human) )) {
				H = _b;
				

				if ( H == this.target ) {
					continue;
				}

				if ( skip_nearby == true && Map13.FetchInView( null, this.target ).Contains( H ) ) {
					continue;
				}

				switch ((string)( kind )) {
					case "clown":
						A = new Image( "icons/mob/animal.dmi", H, "clown" );
						break;
					case "carp":
						A = new Image( "icons/mob/animal.dmi", H, "carp" );
						break;
					case "corgi":
						A = new Image( "icons/mob/pets.dmi", H, "corgi" );
						break;
					case "skeleton":
						A = new Image( "icons/mob/human.dmi", H, "skeleton_s" );
						break;
					case "demon":
						A = new Image( "icons/mob/mob.dmi", H, "daemon" );
						break;
				}
				A.v_override = true;

				if ( Lang13.Bool( ((dynamic)this.target).client ) ) {
					this.delusions.Or( A );
					((dynamic)this.target).client.images.Or( A );
				}
			}
			Task13.Sleep( duration ??0 );

			foreach (dynamic _c in Lang13.Enumerate( this.delusions, typeof(Image) )) {
				I = _c;
				

				if ( Lang13.Bool( ((dynamic)this.target).client ) ) {
					((dynamic)this.target).client.images.Remove( I );
				}
			}
			GlobalFuncs.qdel( this );
			return;
		}

	}

}