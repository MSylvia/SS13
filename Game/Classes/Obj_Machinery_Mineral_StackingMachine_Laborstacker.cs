// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_StackingMachine_Laborstacker : Obj_Machinery_Mineral_StackingMachine {

		public double points = 0;
		public ByTable ore_values = new ByTable()
											.Set( "glass", 1 )
											.Set( "metal", 2 )
											.Set( "solid plasma", 20 )
											.Set( "plasteel", 23 )
											.Set( "reinforced glass", 4 )
											.Set( "gold", 20 )
											.Set( "silver", 20 )
											.Set( "uranium", 20 )
											.Set( "diamond", 25 )
											.Set( "bananium", 50 )
										;

		public Obj_Machinery_Mineral_StackingMachine_Laborstacker ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: laborstacker.dm
		public override void process_sheet( Obj_Item_Stack_Sheet inp = null ) {
			string n = null;
			double? a = null;

			
			if ( inp is Obj_Item_Stack_Sheet ) {
				n = inp.name;
				a = inp.amount;

				if ( this.ore_values.Contains( n ) ) {
					this.points += Convert.ToDouble( this.ore_values[n] * a );
				}
			}
			base.process_sheet( inp );
			return;
		}

		// Function from file: laborstacker.dm
		public string get_ore_values(  ) {
			string dat = null;
			dynamic ore = null;
			dynamic value = null;

			dat = "<table border='0' width='200'>";

			foreach (dynamic _a in Lang13.Enumerate( this.ore_values )) {
				ore = _a;
				
				value = this.ore_values[ore];
				dat += "<tr><td>" + GlobalFuncs.capitalize( ore ) + "</td><td>" + value + "</td></tr>";
			}
			dat += "</table>";
			return dat;
		}

	}

}