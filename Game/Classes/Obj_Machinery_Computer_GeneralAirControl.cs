// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_GeneralAirControl : Obj_Machinery_Computer {

		public double? frequency = 1439;
		public ByTable sensors = new ByTable();
		public ByTable sensor_information = new ByTable();
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "tank";
			this.icon_keyboard = "atmos_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_AirManagement);
		}

		// Function from file: atmo_control.dm
		public Obj_Machinery_Computer_GeneralAirControl ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.SSradio != null ) {
				this.set_frequency( this.frequency );
			}
			return;
		}

		// Function from file: atmo_control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["dist_loop"] ) ) {
				this.name = "Distribution and Waste Monitor";
				this.set_frequency( 1443 );
				this.sensors = new ByTable()
					.Set( "mair_in_meter", "Mixed Air In" )
					.Set( "air_sensor", "Mixed Air Supply Tank" )
					.Set( "mair_out_meter", "Mixed Air Out" )
					.Set( "dloop_atm_meter", "Distribution Loop" )
					.Set( "wloop_atm_meter", "Waste Loop" )
				;
			}

			if ( Lang13.Bool( href_list["tank_mon"] ) ) {
				this.name = "Tank Monitor";
				this.set_frequency( 1441 );
				this.sensors = new ByTable()
					.Set( "n2_sensor", "Nitrogen" )
					.Set( "o2_sensor", "Oxygen" )
					.Set( "co2_sensor", "Carbon Dioxide" )
					.Set( "tox_sensor", "Toxins" )
					.Set( "n2o_sensor", "Nitrous Oxide" )
					.Set( "waste_sensor", "Gas Mix Tank" )
				;
			}
			return null;
		}

		// Function from file: atmo_control.dm
		public override void initialize(  ) {
			this.set_frequency( this.frequency );
			return;
		}

		// Function from file: atmo_control.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

		// Function from file: atmo_control.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			return;
		}

		// Function from file: atmo_control.dm
		public virtual string return_text(  ) {
			string sensor_data = null;
			int count = 0;
			dynamic id_tag = null;
			dynamic long_name = null;
			dynamic data = null;
			string sensor_part = null;
			string output = null;

			count = 0;

			if ( this.sensors.len != 0 ) {
				sensor_data += "<TABLE cellpadding='3'><TR>";

				foreach (dynamic _a in Lang13.Enumerate( this.sensors )) {
					id_tag = _a;
					
					long_name = this.sensors[id_tag];
					data = this.sensor_information[id_tag];
					sensor_part = "<h2>" + long_name + "</h2>";

					if ( Lang13.Bool( data ) ) {
						
						if ( Lang13.Bool( data["pressure"] ) ) {
							sensor_part += "   <B>Pressure:</B> " + data["pressure"] + " kPa<BR>";
						} else {
							sensor_part += "   <B>Pressure:</B> No pressure detected<BR>";
						}

						if ( Lang13.Bool( data["temperature"] ) ) {
							sensor_part += "   <B>Temperature:</B> " + data["temperature"] + " K<BR>";
						}

						if ( Lang13.Bool( data["oxygen"] ) || Lang13.Bool( data["toxins"] ) || Lang13.Bool( data["nitrogen"] ) || Lang13.Bool( data["carbon_dioxide"] ) ) {
							sensor_part += "   <B>Gas Composition : </B>";

							if ( Lang13.Bool( data["oxygen"] ) ) {
								sensor_part += "" + data["oxygen"] + "% O2; ";
							}

							if ( Lang13.Bool( data["nitrogen"] ) ) {
								sensor_part += "" + data["nitrogen"] + "% N; ";
							}

							if ( Lang13.Bool( data["carbon_dioxide"] ) ) {
								sensor_part += "" + data["carbon_dioxide"] + "% CO2; ";
							}

							if ( Lang13.Bool( data["toxins"] ) ) {
								sensor_part += "" + data["toxins"] + "% TX; ";
							}
						}
					} else {
						sensor_part = "<FONT class='bad'>" + long_name + " can not be found!</FONT><BR>";
					}
					sensor_data += "<TD valign='top'>" + sensor_part + "</TD>";
					count++;

					if ( count == 2 ) {
						sensor_data += "</TR><TR>";
						count = 0;
					}
				}
				sensor_data += "</TR></TABLE>";
			} else {
				sensor_data = "No sensors connected.<BR><BR>";
				sensor_data += new Txt( "<A href='?src=" ).Ref( this ).str( ";dist_loop=1'>Initialize as Distribution and Waste Monitor</A><BR>" ).ToString();
				sensor_data += new Txt( "<A href='?src=" ).Ref( this ).str( ";tank_mon=1'>Initialize as Tank Monitor</A><BR>" ).ToString();
			}
			output = "\n<h1>Sensor Data</h1>" + sensor_data;
			return output;
		}

		// Function from file: atmo_control.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic id_tag = null;

			
			if ( !( signal != null ) || signal.encryption != 0 ) {
				return false;
			}
			id_tag = signal.data["tag"];

			if ( !Lang13.Bool( id_tag ) || !( this.sensors.Find( id_tag ) != 0 ) ) {
				return false;
			}
			this.sensor_information[id_tag] = signal.data;
			return false;
		}

		// Function from file: atmo_control.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( Lang13.Bool( base.process( (object)(seconds) ) ) ) {
				this.updateDialog();
			}
			return null;
		}

		// Function from file: atmo_control.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			Browser popup = null;

			popup = new Browser( user, "computer", this.name, 480, 490 );
			popup.set_content( this.return_text() );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: atmo_control.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

	}

}