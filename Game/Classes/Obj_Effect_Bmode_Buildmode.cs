// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Bmode_Buildmode : Obj_Effect_Bmode {

		public dynamic varholder = "name";
		public dynamic valueholder = "derp";
		public Type objholder = typeof(Obj_Structure_Closet);

		protected override void __FieldInit() {
			base.__FieldInit();

			this.screen_loc = "NORTH,WEST+2";
			this.icon_state = "buildmode1";
		}

		public Obj_Effect_Bmode_Buildmode ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: buildmode.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			ByTable pa = null;
			ByTable locked = null;
			dynamic thetype = null;
			dynamic gen_paths = null;
			dynamic type = null;

			pa = String13.ParseUrlParams( _params );

			if ( pa.Find( "left" ) != 0 ) {
				this.master.cl.buildmode = this.master.cl.buildmode % 5 + 1;
				this.master.Reset();
				this.icon_state = "buildmode" + this.master.cl.buildmode;
			} else if ( pa.Find( "right" ) != 0 ) {
				
				switch ((int)( this.master.cl.buildmode )) {
					case 1:
						return true;
						break;
					case 2:
						this.objholder = Lang13.FindClass( Interface13.Input( Task13.User, "Enter typepath:", "Typepath", "/obj/structure/closet", null, InputType.Any ) );

						if ( !( this.objholder is Type ) ) {
							this.objholder = typeof(Obj_Structure_Closet);
							Interface13.Alert( "That path is not allowed." );
						} else if ( Lang13.Bool( ((dynamic)this.objholder).IsSubclassOf( typeof(Mob) ) ) && !GlobalFuncs.check_rights( 32, false ) ) {
							this.objholder = typeof(Obj_Structure_Closet);
						}
						break;
					case 3:
						locked = new ByTable(new object [] { "vars", "key", "ckey", "client", "firemut", "ishulk", "telekinesis", "xray", "virus", "viruses", "cuffed", "ka", "last_eaten", "urine" });
						this.master.buildmode.varholder = Interface13.Input( Task13.User, "Enter variable name:", "Name", "name", null, InputType.Any );

						if ( Lang13.Bool( ((dynamic)( locked != null && !GlobalFuncs.check_rights( 32, false ) )).Contains( this.master.buildmode.varholder ) ) ) {
							return true;
						}
						thetype = Interface13.Input( Task13.User, "Select variable type:", "Type", null, new ByTable(new object [] { "text", "number", "mob-reference", "obj-reference", "turf-reference" }), InputType.Any );

						if ( !Lang13.Bool( thetype ) ) {
							return true;
						}

						dynamic _a = thetype; // Was a switch-case, sorry for the mess.
						if ( _a=="text" ) {
							this.master.buildmode.valueholder = Interface13.Input( Task13.User, "Enter variable value:", "Value", "value", null, InputType.Str );
						} else if ( _a=="number" ) {
							this.master.buildmode.valueholder = Interface13.Input( Task13.User, "Enter variable value:", "Value", 123, null, InputType.Num );
						} else if ( _a=="mob-reference" ) {
							this.master.buildmode.valueholder = Interface13.Input( Task13.User, "Enter variable value:", "Value", null, GlobalVars.mob_list, InputType.Mob );
						} else if ( _a=="obj-reference" ) {
							this.master.buildmode.valueholder = Interface13.Input( Task13.User, "Enter variable value:", "Value", null, Game13.contents, InputType.Obj );
						} else if ( _a=="turf-reference" ) {
							this.master.buildmode.valueholder = Interface13.Input( Task13.User, "Enter variable value:", "Value", null, Game13.contents, InputType.Tile );
						}
						break;
					case 5:
						gen_paths = Lang13.GetTypes( typeof(MapGenerator) ) - typeof(MapGenerator);
						type = Interface13.Input( Task13.User, "Select Generator Type", "Type", null, gen_paths, InputType.Null | InputType.Any );

						if ( !Lang13.Bool( type ) ) {
							return false;
						}
						this.master.generator_path = type;
						this.master.cornerA = null;
						this.master.cornerB = null;
						break;
				}
			}
			return true;
		}

	}

}