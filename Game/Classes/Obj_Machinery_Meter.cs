// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Meter : Obj_Machinery {

		public dynamic target = null;
		public double frequency = 0;
		public dynamic id = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.power_channel = 3;
			this.idle_power_usage = 2;
			this.active_power_usage = 4;
			this.icon = "icons/obj/meter.dmi";
			this.icon_state = "meterX";
		}

		// Function from file: meter.dm
		public Obj_Machinery_Meter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSair.atmos_machinery.Add( this );
			this.target = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Pipe), this.loc );
			return; // Warning! Attempt to return some other value!
		}

		// Function from file: meter.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			
			if ( ( current_size ??0) >= 9 ) {
				new Obj_Item_PipeMeter( this.loc );
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: meter.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return 1;
			} else {
				Task13.User.WriteMsg( this.status() );
				return 1;
			}
		}

		// Function from file: meter.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: meter.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: meter.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
				user.WriteMsg( new Txt( "<span class='notice'>You begin to unfasten " ).the( this ).item().str( "...</span>" ).ToString() );

				if ( GlobalFuncs.do_after( user, 40 / A.toolspeed, null, this ) ) {
					((Ent_Static)user).visible_message( new Txt().item( user ).str( " unfastens " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You unfasten " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='italics'>You hear ratchet.</span>" );
					new Obj_Item_PipeMeter( this.loc );
					GlobalFuncs.qdel( this );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: meter.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( this.status() );
			return 0;
		}

		// Function from file: meter.dm
		public string status(  ) {
			string t = null;
			GasMixture environment = null;

			t = "";

			if ( Lang13.Bool( this.target ) ) {
				environment = ((Ent_Static)this.target).return_air();

				if ( environment != null ) {
					t += "The pressure gauge reads " + Num13.Round( environment.return_pressure(), 0.01 ) + " kPa; " + Num13.Round( Convert.ToDouble( environment.temperature ), 0.01 ) + " K (" + Num13.Round( Convert.ToDouble( environment.temperature - 273.41 ), 0.01 ) + "&deg;C)";
				} else {
					t += "The sensor error light is blinking.";
				}
			} else {
				t += "The connect error light is blinking.";
			}
			return t;
		}

		// Function from file: meter.dm
		public override int process_atmos(  ) {
			GasMixture environment = null;
			double env_pressure = 0;
			int val = 0;
			int val2 = 0;
			int val3 = 0;
			RadioFrequency radio_connection = null;
			Signal signal = null;

			
			if ( !Lang13.Bool( this.target ) ) {
				this.icon_state = "meterX";
				return 0;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				this.icon_state = "meter0";
				return 0;
			}
			this.f_use_power( 5 );
			environment = ((Ent_Static)this.target).return_air();

			if ( !( environment != null ) ) {
				this.icon_state = "meterX";
				return 0;
			}
			env_pressure = environment.return_pressure();

			if ( env_pressure <= 15.198750495910645 ) {
				this.icon_state = "meter0";
			} else if ( env_pressure <= 182.38499450683594 ) {
				val = Num13.Floor( env_pressure / 30.39750099182129 + 0.5 );
				this.icon_state = "meter1_" + val;
			} else if ( env_pressure <= 3039.75 ) {
				val2 = Num13.Floor( env_pressure / 506.625 - 0.41 ) + 1;
				this.icon_state = "meter2_" + val2;
			} else if ( env_pressure <= 5978.1748046875 ) {
				val3 = Num13.Floor( env_pressure / 506.625 - 6 ) + 1;
				this.icon_state = "meter3_" + val3;
			} else {
				this.icon_state = "meter4";
			}

			if ( this.frequency != 0 ) {
				radio_connection = GlobalVars.SSradio.return_frequency( this.frequency );

				if ( !( radio_connection != null ) ) {
					return 0;
				}
				signal = new Signal();
				signal.source = this;
				signal.transmission_method = 1;
				signal.data = new ByTable().Set( "tag", this.id ).Set( "device", "AM" ).Set( "pressure", Num13.Floor( env_pressure ) ).Set( "sigtype", "status" );
				radio_connection.post_signal( this, signal );
			}
			return 0;
		}

		// Function from file: meter.dm
		public override void initialize(  ) {
			
			if ( !Lang13.Bool( this.target ) ) {
				this.target = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Pipe), this.loc );
			}
			return;
		}

		// Function from file: meter.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSair.atmos_machinery.Remove( this );
			this.target = null;
			return base.Destroy();
		}

	}

}