// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Scrubber : Obj_Machinery_PortableAtmospherics {

		public bool on = false;
		public int volume_rate = 800;
		public bool widenet = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 750;
			this.icon = "icons/obj/atmos.dmi";
			this.icon_state = "pscrubber:0";
		}

		public Obj_Machinery_PortableAtmospherics_Scrubber ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: scrubber.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? diff = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.stat != 0 || Task13.User.restrained() ) {
				return null;
			}

			if ( Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["power"] ) ) {
					this.on = !this.on;
				}

				if ( Lang13.Bool( href_list["remove_tank"] ) ) {
					
					if ( Lang13.Bool( this.holding ) ) {
						this.holding.loc = this.loc;
						this.holding = null;
					}
				}

				if ( Lang13.Bool( href_list["volume_adj"] ) ) {
					diff = String13.ParseNumber( href_list["volume_adj"] );
					this.volume_rate = Num13.MinInt( ((int)( 1013.25 )), Num13.MaxInt( 0, ((int)( this.volume_rate + ( diff ??0) )) ) );
				}
				this.updateUsrDialog();
				this.add_fingerprint( Task13.User );
				this.update_icon();
			} else {
				Interface13.Browse( Task13.User, null, "window=scrubber" );
				return null;
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string holding_text = null;
			string output_text = null;

			((Mob)a).set_machine( this );

			if ( Lang13.Bool( this.holding ) ) {
				holding_text = new Txt( "<BR><B>Tank Pressure</B>: " ).item( this.holding.air_contents.return_pressure() ).str( " KPa<BR>\n<A href='?src=" ).Ref( this ).str( ";remove_tank=1'>Remove Tank</A><BR>\n" ).ToString();
			}
			output_text = new Txt( "<TT><B>" ).item( this.name ).str( "</B><BR>\nPressure: " ).item( this.air_contents.return_pressure() ).str( " KPa<BR>\nPort Status: " ).item( ( Lang13.Bool( this.connected_port ) ? "Connected" : "Disconnected" ) ).str( "\n" ).item( holding_text ).str( "\n<BR>\nPower Switch: <A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.on ? "On" : "Off" ) ).str( "</A><BR>\nPower regulator: <A href='?src=" ).Ref( this ).str( ";volume_adj=-1000'>-</A> <A href='?src=" ).Ref( this ).str( ";volume_adj=-100'>-</A> <A href='?src=" ).Ref( this ).str( ";volume_adj=-10'>-</A> <A href='?src=" ).Ref( this ).str( ";volume_adj=-1'>-</A> " ).item( this.volume_rate ).str( " <A href='?src=" ).Ref( this ).str( ";volume_adj=1'>+</A> <A href='?src=" ).Ref( this ).str( ";volume_adj=10'>+</A> <A href='?src=" ).Ref( this ).str( ";volume_adj=100'>+</A> <A href='?src=" ).Ref( this ).str( ";volume_adj=1000'>+</A><BR>\n\n<HR>\n<A href='?src=" ).Ref( a ).str( ";mach_close=scrubber'>Close</A><BR>\n" ).ToString();
			Interface13.Browse( a, output_text, "window=scrubber;size=600x300" );
			GlobalFuncs.onclose( a, "scrubber" );
			return null;
		}

		// Function from file: scrubber.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: scrubber.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: scrubber.dm
		public override GasMixture return_air(  ) {
			return this.air_contents;
		}

		// Function from file: scrubber.dm
		public override int? process( dynamic seconds = null ) {
			base.process( (object)(seconds) );
			this.updateDialog();
			return null;
		}

		// Function from file: scrubber.dm
		public void scrub( Ent_Static tile = null ) {
			GasMixture environment = null;
			double transfer_moles = 0;
			dynamic removed = null;
			GasMixture filtered_out = null;
			Gas trace_gas = null;
			Gas trace_gas2 = null;

			
			if ( Lang13.Bool( this.holding ) ) {
				environment = this.holding.air_contents;
			} else {
				environment = tile.return_air();
			}
			transfer_moles = Num13.MinInt( 1, ((int)( this.volume_rate / environment.volume )) ) * environment.total_moles();

			if ( Lang13.Bool( this.holding ) ) {
				removed = environment.remove( transfer_moles );
			} else {
				removed = tile.remove_air( transfer_moles );
			}

			if ( Lang13.Bool( removed ) ) {
				filtered_out = new GasMixture();
				filtered_out.temperature = removed.temperature;
				filtered_out.toxins = Lang13.DoubleNullable( removed.toxins );
				removed.toxins = 0;
				filtered_out.carbon_dioxide = Lang13.DoubleNullable( removed.carbon_dioxide );
				removed.carbon_dioxide = 0;

				if ( removed.trace_gases.len > 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
						trace_gas = _a;
						

						if ( trace_gas is Gas_SleepingAgent ) {
							removed.trace_gases.Remove( trace_gas );
							filtered_out.trace_gases.Add( trace_gas );
						}
					}
				}

				if ( removed.trace_gases.len > 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
						trace_gas2 = _b;
						

						if ( trace_gas2 is Gas_OxygenAgentB ) {
							removed.trace_gases.Remove( trace_gas2 );
							filtered_out.trace_gases.Add( trace_gas2 );
						}
					}
				}
				this.air_contents.merge( filtered_out );

				if ( Lang13.Bool( this.holding ) ) {
					environment.merge( removed );
				} else {
					tile.assume_air( removed );
					((Tile)tile).air_update_turf();
				}
			}
			return;
		}

		// Function from file: scrubber.dm
		public override int process_atmos(  ) {
			Ent_Static T = null;
			Tile_Simulated tile = null;

			base.process_atmos();

			if ( !this.on ) {
				return 0;
			}
			this.scrub( this.loc );

			if ( this.widenet ) {
				T = this.loc;

				if ( T is Tile ) {
					
					foreach (dynamic _a in Lang13.Enumerate( ((Tile)T).GetAtmosAdjacentTurfs( true ), typeof(Tile_Simulated) )) {
						tile = _a;
						
						this.scrub( tile );
					}
				}
			}
			return 0;
		}

		// Function from file: scrubber.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays = 0;

			if ( this.on ) {
				this.icon_state = "pscrubber:1";
			} else {
				this.icon_state = "pscrubber:0";
			}

			if ( Lang13.Bool( this.holding ) ) {
				this.overlays.Add( "scrubber-open" );
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				this.overlays.Add( "scrubber-connector" );
			}
			return null;
		}

		// Function from file: scrubber.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return 0;
			}

			if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
				this.on = !this.on;
				this.update_icon();
			}
			base.emp_act( severity );
			return 0;
		}

	}

}