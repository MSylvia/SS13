// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Defibrillator : Obj_Item_Weapon {

		public bool on = false;
		public bool safety = true;
		public bool powered = false;
		public Obj_Item_Weapon_Twohanded_Shockpaddles paddles = null;
		public dynamic bcell = null;
		public bool combat = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "defibunit";
			this.slot_flags = 1024;
			this.force = 5;
			this.throwforce = 6;
			this.w_class = 4;
			this.origin_tech = "biotech=4";
			this.action_button_name = "Toggle Paddles";
			this.icon_state = "defibunit";
		}

		// Function from file: defib.dm
		public Obj_Item_Weapon_Defibrillator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.paddles = this.make_paddles();
			this.update_icon();
			return;
		}

		// Function from file: defib.dm
		public override dynamic Destroy(  ) {
			dynamic _default = null;

			dynamic M = null;

			
			if ( this.on ) {
				M = GlobalFuncs.get( this.paddles, typeof(Mob) );
				this.remove_paddles( M );
			}
			_default = base.Destroy();
			this.update_icon();
			return _default;
		}

		// Function from file: defib.dm
		public override void equipped( Mob user = null, dynamic slot = null ) {
			
			if ( slot != 1 ) {
				this.remove_paddles( user );
				this.update_icon();
			}
			return;
		}

		// Function from file: defib.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( Lang13.Bool( this.bcell ) ) {
				this.deductcharge( 1000 / severity );

				if ( Convert.ToInt32( this.bcell.reliability ) != 100 && Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
					this.bcell.reliability -= 10 / severity;
				}
			}

			if ( this.safety ) {
				this.safety = false;
				this.visible_message( "<span class='notice'>" + this + " beeps: Safety protocols disabled!</span>" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_saftyOff.ogg", 50, 0 );
			} else {
				this.safety = true;
				this.visible_message( "<span class='notice'>" + this + " beeps: Safety protocols enabled!</span>" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_saftyOn.ogg", 50, 0 );
			}
			this.update_icon();
			base.emp_act( severity );
			return 0;
		}

		// Function from file: defib.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( this.safety ) {
				this.safety = false;
				user.WriteMsg( "<span class='warning'>You silently disable " + this + "'s safety protocols with the cryptographic sequencer." );
			} else {
				this.safety = true;
				user.WriteMsg( "<span class='notice'>You silently enable " + this + "'s safety protocols with the cryptographic sequencer." );
			}
			return false;
		}

		// Function from file: defib.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic C = null;

			
			if ( A == this.paddles ) {
				this.paddles.unwield();
				this.toggle_paddles();
			}

			if ( A is Obj_Item_Weapon_StockParts_Cell ) {
				C = A;

				if ( Lang13.Bool( this.bcell ) ) {
					user.WriteMsg( "<span class='notice'>" + this + " already has a cell.</span>" );
				} else {
					
					if ( ( C.maxcharge ??0) < ( this.paddles.revivecost ??0) ) {
						user.WriteMsg( "<span class='notice'>" + this + " requires a higher capacity cell.</span>" );
						return null;
					}

					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}
					A.loc = this;
					this.bcell = A;
					user.WriteMsg( "<span class='notice'>You install a cell in " + this + ".</span>" );
				}
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( Lang13.Bool( this.bcell ) ) {
					this.bcell.updateicon();
					this.bcell.loc = GlobalFuncs.get_turf( this.loc );
					this.bcell = null;
					user.WriteMsg( "<span class='notice'>You remove the cell from " + this + ".</span>" );
				}
			}
			this.update_icon();
			return null;
		}

		// Function from file: defib.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			Ent_Static H = null;

			
			if ( this.loc is Mob_Living_Carbon_Human ) {
				H = this.loc;

				dynamic _a = over.name; // Was a switch-case, sorry for the mess.
				if ( _a=="r_hand" ) {
					
					if ( Lang13.Bool( ((dynamic)H).r_hand ) ) {
						return null;
					}

					if ( !((Mob)H).unEquip( this ) ) {
						return null;
					}
					((Mob)H).put_in_r_hand( this );
				} else if ( _a=="l_hand" ) {
					
					if ( Lang13.Bool( ((dynamic)H).l_hand ) ) {
						return null;
					}

					if ( !((Mob)H).unEquip( this ) ) {
						return null;
					}
					((Mob)H).put_in_l_hand( this );
				}
			}
			return null;
		}

		// Function from file: defib.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( this.loc == a ) {
				this.ui_action_click();
				return null;
			}
			base.attack_hand( (object)(a), b, c );
			return null;
		}

		// Function from file: defib.dm
		public override void ui_action_click(  ) {
			
			if ( Task13.User.get_item_by_slot( 1 ) == this ) {
				this.toggle_paddles();
			} else {
				Task13.User.WriteMsg( "<span class='warning'>Put the defibrillator on your back first!</span>" );
			}
			return;
		}

		// Function from file: defib.dm
		public override void CheckParts( Game_Data holder = null ) {
			this.bcell = Lang13.FindIn( typeof(Obj_Item_Weapon_StockParts_Cell), this.contents );
			this.update_icon();
			return;
		}

		// Function from file: defib.dm
		public void cooldowncheck( dynamic user = null ) {
			Task13.Schedule( 50, (Task13.Closure)(() => {
				
				if ( Lang13.Bool( this.bcell ) ) {
					
					if ( Convert.ToDouble( this.bcell.charge ) >= ( this.paddles.revivecost ??0) ) {
						((Ent_Static)user).visible_message( "<span class='notice'>" + this + " beeps: Unit ready.</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_ready.ogg", 50, 0 );
					} else {
						((Ent_Static)user).visible_message( "<span class='notice'>" + this + " beeps: Charge depleted.</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/defib_failed.ogg", 50, 0 );
					}
				}
				this.paddles.cooldown = false;
				this.paddles.update_icon();
				this.update_icon();
				return;
			}));
			return;
		}

		// Function from file: defib.dm
		public bool deductcharge( double? chrgdeductamt = null ) {
			
			if ( Lang13.Bool( this.bcell ) ) {
				
				if ( Convert.ToDouble( this.bcell.charge ) < ( this.paddles.revivecost ??0) + ( chrgdeductamt ??0) ) {
					this.powered = false;
					this.update_icon();
				}

				if ( ((Obj_Item_Weapon_StockParts_Cell)this.bcell).use( chrgdeductamt ) ) {
					this.update_icon();
					return true;
				} else {
					this.update_icon();
					return false;
				}
			}
			return false;
		}

		// Function from file: defib.dm
		public void remove_paddles( dynamic user = null ) {
			dynamic M = null;

			M = user;

			if ( GlobalFuncs.get_both_hands( M ).Contains( this.paddles ) ) {
				((Mob)M).unEquip( this.paddles, true );
			}
			this.update_icon();
			return;
		}

		// Function from file: defib.dm
		public Obj_Item_Weapon_Twohanded_Shockpaddles make_paddles(  ) {
			return new Obj_Item_Weapon_Twohanded_Shockpaddles( this );
		}

		// Function from file: defib.dm
		[VerbInfo( name: "Toggle Paddles", group: "Object" )]
		public void toggle_paddles(  ) {
			Mob user = null;

			this.on = !this.on;
			user = Task13.User;

			if ( this.on ) {
				
				if ( !Task13.User.put_in_hands( this.paddles ) ) {
					this.on = false;
					user.WriteMsg( "<span class='warning'>You need a free hand to hold the paddles!</span>" );
					this.update_icon();
					return;
				}
				this.paddles.loc = user;
			} else {
				this.paddles.unwield();
				this.remove_paddles( user );
			}
			this.update_icon();
			return;
		}

		// Function from file: defib.dm
		public void update_charge(  ) {
			int ratio = 0;

			
			if ( this.powered ) {
				
				if ( Lang13.Bool( this.bcell ) ) {
					ratio = Convert.ToInt32( this.bcell.charge / this.bcell.maxcharge );
					ratio = GlobalFuncs.Ceiling( ratio * 4 ) * 25;
					this.overlays.Add( "" + Lang13.Initial( this, "icon_state" ) + "-charge" + ratio );
				}
			}
			return;
		}

		// Function from file: defib.dm
		public void update_overlays(  ) {
			this.overlays.Cut();

			if ( !this.on ) {
				this.overlays.Add( "" + Lang13.Initial( this, "icon_state" ) + "-paddles" );
			}

			if ( this.powered ) {
				this.overlays.Add( "" + Lang13.Initial( this, "icon_state" ) + "-powered" );
			}

			if ( !Lang13.Bool( this.bcell ) ) {
				this.overlays.Add( "" + Lang13.Initial( this, "icon_state" ) + "-nocell" );
			}

			if ( !this.safety ) {
				this.overlays.Add( "" + Lang13.Initial( this, "icon_state" ) + "-emagged" );
			}
			return;
		}

		// Function from file: defib.dm
		public void update_power(  ) {
			
			if ( Lang13.Bool( this.bcell ) ) {
				
				if ( Convert.ToDouble( this.bcell.charge ) < ( this.paddles.revivecost ??0) ) {
					this.powered = false;
				} else {
					this.powered = true;
				}
			} else {
				this.powered = false;
			}
			return;
		}

		// Function from file: defib.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.update_power();
			this.update_overlays();
			this.update_charge();
			return null;
		}

	}

}