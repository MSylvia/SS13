// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Smes : Obj_Machinery_Power {

		public double capacity = 5000000;
		public double charge = 0;
		public int input_attempt = 1;
		public int inputting = 1;
		public dynamic input_level = 50000;
		public double input_level_max = 200000;
		public dynamic input_available = 0;
		public int output_attempt = 1;
		public int outputting = 1;
		public dynamic output_level = 50000;
		public double output_level_max = 200000;
		public double output_used = 0;
		public Obj_Machinery_Power_Terminal terminal = null;
		public dynamic smesImageCache = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "smes";
		}

		// Function from file: smes.dm
		public Obj_Machinery_Power_Smes ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic d = null;
			Tile T = null;
			Obj_Machinery_Power_Terminal term = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Smes( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Cell_High( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Cell_High( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Cell_High( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Cell_High( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Cell_High( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 5 ) );
			this.RefreshParts();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					d = _b;
					
					T = Map13.GetStep( this, Convert.ToInt32( d ) );
					string _loop_ctrl_1 = null;

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Machinery_Power_Terminal) )) {
						term = _a;
						

						if ( term != null && term.dir == Num13.Rotate( d, 180 ) ) {
							this.terminal = term;
							_loop_ctrl_1 = "break";
							break;
						}
					}

					if ( _loop_ctrl_1 == "break" ) {
						break;
					} else if ( _loop_ctrl_1 == "continue" ) {
						continue;
					}
				}

				if ( !( this.terminal != null ) ) {
					this.stat |= 1;
					return;
				}
				this.terminal.master = this;
				this.update_icon();
				return;
			}));
			return;
		}

		// Function from file: terminal.dm
		public override bool can_terminal_dismantle(  ) {
			bool _default = false;

			_default = false;

			if ( this.panel_open == true ) {
				_default = true;
			}
			return _default;
		}

		// Function from file: smes.dm
		public override double emp_act( int severity = 0 ) {
			this.input_attempt = Rand13.Int( 0, 1 );
			this.inputting = this.input_attempt;
			this.output_attempt = Rand13.Int( 0, 1 );
			this.outputting = this.output_attempt;
			this.output_level = Rand13.Int( 0, ((int)( this.output_level_max )) );
			this.input_level = Rand13.Int( 0, ((int)( this.input_level_max )) );
			this.charge -= 1000000 / severity;

			if ( this.charge < 0 ) {
				this.charge = 0;
			}
			this.update_icon();
			this.log_smes( "an emp" );
			base.emp_act( severity );
			return 0;
		}

		// Function from file: smes.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			dynamic custom = null;
			dynamic custom2 = null;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _c = action; // Was a switch-case, sorry for the mess.
			if ( _c=="tryinput" ) {
				this.input_attempt = !( this.input_attempt != 0 ) ?1:0;
				this.log_smes( Task13.User.ckey );
				this.update_icon();
			} else if ( _c=="tryoutput" ) {
				this.output_attempt = !( this.output_attempt != 0 ) ?1:0;
				this.log_smes( Task13.User.ckey );
				this.update_icon();
			} else if ( _c=="input" ) {
				
				dynamic _a = _params["input"]; // Was a switch-case, sorry for the mess.
				if ( _a=="custom" ) {
					custom = Interface13.Input( Task13.User, "What rate would you like this SMES to attempt to charge at? Max is " + this.input_level_max + ".", null, null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( custom ) ) {
						this.input_level = custom;
					}
				} else if ( _a=="min" ) {
					this.input_level = 0;
				} else if ( _a=="max" ) {
					this.input_level = this.input_level_max;
				} else if ( _a=="plus" ) {
					this.input_level += 10000;
				} else if ( _a=="minus" ) {
					this.input_level -= 10000;
				}
				this.input_level = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( this.input_level ), ((int)( this.input_level_max )) ) );
				this.log_smes( Task13.User.ckey );
			} else if ( _c=="output" ) {
				
				dynamic _b = _params["output"]; // Was a switch-case, sorry for the mess.
				if ( _b=="custom" ) {
					custom2 = Interface13.Input( Task13.User, "What rate would you like this SMES to attempt to output at? Max is " + this.output_level_max + ".", null, null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( custom2 ) ) {
						this.output_level = custom2;
					}
				} else if ( _b=="min" ) {
					this.output_level = 0;
				} else if ( _b=="max" ) {
					this.output_level = this.output_level_max;
				} else if ( _b=="plus" ) {
					this.output_level += 10000;
				} else if ( _b=="minus" ) {
					this.output_level -= 10000;
				}
				this.output_level = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( this.output_level ), ((int)( this.output_level_max )) ) );
				this.log_smes( Task13.User.ckey );
			}
			return true;
		}

		// Function from file: smes.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable()
				.Set( "capacityPercent", Num13.Round( this.charge * 100 / this.capacity, 0.1 ) )
				.Set( "capacity", this.capacity )
				.Set( "charge", this.charge )
				.Set( "inputAttempt", this.input_attempt )
				.Set( "inputting", this.inputting )
				.Set( "inputLevel", this.input_level )
				.Set( "inputLevelMax", this.input_level_max )
				.Set( "inputAvailable", this.input_available )
				.Set( "outputAttempt", this.output_attempt )
				.Set( "outputting", this.outputting )
				.Set( "outputLevel", this.output_level )
				.Set( "outputLevelMax", this.output_level_max )
				.Set( "outputUsed", this.output_used )
			;
			return data;
		}

		// Function from file: smes.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "smes", this.name, 340, 440, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: smes.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			this.ui_interact( user );
			return null;
		}

		// Function from file: smes.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}
			this.add_fingerprint( a );
			this.interact( a );
			return null;
		}

		// Function from file: smes.dm
		public override void add_load( dynamic amount = null ) {
			
			if ( this.terminal != null && Lang13.Bool( this.terminal.powernet ) ) {
				this.terminal.powernet.load += amount;
			}
			return;
		}

		// Function from file: smes.dm
		public override int? process( dynamic seconds = null ) {
			int last_disp = 0;
			int last_chrg = 0;
			int last_onln = 0;
			double load = 0;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			last_disp = this.chargedisplay();
			last_chrg = this.inputting;
			last_onln = this.outputting;

			if ( this.terminal != null && this.input_attempt != 0 ) {
				this.input_available = this.terminal.surplus();

				if ( this.inputting != 0 ) {
					
					if ( Convert.ToDouble( this.input_available ) > 0 && Convert.ToDouble( this.input_available ) >= Convert.ToDouble( this.input_level ) ) {
						load = Num13.MinInt( ((int)( ( this.capacity - this.charge ) / 0.05 )), Convert.ToInt32( this.input_level ) );
						this.charge += load * 0.05;
						this.add_load( load );
					} else {
						this.inputting = 0;
					}
				} else if ( this.input_attempt != 0 && Convert.ToDouble( this.input_available ) > 0 && Convert.ToDouble( this.input_available ) >= Convert.ToDouble( this.input_level ) ) {
					this.inputting = 1;
				}
			} else {
				this.inputting = 0;
			}

			if ( this.output_attempt != 0 ) {
				
				if ( this.outputting != 0 ) {
					this.output_used = Num13.MinInt( ((int)( this.charge / 0.05 )), Convert.ToInt32( this.output_level ) );
					this.charge -= this.output_used * 0.05;
					this.add_avail( this.output_used );

					if ( this.output_used < 0.0 ) {
						this.outputting = 0;
						this.investigate_log( "lost power and turned <font color='red'>off</font>", "singulo" );
					}
				} else if ( this.output_attempt != 0 && this.charge > Convert.ToDouble( this.output_level ) && Convert.ToDouble( this.output_level ) > 0 ) {
					this.outputting = 1;
				} else {
					this.output_used = 0;
				}
			} else {
				this.outputting = 0;
			}

			if ( last_disp != this.chargedisplay() || last_chrg != this.inputting || last_onln != this.outputting ) {
				this.update_icon();
			}
			return null;
		}

		// Function from file: smes.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			int clevel = 0;

			this.overlays.Cut();

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( this.panel_open == true ) {
				return null;
			}

			if ( !( GlobalVars.smesImageCache != null ) || !( GlobalVars.smesImageCache.len != 0 ) ) {
				GlobalVars.smesImageCache = new ByTable();
				GlobalVars.smesImageCache.len = 9;
				GlobalVars.smesImageCache[1] = new Image( "icons/obj/power.dmi", "smes-og1" );
				GlobalVars.smesImageCache[2] = new Image( "icons/obj/power.dmi", "smes-og2" );
				GlobalVars.smesImageCache[3] = new Image( "icons/obj/power.dmi", "smes-og3" );
				GlobalVars.smesImageCache[4] = new Image( "icons/obj/power.dmi", "smes-og4" );
				GlobalVars.smesImageCache[5] = new Image( "icons/obj/power.dmi", "smes-og5" );
				GlobalVars.smesImageCache[6] = new Image( "icons/obj/power.dmi", "smes-op1" );
				GlobalVars.smesImageCache[7] = new Image( "icons/obj/power.dmi", "smes-op0" );
				GlobalVars.smesImageCache[8] = new Image( "icons/obj/power.dmi", "smes-oc1" );
				GlobalVars.smesImageCache[9] = new Image( "icons/obj/power.dmi", "smes-oc0" );
			}

			if ( this.outputting != 0 ) {
				this.overlays.Add( GlobalVars.smesImageCache[6] );
			} else {
				this.overlays.Add( GlobalVars.smesImageCache[7] );
			}

			if ( this.inputting != 0 ) {
				this.overlays.Add( GlobalVars.smesImageCache[8] );
			} else if ( this.input_attempt != 0 ) {
				this.overlays.Add( GlobalVars.smesImageCache[9] );
			}
			clevel = this.chargedisplay();

			if ( clevel > 0 ) {
				this.overlays.Add( GlobalVars.smesImageCache[clevel] );
			}
			return null;
		}

		// Function from file: smes.dm
		public override void disconnect_terminal(  ) {
			
			if ( this.terminal != null ) {
				this.terminal.master = null;
				this.terminal = null;
			}
			return;
		}

		// Function from file: smes.dm
		public void log_smes( string user = null ) {
			user = user ?? "";

			this.investigate_log( "input/output; " + ( Convert.ToDouble( this.input_level ) > Convert.ToDouble( this.output_level ) ? "<font color='green'>" : "<font color='red'>" ) + this.input_level + "/" + this.output_level + "</font> | Charge: " + this.charge + " | Output-mode: " + ( this.output_attempt != 0 ? "<font color='green'>on</font>" : "<font color='red'>off</font>" ) + " | Input-mode: " + ( this.input_attempt != 0 ? "<font color='green'>auto</font>" : "<font color='red'>off</font>" ) + " by " + user, "singulo" );
			return;
		}

		// Function from file: smes.dm
		public void restore(  ) {
			double excess = 0;
			int clev = 0;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return;
			}

			if ( !( this.outputting != 0 ) ) {
				this.output_used = 0;
				return;
			}
			excess = this.powernet.netexcess;
			excess = Num13.MinInt( ((int)( this.output_used )), ((int)( excess )) );
			excess = Num13.MinInt( ((int)( ( this.capacity - this.charge ) / 0.05 )), ((int)( excess )) );
			clev = this.chargedisplay();
			this.charge += excess * 0.05;
			this.powernet.netexcess -= excess;
			this.output_used -= excess;

			if ( clev != this.chargedisplay() ) {
				this.update_icon();
			}
			return;
		}

		// Function from file: smes.dm
		public int chargedisplay(  ) {
			return Num13.Floor( this.charge * 5.5 / this.capacity );
		}

		// Function from file: smes.dm
		public void make_terminal( dynamic T = null ) {
			this.terminal = new Obj_Machinery_Power_Terminal( T );
			this.terminal.dir = Map13.GetDistance( T, this );
			this.terminal.master = this;
			return;
		}

		// Function from file: smes.dm
		public override dynamic Destroy(  ) {
			dynamic area = null;

			
			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
				area = GlobalFuncs.get_area( this );
				GlobalFuncs.message_admins( "SMES deleted at (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>" + area.name + "</a>)" );
				GlobalFuncs.log_game( "SMES deleted at (" + area.name + ")" );
				this.investigate_log( "<font color='red'>deleted</font> at (" + area.name + ")", "singulo" );
			}

			if ( this.terminal != null ) {
				this.disconnect_terminal();
			}
			return base.Destroy();
		}

		// Function from file: smes.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Tile T = null;
			Obj_Machinery_Power_Terminal term = null;
			int dir = 0;
			dynamic T2 = null;
			dynamic C = null;
			dynamic N = null;
			EffectSystem_SparkSpread s = null;
			dynamic T3 = null;

			
			if ( this.default_deconstruction_screwdriver( user, "" + Lang13.Initial( this, "icon_state" ) + "-o", Lang13.Initial( this, "icon_state" ), A ) ) {
				this.update_icon();
				return null;
			}

			if ( this.default_change_direction_wrench( user, A ) ) {
				this.terminal = null;
				T = Map13.GetStep( this, this.dir );

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Machinery_Power_Terminal) )) {
					term = _a;
					

					if ( term != null && term.dir == Num13.Rotate( this.dir, 180 ) ) {
						this.terminal = term;
						this.terminal.master = this;
						user.WriteMsg( "<span class='notice'>Terminal found.</span>" );
						break;
					}
				}

				if ( !( this.terminal != null ) ) {
					user.WriteMsg( "<span class='alert'>No power source found.</span>" );
					return null;
				}
				this.stat &= 65534;
				this.update_icon();
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( A is Obj_Item_Stack_CableCoil ) {
				dir = Map13.GetDistance( user, this );

				if ( ( dir & dir - 1 ) != 0 ) {
					return null;
				}

				if ( this.terminal != null ) {
					user.WriteMsg( "<span class='warning'>This SMES already have a power terminal!</span>" );
					return null;
				}

				if ( !( this.panel_open == true ) ) {
					user.WriteMsg( "<span class='warning'>You must open the maintenance panel first!</span>" );
					return null;
				}
				T2 = GlobalFuncs.get_turf( user );

				if ( T2.intact ) {
					user.WriteMsg( "<span class='warning'>You must first remove the floor plating!</span>" );
					return null;
				}
				C = A;

				if ( Convert.ToDouble( C.amount ) < 10 ) {
					user.WriteMsg( "<span class='warning'>You need more wires!</span>" );
					return null;
				}
				user.WriteMsg( "<span class='notice'>You start building the power terminal...</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, 20, null, this ) && Convert.ToDouble( C.amount ) >= 10 ) {
					N = ((Tile)T2).get_cable_node();

					if ( Rand13.PercentChance( 50 ) && Lang13.Bool( GlobalFuncs.electrocute_mob( Task13.User, N, N ) ) ) {
						s = new EffectSystem_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();
						return null;
					}
					C.use( 10 );
					((Ent_Static)user).visible_message( "" + user.name + " has built a power terminal.", "<span class='notice'>You build the power terminal.</span>" );
					this.make_terminal( T2 );
					this.terminal.connect_to_network();
				}
				return null;
			}

			if ( A is Obj_Item_Weapon_Wirecutters && this.terminal != null && this.panel_open == true ) {
				this.terminal.dismantle( user );
			}
			T3 = GlobalFuncs.get_turf( this );

			if ( this.default_deconstruction_crowbar( A ) ) {
				GlobalFuncs.message_admins( new Txt().item( this ).str( " has been deconstructed by " ).item( GlobalFuncs.key_name_admin( user ) ).str( "(<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( user ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( user ).str( "'>FLW</A>) in (" ).item( T3.x ).str( "," ).item( T3.y ).str( "," ).item( T3.z ).str( " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( T3.x ).str( ";Y=" ).item( T3.y ).str( ";Z=" ).item( T3.z ).str( "'>JMP</a>)" ).ToString() );
				GlobalFuncs.log_game( "" + this + " has been deconstructed by " + GlobalFuncs.key_name( user ) );
				this.investigate_log( "SMES deconstructed by " + GlobalFuncs.key_name( user ), "singulo" );
			}
			return null;
		}

		// Function from file: smes.dm
		public override void RefreshParts(  ) {
			double IO = 0;
			double C = 0;
			Obj_Item_Weapon_StockParts_Capacitor CP = null;
			Obj_Item_Weapon_StockParts_Cell PC = null;

			IO = 0;
			C = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Capacitor) )) {
				CP = _a;
				
				IO += Convert.ToDouble( CP.rating );
			}
			this.input_level_max = IO * 200000;
			this.output_level_max = IO * 200000;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Cell) )) {
				PC = _b;
				
				C += PC.maxcharge ??0;
			}
			this.capacity = C / 15000 * 1000000;
			return;
		}

		// Function from file: ninjaDrainAct.dm
		public override dynamic ninjadrain_act( Obj_Item_Clothing_Suit_Space_SpaceNinja S = null, Ent_Static H = null, Obj_Item_Clothing_Gloves_SpaceNinja G = null ) {
			dynamic _default = null;

			bool maxcapacity = false;
			double drain = 0;
			EffectSystem_SparkSpread spark_system = null;

			
			if ( !( S != null ) || !( H != null ) || !( G != null ) ) {
				return "INVALID";
			}
			maxcapacity = false;
			drain = 0;
			_default = 0;

			if ( this.charge != 0 ) {
				spark_system = new EffectSystem_SparkSpread();
				spark_system.set_up( 5, 0, this.loc );

				while (G.candrain && this.charge > 0 && !maxcapacity) {
					drain = Rand13.Int( G.mindrain, G.maxdrain );

					if ( this.charge < drain ) {
						drain = this.charge;
					}

					if ( Convert.ToDouble( S.cell.charge + drain ) > ( S.cell.maxcharge ??0) ) {
						drain = ( S.cell.maxcharge ??0) - Convert.ToDouble( S.cell.charge );
						maxcapacity = true;
					}

					if ( GlobalFuncs.do_after( H, 10, null, this ) ) {
						spark_system.start();
						GlobalFuncs.playsound( this.loc, "sparks", 50, 1 );
						this.charge -= drain;
						S.cell.charge += drain;
						_default += drain;
					} else {
						break;
					}
				}
			}
			return _default;
		}

	}

}