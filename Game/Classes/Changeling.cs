// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Changeling : Game_Data {

		public ByTable stored_profiles = new ByTable();
		public Changelingprofile first_prof = null;
		public int dna_max = 6;
		public double? absorbedcount = 0;
		public double chem_charges = 20;
		public dynamic chem_storage = 75;
		public dynamic chem_recharge_rate = 1;
		public dynamic chem_recharge_slowdown = 0;
		public dynamic sting_range = 2;
		public dynamic changelingID = "Changeling";
		public int geneticdamage = 0;
		public bool isabsorbing = false;
		public dynamic geneticpoints = 10;
		public ByTable purchasedpowers = new ByTable();
		public string mimicing = "";
		public bool canrespec = false;
		public bool changeling_speak = false;
		public dynamic chosen_dna = null;
		public Obj_Effect_ProcHolder_Changeling_Sting chosen_sting = null;

		// Function from file: changeling.dm
		public Changeling ( string gender = null ) {
			gender = gender ?? GlobalVars.FEMALE;

			string honorific = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( gender == GlobalVars.FEMALE ) {
				honorific = "Ms.";
			} else {
				honorific = "Mr.";
			}

			if ( GlobalVars.possible_changeling_IDs.len != 0 ) {
				this.changelingID = Rand13.PickFromTable( GlobalVars.possible_changeling_IDs );
				GlobalVars.possible_changeling_IDs.Remove( this.changelingID );
				this.changelingID = "" + honorific + " " + this.changelingID;
			} else {
				this.changelingID = "" + honorific + " " + Rand13.Int( 1, 999 );
			}
			return;
		}

		// Function from file: transform.dm
		public Changelingprofile select_dna( string prompt = null, string title = null, Mob user = null ) {
			ByTable names = null;
			Changelingprofile prof = null;
			dynamic chosen_name = null;
			dynamic slot = null;
			Changelingprofile prof2 = null;

			names = new ByTable(new object [] { "Drop Flesh Disguise" });

			foreach (dynamic _a in Lang13.Enumerate( this.stored_profiles, typeof(Changelingprofile) )) {
				prof = _a;
				
				names.Add( "" + prof.name );
			}
			chosen_name = Interface13.Input( prompt, title, null, null, names, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( chosen_name ) ) {
				return null;
			}

			if ( chosen_name == "Drop Flesh Disguise" ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.slots )) {
					slot = _b;
					

					if ( Lang13.Bool( GlobalVars.slot2type[slot].IsInstanceOfType( user.vars[slot] ) ) ) {
						GlobalFuncs.qdel( user.vars[slot] );
					}
				}
			}
			prof2 = this.get_dna( chosen_name );
			return prof2;
		}

		// Function from file: evolution_menu.dm
		public bool has_sting( dynamic power = null ) {
			Obj_Effect_ProcHolder_Changeling P = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.purchasedpowers, typeof(Obj_Effect_ProcHolder_Changeling) )) {
				P = _a;
				

				if ( power.name == P.name ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: evolution_menu.dm
		public void reset(  ) {
			this.chosen_sting = null;
			this.geneticpoints = Lang13.Initial( this, "geneticpoints" );
			this.sting_range = Lang13.Initial( this, "sting_range" );
			this.chem_storage = Lang13.Initial( this, "chem_storage" );
			this.chem_recharge_rate = Lang13.Initial( this, "chem_recharge_rate" );
			this.chem_charges = Num13.MinInt( ((int)( this.chem_charges )), Convert.ToInt32( this.chem_storage ) );
			this.chem_recharge_slowdown = Lang13.Initial( this, "chem_recharge_slowdown" );
			this.mimicing = "";
			return;
		}

		// Function from file: evolution_menu.dm
		public bool lingRespec( Mob user = null ) {
			
			if ( !( user is Mob_Living_Carbon_Human ) ) {
				user.WriteMsg( "<span class='danger'>We can't remove our evolutions in this form!</span>" );
				return false;
			}

			if ( this.canrespec ) {
				user.WriteMsg( "<span class='notice'>We have removed our evolutions from this form, and are now ready to readapt.</span>" );
				user.remove_changeling_powers( true );
				this.canrespec = false;
				user.make_changeling();
				return true;
			} else {
				user.WriteMsg( "<span class='danger'>You lack the power to readapt your evolutions!</span>" );
				return false;
			}
		}

		// Function from file: evolution_menu.dm
		public void purchasePower( Mob user = null, dynamic sting_name = null ) {
			dynamic thepower = null;
			dynamic path = null;
			dynamic S = null;

			thepower = null;

			if ( !( GlobalVars.sting_paths != null ) ) {
				GlobalVars.sting_paths = GlobalFuncs.init_paths( typeof(Obj_Effect_ProcHolder_Changeling) );
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.sting_paths )) {
				path = _a;
				
				S = Lang13.Call( path );

				if ( S.name == sting_name ) {
					thepower = S;
				}
			}

			if ( thepower == null ) {
				user.WriteMsg( "This is awkward. Changeling power purchase failed, please report this bug to a coder!" );
				return;
			}

			if ( ( this.absorbedcount ??0) < ( thepower.req_dna ??0) ) {
				user.WriteMsg( "We lack the energy to evolve this ability!" );
				return;
			}

			if ( this.has_sting( thepower ) ) {
				user.WriteMsg( "We have already evolved this ability!" );
				return;
			}

			if ( thepower.dna_cost < 0 ) {
				user.WriteMsg( "We cannot evolve this ability." );
				return;
			}

			if ( Convert.ToDouble( this.geneticpoints ) < thepower.dna_cost ) {
				user.WriteMsg( "We have reached our capacity for abilities." );
				return;
			}

			if ( ( user.status_flags & 8192 ) != 0 ) {
				user.WriteMsg( "We lack the energy to evolve new abilities right now." );
				return;
			}
			this.geneticpoints -= thepower.dna_cost;
			this.purchasedpowers.Add( thepower );
			((Obj_Effect_ProcHolder_Changeling)thepower).on_purchase( user );
			return;
		}

		// Function from file: changeling.dm
		public bool push_out_profile(  ) {
			Changelingprofile removeprofile = null;

			removeprofile = this.get_profile_to_remove();

			if ( removeprofile != null ) {
				this.stored_profiles.Remove( removeprofile );
				return true;
			}
			return false;
		}

		// Function from file: changeling.dm
		public Changelingprofile get_profile_to_remove(  ) {
			Changelingprofile prof = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.stored_profiles, typeof(Changelingprofile) )) {
				prof = _a;
				

				if ( !( prof.v_protected == true ) ) {
					return prof;
				}
			}
			return null;
		}

		// Function from file: changeling.dm
		public void remove_profile( Mob H = null, bool? force = null ) {
			force = force ?? false;

			Changelingprofile prof = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.stored_profiles, typeof(Changelingprofile) )) {
				prof = _a;
				

				if ( H.real_name == prof.name ) {
					
					if ( prof.v_protected == true && !( force == true ) ) {
						continue;
					}
					this.stored_profiles.Remove( prof );
					GlobalFuncs.qdel( prof );
				}
			}
			return;
		}

		// Function from file: changeling.dm
		public Changelingprofile add_new_profile( dynamic H = null, Mob user = null, bool? protect = null ) {
			protect = protect ?? false;

			Changelingprofile prof = null;

			prof = this.create_profile( H, protect );
			this.add_profile( prof );
			return prof;
		}

		// Function from file: changeling.dm
		public void add_profile( dynamic prof = null ) {
			
			if ( this.stored_profiles.len > this.dna_max ) {
				
				if ( !this.push_out_profile() ) {
					return;
				}
			}
			this.stored_profiles.Add( prof );
			this.absorbedcount++;
			return;
		}

		// Function from file: changeling.dm
		public Changelingprofile create_profile( dynamic H = null, bool? user = null, bool? protect = null ) {
			protect = protect ?? false;

			Changelingprofile prof = null;
			dynamic new_dna = null;
			ByTable slots = null;
			dynamic slot = null;
			Obj_Item I = null;

			prof = new Changelingprofile();
			H.dna.real_name = H.real_name;
			new_dna = Lang13.Call( H.dna.type );
			((Dna)H.dna).copy_dna( new_dna );
			prof.dna = new_dna;
			prof.name = H.real_name;
			prof.v_protected = protect;
			prof.underwear = H.underwear;
			prof.undershirt = H.undershirt;
			prof.socks = H.socks;
			slots = new ByTable(new object [] { "head", "wear_mask", "back", "wear_suit", "w_uniform", "shoes", "belt", "gloves", "glasses", "ears", "wear_id", "s_store" });

			foreach (dynamic _a in Lang13.Enumerate( slots )) {
				slot = _a;
				

				if ( H.vars.Contains( slot ) ) {
					I = H.vars[slot];

					if ( !( I != null ) ) {
						continue;
					}
					prof.name_list[slot] = I.name;
					prof.appearance_list[slot] = I.appearance;
					prof.flags_cover_list[slot] = I.flags_cover;
					prof.item_color_list[slot] = I.item_color;
					prof.item_state_list[slot] = I.item_state;
					prof.exists_list[slot] = 1;
				} else {
					continue;
				}
			}
			return prof;
		}

		// Function from file: changeling.dm
		public bool can_absorb_dna( Mob user = null, dynamic target = null, bool? verbose = null ) {
			verbose = verbose ?? true;

			dynamic prof = null;

			
			if ( this.stored_profiles.len != 0 ) {
				prof = this.stored_profiles[1];

				if ( prof.dna == ((dynamic)user).dna && this.stored_profiles.len >= this.dna_max ) {
					
					if ( verbose == true ) {
						user.WriteMsg( "<span class='warning'>We have reached our capacity to store genetic information! We must transform before absorbing more.</span>" );
					}
					return false;
				}
			}

			if ( !Lang13.Bool( target ) ) {
				return false;
			}

			if ( Lang13.Bool( target.disabilities & 128 ) || Lang13.Bool( target.disabilities & 64 ) ) {
				
				if ( verbose == true ) {
					user.WriteMsg( "<span class='warning'>DNA of " + target + " is ruined beyond usability!</span>" );
				}
				return false;
			}

			if ( !( target is Mob_Living_Carbon_Human ) ) {
				
				if ( verbose == true ) {
					user.WriteMsg( "<span class='warning'>We could gain no benefit from absorbing a lesser creature.</span>" );
				}
				return false;
			}

			if ( this.has_dna( target.dna ) ) {
				
				if ( verbose == true ) {
					user.WriteMsg( "<span class='warning'>We already have this DNA in storage!</span>" );
				}
				return false;
			}

			if ( !Lang13.Bool( target.has_dna() ) ) {
				
				if ( verbose == true ) {
					user.WriteMsg( "<span class='warning'>" + target + " is not compatible with our biology.</span>" );
				}
				return false;
			}
			return true;
		}

		// Function from file: changeling.dm
		public bool has_dna( Dna tDNA = null ) {
			Changelingprofile prof = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.stored_profiles, typeof(Changelingprofile) )) {
				prof = _a;
				

				if ( tDNA.is_same_as( prof.dna ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: changeling.dm
		public Changelingprofile get_dna( dynamic dna_owner = null ) {
			Changelingprofile prof = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.stored_profiles, typeof(Changelingprofile) )) {
				prof = _a;
				

				if ( dna_owner == prof.name ) {
					return prof;
				}
			}
			return null;
		}

		// Function from file: changeling.dm
		public void regenerate( Mob_Living_Carbon the_ling = null ) {
			
			if ( the_ling is Mob_Living_Carbon ) {
				
				if ( the_ling.stat == 2 ) {
					this.chem_charges = Num13.MinInt( Num13.MaxInt( 0, ((int)( this.chem_charges + Convert.ToDouble( this.chem_recharge_rate ) - Convert.ToDouble( this.chem_recharge_slowdown ) )) ), Convert.ToInt32( this.chem_storage * 0.5 ) );
					this.geneticdamage = Num13.MaxInt( 50, this.geneticdamage - 1 );
				} else {
					this.chem_charges = Num13.MinInt( Num13.MaxInt( 0, ((int)( this.chem_charges + Convert.ToDouble( this.chem_recharge_rate ) - Convert.ToDouble( this.chem_recharge_slowdown ) )) ), Convert.ToInt32( this.chem_storage ) );
					this.geneticdamage = Num13.MaxInt( 0, this.geneticdamage - 1 );
				}
			}
			return;
		}

	}

}