// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Events : Game_Data {

		public ByTable events = null;

		// Function from file: events.dm
		public Events (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.events = new ByTable();
			return;
		}

		// Function from file: events.dm
		public bool clearEvent( string event_type = null, Event E = null ) {
			dynamic _event = null;

			
			if ( !Lang13.Bool( event_type ) || !( E != null ) ) {
				return false;
			}
			_event = GlobalFuncs.listgetindex( this.events, event_type );
			_event -= E;
			return true;
		}

		// Function from file: events.dm
		public void fireEvent( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			dynamic _event = null;
			Event E = null;

			_event = GlobalFuncs.listgetindex( this.events, _args[1] );

			if ( _event is ByTable ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _a in Lang13.Enumerate( _event, typeof(Event) )) {
						E = _a;
						

						if ( !Lang13.Bool( _args.Copy( 2 ).Apply( Lang13.BindFunc( E, "Fire" ) ) ) ) {
							this.clearEvent( _args[1], E );
						}
					}
					return;
				}));
			}
			return;
		}

		// Function from file: events.dm
		public Event addEvent( string event_type = null, Obj_Item_MechaParts_MechaEquipment_CableLayer proc_holder = null, string proc_name = null ) {
			dynamic _event = null;
			Event E = null;

			
			if ( !Lang13.Bool( event_type ) || !( proc_holder != null ) || !Lang13.Bool( proc_name ) ) {
				return null;
			}
			this.addEventType( event_type );
			_event = this.events[event_type];
			E = new Event( proc_holder, proc_name );
			_event += E;
			return E;
		}

		// Function from file: events.dm
		public bool addEventType( string event_type = null ) {
			
			if ( !this.events.Contains( event_type ) || !( this.events[event_type] is ByTable ) ) {
				this.events[event_type] = new ByTable();
				return true;
			}
			return false;
		}

	}

}