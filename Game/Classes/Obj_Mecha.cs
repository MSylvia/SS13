// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Mecha : Obj {

		public bool can_move = true;
		public dynamic occupant = null;
		public dynamic step_in = 10;
		public int dir_in = 2;
		public dynamic step_energy_drain = 10;
		public double health = 300;
		public dynamic deflect_chance = 10;
		public ByTable damage_absorption = new ByTable().Set( "brute", 0.8 ).Set( "fire", 1.2 ).Set( "bullet", 081 ).Set( "laser", 1 ).Set( "energy", 1 ).Set( "bomb", 1 );
		public dynamic cell = null;
		public int state = 0;
		public ByTable log = new ByTable();
		public int last_message = 0;
		public bool add_req_access = true;
		public bool maint_access = false;
		public dynamic dna_lock = null;
		public ByTable proc_res = new ByTable();
		public EffectSystem_SparkSpread spark_system = new EffectSystem_SparkSpread();
		public bool lights = false;
		public double lights_power = 6;
		public bool last_user_hud = true;
		public bool use_internal_tank = false;
		public dynamic internal_tank_valve = 101.32499694824219;
		public Obj_Machinery_PortableAtmospherics_Canister_Air internal_tank = null;
		public GasMixture cabin_air = null;
		public Obj_Machinery_Atmospherics_Components_Unary_PortablesConnector connected_port = null;
		public Obj_Item_Device_Radio radio = null;
		public double max_temperature = 25000;
		public double internal_damage_threshold = 50;
		public int internal_damage = 0;
		public ByTable operation_req_access = new ByTable();
		public ByTable internals_req_access = new ByTable(new object [] { 10, 29 });
		public Type wreckage = null;
		public ByTable equipment = new ByTable();
		public dynamic selected = null;
		public int max_equip = 3;
		public Events events = null;
		public string stepsound = "sound/mecha/mechstep.ogg";
		public string turnsound = "sound/mecha/mechturn.ogg";
		public int melee_cooldown = 10;
		public bool melee_can_hit = true;
		public Action_Innate_Mecha_MechEject eject_action = new Action_Innate_Mecha_MechEject();
		public Action_Innate_Mecha_MechToggleInternals internals_action = new Action_Innate_Mecha_MechToggleInternals();
		public Action_Innate_Mecha_MechCycleEquip cycle_action = new Action_Innate_Mecha_MechCycleEquip();
		public Action_Innate_Mecha_MechToggleLights lights_action = new Action_Innate_Mecha_MechToggleLights();
		public Action_Innate_Mecha_MechViewStats stats_action = new Action_Innate_Mecha_MechViewStats();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.infra_luminosity = 15;
			this.anchored = 1;
			this.unacidable = true;
			this.force = 5;
			this.flags = 16;
			this.hud_possible = new ByTable(new object [] { "8", "10", "11" });
			this.icon = "icons/mecha/mecha.dmi";
			this.layer = 3.8;
		}

		// Function from file: mecha.dm
		public Obj_Mecha ( dynamic loc = null ) : base( (object)(loc) ) {
			AtomHud diag_hud = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.events = new Events();
			this.icon_state += "-open";
			this.add_radio();
			this.add_cabin();
			this.add_airtank();
			this.spark_system.set_up( 2, 0, this );
			this.spark_system.attach( this );
			this.add_cell();
			GlobalVars.SSobj.processing.Or( this );
			GlobalVars.poi_list.Or( this );
			this.log_message( "" + this.name + " created." );
			GlobalVars.mechas_list.Add( this );
			this.prepare_huds();
			diag_hud = GlobalVars.huds[5];
			diag_hud.add_to_hud( this );
			this.diag_hud_set_mechhealth();
			this.diag_hud_set_mechcell();
			this.diag_hud_set_mechstat();
			return;
		}

		// Function from file: disposal-unit.dm
		public override bool disposalEnterTry(  ) {
			return false;
		}

		// Function from file: ninjaDrainAct.dm
		public override dynamic ninjadrain_act( Obj_Item_Clothing_Suit_Space_SpaceNinja S = null, Ent_Static H = null, Obj_Item_Clothing_Gloves_SpaceNinja G = null ) {
			dynamic _default = null;

			bool maxcapacity = false;
			double drain = 0;

			
			if ( !( S != null ) || !( H != null ) || !( G != null ) ) {
				return "INVALID";
			}
			maxcapacity = false;
			drain = 0;
			_default = 0;
			this.occupant_message( "<span class='danger'>Warning: Unauthorized access through sub-route 4, block H, detected.</span>" );

			if ( this.get_charge() != 0 ) {
				
				while (G.candrain && Convert.ToDouble( this.cell.charge ) > 0 && !maxcapacity) {
					drain = Rand13.Int( G.mindrain, G.maxdrain );

					if ( Convert.ToDouble( this.cell.charge ) < drain ) {
						drain = Convert.ToDouble( this.cell.charge );
					}

					if ( Convert.ToDouble( S.cell.charge + drain ) > ( S.cell.maxcharge ??0) ) {
						drain = ( S.cell.maxcharge ??0) - Convert.ToDouble( S.cell.charge );
						maxcapacity = true;
					}

					if ( GlobalFuncs.do_after( H, 10, null, this ) ) {
						this.spark_system.start();
						GlobalFuncs.playsound( this.loc, "sparks", 50, 1 );
						this.cell.use( drain );
						S.cell.charge += drain;
						_default += drain;
					} else {
						break;
					}
				}
			}
			return _default;
		}

		// Function from file: mecha_topic.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			TopicInput filter = null;
			dynamic user = null;
			dynamic user2 = null;
			dynamic new_pressure = null;
			bool user3 = false;
			bool equip = false;
			double? new_frequency = null;
			string newname = null;
			Ent_Static T = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Lang13.Bool( href_list["close"] ) ) {
				return null;
			}

			if ( Task13.User.incapacitated() ) {
				return null;
			}
			filter = new TopicInput( href, href_list );

			if ( Map13.GetDistance( this, Task13.User ) <= 1 ) {
				
				if ( Lang13.Bool( href_list["req_access"] ) && this.add_req_access ) {
					this.output_access_dialog( filter.getObj( "id_card" ), filter.getMob( "user" ) );
				}

				if ( Lang13.Bool( href_list["maint_access"] ) && this.maint_access ) {
					user = filter.getMob( "user" );

					if ( Lang13.Bool( user ) ) {
						
						if ( this.state == 0 ) {
							this.state = 1;
							user.WriteMsg( "The securing bolts are now exposed." );
						} else if ( this.state == 1 ) {
							this.state = 0;
							user.WriteMsg( "The securing bolts are now hidden." );
						}
						this.output_maintenance_dialog( filter.getObj( "id_card" ), user );
					}
				}

				if ( Lang13.Bool( href_list["set_internal_tank_valve"] ) && this.state >= 1 ) {
					user2 = filter.getMob( "user" );

					if ( Lang13.Bool( user2 ) ) {
						new_pressure = Interface13.Input( user2, "Input new output pressure", "Pressure setting", this.internal_tank_valve, null, InputType.Num );

						if ( Lang13.Bool( new_pressure ) ) {
							this.internal_tank_valve = new_pressure;
							user2.WriteMsg( "The internal pressure valve has been set to " + this.internal_tank_valve + "kPa." );
						}
					}
				}

				if ( Lang13.Bool( href_list["add_req_access"] ) && this.add_req_access && filter.getObj( "id_card" ) ) {
					this.operation_req_access.Add( filter.getNum( "add_req_access" ) );
					this.output_access_dialog( filter.getObj( "id_card" ), filter.getMob( "user" ) );
				}

				if ( Lang13.Bool( href_list["del_req_access"] ) && this.add_req_access && filter.getObj( "id_card" ) ) {
					this.operation_req_access.Remove( filter.getNum( "del_req_access" ) );
					this.output_access_dialog( filter.getObj( "id_card" ), filter.getMob( "user" ) );
				}

				if ( Lang13.Bool( href_list["finish_req_access"] ) ) {
					this.add_req_access = false;
					user3 = filter.getMob( "user" );
					Interface13.Browse( user3, null, "window=exosuit_add_access" );
				}
			}

			if ( Task13.User != this.occupant ) {
				return null;
			}

			if ( Lang13.Bool( href_list["update_content"] ) ) {
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "content", this.get_stats_part() );
			}

			if ( Lang13.Bool( href_list["select_equip"] ) ) {
				equip = filter.getObj( "select_equip" );

				if ( equip ) {
					this.selected = equip;
					this.occupant_message( "You switch to " + equip );
					this.visible_message( "" + this + " raises " + equip );
					GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "eq_list", this.get_equipment_list() );
				}
			}

			if ( Lang13.Bool( href_list["rmictoggle"] ) ) {
				this.radio.broadcasting = !Lang13.Bool( this.radio.broadcasting ) ?1:0;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "rmicstate", ( Lang13.Bool( this.radio.broadcasting ) ? "Engaged" : "Disengaged" ) );
			}

			if ( Lang13.Bool( href_list["rspktoggle"] ) ) {
				this.radio.listening = !Lang13.Bool( this.radio.listening ) ?1:0;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "rspkstate", ( Lang13.Bool( this.radio.listening ) ? "Engaged" : "Disengaged" ) );
			}

			if ( Lang13.Bool( href_list["rfreq"] ) ) {
				new_frequency = ( this.radio.frequency ??0) + Convert.ToDouble( filter.getNum( "rfreq" ) );

				if ( !this.radio.freerange || ( this.radio.frequency ??0) < 1200 || ( this.radio.frequency ??0) > 1600 ) {
					new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
				}
				this.radio.set_frequency( new_frequency );
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "rfreq", "" + GlobalFuncs.format_frequency( this.radio.frequency ) );
			}

			if ( Lang13.Bool( href_list["view_log"] ) ) {
				Interface13.Browse( this.occupant, this.get_log_html(), "window=exosuit_log" );
				GlobalFuncs.onclose( this.occupant, "exosuit_log" );
			}

			if ( Lang13.Bool( href_list["change_name"] ) ) {
				newname = GlobalFuncs.stripped_input( this.occupant, "Choose new exosuit name", "Rename exosuit", "", 26 );

				if ( Lang13.Bool( newname ) && Lang13.Bool( GlobalFuncs.trim( newname ) ) ) {
					this.name = newname;
				} else {
					Interface13.Alert( this.occupant, "nope.avi" );
				}
			}

			if ( Lang13.Bool( href_list["toggle_id_upload"] ) ) {
				this.add_req_access = !this.add_req_access;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "t_id_upload", "" + ( this.add_req_access ? "L" : "Unl" ) + "ock ID upload panel" );
			}

			if ( Lang13.Bool( href_list["toggle_maint_access"] ) ) {
				
				if ( this.state != 0 ) {
					this.occupant_message( "<span class='danger'>Maintenance protocols in effect</span>" );
					return null;
				}
				this.maint_access = !this.maint_access;
				GlobalFuncs.send_byjax( this.occupant, "exosuit.browser", "t_maint_access", "" + ( this.maint_access ? "Forbid" : "Permit" ) + " maintenance protocols" );
			}

			if ( Lang13.Bool( href_list["dna_lock"] ) ) {
				
				if ( Lang13.Bool( this.occupant ) && !( this.occupant is Mob_Living_Carbon ) ) {
					this.occupant.WriteMsg( "<span class='danger'> You do not have any DNA!</span>" );
					return null;
				}
				this.dna_lock = this.occupant.dna.unique_enzymes;
				this.occupant_message( "You feel a prick as the needle takes your DNA sample." );
			}

			if ( Lang13.Bool( href_list["reset_dna"] ) ) {
				this.dna_lock = null;
			}

			if ( Lang13.Bool( href_list["repair_int_control_lost"] ) ) {
				this.occupant_message( "Recalibrating coordination system..." );
				this.log_message( "Recalibration of coordination system started." );
				T = this.loc;
				Task13.Schedule( 100, (Task13.Closure)(() => {
					
					if ( T == this.loc ) {
						this.clearInternalDamage( 16 );
						this.occupant_message( "<span class='notice'>Recalibration successful.</span>" );
						this.log_message( "Recalibration of coordination system finished with 0 errors." );
					} else {
						this.occupant_message( "<span class='warning'>Recalibration failed!</span>" );
						this.log_message( "Recalibration of coordination system failed with 1 error.", true );
					}
					return;
				}));
			}
			return null;
		}

		// Function from file: tgstation.dme
		public override bool mech_melee_attack( Obj_Mecha M = null ) {
			
			if ( M.damtype == "brute" ) {
				GlobalFuncs.playsound( this, "sound/weapons/punch4.ogg", 50, 1 );
			} else if ( M.damtype == "fire" ) {
				GlobalFuncs.playsound( this, "sound/items/welder.ogg", 50, 1 );
			} else {
				return false;
			}
			this.visible_message( "<span class='danger'>" + M.name + " has hit " + this + ".</span>" );
			this.take_damage( M.force, this.damtype );
			GlobalFuncs.add_logs( M.occupant, this, "attacked", M, "(INTENT: " + String13.ToUpper( M.occupant.a_intent ) + ") (DAMTYPE: " + String13.ToUpper( M.damtype ) + ")" );
			return false;
		}

		// Function from file: mecha_defense.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic E = null;
			dynamic id_card = null;
			dynamic pda = null;
			dynamic CC = null;
			dynamic C = null;
			dynamic WT = null;
			dynamic deflection = null;
			double dam_coeff = 0;
			Obj_Item_MechaParts_MechaEquipment_AnticcwArmorBooster B = null;

			
			if ( A is Obj_Item_Device_Mmi ) {
				
				if ( this.mmi_move_inside( A, user ) ) {
					user.WriteMsg( "" + this + "-" + A + " interface initialized successfuly" );
				} else {
					user.WriteMsg( "" + this + "-" + A + " interface initialization failed." );
				}
				return null;
			}

			if ( A is Obj_Item_MechaParts_MechaEquipment ) {
				E = A;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( ((Obj_Item_MechaParts_MechaEquipment)E).can_attach( this ) ) {
						
						if ( !Lang13.Bool( user.drop_item() ) ) {
							return;
						}
						E.attach( this );
						((Ent_Static)user).visible_message( "" + user + " attaches " + A + " to " + this + ".", "<span class='notice'>You attach " + A + " to " + this + ".</span>" );
					} else {
						user.WriteMsg( "<span class='warning'>You were unable to attach " + A + " to " + this + "!</span>" );
					}
					return;
				}));
				return null;
			}

			if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
				
				if ( this.add_req_access || this.maint_access ) {
					
					if ( this.internals_access_allowed( user ) ) {
						
						if ( A is Obj_Item_Weapon_Card_Id ) {
							id_card = A;
						} else {
							pda = A;
							id_card = pda.id;
						}
						this.output_maintenance_dialog( id_card, user );
						return null;
					} else {
						user.WriteMsg( "<span class='warning'>Invalid ID: Access denied.</span>" );
					}
				} else {
					user.WriteMsg( "<span class='warning'>Maintenance protocols disabled by operator.</span>" );
				}
			} else if ( A is Obj_Item_Weapon_Wrench ) {
				
				if ( this.state == 1 ) {
					this.state = 2;
					user.WriteMsg( "<span class='notice'>You undo the securing bolts.</span>" );
				} else if ( this.state == 2 ) {
					this.state = 1;
					user.WriteMsg( "<span class='notice'>You tighten the securing bolts.</span>" );
				}
				return null;
			} else if ( A is Obj_Item_Weapon_Crowbar ) {
				
				if ( this.state == 2 ) {
					this.state = 3;
					user.WriteMsg( "<span class='notice'>You open the hatch to the power unit.</span>" );
				} else if ( this.state == 3 ) {
					this.state = 2;
					user.WriteMsg( "<span class='notice'>You close the hatch to the power unit.</span>" );
				}
				return null;
			} else if ( A is Obj_Item_Stack_CableCoil ) {
				
				if ( this.state == 3 && ( this.internal_damage & 4 ) != 0 ) {
					CC = A;

					if ( Lang13.Bool( CC.use( 2 ) ) ) {
						this.clearInternalDamage( 4 );
						user.WriteMsg( "<span class='notice'>You replace the fused wires.</span>" );
					} else {
						user.WriteMsg( "<span class='warning'>You need two lengths of cable to fix this mech!</span>" );
					}
				}
				return null;
			} else if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( ( this.internal_damage & 2 ) != 0 ) {
					this.clearInternalDamage( 2 );
					user.WriteMsg( "<span class='notice'>You repair the damaged temperature controller.</span>" );
				} else if ( this.state == 3 && Lang13.Bool( this.cell ) ) {
					((Ent_Dynamic)this.cell).forceMove( this.loc );
					this.cell = null;
					this.state = 4;
					user.WriteMsg( "<span class='notice'>You unscrew and pry out the powercell.</span>" );
					this.log_message( "Powercell removed" );
				} else if ( this.state == 4 && Lang13.Bool( this.cell ) ) {
					this.state = 3;
					user.WriteMsg( "<span class='notice'>You screw the cell in place.</span>" );
				}
				return null;
			} else if ( A is Obj_Item_Weapon_StockParts_Cell ) {
				
				if ( this.state == 4 ) {
					
					if ( !Lang13.Bool( this.cell ) ) {
						
						if ( !Lang13.Bool( user.drop_item() ) ) {
							return null;
						}
						C = A;
						user.WriteMsg( "<span class='notice'>You install the powercell.</span>" );
						((Ent_Dynamic)C).forceMove( this );
						C.use( C.charge * 0.8 );
						this.cell = C;
						this.log_message( "Powercell installed" );
					} else {
						user.WriteMsg( "<span class='notice'>There's already a powercell installed.</span>" );
					}
				}
				return null;
			} else if ( A is Obj_Item_Weapon_Weldingtool && user.a_intent != "harm" ) {
				((Mob)user).changeNext_move( 8 );
				WT = A;

				if ( this.health < Convert.ToDouble( Lang13.Initial( this, "health" ) ) ) {
					
					if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
						
						if ( ( this.internal_damage & 8 ) != 0 ) {
							this.clearInternalDamage( 8 );
							user.WriteMsg( "<span class='notice'>You repair the damaged gas tank.</span>" );
						} else {
							((Ent_Static)user).visible_message( "<span class='notice'>" + user + " repairs some damage to " + this.name + ".</span>" );
							this.health += Num13.MinInt( 10, Convert.ToInt32( Lang13.Initial( this, "health" ) - this.health ) );
						}
					} else {
						user.WriteMsg( "<span class='warning'>The welder must be on for this task!</span>" );
						return 1;
					}
				} else {
					user.WriteMsg( "<span class='warning'>The " + this.name + " is at full integrity!</span>" );
				}
				return 1;
			} else if ( A is Obj_Item_MechaParts_MechaTracking ) {
				
				if ( !((Mob)user).unEquip( A ) ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).the( A ).item().str( " is stuck to your hand, you cannot put it in " ).the( this ).item().str( "!</span>" ).ToString() );
					return null;
				}
				((Ent_Dynamic)A).forceMove( this );
				((Ent_Static)user).visible_message( "" + user + " attaches " + A + " to " + this + ".", "<span class='notice'>You attach " + A + " to " + this + ".</span>" );
				return null;
			} else if ( !Lang13.Bool( A.flags & 4 ) ) {
				((Mob)user).changeNext_move( 8 );
				((Ent_Dynamic)user).do_attack_animation( this );
				this.log_message( "Attacked by " + A + ". Attacker - " + user );
				deflection = this.deflect_chance;
				dam_coeff = 1;

				foreach (dynamic _a in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment_AnticcwArmorBooster) )) {
					B = _a;
					

					if ( B.attack_react( user ) ) {
						deflection *= B.deflect_coeff;
						dam_coeff *= B.damage_coeff;
						break;
					}
				}

				if ( Rand13.PercentChance( Convert.ToInt32( deflection ) ) ) {
					user.WriteMsg( "<span class='danger'>The " + A + " bounces off " + this.name + " armor.</span>" );
					this.log_append_to_last( "Armor saved." );
					return 0;
				} else {
					((Ent_Static)user).visible_message( "<span class='danger'>" + user + " hits " + this + " with " + A + ".</span>", "<span class='danger'>You hit " + this + " with " + A + ".</span>" );
					this.take_damage( Num13.Floor( Convert.ToDouble( A.force * dam_coeff ) ), A.damtype );
					this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
					return 1;
				}
			}
			return null;
		}

		// Function from file: mecha_defense.dm
		public override dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			
			if ( Convert.ToDouble( exposed_temperature ) > this.max_temperature ) {
				this.log_message( "Exposed to dangerous temperature.", true );
				this.take_damage( 5, "fire" );
				this.check_for_internal_damage( new ByTable(new object [] { 1, 2 }) );
			}
			return null;
		}

		// Function from file: mecha_defense.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( this.get_charge() != 0 ) {
				this.use_power( this.cell.charge / 2 / severity );
				this.take_damage( 50 / severity, "energy" );
			}
			this.log_message( "EMP detected", true );
			this.check_for_internal_damage( new ByTable(new object [] { 1, 2, 16, 4 }), true );
			return 0;
		}

		// Function from file: mecha_defense.dm
		public override bool blob_act( dynamic severity = null ) {
			this.take_damage( 30, "brute" );
			return false;
		}

		// Function from file: mecha_defense.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			this.log_message( "Affected by explosion of severity: " + severity + ".", true );

			if ( Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				severity++;
				this.log_append_to_last( "Armor saved, changing severity to " + severity + "." );
			}

			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 30 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						this.take_damage( Lang13.Initial( this, "health" ) / 2 );
						this.check_for_internal_damage( new ByTable(new object [] { 1, 2, 8, 16, 4 }), true );
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 5 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						this.take_damage( Lang13.Initial( this, "health" ) / 5 );
						this.check_for_internal_damage( new ByTable(new object [] { 1, 2, 8, 16, 4 }), true );
					}
					break;
			}
			return false;
		}

		// Function from file: mecha_defense.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			dynamic deflection = null;
			double dam_coeff = 0;
			Obj_Item_MechaParts_MechaEquipment_AntiprojArmorBooster B = null;
			bool? ignore_threshold = null;

			this.log_message( "Hit by projectile. Type: " + P.name + "(" + P.flag + ").", true );
			deflection = this.deflect_chance;
			dam_coeff = 1;

			foreach (dynamic _a in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment_AntiprojArmorBooster) )) {
				B = _a;
				

				if ( B.projectile_react() ) {
					deflection *= B.deflect_coeff;
					dam_coeff *= B.damage_coeff;
					break;
				}
			}

			if ( Rand13.PercentChance( Convert.ToInt32( deflection ) ) ) {
				this.visible_message( "The " + this.name + " armor deflects the projectile" );
				this.log_append_to_last( "Armor saved." );
				return null;
			}
			ignore_threshold = null;

			if ( P.flag == "taser" ) {
				this.use_power( 200 );
				return null;
			}

			if ( P is Obj_Item_Projectile_Beam_Pulse ) {
				ignore_threshold = true;
			}

			if ( P.damage_type == "brute" || P.damage_type == "fire" ) {
				this.take_damage( P.damage * dam_coeff, P.flag );
				this.visible_message( "<span class='danger'>" + this.name + " is hit by " + P + ".</span>" );
				this.check_for_internal_damage( new ByTable(new object [] { 1, 2, 8, 16, 4 }), ignore_threshold );
			}
			P.on_hit( this );
			return null;
		}

		// Function from file: mecha_defense.dm
		public override bool hitby( Ent_Dynamic AM = null, bool? skipcatch = null, bool? hitpush = null, bool? blocked = null ) {
			dynamic deflection = null;
			double dam_coeff = 0;
			bool counter_tracking = false;
			Obj_Item_MechaParts_MechaEquipment_AntiprojArmorBooster B = null;
			Ent_Dynamic M = null;
			Ent_Dynamic O = null;

			this.log_message( "Hit by " + AM + ".", true );
			deflection = this.deflect_chance;
			dam_coeff = 1;
			counter_tracking = false;

			foreach (dynamic _a in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment_AntiprojArmorBooster) )) {
				B = _a;
				

				if ( B.projectile_react() ) {
					deflection *= B.deflect_coeff;
					dam_coeff *= B.damage_coeff;
					counter_tracking = true;
					break;
				}
			}

			if ( AM is Obj_Item_MechaParts_MechaTracking ) {
				
				if ( !counter_tracking ) {
					AM.forceMove( this );
					this.visible_message( "The " + AM + " fastens firmly to " + this + "." );
					return false;
				} else {
					deflection = 100;
				}
			}

			if ( Rand13.PercentChance( Convert.ToInt32( deflection ) ) || AM is Mob ) {
				this.visible_message( "" + AM + " bounces off the " + this.name + " armor" );
				this.log_append_to_last( "Armor saved." );

				if ( AM is Mob_Living ) {
					M = AM;
					((dynamic)M).take_organ_damage( 10 );
				}
			} else if ( AM is Obj ) {
				O = AM;

				if ( Lang13.Bool( ((dynamic)O).throwforce ) ) {
					this.visible_message( "<span class='danger'>" + this.name + " is hit by " + AM + ".</span>" );
					this.take_damage( ((dynamic)O).throwforce * dam_coeff );
					this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
				}
			}
			return false;
		}

		// Function from file: mecha_defense.dm
		public override void attack_tk( Mob_Living_Carbon_Human user = null ) {
			return;
		}

		// Function from file: mecha_defense.dm
		public override bool attack_animal( Mob_Living user = null ) {
			int damage = 0;

			this.log_message( "Attack by simple animal. Attacker - " + user + ".", true );
			user.changeNext_move( 8 );

			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				user.emote( "" + ((dynamic)user).friendly + " " + this );
			} else {
				user.do_attack_animation( this );

				if ( !Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
					damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );
					this.take_damage( damage );
					this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
					this.visible_message( "<span class='danger'>" + user + " " + ((dynamic)user).attacktext + " " + this + "!</span>" );
					GlobalFuncs.add_logs( user, this, "attacked" );
				} else {
					this.log_append_to_last( "Armor saved." );
					GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 50, 1, -1 );
					this.visible_message( "<span class='notice'>The " + user + " rebounds off " + this.name + "'s armor!</span>" );
					GlobalFuncs.add_logs( user, this, "attacked" );
				}
			}
			return false;
		}

		// Function from file: mecha_defense.dm
		public override bool attack_alien( dynamic user = null ) {
			this.log_message( "Attack by alien. Attacker - " + user + ".", true );
			((Mob)user).changeNext_move( 8 );
			((Ent_Dynamic)user).do_attack_animation( this );

			if ( !Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				this.take_damage( 15 );
				this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
				GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 50, 1, -1 );
				this.visible_message( "<span class='danger'>The " + user + " slashes at " + this.name + "'s armor!</span>" );
			} else {
				this.log_append_to_last( "Armor saved." );
				GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 50, 1, -1 );
				user.WriteMsg( "ÿ Your claws had no effect!" );
				this.visible_message( "<span class='notice'>The " + user + " rebounds off " + this.name + "'s armor!</span>" );
			}
			return false;
		}

		// Function from file: mecha_defense.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: mecha_defense.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			((Mob)a).changeNext_move( 8 );
			((Ent_Dynamic)a).do_attack_animation( this );
			this.log_message( "Attack by hand/paw. Attacker - " + a + ".", true );
			((Ent_Static)a).visible_message( "<span class='danger'>" + a + " hits " + this.name + ". Nothing happens</span>", "<span class='danger'>You hit " + this.name + " with no visible effect.</span>" );
			this.log_append_to_last( "Armor saved." );
			return null;
		}

		// Function from file: mecha_defense.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			
			if ( !Rand13.PercentChance( Convert.ToInt32( this.deflect_chance ) ) ) {
				base.attack_hulk( hulk, true );
				this.take_damage( 15 );
				this.check_for_internal_damage( new ByTable(new object [] { 2, 8, 16 }) );
				hulk.visible_message( "<span class='danger'>" + hulk + " hits " + this.name + ", doing some damage.</span>", "<span class='danger'>You hit " + this.name + " with all your might. The metal creaks and bends.</span>" );
				this.occupant_message( "<span class='userdanger'>" + hulk + " hits " + this.name + ", doing some damage.</span>" );
				return true;
			}
			return false;
		}

		// Function from file: mecha.dm
		public override bool allow_drop(  ) {
			return false;
		}

		// Function from file: mecha.dm
		public override void Exited( Ent_Dynamic Obj = null, Ent_Static newloc = null ) {
			
			if ( Lang13.Bool( this.occupant ) && this.occupant == Obj ) {
				this.go_out( true, newloc );
			}
			return;
		}

		// Function from file: mecha.dm
		public override void container_resist(  ) {
			this.go_out();
			return;
		}

		// Function from file: mecha.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			bool passed = false;
			dynamic C = null;

			
			if ( !((Mob)user).canUseTopic( this ) || user != O ) {
				return false;
			}

			if ( !( user is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			this.log_message( "" + user + " tries to move in." );

			if ( Lang13.Bool( this.occupant ) ) {
				Task13.User.WriteMsg( "<span class='warning'>The " + this.name + " is already occupied!</span>" );
				this.log_append_to_last( "Permission denied." );
				return false;
			}

			if ( Lang13.Bool( this.dna_lock ) ) {
				
				if ( Lang13.Bool( user.has_dna() ) ) {
					C = user;

					if ( C.dna.unique_enzymes == this.dna_lock ) {
						passed = true;
					}
				}
			} else if ( this.operation_allowed( user ) ) {
				passed = true;
			}

			if ( !passed ) {
				user.WriteMsg( "<span class='warning'>Access denied.</span>" );
				this.log_append_to_last( "Permission denied." );
				return false;
			}

			if ( user.buckled != null ) {
				user.WriteMsg( "<span class='warning'>You are currently buckled and cannot move.</span>" );
				this.log_append_to_last( "Permission denied." );
				return false;
			}

			if ( Lang13.Bool( user.buckled_mob ) ) {
				user.WriteMsg( "<span class='warning'>You can't enter the exosuit with " + user.buckled_mob + " attached to you!</span>" );
				return false;
			}
			this.visible_message( "" + user + " starts to climb into " + this.name + "." );

			if ( GlobalFuncs.do_after( user, 40, null, this ) ) {
				
				if ( this.health <= 0 ) {
					user.WriteMsg( "<span class='warning'>You cannot get in the " + this.name + ", it has been destroyed!</span>" );
				} else if ( Lang13.Bool( this.occupant ) ) {
					user.WriteMsg( "<span class='danger'>" + this.occupant + " was faster! Try better next time, loser.</span>" );
				} else if ( user.buckled != null ) {
					user.WriteMsg( "<span class='warning'>You can't enter the exosuit while buckled.</span>" );
				} else if ( Lang13.Bool( user.buckled_mob ) ) {
					user.WriteMsg( "<span class='warning'>You can't enter the exosuit with " + user.buckled_mob + " attached to you.</span>" );
				} else {
					this.moved_inside( user );
				}
			} else {
				user.WriteMsg( "<span class='warning'>You stop entering the exosuit!</span>" );
			}
			return false;
		}

		// Function from file: mecha.dm
		public override GasMixture portableConnectorReturnAir(  ) {
			return this.internal_tank.return_air();
		}

		// Function from file: mecha.dm
		public override GasMixture return_air(  ) {
			
			if ( this.use_internal_tank ) {
				return this.cabin_air;
			}
			return base.return_air();
		}

		// Function from file: mecha.dm
		public override dynamic remove_air( dynamic amount = null ) {
			
			if ( this.use_internal_tank ) {
				return this.cabin_air.remove( amount );
			}
			return base.remove_air( (object)(amount) );
		}

		// Function from file: mecha.dm
		public override bool transfer_ai( dynamic interaction = null, dynamic user = null, dynamic AI = null, dynamic card = null ) {
			
			if ( !base.transfer_ai( (object)(interaction), (object)(user), (object)(AI), (object)(card) ) ) {
				return false;
			}

			dynamic _a = interaction; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				
				if ( !( this.state != 0 ) ) {
					user.WriteMsg( "<span class='warning'>" + this.name + " must have maintenance protocols active in order to allow a transfer.</span>" );
					return false;
				}
				AI = this.occupant;

				if ( !Lang13.Bool( AI ) || !( this.occupant is Mob_Living_Silicon_Ai ) ) {
					user.WriteMsg( "<span class='warning'>No AI detected in the " + this.name + " onboard computer.</span>" );
					return false;
				}

				if ( Lang13.Bool( AI.mind.special_role ) ) {
					user.WriteMsg( "<span class='boldannounce'>ACCESS DENIED.</span>" );
					return false;
				}
				AI.aiRestorePowerRoutine = 0;
				AI.control_disabled = true;
				AI.radio_enabled = false;
				AI.loc = card;
				this.occupant = null;
				AI.controlled_mech = null;
				AI.remote_control = null;
				this.icon_state = Lang13.Initial( this, "icon_state" ) + "-open";
				AI.WriteMsg( "You have been downloaded to a mobile storage device. Wireless connection offline." );
				user.WriteMsg( "<span class='boldnotice'>Transfer successful</span>: " + AI.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) removed from " + this.name + " and stored within local memory." );
			} else if ( _a==3 ) {
				new Obj_Structure_AIcore_Deactivated( AI.loc );

				if ( Lang13.Bool( this.occupant ) ) {
					AI.WriteMsg( "<span class='warning'>Pilot detected! Forced ejection initiated!" );
					this.occupant.WriteMsg( "<span class='danger'>You have been forcibly ejected!</span>" );
					this.go_out( true );
				}
				this.ai_enter_mech( AI, interaction );
			} else if ( _a==2 ) {
				AI = Lang13.FindIn( typeof(Mob_Living_Silicon_Ai), card );

				if ( !Lang13.Bool( AI ) ) {
					user.WriteMsg( "<span class='warning'>There is no AI currently installed on this device.</span>" );
					return false;
				} else if ( Lang13.Bool( AI.stat ) || !Lang13.Bool( AI.client ) ) {
					user.WriteMsg( "<span class='warning'>" + AI.name + " is currently unresponsive, and cannot be uploaded.</span>" );
					return false;
				} else if ( Lang13.Bool( this.occupant ) || Lang13.Bool( this.dna_lock ) ) {
					user.WriteMsg( "<span class='warning'>Access denied. " + this.name + " is " + ( Lang13.Bool( this.occupant ) ? "currently occupied" : "secured with a DNA lock" ) + "." );
					return false;
				}
				AI.control_disabled = false;
				AI.radio_enabled = true;
				user.WriteMsg( "<span class='boldnotice'>Transfer successful</span>: " + AI.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) installed and executed successfully. Local copy has been removed." );
				this.ai_enter_mech( AI, interaction );
			}
			return false;
		}

		// Function from file: mecha.dm
		public override dynamic attack_ai( dynamic user = null ) {
			dynamic B = null;

			
			if ( !( user is Mob_Living_Silicon_Ai ) ) {
				return null;
			}

			if ( user.can_dominate_mechs ) {
				this.examine( user );
				B = Lang13.FindIn( typeof(Obj_Item_MechaParts_MechaTracking), this );

				if ( Lang13.Bool( B ) ) {
					user.WriteMsg( "<span class='danger'>Warning: Tracking Beacon detected. Enter at your own risk. Beacon Data:" );
					user.WriteMsg( "" + ((Obj_Item_MechaParts_MechaTracking)B).get_mecha_info() );
				}
				user.WriteMsg( new Txt( "<a href='?src=" ).Ref( user ).str( ";ai_take_control=" ).Ref( this ).str( "'><span class='userdanger'>ASSUME DIRECT CONTROL?</span></a><br>" ).ToString() );
			}
			return null;
		}

		// Function from file: mecha.dm
		public override dynamic Bump( Ent_Dynamic A = null, dynamic yes = null ) {
			Ent_Dynamic O = null;

			
			if ( Lang13.Bool( yes ) ) {
				
				if ( Lang13.Bool( base.Bump( A ) ) ) {
					return null;
				}

				if ( A is Obj ) {
					O = A;

					if ( !Lang13.Bool( O.anchored ) ) {
						Map13.Step( A, this.dir );
					}
				} else if ( A is Mob ) {
					Map13.Step( A, this.dir );
				}
			}
			return null;
		}

		// Function from file: mecha.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			
			if ( !Lang13.Bool( direction ) ) {
				return false;
			}

			if ( user != this.occupant ) {
				user.forceMove( GlobalFuncs.get_turf( this ) );
				user.WriteMsg( "<span class='notice'>You climb out from " + this + ".</span>" );
				return false;
			}

			if ( this.connected_port != null ) {
				
				if ( Game13.time - this.last_message > 20 ) {
					this.occupant_message( "<span class='warning'>Unable to move while connected to the air system port!</span>" );
					this.last_message = Game13.time;
				}
				return false;
			}

			if ( this.state != 0 ) {
				this.occupant_message( "<span class='danger'>Maintenance protocols in effect.</span>" );
				return false;
			}
			return this.domove( direction );
		}

		// Function from file: mecha.dm
		public override int Process_Spacemove( dynamic movement_dir = null ) {
			movement_dir = movement_dir ?? 0;

			
			if ( Lang13.Bool( this.occupant ) ) {
				return ((Ent_Dynamic)this.occupant).Process_Spacemove( movement_dir );
			}
			return base.Process_Spacemove( (object)(movement_dir) );
		}

		// Function from file: mecha.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( _default ) {
				this.events.fireEvent( "onMove", GlobalFuncs.get_turf( this ) );
			}
			return _default;
		}

		// Function from file: mecha.dm
		public override string Hear( string message = null, dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null, ByTable spans = null ) {
			ByTable speech_bubble_recipients = null;
			dynamic M = null;

			
			if ( speaker == this.occupant ) {
				
				if ( Lang13.Bool( this.radio.broadcasting ) ) {
					this.radio.talk_into( speaker, this.text, null, spans );
				}
				speech_bubble_recipients = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_hearers_in_view( 7, this ) )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) ) {
						speech_bubble_recipients.Add( M.client );
					}
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.flick_overlay( new Image( "icons/mob/talk.dmi", this, "hR" + GlobalFuncs.say_test( raw_message ), 5 ), speech_bubble_recipients, 30 );
					return;
				}));
			}
			return null;
		}

		// Function from file: mecha.dm
		public override int? process( dynamic seconds = null ) {
			bool internal_temp_regulation = false;
			GasMixture int_tank_air = null;
			GasMixture int_tank_air2 = null;
			GasMixture leaked_gas = null;
			dynamic delta = null;
			GasMixture tank_air = null;
			dynamic release_pressure = null;
			double cabin_pressure = 0;
			double pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;
			GasMixture t_air = null;
			GasMixture removed2 = null;
			dynamic cellcharge = null;
			double integrity = 0;
			int lights_energy_drain = 0;

			internal_temp_regulation = true;

			if ( this.internal_damage != 0 ) {
				
				if ( ( this.internal_damage & 1 ) != 0 ) {
					
					if ( !( ( this.internal_damage & 2 ) != 0 ) && Rand13.PercentChance( 5 ) ) {
						this.clearInternalDamage( 1 );
					}

					if ( this.internal_tank != null ) {
						
						if ( this.internal_tank.return_pressure() > this.internal_tank.maximum_pressure && !( ( this.internal_damage & 8 ) != 0 ) ) {
							this.setInternalDamage( 8 );
						}
						int_tank_air = this.internal_tank.return_air();

						if ( int_tank_air != null && int_tank_air.return_volume() > 0 ) {
							int_tank_air.temperature = Num13.MinInt( ((int)( 6273.14990234375 )), Convert.ToInt32( int_tank_air.temperature + Rand13.Int( 10, 15 ) ) );
						}
					}

					if ( this.cabin_air != null && this.cabin_air.return_volume() > 0 ) {
						this.cabin_air.temperature = Num13.MinInt( ((int)( 6273.14990234375 )), Convert.ToInt32( this.cabin_air.return_temperature() + Rand13.Int( 10, 15 ) ) );

						if ( Convert.ToDouble( this.cabin_air.return_temperature() ) > this.max_temperature / 2 ) {
							this.take_damage( 4 / Num13.Round( this.max_temperature / Convert.ToDouble( this.cabin_air.return_temperature() ), 0.1 ), "fire" );
						}
					}
				}

				if ( ( this.internal_damage & 2 ) != 0 ) {
					internal_temp_regulation = false;
				}

				if ( ( this.internal_damage & 8 ) != 0 ) {
					
					if ( this.internal_tank != null ) {
						int_tank_air2 = this.internal_tank.return_air();
						leaked_gas = int_tank_air2.remove_ratio( 0.1 );

						if ( this.loc != null ) {
							this.loc.assume_air( leaked_gas );
							this.air_update_turf();
						} else {
							GlobalFuncs.qdel( leaked_gas );
						}
					}
				}

				if ( ( this.internal_damage & 4 ) != 0 ) {
					
					if ( this.get_charge() != 0 ) {
						this.spark_system.start();
						this.cell.charge -= Num13.MinInt( 20, Convert.ToInt32( this.cell.charge ) );
						this.cell.maxcharge -= Num13.MinInt( 20, ((int)( this.cell.maxcharge ??0 )) );
					}
				}
			}

			if ( internal_temp_regulation ) {
				
				if ( this.cabin_air != null && this.cabin_air.return_volume() > 0 ) {
					delta = this.cabin_air.temperature - 293.41;
					this.cabin_air.temperature -= Num13.MaxInt( -10, Num13.MinInt( 10, ((int)( Num13.Round( Convert.ToDouble( delta / 4 ), 0.1 ) )) ) );
				}
			}

			if ( this.internal_tank != null ) {
				tank_air = this.internal_tank.return_air();
				release_pressure = this.internal_tank_valve;
				cabin_pressure = this.cabin_air.return_pressure();
				pressure_delta = Num13.MinInt( Convert.ToInt32( release_pressure - cabin_pressure ), ((int)( ( tank_air.return_pressure() - cabin_pressure ) / 2 )) );
				transfer_moles = 0;

				if ( pressure_delta > 0 ) {
					
					if ( Convert.ToDouble( tank_air.return_temperature() ) > 0 ) {
						transfer_moles = pressure_delta * this.cabin_air.return_volume() / Convert.ToDouble( this.cabin_air.return_temperature() * 8.31 );
						removed = tank_air.remove( transfer_moles );
						this.cabin_air.merge( removed );
					}
				} else if ( pressure_delta < 0 ) {
					t_air = this.return_air();
					pressure_delta = cabin_pressure - Convert.ToDouble( release_pressure );

					if ( t_air != null ) {
						pressure_delta = Num13.MinInt( ((int)( cabin_pressure - t_air.return_pressure() )), ((int)( pressure_delta )) );
					}

					if ( pressure_delta > 0 ) {
						transfer_moles = pressure_delta * this.cabin_air.return_volume() / Convert.ToDouble( this.cabin_air.return_temperature() * 8.31 );
						removed2 = this.cabin_air.remove( transfer_moles );

						if ( t_air != null ) {
							t_air.merge( removed2 );
						} else {
							GlobalFuncs.qdel( removed2 );
						}
					}
				}
			}

			if ( Lang13.Bool( this.occupant ) ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					cellcharge = this.cell.charge / this.cell.maxcharge;

					dynamic _a = cellcharge; // Was a switch-case, sorry for the mess.
					if ( 0.75<=_a&&_a<=Double.PositiveInfinity ) {
						((Mob)this.occupant).clear_alert( "charge" );
					} else if ( 0.5<=_a&&_a<=0.75 ) {
						((Mob)this.occupant).throw_alert( "charge", typeof(Obj_Screen_Alert_Lowcell), 1 );
					} else if ( 0.25<=_a&&_a<=0.5 ) {
						((Mob)this.occupant).throw_alert( "charge", typeof(Obj_Screen_Alert_Lowcell), 2 );
					} else if ( 0.01<=_a&&_a<=0.25 ) {
						((Mob)this.occupant).throw_alert( "charge", typeof(Obj_Screen_Alert_Lowcell), 3 );
					} else {
						((Mob)this.occupant).throw_alert( "charge", typeof(Obj_Screen_Alert_Emptycell) );
					}
				}
				integrity = this.health / Convert.ToDouble( Lang13.Initial( this, "health" ) ) * 100;

				dynamic _b = integrity; // Was a switch-case, sorry for the mess.
				if ( 30<=_b&&_b<=45 ) {
					((Mob)this.occupant).throw_alert( "mech damage", typeof(Obj_Screen_Alert_LowMechIntegrity), 1 );
				} else if ( 15<=_b&&_b<=35 ) {
					((Mob)this.occupant).throw_alert( "mech damage", typeof(Obj_Screen_Alert_LowMechIntegrity), 2 );
				} else if ( Double.NegativeInfinity<=_b&&_b<=15 ) {
					((Mob)this.occupant).throw_alert( "mech damage", typeof(Obj_Screen_Alert_LowMechIntegrity), 3 );
				} else {
					((Mob)this.occupant).clear_alert( "mech damage" );
				}

				if ( this.occupant.loc != this ) {
					((Mob)this.occupant).clear_alert( "charge" );
					((Mob)this.occupant).clear_alert( "mech damage" );
					this.RemoveActions( this.occupant, true );
					this.occupant = null;
				}
			}

			if ( this.lights ) {
				lights_energy_drain = 2;
				this.use_power( lights_energy_drain );
			}
			this.diag_hud_set_mechhealth();
			this.diag_hud_set_mechcell();
			this.diag_hud_set_mechstat();
			return null;
		}

		// Function from file: mecha.dm
		public override double examine( dynamic user = null ) {
			double integrity = 0;
			Obj_Item_MechaParts_MechaEquipment ME = null;

			base.examine( (object)(user) );
			integrity = this.health / Convert.ToDouble( Lang13.Initial( this, "health" ) ) * 100;

			dynamic _a = integrity; // Was a switch-case, sorry for the mess.
			if ( 85<=_a&&_a<=100 ) {
				user.WriteMsg( "It's fully intact." );
			} else if ( 65<=_a&&_a<=85 ) {
				user.WriteMsg( "It's slightly damaged." );
			} else if ( 45<=_a&&_a<=65 ) {
				user.WriteMsg( "It's badly damaged." );
			} else if ( 25<=_a&&_a<=45 ) {
				user.WriteMsg( "It's heavily damaged." );
			} else {
				user.WriteMsg( "It's falling apart." );
			}

			if ( this.equipment != null && this.equipment.len != 0 ) {
				user.WriteMsg( "It's equipped with:" );

				foreach (dynamic _b in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
					ME = _b;
					
					user.WriteMsg( new Txt().icon( ME ).str( " " ).item( ME ).ToString() );
				}
			}
			return 0;
		}

		// Function from file: mecha.dm
		public override dynamic Destroy(  ) {
			dynamic M = null;
			dynamic WR = null;
			Obj_Item_MechaParts_MechaEquipment E = null;
			Obj_Item_MechaParts_MechaEquipment E2 = null;

			this.go_out();

			foreach (dynamic _a in Lang13.Enumerate( this )) {
				M = _a;
				

				if ( M is Mob_Living_Silicon_Ai ) {
					((Mob)M).gib();
				} else {
					M.Move( this.loc );
				}
			}

			if ( Rand13.PercentChance( 30 ) ) {
				GlobalFuncs.explosion( GlobalFuncs.get_turf( this.loc ), 0, 0, 1, 3 );
			}

			if ( this.wreckage != null ) {
				WR = Lang13.Call( this.wreckage, this.loc );

				foreach (dynamic _b in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
					E = _b;
					

					if ( E.salvageable && Rand13.PercentChance( 30 ) ) {
						WR.crowbar_salvage.Add( E );
						E.detach( WR );
						E.equip_ready = true;
						E.reliability = Num13.Floor( Rand13.Int( ((int)( E.reliability / 3 )), ((int)( E.reliability )) ) );
					} else {
						E.detach( this.loc );
						GlobalFuncs.qdel( E );
					}
				}

				if ( Lang13.Bool( this.cell ) ) {
					WR.crowbar_salvage.Add( this.cell );
					((Ent_Dynamic)this.cell).forceMove( WR );
					this.cell.charge = Rand13.Int( 0, Convert.ToInt32( this.cell.charge ) );
				}

				if ( this.internal_tank != null ) {
					WR.crowbar_salvage.Add( this.internal_tank );
					this.internal_tank.forceMove( WR );
				}
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
					E2 = _c;
					
					E2.detach( this.loc );
					GlobalFuncs.qdel( E2 );
				}

				if ( Lang13.Bool( this.cell ) ) {
					GlobalFuncs.qdel( this.cell );
				}

				if ( this.internal_tank != null ) {
					GlobalFuncs.qdel( this.internal_tank );
				}
			}
			GlobalVars.SSobj.processing.Remove( this );
			GlobalVars.poi_list.Remove( this );
			this.equipment.Cut();
			this.cell = null;
			this.internal_tank = null;

			if ( this.loc != null ) {
				this.loc.assume_air( this.cabin_air );
				this.air_update_turf();
			} else {
				GlobalFuncs.qdel( this.cabin_air );
			}
			this.cabin_air = null;
			GlobalFuncs.qdel( this.spark_system );
			this.spark_system = null;
			GlobalVars.mechas_list.Remove( this );
			return base.Destroy();
		}

		// Function from file: mecha_topic.dm
		public void output_maintenance_dialog( dynamic id_card = null, dynamic user = null ) {
			string output = null;

			
			if ( !Lang13.Bool( id_card ) || !Lang13.Bool( user ) ) {
				return;
			}
			output = @"<html>
						<head>
						<style>
						body {color: #00ff00; background: #000000; font-family:""Courier New"", Courier, monospace; font-size: 12px;}
						a {padding:2px 5px; background:#32CD32;color:#000;display:block;margin:2px;text-align:center;text-decoration:none;}
						</style>
						</head>
						<body>
						" + ( this.add_req_access ? new Txt( "<a href='?src=" ).Ref( this ).str( ";req_access=1;id_card=" ).Ref( id_card ).str( ";user=" ).Ref( user ).str( "'>Edit operation keycodes</a>" ).ToString() : null ) + "\n						" + ( this.maint_access ? new Txt( "<a href='?src=" ).Ref( this ).str( ";maint_access=1;id_card=" ).Ref( id_card ).str( ";user=" ).Ref( user ).str( "'>Initiate maintenance protocol</a>" ).ToString() : null ) + "\n						" + ( this.state > 0 ? new Txt( "<a href='?src=" ).Ref( this ).str( ";set_internal_tank_valve=1;user=" ).Ref( user ).str( "'>Set Cabin Air Pressure</a>" ).ToString() : null ) + "\n						</body>\n						</html>";
			Interface13.Browse( user, output, "window=exosuit_maint_console" );
			GlobalFuncs.onclose( user, "exosuit_maint_console" );
			return;
		}

		// Function from file: mecha_topic.dm
		public void output_access_dialog( dynamic id_card = null, bool user = false ) {
			string output = null;
			dynamic a = null;
			dynamic a2 = null;
			string a_name = null;

			
			if ( !Lang13.Bool( id_card ) || !user ) {
				return;
			}
			output = @"<html>
						<head><style>
						h1 {font-size:15px;margin-bottom:4px;}
						body {color: #00ff00; background: #000000; font-family:""Courier New"", Courier, monospace; font-size: 12px;}
						a {color:#0f0;}
						</style>
						</head>
						<body>
						<h1>Following keycodes are present in this system:</h1>";

			foreach (dynamic _a in Lang13.Enumerate( this.operation_req_access )) {
				a = _a;
				
				output += new Txt().item( GlobalFuncs.get_access_desc( a ) ).str( " - <a href='?src=" ).Ref( this ).str( ";del_req_access=" ).item( a ).str( ";user=" ).Ref( user ).str( ";id_card=" ).Ref( id_card ).str( "'>Delete</a><br>" ).ToString();
			}
			output += "<hr><h1>Following keycodes were detected on portable device:</h1>";

			foreach (dynamic _b in Lang13.Enumerate( id_card.access )) {
				a2 = _b;
				

				if ( this.operation_req_access.Contains( a2 ) ) {
					continue;
				}
				a_name = GlobalFuncs.get_access_desc( a2 );

				if ( !Lang13.Bool( a_name ) ) {
					continue;
				}
				output += new Txt().item( a_name ).str( " - <a href='?src=" ).Ref( this ).str( ";add_req_access=" ).item( a2 ).str( ";user=" ).Ref( user ).str( ";id_card=" ).Ref( id_card ).str( "'>Add</a><br>" ).ToString();
			}
			output += new Txt( "<hr><a href='?src=" ).Ref( this ).str( ";finish_req_access=1;user=" ).Ref( user ).str( "'>Finish</a> <span class='danger'>(Warning! The ID upload panel will be locked. It can be unlocked only through Exosuit Interface.)</span>" ).ToString();
			output += "</body></html>";
			Interface13.Browse( user, output, "window=exosuit_add_access" );
			GlobalFuncs.onclose( user, "exosuit_add_access" );
			return;
		}

		// Function from file: mecha_topic.dm
		public string get_log_html(  ) {
			string output = null;
			ByTable entry = null;

			output = "<html><head><title>" + this.name + " Log</title></head><body style='font: 13px 'Courier', monospace;'>";

			foreach (dynamic _a in Lang13.Enumerate( this.log, typeof(ByTable) )) {
				entry = _a;
				
				output += "<div style='font-weight: bold;'>" + entry["time"] + " " + String13.FormatTime( Convert.ToDouble( entry["date"] ), "MMM DD" ) + " " + entry["year"] + "</div>\n						<div style='margin-left:15px; margin-bottom:10px;'>" + entry["message"] + "</div>\n						";
			}
			output += "</body></html>";
			return output;
		}

		// Function from file: mecha_topic.dm
		public virtual string get_equipment_list(  ) {
			string output = null;
			Obj_Item_MechaParts_MechaEquipment MT = null;

			
			if ( !( this.equipment.len != 0 ) ) {
				return null;
			}
			output = "<b>Equipment:</b><div style=\"margin-left: 15px;\">";

			foreach (dynamic _a in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
				MT = _a;
				
				output += new Txt( "<div id='" ).Ref( MT ).str( "'>" ).item( MT.get_equip_info() ).str( "</div>" ).ToString();
			}
			output += "</div>";
			return output;
		}

		// Function from file: mecha_topic.dm
		public dynamic get_equipment_menu(  ) {
			dynamic output = null;
			Obj_Item_MechaParts_MechaEquipment W = null;

			
			if ( this.equipment.len != 0 ) {
				output += "<div class='wr'>\n						<div class='header'>Equipment</div>\n						<div class='links'>";

				foreach (dynamic _a in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment) )) {
					W = _a;
					
					output += new Txt().item( W.name ).str( " <a href='?src=" ).Ref( W ).str( ";detach=1'>Detach</a><br>" ).ToString();
				}
				output += "<b>Available equipment slots:</b> " + ( this.max_equip - this.equipment.len );
				output += "</div></div>";
			}
			return output;
		}

		// Function from file: mecha_topic.dm
		public virtual string get_commands(  ) {
			string output = null;

			output = new Txt( @"<div class='wr'>
						<div class='header'>Electronics</div>
						<div class='links'>
						<b>Radio settings:</b><br>
						Microphone: <a href='?src=" ).Ref( this ).str( ";rmictoggle=1'><span id=\"rmicstate\">" ).item( ( Lang13.Bool( this.radio.broadcasting ) ? "Engaged" : "Disengaged" ) ).str( "</span></a><br>\n						Speaker: <a href='?src=" ).Ref( this ).str( ";rspktoggle=1'><span id=\"rspkstate\">" ).item( ( Lang13.Bool( this.radio.listening ) ? "Engaged" : "Disengaged" ) ).str( "</span></a><br>\n						Frequency:\n						<a href='?src=" ).Ref( this ).str( ";rfreq=-10'>-</a>\n						<a href='?src=" ).Ref( this ).str( ";rfreq=-2'>-</a>\n						<span id=\"rfreq\">" ).item( GlobalFuncs.format_frequency( this.radio.frequency ) ).str( "</span>\n						<a href='?src=" ).Ref( this ).str( ";rfreq=2'>+</a>\n						<a href='?src=" ).Ref( this ).str( @";rfreq=10'>+</a><br>
						</div>
						</div>
						<div class='wr'>
						<div class='header'>Permissions & Logging</div>
						<div class='links'>
						<a href='?src=" ).Ref( this ).str( ";toggle_id_upload=1'><span id='t_id_upload'>" ).item( ( this.add_req_access ? "L" : "Unl" ) ).str( "ock ID upload panel</span></a><br>\n						<a href='?src=" ).Ref( this ).str( ";toggle_maint_access=1'><span id='t_maint_access'>" ).item( ( this.maint_access ? "Forbid" : "Permit" ) ).str( " maintenance protocols</span></a><br>\n						<a href='?src=" ).Ref( this ).str( ";dna_lock=1'>DNA-lock</a><br>\n						<a href='?src=" ).Ref( this ).str( ";view_log=1'>View internal log</a><br>\n						<a href='?src=" ).Ref( this ).str( ";change_name=1'>Change exosuit name</a><br>\n						</div>\n						</div>\n						<div id='equipment_menu'>" ).item( this.get_equipment_menu() ).str( "</div>\n						" ).ToString();
			return output;
		}

		// Function from file: mecha_topic.dm
		public virtual string get_stats_part(  ) {
			double integrity = 0;
			int? cell_charge = null;
			dynamic tank_pressure = null;
			dynamic tank_temperature = null;
			double cabin_pressure = 0;
			string output = null;

			integrity = this.health / Convert.ToDouble( Lang13.Initial( this, "health" ) ) * 100;
			cell_charge = this.get_charge();
			tank_pressure = ( this.internal_tank != null ? ((dynamic)( Num13.Round( this.internal_tank.return_pressure(), 0.01 ) )) : ((dynamic)( "None" )) );
			tank_temperature = ( this.internal_tank != null ? this.internal_tank.return_temperature() : ((dynamic)( "Unknown" )) );
			cabin_pressure = Num13.Round( this.return_pressure(), 0.01 );
			output = "" + this.report_internal_damage() + "\n						" + ( integrity < 30 ? "<span class='userdanger'>DAMAGE LEVEL CRITICAL</span><br>" : null ) + "\n						<b>Integrity: </b> " + integrity + "%<br>\n						<b>Powercell charge: </b>" + ( cell_charge == null ? "No powercell installed" : "" + ((Obj_Item_Weapon_StockParts_Cell)this.cell).percent() + "%" ) + "<br>\n						<b>Air source: </b>" + ( this.use_internal_tank ? "Internal Airtank" : "Environment" ) + "<br>\n						<b>Airtank pressure: </b>" + tank_pressure + "kPa<br>\n						<b>Airtank temperature: </b>" + tank_temperature + "&deg;K|" + ( tank_temperature - 273.41 ) + "&deg;C<br>\n						<b>Cabin pressure: </b>" + ( cabin_pressure > 325 ? ((dynamic)( "<span class='danger'>" + cabin_pressure + "</span>" )) : ((dynamic)( cabin_pressure )) ) + "kPa<br>\n						<b>Cabin temperature: </b> " + this.return_temperature() + "&deg;K|" + ( this.return_temperature() - 273.41 ) + "&deg;C<br>\n						" + ( Lang13.Bool( this.dna_lock ) ? new Txt( "<b>DNA-locked:</b><br> <span style='font-size:10px;letter-spacing:-1px;'>" ).item( this.dna_lock ).str( "</span> [<a href='?src=" ).Ref( this ).str( ";reset_dna=1'>Reset</a>]<br>" ).ToString() : null ) + "\n					";
			return output;
		}

		// Function from file: mecha_topic.dm
		public dynamic report_internal_damage(  ) {
			dynamic output = null;
			ByTable dam_reports = null;
			dynamic tflag = null;
			double? intdamflag = null;

			output = null;
			dam_reports = new ByTable()
				.Set( "" + 1, "<span class='userdanger'>INTERNAL FIRE</span>" )
				.Set( "" + 2, "<span class='userdanger'>LIFE SUPPORT SYSTEM MALFUNCTION</span>" )
				.Set( "" + 8, "<span class='userdanger'>GAS TANK BREACH</span>" )
				.Set( "" + 16, new Txt( "<span class='userdanger'>COORDINATION SYSTEM CALIBRATION FAILURE</span> - <a href='?src=" ).Ref( this ).str( ";repair_int_control_lost=1'>Recalibrate</a>" ).ToString() )
				.Set( "" + 4, "<span class='userdanger'>SHORT CIRCUIT</span>" )
			;

			foreach (dynamic _a in Lang13.Enumerate( dam_reports )) {
				tflag = _a;
				
				intdamflag = String13.ParseNumber( tflag );

				if ( ( this.internal_damage & ((int)( intdamflag ??0 )) ) != 0 ) {
					output += dam_reports[tflag];
					output += "<br />";
				}
			}

			if ( this.return_pressure() > 325 ) {
				output += "<span class='userdanger'>DANGEROUSLY HIGH CABIN PRESSURE</span><br />";
			}
			return output;
		}

		// Function from file: mecha_topic.dm
		public virtual string get_stats_html(  ) {
			string output = null;

			output = new Txt( "<html>\n						<head><title>" ).item( this.name ).str( @" data</title>
						<style>
						body {color: #00ff00; background: #000000; font-family:""Lucida Console"",monospace; font-size: 12px;}
						hr {border: 1px solid #0f0; color: #0f0; background-color: #0f0;}
						a {padding:2px 5px;;color:#0f0;}
						.wr {margin-bottom: 5px;}
						.header {cursor:pointer;}
						.open, .closed {background: #32CD32; color:#000; padding:1px 2px;}
						.links a {margin-bottom: 2px;padding-top:3px;}
						.visible {display: block;}
						.hidden {display: none;}
						</style>
						<script language='javascript' type='text/javascript'>
						" ).item( GlobalVars.js_byjax ).str( "\n						" ).item( GlobalVars.js_dropdowns ).str( "\n						function ticker() {\n						    setInterval(function(){\n						        window.location='byond://?src=" ).Ref( this ).str( @"&update_content=1';
						    }, 1000);
						}

						window.onload = function() {
							dropdowns();
							ticker();
						}
						</script>
						</head>
						<body>
						<div id='content'>
						" ).item( this.get_stats_part() ).str( "\n						</div>\n						<div id='eq_list'>\n						" ).item( this.get_equipment_list() ).str( @"
						</div>
						<hr>
						<div id='commands'>
						" ).item( this.get_commands() ).str( @"
						</div>
						</body>
						</html>
					 " ).ToString();
			return output;
		}

		// Function from file: mecha_defense.dm
		public void mech_toxin_damage( Mob_Living target = null ) {
			GlobalFuncs.playsound( this, "sound/effects/spray2.ogg", 50, 1 );

			if ( target.reagents != null ) {
				
				if ( ( target.reagents.get_reagent_amount( "cryptobiolin" ) ?1:0) + Convert.ToDouble( this.force ) < Convert.ToDouble( this.force * 2 ) ) {
					target.reagents.add_reagent( "cryptobiolin", this.force / 2 );
				}

				if ( ( target.reagents.get_reagent_amount( "toxin" ) ?1:0) + Convert.ToDouble( this.force ) < Convert.ToDouble( this.force * 2 ) ) {
					target.reagents.add_reagent( "toxin", this.force / 2.5 );
				}
			}
			return;
		}

		// Function from file: mecha_defense.dm
		public void update_health(  ) {
			
			if ( this.health > 0 ) {
				this.spark_system.start();
			} else {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: mecha_defense.dm
		public dynamic absorbDamage( dynamic damage = null, dynamic damage_type = null ) {
			bool coeff = false;

			coeff = true;

			if ( Lang13.Bool( this.damage_absorption[damage_type] ) ) {
				coeff = Lang13.Bool( this.damage_absorption[damage_type] );
			}
			return damage * coeff;
		}

		// Function from file: mecha_defense.dm
		public void take_damage( dynamic amount = null, dynamic type = null ) {
			type = type ?? "brute";

			dynamic damage = null;

			
			if ( Lang13.Bool( amount ) ) {
				damage = this.absorbDamage( amount, type );
				this.health -= Convert.ToDouble( damage );
				this.update_health();
				this.occupant_message( "<span class='userdanger'>Taking damage!</span>" );
				this.log_append_to_last( "Took " + damage + " points of damage. Damage type: \"" + type + "\".", true );
			}
			return;
		}

		// Function from file: mecha.dm
		public virtual void RemoveActions( dynamic user = null, bool? human_occupant = null ) {
			human_occupant = human_occupant ?? false;

			
			if ( human_occupant == true ) {
				this.eject_action.Remove( user );
			}
			this.internals_action.Remove( user );
			this.cycle_action.Remove( user );
			this.lights_action.Remove( user );
			this.stats_action.Remove( user );
			return;
		}

		// Function from file: mecha.dm
		public virtual void GrantActions( dynamic user = null, bool? human_occupant = null ) {
			human_occupant = human_occupant ?? false;

			
			if ( human_occupant == true ) {
				this.eject_action.chassis = this;
				this.eject_action.Grant( user );
			}
			this.internals_action.chassis = this;
			this.internals_action.Grant( user );
			this.cycle_action.chassis = this;
			this.cycle_action.Grant( user );
			this.lights_action.chassis = this;
			this.lights_action.Grant( user );
			this.stats_action.chassis = this;
			this.stats_action.Grant( user );
			return;
		}

		// Function from file: mecha.dm
		public bool give_power( int amount = 0 ) {
			
			if ( !( this.get_charge() == 0 ) ) {
				this.cell.give( amount );
				return true;
			}
			return false;
		}

		// Function from file: mecha.dm
		public bool use_power( dynamic amount = null ) {
			
			if ( this.get_charge() != 0 ) {
				this.cell.use( amount );
				return true;
			}
			return false;
		}

		// Function from file: mecha.dm
		public int get_charge(  ) {
			Obj_Item_MechaParts_MechaEquipment_TeslaEnergyRelay R = null;
			int relay_charge = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( this.equipment, typeof(Obj_Item_MechaParts_MechaEquipment_TeslaEnergyRelay) )) {
				R = _a;
				
				relay_charge = R.get_charge();

				if ( relay_charge != 0 ) {
					return relay_charge;
				}
			}

			if ( Lang13.Bool( this.cell ) ) {
				return Num13.MaxInt( 0, Convert.ToInt32( this.cell.charge ) );
			}
			return 0;
		}

		// Function from file: mecha.dm
		public bool has_charge( dynamic amount = null ) {
			return this.get_charge() >= Convert.ToDouble( amount );
		}

		// Function from file: mecha.dm
		public void log_append_to_last( string message = null, bool? red = null ) {
			dynamic last_entry = null;

			last_entry = this.log[this.log.len];
			last_entry["message"] += "<br>" + ( red == true ? "<font color='red'>" : null ) + message + ( red == true ? "</font>" : null );
			return;
		}

		// Function from file: mecha.dm
		public int log_message( string message = null, bool? red = null ) {
			this.log.len++;
			this.log[this.log.len] = new ByTable()
				.Set( "time", "" + GlobalFuncs.worldtime2text() )
				.Set( 2, "date" )
				.Set( "year", "" + ( GlobalVars.year_integer + 540 ) )
				.Set( "message", "" + ( red == true ? "<font color='red'>" : null ) + message + ( red == true ? "</font>" : null ) )
			;
			return this.log.len;
		}

		// Function from file: mecha.dm
		public void occupant_message( string message = null ) {
			
			if ( Lang13.Bool( message ) ) {
				
				if ( Lang13.Bool( this.occupant ) && Lang13.Bool( this.occupant.client ) ) {
					this.occupant.WriteMsg( new Txt().icon( this ).str( " " ).item( message ).ToString() );
				}
			}
			return;
		}

		// Function from file: mecha.dm
		public bool internals_access_allowed( dynamic M = null ) {
			this.req_one_access = this.internals_req_access;
			this.req_access = new ByTable();
			return this.allowed( M );
		}

		// Function from file: mecha.dm
		public bool operation_allowed( dynamic M = null ) {
			this.req_access = this.operation_req_access;
			this.req_one_access = new ByTable();
			return this.allowed( M );
		}

		// Function from file: mecha.dm
		public virtual void go_out( bool? forced = null, Ent_Static newloc = null ) {
			newloc = newloc ?? this.loc;

			dynamic mob_container = null;
			dynamic brain = null;
			dynamic L = null;
			dynamic mmi = null;

			
			if ( !Lang13.Bool( this.occupant ) ) {
				return;
			}
			((Mob)this.occupant).clear_alert( "charge" );
			((Mob)this.occupant).clear_alert( "mech damage" );

			if ( this.occupant is Mob_Living_Carbon_Human ) {
				mob_container = this.occupant;
				this.RemoveActions( this.occupant, true );
			} else if ( this.occupant is Mob_Living_Carbon_Brain ) {
				brain = this.occupant;
				this.RemoveActions( brain );
				mob_container = brain.container;
			} else if ( this.occupant is Mob_Living_Silicon_Ai && forced == true ) {
				this.RemoveActions( this.occupant );
				((Mob)this.occupant).gib();
				this.occupant = null;
				return;
			} else {
				return;
			}
			L = this.occupant;
			this.occupant = null;

			if ( ((Ent_Dynamic)mob_container).forceMove( newloc ) ) {
				this.log_message( "" + mob_container + " moved out." );
				((Mob)L).reset_view();
				Interface13.Browse( L, null, "window=exosuit" );

				if ( mob_container is Obj_Item_Device_Mmi ) {
					mmi = mob_container;

					if ( Lang13.Bool( mmi.brainmob ) ) {
						L.loc = mmi;
					}
					mmi.mecha = null;
					mmi.update_icon();
					L.canmove = 0;
				}
				this.icon_state = Lang13.Initial( this, "icon_state" ) + "-open";
				this.dir = this.dir_in;
			}
			return;
		}

		// Function from file: mecha.dm
		public virtual bool mmi_moved_inside( dynamic mmi_as_oc = null, dynamic user = null ) {
			Mob brainmob = null;

			
			if ( Map13.FetchInRange( null, 1 ).Contains( Lang13.Bool( mmi_as_oc ) && Lang13.Bool( user ) ) ) {
				
				if ( !Lang13.Bool( mmi_as_oc.brainmob ) || !Lang13.Bool( mmi_as_oc.brainmob.client ) ) {
					user.WriteMsg( "<span class='notice'>Consciousness matrix not detected!</span>" );
					return false;
				} else if ( Lang13.Bool( mmi_as_oc.brainmob.stat ) ) {
					user.WriteMsg( "<span class='warning'>Beta-rhythm below acceptable level!</span>" );
					return false;
				}

				if ( !((Mob)user).unEquip( mmi_as_oc ) ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).the( mmi_as_oc ).item().str( " is stuck to your hand, you cannot put it in " ).the( this ).item().str( "!</span>" ).ToString() );
					return false;
				}
				brainmob = mmi_as_oc.brainmob;
				brainmob.reset_view( this );
				this.occupant = brainmob;
				brainmob.loc = this;
				brainmob.canmove = true;
				mmi_as_oc.loc = this;
				mmi_as_oc.mecha = this;
				this.icon_state = Lang13.Initial( this, "icon_state" );
				this.dir = this.dir_in;
				this.log_message( "" + mmi_as_oc + " moved in as pilot." );

				if ( !( this.internal_damage != 0 ) ) {
					this.occupant.WriteMsg( new Sound( "sound/mecha/nominal.ogg", null, null, null, 50 ) );
				}
				this.GrantActions( brainmob );
				return true;
			} else {
				return false;
			}
		}

		// Function from file: mecha.dm
		public bool mmi_move_inside( dynamic mmi_as_oc = null, dynamic user = null ) {
			
			if ( !Lang13.Bool( mmi_as_oc.brainmob ) || !Lang13.Bool( mmi_as_oc.brainmob.client ) ) {
				user.WriteMsg( "<span class='warning'>Consciousness matrix not detected!</span>" );
				return false;
			} else if ( Lang13.Bool( mmi_as_oc.brainmob.stat ) ) {
				user.WriteMsg( "<span class='warning'>Beta-rhythm below acceptable level!</span>" );
				return false;
			} else if ( Lang13.Bool( this.occupant ) ) {
				user.WriteMsg( "<span class='warning'>Occupant detected!</span>" );
				return false;
			} else if ( Lang13.Bool( this.dna_lock ) && ( !Lang13.Bool( mmi_as_oc.brainmob.dna ) || this.dna_lock != mmi_as_oc.brainmob.dna.unique_enzymes ) ) {
				user.WriteMsg( "<span class='warning'>Access denied. " + this.name + " is secured with a DNA lock.</span>" );
				return false;
			}
			this.visible_message( "<span class='notice'>" + user + " starts to insert an MMI into " + this.name + ".</span>" );

			if ( GlobalFuncs.do_after( user, 40, null, this ) ) {
				
				if ( !Lang13.Bool( this.occupant ) ) {
					return this.mmi_moved_inside( mmi_as_oc, user );
				} else {
					user.WriteMsg( "<span class='warning'>Occupant detected!</span>" );
				}
			} else {
				user.WriteMsg( "<span class='notice'>You stop inserting the MMI.</span>" );
			}
			return false;
		}

		// Function from file: mecha.dm
		public virtual bool moved_inside( dynamic H = null ) {
			
			if ( Map13.FetchInRange( null, 1 ).Contains( Lang13.Bool( H ) && Lang13.Bool( H.client ) && Lang13.Bool( H ) ) ) {
				((Mob)H).reset_view( this );
				((Mob)H).stop_pulling();
				((Ent_Dynamic)H).forceMove( this );
				this.occupant = H;
				this.add_fingerprint( H );
				this.GrantActions( H, true );
				this.forceMove( this.loc );
				this.log_append_to_last( "" + H + " moved in as pilot." );
				this.icon_state = Lang13.Initial( this, "icon_state" );
				this.dir = this.dir_in;
				GlobalFuncs.playsound( this, "sound/machines/windowdoor.ogg", 50, 1 );

				if ( !( this.internal_damage != 0 ) ) {
					this.occupant.WriteMsg( new Sound( "sound/mecha/nominal.ogg", null, null, null, 50 ) );
				}
				return true;
			} else {
				return false;
			}
		}

		// Function from file: mecha.dm
		public bool disconnect(  ) {
			
			if ( !( this.connected_port != null ) ) {
				return false;
			}
			this.connected_port.connected_device = null;
			this.connected_port = null;
			this.log_message( "Disconnected from gas port." );
			return true;
		}

		// Function from file: mecha.dm
		public bool connect( Obj_Machinery_Atmospherics_Components_Unary_PortablesConnector new_port = null ) {
			Pipeline connected_port_parent = null;

			
			if ( this.connected_port != null || !( new_port != null ) || new_port.connected_device != null ) {
				return false;
			}

			if ( new_port.loc != this.loc ) {
				return false;
			}
			this.connected_port = new_port;
			this.connected_port.connected_device = this;
			connected_port_parent = this.connected_port.parents[1];
			connected_port_parent.reconcile_air();
			this.log_message( "Connected to gas port." );
			return true;
		}

		// Function from file: mecha.dm
		public dynamic return_temperature(  ) {
			dynamic _default = null;

			GasMixture t_air = null;

			t_air = this.return_air();

			if ( t_air != null ) {
				_default = t_air.return_temperature();
			}
			return _default;
		}

		// Function from file: mecha.dm
		public double return_pressure(  ) {
			double _default = 0;

			GasMixture t_air = null;

			t_air = this.return_air();

			if ( t_air != null ) {
				_default = t_air.return_pressure();
			}
			return _default;
		}

		// Function from file: mecha.dm
		public void ai_enter_mech( dynamic AI = null, dynamic interaction = null ) {
			AI.aiRestorePowerRoutine = 0;
			AI.loc = this;
			this.occupant = AI;
			this.icon_state = Lang13.Initial( this, "icon_state" );
			GlobalFuncs.playsound( this, "sound/machines/windowdoor.ogg", 50, 1 );

			if ( !( this.internal_damage != 0 ) ) {
				this.occupant.WriteMsg( new Sound( "sound/mecha/nominal.ogg", null, null, null, 50 ) );
			}
			AI.__CallVerb("Cancel Camera View" );
			AI.controlled_mech = this;
			AI.remote_control = this;
			AI.canmove = 1;
			AI.can_shunt = false;
			AI.WriteMsg( "" + ( interaction == 3 ? "<span class='announce'>Takeover of " + this.name + " complete! You are now permanently loaded onto the onboard computer. Do not attempt to leave the station sector!</span>" : "<span class='notice'>You have been uploaded to a mech's onboard computer." ) );
			AI.WriteMsg( "<span class='boldnotice'>Use Middle-Mouse to activate mech functions and equipment. Click normally for AI interactions.</span>" );
			this.GrantActions( AI );
			return;
		}

		// Function from file: mecha.dm
		public void clearInternalDamage( dynamic int_dam_flag = null ) {
			
			if ( ( this.internal_damage & Convert.ToInt32( int_dam_flag ) ) != 0 ) {
				
				dynamic _a = int_dam_flag; // Was a switch-case, sorry for the mess.
				if ( _a==2 ) {
					this.occupant_message( "<span class='boldnotice'>Life support system reactivated.</span>" );
				} else if ( _a==1 ) {
					this.occupant_message( "<span class='boldnotice'>Internal fire extinquished.</span>" );
				} else if ( _a==8 ) {
					this.occupant_message( "<span class='boldnotice'>Damaged internal tank has been sealed.</span>" );
				}
			}
			this.internal_damage &= Convert.ToInt32( ~int_dam_flag );
			this.diag_hud_set_mechstat();
			return;
		}

		// Function from file: mecha.dm
		public void setInternalDamage( dynamic int_dam_flag = null ) {
			this.internal_damage |= Convert.ToInt32( int_dam_flag );
			this.log_append_to_last( "Internal damage of type " + int_dam_flag + ".", true );
			this.occupant.WriteMsg( new Sound( "sound/machines/warning-buzzer.ogg", null, false ) );
			this.diag_hud_set_mechstat();
			return;
		}

		// Function from file: mecha.dm
		public void check_for_internal_damage( ByTable possible_int_damage = null, bool? ignore_threshold = null ) {
			dynamic T = null;
			dynamic int_dam_flag = null;
			dynamic ME = null;

			
			if ( !( possible_int_damage is ByTable ) || GlobalFuncs.isemptylist( possible_int_damage ) ) {
				return;
			}

			if ( Rand13.PercentChance( 20 ) ) {
				
				if ( ignore_threshold == true || this.health * 100 / Convert.ToDouble( Lang13.Initial( this, "health" ) ) < this.internal_damage_threshold ) {
					
					foreach (dynamic _a in Lang13.Enumerate( possible_int_damage )) {
						T = _a;
						

						if ( ( this.internal_damage & Convert.ToInt32( T ) ) != 0 ) {
							possible_int_damage.Remove( T );
						}
					}
					int_dam_flag = GlobalFuncs.safepick( possible_int_damage );

					if ( Lang13.Bool( int_dam_flag ) ) {
						this.setInternalDamage( int_dam_flag );
					}
				}
			}

			if ( Rand13.PercentChance( 5 ) ) {
				
				if ( ignore_threshold == true || this.health * 100 / Convert.ToDouble( Lang13.Initial( this, "health" ) ) < this.internal_damage_threshold ) {
					ME = GlobalFuncs.safepick( this.equipment );

					if ( Lang13.Bool( ME ) ) {
						GlobalFuncs.qdel( ME );
					}
				}
			}
			return;
		}

		// Function from file: mecha.dm
		public virtual dynamic mechsteprand(  ) {
			dynamic result = null;

			Map13.StepRandom( this );
			result = null;

			if ( Lang13.Bool( result ) && Lang13.Bool( this.stepsound ) ) {
				GlobalFuncs.playsound( this, this.stepsound, 40, 1 );
			}
			return result;
		}

		// Function from file: mecha.dm
		public virtual dynamic mechstep( int? direction = null ) {
			dynamic result = null;

			Map13.Step( this, direction ??0 );
			result = null;

			if ( Lang13.Bool( result ) && Lang13.Bool( this.stepsound ) ) {
				GlobalFuncs.playsound( this, this.stepsound, 40, 1 );
			}
			return result;
		}

		// Function from file: mecha.dm
		public virtual bool mechturn( int? direction = null ) {
			this.dir = direction ??0;

			if ( Lang13.Bool( this.turnsound ) ) {
				GlobalFuncs.playsound( this, this.turnsound, 40, 1 );
			}
			return true;
		}

		// Function from file: mecha.dm
		public virtual bool domove( int? direction = null ) {
			bool move_result = false;

			
			if ( !this.can_move ) {
				return false;
			}

			if ( !( this.Process_Spacemove( direction ) != 0 ) ) {
				return false;
			}

			if ( !this.has_charge( this.step_energy_drain ) ) {
				return false;
			}
			move_result = false;

			if ( ( this.internal_damage & 16 ) != 0 ) {
				move_result = Lang13.Bool( this.mechsteprand() );
			} else if ( this.dir != direction ) {
				move_result = this.mechturn( direction );
			} else {
				move_result = Lang13.Bool( this.mechstep( direction ) );
			}

			if ( move_result ) {
				this.use_power( this.step_energy_drain );
				this.can_move = false;
				Task13.Schedule( Convert.ToInt32( this.step_in ), (Task13.Closure)(() => {
					this.can_move = true;
					return;
				}));
				return true;
			}
			return false;
		}

		// Function from file: mecha.dm
		public void range_action( dynamic target = null ) {
			return;
		}

		// Function from file: mecha.dm
		public virtual void click_action( dynamic target = null, Mob user = null ) {
			int dir_to_target = 0;

			
			if ( !Lang13.Bool( this.occupant ) || this.occupant != user ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.FindIn( typeof(Tile), new ByTable(new object [] { target, target.loc }) ) ) ) {
				return;
			}

			if ( user.incapacitated() ) {
				return;
			}

			if ( this.state != 0 ) {
				this.occupant_message( "<span class='warning'>Maintenance protocols in effect.</span>" );
				return;
			}

			if ( !( this.get_charge() != 0 ) ) {
				return;
			}

			if ( this == target ) {
				return;
			}
			dir_to_target = Map13.GetDistance( this, target );

			if ( dir_to_target != 0 && !( ( dir_to_target & this.dir ) != 0 ) ) {
				return;
			}

			if ( ( this.internal_damage & 16 ) != 0 ) {
				target = GlobalFuncs.safepick( Map13.FetchInView( target, 3 ) );

				if ( !Lang13.Bool( target ) ) {
					return;
				}
			}

			if ( !((Ent_Static)target).Adjacent( this ) ) {
				
				if ( Lang13.Bool( this.selected ) && ((Obj_Item_MechaParts_MechaEquipment)this.selected).is_ranged() != 0 ) {
					
					if ( Lang13.Bool( this.selected.action( target ) ) ) {
						((Obj_Item_MechaParts_MechaEquipment)this.selected).start_cooldown();
					}
				}
			} else if ( Lang13.Bool( this.selected ) && ((Obj_Item_MechaParts_MechaEquipment)this.selected).is_melee() != 0 ) {
				
				if ( Lang13.Bool( this.selected.action( target ) ) ) {
					((Obj_Item_MechaParts_MechaEquipment)this.selected).start_cooldown();
				}
			} else {
				
				if ( ( this.internal_damage & 16 ) != 0 ) {
					target = GlobalFuncs.safepick( Map13.FetchInViewExcludeThis( this, 1 ) );
				}

				if ( !this.melee_can_hit || !( target is Ent_Static ) ) {
					return;
				}
				((Ent_Static)target).mech_melee_attack( this );
				this.melee_can_hit = false;
				Task13.Schedule( this.melee_cooldown, (Task13.Closure)(() => {
					this.melee_can_hit = true;
					return;
				}));
			}
			return;
		}

		// Function from file: mecha.dm
		public void drop_item(  ) {
			return;
		}

		// Function from file: mecha.dm
		public bool can_use( Mob user = null ) {
			
			if ( user != this.occupant ) {
				return false;
			}

			if ( user != null && user is Mob ) {
				
				if ( !user.incapacitated() ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mecha.dm
		public void add_radio(  ) {
			this.radio = new Obj_Item_Device_Radio( this );
			this.radio.name = "" + this + " radio";
			this.radio.icon = this.icon;
			this.radio.icon_state = this.icon_state;
			this.radio.subspace_transmission = true;
			return;
		}

		// Function from file: mecha.dm
		public GasMixture add_cabin(  ) {
			this.cabin_air = new GasMixture();
			this.cabin_air.temperature = 293.41;
			this.cabin_air.volume = 200;
			this.cabin_air.oxygen = this.cabin_air.volume * 0.01 / Convert.ToDouble( this.cabin_air.temperature * 8.31 );
			this.cabin_air.nitrogen = this.cabin_air.volume * 0.79 / Convert.ToDouble( this.cabin_air.temperature * 8.31 );
			return this.cabin_air;
		}

		// Function from file: mecha.dm
		public virtual void add_cell( Ent_Dynamic C = null ) {
			
			if ( C != null ) {
				C.forceMove( this );
				this.cell = C;
				return;
			}
			this.cell = new Obj_Item_Weapon_StockParts_Cell( this );
			this.cell.charge = 15000;
			this.cell.maxcharge = 15000;
			return;
		}

		// Function from file: mecha.dm
		public Obj_Machinery_PortableAtmospherics_Canister_Air add_airtank(  ) {
			this.internal_tank = new Obj_Machinery_PortableAtmospherics_Canister_Air( this );
			return this.internal_tank;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_mechstat(  ) {
			dynamic holder = null;

			holder = this.hud_list["8"];
			holder.icon_state = null;

			if ( this.internal_damage != 0 ) {
				holder.icon_state = "hudwarn";
			}
			return;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_mechcell(  ) {
			dynamic holder = null;
			dynamic chargelvl = null;

			holder = this.hud_list["10"];

			if ( Lang13.Bool( this.cell ) ) {
				chargelvl = this.cell.charge / this.cell.maxcharge;
				holder.icon_state = "hudbatt" + GlobalFuncs.RoundDiagBar( chargelvl );
			} else {
				holder.icon_state = "hudnobatt";
			}
			return;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_mechhealth(  ) {
			dynamic holder = null;

			holder = this.hud_list["11"];
			holder.icon_state = "huddiag" + GlobalFuncs.RoundDiagBar( this.health / Convert.ToDouble( Lang13.Initial( this, "health" ) ) );
			return;
		}

	}

}