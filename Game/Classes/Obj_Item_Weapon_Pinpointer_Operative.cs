// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Pinpointer_Operative : Obj_Item_Weapon_Pinpointer {

		public Mob_Living_Carbon nearest_op = null;

		public Obj_Item_Weapon_Pinpointer_Operative ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pinpointer.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.active ) {
				
				if ( this.nearest_op != null ) {
					user.WriteMsg( "Nearest operative detected is <i>" + this.nearest_op.real_name + ".</i>" );
				} else {
					user.WriteMsg( "No operatives detected within scanning range." );
				}
			}
			return 0;
		}

		// Function from file: pinpointer.dm
		public bool workop(  ) {
			
			if ( this.active ) {
				this.scan_for_ops();
				this.point_at( this.nearest_op, false );
				Task13.Schedule( 5, (Task13.Closure)(() => {
					this.workop();
					return;
				}));
			} else {
				return false;
			}
			return false;
		}

		// Function from file: pinpointer.dm
		public void scan_for_ops(  ) {
			int closest_distance = 0;
			Mob_Living_Carbon M = null;

			
			if ( this.active ) {
				this.nearest_op = null;
				closest_distance = 1000;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon) )) {
					M = _a;
					

					if ( M.mind != null && GlobalVars.ticker.mode.syndicates.Contains( M.mind ) ) {
						
						if ( Map13.GetDistance( M, GlobalFuncs.get_turf( this ) ) < closest_distance ) {
							this.nearest_op = M;
						}
					}
				}
			}
			return;
		}

		// Function from file: pinpointer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !( Task13.User.mind != null ) || !GlobalVars.ticker.mode.syndicates.Contains( Task13.User.mind ) ) {
				Task13.User.WriteMsg( "<span class='danger'>AUTHENTICATION FAILURE. ACCESS DENIED.</span>" );
				return 0;
			}

			if ( !this.active ) {
				this.active = true;
				this.workop();
				Task13.User.WriteMsg( "<span class='notice'>You activate the pinpointer.</span>" );
			} else {
				this.active = false;
				this.icon_state = "pinoff";
				Task13.User.WriteMsg( "<span class='notice'>You deactivate the pinpointer.</span>" );
			}
			return null;
		}

	}

}