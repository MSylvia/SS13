// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SpaceHeater : Obj_Machinery {

		public dynamic cell = null;
		public bool? on = false;
		public string mode = "standby";
		public string setMode = "auto";
		public double? targetTemperature = 293.41;
		public double heatingPower = 40000;
		public double efficiency = 20000;
		public bool temperatureTolerance = true;
		public double settableTemperatureMedian = 303.41;
		public double settableTemperatureRange = 30;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/atmos.dmi";
			this.icon_state = "sheater-off";
		}

		// Function from file: spaceheater.dm
		public Obj_Machinery_SpaceHeater ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.cell = new Obj_Item_Weapon_StockParts_Cell( this );
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_SpaceHeater( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Capacitor( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 3 ) );
			this.RefreshParts();
			this.update_icon();
			return;
		}

		// Function from file: spaceheater.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static L = null;
			GasMixture env = null;
			string newMode = null;
			double heat_capacity = 0;
			double requiredPower = 0;
			double deltaTemperature = 0;

			
			if ( !( this.on == true ) || ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) > 0 ) {
				L = this.loc;

				if ( !( L is Tile_Simulated ) ) {
					
					if ( this.mode != "standby" ) {
						this.mode = "standby";
						this.update_icon();
					}
					return null;
				}
				env = L.return_air();
				newMode = "standby";

				if ( this.setMode != "cool" && Convert.ToDouble( env.temperature ) < ( this.targetTemperature ??0) - ( this.temperatureTolerance ?1:0) ) {
					newMode = "heat";
				} else if ( this.setMode != "heat" && Convert.ToDouble( env.temperature ) > ( this.targetTemperature ??0) + ( this.temperatureTolerance ?1:0) ) {
					newMode = "cool";
				}

				if ( this.mode != newMode ) {
					this.mode = newMode;
					this.update_icon();
				}

				if ( this.mode == "standby" ) {
					return null;
				}
				heat_capacity = env.heat_capacity();
				requiredPower = Math.Abs( Convert.ToDouble( env.temperature - this.targetTemperature ) ) * heat_capacity;
				requiredPower = Num13.MinInt( ((int)( requiredPower )), ((int)( this.heatingPower )) );

				if ( requiredPower < 1 ) {
					return null;
				}
				deltaTemperature = requiredPower / heat_capacity;

				if ( this.mode == "cool" ) {
					deltaTemperature *= -1;
				}

				if ( deltaTemperature != 0 ) {
					env.temperature += deltaTemperature;
					this.air_update_turf();
				}
				this.cell.use( requiredPower / this.efficiency );
			} else {
				this.on = GlobalVars.FALSE;
				this.update_icon();
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			dynamic value = null;
			int minTemp = 0;
			double maxTemp = 0;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _a = action; // Was a switch-case, sorry for the mess.
			if ( _a=="power" ) {
				this.on = !( this.on == true );
				this.mode = "standby";
				Task13.User.visible_message( new Txt().item( Task13.User ).str( " switches " ).item( ( this.on == true ? "on" : "off" ) ).str( " " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You switch " ).item( ( this.on == true ? "on" : "off" ) ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );
				this.update_icon();
			} else if ( _a=="mode" ) {
				this.setMode = _params["mode"];
			} else if ( _a=="target" ) {
				
				if ( this.panel_open == true ) {
					value = null;

					if ( _params["target"] == "custom" ) {
						value = Interface13.Input( "Please input the target temperature", this.name, null, null, null, InputType.Num | InputType.Null );

						if ( value == null ) {
							return false;
						}
						value += 273.41;
					} else {
						value = ( this.targetTemperature ??0) + ( String13.ParseNumber( _params["target"] ) ??0);
					}
					minTemp = Num13.MaxInt( ((int)( this.settableTemperatureMedian - this.settableTemperatureRange )), ((int)( 2.7 )) );
					maxTemp = this.settableTemperatureMedian + this.settableTemperatureRange;
					this.targetTemperature = GlobalFuncs.dd_range( minTemp, maxTemp, Num13.Round( Convert.ToDouble( value ), 1 ) );
				}
			} else if ( _a=="eject" ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					this.cell.loc = GlobalFuncs.get_turf( this );
					this.cell = null;
				}
			}
			return true;
		}

		// Function from file: spaceheater.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.physical_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "space_heater", this.name, 400, 305, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: spaceheater.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.ui_interact( user );
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			this.interact( a );
			return null;
		}

		// Function from file: spaceheater.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic C = null;

			this.add_fingerprint( user );

			if ( A is Obj_Item_Weapon_StockParts_Cell ) {
				
				if ( this.panel_open == true ) {
					
					if ( Lang13.Bool( this.cell ) ) {
						user.WriteMsg( "<span class='warning'>There is already a power cell inside!</span>" );
						return null;
					} else {
						C = Task13.User.get_active_hand();

						if ( C is Obj_Item_Weapon_StockParts_Cell ) {
							
							if ( !Lang13.Bool( user.drop_item() ) ) {
								return null;
							}
							this.cell = C;
							C.loc = this;
							((Ent_Static)C).add_fingerprint( Task13.User );
							((Ent_Static)user).visible_message( new Txt().The( user ).item().str( " inserts a power cell into " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You insert the power cell into " ).the( this ).item().str( ".</span>" ).ToString() );
							GlobalVars.SStgui.update_uis( this );
						}
					}
				} else {
					user.WriteMsg( "<span class='warning'>The hatch must be open to insert a power cell!</span>" );
					return null;
				}
			} else if ( A is Obj_Item_Weapon_Screwdriver ) {
				this.panel_open = !( this.panel_open == true );
				((Ent_Static)user).visible_message( new Txt().The( user ).item().str( " " ).item( ( this.panel_open == true ? "opens" : "closes" ) ).str( " the hatch on " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You " ).item( ( this.panel_open == true ? "open" : "close" ) ).str( " the hatch on " ).the( this ).item().str( ".</span>" ).ToString() );
				this.update_icon();

				if ( this.panel_open == true ) {
					this.interact( user );
				}
			} else if ( this.exchange_parts( user, A ) || this.default_deconstruction_crowbar( A ) ) {
				return null;
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			ByTable data = null;
			dynamic L = null;
			dynamic curTemp = null;
			GasMixture env = null;

			data = new ByTable();
			data["open"] = this.panel_open;
			data["on"] = this.on;
			data["mode"] = this.setMode;
			data["hasPowercell"] = !( !Lang13.Bool( this.cell ) );

			if ( Lang13.Bool( this.cell ) ) {
				data["powerLevel"] = Num13.Round( ((Obj_Item_Weapon_StockParts_Cell)this.cell).percent(), 1 );
			}
			data["targetTemp"] = Num13.Round( ( this.targetTemperature ??0) - 273.41, 1 );
			data["minTemp"] = Num13.MaxInt( ((int)( this.settableTemperatureMedian - this.settableTemperatureRange - 273.41 )), ((int)( 2.7 )) );
			data["maxTemp"] = this.settableTemperatureMedian + this.settableTemperatureRange - 273.41;
			L = GlobalFuncs.get_turf( this.loc );

			if ( L is Tile_Simulated ) {
				env = ((Ent_Static)L).return_air();
				curTemp = env.temperature;
			} else if ( L is Tile ) {
				curTemp = L.temperature;
			}

			if ( curTemp == null ) {
				data["currentTemp"] = "N/A";
			} else {
				data["currentTemp"] = Num13.Round( Convert.ToDouble( curTemp - 273.41 ), 1 );
			}
			return data;
		}

		// Function from file: spaceheater.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return 0;
			}

			if ( Lang13.Bool( this.cell ) ) {
				((Ent_Static)this.cell).emp_act( severity );
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: spaceheater.dm
		public override void RefreshParts(  ) {
			double laser = 0;
			double cap = 0;
			Obj_Item_Weapon_StockParts_MicroLaser M = null;
			Obj_Item_Weapon_StockParts_Capacitor M2 = null;
			int minTemp = 0;
			double maxTemp = 0;

			laser = 0;
			cap = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				M = _a;
				
				laser += Convert.ToDouble( M.rating );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Capacitor) )) {
				M2 = _b;
				
				cap += Convert.ToDouble( M2.rating );
			}
			this.heatingPower = laser * 40000;
			this.settableTemperatureRange = cap * 30;
			this.efficiency = ( cap + 1 ) * 10000;
			minTemp = Num13.MaxInt( ((int)( this.settableTemperatureMedian - this.settableTemperatureRange )), ((int)( 2.7 )) );
			maxTemp = this.settableTemperatureMedian + this.settableTemperatureRange;
			this.targetTemperature = GlobalFuncs.dd_range( minTemp, maxTemp, this.targetTemperature );
			return;
		}

		// Function from file: spaceheater.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( new Txt().The( this ).item().str( " is " ).item( ( this.on == true ? "on" : "off" ) ).str( ", and the hatch is " ).item( ( this.panel_open == true ? "open" : "closed" ) ).str( "." ).ToString() );

			if ( Lang13.Bool( this.cell ) ) {
				user.WriteMsg( "The charge meter reads " + ( Lang13.Bool( this.cell ) ? Num13.Round( ((Obj_Item_Weapon_StockParts_Cell)this.cell).percent(), 1 ) : 0 ) + "%." );
			} else {
				user.WriteMsg( "There is no power cell installed." );
			}
			return 0;
		}

		// Function from file: spaceheater.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.on == true ) {
				this.icon_state = "sheater-" + this.mode;
			} else {
				this.icon_state = "sheater-off";
			}
			this.overlays.Cut();

			if ( this.panel_open == true ) {
				this.overlays.Add( "sheater-open" );
			}
			return null;
		}

		// Function from file: spaceheater.dm
		public override void deconstruction(  ) {
			
			if ( Lang13.Bool( this.cell ) ) {
				this.component_parts.Add( this.cell );
				this.cell = null;
			}
			base.deconstruction(); return;
		}

		// Function from file: spaceheater.dm
		public override void construction( dynamic pipe_type = null, dynamic obj_color = null ) {
			GlobalFuncs.qdel( this.cell );
			this.cell = null;
			this.panel_open = GlobalVars.TRUE;
			this.update_icon();
			base.construction( (object)(pipe_type), (object)(obj_color) ); return;
		}

	}

}