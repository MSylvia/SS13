// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Card : Obj_Machinery_Computer {

		public dynamic scan = null;
		public dynamic modify = null;
		public int authenticated = 0;
		public double? mode = 0;
		public bool? printing = null;
		public ByTable region_access = null;
		public ByTable head_subordinates = null;
		public int target_dept = 0;
		public double change_position_cooldown = 60;
		public ByTable blacklisted = new ByTable(new object [] { "AI", "Assistant", "Cyborg", "Captain", "Head of Personnel", "Head of Security", "Chief Engineer", "Research Director", "Chief Medical Officer", "Chaplain" });
		public int max_relative_positions = 30;
		public ByTable opened_positions = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "id";
			this.icon_keyboard = "id_key";
			this.req_one_access = new ByTable(new object [] { 19, 15 });
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Card);
		}

		public Obj_Machinery_Computer_Card ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: card.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic I = null;
			dynamic I2 = null;
			double? access_type = null;
			double? access_allowed = null;
			dynamic t1 = null;
			dynamic newJob = null;
			dynamic jobdatum = null;
			dynamic jobtype = null;
			dynamic J = null;
			dynamic t2 = null;
			string newName = null;
			dynamic edit_job_target = null;
			Job j = null;
			dynamic edit_job_target2 = null;
			Job j2 = null;
			Obj_Item_Weapon_Paper P = null;
			string t12 = null;
			Data_Record t = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );

			dynamic _c = href_list["choice"]; // Was a switch-case, sorry for the mess.
			if ( _c=="modify" ) {
				
				if ( Lang13.Bool( this.modify ) ) {
					GlobalVars.data_core.manifest_modify( this.modify.registered_name, this.modify.assignment );
					this.modify.update_label();
					this.modify.loc = this.loc;
					this.modify.__CallVerb("Pick up" );
					this.modify = null;
					this.region_access = null;
					this.head_subordinates = null;
				} else {
					I = Task13.User.get_active_hand();

					if ( I is Obj_Item_Weapon_Card_Id ) {
						
						if ( !Task13.User.drop_item() ) {
							return null;
						}
						I.loc = this;
						this.modify = I;
					}
				}
				this.authenticated = 0;
			} else if ( _c=="scan" ) {
				
				if ( Lang13.Bool( this.scan ) ) {
					this.scan.loc = this.loc;
					this.scan.__CallVerb("Pick up" );
					this.scan = null;
				} else {
					I2 = Task13.User.get_active_hand();

					if ( I2 is Obj_Item_Weapon_Card_Id ) {
						
						if ( !Task13.User.drop_item() ) {
							return null;
						}
						I2.loc = this;
						this.scan = I2;
					}
				}
				this.authenticated = 0;
			} else if ( _c=="auth" ) {
				
				if ( !( this.authenticated != 0 ) && ( Lang13.Bool( this.scan ) || Task13.User is Mob_Living_Silicon ) && ( Lang13.Bool( this.modify ) || Lang13.Bool( this.mode ) ) ) {
					
					if ( this.check_access( this.scan ) ) {
						this.region_access = new ByTable();
						this.head_subordinates = new ByTable();

						if ( Lang13.Bool( this.scan.access.Contains( GlobalVars.access_change_ids ) ) ) {
							
							if ( this.target_dept != 0 ) {
								this.head_subordinates = GlobalFuncs.get_all_jobs();
								this.region_access.Or( this.target_dept );
								this.authenticated = 1;
							} else {
								this.authenticated = 2;
							}
						} else {
							
							if ( Lang13.Bool( this.scan.access.Contains( GlobalVars.access_hop ) ) && ( this.target_dept == 1 || !( this.target_dept != 0 ) ) ) {
								this.region_access.Or( 1 );
								this.region_access.Or( 6 );
								this.get_subordinates( "Head of Personnel" );
							}

							if ( Lang13.Bool( this.scan.access.Contains( GlobalVars.access_hos ) ) && ( this.target_dept == 2 || !( this.target_dept != 0 ) ) ) {
								this.region_access.Or( 2 );
								this.get_subordinates( "Head of Security" );
							}

							if ( Lang13.Bool( this.scan.access.Contains( GlobalVars.access_cmo ) ) && ( this.target_dept == 3 || !( this.target_dept != 0 ) ) ) {
								this.region_access.Or( 3 );
								this.get_subordinates( "Chief Medical Officer" );
							}

							if ( Lang13.Bool( this.scan.access.Contains( GlobalVars.access_rd ) ) && ( this.target_dept == 4 || !( this.target_dept != 0 ) ) ) {
								this.region_access.Or( 4 );
								this.get_subordinates( "Research Director" );
							}

							if ( Lang13.Bool( this.scan.access.Contains( GlobalVars.access_ce ) ) && ( this.target_dept == 5 || !( this.target_dept != 0 ) ) ) {
								this.region_access.Or( 5 );
								this.get_subordinates( "Chief Engineer" );
							}

							if ( this.region_access != null ) {
								this.authenticated = 1;
							}
						}
					}
				} else if ( !( this.authenticated != 0 ) && Task13.User is Mob_Living_Silicon && !Lang13.Bool( this.modify ) ) {
					Task13.User.WriteMsg( "<span class='warning'>You can't modify an ID without an ID inserted to modify! Once one is in the modify slot on the computer, you can log in.</span>" );
				}
			} else if ( _c=="logout" ) {
				this.region_access = null;
				this.head_subordinates = null;
				this.authenticated = 0;
			} else if ( _c=="access" ) {
				
				if ( Lang13.Bool( href_list["allowed"] ) ) {
					
					if ( this.authenticated != 0 ) {
						access_type = String13.ParseNumber( href_list["access_target"] );
						access_allowed = String13.ParseNumber( href_list["allowed"] );

						if ( ( this is Obj_Machinery_Computer_Card_Centcom ? GlobalFuncs.get_all_centcom_access() : GlobalFuncs.get_all_accesses() ).Contains( access_type ) ) {
							this.modify.access -= access_type;

							if ( access_allowed == 1 ) {
								this.modify.access += access_type;
							}
						}
					}
				}
			} else if ( _c=="assign" ) {
				
				if ( this.authenticated == 2 ) {
					t1 = href_list["assign_target"];

					if ( t1 == "Custom" ) {
						newJob = GlobalFuncs.reject_bad_text( Interface13.Input( "Enter a custom job assignment.", "Assignment", ( Lang13.Bool( this.modify ) ? this.modify.assignment : ((dynamic)( "Unassigned" )) ), null, null, InputType.Any ), 26 );

						if ( Lang13.Bool( newJob ) ) {
							t1 = newJob;
						}
					} else if ( t1 == "Unassigned" ) {
						this.modify.access -= GlobalFuncs.get_all_accesses();
					} else {
						jobdatum = null;

						foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Job) ) )) {
							jobtype = _a;
							
							J = Lang13.Call( jobtype );

							if ( String13.CKey( J.title ) == String13.CKey( t1 ) ) {
								jobdatum = J;
								break;
							}
						}

						if ( !Lang13.Bool( jobdatum ) ) {
							Task13.User.WriteMsg( "<span class='error'>No log exists for this job.</span>" );
							return null;
						}
						this.modify.access = ( this is Obj_Machinery_Computer_Card_Centcom ? GlobalFuncs.get_centcom_access( t1 ) : ((Job)jobdatum).get_access() );
					}

					if ( Lang13.Bool( this.modify ) ) {
						this.modify.assignment = t1;
					}
				}
			} else if ( _c=="demote" ) {
				
				if ( Lang13.Bool( ((dynamic)( this.head_subordinates != null || this.modify.assignment == "Assistant" )).Contains( this.modify.assignment ) ) ) {
					this.modify.assignment = "Unassigned";
				} else {
					Task13.User.WriteMsg( "<span class='error'>You are not authorized to demote this position.</span>" );
				}
			} else if ( _c=="reg" ) {
				
				if ( this.authenticated != 0 ) {
					t2 = this.modify;

					if ( this.authenticated != 0 && this.modify == t2 && ( Map13.GetDistance( this, Task13.User ) <= 1 || Task13.User is Mob_Living_Silicon ) && this.loc is Tile ) {
						newName = GlobalFuncs.reject_bad_name( href_list["reg"] );

						if ( Lang13.Bool( newName ) ) {
							this.modify.registered_name = newName;
						} else {
							Task13.User.WriteMsg( "<span class='error'>Invalid name entered.</span>" );
							return null;
						}
					}
				}
			} else if ( _c=="mode" ) {
				this.mode = String13.ParseNumber( href_list["mode_target"] );
			} else if ( _c=="return" ) {
				this.mode = 3;
			} else if ( _c=="make_job_available" ) {
				
				if ( Lang13.Bool( this.scan ) && Lang13.Bool( this.scan.access.Contains( GlobalVars.access_change_ids ) ) && !( this.target_dept != 0 ) ) {
					edit_job_target = href_list["job"];
					j = GlobalVars.SSjob.GetJob( edit_job_target );

					if ( !( j != null ) ) {
						return 0;
					}

					if ( this.can_open_job( j ) != 1 ) {
						return 0;
					}

					if ( Convert.ToDouble( this.opened_positions[edit_job_target] ) >= 0 ) {
						GlobalVars.time_last_changed_position = Game13.time / 10;
					}
					j.total_positions++;
					this.opened_positions[edit_job_target]++;
				}
			} else if ( _c=="make_job_unavailable" ) {
				
				if ( Lang13.Bool( this.scan ) && Lang13.Bool( this.scan.access.Contains( GlobalVars.access_change_ids ) ) && !( this.target_dept != 0 ) ) {
					edit_job_target2 = href_list["job"];
					j2 = GlobalVars.SSjob.GetJob( edit_job_target2 );

					if ( !( j2 != null ) ) {
						return 0;
					}

					if ( this.can_close_job( j2 ) != 1 ) {
						return 0;
					}

					if ( Convert.ToDouble( this.opened_positions[edit_job_target2] ) <= 0 ) {
						GlobalVars.time_last_changed_position = Game13.time / 10;
					}
					j2.total_positions--;
					this.opened_positions[edit_job_target2]--;
				}
			} else if ( _c=="print" ) {
				
				if ( !( this.printing == true ) ) {
					this.printing = true;
					Task13.Sleep( 50 );
					P = new Obj_Item_Weapon_Paper( this.loc );
					t12 = "<B>Crew Manifest:</B><BR>";

					foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
						t = _b;
						
						t12 += t.fields["name"] + " - " + t.fields["rank"] + "<br>";
					}
					P.info = t12;
					P.name = "paper- 'Crew Manifest'";
					this.printing = null;
				}
			}

			if ( Lang13.Bool( this.modify ) ) {
				this.modify.update_label();
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: card.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;
			string crew = null;
			Data_Record t = null;
			string S = null;
			bool? ID = null;
			Job job = null;
			double time_to_wait = 0;
			int mins = 0;
			double seconds = 0;
			double time_to_wait2 = 0;
			int mins2 = 0;
			double seconds2 = 0;
			string header = null;
			string target_name = null;
			string target_owner = null;
			string target_rank = null;
			string scan_name = null;
			string jobs_all = null;
			ByTable alljobs = null;
			dynamic job2 = null;
			string body = null;
			string carddesc = null;
			string jobs = null;
			string accesses = null;
			dynamic A = null;
			double? i = null;
			double? i2 = null;
			dynamic A2 = null;
			Browser popup = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			((Mob)a).set_machine( this );

			if ( !( GlobalVars.ticker != null ) ) {
				return null;
			}

			if ( this.mode == 1 ) {
				crew = "";

				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
					t = _a;
					
					crew += t.fields["name"] + " - " + t.fields["rank"] + "<br>";
				}
				dat = new Txt( "<tt><b>Crew Manifest:</b><br>Please use security record computer to modify entries.<br><br>" ).item( crew ).str( "<a href='?src=" ).Ref( this ).str( ";choice=print'>Print</a><br><br><a href='?src=" ).Ref( this ).str( ";choice=mode;mode_target=0'>Access ID modification console.</a><br></tt>" ).ToString();
			} else if ( this.mode == 2 ) {
				dat = new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=return'>Return</a>" ).ToString();
				dat += " || Confirm Identity: ";
				S = null;

				if ( Lang13.Bool( this.scan ) ) {
					S = String13.HtmlEncode( this.scan.name );
				} else {
					S = "--------";
				}
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=scan'>" ).item( S ).str( "</a>" ).ToString();
				dat += "<table>";
				dat += "<tr><td style='width:25%'><b>Job</b></td><td style='width:25%'><b>Slots</b></td><td style='width:25%'><b>Open job</b></td><td style='width:25%'><b>Close job</b></td></tr>";
				ID = null;

				if ( Lang13.Bool( this.scan ) && Lang13.Bool( this.scan.access.Contains( GlobalVars.access_change_ids ) ) && !( this.target_dept != 0 ) ) {
					ID = true;
				} else {
					ID = false;
				}

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
					job = _d;
					
					dat += "<tr>";

					if ( this.blacklisted.Contains( job.title ) ) {
						continue;
					}
					dat += "<td>" + job.title + "</td>";
					dat += "<td>" + job.current_positions + "/" + job.total_positions + "</td>";
					dat += "<td>";

					switch ((int)( this.can_open_job( job ) )) {
						case 1:
							
							if ( ID == true ) {
								dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=make_job_available;job=" ).item( job.title ).str( "'>Open Position</a><br>" ).ToString();
							} else {
								dat += "Open Position";
							}
							break;
						case -1:
							dat += "Denied";
							break;
						case -2:
							time_to_wait = Num13.Round( this.change_position_cooldown - ( Game13.time / 10 - GlobalVars.time_last_changed_position ), 1 );
							mins = Num13.Floor( time_to_wait / 60 );
							seconds = time_to_wait - mins * 60;
							dat += "Cooldown ongoing: " + mins + ":" + ( seconds < 10 ? "0" + seconds : "" + seconds );
							break;
						case 0:
							dat += "Denied";
							break;
					}
					dat += "</td><td>";

					switch ((int)( this.can_close_job( job ) )) {
						case 1:
							
							if ( ID == true ) {
								dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=make_job_unavailable;job=" ).item( job.title ).str( "'>Close Position</a>" ).ToString();
							} else {
								dat += "Close Position";
							}
							break;
						case -1:
							dat += "Denied";
							break;
						case -2:
							time_to_wait2 = Num13.Round( this.change_position_cooldown - ( Game13.time / 10 - GlobalVars.time_last_changed_position ), 1 );
							mins2 = Num13.Floor( time_to_wait2 / 60 );
							seconds2 = time_to_wait2 - mins2 * 60;
							dat += "Cooldown ongoing: " + mins2 + ":" + ( seconds2 < 10 ? "0" + seconds2 : "" + seconds2 );
							break;
						case 0:
							dat += "Denied";
							break;
					}
					dat += "</td></tr>";
				}
				dat += "</table>";
			} else {
				header = "";
				target_name = null;
				target_owner = null;
				target_rank = null;

				if ( Lang13.Bool( this.modify ) ) {
					target_name = String13.HtmlEncode( this.modify.name );
				} else {
					target_name = "--------";
				}

				if ( Lang13.Bool( this.modify ) && Lang13.Bool( this.modify.registered_name ) ) {
					target_owner = String13.HtmlEncode( this.modify.registered_name );
				} else {
					target_owner = "--------";
				}

				if ( Lang13.Bool( this.modify ) && Lang13.Bool( this.modify.assignment ) ) {
					target_rank = String13.HtmlEncode( this.modify.assignment );
				} else {
					target_rank = "Unassigned";
				}
				scan_name = null;

				if ( Lang13.Bool( this.scan ) ) {
					scan_name = String13.HtmlEncode( this.scan.name );
				} else {
					scan_name = "--------";
				}

				if ( !( this.authenticated != 0 ) ) {
					header += "<br><i>Please insert the cards into the slots</i><br>";
					header += new Txt( "Target: <a href='?src=" ).Ref( this ).str( ";choice=modify'>" ).item( target_name ).str( "</a><br>" ).ToString();
					header += new Txt( "Confirm Identity: <a href='?src=" ).Ref( this ).str( ";choice=scan'>" ).item( scan_name ).str( "</a><br>" ).ToString();
				} else {
					header += "<div align='center'><br>";
					header += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=modify'>Remove " ).item( target_name ).str( "</a> || " ).ToString();
					header += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=scan'>Remove " ).item( scan_name ).str( "</a> <br> " ).ToString();
					header += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=mode;mode_target=1'>Access Crew Manifest</a> || " ).ToString();
					header += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=logout'>Log Out</a></div>" ).ToString();
				}
				header += "<hr>";
				jobs_all = "";
				alljobs = new ByTable(new object [] { "Unassigned" });
				alljobs.Add( ( this is Obj_Machinery_Computer_Card_Centcom ? GlobalFuncs.get_all_centcom_jobs() : GlobalFuncs.get_all_jobs() ) + "Custom" );

				foreach (dynamic _e in Lang13.Enumerate( alljobs )) {
					job2 = _e;
					
					jobs_all += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=assign;assign_target=" ).item( job2 ).str( "'>" ).item( GlobalFuncs.replacetext( job2, " ", "&nbsp" ) ).str( "</a> " ).ToString();
				}
				body = null;

				if ( this.authenticated != 0 && Lang13.Bool( this.modify ) ) {
					carddesc = "";
					jobs = "";

					if ( this.authenticated == 2 ) {
						carddesc += @"<script type=""text/javascript"">
									function markRed(){
										var nameField = document.getElementById('namefield');
										nameField.style.backgroundColor = ""#FFDDDD"";
									}
									function markGreen(){
										var nameField = document.getElementById('namefield');
										nameField.style.backgroundColor = ""#DDFFDD"";
									}
									function showAll(){
										var allJobsSlot = document.getElementById('alljobsslot');
										allJobsSlot.innerHTML = ""<a href='#' onclick='hideAll()'>hide</a><br>""+ """ + jobs_all + @""";
									}
									function hideAll(){
										var allJobsSlot = document.getElementById('alljobsslot');
										allJobsSlot.innerHTML = ""<a href='#' onclick='showAll()'>show</a>"";
									}
								</script>";
						carddesc += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>" ).ToString();
						carddesc += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
						carddesc += "<input type='hidden' name='choice' value='reg'>";
						carddesc += "<b>registered name:</b> <input type='text' id='namefield' name='reg' value='" + target_owner + "' style='width:250px; background-color:white;' onchange='markRed()'>";
						carddesc += "<input type='submit' value='Rename' onclick='markGreen()'>";
						carddesc += "</form>";
						carddesc += "<b>Assignment:</b> ";
						jobs += "<span id='alljobsslot'><a href='#' onclick='showAll()'>" + target_rank + "</a></span>";
					} else {
						carddesc += "<b>registered_name:</b> " + target_owner + "</span>";
						jobs += new Txt( "<b>Assignment:</b> " ).item( target_rank ).str( " (<a href='?src=" ).Ref( this ).str( ";choice=demote'>Demote</a>)</span>" ).ToString();
					}
					accesses = "";

					if ( this is Obj_Machinery_Computer_Card_Centcom ) {
						accesses += "<h5>Central Command:</h5>";

						foreach (dynamic _f in Lang13.Enumerate( GlobalFuncs.get_all_centcom_access() )) {
							A = _f;
							

							if ( Lang13.Bool( this.modify.access.Contains( A ) ) ) {
								accesses += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=access;access_target=" ).item( A ).str( ";allowed=0'><font color=\"red\">" ).item( GlobalFuncs.replacetext( GlobalFuncs.get_centcom_access_desc( A ), " ", "&nbsp" ) ).str( "</font></a> " ).ToString();
							} else {
								accesses += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=access;access_target=" ).item( A ).str( ";allowed=1'>" ).item( GlobalFuncs.replacetext( GlobalFuncs.get_centcom_access_desc( A ), " ", "&nbsp" ) ).str( "</a> " ).ToString();
							}
						}
					} else {
						accesses += "<div align='center'><b>Access</b></div>";
						accesses += "<table style='width:100%'>";
						accesses += "<tr>";
						i = null;
						i = 1;

						while (( i ??0) <= 7) {
							
							if ( this.authenticated == 1 && !this.region_access.Contains( i ) ) {
								
							} else {
								accesses += "<td style='width:14%'><b>" + GlobalFuncs.get_region_accesses_name( i ) + ":</b></td>";
							}
							i++;
						}
						accesses += "</tr><tr>";
						i2 = null;
						i2 = 1;

						while (( i2 ??0) <= 7) {
							
							if ( this.authenticated == 1 && !this.region_access.Contains( i2 ) ) {
								
							} else {
								accesses += "<td style='width:14%' valign='top'>";

								foreach (dynamic _g in Lang13.Enumerate( GlobalFuncs.get_region_accesses( i2 ) )) {
									A2 = _g;
									

									if ( Lang13.Bool( this.modify.access.Contains( A2 ) ) ) {
										accesses += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=access;access_target=" ).item( A2 ).str( ";allowed=0'><font color=\"red\">" ).item( GlobalFuncs.replacetext( GlobalFuncs.get_access_desc( A2 ), " ", "&nbsp" ) ).str( "</font></a> " ).ToString();
									} else {
										accesses += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=access;access_target=" ).item( A2 ).str( ";allowed=1'>" ).item( GlobalFuncs.replacetext( GlobalFuncs.get_access_desc( A2 ), " ", "&nbsp" ) ).str( "</a> " ).ToString();
									}
									accesses += "<br>";
								}
								accesses += "</td>";
							}
							i2++;
						}
						accesses += "</tr></table>";
					}
					body = "" + carddesc + "<br>" + jobs + "<br><br>" + accesses;
				} else {
					body = new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=auth'>{Log in}</a> <br><hr>" ).ToString();
					body += new Txt( "<a href='?src=" ).Ref( this ).str( ";choice=mode;mode_target=1'>Access Crew Manifest</a>" ).ToString();

					if ( !( this.target_dept != 0 ) ) {
						body += new Txt( "<br><hr><a href = '?src=" ).Ref( this ).str( ";choice=mode;mode_target=2'>Job Management</a>" ).ToString();
					}
				}
				dat = "<tt>" + header + body + "<hr><br></tt>";
			}
			popup = new Browser( a, "id_com", this.name, 900, 620 );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: card.dm
		public void get_subordinates( string rank = null ) {
			Job job = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
				job = _a;
				

				if ( job.department_head.Contains( rank ) ) {
					this.head_subordinates.Add( job.title );
				}
			}
			return;
		}

		// Function from file: card.dm
		public int can_close_job( Job job = null ) {
			double delta = 0;

			
			if ( job != null ) {
				
				if ( !this.job_blacklisted( job.title ) ) {
					
					if ( Convert.ToDouble( job.total_positions ) > ( job.current_positions ??0) ) {
						delta = Game13.time / 10 - GlobalVars.time_last_changed_position;

						if ( this.change_position_cooldown < delta || Convert.ToDouble( this.opened_positions[job.title] ) > 0 ) {
							return 1;
						}
						return -2;
					}
					return -1;
				}
			}
			return 0;
		}

		// Function from file: card.dm
		public int can_open_job( Job job = null ) {
			double delta = 0;

			
			if ( job != null ) {
				
				if ( !this.job_blacklisted( job.title ) ) {
					
					if ( Convert.ToDouble( job.total_positions ) <= GlobalVars.player_list.len * ( this.max_relative_positions / 100 ) ) {
						delta = Game13.time / 10 - GlobalVars.time_last_changed_position;

						if ( this.change_position_cooldown < delta || Convert.ToDouble( this.opened_positions[job.title] ) < 0 ) {
							return 1;
						}
						return -2;
					}
					return -1;
				}
			}
			return 0;
		}

		// Function from file: card.dm
		public bool job_blacklisted( string jobtitle = null ) {
			return this.blacklisted.Contains( jobtitle );
		}

		// Function from file: card.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic idcard = null;

			
			if ( A is Obj_Item_Weapon_Card_Id ) {
				idcard = A;

				if ( this.check_access( idcard ) ) {
					
					if ( !Lang13.Bool( this.scan ) ) {
						
						if ( !Task13.User.drop_item() ) {
							return null;
						}
						idcard.loc = this;
						this.scan = idcard;
					} else if ( !Lang13.Bool( this.modify ) ) {
						
						if ( !Task13.User.drop_item() ) {
							return null;
						}
						idcard.loc = this;
						this.modify = idcard;
					}
				} else if ( !Lang13.Bool( this.modify ) ) {
					
					if ( !Task13.User.drop_item() ) {
						return null;
					}
					idcard.loc = this;
					this.modify = idcard;
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

	}

}