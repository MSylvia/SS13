// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Aifixer : Obj_Machinery_Computer {

		public dynamic occupier = null;
		public bool active = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 20, 29, 19 });
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Aifixer);
			this.icon_keyboard = "tech_key";
			this.icon_screen = "ai-fixer";
		}

		public Obj_Machinery_Computer_Aifixer ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: aifixer.dm
		public override bool transfer_ai( dynamic interaction = null, dynamic user = null, dynamic AI = null, dynamic card = null ) {
			
			if ( !base.transfer_ai( (object)(interaction), (object)(user), (object)(AI), (object)(card) ) ) {
				return false;
			}

			if ( interaction == 2 ) {
				
				if ( ( this.stat & 3 ) != 0 ) {
					user.WriteMsg( "" + this + " is offline and cannot take an AI at this time!" );
					return false;
				}
				AI.loc = this;
				this.occupier = AI;
				AI.control_disabled = true;
				AI.radio_enabled = false;
				AI.WriteMsg( "You have been uploaded to a stationary terminal. Sadly, there is no remote access from here." );
				user.WriteMsg( "<span class='boldnotice'>Transfer successful</span>: " + AI.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) installed and executed successfully. Local copy has been removed." );
				this.update_icon();
			} else if ( Lang13.Bool( this.occupier ) && !this.active ) {
				this.occupier.WriteMsg( "You have been downloaded to a mobile storage device. Still no remote access." );
				user.WriteMsg( "<span class='boldnotice'>Transfer successful</span>: " + this.occupier.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) removed from host terminal and stored within local memory." );
				this.occupier.loc = card;
				this.occupier = null;
				this.update_icon();
			} else if ( this.active ) {
				user.WriteMsg( "<span class='boldannounce'>ERROR</span>: Reconstruction in progress." );
			} else if ( !Lang13.Bool( this.occupier ) ) {
				user.WriteMsg( "<span class='boldannounce'>ERROR</span>: Unable to locate artificial intelligence." );
			}
			return false;
		}

		// Function from file: aifixer.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			} else {
				
				if ( this.active ) {
					this.overlays.Add( "ai-fixer-on" );
				}

				if ( Lang13.Bool( this.occupier ) ) {
					
					dynamic _a = this.occupier.stat; // Was a switch-case, sorry for the mess.
					if ( _a==0 ) {
						this.overlays.Add( "ai-fixer-full" );
					} else if ( _a==2 ) {
						this.overlays.Add( "ai-fixer-404" );
					}
				} else {
					this.overlays.Add( "ai-fixer-empty" );
				}
			}
			return null;
		}

		// Function from file: aifixer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["fix"] ) ) {
				this.active = true;

				while (Convert.ToDouble( this.occupier.health ) < 100) {
					((Mob_Living)this.occupier).adjustOxyLoss( -1 );
					((Mob_Living)this.occupier).adjustFireLoss( -1 );
					((Mob_Living)this.occupier).adjustToxLoss( -1 );
					((Mob_Living)this.occupier).adjustBruteLoss( -1 );
					((Mob_Living)this.occupier).updatehealth();

					if ( Convert.ToDouble( this.occupier.health ) >= 0 && Convert.ToInt32( this.occupier.stat ) == 2 ) {
						this.occupier.stat = 0;
						this.occupier.lying = 0;
						GlobalVars.dead_mob_list.Remove( this.occupier );
						GlobalVars.living_mob_list.Add( this.occupier );
					}
					this.updateUsrDialog();
					this.update_icon();
					Task13.Sleep( 10 );
				}
				this.active = false;
				this.add_fingerprint( Task13.User );
			}
			this.updateUsrDialog();
			this.update_icon();
			return null;
		}

		// Function from file: aifixer.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( Lang13.Bool( base.process( (object)(seconds) ) ) ) {
				this.updateDialog();
				return null;
			}
			return null;
		}

		// Function from file: aifixer.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			dynamic laws = null;
			int? index = null;
			dynamic law = null;
			string num = null;
			int number = 0;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;
			Browser popup = null;

			dat = "";

			if ( Lang13.Bool( this.occupier ) ) {
				dat += "<h3>Stored AI: " + this.occupier.name + "</h3>";
				dat += "<b>System integrity:</b> " + ( this.occupier.health + 100 ) / 2 + "%<br>";

				if ( Lang13.Bool( this.occupier.laws.zeroth ) ) {
					laws += "<b>0:</b> " + this.occupier.laws.zeroth + "<BR>";
				}
				index = null;
				index = 1;

				while (( index ??0) <= this.occupier.laws.ion.len) {
					law = this.occupier.laws.ion[index];

					if ( Lang13.Length( law ) > 0 ) {
						num = GlobalFuncs.ionnum();
						laws += "<b>" + num + ":</b> " + law + "<BR>";
					}
					index++;
				}
				number = 1;
				index2 = null;
				index2 = 1;

				while (( index2 ??0) <= this.occupier.laws.inherent.len) {
					law2 = this.occupier.laws.inherent[index2];

					if ( Lang13.Length( law2 ) > 0 ) {
						laws += "<b>" + number + ":</b> " + law2 + "<BR>";
						number++;
					}
					index2++;
				}
				index3 = null;
				index3 = 1;

				while (( index3 ??0) <= this.occupier.laws.supplied.len) {
					law3 = this.occupier.laws.supplied[index3];

					if ( Lang13.Length( law3 ) > 0 ) {
						laws += "<b>" + number + ":</b> " + law3 + "<BR>";
						number++;
					}
					index3++;
				}
				dat += "<b>Laws:</b><br>" + laws + "<br>";

				if ( Convert.ToInt32( this.occupier.stat ) == 2 ) {
					dat += "<span class='bad'>AI non-functional</span>";
				} else {
					dat += "<span class='good'>AI functional</span>";
				}

				if ( !this.active ) {
					dat += new Txt( "<br><br><A href='byond://?src=" ).Ref( this ).str( ";fix=1'>Begin Reconstruction</A>" ).ToString();
				} else {
					dat += "<br><br>Reconstruction in process, please wait.<br>";
				}
			}
			dat += new Txt( "<br><A href='?src=" ).Ref( user ).str( ";mach_close=computer'>Close</A>" ).ToString();
			popup = new Browser( user, "computer", "AI System Integrity Restorer", 400, 500 );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: aifixer.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: aifixer.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( Lang13.Bool( this.occupier ) && A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( ( this.stat & 3 ) != 0 ) {
					user.WriteMsg( "<span class='warning'>The screws on " + this.name + "'s screen won't budge.</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>The screws on " + this.name + "'s screen won't budge and it emits a warning beep.</span>" );
				}
				return null;
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

	}

}