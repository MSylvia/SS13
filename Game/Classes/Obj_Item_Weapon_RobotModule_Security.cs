// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_RobotModule_Security : Obj_Item_Weapon_RobotModule {

		// Function from file: robot_modules.dm
		public Obj_Item_Weapon_RobotModule_Security ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.modules.Add( new Obj_Item_Weapon_Restraints_Handcuffs_Cable_Zipties_Cyborg( this ) );
			this.modules.Add( new Obj_Item_Weapon_Melee_Baton_Loaded( this ) );
			this.modules.Add( new Obj_Item_Weapon_Gun_Energy_Disabler_Cyborg( this ) );
			this.modules.Add( new Obj_Item_Clothing_Mask_Gas_Sechailer_Cyborg( this ) );
			this.emag = new Obj_Item_Weapon_Gun_Energy_Laser_Cyborg( this );
			this.fix_modules();
			return;
		}

		// Function from file: robot_modules.dm
		public override void respawn_consumable( dynamic R = null, double? coeff = null ) {
			coeff = coeff ?? 1;

			dynamic T = null;
			Obj_Item_AmmoCasing_Energy S = null;

			base.respawn_consumable( (object)(R), coeff );
			T = Lang13.FindIn( typeof(Obj_Item_Weapon_Gun_Energy_Gun_Advtaser_Cyborg), this.get_usable_modules() );

			if ( Lang13.Bool( T ) ) {
				
				if ( Convert.ToDouble( T.power_supply.charge ) < ( T.power_supply.maxcharge ??0) ) {
					S = T.ammo_type[T.select];
					((Obj_Item_Weapon_StockParts_Cell)T.power_supply).give( ( S.e_cost ??0) * ( coeff ??0) );
					T.update_icon();
				} else {
					T.charge_tick = 0;
				}
			}
			return;
		}

	}

}