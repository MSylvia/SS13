// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Relic : Obj_Item_Weapon {

		public string realName = "defined object";
		public bool? revealed = false;
		public dynamic realProc = null;
		public int cooldownMax = 60;
		public bool? cooldown = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "combat=1;plasmatech=1;powerstorage=1;materials=1";
			this.icon = "icons/obj/assemblies.dmi";
		}

		// Function from file: experimentor.dm
		public Obj_Item_Weapon_Relic ( dynamic loc = null ) : base( (object)(loc) ) {
			this.icon_state = Rand13.Pick(new object [] { "shock_kit", "armor-igniter-analyzer", "infra-igniter0", "infra-igniter1", "radio-multitool", "prox-radio1", "radio-radio", "timer-multitool0", "radio-igniter-tank" });
			this.realName = "" + Rand13.Pick(new object [] { "broken", "twisted", "spun", "improved", "silly", "regular", "badly made" }) + " " + Rand13.Pick(new object [] { "device", "object", "toy", "illegal tech", "weapon" });
			return;
		}

		// Function from file: experimentor.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.revealed == true ) {
				
				if ( this.cooldown == true ) {
					user.WriteMsg( "<span class='warning'>" + this + " does not react!</span>" );
					return null;
				} else if ( this.loc == user ) {
					this.cooldown = GlobalVars.TRUE;
					Lang13.Call( Lang13.BindFunc( this, this.realProc ), user );
					Task13.Schedule( this.cooldownMax, (Task13.Closure)(() => {
						this.cooldown = GlobalVars.FALSE;
						return;
					}));
				}
			} else {
				user.WriteMsg( "<span class='notice'>You aren't quite sure what to do with this, yet.</span>" );
			}
			return null;
		}

		// Function from file: experimentor.dm
		public void warn_admins( Ent_Static user = null, string RelicType = null, bool? priority = null ) {
			priority = priority ?? true;

			dynamic T = null;
			string log_msg = null;

			T = GlobalFuncs.get_turf( this );
			log_msg = "" + RelicType + " relic used by " + GlobalFuncs.key_name( user ) + " in (" + T.x + "," + T.y + "," + T.z + ")";

			if ( priority == true ) {
				GlobalFuncs.message_admins( new Txt().item( RelicType ).str( " relic activated by " ).item( GlobalFuncs.key_name_admin( user ) ).str( "(<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( user ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( user ).str( "'>FLW</A>) in (" ).item( T.x ).str( "," ).item( T.y ).str( "," ).item( T.z ).str( " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( T.x ).str( ";Y=" ).item( T.y ).str( ";Z=" ).item( T.z ).str( "'>JMP</a>)" ).ToString() );
			}
			GlobalFuncs.log_game( log_msg );
			this.investigate_log( log_msg, "experimentor" );
			return;
		}

		// Function from file: experimentor.dm
		public void teleport( Ent_Static user = null ) {
			dynamic userturf = null;

			((dynamic)user).WriteMsg( "<span class='notice'>The " + this + " begins to vibrate!</span>" );
			Task13.Schedule( Rand13.Int( 10, 30 ), (Task13.Closure)(() => {
				userturf = GlobalFuncs.get_turf( user );

				if ( this.loc == user && Convert.ToInt32( userturf.z ) != 2 ) {
					this.visible_message( "<span class='notice'>The " + this + " twists and bends, relocating itself!</span>" );
					this.throwSmoke( userturf );
					GlobalFuncs.do_teleport( user, userturf, 8, null, null, null, "sound/effects/phasein.ogg" );
					this.throwSmoke( GlobalFuncs.get_turf( user ) );
					this.warn_admins( user, "Teleport", false );
				}
				return;
			}));
			return;
		}

		// Function from file: experimentor.dm
		public void explode( Ent_Static user = null ) {
			((dynamic)user).WriteMsg( "<span class='danger'>" + this + " begins to heat up!</span>" );
			Task13.Schedule( Rand13.Int( 35, 100 ), (Task13.Closure)(() => {
				
				if ( this.loc == user ) {
					this.visible_message( "<span class='notice'>The " + this + "'s top opens, releasing a powerful blast!</span>" );
					GlobalFuncs.explosion( user.loc, -1, Rand13.Int( 1, 5 ), Rand13.Int( 1, 5 ), Rand13.Int( 1, 5 ), Rand13.Int( 1, 5 ), null, 2 );
					this.warn_admins( user, "Explosion" );
					GlobalFuncs.qdel( this );
				}
				return;
			}));
			return;
		}

		// Function from file: experimentor.dm
		public void rapidDupe( Ent_Static user = null ) {
			ByTable dupes = null;
			int counter = 0;
			int max = 0;
			dynamic R = null;
			dynamic R2 = null;

			this.audible_message( "" + this + " emits a loud pop!" );
			dupes = new ByTable();
			max = Rand13.Int( 5, 10 );
			counter = 1;

			while (counter < max) {
				R = Lang13.Call( this.type, GlobalFuncs.get_turf( this ) );
				R.name = this.name;
				R.desc = this.desc;
				R.realName = this.realName;
				R.realProc = this.realProc;
				R.revealed = GlobalVars.TRUE;
				dupes.Or( R );
				((Ent_Dynamic)R).throw_at_fast( Rand13.PickFromTable( Map13.FetchInViewExcludeThis( GlobalFuncs.get_turf( this ), 7 ) ), 10, 1 );
				counter++;
			}
			counter = 0;
			Task13.Schedule( Rand13.Int( 10, 100 ), (Task13.Closure)(() => {
				counter = 1;

				while (counter <= dupes.len) {
					R2 = dupes[counter];
					GlobalFuncs.qdel( R2 );
					counter++;
				}
				return;
			}));
			this.warn_admins( user, "Rapid duplicator", false );
			return;
		}

		// Function from file: experimentor.dm
		public void petSpray( Ent_Static user = null ) {
			string message = null;
			int animals = 0;
			int counter = 0;
			ByTable valid_animals = null;
			dynamic mobType = null;

			message = "<span class='danger'>" + this + " begans to shake, and in the distance the sound of rampaging animals arises!</span>";
			this.visible_message( message );
			((dynamic)user).WriteMsg( message );
			animals = Rand13.Int( 1, 25 );
			valid_animals = new ByTable(new object [] { 
				typeof(Mob_Living_SimpleAnimal_Parrot), 
				typeof(Mob_Living_SimpleAnimal_Butterfly), 
				typeof(Mob_Living_SimpleAnimal_Pet_Cat), 
				typeof(Mob_Living_SimpleAnimal_Pet_Dog_Corgi), 
				typeof(Mob_Living_SimpleAnimal_Crab), 
				typeof(Mob_Living_SimpleAnimal_Pet_Fox), 
				typeof(Mob_Living_SimpleAnimal_Lizard), 
				typeof(Mob_Living_SimpleAnimal_Mouse), 
				typeof(Mob_Living_SimpleAnimal_Pet_Dog_Pug), 
				typeof(Mob_Living_SimpleAnimal_Hostile_Bear), 
				typeof(Mob_Living_SimpleAnimal_Hostile_Poison_Bees), 
				typeof(Mob_Living_SimpleAnimal_Hostile_Carp)
			 });
			counter = 1;

			while (counter < animals) {
				mobType = Rand13.PickFromTable( valid_animals );
				Lang13.Call( mobType, GlobalFuncs.get_turf( this ) );
				counter++;
			}
			this.warn_admins( user, "Mass Mob Spawn" );

			if ( Rand13.PercentChance( 60 ) ) {
				((dynamic)user).WriteMsg( "<span class='warning'>" + this + " falls apart!</span>" );
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: experimentor.dm
		public void flash( Ent_Static user = null ) {
			Obj_Item_Weapon_Grenade_Flashbang CB = null;

			GlobalFuncs.playsound( this.loc, "sparks", Rand13.Int( 25, 50 ), 1 );
			CB = new Obj_Item_Weapon_Grenade_Flashbang( GlobalFuncs.get_turf( user ) );
			CB.prime();
			this.warn_admins( user, "Flash" );
			return;
		}

		// Function from file: experimentor.dm
		public void clean( Ent_Static user = null ) {
			Obj_Item_Weapon_Grenade_ChemGrenade_Cleaner CL = null;

			GlobalFuncs.playsound( this.loc, "sparks", Rand13.Int( 25, 50 ), 1 );
			CL = new Obj_Item_Weapon_Grenade_ChemGrenade_Cleaner( GlobalFuncs.get_turf( user ) );
			CL.prime();
			this.warn_admins( user, "Smoke", false );
			return;
		}

		// Function from file: experimentor.dm
		public void corgicannon( Ent_Static user = null ) {
			Mob_Living_SimpleAnimal_Pet_Dog_Corgi C = null;

			GlobalFuncs.playsound( this.loc, "sparks", Rand13.Int( 25, 50 ), 1 );
			C = new Mob_Living_SimpleAnimal_Pet_Dog_Corgi( GlobalFuncs.get_turf( user ) );
			C.throw_at( Rand13.PickFromTable( Map13.FetchInViewExcludeThis( user, 10 ) ), 10, Rand13.Int( 3, 8 ) );
			this.throwSmoke( GlobalFuncs.get_turf( C ) );
			this.warn_admins( user, "Corgi Cannon", false );
			return;
		}

		// Function from file: experimentor.dm
		public void throwSmoke( dynamic where = null ) {
			EffectSystem_SmokeSpread smoke = null;

			smoke = new EffectSystem_SmokeSpread();
			smoke.set_up( 0, where );
			smoke.start();
			return;
		}

		// Function from file: experimentor.dm
		public void reveal(  ) {
			
			if ( this.revealed == true ) {
				return;
			}
			this.revealed = GlobalVars.TRUE;
			this.name = this.realName;
			this.cooldownMax = Rand13.Int( 60, 300 );
			this.realProc = Rand13.Pick(new object [] { "teleport", "explode", "rapidDupe", "petSpray", "flash", "clean", "corgicannon" });
			return;
		}

	}

}