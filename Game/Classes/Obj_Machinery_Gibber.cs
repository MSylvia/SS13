// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Gibber : Obj_Machinery {

		public bool operating = false;
		public bool dirty = false;
		public double gibtime = 40;
		public dynamic typeofmeat = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Human);
		public double meat_produced = 0;
		public bool ignore_clothing = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 2;
			this.active_power_usage = 500;
			this.icon = "icons/obj/kitchen.dmi";
			this.icon_state = "grinder";
		}

		// Function from file: gibber.dm
		public Obj_Machinery_Gibber ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.overlays.Add( new Image( "icons/obj/kitchen.dmi", "grjam" ) );
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Gibber( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.RefreshParts();
			return;
		}

		// Function from file: gibber.dm
		public void startgibbing( dynamic user = null ) {
			int offset = 0;
			dynamic sourcename = null;
			string sourcejob = null;
			dynamic gibee = null;
			double sourcenutriment = 0;
			double? sourcetotalreagents = null;
			Type gibtype = null;
			ByTable allmeat = null;
			dynamic gibee2 = null;
			dynamic C = null;
			double i = 0;
			dynamic newmeat = null;
			double i2 = 0;
			ByTable nearby_turfs = null;
			Ent_Static meatslab = null;
			double turfs = 0;
			dynamic gibturf = null;

			
			if ( this.operating ) {
				return;
			}

			if ( !Lang13.Bool( this.occupant ) ) {
				this.visible_message( "<span class='italics'>You hear a loud metallic grinding sound.</span>" );
				return;
			}
			this.f_use_power( 1000 );
			this.visible_message( "<span class='italics'>You hear a loud squelchy grinding sound.</span>" );
			GlobalFuncs.playsound( this.loc, "sound/machines/juicer.ogg", 50, 1 );
			this.operating = true;
			this.update_icon();
			offset = ( Rand13.PercentChance( 50 ) ? -2 : 2 );
			Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + offset ).Set( "time", 0.2 ).Set( "loop", 200 ) );
			sourcename = this.occupant.real_name;

			if ( this.occupant is Mob_Living_Carbon_Human ) {
				gibee = this.occupant;
				sourcejob = gibee.job;
			}
			sourcenutriment = this.occupant.nutrition / 15;
			sourcetotalreagents = this.occupant.reagents.total_volume;
			gibtype = typeof(Obj_Effect_Decal_Cleanable_Blood_Gibs);
			allmeat = new ByTable( this.meat_produced );

			if ( this.occupant is Mob_Living_Carbon_Human ) {
				gibee2 = this.occupant;

				if ( Lang13.Bool( gibee2.dna ) && Lang13.Bool( gibee2.dna.species ) ) {
					this.typeofmeat = gibee2.dna.species.meat;
				} else {
					this.typeofmeat = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Human);
				}
			} else if ( this.occupant is Mob_Living_Carbon ) {
				C = this.occupant;
				this.typeofmeat = C.type_of_meat;
				gibtype = C.gib_type;
			}

			foreach (dynamic _a in Lang13.IterateRange( 1, this.meat_produced )) {
				i = _a;
				
				newmeat = Lang13.Call( this.typeofmeat );
				newmeat.name = sourcename + newmeat.name;
				newmeat.subjectname = sourcename;

				if ( Lang13.Bool( sourcejob ) ) {
					newmeat.subjectjob = sourcejob;
				}
				newmeat.reagents.add_reagent( "nutriment", sourcenutriment / this.meat_produced );
				((Reagents)this.occupant.reagents).trans_to( newmeat, Num13.Round( ( sourcetotalreagents ??0) / this.meat_produced, 1 ) );
				allmeat[i] = newmeat;
			}
			GlobalFuncs.add_logs( user, this.occupant, "gibbed" );
			((Mob)this.occupant).death( true );
			((Mob)this.occupant).ghostize();
			GlobalFuncs.qdel( this.occupant );
			Task13.Schedule( ((int)( this.gibtime )), (Task13.Closure)(() => {
				GlobalFuncs.playsound( this.loc, "sound/effects/splat.ogg", 50, 1 );
				this.operating = false;

				foreach (dynamic _c in Lang13.IterateRange( 1, this.meat_produced )) {
					i2 = _c;
					
					nearby_turfs = Map13.FetchInRangeExcludeThis( GlobalFuncs.get_turf( this ), 3 );
					meatslab = allmeat[i2];
					meatslab.loc = this.loc;
					((dynamic)meatslab).throw_at_fast( Rand13.PickFromTable( nearby_turfs ), i2, 3 );

					foreach (dynamic _b in Lang13.IterateRange( 1, this.meat_produced * 3 )) {
						turfs = _b;
						
						gibturf = Rand13.PickFromTable( nearby_turfs );

						if ( Map13.FetchViewers( null, gibturf ).Contains( !gibturf.density && this != null ) ) {
							Lang13.Call( gibtype, gibturf, i2 );
						}
					}
				}
				this.pixel_x = Convert.ToInt32( Lang13.Initial( this, "pixel_x" ) );
				this.operating = false;
				this.update_icon();
				return;
			}));
			return;
		}

		// Function from file: gibber.dm
		public void go_out(  ) {
			this.dropContents();
			this.update_icon();
			return;
		}

		// Function from file: gibber.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic G = null;
			Mob C = null;

			
			if ( A is Obj_Item_Weapon_Grab ) {
				G = A;

				if ( !( G.affecting is Mob_Living_Carbon ) ) {
					user.WriteMsg( "<span class='danger'>This item is not suitable for the gibber!</span>" );
					return null;
				}
				C = G.affecting;

				if ( C.buckled != null || Lang13.Bool( C.buckled_mob ) ) {
					user.WriteMsg( "<span class='warning'>" + C + " is attached to something!</span>" );
					return null;
				}

				if ( C.abiotic( true ) && !this.ignore_clothing ) {
					user.WriteMsg( "<span class='danger'>Subject may not have abiotic items on.</span>" );
					return null;
				}
				((Ent_Static)user).visible_message( "<span class='danger'>" + user + " starts to put " + G.affecting + " into the gibber!</span>" );
				this.add_fingerprint( user );

				if ( GlobalFuncs.do_after( user, this.gibtime, null, this ) && Lang13.Bool( G ) && Lang13.Bool( G.affecting ) && G.affecting == C && !( C.buckled != null ) && !Lang13.Bool( C.buckled_mob ) && !Lang13.Bool( this.occupant ) ) {
					((Ent_Static)user).visible_message( "<span class='danger'>" + user + " stuffs " + G.affecting + " into the gibber!</span>" );

					if ( C.client != null ) {
						C.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
						C.client.eye = this;
					}
					C.loc = this;
					this.occupant = C;
					GlobalFuncs.qdel( G );
					this.update_icon();
				}
			}

			if ( this.default_deconstruction_screwdriver( user, "grinder_open", "grinder", A ) ) {
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( this.default_pry_open( A ) ) {
				return null;
			}

			if ( this.default_unfasten_wrench( user, A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );
			return null;
		}

		// Function from file: gibber.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.operating ) {
				a.WriteMsg( "<span class='danger'>It's locked and running.</span>" );
				return null;
			} else {
				this.startgibbing( a );
			}
			return null;
		}

		// Function from file: gibber.dm
		public override void container_resist(  ) {
			this.go_out();
			return;
		}

		// Function from file: gibber.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: gibber.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( this.dirty ) {
				this.overlays.Add( new Image( "icons/obj/kitchen.dmi", "grbloody" ) );
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !Lang13.Bool( this.occupant ) ) {
				this.overlays.Add( new Image( "icons/obj/kitchen.dmi", "grjam" ) );
			} else if ( this.operating ) {
				this.overlays.Add( new Image( "icons/obj/kitchen.dmi", "gruse" ) );
			} else {
				this.overlays.Add( new Image( "icons/obj/kitchen.dmi", "gridle" ) );
			}
			return null;
		}

		// Function from file: gibber.dm
		public override void RefreshParts(  ) {
			double gib_time = 0;
			Obj_Item_Weapon_StockParts_MatterBin B = null;
			Obj_Item_Weapon_StockParts_Manipulator M = null;

			gib_time = 40;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				B = _a;
				
				this.meat_produced += Convert.ToDouble( B.rating * 3 );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M = _b;
				
				gib_time -= Convert.ToDouble( M.rating * 5 );
				this.gibtime = gib_time;

				if ( Convert.ToDouble( M.rating ) >= 2 ) {
					this.ignore_clothing = true;
				}
			}
			return;
		}

		// Function from file: gibber.dm
		[Verb]
		[VerbInfo( name: "empty gibber", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void eject(  ) {
			
			if ( Task13.User.incapacitated() ) {
				return;
			}
			this.go_out();
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}