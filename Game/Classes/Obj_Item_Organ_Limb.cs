// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Organ_Limb : Obj_Item_Organ {

		public int body_part = 0;
		public double brutestate = 0;
		public double burnstate = 0;
		public double brute_dam = 0;
		public double burn_dam = 0;
		public double max_damage = 0;
		public ByTable embedded_objects = new ByTable();

		public Obj_Item_Organ_Limb ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: organ_external.dm
		public string getDisplayName(  ) {
			
			switch ((string)( this.name )) {
				case "l_leg":
					return "left leg";
					break;
				case "r_leg":
					return "right leg";
					break;
				case "l_arm":
					return "left arm";
					break;
				case "r_arm":
					return "right arm";
					break;
				case "chest":
					return "chest";
					break;
				case "head":
					return "head";
					break;
				default:
					return this.name;
					break;
			}
			return null;
		}

		// Function from file: organ_external.dm
		public bool update_organ_icon(  ) {
			double tbrute = 0;
			double tburn = 0;

			
			if ( this.status == 1 ) {
				tbrute = Num13.Round( this.brute_dam / this.max_damage * 3, 1 );
				tburn = Num13.Round( this.burn_dam / this.max_damage * 3, 1 );

				if ( tbrute != this.brutestate || tburn != this.burnstate ) {
					this.brutestate = tbrute;
					this.burnstate = tburn;
					return true;
				}
				return false;
			}
			return false;
		}

		// Function from file: organ_external.dm
		public double get_damage(  ) {
			return this.brute_dam + this.burn_dam;
		}

		// Function from file: organ_external.dm
		public bool heal_damage( dynamic brute = null, dynamic burn = null, bool robotic = false ) {
			
			if ( robotic && this.status != 2 ) {
				brute = Num13.MaxInt( 0, Convert.ToInt32( brute - 3 ) );
				burn = Num13.MaxInt( 0, Convert.ToInt32( burn - 3 ) );
			}

			if ( !robotic && this.status == 2 ) {
				brute = Num13.MaxInt( 0, Convert.ToInt32( brute - 3 ) );
				burn = Num13.MaxInt( 0, Convert.ToInt32( burn - 3 ) );
			}
			this.brute_dam = Num13.MaxInt( ((int)( this.brute_dam - Convert.ToDouble( brute ) )), 0 );
			this.burn_dam = Num13.MaxInt( ((int)( this.burn_dam - Convert.ToDouble( burn ) )), 0 );
			return this.update_organ_icon();
		}

		// Function from file: organ_external.dm
		public bool take_damage( dynamic brute = null, dynamic burn = null ) {
			double can_inflict = 0;

			
			if ( Lang13.Bool( this.owner ) && ( this.owner.status_flags & 4096 ) != 0 ) {
				return false;
			}
			brute = Num13.MaxInt( Convert.ToInt32( brute ), 0 );
			burn = Num13.MaxInt( Convert.ToInt32( burn ), 0 );

			if ( this.status == 2 ) {
				brute = Num13.MaxInt( 0, Convert.ToInt32( brute - 5 ) );
				burn = Num13.MaxInt( 0, Convert.ToInt32( burn - 4 ) );
			}
			can_inflict = this.max_damage - ( this.brute_dam + this.burn_dam );

			if ( !( can_inflict != 0 ) ) {
				return false;
			}

			if ( Convert.ToDouble( brute + burn ) < can_inflict ) {
				this.brute_dam += Convert.ToDouble( brute );
				this.burn_dam += Convert.ToDouble( burn );
			} else if ( Convert.ToDouble( brute ) > 0 ) {
				
				if ( Convert.ToDouble( burn ) > 0 ) {
					brute = Num13.Round( Convert.ToDouble( brute / ( brute + burn ) * can_inflict ), 1 );
					burn = can_inflict - Convert.ToDouble( brute );
					this.brute_dam += Convert.ToDouble( brute );
					this.burn_dam += Convert.ToDouble( burn );
				} else {
					this.brute_dam += can_inflict;
				}
			} else if ( Convert.ToDouble( burn ) > 0 ) {
				this.burn_dam += can_inflict;
			} else {
				return false;
			}
			return this.update_organ_icon();
		}

	}

}