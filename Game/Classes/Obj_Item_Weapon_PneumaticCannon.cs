// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_PneumaticCannon : Obj_Item_Weapon {

		public double maxWeightClass = 20;
		public double loadedWeightClass = 0;
		public dynamic tank = null;
		public int gasPerThrow = 3;
		public ByTable loadedItems = new ByTable();
		public int pressureSetting = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 4;
			this.force = 8;
			this.attack_verb = new ByTable(new object [] { "bludgeoned", "smashed", "beaten" });
			this.item_state = "bulldog";
			this.lefthand_file = "icons/mob/inhands/guns_lefthand.dmi";
			this.righthand_file = "icons/mob/inhands/guns_righthand.dmi";
			this.icon = "icons/obj/pneumaticCannon.dmi";
			this.icon_state = "pneumaticCannon";
		}

		public Obj_Item_Weapon_PneumaticCannon ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pneumaticCannon.dm
		public void update_icons(  ) {
			this.overlays.Cut();

			if ( !Lang13.Bool( this.tank ) ) {
				return;
			}
			this.overlays.Add( new Image( "icons/obj/pneumaticCannon.dmi", "" + this.tank.icon_state ) );
			this.update_icon();
			return;
		}

		// Function from file: pneumaticCannon.dm
		public void updateTank( dynamic thetank = null, bool? removing = null, dynamic user = null ) {
			removing = removing ?? false;

			
			if ( removing == true ) {
				
				if ( !Lang13.Bool( this.tank ) ) {
					return;
				}
				user.WriteMsg( new Txt( "<span class='notice'>You detach " ).the( thetank ).item().str( " from " ).the( this ).item().str( ".</span>" ).ToString() );
				this.tank.loc = GlobalFuncs.get_turf( user );
				((Mob)user).put_in_hands( this.tank );
				this.tank = null;
			}

			if ( !( removing == true ) ) {
				
				if ( Lang13.Bool( this.tank ) ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " already has a tank.</span>" ).ToString() );
					return;
				}

				if ( !((Mob)user).unEquip( thetank ) ) {
					return;
				}
				user.WriteMsg( new Txt( "<span class='notice'>You hook " ).the( thetank ).item().str( " up to " ).the( this ).item().str( ".</span>" ).ToString() );
				this.tank = thetank;
				thetank.loc = this;
			}
			this.update_icons();
			return;
		}

		// Function from file: pneumaticCannon.dm
		public void Fire( dynamic user = null, dynamic target = null ) {
			bool discharge = false;
			ByTable possible_targets = null;
			Obj_Item ITD = null;

			
			if ( !( user is Mob_Living_Carbon_Human ) && !Lang13.Bool( target ) ) {
				return;
			}
			discharge = false;

			if ( GlobalFuncs.is_in_gang( user, "Sleeping Carp" ) ) {
				user.WriteMsg( "<span class='warning'>Use of ranged weaponry would bring dishonor to the clan.</span>" );
				return;
			}

			if ( !( this.loadedItems != null ) || !( this.loadedWeightClass != 0 ) ) {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " has nothing loaded.</span>" ).ToString() );
				return;
			}

			if ( !Lang13.Bool( this.tank ) ) {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " can't fire without a source of gas.</span>" ).ToString() );
				return;
			}

			if ( Lang13.Bool( this.tank ) && !Lang13.Bool( this.tank.air_contents.remove( this.gasPerThrow * this.pressureSetting ) ) ) {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " lets out a weak hiss and doesn't react!</span>" ).ToString() );
				return;
			}

			if ( Lang13.Bool( user.disabilities & 256 ) && Rand13.PercentChance( 75 ) ) {
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " loses their grip on " + this + ", causing it to go off!</span>", "<span class='userdanger'>" + this + " slips out of your hands and goes off!</span>" );
				user.drop_item();

				if ( Rand13.PercentChance( 10 ) ) {
					target = GlobalFuncs.get_turf( user );
				} else {
					possible_targets = Map13.FetchInRange( this, 3 );
					target = Rand13.PickFromTable( possible_targets );
				}
				discharge = true;
			}

			if ( !discharge ) {
				((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " fires " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='danger'>You fire " ).the( this ).item().str( "!</span>" ).ToString() );
			}
			GlobalFuncs.add_logs( user, target, "fired at", this );
			GlobalFuncs.playsound( this.loc, "sound/weapons/sonic_jackhammer.ogg", 50, 1 );

			foreach (dynamic _a in Lang13.Enumerate( this.loadedItems, typeof(Obj_Item) )) {
				ITD = _a;
				
				this.loadedItems.Remove( ITD );
				this.loadedWeightClass -= Convert.ToDouble( ITD.w_class );
				ITD.throw_speed = this.pressureSetting * 2;
				ITD.loc = GlobalFuncs.get_turf( this );
				ITD.throw_at_fast( target, this.pressureSetting * 5, this.pressureSetting * 2, user );
			}

			if ( this.pressureSetting >= 3 && Lang13.Bool( user ) ) {
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " is thrown down by the force of the cannon!</span>", "<span class='userdanger'>" + this + " slams into your shoulder, knocking you down!" );
				((Mob)user).Weaken( 3 );
			}
			return;
		}

		// Function from file: pneumaticCannon.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			
			if ( target is Obj_Item_Weapon_Storage ) {
				return base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );
			}

			if ( target is Obj_Structure_Closet ) {
				return base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );
			}

			if ( target is Obj_Structure_Rack ) {
				return base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );
			}

			if ( !( user is Mob_Living_Carbon_Human ) ) {
				return base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );
			}
			this.Fire( user, target );
			return false;
		}

		// Function from file: pneumaticCannon.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic IW = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Weapon_Tank_Internals && !Lang13.Bool( this.tank ) ) {
				
				if ( A is Obj_Item_Weapon_Tank_Internals_EmergencyOxygen ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( A ).item().str( " is too small for " ).the( this ).item().str( ".</span>" ).ToString() );
					return null;
				}
				this.updateTank( A, false, user );
				return null;
			}

			if ( A.type == this.type ) {
				user.WriteMsg( "<span class='warning'>You're fairly certain that putting a pneumatic cannon inside another pneumatic cannon would cause a spacetime disruption.</span>" );
				return null;
			}

			if ( A is Obj_Item_Weapon_Wrench ) {
				
				switch ((int)( this.pressureSetting )) {
					case 1:
						this.pressureSetting = 2;
						break;
					case 2:
						this.pressureSetting = 3;
						break;
					case 3:
						this.pressureSetting = 1;
						break;
				}
				user.WriteMsg( new Txt( "<span class='notice'>You tweak " ).the( this ).item().str( "'s pressure output to " ).item( this.pressureSetting ).str( ".</span>" ).ToString() );
				return null;
			}

			if ( A is Obj_Item_Weapon_Screwdriver && Lang13.Bool( this.tank ) ) {
				this.updateTank( this.tank, true, user );
				return null;
			}

			if ( this.loadedWeightClass >= this.maxWeightClass ) {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " can't hold any more items!</span>" ).ToString() );
				return null;
			}

			if ( A is Obj_Item ) {
				IW = A;

				if ( this.loadedWeightClass + Convert.ToDouble( IW.w_class ) > this.maxWeightClass ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( IW ).item().str( " won't fit into " ).the( this ).item().str( "!</span>" ).ToString() );
					return null;
				}

				if ( Convert.ToDouble( IW.w_class ) > Convert.ToDouble( this.w_class ) ) {
					user.WriteMsg( new Txt( "<span class='warning'>" ).The( IW ).item().str( " is too large to fit into " ).the( this ).item().str( "!</span>" ).ToString() );
					return null;
				}

				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				user.WriteMsg( new Txt( "<span class='notice'>You load " ).the( IW ).item().str( " into " ).the( this ).item().str( ".</span>" ).ToString() );
				this.loadedItems.Add( IW );
				this.loadedWeightClass += Convert.ToDouble( IW.w_class );
				IW.loc = this;
				return null;
			}
			return null;
		}

		// Function from file: pneumaticCannon.dm
		public override double examine( dynamic user = null ) {
			Obj_Item I = null;

			base.examine( (object)(user) );

			if ( !( Map13.GetDistance( user, this ) <= 1 ) ) {
				user.WriteMsg( "<span class='notice'>You'll need to get closer to see any more.</span>" );
				return 0;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loadedItems, typeof(Obj_Item) )) {
				I = _a;
				
				user.WriteMsg( new Txt( "<span class='info'> " ).icon( I ).str( " It has " ).the( I ).item().str( " loaded.</span>" ).ToString() );
			}

			if ( Lang13.Bool( this.tank ) ) {
				user.WriteMsg( new Txt( "<span class='notice'> " ).icon( this.tank ).str( " It has " ).the( this.tank ).item().str( " mounted onto it.</span>" ).ToString() );
			}
			return 0;
		}

	}

}