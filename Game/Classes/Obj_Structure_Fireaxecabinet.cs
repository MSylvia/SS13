// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Fireaxecabinet : Obj_Structure {

		public dynamic fireaxe = new Obj_Item_Weapon_Twohanded_Fireaxe();
		public bool locked = true;
		public bool open = false;
		public double glass_hp = 60;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/wallmounts.dmi";
			this.icon_state = "fireaxe";
		}

		// Function from file: fireaxe.dm
		public Obj_Structure_Fireaxecabinet ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: fireaxe.dm
		public void toggle_lock( dynamic user = null ) {
			user.WriteMsg( "<span class = 'caution'> Resetting circuitry...</span>" );
			GlobalFuncs.playsound( this, "sound/machines/locktoggle.ogg", 50, 1 );

			if ( GlobalFuncs.do_after( user, 20, null, this ) ) {
				user.WriteMsg( "<span class='caution'>You " + ( this.locked ? "disable" : "re-enable" ) + " the locking modules.</span>" );
				this.locked = !this.locked;
				this.update_icon();
			}
			return;
		}

		// Function from file: fireaxe.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( Lang13.Bool( this.fireaxe ) ) {
				this.overlays.Add( "axe" );
			}

			if ( !this.open ) {
				
				dynamic _a = this.glass_hp; // Was a switch-case, sorry for the mess.
				if ( Double.NegativeInfinity<=_a&&_a<=0 ) {
					this.overlays.Add( "glass4" );
				} else if ( 1<=_a&&_a<=20 ) {
					this.overlays.Add( "glass3" );
				} else if ( 21<=_a&&_a<=40 ) {
					this.overlays.Add( "glass2" );
				} else if ( 41<=_a&&_a<=59 ) {
					this.overlays.Add( "glass1" );
				} else if ( _a==60 ) {
					this.overlays.Add( "glass" );
				}

				if ( this.locked ) {
					this.overlays.Add( "locked" );
				} else {
					this.overlays.Add( "unlocked" );
				}
			} else {
				this.overlays.Add( "glass_raised" );
			}
			return null;
		}

		// Function from file: fireaxe.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.toggle_lock( user );
			return null;
		}

		// Function from file: fireaxe.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Mob_Living_Carbon_Monkey ) {
				this.attack_hand( a );
			}
			return null;
		}

		// Function from file: fireaxe.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( this.open || this.glass_hp <= 0 ) {
				
				if ( Lang13.Bool( this.fireaxe ) ) {
					((Mob)a).put_in_hands( this.fireaxe );
					this.fireaxe = null;
					a.WriteMsg( "<span class='caution'>You take the fire axe from the " + this.name + ".</span>" );
					this.add_fingerprint( a );
					this.update_icon();
					return null;
				}
			}

			if ( this.locked ) {
				a.WriteMsg( "<span class='warning'> The " + this.name + " won't budge!</span>" );
				return null;
			} else {
				this.open = !this.open;
				this.update_icon();
				return null;
			}
		}

		// Function from file: fireaxe.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Lang13.Bool( this.fireaxe ) ) {
				this.fireaxe.loc = this.loc;
			}
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: fireaxe.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( P.damage_type == "brute" || P.damage_type == "fire" ) {
				
				if ( Lang13.Bool( P.damage ) ) {
					this.glass_hp -= Convert.ToDouble( P.damage );

					if ( this.glass_hp <= 0 ) {
						GlobalFuncs.playsound( this, "sound/effects/Glassbr3.ogg", 100, 1 );
					}
				}
				this.update_icon();
			}
			return null;
		}

		// Function from file: fireaxe.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) && Lang13.Bool( this.fireaxe ) ) {
						this.fireaxe.loc = this.loc;
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					return false;
					break;
			}
			return false;
		}

		// Function from file: fireaxe.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic F = null;
			dynamic W = null;

			
			if ( user is Mob_Living_Silicon_Robot || A is Obj_Item_Device_Multitool ) {
				this.toggle_lock( user );
				return null;
			}

			if ( this.open || this.glass_hp <= 0 ) {
				
				if ( A is Obj_Item_Weapon_Twohanded_Fireaxe && !Lang13.Bool( this.fireaxe ) ) {
					F = A;

					if ( F.wielded ) {
						user.WriteMsg( "<span class='warning'>Unwield the " + F.name + " first.</span>" );
						return null;
					}

					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					this.fireaxe = F;
					this.contents.Add( F );
					user.WriteMsg( "<span class='caution'>You place the " + F.name + " back in the " + this.name + ".</span>" );
					this.update_icon();
					return null;
				} else if ( this.glass_hp > 0 ) {
					this.__CallVerb("Open/Close" );
				}
			} else if ( A is Obj_Item_Weapon ) {
				((Mob)user).changeNext_move( 8 );
				W = A;
				((Ent_Dynamic)user).do_attack_animation( this );
				GlobalFuncs.playsound( this, "sound/effects/Glasshit.ogg", 100, 1 );

				if ( Convert.ToDouble( W.force ) >= 10 ) {
					this.glass_hp -= Convert.ToDouble( W.force );

					if ( this.glass_hp <= 0 ) {
						GlobalFuncs.playsound( this, "sound/effects/Glassbr3.ogg", 100, 1 );
					}
					this.update_icon();
				} else {
					user.WriteMsg( "<span class='warning'>The " + this.name + "'s protective glass glances off the hit.</span>" );
				}
			}
			return null;
		}

		// Function from file: fireaxe.dm
		[Verb]
		[VerbInfo( name: "Open/Close", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void toggle_open(  ) {
			
			if ( this.locked ) {
				Task13.User.WriteMsg( "<span class='warning'> The " + this.name + " won't budge!</span>" );
				return;
			} else {
				this.open = !this.open;
				this.update_icon();
				return;
			}
		}

	}

}