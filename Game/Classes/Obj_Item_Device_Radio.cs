// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Radio : Obj_Item_Device {

		public dynamic on = 1;
		public dynamic last_transmission = null;
		public double? frequency = 1459;
		public int? traitor_frequency = 0;
		public int canhear_range = 3;
		public dynamic patch_link = null;
		public Wires_Radio wires = null;
		public ByTable secure_radio_connections = null;
		public bool prison_radio = false;
		public bool b_stat = false;
		public double? broadcasting = 0;
		public double? listening = 1;
		public bool translate_binary = false;
		public bool translate_hive = false;
		public bool freerange = false;
		public ByTable channels = new ByTable();
		public dynamic keyslot = null;
		public bool subspace_transmission = false;
		public bool syndie = false;
		public bool centcom = false;
		public double? maxf = 1499;
		public bool freqlock = false;
		public int emped = 0;
		public int TRANSMISSION_DELAY = 5;
		public bool FREQ_LISTENING = true;
		public bool? command = false;
		public bool use_command = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "walkietalkie";
			this.flags = 80;
			this.slot_flags = 512;
			this.languages = 9;
			this.throw_speed = 3;
			this.w_class = 2;
			this.materials = new ByTable().Set( "$metal", 75 ).Set( "$glass", 25 );
			this.icon = "icons/obj/radio.dmi";
			this.icon_state = "walkietalkie";
		}

		// Function from file: radio.dm
		public Obj_Item_Device_Radio ( dynamic loc = null ) : base( (object)(loc) ) {
			this.wires = new Wires_Radio( this );

			if ( this.prison_radio ) {
				this.wires.CutWireIndex( GlobalVars.WIRE_TRANSMIT );
			}
			this.secure_radio_connections = new ByTable();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.SSradio != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: radio.dm
		public override double emp_act( int severity = 0 ) {
			int curremp = 0;
			dynamic ch_name = null;

			this.emped++;
			curremp = this.emped;

			if ( Lang13.Bool( this.listening ) && this.loc is Mob ) {
				((dynamic)this.loc).WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( " overloads.</span>" ).ToString() );
			}
			this.broadcasting = 0;
			this.listening = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				ch_name = _a;
				
				this.channels[ch_name] = 0;
			}
			this.on = 0;
			Task13.Schedule( 200, (Task13.Closure)(() => {
				
				if ( this.emped == curremp ) {
					this.emped = 0;

					if ( !( this is Obj_Item_Device_Radio_Intercom ) ) {
						this.on = 1;
					}
				}
				return;
			}));
			base.emp_act( severity );
			return 0;
		}

		// Function from file: radio.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			((Mob)user).set_machine( this );

			if ( !( A is Obj_Item_Weapon_Screwdriver ) ) {
				return null;
			}
			this.b_stat = !this.b_stat;

			if ( !( this is Obj_Item_Device_Radio_Beacon ) ) {
				
				if ( this.b_stat ) {
					user.show_message( "<span class='notice'>The radio can now be attached and modified!</span>" );
				} else {
					user.show_message( "<span class='notice'>The radio can no longer be modified or attached!</span>" );
				}
				this.updateDialog();
				this.add_fingerprint( user );
				return null;
			} else {
				return null;
			}
		}

		// Function from file: radio.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.b_stat ) {
				user.WriteMsg( "<span class='notice'>" + this.name + " can be attached and modified.</span>" );
			} else {
				user.WriteMsg( "<span class='notice'>" + this.name + " can not be modified or attached.</span>" );
			}
			return 0;
		}

		// Function from file: radio.dm
		public override string Hear( string message = null, dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null, ByTable spans = null ) {
			
			if ( Lang13.Bool( radio_freq ) ) {
				return null;
			}

			if ( Lang13.Bool( this.broadcasting ) ) {
				
				if ( Map13.GetDistance( this, speaker ) <= this.canhear_range ) {
					this.talk_into( speaker, raw_message, null, spans );
				}
			}
			return null;
		}

		// Function from file: radio.dm
		public override void talk_into( dynamic M = null, dynamic input = null, dynamic channel = null, ByTable spans = null ) {
			dynamic freq = null;
			double? freqnum = null;
			dynamic position = null;
			string real_name = null;
			string mobkey = null;
			bool voicemask = false;
			dynamic voice = null;
			dynamic speaker = null;
			string jobname = null;
			Data_Record findjob = null;
			dynamic B = null;
			Signal signal = null;
			Signal signal2 = null;
			Obj_Machinery_Telecomms_Receiver R = null;
			Obj_Machinery_Telecomms_Allinone R2 = null;
			int? filter_type = null;
			Signal signal3 = null;
			Obj_Machinery_Telecomms_Receiver R3 = null;

			
			if ( !Lang13.Bool( this.on ) ) {
				return;
			}

			if ( !Lang13.Bool( M ) || !Lang13.Bool( input ) ) {
				return;
			}

			if ( this.isWireCut( GlobalVars.WIRE_TRANSMIT ) != 0 ) {
				return;
			}

			if ( !((Ent_Dynamic)M).IsVocal() ) {
				return;
			}

			if ( this.use_command ) {
				spans.Or( "commmand_headset" );
			}

			if ( Lang13.Bool( channel ) && this.channels != null && this.channels.len > 0 ) {
				
				if ( channel == "department" ) {
					channel = this.channels[1];
				}
				freq = this.secure_radio_connections[channel];

				if ( !Lang13.Bool( this.channels[channel] ) ) {
					return;
				}
			} else {
				freq = this.frequency;
				channel = null;
			}
			freqnum = String13.ParseNumber( freq );
			position = GlobalFuncs.get_turf( this );
			real_name = M.name;
			mobkey = "none";
			voicemask = false;
			voice = ((Ent_Dynamic)M).GetVoice();

			if ( M is Mob ) {
				speaker = M;
				real_name = speaker.real_name;

				if ( Lang13.Bool( speaker.client ) ) {
					mobkey = speaker.key;
				}
			}

			if ( M is Mob_Living_Carbon_Human ) {
				findjob = GlobalFuncs.find_record( "name", voice, GlobalVars.data_core.general );

				if ( voice != real_name ) {
					voicemask = true;
				}

				if ( findjob != null ) {
					jobname = findjob.fields["rank"];
				} else {
					jobname = "Unknown";
				}
			} else if ( M is Mob_Living_Carbon ) {
				jobname = "No id";
			} else if ( M is Mob_Living_Silicon_Ai ) {
				jobname = "AI";
			} else if ( M is Mob_Living_Silicon_Robot ) {
				B = M;
				jobname = "" + B.designation + " Cyborg";
			} else if ( M is Mob_Living_Silicon_Pai ) {
				jobname = "Personal AI";
			} else if ( M is Obj ) {
				jobname = "Machine";
			} else {
				jobname = "Unknown";
			}

			if ( freqnum == GlobalVars.CENTCOM_FREQ && this.centcom ) {
				signal = new Signal();
				signal.transmission_method = 2;
				signal.data = new ByTable()
					.Set( "mob", M )
					.Set( "mobtype", M.type )
					.Set( "realname", real_name )
					.Set( "name", voice )
					.Set( "job", jobname )
					.Set( "key", mobkey )
					.Set( "vmask", voicemask )
					.Set( "compression", 0 )
					.Set( "message", input )
					.Set( "radio", this )
					.Set( "slow", 0 )
					.Set( "traffic", 0 )
					.Set( "type", 0 )
					.Set( "server", null )
					.Set( "reject", 0 )
					.Set( "level", 0 )
					.Set( "languages", this.languages )
					.Set( "spans", spans )
					.Set( "verb_say", M.verb_say )
					.Set( "verb_ask", M.verb_ask )
					.Set( "verb_exclaim", M.verb_exclaim )
					.Set( "verb_yell", M.verb_yell )
				;
				signal.frequency = freqnum;
				GlobalFuncs.Broadcast_Message( M, voicemask, this, input, voice, jobname, real_name, 5, Lang13.Bool( signal.data["compression"] ), new ByTable(new object [] { position.z, 0 }), freq, spans, this.verb_say, this.verb_ask, this.verb_exclaim, this.verb_yell );
				return;
			}

			if ( this.subspace_transmission ) {
				signal2 = new Signal();
				signal2.transmission_method = 2;
				signal2.data = new ByTable()
					.Set( "mob", M )
					.Set( "mobtype", M.type )
					.Set( "realname", real_name )
					.Set( "name", voice )
					.Set( "job", jobname )
					.Set( "key", mobkey )
					.Set( "vmask", voicemask )
					.Set( "compression", Rand13.Int( 35, 65 ) )
					.Set( "message", input )
					.Set( "radio", this )
					.Set( "slow", 0 )
					.Set( "traffic", 0 )
					.Set( "type", 0 )
					.Set( "server", null )
					.Set( "reject", 0 )
					.Set( "level", position.z )
					.Set( "languages", M.languages )
					.Set( "spans", spans )
					.Set( "verb_say", M.verb_say )
					.Set( "verb_ask", M.verb_ask )
					.Set( "verb_exclaim", M.verb_exclaim )
					.Set( "verb_yell", M.verb_yell )
				;
				signal2.frequency = freq;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Receiver) )) {
					R = _a;
					
					R.receive_signal( signal2 );
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Allinone) )) {
					R2 = _b;
					
					R2.receive_signal( signal2 );
				}
				return;
			}
			filter_type = 2;
			signal3 = new Signal();
			signal3.transmission_method = 2;
			signal3.data = new ByTable()
				.Set( "mob", M )
				.Set( "mobtype", M.type )
				.Set( "realname", real_name )
				.Set( "name", voice )
				.Set( "job", jobname )
				.Set( "key", mobkey )
				.Set( "vmask", voicemask )
				.Set( "compression", 0 )
				.Set( "message", input )
				.Set( "radio", this )
				.Set( "slow", 0 )
				.Set( "traffic", 0 )
				.Set( "type", 0 )
				.Set( "server", null )
				.Set( "reject", 0 )
				.Set( "level", position.z )
				.Set( "languages", this.languages )
				.Set( "spans", spans )
				.Set( "verb_say", M.verb_say )
				.Set( "verb_ask", M.verb_ask )
				.Set( "verb_exclaim", M.verb_exclaim )
				.Set( "verb_yell", M.verb_yell )
			;
			signal3.frequency = freqnum;

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Receiver) )) {
				R3 = _c;
				
				R3.receive_signal( signal3 );
			}
			Task13.Schedule( 20, (Task13.Closure)(() => {
				
				if ( Lang13.Bool( signal3.data["level"].Contains( Lang13.Bool( signal3.data["done"] ) && Lang13.Bool( position.z ) ) ) ) {
					return;
				}
				GlobalFuncs.Broadcast_Message( M, voicemask, this, input, voice, jobname, real_name, filter_type, Lang13.Bool( signal3.data["compression"] ), new ByTable(new object [] { position.z }), freq, spans, this.verb_say, this.verb_ask, this.verb_exclaim, this.verb_yell );
				return;
			}));
			return;
		}

		// Function from file: radio.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? new_frequency = null;
			dynamic chan_name = null;

			
			if ( Task13.User.stat != 0 && !GlobalFuncs.IsAdminGhost( Task13.User ) || !Lang13.Bool( this.on ) ) {
				return null;
			}

			if ( !( Task13.User is Mob_Living_Silicon || GlobalFuncs.IsAdminGhost( Task13.User ) || Task13.User.contents.Find( this ) != 0 || Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile ) ) {
				Interface13.Browse( Task13.User, null, "window=radio" );
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["freq"] ) ) {
				
				if ( !this.freqlock ) {
					new_frequency = ( this.frequency ??0) + ( String13.ParseNumber( href_list["freq"] ) ??0);

					if ( !this.freerange || ( this.frequency ??0) < 1200 || ( this.frequency ??0) > 1600 ) {
						new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
					}
					this.set_frequency( new_frequency );

					if ( this.hidden_uplink != null ) {
						
						if ( this.hidden_uplink.check_trigger( Task13.User, this.frequency, this.traitor_frequency ) ) {
							Interface13.Browse( Task13.User, null, "window=radio" );
							return null;
						}
					}
				}
			} else if ( Lang13.Bool( href_list["talk"] ) ) {
				this.broadcasting = String13.ParseNumber( href_list["talk"] );
			} else if ( Lang13.Bool( href_list["listen"] ) ) {
				chan_name = href_list["ch_name"];

				if ( !Lang13.Bool( chan_name ) ) {
					this.listening = String13.ParseNumber( href_list["listen"] );
				} else if ( Lang13.Bool( this.channels[chan_name] & 1 ) ) {
					this.channels[chan_name] &= 65534;
				} else {
					this.channels[chan_name] |= GlobalVars.FREQ_LISTENING;
				}
			} else if ( Lang13.Bool( href_list["bold"] ) ) {
				this.use_command = !this.use_command;
			}

			if ( !Lang13.Bool( this.master ) ) {
				
				if ( this.loc is Mob ) {
					this.interact( this.loc );
				} else {
					this.updateDialog();
				}
			} else if ( this.master.loc is Mob ) {
				this.interact( this.master.loc );
			} else {
				this.updateDialog();
			}
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: radio.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			dynamic ch_name = null;
			Browser popup = null;

			
			if ( !Lang13.Bool( this.on ) ) {
				return null;
			}

			if ( this.active_uplink_check( user ) ) {
				return null;
			}
			dat = "";

			if ( !( this is Obj_Item_Device_Radio_Headset ) ) {
				dat += "\n				<b>Microphone:</b> " + ( Lang13.Bool( this.broadcasting ) ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";talk=0'>Engaged</A>" ).ToString() : new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";talk=1'>Disengaged</A>" ).ToString() ) + "<BR>\n				<b>Speaker:</b> " + ( Lang13.Bool( this.listening ) ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=0'>Engaged</A>" ).ToString() : new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=1'>Disengaged</A>" ).ToString() ) + "<BR>\n				";
			} else {
				dat += "<b>Power:</b> " + ( Lang13.Bool( this.listening ) ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=0'>Engaged</A>" ).ToString() : new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=1'>Disengaged</A>" ).ToString() ) + "<BR>";
			}

			if ( this.freqlock ) {
				dat += "<b>Frequency:</b> <span class='bad'>LOCKED</span><BR>";
			} else {
				dat += new Txt( "\n					<b>Frequency:</b>\n					<A href='byond://?src=" ).Ref( this ).str( ";freq=-10'>-</A>\n					<A href='byond://?src=" ).Ref( this ).str( ";freq=-2'>-</A>\n					" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "\n					<A href='byond://?src=" ).Ref( this ).str( ";freq=2'>+</A>\n					<A href='byond://?src=" ).Ref( this ).str( ";freq=10'>+</A><BR>\n					" ).ToString();
			}

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				ch_name = _a;
				
				dat += this.text_sec_channel( ch_name, this.channels[ch_name] );
			}
			dat += this.text_wires();

			if ( this.command == true ) {
				dat += "<b>High Volume Mode:</b> " + ( this.use_command ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";bold=1'>Engaged</A>" ).ToString() : new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";bold=1'>Disengaged</A>" ).ToString() ) + "<BR>";
			}
			popup = new Browser( user, "radio", "" + this );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: radio.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			((Mob)user).set_machine( this );
			this.interact( user );
			return null;
		}

		// Function from file: radio.dm
		public override void initialize(  ) {
			dynamic ch_name = null;

			
			if ( this.freerange ) {
				
				if ( ( this.frequency ??0) < 1200 || ( this.frequency ??0) > 1600 ) {
					this.frequency = GlobalFuncs.sanitize_frequency( this.frequency );
				}
			} else if ( ( this.frequency ??0) < 1441 || ( this.frequency ??0) > ( this.maxf ??0) ) {
				this.frequency = GlobalFuncs.sanitize_frequency( this.frequency );
			}
			this.set_frequency( this.frequency );

			foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
				ch_name = _a;
				
				this.secure_radio_connections[ch_name] = GlobalFuncs.add_radio( this, Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name] ) );
			}
			return;
		}

		// Function from file: radio.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			Mob M = null;

			M = Task13.User;

			if ( !( over is Obj_Screen ) && this.loc == M ) {
				return this.attack_self( M );
			}
			return null;
		}

		// Function from file: radio.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.wires );
			this.wires = null;
			GlobalFuncs.remove_radio_all( this );
			this.patch_link = null;
			this.keyslot = null;
			return base.Destroy();
		}

		// Function from file: radio.dm
		public virtual ByTable send_hear( dynamic freq = null, int? level = null ) {
			int range = 0;

			range = this.receive_range( freq, level );

			if ( range > -1 ) {
				return GlobalFuncs.get_hearers_in_view( this.canhear_range, this );
			}
			return null;
		}

		// Function from file: radio.dm
		public virtual int receive_range( dynamic freq = null, dynamic level = null, bool? AIuser = null ) {
			dynamic position = null;
			bool accept = false;
			dynamic ch_name = null;

			
			if ( this.isWireCut( GlobalVars.WIRE_RECEIVE ) != 0 ) {
				return -1;
			}

			if ( !Lang13.Bool( this.listening ) ) {
				return -1;
			}

			if ( !Lang13.Bool( level.Contains( 0 ) ) ) {
				position = GlobalFuncs.get_turf( this );

				if ( !Lang13.Bool( position ) || !Lang13.Bool( level.Contains( position.z ) ) ) {
					return -1;
				}
			}

			if ( freq == GlobalVars.SYND_FREQ ) {
				
				if ( !this.syndie ) {
					return -1;
				}
			}

			if ( freq == GlobalVars.CENTCOM_FREQ ) {
				
				if ( !this.centcom ) {
					return -1;
				}
			}

			if ( !Lang13.Bool( this.on ) ) {
				return -1;
			}

			if ( !Lang13.Bool( freq ) ) {
				
				if ( !Lang13.Bool( this.listening ) ) {
					return -1;
				}
			} else {
				accept = freq == this.frequency && Lang13.Bool( this.listening );

				if ( !accept ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
						ch_name = _a;
						

						if ( Lang13.Bool( this.channels[ch_name] & 1 ) ) {
							
							if ( Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name] ) == String13.ParseNumber( freq ) || this.syndie ) {
								accept = true;
								break;
							}
						}
					}
				}

				if ( !accept ) {
					return -1;
				}
			}
			return this.canhear_range;
		}

		// Function from file: radio.dm
		public int isWireCut( double? index = null ) {
			return this.wires.IsIndexCut( index );
		}

		// Function from file: radio.dm
		public string text_sec_channel( dynamic chan_name = null, dynamic chan_stat = null ) {
			bool list = false;

			list = !( !Lang13.Bool( chan_stat & 1 ) );
			return new Txt( "\n			<B>" ).item( chan_name ).str( "</B>: <A href='byond://?src=" ).Ref( this ).str( ";ch_name=" ).item( chan_name ).str( ";listen=" ).item( !list ).str( "'>" ).item( ( list ? "Engaged" : "Disengaged" ) ).str( "</A><BR>\n			" ).ToString();
		}

		// Function from file: radio.dm
		public string text_wires(  ) {
			
			if ( this.b_stat ) {
				return this.wires.GetInteractWindow();
			}
			return null;
		}

		// Function from file: radio.dm
		public void make_syndie(  ) {
			GlobalFuncs.qdel( this.keyslot );
			this.keyslot = new Obj_Item_Device_Encryptionkey_Syndicate();
			this.syndie = true;
			this.recalculateChannels();
			return;
		}

		// Function from file: radio.dm
		public virtual void recalculateChannels(  ) {
			dynamic ch_name = null;
			dynamic ch_name2 = null;

			this.channels = new ByTable();
			this.translate_binary = false;
			this.translate_hive = false;
			this.syndie = false;
			this.centcom = false;

			if ( Lang13.Bool( this.keyslot ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.keyslot.channels )) {
					ch_name = _a;
					

					if ( this.channels.Contains( ch_name ) ) {
						continue;
					}
					this.channels.Add( ch_name );
					this.channels[ch_name] = this.keyslot.channels[ch_name];
				}

				if ( Lang13.Bool( this.keyslot.translate_binary ) ) {
					this.translate_binary = true;
				}

				if ( Lang13.Bool( this.keyslot.translate_hive ) ) {
					this.translate_hive = true;
				}

				if ( Lang13.Bool( this.keyslot.syndie ) ) {
					this.syndie = true;
				}

				if ( Lang13.Bool( this.keyslot.centcom ) ) {
					this.centcom = true;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.channels )) {
				ch_name2 = _b;
				
				this.secure_radio_connections[ch_name2] = GlobalFuncs.add_radio( this, Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name2] ) );
			}
			return;
		}

		// Function from file: radio.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalFuncs.remove_radio( this, this.frequency );
			this.frequency = GlobalFuncs.add_radio( this, new_frequency );
			return;
		}

	}

}