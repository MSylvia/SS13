// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Mecha_Combat_Gygax : Obj_Mecha_Combat {

		public bool overload = false;
		public int overload_coeff = 2;
		public Action_Innate_Mecha_MechOverloadMode overload_action = new Action_Innate_Mecha_MechOverloadMode();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.infra_luminosity = 6;
			this.step_in = 3;
			this.dir_in = 1;
			this.health = 250;
			this.deflect_chance = 5;
			this.damage_absorption = new ByTable().Set( "brute", 0.75 ).Set( "fire", 1 ).Set( "bullet", 0.8 ).Set( "laser", 061 ).Set( "energy", 0.85 ).Set( "bomb", 1 );
			this.wreckage = typeof(Obj_Structure_MechaWreckage_Gygax);
			this.internal_damage_threshold = 35;
			this.step_energy_drain = 3;
			this.icon_state = "gygax";
		}

		public Obj_Mecha_Combat_Gygax ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: gygax.dm
		public override void RemoveActions( dynamic user = null, bool? human_occupant = null ) {
			human_occupant = human_occupant ?? false;

			base.RemoveActions( (object)(user), human_occupant );
			this.overload_action.Remove( user );
			return;
		}

		// Function from file: gygax.dm
		public override void GrantActions( dynamic user = null, bool? human_occupant = null ) {
			human_occupant = human_occupant ?? false;

			base.GrantActions( (object)(user), human_occupant );
			this.overload_action.chassis = this;
			this.overload_action.Grant( user );
			return;
		}

		// Function from file: gygax.dm
		public override string get_stats_part(  ) {
			string output = null;

			output = base.get_stats_part();
			output += "<b>Leg actuators overload:</b> " + ( this.overload ? "on" : "off" );
			return output;
		}

		// Function from file: gygax.dm
		public override bool domove( int? direction = null ) {
			
			if ( !base.domove( direction ) ) {
				return false;
			}

			if ( this.overload ) {
				this.health--;

				if ( this.health < Convert.ToDouble( Lang13.Initial( this, "health" ) - Lang13.Initial( this, "health" ) / 3 ) ) {
					this.overload = false;
					this.step_in = Lang13.Initial( this, "step_in" );
					this.step_energy_drain = Lang13.Initial( this, "step_energy_drain" );
					this.occupant_message( "<span class='danger'>Leg actuators damage threshold exceded. Disabling overload.</span>" );
				}
			}
			return false;
		}

	}

}