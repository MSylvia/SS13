// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_HeatExchanger : Obj_Machinery_Atmospherics_Components_Unary {

		public Obj_Machinery_Atmospherics_Components_Unary_HeatExchanger partner = null;
		public int update_cycle = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_unwrench = true;
			this.icon_state = "he_intact";
		}

		public Obj_Machinery_Atmospherics_Components_Unary_HeatExchanger ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: heat_exchanger.dm
		public override int process_atmos(  ) {
			GasMixture air_contents = null;
			GasMixture partner_air_contents = null;
			double air_heat_capacity = 0;
			double other_air_heat_capacity = 0;
			double combined_heat_capacity = 0;
			dynamic old_temperature = null;
			dynamic other_old_temperature = null;
			dynamic combined_energy = null;
			dynamic new_temperature = null;

			base.process_atmos();

			if ( !( this.partner != null ) ) {
				return 0;
			}

			if ( GlobalVars.SSair.times_fired <= this.update_cycle ) {
				return 0;
			}
			this.update_cycle = GlobalVars.SSair.times_fired;
			this.partner.update_cycle = GlobalVars.SSair.times_fired;
			air_contents = this.airs[1];
			partner_air_contents = this.partner.airs[1];
			air_heat_capacity = air_contents.heat_capacity();
			other_air_heat_capacity = partner_air_contents.heat_capacity();
			combined_heat_capacity = other_air_heat_capacity + air_heat_capacity;
			old_temperature = air_contents.temperature;
			other_old_temperature = partner_air_contents.temperature;

			if ( combined_heat_capacity > 0 ) {
				combined_energy = partner_air_contents.temperature * other_air_heat_capacity + air_heat_capacity * Convert.ToDouble( air_contents.temperature );
				new_temperature = combined_energy / combined_heat_capacity;
				air_contents.temperature = new_temperature;
				partner_air_contents.temperature = new_temperature;
			}

			if ( Math.Abs( Convert.ToDouble( old_temperature - air_contents.temperature ) ) > 1 ) {
				this.update_parents();
			}

			if ( Math.Abs( Convert.ToDouble( other_old_temperature - partner_air_contents.temperature ) ) > 1 ) {
				this.partner.update_parents();
			}
			return 1;
		}

		// Function from file: heat_exchanger.dm
		public override void atmosinit( ByTable node_connects = null ) {
			int partner_connect = 0;
			Obj_Machinery_Atmospherics_Components_Unary_HeatExchanger target = null;

			
			if ( !( this.partner != null ) ) {
				partner_connect = Num13.Rotate( this.dir, 180 );

				foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( this, partner_connect ), typeof(Obj_Machinery_Atmospherics_Components_Unary_HeatExchanger) )) {
					target = _a;
					

					if ( ( target.dir & Map13.GetDistance( this, target ) ) != 0 ) {
						this.partner = target;
						this.partner.partner = this;
						break;
					}
				}
			}
			base.atmosinit( node_connects );
			return;
		}

		// Function from file: heat_exchanger.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			dynamic node = null;

			
			if ( Lang13.Bool( this.nodes[1] ) ) {
				this.icon_state = "he_intact";
				node = this.nodes[1];
				this.color = node.color;
			} else {
				this.icon_state = "he_exposed";
			}
			return null;
		}

	}

}