// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun : Obj_Item_Weapon {

		public string fire_sound = "gunshot";
		public dynamic suppressed = 0;
		public bool can_suppress = false;
		public bool can_unsuppress = true;
		public dynamic recoil = 0;
		public dynamic clumsy_check = 1;
		public dynamic chambered = null;
		public bool trigger_guard = true;
		public string sawn_desc = null;
		public int sawn_state = 0;
		public dynamic burst_size = 1;
		public dynamic fire_delay = 0;
		public bool semicd = false;
		public bool heavy_weapon = false;
		public bool unique_rename = false;
		public bool unique_reskin = false;
		public bool reskinned = false;
		public ByTable options = new ByTable();
		public dynamic pin = typeof(Obj_Item_Device_FiringPin);
		public dynamic F = null;
		public bool can_flashlight = false;
		public ByTable upgrades = new ByTable();
		public int ammo_x_offset = 0;
		public bool ammo_y_offset = false;
		public int? flight_x_offset = 0;
		public int? flight_y_offset = 0;
		public bool zoomable = false;
		public bool? zoomed = false;
		public int zoom_amt = 3;
		public Action_ToggleScopeZoom azoom = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "gun";
			this.flags = 64;
			this.slot_flags = 512;
			this.materials = new ByTable().Set( "$metal", 2000 );
			this.throwforce = 5;
			this.throw_speed = 3;
			this.throw_range = 5;
			this.force = 5;
			this.origin_tech = "combat=1";
			this.needs_permit = true;
			this.attack_verb = new ByTable(new object [] { "struck", "hit", "bashed" });
			this.lefthand_file = "icons/mob/inhands/guns_lefthand.dmi";
			this.righthand_file = "icons/mob/inhands/guns_righthand.dmi";
			this.icon = "icons/obj/guns/projectile.dmi";
			this.icon_state = "detective";
		}

		// Function from file: gun.dm
		public Obj_Item_Weapon_Gun ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( this.pin ) ) {
				this.pin = Lang13.Call( this.pin, this );
			}
			this.build_zooming();
			return;
		}

		// Function from file: gun.dm
		public override bool AltClick( Mob user = null ) {
			base.AltClick( user );

			if ( user.incapacitated() ) {
				user.WriteMsg( "<span class='warning'>You can't do that right now!</span>" );
				return false;
			}

			if ( this.unique_reskin && !this.reskinned && this.loc == user ) {
				this.reskin_gun( user );
			}
			return false;
		}

		// Function from file: gun.dm
		public override bool dropped( dynamic user = null ) {
			
			if ( Lang13.Bool( this.F ) ) {
				
				if ( Lang13.Bool( this.F.on ) ) {
					((Ent_Static)user).AddLuminosity( Convert.ToDouble( -this.F.brightness_on ) );
					this.SetLuminosity( this.F.brightness_on );
				}
			}
			this.zoom( user, GlobalVars.FALSE );

			if ( this.azoom != null ) {
				this.azoom.Remove( user );
			}
			return false;
		}

		// Function from file: gun.dm
		public override bool pickup( dynamic user = null ) {
			
			if ( Lang13.Bool( this.F ) ) {
				
				if ( Lang13.Bool( this.F.on ) ) {
					((Ent_Static)user).AddLuminosity( Convert.ToDouble( this.F.brightness_on ) );
					this.SetLuminosity( 0 );
				}
			}

			if ( this.azoom != null ) {
				this.azoom.Grant( user );
			}
			return false;
		}

		// Function from file: gun.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic S = null;
			Obj_Item_Device_Flashlight_Seclite S2 = null;

			
			if ( A is Obj_Item_Device_Flashlight_Seclite ) {
				S = A;

				if ( this.can_flashlight ) {
					
					if ( !Lang13.Bool( this.F ) ) {
						
						if ( !((Mob)user).unEquip( A ) ) {
							return null;
						}
						user.WriteMsg( "<span class='notice'>You click " + S + " into place on " + this + ".</span>" );

						if ( Lang13.Bool( S.on ) ) {
							this.SetLuminosity( 0 );
						}
						this.F = S;
						A.loc = this;
						this.update_icon();
						this.update_gunlight( user );
						this.verbs.Add( typeof(Obj_Item_Weapon_Gun).GetMethod( "toggle_gunlight" ) );
					}
				}
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( Lang13.Bool( this.F ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Device_Flashlight_Seclite) )) {
						S2 = _a;
						
						user.WriteMsg( "<span class='notice'>You unscrew the seclite from " + this + ".</span>" );
						this.F = null;
						S2.loc = GlobalFuncs.get_turf( user );
						this.update_gunlight( user );
						S2.update_brightness( user );
						this.update_icon();
						this.verbs.Remove( typeof(Obj_Item_Weapon_Gun).GetMethod( "toggle_gunlight" ) );
					}
				}
			}

			if ( this.unique_rename ) {
				
				if ( A is Obj_Item_Weapon_Pen ) {
					this.rename_gun( user );
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: gun.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( user.a_intent == "harm" ) {
				base.attack( (object)(M), (object)(user), def_zone );
			} else {
				return false;
			}
			return false;
		}

		// Function from file: gun.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic M = null;
			string shot_leg = null;
			dynamic L = null;

			
			if ( proximity_flag == true ) {
				
				if ( user.contents.Contains( target ) ) {
					return false;
				}

				if ( !( target is Mob ) || user.a_intent == "harm" ) {
					return false;
				}

				if ( user.zone_sel.selecting == "mouth" ) {
					this.handle_suicide( user, target, click_parameters );
					return false;
				}

				if ( target == user ) {
					return false;
				}
			}

			if ( Lang13.Bool( this.clumsy_check ) && Lang13.Bool( this.can_shoot() ) ) {
				
				if ( user is Mob_Living ) {
					M = user;

					if ( Lang13.Bool( M.disabilities & 256 ) && Rand13.PercentChance( 40 ) ) {
						user.WriteMsg( new Txt( "<span class='userdanger'>You shoot yourself in the foot with " ).the( this ).item().str( "!</span>" ).ToString() );
						shot_leg = Rand13.Pick(new object [] { "l_leg", "r_leg" });
						this.process_fire( user, user, false, click_parameters, shot_leg );
						M.drop_item();
						return false;
					}
				}
			}

			if ( user is Mob_Living ) {
				L = user;

				if ( !this.can_trigger_gun( L ) ) {
					return false;
				}
			}
			this.process_fire( target, user, true, click_parameters );
			return false;
		}

		// Function from file: gun.dm
		public override double emp_act( int severity = 0 ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				
				O.emp_act( severity );
			}
			return 0;
		}

		// Function from file: gun.dm
		public void build_zooming(  ) {
			
			if ( this.azoom != null ) {
				return;
			}

			if ( this.zoomable ) {
				this.azoom = new Action_ToggleScopeZoom();
				this.azoom.gun = this;
			}
			return;
		}

		// Function from file: gun.dm
		public void zoom( dynamic user = null, bool? forced_zoom = null ) {
			int ___x = 0;
			int ___y = 0;

			
			if ( !Lang13.Bool( user ) || !Lang13.Bool( user.client ) ) {
				return;
			}

			switch ((bool?)( forced_zoom )) {
				case 0:
					this.zoomed = GlobalVars.FALSE;
					break;
				case 1:
					this.zoomed = GlobalVars.TRUE;
					break;
				default:
					this.zoomed = !( this.zoomed == true );
					break;
			}

			if ( this.zoomed == true ) {
				___x = 0;
				___y = 0;

				dynamic _b = user.dir; // Was a switch-case, sorry for the mess.
				if ( _b==1 ) {
					___y = this.zoom_amt;
				} else if ( _b==4 ) {
					___x = this.zoom_amt;
				} else if ( _b==2 ) {
					___y = -this.zoom_amt;
				} else if ( _b==8 ) {
					___x = -this.zoom_amt;
				}
				user.client.pixel_x = Game13.icon_size * ___x;
				user.client.pixel_y = Game13.icon_size * ___y;
			} else {
				user.client.pixel_x = 0;
				user.client.pixel_y = 0;
			}
			return;
		}

		// Function from file: gun.dm
		public void unlock(  ) {
			
			if ( Lang13.Bool( this.pin ) ) {
				GlobalFuncs.qdel( this.pin );
			}
			this.pin = new Obj_Item_Device_FiringPin();
			return;
		}

		// Function from file: gun.dm
		public virtual void handle_suicide( dynamic user = null, dynamic target = null, string _params = null ) {
			
			if ( !( user is Mob_Living_Carbon_Human ) || !( target is Mob_Living_Carbon_Human ) ) {
				return;
			}

			if ( this.semicd ) {
				return;
			}

			if ( user == target ) {
				((Ent_Static)target).visible_message( "<span class='warning'>" + user + " sticks " + this + " in their mouth, ready to pull the trigger...</span>", "<span class='userdanger'>You stick " + this + " in your mouth, ready to pull the trigger...</span>" );
			} else {
				((Ent_Static)target).visible_message( "<span class='warning'>" + user + " points " + this + " at " + target + "'s head, ready to pull the trigger...</span>", "<span class='userdanger'>" + user + " points " + this + " at your head, ready to pull the trigger...</span>" );
			}
			this.semicd = true;

			if ( !GlobalFuncs.do_mob( user, target, 120 ) || user.zone_sel.selecting != "mouth" ) {
				
				if ( Lang13.Bool( user ) ) {
					
					if ( user == target ) {
						((Ent_Static)user).visible_message( "<span class='notice'>" + user + " decided life was worth living.</span>" );
					} else if ( Lang13.Bool( target ) && ((Ent_Static)target).Adjacent( user ) ) {
						((Ent_Static)target).visible_message( "<span class='notice'>" + user + " has decided to spare " + target + "'s life.</span>", "<span class='notice'>" + user + " has decided to spare your life!</span>" );
					}
				}
				this.semicd = false;
				return;
			}
			this.semicd = false;

			if ( !this.can_trigger_gun( user ) ) {
				return;
			}
			((Ent_Static)target).visible_message( "<span class='warning'>" + user + " pulls the trigger!</span>", "<span class='userdanger'>" + user + " pulls the trigger!</span>" );

			if ( Lang13.Bool( this.chambered ) && Lang13.Bool( this.chambered.BB ) ) {
				this.chambered.BB.damage *= 5;
			}
			this.process_fire( target, user, true, _params );
			return;
		}

		// Function from file: gun.dm
		public void rename_gun( dynamic M = null ) {
			string input = null;

			input = GlobalFuncs.stripped_input( M, "What do you want to name the gun?", null, "", 26 );

			if ( this != null && Lang13.Bool( input ) && !Lang13.Bool( M.stat ) && Map13.GetDistance( M, this ) <= 1 && !((Mob)M).restrained() && Lang13.Bool( M.canmove ) ) {
				this.name = input;
				M.WriteMsg( "You name the gun " + input + ". Say hello to your new friend." );
				return;
			}
			return;
		}

		// Function from file: gun.dm
		public void reskin_gun( Mob M = null ) {
			dynamic choice = null;

			choice = Interface13.Input( M, "Warning, you can only reskin your weapon once!", "Reskin Gun", null, this.options, InputType.Any );

			if ( this != null && Lang13.Bool( choice ) && !( M.stat != 0 ) && Map13.GetDistance( M, this ) <= 1 && !M.restrained() && M.canmove ) {
				
				if ( this.options[choice] == null ) {
					return;
				}

				if ( this.sawn_state == 1 ) {
					this.icon_state = this.options[choice] + "-sawn";
				} else {
					this.icon_state = this.options[choice];
				}
				M.WriteMsg( "Your gun is now skinned as " + choice + ". Say hello to your new friend." );
				this.reskinned = true;
				return;
			}
			return;
		}

		// Function from file: gun.dm
		public void update_gunlight( dynamic user = null ) {
			
			if ( Lang13.Bool( this.F ) ) {
				this.action_button_name = "Toggle Gunlight";

				if ( Lang13.Bool( this.F.on ) ) {
					
					if ( this.loc == user ) {
						((Ent_Static)user).AddLuminosity( Convert.ToDouble( this.F.brightness_on ) );
					} else if ( this.loc is Tile ) {
						this.SetLuminosity( this.F.brightness_on );
					}
				} else if ( this.loc == user ) {
					((Ent_Static)user).AddLuminosity( Convert.ToDouble( -this.F.brightness_on ) );
				} else if ( this.loc is Tile ) {
					this.SetLuminosity( 0 );
				}
				this.update_icon();
			} else {
				this.action_button_name = null;

				if ( this.loc == user ) {
					((Ent_Static)user).AddLuminosity( -5 );
				} else if ( this.loc is Tile ) {
					this.SetLuminosity( 0 );
				}
				return;
			}
			return;
		}

		// Function from file: gun.dm
		[VerbInfo( name: "Toggle Gunlight", desc: "Click to toggle your weapon's attached flashlight.", group: "Object" )]
		public void toggle_gunlight(  ) {
			Mob user = null;

			
			if ( !Lang13.Bool( this.F ) ) {
				return;
			}
			user = Task13.User;

			if ( !( user.loc is Tile ) ) {
				user.WriteMsg( "<span class='warning'>You cannot turn the light on while in this " + user.loc + "!</span>" );
			}
			this.F.on = !Lang13.Bool( this.F.on );
			user.WriteMsg( "<span class='notice'>You toggle the gunlight " + ( Lang13.Bool( this.F.on ) ? "on" : "off" ) + ".</span>" );
			GlobalFuncs.playsound( user, "sound/weapons/empty.ogg", 100, 1 );
			this.update_gunlight( user );
			return;
		}

		// Function from file: gun.dm
		public virtual bool process_fire( dynamic target = null, dynamic user = null, bool? message = null, string _params = null, string zone_override = null ) {
			message = message ?? true;

			double i = 0;

			this.add_fingerprint( user );

			if ( this.semicd ) {
				return false;
			}

			if ( this.heavy_weapon ) {
				
				if ( Lang13.Bool( ((Mob)user).get_inactive_hand() ) ) {
					this.recoil = 4;
				} else {
					this.recoil = Lang13.Initial( this, "recoil" );
				}
			}

			if ( Convert.ToDouble( this.burst_size ) > 1 ) {
				
				foreach (dynamic _a in Lang13.IterateRange( 1, this.burst_size )) {
					i = _a;
					

					if ( !Lang13.Bool( user ) ) {
						break;
					}

					if ( !( user is Mob_Living_Silicon ) ) {
						
						if ( i > 1 && !GlobalFuncs.get_both_hands( user ).Contains( this ) ) {
							break;
						}
					}

					if ( Lang13.Bool( this.chambered ) ) {
						
						if ( !((Obj_Item_AmmoCasing)this.chambered).fire( target, user, _params, null, this.suppressed, zone_override ) ) {
							this.shoot_with_empty_chamber( user );
							break;
						} else if ( Map13.GetDistance( user, target ) <= 1 ) {
							this.shoot_live_shot( user, true, target, message );
						} else {
							this.shoot_live_shot( user, false, target, message );
						}
					} else {
						this.shoot_with_empty_chamber( user );
						break;
					}
					this.process_chamber();
					this.update_icon();
					Task13.Sleep( Convert.ToInt32( this.fire_delay ) );
				}
			} else {
				
				if ( Lang13.Bool( this.chambered ) ) {
					
					if ( !((Obj_Item_AmmoCasing)this.chambered).fire( target, user, _params, null, this.suppressed, zone_override ) ) {
						this.shoot_with_empty_chamber( user );
						return false;
					} else if ( Map13.GetDistance( user, target ) <= 1 ) {
						this.shoot_live_shot( user, true, target, message );
					} else {
						this.shoot_live_shot( user, false, target, message );
					}
				} else {
					this.shoot_with_empty_chamber( user );
					return false;
				}
				this.process_chamber();
				this.update_icon();
				this.semicd = true;
				Task13.Schedule( Convert.ToInt32( this.fire_delay ), (Task13.Closure)(() => {
					this.semicd = false;
					return;
				}));
			}

			if ( Lang13.Bool( user ) ) {
				
				if ( user.hand ) {
					((Mob)user).update_inv_l_hand();
				} else {
					((Mob)user).update_inv_r_hand();
				}
			}
			GlobalFuncs.feedback_add_details( "gun_fired", "" + this.type );
			return false;
		}

		// Function from file: gun.dm
		public virtual void newshot(  ) {
			return;
		}

		// Function from file: gun.dm
		public bool handle_pins( dynamic user = null ) {
			
			if ( Lang13.Bool( this.pin ) ) {
				
				if ( ((Obj_Item_Device_FiringPin)this.pin).pin_auth( user ) || Lang13.Bool( this.pin.emagged ) ) {
					return true;
				} else {
					((Obj_Item_Device_FiringPin)this.pin).auth_fail( user );
					return false;
				}
			} else {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( "'s trigger is locked. This weapon doesn't have a firing pin installed!</span>" ).ToString() );
			}
			return false;
		}

		// Function from file: gun.dm
		public bool can_trigger_gun( dynamic user = null ) {
			dynamic H = null;

			
			if ( !((Mob)user).IsAdvancedToolUser() ) {
				user.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return false;
			}

			if ( !this.handle_pins( user ) ) {
				return false;
			}

			if ( this.trigger_guard ) {
				
				if ( Lang13.Bool( user.has_dna() ) ) {
					
					if ( ((Dna)user.dna).check_mutation( "Hulk" ) != 0 ) {
						user.WriteMsg( "<span class='warning'>Your meaty finger is much too large for the trigger guard!</span>" );
						return false;
					}

					if ( user.dna.species.specflags.Contains( 512 ) ) {
						user.WriteMsg( "<span class='warning'>Your fingers don't fit in the trigger guard!</span>" );
						return false;
					}
				}
			}

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				if ( H.martial_art != null && H.martial_art.name == "The Sleeping Carp" ) {
					user.WriteMsg( "<span class='warning'>Use of ranged weaponry would bring dishonor to the clan.</span>" );
					return false;
				}
			}
			return true;
		}

		// Function from file: gun.dm
		public virtual void shoot_live_shot( dynamic user = null, bool? pointblank = null, dynamic pbtarget = null, bool? message = null ) {
			pointblank = pointblank ?? false;
			message = message ?? true;

			
			if ( Lang13.Bool( this.recoil ) ) {
				GlobalFuncs.shake_camera( user, this.recoil + 1, this.recoil );
			}

			if ( Lang13.Bool( this.suppressed ) ) {
				GlobalFuncs.playsound( user, this.fire_sound, 10, 1 );
			} else {
				GlobalFuncs.playsound( user, this.fire_sound, 50, 1 );

				if ( !( message == true ) ) {
					return;
				}

				if ( pointblank == true ) {
					((Ent_Static)user).visible_message( "<span class='danger'>" + user + " fires " + this + " point blank at " + pbtarget + "!</span>", "<span class='danger'>You fire " + this + " point blank at " + pbtarget + "!</span>", "<span class='italics'>You hear a " + ( this is Obj_Item_Weapon_Gun_Energy ? "laser blast" : "gunshot" ) + "!</span>" );
				} else {
					((Ent_Static)user).visible_message( "<span class='danger'>" + user + " fires " + this + "!</span>", "<span class='danger'>You fire " + this + "!</span>", "You hear a " + ( this is Obj_Item_Weapon_Gun_Energy ? "laser blast" : "gunshot" ) + "!" );
				}
			}

			if ( this.heavy_weapon ) {
				
				if ( Lang13.Bool( ((Mob)user).get_inactive_hand() ) ) {
					
					if ( Rand13.PercentChance( 15 ) ) {
						
						if ( Lang13.Bool( user.drop_item() ) ) {
							((Ent_Static)user).visible_message( "<span class='danger'>" + this + " flies out of " + user + "'s hands!</span>", "<span class='userdanger'>" + this + " kicks out of your grip!</span>" );
						}
					}
				}
			}
			return;
		}

		// Function from file: gun.dm
		public virtual void shoot_with_empty_chamber( dynamic user = null ) {
			user.WriteMsg( "<span class='danger'>*click*</span>" );
			GlobalFuncs.playsound( user, "sound/weapons/empty.ogg", 100, 1 );
			return;
		}

		// Function from file: gun.dm
		public virtual dynamic can_shoot(  ) {
			return 1;
		}

		// Function from file: gun.dm
		public virtual bool process_chamber( bool? eject_casing = null, bool? empty_chamber = null ) {
			return false;
		}

		// Function from file: gun.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( Lang13.Bool( this.pin ) ) {
				user.WriteMsg( "It has " + this.pin + " installed." );
			} else {
				user.WriteMsg( "It doesn't have a firing pin installed, and won't fire." );
			}
			return 0;
		}

		// Function from file: gun.dm
		public override void CheckParts( Game_Data holder = null ) {
			dynamic G = null;

			G = Lang13.FindIn( typeof(Obj_Item_Weapon_Gun), this.contents );

			if ( Lang13.Bool( G ) ) {
				G.loc = this.loc;
				GlobalFuncs.qdel( G.pin );
				G.pin = null;
				this.visible_message( "" + G + " can now fit a new pin, but old one was destroyed in the process." );
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			return;
		}

	}

}