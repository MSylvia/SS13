// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Aicard : Obj_Item_Device {

		public bool flush = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "electronic";
			this.w_class = 2;
			this.slot_flags = 512;
			this.flags = 4;
			this.origin_tech = "programming=4;materials=4";
			this.icon = "icons/obj/aicards.dmi";
			this.icon_state = "aicard";
		}

		public Obj_Item_Device_Aicard ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: aicard.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob U = null;
			string confirm = null;
			Mob_Living_Silicon_Ai A = null;
			Mob_Living_Silicon_Ai A2 = null;
			Mob_Living_Silicon_Ai A3 = null;

			U = Task13.User;

			if ( !( Map13.GetDistance( this, U ) <= 1 ) || U.machine != this ) {
				Interface13.Browse( U, null, "window=aicard" );
				U.unset_machine();
				return null;
			}
			this.add_fingerprint( U );
			U.set_machine( this );

			dynamic _d = href_list["choice"]; // Was a switch-case, sorry for the mess.
			if ( _d=="Close" ) {
				Interface13.Browse( U, null, "window=aicard" );
				U.unset_machine();
				return null;
			} else if ( _d=="Wipe" ) {
				confirm = Interface13.Alert( "Are you sure you want to wipe this card's memory? This cannot be undone once started.", "Confirm Wipe", "Yes", "No" );

				if ( confirm == "Yes" ) {
					
					if ( this == null || !( Map13.GetDistance( this, U ) <= 1 ) || U.machine != this ) {
						Interface13.Browse( U, null, "window=aicard" );
						U.unset_machine();
						return null;
					} else {
						this.flush = true;

						foreach (dynamic _a in Lang13.Enumerate( this, typeof(Mob_Living_Silicon_Ai) )) {
							A = _a;
							
							A.suiciding = true;
							A.WriteMsg( "Your core files are being wiped!" );

							while (A.stat != 2) {
								A.adjustOxyLoss( 2 );
								A.updatehealth();
								Task13.Sleep( 10 );
							}
							this.flush = false;
						}
					}
				}
			} else if ( _d=="Wireless" ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this, typeof(Mob_Living_Silicon_Ai) )) {
					A2 = _b;
					
					A2.control_disabled = !A2.control_disabled;
					A2.WriteMsg( "The intellicard's wireless port has been " + ( A2.control_disabled ? "disabled" : "enabled" ) + "!" );

					if ( A2.control_disabled ) {
						this.overlays.Remove( new Image( "icons/obj/aicards.dmi", "aicard-on" ) );
					} else {
						this.overlays.Add( new Image( "icons/obj/aicards.dmi", "aicard-on" ) );
					}
				}
			} else if ( _d=="Radio" ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this, typeof(Mob_Living_Silicon_Ai) )) {
					A3 = _c;
					
					A3.radio_enabled = !A3.radio_enabled;
					A3.WriteMsg( "Your Subspace Transceiver has been " + ( A3.radio_enabled ? "enabled" : "disabled" ) + "!" );
				}
			}
			this.attack_self( U );
			return null;
		}

		// Function from file: aicard.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;
			dynamic laws = null;
			Mob_Living_Silicon_Ai A = null;
			int? index = null;
			dynamic law = null;
			string num = null;
			int number = 0;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			
			if ( !( Map13.GetDistance( this, user ) <= 1 ) ) {
				return null;
			}
			((Mob)user).set_machine( this );
			dat = "<TT><B>Intellicard</B><BR>";

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Mob_Living_Silicon_Ai) )) {
				A = _a;
				
				dat += "Stored AI: " + A.name + "<br>System integrity: " + ( A.health + 100 ) / 2 + "%<br>";

				if ( Lang13.Bool( A.laws.zeroth ) ) {
					laws += "0: " + A.laws.zeroth + "<BR>";
				}
				index = null;
				index = 1;

				while (( index ??0) <= A.laws.ion.len) {
					law = A.laws.ion[index];

					if ( Lang13.Length( law ) > 0 ) {
						num = GlobalFuncs.ionnum();
						laws += "" + num + ". " + law + "<BR>";
					}
					index++;
				}
				number = 1;
				index2 = null;
				index2 = 1;

				while (( index2 ??0) <= A.laws.inherent.len) {
					law2 = A.laws.inherent[index2];

					if ( Lang13.Length( law2 ) > 0 ) {
						laws += "" + number + ": " + law2 + "<BR>";
						number++;
					}
					index2++;
				}
				index3 = null;
				index3 = 1;

				while (( index3 ??0) <= A.laws.supplied.len) {
					law3 = A.laws.supplied[index3];

					if ( Lang13.Length( law3 ) > 0 ) {
						laws += "" + number + ": " + law3 + "<BR>";
						number++;
					}
					index3++;
				}
				dat += "Laws:<br>" + laws + "<br>";

				if ( A.stat == 2 ) {
					dat += "<b>AI nonfunctional</b>";
				} else {
					
					if ( !this.flush ) {
						dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";choice=Wipe'>Wipe AI</A>" ).ToString();
					} else {
						dat += "<b>Wipe in progress</b>";
					}
					dat += "<br>";
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";choice=Wireless'>" ).item( ( A.control_disabled ? "Enable" : "Disable" ) ).str( " Wireless Activity</a>" ).ToString();
					dat += "<br>";
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";choice=Radio'>" ).item( ( A.radio_enabled ? "Disable" : "Enable" ) ).str( " Subspace Radio</a>" ).ToString();
					dat += "<br>";
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";choice=Close'>Close</a>" ).ToString();
				}
			}
			Interface13.Browse( user, dat, "window=aicard" );
			GlobalFuncs.onclose( user, "aicard" );
			return null;
		}

		// Function from file: aicard.dm
		public void update_state(  ) {
			dynamic AI = null;

			AI = Lang13.FindIn( typeof(Mob_Living_Silicon_Ai), this );

			if ( Lang13.Bool( AI ) ) {
				this.name = "intelliCard - " + AI.name;

				if ( Convert.ToInt32( AI.stat ) == 2 ) {
					this.icon_state = "aicard-404";
				} else {
					this.icon_state = "aicard-full";
				}
				AI.__CallVerb("Cancel Camera View" );
			} else {
				this.icon_state = "aicard";
				this.name = "intelliCard";
				this.overlays.Cut();
			}
			return;
		}

		// Function from file: aicard.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic AI = null;

			base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );

			if ( !( proximity_flag == true ) || !Lang13.Bool( target ) ) {
				return false;
			}
			AI = Lang13.FindIn( typeof(Mob_Living_Silicon_Ai), this );

			if ( Lang13.Bool( AI ) ) {
				((Ent_Static)target).transfer_ai( 2, user, AI, this );
				GlobalFuncs.add_logs( user, AI, "carded", this );
			} else {
				((Ent_Static)target).transfer_ai( 1, user, null, this );
			}
			this.update_state();
			return false;
		}

	}

}