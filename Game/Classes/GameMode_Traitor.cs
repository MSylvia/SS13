// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Traitor : GameMode {

		public int traitors_possible = 4;
		public int num_modifier = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "traitor";
			this.config_tag = "traitor";
			this.antag_flag = "traitor";
			this.restricted_jobs = new ByTable(new object [] { "Cyborg" });
			this.protected_jobs = new ByTable(new object [] { "Security Officer", "Warden", "Detective", "Head of Security", "Captain" });
			this.required_enemies = 1;
			this.recommended_enemies = 4;
			this.reroll_friendly = true;
		}

		// Function from file: traitor.dm
		public override bool declare_completion(  ) {
			base.declare_completion();
			return false;
		}

		// Function from file: traitor.dm
		public virtual void add_latejoin_traitor( Mind character = null ) {
			character.make_Traitor();
			return;
		}

		// Function from file: traitor.dm
		public override void make_antag_chance( Mob_Living_Carbon_Human character = null ) {
			int traitorcap = 0;

			traitorcap = Num13.MinInt( Num13.Floor( GlobalVars.joined_player_list.len / ( ( GlobalVars.config.traitor_scaling_coeff ??0) * 2 ) ) + this.num_modifier + 2, Num13.Floor( GlobalVars.joined_player_list.len / ( GlobalVars.config.traitor_scaling_coeff ??0) ) + this.num_modifier );

			if ( GlobalVars.ticker.mode.traitors.len >= traitorcap ) {
				return;
			}

			if ( GlobalVars.ticker.mode.traitors.len <= traitorcap - 2 || Rand13.PercentChance( ((int)( 100 / ( ( GlobalVars.config.traitor_scaling_coeff ??0) * 2 ) )) ) ) {
				
				if ( character.client.prefs.be_special.Contains( "traitor" ) ) {
					
					if ( !GlobalFuncs.jobban_isbanned( character.client, "traitor" ) && !GlobalFuncs.jobban_isbanned( character.client, "Syndicate" ) ) {
						
						if ( this.age_check( character.client ) ) {
							
							if ( !this.restricted_jobs.Contains( character.job ) ) {
								this.add_latejoin_traitor( character.mind );
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: traitor.dm
		public override bool post_setup( bool? report = null ) {
			Mind traitor = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.traitors, typeof(Mind) )) {
				traitor = _a;
				
				this.forge_traitor_objectives( traitor );
				Task13.Schedule( Rand13.Int( 10, 100 ), (Task13.Closure)(() => {
					this.finalize_traitor( traitor );
					this.greet_traitor( traitor );
					return;
				}));
			}

			if ( !Lang13.Bool( this.exchange_blue ) ) {
				this.exchange_blue = -1;
			}
			this.modePlayer.Add( this.traitors );
			base.post_setup( report );
			return true;
		}

		// Function from file: traitor.dm
		public override bool pre_setup(  ) {
			int? num_traitors = null;
			int? j = null;
			dynamic traitor = null;

			
			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}

			if ( GlobalVars.config.protect_assistant_from_antagonist ) {
				this.restricted_jobs.Add( "Assistant" );
			}
			num_traitors = 1;

			if ( Lang13.Bool( GlobalVars.config.traitor_scaling_coeff ) ) {
				num_traitors = Num13.MaxInt( 1, Num13.MinInt( Num13.Floor( this.num_players() / ( ( GlobalVars.config.traitor_scaling_coeff ??0) * 2 ) ) + this.num_modifier + 2, Num13.Floor( this.num_players() / ( GlobalVars.config.traitor_scaling_coeff ??0) ) + this.num_modifier ) );
			} else {
				num_traitors = Num13.MaxInt( 1, Num13.MinInt( this.num_players(), this.traitors_possible ) );
			}
			j = null;
			j = 0;

			while (( j ??0) < ( num_traitors ??0)) {
				
				if ( !( this.antag_candidates.len != 0 ) ) {
					break;
				}
				traitor = Rand13.PickFromTable( this.antag_candidates );
				this.traitors.Add( traitor );
				traitor.special_role = this.traitor_name;
				traitor.restricted_roles = this.restricted_jobs;
				GlobalFuncs.log_game( "" + traitor.key + " (ckey) has been selected as a " + this.traitor_name );
				this.antag_candidates.Remove( traitor );
				j++;
			}

			if ( this.traitors.len < this.required_enemies ) {
				return false;
			}
			return true;
		}

		// Function from file: traitor.dm
		public override void announce(  ) {
			Game13.WriteMsg( "<B>The current game mode is - Traitor!</B>" );
			Game13.WriteMsg( "<B>There are syndicate traitors on the station. Do not let the traitors succeed!</B>" );
			return;
		}

	}

}