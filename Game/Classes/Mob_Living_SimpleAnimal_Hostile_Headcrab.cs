// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Headcrab : Mob_Living_SimpleAnimal_Hostile {

		public Mind origin = null;
		public bool egg_lain = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "headcrab";
			this.icon_dead = "headcrab_dead";
			this.health = 50;
			this.maxHealth = 50;
			this.melee_damage_lower = 5;
			this.melee_damage_upper = 5;
			this.attacktext = "chomps";
			this.attack_sound = "sound/weapons/bite.ogg";
			this.faction = new ByTable(new object [] { "creature" });
			this.robust_searching = true;
			this.stat_attack = 2;
			this.speak_emote = new ByTable(new object [] { "squeaks" });
			this.ventcrawler = 2;
			this.gold_core_spawnable = 1;
			this.icon_state = "headcrab";
		}

		public Mob_Living_SimpleAnimal_Hostile_Headcrab ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: headcrab.dm
		public override dynamic AttackingTarget(  ) {
			dynamic C = null;

			
			if ( this.egg_lain ) {
				((Ent_Static)this.target).attack_animal( this );
				return null;
			}

			if ( this.target is Mob_Living_Carbon && !( this.target is Mob_Living_Carbon_Monkey ) ) {
				C = this.target;

				if ( Convert.ToInt32( C.stat ) == 2 ) {
					this.Infect( this.target );
					this.WriteMsg( "<span class='userdanger'>With our egg laid, our death approaches rapidly...</span>" );
					Task13.Schedule( 100, (Task13.Closure)(() => {
						this.death();
						return;
					}));
					return null;
				}
			}
			((Ent_Static)this.target).attack_animal( this );
			return null;
		}

		// Function from file: headcrab.dm
		public void Infect( dynamic victim = null ) {
			Obj_Item_Organ_Internal_BodyEgg_ChangelingEgg egg = null;
			Obj_Item_Organ_Internal I = null;

			egg = new Obj_Item_Organ_Internal_BodyEgg_ChangelingEgg( victim );
			egg.Insert( victim );

			if ( this.origin != null ) {
				egg.origin = this.origin;
			} else if ( this.mind != null ) {
				egg.origin = this.mind;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Organ_Internal) )) {
				I = _a;
				
				I.loc = egg;
			}
			this.visible_message( "<span class='warning'>" + this + " plants something in " + victim + "'s flesh!</span>", "<span class='danger'>We inject our egg into " + victim + "'s body!</span>" );
			this.egg_lain = true;
			return;
		}

	}

}