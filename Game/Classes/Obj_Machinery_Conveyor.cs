// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Conveyor : Obj_Machinery {

		public int operating = 0;
		public bool operable = true;
		public double? forwards = null;
		public double? backwards = null;
		public double? movedir = null;
		public ByTable affecting = null;
		public string id = "";
		public int verted = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/recycling.dmi";
			this.icon_state = "conveyor0";
		}

		// Function from file: conveyor2.dm
		public Obj_Machinery_Conveyor ( dynamic loc = null, double? newdir = null ) : base( (object)(loc) ) {
			double? temp = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( newdir ) ) {
				this.dir = ((int)( newdir ??0 ));
			}

			switch ((int)( this.dir )) {
				case 1:
					this.forwards = GlobalVars.NORTH;
					this.backwards = GlobalVars.SOUTH;
					break;
				case 2:
					this.forwards = GlobalVars.SOUTH;
					this.backwards = GlobalVars.NORTH;
					break;
				case 4:
					this.forwards = GlobalVars.EAST;
					this.backwards = GlobalVars.WEST;
					break;
				case 8:
					this.forwards = GlobalVars.WEST;
					this.backwards = GlobalVars.EAST;
					break;
				case 5:
					this.forwards = GlobalVars.EAST;
					this.backwards = GlobalVars.SOUTH;
					break;
				case 9:
					this.forwards = GlobalVars.SOUTH;
					this.backwards = GlobalVars.WEST;
					break;
				case 6:
					this.forwards = GlobalVars.NORTH;
					this.backwards = GlobalVars.EAST;
					break;
				case 10:
					this.forwards = GlobalVars.WEST;
					this.backwards = GlobalVars.NORTH;
					break;
			}

			if ( this.verted == -1 ) {
				temp = this.forwards;
				this.forwards = this.backwards;
				this.backwards = temp;
			}
			return;
		}

		// Function from file: conveyor2.dm
		public override void power_change(  ) {
			base.power_change();
			this.update();
			return;
		}

		// Function from file: conveyor2.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			((Mob)a).Move_Pulled( this );
			return null;
		}

		// Function from file: conveyor2.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Item_ConveyorConstruct C = null;

			
			if ( A is Obj_Item_Weapon_Crowbar ) {
				
				if ( !( ( this.stat & 1 ) != 0 ) ) {
					C = new Obj_Item_ConveyorConstruct( this.loc );
					C.id = this.id;
					this.transfer_fingerprints_to( C );
				}
				user.WriteMsg( "<span class='notice'>You remove the conveyor belt.</span>" );
				GlobalFuncs.qdel( this );
				return null;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				return null;
			}

			if ( !Lang13.Bool( user.drop_item() ) ) {
				user.WriteMsg( new Txt( "<span class='warning'>" ).The( A ).item().str( " is stuck to your hand, you cannot place it on the conveyor!</span>" ).ToString() );
				return null;
			}

			if ( Lang13.Bool( A ) && A.loc != null ) {
				A.loc = this.loc;
			}
			return null;
		}

		// Function from file: conveyor2.dm
		public override int? process( dynamic seconds = null ) {
			int items_moved = 0;
			Ent_Dynamic A = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !( this.operating != 0 ) ) {
				return null;
			}
			this.f_use_power( 100 );
			this.affecting = this.loc.contents - this;
			Task13.Sleep( 1 );
			items_moved = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.affecting, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( !Lang13.Bool( A.anchored ) ) {
					
					if ( A.loc == this.loc ) {
						Map13.Step( A, ((int)( this.movedir ??0 )) );
						items_moved++;
					}
				}

				if ( items_moved >= 10 ) {
					break;
				}
			}
			return null;
		}

		// Function from file: conveyor2.dm
		public void set_operable( int stepdir = 0, string match_id = null, bool op = false ) {
			dynamic C = null;

			
			if ( this.id != match_id ) {
				return;
			}
			this.operable = op;
			this.update();
			C = Lang13.FindIn( typeof(Obj_Machinery_Conveyor), Map13.GetStep( this, stepdir ) );

			if ( Lang13.Bool( C ) ) {
				((Obj_Machinery_Conveyor)C).set_operable( stepdir, this.id, op );
			}
			return;
		}

		// Function from file: conveyor2.dm
		public void broken(  ) {
			dynamic C = null;

			this.stat |= 1;
			this.update();
			C = Lang13.FindIn( typeof(Obj_Machinery_Conveyor), Map13.GetStep( this, this.dir ) );

			if ( Lang13.Bool( C ) ) {
				((Obj_Machinery_Conveyor)C).set_operable( this.dir, this.id, false );
			}
			C = Lang13.FindIn( typeof(Obj_Machinery_Conveyor), Map13.GetStep( this, Num13.Rotate( this.dir, 180 ) ) );

			if ( Lang13.Bool( C ) ) {
				((Obj_Machinery_Conveyor)C).set_operable( Num13.Rotate( this.dir, 180 ), this.id, false );
			}
			return;
		}

		// Function from file: conveyor2.dm
		public virtual void update(  ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "conveyor-broken";
				this.operating = 0;
				return;
			}

			if ( !this.operable ) {
				this.operating = 0;
			}

			if ( ( this.stat & 2 ) != 0 ) {
				this.operating = 0;
			}
			this.icon_state = "conveyor" + this.operating * this.verted;
			return;
		}

		// Function from file: conveyor2.dm
		public void setmove(  ) {
			
			if ( this.operating == 1 ) {
				this.movedir = this.forwards;
			} else {
				this.movedir = this.backwards;
			}
			this.update();
			return;
		}

	}

}