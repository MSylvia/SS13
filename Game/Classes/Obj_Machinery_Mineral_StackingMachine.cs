// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_StackingMachine : Obj_Machinery_Mineral {

		public dynamic CONSOLE = null;
		public ByTable stk_types = new ByTable();
		public ByTable stk_amt = new ByTable();
		public ByTable stack_list = new ByTable( 0 );
		public int stack_amt = 50;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.input_dir = 4;
			this.output_dir = 8;
			this.icon = "icons/obj/machines/mining_machines.dmi";
			this.icon_state = "stacker";
		}

		public Obj_Machinery_Mineral_StackingMachine ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: machine_stacking.dm
		public override int? process( dynamic seconds = null ) {
			Tile T = null;
			Obj_Item_Stack_Sheet S = null;

			T = Map13.GetStep( this, this.input_dir );

			if ( T != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Item_Stack_Sheet) )) {
					S = _a;
					
					this.process_sheet( S );
				}
			}
			return null;
		}

		// Function from file: machine_stacking.dm
		public virtual void process_sheet( Obj_Item_Stack_Sheet inp = null ) {
			dynamic s = null;
			dynamic storage = null;
			dynamic _out = null;

			
			if ( !this.stack_list.Contains( inp.type ) ) {
				s = Lang13.Call( inp.type, this, 0 );
				s.amount = 0;
				this.stack_list[inp.type] = s;
			}
			storage = this.stack_list[inp.type];
			storage.amount += inp.amount;
			inp.loc = null;

			while (Convert.ToDouble( storage.amount ) > this.stack_amt) {
				_out = Lang13.Call( inp.type );
				_out.amount = this.stack_amt;
				this.unload_mineral( _out );
				storage.amount -= this.stack_amt;
			}
			return;
		}

	}

}