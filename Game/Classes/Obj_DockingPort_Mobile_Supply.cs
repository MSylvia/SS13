// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_DockingPort_Mobile_Supply : Obj_DockingPort_Mobile {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.id = "supply";
			this.callTime = 1200;
			this.travelDir = 90;
			this.width = 12;
			this.dwidth = 5;
			this.height = 7;
			this.roundstart_move = "supply_away";
			this.dir = 8;
		}

		// Function from file: supply.dm
		public Obj_DockingPort_Mobile_Supply ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSshuttle.supply = this;
			return;
		}

		// Function from file: supply.dm
		public bool sell(  ) {
			double plasma_count = 0;
			int intel_count = 0;
			int crate_count = 0;
			string msg = null;
			int pointsEarned = 0;
			Ent_Dynamic MA = null;
			bool find_slip = false;
			dynamic thing = null;
			dynamic slip = null;
			bool denied = false;
			int? i = null;
			dynamic P = null;
			dynamic disk = null;
			Tech tech = null;
			double cost = 0;
			dynamic disk2 = null;
			Design design = null;
			dynamic S = null;
			bool potDiff = false;

			
			if ( this.z != 2 ) {
				return true;
			}
			plasma_count = 0;
			intel_count = 0;
			crate_count = 0;
			msg = "";

			foreach (dynamic _b in Lang13.Enumerate( this.areaInstance, typeof(Ent_Dynamic) )) {
				MA = _b;
				

				if ( Lang13.Bool( MA.anchored ) ) {
					continue;
				}
				GlobalVars.SSshuttle.sold_atoms += " " + MA.name;

				if ( MA is Obj_Structure_Closet_Crate || MA is Obj_Structure_Closet_Critter ) {
					GlobalVars.SSshuttle.sold_atoms += ":";

					if ( !( MA.contents.len != 0 ) ) {
						GlobalVars.SSshuttle.sold_atoms += " (empty)";
					}
					crate_count++;
					find_slip = true;

					foreach (dynamic _a in Lang13.Enumerate( MA )) {
						thing = _a;
						
						GlobalVars.SSshuttle.sold_atoms += " " + thing.name;

						if ( find_slip && thing is Obj_Item_Weapon_Paper_Manifest ) {
							slip = thing;

							if ( slip.stamped != null && slip.stamped.len != 0 ) {
								denied = false;
								i = null;
								i = 1;

								while (( i ??0) <= slip.stamped.len) {
									
									if ( slip.stamped[i] == typeof(Obj_Item_Weapon_Stamp_Denied) ) {
										denied = true;
									}
									i++;
								}

								if ( Lang13.Bool( slip.erroneous ) && denied ) {
									pointsEarned = Convert.ToInt32( slip.points - GlobalVars.SSshuttle.points_per_crate );
									GlobalVars.SSshuttle.points += pointsEarned;
									msg += "<font color=green>+" + pointsEarned + "</font>: Station correctly denied package " + slip.ordernumber + ": ";

									if ( ( ( slip.erroneous ??0) & 1 ) != 0 ) {
										msg += "Destination station incorrect. ";
									} else if ( ( ( slip.erroneous ??0) & 2 ) != 0 ) {
										msg += "Packages incorrectly counted. ";
									} else if ( ( ( slip.erroneous ??0) & 4 ) != 0 ) {
										msg += "Package incomplete. ";
									}
									msg += "Points refunded.<BR>";
								} else if ( !Lang13.Bool( slip.erroneous ) && !denied ) {
									GlobalVars.SSshuttle.points += GlobalVars.SSshuttle.points_per_slip;
									msg += "<font color=green>+" + GlobalVars.SSshuttle.points_per_slip + "</font>: Package " + slip.ordernumber + " accorded.<BR>";
								} else if ( Lang13.Bool( slip.erroneous ) ) {
									msg += "<font color=red>+0</font>: Station approved package " + slip.ordernumber + " despite error: ";

									if ( ( ( slip.erroneous ??0) & 1 ) != 0 ) {
										msg += "Destination station incorrect.";
									} else if ( ( ( slip.erroneous ??0) & 2 ) != 0 ) {
										msg += "Packages incorrectly counted.";
									} else if ( ( ( slip.erroneous ??0) & 4 ) != 0 ) {
										msg += "We found unshipped items on our dock.";
									}
									msg += "  Be more vigilant.<BR>";
								} else {
									pointsEarned = Num13.Floor( GlobalVars.SSshuttle.points_per_crate - Convert.ToDouble( slip.points ) );
									GlobalVars.SSshuttle.points += pointsEarned;
									msg += "<font color=red>" + pointsEarned + "</font>: Station denied package " + slip.ordernumber + ".  Our records show no fault on our part.<BR>";
								}
								find_slip = false;
							}
							continue;
						}

						if ( thing is Obj_Item_Stack_Sheet_Mineral_Plasma ) {
							P = thing;
							plasma_count += Convert.ToDouble( P.amount );
						}

						if ( thing is Obj_Item_Documents_Syndicate ) {
							intel_count++;
						}

						if ( thing is Obj_Item_Weapon_Disk_TechDisk ) {
							disk = thing;

							if ( !Lang13.Bool( disk.stored ) ) {
								continue;
							}
							tech = disk.stored;
							cost = tech.getCost( GlobalVars.SSshuttle.techLevels[tech.id] );

							if ( cost != 0 ) {
								GlobalVars.SSshuttle.techLevels[tech.id] = tech.level;
								GlobalVars.SSshuttle.points += cost;
								msg += "<font color=green>+" + cost + "</font>: " + tech.name + " - new data.<BR>";
							}
						}

						if ( thing is Obj_Item_Weapon_Disk_DesignDisk ) {
							disk2 = thing;

							if ( !( disk2.blueprint != null ) ) {
								continue;
							}
							design = disk2.blueprint;

							if ( GlobalVars.SSshuttle.researchDesigns.Contains( design.id ) ) {
								continue;
							}

							if ( Convert.ToDouble( Lang13.Initial( design, "reliability" ) ) < 100 && design.reliability >= 100 ) {
								GlobalVars.SSshuttle.points += GlobalVars.SSshuttle.points_per_design;
								GlobalVars.SSshuttle.researchDesigns.Add( design.id );
								msg += "<font color=green>+" + GlobalVars.SSshuttle.points_per_design + "</font>: Reliable " + design.name + " design.<BR>";
							}
						}

						if ( thing is Obj_Item_Seeds ) {
							S = thing;

							if ( S.rarity == 0 ) {
								msg += "<font color=red>+0</font>: We don't need samples of mundane species \"" + GlobalFuncs.capitalize( S.species ) + "\".<BR>";
							} else if ( Lang13.Bool( GlobalVars.SSshuttle.discoveredPlants[S.type] ) ) {
								potDiff = Lang13.Bool( S.potency - GlobalVars.SSshuttle.discoveredPlants[S.type] );

								if ( ( potDiff ?1:0) > 0 ) {
									GlobalVars.SSshuttle.discoveredPlants[S.type] = S.potency;
									msg += "<font color=green>+" + potDiff + "</font>: New sample of \"" + GlobalFuncs.capitalize( S.species ) + "\" is superior.  Good work.<BR>";
									GlobalVars.SSshuttle.points += potDiff ?1:0;
								} else {
									msg += "<font color=red>+0</font>: New sample of \"" + GlobalFuncs.capitalize( S.species ) + "\" is not more potent than existing sample (" + GlobalVars.SSshuttle.discoveredPlants[S.type] + " potency).<BR>";
								}
							} else {
								GlobalVars.SSshuttle.discoveredPlants[S.type] = S.potency;
								msg += "<font color=green>+" + S.rarity + "</font>: New species discovered: \"" + GlobalFuncs.capitalize( S.species ) + "\".  Excellent work.<BR>";
								GlobalVars.SSshuttle.points += S.rarity;
							}
						}
					}
				}
				GlobalFuncs.qdel( MA );
				GlobalVars.SSshuttle.sold_atoms += ".";
			}

			if ( plasma_count > 0 ) {
				pointsEarned = Num13.Floor( plasma_count * GlobalVars.SSshuttle.points_per_plasma );
				msg += "<font color=green>+" + pointsEarned + "</font>: Received " + plasma_count + " unit(s) of exotic material.<BR>";
				GlobalVars.SSshuttle.points += pointsEarned;
			}

			if ( intel_count > 0 ) {
				pointsEarned = Num13.Floor( intel_count * GlobalVars.SSshuttle.points_per_intel );
				msg += "<font color=green>+" + pointsEarned + "</font>: Received " + intel_count + " article(s) of enemy intelligence.<BR>";
				GlobalVars.SSshuttle.points += pointsEarned;
			}

			if ( crate_count > 0 ) {
				pointsEarned = Num13.Floor( crate_count * GlobalVars.SSshuttle.points_per_crate );
				msg += "<font color=green>+" + pointsEarned + "</font>: Received " + crate_count + " crate(s).<BR>";
				GlobalVars.SSshuttle.points += pointsEarned;
			}
			GlobalVars.SSshuttle.centcom_message = msg;
			return false;
		}

		// Function from file: supply.dm
		public int buy(  ) {
			ByTable emptyTurfs = null;
			Tile_Simulated_Floor T = null;
			SupplyOrder SO = null;
			dynamic T2 = null;
			int? errors = null;

			
			if ( this.z != 1 ) {
				return 1;
			}

			if ( !( GlobalVars.SSshuttle.shoppinglist.len != 0 ) ) {
				return 2;
			}
			emptyTurfs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.areaInstance, typeof(Tile_Simulated_Floor) )) {
				T = _a;
				

				if ( T.density || T.contents.len != 0 ) {
					continue;
				}
				emptyTurfs.Add( T );
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSshuttle.shoppinglist, typeof(SupplyOrder) )) {
				SO = _b;
				

				if ( !( SO.v_object != null ) ) {
					continue;
				}
				T2 = GlobalFuncs.pick_n_take( emptyTurfs );

				if ( !Lang13.Bool( T2 ) ) {
					GlobalVars.SSshuttle.shoppinglist.Cut( 1, GlobalVars.SSshuttle.shoppinglist.Find( SO ) );
					return 0;
				}
				errors = 0;

				if ( Rand13.PercentChance( 5 ) ) {
					errors |= 2;
				}

				if ( Rand13.PercentChance( 5 ) ) {
					errors |= 1;
				}

				if ( Rand13.PercentChance( 5 ) ) {
					errors |= 4;
				}
				SO.createObject( T2, errors );
			}
			GlobalVars.SSshuttle.shoppinglist.Cut();
			return 0;
		}

		// Function from file: supply.dm
		public override int dock( dynamic S1 = null ) {
			int _default = 0;

			_default = base.dock( (object)(S1) );

			if ( _default != 0 ) {
				return _default;
			}
			this.buy();
			this.sell();
			return _default;
		}

		// Function from file: supply.dm
		public override int request( Obj_DockingPort_Stationary S = null, double? coefficient = null, dynamic signalOrigin = null, string reason = null, bool? redAlert = null ) {
			
			if ( this.mode != 0 ) {
				return 2;
			}
			return base.request( S, coefficient, (object)(signalOrigin), reason, redAlert );
		}

		// Function from file: supply.dm
		public override bool canMove(  ) {
			
			if ( this.z == 1 ) {
				return GlobalFuncs.forbidden_atoms_check( this.areaInstance );
			}
			return base.canMove();
		}

	}

}