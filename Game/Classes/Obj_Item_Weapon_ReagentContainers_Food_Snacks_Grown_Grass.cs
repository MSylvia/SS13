// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Grass : Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.seed = typeof(Obj_Item_Seeds_Grassseed);
			this.filling_color = "#32CD32";
			this.icon_state = "grassclump";
		}

		public Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Grass ( dynamic newloc = null, int? new_potency = null ) : base( (object)(newloc), new_potency ) {
			
		}

		// Function from file: grown.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			double? grassAmt = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Grass G = null;
			Obj_Item_Stack_Tile_Grass GT = null;
			Obj_Item_Stack_Tile_Grass GR = null;

			user.WriteMsg( "<span class='notice'>You prepare the astroturf.</span>" );
			grassAmt = Num13.Floor( ( this.potency ??0) / 50 ) + 1;

			foreach (dynamic _a in Lang13.Enumerate( user.loc, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Grass) )) {
				G = _a;
				
				grassAmt += Num13.Floor( ( G.potency ??0) / 50 ) + 1;
				GlobalFuncs.qdel( G );
			}

			while (( grassAmt ??0) > 0) {
				GT = new Obj_Item_Stack_Tile_Grass( user.loc );

				if ( ( grassAmt ??0) >= ( GT.max_amount ??0) ) {
					GT.amount = GT.max_amount;
				} else {
					GT.amount = grassAmt;

					foreach (dynamic _b in Lang13.Enumerate( user.loc, typeof(Obj_Item_Stack_Tile_Grass) )) {
						GR = _b;
						

						if ( GR != GT && ( GR.amount ??0) < ( GR.max_amount ??0) ) {
							GR.attackby( GT, user );
						}
					}
				}
				grassAmt -= GT.max_amount ??0;
			}
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: grown.dm
		public override bool add_juice( dynamic loc = null, int? potency = null ) {
			
			if ( base.add_juice( (object)(loc), potency ) ) {
				this.reagents.add_reagent( "nutriment", Num13.Round( ( this.potency ??0) / 50, 1 ) + 1 );
				this.bitesize = Num13.Round( ( this.reagents.total_volume ??0) / 2, 1 ) + 1;
			}
			return false;
		}

	}

}