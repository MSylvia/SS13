// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Slime : Mob_Living_SimpleAnimal {

		public bool AIproc = false;
		public bool Atkcool = false;
		public bool Tempstun = false;
		public int Discipline = 0;
		public bool SStun = false;
		public bool is_adult = false;
		public bool docile = false;
		public int cores = 1;
		public int mutation_chance = 30;
		public int powerlevel = 0;
		public int amount_grown = 0;
		public double number = 0;
		public Mob_Living_Carbon Target = null;
		public dynamic Leader = null;
		public int attacked = 0;
		public bool rabid = false;
		public int holding_still = 0;
		public int target_patience = 0;
		public ByTable Friends = new ByTable();
		public ByTable speech_buffer = new ByTable();
		public string mood = "";
		public bool? mutator_used = false;
		public string colour = "grey";
		public Type coretype = typeof(Obj_Item_SlimeExtract_Grey);
		public ByTable slime_mutation = new ByTable( 4 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pass_flags = 1;
			this.ventcrawler = 2;
			this.languages = 17;
			this.faction = new ByTable(new object [] { "slime" });
			this.harm_intent_damage = 5;
			this.icon_living = "grey baby slime";
			this.icon_dead = "grey baby slime dead";
			this.response_help = "pets";
			this.response_disarm = "shoos";
			this.response_harm = "stomps on";
			this.emote_see = new ByTable(new object [] { "jiggles", "bounces in place" });
			this.speak_emote = new ByTable(new object [] { "chirps" });
			this.atmos_requirements = new ByTable().Set( "min_oxy", 0 ).Set( "max_oxy", 0 ).Set( "min_tox", 0 ).Set( "max_tox", 0 ).Set( "min_co2", 0 ).Set( "max_co2", 0 ).Set( "min_n2", 0 ).Set( "max_n2", 0 );
			this.maxHealth = 150;
			this.health = 150;
			this.healable = false;
			this.nutrition = 700;
			this.verb_say = "telepathically chirps";
			this.verb_ask = "telepathically asks";
			this.verb_exclaim = "telepathically cries";
			this.verb_yell = "telephatically cries";
			this.status_flags = 12;
			this.icon = "icons/mob/slimes.dmi";
			this.icon_state = "grey baby slime";
			this.layer = 5;
			this.see_in_dark = 8;
		}

		// Function from file: slime.dm
		public Mob_Living_SimpleAnimal_Slime ( dynamic loc = null ) : base( (object)(loc) ) {
			Action_Innate_Slime_Feed F = null;
			Action_Innate_Slime_Reproduce R = null;
			Action_Innate_Slime_Evolve E = null;
			dynamic sanitizedcolour = null;

			F = new Action_Innate_Slime_Feed();
			F.Grant( this );

			if ( this.is_adult ) {
				R = new Action_Innate_Slime_Reproduce();
				R.Grant( this );
				this.health = 200;
				this.maxHealth = 200;
			} else {
				E = new Action_Innate_Slime_Evolve();
				E.Grant( this );
			}
			this.create_reagents( 100 );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.number = Rand13.Int( 1, 1000 );
				this.name = "" + this.colour + " " + ( this.is_adult ? "adult" : "baby" ) + " slime (" + this.number + ")";
				this.icon_state = "" + this.colour + " " + ( this.is_adult ? "adult" : "baby" ) + " slime";
				this.icon_dead = "" + this.icon_state + " dead";
				this.real_name = this.name;
				this.slime_mutation = this.mutation_table( this.colour );
				sanitizedcolour = GlobalFuncs.replacetext( this.colour, " ", "" );
				this.coretype = Lang13.FindClass( "/obj/item/slime_extract/" + sanitizedcolour );
				return;
			}));
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: slime.dm
		public override int get_mob_buckling_height( Mob seat = null ) {
			
			if ( base.get_mob_buckling_height( seat ) != 0 ) {
				return 3;
			}
			return 0;
		}

		// Function from file: slime.dm
		[VerbInfo( name: "can buckle" )]
		public override bool f_can_buckle(  ) {
			return false;
		}

		// Function from file: slime.dm
		public override bool can_unbuckle(  ) {
			return false;
		}

		// Function from file: slime.dm
		public override double examine( dynamic user = null ) {
			string msg = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<EM>" ).item().str( "</EM>!\n" ).ToString();

			if ( this.stat == 2 ) {
				msg += "<span class='deadsay'>It is limp and unresponsive.</span>\n";
			} else {
				
				if ( this.getBruteLoss() != 0 ) {
					msg += "<span class='warning'>";

					if ( this.getBruteLoss() < 40 ) {
						msg += "It has some punctures in its flesh!";
					} else {
						msg += "<B>It has severe punctures and tears in its flesh!</B>";
					}
					msg += "</span>\n";
				}

				dynamic _a = this.powerlevel; // Was a switch-case, sorry for the mess.
				if ( 2<=_a&&_a<=3 ) {
					msg += "It is flickering gently with a little electrical activity.\n";
				} else if ( 4<=_a&&_a<=5 ) {
					msg += "It is glowing gently with moderate levels of electrical activity.\n";
				} else if ( 6<=_a&&_a<=9 ) {
					msg += "<span class='warning'>It is glowing brightly with high levels of electrical activity.</span>\n";
				} else if ( _a==10 ) {
					msg += "<span class='warning'><B>It is radiating with massive levels of electrical activity!</B></span>\n";
				}
			}
			msg += "*---------*</span>";
			user.WriteMsg( msg );
			return 0;
		}

		// Function from file: slime.dm
		public override dynamic getTrail(  ) {
			return null;
		}

		// Function from file: slime.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Surgery S = null;
			dynamic S2 = null;
			dynamic force_effect = null;

			
			if ( this.stat == 2 && this.surgeries.len != 0 ) {
				
				if ( user.a_intent == "help" ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.surgeries, typeof(Surgery) )) {
						S = _a;
						

						if ( S.next_step( user, this ) ) {
							return 1;
						}
					}
				}
			}

			if ( A is Obj_Item_Stack_Sheet_Mineral_Plasma ) {
				
				if ( this.Friends.Contains( user ) ) {
					this.Friends[user]++;
				} else {
					this.Friends[user] = 1;
				}
				user.WriteMsg( "<span class='notice'>You feed the slime the plasma. It chirps happily.</span>" );
				S2 = A;
				((Obj_Item_Stack)S2).use( 1 );
				return null;
			}

			if ( Convert.ToDouble( A.force ) > 0 ) {
				this.attacked += 10;

				if ( Rand13.PercentChance( 25 ) ) {
					((Ent_Dynamic)user).do_attack_animation( this );
					((Mob)user).changeNext_move( 8 );
					user.WriteMsg( "<span class='danger'>" + A + " passes right through " + this + "!</span>" );
					return null;
				}

				if ( this.Discipline != 0 && Rand13.PercentChance( 50 ) ) {
					this.Discipline = 0;
				}
			}

			if ( Convert.ToDouble( A.force ) >= 3 ) {
				force_effect = A.force * 2;

				if ( this.is_adult ) {
					force_effect = Num13.Floor( Convert.ToDouble( A.force / 2 ) );
				}

				if ( Rand13.PercentChance( Convert.ToInt32( force_effect + 10 ) ) ) {
					this.discipline_slime( user );
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: slime.dm
		public override bool attack_alien( dynamic user = null ) {
			
			if ( base.attack_alien( (object)(user) ) ) {
				this.attacked += 10;
				this.discipline_slime( user );
			}
			return false;
		}

		// Function from file: slime.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			Surgery S = null;

			
			if ( this.buckled != null ) {
				
				if ( this.buckled == a ) {
					
					if ( Rand13.PercentChance( 60 ) ) {
						this.visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " attempts to wrestle " ).the( this.name ).item().str( " off!</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					} else {
						this.visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " manages to wrestle " ).the( this.name ).item().str( " off!</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						this.discipline_slime( a );
					}
				} else {
					((Ent_Dynamic)a).do_attack_animation( this );

					if ( Rand13.PercentChance( 30 ) ) {
						this.visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " attempts to wrestle " ).the( this.name ).item().str( " off of " ).item( this.buckled ).str( "!</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					} else {
						this.visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " manages to wrestle " ).the( this.name ).item().str( " off of " ).item( this.buckled ).str( "!</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						this.discipline_slime( a );
					}
				}
			} else {
				
				if ( this.stat == 2 && this.surgeries.len != 0 ) {
					
					if ( a.a_intent == "help" ) {
						
						foreach (dynamic _a in Lang13.Enumerate( this.surgeries, typeof(Surgery) )) {
							S = _a;
							

							if ( S.next_step( a, this ) ) {
								return 1;
							}
						}
					}
				}

				if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
					this.attacked += 10;
				}
			}
			return null;
		}

		// Function from file: slime.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			
			if ( hulk.a_intent == "harm" ) {
				this.adjustBruteLoss( 15 );
				this.discipline_slime( hulk );
			}
			return false;
		}

		// Function from file: slime.dm
		public override bool attack_larva( Mob_Living_Carbon_Alien_Larva user = null ) {
			
			if ( base.attack_larva( user ) ) {
				this.attacked += 10;
			}
			return false;
		}

		// Function from file: slime.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_paw( (object)(a), (object)(b), (object)(c) ) ) ) {
				this.attacked += 10;
			}
			return null;
		}

		// Function from file: slime.dm
		public override bool attack_animal( Mob_Living user = null ) {
			
			if ( base.attack_animal( user ) ) {
				this.attacked += 10;
			}
			return false;
		}

		// Function from file: slime.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			
			if ( base.attack_slime( user ) ) {
				
				if ( user == this ) {
					return false;
				}

				if ( this.buckled != null ) {
					this.Feedstop( true );
					this.visible_message( "<span class='danger'>" + user + " pulls " + this + " off!</span>" );
					return false;
				}
				this.attacked += 5;

				if ( this.nutrition >= 100 ) {
					this.nutrition -= ( user.is_adult ?1:0) * 40 + 50;
					user.add_nutrition( ( user.is_adult ?1:0) * 40 + 50 );
				}

				if ( Convert.ToDouble( this.health ) > 0 ) {
					user.adjustBruteLoss( ( user.is_adult ?1:0) * -10 + -10 );
					user.updatehealth();
				}
			}
			return false;
		}

		// Function from file: slime.dm
		public override bool attack_ui( int slot = 0 ) {
			return false;
		}

		// Function from file: slime.dm
		public override void start_pulling( dynamic AM = null ) {
			return;
		}

		// Function from file: slime.dm
		public override bool unEquip( dynamic I = null, bool? force = null ) {
			return false;
		}

		// Function from file: slime.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			dynamic Food = null;

			
			if ( over is Mob_Living && over != this && Task13.User == this ) {
				Food = over;

				if ( this.CanFeedon( Food ) ) {
					this.Feedon( Food );
				}
			}
			base.MouseDrop( (object)(over), (object)(src_location), (object)(over_location), src_control, (object)(over_control), _params );
			return null;
		}

		// Function from file: slime.dm
		public override double emp_act( int severity = 0 ) {
			this.powerlevel = 0;
			base.emp_act( severity );
			return 0;
		}

		// Function from file: slime.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( !Lang13.Bool( P ) ) {
				return null;
			}
			this.attacked += 10;

			if ( P.damage_type == "fire" ) {
				this.adjustBruteLoss( -Math.Abs( Convert.ToDouble( P.damage ) ) );
				((Obj_Item_Projectile)P).on_hit( this );
			} else {
				base.bullet_act( (object)(P), (object)(def_zone) );
			}
			return 0;
		}

		// Function from file: slime.dm
		public override bool adjustFireLoss( dynamic amount = null ) {
			base.adjustFireLoss( -Math.Abs( Convert.ToDouble( amount ) ) );
			return false;
		}

		// Function from file: slime.dm
		public override dynamic Stat(  ) {
			
			if ( Lang13.Bool( base.Stat() ) ) {
				
				if ( !this.docile ) {
					Interface13.Stat( null, "Nutrition: " + this.nutrition + "/" + this.get_max_nutrition() );
				}

				if ( this.amount_grown >= 10 ) {
					
					if ( this.is_adult ) {
						Interface13.Stat( null, "You can reproduce!" );
					} else {
						Interface13.Stat( null, "You can evolve!" );
					}
				}
				Interface13.Stat( null, "Power Level: " + this.powerlevel );
			}
			return null;
		}

		// Function from file: slime.dm
		public override int Process_Spacemove( dynamic movement_dir = null ) {
			movement_dir = movement_dir ?? 0;

			return 2;
		}

		// Function from file: slime.dm
		public override dynamic ObjBump( Ent_Dynamic O = null ) {
			int probab = 0;

			
			if ( !( this.client != null ) && this.powerlevel > 0 ) {
				probab = 10;

				dynamic _a = this.powerlevel; // Was a switch-case, sorry for the mess.
				if ( 1<=_a&&_a<=2 ) {
					probab = 20;
				} else if ( 3<=_a&&_a<=4 ) {
					probab = 30;
				} else if ( 5<=_a&&_a<=6 ) {
					probab = 40;
				} else if ( 7<=_a&&_a<=8 ) {
					probab = 60;
				} else if ( _a==9 ) {
					probab = 70;
				} else if ( _a==10 ) {
					probab = 95;
				}

				if ( Rand13.PercentChance( probab ) ) {
					
					if ( O is Obj_Structure_Window || O is Obj_Structure_Grille ) {
						
						if ( this.nutrition <= this.get_hunger_nutrition() && !this.Atkcool ) {
							
							if ( this.is_adult || Rand13.PercentChance( 5 ) ) {
								O.attack_slime( this );
								this.Atkcool = true;
								Task13.Schedule( 45, (Task13.Closure)(() => {
									this.Atkcool = false;
									return;
								}));
							}
						}
					}
				}
			}
			return null;
		}

		// Function from file: slime.dm
		public override dynamic movement_delay(  ) {
			dynamic _default = null;

			double health_deficiency = 0;

			
			if ( Convert.ToDouble( this.bodytemperature ) >= 330.2300109863281 ) {
				return -1;
			}
			_default = base.movement_delay();
			health_deficiency = 100 - Convert.ToDouble( this.health );

			if ( health_deficiency >= 45 ) {
				_default += health_deficiency / 25;
			}

			if ( Convert.ToDouble( this.bodytemperature ) < 183.222 ) {
				_default += ( 283.22198486328125 - Convert.ToDouble( this.bodytemperature ) ) / 10 * 1.75;
			}

			if ( this.reagents != null ) {
				
				if ( Lang13.Bool( this.reagents.has_reagent( "morphine" ) ) ) {
					_default *= 2;
				}

				if ( Lang13.Bool( this.reagents.has_reagent( "frostoil" ) ) ) {
					_default *= 5;
				}
			}

			if ( Convert.ToDouble( this.health ) <= 0 ) {
				_default *= 2;
			}
			_default += GlobalVars.config.slime_delay;
			return _default;
		}

		// Function from file: slime.dm
		public override bool regenerate_icons(  ) {
			string icon_text = null;

			this.overlays.len = 0;
			icon_text = "" + this.colour + " " + ( this.is_adult ? "adult" : "baby" ) + " slime";
			this.icon_dead = "" + icon_text + " dead";

			if ( this.stat != 2 ) {
				this.icon_state = icon_text;

				if ( Lang13.Bool( this.mood ) ) {
					this.overlays.Add( new Image( "icons/mob/slimes.dmi", null, "aslime-" + this.mood ) );
				}
			} else {
				this.icon_state = this.icon_dead;
			}
			base.regenerate_icons();
			return false;
		}

		// Function from file: say.dm
		public override string Hear( string message = null, dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null, ByTable spans = null ) {
			
			if ( speaker != this && !Lang13.Bool( radio_freq ) ) {
				
				if ( this.Friends.Contains( speaker ) ) {
					this.speech_buffer = new ByTable();
					this.speech_buffer.Add( speaker );
					this.speech_buffer.Add( String13.ToLower( String13.HtmlDecode( message ) ) );
				}
			}
			base.Hear( message, (object)(speaker), message_langs, (object)(raw_message), (object)(radio_freq), spans );
			return null;
		}

		// Function from file: life.dm
		public override void handle_automated_speech(  ) {
			return;
		}

		// Function from file: life.dm
		public override bool handle_automated_movement(  ) {
			return false;
		}

		// Function from file: life.dm
		public override bool handle_regular_status_updates(  ) {
			
			if ( base.handle_regular_status_updates() ) {
				
				if ( Rand13.PercentChance( 30 ) ) {
					this.adjustBruteLoss( -1 );
				}
			}
			return false;
		}

		// Function from file: life.dm
		public override void handle_environment( GasMixture environment = null ) {
			dynamic loc_temp = null;

			
			if ( !( environment != null ) ) {
				return;
			}
			loc_temp = this.get_temperature( environment );

			if ( Convert.ToDouble( loc_temp ) < 310.41 ) {
				this.bodytemperature += this.adjust_body_temperature( this.bodytemperature, loc_temp, true );
			} else {
				this.bodytemperature += this.adjust_body_temperature( this.bodytemperature, loc_temp, true );
			}

			if ( Convert.ToDouble( this.bodytemperature ) < 278.41 ) {
				
				if ( Convert.ToDouble( this.bodytemperature ) <= 233.41 ) {
					this.Tempstun = true;
				}

				if ( Convert.ToDouble( this.bodytemperature ) <= 223.41 ) {
					
					if ( Convert.ToDouble( this.bodytemperature ) <= 50 ) {
						this.adjustBruteLoss( 200 );
					} else {
						this.adjustBruteLoss( Num13.Floor( Math.Sqrt( Convert.ToDouble( this.bodytemperature ) ) ) * 2 );
					}
				}
			} else {
				this.Tempstun = false;
			}
			this.updatehealth();
			return;
		}

		// Function from file: subtypes.dm
		public ByTable mutation_table( string colour = null ) {
			ByTable slime_mutation = null;

			slime_mutation = new ByTable( 4 );

			switch ((string)( colour )) {
				case "grey":
					slime_mutation[1] = "orange";
					slime_mutation[2] = "metal";
					slime_mutation[3] = "blue";
					slime_mutation[4] = "purple";
					break;
				case "purple":
					slime_mutation[1] = "dark purple";
					slime_mutation[2] = "dark blue";
					slime_mutation[3] = "green";
					slime_mutation[4] = "green";
					break;
				case "metal":
					slime_mutation[1] = "silver";
					slime_mutation[2] = "yellow";
					slime_mutation[3] = "gold";
					slime_mutation[4] = "gold";
					break;
				case "orange":
					slime_mutation[1] = "dark purple";
					slime_mutation[2] = "yellow";
					slime_mutation[3] = "red";
					slime_mutation[4] = "red";
					break;
				case "blue":
					slime_mutation[1] = "dark blue";
					slime_mutation[2] = "silver";
					slime_mutation[3] = "pink";
					slime_mutation[4] = "pink";
					break;
				case "dark blue":
					slime_mutation[1] = "purple";
					slime_mutation[2] = "blue";
					slime_mutation[3] = "cerulean";
					slime_mutation[4] = "cerulean";
					break;
				case "dark purple":
					slime_mutation[1] = "purple";
					slime_mutation[2] = "orange";
					slime_mutation[3] = "sepia";
					slime_mutation[4] = "sepia";
					break;
				case "yellow":
					slime_mutation[1] = "metal";
					slime_mutation[2] = "orange";
					slime_mutation[3] = "bluespace";
					slime_mutation[4] = "bluespace";
					break;
				case "silver":
					slime_mutation[1] = "metal";
					slime_mutation[2] = "blue";
					slime_mutation[3] = "pyrite";
					slime_mutation[4] = "pyrite";
					break;
				case "pink":
					slime_mutation[1] = "pink";
					slime_mutation[2] = "pink";
					slime_mutation[3] = "light pink";
					slime_mutation[4] = "light pink";
					break;
				case "red":
					slime_mutation[1] = "red";
					slime_mutation[2] = "red";
					slime_mutation[3] = "oil";
					slime_mutation[4] = "oil";
					break;
				case "gold":
					slime_mutation[1] = "gold";
					slime_mutation[2] = "gold";
					slime_mutation[3] = "adamantine";
					slime_mutation[4] = "adamantine";
					break;
				case "green":
					slime_mutation[1] = "green";
					slime_mutation[2] = "green";
					slime_mutation[3] = "black";
					slime_mutation[4] = "black";
					break;
				default:
					slime_mutation[1] = colour;
					slime_mutation[2] = colour;
					slime_mutation[3] = colour;
					slime_mutation[4] = colour;
					break;
			}
			return slime_mutation;
		}

		// Function from file: slime.dm
		public void discipline_slime( dynamic user = null ) {
			
			if ( this.stat == 2 ) {
				return;
			}

			if ( Rand13.PercentChance( 80 ) && !( this.client != null ) ) {
				this.Discipline++;

				if ( !this.is_adult ) {
					
					if ( this.Discipline == 1 ) {
						this.attacked = 0;
					}
				}
			}

			if ( this.Target != null ) {
				this.Target = null;
			}

			if ( this.buckled != null ) {
				this.Feedstop( true );
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.SStun = true;
				Task13.Sleep( Rand13.Int( 20, 60 ) );
				this.SStun = false;
				return;
			}));
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.canmove = false;

				if ( Lang13.Bool( user ) ) {
					Map13.StepAway( this, user, 15 );
				}
				Task13.Sleep( 3 );

				if ( Lang13.Bool( user ) ) {
					Map13.StepAway( this, user, 15 );
				}
				this.canmove = true;
				return;
			}));
			return;
		}

		// Function from file: slime.dm
		public void apply_water(  ) {
			this.adjustBruteLoss( Rand13.Int( 15, 20 ) );

			if ( !( this.client != null ) ) {
				
				if ( this.Target != null ) {
					this.Target = null;
					this.Discipline++;
				}
			}
			return;
		}

		// Function from file: powers.dm
		public void Feedstop( bool? silent = null ) {
			silent = silent ?? false;

			
			if ( this.buckled != null ) {
				
				if ( !( silent == true ) ) {
					this.visible_message( "<span class='warning'>" + this + " has let go of " + this.buckled + "!</span>", "<span class='notice'><i>I stopped feeding.</i></span>" );
				}
				this.buckled.unbuckle_mob( true );
			}
			return;
		}

		// Function from file: powers.dm
		public void Feedon( dynamic M = null ) {
			((Ent_Dynamic)M).unbuckle_mob( true );

			if ( ((Ent_Dynamic)M).buckle_mob( this, true ) ) {
				((Ent_Static)M).visible_message( "<span class='danger'>The " + this.name + " has latched onto " + M + "!</span>", "<span class='userdanger'>The " + this.name + " has latched onto " + M + "!</span>" );
			} else {
				this.WriteMsg( "<span class='warning'><i>I have failed to latch onto the subject</i></span>" );
			}
			return;
		}

		// Function from file: powers.dm
		public bool CanFeedon( dynamic M = null ) {
			
			if ( !this.Adjacent( M ) ) {
				return false;
			}

			if ( this.buckled != null ) {
				this.Feedstop();
				return false;
			}

			if ( M is Mob_Living_SimpleAnimal_Slime ) {
				this.WriteMsg( "<span class='warning'><i>I can't latch onto another slime...</i></span>" );
				return false;
			}

			if ( this.docile ) {
				this.WriteMsg( "<span class='notice'><i>I'm not hungry anymore...</i></span>" );
				return false;
			}

			if ( this.stat != 0 ) {
				this.WriteMsg( "<span class='warning'><i>I must be conscious to do this...</i></span>" );
				return false;
			}

			if ( Convert.ToInt32( M.stat ) == 2 ) {
				this.WriteMsg( "<span class='warning'><i>This subject does not have a strong enough life energy...</i></span>" );
				return false;
			}

			if ( M.buckled_mob is Mob_Living_SimpleAnimal_Slime ) {
				this.WriteMsg( "<span class='warning'><i>Another slime is already feeding on this subject...</i></span>" );
				return false;
			}
			return true;
		}

		// Function from file: life.dm
		public bool will_hunt( int? hunger = null ) {
			hunger = hunger ?? -1;

			
			if ( this.docile ) {
				return false;
			}

			if ( hunger == 2 || this.rabid || this.attacked != 0 ) {
				return true;
			}

			if ( Lang13.Bool( this.Leader ) ) {
				return false;
			}

			if ( this.holding_still != 0 ) {
				return false;
			}
			return true;
		}

		// Function from file: life.dm
		public int get_starve_nutrition(  ) {
			
			if ( this.is_adult ) {
				return 300;
			} else {
				return 200;
			}
		}

		// Function from file: life.dm
		public int get_hunger_nutrition(  ) {
			
			if ( this.is_adult ) {
				return 600;
			} else {
				return 500;
			}
		}

		// Function from file: life.dm
		public int get_grow_nutrition(  ) {
			
			if ( this.is_adult ) {
				return 1000;
			} else {
				return 800;
			}
		}

		// Function from file: life.dm
		public int get_max_nutrition(  ) {
			
			if ( this.is_adult ) {
				return 1200;
			} else {
				return 1000;
			}
		}

		// Function from file: life.dm
		public void handle_speech(  ) {
			string to_say = null;
			Mob who = null;
			string phrase = null;
			int t = 0;
			int slimes_near = 0;
			int dead_slimes = 0;
			ByTable friends_near = null;
			Mob_Living L = null;
			ByTable phrases = null;
			dynamic M = null;

			
			if ( this.speech_buffer.len > 0 ) {
				who = this.speech_buffer[1];
				phrase = this.speech_buffer[2];

				if ( String13.FindIgnoreCase( phrase, String13.NumberToString( this.number ), 1, 0 ) != 0 || String13.FindIgnoreCase( phrase, "slimes", 1, 0 ) != 0 ) {
					
					if ( String13.FindIgnoreCase( phrase, "hello", 1, 0 ) != 0 || String13.FindIgnoreCase( phrase, "hi", 1, 0 ) != 0 ) {
						to_say = Rand13.Pick(new object [] { "Hello...", "Hi..." });
					} else if ( String13.FindIgnoreCase( phrase, "follow", 1, 0 ) != 0 ) {
						
						if ( Lang13.Bool( this.Leader ) ) {
							
							if ( this.Leader == who ) {
								to_say = Rand13.Pick(new object [] { "Yes...", "Lead...", "Following..." });
							} else if ( Convert.ToDouble( this.Friends[who] ) > Convert.ToDouble( this.Friends[this.Leader] ) ) {
								this.Leader = who;
								to_say = "Yes... I follow " + who + "...";
							} else {
								to_say = "No... I follow " + this.Leader + "...";
							}
						} else if ( Convert.ToDouble( this.Friends[who] ) > 2 ) {
							this.Leader = who;
							to_say = "I follow...";
						} else {
							to_say = Rand13.Pick(new object [] { "No...", "I won't follow..." });
						}
					} else if ( String13.FindIgnoreCase( phrase, "stop", 1, 0 ) != 0 ) {
						
						if ( this.buckled != null ) {
							
							if ( Convert.ToDouble( this.Friends[who] ) > 4 ) {
								this.Feedstop();
								this.Target = null;

								if ( Convert.ToDouble( this.Friends[who] ) < 7 ) {
									this.Friends[who]--;
									to_say = "Grrr...";
								} else {
									to_say = "Fine...";
								}
							}
						} else if ( this.Target != null ) {
							
							if ( Convert.ToDouble( this.Friends[who] ) > 3 ) {
								this.Target = null;

								if ( Convert.ToDouble( this.Friends[who] ) < 6 ) {
									this.Friends[who]--;
									to_say = "Grrr...";
								} else {
									to_say = "Fine...";
								}
							}
						} else if ( Lang13.Bool( this.Leader ) ) {
							
							if ( this.Leader == who ) {
								to_say = "Yes... I'll stay...";
								this.Leader = null;
							} else if ( Convert.ToDouble( this.Friends[who] ) > Convert.ToDouble( this.Friends[this.Leader] ) ) {
								this.Leader = null;
								to_say = "Yes... I'll stop...";
							} else {
								to_say = "No... I'll keep following...";
							}
						}
					} else if ( String13.FindIgnoreCase( phrase, "stay", 1, 0 ) != 0 ) {
						
						if ( Lang13.Bool( this.Leader ) ) {
							
							if ( this.Leader == who ) {
								this.holding_still = Convert.ToInt32( this.Friends[who] * 10 );
								to_say = "Yes... Staying...";
							} else if ( Convert.ToDouble( this.Friends[who] ) > Convert.ToDouble( this.Friends[this.Leader] ) ) {
								this.holding_still = Convert.ToInt32( ( this.Friends[who] - this.Friends[this.Leader] ) * 10 );
								to_say = "Yes... Staying...";
							} else {
								to_say = "No... I'll keep following...";
							}
						} else if ( Convert.ToDouble( this.Friends[who] ) > 2 ) {
							this.holding_still = Convert.ToInt32( this.Friends[who] * 10 );
							to_say = "Yes... Staying...";
						} else {
							to_say = "No... I won't stay...";
						}
					}
				}
				this.speech_buffer = new ByTable();
			}

			if ( Lang13.Bool( to_say ) ) {
				this.say( to_say );
			} else if ( Rand13.PercentChance( 1 ) ) {
				this.emote( Rand13.Pick(new object [] { "bounce", "sway", "light", "vibrate", "jiggle" }) );
			} else {
				t = 10;
				slimes_near = 0;
				dead_slimes = 0;
				friends_near = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Mob_Living) )) {
					L = _a;
					

					if ( L is Mob_Living_SimpleAnimal_Slime && L != this ) {
						slimes_near++;

						if ( L.stat == 2 ) {
							dead_slimes++;
						}
					}

					if ( this.Friends.Contains( L ) ) {
						t += 20;
						friends_near.Add( L );
					}
				}

				if ( this.nutrition < this.get_hunger_nutrition() ) {
					t += 10;
				}

				if ( this.nutrition < this.get_starve_nutrition() ) {
					t += 10;
				}

				if ( Rand13.PercentChance( 2 ) && Rand13.PercentChance( t ) ) {
					phrases = new ByTable();

					if ( this.Target != null ) {
						phrases.Add( "" + this.Target + "... looks tasty..." );
					}

					if ( this.nutrition < this.get_starve_nutrition() ) {
						phrases.Add( "So... hungry..." );
						phrases.Add( "Very... hungry..." );
						phrases.Add( "Need... food..." );
						phrases.Add( "Must... eat..." );
					} else if ( this.nutrition < this.get_hunger_nutrition() ) {
						phrases.Add( "Hungry..." );
						phrases.Add( "Where is the food?" );
						phrases.Add( "I want to eat..." );
					}
					phrases.Add( "Rawr..." );
					phrases.Add( "Blop..." );
					phrases.Add( "Blorble..." );

					if ( this.rabid || this.attacked != 0 ) {
						phrases.Add( "Hrr..." );
						phrases.Add( "Nhuu..." );
						phrases.Add( "Unn..." );
					}

					if ( this.mood == ":3" ) {
						phrases.Add( "Purr..." );
					}

					if ( this.attacked != 0 ) {
						phrases.Add( "Grrr..." );
					}

					if ( Convert.ToDouble( this.bodytemperature ) < 273.41 ) {
						phrases.Add( "Cold..." );
					}

					if ( Convert.ToDouble( this.bodytemperature ) < 243.41 ) {
						phrases.Add( "So... cold..." );
						phrases.Add( "Very... cold..." );
					}

					if ( Convert.ToDouble( this.bodytemperature ) < 223.41 ) {
						phrases.Add( "..." );
						phrases.Add( "C... c..." );
					}

					if ( this.buckled != null ) {
						phrases.Add( "Nom..." );
						phrases.Add( "Tasty..." );
					}

					if ( this.powerlevel > 3 ) {
						phrases.Add( "Bzzz..." );
					}

					if ( this.powerlevel > 5 ) {
						phrases.Add( "Zap..." );
					}

					if ( this.powerlevel > 8 ) {
						phrases.Add( "Zap... Bzz..." );
					}

					if ( this.mood == "sad" ) {
						phrases.Add( "Bored..." );
					}

					if ( slimes_near != 0 ) {
						phrases.Add( "Brother..." );
					}

					if ( slimes_near > 1 ) {
						phrases.Add( "Brothers..." );
					}

					if ( dead_slimes != 0 ) {
						phrases.Add( "What happened?" );
					}

					if ( !( slimes_near != 0 ) ) {
						phrases.Add( "Lonely..." );
					}

					foreach (dynamic _b in Lang13.Enumerate( friends_near )) {
						M = _b;
						
						phrases.Add( "" + M + "... friend..." );

						if ( this.nutrition < this.get_hunger_nutrition() ) {
							phrases.Add( "" + M + "... feed me..." );
						}
					}
					this.say( Rand13.PickFromTable( phrases ) );
				}
			}
			return;
		}

		// Function from file: life.dm
		public void handle_mood(  ) {
			string newmood = null;

			newmood = "";

			if ( this.rabid || this.attacked != 0 ) {
				newmood = "angry";
			} else if ( this.docile ) {
				newmood = ":3";
			} else if ( this.Target != null ) {
				newmood = "mischevous";
			}

			if ( !Lang13.Bool( newmood ) ) {
				
				if ( this.Discipline != 0 && Rand13.PercentChance( 25 ) ) {
					newmood = "pout";
				} else if ( Rand13.PercentChance( 1 ) ) {
					newmood = Rand13.Pick(new object [] { "sad", ":3", "pout" });
				}
			}

			if ( ( this.mood == "sad" || this.mood == ":3" || this.mood == "pout" ) && !Lang13.Bool( newmood ) ) {
				
				if ( Rand13.PercentChance( 75 ) ) {
					newmood = this.mood;
				}
			}

			if ( newmood != this.mood ) {
				this.mood = newmood;
				this.regenerate_icons();
			}
			return;
		}

		// Function from file: life.dm
		public void handle_targets(  ) {
			int hungry = 0;
			dynamic nofriend = null;
			ByTable targets = null;
			Mob_Living L = null;
			Mob_Living H = null;
			Mob_Living_Carbon C = null;

			
			if ( this.Tempstun ) {
				
				if ( !( this.buckled != null ) ) {
					this.canmove = false;
				}
			} else {
				this.canmove = true;
			}

			if ( this.attacked > 50 ) {
				this.attacked = 50;
			}

			if ( this.attacked > 0 ) {
				this.attacked--;
			}

			if ( this.Discipline > 0 ) {
				
				if ( this.Discipline >= 5 && this.rabid ) {
					
					if ( Rand13.PercentChance( 60 ) ) {
						this.rabid = false;
					}
				}

				if ( Rand13.PercentChance( 10 ) ) {
					this.Discipline--;
				}
			}

			if ( !( this.client != null ) ) {
				
				if ( !this.canmove ) {
					return;
				}

				if ( this.buckled != null ) {
					return;
				}

				if ( this.Target != null ) {
					this.target_patience--;

					if ( this.target_patience <= 0 || this.SStun || this.Discipline != 0 || this.attacked != 0 || this.docile ) {
						this.target_patience = 0;
						this.Target = null;
					}
				}

				if ( this.AIproc && this.SStun ) {
					return;
				}
				hungry = 0;

				if ( this.nutrition < this.get_starve_nutrition() ) {
					hungry = 2;
				} else if ( this.nutrition < this.get_grow_nutrition() && Rand13.PercentChance( 25 ) || this.nutrition < this.get_hunger_nutrition() ) {
					hungry = 1;
				}

				if ( hungry == 2 && !( this.client != null ) ) {
					
					if ( this.Friends.len > 0 && Rand13.PercentChance( 1 ) ) {
						nofriend = Rand13.PickFromTable( this.Friends );
						this.Friends[nofriend]--;
					}
				}

				if ( !( this.Target != null ) ) {
					
					if ( this.will_hunt() && hungry != 0 || this.attacked != 0 || this.rabid ) {
						targets = new ByTable();

						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Mob_Living) )) {
							L = _a;
							

							if ( L is Mob_Living_SimpleAnimal_Slime || L.stat == 2 ) {
								continue;
							}

							if ( this.Friends.Contains( L ) ) {
								continue;
							}

							if ( L is Mob_Living_Silicon && ( this.rabid || this.attacked != 0 ) ) {
								targets.Add( L );
							}

							if ( L is Mob_Living_Carbon_Human ) {
								H = L;

								if ( ((dynamic)H).dna.species.ignored_by.Contains( this.type ) ) {
									continue;
								}
							}

							if ( L.buckled_mob is Mob_Living_SimpleAnimal_Slime ) {
								continue;
							}
							targets.Add( L );
						}

						if ( targets.len > 0 ) {
							
							if ( this.attacked != 0 || this.rabid || hungry == 2 ) {
								this.Target = targets[1];
							} else {
								
								foreach (dynamic _b in Lang13.Enumerate( targets, typeof(Mob_Living_Carbon) )) {
									C = _b;
									

									if ( !( this.Discipline != 0 ) && Rand13.PercentChance( 5 ) ) {
										
										if ( C is Mob_Living_Carbon_Human || C is Mob_Living_Carbon_Alien_Humanoid ) {
											this.Target = C;
											break;
										}
									}

									if ( C is Mob_Living_Carbon_Alien_Larva || C is Mob_Living_Carbon_Monkey ) {
										this.Target = C;
										break;
									}
								}
							}
						}
					}

					if ( this.Target != null ) {
						this.target_patience = Rand13.Int( 5, 7 );

						if ( this.is_adult ) {
							this.target_patience += 3;
						}
					}
				}

				if ( !( this.Target != null ) ) {
					
					if ( Lang13.Bool( this.Leader ) ) {
						
						if ( this.holding_still != 0 ) {
							this.holding_still = Num13.MaxInt( this.holding_still - 1, 0 );
						} else if ( this.canmove && this.loc is Tile ) {
							Map13.StepTowards( this, this.Leader, 0 );
						}
					} else if ( hungry != 0 ) {
						
						if ( this.holding_still != 0 ) {
							this.holding_still = Num13.MaxInt( this.holding_still - hungry, 0 );
						} else if ( this.canmove && this.loc is Tile && Rand13.PercentChance( 50 ) ) {
							Map13.Step( this, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) ) );
						}
					} else if ( this.holding_still != 0 ) {
						this.holding_still = Num13.MaxInt( this.holding_still - 1, 0 );
					} else if ( this.docile && this.pulledby != null ) {
						this.holding_still = 10;
					} else if ( this.canmove && this.loc is Tile && Rand13.PercentChance( 33 ) ) {
						Map13.Step( this, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) ) );
					}
				} else if ( !this.AIproc ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.AIprocess();
						return;
					}));
				}
			}
			return;
		}

		// Function from file: life.dm
		public void add_nutrition( int? nutrition_to_add = null ) {
			nutrition_to_add = nutrition_to_add ?? 0;

			this.nutrition = Num13.MinInt( ((int)( this.nutrition + ( nutrition_to_add ??0) )), this.get_max_nutrition() );

			if ( this.nutrition >= this.get_grow_nutrition() ) {
				
				if ( this.powerlevel < 10 ) {
					
					if ( Rand13.PercentChance( 30 - this.powerlevel * 2 ) ) {
						this.powerlevel++;
					}
				}
			} else if ( this.nutrition >= this.get_hunger_nutrition() + 100 ) {
				
				if ( this.powerlevel < 5 ) {
					
					if ( Rand13.PercentChance( 25 - this.powerlevel * 5 ) ) {
						this.powerlevel++;
					}
				}
			}
			return;
		}

		// Function from file: life.dm
		public void handle_nutrition(  ) {
			
			if ( this.docile ) {
				this.nutrition = 700;
				return;
			}

			if ( Rand13.PercentChance( 15 ) ) {
				this.nutrition -= ( this.is_adult ?1:0) + 1;
			}

			if ( this.nutrition <= 0 ) {
				this.nutrition = 0;

				if ( Rand13.PercentChance( 75 ) ) {
					this.adjustBruteLoss( Rand13.Int( 0, 5 ) );
				}
			} else if ( this.nutrition >= this.get_grow_nutrition() && this.amount_grown < 10 ) {
				this.nutrition -= 20;
				this.amount_grown++;
			}

			if ( this.amount_grown >= 10 && !( this.buckled != null ) && !( this.Target != null ) && !Lang13.Bool( this.ckey ) ) {
				
				if ( this.is_adult ) {
					this.__CallVerb("Reproduce" );
				} else {
					this.__CallVerb("Evolve" );
				}
			}
			return;
		}

		// Function from file: life.dm
		public void handle_feeding(  ) {
			Ent_Dynamic M = null;
			Ent_Dynamic C = null;
			Ent_Dynamic SA = null;

			
			if ( !( this.buckled is Mob ) ) {
				return;
			}
			M = this.buckled;

			if ( Convert.ToInt32( ((dynamic)M).stat ) == 2 ) {
				
				if ( !( this.client != null ) ) {
					
					if ( !this.rabid && !( this.attacked != 0 ) ) {
						
						if ( Lang13.Bool( ((dynamic)M).LAssailant ) && ((dynamic)M).LAssailant != M ) {
							
							if ( Rand13.PercentChance( 50 ) ) {
								
								if ( !this.Friends.Contains( ((dynamic)M).LAssailant ) ) {
									this.Friends[((dynamic)M).LAssailant] = 1;
								} else {
									this.Friends[((dynamic)M).LAssailant]++;
								}
							}
						}
					}
				} else {
					this.WriteMsg( "<i>This subject does not have a strong enough life energy anymore...</i>" );
				}

				if ( Lang13.Bool( ((dynamic)M).client ) && M is Mob_Living_Carbon_Human ) {
					
					if ( Rand13.PercentChance( 85 ) ) {
						this.rabid = true;
					}
				}
				this.Feedstop();
				return;
			}

			if ( M is Mob_Living_Carbon ) {
				C = M;
				((Mob_Living)C).adjustCloneLoss( Rand13.Int( 2, 4 ) );
				((Mob_Living)C).adjustToxLoss( Rand13.Int( 1, 2 ) );

				if ( Rand13.PercentChance( 10 ) && Lang13.Bool( ((dynamic)C).client ) ) {
					((dynamic)C).WriteMsg( "<span class='userdanger'>" + Rand13.Pick(new object [] { "You can feel your body becoming weak!", "You feel like you're about to die!", "You feel every part of your body screaming in agony!", "A low, rolling pain passes through your body!", "Your body feels as if it's falling apart!", "You feel extremely weak!", "A sharp, deep pain bathes every inch of your body!" }) + "</span>" );
				}
			} else if ( M is Mob_Living_SimpleAnimal ) {
				SA = M;
				((Mob_Living)SA).adjustBruteLoss( ( this.is_adult ? Rand13.Int( 4, 7 ) : Rand13.Int( 3, 4 ) ) );
			} else {
				this.WriteMsg( "<span class='warning'>" + Rand13.Pick(new object [] { "This subject is incompatible", "This subject does not have a life energy", "This subject is empty", "I am not satisified", "I can not feed from this subject", "I do not feel nourished", "This subject is not food" }) + "!</span>" );
				this.Feedstop();
				return;
			}
			this.add_nutrition( Rand13.Int( 7, 15 ) );
			this.adjustBruteLoss( -3 );
			return;
		}

		// Function from file: life.dm
		public dynamic adjust_body_temperature( dynamic current = null, dynamic loc_temp = null, bool boost = false ) {
			dynamic temperature = null;
			double difference = 0;
			double increments = 0;
			double change = 0;
			dynamic temp_change = null;

			temperature = current;
			difference = Math.Abs( Convert.ToDouble( current - loc_temp ) );

			if ( difference > 50 ) {
				increments = difference / 5;
			} else {
				increments = difference / 10;
			}
			change = increments * ( boost ?1:0);

			if ( Convert.ToDouble( current ) < Convert.ToDouble( loc_temp ) ) {
				temperature = Num13.MinInt( Convert.ToInt32( loc_temp ), Convert.ToInt32( temperature + change ) );
			} else if ( Convert.ToDouble( current ) > Convert.ToDouble( loc_temp ) ) {
				temperature = Num13.MaxInt( Convert.ToInt32( loc_temp ), Convert.ToInt32( temperature - change ) );
			}
			temp_change = temperature - current;
			return temp_change;
		}

		// Function from file: life.dm
		public void AIprocess(  ) {
			int hungry = 0;
			dynamic sleeptime = null;

			
			if ( this.AIproc || this.stat == 2 || this.client != null ) {
				return;
			}
			hungry = 0;

			if ( this.nutrition < this.get_starve_nutrition() ) {
				hungry = 2;
			} else if ( this.nutrition < this.get_grow_nutrition() && Rand13.PercentChance( 25 ) || this.nutrition < this.get_hunger_nutrition() ) {
				hungry = 1;
			}
			this.AIproc = true;

			while (this.AIproc && this.stat != 2 && ( this.attacked != 0 || hungry != 0 || this.rabid || this.buckled != null )) {
				
				if ( this.buckled != null ) {
					break;
				}

				if ( !( this.Target != null ) || this.client != null ) {
					break;
				}

				if ( Convert.ToDouble( this.Target.health ) <= -70 || this.Target.stat == 2 ) {
					this.Target = null;
					this.AIproc = false;
					break;
				}

				if ( this.Target != null ) {
					
					if ( this.Target.buckled_mob is Mob_Living_SimpleAnimal_Slime ) {
						this.Target = null;
						this.AIproc = false;
						break;
					}

					if ( !this.AIproc ) {
						break;
					}

					if ( Map13.FetchInView( this, 1 ).Contains( this.Target ) ) {
						
						if ( this.Target is Mob_Living_Silicon ) {
							
							if ( !this.Atkcool ) {
								this.Atkcool = true;
								Task13.Schedule( 45, (Task13.Closure)(() => {
									this.Atkcool = false;
									return;
								}));

								if ( this.Target.Adjacent( this ) ) {
									this.Target.attack_slime( this );
								}
							}
							return;
						}

						if ( !Lang13.Bool( this.Target.lying ) && Rand13.PercentChance( 80 ) ) {
							
							if ( this.Target.client != null && Convert.ToDouble( this.Target.health ) >= 20 ) {
								
								if ( !this.Atkcool ) {
									this.Atkcool = true;
									Task13.Schedule( 45, (Task13.Closure)(() => {
										this.Atkcool = false;
										return;
									}));

									if ( this.Target.Adjacent( this ) ) {
										this.Target.attack_slime( this );
									}
								}
							} else if ( !this.Atkcool && this.Target.Adjacent( this ) ) {
								this.Feedon( this.Target );
							}
						} else if ( !this.Atkcool && this.Target.Adjacent( this ) ) {
							this.Feedon( this.Target );
						}
					} else if ( Map13.FetchInView( this, 7 ).Contains( this.Target ) ) {
						
						if ( !this.Target.Adjacent( this ) ) {
							Map13.StepTowards( this, this.Target, 0 );
						}
					} else {
						this.Target = null;
						this.AIproc = false;
						break;
					}
				}
				sleeptime = this.movement_delay();

				if ( Convert.ToDouble( sleeptime ) <= 0 ) {
					sleeptime = 1;
				}
				Task13.Sleep( Convert.ToInt32( sleeptime + 2 ) );
			}
			this.AIproc = false;
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			
			if ( this.notransform == true ) {
				return false;
			}

			if ( base.Life() ) {
				
				if ( this.buckled != null ) {
					this.handle_feeding();
				}
				this.handle_nutrition();
				this.handle_targets();

				if ( !Lang13.Bool( this.ckey ) ) {
					this.handle_mood();
					this.handle_speech();
				}
			}
			return false;
		}

		// Function from file: tgstation.dme
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			int t1 = 0;
			int m_type2 = 0;
			bool regenerate_icons = false;
			string message2 = null;

			
			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				act = String13.SubStr( act, 1, t1 );
			}
			m_type2 = 1;

			switch ((string)( act )) {
				case "bounce":
				case "bounces":
					message2 = "<B>The " + this.name + "</B> bounces in place.";
					m_type2 = 1;
					break;
				case "jiggle":
				case "jiggles":
					message2 = "<B>The " + this.name + "</B> jiggles!";
					m_type2 = 1;
					break;
				case "light":
				case "lights":
					message2 = "<B>The " + this.name + "</B> lights up for a bit, then stops.";
					m_type2 = 1;
					break;
				case "moan":
				case "moans":
					message2 = "<B>The " + this.name + "</B> moans.";
					m_type2 = 2;
					break;
				case "shiver":
				case "shivers":
					message2 = "<B>The " + this.name + "</B> shivers.";
					m_type2 = 2;
					break;
				case "sway":
				case "sways":
					message2 = "<B>The " + this.name + "</B> sways around dizzily.";
					m_type2 = 1;
					break;
				case "twitch":
				case "twitches":
					message2 = "<B>The " + this.name + "</B> twitches.";
					m_type2 = 1;
					break;
				case "vibrate":
				case "vibrates":
					message2 = "<B>The " + this.name + "</B> vibrates!";
					m_type2 = 1;
					break;
				case "noface":
					this.mood = null;
					regenerate_icons = true;
					break;
				case "smile":
				case "smiles":
					this.mood = "mischevous";
					regenerate_icons = true;
					break;
				case ":3":
					this.mood = ":33";
					regenerate_icons = true;
					break;
				case "pout":
				case "pouts":
					this.mood = "pout";
					regenerate_icons = true;
					break;
				case "frown":
				case "frowns":
					this.mood = "sad";
					regenerate_icons = true;
					break;
				case "scowl":
				case "scowls":
					this.mood = "angry";
					regenerate_icons = true;
					break;
				case "help":
					this.WriteMsg( @"Help for slime emotes. You can use these emotes with say ""*emote"":

bounce, jiggle, light, moan, shiver, sway, twitch, vibrate. 

You may also change your face with: 

smile, :3, pout, frown, scowl, noface" );
					break;
				default:
					this.WriteMsg( "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
					break;
			}

			if ( Lang13.Bool( message2 ) && this.stat == 0 ) {
				
				if ( this.client != null ) {
					GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message2 );
				}

				if ( ( m_type2 & 1 ) != 0 ) {
					this.visible_message( message2 );
				} else {
					this.audible_message( message2 );
				}
			}

			if ( regenerate_icons ) {
				this.regenerate_icons();
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic Destroy(  ) {
			Obj_Machinery_Computer_CameraAdvanced_Xenobio X = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_CameraAdvanced_Xenobio) )) {
				X = _a;
				

				if ( X.stored_slimes.Contains( this ) ) {
					X.stored_slimes.Remove( this );
				}
			}
			return base.Destroy();
		}

		// Function from file: death.dm
		public override dynamic gib( dynamic animation = null ) {
			this.death( true );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			Mob_Living_SimpleAnimal_Slime M = null;
			Action_Innate_Slime_Evolve E = null;

			
			if ( this.stat == 2 ) {
				return false;
			}

			if ( !( gibbed == true ) ) {
				
				if ( this.is_adult ) {
					M = new Mob_Living_SimpleAnimal_Slime( this.loc );
					M.colour = this.colour;
					M.rabid = true;
					M.regenerate_icons();
					this.is_adult = false;
					this.maxHealth = 150;
					E = new Action_Innate_Slime_Evolve();
					E.Grant( this );
					this.revive();
					this.regenerate_icons();
					this.number = Rand13.Int( 1, 1000 );
					this.name = "" + this.colour + " " + ( this.is_adult ? "adult" : "baby" ) + " slime (" + this.number + ")";
					return false;
				}
			}

			if ( this.buckled != null ) {
				this.Feedstop( true );
			}
			this.stat = 2;
			this.overlays.len = 0;
			this.update_canmove();

			if ( this.blind != null ) {
				this.blind.layer = 0;
			}

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				((GameMode)GlobalVars.ticker.mode).check_win();
			}
			return base.death( gibbed, toast );
		}

		// Function from file: ventcrawling.dm
		public override void handle_ventcrawl( Obj_Machinery_Atmospherics A = null ) {
			
			if ( this.buckled != null ) {
				this.WriteMsg( "<i>I can't vent crawl while feeding...</i>" );
				return;
			}
			base.handle_ventcrawl( A );
			return;
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.WriteMsg( "<span class='warning'>This biological resource is somehow resisting our bluespace transceiver. Aborting.</span>" );
			return;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.special_role = "slime";
			this.mind.assigned_role = "slime";
			return;
		}

		// Function from file: other_mobs.dm
		public override bool RestrainedClickOn( dynamic A = null ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( dynamic A = null, bool? proximity_flag = null ) {
			((Ent_Static)A).attack_slime( this );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( desc: "This will make you split into four Slimes.", group: "Slime" )]
		public void Reproduce(  ) {
			ByTable babies = null;
			int new_nutrition = 0;
			int new_powerlevel = 0;
			int? i = null;
			Mob_Living_SimpleAnimal_Slime M = null;
			dynamic new_slime = null;

			
			if ( this.stat != 0 ) {
				this.WriteMsg( "<i>I must be conscious to do this...</i>" );
				return;
			}

			if ( this.is_adult ) {
				
				if ( this.amount_grown >= 10 ) {
					
					if ( this.stat != 0 ) {
						this.WriteMsg( "<i>I must be conscious to do this...</i>" );
						return;
					}
					babies = new ByTable();
					new_nutrition = Num13.Floor( this.nutrition * 081 );
					new_powerlevel = Num13.Floor( this.powerlevel / 4 );
					i = null;
					i = 1;

					while (( i ??0) <= 4) {
						M = new Mob_Living_SimpleAnimal_Slime( this.loc );

						if ( this.mutation_chance >= 100 ) {
							M.colour = "rainbow";
						} else if ( Rand13.PercentChance( this.mutation_chance ) ) {
							M.colour = this.slime_mutation[Rand13.Int( 1, 4 )];
						} else {
							M.colour = this.colour;
						}

						if ( Lang13.Bool( this.ckey ) ) {
							M.nutrition = new_nutrition;
						}
						M.powerlevel = new_powerlevel;

						if ( i != 1 ) {
							Map13.StepAway( M, this, null );
						}
						M.Friends = this.Friends.Copy();
						babies.Add( M );
						M.mutation_chance = Num13.MaxInt( 0, Num13.MinInt( this.mutation_chance + Rand13.Int( 5, -5 ), 100 ) );
						GlobalFuncs.feedback_add_details( "slime_babies_born", "slimebirth_" + GlobalFuncs.replacetext( M.colour, " ", "_" ) );
						i++;
					}
					new_slime = Rand13.PickFromTable( babies );
					new_slime.a_intent = "harm";
					new_slime.languages = this.languages;

					if ( this.mind != null ) {
						this.mind.transfer_to( new_slime );
					} else {
						new_slime.key = this.key;
					}
					GlobalFuncs.qdel( this );
				} else {
					this.WriteMsg( "<i>I am not ready to reproduce yet...</i>" );
				}
			} else {
				this.WriteMsg( "<i>I am not old enough to reproduce yet...</i>" );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( desc: "This will let you evolve from baby to adult slime.", group: "Slime" )]
		public void Evolve(  ) {
			
			if ( this.stat != 0 ) {
				this.WriteMsg( "<i>I must be conscious to do this...</i>" );
				return;
			}

			if ( !this.is_adult ) {
				
				if ( this.amount_grown >= 10 ) {
					this.is_adult = true;
					this.maxHealth = 200;
					this.amount_grown = 0;
					this.regenerate_icons();
					this.name = "" + this.colour + " " + ( this.is_adult ? "adult" : "baby" ) + " slime (" + this.number + ")";
				} else {
					this.WriteMsg( "<i>I am not ready to evolve yet...</i>" );
				}
			} else {
				this.WriteMsg( "<i>I have already evolved...</i>" );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( desc: "This will let you feed on any valid creature in the surrounding area. This should also be used to halt the feeding process.", group: "Slime" )]
		public bool Feed(  ) {
			ByTable choices = null;
			Mob_Living C = null;
			dynamic M = null;

			
			if ( this.stat != 0 ) {
				return false;
			}
			choices = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Mob_Living) )) {
				C = _a;
				

				if ( C != this && this.Adjacent( C ) ) {
					choices.Add( C );
				}
			}
			M = Interface13.Input( this, "Who do you wish to feed on?", null, null, null | choices, InputType.Any );

			if ( !Lang13.Bool( M ) ) {
				return false;
			}

			if ( this.CanFeedon( M ) ) {
				this.Feedon( M );
				return true;
			}
			return false;
		}

	}

}