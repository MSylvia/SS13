// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon : Mob_Living {

		public bool syndicate = false;
		public dynamic laws = null;
		public ByTable alarms_to_show = new ByTable();
		public ByTable alarms_to_clear = new ByTable();
		public dynamic designation = "";
		public dynamic radiomod = "";
		public Obj_Item_Device_Camera_Siliconcam aicamera = null;
		public Obj_Item_Device_Radio v_radio = null;
		public ByTable alarm_types_show = new ByTable().Set( "Motion", 0 ).Set( "Fire", 0 ).Set( "Atmosphere", 0 ).Set( "Power", 0 ).Set( "Camera", 0 );
		public ByTable alarm_types_clear = new ByTable().Set( "Motion", 0 ).Set( "Fire", 0 ).Set( "Atmosphere", 0 ).Set( "Power", 0 ).Set( "Camera", 0 );
		public ByTable lawcheck = new ByTable( 1 );
		public ByTable ioncheck = new ByTable( 1 );
		public int med_hud = 4;
		public int sec_hud = 2;
		public int d_hud = 5;
		public int law_change_counter = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.voice_name = "synthesized voice";
			this.languages = 9;
			this.has_unlimited_silicon_privilege = true;
			this.verb_say = "states";
			this.verb_ask = "queries";
			this.verb_exclaim = "declares";
			this.verb_yell = "alarms";
			this.hud_possible = new ByTable(new object [] { "12", "8", "9" });
		}

		// Function from file: silicon.dm
		public Mob_Living_Silicon ( dynamic loc = null ) : base( (object)(loc) ) {
			AtomHud diag_hud = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			diag_hud = GlobalVars.huds[5];
			diag_hud.add_to_hud( this );
			this.diag_hud_set_status();
			this.diag_hud_set_health();
			return;
		}

		// Function from file: physical.dm
		public override int physical_can_use_topic( Game_Data src_object = null ) {
			return Num13.MaxInt( 1, this.shared_living_ui_distance( src_object ) );
		}

		// Function from file: notcontained.dm
		public override int notcontained_can_use_topic( Game_Data src_object = null ) {
			return this.default_can_use_topic( src_object );
		}

		// Function from file: emote.dm
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			string param = null;
			int t1 = 0;
			dynamic M = null;
			dynamic A = null;
			dynamic M2 = null;
			dynamic A2 = null;
			dynamic M3 = null;
			dynamic A3 = null;
			string input = null;
			dynamic input2 = null;
			dynamic M4 = null;
			dynamic A4 = null;
			dynamic M5 = null;
			dynamic A5 = null;
			dynamic M6 = null;
			dynamic A6 = null;
			dynamic M7 = null;
			dynamic A7 = null;
			dynamic M8 = null;
			dynamic A8 = null;

			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}

			switch ((string)( act )) {
				case "aflap":
					
					if ( !this.restrained() ) {
						message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " wings ANGRILY!" ).ToString();
						m_type = 2;
					}
					m_type = 1;
					break;
				case "beep":
				case "beeps":
					M = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A = _a;
							

							if ( param == A.name ) {
								M = A;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> beeps at " + param + ".";
					} else {
						message = "<B>" + this + "</B> beeps.";
					}
					GlobalFuncs.playsound( this.loc, "sound/machines/twobeep.ogg", 50, 0 );
					m_type = 2;
					break;
				case "bow":
				case "bows":
					
					if ( !( this.buckled != null ) ) {
						M2 = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
								A2 = _b;
								

								if ( param == A2.name ) {
									M2 = A2;
									break;
								}
							}
						}

						if ( !Lang13.Bool( M2 ) ) {
							param = null;
						}

						if ( Lang13.Bool( param ) ) {
							message = "<B>" + this + "</B> bows to " + param + ".";
						} else {
							message = "<B>" + this + "</B> bows.";
						}
					}
					m_type = 1;
					break;
				case "buzz":
					M3 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A3 = _c;
							

							if ( param == A3.name ) {
								M3 = A3;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M3 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> buzzes at " + param + ".";
					} else {
						message = "<B>" + this + "</B> buzzes.";
					}
					GlobalFuncs.playsound( this.loc, "sound/machines/buzz-sigh.ogg", 50, 0 );
					m_type = 2;
					break;
				case "buzz2":
					message = "<B>" + this + "</B> buzzes twice.";
					GlobalFuncs.playsound( this.loc, "sound/machines/buzz-two.ogg", 50, 0 );
					m_type = 2;
					break;
				case "chime":
				case "chimes":
					message = "<B>" + this + "</B> chimes.";
					GlobalFuncs.playsound( this.loc, "sound/machines/chime.ogg", 50, 0 );
					m_type = 2;
					break;
				case "clap":
				case "claps":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> claps.";
						m_type = 2;
					}
					break;
				case "custom":
					
					if ( GlobalFuncs.jobban_isbanned( this, "emote" ) ) {
						this.WriteMsg( "You cannot send custom emotes (banned)" );
						return;
					}

					if ( this.client != null ) {
						
						if ( ( this.client.prefs.muted & 1 ) != 0 ) {
							this.WriteMsg( "You cannot send IC messages (muted)." );
							return;
						}
					}
					input = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Choose an emote to display.", null, null, null, null, InputType.Str | InputType.Null ) ), 1, 1024 );

					if ( !Lang13.Bool( input ) ) {
						return;
					}
					input2 = Interface13.Input( "Is this a visible or hearable emote?", null, null, null, new ByTable(new object [] { "Visible", "Hearable" }), InputType.Any );

					if ( input2 == "Visible" ) {
						m_type = 1;
					} else if ( input2 == "Hearable" ) {
						m_type = 2;
					} else {
						Interface13.Alert( "Unable to use this emote, must be either hearable or visible." );
						return;
					}
					message = "<B>" + this + "</B> " + input;
					break;
				case "deathgasp":
				case "deathgasps":
					message = "<B>" + this + "</B> shudders violently for a moment, then becomes motionless, its eyes slowly darkening.";
					m_type = 1;
					break;
				case "flap":
				case "flaps":
					
					if ( !this.restrained() ) {
						message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " wings." ).ToString();
						m_type = 2;
					}
					break;
				case "glare":
				case "glares":
					M4 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A4 = _d;
							

							if ( param == A4.name ) {
								M4 = A4;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M4 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> glares at " + param + ".";
					} else {
						message = "<B>" + this + "</B> glares.";
					}
					break;
				case "honk":
				case "honks":
					message = "<B>" + this + "</B> honks!";
					GlobalFuncs.playsound( this.loc, "sound/items/bikehorn.ogg", 50, 1 );
					m_type = 2;
					break;
				case "look":
				case "looks":
					M5 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A5 = _e;
							

							if ( param == A5.name ) {
								M5 = A5;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M5 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> looks at " + param + ".";
					} else {
						message = "<B>" + this + "</B> looks.";
					}
					break;
				case "me":
					
					if ( GlobalFuncs.jobban_isbanned( this, "emote" ) ) {
						this.WriteMsg( "You cannot send custom emotes (banned)" );
						return;
					}

					if ( this.client != null ) {
						
						if ( ( this.client.prefs.muted & 1 ) != 0 ) {
							this.WriteMsg( "You cannot send IC messages (muted)." );
							return;
						}

						if ( this.client.handle_spam_prevention( message, 1 ) ) {
							return;
						}
					}

					if ( this.stat != 0 ) {
						return;
					}

					if ( !Lang13.Bool( message ) ) {
						return;
					} else {
						message = "<B>" + this + "</B> " + message;
					}
					break;
				case "nod":
				case "nods":
					message = "<B>" + this + "</B> nods.";
					m_type = 1;
					break;
				case "ping":
				case "pings":
					M6 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _f in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A6 = _f;
							

							if ( param == A6.name ) {
								M6 = A6;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M6 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> pings at " + param + ".";
					} else {
						message = "<B>" + this + "</B> pings.";
					}
					GlobalFuncs.playsound( this.loc, "sound/machines/ping.ogg", 50, 0 );
					m_type = 2;
					break;
				case "sad":
					message = "<B>" + this + "</B> plays a sad trombone.";
					GlobalFuncs.playsound( this.loc, "sound/misc/sadtrombone.ogg", 50, 0 );
					m_type = 2;
					break;
				case "salute":
				case "salutes":
					
					if ( !( this.buckled != null ) ) {
						M7 = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _g in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
								A7 = _g;
								

								if ( param == A7.name ) {
									M7 = A7;
									break;
								}
							}
						}

						if ( !Lang13.Bool( M7 ) ) {
							param = null;
						}

						if ( Lang13.Bool( param ) ) {
							message = "<B>" + this + "</B> salutes to " + param + ".";
						} else {
							message = "<B>" + this + "</b> salutes.";
						}
					}
					break;
				case "stare":
				case "stares":
					M8 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _h in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A8 = _h;
							

							if ( param == A8.name ) {
								M8 = A8;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M8 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> stares at " + param + ".";
					} else {
						message = "<B>" + this + "</B> stares.";
					}
					m_type = 1;
					break;
				case "twitch":
				case "twitches":
					message = "<B>" + this + "</B> twitches violently.";
					m_type = 1;
					break;
				case "twitch_s":
					message = "<B>" + this + "</B> twitches.";
					m_type = 1;
					break;
				case "warn":
					message = "<B>" + this + "</B> blares an alarm!";
					GlobalFuncs.playsound( this.loc, "sound/machines/warning-buzzer.ogg", 50, 0 );
					m_type = 2;
					break;
				case "help":
					this.WriteMsg( "Help for cyborg emotes. You can use these emotes with say \"*emote\":\n\naflap, beep-(none)/mob, bow-(none)/mob, buzz-(none)/mob,buzz2,chime, clap, custom, deathgasp, flap, glare-(none)/mob, honk, look-(none)/mob, me, nod, ping-(none)/mob, sad, \nsalute-(none)/mob, twitch, twitch_s, warn," );
					break;
				default:
					this.WriteMsg( "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
					break;
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message );

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else {
					this.audible_message( message );
				}
			}
			return;
		}

		// Function from file: silicon.dm
		public override void update_transform(  ) {
			Matrix ntransform = null;
			int changed = 0;

			ntransform = Num13.Matrix( this.transform );
			changed = 0;

			if ( this.resize != 1 ) {
				changed++;
				ntransform.Scale( this.resize );
				this.resize = 1;
			}

			if ( changed != 0 ) {
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "transform", ntransform ).Set( "time", 2 ).Set( "easing", 192 ) );
			}
			base.update_transform(); return;
		}

		// Function from file: silicon.dm
		public override bool check_ear_prot(  ) {
			return true;
		}

		// Function from file: silicon.dm
		public override bool flash_eyes( double? intensity = null, bool? override_blindness_check = null, bool? affect_silicon = null ) {
			intensity = intensity ?? 1;
			override_blindness_check = override_blindness_check ?? false;
			affect_silicon = affect_silicon ?? false;

			
			if ( affect_silicon == true ) {
				return base.flash_eyes( intensity, override_blindness_check, affect_silicon );
			}
			return false;
		}

		// Function from file: silicon.dm
		public override bool grabbedby( dynamic user = null, bool? supress_message = null ) {
			return false;
		}

		// Function from file: silicon.dm
		public override void setEarDamage( int damage = 0, double? deaf = null ) {
			return;
		}

		// Function from file: silicon.dm
		public override void adjustEarDamage( double damage = 0, int deaf = 0 ) {
			return;
		}

		// Function from file: silicon.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				((Ent_Static)a).visible_message( "" + a + " pets " + this + ".", "<span class='notice'>You pet " + this + ".</span>" );
			} else if ( _a=="grab" ) {
				this.grabbedby( a );
			} else {
				((Ent_Dynamic)a).do_attack_animation( this );
				GlobalFuncs.playsound( this.loc, "sound/effects/bang.ogg", 10, 1 );
				this.visible_message( "<span class='warning'>" + a + " punches " + this + ", but doesn't leave a dent.</span>", "<span class='warning'>" + a + " punches " + this + ", but doesn't leave a dent.</span>" );
			}
			return 0;
		}

		// Function from file: silicon.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			
			if ( hulk.a_intent == "harm" ) {
				base.attack_hulk( hulk, true );
				this.adjustBruteLoss( Rand13.Int( 10, 15 ) );
				GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
				this.visible_message( "<span class='danger'>" + hulk + " has punched " + this + "!</span>", "<span class='userdanger'>" + hulk + " has punched " + this + "!</span>" );
				return true;
			}
			return false;
		}

		// Function from file: silicon.dm
		public override bool attack_larva( Mob_Living_Carbon_Alien_Larva user = null ) {
			
			if ( user.a_intent == "help" ) {
				this.visible_message( "" + user.name + " rubs its head against " + this + "." );
			}
			return false;
		}

		// Function from file: silicon.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: silicon.dm
		public override bool attack_animal( Mob_Living user = null ) {
			int damage = 0;

			
			if ( base.attack_animal( user ) ) {
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );

				dynamic _a = ((dynamic)user).melee_damage_type; // Was a switch-case, sorry for the mess.
				if ( _a=="brute" ) {
					this.adjustBruteLoss( damage );
				} else if ( _a=="fire" ) {
					this.adjustFireLoss( damage );
				} else if ( _a=="tox" ) {
					this.adjustToxLoss( damage );
				} else if ( _a=="oxy" ) {
					this.adjustOxyLoss( damage );
				} else if ( _a=="clone" ) {
					this.adjustCloneLoss( damage );
				} else if ( _a=="stamina" ) {
					this.adjustStaminaLoss( damage );
				}
				this.updatehealth();
			}
			return false;
		}

		// Function from file: silicon.dm
		public override bool attack_alien( dynamic user = null ) {
			int damage = 0;

			
			if ( base.attack_alien( (object)(user) ) ) {
				damage = 20;

				if ( Rand13.PercentChance( 90 ) ) {
					GlobalFuncs.add_logs( user, this, "attacked" );
					GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 25, 1, -1 );
					this.visible_message( "<span class='danger'>" + user + " has slashed at " + this + "!</span>", "<span class='userdanger'>" + user + " has slashed at " + this + "!</span>" );

					if ( Rand13.PercentChance( 8 ) ) {
						Icon13.Flick( "noise", this.flash );
					}
					GlobalFuncs.add_logs( user, this, "attacked" );
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );
					this.visible_message( "<span class='danger'>" + user + " took a swipe at " + this + "!</span>", "<span class='userdanger'>" + user + " took a swipe at " + this + "!</span>" );
				}
			}
			return false;
		}

		// Function from file: silicon.dm
		public override int assess_threat( Mob_Living_SimpleAnimal_Bot judgebot = null, string lasercolor = null ) {
			return -10;
		}

		// Function from file: silicon.dm
		public override bool stripPanelEquip( dynamic what = null, Mob who = null, double? where = null, bool? child_override = null ) {
			return false;
		}

		// Function from file: silicon.dm
		public override bool put_in_hand_check( dynamic W = null ) {
			return false;
		}

		// Function from file: silicon.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? L = null;
			double? L2 = null;

			
			if ( Lang13.Bool( href_list["lawc"] ) ) {
				L = String13.ParseNumber( href_list["lawc"] );

				dynamic _a = this.lawcheck[( L ??0) + 1]; // Was a switch-case, sorry for the mess.
				if ( _a=="Yes" ) {
					this.lawcheck[( L ??0) + 1] = "No";
				} else if ( _a=="No" ) {
					this.lawcheck[( L ??0) + 1] = "Yes";
				}
				this.checklaws();
			}

			if ( Lang13.Bool( href_list["lawi"] ) ) {
				L2 = String13.ParseNumber( href_list["lawi"] );

				dynamic _b = this.ioncheck[L2]; // Was a switch-case, sorry for the mess.
				if ( _b=="Yes" ) {
					this.ioncheck[L2] = "No";
				} else if ( _b=="No" ) {
					this.ioncheck[L2] = "Yes";
				}
				this.checklaws();
			}

			if ( Lang13.Bool( href_list["laws"] ) ) {
				this.statelaws();
			}
			return null;
		}

		// Function from file: silicon.dm
		public override bool apply_effect( dynamic effect = null, dynamic effecttype = null, dynamic blocked = null ) {
			effect = effect ?? 0;
			effecttype = effecttype ?? "stun";
			blocked = blocked ?? 0;

			return false;
		}

		// Function from file: silicon.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( P.damage_type == "brute" || P.damage_type == "fire" ) {
				this.adjustBruteLoss( P.damage );
			}
			((Obj_Item_Projectile)P).on_hit( this );
			return 2;
		}

		// Function from file: silicon.dm
		public override bool IsAdvancedToolUser(  ) {
			return true;
		}

		// Function from file: silicon.dm
		public override bool can_inject( dynamic user = null, bool error_msg = false, dynamic target_zone = null, bool? penetrate_thick = null ) {
			
			if ( error_msg ) {
				user.WriteMsg( "<span class='alert'>Their outer shell is too tough.</span>" );
			}
			return false;
		}

		// Function from file: silicon.dm
		public override dynamic apply_damage( dynamic damage = null, dynamic damagetype = null, dynamic def_zone = null, dynamic blocked = null ) {
			damage = damage ?? 0;
			damagetype = damagetype ?? "brute";
			blocked = blocked ?? 0;

			blocked = ( 100 - Convert.ToDouble( blocked ) ) / 100;

			if ( !Lang13.Bool( damage ) || Convert.ToDouble( blocked ) <= 0 ) {
				return 0;
			}

			dynamic _a = damagetype; // Was a switch-case, sorry for the mess.
			if ( _a=="brute" ) {
				this.adjustBruteLoss( damage * blocked );
			} else if ( _a=="fire" ) {
				this.adjustFireLoss( damage * blocked );
			} else {
				return 1;
			}
			this.updatehealth();
			return 1;
		}

		// Function from file: silicon.dm
		public override double emp_act( int severity = 0 ) {
			
			switch ((int)( severity )) {
				case 1:
					this.take_organ_damage( 20 );
					this.Stun( 8 );
					break;
				case 2:
					this.take_organ_damage( 10 );
					this.Stun( 3 );
					break;
			}
			Icon13.Flick( "noise", this.flash );
			this.WriteMsg( "<span class='userdanger'>*BZZZT*</span>" );
			this.WriteMsg( "<span class='danger'>Warning: Electromagnetic pulse detected.</span>" );
			base.emp_act( severity );
			return 0;
		}

		// Function from file: silicon.dm
		public override bool drop_item(  ) {
			return false;
		}

		// Function from file: silicon.dm
		public override void contents_explosion( double? severity = null, dynamic target = null ) {
			return;
		}

		// Function from file: silicon.dm
		public override dynamic Destroy(  ) {
			this.v_radio = null;
			this.aicamera = null;
			return base.Destroy();
		}

		// Function from file: say.dm
		public override int handle_inherent_channels( dynamic message = null, string message_mode = null ) {
			int _default = 0;

			_default = base.handle_inherent_channels( (object)(message), message_mode );

			if ( _default != 0 ) {
				return _default;
			}

			if ( message_mode == "binary" ) {
				
				if ( this.binarycheck() ) {
					this.robot_talk( message );
					return 1;
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public override string get_message_mode( dynamic message = null ) {
			string _default = null;

			_default = base.get_message_mode( (object)(message) );

			if ( base.get_message_mode( (object)(message) ) == "headset" ) {
				return "robot";
			} else {
				return _default;
			}
		}

		// Function from file: say.dm
		public override int radio( dynamic message = null, string message_mode = null, ByTable spans = null ) {
			int _default = 0;

			_default = base.radio( (object)(message), message_mode, spans );

			if ( _default != 0 ) {
				return _default;
			}

			if ( message_mode == "robot" ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.talk_into( this, message, null, spans );
				}
				return 2;
			} else if ( GlobalVars.radiochannels.Contains( message_mode ) ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.talk_into( this, message, message_mode, spans );
					return 3;
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public override int lingcheck(  ) {
			return 0;
		}

		// Function from file: say.dm
		public override bool binarycheck(  ) {
			return true;
		}

		// Function from file: say.dm
		public override ByTable get_spans(  ) {
			return base.get_spans() | "robot";
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			return base.say( (object)(message), "R" );
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			
			if ( this.mind != null && GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				GlobalVars.ticker.mode.remove_cultist( this.mind, 0 );
				((GameMode)GlobalVars.ticker.mode).remove_revolutionary( this.mind, false );
				((GameMode)GlobalVars.ticker.mode).remove_gangster( this.mind, null, null, true );
				((GameMode)GlobalVars.ticker.mode).remove_thrall( this.mind, false );
				((GameMode)GlobalVars.ticker.mode).remove_shadowling( this.mind );
				((GameMode)GlobalVars.ticker.mode).remove_hog_follower( this.mind, false );
			}
			base.Login();
			return null;
		}

		// Function from file: death.dm
		public override void spawn_dust(  ) {
			new Obj_Effect_Decal_Remains_Robot( this.loc );
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( dynamic animation = null ) {
			animation = animation ?? 0;

			base.gib( (object)(animation) );
			return null;
		}

		// Function from file: death.dm
		public override void spawn_gibs(  ) {
			GlobalFuncs.robogibs( this.loc, this.viruses );
			return;
		}

		// Function from file: silicon.dm
		public Picture GetPhoto(  ) {
			
			if ( this.aicamera != null ) {
				return this.aicamera.selectpicture( this.aicamera );
			}
			return null;
		}

		// Function from file: silicon.dm
		[VerbInfo( name: "Set Sensor Augmentation" )]
		public void sensor_mode(  ) {
			dynamic sensor_type = null;

			sensor_type = Interface13.Input( "Please select sensor type.", "Sensor Integration", null, null, new ByTable(new object [] { "Security", "Medical", "Diagnostic", "Disable" }), InputType.Any );
			this.remove_med_sec_hud();

			dynamic _a = sensor_type; // Was a switch-case, sorry for the mess.
			if ( _a=="Security" ) {
				this.add_sec_hud();
				this.WriteMsg( "<span class='notice'>Security records overlay enabled.</span>" );
			} else if ( _a=="Medical" ) {
				this.add_med_hud();
				this.WriteMsg( "<span class='notice'>Life signs monitor overlay enabled.</span>" );
			} else if ( _a=="Diagnostic" ) {
				this.add_diag_hud();
				this.WriteMsg( "<span class='notice'>Robotics diagnostic overlay enabled.</span>" );
			} else if ( _a=="Disable" ) {
				this.WriteMsg( "Sensor augmentations disabled." );
			}
			return;
		}

		// Function from file: silicon.dm
		public void add_diag_hud(  ) {
			AtomHud diagsensor = null;

			diagsensor = GlobalVars.huds[this.d_hud];
			diagsensor.add_hud_to( this );
			return;
		}

		// Function from file: silicon.dm
		public void add_med_hud(  ) {
			AtomHud medsensor = null;

			medsensor = GlobalVars.huds[this.med_hud];
			medsensor.add_hud_to( this );
			return;
		}

		// Function from file: silicon.dm
		public void add_sec_hud(  ) {
			AtomHud secsensor = null;

			secsensor = GlobalVars.huds[this.sec_hud];
			secsensor.add_hud_to( this );
			return;
		}

		// Function from file: silicon.dm
		public void remove_med_sec_hud(  ) {
			AtomHud secsensor = null;
			AtomHud medsensor = null;
			AtomHud diagsensor = null;

			secsensor = GlobalVars.huds[this.sec_hud];
			medsensor = GlobalVars.huds[this.med_hud];
			diagsensor = GlobalVars.huds[this.d_hud];
			secsensor.remove_hud_from( this );
			medsensor.remove_hud_from( this );
			diagsensor.remove_hud_from( this );
			return;
		}

		// Function from file: silicon.dm
		public void set_autosay(  ) {
			dynamic Autochan = null;
			dynamic key = null;

			
			if ( !( this.v_radio != null ) ) {
				this.WriteMsg( "Radio not detected." );
				return;
			}
			Autochan = Interface13.Input( "Select a channel:", null, null, null, new ByTable(new object [] { "Default", "None" }) + this.v_radio.channels, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( Autochan ) ) {
				return;
			}

			if ( Autochan == "Default" ) {
				this.radiomod = ";";
				Autochan += " (" + this.v_radio.frequency + ")";
			} else if ( Autochan == "None" ) {
				this.radiomod = "";
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.department_radio_keys )) {
					key = _a;
					

					if ( GlobalVars.department_radio_keys[key] == Autochan ) {
						this.radiomod = key;
						break;
					}
				}
			}
			this.WriteMsg( "<span class='notice'>Automatic announcements " + ( Autochan == "None" ? "will not use the radio." : "set to " + Autochan + "." ) + "</span>" );
			return;
		}

		// Function from file: silicon.dm
		public void checklaws(  ) {
			string list = null;
			int? index = null;
			dynamic law = null;
			int number = 0;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			list = "<b>Which laws do you want to include when stating them for the crew?</b><br><br>";

			if ( Lang13.Bool( this.laws.zeroth ) ) {
				
				if ( !Lang13.Bool( this.lawcheck[1] ) ) {
					this.lawcheck[1] = "No";
				}
				list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=0'>" ).item( this.lawcheck[1] ).str( " 0:</A> " ).item( this.laws.zeroth ).str( "<BR>" ).ToString();
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.laws.ion.len) {
				law = this.laws.ion[index];

				if ( Lang13.Length( law ) > 0 ) {
					
					if ( !Lang13.Bool( this.ioncheck[index] ) ) {
						this.ioncheck[index] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawi=" ).item( index ).str( "'>" ).item( this.ioncheck[index] ).str( " " ).item( GlobalFuncs.ionnum() ).str( ":</A> " ).item( law ).str( "<BR>" ).ToString();
					this.ioncheck.len += 1;
				}
				index++;
			}
			number = 1;
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.laws.inherent.len) {
				law2 = this.laws.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					this.lawcheck.len += 1;

					if ( !Lang13.Bool( this.lawcheck[number + 1] ) ) {
						this.lawcheck[number + 1] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=" ).item( number ).str( "'>" ).item( this.lawcheck[number + 1] ).str( " " ).item( number ).str( ":</A> " ).item( law2 ).str( "<BR>" ).ToString();
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.laws.supplied.len) {
				law3 = this.laws.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					this.lawcheck.len += 1;

					if ( !Lang13.Bool( this.lawcheck[number + 1] ) ) {
						this.lawcheck[number + 1] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=" ).item( number ).str( "'>" ).item( this.lawcheck[number + 1] ).str( " " ).item( number ).str( ":</A> " ).item( law3 ).str( "<BR>" ).ToString();
					number++;
				}
				index3++;
			}
			list += new Txt( "<br><br><A href='byond://?src=" ).Ref( this ).str( ";laws=1'>State Laws</A>" ).ToString();
			Interface13.Browse( Task13.User, list, "window=laws" );
			return;
		}

		// Function from file: silicon.dm
		public void statelaws(  ) {
			int number = 0;
			int? index = null;
			dynamic law = null;
			string num = null;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			this.say( "" + this.radiomod + " Current Active Laws:" );
			number = 1;
			Task13.Sleep( 10 );

			if ( Lang13.Bool( this.laws.zeroth ) ) {
				
				if ( this.lawcheck[1] == "Yes" ) {
					this.say( "" + this.radiomod + " 0. " + this.laws.zeroth );
					Task13.Sleep( 10 );
				}
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.laws.ion.len) {
				law = this.laws.ion[index];
				num = GlobalFuncs.ionnum();

				if ( Lang13.Length( law ) > 0 ) {
					
					if ( this.ioncheck[index] == "Yes" ) {
						this.say( "" + this.radiomod + " " + num + ". " + law );
						Task13.Sleep( 10 );
					}
				}
				index++;
			}
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.laws.inherent.len) {
				law2 = this.laws.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					
					if ( this.lawcheck[( index2 ??0) + 1] == "Yes" ) {
						this.say( "" + this.radiomod + " " + number + ". " + law2 );
						Task13.Sleep( 10 );
					}
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.laws.supplied.len) {
				law3 = this.laws.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					
					if ( this.lawcheck.len >= number + 1 ) {
						
						if ( this.lawcheck[number + 1] == "Yes" ) {
							this.say( "" + this.radiomod + " " + number + ". " + law3 );
							Task13.Sleep( 10 );
						}
						number++;
					}
				}
				index3++;
			}
			return;
		}

		// Function from file: silicon.dm
		public void damage_mob( bool? brute = null, bool? fire = null, bool? tox = null ) {
			brute = brute ?? false;
			fire = fire ?? false;
			tox = tox ?? false;

			return;
		}

		// Function from file: silicon.dm
		public void queueAlarm( string message = null, string type = null, bool? incoming = null ) {
			incoming = incoming ?? true;

			bool in_cooldown = false;
			dynamic msg = null;
			string msg2 = null;
			dynamic msg3 = null;
			string msg4 = null;
			dynamic key = null;
			dynamic key2 = null;

			in_cooldown = this.alarms_to_show.len > 0 || this.alarms_to_clear.len > 0;

			if ( incoming == true ) {
				this.alarms_to_show.Add( message );
				this.alarm_types_show[type] += 1;
			} else {
				this.alarms_to_clear.Add( message );
				this.alarm_types_clear[type] += 1;
			}

			if ( !in_cooldown ) {
				Task13.Schedule( 30, (Task13.Closure)(() => {
					
					if ( this.alarms_to_show.len < 5 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( this.alarms_to_show )) {
							msg = _a;
							
							this.WriteMsg( msg );
						}
					} else if ( this.alarms_to_show.len != 0 ) {
						msg2 = "--- ";

						if ( Lang13.Bool( this.alarm_types_show["Burglar"] ) ) {
							msg2 += "BURGLAR: " + this.alarm_types_show["Burglar"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Motion"] ) ) {
							msg2 += "MOTION: " + this.alarm_types_show["Motion"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Fire"] ) ) {
							msg2 += "FIRE: " + this.alarm_types_show["Fire"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Atmosphere"] ) ) {
							msg2 += "ATMOSPHERE: " + this.alarm_types_show["Atmosphere"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Power"] ) ) {
							msg2 += "POWER: " + this.alarm_types_show["Power"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Camera"] ) ) {
							msg2 += "CAMERA: " + this.alarm_types_show["Camera"] + " alarms detected. - ";
						}
						msg2 += new Txt( "<A href=?src=" ).Ref( this ).str( ";showalerts=1'>[Show Alerts]</a>" ).ToString();
						this.WriteMsg( msg2 );
					}

					if ( this.alarms_to_clear.len < 3 ) {
						
						foreach (dynamic _b in Lang13.Enumerate( this.alarms_to_clear )) {
							msg3 = _b;
							
							this.WriteMsg( msg3 );
						}
					} else if ( this.alarms_to_clear.len != 0 ) {
						msg4 = "--- ";

						if ( Lang13.Bool( this.alarm_types_clear["Motion"] ) ) {
							msg4 += "MOTION: " + this.alarm_types_clear["Motion"] + " alarms cleared. - ";
						}

						if ( Lang13.Bool( this.alarm_types_clear["Fire"] ) ) {
							msg4 += "FIRE: " + this.alarm_types_clear["Fire"] + " alarms cleared. - ";
						}

						if ( Lang13.Bool( this.alarm_types_clear["Atmosphere"] ) ) {
							msg4 += "ATMOSPHERE: " + this.alarm_types_clear["Atmosphere"] + " alarms cleared. - ";
						}

						if ( Lang13.Bool( this.alarm_types_clear["Power"] ) ) {
							msg4 += "POWER: " + this.alarm_types_clear["Power"] + " alarms cleared. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Camera"] ) ) {
							msg4 += "CAMERA: " + this.alarm_types_clear["Camera"] + " alarms cleared. - ";
						}
						msg4 += new Txt( "<A href=?src=" ).Ref( this ).str( ";showalerts=1'>[Show Alerts]</a>" ).ToString();
						this.WriteMsg( msg4 );
					}
					this.alarms_to_show = new ByTable();
					this.alarms_to_clear = new ByTable();

					foreach (dynamic _c in Lang13.Enumerate( this.alarm_types_show )) {
						key = _c;
						
						this.alarm_types_show[key] = 0;
					}

					foreach (dynamic _d in Lang13.Enumerate( this.alarm_types_clear )) {
						key2 = _d;
						
						this.alarm_types_clear[key2] = 0;
					}
					return;
				}));
			}
			return;
		}

		// Function from file: silicon.dm
		public virtual bool triggerAlarm( string _class = null, dynamic A = null, ByTable O = null, Ent_Static alarmsource = null ) {
			return false;
		}

		// Function from file: silicon.dm
		public virtual bool cancelAlarm( string _class = null, dynamic A = null, Ent_Static origin = null ) {
			return false;
		}

		// Function from file: laws.dm
		public void clear_zeroth_law( bool force = false ) {
			this.laws_sanity_check();
			this.laws.clear_zeroth_law( force );
			return;
		}

		// Function from file: laws.dm
		public virtual bool make_laws(  ) {
			dynamic lawtype = null;

			
			switch ((double?)( GlobalVars.config.default_laws )) {
				case 0:
					this.laws = new AiLaws_Default_Asimov();
					break;
				case 1:
					this.laws = new AiLaws_Custom();
					break;
				case 2:
					lawtype = Rand13.PickFromTable( Lang13.GetTypes( typeof(AiLaws_Default) ) - typeof(AiLaws_Default) );
					this.laws = Lang13.Call( lawtype );
					break;
			}
			this.laws.associate( this );
			return false;
		}

		// Function from file: laws.dm
		public void clear_ion_laws(  ) {
			this.throw_alert( "newlaw", typeof(Obj_Screen_Alert_Newlaw) );
			this.laws_sanity_check();
			this.laws.clear_ion_laws();
			return;
		}

		// Function from file: laws.dm
		public void add_ion_law( dynamic law = null ) {
			this.throw_alert( "newlaw", typeof(Obj_Screen_Alert_Newlaw) );
			this.laws_sanity_check();
			this.laws.add_ion_law( law );
			return;
		}

		// Function from file: laws.dm
		public void clear_supplied_laws(  ) {
			this.throw_alert( "newlaw", typeof(Obj_Screen_Alert_Newlaw) );
			this.laws_sanity_check();
			this.laws.clear_supplied_laws();
			return;
		}

		// Function from file: laws.dm
		public void add_supplied_law( int number = 0, dynamic law = null ) {
			this.throw_alert( "newlaw", typeof(Obj_Screen_Alert_Newlaw) );
			this.laws_sanity_check();
			this.laws.add_supplied_law( number, law );
			return;
		}

		// Function from file: laws.dm
		public void clear_inherent_laws(  ) {
			this.throw_alert( "newlaw", typeof(Obj_Screen_Alert_Newlaw) );
			this.laws_sanity_check();
			this.laws.clear_inherent_laws();
			return;
		}

		// Function from file: laws.dm
		public void add_inherent_law( dynamic law = null ) {
			this.throw_alert( "newlaw", typeof(Obj_Screen_Alert_Newlaw) );
			this.laws_sanity_check();
			this.laws.add_inherent_law( law );
			return;
		}

		// Function from file: laws.dm
		public void set_zeroth_law( dynamic law = null, string law_borg = null ) {
			this.throw_alert( "newlaw", typeof(Obj_Screen_Alert_Newlaw) );
			this.laws_sanity_check();
			this.laws.set_zeroth_law( law, law_borg );
			return;
		}

		// Function from file: laws.dm
		public void laws_sanity_check(  ) {
			
			if ( !Lang13.Bool( this.laws ) ) {
				this.make_laws();
			}
			return;
		}

		// Function from file: laws.dm
		public virtual void show_laws( bool? everyone = null ) {
			return;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_status(  ) {
			dynamic holder = null;

			holder = this.hud_list["8"];

			switch ((int)( this.stat )) {
				case 0:
					holder.icon_state = "hudstat";
					break;
				case 1:
					holder.icon_state = "hudoffline";
					break;
				default:
					holder.icon_state = "huddead2";
					break;
			}
			return;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_health(  ) {
			dynamic holder = null;

			holder = this.hud_list["9"];

			if ( this.stat == 2 ) {
				holder.icon_state = "huddiagdead";
			} else {
				holder.icon_state = "huddiag" + GlobalFuncs.RoundDiagBar( this.health / this.maxHealth );
			}
			return;
		}

	}

}