// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Voice : Obj_Item_Device_Assembly {

		public bool listening = false;
		public dynamic recorded = "";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.materials = new ByTable().Set( "$metal", 500 ).Set( "$glass", 50 );
			this.flags = 16;
			this.attachable = true;
			this.verb_say = "beeps";
			this.verb_ask = "beeps";
			this.verb_exclaim = "beeps";
			this.icon_state = "voice";
		}

		public Obj_Item_Device_Assembly_Voice ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: voice.dm
		public override bool toggle_secure(  ) {
			bool _default = false;

			_default = base.toggle_secure();
			this.listening = false;
			return _default;
		}

		// Function from file: voice.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return 0;
			}
			this.activate();
			return 1;
		}

		// Function from file: voice.dm
		public override bool activate(  ) {
			
			if ( this.secured ) {
				
				if ( !( this.holder != null ) ) {
					this.listening = !this.listening;
					this.say( "" + ( this.listening ? "Now" : "No longer" ) + " recording input." );
				}
			}
			return false;
		}

		// Function from file: voice.dm
		public override string Hear( string message = null, dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null, ByTable spans = null ) {
			
			if ( speaker == this ) {
				return null;
			}

			if ( this.listening && !Lang13.Bool( radio_freq ) ) {
				this.recorded = raw_message;
				this.listening = false;
				this.say( "Activation message is '" + this.recorded + "'." );
			} else if ( String13.FindIgnoreCase( raw_message, this.recorded, 1, 0 ) != 0 ) {
				Task13.Schedule( 10, (Task13.Closure)(() => {
					this.pulse( false );
					return;
				}));
			}
			return null;
		}

	}

}