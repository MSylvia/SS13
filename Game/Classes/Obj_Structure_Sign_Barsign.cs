// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Sign_Barsign : Obj_Structure_Sign {

		public ByTable barsigns = new ByTable();
		public dynamic hiddensigns = null;
		public bool broken = false;
		public bool emagged = false;
		public bool state = false;
		public string prev_sign = "";
		public bool panel_open = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 25 });
			this.icon = "icons/obj/barsigns.dmi";
			this.icon_state = "empty";
		}

		// Function from file: barsigns.dm
		public Obj_Structure_Sign_Barsign ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic bartype = null;
			dynamic signinfo = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Barsign) ) - typeof(Barsign) )) {
				bartype = _a;
				
				signinfo = Lang13.Call( bartype );

				if ( !Lang13.Bool( signinfo.hidden ) ) {
					this.barsigns.Add( signinfo );
				}
			}
			this.set_sign( Rand13.PickFromTable( this.barsigns ) );
			return;
		}

		// Function from file: barsigns.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( this.broken || this.emagged ) {
				user.WriteMsg( "<span class='warning'>Nothing interesting happens!</span>" );
				return false;
			}
			user.WriteMsg( "<span class='notice'>You emag the barsign. Takeover in progress...</span>" );
			Task13.Sleep( 100 );
			this.set_sign( new Barsign_Hiddensigns_Syndibarsign() );
			this.emagged = true;
			this.req_access = new ByTable(new object [] { GlobalVars.access_syndicate });
			return false;
		}

		// Function from file: barsigns.dm
		public override double emp_act( int severity = 0 ) {
			this.set_sign( new Barsign_Hiddensigns_Empbarsign() );
			this.broken = true;
			return 0;
		}

		// Function from file: barsigns.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic C = null;

			
			if ( !this.allowed( user ) ) {
				user.WriteMsg( "<span class='info'>Access denied.</span>" );
				return null;
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( !this.panel_open ) {
					user.WriteMsg( "<span class='notice'>You open the maintenance panel.</span>" );
					this.set_sign( new Barsign_Hiddensigns_Signoff() );
					this.panel_open = true;
				} else {
					user.WriteMsg( "<span class='notice'>You close the maintenance panel.</span>" );

					if ( !this.broken && !this.emagged ) {
						this.set_sign( Rand13.PickFromTable( this.barsigns ) );
					} else if ( this.emagged ) {
						this.set_sign( new Barsign_Hiddensigns_Syndibarsign() );
					} else {
						this.set_sign( new Barsign_Hiddensigns_Empbarsign() );
					}
					this.panel_open = false;
				}
			}

			if ( A is Obj_Item_Stack_CableCoil && this.panel_open ) {
				C = A;

				if ( this.emagged ) {
					user.WriteMsg( "<span class='warning'>Sign has been damaged beyond repair!</span>" );
					return null;
				} else if ( !this.broken ) {
					user.WriteMsg( "<span class='warning'>This sign is functioning properly!</span>" );
					return null;
				}

				if ( ((Obj_Item_Stack)C).use( 2 ) != 0 ) {
					user.WriteMsg( "<span class='notice'>You replace the burnt wiring.</span>" );
					this.broken = false;
				} else {
					user.WriteMsg( "<span class='warning'>You need at least two lengths of cable!</span>" );
				}
			}
			return null;
		}

		// Function from file: barsigns.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !this.allowed( a ) ) {
				a.WriteMsg( "<span class='info'>Access denied.</span>" );
				return null;
			}

			if ( this.broken ) {
				a.WriteMsg( "<span class ='danger'>The controls seem unresponsive.</span>" );
				return null;
			}
			this.pick_sign();
			return null;
		}

		// Function from file: barsigns.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: barsigns.dm
		public void pick_sign(  ) {
			dynamic picked_name = null;

			picked_name = Interface13.Input( "Available Signage", "Bar Sign", null, null, this.barsigns, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( picked_name ) ) {
				return;
			}
			this.set_sign( picked_name );
			return;
		}

		// Function from file: barsigns.dm
		public void set_sign( dynamic sign = null ) {
			
			if ( !( sign is Barsign ) ) {
				return;
			}
			this.icon_state = sign.icon;
			this.name = sign.name;

			if ( Lang13.Bool( sign.desc ) ) {
				this.desc = sign.desc;
			} else {
				this.desc = "It displays \"" + this.name + "\".";
			}
			return;
		}

	}

}