// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Seeds_Replicapod : Obj_Item_Seeds {

		public dynamic ckey = null;
		public dynamic realName = null;
		public Mind mind = null;
		public dynamic blood_gender = null;
		public dynamic blood_type = null;
		public ByTable features = null;
		public dynamic factions = null;
		public bool contains_sample = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.species = "replicapod";
			this.plantname = "Replica Pod";
			this.product = typeof(Mob_Living_Carbon_Human);
			this.lifespan = 50;
			this.endurance = 8;
			this.maturation = 10;
			this.production = 1;
			this.yield = 1;
			this.oneharvest = true;
			this.potency = 30;
			this.growthstages = 6;
			this.icon_state = "seed-replicapod";
		}

		public Obj_Item_Seeds_Replicapod ( dynamic loc = null, dynamic parent = null ) : base( (object)(loc), (object)(parent) ) {
			
		}

		// Function from file: seeds.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Reagent_Blood bloodSample = null;

			
			if ( A is Obj_Item_Weapon_ReagentContainers_Syringe ) {
				
				if ( !this.contains_sample ) {
					
					foreach (dynamic _a in Lang13.Enumerate( A.reagents.reagent_list, typeof(Reagent_Blood) )) {
						bloodSample = _a;
						

						if ( Lang13.Bool( bloodSample.data["mind"] ) && Lang13.Bool( bloodSample.data["cloneable"] ) == true ) {
							this.mind = bloodSample.data["mind"];
							this.ckey = bloodSample.data["ckey"];
							this.realName = bloodSample.data["real_name"];
							this.blood_gender = bloodSample.data["gender"];
							this.blood_type = bloodSample.data["blood_type"];
							this.features = bloodSample.data["features"];
							this.factions = bloodSample.data["factions"];
							((Reagents)A.reagents).clear_reagents();
							user.WriteMsg( "<span class='notice'>You inject the contents of the syringe into the seeds.</span>" );
							this.contains_sample = true;
						} else {
							user.WriteMsg( "<span class='warning'>The seeds reject the sample!</span>" );
						}
					}
				} else {
					user.WriteMsg( "<span class='warning'>The seeds already contain a genetic sample!</span>" );
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: hydroponics.dm
		public override ByTable harvest( Mob user = null ) {
			user = user ?? Task13.User;

			Ent_Static parent = null;
			bool make_podman = false;
			dynamic ckey_holder = null;
			dynamic M = null;
			dynamic O = null;
			dynamic M2 = null;
			dynamic O2 = null;
			Mob_Living_Carbon_Human podman = null;
			int? seed_count = null;
			int? i = null;
			Obj_Item_Seeds_Replicapod harvestseeds = null;

			parent = this.loc;
			make_podman = false;
			ckey_holder = null;

			if ( Lang13.Bool( GlobalVars.config.revival_pod_plants ) ) {
				
				if ( Lang13.Bool( this.ckey ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
						M = _a;
						

						if ( M is Mob_Dead_Observer ) {
							O = M;

							if ( O.ckey == this.ckey && O.can_reenter_corpse == true ) {
								make_podman = true;
								break;
							}
						} else if ( M.ckey == this.ckey && Convert.ToInt32( M.stat ) == 2 && !M.suiciding ) {
							make_podman = true;
							break;
						}
					}
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list )) {
						M2 = _b;
						

						if ( this.mind != null && Lang13.Bool( M2.mind ) && String13.CKey( M2.mind.key ) == String13.CKey( this.mind.key ) && Lang13.Bool( M2.ckey ) && Lang13.Bool( M2.client ) && Convert.ToInt32( M2.stat ) == 2 && !M2.suiciding ) {
							
							if ( M2 is Mob_Dead_Observer ) {
								O2 = M2;

								if ( !( O2.can_reenter_corpse == true ) ) {
									break;
								}
							}
							make_podman = true;
							ckey_holder = M2.ckey;
							break;
						}
					}
				}
			}

			if ( make_podman ) {
				podman = new Mob_Living_Carbon_Human( parent.loc );

				if ( Lang13.Bool( this.realName ) ) {
					podman.real_name = this.realName;
				} else {
					podman.real_name = "Pod Person " + Rand13.Int( 0, 999 );
				}
				this.mind.transfer_to( podman );

				if ( Lang13.Bool( this.ckey ) ) {
					podman.ckey = this.ckey;
				} else {
					podman.ckey = ckey_holder;
				}
				podman.gender = this.blood_gender;
				podman.faction |= this.factions;

				if ( !Lang13.Bool( this.features["mcolor"] ) ) {
					this.features["mcolor"] = "#59CE00";
				}
				podman.hardset_dna( null, null, podman.real_name, this.blood_type, typeof(Species_Pod), this.features );
				podman.set_cloned_appearance();
			} else {
				seed_count = 1;

				if ( Rand13.PercentChance( ((int)( this.getYield() * 20 )) ) ) {
					seed_count++;
				}
				i = null;
				i = 0;

				while (( i ??0) < ( seed_count ??0)) {
					harvestseeds = new Obj_Item_Seeds_Replicapod( user.loc );
					harvestseeds.lifespan = this.lifespan;
					harvestseeds.endurance = this.endurance;
					harvestseeds.maturation = this.maturation;
					harvestseeds.production = this.production;
					harvestseeds.yield = this.yield;
					harvestseeds.potency = this.potency;
					i++;
				}
			}
			((dynamic)parent).update_tray();
			return null;
		}

	}

}