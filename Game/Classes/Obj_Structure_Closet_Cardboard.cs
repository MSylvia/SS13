// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet_Cardboard : Obj_Structure_Closet {

		public bool move_delay = false;
		public bool egged = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 10;
			this.mob_storage_capacity = 1;
			this.burn_state = 0;
			this.burntime = 20;
			this.can_weld_shut = false;
			this.cutting_tool = typeof(Obj_Item_Weapon_Wirecutters);
			this.open_sound = "sound/effects/rustle2.ogg";
			this.cutting_sound = "sound/items/poster_ripped.ogg";
			this.material_drop = typeof(Obj_Item_Stack_Sheet_Cardboard);
			this.icon_state = "cardboard";
		}

		public Obj_Structure_Closet_Cardboard ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: cardboardbox.dm
		public override bool open(  ) {
			Mob_Living Snake = null;
			Mob_Living L = null;
			ByTable alerted = null;
			Mob_Living L2 = null;

			
			if ( this.opened || !this.can_open() ) {
				return false;
			}

			if ( !this.egged ) {
				Snake = null;

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Mob_Living) )) {
					L = _a;
					
					Snake = L;
					break;
				}

				if ( Snake != null ) {
					alerted = Map13.FetchViewers( this, 7 );

					if ( alerted != null ) {
						
						foreach (dynamic _b in Lang13.Enumerate( alerted, typeof(Mob_Living) )) {
							L2 = _b;
							

							if ( !( L2.stat != 0 ) ) {
								L2.do_alert_animation( L2 );
								this.egged = true;
							}
						}
						alerted.WriteMsg( new Sound( "sound/machines/chime.ogg" ) );
					}
				}
			}
			base.open();
			return false;
		}

		// Function from file: cardboardbox.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			
			if ( this.opened || this.move_delay || user.stat != 0 || user.stunned != 0 || user.weakened != 0 || user.paralysis != 0 || !( this.loc is Tile ) || !GlobalFuncs.has_gravity( this.loc ) ) {
				return false;
			}
			this.move_delay = true;
			Map13.Step( this, direction ??0 );

			if ( this.opened || this.move_delay || user.stat != 0 || user.stunned != 0 || user.weakened != 0 || user.paralysis != 0 || !( this.loc is Tile ) || !GlobalFuncs.has_gravity( this.loc ) ) {
				Task13.Schedule( ((int)( GlobalVars.config.walk_speed ??0 )), (Task13.Closure)(() => {
					this.move_delay = false;
					return;
				}));
			} else {
				this.move_delay = false;
			}
			return false;
		}

	}

}