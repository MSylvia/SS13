// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Assets : Subsystem {

		public ByTable cache = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Assets";
			this.priority = -3;
		}

		// Function from file: assets.dm
		public Subsystem_Assets (  ) {
			
			if ( GlobalVars.SSasset != this ) {
				
				if ( GlobalVars.SSasset is Subsystem_Assets ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSasset );
				}
				GlobalVars.SSasset = this;
			}
			return;
		}

		// Function from file: assets.dm
		public override double Initialize( int start_timeofday = 0, double? zlevel = null ) {
			dynamic type = null;
			dynamic A = null;
			dynamic C = null;

			
			if ( Lang13.Bool( zlevel ) ) {
				return base.Initialize( start_timeofday, zlevel );
			}

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Asset) ) - new ByTable(new object [] { typeof(Asset), typeof(Asset_Simple) }) )) {
				type = _a;
				
				A = Lang13.Call( type );
				((Asset)A).register();
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.clients )) {
				C = _b;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}
				Task13.Schedule( 10, (Task13.Closure)(() => {
					GlobalFuncs.getFilesSlow( C, this.cache, GlobalVars.FALSE );
					return;
				}));
			}
			base.Initialize( start_timeofday, zlevel );
			return 0;
		}

	}

}