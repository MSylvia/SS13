// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Grab : Obj_Item_Weapon {

		public Obj_Screen_Grab hud = null;
		public Mob_Living affecting = null;
		public dynamic assailant = null;
		public int state = 1;
		public bool allow_upgrade = true;
		public int last_upgrade = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 132;
			this.item_state = "nothing";
			this.w_class = 5;
			this.layer = 21;
		}

		// Function from file: mob_grab.dm
		public Obj_Item_Weapon_Grab ( dynamic user = null, Mob_Living victim = null ) : base( (object)(user) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.loc = user;
			this.assailant = user;
			this.affecting = victim;

			if ( Lang13.Bool( this.affecting.anchored ) || !((Ent_Static)user).Adjacent( victim ) ) {
				GlobalFuncs.qdel( this );
				return;
			}
			this.hud = new Obj_Screen_Grab( this );
			this.hud.icon_state = "reinforce";
			this.hud.name = "reinforce grab";
			this.hud.master = this;
			this.affecting.grabbed_by.Add( this );
			return;
		}

		// Function from file: mob_grab.dm
		public override bool dropped( dynamic user = null ) {
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: mob_grab.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic attacker = null;

			
			if ( !( this.affecting != null ) ) {
				return false;
			}

			if ( M == this.affecting ) {
				this.s_click( this.hud );
				return false;
			}

			if ( M == this.assailant && this.state >= 2 ) {
				
				if ( user is Mob_Living_Carbon_Human && Lang13.Bool( user.disabilities & 32 ) && this.affecting is Mob_Living_Carbon_Monkey || user is Mob_Living_Carbon_Alien && this.affecting is Mob_Living_Carbon ) {
					attacker = user;
					((Ent_Static)user).visible_message( "<span class='danger'>" + user + " is attempting to devour " + this.affecting + "!</span>" );

					if ( user is Mob_Living_Carbon_Alien_Humanoid_Hunter ) {
						
						if ( !GlobalFuncs.do_mob( user, this.affecting, 60 ) ) {
							return false;
						}
					} else if ( !GlobalFuncs.do_mob( user, this.affecting, 130 ) ) {
						return false;
					}
					((Ent_Static)user).visible_message( "<span class='danger'>" + user + " devours " + this.affecting + "!</span>" );
					this.affecting.loc = user;
					attacker.stomach_contents.Add( this.affecting );
					GlobalFuncs.qdel( this );
				}
			}
			GlobalFuncs.add_logs( user, this.affecting, "attempted to put", this, "into " + M );
			return false;
		}

		// Function from file: mob_grab.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.s_click( this.hud );
			return null;
		}

		// Function from file: mob_grab.dm
		public override int? process( dynamic seconds = null ) {
			dynamic G = null;
			dynamic G2 = null;
			bool h = false;
			Obj_Item_Weapon_Grab G3 = null;
			Mob_Living L = null;

			
			if ( !this.confirm() ) {
				return 0;
			}

			if ( Lang13.Bool( this.assailant.client ) ) {
				this.assailant.client.screen -= this.hud;
				this.assailant.client.screen += this.hud;
			}

			if ( this.assailant.pulling == this.affecting ) {
				((Mob)this.assailant).stop_pulling();
			}

			if ( this.state <= 2 ) {
				this.allow_upgrade = true;

				if ( Lang13.Bool( this.assailant.l_hand ) && this.assailant.l_hand != this && this.assailant.l_hand is Obj_Item_Weapon_Grab ) {
					G = this.assailant.l_hand;

					if ( G.affecting != this.affecting ) {
						this.allow_upgrade = false;
					}
				}

				if ( Lang13.Bool( this.assailant.r_hand ) && this.assailant.r_hand != this && this.assailant.r_hand is Obj_Item_Weapon_Grab ) {
					G2 = this.assailant.r_hand;

					if ( G2.affecting != this.affecting ) {
						this.allow_upgrade = false;
					}
				}

				if ( this.state == 2 ) {
					h = this.affecting.hand;
					this.affecting.hand = false;
					this.affecting.drop_item();
					this.affecting.hand = true;
					this.affecting.drop_item();
					this.affecting.hand = h;

					foreach (dynamic _a in Lang13.Enumerate( this.affecting.grabbed_by, typeof(Obj_Item_Weapon_Grab) )) {
						G3 = _a;
						

						if ( G3 == this ) {
							continue;
						}

						if ( G3.state == 2 ) {
							this.allow_upgrade = false;
						}
					}
				}

				if ( this.allow_upgrade ) {
					this.hud.icon_state = "reinforce";
				} else {
					this.hud.icon_state = "!reinforce";
				}
			} else if ( !( this.affecting.buckled != null ) ) {
				this.affecting.loc = this.assailant.loc;
			}

			if ( this.state >= 3 ) {
				this.affecting.Stun( 5 );

				if ( this.affecting is Mob_Living ) {
					L = this.affecting;
					L.adjustOxyLoss( 1 );
				}
			}

			if ( this.state >= 5 ) {
				this.affecting.Weaken( 5 );
				this.affecting.losebreath = Num13.MinInt( this.affecting.losebreath + 2, 3 );
			}
			return null;
		}

		// Function from file: mob_grab.dm
		public bool confirm(  ) {
			
			if ( !Lang13.Bool( this.assailant ) || !( this.affecting != null ) ) {
				GlobalFuncs.qdel( this );
				return false;
			}

			if ( this.affecting != null ) {
				
				if ( !( this.assailant.loc is Tile ) || !( this.affecting.loc is Tile ) || this.assailant.loc != this.affecting.loc && Map13.GetDistance( this.assailant, this.affecting ) > 1 ) {
					GlobalFuncs.qdel( this );
					return false;
				}
			}
			return true;
		}

		// Function from file: mob_grab.dm
		public void s_click( Obj_Screen_Grab S = null ) {
			
			if ( !( this.affecting != null ) ) {
				return;
			}

			if ( this.state == 4 ) {
				return;
			}

			if ( Game13.time < this.last_upgrade + 40 ) {
				return;
			}

			if ( !Lang13.Bool( this.assailant.canmove ) || Lang13.Bool( this.assailant.lying ) ) {
				GlobalFuncs.qdel( this );
				return;
			}
			this.last_upgrade = Game13.time;

			if ( this.state < 2 ) {
				
				if ( !this.allow_upgrade ) {
					return;
				}
				((Ent_Static)this.assailant).visible_message( "<span class='warning'>" + this.assailant + " grabs " + this.affecting + " aggressively!</span>" );
				this.state = 2;
				this.icon_state = "grabbed1";
			} else if ( this.state < 3 ) {
				
				if ( this.affecting is Mob_Living_SimpleAnimal_Slime ) {
					this.assailant.WriteMsg( "<span class='warning'>You squeeze " + this.affecting + ", but nothing interesting happens!</span>" );
					return;
				}
				((Ent_Static)this.assailant).visible_message( new Txt( "<span class='warning'>" ).item( this.assailant ).str( " moves " ).his_her_its_their().str( " grip to " ).item( this.affecting ).str( "'s neck!</span>" ).ToString() );
				this.state = 3;
				this.icon_state = "grabbed+1";

				if ( !( this.affecting.buckled != null ) ) {
					this.affecting.loc = this.assailant.loc;
				}
				GlobalFuncs.add_logs( this.assailant, this.affecting, "neck-grabbed" );
				this.hud.icon_state = "disarm/kill";
				this.hud.name = "disarm/kill";
			} else if ( this.state < 4 ) {
				((Ent_Static)this.assailant).visible_message( new Txt( "<span class='danger'>" ).item( this.assailant ).str( " starts to tighten " ).his_her_its_their().str( " grip on " ).item( this.affecting ).str( "'s neck!</span>" ).ToString() );
				this.hud.icon_state = "disarm/kill1";
				this.state = 4;

				if ( GlobalFuncs.do_after( this.assailant, 100, null, this.affecting ) ) {
					
					if ( this.state == 5 ) {
						return;
					}

					if ( !( this.affecting != null ) ) {
						GlobalFuncs.qdel( this );
						return;
					}

					if ( !Lang13.Bool( this.assailant.canmove ) || Lang13.Bool( this.assailant.lying ) ) {
						GlobalFuncs.qdel( this );
						return;
					}
					this.state = 5;
					((Ent_Static)this.assailant).visible_message( new Txt( "<span class='danger'>" ).item( this.assailant ).str( " tightens " ).his_her_its_their().str( " grip on " ).item( this.affecting ).str( "'s neck!</span>" ).ToString() );
					GlobalFuncs.add_logs( this.assailant, this.affecting, "strangled" );
					((Mob)this.assailant).changeNext_move( 10 );
					this.affecting.losebreath += 1;
				} else if ( Lang13.Bool( this.assailant ) ) {
					((Ent_Static)this.assailant).visible_message( new Txt( "<span class='warning'>" ).item( this.assailant ).str( " is unable to tighten " ).his_her_its_their().str( " grip on " ).item( this.affecting ).str( "'s neck!</span>" ).ToString() );
					this.hud.icon_state = "disarm/kill";
					this.state = 3;
				}
			}
			return;
		}

		// Function from file: mob_grab.dm
		public void synch(  ) {
			
			if ( this.affecting != null ) {
				
				if ( this.assailant.r_hand == this ) {
					this.hud.screen_loc = "CENTER:-16,SOUTH:5";
				} else {
					this.hud.screen_loc = "CENTER: 16,SOUTH:5";
				}
			}
			return;
		}

		// Function from file: mob_grab.dm
		public Mob_Living get_mob_if_throwable(  ) {
			
			if ( this.affecting != null ) {
				
				if ( this.affecting.buckled != null ) {
					return null;
				}

				if ( this.state >= 2 ) {
					return this.affecting;
				}
			}
			return null;
		}

		// Function from file: mob_grab.dm
		public override dynamic Destroy(  ) {
			
			if ( this.affecting != null ) {
				this.affecting.grabbed_by.Remove( this );
				this.affecting = null;
			}

			if ( Lang13.Bool( this.assailant ) ) {
				
				if ( Lang13.Bool( this.assailant.client ) ) {
					this.assailant.client.screen -= this.hud;
				}
				this.assailant = null;
			}
			GlobalFuncs.qdel( this.hud );
			return base.Destroy();
		}

	}

}