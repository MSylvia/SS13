// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Falsewall : Obj_Structure {

		public string mineral = "metal";
		public string walltype = "metal";
		public bool opening = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.canSmoothWith = new ByTable(new object [] { 
				typeof(Tile_Simulated_Wall), 
				typeof(Tile_Simulated_Wall_RWall), 
				typeof(Obj_Structure_Falsewall), 
				typeof(Obj_Structure_Falsewall_Reinforced), 
				typeof(Tile_Simulated_Wall_Rust), 
				typeof(Tile_Simulated_Wall_RWall_Rust)
			 });
			this.smooth = 1;
			this.icon = "icons/turf/walls/wall.dmi";
		}

		public Obj_Structure_Falsewall ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: false_walls.dm
		public override bool storage_contents_dump_act( Obj_Item_Weapon_Storage src_object = null, Mob user = null ) {
			return false;
		}

		// Function from file: false_walls.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic T = null;
			dynamic WT = null;
			dynamic D = null;

			
			if ( this.opening ) {
				user.WriteMsg( "<span class='warning'>You must wait until the door has stopped moving!</span>" );
				return null;
			}

			if ( this.density ) {
				T = GlobalFuncs.get_turf( this );

				if ( T.density ) {
					user.WriteMsg( "<span class='warning'>" + this + " is blocked!</span>" );
					return null;
				}

				if ( A is Obj_Item_Weapon_Screwdriver ) {
					
					if ( !( T is Tile_Simulated_Floor ) ) {
						user.WriteMsg( "<span class='warning'>" + this + " bolts must be tightened on the floor!</span>" );
						return null;
					}
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " tightens some bolts on the wall.</span>", "<span class='notice'>You tighten the bolts on the wall.</span>" );
					this.ChangeToWall();
				}

				if ( A is Obj_Item_Weapon_Weldingtool ) {
					WT = A;

					if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
						this.dismantle( user );
					}
				}
			} else {
				user.WriteMsg( "<span class='warning'>You can't reach, close it first!</span>" );
			}

			if ( A is Obj_Item_Weapon_Gun_Energy_Plasmacutter ) {
				this.dismantle( user );
			}

			if ( A is Obj_Item_Weapon_Pickaxe_Drill_Jackhammer ) {
				D = A;
				((Obj_Item_Weapon_Pickaxe)D).playDigSound();
				this.dismantle( user );
			}
			return null;
		}

		// Function from file: false_walls.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.density ) {
				this.smooth = 1;
				GlobalFuncs.smooth_icon( this );
				this.icon_state = "";
			} else {
				this.icon_state = "fwall_open";
			}
			return null;
		}

		// Function from file: false_walls.dm
		public void dismantle( dynamic user = null ) {
			Type P = null;

			((Ent_Static)user).visible_message( "<span class='notice'>" + user + " dismantles the false wall.</span>", "<span class='notice'>You dismantle the false wall.</span>" );
			new Obj_Structure_Girder_Displaced( this.loc );

			if ( this.mineral == "metal" ) {
				
				if ( this is Obj_Structure_Falsewall_Reinforced ) {
					new Obj_Item_Stack_Sheet_Plasteel( this.loc );
					new Obj_Item_Stack_Sheet_Plasteel( this.loc );
				} else {
					new Obj_Item_Stack_Sheet_Metal( this.loc );
					new Obj_Item_Stack_Sheet_Metal( this.loc );
				}
			} else {
				P = Lang13.FindClass( "/obj/item/stack/sheet/mineral/" + this.mineral );
				Lang13.Call( P, this.loc );
				Lang13.Call( P, this.loc );
			}
			GlobalFuncs.playsound( this, "sound/items/welder.ogg", 100, 1 );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: false_walls.dm
		public virtual dynamic ChangeToWall( bool? delete = null ) {
			delete = delete ?? true;

			dynamic T = null;

			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( this.walltype ) || this.walltype == "metal" ) {
				((Tile)T).ChangeTurf( typeof(Tile_Simulated_Wall) );
			} else {
				((Tile)T).ChangeTurf( Lang13.FindClass( "/turf/simulated/wall/mineral/" + this.walltype ) );
			}

			if ( delete == true ) {
				GlobalFuncs.qdel( this );
			}
			return T;
		}

		// Function from file: false_walls.dm
		public void do_the_flick(  ) {
			
			if ( this.density ) {
				this.smooth = 0;
				this.clear_smooth_overlays();
				this.icon_state = "fwall_opening";
			} else {
				this.icon_state = "fwall_closing";
			}
			return;
		}

		// Function from file: false_walls.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic srcturf = null;
			Mob_Living obstacle = null;

			
			if ( this.opening ) {
				return null;
			}
			this.opening = true;

			if ( this.density ) {
				this.do_the_flick();
				Task13.Sleep( 5 );

				if ( !GlobalFuncs.qdeleted( this ) ) {
					this.density = false;
					this.SetOpacity( 0 );
					this.update_icon();
				}
			} else {
				srcturf = GlobalFuncs.get_turf( this );

				foreach (dynamic _a in Lang13.Enumerate( srcturf, typeof(Mob_Living) )) {
					obstacle = _a;
					
					this.opening = false;
					return null;
				}
				this.do_the_flick();
				this.density = true;
				Task13.Sleep( 5 );

				if ( !GlobalFuncs.qdeleted( this ) ) {
					this.SetOpacity( 1 );
					this.update_icon();
				}
			}
			this.opening = false;
			return null;
		}

	}

}