// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Storage_Lockbox : Obj_Item_Weapon_Storage {

		public bool locked = true;
		public bool broken = false;
		public string icon_locked = "lockbox+l";
		public string icon_closed = "lockbox";
		public string icon_broken = "lockbox+b";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "syringe_kit";
			this.w_class = 4;
			this.max_w_class = 3;
			this.storage_slots = 4;
			this.req_access = new ByTable(new object [] { 3 });
			this.icon_state = "lockbox+l";
		}

		public Obj_Item_Weapon_Storage_Lockbox ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: lockbox.dm
		public override bool can_be_inserted( dynamic W = null, bool? stop_messages = null, dynamic user = null ) {
			stop_messages = stop_messages ?? false;

			
			if ( this.locked ) {
				return false;
			}
			return base.can_be_inserted( (object)(W), stop_messages, (object)(user) );
		}

		// Function from file: lockbox.dm
		public override bool storage_contents_dump_act( Obj_Item_Weapon_Storage src_object = null, Mob user = null ) {
			
			if ( this.locked ) {
				user.WriteMsg( "<span class='warning'>It's locked!</span>" );
				return false;
			}
			return base.storage_contents_dump_act( src_object, user );
		}

		// Function from file: lockbox.dm
		public override void show_to( dynamic user = null ) {
			
			if ( this.locked ) {
				user.WriteMsg( "<span class='warning'>It's locked!</span>" );
			} else {
				base.show_to( (object)(user) );
			}
			return;
		}

		// Function from file: lockbox.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !this.broken ) {
				this.broken = true;
				this.locked = false;
				this.desc += "It appears to be broken.";
				this.icon_state = this.icon_broken;

				if ( Lang13.Bool( user ) ) {
					this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " has been broken by " ).item( user ).str( " with an electromagnetic card!</span>" ).ToString() );
					return false;
				}
			}
			return false;
		}

		// Function from file: lockbox.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			
			if ( this.locked ) {
				this.add_fingerprint( Task13.User );
				Task13.User.WriteMsg( "<span class='warning'>It's locked!</span>" );
				return 0;
			}
			base.MouseDrop( (object)(over), (object)(src_location), (object)(over_location), src_control, (object)(over_control), _params );
			return null;
		}

		// Function from file: lockbox.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( Lang13.Bool( ((Obj_Item)A).GetID() ) ) {
				
				if ( this.broken ) {
					user.WriteMsg( "<span class='danger'>It appears to be broken.</span>" );
					return null;
				}

				if ( this.allowed( user ) ) {
					this.locked = !this.locked;

					if ( this.locked ) {
						this.icon_state = this.icon_locked;
						user.WriteMsg( "<span class='danger'>You lock the " + this.name + "!</span>" );
						return null;
					} else {
						this.icon_state = this.icon_closed;
						user.WriteMsg( "<span class='danger'>You unlock the " + this.name + "!</span>" );
						return null;
					}
				} else {
					user.WriteMsg( "<span class='danger'>Access Denied.</span>" );
					return null;
				}
			}

			if ( !this.locked ) {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			} else {
				user.WriteMsg( "<span class='danger'>It's locked!</span>" );
			}
			return null;
		}

	}

}