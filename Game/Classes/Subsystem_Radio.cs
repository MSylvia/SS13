// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Subsystem_Radio : Subsystem {

		public ByTable frequencies = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Radio";
			this.priority = 18;
		}

		// Function from file: radio.dm
		public Subsystem_Radio (  ) {
			
			if ( GlobalVars.SSradio != this ) {
				
				if ( GlobalVars.SSradio is Subsystem_Radio ) {
					this.Recover();
					GlobalFuncs.qdel( GlobalVars.SSradio );
				}
				GlobalVars.SSradio = this;
			}
			return;
		}

		// Function from file: radio.dm
		public RadioFrequency return_frequency( dynamic new_frequency = null ) {
			string f_text = null;
			RadioFrequency frequency = null;

			f_text = String13.NumberToString( Convert.ToDouble( new_frequency ) );
			frequency = this.frequencies[f_text];

			if ( !( frequency != null ) ) {
				frequency = new RadioFrequency();
				frequency.frequency = new_frequency;
				this.frequencies[f_text] = frequency;
			}
			return frequency;
		}

		// Function from file: radio.dm
		public bool remove_object( Obj device = null, double? old_frequency = null ) {
			string f_text = null;
			RadioFrequency frequency = null;

			f_text = String13.NumberToString( old_frequency ??0 );
			frequency = this.frequencies[f_text];

			if ( frequency != null ) {
				frequency.remove_listener( device );

				if ( frequency.devices.len == 0 ) {
					GlobalFuncs.qdel( frequency );
					this.frequencies.Remove( f_text );
				}
			}
			return true;
		}

		// Function from file: radio.dm
		public RadioFrequency add_object( Obj device = null, double? new_frequency = null, string filter = null ) {
			string f_text = null;
			RadioFrequency frequency = null;

			f_text = String13.NumberToString( new_frequency ??0 );
			frequency = this.frequencies[f_text];

			if ( !( frequency != null ) ) {
				frequency = new RadioFrequency();
				frequency.frequency = new_frequency;
				this.frequencies[f_text] = frequency;
			}
			frequency.add_listener( device, filter );
			return frequency;
		}

	}

}