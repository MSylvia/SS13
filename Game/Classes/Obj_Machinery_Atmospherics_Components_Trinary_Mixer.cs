// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Trinary_Mixer : Obj_Machinery_Atmospherics_Components_Trinary {

		public bool on = false;
		public double target_pressure = 101.32499694824219;
		public double node1_concentration = 0.5;
		public double node2_concentration = 0.5;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_unwrench = true;
			this.icon_state = "mixer_off";
		}

		// Function from file: mixer.dm
		public Obj_Machinery_Atmospherics_Components_Trinary_Mixer ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic air3 = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			air3 = this.airs[3];
			air3.volume = 300;
			this.airs[3] = air3;
			return;
		}

		// Function from file: mixer.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			double? value = null;
			double? value2 = null;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _b = action; // Was a switch-case, sorry for the mess.
			if ( _b=="power" ) {
				this.on = !this.on;
				this.investigate_log( "was turned " + ( this.on ? "on" : "off" ) + " by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
			} else if ( _b=="pressure" ) {
				
				dynamic _a = _params["pressure"]; // Was a switch-case, sorry for the mess.
				if ( _a=="max" ) {
					this.target_pressure = 4500;
				} else if ( _a=="custom" ) {
					this.target_pressure = Num13.MaxInt( 0, Num13.MinInt( 4500, Convert.ToInt32( this.safe_input( "Pressure control", "Enter new output pressure (0-" + 4500 + " kPa):", this.target_pressure ) ) ) );
				}
				this.investigate_log( "was set to " + this.target_pressure + " kPa by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
			} else if ( _b=="node1" ) {
				value = String13.ParseNumber( _params["concentration"] );
				this.node1_concentration = Num13.MaxInt( 0, Num13.MinInt( 1, ((int)( this.node1_concentration + ( value ??0) )) ) );
				this.node2_concentration = Num13.MaxInt( 0, Num13.MinInt( 1, ((int)( this.node2_concentration - ( value ??0) )) ) );
				this.investigate_log( "was set to " + this.node1_concentration + " % on node 1 by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
			} else if ( _b=="node2" ) {
				value2 = String13.ParseNumber( _params["concentration"] );
				this.node2_concentration = Num13.MaxInt( 0, Num13.MinInt( 1, ((int)( this.node2_concentration + ( value2 ??0) )) ) );
				this.node1_concentration = Num13.MaxInt( 0, Num13.MinInt( 1, ((int)( this.node1_concentration - ( value2 ??0) )) ) );
				this.investigate_log( "was set to " + this.node2_concentration + " % on node 2 by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
			}
			this.update_icon();
			return true;
		}

		// Function from file: mixer.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable();
			data["on"] = this.on;
			data["set_pressure"] = Num13.Floor( this.target_pressure );
			data["max_pressure"] = Num13.Floor( 4500 );
			data["node1_concentration"] = Num13.Floor( this.node1_concentration * 100 );
			data["node2_concentration"] = Num13.Floor( this.node2_concentration * 100 );
			return data;
		}

		// Function from file: mixer.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "atmos_mixer", this.name, 330, 165, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: mixer.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !this.allowed( Task13.User ) ) {
				Task13.User.WriteMsg( "<span class='danger'>Access denied.</span>" );
				return null;
			}
			this.ui_interact( user );
			return null;
		}

		// Function from file: mixer.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) | !Lang13.Bool( a ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: mixer.dm
		public override int process_atmos(  ) {
			GasMixture air1 = null;
			GasMixture air2 = null;
			dynamic air3 = null;
			dynamic output_starting_pressure = null;
			double pressure_delta = 0;
			double transfer_moles1 = 0;
			double transfer_moles2 = 0;
			double air1_moles = 0;
			double air2_moles = 0;
			double ratio = 0;
			GasMixture removed1 = null;
			GasMixture removed2 = null;
			Pipeline parent1 = null;
			Pipeline parent2 = null;
			Pipeline parent3 = null;

			base.process_atmos();

			if ( !this.on ) {
				return 0;
			}

			if ( !( Lang13.Bool( this.nodes[1] ) && Lang13.Bool( this.nodes[2] ) && Lang13.Bool( this.nodes[3] ) ) ) {
				return 0;
			}
			air1 = this.airs[1];
			air2 = this.airs[2];
			air3 = this.airs[3];
			output_starting_pressure = air3.return_pressure();

			if ( Convert.ToDouble( output_starting_pressure ) >= this.target_pressure ) {
				return 1;
			}
			pressure_delta = this.target_pressure - Convert.ToDouble( output_starting_pressure );
			transfer_moles1 = 0;
			transfer_moles2 = 0;

			if ( Convert.ToDouble( air1.temperature ) > 0 ) {
				transfer_moles1 = this.node1_concentration * pressure_delta * Convert.ToDouble( air3.volume ) / Convert.ToDouble( air1.temperature * 8.31 );
			}

			if ( Convert.ToDouble( air2.temperature ) > 0 ) {
				transfer_moles2 = this.node2_concentration * pressure_delta * Convert.ToDouble( air3.volume ) / Convert.ToDouble( air2.temperature * 8.31 );
			}
			air1_moles = air1.total_moles();
			air2_moles = air2.total_moles();

			if ( air1_moles < transfer_moles1 || air2_moles < transfer_moles2 ) {
				ratio = 0;

				if ( transfer_moles1 > 0 && transfer_moles2 > 0 ) {
					ratio = Num13.MinInt( ((int)( air1_moles / transfer_moles1 )), ((int)( air2_moles / transfer_moles2 )) );
				}

				if ( transfer_moles2 == 0 && transfer_moles1 > 0 ) {
					ratio = air1_moles / transfer_moles1;
				}

				if ( transfer_moles1 == 0 && transfer_moles2 > 0 ) {
					ratio = air2_moles / transfer_moles2;
				}
				transfer_moles1 *= ratio;
				transfer_moles2 *= ratio;
			}

			if ( transfer_moles1 > 0 ) {
				removed1 = air1.remove( transfer_moles1 );
				air3.merge( removed1 );
			}

			if ( transfer_moles2 > 0 ) {
				removed2 = air2.remove( transfer_moles2 );
				air3.merge( removed2 );
			}

			if ( transfer_moles1 != 0 ) {
				parent1 = this.parents[1];
				parent1.update = true;
			}

			if ( transfer_moles2 != 0 ) {
				parent2 = this.parents[2];
				parent2.update = true;
			}
			parent3 = this.parents[3];
			parent3.update = true;
			return 1;
		}

		// Function from file: mixer.dm
		public override void power_change(  ) {
			int old_stat = 0;

			old_stat = this.stat;
			base.power_change();

			if ( ( this.stat & 2 ) != 0 ) {
				this.on = false;
			}

			if ( old_stat != this.stat ) {
				this.update_icon();
			}
			return;
		}

		// Function from file: mixer.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			
			if ( !( ( this.stat & 2 ) != 0 ) && this.on && Lang13.Bool( this.nodes[1] ) && Lang13.Bool( this.nodes[2] ) && Lang13.Bool( this.nodes[3] ) ) {
				this.icon_state = "mixer_on" + ( this.flipped ? "_f" : "" );
				return;
			}
			this.icon_state = "mixer_off" + ( this.flipped ? "_f" : "" );
			return;
		}

		// Function from file: mixer.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			dynamic direction = null;
			Obj_Machinery_Atmospherics node = null;

			this.overlays.Cut();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				

				if ( Lang13.Bool( direction & this.initialize_directions ) ) {
					node = this.findConnecting( direction );

					if ( node != null ) {
						this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/trinary_devices.dmi", "cap", direction, node.pipe_color ) );
						continue;
					}
					this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/trinary_devices.dmi", "cap", direction ) );
				}
			}
			return base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
		}

	}

}