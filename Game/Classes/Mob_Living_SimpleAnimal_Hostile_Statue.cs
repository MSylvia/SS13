// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Statue : Mob_Living_SimpleAnimal_Hostile {

		public bool cannot_be_seen = true;
		public dynamic creator = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "human_male";
			this.icon_dead = "human_male";
			this.a_intent = "harm";
			this.response_help = "touches";
			this.response_disarm = "pushes";
			this.speed = -1;
			this.maxHealth = 50000;
			this.health = 50000;
			this.healable = false;
			this.harm_intent_damage = 70;
			this.melee_damage_lower = 68;
			this.melee_damage_upper = 83;
			this.attacktext = "claws";
			this.attack_sound = "sound/hallucinations/growl1.ogg";
			this.atmos_requirements = new ByTable().Set( "min_oxy", 0 ).Set( "max_oxy", 0 ).Set( "min_tox", 0 ).Set( "max_tox", 0 ).Set( "min_co2", 0 ).Set( "max_co2", 0 ).Set( "min_n2", 0 ).Set( "max_n2", 0 );
			this.minbodytemp = 0;
			this.faction = new ByTable(new object [] { "statue" });
			this.move_to_delay = 0;
			this.vision_range = 12;
			this.aggro_vision_range = 12;
			this.idle_vision_range = 12;
			this.search_objects = 1;
			this.anchored = 1;
			this.status_flags = 4096;
			this.gold_core_spawnable = 1;
			this.icon = "icons/obj/statue.dmi";
			this.icon_state = "human_male";
			this.see_in_dark = 13;
		}

		// Function from file: statue.dm
		public Mob_Living_SimpleAnimal_Hostile_Statue ( dynamic loc = null, dynamic creator = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.mob_spell_list.Add( new Obj_Effect_ProcHolder_Spell_AoeTurf_FlickerLights( this ) );
			this.mob_spell_list.Add( new Obj_Effect_ProcHolder_Spell_AoeTurf_Blindness( this ) );
			this.mob_spell_list.Add( new Obj_Effect_ProcHolder_Spell_Targeted_NightVision( this ) );
			this.see_invisible = 15;

			if ( Lang13.Bool( creator ) ) {
				this.creator = creator;
			}
			return;
		}

		// Function from file: statue.dm
		public override bool restrained(  ) {
			bool _default = false;

			_default = base.restrained();

			if ( Lang13.Bool( this.can_be_seen( this.loc ) ) ) {
				return true;
			}
			return _default;
		}

		// Function from file: statue.dm
		public override void sentience_act(  ) {
			this.faction -= "neutral";
			return;
		}

		// Function from file: statue.dm
		public override ByTable ListTargets(  ) {
			ByTable _default = null;

			_default = base.ListTargets();
			return _default - this.creator;
		}

		// Function from file: statue.dm
		public override bool CanAttack( dynamic the_target = null ) {
			dynamic L = null;

			
			if ( the_target is Mob_Living ) {
				L = the_target;

				if ( !Lang13.Bool( L.client ) && !Lang13.Bool( L.ckey ) ) {
					return false;
				}
			}
			return base.CanAttack( (object)(the_target) );
		}

		// Function from file: statue.dm
		public override dynamic gib( dynamic animation = null ) {
			animation = animation ?? 0;

			this.dust( animation );
			return null;
		}

		// Function from file: statue.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			return false;
		}

		// Function from file: statue.dm
		public dynamic can_be_seen( dynamic destination = null ) {
			dynamic T = null;
			ByTable check_list = null;
			Ent_Static check = null;
			Mob_Living M = null;
			Obj_Mecha M2 = null;

			
			if ( !this.cannot_be_seen ) {
				return null;
			}
			T = GlobalFuncs.get_turf( this.loc );

			if ( Lang13.Bool( T ) && Lang13.Bool( destination ) && Lang13.Bool( T.lighting_object ) ) {
				
				if ( T.lighting_lumcount < 1 && destination.lighting_lumcount < 1 ) {
					return null;
				}

				if ( T == destination ) {
					destination = null;
				}
			}
			check_list = new ByTable(new object [] { this });

			if ( Lang13.Bool( destination ) ) {
				check_list.Add( destination );
			}

			foreach (dynamic _c in Lang13.Enumerate( check_list, typeof(Ent_Static) )) {
				check = _c;
				

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( check, Game13.view + 1 ) - this, typeof(Mob_Living) )) {
					M = _a;
					

					if ( M.client != null && this.CanAttack( M ) && !M.has_unlimited_silicon_privilege ) {
						
						if ( !( M.eye_blind != 0 ) ) {
							return M;
						}
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( check, Game13.view + 1 ), typeof(Obj_Mecha) )) {
					M2 = _b;
					

					if ( Lang13.Bool( M2.occupant ) && Lang13.Bool( M2.occupant.client ) ) {
						
						if ( !( M2.occupant.eye_blind != 0 ) ) {
							return M2.occupant;
						}
					}
				}
			}
			return null;
		}

		// Function from file: statue.dm
		public override void face_atom( dynamic A = null ) {
			
			if ( !Lang13.Bool( this.can_be_seen( GlobalFuncs.get_turf( this.loc ) ) ) ) {
				base.face_atom( (object)(A) );
			}
			return;
		}

		// Function from file: statue.dm
		public override void DestroySurroundings(  ) {
			
			if ( !Lang13.Bool( this.can_be_seen( GlobalFuncs.get_turf( this.loc ) ) ) ) {
				base.DestroySurroundings();
			}
			return;
		}

		// Function from file: statue.dm
		public override dynamic AttackingTarget(  ) {
			
			if ( Lang13.Bool( this.can_be_seen( GlobalFuncs.get_turf( this.loc ) ) ) ) {
				
				if ( this.client != null ) {
					this.WriteMsg( "<span class='warning'>You cannot attack, there are eyes on you!</span>" );
					return null;
				}
			} else {
				base.AttackingTarget();
			}
			return null;
		}

		// Function from file: statue.dm
		public override bool Life(  ) {
			dynamic watching = null;

			base.Life();

			if ( !( this.client != null ) && Lang13.Bool( this.target ) ) {
				watching = this.can_be_seen();

				if ( Lang13.Bool( watching ) && watching != this.target ) {
					
					if ( Map13.GetDistance( watching, this ) > Map13.GetDistance( this.target, this ) ) {
						this.LoseTarget();
						this.GiveTarget( watching );
					}
				}
			}
			return false;
		}

		// Function from file: statue.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			
			if ( Lang13.Bool( this.can_be_seen( NewLoc ) ) ) {
				
				if ( this.client != null ) {
					this.WriteMsg( "<span class='warning'>You cannot move, there are eyes on you!</span>" );
				}
				return false;
			}
			return base.Move( (object)(NewLoc), Dir, step_x, step_y );
		}

	}

}