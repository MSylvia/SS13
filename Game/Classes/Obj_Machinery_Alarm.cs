// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Alarm : Obj_Machinery {

		public double? frequency = 1439;
		public double alarm_frequency = 1437;
		public RadioFrequency radio_connection = null;
		public bool locked = true;
		public Wires_Alarm wires = null;
		public bool aidisabled = false;
		public bool shorted = false;
		public int buildstage = 2;
		public double? mode = 1;
		public double? screen = 1;
		public dynamic area_uid = null;
		public dynamic alarm_area = null;
		public int danger_level = 0;
		public ByTable TLV = new ByTable()
											.Set( "oxygen", new Tlv( 16, 19, 135, 140 ) )
											.Set( "nitrogen", new Tlv( -1, -1, 1000, 1000 ) )
											.Set( "carbon dioxide", new Tlv( -1, -1, 5, 10 ) )
											.Set( "plasma", new Tlv( -1, -1, 0.2, 0.5 ) )
											.Set( "other", new Tlv( -1, -1, 0.5, 1 ) )
											.Set( "pressure", new Tlv( 81.51, 91.19249725341797, 111.4574966430664, 121.59 ) )
											.Set( "temperature", new Tlv( 273.41, 283.41, 313.41, 339.41 ) )
										;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 4;
			this.active_power_usage = 8;
			this.power_channel = 3;
			this.req_access = new ByTable(new object [] { 24 });
			this.icon = "icons/obj/monitors.dmi";
			this.icon_state = "alarm0";
		}

		// Function from file: alarm.dm
		public Obj_Machinery_Alarm ( dynamic loc = null, dynamic ndir = null, dynamic nbuild = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.wires = new Wires_Alarm( this );

			if ( Lang13.Bool( ndir ) ) {
				this.dir = Convert.ToInt32( ndir );
			}

			if ( Lang13.Bool( nbuild ) ) {
				this.buildstage = 0;
				this.panel_open = true;
				this.pixel_x = ( ( this.dir & 3 ) != 0 ? 0 : ( this.dir == 4 ? -24 : 24 ) );
				this.pixel_y = ( ( this.dir & 3 ) != 0 ? ( this.dir == 1 ? -24 : 24 ) : 0 );
			}
			this.alarm_area = GlobalFuncs.get_area( loc );

			if ( Lang13.Bool( this.alarm_area.master ) ) {
				this.alarm_area = this.alarm_area.master;
			}
			this.area_uid = this.alarm_area.uid;

			if ( this.name == "alarm" ) {
				this.name = "" + this.alarm_area.name + " Air Alarm";
			}
			this.update_icon();

			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
				this.initialize();
			}
			return;
		}

		// Function from file: alarm.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				this.emagged = 1;

				if ( Lang13.Bool( user ) ) {
					((Ent_Static)user).visible_message( "<span class='warning'>Sparks fly out of the " + this + "!</span>", "<span class='notice'>You emag the " + this + ", disabling its safeties.</span>" );
				}
				GlobalFuncs.playsound( this.loc, "sound/effects/sparks4.ogg", 50, 1 );
				return false;
			}
			return false;
		}

		// Function from file: alarm.dm
		public override void power_change(  ) {
			
			if ( Lang13.Bool( this.powered( this.power_channel ) ) ) {
				this.stat &= 65533;
			} else {
				this.stat |= 2;
			}
			Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
				
				if ( this.loc != null ) {
					this.update_icon();
				}
				return;
			}));
			return;
		}

		// Function from file: alarm.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Item_Stack_CableCoil cable = null;
			dynamic cable2 = null;

			
			switch ((int)( this.buildstage )) {
				case 2:
					
					if ( A is Obj_Item_Weapon_Wirecutters && this.panel_open == true && ( this.wires.wires_status == 27 || this.wires.wires_status == 31 ) ) {
						GlobalFuncs.playsound( this.loc, "sound/items/Wirecutter.ogg", 50, 1 );
						user.WriteMsg( "<span class='notice'>You cut the final wires.</span>" );
						cable = new Obj_Item_Stack_CableCoil( this.loc );
						cable.amount = 5;
						this.buildstage = 1;
						this.update_icon();
						return null;
					}

					if ( A is Obj_Item_Weapon_Screwdriver ) {
						GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );
						this.panel_open = !( this.panel_open == true );
						user.WriteMsg( "<span class='notice'>The wires have been " + ( this.panel_open == true ? "exposed" : "unexposed" ) + ".</span>" );
						this.update_icon();
						return null;
					}

					if ( this.panel_open == true && ( A is Obj_Item_Device_Multitool || A is Obj_Item_Weapon_Wirecutters ) ) {
						return this.attack_hand( user );
					} else if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
						
						if ( ( this.stat & 3 ) != 0 ) {
							user.WriteMsg( "<span class='warning'>It does nothing!</span>" );
						} else if ( this.allowed( Task13.User ) && !( this.wires.IsIndexCut( GlobalVars.AALARM_WIRE_IDSCAN ) != 0 ) ) {
							this.locked = !this.locked;
							user.WriteMsg( "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the air alarm interface.</span>" );
							this.updateUsrDialog();
						} else {
							user.WriteMsg( "<span class='danger'>Access denied.</span>" );
						}
						return null;
					}
					break;
				case 1:
					
					if ( A is Obj_Item_Weapon_Crowbar ) {
						((Ent_Static)user).visible_message( "" + user.name + " removes the electronics from " + this.name + ".", "<span class='notice'>You start prying out the circuit...</span>" );
						GlobalFuncs.playsound( this.loc, "sound/items/Crowbar.ogg", 50, 1 );

						if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
							
							if ( this.buildstage == 1 ) {
								user.WriteMsg( "<span class='notice'>You remove the air alarm electronics.</span>" );
								new Obj_Item_Weapon_Electronics_Airalarm( this.loc );
								GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );
								this.buildstage = 0;
								this.update_icon();
							}
						}
						return null;
					}

					if ( A is Obj_Item_Stack_CableCoil ) {
						cable2 = A;

						if ( ( ((Obj_Item_Stack)cable2).get_amount() ??0) < 5 ) {
							user.WriteMsg( "<span class='warning'>You need five lengths of cable to wire the fire alarm!</span>" );
							return null;
						}
						((Ent_Static)user).visible_message( "" + user.name + " wires the air alarm.", "<span class='notice'>You start wiring the air alarm...</span>" );

						if ( GlobalFuncs.do_after( user, 20, null, this ) ) {
							
							if ( ( ((Obj_Item_Stack)cable2).get_amount() ??0) >= 5 && this.buildstage == 1 ) {
								cable2.use( 5 );
								user.WriteMsg( "<span class='notice'>You wire the air alarm.</span>" );
								this.wires.wires_status = 0;
								this.aidisabled = false;
								this.locked = true;
								this.mode = 1;
								this.shorted = false;
								this.post_alert( 0 );
								this.buildstage = 2;
								this.update_icon();
							}
						}
						return null;
					}
					break;
				case 0:
					
					if ( A is Obj_Item_Weapon_Electronics_Airalarm ) {
						
						if ( ((Mob)user).unEquip( A ) ) {
							user.WriteMsg( "<span class='notice'>You insert the circuit.</span>" );
							this.buildstage = 1;
							this.update_icon();
							GlobalFuncs.qdel( A );
						}
						return null;
					}

					if ( A is Obj_Item_Weapon_Wrench ) {
						user.WriteMsg( new Txt( "<span class='notice'>You detach " ).the( this ).item().str( " from the wall.</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
						new Obj_Item_Wallframe_Alarm( user.loc );
						GlobalFuncs.qdel( this );
						return null;
					}
					break;
			}
			return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
		}

		// Function from file: alarm.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static location = null;
			GasMixture environment = null;
			Tlv cur_tlv = null;
			dynamic GET_PP = null;
			double environment_pressure = 0;
			int pressure_dangerlevel = 0;
			int oxygen_dangerlevel = 0;
			int co2_dangerlevel = 0;
			int plasma_dangerlevel = 0;
			double other_moles = 0;
			Gas G = null;
			int other_dangerlevel = 0;
			int temperature_dangerlevel = 0;
			int old_danger_level = 0;

			
			if ( ( this.stat & 3 ) != 0 || this.shorted ) {
				return null;
			}
			location = this.loc;

			if ( !( location is Tile_Simulated ) ) {
				return 0;
			}
			environment = location.return_air();
			GET_PP = environment.temperature * 8.31 / environment.volume;
			cur_tlv = this.TLV["pressure"];
			environment_pressure = environment.return_pressure();
			pressure_dangerlevel = cur_tlv.get_danger_level( environment_pressure );
			cur_tlv = this.TLV["oxygen"];
			oxygen_dangerlevel = cur_tlv.get_danger_level( ( environment.oxygen ??0) * Convert.ToDouble( GET_PP ) );
			cur_tlv = this.TLV["carbon dioxide"];
			co2_dangerlevel = cur_tlv.get_danger_level( ( environment.carbon_dioxide ??0) * Convert.ToDouble( GET_PP ) );
			cur_tlv = this.TLV["plasma"];
			plasma_dangerlevel = cur_tlv.get_danger_level( ( environment.toxins ??0) * Convert.ToDouble( GET_PP ) );
			cur_tlv = this.TLV["other"];
			other_moles = 0;

			foreach (dynamic _a in Lang13.Enumerate( environment.trace_gases, typeof(Gas) )) {
				G = _a;
				
				other_moles += G.moles ??0;
			}
			other_dangerlevel = cur_tlv.get_danger_level( other_moles * Convert.ToDouble( GET_PP ) );
			cur_tlv = this.TLV["temperature"];
			temperature_dangerlevel = cur_tlv.get_danger_level( environment.temperature );
			old_danger_level = this.danger_level;
			this.danger_level = Num13.MaxInt( pressure_dangerlevel, oxygen_dangerlevel, co2_dangerlevel, plasma_dangerlevel, other_dangerlevel, temperature_dangerlevel );

			if ( old_danger_level != this.danger_level ) {
				this.apply_danger_level();
			}

			if ( this.mode == 4 && environment_pressure < 5.066249847412109 ) {
				this.mode = 1;
				this.apply_mode();
			}
			return null;
		}

		// Function from file: alarm.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.panel_open == true ) {
				
				switch ((int)( this.buildstage )) {
					case 2:
						this.icon_state = "alarmx";
						break;
					case 1:
						this.icon_state = "alarm_b2";
						break;
					case 0:
						this.icon_state = "alarm_b1";
						break;
				}
				return null;
			}

			if ( ( this.stat & 3 ) != 0 || this.shorted ) {
				this.icon_state = "alarmp";
				return null;
			}

			switch ((int)( Num13.MaxInt( this.danger_level, this.alarm_area.atmosalm ) )) {
				case 0:
					this.icon_state = "alarm0";
					break;
				case 1:
					this.icon_state = "alarm2";
					break;
				case 2:
					this.icon_state = "alarm1";
					break;
			}
			return null;
		}

		// Function from file: alarm.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			dynamic device_id = null;
			dynamic input_pressure = null;
			string env = null;
			dynamic varname = null;
			Base_Data tlv = null;
			dynamic newval = null;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			if ( this.buildstage != 2 ) {
				return false;
			}

			if ( this.locked && !Task13.User.has_unlimited_silicon_privilege ) {
				return false;
			}

			if ( Task13.User.has_unlimited_silicon_privilege && this.aidisabled ) {
				return false;
			}
			device_id = _params["id_tag"];

			dynamic _b = action; // Was a switch-case, sorry for the mess.
			if ( _b=="lock" ) {
				
				if ( Task13.User.has_unlimited_silicon_privilege && !( this.wires.IsIndexCut( GlobalVars.AALARM_WIRE_IDSCAN ) != 0 ) ) {
					this.locked = !this.locked;
				}
			} else if ( _b=="power" || _b=="co2_scrub" || _b=="tox_scrub" || _b=="n2o_scrub" || _b=="widenet" || _b=="scrubbing" ) {
				this.send_signal( device_id, new ByTable().Set( "" + action, String13.ParseNumber( _params["val"] ) ) );
			} else if ( _b=="excheck" ) {
				this.send_signal( device_id, new ByTable().Set( "checks", ((int)( String13.ParseNumber( _params["val"] ) ??0 )) ^ 1 ) );
			} else if ( _b=="incheck" ) {
				this.send_signal( device_id, new ByTable().Set( "checks", ((int)( String13.ParseNumber( _params["val"] ) ??0 )) ^ 2 ) );
			} else if ( _b=="external_pressure" ) {
				
				dynamic _a = _params["pressure"]; // Was a switch-case, sorry for the mess.
				if ( _a=="reset" ) {
					this.send_signal( device_id, new ByTable().Set( "set_external_pressure", 101.32499694824219 ) );
				} else {
					input_pressure = Interface13.Input( "Enter target pressure:", "Pressure Controls", null, null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( Lang13.IsNumber( input_pressure ) ) ) {
						this.send_signal( device_id, new ByTable().Set( "set_external_pressure", input_pressure ) );
					}
				}
			} else if ( _b=="threshold" ) {
				env = _params["env"];
				varname = _params["var"];
				tlv = this.TLV[env];
				newval = Interface13.Input( "Enter " + varname + " for " + env + ":", "Alarm Triggers", tlv.vars[varname], null, null, InputType.Num | InputType.Null );

				if ( newval == null ) {
					return false;
				}

				if ( Convert.ToDouble( newval ) < 0 ) {
					tlv.vars[varname] = -1;
				} else if ( env == "temperature" && Convert.ToDouble( newval ) > 5000 ) {
					tlv.vars[varname] = 5000;
				} else if ( env == "pressure" && Convert.ToDouble( newval ) > 5066.25 ) {
					tlv.vars[varname] = 5066.25;
				} else if ( env != "temperature" && env != "pressure" && Convert.ToDouble( newval ) > 200 ) {
					tlv.vars[varname] = 200;
				} else {
					newval = Num13.Round( Convert.ToDouble( newval ), 0.01 );
					tlv.vars[varname] = newval;
				}
			} else if ( _b=="screen" ) {
				this.screen = String13.ParseNumber( _params["screen"] );
			} else if ( _b=="mode" ) {
				this.mode = String13.ParseNumber( _params["mode"] );
				this.apply_mode();
			} else if ( _b=="alarm" ) {
				
				if ( ((Zone)this.alarm_area).atmosalert( 2, this ) ) {
					this.post_alert( 2 );
				}
				this.update_icon();
			} else if ( _b=="reset" ) {
				
				if ( ((Zone)this.alarm_area).atmosalert( 0, this ) ) {
					this.post_alert( 0 );
				}
				this.update_icon();
			}
			return true;
		}

		// Function from file: alarm.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable().Set( "locked", this.locked ).Set( "siliconUser", user.has_unlimited_silicon_privilege ).Set( "screen", this.screen ).Set( "emagged", this.emagged );
			this.populate_status( data );

			if ( !this.locked || user.has_unlimited_silicon_privilege ) {
				this.populate_controls( data );
			}
			return data;
		}

		// Function from file: alarm.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "air_alarm", this.name, 440, 650, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: alarm.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( user.has_unlimited_silicon_privilege && this.aidisabled ) {
				user.WriteMsg( "AI control for this Air Alarm interface has been disabled." );
				return null;
			}

			if ( this.panel_open == true && !( user is Mob_Living_Silicon_Ai ) ) {
				this.wires.Interact( user );
			} else if ( !this.shorted ) {
				this.ui_interact( user );
			}
			return null;
		}

		// Function from file: alarm.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) || !Lang13.Bool( a ) ) {
				return null;
			}

			if ( this.buildstage != 2 ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: alarm.dm
		public void apply_danger_level(  ) {
			int new_area_danger_level = 0;
			dynamic A = null;
			Obj_Machinery_Alarm AA = null;

			new_area_danger_level = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.alarm_area.related )) {
				A = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( A, typeof(Obj_Machinery_Alarm) )) {
					AA = _a;
					

					if ( !( ( AA.stat & 3 ) != 0 ) && !AA.shorted ) {
						new_area_danger_level = Num13.MaxInt( new_area_danger_level, AA.danger_level );
					}
				}
			}

			if ( ((Zone)this.alarm_area).atmosalert( new_area_danger_level, this ) ) {
				this.post_alert( new_area_danger_level );
			}
			this.update_icon();
			return;
		}

		// Function from file: alarm.dm
		public void post_alert( int alert_level = 0 ) {
			RadioFrequency frequency = null;
			Signal alert_signal = null;

			frequency = GlobalVars.SSradio.return_frequency( this.alarm_frequency );

			if ( !( frequency != null ) ) {
				return;
			}
			alert_signal = new Signal();
			alert_signal.source = this;
			alert_signal.transmission_method = 1;
			alert_signal.data["zone"] = this.alarm_area.name;
			alert_signal.data["type"] = "Atmospheric";

			if ( alert_level == 2 ) {
				alert_signal.data["alert"] = "severe";
			} else if ( alert_level == 1 ) {
				alert_signal.data["alert"] = "minor";
			} else if ( alert_level == 0 ) {
				alert_signal.data["alert"] = "clear";
			}
			frequency.post_signal( this, alert_signal, null, -1 );
			return;
		}

		// Function from file: alarm.dm
		public void apply_mode(  ) {
			dynamic device_id = null;
			dynamic device_id2 = null;
			dynamic device_id3 = null;
			dynamic device_id4 = null;
			dynamic device_id5 = null;
			dynamic device_id6 = null;
			dynamic device_id7 = null;
			dynamic device_id8 = null;
			dynamic device_id9 = null;
			dynamic device_id10 = null;
			dynamic device_id11 = null;
			dynamic device_id12 = null;
			dynamic device_id13 = null;
			dynamic device_id14 = null;
			dynamic device_id15 = null;
			dynamic device_id16 = null;

			
			switch ((double?)( this.mode )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						device_id = _a;
						
						this.send_signal( device_id, new ByTable().Set( "power", 1 ).Set( "co2_scrub", 1 ).Set( "tox_scrub", 0 ).Set( "n2o_scrub", 0 ).Set( "scrubbing", 1 ).Set( "widenet", 0 ) );
					}

					foreach (dynamic _b in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						device_id2 = _b;
						
						this.send_signal( device_id2, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", 101.32499694824219 ) );
					}
					break;
				case 8:
					
					foreach (dynamic _c in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						device_id3 = _c;
						
						this.send_signal( device_id3, new ByTable().Set( "power", 1 ).Set( "co2_scrub", 1 ).Set( "tox_scrub", 1 ).Set( "n2o_scrub", 1 ).Set( "scrubbing", 1 ).Set( "widenet", 1 ) );
					}

					foreach (dynamic _d in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						device_id4 = _d;
						
						this.send_signal( device_id4, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", 101.32499694824219 ) );
					}
					break;
				case 2:
					
					foreach (dynamic _e in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						device_id5 = _e;
						
						this.send_signal( device_id5, new ByTable().Set( "power", 1 ).Set( "widenet", 0 ).Set( "scrubbing", 0 ) );
					}

					foreach (dynamic _f in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						device_id6 = _f;
						
						this.send_signal( device_id6, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", 202.41 ) );
					}
					break;
				case 9:
					
					foreach (dynamic _g in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						device_id7 = _g;
						
						this.send_signal( device_id7, new ByTable().Set( "power", 1 ).Set( "co2_scrub", 1 ).Set( "tox_scrub", 0 ).Set( "n2o_scrub", 0 ).Set( "scrubbing", 1 ).Set( "widenet", 0 ) );
					}

					foreach (dynamic _h in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						device_id8 = _h;
						
						this.send_signal( device_id8, new ByTable().Set( "power", 1 ).Set( "checks", 1 ).Set( "set_external_pressure", 303.9749755859375 ) );
					}
					break;
				case 3:
				case 4:
					
					foreach (dynamic _i in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						device_id9 = _i;
						
						this.send_signal( device_id9, new ByTable().Set( "power", 1 ).Set( "widenet", 1 ).Set( "scrubbing", 0 ) );
					}

					foreach (dynamic _j in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						device_id10 = _j;
						
						this.send_signal( device_id10, new ByTable().Set( "power", 0 ) );
					}
					break;
				case 7:
					
					foreach (dynamic _k in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						device_id11 = _k;
						
						this.send_signal( device_id11, new ByTable().Set( "power", 1 ).Set( "widenet", 0 ).Set( "scrubbing", 0 ) );
					}

					foreach (dynamic _l in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						device_id12 = _l;
						
						this.send_signal( device_id12, new ByTable().Set( "power", 0 ) );
					}
					break;
				case 5:
					
					foreach (dynamic _m in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						device_id13 = _m;
						
						this.send_signal( device_id13, new ByTable().Set( "power", 0 ) );
					}

					foreach (dynamic _n in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						device_id14 = _n;
						
						this.send_signal( device_id14, new ByTable().Set( "power", 0 ) );
					}
					break;
				case 6:
					
					foreach (dynamic _o in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						device_id15 = _o;
						
						this.send_signal( device_id15, new ByTable().Set( "power", 0 ) );
					}

					foreach (dynamic _p in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						device_id16 = _p;
						
						this.send_signal( device_id16, new ByTable().Set( "power", 1 ).Set( "checks", 0 ) );
					}
					break;
			}
			return;
		}

		// Function from file: alarm.dm
		public void populate_controls( ByTable data = null ) {
			dynamic id_tag = null;
			dynamic long_name = null;
			dynamic info = null;
			dynamic id_tag2 = null;
			dynamic long_name2 = null;
			dynamic info2 = null;
			Tlv selected = null;
			ByTable thresholds = null;
			ByTable gas_names = null;
			dynamic g = null;

			
			switch ((double?)( this.screen )) {
				case 1:
					data["mode"] = this.mode;
					break;
				case 2:
					data["vents"] = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
						id_tag = _a;
						
						long_name = this.alarm_area.air_vent_names[id_tag];
						info = this.alarm_area.air_vent_info[id_tag];

						if ( !Lang13.Bool( info ) ) {
							continue;
						}
						data["vents"] += new ByTable(new object [] { 
							new ByTable()
								.Set( "id_tag", id_tag )
								.Set( "long_name", GlobalFuncs.sanitize( long_name ) )
								.Set( "power", info["power"] )
								.Set( "checks", info["checks"] )
								.Set( "excheck", info["checks"] & 1 )
								.Set( "incheck", info["checks"] & 2 )
								.Set( "direction", info["direction"] )
								.Set( "external", info["external"] )
								.Set( "extdefault", Convert.ToDouble( info["external"] ) == 101.32499694824219 )
							
						 });
					}
					break;
				case 3:
					data["scrubbers"] = new ByTable();

					foreach (dynamic _b in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
						id_tag2 = _b;
						
						long_name2 = this.alarm_area.air_scrub_names[id_tag2];
						info2 = this.alarm_area.air_scrub_info[id_tag2];

						if ( !Lang13.Bool( info2 ) ) {
							continue;
						}
						data["scrubbers"] += new ByTable(new object [] { 
							new ByTable()
								.Set( "id_tag", id_tag2 )
								.Set( "long_name", GlobalFuncs.sanitize( long_name2 ) )
								.Set( "power", info2["power"] )
								.Set( "scrubbing", info2["scrubbing"] )
								.Set( "widenet", info2["widenet"] )
								.Set( "filter_co2", info2["filter_co2"] )
								.Set( "filter_toxins", info2["filter_toxins"] )
								.Set( "filter_n2o", info2["filter_n2o"] )
							
						 });
					}
					break;
				case 4:
					data["mode"] = this.mode;
					data["modes"] = new ByTable();
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Filtering - Scrubs out contaminants" ).Set( "mode", 1 ).Set( "selected", this.mode == 1 ).Set( "danger", 0 ) });
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Contaminated - Scrubs out ALL contaminants quickly" ).Set( "mode", 8 ).Set( "selected", this.mode == 8 ).Set( "danger", 0 ) });
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Draught - Siphons out air while replacing" ).Set( "mode", 2 ).Set( "selected", this.mode == 2 ).Set( "danger", 0 ) });
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Refill - Triple vent output" ).Set( "mode", 9 ).Set( "selected", this.mode == 9 ).Set( "danger", 0 ) });
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Cycle - Siphons air before replacing" ).Set( "mode", 4 ).Set( "selected", this.mode == 4 ).Set( "danger", 1 ) });
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Siphon - Siphons air out of the room" ).Set( "mode", 7 ).Set( "selected", this.mode == 7 ).Set( "danger", 1 ) });
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Panic Siphon - Siphons air out of the room quickly" ).Set( "mode", 3 ).Set( "selected", this.mode == 3 ).Set( "danger", 1 ) });
					data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Off - Shuts off vents and scrubbers" ).Set( "mode", 5 ).Set( "selected", this.mode == 5 ).Set( "danger", 0 ) });

					if ( this.emagged != 0 ) {
						data["modes"] += new ByTable(new object [] { new ByTable().Set( "name", "Flood - Shuts off scrubbers and opens vents" ).Set( "mode", 6 ).Set( "selected", this.mode == 6 ).Set( "danger", 1 ) });
					}
					break;
				case 5:
					selected = null;
					thresholds = new ByTable();
					gas_names = new ByTable().Set( "oxygen", "Oxygen" ).Set( "nitrogen", "Nitrogen" ).Set( "carbon dioxide", "Carbon Dioxide" ).Set( "plasma", "Toxin" ).Set( "other", "Other" );

					foreach (dynamic _c in Lang13.Enumerate( gas_names )) {
						g = _c;
						
						thresholds.Add( new ByTable(new object [] { new ByTable().Set( "name", gas_names[g] ).Set( "settings", new ByTable() ) }) );
						selected = this.TLV[g];
						thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", g ).Set( "val", "min2" ).Set( "selected", selected.min2 ) });
						thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", g ).Set( "val", "min1" ).Set( "selected", selected.min1 ) });
						thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", g ).Set( "val", "max1" ).Set( "selected", selected.max1 ) });
						thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", g ).Set( "val", "max2" ).Set( "selected", selected.max2 ) });
					}
					selected = this.TLV["pressure"];
					thresholds.Add( new ByTable(new object [] { new ByTable().Set( "name", "Pressure" ).Set( "settings", new ByTable() ) }) );
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "pressure" ).Set( "val", "min2" ).Set( "selected", selected.min2 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "pressure" ).Set( "val", "min1" ).Set( "selected", selected.min1 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "pressure" ).Set( "val", "max1" ).Set( "selected", selected.max1 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "pressure" ).Set( "val", "max2" ).Set( "selected", selected.max2 ) });
					selected = this.TLV["temperature"];
					thresholds.Add( new ByTable(new object [] { new ByTable().Set( "name", "Temperature" ).Set( "settings", new ByTable() ) }) );
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "temperature" ).Set( "val", "min2" ).Set( "selected", selected.min2 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "temperature" ).Set( "val", "min1" ).Set( "selected", selected.min1 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "temperature" ).Set( "val", "max1" ).Set( "selected", selected.max1 ) });
					thresholds[thresholds.len]["settings"] += new ByTable(new object [] { new ByTable().Set( "env", "temperature" ).Set( "val", "max2" ).Set( "selected", selected.max2 ) });
					data["thresholds"] = thresholds;
					break;
			}
			return;
		}

		// Function from file: alarm.dm
		public void populate_status( ByTable data = null ) {
			dynamic location = null;
			GasMixture environment = null;
			double total = 0;
			ByTable environment_data = null;
			Tlv cur_tlv = null;
			dynamic partial_pressure = null;
			double pressure = 0;
			int pressure_danger = 0;
			int oxygen_danger = 0;
			int nitrogen_danger = 0;
			int carbon_dioxide_danger = 0;
			int plasma_danger = 0;
			double other_moles = 0;
			Gas G = null;
			int other_danger = 0;
			int temperature_danger = 0;

			location = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( location ) ) {
				return;
			}
			environment = ((Ent_Static)location).return_air();
			total = ( environment.oxygen ??0) + environment.nitrogen + ( environment.carbon_dioxide ??0) + ( environment.toxins ??0);
			environment_data = new ByTable();
			data["atmos_alarm"] = this.alarm_area.atmosalm;
			data["fire_alarm"] = this.alarm_area.fire != null && this.alarm_area.fire == true;
			data["danger_level"] = this.danger_level;

			if ( total != 0 ) {
				partial_pressure = environment.temperature * 8.31 / environment.volume;
				cur_tlv = this.TLV["pressure"];
				pressure = environment.return_pressure();
				pressure_danger = cur_tlv.get_danger_level( pressure );
				environment_data.Add( new ByTable(new object [] { new ByTable().Set( "name", "Pressure" ).Set( "value", pressure ).Set( "unit", "kPa" ).Set( "danger_level", pressure_danger ) }) );
				cur_tlv = this.TLV["oxygen"];
				oxygen_danger = cur_tlv.get_danger_level( ( environment.oxygen ??0) * Convert.ToDouble( partial_pressure ) );
				environment_data.Add( new ByTable(new object [] { new ByTable().Set( "name", "Oxygen" ).Set( "value", ( environment.oxygen ??0) / total * 100 ).Set( "unit", "%" ).Set( "danger_level", oxygen_danger ) }) );
				cur_tlv = this.TLV["nitrogen"];
				nitrogen_danger = cur_tlv.get_danger_level( environment.nitrogen * Convert.ToDouble( partial_pressure ) );
				environment_data.Add( new ByTable(new object [] { new ByTable().Set( "name", "Nitrogen" ).Set( "value", environment.nitrogen / total * 100 ).Set( "unit", "%" ).Set( "danger_level", nitrogen_danger ) }) );
				cur_tlv = this.TLV["carbon dioxide"];
				carbon_dioxide_danger = cur_tlv.get_danger_level( ( environment.carbon_dioxide ??0) * Convert.ToDouble( partial_pressure ) );
				environment_data.Add( new ByTable(new object [] { 
					new ByTable().Set( "name", "Carbon Dioxide" ).Set( "value", ( environment.carbon_dioxide ??0) / total * 100 ).Set( "unit", "%" ).Set( "danger_level", carbon_dioxide_danger )
				 }) );
				cur_tlv = this.TLV["plasma"];
				plasma_danger = cur_tlv.get_danger_level( ( environment.toxins ??0) * Convert.ToDouble( partial_pressure ) );
				environment_data.Add( new ByTable(new object [] { new ByTable().Set( "name", "Toxins" ).Set( "value", ( environment.toxins ??0) / total * 100 ).Set( "unit", "%" ).Set( "danger_level", plasma_danger ) }) );
				cur_tlv = this.TLV["other"];
				other_moles = 0;

				foreach (dynamic _a in Lang13.Enumerate( environment.trace_gases, typeof(Gas) )) {
					G = _a;
					
					other_moles += G.moles ??0;
				}
				other_danger = cur_tlv.get_danger_level( other_moles * Convert.ToDouble( partial_pressure ) );
				environment_data.Add( new ByTable(new object [] { new ByTable().Set( "name", "Other" ).Set( "value", other_moles / total * 100 ).Set( "unit", "%" ).Set( "danger_level", other_danger ) }) );
				cur_tlv = this.TLV["temperature"];
				temperature_danger = cur_tlv.get_danger_level( environment.temperature );
				environment_data.Add( new ByTable(new object [] { 
					new ByTable()
						.Set( "name", "Temperature" )
						.Set( "value", environment.temperature )
						.Set( "unit", "K (" + Num13.Round( Convert.ToDouble( environment.temperature - 273.41 ), 0.1 ) + "C)" )
						.Set( "danger_level", temperature_danger )
					
				 }) );
				data["environment_data"] = environment_data;
			}
			return;
		}

		// Function from file: alarm.dm
		public bool send_signal( dynamic target = null, ByTable command = null ) {
			Signal signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = new Signal();
			signal.transmission_method = 1;
			signal.source = this;
			signal.data = command;
			signal.data["tag"] = target;
			signal.data["sigtype"] = "command";
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_FROM_AIRALARM );
			return true;
		}

		// Function from file: alarm.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_TO_AIRALARM );
			return;
		}

		// Function from file: alarm.dm
		public void refresh_all(  ) {
			dynamic id_tag = null;
			dynamic I = null;
			dynamic id_tag2 = null;
			dynamic I2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.alarm_area.air_vent_names )) {
				id_tag = _a;
				
				I = this.alarm_area.air_vent_info[id_tag];

				if ( Lang13.Bool( I ) && Convert.ToDouble( I["timestamp"] + 50 ) > Game13.time ) {
					continue;
				}
				this.send_signal( id_tag, new ByTable(new object [] { "status" }) );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.alarm_area.air_scrub_names )) {
				id_tag2 = _b;
				
				I2 = this.alarm_area.air_scrub_info[id_tag2];

				if ( Lang13.Bool( I2 ) && Convert.ToDouble( I2["timestamp"] + 50 ) > Game13.time ) {
					continue;
				}
				this.send_signal( id_tag2, new ByTable(new object [] { "status" }) );
			}
			return;
		}

		// Function from file: alarm.dm
		public bool shock( dynamic user = null, int prb = 0 ) {
			EffectSystem_SparkSpread s = null;

			
			if ( ( this.stat & 2 ) != 0 ) {
				return false;
			}

			if ( !Rand13.PercentChance( prb ) ) {
				return false;
			}
			s = new EffectSystem_SparkSpread();
			s.set_up( 5, 1, this );
			s.start();

			if ( Lang13.Bool( GlobalFuncs.electrocute_mob( user, GlobalFuncs.get_area( this ), this ) ) ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: alarm.dm
		public bool elect_master(  ) {
			dynamic A = null;
			Obj_Machinery_Alarm AA = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.alarm_area.related )) {
				A = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( A, typeof(Obj_Machinery_Alarm) )) {
					AA = _a;
					

					if ( !( ( AA.stat & 3 ) != 0 ) ) {
						this.alarm_area.master_air_alarm = AA;
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: alarm.dm
		public bool master_is_operating(  ) {
			return this.alarm_area.master_air_alarm != null && !( ( this.alarm_area.master_air_alarm.stat & 3 ) != 0 );
		}

		// Function from file: alarm.dm
		public override void initialize(  ) {
			this.set_frequency( this.frequency );

			if ( !this.master_is_operating() ) {
				this.elect_master();
			}
			return;
		}

		// Function from file: alarm.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			GlobalFuncs.qdel( this.wires );
			this.wires = null;
			return base.Destroy();
		}

	}

}