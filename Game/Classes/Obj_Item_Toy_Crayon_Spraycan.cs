// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Toy_Crayon_Spraycan : Obj_Item_Toy_Crayon {

		public bool capped = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "spraycan";
			this.instant = 1;
			this.edible = false;
			this.validSurfaces = new ByTable(new object [] { typeof(Tile_Simulated_Floor), typeof(Tile_Simulated_Wall) });
			this.icon_state = "spraycan_cap";
		}

		// Function from file: crayons.dm
		public Obj_Item_Toy_Crayon_Spraycan ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.name = "spray can";
			this.paint_color = Rand13.Pick(new object [] { "#DA0000", "#FF9300", "#FFF200", "#A8E61D", "#00B7EF", "#DA00FF" });
			this.update_icon();
			return;
		}

		// Function from file: crayons.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			Image I = null;

			this.overlays.Cut();
			I = new Image( "icons/obj/crayons.dmi", null, "" + ( this.capped ? "spraycan_cap_colors" : "spraycan_colors" ) );
			I.color = this.paint_color;
			this.overlays.Add( I );
			return null;
		}

		// Function from file: crayons.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic C = null;
			dynamic H = null;

			
			if ( !( proximity_flag == true ) ) {
				return false;
			}

			if ( this.capped ) {
				user.WriteMsg( "<span class='warning'>Take the cap off first!</span>" );
				return false;
			} else {
				
				if ( target is Mob_Living_Carbon ) {
					
					if ( this.uses != 0 ) {
						GlobalFuncs.playsound( user.loc, "sound/effects/spray.ogg", 5, 1, 5 );
						C = target;
						((Ent_Static)user).visible_message( "<span class='danger'>" + user + " sprays " + this + " into the face of " + target + "!</span>" );
						target.WriteMsg( "<span class='userdanger'>" + user + " sprays " + this + " into your face!</span>" );

						if ( Lang13.Bool( C.client ) ) {
							C.eye_blurry = Num13.MaxInt( ((int)( C.eye_blurry )), 3 );
							C.eye_blind = Num13.MaxInt( ((int)( C.eye_blind )), 1 );

							if ( ((Mob_Living)C).check_eye_prot() <= 0 ) {
								C.confused = Num13.MaxInt( ((int)( C.confused )), 3 );
								((Mob)C).Weaken( 3 );
							}
						}

						if ( C is Mob_Living_Carbon_Human ) {
							H = C;
							H.lip_style = "spray_face";
							H.lip_color = this.paint_color;
							((Mob_Living_Carbon_Human)H).update_body();
						}
						this.uses = Num13.MaxInt( 0, this.uses - 10 );
					}
				}

				if ( target is Obj_Structure_Window ) {
					
					if ( this.uses != 0 ) {
						target.color = this.paint_color;

						if ( GlobalFuncs.color_hex2num( this.paint_color ) < 255 ) {
							((Ent_Static)target).SetOpacity( 255 );
						} else {
							((Ent_Static)target).SetOpacity( Lang13.Initial( target, "opacity" ) );
						}
						this.uses = Num13.MaxInt( 0, this.uses - 2 );
						GlobalFuncs.playsound( user.loc, "sound/effects/spray.ogg", 5, 1, 5 );
						return false;
					}
				}
				base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );
			}
			return false;
		}

		// Function from file: crayons.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic choice = null;

			choice = Interface13.Input( user, "Spraycan options", null, null, new ByTable(new object [] { "Toggle Cap", "Change Drawing", "Change Color" }), InputType.Null | InputType.Any );

			dynamic _a = choice; // Was a switch-case, sorry for the mess.
			if ( _a=="Toggle Cap" ) {
				user.WriteMsg( "<span class='notice'>You " + ( this.capped ? "Remove" : "Replace" ) + " the cap of the " + this + "</span>" );
				this.capped = ( this.capped ? false : true );
				this.icon_state = "spraycan" + ( this.capped ? "_cap" : "" );
				this.update_icon();
			} else if ( _a=="Change Drawing" ) {
				base.attack_self( (object)(user), (object)(flag), emp );
			} else if ( _a=="Change Color" ) {
				this.paint_color = Interface13.Input( user, "Choose Color", null, null, null, InputType.Color );
				this.update_icon();
			}
			return null;
		}

		// Function from file: crayons.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.uses != 0 ) {
				user.WriteMsg( "It has " + this.uses + " uses left." );
			} else {
				user.WriteMsg( "It is empty." );
			}
			return 0;
		}

		// Function from file: crayons.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			Mob_Living_Carbon_Human H = null;

			H = user;

			if ( this.capped ) {
				user.visible_message( "<span class='suicide'>" + user + " shakes up the " + this + " with a rattle and lifts it to their mouth, but nothing happens! Maybe they should have uncapped it first! Nonetheless--</span>" );
				user.say( "MEDIOCRE!!" );
			} else {
				user.visible_message( "<span class='suicide'>" + user + " shakes up the " + this + " with a rattle and lifts it to their mouth, spraying silver paint across their teeth!</span>" );
				user.say( "WITNESS ME!!" );
				GlobalFuncs.playsound( this.loc, "sound/effects/spray.ogg", 5, 1, 5 );
				this.paint_color = "#C0C0C0";
				this.update_icon();
				H.lip_style = "spray_face";
				H.lip_color = this.paint_color;
				H.update_body();
				this.uses = Num13.MaxInt( 0, this.uses - 10 );
			}
			return 8;
		}

	}

}