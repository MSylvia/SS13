// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Food_Condiment : Obj_Item_Weapon_ReagentContainers_Food {

		public ByTable possible_states = new ByTable()
											.Set( "ketchup", new ByTable(new object [] { "ketchup", "ketchup bottle", "You feel more American already." }) )
											.Set( "capsaicin", new ByTable(new object [] { "hotsauce", "hotsauce bottle", "You can almost TASTE the stomach ulcers now!" }) )
											.Set( "enzyme", new ByTable(new object [] { "enzyme", "universal enzyme bottle", "Used in cooking various dishes" }) )
											.Set( "soysauce", new ByTable(new object [] { "soysauce", "soy sauce bottle", "A salty soy-based flavoring" }) )
											.Set( "frostoil", new ByTable(new object [] { "coldsauce", "coldsauce bottle", "Leaves the tongue numb in it's passage" }) )
											.Set( "sodiumchloride", new ByTable(new object [] { "saltshakersmall", "salt shaker", "Salt. From space oceans, presumably" }) )
											.Set( "blackpepper", new ByTable(new object [] { "pepermillsmall", "pepper mill", "Often used to flavor food or make people sneeze" }) )
											.Set( "cornoil", new ByTable(new object [] { "oliveoil", "corn oil bottle", "A delicious oil used in cooking. Made from corn" }) )
											.Set( "sugar", new ByTable(new object [] { "emptycondiment", "sugar bottle", "Tasty spacey sugar!" }) )
										;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 4096;
			this.possible_transfer_amounts = new ByTable(new object [] { 1, 5, 10 });
			this.icon = "icons/obj/food/containers.dmi";
			this.icon_state = "emptycondiment";
		}

		public Obj_Item_Weapon_ReagentContainers_Food_Condiment ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			
		}

		// Function from file: condiment.dm
		public override void on_reagent_change(  ) {
			string main_reagent = null;
			dynamic temp_list = null;

			
			if ( !( this.possible_states.len != 0 ) ) {
				return;
			}

			if ( this.reagents.reagent_list.len > 0 ) {
				main_reagent = this.reagents.get_master_reagent_id();

				if ( this.possible_states.Contains( main_reagent ) ) {
					temp_list = this.possible_states[main_reagent];
					this.icon_state = temp_list[1];
					this.name = temp_list[2];
					this.desc = temp_list[3];
				} else {
					this.name = "condiment bottle";
					main_reagent = this.reagents.get_master_reagent_name();

					if ( this.reagents.reagent_list.len == 1 ) {
						this.desc = "Looks like it is " + String13.ToLower( main_reagent ) + ", but you are not sure.";
					} else {
						this.desc = "A mixture of various condiments. " + String13.ToLower( main_reagent ) + " is one of them.";
					}
					this.icon_state = "mixedcondiments";
				}
			} else {
				this.icon_state = "emptycondiment";
				this.name = "condiment bottle";
				this.desc = "An empty condiment bottle.";
				return;
			}
			return;
		}

		// Function from file: condiment.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic trans = null;
			dynamic trans2 = null;

			
			if ( !( proximity_flag == true ) ) {
				return false;
			}

			if ( target is Obj_Structure_ReagentDispensers ) {
				
				if ( !Lang13.Bool( target.reagents.total_volume ) ) {
					user.WriteMsg( "<span class='warning'>" + target + " is empty!</span>" );
					return false;
				}

				if ( ( this.reagents.total_volume ??0) >= Convert.ToDouble( this.reagents.maximum_volume ) ) {
					user.WriteMsg( "<span class='warning'>" + this + " is full!</span>" );
					return false;
				}
				trans = ((Reagents)target.reagents).trans_to( this, this.amount_per_transfer_from_this );
				user.WriteMsg( "<span class='notice'>You fill " + this + " with " + trans + " units of the contents of " + target + ".</span>" );
			} else if ( Lang13.Bool( ((Ent_Static)target).is_open_container() ) || target is Obj_Item_Weapon_ReagentContainers_Food_Snacks ) {
				
				if ( !Lang13.Bool( this.reagents.total_volume ) ) {
					user.WriteMsg( "<span class='warning'>" + this + " is empty!</span>" );
					return false;
				}

				if ( ( target.reagents.total_volume ??0) >= Convert.ToDouble( target.reagents.maximum_volume ) ) {
					user.WriteMsg( "<span class='warning'>you can't add anymore to " + target + "!</span>" );
					return false;
				}
				trans2 = this.reagents.trans_to( target, this.amount_per_transfer_from_this );
				user.WriteMsg( "<span class='notice'>You transfer " + trans2 + " units of the condiment to " + target + ".</span>" );
			}
			return false;
		}

		// Function from file: condiment.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			double? fraction = null;

			
			if ( !( this.reagents != null ) || !Lang13.Bool( this.reagents.total_volume ) ) {
				user.WriteMsg( "<span class='warning'>None of " + this + " left, oh no!</span>" );
				return false;
			}

			if ( !this.canconsume( M, user ) ) {
				return false;
			}

			if ( M == user ) {
				M.WriteMsg( new Txt( "<span class='notice'>You swallow some of contents of " ).the( this ).item().str( ".</span>" ).ToString() );
			} else {
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " attempts to feed " + M + " from " + this + ".</span>" );

				if ( !GlobalFuncs.do_mob( user, M ) ) {
					return false;
				}

				if ( !( this.reagents != null ) || !Lang13.Bool( this.reagents.total_volume ) ) {
					return false;
				}
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " feeds " + M + " from " + this + ".</span>" );
				GlobalFuncs.add_logs( user, M, "fed", this.reagentlist( this ) );
			}
			fraction = Num13.MinInt( ((int)( 10 / ( this.reagents.total_volume ??0) )), 1 );
			this.reagents.reaction( M, GlobalVars.INGEST, fraction );
			this.reagents.trans_to( M, 10 );
			GlobalFuncs.playsound( M.loc, "sound/items/drink.ogg", Rand13.Int( 10, 50 ), 1 );
			return true;
		}

	}

}