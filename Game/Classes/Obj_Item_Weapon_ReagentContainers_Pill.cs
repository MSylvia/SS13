// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Pill : Obj_Item_Weapon_ReagentContainers {

		public int? apply_type = 2;
		public string apply_method = "swallow";
		public bool roundstart = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "pill";
			this.possible_transfer_amounts = new ByTable();
			this.volume = 50;
			this.icon_state = "pill";
		}

		// Function from file: pill.dm
		public Obj_Item_Weapon_ReagentContainers_Pill ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !Lang13.Bool( this.icon_state ) ) {
				this.icon_state = "pill" + Rand13.Int( 1, 20 );
			}

			if ( Lang13.Bool( this.reagents.total_volume ) && this.roundstart ) {
				this.name += " (" + this.reagents.total_volume + "u)";
			}
			return;
		}

		// Function from file: pill.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic O = null;

			
			if ( !( proximity_flag == true ) ) {
				return false;
			}

			if ( ((Ent_Static)target).is_open_container() != 0 && Lang13.Bool( target.reagents ) ) {
				
				if ( !Lang13.Bool( target.reagents.total_volume ) ) {
					user.WriteMsg( "<span class='warning'>" + target + " is empty! There's nothing to dissolve " + this + " in.</span>" );
					return false;
				}
				user.WriteMsg( "<span class='notice'>You dissolve " + this + " in " + target + ".</span>" );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( user, 2 ) )) {
					O = _a;
					
					O.WriteMsg( "<span class='warning'>" + user + " slips something into " + target + "!</span>" );
				}
				this.reagents.trans_to( target, this.reagents.total_volume );
				Task13.Schedule( 5, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this );
					return;
				}));
			}
			return false;
		}

		// Function from file: pill.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( !this.canconsume( M, user ) ) {
				return false;
			}

			if ( M == user ) {
				M.WriteMsg( "<span class='notice'>You " + this.apply_method + " " + this + ".</span>" );
			} else {
				((Ent_Static)M).visible_message( "<span class='danger'>" + user + " attempts to force " + M + " to " + this.apply_method + " " + this + ".</span>", "<span class='userdanger'>" + user + " attempts to force " + M + " to " + this.apply_method + " " + this + ".</span>" );

				if ( !GlobalFuncs.do_mob( user, M ) ) {
					return false;
				}
				((Ent_Static)M).visible_message( "<span class='danger'>" + user + " forces " + M + " to " + this.apply_method + " " + this + ".</span>", "<span class='userdanger'>" + user + " forces " + M + " to " + this.apply_method + " " + this + ".</span>" );
			}
			((Mob)user).unEquip( this );
			GlobalFuncs.add_logs( user, M, "fed", this.reagentlist( this ) );
			this.loc = M;

			if ( Lang13.Bool( this.reagents.total_volume ) ) {
				this.reagents.reaction( M, this.apply_type );
				this.reagents.trans_to( M, this.reagents.total_volume );
				GlobalFuncs.qdel( this );
				return true;
			} else {
				GlobalFuncs.qdel( this );
				return true;
			}
		}

		// Function from file: pill.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			return null;
		}

	}

}