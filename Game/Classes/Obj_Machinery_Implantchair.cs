// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Implantchair : Obj_Machinery {

		public bool ready = true;
		public bool malfunction = false;
		public ByTable implant_list = new ByTable();
		public int? max_implants = 5;
		public int injection_cooldown = 600;
		public int replenish_cooldown = 6000;
		public bool replenishing = false;
		public bool injecting = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/machines/implantchair.dmi";
			this.icon_state = "implantchair";
		}

		// Function from file: implantchair.dm
		public Obj_Machinery_Implantchair ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.add_implants();
			return;
		}

		// Function from file: implantchair.dm
		public void add_implants(  ) {
			int? i = null;
			Obj_Item_Weapon_Implant_Loyalty I = null;

			i = null;
			i = 0;

			while (( i ??0) < ( this.max_implants ??0)) {
				I = new Obj_Item_Weapon_Implant_Loyalty( this );
				this.implant_list.Add( I );
				i++;
			}
			return;
		}

		// Function from file: implantchair.dm
		public void implant( dynamic M = null ) {
			Obj_Item_Weapon_Implant_Loyalty imp = null;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return;
			}

			if ( !( this.implant_list.len != 0 ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.implant_list, typeof(Obj_Item_Weapon_Implant_Loyalty) )) {
				imp = _a;
				

				if ( !( imp != null ) ) {
					continue;
				}

				if ( imp is Obj_Item_Weapon_Implant_Loyalty ) {
					((Ent_Static)M).visible_message( "<span class='warning'>" + M + " has been implanted by the " + this.name + ".</span>" );

					if ( imp.implant( M ) != 0 ) {
						this.implant_list.Remove( imp );
					}
					break;
				}
			}
			return;
		}

		// Function from file: implantchair.dm
		public bool put_mob( Ent_Dynamic M = null ) {
			
			if ( !( M is Mob_Living_Carbon ) ) {
				Task13.User.WriteMsg( "<span class='warning'>The " + this.name + " cannot hold this!</span>" );
				return false;
			}

			if ( Lang13.Bool( this.occupant ) ) {
				Task13.User.WriteMsg( "<span class='warning'>The " + this.name + " is already occupied!</span>" );
				return false;
			}

			if ( Lang13.Bool( ((dynamic)M).client ) ) {
				((dynamic)M).client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
				((dynamic)M).client.eye = this;
			}
			((Mob)M).stop_pulling();
			M.loc = this;
			this.occupant = M;
			this.add_fingerprint( Task13.User );
			this.icon_state = "implantchair_on";
			return true;
		}

		// Function from file: implantchair.dm
		public void go_out( Mob M = null ) {
			
			if ( !Lang13.Bool( this.occupant ) ) {
				return;
			}

			if ( M == this.occupant ) {
				return;
			}

			if ( Lang13.Bool( this.occupant.client ) ) {
				this.occupant.client.eye = this.occupant.client.mob;
				this.occupant.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
			}
			this.occupant.loc = this.loc;

			if ( this.injecting ) {
				this.implant( this.occupant );
				this.injecting = false;
			}
			this.occupant = null;
			this.icon_state = "implantchair";
			return;
		}

		// Function from file: implantchair.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic G = null;
			Ent_Dynamic M = null;

			
			if ( A is Obj_Item_Weapon_Grab ) {
				G = A;

				if ( !( G.affecting is Mob ) ) {
					return null;
				}
				M = G.affecting;

				if ( Lang13.Bool( M.buckled_mob ) ) {
					Task13.User.WriteMsg( "" + M + " will not fit into " + this + " because they have a slime latched onto their head." );
					return null;
				}

				if ( this.put_mob( M ) ) {
					GlobalFuncs.qdel( G );
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: implantchair.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["implant"] ) ) {
				
				if ( Lang13.Bool( this.occupant ) ) {
					this.injecting = true;
					this.go_out();
					this.ready = false;
					Task13.Schedule( this.injection_cooldown, (Task13.Closure)(() => {
						this.ready = true;
						return;
					}));
				}
			}

			if ( Lang13.Bool( href_list["replenish"] ) ) {
				this.ready = false;
				Task13.Schedule( this.replenish_cooldown, (Task13.Closure)(() => {
					this.add_implants();
					this.ready = true;
					return;
				}));
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: implantchair.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string health_text = null;
			string dat = null;

			((Mob)a).set_machine( this );
			health_text = "";

			if ( Lang13.Bool( this.occupant ) ) {
				
				if ( Convert.ToDouble( this.occupant.health ) <= -100 ) {
					health_text = "<FONT color=red>Dead</FONT>";
				} else if ( Convert.ToDouble( this.occupant.health ) < 0 ) {
					health_text = "<FONT color=red>" + Num13.Round( Convert.ToDouble( this.occupant.health ), 0.1 ) + "</FONT>";
				} else {
					health_text = "" + Num13.Round( Convert.ToDouble( this.occupant.health ), 0.1 );
				}
			}
			dat = "<B>Implanter Status</B><BR>";
			dat += "<B>Current occupant:</B> " + ( Lang13.Bool( this.occupant ) ? "<BR>Name: " + this.occupant + "<BR>Health: " + health_text + "<BR>" : "<FONT color=red>None</FONT>" ) + "<BR>";
			dat += "<B>Implants:</B> " + ( this.implant_list.len != 0 ? "" + this.implant_list.len : new Txt( "<A href='?src=" ).Ref( this ).str( ";replenish=1'>Replenish</A>" ).ToString() ) + "<BR>";

			if ( Lang13.Bool( this.occupant ) ) {
				dat += "" + ( this.ready ? new Txt( "<A href='?src=" ).Ref( this ).str( ";implant=1'>Implant</A>" ).ToString() : "Recharging" ) + "<BR>";
			}
			((Mob)a).set_machine( this );
			Interface13.Browse( a, dat, "window=implant" );
			GlobalFuncs.onclose( a, "implant" );
			return null;
		}

		// Function from file: implantchair.dm
		[VerbInfo( name: "add implants" )]
		public void _internal_add_implants(  ) {
			return;
		}

		// Function from file: implantchair.dm
		[VerbInfo( name: "implant" )]
		[VerbArg( 1, InputType.Mob )]
		public void _internal_implant( dynamic M = null ) {
			return;
		}

		// Function from file: implantchair.dm
		[VerbInfo( name: "put mob" )]
		[VerbArg( 1, InputType.Mob )]
		public void _internal_put_mob( dynamic M = null ) {
			return;
		}

		// Function from file: implantchair.dm
		[VerbInfo( name: "go out" )]
		public void _internal_go_out(  ) {
			return;
		}

		// Function from file: implantchair.dm
		[Verb]
		[VerbInfo( name: "Move Inside", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_inside(  ) {
			
			if ( Task13.User.stat != 0 || ( this.stat & 3 ) != 0 ) {
				return;
			}
			this.put_mob( Task13.User );
			return;
		}

		// Function from file: implantchair.dm
		[Verb]
		[VerbInfo( name: "Eject occupant", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void get_out(  ) {
			
			if ( Task13.User.stat != 0 ) {
				return;
			}
			this.go_out( Task13.User );
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}