// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Point : Game_Data {

		public ByTable neigbours = new ByTable();
		public int? x = null;
		public int? y = null;
		public dynamic spl = null;

		// Function from file: space_transition.dm
		public Point ( int? nx = null, int? ny = null, ByTable point_grid = null ) {
			dynamic L = null;

			
			if ( !( point_grid != null ) ) {
				GlobalFuncs.qdel( this );
				return;
			}
			L = point_grid[1];

			if ( ( nx ??0) > point_grid.len || ( ny ??0) > Convert.ToDouble( L.len ) ) {
				GlobalFuncs.qdel( this );
				return;
			}
			this.x = nx;
			this.y = ny;

			if ( Lang13.Bool( point_grid[this.x][this.y] ) ) {
				return;
			}
			point_grid[this.x][this.y] = this;
			return;
		}

		// Function from file: space_transition.dm
		public void set_neigbours( ByTable grid = null ) {
			int max_X = 0;
			dynamic max_Y = null;

			max_X = grid.len;
			max_Y = grid[1];
			max_Y = max_Y.len;
			this.neigbours.Cut();

			if ( ( this.x ??0) + 1 <= max_X ) {
				this.neigbours.Or( grid[( this.x ??0) + 1][this.y] );
			}

			if ( ( this.x ??0) - 1 >= 1 ) {
				this.neigbours.Or( grid[( this.x ??0) - 1][this.y] );
			}

			if ( ( this.y ??0) + 1 <= Convert.ToDouble( max_Y ) ) {
				this.neigbours.Or( grid[this.x][( this.y ??0) + 1] );
			}

			if ( ( this.y ??0) - 1 >= 1 ) {
				this.neigbours.Or( grid[this.x][( this.y ??0) - 1] );
			}
			return;
		}

	}

}