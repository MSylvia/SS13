// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Binary_DpVentPump : Obj_Machinery_Atmospherics_Components_Binary {

		public double? frequency = 0;
		public dynamic id = null;
		public RadioFrequency radio_connection = null;
		public double? on = 0;
		public double? pump_direction = 1;
		public double external_pressure_bound = 101.32499694824219;
		public int input_pressure_min = 0;
		public int output_pressure_max = 0;
		public double? pressure_checks = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.icon = "icons/obj/atmospherics/components/unary_devices.dmi";
			this.icon_state = "dpvent_map";
		}

		public Obj_Machinery_Atmospherics_Components_Binary_DpVentPump ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: dp_vent_pump.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( !Lang13.Bool( signal.data["tag"] ) || signal.data["tag"] != this.id || signal.data["sigtype"] != "command" ) {
				return false;
			}

			if ( signal.data.Contains( "power" ) ) {
				this.on = String13.ParseNumber( signal.data["power"] );
			}

			if ( signal.data.Contains( "power_toggle" ) ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
			}

			if ( signal.data.Contains( "set_direction" ) ) {
				this.pump_direction = String13.ParseNumber( signal.data["set_direction"] );
			}

			if ( signal.data.Contains( "checks" ) ) {
				this.pressure_checks = String13.ParseNumber( signal.data["checks"] );
			}

			if ( signal.data.Contains( "purge" ) ) {
				this.pressure_checks = ((int)( this.pressure_checks )) & ( 65534 );
				this.pump_direction = 0;
			}

			if ( signal.data.Contains( "stabalize" ) ) {
				this.pressure_checks = ((int)( this.pressure_checks )) | ( 1 );
				this.pump_direction = 1;
			}

			if ( signal.data.Contains( "set_input_pressure" ) ) {
				this.input_pressure_min = Num13.MaxInt( 0, Num13.MinInt( ((int)( String13.ParseNumber( signal.data["set_input_pressure"] ) ??0 )), ((int)( 5066.25 )) ) );
			}

			if ( signal.data.Contains( "set_output_pressure" ) ) {
				this.output_pressure_max = Num13.MaxInt( 0, Num13.MinInt( ((int)( String13.ParseNumber( signal.data["set_output_pressure"] ) ??0 )), ((int)( 5066.25 )) ) );
			}

			if ( signal.data.Contains( "set_external_pressure" ) ) {
				this.external_pressure_bound = Num13.MaxInt( 0, Num13.MinInt( ((int)( String13.ParseNumber( signal.data["set_external_pressure"] ) ??0 )), ((int)( 5066.25 )) ) );
			}

			if ( signal.data.Contains( "status" ) ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					this.broadcast_status();
					return;
				}));
				return false;
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.broadcast_status();
				return;
			}));
			this.update_icon();
			return false;
		}

		// Function from file: dp_vent_pump.dm
		public override void atmosinit( ByTable node_connects = null ) {
			base.atmosinit( node_connects );

			if ( Lang13.Bool( this.frequency ) ) {
				this.set_frequency( this.frequency );
			}
			this.broadcast_status();
			return;
		}

		// Function from file: dp_vent_pump.dm
		public bool broadcast_status(  ) {
			Signal signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = new Signal();
			signal.transmission_method = 1;
			signal.source = this;
			signal.data = new ByTable()
				.Set( "tag", this.id )
				.Set( "device", "ADVP" )
				.Set( "power", this.on )
				.Set( "direction", ( Lang13.Bool( this.pump_direction ) ? "release" : "siphon" ) )
				.Set( "checks", this.pressure_checks )
				.Set( "input", this.input_pressure_min )
				.Set( "output", this.output_pressure_max )
				.Set( "external", this.external_pressure_bound )
				.Set( "sigtype", "status" )
			;
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			return true;
		}

		// Function from file: dp_vent_pump.dm
		public void set_frequency( double? new_frequency = null ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( Lang13.Bool( this.frequency ) ) {
				this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			}
			return;
		}

		// Function from file: dp_vent_pump.dm
		public override int process_atmos(  ) {
			dynamic air1 = null;
			dynamic air2 = null;
			GasMixture environment = null;
			double environment_pressure = 0;
			int pressure_delta = 0;
			double transfer_moles = 0;
			dynamic removed = null;
			Pipeline parent1 = null;
			int pressure_delta2 = 0;
			double transfer_moles2 = 0;
			dynamic removed2 = null;
			Pipeline parent2 = null;

			base.process_atmos();

			if ( !Lang13.Bool( this.on ) ) {
				return 0;
			}
			air1 = this.airs[1];
			air2 = this.airs[2];
			environment = this.loc.return_air();
			environment_pressure = environment.return_pressure();

			if ( Lang13.Bool( this.pump_direction ) ) {
				pressure_delta = 10000;

				if ( ( ((int)( this.pressure_checks ??0 )) & 1 ) != 0 ) {
					pressure_delta = Num13.MinInt( pressure_delta, ((int)( this.external_pressure_bound - environment_pressure )) );
				}

				if ( ( ((int)( this.pressure_checks ??0 )) & 2 ) != 0 ) {
					pressure_delta = Num13.MinInt( pressure_delta, Convert.ToInt32( air1.return_pressure() - this.input_pressure_min ) );
				}

				if ( pressure_delta > 0 ) {
					
					if ( Convert.ToDouble( air1.temperature ) > 0 ) {
						transfer_moles = pressure_delta * environment.volume / Convert.ToDouble( air1.temperature * 8.31 );
						removed = air1.remove( transfer_moles );
						this.loc.assume_air( removed );
						this.air_update_turf();
						parent1 = this.parents[1];
						parent1.update = true;
					}
				}
			} else {
				pressure_delta2 = 10000;

				if ( ( ((int)( this.pressure_checks ??0 )) & 1 ) != 0 ) {
					pressure_delta2 = Num13.MinInt( pressure_delta2, ((int)( environment_pressure - this.external_pressure_bound )) );
				}

				if ( ( ((int)( this.pressure_checks ??0 )) & 2 ) != 0 ) {
					pressure_delta2 = Num13.MinInt( pressure_delta2, ((int)( this.output_pressure_max - Convert.ToDouble( air2.return_pressure() ) )) );
				}

				if ( pressure_delta2 > 0 ) {
					
					if ( Convert.ToDouble( environment.temperature ) > 0 ) {
						transfer_moles2 = pressure_delta2 * Convert.ToDouble( air2.volume ) / Convert.ToDouble( environment.temperature * 8.31 );
						removed2 = this.loc.remove_air( transfer_moles2 );
						air2.merge( removed2 );
						this.air_update_turf();
						parent2 = this.parents[2];
						parent2.update = true;
					}
				}
			}
			return 1;
		}

		// Function from file: dp_vent_pump.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			this.overlays.Cut();

			if ( this.showpipe ) {
				this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/unary_devices.dmi", "dpvent_cap" ) );
			}

			if ( !Lang13.Bool( this.on ) || ( this.stat & 3 ) != 0 ) {
				this.icon_state = "vent_off";
				return;
			}

			if ( Lang13.Bool( this.pump_direction ) ) {
				this.icon_state = "vent_out";
			} else {
				this.icon_state = "vent_in";
			}
			return;
		}

		// Function from file: dp_vent_pump.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

	}

}