// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Tank : Obj_Item_Weapon {

		public GasMixture air_contents = null;
		public dynamic distribute_pressure = 101.32499694824219;
		public int integrity = 3;
		public int volume = 70;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 64;
			this.slot_flags = 1024;
			this.hitsound = "sound/weapons/smash.ogg";
			this.pressure_resistance = 506.625;
			this.force = 5;
			this.throwforce = 10;
			this.throw_speed = 1;
			this.throw_range = 4;
			this.icon = "icons/obj/tank.dmi";
		}

		// Function from file: tanks.dm
		public Obj_Item_Weapon_Tank ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.air_contents = new GasMixture();
			this.air_contents.volume = this.volume;
			this.air_contents.temperature = 293.41;
			GlobalVars.SSobj.processing.Or( this );
			return;
		}

		// Function from file: tanks.dm
		public override int? process( dynamic seconds = null ) {
			this.air_contents.react();
			this.check_status();
			return null;
		}

		// Function from file: bomb.dm
		public void release(  ) {
			GasMixture removed = null;
			dynamic T = null;

			removed = this.air_contents.remove( this.air_contents.total_moles() );
			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return;
			}
			((Ent_Static)T).assume_air( removed );
			this.air_update_turf();
			return;
		}

		// Function from file: bomb.dm
		public void ignite(  ) {
			double fuel_moles = 0;
			double strength = 0;
			dynamic ground_zero = null;

			fuel_moles = ( this.air_contents.toxins ??0) + ( this.air_contents.oxygen ??0) / 6;
			strength = 1;
			ground_zero = GlobalFuncs.get_turf( this.loc );
			this.loc = null;

			if ( Convert.ToDouble( this.air_contents.temperature ) > 673.1500244140625 ) {
				strength = fuel_moles / 15;

				if ( strength >= 1 ) {
					GlobalFuncs.explosion( ground_zero, Num13.Round( strength, 1 ), Num13.Round( strength * 2, 1 ), Num13.Round( strength * 3, 1 ), Num13.Round( strength * 4, 1 ) );
				} else if ( strength >= 0.5 ) {
					GlobalFuncs.explosion( ground_zero, 0, 1, 2, 4 );
				} else if ( strength >= 0.2 ) {
					GlobalFuncs.explosion( ground_zero, -1, 0, 1, 2 );
				} else {
					((Ent_Static)ground_zero).assume_air( this.air_contents );
					((Tile)ground_zero).hotspot_expose( 1000, 125 );
				}
			} else if ( Convert.ToDouble( this.air_contents.temperature ) > 523.1500244140625 ) {
				strength = fuel_moles / 20;

				if ( strength >= 1 ) {
					GlobalFuncs.explosion( ground_zero, 0, Num13.Round( strength, 1 ), Num13.Round( strength * 2, 1 ), Num13.Round( strength * 3, 1 ) );
				} else if ( strength >= 0.5 ) {
					GlobalFuncs.explosion( ground_zero, -1, 0, 1, 2 );
				} else {
					((Ent_Static)ground_zero).assume_air( this.air_contents );
					((Tile)ground_zero).hotspot_expose( 1000, 125 );
				}
			} else if ( Convert.ToDouble( this.air_contents.temperature ) > 373.41 ) {
				strength = fuel_moles / 25;

				if ( strength >= 1 ) {
					GlobalFuncs.explosion( ground_zero, -1, 0, Num13.Round( strength, 1 ), Num13.Round( strength * 3, 1 ) );
				} else {
					((Ent_Static)ground_zero).assume_air( this.air_contents );
					((Tile)ground_zero).hotspot_expose( 1000, 125 );
				}
			} else {
				((Ent_Static)ground_zero).assume_air( this.air_contents );
				((Tile)ground_zero).hotspot_expose( 1000, 125 );
			}
			this.air_update_turf();

			if ( Lang13.Bool( this.master ) ) {
				GlobalFuncs.qdel( this.master );
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: bomb.dm
		public void bomb_assemble( dynamic W = null, dynamic user = null ) {
			dynamic S = null;
			dynamic M = null;
			Obj_Item_Device_Onetankbomb R = null;

			S = W;
			M = user;

			if ( S.a_left is Obj_Item_Device_Assembly_Igniter == S.a_right is Obj_Item_Device_Assembly_Igniter ) {
				return;
			}

			if ( !Lang13.Bool( M.drop_item() ) ) {
				return;
			}
			R = new Obj_Item_Device_Onetankbomb( this.loc );
			((Mob)M).remove_from_mob( this );
			((Mob)M).put_in_hands( R );
			R.bombassembly = S;
			S.master = R;
			S.loc = R;
			R.bombtank = this;
			this.master = R;
			this.loc = R;
			R.update_icon();
			return;
		}

		// Function from file: tanks.dm
		public bool check_status(  ) {
			double pressure = 0;
			double range = 0;
			dynamic epicenter = null;
			dynamic T = null;
			dynamic T2 = null;
			GasMixture leaked_gas = null;

			
			if ( !( this.air_contents != null ) ) {
				return false;
			}
			pressure = this.air_contents.return_pressure();

			if ( pressure > 5066.25 ) {
				
				if ( !( this.loc is Obj_Item_Device_TransferValve ) ) {
					GlobalFuncs.message_admins( "Explosive tank rupture! Last key to touch the tank was " + this.fingerprintslast + "." );
					GlobalFuncs.log_game( "Explosive tank rupture! Last key to touch the tank was " + this.fingerprintslast + "." );
				}
				this.air_contents.react();
				this.air_contents.react();
				this.air_contents.react();
				pressure = this.air_contents.return_pressure();
				range = ( pressure - 5066.25 ) / 1013.25;
				epicenter = GlobalFuncs.get_turf( this.loc );
				GlobalFuncs.explosion( epicenter, Num13.Floor( range * 0.25 ), Num13.Floor( range * 0.5 ), Num13.Floor( range ), Num13.Floor( range * 1.5 ) );

				if ( this.loc is Obj_Item_Device_TransferValve ) {
					GlobalFuncs.qdel( this.loc );
				} else {
					GlobalFuncs.qdel( this );
				}
			} else if ( pressure > 4053 ) {
				
				if ( this.integrity <= 0 ) {
					T = GlobalFuncs.get_turf( this );

					if ( !Lang13.Bool( T ) ) {
						return false;
					}
					((Ent_Static)T).assume_air( this.air_contents );
					GlobalFuncs.playsound( this.loc, "sound/effects/spray.ogg", 10, 1, -3 );
					GlobalFuncs.qdel( this );
				} else {
					this.integrity--;
				}
			} else if ( pressure > 3039.75 ) {
				
				if ( this.integrity <= 0 ) {
					T2 = GlobalFuncs.get_turf( this );

					if ( !Lang13.Bool( T2 ) ) {
						return false;
					}
					leaked_gas = this.air_contents.remove_ratio( 0.25 );
					((Ent_Static)T2).assume_air( leaked_gas );
				} else {
					this.integrity--;
				}
			} else if ( this.integrity < 3 ) {
				this.integrity++;
			}
			return false;
		}

		// Function from file: tanks.dm
		public dynamic remove_air_volume( double volume_to_return = 0 ) {
			double tank_pressure = 0;
			dynamic moles_needed = null;

			
			if ( !( this.air_contents != null ) ) {
				return null;
			}
			tank_pressure = this.air_contents.return_pressure();

			if ( tank_pressure < Convert.ToDouble( this.distribute_pressure ) ) {
				this.distribute_pressure = tank_pressure;
			}
			moles_needed = this.distribute_pressure * volume_to_return / ( this.air_contents.temperature * 8.31 );
			return this.remove_air( moles_needed );
		}

		// Function from file: tanks.dm
		public override bool? assume_air( dynamic giver = null ) {
			this.air_contents.merge( giver );
			this.check_status();
			return true;
		}

		// Function from file: tanks.dm
		public override GasMixture return_air(  ) {
			return this.air_contents;
		}

		// Function from file: tanks.dm
		public override dynamic remove_air( dynamic amount = null ) {
			return this.air_contents.remove( amount );
		}

		// Function from file: tanks.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			dynamic custom = null;
			Ent_Static location = null;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _b = action; // Was a switch-case, sorry for the mess.
			if ( _b=="pressure" ) {
				
				dynamic _a = _params["pressure"]; // Was a switch-case, sorry for the mess.
				if ( _a=="custom" ) {
					custom = Interface13.Input( Task13.User, "What rate do you set the regulator to? The dial reads from 0 to " + 303.9749755859375 + ".", null, null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( Lang13.IsNumber( custom ) ) ) {
						this.distribute_pressure = custom;
					}
				} else if ( _a=="reset" ) {
					this.distribute_pressure = 16;
				} else if ( _a=="min" ) {
					this.distribute_pressure = 0;
				} else if ( _a=="max" ) {
					this.distribute_pressure = 303.9749755859375;
				}
				this.distribute_pressure = Num13.MaxInt( 0, Num13.MinInt( Num13.Floor( Convert.ToDouble( this.distribute_pressure ) ), ((int)( 303.9749755859375 )) ) );
			} else if ( _b=="valve" ) {
				
				if ( this.loc is Mob_Living_Carbon ) {
					location = this.loc;

					if ( ((dynamic)location).v_internal == this ) {
						((dynamic)location).v_internal = null;
						((dynamic)location).internals.icon_state = "internal0";
						Task13.User.WriteMsg( "<span class='notice'>You close the tank release valve.</span>" );

						if ( Lang13.Bool( ((dynamic)location).internals ) ) {
							((dynamic)location).internals.icon_state = "internal0";
						}
					} else if ( Lang13.Bool( ((dynamic)location).wear_mask ) && Lang13.Bool( ((dynamic)location).wear_mask.flags & 8 ) ) {
						((dynamic)location).v_internal = this;
						Task13.User.WriteMsg( new Txt( "<span class='notice'>You open " ).the( this ).item().str( " valve.</span>" ).ToString() );

						if ( Lang13.Bool( ((dynamic)location).internals ) ) {
							((dynamic)location).internals.icon_state = "internal1";
						}
					} else {
						Task13.User.WriteMsg( new Txt( "<span class='warning'>You need something to connect to " ).the( this ).item().str( "!</span>" ).ToString() );
					}
				}
			}
			return true;
		}

		// Function from file: tanks.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			Ent_Static location = null;
			ByTable data = null;
			bool mask_check = false;

			location = null;

			if ( this.loc is Mob_Living_Carbon ) {
				location = this.loc;
			} else if ( this.loc.loc is Mob_Living_Carbon ) {
				location = this.loc.loc;
			}
			data = new ByTable();
			data["tankPressure"] = Num13.Floor( ( this.air_contents.return_pressure() != 0 ? this.air_contents.return_pressure() : 0 ) );
			data["releasePressure"] = Num13.Floor( Convert.ToDouble( ( Lang13.Bool( this.distribute_pressure ) ? this.distribute_pressure : ((dynamic)( 0 )) ) ) );
			data["defaultReleasePressure"] = Num13.Floor( 16 );
			data["minReleasePressure"] = Num13.Floor( 0 );
			data["maxReleasePressure"] = Num13.Floor( 303.9749755859375 );
			data["valveOpen"] = 0;
			data["maskConnected"] = 0;

			if ( location is Mob_Living_Carbon ) {
				mask_check = false;

				if ( ((dynamic)location).v_internal == this ) {
					mask_check = true;
					data["valveOpen"] = 1;
				} else if ( Lang13.Bool( ((dynamic)location).Contains( this ) ) ) {
					
					if ( !Lang13.Bool( ((dynamic)location).v_internal ) ) {
						mask_check = true;
					}
				}

				if ( mask_check ) {
					
					if ( Lang13.Bool( ((dynamic)location).wear_mask ) && Lang13.Bool( ((dynamic)location).wear_mask.flags & 8 ) ) {
						data["maskConnected"] = 1;
					}
				}
			}
			return data;
		}

		// Function from file: tanks.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.hands_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "tanks", this.name, 400, 200, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: tanks.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.add_fingerprint( user );
			this.ui_interact( user );
			return null;
		}

		// Function from file: tanks.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !Lang13.Bool( user ) ) {
				return null;
			}
			this.interact( user );
			return null;
		}

		// Function from file: tanks.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			this.add_fingerprint( user );

			if ( this.loc is Obj_Item_Assembly ) {
				this.icon = this.loc;
			}

			if ( A is Obj_Item_Device_Analyzer && Map13.GetDistance( user, this ) <= 1 ) {
				this.atmosanalyzer_scan( this.air_contents, user );
			}

			if ( A is Obj_Item_Device_AssemblyHolder ) {
				this.bomb_assemble( A, user );
			}
			return null;
		}

		// Function from file: tanks.dm
		public override bool blob_act( dynamic severity = null ) {
			Ent_Static location = null;

			
			if ( Rand13.PercentChance( 50 ) ) {
				location = this.loc;

				if ( !( location is Tile ) ) {
					GlobalFuncs.qdel( this );
				}

				if ( this.air_contents != null ) {
					location.assume_air( this.air_contents );
				}
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: tanks.dm
		public override double examine( dynamic user = null ) {
			Ent_Static icon = null;
			dynamic celsius_temperature = null;
			string descriptive = null;

			icon = this;
			base.examine( (object)(user) );

			if ( this.loc is Obj_Item_Assembly ) {
				icon = this.loc;
			}

			if ( !( Map13.GetDistance( this, user ) <= 1 ) ) {
				
				if ( icon == this ) {
					user.WriteMsg( "<span class='notice'>If you want any more information you'll need to get closer.</span>" );
				}
				return 0;
			}
			user.WriteMsg( "<span class='notice'>The pressure gauge reads " + this.air_contents.return_pressure() + " kPa.</span>" );
			celsius_temperature = this.air_contents.temperature - 273.41;

			if ( Convert.ToDouble( celsius_temperature ) < 20 ) {
				descriptive = "cold";
			} else if ( Convert.ToDouble( celsius_temperature ) < 40 ) {
				descriptive = "room temperature";
			} else if ( Convert.ToDouble( celsius_temperature ) < 80 ) {
				descriptive = "lukewarm";
			} else if ( Convert.ToDouble( celsius_temperature ) < 100 ) {
				descriptive = "warm";
			} else if ( Convert.ToDouble( celsius_temperature ) < 300 ) {
				descriptive = "hot";
			} else {
				descriptive = "furiously hot";
			}
			user.WriteMsg( "<span class='notice'>It feels " + descriptive + ".</span>" );
			return 0;
		}

		// Function from file: tanks.dm
		public override dynamic Destroy(  ) {
			
			if ( this.air_contents != null ) {
				GlobalFuncs.qdel( this.air_contents );
			}
			GlobalVars.SSobj.processing.Remove( this );
			return base.Destroy();
		}

		// Function from file: tanks.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			Mob H = null;
			Obj_Item W = null;

			H = user;
			user.visible_message( "<span class='suicide'>" + user + " is putting the " + this + "'s valve to their lips! I don't think they're gonna stop!</span>" );
			GlobalFuncs.playsound( this.loc, "sound/effects/spray.ogg", 10, 1, -3 );

			if ( H != null && !GlobalFuncs.qdeleted( H ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( H, typeof(Obj_Item) )) {
					W = _a;
					
					H.unEquip( W );

					if ( Rand13.PercentChance( 50 ) ) {
						Map13.Step( W, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.alldirs ) ) );
					}
				}
				((dynamic)H).hair_style = "Bald";
				H.update_hair();
				((dynamic)H).blood_max = 5;
				GlobalFuncs.gibs( H.loc, H.viruses, ((dynamic)H).dna );
				((dynamic)H).adjustBruteLoss( 1000 );
			}
			return 1;
		}

	}

}