// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet_Critter : Obj_Structure_Closet {

		public bool already_opened = false;
		public Type content_mob = null;
		public int? amount = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "critter";
		}

		public Obj_Structure_Closet_Critter ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: crittercrate.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			this.add_fingerprint( a );

			if ( this.loc == a.loc ) {
				a.WriteMsg( "<span class='notice'>It won't budge!</span>" );
				this.toggle();
			} else {
				this.locked = false;
				this.toggle();
			}
			return null;
		}

		// Function from file: crittercrate.dm
		public override bool close(  ) {
			base.close();
			this.locked = true;
			return true;
		}

		// Function from file: crittercrate.dm
		public override bool open(  ) {
			int? i = null;

			
			if ( !this.can_open() ) {
				return false;
			}

			if ( this.content_mob == null ) {
				this.already_opened = true;
				return base.open();
			}

			if ( this.content_mob != null && !this.already_opened ) {
				i = null;
				i = 1;

				while (( i ??0) <= ( this.amount ??0)) {
					Lang13.Call( this.content_mob, this.loc );
					i++;
				}
				this.already_opened = true;
			}
			base.open();
			return false;
		}

		// Function from file: crittercrate.dm
		public override bool can_open(  ) {
			
			if ( this.locked || this.welded ) {
				return false;
			}
			return true;
		}

	}

}