// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_AmmoBox : Obj_Item {

		public ByTable stored_ammo = new ByTable();
		public Type ammo_type = typeof(Obj_Item_AmmoCasing);
		public int? max_ammo = 7;
		public int multiple_sprites = 0;
		public string caliber = null;
		public bool multiload = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 64;
			this.slot_flags = 512;
			this.item_state = "syringe_kit";
			this.materials = new ByTable().Set( "$metal", 30000 );
			this.throwforce = 2;
			this.w_class = 1;
			this.throw_speed = 3;
			this.icon = "icons/obj/ammo.dmi";
			this.icon_state = "357";
		}

		// Function from file: ammunition.dm
		public Obj_Item_AmmoBox ( dynamic loc = null ) : base( (object)(loc) ) {
			int? i = null;

			i = null;
			i = 1;

			while (( i ??0) <= ( this.max_ammo ??0)) {
				this.stored_ammo.Add( Lang13.Call( this.ammo_type, this ) );
				i++;
			}
			this.update_icon();
			return;
		}

		// Function from file: ammunition.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			switch ((int)( this.multiple_sprites )) {
				case 1:
					this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-" + this.stored_ammo.len;
					break;
				case 2:
					this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-" + ( this.stored_ammo.len != 0 ? "" + this.max_ammo : "0" );
					break;
			}
			this.desc = new Txt().item( Lang13.Initial( this, "desc" ) ).str( " There are " ).item( this.stored_ammo.len ).str( " shell" ).s().str( " left!" ).ToString();
			return null;
		}

		// Function from file: ammunition.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic A = null;

			A = this.get_round();

			if ( Lang13.Bool( A ) ) {
				((Mob)user).put_in_hands( A );
				user.WriteMsg( new Txt( "<span class='notice'>You remove a round from " ).the( this ).item().str( "!</span>" ).ToString() );
				this.update_icon();
			}
			return null;
		}

		// Function from file: ammunition.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			silent = silent ?? false;
			replace_spent = replace_spent ?? false;

			int num_loaded = 0;
			dynamic AM = null;
			Obj_Item_AmmoCasing AC = null;
			bool did_load = false;
			dynamic AC2 = null;

			num_loaded = 0;

			if ( A is Obj_Item_AmmoBox ) {
				AM = A;

				foreach (dynamic _a in Lang13.Enumerate( AM.stored_ammo, typeof(Obj_Item_AmmoCasing) )) {
					AC = _a;
					
					did_load = this.give_round( AC, replace_spent );

					if ( did_load ) {
						AM.stored_ammo.Remove( AC );
						num_loaded++;
					}

					if ( !did_load || !this.multiload ) {
						break;
					}
				}
			}

			if ( A is Obj_Item_AmmoCasing ) {
				AC2 = A;

				if ( this.give_round( AC2, replace_spent ) ) {
					user.drop_item();
					AC2.loc = this;
					num_loaded++;
				}
			}

			if ( num_loaded != 0 ) {
				
				if ( !( silent == true ) ) {
					user.WriteMsg( new Txt( "<span class='notice'>You load " ).item( num_loaded ).str( " shell" ).s().str( " into " ).the( this ).item().str( "!</span>" ).ToString() );
				}
				A.update_icon();
				this.update_icon();
			}
			return num_loaded;
		}

		// Function from file: ammunition.dm
		public virtual bool give_round( dynamic R = null, bool? replace_spent = null ) {
			replace_spent = replace_spent ?? false;

			Obj_Item_AmmoCasing AC = null;

			
			if ( !Lang13.Bool( R ) || Lang13.Bool( this.caliber ) && R.caliber != this.caliber || !Lang13.Bool( this.caliber ) && R.type != this.ammo_type ) {
				return false;
			}

			if ( this.stored_ammo.len < ( this.max_ammo ??0) ) {
				this.stored_ammo.Add( R );
				R.loc = this;
				return true;
			} else if ( replace_spent == true ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.stored_ammo, typeof(Obj_Item_AmmoCasing) )) {
					AC = _a;
					

					if ( !Lang13.Bool( AC.BB ) ) {
						this.stored_ammo.Remove( AC );
						AC.loc = GlobalFuncs.get_turf( this.loc );
						this.stored_ammo.Add( R );
						R.loc = this;
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: ammunition.dm
		public virtual dynamic get_round( bool? keep = null ) {
			keep = keep ?? false;

			dynamic b = null;

			
			if ( !( this.stored_ammo.len != 0 ) ) {
				return null;
			} else {
				b = this.stored_ammo[this.stored_ammo.len];
				this.stored_ammo.Remove( b );

				if ( keep == true ) {
					this.stored_ammo.Insert( 1, b );
				}
				return b;
			}
		}

	}

}