// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Research : Game_Data {

		public ByTable possible_tech = new ByTable();
		public ByTable known_tech = new ByTable();
		public ByTable possible_designs = new ByTable();
		public ByTable known_designs = new ByTable();

		// Function from file: research.dm
		public Research (  ) {
			dynamic T = null;
			dynamic D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Tech) ) - typeof(Tech) )) {
				T = _a;
				
				this.possible_tech.Add( Lang13.Call( T, this ) );
			}

			foreach (dynamic _b in Lang13.Enumerate( Lang13.GetTypes( typeof(Design) ) - typeof(Design) )) {
				D = _b;
				
				this.possible_designs.Add( Lang13.Call( D, this ) );
			}
			this.RefreshResearch();
			return;
		}

		// Function from file: research.dm
		public Design FindDesignByID( string id = null ) {
			Design D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.known_designs, typeof(Design) )) {
				D = _a;
				

				if ( D.id == id ) {
					return D;
				}
			}
			return null;
		}

		// Function from file: research.dm
		public void UpdateDesigns( dynamic I = null, dynamic temp_tech = null ) {
			dynamic T = null;
			Design D = null;

			
			foreach (dynamic _b in Lang13.Enumerate( temp_tech )) {
				T = _b;
				

				if ( Convert.ToDouble( temp_tech[T] - 1 ) >= Convert.ToDouble( this.known_tech[T] ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.known_designs, typeof(Design) )) {
						D = _a;
						

						if ( Lang13.Bool( D.req_tech[T] ) ) {
							D.reliability = Num13.MinInt( 100, D.reliability + 1 );

							if ( D.build_path == I.type ) {
								D.reliability = Num13.MinInt( 100, D.reliability + Rand13.Int( 1, 3 ) );

								if ( I.crit_fail ) {
									D.reliability = Num13.MinInt( 100, D.reliability + Rand13.Int( 3, 5 ) );
								}
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: research.dm
		public void UpdateTech( dynamic ID = null, int level = 0 ) {
			Tech KT = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
				KT = _a;
				

				if ( KT.id == ID ) {
					
					if ( KT.level <= level ) {
						KT.level = Num13.MaxInt( KT.level + 1, level - 1 );
					}
				}
			}
			return;
		}

		// Function from file: research.dm
		public void RefreshResearch(  ) {
			Tech PT = null;
			Design PD = null;
			dynamic T = null;
			Design D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.possible_tech, typeof(Tech) )) {
				PT = _a;
				

				if ( this.TechHasReqs( PT ) ) {
					this.AddTech2Known( PT );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.possible_designs, typeof(Design) )) {
				PD = _b;
				

				if ( this.DesignHasReqs( PD ) ) {
					this.AddDesign2Known( PD );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
				T = _c;
				
				T = Num13.MaxInt( 1, Num13.MinInt( Convert.ToInt32( T.level ), 20 ) );
			}

			foreach (dynamic _d in Lang13.Enumerate( this.known_designs, typeof(Design) )) {
				D = _d;
				
				D.CalcReliability( this.known_tech );
			}
			return;
		}

		// Function from file: research.dm
		public virtual void AddDesign2Known( dynamic D = null ) {
			Design known = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.known_designs, typeof(Design) )) {
				known = _a;
				

				if ( D.id == known.id ) {
					
					if ( Convert.ToDouble( D.reliability ) > known.reliability ) {
						known.reliability = Convert.ToInt32( D.reliability );
					}
					return;
				}
			}
			this.known_designs.Add( D );
			return;
		}

		// Function from file: research.dm
		public void AddTech2Known( Tech T = null ) {
			Tech known = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
				known = _a;
				

				if ( T.id == known.id ) {
					
					if ( T.level > known.level ) {
						known.level = T.level;
					}
					return;
				}
			}
			this.known_tech.Add( T );
			return;
		}

		// Function from file: research.dm
		public bool DesignHasReqs( Design D = null ) {
			Tech T = null;

			
			if ( D.req_tech.len == 0 ) {
				return true;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
				T = _a;
				

				if ( Lang13.Bool( D.req_tech[T.id] ) && T.level < Convert.ToDouble( D.req_tech[T.id] ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: research.dm
		public bool TechHasReqs( Tech T = null ) {
			int matches = 0;
			dynamic req = null;
			Tech known = null;

			
			if ( T.req_tech.len == 0 ) {
				return true;
			}
			matches = 0;

			foreach (dynamic _b in Lang13.Enumerate( T.req_tech )) {
				req = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
					known = _a;
					

					if ( req == known.id && known.level >= Convert.ToDouble( T.req_tech[req] ) ) {
						matches++;
						break;
					}
				}
			}

			if ( matches == T.req_tech.len ) {
				return true;
			} else {
				return false;
			}
		}

	}

}