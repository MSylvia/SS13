// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Robot : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.random = true;
			this.holder_type = typeof(Mob_Living_Silicon_Robot);
			this.wire_count = 5;
		}

		public Wires_Robot ( Obj holder = null ) : base( holder ) {
			
		}

		// Function from file: robot.dm
		public int LockedCut(  ) {
			return this.wires_status & 4;
		}

		// Function from file: robot.dm
		public int IsCameraCut(  ) {
			return this.wires_status & 16;
		}

		// Function from file: robot.dm
		public override bool CanUse( dynamic L = null ) {
			Obj R = null;

			R = this.holder;

			if ( Lang13.Bool( ((dynamic)R).wiresexposed ) ) {
				return true;
			}
			return false;
		}

		// Function from file: robot.dm
		public override void UpdatePulsed( double? index = null ) {
			Obj R = null;
			dynamic new_ai = null;
			int numberer = 0;
			Picture z = null;
			Picture p = null;
			Picture t = null;
			Picture p2 = null;

			R = this.holder;

			switch ((double?)( index )) {
				case 8:
					
					if ( !Lang13.Bool( ((dynamic)R).emagged ) ) {
						new_ai = GlobalFuncs.select_active_ai( R );

						if ( Lang13.Bool( new_ai ) && new_ai != ((dynamic)R).connected_ai ) {
							((dynamic)R).connected_ai = new_ai;
							((dynamic)R).notify_ai( 1 );
						}
						numberer = 1;

						foreach (dynamic _b in Lang13.Enumerate( ((dynamic)R).aicamera.aipictures, typeof(Picture) )) {
							z = _b;
							

							if ( ((dynamic)R).connected_ai.aicamera.aipictures.len == 0 ) {
								p = new Picture();
								p = z;
								p.fields["name"] = "Uploaded Image " + numberer + " (synced from " + R.name + ")";
								((dynamic)R).connected_ai.aicamera.aipictures.Add( p );
								numberer++;
								continue;
							}

							foreach (dynamic _a in Lang13.Enumerate( ((dynamic)R).connected_ai.aicamera.aipictures, typeof(Picture) )) {
								t = _a;
								

								if ( z.fields["pixel_y"] != t.fields["pixel_y"] && z.fields["pixel_x"] != t.fields["pixel_x"] ) {
									p2 = new Picture();
									p2 = z;
									p2.fields["name"] = "Uploaded Image " + numberer + " (synced from " + R.name + ")";
									((dynamic)R).connected_ai.aicamera.aipictures.Add( p2 );
								} else {
									continue;
								}
							}
							numberer++;
						}

						if ( ((dynamic)R).aicamera.aipictures.len > 0 ) {
							((dynamic)R).WriteMsg( "<span class='notice'>Locally saved images synced with AI. Images were retained in local database in case of loss of connection with the AI.</span>" );
						}
					}
					break;
				case 16:
					
					if ( !( ((dynamic)R).camera == null ) && Lang13.Bool( ((dynamic)R).camera.can_use() ) && !Lang13.Bool( ((dynamic)R).scrambledcodes ) ) {
						((dynamic)R).camera.deactivate( Task13.User, 0 );
						R.visible_message( "" + R + "'s camera lense focuses loudly." );
						((dynamic)R).WriteMsg( "Your camera lense focuses loudly." );
					}
					break;
				case 4:
					((dynamic)R).SetLockdown( !Lang13.Bool( ((dynamic)R).lockcharge ) );
					break;
			}
			return;
		}

		// Function from file: robot.dm
		public override void UpdateCut( double? index = null, bool mended = false ) {
			Obj R = null;

			R = this.holder;

			switch ((double?)( index )) {
				case 1:
					
					if ( !mended ) {
						
						if ( Lang13.Bool( ((dynamic)R).lawupdate ) == true ) {
							((dynamic)R).WriteMsg( "LawSync protocol engaged." );
							((dynamic)R).show_laws();
						}
					} else if ( Lang13.Bool( ((dynamic)R).lawupdate ) == false && !Lang13.Bool( ((dynamic)R).emagged ) ) {
						((dynamic)R).lawupdate = 1;
					}
					break;
				case 8:
					
					if ( !mended ) {
						
						if ( Lang13.Bool( ((dynamic)R).connected_ai ) ) {
							((dynamic)R).connected_ai = null;
						}
					}
					break;
				case 16:
					
					if ( !( ((dynamic)R).camera == null ) && !Lang13.Bool( ((dynamic)R).scrambledcodes ) ) {
						((dynamic)R).camera.status = mended;
						((dynamic)R).camera.deactivate( Task13.User, 0 );
					}
					break;
				case 1:
					
					if ( Lang13.Bool( ((dynamic)R).lawupdate ) ) {
						((dynamic)R).lawsync();
					}
					break;
				case 4:
					((dynamic)R).SetLockdown( !mended );
					break;
			}
			return;
		}

		// Function from file: robot.dm
		public override string GetInteractWindow(  ) {
			string _default = null;

			Obj R = null;

			_default = base.GetInteractWindow();
			R = this.holder;
			_default += "<br>\n" + ( Lang13.Bool( ((dynamic)R).lawupdate ) ? "The LawSync light is on." : "The LawSync light is off." ) + "<br>\n" + ( Lang13.Bool( ((dynamic)R).connected_ai ) ? "The AI link light is on." : "The AI link light is off." );
			_default += "<br>\n" + ( !( ((dynamic)R).camera == null ) && Lang13.Bool( ((dynamic)R).camera.status ) == true ? "The Camera light is on." : "The Camera light is off." ) + "<br>\n";
			_default += "<br>\n" + ( Lang13.Bool( ((dynamic)R).lockcharge ) ? "The lockdown light is on." : "The lockdown light is off." );
			return _default;
		}

	}

}