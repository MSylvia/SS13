// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Pipeline : Game_Data {

		public GasMixture air = null;
		public ByTable other_airs = new ByTable();
		public ByTable members = new ByTable();
		public ByTable other_atmosmch = new ByTable();
		public bool update = true;

		// Function from file: datum_pipeline.dm
		public Pipeline (  ) {
			GlobalVars.SSair.networks.Add( this );
			return;
		}

		// Function from file: datum_pipeline.dm
		public void reconcile_air(  ) {
			ByTable GL = null;
			ByTable PL = null;
			int? i = null;
			Pipeline P = null;
			Obj_Machinery_Atmospherics_Components_Binary_Valve V = null;
			Obj_Machinery_Atmospherics_Components_Unary_PortablesConnector C = null;
			double total_volume = 0;
			double total_thermal_energy = 0;
			double total_heat_capacity = 0;
			double total_oxygen = 0;
			double total_nitrogen = 0;
			double total_toxins = 0;
			double total_carbon_dioxide = 0;
			ByTable total_trace_gases = null;
			GasMixture G = null;
			Gas trace_gas = null;
			dynamic corresponding = null;
			double temperature = 0;
			GasMixture G2 = null;
			Gas trace_gas2 = null;
			dynamic corresponding2 = null;

			GL = new ByTable();
			PL = new ByTable();
			PL.Add( this );
			i = null;
			i = 1;

			while (( i ??0) <= PL.len) {
				P = PL[i];
				GL.Add( P.air );
				GL.Add( P.other_airs );

				foreach (dynamic _a in Lang13.Enumerate( P.other_atmosmch, typeof(Obj_Machinery_Atmospherics_Components_Binary_Valve) )) {
					V = _a;
					

					if ( V.open ) {
						PL.Or( V.parents[1] );
						PL.Or( V.parents[2] );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( P.other_atmosmch, typeof(Obj_Machinery_Atmospherics_Components_Unary_PortablesConnector) )) {
					C = _b;
					

					if ( C.connected_device != null ) {
						GL.Add( C.portableConnectorReturnAir() );
					}
				}
				i++;
			}
			total_volume = 0;
			total_thermal_energy = 0;
			total_heat_capacity = 0;
			total_oxygen = 0;
			total_nitrogen = 0;
			total_toxins = 0;
			total_carbon_dioxide = 0;
			total_trace_gases = new ByTable();

			foreach (dynamic _d in Lang13.Enumerate( GL, typeof(GasMixture) )) {
				G = _d;
				
				total_volume += G.volume;
				total_thermal_energy += Convert.ToDouble( G.thermal_energy() );
				total_heat_capacity += G.heat_capacity();
				total_oxygen += G.oxygen ??0;
				total_nitrogen += G.nitrogen;
				total_toxins += G.toxins ??0;
				total_carbon_dioxide += G.carbon_dioxide ??0;

				if ( G.trace_gases.len != 0 ) {
					
					foreach (dynamic _c in Lang13.Enumerate( G.trace_gases, typeof(Gas) )) {
						trace_gas = _c;
						
						corresponding = Lang13.FindIn( trace_gas.type, total_trace_gases );

						if ( !Lang13.Bool( corresponding ) ) {
							corresponding = Lang13.Call( trace_gas.type );
							total_trace_gases.Add( corresponding );
						}
						corresponding.moles += trace_gas.moles ??0;
					}
				}
			}

			if ( total_volume > 0 ) {
				temperature = 0;

				if ( total_heat_capacity > 0 ) {
					temperature = total_thermal_energy / total_heat_capacity;
				}

				foreach (dynamic _f in Lang13.Enumerate( GL, typeof(GasMixture) )) {
					G2 = _f;
					
					G2.oxygen = total_oxygen * G2.volume / total_volume;
					G2.nitrogen = total_nitrogen * G2.volume / total_volume;
					G2.toxins = total_toxins * G2.volume / total_volume;
					G2.carbon_dioxide = total_carbon_dioxide * G2.volume / total_volume;
					G2.temperature = temperature;

					if ( total_trace_gases.len != 0 ) {
						
						foreach (dynamic _e in Lang13.Enumerate( total_trace_gases, typeof(Gas) )) {
							trace_gas2 = _e;
							
							corresponding2 = Lang13.FindIn( trace_gas2.type, G2.trace_gases );

							if ( !Lang13.Bool( corresponding2 ) ) {
								corresponding2 = Lang13.Call( trace_gas2.type );
								G2.trace_gases.Add( corresponding2 );
							}
							corresponding2.moles = ( trace_gas2.moles ??0) * G2.volume / total_volume;
						}
					}
				}
			}
			return;
		}

		// Function from file: datum_pipeline.dm
		public bool temperature_interact( Ent_Static target = null, int share_volume = 0, double thermal_conductivity = 0 ) {
			double total_heat_capacity = 0;
			double partial_heat_capacity = 0;
			Ent_Static modeled_location = null;
			dynamic delta_temperature = null;
			double heat = 0;
			dynamic delta_temperature2 = null;
			double sharer_heat_capacity = 0;
			double self_temperature_delta = 0;
			double sharer_temperature_delta = 0;
			double heat2 = 0;
			dynamic delta_temperature3 = null;
			double heat3 = 0;

			total_heat_capacity = this.air.heat_capacity();
			partial_heat_capacity = total_heat_capacity * ( share_volume / this.air.volume );

			if ( target is Tile_Simulated ) {
				modeled_location = target;

				if ( Lang13.Bool( ((dynamic)modeled_location).blocks_air ) ) {
					
					if ( Convert.ToDouble( ((dynamic)modeled_location).heat_capacity ) > 0 && partial_heat_capacity > 0 ) {
						delta_temperature = this.air.temperature - ((dynamic)modeled_location).temperature;
						heat = thermal_conductivity * Convert.ToDouble( delta_temperature ) * ( partial_heat_capacity * Convert.ToDouble( ((dynamic)modeled_location).heat_capacity ) / ( partial_heat_capacity + Convert.ToDouble( ((dynamic)modeled_location).heat_capacity ) ) );
						this.air.temperature -= heat / total_heat_capacity;
						((dynamic)modeled_location).temperature += heat / Convert.ToDouble( ((dynamic)modeled_location).heat_capacity );
					}
				} else {
					delta_temperature2 = 0;
					sharer_heat_capacity = 0;
					delta_temperature2 = this.air.temperature - ((dynamic)modeled_location).air.temperature;
					sharer_heat_capacity = ((GasMixture)((dynamic)modeled_location).air).heat_capacity();
					self_temperature_delta = 0;
					sharer_temperature_delta = 0;

					if ( sharer_heat_capacity > 0 && partial_heat_capacity > 0 ) {
						heat2 = thermal_conductivity * Convert.ToDouble( delta_temperature2 ) * ( partial_heat_capacity * sharer_heat_capacity / ( partial_heat_capacity + sharer_heat_capacity ) );
						self_temperature_delta = -heat2 / total_heat_capacity;
						sharer_temperature_delta = heat2 / sharer_heat_capacity;
					} else {
						return true;
					}
					this.air.temperature += self_temperature_delta;
					((dynamic)modeled_location).air.temperature += sharer_temperature_delta;
					((Tile)modeled_location).air_update_turf();
				}
			} else if ( Convert.ToDouble( ((dynamic)target).heat_capacity ) > 0 && partial_heat_capacity > 0 ) {
				delta_temperature3 = this.air.temperature - ((dynamic)target).temperature;
				heat3 = thermal_conductivity * Convert.ToDouble( delta_temperature3 ) * ( partial_heat_capacity * Convert.ToDouble( ((dynamic)target).heat_capacity ) / ( partial_heat_capacity + Convert.ToDouble( ((dynamic)target).heat_capacity ) ) );
				this.air.temperature -= heat3 / total_heat_capacity;
			}
			this.update = true;
			return false;
		}

		// Function from file: datum_pipeline.dm
		public void temporarily_store_air(  ) {
			Obj_Machinery_Atmospherics_Pipe member = null;
			Gas trace_gas = null;
			dynamic corresponding = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.members, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
				member = _b;
				
				member.air_temporary = new GasMixture();
				member.air_temporary.volume = member.volume;
				member.air_temporary.oxygen = ( this.air.oxygen ??0) * member.volume / this.air.volume;
				member.air_temporary.nitrogen = this.air.nitrogen * member.volume / this.air.volume;
				member.air_temporary.toxins = ( this.air.toxins ??0) * member.volume / this.air.volume;
				member.air_temporary.carbon_dioxide = ( this.air.carbon_dioxide ??0) * member.volume / this.air.volume;
				member.air_temporary.temperature = this.air.temperature;

				if ( this.air.trace_gases.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.air.trace_gases, typeof(Gas) )) {
						trace_gas = _a;
						
						corresponding = Lang13.Call( trace_gas.type );
						member.air_temporary.trace_gases.Add( corresponding );
						corresponding.moles = ( trace_gas.moles ??0) * member.volume / this.air.volume;
					}
				}
			}
			return;
		}

		// Function from file: datum_pipeline.dm
		public void merge( Pipeline E = null ) {
			Obj_Machinery_Atmospherics_Pipe S = null;
			Obj_Machinery_Atmospherics_Components C = null;

			this.air.volume += E.air.volume;
			this.members.Add( E.members );

			foreach (dynamic _a in Lang13.Enumerate( E.members, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
				S = _a;
				
				S.parent = this;
			}
			this.air.merge( E.air );

			foreach (dynamic _b in Lang13.Enumerate( E.other_atmosmch, typeof(Obj_Machinery_Atmospherics_Components) )) {
				C = _b;
				
				C.replacePipenet( E, this );
			}
			this.other_atmosmch.Add( E.other_atmosmch );
			this.other_airs.Add( E.other_airs );
			E.members.Cut();
			E.other_atmosmch.Cut();
			GlobalFuncs.qdel( E );
			return;
		}

		// Function from file: datum_pipeline.dm
		public void addMember( Obj_Machinery_Atmospherics A = null, Obj_Machinery_Atmospherics N = null ) {
			Obj_Machinery_Atmospherics P = null;
			ByTable adjacent = null;
			Obj_Machinery_Atmospherics_Pipe I = null;
			Pipeline E = null;

			
			if ( A is Obj_Machinery_Atmospherics_Pipe ) {
				P = A;
				((dynamic)P).parent = this;
				adjacent = P.pipeline_expansion();

				foreach (dynamic _a in Lang13.Enumerate( adjacent, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
					I = _a;
					

					if ( I.parent == this ) {
						continue;
					}
					E = I.parent;
					this.merge( E );
				}

				if ( !( this.members.Find( P ) != 0 ) ) {
					this.members.Add( P );
					this.air.volume += Convert.ToDouble( ((dynamic)P).volume );
				}
			} else {
				A.setPipenet( this, N );
				this.addMachineryMember( A );
			}
			return;
		}

		// Function from file: datum_pipeline.dm
		public void addMachineryMember( Obj_Machinery_Atmospherics C = null ) {
			dynamic G = null;

			this.other_atmosmch.Or( C );
			G = C.returnPipenetAir( this );
			this.other_airs.Or( G );
			return;
		}

		// Function from file: datum_pipeline.dm
		public void build_pipeline( Obj_Machinery_Atmospherics _base = null ) {
			double volume = 0;
			Obj_Machinery_Atmospherics E = null;
			ByTable possible_expansions = null;
			Obj_Machinery_Atmospherics borderline = null;
			ByTable result = null;
			Obj_Machinery_Atmospherics P = null;
			Obj_Machinery_Atmospherics item = null;

			volume = 0;

			if ( _base is Obj_Machinery_Atmospherics_Pipe ) {
				E = _base;
				volume = Convert.ToDouble( ((dynamic)E).volume );
				this.members.Add( E );

				if ( Lang13.Bool( ((dynamic)E).air_temporary ) ) {
					this.air = ((dynamic)E).air_temporary;
					((dynamic)E).air_temporary = null;
				}
			} else {
				this.addMachineryMember( _base );
			}

			if ( !( this.air != null ) ) {
				this.air = new GasMixture();
			}
			possible_expansions = new ByTable(new object [] { _base });

			while (possible_expansions.len > 0) {
				
				foreach (dynamic _b in Lang13.Enumerate( possible_expansions, typeof(Obj_Machinery_Atmospherics) )) {
					borderline = _b;
					
					result = borderline.pipeline_expansion( this );

					if ( result.len > 0 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( result, typeof(Obj_Machinery_Atmospherics) )) {
							P = _a;
							

							if ( P is Obj_Machinery_Atmospherics_Pipe ) {
								item = P;

								if ( !( this.members.Find( item ) != 0 ) ) {
									
									if ( Lang13.Bool( ((dynamic)item).parent ) ) {
										
										if ( GlobalVars.pipenetwarnings > 0 ) {
											GlobalFuncs.warning( "build_pipeline(): " + item.type + " added to a pipenet while still having one. (pipes leading to the same spot stacking in one turf) Nearby: (" + item.x + ", " + item.y + ", " + item.z + ")" );
											GlobalVars.pipenetwarnings -= 1;

											if ( GlobalVars.pipenetwarnings == 0 ) {
												GlobalFuncs.warning( "build_pipeline(): further messages about pipenets will be supressed" );
											}
										}
									}
									this.members.Add( item );
									possible_expansions.Add( item );
									volume += Convert.ToDouble( ((dynamic)item).volume );
									((dynamic)item).parent = this;

									if ( Lang13.Bool( ((dynamic)item).air_temporary ) ) {
										this.air.merge( ((dynamic)item).air_temporary );
										((dynamic)item).air_temporary = null;
									}
								}
							} else {
								P.setPipenet( this, borderline );
								this.addMachineryMember( P );
							}
						}
					}
					possible_expansions.Remove( borderline );
				}
			}
			this.air.volume = volume;
			return;
		}

		// Function from file: datum_pipeline.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( this.update ) {
				this.update = false;
				this.reconcile_air();
			}
			this.update = this.air.react();
			return null;
		}

		// Function from file: datum_pipeline.dm
		public override dynamic Destroy(  ) {
			Obj_Machinery_Atmospherics_Pipe P = null;
			Obj_Machinery_Atmospherics_Components C = null;

			GlobalVars.SSair.networks.Remove( this );

			if ( this.air != null && this.air.volume != 0 ) {
				this.temporarily_store_air();
			}

			foreach (dynamic _a in Lang13.Enumerate( this.members, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
				P = _a;
				
				P.parent = null;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.other_atmosmch, typeof(Obj_Machinery_Atmospherics_Components) )) {
				C = _b;
				
				C.nullifyPipenet( this );
			}
			return base.Destroy();
		}

	}

}