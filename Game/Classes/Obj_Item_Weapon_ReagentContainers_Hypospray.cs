// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Hypospray : Obj_Item_Weapon_ReagentContainers {

		public bool ignore_flags = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "hypo";
			this.possible_transfer_amounts = new ByTable();
			this.flags = 4096;
			this.slot_flags = 512;
			this.icon = "icons/obj/syringe.dmi";
			this.icon_state = "hypo";
		}

		public Obj_Item_Weapon_ReagentContainers_Hypospray ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			
		}

		// Function from file: hypospray.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			double? fraction = null;
			ByTable injected = null;
			Reagent R = null;
			dynamic trans = null;
			string contained = null;

			
			if ( !Lang13.Bool( this.reagents.total_volume ) ) {
				user.WriteMsg( "<span class='warning'>" + this + " is empty!</span>" );
				return false;
			}

			if ( !( M is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( Lang13.Bool( this.reagents.total_volume ) && ( this.ignore_flags || ((Mob_Living)M).can_inject( user, true ) ) ) {
				M.WriteMsg( "<span class='warning'>You feel a tiny prick!</span>" );
				user.WriteMsg( "<span class='notice'>You inject " + M + " with " + this + ".</span>" );
				fraction = Num13.MinInt( ((int)( ( this.amount_per_transfer_from_this ??0) / ( this.reagents.total_volume ??0) )), 1 );
				this.reagents.reaction( M, GlobalVars.INJECT, fraction );

				if ( Lang13.Bool( M.reagents ) ) {
					injected = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
						R = _a;
						
						injected.Add( R.name );
					}
					trans = this.reagents.trans_to( M, this.amount_per_transfer_from_this );
					user.WriteMsg( new Txt( "<span class='notice'>" ).item( trans ).str( " unit" ).s().str( " injected.  " ).item( this.reagents.total_volume ).str( " unit" ).s().str( " remaining in " ).item( this ).str( ".</span>" ).ToString() );
					contained = GlobalFuncs.english_list( injected );
					GlobalFuncs.add_logs( user, M, "injected", this, "(" + contained + ")" );
				}
			}
			return false;
		}

		// Function from file: hypospray.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

	}

}