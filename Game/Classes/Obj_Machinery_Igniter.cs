// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Igniter : Obj_Machinery {

		public string id = null;
		public bool on = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 2;
			this.active_power_usage = 4;
			this.icon_state = "igniter1";
		}

		// Function from file: igniter.dm
		public Obj_Machinery_Igniter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.icon_state = "igniter" + this.on;
			return;
		}

		// Function from file: igniter.dm
		public override void power_change(  ) {
			
			if ( !( ( this.stat & 2 ) != 0 ) ) {
				this.icon_state = "igniter" + this.on;
			} else {
				this.icon_state = "igniter0";
			}
			return;
		}

		// Function from file: igniter.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static location = null;

			
			if ( this.on && !( ( this.stat & 2 ) != 0 ) ) {
				location = this.loc;

				if ( location is Tile ) {
					((dynamic)location).hotspot_expose( 1000, 500, 1 );
				}
			}
			return 1;
		}

		// Function from file: igniter.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.add_fingerprint( a );
			this.f_use_power( 50 );
			this.on = !this.on;
			this.icon_state = "igniter" + this.on;
			return null;
		}

		// Function from file: igniter.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: igniter.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

	}

}