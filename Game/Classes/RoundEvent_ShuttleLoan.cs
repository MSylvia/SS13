// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RoundEvent_ShuttleLoan : RoundEvent {

		public int dispatch_type = 4;
		public int bonus_points = 100;
		public string thanks_msg = "The cargo shuttle should return in five minutes. Have some supply points for your trouble.";
		public bool dispatched = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.endWhen = 500;
			this.announceWhen = 1;
		}

		// Function from file: shuttle_loan.dm
		public override void end(  ) {
			ByTable empty_shuttle_turfs = null;
			Tile_Simulated_Floor T = null;
			ByTable shuttle_spawns = null;
			dynamic T2 = null;
			dynamic virus_type = null;
			dynamic T3 = null;
			int? i = null;
			Obj_Effect_Decal_Cleanable_Blood b = null;
			dynamic D = null;
			ByTable crate_types = null;
			int? i2 = null;
			dynamic T4 = null;
			dynamic spawn_type = null;
			int false_positive = 0;
			Ent_Static T5 = null;
			dynamic spawn_type2 = null;

			
			if ( GlobalVars.SSshuttle.shuttle_loan != null && GlobalVars.SSshuttle.shuttle_loan.dispatched ) {
				GlobalVars.SSshuttle.shuttle_loan = null;
				empty_shuttle_turfs = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSshuttle.supply.areaInstance, typeof(Tile_Simulated_Floor) )) {
					T = _a;
					

					if ( T.density || T.contents.len != 0 ) {
						continue;
					}
					empty_shuttle_turfs.Add( T );
				}

				if ( !( empty_shuttle_turfs.len != 0 ) ) {
					return;
				}
				shuttle_spawns = new ByTable();

				switch ((int)( this.dispatch_type )) {
					case 1:
						this.add_crates( new ByTable(new object [] { typeof(SupplyPacks_Emergency_Specialops) }), empty_shuttle_turfs );
						shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Syndicate) );
						shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Syndicate) );

						if ( Rand13.PercentChance( 75 ) ) {
							shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Syndicate) );
						}

						if ( Rand13.PercentChance( 50 ) ) {
							shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Syndicate) );
						}
						break;
					case 2:
						this.add_crates( new ByTable(new object [] { typeof(SupplyPacks_Organic_Party) }), empty_shuttle_turfs );
						shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Russian) );
						shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Russian_Ranged) );
						shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Bear) );

						if ( Rand13.PercentChance( 75 ) ) {
							shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Russian) );
						}

						if ( Rand13.PercentChance( 50 ) ) {
							shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Bear) );
						}
						break;
					case 3:
						this.add_crates( new ByTable(new object [] { typeof(SupplyPacks_Emergency_Specialops) }), empty_shuttle_turfs );
						shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider) );
						shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider) );
						shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider_Nurse) );

						if ( Rand13.PercentChance( 50 ) ) {
							shuttle_spawns.Add( typeof(Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider_Hunter) );
						}
						T2 = Rand13.PickFromTable( empty_shuttle_turfs );
						empty_shuttle_turfs.Remove( T2 );
						new Obj_Effect_Decal_Remains_Human( T2 );
						new Obj_Item_Clothing_Shoes_SpaceNinja( T2 );
						new Obj_Item_Clothing_Mask_Balaclava( T2 );
						T2 = Rand13.PickFromTable( empty_shuttle_turfs );
						new Obj_Effect_Spider_Stickyweb( T2 );
						T2 = Rand13.PickFromTable( empty_shuttle_turfs );
						new Obj_Effect_Spider_Stickyweb( T2 );
						T2 = Rand13.PickFromTable( empty_shuttle_turfs );
						new Obj_Effect_Spider_Stickyweb( T2 );
						T2 = Rand13.PickFromTable( empty_shuttle_turfs );
						new Obj_Effect_Spider_Stickyweb( T2 );
						T2 = Rand13.PickFromTable( empty_shuttle_turfs );
						new Obj_Effect_Spider_Stickyweb( T2 );
						break;
					case 5:
						virus_type = Rand13.Pick(new object [] { typeof(Disease_Beesease), typeof(Disease_Brainrot), typeof(Disease_Fluspanish) });
						T3 = null;
						i = null;
						i = 0;

						while (( i ??0) < 10) {
							
							if ( Rand13.PercentChance( 15 ) ) {
								shuttle_spawns.Add( typeof(Obj_Item_Weapon_ReagentContainers_Glass_Bottle) );
							} else if ( Rand13.PercentChance( 15 ) ) {
								shuttle_spawns.Add( typeof(Obj_Item_Weapon_ReagentContainers_Syringe) );
							} else if ( Rand13.PercentChance( 25 ) ) {
								shuttle_spawns.Add( typeof(Obj_Item_Weapon_Shard) );
							}
							T3 = GlobalFuncs.pick_n_take( empty_shuttle_turfs );
							b = new Obj_Effect_Decal_Cleanable_Blood( T3 );
							D = Lang13.Call( virus_type );
							D.longevity = 1000;
							b.viruses.Add( D );
							D.holder = b;
							i++;
						}
						shuttle_spawns.Add( typeof(Obj_Structure_Closet_Crate) );
						shuttle_spawns.Add( typeof(Obj_Item_Weapon_ReagentContainers_Glass_Bottle_PierrotThroat) );
						shuttle_spawns.Add( typeof(Obj_Item_Weapon_ReagentContainers_Glass_Bottle_Magnitis) );
						break;
					case 4:
						crate_types = new ByTable(new object [] { 
							typeof(SupplyPacks_Emergency_Evac), 
							typeof(SupplyPacks_Security_Supplies), 
							typeof(SupplyPacks_Organic_Food), 
							typeof(SupplyPacks_Emergency_Weedcontrol), 
							typeof(SupplyPacks_Engineering_Tools), 
							typeof(SupplyPacks_Engineering_Engiequipment), 
							typeof(SupplyPacks_Science_Robotics), 
							typeof(SupplyPacks_Science_Plasma), 
							typeof(SupplyPacks_Medical_Supplies)
						 });
						this.add_crates( crate_types, empty_shuttle_turfs );
						i2 = null;
						i2 = 0;

						while (( i2 ??0) < 5) {
							T4 = Rand13.PickFromTable( empty_shuttle_turfs );
							spawn_type = Rand13.Pick(new object [] { typeof(Obj_Effect_Decal_Cleanable_Flour), typeof(Obj_Effect_Decal_Cleanable_RobotDebris), typeof(Obj_Effect_Decal_Cleanable_Oil) });
							Lang13.Call( spawn_type, T4 );
							i2++;
						}
						break;
				}
				false_positive = 0;

				while (shuttle_spawns.len != 0 && empty_shuttle_turfs.len != 0) {
					T5 = GlobalFuncs.pick_n_take( empty_shuttle_turfs );

					if ( T5.contents.len != 0 && false_positive < 5 ) {
						false_positive++;
						continue;
					}
					spawn_type2 = GlobalFuncs.pick_n_take( shuttle_spawns );
					Lang13.Call( spawn_type2, T5 );
				}
			}
			return;
		}

		// Function from file: shuttle_loan.dm
		public override void tick(  ) {
			
			if ( this.dispatched ) {
				
				if ( GlobalVars.SSshuttle.supply.mode != 0 ) {
					this.endWhen = this.activeFor;
				} else {
					this.endWhen = ( this.activeFor ??0) + 1;
				}
			}
			return;
		}

		// Function from file: shuttle_loan.dm
		public void add_crates( ByTable crate_types = null, ByTable turfs = null ) {
			dynamic crate_type = null;
			dynamic T = null;
			dynamic sp_obj = null;
			dynamic Crate = null;
			dynamic type_path = null;
			dynamic A = null;

			
			foreach (dynamic _b in Lang13.Enumerate( crate_types )) {
				crate_type = _b;
				
				T = GlobalFuncs.pick_n_take( turfs );
				sp_obj = Lang13.Call( crate_type );
				Crate = Lang13.Call( sp_obj.containertype, T );
				Crate.name = sp_obj.containername;

				foreach (dynamic _a in Lang13.Enumerate( sp_obj.contains )) {
					type_path = _a;
					
					A = Lang13.Call( type_path, Crate );

					if ( Lang13.Bool( sp_obj.amount ) && A.vars.Find( "amount" ) != 0 && Lang13.Bool( A.amount ) ) {
						A.amount = sp_obj.amount;
					}
				}
			}
			return;
		}

		// Function from file: shuttle_loan.dm
		public void loan_shuttle(  ) {
			GlobalFuncs.priority_announce( this.thanks_msg, "Cargo shuttle commandeered by Centcom." );
			this.dispatched = true;
			GlobalVars.SSshuttle.points += this.bonus_points;
			this.endWhen = ( this.activeFor ??0) + 1;
			GlobalVars.SSshuttle.supply.sell();
			GlobalVars.SSshuttle.supply.enterTransit();

			if ( GlobalVars.SSshuttle.supply.z != 1 ) {
				GlobalVars.SSshuttle.supply.mode = 2;
				GlobalVars.SSshuttle.supply.destination = GlobalVars.SSshuttle.getDock( "supply_home" );
			} else {
				GlobalVars.SSshuttle.supply.mode = 1;
			}
			GlobalVars.SSshuttle.supply.setTimer( 3000 );

			switch ((int)( this.dispatch_type )) {
				case 1:
					GlobalVars.SSshuttle.centcom_message += "Syndicate hijack team incoming.";
					break;
				case 2:
					GlobalVars.SSshuttle.centcom_message += "Partying Russians incoming.";
					break;
				case 3:
					GlobalVars.SSshuttle.centcom_message += "Spider Clan gift incoming.";
					break;
				case 4:
					GlobalVars.SSshuttle.centcom_message += "Department resupply incoming.";
					break;
				case 5:
					GlobalVars.SSshuttle.centcom_message += "Virus samples incoming.";
					break;
			}
			return;
		}

		// Function from file: shuttle_loan.dm
		public override void announce(  ) {
			GlobalVars.SSshuttle.shuttle_loan = this;

			switch ((int)( this.dispatch_type )) {
				case 1:
					GlobalFuncs.priority_announce( "Cargo: The syndicate are trying to infiltrate your station. If you let them hijack your cargo shuttle, you'll save us a headache.", "Centcom Counter Intelligence" );
					break;
				case 2:
					GlobalFuncs.priority_announce( "Cargo: A group of angry russians want to have a party, can you send them your cargo shuttle then make them disappear?", "Centcom Russian Outreach Program" );
					break;
				case 3:
					GlobalFuncs.priority_announce( "Cargo: The Spider Clan has sent us a mysterious gift, can we ship it to you to see what's inside?", "Centcom Diplomatic Corps" );
					break;
				case 4:
					GlobalFuncs.priority_announce( "Cargo: Seems we've ordered doubles of our department resupply packages this month. Can we send them to you?", "Centcom Supply Department" );
					this.thanks_msg = "The cargo shuttle should return in 5 minutes.";
					this.bonus_points = 0;
					break;
				case 5:
					GlobalFuncs.priority_announce( "Cargo: Your station has been chosen for an epidemiological research project. Send us your cargo shuttle to receive your research samples.", "Centcom Research Initiatives" );
					break;
			}
			return;
		}

		// Function from file: shuttle_loan.dm
		public override bool start(  ) {
			this.dispatch_type = Convert.ToInt32( Rand13.Pick(new object [] { 1, 2, 3, 4, 5 }) );
			return false;
		}

	}

}