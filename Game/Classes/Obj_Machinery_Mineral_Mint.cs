// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_Mint : Obj_Machinery_Mineral {

		public double amt_silver = 0;
		public double amt_gold = 0;
		public double amt_diamond = 0;
		public double amt_iron = 0;
		public double amt_plasma = 0;
		public double amt_uranium = 0;
		public double amt_clown = 0;
		public double amt_adamantine = 0;
		public int amt_mythril = 0;
		public int newCoins = 0;
		public bool processing = false;
		public string chosen = "metal";
		public int coinsToProduce = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/economy.dmi";
			this.icon_state = "coinpress0";
		}

		public Obj_Machinery_Mineral_Mint ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: mint.dm
		public void create_coins( Type P = null ) {
			Tile T = null;
			dynamic O = null;
			dynamic M = null;

			T = Map13.GetStep( this, this.output_dir );

			if ( T != null ) {
				O = Lang13.Call( P, this );
				M = Lang13.FindIn( typeof(Obj_Item_Weapon_Moneybag), T );

				if ( !Lang13.Bool( M ) ) {
					M = new Obj_Item_Weapon_Moneybag( this );
					this.unload_mineral( M );
				}
				O.loc = M;
			}
			return;
		}

		// Function from file: mint.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			int temp_coins = 0;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( this.processing ) {
				Task13.User.WriteMsg( "<span class='notice'>The machine is processing.</span>" );
				return null;
			}

			if ( Lang13.Bool( href_list["choose"] ) ) {
				this.chosen = href_list["choose"];
			}

			if ( Lang13.Bool( href_list["chooseAmt"] ) ) {
				this.coinsToProduce = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.coinsToProduce + ( String13.ParseNumber( href_list["chooseAmt"] ) ??0) )), 1000 ) );
			}

			if ( Lang13.Bool( href_list["makeCoins"] ) ) {
				temp_coins = this.coinsToProduce;
				this.processing = true;
				this.icon_state = "coinpress1";

				switch ((string)( this.chosen )) {
					case "metal":
						
						while (this.amt_iron > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Iron) );
							this.amt_iron -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
					case "gold":
						
						while (this.amt_gold > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Gold) );
							this.amt_gold -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
					case "silver":
						
						while (this.amt_silver > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Silver) );
							this.amt_silver -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
					case "diamond":
						
						while (this.amt_diamond > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Diamond) );
							this.amt_diamond -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
					case "plasma":
						
						while (this.amt_plasma > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Plasma) );
							this.amt_plasma -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
					case "uranium":
						
						while (this.amt_uranium > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Uranium) );
							this.amt_uranium -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
					case "clown":
						
						while (this.amt_clown > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Clown) );
							this.amt_clown -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
					case "adamantine":
						
						while (this.amt_adamantine > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Adamantine) );
							this.amt_adamantine -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
					case "mythril":
						
						while (this.amt_adamantine > 0 && this.coinsToProduce > 0) {
							this.create_coins( typeof(Obj_Item_Weapon_Coin_Mythril) );
							this.amt_mythril -= 20;
							this.coinsToProduce--;
							this.newCoins++;
							this.updateUsrDialog();
							Task13.Sleep( 5 );
						}
						break;
				}
				this.icon_state = "coinpress0";
				this.processing = false;
				this.coinsToProduce = temp_coins;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: mint.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;

			dat = "<b>Coin Press</b><br>";
			dat += "<br><font color='#ffcc00'><b>Gold inserted: </b>" + this.amt_gold + "</font> ";

			if ( this.chosen == "gold" ) {
				dat += "chosen";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choose=gold'>Choose</A>" ).ToString();
			}
			dat += "<br><font color='#888888'><b>Silver inserted: </b>" + this.amt_silver + "</font> ";

			if ( this.chosen == "silver" ) {
				dat += "chosen";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choose=silver'>Choose</A>" ).ToString();
			}
			dat += "<br><font color='#555555'><b>Iron inserted: </b>" + this.amt_iron + "</font> ";

			if ( this.chosen == "metal" ) {
				dat += "chosen";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choose=metal'>Choose</A>" ).ToString();
			}
			dat += "<br><font color='#8888FF'><b>Diamond inserted: </b>" + this.amt_diamond + "</font> ";

			if ( this.chosen == "diamond" ) {
				dat += "chosen";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choose=diamond'>Choose</A>" ).ToString();
			}
			dat += "<br><font color='#FF8800'><b>Plasma inserted: </b>" + this.amt_plasma + "</font> ";

			if ( this.chosen == "plasma" ) {
				dat += "chosen";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choose=plasma'>Choose</A>" ).ToString();
			}
			dat += "<br><font color='#008800'><b>uranium inserted: </b>" + this.amt_uranium + "</font> ";

			if ( this.chosen == "uranium" ) {
				dat += "chosen";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choose=uranium'>Choose</A>" ).ToString();
			}

			if ( this.amt_clown > 0 ) {
				dat += "<br><font color='#AAAA00'><b>Bananium inserted: </b>" + this.amt_clown + "</font> ";

				if ( this.chosen == "clown" ) {
					dat += "chosen";
				} else {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choose=clown'>Choose</A>" ).ToString();
				}
			}
			dat += "<br><font color='#888888'><b>Adamantine inserted: </b>" + this.amt_adamantine + "</font> ";

			if ( this.chosen == "adamantine" ) {
				dat += "chosen";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choose=adamantine'>Choose</A>" ).ToString();
			}
			dat += "<br><br>Will produce " + this.coinsToProduce + " " + this.chosen + " coins if enough materials are available.<br>";
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";chooseAmt=-10'>-10</A> " ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";chooseAmt=-5'>-5</A> " ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";chooseAmt=-1'>-1</A> " ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";chooseAmt=1'>+1</A> " ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";chooseAmt=5'>+5</A> " ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";chooseAmt=10'>+10</A> " ).ToString();
			dat += "<br><br>In total this machine produced <font color='green'><b>" + this.newCoins + "</b></font> coins.";
			dat += new Txt( "<br><A href='?src=" ).Ref( this ).str( ";makeCoins=" ).item( 1 ).str( "'>Make coins</A>" ).ToString();
			Interface13.Browse( a, "" + dat, "window=mint" );
			return null;
		}

		// Function from file: mint.dm
		public override int? process( dynamic seconds = null ) {
			Tile T = null;
			Obj_Item_Stack_Sheet O = null;

			T = Map13.GetStep( this, this.input_dir );

			if ( T != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Item_Stack_Sheet) )) {
					O = _a;
					

					if ( O is Obj_Item_Stack_Sheet_Mineral_Gold ) {
						this.amt_gold += ( O.amount ??0) * 100;
						O.loc = null;
					}

					if ( O is Obj_Item_Stack_Sheet_Mineral_Silver ) {
						this.amt_silver += ( O.amount ??0) * 100;
						O.loc = null;
					}

					if ( O is Obj_Item_Stack_Sheet_Mineral_Diamond ) {
						this.amt_diamond += ( O.amount ??0) * 100;
						O.loc = null;
					}

					if ( O is Obj_Item_Stack_Sheet_Mineral_Plasma ) {
						this.amt_plasma += ( O.amount ??0) * 100;
						O.loc = null;
					}

					if ( O is Obj_Item_Stack_Sheet_Mineral_Uranium ) {
						this.amt_uranium += ( O.amount ??0) * 100;
						O.loc = null;
					}

					if ( O is Obj_Item_Stack_Sheet_Metal ) {
						this.amt_iron += ( O.amount ??0) * 100;
						O.loc = null;
					}

					if ( O is Obj_Item_Stack_Sheet_Mineral_Bananium ) {
						this.amt_clown += ( O.amount ??0) * 100;
						O.loc = null;
					}

					if ( O is Obj_Item_Stack_Sheet_Mineral_Adamantine ) {
						this.amt_adamantine += ( O.amount ??0) * 100;
						O.loc = null;
					}
					return null;
				}
			}
			return null;
		}

	}

}