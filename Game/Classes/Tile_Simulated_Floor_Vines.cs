// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Floor_Vines : Tile_Simulated_Floor {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.color = "#aa77aa";
			this.broken_states = new ByTable();
			this.icon_state = "vinefloor";
		}

		public Tile_Simulated_Floor_Vines ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: spacevine.dm
		public override dynamic ChangeTurf( dynamic path = null ) {
			Obj_Effect_Spacevine SV = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Effect_Spacevine) )) {
				SV = _a;
				
				GlobalFuncs.qdel( SV );
			}
			base.ChangeTurf( (object)(path) );
			this.UpdateAffectingLights();
			return null;
		}

		// Function from file: spacevine.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			
			if ( ( current_size ??0) >= 9 ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					this.ChangeTurf( this.baseturf );
				}
			}
			return;
		}

		// Function from file: spacevine.dm
		public override void narsie_act(  ) {
			
			if ( Rand13.PercentChance( 20 ) ) {
				this.ChangeTurf( this.baseturf );
			}
			return;
		}

		// Function from file: spacevine.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			if ( ( severity ??0) < 3 || target == this ) {
				this.ChangeTurf( this.baseturf );
			}
			return false;
		}

		// Function from file: spacevine.dm
		public override void break_tile_to_plating(  ) {
			return;
		}

		// Function from file: spacevine.dm
		public override dynamic make_plating( bool? force = null ) {
			return null;
		}

		// Function from file: spacevine.dm
		public override void break_tile(  ) {
			return;
		}

		// Function from file: spacevine.dm
		public override void burn_tile(  ) {
			return;
		}

		// Function from file: spacevine.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			return null;
		}

	}

}