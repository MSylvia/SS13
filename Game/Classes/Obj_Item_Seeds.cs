// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Seeds : Obj_Item {

		public string plantname = "Plants";
		public Type product = null;
		public string species = "";
		public int lifespan = 0;
		public int endurance = 0;
		public int maturation = 0;
		public double? production = 0;
		public int yield = 0;
		public bool oneharvest = false;
		public int? potency = -1;
		public int growthstages = 0;
		public int plant_type = 0;
		public int rarity = 0;
		public ByTable mutatelist = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.burn_state = 0;
			this.icon = "icons/obj/hydroponics/seeds.dmi";
			this.icon_state = "seed";
		}

		// Function from file: seeds.dm
		public Obj_Item_Seeds ( dynamic loc = null, dynamic parent = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pixel_x = Rand13.Int( -8, 8 );
			this.pixel_y = Rand13.Int( -8, 8 );
			return;
		}

		// Function from file: seeds.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			ByTable text_strings = null;
			dynamic _string = null;

			
			if ( A is Obj_Item_Device_Analyzer_PlantAnalyzer ) {
				user.WriteMsg( "*** <B>" + this.plantname + "</B> ***" );
				user.WriteMsg( "-Plant Endurance: <span class='notice'>" + this.endurance + "</span>" );
				user.WriteMsg( "-Plant Lifespan: <span class='notice'>" + this.lifespan + "</span>" );
				user.WriteMsg( "-Species Discovery Value: <span class='notice'>" + this.rarity + "</span>" );

				if ( this.yield != -1 ) {
					user.WriteMsg( "-Plant Yield: <span class='notice'>" + this.yield + "</span>" );
				}
				user.WriteMsg( "-Plant Production: <span class='notice'>" + this.production + "</span>" );

				if ( this.potency != -1 ) {
					user.WriteMsg( "-Plant Potency: <span class='notice'>" + this.potency + "</span>" );
				}
				text_strings = this.get_analyzer_text();

				if ( text_strings != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( text_strings )) {
						_string = _a;
						
						user.WriteMsg( _string );
					}
				}
				return null;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: seeds.dm
		public virtual void on_chem_reaction( Reagents S = null ) {
			return;
		}

		// Function from file: seeds.dm
		public virtual ByTable get_analyzer_text(  ) {
			return null;
		}

		// Function from file: hydroponics.dm
		public virtual ByTable harvest( Mob user = null ) {
			user = user ?? Task13.User;

			Ent_Static parent = null;
			double t_amount = 0;
			ByTable result = null;
			Ent_Static output_loc = null;
			dynamic product_name = null;
			dynamic t_prod = null;

			parent = this.loc;
			t_amount = 0;
			result = new ByTable();
			output_loc = ( parent.Adjacent( user ) ? user.loc : parent.loc );

			while (t_amount < this.getYield()) {
				t_prod = Lang13.Call( this.product, output_loc, this.potency );
				result.Add( t_prod );

				if ( !Lang13.Bool( t_prod ) ) {
					return null;
				}
				t_prod.lifespan = this.lifespan;
				t_prod.endurance = this.endurance;
				t_prod.maturation = this.maturation;
				t_prod.production = this.production;
				t_prod.yield = this.yield;
				t_prod.potency = this.potency;
				t_prod.plant_type = this.plant_type;
				t_amount++;
				product_name = t_prod.name;
			}

			if ( this.getYield() >= 1 ) {
				GlobalFuncs.feedback_add_details( "food_harvested", "" + product_name + "|" + this.getYield() );
			}
			((dynamic)parent).update_tray();
			return result;
		}

		// Function from file: hydroponics.dm
		public double getYield(  ) {
			Ent_Static parent = null;

			parent = this.loc;

			if ( Lang13.Bool( ((dynamic)parent).yieldmod ) == false ) {
				return Num13.MinInt( this.yield, 1 );
			}
			return this.yield * Convert.ToDouble( ((dynamic)parent).yieldmod );
		}

	}

}