// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Rdconsole : Obj_Machinery_Computer {

		public Research files = null;
		public dynamic t_disk = null;
		public dynamic d_disk = null;
		public Obj_Machinery_RND linked_destroy = null;
		public Obj_Machinery_RND linked_lathe = null;
		public Obj_Machinery_RND linked_imprinter = null;
		public double? screen = 1;
		public int id = 0;
		public bool sync = true;
		public dynamic selected_category = null;
		public ByTable matching_designs = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "rdcomp";
			this.icon_keyboard = "rd_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Rdconsole);
			this.req_access = new ByTable(new object [] { 7 });
		}

		// Function from file: rdconsole.dm
		public Obj_Machinery_Computer_Rdconsole ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			Obj_Machinery_RND_Server_Centcom S = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.files = new Research(  );
			this.matching_designs = new ByTable();

			if ( !( this.id != 0 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_RND_Server_Centcom) )) {
					S = _a;
					
					S.initialize();
					break;
				}
			}
			return;
		}

		// Function from file: rdconsole.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			Tech T = null;
			Tech T2 = null;
			int b_type = 0;
			dynamic M = null;
			Design D = null;
			dynamic temp_tech = null;
			dynamic T3 = null;
			Tech F = null;
			dynamic coeff = null;
			Design D2 = null;
			dynamic temp_material = null;
			int c = 0;
			dynamic t = null;
			dynamic M2 = null;
			dynamic R = null;
			dynamic coeff2 = null;
			Design D3 = null;
			dynamic temp_material2 = null;
			int c2 = 0;
			dynamic t2 = null;
			dynamic M3 = null;
			int m_amount = 0;
			int g_amount = 0;
			int gold_amount = 0;
			int silver_amount = 0;
			int plasma_amount = 0;
			int uranium_amount = 0;
			int diamond_amount = 0;
			int bananium_amount = 0;
			Reagent R2 = null;
			dynamic coeff3 = null;
			Design D4 = null;
			dynamic temp_materials = null;
			bool check_materials = false;
			dynamic M4 = null;
			dynamic coeff4 = null;
			Design D5 = null;
			dynamic temp_materials2 = null;
			bool check_materials2 = false;
			dynamic M5 = null;
			Reagent R3 = null;
			Browser popup = null;

			((Mob)user).set_machine( this );
			dat = "";
			this.files.RefreshResearch();

			dynamic _a = this.screen; // Was a switch-case, sorry for the mess.
			if ( 2<=_a&&_a<=2.9 ) {
				
				if ( this.screen == 221 ) {
					
				} else if ( this.linked_destroy == null ) {
					this.screen = 2;
				} else if ( ((dynamic)this.linked_destroy).loaded_item == null ) {
					this.screen = 201;
				} else {
					this.screen = 2.2;
				}
			} else if ( 3<=_a&&_a<=3.9 ) {
				
				if ( this.linked_lathe == null ) {
					this.screen = 3;
				}
			} else if ( 4<=_a&&_a<=4.9 ) {
				
				if ( this.linked_imprinter == null ) {
					this.screen = 4;
				}
			}

			switch ((double?)( this.screen )) {
				case 0:
					dat += "<div class='statusDisplay'>Updating Database....</div>";
					break;
				case 0.1:
					dat += "<div class='statusDisplay'>Processing and Updating Database...</div>";
					break;
				case 0.2:
					dat += "<div class='statusDisplay'>SYSTEM LOCKED</div>";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lock=1.6'>Unlock</A>" ).ToString();
					break;
				case 0.3:
					dat += "<div class='statusDisplay'>Constructing Prototype. Please Wait...</div>";
					break;
				case 0.4:
					dat += "<div class='statusDisplay'>Imprinting Circuit. Please Wait...</div>";
					break;
				case 1:
					dat += "<div class='statusDisplay'>";
					dat += "<h3>Main Menu:</h3><BR>";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.1'>Current Research Levels</A><BR>" ).ToString();

					if ( Lang13.Bool( this.t_disk ) ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.2'>Disk Operations</A><BR>" ).ToString();
					} else if ( Lang13.Bool( this.d_disk ) ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.4'>Disk Operations</A><BR>" ).ToString();
					} else {
						dat += "<span class='linkOff'>Disk Operations</span><BR>";
					}

					if ( this.linked_destroy != null ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=2.2'>Destructive Analyzer Menu</A><BR>" ).ToString();
					} else {
						dat += "<span class='linkOff'>Destructive Analyzer Menu</span><BR>";
					}

					if ( this.linked_lathe != null ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.1'>Protolathe Construction Menu</A><BR>" ).ToString();
					} else {
						dat += "<span class='linkOff'>Protolathe Construction Menu</span><BR>";
					}

					if ( this.linked_imprinter != null ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.1'>Circuit Construction Menu</A><BR>" ).ToString();
					} else {
						dat += "<span class='linkOff'>Circuit Construction Menu</span><BR>";
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.6'>Settings</A>" ).ToString();
					dat += "</div>";
					break;
				case 1.1:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += "<h3>Current Research Levels:</h3><BR><div class='statusDisplay'>";

					foreach (dynamic _b in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
						T = _b;
						
						dat += "" + T.name + "<BR>";
						dat += "* Level: " + T.level + "<BR>";
						dat += "* Summary: " + T.desc + "<HR>";
					}
					dat += "</div>";
					break;
				case 1.2:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>" ).ToString();
					dat += "<div class='statusDisplay'>Technology Data Disk Contents:<BR><BR>";

					if ( this.t_disk.stored == null ) {
						dat += "The disk has no data stored on it.</div>";
						dat += "Operations: ";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.3'>Load Tech to Disk</A>" ).ToString();
					} else {
						dat += "Name: " + this.t_disk.stored.name + "<BR>";
						dat += "Level: " + this.t_disk.stored.level + "<BR>";
						dat += "Description: " + this.t_disk.stored.desc + "</div>";
						dat += "Operations: ";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";updt_tech=1'>Upload to Database</A>" ).ToString();
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";clear_tech=1'>Clear Disk</A>" ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";eject_tech=1'>Eject Disk</A>" ).ToString();
					break;
				case 121:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.2'>Return to Disk Operations</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Load Technology to Disk:</h3><BR>";

					foreach (dynamic _c in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
						T2 = _c;
						
						dat += "" + T2.name + " ";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";copy_tech=1;copy_tech_ID=" ).item( T2.id ).str( "'>Copy to Disk</A><BR>" ).ToString();
					}
					dat += "</div>";
					break;
				case 131:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><div class='statusDisplay'>" ).ToString();

					if ( this.d_disk.blueprint == null ) {
						dat += "The disk has no data stored on it.</div>";
						dat += "Operations: ";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.5'>Load Design to Disk</A>" ).ToString();
					} else {
						dat += "Name: " + this.d_disk.blueprint.name + "<BR>";
						dat += "Level: " + this.d_disk.blueprint.reliability + "<BR>";
						b_type = this.d_disk.blueprint.build_type;

						if ( b_type != 0 ) {
							dat += "Lathe Types:<BR>";

							if ( ( b_type & 1 ) != 0 ) {
								dat += "Circuit Imprinter<BR>";
							}

							if ( ( b_type & 2 ) != 0 ) {
								dat += "Proto-lathe<BR>";
							}

							if ( ( b_type & 4 ) != 0 ) {
								dat += "Auto-lathe<BR>";
							}

							if ( ( b_type & 16 ) != 0 ) {
								dat += "Mech Fabricator<BR>";
							}
						}
						dat += "Required Materials:<BR>";

						foreach (dynamic _d in Lang13.Enumerate( this.d_disk.blueprint.materials )) {
							M = _d;
							

							if ( String13.SubStr( M, 1, 2 ) == "$" ) {
								dat += "* " + String13.SubStr( M, 2, 0 ) + " x " + this.d_disk.blueprint.materials[M] + "<BR>";
							} else {
								dat += "* " + M + " x " + this.d_disk.blueprint.materials[M] + "<BR>";
							}
						}
						dat += "</div>Operations: ";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";updt_design=1'>Upload to Database</A>" ).ToString();
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";clear_design=1'>Clear Disk</A>" ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";eject_design=1'>Eject Disk</A>" ).ToString();
					break;
				case 1.5:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.4'>Return to Disk Operations</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Load Design to Disk:</h3><BR>";

					foreach (dynamic _e in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
						D = _e;
						
						dat += "" + D.name + " ";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";copy_design=1;copy_design_ID=" ).item( D.id ).str( "'>Copy to Disk</A><BR>" ).ToString();
					}
					dat += "</div>";
					break;
				case 1.6:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>R&D Console Setting:</h3><BR>";

					if ( this.sync ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";sync=1'>Sync Database with Network</A><BR>" ).ToString();
						dat += "<span class='linkOn'>Connect to Research Network</span><BR>";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";togglesync=1'>Disconnect from Research Network</A><BR>" ).ToString();
					} else {
						dat += "<span class='linkOff'>Sync Database with Network</span><BR>";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";togglesync=1'>Connect to Research Network</A><BR>" ).ToString();
						dat += "<span class='linkOn'>Disconnect from Research Network</span><BR>";
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.7'>Device Linkage Menu</A><BR>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lock=0.2'>Lock Console</A><BR>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";reset=1'>Reset R&D Database</A></div>" ).ToString();
					break;
				case 1.7:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.6'>Settings Menu</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>R&D Console Device Linkage Menu:</h3><BR>";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";find_device=1'>Re-sync with Nearby Devices</A><BR><BR>" ).ToString();
					dat += "<h3>Linked Devices:</h3><BR>";

					if ( this.linked_destroy != null ) {
						dat += new Txt( "* Destructive Analyzer <A href='?src=" ).Ref( this ).str( ";disconnect=destroy'>Disconnect</A><BR>" ).ToString();
					} else {
						dat += "* No Destructive Analyzer Linked<BR>";
					}

					if ( this.linked_lathe != null ) {
						dat += new Txt( "* Protolathe <A href='?src=" ).Ref( this ).str( ";disconnect=lathe'>Disconnect</A><BR>" ).ToString();
					} else {
						dat += "* No Protolathe Linked<BR>";
					}

					if ( this.linked_imprinter != null ) {
						dat += new Txt( "* Circuit Imprinter <A href='?src=" ).Ref( this ).str( ";disconnect=imprinter'>Disconnect</A><BR>" ).ToString();
					} else {
						dat += "* No Circuit Imprinter Linked<BR>";
					}
					dat += "</div>";
					break;
				case 2:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += "<div class='statusDisplay'>NO DESTRUCTIVE ANALYZER LINKED TO CONSOLE</div>";
					break;
				case 201:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += "<div class='statusDisplay'>No Item Loaded. Standing-by...</div>";
					break;
				case 2.2:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Deconstruction Menu</h3><BR>";
					dat += "Name: " + ((dynamic)this.linked_destroy).loaded_item.name + "<BR>";
					dat += "Reliability: " + ((dynamic)this.linked_destroy).loaded_item.reliability + "<BR>";
					dat += "Origin Tech:<BR>";
					temp_tech = ((dynamic)this.linked_destroy).ConvertReqString2List( ((dynamic)this.linked_destroy).loaded_item.origin_tech );

					foreach (dynamic _g in Lang13.Enumerate( temp_tech )) {
						T3 = _g;
						
						dat += "* " + GlobalFuncs.CallTechName( T3 ) + " " + temp_tech[T3];

						foreach (dynamic _f in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
							F = _f;
							

							if ( F.name == GlobalFuncs.CallTechName( T3 ) ) {
								dat += " (Current: " + F.level + ")";
								break;
							}
						}
						dat += "<BR>";
					}
					dat += "</div>Options: ";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";deconstruct=1'>Deconstruct Item</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";eject_item=1'>Eject Item</A>" ).ToString();
					break;
				case 221:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += "<div class='statusDisplay'>Item is neither reliable enough or broken enough to learn from.</div>";
					break;
				case 3:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>" ).ToString();
					dat += "<div class='statusDisplay'>NO PROTOLATHE LINKED TO CONSOLE</div>";
					break;
				case 301:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A> " ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.2'>Material Storage</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.3'>Chemical Storage</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Protolathe Menu:</h3><BR>";
					dat += "<B>Material Amount:</B> " + ((dynamic)this.linked_lathe).materials.total_amount + " / " + ((dynamic)this.linked_lathe).materials.max_amount + "<BR>";
					dat += "<B>Chemical Volume:</B> " + this.linked_lathe.reagents.total_volume + " / " + this.linked_lathe.reagents.maximum_volume + "<BR>";
					dat += new Txt( "<form name='search' action='?src=" ).Ref( this ).str( "'><input type='hidden' name='src' value='" ).Ref( this ).str( "'><input type='hidden' name='search' value='to_search'><input type='hidden' name='type' value='proto'><input type='text' name='to_search'><input type='submit' value='Search'></form><HR>" ).ToString();
					dat += this.list_categories( ((dynamic)this.linked_lathe).categories, 3.15 );
					break;
				case 3.15:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.1'>Protolathe Menu</A>" ).ToString();
					dat += "<div class='statusDisplay'><h3>Browsing " + this.selected_category + ":</h3><BR>";
					dat += "<B>Material Amount:</B> " + ((dynamic)this.linked_lathe).materials.total_amount + " / " + ((dynamic)this.linked_lathe).materials.max_amount + "<BR>";
					dat += "<B>Chemical Volume:</B> " + this.linked_lathe.reagents.total_volume + " / " + this.linked_lathe.reagents.maximum_volume + "<HR>";
					coeff = ((dynamic)this.linked_lathe).efficiency_coeff;

					foreach (dynamic _j in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
						D2 = _j;
						

						if ( !D2.category.Contains( this.selected_category ) || !( ( D2.build_type & 2 ) != 0 ) ) {
							continue;
						}
						temp_material = null;
						c = 50;
						t = null;

						foreach (dynamic _h in Lang13.Enumerate( D2.materials )) {
							M2 = _h;
							
							t = ((dynamic)this.linked_lathe).check_mat( D2, M2 );
							temp_material += " | ";

							if ( Convert.ToDouble( t ) < 1 ) {
								temp_material += "<span class='bad'>" + D2.materials[M2] / coeff + " " + GlobalFuncs.CallMaterialName( M2 ) + "</span>";
							} else {
								temp_material += " " + D2.materials[M2] / coeff + " " + GlobalFuncs.CallMaterialName( M2 );
							}
							c = Num13.MinInt( c, Convert.ToInt32( t ) );
						}

						foreach (dynamic _i in Lang13.Enumerate( D2.reagents )) {
							R = _i;
							
							t = ((dynamic)this.linked_lathe).check_mat( D2, R );
							temp_material += " | ";

							if ( Convert.ToDouble( t ) < 1 ) {
								temp_material += "<span class='bad'>" + D2.reagents[R] / coeff + " " + GlobalFuncs.CallMaterialName( R ) + "</span>";
							} else {
								temp_material += " " + D2.reagents[R] / coeff + " " + GlobalFuncs.CallMaterialName( R );
							}
							c = Num13.MinInt( c, Convert.ToInt32( t ) );
						}

						if ( c >= 1 ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D2.id ).str( ";amount=1'>" ).item( D2.name ).str( "</A>" ).ToString();

							if ( c >= 5 ) {
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D2.id ).str( ";amount=5'>x5</A>" ).ToString();
							}

							if ( c >= 10 ) {
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D2.id ).str( ";amount=10'>x10</A>" ).ToString();
							}
							dat += "" + temp_material;
						} else {
							dat += "<span class='linkOff'>" + D2.name + "</span>" + temp_material;
						}
						dat += "<BR>";
					}
					dat += "</div>";
					break;
				case 3.17:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.1'>Protolathe Menu</A>" ).ToString();
					dat += "<div class='statusDisplay'><h3>Search results:</h3><BR>";
					dat += "<B>Material Amount:</B> " + ((dynamic)this.linked_lathe).materials.total_amount + " / " + ((dynamic)this.linked_lathe).materials.max_amount + "<BR>";
					dat += "<B>Chemical Volume:</B> " + this.linked_lathe.reagents.total_volume + " / " + this.linked_lathe.reagents.maximum_volume + "<HR>";
					coeff2 = ((dynamic)this.linked_lathe).efficiency_coeff;

					foreach (dynamic _l in Lang13.Enumerate( this.matching_designs, typeof(Design) )) {
						D3 = _l;
						
						temp_material2 = null;
						c2 = 50;
						t2 = null;

						foreach (dynamic _k in Lang13.Enumerate( D3.materials )) {
							M3 = _k;
							
							t2 = ((dynamic)this.linked_lathe).check_mat( D3, M3 );
							temp_material2 += " | ";

							if ( Convert.ToDouble( t2 ) < 1 ) {
								temp_material2 += "<span class='bad'>" + D3.materials[M3] / coeff2 + " " + GlobalFuncs.CallMaterialName( M3 ) + "</span>";
							} else {
								temp_material2 += " " + D3.materials[M3] / coeff2 + " " + GlobalFuncs.CallMaterialName( M3 );
							}
							c2 = Num13.MinInt( c2, Convert.ToInt32( t2 ) );
						}

						if ( c2 >= 1 ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D3.id ).str( ";amount=1'>" ).item( D3.name ).str( "</A>" ).ToString();

							if ( c2 >= 5 ) {
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D3.id ).str( ";amount=5'>x5</A>" ).ToString();
							}

							if ( c2 >= 10 ) {
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";build=" ).item( D3.id ).str( ";amount=10'>x10</A>" ).ToString();
							}
							dat += "" + temp_material2;
						} else {
							dat += "<span class='linkOff'>" + D3.name + "</span>" + temp_material2;
						}
						dat += "<BR>";
					}
					dat += "</div>";
					break;
				case 3.2:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.1'>Protolathe Menu</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Material Storage:</h3><BR><HR>";
					m_amount = ((MaterialContainer)((dynamic)this.linked_lathe).materials).amount( "$metal" ) ?1:0;
					dat += "* " + m_amount + " of Metal: ";

					if ( m_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=metal;lathe_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( m_amount >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=metal;lathe_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( m_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=metal;lathe_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					g_amount = ((MaterialContainer)((dynamic)this.linked_lathe).materials).amount( "$glass" ) ?1:0;
					dat += "* " + g_amount + " of Glass: ";

					if ( g_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=glass;lathe_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( g_amount >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=glass;lathe_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( g_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=glass;lathe_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					gold_amount = ((MaterialContainer)((dynamic)this.linked_lathe).materials).amount( "$gold" ) ?1:0;
					dat += "* " + gold_amount + " of Gold: ";

					if ( gold_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=gold;lathe_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( gold_amount >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=gold;lathe_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( gold_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=gold;lathe_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					silver_amount = ((MaterialContainer)((dynamic)this.linked_lathe).materials).amount( "$silver" ) ?1:0;
					dat += "* " + silver_amount + " of Silver: ";

					if ( silver_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=silver;lathe_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( silver_amount >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=silver;lathe_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( silver_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=silver;lathe_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					plasma_amount = ((MaterialContainer)((dynamic)this.linked_lathe).materials).amount( "$plasma" ) ?1:0;
					dat += "* " + plasma_amount + " of Solid Plasma: ";

					if ( plasma_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=plasma;lathe_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( plasma_amount >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=plasma;lathe_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( plasma_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=plasmalathe_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					uranium_amount = ((MaterialContainer)((dynamic)this.linked_lathe).materials).amount( "$uranium" ) ?1:0;
					dat += "* " + uranium_amount + " of Uranium: ";

					if ( uranium_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=uranium;lathe_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( uranium_amount >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=uranium;lathe_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( uranium_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=uranium;lathe_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					diamond_amount = ((MaterialContainer)((dynamic)this.linked_lathe).materials).amount( "$diamond" ) ?1:0;
					dat += "* " + diamond_amount + " of Diamond: ";

					if ( diamond_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=diamond;lathe_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( diamond_amount >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=diamond;lathe_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( diamond_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=diamond;lathe_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					bananium_amount = ((MaterialContainer)((dynamic)this.linked_lathe).materials).amount( "$bananium" ) ?1:0;
					dat += "* " + bananium_amount + " of Bananium: ";

					if ( bananium_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=clown;lathe_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( bananium_amount >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=clown;lathe_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( bananium_amount >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";lathe_ejectsheet=clown;lathe_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "</div>";
					break;
				case 321:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=3.1'>Protolathe Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";disposeallP=1'>Disposal All Chemicals in Storage</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Chemical Storage:</h3><BR><HR>";

					foreach (dynamic _m in Lang13.Enumerate( this.linked_lathe.reagents.reagent_list, typeof(Reagent) )) {
						R2 = _m;
						
						dat += "" + R2.name + ": " + R2.volume;
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";disposeP=" ).item( R2.id ).str( "'>Purge</A><BR>" ).ToString();
					}
					break;
				case 4:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A><HR>" ).ToString();
					dat += "<div class='statusDisplay'>NO CIRCUIT IMPRINTER LINKED TO CONSOLE</div>";
					break;
				case 401:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.3'>Material Storage</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.2'>Chemical Storage</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Circuit Imprinter Menu:</h3><BR>";
					dat += "Material Amount: " + ((dynamic)this.linked_imprinter).TotalMaterials() + "<BR>";
					dat += "Chemical Volume: " + this.linked_imprinter.reagents.total_volume + "<HR>";
					dat += new Txt( "<form name='search' action='?src=" ).Ref( this ).str( "'><input type='hidden' name='src' value='" ).Ref( this ).str( "'><input type='hidden' name='search' value='to_search'><input type='hidden' name='type' value='imprint'><input type='text' name='to_search'><input type='submit' value='Search'></form><HR>" ).ToString();
					dat += this.list_categories( ((dynamic)this.linked_imprinter).categories, 4.15 );
					break;
				case 4.15:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.1'>Circuit Imprinter Menu</A>" ).ToString();
					dat += "<div class='statusDisplay'><h3>Browsing " + this.selected_category + ":</h3><BR>";
					dat += "Material Amount: " + ((dynamic)this.linked_imprinter).TotalMaterials() + "<BR>";
					dat += "Chemical Volume: " + this.linked_imprinter.reagents.total_volume + "<HR>";
					coeff3 = ((dynamic)this.linked_imprinter).efficiency_coeff;

					foreach (dynamic _o in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
						D4 = _o;
						

						if ( !D4.category.Contains( this.selected_category ) || !( ( D4.build_type & 1 ) != 0 ) ) {
							continue;
						}
						temp_materials = null;
						check_materials = true;

						foreach (dynamic _n in Lang13.Enumerate( D4.materials )) {
							M4 = _n;
							
							temp_materials += " | ";

							if ( !Lang13.Bool( ((dynamic)this.linked_imprinter).check_mat( D4, M4 ) ) ) {
								check_materials = false;
								temp_materials += " <span class='bad'>" + D4.materials[M4] / coeff3 + " " + GlobalFuncs.CallMaterialName( M4 ) + "</span>";
							} else {
								temp_materials += " " + D4.materials[M4] / coeff3 + " " + GlobalFuncs.CallMaterialName( M4 );
							}
						}

						if ( check_materials ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprint=" ).item( D4.id ).str( "'>" ).item( D4.name ).str( "</A>" ).item( temp_materials ).str( "<BR>" ).ToString();
						} else {
							dat += "<span class='linkOff'>" + D4.name + "</span>" + temp_materials + "<BR>";
						}
					}
					dat += "</div>";
					break;
				case 4.17:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.1'>Circuit Imprinter Menu</A>" ).ToString();
					dat += "<div class='statusDisplay'><h3>Search results:</h3><BR>";
					dat += "Material Amount: " + ((dynamic)this.linked_imprinter).TotalMaterials() + "<BR>";
					dat += "Chemical Volume: " + this.linked_imprinter.reagents.total_volume + "<HR>";
					coeff4 = ((dynamic)this.linked_imprinter).efficiency_coeff;

					foreach (dynamic _q in Lang13.Enumerate( this.matching_designs, typeof(Design) )) {
						D5 = _q;
						
						temp_materials2 = null;
						check_materials2 = true;

						foreach (dynamic _p in Lang13.Enumerate( D5.materials )) {
							M5 = _p;
							
							temp_materials2 += " | ";

							if ( !Lang13.Bool( ((dynamic)this.linked_imprinter).check_mat( D5, M5 ) ) ) {
								check_materials2 = false;
								temp_materials2 += " <span class='bad'>" + D5.materials[M5] / coeff4 + " " + GlobalFuncs.CallMaterialName( M5 ) + "</span>";
							} else {
								temp_materials2 += " " + D5.materials[M5] / coeff4 + " " + GlobalFuncs.CallMaterialName( M5 );
							}
						}

						if ( check_materials2 ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprint=" ).item( D5.id ).str( "'>" ).item( D5.name ).str( "</A>" ).item( temp_materials2 ).str( "<BR>" ).ToString();
						} else {
							dat += "<span class='linkOff'>" + D5.name + "</span>" + temp_materials2 + "<BR>";
						}
					}
					dat += "</div>";
					break;
				case 411:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.1'>Imprinter Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";disposeallI=1'>Disposal All Chemicals in Storage</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Chemical Storage:</h3><BR><HR>";

					foreach (dynamic _r in Lang13.Enumerate( this.linked_imprinter.reagents.reagent_list, typeof(Reagent) )) {
						R3 = _r;
						
						dat += "" + R3.name + ": " + R3.volume;
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";disposeI=" ).item( R3.id ).str( "'>Purge</A><BR>" ).ToString();
					}
					break;
				case 4.3:
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=1.0'>Main Menu</A>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";menu=4.1'>Circuit Imprinter Menu</A><div class='statusDisplay'>" ).ToString();
					dat += "<h3>Material Storage:</h3><BR><HR>";
					dat += "* " + ((dynamic)this.linked_imprinter).g_amount + "  glass: ";

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).g_amount ) >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=glass;imprinter_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).g_amount ) >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=glass;imprinter_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).g_amount ) >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=glass;imprinter_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					dat += "* " + ((dynamic)this.linked_imprinter).gold_amount + " gold: ";

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).gold_amount ) >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=gold;imprinter_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).gold_amount ) >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=gold;imprinter_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).gold_amount ) >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=gold;imprinter_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "<BR>";
					dat += "* " + ((dynamic)this.linked_imprinter).diamond_amount + " diamond: ";

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).diamond_amount ) >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=diamond;imprinter_ejectsheet_amt=1'>Eject</A> " ).ToString();
					}

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).diamond_amount ) >= 10000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=diamond;imprinter_ejectsheet_amt=5'>5x</A> " ).ToString();
					}

					if ( Convert.ToDouble( ((dynamic)this.linked_imprinter).diamond_amount ) >= 2000 ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";imprinter_ejectsheet=diamond;imprinter_ejectsheet_amt=50'>All</A>" ).ToString();
					}
					dat += "</div>";
					break;
			}
			popup = new Browser( user, "rndconsole", this.name, 460, 550 );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: rdconsole.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: rdconsole.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? temp_screen = null;
			Tech T = null;
			Design D = null;
			dynamic choice = null;
			dynamic temp_tech = null;
			dynamic T2 = null;
			dynamic material = null;
			Obj I = null;
			dynamic M = null;
			Obj S = null;
			Obj_Machinery_RND_Server S2 = null;
			bool server_processed = false;
			Tech T3 = null;
			Design D2 = null;
			Tech T4 = null;
			Design D3 = null;
			bool? coeff = null;
			bool g2g = false;
			Design being_built = null;
			Design D4 = null;
			double power = 0;
			double? amount = null;
			double? old_screen = null;
			dynamic M2 = null;
			string key = null;
			bool enough_materials = false;
			ByTable efficient_mats = null;
			dynamic MAT = null;
			dynamic R = null;
			dynamic R2 = null;
			dynamic P = null;
			int R3 = 0;
			bool already_logged = false;
			double? i = null;
			dynamic new_item = null;
			dynamic coeff2 = null;
			bool g2g2 = false;
			Design being_built2 = null;
			Design D5 = null;
			double power2 = 0;
			double? old_screen2 = null;
			dynamic M3 = null;
			dynamic M4 = null;
			dynamic P2 = null;
			int R4 = 0;
			dynamic new_item2 = null;
			double? desired_num_sheets = null;
			string MAT2 = null;
			double? desired_num_sheets2 = null;
			string res_amount = null;
			Type type = null;
			dynamic sheet = null;
			int available_num_sheets = 0;
			string choice2 = null;
			int? compare = null;
			Design D6 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}
			this.add_fingerprint( Task13.User );
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["menu"] ) ) {
				temp_screen = String13.ParseNumber( href_list["menu"] );
				this.screen = temp_screen;
			}

			if ( Lang13.Bool( href_list["category"] ) ) {
				this.selected_category = href_list["category"];
			} else if ( Lang13.Bool( href_list["updt_tech"] ) ) {
				this.screen = 0;
				Task13.Schedule( 50, (Task13.Closure)(() => {
					this.screen = 1.2;
					this.files.AddTech2Known( this.t_disk.stored );
					this.updateUsrDialog();
					this.griefProtection();
					return;
				}));
			} else if ( Lang13.Bool( href_list["clear_tech"] ) ) {
				
				if ( Lang13.Bool( this.t_disk ) ) {
					this.t_disk.stored = null;
				}
			} else if ( Lang13.Bool( href_list["eject_tech"] ) ) {
				
				if ( Lang13.Bool( this.t_disk ) ) {
					this.t_disk.loc = this.loc;
					this.t_disk = null;
				}
				this.screen = 1;
			} else if ( Lang13.Bool( href_list["copy_tech"] ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
					T = _a;
					

					if ( href_list["copy_tech_ID"] == T.id ) {
						this.t_disk.stored = T;
						break;
					}
				}
				this.screen = 1.2;
			} else if ( Lang13.Bool( href_list["updt_design"] ) ) {
				this.screen = 0;
				Task13.Schedule( 50, (Task13.Closure)(() => {
					this.screen = 131;
					this.files.AddDesign2Known( this.d_disk.blueprint );
					this.updateUsrDialog();
					this.griefProtection();
					return;
				}));
			} else if ( Lang13.Bool( href_list["clear_design"] ) ) {
				
				if ( Lang13.Bool( this.d_disk ) ) {
					this.d_disk.blueprint = null;
				}
			} else if ( Lang13.Bool( href_list["eject_design"] ) ) {
				
				if ( Lang13.Bool( this.d_disk ) ) {
					this.d_disk.loc = this.loc;
					this.d_disk = null;
				}
				this.screen = 1;
			} else if ( Lang13.Bool( href_list["copy_design"] ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
					D = _b;
					

					if ( href_list["copy_design_ID"] == D.id ) {
						this.d_disk.blueprint = D;
						break;
					}
				}
				this.screen = 131;
			} else if ( Lang13.Bool( href_list["eject_item"] ) ) {
				
				if ( this.linked_destroy != null ) {
					
					if ( this.linked_destroy.busy ) {
						Task13.User.WriteMsg( "<span class='danger'>The destructive analyzer is busy at the moment.</span>" );
					} else if ( Lang13.Bool( ((dynamic)this.linked_destroy).loaded_item ) ) {
						((dynamic)this.linked_destroy).loaded_item.loc = this.linked_destroy.loc;
						((dynamic)this.linked_destroy).loaded_item = null;
						this.linked_destroy.icon_state = "d_analyzer";
						this.screen = 201;
					}
				}
			} else if ( Lang13.Bool( href_list["deconstruct"] ) ) {
				
				if ( this.linked_destroy != null ) {
					
					if ( this.linked_destroy.busy ) {
						Task13.User.WriteMsg( "<span class='danger'>The destructive analyzer is busy at the moment.</span>" );
					} else {
						choice = Interface13.Input( "Proceeding will destroy loaded item.", null, null, null, new ByTable(new object [] { "Proceed", "Cancel" }), InputType.Any );

						if ( choice == "Cancel" || !( this.linked_destroy != null ) ) {
							return null;
						}
						this.linked_destroy.busy = true;
						this.screen = 0.1;
						this.updateUsrDialog();
						Icon13.Flick( "d_analyzer_process", this.linked_destroy );
						Task13.Schedule( 24, (Task13.Closure)(() => {
							
							if ( this.linked_destroy != null ) {
								this.linked_destroy.busy = false;

								if ( !this.linked_destroy.hacked ) {
									
									if ( !Lang13.Bool( ((dynamic)this.linked_destroy).loaded_item ) ) {
										Task13.User.WriteMsg( "<span class='danger'>The destructive analyzer appears to be empty.</span>" );
										this.screen = 1;
										return;
									}

									if ( Convert.ToDouble( ((dynamic)this.linked_destroy).loaded_item.reliability ) >= 99 - Convert.ToDouble( ((dynamic)this.linked_destroy).decon_mod * 3 ) || ((dynamic)this.linked_destroy).loaded_item.crit_fail ) {
										temp_tech = ((dynamic)this.linked_destroy).ConvertReqString2List( ((dynamic)this.linked_destroy).loaded_item.origin_tech );

										foreach (dynamic _c in Lang13.Enumerate( temp_tech )) {
											T2 = _c;
											

											if ( Rand13.PercentChance( Convert.ToInt32( ((dynamic)this.linked_destroy).loaded_item.reliability ) ) ) {
												this.files.UpdateTech( T2, Convert.ToInt32( temp_tech[T2] ) );
											}
										}
										this.files.UpdateDesigns( ((dynamic)this.linked_destroy).loaded_item, temp_tech );
										this.screen = 1;
									} else {
										this.screen = 221;
									}

									if ( this.linked_lathe != null ) {
										
										foreach (dynamic _d in Lang13.Enumerate( ((dynamic)this.linked_destroy).loaded_item.materials )) {
											material = _d;
											
											((MaterialContainer)((dynamic)this.linked_lathe).materials).insert_amount( Num13.MinInt( Convert.ToInt32( ((dynamic)this.linked_lathe).materials.max_amount - ((dynamic)this.linked_lathe).materials.total_amount ), Convert.ToInt32( ((dynamic)this.linked_destroy).loaded_item.materials[material] * ( ((dynamic)this.linked_destroy).decon_mod / 10 ) ) ), material );
										}
										GlobalFuncs.feedback_add_details( "item_deconstructed", "" + ((dynamic)this.linked_destroy).loaded_item.type );
									}
									((dynamic)this.linked_destroy).loaded_item = null;
								} else {
									this.screen = 1;
								}

								foreach (dynamic _f in Lang13.Enumerate( this.linked_destroy.contents, typeof(Obj) )) {
									I = _f;
									

									foreach (dynamic _e in Lang13.Enumerate( I.contents )) {
										M = _e;
										
										((Mob)M).death();
									}

									if ( I is Obj_Item_Stack_Sheet ) {
										S = I;

										if ( Convert.ToDouble( ((dynamic)S).amount ) > 1 ) {
											((dynamic)S).amount--;
											((dynamic)this.linked_destroy).loaded_item = S;
										} else {
											GlobalFuncs.qdel( S );
											this.linked_destroy.icon_state = "d_analyzer";
										}
									} else if ( !this.linked_destroy.component_parts.Contains( I ) ) {
										GlobalFuncs.qdel( I );
										this.linked_destroy.icon_state = "d_analyzer";
									}
								}
								this.f_use_power( 250 );
								this.updateUsrDialog();
							}
							return;
						}));
					}
				}
			} else if ( Lang13.Bool( href_list["lock"] ) ) {
				
				if ( this.allowed( Task13.User ) ) {
					this.screen = String13.ParseNumber( href_list["lock"] );
				} else {
					Task13.User.WriteMsg( "Unauthorized Access." );
				}
			} else if ( Lang13.Bool( href_list["sync"] ) ) {
				this.screen = 0;

				if ( !this.sync ) {
					Task13.User.WriteMsg( "<span class='danger'>You must connect to the network first!</span>" );
				} else {
					this.griefProtection();
					Task13.Schedule( 30, (Task13.Closure)(() => {
						
						if ( this != null ) {
							
							foreach (dynamic _k in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_RND_Server) )) {
								S2 = _k;
								
								server_processed = false;

								if ( S2.disabled ) {
									continue;
								}

								if ( S2.id_with_upload.Contains( this.id ) || S2 is Obj_Machinery_RND_Server_Centcom ) {
									
									foreach (dynamic _g in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
										T3 = _g;
										
										S2.files.AddTech2Known( T3 );
									}

									foreach (dynamic _h in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
										D2 = _h;
										
										S2.files.AddDesign2Known( D2 );
									}
									S2.files.RefreshResearch();
									server_processed = true;
								}

								if ( S2.id_with_download.Contains( this.id ) && !( S2 is Obj_Machinery_RND_Server_Centcom ) || S2.hacked ) {
									
									foreach (dynamic _i in Lang13.Enumerate( S2.files.known_tech, typeof(Tech) )) {
										T4 = _i;
										
										this.files.AddTech2Known( T4 );
									}

									foreach (dynamic _j in Lang13.Enumerate( S2.files.known_designs, typeof(Design) )) {
										D3 = _j;
										
										this.files.AddDesign2Known( D3 );
									}
									this.files.RefreshResearch();
									server_processed = true;
								}

								if ( !( S2 is Obj_Machinery_RND_Server_Centcom ) && server_processed ) {
									S2.produce_heat( 100 );
								}
							}
							this.screen = 1.6;
							this.updateUsrDialog();
						}
						return;
					}));
				}
			} else if ( Lang13.Bool( href_list["togglesync"] ) ) {
				this.sync = !this.sync;
			} else if ( Lang13.Bool( href_list["build"] ) ) {
				coeff = null;

				if ( this.linked_lathe != null ) {
					coeff = Lang13.BoolNullable( ((dynamic)this.linked_lathe).efficiency_coeff );
				} else {
					coeff = true;
				}
				g2g = true;

				if ( this.linked_lathe != null ) {
					being_built = null;

					foreach (dynamic _l in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
						D4 = _l;
						

						if ( D4.id == href_list["build"] ) {
							being_built = D4;
							break;
						}
					}

					if ( being_built != null ) {
						power = 2000;
						amount = String13.ParseNumber( href_list["amount"] );
						old_screen = this.screen;
						amount = Num13.MaxInt( 1, Num13.MinInt( 10, ((int)( amount ??0 )) ) );

						foreach (dynamic _m in Lang13.Enumerate( being_built.materials )) {
							M2 = _m;
							
							power += Num13.Floor( Convert.ToDouble( being_built.materials[M2] * amount / 5 ) );
						}
						power = Num13.MaxInt( 2000, ((int)( power )) );
						this.screen = 0.3;

						if ( this.linked_lathe.busy ) {
							g2g = false;
						}
						key = Task13.User.key;

						if ( !( ( being_built.build_type & 2 ) != 0 ) ) {
							g2g = false;
							GlobalFuncs.message_admins( "Protolathe exploit attempted by " + GlobalFuncs.key_name( Task13.User, Task13.User.client ) + "!" );
						}

						if ( g2g ) {
							enough_materials = true;
							this.linked_lathe.busy = true;
							Icon13.Flick( "protolathe_n", this.linked_lathe );
							this.f_use_power( power );
							efficient_mats = new ByTable();

							foreach (dynamic _n in Lang13.Enumerate( being_built.materials )) {
								MAT = _n;
								
								efficient_mats[MAT] = being_built.materials[MAT] / coeff;
							}

							if ( !((MaterialContainer)((dynamic)this.linked_lathe).materials).has_materials( efficient_mats, amount ) ) {
								this.visible_message( "<span class='notice'>The " + this.name + " beeps, \"Not enough materials to complete prototype.\"</span>" );
								enough_materials = false;
								g2g = false;
							} else {
								
								foreach (dynamic _o in Lang13.Enumerate( being_built.reagents )) {
									R = _o;
									

									if ( !Lang13.Bool( this.linked_lathe.reagents.has_reagent( R, Lang13.DoubleNullable( being_built.reagents[R] / coeff ) ) ) ) {
										this.visible_message( "<span class='notice'>The " + this.name + " beeps, \"Not enough reagents to complete prototype.\"</span>" );
										enough_materials = false;
										g2g = false;
									}
								}
							}

							if ( enough_materials ) {
								((MaterialContainer)((dynamic)this.linked_lathe).materials).use_amount( efficient_mats, amount );

								foreach (dynamic _p in Lang13.Enumerate( being_built.reagents )) {
									R2 = _p;
									
									this.linked_lathe.reagents.remove_reagent( R2, being_built.reagents[R2] / coeff );
								}
							}
							P = being_built.build_path;
							R3 = being_built.reliability;
							Task13.Schedule( ((int)( ( amount ??0) * 32 / ( coeff == true ?1:0) )), (Task13.Closure)(() => {
								
								if ( g2g ) {
									already_logged = false;
									i = null;
									i = 0;

									while (( i ??0) < ( amount ??0)) {
										new_item = Lang13.Call( P, this );

										if ( new_item.type == typeof(Obj_Item_Weapon_Storage_Backpack_Holding) ) {
											((Ent_Static)new_item).investigate_log( "built by " + key, "singulo" );
										}
										new_item.reliability = R3;
										new_item.materials = efficient_mats.Copy();

										if ( this.linked_lathe.hacked ) {
											R3 = Num13.MaxInt( Convert.ToInt32( new_item.reliability / 2 ), 0 );
										}
										new_item.loc = this.linked_lathe.loc;

										if ( !already_logged ) {
											GlobalFuncs.feedback_add_details( "item_printed", "" + new_item.type + "|" + amount );
											already_logged = true;
										}
										i++;
									}
								}
								this.linked_lathe.busy = false;
								this.screen = old_screen;
								this.updateUsrDialog();
								return;
							}));
						}
					}
				}
			} else if ( Lang13.Bool( href_list["imprint"] ) ) {
				coeff2 = ((dynamic)this.linked_imprinter).efficiency_coeff;
				g2g2 = true;

				if ( this.linked_imprinter != null ) {
					being_built2 = null;

					foreach (dynamic _q in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
						D5 = _q;
						

						if ( D5.id == href_list["imprint"] ) {
							being_built2 = D5;
							break;
						}
					}

					if ( being_built2 != null ) {
						power2 = 2000;
						old_screen2 = this.screen;

						foreach (dynamic _r in Lang13.Enumerate( being_built2.materials )) {
							M3 = _r;
							
							power2 += Num13.Floor( Convert.ToDouble( being_built2.materials[M3] / 5 ) );
						}
						power2 = Num13.MaxInt( 2000, ((int)( power2 )) );
						this.screen = 0.4;

						if ( this.linked_imprinter.busy ) {
							g2g2 = false;
						}

						if ( !( ( being_built2.build_type & 1 ) != 0 ) ) {
							g2g2 = false;
							GlobalFuncs.message_admins( "Circuit imprinter exploit attempted by " + GlobalFuncs.key_name( Task13.User, Task13.User.client ) + "!" );
						}

						if ( g2g2 ) {
							this.linked_imprinter.busy = true;
							Icon13.Flick( "circuit_imprinter_ani", this.linked_imprinter );
							this.f_use_power( power2 );

							foreach (dynamic _t in Lang13.Enumerate( being_built2.materials )) {
								M4 = _t;
								

								if ( !Lang13.Bool( ((dynamic)this.linked_imprinter).check_mat( being_built2, M4 ) ) ) {
									this.visible_message( "<span class='notice'>The " + this.name + " beeps, \"Not enough materials to complete prototype.\"</span>" );
									g2g2 = false;
									break;
								}

								dynamic _s = M4; // Was a switch-case, sorry for the mess.
								if ( _s=="$glass" ) {
									((dynamic)this.linked_imprinter).g_amount = Num13.MaxInt( 0, Convert.ToInt32( ((dynamic)this.linked_imprinter).g_amount - being_built2.materials[M4] / coeff2 ) );
								} else if ( _s=="$gold" ) {
									((dynamic)this.linked_imprinter).gold_amount = Num13.MaxInt( 0, Convert.ToInt32( ((dynamic)this.linked_imprinter).gold_amount - being_built2.materials[M4] / coeff2 ) );
								} else if ( _s=="$diamond" ) {
									((dynamic)this.linked_imprinter).diamond_amount = Num13.MaxInt( 0, Convert.ToInt32( ((dynamic)this.linked_imprinter).diamond_amount - being_built2.materials[M4] / coeff2 ) );
								} else {
									this.linked_imprinter.reagents.remove_reagent( M4, being_built2.materials[M4] / coeff2 );
								}
							}
							P2 = being_built2.build_path;
							R4 = being_built2.reliability;
							Task13.Schedule( 16, (Task13.Closure)(() => {
								
								if ( g2g2 ) {
									new_item2 = Lang13.Call( P2, this );
									new_item2.reliability = R4;
									new_item2.loc = this.linked_imprinter.loc;
									GlobalFuncs.feedback_add_details( "circuit_printed", "" + new_item2.type );
								}
								this.linked_imprinter.busy = false;
								this.screen = old_screen2;
								this.updateUsrDialog();
								return;
							}));
						}
					}
				}
			} else if ( Lang13.Bool( href_list["disposeI"] ) && this.linked_imprinter != null ) {
				this.linked_imprinter.reagents.del_reagent( href_list["disposeI"] );
			} else if ( Lang13.Bool( href_list["disposeallI"] ) && this.linked_imprinter != null ) {
				this.linked_imprinter.reagents.clear_reagents();
			} else if ( Lang13.Bool( href_list["disposeP"] ) && this.linked_lathe != null ) {
				this.linked_lathe.reagents.del_reagent( href_list["disposeP"] );
			} else if ( Lang13.Bool( href_list["disposeallP"] ) && this.linked_lathe != null ) {
				this.linked_lathe.reagents.clear_reagents();
			} else if ( Lang13.Bool( href_list["lathe_ejectsheet"] ) && this.linked_lathe != null ) {
				desired_num_sheets = String13.ParseNumber( href_list["lathe_ejectsheet_amt"] );
				MAT2 = null;

				dynamic _u = href_list["lathe_ejectsheet"]; // Was a switch-case, sorry for the mess.
				if ( _u=="metal" ) {
					MAT2 = "$metal";
				} else if ( _u=="glass" ) {
					MAT2 = "$glass";
				} else if ( _u=="gold" ) {
					MAT2 = "$gold";
				} else if ( _u=="silver" ) {
					MAT2 = "$silver";
				} else if ( _u=="plasma" ) {
					MAT2 = "$plasma";
				} else if ( _u=="uranium" ) {
					MAT2 = "$uranium";
				} else if ( _u=="diamond" ) {
					MAT2 = "$diamond";
				} else if ( _u=="clown" ) {
					MAT2 = "$bananium";
				}
				((MaterialContainer)((dynamic)this.linked_lathe).materials).retrieve_sheets( desired_num_sheets, MAT2 );
			} else if ( Lang13.Bool( href_list["imprinter_ejectsheet"] ) && this.linked_imprinter != null ) {
				desired_num_sheets2 = String13.ParseNumber( href_list["imprinter_ejectsheet_amt"] );
				res_amount = null;
				type = null;

				dynamic _v = href_list["imprinter_ejectsheet"]; // Was a switch-case, sorry for the mess.
				if ( _v=="glass" ) {
					type = typeof(Obj_Item_Stack_Sheet_Glass);
					res_amount = "g_amount";
				} else if ( _v=="gold" ) {
					type = typeof(Obj_Item_Stack_Sheet_Mineral_Gold);
					res_amount = "gold_amount";
				} else if ( _v=="diamond" ) {
					type = typeof(Obj_Item_Stack_Sheet_Mineral_Diamond);
					res_amount = "diamond_amount";
				}

				if ( type is Type && GlobalFuncs.hasvar( this.linked_imprinter, res_amount ) ) {
					sheet = Lang13.Call( type, this.linked_imprinter.loc );
					available_num_sheets = Num13.Floor( Convert.ToDouble( this.linked_imprinter.vars[res_amount] / sheet.perunit ) );

					if ( available_num_sheets > 0 ) {
						sheet.amount = Num13.MinInt( available_num_sheets, ((int)( desired_num_sheets2 ??0 )) );
						this.linked_imprinter.vars[res_amount] = Num13.MaxInt( 0, Convert.ToInt32( this.linked_imprinter.vars[res_amount] - sheet.amount * sheet.perunit ) );
					} else {
						GlobalFuncs.qdel( sheet );
					}
				}
			} else if ( Lang13.Bool( href_list["find_device"] ) ) {
				this.screen = 0;
				Task13.Schedule( 20, (Task13.Closure)(() => {
					this.SyncRDevices();
					this.screen = 1.7;
					this.updateUsrDialog();
					return;
				}));
			} else if ( Lang13.Bool( href_list["disconnect"] ) ) {
				
				dynamic _w = href_list["disconnect"]; // Was a switch-case, sorry for the mess.
				if ( _w=="destroy" ) {
					this.linked_destroy.linked_console = null;
					this.linked_destroy = null;
				} else if ( _w=="lathe" ) {
					this.linked_lathe.linked_console = null;
					this.linked_lathe = null;
				} else if ( _w=="imprinter" ) {
					this.linked_imprinter.linked_console = null;
					this.linked_imprinter = null;
				}
			} else if ( Lang13.Bool( href_list["reset"] ) ) {
				this.griefProtection();
				choice2 = Interface13.Alert( "R&D Console Database Reset", "Are you sure you want to reset the R&D console's database? Data lost cannot be recovered.", "Continue", "Cancel" );

				if ( choice2 == "Continue" ) {
					this.screen = 0;
					GlobalFuncs.qdel( this.files );
					this.files = new Research(  );
					Task13.Schedule( 20, (Task13.Closure)(() => {
						this.screen = 1.6;
						this.updateUsrDialog();
						return;
					}));
				}
			} else if ( Lang13.Bool( href_list["search"] ) ) {
				compare = null;
				this.matching_designs.Cut();

				if ( href_list["type"] == "proto" ) {
					compare = 2;
					this.screen = 3.17;
				} else {
					compare = 1;
					this.screen = 4.17;
				}

				foreach (dynamic _x in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
					D6 = _x;
					

					if ( !( ( D6.build_type & ( compare ??0) ) != 0 ) ) {
						continue;
					}

					if ( String13.FindIgnoreCase( D6.name, href_list["to_search"], 1, 0 ) != 0 ) {
						this.matching_designs.Add( D6 );
					}
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: rdconsole.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				GlobalFuncs.playsound( this.loc, "sound/effects/sparks4.ogg", 75, 1 );
				this.emagged = 1;
				user.WriteMsg( "<span class='notice'>You disable the security protocols</span>" );
			}
			return false;
		}

		// Function from file: rdconsole.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Disk ) {
				
				if ( Lang13.Bool( this.t_disk ) || Lang13.Bool( this.d_disk ) ) {
					user.WriteMsg( "A disk is already loaded into the machine." );
					return null;
				}

				if ( A is Obj_Item_Weapon_Disk_TechDisk ) {
					this.t_disk = A;
				} else if ( A is Obj_Item_Weapon_Disk_DesignDisk ) {
					this.d_disk = A;
				} else {
					user.WriteMsg( "<span class='danger'>Machine cannot accept disks in that format.</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				A.loc = this;
				user.WriteMsg( "<span class='notice'>You add the disk to the machine!</span>" );
			} else if ( !( this.linked_destroy != null && this.linked_destroy.busy ) && !( this.linked_lathe != null && this.linked_lathe.busy ) && !( this.linked_imprinter != null && this.linked_imprinter.busy ) ) {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: rdconsole.dm
		public override void initialize(  ) {
			this.SyncRDevices();
			return;
		}

		// Function from file: rdconsole.dm
		public string list_categories( dynamic categories = null, double menu_num = 0 ) {
			int line_length = 0;
			string dat = null;
			dynamic C = null;

			
			if ( !Lang13.Bool( categories ) ) {
				return null;
			}
			line_length = 1;
			dat = "<table style='width:100%' align='center'><tr>";

			foreach (dynamic _a in Lang13.Enumerate( categories )) {
				C = _a;
				

				if ( line_length > 2 ) {
					dat += "</tr><tr>";
					line_length = 1;
				}
				dat += new Txt( "<td><A href='?src=" ).Ref( this ).str( ";category=" ).item( C ).str( ";menu=" ).item( menu_num ).str( "'>" ).item( C ).str( "</A></td>" ).ToString();
				line_length++;
			}
			dat += "</tr></table></div>";
			return dat;
		}

		// Function from file: rdconsole.dm
		public void griefProtection(  ) {
			Obj_Machinery_RND_Server_Centcom C = null;
			Tech T = null;
			Design D = null;

			
			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_RND_Server_Centcom) )) {
				C = _c;
				

				foreach (dynamic _a in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
					T = _a;
					
					C.files.AddTech2Known( T );
				}

				foreach (dynamic _b in Lang13.Enumerate( this.files.known_designs, typeof(Design) )) {
					D = _b;
					
					C.files.AddDesign2Known( D );
				}
				C.files.RefreshResearch();
			}
			return;
		}

		// Function from file: rdconsole.dm
		public void SyncRDevices(  ) {
			Obj_Machinery_RND D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 3 ), typeof(Obj_Machinery_RND) )) {
				D = _a;
				

				if ( D.linked_console != null || D.disabled || D.panel_open == true ) {
					continue;
				}

				if ( D is Obj_Machinery_RND_DestructiveAnalyzer ) {
					
					if ( this.linked_destroy == null ) {
						this.linked_destroy = D;
						D.linked_console = this;
					}
				} else if ( D is Obj_Machinery_RND_Protolathe ) {
					
					if ( this.linked_lathe == null ) {
						this.linked_lathe = D;
						D.linked_console = this;
					}
				} else if ( D is Obj_Machinery_RND_CircuitImprinter ) {
					
					if ( this.linked_imprinter == null ) {
						this.linked_imprinter = D;
						D.linked_console = this;
					}
				}
			}
			return;
		}

		// Function from file: ninjaDrainAct.dm
		public override dynamic ninjadrain_act( Obj_Item_Clothing_Suit_Space_SpaceNinja S = null, Ent_Static H = null, Obj_Item_Clothing_Gloves_SpaceNinja G = null ) {
			dynamic _default = null;

			dynamic location = null;
			Mob_Living_Silicon_Ai AI = null;
			Tech current_data = null;
			Tech analyzing_data = null;

			
			if ( !( S != null ) || !( H != null ) || !( G != null ) ) {
				return "INVALID";
			}
			_default = "RDHACKFAIL";
			((dynamic)H).WriteMsg( new Txt( "<span class='notice'>Hacking " ).the( this ).item().str( "...</span>" ).ToString() );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				location = GlobalFuncs.get_turf( H );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
					AI = _a;
					
					AI.WriteMsg( "<span class='userdanger'>Network Alert: Hacking attempt detected" + ( Lang13.Bool( location ) ? " in " + location : ". Unable to pinpoint location" ) + "</span>." );
				}
				return;
			}));

			if ( this.files != null && this.files.known_tech.len != 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( S.stored_research, typeof(Tech) )) {
					current_data = _c;
					
					((dynamic)H).WriteMsg( new Txt( "<span class='notice'>Checking " ).the( current_data.name ).item().str( " database.</span>" ).ToString() );

					if ( GlobalFuncs.do_after( H, S.s_delay, null, this ) && G.candrain && this != null ) {
						
						foreach (dynamic _b in Lang13.Enumerate( this.files.known_tech, typeof(Tech) )) {
							analyzing_data = _b;
							

							if ( current_data.id == analyzing_data.id ) {
								
								if ( analyzing_data.level > current_data.level ) {
									((dynamic)H).WriteMsg( "<span class='notice'>Database:</span> <b>UPDATED</b>." );
									current_data.level = analyzing_data.level;
									_default = "RDHACK";
								}
								break;
							}
						}
					} else {
						break;
					}
				}
			}
			((dynamic)H).WriteMsg( "<span class='notice'>Data analyzed. Process finished.</span>" );
			return _default;
		}

	}

}