// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Telescience : Obj_Machinery_Computer {

		public bool sending = true;
		public Ent_Static telepad = null;
		public string temp_msg = "Telescience control console initialized.<BR>Welcome.";
		public int teles_left = 0;
		public ProjectileData last_tele_data = null;
		public int? z_co = 1;
		public int power_off = 0;
		public int rotation_off = 0;
		public Tile last_target = null;
		public double? rotation = 0;
		public int? angle = 45;
		public int power = 5;
		public int teleport_cooldown = 0;
		public ByTable power_options = new ByTable(new object [] { 5, 10, 20, 25, 30, 40, 50, 80, 100 });
		public bool teleporting = false;
		public int? starting_crystals = 3;
		public int max_crystals = 4;
		public ByTable crystals = new ByTable();
		public dynamic inserted_gps = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "teleport";
			this.icon_keyboard = "teleport_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_TelesciConsole);
		}

		// Function from file: telesci_computer.dm
		public Obj_Machinery_Computer_Telescience ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.recalibrate();
			return;
		}

		// Function from file: telesci_computer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic new_rot = null;
			dynamic new_angle = null;
			dynamic index = null;
			dynamic new_z = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( !( this.telepad != null ) ) {
				this.updateDialog();
				return null;
			}

			if ( Lang13.Bool( ((dynamic)this.telepad).panel_open ) ) {
				this.temp_msg = "Telepad undergoing physical maintenance operations.";
			}

			if ( Lang13.Bool( href_list["setrotation"] ) ) {
				new_rot = Interface13.Input( "Please input desired bearing in degrees.", this.name, this.rotation, null, null, InputType.Num );

				if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
					return null;
				}
				this.rotation = Num13.MaxInt( -900, Num13.MinInt( Convert.ToInt32( new_rot ), 900 ) );
				this.rotation = Num13.Round( this.rotation ??0, 0.01 );
			}

			if ( Lang13.Bool( href_list["setangle"] ) ) {
				new_angle = Interface13.Input( "Please input desired elevation in degrees.", this.name, this.angle, null, null, InputType.Num );

				if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
					return null;
				}
				this.angle = Num13.MaxInt( 1, Num13.MinInt( ((int)( Num13.Round( Convert.ToDouble( new_angle ), 0.1 ) )), 9999 ) );
			}

			if ( Lang13.Bool( href_list["setpower"] ) ) {
				index = href_list["setpower"];
				index = String13.ParseNumber( index );

				if ( index != null && Lang13.Bool( this.power_options[index] ) ) {
					
					if ( this.crystals.len + Convert.ToDouble( ((dynamic)this.telepad).efficiency ) >= Convert.ToDouble( index ) ) {
						this.power = Convert.ToInt32( this.power_options[index] );
					}
				}
			}

			if ( Lang13.Bool( href_list["setz"] ) ) {
				new_z = Interface13.Input( "Please input desired sector.", this.name, this.z_co, null, null, InputType.Num );

				if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
					return null;
				}
				this.z_co = Num13.MaxInt( 1, Num13.MinInt( Num13.Floor( Convert.ToDouble( new_z ) ), 10 ) );
			}

			if ( Lang13.Bool( href_list["ejectGPS"] ) ) {
				
				if ( Lang13.Bool( this.inserted_gps ) ) {
					this.inserted_gps.loc = this.loc;
					this.inserted_gps = null;
				}
			}

			if ( Lang13.Bool( href_list["setMemory"] ) ) {
				
				if ( this.last_target != null && Lang13.Bool( this.inserted_gps ) ) {
					this.inserted_gps.locked_location = this.last_target;
					this.temp_msg = "Location saved.";
				} else {
					this.temp_msg = "ERROR!<BR>No data was stored.";
				}
			}

			if ( Lang13.Bool( href_list["send"] ) ) {
				this.sending = true;
				this.teleport( Task13.User );
			}

			if ( Lang13.Bool( href_list["receive"] ) ) {
				this.sending = false;
				this.teleport( Task13.User );
			}

			if ( Lang13.Bool( href_list["recal"] ) ) {
				this.recalibrate();
				this.sparks();
				this.temp_msg = "NOTICE:<BR>Calibration successful.";
			}

			if ( Lang13.Bool( href_list["eject"] ) ) {
				this.eject();
				this.temp_msg = "NOTICE:<BR>Bluespace crystals ejected.";
			}
			this.updateDialog();
			return null;
		}

		// Function from file: telesci_computer.dm
		public void recalibrate(  ) {
			this.teles_left = Rand13.Int( 30, 40 );
			this.power_off = Rand13.Int( -4, 0 );
			this.rotation_off = Rand13.Int( -10, 10 );
			return;
		}

		// Function from file: telesci_computer.dm
		public void eject(  ) {
			Obj_Item I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.crystals, typeof(Obj_Item) )) {
				I = _a;
				
				I.loc = this.loc;
				this.crystals.Remove( I );
			}
			this.power = 0;
			return;
		}

		// Function from file: telesci_computer.dm
		public void teleport( Mob user = null ) {
			
			if ( this.rotation == null || this.angle == null || this.z_co == null ) {
				this.temp_msg = "ERROR!<BR>Set a angle, rotation and sector.";
				return;
			}

			if ( this.power <= 0 ) {
				this.telefail();
				this.temp_msg = "ERROR!<BR>No power selected!";
				return;
			}

			if ( ( this.angle ??0) < 1 || ( this.angle ??0) > 90 ) {
				this.telefail();
				this.temp_msg = "ERROR!<BR>Elevation is less than 1 or greater than 90.";
				return;
			}

			if ( this.z_co == 2 || ( this.z_co ??0) < 1 || ( this.z_co ??0) > 6 ) {
				this.telefail();
				this.temp_msg = "ERROR! Sector is less than 1, <BR>greater than 6, or equal to 2.";
				return;
			}

			if ( this.teles_left > 0 ) {
				this.doteleport( user );
			} else {
				this.telefail();
				this.temp_msg = "ERROR!<BR>Calibration required.";
				return;
			}
			return;
		}

		// Function from file: telesci_computer.dm
		public void doteleport( Mob user = null ) {
			int truePower = 0;
			double trueRotation = 0;
			double trueAngle = 0;
			ProjectileData proj_data = null;
			int trueX = 0;
			int trueY = 0;
			int spawn_time = 0;
			Tile target = null;
			dynamic A = null;
			EffectSystem_SparkSpread s = null;
			dynamic sparks = null;
			EffectSystem_SparkSpread y = null;
			dynamic source = null;
			dynamic dest = null;
			string log_msg = null;
			Ent_Dynamic ROI = null;
			Ent_Dynamic L = null;
			Ent_Dynamic T = null;
			Ent_Dynamic C = null;
			dynamic Q = null;

			
			if ( this.teleport_cooldown > Game13.time ) {
				this.temp_msg = "Telepad is recharging power.<BR>Please wait " + Num13.Floor( ( this.teleport_cooldown - Game13.time ) / 10 ) + " seconds.";
				return;
			}

			if ( this.teleporting ) {
				this.temp_msg = "Telepad is in use.<BR>Please wait.";
				return;
			}

			if ( this.telepad != null ) {
				truePower = Num13.MaxInt( 1, Num13.MinInt( this.power + this.power_off, 1000 ) );
				trueRotation = ( this.rotation ??0) + this.rotation_off;
				trueAngle = Num13.MaxInt( 1, Num13.MinInt( this.angle ??0, 90 ) );
				proj_data = GlobalFuncs.projectile_trajectory( this.telepad.x, this.telepad.y, trueRotation, trueAngle, truePower );
				this.last_tele_data = proj_data;
				trueX = Num13.MaxInt( 1, Num13.MinInt( ((int)( Num13.Round( proj_data.dest_x, 1 ) )), Game13.map_size_x ) );
				trueY = Num13.MaxInt( 1, Num13.MinInt( ((int)( Num13.Round( proj_data.dest_y, 1 ) )), Game13.map_size_y ) );
				spawn_time = Num13.Floor( proj_data.time ) * 10;
				target = Map13.GetTile( trueX, trueY, this.z_co ??0 );
				this.last_target = target;
				A = GlobalFuncs.get_area( target );
				Icon13.Flick( "pad-beam", this.telepad );

				if ( spawn_time > 15 ) {
					GlobalFuncs.playsound( this.telepad.loc, "sound/weapons/flash.ogg", 25, 1 );
					this.teleporting = true;
					this.temp_msg = "Powering up bluespace crystals.<BR>Please wait.";
				}
				Task13.Schedule( Num13.Floor( proj_data.time ) * 10, (Task13.Closure)(() => {
					
					if ( !( this.telepad != null ) ) {
						return;
					}

					if ( Lang13.Bool( ((dynamic)this.telepad).stat & 2 ) ) {
						return;
					}
					this.teleporting = false;
					this.teleport_cooldown = Game13.time + this.power * 2;
					this.teles_left -= 1;
					this.f_use_power( this.power * 10 );
					s = new EffectSystem_SparkSpread();
					s.set_up( 5, 1, GlobalFuncs.get_turf( this.telepad ) );
					s.start();
					this.temp_msg = "Teleport successful.<BR>";

					if ( this.teles_left < 10 ) {
						this.temp_msg += "<BR>Calibration required soon.";
					} else {
						this.temp_msg += "Data printed below.";
					}
					sparks = GlobalFuncs.get_turf( target );
					y = new EffectSystem_SparkSpread();
					y.set_up( 5, 1, sparks );
					y.start();
					source = target;
					dest = GlobalFuncs.get_turf( this.telepad );
					log_msg = "";
					log_msg += ": " + GlobalFuncs.key_name( user ) + " has teleported ";

					if ( this.sending ) {
						source = dest;
						dest = target;
					}
					Icon13.Flick( "pad-beam", this.telepad );
					GlobalFuncs.playsound( this.telepad.loc, "sound/weapons/emitter2.ogg", 25, 1, 3, 5 );

					foreach (dynamic _b in Lang13.Enumerate( source, typeof(Ent_Dynamic) )) {
						ROI = _b;
						

						if ( Lang13.Bool( ROI.anchored ) ) {
							
							if ( ROI is Mob_Living ) {
								L = ROI;

								if ( Lang13.Bool( ((dynamic)L).buckled ) ) {
									
									if ( Lang13.Bool( ((dynamic)L).buckled.anchored ) ) {
										continue;
									}
									log_msg += "" + GlobalFuncs.key_name( L ) + " (on a chair), ";
								} else {
									continue;
								}
							} else if ( !( ROI is Mob_Dead_Observer ) ) {
								continue;
							}
						}

						if ( ROI is Mob ) {
							T = ROI;
							log_msg += "" + GlobalFuncs.key_name( T ) + ", ";
						} else {
							log_msg += "" + ROI.name;

							if ( ROI is Obj_Structure_Closet ) {
								C = ROI;
								log_msg += " (";

								foreach (dynamic _a in Lang13.Enumerate( C )) {
									Q = _a;
									

									if ( Q is Mob ) {
										log_msg += "" + GlobalFuncs.key_name( Q ) + ", ";
									} else {
										log_msg += "" + Q.name + ", ";
									}
								}

								if ( GlobalFuncs.dd_hassuffix( log_msg, "(" ) != 0 ) {
									log_msg += "empty)";
								} else {
									log_msg = GlobalFuncs.dd_limittext( log_msg, Lang13.Length( log_msg ) - 2 );
									log_msg += ")";
								}
							}
							log_msg += ", ";
						}
						GlobalFuncs.do_teleport( ROI, dest );
					}

					if ( GlobalFuncs.dd_hassuffix( log_msg, ", " ) != 0 ) {
						log_msg = GlobalFuncs.dd_limittext( log_msg, Lang13.Length( log_msg ) - 2 );
					} else {
						log_msg += "nothing";
					}
					log_msg += " " + ( this.sending ? "to" : "from" ) + " " + trueX + ", " + trueY + ", " + this.z_co + " (" + ( Lang13.Bool( A ) ? A.name : "null area" ) + ")";
					this.investigate_log( log_msg, "telesci" );
					this.updateDialog();
					return;
				}));
			}
			return;
		}

		// Function from file: telesci_computer.dm
		public void telefail(  ) {
			this.sparks();
			this.visible_message( "<span class='warning'>The telepad weakly fizzles.</span>" );
			return;
		}

		// Function from file: telesci_computer.dm
		public void sparks(  ) {
			EffectSystem_SparkSpread s = null;

			
			if ( this.telepad != null ) {
				s = new EffectSystem_SparkSpread();
				s.set_up( 5, 1, GlobalFuncs.get_turf( this.telepad ) );
				s.start();
			} else {
				return;
			}
			return;
		}

		// Function from file: telesci_computer.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic t = null;
			double? i = null;
			Browser popup = null;

			
			if ( !( this.telepad != null ) ) {
				this.in_use = false;
				t += "<div class='statusDisplay'>No telepad located. <BR>Please add telepad data.</div><BR>";
			} else {
				
				if ( Lang13.Bool( this.inserted_gps ) ) {
					t += new Txt( "<A href='?src=" ).Ref( this ).str( ";ejectGPS=1'>Eject GPS</A>" ).ToString();
					t += new Txt( "<A href='?src=" ).Ref( this ).str( ";setMemory=1'>Set GPS memory</A>" ).ToString();
				} else {
					t += "<span class='linkOff'>Eject GPS</span>";
					t += "<span class='linkOff'>Set GPS memory</span>";
				}
				t += "<div class='statusDisplay'>" + this.temp_msg + "</div><BR>";
				t += new Txt( "<A href='?src=" ).Ref( this ).str( ";setrotation=1'>Set Bearing</A>" ).ToString();
				t += "<div class='statusDisplay'>" + this.rotation + "°</div>";
				t += new Txt( "<A href='?src=" ).Ref( this ).str( ";setangle=1'>Set Elevation</A>" ).ToString();
				t += "<div class='statusDisplay'>" + this.angle + "°</div>";
				t += "<span class='linkOn'>Set Power</span>";
				t += "<div class='statusDisplay'>";
				i = null;
				i = 1;

				while (( i ??0) <= this.power_options.len) {
					
					if ( this.crystals.len + Convert.ToDouble( ((dynamic)this.telepad).efficiency ) < ( i ??0) ) {
						t += "<span class='linkOff'>" + this.power_options[i] + "</span>";
					} else if ( this.power == Convert.ToInt32( this.power_options[i] ) ) {
						t += "<span class='linkOn'>" + this.power_options[i] + "</span>";
					} else {
						t += new Txt( "<A href='?src=" ).Ref( this ).str( ";setpower=" ).item( i ).str( "'>" ).item( this.power_options[i] ).str( "</A>" ).ToString();
					}
					i++;
				}
				t += "</div>";
				t += new Txt( "<A href='?src=" ).Ref( this ).str( ";setz=1'>Set Sector</A>" ).ToString();
				t += "<div class='statusDisplay'>" + ( Lang13.Bool( this.z_co ) ? ((dynamic)( this.z_co )) : ((dynamic)( "NULL" )) ) + "</div>";
				t += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";send=1'>Send</A>" ).ToString();
				t += new Txt( " <A href='?src=" ).Ref( this ).str( ";receive=1'>Receive</A>" ).ToString();
				t += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";recal=1'>Recalibrate Crystals</A> <A href='?src=" ).Ref( this ).str( ";eject=1'>Eject Crystals</A>" ).ToString();
				t += "<BR><div class='statusDisplay'>";

				if ( !( this.last_tele_data != null ) ) {
					t += "No teleport data found.";
				} else {
					t += "Source Location: (" + this.last_tele_data.src_x + ", " + this.last_tele_data.src_y + ")<BR>";
					t += "Time: " + Num13.Round( this.last_tele_data.time, 0.1 ) + " secs<BR>";
				}
				t += "</div>";
			}
			popup = new Browser( user, "telesci", this.name, 300, 500 );
			popup.set_content( t );
			popup.open();
			return null;
		}

		// Function from file: telesci_computer.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: telesci_computer.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.attack_hand( user );
			return null;
		}

		// Function from file: telesci_computer.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic M = null;

			
			if ( A is Obj_Item_Weapon_Ore_BluespaceCrystal ) {
				
				if ( this.crystals.len >= this.max_crystals ) {
					user.WriteMsg( "<span class='warning'>There are not enough crystal slots.</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				this.crystals.Add( A );
				A.loc = null;
				((Ent_Static)user).visible_message( new Txt().item( user ).str( " inserts " ).item( A ).str( " into " ).the( this ).item().str( "'s crystal slot." ).ToString(), new Txt( "<span class='notice'>You insert " ).item( A ).str( " into " ).the( this ).item().str( "'s crystal slot.</span>" ).ToString() );
				this.updateDialog();
			} else if ( A is Obj_Item_Device_Gps ) {
				
				if ( !Lang13.Bool( this.inserted_gps ) ) {
					this.inserted_gps = A;
					((Mob)user).unEquip( A );
					A.loc = this;
					((Ent_Static)user).visible_message( new Txt().item( user ).str( " inserts " ).item( A ).str( " into " ).the( this ).item().str( "'s GPS device slot." ).ToString(), new Txt( "<span class='notice'>You insert " ).item( A ).str( " into " ).the( this ).item().str( "'s GPS device slot.</span>" ).ToString() );
				}
			} else if ( A is Obj_Item_Device_Multitool ) {
				M = A;

				if ( Lang13.Bool( M.buffer ) && M.buffer is Obj_Machinery_Telepad ) {
					this.telepad = M.buffer;
					M.buffer = null;
					user.WriteMsg( "<span class='caution'>You upload the data from the " + A.name + "'s buffer.</span>" );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: telesci_computer.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			a.WriteMsg( "<span class='warning'>You are too primitive to use this computer!</span>" );
			return null;
		}

		// Function from file: telesci_computer.dm
		public override void initialize(  ) {
			int? i = null;

			base.initialize();
			i = null;
			i = 1;

			while (( i ??0) <= ( this.starting_crystals ??0)) {
				this.crystals.Add( new Obj_Item_Weapon_Ore_BluespaceCrystal_Artificial( null ) );
				i++;
			}
			return;
		}

		// Function from file: telesci_computer.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( new Txt( "There are " ).item( ( this.crystals.len != 0 ? ((dynamic)( this.crystals.len )) : ((dynamic)( "no" )) ) ).str( " bluespace crystal" ).s().str( " in the crystal slots." ).ToString() );
			return 0;
		}

		// Function from file: telesci_computer.dm
		public override dynamic Destroy(  ) {
			this.eject();

			if ( Lang13.Bool( this.inserted_gps ) ) {
				this.inserted_gps.loc = this.loc;
				this.inserted_gps = null;
			}
			return base.Destroy();
		}

	}

}