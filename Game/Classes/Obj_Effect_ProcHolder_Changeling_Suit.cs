// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_ProcHolder_Changeling_Suit : Obj_Effect_ProcHolder_Changeling {

		public Type helmet_type = typeof(Obj_Item);
		public Type suit_type = typeof(Obj_Item);
		public string suit_name_simple = "    ";
		public string helmet_name_simple = "     ";
		public double recharge_slowdown = 0;
		public bool blood_on_castoff = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.helptext = "Yell at Miauw and/or Perakp";
			this.chemical_cost = 1000;
			this.genetic_damage = 1000;
		}

		public Obj_Effect_ProcHolder_Changeling_Suit ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: mutations.dm
		public override dynamic sting_action( Mob user = null, dynamic target = null ) {
			Changeling changeling = null;

			
			if ( !user.canUnEquip( ((dynamic)user).wear_suit ) ) {
				user.WriteMsg( new Txt().the( ((dynamic)user).wear_suit ).item().str( " is stuck to your body, you cannot grow a " ).item( this.suit_name_simple ).str( " over it!" ).ToString() );
				return null;
			}

			if ( !user.canUnEquip( ((dynamic)user).head ) ) {
				user.WriteMsg( new Txt().the( ((dynamic)user).head ).item().str( " is stuck on your head, you cannot grow a " ).item( this.helmet_name_simple ).str( " over it!" ).ToString() );
				return null;
			}
			user.unEquip( ((dynamic)user).head );
			user.unEquip( ((dynamic)user).wear_suit );
			user.equip_to_slot_if_possible( Lang13.Call( this.suit_type, user ), 13, true, true, true );
			user.equip_to_slot_if_possible( Lang13.Call( this.helmet_type, user ), 11, true, true, true );
			changeling = user.mind.changeling;
			changeling.chem_recharge_slowdown += this.recharge_slowdown;
			return 1;
		}

		// Function from file: mutations.dm
		public override void on_refund( Mob user = null ) {
			Mob H = null;

			
			if ( !( user is Mob_Living_Carbon_Human ) ) {
				return;
			}
			H = user;
			this.check_suit( H );
			return;
		}

		// Function from file: mutations.dm
		public bool check_suit( Mob user = null ) {
			Changeling changeling = null;
			Mob H = null;
			dynamic T = null;

			changeling = user.mind.changeling;

			if ( !( user is Mob_Living_Carbon_Human ) || !( changeling != null ) ) {
				return true;
			}
			H = user;

			if ( Lang13.Bool( ((dynamic)this.suit_type).IsInstanceOfType( ((dynamic)H).wear_suit ) ) || Lang13.Bool( ((dynamic)this.helmet_type).IsInstanceOfType( ((dynamic)H).head ) ) ) {
				H.visible_message( "<span class='warning'>" + H + " casts off their " + this.suit_name_simple + "!</span>", "<span class='warning'>We cast off our " + this.suit_name_simple + ( this.genetic_damage > 0 ? ", temporarily weakening our genomes." : "." ) + "</span>", "<span class='italics'>You hear the organic matter ripping and tearing!</span>" );
				GlobalFuncs.qdel( ((dynamic)H).wear_suit );
				GlobalFuncs.qdel( ((dynamic)H).head );
				H.update_inv_wear_suit();
				H.update_inv_head();
				H.update_hair();

				if ( this.blood_on_castoff ) {
					T = GlobalFuncs.get_turf( H );

					if ( T is Tile_Simulated ) {
						((Ent_Static)T).add_blood( H );
						GlobalFuncs.playsound( H.loc, "sound/effects/splat.ogg", 50, 1 );
					}
				}
				changeling.geneticdamage += this.genetic_damage;
				changeling.chem_recharge_slowdown -= this.recharge_slowdown;
				return true;
			}
			return false;
		}

		// Function from file: mutations.dm
		public override void try_to_sting( Mob user = null, dynamic target = null ) {
			Mob H = null;

			
			if ( this.check_suit( user ) ) {
				return;
			}
			H = user;
			base.try_to_sting( H, (object)(target) );
			return;
		}

	}

}