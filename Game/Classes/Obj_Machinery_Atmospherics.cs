// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics : Obj_Machinery {

		public bool nodealert = false;
		public bool can_unwrench = false;
		public dynamic initialize_directions = 0;
		public dynamic pipe_color = null;
		public Obj_Item_Pipe stored = null;
		public dynamic iconsetids = null;
		public dynamic pipeimages = null;
		public Image pipe_vision_img = null;
		public int device_type = 0;
		public ByTable nodes = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.power_channel = 3;
		}

		// Function from file: atmospherics.dm
		public Obj_Machinery_Atmospherics ( dynamic loc = null ) : base( (object)(loc) ) {
			this.nodes.len = this.device_type;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSair.atmos_machinery.Add( this );
			this.SetInitDirections();

			if ( this.can_unwrench ) {
				this.stored = new Obj_Item_Pipe( this, null, null, this );
			}
			return;
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			return;
		}

		// Function from file: atmospherics.dm
		public override bool AltClick( Mob user = null ) {
			
			if ( GlobalFuncs.is_type_in_list( this, GlobalVars.ventcrawl_machinery ) ) {
				((dynamic)user).handle_ventcrawl( this );
				return false;
			}
			base.AltClick( user );
			return false;
		}

		// Function from file: atmospherics.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			Obj_Machinery_Atmospherics target_move = null;
			ByTable pipenetdiff = null;

			
			if ( !( ( ( direction ??0) & Convert.ToInt32( this.initialize_directions ) ) != 0 ) ) {
				return false;
			}

			if ( this.buckled_mob == user ) {
				return false;
			}
			target_move = this.findConnecting( direction );

			if ( target_move != null ) {
				
				if ( GlobalFuncs.is_type_in_list( target_move, GlobalVars.ventcrawl_machinery ) && target_move.can_crawl_through() ) {
					((dynamic)user).remove_ventcrawl();
					user.forceMove( target_move.loc );
					user.visible_message( "<span class='notice'>You hear something squeezing through the ducts...</span>", "<span class='notice'>You climb out the ventilation system." );
				} else if ( target_move.can_crawl_through() ) {
					pipenetdiff = this.returnPipenets() ^ target_move.returnPipenets();

					if ( pipenetdiff.len != 0 ) {
						user.update_pipe_vision( target_move );
					}
					user.loc = target_move;
					user.client.eye = target_move;

					if ( Game13.time - Convert.ToDouble( ((dynamic)user).last_played_vent ) > 30 ) {
						((dynamic)user).last_played_vent = Game13.time;
						GlobalFuncs.playsound( this, "sound/machines/ventcrawl.ogg", 50, 1, -3 );
					}
				}
			} else if ( ( ( direction ??0) & Convert.ToInt32( this.initialize_directions ) ) != 0 || GlobalFuncs.is_type_in_list( this, GlobalVars.ventcrawl_machinery ) && this.can_crawl_through() ) {
				((dynamic)user).remove_ventcrawl();
				user.forceMove( this.loc );
				user.visible_message( "<span class='notice'>You hear something squeezing through the ducts...</span>", "<span class='notice'>You climb out the ventilation system." );
			}
			user.canmove = false;
			Task13.Schedule( 1, (Task13.Closure)(() => {
				user.canmove = true;
				return;
			}));
			return false;
		}

		// Function from file: atmospherics.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			
			if ( ( current_size ??0) >= 9 ) {
				this.Deconstruct();
			}
			return;
		}

		// Function from file: atmospherics.dm
		public override void construction( dynamic pipe_type = null, dynamic obj_color = null ) {
			Ent_Static T = null;
			ByTable nodes = null;
			Obj_Machinery_Atmospherics A = null;

			
			if ( this.can_unwrench ) {
				this.color = obj_color;
				this.pipe_color = obj_color;
				this.stored.dir = this.dir;
				this.stored.pipe_type = pipe_type;
				this.stored.color = obj_color;
			}
			T = this.loc;
			this.level = ( Lang13.Bool( ((dynamic)T).intact ) ? 2 : 1 );
			this.atmosinit();
			nodes = this.pipeline_expansion();

			foreach (dynamic _a in Lang13.Enumerate( nodes, typeof(Obj_Machinery_Atmospherics) )) {
				A = _a;
				
				A.atmosinit();
				A.addMember( this );
			}
			this.build_network();
			return;
		}

		// Function from file: atmospherics.dm
		public override void Deconstruct(  ) {
			
			if ( this.can_unwrench ) {
				this.stored.loc = this.loc;
				this.transfer_fingerprints_to( this.stored );
				this.stored = null;
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: atmospherics.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic T = null;
			GasMixture int_air = null;
			GasMixture env_air = null;
			bool? unsafe_wrenching = null;
			double? internal_pressure = null;

			
			if ( this.can_unwrench && A is Obj_Item_Weapon_Wrench ) {
				T = GlobalFuncs.get_turf( this );

				if ( this.level == 1 && T is Tile && T.intact ) {
					user.WriteMsg( "<span class='warning'>You must remove the plating first!</span>" );
					return 1;
				}
				int_air = this.return_air();
				env_air = this.loc.return_air();
				this.add_fingerprint( user );
				unsafe_wrenching = GlobalVars.FALSE;
				internal_pressure = int_air.return_pressure() - env_air.return_pressure();
				GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
				user.WriteMsg( new Txt( "<span class='notice'>You begin to unfasten " ).the( this ).item().str( "...</span>" ).ToString() );

				if ( ( internal_pressure ??0) > 202.41 ) {
					user.WriteMsg( new Txt( "<span class='warning'>As you begin unwrenching " ).the( this ).item().str( " a gush of air blows in your face... maybe you should reconsider?</span>" ).ToString() );
					unsafe_wrenching = GlobalVars.TRUE;
				}

				if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) && !Lang13.Bool( this.gc_destroyed ) ) {
					((Ent_Static)user).visible_message( new Txt().item( user ).str( " unfastens " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You unfasten " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='italics'>You hear ratchet.</span>" );
					this.investigate_log( "was <span class='warning'>REMOVED</span> by " + GlobalFuncs.key_name( Task13.User ), "atmos" );

					if ( unsafe_wrenching == true ) {
						this.unsafe_pressure_release( user, internal_pressure );
					}
					this.Deconstruct();
				}
			} else {
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: atmospherics.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			return null;
		}

		// Function from file: datum_pipeline.dm
		public virtual void addMember( Obj_Machinery_Atmospherics A = null ) {
			return;
		}

		// Function from file: atmospherics.dm
		public virtual ByTable returnPipenets(  ) {
			return new ByTable();
		}

		// Function from file: atmospherics.dm
		public virtual bool can_crawl_through(  ) {
			return true;
		}

		// Function from file: atmospherics.dm
		public Obj_Machinery_Atmospherics findConnecting( dynamic direction = null ) {
			Obj_Machinery_Atmospherics target = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( this, Convert.ToInt32( direction ) ), typeof(Obj_Machinery_Atmospherics) )) {
				target = _a;
				

				if ( Lang13.Bool( target.initialize_directions & Map13.GetDistance( target, this ) ) ) {
					return target;
				}
			}
			return null;
		}

		// Function from file: atmospherics.dm
		public Image getpipeimage( string iconset = null, string iconstate = null, dynamic direction = null, dynamic col = null ) {
			col = col ?? "#ffffff";

			dynamic identifier = null;
			Image img = null;

			
			if ( GlobalVars.iconsetids[iconset] == null ) {
				GlobalVars.iconsetids[iconset] = String13.NumberToString( GlobalVars.iconsetids.len + 1 );
			}
			identifier = GlobalVars.iconsetids[iconset] + ( "_" + iconstate + "_" + direction + "_" + col );

			if ( GlobalVars.pipeimages[identifier] == null ) {
				img = new Image( iconset, null, iconstate, null, direction );
				img.color = col;
				GlobalVars.pipeimages[identifier] = img;
			} else {
				img = GlobalVars.pipeimages[identifier];
			}
			return img;
		}

		// Function from file: atmospherics.dm
		public virtual void unsafe_pressure_release( dynamic user = null, double? pressures = null ) {
			GasMixture int_air = null;
			GasMixture env_air = null;
			dynamic fuck_you_dir = null;
			dynamic target = null;
			double? range = null;
			double speed = 0;

			
			if ( !Lang13.Bool( user ) ) {
				return;
			}

			if ( !Lang13.Bool( pressures ) ) {
				int_air = this.return_air();
				env_air = this.loc.return_air();
				pressures = int_air.return_pressure() - env_air.return_pressure();
			}
			fuck_you_dir = Map13.GetDistance( this, user );

			if ( !Lang13.Bool( fuck_you_dir ) ) {
				fuck_you_dir = Rand13.PickFromTable( GlobalVars.cardinal );
			}
			target = GlobalFuncs.get_edge_target_turf( user, fuck_you_dir );
			range = ( pressures ??0) / 250;
			speed = ( range ??0) / 5;
			((Ent_Static)user).visible_message( "<span class='danger'>" + user + " is sent flying by pressure!</span>", "<span class='userdanger'>The pressure sends you flying!</span>" );
			((Ent_Dynamic)user).throw_at( target, range, speed );
			return;
		}

		// Function from file: atmospherics.dm
		public void disconnect( Obj_Machinery_Atmospherics reference = null ) {
			Obj_Machinery_Atmospherics P = null;
			int I = 0;

			
			if ( reference is Obj_Machinery_Atmospherics_Pipe ) {
				P = reference;
				GlobalFuncs.qdel( ((dynamic)P).parent );
			}
			I = this.nodes.Find( reference );
			this.nodes[I] = null;
			this.update_icon();
			return;
		}

		// Function from file: atmospherics.dm
		public virtual void build_network(  ) {
			return;
		}

		// Function from file: atmospherics.dm
		public virtual void replacePipenet( Pipeline Old = null, Pipeline New = null ) {
			return;
		}

		// Function from file: atmospherics.dm
		public virtual void setPipenet( Pipeline reference = null, Obj_Machinery_Atmospherics A = null ) {
			return;
		}

		// Function from file: atmospherics.dm
		public virtual dynamic returnPipenetAir( Pipeline reference = null ) {
			return null;
		}

		// Function from file: atmospherics.dm
		public virtual Pipeline returnPipenet( Obj_Machinery_Atmospherics A = null ) {
			return null;
		}

		// Function from file: atmospherics.dm
		public virtual dynamic GetInitDirections(  ) {
			return this.initialize_directions;
		}

		// Function from file: atmospherics.dm
		public virtual void SetInitDirections(  ) {
			return;
		}

		// Function from file: atmospherics.dm
		public virtual ByTable pipeline_expansion( Pipeline reference = null ) {
			return this.nodes;
		}

		// Function from file: atmospherics.dm
		public virtual bool can_be_node( Obj_Machinery_Atmospherics target = null, double iteration = 0 ) {
			
			if ( Lang13.Bool( target.initialize_directions & Map13.GetDistance( target, this ) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: atmospherics.dm
		public virtual void atmosinit( ByTable node_connects = null ) {
			double I = 0;
			dynamic D = null;
			double I2 = 0;
			Obj_Machinery_Atmospherics target = null;

			
			if ( !( node_connects != null ) ) {
				node_connects = new ByTable();
				node_connects.len = this.device_type;

				foreach (dynamic _b in Lang13.IterateRange( 1, this.device_type )) {
					I = _b;
					

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
						D = _a;
						

						if ( Lang13.Bool( D & this.GetInitDirections() ) ) {
							
							if ( node_connects.Contains( D ) ) {
								continue;
							}
							node_connects[I] = D;
							break;
						}
					}
				}
			}

			foreach (dynamic _d in Lang13.IterateRange( 1, this.device_type )) {
				I2 = _d;
				

				foreach (dynamic _c in Lang13.Enumerate( Map13.GetStep( this, Convert.ToInt32( node_connects[I2] ) ), typeof(Obj_Machinery_Atmospherics) )) {
					target = _c;
					

					if ( this.can_be_node( target, I2 ) ) {
						this.nodes[I2] = target;
						break;
					}
				}
			}
			this.update_icon();
			return;
		}

		// Function from file: atmospherics.dm
		public virtual void nullifyNode( double I = 0 ) {
			Obj_Machinery_Atmospherics N = null;

			
			if ( Lang13.Bool( this.nodes[I] ) ) {
				N = this.nodes[I];
				N.disconnect( this );
				this.nodes[I] = null;
			}
			return;
		}

		// Function from file: atmospherics.dm
		public override dynamic Destroy(  ) {
			double I = 0;
			Mob_Living L = null;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, this.device_type )) {
				I = _a;
				
				this.nullifyNode( I );
			}
			GlobalVars.SSair.atmos_machinery.Remove( this );

			if ( this.stored != null ) {
				GlobalFuncs.qdel( this.stored );
				this.stored = null;
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Mob_Living) )) {
				L = _b;
				
				L.remove_ventcrawl();
				L.forceMove( GlobalFuncs.get_turf( this ) );
			}

			if ( this.pipe_vision_img != null ) {
				GlobalFuncs.qdel( this.pipe_vision_img );
			}
			return base.Destroy();
		}

	}

}