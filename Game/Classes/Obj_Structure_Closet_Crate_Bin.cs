// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet_Crate_Bin : Obj_Structure_Closet_Crate {

		public string animation = "animate_largebins";
		public string redlight = "largebinr";
		public string greenlight = "largebing";
		public string orangelight = "largebino";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_crate = "largebins";
			this.anchored = 1;
			this.sound_effect_open = "sound/effects/bin_open.ogg";
			this.sound_effect_close = "sound/effects/bin_close.ogg";
			this.icon_state = "largebins";
		}

		// Function from file: bins.dm
		public Obj_Structure_Closet_Crate_Bin ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: bins.dm
		public override bool place( dynamic user = null, dynamic I = null ) {
			
			if ( this.contents.len >= this.storage_capacity ) {
				return true;
			}

			if ( !this.opened && Lang13.Bool( user.drop_item() ) ) {
				this.insert( I, false, true );
				return true;
			}
			return false;
		}

		// Function from file: bins.dm
		public override int insert( dynamic I = null, bool? include_mobs = null, bool? animate = null ) {
			include_mobs = include_mobs ?? false;
			animate = animate ?? false;

			int _default = 0;

			_default = base.insert( (object)(I), include_mobs, animate );

			if ( animate == true && _default != 0 ) {
				this.do_animate();
			}
			return _default;
		}

		// Function from file: bins.dm
		public void do_animate(  ) {
			GlobalFuncs.playsound( this.loc, this.sound_effect_open, 15, 1, -3 );
			Icon13.Flick( this.animation, this );
			Task13.Schedule( 13, (Task13.Closure)(() => {
				GlobalFuncs.playsound( this.loc, this.sound_effect_close, 15, 1, -3 );
				this.update_icon();
				return;
			}));
			return;
		}

		// Function from file: bins.dm
		public override bool close(  ) {
			bool _default = false;

			_default = base.close();
			this.update_icon();
			return _default;
		}

		// Function from file: bins.dm
		public override bool open(  ) {
			bool _default = false;

			_default = base.open();
			this.update_icon();
			return _default;
		}

		// Function from file: bins.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			bool _default = false;

			_default = base.MouseDrop_T( O, (object)(user), false, false, false );

			if ( _default ) {
				
				if ( O != user ) {
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " tries to stuff " + O + " into " + this + ".</span>", "<span class='danger'>You try to stuff " + O + " into " + this + ".</span>", "<span class='italics'>You hear clanging.</span>" );

					if ( !GlobalFuncs.do_after( user, 40, null, this ) ) {
						return _default;
					}

					if ( !base.MouseDrop_T( O, (object)(user), false, false, move_them ) ) {
						return _default;
					}
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " stuffs " + O + " into" + this + ".</span>", "<span class='notice'>You stuff " + O + " into " + this + ".</span>", "<span class='italics'>You hear a loud metal bang.</span>" );
				}
				this.insert( O, true, !this.opened );

				if ( this.opened ) {
					this.close();
				}
			}
			return _default;
		}

		// Function from file: bins.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic T = null;
			Obj_Item O = null;
			dynamic G = null;

			
			if ( A is Obj_Item_Weapon_Storage_Bag_Trash ) {
				T = A;
				user.WriteMsg( "<span class='notice'>You fill the bag.</span>" );

				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
					O = _a;
					

					if ( ((Obj_Item_Weapon_Storage)T).can_be_inserted( O, true ) ) {
						O.loc = T;
					}
				}
				T.update_icon();
				this.do_animate();
			} else if ( A is Obj_Item_Weapon_Wrench ) {
				this.anchored = !Lang13.Bool( this.anchored );
				GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
			} else if ( A is Obj_Item_Weapon_Grab ) {
				G = A;
				this.MouseDrop_T( G.affecting, user );
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: bins.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
			this.overlays.Cut();

			if ( this.contents.len == 0 ) {
				this.overlays.Add( this.greenlight );
			} else if ( this.contents.len >= this.storage_capacity ) {
				this.overlays.Add( this.redlight );
			} else {
				this.overlays.Add( this.orangelight );
			}
			return null;
		}

	}

}