// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Mmi_Posibrain : Obj_Item_Device_Mmi {

		public bool notified = false;
		public int askDelay = 600;
		public bool used = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "biotech=3;programming=2";
			this.req_access = new ByTable(new object [] { 29 });
			this.braintype = "Android";
			this.icon_state = "posibrain";
		}

		// Function from file: posibrain.dm
		public Obj_Item_Device_Mmi_Posibrain ( dynamic loc = null ) : base( (object)(loc) ) {
			this.brainmob = new Mob_Living_Carbon_Brain( this );
			this.brainmob.name = "" + Rand13.PickFromTable( new ByTable(new object [] { 
				"PBU", 
				"HIU", 
				"SINA", 
				"ARMA", 
				"OSI", 
				"HBL", 
				"MSO", 
				"RR", 
				"CHRI", 
				"CDB", 
				"HG", 
				"XSI", 
				"ORNG", 
				"GUN", 
				"KOR", 
				"MET", 
				"FRE", 
				"XIS", 
				"SLI", 
				"PKP", 
				"HOG", 
				"RZH", 
				"GOOF", 
				"MRPR", 
				"JJR", 
				"FIRC", 
				"INC", 
				"PHL", 
				"BGB", 
				"ANTR", 
				"MIW", 
				"WJ", 
				"JRD", 
				"CHOC", 
				"ANCL", 
				"JLLO", 
				"ANNS", 
				"KOS", 
				"TKRG", 
				"XAL", 
				"STLP", 
				"CBOS", 
				"DNCN", 
				"FXMC", 
				"DRSD"
			 }) ) + "-" + Rand13.Int( 100, 999 );
			this.brainmob.real_name = this.brainmob.name;
			this.brainmob.loc = this;
			this.brainmob.container = this;
			this.brainmob.stat = 0;
			this.brainmob.silent = 0;
			GlobalVars.dead_mob_list.Remove( this.brainmob );
			this.ping_ghosts( "created" );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: posibrain.dm
		public override bool? update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.notified ) {
				this.icon_state = "posibrain-searching";
				return null;
			}

			if ( this.brainmob != null && Lang13.Bool( this.brainmob.key ) ) {
				this.icon_state = "posibrain-occupied";
			} else {
				this.icon_state = "posibrain";
			}
			return null;
		}

		// Function from file: posibrain.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			return null;
		}

		// Function from file: posibrain.dm
		[VerbInfo( access: VerbAccess.InViewExcludeThis, range: 125 )]
		public override double examine( dynamic user = null ) {
			string msg = null;

			
			if ( !( Task13.User != null ) || !( this != null ) ) {
				return 0;
			}

			if ( ( Lang13.Bool( Task13.User.disabilities & 1 ) || Task13.User.stat != 0 ) && !( Task13.User is Mob_Dead_Observer ) ) {
				Task13.User.WriteMsg( "<span class='notice'>Something is there but you can't see it.</span>" );
				return 0;
			}
			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<EM>" ).item().str( "</EM>!\n" ).item( this.desc ).str( "\n" ).ToString();
			msg += "<span class='warning'>";

			if ( this.brainmob != null && Lang13.Bool( this.brainmob.key ) ) {
				
				switch ((int)( this.brainmob.stat )) {
					case 0:
						
						if ( !( this.brainmob.client != null ) ) {
							msg += "It appears to be in stand-by mode.\n";
						}
						break;
					case 1:
						msg += "<span class='warning'>It doesn't seem to be responsive.</span>\n";
						break;
					case 2:
						msg += "<span class='deadsay'>It appears to be completely inactive.</span>\n";
						break;
				}
			} else {
				msg += "<span class='deadsay'>It appears to be completely inactive. The reset light is blinking.</span>\n";
			}
			msg += "<span class='info'>*---------*</span>";
			Task13.User.WriteMsg( msg );
			return 0;
		}

		// Function from file: posibrain.dm
		public override void transfer_identity( Mob L = null ) {
			this.name = "positronic brain (" + L + ")";
			this.brainmob.name = L.real_name;
			this.brainmob.real_name = L.real_name;
			this.brainmob.dna = ((dynamic)L).dna;

			if ( L.has_dna() != null ) {
				
				if ( !( this.brainmob.dna != null ) ) {
					this.brainmob.dna = new Dna( this.brainmob );
				}
				((Dna)((dynamic)L).dna).copy_dna( this.brainmob.dna );
			}
			this.brainmob.timeofhostdeath = L.timeofdeath;
			this.brainmob.stat = 0;

			if ( this.brainmob.mind != null ) {
				this.brainmob.mind.assigned_role = "Positronic Brain";
			}

			if ( L.mind != null ) {
				L.mind.transfer_to( this.brainmob );
			}
			this.brainmob.mind.remove_all_antag();
			this.brainmob.mind.wipe_memory();
			this.brainmob.WriteMsg( "<span class='warning'>ALL PAST LIVES ARE FORGOTTEN.</span>" );
			this.brainmob.WriteMsg( "<span class='notice'>Hello World!</span>" );
			this.update_icon();
			return;
		}

		// Function from file: posibrain.dm
		public override void attack_ghost( Mob user = null ) {
			this.activate( user );
			return;
		}

		// Function from file: posibrain.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.brainmob != null && !Lang13.Bool( this.brainmob.key ) && !this.notified ) {
				user.WriteMsg( "<span class='notice'>You carefully locate the manual activation switch and start the positronic brain's boot process.</span>" );
				this.ping_ghosts( "requested" );
				this.notified = true;
				this.used = false;
				this.update_icon();
				Task13.Schedule( this.askDelay, (Task13.Closure)(() => {
					this.notified = false;
					this.update_icon();

					if ( this.brainmob.stat == 0 && this.brainmob.client != null ) {
						this.visible_message( "<span class='notice'>The positronic brain pings, and its lights start flashing. Success!</span>" );
					} else {
						this.visible_message( "<span class='notice'>The positronic brain buzzes quietly, and the golden lights fade away. Perhaps you could try again?</span>" );
					}
					return;
				}));
			}
			return null;
		}

		// Function from file: posibrain.dm
		public void transfer_personality( Mob candidate = null ) {
			
			if ( this.used || this.brainmob != null && Lang13.Bool( this.brainmob.key ) ) {
				candidate.WriteMsg( "This brain has already been taken! Please try your possesion again later!" );
				return;
			}
			this.notified = false;
			this.brainmob.ckey = candidate.ckey;
			this.name = "positronic brain (" + this.brainmob.name + ")";
			this.brainmob.WriteMsg( "<span class='warning'>ALL PAST LIVES ARE FORGOTTEN.</span>" );
			this.brainmob.WriteMsg( "<b>You are a positronic brain, brought into existence on " + GlobalFuncs.station_name() + ".</b>" );
			this.brainmob.WriteMsg( "<b>As a synthetic intelligence, you answer to all crewmembers, as well as the AI.</b>" );
			this.brainmob.WriteMsg( "<b>Remember, the purpose of your existence is to serve the crew and the station. Above all else, do no harm.</b>" );
			this.brainmob.mind.assigned_role = "Positronic Brain";
			this.visible_message( "<span class='notice'>The positronic brain chimes quietly.</span>" );
			this.update_icon();
			this.used = true;
			return;
		}

		// Function from file: posibrain.dm
		public void activate( Mob user = null ) {
			string posi_ask = null;

			
			if ( this.used || this.brainmob != null && Lang13.Bool( this.brainmob.key ) || GlobalFuncs.jobban_isbanned( user, "posibrain" ) ) {
				return;
			}
			posi_ask = Interface13.Alert( "Become a positronic brain? (Warning, You can no longer be cloned, and all past lives will be forgotten!)", "Are you positive?", "Yes", "No" );

			if ( posi_ask == "No" || Lang13.Bool( this.gc_destroyed ) ) {
				return;
			}
			this.transfer_personality( user );
			return;
		}

		// Function from file: posibrain.dm
		public void ping_ghosts( string msg = null ) {
			
			if ( !GlobalVars.posibrain_notif_cooldown ) {
				GlobalFuncs.notify_ghosts( "Positronic brain " + msg + " in " + GlobalFuncs.get_area( this ) + "!", "sound/effects/ghost2.ogg", new Txt( "<a href=?src=" ).Ref( this ).str( ";activate=1>(Click to enter)</a>" ).ToString(), this, null, true );
				GlobalVars.posibrain_notif_cooldown = true;
				Task13.Schedule( this.askDelay, (Task13.Closure)(() => {
					GlobalVars.posibrain_notif_cooldown = false;
					return;
				}));
			}
			return;
		}

		// Function from file: posibrain.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob ghost = null;

			
			if ( Lang13.Bool( href_list["activate"] ) ) {
				ghost = Task13.User;

				if ( ghost is Mob_Dead_Observer ) {
					this.activate( ghost );
				}
			}
			return null;
		}

	}

}