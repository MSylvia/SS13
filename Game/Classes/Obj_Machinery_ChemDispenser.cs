// FILE AUTOGENERATED BY SOM13. DO NOT EDIT YET.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ChemDispenser : Obj_Machinery {

		public int energy = 100;
		public double max_energy = 100;
		public double? amount = 30;
		public double recharged = 0;
		public double recharge_delay = 5;
		public Image icon_beaker = null;
		public dynamic beaker = null;
		public dynamic dispensable_reagents = new ByTable(new object [] { 
											"hydrogen", 
											"lithium", 
											"carbon", 
											"nitrogen", 
											"oxygen", 
											"fluorine", 
											"sodium", 
											"aluminium", 
											"silicon", 
											"phosphorus", 
											"sulfur", 
											"chlorine", 
											"potassium", 
											"iron", 
											"copper", 
											"mercury", 
											"radium", 
											"water", 
											"ethanol", 
											"sugar", 
											"sacid", 
											"welding_fuel", 
											"silver", 
											"iodine", 
											"bromine", 
											"stable_plasma"
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 40;
			this.interact_offline = true;
			this.icon = "icons/obj/chemical.dmi";
			this.icon_state = "dispenser";
		}

		// Function from file: chem_dispenser.dm
		public Obj_Machinery_ChemDispenser ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.recharge();
			this.dispensable_reagents = GlobalFuncs.sortList( this.dispensable_reagents );
			return;
		}

		// Function from file: chem_dispenser.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: chem_dispenser.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic B = null;

			
			if ( this.default_unfasten_wrench( user, A ) ) {
				return null;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				return null;
			}
			B = A;

			if ( !( B is Obj_Item_Weapon_ReagentContainers ) ) {
				return null;
			}

			if ( Lang13.Bool( this.beaker ) ) {
				user.WriteMsg( "<span class='warning'>A beaker is already loaded into the machine!</span>" );
				return null;
			}

			if ( !Lang13.Bool( user.drop_item() ) ) {
				return null;
			}
			this.beaker = B;
			this.beaker.loc = this;
			user.WriteMsg( "<span class='notice'>You add the beaker to the machine.</span>" );

			if ( !( this.icon_beaker != null ) ) {
				this.icon_beaker = new Image( "icons/obj/chemical.dmi", this, "disp_beaker" );
			}
			this.icon_beaker.pixel_x = Rand13.Int( -10, 5 );
			this.overlays.Add( this.icon_beaker );
			return null;
		}

		// Function from file: chem_dispenser.dm
		public override bool ui_act( dynamic action = null, ByTable _params = null ) {
			double? amount = null;
			Reagents R = null;
			dynamic space = null;
			double? amount2 = null;

			
			if ( base.ui_act( (object)(action), _params ) ) {
				return false;
			}

			dynamic _a = action; // Was a switch-case, sorry for the mess.
			if ( _a=="amount" ) {
				amount = String13.ParseNumber( _params["amount"] );

				if ( this.beaker.possible_transfer_amounts.Contains( amount ) ) {
					this.amount = amount;
				}
			} else if ( _a=="dispense" ) {
				
				if ( Lang13.Bool( this.beaker ) && this.dispensable_reagents.Find( _params["reagent"] ) != 0 ) {
					R = this.beaker.reagents;
					space = R.maximum_volume - R.total_volume;
					R.add_reagent( _params["reagent"], Num13.MinInt( ((int)( this.amount ??0 )), this.energy * 10, Convert.ToInt32( space ) ) );
					this.energy = Num13.MaxInt( ((int)( this.energy - Num13.MinInt( ((int)( this.amount ??0 )), this.energy * 10, Convert.ToInt32( space ) ) / 10 )), 0 );
				}
			} else if ( _a=="remove" ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					amount2 = String13.ParseNumber( _params["amount"] );

					if ( Lang13.Bool( Lang13.IsNumber( amount2 ) ) && ( amount2 ??0) > 0 && this.beaker.possible_transfer_amounts.Contains( amount2 ) ) {
						((Reagents)this.beaker.reagents).remove_all( amount2 );
					}
				}
			} else if ( _a=="eject" ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					this.beaker.loc = this.loc;
					this.beaker = null;
					this.overlays.Cut();
				}
			}
			return true;
		}

		// Function from file: chem_dispenser.dm
		public override ByTable get_ui_data( dynamic user = null ) {
			ByTable data = null;
			ByTable beakerContents = null;
			double beakerCurrentVolume = 0;
			Reagent R = null;
			ByTable chemicals = null;
			dynamic re = null;
			dynamic temp = null;

			data = new ByTable();
			data["amount"] = this.amount;
			data["energy"] = this.energy;
			data["maxEnergy"] = this.max_energy;
			data["isBeakerLoaded"] = ( Lang13.Bool( this.beaker ) ? true : false );
			beakerContents = new ByTable( 0 );
			beakerCurrentVolume = 0;

			if ( Lang13.Bool( this.beaker ) && Lang13.Bool( this.beaker.reagents ) && Lang13.Bool( this.beaker.reagents.reagent_list.len ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.beaker.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					beakerContents.Add( new ByTable(new object [] { new ByTable().Set( "name", R.name ).Set( "volume", R.volume ) }) );
					beakerCurrentVolume += R.volume;
				}
			}
			data["beakerContents"] = beakerContents;

			if ( Lang13.Bool( this.beaker ) ) {
				data["beakerCurrentVolume"] = beakerCurrentVolume;
				data["beakerMaxVolume"] = this.beaker.volume;
				data["beakerTransferAmounts"] = this.beaker.possible_transfer_amounts;
			} else {
				data["beakerCurrentVolume"] = null;
				data["beakerMaxVolume"] = null;
				data["beakerTransferAmounts"] = null;
			}
			chemicals = null;
			chemicals = new ByTable( 0 );

			foreach (dynamic _b in Lang13.Enumerate( this.dispensable_reagents )) {
				re = _b;
				
				temp = GlobalVars.chemical_reagents_list[re];

				if ( Lang13.Bool( temp ) ) {
					chemicals.Add( new ByTable(new object [] { new ByTable().Set( "title", temp.name ).Set( "id", temp.id ) }) );
				}
			}
			data["chemicals"] = chemicals;
			return data;
		}

		// Function from file: chem_dispenser.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "chem_dispenser", this.name, 550, 550, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: chem_dispenser.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			this.ui_interact( user );
			return null;
		}

		// Function from file: chem_dispenser.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: chem_dispenser.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			if ( ( severity ??0) < 3 ) {
				base.ex_act( severity, (object)(target) );
			}
			return false;
		}

		// Function from file: chem_dispenser.dm
		public void recharge(  ) {
			bool addenergy = false;
			int oldenergy = 0;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}
			addenergy = true;
			oldenergy = this.energy;
			this.energy = Num13.MinInt( this.energy + ( addenergy ?1:0), ((int)( this.max_energy )) );

			if ( this.energy != oldenergy ) {
				this.f_use_power( 2500 );
			}
			return;
		}

		// Function from file: chem_dispenser.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( this.recharged < 0 ) {
				this.recharge();
				this.recharged = this.recharge_delay;
			} else {
				this.recharged -= 1;
			}
			return null;
		}

		// Function from file: chem_dispenser.dm
		public override void power_change(  ) {
			
			if ( Lang13.Bool( this.powered() ) ) {
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.stat |= 2;
					return;
				}));
			}
			return;
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.WriteMsg( "<span class='warning'>The volatile chemicals in this machine would destroy us. Aborting.</span>" );
			return;
		}

	}

}