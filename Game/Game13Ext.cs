// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Game;

// THIS EXTENDS THE ENGINE'S GAME CLASS!

namespace Somnium.Engine.ByImpl {
	static partial class Game13 {
		public static string name = "Baystation12";
		private static double _tick_lag = 1;
		public const int icon_size = 32;

		public static readonly Type default_mob = typeof(Mob_NewPlayer);
		public static readonly Type default_tile = typeof(Tile_Space);
		public static readonly Type default_zone = typeof(Zone);


		// Function from file: world.dm
		public static dynamic New(  ) {
			int? i = null;
			string date_string = null;
			string log_start = null;
			string ourround = null;
			dynamic plugin_type = null;
			dynamic P = null;

			GlobalVars.plant_controller = new Controller_Plants();
			i = null;
			i = 1;

			while (( i ??0) <= GlobalVars.map.zLevels.len) {
				GlobalVars.WORLD_X_OFFSET.Add( Rand13.Int( -50, 50 ) );
				GlobalVars.WORLD_Y_OFFSET.Add( Rand13.Int( -50, 50 ) );
				i++;
			}
			GlobalVars.on_login = new _Event();
			GlobalVars.on_ban = new _Event();
			GlobalVars.on_unban = new _Event();
			date_string = String13.FormatTime( Game13.realtime, "YYYY/MM-Month/DD-Day" );
			GlobalVars.investigations["hrefs"] = new LogController( "hrefs", GlobalVars.TRUE, "data/logs/" + date_string + " hrefs.htm" );
			GlobalVars.investigations["atmos"] = new LogController( "atmos", GlobalVars.TRUE, "data/logs/" + date_string + " atmos.htm" );
			GlobalVars.diary = new File( "data/logs/" + date_string + ".log" );
			GlobalVars.panicfile = new SaveFile( "data/logs/profiling/proclogs/" + date_string + ".sav" );
			GlobalVars.diaryofmeanpeople = new File( "data/logs/" + date_string + " Attack.log" );
			GlobalVars.admin_diary = new File( "data/logs/" + date_string + " admin only.log" );
			log_start = "---------------------\n[" + GlobalFuncs.time_stamp() + "]WORLD: starting up...";
			GlobalVars.diary.WriteMsg( log_start );
			GlobalVars.diaryofmeanpeople.WriteMsg( log_start );
			GlobalVars.admin_diary.WriteMsg( log_start );
			ourround = GlobalFuncs.time_stamp();
			GlobalVars.panicfile.cd = ourround;
			GlobalVars.changelog_hash = Num13.Md5( File13.Read( "html/changelog.html" ) );

			if ( Game13.byond_version < 507 ) {
				Game13.log.WriteMsg( "## WARNING: " + "Your server's byond version does not meet the recommended requirements for this code. Please update BYOND to atleast 507.1248 or comment BORDER_USE_TURF_EXIT in global.dm" );
			}
			GlobalFuncs.make_datum_references_lists();
			Game13.load_configuration();
			Game13.load_mode();
			Game13.load_motd();
			GlobalFuncs.load_admins();
			Game13.load_mods();
			GlobalFuncs.LoadBansjob();

			if ( GlobalVars.config.usewhitelist ) {
				GlobalFuncs.load_whitelist();
			}

			if ( GlobalVars.config.usealienwhitelist ) {
				GlobalFuncs.load_alienwhitelist();
			}
			GlobalFuncs.jobban_loadbanfile();
			GlobalFuncs.jobban_updatelegacybans();
			GlobalFuncs.appearance_loadbanfile();
			GlobalFuncs.LoadBans();
			GlobalFuncs.SetupHooks();
			GlobalVars.library_catalog.initialize();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.copy_logs();
				return;
			}));

			if ( GlobalVars.config != null && GlobalVars.config.log_runtimes ) {
				Game13.log = new File( "data/logs/runtime/" + String13.FormatTime( Game13.realtime, "YYYY-MM-DD" ) + "-runtime.log" );
			}

			if ( GlobalVars.config != null && GlobalVars.config.server_name != null && GlobalVars.config.server_suffix && Game13.port > 0 ) {
				GlobalVars.config.server_name += " #" + Game13.port % 1000 / 100;
			}
			GlobalFuncs.Get_Holiday();
			Game13.update_status();
			GlobalFuncs.makepowernets();
			GlobalFuncs.paperwork_setup();
			GlobalVars.radio_controller = new Controller_Radio();
			GlobalVars.data_core = new Obj_Effect_Datacore();
			GlobalVars.paiController = new PaiController();

			if ( !GlobalFuncs.setup_database_connection() ) {
				Game13.log.WriteMsg( "Your server failed to establish a connection with the feedback database." );
			} else {
				Game13.log.WriteMsg( "Feedback database connection established." );
			}
			GlobalVars.migration_controller_mysql = new MigrationController_Mysql();
			GlobalVars.migration_controller_sqlite = new MigrationController_Sqlite( "players2.sqlite", "players2_empty.sqlite" );

			if ( !GlobalFuncs.setup_old_database_connection() ) {
				Game13.log.WriteMsg( "Your server failed to establish a connection with the tgstation database." );
			} else {
				Game13.log.WriteMsg( "Tgstation database connection established." );
			}
			GlobalVars.plmaster = new Obj_Effect_Overlay();
			GlobalVars.plmaster.icon = "icons/effects/tile_effects.dmi";
			GlobalVars.plmaster.icon_state = "plasma";
			GlobalVars.plmaster.layer = GlobalVars.FLY_LAYER;
			GlobalVars.plmaster.mouse_opacity = 0;
			GlobalVars.slmaster = new Obj_Effect_Overlay();
			GlobalVars.slmaster.icon = "icons/effects/tile_effects.dmi";
			GlobalVars.slmaster.icon_state = "sleeping_agent";
			GlobalVars.slmaster.layer = GlobalVars.FLY_LAYER;
			GlobalVars.slmaster.mouse_opacity = 0;
			Game13.update_status();
			Game13.sleep_offline = true;
			GlobalFuncs.send2mainirc( "Server starting up on " + ( Lang13.Bool( GlobalVars.config.server ) ? "byond://" + GlobalVars.config.server : "byond://" + Game13.address + ":" + Game13.port ) );
			GlobalVars.processScheduler = new Controller_ProcessScheduler();
			GlobalVars.master_controller = new Controller_GameController();
			Task13.Schedule( 1, (Task13.Closure)(() => {
				GlobalVars.turfs = new ByTable( Game13.map_size_x * Game13.map_size_y * Game13.map_size_z );
				Game13.log.WriteMsg( "DEBUG: TURFS LIST LENGTH " + GlobalVars.turfs.len );
				Game13.build_turfs_list();
				GlobalVars.processScheduler.deferSetupFor( typeof(Controller_Process_Ticker) );
				GlobalVars.processScheduler.setup();
				GlobalVars.master_controller.setup();
				GlobalFuncs.setup_species();
				GlobalFuncs.setup_shuttles();
				GlobalVars.stat_collection.artifacts_discovered = 0;
				return;
			}));

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Plugin) ) )) {
				plugin_type = _a;
				
				P = Lang13.Call( plugin_type );
				GlobalVars.plugins[P.name] = P;
				((Plugin)P).on_world_loaded();
			}
			GlobalFuncs.process_teleport_locs();
			GlobalFuncs.process_ghost_teleport_locs();
			GlobalFuncs.process_adminbus_teleport_locs();
			GlobalFuncs.SortAreas();
			Task13.Schedule( 2000, (Task13.Closure)(() => {
				
				if ( GlobalVars.config.ToRban ) {
					GlobalFuncs.ToRban_autoupdate();
				}
				return;
			}));

			return null;
		}

		// Function from file: IsBanned.dm
		public static dynamic IsBanned( string key = null, dynamic address = null, int computer_id = 0 ) {
			dynamic _default = null;

			dynamic what = null;
			string desc = null;
			string ckeytext = null;
			bool failedcid = false;
			bool failedip = false;
			string ipquery = null;
			string cidquery = null;
			DBQuery query = null;
			dynamic pckey = null;
			dynamic ackey = null;
			dynamic reason = null;
			dynamic expiration = null;
			string duration = null;
			dynamic bantime = null;
			dynamic bantype = null;
			string desc2 = null;
			string expires = null;
			dynamic what2 = null;
			string desc3 = null;

			
			if ( !Lang13.Bool( key ) || !Lang13.Bool( address ) || !( computer_id != 0 ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Failed Login (invalid data): " + key + " " + address + "-" + computer_id ) ) );
				return new ByTable()
					.Set( "reason", "invalid login data" )
					.Set( "desc", "Your computer provided invalid or blank information to the server on connection (byond username, IP, and Computer ID.) Provided information for reference: Username: '" + key + "' IP: '" + address + "' Computer ID: '" + computer_id + "', If you continue to get this error, please restart byond or contact byond support." )
				;
			}

			if ( computer_id == 2147483648 ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Failed Login (invalid cid): " + key + " " + address + "-" + computer_id ) ) );
				return new ByTable().Set( "reason", "invalid login data" ).Set( "desc", "Error: Could not check ban status, Please try again. Error message: Your computer provided an invalid Computer ID.)" );
			}
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "IsBanned: Checking " + String13.CKey( key ) + ", " + address + ", " + computer_id ) ) );

			if ( !GlobalVars.guests_allowed && GlobalFuncs.IsGuestKey( key ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Failed Login: " + key + " - Guests not allowed" ) ) );
				GlobalFuncs.message_admins( "<span class='notice'>Failed Login: " + key + " - Guests not allowed</span>" );
				return new ByTable().Set( "reason", "guest" ).Set( "desc", "\nReason: Guests not allowed. Please sign in with a byond account." );
			}

			if ( GlobalVars.config != null && GlobalVars.config.ToRban && GlobalFuncs.ToRban_isbanned( address ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Failed Login: " + typeof(Game13) + " - Banned: ToR" ) ) );
				GlobalFuncs.message_admins( "<span class='notice'>Failed Login: " + typeof(Game13) + " - Banned: ToR</span>" );
				GlobalFuncs.AddBan( String13.CKey( key ), computer_id, "Use of ToR", "Automated Ban", false, 0 );
				return new ByTable()
					.Set( "reason", "Using ToR" )
					.Set( "desc", "\nReason: The network you are using to connect has been banned.\nIf you believe this is a mistake, please request help at " + GlobalVars.config.banappeals )
				;
			}

			if ( GlobalVars.config.ban_legacy_system ) {
				_default = GlobalFuncs.CheckBan( String13.CKey( key ), computer_id, address );

				if ( Lang13.Bool( _default ) ) {
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Failed Login: " + key + " " + computer_id + " " + address + " - Banned " + _default["reason"] ) ) );
					GlobalFuncs.message_admins( "<span class='notice'>Failed Login: " + key + " id:" + computer_id + " ip:" + address + " - Banned " + _default["reason"] + "</span>" );
					return _default;
				}
				_default = Game13._internal_IsBanned( key, address, computer_id );
				what = _default;

				if ( what is ByTable ) {
					GlobalFuncs.message_admins( "Attempted stickyban login key: " + what["keys"] + " IP: " + what["IP"] + " CID: " + what["computer_id"] + " Admin: " + what["admin"] );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Attempted stickyban login key: " + what["keys"] + " IP: " + what["IP"] + " CID: " + what["computer_id"] + " Admin: " + what["admin"] ) ) );

					if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
						desc = "\nReason: You, or another user of this computer or connection (" + String13.CKey( key ) + ") is banned from playing here. The ban reason is:\n" + what["message"] + "\nThis ban was applied by " + what["admin"] + "\nBan type: Permanent \nExpires: Never \nAppeal: " + GlobalVars.config.banappeals;
					} else {
						desc = "\nReason: You, or another user of this computer or connection (" + String13.CKey( key ) + ") is banned from playing here. The ban reason is:\n" + what["message"] + "\nThis ban was applied by " + what["admin"] + "\nBan type: Permanent \nExpires: Never \nAppeal: <span class='warning'>No ban appeals link set</span>";
						what.Remove( "message" );
						what["desc"] = "" + desc;
						what["reason"] = "Permanent";
					}
				}
				return _default;
			} else {
				ckeytext = String13.CKey( key );

				if ( !GlobalFuncs.establish_db_connection() ) {
					Game13.log.WriteMsg( "Ban database connection failure. Key " + ckeytext + " not checked" );
					GlobalVars.diary.WriteMsg( "Ban database connection failure. Key " + ckeytext + " not checked" );
					return _default;
				}
				failedcid = true;
				failedip = true;
				ipquery = "";
				cidquery = "";

				if ( Lang13.Bool( address ) ) {
					failedip = false;
					ipquery = " OR ip = '" + address + "' ";
				}

				if ( computer_id != 0 ) {
					failedcid = false;
					cidquery = " OR computerid = '" + computer_id + "' ";
				}
				query = GlobalVars.dbcon.NewQuery( "SELECT ckey, ip, computerid, a_ckey, reason, expiration_time, duration, bantime, bantype FROM erro_ban WHERE (ckey = '" + ckeytext + "' " + ipquery + " " + cidquery + ") AND (bantype = 'PERMABAN'  OR (bantype = 'TEMPBAN' AND expiration_time > Now())) AND isnull(unbanned)" );
				query.Execute();

				while (query.NextRow()) {
					pckey = query.item[1];
					ackey = query.item[4];
					reason = query.item[5];
					expiration = query.item[6];
					duration = query.item[7];
					bantime = query.item[8];
					bantype = query.item[9];
					desc2 = "";
					expires = "";

					if ( ( String13.ParseNumber( duration ) ??0) > 0 ) {
						expires = " The ban is for " + duration + " minutes and expires on " + expiration + " (server time).";
					}

					if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
						desc2 = "\nReason: You, or another user of this computer or connection (" + pckey + ") is banned from playing here. The ban reason is:\n" + reason + "\nThis ban was applied by " + ackey + " on " + bantime + " \nBan type: " + bantype + " \nExpires: " + expires + " \nAppeal: " + GlobalVars.config.banappeals;
					} else {
						desc2 = "\nReason: You, or another user of this computer or connection (" + pckey + ") is banned from playing here. The ban reason is:\n" + reason + "\nThis ban was applied by " + ackey + " on " + bantime + " \nBan type: " + bantype + " \nExpires: " + expires + " \nAppeal: <span class='warning'>No ban appeals link set</span>";
					}
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Failed Login: " + key + " " + computer_id + " " + address + " - Banned " + desc2 ) ) );
					return new ByTable().Set( "reason", "" + bantype ).Set( "desc", "" + desc2 );
				}

				if ( failedcid ) {
					GlobalFuncs.message_admins( "" + key + " has logged in with a blank computer id in the ban check." );
				}

				if ( failedip ) {
					GlobalFuncs.message_admins( "" + key + " has logged in with a blank ip in the ban check." );
				}
				_default = Game13._internal_IsBanned( key, address, computer_id );
				what2 = _default;

				if ( what2 is ByTable ) {
					GlobalFuncs.message_admins( "Attempted stickyban login key: " + what2["keys"] + " IP: " + what2["IP"] + " CID: " + what2["computer_id"] + " Admin: " + what2["admin"] );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Attempted stickyban login key: " + what2["keys"] + " IP: " + what2["IP"] + " CID: " + what2["computer_id"] + " Admin: " + what2["admin"] ) ) );

					if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
						desc3 = "\nReason: You, or another user of this computer or connection (" + String13.CKey( key ) + ") is banned from playing here. The ban reason is:\n" + what2["message"] + "\nThis ban was applied by " + what2["admin"] + "\nBan type: Permanent \nExpires: Never \nAppeal: " + GlobalVars.config.banappeals;
					} else {
						desc3 = "\nReason: You, or another user of this computer or connection (" + String13.CKey( key ) + ") is banned from playing here. The ban reason is:\n" + what2["message"] + "\nThis ban was applied by " + what2["admin"] + "\nBan type: Permanent \nExpires: Never \nAppeal: <span class='warning'>No ban appeals link set</span>";
						what2.Remove( "message" );
						what2["desc"] = "" + desc3;
						what2["reason"] = "Permanent";
					}
				}
				return _default;
			}
		}

		// Function from file: unsorted.dm
		public static void Error( dynamic e = null ) {
			GlobalFuncs.print_runtime( e );
			return;
		}

		// Function from file: world.dm
		public static void build_turfs_list(  ) {
			int count = 0;
			double Z = 0;
			dynamic T = null;

			count = 0;

			foreach (dynamic _b in Lang13.IterateRange( 1, Game13.map_size_z )) {
				Z = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInBlock( Map13.GetTile( 1, 1, ((int)( Z )) ), Map13.GetTile( Game13.map_size_x, Game13.map_size_y, ((int)( Z )) ) ) )) {
					T = _a;
					

					if ( !( count % 50000 != 0 ) ) {
						Task13.Sleep( ((int)( Game13.tick_lag )) );
					}
					count++;
					T.initialize();
					GlobalVars.turfs[count] = T;
				}
			}
			return;
		}

		// Function from file: world.dm
		public static void update_status(  ) {
			string s = null;
			ByTable features = null;
			int n = 0;
			dynamic M = null;

			s = "";

			if ( GlobalVars.config != null && Lang13.Bool( GlobalVars.config.server_name ) ) {
				s += "<b>" + GlobalVars.config.server_name + "</b> &#8212; ";
			}
			s += "<b>" + GlobalFuncs.station_name() + @"</b>""
		(
		<a href=""http://"">"" //Change this to wherever you want the hub to link to
		Default""  //Replace this with something else. Or ever better, delete it and uncomment the game version
		</a>
		)";
			features = new ByTable();

			if ( GlobalVars.ticker != null ) {
				
				if ( Lang13.Bool( GlobalVars.master_mode ) ) {
					features.Add( GlobalVars.master_mode );
				}
			} else {
				features.Add( "<b>STARTING</b>" );
			}

			if ( !GlobalVars.enter_allowed ) {
				features.Add( "closed" );
			}
			features.Add( ( GlobalVars.abandon_allowed ? "respawn" : "no respawn" ) );

			if ( GlobalVars.config != null && GlobalVars.config.allow_vote_mode ) {
				features.Add( "vote" );
			}

			if ( GlobalVars.config != null && GlobalVars.config.allow_ai ) {
				features.Add( "AI allowed" );
			}
			n = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					n++;
				}
			}

			if ( n > 1 ) {
				features.Add( "~" + n + " players" );
			} else if ( n > 0 ) {
				features.Add( "~" + n + " player" );
			}

			if ( !Lang13.Bool( Game13.host ) && GlobalVars.config != null && Lang13.Bool( GlobalVars.config.hostedby ) ) {
				features.Add( "hosted by <b>" + GlobalVars.config.hostedby + "</b>" );
			}

			if ( features != null ) {
				s += ": " + GlobalFuncs.list2text( features, ", " );
			}

			if ( Game13.status != s ) {
				Game13.status = s;
			}
			return;
		}

		// Function from file: world.dm
		public static void load_mods(  ) {
			string text = null;
			ByTable lines = null;
			dynamic line = null;
			dynamic rights = null;
			string ckey = null;
			Admins D = null;

			
			if ( GlobalVars.config.admin_legacy_system ) {
				text = File13.Read( "config/moderators.txt" );

				if ( !Lang13.Bool( text ) ) {
					GlobalVars.diary.WriteMsg( "Failed to load config/mods.txt\n" );
				} else {
					lines = GlobalFuncs.text2list( text, "\n" );

					foreach (dynamic _a in Lang13.Enumerate( lines )) {
						line = _a;
						

						if ( !Lang13.Bool( line ) ) {
							continue;
						}

						if ( String13.SubStr( line, 1, 2 ) == ";" ) {
							continue;
						}
						rights = GlobalVars.admin_ranks["Moderator"];
						ckey = String13.SubStr( line, 1, Lang13.Length( line ) + 1 );
						D = new Admins( "Moderator", rights, ckey );
						D.associate( GlobalVars.directory[ckey] );
					}
				}
			}
			return;
		}

		// Function from file: world.dm
		public static void load_configuration(  ) {
			GlobalVars.config = new Configuration();
			GlobalVars.config.load( "config/config.txt" );
			GlobalVars.config.load( "config/game_options.txt", "game_options" );
			GlobalVars.config.loadsql( "config/dbconfig.txt" );
			GlobalVars.config.loadforumsql( "config/forumdbconfig.txt" );
			GlobalVars.abandon_allowed = GlobalVars.config.respawn;
			return;
		}

		// Function from file: world.dm
		public static void load_motd(  ) {
			GlobalVars.join_motd = File13.Read( "config/motd.txt" );
			return;
		}

		// Function from file: world.dm
		public static void save_mode( dynamic the_mode = null ) {
			dynamic F = null;

			F = new File( "data/mode.txt" );
			File13.Delete( F );
			GlobalFuncs.to_chat( F, the_mode );
			return;
		}

		// Function from file: world.dm
		public static void load_mode(  ) {
			ByTable Lines = null;

			Lines = GlobalFuncs.file2list( "data/mode.txt" );

			if ( Lines.len != 0 ) {
				
				if ( Lang13.Bool( Lines[1] ) ) {
					GlobalVars.master_mode = Lines[1];
					GlobalVars.diary.WriteMsg( "Saved mode is '" + GlobalVars.master_mode + "'" );
				}
			}
			return;
		}

		// Function from file: world.dm
		public static void KickInactiveClients(  ) {
			dynamic C = null;

			Task13.Schedule( -1, (Task13.Closure)(() => {
				
				while (true) {
					Task13.Sleep( 6000 );

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.clients )) {
						C = _a;
						

						if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
							continue;
						}

						if ( ((Client)C).is_afk( 6000 ) != 0 ) {
							
							if ( !( C.mob is Mob_Dead ) ) {
								GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "AFK: " + GlobalFuncs.key_name( C ) ) ) );
								GlobalFuncs.to_chat( C, "<span class='warning'>You have been inactive for more than 10 minutes and have been disconnected.</span>" );
								Lang13.Delete( C );
								C = null;
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: world.dm
		public static void Reboot( dynamic reason = null ) {
			int start = 0;
			int pos = 0;
			int lastpos = 0;
			string filename = null;
			dynamic C = null;

			
			if ( GlobalVars.config.map_voting ) {
				
				if ( File13.Exists( GlobalVars.vote.chosen_map ) ) {
					start = 1;
					pos = String13.FindIgnoreCase( GlobalVars.vote.chosen_map, "/", start, 0 );
					lastpos = pos;

					while (pos > 0) {
						lastpos = pos;
						pos = String13.FindIgnoreCase( GlobalVars.vote.chosen_map, "/", start, 0 );
						start = pos + 1;
					}
					filename = String13.SubStr( GlobalVars.vote.chosen_map, lastpos + 1, 0 );

					if ( !File13.Copy( GlobalVars.vote.chosen_map, filename ) ) {
						File13.Delete( filename );
						File13.Copy( GlobalVars.vote.chosen_map, filename );
					}
					Task13.Sleep( 60 );
				}
			}
			GlobalVars.processScheduler.stop();
			GlobalFuncs.paperwork_stop();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				Game13.WriteMsg( new Sound( Rand13.Pick(new object [] { "sound/AI/newroundsexy.ogg", "sound/misc/apcdestroyed.ogg", "sound/misc/bangindonk.ogg", "sound/misc/slugmissioncomplete.ogg" }) ) );
				return;
			}));

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.clients )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( Lang13.Bool( GlobalVars.config.server ) ) {
					Interface13.Link( C, "byond://" + GlobalVars.config.server );
				} else {
					Interface13.Link( C, "byond://" + Game13.address + ":" + Game13.port );
				}
			}
			Game13._internal_Reboot( reason );
			return;
		}

		// Function from file: world.dm
		public static dynamic Topic( string T = null, dynamic addr = null, dynamic master = null, dynamic key = null ) {
			int x = 0;
			dynamic C = null;
			int n = 0;
			dynamic M = null;
			ByTable s = null;
			int n2 = 0;
			int admins = 0;
			dynamic C2 = null;
			string notekey = null;

			GlobalVars.diary.WriteMsg( "TOPIC: \"" + T + "\", from:" + addr + ", master:" + master + ", key:" + key );

			if ( T == "ping" ) {
				x = 1;

				foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) { // THERE IS A SMALL CHANCE THIS LOOP IS BROKEN! TYPECODE = 16384
					C = _a;
					
					x++;
				}
				return x;
			} else if ( T == "players" ) {
				n = 0;

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _b;
					

					if ( Lang13.Bool( M.client ) ) {
						n++;
					}
				}
				return n;
			} else if ( T == "status" ) {
				s = new ByTable();
				s["version"] = GlobalVars.game_version;
				s["mode"] = GlobalVars.master_mode;
				s["respawn"] = ( GlobalVars.config != null ? GlobalVars.abandon_allowed : false );
				s["enter"] = GlobalVars.enter_allowed;
				s["vote"] = GlobalVars.config.allow_vote_mode;
				s["ai"] = GlobalVars.config.allow_ai;
				s["host"] = ( Lang13.Bool( Game13.host ) ? Game13.host : null );
				s["players"] = new ByTable();
				s["map_name"] = GlobalVars.map.nameLong;
				s["gamestate"] = 1;

				if ( GlobalVars.ticker != null ) {
					s["gamestate"] = GlobalVars.ticker.current_state;
				}
				s["active_players"] = GlobalFuncs.get_active_player_count();
				s["revision"] = GlobalFuncs.return_revision();
				n2 = 0;
				admins = 0;

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.clients )) {
					C2 = _c;
					

					if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
						continue;
					}

					if ( Lang13.Bool( C2.holder ) ) {
						
						if ( Lang13.Bool( C2.holder.fakekey ) ) {
							continue;
						}
						admins++;
					}
					s["player" + n2] = C2.key;
					n2++;
				}
				s["players"] = n2;

				if ( GlobalVars.revdata != null ) {
					s["revision"] = GlobalVars.revdata.revision;
				}
				s["admins"] = admins;
				return String13.MakeUrlParams( s );
			} else if ( String13.FindIgnoreCase( T, "notes:", 1, 0 ) != 0 ) {
				notekey = String13.SubStr( T, 7, 0 );
				return String13.MakeUrlParams( GlobalFuncs.exportnotes( notekey ) );
			}
			return null;
		}

	}
}