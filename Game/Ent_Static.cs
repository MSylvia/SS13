// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Ent_Static : Base_Static {

		public bool ghost_read = true;
		public ByTable suit_fibers = null;
		public bool ghost_write = false;
		public bool blessed = false;
		public int? level = 2;
		public dynamic flags = 256;
		public ByTable fingerprints = null;
		public ByTable fingerprintshidden = null;
		public string fingerprintslast = null;
		public ByTable blood_DNA = null;
		public string blood_color = null;
		public int last_bumped = 0;
		public int pass_flags = 0;
		public bool throwpass = false;
		public double germ_level = 0;
		public double pressure_resistance = 101.32499694824219;
		public int penetration_dampening = 5;
		public dynamic reagents = null;
		public Game_Data materials = null;
		public ByTable starting_materials = null;
		public dynamic original_atom = null;
		public ByTable beams = null;
		public _Event on_destroyed = null;
		public _Event on_moved = null;
		public string labeled = null;
		public int min_harm_label = 0;
		public int harm_labeled = 0;
		public ByTable harm_label_examine = null;
		public ByTable last_beamchecks = null;
		public dynamic ignoreinvert = 0;
		public bool forceinvertredraw = false;
		public Appearance tempoverlay = null;
		public bool timestopped = false;
		public string canSmoothWith = null;
		public dynamic construction_delay_mult = null;
		public dynamic light_power = 1;
		public dynamic light_range = 0;
		public dynamic light_color = null;
		public LightSource light = null;
		public ByTable light_sources = null;
		public double? autoignition_temperature = 0;
		public bool on_fire = false;
		public double fire_fuel = 0;
		public string fire_dmi = "icons/effects/fire.dmi";
		public string fire_sprite = "fire";
		public Image fire_overlay = null;
		public Type ashtype = typeof(Obj_Effect_Decal_Cleanable_Ash);
		public double? melt_temperature = 0;
		public bool molten = false;
		public double volatility = 0.1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.layer = 2;
			this.dir = 2;
		}

		// Function from file: atoms.dm
		public Ent_Static ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic matID = null;

			this.on_destroyed = new _Event( null, this );
			this.on_moved = new _Event( null, this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.starting_materials != null ) {
				this.materials = GlobalFuncs.getFromPool( typeof(Materials), this );

				foreach (dynamic _a in Lang13.Enumerate( this.starting_materials )) {
					matID = _a;
					
					((dynamic)this.materials).addAmount( matID, this.starting_materials[matID] );
				}
			}
			this.AddToProfiler();
			return;
		}

		// Function from file: lighting_atom.dm
		public override dynamic Exited( Ent_Dynamic Obj = null, Ent_Static newloc = null ) {
			dynamic _default = null;

			LightSource L = null;

			_default = base.Exited( Obj, newloc );

			if ( !( newloc != null ) && Obj != null && newloc != this ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Obj.light_sources, typeof(LightSource) )) {
					L = _a;
					
					L.source_atom.update_light();
				}
			}
			return _default;
		}

		// Function from file: lighting_atom.dm
		public override dynamic Entered( Ent_Dynamic Obj = null, Ent_Static oldloc = null ) {
			dynamic _default = null;

			LightSource L = null;

			_default = base.Entered( Obj, oldloc );

			if ( Obj != null && oldloc != this ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Obj.light_sources, typeof(LightSource) )) {
					L = _a;
					
					L.source_atom.update_light();
				}
			}
			return _default;
		}

		// Function from file: atoms.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( Lang13.Bool( this.reagents ) ) {
				GlobalFuncs.qdel( this.reagents );
				this.reagents = null;
			}

			if ( this.materials != null ) {
				GlobalFuncs.returnToPool( this.materials );
			}
			this.invisibility = 101;

			if ( this.on_destroyed is _Event ) {
				this.on_destroyed.Invoke( new ByTable() );
			}

			if ( this.on_moved != null ) {
				this.on_moved.holder = null;
				this.on_moved = null;
			}

			if ( this.on_destroyed != null ) {
				this.on_destroyed.holder = null;
				this.on_destroyed = null;
			}

			if ( this.beams is ByTable && this.beams.len != 0 ) {
				this.beams.len = 0;
			}
			return null;
		}

		// Function from file: swapmaps.dm
		public override void Read( SaveFile F = null, dynamic __id = null, dynamic locorner = null ) {
			ByTable l = null;
			dynamic ic = null;

			
			if ( this.contents.len != 0 ) {
				l = this.contents;
			}
			base.Read( F, (object)(__id), (object)(locorner) );

			if ( !Lang13.Bool( this.icon ) && false ) {
				ic = F.ReadItem( "icon", ic );

				if ( ic is string ) {
					this.icon = GlobalVars.swapmaps_iconcache[ic];
				}
			}

			if ( l != null && this.contents != l ) {
				this.contents.Add( l );
				Lang13.Delete( l );
				l = null;
			}
			return;
		}

		// Function from file: swapmaps.dm
		public override void Write( SaveFile F = null ) {
			dynamic V = null;
			dynamic M = null;
			ByTable l = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.vars - "x" - "y" - "z" - "contents" - "icon" - "overlays" - "underlays" )) {
				V = _a;
				

				if ( Lang13.Bool( Lang13.IsSaved( this, V ) ) ) {
					
					if ( this.vars[V] != Lang13.Initial( this, V ) ) {
						F[V] = this.vars[V];
					} else {
						F.dir.Remove( V );
					}
				}
			}

			if ( this.icon != Lang13.Initial( this, "icon" ) ) {
				
				if ( Lang13.Bool( GlobalVars.swapmaps_iconcache ) && Lang13.Bool( GlobalVars.swapmaps_iconcache[this.icon] ) ) {
					F["icon"] = GlobalVars.swapmaps_iconcache[this.icon];
				}
			} else {
				F["icon"] = this.icon;
			}

			foreach (dynamic _b in Lang13.Enumerate( this )) {
				M = _b;
				

				if ( Lang13.Bool( M.key ) ) {
					break;
				}
			}

			if ( this.overlays.len != 0 ) {
				F["overlays"] = this.overlays;
			}

			if ( this.underlays.len != 0 ) {
				F["underlays"] = this.underlays;
			}

			if ( this.contents.len != 0 && !( this is Zone ) ) {
				l = this.contents;

				if ( Lang13.Bool( M ) ) {
					l = l.Copy();

					foreach (dynamic _c in Lang13.Enumerate( this )) {
						M = _c;
						

						if ( Lang13.Bool( M.key ) ) {
							l.Remove( M );
						}
					}
				}

				if ( l.len != 0 ) {
					F["contents"] = l;
				}

				if ( l != this.contents ) {
					Lang13.Delete( l );
					l = null;
				}
			}
			return;
		}

		// Function from file: atoms.dm
		public override void setGender( string gend = null ) {
			gend = gend ?? GlobalVars.FEMALE;

			this.gender = gend;
			return;
		}

		// Function from file: atoms.dm
		public override void Del(  ) {
			this.DeleteFromProfiler();
			base.Del();
			return;
		}

		// Function from file: drag_drop.dm
		public virtual dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			
			if ( !( Task13.User != null ) || !( over_object != null ) ) {
				return null;
			}

			if ( !this.Adjacent( Task13.User ) || !over_object.Adjacent( Task13.User ) ) {
				return null;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				over_object.MouseDrop_T( this, Task13.User );
				return;
			}));
			return null;
		}

		// Function from file: click.dm
		public override bool DblClick( dynamic _object = null, string location = null, string control = null, dynamic _params = null ) {
			Task13.User.DblClickOn( this, control );
			return false;
		}

		// Function from file: click.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			Task13.User.ClickOn( this, _params );
			return false;
		}

		// Function from file: Fire.dm
		public virtual bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( Lang13.Bool( this.autoignition_temperature ) && !this.on_fire && ( exposed_temperature ??0) > ( this.autoignition_temperature ??0) ) {
				this.ignite( exposed_temperature );
				return true;
			}
			return false;
		}

		// Function from file: Fire.dm
		public virtual void solidify(  ) {
			return;
		}

		// Function from file: Fire.dm
		public virtual void melt(  ) {
			return;
		}

		// Function from file: Fire.dm
		public virtual void ignite( double? temperature = null ) {
			this.on_fire = true;

			if ( Lang13.Bool( this.fire_dmi ) && Lang13.Bool( this.fire_sprite ) ) {
				this.fire_overlay = new Image( this.fire_dmi, this.fire_sprite );
				this.overlays.Add( this.fire_overlay );
			}
			return;
		}

		// Function from file: Fire.dm
		public virtual void extinguish(  ) {
			this.on_fire = false;

			if ( this.fire_overlay != null ) {
				this.overlays.Remove( this.fire_overlay );
			}
			return;
		}

		// Function from file: Fire.dm
		public virtual void ashify(  ) {
			
			if ( !this.on_fire ) {
				return;
			}
			Lang13.Call( this.ashtype, this.loc );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: Fire.dm
		public virtual void burnFireFuel( double used_fuel_ratio = 0, double used_reactants_ratio = 0 ) {
			this.fire_fuel -= this.fire_fuel * used_fuel_ratio * used_reactants_ratio;

			if ( this.fire_fuel <= 0.1 ) {
				this.ashify();
			}
			return;
		}

		// Function from file: Fire.dm
		public virtual double? getFireFuel(  ) {
			return this.fire_fuel;
		}

		// Function from file: Atom.dm
		public virtual int c_airblock( dynamic other = null ) {
			return ( !this.CanPass( null, other, 0, false ) ?1:0) + ( !this.CanPass( null, other, 1.5, true ) ?1:0) * 2;
		}

		// Function from file: Atom.dm
		public virtual bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			return !this.density || !Lang13.Bool( height ) || air_group == true;
		}

		// Function from file: Ultralight_procs.dm
		public int ul_FalloffAmount( dynamic _ref = null ) {
			int delta_x = 0;
			int delta_y = 0;
			double? i = null;

			
			if ( true ) {
				delta_x = Convert.ToInt32( _ref.x - this.x );
				delta_y = Convert.ToInt32( _ref.y - this.y );

				if ( delta_x * delta_x + delta_y * delta_y > GlobalVars.ul_FastRoot.len ) {
					i = null;
					i = GlobalVars.ul_FastRoot.len;

					while (( i ??0) <= delta_x * delta_x + delta_y * delta_y) {
						GlobalVars.ul_FastRoot.Add( Num13.Floor( Math.Sqrt( i ??0 ) ) );
						i++;
					}
				}
				return Convert.ToInt32( GlobalVars.ul_FastRoot[delta_x * delta_x + delta_y * delta_y + 1] );
			} else if ( !true ) {
				return Map13.GetDistance( this, _ref );
			}
			return 0;
		}

		// Function from file: Chemistry-Holder.dm
		public void create_reagents( dynamic max_vol = null ) {
			this.reagents = new Reagents( max_vol );
			this.reagents.my_atom = this;
			return;
		}

		// Function from file: handlabeler.dm
		public virtual void harm_label_update(  ) {
			return;
		}

		// Function from file: handlabeler.dm
		[VerbInfo( name: "Remove label", group: "Object", access: VerbAccess.InView, range: 1 )]
		public virtual void remove_label(  ) {
			Ent_Static A = null;

			A = this;
			A.name = GlobalFuncs.replacetext( A.name, A.labeled, "" );
			A.labeled = null;

			if ( A.harm_labeled != 0 ) {
				A.harm_labeled = 0;
				A.harm_label_update();
			}
			A.verbs.Remove( typeof(Ent_Static).GetMethod( "remove_label" ) );
			return;
		}

		// Function from file: pai.dm
		public virtual void attack_pai( Mob_Living_Silicon_Pai user = null ) {
			return;
		}

		// Function from file: eye.dm
		public void move_camera_by_click(  ) {
			Mob AI = null;

			
			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				AI = Task13.User;

				if ( Lang13.Bool( ((dynamic)AI).eyeobj ) && AI.client.eye == ((dynamic)AI).eyeobj ) {
					((dynamic)AI).cameraFollow = null;

					if ( this.loc is Tile || this is Tile ) {
						((Ent_Dynamic)((dynamic)AI).eyeobj).forceMove( this );
					}
				}
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void visible_message( dynamic message = null, dynamic self_message = null, dynamic blind_message = null, string drugged_message = null, string self_drugged_message = null, string blind_drugged_message = null ) {
			Mob_Virtualhearer hearer = null;
			dynamic M = null;
			dynamic hallucination = null;
			dynamic msg = null;
			dynamic msg2 = null;
			dynamic holo = null;

			
			if ( Game13.time > GlobalVars.resethearers ) {
				GlobalFuncs.sethearing();
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ), typeof(Mob_Virtualhearer) )) {
				hearer = _a;
				

				if ( hearer.attached is Mob ) {
					M = hearer.attached;
					hallucination = ((Mob)M).hallucinating();
					msg = message;
					msg2 = self_message;

					if ( Lang13.Bool( hallucination ) ) {
						
						if ( Lang13.Bool( blind_message ) ) {
							msg = blind_message;
						}

						if ( Lang13.Bool( drugged_message ) ) {
							msg2 = drugged_message;
						}
					}
					M.show_message( msg, 1, msg2, 2 );
				} else if ( hearer.attached is Obj_Machinery_Hologram_Holopad ) {
					holo = hearer.attached;

					if ( Lang13.Bool( holo.master ) ) {
						holo.master.show_message( message, 1, self_message, 2 );
					}
				}
			}
			return;
		}

		// Function from file: materials.dm
		public void onMaterialChange( dynamic matID = null, dynamic amount = null ) {
			return;
		}

		// Function from file: lighting_atom.dm
		public void set_opacity( dynamic new_opacity = null ) {
			bool old_opacity = false;
			Ent_Static T = null;

			old_opacity = this.opacity;
			this.opacity = Lang13.Bool( new_opacity );
			T = this.loc;

			if ( old_opacity != new_opacity && T is Tile ) {
				((dynamic)T).reconsider_lights();
			}
			return;
		}

		// Function from file: lighting_atom.dm
		public Ent_Static update_light(  ) {
			Ent_Static _default = null;

			
			if ( Lang13.Bool( this.gcDestroyed ) ) {
				return _default;
			}

			if ( !Lang13.Bool( this.light_power ) || !Lang13.Bool( this.light_range ) ) {
				
				if ( this.light != null ) {
					this.light.destroy();
					this.light = null;
				}
			} else {
				
				if ( !( this.loc is Ent_Dynamic ) ) {
					_default = this;
				} else {
					_default = this.loc;
				}

				if ( this.light != null ) {
					this.light.update( _default );
				} else {
					this.light = new LightSource( this, _default );
				}
			}
			return _default;
		}

		// Function from file: lighting_atom.dm
		public void set_light( dynamic l_range = null, dynamic l_power = null, dynamic l_color = null ) {
			
			if ( l_power != null ) {
				this.light_power = l_power;
			}

			if ( l_range != null ) {
				this.light_range = l_range;
			}

			if ( l_color != null ) {
				this.light_color = l_color;
			}
			this.update_light();
			return;
		}

		// Function from file: detective_work.dm
		public void add_fibers( dynamic M = null ) {
			dynamic G = null;
			string fibertext = null;
			double item_multiplier = 0;

			
			if ( Lang13.Bool( M.gloves ) && M.gloves is Obj_Item_Clothing ) {
				G = M.gloves;

				if ( Lang13.Bool( G.transfer_blood ) ) {
					
					if ( this.add_blood( G.bloody_hands_mob ) ) {
						G.transfer_blood--;
					}
				}
			} else if ( Lang13.Bool( M.bloody_hands ) ) {
				
				if ( this.add_blood( M.bloody_hands_mob ) ) {
					M.bloody_hands--;
				}
			}

			if ( !( this.suit_fibers != null ) ) {
				this.suit_fibers = new ByTable();
			}
			item_multiplier = ( this is Obj_Item ? 1.2 : 1 );

			if ( Lang13.Bool( M.wear_suit ) ) {
				fibertext = new Txt( "Material from " ).a( M.wear_suit ).item().str( "." ).ToString();

				if ( Rand13.PercentChance( ((int)( item_multiplier * 10 )) ) && !false ) {
					this.suit_fibers.Add( fibertext );
				}

				if ( !Lang13.Bool( M.wear_suit.body_parts_covered & 32 ) ) {
					
					if ( Lang13.Bool( M.w_uniform ) ) {
						fibertext = new Txt( "Fibers from " ).a( M.w_uniform ).item().str( "." ).ToString();

						if ( Rand13.PercentChance( ((int)( item_multiplier * 12 )) ) && !false ) {
							this.suit_fibers.Add( fibertext );
						}
					}
				}

				if ( !Lang13.Bool( M.wear_suit.body_parts_covered & 64 ) ) {
					
					if ( Lang13.Bool( M.gloves ) ) {
						fibertext = "Material from a pair of " + M.gloves.name + ".";

						if ( Rand13.PercentChance( ((int)( item_multiplier * 20 )) ) && !false ) {
							this.suit_fibers.Add( fibertext );
						}
					}
				}
			} else if ( Lang13.Bool( M.w_uniform ) ) {
				fibertext = new Txt( "Fibers from " ).a( M.w_uniform ).item().str( "." ).ToString();

				if ( Rand13.PercentChance( ((int)( item_multiplier * 15 )) ) && !false ) {
					this.suit_fibers.Add( fibertext );
				}

				if ( Lang13.Bool( M.gloves ) ) {
					fibertext = "Material from a pair of " + M.gloves.name + ".";

					if ( Rand13.PercentChance( ((int)( item_multiplier * 20 )) ) && !false ) {
						this.suit_fibers.Add( "Material from a pair of " + M.gloves.name + "." );
					}
				}
			} else if ( Lang13.Bool( M.gloves ) ) {
				fibertext = "Material from a pair of " + M.gloves.name + ".";

				if ( Rand13.PercentChance( ((int)( item_multiplier * 20 )) ) && !false ) {
					this.suit_fibers.Add( "Material from a pair of " + M.gloves.name + "." );
				}
			}

			if ( !( this.suit_fibers.len != 0 ) ) {
				Lang13.Delete( this.suit_fibers );
				this.suit_fibers = null;
			}
			return;
		}

		// Function from file: admin_investigate.dm
		public string format_investigation_text( string message = null ) {
			return new Txt( "<small>" ).item( String13.FormatTime( Game13.timeofday, "hh:mm" ) ).str( " " ).Ref( this ).str( " (" ).item( this.x ).str( "," ).item( this.y ).str( "," ).item( this.z ).str( ")</small> || " ).item( this ).str( " " ).item( message ).str( "<br />" ).ToString();
		}

		// Function from file: admin_investigate.dm
		public virtual string investigation_log( string subject = null, string message = null ) {
			dynamic I = null;
			string formatted = null;

			I = GlobalVars.investigations[subject];

			if ( !Lang13.Bool( I ) ) {
				Game13.log.WriteMsg( "## WARNING: " + ( "SOME ASSHAT USED INVALID INVESTIGATION ID " + subject ) );
				return null;
			}
			formatted = this.format_investigation_text( message );
			I.write( formatted );
			return formatted;
		}

		// Function from file: broadcaster.dm
		public Game_Data telecomms_process(  ) {
			Game_Data signal = null;
			dynamic pos = null;
			Obj_Machinery_Telecomms_Receiver R = null;

			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 2;
			pos = GlobalFuncs.get_turf( this );
			((dynamic)signal).data = new ByTable().Set( "slow", 0 ).Set( "message", "TEST" ).Set( "compression", Rand13.Int( 45, 50 ) ).Set( "traffic", 0 ).Set( "type", 4 ).Set( "reject", 0 ).Set( "done", 0 ).Set( "level", pos.z );
			((dynamic)signal).frequency = 1459;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Receiver) )) {
				R = _a;
				
				R.receive_signal( signal );
			}
			Task13.Sleep( Rand13.Int( 10, 25 ) );
			return signal;
		}

		// Function from file: broadcaster.dm
		public dynamic test_telecomms(  ) {
			Game_Data signal = null;
			dynamic position = null;

			signal = this.telecomms_process();
			position = GlobalFuncs.get_turf( this );
			Interface13.Stat( null, ((dynamic)( Lang13.Bool( ((dynamic)signal).data["level"] ) && Lang13.Bool( ((dynamic)signal).data["done"] ) )).Contains( position.z ) );
			return null;
		}

		// Function from file: camera.dm
		public void auto_turn(  ) {
			Tile T = null;
			dynamic direction = null;

			T = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				
				T = GlobalFuncs.get_ranged_target_turf( this, direction, 1 );

				if ( T is Tile_Simulated_Wall ) {
					this.dir = ((int)( GlobalFuncs.reverse_direction( direction ) ??0 ));
					break;
				}
			}
			return;
		}

		// Function from file: teleporter.dm
		public bool laserhit( dynamic L = null ) {
			return true;
		}

		// Function from file: smoothwall.dm
		public virtual void relativewall_neighbours( dynamic at = null ) {
			dynamic cdir = null;
			Tile T = null;
			Ent_Static A = null;

			
			if ( !Lang13.Bool( at ) ) {
				at = GlobalFuncs.get_turf( this );
			}

			if ( Lang13.Bool( this.canSmoothWith ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					cdir = _b;
					
					T = Map13.GetStep( this, Convert.ToInt32( cdir ) );

					if ( this.isSmoothableNeighbor( T ) ) {
						T.relativewall();
					}

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
						A = _a;
						

						if ( this.isSmoothableNeighbor( A ) ) {
							A.relativewall();
						}
					}
				}
			}
			return;
		}

		// Function from file: smoothwall.dm
		public virtual void relativewall(  ) {
			return;
		}

		// Function from file: smoothwall.dm
		public virtual bool isSmoothableNeighbor( Ent_Static A = null ) {
			
			if ( !( A != null ) ) {
				Game13.log.WriteMsg( "##WARNING: " + ( "" + "code/game/smoothwall.dm" + "L" + 27 + ": atom/isSmoothableNeighbor given bad atom" ) + " in " + "code/game/smoothwall.dm" + " at line " + 27 + " src: " + this + " usr: " + Task13.User + "." );
				return false;
			}
			return GlobalFuncs.isInTypes( A, this.canSmoothWith );
		}

		// Function from file: smoothwall.dm
		public int findSmoothingNeighbors(  ) {
			int junction = 0;
			dynamic cdir = null;
			Tile T = null;
			Ent_Static A = null;

			junction = 0;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				cdir = _b;
				
				T = Map13.GetStep( this, Convert.ToInt32( cdir ) );

				if ( this.isSmoothableNeighbor( T ) ) {
					junction |= Convert.ToInt32( cdir );
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
					A = _a;
					

					if ( this.isSmoothableNeighbor( A ) ) {
						junction |= Convert.ToInt32( cdir );
						break;
					}
				}
			}
			return junction;
		}

		// Function from file: atoms_movable.dm
		public virtual bool? update_icon( dynamic location = null, dynamic target = null ) {
			return null;
		}

		// Function from file: atoms.dm
		public virtual void bless(  ) {
			this.blessed = true;
			return;
		}

		// Function from file: atoms.dm
		public virtual bool spook(  ) {
			
			if ( this.blessed ) {
				return false;
			}
			return true;
		}

		// Function from file: atoms.dm
		public virtual void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			
			if ( oldarea is Zone ) {
				oldarea = "" + oldarea.name;
			}

			if ( newarea is Zone ) {
				newarea = "" + newarea.name;
			}
			return;
		}

		// Function from file: atoms.dm
		public virtual dynamic mop_act( Obj_Item_Weapon_Mop M = null, dynamic user = null ) {
			return 0;
		}

		// Function from file: atoms.dm
		public int checkpass( int passflag = 0 ) {
			return this.pass_flags & passflag;
		}

		// Function from file: atoms.dm
		public dynamic get_global_map_pos(  ) {
			int? cur_x = null;
			dynamic cur_y = null;
			dynamic y_arr = null;

			
			if ( !GlobalFuncs.islist( GlobalVars.global_map ) || GlobalFuncs.isemptylist( GlobalVars.global_map ) ) {
				return null;
			}
			cur_x = null;
			cur_y = null;
			y_arr = null;
			cur_x = 1;

			while (( cur_x ??0) <= GlobalVars.global_map.len) {
				y_arr = GlobalVars.global_map[cur_x];
				cur_y = y_arr.Find( this.z );

				if ( Lang13.Bool( cur_y ) ) {
					break;
				}
				cur_x++;
			}

			if ( Lang13.Bool( cur_x ) && Lang13.Bool( cur_y ) ) {
				return new ByTable().Set( "x", cur_x ).Set( "y", cur_y );
			} else {
				return 0;
			}
		}

		// Function from file: atoms.dm
		public virtual bool clean_blood( dynamic clean_feet = null ) {
			this.germ_level = 0;

			if ( this.blood_DNA is ByTable ) {
				this.blood_DNA.len = 0;
				return true;
			}
			return false;
		}

		// Function from file: atoms.dm
		public void add_vomit_floor( dynamic M = null, bool? toxvomit = null ) {
			toxvomit = toxvomit ?? false;

			Obj_Effect_Decal_Cleanable_Vomit _this = null;

			
			if ( this is Tile_Simulated ) {
				_this = new Obj_Effect_Decal_Cleanable_Vomit( this );

				if ( toxvomit == true ) {
					_this.icon_state = "vomittox_" + Rand13.Pick(new object [] { 1, 4 });
				}
			}
			return;
		}

		// Function from file: atoms.dm
		public virtual bool add_blood( dynamic M = null ) {
			bool _default = false;

			Ent_Static H = null;

			_default = true;

			if ( !Lang13.Bool( M ) ) {
				
				if ( !( this.blood_DNA != null ) || !( this.blood_DNA is ByTable ) ) {
					this.blood_DNA = new ByTable();
				}
				this.blood_color = "#A10808";
				return true;
			}

			if ( !( M is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( !( M.dna is Dna ) ) {
				M.dna = new Dna( /* Pruned args, no ctor exists. */ );
				M.dna.real_name = M.real_name;
			}
			((Mob_Living_Carbon_Human)M).check_dna();

			if ( ( ( !Lang13.Bool( this.flags ) ?1:0) & 256 ) != 0 ) {
				return false;
			}

			if ( !( this.blood_DNA != null ) || !( this.blood_DNA is ByTable ) ) {
				this.blood_DNA = new ByTable();
			}
			this.blood_color = "#A10808";

			if ( Lang13.Bool( M.species ) ) {
				this.blood_color = M.species.blood_color;
			} else if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				if ( Lang13.Bool( this.blood_DNA[((dynamic)H).dna.unique_enzymes] ) ) {
					return false;
				}
				this.blood_DNA[((dynamic)H).dna.unique_enzymes] = ((dynamic)H).dna.b_type;
				((dynamic)H).update_inv_gloves();
				return true;
			}
			return _default;
		}

		// Function from file: atoms.dm
		public void transfer_fingerprints_to( dynamic A = null ) {
			
			if ( !( A.fingerprints is ByTable ) ) {
				A.fingerprints = new ByTable();
			}

			if ( !( A.fingerprintshidden is ByTable ) ) {
				A.fingerprintshidden = new ByTable();
			}

			if ( this.fingerprints != null ) {
				A.fingerprints.Or( this.fingerprints.Copy() );
			}

			if ( this.fingerprintshidden != null && this.fingerprintshidden is ByTable ) {
				A.fingerprintshidden.Or( this.fingerprintshidden.Copy() );
			}
			return;
		}

		// Function from file: atoms.dm
		public bool add_fingerprint( dynamic M = null ) {
			dynamic H = null;
			string full_print = null;

			
			if ( M == null ) {
				return false;
			}

			if ( M is Mob_Living_Silicon_Ai ) {
				return false;
			}

			if ( M.key == null ) {
				return false;
			}

			if ( ( ( !Lang13.Bool( this.flags ) ?1:0) & 256 ) != 0 ) {
				return false;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				
				if ( !( this.fingerprintshidden != null ) ) {
					this.fingerprintshidden = new ByTable();
				}
				this.add_fibers( M );
				Interface13.Stat( null, M.mutations.Contains( 108 ) );

				if ( !( this.fingerprintshidden != null ) ) {
					
					if ( this.fingerprintslast != M.key ) {
						this.fingerprintshidden.Add( "(Has no fingerprints) Real name: " + M.real_name + ", Key: " + M.key );
						this.fingerprintslast = M.key;
					}
					return false;
				}
				H = M;

				if ( !( H.dna is Dna ) || !Lang13.Bool( H.dna.uni_identity ) || Lang13.Length( H.dna.uni_identity ) != 32 ) {
					
					if ( !( H.dna is Dna ) ) {
						H.dna = new Dna( /* Pruned args, no ctor exists. */ );
						H.dna.real_name = H.real_name;
					}
				}
				((Mob_Living_Carbon_Human)H).check_dna();

				if ( Lang13.Bool( H.gloves ) && H.gloves != this ) {
					
					if ( this.fingerprintslast != H.key ) {
						this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "](Wearing gloves). Real name: " + H.real_name + ", Key: " + H.key );
						this.fingerprintslast = H.key;
					}
					((Ent_Static)H.gloves).add_fingerprint( M );
				}

				if ( H.gloves != this ) {
					
					if ( Rand13.PercentChance( 75 ) && H.gloves is Obj_Item_Clothing_Gloves_Latex ) {
						return false;
					} else if ( Lang13.Bool( H.gloves ) && !( H.gloves is Obj_Item_Clothing_Gloves_Latex ) ) {
						return false;
					}
				}

				if ( this.fingerprintslast != H.key ) {
					this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "]Real name: " + H.real_name + ", Key: " + H.key );
					this.fingerprintslast = H.key;
				}

				if ( !( this.fingerprints != null ) ) {
					this.fingerprints = new ByTable();
				}
				full_print = Num13.Md5( H.dna.uni_identity );
				this.fingerprints[full_print] = full_print;
				return true;
			} else if ( this.fingerprintslast != M.key ) {
				this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "]Real name: " + M.real_name + ", Key: " + M.key );
				this.fingerprintslast = M.key;
			}

			if ( this.fingerprints != null && !( this.fingerprints.len != 0 ) ) {
				Lang13.Delete( this.fingerprints );
				this.fingerprints = null;
			}
			return false;
		}

		// Function from file: atoms.dm
		public bool add_hiddenprint( dynamic M = null ) {
			dynamic H = null;

			
			if ( M == null ) {
				return false;
			}

			if ( M.key == null ) {
				return false;
			}

			if ( ( ( !Lang13.Bool( this.flags ) ?1:0) & 256 ) != 0 ) {
				return false;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( !( H.dna is Dna ) ) {
					return false;
				}

				if ( Lang13.Bool( H.gloves ) ) {
					
					if ( this.fingerprintslast != H.key ) {
						this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "] (Wearing gloves). Real name: " + H.real_name + ", Key: " + H.key );
						this.fingerprintslast = H.key;
					}
					return false;
				}

				if ( !( this.fingerprints != null ) ) {
					
					if ( this.fingerprintslast != H.key ) {
						this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "] Real name: " + H.real_name + ", Key: " + H.key );
						this.fingerprintslast = H.key;
					}
					return true;
				}
			} else if ( this.fingerprintslast != M.key ) {
				this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "] Real name: " + M.real_name + ", Key: " + M.key );
				this.fingerprintslast = M.key;
			}
			return false;
		}

		// Function from file: atoms.dm
		public virtual void hitby( Ent_Static AM = null, dynamic speed = null, int? dir = null ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual bool emag_act( dynamic user = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual void shuttle_rotate( double? angle = null ) {
			double cosine = 0;
			double sine = 0;
			double newX = 0;
			double newY = 0;

			this.dir = Num13.Rotate( this.dir, -( angle ??0) );

			if ( Lang13.Bool( this.canSmoothWith ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.relativewall();
					this.relativewall_neighbours();
					return;
				}));
			}

			if ( this.pixel_x != 0 || this.pixel_y != 0 ) {
				cosine = Math.Cos( angle ??0 );
				sine = Math.Sin( angle ??0 );
				newX = cosine * this.pixel_x + sine * this.pixel_y;
				newY = -( sine * this.pixel_x ) + cosine * this.pixel_y;
				this.pixel_x = ((int)( newX ));
				this.pixel_y = ((int)( newY ));
			}
			return;
		}

		// Function from file: atoms.dm
		public virtual bool shuttle_act( Shuttle S = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			return 0;
		}

		// Function from file: atoms.dm
		public virtual bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual bool mech_drill_act( double? severity = null, dynamic child = null ) {
			return this.ex_act( severity, child );
		}

		// Function from file: atoms.dm
		public virtual bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual dynamic relaymove( Mob M = null, double? direction = null ) {
			return null;
		}

		// Function from file: atoms.dm
		public virtual dynamic examine( dynamic user = null, string size = null ) {
			size = size ?? "";

			string f_name = null;
			Reagent R = null;
			ByTable fake_reagents = null;
			int? i = null;
			int fake_amount = 0;
			dynamic fake_reagent = null;

			f_name = new Txt().a( this ).item().str( "." ).ToString();

			if ( this.blood_DNA != null && this.blood_DNA.len != 0 ) {
				
				if ( this.gender == GlobalVars.PLURAL ) {
					f_name = "some ";
				} else {
					f_name = "a ";
				}
				f_name += "<span class='danger'>blood-stained</span> " + this.name + "!";
			}
			GlobalFuncs.to_chat( user, new Txt().icon( this ).str( " That's " ).item( f_name ).ToString() + size );

			if ( Lang13.Bool( this.desc ) ) {
				GlobalFuncs.to_chat( user, this.desc );
			}

			if ( Lang13.Bool( this.reagents ) && Lang13.Bool( this.is_open_container() ) && !( this is Mob ) ) {
				
				if ( Map13.GetDistance( user, this ) > 3 ) {
					GlobalFuncs.to_chat( user, "<span class='info'>You can't make out the contents.</span>" );
				} else {
					GlobalFuncs.to_chat( user, "It contains:" );

					if ( !((Mob)user).hallucinating() ) {
						
						if ( this.reagents.reagent_list.len != 0 ) {
							
							foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
								R = _a;
								
								GlobalFuncs.to_chat( user, "<span class='info'>" + R.volume + " units of " + R.name + "</span>" );
							}
						} else {
							GlobalFuncs.to_chat( user, "<span class='info'>Nothing.</span>" );
						}
					} else {
						fake_reagents = new ByTable(new object [] { 
							"Water", 
							"Orange juice", 
							"Banana juice", 
							"Tungsten", 
							"Chloral Hydrate", 
							"Helium", 
							"Sea water", 
							"Energy drink", 
							"Gushin' Granny", 
							"Salt", 
							"Sugar", 
							"something yellow", 
							"something red", 
							"something blue", 
							"something suspicious", 
							"something smelly", 
							"something sweet", 
							"Soda", 
							"something that reminds you of home", 
							"Chef's Special"
						 });
						i = null;

						while (( i ??0) < Rand13.Int( 1, 10 )) {
							fake_amount = Rand13.Int( 1, 30 );
							fake_reagent = Rand13.PickFromTable( fake_reagents );
							fake_reagents.Remove( fake_reagent );
							GlobalFuncs.to_chat( user, "<span class='info'>" + fake_amount + " units of " + fake_reagent + "</span>" );
							i++;
						}
					}
				}
			}

			if ( this.on_fire ) {
				((Mob)user).simple_message( "<span class='danger'>OH SHIT! IT'S ON FIRE!</span>", "<span class='info'>It's on fire, man.</span>" );
			}

			if ( this.min_harm_label != 0 && this.harm_labeled != 0 ) {
				
				if ( this.harm_labeled < this.min_harm_label ) {
					GlobalFuncs.to_chat( user, this.harm_label_examine[1] );
				} else {
					GlobalFuncs.to_chat( user, this.harm_label_examine[2] );
				}
			}
			return null;
		}

		// Function from file: atoms.dm
		public void Beam( dynamic BeamTarget = null, string icon_state = null, string icon = null, int? time = null, int? maxdistance = null ) {
			icon_state = icon_state ?? "b_beam";
			icon = icon ?? "icons/effects/beam.dmi";
			time = time ?? 50;
			maxdistance = maxdistance ?? 10;

			int EndTime = 0;
			bool broken = false;
			Game_Data light = null;
			Obj_Effect_Overlay_Beam O = null;
			double Angle = 0;
			Icon I = null;
			double DX = 0;
			double DY = 0;
			int N = 0;
			int length = 0;
			Game_Data X = null;
			Icon II = null;
			int? Pixel_x = null;
			int? Pixel_y = null;
			int? a = null;
			int? a2 = null;
			int? a3 = null;
			int? a4 = null;
			dynamic TT = null;
			Obj O2 = null;
			Obj_Effect_Overlay_Beam O3 = null;

			EndTime = Game13.time + ( time ??0);
			broken = false;
			light = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Beam_Lightning) );

			while (Lang13.Bool( BeamTarget ) && Game13.time < EndTime && Map13.GetDistance( this, BeamTarget ) < ( maxdistance ??0) && this.z == Convert.ToInt32( BeamTarget.z )) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this, 10 ), typeof(Obj_Effect_Overlay_Beam) )) {
					O = _a;
					

					if ( O.BeamSource == this ) {
						GlobalFuncs.returnToPool( O );
					}
				}
				Angle = Num13.Floor( GlobalFuncs.Get_Angle( this, BeamTarget ) );
				I = new Icon( icon, icon_state );
				I.Turn( Angle );
				DX = Convert.ToDouble( BeamTarget.x * 32 + BeamTarget.pixel_x - ( this.x * 32 + this.pixel_x ) );
				DY = Convert.ToDouble( BeamTarget.y * 32 + BeamTarget.pixel_y - ( this.y * 32 + this.pixel_y ) );
				N = 0;
				length = Num13.Floor( Math.Sqrt( Math.Pow( DX, 2 ) + Math.Pow( DY, 2 ) ) );

				while (N < length) {
					X = GlobalFuncs.getFromPool( typeof(Obj_Effect_Overlay_Beam), this.loc );
					((dynamic)X).BeamSource = this;

					if ( N + 32 > length ) {
						II = new Icon( icon, icon_state );
						II.DrawBox( null, 1, length - N, 32, 32 );
						II.Turn( Angle );
						((dynamic)X).icon = II;
					} else {
						((dynamic)X).icon = I;
					}
					Pixel_x = Num13.Floor( Math.Sin( Angle ) + Math.Sin( Angle ) * ( N + 16 ) * 32 / 32 );
					Pixel_y = Num13.Floor( Math.Cos( Angle ) + Math.Cos( Angle ) * ( N + 16 ) * 32 / 32 );

					if ( DX == 0 ) {
						Pixel_x = 0;
					}

					if ( DY == 0 ) {
						Pixel_y = 0;
					}

					if ( ( Pixel_x ??0) > 32 ) {
						a = null;
						a = 0;

						while (( a ??0) <= ( Pixel_x ??0)) {
							((dynamic)X).x++;
							Pixel_x -= 32;
							a += 32;
						}
					}

					if ( ( Pixel_x ??0) < -32 ) {
						a2 = null;
						a2 = 0;

						while (( a2 ??0) >= ( Pixel_x ??0)) {
							((dynamic)X).x--;
							Pixel_x += 32;
							a2 -= 32;
						}
					}

					if ( ( Pixel_y ??0) > 32 ) {
						a3 = null;
						a3 = 0;

						while (( a3 ??0) <= ( Pixel_y ??0)) {
							((dynamic)X).y++;
							Pixel_y -= 32;
							a3 += 32;
						}
					}

					if ( ( Pixel_y ??0) < -32 ) {
						a4 = null;
						a4 = 0;

						while (( a4 ??0) >= ( Pixel_y ??0)) {
							((dynamic)X).y--;
							Pixel_y += 32;
							a4 -= 32;
						}
					}
					((dynamic)X).pixel_x = Pixel_x;
					((dynamic)X).pixel_y = Pixel_y;
					TT = GlobalFuncs.get_turf( ((dynamic)X).loc );

					if ( TT.density ) {
						GlobalFuncs.qdel( X );
						break;
					}

					foreach (dynamic _b in Lang13.Enumerate( TT, typeof(Obj) )) {
						O2 = _b;
						

						if ( !O2.CanPass( light ) ) {
							broken = true;
							break;
						} else if ( O2.density ) {
							broken = true;
							break;
						}
					}

					if ( broken ) {
						GlobalFuncs.qdel( X );
						break;
					}
					N += 32;
				}
				Task13.Sleep( 3 );
			}

			foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this, 10 ), typeof(Obj_Effect_Overlay_Beam) )) {
				O3 = _c;
				

				if ( O3.BeamSource == this ) {
					GlobalFuncs.returnToPool( O3 );
				}
			}
			return;
		}

		// Function from file: atoms.dm
		public dynamic contains_atom_from_list( ByTable L = null ) {
			Ent_Static A = null;
			dynamic T = null;
			dynamic R = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Ent_Static) )) {
				A = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( L )) {
					T = _a;
					

					if ( Lang13.Bool( T.IsInstanceOfType( A ) ) ) {
						return A;
					}
				}

				if ( A.contents.len != 0 ) {
					R = A.contains_atom_from_list( L );

					if ( Lang13.Bool( R ) ) {
						return R;
					}
				}
			}
			return 0;
		}

		// Function from file: atoms.dm
		public ByTable search_contents_for( Type path = null, dynamic filter_path = null ) {
			ByTable found = null;
			Ent_Static A = null;
			int pass = 0;
			dynamic type = null;

			found = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Ent_Static) )) {
				A = _b;
				

				if ( Lang13.Bool( ((dynamic)path).IsInstanceOfType( A ) ) ) {
					found.Add( A );
				}

				if ( Lang13.Bool( filter_path ) ) {
					pass = 0;

					foreach (dynamic _a in Lang13.Enumerate( filter_path )) {
						type = _a;
						
						pass |= Convert.ToInt32( type.IsInstanceOfType( A ) );
					}

					if ( !( pass != 0 ) ) {
						continue;
					}
				}

				if ( A.contents.len != 0 ) {
					found.Add( A.search_contents_for( path, filter_path ) );
				}
			}
			return found;
		}

		// Function from file: atoms.dm
		public virtual int projectile_check(  ) {
			return 0;
		}

		// Function from file: atoms.dm
		public bool in_contents_of( Type container = null ) {
			
			if ( container is Type ) {
				
				if ( Lang13.Bool( ((dynamic)container).IsInstanceOfType( this.loc ) ) ) {
					return true;
				}
			} else {
				Interface13.Stat( null, ((dynamic)container).Contains( this ) );

				if ( container is Type ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: atoms.dm
		public virtual int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			return 0;
		}

		// Function from file: atoms.dm
		public virtual bool singuloCanEat(  ) {
			return true;
		}

		// Function from file: atoms.dm
		public virtual dynamic emp_act( int severity = 0 ) {
			return null;
		}

		// Function from file: atoms.dm
		public virtual bool HasProximity( dynamic AM = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual bool CheckExit( Ent_Dynamic mover = null, Ent_Static target = null ) {
			return true;
		}

		// Function from file: atoms.dm
		public virtual bool allow_drop(  ) {
			return true;
		}

		// Function from file: atoms.dm
		public virtual dynamic is_open_container(  ) {
			return this.flags & 4096;
		}

		// Function from file: atoms.dm
		public virtual bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual void on_reagent_change(  ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual bool? check_eye( Mob user = null ) {
			
			if ( user is Mob_Living_Silicon_Ai ) {
				return true;
			}
			return null;
		}

		// Function from file: atoms.dm
		public virtual GasMixture return_air(  ) {
			
			if ( this.loc != null ) {
				return this.loc.return_air();
			} else {
				return null;
			}
		}

		// Function from file: atoms.dm
		public virtual dynamic remove_air( dynamic amount = null ) {
			return null;
		}

		// Function from file: atoms.dm
		public virtual bool? assume_air( dynamic giver = null ) {
			return null;
		}

		// Function from file: atoms.dm
		public void DeleteFromProfiler(  ) {
			Interface13.Stat( null, GlobalVars.type_instances.Contains( this.type ) );

			if ( false ) {
				GlobalVars.type_instances[this.type] = GlobalVars.type_instances[this.type] - 1;
			} else {
				GlobalVars.type_instances[this.type] = 0;
				Game13.log.WriteMsg( "##WARNING: " + ( "Type " + this.type + " does not inherit /atom/New().  Please ensure ..() is called, or that the type calls AddToProfiler()." ) + " in " + "code/game/atoms.dm" + " at line " + 130 + " src: " + this + " usr: " + Task13.User + "." );
			}
			return;
		}

		// Function from file: atoms.dm
		public void AddToProfiler(  ) {
			Interface13.Stat( null, GlobalVars.type_instances.Contains( this.type ) );

			if ( false ) {
				GlobalVars.type_instances[this.type] = GlobalVars.type_instances[this.type] + 1;
			} else {
				GlobalVars.type_instances[this.type] = 1;
			}
			return;
		}

		// Function from file: atoms.dm
		public virtual dynamic throw_impact( dynamic hit_atom = null, dynamic speed = null, Mob user = null ) {
			dynamic M = null;
			dynamic O = null;
			dynamic T = null;
			Ent_Static M2 = null;

			
			if ( hit_atom is Mob_Living ) {
				M = hit_atom;
				((Ent_Static)M).hitby( this, speed, this.dir );
				GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + hit_atom + " (" + ( Lang13.Bool( M ) ? M.ckey : "what" ) + ") was hit by " + this + " thrown by (" + this.fingerprintslast + ")</font>" ) ) );
			} else if ( hit_atom is Obj ) {
				O = hit_atom;

				if ( !Lang13.Bool( O.anchored ) ) {
					Map13.Step( O, this.dir );
				}
				((Ent_Static)O).hitby( this, speed );
			} else if ( hit_atom is Tile ) {
				T = hit_atom;

				if ( T.density ) {
					Task13.Schedule( 2, (Task13.Closure)(() => {
						Map13.Step( (Ent_Dynamic)(this), Num13.Rotate( this.dir, 180 ) );
						return;
					}));

					if ( this is Mob_Living ) {
						M2 = this;
						((dynamic)M2).take_organ_damage( 10 );
					}
				}
			}
			return null;
		}

		// Function from file: atoms.dm
		public void shake( bool xy = false, int intensity = 0, dynamic user = null ) {
			
			switch ((bool)( xy )) {
				case 1:
					this.pixel_x = Rand13.Int( -intensity, intensity );
					break;
				case 2:
					this.pixel_y = Rand13.Int( -intensity, intensity );
					break;
				case 3:
					this.pixel_x = Rand13.Int( -intensity, intensity );
					this.pixel_y = Rand13.Int( -intensity, intensity );
					break;
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.pixel_x = 0;
				return;
			}));
			this.pixel_y = 0;
			return;
		}

		// Function from file: atoms.dm
		public virtual bool handle_beams(  ) {
			return true;
		}

		// Function from file: atoms.dm
		public virtual bool apply_beam_damage( Obj_Effect_Beam B = null ) {
			return true;
		}

		// Function from file: atoms.dm
		public virtual void beam_disconnect( Obj_Effect_Beam B = null ) {
			this.beams.Remove( B );
			return;
		}

		// Function from file: atoms.dm
		public virtual bool beam_connect( Obj_Effect_Beam B = null ) {
			
			if ( !( this.last_beamchecks != null ) ) {
				this.last_beamchecks = new ByTable();
			}

			if ( !( this.beams != null ) ) {
				this.beams = new ByTable();
			}
			Interface13.Stat( null, this.beams.Contains( B ) );

			if ( !( !( this.beams != null ) ) ) {
				this.beams.Add( B );
			}
			return true;
		}

		// Function from file: telekinesis.dm
		public virtual void attack_self_tk( dynamic user = null ) {
			return;
		}

		// Function from file: telekinesis.dm
		public virtual void attack_tk( Mob user = null ) {
			
			if ( Lang13.Bool( user.stat ) ) {
				return;
			}
			user.UnarmedAttack( this, false );
			return;
		}

		// Function from file: other_mobs.dm
		public virtual bool attack_construct( Mob_Living_SimpleAnimal_Construct user = null, dynamic dist = null ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public virtual void attack_slime( Mob_Living_Carbon_Slime user = null ) {
			return;
		}

		// Function from file: other_mobs.dm
		public virtual void attack_larva( Mob_Living_Carbon_Alien_Larva user = null ) {
			return;
		}

		// Function from file: other_mobs.dm
		public virtual dynamic attack_alien( Mob user = null ) {
			this.attack_paw( user );
			return null;
		}

		// Function from file: other_mobs.dm
		public virtual dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return null;
		}

		// Function from file: other_mobs.dm
		public virtual dynamic attack_animal( Mob_Living user = null ) {
			return null;
		}

		// Function from file: other_mobs.dm
		public virtual bool requires_dexterity( Mob user = null ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public void attack_stump( Mob user = null, string _params = null ) {
			
			if ( !this.requires_dexterity( user ) ) {
				this.attack_hand( user );
			} else {
				GlobalFuncs.to_chat( user, "Your " + ( user.hand == true ? "left hand" : "right hand" ) + " is not fine enough for this action." );
			}
			return;
		}

		// Function from file: other_mobs.dm
		public virtual dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return null;
		}

		// Function from file: observer.dm
		public virtual dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			int? ghost_flags = null;

			ghost_flags = 0;

			if ( this.ghost_read ) {
				ghost_flags |= 1;
			}

			if ( GlobalFuncs.canGhostRead( user, this, ghost_flags ) ) {
				this.attack_ai( user );
			} else {
				user.__CallVerb("Examine", this );
			}
			return null;
		}

		// Function from file: item_attack.dm
		public virtual dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return null;
		}

		// Function from file: drag_drop.dm
		public virtual bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			return false;
		}

		// Function from file: cyborg.dm
		public void RobotAltClick(  ) {
			return;
		}

		// Function from file: cyborg.dm
		public virtual dynamic attack_robot( Mob_Living_Silicon_Robot user = null ) {
			this.attack_ai( user );
			return null;
		}

		// Function from file: click.dm
		public virtual void AltClick( Mob user = null ) {
			dynamic T = null;

			
			if ( !( user == this ) && !( user is Mob_Living_Silicon_Robot ) && this is Mob_Living_Carbon_Human && user.Adjacent( this ) ) {
				((Mob_Living_Carbon)this).give_item( user );
				return;
			}
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) && ((Ent_Static)T).Adjacent( user ) ) {
				
				if ( user.listed_turf == T ) {
					user.listed_turf = null;
				} else {
					user.listed_turf = T;
					((dynamic)user.client).statpanel = T.name;
				}
			}
			return;
		}

		// Function from file: click.dm
		public virtual void CtrlClick( dynamic user = null ) {
			((Mob)user).stop_pulling();
			return;
		}

		// Function from file: click.dm
		public void ShiftClick( Mob user = null ) {
			
			if ( user.client != null && user.client.eye == user ) {
				user.__CallVerb("Examine", this );
			}
			return;
		}

		// Function from file: ai.dm
		public virtual void AIAltClick( Mob_Living_Silicon_Ai user = null ) {
			this.AltClick( user );
			return;
		}

		// Function from file: ai.dm
		public virtual void AICtrlClick(  ) {
			return;
		}

		// Function from file: ai.dm
		public virtual void AIShiftClick(  ) {
			return;
		}

		// Function from file: ai.dm
		public virtual dynamic attack_ai( dynamic user = null ) {
			return null;
		}

		// Function from file: adjacent.dm
		public virtual bool Adjacent( dynamic neighbor = null, dynamic recurse = null ) {
			return false;
		}

	}

}