// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;
using System.Collections.Generic;

namespace Somnium.Game {
	class Ent_Static : Base_Static {

		public int smooth = 0;
		public string top_left_corner = null;
		public string top_right_corner = null;
		public string bottom_left_corner = null;
		public string bottom_right_corner = null;
		public ByTable canSmoothWith = null;
		public ByTable suit_fibers = null;
		public dynamic wires = null;
		public int? level = 2;
		public dynamic flags = 0;
		public ByTable fingerprints = null;
		public ByTable fingerprintshidden = null;
		public string fingerprintslast = null;
		public ByTable blood_DNA = null;
		public Reagents reagents = null;
		public ByTable hud_list = new ByTable();
		public ByTable hud_possible = null;
		public int explosion_block = 0;
		public LightSource light = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.layer = 2;
			this.dir = 2;
		}

		// Function from file: reader.dm
		public Ent_Static ( dynamic loc = null ) : base( (object)(loc) ) {
			
			if ( Lang13.Bool( GlobalVars.use_preloader ) && this.type == GlobalVars._preloader.target_path ) {
				GlobalVars._preloader.load( this );
			}

			__SaveInitialVars();

			return;
		}

		#region Initial Crap

		private List<string> initial_vars;
		private Dictionary<string, dynamic> initial_values;

		// Registers a variable for use with Lang13.Initial(). This is a temporary thing. Never actually use Lang13.Initial().
		protected void __RegisterInitialTracked(string k)
		{
			if (initial_vars == null)
				initial_vars = new List<string>();
			initial_vars.Add(k);
		}

		public bool __TryGetInitial(string k, out dynamic result)
		{
			if (initial_values == null)
			{
				result = null;
				return false;
			}

			return initial_values.TryGetValue(k, out result);
		}

		private void __SaveInitialVars()
		{
			// Save initial state.
			if (initial_vars != null)
			{
				initial_values = new Dictionary<string, dynamic>();
				foreach (var k in initial_vars)
				{
					initial_values[k] = vars[k];
				}
			}
		}

		#endregion

		// Function from file: swapmaps.dm
		public override void Read( SaveFile F = null, dynamic __id = null, dynamic locorner = null ) {
			ByTable l = null;
			dynamic ic = null;

			
			if ( this.contents.len != 0 ) {
				l = this.contents;
			}
			base.Read( F, (object)(__id), (object)(locorner) );

			if ( !Lang13.Bool( this.icon ) && F.dir.Contains( "icon" ) ) {
				ic = F.ReadItem( "icon", ic );

				if ( ic is string ) {
					this.icon = GlobalVars.swapmaps_iconcache[ic];
				}
			}

			if ( l != null && this.contents != l ) {
				this.contents.Add( l );
				GlobalFuncs.qdel( l );
			}
			return;
		}

		// Function from file: swapmaps.dm
		public override void Write( SaveFile F = null ) {
			dynamic V = null;
			dynamic M = null;
			ByTable l = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.vars - "x" - "y" - "z" - "contents" - "icon" - "overlays" - "underlays" )) {
				V = _a;
				

				if ( Lang13.Bool( Lang13.IsSaved( this, V ) ) ) {
					
					if ( this.vars[V] != Lang13.Initial( this, V ) ) {
						F[V] = this.vars[V];
					} else {
						F.dir.Remove( V );
					}
				}
			}

			if ( this.icon != Lang13.Initial( this, "icon" ) ) {
				
				if ( Lang13.Bool( GlobalVars.swapmaps_iconcache ) && Lang13.Bool( GlobalVars.swapmaps_iconcache[this.icon] ) ) {
					F["icon"] = GlobalVars.swapmaps_iconcache[this.icon];
				} else {
					F["icon"] = this.icon;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this )) {
				M = _b;
				

				if ( Lang13.Bool( M.key ) ) {
					break;
				}
			}

			if ( this.overlays.len != 0 ) {
				F["overlays"] = this.overlays;
			}

			if ( this.underlays.len != 0 ) {
				F["underlays"] = this.underlays;
			}

			if ( this.contents.len != 0 && !( this is Zone ) ) {
				l = this.contents;

				if ( Lang13.Bool( M ) ) {
					l = l.Copy();

					foreach (dynamic _c in Lang13.Enumerate( this )) {
						M = _c;
						

						if ( Lang13.Bool( M.key ) ) {
							l.Remove( M );
						}
					}
				}

				if ( l.len != 0 ) {
					F["contents"] = l;
				}

				if ( l != this.contents ) {
					GlobalFuncs.qdel( l );
				}
			}
			return;
		}

		// Function from file: atoms.dm
		public override dynamic Stat(  ) {
			dynamic _default = null;

			_default = base.Stat();
			Task13.Sleep( 1 );
			return _default;
		}

		// Function from file: drag_drop.dm
		public virtual dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			
			if ( !( Task13.User != null ) || !Lang13.Bool( over ) ) {
				return null;
			}

			if ( over == this ) {
				Task13.User.client.Click( this, src_location, src_control, _params ); return null;
			}

			if ( !this.Adjacent( Task13.User ) || !((Ent_Static)over).Adjacent( Task13.User ) ) {
				return null;
			}
			((Ent_Static)over).MouseDrop_T( this, Task13.User );
			return null;
		}

		// Function from file: click.dm
		public override bool DblClick( dynamic loc = null, string control = null, string _params = null ) {
			Task13.User.DblClickOn( this, _params );
			return false;
		}

		// Function from file: click.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			Task13.User.ClickOn( this, _params );
			return false;
		}

		// Function from file: states.dm
		public int contents_ui_distance( Game_Data src_object = null, Mob_Living user = null ) {
			return user.shared_living_ui_distance( src_object );
		}

		// Function from file: shuttle.dm
		public virtual void shuttleRotate( double? rotation = null ) {
			double? turntimes = null;
			int oldPX = 0;
			int oldPY = 0;

			this.dir = ((int)( GlobalFuncs.angle2dir( ( rotation ??0) + ( GlobalFuncs.dir2angle( this.dir ) ??0) ) ??0 ));

			if ( this.smooth != 0 ) {
				GlobalFuncs.smooth_icon( this );
			}

			if ( this.pixel_x != 0 || this.pixel_y != 0 ) {
				
				if ( ( rotation ??0) < 0 ) {
					rotation += 360;
				}
				turntimes = null;
				turntimes = ( rotation ??0) / 90;

				while (( turntimes ??0) > 0) {
					oldPX = this.pixel_x;
					oldPY = this.pixel_y;
					this.pixel_x = oldPY;
					this.pixel_y = oldPX * -1;
					turntimes--;
				}
			}
			return;
		}

		// Function from file: holder.dm
		public void create_reagents( dynamic max_vol = null ) {
			
			if ( this.reagents != null ) {
				GlobalFuncs.qdel( this.reagents );
			}
			this.reagents = new Reagents( max_vol );
			this.reagents.my_atom = this;
			return;
		}

		// Function from file: ninjaDrainAct.dm
		public virtual dynamic ninjadrain_act( Obj_Item_Clothing_Suit_Space_SpaceNinja S = null, Ent_Static H = null, Obj_Item_Clothing_Gloves_SpaceNinja G = null ) {
			return "INVALID";
		}

		// Function from file: eye.dm
		public void move_camera_by_click(  ) {
			Mob AI = null;

			
			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				AI = Task13.User;

				if ( Lang13.Bool( ((dynamic)AI).eyeobj ) && AI.client.eye == ((dynamic)AI).eyeobj ) {
					((dynamic)AI).cameraFollow = null;

					if ( this.loc is Tile || this is Tile ) {
						((Mob_Camera_AiEye)((dynamic)AI).eyeobj).setLoc( this );
					}
				}
			}
			return;
		}

		// Function from file: ventcrawling.dm
		public virtual Ent_Static update_pipe_vision( Obj_Machinery_Atmospherics new_loc = null ) {
			return null;
		}

		// Function from file: mob.dm
		public virtual void audible_message( dynamic message = null, string deaf_message = null, int? hearing_distance = null, string self_message = null ) {
			double? range = null;
			dynamic M = null;

			range = 7;

			if ( Lang13.Bool( hearing_distance ) ) {
				range = hearing_distance;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_hearers_in_view( range, this ) )) {
				M = _a;
				
				((Mob)M).show_message( message, 2, deaf_message, 1 );
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void visible_message( dynamic message = null, dynamic self_message = null, string blind_message = null ) {
			dynamic T = null;
			dynamic M = null;
			dynamic msg = null;

			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_hearers_in_view( 7, this ) )) {
				M = _a;
				

				if ( !Lang13.Bool( M.client ) ) {
					continue;
				}
				msg = message;

				if ( Convert.ToDouble( M.see_invisible ) < this.invisibility || T != this.loc ) {
					
					if ( Lang13.Bool( self_message ) ) {
						msg = self_message;
					} else {
						continue;
					}
				} else if ( Lang13.Bool( T.lighting_object ) ) {
					
					if ( Convert.ToDouble( T.lighting_object.invisibility ) <= Convert.ToDouble( M.see_invisible ) && !Lang13.Bool( T.lighting_object.luminosity ) ) {
						
						if ( Lang13.Bool( self_message ) ) {
							msg = self_message;
						} else {
							continue;
						}
					}
				}
				((Mob)M).show_message( msg, 1, self_message, 2 );
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void prepare_huds(  ) {
			dynamic hud = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.hud_possible )) {
				hud = _a;
				
				this.hud_list[hud] = new Image( "icons/mob/hud.dmi", this, "" );
			}
			return;
		}

		// Function from file: lighting_system.dm
		public virtual int get_light_range( int radius = 0 ) {
			return Num13.MinInt( radius, 8 );
		}

		// Function from file: lighting_system.dm
		public virtual void UpdateAffectingLights(  ) {
			return;
		}

		// Function from file: lighting_system.dm
		public bool SetOpacity( dynamic new_opacity = null ) {
			new_opacity = new_opacity ?? !this.opacity;

			this.opacity = Lang13.Bool( new_opacity );
			this.UpdateAffectingLights();
			return true;
		}

		// Function from file: lighting_system.dm
		public void AddLuminosity( double delta_luminosity = 0 ) {
			
			if ( this.light != null ) {
				this.SetLuminosity( this.light.luminosity + delta_luminosity );
			} else {
				this.SetLuminosity( delta_luminosity );
			}
			return;
		}

		// Function from file: lighting_system.dm
		public virtual void SetLuminosity( dynamic new_luminosity = null, int? new_cap = null ) {
			
			if ( !( this.light != null ) ) {
				
				if ( Convert.ToDouble( new_luminosity ) <= 0 ) {
					return;
				}
				this.light = new LightSource( this );
			}
			this.light.UpdateLuminosity( new_luminosity, new_cap );
			return;
		}

		// Function from file: detective_work.dm
		public void transfer_fingerprints_to( dynamic A = null ) {
			
			if ( !( A.fingerprints is ByTable ) ) {
				A.fingerprints = new ByTable();
			}

			if ( !( A.fingerprintshidden is ByTable ) ) {
				A.fingerprintshidden = new ByTable();
			}

			if ( !( this.fingerprints is ByTable ) ) {
				this.fingerprints = new ByTable();
			}

			if ( !( this.fingerprintshidden is ByTable ) ) {
				this.fingerprintshidden = new ByTable();
			}

			if ( this.fingerprints != null ) {
				A.fingerprints.Or( this.fingerprints.Copy() );
			}

			if ( this.fingerprintshidden != null ) {
				A.fingerprintshidden.Or( this.fingerprintshidden.Copy() );
			}
			A.fingerprintslast = this.fingerprintslast;
			return;
		}

		// Function from file: detective_work.dm
		public bool add_fingerprint( dynamic M = null, bool? ignoregloves = null ) {
			ignoregloves = ignoregloves ?? false;

			dynamic H = null;
			Obj_Item_Clothing_Gloves G = null;
			string full_print = null;

			
			if ( M == null ) {
				return false;
			}

			if ( M.key == null ) {
				return false;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( !( this.fingerprintshidden != null ) ) {
					this.fingerprintshidden = new ByTable();
				}
				this.add_fibers( H );

				if ( Lang13.Bool( H.gloves ) ) {
					G = H.gloves;

					if ( G.transfer_prints ) {
						ignoregloves = true;
					}
				}

				if ( !( ignoregloves == true ) ) {
					
					if ( Lang13.Bool( H.gloves ) && H.gloves != this ) {
						
						if ( this.fingerprintslast != H.ckey ) {
							this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "](Wearing gloves). Real name: " + H.real_name + ", Key: " + H.key );
							this.fingerprintslast = H.ckey;
						}
						((Ent_Static)H.gloves).add_fingerprint( M );
						return false;
					}
				}

				if ( this.fingerprintslast != H.ckey ) {
					this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "]Real name: " + H.real_name + ", Key: " + H.key );
					this.fingerprintslast = H.ckey;
				}

				if ( !( this.fingerprints != null ) ) {
					this.fingerprints = new ByTable();
				}
				full_print = Num13.Md5( H.dna.uni_identity );
				this.fingerprints[full_print] = full_print;
				return true;
			} else if ( this.fingerprintslast != M.ckey ) {
				this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "]Real name: " + M.real_name + ", Key: " + M.key );
				this.fingerprintslast = M.ckey;
			}
			return false;
		}

		// Function from file: detective_work.dm
		public bool add_hiddenprint( dynamic M = null ) {
			dynamic H = null;

			
			if ( M == null ) {
				return false;
			}

			if ( M.key == null ) {
				return false;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( Lang13.Bool( H.gloves ) ) {
					
					if ( this.fingerprintslast != H.ckey ) {
						this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "] (Wearing gloves). Real name: " + H.real_name + ", Key: " + H.key );
						this.fingerprintslast = H.ckey;
					}
					return false;
				}

				if ( !( this.fingerprints != null ) ) {
					
					if ( this.fingerprintslast != H.ckey ) {
						this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "] Real name: " + H.real_name + ", Key: " + H.key );
						this.fingerprintslast = H.ckey;
					}
					return true;
				}
			} else if ( this.fingerprintslast != M.ckey ) {
				this.fingerprintshidden.Add( "[" + GlobalFuncs.time_stamp() + "] Real name: " + M.real_name + ", Key: " + M.key );
				this.fingerprintslast = M.ckey;
			}
			return false;
		}

		// Function from file: detective_work.dm
		public void add_fibers( dynamic M = null ) {
			Obj_Item_Clothing_Gloves G = null;
			string fibertext = null;
			double item_multiplier = 0;

			
			if ( Lang13.Bool( M.gloves ) && M.gloves is Obj_Item_Clothing ) {
				G = M.gloves;

				if ( G.transfer_blood > 1 ) {
					
					if ( this.add_blood( G.bloody_hands_mob ) ) {
						G.transfer_blood--;
					}
				}
			} else if ( M.bloody_hands > 1 ) {
				
				if ( this.add_blood( M.bloody_hands_mob ) ) {
					M.bloody_hands--;
				}
			}

			if ( !( this.suit_fibers != null ) ) {
				this.suit_fibers = new ByTable();
			}
			item_multiplier = ( this is Obj_Item ? 1.2 : 1 );

			if ( Lang13.Bool( M.wear_suit ) ) {
				fibertext = new Txt( "Material from " ).a( M.wear_suit ).item().str( "." ).ToString();

				if ( Rand13.PercentChance( ((int)( item_multiplier * 10 )) ) && !this.suit_fibers.Contains( fibertext ) ) {
					this.suit_fibers.Add( fibertext );
				}

				if ( !( ( ( M.wear_suit.body_parts_covered ??0) & 2 ) != 0 ) ) {
					
					if ( Lang13.Bool( M.w_uniform ) ) {
						fibertext = new Txt( "Fibers from " ).a( M.w_uniform ).item().str( "." ).ToString();

						if ( Rand13.PercentChance( ((int)( item_multiplier * 12 )) ) && !this.suit_fibers.Contains( fibertext ) ) {
							this.suit_fibers.Add( fibertext );
						}
					}
				}

				if ( !( ( ( M.wear_suit.body_parts_covered ??0) & 1536 ) != 0 ) ) {
					
					if ( Lang13.Bool( M.gloves ) ) {
						fibertext = "Material from a pair of " + M.gloves.name + ".";

						if ( Rand13.PercentChance( ((int)( item_multiplier * 20 )) ) && !this.suit_fibers.Contains( fibertext ) ) {
							this.suit_fibers.Add( fibertext );
						}
					}
				}
			} else if ( Lang13.Bool( M.w_uniform ) ) {
				fibertext = new Txt( "Fibers from " ).a( M.w_uniform ).item().str( "." ).ToString();

				if ( Rand13.PercentChance( ((int)( item_multiplier * 15 )) ) && !this.suit_fibers.Contains( fibertext ) ) {
					this.suit_fibers.Add( fibertext );
				}

				if ( Lang13.Bool( M.gloves ) ) {
					fibertext = "Material from a pair of " + M.gloves.name + ".";

					if ( Rand13.PercentChance( ((int)( item_multiplier * 20 )) ) && !this.suit_fibers.Contains( fibertext ) ) {
						this.suit_fibers.Add( "Material from a pair of " + M.gloves.name + "." );
					}
				}
			} else if ( Lang13.Bool( M.gloves ) ) {
				fibertext = "Material from a pair of " + M.gloves.name + ".";

				if ( Rand13.PercentChance( ((int)( item_multiplier * 20 )) ) && !this.suit_fibers.Contains( fibertext ) ) {
					this.suit_fibers.Add( "Material from a pair of " + M.gloves.name + "." );
				}
			}
			return;
		}

		// Function from file: LINDA_system.dm
		public virtual bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;

			return !this.density || !Lang13.Bool( height );
		}

		// Function from file: LINDA_fire.dm
		public virtual dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			return null;
		}

		// Function from file: admin_investigate.dm
		public void investigate_log( string message = null, string subject = null ) {
			File F = null;

			
			if ( !Lang13.Bool( message ) ) {
				return;
			}
			F = GlobalFuncs.investigate_subject2file( subject );

			if ( !( F != null ) ) {
				return;
			}
			F.WriteMsg( new Txt( "<small>" ).item( GlobalFuncs.time_stamp() ).str( " " ).Ref( this ).str( " (" ).item( this.x ).str( "," ).item( this.y ).str( "," ).item( this.z ).str( ")</small> || " ).item( this ).str( " " ).item( message ).str( "<br>" ).ToString() );
			return;
		}

		// Function from file: ai_core.dm
		public virtual bool transfer_ai( dynamic interaction = null, dynamic user = null, Ent_Static AI = null, dynamic card = null ) {
			
			if ( card is Obj_Item_Device_Aicard ) {
				
				if ( Lang13.Bool( card.flush ) ) {
					user.WriteMsg( "<span class='boldannounce'>ERROR</span>: AI flush is in progress, cannot execute transfer protocol." );
					return false;
				}
			}
			return true;
		}

		// Function from file: radiation.dm
		public virtual bool rad_act( double severity = 0 ) {
			return true;
		}

		// Function from file: mecha_defense.dm
		public virtual bool mech_melee_attack( Obj_Mecha M = null ) {
			return false;
		}

		// Function from file: broadcasting.dm
		public Signal telecomms_process(  ) {
			Signal signal = null;
			dynamic pos = null;
			Obj_Machinery_Telecomms_Receiver R = null;

			signal = new Signal();
			signal.transmission_method = 2;
			pos = GlobalFuncs.get_turf( this );
			signal.data = new ByTable().Set( "slow", 0 ).Set( "message", "TEST" ).Set( "compression", Rand13.Int( 45, 50 ) ).Set( "traffic", 0 ).Set( "type", 4 ).Set( "reject", 0 ).Set( "done", 0 ).Set( "level", pos.z );
			signal.frequency = 1459;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms_Receiver) )) {
				R = _a;
				
				R.receive_signal( signal );
			}
			Task13.Sleep( Rand13.Int( 10, 25 ) );
			return signal;
		}

		// Function from file: broadcasting.dm
		public dynamic test_telecomms(  ) {
			Signal signal = null;
			dynamic position = null;

			signal = this.telecomms_process();
			position = GlobalFuncs.get_turf( this );
			return ((dynamic)( Lang13.Bool( signal.data["level"] ) && Lang13.Bool( signal.data["done"] ) )).Contains( position.z );
		}

		// Function from file: camera.dm
		public void auto_turn(  ) {
			Tile T = null;
			int? i = null;

			T = null;
			i = null;
			i = 1;

			while (( i ??0) <= 8) {
				T = GlobalFuncs.get_ranged_target_turf( this, i, 1 );

				if ( T is Tile_Simulated_Wall ) {
					
					switch ((int?)( i )) {
						case 1:
							this.dir = ((int)( GlobalVars.SOUTH ));
							break;
						case 2:
							this.dir = ((int)( GlobalVars.NORTH ));
							break;
						case 8:
							this.dir = ((int)( GlobalVars.EAST ));
							break;
						case 4:
							this.dir = ((int)( GlobalVars.WEST ));
							break;
					}
					break;
				}
				i += i ??0;
			}
			return;
		}

		// Function from file: swarmer.dm
		public virtual void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.DisIntegrate( this );
			return;
		}

		// Function from file: sound.dm
		public virtual void playsound_local( dynamic turf_source = null, dynamic soundin = null, int? vol = null, int? vary = null, double? frequency = null, int? falloff = null, bool? surround = null ) {
			surround = surround ?? true;

			Sound S = null;
			dynamic T = null;
			int pressure_factor = 0;
			GasMixture hearer_env = null;
			GasMixture source_env = null;
			double pressure = 0;
			int distance = 0;
			int dx = 0;
			int dz = 0;

			soundin = GlobalFuncs.get_sfx( soundin );
			S = new Sound( soundin );
			S.wait = false;
			S.channel = 0;
			S.volume = vol;

			if ( Lang13.Bool( vary ) ) {
				
				if ( Lang13.Bool( frequency ) ) {
					S.frequency = frequency;
				} else {
					S.frequency = GlobalFuncs.get_rand_frequency();
				}
			}

			if ( turf_source is Tile ) {
				T = GlobalFuncs.get_turf( this );
				pressure_factor = 1;
				hearer_env = ((Ent_Static)T).return_air();
				source_env = ((Ent_Static)turf_source).return_air();

				if ( hearer_env != null && source_env != null ) {
					pressure = Num13.MinInt( ((int)( hearer_env.return_pressure() )), ((int)( source_env.return_pressure() )) );

					if ( pressure < 101.32499694824219 ) {
						pressure_factor = Num13.MaxInt( ((int)( ( pressure - 10 ) / 91.32499694824219 )), 0 );
					}
				} else {
					pressure_factor = 0;
				}
				distance = Map13.GetDistance( T, turf_source );

				if ( distance <= 1 ) {
					pressure_factor = Num13.MaxInt( pressure_factor, ((int)( 0.15 )) );
				}
				S.volume *= pressure_factor;

				if ( ( S.volume ??0) <= 0 ) {
					return;
				}

				if ( surround == true ) {
					dx = Convert.ToInt32( turf_source.x - T.x );
					S.x = Num13.Round( Num13.MaxInt( -7, Num13.MinInt( 7, dx ) ), 1 );
					dz = Convert.ToInt32( turf_source.y - T.y );
					S.z = Num13.Round( Num13.MaxInt( -7, Num13.MinInt( 7, dz ) ), 1 );
				}
				S.y = true;
				S.falloff = ( Lang13.Bool( falloff ) ? falloff : 1 );
			}
			((dynamic)this).WriteMsg( S );
			return;
		}

		// Function from file: data_huds.dm
		public void remove_from_all_data_huds(  ) {
			AtomHud_Data hud = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.huds, typeof(AtomHud_Data) )) {
				hud = _a;
				
				hud.remove_from_hud( this );
			}
			return;
		}

		// Function from file: data_huds.dm
		public void add_to_all_human_data_huds(  ) {
			AtomHud_Data_Human hud = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.huds, typeof(AtomHud_Data_Human) )) {
				hud = _a;
				
				hud.add_to_hud( this );
			}
			return;
		}

		// Function from file: atoms.dm
		public virtual bool update_remote_sight( Mob user = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual void get_remote_view_fullscreens( Mob_Living user = null ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual void initialize(  ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual void handle_atom_del( Ent_Dynamic A = null ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual bool storage_contents_dump_act( Obj_Item_Weapon_Storage src_object = null, Mob user = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual void narsie_act(  ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual bool emag_act( dynamic user = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual dynamic acid_act( int acidpwr = 0, double? toxpwr = null, double? acid_volume = null ) {
			return null;
		}

		// Function from file: atoms.dm
		public virtual void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual double singularity_act( int? current_size = null, Obj_Singularity S = null ) {
			return 0;
		}

		// Function from file: atoms.dm
		public virtual bool handle_slip( Mob_Living_Carbon C = null, int s_amount = 0, int w_amount = 0, dynamic O = null, dynamic lube = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual void handle_fall( Mob_Living_Carbon faller = null, bool forced = false ) {
			return;
		}

		// Function from file: atoms.dm
		public bool isinspace(  ) {
			
			if ( GlobalFuncs.get_turf( this ) is Tile_Space ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: atoms.dm
		public dynamic get_global_map_pos(  ) {
			int? cur_x = null;
			dynamic cur_y = null;
			dynamic y_arr = null;

			
			if ( !( GlobalVars.global_map is ByTable ) || GlobalFuncs.isemptylist( GlobalVars.global_map ) ) {
				return null;
			}
			cur_x = null;
			cur_y = null;
			y_arr = null;
			cur_x = 1;

			while (( cur_x ??0) <= GlobalVars.global_map.len) {
				y_arr = GlobalVars.global_map[cur_x];
				cur_y = y_arr.Find( this.z );

				if ( Lang13.Bool( cur_y ) ) {
					break;
				}
				cur_x++;
			}

			if ( Lang13.Bool( cur_x ) && Lang13.Bool( cur_y ) ) {
				return new ByTable().Set( "x", cur_x ).Set( "y", cur_y );
			} else {
				return 0;
			}
		}

		// Function from file: atoms.dm
		public virtual bool clean_blood(  ) {
			
			if ( this.blood_DNA is ByTable ) {
				this.blood_DNA = null;
				return true;
			}
			return false;
		}

		// Function from file: atoms.dm
		public void add_blood_floor( dynamic M = null ) {
			dynamic B = null;
			dynamic B2 = null;
			dynamic B3 = null;

			
			if ( this is Tile_Simulated ) {
				
				if ( Lang13.Bool( M.has_dna() ) ) {
					B = Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_Blood), this.contents );

					if ( !Lang13.Bool( B ) ) {
						GlobalFuncs.blood_splatter( this, M, true );
						B = Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_Blood), this.contents );
					}
					B.blood_DNA[M.dna.unique_enzymes] = M.dna.blood_type;
				} else if ( M is Mob_Living_Carbon_Alien ) {
					B2 = Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_Xenoblood), this.contents );

					if ( !Lang13.Bool( B2 ) ) {
						B2 = new Obj_Effect_Decal_Cleanable_Xenoblood( this );
					}
					B2.blood_DNA["UNKNOWN BLOOD"] = "X*";
				} else if ( M is Mob_Living_Silicon_Robot ) {
					B3 = Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_Oil), this.contents );

					if ( !Lang13.Bool( B3 ) ) {
						B3 = new Obj_Effect_Decal_Cleanable_Oil( this );
					}
				}
			}
			return;
		}

		// Function from file: atoms.dm
		public void add_vomit_floor( Mob_Living_Carbon M = null, bool? toxvomit = null ) {
			toxvomit = toxvomit ?? false;

			Obj_Effect_Decal_Cleanable_Vomit _this = null;

			
			if ( this is Tile_Simulated ) {
				_this = new Obj_Effect_Decal_Cleanable_Vomit( this );

				if ( M.reagents != null ) {
					M.reagents.trans_to( _this, ( M.reagents.total_volume ??0) / 10 );
				}

				if ( toxvomit == true ) {
					_this.icon_state = "vomittox_" + Rand13.Pick(new object [] { 1, 4 });
				}
			}
			return;
		}

		// Function from file: atoms.dm
		public virtual bool rejects_blood(  ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual bool add_blood( dynamic M = null ) {
			dynamic H = null;

			
			if ( !Lang13.Bool( M ) || !Lang13.Bool( M.has_dna() ) || this.rejects_blood() ) {
				return false;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( H.dna.species.specflags.Contains( 1024 ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: atoms.dm
		public bool add_blood_list( dynamic M = null ) {
			
			if ( !( this.blood_DNA is ByTable ) ) {
				this.blood_DNA = new ByTable();
			}

			if ( Lang13.Bool( this.blood_DNA[M.dna.unique_enzymes] ) ) {
				return false;
			}
			this.blood_DNA[M.dna.unique_enzymes] = M.dna.blood_type;
			return true;
		}

		// Function from file: atoms.dm
		public string blood_splatter_index(  ) {
			return new Txt().Ref( Lang13.Initial( this, "icon" ) ).str( "-" ).item( Lang13.Initial( this, "icon_state" ) ).ToString();
		}

		// Function from file: atoms.dm
		public virtual bool hitby( Ent_Dynamic AM = null, bool? skipcatch = null, bool? hitpush = null, bool? blocked = null ) {
			
			if ( this.density && !GlobalFuncs.has_gravity( AM ) ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					Map13.Step( AM, Num13.Rotate( AM.dir, 180 ) );
					return;
				}));
			}
			return false;
		}

		// Function from file: atoms.dm
		public virtual bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual bool ex_act( double? severity = null, dynamic target = null ) {
			this.contents_explosion( severity, target );
			return false;
		}

		// Function from file: atoms.dm
		public virtual void contents_explosion( double? severity = null, dynamic target = null ) {
			Ent_Static A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Static) )) {
				A = _a;
				
				A.ex_act( severity, target );
			}
			return;
		}

		// Function from file: atoms.dm
		public virtual bool relaymove( Mob user = null, int? direction = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual double examine( dynamic user = null ) {
			string f_name = null;
			Reagent R = null;
			double total_volume = 0;
			Reagent R2 = null;

			f_name = new Txt().a( this ).item().str( "." ).ToString();

			if ( this.blood_DNA != null && !( this is Obj_Effect_Decal ) ) {
				
				if ( this.gender == GlobalVars.PLURAL ) {
					f_name = "some ";
				} else {
					f_name = "a ";
				}
				f_name += "<span class='danger'>blood-stained</span> " + this.name + "!";
			}
			user.WriteMsg( new Txt().icon( this ).str( " That's " ).item( f_name ).ToString() );

			if ( Lang13.Bool( this.desc ) ) {
				user.WriteMsg( this.desc );
			}

			if ( this.reagents != null && Lang13.Bool( this.is_open_container() ) ) {
				user.WriteMsg( "It contains:" );

				if ( this.reagents.reagent_list.len != 0 ) {
					
					if ( ((Mob)user).can_see_reagents() ) {
						
						foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
							R = _a;
							
							user.WriteMsg( "" + R.volume + " units of " + R.name );
						}
					} else {
						total_volume = 0;

						foreach (dynamic _b in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
							R2 = _b;
							
							total_volume += R2.volume;
						}
						user.WriteMsg( "" + total_volume + " units of various reagents" );
					}
				} else {
					user.WriteMsg( "Nothing." );
				}
			}
			return 0;
		}

		// Function from file: atoms.dm
		public ByTable search_contents_for( Type path = null, dynamic filter_path = null ) {
			ByTable found = null;
			Ent_Static A = null;
			int pass = 0;
			dynamic type = null;

			found = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Ent_Static) )) {
				A = _b;
				

				if ( Lang13.Bool( ((dynamic)path).IsInstanceOfType( A ) ) ) {
					found.Add( A );
				}

				if ( Lang13.Bool( filter_path ) ) {
					pass = 0;

					foreach (dynamic _a in Lang13.Enumerate( filter_path )) {
						type = _a;
						
						pass |= Convert.ToInt32( type.IsInstanceOfType( A ) );
					}

					if ( !( pass != 0 ) ) {
						continue;
					}
				}

				if ( A.contents.len != 0 ) {
					found.Add( A.search_contents_for( path, filter_path ) );
				}
			}
			return found;
		}

		// Function from file: atoms.dm
		public bool in_contents_of( Type container = null ) {
			
			if ( container is Type ) {
				
				if ( Lang13.Bool( ((dynamic)container).IsInstanceOfType( this.loc ) ) ) {
					return true;
				}
			} else if ( Lang13.Bool( ((dynamic)container).Contains( this ) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: atoms.dm
		public virtual dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			dynamic _default = null;

			_default = ((Obj_Item_Projectile)P).on_hit( this, 0, def_zone );
			return _default;
		}

		// Function from file: atoms.dm
		public virtual double emp_act( int severity = 0 ) {
			return 0;
		}

		// Function from file: atoms.dm
		public virtual bool HasProximity( dynamic AM = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual bool CheckExit( Ent_Dynamic mover = null, Tile target = null ) {
			return true;
		}

		// Function from file: atoms.dm
		public virtual bool allow_drop(  ) {
			return true;
		}

		// Function from file: atoms.dm
		public dynamic is_open_container(  ) {
			return this.flags & 4096;
		}

		// Function from file: atoms.dm
		public virtual bool Bumped( dynamic AM = null ) {
			return false;
		}

		// Function from file: atoms.dm
		public virtual void on_reagent_change(  ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual dynamic check_eye( Mob user = null ) {
			return null;
		}

		// Function from file: atoms.dm
		public virtual GasMixture return_air(  ) {
			
			if ( this.loc != null ) {
				return this.loc.return_air();
			} else {
				return null;
			}
		}

		// Function from file: atoms.dm
		public virtual dynamic remove_air( double amount = 0 ) {
			return null;
		}

		// Function from file: atoms.dm
		public virtual bool? assume_air( dynamic giver = null ) {
			GlobalFuncs.qdel( giver );
			return null;
		}

		// Function from file: atoms.dm
		public virtual void CheckParts( Game_Data holder = null ) {
			return;
		}

		// Function from file: atoms.dm
		public virtual bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			do_attack_animation = do_attack_animation ?? false;

			
			if ( do_attack_animation == true ) {
				hulk.changeNext_move( 8 );
				GlobalFuncs.add_logs( hulk, this, "punched", "hulk powers" );
				hulk.do_attack_animation( this );
			}
			return false;
		}

		// Function from file: atoms.dm
		public bool onSyndieBase(  ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}

			if ( Convert.ToInt32( T.z ) != 2 ) {
				return false;
			}

			if ( T.loc is Zone_Shuttle_Syndicate || T.loc is Zone_SyndicateMothership ) {
				return true;
			}
			return false;
		}

		// Function from file: atoms.dm
		public bool onCentcom(  ) {
			dynamic T = null;
			dynamic A = null;
			dynamic M = null;

			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}

			if ( Convert.ToInt32( T.z ) != 2 ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSshuttle.mobile )) {
				A = _a;
				
				M = A;

				if ( Lang13.Bool( M.areaInstance.Contains( M.launch_status == 1 && Lang13.Bool( T ) ) ) ) {
					return true;
				}
			}
			return T.loc is Zone_Centcom;
		}

		// Function from file: beam.dm
		public Beam Beam( dynamic BeamTarget = null, string icon_state = null, string icon = null, double? time = null, double? maxdistance = null, Type beam_type = null ) {
			icon_state = icon_state ?? "b_beam";
			icon = icon ?? "icons/effects/beam.dmi";
			time = time ?? 50;
			maxdistance = maxdistance ?? 10;
			beam_type = beam_type ?? typeof(Obj_Effect_Ebeam);

			Beam newbeam = null;

			newbeam = new Beam( this, BeamTarget, icon, icon_state, time, maxdistance, beam_type );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				newbeam.Start();
				return;
			}));
			return newbeam;
		}

		// Function from file: telekinesis.dm
		public virtual dynamic attack_self_tk( dynamic user = null ) {
			return null;
		}

		// Function from file: telekinesis.dm
		public virtual void attack_tk( Mob_Living_Carbon_Human user = null ) {
			
			if ( user.stat != 0 ) {
				return;
			}
			user.UnarmedAttack( this, false );
			return;
		}

		// Function from file: other_mobs.dm
		public virtual bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public virtual bool attack_larva( Mob_Living_Carbon_Alien_Larva user = null ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public virtual bool attack_alien( dynamic user = null ) {
			this.attack_paw( user );
			return false;
		}

		// Function from file: other_mobs.dm
		public virtual dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return null;
		}

		// Function from file: other_mobs.dm
		public virtual bool attack_animal( Mob_Living user = null ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public virtual dynamic interact( dynamic user = null, bool? flag1 = null ) {
			return null;
		}

		// Function from file: other_mobs.dm
		public virtual dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			return null;
		}

		// Function from file: observer.dm
		public virtual void attack_ghost( Mob user = null ) {
			
			if ( user.client != null ) {
				
				if ( Lang13.Bool( GlobalFuncs.IsAdminGhost( user ) ) ) {
					this.attack_ai( user );
				}

				if ( user.client.prefs.inquisitive_ghost ) {
					user.examinate( this );
				}
			}
			return;
		}

		// Function from file: item_attack.dm
		public virtual dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			return null;
		}

		// Function from file: god.dm
		public virtual void attack_god( Mob_Camera_God user = null ) {
			return;
		}

		// Function from file: drag_drop.dm
		public virtual bool MouseDrop_T( Ent_Static dropping = null, Mob user = null ) {
			return false;
		}

		// Function from file: cyborg.dm
		public virtual dynamic attack_robot( Mob_Living_Silicon_Robot user = null ) {
			this.attack_ai( user );
			return null;
		}

		// Function from file: cyborg.dm
		public virtual void BorgAltClick( Mob_Living_Silicon_Robot user = null ) {
			this.AltClick( user );
			return;
		}

		// Function from file: cyborg.dm
		public virtual void BorgCtrlClick( Mob_Living_Silicon_Robot user = null ) {
			this.CtrlClick( user );
			return;
		}

		// Function from file: cyborg.dm
		public virtual void BorgShiftClick( Mob_Living_Silicon_Robot user = null ) {
			this.ShiftClick( user );
			return;
		}

		// Function from file: cyborg.dm
		public virtual void BorgCtrlShiftClick( Mob_Living_Silicon_Robot user = null ) {
			this.CtrlShiftClick( user );
			return;
		}

		// Function from file: click.dm
		public void CtrlShiftClick( Mob user = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual bool AltClick( Mob user = null ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) && user.TurfAdjacent( T ) ) {
				
				if ( user.listed_turf == T ) {
					user.listed_turf = null;
				} else {
					user.listed_turf = T;
					((dynamic)user.client).statpanel = T.name;
				}
			}
			return false;
		}

		// Function from file: click.dm
		public void CtrlClick( Mob user = null ) {
			Mob ML = null;

			ML = user;

			if ( ML is Mob_Living ) {
				((Mob_Living)ML).pulled( this );
			}
			return;
		}

		// Function from file: click.dm
		public void ShiftClick( Mob user = null ) {
			
			if ( user.client != null && user.client.eye == user || user.client.eye == user.loc ) {
				user.examinate( this );
			}
			return;
		}

		// Function from file: ai.dm
		public virtual void AICtrlShiftClick(  ) {
			return;
		}

		// Function from file: ai.dm
		public virtual void AIShiftClick(  ) {
			return;
		}

		// Function from file: ai.dm
		public virtual void AIAltClick( Mob_Living_Silicon_Ai user = null ) {
			this.AltClick( user );
			return;
		}

		// Function from file: ai.dm
		public virtual void AICtrlClick(  ) {
			return;
		}

		// Function from file: ai.dm
		public virtual dynamic attack_ai( dynamic user = null ) {
			return null;
		}

		// Function from file: adjacent.dm
		public virtual bool Adjacent( dynamic neighbor = null, dynamic recurse = null ) {
			return false;
		}

		// Function from file: unsorted.dm
		public bool contains( dynamic A = null ) {
			Ent_Static location = null;

			
			if ( !Lang13.Bool( A ) ) {
				return false;
			}
			location = null;
			location = A.loc;

			while (location != null) {
				
				if ( location == this ) {
					return true;
				}
				location = location.loc;
			}
			return false;
		}

		// Function from file: unsorted.dm
		public ByTable GetAllContents(  ) {
			ByTable processing_list = null;
			ByTable assembled = null;
			dynamic A = null;
			Ent_Static a = null;

			processing_list = new ByTable(new object [] { this });
			assembled = new ByTable();

			while (processing_list.len != 0) {
				A = processing_list[1];
				processing_list.Remove( A );

				foreach (dynamic _a in Lang13.Enumerate( A, typeof(Ent_Static) )) {
					a = _a;
					

					if ( !assembled.Contains( a ) ) {
						processing_list.Or( a );
					}
				}
				assembled.Or( A );
			}
			return assembled;
		}

		// Function from file: matrices.dm
		public void SpinAnimation( double? speed = null, int? loops = null, int? clockwise = null, int? segments = null ) {
			speed = speed ?? 10;
			loops = loops ?? -1;
			clockwise = clockwise ?? 1;
			segments = segments ?? 3;

			double segment = 0;
			ByTable matrices = null;
			double i = 0;
			Matrix M = null;
			Matrix last = null;
			double i2 = 0;

			
			if ( !Lang13.Bool( segments ) ) {
				return;
			}
			segment = 360 / ( segments ??0);

			if ( !Lang13.Bool( clockwise ) ) {
				segment = -segment;
			}
			matrices = new ByTable();

			foreach (dynamic _a in Lang13.IterateRange( 1, ( segments ??0) - 1 )) {
				i = _a;
				
				M = Num13.Matrix( this.transform );
				M.Turn( segment * i );
				matrices.Add( M );
			}
			last = Num13.Matrix( this.transform );
			matrices.Add( last );
			speed /= segments ??0;
			Icon13.Animate( new ByTable().Set( 1, this ).Set( "transform", matrices[1] ).Set( "time", speed ).Set( 4, loops ) );

			foreach (dynamic _b in Lang13.IterateRange( 2, segments )) {
				i2 = _b;
				
				Icon13.Animate( new ByTable().Set( "transform", matrices[i2] ).Set( "time", speed ) );
			}
			return;
		}

		// Function from file: icons.dm
		public dynamic DrawPixelOn( string colour = null, double? drawX = null, double? drawY = null ) {
			Icon I = null;
			dynamic J = null;

			I = new Icon( this.icon );
			J = GlobalFuncs.DrawPixel( I, colour, drawX, drawY );

			if ( Lang13.Bool( J ) ) {
				this.icon = J;
				return J;
			}
			return 0;
		}

		// Function from file: icon_smoothing.dm
		public void replace_smooth_overlays( string nw = null, string ne = null, string sw = null, string se = null ) {
			this.clear_smooth_overlays();
			this.top_left_corner = nw;
			this.overlays.Add( nw );
			this.top_right_corner = ne;
			this.overlays.Add( ne );
			this.bottom_left_corner = sw;
			this.overlays.Add( sw );
			this.bottom_right_corner = se;
			this.overlays.Add( se );
			return;
		}

		// Function from file: icon_smoothing.dm
		public void clear_smooth_overlays(  ) {
			this.overlays.Remove( this.top_left_corner );
			this.top_left_corner = null;
			this.overlays.Remove( this.top_right_corner );
			this.top_right_corner = null;
			this.overlays.Remove( this.bottom_right_corner );
			this.bottom_right_corner = null;
			this.overlays.Remove( this.bottom_left_corner );
			this.bottom_left_corner = null;
			return;
		}

	}

}