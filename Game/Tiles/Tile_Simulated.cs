// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated : Tile {

		public int wet = 0;
		public int fire_protection = 0;
		public _Zone zone = null;
		public int open_directions = 0;
		public ByTable gasGraphics = null;
		public dynamic wet_overlay = null;
		public bool thermite = false;
		public bool can_thermite = true;
		public bool to_be_destroyed = false;
		public bool max_fire_temperature_sustained = false;
		public bool drying = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.oxygen = 21.826091766357422;
			this.nitrogen = 82.1076889038086;
		}

		// Function from file: simulated.dm
		public Tile_Simulated ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.loc is Zone_Chapel ) {
				this.holy = true;
			}
			this.levelupdate();
			return;
		}

		// Function from file: Turf.dm
		public override GasMixture return_air(  ) {
			
			if ( this.zone != null ) {
				
				if ( !this.zone.invalid ) {
					GlobalVars.air_master.mark_zone_update( this.zone );
					return this.zone.air;
				} else {
					
					if ( !( this.air != null ) ) {
						this.make_air();
					}
					this.c_copy_air();
					return this.air;
				}
			} else {
				
				if ( !( this.air != null ) ) {
					this.make_air();
				}
				return this.air;
			}
			return null;
		}

		// Function from file: Turf.dm
		public override dynamic remove_air( dynamic amount = null ) {
			GasMixture my_air = null;

			my_air = this.return_air();
			return my_air.remove( amount );
		}

		// Function from file: Turf.dm
		public override bool? assume_air( dynamic giver = null ) {
			GasMixture my_air = null;

			my_air = this.return_air();
			my_air.merge( giver );
			return null;
		}

		// Function from file: Turf.dm
		public override bool update_air_properties(  ) {
			int s_block = 0;
			_Zone z = null;
			int previously_open = 0;
			ByTable postponed = null;
			int? d = null;
			Tile unsim = null;
			int block = 0;
			int r_block = 0;
			Tile sim = null;
			Tile sim2 = null;
			_Zone newzone = null;
			dynamic T = null;

			
			if ( this.zone != null && this.zone.invalid ) {
				this.c_copy_air();
				this.zone = null;
			}
			s_block = this.c_airblock( this );

			if ( ( s_block & 1 ) != 0 ) {
				
				if ( this.zone != null ) {
					z = this.zone;

					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Door_Airlock), this ) ) ) {
						z.remove( this );
					} else {
						z.rebuild();
					}
				}
				return true;
			}
			previously_open = this.open_directions;
			this.open_directions = 0;
			d = null;
			d = 1;

			while (( d ??0) < 16) {
				unsim = Map13.GetStep( this, d ??0 );

				if ( !( unsim != null ) ) {
					
				} else {
					block = unsim.c_airblock( this );

					if ( ( block & 1 ) != 0 ) {
						
					} else {
						r_block = this.c_airblock( unsim );

						if ( ( r_block & 1 ) != 0 ) {
							
							if ( ( previously_open & ( d ??0) ) != 0 && unsim is Tile_Simulated ) {
								sim = unsim;

								if ( this.zone is _Zone && ((dynamic)sim).zone == this.zone ) {
									this.zone.rebuild();
									return false;
								}
							}
						} else {
							this.open_directions |= d ??0;

							if ( unsim is Tile_Simulated ) {
								sim2 = unsim;

								if ( GlobalVars.air_master.has_valid_zone( sim2 ) ) {
									
									if ( !( this.zone != null ) ) {
										
										if ( ( block & 2 ) != 0 && !( ( r_block & 2 ) != 0 ) || ( r_block & 2 ) != 0 && !( ( s_block & 2 ) != 0 ) ) {
											
											if ( !( postponed != null ) ) {
												postponed = new ByTable();
											}
											postponed.Add( sim2 );
										} else {
											((_Zone)((dynamic)sim2).zone).add( this );
										}
									} else if ( ((dynamic)sim2).zone != this.zone ) {
										GlobalVars.air_master.connect( this, sim2 );
									}
								}
							} else {
								
								if ( !( postponed != null ) ) {
									postponed = new ByTable();
								}
								postponed.Add( unsim );
							}
						}
					}
				}
				d *= 2;
			}

			if ( !GlobalVars.air_master.has_valid_zone( this ) ) {
				newzone = new _Zone();
				newzone.add( this );
			}

			foreach (dynamic _a in Lang13.Enumerate( postponed )) {
				T = _a;
				
				GlobalVars.air_master.connect( this, T );
			}
			return false;
		}

		// Function from file: Fire.dm
		public override void apply_fire_protection(  ) {
			this.fire_protection = Game13.time;
			return;
		}

		// Function from file: Fire.dm
		public override bool hotspot_expose( double? exposed_temperature = null, int exposed_volume = 0, bool? soh = null, bool? surfaces = null ) {
			dynamic W = null;
			GasMixture air_contents = null;
			bool igniting = false;

			W = Lang13.FindIn( typeof(Obj_Effect_Effect_Foam_Fire), this.contents );

			if ( W is Obj_Effect_Effect_Foam_Fire ) {
				return false;
			}

			if ( this.fire_protection > Game13.time - 300 ) {
				return false;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Fire), this ) ) ) {
				return true;
			}
			air_contents = this.return_air();

			if ( !( air_contents != null ) || ( exposed_temperature ??0) < 373.41 ) {
				return false;
			}
			igniting = false;

			if ( air_contents.check_combustability( this, surfaces ) ) {
				igniting = true;

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Fire), this ) ) ) {
					new Obj_Fire( this );
				}
			}
			return igniting;
		}

		// Function from file: Fire.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			dynamic E = null;

			E = null;

			if ( this.soot_type != null ) {
				E = Lang13.FindIn( this.soot_type, this );
			}

			if ( base.fire_act( air, exposed_temperature, exposed_volume ) ) {
				return true;
			}

			if ( this.molten || this.on_fire ) {
				
				if ( E is Obj_Effect ) {
					GlobalFuncs.qdel( E );
				}
				return false;
			}

			if ( !Lang13.Bool( E ) && this.soot_type != null && Rand13.PercentChance( 25 ) ) {
				Lang13.Call( this.soot_type, this );
			}
			return false;
		}

		// Function from file: update_triggers.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.visibilityChanged();
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: simulated.dm
		public override bool add_blood( dynamic M = null ) {
			Obj_Effect_Decal_Cleanable_Blood B = null;

			
			if ( !base.add_blood( (object)(M) ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Effect_Decal_Cleanable_Blood) )) {
				B = _a;
				

				if ( !Lang13.Bool( B.blood_DNA[M.dna.unique_enzymes] ) ) {
					B.blood_DNA[M.dna.unique_enzymes] = M.dna.b_type;
					B.virus2 = GlobalFuncs.virus_copylist( M.virus2 );
				}
				return true;
			}
			GlobalFuncs.blood_splatter( this, M, true );
			return true;
		}

		// Function from file: simulated.dm
		public override dynamic Entered( Ent_Dynamic Obj = null, Ent_Static oldloc = null ) {
			Ent_Dynamic M = null;
			Ent_Dynamic H = null;
			ByTable bloodDNA = null;
			string bloodcolor = null;
			Ent_Static S = null;
			Tile from = null;
			dynamic hair_style = null;

			
			if ( GlobalVars.movement_disabled && Task13.User.ckey != GlobalVars.movement_disabled_exception ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Movement is admin-disabled.</span>" );
				return null;
			}

			if ( Obj is Mob_Living_Carbon ) {
				M = Obj;

				if ( Lang13.Bool( ((dynamic)M).lying ) ) {
					return null;
				}

				if ( M is Mob_Living_Carbon_Human ) {
					H = M;
					bloodDNA = null;
					bloodcolor = "";

					if ( Lang13.Bool( ((dynamic)H).shoes ) ) {
						S = ((dynamic)H).shoes;

						if ( Lang13.Bool( ((dynamic)S).track_blood ) && S.blood_DNA != null ) {
							bloodDNA = S.blood_DNA;
							bloodcolor = S.blood_color;
							((dynamic)S).track_blood = Num13.MaxInt( ((int)( Num13.Round( Convert.ToDouble( ((dynamic)S).track_blood - 1 ), 1 ) )), 0 );
						}
					} else if ( Lang13.Bool( ((dynamic)H).track_blood ) && Lang13.Bool( ((dynamic)H).feet_blood_DNA ) ) {
						bloodDNA = ((dynamic)H).feet_blood_DNA;
						bloodcolor = ((dynamic)H).feet_blood_color;
						((dynamic)H).track_blood = Num13.MaxInt( ((int)( Num13.Round( Convert.ToDouble( ((dynamic)H).track_blood - 1 ), 1 ) )), 0 );
					}

					if ( bloodDNA != null ) {
						
						if ( M is Mob_Living_Carbon_Human_Vox ) {
							this.AddTracks( typeof(Obj_Effect_Decal_Cleanable_Blood_Tracks_Footprints_Vox), bloodDNA, H.dir, false, bloodcolor );
						} else {
							this.AddTracks( typeof(Obj_Effect_Decal_Cleanable_Blood_Tracks_Footprints), bloodDNA, H.dir, false, bloodcolor );
						}
						from = Map13.GetStep( H, ((int)( GlobalFuncs.reverse_direction( H.dir ) ??0 )) );

						if ( from is Tile_Simulated && from != null ) {
							
							if ( M is Mob_Living_Carbon_Human_Vox ) {
								((dynamic)from).AddTracks( typeof(Obj_Effect_Decal_Cleanable_Blood_Tracks_Footprints_Vox), bloodDNA, 0, H.dir, bloodcolor );
							} else {
								((dynamic)from).AddTracks( typeof(Obj_Effect_Decal_Cleanable_Blood_Tracks_Footprints), bloodDNA, 0, H.dir, bloodcolor );
							}
						}
					}
					bloodDNA = null;

					if ( Lang13.Bool( ((dynamic)H).h_style ) && !Lang13.Bool( ((dynamic)H).check_hidden_head_flags( 8193 ) ) ) {
						hair_style = GlobalVars.hair_styles_list[((dynamic)H).h_style];

						if ( Lang13.Bool( hair_style ) && Lang13.Bool( hair_style.flags & 1 ) ) {
							
							if ( ((dynamic)H).m_intent == "run" && Rand13.PercentChance( 5 ) ) {
								
								if ( Lang13.Bool( ((dynamic)H).Slip( 4, 5 ) ) ) {
									Map13.Step( H, H.dir );
									GlobalFuncs.to_chat( H, "<span class='notice'>You tripped over your hair!</span>" );
								}
							}
						}
					}
				}

				if ( !Lang13.Bool( ((dynamic)M).on_foot() ) ) {
					return base.Entered( Obj, oldloc );
				}

				if ( M is Mob_Living_Carbon_Slime ) {
					return base.Entered( Obj, oldloc );
				}

				switch ((int)( this.wet )) {
					case 1:
						
						if ( Lang13.Bool( ((dynamic)M).Slip( 5, 3 ) ) ) {
							Map13.Step( M, M.dir );
							M.visible_message( "<span class='warning'>" + M + " slips on the wet floor!</span>", "<span class='warning'>You slip on the wet floor!</span>" );
						}
						break;
					case 2:
						((Mob)M).stop_pulling();
						Map13.Step( M, M.dir );
						Task13.Schedule( 1, (Task13.Closure)(() => {
							Map13.Step( M, M.dir );
							return;
						}));
						Task13.Schedule( 2, (Task13.Closure)(() => {
							Map13.Step( M, M.dir );
							return;
						}));
						Task13.Schedule( 3, (Task13.Closure)(() => {
							Map13.Step( M, M.dir );
							return;
						}));
						Task13.Schedule( 4, (Task13.Closure)(() => {
							Map13.Step( M, M.dir );
							return;
						}));
						((dynamic)M).take_organ_damage( 2 );
						M.visible_message( "<span class='warning'>" + M + " slips on the floor!</span>", "<span class='warning'>You slip on the floor!</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/misc/slip.ogg", 50, 1, -3 );
						((dynamic)M).Weaken( 10 );
						break;
					case 3:
						
						if ( Rand13.PercentChance( 30 ) && Lang13.Bool( ((dynamic)M).Slip( 4, 3 ) ) ) {
							Map13.Step( M, M.dir );
							M.visible_message( "<span class='warning'>" + M + " slips on the icy floor!</span>", "<span class='warning'>You slip on the icy floor!</span>" );
						}
						break;
				}
			}
			base.Entered( Obj, oldloc );
			return null;
		}

		// Function from file: Turf.dm
		public void c_copy_air(  ) {
			
			if ( !( this.air != null ) ) {
				this.air = new GasMixture();
			}
			this.air.copy_from( this.zone.air );
			this.air.group_multiplier = 1;
			return;
		}

		// Function from file: Turf.dm
		public void set_graphic( int newGraphics = 0 ) {
			ByTable overlayGraphics = null;

			
			if ( !Lang13.Bool( Lang13.IsNumber( newGraphics ) ) ) {
				return;
			}

			if ( !( newGraphics != 0 ) ) {
				
				if ( this.gasGraphics != null ) {
					this.overlays.Remove( this.gasGraphics );
					this.gasGraphics = null;
				}
				return;
			}
			overlayGraphics = new ByTable();

			if ( ( newGraphics & 1 ) != 0 ) {
				overlayGraphics.Add( GlobalVars.plmaster );
			}

			if ( ( newGraphics & 2 ) != 0 ) {
				overlayGraphics.Add( GlobalVars.slmaster );
			}

			if ( overlayGraphics.len != 0 ) {
				
				if ( this.gasGraphics != null ) {
					this.overlays.Remove( this.gasGraphics );
					this.gasGraphics = null;
				}
				this.overlays.Add( overlayGraphics );
				this.gasGraphics = overlayGraphics.Copy();
			}
			return;
		}

		// Function from file: Fire.dm
		public double getAmtFuel( double? ignite_temp = null ) {
			ignite_temp = ignite_temp ?? 0;

			double fuel_found = 0;
			Ent_Static A = null;

			fuel_found = 0;

			if ( !Lang13.Bool( ignite_temp ) || ( this.autoignition_temperature ??0) < ( ignite_temp ??0) ) {
				fuel_found += this.getFireFuel() ??0;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Static) )) {
				A = _a;
				

				if ( !( A != null ) ) {
					continue;
				}

				if ( Lang13.Bool( ignite_temp ) && ( A.autoignition_temperature ??0) > ( ignite_temp ??0) ) {
					continue;
				}
				fuel_found += A.getFireFuel() ??0;
			}
			return fuel_found;
		}

		// Function from file: floor.dm
		public void dry( int? delay = null ) {
			delay = delay ?? 800;

			
			if ( this.drying || this.wet >= 2 ) {
				return;
			}
			this.drying = true;
			Task13.Schedule( delay ??0, (Task13.Closure)(() => {
				
				if ( !( this is Tile_Simulated ) ) {
					return;
				}

				if ( this.wet >= 2 ) {
					return;
				}
				this.wet = 0;
				this.drying = false;

				if ( Lang13.Bool( this.wet_overlay ) ) {
					this.overlays.Remove( this.wet_overlay );
					this.wet_overlay = null;
				}
				return;
			}));
			return;
		}

		// Function from file: floor.dm
		[VerbInfo( name: "wet" )]
		public void f_wet( int? delay = null ) {
			delay = delay ?? 800;

			
			if ( this.wet >= 1 ) {
				return;
			}
			this.wet = 1;

			if ( Lang13.Bool( this.wet_overlay ) ) {
				this.overlays.Remove( this.wet_overlay );
				this.wet_overlay = null;
			}
			this.wet_overlay = GlobalVars.w_overlays["wet"];
			this.overlays.Add( this.wet_overlay );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.dry( delay );
				return;
			}));
			return;
		}

		// Function from file: simulated.dm
		public void add_blood_floor( dynamic M = null ) {
			Game_Data _this = null;
			Game_Data B = null;

			
			if ( M is Mob_Living_Carbon_Monkey ) {
				GlobalFuncs.blood_splatter( this, M, true );
			} else if ( M is Mob_Living_Carbon_Alien ) {
				_this = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood_Xeno), this );
				((dynamic)_this).New( this );
				((dynamic)_this).blood_DNA["UNKNOWN BLOOD"] = "X*";
			} else if ( M is Mob_Living_Silicon_Robot ) {
				B = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood_Oil), this );
				((dynamic)B).New( this );
			}
			return;
		}

		// Function from file: simulated.dm
		public void AddTracks( Type typepath = null, ByTable bloodDNA = null, int comingdir = 0, bool goingdir = false, string bloodcolor = null ) {
			bloodcolor = bloodcolor ?? "#A10808";

			dynamic tracks = null;

			tracks = Lang13.FindIn( typepath, this );

			if ( !Lang13.Bool( tracks ) ) {
				tracks = GlobalFuncs.getFromPool( typepath, this );
			}
			((Obj_Effect_Decal_Cleanable_Blood_Tracks)tracks).AddTracks( bloodDNA, comingdir, goingdir, bloodcolor );
			return;
		}

	}

}