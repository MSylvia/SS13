// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated : Tile {

		public int? wet = 0;
		public Image wet_overlay = null;
		public double thermite = 0;
		public bool to_be_destroyed = false;
		public bool max_fire_temperature_sustained = false;
		public ExcitedGroup excited_group = null;
		public bool excited = false;
		public bool recently_active = false;
		public GasMixture air = null;
		public int archived_cycle = 0;
		public int current_cycle = 0;
		public dynamic active_hotspot = null;
		public double temperature_archived = 0;
		public ByTable atmos_overlay_types = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.oxygen = 21.83659553527832;
			this.nitrogen = 82.14720153808594;
		}

		// Function from file: LINDA_turf_tile.dm
		public Tile_Simulated ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.levelupdate();

			if ( this.smooth != 0 ) {
				GlobalFuncs.smooth_icon( this );
			}
			this.visibilityChanged();

			if ( !this.blocks_air ) {
				this.air = new GasMixture();
				this.air.copy_from_turf( this );
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public override dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			
			if ( this.temperature > this.heat_capacity ) {
				this.to_be_destroyed = true;
			}
			return null;
		}

		// Function from file: LINDA_turf_tile.dm
		public override dynamic remove_air( double amount = 0 ) {
			GasMixture removed = null;

			
			if ( this.air != null ) {
				removed = null;
				removed = this.air.remove( amount );
				this.update_visuals();
				return removed;
			} else {
				return base.remove_air( amount );
			}
		}

		// Function from file: LINDA_turf_tile.dm
		public override GasMixture return_air(  ) {
			
			if ( this.air != null ) {
				return this.air;
			} else {
				return base.return_air();
			}
		}

		// Function from file: LINDA_turf_tile.dm
		public override bool? assume_air( dynamic giver = null ) {
			GasMixture receiver = null;

			
			if ( !Lang13.Bool( giver ) ) {
				return false;
			}
			receiver = this.air;

			if ( receiver is GasMixture ) {
				this.air.merge( giver );
				this.update_visuals();
				return true;
			} else {
				return base.assume_air( (object)(giver) );
			}
		}

		// Function from file: LINDA_turf_tile.dm
		public override dynamic Destroy(  ) {
			this.visibilityChanged();

			if ( Lang13.Bool( this.active_hotspot ) ) {
				GlobalFuncs.qdel( this.active_hotspot );
			}
			return base.Destroy();
		}

		// Function from file: LINDA_fire.dm
		public override bool hotspot_expose( dynamic exposed_temperature = null, int exposed_volume = 0, bool? soh = null ) {
			GasMixture air_contents = null;
			double oxy = 0;
			double tox = 0;
			bool igniting = false;

			air_contents = this.return_air();

			if ( !( air_contents != null ) ) {
				return false;
			}
			oxy = ( Lang13.Bool( air_contents.gases["o2"] ) ? Lang13.Bool( air_contents.gases["o2"][1] ) : false ) ?1:0;
			tox = ( Lang13.Bool( air_contents.gases["plasma"] ) ? Lang13.Bool( air_contents.gases["plasma"][1] ) : false ) ?1:0;

			if ( Lang13.Bool( this.active_hotspot ) ) {
				
				if ( soh == true ) {
					
					if ( tox > 0.5 && oxy > 0.5 ) {
						
						if ( Convert.ToDouble( this.active_hotspot.temperature ) < Convert.ToDouble( exposed_temperature ) ) {
							this.active_hotspot.temperature = exposed_temperature;
						}

						if ( Convert.ToDouble( this.active_hotspot.volume ) < exposed_volume ) {
							this.active_hotspot.volume = exposed_volume;
						}
					}
				}
				return true;
			}
			igniting = false;

			if ( Convert.ToDouble( exposed_temperature ) > 373.41 && tox > 0.5 ) {
				igniting = true;
			}

			if ( igniting ) {
				
				if ( oxy < 0.5 || tox < 0.5 ) {
					return false;
				}
				this.active_hotspot = GlobalFuncs.PoolOrNew( typeof(Obj_Effect_Hotspot), this );
				this.active_hotspot.temperature = exposed_temperature;
				this.active_hotspot.volume = exposed_volume;
				this.active_hotspot.just_spawned = this.current_cycle < GlobalVars.SSair.times_fired;
				GlobalVars.SSair.add_to_active( this, false );
			}
			return igniting;
		}

		// Function from file: simulated.dm
		public override void contents_explosion( double? severity = null, dynamic target = null ) {
			int affecting_level = 0;
			dynamic V = null;
			dynamic A = null;

			
			if ( severity == 1 ) {
				affecting_level = 1;
			} else if ( this.is_shielded() ) {
				affecting_level = 3;
			} else if ( this.intact ) {
				affecting_level = 2;
			} else {
				affecting_level = 1;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents )) {
				V = _a;
				
				A = V;

				if ( Convert.ToDouble( A.level ) >= affecting_level ) {
					((Ent_Static)A).ex_act( severity, target );
				}
			}
			return;
		}

		// Function from file: simulated.dm
		public override dynamic ChangeTurf( dynamic path = null ) {
			dynamic _default = null;

			_default = base.ChangeTurf( (object)(path) );
			GlobalFuncs.smooth_icon_neighbors( this );
			return _default;
		}

		// Function from file: simulated.dm
		public override dynamic Entered( Ent_Dynamic Obj = null, Ent_Static oldloc = null ) {
			Ent_Dynamic M = null;

			base.Entered( Obj, oldloc );

			if ( Obj is Mob_Living_Carbon ) {
				M = Obj;

				switch ((int?)( this.wet )) {
					case 1:
						
						if ( !Lang13.Bool( ((dynamic)M).slip( 3, 1, null, GlobalVars.NO_SLIP_WHEN_WALKING ) ) ) {
							M.inertia_dir = 0;
						}
						return null;
						break;
					case 2:
						((dynamic)M).slip( 0, 7, null, 6 );
						return null;
						break;
					case 3:
						((dynamic)M).slip( 0, 4, null, 3 );
						return null;
						break;
				}
			}
			return null;
		}

		// Function from file: LINDA_turf_tile.dm
		public void radiate_to_spess(  ) {
			double delta_temperature = 0;
			double heat = 0;

			
			if ( this.temperature > 273.41 ) {
				delta_temperature = this.temperature_archived - 2.7;

				if ( this.heat_capacity > 0 && Math.Abs( delta_temperature ) > 0.5 ) {
					heat = this.thermal_conductivity * delta_temperature * ( this.heat_capacity * 700000 / ( this.heat_capacity + 700000 ) );
					this.temperature -= heat / this.heat_capacity;
				}
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public bool consider_superconductivity( bool? starting = null ) {
			
			if ( !( this.thermal_conductivity != 0 ) ) {
				return false;
			}

			if ( this.air != null ) {
				
				if ( Convert.ToDouble( this.air.temperature ) < ( starting == true ? 493.41 : 303.41 ) ) {
					return false;
				}

				if ( this.air.heat_capacity() < 0.5199189782142639 ) {
					return false;
				}
			} else if ( this.temperature < ( starting == true ? 493.41 : 303.41 ) ) {
				return false;
			}
			GlobalVars.SSair.active_super_conductivity.Or( this );
			return true;
		}

		// Function from file: LINDA_turf_tile.dm
		public bool super_conduct(  ) {
			double conductivity_directions = 0;
			dynamic direction = null;
			Tile T = null;
			dynamic direction2 = null;
			Tile neighbor = null;
			Tile T2 = null;

			conductivity_directions = 0;

			if ( this.blocks_air ) {
				conductivity_directions = 15;

				if ( this.archived_cycle < GlobalVars.SSair.times_fired ) {
					this.archive();
				}
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					direction = _a;
					
					T = Map13.GetStep( this, Convert.ToInt32( direction ) );

					if ( !this.atmos_adjacent_turfs.Contains( T ) && !( ( this.atmos_supeconductivity & Convert.ToInt32( direction ) ) != 0 ) ) {
						conductivity_directions += Convert.ToDouble( direction );
					}
				}
			}

			if ( conductivity_directions > 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					direction2 = _b;
					

					if ( ( ((int)( conductivity_directions )) & Convert.ToInt32( direction2 ) ) != 0 ) {
						neighbor = Map13.GetStep( this, Convert.ToInt32( direction2 ) );

						if ( !( neighbor.thermal_conductivity != 0 ) ) {
							continue;
						}

						if ( neighbor is Tile_Simulated ) {
							T2 = neighbor;

							if ( Convert.ToDouble( ((dynamic)T2).archived_cycle ) < GlobalVars.SSair.times_fired ) {
								((dynamic)T2).archive();
							}

							if ( Lang13.Bool( ((dynamic)T2).air ) ) {
								
								if ( this.air != null ) {
									this.air.temperature_share( ((dynamic)T2).air, 0.1 );
								} else {
									((GasMixture)((dynamic)T2).air).temperature_turf_share( this, T2.thermal_conductivity );
								}
								GlobalVars.SSair.add_to_active( T2, false );
							} else {
								
								if ( this.air != null ) {
									this.air.temperature_turf_share( T2, T2.thermal_conductivity );
								} else {
									this.share_temperature_mutual_solid( T2, T2.thermal_conductivity );
								}
								T2.temperature_expose( null, T2.temperature, null );
							}
							((Tile_Simulated)T2).consider_superconductivity();
						} else if ( this.air != null ) {
							this.air.temperature_mimic( neighbor, neighbor.thermal_conductivity );
						} else {
							this.mimic_temperature_solid( neighbor, neighbor.thermal_conductivity );
						}
					}
				}
			}
			this.radiate_to_spess();

			if ( this.air != null ) {
				this.air.temperature_turf_share( this, this.thermal_conductivity );

				if ( Convert.ToDouble( this.air.temperature ) < 303.41 ) {
					GlobalVars.SSair.active_super_conductivity.Remove( this );
					return false;
				}
			} else if ( this.temperature < 303.41 ) {
				GlobalVars.SSair.active_super_conductivity.Remove( this );
				return false;
			}
			return false;
		}

		// Function from file: LINDA_turf_tile.dm
		public void last_share_check(  ) {
			
			if ( this.air.last_share > 0.5199189782142639 ) {
				this.excited_group.reset_cooldowns();
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void share_air( dynamic T = null, int fire_count = 0, int? adjacent_turfs_length = null ) {
			dynamic difference = null;

			
			if ( Convert.ToDouble( T.current_cycle ) < fire_count ) {
				difference = this.air.share( T.air, adjacent_turfs_length );

				if ( Lang13.Bool( difference ) ) {
					
					if ( Convert.ToDouble( difference ) > 0 ) {
						this.consider_pressure_difference( T, difference );
					} else {
						((Tile)T).consider_pressure_difference( this, -difference );
					}
				}
				this.last_share_check();
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public ByTable tile_graphic(  ) {
			ByTable _default = null;

			ByTable gases = null;
			dynamic id = null;
			dynamic gas = null;

			_default = new ByTable();
			gases = this.air.gases;

			foreach (dynamic _a in Lang13.Enumerate( gases )) {
				id = _a;
				
				gas = gases[id];

				if ( Lang13.Bool( gas[3][4] ) && Convert.ToDouble( gas[1] ) > Convert.ToDouble( gas[3][3] ) ) {
					_default.Add( gas[3][4] );
				}
			}
			return _default;
		}

		// Function from file: LINDA_turf_tile.dm
		public void update_visuals(  ) {
			ByTable new_overlay_types = null;
			dynamic overlay = null;
			dynamic overlay2 = null;

			new_overlay_types = this.tile_graphic();

			foreach (dynamic _a in Lang13.Enumerate( this.atmos_overlay_types - new_overlay_types )) {
				overlay = _a;
				
				this.overlays.Remove( overlay );
				this.atmos_overlay_types.Remove( overlay );
			}

			foreach (dynamic _b in Lang13.Enumerate( new_overlay_types - this.atmos_overlay_types )) {
				overlay2 = _b;
				
				this.overlays.Add( overlay2 );
			}
			this.atmos_overlay_types = new_overlay_types;
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void archive(  ) {
			
			if ( this.air != null ) {
				this.air.archive();
			}
			this.temperature_archived = this.temperature;
			this.archived_cycle = GlobalVars.SSair.times_fired;
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void process_cell( int fire_count = 0 ) {
			bool remove = false;
			ByTable adjacent_turfs = null;
			ExcitedGroup our_excited_group = null;
			int? adjacent_turfs_length = null;
			dynamic t = null;
			dynamic enemy_tile = null;
			dynamic enemy_simulated = null;
			ExcitedGroup enemy_excited_group = null;
			ExcitedGroup EG = null;
			ExcitedGroup EG2 = null;
			dynamic difference = null;
			Ent_Dynamic item = null;

			
			if ( this.archived_cycle < fire_count ) {
				this.archive();
			}
			this.current_cycle = fire_count;
			remove = true;
			adjacent_turfs = this.atmos_adjacent_turfs;
			our_excited_group = this.excited_group;
			adjacent_turfs_length = adjacent_turfs.len;

			foreach (dynamic _a in Lang13.Enumerate( adjacent_turfs )) {
				t = _a;
				
				enemy_tile = t;

				if ( enemy_tile is Tile_Simulated ) {
					enemy_simulated = enemy_tile;

					if ( fire_count > Convert.ToDouble( enemy_simulated.current_cycle ) ) {
						((Tile_Simulated)enemy_simulated).archive();
					}

					if ( enemy_simulated.excited ) {
						enemy_excited_group = enemy_simulated.excited_group;

						if ( our_excited_group != null ) {
							
							if ( enemy_excited_group != null ) {
								
								if ( our_excited_group != enemy_excited_group ) {
									our_excited_group.merge_groups( enemy_excited_group );
									our_excited_group = this.excited_group;
								}
								this.share_air( enemy_simulated, fire_count, adjacent_turfs_length );
							} else if ( this.recently_active && enemy_simulated.recently_active || Lang13.Bool( this.air.compare( enemy_simulated.air ) ) ) {
								our_excited_group.add_turf( enemy_simulated );
								this.share_air( enemy_simulated, fire_count, adjacent_turfs_length );
							}
						} else if ( enemy_excited_group != null ) {
							
							if ( this.recently_active && enemy_simulated.recently_active || Lang13.Bool( this.air.compare( enemy_simulated.air ) ) ) {
								enemy_excited_group.add_turf( this );
								our_excited_group = this.excited_group;
								this.share_air( enemy_simulated, fire_count, adjacent_turfs_length );
							}
						} else if ( this.recently_active && enemy_simulated.recently_active || Lang13.Bool( this.air.compare( enemy_simulated.air ) ) ) {
							EG = new ExcitedGroup();
							EG.add_turf( this );
							EG.add_turf( enemy_simulated );
							our_excited_group = this.excited_group;
							this.share_air( enemy_simulated, fire_count, adjacent_turfs_length );
						}
					} else if ( Lang13.Bool( this.air.compare( enemy_simulated.air ) ) ) {
						GlobalVars.SSair.add_to_active( enemy_simulated );

						if ( our_excited_group != null ) {
							this.excited_group.add_turf( enemy_simulated );
						} else {
							EG2 = new ExcitedGroup();
							EG2.add_turf( this );
							EG2.add_turf( enemy_simulated );
							our_excited_group = this.excited_group;
						}
						this.share_air( enemy_simulated, fire_count, adjacent_turfs_length );
					}
				} else if ( Lang13.Bool( this.air.check_turf( enemy_tile, adjacent_turfs_length ) ) ) {
					difference = this.air.mimic( enemy_tile, adjacent_turfs_length );

					if ( Lang13.Bool( difference ) ) {
						
						if ( Convert.ToDouble( difference ) > 0 ) {
							this.consider_pressure_difference( enemy_tile, difference );
						} else {
							((Tile)enemy_tile).consider_pressure_difference( this, -difference );
						}
					}
					remove = false;

					if ( our_excited_group != null ) {
						this.last_share_check();
					}
				}
			}
			this.air.react();
			this.update_visuals();

			if ( Convert.ToDouble( this.air.temperature ) > 373.41 ) {
				this.hotspot_expose( this.air.temperature, 2500 );

				foreach (dynamic _b in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
					item = _b;
					
					item.temperature_expose( this.air, this.air.temperature, 2500 );
				}
				this.temperature_expose( this.air, this.air.temperature, 2500 );

				if ( Convert.ToDouble( this.air.temperature ) > 493.41 ) {
					
					if ( this.consider_superconductivity( true ) ) {
						remove = false;
					}
				}
			}

			if ( !( our_excited_group != null ) && remove ) {
				GlobalVars.SSair.remove_from_active( this );
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void share_temperature_mutual_solid( Tile sharer = null, double conduction_coefficient = 0 ) {
			double delta_temperature = 0;
			double heat = 0;

			delta_temperature = this.temperature_archived - Convert.ToDouble( ((dynamic)sharer).temperature_archived );

			if ( Math.Abs( delta_temperature ) > 0.5 && this.heat_capacity != 0 && sharer.heat_capacity != 0 ) {
				heat = conduction_coefficient * delta_temperature * ( this.heat_capacity * sharer.heat_capacity / ( this.heat_capacity + sharer.heat_capacity ) );
				this.temperature -= heat / this.heat_capacity;
				sharer.temperature += heat / sharer.heat_capacity;
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void mimic_temperature_solid( Tile model = null, double conduction_coefficient = 0 ) {
			double delta_temperature = 0;
			double heat = 0;

			delta_temperature = this.temperature_archived - model.temperature;

			if ( this.heat_capacity > 0 && Math.Abs( delta_temperature ) > 0.5 ) {
				heat = conduction_coefficient * delta_temperature * ( this.heat_capacity * model.heat_capacity / ( this.heat_capacity + model.heat_capacity ) );
				this.temperature -= heat / this.heat_capacity;
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void copy_air( GasMixture copy = null ) {
			
			if ( this.air != null && copy != null ) {
				this.air.copy_from( copy );
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void copy_air_with_tile( Base_Data T = null ) {
			
			if ( T is Tile_Simulated && Lang13.Bool( ((dynamic)T).air ) && this.air != null ) {
				this.air.copy_from( ((dynamic)T).air );
			}
			return;
		}

		// Function from file: LINDA_system.dm
		public void atmos_spawn_air( int flag = 0, double? amount = null ) {
			GasMixture G = null;
			ByTable new_gases = null;

			
			if ( !Lang13.Bool( this.text ) || !Lang13.Bool( amount ) || !( this.air != null ) ) {
				return;
			}
			G = new GasMixture();
			new_gases = G.gases;

			if ( ( flag & 2 ) != 0 ) {
				G.temperature = 293.41;
			}

			if ( ( flag & 1 ) != 0 ) {
				G.temperature += 1000;
			}

			if ( ( flag & 4 ) != 0 ) {
				G.assert_gas( "plasma" );
				new_gases["plasma"][1] += amount;
			}

			if ( ( flag & 8 ) != 0 ) {
				G.assert_gas( "o2" );
				new_gases["o2"][1] += amount;
			}

			if ( ( flag & 16 ) != 0 ) {
				G.assert_gas( "co2" );
				new_gases["co2"][1] += amount;
			}

			if ( ( flag & 32 ) != 0 ) {
				G.assert_gas( "n2" );
				new_gases["n2"][1] += amount;
			}

			if ( ( flag & 64 ) != 0 ) {
				G.assert_gas( "n2o" );
				new_gases["n2o"][1] += amount;
			}

			if ( ( flag & 256 ) != 0 ) {
				G.assert_gases( "o2", "n2" );
				new_gases["o2"][1] += ( amount ??0) * 21.83659553527832;
				new_gases["n2"][1] += ( amount ??0) * 82.14720153808594;
			}
			this.air.merge( G );
			GlobalVars.SSair.add_to_active( this, false );
			return;
		}

		// Function from file: turf.dm
		public void Assimilate_Air(  ) {
			GasMixture total = null;
			ByTable total_gases = null;
			int turf_count = 0;
			dynamic direction = null;
			Tile T = null;
			Tile S = null;
			ByTable S_gases = null;
			dynamic id = null;
			ByTable air_gases = null;
			dynamic id2 = null;

			
			if ( this.air != null ) {
				total = new GasMixture();
				total_gases = total.gases;
				turf_count = 0;

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					direction = _b;
					
					T = Map13.GetStep( this, Convert.ToInt32( direction ) );

					if ( T is Tile_Space ) {
						turf_count++;
						continue;
					}

					if ( T is Tile_Simulated_Floor ) {
						S = T;

						if ( Lang13.Bool( ((dynamic)S).air ) ) {
							S_gases = ((dynamic)S).air.gases;

							foreach (dynamic _a in Lang13.Enumerate( S_gases )) {
								id = _a;
								
								total.assert_gas( id );
								total_gases[id][1] += S_gases[id][1];
							}
							total.temperature += ((dynamic)S).air.temperature;
						}
						turf_count++;
					}
				}
				this.air.copy_from( total );

				if ( turf_count != 0 ) {
					air_gases = this.air.gases;

					foreach (dynamic _c in Lang13.Enumerate( air_gases )) {
						id2 = _c;
						
						air_gases[id2][1] /= turf_count;
					}
					this.air.temperature /= turf_count;
				}
				GlobalVars.SSair.add_to_active( this );
			}
			return;
		}

		// Function from file: simulated.dm
		public virtual bool is_shielded(  ) {
			return false;
		}

		// Function from file: simulated.dm
		public void MakeDry( int? wet_setting = null ) {
			wet_setting = wet_setting ?? 1;

			
			if ( ( this.wet ??0) > ( wet_setting ??0) ) {
				return;
			}
			this.wet = 0;

			if ( this.wet_overlay != null ) {
				this.overlays.Remove( this.wet_overlay );
			}
			return;
		}

		// Function from file: simulated.dm
		public virtual void MakeSlippery( int? wet_setting = null ) {
			wet_setting = wet_setting ?? 1;

			Tile_Simulated F = null;

			
			if ( ( this.wet ??0) >= ( wet_setting ??0) ) {
				return;
			}
			this.wet = wet_setting;

			if ( wet_setting != 0 ) {
				
				if ( this.wet_overlay != null ) {
					this.overlays.Remove( this.wet_overlay );
					this.wet_overlay = null;
				}
				F = this;

				if ( F is Tile_Simulated_Floor ) {
					this.wet_overlay = new Image( "icons/effects/water.dmi", this, "wet_floor_static" );
				} else {
					this.wet_overlay = new Image( "icons/effects/water.dmi", this, "wet_static" );
				}
				this.overlays.Add( this.wet_overlay );
			}
			Task13.Schedule( Rand13.Int( 790, 820 ), (Task13.Closure)(() => {
				
				if ( !( this is Tile_Simulated ) ) {
					return;
				}
				this.MakeDry( wet_setting );
				return;
			}));
			return;
		}

		// Function from file: simulated.dm
		public virtual void burn_tile(  ) {
			return;
		}

		// Function from file: atoms.dm
		public override bool add_blood( dynamic M = null ) {
			dynamic B = null;

			
			if ( !base.add_blood( (object)(M) ) ) {
				return false;
			}
			B = Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_Blood), this.contents );

			if ( !Lang13.Bool( B ) ) {
				GlobalFuncs.blood_splatter( this, ((Mob_Living_Carbon)M).get_blood( M.vessel ), true );
				B = Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_Blood), this.contents );
			}
			((Ent_Static)B).add_blood_list( M );
			return true;
		}

	}

}