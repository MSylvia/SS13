// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Mineral : Tile_Simulated {

		public string environment_type = "asteroid";
		public Type turf_type = typeof(Tile_Simulated_Floor_Plating_Asteroid);
		public Type mineralType = null;
		public int mineralAmt = 3;
		public bool spread = false;
		public int spreadChance = 0;
		public int last_act = 0;
		public string scan_state = null;
		public bool hidden = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.baseturf = typeof(Tile_Simulated_Floor_Plating_Asteroid_Airless);
			this.blocks_air = true;
			this.temperature = 2.7;
			this.icon = "icons/turf/mining.dmi";
			this.icon_state = "rock_nochance";
			this.layer = 2.05;
		}

		// Function from file: mine_turfs.dm
		public Tile_Simulated_Mineral ( dynamic loc = null ) : base( (object)(loc) ) {
			Tile T = null;
			dynamic dir = null;
			Tile T2 = null;

			
			if ( !( GlobalVars.rockTurfEdgeCache != null ) || !( GlobalVars.rockTurfEdgeCache.len != 0 ) ) {
				GlobalVars.rockTurfEdgeCache = new ByTable();
				GlobalVars.rockTurfEdgeCache.len = 4;
				GlobalVars.rockTurfEdgeCache["north"] = new Image( "icons/turf/mining.dmi", "rock_side_n", null, 6 );
				GlobalVars.rockTurfEdgeCache["south"] = new Image( "icons/turf/mining.dmi", "rock_side_s" );
				GlobalVars.rockTurfEdgeCache["east"] = new Image( "icons/turf/mining.dmi", "rock_side_e", null, 6 );
				GlobalVars.rockTurfEdgeCache["west"] = new Image( "icons/turf/mining.dmi", "rock_side_w", null, 6 );
			}
			Task13.Schedule( 1, (Task13.Closure)(() => {
				
				if ( Map13.GetStep( this, ((int)( GlobalVars.NORTH )) ) is Tile_Simulated_Floor || Map13.GetStep( this, ((int)( GlobalVars.NORTH )) ) is Tile_Space ) {
					T = Map13.GetStep( this, ((int)( GlobalVars.NORTH )) );

					if ( T != null ) {
						T.overlays.Add( GlobalVars.rockTurfEdgeCache["south"] );
					}
				}

				if ( Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) ) is Tile_Simulated_Floor || Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) ) is Tile_Space ) {
					T = Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) );

					if ( T != null ) {
						T.overlays.Add( GlobalVars.rockTurfEdgeCache["north"] );
					}
				}

				if ( Map13.GetStep( this, ((int)( GlobalVars.EAST )) ) is Tile_Simulated_Floor || Map13.GetStep( this, ((int)( GlobalVars.EAST )) ) is Tile_Space ) {
					T = Map13.GetStep( this, ((int)( GlobalVars.EAST )) );

					if ( T != null ) {
						T.overlays.Add( GlobalVars.rockTurfEdgeCache["west"] );
					}
				}

				if ( Map13.GetStep( this, ((int)( GlobalVars.WEST )) ) is Tile_Simulated_Floor || Map13.GetStep( this, ((int)( GlobalVars.WEST )) ) is Tile_Space ) {
					T = Map13.GetStep( this, ((int)( GlobalVars.WEST )) );

					if ( T != null ) {
						T.overlays.Add( GlobalVars.rockTurfEdgeCache["east"] );
					}
				}
				return;
			}));

			if ( this.mineralType != null && this.mineralAmt != 0 && this.spread && this.spreadChance != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					dir = _a;
					

					if ( Rand13.PercentChance( this.spreadChance ) ) {
						T2 = Map13.GetStep( this, Convert.ToInt32( dir ) );

						if ( T2 is Tile_Simulated_Mineral_Random ) {
							this.Spread( T2 );
						}
					}
				}
			}
			this.HideRock();
			return;
		}

		// Function from file: mine_turfs.dm
		public override void updateMineralOverlays(  ) {
			return;
		}

		// Function from file: mine_turfs.dm
		public override bool Bumped( dynamic AM = null ) {
			dynamic H = null;
			dynamic R = null;

			base.Bumped( (object)(AM) );

			if ( AM is Mob_Living_Carbon_Human ) {
				H = AM;

				if ( H.l_hand is Obj_Item_Weapon_Pickaxe && !H.hand ) {
					this.attackby( H.l_hand, H );
				} else if ( H.r_hand is Obj_Item_Weapon_Pickaxe && H.hand ) {
					this.attackby( H.r_hand, H );
				}
				return false;
			} else if ( AM is Mob_Living_Silicon_Robot ) {
				R = AM;

				if ( R.module_active is Obj_Item_Weapon_Pickaxe ) {
					this.attackby( R.module_active, R );
					return false;
				}
			} else {
				return false;
			}
			return false;
		}

		// Function from file: mine_turfs.dm
		public override bool attack_alien( dynamic user = null ) {
			user.WriteMsg( "<span class='notice'>You start digging into the rock...</span>" );
			GlobalFuncs.playsound( this, "sound/effects/break_stone.ogg", 50, 1 );

			if ( GlobalFuncs.do_after( user, 40, null, this ) ) {
				user.WriteMsg( "<span class='notice'>You tunnel into the rock.</span>" );
				this.gets_drilled( user );
			}
			return false;
		}

		// Function from file: mine_turfs.dm
		public override bool attack_animal( Mob_Living user = null ) {
			
			if ( Convert.ToDouble( ((dynamic)user).environment_smash ) >= 2 ) {
				this.gets_drilled();
			}
			base.attack_animal( user );
			return false;
		}

		// Function from file: mine_turfs.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Ent_Static T = null;

			
			if ( !((Mob)user).IsAdvancedToolUser() ) {
				Task13.User.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return null;
			}

			if ( A is Obj_Item_Weapon_Pickaxe ) {
				T = user.loc;

				if ( !( T is Tile ) ) {
					return null;
				}

				if ( this.last_act + Convert.ToDouble( A.digspeed ) > Game13.time ) {
					return null;
				}
				this.last_act = Game13.time;
				user.WriteMsg( "<span class='notice'>You start picking...</span>" );
				((Obj_Item_Weapon_Pickaxe)A).playDigSound();

				if ( GlobalFuncs.do_after( user, A.digspeed, null, this ) ) {
					
					if ( this is Tile_Simulated_Mineral ) {
						user.WriteMsg( "<span class='notice'>You finish cutting into the rock.</span>" );
						this.gets_drilled( user );
						GlobalFuncs.feedback_add_details( "pick_used_mining", "" + A.type );
					}
				}
			} else {
				return this.attack_hand( user );
			}
			return null;
		}

		// Function from file: mine_turfs.dm
		public override void Spread( dynamic probability = null, int? prob_loss = null ) {
			Lang13.Call( this.type, probability );
			return;
		}

		// Function from file: mine_turfs.dm
		public virtual void gets_drilled( dynamic user = null, bool? triggered_by_explosion = null ) {
			int i = 0;
			dynamic N = null;

			
			if ( this.mineralType != null && this.mineralAmt > 0 && this.mineralAmt < 11 ) {
				i = 0;

				while (i < this.mineralAmt) {
					Lang13.Call( this.mineralType, this );
					i++;
				}
				GlobalFuncs.feedback_add_details( "ore_mined", "" + this.mineralType + "|" + this.mineralAmt );
			}
			N = this.ChangeTurf( this.turf_type );
			GlobalFuncs.playsound( this, "sound/effects/break_stone.ogg", 50, 1 );
			((Tile)N).fullUpdateMineralOverlays();
			return;
		}

		// Function from file: mine_turfs.dm
		public void HideRock(  ) {
			
			if ( this.hidden ) {
				this.name = "rock";
				this.icon_state = "rock";
			}
			return;
		}

		// Function from file: mine_turfs.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			switch ((int?)( severity )) {
				case 3:
					
					if ( Rand13.PercentChance( 75 ) ) {
						this.gets_drilled( null, true );
					}
					break;
				case 2:
					
					if ( Rand13.PercentChance( 90 ) ) {
						this.gets_drilled( null, true );
					}
					break;
				case 1:
					this.gets_drilled( null, true );
					break;
			}
			return false;
		}

	}

}