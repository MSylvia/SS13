// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile : Base_Tile {

		public ByTable fixed_underlay = null;
		public double slowdown = 0;
		public bool intact = true;
		public Type baseturf = typeof(Tile_Space);
		public double oxygen = 0;
		public int carbon_dioxide = 0;
		public double nitrogen = 0;
		public int toxins = 0;
		public double thermal_conductivity = 0.05;
		public double heat_capacity = 1;
		public double temperature = 293.41;
		public bool blocks_air = false;
		public PathNode PNode = null;
		public ByTable proximity_checkers = new ByTable();
		public dynamic obscured = null;
		public dynamic pressure_difference = 0;
		public int pressure_direction = 0;
		public ByTable atmos_adjacent_turfs = new ByTable();
		public int atmos_supeconductivity = 0;
		public double lighting_lumcount = 0;
		public bool lighting_changed = false;
		public dynamic lighting_object = null;
		public ByTable affecting_lights = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.icon = "icons/turf/floors.dmi";
		}

		// Function from file: turf.dm
		public Tile ( dynamic loc = null ) : base( (object)(loc) ) {
			Ent_Dynamic AM = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				AM = _a;
				
				this.Entered( AM );
			}
			return;
		}

		// Function from file: lighting_system.dm
		public override int get_light_range( int radius = 0 ) {
			return Num13.MinInt( radius, 8 );
		}

		// Function from file: lighting_system.dm
		public override void UpdateAffectingLights(  ) {
			LightSource thing = null;

			
			if ( this.affecting_lights != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.affecting_lights, typeof(LightSource) )) {
					thing = _a;
					
					thing.f_changed();
				}
			}
			return;
		}

		// Function from file: lighting_system.dm
		public virtual dynamic ChangeTurf( dynamic path = null ) {
			dynamic _default = null;

			Obj_Effect_Decal_Cleanable decal = null;
			double old_lumcount = 0;
			Type oldbaseturf = null;
			ByTable our_lights = null;
			Tile_Space S = null;

			
			if ( !Lang13.Bool( path ) || path == this.type ) {
				return this._internal_ChangeTurf( path );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Effect_Decal_Cleanable) )) {
				decal = _a;
				
				GlobalFuncs.qdel( decal );
			}

			if ( this.light != null ) {
				GlobalFuncs.qdel( this.light );
			}
			old_lumcount = this.lighting_lumcount - Convert.ToDouble( Lang13.Initial( this, "lighting_lumcount" ) );
			oldbaseturf = this.baseturf;
			our_lights = null;

			if ( this.opacity != Lang13.Initial( path, "opacity" ) && old_lumcount != 0 ) {
				this.UpdateAffectingLights();
			}

			if ( this.affecting_lights != null ) {
				our_lights = this.affecting_lights.Copy();
			}
			_default = this._internal_ChangeTurf( path );
			this.affecting_lights = our_lights;
			this.lighting_changed = true;
			this.update_lumcount( old_lumcount );
			this.baseturf = oldbaseturf;
			this.lighting_object = Lang13.FindIn( typeof(Dynamic_Light), this );
			this.init_lighting();

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInBlock( Map13.GetTile( Num13.MaxInt( this.x - 1, 1 ), Num13.MaxInt( this.y - 1, 1 ), this.z ), Map13.GetTile( Num13.MinInt( this.x + 1, Game13.map_size_x ), Num13.MinInt( this.y + 1, Game13.map_size_y ), this.z ) ), typeof(Tile_Space) )) {
				S = _b;
				
				S.update_starlight();
			}
			return _default;
		}

		// Function from file: LINDA_turf_tile.dm
		public override dynamic remove_air( double amount = 0 ) {
			GasMixture GM = null;

			GM = this.return_air();
			GM.remove( amount );
			return GM;
		}

		// Function from file: LINDA_turf_tile.dm
		public override GasMixture return_air(  ) {
			GasMixture GM = null;

			GM = new GasMixture();
			GM.copy_from_turf( this );
			return GM;
		}

		// Function from file: LINDA_turf_tile.dm
		public override bool? assume_air( dynamic giver = null ) {
			GlobalFuncs.qdel( giver );
			return false;
		}

		// Function from file: LINDA_system.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;

			Obj obstacle = null;
			Obj obstacle2 = null;

			
			if ( !Lang13.Bool( target ) ) {
				return false;
			}

			if ( mover is Ent_Dynamic ) {
				return !this.density;
			} else {
				
				if ( target.blocks_air || this.blocks_air ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
					obstacle = _a;
					

					if ( !obstacle.CanPass( mover, target, height ) ) {
						return false;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( target, typeof(Obj) )) {
					obstacle2 = _b;
					

					if ( !obstacle2.CanPass( mover, this, height ) ) {
						return false;
					}
				}
				return true;
			}
		}

		// Function from file: turf.dm
		public override double singularity_act( int? current_size = null, Obj_Singularity S = null ) {
			Obj O = null;

			
			if ( this.intact ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					O = _a;
					

					if ( O.level != 1 ) {
						continue;
					}

					if ( O.invisibility == 101 ) {
						O.singularity_act();
					}
				}
			}
			this.ChangeTurf( this.baseturf );
			return 2;
		}

		// Function from file: turf.dm
		public override bool handle_slip( Mob_Living_Carbon C = null, int s_amount = 0, int w_amount = 0, dynamic O = null, dynamic lube = null ) {
			Ent_Dynamic buckled_obj = null;
			int? oldlying = null;
			int olddir = 0;
			int? i = null;
			dynamic dam_zone = null;

			
			if ( GlobalFuncs.has_gravity( this ) ) {
				oldlying = C.lying;

				if ( C.buckled != null ) {
					buckled_obj = C.buckled;

					if ( !Lang13.Bool( lube & 4 ) ) {
						return false;
					}
				} else {
					
					if ( Lang13.Bool( C.lying ) || !( ( C.status_flags & 2 ) != 0 ) ) {
						return false;
					}

					if ( C.m_intent == "walk" && Lang13.Bool( lube & 1 ) ) {
						return false;
					}
				}
				C.WriteMsg( "<span class='notice'>You slipped" + ( Lang13.Bool( O ) ? " on the " + O.name : "" ) + "!</span>" );
				C.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Slipped" + ( Lang13.Bool( O ) ? " on the " + O.name : "" ) + ( Lang13.Bool( lube & 2 ) ? " (LUBE)" : "" ) + "!</font>" );
				GlobalFuncs.playsound( C.loc, "sound/misc/slip.ogg", 50, 1, -3 );
				C.accident( C.l_hand );
				C.accident( C.r_hand );
				olddir = C.dir;
				C.Stun( s_amount );
				C.Weaken( w_amount );
				C.__CallVerb("Stop Pulling" );

				if ( buckled_obj != null ) {
					buckled_obj.unbuckle_mob();
					Map13.Step( buckled_obj, olddir );
				} else if ( Lang13.Bool( lube & 2 ) ) {
					i = null;
					i = 1;

					while (( i ??0) < 5) {
						Task13.Schedule( i ??0, (Task13.Closure)(() => {
							Map13.Step( C, olddir );
							C.spin( 1, 1 );
							return;
						}));
						i++;
					}
				}

				if ( C.lying != oldlying && Lang13.Bool( lube ) ) {
					dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });
					C.apply_damage( 5, "brute", dam_zone );
				}
				return true;
			}
			return false;
		}

		// Function from file: turf.dm
		public override void handle_fall( Mob_Living_Carbon faller = null, bool forced = false ) {
			faller.lying = Lang13.IntNullable( Rand13.Pick(new object [] { 90, 270 }) );

			if ( !forced ) {
				return;
			}

			if ( GlobalFuncs.has_gravity( this ) ) {
				GlobalFuncs.playsound( this, "bodyfall", 50, 1 );
			}
			return;
		}

		// Function from file: turf.dm
		public override bool storage_contents_dump_act( Obj_Item_Weapon_Storage src_object = null, Mob user = null ) {
			Obj_Item I = null;

			
			if ( src_object.contents.len != 0 ) {
				Task13.User.WriteMsg( "<span class='notice'>You start dumping out the contents...</span>" );

				if ( !GlobalFuncs.do_after( Task13.User, 20, null, src_object ) ) {
					return false;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( src_object, typeof(Obj_Item) )) {
				I = _a;
				

				if ( user.s_active != src_object ) {
					
					if ( I.on_found( user ) ) {
						return false;
					}
				}
				src_object.remove_from_storage( I, this );
			}
			return true;
		}

		// Function from file: turf.dm
		public override dynamic Entered( Ent_Dynamic Obj = null, Ent_Static oldloc = null ) {
			dynamic A = null;
			dynamic B = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.proximity_checkers )) {
				A = _a;
				
				B = A;
				((Ent_Static)B).HasProximity( Obj );
			}
			return null;
		}

		// Function from file: turf.dm
		public override bool Enter( Ent_Dynamic O = null, Ent_Static oldloc = null ) {
			Obj obstacle = null;
			ByTable large_dense = null;
			Ent_Dynamic border_obstacle = null;
			Ent_Dynamic obstacle2 = null;

			
			if ( !( O != null ) ) {
				return true;
			}

			if ( O.loc is Tile ) {
				
				foreach (dynamic _a in Lang13.Enumerate( O.loc, typeof(Obj) )) {
					obstacle = _a;
					

					if ( !obstacle.CheckExit( O, this ) && obstacle != O && obstacle != oldloc ) {
						O.Bump( obstacle, 1 );
						return false;
					}
				}
			}
			large_dense = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				border_obstacle = _b;
				

				if ( Lang13.Bool( border_obstacle.flags & 512 ) ) {
					
					if ( !border_obstacle.CanPass( O, O.loc, 1 ) && oldloc != border_obstacle ) {
						O.Bump( border_obstacle, 1 );
						return false;
					}
				} else {
					large_dense.Add( border_obstacle );
				}
			}

			if ( !this.CanPass( O, this ) ) {
				O.Bump( this, 1 );
				return false;
			}

			foreach (dynamic _c in Lang13.Enumerate( large_dense, typeof(Ent_Dynamic) )) {
				obstacle2 = _c;
				

				if ( !obstacle2.CanPass( O, O.loc, 1 ) && oldloc != obstacle2 ) {
					O.Bump( obstacle2, 1 );
					return false;
				}
			}
			return true;
		}

		// Function from file: turf.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic coil = null;
			Obj_Structure_Cable LC = null;

			
			if ( this.can_lay_cable() != 0 && A is Obj_Item_Stack_CableCoil ) {
				coil = A;

				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Structure_Cable) )) {
					LC = _a;
					

					if ( LC.d1 == 0 || LC.d2 == 0 ) {
						LC.attackby( A, user );
						return null;
					}
				}
				((Obj_Item_Stack_CableCoil)coil).place_turf( this, user );
				return 1;
			}
			return 0;
		}

		// Function from file: turf.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			((Mob)a).Move_Pulled( this );
			return null;
		}

		// Function from file: turf.dm
		public override dynamic Destroy(  ) {
			Tile_Simulated T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.atmos_adjacent_turfs, typeof(Tile_Simulated) )) {
				T = _a;
				
				GlobalVars.SSair.add_to_active( T );
			}
			base.Destroy();
			return 4;
		}

		// Function from file: AStar.dm
		public bool LinkBlockedWithAccess( Tile T = null, dynamic caller = null, dynamic ID = null ) {
			int adir = 0;
			int rdir = 0;
			Obj_Structure_Window W = null;
			Obj O = null;

			adir = Map13.GetDistance( this, T );
			rdir = Map13.GetDistance( T, this );

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Structure_Window) )) {
				W = _a;
				

				if ( !W.CanAStarPass( ID, adir ) ) {
					return true;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( T, typeof(Obj) )) {
				O = _b;
				

				if ( !O.CanAStarPass( ID, rdir, caller ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: AStar.dm
		public ByTable reachableAdjacentAtmosTurfs(  ) {
			return this.atmos_adjacent_turfs;
		}

		// Function from file: AStar.dm
		public ByTable reachableAdjacentTurfs( dynamic caller = null, dynamic ID = null, dynamic simulated_only = null ) {
			ByTable L = null;
			Tile T = null;
			dynamic dir = null;

			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				T = Map13.GetStep( this, Convert.ToInt32( dir ) );

				if ( Lang13.Bool( simulated_only ) && !( T is Tile_Simulated ) ) {
					continue;
				}

				if ( !T.density && !this.LinkBlockedWithAccess( T, caller, ID ) ) {
					L.Add( T );
				}
			}
			return L;
		}

		// Function from file: shuttle.dm
		public virtual Base_Data copyTurf( Base_Data T = null ) {
			Obj O = null;

			
			if ( T.type != this.type ) {
				
				if ( this.underlays.len != 0 ) {
					O = new Obj();
					O.underlays.Add( T );
				}
				((dynamic)T).ChangeTurf( this.type );

				if ( this.underlays.len != 0 ) {
					((dynamic)T).underlays = O.underlays;
				}
			}

			if ( ((dynamic)T).icon_state != this.icon_state ) {
				((dynamic)T).icon_state = this.icon_state;
			}

			if ( ((dynamic)T).icon != this.icon ) {
				((dynamic)T).icon = this.icon;
			}

			if ( ((dynamic)T).color != this.color ) {
				((dynamic)T).color = this.color;
			}

			if ( Convert.ToInt32( ((dynamic)T).dir ) != this.dir ) {
				((dynamic)T).dir = this.dir;
			}
			return T;
		}

		// Function from file: power.dm
		public Obj_Structure_Cable get_cable_node(  ) {
			Obj_Structure_Cable C = null;

			
			if ( !this.can_have_cabling() ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Structure_Cable) )) {
				C = _a;
				

				if ( C.d1 == 0 ) {
					return C;
				}
			}
			return null;
		}

		// Function from file: mine_turfs.dm
		public void fullUpdateMineralOverlays(  ) {
			dynamic t = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 1 ) )) {
				t = _a;
				
				((Tile)t).updateMineralOverlays();
			}
			return;
		}

		// Function from file: mine_turfs.dm
		public virtual void updateMineralOverlays(  ) {
			this.overlays.Cut();

			if ( Map13.GetStep( this, ((int)( GlobalVars.NORTH )) ) is Tile_Simulated_Mineral ) {
				this.overlays.Add( GlobalVars.rockTurfEdgeCache["north"] );
			}

			if ( Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) ) is Tile_Simulated_Mineral ) {
				this.overlays.Add( GlobalVars.rockTurfEdgeCache["south"] );
			}

			if ( Map13.GetStep( this, ((int)( GlobalVars.EAST )) ) is Tile_Simulated_Mineral ) {
				this.overlays.Add( GlobalVars.rockTurfEdgeCache["east"] );
			}

			if ( Map13.GetStep( this, ((int)( GlobalVars.WEST )) ) is Tile_Simulated_Mineral ) {
				this.overlays.Add( GlobalVars.rockTurfEdgeCache["west"] );
			}
			return;
		}

		// Function from file: lighting_system.dm
		public double get_lumcount(  ) {
			double _default = 0;

			Ent_Static A = null;

			_default = 10;
			A = this.loc;

			if ( ( Convert.ToInt32( ((dynamic)A).lighting_use_dynamic ) == 2 ? GlobalVars.config.starlight : Lang13.Bool( ((dynamic)A).lighting_use_dynamic ) ) ) {
				_default = this.lighting_lumcount;
			}
			return _default;
		}

		// Function from file: lighting_system.dm
		public void redraw_lighting( bool? instantly = null ) {
			instantly = instantly ?? false;

			int newalpha = 0;
			int num = 0;

			
			if ( Lang13.Bool( this.lighting_object ) ) {
				
				if ( this.lighting_lumcount <= 0 ) {
					newalpha = 255;
				} else {
					this.lighting_object.luminosity = 1;

					if ( this.lighting_lumcount < 10 ) {
						num = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.lighting_lumcount * 25.5 )), 255 ) );
						newalpha = 255 - num;
					} else {
						newalpha = 0;
					}
				}

				if ( newalpha >= 250 ) {
					newalpha = 255;
				}

				if ( Convert.ToInt32( this.lighting_object.alpha ) != newalpha ) {
					
					if ( instantly == true ) {
						this.lighting_object.alpha = newalpha;
					} else {
						Icon13.Animate( new ByTable().Set( 1, this.lighting_object ).Set( "alpha", newalpha ).Set( "time", 2 ) );
					}

					if ( newalpha >= 250 ) {
						this.luminosity = 0;
						this.lighting_object.luminosity = 0;
					}
				}
			}
			this.lighting_changed = false;
			return;
		}

		// Function from file: lighting_system.dm
		public virtual dynamic init_lighting(  ) {
			Ent_Static A = null;

			A = this.loc;

			if ( !( Convert.ToInt32( ((dynamic)A).lighting_use_dynamic ) == 2 ? GlobalVars.config.starlight : Lang13.Bool( ((dynamic)A).lighting_use_dynamic ) ) || this is Tile_Space ) {
				this.lighting_changed = false;

				if ( Lang13.Bool( this.lighting_object ) ) {
					this.lighting_object.alpha = 0;
					this.lighting_object = null;
				}
			} else {
				
				if ( !Lang13.Bool( this.lighting_object ) ) {
					this.lighting_object = new Dynamic_Light( this );
				}
				this.redraw_lighting( true );
			}
			return null;
		}

		// Function from file: lighting_system.dm
		public virtual void update_lumcount( double amount = 0 ) {
			this.lighting_lumcount += amount;

			if ( !this.lighting_changed ) {
				GlobalVars.SSlighting.changed_turfs.Add( this );
				this.lighting_changed = true;
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void high_pressure_movements(  ) {
			Ent_Dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				M = _a;
				
				M.experience_pressure_difference( this.pressure_difference, this.pressure_direction );
			}
			return;
		}

		// Function from file: LINDA_turf_tile.dm
		public void consider_pressure_difference( dynamic T = null, dynamic difference = null ) {
			GlobalVars.SSair.high_pressure_delta.Or( this );

			if ( Convert.ToDouble( difference ) > Convert.ToDouble( this.pressure_difference ) ) {
				this.pressure_direction = Map13.GetDistance( this, T );
				this.pressure_difference = difference;
			}
			return;
		}

		// Function from file: LINDA_system.dm
		public void air_update_turf( bool? command = null ) {
			command = command ?? false;

			
			if ( command == true ) {
				this.CalculateAdjacentTurfs();
			}
			GlobalVars.SSair.add_to_active( this, command );
			return;
		}

		// Function from file: LINDA_system.dm
		public ByTable GetAtmosAdjacentTurfs( int? alldir = null ) {
			alldir = alldir ?? 0;

			ByTable adjacent_turfs = null;
			Tile curloc = null;
			dynamic direction = null;
			int matchingDirections = 0;
			Tile S = null;
			dynamic checkDirection = null;
			Tile checkTurf = null;

			
			if ( !( this is Tile_Simulated ) ) {
				return new ByTable();
			}
			adjacent_turfs = this.atmos_adjacent_turfs.Copy();

			if ( !Lang13.Bool( alldir ) ) {
				return adjacent_turfs;
			}
			curloc = this;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.diagonals )) {
				direction = _b;
				
				matchingDirections = 0;
				S = Map13.GetStep( curloc, Convert.ToInt32( direction ) );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					checkDirection = _a;
					
					checkTurf = Map13.GetStep( S, Convert.ToInt32( checkDirection ) );

					if ( !S.atmos_adjacent_turfs.Contains( checkTurf ) ) {
						continue;
					}

					if ( adjacent_turfs.Contains( checkTurf ) ) {
						matchingDirections++;
					}

					if ( matchingDirections >= 2 ) {
						adjacent_turfs.Add( S );
						break;
					}
				}
			}
			return adjacent_turfs;
		}

		// Function from file: LINDA_system.dm
		public void CalculateAdjacentTurfs(  ) {
			dynamic direction = null;
			Tile T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				
				T = Map13.GetStep( this, Convert.ToInt32( direction ) );

				if ( !( T is Tile ) ) {
					continue;
				}

				if ( this.CanAtmosPass( T ) ) {
					this.atmos_adjacent_turfs.Or( T );
					T.atmos_adjacent_turfs.Or( this );
				} else {
					this.atmos_adjacent_turfs.Remove( T );
					T.atmos_adjacent_turfs.Remove( this );
				}
			}
			return;
		}

		// Function from file: LINDA_system.dm
		public bool CanAtmosPass( dynamic T = null ) {
			bool R = false;
			Obj O = null;
			int D = 0;
			Obj O2 = null;
			int D2 = 0;
			int D3 = 0;

			
			if ( !( T is Tile ) ) {
				return false;
			}

			if ( this.blocks_air || T.blocks_air ) {
				R = true;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				

				if ( !O.CanAtmosPass( T ) ) {
					R = true;

					if ( O.BlockSuperconductivity() ) {
						D = Map13.GetDistance( this, T );
						this.atmos_supeconductivity |= D;
						D = Map13.GetDistance( T, this );
						T.atmos_supeconductivity |= D;
						return false;
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( T.contents, typeof(Obj) )) {
				O2 = _b;
				

				if ( !O2.CanAtmosPass( this ) ) {
					R = true;

					if ( O2.BlockSuperconductivity() ) {
						D2 = Map13.GetDistance( this, T );
						this.atmos_supeconductivity |= D2;
						D2 = Map13.GetDistance( T, this );
						T.atmos_supeconductivity |= D2;
						return false;
					}
				}
			}
			D3 = Map13.GetDistance( this, T );
			this.atmos_supeconductivity &= ~D3;
			D3 = Map13.GetDistance( T, this );
			T.atmos_supeconductivity &= ~D3;

			if ( !R ) {
				return true;
			}
			return false;
		}

		// Function from file: LINDA_fire.dm
		public virtual bool hotspot_expose( dynamic exposed_temperature = null, int exposed_volume = 0, bool? soh = null ) {
			soh = soh ?? false;

			return false;
		}

		// Function from file: river.dm
		public virtual void Spread( dynamic probability = null, int? prob_loss = null ) {
			probability = probability ?? 30;
			prob_loss = prob_loss ?? 25;

			Tile_Simulated F = null;
			Tile_Simulated L = null;

			
			if ( Convert.ToDouble( probability ) <= 0 ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this, 1 ), typeof(Tile_Simulated) )) {
				F = _a;
				
				L = F;
				L.ChangeTurf( this.type );

				if ( L != null && Rand13.PercentChance( Convert.ToInt32( probability ) ) ) {
					L.Spread( probability - prob_loss );
				}
			}
			return;
		}

		// Function from file: turf.dm
		public bool apply_fixed_underlay(  ) {
			Obj O = null;

			
			if ( !( this.fixed_underlay != null ) ) {
				return false;
			}
			O = new Obj();
			O.layer = this.layer;

			if ( Lang13.Bool( this.fixed_underlay["icon"] ) ) {
				O.icon = this.fixed_underlay["icon"];
				O.icon_state = this.fixed_underlay["icon_state"];
			} else if ( Lang13.Bool( this.fixed_underlay["space"] ) ) {
				O.icon = "icons/turf/space.dmi";
				O.icon_state = "" + ( this.x + this.y ^ ~( this.x * this.y ) + this.z ) % 25;
			} else {
				O.icon = "icons/turf/floors.dmi";
				O.icon_state = "plating";
			}
			this.underlays.Add( O );
			return true;
		}

		// Function from file: turf.dm
		public void visibilityChanged(  ) {
			
			if ( GlobalVars.ticker != null ) {
				GlobalVars.cameranet.updateVisibility( this );
			}
			return;
		}

		// Function from file: turf.dm
		public int can_lay_cable(  ) {
			return ( this.can_have_cabling() ?1:0) & ( !this.intact ?1:0);
		}

		// Function from file: turf.dm
		public virtual bool can_have_cabling(  ) {
			return true;
		}

		// Function from file: turf.dm
		public double Distance_cardinal( dynamic T = null ) {
			
			if ( !( this != null ) || !Lang13.Bool( T ) ) {
				return 0;
			}
			return Math.Abs( this.x - Convert.ToDouble( T.x ) ) + Math.Abs( this.y - Convert.ToDouble( T.y ) );
		}

		// Function from file: turf.dm
		public int Distance( dynamic T = null ) {
			return Map13.GetDistance( this, T );
		}

		// Function from file: turf.dm
		public void Bless(  ) {
			this.flags |= 1;
			return;
		}

		// Function from file: turf.dm
		public void phase_damage_creatures( int damage = 0, dynamic U = null ) {
			Mob_Living M = null;
			Obj_Mecha M2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Mob_Living) )) {
				M = _a;
				

				if ( M == U ) {
					continue;
				}
				M.adjustBruteLoss( damage );
				M.Paralyse( damage / 5 );
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Mecha) )) {
				M2 = _b;
				
				M2.take_damage( damage * 2, "brute" );
			}
			return;
		}

		// Function from file: turf.dm
		public void ReplaceWithCatwalk(  ) {
			this.ChangeTurf( this.baseturf );
			new Obj_Structure_Lattice_Catwalk( Map13.GetTile( this.x, this.y, this.z ) );
			return;
		}

		// Function from file: turf.dm
		public void ReplaceWithLattice(  ) {
			this.ChangeTurf( this.baseturf );
			new Obj_Structure_Lattice( Map13.GetTile( this.x, this.y, this.z ) );
			return;
		}

		// Function from file: turf.dm
		[VerbInfo( name: "ChangeTurf" )]
		public dynamic _internal_ChangeTurf( dynamic path = null ) {
			Appearance s_appearance = null;
			bool nocopy = false;
			dynamic W = null;
			Obj_Structure_Cable C = null;

			
			if ( !Lang13.Bool( path ) ) {
				return null;
			}

			if ( path == this.type ) {
				return this;
			}
			GlobalVars.SSair.remove_from_active( this );
			s_appearance = this.appearance;
			nocopy = this.density || this.smooth != 0;
			W = Lang13.Call( path, this );

			if ( W is Tile_Simulated ) {
				((Tile_Simulated)W).Assimilate_Air();
				((Tile)W).RemoveLattice();
			}
			((Tile)W).levelupdate();
			((Tile)W).CalculateAdjacentTurfs();

			if ( ( W.smooth & 4 ) != 0 ) {
				
				if ( !((Tile)W).apply_fixed_underlay() ) {
					W.underlays += ( !nocopy ? ((dynamic)( s_appearance )) : ((dynamic)( new Image( "icons/turf/floors.dmi", "plating" ) )) );
				}
			}

			if ( !this.can_have_cabling() ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Structure_Cable) )) {
					C = _a;
					
					C.Deconstruct();
				}
			}
			return W;
		}

		// Function from file: turf.dm
		public void RemoveLattice(  ) {
			dynamic L = null;

			L = Lang13.FindIn( typeof(Obj_Structure_Lattice), this );

			if ( Lang13.Bool( L ) ) {
				GlobalFuncs.qdel( L );
			}
			return;
		}

		// Function from file: turf.dm
		public virtual void levelupdate(  ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				

				if ( O.level == 1 ) {
					O.hide( this.intact );
				}
			}
			return;
		}

		// Function from file: turf.dm
		public bool is_plasteel_floor(  ) {
			return false;
		}

		// Function from file: adjacent.dm
		public bool ClickCross( dynamic target_dir = null, bool border_only = false, dynamic target_atom = null ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				

				if ( !O.density || O == target_atom || ( O.pass_flags & 32 ) != 0 ) {
					continue;
				}

				if ( Lang13.Bool( O.flags & 512 ) ) {
					
					if ( ( O.dir & Convert.ToInt32( target_dir ) ) != 0 || ( O.dir & O.dir - 1 ) != 0 ) {
						return false;
					}
				} else if ( !border_only ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: adjacent.dm
		public override bool Adjacent( dynamic neighbor = null, dynamic recurse = null ) {
			dynamic T0 = null;
			int in_dir = 0;
			int d1 = 0;
			int d2 = 0;
			dynamic d = null;
			Tile T1 = null;

			T0 = GlobalFuncs.get_turf( neighbor );

			if ( T0 == this ) {
				return true;
			}

			if ( Map13.GetDistance( this, T0 ) > 1 ) {
				return false;
			}

			if ( Convert.ToInt32( T0.x ) == this.x || Convert.ToInt32( T0.y ) == this.y ) {
				return ((Tile)T0).ClickCross( Map13.GetDistance( T0, this ), true ) && this.ClickCross( Map13.GetDistance( this, T0 ), true, recurse );
			}
			in_dir = Map13.GetDistance( T0, this );
			d1 = in_dir & 3;
			d2 = in_dir & 12;

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { d1, d2 }) )) {
				d = _a;
				

				if ( !((Tile)T0).ClickCross( d, true ) ) {
					continue;
				}
				T1 = Map13.GetStep( T0, Convert.ToInt32( d ) );

				if ( !( T1 != null ) || T1.density || !T1.ClickCross( Map13.GetDistance( T1, T0 ) | Map13.GetDistance( T1, this ), false ) ) {
					continue;
				}

				if ( !this.ClickCross( Map13.GetDistance( this, T1 ), true, recurse ) ) {
					continue;
				}
				return true;
			}
			return false;
		}

	}

}