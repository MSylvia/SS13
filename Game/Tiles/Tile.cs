// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile : Base_Tile {

		public int explosion_resistance = 0;
		public ConnectionManager connections = null;
		public dynamic dbg_img = null;
		public bool needs_air_update = false;
		public GasMixture air = null;
		public bool? intact = true;
		public double? oxygen = 0;
		public double? carbon_dioxide = 0;
		public double? nitrogen = 0;
		public double? toxins = 0;
		public double thermal_conductivity = 0.05;
		public double heat_capacity = 1;
		public double temperature = 293.41;
		public bool blocks_air = false;
		public dynamic icon_old = null;
		public PathNode PNode = null;
		public Obj_Machinery_Bot_Cleanbot targetted_by = null;
		public dynamic decals = null;
		public Game_Data c_animation = null;
		public ByTable power_connections = null;
		public bool holy = false;
		public bool sleeping = false;
		public bool bullet_marks = false;
		public bool can_border_transition = false;
		public int explosion_block = 0;
		public bool dynamic_lighting = true;
		public bool preserve_underlay = false;
		public ByTable affecting_lights = null;
		public Game_Data lighting_overlay = null;
		public dynamic obscured = null;
		public Type soot_type = typeof(Obj_Effect_Decal_Cleanable_Soot);

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 0;
			this.level = 1;
			this.penetration_dampening = 10;
			this.forceinvertredraw = true;
			this.icon = "icons/turf/floors.dmi";
		}

		// Function from file: turf.dm
		public Tile ( dynamic loc = null ) : base( (object)(loc) ) {
			Ent_Static A = null;
			dynamic AM = null;
			Ent_Static A2 = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.loc != null ) {
				A = this.loc;
				((dynamic)A).area_turfs += this;
			}

			foreach (dynamic _a in Lang13.Enumerate( this )) {
				AM = _a;
				
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.Entered( AM );
					return;
					return;
				}));
			}
			A2 = this.loc;

			if ( !this.dynamic_lighting || !Lang13.Bool( ((dynamic)A2).lighting_use_dynamic ) ) {
				this.luminosity = 1;
			}
			return;
		}

		// Function from file: Turf.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			((Mob)a).Move_Pulled( this );
			return null;
		}

		// Function from file: Turf.dm
		public override dynamic remove_air( dynamic amount = null ) {
			GasMixture GM = null;
			double sum = 0;

			GM = new GasMixture();
			sum = ( this.oxygen ??0) + ( this.carbon_dioxide ??0) + ( this.nitrogen ??0) + ( this.toxins ??0);

			if ( sum > 0 ) {
				GM.oxygen = ( this.oxygen ??0) / sum * Convert.ToDouble( amount );
				GM.carbon_dioxide = ( this.carbon_dioxide ??0) / sum * Convert.ToDouble( amount );
				GM.nitrogen = ( this.nitrogen ??0) / sum * Convert.ToDouble( amount );
				GM.toxins = ( this.toxins ??0) / sum * Convert.ToDouble( amount );
			}
			GM.temperature = this.temperature;
			GM.update_values();
			return GM;
		}

		// Function from file: Turf.dm
		public override GasMixture return_air(  ) {
			GasMixture GM = null;

			GM = new GasMixture();
			GM.oxygen = this.oxygen;
			GM.carbon_dioxide = this.carbon_dioxide;
			GM.nitrogen = this.nitrogen;
			GM.toxins = this.toxins;
			GM.temperature = this.temperature;
			GM.update_values();
			return GM;
		}

		// Function from file: Turf.dm
		public override bool? assume_air( dynamic giver = null ) {
			return false;
		}

		// Function from file: Atom.dm
		public override int c_airblock( dynamic other = null ) {
			int result = 0;
			Ent_Dynamic M = null;

			
			if ( this.blocks_air ) {
				return 3;
			}
			result = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
				M = _a;
				
				result |= M.c_airblock( other );

				if ( result == 3 ) {
					return 3;
				}
			}
			return result;
		}

		// Function from file: Atom.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			Obj obstacle = null;
			Obj obstacle2 = null;

			
			if ( !Lang13.Bool( target ) ) {
				return false;
			}

			if ( mover is Ent_Dynamic ) {
				return !this.density;
			} else {
				
				if ( target.blocks_air || this.blocks_air ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
					obstacle = _a;
					

					if ( !obstacle.CanPass( mover, target, height, air_group ) ) {
						return false;
					}
				}

				if ( target != this ) {
					
					foreach (dynamic _b in Lang13.Enumerate( target, typeof(Obj) )) {
						obstacle2 = _b;
						

						if ( !obstacle2.CanPass( mover, this, height, air_group ) ) {
							return false;
						}
					}
				}
				return true;
			}
		}

		// Function from file: lighting_turf.dm
		public override dynamic Exited( Ent_Dynamic Obj = null, Ent_Static newloc = null ) {
			dynamic _default = null;

			_default = base.Exited( Obj, newloc );

			if ( Obj != null && Obj.opacity ) {
				this.reconsider_lights();
			}
			return _default;
		}

		// Function from file: turf.dm
		public override dynamic Entered( Ent_Dynamic Obj = null, Ent_Static oldloc = null ) {
			int loopsanity = 0;
			int objects = 0;
			dynamic Obj2 = null;
			ByTable contents_brought = null;
			Ent_Dynamic B = null;
			bool locked_to_current_z = false;
			Obj_Item_Weapon_Disk nuclear = null;
			Ent_Static was_pulling = null;
			Ent_Dynamic MOB = null;
			double? move_to_z = null;
			Mob_Living_Silicon_Robot mommi = null;
			int safety = 0;
			dynamic move_to_z_str = null;

			
			if ( GlobalVars.movement_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Movement is admin-disabled.</span>" );
				return null;
			}
			loopsanity = 100;

			if ( Obj is Mob ) {
				
				if ( Lang13.Bool( Obj.areaMaster ) && Obj.areaMaster.has_gravity == false ) {
					this.inertial_drift( Obj );
				} else if ( !( this is Tile_Space ) ) {
					((dynamic)Obj).inertia_dir = 0;
				}
			}
			base.Entered( Obj, oldloc );
			objects = 0;

			if ( Obj != null && Lang13.Bool( Obj.flags & 1 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( null, 1 ) )) {
					Obj2 = _a;
					

					if ( objects > loopsanity ) {
						break;
					}
					objects++;
					Task13.Schedule( 0, (Task13.Closure)(() => {
						
						if ( Obj != null && Lang13.Bool( Obj2 ) && Lang13.Bool( Obj2.flags & 1 ) ) {
							((Ent_Static)Obj2).HasProximity( Obj );
						}
						return;
					}));
				}
			}

			if ( !( Obj != null ) || this != Obj.loc ) {
				return null;
			}

			if ( !this.can_border_transition ) {
				return null;
			}

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				
				if ( Obj.z > 6 ) {
					return null;
				}

				if ( Obj.x <= 7 || Obj.x >= Game13.map_size_x - 7 - 1 || Obj.y <= 7 || Obj.y >= Game13.map_size_y - 7 - 1 ) {
					
					if ( Obj is Obj_Effect_Meteor || Obj is Obj_Effect_SpaceDust ) {
						GlobalFuncs.qdel( Obj );
						return null;
					}
					contents_brought = new ByTable();
					contents_brought.Add( GlobalFuncs.recursive_type_check( Obj ) );

					if ( Obj is Obj_Structure_Bed_Chair_Vehicle ) {
						B = Obj;

						if ( B.locked_atoms.len != 0 ) {
							contents_brought.Add( GlobalFuncs.recursive_type_check( B ) );
						}
					}
					locked_to_current_z = false;

					foreach (dynamic _b in Lang13.Enumerate( contents_brought, typeof(Obj_Item_Weapon_Disk) )) {
						nuclear = _b;
						
						locked_to_current_z = true;
						break;
					}
					was_pulling = null;
					MOB = null;

					if ( Obj is Mob_Living ) {
						MOB = Obj;

						if ( Lang13.Bool( ((dynamic)MOB).pulling ) ) {
							was_pulling = ((dynamic)MOB).pulling;
						}
					}
					move_to_z = this.z;

					foreach (dynamic _c in Lang13.Enumerate( contents_brought, typeof(Mob_Living_Silicon_Robot) )) {
						mommi = _c;
						

						if ( mommi.locked_to_z != 0 ) {
							
							if ( this.z == mommi.locked_to_z ) {
								locked_to_current_z = true;
							} else {
								GlobalFuncs.to_chat( mommi, "<span class='warning'>You find your way back.</span>" );
								move_to_z = mommi.locked_to_z;
							}
						}
					}
					safety = 1;

					if ( !locked_to_current_z ) {
						
						while (move_to_z == this.z) {
							move_to_z_str = GlobalFuncs.pickweight( GlobalVars.accessable_z_levels );
							move_to_z = String13.ParseNumber( move_to_z_str );
							safety++;

							if ( safety > 10 ) {
								break;
							}
						}
					}

					if ( !Lang13.Bool( move_to_z ) ) {
						return null;
					}
					Obj.z = ((int)( move_to_z ??0 ));

					if ( this.x <= 7 ) {
						Obj.x = Game13.map_size_x - 7 - 2;
						Obj.y = Rand13.Int( 9, Game13.map_size_y - 7 - 2 );
					} else if ( Obj.x >= Game13.map_size_x - 7 - 1 ) {
						Obj.x = 8;
						Obj.y = Rand13.Int( 9, Game13.map_size_y - 7 - 2 );
					} else if ( this.y <= 7 ) {
						Obj.y = Game13.map_size_y - 7 - 2;
						Obj.x = Rand13.Int( 9, Game13.map_size_x - 7 - 2 );
					} else if ( Obj.y >= Game13.map_size_y - 7 - 1 ) {
						Obj.y = 8;
						Obj.x = Rand13.Int( 9, Game13.map_size_x - 7 - 2 );
					}
					Task13.Schedule( 0, (Task13.Closure)(() => {
						
						if ( was_pulling != null && MOB != null ) {
							was_pulling.loc = MOB.loc;
							((dynamic)MOB).pulling = was_pulling;
							((dynamic)was_pulling).pulledby = MOB;
						}

						if ( Obj != null && Obj.loc != null ) {
							Obj.loc.Entered( Obj );
						}
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: turf.dm
		public override void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			this.lighting_build_overlays();
			return;
		}

		// Function from file: turf.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			Obj O = null;

			
			if ( Lang13.Bool( GlobalFuncs.get_base_turf( this.z ).IsInstanceOfType( this ) ) ) {
				return 0;
			}

			if ( this.intact == true ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					O = _a;
					

					if ( O.level != 1 ) {
						continue;
					}

					if ( O.invisibility == 101 ) {
						O.singularity_act();
					}
				}
			}
			this.ChangeTurf( GlobalFuncs.get_base_turf( this.z ) );
			return 2;
		}

		// Function from file: turf.dm
		public override int projectile_check(  ) {
			return 1;
		}

		// Function from file: turf.dm
		public override bool Enter( Ent_Dynamic O = null, Ent_Static oldloc = null ) {
			Obj obstacle = null;
			ByTable large_dense = null;
			Ent_Dynamic border_obstacle = null;
			Ent_Dynamic obstacle2 = null;

			
			if ( !( O != null ) ) {
				return true;
			}

			if ( O.loc is Tile ) {
				
				foreach (dynamic _a in Lang13.Enumerate( O.loc, typeof(Obj) )) {
					obstacle = _a;
					

					if ( obstacle != O && obstacle != oldloc && !obstacle.CheckExit( O, this ) ) {
						O.Bump( obstacle );
						return false;
					}
				}
			}
			large_dense = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				border_obstacle = _b;
				

				if ( Lang13.Bool( border_obstacle.flags & 512 ) ) {
					
					if ( !border_obstacle.CanPass( O, O.loc ) && oldloc != border_obstacle && O != border_obstacle ) {
						O.Bump( border_obstacle );
						return false;
					}
				} else {
					large_dense.Add( border_obstacle );
				}
			}

			if ( !this.CanPass( O, this ) ) {
				O.Bump( this );
				return false;
			}

			foreach (dynamic _c in Lang13.Enumerate( large_dense, typeof(Ent_Dynamic) )) {
				obstacle2 = _c;
				

				if ( !obstacle2.CanPass( O, O.loc ) && oldloc != obstacle2 && O != obstacle2 ) {
					O.Bump( obstacle2 );
					return false;
				}
			}
			return true;
		}

		// Function from file: turf.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Proj.destroy ) {
				this.ex_act( 2 );
			}
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return 0;
		}

		// Function from file: turf.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: turf.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			
			if ( !( Task13.User is Mob_Living_Silicon_Ai ) ) {
				base.Click( (object)(loc), control, _params );
			}
			return false;
		}

		// Function from file: turf.dm
		public override bool DblClick( dynamic _object = null, string location = null, string control = null, dynamic _params = null ) {
			
			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				this.move_camera_by_click(); return false;
			}

			if ( Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || Task13.User.lying == true ) {
				return base.DblClick( (object)(_object), location, control );
			}
			return base.DblClick( (object)(_object), location, control );
		}

		// Function from file: turf.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.bullet_marks ) {
				GlobalFuncs.to_chat( user, "It has bullet markings on it." );
			}
			return null;
		}

		// Function from file: adjacent.dm
		public override bool Adjacent( dynamic neighbor = null, dynamic recurse = null ) {
			dynamic T0 = null;
			int in_dir = 0;
			int d1 = 0;
			int d2 = 0;
			dynamic d = null;
			Tile T1 = null;

			T0 = GlobalFuncs.get_turf( neighbor );

			if ( T0 == this ) {
				return true;
			}

			if ( Map13.GetDistance( this, T0 ) > 1 ) {
				return false;
			}

			if ( Convert.ToInt32( T0.x ) == this.x || Convert.ToInt32( T0.y ) == this.y ) {
				
				if ( Lang13.Bool( neighbor.flags & 512 ) && Convert.ToInt32( neighbor.dir ) == Map13.GetDistance( T0, this ) ) {
					return true;
				}
				return ((Tile)T0).ClickCross( Map13.GetDistance( T0, this ), true ) && this.ClickCross( Map13.GetDistance( this, T0 ), true, recurse );
			}
			in_dir = Map13.GetDistance( T0, this );
			d1 = in_dir & 3;
			d2 = in_dir & 12;

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { d1, d2 }) )) {
				d = _a;
				

				if ( !((Tile)T0).ClickCross( d, true ) && !( Lang13.Bool( neighbor.flags & 512 ) && neighbor.dir == d ) ) {
					continue;
				}
				T1 = Map13.GetStep( T0, Convert.ToInt32( d ) );

				if ( !( T1 != null ) || T1.density || !T1.ClickCross( Map13.GetDistance( T1, T0 ) | Map13.GetDistance( T1, this ), false ) ) {
					continue;
				}

				if ( !this.ClickCross( Map13.GetDistance( this, T1 ), true, recurse ) ) {
					continue;
				}
				return true;
			}
			return false;
		}

		// Function from file: Turf.dm
		public void make_air(  ) {
			this.air = new GasMixture();
			this.air.temperature = this.temperature;
			this.air.adjust( this.oxygen, this.carbon_dioxide, this.nitrogen, this.toxins );
			this.air.group_multiplier = 1;
			this.air.volume = 2500;
			return;
		}

		// Function from file: Turf.dm
		public void post_update_air_properties(  ) {
			
			if ( this.connections != null ) {
				this.connections.update_all();
			}
			return;
		}

		// Function from file: Turf.dm
		public virtual bool update_air_properties(  ) {
			int block = 0;
			int? d = null;
			Tile unsim = null;
			int r_block = 0;
			Tile sim = null;

			block = this.c_airblock( this );

			if ( ( block & 1 ) != 0 ) {
				return true;
			}
			d = null;
			d = 1;

			while (( d ??0) < 16) {
				unsim = Map13.GetStep( this, d ??0 );

				if ( !( unsim != null ) ) {
					
				} else {
					block = unsim.c_airblock( this );

					if ( ( block & 1 ) != 0 ) {
						
					} else {
						r_block = this.c_airblock( unsim );

						if ( ( r_block & 1 ) != 0 ) {
							
						} else if ( unsim is Tile_Simulated ) {
							sim = unsim;

							if ( GlobalVars.air_master.has_valid_zone( sim ) ) {
								GlobalVars.air_master.connect( sim, this );
							}
						}
					}
				}
				d *= 2;
			}
			return false;
		}

		// Function from file: Fire.dm
		public virtual void apply_fire_protection(  ) {
			return;
		}

		// Function from file: Fire.dm
		public virtual bool hotspot_expose( double? exposed_temperature = null, int exposed_volume = 0, bool? soh = null, bool? surfaces = null ) {
			soh = soh ?? false;
			surfaces = surfaces ?? false;

			return false;
		}

		// Function from file: Debug.dm
		public void dbg( dynamic img = null, bool? d = null ) {
			d = d ?? false;

			
			if ( ( d == true ?1:0) > 0 ) {
				img.dir = d;
			}
			this.overlays.Remove( this.dbg_img );
			this.overlays.Add( img );
			this.dbg_img = img;
			return;
		}

		// Function from file: power.dm
		public Obj_Structure_Cable get_cable_node(  ) {
			Obj_Structure_Cable C = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Structure_Cable) )) {
				C = _a;
				

				if ( C.d1 == 0 ) {
					return C;
				}
			}
			return null;
		}

		// Function from file: update_triggers.dm
		public void visibilityChanged(  ) {
			
			if ( GlobalVars.ticker != null ) {
				GlobalVars.cameranet.updateVisibility( this );
			}
			return;
		}

		// Function from file: splash_simulation.dm
		public virtual bool can_leave_liquid( dynamic from_direction = null ) {
			return false;
		}

		// Function from file: splash_simulation.dm
		public virtual bool can_accept_liquid( int from_direction = 0 ) {
			return false;
		}

		// Function from file: lighting_turf.dm
		public double get_lumcount( double? minlum = null, bool? maxlum = null ) {
			minlum = minlum ?? 0;
			maxlum = maxlum ?? true;

			double totallums = 0;

			
			if ( !( this.lighting_overlay != null ) ) {
				return 0.5;
			}
			totallums = 0;

			if ( Lang13.Bool( ((dynamic)this.lighting_overlay).lum_r ) ) {
				totallums += Convert.ToDouble( ((dynamic)this.lighting_overlay).lum_r );
			}

			if ( Lang13.Bool( ((dynamic)this.lighting_overlay).lum_b ) ) {
				totallums += Convert.ToDouble( ((dynamic)this.lighting_overlay).lum_b );
			}

			if ( Lang13.Bool( ((dynamic)this.lighting_overlay).lum_g ) ) {
				totallums += Convert.ToDouble( ((dynamic)this.lighting_overlay).lum_g );
			}

			if ( totallums != 0 ) {
				totallums /= 3;
			} else {
				return 0;
			}
			totallums = ( totallums - ( minlum ??0) ) / ( ( maxlum == true ?1:0) - ( minlum ??0) );
			return ( totallums <= 0 ? 0 : ( totallums >= 1 ? 1 : totallums ) );
		}

		// Function from file: lighting_turf.dm
		public virtual void lighting_build_overlays(  ) {
			Game_Data O = null;
			Ent_Static A = null;
			LightSource L = null;

			
			if ( this.lighting_overlay != null ) {
				return;
			}
			A = this.loc;

			if ( Lang13.Bool( ((dynamic)A).lighting_use_dynamic ) ) {
				O = GlobalFuncs.getFromPool( typeof(Dynamic_LightingOverlay), this );
				this.lighting_overlay = O;
				GlobalVars.all_lighting_overlays.Or( O );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.affecting_lights, typeof(LightSource) )) {
				L = _a;
				
				L.calc_turf( this );
			}
			return;
		}

		// Function from file: lighting_turf.dm
		public void lighting_clear_overlays(  ) {
			
			if ( this.lighting_overlay != null ) {
				GlobalFuncs.returnToPool( this.lighting_overlay );
			}
			return;
		}

		// Function from file: lighting_turf.dm
		public void reconsider_lights(  ) {
			LightSource L = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.affecting_lights, typeof(LightSource) )) {
				L = _a;
				
				L.f_vis_update();
			}
			return;
		}

		// Function from file: turf_flick_animations.dm
		public void turf_animation( string anim_icon = null, string anim_state = null, int? anim_x = null, int? anim_y = null, double? anim_layer = null, string anim_sound = null, string anim_color = null ) {
			anim_x = anim_x ?? 0;
			anim_y = anim_y ?? 0;
			anim_layer = anim_layer ?? 5;

			Game_Data animation = null;

			
			if ( !( this.c_animation != null ) ) {
				
				if ( Lang13.Bool( anim_sound ) ) {
					GlobalFuncs.playsound( this, anim_sound, 50, 1 );
				}
				animation = GlobalFuncs.getFromPool( typeof(Dynamic_Overlay), this );
				((dynamic)animation).name = "turf_animation";
				((dynamic)animation).density = 0;
				((dynamic)animation).anchored = 1;
				((dynamic)animation).icon = anim_icon;
				((dynamic)animation).icon_state = anim_state;
				((dynamic)animation).layer = anim_layer;
				((dynamic)animation).master = this;
				((dynamic)animation).pixel_x = anim_x;
				((dynamic)animation).pixel_y = anim_y;
				this.c_animation = animation;

				if ( Lang13.Bool( anim_color ) ) {
					((dynamic)animation).color = anim_color;
				}
				Icon13.Flick( "turf_animation", animation );
				Task13.Schedule( 10, (Task13.Closure)(() => {
					GlobalFuncs.returnToPool( animation );

					if ( this.c_animation == animation ) {
						this.c_animation = null;
					}
					return;
				}));
			}
			return;
		}

		// Function from file: turf.dm
		public void spawn_powerup(  ) {
			dynamic powerup = null;

			Task13.Schedule( 5, (Task13.Closure)(() => {
				powerup = Rand13.PickWeighted(new object [] { 16803, typeof(Obj_Structure_Powerup_Bombup), 33606, typeof(Obj_Structure_Powerup_Fire), 50409, typeof(Obj_Structure_Powerup_Skate), 53769, typeof(Obj_Structure_Powerup_Kick), 57129, typeof(Obj_Structure_Powerup_Line), 60489, typeof(Obj_Structure_Powerup_Power), 63849, typeof(Obj_Structure_Powerup_Skull), 65535, typeof(Obj_Structure_Powerup_Full) });
				Lang13.Call( powerup, this );
				return;
			}));
			return;
		}

		// Function from file: turf.dm
		public virtual void dismantle_wall( bool? devastated = null, bool? explode = null ) {
			return;
		}

		// Function from file: turf.dm
		public virtual int canBuildPlating( Obj_Item_Stack_Tile_Wood material = null ) {
			return -1;
		}

		// Function from file: turf.dm
		public virtual bool canBuildLattice( Obj_Item_Stack material = null ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual dynamic canBuildCatwalk(  ) {
			return 0;
		}

		// Function from file: turf.dm
		public virtual void cultify(  ) {
			
			if ( Lang13.Bool( GlobalFuncs.get_base_turf( this.z ).IsInstanceOfType( this ) ) ) {
				return;
			}
			this.ChangeTurf( GlobalFuncs.get_base_turf( this.z ) );
			return;
		}

		// Function from file: turf.dm
		public double Distance_cardinal( dynamic T = null ) {
			
			if ( !( this != null ) || !Lang13.Bool( T ) ) {
				return 0;
			}
			return Math.Abs( this.x - Convert.ToDouble( T.x ) ) + Math.Abs( this.y - Convert.ToDouble( T.y ) );
		}

		// Function from file: turf.dm
		public int Distance( dynamic T = null ) {
			return Map13.GetDistance( this, T );
		}

		// Function from file: turf.dm
		public ByTable AdjacentTurfsSpace( Ent_Dynamic ID = null, dynamic closed = null ) {
			ByTable L = null;
			Tile T = null;
			dynamic dir = null;

			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTHWEST, GlobalVars.NORTHEAST, GlobalVars.SOUTHEAST, GlobalVars.SOUTHWEST, GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				dir = _a;
				
				T = Map13.GetStep( this, Convert.ToInt32( dir ) );

				if ( Lang13.Bool( closed.Contains( T ) ) ) {
					continue;
				}

				if ( T is Tile && !T.density ) {
					
					if ( !( ID != null ) ) {
						
						if ( !GlobalFuncs.LinkBlocked( this, T ) ) {
							L.Add( T );
						}
					} else if ( !GlobalFuncs.LinkBlockedWithAccess( this, T, ID ) ) {
						L.Add( T );
					}
				}
			}
			return L;
		}

		// Function from file: turf.dm
		public ByTable AdjacentTurfs( dynamic closed = null ) {
			ByTable L = null;
			Tile T = null;
			dynamic dir = null;

			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTHWEST, GlobalVars.NORTHEAST, GlobalVars.SOUTHEAST, GlobalVars.SOUTHWEST, GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				dir = _a;
				
				T = Map13.GetStep( this, Convert.ToInt32( dir ) );

				if ( Lang13.Bool( closed.Contains( T ) ) ) {
					continue;
				}

				if ( T is Tile_Simulated && !T.density ) {
					
					if ( !GlobalFuncs.LinkBlocked( this, T ) ) {
						L.Add( T );
					}
				}
			}
			return L;
		}

		// Function from file: turf.dm
		public ByTable AdjacentTurfsWithAccess( Ent_Dynamic ID = null, dynamic closed = null ) {
			ByTable L = null;
			Tile T = null;
			dynamic dir = null;

			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTHWEST, GlobalVars.NORTHEAST, GlobalVars.SOUTHEAST, GlobalVars.SOUTHWEST, GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				dir = _a;
				
				T = Map13.GetStep( this, Convert.ToInt32( dir ) );

				if ( Lang13.Bool( closed.Contains( T ) ) ) {
					continue;
				}

				if ( T is Tile_Simulated && !T.density ) {
					
					if ( !GlobalFuncs.LinkBlockedWithAccess( this, T, ID ) ) {
						L.Add( T );
					}
				}
			}
			return L;
		}

		// Function from file: turf.dm
		public ByTable CardinalTurfs(  ) {
			ByTable L = null;
			Tile T = null;
			dynamic dir = null;

			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				T = Map13.GetStep( this, Convert.ToInt32( dir ) );

				if ( T is Tile_Simulated && !T.density ) {
					
					if ( !GlobalFuncs.LinkBlocked( this, T ) ) {
						L.Add( T );
					}
				}
			}
			return L;
		}

		// Function from file: turf.dm
		public ByTable CardinalTurfsWithAccess( Ent_Dynamic ID = null ) {
			ByTable L = null;
			Tile T = null;
			dynamic dir = null;

			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				T = Map13.GetStep( this, Convert.ToInt32( dir ) );

				if ( T is Tile_Simulated && !T.density ) {
					
					if ( !GlobalFuncs.LinkBlockedWithAccess( this, T, ID ) ) {
						L.Add( T );
					}
				}
			}
			return L;
		}

		// Function from file: turf.dm
		public void Bless(  ) {
			this.flags |= 1;
			return;
		}

		// Function from file: turf.dm
		public void kill_creatures( Mob_Living U = null ) {
			Mob_Living M = null;
			Obj_Mecha M2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Mob_Living) )) {
				M = _a;
				

				if ( M == U ) {
					continue;
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					M.gib();
					return;
				}));
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Mecha) )) {
				M2 = _b;
				
				Task13.Schedule( 0, (Task13.Closure)(() => {
					M2.take_damage( 100, "brute" );
					return;
				}));
			}
			return;
		}

		// Function from file: turf.dm
		public void ReplaceWithLattice(  ) {
			this.ChangeTurf( GlobalFuncs.get_base_turf( this.z ) );

			if ( this is Tile_Space ) {
				new Obj_Structure_Lattice( this );
			}
			return;
		}

		// Function from file: turf.dm
		public void ClearDecals(  ) {
			Image decal = null;

			
			if ( !Lang13.Bool( this.decals ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.decals, typeof(Image) )) {
				decal = _a;
				
				this.overlays.Remove( decal );
			}
			this.decals = 0;
			return;
		}

		// Function from file: turf.dm
		public void AddDecal( Image decal = null ) {
			
			if ( !Lang13.Bool( this.decals ) ) {
				this.decals = new ByTable();
			}
			this.decals += decal;
			this.overlays.Add( decal );
			return;
		}

		// Function from file: turf.dm
		public virtual dynamic ChangeTurf( dynamic N = null, bool? tell_universe = null, bool? force_lighting_update = null, bool? allow = null ) {
			tell_universe = tell_universe ?? true;
			force_lighting_update = force_lighting_update ?? false;
			allow = allow ?? true;

			dynamic _default = null;

			Ent_Static A = null;
			GasMixture env = null;
			bool old_opacity = false;
			bool old_dynamic_lighting = false;
			ByTable old_affecting_lights = null;
			Game_Data old_lighting_overlay = null;
			Tile S = null;
			Tile F = null;
			dynamic W = null;
			dynamic W2 = null;

			
			if ( this.loc != null ) {
				A = this.loc;
				((dynamic)A).area_turfs -= this;
			}

			if ( !Lang13.Bool( N ) || !( allow == true ) ) {
				return _default;
			}
			old_opacity = this.opacity;
			old_dynamic_lighting = this.dynamic_lighting;
			old_affecting_lights = this.affecting_lights;
			old_lighting_overlay = this.lighting_overlay;

			if ( this.connections != null ) {
				this.connections.erase_all();
			}

			if ( this is Tile_Simulated ) {
				S = this;
				env = S.air;

				if ( Lang13.Bool( ((dynamic)S).zone ) ) {
					((_Zone)((dynamic)S).zone).rebuild();
				}
			}

			if ( this is Tile_Simulated_Floor ) {
				F = this;

				if ( Lang13.Bool( ((dynamic)F).floor_tile ) ) {
					GlobalFuncs.returnToPool( ((dynamic)F).floor_tile );
					((dynamic)F).floor_tile = null;
				}
				F = null;
			}

			if ( Lang13.Bool( N.IsSubclassOf( typeof(Tile_Simulated_Floor) ) ) ) {
				W = Lang13.Call( N, this );

				if ( env != null ) {
					W.air = env;
				}

				if ( W is Tile_Simulated_Floor ) {
					((Tile)W).RemoveLattice();
				}

				if ( tell_universe == true ) {
					((UniversalState)GlobalVars.universe).OnTurfChange( W );
				}

				if ( GlobalVars.air_master != null ) {
					GlobalVars.air_master.mark_for_update( this );
				}
				((Tile)W).levelupdate();
				_default = W;
			} else {
				W2 = Lang13.Call( N, this );

				if ( tell_universe == true ) {
					((UniversalState)GlobalVars.universe).OnTurfChange( W2 );
				}

				if ( GlobalVars.air_master != null ) {
					GlobalVars.air_master.mark_for_update( this );
				}
				((Tile)W2).levelupdate();
				_default = W2;
			}
			this.lighting_overlay = old_lighting_overlay;
			this.affecting_lights = old_affecting_lights;

			if ( old_opacity != this.opacity || this.dynamic_lighting != old_dynamic_lighting || force_lighting_update == true ) {
				this.reconsider_lights();
			}

			if ( this.dynamic_lighting != old_dynamic_lighting ) {
				
				if ( this.dynamic_lighting ) {
					this.lighting_build_overlays();
				} else {
					this.lighting_clear_overlays();
				}
			}
			return _default;
		}

		// Function from file: turf.dm
		public void RemoveLattice(  ) {
			dynamic L = null;

			L = Lang13.FindIn( typeof(Obj_Structure_Lattice), this );

			if ( Lang13.Bool( L ) ) {
				GlobalFuncs.qdel( L );
				L = null;
			}
			return;
		}

		// Function from file: turf.dm
		public virtual void levelupdate(  ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				

				if ( O.level == 1 ) {
					O.hide( this.intact );
				}
			}
			return;
		}

		// Function from file: turf.dm
		public void inertial_drift( Ent_Dynamic A = null ) {
			Ent_Dynamic SP = null;
			Ent_Dynamic JC = null;
			Ent_Dynamic M = null;
			Ent_Dynamic carbons = null;

			
			if ( !Lang13.Bool( A.last_move ) ) {
				return;
			}

			if ( A is Obj_Spacepod && this.x > 2 && this.x < Game13.map_size_x - 1 && this.y > 2 && this.y < Game13.map_size_y - 1 ) {
				SP = A;

				if ( ((Obj_Spacepod)SP).Process_Spacemove( true ) ) {
					((dynamic)SP).inertia_dir = 0;
					return;
				}
				Task13.Schedule( 5, (Task13.Closure)(() => {
					
					if ( SP != null && SP.loc == this ) {
						
						if ( Lang13.Bool( ((dynamic)SP).inertia_dir ) ) {
							SP.Move( Map13.GetStep( SP, Convert.ToInt32( ((dynamic)SP).inertia_dir ) ), Lang13.IntNullable( ((dynamic)SP).inertia_dir ) );
							return;
						}
					}
					return;
				}));
			}

			if ( A is Obj_Structure_Bed_Chair_Vehicle && this.x > 2 && this.x < Game13.map_size_x - 1 && this.y > 2 && this.y < Game13.map_size_y - 1 ) {
				JC = A;

				if ( ((Obj_Structure_Bed_Chair_Vehicle)JC).Process_Spacemove( true ) ) {
					((dynamic)JC).inertia_dir = 0;
					return;
				}
				Task13.Schedule( 5, (Task13.Closure)(() => {
					
					if ( JC != null && JC.loc == this ) {
						
						if ( Lang13.Bool( ((dynamic)JC).inertia_dir ) ) {
							Map13.Step( JC, Convert.ToInt32( ((dynamic)JC).inertia_dir ) );
							return;
						}
						((dynamic)JC).inertia_dir = JC.last_move;
						Map13.Step( JC, Convert.ToInt32( ((dynamic)JC).inertia_dir ) );
					}
					return;
				}));
			}

			if ( A is Mob && this.x > 2 && this.x < Game13.map_size_x - 1 && this.y > 2 && this.y < Game13.map_size_y - 1 ) {
				M = A;

				if ( ((Mob)M).Process_Spacemove( true ) != 0 ) {
					((dynamic)M).inertia_dir = 0;
					return;
				}
				Task13.Schedule( 5, (Task13.Closure)(() => {
					
					if ( M != null && !Lang13.Bool( M.anchored ) && !( M.pulledby != null ) && M.loc == this ) {
						carbons = M;

						if ( carbons is Mob_Living_Carbon ) {
							((dynamic)carbons).update_minimap();
						}

						if ( Lang13.Bool( ((dynamic)M).inertia_dir ) ) {
							Map13.Step( M, Convert.ToInt32( ((dynamic)M).inertia_dir ) );
							return;
						}
						((dynamic)M).inertia_dir = M.last_move;
						Map13.Step( M, Convert.ToInt32( ((dynamic)M).inertia_dir ) );
					}
					return;
				}));
			}
			return;
		}

		// Function from file: turf.dm
		public virtual dynamic return_siding_icon_state(  ) {
			return 0;
		}

		// Function from file: turf.dm
		public virtual bool is_mineral_floor(  ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual bool is_arcade_floor(  ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual bool is_carpet_floor(  ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual bool is_wood_floor(  ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual bool is_grass_floor(  ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual bool is_light_floor(  ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual bool is_plasteel_floor(  ) {
			return false;
		}

		// Function from file: turf.dm
		public bool is_asteroid_floor(  ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual bool is_plating(  ) {
			return false;
		}

		// Function from file: turf.dm
		public virtual void initialize(  ) {
			return;
		}

		// Function from file: turf.dm
		public virtual bool process(  ) {
			((UniversalState)GlobalVars.universe).OnTurfTick( this );
			return false;
		}

		// Function from file: explosion_recursive.dm
		public virtual void explosion_spread( dynamic power = null, dynamic direction = null ) {
			ExplosionTurf ET = null;
			dynamic spread_power = null;
			dynamic side_spread_power = null;
			Obj O = null;
			Tile T = null;

			
			if ( Convert.ToDouble( power ) <= 0 ) {
				return;
			}
			ET = GlobalFuncs.get_explosion_turf( this );

			if ( Convert.ToDouble( ET.max_power ) >= Convert.ToDouble( power ) ) {
				return;
			}
			ET.max_power = power;
			spread_power = power - this.explosion_resistance;
			side_spread_power = power - this.explosion_resistance * 2;

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				

				if ( Lang13.Bool( O.explosion_resistance ) ) {
					spread_power -= O.explosion_resistance;
					side_spread_power -= O.explosion_resistance;
				}
			}
			T = Map13.GetStep( this, Convert.ToInt32( direction ) );
			T.explosion_spread( spread_power, direction );
			T = Map13.GetStep( this, Num13.Rotate( direction, 90 ) );
			T.explosion_spread( side_spread_power, Num13.Rotate( direction, 90 ) );
			T = Map13.GetStep( this, Num13.Rotate( direction, -90 ) );
			T.explosion_spread( side_spread_power, Num13.Rotate( direction, 90 ) );
			return;
		}

		// Function from file: adjacent.dm
		public bool ClickCross( dynamic target_dir = null, bool border_only = false, dynamic target_atom = null ) {
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				

				if ( !O.density || O == target_atom || O.throwpass ) {
					continue;
				}

				if ( Lang13.Bool( O.flags & 512 ) ) {
					
					if ( ( O.dir & Convert.ToInt32( target_dir ) ) != 0 || ( O.dir & O.dir - 1 ) != 0 ) {
						return false;
					}
				} else if ( !border_only ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: unsorted.dm
		public bool has_dense_content(  ) {
			Ent_Static turf_contents = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Static) )) {
				turf_contents = _a;
				

				if ( turf_contents.density ) {
					return true;
				}
			}
			return false;
		}

	}

}