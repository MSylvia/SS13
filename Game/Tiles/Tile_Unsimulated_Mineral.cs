// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Unsimulated_Mineral : Tile_Unsimulated {

		public Mineral mineral = null;
		public bool mined_ore = false;
		public int last_act = 0;
		public Geosample geologic_data = null;
		public double excavation_level = 0;
		public ByTable finds = new ByTable();
		public string archaeo_overlay = "";
		public string excav_overlay = "";
		public dynamic last_find = null;
		public ArtifactFind artifact_find = null;
		public string scan_state = null;
		public bool busy = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.explosion_resistance = 2;
			this.blocks_air = true;
			this.icon = "icons/turf/walls.dmi";
			this.icon_state = "rock";
		}

		// Function from file: mine_turfs.dm
		public Tile_Unsimulated_Mineral ( dynamic loc = null ) : base( (object)(loc) ) {
			GlobalVars.mineral_turfs.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.MineralSpread();

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: mine_turfs.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic C = null;
			dynamic C2 = null;
			dynamic P = null;
			dynamic P2 = null;
			string fail_message = null;
			Find F = null;
			Find F2 = null;
			Game_Data B = null;
			Mineral has_minerals = null;
			int I = 0;
			int I2 = 0;
			Find F3 = null;
			bool update_excav_overlay = false;
			int subtractions = 0;
			int excav_quadrant = 0;

			
			if ( this.busy ) {
				return null;
			}

			if ( !Lang13.Bool( Task13.User.dexterity_check() ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning>You don't have the dexterity to do this!</span>" );
				return null;
			}

			if ( a is Obj_Item_Device_CoreSampler ) {
				
				if ( !( this.geologic_data != null ) ) {
					this.geologic_data = new Geosample( this );
				}
				this.geologic_data.UpdateNearbyArtifactInfo( this );
				C = a;
				((Obj_Item_Device_CoreSampler)C).sample_item( this, b );
				return null;
			}

			if ( a is Obj_Item_Device_DepthScanner ) {
				C2 = a;
				((Obj_Item_Device_DepthScanner)C2).scan_atom( b, this );
				return null;
			}

			if ( a is Obj_Item_Device_MeasuringTape ) {
				P = a;
				((Ent_Static)b).visible_message( "<span class='notice'>" + b + " extends " + P + " towards " + this + ".</span>", "<span class='notice'>You extend " + P + " towards " + this + ".</span>" );
				this.busy = true;

				if ( GlobalFuncs.do_after( b, this, 25 ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).icon( P ).str( " " ).item( this ).str( " has been excavated to a depth of " ).item( this.excavation_level * 2 ).str( "cm.</span>" ).ToString() );
					this.busy = false;
				} else {
					this.busy = false;
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_Pickaxe ) {
				
				if ( b.loc != GlobalFuncs.get_turf( b ) ) {
					return null;
				}
				P2 = a;

				if ( !( P2 is Obj_Item_Weapon_Pickaxe ) ) {
					return null;
				}

				if ( !( ( P2.diggables & 1 ) != 0 ) ) {
					return null;
				}

				if ( this.last_act + ( P2.digspeed ??0) > Game13.time ) {
					return null;
				}
				this.last_act = Game13.time;
				GlobalFuncs.playsound( b, P2.drill_sound, 20, 1 );
				fail_message = "";

				if ( this.finds != null && this.finds.len != 0 ) {
					F = this.finds[1];

					if ( this.excavation_level + Convert.ToDouble( P2.excavation_amount ) > F.excavation_required ) {
						fail_message = ", <b>" + Rand13.Pick(new object [] { "there is a crunching noise", "" + a + " collides with some different rock", "part of the rock face crumbles away", "something breaks under " + a }) + "</b>";
					}
				}
				GlobalFuncs.to_chat( b, "<span class='rose'>You start " + P2.drill_verb + fail_message + ".</span>" );

				if ( Lang13.Bool( fail_message ) && Rand13.PercentChance( 90 ) ) {
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.excavate_find( 5, this.finds[1] );
					} else if ( Rand13.PercentChance( 50 ) ) {
						this.finds.Remove( this.finds[1] );

						if ( Rand13.PercentChance( 50 ) ) {
							this.artifact_debris();
						}
					}
				}
				this.busy = true;

				if ( GlobalFuncs.do_after( b, this, P2.digspeed ) && Lang13.Bool( b ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You finish " + P2.drill_verb + " the rock.</span>" );
					this.busy = false;

					if ( this.finds != null && this.finds.len != 0 ) {
						F2 = this.finds[1];

						if ( Num13.Floor( this.excavation_level + Convert.ToDouble( P2.excavation_amount ) ) == F2.excavation_required ) {
							
							if ( this.excavation_level + Convert.ToDouble( P2.excavation_amount ) > F2.excavation_required ) {
								this.excavate_find( 100, F2 );
							} else {
								this.excavate_find( 80, F2 );
							}
						} else if ( this.excavation_level + Convert.ToDouble( P2.excavation_amount ) > F2.excavation_required - F2.clearance_range ) {
							this.excavate_find( 0, F2 );
						}
					}

					if ( this.excavation_level + Convert.ToDouble( P2.excavation_amount ) >= 100 ) {
						B = null;

						if ( this.artifact_find != null ) {
							
							if ( this.excavation_level > 0 || Rand13.PercentChance( 15 ) ) {
								B = GlobalFuncs.getFromPool( typeof(Obj_Structure_Boulder), this );

								if ( this.artifact_find != null ) {
									((dynamic)B).artifact_find = this.artifact_find;
								}
							} else {
								this.artifact_debris( true );
							}
						} else if ( Rand13.PercentChance( 15 ) ) {
							B = GlobalFuncs.getFromPool( typeof(Obj_Structure_Boulder), this );
						}
						has_minerals = this.mineral;

						if ( B != null ) {
							this.GetDrilled( false );
						} else {
							this.GetDrilled( true );
						}

						if ( !( B != null ) && !( has_minerals != null ) ) {
							I = Rand13.Int( 1, 500 );

							if ( I == 1 ) {
								
								switch ((int)( GlobalVars.polarstar )) {
									case 0:
										new Obj_Item_Weapon_Gun_Energy_Polarstar( this );
										GlobalVars.polarstar = 1;
										this.visible_message( "<span class='notice'>A gun was buried within!</span>" );
										break;
									case 1:
										new Obj_Item_Device_Modkit_SpurParts( this );
										this.visible_message( "<span class='notice'>Something came out of the wall! Looks like scrap metal.</span>" );
										GlobalVars.polarstar = 2;
										break;
								}
							}
						}
						return null;
					}

					if ( this.finds != null && this.finds.len != 0 ) {
						I2 = Rand13.Int( 1, 100 );

						if ( I2 == 1 ) {
							
							switch ((int)( GlobalVars.polarstar )) {
								case 0:
									new Obj_Item_Weapon_Gun_Energy_Polarstar( this );
									GlobalVars.polarstar = 1;
									this.visible_message( "<span class='notice'>A gun was buried within!</span>" );
									break;
								case 1:
									new Obj_Item_Device_Modkit_SpurParts( this );
									this.visible_message( "<span class='notice'>Something came out of the wall! Looks like scrap metal.</span>" );
									GlobalVars.polarstar = 2;
									break;
							}
						}
					}
					this.excavation_level += Convert.ToDouble( P2.excavation_amount );

					if ( !Lang13.Bool( this.archaeo_overlay ) && this.finds != null && this.finds.len != 0 ) {
						F3 = this.finds[1];

						if ( F3.excavation_required <= this.excavation_level + F3.view_range ) {
							this.archaeo_overlay = "overlay_archaeo" + Rand13.Int( 1, 3 );
							this.overlays.Add( this.archaeo_overlay );
						}
					}
					update_excav_overlay = false;
					subtractions = 0;

					while (this.excavation_level - ( subtractions + 1 ) * 25 >= 0 && subtractions < 3) {
						subtractions++;
					}

					if ( this.excavation_level - Convert.ToDouble( P2.excavation_amount ) < subtractions * 25 ) {
						update_excav_overlay = true;
					}

					if ( !( Lang13.Bool( this.excav_overlay ) && this.excavation_level > 0 ) || update_excav_overlay ) {
						excav_quadrant = Num13.Floor( this.excavation_level / 25 ) + 1;
						this.excav_overlay = "overlay_excv" + excav_quadrant + "_" + Rand13.Int( 1, 3 );
						this.overlays.Add( this.excav_overlay );
					}
				} else {
					this.busy = false;
				}
			} else {
				return this.attack_hand( b );
			}
			return null;
		}

		// Function from file: mine_turfs.dm
		public void artifact_debris( bool? severity = null ) {
			severity = severity ?? false;

			double j = 0;
			Obj_Item_Stack_Rods R = null;
			Obj_Item_Stack_Tile R2 = null;
			Game_Data M = null;
			Obj_Item_Stack_Sheet_Plasteel R3 = null;
			int? quantity = null;
			int? i = null;
			int? quantity2 = null;
			int? i2 = null;
			Obj_Item_Stack_Sheet_Mineral_Uranium R4 = null;

			
			foreach (dynamic _b in Lang13.IterateRange( 1, Rand13.Int( 1, Num13.MaxInt( Num13.MinInt( severity == true ?1:0, 1 ), 0 ) * 2 + 3 ) )) {
				j = _b;
				

				switch ((int)( Rand13.Int( 1, 7 ) )) {
					case 1:
						R = new Obj_Item_Stack_Rods( this );
						R.amount = Rand13.Int( 5, 25 );
						break;
					case 2:
						R2 = new Obj_Item_Stack_Tile( this );
						R2.amount = Rand13.Int( 1, 5 );
						break;
					case 3:
						M = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), this );
						((dynamic)M).amount = Rand13.Int( 5, 25 );
						break;
					case 4:
						R3 = new Obj_Item_Stack_Sheet_Plasteel( this );
						R3.amount = Rand13.Int( 5, 25 );
						break;
					case 5:
						quantity = Rand13.Int( 1, 3 );
						i = null;
						i = 0;

						while (( i ??0) < ( quantity ??0)) {
							GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard), this.loc );
							i++;
						}
						break;
					case 6:
						quantity2 = Rand13.Int( 1, 3 );
						i2 = null;
						i2 = 0;

						while (( i2 ??0) < ( quantity2 ??0)) {
							GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard_Plasma), this.loc );
							i2++;
						}
						break;
					case 7:
						R4 = new Obj_Item_Stack_Sheet_Mineral_Uranium( this );
						R4.amount = Rand13.Int( 5, 25 );
						break;
				}
			}
			return;
		}

		// Function from file: mine_turfs.dm
		public void excavate_find( int? prob_clean = null, Find F = null ) {
			prob_clean = prob_clean ?? 0;

			dynamic X = null;
			string display_name = null;
			dynamic S = null;

			
			if ( Lang13.Bool( prob_clean ) ) {
				X = new Obj_Item_Weapon_ArchaeologicalFind( this, F.find_type );
			} else {
				X = new Obj_Item_Weapon_Strangerock( this, F.find_type );

				if ( !( this.geologic_data != null ) ) {
					this.geologic_data = new Geosample( this );
				}
				this.geologic_data.UpdateNearbyArtifactInfo( this );
				X.geologic_data = this.geologic_data;
			}
			display_name = "something";

			if ( !Lang13.Bool( X ) ) {
				X = this.last_find;
			}

			if ( Lang13.Bool( X ) ) {
				display_name = X.name;
			}

			if ( Rand13.PercentChance( F.prob_delicate ) ) {
				S = Lang13.FindIn( typeof(Obj_Effect_SuspensionField), this );

				if ( !Lang13.Bool( S ) || S.field_type != GlobalFuncs.get_responsive_reagent( Lang13.IntNullable(F.find_type) ) ) {
					
					if ( Lang13.Bool( X ) ) {
						this.visible_message( "<span class='danger'>" + Rand13.Pick(new object [] { "" + display_name + " crumbles away into dust", "" + display_name + " breaks apart" }) + ".</span>" );
						GlobalFuncs.qdel( X );
						X = null;
					}
				}
			}
			this.finds.Remove( F );
			return;
		}

		// Function from file: mine_turfs.dm
		public void DropAbandonedCrate(  ) {
			dynamic crate_type = null;

			crate_type = Rand13.PickFromTable( GlobalVars.valid_abandoned_crate_types );
			Lang13.Call( crate_type, this );
			return;
		}

		// Function from file: mine_turfs.dm
		public virtual void GetDrilled( bool? artifact_fail = null ) {
			artifact_fail = artifact_fail ?? false;

			double i = 0;
			Mob_Living M = null;
			dynamic N = null;

			
			if ( this.mineral != null && this.mineral.result_amount != 0 ) {
				
				foreach (dynamic _a in Lang13.IterateRange( 1, this.mineral.result_amount - ( this.mined_ore ?1:0) )) {
					i = _a;
					
					this.DropMineral();
				}
			}

			if ( this.artifact_find != null && artifact_fail == true ) {
				
				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( 200, this ), typeof(Mob_Living) )) {
					M = _b;
					
					GlobalFuncs.to_chat( M, "<font color='red'><b>" + Rand13.Pick(new object [] { "A high pitched " + Rand13.Pick(new object [] { "keening", "wailing", "whistle" }), "A rumbling noise like " + Rand13.Pick(new object [] { "thunder", "heavy machinery" }) }) + " somehow penetrates your mind before fading away!</b></font>" );

					if ( Rand13.PercentChance( 50 ) ) {
						Icon13.Flick( "pain", M.pain );

						if ( Rand13.PercentChance( 50 ) ) {
							M.adjustBruteLoss( 5 );
						}
					} else {
						Icon13.Flick( "flash", M.flash );

						if ( Rand13.PercentChance( 50 ) ) {
							M.Stun( 5 );
						}
					}
					M.apply_effect( 25, "irradiate" );
				}
			}

			if ( Rand13.Int( 1, 500 ) == 1 ) {
				this.visible_message( "<span class='notice'>An old dusty crate was buried within!</span>" );
				this.DropAbandonedCrate();
			}
			N = this.ChangeTurf( typeof(Tile_Unsimulated_Floor_Asteroid) );
			((Tile_Unsimulated_Floor_Asteroid)N).fullUpdateMineralOverlays();
			return;
		}

		// Function from file: mine_turfs.dm
		public dynamic DropMineral(  ) {
			dynamic O = null;

			
			if ( !( this.mineral != null ) ) {
				return null;
			}
			O = Lang13.Call( this.mineral.ore, this );

			if ( O is Obj_Item_Weapon_Ore ) {
				
				if ( !( this.geologic_data != null ) ) {
					this.geologic_data = new Geosample( this );
				}
				this.geologic_data.UpdateNearbyArtifactInfo( this );
				O.geologic_data = this.geologic_data;
			}
			return O;
		}

		// Function from file: mine_turfs.dm
		public void updateMineralOverlays(  ) {
			return;
		}

		// Function from file: mine_turfs.dm
		public void UpdateMineral(  ) {
			this.icon_state = "rock";

			if ( !( this.mineral != null ) ) {
				this.name = "ÿRock";
				return;
			}
			this.name = new Txt().improper().item( this.mineral.display_name ).str( " deposit" ).ToString();
			this.icon_state = "rock_" + this.mineral.name;
			return;
		}

		// Function from file: mine_turfs.dm
		public void MineralSpread(  ) {
			dynamic trydir = null;
			Tile target_turf = null;

			
			if ( this.mineral != null && this.mineral.spread ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					trydir = _a;
					

					if ( Rand13.PercentChance( this.mineral.spread_chance ) ) {
						target_turf = Map13.GetStep( this, Convert.ToInt32( trydir ) );

						if ( target_turf is Tile_Unsimulated_Mineral_Random && !Lang13.Bool( ((dynamic)target_turf).mineral ) ) {
							((dynamic)target_turf).mineral = this.mineral;
							((Tile_Unsimulated_Mineral)target_turf).UpdateMineral();
							((Tile_Unsimulated_Mineral)target_turf).MineralSpread();
						}
					}
				}
			}
			return;
		}

		// Function from file: mine_turfs.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			bool _default = false;

			Ent_Static H = null;
			Ent_Static R = null;
			Ent_Static M = null;

			_default = base.Bumped( AM, (object)(yes) );

			if ( AM is Mob_Living_Carbon_Human ) {
				H = AM;

				if ( ((Mob)H).get_active_hand() is Obj_Item_Weapon_Pickaxe ) {
					this.attackby( ((Mob)H).get_active_hand(), H );
				} else if ( ((Mob)H).get_inactive_hand() is Obj_Item_Weapon_Pickaxe ) {
					this.attackby( ((Mob)H).get_inactive_hand(), H );
				}
			} else if ( AM is Mob_Living_Silicon_Robot ) {
				R = AM;

				if ( ((dynamic)R).module_active is Obj_Item_Weapon_Pickaxe ) {
					this.attackby( ((dynamic)R).module_active, R );
				}
			} else if ( AM is Obj_Mecha ) {
				M = AM;

				if ( ((dynamic)M).selected is Obj_Item_MechaParts_MechaEquipment_Tool_Drill ) {
					((dynamic)M).selected.action( this );
				}
			}
			return _default;
		}

		// Function from file: mine_turfs.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 3:
					
					if ( Rand13.PercentChance( 75 ) ) {
						this.GetDrilled();
					}
					break;
				case 2:
					
					if ( Rand13.PercentChance( 90 ) ) {
						this.GetDrilled();
					}
					break;
				case 1:
					this.GetDrilled();
					break;
			}
			return false;
		}

		// Function from file: mine_turfs.dm
		public override void initialize(  ) {
			Tile T = null;

			Task13.Schedule( 1, (Task13.Closure)(() => {
				
				if ( Map13.GetStep( this, ((int)( GlobalVars.NORTH )) ) is Tile_Simulated_Floor || Map13.GetStep( this, ((int)( GlobalVars.NORTH )) ) is Tile_Space || Map13.GetStep( this, ((int)( GlobalVars.NORTH )) ) is Tile_Simulated_Shuttle_Floor ) {
					T = Map13.GetStep( this, ((int)( GlobalVars.NORTH )) );

					if ( T != null ) {
						T.overlays.Add( new Image( "icons/turf/walls.dmi", "rock_side_s" ) );
					}
				}

				if ( Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) ) is Tile_Simulated_Floor || Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) ) is Tile_Space || Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) ) is Tile_Simulated_Shuttle_Floor ) {
					T = Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) );

					if ( T != null ) {
						T.overlays.Add( new Image( "icons/turf/walls.dmi", "rock_side_n", null, 6 ) );
					}
				}

				if ( Map13.GetStep( this, ((int)( GlobalVars.EAST )) ) is Tile_Simulated_Floor || Map13.GetStep( this, ((int)( GlobalVars.EAST )) ) is Tile_Space || Map13.GetStep( this, ((int)( GlobalVars.EAST )) ) is Tile_Simulated_Shuttle_Floor ) {
					T = Map13.GetStep( this, ((int)( GlobalVars.EAST )) );

					if ( T != null ) {
						T.overlays.Add( new Image( "icons/turf/walls.dmi", "rock_side_w", null, 6 ) );
					}
				}

				if ( Map13.GetStep( this, ((int)( GlobalVars.WEST )) ) is Tile_Simulated_Floor || Map13.GetStep( this, ((int)( GlobalVars.WEST )) ) is Tile_Space || Map13.GetStep( this, ((int)( GlobalVars.WEST )) ) is Tile_Simulated_Shuttle_Floor ) {
					T = Map13.GetStep( this, ((int)( GlobalVars.WEST )) );

					if ( T != null ) {
						T.overlays.Add( new Image( "icons/turf/walls.dmi", "rock_side_e", null, 6 ) );
					}
				}
				return;
			}));
			return;
		}

		// Function from file: mine_turfs.dm
		public override dynamic ChangeTurf( dynamic N = null, bool? tell_universe = null, bool? force_lighting_update = null, bool? allow = null ) {
			tell_universe = tell_universe ?? true;
			force_lighting_update = force_lighting_update ?? false;
			allow = allow ?? true;

			GlobalVars.mineral_turfs.Remove( this );
			return base.ChangeTurf( (object)(N), tell_universe, true, allow );
		}

		// Function from file: mine_turfs.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			return null;
		}

	}

}