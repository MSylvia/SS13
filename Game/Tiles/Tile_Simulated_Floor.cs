// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Floor : Tile_Simulated {

		public string icon_regular_floor = "floor";
		public string icon_plating = "plating";
		public bool lava = false;
		public bool broken = false;
		public bool burnt = false;
		public string material = "metal";
		public bool spam_flag = false;
		public Game_Data floor_tile = null;
		public Image floor_overlay = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.explosion_resistance = 1;
			this.thermal_conductivity = 0.31;
			this.heat_capacity = 10000;
			this.melt_temperature = 1643.1500244140625;
			this.icon_state = "floor";
		}

		// Function from file: floor.dm
		public Tile_Simulated_Floor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !( this.floor_tile != null ) ) {
				this.floor_tile = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Tile_Plasteel), null );
				((dynamic)this.floor_tile).amount = 1;
			}

			if ( GlobalVars.icons_to_ignore_at_floor_init.Contains( this.icon_state ) ) {
				this.icon_regular_floor = "floor";
			} else {
				this.icon_regular_floor = this.icon_state;
			}
			return;
		}

		// Function from file: splash_simulation.dm
		public override bool can_leave_liquid( dynamic from_direction = null ) {
			Obj_Structure_Window W = null;
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Structure_Window) )) {
				W = _a;
				

				if ( W.is_fulltile() ) {
					return false;
				}

				if ( ( W.dir & Convert.ToInt32( from_direction ) ) != 0 ) {
					return false;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _b;
				

				if ( !O.liquid_pass() ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: splash_simulation.dm
		public override bool can_accept_liquid( int from_direction = 0 ) {
			Obj_Structure_Window W = null;
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Structure_Window) )) {
				W = _a;
				

				if ( W.is_fulltile() ) {
					return false;
				}

				if ( ( W.dir & from_direction ) != 0 ) {
					return false;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _b;
				

				if ( !O.liquid_pass() ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: floor.dm
		public override void cultify(  ) {
			
			if ( this.icon_state != "cult" && this.icon_state != "cult-narsie" ) {
				this.name = "engraved floor";
				this.icon_state = "cult";
				this.turf_animation( "icons/effects/effects.dmi", "cultfloor", 0, 0, 3 );
			}
			return;
		}

		// Function from file: floor.dm
		public override bool attack_construct( Mob_Living_SimpleAnimal_Construct user = null, dynamic dist = null ) {
			dynamic S = null;
			Game_Data SS = null;

			
			if ( this is Tile_Simulated_Floor_Carpet ) {
				return false;
			}

			if ( user is Mob_Living_SimpleAnimal_Construct_Builder && Map13.GetDistance( this, user ) <= 3 ) {
				
				if ( this.icon_state != "cult" && this.icon_state != "cult-narsie" ) {
					S = Lang13.FindIn( typeof(Spell_AoeTurf_Conjure_Floor), user.spell_list );
					((Spell)S).perform( user, false, this );
					SS = S.connected_button;
					((Obj_Screen_Spell)SS).update_charge( true );
					return true;
				}
			}
			return false;
		}

		// Function from file: floor.dm
		public override bool Enter( Ent_Dynamic O = null, Ent_Static oldloc = null ) {
			bool _default = false;

			Mob_Living L = null;

			_default = base.Enter( O, oldloc );

			if ( O != null && O is Mob_Living ) {
				
				switch ((string)( this.material )) {
					case "bananium":
						
						if ( !this.spam_flag ) {
							this.spam_flag = true;
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "clownstep", 50, 1 );
							Task13.Schedule( 20, (Task13.Closure)(() => {
								this.spam_flag = false;
								return;
							}));
						}
						break;
					case "uranium":
						
						if ( !this.spam_flag ) {
							this.spam_flag = true;
							this.set_light( 3 );
							this.icon_state = "uranium_inactive";

							foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 2 ), typeof(Mob_Living) )) {
								L = _a;
								
								L.apply_effect( 3, "irradiate", 0 );
							}
							Icon13.Flick( "uranium_active", this );
							Task13.Schedule( 20, (Task13.Closure)(() => {
								this.set_light( 0 );
								return;
							}));
							Task13.Schedule( 200, (Task13.Closure)(() => {
								this.spam_flag = false;
								this.update_icon();
								return;
							}));
						}
						break;
				}
			}
			return _default;
		}

		// Function from file: floor.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic R = null;
			dynamic T = null;
			dynamic L = null;
			Game_Data F = null;
			dynamic direction = null;
			Tile FF = null;
			dynamic direction2 = null;
			Tile FF2 = null;
			dynamic coil = null;
			dynamic welder = null;

			
			if ( !Lang13.Bool( a ) || !Lang13.Bool( b ) ) {
				return 0;
			}

			if ( a is Obj_Item_Weapon_Crowbar && !this.is_plating() ) {
				
				if ( this.broken || this.burnt ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You remove the broken plating.</span>" );
				} else if ( this.is_wood_floor() ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You forcefully pry off the planks, destroying them in the process.</span>" );
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>You remove the " + ((dynamic)this.floor_tile).name + ".</span>" );
					((dynamic)this.floor_tile).loc = this;
					this.floor_tile = null;
				}
				this.make_plating();
				GlobalFuncs.playsound( this, "sound/items/Crowbar.ogg", 80, 1 );
				return null;
			} else if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( this.is_wood_floor() ) {
					
					if ( this.broken || this.burnt ) {
						return null;
					} else if ( this.is_wood_floor() ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You unscrew the planks.</span>" );
						Lang13.Call( this.floor_tile.type, this );
					}
					this.make_plating();
					GlobalFuncs.playsound( this, "sound/items/Screwdriver.ogg", 80, 1 );
				}
				return null;
			} else if ( a is Obj_Item_Stack_Rods ) {
				R = a;

				if ( this.is_plating() ) {
					
					if ( Convert.ToDouble( R.amount ) >= 2 ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>Reinforcing the floor...</span>" );

						if ( GlobalFuncs.do_after( b, this, 30 ) && Lang13.Bool( R ) && Convert.ToDouble( R.amount ) >= 2 && this.is_plating() ) {
							this.ChangeTurf( typeof(Tile_Simulated_Floor_Engine) );
							GlobalFuncs.playsound( this, "sound/items/Deconstruct.ogg", 80, 1 );
							((Obj_Item_Stack)R).use( 2 );
							return null;
						}
					} else {
						GlobalFuncs.to_chat( b, "<span class='warning'>You need more rods.</span>" );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>You must remove the plating first.</span>" );
				}
				return null;
			} else if ( a is Obj_Item_Stack_Tile ) {
				
				if ( this.is_plating() ) {
					
					if ( !this.broken && !this.burnt ) {
						T = a;

						if ( ((Obj_Item_Stack)T).use( 1 ) ) {
							
							if ( this.floor_tile != null ) {
								GlobalFuncs.returnToPool( this.floor_tile );
							}
							this.floor_tile = null;
							this.floor_tile = GlobalFuncs.getFromPool( T.type, null );
							this.material = ((dynamic)this.floor_tile).material;
							this.intact = true;

							if ( T is Obj_Item_Stack_Tile_Light ) {
								L = T;
								F = this.floor_tile;
								((dynamic)F).color_r = L.color_r;
								((dynamic)F).color_g = L.color_g;
								((dynamic)F).color_b = L.color_b;
								((dynamic)F).on = L.on;
							}

							if ( T is Obj_Item_Stack_Tile_Grass ) {
								
								foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
									direction = _a;
									

									if ( Map13.GetStep( this, Convert.ToInt32( direction ) ) is Tile_Simulated_Floor ) {
										FF = Map13.GetStep( this, Convert.ToInt32( direction ) );
										FF.update_icon();
									}
								}
							} else if ( T is Obj_Item_Stack_Tile_Carpet ) {
								
								foreach (dynamic _b in Lang13.Enumerate( GlobalVars.alldirs )) {
									direction2 = _b;
									

									if ( Map13.GetStep( this, Convert.ToInt32( direction2 ) ) is Tile_Simulated_Floor ) {
										FF2 = Map13.GetStep( this, Convert.ToInt32( direction2 ) );
										FF2.update_icon();
									}
								}
							}
							this.update_icon();
							this.levelupdate();
							GlobalFuncs.playsound( this, "sound/weapons/Genhit.ogg", 50, 1 );
						}
					} else {
						GlobalFuncs.to_chat( b, "<span class='warning'>This section is too damaged to support a tile. Use a welder to fix the damage.</span>" );
					}
				}
			} else if ( a is Obj_Item_Stack_CableCoil ) {
				
				if ( this.is_plating() ) {
					coil = a;
					((Obj_Item_Stack_CableCoil)coil).turf_place( this, b );
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>You must remove the plating first.</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Pickaxe_Shovel ) {
				
				if ( this.is_grass_floor() ) {
					GlobalFuncs.playsound( this, "sound/items/shovel.ogg", 50, 1 );
					new Obj_Item_Weapon_Ore_Glass( this );
					new Obj_Item_Weapon_Ore_Glass( this );
					GlobalFuncs.to_chat( b, "<span class='notice'>You shovel the grass.</span>" );
					this.make_plating();
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>You cannot shovel this.</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Weldingtool ) {
				welder = a;

				if ( ((Obj_Item_Weapon_Weldingtool)welder).isOn() && this.is_plating() ) {
					
					if ( this.broken || this.burnt ) {
						
						if ( ((Obj_Item_Weapon_Weldingtool)welder).remove_fuel( 0, b ) ) {
							GlobalFuncs.to_chat( b, "<span class='warning'>You fix some dents on the broken plating.</span>" );
							GlobalFuncs.playsound( this, "sound/items/welder.ogg", 80, 1 );
							this.icon_state = "plating";
							this.burnt = false;
							this.broken = false;
						} else {
							GlobalFuncs.to_chat( b, "<span class='notice'>You need more welding fuel to complete this task.</span>" );
						}
					}
				}
			}
			return null;
		}

		// Function from file: floor.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			
			if ( ( current_size ??0) >= 9 ) {
				
				if ( Rand13.PercentChance( 75 ) ) {
					
					if ( this.floor_tile != null && !this.broken && !this.burnt ) {
						((dynamic)this.floor_tile).loc = this;
						this.floor_tile = null;
					}
					this.make_plating();
				}
				return false;
			}

			if ( current_size == 7 ) {
				
				if ( Rand13.PercentChance( 30 ) ) {
					
					if ( this.floor_tile != null && !this.broken && !this.burnt ) {
						((dynamic)this.floor_tile).loc = this;
						this.floor_tile = null;
					}
					this.make_plating();
				}
			}
			return false;
		}

		// Function from file: floor.dm
		public override bool is_mineral_floor(  ) {
			
			if ( this.floor_tile is Obj_Item_Stack_Tile_Mineral ) {
				return true;
			}
			return false;
		}

		// Function from file: floor.dm
		public override bool is_plating(  ) {
			
			if ( !( this.floor_tile != null ) ) {
				return true;
			}
			return false;
		}

		// Function from file: floor.dm
		public override bool is_arcade_floor(  ) {
			
			if ( this.floor_tile is Obj_Item_Stack_Tile_Arcade ) {
				return true;
			}
			return false;
		}

		// Function from file: floor.dm
		public override bool is_carpet_floor(  ) {
			
			if ( this.floor_tile is Obj_Item_Stack_Tile_Carpet ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: floor.dm
		public override bool is_wood_floor(  ) {
			
			if ( this.floor_tile is Obj_Item_Stack_Tile_Wood ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: floor.dm
		public override bool is_grass_floor(  ) {
			
			if ( this.floor_tile is Obj_Item_Stack_Tile_Grass ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: floor.dm
		public override bool is_light_floor(  ) {
			
			if ( this.floor_tile is Obj_Item_Stack_Tile_Light ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: floor.dm
		public override bool is_plasteel_floor(  ) {
			
			if ( this.floor_tile is Obj_Item_Stack_Tile_Plasteel ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: floor.dm
		public void make_carpet_floor( dynamic T = null ) {
			this.broken = false;
			this.burnt = false;
			this.intact = true;

			if ( this.floor_tile != null ) {
				GlobalFuncs.returnToPool( this.floor_tile );
			}
			this.floor_tile = null;

			if ( Lang13.Bool( T ) ) {
				
				if ( T is Obj_Item_Stack_Tile_Carpet ) {
					this.floor_tile = T;
					this.update_icon();
					this.levelupdate();
					return;
				}
			}
			this.floor_tile = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Tile_Carpet), null );
			this.update_icon();
			this.levelupdate();
			return;
		}

		// Function from file: floor.dm
		public void make_wood_floor( dynamic T = null ) {
			this.broken = false;
			this.burnt = false;
			this.intact = true;

			if ( this.floor_tile != null ) {
				GlobalFuncs.returnToPool( this.floor_tile );
			}
			this.floor_tile = null;

			if ( Lang13.Bool( T ) ) {
				
				if ( T is Obj_Item_Stack_Tile_Wood ) {
					this.floor_tile = T;
					this.update_icon();
					this.levelupdate();
					return;
				}
			}
			this.floor_tile = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Tile_Wood), null );
			this.update_icon();
			this.levelupdate();
			return;
		}

		// Function from file: floor.dm
		public void make_grass_floor( dynamic T = null ) {
			this.broken = false;
			this.burnt = false;
			this.intact = true;

			if ( this.floor_tile != null ) {
				GlobalFuncs.returnToPool( this.floor_tile );
			}
			this.floor_tile = null;

			if ( Lang13.Bool( T ) ) {
				
				if ( T is Obj_Item_Stack_Tile_Grass ) {
					this.floor_tile = T;
					this.update_icon();
					this.levelupdate();
					return;
				}
			}
			this.floor_tile = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Tile_Wood), null );
			this.update_icon();
			this.levelupdate();
			return;
		}

		// Function from file: floor.dm
		public void make_light_floor( dynamic T = null ) {
			this.broken = false;
			this.burnt = false;
			this.intact = true;

			if ( this.floor_tile != null ) {
				GlobalFuncs.returnToPool( this.floor_tile );
			}
			this.floor_tile = null;

			if ( Lang13.Bool( T ) ) {
				
				if ( T is Obj_Item_Stack_Tile_Light ) {
					this.floor_tile = T;
					this.update_icon();
					this.levelupdate();
					return;
				}
			}
			this.floor_tile = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Tile_Light), null );
			this.update_icon();
			this.levelupdate();
			return;
		}

		// Function from file: floor.dm
		public void make_plasteel_floor( dynamic T = null ) {
			this.broken = false;
			this.burnt = false;
			this.intact = true;
			this.set_light( 0 );

			if ( this.floor_tile != null ) {
				GlobalFuncs.returnToPool( this.floor_tile );
			}
			this.floor_tile = null;

			if ( Lang13.Bool( T ) ) {
				
				if ( T is Obj_Item_Stack_Tile_Plasteel ) {
					this.floor_tile = T;

					if ( Lang13.Bool( this.icon_regular_floor ) ) {
						this.icon_state = this.icon_regular_floor;
					} else {
						this.icon_state = "floor";
						this.icon_regular_floor = this.icon_state;
					}
					this.update_icon();
					this.levelupdate();
					return;
				}
			}
			this.floor_tile = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Tile_Plasteel), null );
			this.icon_state = "floor";
			this.icon_regular_floor = this.icon_state;
			this.update_icon();
			this.levelupdate();
			return;
		}

		// Function from file: floor.dm
		public void make_plating(  ) {
			dynamic direction = null;
			Tile FF = null;
			dynamic direction2 = null;
			Tile FF2 = null;

			
			if ( this is Tile_Simulated_Floor_Engine ) {
				return;
			}

			if ( this.is_grass_floor() ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					direction = _a;
					

					if ( Map13.GetStep( this, Convert.ToInt32( direction ) ) is Tile_Simulated_Floor ) {
						FF = Map13.GetStep( this, Convert.ToInt32( direction ) );
						FF.update_icon();
					}
				}
			} else if ( this.is_carpet_floor() ) {
				Task13.Schedule( 5, (Task13.Closure)(() => {
					
					if ( this != null ) {
						
						foreach (dynamic _b in Lang13.Enumerate( GlobalVars.alldirs )) {
							direction2 = _b;
							

							if ( Map13.GetStep( this, Convert.ToInt32( direction2 ) ) is Tile_Simulated_Floor ) {
								FF2 = Map13.GetStep( this, Convert.ToInt32( direction2 ) );
								FF2.update_icon();
							}
						}
					}
					return;
				}));
			}

			if ( this.floor_tile != null ) {
				GlobalFuncs.returnToPool( this.floor_tile );
			}
			this.icon_plating = "plating";
			this.set_light( 0 );
			this.floor_tile = null;
			this.intact = false;
			this.broken = false;
			this.burnt = false;
			this.material = "metal";
			this.update_icon();
			this.levelupdate();
			return;
		}

		// Function from file: floor.dm
		public void burn_tile(  ) {
			
			if ( this is Tile_Simulated_Floor_Engine ) {
				return;
			}

			if ( this is Tile_Unsimulated_Floor_Asteroid ) {
				return;
			}

			if ( this.is_plasteel_floor() ) {
				this.icon_state = "damaged" + Rand13.Pick(new object [] { 1, 2, 3, 4, 5 });
				this.burnt = true;
			} else if ( this.is_plasteel_floor() ) {
				this.icon_state = "floorscorched" + Rand13.Pick(new object [] { 1, 2 });
				this.burnt = true;
			} else if ( this.is_plating() ) {
				this.icon_state = "panelscorched";
				this.burnt = true;
			} else if ( this.is_wood_floor() ) {
				this.icon_state = "wood-broken";
				this.burnt = true;
			} else if ( this.is_carpet_floor() || this.is_arcade_floor() ) {
				this.icon_state = "carpet-broken";
				this.burnt = true;
			} else if ( this.is_grass_floor() ) {
				this.icon_state = "sand" + Rand13.Pick(new object [] { "1", "2", "3" });
				this.burnt = true;
			} else if ( this.is_mineral_floor() ) {
				this.burnt = true;
			}
			return;
		}

		// Function from file: floor.dm
		public void break_tile(  ) {
			
			if ( this is Tile_Simulated_Floor_Engine ) {
				return;
			}

			if ( this.broken ) {
				return;
			}

			if ( this.is_plasteel_floor() ) {
				this.icon_state = "damaged" + Rand13.Pick(new object [] { 1, 2, 3, 4, 5 });
				this.broken = true;
			} else if ( this.is_light_floor() ) {
				this.icon_state = "light_broken";
				this.broken = true;
			} else if ( this.is_plating() ) {
				this.icon_state = "platingdmg" + Rand13.Pick(new object [] { 1, 2, 3 });
				this.broken = true;
			} else if ( this.is_wood_floor() ) {
				this.icon_state = "wood-broken";
				this.broken = true;
			} else if ( this.is_carpet_floor() || this.is_arcade_floor() ) {
				this.icon_state = "carpet-broken";
				this.broken = true;
			} else if ( this.is_grass_floor() ) {
				this.icon_state = "sand" + Rand13.Pick(new object [] { "1", "2", "3" });
				this.broken = true;
			} else if ( this.is_mineral_floor() ) {
				
				if ( this.material == "diamond" ) {
					return;
				}

				if ( this.material == "plastic" ) {
					return;
				}

				if ( this.material == "phazon" ) {
					Task13.Schedule( Rand13.Int( 2, 10 ), (Task13.Closure)(() => {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "shatter", 70, 1 );
						this.make_plating();
						return;
					}));
					return;
				}
				this.icon_state = "" + this.material + "_broken";
			}
			return;
		}

		// Function from file: floor.dm
		public void break_tile_to_plating(  ) {
			
			if ( !this.is_plating() ) {
				this.make_plating();
			}
			this.break_tile();
			return;
		}

		// Function from file: floor.dm
		public void gets_drilled(  ) {
			return;
		}

		// Function from file: floor.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Game_Data T = null;

			
			if ( this.is_light_floor() ) {
				T = this.floor_tile;
				((dynamic)T).on = !Lang13.Bool( ((dynamic)T).on );
				this.update_icon();
			}

			switch ((string)( this.material )) {
				case "bananium":
					
					if ( !this.spam_flag ) {
						this.spam_flag = true;
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/bikehorn.ogg", 50, 1 );
						Task13.Schedule( 20, (Task13.Closure)(() => {
							this.spam_flag = false;
							return;
						}));
					}
					break;
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: floor.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: floor.dm
		public override dynamic return_siding_icon_state(  ) {
			double dir_sum = 0;
			dynamic direction = null;
			Tile T = null;

			base.return_siding_icon_state();

			if ( this.is_grass_floor() ) {
				dir_sum = 0;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					direction = _a;
					
					T = Map13.GetStep( this, Convert.ToInt32( direction ) );

					if ( !T.is_grass_floor() ) {
						dir_sum += Convert.ToDouble( direction );
					}
				}

				if ( dir_sum != 0 ) {
					return "wood_siding" + dir_sum;
				} else {
					return 0;
				}
			}
			return null;
		}

		// Function from file: floor.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			Game_Data T = null;
			int connectdir = 0;
			dynamic direction = null;
			Tile FF = null;
			int diagonalconnect = 0;
			Tile FF2 = null;
			Tile FF3 = null;
			Tile FF4 = null;
			Tile FF5 = null;

			this.overlays.Remove( this.floor_overlay );

			if ( this.lava ) {
				return null;
			} else if ( this.is_plasteel_floor() ) {
				
				if ( !this.broken && !this.burnt ) {
					this.icon_state = this.icon_regular_floor;
				}
			} else if ( this.is_plating() ) {
				
				if ( !this.broken && !this.burnt ) {
					this.icon_state = this.icon_plating;
				}
			} else if ( this.is_light_floor() ) {
				T = this.floor_tile;

				if ( Lang13.Bool( ((dynamic)T).on ) ) {
					this.set_light( 5 );
					this.floor_overlay = ((Obj_Item_Stack_Tile_Light)T).get_turf_image();
					this.icon_state = "light_base";
					this.overlays.Add( this.floor_overlay );
					this.light_color = this.floor_overlay.color;
				} else {
					this.set_light( 0 );
					this.icon_state = "light_off";
				}
			} else if ( this.is_grass_floor() ) {
				
				if ( !this.broken && !this.burnt ) {
					
					if ( !new ByTable(new object [] { "grass1", "grass2", "grass3", "grass4" }).Contains( this.icon_state ) ) {
						this.icon_state = "grass" + Rand13.Pick(new object [] { "1", "2", "3", "4" });
					}
				}
			} else if ( this.is_carpet_floor() ) {
				
				if ( !this.broken && !this.burnt ) {
					connectdir = 0;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
						direction = _a;
						

						if ( Map13.GetStep( this, Convert.ToInt32( direction ) ) is Tile_Simulated_Floor ) {
							FF = Map13.GetStep( this, Convert.ToInt32( direction ) );

							if ( FF.is_carpet_floor() ) {
								connectdir |= Convert.ToInt32( direction );
							}
						}
					}
					diagonalconnect = 0;

					if ( ( connectdir & 1 ) != 0 && ( connectdir & 4 ) != 0 ) {
						
						if ( Map13.GetStep( this, ((int)( GlobalVars.NORTHEAST )) ) is Tile_Simulated_Floor ) {
							FF2 = Map13.GetStep( this, ((int)( GlobalVars.NORTHEAST )) );

							if ( FF2.is_carpet_floor() ) {
								diagonalconnect |= 1;
							}
						}
					}

					if ( ( connectdir & 2 ) != 0 && ( connectdir & 4 ) != 0 ) {
						
						if ( Map13.GetStep( this, ((int)( GlobalVars.SOUTHEAST )) ) is Tile_Simulated_Floor ) {
							FF3 = Map13.GetStep( this, ((int)( GlobalVars.SOUTHEAST )) );

							if ( FF3.is_carpet_floor() ) {
								diagonalconnect |= 2;
							}
						}
					}

					if ( ( connectdir & 1 ) != 0 && ( connectdir & 8 ) != 0 ) {
						
						if ( Map13.GetStep( this, ((int)( GlobalVars.NORTHWEST )) ) is Tile_Simulated_Floor ) {
							FF4 = Map13.GetStep( this, ((int)( GlobalVars.NORTHWEST )) );

							if ( FF4.is_carpet_floor() ) {
								diagonalconnect |= 4;
							}
						}
					}

					if ( ( connectdir & 2 ) != 0 && ( connectdir & 8 ) != 0 ) {
						
						if ( Map13.GetStep( this, ((int)( GlobalVars.SOUTHWEST )) ) is Tile_Simulated_Floor ) {
							FF5 = Map13.GetStep( this, ((int)( GlobalVars.SOUTHWEST )) );

							if ( FF5.is_carpet_floor() ) {
								diagonalconnect |= 8;
							}
						}
					}
					this.icon_state = "carpet" + connectdir + "-" + diagonalconnect;
				}
			} else if ( this.is_arcade_floor() ) {
				
				if ( !this.broken && !this.burnt ) {
					this.icon_state = "arcade";
				}
			} else if ( this.is_wood_floor() ) {
				
				if ( !this.broken && !this.burnt ) {
					
					if ( !GlobalVars.wood_icons.Contains( this.icon_state ) ) {
						this.icon_state = "wood";
					}
				}
			} else if ( this.is_mineral_floor() ) {
				
				if ( !this.broken && !this.burnt ) {
					this.icon_state = ((dynamic)this.floor_tile).material;
				}
			}
			return null;
		}

		// Function from file: floor.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: floor.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			Game_Data M = null;
			Game_Data M2 = null;

			
			switch ((int?)( severity )) {
				case 1:
					this.ChangeTurf( GlobalFuncs.get_base_turf( this.z ) );
					break;
				case 2:
					
					dynamic _a = Rand13.PickWeighted(new object [] { 32443, 1, 33091, 75, 65535, 3 }); // Was a switch-case, sorry for the mess.
					if ( _a==1 ) {
						this.ReplaceWithLattice();

						if ( Rand13.PercentChance( 33 ) ) {
							M = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
							((dynamic)M).amount = 1;
						}
					} else if ( _a==2 ) {
						this.ChangeTurf( GlobalFuncs.get_base_turf( this.z ) );
					} else if ( _a==3 ) {
						
						if ( Rand13.PercentChance( 80 ) ) {
							this.break_tile_to_plating();
						} else {
							this.break_tile();
						}
						this.hotspot_expose( 1000, 2500, null, true );

						if ( Rand13.PercentChance( 33 ) ) {
							M2 = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
							((dynamic)M2).amount = 1;
						}
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.break_tile();
						this.hotspot_expose( 1000, 2500, null, true );
					}
					break;
			}
			return false;
		}

		// Function from file: floor.dm
		public override void melt(  ) {
			this.burn_tile();
			return;
		}

		// Function from file: floor.dm
		public override void ashify(  ) {
			this.burn_tile();
			return;
		}

	}

}