// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Wall : Tile_Simulated {

		public string mineral = "metal";
		public bool rotting = false;
		public string walltype = "metal";
		public int hardness = 60;
		public string engraving = null;
		public string engraving_quality = null;
		public bool del_suppress_resmoothing = false;
		public Type dismantle_type = typeof(Tile_Simulated_Floor_Plating);
		public Type girder_type = typeof(Obj_Structure_Girder);

		protected override void __FieldInit() {
			base.__FieldInit();

			this.explosion_resistance = 5;
			this.blocks_air = true;
			this.thermal_conductivity = 0;
			this.heat_capacity = 312500;
			this.canSmoothWith = "/turf/simulated/wall=0&/obj/structure/falsewall=0&/obj/structure/rfalsewall=0";
			this.explosion_block = 1;
			this.icon = "icons/turf/walls.dmi";
		}

		// Function from file: smoothwall.dm
		public Tile_Simulated_Wall ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.relativewall();
			this.relativewall_neighbours();
			return;
		}

		// Function from file: splash_simulation.dm
		public override bool can_leave_liquid( dynamic from_direction = null ) {
			return false;
		}

		// Function from file: splash_simulation.dm
		public override bool can_accept_liquid( int from_direction = 0 ) {
			return false;
		}

		// Function from file: walls.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			
			if ( ( current_size ??0) >= 9 ) {
				
				if ( Rand13.PercentChance( 75 ) ) {
					this.dismantle_wall();
				}
				return false;
			}

			if ( current_size == 7 ) {
				
				if ( Rand13.PercentChance( 30 ) ) {
					this.dismantle_wall();
				}
			}
			return false;
		}

		// Function from file: walls.dm
		public override bool attack_construct( Mob_Living_SimpleAnimal_Construct user = null, dynamic dist = null ) {
			dynamic S = null;
			Game_Data SS = null;

			
			if ( user is Mob_Living_SimpleAnimal_Construct_Builder && Map13.GetDistance( this, user ) <= 3 ) {
				S = Lang13.FindIn( typeof(Spell_AoeTurf_Conjure_Wall), user.spell_list );
				((Spell)S).perform( user, false, this );
				SS = S.connected_button;
				((Obj_Screen_Spell)SS).update_charge( true );
				return true;
			}
			return false;
		}

		// Function from file: walls.dm
		public override void cultify(  ) {
			this.ChangeTurf( typeof(Tile_Simulated_Wall_Cult) );
			this.turf_animation( "icons/effects/effects.dmi", "cultwall", 0, 0, 3 );
			return;
		}

		// Function from file: walls.dm
		public override dynamic ChangeTurf( dynamic N = null, bool? tell_universe = null, bool? force_lighting_update = null, bool? allow = null ) {
			tell_universe = tell_universe ?? true;
			force_lighting_update = force_lighting_update ?? false;
			allow = allow ?? true;

			Obj_Effect E = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Effect) )) {
				E = _a;
				

				if ( E.name == "Wallrot" ) {
					GlobalFuncs.qdel( E );
				}
			}
			base.ChangeTurf( (object)(N), tell_universe, force_lighting_update, allow );
			return null;
		}

		// Function from file: smoothwall.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Ent_Static temploc = null;
			dynamic direction = null;
			Obj_Effect_Glowshroom shroom = null;

			temploc = this.loc;

			if ( !this.del_suppress_resmoothing ) {
				Task13.Schedule( 10, (Task13.Closure)(() => {
					this.relativewall_neighbours( temploc );
					return;
				}));
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( this, Convert.ToInt32( direction ) ), typeof(Obj_Effect_Glowshroom) )) {
					shroom = _a;
					

					if ( !shroom.floor ) {
						shroom.floor = true;
						shroom.icon_state = "glowshroomf";
						shroom.pixel_x = 0;
						shroom.pixel_y = 0;
					}
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: walls.dm
		public override void melt(  ) {
			Tile_Simulated F = null;

			
			if ( this.mineral == "diamond" ) {
				return;
			}
			this.ChangeTurf( typeof(Tile_Simulated_Floor_Plating) );
			F = this;

			if ( !( F != null ) ) {
				return;
			}
			((Tile_Simulated_Floor)F).burn_tile();
			F.icon_state = "wall_thermite";
			this.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " spontaenously combusts!.</span>" ).ToString() );
			return;
		}

		// Function from file: walls.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic S = null;
			Obj_Effect E = null;
			Obj_Effect E2 = null;
			double pdiff = 0;
			dynamic WT = null;
			double pdiff2 = 0;
			dynamic PK = null;
			double pdiff3 = 0;

			((Mob)b).delayNextAttack( 8 );

			if ( !Lang13.Bool( b.dexterity_check() ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return null;
			}

			if ( a is Obj_Item_Weapon_Solder && this.bullet_marks ) {
				S = a;

				if ( !Lang13.Bool( S.remove_fuel( ( this.bullet_marks ?1:0) * 2, b ) ) ) {
					return null;
				}
				GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 100, 1 );
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You remove the bullet marks with " ).the( a ).item().str( ".</span>" ).ToString() );
				this.bullet_marks = false;
				this.icon = Lang13.Initial( this, "icon" );
				return null;
			}

			if ( !( b.loc is Tile ) ) {
				return null;
			}

			if ( this.rotting ) {
				
				if ( Lang13.Bool( ((Obj)a).is_hot() ) ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " burns the fungi away with " ).the( a ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You burn the fungi away with " ).the( a ).item().str( ".</span>" ).ToString() );

					foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Effect) )) {
						E = _a;
						

						if ( E.name == "Wallrot" ) {
							GlobalFuncs.qdel( E );
						}
					}
					this.rotting = false;
					return null;
				}

				if ( a is Obj_Item_Weapon_Soap ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " forcefully scrubs the fungi away with " ).the( a ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You forcefully scrub the fungi away with " ).the( a ).item().str( ".</span>" ).ToString() );

					foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Effect) )) {
						E2 = _b;
						

						if ( E2.name == "Wallrot" ) {
							GlobalFuncs.qdel( E2 );
						}
					}
					this.rotting = false;
					return null;
				} else if ( !Lang13.Bool( ((Obj)a).is_sharp() ) && Convert.ToDouble( a.force ) >= 10 || Convert.ToDouble( a.force ) >= 20 ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='warning'>With one strong swing, " ).item( b ).str( " destroys the rotting " ).item( this ).str( " with " ).the( a ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>With one strong swing, the rotting " ).item( this ).str( " crumbles away under " ).the( a ).item().str( ".</span>" ).ToString() );
					this.dismantle_wall( true );
					pdiff = GlobalFuncs.performWallPressureCheck( this.loc );

					if ( pdiff != 0 ) {
						GlobalFuncs.message_admins( "" + b.real_name + " (" + GlobalFuncs.formatPlayerPanel( b, b.ckey ) + ") broke a rotting wall with a pdiff of " + pdiff + " at " + GlobalFuncs.formatJumpTo( this.loc ) + "!" );
					}
					return null;
				}
			}

			if ( this.thermite && this.can_thermite ) {
				
				if ( Lang13.Bool( ((Obj)a).is_hot() ) ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " applies " ).the( a ).item().str( " to the thermite coating " ).the( this ).item().str( " and waits</span>" ).ToString(), new Txt( "<span class='warning'>You apply " ).the( a ).item().str( " to the thermite coating " ).the( this ).item().str( " and wait</span>" ).ToString() );

					if ( GlobalFuncs.do_after( b, this, 100 ) && Lang13.Bool( ((Obj)a).is_hot() ) ) {
						this.thermitemelt( b );
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " sets " ).the( this ).item().str( " ablaze with " ).the( a ).item().str( "</span>" ).ToString(), new Txt( "<span class='warning'>You set " ).the( this ).item().str( " ablaze with " ).the( a ).item().str( "</span>" ).ToString() );
						return null;
					}
				}
			}

			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, b ) ) {
					
					if ( Lang13.Bool( this.engraving ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You deform the wall back into its original shape" );
						this.engraving = null;
						this.engraving_quality = null;
						GlobalFuncs.playsound( this, "sound/items/welder.ogg", 100, 1 );
						this.overlays.Cut();
						return null;
					}
					((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " begins slicing through " ).the( this ).item().str( "'s outer plating.</span>" ).ToString(), new Txt( "<span class='notice'>You begin slicing through " ).the( this ).item().str( "'s outer plating.</span>" ).ToString(), "<span class='warning'>You hear welding noises.</span>" );
					GlobalFuncs.playsound( this, "sound/items/welder.ogg", 100, 1 );

					if ( GlobalFuncs.do_after( b, this, 100 ) ) {
						
						if ( !( this is Tile_Simulated_Wall ) ) {
							return null;
						}
						GlobalFuncs.playsound( this, "sound/items/welder.ogg", 100, 1 );
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " slices through " ).the( this ).item().str( "'s outer plating.</span>" ).ToString(), new Txt( "<span class='notice'>You slice through " ).the( this ).item().str( "'s outer plating.</span>" ).ToString(), "<span class='warning'>You hear welding noises.</span>" );
						pdiff2 = GlobalFuncs.performWallPressureCheck( this.loc );

						if ( pdiff2 != 0 ) {
							GlobalFuncs.message_admins( "" + b.real_name + " (" + GlobalFuncs.formatPlayerPanel( b, b.ckey ) + ") dismanted a wall with a pdiff of " + pdiff2 + " at " + GlobalFuncs.formatJumpTo( this.loc ) + "!" );
							GlobalFuncs.log_admin( "" + b.real_name + " (" + b.ckey + ") dismanted a wall with a pdiff of " + pdiff2 + " at " + this.loc + "!" );
						}
						this.dismantle_wall();
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>You need more welding fuel to complete this task.</span>" );
					return null;
				}
			} else if ( a is Obj_Item_Weapon_Pickaxe ) {
				PK = a;

				if ( !( ( PK.diggables & 4 ) != 0 ) ) {
					return null;
				}

				if ( this.mineral == "diamond" ) {
					return null;
				}
				((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " begins " ).item( PK.drill_verb ).str( " straight into " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You begin " ).item( PK.drill_verb ).str( " straight into " ).the( this ).item().str( ".</span>" ).ToString() );
				GlobalFuncs.playsound( this, PK.drill_sound, 100, 1 );

				if ( GlobalFuncs.do_after( b, this, ( PK.digspeed ??0) * 10 ) ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( "'s " ).item( PK ).str( " tears though the last of " ).the( this ).item().str( ", leaving nothing but a girder.</span>" ).ToString(), new Txt( "<span class='notice'>Your " ).item( PK ).str( " tears though the last of " ).the( this ).item().str( ", leaving nothing but a girder.</span>" ).ToString() );
					this.dismantle_wall();
					pdiff3 = GlobalFuncs.performWallPressureCheck( this.loc );

					if ( pdiff3 != 0 ) {
						GlobalFuncs.message_admins( "" + b.real_name + " (" + GlobalFuncs.formatPlayerPanel( b, b.ckey ) + ") dismantled with a pdiff of " + pdiff3 + " at " + GlobalFuncs.formatJumpTo( this.loc ) + "!" );
						GlobalFuncs.log_admin( "" + b.real_name + " (" + b.ckey + ") dismantled with a pdiff of " + pdiff3 + " at " + this.loc + "!" );
					}
				}
				return null;
			} else if ( a is Obj_Item_Mounted ) {
				return null;
			} else {
				return this.attack_hand( b );
			}
			return null;
		}

		// Function from file: walls.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			((Mob)a).delayNextAttack( 8 );

			if ( Lang13.Bool( a.mutations.Contains( 4 ) ) ) {
				
				if ( Rand13.PercentChance( 100 - this.hardness ) || this.rotting ) {
					this.dismantle_wall( true );
					((Ent_Static)a).visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " smashes through " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You smash through " ).the( this ).item().str( ".</span>" ).ToString() );
					Task13.User.say( Rand13.Pick(new object [] { ";RAAAAAAAARGH!", ";HNNNNNNNNNGGGGGGH!", ";GWAAAAAAAARRRHHH!", "NNNNNNNNGGGGGGGGHH!", ";AAAAAAARRRGH!" }) );
					return null;
				} else {
					((Ent_Static)a).visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " punches " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You punch " ).the( this ).item().str( ".</span>" ).ToString() );
					return null;
				}
			}

			if ( this.rotting ) {
				this.attack_rotting( a ); return null;
			}
			((Ent_Static)a).visible_message( new Txt( "<span class='notice'>" ).item( a ).str( " pushes " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You push " ).the( this ).item().str( " but nothing happens!</span>" ).ToString() );
			GlobalFuncs.playsound( this, "sound/weapons/Genhit.ogg", 25, 1 );
			this.add_fingerprint( a );
			return base.attack_hand( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: walls.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: walls.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			user.delayNextAttack( 8 );

			if ( Convert.ToDouble( ((dynamic)user).environment_smash ) >= 2 ) {
				
				if ( this is Tile_Simulated_Wall_RWall ) {
					
					if ( Convert.ToInt32( ((dynamic)user).environment_smash ) == 3 ) {
						this.dismantle_wall( true );
						user.visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " smashes through " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='attack'>You smash through " ).the( this ).item().str( ".</span>" ).ToString() );
					} else {
						GlobalFuncs.to_chat( user, "<span class='info'>This " + this + " is far too strong for you to destroy.</span>" );
					}
				} else {
					this.dismantle_wall( true );
					user.visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " smashes through " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='attack'>You smash through " ).the( this ).item().str( ".</span>" ).ToString() );
					return null;
				}
			}
			return null;
		}

		// Function from file: walls.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 50 ) || this.rotting ) {
				this.dismantle_wall();
			}
			return false;
		}

		// Function from file: walls.dm
		public override bool mech_drill_act( double? severity = null, dynamic child = null ) {
			this.dismantle_wall(); return false;
		}

		// Function from file: walls.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			if ( this.rotting ) {
				severity = 1;
			}

			switch ((int?)( severity )) {
				case 1:
					this.ChangeTurf( GlobalFuncs.get_base_turf( this.z ) );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.dismantle_wall( false, true );
					} else {
						this.dismantle_wall( true, true );
					}
					return false;
					break;
				case 3:
					
					if ( Rand13.PercentChance( 40 ) ) {
						this.dismantle_wall( false, true );
					}
					return false;
					break;
			}
			return false;
		}

		// Function from file: walls.dm
		public override void dismantle_wall( bool? devastated = null, bool? explode = null ) {
			devastated = devastated ?? false;
			explode = explode ?? false;

			Type M = null;
			Obj O = null;
			Obj P = null;

			
			if ( this.mineral == "metal" ) {
				GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), this, 2 );
			} else if ( this.mineral == "wood" ) {
				GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Wood), this, 2 );
			} else {
				M = Lang13.FindClass( "/obj/item/stack/sheet/mineral/" + this.mineral );

				if ( M != null ) {
					GlobalFuncs.getFromPool( M, this, 2 );
				}
			}

			if ( devastated == true ) {
				GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), this );
			} else {
				Lang13.Call( this.girder_type, this );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
				O = _a;
				

				if ( O is Obj_Structure_Sign_Poster ) {
					P = O;
					((Obj_Structure_Sign_Poster)P).roll_and_drop( this );
				}
			}
			this.ChangeTurf( this.dismantle_type );
			return;
		}

		// Function from file: walls.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.rotting ) {
				GlobalFuncs.to_chat( user, "It is covered in wallrot and looks weakened" );
			}

			if ( this.thermite ) {
				GlobalFuncs.to_chat( user, "<span class='danger'>It's doused in thermite!</span>" );
			}

			if ( Lang13.Bool( this.engraving ) ) {
				GlobalFuncs.to_chat( user, this.engraving );
			}
			return null;
		}

		// Function from file: walls.dm
		public void thermitemelt( dynamic user = null ) {
			Obj_Effect_Overlay O = null;
			bool cultwall = false;
			Tile_Simulated F = null;
			double pdiff = 0;

			
			if ( this.mineral == "diamond" ) {
				return;
			}
			O = new Obj_Effect_Overlay( this );
			O.name = "thermite";
			O.desc = "Nothing is going to stop it from burning now.";
			O.icon = "icons/effects/fire.dmi";
			O.icon_state = "2";
			O.anchored = 1;
			O.density = true;
			O.layer = 5;
			cultwall = false;

			if ( this is Tile_Simulated_Wall_Cult ) {
				cultwall = true;
			}

			if ( cultwall ) {
				this.ChangeTurf( typeof(Tile_Simulated_Floor_Engine_Cult) );
			} else {
				this.ChangeTurf( typeof(Tile_Simulated_Floor_Plating) );
			}
			F = this;

			if ( !( F != null ) ) {
				
				if ( O != null ) {
					GlobalFuncs.message_admins( "" + user.real_name + " (" + GlobalFuncs.formatPlayerPanel( user, user.ckey ) + ") thermited a wall into space at " + GlobalFuncs.formatJumpTo( this.loc ) + "!" );
					this.visible_message( new Txt( "<span class='danger'>The thermite melts right through " ).the( this ).item().str( " and the underlying plating, leaving a gaping hole into deep space.</span>" ).ToString() );
					GlobalFuncs.qdel( O );
				}
				return;
			}
			((Tile_Simulated_Floor)F).burn_tile();
			F.icon_state = "" + ( cultwall ? "cultwall_thermite" : "wall_thermite" );
			pdiff = GlobalFuncs.performWallPressureCheck( this.loc );

			if ( pdiff != 0 ) {
				GlobalFuncs.message_admins( "" + user.real_name + " (" + GlobalFuncs.formatPlayerPanel( user, user.ckey ) + ") thermited a wall with a pdiff of " + pdiff + " at " + GlobalFuncs.formatJumpTo( this.loc ) + "!" );
			}
			this.hotspot_expose( 3000, 125, null, true );
			Task13.Schedule( 100, (Task13.Closure)(() => {
				
				if ( O != null ) {
					this.visible_message( new Txt( "<span class='danger'>" ).The( O ).item().str( " melts right through " ).the( this ).item().str( ".</span>" ).ToString() );
					GlobalFuncs.qdel( O );
				}
				return;
			}));
			return;
		}

		// Function from file: walls.dm
		public void rot(  ) {
			int? number_rots = null;
			int? i = null;
			Obj_Effect_Overlay O = null;

			
			if ( this.rotting ) {
				return;
			} else {
				this.rotting = true;
				number_rots = Rand13.Int( 2, 3 );
				i = null;
				i = 0;

				while (( i ??0) < ( number_rots ??0)) {
					O = new Obj_Effect_Overlay( this );
					O.name = "Wallrot";
					O.desc = "Ick...";
					O.icon = "icons/effects/wallrot.dmi";
					O.pixel_x += Rand13.Int( -10, 10 );
					O.pixel_y += Rand13.Int( -10, 10 );
					O.anchored = 1;
					O.density = true;
					O.layer = 5;
					O.mouse_opacity = 0;
					i++;
				}
			}
			return;
		}

		// Function from file: walls.dm
		public void attack_rotting( dynamic user = null ) {
			
			if ( this is Tile_Simulated_Wall_RWall ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>This " + this + " feels rather unstable.</span>" );
				return;
			} else {
				((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " crumbles under " ).item( user ).str( "'s touch.</span>" ).ToString(), new Txt( "<span class='notice'>" ).The( this ).item().str( " crumbles under your touch.</span>" ).ToString() );
				this.dismantle_wall();
				return;
			}
		}

		// Function from file: checkForMultipleDoors.dm
		public bool checkForMultipleDoors(  ) {
			Obj_Machinery_Door D = null;

			
			if ( !( this.loc != null ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.GetTile( this.x, this.y, this.z ), typeof(Obj_Machinery_Door) )) {
				D = _a;
				

				if ( !( D is Obj_Machinery_Door_Window ) && D.density ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: smoothwall.dm
		public override void relativewall(  ) {
			int junction = 0;

			junction = this.findSmoothingNeighbors();
			this.icon_state = "" + this.walltype + junction;
			return;
		}

		// Function from file: smoothwall.dm
		public override bool isSmoothableNeighbor( Ent_Static A = null ) {
			
			if ( !( A != null ) ) {
				Game13.log.WriteMsg( "##WARNING: " + ( "" + "code/game/smoothwall.dm" + "L" + 33 + ": turf/isSmoothableNeighbor given bad atom" ) + " in " + "code/game/smoothwall.dm" + " at line " + 33 + " src: " + this + " usr: " + Task13.User + "." );
				return false;
			}

			if ( GlobalFuncs.isInTypes( A, this.canSmoothWith ) ) {
				
				if ( this.mineral == ((dynamic)A).mineral ) {
					return true;
				}
			}
			return false;
		}

	}

}