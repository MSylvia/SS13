// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Floor_Carpet : Tile_Simulated_Floor {

		public bool has_siding = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "carpet";
		}

		// Function from file: floor_types.dm
		public Tile_Simulated_Floor_Carpet ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic direction = null;
			Tile FF = null;

			
			if ( this.floor_tile != null ) {
				GlobalFuncs.returnToPool( this.floor_tile );
				this.floor_tile = null;
			}
			this.floor_tile = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Tile_Carpet), null );
			((dynamic)this.floor_tile).New();

			if ( !Lang13.Bool( this.icon_state ) ) {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.has_siding ) {
				Task13.Schedule( 4, (Task13.Closure)(() => {
					
					if ( this != null ) {
						this.update_icon();

						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.alldirs )) {
							direction = _a;
							

							if ( Map13.GetStep( this, Convert.ToInt32( direction ) ) is Tile_Simulated_Floor ) {
								FF = Map13.GetStep( this, Convert.ToInt32( direction ) );
								FF.update_icon();
							}
						}
					}
					return;
				}));
			}
			return;
		}

		// Function from file: floor_types.dm
		public override void cultify(  ) {
			return;
		}

	}

}