// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Wall_Mineral_Plasma : Tile_Simulated_Wall_Mineral {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.walltype = "plasma";
			this.mineral = "plasma";
			this.icon_state = "plasma0";
		}

		public Tile_Simulated_Wall_Mineral_Plasma ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: walls_mineral.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Proj is Obj_Item_Projectile_Beam ) {
				this.PlasmaBurn( 2500 );
			} else if ( Proj is Obj_Item_Projectile_Ion ) {
				this.PlasmaBurn( 500 );
			}
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return null;
		}

		// Function from file: walls_mineral.dm
		public override void ignite( double? temperature = null ) {
			
			if ( ( temperature ??0) > 300 ) {
				this.PlasmaBurn( temperature );
			}
			return;
		}

		// Function from file: walls_mineral.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( ( exposed_temperature ??0) > 300 ) {
				this.PlasmaBurn( exposed_temperature );
			}
			return false;
		}

		// Function from file: walls_mineral.dm
		public void PlasmaBurn( double? temperature = null ) {
			double pdiff = 0;
			Tile_Simulated_Floor target_tile = null;
			GasMixture napalm = null;
			int toxinsToDeduce = 0;
			Obj_Structure_Falsewall_Plasma F = null;
			dynamic T = null;
			Tile_Simulated_Wall_Mineral_Plasma W = null;
			Obj_Machinery_Door_Airlock_Plasma D = null;

			pdiff = GlobalFuncs.performWallPressureCheck( this.loc );

			if ( pdiff > 0 ) {
				GlobalFuncs.message_admins( "Plasma wall with pdiff " + pdiff + " at " + GlobalFuncs.formatJumpTo( this.loc ) + " just caught fire!" );
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				new Obj_Structure_Girder( this );
				return;
			}));
			this.ChangeTurf( typeof(Tile_Simulated_Floor) );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 0 ), typeof(Tile_Simulated_Floor) )) {
				target_tile = _a;
				
				napalm = new GasMixture();
				toxinsToDeduce = 20;
				napalm.toxins = toxinsToDeduce;
				napalm.temperature = 673.1500244140625;
				target_tile.assume_air( napalm );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					target_tile.hotspot_expose( temperature, 400, null, true );
					return;
				}));
			}

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this, 3 ), typeof(Obj_Structure_Falsewall_Plasma) )) {
				F = _b;
				
				T = GlobalFuncs.get_turf( F );
				((Tile)T).ChangeTurf( typeof(Tile_Simulated_Wall_Mineral_Plasma) );
				GlobalFuncs.qdel( F );
				F = null;
			}

			foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInRange( this, 3 ), typeof(Tile_Simulated_Wall_Mineral_Plasma) )) {
				W = _c;
				
				W.ignite( ( temperature ??0) / 4 );
			}

			foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInRange( this, 3 ), typeof(Obj_Machinery_Door_Airlock_Plasma) )) {
				D = _d;
				
				D.ignite( ( temperature ??0) / 4 );
			}
			return;
		}

		// Function from file: walls_mineral.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( ( ((Obj)a).is_hot() ??0) > 300 ) {
				this.ignite( ((Obj)a).is_hot() );
				return null;
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

	}

}