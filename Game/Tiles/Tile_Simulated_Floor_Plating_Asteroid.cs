// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Simulated_Floor_Plating_Asteroid : Tile_Simulated_Floor_Plating {

		public string environment_type = "asteroid";
		public Type turf_type = typeof(Tile_Simulated_Floor_Plating_Asteroid);
		public bool dug = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.baseturf = typeof(Tile_Simulated_Floor_Plating_Asteroid);
			this.icon_plating = "asteroid";
			this.icon_state = "asteroid";
		}

		// Function from file: mine_turfs.dm
		public Tile_Simulated_Floor_Plating_Asteroid ( dynamic loc = null ) : base( (object)(loc) ) {
			string proper_name = null;

			proper_name = this.name;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.name = proper_name;

			if ( Rand13.PercentChance( 20 ) ) {
				this.icon_state = "" + this.environment_type + Rand13.Int( 0, 12 );
			}
			return;
		}

		// Function from file: mine_turfs.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			return;
		}

		// Function from file: mine_turfs.dm
		public override double singularity_act( int? current_size = null, Obj_Singularity S = null ) {
			return 0;
		}

		// Function from file: mine_turfs.dm
		public void gets_dug(  ) {
			
			if ( this.dug ) {
				return;
			}
			new Obj_Item_Weapon_Ore_Glass( this );
			new Obj_Item_Weapon_Ore_Glass( this );
			new Obj_Item_Weapon_Ore_Glass( this );
			new Obj_Item_Weapon_Ore_Glass( this );
			new Obj_Item_Weapon_Ore_Glass( this );
			this.dug = true;
			this.icon_plating = "" + this.environment_type + "_dug";
			this.icon_state = "" + this.environment_type + "_dug";
			this.slowdown = 0;
			return;
		}

		// Function from file: mine_turfs.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			double digging_speed = 0;
			dynamic S = null;
			dynamic P = null;
			Ent_Static T = null;
			dynamic S2 = null;
			Obj_Item_Weapon_Ore O = null;
			dynamic Z = null;
			dynamic T2 = null;
			dynamic L = null;
			dynamic F = null;

			
			if ( !Lang13.Bool( A ) || !Lang13.Bool( user ) ) {
				return 0;
			}
			digging_speed = 0;

			if ( A is Obj_Item_Weapon_Shovel ) {
				S = A;
				digging_speed = Convert.ToDouble( S.digspeed );
			} else if ( A is Obj_Item_Weapon_Pickaxe ) {
				P = A;
				digging_speed = Convert.ToDouble( P.digspeed );
			}

			if ( digging_speed != 0 ) {
				T = user.loc;

				if ( !( T is Tile ) ) {
					return null;
				}

				if ( this.dug ) {
					user.WriteMsg( "<span class='warning'>This area has already been dug!</span>" );
					return null;
				}
				user.WriteMsg( "<span class='notice'>You start digging...</span>" );
				GlobalFuncs.playsound( this, "sound/effects/shovel_dig.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, digging_speed, null, this ) ) {
					
					if ( this is Tile_Simulated_Floor_Plating_Asteroid ) {
						user.WriteMsg( "<span class='notice'>You dig a hole.</span>" );
						this.gets_dug();
						GlobalFuncs.feedback_add_details( "pick_used_mining", "" + A.type );
					}
				}
			}

			if ( A is Obj_Item_Weapon_Storage_Bag_Ore ) {
				S2 = A;

				if ( S2.collection_mode == 1 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Ore) )) {
						O = _a;
						
						O.attackby( A, user );
						return null;
					}
				}
			}

			if ( A is Obj_Item_Stack_Tile ) {
				Z = A;

				if ( !( ((Obj_Item_Stack)Z).use( 1 ) != 0 ) ) {
					return null;
				}
				T2 = this.ChangeTurf( Z.turf_type );

				if ( Z is Obj_Item_Stack_Tile_Light ) {
					L = Z;
					F = T2;
					F.state = L.state;
				}
				GlobalFuncs.playsound( this, "sound/weapons/genhit.ogg", 50, 1 );
			}
			return null;
		}

		// Function from file: mine_turfs.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			this.contents_explosion( severity, target );

			switch ((int?)( severity )) {
				case 3:
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 20 ) ) {
						this.gets_dug();
					}
					break;
				case 1:
					this.gets_dug();
					break;
			}
			return false;
		}

		// Function from file: mine_turfs.dm
		public override void burn_tile(  ) {
			return;
		}

	}

}