// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Tile_Unsimulated_Wall : Tile_Unsimulated {

		public string walltype = "riveted";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.explosion_block = 2;
			this.canSmoothWith = "/turf/unsimulated/wall=0";
			this.icon = "icons/turf/walls.dmi";
			this.icon_state = "riveted";
		}

		// Function from file: smoothwall.dm
		public Tile_Unsimulated_Wall ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.smoothable_unsims.Contains( this.icon_state ) ) {
				this.relativewall();
				this.relativewall_neighbours();
			}
			return;
		}

		// Function from file: bomberman.dm
		public override bool singuloCanEat(  ) {
			return false;
		}

		// Function from file: walls.dm
		public override void cultify(  ) {
			this.ChangeTurf( typeof(Tile_Unsimulated_Wall_Cult) );
			this.turf_animation( "icons/effects/effects.dmi", "cultwall", 0, 0, 3 );
			return;
		}

		// Function from file: bomberman.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: walls.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic S = null;

			((Mob)b).delayNextAttack( 8 );

			if ( !Lang13.Bool( b.dexterity_check() ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return null;
			}

			if ( a is Obj_Item_Weapon_Solder && this.bullet_marks ) {
				S = a;

				if ( !Lang13.Bool( S.remove_fuel( ( this.bullet_marks ?1:0) * 2, b ) ) ) {
					return null;
				}
				GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 100, 1 );
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You remove the bullet marks with " ).the( a ).item().str( ".</span>" ).ToString() );
				this.bullet_marks = false;
				this.icon = Lang13.Initial( this, "icon" );
			}
			return null;
		}

		// Function from file: smoothwall.dm
		public override void relativewall(  ) {
			int junction = 0;

			junction = this.findSmoothingNeighbors();
			this.icon_state = "" + this.walltype + junction;
			return;
		}

	}

}