// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Zone_Holodeck : Zone {

		public dynamic linked = null;
		public bool restricted = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 1;
			this.lighting_use_dynamic = 0;
			this.icon_state = "Holodeck";
		}

		public Zone_Holodeck ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: areas.dm
		public override dynamic use_power( dynamic amount = null, dynamic chan = null ) {
			dynamic A = null;

			
			if ( !Lang13.Bool( this.linked ) ) {
				return 0;
			}
			A = GlobalFuncs.get_area( this.linked );

			if ( !( !( A is Zone_Holodeck ) ) ) {
				Task13.Crash( "" + "code/modules/holodeck/areas.dm" + ":" + 44 + ":Assertion Failed: " + "!istype(A,/area/holodeck)" );
			}
			return A.use_power( amount, chan );
		}

		// Function from file: areas.dm
		public override dynamic addStaticPower( dynamic value = null, dynamic powerchannel = null ) {
			dynamic A = null;

			
			if ( !Lang13.Bool( this.linked ) ) {
				return null;
			}
			A = GlobalFuncs.get_area( this.linked );

			if ( !( !( A is Zone_Holodeck ) ) ) {
				Task13.Crash( "" + "code/modules/holodeck/areas.dm" + ":" + 37 + ":Assertion Failed: " + "!istype(A,/area/holodeck)" );
			}
			return A.addStaticPower( value, powerchannel );
		}

		// Function from file: areas.dm
		public override dynamic usage( int chan = 0 ) {
			dynamic A = null;

			
			if ( !Lang13.Bool( this.linked ) ) {
				return 0;
			}
			A = GlobalFuncs.get_area( this.linked );

			if ( !( !( A is Zone_Holodeck ) ) ) {
				Task13.Crash( "" + "code/modules/holodeck/areas.dm" + ":" + 30 + ":Assertion Failed: " + "!istype(A,/area/holodeck)" );
			}
			return ((Zone)A).usage( chan );
		}

		// Function from file: areas.dm
		public override dynamic powered( dynamic chan = null ) {
			dynamic A = null;

			
			if ( !this.master.requires_power ) {
				return 1;
			}

			if ( this.master.always_unpowered ) {
				return 0;
			}

			if ( !Lang13.Bool( this.linked ) ) {
				return 0;
			}
			A = GlobalFuncs.get_area( this.linked );

			if ( !( !( A is Zone_Holodeck ) ) ) {
				Task13.Crash( "" + "code/modules/holodeck/areas.dm" + ":" + 23 + ":Assertion Failed: " + "!istype(A,/area/holodeck)" );
			}
			return A.powered( chan );
		}

	}

}