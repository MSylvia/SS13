// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Jukebox : Wires {

		public bool interference = false;
		public int last = 0;
		public ByTable freq_config_data = new ByTable(new object [] { 0, 0, 0, 0 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Media_Jukebox);
			this.wire_count = 8;
		}

		// Function from file: jukebox.dm
		public Wires_Jukebox ( Obj_Machinery_Media_Jukebox holder = null ) : base( holder ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.last = Rand13.Int( 1, 14 );
			this.freq_config_data[GlobalVars.JUKE_POWER_ONE] = Rand13.Int( 1, 14 );
			this.freq_config_data[GlobalVars.JUKE_POWER_TWO] = Rand13.Int( 1, 14 );
			this.freq_config_data[GlobalVars.JUKE_POWER_THREE] = Rand13.Int( 1, 14 );
			return;
		}

		// Function from file: jukebox.dm
		public override void UpdateCut( double? index = null, bool mended = false ) {
			Ent_Static J = null;
			dynamic e = null;

			J = this.holder;

			switch ((int?)(index)) {
				case 1:
				case 2:
				case 4:
					((dynamic)J).power_change();
					((dynamic)J).shock( Task13.User, 50 );

					if ( Lang13.Bool( this.freq_config_data[index] ) == false ) {
						this.freq_config_data[index] = 14;
					} else {
						this.freq_config_data[index] -= 1;
					}
					break;
				case 8:
					
					if ( this.IsIndexCut( GlobalVars.JUKE_SHUFFLE ) != 0 ) {
						((dynamic)J).allowed_modes = new ByTable().Set( 2, "Single" ).Set( 3, "Once" );
						((dynamic)J).loop_mode = 3;
					} else {
						((dynamic)J).allowed_modes = GlobalVars.loopModeNames.Copy();
					}
					break;
				case 32:
					((dynamic)J).shock( Task13.User, 50 );

					if ( this.IsIndexCut( GlobalVars.JUKE_TRANSMIT ) != 0 ) {
						((dynamic)J).machine_flags &= 0;
					} else {
						((dynamic)J).machine_flags |= 128;
					}
					break;
				case 64:
					
					foreach (dynamic _a in Lang13.Enumerate( this.freq_config_data )) {
						e = _a;
						

						if ( e != 0 ) {
							return;
						}
					}
					((dynamic)J).v_short();
					break;
				case 128:
					((dynamic)J).shock( Task13.User, 50 );
					break;
			}
			return;
		}

		// Function from file: jukebox.dm
		public override void UpdatePulsed( double? index = null ) {
			Obj J = null;
			dynamic calc = null;

			
			if ( this.interference ) {
				return;
			}
			J = this.holder;

			switch ((int?)(index)) {
				case 1:
				case 2:
				case 4:
					((dynamic)J).playing = !Lang13.Bool( ((dynamic)J).playing );
					((dynamic)J).update_music();
					J.update_icon();
					calc = this.freq_config_data[index] - this.last;
					J.visible_message( "" + J + " hums and outputs: " + calc );
					this.last = Convert.ToInt32( this.freq_config_data[index] );
					break;
				case 8:
					((dynamic)J).current_song = Rand13.Int( 1, ((dynamic)J).playlist.len );
					break;
				case 16:
					((dynamic)J).change_cost = Rand13.Int( 0, 20 );
					break;
				case 32:
					((dynamic)J).rad_pulse();
					this.interference = true;
					Task13.Sleep( 50 );
					this.interference = false;
					break;
				case 64:
					GlobalFuncs.playsound( J.loc, "sound/effects/IAMERROR.ogg", 100, 1 );
					break;
				case 128:
					((dynamic)J).access_unlocked = !Lang13.Bool( ((dynamic)J).access_unlocked );
					break;
			}
			return;
		}

		// Function from file: jukebox.dm
		public override string GetInteractWindow(  ) {
			string _default = null;

			Ent_Static J = null;

			J = this.holder;
			_default += base.GetInteractWindow();
			_default += "<BR>The decorative tube with bubbles is " + ( !Lang13.Bool( ((dynamic)J).any_power_cut() ) ? "glowing" : "dim" ) + ".<BR>\n	The green slider bar is " + ( !( this.IsIndexCut( GlobalVars.JUKE_TRANSMIT ) != 0 ) ? "modulating around full" : "empty" ) + ".<BR>\n	The maintenance button is " + ( Lang13.Bool( ((dynamic)J).access_unlocked ) ? "lit" : "off" ) + ".<BR>\n	An unlabelled light is " + ( Lang13.Bool( ((dynamic)J).emagged ) ? "dark" : "blinking occasionally" ) + ".<BR>";
			return _default;
		}

		// Function from file: jukebox.dm
		public override bool CanUse( dynamic L = null ) {
			Ent_Static J = null;

			J = this.holder;

			if ( Lang13.Bool( ((dynamic)J).panel_open ) ) {
				return true;
			}
			return false;
		}

	}

}