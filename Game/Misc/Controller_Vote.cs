// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_Vote : Controller {

		public string initiator = null;
		public int? started_time = null;
		public int time_remaining = 0;
		public string mode = null;
		public string question = null;
		public dynamic choices = new ByTable();
		public ByTable voted = new ByTable();
		public ByTable voting = new ByTable();
		public ByTable current_votes = new ByTable();
		public ByTable ismapvote = null;
		public string chosen_map = null;
		public string name = "datum";
		public HtmlInterface_Nanotrasen_Vote v_interface = null;
		public ByTable data = null;
		public ByTable status_data = null;
		public int last_update = 0;
		public bool initialized = false;
		public bool lastupdate = false;
		public double total_votes = 0;
		public bool? weighted = false;

		// Function from file: voting.dm
		public Controller_Vote (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.data = new ByTable();
			this.status_data = new ByTable();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				if ( !( this.v_interface != null ) ) {
					this.v_interface = new HtmlInterface_Nanotrasen_Vote( this, "Voting Panel", 400, 400, "<script type=\"text/javascript\" src=\"3-jquery.timers.js\"></script><script type=\"text/javascript\" src=\"libraries.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"html_interface_icons.css\" /><link rel=\"stylesheet\" type=\"text/css\" href=\"voting.css\" /><script type=\"text/javascript\" src=\"voting.js\"></script>" );
					this.v_interface.updateContent( "content", "<div id='vote_main'></div><div id='vote_choices'></div><div id='vote_admin'></div>" );
				}
				this.initialized = true;
				return;
			}));

			if ( GlobalVars.vote != this ) {
				
				if ( GlobalVars.vote is Controller_Vote ) {
					GlobalFuncs.qdel( GlobalVars.vote );
				}
				GlobalVars.vote = this;
			}
			return;
		}

		// Function from file: voting.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( !( Task13.User != null ) || !( Task13.User.client != null ) ) {
				return null;
			}

			dynamic _a = href_list["vote"]; // Was a switch-case, sorry for the mess.
			if ( _a=="cancel" ) {
				
				if ( Task13.User.client.holder != null ) {
					this.reset();
					this.update();
				}
			} else if ( _a=="toggle_restart" ) {
				
				if ( Task13.User.client.holder != null ) {
					GlobalVars.config.allow_vote_restart = !GlobalVars.config.allow_vote_restart;
					this.update();
				}
			} else if ( _a=="toggle_gamemode" ) {
				
				if ( Task13.User.client.holder != null ) {
					GlobalVars.config.allow_vote_mode = !GlobalVars.config.allow_vote_mode;
					this.update();
				}
			} else if ( _a=="restart" ) {
				
				if ( GlobalVars.config.allow_vote_restart || Task13.User.client.holder != null ) {
					this.initiate_vote( "restart", Task13.User.key );
				}
			} else if ( _a=="gamemode" ) {
				
				if ( GlobalVars.config.allow_vote_mode || Task13.User.client.holder != null ) {
					this.initiate_vote( "gamemode", Task13.User.key );
				}
			} else if ( _a=="crew_transfer" ) {
				
				if ( GlobalVars.config.allow_vote_restart || Task13.User.client.holder != null ) {
					this.initiate_vote( "crew_transfer", Task13.User.key );
				}
			} else if ( _a=="custom" ) {
				
				if ( Task13.User.client.holder != null ) {
					this.initiate_vote( "custom", Task13.User.key );
				}
			} else {
				this.submit_vote( Task13.User.ckey, Num13.Floor( String13.ParseNumber( href_list["vote"] ) ??0 ) );
			}
			Task13.User.vote();
			return null;
		}

		// Function from file: voting.dm
		public void update( bool? refresh = null ) {
			refresh = refresh ?? false;

			ByTable choices_list = null;
			int? i = null;

			
			if ( !( this.v_interface != null ) ) {
				this.v_interface = new HtmlInterface_Nanotrasen_Vote( this, "Voting Panel", 400, 400, "<script type=\"text/javascript\" src=\"3-jquery.timers.js\"></script><script type=\"text/javascript\" src=\"libraries.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"html_interface_icons.css\" /><link rel=\"stylesheet\" type=\"text/css\" href=\"voting.css\" /><script type=\"text/javascript\" src=\"voting.js\"></script>" );
				this.v_interface.updateContent( "content", "<div id='vote_main'></div><div id='vote_choices'></div><div id='vote_admin'></div>" );
			}

			if ( Game13.time < this.last_update + 2 ) {
				return;
			}
			this.last_update = Game13.time;
			this.status_data.len = 0;
			this.status_data[++this.status_data.len] = this.mode;
			this.status_data[++this.status_data.len] = this.question;
			this.status_data[++this.status_data.len] = this.time_remaining;

			if ( GlobalVars.config.allow_vote_restart ) {
				this.status_data[++this.status_data.len] = 1;
			} else {
				this.status_data[++this.status_data.len] = 0;
			}

			if ( GlobalVars.config.allow_vote_mode ) {
				this.status_data[++this.status_data.len] = 1;
			} else {
				this.status_data[++this.status_data.len] = 0;
			}
			choices_list = new ByTable();

			if ( Lang13.Bool( this.mode ) ) {
				i = null;
				i = 1;

				while (( i ??0) <= this.choices.len) {
					choices_list[++choices_list.len] = new ByTable(new object [] { i, this.choices[i], ( !( this.choices[this.choices[i]] == null ) ? Lang13.Bool( this.choices[this.choices[i]] ) : false ) });
					i++;
				}
			}
			this.data = choices_list;

			if ( refresh == true && this.v_interface != null ) {
				this.updateFor();
			}
			return;
		}

		// Function from file: voting.dm
		public void interact( dynamic user = null ) {
			ByTable client_data = null;
			int admin = 0;
			bool currvote = false;

			
			if ( !Lang13.Bool( user ) || !this.initialized ) {
				return;
			}

			if ( user is Mob ) {
				user = user.client;
			}
			this.voting.Or( user );
			this.v_interface.show( user );
			client_data = new ByTable();
			admin = 0;
			currvote = false;

			if ( Lang13.Bool( this.current_votes[user.ckey] ) ) {
				currvote = Lang13.Bool( this.current_votes[user.ckey] );
			}
			client_data[++client_data.len] = currvote;

			if ( Lang13.Bool( user.holder ) ) {
				admin = 1;

				if ( Lang13.Bool( user.holder.rights & 2 ) ) {
					admin = 2;
				}
			}
			client_data[++client_data.len] = admin;
			this.v_interface.callJavaScript( "client_data", client_data, user );
			this.updateFor( user );
			return;
		}

		// Function from file: voting.dm
		public void updateFor( dynamic hclient_or_mob = null ) {
			ByTable L = null;

			this.v_interface.callJavaScript( "clearAll", new ByTable(), hclient_or_mob );
			this.v_interface.callJavaScript( "update_mode", this.status_data, hclient_or_mob );

			if ( this.data.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.data, typeof(ByTable) )) {
					L = _a;
					
					this.v_interface.callJavaScript( "update_choices", L, hclient_or_mob );
				}
			}
			return;
		}

		// Function from file: voting.dm
		public bool initiate_vote( string vote_type = null, string initiator_key = null, bool? popup = null, bool? weighted_vote = null ) {
			popup = popup ?? false;
			weighted_vote = weighted_vote ?? false;

			double next_allowed_time = 0;
			int? i = null;
			string option = null;
			ByTable maps = null;
			dynamic key = null;
			string text = null;
			dynamic C = null;

			
			if ( !Lang13.Bool( this.mode ) ) {
				
				if ( this.started_time != null && !GlobalFuncs.check_rights( 2 ) ) {
					next_allowed_time = ( this.started_time ??0) + ( GlobalVars.config.vote_delay ??0);

					if ( next_allowed_time > Game13.time ) {
						return false;
					}
				}
				this.reset();

				switch ((string)( vote_type )) {
					case "restart":
						this.choices.Add( "Restart Round", "Continue Playing" );
						this.question = "Restart the round?";
						break;
					case "gamemode":
						
						if ( GlobalVars.ticker.current_state >= 2 ) {
							return false;
						}
						this.choices.Add( GlobalVars.config.votable_modes );
						this.question = "What gamemode?";
						break;
					case "crew_transfer":
						
						if ( GlobalVars.ticker.current_state <= 2 ) {
							return false;
						}
						this.question = "End the shift?";
						this.choices.Add( "Initiate Crew Transfer", "Continue The Round" );
						break;
					case "custom":
						this.question = String13.HtmlEncode( Interface13.Input( Task13.User, "What is the vote for?", null, null, null, InputType.Str | InputType.Null ) );

						if ( !Lang13.Bool( this.question ) ) {
							return false;
						}
						i = null;
						i = 1;

						while (( i ??0) <= 10) {
							option = GlobalFuncs.capitalize( String13.HtmlEncode( Interface13.Input( Task13.User, "Please enter an option or hit cancel to finish", null, null, null, InputType.Str | InputType.Null ) ) );

							if ( !Lang13.Bool( option ) || Lang13.Bool( this.mode ) || !( Task13.User.client != null ) ) {
								break;
							}
							this.choices.Add( option );
							i++;
						}
						break;
					case "map":
						this.question = "What should the next map be?";
						maps = GlobalFuncs.get_maps();

						foreach (dynamic _a in Lang13.Enumerate( maps )) {
							key = _a;
							
							this.choices.Add( key );
						}

						if ( !( this.choices.len != 0 ) ) {
							GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>Failed to initiate map vote, no maps found.</span>" );
							return false;
						}
						this.ismapvote = maps;
						break;
					default:
						return false;
						break;
				}
				this.mode = vote_type;
				this.initiator = initiator_key;
				this.started_time = Game13.time;
				this.weighted = weighted_vote;
				text = "" + GlobalFuncs.capitalize( this.mode ) + " vote started by " + this.initiator + ".";
				this.choices = GlobalFuncs.shuffle( this.choices );

				if ( this.mode == "custom" ) {
					text += "<br>" + this.question;
				}
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]VOTE: " + text ) );
				this.update( true );

				if ( popup == true ) {
					
					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.clients )) {
						C = _c;
						

						if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
							continue;
						}
						this.interact( C );
					}
				} else if ( Task13.User is Mob && Task13.User.client != null ) {
					this.interact( Task13.User.client );
				}
				GlobalFuncs.to_chat( typeof(Game13), "<font color='purple'><b>" + text + "</b><br>Type vote to place your votes.<br>You have " + ( this.ismapvote != null && this.ismapvote.len != 0 ? ((dynamic)( "60" )) : ((dynamic)( ( GlobalVars.config.vote_period ??0) / 10 )) ) + " seconds to vote.</font>" );

				switch ((string)( vote_type )) {
					case "crew_transfer":
						GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/voice/Serithi/Shuttlehere.ogg" ) );
						break;
					case "gamemode":
						GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/voice/Serithi/pretenddemoc.ogg" ) );
						break;
					case "custom":
						GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/voice/Serithi/weneedvote.ogg" ) );
						break;
					case "map":
						GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/misc/rockthevote.ogg" ) );
						break;
				}

				if ( this.mode == "gamemode" && GlobalVars.going != 0 ) {
					GlobalVars.going = 0;
					GlobalFuncs.to_chat( typeof(Game13), "<font color='red'><b>Round start has been delayed.</b></font>" );
				}
				this.time_remaining = ( this.ismapvote != null && this.ismapvote.len != 0 ? 60 : Num13.Floor( ( GlobalVars.config.vote_period ??0) / 10 ) );
				return true;
			}
			return false;
		}

		// Function from file: voting.dm
		public int submit_vote( string ckey = null, int vote = 0 ) {
			
			if ( Lang13.Bool( this.mode ) ) {
				
				if ( GlobalVars.config.vote_no_dead && Task13.User.stat == 2 && !( Task13.User.client.holder != null ) ) {
					return 0;
				}

				if ( Lang13.Bool( this.current_votes[ckey] ) ) {
					this.choices[this.choices[this.current_votes[ckey]]]--;
				}

				if ( vote != 0 && 1 <= vote && vote <= this.choices.len ) {
					this.voted.Add( Task13.User.ckey );
					this.choices[this.choices[vote]]++;
					this.current_votes[ckey] = vote;
					return vote;
				}
			}
			return 0;
		}

		// Function from file: voting.dm
		public dynamic result(  ) {
			dynamic _default = null;

			bool restart = false;
			dynamic mapname = null;

			_default = this.announce_result();
			restart = false;

			if ( Lang13.Bool( _default ) ) {
				
				switch ((string)( this.mode )) {
					case "restart":
						
						if ( _default == "Restart Round" ) {
							restart = true;
						}
						break;
					case "gamemode":
						
						if ( GlobalVars.master_mode != _default ) {
							Game13.save_mode( _default );

							if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
								restart = true;
							} else {
								GlobalVars.master_mode = _default;
							}
						}

						if ( !( GlobalVars.going != 0 ) ) {
							GlobalVars.going = 1;
							GlobalFuncs.to_chat( typeof(Game13), "<font color='red'><b>The round will start soon.</b></font>" );
						}
						break;
					case "crew_transfer":
						
						if ( _default == "Initiate Crew Transfer" ) {
							GlobalFuncs.init_shift_change( null, true );
						}
						break;
					case "map":
						
						if ( Lang13.Bool( _default ) ) {
							this.chosen_map = this.ismapvote[_default];
							mapname = _default;
							GlobalVars.watchdog.chosen_map = String13.SubStr( mapname, 1, Lang13.Length( mapname ) );
							GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Players voted and chose.... " + GlobalVars.watchdog.chosen_map + "!" ) ) );
						}
						break;
				}
			}

			if ( restart ) {
				GlobalFuncs.to_chat( typeof(Game13), "World restarting due to vote..." );
				GlobalFuncs.feedback_set_details( "end_error", "restart vote" );

				if ( GlobalVars.blackbox != null ) {
					GlobalVars.blackbox.save_all_data_to_sql();
				}
				GlobalFuncs.CallHook( "Reboot", new ByTable() );
				Task13.Sleep( 50 );
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "Rebooting due to restart vote" ) );
				Game13.Reboot();
			}
			return _default;
		}

		// Function from file: voting.dm
		public dynamic announce_result(  ) {
			dynamic _default = null;

			ByTable winners = null;
			string text = null;
			dynamic feedbackanswer = null;
			dynamic option = null;
			dynamic choice = null;

			winners = this.get_result();

			if ( winners.len > 0 ) {
				
				if ( winners.len > 1 ) {
					text = "<b>Vote Tied Between:</b><br>";

					foreach (dynamic _a in Lang13.Enumerate( winners )) {
						option = _a;
						
						text += "	" + option + "<br>";
					}
					feedbackanswer = GlobalFuncs.list2text( winners, " " );
				}
				_default = Rand13.PickFromTable( winners );

				if ( this.mode == "map" ) {
					
					if ( !Lang13.Bool( feedbackanswer ) ) {
						feedbackanswer = _default;
						GlobalFuncs.feedback_set( "map vote winner", feedbackanswer );
					} else {
						GlobalFuncs.feedback_set( "map vote tie", "" + feedbackanswer + " chosen: " + _default );
					}
				}
				text += new Txt( "<b>" ).item( ( this.weighted == true ? "Random Weighted " : "" ) ).str( "Vote Result: " ).item( _default ).str( " with " ).item( this.choices[_default] ).str( " vote" ).s().item( ( this.weighted == true ? " and a " + Num13.Floor( Convert.ToDouble( this.choices[_default] * 100 / this.total_votes ) ) + "% chance of winning" : null ) ).str( "</b>" ).ToString();

				foreach (dynamic _b in Lang13.Enumerate( this.choices )) {
					choice = _b;
					

					if ( _default == choice ) {
						continue;
					}
					text += new Txt( "<br>	 " ).item( choice ).str( " had " ).item( ( this.choices[choice] != null ? this.choices[choice] : "0" ) ).str( " vote" ).item( ( this.weighted == true && Lang13.Bool( this.choices[choice] ) ? " and a " + Num13.Floor( Convert.ToDouble( this.choices[choice] * 100 / this.total_votes ) ) + "% chance of winning" : null ) ).s().ToString();
				}
			} else {
				text += "<b>Vote Result: Inconclusive - No Votes!</b>";
			}
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]VOTE: " + text ) );
			GlobalFuncs.to_chat( typeof(Game13), "<font color='purple'>" + text + "</font>" );
			return _default;
		}

		// Function from file: voting.dm
		public ByTable get_result(  ) {
			ByTable _default = null;

			int greatest_votes = 0;
			dynamic option = null;
			int votes = 0;
			double non_voters = 0;
			double factor = 0;
			dynamic filteredchoices = null;
			dynamic a = null;
			dynamic option2 = null;

			greatest_votes = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.choices )) {
				option = _a;
				
				votes = Convert.ToInt32( this.choices[option] );
				this.total_votes += votes;

				if ( votes > greatest_votes ) {
					greatest_votes = votes;
				}
			}

			if ( !GlobalVars.config.vote_no_default && this.choices.len != 0 ) {
				non_voters = GlobalVars.clients.len - this.total_votes;

				if ( non_voters > 0 ) {
					
					if ( this.mode == "restart" ) {
						this.choices["Continue Playing"] += non_voters;

						if ( Convert.ToDouble( this.choices["Continue Playing"] ) >= greatest_votes ) {
							greatest_votes = Convert.ToInt32( this.choices["Continue Playing"] );
						}
					} else if ( this.mode == "gamemode" ) {
						Interface13.Stat( null, this.choices.Contains( GlobalVars.master_mode ) );

						if ( false ) {
							this.choices[GlobalVars.master_mode] += non_voters;

							if ( Convert.ToDouble( this.choices[GlobalVars.master_mode] ) >= greatest_votes ) {
								greatest_votes = Convert.ToInt32( this.choices[GlobalVars.master_mode] );
							}
						}
					} else if ( this.mode == "crew_transfer" ) {
						factor = 0.5;

						dynamic _b = Game13.time / 600; // Was a switch-case, sorry for the mess.
						if ( 0<=_b&&_b<=60 ) {
							factor = 0.5;
						} else if ( 61<=_b&&_b<=120 ) {
							factor = 0.8;
						} else if ( 121<=_b&&_b<=240 ) {
							factor = 1;
						} else if ( 241<=_b&&_b<=300 ) {
							factor = 1.2;
						} else {
							factor = 131;
						}
						this.choices["Initiate Crew Transfer"] = Num13.Floor( Convert.ToDouble( this.choices["Initiate Crew Transfer"] * factor ) );
						GlobalFuncs.to_chat( typeof(Game13), "<font color='purple'>Crew Transfer Factor: " + factor + "</font>" );
						greatest_votes = Num13.MaxInt( Convert.ToInt32( this.choices["Initiate Crew Transfer"] ), Convert.ToInt32( this.choices["Continue The Round"] ) );
					}
				}
			}
			_default = new ByTable();

			if ( this.weighted == true ) {
				filteredchoices = this.choices.Copy();

				foreach (dynamic _c in Lang13.Enumerate( filteredchoices )) {
					a = _c;
					

					if ( !Lang13.Bool( filteredchoices[a] ) ) {
						filteredchoices -= a;
					}
				}

				if ( filteredchoices.len != 0 ) {
					_default.Add( GlobalFuncs.pickweight( filteredchoices.Copy() ) );
				}
			} else if ( greatest_votes != 0 ) {
				
				foreach (dynamic _d in Lang13.Enumerate( this.choices )) {
					option2 = _d;
					

					if ( Convert.ToInt32( this.choices[option2] ) == greatest_votes ) {
						_default.Add( option2 );
					}
				}
			}
			return _default;
		}

		// Function from file: voting.dm
		public void reset(  ) {
			this.initiator = null;
			this.time_remaining = 0;
			this.mode = null;
			this.question = null;
			this.choices.len = 0;
			this.voted.len = 0;
			this.voting.len = 0;
			this.total_votes = 0;
			this.current_votes.len = 0;
			this.weighted = GlobalVars.FALSE;
			this.update( true );
			return;
		}

		// Function from file: voting.dm
		public void process(  ) {
			dynamic C = null;

			
			if ( Lang13.Bool( this.mode ) ) {
				
				if ( this.mode == "gamemode" && GlobalVars.ticker.current_state >= 2 ) {
					GlobalFuncs.to_chat( typeof(Game13), "<b>Voting aborted due to game start.</b>" );
					this.reset();
					return;
				}
				this.time_remaining = ( this.ismapvote != null && this.ismapvote.len != 0 ? Num13.Floor( ( ( this.started_time ??0) + 600 - Game13.time ) / 10 ) : Num13.Floor( ( ( this.started_time ??0) + ( GlobalVars.config.vote_period ??0) - Game13.time ) / 10 ) );

				if ( this.time_remaining <= 0 ) {
					this.result();

					foreach (dynamic _a in Lang13.Enumerate( this.voting )) {
						C = _a;
						

						if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
							continue;
						}

						if ( Lang13.Bool( C ) ) {
							this.v_interface.hide( C );
						}
					}
					this.reset();
				} else {
					this.update( true );
				}
			}
			return;
		}

	}

}