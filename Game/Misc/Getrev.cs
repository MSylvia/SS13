// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Getrev : Game_Data {

		public dynamic revision = null;
		public dynamic commiter = null;
		public string svndirpath = null;
		public string revhref = null;

		// Function from file: getrev.dm
		public Getrev ( string filename = null ) {
			ByTable Lines = null;
			dynamic t = null;
			int pos = 0;
			string name = null;
			string value = null;
			ByTable filelist = null;
			dynamic s_archive = null;
			dynamic s = null;
			double? n = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Lines = GlobalFuncs.file2list( filename );

			if ( !( Lines.len != 0 ) ) {
				return; // Warning! Attempt to return some other value!
			}

			foreach (dynamic _b in Lang13.Enumerate( Lines )) {
				t = _b;
				

				if ( !Lang13.Bool( t ) ) {
					continue;
				}
				t = GlobalFuncs.trim( t );

				if ( Lang13.Length( t ) == 0 ) {
					continue;
				} else if ( String13.SubStr( t, 1, 2 ) == "#" ) {
					continue;
				}
				pos = String13.FindIgnoreCase( t, " ", 1, 0 );
				name = null;
				value = null;

				if ( pos != 0 ) {
					name = String13.ToLower( String13.SubStr( t, 1, pos ) );
					value = String13.SubStr( t, pos + 1, 0 );
				} else {
					name = String13.ToLower( t );
				}

				if ( !Lang13.Bool( name ) ) {
					continue;
				}

				switch ((string)( name )) {
					case "svndir":
						this.svndirpath = value;
						break;
					case "revhref":
						this.revhref = value;
						break;
				}
			}

			if ( Lang13.Bool( this.svndirpath ) && File13.Exists( this.svndirpath ) && File13.Exists( "" + this.svndirpath + "/entries" ) && new File( "" + this.svndirpath + "/entries" ) is File ) {
				filelist = GlobalFuncs.file2list( "" + this.svndirpath + "/entries" );
				s_archive = "";

				foreach (dynamic _c in Lang13.Enumerate( filelist )) {
					s = _c;
					

					if ( !Lang13.Bool( this.commiter ) ) {
						
						if ( s == "has-props" ) {
							this.commiter = s_archive;
						}
					}

					if ( !Lang13.Bool( this.revision ) ) {
						n = String13.ParseNumber( s );

						if ( Lang13.Bool( Lang13.IsNumber( n ) ) ) {
							
							if ( ( n ??0) > 5000 && ( n ??0) < 99999 ) {
								this.revision = s;
							}
						}
					}

					if ( Lang13.Bool( this.revision ) && Lang13.Bool( this.commiter ) ) {
						break;
					}
					s_archive = s;
				}

				if ( !Lang13.Bool( this.revision ) ) {
					this.abort();
				}
				GlobalVars.diary.WriteMsg( "Revision info loaded succesfully" );
				return;
			}
			return; // Warning! Attempt to return some other value!
		}

		// Function from file: getrev.dm
		public string showInfo(  ) {
			return @"<html>
					<head>
					</head>
					<body>
					<p><b>Server Revision:</b> " + this.getRevisionText() + "<br/>\n					<b>Author:</b> " + this.commiter + "</p>\n					</body>\n					<html>";
		}

		// Function from file: getrev.dm
		public dynamic getRevisionText(  ) {
			dynamic output = null;

			
			if ( Lang13.Bool( this.revhref ) ) {
				output = "<a href=\"" + this.revhref + this.revision + "\">" + this.revision + "</a>";
			} else {
				output = this.revision;
			}
			return output;
		}

		// Function from file: getrev.dm
		public void abort(  ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return;
		}

	}

}