// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_Internal_ReplaceOrgan : SurgeryStep_Internal {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.allowed_tools = new ByTable().Set( typeof(Obj_Item_Organ), 100 );
			this.min_duration = 60;
			this.max_duration = 80;
		}

		// Function from file: organs_internal.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			Obj_Item I = null;

			((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( "'s hand slips, damaging " ).the( tool ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>Your hand slips, damaging " ).the( tool ).item().str( "!</span>" ).ToString() );
			I = tool;

			if ( I is Obj_Item_Organ ) {
				((dynamic)I).organ_data.take_damage( Rand13.Int( 3, 5 ), 0 );
			}
			return null;
		}

		// Function from file: organs_internal.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;
			Obj_Item O = null;
			dynamic transplant_blood = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " has transplanted " ).the( tool ).item().str( " into " ).item( target ).str( "'s " ).item( affected.display_name ).str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You have transplanted " ).the( tool ).item().str( " into " ).item( target ).str( "'s " ).item( affected.display_name ).str( ".</span>" ).ToString() );
			user.drop_item();
			O = tool;

			if ( O is Obj_Item_Organ ) {
				transplant_blood = O.reagents.reagent_list["blood"];

				if ( !Lang13.Bool( transplant_blood ) ) {
					((dynamic)O).organ_data.transplant_data = new ByTable();
					((dynamic)O).organ_data.transplant_data["species"] = target.species.name;
					((dynamic)O).organ_data.transplant_data["blood_type"] = target.dna.b_type;
					((dynamic)O).organ_data.transplant_data["blood_DNA"] = target.dna.unique_enzymes;
				} else {
					((dynamic)O).organ_data.transplant_data = new ByTable();
					((dynamic)O).organ_data.transplant_data["species"] = transplant_blood.data["species"];
					((dynamic)O).organ_data.transplant_data["blood_type"] = transplant_blood.data["blood_type"];
					((dynamic)O).organ_data.transplant_data["blood_DNA"] = transplant_blood.data["blood_DNA"];
				}
				((dynamic)O).organ_data.organ_holder = null;
				((dynamic)O).organ_data.owner = target;
				target.internal_organs |= ((dynamic)O).organ_data;
				affected.internal_organs |= ((dynamic)O).organ_data;
				target.internal_organs_by_name[((dynamic)O).organ_tag] = ((dynamic)O).organ_data;
				((dynamic)O).organ_data.status |= 1;
				((dynamic)O).replaced( target );
			}
			GlobalFuncs.qdel( O );
			O = null;
			return false;
		}

		// Function from file: organs_internal.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " starts transplanting " ).the( tool ).item().str( " into " ).item( target ).str( "'s " ).item( affected.display_name ).str( "." ).ToString(), new Txt( "You start transplanting " ).the( tool ).item().str( " into " ).item( target ).str( "'s " ).item( affected.display_name ).str( "." ).ToString() );
			((Mob_Living_Carbon_Human)target).custom_pain( "Someone's rooting around in your " + affected.display_name + "!", true );
			base.begin_step( (object)(user), (object)(target), target_zone, tool, (object)(surgery) );
			return false;
		}

		// Function from file: organs_internal.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			Obj_Item O = null;
			dynamic affected = null;
			bool organ_compatible = false;
			bool organ_missing = false;
			string o_is = null;
			string o_a = null;
			string o_do = null;

			O = tool;
			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );

			if ( !( O is Obj_Item_Organ ) ) {
				return 0;
			}

			if ( !Lang13.Bool( target.species ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You have no idea what species this person is. Report this on the bug tracker.</span>" );
				return 0;
			}
			o_is = ( O.gender == GlobalVars.PLURAL ? "are" : "is" );
			o_a = ( O.gender == GlobalVars.PLURAL ? "" : " a" );
			o_do = ( O.gender == GlobalVars.PLURAL ? "don't" : "doesn't" );

			if ( Lang13.Bool( target.species.has_organ[((dynamic)O).organ_tag] ) ) {
				
				if ( !( O.health != 0 ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( ((dynamic)O).organ_tag ).item().str( " " ).item( o_is ).str( " in no state to be transplanted.</span>" ).ToString() );
					return 0;
				}

				if ( !Lang13.Bool( target.internal_organs_by_name[((dynamic)O).organ_tag] ) ) {
					organ_missing = true;
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( target ).item().str( " already has " ).item( o_a ).item( ((dynamic)O).organ_tag ).str( ".</span>" ).ToString() );
					return 0;
				}

				if ( Lang13.Bool( ((dynamic)O).organ_data ) && affected.name == ((dynamic)O).organ_data.parent_organ ) {
					organ_compatible = true;
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( ((dynamic)O).organ_tag ).item().str( " " ).item( o_do ).str( " normally go in " ).the( affected.display_name ).item().str( ".</span>" ).ToString() );
					return 0;
				}
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).A( target.species.name ).item().str( " doesn't normally have " ).item( o_a ).item( ((dynamic)O).organ_tag ).str( ".</span>" ).ToString() );
				return 0;
			}
			return base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 && organ_missing && organ_compatible ?1:0;
		}

	}

}