// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Computer_File_EmbeddedProgram : Computer_File {

		public ByTable memory = new ByTable();
		public Obj_Machinery_EmbeddedController_Radio master = null;
		public dynamic id_tag = null;
		public dynamic tag_exterior_door = null;
		public dynamic tag_interior_door = null;
		public dynamic tag_airpump = null;
		public dynamic tag_chamber_sensor = null;
		public dynamic tag_exterior_sensor = null;
		public dynamic tag_interior_sensor = null;
		public int state = 0;
		public int target_state = 0;

		// Function from file: airlock_program.dm
		public Computer_File_EmbeddedProgram (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.memory["chamber_sensor_pressure"] = 101.32499694824219;
			this.memory["external_sensor_pressure"] = 0;
			this.memory["internal_sensor_pressure"] = 101.32499694824219;
			this.memory["exterior_status"] = new ByTable().Set( "state", "closed" ).Set( "lock", "locked" );
			this.memory["interior_status"] = new ByTable().Set( "state", "closed" ).Set( "lock", "locked" );
			this.memory["pump_status"] = "unknown";
			this.memory["target_pressure"] = 101.32499694824219;
			this.memory["purge"] = 0;
			this.memory["secure"] = 0;
			return;
		}

		// Function from file: airlock_program.dm
		public void toggleDoor( dynamic doorStatus = null, dynamic doorTag = null, bool secure = false, string command = null ) {
			string doorCommand = null;

			doorCommand = null;

			if ( command == "toggle" ) {
				
				if ( doorStatus["state"] == "open" ) {
					command = "close";
				} else if ( doorStatus["state"] == "closed" ) {
					command = "open";
				}
			}

			switch ((string)( command )) {
				case "close":
					
					if ( secure ) {
						
						if ( doorStatus["state"] == "open" ) {
							doorCommand = "secure_close";
						} else if ( doorStatus["lock"] == "unlocked" ) {
							doorCommand = "lock";
						}
					} else if ( doorStatus["state"] == "open" ) {
						
						if ( doorStatus["lock"] == "locked" ) {
							this.signalDoor( doorTag, "unlock" );
						}
						doorCommand = "close";
					} else if ( doorStatus["lock"] == "locked" ) {
						doorCommand = "unlock";
					}
					break;
				case "open":
					
					if ( secure ) {
						
						if ( doorStatus["state"] == "closed" ) {
							doorCommand = "secure_open";
						} else if ( doorStatus["lock"] == "unlocked" ) {
							doorCommand = "lock";
						}
					} else if ( doorStatus["state"] == "closed" ) {
						
						if ( doorStatus["lock"] == "locked" ) {
							this.signalDoor( doorTag, "unlock" );
						}
						doorCommand = "open";
					} else if ( doorStatus["lock"] == "locked" ) {
						doorCommand = "unlock";
					}
					break;
			}

			if ( Lang13.Bool( doorCommand ) ) {
				this.signalDoor( doorTag, doorCommand );
			}
			return;
		}

		// Function from file: airlock_program.dm
		public void cycleDoors( int target = 0 ) {
			string command = null;

			
			switch ((int)( target )) {
				case -2:
					this.toggleDoor( this.memory["interior_status"], this.tag_interior_door, Lang13.Bool( this.memory["secure"] ), "close" );
					this.toggleDoor( this.memory["exterior_status"], this.tag_exterior_door, Lang13.Bool( this.memory["secure"] ), "open" );
					break;
				case -1:
					this.toggleDoor( this.memory["exterior_status"], this.tag_exterior_door, Lang13.Bool( this.memory["secure"] ), "close" );
					this.toggleDoor( this.memory["interior_status"], this.tag_interior_door, Lang13.Bool( this.memory["secure"] ), "open" );
					break;
				case 0:
					command = "unlock";

					if ( Lang13.Bool( this.memory["secure"] ) ) {
						command = "lock";
					}
					this.signalDoor( this.tag_exterior_door, command );
					this.signalDoor( this.tag_interior_door, command );
					break;
			}
			return;
		}

		// Function from file: airlock_program.dm
		public void signalPump( dynamic tag = null, bool power = false, bool? direction = null, bool? pressure = null ) {
			Game_Data signal = null;

			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).data = new ByTable().Set( "tag", tag ).Set( "sigtype", "command" ).Set( "power", power ).Set( "direction", direction ).Set( "set_external_pressure", pressure );
			this.post_signal( signal );
			return;
		}

		// Function from file: airlock_program.dm
		public void signalDoor( dynamic tag = null, string command = null ) {
			Game_Data signal = null;

			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).data["tag"] = tag;
			((dynamic)signal).data["command"] = command;
			this.post_signal( signal );
			return;
		}

		// Function from file: airlock_program.dm
		public void post_signal( Game_Data signal = null, dynamic comm_line = null ) {
			
			if ( this.master != null ) {
				this.master.post_signal( signal, comm_line );
			} else {
				GlobalFuncs.returnToPool( signal );
			}
			return;
		}

		// Function from file: airlock_program.dm
		public bool process(  ) {
			bool? chamber_pressure = null;
			bool? target_pressure = null;

			
			if ( !( this.state != 0 ) && this.target_state != 0 ) {
				
				switch ((int)( this.target_state )) {
					case -1:
						this.memory["target_pressure"] = this.memory["internal_sensor_pressure"];
						break;
					case -2:
						this.memory["target_pressure"] = this.memory["external_sensor_pressure"];
						break;
				}
				this.toggleDoor( this.memory["exterior_status"], this.tag_exterior_door, true, "close" );
				this.toggleDoor( this.memory["interior_status"], this.tag_interior_door, true, "close" );
				chamber_pressure = Lang13.BoolNullable( this.memory["chamber_sensor_pressure"] );
				target_pressure = Lang13.BoolNullable( this.memory["target_pressure"] );

				if ( Lang13.Bool( this.memory["purge"] ) ) {
					target_pressure = false;
				}

				if ( ( chamber_pressure == true ?1:0) <= ( target_pressure == true ?1:0) ) {
					this.state = 2;
					this.signalPump( this.tag_airpump, true, true, target_pressure );
				} else if ( ( chamber_pressure == true ?1:0) > ( target_pressure == true ?1:0) ) {
					this.state = 1;
					this.signalPump( this.tag_airpump, true, false, target_pressure );
				}

				if ( !Lang13.Bool( this.memory["target_pressure"] ) ) {
					this.memory["target_pressure"] = 5.066249847412109;
				}
			}

			switch ((int)( this.state )) {
				case 2:
					
					if ( Convert.ToDouble( this.memory["chamber_sensor_pressure"] ) >= Convert.ToDouble( this.memory["target_pressure"] * 0.41 ) ) {
						this.cycleDoors( this.target_state );
						this.state = 0;
						this.target_state = 0;

						if ( this.memory["pump_status"] != "off" ) {
							this.signalPump( this.tag_airpump, false );
						}
					}
					break;
				case 1:
					
					if ( Lang13.Bool( this.memory["purge"] ) ) {
						
						if ( Convert.ToDouble( this.memory["chamber_sensor_pressure"] ) <= 5.066249847412109 ) {
							this.state = 2;
							this.signalPump( this.tag_airpump, true, true, Lang13.BoolNullable( this.memory["target_pressure"] ) );
						}
					} else if ( Convert.ToDouble( this.memory["chamber_sensor_pressure"] ) <= Convert.ToDouble( this.memory["target_pressure"] * 1.41 ) ) {
						this.cycleDoors( this.target_state );
						this.state = 0;
						this.target_state = 0;

						if ( this.memory["pump_status"] != "off" ) {
							this.signalPump( this.tag_airpump, false );
						}
					}
					break;
			}
			this.memory["processing"] = this.state != this.target_state;
			return true;
		}

		// Function from file: airlock_program.dm
		public void receive_user_command( string command = null ) {
			bool shutdown_pump = false;

			shutdown_pump = false;

			switch ((string)( command )) {
				case "cycle_ext":
					this.state = 0;
					this.target_state = -2;
					break;
				case "cycle_int":
					this.state = 0;
					this.target_state = -1;
					break;
				case "cycle_ext_door":
					this.cycleDoors( -2 );
					break;
				case "cycle_int_door":
					this.cycleDoors( -1 );
					break;
				case "abort":
					this.state = 2;
					this.target_state = 0;
					this.memory["target_pressure"] = 101.32499694824219;
					this.signalPump( this.tag_airpump, true, true, Lang13.BoolNullable( this.memory["target_pressure"] ) );
					this.process();
					break;
				case "force_ext":
					this.toggleDoor( this.memory["exterior_status"], this.tag_exterior_door, Lang13.Bool( this.memory["secure"] ), "toggle" );
					break;
				case "force_int":
					this.toggleDoor( this.memory["interior_status"], this.tag_interior_door, Lang13.Bool( this.memory["secure"] ), "toggle" );
					break;
				case "purge":
					this.memory["purge"] = !Lang13.Bool( this.memory["purge"] );

					if ( Lang13.Bool( this.memory["purge"] ) ) {
						this.toggleDoor( this.memory["exterior_status"], this.tag_exterior_door, true, "close" );
						this.toggleDoor( this.memory["interior_status"], this.tag_interior_door, true, "close" );
						this.state = 1;
						this.target_state = 0;
						this.signalPump( this.tag_airpump, true, false, false );
					}
					break;
				case "secure":
					this.memory["secure"] = !Lang13.Bool( this.memory["secure"] );

					if ( Lang13.Bool( this.memory["secure"] ) ) {
						this.signalDoor( this.tag_interior_door, "lock" );
						this.signalDoor( this.tag_exterior_door, "lock" );
					} else {
						this.signalDoor( this.tag_interior_door, "unlock" );
						this.signalDoor( this.tag_exterior_door, "unlock" );
					}
					break;
			}

			if ( shutdown_pump ) {
				this.signalPump( this.tag_airpump, false );
			}
			return;
		}

		// Function from file: airlock_program.dm
		public void receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic receive_tag = null;

			receive_tag = ((dynamic)signal).data["tag"];

			if ( !Lang13.Bool( receive_tag ) ) {
				return;
			}

			if ( receive_tag == this.tag_chamber_sensor ) {
				
				if ( Lang13.Bool( ((dynamic)signal).data["pressure"] ) ) {
					this.memory["chamber_sensor_pressure"] = String13.ParseNumber( ((dynamic)signal).data["pressure"] );
				}
			} else if ( receive_tag == this.tag_exterior_sensor ) {
				this.memory["external_sensor_pressure"] = String13.ParseNumber( ((dynamic)signal).data["pressure"] );
			} else if ( receive_tag == this.tag_interior_sensor ) {
				this.memory["internal_sensor_pressure"] = String13.ParseNumber( ((dynamic)signal).data["pressure"] );
			} else if ( receive_tag == this.tag_exterior_door ) {
				this.memory["exterior_status"]["state"] = ((dynamic)signal).data["door_status"];
				this.memory["exterior_status"]["lock"] = ((dynamic)signal).data["lock_status"];
			} else if ( receive_tag == this.tag_interior_door ) {
				this.memory["interior_status"]["state"] = ((dynamic)signal).data["door_status"];
				this.memory["interior_status"]["lock"] = ((dynamic)signal).data["lock_status"];
			} else if ( receive_tag == this.tag_airpump ) {
				
				if ( Lang13.Bool( ((dynamic)signal).data["power"] ) ) {
					this.memory["pump_status"] = ((dynamic)signal).data["direction"];
				} else {
					this.memory["pump_status"] = "off";
				}
			} else if ( receive_tag == this.id_tag ) {
				
				if ( this.master is Obj_Machinery_EmbeddedController_Radio_AccessController ) {
					
					dynamic _a = ((dynamic)signal).data["command"]; // Was a switch-case, sorry for the mess.
					if ( _a=="cycle_exterior" ) {
						this.receive_user_command( "cycle_ext_door" );
					} else if ( _a=="cycle_interior" ) {
						this.receive_user_command( "cycle_int_door" );
					} else if ( _a=="cycle" ) {
						
						if ( this.memory["interior_status"]["state"] == "open" ) {
							this.receive_user_command( "cycle_ext" );
						} else {
							this.receive_user_command( "cycle_int" );
						}
					}
				} else {
					
					dynamic _b = ((dynamic)signal).data["command"]; // Was a switch-case, sorry for the mess.
					if ( _b=="cycle_exterior" ) {
						this.receive_user_command( "cycle_ext" );
					} else if ( _b=="cycle_interior" ) {
						this.receive_user_command( "cycle_int" );
					} else if ( _b=="cycle" ) {
						
						if ( this.memory["interior_status"]["state"] == "open" ) {
							this.receive_user_command( "cycle_ext" );
						} else {
							this.receive_user_command( "cycle_int" );
						}
					}
				}
			}
			return;
		}

	}

}