// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Changeling : Game_Data {

		public ByTable absorbed_dna = new ByTable();
		public ByTable absorbed_species = new ByTable();
		public ByTable absorbed_languages = new ByTable();
		public int absorbedcount = 0;
		public double? chem_charges = 20;
		public double chem_recharge_rate = 0.5;
		public double chem_storage = 50;
		public int? sting_range = 1;
		public dynamic changelingID = "Changeling";
		public int? geneticdamage = 0;
		public bool isabsorbing = false;
		public dynamic geneticpoints = 5;
		public ByTable purchasedpowers = new ByTable();
		public dynamic mimicing = "";

		// Function from file: changeling.dm
		public Changeling ( string gender = null ) {
			gender = gender ?? GlobalVars.FEMALE;

			string honorific = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( gender == GlobalVars.FEMALE ) {
				honorific = "Ms.";
			} else {
				honorific = "Mr.";
			}

			if ( GlobalVars.possible_changeling_IDs.len != 0 ) {
				this.changelingID = Rand13.PickFromTable( GlobalVars.possible_changeling_IDs );
				GlobalVars.possible_changeling_IDs.Remove( this.changelingID );
				this.changelingID = "" + honorific + " " + this.changelingID;
			} else {
				this.changelingID = "" + honorific + " " + Rand13.Int( 1, 999 );
			}
			return;
		}

		// Function from file: modularchangling.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mind M = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( !( Task13.User is Mob ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["P"] ) ) {
				M = Task13.User.mind;

				if ( !( M is Mind ) ) {
					return null;
				}
				this.purchasePower( M, href_list["P"] );
				Lang13.Call( typeof(Changeling).GetMethod( "EvolutionMenu" ) );
			}
			return null;
		}

		// Function from file: modularchangling.dm
		public void purchasePower( Mind M = null, string Pname = null, bool? remake_verbs = null ) {
			remake_verbs = remake_verbs ?? true;

			dynamic Thepower = null;
			Power_Changeling P = null;

			
			if ( !( M != null ) || !( M.changeling != null ) ) {
				return;
			}
			Thepower = Pname;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.powerinstances, typeof(Power_Changeling) )) {
				P = _a;
				

				if ( P.name == Pname ) {
					Thepower = P;
					break;
				}
			}

			if ( Thepower == null ) {
				GlobalFuncs.to_chat( M.current, "This is awkward.  Changeling power purchase failed, please report this bug to a coder!" );
				return;
			}
			Interface13.Stat( null, this.purchasedpowers.Contains( Thepower ) );

			if ( Thepower == null ) {
				GlobalFuncs.to_chat( M.current, "We have already evolved this ability!" );
				return;
			}

			if ( Convert.ToDouble( this.geneticpoints ) < Thepower.genomecost ) {
				GlobalFuncs.to_chat( M.current, "We cannot evolve this... yet.  We must acquire more DNA." );
				return;
			}
			this.geneticpoints -= Thepower.genomecost;
			this.purchasedpowers.Add( Thepower );

			if ( !Thepower.isVerb && Thepower.verbpath != null ) {
				Lang13.Call( Lang13.BindFunc( M.current, Thepower.verbpath ) );
			} else if ( remake_verbs == true ) {
				((Mob)M.current).make_changeling();
			}
			return;
		}

		// Function from file: modularchangling.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( desc: "Level up!", group: "Changeling" )]
		public void EvolutionMenu(  ) {
			dynamic P = null;
			string dat = null;
			int i = 0;
			Power_Changeling P2 = null;
			bool ownsthis = false;
			string color = null;

			
			if ( !( Task13.User != null ) || !( Task13.User.mind != null ) || !( Task13.User.mind.changeling != null ) ) {
				return;
			}
			Task13.Source = Task13.User.mind.changeling;

			if ( !( GlobalVars.powerinstances.len != 0 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.powers )) {
					P = _a;
					
					GlobalVars.powerinstances.Add( Lang13.Call( P ) );
				}
			}
			dat = "<html><head><title>Changling Evolution Menu</title></head>";
			dat += new Txt( @"

		<head>
			<script type='text/javascript'>

				var locked_tabs = new Array();

				function updateSearch(){


					var filter_text = document.getElementById('filter');
					var filter = filter_text.value.toLowerCase();

					if(complete_list != null && complete_list != """"){
						var mtbl = document.getElementById(""maintable_data_archive"");
						mtbl.innerHTML = complete_list;
					}

					if(filter.value == """"){
						return;
					}else{

						var maintable_data = document.getElementById('maintable_data');
						var ltr = maintable_data.getElementsByTagName(""tr"");
						for ( var i = 0; i < ltr.length; ++i )
						{
							try{
								var tr = ltr[i];
								if(tr.getAttribute(""id"").indexOf(""data"") != 0){
									continue;
								}
								var ltd = tr.getElementsByTagName(""td"");
								var td = ltd[0];
								var lsearch = td.getElementsByTagName(""b"");
								var search = lsearch[0];
								//var inner_span = li.getElementsByTagName(""span"")[1] //Should only ever contain one element.
								//document.write(""<p>""+search.innerText+""<br>""+filter+""<br>""+search.innerText.indexOf(filter))
								if ( search.innerText.toLowerCase().indexOf(filter) == -1 )
								{
									//document.write(""a"");
									//ltr.removeChild(tr);
									td.innerHTML = """";
									i--;
								}
							}catch(err) {   }
						}
					}

					var count = 0;
					var index = -1;
					var debug = document.getElementById(""debug"");

					locked_tabs = new Array();

				}

				function expand(id,name,desc,helptext,power,ownsthis){

					clearAll();

					var span = document.getElementById(id);


					body = ""<table><tr><td>"";
					body +=	""</td><td align='center'>"";
					body +=	""<font size='2'><b>""+desc+""</b></font> <BR>"";
					body +=	""<font size='2'><font color = 'red'><b>""+helptext+""</b></font> <BR>"";

					if(!ownsthis)
					{
						body += ""<a href='?src=" ).Ref( this ).str( @";P=""+power+""'>Evolve</a>""
					}


					body += ""</td><td align='center'>"";
					body +=	""</td></tr></table>"";

					span.innerHTML = body
				}

				function clearAll(){
					var spans = document.getElementsByTagName('span');
					for(var i = 0; i < spans.length; i++){
						var span = spans[i];

						var id = span.getAttribute(""id"");

						if(!(id.indexOf(""item"")==0))
							continue;

						var pass = 1;

						for(var j = 0; j < locked_tabs.length; j++){
							if(locked_tabs[j]==id){
								pass = 0;
								break;
							}
						}

						if(pass != 1)
							continue;




						span.innerHTML = """";
					}
				}

				function addToLocked(id,link_id,notice_span_id){
					var link = document.getElementById(link_id);
					var decision = link.getAttribute(""name"");
					if(decision == ""1""){
						link.setAttribute(""name"",""2"");
					}else{
						link.setAttribute(""name"",""1"");
						removeFromLocked(id,link_id,notice_span_id);
						return;
					}

					var pass = 1;
					for(var j = 0; j < locked_tabs.length; j++){
						if(locked_tabs[j]==id){
							pass = 0;
							break;
						}
					}
					if(!pass)
						return;
					locked_tabs.push(id);
					var notice_span = document.getElementById(notice_span_id);
					notice_span.innerHTML = ""<font color='red'>Locked</font> "";
					//link.setAttribute(""onClick"",""attempt('""+id+""','""+link_id+""','""+notice_span_id+""');"");
					//document.write(""removeFromLocked('""+id+""','""+link_id+""','""+notice_span_id+""')"");
					//document.write(""aa - ""+link.getAttribute(""onClick""));
				}

				function attempt(ab){
					return ab;
				}

				function removeFromLocked(id,link_id,notice_span_id){
					//document.write(""a"");
					var index = 0;
					var pass = 0;
					for(var j = 0; j < locked_tabs.length; j++){
						if(locked_tabs[j]==id){
							pass = 1;
							index = j;
							break;
						}
					}
					if(!pass)
						return;
					locked_tabs[index] = """";
					var notice_span = document.getElementById(notice_span_id);
					notice_span.innerHTML = """";
					//var link = document.getElementById(link_id);
					//link.setAttribute(""onClick"",""addToLocked('""+id+""','""+link_id+""','""+notice_span_id+""')"");
				}

				function selectTextField(){
					var filter_text = document.getElementById('filter');
					filter_text.focus();
					filter_text.select();
				}

			</script>
		</head>


	" ).ToString();
			dat += "<body onload='selectTextField(); updateSearch();' onkeyup='updateSearch();'>";
			dat += @"

		<table width='560' align='center' cellspacing='0' cellpadding='5' id='maintable'>
			<tr id='title_tr'>
				<td align='center'>
					<font size='5'><b>Changling Evolution Menu</b></font><br>
					Hover over a power to see more information<br>
					Current evolution points left to evolve with: " + this.geneticpoints + @"<br>
					Absorb genomes to acquire more evolution points
					<p>
				</td>
			</tr>
			<tr id='search_tr'>
				<td align='center'>
					<b>Search:</b> <input type='text' id='filter' value='' style='width:300px;'>
				</td>
			</tr>
	</table>

	";
			dat += "\n		<span id='maintable_data_archive'>\n		<table width='560' align='center' cellspacing='0' cellpadding='5' id='maintable_data'>";
			i = 1;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.powerinstances, typeof(Power_Changeling) )) {
				P2 = _b;
				
				ownsthis = false;
				Interface13.Stat( null, this.purchasedpowers.Contains( P2 ) );

				if ( P2 is Power_Changeling ) {
					ownsthis = true;
				}
				color = "#e6e6e6";

				if ( i % 2 == 0 ) {
					color = "#f2f2f2";
				}
				dat += "\n\n			<tr id='data" + i + "' name='" + i + "' onClick=\"addToLocked('item" + i + "','data" + i + "','notice_span" + i + "')\">\n				<td align='center' bgcolor='" + color + "'>\n					<span id='notice_span" + i + "'></span>\n					<a id='link" + i + "'\n					onmouseover='expand(\"item" + i + "\",\"" + P2.name + "\",\"" + P2.desc + "\",\"" + P2.helptext + "\",\"" + P2 + "\"," + ownsthis + ")'\n					>\n					<b id='search" + i + "'>Evolve " + P2 + " - Cost: " + ( ownsthis ? ((dynamic)( "Purchased" )) : ((dynamic)( P2.genomecost )) ) + "</b>\n					</a>\n					<br><span id='item" + i + @"'></span>
				</td>
			</tr>

		";
				i++;
			}
			dat += @"
		</table>
		</span>

		<script type='text/javascript'>
			var maintable = document.getElementById(""maintable_data_archive"");
			var complete_list = maintable.innerHTML;
		</script>
	</body></html>
	";
			Interface13.Browse( Task13.User, dat, "window=powers;size=900x480" );
			return;
		}

		// Function from file: changeling.dm
		public Dna GetDNA( dynamic dna_owner = null ) {
			Dna chosen_dna = null;
			Dna DNA = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.absorbed_dna, typeof(Dna) )) {
				DNA = _a;
				

				if ( dna_owner == DNA.real_name ) {
					chosen_dna = DNA;
					break;
				}
			}
			return chosen_dna;
		}

		// Function from file: changeling.dm
		public void regenerate(  ) {
			this.chem_charges = ( ( this.chem_charges ??0) + this.chem_recharge_rate <= 0 ? 0 : ( ( this.chem_charges ??0) + this.chem_recharge_rate >= this.chem_storage ? this.chem_storage : ( this.chem_charges ??0) + this.chem_recharge_rate ) );
			this.geneticdamage = Num13.MaxInt( 0, ( this.geneticdamage ??0) - 1 );
			return;
		}

	}

}