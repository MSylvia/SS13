// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Construction : Game_Data {

		public ByTable steps = null;
		public Ent_Static holder = null;
		public dynamic result = null;
		public dynamic steps_desc = null;
		public dynamic taskpath = null;
		public bool assembling = false;
		public bool permanence = false;
		public ByTable used_atoms = new ByTable();

		// Function from file: construction_datum.dm
		public Construction ( Ent_Static atom = null ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.holder = atom;

			if ( !( this.holder != null ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this );
					return;
				}));
			}
			this.set_desc( this.steps.len );
			this.add_max_amounts();
			return;
		}

		// Function from file: construction_datum.dm
		public virtual void add_max_amounts(  ) {
			ByTable this_step = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.steps, typeof(ByTable) )) {
				this_step = _a;
				

				if ( this_step.Contains( "amount" ) ) {
					this_step.Add( new ByTable().Set( "max_amount", this_step["amount"] ) );
				}
			}
			return;
		}

		// Function from file: construction_datum.dm
		public virtual bool try_consume( dynamic user = null, dynamic used_atom = null, dynamic given_step = null, double? index = null, int? diff = null ) {
			bool delay = false;
			double? amount = null;
			dynamic stack = null;
			dynamic welder = null;
			string atom_name = null;

			
			if ( Lang13.Bool( used_atom.construction_delay_mult ) && !Lang13.Bool( used_atom.construction_delay_mult["construct"] ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>This tool only works for deconstruction!</span>" );
				return false;
			}

			if ( !Lang13.Bool( given_step.Contains( "amount" ) ) && !Lang13.Bool( given_step.Contains( "delay" ) ) ) {
				return true;
			}
			delay = false;

			if ( Lang13.Bool( given_step.Contains( "delay" ) ) ) {
				
				if ( Lang13.Bool( used_atom.construction_delay_mult ) ) {
					delay = Lang13.Bool( given_step["delay"] * used_atom.construction_delay_mult["construct"] );
				} else {
					delay = Lang13.Bool( given_step["delay"] );
				}
			}

			if ( ( delay ?1:0) > 0 ) {
				this.start_construct_message( given_step, user, used_atom );

				if ( !GlobalFuncs.do_after( user, this.holder, delay, null, true ) ) {
					return false;
				}
			}
			amount = 0;

			if ( Lang13.Bool( given_step.Contains( "amount" ) ) ) {
				amount = Lang13.DoubleNullable( given_step["amount"] );
			}

			if ( ( amount ??0) > 0 ) {
				
				if ( used_atom is Obj_Item_Stack && !Lang13.Bool( given_step.Contains( "take" ) ) ) {
					stack = used_atom;

					if ( Convert.ToDouble( stack.amount ) < ( amount ??0) ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You start adding " ).item( stack ).str( " to " ).the( this.holder ).item().str( ". It still needs " ).item( ( amount ??0) - Convert.ToDouble( stack.amount ) ).str( " " ).item( stack.singular_name ).str( ".</span>" ).ToString() );
						given_step["amount"] -= stack.amount;
						((Obj_Item_Stack)stack).use( Lang13.DoubleNullable( stack.amount ) );
						return false;
					}
					((Obj_Item_Stack)stack).use( amount );
				} else if ( used_atom is Obj_Item_Weapon_Weldingtool && !Lang13.Bool( given_step.Contains( "take" ) ) ) {
					welder = used_atom;

					if ( !((Obj_Item_Weapon_Weldingtool)welder).isOn() ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You tap " ).the( this.holder ).item().str( " with your unlit welder.  " ).item( Rand13.Pick(new object [] { "Ding", "Dong" }) ).str( ".</span>" ).ToString() );
						return false;
					}

					if ( !((Obj_Item_Weapon_Weldingtool)welder).remove_fuel( amount, user ) ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>You don't have enough fuel!</span>" );
						return false;
					}
				} else {
					atom_name = used_atom.name;

					if ( this.permanence || Lang13.Bool( given_step.Contains( "keep" ) ) ) {
						
						if ( ((Mob)user).drop_item( used_atom, this.holder ) ) {
							this.used_atoms.Add( new ByTable().Set( "" + this.steps.Find( given_step ), used_atom ) );
						}
					} else {
						GlobalFuncs.qdel( used_atom );
					}
					given_step["amount"]--;

					if ( Convert.ToDouble( given_step["amount"] ) > 0 ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You add " ).a( atom_name ).item().str( " to " ).the( this.holder ).item().str( ". It still needs " ).item( ( amount ??0) - 1 ).str( " " ).item( atom_name ).s().str( ".</span>" ).ToString() );
						return false;
					}
				}
				given_step["amount"] = given_step["max_amount"];
			}
			return true;
		}

		// Function from file: construction_datum.dm
		public virtual void set_desc( double? index = null ) {
			dynamic step = null;

			step = this.steps[index];
			this.holder.desc = step["desc"];
			return;
		}

		// Function from file: construction_datum.dm
		public virtual void spawn_result( dynamic user = null ) {
			
			if ( Lang13.Bool( this.result ) ) {
				Game13.log.WriteMsg( "## TESTING: " + ( "" + user + " finished a " + this.result + "!" ) );
				Lang13.Call( this.result, GlobalFuncs.get_turf( this.holder ) );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this.holder );
					this.holder = null;
					return;
				}));
			}
			return;
		}

		// Function from file: construction_datum.dm
		public bool check_all_steps( dynamic used_atom = null, dynamic user = null ) {
			int? i = null;
			dynamic L = null;

			i = null;
			i = 1;

			while (( i ??0) <= this.steps.len) {
				L = this.steps[i];

				if ( GlobalFuncs.islist( L["key"] ) && GlobalFuncs.is_type_in_list( used_atom, L["key"] ) || Lang13.Bool( L["key"].IsInstanceOfType( used_atom ) ) ) {
					
					if ( this.custom_action( L, used_atom, user ) ) {
						this.steps[i] = null;
						GlobalFuncs.listclearnulls( this.steps );

						if ( !( this.steps.len != 0 ) ) {
							this.spawn_result( user );
						}
						return true;
					}
				}
				i++;
			}
			return false;
		}

		// Function from file: construction_datum.dm
		public virtual void start_construct_message( dynamic step = null, dynamic user = null, dynamic used_atom = null ) {
			
			if ( Lang13.Bool( step.Contains( "start_msg" ) ) ) {
				((Ent_Static)user).visible_message( this.fixText( step["start_msg"], user ), this.fixText( step["start_msg"], user, true ) );
			}
			return;
		}

		// Function from file: construction_datum.dm
		public virtual void construct_message( dynamic step = null, dynamic user = null, dynamic diff = null, bool? _override = null ) {
			
			if ( Lang13.Bool( step.Contains( "vis_msg" ) ) ) {
				((Ent_Static)user).visible_message( this.fixText( step["vis_msg"], user ), this.fixText( step["vis_msg"], user, true ) );
			}
			return;
		}

		// Function from file: construction_datum.dm
		public virtual string fixText( string text = null, dynamic user = null, bool? self = null ) {
			self = self ?? false;

			
			if ( self == true ) {
				text = GlobalFuncs.replacetext( text, "{s}", "" );
				text = GlobalFuncs.replacetext( text, "{USER}", "You" );
			} else {
				text = GlobalFuncs.replacetext( text, "{s}", "s" );
				text = GlobalFuncs.replacetext( text, "{USER}", "" + user );
			}
			text = GlobalFuncs.replacetext( text, "{HOLDER}", "" + this.holder );
			return text;
		}

		// Function from file: construction_datum.dm
		public virtual bool custom_action( dynamic index = null, dynamic diff = null, dynamic used_atom = null, dynamic user = null ) {
			
			if ( diff is Obj_Item_Weapon_Weldingtool ) {
				GlobalFuncs.playsound( this.holder, "sound/items/welder2.ogg", 50, 1 );
			} else if ( diff is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.playsound( this.holder, "sound/items/Ratchet.ogg", 50, 1 );
			} else if ( diff is Obj_Item_Weapon_Screwdriver ) {
				GlobalFuncs.playsound( this.holder, "sound/items/Screwdriver.ogg", 50, 1 );
			} else if ( diff is Obj_Item_Weapon_Wirecutters ) {
				GlobalFuncs.playsound( this.holder, "sound/items/Wirecutter.ogg", 50, 1 );
			}
			this.construct_message( index, used_atom );
			return true;
		}

		// Function from file: construction_datum.dm
		public virtual int is_right_key( dynamic user = null, dynamic used_atom = null ) {
			dynamic L = null;

			
			if ( this.assembling ) {
				return 0;
			}
			L = this.steps[this.steps.len];

			if ( L["key"] is ByTable && GlobalFuncs.is_type_in_list( used_atom, L["key"] ) || Lang13.Bool( L["key"].IsInstanceOfType( used_atom ) ) ) {
				
				if ( !this.try_consume( user, used_atom, L ) ) {
					return 0;
				}
				return this.steps.len;
			}
			return 0;
		}

		// Function from file: construction_datum.dm
		public virtual bool check_step( dynamic used_atom = null, dynamic user = null ) {
			int valid_step = 0;

			valid_step = this.is_right_key( user, used_atom );

			if ( valid_step != 0 ) {
				this.assembling = true;

				if ( this.custom_action( this.steps[valid_step], used_atom, user ) ) {
					this.next_step( user );
					this.assembling = false;
					return true;
				}
				this.assembling = false;
			}
			return false;
		}

		// Function from file: construction_datum.dm
		public virtual bool action( dynamic used_atom = null, dynamic user = null ) {
			return false;
		}

		// Function from file: construction_datum.dm
		public void next_step( dynamic user = null ) {
			this.steps.len--;

			if ( !( this.steps.len != 0 ) ) {
				this.spawn_result( user );
			} else {
				this.set_desc( this.steps.len );
			}
			return;
		}

	}

}