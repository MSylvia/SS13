// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_SetInjectorPower : Automation {

		public dynamic injector = null;
		public double? state = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Injector: Power";
		}

		public Automation_SetInjectorPower ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			
		}

		// Function from file: injectors.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			ByTable injector_names = null;
			Obj_Machinery_Atmospherics_Unary_OutletInjector I = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["toggle_state"] ) ) {
				this.state = !Lang13.Bool( this.state ) ?1:0;
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_injector"] ) ) {
				injector_names = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Unary_OutletInjector) )) {
					I = _a;
					

					if ( !( I.id_tag == null ) && I.frequency == this.parent.frequency ) {
						injector_names.Or( I.id_tag );
					}
				}
				this.injector = Interface13.Input( "Select an injector:", "Sensor Data", this.injector, null, injector_names, InputType.Null | InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: injectors.dm
		public override string GetText(  ) {
			return new Txt( "Set injector <a href=\"?src=" ).Ref( this ).str( ";set_injector=1\">" ).item( this.fmtString( this.injector ) ).str( "</a> power to <a href=\"?src=" ).Ref( this ).str( ";toggle_state=1\">" ).item( ( Lang13.Bool( this.state ) ? "on" : "off" ) ).str( "</a>." ).ToString();
		}

		// Function from file: injectors.dm
		public override bool process(  ) {
			
			if ( Lang13.Bool( this.injector ) ) {
				this.parent.send_signal( new ByTable().Set( "tag", this.injector ).Set( "power", this.state ).Set( "type", "injector" ) );
			}
			return false;
		}

		// Function from file: injectors.dm
		public override void Import( ByTable json = null ) {
			base.Import( json );
			this.injector = json["injector"];
			this.state = String13.ParseNumber( json["state"] );
			return;
		}

		// Function from file: injectors.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["injector"] = this.injector;
			json["state"] = this.state;
			return json;
		}

	}

}