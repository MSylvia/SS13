// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_Internal_FixOrganRobotic : SurgeryStep_Internal {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.allowed_tools = new ByTable().Set( typeof(Obj_Item_Stack_Nanopaste), 100 ).Set( typeof(Obj_Item_Weapon_Bonegel), 30 ).Set( typeof(Obj_Item_Weapon_Screwdriver), 70 );
			this.min_duration = 70;
			this.max_duration = 90;
		}

		// Function from file: organs_internal.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			Organ_External affected = null;
			Organ_Internal I = null;

			
			if ( !GlobalFuncs.hasorgans( target ) ) {
				return null;
			}
			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( "'s hand slips, gumming up the mechanisms inside of " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>Your hand slips, gumming up the mechanisms inside of " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString() );
			((Mob_Living)target).adjustToxLoss( 5 );
			affected.createwound( "cut", 5 );

			foreach (dynamic _a in Lang13.Enumerate( affected.internal_organs, typeof(Organ_Internal) )) {
				I = _a;
				

				if ( I != null ) {
					I.take_damage( Rand13.Int( 3, 5 ), false );
				}
			}
			return null;
		}

		// Function from file: organs_internal.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;
			Organ_Internal I = null;

			
			if ( !GlobalFuncs.hasorgans( target ) ) {
				return false;
			}
			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );

			foreach (dynamic _a in Lang13.Enumerate( affected.internal_organs, typeof(Organ_Internal) )) {
				I = _a;
				

				if ( I != null && I.damage > 0 ) {
					
					if ( I.robotic >= 2 ) {
						((Ent_Static)user).visible_message( "<span class='notice'>" + user + " repairs " + target + "'s " + I.name + " with " + tool + ".</span>", "<span class='notice'>You repair " + target + "'s " + I.name + " with " + tool + ".</span>" );
						I.damage = 0;
					}
				}

				if ( I != null ) {
					I.status &= 65503;
					I.status &= 65279;
				}
			}
			return false;
		}

		// Function from file: organs_internal.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;
			Organ_Internal I = null;

			
			if ( !GlobalFuncs.hasorgans( target ) ) {
				return false;
			}
			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );

			foreach (dynamic _a in Lang13.Enumerate( affected.internal_organs, typeof(Organ_Internal) )) {
				I = _a;
				

				if ( I != null && I.damage > 0 ) {
					
					if ( I.robotic >= 2 ) {
						((Ent_Static)user).visible_message( "" + user + " starts mending the damage to " + target + "'s " + I.name + "'s mechanisms.", "You start mending the damage to " + target + "'s " + I.name + "'s mechanisms." );
					}
				}
			}
			((Mob_Living_Carbon_Human)target).custom_pain( "The pain in your " + affected.display_name + " is living hell!", true );
			base.begin_step( (object)(user), (object)(target), target_zone, tool, (object)(surgery) );
			return false;
		}

		// Function from file: organs_internal.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			dynamic affected = null;
			bool is_organ_damaged = false;
			Organ_Internal I = null;

			
			if ( !GlobalFuncs.hasorgans( target ) ) {
				return 0;
			}
			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			is_organ_damaged = false;

			foreach (dynamic _a in Lang13.Enumerate( affected.internal_organs, typeof(Organ_Internal) )) {
				I = _a;
				

				if ( I.damage > 0 && I.robotic >= 2 ) {
					is_organ_damaged = true;
					break;
				}
			}
			return base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 && is_organ_damaged ?1:0;
		}

	}

}