// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RcdSchematic_ConAirlock : RcdSchematic {

		public bool allow_access = true;
		public string selected_name = "Airlock";
		public ByTable selected_access = new ByTable();
		public double? one_access = 0;
		public ByTable schematics = new ByTable();
		public bool ready = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Build airlock";
			this.icon = "icons/obj/doors/door.dmi";
			this.icon_state = "door_closed";
			this.category = "Construction";
			this.energy_cost = 3;
		}

		// Function from file: engi.dm
		public RcdSchematic_ConAirlock ( dynamic n_master = null ) : base( (object)(n_master) ) {
			dynamic path = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(SelectionSchematic_AirlockSchematic) ) )) {
				path = _a;
				
				this.schematics.Add( Lang13.Call( path, this ) );
			}
			this.schematics.Add( new SelectionSchematic_AccessSchematic( this ) );
			this.selected = this.schematics[1];
			return;
		}

		// Function from file: engi.dm
		public override dynamic attack( dynamic A = null, dynamic user = null ) {
			Obj_Machinery_Door_Airlock D = null;
			Obj_Machinery_Door_Airlock D2 = null;
			dynamic D3 = null;

			
			if ( A is Obj_Machinery_Door_Airlock ) {
				
				if ( !this.ready ) {
					this.build_ui();
					this.ready = true;
				}
				this.master.v_interface.show( user );
				this.master.v_interface.updateContent( "schematic_options", this.get_HTML( A ) );
				return 1;
			}

			if ( !( A is Tile ) ) {
				return 1;
			}

			foreach (dynamic _a in Lang13.Enumerate( A, typeof(Obj_Machinery_Door_Airlock) )) {
				D = _a;
				
				return "there is already an airlock on this spot!";
			}
			GlobalFuncs.to_chat( user, "Building airlock..." );

			if ( !GlobalFuncs.do_after( user, A, 50 ) ) {
				return 1;
			}

			if ( this.master.get_energy( user ) < this.energy_cost ) {
				return 1;
			}

			foreach (dynamic _b in Lang13.Enumerate( A, typeof(Obj_Machinery_Door_Airlock) )) {
				D2 = _b;
				
				return "there is already an airlock on this spot!";
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this.master ), "sound/items/Deconstruct.ogg", 50, 1 );
			D3 = Lang13.Call( this.selected.build_type, A );

			if ( GlobalFuncs.capitalize( this.selected_name ) == this.selected_name ) {
				D3.name = new Txt().improper().item( this.selected_name ).ToString();
			} else {
				D3.name = this.selected_name;
			}

			if ( this.allow_access ) {
				
				if ( Lang13.Bool( this.one_access ) ) {
					D3.req_one_access = this.selected_access.Copy();
				} else {
					D3.req_access = this.selected_access.Copy();
				}
			}
			D3.autoclose = true;
			return null;
		}

		// Function from file: engi.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? idx = null;
			dynamic C = null;
			dynamic D = null;
			double? OA = null;
			dynamic D2 = null;
			ByTable new_access = null;
			ByTable access_levels = null;
			dynamic href_key = null;
			double? access = null;

			
			if ( Lang13.Bool( href_list["set_selected"] ) ) {
				idx = ( ( String13.ParseNumber( href_list["set_selected"] ) ??0) <= 1 ? 1 : ( ( String13.ParseNumber( href_list["set_selected"] ) ??0) >= this.schematics.len ? this.schematics.len : String13.ParseNumber( href_list["set_selected"] ) ) );
				C = this.schematics[idx];
				this.selected = C;
				this.selected_name = C.name;
				this.master.update_options_menu();
				return 1;
			}

			if ( Lang13.Bool( href_list["new_name"] ) ) {
				
				if ( Lang13.Bool( href_list["target"] ) ) {
					D = Lang13.FindObj( href_list["target"] );

					if ( !( D is Obj_Machinery_Door_Airlock ) ) {
						return null;
					}

					if ( !((Ent_Static)D).Adjacent( Task13.User ) ) {
						return null;
					}
					D.name = String13.SubStr( GlobalFuncs.sanitize( href_list["new_name"] ), 1, 26 );
					this.master.update_options_menu( String13.MakeUrlParams( new ByTable(new object [] { D }) ) );
					return 1;
				}
				this.selected_name = String13.SubStr( GlobalFuncs.sanitize( href_list["new_name"] ), 1, 26 );
				this.master.update_options_menu();
				return 1;
			}

			if ( !( href_list["oneAccess"] == null ) && this.allow_access ) {
				OA = String13.ParseNumber( href_list["oneAccess"] );

				if ( Lang13.Bool( href_list["target"] ) ) {
					D2 = Lang13.FindObj( href_list["target"] );

					if ( !( D2 is Obj_Machinery_Door_Airlock ) ) {
						return null;
					}

					if ( !((Ent_Static)D2).Adjacent( Task13.User ) ) {
						return null;
					}
				}
				new_access = new ByTable();
				access_levels = GlobalFuncs.get_all_accesses();

				foreach (dynamic _a in Lang13.Enumerate( href_list - new ByTable(new object [] { "oneAccess", "src" }) )) {
					href_key = _a;
					
					access = String13.ParseNumber( href_key );

					if ( !access_levels.Contains( access ) ) {
						continue;
					}
					new_access.Or( access );
				}

				if ( !Lang13.Bool( D2 ) ) {
					this.selected_access.Cut();
					this.selected_access = new_access.Copy();
					this.one_access = OA;
				} else if ( Lang13.Bool( OA ) ) {
					D2.req_one_access = new_access.Copy();
					D2.req_access.Cut();
				} else {
					D2.req_access = new_access.Copy();
					D2.req_one_access.Cut();
				}
				this.master.update_options_menu( String13.MakeUrlParams( new ByTable(new object [] { D2 }) ) );
				return 1;
			}
			return null;
		}

		// Function from file: engi.dm
		public override void build_ui(  ) {
			this.master.v_interface.updateLayout( "<div id='schematic_options'> </div>" );
			this.master.update_options_menu();
			return;
		}

		// Function from file: engi.dm
		public override dynamic get_HTML( dynamic D = null ) {
			dynamic _default = null;

			double? i = null;
			double? i2 = null;
			dynamic A = null;
			string access_name = null;
			string _checked = null;

			_default = "<p>";
			_default += new Txt( "\n		\n		<form action=\"?src=" ).Ref( this.master.v_interface ).str( "\" method=\"get\">\n			<input type=\"hidden\" name=\"src\" value=\"" ).Ref( this.master.v_interface ).str( "\"/> \n			" ).item( ( D is Obj_Machinery_Door_Airlock ? new Txt( "<input type=\"hidden\" name = \"target\" value=\"" ).Ref( D ).str( "\"/>" ).ToString() : "" ) ).str( "\n			<input type=\"text\" name=\"new_name\" value=\"" ).item( ( D is Obj_Machinery_Door_Airlock ? D.name : this.selected_name ) ).str( "\"/>\n			<input type=\"submit\" name=\"act\" value=\"Save Name\"/>\n		</form><br/>\n		" ).ToString();

			if ( this.allow_access ) {
				_default += new Txt( @"
		<script>
		$(""#accessListShowButton"").click(
			function toggleAccessList()
			{
				if($(""#accessList"").is("":hidden""))
				{
					$(""#accessList"").slideDown(""fast"");
					$(""#accessListShowButton"").html(""Hide access controls"");
				}
				else
				{
					$(""#accessList"").slideUp(""fast"");
					$(""#accessListShowButton"").html(""Show access controls"");
				}
			}
		);
		</script>



		<form action=""?src=" ).Ref( this.master.v_interface ).str( "\" method=\"get\" id=\"accessList\" style=\"display:inline-block;font-size:100%\">\n			<input type=\"hidden\" name=\"src\" value=\"" ).Ref( this.master.v_interface ).str( "\"/> \n			" ).item( ( D is Obj_Machinery_Door_Airlock ? new Txt( "<input type=\"hidden\" name = \"target\" value=\"" ).Ref( D ).str( "\"/>" ).ToString() : "" ) ).str( @"
			<input type=""submit"" value=""Save Access Settings""/><br/><br/>


			Access requirement is set to: <br/>
		<table style='width:100%'>
		<tr>
		" ).ToString();

				if ( D is Obj_Machinery_Door_Airlock && Lang13.Bool( D.req_one_access ) && D.req_one_access.len != 0 || !( D is Obj_Machinery_Door_Airlock ) && Lang13.Bool( this.one_access ) ) {
					_default += @"
			<input type=""radio"" name=""oneAccess"" value=""0""/>ALL
			<br/>
			<input type=""radio"" name=""oneAccess"" value=""1"" checked/>ONE
			";
				} else {
					_default += @"
			<input type=""radio"" name=""oneAccess"" value=""0"" checked/>ALL
			<br/>
			<input type=""radio"" name=""oneAccess"" value=""1""/>ONE
			";
				}
				i = null;
				i = 1;

				while (( i ??0) <= 7) {
					_default += "<td style='width:14%'><b>" + GlobalFuncs.get_region_accesses_name( i ) + ":</b></td>";
					i++;
				}
				_default += "</tr><tr>";
				i2 = null;
				i2 = 1;

				while (( i2 ??0) <= 7) {
					_default += "<td style='width:14%' valign='top'>";

					foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_region_accesses( i2 ) )) {
						A = _a;
						
						access_name = GlobalFuncs.get_access_desc( A );

						if ( !Lang13.Bool( access_name ) ) {
							continue;
						}
						_checked = "";

						if ( D is Obj_Machinery_Door_Airlock ) {
							
							if ( Lang13.Bool( D.req_access.Find( A ) ) || Lang13.Bool( D.req_one_access.Find( A ) ) ) {
								_checked = " checked";
							}
						} else if ( this.selected_access.Find( A ) != 0 ) {
							_checked = " checked";
						}
						_default += "<input type=\"checkbox\" name=\"" + A + "\"" + _checked + "/> " + access_name + " <br/>";
						_default += "<br>";
					}
					_default += "</td>";
					i2++;
				}
				_default += "</tr></table>";
				_default = "</form><tt>" + _default + "</tt></p>";
			}
			return _default;
		}

		// Function from file: engi.dm
		public override bool deselect( Mob user = null, RcdSchematic new_schematic = null ) {
			bool _default = false;

			_default = base.deselect( user, new_schematic );
			this.selected = this.schematics[1];
			return _default;
		}

		// Function from file: engi.dm
		public override bool select( Mob user = null, RcdSchematic old_schematic = null ) {
			base.select( user, old_schematic );
			this.show( user );
			return false;
		}

		// Function from file: engi.dm
		public override bool show( dynamic user = null, bool? close = null ) {
			close = close ?? false;

			
			if ( !( close == true ) ) {
				user.shown_schematics_background = true;
				user.hud_used.toggle_show_schematics_display( this.schematics, true, this.master );
			} else {
				user.shown_schematics_background = true;
				user.hud_used.toggle_show_schematics_display( this.master.schematics["Construction"], true, this.master );
				this.master.selected = null;
			}
			return true;
		}

	}

}