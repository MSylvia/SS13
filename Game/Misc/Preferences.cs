// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Preferences : Game_Data {

		public string db = "players2.sqlite";
		public string path = null;
		public dynamic default_slot = 1;
		public bool slot = true;
		public ByTable slot_names = new ByTable();
		public int lastPolled = 0;
		public int savefile_version = 0;
		public double? warns = 0;
		public double? warnbans = 0;
		public int muted = 0;
		public string last_ip = null;
		public string last_id = null;
		public dynamic lastchangelog = "";
		public dynamic ooccolor = "#b82e00";
		public dynamic UI_style = "Midnight";
		public dynamic toggles = 22527;
		public dynamic UI_style_color = "#ffffff";
		public dynamic UI_style_alpha = 255;
		public dynamic special_popup = 0;
		public string real_name = null;
		public dynamic be_random_name = 0;
		public bool be_random_body = false;
		public string gender = "male";
		public dynamic age = 30;
		public dynamic b_type = "A+";
		public dynamic underwear = 1;
		public dynamic backbag = 2;
		public dynamic h_style = "Bald";
		public dynamic r_hair = 0;
		public dynamic g_hair = 0;
		public dynamic b_hair = 0;
		public dynamic f_style = "Shaved";
		public dynamic r_facial = 0;
		public dynamic g_facial = 0;
		public dynamic b_facial = 0;
		public dynamic s_tone = 0;
		public dynamic r_eyes = 0;
		public dynamic g_eyes = 0;
		public dynamic b_eyes = 0;
		public dynamic species = "Human";
		public dynamic language = "None";
		public Icon preview_icon = null;
		public Icon preview_icon_front = null;
		public Icon preview_icon_side = null;
		public dynamic job_civilian_high = 0;
		public dynamic job_civilian_med = 0;
		public dynamic job_civilian_low = 0;
		public dynamic job_medsci_high = 0;
		public dynamic job_medsci_med = 0;
		public dynamic job_medsci_low = 0;
		public dynamic job_engsec_high = 0;
		public dynamic job_engsec_med = 0;
		public dynamic job_engsec_low = 0;
		public dynamic alternate_option = 0;
		public bool used_skillpoints = false;
		public dynamic skill_specialization = null;
		public ByTable skills = new ByTable();
		public ByTable organ_data = new ByTable();
		public ByTable player_alt_titles = new ByTable();
		public dynamic flavor_text = "";
		public dynamic med_record = "";
		public dynamic sec_record = "";
		public dynamic gen_record = "";
		public double? disabilities = 0;
		public dynamic nanotrasen_relation = "Neutral";
		public double? current_tab = 0;
		public dynamic metadata = "";
		public string slot_name = "";
		public dynamic randomslot = 0;
		public dynamic volume = 100;
		public dynamic usewmp = 0;
		public ByTable roles = new ByTable();
		public dynamic usenanoui = 1;
		public dynamic progress_bars = 1;
		public Client client = null;

		// Function from file: preferences.dm
		public Preferences ( Client C = null ) {
			bool load_pref = false;

			this.b_type = Rand13.PickWeighted(new object [] { 2674, "O-", 26748, "O+", 28754, "A-", 47478, "A+", 48146, "B-", 61520, "B+", 62188, "AB-", 65535, "AB+" });
			this.client = C;

			if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
				
				if ( !GlobalFuncs.IsGuestKey( C.key ) ) {
					load_pref = this.load_preferences_sqlite( C.ckey );

					if ( load_pref ) {
						
						if ( this.load_save_sqlite( C.ckey, this, this.default_slot ) ) {
							return;
						}
					}
				}
				this.randomize_appearance_for();
				this.real_name = GlobalFuncs.random_name( this.gender );
				this.save_character_sqlite( this, C.ckey, this.default_slot );
			}
			return;
		}

		// Function from file: preferences.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( !( Task13.User != null ) || !( this.client != null ) ) {
				return null;
			}

			if ( this.client.mob != Task13.User ) {
				GlobalFuncs.to_chat( Task13.User, "YOU AREN'T ME GO AWAY" );
				return null;
			}

			dynamic _a = href_list["preference"]; // Was a switch-case, sorry for the mess.
			if ( _a=="set_roles" ) {
				return this.SetRoles( Task13.User, href_list );
			} else if ( _a=="set_role" ) {
				return this.SetRole( Task13.User, href_list );
			}
			return null;
		}

		// Function from file: preferences_setup.dm
		public void update_preview_icon( bool? for_observer = null ) {
			for_observer = for_observer ?? false;

			string g = null;
			string icobase = null;
			Species current_species = null;
			string fat = null;
			dynamic name = null;
			dynamic name2 = null;
			string o_icobase = null;
			Icon temp = null;
			Icon eyes_s = null;
			dynamic hair_style = null;
			Icon hair_s = null;
			dynamic facial_hair_style = null;
			Icon facial_s = null;
			Icon clothes_s = null;
			string uniform_dmi = null;
			string feet_dmi = null;

			this.preview_icon_front = null;
			this.preview_icon_side = null;
			this.preview_icon = null;
			g = "m";

			if ( this.gender == GlobalVars.FEMALE ) {
				g = "f";
			}
			current_species = GlobalVars.all_species[this.species];

			if ( current_species != null ) {
				icobase = current_species.icobase;
			} else {
				icobase = "icons/mob/human_races/r_human.dmi";
			}
			fat = "";

			if ( ( ((int)( this.disabilities ??0 )) & 2 ) != 0 && ( current_species.flags & 8192 ) != 0 ) {
				fat = "_fat";
			}
			this.preview_icon = new Icon( icobase, "torso_" + g + fat );
			this.preview_icon.Blend( new Icon( icobase, "groin_" + g ), 3 );
			this.preview_icon.Blend( new Icon( icobase, "head_" + g ), 3 );

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { "l_arm", "r_arm", "l_leg", "r_leg", "l_foot", "r_foot", "l_hand", "r_hand" }) )) {
				name = _a;
				

				if ( this.organ_data[name] == null ) {
					this.organ_data[name] = null;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.organ_data )) {
				name2 = _b;
				

				if ( this.organ_data[name2] == "amputated" ) {
					continue;
				}
				o_icobase = icobase;

				if ( this.organ_data[name2] == "peg" ) {
					o_icobase = "icons/mob/human_races/o_peg.dmi";
				} else if ( this.organ_data[name2] == "cyborg" ) {
					o_icobase = "icons/mob/human_races/o_robot.dmi";
				}
				temp = new Icon( o_icobase, "" + name2 );
				this.preview_icon.Blend( temp, 3 );
			}

			if ( current_species != null && ( current_species.flags & 16 ) != 0 ) {
				
				if ( Convert.ToDouble( this.s_tone ) >= 0 ) {
					this.preview_icon.Blend( String13.ColorCode( Convert.ToInt32( this.s_tone ), Convert.ToInt32( this.s_tone ), Convert.ToInt32( this.s_tone ) ), 0 );
				} else {
					this.preview_icon.Blend( String13.ColorCode( Convert.ToInt32( -this.s_tone ), Convert.ToInt32( -this.s_tone ), Convert.ToInt32( -this.s_tone ) ), 1 );
				}
			}
			eyes_s = new Icon( "icons/mob/human_face.dmi", ( current_species != null ? current_species.eyes : "eyes_s" ) );
			eyes_s.Blend( String13.ColorCode( Convert.ToInt32( this.r_eyes ), Convert.ToInt32( this.g_eyes ), Convert.ToInt32( this.b_eyes ) ), 0 );
			hair_style = GlobalVars.hair_styles_list[this.h_style];

			if ( Lang13.Bool( hair_style ) ) {
				hair_s = new Icon( hair_style.icon, "" + hair_style.icon_state + "_s" );
				hair_s.Blend( String13.ColorCode( Convert.ToInt32( this.r_hair ), Convert.ToInt32( this.g_hair ), Convert.ToInt32( this.b_hair ) ), 0 );
				eyes_s.Blend( hair_s, 3 );
			}
			facial_hair_style = GlobalVars.facial_hair_styles_list[this.f_style];

			if ( Lang13.Bool( facial_hair_style ) ) {
				facial_s = new Icon( facial_hair_style.icon, "" + facial_hair_style.icon_state + "_s" );
				facial_s.Blend( String13.ColorCode( Convert.ToInt32( this.r_facial ), Convert.ToInt32( this.g_facial ), Convert.ToInt32( this.b_facial ) ), 0 );
				eyes_s.Blend( facial_s, 3 );
			}
			clothes_s = null;
			uniform_dmi = null;
			feet_dmi = null;

			if ( current_species != null ) {
				uniform_dmi = current_species.uniform_icons;

				if ( ( ((int)( this.disabilities ??0 )) & 2 ) != 0 && Lang13.Bool( current_species.fat_uniform_icons ) ) {
					uniform_dmi = current_species.fat_uniform_icons;
				}
				feet_dmi = current_species.shoes_icons;
			}

			if ( !( for_observer == true ) ) {
				clothes_s = new Icon( uniform_dmi, "grey_s" );
				clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
				clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );

				if ( Lang13.Bool( this.job_civilian_high ) ) {
					
					dynamic _c = this.job_civilian_high; // Was a switch-case, sorry for the mess.
					if ( _c==1 ) {
						clothes_s = new Icon( uniform_dmi, "hop_s" );
						clothes_s.Blend( new Icon( feet_dmi, "brown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "armor" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "helmet" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==2 ) {
						clothes_s = new Icon( uniform_dmi, "ba_suit_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "armor" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==4 ) {
						clothes_s = new Icon( uniform_dmi, "hydroponics_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "ggloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "apron" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-hyd" );
					} else if ( _c==8 ) {
						clothes_s = new Icon( uniform_dmi, "chef_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "chef" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==16 ) {
						clothes_s = new Icon( uniform_dmi, "janitor_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==32 ) {
						clothes_s = new Icon( uniform_dmi, "red_suit_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==64 ) {
						clothes_s = new Icon( uniform_dmi, "qm_s" );
						clothes_s.Blend( new Icon( feet_dmi, "brown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/eyes.dmi", "sun" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/in-hand/right/items_righthand.dmi", "clipboard" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==128 ) {
						clothes_s = new Icon( uniform_dmi, "cargotech_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==256 ) {
						clothes_s = new Icon( uniform_dmi, "miner_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-eng" );
					} else if ( _c==512 ) {
						clothes_s = new Icon( uniform_dmi, "internalaffairs_s" );
						clothes_s.Blend( new Icon( feet_dmi, "brown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/in-hand/right/items_righthand.dmi", "briefcase" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==1024 ) {
						clothes_s = new Icon( uniform_dmi, "chapblack_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _c==2048 ) {
						clothes_s = new Icon( uniform_dmi, "clown_s" );
						clothes_s.Blend( new Icon( feet_dmi, "clown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/mask.dmi", "clown" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/back.dmi", "clownpack" ), 3 );
					} else if ( _c==4096 ) {
						clothes_s = new Icon( uniform_dmi, "mime_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "lgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/mask.dmi", "mime" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "beret" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "suspenders" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					}
				} else if ( Lang13.Bool( this.job_medsci_high ) ) {
					
					dynamic _d = this.job_medsci_high; // Was a switch-case, sorry for the mess.
					if ( _d==1 ) {
						clothes_s = new Icon( uniform_dmi, "director_s" );
						clothes_s.Blend( new Icon( feet_dmi, "brown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/in-hand/right/items_righthand.dmi", "clipboard" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-tox" );
					} else if ( _d==2 ) {
						clothes_s = new Icon( uniform_dmi, "toxinswhite_s" );
						clothes_s.Blend( new Icon( feet_dmi, "white" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_tox_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-tox" );
					} else if ( _d==4 ) {
						clothes_s = new Icon( uniform_dmi, "chemistrywhite_s" );
						clothes_s.Blend( new Icon( feet_dmi, "white" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_chem_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-chem" );
					} else if ( _d==8 ) {
						clothes_s = new Icon( uniform_dmi, "cmo_s" );
						clothes_s.Blend( new Icon( feet_dmi, "brown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/in-hand/left/items_lefthand.dmi", "firstaid" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_cmo_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-med" );
					} else if ( _d==16 ) {
						clothes_s = new Icon( uniform_dmi, "medical_s" );
						clothes_s.Blend( new Icon( feet_dmi, "white" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/in-hand/left/items_lefthand.dmi", "firstaid" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-med", "medicalpack" );
					} else if ( _d==32 ) {
						clothes_s = new Icon( uniform_dmi, "geneticswhite_s" );
						clothes_s.Blend( new Icon( feet_dmi, "white" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_gen_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-gen" );
					} else if ( _d==64 ) {
						clothes_s = new Icon( uniform_dmi, "virologywhite_s" );
						clothes_s.Blend( new Icon( feet_dmi, "white" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/mask.dmi", "sterile" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_vir_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-vir", "medicalpack" );
					} else if ( _d==256 ) {
						clothes_s = new Icon( uniform_dmi, "robotics_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/in-hand/right/items_righthand.dmi", "toolbox_blue" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					}
				} else if ( Lang13.Bool( this.job_engsec_high ) ) {
					
					dynamic _e = this.job_engsec_high; // Was a switch-case, sorry for the mess.
					if ( _e==1 ) {
						clothes_s = new Icon( uniform_dmi, "captain_s" );
						clothes_s.Blend( new Icon( feet_dmi, "brown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "captain" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/mask.dmi", "cigaron" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/eyes.dmi", "sun" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "caparmor" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-cap" );
					} else if ( _e==2 ) {
						clothes_s = new Icon( uniform_dmi, "hosred_s" );
						clothes_s.Blend( new Icon( feet_dmi, "jackboots" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "helmet" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "armor" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-sec", "securitypack" );
					} else if ( _e==4 ) {
						clothes_s = new Icon( uniform_dmi, "warden_s" );
						clothes_s.Blend( new Icon( feet_dmi, "jackboots" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "helmet" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "armor" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-sec", "securitypack" );
					} else if ( _e==8 ) {
						clothes_s = new Icon( uniform_dmi, "detective_s" );
						clothes_s.Blend( new Icon( feet_dmi, "brown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/mask.dmi", "cigaron" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "detective" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "detective" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _e==16 ) {
						clothes_s = new Icon( uniform_dmi, "secred_s" );
						clothes_s.Blend( new Icon( feet_dmi, "jackboots" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "helmet" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "armor" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-sec", "securitypack" );
					} else if ( _e==32 ) {
						clothes_s = new Icon( uniform_dmi, "chief_s" );
						clothes_s.Blend( new Icon( feet_dmi, "brown" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/belt.dmi", "utility" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/mask.dmi", "cigaron" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "hardhat0_white" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-eng", "engiepack" );
					} else if ( _e==64 ) {
						clothes_s = new Icon( uniform_dmi, "engine_s" );
						clothes_s.Blend( new Icon( feet_dmi, "orange" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/belt.dmi", "utility" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/head.dmi", "hardhat0_yellow" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-eng", "engiepack" );
					} else if ( _e==128 ) {
						clothes_s = new Icon( uniform_dmi, "atmos_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/belt.dmi", "utility" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _e==256 ) {
						clothes_s = new Icon( uniform_dmi, "robotics_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/hands.dmi", "bgloves" ), 6 );
						clothes_s.Blend( new Icon( "icons/mob/in-hand/right/items_righthand.dmi", "toolbox_blue" ), 3 );
						clothes_s.Blend( new Icon( "icons/mob/suit.dmi", "labcoat_open" ), 3 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _e==512 ) {
						clothes_s = new Icon( uniform_dmi, "grey_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					} else if ( _e==1024 ) {
						clothes_s = new Icon( uniform_dmi, "grey_s" );
						clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
						clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
					}
				}
			} else {
				clothes_s = new Icon( uniform_dmi, "tourist_s" );
				clothes_s.Blend( new Icon( feet_dmi, "black" ), 6 );
				clothes_s = this.blend_backpack( clothes_s, this.backbag, "satchel-norm" );
			}

			if ( ( ((int)( this.disabilities ??0 )) & 1 ) != 0 ) {
				this.preview_icon.Blend( new Icon( "icons/mob/eyes.dmi", "glasses" ), 3 );
			}
			this.preview_icon.Blend( eyes_s, 3 );

			if ( clothes_s != null ) {
				this.preview_icon.Blend( clothes_s, 3 );
			}
			this.preview_icon_front = new Icon( this.preview_icon, null, GlobalVars.SOUTH );
			this.preview_icon_side = new Icon( this.preview_icon, null, GlobalVars.WEST );
			eyes_s = null;
			clothes_s = null;
			return;
		}

		// Function from file: preferences_setup.dm
		public Icon blend_backpack( Icon clothes_s = null, dynamic backbag = null, string satchel = null, string backpack = null ) {
			backpack = backpack ?? "backpack";

			
			dynamic _a = backbag; // Was a switch-case, sorry for the mess.
			if ( _a==2 ) {
				clothes_s.Blend( new Icon( "icons/mob/back.dmi", backpack ), 3 );
			} else if ( _a==3 ) {
				clothes_s.Blend( new Icon( "icons/mob/back.dmi", satchel ), 3 );
			} else if ( _a==4 ) {
				clothes_s.Blend( new Icon( "icons/mob/back.dmi", "satchel" ), 3 );
			}
			return clothes_s;
		}

		// Function from file: preferences_setup.dm
		public void randomize_eyes_color(  ) {
			int red = 0;
			int green = 0;
			int blue = 0;
			dynamic col = null;

			col = Rand13.Pick(new object [] { "black", "grey", "brown", "chestnut", "blue", "lightblue", "green", "albino" });

			dynamic _a = col; // Was a switch-case, sorry for the mess.
			if ( _a=="black" ) {
				red = 0;
				green = 0;
				blue = 0;
			} else if ( _a=="grey" ) {
				red = Rand13.Int( 100, 200 );
				green = red;
				blue = red;
			} else if ( _a=="brown" ) {
				red = 102;
				green = 51;
				blue = 0;
			} else if ( _a=="chestnut" ) {
				red = 153;
				green = 102;
				blue = 0;
			} else if ( _a=="blue" ) {
				red = 51;
				green = 102;
				blue = 204;
			} else if ( _a=="lightblue" ) {
				red = 102;
				green = 204;
				blue = 255;
			} else if ( _a=="green" ) {
				red = 0;
				green = 102;
				blue = 0;
			} else if ( _a=="albino" ) {
				red = Rand13.Int( 200, 255 );
				green = Rand13.Int( 0, 150 );
				blue = Rand13.Int( 0, 150 );
			}
			red = Num13.MaxInt( Num13.MinInt( red + Rand13.Int( -25, 25 ), 255 ), 0 );
			green = Num13.MaxInt( Num13.MinInt( green + Rand13.Int( -25, 25 ), 255 ), 0 );
			blue = Num13.MaxInt( Num13.MinInt( blue + Rand13.Int( -25, 25 ), 255 ), 0 );
			this.r_eyes = red;
			this.g_eyes = green;
			this.b_eyes = blue;
			return;
		}

		// Function from file: preferences_setup.dm
		public void randomize_hair_color( string target = null ) {
			target = target ?? "hair";

			int red = 0;
			int green = 0;
			int blue = 0;
			dynamic col = null;

			
			if ( Rand13.PercentChance( 75 ) && target == "facial" ) {
				this.r_facial = this.r_hair;
				this.g_facial = this.g_hair;
				this.b_facial = this.b_hair;
				return;
			}
			col = Rand13.Pick(new object [] { "blonde", "black", "chestnut", "copper", "brown", "wheat", "old", "punk" });

			dynamic _a = col; // Was a switch-case, sorry for the mess.
			if ( _a=="blonde" ) {
				red = 255;
				green = 255;
				blue = 0;
			} else if ( _a=="black" ) {
				red = 0;
				green = 0;
				blue = 0;
			} else if ( _a=="chestnut" ) {
				red = 153;
				green = 102;
				blue = 51;
			} else if ( _a=="copper" ) {
				red = 255;
				green = 153;
				blue = 0;
			} else if ( _a=="brown" ) {
				red = 102;
				green = 51;
				blue = 0;
			} else if ( _a=="wheat" ) {
				red = 255;
				green = 255;
				blue = 153;
			} else if ( _a=="old" ) {
				red = Rand13.Int( 100, 255 );
				green = red;
				blue = red;
			} else if ( _a=="punk" ) {
				red = Rand13.Int( 0, 255 );
				green = Rand13.Int( 0, 255 );
				blue = Rand13.Int( 0, 255 );
			}
			red = Num13.MaxInt( Num13.MinInt( red + Rand13.Int( -25, 25 ), 255 ), 0 );
			green = Num13.MaxInt( Num13.MinInt( green + Rand13.Int( -25, 25 ), 255 ), 0 );
			blue = Num13.MaxInt( Num13.MinInt( blue + Rand13.Int( -25, 25 ), 255 ), 0 );

			switch ((string)( target )) {
				case "hair":
					this.r_hair = red;
					this.g_hair = green;
					this.b_hair = blue;
					break;
				case "facial":
					this.r_facial = red;
					this.g_facial = green;
					this.b_facial = blue;
					break;
			}
			return;
		}

		// Function from file: preferences_setup.dm
		public void randomize_appearance_for( dynamic H = null ) {
			
			if ( Lang13.Bool( H ) ) {
				
				if ( H.gender == GlobalVars.MALE ) {
					this.gender = GlobalVars.MALE;
				} else {
					this.gender = GlobalVars.FEMALE;
				}
			}
			this.s_tone = GlobalFuncs.random_skin_tone();
			this.h_style = GlobalFuncs.random_hair_style( this.gender, this.species );
			this.f_style = GlobalFuncs.random_facial_hair_style( this.gender, this.species );
			this.randomize_hair_color( "hair" );
			this.randomize_hair_color( "facial" );
			this.randomize_eyes_color();
			this.underwear = Rand13.Int( 1, GlobalVars.underwear_m.len );
			this.backbag = 2;
			this.age = Rand13.Int( 17, 85 );

			if ( Lang13.Bool( H ) ) {
				this.copy_to( H, true );
			}
			return;
		}

		// Function from file: preferences_savefile.dm
		public bool save_character(  ) {
			SaveFile S = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/character" + this.default_slot;
			S["OOC_Notes"] = this.metadata;
			S["real_name"] = this.real_name;
			S["name_is_always_random"] = this.be_random_name;
			S["gender"] = this.gender;
			S["age"] = this.age;
			S["species"] = this.species;
			S["language"] = this.language;
			S["flavor_text"] = this.flavor_text;
			S["med_record"] = this.med_record;
			S["sec_record"] = this.sec_record;
			S["gen_record"] = this.gen_record;
			S["player_alt_titles"] = this.player_alt_titles;
			S["disabilities"] = this.disabilities;
			S["used_skillpoints"] = this.used_skillpoints;
			S["skills"] = this.skills;
			S["skill_specialization"] = this.skill_specialization;
			S["organ_data"] = this.organ_data;
			S["nanotrasen_relation"] = this.nanotrasen_relation;
			S["hair_red"] = this.r_hair;
			S["hair_green"] = this.g_hair;
			S["hair_blue"] = this.b_hair;
			S["facial_red"] = this.r_facial;
			S["facial_green"] = this.g_facial;
			S["facial_blue"] = this.b_facial;
			S["skin_tone"] = this.s_tone;
			S["hair_style_name"] = this.h_style;
			S["facial_style_name"] = this.f_style;
			S["eyes_red"] = this.r_eyes;
			S["eyes_green"] = this.g_eyes;
			S["eyes_blue"] = this.b_eyes;
			S["underwear"] = this.underwear;
			S["backbag"] = this.backbag;
			S["b_type"] = this.b_type;
			S["alternate_option"] = this.alternate_option;
			S["job_civilian_high"] = this.job_civilian_high;
			S["job_civilian_med"] = this.job_civilian_med;
			S["job_civilian_low"] = this.job_civilian_low;
			S["job_medsci_high"] = this.job_medsci_high;
			S["job_medsci_med"] = this.job_medsci_med;
			S["job_medsci_low"] = this.job_medsci_low;
			S["job_engsec_high"] = this.job_engsec_high;
			S["job_engsec_med"] = this.job_engsec_med;
			S["job_engsec_low"] = this.job_engsec_low;
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool save_character_sqlite( dynamic ckey = null, dynamic user = null, dynamic slot = null ) {
			Database_Query q = null;
			Database_Query check = null;
			dynamic altTitles = null;
			dynamic a = null;
			dynamic stuff = null;
			dynamic stuff2 = null;
			dynamic role_id = null;

			
			if ( Convert.ToDouble( slot ) > GlobalVars.MAX_SAVE_SLOTS ) {
				GlobalFuncs.to_chat( user, "You are limited to 8 character slots." );
				GlobalFuncs.message_admins( "" + ckey + " attempted to override character slot limit" );
				return false;
			}
			q = new Database_Query();
			check = new Database_Query();

			foreach (dynamic _a in Lang13.Enumerate( this.player_alt_titles )) {
				a = _a;
				
				altTitles += "" + a + ":" + this.player_alt_titles[a] + ";";
			}
			check.Add( "SELECT player_ckey FROM players WHERE player_ckey = ? AND player_slot = ?", ckey, slot );

			if ( Lang13.Bool( check.Execute( this.db ) ) ) {
				
				if ( !Lang13.Bool( check.NextRow() ) ) {
					q.Add( "INSERT INTO players (player_ckey,player_slot,ooc_notes,real_name,random_name,gender,age,species,language,flavor_text,med_record,sec_record,gen_record,player_alt_titles,disabilities,nanotrasen_relation) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", ckey, slot, this.metadata, this.real_name, this.be_random_name, this.gender, this.age, this.species, this.language, this.flavor_text, this.med_record, this.sec_record, this.gen_record, altTitles, this.disabilities, this.nanotrasen_relation );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #:" + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}
					GlobalFuncs.to_chat( user, "Created Character" );
				} else {
					q.Add( "UPDATE players SET ooc_notes=?,real_name=?,random_name=?,gender=?,age=?,species=?,language=?,flavor_text=?,med_record=?,sec_record=?,gen_record=?,player_alt_titles=?,disabilities=?,nanotrasen_relation=? WHERE player_ckey = ? AND player_slot = ?", this.metadata, this.real_name, this.be_random_name, this.gender, this.age, this.species, this.language, this.flavor_text, this.med_record, this.sec_record, this.gen_record, altTitles, this.disabilities, this.nanotrasen_relation, ckey, slot );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #:" + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}
					GlobalFuncs.to_chat( user, "Updated Character" );
				}
			} else {
				GlobalFuncs.message_admins( "Error #:" + check.Error() + " - " + check.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			check.Add( "SELECT player_ckey FROM body WHERE player_ckey = ? AND player_slot = ?", ckey, slot );

			if ( Lang13.Bool( check.Execute( this.db ) ) ) {
				
				if ( !Lang13.Bool( check.NextRow() ) ) {
					q.Add( "INSERT INTO body (player_ckey,player_slot,hair_red,hair_green,hair_blue,facial_red,facial_green,facial_blue,skin_tone,hair_style_name,facial_style_name,eyes_red,eyes_green,eyes_blue,underwear,backbag,b_type) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", ckey, slot, this.r_hair, this.g_hair, this.b_hair, this.r_facial, this.g_facial, this.b_facial, this.s_tone, this.h_style, this.f_style, this.r_eyes, this.g_eyes, this.b_eyes, this.underwear, this.backbag, this.b_type );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #:" + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}
					GlobalFuncs.to_chat( user, "Created Body" );
				} else {
					q.Add( "UPDATE body SET hair_red=?,hair_green=?,hair_blue=?,facial_red=?,facial_green=?,facial_blue=?,skin_tone=?,hair_style_name=?,facial_style_name=?,eyes_red=?,eyes_green=?,eyes_blue=?,underwear=?,backbag=?,b_type=? WHERE player_ckey = ? AND player_slot = ?", this.r_hair, this.g_hair, this.b_hair, this.r_facial, this.g_facial, this.b_facial, this.s_tone, this.h_style, this.f_style, this.r_eyes, this.g_eyes, this.b_eyes, this.underwear, this.backbag, this.b_type, ckey, slot );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #:" + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}
					GlobalFuncs.to_chat( user, "Updated Body" );
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + check.Error() + " - " + check.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			check.Add( "SELECT player_ckey FROM jobs WHERE player_ckey = ? AND player_slot = ?", ckey, slot );

			if ( Lang13.Bool( check.Execute( this.db ) ) ) {
				
				if ( !Lang13.Bool( check.NextRow() ) ) {
					q.Add( "INSERT INTO jobs (player_ckey,player_slot,alternate_option,job_civilian_high,job_civilian_med,job_civilian_low,job_medsci_high,job_medsci_med,job_medsci_low,job_engsec_high,job_engsec_med,job_engsec_low) VALUES (?,?,?,?,?,?,?,?,?,?,?,?)", ckey, slot, this.alternate_option, this.job_civilian_high, this.job_civilian_med, this.job_civilian_low, this.job_medsci_high, this.job_medsci_med, this.job_medsci_low, this.job_engsec_high, this.job_engsec_med, this.job_engsec_low );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}
					GlobalFuncs.to_chat( user, "Created Job list" );
				} else {
					q.Add( "UPDATE jobs SET alternate_option=?,job_civilian_high=?,job_civilian_med=?,job_civilian_low=?,job_medsci_high=?,job_medsci_med=?,job_medsci_low=?,job_engsec_high=?,job_engsec_med=?,job_engsec_low=? WHERE player_ckey = ? AND player_slot = ?", this.alternate_option, this.job_civilian_high, this.job_civilian_med, this.job_civilian_low, this.job_medsci_high, this.job_medsci_med, this.job_medsci_low, this.job_engsec_high, this.job_engsec_med, this.job_engsec_low, ckey, slot );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}
					GlobalFuncs.to_chat( user, "Updated Job List" );
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + check.Error() + " - " + check.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			check.Add( "SELECT player_ckey FROM limbs WHERE player_ckey = ? AND player_slot = ?", ckey, slot );

			if ( Lang13.Bool( check.Execute( this.db ) ) ) {
				
				if ( !Lang13.Bool( check.NextRow() ) ) {
					q.Add( "INSERT INTO limbs (player_ckey, player_slot) VALUES (?,?)", ckey, slot );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}

					foreach (dynamic _b in Lang13.Enumerate( this.organ_data )) {
						stuff = _b;
						
						q.Add( "UPDATE limbs SET " + stuff + "=? WHERE player_ckey = ? AND player_slot = ?", this.organ_data[stuff], ckey, slot );

						if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
							GlobalFuncs.message_admins( "Error #; " + q.Error() + " - " + q.ErrorMsg() );
							Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
							return false;
						}
					}
					GlobalFuncs.to_chat( user, "Created Limbs" );
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( this.organ_data )) {
						stuff2 = _c;
						
						q.Add( "UPDATE limbs SET " + stuff2 + " = ? WHERE player_ckey = ? AND player_slot = ?", this.organ_data[stuff2], ckey, slot );

						if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
							GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
							Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
							return false;
						}
					}
					GlobalFuncs.to_chat( user, "Updated Limbs" );
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + check.Error() + " - " + check.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			check.Add( "DELETE FROM client_roles WHERE ckey=? AND slot=?", ckey, slot );

			if ( !Lang13.Bool( check.Execute( this.db ) ) ) {
				GlobalFuncs.message_admins( "Error #: " + check.Error() + " - " + check.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}

			foreach (dynamic _d in Lang13.Enumerate( this.roles )) {
				role_id = _d;
				

				if ( !Lang13.Bool( this.roles[role_id] & 2 ) ) {
					continue;
				}
				q = new Database_Query();
				q.Add( "INSERT INTO client_roles (ckey, slot, role, preference) VALUES (?,?,?,?)", ckey, slot, role_id, this.roles[role_id] & 1 );

				if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
					GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
					Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
					return false;
				}
			}
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool load_character( dynamic slot = null ) {
			SaveFile S = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}

			if ( !File13.Exists( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/";

			if ( !Lang13.Bool( slot ) ) {
				slot = this.default_slot;
			}
			slot = GlobalFuncs.sanitize_integer( slot, 1, GlobalVars.MAX_SAVE_SLOTS, Lang13.Initial( this, "default_slot" ) );

			if ( slot != this.default_slot ) {
				this.default_slot = slot;
				S["default_slot"] = slot;
			}
			S.cd = "/character" + slot;
			this.load_save( S.cd );
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool random_character(  ) {
			SaveFile S = null;
			ByTable saves = null;
			dynamic name = null;
			double? i = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}

			if ( !File13.Exists( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			saves = new ByTable();
			i = null;
			i = 1;

			while (( i ??0) <= GlobalVars.MAX_SAVE_SLOTS) {
				S.cd = "/character" + i;
				name = S.ReadItem( "real_name", name );

				if ( !Lang13.Bool( name ) ) {
					
				} else {
					saves.Add( S.cd );
				}
				i++;
			}

			if ( !( saves.len != 0 ) ) {
				this.load_character();
				return false;
			}
			S.cd = Rand13.PickFromTable( saves );
			this.load_save( S.cd );
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool random_character_sqlite( Mob user = null, string ckey = null ) {
			Database_Query q = null;
			ByTable slot_list = null;
			dynamic random_slot = null;

			q = new Database_Query();
			slot_list = new ByTable();
			q.Add( "SELECT player_slot FROM players WHERE player_ckey=?", ckey );

			if ( Lang13.Bool( q.Execute( this.db ) ) ) {
				
				while (Lang13.Bool( q.NextRow() )) {
					slot_list.Add( q.GetColumn( true ) );
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			random_slot = Rand13.PickFromTable( slot_list );
			this.load_save_sqlite( ckey, user, random_slot );
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool load_save( string dir = null ) {
			SaveFile S = null;

			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = dir;
			this.metadata = S.ReadItem( "OOC_Notes", this.metadata );
			this.real_name = S.ReadItem( "real_name", this.real_name );
			this.be_random_name = S.ReadItem( "name_is_always_random", this.be_random_name );
			this.gender = S.ReadItem( "gender", this.gender );
			this.age = S.ReadItem( "age", this.age );
			this.species = S.ReadItem( "species", this.species );
			this.language = S.ReadItem( "language", this.language );
			this.r_hair = S.ReadItem( "hair_red", this.r_hair );
			this.g_hair = S.ReadItem( "hair_green", this.g_hair );
			this.b_hair = S.ReadItem( "hair_blue", this.b_hair );
			this.r_facial = S.ReadItem( "facial_red", this.r_facial );
			this.g_facial = S.ReadItem( "facial_green", this.g_facial );
			this.b_facial = S.ReadItem( "facial_blue", this.b_facial );
			this.s_tone = S.ReadItem( "skin_tone", this.s_tone );
			this.h_style = S.ReadItem( "hair_style_name", this.h_style );
			this.f_style = S.ReadItem( "facial_style_name", this.f_style );
			this.r_eyes = S.ReadItem( "eyes_red", this.r_eyes );
			this.g_eyes = S.ReadItem( "eyes_green", this.g_eyes );
			this.b_eyes = S.ReadItem( "eyes_blue", this.b_eyes );
			this.underwear = S.ReadItem( "underwear", this.underwear );
			this.backbag = S.ReadItem( "backbag", this.backbag );
			this.b_type = S.ReadItem( "b_type", this.b_type );
			this.alternate_option = S.ReadItem( "alternate_option", this.alternate_option );
			this.job_civilian_high = S.ReadItem( "job_civilian_high", this.job_civilian_high );
			this.job_civilian_med = S.ReadItem( "job_civilian_med", this.job_civilian_med );
			this.job_civilian_low = S.ReadItem( "job_civilian_low", this.job_civilian_low );
			this.job_medsci_high = S.ReadItem( "job_medsci_high", this.job_medsci_high );
			this.job_medsci_med = S.ReadItem( "job_medsci_med", this.job_medsci_med );
			this.job_medsci_low = S.ReadItem( "job_medsci_low", this.job_medsci_low );
			this.job_engsec_high = S.ReadItem( "job_engsec_high", this.job_engsec_high );
			this.job_engsec_med = S.ReadItem( "job_engsec_med", this.job_engsec_med );
			this.job_engsec_low = S.ReadItem( "job_engsec_low", this.job_engsec_low );
			this.flavor_text = S.ReadItem( "flavor_text", this.flavor_text );
			this.med_record = S.ReadItem( "med_record", this.med_record );
			this.sec_record = S.ReadItem( "sec_record", this.sec_record );
			this.gen_record = S.ReadItem( "gen_record", this.gen_record );
			this.disabilities = S.ReadItem( "disabilities", this.disabilities );
			this.player_alt_titles = S.ReadItem( "player_alt_titles", this.player_alt_titles );
			this.used_skillpoints = S.ReadItem( "used_skillpoints", this.used_skillpoints );
			this.skills = S.ReadItem( "skills", this.skills );
			this.skill_specialization = S.ReadItem( "skill_specialization", this.skill_specialization );
			this.organ_data = S.ReadItem( "organ_data", this.organ_data );
			this.nanotrasen_relation = S.ReadItem( "nanotrasen_relation", this.nanotrasen_relation );
			this.metadata = GlobalFuncs.sanitize_text( this.metadata, Lang13.Initial( this, "metadata" ) );
			this.real_name = GlobalFuncs.reject_bad_name( this.real_name );

			if ( this.species == null ) {
				this.species = "Human";
			}

			if ( this.language == null ) {
				this.language = "None";
			}

			if ( this.nanotrasen_relation == null ) {
				this.nanotrasen_relation = Lang13.Initial( this, "nanotrasen_relation" );
			}

			if ( !Lang13.Bool( this.real_name ) ) {
				this.real_name = GlobalFuncs.random_name( this.gender, this.species );
			}
			this.be_random_name = GlobalFuncs.sanitize_integer( this.be_random_name, 0, 1, Lang13.Initial( this, "be_random_name" ) );
			this.gender = GlobalFuncs.sanitize_gender( this.gender );
			this.age = GlobalFuncs.sanitize_integer( this.age, 17, 85, Lang13.Initial( this, "age" ) );
			this.r_hair = GlobalFuncs.sanitize_integer( this.r_hair, 0, 255, Lang13.Initial( this, "r_hair" ) );
			this.g_hair = GlobalFuncs.sanitize_integer( this.g_hair, 0, 255, Lang13.Initial( this, "g_hair" ) );
			this.b_hair = GlobalFuncs.sanitize_integer( this.b_hair, 0, 255, Lang13.Initial( this, "b_hair" ) );
			this.r_facial = GlobalFuncs.sanitize_integer( this.r_facial, 0, 255, Lang13.Initial( this, "r_facial" ) );
			this.g_facial = GlobalFuncs.sanitize_integer( this.g_facial, 0, 255, Lang13.Initial( this, "g_facial" ) );
			this.b_facial = GlobalFuncs.sanitize_integer( this.b_facial, 0, 255, Lang13.Initial( this, "b_facial" ) );
			this.s_tone = GlobalFuncs.sanitize_integer( this.s_tone, -185, 34, Lang13.Initial( this, "s_tone" ) );
			this.h_style = GlobalFuncs.sanitize_inlist( this.h_style, GlobalVars.hair_styles_list, Lang13.Initial( this, "h_style" ) );
			this.f_style = GlobalFuncs.sanitize_inlist( this.f_style, GlobalVars.facial_hair_styles_list, Lang13.Initial( this, "f_style" ) );
			this.r_eyes = GlobalFuncs.sanitize_integer( this.r_eyes, 0, 255, Lang13.Initial( this, "r_eyes" ) );
			this.g_eyes = GlobalFuncs.sanitize_integer( this.g_eyes, 0, 255, Lang13.Initial( this, "g_eyes" ) );
			this.b_eyes = GlobalFuncs.sanitize_integer( this.b_eyes, 0, 255, Lang13.Initial( this, "b_eyes" ) );
			this.underwear = GlobalFuncs.sanitize_integer( this.underwear, 1, GlobalVars.underwear_m.len, Lang13.Initial( this, "underwear" ) );
			this.backbag = GlobalFuncs.sanitize_integer( this.backbag, 1, GlobalVars.backbaglist.len, Lang13.Initial( this, "backbag" ) );
			this.b_type = GlobalFuncs.sanitize_text( this.b_type, Lang13.Initial( this, "b_type" ) );
			this.alternate_option = GlobalFuncs.sanitize_integer( this.alternate_option, 0, 2, Lang13.Initial( this, "alternate_option" ) );
			this.job_civilian_high = GlobalFuncs.sanitize_integer( this.job_civilian_high, 0, 65535, Lang13.Initial( this, "job_civilian_high" ) );
			this.job_civilian_med = GlobalFuncs.sanitize_integer( this.job_civilian_med, 0, 65535, Lang13.Initial( this, "job_civilian_med" ) );
			this.job_civilian_low = GlobalFuncs.sanitize_integer( this.job_civilian_low, 0, 65535, Lang13.Initial( this, "job_civilian_low" ) );
			this.job_medsci_high = GlobalFuncs.sanitize_integer( this.job_medsci_high, 0, 65535, Lang13.Initial( this, "job_medsci_high" ) );
			this.job_medsci_med = GlobalFuncs.sanitize_integer( this.job_medsci_med, 0, 65535, Lang13.Initial( this, "job_medsci_med" ) );
			this.job_medsci_low = GlobalFuncs.sanitize_integer( this.job_medsci_low, 0, 65535, Lang13.Initial( this, "job_medsci_low" ) );
			this.job_engsec_high = GlobalFuncs.sanitize_integer( this.job_engsec_high, 0, 65535, Lang13.Initial( this, "job_engsec_high" ) );
			this.job_engsec_med = GlobalFuncs.sanitize_integer( this.job_engsec_med, 0, 65535, Lang13.Initial( this, "job_engsec_med" ) );
			this.job_engsec_low = GlobalFuncs.sanitize_integer( this.job_engsec_low, 0, 65535, Lang13.Initial( this, "job_engsec_low" ) );

			if ( !( this.skills != null ) ) {
				this.skills = new ByTable();
			}

			if ( !this.used_skillpoints ) {
				this.used_skillpoints = false;
			}

			if ( this.disabilities == null ) {
				this.disabilities = 0;
			}

			if ( !( this.player_alt_titles != null ) ) {
				this.player_alt_titles = new ByTable();
			}

			if ( !( this.organ_data != null ) ) {
				this.organ_data = new ByTable();
			}
			return false;
		}

		// Function from file: preferences_savefile.dm
		public bool load_save_sqlite( string ckey = null, Game_Data user = null, dynamic slot = null ) {
			ByTable preference_list = null;
			Database_Query q = null;
			Database_Query check = null;
			dynamic row = null;
			dynamic a = null;
			ByTable player_alt_list1 = null;
			ByTable player_alt_list2 = null;
			dynamic item = null;
			int delim_location = 0;
			string job = null;
			string title = null;
			dynamic row2 = null;

			preference_list = new ByTable();
			q = new Database_Query();
			check = new Database_Query();
			check.Add( "SELECT player_ckey FROM players WHERE player_ckey = ? AND player_slot = ?", ckey, slot );

			if ( Lang13.Bool( check.Execute( this.db ) ) ) {
				
				if ( !Lang13.Bool( check.NextRow() ) ) {
					GlobalFuncs.to_chat( user, "You have no character file to load, please save one first." );
					return false;
				}
			} else {
				GlobalFuncs.message_admins( "load_save_sqlite Check Error #: " + check.Error() + " - " + check.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			q.Add( @"
SELECT
    limbs.player_ckey,
    limbs.player_slot,
    limbs.l_arm,
    limbs.r_arm,
    limbs.l_leg,
    limbs.r_leg,
    limbs.l_foot,
    limbs.r_foot,
    limbs.l_hand,
    limbs.r_hand,
    limbs.heart,
    limbs.eyes,
    limbs.lungs,
    limbs.liver,
    limbs.kidneys,
    players.player_ckey,
    players.player_slot,
    players.ooc_notes,
    players.real_name,
    players.random_name,
    players.gender,
    players.age,
    players.species,
    players.language,
    players.flavor_text,
    players.med_record,
    players.sec_record,
    players.gen_record,
    players.player_alt_titles,
    players.disabilities,
    players.nanotrasen_relation,
    jobs.player_ckey,
    jobs.player_slot,
    jobs.alternate_option,
    jobs.job_civilian_high,
    jobs.job_civilian_med,
    jobs.job_civilian_low,
    jobs.job_medsci_high,
    jobs.job_medsci_med,
    jobs.job_medsci_low,
    jobs.job_engsec_high,
    jobs.job_engsec_med,
    jobs.job_engsec_low,
    body.player_ckey,
    body.player_slot,
    body.hair_red,
    body.hair_green,
    body.hair_blue,
    body.facial_red,
    body.facial_green,
    body.facial_blue,
    body.skin_tone,
    body.hair_style_name,
    body.facial_style_name,
    body.eyes_red,
    body.eyes_green,
    body.eyes_blue,
    body.underwear,
    body.backbag,
    body.b_type
FROM
    players
INNER JOIN
    limbs
ON
    (
        players.player_ckey = limbs.player_ckey)
AND (
        players.player_slot = limbs.player_slot)
INNER JOIN
    jobs
ON
    (
        limbs.player_ckey = jobs.player_ckey)
AND (
        limbs.player_slot = jobs.player_slot)
INNER JOIN
    body
ON
    (
        jobs.player_ckey = body.player_ckey)
AND (
        jobs.player_slot = body.player_slot)
WHERE
    players.player_ckey = ?
AND players.player_slot = ? ;", ckey, slot );

			if ( Lang13.Bool( q.Execute( this.db ) ) ) {
				
				while (Lang13.Bool( q.NextRow() )) {
					row = q.GetRowData();

					foreach (dynamic _a in Lang13.Enumerate( row )) {
						a = _a;
						
						preference_list[a] = row[a];
					}
				}
			} else {
				GlobalFuncs.message_admins( "load_save_sqlite Error #: " + q.Error() + " - " + q.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			player_alt_list1 = new ByTable();
			player_alt_list2 = new ByTable();
			player_alt_list1.Add( GlobalFuncs.text2list( preference_list["player_alt_titles"], ";" ) );

			foreach (dynamic _b in Lang13.Enumerate( player_alt_list1 )) {
				item = _b;
				

				if ( !( String13.FindIgnoreCase( item, ":", 1, 0 ) != 0 ) ) {
					continue;
				}
				delim_location = String13.FindIgnoreCase( item, ":", 1, 0 );
				job = String13.SubStr( item, 1, delim_location );
				title = String13.SubStr( item, delim_location + 1, 0 );
				player_alt_list2[job] = title;
			}
			this.metadata = preference_list["ooc_notes"];
			this.real_name = preference_list["real_name"];
			this.be_random_name = String13.ParseNumber( preference_list["random_name"] );
			this.gender = preference_list["gender"];
			this.age = String13.ParseNumber( preference_list["age"] );
			this.species = preference_list["species"];
			this.language = preference_list["language"];
			this.flavor_text = preference_list["flavor_text"];
			this.med_record = preference_list["med_record"];
			this.sec_record = preference_list["sec_record"];
			this.gen_record = preference_list["gen_record"];
			this.player_alt_titles = player_alt_list2;
			this.disabilities = String13.ParseNumber( preference_list["disabilities"] );
			this.nanotrasen_relation = preference_list["nanotrasen_relation"];
			this.r_hair = String13.ParseNumber( preference_list["hair_red"] );
			this.g_hair = String13.ParseNumber( preference_list["hair_green"] );
			this.b_hair = String13.ParseNumber( preference_list["hair_blue"] );
			this.h_style = preference_list["hair_style_name"];
			this.r_facial = String13.ParseNumber( preference_list["facial_red"] );
			this.g_facial = String13.ParseNumber( preference_list["facial_green"] );
			this.b_facial = String13.ParseNumber( preference_list["facial_blue"] );
			this.f_style = preference_list["facial_style_name"];
			this.r_eyes = String13.ParseNumber( preference_list["eyes_red"] );
			this.g_eyes = String13.ParseNumber( preference_list["eyes_green"] );
			this.b_eyes = String13.ParseNumber( preference_list["eyes_blue"] );
			this.s_tone = String13.ParseNumber( preference_list["skin_tone"] );
			this.underwear = String13.ParseNumber( preference_list["underwear"] );
			this.backbag = String13.ParseNumber( preference_list["backbag"] );
			this.b_type = preference_list["b_type"];
			this.organ_data["l_arm"] = preference_list["l_arm"];
			this.organ_data["r_arm"] = preference_list["r_arm"];
			this.organ_data["l_leg"] = preference_list["l_leg"];
			this.organ_data["r_leg"] = preference_list["r_leg"];
			this.organ_data["l_foot"] = preference_list["l_foot"];
			this.organ_data["r_foot"] = preference_list["r_foot"];
			this.organ_data["l_hand"] = preference_list["l_hand"];
			this.organ_data["r_hand"] = preference_list["r_hand"];
			this.organ_data["heart"] = preference_list["heart"];
			this.organ_data["eyes"] = preference_list["eyes"];
			this.organ_data["lungs"] = preference_list["lungs"];
			this.organ_data["kidneys"] = preference_list["kidneys"];
			this.organ_data["liver"] = preference_list["liver"];
			this.alternate_option = String13.ParseNumber( preference_list["alternate_option"] );
			this.job_civilian_high = String13.ParseNumber( preference_list["job_civilian_high"] );
			this.job_civilian_med = String13.ParseNumber( preference_list["job_civilian_med"] );
			this.job_civilian_low = String13.ParseNumber( preference_list["job_civilian_low"] );
			this.job_medsci_high = String13.ParseNumber( preference_list["job_medsci_high"] );
			this.job_medsci_med = String13.ParseNumber( preference_list["job_medsci_med"] );
			this.job_medsci_low = String13.ParseNumber( preference_list["job_medsci_low"] );
			this.job_engsec_high = String13.ParseNumber( preference_list["job_engsec_high"] );
			this.job_engsec_med = String13.ParseNumber( preference_list["job_engsec_med"] );
			this.job_engsec_low = String13.ParseNumber( preference_list["job_engsec_low"] );
			this.metadata = GlobalFuncs.sanitize_text( this.metadata, Lang13.Initial( this, "metadata" ) );
			this.real_name = GlobalFuncs.reject_bad_name( this.real_name );

			if ( this.species == null ) {
				this.species = "Human";
			}

			if ( this.language == null ) {
				this.language = "None";
			}

			if ( this.nanotrasen_relation == null ) {
				this.nanotrasen_relation = Lang13.Initial( this, "nanotrasen_relation" );
			}

			if ( !Lang13.Bool( this.real_name ) ) {
				this.real_name = GlobalFuncs.random_name( this.gender, this.species );
			}
			this.be_random_name = GlobalFuncs.sanitize_integer( this.be_random_name, 0, 1, Lang13.Initial( this, "be_random_name" ) );
			this.gender = GlobalFuncs.sanitize_gender( this.gender );
			this.age = GlobalFuncs.sanitize_integer( this.age, 17, 85, Lang13.Initial( this, "age" ) );
			this.r_hair = GlobalFuncs.sanitize_integer( this.r_hair, 0, 255, Lang13.Initial( this, "r_hair" ) );
			this.g_hair = GlobalFuncs.sanitize_integer( this.g_hair, 0, 255, Lang13.Initial( this, "g_hair" ) );
			this.b_hair = GlobalFuncs.sanitize_integer( this.b_hair, 0, 255, Lang13.Initial( this, "b_hair" ) );
			this.r_facial = GlobalFuncs.sanitize_integer( this.r_facial, 0, 255, Lang13.Initial( this, "r_facial" ) );
			this.g_facial = GlobalFuncs.sanitize_integer( this.g_facial, 0, 255, Lang13.Initial( this, "g_facial" ) );
			this.b_facial = GlobalFuncs.sanitize_integer( this.b_facial, 0, 255, Lang13.Initial( this, "b_facial" ) );
			this.s_tone = GlobalFuncs.sanitize_integer( this.s_tone, -185, 34, Lang13.Initial( this, "s_tone" ) );
			this.h_style = GlobalFuncs.sanitize_inlist( this.h_style, GlobalVars.hair_styles_list, Lang13.Initial( this, "h_style" ) );
			this.f_style = GlobalFuncs.sanitize_inlist( this.f_style, GlobalVars.facial_hair_styles_list, Lang13.Initial( this, "f_style" ) );
			this.r_eyes = GlobalFuncs.sanitize_integer( this.r_eyes, 0, 255, Lang13.Initial( this, "r_eyes" ) );
			this.g_eyes = GlobalFuncs.sanitize_integer( this.g_eyes, 0, 255, Lang13.Initial( this, "g_eyes" ) );
			this.b_eyes = GlobalFuncs.sanitize_integer( this.b_eyes, 0, 255, Lang13.Initial( this, "b_eyes" ) );
			this.underwear = GlobalFuncs.sanitize_integer( this.underwear, 1, GlobalVars.underwear_m.len, Lang13.Initial( this, "underwear" ) );
			this.backbag = GlobalFuncs.sanitize_integer( this.backbag, 1, GlobalVars.backbaglist.len, Lang13.Initial( this, "backbag" ) );
			this.b_type = GlobalFuncs.sanitize_text( this.b_type, Lang13.Initial( this, "b_type" ) );
			this.alternate_option = GlobalFuncs.sanitize_integer( this.alternate_option, 0, 2, Lang13.Initial( this, "alternate_option" ) );
			this.job_civilian_high = GlobalFuncs.sanitize_integer( this.job_civilian_high, 0, 65535, Lang13.Initial( this, "job_civilian_high" ) );
			this.job_civilian_med = GlobalFuncs.sanitize_integer( this.job_civilian_med, 0, 65535, Lang13.Initial( this, "job_civilian_med" ) );
			this.job_civilian_low = GlobalFuncs.sanitize_integer( this.job_civilian_low, 0, 65535, Lang13.Initial( this, "job_civilian_low" ) );
			this.job_medsci_high = GlobalFuncs.sanitize_integer( this.job_medsci_high, 0, 65535, Lang13.Initial( this, "job_medsci_high" ) );
			this.job_medsci_med = GlobalFuncs.sanitize_integer( this.job_medsci_med, 0, 65535, Lang13.Initial( this, "job_medsci_med" ) );
			this.job_medsci_low = GlobalFuncs.sanitize_integer( this.job_medsci_low, 0, 65535, Lang13.Initial( this, "job_medsci_low" ) );
			this.job_engsec_high = GlobalFuncs.sanitize_integer( this.job_engsec_high, 0, 65535, Lang13.Initial( this, "job_engsec_high" ) );
			this.job_engsec_med = GlobalFuncs.sanitize_integer( this.job_engsec_med, 0, 65535, Lang13.Initial( this, "job_engsec_med" ) );
			this.job_engsec_low = GlobalFuncs.sanitize_integer( this.job_engsec_low, 0, 65535, Lang13.Initial( this, "job_engsec_low" ) );
			q = new Database_Query();
			q.Add( "SELECT role, preference FROM client_roles WHERE ckey=? AND slot=?", ckey, slot );

			if ( Lang13.Bool( q.Execute( this.db ) ) ) {
				
				while (Lang13.Bool( q.NextRow() )) {
					row2 = q.GetRowData();
					this.roles[row2["role"]] = ((int)( String13.ParseNumber( row2["preference"] ) ??0 )) | 2;
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}

			if ( !( this.skills != null ) ) {
				this.skills = new ByTable();
			}

			if ( !this.used_skillpoints ) {
				this.used_skillpoints = false;
			}

			if ( this.disabilities == null ) {
				this.disabilities = 0;
			}

			if ( !( this.player_alt_titles != null ) ) {
				this.player_alt_titles = new ByTable();
			}

			if ( !( this.organ_data != null ) ) {
				this.organ_data = new ByTable();
			}
			GlobalFuncs.to_chat( user, "Sucessfully loaded " + this.real_name + "." );
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool save_volume(  ) {
			SaveFile S = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/";
			S["volume"] = this.volume;
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool save_preferences(  ) {
			SaveFile S = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/";
			S["version"] = this.savefile_version;
			S["ooccolor"] = this.ooccolor;
			S["lastchangelog"] = this.lastchangelog;
			S["UI_style"] = this.UI_style;
			S["default_slot"] = this.default_slot;
			S["toggles"] = this.toggles;
			S["UI_style_color"] = this.UI_style_color;
			S["UI_style_alpha"] = this.UI_style_alpha;
			S["warns"] = this.warns;
			S["warnbans"] = this.warnbans;
			S["randomslot"] = this.randomslot;
			S["volume"] = this.volume;
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool save_preferences_sqlite( dynamic user = null, string ckey = null ) {
			Database_Query check = null;
			Database_Query q = null;

			check = new Database_Query();
			q = new Database_Query();
			check.Add( "SELECT ckey FROM client WHERE ckey = ?", ckey );

			if ( Lang13.Bool( check.Execute( this.db ) ) ) {
				
				if ( !Lang13.Bool( check.NextRow() ) ) {
					q.Add( "INSERT into client (ckey, ooc_color, lastchangelog, UI_style, default_slot, toggles, UI_style_color, UI_style_alpha, warns, warnbans, randomslot, volume, usewmp, special, usenanoui, progress_bars) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", ckey, this.ooccolor, this.lastchangelog, this.UI_style, this.default_slot, this.toggles, this.UI_style_color, this.UI_style_alpha, this.warns, this.warnbans, this.randomslot, this.volume, this.usewmp, this.special_popup, this.usenanoui, this.progress_bars );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}
				} else {
					q.Add( "UPDATE client SET ooc_color=?,lastchangelog=?,UI_style=?,default_slot=?,toggles=?,UI_style_color=?,UI_style_alpha=?,warns=?,warnbans=?,randomslot=?,volume=?,usewmp=?,special=?,usenanoui=?,progress_bars=? WHERE ckey = ?", this.ooccolor, this.lastchangelog, this.UI_style, this.default_slot, this.toggles, this.UI_style_color, this.UI_style_alpha, this.warns, this.warnbans, this.randomslot, this.volume, this.usewmp, this.special_popup, this.usenanoui, this.progress_bars, ckey );

					if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
						GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
						Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
						return false;
					}
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + check.Error() + " - " + check.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			GlobalFuncs.to_chat( user, "Preferences Updated." );
			this.lastPolled = Game13.timeofday;
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool load_preferences(  ) {
			SaveFile S = null;

			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}

			if ( !File13.Exists( this.path ) ) {
				return false;
			}
			S = new SaveFile( this.path );

			if ( !( S != null ) ) {
				return false;
			}
			S.cd = "/";
			this.savefile_version = S.ReadItem( "version", this.savefile_version );

			if ( !( this.savefile_version != 0 ) || !Lang13.Bool( Lang13.IsNumber( this.savefile_version ) ) || this.savefile_version < 8 || this.savefile_version > 11 ) {
				
				if ( !this.savefile_update() ) {
					this.savefile_version = 11;
					this.save_preferences();
					this.save_character();
					return false;
				}
			}
			this.ooccolor = S.ReadItem( "ooccolor", this.ooccolor );
			this.lastchangelog = S.ReadItem( "lastchangelog", this.lastchangelog );
			this.UI_style = S.ReadItem( "UI_style", this.UI_style );
			this.default_slot = S.ReadItem( "default_slot", this.default_slot );
			this.toggles = S.ReadItem( "toggles", this.toggles );
			this.UI_style_color = S.ReadItem( "UI_style_color", this.UI_style_color );
			this.UI_style_alpha = S.ReadItem( "UI_style_alpha", this.UI_style_alpha );
			this.warns = S.ReadItem( "warns", this.warns );
			this.warnbans = S.ReadItem( "warnbans", this.warnbans );
			this.randomslot = S.ReadItem( "randomslot", this.randomslot );
			this.volume = S.ReadItem( "volume", this.volume );
			this.special_popup = S.ReadItem( "special_popup", this.special_popup );
			this.ooccolor = GlobalFuncs.sanitize_hexcolor( this.ooccolor, Lang13.Initial( this, "ooccolor" ) );
			this.lastchangelog = GlobalFuncs.sanitize_text( this.lastchangelog, Lang13.Initial( this, "lastchangelog" ) );
			this.UI_style = GlobalFuncs.sanitize_inlist( this.UI_style, new ByTable(new object [] { "White", "Midnight", "Orange", "old" }), Lang13.Initial( this, "UI_style" ) );
			this.default_slot = GlobalFuncs.sanitize_integer( this.default_slot, 1, GlobalVars.MAX_SAVE_SLOTS, Lang13.Initial( this, "default_slot" ) );
			this.toggles = GlobalFuncs.sanitize_integer( this.toggles, 0, 65535, Lang13.Initial( this, "toggles" ) );
			this.UI_style_color = GlobalFuncs.sanitize_hexcolor( this.UI_style_color, Lang13.Initial( this, "UI_style_color" ) );
			this.UI_style_alpha = GlobalFuncs.sanitize_integer( this.UI_style_alpha, 0, 255, Lang13.Initial( this, "UI_style_alpha" ) );
			this.randomslot = GlobalFuncs.sanitize_integer( this.randomslot, 0, 1, Lang13.Initial( this, "randomslot" ) );
			this.volume = GlobalFuncs.sanitize_integer( this.volume, 0, 100, Lang13.Initial( this, "volume" ) );
			this.special_popup = GlobalFuncs.sanitize_integer( this.special_popup, 0, 1, Lang13.Initial( this, "special_popup" ) );
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool load_preferences_sqlite( dynamic ckey = null ) {
			ByTable preference_list_client = null;
			Database_Query check = null;
			Database_Query q = null;
			dynamic row = null;
			dynamic a = null;

			preference_list_client = new ByTable();
			check = new Database_Query();
			q = new Database_Query();
			check.Add( "SELECT ckey FROM client WHERE ckey = ?", ckey );

			if ( Lang13.Bool( check.Execute( this.db ) ) ) {
				
				if ( !Lang13.Bool( check.NextRow() ) ) {
					return false;
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + check.Error() + " - " + check.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			q.Add( "SELECT * FROM client WHERE ckey = ?", ckey );

			if ( Lang13.Bool( q.Execute( this.db ) ) ) {
				
				while (Lang13.Bool( q.NextRow() )) {
					row = q.GetRowData();

					foreach (dynamic _a in Lang13.Enumerate( row )) {
						a = _a;
						
						preference_list_client[a] = row[a];
					}
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			this.ooccolor = preference_list_client["ooc_color"];
			this.lastchangelog = preference_list_client["lastchangelog"];
			this.UI_style = preference_list_client["UI_style"];
			this.default_slot = String13.ParseNumber( preference_list_client["default_slot"] );
			this.toggles = String13.ParseNumber( preference_list_client["toggles"] );
			this.UI_style_color = preference_list_client["UI_style_color"];
			this.UI_style_alpha = String13.ParseNumber( preference_list_client["UI_style_alpha"] );
			this.warns = String13.ParseNumber( preference_list_client["warns"] );
			this.warnbans = String13.ParseNumber( preference_list_client["warnsbans"] );
			this.volume = String13.ParseNumber( preference_list_client["volume"] );
			this.usewmp = String13.ParseNumber( preference_list_client["usewmp"] );
			this.special_popup = String13.ParseNumber( preference_list_client["special"] );
			this.randomslot = String13.ParseNumber( preference_list_client["randomslot"] );
			this.usenanoui = String13.ParseNumber( preference_list_client["usenanoui"] );
			this.progress_bars = String13.ParseNumber( preference_list_client["progress_bars"] );
			this.ooccolor = GlobalFuncs.sanitize_hexcolor( this.ooccolor, Lang13.Initial( this, "ooccolor" ) );
			this.lastchangelog = GlobalFuncs.sanitize_text( this.lastchangelog, Lang13.Initial( this, "lastchangelog" ) );
			this.UI_style = GlobalFuncs.sanitize_inlist( this.UI_style, new ByTable(new object [] { "White", "Midnight", "Orange", "old" }), Lang13.Initial( this, "UI_style" ) );
			this.default_slot = GlobalFuncs.sanitize_integer( this.default_slot, 1, GlobalVars.MAX_SAVE_SLOTS, Lang13.Initial( this, "default_slot" ) );
			this.toggles = GlobalFuncs.sanitize_integer( this.toggles, 0, 65535, Lang13.Initial( this, "toggles" ) );
			this.UI_style_color = GlobalFuncs.sanitize_hexcolor( this.UI_style_color, Lang13.Initial( this, "UI_style_color" ) );
			this.UI_style_alpha = GlobalFuncs.sanitize_integer( this.UI_style_alpha, 0, 255, Lang13.Initial( this, "UI_style_alpha" ) );
			this.randomslot = GlobalFuncs.sanitize_integer( this.randomslot, 0, 1, Lang13.Initial( this, "randomslot" ) );
			this.volume = GlobalFuncs.sanitize_integer( this.volume, 0, 100, Lang13.Initial( this, "volume" ) );
			this.usewmp = GlobalFuncs.sanitize_integer( this.usewmp, 0, 1, Lang13.Initial( this, "usewmp" ) );
			this.special_popup = GlobalFuncs.sanitize_integer( this.special_popup, 0, 1, Lang13.Initial( this, "special_popup" ) );
			this.usenanoui = GlobalFuncs.sanitize_integer( this.usenanoui, 0, 1, Lang13.Initial( this, "usenanoui" ) );
			this.progress_bars = GlobalFuncs.sanitize_integer( this.progress_bars, 0, 1, Lang13.Initial( this, "progress_bars" ) );
			return true;
		}

		// Function from file: preferences_savefile.dm
		public bool SetChangelog( string ckey = null, string hash = null ) {
			Database_Query q = null;

			this.lastchangelog = hash;
			q = new Database_Query();
			q.Add( "UPDATE client SET lastchangelog=? WHERE ckey=?", this.lastchangelog, ckey );

			if ( !Lang13.Bool( q.Execute( this.db ) ) ) {
				GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			return false;
		}

		// Function from file: preferences_savefile.dm
		public void load_path( string ckey = null, string filename = null ) {
			filename = filename ?? "preferences.sav";

			
			if ( !Lang13.Bool( ckey ) ) {
				return;
			}
			this.path = "data/player_saves/" + String13.SubStr( ckey, 1, 2 ) + "/" + ckey + "/" + filename;
			this.savefile_version = 11;
			return;
		}

		// Function from file: preferences_savefile.dm
		public bool savefile_update(  ) {
			dynamic role_id = null;
			dynamic ckey = null;
			Preferences D = null;
			string delpath = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.special_roles )) {
				role_id = _a;
				
				this.roles[role_id] = 0;
			}

			if ( this.savefile_version < 8 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.preferences_datums )) {
					ckey = _b;
					
					D = GlobalVars.preferences_datums[ckey];

					if ( D == this ) {
						delpath = "data/player_saves/" + String13.SubStr( ckey, 1, 2 ) + "/" + ckey + "/";

						if ( Lang13.Bool( delpath ) && File13.Exists( delpath ) ) {
							File13.Delete( delpath );
						}
						break;
					}
				}
				return false;
			}

			if ( this.savefile_version == 11 ) {
				this.save_preferences();
				this.save_character();
				return true;
			}
			return false;
		}

		// Function from file: preferences.dm
		public void configure_special_roles( Mob user = null ) {
			string html = null;
			dynamic role_id = null;
			string desire = null;
			Browser_Clean B = null;

			html = new Txt( "<form method=\"get\">\n	<input type=\"hidden\" name=\"src\" value=\"" ).Ref( this ).str( @""" />
	<input type=""hidden"" name=""preference"" value=""set_roles"" />
	<h1>Special Role Preferences</h1>
	<p>Please note that this also handles in-round polling for things like Raging Mages and Borers.</p>
	<fieldset>
		<legend>Legend</legend>
		<dl>
			<dt>Never:</dt>
			<dd>Always answer no to this role.</dd>
			<dt>No:</dt>
			<dd>Answer no for this round. (Default)</dd>
			<dt>Yes:</dt>
			<dd>Answer yes for this round.</dd>
			<dt>Always:</dt>
			<dd>Always answer yes to this role.</dd>
		</dl>
	</fieldset>
	<table border=""0"">
		<thead>
			<tr>
				<th>Role</th>
				<th class=""clmNever"">Never</th>
				<th class=""clmNo"">No</th>
				<th class=""clmYes"">Yes</th>
				<th class=""clmAlways"">Always</th>
			</tr>
		</thead>
		<tbody>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.special_roles )) {
				role_id = _a;
				
				desire = GlobalFuncs.get_role_desire_str( this.roles[role_id] );
				html += "<tr>\n			<th>" + role_id + "</th>\n			<td class='column clmNever'><input type=\"radio\" name=\"" + role_id + "\" value=\"" + 2 + "\" title=\"Never\"" + ( desire == "Never" ? " checked='checked'" : "" ) + "/></td>\n			<td class='column clmNo'><input type=\"radio\" name=\"" + role_id + "\" value=\"0\" title=\"No\"" + ( desire == "No" ? " checked='checked'" : "" ) + " /></td>\n			<td class='column clmYes'><input type=\"radio\" name=\"" + role_id + "\" value=\"" + 1 + "\" title=\"Yes\"" + ( desire == "Yes" ? " checked='checked'" : "" ) + " /></td>\n			<td class='column clmAlways'><input type=\"radio\" name=\"" + role_id + "\" value=\"" + 3 + "\" title=\"Always\"" + ( desire == "Always" ? " checked='checked'" : "" ) + " /></td>\n		</tr>";
			}
			html += @"</tbody>
		</table>
		<input type=""submit"" value=""Submit"" />
		<input type=""reset"" value=""Reset"" />
		</form>";
			B = new Browser_Clean( user, "roles", "Role Selections", 300, 390 );
			B.set_content( html );
			B.add_stylesheet( "specialroles", "html/browser/config_roles.css" );
			B.open();
			return;
		}

		// Function from file: preferences.dm
		public void close_load_dialog( Mob user = null ) {
			Interface13.Browse( user, null, "window=saves" );
			return;
		}

		// Function from file: preferences.dm
		public bool open_load_dialog( Mob user = null ) {
			Database_Query q = null;
			ByTable name_list = null;
			string dat = null;
			double? counter = null;

			q = new Database_Query();
			name_list = new ByTable( GlobalVars.MAX_SAVE_SLOTS );
			q.Add( "select real_name, player_slot from players where player_ckey=?", user.ckey );

			if ( Lang13.Bool( q.Execute( this.db ) ) ) {
				
				while (Lang13.Bool( q.NextRow() )) {
					name_list[q.GetColumn( 2 != 0 )] = q.GetColumn( true );
				}
			} else {
				GlobalFuncs.message_admins( "Error #: " + q.Error() + " - " + q.ErrorMsg() );
				Game13.log.WriteMsg( "## WARNING: " + ( "Error #:" + q.Error() + " - " + q.ErrorMsg() ) );
				return false;
			}
			dat = "<body><tt><center>";
			dat += "<b>Select a character slot to load</b><hr>";
			counter = 1;

			while (( counter ??0) <= GlobalVars.MAX_SAVE_SLOTS) {
				
				if ( counter == this.default_slot ) {
					dat += "<a href='?_src_=prefs;preference=changeslot;num=" + counter + ";'><b>" + name_list[counter] + "</b></a><br>";
				} else if ( !Lang13.Bool( name_list[counter] ) ) {
					dat += "<a href='?_src_=prefs;preference=changeslot;num=" + counter + ";'>Character" + counter + "</a><br>";
				} else {
					dat += "<a href='?_src_=prefs;preference=changeslot;num=" + counter + ";'>" + name_list[counter] + "</a><br>";
				}
				counter++;
			}
			dat += new Txt( "<hr>\n		<a href='byond://?src=" ).Ref( user ).str( ";preference=close_load_dialog'>Close</a><br>\n		</center></tt>" ).ToString();
			Interface13.Browse( user, dat, "window=saves;size=300x390" );
			return false;
		}

		// Function from file: preferences.dm
		public void copy_to( dynamic character = null, bool? safety = null ) {
			safety = safety ?? false;

			int firstspace = 0;
			int name_length = 0;
			dynamic name = null;
			Organ_External O = null;
			Organ_Internal I = null;
			string status = null;
			dynamic chosen_species = null;

			
			if ( Lang13.Bool( this.be_random_name ) ) {
				this.real_name = GlobalFuncs.random_name( this.gender, this.species );
			}

			if ( GlobalVars.config.humans_need_surnames && this.species == "Human" ) {
				firstspace = String13.FindIgnoreCase( this.real_name, " ", 1, 0 );
				name_length = Lang13.Length( this.real_name );

				if ( !( firstspace != 0 ) ) {
					this.real_name += " " + Rand13.PickFromTable( GlobalVars.last_names );
				} else if ( firstspace == name_length ) {
					this.real_name += "" + Rand13.PickFromTable( GlobalVars.last_names );
				}
			}
			character.real_name = this.real_name;
			character.name = character.real_name;

			if ( Lang13.Bool( character.dna ) ) {
				character.dna.real_name = character.real_name;
			}
			character.flavor_text = this.flavor_text;
			character.med_record = this.med_record;
			character.sec_record = this.sec_record;
			character.gen_record = this.gen_record;
			((Game_Data)character).setGender( this.gender );
			character.age = this.age;
			character.b_type = this.b_type;
			character.r_eyes = this.r_eyes;
			character.g_eyes = this.g_eyes;
			character.b_eyes = this.b_eyes;
			character.r_hair = this.r_hair;
			character.g_hair = this.g_hair;
			character.b_hair = this.b_hair;
			character.r_facial = this.r_facial;
			character.g_facial = this.g_facial;
			character.b_facial = this.b_facial;
			character.s_tone = this.s_tone;
			character.h_style = this.h_style;
			character.f_style = this.f_style;
			character.skills = this.skills;

			foreach (dynamic _a in Lang13.Enumerate( this.organ_data )) {
				name = _a;
				
				O = character.organs_by_name[name];
				I = character.internal_organs_by_name[name];
				status = this.organ_data[name];

				if ( status == "amputated" ) {
					O.status &= 65407;
					O.status &= 61439;
					O.amputated = true;
					O.status |= 64;
					O.destspawn = true;
				} else if ( status == "cyborg" ) {
					O.status &= 61439;
					O.status |= 128;
				} else if ( status == "peg" ) {
					O.status &= 65407;
					O.status |= 4096;
				} else if ( status == "assisted" ) {
					I.mechassist();
				} else if ( status == "mechanical" ) {
					I.mechanize();
				} else {
					continue;
				}
			}
			chosen_species = GlobalVars.all_species[this.species];

			if ( ( ((int)( this.disabilities ??0 )) & 2 ) != 0 && Lang13.Bool( chosen_species.flags & 8192 ) ) {
				character.mutations += 6;
				character.mutations += 200;
			}

			if ( ( ((int)( this.disabilities ??0 )) & 1 ) != 0 ) {
				character.disabilities |= 1;
			}

			if ( ( ((int)( this.disabilities ??0 )) & 4 ) != 0 ) {
				character.disabilities |= 2;
			}

			if ( ( ((int)( this.disabilities ??0 )) & 8 ) != 0 ) {
				character.sdisabilities |= 4;
			}

			if ( Convert.ToDouble( this.underwear ) > GlobalVars.underwear_m.len || Convert.ToDouble( this.underwear ) < 1 ) {
				this.underwear = 0;
			}
			character.underwear = this.underwear;

			if ( Convert.ToDouble( this.backbag ) > 4 || Convert.ToDouble( this.backbag ) < 1 ) {
				this.backbag = 1;
			}
			character.backbag = this.backbag;
			Interface13.Stat( null, new ByTable(new object [] { GlobalVars.PLURAL, GlobalVars.NEUTER }).Contains( character.gender ) );

			if ( Convert.ToDouble( this.backbag ) > 4 || Convert.ToDouble( this.backbag ) < 1 ) {
				
				if ( this is Mob_Living ) {
					GlobalFuncs.message_admins( "" + character + " (" + character.ckey + ") has spawned with their gender as plural or neuter. Please notify coders." );
					((Game_Data)character).setGender( GlobalVars.MALE );
				}
			}
			return;
		}

		// Function from file: preferences.dm
		public bool process_link( Mob user = null, ByTable href_list = null ) {
			dynamic job = null;
			ByTable choices = null;
			dynamic choice = null;
			double? dflag = null;
			dynamic medmsg = null;
			dynamic secmsg = null;
			dynamic genmsg = null;
			string new_name = null;
			dynamic new_age = null;
			ByTable new_species = null;
			dynamic prev_species = null;
			bool whitelisted = false;
			dynamic S = null;
			ByTable valid_hairstyles = null;
			dynamic hairstyle = null;
			SpriteAccessory S2 = null;
			ByTable valid_facialhairstyles = null;
			dynamic facialhairstyle = null;
			SpriteAccessory S3 = null;
			bool? languages_available = null;
			ByTable new_languages = null;
			dynamic L = null;
			dynamic lang = null;
			dynamic L2 = null;
			dynamic lang2 = null;
			dynamic new_metadata = null;
			dynamic new_b_type = null;
			dynamic new_hair = null;
			ByTable valid_hairstyles2 = null;
			dynamic hairstyle2 = null;
			SpriteAccessory S4 = null;
			dynamic new_h_style = null;
			dynamic new_facial = null;
			ByTable valid_facialhairstyles2 = null;
			dynamic facialhairstyle2 = null;
			SpriteAccessory S5 = null;
			dynamic new_f_style = null;
			ByTable underwear_options = null;
			dynamic new_underwear = null;
			dynamic new_eyes = null;
			dynamic new_s_tone = null;
			dynamic new_ooccolor = null;
			dynamic new_backbag = null;
			dynamic new_relation = null;
			dynamic msg = null;
			dynamic limb_name = null;
			string limb = null;
			string second_limb = null;
			string third_limb = null;
			ByTable valid_limb_states = null;
			dynamic new_state = null;
			dynamic organ_name = null;
			string organ = null;
			dynamic new_state2 = null;
			dynamic skin_style_name = null;
			dynamic UI_style_color_new = null;
			dynamic UI_style_alpha_new = null;
			double? num = null;

			
			if ( !( user != null ) ) {
				return false;
			}

			if ( !( user is Mob_NewPlayer ) ) {
				return false;
			}

			if ( href_list["preference"] == "job" ) {
				
				dynamic _a = href_list["task"]; // Was a switch-case, sorry for the mess.
				if ( _a=="close" ) {
					Interface13.Browse( user, null, "window=mob_occupation" );
					this.ShowChoices( user );
				} else if ( _a=="reset" ) {
					this.ResetJobs();
					this.SetChoices( user );
				} else if ( _a=="random" ) {
					
					if ( this.alternate_option == 0 || this.alternate_option == 1 ) {
						this.alternate_option += 1;
					} else if ( this.alternate_option == 2 ) {
						this.alternate_option = 0;
					} else {
						return false;
					}
					this.SetChoices( user );
				} else if ( _a=="alt_title" ) {
					job = Lang13.FindObj( href_list["job"] );

					if ( Lang13.Bool( job ) ) {
						choices = new ByTable(new object [] { job.title }) + job.alt_titles;
						choice = Interface13.Input( "Pick a title for " + job.title + ".", "Character Generation", this.GetPlayerAltTitle( job ), null, choices | null, InputType.Any );

						if ( Lang13.Bool( choice ) ) {
							this.SetPlayerAltTitle( job, choice );
							this.SetChoices( user );
						}
					}
				} else if ( _a=="input" ) {
					this.SetJob( user, href_list["text"] );
				} else {
					this.SetChoices( user );
				}
				return true;
			} else if ( href_list["preference"] == "disabilities" ) {
				
				dynamic _b = href_list["task"]; // Was a switch-case, sorry for the mess.
				if ( _b=="close" ) {
					Interface13.Browse( user, null, "window=disabil" );
					this.ShowChoices( user );
				} else if ( _b=="reset" ) {
					this.disabilities = 0;
					this.SetDisabilities( user );
				} else if ( _b=="input" ) {
					dflag = String13.ParseNumber( href_list["disability"] );

					if ( ( dflag ??0) >= 0 ) {
						
						if ( !( dflag == 2 && this.species != "Human" ) ) {
							this.disabilities = ((int)( this.disabilities )) ^ ( ((int)( String13.ParseNumber( href_list["disability"] ) ??0 )) );
						}
					}
					this.SetDisabilities( user );
				} else {
					this.SetDisabilities( user );
				}
				return true;
			} else if ( href_list["preference"] == "records" ) {
				
				if ( ( String13.ParseNumber( href_list["record"] ) ??0) >= 1 ) {
					this.SetRecords( user );
					return false;
				} else {
					Interface13.Browse( user, null, "window=records" );
				}

				if ( href_list["task"] == "med_record" ) {
					medmsg = Interface13.Input( Task13.User, "Set your medical notes here.", "Medical Records", String13.HtmlDecode( this.med_record ), null, InputType.StrMultiline );

					if ( medmsg != null ) {
						medmsg = String13.SubStr( medmsg, 1, 3072 );
						medmsg = String13.HtmlEncode( medmsg );
						this.med_record = medmsg;
						this.SetRecords( user );
					}
				}

				if ( href_list["task"] == "sec_record" ) {
					secmsg = Interface13.Input( Task13.User, "Set your security notes here.", "Security Records", String13.HtmlDecode( this.sec_record ), null, InputType.StrMultiline );

					if ( secmsg != null ) {
						secmsg = String13.SubStr( secmsg, 1, 3072 );
						secmsg = String13.HtmlEncode( secmsg );
						this.sec_record = secmsg;
						this.SetRecords( user );
					}
				}

				if ( href_list["task"] == "gen_record" ) {
					genmsg = Interface13.Input( Task13.User, "Set your employment notes here.", "Employment Records", String13.HtmlDecode( this.gen_record ), null, InputType.StrMultiline );

					if ( genmsg != null ) {
						genmsg = String13.SubStr( genmsg, 1, 3072 );
						genmsg = String13.HtmlEncode( genmsg );
						this.gen_record = genmsg;
						this.SetRecords( user );
					}
				}
			} else if ( href_list["preference"] == "set_roles" ) {
				return this.SetRoles( user, href_list );
			} else if ( href_list["preference"] == "toggle_role" ) {
				this.ToggleRole( user, href_list );
			}

			dynamic _r = href_list["task"]; // Was a switch-case, sorry for the mess.
			if ( _r=="random" ) {
				
				dynamic _c = href_list["preference"]; // Was a switch-case, sorry for the mess.
				if ( _c=="name" ) {
					this.real_name = GlobalFuncs.random_name( this.gender, this.species );
				} else if ( _c=="age" ) {
					this.age = Rand13.Int( 17, 85 );
				} else if ( _c=="hair" ) {
					this.r_hair = Rand13.Int( 0, 255 );
					this.g_hair = Rand13.Int( 0, 255 );
					this.b_hair = Rand13.Int( 0, 255 );
				} else if ( _c=="h_style" ) {
					this.h_style = GlobalFuncs.random_hair_style( this.gender, this.species );
				} else if ( _c=="facial" ) {
					this.r_facial = Rand13.Int( 0, 255 );
					this.g_facial = Rand13.Int( 0, 255 );
					this.b_facial = Rand13.Int( 0, 255 );
				} else if ( _c=="f_style" ) {
					this.f_style = GlobalFuncs.random_facial_hair_style( this.gender, this.species );
				} else if ( _c=="underwear" ) {
					this.underwear = Rand13.Int( 1, GlobalVars.underwear_m.len );
					this.ShowChoices( user );
				} else if ( _c=="eyes" ) {
					this.r_eyes = Rand13.Int( 0, 255 );
					this.g_eyes = Rand13.Int( 0, 255 );
					this.b_eyes = Rand13.Int( 0, 255 );
				} else if ( _c=="s_tone" ) {
					this.s_tone = GlobalFuncs.random_skin_tone();
				} else if ( _c=="bag" ) {
					this.backbag = Rand13.Int( 1, 4 );
				} else if ( _c=="all" ) {
					this.randomize_appearance_for();
				}
			} else if ( _r=="input" ) {
				
				dynamic _o = href_list["preference"]; // Was a switch-case, sorry for the mess.
				if ( _o=="name" ) {
					new_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "Choose your character's name:", "Character Preference", null, null, InputType.Str | InputType.Null ) );

					if ( Lang13.Bool( new_name ) ) {
						this.real_name = new_name;
					} else {
						GlobalFuncs.to_chat( user, "<font color='red'>Invalid name. Your name should be at least 2 and at most " + 26 + " characters long. It may only contain the characters A-Z, a-z, -, ' and .</font>" );
					}
				} else if ( _o=="next_hair_style" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.h_style = GlobalFuncs.next_list_item( this.h_style, GlobalVars.hair_styles_male_list );
					} else {
						this.h_style = GlobalFuncs.next_list_item( this.h_style, GlobalVars.hair_styles_female_list );
					}
				} else if ( _o=="previous_hair_style" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.h_style = GlobalFuncs.previous_list_item( this.h_style, GlobalVars.hair_styles_male_list );
					} else {
						this.h_style = GlobalFuncs.previous_list_item( this.h_style, GlobalVars.hair_styles_female_list );
					}
				} else if ( _o=="next_facehair_style" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.f_style = GlobalFuncs.next_list_item( this.f_style, GlobalVars.facial_hair_styles_male_list );
					} else {
						this.f_style = GlobalFuncs.next_list_item( this.f_style, GlobalVars.facial_hair_styles_female_list );
					}
				} else if ( _o=="previous_facehair_style" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.f_style = GlobalFuncs.previous_list_item( this.f_style, GlobalVars.facial_hair_styles_male_list );
					} else {
						this.f_style = GlobalFuncs.previous_list_item( this.f_style, GlobalVars.facial_hair_styles_female_list );
					}
				} else if ( _o=="age" ) {
					new_age = Interface13.Input( user, "Choose your character's age:\n(" + 17 + "-" + 85 + ")", "Character Preference", null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( new_age ) ) {
						this.age = Num13.MaxInt( Num13.MinInt( Num13.Floor( String13.ParseNumber( new_age ) ??0 ), 85 ), 17 );
					}
				} else if ( _o=="species" ) {
					new_species = new ByTable(new object [] { "Human" });
					prev_species = this.species;
					whitelisted = false;

					if ( GlobalVars.config.usealienwhitelist ) {
						
						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.whitelisted_species )) {
							S = _d;
							

							if ( GlobalFuncs.is_alien_whitelisted( user, S ) ) {
								new_species.Add( S );
								whitelisted = true;
							}
						}

						if ( !whitelisted ) {
							Interface13.Alert( user, "You cannot change your species as you need to be whitelisted. If you wish to be whitelisted contact an admin in-game, on the forums, or on IRC." );
						}
					} else {
						new_species = GlobalVars.whitelisted_species;
					}
					this.species = Interface13.Input( "Please select a species", "Character Generation", null, null, new_species, InputType.Any );

					if ( prev_species != this.species ) {
						valid_hairstyles = new ByTable();

						foreach (dynamic _e in Lang13.Enumerate( GlobalVars.hair_styles_list )) {
							hairstyle = _e;
							
							S2 = GlobalVars.hair_styles_list[hairstyle];

							if ( this.gender == GlobalVars.MALE && S2.gender == GlobalVars.FEMALE ) {
								continue;
							}

							if ( this.gender == GlobalVars.FEMALE && S2.gender == GlobalVars.MALE ) {
								continue;
							}
							Interface13.Stat( null, S2.species_allowed.Contains( this.species ) );

							if ( !( this.gender == GlobalVars.FEMALE && S2.gender == GlobalVars.MALE ) ) {
								continue;
							}
							valid_hairstyles[hairstyle] = GlobalVars.hair_styles_list[hairstyle];
						}

						if ( valid_hairstyles.len != 0 ) {
							this.h_style = Rand13.PickFromTable( valid_hairstyles );
						} else {
							this.h_style = GlobalVars.hair_styles_list["Bald"];
						}
						valid_facialhairstyles = new ByTable();

						foreach (dynamic _f in Lang13.Enumerate( GlobalVars.facial_hair_styles_list )) {
							facialhairstyle = _f;
							
							S3 = GlobalVars.facial_hair_styles_list[facialhairstyle];

							if ( this.gender == GlobalVars.MALE && S3.gender == GlobalVars.FEMALE ) {
								continue;
							}

							if ( this.gender == GlobalVars.FEMALE && S3.gender == GlobalVars.MALE ) {
								continue;
							}
							Interface13.Stat( null, S3.species_allowed.Contains( this.species ) );

							if ( !( this.gender == GlobalVars.FEMALE && S3.gender == GlobalVars.MALE ) ) {
								continue;
							}
							valid_facialhairstyles[facialhairstyle] = GlobalVars.facial_hair_styles_list[facialhairstyle];
						}

						if ( valid_facialhairstyles.len != 0 ) {
							this.f_style = Rand13.PickFromTable( valid_facialhairstyles );
						} else {
							this.f_style = GlobalVars.facial_hair_styles_list["Shaved"];
						}
						this.r_hair = 0;
						this.g_hair = 0;
						this.b_hair = 0;
						this.s_tone = 0;
					}
				} else if ( _o=="language" ) {
					languages_available = null;
					new_languages = new ByTable(new object [] { "None" });

					if ( GlobalVars.config.usealienwhitelist ) {
						
						foreach (dynamic _g in Lang13.Enumerate( GlobalVars.all_languages )) {
							L = _g;
							
							lang = GlobalVars.all_languages[L];

							if ( !Lang13.Bool( lang.flags & 2 ) && ( GlobalFuncs.is_alien_whitelisted( user, L ) || !Lang13.Bool( lang.flags & 1 ) ) ) {
								new_languages.Add( lang.name );
								languages_available = true;
							}
						}

						if ( !( languages_available == true ) ) {
							Interface13.Alert( user, "There are not currently any available secondary languages." );
						}
					} else {
						
						foreach (dynamic _h in Lang13.Enumerate( GlobalVars.all_languages )) {
							L2 = _h;
							
							lang2 = GlobalVars.all_languages[L2];

							if ( !Lang13.Bool( lang2.flags & 2 ) ) {
								new_languages.Add( lang2.name );
							}
						}
					}
					this.language = Interface13.Input( "Please select a secondary language", "Character Generation", null, null, new_languages, InputType.Any );
				} else if ( _o=="metadata" ) {
					new_metadata = Interface13.Input( user, "Enter any information you'd like others to see, such as Roleplay-preferences:", "Game Preference", this.metadata, null, InputType.Null | InputType.StrMultiline );

					if ( Lang13.Bool( new_metadata ) ) {
						this.metadata = GlobalFuncs.sanitize( String13.SubStr( new_metadata, 1, 1024 ) );
					}
				} else if ( _o=="b_type" ) {
					new_b_type = Interface13.Input( user, "Choose your character's blood-type:", "Character Preference", null, new ByTable(new object [] { "A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-" }), InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_b_type ) ) {
						this.b_type = new_b_type;
					}
				} else if ( _o=="hair" ) {
					
					if ( this.species == "Human" || this.species == "Unathi" ) {
						new_hair = Interface13.Input( user, "Choose your character's hair colour:", "Character Preference", null, null, InputType.Null | InputType.Color );

						if ( Lang13.Bool( new_hair ) ) {
							this.r_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 2, 4 ) );
							this.g_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 4, 6 ) );
							this.b_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 6, 8 ) );
						}
					}
				} else if ( _o=="h_style" ) {
					valid_hairstyles2 = new ByTable();

					foreach (dynamic _i in Lang13.Enumerate( GlobalVars.hair_styles_list )) {
						hairstyle2 = _i;
						
						S4 = GlobalVars.hair_styles_list[hairstyle2];
						Interface13.Stat( null, S4.species_allowed.Contains( this.species ) );

						if ( !false ) {
							continue;
						}
						valid_hairstyles2[hairstyle2] = GlobalVars.hair_styles_list[hairstyle2];
					}
					new_h_style = Interface13.Input( user, "Choose your character's hair style:", "Character Preference", null, valid_hairstyles2, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_h_style ) ) {
						this.h_style = new_h_style;
					}
				} else if ( _o=="facial" ) {
					new_facial = Interface13.Input( user, "Choose your character's facial-hair colour:", "Character Preference", null, null, InputType.Null | InputType.Color );

					if ( Lang13.Bool( new_facial ) ) {
						this.r_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 2, 4 ) );
						this.g_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 4, 6 ) );
						this.b_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 6, 8 ) );
					}
				} else if ( _o=="f_style" ) {
					valid_facialhairstyles2 = new ByTable();

					foreach (dynamic _j in Lang13.Enumerate( GlobalVars.facial_hair_styles_list )) {
						facialhairstyle2 = _j;
						
						S5 = GlobalVars.facial_hair_styles_list[facialhairstyle2];

						if ( this.gender == GlobalVars.MALE && S5.gender == GlobalVars.FEMALE ) {
							continue;
						}

						if ( this.gender == GlobalVars.FEMALE && S5.gender == GlobalVars.MALE ) {
							continue;
						}
						Interface13.Stat( null, S5.species_allowed.Contains( this.species ) );

						if ( !( this.gender == GlobalVars.FEMALE && S5.gender == GlobalVars.MALE ) ) {
							continue;
						}
						valid_facialhairstyles2[facialhairstyle2] = GlobalVars.facial_hair_styles_list[facialhairstyle2];
					}
					new_f_style = Interface13.Input( user, "Choose your character's facial-hair style:", "Character Preference", null, valid_facialhairstyles2, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_f_style ) ) {
						this.f_style = new_f_style;
					}
				} else if ( _o=="underwear" ) {
					underwear_options = null;

					if ( this.gender == GlobalVars.MALE ) {
						underwear_options = GlobalVars.underwear_m;
					} else {
						underwear_options = GlobalVars.underwear_f;
					}
					new_underwear = Interface13.Input( user, "Choose your character's underwear:", "Character Preference", null, underwear_options, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_underwear ) ) {
						this.underwear = underwear_options.Find( new_underwear );
					}
					this.ShowChoices( user );
				} else if ( _o=="eyes" ) {
					new_eyes = Interface13.Input( user, "Choose your character's eye colour:", "Character Preference", null, null, InputType.Null | InputType.Color );

					if ( Lang13.Bool( new_eyes ) ) {
						this.r_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 2, 4 ) );
						this.g_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 4, 6 ) );
						this.b_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 6, 8 ) );
					}
				} else if ( _o=="s_tone" ) {
					
					if ( this.species != "Human" ) {
						return false;
					}
					new_s_tone = Interface13.Input( user, "Choose your character's skin-tone:\n(Light 1 - 220 Dark)", "Character Preference", null, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( new_s_tone ) ) {
						this.s_tone = 35 - Num13.MaxInt( Num13.MinInt( Num13.Floor( Convert.ToDouble( new_s_tone ) ), 220 ), 1 );
					}
				} else if ( _o=="ooccolor" ) {
					new_ooccolor = Interface13.Input( user, "Choose your OOC colour:", "Game Preference", null, null, InputType.Null | InputType.Color );

					if ( Lang13.Bool( new_ooccolor ) ) {
						this.ooccolor = new_ooccolor;
					}
				} else if ( _o=="bag" ) {
					new_backbag = Interface13.Input( user, "Choose your character's style of bag:", "Character Preference", null, GlobalVars.backbaglist, InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_backbag ) ) {
						this.backbag = GlobalVars.backbaglist.Find( new_backbag );
					}
				} else if ( _o=="nt_relation" ) {
					new_relation = Interface13.Input( user, "Choose your relation to NT. Note that this represents what others can find out about your character by researching your background, not what your character actually thinks.", "Character Preference", null, new ByTable(new object [] { "Loyal", "Supportive", "Neutral", "Skeptical", "Opposed" }), InputType.Null | InputType.Any );

					if ( Lang13.Bool( new_relation ) ) {
						this.nanotrasen_relation = new_relation;
					}
				} else if ( _o=="flavor_text" ) {
					msg = Interface13.Input( Task13.User, "Set the flavor text in your 'examine' verb. This can also be used for OOC notes and preferences!", "Flavor Text", String13.HtmlDecode( this.flavor_text ), null, InputType.StrMultiline );

					if ( msg != null ) {
						msg = String13.SubStr( msg, 1, 1024 );
						msg = String13.HtmlEncode( msg );
						this.flavor_text = msg;
					}
				} else if ( _o=="limbs" ) {
					limb_name = Interface13.Input( user, "Which limb do you want to change?", null, null, new ByTable(new object [] { "Left Leg", "Right Leg", "Left Arm", "Right Arm", "Left Foot", "Right Foot", "Left Hand", "Right Hand" }), InputType.Null | InputType.Any );

					if ( !Lang13.Bool( limb_name ) ) {
						return false;
					}
					limb = null;
					second_limb = null;
					third_limb = null;
					valid_limb_states = new ByTable(new object [] { "Normal", "Amputated", "Prothesis" });

					dynamic _k = limb_name; // Was a switch-case, sorry for the mess.
					if ( _k=="Left Leg" ) {
						limb = "l_leg";
						second_limb = "l_foot";
						valid_limb_states.Add( "Peg Leg" );
					} else if ( _k=="Right Leg" ) {
						limb = "r_leg";
						second_limb = "r_foot";
						valid_limb_states.Add( "Peg Leg" );
					} else if ( _k=="Left Arm" ) {
						limb = "l_arm";
						second_limb = "l_hand";
						valid_limb_states.Add( "Wooden Prosthesis" );
					} else if ( _k=="Right Arm" ) {
						limb = "r_arm";
						second_limb = "r_hand";
						valid_limb_states.Add( "Wooden Prosthesis" );
					} else if ( _k=="Left Foot" ) {
						limb = "l_foot";
						third_limb = "l_leg";
					} else if ( _k=="Right Foot" ) {
						limb = "r_foot";
						third_limb = "r_leg";
					} else if ( _k=="Left Hand" ) {
						limb = "l_hand";
						third_limb = "l_arm";
						valid_limb_states.Add( "Hook Prosthesis" );
					} else if ( _k=="Right Hand" ) {
						limb = "r_hand";
						third_limb = "r_arm";
						valid_limb_states.Add( "Hook Prosthesis" );
					}
					new_state = Interface13.Input( user, "What state do you wish the limb to be in?", null, null, valid_limb_states, InputType.Null | InputType.Any );

					if ( !Lang13.Bool( new_state ) ) {
						return false;
					}

					dynamic _l = new_state; // Was a switch-case, sorry for the mess.
					if ( _l=="Normal" ) {
						this.organ_data[limb] = null;

						if ( Lang13.Bool( third_limb ) ) {
							this.organ_data[third_limb] = null;
						}
					} else if ( _l=="Amputated" ) {
						this.organ_data[limb] = "amputated";

						if ( Lang13.Bool( second_limb ) ) {
							this.organ_data[second_limb] = "amputated";
						}
					} else if ( _l=="Prothesis" ) {
						this.organ_data[limb] = "cyborg";

						if ( Lang13.Bool( second_limb ) ) {
							this.organ_data[second_limb] = "cyborg";
						}
					} else if ( _l=="Peg Leg" || _l=="Wooden Prosthesis" || _l=="Hook Prosthesis" ) {
						this.organ_data[limb] = "peg";

						if ( Lang13.Bool( second_limb ) ) {
							
							if ( limb == "l_arm" || limb == "r_arm" ) {
								this.organ_data[second_limb] = "peg";
							} else {
								this.organ_data[second_limb] = "amputated";
							}
						}
					}
				} else if ( _o=="organs" ) {
					organ_name = Interface13.Input( user, "Which internal function do you want to change?", null, null, new ByTable(new object [] { "Heart", "Eyes", "Lungs", "Liver", "Kidneys" }), InputType.Null | InputType.Any );

					if ( !Lang13.Bool( organ_name ) ) {
						return false;
					}
					organ = null;

					dynamic _m = organ_name; // Was a switch-case, sorry for the mess.
					if ( _m=="Heart" ) {
						organ = "heart";
					} else if ( _m=="Eyes" ) {
						organ = "eyes";
					} else if ( _m=="Lungs" ) {
						organ = "lungs";
					} else if ( _m=="Liver" ) {
						organ = "liver";
					} else if ( _m=="Kidneys" ) {
						organ = "kidneys";
					}
					new_state2 = Interface13.Input( user, "What state do you wish the organ to be in?", null, null, new ByTable(new object [] { "Normal", "Assisted", "Mechanical" }), InputType.Null | InputType.Any );

					if ( !Lang13.Bool( new_state2 ) ) {
						return false;
					}

					dynamic _n = new_state2; // Was a switch-case, sorry for the mess.
					if ( _n=="Normal" ) {
						this.organ_data[organ] = null;
					} else if ( _n=="Assisted" ) {
						this.organ_data[organ] = "assisted";
					} else if ( _n=="Mechanical" ) {
						this.organ_data[organ] = "mechanical";
					}
				} else if ( _o=="skin_style" ) {
					skin_style_name = Interface13.Input( user, "Select a new skin style", null, null, new ByTable(new object [] { "default1", "default2", "default3" }), InputType.Null | InputType.Any );

					if ( !Lang13.Bool( skin_style_name ) ) {
						return false;
					}
				}
			} else {
				
				dynamic _q = href_list["preference"]; // Was a switch-case, sorry for the mess.
				if ( _q=="gender" ) {
					
					if ( this.gender == GlobalVars.MALE ) {
						this.gender = GlobalVars.FEMALE;
					} else {
						this.gender = GlobalVars.MALE;
					}
					this.f_style = GlobalFuncs.random_facial_hair_style( this.gender );
					this.h_style = GlobalFuncs.random_hair_style( this.gender );
				} else if ( _q=="hear_adminhelps" ) {
					this.toggles ^= 1;
				} else if ( _q=="ui" ) {
					
					dynamic _p = this.UI_style; // Was a switch-case, sorry for the mess.
					if ( _p=="Midnight" ) {
						this.UI_style = "Orange";
					} else if ( _p=="Orange" ) {
						this.UI_style = "old";
					} else if ( _p=="old" ) {
						this.UI_style = "White";
					} else {
						this.UI_style = "Midnight";
					}
				} else if ( _q=="UIcolor" ) {
					UI_style_color_new = Interface13.Input( user, "Choose your UI colour, dark colours are not recommended!", null, null, null, InputType.Null | InputType.Color );

					if ( !Lang13.Bool( UI_style_color_new ) ) {
						return false;
					}
					this.UI_style_color = UI_style_color_new;
				} else if ( _q=="UIalpha" ) {
					UI_style_alpha_new = Interface13.Input( user, "Select a new alpha(transparency) parameter for UI, between 50 and 255", null, null, null, InputType.Num );

					if ( ( ( !Lang13.Bool( UI_style_alpha_new ) ?1:0) | ( !( Convert.ToDouble( UI_style_alpha_new ) <= 255 && Convert.ToDouble( UI_style_alpha_new ) >= 50 ) ?1:0) ) != 0 ) {
						return false;
					}
					this.UI_style_alpha = UI_style_alpha_new;
				} else if ( _q=="name" ) {
					this.be_random_name = !Lang13.Bool( this.be_random_name );
				} else if ( _q=="all" ) {
					this.be_random_body = !this.be_random_body;
				} else if ( _q=="special_popup" ) {
					this.special_popup = !Lang13.Bool( this.special_popup );
				} else if ( _q=="randomslot" ) {
					this.randomslot = !Lang13.Bool( this.randomslot );
				} else if ( _q=="hear_midis" ) {
					this.toggles ^= 2;
				} else if ( _q=="lobby_music" ) {
					this.toggles ^= 8;

					if ( Lang13.Bool( this.toggles & 8 ) ) {
						GlobalFuncs.to_chat( user, new Sound( GlobalVars.ticker.login_music, false, false, 1, 85 ) );
					} else {
						GlobalFuncs.to_chat( user, new Sound( null, false, false, 1, 85 ) );
					}
				} else if ( _q=="jukebox" ) {
					this.toggles ^= 16384;
				} else if ( _q=="wmp" ) {
					this.usewmp = !Lang13.Bool( this.usewmp );
				} else if ( _q=="nanoui" ) {
					this.usenanoui = !Lang13.Bool( this.usenanoui );
				} else if ( _q=="progbar" ) {
					this.progress_bars = !Lang13.Bool( this.progress_bars );
				} else if ( _q=="ghost_ears" ) {
					this.toggles ^= 64;
				} else if ( _q=="ghost_sight" ) {
					this.toggles ^= 128;
				} else if ( _q=="ghost_radio" ) {
					this.toggles ^= 8192;
				} else if ( _q=="ghost_pda" ) {
					this.toggles ^= 32768;
				} else if ( _q=="save" ) {
					
					if ( Game13.timeofday >= this.lastPolled + 300 ) {
						this.save_preferences_sqlite( user, user.ckey );
						this.save_character_sqlite( user.ckey, user, this.default_slot );
						this.lastPolled = Game13.timeofday;
					} else {
						GlobalFuncs.to_chat( user, "You need to wait " + Num13.Floor( ( this.lastPolled + 300 - Game13.timeofday ) / 10 ) + " seconds before you can save again." );
					}
				} else if ( _q=="reload" ) {
					this.load_preferences_sqlite( user );
					this.load_save_sqlite( user.ckey, user, this.default_slot );
				} else if ( _q=="open_load_dialog" ) {
					
					if ( !GlobalFuncs.IsGuestKey( user.key ) ) {
						this.open_load_dialog( user );
					}
				} else if ( _q=="close_load_dialog" ) {
					this.close_load_dialog( user );
				} else if ( _q=="changeslot" ) {
					num = String13.ParseNumber( href_list["num"] );
					this.load_save_sqlite( user.ckey, user, num );
					this.default_slot = num;
					this.close_load_dialog( user );
				} else if ( _q=="tab" ) {
					
					if ( Lang13.Bool( href_list["tab"] ) ) {
						this.current_tab = String13.ParseNumber( href_list["tab"] );
					}
				}
			}
			this.ShowChoices( user );
			return true;
		}

		// Function from file: preferences.dm
		public bool SetRole( Mob user = null, ByTable href_list = null ) {
			dynamic role_id = null;
			string question = null;
			string answer = null;
			int newval = 0;

			role_id = href_list["role_id"];
			Interface13.Stat( null, GlobalVars.special_roles.Contains( role_id ) );

			if ( !false ) {
				GlobalFuncs.to_chat( user, "<span class='danger'>BUG: Unable to find role " + role_id + ".</span>" );
				return false;
			}

			if ( this.roles[role_id] == null || this.roles[role_id] == "" ) {
				this.roles[role_id] = 0;
			}
			question = new Txt( "Would you like to be " ).a( role_id ).item().str( @" this round?

No/Yes:  Only affects this round.
Never/Always: Saved for later rounds.

NOTE:  The change will take effect AFTER any current recruiting periods." ).ToString();
			answer = Interface13.Alert( question, "Role Preference", "Never", "No", "Yes", "Always" );
			newval = 0;

			switch ((string)( answer )) {
				case "Never":
					newval = 2;
					break;
				case "No":
					newval = 0;
					break;
				case "Yes":
					newval = 1;
					break;
				case "Always":
					newval = 3;
					break;
			}
			this.roles[role_id] = this.roles[role_id] & 65532 | newval;
			this.save_preferences_sqlite( user, user.ckey );
			this.save_character_sqlite( user.ckey, user, this.default_slot );
			return true;
		}

		// Function from file: preferences.dm
		public bool ToggleRole( Mob user = null, ByTable href_list = null ) {
			dynamic role_id = null;

			role_id = href_list["role_id"];
			Interface13.Stat( null, GlobalVars.special_roles.Contains( role_id ) );

			if ( !false ) {
				GlobalFuncs.to_chat( user, "<span class='danger'>BUG: Unable to find role " + role_id + ".</span>" );
				return false;
			}

			if ( this.roles[role_id] == null || this.roles[role_id] == "" ) {
				this.roles[role_id] = 0;
			}
			this.roles[role_id] |= 2;
			this.roles[role_id] ^= 1;
			return true;
		}

		// Function from file: preferences.dm
		public bool SetRoles( Mob user = null, ByTable href_list = null ) {
			dynamic role_id = null;
			double? oldval = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.special_roles )) {
				role_id = _a;
				
				Interface13.Stat( null, href_list.Contains( role_id ) );

				if ( !false ) {
					GlobalFuncs.to_chat( user, "<span class='danger'>BUG: Unable to find role " + role_id + ".</span>" );
					continue;
				}
				oldval = String13.ParseNumber( this.roles[role_id] );
				this.roles[role_id] = String13.ParseNumber( href_list[role_id] );

				if ( oldval != Lang13.DoubleNullable( this.roles[role_id] ) ) {
					GlobalFuncs.to_chat( user, "<span class='info'>Set role " + role_id + " to " + GlobalFuncs.get_role_desire_str( user.client.prefs.roles[role_id] ) + "!</span>" );
				}
			}
			this.save_preferences_sqlite( user, user.ckey );
			this.save_character_sqlite( user.ckey, user, this.default_slot );
			return true;
		}

		// Function from file: preferences.dm
		public bool SetJobDepartment( Job job = null, int level = 0 ) {
			
			if ( !( job != null ) || !( level != 0 ) ) {
				return false;
			}

			switch ((int)( level )) {
				case 1:
					this.job_civilian_high = 0;
					this.job_medsci_high = 0;
					this.job_engsec_high = 0;
					return true;
					break;
				case 2:
					this.job_civilian_med |= this.job_civilian_high;
					this.job_medsci_med |= this.job_medsci_high;
					this.job_engsec_med |= this.job_engsec_high;
					this.job_civilian_high = 0;
					this.job_medsci_high = 0;
					this.job_engsec_high = 0;
					break;
			}

			switch ((int)( job.department_flag )) {
				case 4:
					
					switch ((int)( level )) {
						case 2:
							this.job_civilian_high = job.flag;
							this.job_civilian_med &= ~job.flag;
							break;
						case 3:
							this.job_civilian_med |= job.flag;
							this.job_civilian_low &= ~job.flag;
							break;
						default:
							this.job_civilian_low |= job.flag;
							break;
					}
					break;
				case 2:
					
					switch ((int)( level )) {
						case 2:
							this.job_medsci_high = job.flag;
							this.job_medsci_med &= ~job.flag;
							break;
						case 3:
							this.job_medsci_med |= job.flag;
							this.job_medsci_low &= ~job.flag;
							break;
						default:
							this.job_medsci_low |= job.flag;
							break;
					}
					break;
				case 1:
					
					switch ((int)( level )) {
						case 2:
							this.job_engsec_high = job.flag;
							this.job_engsec_med &= ~job.flag;
							break;
						case 3:
							this.job_engsec_med |= job.flag;
							this.job_engsec_low &= ~job.flag;
							break;
						default:
							this.job_engsec_low |= job.flag;
							break;
					}
					break;
			}
			return true;
		}

		// Function from file: preferences.dm
		public dynamic GetJobDepartment( Job job = null, double level = 0 ) {
			
			if ( !( job != null ) || !( level != 0 ) ) {
				return 0;
			}

			switch ((int)( job.department_flag )) {
				case 4:
					
					switch ((double)( level )) {
						case 1:
							return this.job_civilian_high;
							break;
						case 2:
							return this.job_civilian_med;
							break;
						case 3:
							return this.job_civilian_low;
							break;
					}
					break;
				case 2:
					
					switch ((double)( level )) {
						case 1:
							return this.job_medsci_high;
							break;
						case 2:
							return this.job_medsci_med;
							break;
						case 3:
							return this.job_medsci_low;
							break;
					}
					break;
				case 1:
					
					switch ((double)( level )) {
						case 1:
							return this.job_engsec_high;
							break;
						case 2:
							return this.job_engsec_med;
							break;
						case 3:
							return this.job_engsec_low;
							break;
					}
					break;
			}
			return 0;
		}

		// Function from file: preferences.dm
		public void ResetJobs(  ) {
			this.job_civilian_high = 0;
			this.job_civilian_med = 0;
			this.job_civilian_low = 0;
			this.job_medsci_high = 0;
			this.job_medsci_med = 0;
			this.job_medsci_low = 0;
			this.job_engsec_high = 0;
			this.job_engsec_med = 0;
			this.job_engsec_low = 0;
			return;
		}

		// Function from file: preferences.dm
		public bool SetJob( Mob user = null, string role = null ) {
			Job job = null;

			job = GlobalVars.job_master.GetJob( role );

			if ( !( job != null ) ) {
				Interface13.Browse( user, null, "window=mob_occupation" );
				this.ShowChoices( user );
				return false;
			}

			if ( role == "Assistant" ) {
				
				if ( Lang13.Bool( this.job_civilian_low & job.flag ) ) {
					this.job_civilian_low &= ~job.flag;
				} else {
					this.job_civilian_low |= job.flag;
				}
				this.SetChoices( user );
				return true;
			}

			if ( Lang13.Bool( this.GetJobDepartment( job, 1 ) & job.flag ) ) {
				this.SetJobDepartment( job, 1 );
			} else if ( Lang13.Bool( this.GetJobDepartment( job, 2 ) & job.flag ) ) {
				this.SetJobDepartment( job, 2 );
			} else if ( Lang13.Bool( this.GetJobDepartment( job, 3 ) & job.flag ) ) {
				this.SetJobDepartment( job, 3 );
			} else {
				this.SetJobDepartment( job, 4 );
			}
			this.SetChoices( user );
			return true;
		}

		// Function from file: preferences.dm
		public void SetPlayerAltTitle( dynamic job = null, dynamic new_title = null ) {
			
			if ( this.player_alt_titles.Find( job.title ) != 0 ) {
				this.player_alt_titles.Remove( job.title );
			}

			if ( job.title != new_title ) {
				this.player_alt_titles[job.title] = new_title;
			}
			return;
		}

		// Function from file: preferences.dm
		public dynamic GetPlayerAltTitle( dynamic job = null ) {
			return ( this.player_alt_titles.Find( job.title ) > 0 ? this.player_alt_titles[job.title] : job.title );
		}

		// Function from file: preferences.dm
		public void SetRecords( Mob user = null ) {
			string HTML = null;

			HTML = "<body>";
			HTML += new Txt( "<tt><center>\n		<b>Set Character Records</b><br>\n		<a href=\"byond://?src=" ).Ref( user ).str( ";preference=records;task=med_record\">Medical Records</a><br>" ).ToString();

			if ( Lang13.Length( this.med_record ) <= 40 ) {
				HTML += "" + this.med_record;
			} else {
				HTML += "" + String13.SubStr( this.med_record, 1, 37 ) + "...";
			}
			HTML += new Txt( "<br><br><a href=\"byond://?src=" ).Ref( user ).str( ";preference=records;task=gen_record\">Employment Records</a><br>" ).ToString();

			if ( Lang13.Length( this.gen_record ) <= 40 ) {
				HTML += "" + this.gen_record;
			} else {
				HTML += "" + String13.SubStr( this.gen_record, 1, 37 ) + "...";
			}
			HTML += new Txt( "<br><br><a href=\"byond://?src=" ).Ref( user ).str( ";preference=records;task=sec_record\">Security Records</a><br>" ).ToString();

			if ( Lang13.Length( this.sec_record ) <= 40 ) {
				HTML += "" + this.sec_record + "<br>";
			} else {
				HTML += "" + String13.SubStr( this.sec_record, 1, 37 ) + "...<br>";
			}
			HTML += new Txt( "<br>\n		<a href=\"byond://?src=" ).Ref( user ).str( ";preference=records;records=-1\">[Done]</a>\n		</center></tt>" ).ToString();
			Interface13.Browse( user, null, "window=preferences" );
			Interface13.Browse( user, HTML, "window=records;size=350x300" );
			return;
		}

		// Function from file: preferences.dm
		public void SetDisabilities( Mob user = null ) {
			string HTML = null;

			HTML = "<body>";
			HTML += "<tt><center>\n		<b>Choose disabilities</b><ul>";
			HTML += this.ShowDisabilityState( user, 1, "Needs Glasses" );
			HTML += this.ShowDisabilityState( user, 2, "Obese" );
			HTML += this.ShowDisabilityState( user, 4, "Seizures" );
			HTML += this.ShowDisabilityState( user, 8, "Deaf" );
			HTML += "</ul>\n		<a href=\"?_src_=prefs;task=close;preference=disabilities\">[Done]</a>\n		<a href=\"?_src_=prefs;task=reset;preference=disabilities\">[Reset]</a>\n		</center></tt>";
			Interface13.Browse( user, null, "window=preferences" );
			Interface13.Browse( user, HTML, "window=disabil;size=350x300" );
			return;
		}

		// Function from file: preferences.dm
		public string ShowDisabilityState( Mob user = null, int flag = 0, string label = null ) {
			
			if ( flag == 2 && this.species != "Human" ) {
				return "<li><i>" + this.species + " cannot be fat.</i></li>";
			}
			return "<li><b>" + label + ":</b> <a href=\"?_src_=prefs;task=input;preference=disabilities;disability=" + flag + "\">" + ( ( ((int)( this.disabilities ??0 )) & flag ) != 0 ? "Yes" : "No" ) + "</a></li>";
		}

		// Function from file: preferences.dm
		public void ShowChoices( Mob user = null ) {
			dynamic preview_front = null;
			dynamic preview_side = null;
			string dat = null;
			Browser popup = null;

			
			if ( !( user != null ) || !( user.client != null ) ) {
				return;
			}
			this.update_preview_icon();
			preview_front = File13.Cache( this.preview_icon_front );
			preview_side = File13.Cache( this.preview_icon_side );
			Interface13.CacheBrowseResource( user, preview_front, "previewicon.png" );
			Interface13.CacheBrowseResource( user, preview_side, "previewicon2.png" );
			dat = "<html><link href='./common.css' rel='stylesheet' type='text/css'><body>";

			if ( !GlobalFuncs.IsGuestKey( user.key ) ) {
				dat += new Txt( "<center>\n			Slot <b>" ).item( this.slot_name ).str( "</b> -\n			<a href=\"byond://?src=" ).Ref( user ).str( ";preference=open_load_dialog\">Load slot</a> -\n			<a href=\"byond://?src=" ).Ref( user ).str( ";preference=save\">Save slot</a> -\n			<a href=\"byond://?src=" ).Ref( user ).str( ";preference=reload\">Reload slot</a>\n			</center><hr>" ).ToString();
			} else {
				dat += "Please create an account to save your preferences.";
			}
			dat += "<center><a href='?_src_=prefs;preference=tab;tab=0' " + ( this.current_tab == 0 ? "class='linkOn'" : "" ) + ">Character Settings</a> | ";
			dat += "<a href='?_src_=prefs;preference=tab;tab=1' " + ( this.current_tab == 1 ? "class='linkOn'" : "" ) + ">UI Settings</a> | ";
			dat += "<a href='?_src_=prefs;preference=tab;tab=2' " + ( this.current_tab == 2 ? "class='linkOn'" : "" ) + ">General Settings</a></center><br>";

			if ( Lang13.Bool( GlobalFuncs.appearance_isbanned( user ) ) ) {
				dat += "<b>You are banned from using custom names and appearances. You can continue to adjust your characters, but you will be randomised once you join the game.</b><br>";
			}

			switch ((double?)( this.current_tab )) {
				case 0:
					dat = this.setup_character_options( dat, user );
					break;
				case 1:
					dat = this.setup_UI( dat, user );
					break;
				case 2:
					dat = this.setup_special( dat, user );
					break;
			}
			dat += "<br><hr>";

			if ( !GlobalFuncs.IsGuestKey( user.key ) ) {
				dat += "<center><a href='?_src_=prefs;preference=load'>Undo</a> |\n			<a href='?_src_=prefs;preference=save'>Save Setup</a> | ";
			}
			dat += "<a href='?_src_=prefs;preference=reset_all'>Reset Setup</a>\n		</center></body></html>";
			popup = new Browser( user, "preferences", "<div align='center'>Character Setup</div>", 680, 640 );
			popup.set_content( dat );
			popup.open( false );
			return;
		}

		// Function from file: preferences.dm
		public void SetChoices( Mob user = null, int? limit = null, ByTable splitJobs = null, int? widthPerColumn = null, int? height = null ) {
			limit = limit ?? 17;
			splitJobs = splitJobs ?? new ByTable(new object [] { "Chief Engineer", "AI" });
			widthPerColumn = widthPerColumn ?? 295;
			height = height ?? 620;

			int? width = null;
			string HTML = null;
			int? index = null;
			Job lastJob = null;
			Job job = null;
			int? i = null;
			string rank = null;
			int available_in_days = 0;
			string prefLevelLabel = null;
			string prefLevelColor = null;
			int prefUpperLevel = 0;
			int prefLowerLevel = 0;
			int? i2 = null;
			Browser popup = null;

			
			if ( !( GlobalVars.job_master != null ) ) {
				return;
			}
			width = widthPerColumn;
			HTML = "<link href='./common.css' rel='stylesheet' type='text/css'><body>";
			HTML += "<script type='text/javascript'>function setJobPrefRedirect(level, rank) { window.location.href='?_src_=prefs;preference=job;task=input;level=' + level + ';text=' + encodeURIComponent(rank); return false; }</script>";
			HTML += @"<center>
		<b>Choose occupation chances</b><br>
		<div align='center'>Left-click to raise an occupation preference, right-click to lower it.<br><div>
		<a href='?_src_=prefs;preference=job;task=close'>Done</a></center><br>
		<table width='100%' cellpadding='1' cellspacing='0'><tr><td width='20%'>
		<table width='100%' cellpadding='1' cellspacing='0'>";
			index = -1;

			if ( !( GlobalVars.job_master != null ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.job_master.occupations, typeof(Job) )) {
				job = _a;
				
				index += 1;

				if ( ( index ??0) >= ( limit ??0) || false ) {
					width += widthPerColumn ??0;

					if ( ( index ??0) < ( limit ??0) && lastJob != null ) {
						i = null;
						i = 0;

						while (( i ??0) < ( limit ??0) - ( index ??0)) {
							HTML += "<tr bgcolor='" + lastJob.selection_color + "'><td width='60%' align='right'>&nbsp</td><td>&nbsp</td></tr>";
							i += 1;
						}
					}
					HTML += "</table></td><td width='20%'><table width='100%' cellpadding='1' cellspacing='0'>";
					index = 0;
				}
				HTML += "<tr bgcolor='" + job.selection_color + "'><td width='60%' align='right'>";
				rank = job.title;
				lastJob = job;

				if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( user, rank ) ) ) {
					HTML += "<font color=red>" + rank + "</font></td><td><font color=red><b> [BANNED]</b></font></td></tr>";
					continue;
				}

				if ( !job.player_old_enough( user.client ) ) {
					available_in_days = job.available_in_days( user.client );
					HTML += "<font color=red>" + rank + "</font></td><td><font color=red> [IN " + available_in_days + " DAYS]</font></td></tr>";
					continue;
				}

				if ( Lang13.Bool( this.job_civilian_low & 8192 ) && rank != "Assistant" ) {
					HTML += "<font color=orange>" + rank + "</font></td><td></td></tr>";
					continue;
				}
				Interface13.Stat( null, GlobalVars.command_positions.Contains( rank ) );

				if ( Lang13.Bool( this.job_civilian_low & 8192 ) && rank != "Assistant" || rank == "AI" ) {
					
					if ( job.alt_titles != null ) {
						HTML += new Txt( "<b><span class='dark'><a href=\"byond://?src=" ).Ref( user ).str( ";preference=job;task=alt_title;job=" ).Ref( job ).str( "\">" ).item( this.GetPlayerAltTitle( job ) ).str( "</a></span></b>" ).ToString();
					} else {
						HTML += "<b><span class='dark'>" + rank + "</span></b>";
					}
				} else if ( job.alt_titles != null ) {
					HTML += new Txt( "<span class='dark'><a href=\"byond://?src=" ).Ref( user ).str( ";preference=job;task=alt_title;job=" ).Ref( job ).str( "\">" ).item( this.GetPlayerAltTitle( job ) ).str( "</a></span>" ).ToString();
				} else {
					HTML += "<span class='dark'>" + rank + "</span>";
				}
				HTML += "</td><td width='40%'>";
				prefLevelLabel = "ERROR";
				prefLevelColor = "pink";
				prefUpperLevel = -1;
				prefLowerLevel = -1;

				if ( Lang13.Bool( this.GetJobDepartment( job, 1 ) & job.flag ) ) {
					prefLevelLabel = "High";
					prefLevelColor = "slateblue";
					prefUpperLevel = 4;
					prefLowerLevel = 2;
				} else if ( Lang13.Bool( this.GetJobDepartment( job, 2 ) & job.flag ) ) {
					prefLevelLabel = "Medium";
					prefLevelColor = "green";
					prefUpperLevel = 1;
					prefLowerLevel = 3;
				} else if ( Lang13.Bool( this.GetJobDepartment( job, 3 ) & job.flag ) ) {
					prefLevelLabel = "Low";
					prefLevelColor = "orange";
					prefUpperLevel = 2;
					prefLowerLevel = 4;
				} else {
					prefLevelLabel = "NEVER";
					prefLevelColor = "red";
					prefUpperLevel = 3;
					prefLowerLevel = 1;
				}
				HTML += "<a class='white' href='?_src_=prefs;preference=job;task=input;level=" + prefUpperLevel + ";text=" + rank + "' oncontextmenu='javascript:return setJobPrefRedirect(" + prefLowerLevel + ", \"" + rank + "\");'>";

				if ( rank == "Assistant" ) {
					
					if ( Lang13.Bool( this.job_civilian_low & 8192 ) ) {
						HTML += " <font color=green>Yes</font>";
					} else {
						HTML += " <font color=red>No</font>";
					}
					HTML += "</a></td></tr>";
					continue;
				}
				HTML += "<font color=" + prefLevelColor + ">" + prefLevelLabel + "</font>";
				HTML += "</a></td></tr>";
			}
			i2 = null;
			i2 = 1;

			while (( i2 ??0) < ( limit ??0) - ( index ??0)) {
				HTML += "<tr bgcolor='" + lastJob.selection_color + "'><td width='60%' align='right'>&nbsp</td><td>&nbsp</td></tr>";
				i2 += 1;
			}
			HTML += "</td'></tr></table>\n		</center></table>";

			dynamic _b = this.alternate_option; // Was a switch-case, sorry for the mess.
			if ( _b==0 ) {
				HTML += "<center><br><a href='?_src_=prefs;preference=job;task=random'>Get random job if preferences unavailable</a></center><br>";
			} else if ( _b==1 ) {
				HTML += "<center><br><a href='?_src_=prefs;preference=job;task=random'>Be assistant if preference unavailable</a></center><br>";
			} else if ( _b==2 ) {
				HTML += "<center><br><a href='?_src_=prefs;preference=job;task=random'>Return to lobby if preference unavailable</a></center><br>";
			}
			HTML += "<center><a href='?_src_=prefs;preference=job;task=reset'>Reset</a></center>\n		</tt>";
			Interface13.Browse( user, null, "window=preferences" );
			popup = new Browser( user, "mob_occupation", "<div align='center'>Occupation Preferences</div>", width, height );
			popup.set_content( HTML );
			popup.open( false );
			return;
		}

		// Function from file: preferences.dm
		public string setup_special( string dat = null, Mob user = null ) {
			dynamic i = null;
			dynamic wikiroute = null;
			dynamic i2 = null;
			dynamic wikiroute2 = null;

			dat += new Txt( "<table><tr><td width='340px' height='300px' valign='top'>\n	<h2>General Settings</h2>\n	<b>Play admin midis:</b> <a href='?_src_=prefs;preference=hear_midis'><b>" ).item( ( Lang13.Bool( this.toggles & 2 ) ? "Yes" : "No" ) ).str( "</b></a><br>\n	<b>Play lobby music:</b> <a href='?_src_=prefs;preference=lobby_music'><b>" ).item( ( Lang13.Bool( this.toggles & 8 ) ? "Yes" : "No" ) ).str( "</b></a><br>\n	<b>Hear streamed media:</b> <a href='?_src_=prefs;preference=jukebox'><b>" ).item( ( Lang13.Bool( this.toggles & 16384 ) ? "Yes" : "No" ) ).str( "</b></a><br>\n	<b>Use WMP:</b> <a href='?_src_=prefs;preference=wmp'><b>" ).item( ( Lang13.Bool( this.usewmp ) ? "Yes" : "No" ) ).str( "</b></a><br>\n	<b>Use NanoUI:</b> <a href='?_src_=prefs;preference=nanoui'><b>" ).item( ( Lang13.Bool( this.usenanoui ) ? "Yes" : "No" ) ).str( "</b></a><br>\n	<b>Progress Bars:</b> <a href='?_src_=prefs;preference=progbar'><b>" ).item( ( Lang13.Bool( this.progress_bars ) ? "Yes" : "No" ) ).str( "</b></a><br>\n	<b>Randomized Character Slot:</b> <a href='?_src_=prefs;preference=randomslot'><b>" ).item( ( Lang13.Bool( this.randomslot ) ? "Yes" : "No" ) ).str( "</b></a><br>\n	<b>Ghost ears:</b> <a href='?_src_=prefs;preference=ghost_ears'><b>" ).item( ( Lang13.Bool( this.toggles & 64 ) ? "All Speech" : "Nearby Speech" ) ).str( "</b></a><br>\n	<b>Ghost sight:</b> <a href='?_src_=prefs;preference=ghost_sight'><b>" ).item( ( Lang13.Bool( this.toggles & 128 ) ? "All Emotes" : "Nearby Emotes" ) ).str( "</b></a><br>\n	<b>Ghost radio:</b> <a href='?_src_=prefs;preference=ghost_radio'><b>" ).item( ( Lang13.Bool( this.toggles & 8192 ) ? "All Chatter" : "Nearby Speakers" ) ).str( "</b></a><br>\n	<b>Ghost PDA:</b> <a href='?_src_=prefs;preference=ghost_pda'><b>" ).item( ( Lang13.Bool( this.toggles & 32768 ) ? "All PDA Messages" : "No PDA Messages" ) ).str( "</b></a><br>\n	<b>Special Windows: </b><a href='?_src_=prefs;preference=special_popup'><b>" ).item( ( Lang13.Bool( this.special_popup ) ? "Yes" : "No" ) ).str( "</b></a><br>\n	<b>Character Records:<b> " ).item( ( Lang13.Bool( GlobalFuncs.jobban_isbanned( user, "Records" ) ) ? "Banned" : new Txt( "<a href=\"byond://?src=" ).Ref( user ).str( ";preference=records;record=1\">Set</a></b><br>" ).ToString() ) ).str( "\n	<b>Flavor Text:</b><a href='byond://?src=" ).Ref( user ).str( ";preference=flavor_text;task=input'>Set</a><br>\n	" ).ToString();

			if ( GlobalVars.config.allow_Metadata ) {
				dat += "<b>OOC Notes:</b> <a href='?_src_=prefs;preference=metadata;task=input'> Edit </a><br>";
			}
			dat += "</td><td width='300px' height='300px' valign='top'><h2>Antagonist Settings</h2>";

			if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( user, "Syndicate" ) ) ) {
				dat += "<b>You are banned from antagonist roles.</b>";
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.antag_roles )) {
					i = _a;
					

					if ( Lang13.Bool( GlobalVars.antag_roles[i] ) ) {
						
						if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( user, i ) ) ) {
							dat += "<b>Be " + i + ":</b> <font color=red><b> [BANNED]</b></font><br>";
						} else if ( i == "pai candidate" ) {
							
							if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( user, "pAI" ) ) ) {
								dat += "<b>Be " + i + ":</b> <font color=red><b> [BANNED]</b></font><br>";
							}
						} else {
							wikiroute = GlobalVars.role_wiki[i];
							dat += "<b>Be " + i + ":</b> <a href='?_src_=prefs;preference=toggle_role;role_id=" + i + "'><b>" + ( Lang13.Bool( this.roles[i] & 1 ) ? "Yes" : "No" ) + "</b></a> " + ( Lang13.Bool( wikiroute ) ? new Txt( "<a HREF='?src=" ).Ref( user ).str( ";getwiki=" ).item( wikiroute ).str( "'>wiki</a>" ).ToString() : "" ) + "<br>";
						}
					}
				}
			}
			dat += "</td><td width='300px' height='300px' valign='top'><h2>Special Roles Settings</h2>";

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.nonantag_roles )) {
				i2 = _b;
				

				if ( Lang13.Bool( GlobalVars.nonantag_roles[i2] ) ) {
					
					if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( user, i2 ) ) ) {
						dat += "<b>Be " + i2 + ":</b> <font color=red><b> [BANNED]</b></font><br>";
					} else if ( i2 == "pai candidate" ) {
						
						if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( user, "pAI" ) ) ) {
							dat += "<b>Be " + i2 + ":</b> <font color=red><b> [BANNED]</b></font><br>";
						}
					} else {
						wikiroute2 = GlobalVars.role_wiki[i2];
						dat += "<b>Be " + i2 + ":</b> <a href='?_src_=prefs;preference=toggle_role;role_id=" + i2 + "'><b>" + ( Lang13.Bool( this.roles[i2] & 1 ) ? "Yes" : "No" ) + "</b></a> " + ( Lang13.Bool( wikiroute2 ) ? new Txt( "<a HREF='?src=" ).Ref( user ).str( ";getwiki=" ).item( wikiroute2 ).str( "'>wiki</a>" ).ToString() : "" ) + "<br>";
					}
				}
			}
			dat += "</td></tr></table>";
			return dat;
		}

		// Function from file: preferences.dm
		public string setup_UI( string dat = null, Mob user = null ) {
			dat += "<b>UI Style:</b> <a href='?_src_=prefs;preference=ui'><b>" + this.UI_style + "</b></a><br>\n	<b>Custom UI</b>(recommended for White UI): <span style='border:1px solid #161616; background-color: #" + this.UI_style_color + ";'>&nbsp;&nbsp;&nbsp;</span><br>Color: <a href='?_src_=prefs;preference=UIcolor'><b>" + this.UI_style_color + "</b></a><br>\n	Alpha(transparency): <a href='?_src_=prefs;preference=UIalpha'><b>" + this.UI_style_alpha + "</b></a><br>\n	";
			return dat;
		}

		// Function from file: preferences.dm
		public string setup_character_options( string dat = null, Mob user = null ) {
			dat += new Txt( @"<center><h2>Occupation Choices</h2>
	<a href='?_src_=prefs;preference=job;task=menu'>Set Occupation Preferences</a><br></center>
	<h2>Identity</h2>
	<table width='100%'><tr><td width='75%' valign='top'>
	<a href='?_src_=prefs;preference=name;task=random'>Random Name</a>
	<a href='?_src_=prefs;preference=name'>Always Random Name: " ).item( ( Lang13.Bool( this.be_random_name ) ? "Yes" : "No" ) ).str( "</a><br>\n	<b>Name:</b> <a href='?_src_=prefs;preference=name;task=input'>" ).item( this.real_name ).str( "</a><BR>\n	<b>Gender:</b> <a href='?_src_=prefs;preference=gender'>" ).item( ( this.gender == GlobalVars.MALE ? "Male" : "Female" ) ).str( "</a><BR>\n	<b>Age:</b> <a href='?_src_=prefs;preference=age;task=input'>" ).item( this.age ).str( @"</a>
	</td><td valign='center'>
	<div class='statusDisplay'><center><img src=previewicon.png height=64 width=64><img src=previewicon2.png height=64 width=64></center></div>
	</td></tr></table>
	<h2>Body</h2>
	<a href='?_src_=prefs;preference=all;task=random'>Random Body</A>
	<a href='?_src_=prefs;preference=all'>Always Random Body: " ).item( ( this.be_random_body ? "Yes" : "No" ) ).str( "</A><br>\n	<table width='100%'><tr><td width='24%' valign='top'>\n	<b>Species:</b> <a href='?_src_=prefs;preference=species;task=input'>" ).item( this.species ).str( "</a><BR>\n	<b>Secondary Language:</b> <a href='byond://?src=" ).Ref( user ).str( ";preference=language;task=input'>" ).item( this.language ).str( "</a><br>\n	<b>Blood Type:</b> <a href='byond://?src=" ).Ref( user ).str( ";preference=b_type;task=input'>" ).item( this.b_type ).str( "</a><BR>\n	<b>Skin Tone:</b> <a href='?_src_=prefs;preference=s_tone;task=input'>" ).item( -this.s_tone + 35 ).str( "/220<br></a><BR>\n	<b>Handicaps:</b> <a href='byond://?src=" ).Ref( user ).str( ";task=input;preference=disabilities'><b>Set</a></b><br>\n	<b>Limbs:</b> <a href='byond://?src=" ).Ref( user ).str( ";preference=limbs;task=input'>Set</a><br>\n	<b>Organs:</b> <a href='byond://?src=" ).Ref( user ).str( ";preference=organs;task=input'>Set</a><br>\n	<b>Underwear:</b> " ).item( ( this.gender == GlobalVars.MALE ? "<a href ='?_src_=prefs;preference=underwear;task=input'><b>" + GlobalVars.underwear_m[this.underwear] + "</a>" : "<a href ='?_src_=prefs;preference=underwear;task=input'><b>" + GlobalVars.underwear_f[this.underwear] + "</a>" ) ).str( "<br>\n	<b>Backpack:</b> <a href ='?_src_=prefs;preference=bag;task=input'><b>" ).item( GlobalVars.backbaglist[this.backbag] ).str( "</a><br>\n	<b>Nanotrasen Relation</b>:<br><a href ='?_src_=prefs;preference=nt_relation;task=input'><b>" ).item( this.nanotrasen_relation ).str( "</b></a>\n	</td><td valign='top' width='21%'>\n	<h3>Hair Style</h3>\n	<a href='?_src_=prefs;preference=h_style;task=input'>" ).item( this.h_style ).str( "</a><BR>\n	<a href='?_src_=prefs;preference=previous_hair_style;task=input'>&lt;</a> <a href='?_src_=prefs;preference=next_hair_style;task=input'>&gt;</a><BR>\n	<span style='border:1px solid #161616; background-color: #" ).item( GlobalFuncs.num2hex( this.r_hair, 2 ) ).item( GlobalFuncs.num2hex( this.g_hair, 2 ) ).item( GlobalFuncs.num2hex( this.b_hair, 2 ) ).str( ";'>&nbsp;&nbsp;&nbsp;</span> <a href='?_src_=prefs;preference=hair;task=input'>Change</a><BR>\n	</td><td valign='top' width='21%'>\n	<h3>Facial Hair Style</h3>\n	<a href='?_src_=prefs;preference=f_style;task=input'>" ).item( this.f_style ).str( "</a><BR>\n	<a href='?_src_=prefs;preference=previous_facehair_style;task=input'>&lt;</a> <a href='?_src_=prefs;preference=next_facehair_style;task=input'>&gt;</a><BR>\n	<span style='border: 1px solid #161616; background-color: #" ).item( GlobalFuncs.num2hex( this.r_facial, 2 ) ).item( GlobalFuncs.num2hex( this.g_facial, 2 ) ).item( GlobalFuncs.num2hex( this.b_facial, 2 ) ).str( ";'>&nbsp;&nbsp;&nbsp;</span> <a href='?_src_=prefs;preference=facial;task=input'>Change</a><BR>\n	</td><td valign='top' width='21%'>\n	<h3>Eye Color</h3>\n	<span style='border: 1px solid #161616; background-color: #" ).item( GlobalFuncs.num2hex( this.r_eyes, 2 ) ).item( GlobalFuncs.num2hex( this.g_eyes, 2 ) ).item( GlobalFuncs.num2hex( this.b_eyes, 2 ) ).str( ";'>&nbsp;&nbsp;&nbsp;</span> <a href='?_src_=prefs;preference=eyes;task=input'>Change</a><BR>\n	</tr></td></table>\n	" ).ToString();
			return dat;
		}

	}

}