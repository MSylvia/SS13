// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_SetVentPressureChecks : Automation {

		public dynamic vent_pump = null;
		public double? checks = 1;
		public double? mode = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Vent Pump: Pressure Checks";
		}

		// Function from file: vent_pump.dm
		public Automation_SetVentPressureChecks ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: vent_pump.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			ByTable injector_names = null;
			Obj_Machinery_Atmospherics_Binary_DpVentPump I = null;
			Obj_Machinery_Atmospherics_Unary_VentPump I2 = null;
			double? bitflagvalue = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["set_vent_pump"] ) ) {
				injector_names = new ByTable();

				if ( Lang13.Bool( this.mode ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Binary_DpVentPump) )) {
						I = _a;
						

						if ( !( I.id_tag == null ) && I.frequency == this.parent.frequency ) {
							injector_names.Or( I.id_tag );
						}
					}
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Unary_VentPump) )) {
						I2 = _b;
						

						if ( !( I2.id_tag == null ) && I2.frequency == this.parent.frequency ) {
							injector_names.Or( I2.id_tag );
						}
					}
				}
				this.vent_pump = Interface13.Input( "Select a vent:", "Vent Pumps", this.vent_pump, null, injector_names, InputType.Null | InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["swap_modes"] ) ) {
				this.mode = !Lang13.Bool( this.mode ) ?1:0;
				this.vent_pump = null;

				if ( !Lang13.Bool( this.mode ) && ( ((int)( this.checks ??0 )) & 4 ) != 0 ) {
					this.checks = ((int)( this.checks )) & ( 65531 );
				}
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["togglecheck"] ) ) {
				bitflagvalue = String13.ParseNumber( href_list["togglecheck"] );

				if ( Lang13.Bool( this.mode ) ) {
					
					if ( !new ByTable(new object [] { 1, 2, 4 }).Contains( bitflagvalue ) ) {
						return 0;
					}
				} else if ( !new ByTable(new object [] { 1, 2 }).Contains( bitflagvalue ) ) {
					return 0;
				}

				if ( ( ((int)( this.checks ??0 )) & ((int)( bitflagvalue ??0 )) ) != 0 ) {
					this.checks = ((int)( this.checks )) & ( ~((int)( bitflagvalue ??0 )) );
				} else {
					this.checks = ((int)( this.checks )) | ( ((int)( bitflagvalue ??0 )) );
				}
				this.parent.updateUsrDialog();
				return 1;
			}
			return null;
		}

		// Function from file: vent_pump.dm
		public override string GetText(  ) {
			
			if ( Lang13.Bool( this.mode ) ) {
				return new Txt( "Set <a href=\"?src=" ).Ref( this ).str( ";swap_modes=1\">dual-port</a> vent pump <a href=\"?src=" ).Ref( this ).str( ";set_vent_pump=1\">" ).item( this.fmtString( this.vent_pump ) ).str( "</a> pressure checks to:\n			external <a href=\"?src=" ).Ref( this ).str( ";togglecheck=1\">" ).item( ( ( ((int)( this.checks ??0 )) & 1 ) != 0 ? "Enabled" : "Disabled" ) ).str( "</a>\n			internal inwards <a href=\"?src=" ).Ref( this ).str( ";togglecheck=2\">" ).item( ( ( ((int)( this.checks ??0 )) & 2 ) != 0 ? "Enabled" : "Disabled" ) ).str( "</a>\n			internal outwards <a href=\"?src=" ).Ref( this ).str( ";togglecheck=4\">" ).item( ( ( ((int)( this.checks ??0 )) & 4 ) != 0 ? "Enabled" : "Disabled" ) ).str( "</a>\n		" ).ToString();
			} else {
				return new Txt( "Set <a href=\"?src=" ).Ref( this ).str( ";swap_modes=1\">unary</a> vent pump <a href=\"?src=" ).Ref( this ).str( ";set_vent_pump=1\">" ).item( this.fmtString( this.vent_pump ) ).str( "</a> pressure checks to:\n			external: <a href=\"?src=" ).Ref( this ).str( ";togglecheck=1\">" ).item( ( ( ((int)( this.checks ??0 )) & 1 ) != 0 ? "Enabled" : "Disabled" ) ).str( "</a>,\n			internal: <a href=\"?src=" ).Ref( this ).str( ";togglecheck=2\">" ).item( ( ( ((int)( this.checks ??0 )) & 2 ) != 0 ? "Enabled" : "Disabled" ) ).str( "</a>\n		" ).ToString();
			}
		}

		// Function from file: vent_pump.dm
		public override bool process(  ) {
			
			if ( Lang13.Bool( this.vent_pump ) ) {
				this.parent.send_signal( new ByTable().Set( "tag", this.vent_pump ).Set( "checks", this.checks ), ( Lang13.Bool( this.mode ) ? GlobalVars.RADIO_ATMOSIA : GlobalVars.RADIO_FROM_AIRALARM ) );
			}
			return false;
		}

		// Function from file: vent_pump.dm
		public override void Import( ByTable json = null ) {
			base.Import( json );
			this.vent_pump = json["vent_pump"];
			this.checks = String13.ParseNumber( json["checks"] );
			this.mode = String13.ParseNumber( json["mode"] );
			return;
		}

		// Function from file: vent_pump.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["vent_pump"] = this.vent_pump;
			json["checks"] = this.checks;
			json["mode"] = this.mode;
			return json;
		}

	}

}