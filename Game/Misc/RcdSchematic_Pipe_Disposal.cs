// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RcdSchematic_Pipe_Disposal : RcdSchematic_Pipe {

		public int actual_id = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.category = "Disposal Pipes";
			this.layer = 0;
		}

		public RcdSchematic_Pipe_Disposal ( dynamic n_master = null ) : base( (object)(n_master) ) {
			
		}

		// Function from file: pipe.dm
		public override dynamic attack( dynamic A = null, dynamic user = null ) {
			Obj_Structure_Disposalconstruct C = null;

			GlobalFuncs.to_chat( user, "Building Pipes ..." );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( user ), "sound/machines/click.ogg", 50, 1 );

			if ( !GlobalFuncs.do_after( user, A, 20 ) ) {
				return 1;
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( user ), "sound/items/Deconstruct.ogg", 50, 1 );
			C = new Obj_Structure_Disposalconstruct( A );
			C.dir = ((int)( this.selected_dir ??0 ));
			C.ptype = this.actual_id;
			C.update();
			C.add_fingerprint( user );
			return null;
		}

		// Function from file: pipe.dm
		public override string render_dir_image( double? dir = null, string title = null ) {
			string selected = null;

			selected = "";

			if ( this.selected_dir == dir ) {
				selected = " class='selected'";
			}
			return new Txt( "<a href='?src=" ).Ref( this.master.v_interface ).str( ";set_dir=" ).item( dir ).str( "'" ).item( selected ).str( " title='" ).item( title ).str( "'><img src='RPD_D_" ).item( this.pipe_id ).str( "_" ).item( dir ).str( ".png'/></a>" ).ToString();
		}

		// Function from file: pipe.dm
		public override void send_icon( dynamic client = null, dynamic dir = null ) {
			GlobalFuncs.send_asset( client, "RPD_D_" + this.pipe_id + "_" + dir + ".png" );
			return;
		}

		// Function from file: pipe.dm
		public override void register_icon( dynamic dir = null ) {
			GlobalFuncs.register_asset( "RPD_D_" + this.pipe_id + "_" + dir + ".png", new Icon( "icons/obj/pipes/disposal.dmi", GlobalVars.disposalpipeID2State[this.pipe_id + 1], dir ) );
			return;
		}

	}

}