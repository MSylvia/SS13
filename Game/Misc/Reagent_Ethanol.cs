// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Reagent_Ethanol : Reagent {

		public int dizzy_adj = 3;
		public int slurr_adj = 3;
		public int confused_adj = 2;
		public double slur_start = 65;
		public double confused_start = 130;
		public double blur_start = 260;
		public double pass_out = 450;
		public double common_data = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Ethanol";
			this.id = "ethanol";
			this.description = "A well-known alcohol with a variety of applications.";
			this.reagent_state = 2;
			this.color = "#404030";
			this.custom_metabolism = 0.4;
		}

		// Function from file: Chemistry-Reagents.dm
		public override bool reaction_obj( dynamic O = null, double volume = 0 ) {
			dynamic paperaffected = null;
			dynamic affectedbook = null;

			
			if ( base.reaction_obj( (object)(O), volume ) ) {
				return true;
			}

			if ( O is Obj_Item_Weapon_Paper ) {
				paperaffected = O;

				if ( Lang13.Bool( paperaffected.info ) || Lang13.Bool( paperaffected.stamps ) ) {
					((Obj_Item_Weapon_Paper)paperaffected).clearpaper();
					((Ent_Static)O).visible_message( new Txt( "<span class='warning'>The solution melts away " ).the( O ).item().str( "'s ink.</span>" ).ToString() );
				}
			}

			if ( O is Obj_Item_Weapon_Book ) {
				
				if ( volume >= 5 ) {
					affectedbook = O;

					if ( Lang13.Bool( affectedbook.dat ) ) {
						affectedbook.dat = null;
						((Ent_Static)O).visible_message( new Txt( "<span class='warning'>The solution melts away " ).the( O ).item().str( "'s ink.</span>" ).ToString() );
					}
				}
			}
			return false;
		}

		// Function from file: Chemistry-Reagents.dm
		public override bool on_mob_life( Mob_Living M = null, int? alien = null ) {
			int sober_str = 0;
			Reagent_Ethanol A = null;
			Mob_Living H = null;
			dynamic L = null;

			
			if ( base.on_mob_life( M, alien ) ) {
				return true;
			}
			Interface13.Stat( null, M.mutations.Contains( 203 ) );
			sober_str = ( !base.on_mob_life( M, alien ) ? 1 : 2 );
			M.nutrition += this.nutriment_factor * 0.5;
			this.data++;
			this.data /= sober_str;
			this.common_data = 0;

			if ( Lang13.Bool( ((dynamic)this.holder).reagent_list ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.holder).reagent_list, typeof(Reagent_Ethanol) )) {
					A = _a;
					

					if ( Lang13.Bool( Lang13.IsNumber( A.data ) ) ) {
						this.common_data += Convert.ToDouble( A.data );
					}
				}
			}
			M.dizziness += this.dizzy_adj;

			if ( this.common_data >= this.slur_start && Convert.ToDouble( this.data ) < this.pass_out ) {
				
				if ( !( M.slurring != 0 ) ) {
					M.slurring = 1;
				}
				M.slurring += this.slurr_adj / sober_str;
			}

			if ( this.common_data >= this.confused_start && Rand13.PercentChance( 33 ) ) {
				
				if ( !( M.confused != 0 ) ) {
					M.confused = 1;
				}
				M.confused = Num13.MaxInt( ((int)( M.confused + this.confused_adj / sober_str )), 0 );
			}

			if ( this.common_data >= this.blur_start ) {
				M.eye_blurry = Num13.MaxInt( Convert.ToInt32( M.eye_blurry ), ((int)( 10 / sober_str )) );
				M.drowsyness = Num13.MaxInt( Convert.ToInt32( M.drowsyness ), 0 );
			}

			if ( this.common_data >= this.pass_out ) {
				M.paralysis = Num13.MaxInt( M.paralysis, ((int)( 20 / sober_str )) );
				M.drowsyness = Num13.MaxInt( Convert.ToInt32( M.drowsyness ), ((int)( 30 / sober_str )) );

				if ( M is Mob_Living_Carbon_Human ) {
					H = M;
					L = ((dynamic)H).internal_organs_by_name["liver"];

					if ( !Lang13.Bool( L ) ) {
						H.adjustToxLoss( 5 );
					} else if ( L is Organ_Internal_Liver ) {
						L.take_damage( 0.05, 0.5 );
					}
					H.adjustToxLoss( 0.5 );
				}
			}
			return false;
		}

	}

}