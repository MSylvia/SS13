// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_Failsafe : Controller {

		public int masterControllerIteration = 0;
		public int masterControllerAlertLevel = 0;
		public bool lightingControllerIteration = false;
		public bool lightingControllerAlertLevel = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.processing_interval = 100;
		}

		// Function from file: failsafe.dm
		public Controller_Failsafe (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.failsafe != this ) {
				
				if ( GlobalVars.failsafe is Controller_Failsafe ) {
					this.recover();
					GlobalFuncs.qdel( GlobalVars.failsafe );
				}
				GlobalVars.failsafe = this;
			}
			GlobalVars.failsafe.process();
			return;
		}

		// Function from file: failsafe.dm
		public void process(  ) {
			this.processing = true;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (true) {
					this.iteration++;

					if ( this.processing ) {
						
						if ( GlobalVars.master_controller.processing ) {
							
							if ( this.masterControllerIteration == GlobalVars.master_controller.iteration ) {
								
								dynamic _a = this.masterControllerAlertLevel; // Was a switch-case, sorry for the mess.
								if ( 0<=_a&&_a<=3 ) {
									this.masterControllerAlertLevel++;
								} else if ( _a==4 ) {
									GlobalFuncs.to_chat( GlobalVars.admins, "<font color='red' size='2'><b>Warning. The master Controller has not fired in the last " + this.masterControllerAlertLevel * this.processing_interval + " ticks. Automatic restart in " + this.processing_interval + " ticks.</b></font>" );
									this.masterControllerAlertLevel = 5;
								} else if ( _a==5 ) {
									GlobalFuncs.to_chat( GlobalVars.admins, "<font color='red' size='2'><b>Warning. The master Controller has still not fired within the last " + this.masterControllerAlertLevel * this.processing_interval + " ticks. Killing and restarting...</b></font>" );
									new Controller_GameController();
									GlobalVars.master_controller.process();
									this.masterControllerAlertLevel = 0;
								}
							} else {
								this.masterControllerAlertLevel = 0;
								this.masterControllerIteration = GlobalVars.master_controller.iteration;
							}
						}
					}
					Task13.Sleep( this.processing_interval );
				}
				return;
			}));
			return;
		}

	}

}