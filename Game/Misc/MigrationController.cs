// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class MigrationController : Game_Data {

		public ByTable db_states = new ByTable( 0 );
		public ByTable packages = new ByTable( 0 );
		public string TABLE_NAME = "_migrations";
		public string id = "";

		// Function from file: migration_controller.dm
		public MigrationController (  ) {
			ByTable row = null;
			ByTable newpacks = null;
			dynamic mtype = null;
			dynamic M = null;
			dynamic pack = null;
			dynamic pkgID = null;
			ByTable prepack = null;
			ByTable pack2 = null;
			Migration M2 = null;

			
			if ( !( this.setup() == true ) ) {
				Game13.log.WriteMsg( "[Migrations] (" + this.id + "): Setup() returned false, will not run migrations for this DBMS." );
			} else {
				
				if ( !( this.hasTable( this.TABLE_NAME ) == true ) ) {
					Game13.log.WriteMsg( "[Migrations] (" + this.id + "): Creating " + this.TABLE_NAME );
					this.createMigrationTable();
				}

				foreach (dynamic _a in Lang13.Enumerate( this.query( "SELECT pkgID, version FROM " + this.TABLE_NAME ), typeof(ByTable) )) {
					row = _a;
					

					if ( this.id == "mysql" ) {
						this.db_states[row[1]] = String13.ParseNumber( row[2] );
					} else {
						this.db_states[row["pkgID"]] = String13.ParseNumber( row["version"] );
					}
				}
				newpacks = null;
				newpacks = new ByTable( 0 );

				foreach (dynamic _b in Lang13.Enumerate( Lang13.GetTypes( typeof(Migration) ) - new ByTable(new object [] { typeof(Migration) }) )) {
					mtype = _b;
					
					M = Lang13.Call( mtype, this );

					if ( M.package == "" || M.name == "" || M.dbms != this.id ) {
						continue;
					}
					Interface13.Stat( null, newpacks.Contains( M.package ) );

					if ( !( M.package == "" || M.name == "" || M.dbms != this.id ) ) {
						newpacks[M.package] = new ByTable();
					}
					pack = newpacks[M.package];
					pack += M;
				}

				foreach (dynamic _d in Lang13.Enumerate( newpacks )) {
					pkgID = _d;
					
					Interface13.Stat( null, this.packages.Contains( pkgID ) );

					if ( !false ) {
						this.packages[pkgID] = new ByTable();
					}
					prepack = newpacks[pkgID];
					pack2 = null;
					pack2 = new ByTable( prepack.len );

					foreach (dynamic _c in Lang13.Enumerate( newpacks[pkgID], typeof(Migration) )) {
						M2 = _c;
						
						pack2[M2.id] = M2;
					}
					this.packages[pkgID] = pack2;
					Game13.log.WriteMsg( "[Migrations] Loaded " + pack2.len + " " + this.id + " DB migrations from package " + pkgID + "." );
				}
				this.UpdateAll();
			}
			return;
		}

		// Function from file: migration_controller.dm
		public virtual bool? hasTable( string tableName = null ) {
			return GlobalVars.FALSE;
		}

		// Function from file: migration_controller.dm
		public virtual dynamic execute( string sql = null ) {
			return new ByTable();
		}

		// Function from file: migration_controller.dm
		public virtual bool? hasResult( string sql = null ) {
			return GlobalVars.FALSE;
		}

		// Function from file: migration_controller.dm
		public virtual ByTable query( string sql = null ) {
			dynamic query = null;
			ByTable rows = null;

			query = this.execute( sql );
			rows = new ByTable();

			while (Lang13.Bool( query.NextRow() )) {
				rows.Add( new ByTable(new object [] { query.item }) );
			}
			return rows;
		}

		// Function from file: migration_controller.dm
		public bool? UpdatePackage( dynamic pkgID = null, int? to_version = null ) {
			to_version = to_version ?? -1;

			dynamic package = null;
			int? from_version = null;
			Migration M = null;
			Migration M2 = null;

			package = this.packages[pkgID];
			from_version = this.getCurrentVersion( pkgID ) ?1:0;

			if ( to_version == -1 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.packages[pkgID], typeof(Migration) )) {
					M = _a;
					

					if ( ( M.id ??0) > ( to_version ??0) ) {
						to_version = M.id;
					}
				}
			}

			if ( from_version == to_version ) {
				Game13.log.WriteMsg( "[Migrations] " + pkgID + " is up to date." );
				return null;
			}
			Game13.log.WriteMsg( "[Migrations] Updating " + pkgID + " from " + from_version + " to " + to_version + "..." );

			foreach (dynamic _b in Lang13.Enumerate( package, typeof(Migration) )) {
				M2 = _b;
				

				if ( ( M2.id ??0) > ( from_version ??0) && ( M2.id ??0) <= ( to_version ??0) ) {
					
					if ( !( M2.up() == true ) ) {
						Game13.log.WriteMsg( "Failed to process migration " + pkgID + " #" + M2.id );
						return GlobalVars.FALSE;
					} else {
						M2.execute( "REPLACE INTO " + this.TABLE_NAME + " (pkgID,version) VALUES ('" + pkgID + "'," + M2.id + ")" );
						Game13.log.WriteMsg( "[Migrations] Successfully applied " + pkgID + "#" + M2.id + " (" + M2.name + ")" );
					}
				}
			}
			Game13.log.WriteMsg( "[Migrations] Done!" );
			return GlobalVars.TRUE;
		}

		// Function from file: migration_controller.dm
		public void UpdateAll(  ) {
			dynamic pkgID = null;
			int? latestVersionAvail = null;
			Migration M = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.packages )) {
				pkgID = _b;
				
				latestVersionAvail = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.packages[pkgID], typeof(Migration) )) {
					M = _a;
					

					if ( ( M.id ??0) > ( latestVersionAvail ??0) ) {
						latestVersionAvail = M.id;
					}
				}

				if ( ( latestVersionAvail ??0) > ( this.getCurrentVersion() ?1:0) ) {
					this.UpdatePackage( pkgID, latestVersionAvail );
				}
			}
			this.VersionCheck();
			return;
		}

		// Function from file: migration_controller.dm
		public void VersionCheck(  ) {
			dynamic pkgID = null;
			int? currentVersion = null;
			int? latestVersionAvail = null;
			Migration M = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.packages )) {
				pkgID = _b;
				
				currentVersion = this.getCurrentVersion( pkgID ) ?1:0;
				latestVersionAvail = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.packages[pkgID], typeof(Migration) )) {
					M = _a;
					

					if ( ( M.id ??0) > ( latestVersionAvail ??0) ) {
						latestVersionAvail = M.id;
					}
				}

				if ( ( latestVersionAvail ??0) > ( currentVersion ??0) ) {
					Game13.log.WriteMsg( "[Migrations] *** " + pkgID + " is behind " + ( ( latestVersionAvail ??0) - ( currentVersion ??0) ) + " versions!" );
				}
			}
			return;
		}

		// Function from file: migration_controller.dm
		public bool getCurrentVersion( dynamic pkgID = null ) {
			Interface13.Stat( null, this.db_states.Contains( pkgID ) );

			if ( false ) {
				return Lang13.Bool( this.db_states[pkgID] );
			} else {
				return false;
			}
		}

		// Function from file: migration_controller.dm
		public virtual bool? createMigrationTable(  ) {
			return GlobalVars.FALSE;
		}

		// Function from file: migration_controller.dm
		public virtual bool? setup(  ) {
			return GlobalVars.FALSE;
		}

	}

}