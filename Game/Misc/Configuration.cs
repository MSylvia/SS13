// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Configuration : Game_Data {

		public dynamic server_name = null;
		public bool server_suffix = false;
		public string world_style_config = @"""body 					{font-family: Verdana, sans-serif;}
h1, h2, h3, h4, h5, h6	{color: #0000ff;font-family: Georgia, Verdana, sans-serif;}
em						{font-style: normal;	font-weight: bold;}
.motd					{color: #638500;	font-family: Verdana, sans-serif;}
.motd h1, .motd h2, .motd h3, .motd h4, .motd h5, .motd h6
						{color: #638500;	text-decoration: underline;}
.motd a, .motd a:link, .motd a:visited, .motd a:active, .motd a:hover
						{color: #638500;}
.prefix					{					font-weight: bold;}
.ooc					{					font-weight: bold;}
.adminobserverooc		{color: #0099cc;	font-weight: bold;}
.adminooc				{color: #b82e00;	font-weight: bold;}
.adminobserver			{color: #996600;	font-weight: bold;}
.admin					{color: #386aff;	font-weight: bold;}
.adminsay				{color: #9611D4;	font-weight: bold;}
.name					{					font-weight: bold;}
.say					{}
.siliconsay				{font-family: 'Courier New', Courier, monospace;}
.deadsay				{color: #5c00e6;}
.radio					{color: #008000;}
.deptradio				{color: #993399;}
.comradio				{color: #193A7A;}
.syndradio				{color: #6d3f40;}
.dsquadradio			{color: #686868;}
.resteamradio			{color: #18BC46;}
.aiprivradio			{color: #ff00ff;}
.centradio				{color: #5C5C8A;}
.secradio				{color: #A30000;}
.engradio				{color: #A66300;}
.medradio				{color: #008160;}
.sciradio				{color: #993399;}
.supradio				{color: #5F4519;}
.serradio				{color: #3399CC;}
.djradio				{color: #663300;}
.mommi					{color: navy;}
.alert					{color: #ff0000;}
h1.alert, h2.alert		{color: #000000;}
.emote					{					font-style: italic;}
.selecteddna			{color: #FFFFFF; 	background-color: #001B1B}
.attack					{color: #ff0000;}
.moderate				{color: #CC0000;}
.disarm					{color: #990000;}
.passive				{color: #660000;}
.danger					{color: #ff0000;	font-weight: bold;}
.userdanger				{color: #ff0000;	font-weight: bold;	font-size: 120%}
.warning				{color: #ff0000;	font-style: italic;}
.sinister				{color: #800080;	font-weight: bold;	font-style: italic;} /* /vg/ */
.blob					{color: #006221;	font-weight: bold;	font-style: italic;}
.confirm				{color: #00af3b;}
.rose					{color: #ff5050;}
.info					{color: #0000CC;}
.notice					{color: #000099;}
.bnotice				{color: #000099; 	font-weight: bold;}
.sans					{font-family: 'Comic Sans MS', cursive, sans-serif;}
.alien					{color: #543354;}
.ancient				{color: #008B8B;	font-stye: italic;}
.newscaster				{color: #800000;}
.mod					{color: #735638;	font-weight: bold;}
.modooc					{color: #000000;	font-weight: bold;}
.adminmod				{color: #402A14;	font-weight: bold;}
.tajaran				{color: #803B56;}
.skrell					{color: #00CED1;}
.solcom					{color: #22228B;}
.soghun					{color: #228B22;}
.vox					{color: #AA00AA;}
.rough					{font-family: 'Trebuchet MS', cursive, sans-serif;}
.say_quote				{font-family: Georgia, Verdana, sans-serif;}
.cult					{color: #800080; font-weight: bold; font-style: italic;}
.interface				{color: #330033;}
.big					{font-size: 150%;}
.bold					{font-weight: bold;}
.center					{text-align: center;}
.red					{color: #FF0000;}
.grey					{color: #585858; font-family: Dotum, sans-serif;}
.skeleton				{color: #585858; font-weight: bold; font-style: italic;}
.gutter					{color: #61380B; font-style: italic;}
/* /vg/ */
.good					{color: green;}
.average				{color: #FF8000;}
.bad					{color: #FF0000;}
/* /vg/ Saycode Rewrite */
.italics, .talkinto		{font-style:italic;}
.whisper				{font-style:italic;color:#333333;}
/* Recruiting stuff */
.recruit 				{color: #5c00e6; font-weight: bold; font-style: italic;}
";
		public dynamic nudge_script_path = "nudge.py";
		public bool log_ooc = false;
		public bool log_access = false;
		public bool log_say = false;
		public bool log_admin = false;
		public bool? log_admin_only = false;
		public double? log_debug = 1;
		public bool log_game = false;
		public bool log_vote = false;
		public bool log_whisper = false;
		public bool log_emote = false;
		public bool log_attack = false;
		public bool log_adminchat = false;
		public bool log_adminwarn = false;
		public bool log_adminghost = true;
		public bool log_pda = false;
		public bool log_hrefs = false;
		public bool log_runtimes = false;
		public double? sql_enabled = 1;
		public bool allow_admin_ooccolor = false;
		public bool allow_vote_restart = false;
		public bool allow_vote_mode = false;
		public bool allow_admin_jump = true;
		public bool allow_admin_spawning = true;
		public bool allow_admin_rev = true;
		public double? vote_delay = 6000;
		public double? vote_period = 600;
		public bool vote_no_default = false;
		public bool vote_no_dead = false;
		public bool del_new_on_log = true;
		public bool feature_object_spell_system = false;
		public bool traitor_scaling = false;
		public bool protect_roles_from_antagonist = false;
		public bool continous_rounds = false;
		public bool allow_Metadata = false;
		public bool popup_admin_pm = false;
		public double? Ticklag = 081;
		public double? socket_talk = 0;
		public ByTable resource_urls = null;
		public bool antag_hud_allowed = false;
		public bool antag_hud_restricted = false;
		public ByTable mode_names = new ByTable();
		public ByTable modes = new ByTable();
		public ByTable votable_modes = new ByTable();
		public ByTable probabilities = new ByTable();
		public bool humans_need_surnames = false;
		public bool allow_random_events = false;
		public bool allow_ai = true;
		public dynamic hostedby = null;
		public bool respawn = true;
		public dynamic respawn_delay = 30;
		public bool respawn_as_mommi = false;
		public bool respawn_as_mouse = true;
		public bool guest_jobban = true;
		public bool usewhitelist = false;
		public bool kick_inactive = false;
		public bool load_jobs_from_txt = false;
		public bool ToRban = false;
		public bool automute_on = false;
		public bool jobs_have_minimal_access = false;
		public dynamic copy_logs = null;
		public bool cult_ghostwriter = true;
		public dynamic cult_ghostwriter_req_cultists = 10;
		public bool borer_takeover_immediately = false;
		public bool disable_player_mice = false;
		public bool uneducated_mice = false;
		public bool usealienwhitelist = false;
		public bool limitalienplayers = false;
		public double? alien_to_human_ratio = 0.5;
		public bool silent_ai = false;
		public bool silent_borg = false;
		public dynamic server = null;
		public dynamic banappeals = null;
		public dynamic wikiurl = "http://baystation12.net/wiki/index.php?title=Main_Page";
		public dynamic vgws_base_url = "http://ss13.moe";
		public dynamic forumurl = "http://baystation12.net/forums/";
		public dynamic media_base_url = "";
		public dynamic media_secret_key = "";
		public dynamic alert_desc_green = "All threats to the station have passed. Security may not have weapons visible, privacy laws are once again fully enforced.";
		public dynamic alert_desc_blue_upto = "The station has received reliable information about possible hostile activity on the station. Security staff may have weapons visible, random searches are permitted.";
		public dynamic alert_desc_blue_downto = "The immediate threat has passed. Security may no longer have weapons drawn at all times, but may continue to have them visible. Random searches are still allowed.";
		public dynamic alert_desc_red_upto = "There is an immediate serious threat to the station. Security may have weapons unholstered at all times. Random searches are allowed and advised.";
		public dynamic alert_desc_red_downto = "The self-destruct mechanism has been deactivated, there is still however an immediate serious threat to the station. Security may have weapons unholstered at all times, random searches are allowed and advised.";
		public dynamic alert_desc_delta = "The station's self-destruct mechanism has been engaged. All crew are instructed to obey all instructions given by heads of staff. Any violations of these orders can be punished by death. This is not a drill.";
		public bool forbid_singulo_possession = false;
		public dynamic health_threshold_softcrit = 0;
		public dynamic health_threshold_crit = 0;
		public dynamic health_threshold_dead = -100;
		public dynamic organ_health_multiplier = 1;
		public dynamic organ_regeneration_multiplier = 1;
		public dynamic bones_can_break = 0;
		public dynamic limbs_can_break = 0;
		public dynamic revival_pod_plants = 1;
		public dynamic revival_cloning = 1;
		public dynamic revival_brain_life = -1;
		public dynamic run_speed = 0;
		public dynamic walk_speed = 0;
		public dynamic human_delay = 0;
		public dynamic robot_delay = 0;
		public dynamic monkey_delay = 0;
		public dynamic alien_delay = 0;
		public dynamic slime_delay = 0;
		public dynamic animal_delay = 0;
		public bool admin_legacy_system = false;
		public bool ban_legacy_system = false;
		public bool use_age_restriction_for_jobs = false;
		public int simultaneous_pm_warning_timeout = 100;
		public bool use_recursive_explosions = false;
		public bool assistant_maint = false;
		public double? gateway_delay = 18000;
		public bool ghost_interaction = false;
		public dynamic comms_password = "";
		public bool paperwork_library = false;
		public bool use_irc_bot = false;
		public dynamic irc_bot_host = "localhost";
		public double? irc_bot_port = 45678;
		public dynamic irc_bot_server_id = 45678;
		public dynamic python_path = "";
		public bool assistantlimit = false;
		public double? assistantratio = 2;
		public dynamic emag_energy = -1;
		public dynamic emag_starts_charged = 1;
		public dynamic emag_recharge_rate = 0;
		public dynamic emag_recharge_ticks = 0;
		public bool map_voting = false;
		public dynamic renders_url = "";
		public string default_ooc_color = "#002eb8";
		public bool mommi_static = false;

		// Function from file: configuration.dm
		public Configuration (  ) {
			dynamic L = null;
			dynamic T = null;
			dynamic M = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			L = Lang13.GetTypes( typeof(GameMode) ) - typeof(GameMode);

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				T = _a;
				
				M = Lang13.Call( T );

				if ( Lang13.Bool( M.config_tag ) ) {
					Interface13.Stat( null, this.modes.Contains( M.config_tag ) );

					if ( !false ) {
						GlobalVars.diary.WriteMsg( "Adding game mode " + M.name + " (" + M.config_tag + ") to configuration." );
						this.modes.Add( M.config_tag );
						this.mode_names[M.config_tag] = M.name;
						this.probabilities[M.config_tag] = M.probability;

						if ( M.votable ) {
							this.votable_modes.Add( M.config_tag );
						}
					}
				}
				GlobalFuncs.qdel( M );
			}
			this.votable_modes.Add( "secret" );
			return;
		}

		// Function from file: configuration.dm
		public ByTable get_runnable_modes(  ) {
			ByTable runnable_modes = null;
			dynamic T = null;
			dynamic M = null;

			runnable_modes = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(GameMode) ) - typeof(GameMode) )) {
				T = _a;
				
				M = Lang13.Call( T );
				Interface13.Stat( null, this.modes.Contains( M.config_tag ) );

				if ( !false ) {
					Lang13.Delete( M );
					M = null;
					continue;
				}

				if ( Convert.ToDouble( this.probabilities[M.config_tag] ) <= 0 ) {
					Lang13.Delete( M );
					M = null;
					continue;
				}

				if ( ((GameMode)M).can_start() ) {
					runnable_modes[M] = this.probabilities[M.config_tag];
				}
			}
			return runnable_modes;
		}

		// Function from file: configuration.dm
		public dynamic pick_mode( dynamic mode_name = null ) {
			dynamic T = null;
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(GameMode) ) - typeof(GameMode) )) {
				T = _a;
				
				M = Lang13.Call( T );

				if ( Lang13.Bool( M.config_tag ) && M.config_tag == mode_name ) {
					return M;
				}
				Lang13.Delete( M );
				M = null;
			}
			return new GameMode_Extended();
		}

		// Function from file: configuration.dm
		public void loadforumsql( string filename = null ) {
			ByTable Lines = null;
			dynamic t = null;
			int pos = 0;
			string name = null;
			string value = null;

			Lines = GlobalFuncs.file2list( filename );

			foreach (dynamic _b in Lang13.Enumerate( Lines )) {
				t = _b;
				

				if ( !Lang13.Bool( t ) ) {
					continue;
				}
				t = GlobalFuncs.trim( t );

				if ( Lang13.Length( t ) == 0 ) {
					continue;
				} else if ( String13.SubStr( t, 1, 2 ) == "#" ) {
					continue;
				}
				pos = String13.FindIgnoreCase( t, " ", 1, 0 );
				name = null;
				value = null;

				if ( pos != 0 ) {
					name = String13.ToLower( String13.SubStr( t, 1, pos ) );
					value = String13.SubStr( t, pos + 1, 0 );
				} else {
					name = String13.ToLower( t );
				}

				if ( !Lang13.Bool( name ) ) {
					continue;
				}

				switch ((string)( name )) {
					case "address":
						GlobalVars.forumsqladdress = value;
						break;
					case "port":
						GlobalVars.forumsqlport = value;
						break;
					case "database":
						GlobalVars.forumsqldb = value;
						break;
					case "login":
						GlobalVars.forumsqllogin = value;
						break;
					case "password":
						GlobalVars.forumsqlpass = value;
						break;
					case "activatedgroup":
						GlobalVars.forum_activated_group = value;
						break;
					case "authenticatedgroup":
						GlobalVars.forum_authenticated_group = value;
						break;
					default:
						GlobalVars.diary.WriteMsg( "Unknown setting in configuration: '" + name + "'" );
						break;
				}
			}
			return;
		}

		// Function from file: configuration.dm
		public void loadsql( string filename = null ) {
			ByTable Lines = null;
			dynamic t = null;
			int pos = 0;
			string name = null;
			string value = null;

			Lines = GlobalFuncs.file2list( filename );

			foreach (dynamic _b in Lang13.Enumerate( Lines )) {
				t = _b;
				

				if ( !Lang13.Bool( t ) ) {
					continue;
				}
				t = GlobalFuncs.trim( t );

				if ( Lang13.Length( t ) == 0 ) {
					continue;
				} else if ( String13.SubStr( t, 1, 2 ) == "#" ) {
					continue;
				}
				pos = String13.FindIgnoreCase( t, " ", 1, 0 );
				name = null;
				value = null;

				if ( pos != 0 ) {
					name = String13.ToLower( String13.SubStr( t, 1, pos ) );
					value = String13.SubStr( t, pos + 1, 0 );
				} else {
					name = String13.ToLower( t );
				}

				if ( !Lang13.Bool( name ) ) {
					continue;
				}

				switch ((string)( name )) {
					case "address":
						GlobalVars.sqladdress = value;
						break;
					case "port":
						GlobalVars.sqlport = value;
						break;
					case "database":
						GlobalVars.sqldb = value;
						break;
					case "login":
						GlobalVars.sqllogin = value;
						break;
					case "password":
						GlobalVars.sqlpass = value;
						break;
					case "feedback_database":
						GlobalVars.sqlfdbkdb = value;
						break;
					case "feedback_login":
						GlobalVars.sqlfdbklogin = value;
						break;
					case "feedback_password":
						GlobalVars.sqlfdbkpass = value;
						break;
					case "enable_stat_tracking":
						GlobalVars.sqllogging = true;
						break;
					default:
						GlobalVars.diary.WriteMsg( "Unknown setting in configuration: '" + name + "'" );
						break;
				}
			}
			return;
		}

		// Function from file: configuration.dm
		public void load( string filename = null, string type = null ) {
			type = type ?? "config";

			ByTable Lines = null;
			dynamic t = null;
			int pos = 0;
			string name = null;
			dynamic value = null;
			int prob_pos = 0;
			string prob_name = null;
			string prob_value = null;

			Lines = GlobalFuncs.file2list( filename );

			foreach (dynamic _c in Lang13.Enumerate( Lines )) {
				t = _c;
				

				if ( !Lang13.Bool( t ) ) {
					continue;
				}
				t = GlobalFuncs.trim( t );

				if ( Lang13.Length( t ) == 0 ) {
					continue;
				} else if ( String13.SubStr( t, 1, 2 ) == "#" ) {
					continue;
				}
				pos = String13.FindIgnoreCase( t, " ", 1, 0 );
				name = null;
				value = null;

				if ( pos != 0 ) {
					name = String13.ToLower( String13.SubStr( t, 1, pos ) );
					value = String13.SubStr( t, pos + 1, 0 );
				} else {
					name = String13.ToLower( t );
				}

				if ( !Lang13.Bool( name ) ) {
					continue;
				}

				if ( type == "config" ) {
					
					switch ((string)( name )) {
						case "resource_urls":
							GlobalVars.config.resource_urls = GlobalFuncs.text2list( value, " " );
							break;
						case "admin_legacy_system":
							GlobalVars.config.admin_legacy_system = true;
							break;
						case "ban_legacy_system":
							GlobalVars.config.ban_legacy_system = true;
							break;
						case "use_age_restriction_for_jobs":
							GlobalVars.config.use_age_restriction_for_jobs = true;
							break;
						case "jobs_have_minimal_access":
							GlobalVars.config.jobs_have_minimal_access = true;
							break;
						case "use_recursive_explosions":
							this.use_recursive_explosions = true;
							break;
						case "log_ooc":
							GlobalVars.config.log_ooc = true;
							break;
						case "log_access":
							GlobalVars.config.log_access = true;
							break;
						case "sql_enabled":
							GlobalVars.config.sql_enabled = String13.ParseNumber( value );
							break;
						case "log_say":
							GlobalVars.config.log_say = true;
							break;
						case "log_admin":
							GlobalVars.config.log_admin = true;
							break;
						case "log_admin_only":
							GlobalVars.config.log_admin_only = GlobalVars.TRUE;
							break;
						case "log_debug":
							GlobalVars.config.log_debug = String13.ParseNumber( value );
							break;
						case "log_game":
							GlobalVars.config.log_game = true;
							break;
						case "log_vote":
							GlobalVars.config.log_vote = true;
							break;
						case "log_whisper":
							GlobalVars.config.log_whisper = true;
							break;
						case "log_attack":
							GlobalVars.config.log_attack = true;
							break;
						case "log_emote":
							GlobalVars.config.log_emote = true;
							break;
						case "log_adminchat":
							GlobalVars.config.log_adminchat = true;
							break;
						case "log_adminwarn":
							GlobalVars.config.log_adminwarn = true;
							break;
						case "log_adminghost":
							GlobalVars.config.log_adminghost = true;
							break;
						case "log_runtimes":
							GlobalVars.config.log_runtimes = true;
							break;
						case "log_pda":
							GlobalVars.config.log_pda = true;
							break;
						case "log_hrefs":
							GlobalVars.config.log_hrefs = true;
							break;
						case "allow_admin_ooccolor":
							GlobalVars.config.allow_admin_ooccolor = true;
							break;
						case "allow_vote_restart":
							GlobalVars.config.allow_vote_restart = true;
							break;
						case "allow_vote_mode":
							GlobalVars.config.allow_vote_mode = true;
							break;
						case "allow_admin_jump":
							GlobalVars.config.allow_admin_jump = true;
							break;
						case "allow_admin_rev":
							GlobalVars.config.allow_admin_rev = true;
							break;
						case "allow_admin_spawning":
							GlobalVars.config.allow_admin_spawning = true;
							break;
						case "no_dead_vote":
							GlobalVars.config.vote_no_dead = true;
							break;
						case "default_no_vote":
							GlobalVars.config.vote_no_default = true;
							break;
						case "vote_delay":
							GlobalVars.config.vote_delay = String13.ParseNumber( value );
							break;
						case "vote_period":
							GlobalVars.config.vote_period = String13.ParseNumber( value );
							break;
						case "allow_ai":
							GlobalVars.config.allow_ai = true;
							break;
						case "norespawn":
							GlobalVars.config.respawn = false;
							break;
						case "respawn_as_mommi":
							GlobalVars.config.respawn_as_mommi = true;
							break;
						case "no_respawn_as_mouse":
							GlobalVars.config.respawn_as_mouse = false;
							break;
						case "servername":
							GlobalVars.config.server_name = value;
							break;
						case "serversuffix":
							GlobalVars.config.server_suffix = true;
							break;
						case "nudge_script_path":
							GlobalVars.config.nudge_script_path = value;
							break;
						case "hostedby":
							GlobalVars.config.hostedby = value;
							break;
						case "server":
							GlobalVars.config.server = value;
							break;
						case "banappeals":
							GlobalVars.config.banappeals = value;
							break;
						case "wikiurl":
							GlobalVars.config.wikiurl = value;
							break;
						case "forumurl":
							GlobalVars.config.forumurl = value;
							break;
						case "guest_jobban":
							GlobalVars.config.guest_jobban = true;
							break;
						case "guest_ban":
							GlobalVars.guests_allowed = false;
							break;
						case "usewhitelist":
							GlobalVars.config.usewhitelist = true;
							break;
						case "feature_object_spell_system":
							GlobalVars.config.feature_object_spell_system = true;
							break;
						case "allow_metadata":
							GlobalVars.config.allow_Metadata = true;
							break;
						case "traitor_scaling":
							GlobalVars.config.traitor_scaling = true;
							break;
						case "protect_roles_from_antagonist":
							GlobalVars.config.protect_roles_from_antagonist = true;
							break;
						case "probability":
							prob_pos = String13.FindIgnoreCase( value, " ", 1, 0 );
							prob_name = null;
							prob_value = null;

							if ( prob_pos != 0 ) {
								prob_name = String13.ToLower( String13.SubStr( value, 1, prob_pos ) );
								prob_value = String13.SubStr( value, prob_pos + 1, 0 );
								Interface13.Stat( null, GlobalVars.config.modes.Contains( prob_name ) );

								if ( false ) {
									GlobalVars.config.probabilities[prob_name] = String13.ParseNumber( prob_value );
								} else {
									GlobalVars.diary.WriteMsg( "Unknown game mode probability configuration definition: " + prob_name + "." );
								}
							} else {
								GlobalVars.diary.WriteMsg( "Incorrect probability configuration definition: " + prob_name + "  " + prob_value + "." );
							}
							break;
						case "allow_random_events":
							GlobalVars.config.allow_random_events = true;
							break;
						case "kick_inactive":
							GlobalVars.config.kick_inactive = true;
							break;
						case "load_jobs_from_txt":
							this.load_jobs_from_txt = true;
							break;
						case "alert_red_upto":
							GlobalVars.config.alert_desc_red_upto = value;
							break;
						case "alert_red_downto":
							GlobalVars.config.alert_desc_red_downto = value;
							break;
						case "alert_blue_downto":
							GlobalVars.config.alert_desc_blue_downto = value;
							break;
						case "alert_blue_upto":
							GlobalVars.config.alert_desc_blue_upto = value;
							break;
						case "alert_green":
							GlobalVars.config.alert_desc_green = value;
							break;
						case "alert_delta":
							GlobalVars.config.alert_desc_delta = value;
							break;
						case "forbid_singulo_possession":
							this.forbid_singulo_possession = true;
							break;
						case "popup_admin_pm":
							GlobalVars.config.popup_admin_pm = true;
							break;
						case "allow_holidays":
							GlobalVars.Holiday = 1;
							break;
						case "use_irc_bot":
							this.use_irc_bot = true;
							break;
						case "ticklag":
							this.Ticklag = String13.ParseNumber( value );
							break;
						case "allow_antag_hud":
							GlobalVars.config.antag_hud_allowed = true;
							break;
						case "antag_hud_restricted":
							GlobalVars.config.antag_hud_restricted = true;
							break;
						case "socket_talk":
							this.socket_talk = String13.ParseNumber( value );
							break;
						case "humans_need_surnames":
							this.humans_need_surnames = true;
							break;
						case "tor_ban":
							this.ToRban = true;
							break;
						case "automute_on":
							this.automute_on = true;
							break;
						case "usealienwhitelist":
							this.usealienwhitelist = true;
							break;
						case "alien_player_ratio":
							this.limitalienplayers = true;
							this.alien_to_human_ratio = String13.ParseNumber( value );
							break;
						case "assistant_maint":
							GlobalVars.config.assistant_maint = true;
							break;
						case "gateway_delay":
							GlobalVars.config.gateway_delay = String13.ParseNumber( value );
							break;
						case "continuous_rounds":
							GlobalVars.config.continous_rounds = true;
							break;
						case "ghost_interaction":
							GlobalVars.config.ghost_interaction = true;
							break;
						case "disable_player_mice":
							GlobalVars.config.disable_player_mice = true;
							break;
						case "uneducated_mice":
							GlobalVars.config.uneducated_mice = true;
							break;
						case "comms_password":
							GlobalVars.config.comms_password = value;
							break;
						case "paperwork_library":
							GlobalVars.config.paperwork_library = true;
							break;
						case "irc_bot_host":
							GlobalVars.config.irc_bot_host = value;
							break;
						case "irc_bot_port":
							GlobalVars.config.irc_bot_port = String13.ParseNumber( value );
							break;
						case "irc_bot_server_id":
							GlobalVars.config.irc_bot_server_id = value;
							break;
						case "python_path":
							
							if ( Lang13.Bool( value ) ) {
								GlobalVars.config.python_path = value;
							} else if ( Game13.system_type == GlobalVars.UNIX ) {
								GlobalVars.config.python_path = "/usr/bin/env python2";
							} else {
								GlobalVars.config.python_path = "python";
							}
							break;
						case "allow_cult_ghostwriter":
							GlobalVars.config.cult_ghostwriter = true;
							break;
						case "req_cult_ghostwriter":
							GlobalVars.config.cult_ghostwriter_req_cultists = value;
							break;
						case "assistant_limit":
							GlobalVars.config.assistantlimit = true;
							break;
						case "assistant_ratio":
							GlobalVars.config.assistantratio = String13.ParseNumber( value );
							break;
						case "copy_logs":
							this.copy_logs = value;
							break;
						case "media_base_url":
							this.media_base_url = value;
							break;
						case "media_secret_key":
							this.media_secret_key = value;
							break;
						case "vgws_base_url":
							this.vgws_base_url = value;
							break;
						case "map_voting":
							this.map_voting = true;
							break;
						case "renders_url":
							this.renders_url = value;
							break;
						case "mommi_static":
							this.mommi_static = true;
							break;
						default:
							GlobalVars.diary.WriteMsg( "Unknown setting in configuration: '" + name + "'" );
							break;
					}
				} else if ( type == "game_options" ) {
					
					if ( !Lang13.Bool( value ) ) {
						GlobalVars.diary.WriteMsg( "Unknown value for setting " + name + " in " + filename + "." );
					}
					value = String13.ParseNumber( value );

					switch ((string)( name )) {
						case "max_explosion_range":
							GlobalVars.MAX_EXPLOSION_RANGE = value;
							break;
						case "health_threshold_crit":
							GlobalVars.config.health_threshold_crit = value;
							break;
						case "health_threshold_softcrit":
							GlobalVars.config.health_threshold_softcrit = value;
							break;
						case "health_threshold_dead":
							GlobalVars.config.health_threshold_dead = value;
							break;
						case "revival_pod_plants":
							GlobalVars.config.revival_pod_plants = value;
							break;
						case "revival_cloning":
							GlobalVars.config.revival_cloning = value;
							break;
						case "revival_brain_life":
							GlobalVars.config.revival_brain_life = value;
							break;
						case "run_speed":
							GlobalVars.config.run_speed = value;
							break;
						case "walk_speed":
							GlobalVars.config.walk_speed = value;
							break;
						case "human_delay":
							GlobalVars.config.human_delay = value;
							break;
						case "robot_delay":
							GlobalVars.config.robot_delay = value;
							break;
						case "monkey_delay":
							GlobalVars.config.monkey_delay = value;
							break;
						case "alien_delay":
							GlobalVars.config.alien_delay = value;
							break;
						case "slime_delay":
							GlobalVars.config.slime_delay = value;
							break;
						case "animal_delay":
							GlobalVars.config.animal_delay = value;
							break;
						case "organ_health_multiplier":
							GlobalVars.config.organ_health_multiplier = value / 100;
							break;
						case "organ_regeneration_multiplier":
							GlobalVars.config.organ_regeneration_multiplier = value / 100;
							break;
						case "bones_can_break":
							GlobalVars.config.bones_can_break = value;
							break;
						case "limbs_can_break":
							GlobalVars.config.limbs_can_break = value;
							break;
						case "respawn_delay":
							GlobalVars.config.respawn_delay = value;
							break;
						case "emag_energy":
							GlobalVars.config.emag_energy = value;
							break;
						case "emag_starts_charged":
							GlobalVars.config.emag_starts_charged = value;
							break;
						case "emag_recharge_rate":
							GlobalVars.config.emag_recharge_rate = value;
							break;
						case "emag_recharge_ticks":
							GlobalVars.config.emag_recharge_ticks = value;
							break;
						case "silent_ai":
							GlobalVars.config.silent_ai = true;
							break;
						case "silent_borg":
							GlobalVars.config.silent_borg = true;
							break;
						case "borer_takeover_immediately":
							GlobalVars.config.borer_takeover_immediately = true;
							break;
						default:
							GlobalVars.diary.WriteMsg( "Unknown setting in configuration: '" + name + "'" );
							break;
					}
				}
			}
			return;
		}

	}

}