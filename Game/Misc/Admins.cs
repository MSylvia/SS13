// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Admins : Game_Data {

		public Base_Data selected_shuttle = null;
		public dynamic rank = "Temporary Admin";
		public Client owner = null;
		public dynamic rights = 0;
		public string fakekey = null;
		public dynamic marked_datum = null;
		public double? admincaster_screen = 0;
		public FeedMessage admincaster_feed_message = new FeedMessage();
		public dynamic admincaster_feed_channel = new FeedChannel();
		public string admincaster_signature = null;
		public bool sessKey = false;

		// Function from file: holder2.dm
		public Admins ( dynamic initial_rank = null, dynamic initial_rights = null, string ckey = null ) {
			initial_rank = initial_rank ?? "Temporary Admin";
			initial_rights = initial_rights ?? 0;

			
			if ( !Lang13.Bool( ckey ) ) {
				GlobalFuncs.error( "Admin datum created without a ckey argument. Datum has been deleted" );
				Lang13.Delete( this );
				Task13.Source = null;
				return;
				return;
			}
			this.admincaster_signature = "Nanotrasen Officer #" + Rand13.Int( 0, 9 ) + Rand13.Int( 0, 9 ) + Rand13.Int( 0, 9 );
			this.rank = initial_rank;
			this.rights = initial_rights;
			GlobalVars.admin_datums[ckey] = this;
			return;
		}

		// Function from file: topic.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Client CLIENT = null;
			dynamic S = null;
			dynamic AI = null;
			dynamic S2 = null;
			ByTable lawtypes = null;
			dynamic lawtype = null;
			string newlaw = null;
			dynamic S3 = null;
			dynamic lawtypes2 = null;
			dynamic lawtype2 = null;
			dynamic law_zeroth = null;
			dynamic law_zeroth_borg = null;
			dynamic S4 = null;
			string adminckey = null;
			string playerckey = null;
			dynamic banedit = null;
			double? banid = null;
			double? bantype = null;
			string banckey = null;
			double? banduration = null;
			dynamic banjob = null;
			string banreason = null;
			dynamic playermob = null;
			dynamic M = null;
			string adm_ckey = null;
			string task = null;
			string new_ckey = null;
			Admins D = null;
			dynamic new_rank = null;
			dynamic rights = null;
			Client C = null;
			ByTable permissionlist = null;
			int? i = null;
			dynamic new_permission = null;
			dynamic M2 = null;
			bool? delmob = null;
			dynamic new_mob = null;
			dynamic banfolder = null;
			dynamic key = null;
			dynamic reason = null;
			dynamic banfolder2 = null;
			dynamic reason2 = null;
			bool temp = false;
			double minutes = 0;
			dynamic banned_key = null;
			dynamic duration = null;
			dynamic mins = null;
			dynamic M3 = null;
			int oocbanned = 0;
			dynamic mins2 = null;
			dynamic reason3 = null;
			dynamic reason4 = null;
			dynamic M4 = null;
			dynamic banreason2 = null;
			dynamic reason5 = null;
			dynamic M5 = null;
			string dat = null;
			string header = null;
			string body = null;
			string jobs = null;
			int counter = 0;
			dynamic jobPos = null;
			Job job = null;
			dynamic jobPos2 = null;
			Job job2 = null;
			dynamic jobPos3 = null;
			Job job3 = null;
			dynamic jobPos4 = null;
			Job job4 = null;
			dynamic jobPos5 = null;
			Job job5 = null;
			dynamic jobPos6 = null;
			Job job6 = null;
			dynamic jobPos7 = null;
			Job job7 = null;
			dynamic isbanned_dept = null;
			dynamic M6 = null;
			ByTable joblist = null;
			dynamic jobPos8 = null;
			Job temp2 = null;
			dynamic jobPos9 = null;
			Job temp3 = null;
			dynamic jobPos10 = null;
			Job temp4 = null;
			dynamic jobPos11 = null;
			Job temp5 = null;
			dynamic jobPos12 = null;
			Job temp6 = null;
			dynamic jobPos13 = null;
			Job temp7 = null;
			dynamic jobPos14 = null;
			Job temp8 = null;
			ByTable notbannedlist = null;
			dynamic job8 = null;
			dynamic mins3 = null;
			dynamic reason6 = null;
			dynamic msg = null;
			dynamic job9 = null;
			dynamic reason7 = null;
			dynamic msg2 = null;
			dynamic job10 = null;
			dynamic msg3 = null;
			dynamic job11 = null;
			dynamic reason8 = null;
			dynamic M7 = null;
			string t = null;
			ByTable t_split = null;
			string key2 = null;
			dynamic job12 = null;
			dynamic M8 = null;
			dynamic mins4 = null;
			dynamic reason9 = null;
			dynamic reason10 = null;
			bool sticky = false;
			dynamic banfolder3 = null;
			dynamic key3 = null;
			dynamic M9 = null;
			dynamic mute_type = null;
			string dat2 = null;
			dynamic mode = null;
			string dat3 = null;
			dynamic mode2 = null;
			ByTable possible = null;
			dynamic mixed_mode_added = null;
			dynamic mixed_mode_add = null;
			ByTable possible2 = null;
			dynamic mixed_mode_added2 = null;
			dynamic mixed_mode_add2 = null;
			dynamic H = null;
			dynamic M10 = null;
			dynamic H2 = null;
			Mob_Living_SimpleAnimal_Corgi M11 = null;
			dynamic M12 = null;
			dynamic speech = null;
			dynamic M13 = null;
			dynamic prison_cell = null;
			dynamic M14 = null;
			string team = null;
			Obj_Item_Packobelongings pack = null;
			Obj_Item I = null;
			Obj_Item G = null;
			Obj_Item_Weapon_Card_Id_Thunderdome ident = null;
			dynamic H3 = null;
			dynamic K = null;
			Obj_Item_Clothing_Monkeyclothes_JumpsuitGreen JS = null;
			dynamic olduniform = null;
			Ent_Static oldhat = null;
			dynamic H4 = null;
			dynamic K2 = null;
			Obj_Item_Clothing_Monkeyclothes_JumpsuitRed JS2 = null;
			dynamic olduniform2 = null;
			Ent_Static oldhat2 = null;
			dynamic M15 = null;
			dynamic M16 = null;
			Obj_Item I2 = null;
			dynamic observer = null;
			dynamic L = null;
			dynamic H5 = null;
			Mob_Living_Silicon_Ai M17 = null;
			dynamic H6 = null;
			dynamic M18 = null;
			dynamic H7 = null;
			dynamic M19 = null;
			dynamic H8 = null;
			Mob_Living_SimpleAnimal_Hostile_Retaliate_Cluwne M20 = null;
			dynamic H9 = null;
			Mob_Living_Silicon_Robot M21 = null;
			dynamic H10 = null;
			Mob_Living_Silicon_Robot_Mommi M22 = null;
			dynamic M23 = null;
			dynamic new_mob2 = null;
			dynamic H11 = null;
			double? block = null;
			dynamic M24 = null;
			dynamic M25 = null;
			Client C2 = null;
			dynamic cult_round = null;
			dynamic input = null;
			Mind H12 = null;
			Mob_Dead_Observer O = null;
			dynamic M26 = null;
			dynamic input2 = null;
			Mob_Dead_Observer O2 = null;
			double? x = null;
			double? y = null;
			double? z = null;
			Client C3 = null;
			dynamic M27 = null;
			string location_description = null;
			string special_role_description = null;
			string health_description = null;
			string gender_description = null;
			string species_description = null;
			dynamic T = null;
			dynamic L2 = null;
			string status = null;
			dynamic H13 = null;
			dynamic H14 = null;
			dynamic M28 = null;
			Obj_Effect_Stop S5 = null;
			dynamic T2 = null;
			dynamic M29 = null;
			string receive_type = null;
			dynamic H15 = null;
			dynamic input3 = null;
			dynamic M30 = null;
			string receive_type2 = null;
			dynamic H16 = null;
			dynamic input4 = null;
			dynamic P = null;
			string info_2 = null;
			dynamic H17 = null;
			dynamic sent = null;
			dynamic sentname = null;
			dynamic M31 = null;
			dynamic M32 = null;
			dynamic M33 = null;
			dynamic M34 = null;
			dynamic M35 = null;
			dynamic M36 = null;
			dynamic lawtypes3 = null;
			dynamic selected_law = null;
			string subject = null;
			Ent_Static loc = null;
			ByTable dirty_paths = null;
			ByTable paths = null;
			ByTable removed_paths = null;
			dynamic dirty_path = null;
			Type path = null;
			ByTable offset = null;
			double? number = null;
			double? X = null;
			double? Y = null;
			double? Z = null;
			string tmp_dir = null;
			double? obj_dir = null;
			string obj_name = null;
			string where = null;
			dynamic target = null;
			dynamic path2 = null;
			double? i2 = null;
			dynamic O3 = null;
			dynamic N = null;
			dynamic O4 = null;
			dynamic M37 = null;
			dynamic path3 = null;
			dynamic path4 = null;
			bool ok = false;
			Obj_Item_Clothing_Under O5 = null;
			Obj_Item_Clothing O6 = null;
			Obj_Item_Clothing_Suit_Fire O7 = null;
			Obj_Structure_Grille O8 = null;
			Mob_Living_Carbon_Human H18 = null;
			Mob_Living_Carbon_Human H19 = null;
			dynamic A = null;
			Obj_Machinery_Computer_PrisonShuttle PS = null;
			bool? security = null;
			Mob_Living_Carbon_Human H20 = null;
			dynamic id = null;
			Obj_Item I3 = null;
			string objective = null;
			Mob_Living_Carbon_Human H21 = null;
			Objective new_objective = null;
			Mob_Living_Silicon A2 = null;
			Objective new_objective2 = null;
			dynamic range_dev = null;
			dynamic range_high = null;
			dynamic range_low = null;
			dynamic M38 = null;
			dynamic AffectedArea = null;
			int Message = 0;
			Obj W = null;
			dynamic M39 = null;
			dynamic T3 = null;
			Obj_Effect_Bhole bh = null;
			string answer = null;
			dynamic choice = null;
			Obj_Machinery_Light L3 = null;
			dynamic length = null;
			dynamic damage = null;
			string sure = null;
			int count = 0;
			ByTable lavaturfs = null;
			Tile_Simulated_Floor F = null;
			int? i3 = null;
			Mob_Living_Carbon L4 = null;
			Ent_Static F2 = null;
			bool safe = false;
			Obj_Structure O9 = null;
			Tile_Simulated_Floor F3 = null;
			string answer2 = null;
			Mob_Living M40 = null;
			Mob_Living_SimpleAnimal_Bee BEE = null;
			string answer3 = null;
			Mob_Living_Carbon_Human H22 = null;
			Obj_Item W2 = null;
			Mob_Living_Carbon C4 = null;
			ByTable turflist = null;
			dynamic T4 = null;
			dynamic U = null;
			Obj_Structure_Closet_Crate_Secure_Weapon_Experimental E = null;
			Obj_Item_Clothing_Under W3 = null;
			Obj_Machinery_Door_Airlock W4 = null;
			Mob_Living_Carbon_Human B = null;
			string show_log = null;
			dynamic choice2 = null;
			dynamic choice3 = null;
			dynamic choice4 = null;
			Obj_Structure_Bed_Chair_Vehicle_Adminbus A3 = null;
			dynamic T5 = null;
			Mob_Living_Carbon_Human_Dummy D2 = null;
			string newname = null;
			Obj_Item_Weapon_Card_Id_Admin admin_id = null;
			dynamic choice5 = null;
			dynamic levelchoice = null;
			dynamic salertchoice = null;
			dynamic choice6 = null;
			double i4 = 0;
			string choice7 = null;
			Mob_Living_Carbon_Human M41 = null;
			dynamic O10 = null;
			dynamic O11 = null;
			string choice8 = null;
			Obj_Item_Weapon_Bomberman B2 = null;
			string choice9 = null;
			Obj_Item_Weapon_Bomberman B3 = null;
			string choice10 = null;
			Obj_Item_Weapon_Bomberman B4 = null;
			string choice11 = null;
			Obj_Item_Weapon_Bomberman B5 = null;
			dynamic choice12 = null;
			ByTable possible_guns = null;
			dynamic path5 = null;
			dynamic choice13 = null;
			dynamic gun = null;
			Obj_Machinery_PortaTurret Turret = null;
			dynamic emag = null;
			dynamic choice14 = null;
			bool ok2 = false;
			bool num = false;
			dynamic TV = null;
			bool num2 = false;
			Obj_Item_Device_TransferValve TV2 = null;
			string dat4 = null;
			dynamic l = null;
			string dat5 = null;
			dynamic sig = null;
			string dat6 = null;
			dynamic sig2 = null;
			string dat7 = null;
			dynamic line = null;
			Job job13 = null;
			string dat8 = null;
			Mob_Living_Carbon_Human H23 = null;
			string dat9 = null;
			Mob_Living_Carbon_Human H24 = null;
			string dat10 = null;
			Mob_Living_Carbon_Human H25 = null;
			string dat11 = null;
			dynamic l2 = null;
			Obj_Machinery_Door_Airlock_Maintenance M42 = null;
			Obj_Machinery_Door_Airlock_Maintenance M43 = null;
			Job J = null;
			bool check = false;
			FeedChannel FC = null;
			string choice15 = null;
			FeedChannel newChannel = null;
			ByTable available_channels = null;
			FeedChannel F4 = null;
			FeedMessage newMsg = null;
			FeedChannel FC2 = null;
			Obj_Machinery_Newscaster NEWSCASTER = null;
			bool already_wanted = false;
			double? input_param = null;
			string choice16 = null;
			FeedMessage WANTED = null;
			Obj_Machinery_Newscaster NEWSCASTER2 = null;
			string choice17 = null;
			Obj_Machinery_Newscaster NEWSCASTER3 = null;
			dynamic FC3 = null;
			dynamic MSG = null;
			dynamic MSG2 = null;
			dynamic FC4 = null;
			dynamic FC5 = null;
			dynamic FC6 = null;
			dynamic FC7 = null;
			dynamic M44 = null;
			string lang2toggle = null;
			dynamic L5 = null;
			string key4 = null;
			dynamic add = null;
			string key5 = null;
			double? index = null;
			string ckey = null;
			dynamic M45 = null;
			Base_Data S6 = null;
			dynamic A4 = null;
			dynamic shuttle_to_add_to = null;
			Obj_Structure_DockingPort_Shuttle D3 = null;
			dynamic A5 = null;
			dynamic name = null;
			Obj_Structure_DockingPort_Destination D4 = null;
			dynamic S7 = null;
			Base_Data S8 = null;
			ByTable docking_ports_to_pick_from = null;
			ByTable options = null;
			Obj_Structure_DockingPort_Destination D5 = null;
			dynamic name2 = null;
			Obj_Structure_DockingPort choice18 = null;
			ByTable L6 = null;
			Obj_Structure_DockingPort_Destination D6 = null;
			string name3 = null;
			Obj_Structure_DockingPort port_to_link = null;
			Base_Data shuttle_to_link = null;
			dynamic choice19 = null;
			Obj_Structure_DockingPort_Shuttle D7 = null;
			dynamic A6 = null;
			dynamic S9 = null;
			Base_Data S10 = null;
			dynamic reason11 = null;
			Base_Data S11 = null;
			ByTable possible_ports = null;
			Obj_Structure_DockingPort_Destination D8 = null;
			dynamic name4 = null;
			dynamic choice20 = null;
			Obj_Structure_DockingPort target_port = null;
			Base_Data S12 = null;
			ByTable options2 = null;
			dynamic choice21 = null;
			dynamic new_value = null;
			ByTable locations = null;
			dynamic choice22 = null;
			dynamic variable_to_edit = null;
			dynamic D9 = null;
			Base_Data S13 = null;
			bool killed_objs = false;
			dynamic choice23 = null;
			dynamic T6 = null;
			Obj O12 = null;
			Base_Data S14 = null;
			dynamic T7 = null;
			ByTable destinations = null;
			Obj_Structure_DockingPort_Destination D10 = null;
			string name5 = null;
			dynamic choice24 = null;
			dynamic target2 = null;
			Base_Data S15 = null;
			dynamic choice25 = null;
			dynamic usr_loc = null;
			Obj_Machinery_Computer_ShuttleControl C5 = null;
			dynamic C6 = null;
			dynamic A7 = null;
			dynamic conflict = null;
			dynamic choice26 = null;
			dynamic name6 = null;
			Shuttle_Custom S16 = null;
			ByTable L7 = null;
			Base_Data S17 = null;
			Obj_Structure_DockingPort_Destination D11 = null;
			string name7 = null;
			Obj_Structure_DockingPort_Destination D12 = null;
			dynamic name8 = null;
			dynamic choice27 = null;
			dynamic A8 = null;
			dynamic T8 = null;
			Obj_Structure_DockingPort_Destination temp9 = null;
			Obj_Structure_DockingPort_Destination D13 = null;
			Base_Data S18 = null;
			Base_Data S19 = null;
			Shuttle S20 = null;
			Base_Data S21 = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( Task13.User.client != this.owner || !GlobalFuncs.check_rights( 0 ) ) {
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " tried to use the admin panel without authorization." );
				GlobalFuncs.message_admins( "" + Task13.User.key + " has attempted to override the admin panel!" );
				return null;
			}
			CLIENT = Task13.User.client;

			if ( Lang13.Bool( href_list["makeAntag"] ) ) {
				
				dynamic _a = href_list["makeAntag"]; // Was a switch-case, sorry for the mess.
				if ( _a=="1" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned a traitor." );

					if ( !this.makeTraitors() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately there weren't enough candidates available.</span>" );
					}
				} else if ( _a=="2" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned a changeling." );

					if ( !this.makeChanglings() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately there weren't enough candidates available.</span>" );
					}
				} else if ( _a=="3" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned revolutionaries." );

					if ( !this.makeRevs() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately there weren't enough candidates available.</span>" );
					}
				} else if ( _a=="4" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned a cultists." );

					if ( !this.makeCult() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately there weren't enough candidates available.</span>" );
					}
				} else if ( _a=="5" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned a malf AI." );

					if ( !this.makeMalfAImode() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately there weren't enough candidates available.</span>" );
					}
				} else if ( _a=="6" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned a wizard." );

					if ( !this.makeWizard() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately there weren't enough candidates available.</span>" );
					}
				} else if ( _a=="7" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned a nuke team." );

					if ( !this.makeNukeTeam() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately there weren't enough candidates available.</span>" );
					}
				} else if ( _a=="9" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned aliens." );
					this.makeAliens();
				} else if ( _a=="10" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned a death squad." );

					if ( !this.makeDeathsquad() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately, there were no candidates available</span>" );
					}
				} else if ( _a=="11" ) {
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has spawned vox raiders." );

					if ( !this.makeVoxRaiders() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unfortunately, there weren't enough candidates available.</span>" );
					}
				}
			} else {
				Interface13.Stat( null, href_list.Contains( "announce_laws" ) );

				if ( Lang13.Bool( href_list["makeAntag"] ) ) {
					S = Lang13.FindObj( href_list["mob"] );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has notified " + GlobalFuncs.key_name( S ) + " of a change to their laws." );
					GlobalFuncs.message_admins( "" + Task13.User.key + " has notified " + GlobalFuncs.key_name( S ) + " of a change to their laws." );
					GlobalFuncs.to_chat( S, "____________________________________" );
					GlobalFuncs.to_chat( S, "<span style=\"color:red;font-weight:bold;\">LAW CHANGE NOTICE</span>" );

					if ( Lang13.Bool( S.laws ) ) {
						GlobalFuncs.to_chat( S, "<b>Your new laws are as follows:</b>" );
						S.laws.show_laws( S );
					} else {
						GlobalFuncs.to_chat( S, "<b>Your laws are null.</b> Contact a coder immediately." );
					}
					GlobalFuncs.to_chat( S, "____________________________________" );

					if ( S is Mob_Living_Silicon_Ai ) {
						AI = S;
						((Mob_Living_Silicon_Ai)AI).notify_slaved( true );
					}
				} else {
					Interface13.Stat( null, href_list.Contains( "add_law" ) );

					if ( Lang13.Bool( href_list["makeAntag"] ) ) {
						S2 = Lang13.FindObj( href_list["mob"] );
						lawtypes = new ByTable().Set( "Law Zero", 0 ).Set( "Ion", -2 ).Set( "Core", -1 ).Set( "Standard", 1 );
						lawtype = Interface13.Input( "Select a law type.", "Law Type", 1, null, lawtypes, InputType.Any );
						lawtype = lawtypes[lawtype];

						if ( lawtype == null ) {
							return null;
						}
						Game13.log.WriteMsg( "## TESTING: " + ( "Lawtype: " + lawtype ) );

						if ( lawtype == 1 ) {
							lawtype = String13.ParseNumber( Interface13.Input( "Enter desired law priority. (15-50)", "Priority", 15, null, null, InputType.Num ) );
							lawtype = ( Convert.ToDouble( lawtype ) <= 15 ? ((dynamic)( 15 )) : ( Convert.ToDouble( lawtype ) >= 50 ? ((dynamic)( 50 )) : lawtype ) );
						}
						newlaw = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Please enter a new law for the AI.", "Freeform Law Entry", "", null, InputType.Any ) ), 1, 1024 );

						if ( newlaw == "" ) {
							return null;
						}
						((AiLaws)S2.laws).add_law( lawtype, newlaw );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has added a law to " + GlobalFuncs.key_name( S2 ) + ": \"" + newlaw + "\"" );
						GlobalFuncs.message_admins( "" + Task13.User.key + " has added a law to " + GlobalFuncs.key_name( S2 ) + ": \"" + newlaw + "\"" );
						GlobalVars.lawchanges.Add( "" + GlobalFuncs.key_name( Task13.User ) + " has added a law to " + GlobalFuncs.key_name( S2 ) + ": \"" + newlaw + "\"" );
					} else {
						Interface13.Stat( null, href_list.Contains( "reset_laws" ) );

						if ( Lang13.Bool( href_list["makeAntag"] ) ) {
							S3 = Lang13.FindObj( href_list["mob"] );
							lawtypes2 = Lang13.GetTypes( typeof(AiLaws) ) - typeof(AiLaws);
							lawtype2 = Interface13.Input( "Select a lawset.", "Law Type", 1, null, lawtypes2, InputType.Null | InputType.Any );

							if ( lawtype2 == null ) {
								return null;
							}
							Game13.log.WriteMsg( "## TESTING: " + ( "Lawtype: " + lawtype2 ) );
							law_zeroth = null;
							law_zeroth_borg = null;

							if ( Lang13.Bool( S3.laws.zeroth ) || Lang13.Bool( S3.laws.zeroth_borg ) ) {
								
								if ( Interface13.Alert( this, "Do you also wish to clear law zero?", "Yes", "No" ) == "No" ) {
									law_zeroth = S3.laws.zeroth;
									law_zeroth_borg = S3.laws.zeroth;
								}
							}
							S3.laws = Lang13.Call( lawtype2 );
							S3.laws.zeroth = law_zeroth;
							S3.laws.zeroth_borg = law_zeroth_borg;
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has reset " + GlobalFuncs.key_name( S3 ) + ": " + lawtype2 );
							GlobalFuncs.message_admins( "" + Task13.User.key + " has reset " + GlobalFuncs.key_name( S3 ) + ": " + lawtype2 );
							GlobalVars.lawchanges.Add( "" + GlobalFuncs.key_name( Task13.User ) + " has reset " + GlobalFuncs.key_name( S3 ) + ": " + lawtype2 );
						} else {
							Interface13.Stat( null, href_list.Contains( "clear_laws" ) );

							if ( Lang13.Bool( href_list["makeAntag"] ) ) {
								S4 = Lang13.FindObj( href_list["mob"] );
								S4.laws.clear_inherent_laws();
								S4.laws.clear_supplied_laws();
								S4.laws.clear_ion_laws();

								if ( Lang13.Bool( S4.laws.zeroth ) || Lang13.Bool( S4.laws.zeroth_borg ) ) {
									
									if ( Interface13.Alert( this, "Do you also wish to clear law zero?", "Yes", "No" ) == "Yes" ) {
										S4.laws.set_zeroth_law( "", "" );
									}
								}
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has purged " + GlobalFuncs.key_name( S4 ) );
								GlobalFuncs.message_admins( "" + Task13.User.key + " has purged " + GlobalFuncs.key_name( S4 ) );
								GlobalVars.lawchanges.Add( "" + GlobalFuncs.key_name( Task13.User ) + " has purged " + GlobalFuncs.key_name( S4 ) );
							} else if ( Lang13.Bool( href_list["dbsearchckey"] ) || Lang13.Bool( href_list["dbsearchadmin"] ) ) {
								adminckey = href_list["dbsearchadmin"];
								playerckey = href_list["dbsearchckey"];
								this.DB_ban_panel( playerckey, adminckey );
								return null;
							} else if ( Lang13.Bool( href_list["dbbanedit"] ) ) {
								banedit = href_list["dbbanedit"];
								banid = String13.ParseNumber( href_list["dbbanid"] );

								if ( !Lang13.Bool( banedit ) || !Lang13.Bool( banid ) ) {
									return null;
								}
								this.DB_ban_edit( banid, banedit );
								return null;
							} else if ( Lang13.Bool( href_list["dbbanaddtype"] ) ) {
								bantype = String13.ParseNumber( href_list["dbbanaddtype"] );
								banckey = href_list["dbbanaddckey"];
								banduration = String13.ParseNumber( href_list["dbbaddduration"] );
								banjob = href_list["dbbanaddjob"];
								banreason = href_list["dbbanreason"];
								banckey = String13.CKey( banckey );

								switch ((double?)( bantype )) {
									case 1:
										
										if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) ) {
											GlobalFuncs.to_chat( Task13.User, "Not enough parameters (Requires ckey and reason)" );
											return null;
										}
										banduration = null;
										banjob = null;
										break;
									case 2:
										
										if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) || !Lang13.Bool( banduration ) ) {
											GlobalFuncs.to_chat( Task13.User, "Not enough parameters (Requires ckey, reason and duration)" );
											return null;
										}
										banjob = null;
										break;
									case 3:
										
										if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) || !Lang13.Bool( banjob ) ) {
											GlobalFuncs.to_chat( Task13.User, "Not enough parameters (Requires ckey, reason and job)" );
											return null;
										}
										banduration = null;
										break;
									case 4:
										
										if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) || !Lang13.Bool( banjob ) || !Lang13.Bool( banduration ) ) {
											GlobalFuncs.to_chat( Task13.User, "Not enough parameters (Requires ckey, reason and job)" );
											return null;
										}
										break;
									case 6:
										
										if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) ) {
											GlobalFuncs.to_chat( Task13.User, "Not enough parameters (Requires ckey and reason)" );
											return null;
										}
										banduration = null;
										banjob = null;
										break;
									case 7:
										
										if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) ) {
											GlobalFuncs.to_chat( Task13.User, "Not enough parameters (Requires ckey and reason)" );
											return null;
										}
										banduration = null;
										break;
									case 8:
										
										if ( !Lang13.Bool( banckey ) || !Lang13.Bool( banreason ) || !Lang13.Bool( banduration ) ) {
											GlobalFuncs.to_chat( Task13.User, "Not enough parameters (Requires ckey, reason, and duration)" );
											return null;
										}
										break;
								}
								playermob = null;

								foreach (dynamic _c in Lang13.Enumerate( GlobalVars.player_list )) {
									M = _c;
									

									if ( M.ckey == banckey ) {
										playermob = M;
										break;
									}
								}
								banreason = "(MANUAL BAN) " + banreason;
								this.DB_ban_record( bantype, playermob, banduration, banreason, banjob, null, banckey );
							} else if ( Lang13.Bool( href_list["editrights"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 128 ) ) {
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " attempted to edit the admin permissions without sufficient rights." );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempted to edit the admin permissions without sufficient rights." );
									return null;
								}
								adm_ckey = null;
								task = href_list["editrights"];

								if ( task == "add" ) {
									new_ckey = String13.CKey( Interface13.Input( Task13.User, "New admin's ckey", "Admin ckey", null, null, InputType.Str | InputType.Null ) );

									if ( !Lang13.Bool( new_ckey ) ) {
										return null;
									}
									Interface13.Stat( null, GlobalVars.admin_datums.Contains( new_ckey ) );

									if ( !Lang13.Bool( new_ckey ) ) {
										GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: Topic 'editrights': " + new_ckey + " is already an admin</font>" );
										return null;
									}
									adm_ckey = new_ckey;
									task = "rank";
								} else if ( task != "show" ) {
									adm_ckey = String13.CKey( href_list["ckey"] );

									if ( !Lang13.Bool( adm_ckey ) ) {
										GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: Topic 'editrights': No valid ckey</font>" );
										return null;
									}
								}
								D = GlobalVars.admin_datums[adm_ckey];

								if ( task == "remove" ) {
									
									if ( Interface13.Alert( "Are you sure you want to remove " + adm_ckey + "?", "Message", "Yes", "Cancel" ) == "Yes" ) {
										
										if ( !( D != null ) ) {
											return null;
										}
										GlobalVars.admin_datums.Remove( adm_ckey );
										D.disassociate();
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " removed " + adm_ckey + " from the admins list" );
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + adm_ckey + " from the admins list" );
										this.log_admin_rank_modification( adm_ckey, "Removed" );
									}
								} else if ( task == "rank" ) {
									new_rank = null;

									if ( GlobalVars.admin_ranks.len != 0 ) {
										new_rank = Interface13.Input( "Please select a rank", "New rank", null, null, GlobalVars.admin_ranks | "*New Rank*", InputType.Null | InputType.Any );
									} else {
										new_rank = Interface13.Input( "Please select a rank", "New rank", null, null, new ByTable(new object [] { "Game Master", "Game Admin", "Trial Admin", "Admin Observer", "*New Rank*" }), InputType.Null | InputType.Any );
									}
									rights = 0;

									if ( D != null ) {
										rights = D.rights;
									}

									dynamic _d = new_rank; // Was a switch-case, sorry for the mess.
									if ( _d==null || _d=="" ) {
										return null;
									} else if ( _d=="*New Rank*" ) {
										new_rank = Interface13.Input( "Please input a new rank", "New custom rank", null, null, null, InputType.Str | InputType.Null );

										if ( GlobalVars.config.admin_legacy_system ) {
											new_rank = String13.CKeyPreserveCase( new_rank );
										}

										if ( !Lang13.Bool( new_rank ) ) {
											GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: Topic 'editrights': Invalid rank</font>" );
											return null;
										}

										if ( GlobalVars.config.admin_legacy_system ) {
											
											if ( GlobalVars.admin_ranks.len != 0 ) {
												Interface13.Stat( null, GlobalVars.admin_ranks.Contains( new_rank ) );

												if ( false ) {
													rights = GlobalVars.admin_ranks[new_rank];
												} else {
													GlobalVars.admin_ranks[new_rank] = 0;
												}
											}
										}
									} else {
										
										if ( GlobalVars.config.admin_legacy_system ) {
											new_rank = String13.CKeyPreserveCase( new_rank );
											rights = GlobalVars.admin_ranks[new_rank];
										}
									}

									if ( D != null ) {
										D.disassociate();
										D.rank = new_rank;
										D.rights = rights;
									} else {
										D = new Admins( new_rank, rights, adm_ckey );
									}
									C = GlobalVars.directory[adm_ckey];
									D.associate( C );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " edited the admin rank of " + adm_ckey + " to " + new_rank );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " edited the admin rank of " + adm_ckey + " to " + new_rank );
									this.log_admin_rank_modification( adm_ckey, new_rank );
								} else if ( task == "permissions" ) {
									
									if ( !( D != null ) ) {
										return null;
									}
									permissionlist = new ByTable();
									i = null;
									i = 1;

									while (( i ??0) <= 16384) {
										permissionlist[GlobalFuncs.rights2text( i )] = i;
										i <<= 1;
									}
									new_permission = Interface13.Input( "Select a permission to turn on/off", "Permission toggle", null, null, permissionlist, InputType.Null | InputType.Any );

									if ( !Lang13.Bool( new_permission ) ) {
										return null;
									}
									D.rights ^= permissionlist[new_permission];
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled the " + new_permission + " permission of " + adm_ckey );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled the " + new_permission + " permission of " + adm_ckey );
									this.log_admin_permission_modification( adm_ckey, permissionlist[new_permission] );
								}
								this.edit_admin_permissions();
							} else if ( Lang13.Bool( href_list["call_shuttle"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}

								if ( GlobalVars.ticker.mode.name == "blob" ) {
									Interface13.Alert( "You can't call the shuttle during blob!" );
									return null;
								}

								dynamic _f = href_list["call_shuttle"]; // Was a switch-case, sorry for the mess.
								if ( _f=="1" ) {
									
									if ( !( GlobalVars.ticker != null ) || GlobalVars.emergency_shuttle.location != 0 ) {
										return null;
									}
									GlobalVars.emergency_shuttle.incall();
									GlobalFuncs.captain_announce( "The emergency shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes." );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " called the Emergency Shuttle" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " called the Emergency Shuttle to the station</span>" );
								} else if ( _f=="2" ) {
									
									if ( !( GlobalVars.ticker != null ) || GlobalVars.emergency_shuttle.location != 0 || GlobalVars.emergency_shuttle.direction == 0 ) {
										return null;
									}

									switch ((int)( GlobalVars.emergency_shuttle.direction )) {
										case -1:
											GlobalVars.emergency_shuttle.incall();
											GlobalFuncs.captain_announce( "The emergency shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes." );
											GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " called the Emergency Shuttle" );
											GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " called the Emergency Shuttle to the station</span>" );
											break;
										case 1:
											GlobalVars.emergency_shuttle.recall();
											GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " sent the Emergency Shuttle back" );
											GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " sent the Emergency Shuttle back</span>" );
											break;
									}
								}
								href_list["secretsadmin"] = "check_antagonist";
							} else if ( Lang13.Bool( href_list["edit_shuttle_time"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 16 ) ) {
									return null;
								}
								GlobalVars.emergency_shuttle.settimeleft( Interface13.Input( "Enter new shuttle duration (seconds):", "Edit Shuttle Timeleft", GlobalVars.emergency_shuttle.timeleft(), null, null, InputType.Num ) );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " edited the Emergency Shuttle's timeleft to " + GlobalVars.emergency_shuttle.timeleft() );
								GlobalFuncs.captain_announce( "The emergency shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes." );
								GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " edited the Emergency Shuttle's timeleft to " + GlobalVars.emergency_shuttle.timeleft() + "</span>" );
								href_list["secretsadmin"] = "check_antagonist";
							} else if ( Lang13.Bool( href_list["delay_round_end"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 16 ) ) {
									return null;
								}
								GlobalVars.ticker.delay_end = !( GlobalVars.ticker.delay_end != 0 ) ?1:0;
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " " + ( GlobalVars.ticker.delay_end != 0 ? "delayed the round end" : "has made the round end normally" ) + "." );
								GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " " + ( GlobalVars.ticker.delay_end != 0 ? "delayed the round end" : "has made the round end normally" ) + ".</span>" );
								href_list["secretsadmin"] = "check_antagonist";
							} else if ( Lang13.Bool( href_list["simplemake"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								M2 = Lang13.FindObj( href_list["mob"] );

								if ( !( M2 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}
								delmob = false;

								switch ((string)( Interface13.Alert( "Delete old mob?", "Message", "Yes", "No", "Cancel" ) )) {
									case "Cancel":
										return null;
										break;
									case "Yes":
										delmob = true;
										break;
								}
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has used rudimentary transformation on " + GlobalFuncs.key_name( M2 ) + ". Transforming to " + href_list["simplemake"] + "; deletemob=" + delmob );
								GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has used rudimentary transformation on " + GlobalFuncs.key_name_admin( M2 ) + ". Transforming to " + href_list["simplemake"] + "; deletemob=" + delmob + "</span>" );
								new_mob = null;

								dynamic _h = href_list["simplemake"]; // Was a switch-case, sorry for the mess.
								if ( _h=="observer" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Dead_Observer), null, null, delmob );
								} else if ( _h=="drone" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Drone), null, null, delmob );
								} else if ( _h=="hunter" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Hunter), null, null, delmob );
								} else if ( _h=="queen" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Queen), null, null, delmob );
								} else if ( _h=="sentinel" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Humanoid_Sentinel), null, null, delmob );
								} else if ( _h=="larva" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Alien_Larva), null, null, delmob );
								} else if ( _h=="human" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Human), null, null, delmob );
								} else if ( _h=="slime" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Slime), null, null, delmob );
								} else if ( _h=="adultslime" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Slime_Adult), null, null, delmob );
								} else if ( _h=="monkey" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Carbon_Monkey), null, null, delmob );
								} else if ( _h=="robot" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_Silicon_Robot), null, null, delmob );
								} else if ( _h=="cat" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Cat), null, null, delmob );
								} else if ( _h=="runtime" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Cat_Runtime), null, null, delmob );
								} else if ( _h=="corgi" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Corgi), null, null, delmob );
								} else if ( _h=="ian" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Corgi_Ian), null, null, delmob );
								} else if ( _h=="crab" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Crab), null, null, delmob );
								} else if ( _h=="coffee" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Crab_Coffee), null, null, delmob );
								} else if ( _h=="parrot" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Parrot), null, null, delmob );
								} else if ( _h=="polyparrot" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Parrot_Poly), null, null, delmob );
								} else if ( _h=="constructarmoured" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Construct_Armoured), null, null, delmob );
								} else if ( _h=="constructbuilder" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Construct_Builder), null, null, delmob );
								} else if ( _h=="constructwraith" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Construct_Wraith), null, null, delmob );
								} else if ( _h=="shade" ) {
									new_mob = ((Mob)M2).change_mob_type( typeof(Mob_Living_SimpleAnimal_Shade), null, null, delmob );
								}

								if ( Lang13.Bool( new_mob ) && new_mob != M2 ) {
									
									if ( new_mob.client == CLIENT ) {
										Task13.User = new_mob;
									}
									this.show_player_panel( new_mob );
								}
							} else if ( Lang13.Bool( href_list["unbanf"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4 ) ) {
									return null;
								}
								banfolder = href_list["unbanf"];
								GlobalVars.Banlist.cd = "/base/" + banfolder;
								key = GlobalVars.Banlist["key"];

								if ( Interface13.Alert( Task13.User, "Are you sure you want to unban " + key + "?", "Confirmation", "Yes", "No" ) == "Yes" ) {
									
									if ( GlobalFuncs.RemoveBan( banfolder ) ) {
										this.unbanpanel();
									} else {
										Interface13.Alert( Task13.User, "This ban has already been lifted / does not exist.", "Error", "Ok" );
										this.unbanpanel();
									}
								}
							} else if ( Lang13.Bool( href_list["warn"] ) ) {
								Task13.User.client.warn( href_list["warn"] );
							} else if ( Lang13.Bool( href_list["unwarn"] ) ) {
								Task13.User.client.unwarn( href_list["unwarn"] );
							} else if ( Lang13.Bool( href_list["unbane"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4 ) ) {
									return null;
								}
								GlobalFuncs.UpdateTime();
								reason = null;
								banfolder2 = href_list["unbane"];
								GlobalVars.Banlist.cd = "/base/" + banfolder2;
								reason2 = GlobalVars.Banlist["reason"];
								temp = Lang13.Bool( GlobalVars.Banlist["temp"] );
								minutes = Convert.ToDouble( GlobalVars.Banlist["minutes"] );
								banned_key = GlobalVars.Banlist["key"];
								GlobalVars.Banlist.cd = "/base";
								duration = null;

								switch ((string)( Interface13.Alert( "Temporary Ban?", null, "Yes", "No" ) )) {
									case "Yes":
										temp = true;
										mins = 0;

										if ( minutes > GlobalVars.CMinutes ) {
											mins = minutes - GlobalVars.CMinutes;
										}
										mins = Interface13.Input( Task13.User, "How long (in minutes)? (Default: 1440)", "Ban time", ( Lang13.Bool( mins ) ? mins : ((dynamic)( 1440 )) ), null, InputType.Num | InputType.Null );

										if ( !Lang13.Bool( mins ) ) {
											return null;
										}
										mins = Num13.MinInt( 525599, Convert.ToInt32( mins ) );
										minutes = GlobalVars.CMinutes + Convert.ToDouble( mins );
										duration = GlobalFuncs.GetExp( minutes );
										reason = Interface13.Input( Task13.User, "Reason?", "reason", reason2, null, InputType.Str | InputType.Null );

										if ( !Lang13.Bool( reason ) ) {
											return null;
										}
										break;
									case "No":
										temp = false;
										duration = "Perma";
										reason = Interface13.Input( Task13.User, "Reason?", "reason", reason2, null, InputType.Str | InputType.Null );

										if ( !Lang13.Bool( reason ) ) {
											return null;
										}
										break;
								}
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " edited " + banned_key + "'s ban. Reason: " + reason + " Duration: " + duration );
								GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " edited " + banned_key + "'s ban. Reason: " + reason + " Duration: " + duration );
								GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " edited " + banned_key + "'s ban. Reason: " + reason + " Duration: " + duration + "</span>" );
								GlobalVars.Banlist.cd = "/base/" + banfolder2;
								GlobalFuncs.to_chat( GlobalVars.Banlist["reason"], reason );
								GlobalFuncs.to_chat( GlobalVars.Banlist["temp"], temp );
								GlobalFuncs.to_chat( GlobalVars.Banlist["minutes"], minutes );
								GlobalFuncs.to_chat( GlobalVars.Banlist["bannedby"], Task13.User.ckey );
								GlobalVars.Banlist.cd = "/base";
								GlobalFuncs.feedback_inc( "ban_edit", 1 );
								this.unbanpanel();
							} else if ( Lang13.Bool( href_list["oocban"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4 ) ) {
									return null;
								}
								M3 = Lang13.FindObj( href_list["oocban"] );

								if ( !( M3 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}

								if ( !Lang13.Bool( M3.ckey ) ) {
									GlobalFuncs.to_chat( Task13.User, "This mob has no ckey" );
									return null;
								}
								oocbanned = GlobalVars.oocban_keylist.Find( "" + String13.CKey( "" + M3.ckey ) );

								if ( oocbanned != 0 ) {
									
									switch ((string)( Interface13.Alert( "Reason: Remove OOC ban?", "Please Confirm", "Yes", "No" ) )) {
										case "Yes":
											GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + GlobalFuncs.key_name( M3 ) + "'s OOC ban" );
											GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + GlobalFuncs.key_name( M3 ) + "'s OOC ban" );
											GlobalFuncs.feedback_inc( "ban_ooc_unban", 1 );
											this.DB_ban_unban( M3.ckey, 7 );
											GlobalFuncs.ooc_unban( M3 );
											GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " removed " + GlobalFuncs.key_name_admin( M3 ) + "'s OOC ban</span>" );
											GlobalFuncs.to_chat( M3, "<span class='warning'><BIG><B>" + Task13.User.client.ckey + " has removed your OOC ban.</B></BIG></span>" );
											break;
									}
								} else {
									
									switch ((string)( Interface13.Alert( "OOC ban " + M3.ckey + "?", null, "Yes", "No" ) )) {
										case "Yes":
											
											switch ((string)( Interface13.Alert( "Temporary Ban?", null, "Yes", "No", "Cancel" ) )) {
												case "Yes":
													mins2 = Interface13.Input( Task13.User, "How long (in minutes)?", "OOC Ban time", 1440, null, InputType.Num | InputType.Null );

													if ( !Lang13.Bool( mins2 ) ) {
														return null;
													}

													if ( Convert.ToDouble( mins2 ) >= 525600 ) {
														mins2 = 525599;
													}
													reason3 = Interface13.Input( Task13.User, "Reason?", "reason", "Shinposting", null, InputType.Str | InputType.Null );

													if ( !Lang13.Bool( reason3 ) ) {
														return null;
													}
													GlobalFuncs.ban_unban_log_save( "" + Task13.User.client.ckey + " has banned " + M3.ckey + ". - Reason: " + reason3 + " - This will be removed in " + mins2 + " minutes." );
													GlobalFuncs.to_chat( M3, "<span class='warning'><BIG><B>You have been OOC banned by " + Task13.User.client.ckey + ".\nReason: " + reason3 + ".</B></BIG></span>" );
													GlobalFuncs.to_chat( M3, "<span class='warning'>This is a temporary ooc ban, it will be removed in " + mins2 + " minutes.</span>" );
													GlobalFuncs.feedback_inc( "ban_ooc_tmp", 1 );
													this.DB_ban_record( 8, M3, mins2, reason3 );
													GlobalFuncs.feedback_inc( "ban_ooc_tmp_mins", mins2 );

													if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
														GlobalFuncs.to_chat( M3, "<span class='warning'>To try to resolve this matter head to " + GlobalVars.config.banappeals + " or consider not being a shithead in OOC</span>" );
													} else {
														GlobalFuncs.to_chat( M3, "<span class='warning'>No ban appeals URL has been set.</span>" );
													}
													GlobalFuncs.log_admin( "" + Task13.User.client.ckey + " has ooc banned " + M3.ckey + ".\nReason: " + reason3 + "\nThis will be removed in " + mins2 + " minutes." );
													GlobalFuncs.message_admins( "<span class='warning'>" + Task13.User.client.ckey + " has ooc banned " + M3.ckey + ".\nReason: " + reason3 + "\nThis will be removed in " + mins2 + " minutes.</span>" );
													break;
												case "No":
													reason4 = Interface13.Input( Task13.User, "Reason?", "reason", "Shinposting", null, InputType.Str | InputType.Null );

													if ( !Lang13.Bool( reason4 ) ) {
														return null;
													}
													GlobalFuncs.to_chat( M3, "<span class='warning'><BIG><B>You have been ooc banned by " + Task13.User.client.ckey + ".\nReason: " + reason4 + ".</B></BIG></span>" );
													GlobalFuncs.to_chat( M3, "<span class='warning'>This is a permanent ooc ban.</span>" );

													if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
														GlobalFuncs.to_chat( M3, "<span class='warning'>To try to resolve this matter head to " + GlobalVars.config.banappeals + " or consider not being a shithead in OOC</span>" );
													} else {
														GlobalFuncs.to_chat( M3, "<span class='warning'>No ban appeals URL has been set.</span>" );
													}
													GlobalFuncs.ban_unban_log_save( "" + Task13.User.client.ckey + " has perma-ooc-banned " + M3.ckey + ". - Reason: " + reason4 + " - This is a permanent ooc ban." );
													GlobalFuncs.log_admin( "" + Task13.User.client.ckey + " has ooc banned " + M3.ckey + ".\nReason: " + reason4 + "\nThis is a permanent ooc ban." );
													GlobalFuncs.message_admins( "<span class='warning'>" + Task13.User.client.ckey + " has ooc banned " + M3.ckey + ".\nReason: " + reason4 + "\nThis is a permanent ooc ban.</span>" );
													GlobalFuncs.feedback_inc( "ban_ooc_perma", 1 );
													this.DB_ban_record( 7, M3, -1, reason4 );
													break;
												case "Cancel":
													return null;
													break;
											}
											GlobalFuncs.ooc_ban( M3 );
											return null;
											break;
										case "No":
											return null;
											break;
										default:
											return null;
											break;
									}
								}
							} else if ( Lang13.Bool( href_list["appearanceban"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4 ) ) {
									return null;
								}
								M4 = Lang13.FindObj( href_list["appearanceban"] );

								if ( !( M4 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}

								if ( !Lang13.Bool( M4.ckey ) ) {
									GlobalFuncs.to_chat( Task13.User, "This mob has no ckey" );
									return null;
								}
								banreason2 = GlobalFuncs.appearance_isbanned( M4 );

								if ( Lang13.Bool( banreason2 ) ) {
									
									switch ((string)( Interface13.Alert( "Reason: '" + banreason2 + "' Remove appearance ban?", "Please Confirm", "Yes", "No" ) )) {
										case "Yes":
											GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + GlobalFuncs.key_name( M4 ) + "'s appearance ban" );
											GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + GlobalFuncs.key_name( M4 ) + "'s appearance ban" );
											GlobalFuncs.feedback_inc( "ban_appearance_unban", 1 );
											this.DB_ban_unban( M4.ckey, 6 );
											GlobalFuncs.appearance_unban( M4 );
											GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " removed " + GlobalFuncs.key_name_admin( M4 ) + "'s appearance ban</span>" );
											GlobalFuncs.to_chat( M4, "<span class='warning'><BIG><B>" + Task13.User.client.ckey + " has removed your appearance ban.</B></BIG></span>" );
											break;
									}
								} else {
									
									switch ((string)( Interface13.Alert( "Appearance ban " + M4.ckey + "?", null, "Yes", "No", "Cancel" ) )) {
										case "Yes":
											reason5 = Interface13.Input( Task13.User, "Reason?", "reason", "Metafriender", null, InputType.Str | InputType.Null );

											if ( !Lang13.Bool( reason5 ) ) {
												return null;
											}
											GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " appearance banned " + GlobalFuncs.key_name( M4 ) + ". reason: " + reason5 );
											GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " appearance banned " + GlobalFuncs.key_name( M4 ) + ". \nReason: " + reason5 );
											GlobalFuncs.feedback_inc( "ban_appearance", 1 );
											this.DB_ban_record( 6, M4, -1, reason5 );
											GlobalFuncs.appearance_fullban( M4, "" + reason5 + "; By " + Task13.User.ckey + " on " + String13.FormatTime( Game13.realtime, null ) );
											GlobalFuncs.notes_add( M4.ckey, "Appearance banned - " + reason5 );
											GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " appearance banned " + GlobalFuncs.key_name_admin( M4 ) + "</span>" );
											GlobalFuncs.to_chat( M4, "<span class='warning'><BIG><B>You have been appearance banned by " + Task13.User.client.ckey + ".</B></BIG></span>" );
											GlobalFuncs.to_chat( M4, "<span class='danger'>The reason is: " + reason5 + "</span>" );
											GlobalFuncs.to_chat( M4, "<span class='warning'>Appearance ban can be lifted only upon request.</span>" );

											if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
												GlobalFuncs.to_chat( M4, "<span class='warning'>To try to resolve this matter head to " + GlobalVars.config.banappeals + "</span>" );
											} else {
												GlobalFuncs.to_chat( M4, "<span class='warning'>No ban appeals URL has been set.</span>" );
											}
											break;
										case "No":
											return null;
											break;
									}
								}
							} else if ( Lang13.Bool( href_list["jobban2"] ) ) {
								M5 = Lang13.FindObj( href_list["jobban2"] );

								if ( !( M5 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}

								if ( !Lang13.Bool( M5.ckey ) ) {
									GlobalFuncs.to_chat( Task13.User, "This mob has no ckey" );
									return null;
								}

								if ( !( GlobalVars.job_master != null ) ) {
									GlobalFuncs.to_chat( Task13.User, "Job Master has not been setup!" );
									return null;
								}
								dat = "";
								header = "<head><title>Job-Ban Panel: " + M5.name + "</title></head>";
								body = null;
								jobs = "";
								counter = 0;
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += new Txt( "<tr align='center' bgcolor='ccccff'><th colspan='" ).item( Lang13.Length( GlobalVars.command_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=commanddept;jobban4=" ).Ref( M5 ).str( "'>Command Positions</a></th></tr><tr align='center'>" ).ToString();

								foreach (dynamic _o in Lang13.Enumerate( GlobalVars.command_positions )) {
									jobPos = _o;
									

									if ( !Lang13.Bool( jobPos ) ) {
										continue;
									}
									job = GlobalVars.job_master.GetJob( jobPos );

									if ( !( job != null ) ) {
										continue;
									}

									if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, job.title ) ) ) {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job.title ).str( ";jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
										counter++;
									} else {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job.title ).str( ";jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( job.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
										counter++;
									}

									if ( counter >= 6 ) {
										jobs += "</tr><tr>";
										counter = 0;
									}
								}
								jobs += "</tr></table>";
								counter = 0;
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += new Txt( "<tr bgcolor='ffddf0'><th colspan='" ).item( Lang13.Length( GlobalVars.security_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=securitydept;jobban4=" ).Ref( M5 ).str( "'>Security Positions</a></th></tr><tr align='center'>" ).ToString();

								foreach (dynamic _p in Lang13.Enumerate( GlobalVars.security_positions )) {
									jobPos2 = _p;
									

									if ( !Lang13.Bool( jobPos2 ) ) {
										continue;
									}
									job2 = GlobalVars.job_master.GetJob( jobPos2 );

									if ( !( job2 != null ) ) {
										continue;
									}

									if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, job2.title ) ) ) {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job2.title ).str( ";jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job2.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
										counter++;
									} else {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job2.title ).str( ";jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( job2.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
										counter++;
									}

									if ( counter >= 5 ) {
										jobs += "</tr><tr align='center'>";
										counter = 0;
									}
								}
								jobs += "</tr></table>";
								counter = 0;
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += new Txt( "<tr bgcolor='fff5cc'><th colspan='" ).item( Lang13.Length( GlobalVars.engineering_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=engineeringdept;jobban4=" ).Ref( M5 ).str( "'>Engineering Positions</a></th></tr><tr align='center'>" ).ToString();

								foreach (dynamic _q in Lang13.Enumerate( GlobalVars.engineering_positions )) {
									jobPos3 = _q;
									

									if ( !Lang13.Bool( jobPos3 ) ) {
										continue;
									}
									job3 = GlobalVars.job_master.GetJob( jobPos3 );

									if ( !( job3 != null ) ) {
										continue;
									}

									if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, job3.title ) ) ) {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job3.title ).str( ";jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job3.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
										counter++;
									} else {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job3.title ).str( ";jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( job3.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
										counter++;
									}

									if ( counter >= 5 ) {
										jobs += "</tr><tr align='center'>";
										counter = 0;
									}
								}
								jobs += "</tr></table>";
								counter = 0;
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += new Txt( "<tr bgcolor='ffeef0'><th colspan='" ).item( Lang13.Length( GlobalVars.medical_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=medicaldept;jobban4=" ).Ref( M5 ).str( "'>Medical Positions</a></th></tr><tr align='center'>" ).ToString();

								foreach (dynamic _r in Lang13.Enumerate( GlobalVars.medical_positions )) {
									jobPos4 = _r;
									

									if ( !Lang13.Bool( jobPos4 ) ) {
										continue;
									}
									job4 = GlobalVars.job_master.GetJob( jobPos4 );

									if ( !( job4 != null ) ) {
										continue;
									}

									if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, job4.title ) ) ) {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job4.title ).str( ";jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job4.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
										counter++;
									} else {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job4.title ).str( ";jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( job4.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
										counter++;
									}

									if ( counter >= 5 ) {
										jobs += "</tr><tr align='center'>";
										counter = 0;
									}
								}
								jobs += "</tr></table>";
								counter = 0;
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += new Txt( "<tr bgcolor='e79fff'><th colspan='" ).item( Lang13.Length( GlobalVars.science_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=sciencedept;jobban4=" ).Ref( M5 ).str( "'>Science Positions</a></th></tr><tr align='center'>" ).ToString();

								foreach (dynamic _s in Lang13.Enumerate( GlobalVars.science_positions )) {
									jobPos5 = _s;
									

									if ( !Lang13.Bool( jobPos5 ) ) {
										continue;
									}
									job5 = GlobalVars.job_master.GetJob( jobPos5 );

									if ( !( job5 != null ) ) {
										continue;
									}

									if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, job5.title ) ) ) {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job5.title ).str( ";jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job5.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
										counter++;
									} else {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job5.title ).str( ";jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( job5.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
										counter++;
									}

									if ( counter >= 5 ) {
										jobs += "</tr><tr align='center'>";
										counter = 0;
									}
								}
								jobs += "</tr></table>";
								counter = 0;
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += new Txt( "<tr bgcolor='dddddd'><th colspan='" ).item( Lang13.Length( GlobalVars.civilian_positions ) ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=civiliandept;jobban4=" ).Ref( M5 ).str( "'>Civilian Positions</a></th></tr><tr align='center'>" ).ToString();

								foreach (dynamic _t in Lang13.Enumerate( GlobalVars.civilian_positions )) {
									jobPos6 = _t;
									

									if ( !Lang13.Bool( jobPos6 ) ) {
										continue;
									}
									job6 = GlobalVars.job_master.GetJob( jobPos6 );

									if ( !( job6 != null ) ) {
										continue;
									}

									if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, job6.title ) ) ) {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job6.title ).str( ";jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job6.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
										counter++;
									} else {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job6.title ).str( ";jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( job6.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
										counter++;
									}

									if ( counter >= 5 ) {
										jobs += "</tr><tr align='center'>";
										counter = 0;
									}
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "Internal Affairs Agent" ) ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=Internal Affairs Agent;jobban4=" ).Ref( M5 ).str( "'><font color=red>Internal Affairs Agent</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=Internal Affairs Agent;jobban4=" ).Ref( M5 ).str( "'>Internal Affairs Agent</a></td>" ).ToString();
								}
								jobs += "</tr></table>";
								counter = 0;
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += new Txt( "<tr bgcolor='ccffcc'><th colspan='" ).item( Lang13.Length( GlobalVars.nonhuman_positions ) + 1 ).str( "'><a href='?src=" ).Ref( this ).str( ";jobban3=nonhumandept;jobban4=" ).Ref( M5 ).str( "'>Non-human Positions</a></th></tr><tr align='center'>" ).ToString();

								foreach (dynamic _u in Lang13.Enumerate( GlobalVars.nonhuman_positions )) {
									jobPos7 = _u;
									

									if ( !Lang13.Bool( jobPos7 ) ) {
										continue;
									}
									job7 = GlobalVars.job_master.GetJob( jobPos7 );

									if ( !( job7 != null ) ) {
										continue;
									}

									if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, job7.title ) ) ) {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job7.title ).str( ";jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( job7.title, " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
										counter++;
									} else {
										jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=" ).item( job7.title ).str( ";jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( job7.title, " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
										counter++;
									}

									if ( counter >= 5 ) {
										jobs += "</tr><tr align='center'>";
										counter = 0;
									}
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "pAI" ) ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=pAI;jobban4=" ).Ref( M5 ).str( "'><font color=red>pAI</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=pAI;jobban4=" ).Ref( M5 ).str( "'>pAI</a></td>" ).ToString();
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "AntagHUD" ) ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=AntagHUD;jobban4=" ).Ref( M5 ).str( "'><font color=red>AntagHUD</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=AntagHUD;jobban4=" ).Ref( M5 ).str( "'>AntagHUD</a></td>" ).ToString();
								}
								jobs += "</tr></table>";
								isbanned_dept = GlobalFuncs.jobban_isbanned( M5, "Syndicate" );
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += new Txt( "<tr bgcolor='ffeeaa'><th colspan='10'><a href='?src=" ).Ref( this ).str( ";jobban3=Syndicate;jobban4=" ).Ref( M5 ).str( "'>Antagonist Positions</a></th></tr><tr align='center'>" ).ToString();

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "traitor" ) ) || Lang13.Bool( isbanned_dept ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=traitor;jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Traitor", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=traitor;jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( "Traitor", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "changeling" ) ) || Lang13.Bool( isbanned_dept ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=changeling;jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Changeling", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=changeling;jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( "Changeling", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "operative" ) ) || Lang13.Bool( isbanned_dept ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=operative;jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Nuke Operative", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=operative;jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( "Nuke Operative", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "revolutionary" ) ) || Lang13.Bool( isbanned_dept ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=revolutionary;jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Revolutionary", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=revolutionary;jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( "Revolutionary", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
								}
								jobs += "</tr><tr align='center'>";

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "cultist" ) ) || Lang13.Bool( isbanned_dept ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=cultist;jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Cultist", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=cultist;jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( "Cultist", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "wizard" ) ) || Lang13.Bool( isbanned_dept ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=wizard;jobban4=" ).Ref( M5 ).str( "'><font color=red>" ).item( GlobalFuncs.replacetext( "Wizard", " ", "&nbsp" ) ).str( "</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=wizard;jobban4=" ).Ref( M5 ).str( "'>" ).item( GlobalFuncs.replacetext( "Wizard", " ", "&nbsp" ) ).str( "</a></td>" ).ToString();
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "Emergency Response Team" ) ) || Lang13.Bool( isbanned_dept ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=Emergency Response Team;jobban4=" ).Ref( M5 ).str( "'><font color=red>Emergency Response Team</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=Emergency Response Team;jobban4=" ).Ref( M5 ).str( "'>Emergency Response Team</a></td>" ).ToString();
								}

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "Vox Raider" ) ) || Lang13.Bool( isbanned_dept ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=Vox Raider;jobban4=" ).Ref( M5 ).str( "'><font color=red>Vox&nbsp;Raider</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=Vox Raider;jobban4=" ).Ref( M5 ).str( "'>Vox&nbsp;Raider</a></td>" ).ToString();
								}
								jobs += "</tr></table>";
								jobs += "<table cellpadding='1' cellspacing='0' width='100%'>";
								jobs += "<tr bgcolor='ccccff'><th colspan='1'>Other Races</th></tr><tr align='center'>";

								if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( M5, "Dionaea" ) ) ) {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=Dionaea;jobban4=" ).Ref( M5 ).str( "'><font color=red>Dionaea</font></a></td>" ).ToString();
								} else {
									jobs += new Txt( "<td width='20%'><a href='?src=" ).Ref( this ).str( ";jobban3=Dionaea;jobban4=" ).Ref( M5 ).str( "'>Dionaea</a></td>" ).ToString();
								}
								jobs += "</tr></table>";
								body = "<body>" + jobs + "</body>";
								dat = "<tt>" + header + body + "</tt>";
								Interface13.Browse( Task13.User, dat, "window=jobban2;size=800x490" );
								return null;
							} else if ( Lang13.Bool( href_list["jobban3"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4 ) ) {
									return null;
								}
								M6 = Lang13.FindObj( href_list["jobban4"] );

								if ( !( M6 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}

								if ( M6 != Task13.User ) {
									
									if ( Lang13.Bool( M6.client ) && Lang13.Bool( M6.client.holder ) && Lang13.Bool( M6.client.holder.rights & 4 ) ) {
										Interface13.Alert( "You cannot perform this action. You must be of a higher administrative rank!" );
										return null;
									}
								}

								if ( !( GlobalVars.job_master != null ) ) {
									GlobalFuncs.to_chat( Task13.User, "Job Master has not been setup!" );
									return null;
								}
								joblist = new ByTable();

								dynamic _bc = href_list["jobban3"]; // Was a switch-case, sorry for the mess.
								if ( _bc=="commanddept" ) {
									
									foreach (dynamic _v in Lang13.Enumerate( GlobalVars.command_positions )) {
										jobPos8 = _v;
										

										if ( !Lang13.Bool( jobPos8 ) ) {
											continue;
										}
										temp2 = GlobalVars.job_master.GetJob( jobPos8 );

										if ( !( temp2 != null ) ) {
											continue;
										}
										joblist.Add( temp2.title );
									}
								} else if ( _bc=="securitydept" ) {
									
									foreach (dynamic _w in Lang13.Enumerate( GlobalVars.security_positions )) {
										jobPos9 = _w;
										

										if ( !Lang13.Bool( jobPos9 ) ) {
											continue;
										}
										temp3 = GlobalVars.job_master.GetJob( jobPos9 );

										if ( !( temp3 != null ) ) {
											continue;
										}
										joblist.Add( temp3.title );
									}
								} else if ( _bc=="engineeringdept" ) {
									
									foreach (dynamic _x in Lang13.Enumerate( GlobalVars.engineering_positions )) {
										jobPos10 = _x;
										

										if ( !Lang13.Bool( jobPos10 ) ) {
											continue;
										}
										temp4 = GlobalVars.job_master.GetJob( jobPos10 );

										if ( !( temp4 != null ) ) {
											continue;
										}
										joblist.Add( temp4.title );
									}
								} else if ( _bc=="medicaldept" ) {
									
									foreach (dynamic _y in Lang13.Enumerate( GlobalVars.medical_positions )) {
										jobPos11 = _y;
										

										if ( !Lang13.Bool( jobPos11 ) ) {
											continue;
										}
										temp5 = GlobalVars.job_master.GetJob( jobPos11 );

										if ( !( temp5 != null ) ) {
											continue;
										}
										joblist.Add( temp5.title );
									}
								} else if ( _bc=="sciencedept" ) {
									
									foreach (dynamic _z in Lang13.Enumerate( GlobalVars.science_positions )) {
										jobPos12 = _z;
										

										if ( !Lang13.Bool( jobPos12 ) ) {
											continue;
										}
										temp6 = GlobalVars.job_master.GetJob( jobPos12 );

										if ( !( temp6 != null ) ) {
											continue;
										}
										joblist.Add( temp6.title );
									}
								} else if ( _bc=="civiliandept" ) {
									
									foreach (dynamic _ba in Lang13.Enumerate( GlobalVars.civilian_positions )) {
										jobPos13 = _ba;
										

										if ( !Lang13.Bool( jobPos13 ) ) {
											continue;
										}
										temp7 = GlobalVars.job_master.GetJob( jobPos13 );

										if ( !( temp7 != null ) ) {
											continue;
										}
										joblist.Add( temp7.title );
									}
								} else if ( _bc=="nonhumandept" ) {
									joblist.Add( "pAI" );

									foreach (dynamic _bb in Lang13.Enumerate( GlobalVars.nonhuman_positions )) {
										jobPos14 = _bb;
										

										if ( !Lang13.Bool( jobPos14 ) ) {
											continue;
										}
										temp8 = GlobalVars.job_master.GetJob( jobPos14 );

										if ( !( temp8 != null ) ) {
											continue;
										}
										joblist.Add( temp8.title );
									}
								} else {
									joblist.Add( href_list["jobban3"] );
								}
								notbannedlist = new ByTable();

								foreach (dynamic _bd in Lang13.Enumerate( joblist )) {
									job8 = _bd;
									

									if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( M6, job8 ) ) ) {
										notbannedlist.Add( job8 );
									}
								}

								if ( notbannedlist.len != 0 ) {
									
									switch ((string)( Interface13.Alert( "Temporary Ban?", null, "Yes", "No", "Cancel" ) )) {
										case "Yes":
											
											if ( GlobalVars.config.ban_legacy_system ) {
												GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Your server is using the legacy banning system, which does not support temporary job bans. Consider upgrading. Aborting ban.</span>" );
												return null;
											}
											mins3 = Interface13.Input( Task13.User, "How long (in minutes)?", "Ban time", 1440, null, InputType.Num | InputType.Null );

											if ( !Lang13.Bool( mins3 ) ) {
												return null;
											}
											reason6 = Interface13.Input( Task13.User, "Reason?", "Please State Reason", "", null, InputType.Str | InputType.Null );

											if ( !Lang13.Bool( reason6 ) ) {
												return null;
											}
											msg = null;

											foreach (dynamic _be in Lang13.Enumerate( notbannedlist )) {
												job9 = _be;
												
												GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " temp-jobbanned " + GlobalFuncs.key_name( M6 ) + " from " + job9 + " for " + mins3 + " minutes. reason: " + reason6 );
												GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " temp-jobbanned " + GlobalFuncs.key_name( M6 ) + " from " + job9 + " for " + mins3 + " minutes" );
												GlobalFuncs.feedback_inc( "ban_job_tmp", 1 );
												this.DB_ban_record( 4, M6, mins3, reason6, job9 );
												GlobalFuncs.feedback_add_details( "ban_job_tmp", "- " + job9 );
												GlobalFuncs.jobban_fullban( M6, job9, "" + reason6 + "; By " + Task13.User.ckey + " on " + String13.FormatTime( Game13.realtime, null ) );

												if ( !Lang13.Bool( msg ) ) {
													msg = job9;
												} else {
													msg += ", " + job9;
												}
											}
											GlobalFuncs.notes_add( M6.ckey, "Banned  from " + msg + " - " + reason6 );
											GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " banned " + GlobalFuncs.key_name_admin( M6 ) + " from " + msg + " for " + mins3 + " minutes</span>" );
											GlobalFuncs.to_chat( M6, "<span class='warning'><BIG><B>You have been jobbanned by " + Task13.User.client.ckey + " from: " + msg + ".</B></BIG></span>" );
											GlobalFuncs.to_chat( M6, "<span class='danger'>The reason is: " + reason6 + "</span>" );
											GlobalFuncs.to_chat( M6, "<span class='warning'>This jobban will be lifted in " + mins3 + " minutes.</span>" );
											href_list["jobban2"] = 1;
											return 1;
											break;
										case "No":
											reason7 = Interface13.Input( Task13.User, "Reason?", "Please State Reason", "", null, InputType.Str | InputType.Null );

											if ( Lang13.Bool( reason7 ) ) {
												msg2 = null;

												foreach (dynamic _bf in Lang13.Enumerate( notbannedlist )) {
													job10 = _bf;
													
													GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " perma-jobbanned " + GlobalFuncs.key_name( M6 ) + " from " + job10 + ". reason: " + reason7 );
													GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " perma-banned " + GlobalFuncs.key_name( M6 ) + " from " + job10 );
													GlobalFuncs.feedback_inc( "ban_job", 1 );
													this.DB_ban_record( 3, M6, -1, reason7, job10 );
													GlobalFuncs.feedback_add_details( "ban_job", "- " + job10 );
													GlobalFuncs.jobban_fullban( M6, job10, "" + reason7 + "; By " + Task13.User.ckey + " on " + String13.FormatTime( Game13.realtime, null ) );

													if ( !Lang13.Bool( msg2 ) ) {
														msg2 = job10;
													} else {
														msg2 += ", " + job10;
													}
												}
												GlobalFuncs.notes_add( M6.ckey, "Banned  from " + msg2 + " - " + reason7 );
												GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " banned " + GlobalFuncs.key_name_admin( M6 ) + " from " + msg2 + "</span>" );
												GlobalFuncs.to_chat( M6, "<span class='warning'><BIG><B>You have been jobbanned by " + Task13.User.client.ckey + " from: " + msg2 + ".</B></BIG></span>" );
												GlobalFuncs.to_chat( M6, "<span class='danger'>The reason is: " + reason7 + "</span>" );
												GlobalFuncs.to_chat( M6, "<span class='warning'>Jobban can be lifted only upon request.</span>" );
												href_list["jobban2"] = 1;
												return 1;
											}
											break;
										case "Cancel":
											return null;
											break;
									}
								}

								if ( joblist.len != 0 ) {
									
									if ( !GlobalVars.config.ban_legacy_system ) {
										GlobalFuncs.to_chat( Task13.User, "Unfortunately, database based unbanning cannot be done through this panel" );
										this.DB_ban_panel( M6.ckey );
										return null;
									}
									msg3 = null;

									foreach (dynamic _bi in Lang13.Enumerate( joblist )) {
										job11 = _bi;
										
										reason8 = GlobalFuncs.jobban_isbanned( M6, job11 );

										if ( !Lang13.Bool( reason8 ) ) {
											continue;
										}

										switch ((string)( Interface13.Alert( "Job: '" + job11 + "' Reason: '" + reason8 + "' Un-jobban?", "Please Confirm", "Yes", "No" ) )) {
											case "Yes":
												GlobalFuncs.ban_unban_log_save( "" + GlobalFuncs.key_name( Task13.User ) + " unjobbanned " + GlobalFuncs.key_name( M6 ) + " from " + job11 );
												GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " unbanned " + GlobalFuncs.key_name( M6 ) + " from " + job11 );
												this.DB_ban_unban( M6.ckey, 3, job11 );
												GlobalFuncs.feedback_inc( "ban_job_unban", 1 );
												GlobalFuncs.feedback_add_details( "ban_job_unban", "- " + job11 );
												GlobalFuncs.jobban_unban( M6, job11 );

												if ( !Lang13.Bool( msg3 ) ) {
													msg3 = job11;
												} else {
													msg3 += ", " + job11;
												}
												break;
											default:
												continue;
												break;
										}
									}

									if ( Lang13.Bool( msg3 ) ) {
										GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " unbanned " + GlobalFuncs.key_name_admin( M6 ) + " from " + msg3 + "</span>" );
										GlobalFuncs.to_chat( M6, "<span class='warning'><BIG><B>You have been un-jobbanned by " + Task13.User.client.ckey + " from " + msg3 + ".</B></BIG></span>" );
										href_list["jobban2"] = 1;
									}
									return 1;
								}
								return 0;
							} else if ( Lang13.Bool( href_list["boot2"] ) ) {
								M7 = Lang13.FindObj( href_list["boot2"] );

								if ( M7 is Mob ) {
									
									if ( !GlobalFuncs.check_if_greater_rights_than( M7.client ) ) {
										return null;
									}
									GlobalFuncs.to_chat( M7, "<span class='warning'>You have been kicked from the server</span>" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " booted " + GlobalFuncs.key_name( M7 ) + "." );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " booted " + GlobalFuncs.key_name_admin( M7 ) + ".</span>" );
									Lang13.Delete( M7.client );
									M7.client = null;
								}
							} else if ( Lang13.Bool( href_list["removejobban"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4 ) ) {
									return null;
								}
								t = href_list["removejobban"];

								if ( Lang13.Bool( t ) ) {
									
									if ( Interface13.Alert( "Do you want to unjobban " + t + "?", "Unjobban confirmation", "Yes", "No" ) == "Yes" && Lang13.Bool( t ) ) {
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed " + t );
										GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " removed " + t + "</span>" );
										GlobalFuncs.jobban_remove( t );
										href_list["ban"] = 1;
										t_split = GlobalFuncs.text2list( t, " - " );
										key2 = t_split[1];
										job12 = t_split[2];
										this.DB_ban_unban( String13.CKey( key2 ), 3, job12 );
									}
								}
							} else if ( Lang13.Bool( href_list["newban"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4 ) ) {
									return null;
								}
								M8 = Lang13.FindObj( href_list["newban"] );

								if ( !( M8 is Mob ) ) {
									return null;
								}

								switch ((string)( Interface13.Alert( "Temporary Ban?", null, "Yes", "No", "Cancel" ) )) {
									case "Yes":
										mins4 = Interface13.Input( Task13.User, "How long (in minutes)?", "Ban time", 1440, null, InputType.Num | InputType.Null );

										if ( !Lang13.Bool( mins4 ) ) {
											return null;
										}

										if ( Convert.ToDouble( mins4 ) >= 525600 ) {
											mins4 = 525599;
										}
										reason9 = Interface13.Input( Task13.User, "Reason?", "reason", "Griefer", null, InputType.Str | InputType.Null );

										if ( !Lang13.Bool( reason9 ) ) {
											return null;
										}
										GlobalFuncs.AddBan( M8.ckey, M8.computer_id, reason9, Task13.User.ckey, true, mins4 );
										GlobalFuncs.ban_unban_log_save( "" + Task13.User.client.ckey + " has banned " + M8.ckey + ". - Reason: " + reason9 + " - This will be removed in " + mins4 + " minutes." );
										GlobalFuncs.to_chat( M8, "<span class='warning'><BIG><B>You have been banned by " + Task13.User.client.ckey + ".\nReason: " + reason9 + ".</B></BIG></span>" );
										GlobalFuncs.to_chat( M8, "<span class='warning'>This is a temporary ban, it will be removed in " + mins4 + " minutes.</span>" );
										GlobalFuncs.feedback_inc( "ban_tmp", 1 );
										this.DB_ban_record( 2, M8, mins4, reason9 );
										GlobalFuncs.feedback_inc( "ban_tmp_mins", mins4 );

										if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
											GlobalFuncs.to_chat( M8, "<span class='warning'>To try to resolve this matter head to " + GlobalVars.config.banappeals + "</span>" );
										} else {
											GlobalFuncs.to_chat( M8, "<span class='warning'>No ban appeals URL has been set.</span>" );
										}
										GlobalFuncs.log_admin( "" + Task13.User.client.ckey + " has banned " + M8.ckey + ".\nReason: " + reason9 + "\nThis will be removed in " + mins4 + " minutes." );
										GlobalFuncs.message_admins( "<span class='warning'>" + Task13.User.client.ckey + " has banned " + M8.ckey + ".\nReason: " + reason9 + "\nThis will be removed in " + mins4 + " minutes.</span>" );
										Lang13.Delete( M8.client );
										M8.client = null;
										break;
									case "No":
										reason10 = Interface13.Input( Task13.User, "Reason?", "reason", "Griefer", null, InputType.Str | InputType.Null );

										if ( !Lang13.Bool( reason10 ) ) {
											return null;
										}

										switch ((string)( Interface13.Alert( Task13.User, "IP ban?", null, "Yes", "No", "Cancel" ) )) {
											case "Cancel":
												return null;
												break;
											case "Yes":
												GlobalFuncs.AddBan( M8.ckey, M8.computer_id, reason10, Task13.User.ckey, false, 0, M8.lastKnownIP );
												break;
											case "No":
												GlobalFuncs.AddBan( M8.ckey, M8.computer_id, reason10, Task13.User.ckey, false, 0 );
												break;
										}
										sticky = Interface13.Alert( Task13.User, "Sticky Ban " + M8.ckey + "? Use this only if you never intend to unban the player.", "Sticky Icky", "Yes", "No" ) == "Yes";

										if ( sticky ) {
											Game13.SetConfig( "keyban", M8.ckey, "type=sticky&reason=" + reason10 + "&message=" + reason10 + "&admin=" + String13.CKey( Task13.User.key ) );
											GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sticky banned " + GlobalFuncs.key_name( M8 ) + "." );
											GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sticky banned " + GlobalFuncs.key_name( M8 ) + "." );
										}
										GlobalFuncs.to_chat( M8, "<span class='warning'><BIG><B>You have been banned by " + Task13.User.client.ckey + ".\nReason: " + reason10 + ".</B></BIG></span>" );
										GlobalFuncs.to_chat( M8, "<span class='warning'>This is a permanent ban.</span>" );

										if ( Lang13.Bool( GlobalVars.config.banappeals ) ) {
											GlobalFuncs.to_chat( M8, "<span class='warning'>To try to resolve this matter head to " + GlobalVars.config.banappeals + "</span>" );
										} else {
											GlobalFuncs.to_chat( M8, "<span class='warning'>No ban appeals URL has been set.</span>" );
										}
										GlobalFuncs.ban_unban_log_save( "" + Task13.User.client.ckey + " has permabanned " + M8.ckey + ". - Reason: " + reason10 + " - This is a permanent ban." );
										GlobalFuncs.log_admin( "" + Task13.User.client.ckey + " has banned " + M8.ckey + ".\nReason: " + reason10 + "\nThis is a permanent ban." );
										GlobalFuncs.message_admins( "<span class='warning'>" + Task13.User.client.ckey + " has banned " + M8.ckey + ".\nReason: " + reason10 + "\nThis is a permanent ban.</span>" );
										GlobalFuncs.feedback_inc( "ban_perma", 1 );
										this.DB_ban_record( 1, M8, -1, reason10 );
										Lang13.Delete( M8.client );
										M8.client = null;
										break;
									case "Cancel":
										return null;
										break;
								}
							} else if ( Lang13.Bool( href_list["unjobbanf"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4 ) ) {
									return null;
								}
								banfolder3 = href_list["unjobbanf"];
								GlobalVars.Banlist.cd = "/base/" + banfolder3;
								key3 = GlobalVars.Banlist["key"];

								if ( Interface13.Alert( Task13.User, "Are you sure you want to unban " + key3 + "?", "Confirmation", "Yes", "No" ) == "Yes" ) {
									
									if ( GlobalFuncs.RemoveBanjob( banfolder3 ) ) {
										this.unjobbanpanel();
									} else {
										Interface13.Alert( Task13.User, "This ban has already been lifted / does not exist.", "Error", "Ok" );
										this.unjobbanpanel();
									}
								}
							} else if ( Lang13.Bool( href_list["mute"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}
								M9 = Lang13.FindObj( href_list["mute"] );

								if ( !( M9 is Mob ) ) {
									return null;
								}

								if ( !Lang13.Bool( M9.client ) ) {
									return null;
								}
								mute_type = href_list["mute_type"];

								if ( mute_type is string ) {
									mute_type = String13.ParseNumber( mute_type );
								}

								if ( !Lang13.Bool( Lang13.IsNumber( mute_type ) ) ) {
									return null;
								}
								GlobalFuncs.cmd_admin_mute( M9, mute_type );
							} else if ( Lang13.Bool( href_list["c_mode"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}

								if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
									return Interface13.Alert( Task13.User, "The game has already started." );
								}
								dat2 = "<B>What mode do you wish to play?</B><HR>";

								foreach (dynamic _bl in Lang13.Enumerate( GlobalVars.config.modes )) {
									mode = _bl;
									
									dat2 += new Txt( "<A href='?src=" ).Ref( this ).str( ";c_mode2=" ).item( mode ).str( "'>" ).item( GlobalVars.config.mode_names[mode] ).str( "</A><br>" ).ToString();
								}
								dat2 += new Txt( "<A href='?src=" ).Ref( this ).str( ";c_mode2=secret'>Secret</A><br>" ).ToString();
								dat2 += new Txt( "<A href='?src=" ).Ref( this ).str( ";c_mode2=random'>Random</A><br>" ).ToString();
								dat2 += "Now: " + GlobalVars.master_mode;
								Interface13.Browse( Task13.User, dat2, "window=c_mode" );
							} else if ( Lang13.Bool( href_list["f_secret"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}

								if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
									return Interface13.Alert( Task13.User, "The game has already started." );
								}

								if ( GlobalVars.master_mode != "secret" ) {
									return Interface13.Alert( Task13.User, "The game mode has to be secret!" );
								}
								dat3 = "<B>What game mode do you want to force secret to be? Use this if you want to change the game mode, but want the players to believe it's secret. This will only work if the current game mode is secret.</B><HR>";

								foreach (dynamic _bm in Lang13.Enumerate( GlobalVars.config.modes )) {
									mode2 = _bm;
									
									dat3 += new Txt( "<A href='?src=" ).Ref( this ).str( ";f_secret2=" ).item( mode2 ).str( "'>" ).item( GlobalVars.config.mode_names[mode2] ).str( "</A><br>" ).ToString();
								}
								dat3 += new Txt( "<A href='?src=" ).Ref( this ).str( ";f_secret2=secret'>Random (default)</A><br>" ).ToString();
								dat3 += "Now: " + GlobalVars.secret_force_mode;
								Interface13.Browse( Task13.User, dat3, "window=f_secret" );
							} else if ( Lang13.Bool( href_list["c_mode2"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 18 ) ) {
									return null;
								}

								if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
									return Interface13.Alert( Task13.User, "The game has already started." );
								}
								GlobalVars.master_mode = href_list["c_mode2"];

								if ( GlobalVars.master_mode != "mixed" || Interface13.Alert( "Do you wish to specify which game modes to be mixed?", "Specify Mixed", "Yes", "No" ) == "No" ) {
									GlobalVars.mixed_modes = new ByTable();
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set the mode as " + GlobalVars.master_mode + "." );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " set the mode as " + GlobalVars.master_mode + ".</span>" );
									GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><b>The mode is now: " + GlobalVars.master_mode + "</b></span>" );
									this.Game();
									Game13.save_mode( GlobalVars.master_mode );
									this.Topic( href, new ByTable().Set( "c_mode", 1 ) );
								} else {
									possible = new ByTable();
									possible.Add( GlobalVars.mixed_allowed );
									possible.Add( "DONE" );
									possible.Add( "CANCEL" );

									if ( possible.len < 3 ) {
										return Interface13.Alert( Task13.User, "Not enough possible game modes." );
									}
									mixed_mode_added = null;

									while (possible.len >= 3) {
										mixed_mode_add = Interface13.Input( "Pick game modes to add to the mix. (" + mixed_mode_added + ")", "Specify Mixed", null, null, possible, InputType.Any );
										possible.Remove( mixed_mode_add );

										if ( mixed_mode_add == "CANCEL" ) {
											return null;
										} else if ( mixed_mode_add == "DONE" ) {
											break;
										} else {
											GlobalVars.mixed_modes.Add( mixed_mode_add );
											possible.Remove( mixed_mode_add );

											if ( !Lang13.Bool( mixed_mode_added ) ) {
												mixed_mode_added = mixed_mode_add;
											} else {
												mixed_mode_added = "" + mixed_mode_added + ", " + mixed_mode_add;
											}
										}
									}
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set the mode as " + GlobalVars.master_mode + " with the following modes: " + mixed_mode_added + "." );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " set the mode as " + GlobalVars.master_mode + " with the following modes: " + mixed_mode_added + ".</span>" );
									GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><b>The mode is now: " + GlobalVars.master_mode + " (" + mixed_mode_added + ")</b></span>" );
									this.Game();
									Game13.save_mode( GlobalVars.master_mode );
									this.Topic( href, new ByTable().Set( "c_mode", 1 ) );
								}
							} else if ( Lang13.Bool( href_list["f_secret2"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 18 ) ) {
									return null;
								}

								if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
									return Interface13.Alert( Task13.User, "The game has already started." );
								}

								if ( GlobalVars.master_mode != "secret" ) {
									return Interface13.Alert( Task13.User, "The game mode has to be secret!" );
								}
								GlobalVars.secret_force_mode = href_list["f_secret2"];

								if ( GlobalVars.secret_force_mode != "mixed" || Interface13.Alert( "Do you wish to specify which game modes to be mixed?", "Specify Secret Mixed", "Yes", "No" ) == "No" ) {
									GlobalVars.mixed_modes = new ByTable();
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set the forced secret mode as " + GlobalVars.secret_force_mode + "." );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " set the forced secret mode as " + GlobalVars.secret_force_mode + ".</span>" );
									this.Game();
									this.Topic( href, new ByTable().Set( "f_secret", 1 ) );
								} else {
									possible2 = new ByTable();
									possible2.Add( GlobalVars.mixed_allowed );
									possible2.Add( "DONE" );
									possible2.Add( "CANCEL" );

									if ( possible2.len < 3 ) {
										return Interface13.Alert( Task13.User, "Not enough possible game modes." );
									}
									mixed_mode_added2 = null;

									while (possible2.len >= 3) {
										mixed_mode_add2 = Interface13.Input( "Pick game modes to add to the secret mix. (" + mixed_mode_added2 + ")", "Specify Secret Mixed", null, null, possible2, InputType.Any );
										possible2.Remove( mixed_mode_add2 );

										if ( mixed_mode_add2 == "CANCEL" ) {
											return null;
										} else if ( mixed_mode_add2 == "DONE" ) {
											break;
										} else {
											GlobalVars.mixed_modes.Add( mixed_mode_add2 );
											possible2.Remove( mixed_mode_add2 );

											if ( !Lang13.Bool( mixed_mode_added2 ) ) {
												mixed_mode_added2 = mixed_mode_add2;
											} else {
												mixed_mode_added2 = "" + mixed_mode_added2 + ", " + mixed_mode_add2;
											}
										}
									}
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " set the mode as " + GlobalVars.secret_force_mode + " with the following modes: " + mixed_mode_added2 + "." );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " set the forced secret mode as " + GlobalVars.secret_force_mode + " with the following modes: " + mixed_mode_added2 + ".</span>" );
									this.Game();
									this.Topic( href, new ByTable().Set( "f_secret", 1 ) );
								}
							} else if ( Lang13.Bool( href_list["monkeyone"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H = Lang13.FindObj( href_list["monkeyone"] );

								if ( !( H is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to monkeyize " + GlobalFuncs.key_name( H ) );
								GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to monkeyize " + GlobalFuncs.key_name_admin( H ) + "</span>" );
								M10 = ((Mob_Living_Carbon_Human)H).monkeyize();

								if ( Lang13.Bool( M10 ) ) {
									
									if ( M10.client == CLIENT ) {
										Task13.User = M10;
									}
									this.show_player_panel( M10 );
								}
							} else if ( Lang13.Bool( href_list["corgione"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H2 = Lang13.FindObj( href_list["corgione"] );

								if ( !( H2 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to corgize " + GlobalFuncs.key_name( H2 ) );
								GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to corgize " + GlobalFuncs.key_name_admin( H2 ) + "</span>" );
								M11 = ((Mob_Living_Carbon_Human)H2).corgize();

								if ( M11 != null ) {
									
									if ( M11.client == CLIENT ) {
										Task13.User = M11;
									}
									this.show_player_panel( M11 );
								}
							} else if ( Lang13.Bool( href_list["forcespeech"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 8 ) ) {
									return null;
								}
								M12 = Lang13.FindObj( href_list["forcespeech"] );

								if ( !( M12 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "this can only be used on instances of type /mob" );
								}
								speech = Interface13.Input( "What will " + GlobalFuncs.key_name( M12 ) + " say?.", "Force speech", "", null, null, InputType.Any );

								if ( !Lang13.Bool( speech ) ) {
									return null;
								}
								((Ent_Dynamic)M12).say( speech );
								speech = GlobalFuncs.sanitize( speech );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " forced " + GlobalFuncs.key_name( M12 ) + " to say: " + speech );
								GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " forced " + GlobalFuncs.key_name_admin( M12 ) + " to say: " + speech + "</span>" );
							} else if ( Lang13.Bool( href_list["sendtoprison"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}

								if ( Interface13.Alert( Task13.User, "Warp to prison?", "Message", "Yes", "No" ) != "Yes" ) {
									return null;
								}
								M13 = Lang13.FindObj( href_list["sendtoprison"] );

								if ( !( M13 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}

								if ( M13 is Mob_Living_Silicon_Ai ) {
									GlobalFuncs.to_chat( Task13.User, "This cannot be used on instances of type /mob/living/silicon/ai" );
									return null;
								}
								prison_cell = Rand13.PickFromTable( GlobalVars.prisonwarp );

								if ( !Lang13.Bool( prison_cell ) ) {
									return null;
								}
								((Mob)M13).Paralyse( 5 );
								((Ent_Static)M13).visible_message( "<span class=\"sinister\">You hear the sound of cell doors slamming shut, and " + M13.name + " suddenly vanishes!</span>", "<span class=\"sinister\">You hear the sound of cell doors slamming shut!</span>" );
								Task13.Sleep( 5 );

								if ( !Lang13.Bool( M13 ) ) {
									return null;
								}
								M13.loc = prison_cell;
								GlobalFuncs.to_chat( M13, "<span class='warning'>You have been sent to the prison station!</span>" );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " sent " + GlobalFuncs.key_name( M13 ) + " to the prison station." );
								GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " sent " + GlobalFuncs.key_name_admin( M13 ) + " to the prison station.</span>" );
							} else if ( Lang13.Bool( href_list["tdome1"] ) || Lang13.Bool( href_list["tdome2"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 8 ) ) {
									return null;
								}

								if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
									return null;
								}
								M14 = null;
								team = "";

								if ( Lang13.Bool( href_list["tdome1"] ) ) {
									team = "Green";
									M14 = Lang13.FindObj( href_list["tdome1"] );
								} else if ( Lang13.Bool( href_list["tdome2"] ) ) {
									team = "Red";
									M14 = Lang13.FindObj( href_list["tdome2"] );
								}

								if ( !( M14 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}

								if ( M14 is Mob_Living_Silicon_Ai ) {
									GlobalFuncs.to_chat( Task13.User, "This cannot be used on instances of type /mob/living/silicon/ai" );
									return null;
								}
								pack = null;

								switch ((string)( team )) {
									case "Green":
										pack = new Obj_Item_Packobelongings_Green( M14.loc );
										pack.x = GlobalVars.map.tDomeX + 2;
										break;
									case "Red":
										pack = new Obj_Item_Packobelongings_Red( M14.loc );
										pack.x = GlobalVars.map.tDomeX - 2;
										break;
								}
								pack.z = GlobalVars.map.tDomeZ;
								pack.y = GlobalVars.map.tDomeY;
								pack.name = "" + M14.real_name + "'s belongings";

								foreach (dynamic _bo in Lang13.Enumerate( M14, typeof(Obj_Item) )) {
									I = _bo;
									

									if ( I is Obj_Item_Clothing_Glasses ) {
										G = I;

										if ( Lang13.Bool( ((dynamic)G).prescription ) ) {
											continue;
										}
									}
									((Mob)M14).u_equip( I, true );

									if ( I != null ) {
										I.loc = M14.loc;
										I.layer = Convert.ToDouble( Lang13.Initial( I, "layer" ) );
										I.loc = pack;
									}
								}
								ident = null;

								switch ((string)( team )) {
									case "Green":
										ident = new Obj_Item_Weapon_Card_Id_Thunderdome_Green( M14 );
										ident.name = "" + M14.real_name + "'s Thunderdome Green ID";
										break;
									case "Red":
										ident = new Obj_Item_Weapon_Card_Id_Thunderdome_Red( M14 );
										ident.name = "" + M14.real_name + "'s Thunderdome Red ID";
										break;
								}

								if ( !( M14 is Mob_Living_Carbon ) ) {
									GlobalFuncs.qdel( ident );
								}

								switch ((string)( team )) {
									case "Green":
										
										if ( M14 is Mob_Living_Carbon_Human ) {
											H3 = M14;
											((Mob)H3).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Green( H3 ), 14 );
											((Mob)H3).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Brown( H3 ), 12 );
											((Mob)H3).equip_to_slot_or_del( ident, 7 );
											((Mob)H3).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Thunderdome_Green( H3 ), 6 );
											((Mob)H3).regenerate_icons();
										} else if ( M14 is Mob_Living_Carbon_Monkey ) {
											K = M14;
											JS = new Obj_Item_Clothing_Monkeyclothes_JumpsuitGreen( K );
											olduniform = null;
											oldhat = null;

											if ( Lang13.Bool( K.uniform ) ) {
												olduniform = K.uniform;
												K.uniform = null;
												olduniform.loc = pack;
											}
											K.uniform = JS;
											K.uniform.loc = K;

											if ( Lang13.Bool( K.hat ) ) {
												oldhat = K.hat;
												K.hat = null;
												oldhat.loc = pack;
											}
											((Mob)K).equip_to_slot_or_del( ident, 5 );
											((Mob)K).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Thunderdome_Green( K ), 4 );
											((Mob)K).regenerate_icons();
										}
										break;
									case "Red":
										
										if ( M14 is Mob_Living_Carbon_Human ) {
											H4 = M14;
											((Mob)H4).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Red( H4 ), 14 );
											((Mob)H4).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Brown( H4 ), 12 );
											((Mob)H4).equip_to_slot_or_del( ident, 7 );
											((Mob)H4).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Thunderdome_Red( H4 ), 6 );
											((Mob)H4).regenerate_icons();
										} else if ( M14 is Mob_Living_Carbon_Monkey ) {
											K2 = M14;
											JS2 = new Obj_Item_Clothing_Monkeyclothes_JumpsuitRed( K2 );
											olduniform2 = null;
											oldhat2 = null;

											if ( Lang13.Bool( K2.uniform ) ) {
												olduniform2 = K2.uniform;
												K2.uniform = null;
												olduniform2.loc = pack;
											}
											K2.uniform = JS2;
											K2.uniform.loc = K2;

											if ( Lang13.Bool( K2.hat ) ) {
												oldhat2 = K2.hat;
												K2.hat = null;
												oldhat2.loc = pack;
											}
											((Mob)K2).equip_to_slot_or_del( ident, 5 );
											((Mob)K2).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Thunderdome_Red( K2 ), 4 );
											((Mob)K2).regenerate_icons();
										}
										break;
								}

								if ( pack.contents.len == 0 ) {
									GlobalFuncs.qdel( pack );
								}

								switch ((string)( team )) {
									case "Green":
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M14 ) + " to the thunderdome. (Team Green)" );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M14 ) + " to the thunderdome. (Team Green)" );
										M14.loc = Rand13.PickFromTable( GlobalVars.tdome1 );
										break;
									case "Red":
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M14 ) + " to the thunderdome. (Team Red)" );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M14 ) + " to the thunderdome. (Team Red)" );
										M14.loc = Rand13.PickFromTable( GlobalVars.tdome2 );
										break;
								}
								GlobalFuncs.to_chat( M14, "<span class='danger'>You have been chosen to fight for the " + team + " Team. " + Rand13.Pick(new object [] { "The wheel of fate is turning!", "Heaven or Hell!", "Set Spell Card!", "Hologram Summer Again!", "Get ready for the next battle!", "Fight for your life!" }) + "</span>" );
							} else if ( Lang13.Bool( href_list["tdomeadmin"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 8 ) ) {
									return null;
								}

								if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
									return null;
								}
								M15 = Lang13.FindObj( href_list["tdomeadmin"] );

								if ( !( M15 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}

								if ( M15 is Mob_Living_Silicon_Ai ) {
									GlobalFuncs.to_chat( Task13.User, "This cannot be used on instances of type /mob/living/silicon/ai" );
									return null;
								}
								((Mob)M15).Paralyse( 5 );
								Task13.Sleep( 5 );
								M15.loc = Rand13.PickFromTable( GlobalVars.tdomeadmin );
								Task13.Schedule( 50, (Task13.Closure)(() => {
									GlobalFuncs.to_chat( M15, "<span class='notice'>You have been sent to the Thunderdome.</span>" );
									return;
								}));
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M15 ) + " to the thunderdome. (Admin.)" );
								GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M15 ) + " to the thunderdome. (Admin.)" );
							} else if ( Lang13.Bool( href_list["tdomeobserve"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 8 ) ) {
									return null;
								}

								if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
									return null;
								}
								M16 = Lang13.FindObj( href_list["tdomeobserve"] );

								if ( !( M16 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}

								if ( M16 is Mob_Living_Silicon_Ai ) {
									GlobalFuncs.to_chat( Task13.User, "This cannot be used on instances of type /mob/living/silicon/ai" );
									return null;
								}

								foreach (dynamic _bs in Lang13.Enumerate( M16, typeof(Obj_Item) )) {
									I2 = _bs;
									
									((Mob)M16).u_equip( I2, true );

									if ( I2 != null ) {
										I2.loc = M16.loc;
										I2.layer = Convert.ToDouble( Lang13.Initial( I2, "layer" ) );
									}
								}

								if ( M16 is Mob_Living_Carbon_Human ) {
									observer = M16;
									((Mob)observer).equip_to_slot_or_del( new Obj_Item_Clothing_Under_SuitJacket( observer ), 14 );
									((Mob)observer).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( observer ), 12 );
								}
								((Mob)M16).Paralyse( 5 );
								Task13.Sleep( 5 );
								M16.loc = Rand13.PickFromTable( GlobalVars.tdomeobserve );
								Task13.Schedule( 50, (Task13.Closure)(() => {
									GlobalFuncs.to_chat( M16, "<span class='notice'>You have been sent to the Thunderdome.</span>" );
									return;
								}));
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has sent " + GlobalFuncs.key_name( M16 ) + " to the thunderdome. (Observer.)" );
								GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent " + GlobalFuncs.key_name_admin( M16 ) + " to the thunderdome. (Observer.)" );
							} else if ( Lang13.Bool( href_list["revive"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 512 ) ) {
									return null;
								}
								L = Lang13.FindObj( href_list["revive"] );

								if ( !( L is Mob_Living ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living" );
									return null;
								}

								if ( GlobalVars.config.allow_admin_rev ) {
									((Mob_Living)L).revive( false );
									GlobalFuncs.message_admins( "<span class='warning'>Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " healed / revived " + GlobalFuncs.key_name_admin( L ) + "!</span>" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " healed / revived " + GlobalFuncs.key_name( L ) );
								} else {
									GlobalFuncs.to_chat( Task13.User, "Admin Rejuvinates have been disabled" );
								}
							} else if ( Lang13.Bool( href_list["makeai"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H5 = Lang13.FindObj( href_list["makeai"] );

								if ( !( H5 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								GlobalFuncs.message_admins( "<span class='warning'>Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " AIized " + GlobalFuncs.key_name_admin( H5 ) + "!</span>" );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " AIized " + GlobalFuncs.key_name( H5 ) );
								M17 = ((Mob)H5).AIize();

								if ( M17 != null ) {
									
									if ( M17.client == CLIENT ) {
										Task13.User = M17;
									}
									this.show_player_panel( M17 );
								}
							} else if ( Lang13.Bool( href_list["makealien"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H6 = Lang13.FindObj( href_list["makealien"] );

								if ( !( H6 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								M18 = Task13.User.client.cmd_admin_alienize( H6 );

								if ( Lang13.Bool( M18 ) ) {
									
									if ( M18.client == CLIENT ) {
										Task13.User = M18;
									}
									this.show_player_panel( M18 );
								}
							} else if ( Lang13.Bool( href_list["makeslime"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H7 = Lang13.FindObj( href_list["makeslime"] );

								if ( !( H7 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								M19 = Task13.User.client.cmd_admin_slimeize( H7 );

								if ( Lang13.Bool( M19 ) ) {
									
									if ( M19.client == CLIENT ) {
										Task13.User = M19;
									}
									this.show_player_panel( M19 );
								}
							} else if ( Lang13.Bool( href_list["makecluwne"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H8 = Lang13.FindObj( href_list["makecluwne"] );

								if ( !( H8 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								M20 = Task13.User.client.cmd_admin_cluwneize( H8 );

								if ( M20 != null ) {
									
									if ( M20.client == CLIENT ) {
										Task13.User = M20;
									}
									this.show_player_panel( M20 );
								}
							} else if ( Lang13.Bool( href_list["makerobot"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H9 = Lang13.FindObj( href_list["makerobot"] );

								if ( !( H9 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								M21 = Task13.User.client.cmd_admin_robotize( H9 );

								if ( M21 != null ) {
									
									if ( M21.client == CLIENT ) {
										Task13.User = M21;
									}
									this.show_player_panel( M21 );
								}
							} else if ( Lang13.Bool( href_list["makemommi"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H10 = Lang13.FindObj( href_list["makemommi"] );

								if ( !( H10 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								M22 = Task13.User.client.cmd_admin_mommify( H10 );

								if ( M22 != null ) {
									
									if ( M22.client == CLIENT ) {
										Task13.User = M22;
									}
									this.show_player_panel( M22 );
								}
							} else if ( Lang13.Bool( href_list["makeanimal"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								M23 = Lang13.FindObj( href_list["makeanimal"] );

								if ( M23 is Mob_NewPlayer ) {
									GlobalFuncs.to_chat( Task13.User, "This cannot be used on instances of type /mob/new_player" );
									return null;
								}
								new_mob2 = Task13.User.client.cmd_admin_animalize( M23 );

								if ( Lang13.Bool( new_mob2 ) && new_mob2 != M23 ) {
									
									if ( new_mob2.client == CLIENT ) {
										Task13.User = new_mob2;
									}
									this.show_player_panel( new_mob2 );
								}
							} else if ( Lang13.Bool( href_list["togmutate"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								H11 = Lang13.FindObj( href_list["togmutate"] );

								if ( !( H11 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								block = String13.ParseNumber( href_list["block"] );
								Task13.User.client.cmd_admin_toggle_block( H11, block );
								this.show_player_panel( H11 );
							} else if ( Lang13.Bool( href_list["adminplayeropts"] ) ) {
								M24 = Lang13.FindObj( href_list["adminplayeropts"] );
								this.show_player_panel( M24 );
							} else if ( Lang13.Bool( href_list["adminplayerobservejump"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 8192, false ) && !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}
								M25 = Lang13.FindObj( href_list["adminplayerobservejump"] );
								C2 = Task13.User.client;

								if ( !( Task13.User is Mob_Dead_Observer ) ) {
									C2.admin_ghost();
								}
								Task13.Sleep( 2 );

								if ( C2 != null ) {
									C2.jumptomob( M25 );
								}
							} else if ( Lang13.Bool( href_list["check_antagonist"] ) ) {
								this.check_antagonists();
							} else if ( Lang13.Bool( href_list["cult_nextobj"] ) ) {
								
								if ( Interface13.Alert( Task13.User, "Validate the current Cult objective and unlock the next one?", "Cult Cheat Code", "Yes", "No" ) != "Yes" ) {
									return null;
								}
								cult_round = GlobalFuncs.find_active_mode( "cult" );

								if ( !Lang13.Bool( cult_round ) ) {
									Interface13.Alert( "Couldn't locate cult mode datum! This shouldn't ever happen, tell a coder!" );
									return null;
								}
								((GameMode_Cult)cult_round).bypass_phase();
								GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has unlocked the Cult's next objective." );
								GlobalFuncs.log_admin( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has unlocked the Cult's next objective." );
								this.check_antagonists();
							} else if ( Lang13.Bool( href_list["cult_mindspeak"] ) ) {
								input = GlobalFuncs.stripped_input( Task13.User, "Communicate to all the cultists with the voice of Nar-Sie", "Voice of Nar-Sie", "" );

								if ( !Lang13.Bool( input ) ) {
									return null;
								}

								foreach (dynamic _bt in Lang13.Enumerate( GlobalVars.ticker.mode.cult, typeof(Mind) )) {
									H12 = _bt;
									

									if ( Lang13.Bool( H12.current ) ) {
										GlobalFuncs.to_chat( H12.current, "<span class='game say'><span class='danger'>Nar-Sie</span> murmurs, <span class='sinister'>" + input + "</span></span>" );
									}
								}

								foreach (dynamic _bu in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
									O = _bu;
									
									GlobalFuncs.to_chat( O, "<span class='game say'><span class='danger'>Nar-Sie</span> murmurs, <span class='sinister'>" + input + "</span></span>" );
								}
								GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has talked with the Voice of Nar-Sie." );
								GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]NARSIE: " + ( "" + GlobalFuncs.key_name( Task13.User ) + " Voice of Nar-Sie: " + input ) ) );
							} else if ( Lang13.Bool( href_list["cult_privatespeak"] ) ) {
								M26 = Lang13.FindObj( href_list["cult_privatespeak"] );

								if ( !Lang13.Bool( M26 ) ) {
									return null;
								}
								input2 = GlobalFuncs.stripped_input( Task13.User, "Whisper to " + M26.real_name + " with the voice of Nar-Sie", "Voice of Nar-Sie", "" );

								if ( !Lang13.Bool( input2 ) ) {
									return null;
								}
								GlobalFuncs.to_chat( M26, "<span class='game say'><span class='danger'>Nar-Sie</span> whispers to you, <span class='sinister'>" + input2 + "</span></span>" );

								foreach (dynamic _bv in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
									O2 = _bv;
									
									GlobalFuncs.to_chat( O2, "<span class='game say'><span class='danger'>Nar-Sie</span> whispers to " + M26.real_name + ", <span class='sinister'>" + input2 + "</span></span>" );
								}
								GlobalFuncs.message_admins( "Admin " + GlobalFuncs.key_name_admin( Task13.User ) + " has talked with the Voice of Nar-Sie." );
							} else if ( Lang13.Bool( href_list["adminplayerobservecoodjump"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}
								x = String13.ParseNumber( href_list["X"] );
								y = String13.ParseNumber( href_list["Y"] );
								z = String13.ParseNumber( href_list["Z"] );
								C3 = Task13.User.client;

								if ( !( Task13.User is Mob_Dead_Observer ) ) {
									C3.admin_ghost();
								}
								Task13.Sleep( 2 );
								C3.jumptocoord( x, y, z );
							} else if ( Lang13.Bool( href_list["adminchecklaws"] ) ) {
								this.output_ai_laws();
							} else if ( Lang13.Bool( href_list["adminmoreinfo"] ) ) {
								M27 = Lang13.FindObj( href_list["adminmoreinfo"] );

								if ( !( M27 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
									return null;
								}
								location_description = "";
								special_role_description = "";
								health_description = "";
								gender_description = "";
								species_description = "Not A Human";
								T = GlobalFuncs.get_turf( M27 );

								if ( T is Tile ) {
									
									if ( T.loc is Zone ) {
										location_description = "(" + ( M27.loc == T ? "at coordinates " : "in " + M27.loc + " at coordinates " ) + " " + T.x + ", " + T.y + ", " + T.z + " in area <b>" + T.loc + "</b>)";
									} else {
										location_description = "(" + ( M27.loc == T ? "at coordinates " : "in " + M27.loc + " at coordinates " ) + " " + T.x + ", " + T.y + ", " + T.z + ")";
									}
								}

								if ( Lang13.Bool( M27.mind ) ) {
									special_role_description = "Role: <b>" + M27.mind.assigned_role + "</b>; Antagonist: <font color='red'><b>" + M27.mind.special_role + "</b></font>; Has been rev: " + ( M27.mind.has_been_rev == true ? "Yes" : "No" );
								} else {
									special_role_description = "Role: <i>Mind datum missing</i> Antagonist: <i>Mind datum missing</i>; Has been rev: <i>Mind datum missing</i>;";
								}

								if ( M27 is Mob_Living ) {
									L2 = M27;
									status = null;

									dynamic _bw = M27.stat; // Was a switch-case, sorry for the mess.
									if ( _bw==0 ) {
										status = "Alive";
									} else if ( _bw==1 ) {
										status = "<font color='orange'><b>Unconscious</b></font>";
									} else if ( _bw==2 ) {
										status = "<font color='red'><b>Dead</b></font>";
									}
									health_description = "Status = " + status;
									health_description += "<BR>Oxy: " + ((Mob_Living)L2).getOxyLoss() + " - Tox: " + ((Mob_Living)L2).getToxLoss() + " - Fire: " + ((Mob_Living)L2).getFireLoss() + " - Brute: " + ((Mob_Living)L2).getBruteLoss() + " - Clone: " + ((Mob_Living)L2).getCloneLoss() + " - Brain: " + ((Mob_Living)L2).getBrainLoss();
								} else {
									health_description = "This mob type has no health to speak of.";
								}

								dynamic _bx = M27.gender; // Was a switch-case, sorry for the mess.
								if ( _bx=="male" || _bx=="female" ) {
									gender_description = "" + M27.gender;
								} else {
									gender_description = "<font color='red'><b>" + M27.gender + "</b></font>";
								}

								if ( M27 is Mob_Living_Carbon_Human ) {
									H13 = M27;
									species_description = "" + ( Lang13.Bool( H13.species ) ? H13.species.name : "<span class='danger'><b>No Species</b></span>" );
								}
								GlobalFuncs.to_chat( this.owner, "<b>Info about " + M27.name + ":</b> " );
								GlobalFuncs.to_chat( this.owner, "Mob type = " + M27.type + "; Species = " + species_description + "; Gender = " + gender_description + "; Damage = " + health_description + ";" );
								GlobalFuncs.to_chat( this.owner, "Name = <b>" + M27.name + "</b>; Real_name = " + M27.real_name + "; Mind_name = " + ( Lang13.Bool( M27.mind ) ? "" + M27.mind.name : "" ) + "; Key = <b>" + M27.key + "</b>;" );
								GlobalFuncs.to_chat( this.owner, "Location = " + location_description + ";" );
								GlobalFuncs.to_chat( this.owner, "" + special_role_description );
								GlobalFuncs.to_chat( this.owner, new Txt( "(<a href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M27 ).str( "'>PM</a>) (<A HREF='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M27 ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( M27 ).str( "'>VV</A>) (<A HREF='?src=" ).Ref( this ).str( ";subtlemessage=" ).Ref( M27 ).str( "'>SM</A>) (<A HREF='?src=" ).Ref( this ).str( ";adminplayerobservejump=" ).Ref( M27 ).str( "'>JMP</A>) (<A HREF='?src=" ).Ref( this ).str( ";secretsadmin=check_antagonist'>CA</A>)" ).ToString() );
							} else if ( Lang13.Bool( href_list["adminspawncookie"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 10 ) ) {
									return null;
								}
								H14 = Lang13.FindObj( href_list["adminspawncookie"] );

								if ( !( H14 is Mob_Living_Carbon_Human ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living/carbon/human" );
									return null;
								}
								((Mob)H14).equip_to_slot_or_del( new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Cookie( H14 ), 4 );

								if ( !( H14.l_hand is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Cookie ) ) {
									((Mob)H14).equip_to_slot_or_del( new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Cookie( H14 ), 5 );

									if ( !( H14.r_hand is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Cookie ) ) {
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( H14 ) + " has their hands full, so they did not receive their cookie, spawned by " + GlobalFuncs.key_name( this.owner ) + "." );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( H14 ) + " has their hands full, so they did not receive their cookie, spawned by " + GlobalFuncs.key_name( this.owner ) + "." );
										return null;
									} else {
										((Mob)H14).update_inv_r_hand();
									}
								} else {
									((Mob)H14).update_inv_l_hand();
								}
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( H14 ) + " got their cookie, spawned by " + GlobalFuncs.key_name( this.owner ) );
								GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( H14 ) + " got their cookie, spawned by " + GlobalFuncs.key_name( this.owner ) );
								GlobalFuncs.feedback_inc( "admin_cookies_spawned", 1 );
								GlobalFuncs.to_chat( H14, "<span class='notice'>Your prayers have been answered!! You received the <b>best cookie</b>!</span>" );
							} else if ( Lang13.Bool( href_list["BlueSpaceArtillery"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 10 ) ) {
									return null;
								}
								M28 = Lang13.FindObj( href_list["BlueSpaceArtillery"] );

								if ( !( M28 is Mob_Living ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob/living" );
									return null;
								}

								if ( Interface13.Alert( this.owner, "Are you sure you wish to hit " + GlobalFuncs.key_name( M28 ) + " with Blue Space Artillery?", "Confirm Firing?", "Yes", "No" ) != "Yes" ) {
									return null;
								}

								if ( GlobalVars.BSACooldown ) {
									GlobalFuncs.to_chat( this.owner, "Standby!  Reload cycle in progress!  Gunnary crews ready in five seconds!" );
									return null;
								}
								GlobalVars.BSACooldown = true;
								Task13.Schedule( 50, (Task13.Closure)(() => {
									GlobalVars.BSACooldown = false;
									return;
								}));
								GlobalFuncs.to_chat( M28, "You've been hit by bluespace artillery!" );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( M28 ) + " has been hit by Bluespace Artillery fired by " + this.owner );
								GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( M28 ) + " has been hit by Bluespace Artillery fired by " + this.owner );
								S5 = null;
								S5 = new Obj_Effect_Stop();
								S5.victim = M28;
								S5.loc = M28.loc;
								Task13.Schedule( 20, (Task13.Closure)(() => {
									Lang13.Delete( S5 );
									S5 = null;
									return;
								}));
								T2 = GlobalFuncs.get_turf( M28 );

								if ( T2 is Tile_Simulated_Floor ) {
									
									if ( Rand13.PercentChance( 80 ) ) {
										((Tile_Simulated_Floor)T2).break_tile_to_plating();
									} else {
										((Tile_Simulated_Floor)T2).break_tile();
									}
								}

								if ( Lang13.Bool( M28.health ) == true ) {
									((Mob)M28).gib();
								} else {
									((Mob_Living)M28).adjustBruteLoss( Num13.MinInt( 99, Convert.ToInt32( M28.health - 1 ) ) );
									((Mob)M28).Stun( 20 );
									((Mob)M28).Weaken( 20 );
									M28.stuttering = 20;
								}
							} else if ( Lang13.Bool( href_list["CentcommReply"] ) ) {
								M29 = Lang13.FindObj( href_list["CentcommReply"] );
								receive_type = null;

								if ( M29 is Mob_Living_Carbon_Human ) {
									H15 = M29;

									if ( !( H15.ears is Obj_Item_Device_Radio_Headset ) ) {
										GlobalFuncs.to_chat( Task13.User, "The person you are trying to contact is not wearing a headset" );
										return null;
									}
									receive_type = "headset";
								} else if ( M29 is Mob_Living_Silicon ) {
									receive_type = "official communication channel";
								}

								if ( !Lang13.Bool( receive_type ) ) {
									GlobalFuncs.to_chat( Task13.User, "This mob type cannot be replied to" );
									return null;
								}
								input3 = Interface13.Input( this.owner, "Please enter a message to reply to " + GlobalFuncs.key_name( M29 ) + " via their " + receive_type + ".", "Outgoing message from The Syndicate", "", null, InputType.Any );

								if ( !Lang13.Bool( input3 ) ) {
									return null;
								}
								GlobalFuncs.to_chat( this.owner, "You sent " + input3 + " to " + M29 + " via a secure channel." );
								GlobalFuncs.log_admin( "" + this.owner + " replied to " + GlobalFuncs.key_name( M29 ) + "'s Centcomm message with the message " + input3 + "." );
								GlobalFuncs.message_admins( "" + this.owner + " replied to " + GlobalFuncs.key_name( M29 ) + "'s Centcom message with: \"" + input3 + "\"" );
								GlobalFuncs.to_chat( M29, "You hear something crackle from your " + receive_type + " for a moment before a voice speaks.  \"Please stand by for a message from Central Command.  Message as follows. <b>\"" + input3 + "\"</b>  Message ends.\"" );
							} else if ( Lang13.Bool( href_list["SyndicateReply"] ) ) {
								M30 = Lang13.FindObj( href_list["SyndicateReply"] );
								receive_type2 = null;

								if ( M30 is Mob_Living_Carbon_Human ) {
									H16 = M30;

									if ( !( H16.ears is Obj_Item_Device_Radio_Headset ) ) {
										GlobalFuncs.to_chat( Task13.User, "The person you are trying to contact is not wearing a headset" );
										return null;
									}
									receive_type2 = "headset";
								} else if ( M30 is Mob_Living_Silicon ) {
									receive_type2 = "undetectable communications channel";
								}

								if ( !Lang13.Bool( receive_type2 ) ) {
									GlobalFuncs.to_chat( Task13.User, "This mob type cannot be replied to" );
									return null;
								}
								input4 = Interface13.Input( this.owner, "Please enter a message to reply to " + GlobalFuncs.key_name( M30 ) + " via their " + receive_type2 + ".", "Outgoing message from The Syndicate", "", null, InputType.Any );

								if ( !Lang13.Bool( input4 ) ) {
									return null;
								}
								GlobalFuncs.to_chat( this.owner, "You sent " + input4 + " to " + M30 + " via a secure channel." );
								GlobalFuncs.log_admin( "" + this.owner + " replied to " + GlobalFuncs.key_name( M30 ) + "'s Syndicate message with the message " + input4 + "." );
								GlobalFuncs.to_chat( M30, "You hear something crackle from your " + receive_type2 + " for a moment before a voice speaks.  \"Please stand by for a message from your benefactor.  Message as follows, agent. <b>\"" + input4 + "\"</b>  Message ends.\"" );
							} else if ( Lang13.Bool( href_list["CentcommFaxView"] ) ) {
								P = Lang13.FindObj( href_list["CentcommFaxView"] );
								info_2 = "";

								if ( Lang13.Bool( P.img ) ) {
									Interface13.CacheBrowseResource( Task13.User, P.img.img, "tmp_photo.png" );
									info_2 = "<img src='tmp_photo.png' width='192' style='-ms-interpolation-mode:nearest-neighbor' /><br>";
								}
								Interface13.Browse( Task13.User, "<HTML><HEAD><TITLE>Centcomm Fax Message</TITLE></HEAD><BODY>" + info_2 + P.info + P.stamps + "</BODY></HTML>", "window=Centcomm Fax Message" );
							} else if ( Lang13.Bool( href_list["CentcommFaxReply"] ) ) {
								H17 = Lang13.FindObj( href_list["CentcommFaxReply"] );
								sent = Interface13.Input( this.owner, "Please enter a message to reply to " + GlobalFuncs.key_name( H17 ) + " via secure connection. NOTE: BBCode does not work, but HTML tags do! Use <br> for line breaks.", "Outgoing message from Centcomm", "", null, InputType.Null | InputType.StrMultiline );

								if ( !Lang13.Bool( sent ) ) {
									return null;
								}
								sentname = Interface13.Input( this.owner, "Pick a title for the report", "Title", null, null, InputType.Str | InputType.Null );
								GlobalFuncs.SendFax( sent, sentname, null, null, true );
								GlobalFuncs.to_chat( this.owner, "Message reply to transmitted successfully." );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this.owner ) + " replied to a fax message from " + GlobalFuncs.key_name( H17 ) + ": " + sent );
								GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this.owner ) + " replied to a fax message from " + GlobalFuncs.key_name_admin( H17 ) );
							} else if ( Lang13.Bool( href_list["jumpto"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}
								M31 = Lang13.FindObj( href_list["jumpto"] );
								Task13.User.client.jumptomob( M31 );
							} else if ( Lang13.Bool( href_list["getmob"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}

								if ( Interface13.Alert( Task13.User, "Confirm?", "Message", "Yes", "No" ) != "Yes" ) {
									return null;
								}
								M32 = Lang13.FindObj( href_list["getmob"] );
								Task13.User.client.Getmob( M32 );
							} else if ( Lang13.Bool( href_list["sendmob"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}
								M33 = Lang13.FindObj( href_list["sendmob"] );
								Task13.User.client.sendmob( M33 );
							} else if ( Lang13.Bool( href_list["narrateto"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}
								M34 = Lang13.FindObj( href_list["narrateto"] );
								Task13.User.client.cmd_admin_direct_narrate( M34 );
							} else if ( Lang13.Bool( href_list["subtlemessage"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}
								M35 = Lang13.FindObj( href_list["subtlemessage"] );
								Task13.User.client.cmd_admin_subtle_message( M35 );
							} else if ( Lang13.Bool( href_list["rapsheet"] ) ) {
								this.checkSessionKey();
								Interface13.Link( Task13.User, this.getVGPanel( "rapsheet", new ByTable().Set( "ckey", href_list["rsckey"] ), true ) );
								return null;
							} else if ( Lang13.Bool( href_list["bansheet"] ) ) {
								Interface13.Link( Task13.User, this.getVGPanel( "rapsheet", null, true ) );
								return null;
							} else if ( Lang13.Bool( href_list["traitor"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 8194 ) ) {
									return null;
								}

								if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
									Interface13.Alert( "The game hasn't started yet!" );
									return null;
								}
								M36 = Lang13.FindObj( href_list["traitor"] );

								if ( !( M36 is Mob ) ) {
									GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob." );
									return null;
								}
								this.show_traitor_panel( M36 );
							} else if ( Lang13.Bool( href_list["set_base_laws"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 8 ) ) {
									GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You don't have +FUN. Go away.</span>" );
									return null;
								}
								lawtypes3 = Lang13.GetTypes( typeof(AiLaws) ) - typeof(AiLaws);
								selected_law = Interface13.Input( "Select the default lawset desired.", "Lawset Selection", null, null, lawtypes3, InputType.Null | InputType.Any );

								if ( !Lang13.Bool( selected_law ) ) {
									return null;
								}
								subject = "Unknown";

								dynamic _by = href_list["set_base_laws"]; // Was a switch-case, sorry for the mess.
								if ( _by=="ai" ) {
									GlobalVars.base_law_type = selected_law;
									subject = "AIs and Cyborgs";
								} else if ( _by=="mommi" ) {
									GlobalVars.mommi_base_law_type = selected_law;
									subject = "MoMMIs";
								}
								GlobalFuncs.to_chat( Task13.User, "<span class='notice'>New " + subject + " will spawn with the " + selected_law + " lawset.</span>" );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this.owner ) + " set the default laws of " + subject + " to: " + selected_law );
								GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( this.owner ) + " set the default laws of " + subject + " to: " + selected_law );
								GlobalVars.lawchanges.Add( "" + GlobalFuncs.key_name_admin( this.owner ) + " set the default laws of " + subject + " to: " + selected_law );
							} else if ( Lang13.Bool( href_list["create_object"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								this.create_object( Task13.User ); return null;
							} else if ( Lang13.Bool( href_list["quick_create_object"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								this.quick_create_object( Task13.User ); return null;
							} else if ( Lang13.Bool( href_list["create_turf"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								this.create_turf( Task13.User ); return null;
							} else if ( Lang13.Bool( href_list["create_mob"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}
								this.create_mob( Task13.User ); return null;
							} else if ( Lang13.Bool( href_list["object_list"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 4096 ) ) {
									return null;
								}

								if ( !GlobalVars.config.allow_admin_spawning ) {
									GlobalFuncs.to_chat( Task13.User, "Spawning of items is not allowed." );
									return null;
								}
								loc = Task13.User.loc;
								dirty_paths = null;

								if ( href_list["object_list"] is string ) {
									dirty_paths = new ByTable(new object [] { href_list["object_list"] });
								} else if ( href_list["object_list"] is ByTable ) {
									dirty_paths = href_list["object_list"];
								}
								paths = new ByTable();
								removed_paths = new ByTable();

								foreach (dynamic _bz in Lang13.Enumerate( dirty_paths )) {
									dirty_path = _bz;
									
									path = Lang13.FindClass( dirty_path );

									if ( !( path != null ) ) {
										removed_paths.Add( dirty_path );
										continue;
									} else if ( !Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Obj) ) ) && !Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Tile) ) ) && !Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Mob) ) ) ) {
										removed_paths.Add( dirty_path );
										continue;
									} else if ( Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Obj_Item_Weapon_Gun_Energy_PulseRifle) ) ) ) {
										
										if ( !GlobalFuncs.check_rights( 8, false ) ) {
											removed_paths.Add( dirty_path );
											continue;
										}
									} else if ( Lang13.Bool( ((dynamic)path).IsSubclassOf( typeof(Obj_Effect_Bhole) ) ) ) {
										
										if ( !GlobalFuncs.check_rights( 8, false ) ) {
											removed_paths.Add( dirty_path );
											continue;
										}
									}
									paths.Add( path );
								}

								if ( !( paths != null ) ) {
									Interface13.Alert( "The path list you sent is empty" );
									return null;
								}

								if ( Lang13.Length( paths ) > 5 ) {
									Interface13.Alert( "Select fewer object types, (max 5)" );
									return null;
								} else if ( Lang13.Length( removed_paths ) != 0 ) {
									Interface13.Alert( "Removed:\n" + GlobalFuncs.list2text( removed_paths, "\n" ) );
								}
								offset = GlobalFuncs.text2list( href_list["offset"], "," );
								number = ( ( String13.ParseNumber( href_list["object_count"] ) ??0) <= 1 ? 1 : ( ( String13.ParseNumber( href_list["object_count"] ) ??0) >= 100 ? 100 : String13.ParseNumber( href_list["object_count"] ) ) );
								X = ( offset.len > 0 ? String13.ParseNumber( offset[1] ) : 0 );
								Y = ( offset.len > 1 ? String13.ParseNumber( offset[2] ) : 0 );
								Z = ( offset.len > 2 ? String13.ParseNumber( offset[3] ) : 0 );
								tmp_dir = href_list["object_dir"];
								obj_dir = ( Lang13.Bool( tmp_dir ) ? String13.ParseNumber( tmp_dir ) : 2 );

								if ( !Lang13.Bool( obj_dir ) || !false ) {
									obj_dir = 2;
								}
								obj_name = GlobalFuncs.sanitize( href_list["object_name"] );
								where = href_list["object_where"];
								Interface13.Stat( null, new ByTable(new object [] { "onfloor", "inhand", "inmarked" }).Contains( where ) );

								if ( !( !Lang13.Bool( obj_dir ) || !false ) ) {
									where = "onfloor";
								}

								if ( where == "inhand" ) {
									GlobalFuncs.to_chat( Task13.User, "Support for inhand not available yet. Will spawn on floor." );
									where = "onfloor";
								}

								if ( where == "inhand" ) {
									
									if ( !( Task13.User is Mob_Living_Carbon_Human || Task13.User is Mob_Living_Carbon_Monkey ) ) {
										GlobalFuncs.to_chat( Task13.User, "Can only spawn in hand when you're a human or a monkey." );
										where = "onfloor";
									} else if ( Lang13.Bool( Task13.User.get_active_hand() ) ) {
										GlobalFuncs.to_chat( Task13.User, "Your active hand is full. Spawning on floor." );
										where = "onfloor";
									}
								}

								if ( where == "inmarked" ) {
									
									if ( !Lang13.Bool( this.marked_datum ) ) {
										GlobalFuncs.to_chat( Task13.User, "You don't have any object marked. Abandoning spawn." );
										return null;
									} else if ( !( this.marked_datum is Ent_Static ) ) {
										GlobalFuncs.to_chat( Task13.User, "The object you have marked cannot be used as a target. Target must be of type /atom. Abandoning spawn." );
										return null;
									}
								}
								target = null;

								switch ((string)( where )) {
									case "onfloor":
										
										dynamic _ca = href_list["offset_type"]; // Was a switch-case, sorry for the mess.
										if ( _ca=="absolute" ) {
											target = Map13.GetTile( ((int)( X ??0 )), ((int)( Y ??0 )), ((int)( Z ??0 )) );
										} else if ( _ca=="relative" ) {
											target = Map13.GetTile( ((int)( loc.x + ( X ??0) )), ((int)( loc.y + ( Y ??0) )), ((int)( loc.z + ( Z ??0) )) );
										}
										break;
									case "inmarked":
										target = this.marked_datum;
										break;
								}

								if ( Lang13.Bool( target ) ) {
									
									foreach (dynamic _cc in Lang13.Enumerate( paths )) {
										path2 = _cc;
										
										i2 = null;
										i2 = 0;

										while (( i2 ??0) < ( number ??0)) {
											Interface13.Stat( null, Lang13.GetTypes( typeof(Tile) ).Contains( path2 ) );

											if ( false ) {
												O3 = target;
												N = ((Tile)O3).ChangeTurf( path2 );

												if ( Lang13.Bool( N ) ) {
													
													if ( Lang13.Bool( obj_name ) ) {
														N.name = obj_name;
													}
												}
											} else {
												O4 = Lang13.Call( path2, target );

												if ( Lang13.Bool( O4 ) ) {
													O4.dir = obj_dir;

													if ( Lang13.Bool( obj_name ) ) {
														O4.name = obj_name;

														if ( O4 is Mob ) {
															M37 = O4;
															M37.real_name = obj_name;
														}
													}
												}
											}
											i2++;
										}
									}
								}

								if ( number == 1 ) {
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created a " + GlobalFuncs.english_list( paths ) + " at " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( Task13.User ) ) );

									foreach (dynamic _cd in Lang13.Enumerate( paths )) {
										path3 = _cd;
										

										if ( Lang13.Bool( path3.IsSubclassOf( typeof(Mob) ) ) ) {
											GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created a " + GlobalFuncs.english_list( paths ) + " at " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( Task13.User ) ) );
											break;
										}
									}
								} else {
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " created " + number + "ea " + GlobalFuncs.english_list( paths ) + " at " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( Task13.User ) ) );

									foreach (dynamic _ce in Lang13.Enumerate( paths )) {
										path4 = _ce;
										

										if ( Lang13.Bool( path4.IsSubclassOf( typeof(Mob) ) ) ) {
											GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created " + number + "ea " + GlobalFuncs.english_list( paths ) + " at " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( Task13.User ) ) );
											break;
										}
									}
								}
								return null;
							} else if ( Lang13.Bool( href_list["secretsfun"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 8 ) ) {
									return null;
								}
								ok = false;

								dynamic _dq = href_list["secretsfun"]; // Was a switch-case, sorry for the mess.
								if ( _dq=="sec_clothes" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SC" );

									foreach (dynamic _cf in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Clothing_Under) )) {
										O5 = _cf;
										
										Lang13.Delete( O5 );
										O5 = null;
									}
									ok = true;
								} else if ( _dq=="sec_all_clothes" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SAC" );

									foreach (dynamic _cg in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Clothing) )) {
										O6 = _cg;
										
										Lang13.Delete( O6 );
										O6 = null;
									}
									ok = true;
								} else if ( _dq=="sec_classic1" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SC1" );

									foreach (dynamic _ch in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Clothing_Suit_Fire) )) {
										O7 = _ch;
										
										Lang13.Delete( O7 );
										O7 = null;
									}

									foreach (dynamic _ci in Lang13.Enumerate( typeof(Game13), typeof(Obj_Structure_Grille) )) {
										O8 = _ci;
										
										Lang13.Delete( O8 );
										O8 = null;
									}
								} else if ( _dq=="monkey" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "M" );

									foreach (dynamic _cj in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
										H18 = _cj;
										
										Task13.Schedule( 0, (Task13.Closure)(() => {
											H18.monkeyize();
											return;
										}));
									}
									ok = true;
								} else if ( _dq=="corgi" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "M" );

									foreach (dynamic _ck in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
										H19 = _ck;
										
										Task13.Schedule( 0, (Task13.Closure)(() => {
											H19.corgize();
											return;
										}));
									}
									ok = true;
								} else if ( _dq=="striketeam" ) {
									
									if ( Task13.User.client.strike_team() ) {
										GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
										GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "Strike" );
									}
								} else if ( _dq=="tripleAI" ) {
									Task13.User.client.triple_ai();
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "TriAI" );
								} else if ( _dq=="gravity" ) {
									
									if ( !( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) ) {
										GlobalFuncs.to_chat( Task13.User, "Please wait until the game starts!  Not sure how it will work otherwise." );
										return null;
									}
									GlobalVars.gravity_is_on = !( GlobalVars.gravity_is_on == true );

									foreach (dynamic _cl in Lang13.Enumerate( GlobalVars.areas )) {
										A = _cl;
										
										((Zone)A).gravitychange( GlobalVars.gravity_is_on, A );
									}
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "Grav" );

									if ( GlobalVars.gravity_is_on == true ) {
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled gravity on." );
										GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled gravity on.</span>" );
										GlobalFuncs.command_alert( "Gravity generators are again functioning within normal parameters. Sorry for any inconvenience." );
									} else {
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled gravity off." );
										GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled gravity off.</span>" );
										GlobalFuncs.command_alert( "Feedback surge detected in mass-distributions systems. Artifical gravity has been disabled whilst the system reinitializes. Further failures may result in a gravitational collapse and formation of blackholes. Have a nice day." );
									}
								} else if ( _dq=="wave" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "Meteor" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " spawned a meteor wave" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " spawned a meteor wave.</span>" );
									new Event_MeteorWave();
								} else if ( _dq=="goblob" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "Blob" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " spawned a blob" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " spawned a blob.</span>" );
									new Event_Blob();
								} else if ( _dq=="aliens" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "Aliens" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " spawned an alien infestation" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempted an alien infestation</span>" );
									new Event_AlienInfestation();
								} else if ( _dq=="power" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "P" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made all areas powered" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made all areas powered</span>" );
									GlobalFuncs.power_restore();
								} else if ( _dq=="unpower" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "UP" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made all areas unpowered" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made all areas unpowered</span>" );
									GlobalFuncs.power_failure();
								} else if ( _dq=="quickpower" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "QP" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " made all SMESs powered" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " made all SMESs powered</span>" );
									GlobalFuncs.power_restore_quick();
								} else if ( _dq=="activateprison" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "AP" );
									GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><B>Transit signature detected.</B></span>" );
									GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><B>Incoming shuttle.</B></span>" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " sent the prison shuttle to the station.</span>" );
								} else if ( _dq=="deactivateprison" ) {
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " sent the prison shuttle back.</span>" );
								} else if ( _dq=="toggleprisonstatus" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "TPS" );

									foreach (dynamic _cm in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_PrisonShuttle) )) {
										PS = _cm;
										
										PS.allowedtocall = !PS.allowedtocall;
										GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled status of prison shuttle to " + PS.allowedtocall + ".</span>" );
									}
								} else if ( _dq=="prisonwarp" ) {
									
									if ( !( GlobalVars.ticker != null ) ) {
										Interface13.Alert( "The game hasn't started yet!" );
										return null;
									}
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "PW" );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " teleported all players to the prison station.</span>" );
									security = null;

									foreach (dynamic _co in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
										H20 = _co;
										

										if ( H20 != null ) {
											Interface13.Stat( null, GlobalVars.prisonwarped.Contains( H20 ) );

											if ( false ) {
												continue;
											}
											security = GlobalVars.FALSE;
											H20.Paralyse( 5 );
											id = H20.get_id_card();

											if ( Lang13.Bool( id ) ) {
												Interface13.Stat( null, id.access.Contains( GlobalVars.access_security ) );

												if ( false ) {
													security = GlobalVars.TRUE;
												}
											}

											if ( !( security == true ) ) {
												
												foreach (dynamic _cn in Lang13.Enumerate( H20.get_all_slots(), typeof(Obj_Item) )) {
													I3 = _cn;
													
													H20.drop_from_inventory( I3 );
												}
												H20.loc = Rand13.PickFromTable( GlobalVars.prisonwarp );
												H20.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Prisoner( H20 ), 14 );
												H20.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Orange( H20 ), 12 );
											} else {
												H20.loc = Rand13.PickFromTable( GlobalVars.prisonsecuritywarp );
											}
											GlobalVars.prisonwarped.Add( H20 );
										}
									}
								} else if ( _dq=="traitor_all" ) {
									
									if ( !( GlobalVars.ticker != null ) ) {
										Interface13.Alert( "The game hasn't started yet!" );
										return null;
									}
									objective = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Enter an objective", null, null, null, null, InputType.Any ) ), 1, 1024 );

									if ( !Lang13.Bool( objective ) ) {
										return null;
									}
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "TA(" + objective + ")" );

									foreach (dynamic _cp in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
										H21 = _cp;
										

										if ( H21.stat == 2 || !( H21.client != null ) || !( H21.mind != null ) ) {
											continue;
										}

										if ( GlobalFuncs.is_special_character( H21 ) != 0 ) {
											continue;
										}
										GlobalVars.ticker.mode.traitors.Add( H21.mind );
										H21.mind.special_role = "traitor";
										new_objective = new Objective();
										new_objective.owner = H21;
										new_objective.explanation_text = objective;
										H21.mind.objectives.Add( new_objective );
										((GameMode)GlobalVars.ticker.mode).greet_traitor( H21.mind );
										((GameMode)GlobalVars.ticker.mode).finalize_traitor( H21.mind );
									}

									foreach (dynamic _cq in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon) )) {
										A2 = _cq;
										
										GlobalVars.ticker.mode.traitors.Add( A2.mind );
										A2.mind.special_role = "traitor";
										new_objective2 = new Objective();
										new_objective2.owner = A2;
										new_objective2.explanation_text = objective;
										A2.mind.objectives.Add( new_objective2 );
										((GameMode)GlobalVars.ticker.mode).greet_traitor( A2.mind );
										((GameMode)GlobalVars.ticker.mode).finalize_traitor( A2.mind );
									}
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " used everyone is a traitor secret. Objective is " + objective + "</span>" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used everyone is a traitor secret. Objective is " + objective );
								} else if ( _dq=="moveadminshuttle" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "ShA" );
									GlobalFuncs.move_admin_shuttle();
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " moved the centcom administration shuttle</span>" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " moved the centcom administration shuttle" );
								} else if ( _dq=="moveferry" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "ShF" );

									if ( !( GlobalVars.transport_shuttle != null ) || !Lang13.Bool( GlobalVars.transport_shuttle.linked_area ) ) {
										GlobalFuncs.to_chat( Task13.User, "There is no transport shuttle!" );
										return null;
									}
									GlobalVars.transport_shuttle.move( Task13.User );
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " moved the centcom ferry</span>" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " moved the centcom ferry" );
								} else if ( _dq=="movealienship" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "ShX" );
									GlobalFuncs.move_alien_ship();
									GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " moved the alien dinghy</span>" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " moved the alien dinghy" );
								} else if ( _dq=="togglebombcap" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BC" );

									dynamic _cr = GlobalVars.MAX_EXPLOSION_RANGE; // Was a switch-case, sorry for the mess.
									if ( _cr==14 ) {
										GlobalVars.MAX_EXPLOSION_RANGE = 16;
									} else if ( _cr==16 ) {
										GlobalVars.MAX_EXPLOSION_RANGE = 20;
									} else if ( _cr==20 ) {
										GlobalVars.MAX_EXPLOSION_RANGE = 28;
									} else if ( _cr==28 ) {
										GlobalVars.MAX_EXPLOSION_RANGE = 56;
									} else if ( _cr==56 ) {
										GlobalVars.MAX_EXPLOSION_RANGE = 128;
									} else {
										GlobalVars.MAX_EXPLOSION_RANGE = 14;
									}
									range_dev = GlobalVars.MAX_EXPLOSION_RANGE * 0.25;
									range_high = GlobalVars.MAX_EXPLOSION_RANGE * 0.5;
									range_low = GlobalVars.MAX_EXPLOSION_RANGE;
									GlobalFuncs.message_admins( "<span class='danger'> " + GlobalFuncs.key_name_admin( Task13.User ) + " changed the bomb cap to " + range_dev + ", " + range_high + ", " + range_low + "</span>" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " changed the bomb cap to " + GlobalVars.MAX_EXPLOSION_RANGE );
								} else if ( _dq=="flicklights" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "FL" );

									while (!Lang13.Bool( Task13.User.stat )) {
										
										foreach (dynamic _cu in Lang13.Enumerate( GlobalVars.player_list )) {
											M38 = _cu;
											

											if ( Convert.ToInt32( M38.stat ) != 2 && Rand13.PercentChance( 25 ) ) {
												AffectedArea = GlobalFuncs.get_area( M38 );

												if ( AffectedArea.name != "Space" && AffectedArea.name != "Engine Walls" && AffectedArea.name != "Chemical Lab Test Chamber" && AffectedArea.name != "Escape Shuttle" && AffectedArea.name != "Arrival Area" && AffectedArea.name != "Arrival Shuttle" && AffectedArea.name != "start area" && AffectedArea.name != "Engine Combustion Chamber" ) {
													AffectedArea.power_light = false;
													AffectedArea.power_change();
													Task13.Schedule( Rand13.Int( 55, 185 ), (Task13.Closure)(() => {
														AffectedArea.power_light = true;
														AffectedArea.power_change();
														return;
													}));
													Message = Rand13.Int( 1, 4 );

													switch ((int)( Message )) {
														case 1:
															M38.show_message( "<span class='notice'>You shudder as if cold...</span>", 1 );
															break;
														case 2:
															M38.show_message( "<span class='notice'>You feel something gliding across your back...</span>", 1 );
															break;
														case 3:
															M38.show_message( "<span class='notice'>Your eyes twitch, you feel like something you can't see is here...</span>", 1 );
															break;
														case 4:
															M38.show_message( "<span class='notice'>You notice something moving out of the corner of your eye, but nothing is there...</span>", 1 );
															break;
													}

													foreach (dynamic _ct in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( M38, 5 ), typeof(Obj) )) {
														W = _ct;
														

														if ( Rand13.PercentChance( 25 ) && !Lang13.Bool( W.anchored ) ) {
															Map13.StepRandom( W );
														}
													}
												}
											}
										}
										Task13.Sleep( Rand13.Int( 100, 1000 ) );
									}

									foreach (dynamic _cv in Lang13.Enumerate( GlobalVars.player_list )) {
										M39 = _cv;
										

										if ( Convert.ToInt32( M39.stat ) != 2 ) {
											M39.show_message( "<span class='notice'>The chilling wind suddenly stops...</span>", 1 );
										}
									}
								} else if ( _dq=="wave" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "MW" );
									new Event_MeteorWave();
								} else if ( _dq=="gravanomalies" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "GA" );
									GlobalFuncs.command_alert( "Gravitational anomalies detected on the station. There is no additional data.", "Anomaly Alert" );
									GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/granomalies.ogg" ) );
									T3 = Rand13.PickFromTable( GlobalVars.blobstart );
									bh = new Obj_Effect_Bhole( T3.loc );
									Task13.Schedule( Rand13.Int( 100, 600 ), (Task13.Closure)(() => {
										Lang13.Delete( bh );
										bh = null;
										return;
									}));
								} else if ( _dq=="timeanomalies" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "STA" );
									GlobalFuncs.wormhole_event();
								} else if ( _dq=="goblob" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BL" );
									GlobalFuncs.mini_blob_event();
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned blob" );
								} else if ( _dq=="aliens" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "AL" );

									if ( GlobalVars.aliens_allowed ) {
										new Event_AlienInfestation();
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned aliens" );
									}
								} else if ( _dq=="alien_silent" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "ALS" );

									if ( GlobalVars.aliens_allowed ) {
										GlobalFuncs.create_xeno();
									}
								} else if ( _dq=="spiders" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SL" );
									new Event_SpiderInfestation();
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned spiders" );
								} else if ( _dq=="comms_blackout" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "CB" );
									answer = Interface13.Alert( Task13.User, "Would you like to alert the crew?", "Alert", "Yes", "No" );

									if ( answer == "Yes" ) {
										GlobalFuncs.communications_blackout( false );
									} else {
										GlobalFuncs.communications_blackout( true );
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a communications blackout." );
								} else if ( _dq=="pda_spam" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "PDA" );
									new Event_PdaSpam();
								} else if ( _dq=="carp" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "C" );
									choice = Interface13.Input( "You sure you want to spawn carp?", null, null, null, new ByTable(new object [] { "Badmin", "Cancel" }), InputType.Any );

									if ( choice == "Badmin" ) {
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned carp." );
										new Event_CarpMigration();
									}
								} else if ( _dq=="radiation" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "R" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has has irradiated the station" );
									new Event_RadiationStorm();
								} else if ( _dq=="immovable" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "IR" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has sent an immovable rod to the station" );
									GlobalFuncs.immovablerod();
								} else if ( _dq=="prison_break" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "PB" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has allowed a prison break" );
									GlobalFuncs.prison_break();
								} else if ( _dq=="lightout" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "LO" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has broke a lot of lights" );
									GlobalFuncs.lightsout( true, 2 );
								} else if ( _dq=="blackout" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BO" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " broke all lights" );
									GlobalFuncs.lightsout( false, 0 );
								} else if ( _dq=="whiteout" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "WO" );

									foreach (dynamic _cw in Lang13.Enumerate( GlobalVars.alllights, typeof(Obj_Machinery_Light) )) {
										L3 = _cw;
										
										L3.fix();
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " fixed all lights" );
								} else if ( _dq=="aliens" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "AL" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned aliens" );
									new Event_AlienInfestation();
								} else if ( _dq=="radiation" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "RAD" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has started a radiation event" );
									new Event_RadiationStorm();
								} else if ( _dq=="floorlava" ) {
									
									if ( GlobalVars.floorIsLava ) {
										GlobalFuncs.to_chat( Task13.User, "The floor is lava already." );
										return null;
									}
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "LF" );
									length = Interface13.Input( Task13.User, "How long will the lava last? (in seconds)", "Length", 180, null, InputType.Num );
									length = Num13.MinInt( ((int)( Math.Abs( Convert.ToDouble( length ) ) )), 1200 );
									damage = Interface13.Input( Task13.User, "How deadly will the lava be?", "Damage", 2, null, InputType.Num );
									damage = Num13.MinInt( ((int)( Math.Abs( Convert.ToDouble( damage ) ) )), 100 );
									sure = Interface13.Alert( Task13.User, "Are you sure you want to do this?", "Confirmation", "YES!", "Nah" );

									if ( sure == "Nah" ) {
										return null;
									}
									GlobalVars.floorIsLava = true;
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made the floor LAVA! It'll last " + length + " seconds and it will deal " + damage + " damage to everyone." );
									count = 0;
									lavaturfs = new ByTable();

									foreach (dynamic _cx in Lang13.Enumerate( GlobalVars.turfs, typeof(Tile_Simulated_Floor) )) {
										F = _cx;
										
										count++;

										if ( !( count % 50000 != 0 ) ) {
											Task13.Sleep( ((int)( Game13.tick_lag )) );
										}

										if ( F.z == 1 ) {
											F.name = "lava";
											F.desc = "The floor is LAVA!";
											F.overlays.Add( "lava" );
											F.lava = true;
											lavaturfs.Add( F );
										}
									}
									Task13.Schedule( 0, (Task13.Closure)(() => {
										i3 = null;
										i3 = i3;

										while (( i3 ??0) < Convert.ToDouble( length )) {
											
											if ( Lang13.Bool( damage ) ) {
												
												foreach (dynamic _cz in Lang13.Enumerate( GlobalVars.living_mob_list, typeof(Mob_Living_Carbon) )) {
													L4 = _cz;
													

													if ( L4.loc is Tile_Simulated_Floor ) {
														F2 = L4.loc;

														if ( Lang13.Bool( ((dynamic)F2).lava ) ) {
															safe = false;

															foreach (dynamic _cy in Lang13.Enumerate( F2.contents, typeof(Obj_Structure) )) {
																O9 = _cy;
																

																if ( ( O9.level ??0) > ( F2.level ??0) && !( O9 is Obj_Structure_Window ) ) {
																	safe = true;
																	break;
																}
															}

															if ( !safe ) {
																L4.adjustFireLoss( damage );
															}
														}
													}
												}
											}
											Task13.Sleep( 10 );
											i3++;
										}

										foreach (dynamic _da in Lang13.Enumerate( lavaturfs, typeof(Tile_Simulated_Floor) )) {
											F3 = _da;
											

											if ( F3.z == 1 ) {
												F3.name = Lang13.Initial( F3, "name" );
												F3.desc = Lang13.Initial( F3, "desc" );
												F3.overlays.len = 0;
												F3.lava = false;
												F3.update_icon();
											}
										}
										GlobalVars.floorIsLava = false;
										return;
									}));
									return null;
								} else if ( _dq=="thebees" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BEE" );
									answer2 = Interface13.Alert( "What's this? A Space Station woefully underpopulated by bees?", null, "Let's fix it!", "On second thought, let's not." );

									if ( answer2 == "Let's fix it!" ) {
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " unleashed the bees onto the crew." );
										GlobalFuncs.to_chat( typeof(Game13), "<font size='10' color='red'><b>NOT THE BEES!</b></font>" );
										GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/effects/bees.ogg" ) );

										foreach (dynamic _db in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
											M40 = _db;
											
											BEE = new Mob_Living_SimpleAnimal_Bee( GlobalFuncs.get_turf( M40 ) );
											BEE.strength = 16;
											BEE.toxic = 5;
											BEE.mut = 2;
											BEE.feral = 25;
											BEE.target = M40;
											BEE.icon_state = "bees_swarm-feral";
										}
									}
								} else if ( _dq=="virus" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "V" );
									answer3 = Interface13.Alert( "Do you want this to be a greater disease or a lesser one?", null, "Greater", "Lesser" );

									if ( answer3 == "Lesser" ) {
										GlobalFuncs.virus2_lesser_infection();
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has triggered a lesser virus outbreak." );
									} else {
										GlobalFuncs.virus2_greater_infection();
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has triggered a greater virus outbreak." );
									}
								} else if ( _dq=="retardify" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "RET" );

									foreach (dynamic _dc in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
										H22 = _dc;
										
										GlobalFuncs.to_chat( H22, "<span class='danger'>You suddenly feel stupid.</span>" );
										H22.setBrainLoss( 60 );
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made everybody retarded" );
								} else if ( _dq=="fakeguns" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "FG" );

									foreach (dynamic _dd in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item) )) {
										W2 = _dd;
										

										if ( W2 is Obj_Item_Clothing || W2 is Obj_Item_Weapon_Card_Id || W2 is Obj_Item_Weapon_Disk || W2 is Obj_Item_Weapon_Tank ) {
											continue;
										}
										W2.icon = "icons/obj/gun.dmi";
										W2.icon_state = "revolver";
										W2.item_state = "gun";
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made every item look like a gun" );
								} else if ( _dq=="experimentalguns" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "GUN" );

									foreach (dynamic _df in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon) )) {
										C4 = _df;
										
										turflist = new ByTable();

										foreach (dynamic _de in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( 1, this ) )) {
											T4 = _de;
											
											turflist.Add( T4 );
										}

										if ( !( turflist.len != 0 ) ) {
											turflist.Add( GlobalFuncs.get_turf( C4 ) );
										}
										U = Rand13.PickFromTable( turflist );
										E = new Obj_Structure_Closet_Crate_Secure_Weapon_Experimental( U );
										GlobalFuncs.to_chat( C4, "<span class='danger'>A crate appears next to you. You think you can read \"" + E.chosen_set + "\" scribbled on it</span>" );
										((Tile)U).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " distributed experimental guns to the entire crew" );
								} else if ( _dq=="schoolgirl" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SG" );

									foreach (dynamic _dg in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Clothing_Under) )) {
										W3 = _dg;
										
										W3.icon_state = "schoolgirl";
										W3.item_state = "w_suit";
										W3._color = "schoolgirl";
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " activated Japanese Animes mode" );
									GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/animes.ogg" ) );
								} else if ( _dq=="eagles" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "EgL" );

									foreach (dynamic _dh in Lang13.Enumerate( GlobalVars.all_doors, typeof(Obj_Machinery_Door_Airlock) )) {
										W4 = _dh;
										

										if ( W4.z == 1 && !( GlobalFuncs.get_area( W4 ) is Zone_Bridge ) && !( GlobalFuncs.get_area( W4 ) is Zone_CrewQuarters ) && !( GlobalFuncs.get_area( W4 ) is Zone_Security_Prison ) ) {
											W4.req_access = new ByTable();
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " activated Egalitarian Station mode" );
									GlobalFuncs.command_alert( "Centcomm airlock control override activated. Please take this time to get acquainted with your coworkers." );
									GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/commandreport.ogg", null, null, null, 60 ) );
								} else if ( _dq=="dorf" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "DF" );

									foreach (dynamic _di in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
										B = _di;
										
										B.f_style = "Dward Beard";
										B.update_hair();
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " activated dorf mode" );
								} else if ( _dq=="ionstorm" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "I" );
									GlobalFuncs.generate_ion_law();
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered an ion storm" );
									show_log = Interface13.Alert( Task13.User, "Show ion message?", "Message", "Yes", "No" );

									if ( show_log == "Yes" ) {
										GlobalFuncs.command_alert( "Ion storm detected near the station. Please check all AI-controlled equipment for errors.", "Anomaly Alert" );
										GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/ionstorm.ogg" ) );
									}
								} else if ( _dq=="spacevines" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "K" );
									new Event_Spacevine();
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned spacevines" );
								} else if ( _dq=="onlyone" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "OO" );
									Task13.User.client.only_one();
								} else if ( _dq=="togglenarsie" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "NA" );
									choice2 = Interface13.Input( "How do you wish for narsie to interact with her surroundings?", null, null, null, new ByTable(new object [] { "CultStation13", "Nar-Singulo" }), InputType.Any );

									if ( choice2 == "CultStation13" ) {
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set narsie's behaviour to \"CultStation13\"." );
										GlobalVars.narsie_behaviour = "CultStation13";
									}

									if ( choice2 == "Nar-Singulo" ) {
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set narsie's behaviour to \"Nar-Singulo\"." );
										GlobalVars.narsie_behaviour = "Nar-Singulo";
									}
								} else if ( _dq=="hellonearth" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "NS" );
									choice3 = Interface13.Input( "You sure you want to end the round and summon narsie at your location? Misuse of this could result in removal of flags or halarity.", null, null, null, new ByTable(new object [] { "PRAISE SATAN", "Cancel" }), InputType.Any );

									if ( choice3 == "PRAISE SATAN" ) {
										new Obj_Machinery_Singularity_Narsie_Large( GlobalFuncs.get_turf( Task13.User ) );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has summoned narsie and brought about a new realm of suffering." );
									}
								} else if ( _dq=="supermattercascade" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "SC" );
									choice4 = Interface13.Input( "You sure you want to destroy the universe and create a large explosion at your location? Misuse of this could result in removal of flags or halarity.", null, null, null, new ByTable(new object [] { "NO TIME TO EXPLAIN", "Cancel" }), InputType.Any );

									if ( choice4 == "NO TIME TO EXPLAIN" ) {
										GlobalFuncs.explosion( GlobalFuncs.get_turf( Task13.User ), 8, 16, 24, 32, 1 );
										new Tile_Unsimulated_Wall_Supermatter( GlobalFuncs.get_turf( Task13.User ) );
										GlobalFuncs.SetUniversalState( typeof(UniversalState_SupermatterCascade) );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has managed to destroy the universe with a supermatter cascade. Good job, " + GlobalFuncs.key_name_admin( Task13.User ) );
									}
								} else if ( _dq=="spawnadminbus" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "AB" );
									A3 = new Obj_Structure_Bed_Chair_Vehicle_Adminbus( GlobalFuncs.get_turf( Task13.User ) );
									A3.dir = ((int)( GlobalVars.EAST ));
									A3.update_lightsource();
									A3.busjuke.dir = ((int)( GlobalVars.EAST ));
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned an Adminbus. Who gave him the keys?" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has spawned an Adminbus." );
								} else if ( _dq=="spawnselfdummy" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "TD" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " spawned himself as a Test Dummy." );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " spawned himself as a Test Dummy." );
									T5 = GlobalFuncs.get_turf( Task13.User );
									D2 = new Mob_Living_Carbon_Human_Dummy( T5 );
									Task13.User.client.cmd_assume_direct_control( D2 );
									D2.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Black( D2 ), 14 );
									D2.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Black( D2 ), 12 );
									D2.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Heads_Captain(  ), 8 );
									D2.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Satchel( D2 ), 1 );
									D2.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box_Engineer( D2.back ), 18 );
									((Tile)T5).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/misc/adminspawn.ogg" );
									D2.name = "Admin";
									D2.real_name = "Admin";
									newname = "";
									newname = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( D2, "Before you step out as an embodied god, what name do you wish for?", "Choose your name.", "Admin", null, InputType.Str | InputType.Null ) ), 1, 26 );

									if ( !Lang13.Bool( newname ) ) {
										newname = "Admin";
									}
									D2.name = newname;
									D2.real_name = newname;
									admin_id = new Obj_Item_Weapon_Card_Id_Admin( D2 );
									admin_id.registered_name = newname;
									D2.equip_to_slot_or_del( admin_id, 7 );
								} else if ( _dq=="fakealerts" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "FAKEA" );
									choice5 = Interface13.Input( "Choose the type of fake alert you wish to trigger", "False Flag and Bait Panel", null, null, new ByTable(new object [] { "Biohazard", "Lifesigns", "Malfunction", "Ion", "Meteor Wave", "Carp Migration", "Return" }), InputType.Any );

									if ( choice5 == "Return" ) {
										return null;
									}

									if ( choice5 == "Biohazard" ) {
										levelchoice = Interface13.Input( "Set the level of the biohazard alert, or leave at 0 to have a random level (1 to 7 supported only)", "Space FEMA Readiness Program", 0, null, null, InputType.Num );

										if ( !Lang13.Bool( levelchoice ) || Convert.ToDouble( levelchoice ) > 7 || Convert.ToDouble( levelchoice ) < 0 ) {
											GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Invalid input range (0 to 7 only)</span>" );
											return null;
										}
										GlobalFuncs.biohazard_alert( levelchoice );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Biohzard Alert." );
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Biohzard Alert." );
										return null;
									}

									if ( choice5 == "Lifesigns" ) {
										GlobalFuncs.command_alert( "Unidentified lifesigns detected coming aboard " + GlobalFuncs.station_name() + ". Secure any exterior access, including ducting and ventilation.", "Lifesign Alert" );
										GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/aliens.ogg" ) );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Lifesign Alert." );
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Lifesign Alert." );
										return null;
									}

									if ( choice5 == "Malfunction" ) {
										salertchoice = Interface13.Input( "Do you wish to include the Hostile Runtimes warning to have an authentic Malfunction Takeover Alert ?", "Nanotrasen Alert Level Monitor", null, null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

										if ( salertchoice == "Yes" ) {
											GlobalFuncs.command_alert( "Hostile runtimes detected in all station systems, please deactivate your AI to prevent possible damage to its morality core.", "Anomaly Alert" );
										}
										GlobalFuncs.to_chat( typeof(Game13), "<font size=4 color='red'>Attention! Delta security level reached!</font>" );
										GlobalFuncs.to_chat( typeof(Game13), "<font color='red'>" + GlobalVars.config.alert_desc_delta + "</font>" );
										GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/aimalf.ogg" ) );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Malfunction Takeover Alert (Hostile Runtimes alert " + ( salertchoice == "Yes" ? "included" : "excluded" ) + ")" );
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Malfunction Takeover Alert (Hostile Runtimes alert " + ( salertchoice == "Yes" ? "included" : "excluded" ) + ")" );
										return null;
									}

									if ( choice5 == "Ion" ) {
										GlobalFuncs.command_alert( "Ion storm detected near the station. Please check all AI-controlled equipment for errors.", "Anomaly Alert" );
										GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/ionstorm.ogg" ) );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Ion Alert." );
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Ion Alert." );
										return null;
									}

									if ( choice5 == "Meteor Wave" ) {
										GlobalFuncs.command_alert( "A meteor storm has been detected on collision course with the station. Seek shelter within the core of the station immediately.", "Meteor Alert" );
										GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/meteors.ogg" ) );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Meteor Alert." );
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Meteor Alert." );
										return null;
									}

									if ( choice5 == "Carp Migration" ) {
										GlobalFuncs.command_alert( "Unknown biological entities have been detected near " + GlobalFuncs.station_name() + ", please stand-by.", "Lifesign Alert" );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Carp Migration Alert." );
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " triggered a FAKE Carp Migration Alert." );
										return null;
									}
								} else if ( _dq=="fakebooms" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "FAKEE" );
									choice6 = Interface13.Input( "How much high-budget explosions do you want ?", "Micheal Bay SFX Systems", 1, null, null, InputType.Num );

									if ( Convert.ToDouble( choice6 ) < 1 ) {
										GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Invalid input range (null or negative)</span>" );
										return null;
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " improvised himself as Micheal Bay and triggered " + Num13.Floor( Convert.ToDouble( choice6 ) ) + " fake explosions." );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " improvised himself as Micheal Bay and triggered " + Num13.Floor( Convert.ToDouble( choice6 ) ) + " fake explosions." );

									foreach (dynamic _dj in Lang13.IterateRange( 1, choice6 )) {
										i4 = _dj;
										
										GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/effects/explosionfar.ogg" ) );
										Task13.Sleep( Rand13.Int( 2, 10 ) );
									}
								} else if ( _dq=="massbomber" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BBM" );
									choice7 = Interface13.Alert( "Dress every player like Bomberman and give them BBDs?", "Bomberman Mode Activation", "Confirm", "Cancel" );

									if ( choice7 == "Confirm" ) {
										GlobalVars.bomberman_mode = true;
										GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/bomberman/start.ogg" ) );

										foreach (dynamic _dk in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
											M41 = _dk;
											

											if ( Lang13.Bool( M41.wear_suit ) ) {
												O10 = M41.wear_suit;
												M41.u_equip( O10, true );
												O10.loc = M41.loc;
											}

											if ( Lang13.Bool( M41.head ) ) {
												O11 = M41.head;
												M41.u_equip( O11, true );
												O11.loc = M41.loc;
											}
											M41.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Bomberman( M41 ), 11 );
											M41.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Bomberman( M41 ), 13 );
											M41.equip_to_slot_or_del( new Obj_Item_Weapon_Bomberman( M41 ), 17 );
											M41.update_icons();
											GlobalFuncs.to_chat( M41, "Wait...what?" );
											Task13.Schedule( 50, (Task13.Closure)(() => {
												GlobalFuncs.to_chat( M41, "<span class='notice'>Tip: Use the BBD in your suit's pocket to place bombs.</span>" );
												GlobalFuncs.to_chat( M41, "<span class='notice'>Try to keep your BBD and escape this hell hole alive!</span>" );
												return;
											}));
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " turned everyone into Bomberman!" );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " turned everyone into Bomberman!" );
								} else if ( _dq=="bomberhurt" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BBH" );
									choice8 = Interface13.Alert( "Activate Cuban Pete mode? Note that newly spawned BBD will still have player damage deactivated.", "Activating Bomberman Bombs Player Damage", "Confirm", "Cancel" );

									if ( choice8 == "Confirm" ) {
										GlobalVars.bomberman_hurt = true;

										foreach (dynamic _dl in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Item_Weapon_Bomberman) )) {
											B2 = _dl;
											

											if ( !( B2.arena != null ) ) {
												B2.hurt_players = true;
											}
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " enabled the player damage of the Bomberman Bomb Dispensers currently in the world. Cuban Pete approves." );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " enabled the player damage of the Bomberman Bomb Dispensers currently in the world. Cuban Pete approves." );
								} else if ( _dq=="bomberdestroy" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BBD" );
									choice9 = Interface13.Alert( "Activate Michael Bay mode? Note that newly spawned BBD will still have environnement damage deactivated.", "Activating Bomberman Bombs Environnement Damage", "Confirm", "Cancel" );

									if ( choice9 == "Confirm" ) {
										GlobalVars.bomberman_destroy = true;

										foreach (dynamic _dm in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Item_Weapon_Bomberman) )) {
											B3 = _dm;
											

											if ( !( B3.arena != null ) ) {
												B3.destroy_environnement = true;
											}
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " enabled the environnement damage of the Bomberman Bomb Dispensers currently in the world. Michael Bay approves." );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " enabled the environnement damage of the Bomberman Bomb Dispensers currently in the world. Michael Bay approves." );
								} else if ( _dq=="bombernohurt" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BBNH" );
									choice10 = Interface13.Alert( "Disable Cuban Pete mode.", "Disable Bomberman Bombs Player Damage", "Confirm", "Cancel" );

									if ( choice10 == "Confirm" ) {
										GlobalVars.bomberman_hurt = false;

										foreach (dynamic _dn in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Item_Weapon_Bomberman) )) {
											B4 = _dn;
											

											if ( !( B4.arena != null ) ) {
												B4.hurt_players = false;
											}
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " disabled the player damage of the Bomberman Bomb Dispensers currently in the world." );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " disabled the player damage of the Bomberman Bomb Dispensers currently in the world." );
								} else if ( _dq=="bombernodestroy" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BBND" );
									choice11 = Interface13.Alert( "Disable Michael Bay mode?", "Disable Bomberman Bombs Environnement Damage", "Confirm", "Cancel" );

									if ( choice11 == "Confirm" ) {
										GlobalVars.bomberman_destroy = false;

										foreach (dynamic _do in Lang13.Enumerate( GlobalVars.bombermangear, typeof(Obj_Item_Weapon_Bomberman) )) {
											B5 = _do;
											

											if ( !( B5.arena != null ) ) {
												B5.destroy_environnement = false;
											}
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " disabled the environnement damage of the Bomberman Bomb Dispensers currently in the world." );
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " disabled the environnement damage of the Bomberman Bomb Dispensers currently in the world." );
								} else if ( _dq=="togglebombmethod" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "BM" );
									choice12 = Interface13.Input( "Do you wish for explosions to take walls and obstacles into account?", null, null, null, new ByTable(new object [] { "Yes, let's have realistic explosions", "No, let's have perfectly circular explosions" }), InputType.Any );

									if ( choice12 == "Yes, let's have realistic explosions" ) {
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set explosions to take walls and obstacles into account." );
										GlobalVars.explosion_newmethod = true;
									}

									if ( choice12 == "No, let's have perfectly circular explosions" ) {
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set explosions to completely pass through walls and obstacles." );
										GlobalVars.explosion_newmethod = false;
									}
								} else if ( _dq=="placeturret" ) {
									GlobalFuncs.feedback_inc( "admin_secrets_fun_used", 1 );
									GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "TUR" );
									possible_guns = new ByTable();

									foreach (dynamic _dp in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item_Weapon_Gun_Energy) ) )) {
										path5 = _dp;
										
										possible_guns.Add( path5 );
									}
									choice13 = Interface13.Input( "What energy gun do you want inside the turret?", null, null, null, possible_guns, InputType.Any );

									if ( !Lang13.Bool( choice13 ) ) {
										return null;
									}
									gun = Lang13.Call( choice13 );
									Turret = new Obj_Machinery_PortaTurret( GlobalFuncs.get_turf( Task13.User ) );
									Turret.installation = choice13;
									Turret.gun_charge = Lang13.Bool( gun.power_supply.charge );
									Turret.update_gun();
									GlobalFuncs.qdel( gun );
									emag = Interface13.Input( "Emag the turret?", null, null, null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

									if ( emag == "Yes" ) {
										Turret.emag( Task13.User );
									}
								} else if ( _dq=="hardcore_mode" ) {
									choice14 = Interface13.Input( "Are you sure you want to " + ( GlobalVars.ticker.hardcore_mode ? "disable" : "enable" ) + " hardcore mode? Starvation will " + ( GlobalVars.ticker.hardcore_mode ? "no longer" : "" ) + "slowly kill player-controlled humans.", "Admin Abuse", null, null, new ByTable(new object [] { "Yes", "No!" }), InputType.Any );

									if ( choice14 == "Yes" ) {
										
										if ( !GlobalVars.hardcore_mode ) {
											GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has ENABLED hardcore mode!" );
											GlobalVars.hardcore_mode = true;
											GlobalFuncs.to_chat( typeof(Game13), "<h5><span class='danger'>Hardcore mode has been enabled</span></h5>" );
											GlobalFuncs.to_chat( typeof(Game13), "<span class='info'>Not eating for a prolonged period of time will slowly kill player-controlled characters (braindead and catatonic characters are not affected).</span>" );
											GlobalFuncs.to_chat( typeof(Game13), "<span class='info'>If your hunger indicator starts flashing red and black, your character is starving and may die soon!</span>" );
										} else {
											GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has DISABLED hardcore mode!" );
											GlobalVars.hardcore_mode = false;
											GlobalFuncs.to_chat( typeof(Game13), "<h5><span class='danger'>Hardcore mode has been disabled</span></h5>" );
											GlobalFuncs.to_chat( typeof(Game13), "<span class='info'>Starvation will no longer kill player-controlled characters.</span>" );
										}
									}
								}

								if ( Task13.User != null ) {
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used secret " + href_list["secretsfun"] );

									if ( ok ) {
										GlobalFuncs.to_chat( typeof(Game13), "<B>A secret has been activated by " + Task13.User.key + "!</B>" );
									}
								}
							} else if ( Lang13.Bool( href_list["secretsadmin"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 2 ) ) {
									return null;
								}
								ok2 = false;

								dynamic _eb = href_list["secretsadmin"]; // Was a switch-case, sorry for the mess.
								if ( _eb=="clear_bombs" ) {
									num = false;

									foreach (dynamic _dr in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_TransferValve) )) {
										TV = _dr;
										

										if ( Lang13.Bool( TV.tank_one ) || Lang13.Bool( TV.tank_two ) ) {
											Lang13.Delete( TV );
											TV = null;
											TV++;
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has removed " + num + " bombs" );
								} else if ( _eb=="detonate_bombs" ) {
									num2 = false;

									foreach (dynamic _ds in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_TransferValve) )) {
										TV2 = _ds;
										

										if ( Lang13.Bool( TV2.tank_one ) || Lang13.Bool( TV2.tank_two ) ) {
											TV2.toggle_valve();
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has toggled valves on " + num2 + " bombs" );
								} else if ( _eb=="list_bombers" ) {
									dat4 = "<B>Bombing List<HR>";

									foreach (dynamic _dt in Lang13.Enumerate( GlobalVars.bombers )) {
										l = _dt;
										
										dat4 += "" + l + "<BR>";
									}
									Interface13.Browse( Task13.User, dat4, "window=bombers" );
								} else if ( _eb=="list_signalers" ) {
									dat5 = "<B>Showing last " + Lang13.Length( GlobalVars.lastsignalers ) + " signalers.</B><HR>";

									foreach (dynamic _du in Lang13.Enumerate( GlobalVars.lastsignalers )) {
										sig = _du;
										
										dat5 += "" + sig + "<BR>";
									}
									Interface13.Browse( Task13.User, dat5, "window=lastsignalers;size=800x500" );
								} else if ( _eb=="list_lawchanges" ) {
									dat6 = "<B>Showing last " + Lang13.Length( GlobalVars.lawchanges ) + " law changes.</B><HR>";

									foreach (dynamic _dv in Lang13.Enumerate( GlobalVars.lawchanges )) {
										sig2 = _dv;
										
										dat6 += "" + sig2 + "<BR>";
									}
									Interface13.Browse( Task13.User, dat6, "window=lawchanges;size=800x500" );
								} else if ( _eb=="list_job_debug" ) {
									dat7 = "<B>Job Debug info.</B><HR>";

									if ( GlobalVars.job_master != null ) {
										
										foreach (dynamic _dw in Lang13.Enumerate( GlobalVars.job_master.job_debug )) {
											line = _dw;
											
											dat7 += "" + line + "<BR>";
										}
										dat7 += "*******<BR><BR>";

										foreach (dynamic _dx in Lang13.Enumerate( GlobalVars.job_master.occupations, typeof(Job) )) {
											job13 = _dx;
											

											if ( !( job13 != null ) ) {
												continue;
											}
											dat7 += "job: " + job13.title + ", current_positions: " + job13.current_positions + ", total_positions: " + job13.total_positions + " <BR>";
										}
										Interface13.Browse( Task13.User, dat7, "window=jobdebug;size=600x500" );
									}
								} else if ( _eb=="showailaws" ) {
									this.output_ai_laws();
								} else if ( _eb=="showgm" ) {
									
									if ( !( GlobalVars.ticker != null ) ) {
										Interface13.Alert( "The game hasn't started yet!" );
									} else if ( Lang13.Bool( GlobalVars.ticker.mode ) ) {
										Interface13.Alert( "The game mode is " + GlobalVars.ticker.mode.name );
									} else {
										Interface13.Alert( "For some reason there's a ticker, but not a game mode" );
									}
								} else if ( _eb=="manifest" ) {
									dat8 = "<B>Showing Crew Manifest.</B><HR>";
									dat8 += "<table cellspacing=5><tr><th>Name</th><th>Position</th></tr>";

									foreach (dynamic _dy in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
										H23 = _dy;
										

										if ( Lang13.Bool( H23.ckey ) ) {
											dat8 += "<tr><td>" + H23.name + "</td><td>" + H23.get_assignment() + "</td></tr>";
										}
									}
									dat8 += "</table>";
									Interface13.Browse( Task13.User, dat8, "window=manifest;size=440x410" );
								} else if ( _eb=="check_antagonist" ) {
									this.check_antagonists();
								} else if ( _eb=="DNA" ) {
									dat9 = "<B>Showing DNA from blood.</B><HR>";
									dat9 += "<table cellspacing=5><tr><th>Name</th><th>DNA</th><th>Blood Type</th></tr>";

									foreach (dynamic _dz in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
										H24 = _dz;
										

										if ( H24.dna != null && Lang13.Bool( H24.ckey ) ) {
											dat9 += "<tr><td>" + H24 + "</td><td>" + H24.dna.unique_enzymes + "</td><td>" + H24.b_type + "</td></tr>";
										}
									}
									dat9 += "</table>";
									Interface13.Browse( Task13.User, dat9, "window=DNA;size=440x410" );
								} else if ( _eb=="fingerprints" ) {
									dat10 = "<B>Showing Fingerprints.</B><HR>";
									dat10 += "<table cellspacing=5><tr><th>Name</th><th>Fingerprints</th></tr>";

									foreach (dynamic _ea in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
										H25 = _ea;
										

										if ( Lang13.Bool( H25.ckey ) ) {
											
											if ( H25.dna != null && Lang13.Bool( H25.dna.uni_identity ) ) {
												dat10 += "<tr><td>" + H25 + "</td><td>" + Num13.Md5( H25.dna.uni_identity ) + "</td></tr>";
											} else if ( H25.dna != null && !Lang13.Bool( H25.dna.uni_identity ) ) {
												dat10 += "<tr><td>" + H25 + "</td><td>H.dna.uni_identity = null</td></tr>";
											} else if ( !( H25.dna != null ) ) {
												dat10 += "<tr><td>" + H25 + "</td><td>H.dna = null</td></tr>";
											}
										}
									}
									dat10 += "</table>";
									Interface13.Browse( Task13.User, dat10, "window=fingerprints;size=440x410" );
								}

								if ( Task13.User != null ) {
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " used secret " + href_list["secretsadmin"] );

									if ( ok2 ) {
										GlobalFuncs.to_chat( typeof(Game13), "<B>A secret has been activated by " + Task13.User.key + "!</B>" );
									}
								}
							} else if ( Lang13.Bool( href_list["secretscoder"] ) ) {
								
								if ( !GlobalFuncs.check_rights( 32 ) ) {
									return null;
								}

								dynamic _ef = href_list["secretscoder"]; // Was a switch-case, sorry for the mess.
								if ( _ef=="spawn_objects" ) {
									dat11 = "<B>Admin Log<HR></B>";

									foreach (dynamic _ec in Lang13.Enumerate( GlobalVars.admin_log )) {
										l2 = _ec;
										
										dat11 += "<li>" + l2 + "</li>";
									}

									if ( !( GlobalVars.admin_log.len != 0 ) ) {
										dat11 += "No-one has done anything this round!";
									}
									Interface13.Browse( Task13.User, dat11, "window=admin_log" );
								} else if ( _ef=="maint_access_brig" ) {
									
									foreach (dynamic _ed in Lang13.Enumerate( GlobalVars.all_doors, typeof(Obj_Machinery_Door_Airlock_Maintenance) )) {
										M42 = _ed;
										
										Interface13.Stat( null, M42.req_access.Contains( GlobalVars.access_maint_tunnels ) );

										if ( M42 is Obj_Machinery_Door_Airlock_Maintenance ) {
											M42.req_access = new ByTable(new object [] { GlobalVars.access_brig });
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made all maint doors brig access-only." );
								} else if ( _ef=="maint_access_engiebrig" ) {
									
									foreach (dynamic _ee in Lang13.Enumerate( GlobalVars.all_doors, typeof(Obj_Machinery_Door_Airlock_Maintenance) )) {
										M43 = _ee;
										
										Interface13.Stat( null, M43.req_access.Contains( GlobalVars.access_maint_tunnels ) );

										if ( M43 is Obj_Machinery_Door_Airlock_Maintenance ) {
											M43.req_access = new ByTable();
											M43.req_one_access = new ByTable(new object [] { GlobalVars.access_brig, GlobalVars.access_engine });
										}
									}
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " made all maint doors engineering and brig access-only." );
								} else if ( _ef=="infinite_sec" ) {
									J = GlobalVars.job_master.GetJob( "Security Officer" );

									if ( !( J != null ) ) {
										return null;
									}
									J.total_positions = -1;
									J.spawn_positions = -1;
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has removed the cap on security officers." );
								} else if ( _ef=="virus_custom" ) {
									
									if ( GlobalFuncs.virus2_make_custom( Task13.User.client ) ) {
										GlobalFuncs.feedback_add_details( "admin_secrets_fun_used", "V_C" );
										GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has trigger a custom virus outbreak." );
									}
								}
							} else if ( Lang13.Bool( href_list["ac_view_wanted"] ) ) {
								this.admincaster_screen = 18;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_set_channel_name"] ) ) {
								this.admincaster_feed_channel.channel_name = GlobalFuncs.strip_html_simple( Interface13.Input( Task13.User, "Provide a Feed Channel Name", "Network Channel Handler", "", null, InputType.Any ) );

								while (String13.FindIgnoreCase( this.admincaster_feed_channel.channel_name, " ", 1, 0 ) == 1) {
									this.admincaster_feed_channel.channel_name = String13.SubStr( this.admincaster_feed_channel.channel_name, 2, Lang13.Length( this.admincaster_feed_channel.channel_name ) + 1 );
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_set_channel_lock"] ) ) {
								this.admincaster_feed_channel.locked = !Lang13.Bool( this.admincaster_feed_channel.locked );
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_submit_new_channel"] ) ) {
								check = false;

								foreach (dynamic _eg in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
									FC = _eg;
									

									if ( FC.channel_name == this.admincaster_feed_channel.channel_name ) {
										check = true;
										break;
									}
								}

								if ( this.admincaster_feed_channel.channel_name == "" || this.admincaster_feed_channel.channel_name == "[REDACTED]" || check ) {
									this.admincaster_screen = 7;
								} else {
									choice15 = Interface13.Alert( "Please confirm Feed channel creation", "Network Channel Handler", "Confirm", "Cancel" );

									if ( choice15 == "Confirm" ) {
										newChannel = new FeedChannel();
										newChannel.channel_name = this.admincaster_feed_channel.channel_name;
										newChannel.author = this.admincaster_signature;
										newChannel.locked = Lang13.Bool( this.admincaster_feed_channel.locked );
										newChannel.is_admin_channel = true;
										GlobalFuncs.feedback_inc( "newscaster_channels", 1 );
										GlobalVars.news_network.network_channels.Add( newChannel );
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " created command feed channel: " + this.admincaster_feed_channel.channel_name + "!" );
										this.admincaster_screen = 5;
									}
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_set_channel_receiving"] ) ) {
								available_channels = new ByTable();

								foreach (dynamic _eh in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
									F4 = _eh;
									
									available_channels.Add( F4.channel_name );
								}
								this.admincaster_feed_channel.channel_name = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Choose receiving Feed Channel", "Network Channel Handler", null, available_channels, InputType.Any ) );
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_set_new_message"] ) ) {
								this.admincaster_feed_message.body = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Write your Feed story", "Network Channel Handler", "", null, InputType.Any ) );

								while (String13.FindIgnoreCase( this.admincaster_feed_message.body, " ", 1, 0 ) == 1) {
									this.admincaster_feed_message.body = String13.SubStr( this.admincaster_feed_message.body, 2, Lang13.Length( this.admincaster_feed_message.body ) + 1 );
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_submit_new_message"] ) ) {
								
								if ( this.admincaster_feed_message.body == "" || this.admincaster_feed_message.body == "[REDACTED]" || this.admincaster_feed_channel.channel_name == "" ) {
									this.admincaster_screen = 6;
								} else {
									newMsg = new FeedMessage();
									newMsg.author = this.admincaster_signature;
									newMsg.body = this.admincaster_feed_message.body;
									newMsg.is_admin_message = true;
									GlobalFuncs.feedback_inc( "newscaster_stories", 1 );

									foreach (dynamic _ei in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
										FC2 = _ei;
										

										if ( FC2.channel_name == this.admincaster_feed_channel.channel_name ) {
											FC2.messages.Add( newMsg );
											break;
										}
									}
									this.admincaster_screen = 4;
								}

								foreach (dynamic _ej in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
									NEWSCASTER = _ej;
									
									NEWSCASTER.newsAlert( this.admincaster_feed_channel.channel_name );
								}
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " submitted a feed story to channel: " + this.admincaster_feed_channel.channel_name + "!" );
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_create_channel"] ) ) {
								this.admincaster_screen = 2;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_create_feed_story"] ) ) {
								this.admincaster_screen = 3;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_menu_censor_story"] ) ) {
								this.admincaster_screen = 10;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_menu_censor_channel"] ) ) {
								this.admincaster_screen = 11;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_menu_wanted"] ) ) {
								already_wanted = false;

								if ( GlobalVars.news_network.wanted_issue != null ) {
									already_wanted = true;
								}

								if ( already_wanted ) {
									this.admincaster_feed_message.author = GlobalVars.news_network.wanted_issue.author;
									this.admincaster_feed_message.body = GlobalVars.news_network.wanted_issue.body;
								}
								this.admincaster_screen = 14;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_set_wanted_name"] ) ) {
								this.admincaster_feed_message.author = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Provide the name of the Wanted person", "Network Security Handler", "", null, InputType.Any ) );

								while (String13.FindIgnoreCase( this.admincaster_feed_message.author, " ", 1, 0 ) == 1) {
									this.admincaster_feed_message.author = String13.SubStr( this.admincaster_feed_message.author, 2, Lang13.Length( this.admincaster_feed_message.author ) + 1 );
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_set_wanted_desc"] ) ) {
								this.admincaster_feed_message.body = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Provide the a description of the Wanted person and any other details you deem important", "Network Security Handler", "", null, InputType.Any ) );

								while (String13.FindIgnoreCase( this.admincaster_feed_message.body, " ", 1, 0 ) == 1) {
									this.admincaster_feed_message.body = String13.SubStr( this.admincaster_feed_message.body, 2, Lang13.Length( this.admincaster_feed_message.body ) + 1 );
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_submit_wanted"] ) ) {
								input_param = String13.ParseNumber( href_list["ac_submit_wanted"] );

								if ( this.admincaster_feed_message.author == "" || this.admincaster_feed_message.body == "" ) {
									this.admincaster_screen = 16;
								} else {
									choice16 = Interface13.Alert( "Please confirm Wanted Issue " + ( input_param == 1 ? "creation." : "edit." ), "Network Security Handler", "Confirm", "Cancel" );

									if ( choice16 == "Confirm" ) {
										
										if ( input_param == 1 ) {
											WANTED = new FeedMessage();
											WANTED.author = this.admincaster_feed_message.author;
											WANTED.body = this.admincaster_feed_message.body;
											WANTED.backup_author = this.admincaster_signature;
											WANTED.is_admin_message = true;
											GlobalVars.news_network.wanted_issue = WANTED;

											foreach (dynamic _ek in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
												NEWSCASTER2 = _ek;
												
												NEWSCASTER2.newsAlert();
												NEWSCASTER2.update_icon();
											}
											this.admincaster_screen = 15;
										} else {
											GlobalVars.news_network.wanted_issue.author = this.admincaster_feed_message.author;
											GlobalVars.news_network.wanted_issue.body = this.admincaster_feed_message.body;
											GlobalVars.news_network.wanted_issue.backup_author = this.admincaster_feed_message.backup_author;
											this.admincaster_screen = 19;
										}
										GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " issued a Station-wide Wanted Notification for " + this.admincaster_feed_message.author + "!" );
									}
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_cancel_wanted"] ) ) {
								choice17 = Interface13.Alert( "Please confirm Wanted Issue removal", "Network Security Handler", "Confirm", "Cancel" );

								if ( choice17 == "Confirm" ) {
									GlobalVars.news_network.wanted_issue = null;

									foreach (dynamic _el in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
										NEWSCASTER3 = _el;
										
										NEWSCASTER3.update_icon();
									}
									this.admincaster_screen = 17;
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_censor_channel_author"] ) ) {
								FC3 = Lang13.FindObj( href_list["ac_censor_channel_author"] );

								if ( FC3.author != "<B>[REDACTED]</B>" ) {
									FC3.backup_author = FC3.author;
									FC3.author = "<B>[REDACTED]</B>";
								} else {
									FC3.author = FC3.backup_author;
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_censor_channel_story_author"] ) ) {
								MSG = Lang13.FindObj( href_list["ac_censor_channel_story_author"] );

								if ( MSG.author != "<B>[REDACTED]</B>" ) {
									MSG.backup_author = MSG.author;
									MSG.author = "<B>[REDACTED]</B>";
								} else {
									MSG.author = MSG.backup_author;
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_censor_channel_story_body"] ) ) {
								MSG2 = Lang13.FindObj( href_list["ac_censor_channel_story_body"] );

								if ( MSG2.body != "<B>[REDACTED]</B>" ) {
									MSG2.backup_body = MSG2.body;
									MSG2.body = "<B>[REDACTED]</B>";
								} else {
									MSG2.body = MSG2.backup_body;
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_pick_d_notice"] ) ) {
								FC4 = Lang13.FindObj( href_list["ac_pick_d_notice"] );
								this.admincaster_feed_channel = FC4;
								this.admincaster_screen = 13;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_toggle_d_notice"] ) ) {
								FC5 = Lang13.FindObj( href_list["ac_toggle_d_notice"] );
								FC5.censored = !FC5.censored;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_view"] ) ) {
								this.admincaster_screen = 1;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_setScreen"] ) ) {
								this.admincaster_screen = String13.ParseNumber( href_list["ac_setScreen"] );

								if ( this.admincaster_screen == 0 ) {
									
									if ( Lang13.Bool( this.admincaster_feed_channel ) ) {
										this.admincaster_feed_channel = new FeedChannel();
									}

									if ( this.admincaster_feed_message != null ) {
										this.admincaster_feed_message = new FeedMessage();
									}
								}
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_show_channel"] ) ) {
								FC6 = Lang13.FindObj( href_list["ac_show_channel"] );
								this.admincaster_feed_channel = FC6;
								this.admincaster_screen = 9;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_pick_censor_channel"] ) ) {
								FC7 = Lang13.FindObj( href_list["ac_pick_censor_channel"] );
								this.admincaster_feed_channel = FC7;
								this.admincaster_screen = 12;
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_refresh"] ) ) {
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["ac_set_signature"] ) ) {
								this.admincaster_signature = GlobalFuncs.adminscrub( Interface13.Input( Task13.User, "Provide your desired signature", "Network Identity Handler", "", null, InputType.Any ) );
								this.access_news_network();
							} else if ( Lang13.Bool( href_list["populate_inactive_customitems"] ) ) {
								
								if ( GlobalFuncs.check_rights( 18 ) ) {
									GlobalFuncs.populate_inactive_customitems_list( this.owner );
								}
							} else if ( Lang13.Bool( href_list["vsc"] ) ) {
								
								if ( GlobalFuncs.check_rights( 18 ) ) {
									
									if ( href_list["vsc"] == "airflow" ) {
										GlobalVars.zas_settings.ChangeSettingsDialog( Task13.User );
									}

									if ( href_list["vsc"] == "default" ) {
										GlobalVars.zas_settings.SetDefault( Task13.User );
									}
								}
							} else if ( Lang13.Bool( href_list["toglang"] ) ) {
								
								if ( GlobalFuncs.check_rights( 4096 ) ) {
									M44 = Lang13.FindObj( href_list["toglang"] );

									if ( !( M44 is Mob ) ) {
										GlobalFuncs.to_chat( Task13.User, "" + M44 + " is illegal type, must be /mob!" );
										return null;
									}
									lang2toggle = href_list["lang"];
									L5 = GlobalVars.all_languages[lang2toggle];
									Interface13.Stat( null, M44.languages.Contains( L5 ) );

									if ( !( M44 is Mob ) ) {
										
										if ( !Lang13.Bool( ((Mob)M44).remove_language( lang2toggle ) ) ) {
											GlobalFuncs.to_chat( Task13.User, new Txt( "Failed to remove language '" ).item( lang2toggle ).str( "' from " ).the( M44 ).item().str( "!" ).ToString() );
										}
									} else if ( !((Mob)M44).add_language( lang2toggle ) ) {
										GlobalFuncs.to_chat( Task13.User, new Txt( "Failed to add language '" ).item( lang2toggle ).str( "' from " ).the( M44 ).item().str( "!" ).ToString() );
									}
									this.show_player_panel( M44 );
								}
							}
						}
					}
				}
			}

			if ( Lang13.Bool( href_list["add_player_info"] ) ) {
				key4 = href_list["add_player_info"];
				add = Interface13.Input( "Add Player Info", null, null, null, null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( add ) ) {
					return null;
				}
				GlobalFuncs.notes_add( key4, add, Task13.User );
				this.show_player_info( key4 );
			}

			if ( Lang13.Bool( href_list["remove_player_info"] ) ) {
				key5 = href_list["remove_player_info"];
				index = String13.ParseNumber( href_list["remove_index"] );
				GlobalFuncs.notes_del( key5, index );
				this.show_player_info( key5 );
			}

			if ( Lang13.Bool( href_list["notes"] ) ) {
				ckey = href_list["ckey"];

				if ( !Lang13.Bool( ckey ) ) {
					M45 = Lang13.FindObj( href_list["mob"] );

					if ( M45 is Mob ) {
						ckey = M45.ckey;
					}
				}

				dynamic _em = href_list["notes"]; // Was a switch-case, sorry for the mess.
				if ( _em=="show" ) {
					this.show_player_info( ckey );
				} else if ( _em=="list" ) {
					this.PlayerNotesPage( String13.ParseNumber( href_list["index"] ) );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["shuttle_select"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "SS" );
				S6 = GlobalFuncs.select_shuttle_from_all( Task13.User, "Please select a shuttle", "Admin abuse" );

				if ( S6 is Shuttle ) {
					this.selected_shuttle = S6;
					GlobalFuncs.to_chat( Task13.User, "" + S6 + " (" + S6.type + ") selected!" );
				}
				this.shuttle_magic();
			}

			if ( Lang13.Bool( href_list["shuttle_add_docking_port"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "CD" );
				A4 = GlobalFuncs.get_area( GlobalFuncs.get_turf( Task13.User ) );
				shuttle_to_add_to = ((Zone)A4).get_shuttle();

				if ( shuttle_to_add_to is Shuttle ) {
					
					if ( Interface13.Alert( Task13.User, "Would you like the new shuttle docking port to be assigned to " + shuttle_to_add_to.name + "? " + ( shuttle_to_add_to.linked_port != null ? "NOTE: It already has a shuttle docking port." : "" ), "Admin abuse", "Yes", "No" ) != "Yes" ) {
						shuttle_to_add_to = null;
					}
				}
				D3 = new Obj_Structure_DockingPort_Shuttle( GlobalFuncs.get_turf( Task13.User ) );
				D3.dir = Task13.User.dir;

				if ( shuttle_to_add_to is Shuttle ) {
					D3.link_to_shuttle( shuttle_to_add_to );
					GlobalFuncs.to_chat( Task13.User, "Assigned the " + D3 + " to " + shuttle_to_add_to.name );
				}
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new shuttle docking port in " + GlobalFuncs.get_area( D3 ) + " " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( D3 ) ) + ( Lang13.Bool( shuttle_to_add_to ) ? " and assigned it to " + shuttle_to_add_to.name : "" ) + "</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new destination docking port (" + D3.areaname + ") at " + D3.x + ";" + D3.y + ";" + D3.z + ( Lang13.Bool( shuttle_to_add_to ) ? " and assigned it to " + shuttle_to_add_to.name : "" ) );
			}

			if ( Lang13.Bool( href_list["shuttle_create_destination"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "DC" );
				A5 = GlobalFuncs.get_area( GlobalFuncs.get_turf( Task13.User ) );
				name = Interface13.Input( Task13.User, "What would you like to name this docking port?", "Admin abuse", "" + ( Lang13.Bool( A5 ) ? "" + A5.name : "Space " + Rand13.Int( 100, 999 ) ), null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( name ) ) {
					return null;
				}
				D4 = new Obj_Structure_DockingPort_Destination( GlobalFuncs.get_turf( Task13.User ) );
				D4.dir = Task13.User.dir;
				D4.areaname = name;
				A5 = GlobalFuncs.get_area( D4 );

				if ( Lang13.Bool( A5 ) ) {
					S7 = ((Zone)A5).get_shuttle();

					if ( Lang13.Bool( S7 ) ) {
						
						if ( Interface13.Alert( Task13.User, "Would you like the new docking port to be a part of " + S7.name + " (" + S7.type + ")? Any shuttles docked to it will be moved together with " + S7.name + ".", "Admin abuse", "Yes", "No" ) == "Yes" ) {
							
							if ( GlobalFuncs.get_area( D4 ) == A5 ) {
								S7.docking_ports_aboard.Or( D4 );
								GlobalFuncs.to_chat( Task13.User, "" + D4 + " is now considered a part of " + S7.name + " (" + S7.type + ")." );
							}
						}
					}
				}

				if ( this.selected_shuttle is Shuttle ) {
					
					if ( Interface13.Alert( Task13.User, "Would you like to add " + D4.areaname + " to the list of " + ((dynamic)this.selected_shuttle).name + "'s destinations?", "Admin abuse", "Yes", "No" ) == "Yes" ) {
						((dynamic)this.selected_shuttle).docking_ports |= D4;
						GlobalFuncs.to_chat( Task13.User, "Added " + D4 + " to the list of " + ((dynamic)this.selected_shuttle).name + "'s destinations" );
					}
				}
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new destination docking port (" + D4.areaname + ") in " + GlobalFuncs.get_area( D4 ) + " " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( D4 ) ) + "</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new destination docking port (" + D4.areaname + ") at " + D4.x + ";" + D4.y + ";" + D4.z );
			}

			if ( Lang13.Bool( href_list["shuttle_modify_destination"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "MD" );
				S8 = this.selected_shuttle;

				if ( !( S8 is Shuttle ) ) {
					return null;
				}
				docking_ports_to_pick_from = GlobalVars.all_docking_ports.Copy();
				options = new ByTable();

				foreach (dynamic _en in Lang13.Enumerate( docking_ports_to_pick_from - ((dynamic)S8).docking_ports, typeof(Obj_Structure_DockingPort_Destination) )) {
					D5 = _en;
					
					name2 = D5.areaname;
					options.Add( name2 );
					options[name2] = D5;
				}
				choice18 = options[Interface13.Input( Task13.User, "Select a docking port to add to " + ((dynamic)S8).name, "Admin abuse", null, options, InputType.Any )];

				if ( !( choice18 is Obj_Structure_DockingPort_Destination ) ) {
					return null;
				}
				((dynamic)S8).docking_ports |= choice18;
				GlobalFuncs.to_chat( Task13.User, "Added " + choice18.areaname + " to " + ((dynamic)S8).name + "!" );
			}

			if ( Lang13.Bool( href_list["shuttle_set_transit"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "AT" );
				L6 = new ByTable();

				foreach (dynamic _eo in Lang13.Enumerate( GlobalFuncs.get_turf( Task13.User ), typeof(Obj_Structure_DockingPort_Destination) )) {
					D6 = _eo;
					
					name3 = "" + D6.name + " (" + D6.areaname + ")";
					L6.Add( name3 );
					L6[name3] = D6;
				}

				if ( !( L6.len != 0 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Please stand on the docking port you wish to make a transit area." );
				}
				port_to_link = L6[Interface13.Input( Task13.User, "Select a new transit area for the shuttle", "Admin abuse", null, L6 + new ByTable(new object [] { "Cancel" }), InputType.Null | InputType.Any )];

				if ( !( port_to_link is Obj_Structure_DockingPort ) ) {
					return null;
				}
				shuttle_to_link = this.selected_shuttle;

				if ( !( shuttle_to_link is Shuttle ) ) {
					return null;
				}
				choice19 = Interface13.Input( Task13.User, "Please confirm that you want to make " + port_to_link + " (" + port_to_link.areaname + ") a transit area for " + ((dynamic)shuttle_to_link).name + " (" + shuttle_to_link.type + ")?", "Admin abuse", null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

				if ( choice19 == "Yes" ) {
					((dynamic)shuttle_to_link).set_transit_dock( port_to_link );
				} else {
					return null;
				}
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set a destination docking port (" + port_to_link.areaname + ") at " + port_to_link.x + ";" + port_to_link.y + ";" + port_to_link.z + " to be " + ((dynamic)shuttle_to_link).name + " (" + shuttle_to_link.type + ")'s transit area " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( port_to_link ) ) );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set a destination docking port (" + port_to_link.areaname + ") at " + port_to_link.x + ";" + port_to_link.y + ";" + port_to_link.z + " to be " + ((dynamic)shuttle_to_link).name + " (" + shuttle_to_link.type + ")'s transit area" );
			}

			if ( Lang13.Bool( href_list["shuttle_create_shuttleport"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "SC" );
				D7 = new Obj_Structure_DockingPort_Shuttle( GlobalFuncs.get_turf( Task13.User.loc ) );
				D7.dir = Task13.User.dir;
				A6 = GlobalFuncs.get_area( D7 );
				S9 = ((Zone)A6).get_shuttle();

				if ( Lang13.Bool( S9 ) && !( S9.linked_port != null ) ) {
					
					if ( Interface13.Alert( Task13.User, "Would you like to make " + S9.name + " (" + S9.type + ") use this docking port?", "Admin abuse", "Yes", "No" ) == "Yes" ) {
						
						if ( !Lang13.Bool( S9 ) || S9.linked_port != null ) {
							GlobalFuncs.to_chat( Task13.User, "Either the shuttle was deleted, or somebody already linked a shuttle docking port to it. Sorry!" );
							return null;
						}

						if ( !( D7 != null ) ) {
							return null;
						}
						S9.linked_port = D7;
						GlobalFuncs.to_chat( Task13.User, "The shuttle docking port will now be used by " + S9.name + "!" );
					}
				}
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new shuttle docking port in " + GlobalFuncs.get_area( D7 ) + " " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( D7 ) ) + "</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new shuttle docking port at " + D7.x + ";" + D7.y + ";" + D7.z + "</span>" );
			}

			if ( Lang13.Bool( href_list["shuttle_toggle_lockdown"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "LD" );
				S10 = this.selected_shuttle;

				if ( !( S10 is Shuttle ) ) {
					return null;
				}

				if ( Lang13.Bool( ((dynamic)S10).lockdown ) ) {
					((dynamic)S10).lockdown = 0;
					GlobalFuncs.to_chat( Task13.User, "The lockdown from " + ((dynamic)S10).name + " has been lifted." );
					GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has lifted " + GlobalFuncs.capitalize( ((dynamic)S10).name ) + "'s lockdown.</span>" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has locked " + GlobalFuncs.capitalize( ((dynamic)S10).name ) + " down. " + ( Lang13.Length( ((dynamic)S10).lockdown ) >= 1 ? "Reason: " + ((dynamic)S10).lockdown : "" ) );
				} else {
					((dynamic)S10).lockdown = 1;
					GlobalFuncs.to_chat( Task13.User, "" + ((dynamic)S10).name + " has been locked down." );
					reason11 = Interface13.Input( Task13.User, "Would you like to provide additional information, which will be shown on " + GlobalFuncs.capitalize( ((dynamic)S10).name ) + "'s control consoles?", "Shuttle lockdown", null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

					if ( reason11 == "Yes" ) {
						reason11 = Interface13.Input( Task13.User, "Please type additional information about the lockdown of " + GlobalFuncs.capitalize( ((dynamic)S10).name ) + ".", "Shuttle lockdown", null, null, InputType.Any );

						if ( Lang13.Length( reason11 ) >= 1 ) {
							((dynamic)S10).lockdown = reason11;
						}
					}
					GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has locked " + GlobalFuncs.capitalize( ((dynamic)S10).name ) + " down. " + ( Lang13.Length( ((dynamic)S10).lockdown ) >= 1 ? "Reason: " + ((dynamic)S10).lockdown : "" ) + "</span>" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has locked " + GlobalFuncs.capitalize( ((dynamic)S10).name ) + " down. " + ( Lang13.Length( ((dynamic)S10).lockdown ) >= 1 ? "Reason: " + ((dynamic)S10).lockdown : "" ) );
				}
			}

			if ( Lang13.Bool( href_list["shuttle_move_to"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "MV" );
				S11 = this.selected_shuttle;

				if ( !( S11 is Shuttle ) ) {
					return null;
				}
				possible_ports = new ByTable();

				foreach (dynamic _ep in Lang13.Enumerate( ((dynamic)S11).docking_ports, typeof(Obj_Structure_DockingPort_Destination) )) {
					D8 = _ep;
					
					name4 = D8.areaname;
					possible_ports.Add( name4 );
					possible_ports[name4] = D8;
				}
				choice20 = Interface13.Input( Task13.User, "Select a docking port for " + GlobalFuncs.capitalize( ((dynamic)S11).name ) + " to travel to", "Shuttle movement", null, possible_ports + new ByTable(new object [] { "Cancel" }), InputType.Any );
				target_port = possible_ports[choice20];

				if ( !( target_port != null ) ) {
					return null;
				}
				((dynamic)S11).travel_to( target_port, null, Task13.User );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has moved " + GlobalFuncs.capitalize( ((dynamic)S11).name ) + " to " + target_port.areaname + " (" + target_port.x + ";" + target_port.y + ";" + target_port.z + ")" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has moved " + GlobalFuncs.capitalize( ((dynamic)S11).name ) + " to " + target_port.areaname + " (" + target_port.x + ";" + target_port.y + ";" + target_port.z + ")" );
			}

			if ( Lang13.Bool( href_list["shuttle_edit"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "SE" );
				S12 = this.selected_shuttle;

				if ( !( S12 is Shuttle ) ) {
					return null;
				}
				options2 = new ByTable(new object [] { "Cancel", "cooldown", "pre-flight delay", "transit delay", "use transit", "can link to computer", "innacuracy", "name", "destroy areas", "can rotate" });

				if ( Lang13.Bool( ((dynamic)S12).is_special() ) ) {
					options2.Add( "DEFINED LOCATIONS" );
				}
				choice21 = Interface13.Input( Task13.User, "What to edit in " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + "?", "Shuttle editing", null, options2, InputType.Any );
				new_value = null;

				dynamic _er = choice21; // Was a switch-case, sorry for the mess.
				if ( _er=="cooldown" ) {
					new_value = Interface13.Input( Task13.User, "Input new cooldown for " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + " (in 1/10s of a second)", "Shuttle editing", ((dynamic)S12).cooldown, null, InputType.Num );
					((dynamic)S12).cooldown = new_value;
				} else if ( _er=="pre-flight delay" ) {
					new_value = Interface13.Input( Task13.User, "Input new pre-flight delay for " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + " (in 1/10s of a second)", "Shuttle editing", ((dynamic)S12).pre_flight_delay, null, InputType.Num );
					((dynamic)S12).pre_flight_delay = new_value;
				} else if ( _er=="transit delay" ) {
					new_value = Interface13.Input( Task13.User, "Input new transit delay for " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + " (in 1/10s of a second)", "Shuttle editing", ((dynamic)S12).transit_delay, null, InputType.Num );
					((dynamic)S12).transit_delay = new_value;
				} else if ( _er=="use transit" ) {
					new_value = Interface13.Input( Task13.User, "" + 0 + " -  no transit, " + 1 + " - only across z levels, " + 2 + " - always", "Shuttle editing (" + GlobalFuncs.capitalize( ((dynamic)S12).name ) + ")", ((dynamic)S12).use_transit, null, InputType.Num );
					Interface13.Stat( null, new ByTable(new object [] { 0, 1, 2 }).Contains( new_value ) );

					if ( false ) {
						((dynamic)S12).use_transit = new_value;
					} else {
						GlobalFuncs.to_chat( Task13.User, "Not valid!" );
						return null;
					}
				} else if ( _er=="can link to computer" ) {
					new_value = Interface13.Input( Task13.User, "" + 0 + " - can always link, " + 1 + " - can only link with password (" + ((dynamic)S12).password + "), " + 2 + " - can't link at all", "Shuttle editing (" + GlobalFuncs.capitalize( ((dynamic)S12).name ) + ")", ((dynamic)S12).can_link_to_computer, null, InputType.Num );
					((dynamic)S12).pre_flight_delay = new_value;
				} else if ( _er=="direction" ) {
					new_value = Interface13.Input( Task13.User, "" + GlobalVars.NORTH + " - north, " + GlobalVars.SOUTH + " - south, " + GlobalVars.WEST + " - west, " + GlobalVars.EAST + " - east", "Shuttle editing (" + GlobalFuncs.capitalize( ((dynamic)S12).name ) + ")", ((dynamic)S12).dir, null, InputType.Num );
					Interface13.Stat( null, GlobalVars.cardinal.Contains( new_value ) );

					if ( false ) {
						((dynamic)S12).dir = new_value;
					} else {
						GlobalFuncs.to_chat( Task13.User, "Not valid!" );
						return null;
					}
				} else if ( _er=="innacuracy" ) {
					new_value = Interface13.Input( Task13.User, "Input new innacuracy value for " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + " (when a shuttle moves, its final location is randomly offset by this value)", "Shuttle editing", ((dynamic)S12).innacuracy, null, InputType.Num );
					((dynamic)S12).innacuracy = new_value;
				} else if ( _er=="name" ) {
					new_value = Interface13.Input( Task13.User, "Input new name for " + GlobalFuncs.capitalize( ((dynamic)S12).name ), "Shuttle editing", ((dynamic)S12).innacuracy, null, InputType.Str );
					((dynamic)S12).name = new_value;
				} else if ( _er=="can rotate" ) {
					new_value = Interface13.Input( Task13.User, "0 - rotation disabled, 1 - rotation enabled", "Shuttle editing", ((dynamic)S12).can_rotate, null, InputType.Num );
					((dynamic)S12).can_rotate = new_value;
				} else if ( _er=="DEFINED LOCATIONS" ) {
					GlobalFuncs.to_chat( Task13.User, "To prevent accidental mistakes, you can only set these locations to docking ports in the shuttle's memory (use the \"Add a destination docking port to a shuttle\" command)" );
					locations = new ByTable(new object [] { "--Cancel--" });

					switch ((Type)( S12.type )) {
						case typeof(Shuttle_Vox):
							locations.Add( new ByTable().Set( "Vox home (MOVING TO IT WILL END THE ROUND)", "dock_home" ) );
							break;
						case typeof(Shuttle_Escape):
							locations.Add( new ByTable().Set( "Escape shuttle home", "dock_station" ).Set( "Escape shuttle centcom", "dock_centcom" ) );
							break;
						case typeof(Shuttle_Taxi):
							locations.Add( new ByTable()
								.Set( "Taxi medbay silicon", "dock_medical_silicon" )
								.Set( "Taxi engineering cargo", "dock_engineering_cargo" )
								.Set( "Taxi security science", "dock_security_science" )
								.Set( "Taxi abandoned station", "dock_abandoned" )
							 );
							break;
						case typeof(Shuttle_Supply):
							locations.Add( new ByTable().Set( "Centcom loading bay", "dock_centcom" ).Set( "Station cargo bay", "dock_station" ) );
							break;
					}
					choice22 = Interface13.Input( Task13.User, "Select a location to modify", "Shuttle editing", null, locations, InputType.Any );
					variable_to_edit = locations[choice22];
					D9 = GlobalFuncs.select_port_from_list( Task13.User, "Select a new " + choice22 + " location for " + ((dynamic)S12).name + " (" + S12.type + ")", "Shuttle editing", ((dynamic)S12).docking_ports );

					if ( D9 is Obj_Structure_DockingPort_Destination ) {
						S12.vars[variable_to_edit] = D9;
						GlobalFuncs.to_chat( Task13.User, "" + ((dynamic)S12).name + "'s " + variable_to_edit + " has been changed to " + D9.areaname );
						GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has changed " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + "'s " + choice22 + " to " + D9.areaname + "!</span>" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has changed " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + "'s " + choice22 + " to " + D9.areaname + "!" );
					} else {
						return null;
					}
				}
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has set " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + "'s " + choice21 + " to " + new_value + "!</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set " + GlobalFuncs.capitalize( ((dynamic)S12).name ) + "'s " + choice21 + " to " + new_value + "!" );
				this.shuttle_magic();
			}

			if ( Lang13.Bool( href_list["shuttle_delete"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "DEL" );
				S13 = this.selected_shuttle;

				if ( !( S13 is Shuttle ) ) {
					return null;
				}
				killed_objs = false;

				if ( Interface13.Input( Task13.User, "Please type \"Yes\" to confirm that you want to delete " + GlobalFuncs.capitalize( S13 ) + ". This process can't be reverted!", "Shuttle deletion", "No", null, InputType.Str ) != "Yes" ) {
					return null;
				}

				if ( Lang13.Bool( ((dynamic)S13).is_special() ) ) {
					GlobalFuncs.to_chat( Task13.User, "This shuttle can't be deleted. Use the lockdown function instead." );
					return null;
				}
				choice23 = Interface13.Input( Task13.User, "Would you like to delete all turfs and objects in the shuttle's current area? Mobs will not be affected.", null, null, new ByTable(new object [] { "Yes", "No", "Cancel" }), InputType.Any );

				if ( choice23 == "Cancel" ) {
					return null;
				} else if ( choice23 == "Yes" ) {
					killed_objs = true;
				}

				if ( Lang13.Bool( ((dynamic)S13).linked_area ) ) {
					
					if ( killed_objs ) {
						
						foreach (dynamic _es in Lang13.Enumerate( ((dynamic)S13).linked_area )) {
							T6 = _es;
							

							if ( T6 is Tile_Simulated ) {
								GlobalFuncs.qdel( T6 );
							}
						}

						foreach (dynamic _et in Lang13.Enumerate( ((dynamic)S13).linked_area, typeof(Obj) )) {
							O12 = _et;
							

							if ( O12 is Obj_Item || O12 is Obj_Machinery || O12 is Obj_Structure ) {
								GlobalFuncs.qdel( O12 );
							}
						}
						GlobalFuncs.to_chat( Task13.User, "All turfs and objects deleted from " + ((dynamic)S13).linked_area + "." );
					}
				}
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has deleted " + GlobalFuncs.capitalize( ((dynamic)S13).name ) + " (" + S13.type + "). Objects and turfs " + ( killed_objs ? "deleted" : "not deleted" ) + ".</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + "  has deleted " + GlobalFuncs.capitalize( ((dynamic)S13).name ) + "! Objects and turfs " + ( killed_objs ? "deleted" : "not deleted" ) + "." );
				GlobalFuncs.qdel( S13 );
				this.selected_shuttle = null;
				this.shuttle_magic();
			}

			if ( Lang13.Bool( href_list["shuttle_teleport_to"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "TP" );
				S14 = this.selected_shuttle;

				if ( !( S14 is Shuttle ) ) {
					return null;
				}

				if ( !Lang13.Bool( ((dynamic)S14).linked_area ) || !( ((dynamic)S14).linked_area is Zone ) ) {
					GlobalFuncs.to_chat( Task13.User, "The shuttle is in the middle of nowhere! (The 'linked_area' variable is either null or not an area, please report this)" );
					return null;
				}
				T7 = Lang13.FindIn( typeof(Tile), ((dynamic)S14).linked_area );
				Task13.User.forceMove( T7 );
				GlobalFuncs.to_chat( Task13.User, "You have teleported to " + GlobalFuncs.capitalize( ((dynamic)S14).name ) );
			}

			if ( Lang13.Bool( href_list["shuttle_teleport_to_dock"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "TP2" );
				destinations = new ByTable();

				foreach (dynamic _eu in Lang13.Enumerate( GlobalVars.all_docking_ports, typeof(Obj_Structure_DockingPort_Destination) )) {
					D10 = _eu;
					
					name5 = "" + D10.areaname + ( Lang13.Bool( D10.docked_with ) ? " (docked to " + D10.docked_with.areaname + ")" : "" );
					destinations.Add( name5 );
					destinations[name5] = D10;
				}
				choice24 = Interface13.Input( Task13.User, "Select a docking port to teleport to", "Finding a docking port", null, destinations, InputType.Any );
				target2 = destinations[choice24];

				if ( !Lang13.Bool( target2 ) ) {
					return null;
				}
				Task13.User.forceMove( GlobalFuncs.get_turf( target2 ) );
				GlobalFuncs.to_chat( Task13.User, "You have teleported to " + choice24 );
			}

			if ( Lang13.Bool( href_list["shuttle_get_console"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "GC" );
				S15 = this.selected_shuttle;

				if ( !( S15 is Shuttle ) ) {
					return null;
				}

				if ( !( ((dynamic)S15).control_consoles.len != 0 ) ) {
					choice25 = Interface13.Input( Task13.User, "There is no control console linked to " + GlobalFuncs.capitalize( ((dynamic)S15).name ) + ". Would you like to create one at your current location?", "Shuttle control access", null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

					if ( choice25 == "Yes" ) {
						usr_loc = GlobalFuncs.get_turf( Task13.User );
						C5 = new Obj_Machinery_Computer_ShuttleControl( usr_loc );

						if ( C5 != null ) {
							C5.link_to( S15 );
							GlobalFuncs.to_chat( Task13.User, "A new shuttle control console has been created." );
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has created a new shuttle control console connected to " + GlobalFuncs.capitalize( ((dynamic)S15).name ) + " in " + GlobalFuncs.get_area( usr_loc ) + "." );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has created a new shuttle control console connected to " + GlobalFuncs.capitalize( ((dynamic)S15).name ) + " in " + GlobalFuncs.get_area( usr_loc ) + "." );
						}
					} else {
						return null;
					}
				} else {
					C6 = Rand13.PickFromTable( ((dynamic)S15).control_consoles );

					if ( Lang13.Bool( C6 ) ) {
						Task13.User.loc = C6.loc;
					}
				}
			}

			if ( Lang13.Bool( href_list["shuttle_shuttlify"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "SHH" );
				A7 = GlobalFuncs.get_area( Task13.User );

				if ( !Lang13.Bool( A7 ) ) {
					GlobalFuncs.to_chat( Task13.User, "You must be standing on an area!" );
					return null;
				}

				if ( A7.type == typeof(Zone) ) {
					GlobalFuncs.to_chat( Task13.User, "You can't turn space into a shuttle." );
					return null;
				}
				conflict = ((Zone)A7).get_shuttle();

				if ( Lang13.Bool( conflict ) ) {
					choice26 = Interface13.Input( Task13.User, "This area is already used by " + conflict + ". Type \"Yes\" to continue and bring on the unintended features", "Shuttlify", "NO", null, InputType.Str );

					if ( choice26 != "Yes" ) {
						return null;
					}
				}

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_DockingPort_Shuttle), A7 ) ) ) {
					GlobalFuncs.to_chat( Task13.User, "Please create a shuttle docking port (/obj/structure/docking_port/shuttle) in this area!" );
					return null;
				}
				name6 = Interface13.Input( Task13.User, "Please name the new shuttle", "Shuttlify", A7.name, null, InputType.Str | InputType.Null );

				if ( !Lang13.Bool( name6 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Shuttlifying cancelled." );
					return null;
				}
				S16 = new Shuttle_Custom( A7 );
				S16.initialize();
				S16.name = name6;
				GlobalFuncs.to_chat( Task13.User, "Shuttle created!" );
				this.selected_shuttle = S16;
				this.shuttle_magic();
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has turned " + A7.name + " into a shuttle named " + S16.name + ". " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( Task13.User ) ) + "</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + "  has turned " + A7.name + " into a shuttle named " + S16.name + "." );
			}

			if ( Lang13.Bool( href_list["shuttle_forcemove"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "FM" );
				L7 = new ByTable(new object [] { "Cancel", "YOUR CURRENT LOCATION" });
				S17 = this.selected_shuttle;

				if ( !( S17 is Shuttle ) ) {
					return null;
				}

				foreach (dynamic _ev in Lang13.Enumerate( ((dynamic)S17).docking_ports, typeof(Obj_Structure_DockingPort_Destination) )) {
					D11 = _ev;
					
					name7 = "" + D11.name + " " + D11.areaname;
					L7.Add( name7 );
					L7[name7] = D11;
				}
				L7.Add( "---other destinations---" );

				foreach (dynamic _ew in Lang13.Enumerate( GlobalVars.all_docking_ports - ((dynamic)S17).docking_ports, typeof(Obj_Structure_DockingPort_Destination) )) {
					D12 = _ew;
					
					name8 = D12.areaname;
					L7.Add( name8 );
					L7[name8] = D12;
				}
				choice27 = Interface13.Input( Task13.User, "Select a location to teleport " + ((dynamic)S17).name + " to!", "Shuttle teleporting", null, L7, InputType.Any );

				if ( choice27 == "YOUR CURRENT LOCATION" ) {
					A8 = GlobalFuncs.get_area( Task13.User );
					T8 = GlobalFuncs.get_turf( Task13.User );

					if ( !Lang13.Bool( A8 ) ) {
						return null;
					}

					if ( !Lang13.Bool( T8 ) ) {
						return null;
					}
					temp9 = new Obj_Structure_DockingPort_Destination( T8 );
					temp9.invisibility = 101;
					temp9.areaname = A8.name;
					temp9.dir = Task13.User.dir;
					((dynamic)S17).move_to_dock( temp9 );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has teleported " + GlobalFuncs.capitalize( ((dynamic)S17).name ) + " to himself (" + A8.name + ", " + temp9.x + ";" + temp9.y + ";" + temp9.z + ")!" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has teleported " + GlobalFuncs.capitalize( ((dynamic)S17).name ) + " to himself by (" + A8.name + ", " + temp9.x + ";" + temp9.y + ";" + temp9.z + ")" );
					GlobalFuncs.qdel( temp9 );
					return null;
				} else {
					D13 = L7[choice27];

					if ( !( D13 != null ) ) {
						return null;
					}
					((dynamic)S17).move_to_dock( D13 );
					GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has teleported " + GlobalFuncs.capitalize( ((dynamic)S17).name ) + " to " + choice27 + " (" + D13.x + ";" + D13.y + ";" + D13.z + ")</span>" );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has teleported " + GlobalFuncs.capitalize( ((dynamic)S17).name ) + " to " + choice27 + " (" + D13.x + ";" + D13.y + ";" + D13.z + ")" );
					return null;
				}
			}

			if ( Lang13.Bool( href_list["shuttle_reset"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "SR" );
				S18 = this.selected_shuttle;

				if ( !( S18 is Shuttle ) ) {
					return null;
				}

				if ( Interface13.Alert( Task13.User, "ARE YOU SURE YOU WANT TO RESET " + ((dynamic)S18).name + " (" + S18.type + ")?", "HELP", "Yes", "No" ) == "No" ) {
					return null;
				}
				((dynamic)S18).name = Lang13.Initial( S18, "name" );
				((dynamic)S18).cooldown = Lang13.Initial( S18, "cooldown" );
				((dynamic)S18).innacuracy = Lang13.Initial( S18, "innacuracy" );
				((dynamic)S18).transit_delay = Lang13.Initial( S18, "transit_delay" );
				((dynamic)S18).pre_flight_delay = Lang13.Initial( S18, "pre_flight_delay" );
				((dynamic)S18).use_transit = Lang13.Initial( S18, "use_transit" );
				((dynamic)S18).dir = Lang13.Initial( S18, "dir" );
				((dynamic)S18).initialize();
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has reset " + GlobalFuncs.capitalize( ((dynamic)S18).name ) + "'s variables" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has reset " + GlobalFuncs.capitalize( ((dynamic)S18).name ) + "'s variables" );
			}

			if ( Lang13.Bool( href_list["shuttle_supercharge"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "SUP" );
				S19 = this.selected_shuttle;

				if ( !( S19 is Shuttle ) ) {
					return null;
				}
				((dynamic)S19).supercharge();
			}

			if ( Lang13.Bool( href_list["shuttle_mass_lockdown"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "ML" );

				if ( !( Interface13.Input( Task13.User, "Please type \"Yes\" to confirm that you want to lockdown all shuttles.", "IS IT LOOSE?", "NO", null, InputType.Any ) == "Yes" ) ) {
					return null;
				}

				foreach (dynamic _ex in Lang13.Enumerate( GlobalVars.shuttles, typeof(Shuttle) )) {
					S20 = _ex;
					
					S20.lockdown = 1;
				}
				GlobalFuncs.to_chat( Task13.User, "All shuttles were locked down." );
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has locked all shuttles down!</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has locked all shuttles down!" );
			}

			if ( Lang13.Bool( href_list["shuttle_show_overlay"] ) ) {
				GlobalFuncs.feedback_inc( "admin_shuttle_magic_used", 1 );
				GlobalFuncs.feedback_add_details( "admin_shuttle_magic_used", "SO" );
				S21 = this.selected_shuttle;

				if ( !( S21 is Shuttle ) ) {
					return null;
				}

				if ( !Lang13.Bool( ((dynamic)S21).linked_port ) ) {
					GlobalFuncs.to_chat( Task13.User, "The shuttle must have a shuttle docking port!" );
					return null;
				}

				if ( Task13.User.dir != Convert.ToInt32( ((dynamic)S21).dir ) ) {
					GlobalFuncs.to_chat( Task13.User, "WARNING: You're not facing " + GlobalFuncs.dir2text( ((dynamic)S21).dir ) + "! The result may be <i>slightly</i> innacurate." );
				}
				((dynamic)S21).show_outline( Task13.User );
			}
			return null;
		}

		// Function from file: one_click_antag.dm
		public Mob_Living_Carbon_Human create_vox_raider( Obj_Effect_Landmark spawn_location = null, bool? leader_chosen = null ) {
			leader_chosen = leader_chosen ?? false;

			Mob_Living_Carbon_Human new_vox = null;

			new_vox = new Mob_Living_Carbon_Human( spawn_location.loc );
			new_vox.setGender( Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE }) );
			new_vox.h_style = "Short Vox Quills";
			new_vox.regenerate_icons();
			new_vox.age = Rand13.Int( 12, 20 );
			new_vox.dna.ready_dna( new_vox );
			new_vox.dna.mutantrace = "vox";
			new_vox.set_species( "Vox" );
			new_vox.generate_name();
			new_vox.mind_initialize();
			new_vox.mind.assigned_role = "MODE";
			new_vox.mind.special_role = "Vox Raider";
			new_vox.mutations.Or( 8 );
			GlobalVars.ticker.mode.traitors.Add( new_vox.mind );
			new_vox.equip_vox_raider();
			return new_vox;
		}

		// Function from file: one_click_antag.dm
		public bool makeVoxRaiders(  ) {
			ByTable candidates = null;
			dynamic theghost = null;
			string input = null;
			bool? leader_chosen = null;
			Mob_Dead_Observer G = null;
			Mob_Dead_Observer G2 = null;
			int max_raiders = 0;
			int raiders = 0;
			Obj_Effect_Landmark L = null;
			Mob_Living_Carbon_Human new_vox = null;

			candidates = new ByTable();
			theghost = null;
			input = "Disregard shinies, acquire hardware.";
			leader_chosen = false;

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "vox raider", null, "Do you wish to be considered for a vox raiding party arriving on the station?" ), typeof(Mob_Dead_Observer) )) {
				G = _a;
				
				candidates.Add( G );
			}

			foreach (dynamic _b in Lang13.Enumerate( candidates, typeof(Mob_Dead_Observer) )) {
				G2 = _b;
				

				if ( !Lang13.Bool( G2.key ) ) {
					candidates.Remove( G2 );
				}
			}

			if ( candidates.len != 0 ) {
				max_raiders = 1;
				raiders = max_raiders;

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					L = _c;
					

					if ( L.name == "voxstart" ) {
						
						if ( raiders <= 0 ) {
							break;
						}
						new_vox = this.create_vox_raider( L, leader_chosen );

						while (( !Lang13.Bool( theghost ) || !Lang13.Bool( theghost.client ) ) && candidates.len != 0) {
							theghost = Rand13.PickFromTable( candidates );
							candidates.Remove( theghost );
						}

						if ( !Lang13.Bool( theghost ) ) {
							Lang13.Delete( new_vox );
							new_vox = null;
							break;
						}
						new_vox.key = theghost.key;
						GlobalFuncs.to_chat( new_vox, "<span class='notice'>You are a Vox Primalis, fresh out of the Shoal. Your ship has arrived at the Tau Ceti system hosting the NSV Exodus... or was it the Luna? NSS? Utopia? Nobody is really sure, but everyong is raring to start pillaging! Your current goal is: <span class='danger'> " + input + "</span></span>" );
						GlobalFuncs.to_chat( new_vox, "<span class='warning'>Don't forget to turn on your nitrogen internals!</span>" );
						raiders--;
					}

					if ( raiders > max_raiders ) {
						return false;
					}
				}
			} else {
				return false;
			}
			return true;
		}

		// Function from file: one_click_antag.dm
		public Mob_Living_Carbon_Human create_syndicate_death_commando( Obj_Effect_Landmark spawn_location = null, bool? syndicate_leader_selected = null ) {
			syndicate_leader_selected = syndicate_leader_selected ?? false;

			Mob_Living_Carbon_Human new_syndicate_commando = null;
			dynamic syndicate_commando_leader_rank = null;
			dynamic syndicate_commando_rank = null;
			dynamic syndicate_commando_name = null;
			Preferences A = null;

			new_syndicate_commando = new Mob_Living_Carbon_Human( spawn_location.loc );
			syndicate_commando_leader_rank = Rand13.Pick(new object [] { "Lieutenant", "Captain", "Major" });
			syndicate_commando_rank = Rand13.Pick(new object [] { "Corporal", "Sergeant", "Staff Sergeant", "Sergeant 1st Class", "Master Sergeant", "Sergeant Major" });
			syndicate_commando_name = Rand13.PickFromTable( GlobalVars.last_names );
			new_syndicate_commando.gender = Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE });
			A = new Preferences();
			A.randomize_appearance_for( new_syndicate_commando );
			new_syndicate_commando.real_name = "" + ( !( syndicate_leader_selected == true ) ? syndicate_commando_rank : syndicate_commando_leader_rank ) + " " + syndicate_commando_name;
			new_syndicate_commando.name = new_syndicate_commando.real_name;
			new_syndicate_commando.age = ( !( syndicate_leader_selected == true ) ? Rand13.Int( 23, 35 ) : Rand13.Int( 35, 45 ) );
			new_syndicate_commando.dna.ready_dna( new_syndicate_commando );
			new_syndicate_commando.mind_initialize();
			new_syndicate_commando.mind.assigned_role = "MODE";
			new_syndicate_commando.mind.special_role = "Syndicate Commando";
			GlobalVars.ticker.mode.traitors.Add( new_syndicate_commando.mind );
			new_syndicate_commando.equip_syndicate_commando( syndicate_leader_selected );
			return new_syndicate_commando;
		}

		// Function from file: one_click_antag.dm
		public bool makeDeathsquad(  ) {
			ByTable candidates = null;
			dynamic theghost = null;
			string input = null;
			bool? syndicate_leader_selected = null;
			Mob_Dead_Observer G = null;
			Mob_Dead_Observer G2 = null;
			int numagents = 0;
			Obj_Effect_Landmark L = null;
			Mob_Living_Carbon_Human new_syndicate_commando = null;
			Obj_Effect_Landmark L2 = null;

			candidates = new ByTable();
			theghost = null;
			input = "Purify the station.";

			if ( Rand13.PercentChance( 10 ) ) {
				input = "Save Runtime and any other cute things on the station.";
			}
			syndicate_leader_selected = false;

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "commando", null, "Do you wish to be considered for an elite syndicate strike team being sent in?" ), typeof(Mob_Dead_Observer) )) {
				G = _a;
				

				if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( G, "operative" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( G, "Syndicate" ) ) ) {
					candidates.Add( G );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( candidates, typeof(Mob_Dead_Observer) )) {
				G2 = _b;
				

				if ( !Lang13.Bool( G2.key ) ) {
					candidates.Remove( G2 );
				}
			}

			if ( candidates.len != 0 ) {
				numagents = 6;

				foreach (dynamic _c in Lang13.Enumerate( typeof(Zone_SyndicateMothership_EliteSquad), typeof(Obj_Effect_Landmark) )) {
					L = _c;
					

					if ( numagents <= 0 ) {
						break;
					}

					if ( L.name == "Syndicate-Commando" ) {
						syndicate_leader_selected = ( numagents == 1 ? true : false );
						new_syndicate_commando = this.create_syndicate_death_commando( L, syndicate_leader_selected );

						while (( !Lang13.Bool( theghost ) || !Lang13.Bool( theghost.client ) ) && candidates.len != 0) {
							theghost = Rand13.PickFromTable( candidates );
							candidates.Remove( theghost );
						}

						if ( !Lang13.Bool( theghost ) ) {
							Lang13.Delete( new_syndicate_commando );
							new_syndicate_commando = null;
							break;
						}
						new_syndicate_commando.key = theghost.key;
						new_syndicate_commando.v_internal = new_syndicate_commando.s_store;
						((dynamic)new_syndicate_commando.internals).icon_state = "internal1";
						GlobalFuncs.to_chat( new_syndicate_commando, "<span class='notice'>You are an Elite Syndicate. " + ( !( syndicate_leader_selected == true ) ? "commando" : "<B>LEADER</B>" ) + " in the service of the Syndicate. \nYour current mission is: <span class='danger'> " + input + "</span></span>" );
						numagents--;
					}
				}

				if ( numagents >= 6 ) {
					return false;
				}

				foreach (dynamic _d in Lang13.Enumerate( typeof(Zone_Shuttle_SyndicateElite), typeof(Obj_Effect_Landmark) )) {
					L2 = _d;
					

					if ( L2.name == "Syndicate-Commando-Bomb" ) {
						new Obj_Effect_Spawner_Newbomb_Timer_Syndicate( L2.loc );
					}
				}
			}
			return true;
		}

		// Function from file: one_click_antag.dm
		public bool makeAliens(  ) {
			GlobalFuncs.alien_infestation( 3 );
			return true;
		}

		// Function from file: one_click_antag.dm
		public bool makeNukeTeam(  ) {
			ByTable candidates = null;
			dynamic theghost = null;
			ByTable picked = null;
			Mob_Dead_Observer G = null;
			int? numagents = null;
			int agentcount = 0;
			int? i = null;
			dynamic j = null;
			dynamic j2 = null;
			Mob_Living_Carbon_Human new_character = null;
			dynamic nuke_spawn = null;
			dynamic closet_spawn = null;
			string nuke_code = null;
			Obj_Item_Weapon_Paper P = null;
			Obj_Effect_Landmark A = null;
			Mind synd_mind = null;
			Image I = null;
			Mind synd_mind2 = null;
			Mind synd_mind_1 = null;
			Image I2 = null;
			Obj_Machinery_Nuclearbomb bomb = null;

			candidates = new ByTable();
			theghost = null;
			picked = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "operative", null, "Do you wish to be considered for a nuke team being sent in?" ), typeof(Mob_Dead_Observer) )) {
				G = _a;
				

				if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( G, "operative" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( G, "Syndicate" ) ) ) {
					candidates.Add( G );
				}
			}

			if ( candidates.len != 0 ) {
				numagents = 5;
				agentcount = 0;
				i = null;
				i = 0;

				while (( i ??0) < ( numagents ??0)) {
					GlobalFuncs.shuffle( candidates );

					foreach (dynamic _b in Lang13.Enumerate( candidates )) {
						j = _b;
						

						if ( !Lang13.Bool( j ) || !Lang13.Bool( j.client ) ) {
							candidates.Remove( j );
							continue;
						}
						theghost = j;
						candidates.Remove( theghost );
						picked.Add( theghost );
						agentcount++;
						break;
					}
					i++;
				}

				if ( agentcount < 3 ) {
					return false;
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( picked )) {
						j2 = _c;
						
						theghost = j2;
						new_character = GlobalFuncs.makeBody( theghost );
						new_character.mind.make_Nuke();
					}
				}
				nuke_spawn = Lang13.FindObj( "landmark*Nuclear-Bomb" );
				closet_spawn = Lang13.FindObj( "landmark*Syndicate-Uplink" );
				nuke_code = "" + Rand13.Int( 10000, 99999 );

				if ( Lang13.Bool( nuke_spawn ) ) {
					P = new Obj_Item_Weapon_Paper();
					P.info = "Sadly, the Syndicate could not get you a nuclear bomb.  We have, however, acquired the arming code for the station's onboard nuke.  The nuclear authorization code is: <b>" + nuke_code + "</b>";
					P.name = "nuclear bomb code and instructions";
					P.loc = nuke_spawn.loc;
				}

				if ( Lang13.Bool( closet_spawn ) ) {
					new Obj_Structure_Closet_Syndicate_Nuclear( closet_spawn.loc );
				}

				foreach (dynamic _d in Lang13.Enumerate( typeof(Zone_SyndicateStation_Start), typeof(Obj_Effect_Landmark) )) {
					A = _d;
					

					if ( A.name == "Syndicate-Gear-Closet" ) {
						new Obj_Structure_Closet_Syndicate_Personal( A.loc );
						Lang13.Delete( A );
						A = null;
						continue;
					}

					if ( A.name == "Syndicate-Bomb" ) {
						new Obj_Effect_Spawner_Newbomb_Timer_Syndicate( A.loc );
						Lang13.Delete( A );
						A = null;
						continue;
					}
				}

				foreach (dynamic _f in Lang13.Enumerate( GlobalVars.ticker.mode.syndicates, typeof(Mind) )) {
					synd_mind = _f;
					

					if ( Lang13.Bool( synd_mind.current ) ) {
						
						if ( Lang13.Bool( synd_mind.current.client ) ) {
							
							foreach (dynamic _e in Lang13.Enumerate( synd_mind.current.client.images, typeof(Image) )) {
								I = _e;
								

								if ( I.icon_state == "synd" ) {
									synd_mind.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				foreach (dynamic _h in Lang13.Enumerate( GlobalVars.ticker.mode.syndicates, typeof(Mind) )) {
					synd_mind2 = _h;
					

					if ( Lang13.Bool( synd_mind2.current ) ) {
						
						if ( Lang13.Bool( synd_mind2.current.client ) ) {
							
							foreach (dynamic _g in Lang13.Enumerate( GlobalVars.ticker.mode.syndicates, typeof(Mind) )) {
								synd_mind_1 = _g;
								

								if ( Lang13.Bool( synd_mind_1.current ) ) {
									I2 = new Image( "icons/mob/mob.dmi", synd_mind_1.current, "synd" );
									synd_mind2.current.client.images.Add( I2 );
								}
							}
						}
					}
				}

				foreach (dynamic _i in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
					bomb = _i;
					
					bomb.r_code = nuke_code;
				}
			}
			return true;
		}

		// Function from file: one_click_antag.dm
		public bool makeCult(  ) {
			GameMode_Cult temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;
			int? numCultists = null;
			int? i = null;

			temp = new GameMode_Cult();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "cultist" ), typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( applicant.stat == 0 ) {
					
					if ( applicant.mind != null ) {
						
						if ( !Lang13.Bool( applicant.mind.special_role ) ) {
							
							if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( applicant, "cultist" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) ) {
								Interface13.Stat( null, temp.restricted_jobs.Contains( applicant.job ) );

								if ( !false ) {
									candidates.Add( applicant );
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				numCultists = Num13.MinInt( candidates.len, 4 );
				i = null;
				i = 0;

				while (( i ??0) < ( numCultists ??0)) {
					H = Rand13.PickFromTable( candidates );
					((Mind)H.mind).make_Cultist();
					candidates.Remove( H );
					temp.grant_runeword( H );
					i++;
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeWizard(  ) {
			ByTable candidates = null;
			dynamic theghost = null;
			Mob_Dead_Observer G = null;
			dynamic i = null;
			Mob_Living_Carbon_Human new_character = null;

			candidates = new ByTable();
			theghost = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "wizard", null, "Do you wish to be considered for the Space Wizard Federation \"Ambassador\"?" ), typeof(Mob_Dead_Observer) )) {
				G = _a;
				

				if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( G, "wizard" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( G, "Syndicate" ) ) ) {
					candidates.Add( G );
				}
			}

			if ( candidates.len != 0 ) {
				GlobalFuncs.shuffle( candidates );

				foreach (dynamic _b in Lang13.Enumerate( candidates )) {
					i = _b;
					

					if ( !Lang13.Bool( i ) || !Lang13.Bool( i.client ) ) {
						continue;
					}
					theghost = i;
					break;
				}
			}

			if ( Lang13.Bool( theghost ) ) {
				new_character = GlobalFuncs.makeBody( theghost );
				new_character.mind.make_Wizard();
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeRevs(  ) {
			GameMode_Revolution temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;
			int? numRevs = null;
			int? i = null;

			temp = new GameMode_Revolution();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( !( applicant.client != null ) ) {
					continue;
				}

				if ( Lang13.Bool( applicant.client.desires_role( "revolutionary" ) ) ) {
					
					if ( applicant.stat == 0 ) {
						
						if ( applicant.mind != null ) {
							
							if ( !Lang13.Bool( applicant.mind.special_role ) ) {
								
								if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( applicant, "revolutionary" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) ) {
									Interface13.Stat( null, temp.restricted_jobs.Contains( applicant.job ) );

									if ( !false ) {
										candidates.Add( applicant );
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				numRevs = Num13.MinInt( candidates.len, 3 );
				i = null;
				i = 0;

				while (( i ??0) < ( numRevs ??0)) {
					H = Rand13.PickFromTable( candidates );
					((Mind)H.mind).make_Rev();
					candidates.Remove( H );
					i++;
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeChanglings(  ) {
			GameMode_Changeling temp = null;
			ByTable candidates = null;
			dynamic H = null;
			Mob_Living_Carbon_Human applicant = null;
			int? numChanglings = null;
			int? i = null;

			temp = new GameMode_Changeling();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}
			candidates = new ByTable();
			H = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( Lang13.Bool( applicant.client.desires_role( "changeling" ) ) ) {
					
					if ( !Lang13.Bool( applicant.stat ) ) {
						
						if ( applicant.mind != null ) {
							
							if ( !Lang13.Bool( applicant.mind.special_role ) ) {
								
								if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( applicant, "changeling" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) ) {
									Interface13.Stat( null, temp.restricted_jobs.Contains( applicant.job ) );

									if ( !false ) {
										candidates.Add( applicant );
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				numChanglings = Num13.MinInt( candidates.len, 3 );
				i = null;
				i = 0;

				while (( i ??0) < ( numChanglings ??0)) {
					H = Rand13.PickFromTable( candidates );
					((Mind)H.mind).make_Changling();
					candidates.Remove( H );
					i++;
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeTraitors(  ) {
			GameMode_Traitor temp = null;
			dynamic candidates = null;
			Mob_Living_Carbon_Human applicant = null;
			dynamic candidate = null;
			double i = 0;
			Mind candidate_mind = null;

			temp = new GameMode_Traitor();

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				temp.restricted_jobs.Add( temp.protected_jobs );
			}
			candidates = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				applicant = _a;
				

				if ( Lang13.Bool( applicant.client.desires_role( "traitor" ) ) ) {
					
					if ( !Lang13.Bool( applicant.stat ) ) {
						
						if ( applicant.mind != null ) {
							
							if ( !Lang13.Bool( applicant.mind.special_role ) ) {
								
								if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( applicant, "traitor" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( applicant, "Syndicate" ) ) ) {
									Interface13.Stat( null, temp.restricted_jobs.Contains( applicant.job ) );

									if ( !false ) {
										candidates += applicant;
									}
								}
							}
						}
					}
				}
			}

			if ( candidates.len != 0 ) {
				candidates = GlobalFuncs.shuffle( candidates );
				candidate = null;

				foreach (dynamic _b in Lang13.IterateRange( 1, Num13.MinInt( candidates.len, 3 ) )) {
					i = _b;
					
					candidate = GlobalFuncs.pick_n_take( candidates );

					if ( Lang13.Bool( candidate ) ) {
						candidate_mind = candidate.mind;

						if ( candidate_mind != null ) {
							
							if ( candidate_mind.make_traitor() == true ) {
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( this.owner ) + " has traitor'ed " + GlobalFuncs.key_name( candidate ) + " via create antagonist verb." );
							}
						}
					}
				}
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public bool makeMalfAImode(  ) {
			ByTable AIs = null;
			dynamic malfAI = null;
			Mind themind = null;
			Mob_Living_Silicon_Ai ai = null;

			AIs = new ByTable();
			malfAI = null;
			themind = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
				ai = _a;
				

				if ( ai.client != null ) {
					AIs.Add( ai );
				}
			}

			if ( AIs.len != 0 ) {
				malfAI = Rand13.PickFromTable( AIs );
			}

			if ( Lang13.Bool( malfAI ) ) {
				themind = malfAI.mind;
				themind.make_AI_Malf();
				return true;
			}
			return false;
		}

		// Function from file: one_click_antag.dm
		public void one_click_antag(  ) {
			string dat = null;

			dat = new Txt( "<B>One-click Antagonist</B><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=1'>Make Traitors</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=2'>Make Changlings</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=3'>Make Revs</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=4'>Make Cult</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=5'>Make Malf AI</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=6'>Make Wizard (Requires Ghosts)</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=11'>Make Vox Raiders (Requires Ghosts)</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=7'>Make Nuke Team (Requires Ghosts)</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=9'>Make Aliens (Requires Ghosts)</a><br>\n		<a href='?src=" ).Ref( this ).str( ";makeAntag=10'>Make Deathsquad (Syndicate) (Requires Ghosts)</a><br>\n		" ).ToString();
			Interface13.Browse( Task13.User, dat, "window=oneclickantag;size=400x400" );
			return;
		}

		// Function from file: getlogs.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show mob's attack logs", desc: "Shows the (formatted) attack log of a mob in a HTML window.", group: "Admin" )]
		[VerbArg( 1, InputType.Mob )]
		public void view_mob_attack_log( Mob M = null ) {
			Browser_Clean popup = null;

			
			if ( !( M is Mob ) ) {
				GlobalFuncs.to_chat( Task13.User, "That's not a valid mob!" );
				return;
			}
			popup = new Browser_Clean( Task13.User, new Txt().Ref( M ).str( "_admin_log_viewer" ).ToString(), "Attack logs of " + M, 300, 300 );
			popup.set_content( GlobalFuncs.list2text( M.attack_log, "<br/>" ) );
			popup.open();
			GlobalFuncs.feedback_add_details( "admin_verb", "VMAL" );
			return;
		}

		// Function from file: getlogs.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Server Attack Log", desc: "Shows today's server attack log.", group: "Admin" )]
		public void view_atk_log(  ) {
			string path = null;

			path = "data/logs/" + String13.FormatTime( Game13.realtime, "YYYY/MM-Month/DD-Day" ) + " Attack.log";

			if ( File13.Exists( path ) ) {
				Interface13.OpenFile( this, new File( path ) );
			} else {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: view_atk_log(): File not found/Invalid path(" + path + ").</font>" );
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "SSAL" );
			return;
		}

		// Function from file: getlogs.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Server Log", desc: "Shows today's server log.", group: "Admin" )]
		public void view_txt_log(  ) {
			string path = null;

			path = "data/logs/" + String13.FormatTime( Game13.realtime, "YYYY/MM-Month/DD-Day" ) + ".log";

			if ( File13.Exists( path ) ) {
				Interface13.OpenFile( this, new File( path ) );
			} else {
				GlobalFuncs.to_chat( this, "<font color='red'>Error: view_txt_log(): File not found/Invalid path(" + path + ").</font>" );
				return;
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "VTL" );
			return;
		}

		// Function from file: permissionedit.dm
		public void log_admin_permission_modification( string adm_ckey = null, dynamic new_permission = null ) {
			DBQuery select_query = null;
			double? admin_id = null;
			double? admin_rights = null;
			DBQuery insert_query = null;
			DBQuery log_query = null;
			DBQuery insert_query2 = null;
			DBQuery log_query2 = null;

			
			if ( GlobalVars.config.admin_legacy_system ) {
				return;
			}

			if ( !( Task13.User.client != null ) ) {
				return;
			}

			if ( !( Task13.User.client.holder != null ) || !Lang13.Bool( Task13.User.client.holder.rights & 128 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You do not have permission to do this!</span>" );
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Failed to establish database connection</span>" );
				return;
			}

			if ( !Lang13.Bool( adm_ckey ) || !Lang13.Bool( new_permission ) ) {
				return;
			}
			adm_ckey = String13.CKey( adm_ckey );

			if ( !Lang13.Bool( adm_ckey ) ) {
				return;
			}

			if ( new_permission is string ) {
				new_permission = String13.ParseNumber( new_permission );
			}

			if ( !( adm_ckey is string ) || !Lang13.Bool( Lang13.IsNumber( new_permission ) ) ) {
				return;
			}
			select_query = GlobalVars.dbcon.NewQuery( "SELECT id, flags FROM erro_admin WHERE ckey = '" + adm_ckey + "'" );
			select_query.Execute();

			while (select_query.NextRow()) {
				admin_id = String13.ParseNumber( select_query.item[1] );
				admin_rights = String13.ParseNumber( select_query.item[2] );
			}

			if ( !Lang13.Bool( admin_id ) ) {
				return;
			}

			if ( ( ((int)( admin_rights ??0 )) & Convert.ToInt32( new_permission ) ) != 0 ) {
				insert_query = GlobalVars.dbcon.NewQuery( "UPDATE `erro_admin` SET flags = " + ( ((int)( admin_rights ??0 )) & Convert.ToInt32( ~new_permission ) ) + " WHERE id = " + admin_id );
				insert_query.Execute();
				log_query = GlobalVars.dbcon.NewQuery( "INSERT INTO `test`.`erro_admin_log` (`id` ,`datetime` ,`adminckey` ,`adminip` ,`log` ) VALUES (NULL , NOW( ) , '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', 'Removed permission " + GlobalFuncs.rights2text( new_permission ) + " (flag = " + new_permission + ") to admin " + adm_ckey + "');" );
				log_query.Execute();
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Permission removed.</span>" );
			} else {
				insert_query2 = GlobalVars.dbcon.NewQuery( "UPDATE `erro_admin` SET flags = '" + ( ((int)( admin_rights ??0 )) | Convert.ToInt32( new_permission ) ) + "' WHERE id = " + admin_id );
				insert_query2.Execute();
				log_query2 = GlobalVars.dbcon.NewQuery( "INSERT INTO `test`.`erro_admin_log` (`id` ,`datetime` ,`adminckey` ,`adminip` ,`log` ) VALUES (NULL , NOW( ) , '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', 'Added permission " + GlobalFuncs.rights2text( new_permission ) + " (flag = " + new_permission + ") to admin " + adm_ckey + "')" );
				log_query2.Execute();
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Permission added.</span>" );
			}
			return;
		}

		// Function from file: permissionedit.dm
		public void log_admin_rank_modification( string adm_ckey = null, dynamic new_rank = null ) {
			DBQuery select_query = null;
			bool new_admin = false;
			double? admin_id = null;
			DBQuery insert_query = null;
			DBQuery log_query = null;
			DBQuery insert_query2 = null;
			DBQuery log_query2 = null;

			
			if ( GlobalVars.config.admin_legacy_system ) {
				return;
			}

			if ( !( Task13.User.client != null ) ) {
				return;
			}

			if ( !( Task13.User.client.holder != null ) || !Lang13.Bool( Task13.User.client.holder.rights & 128 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You do not have permission to do this!</span>" );
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Failed to establish database connection</span>" );
				return;
			}

			if ( !Lang13.Bool( adm_ckey ) || !Lang13.Bool( new_rank ) ) {
				return;
			}
			adm_ckey = String13.CKey( adm_ckey );

			if ( !Lang13.Bool( adm_ckey ) ) {
				return;
			}

			if ( !( adm_ckey is string ) || !( new_rank is string ) ) {
				return;
			}
			select_query = GlobalVars.dbcon.NewQuery( "SELECT id FROM erro_admin WHERE ckey = '" + adm_ckey + "'" );
			select_query.Execute();
			new_admin = true;

			while (select_query.NextRow()) {
				new_admin = false;
				admin_id = String13.ParseNumber( select_query.item[1] );
			}

			if ( new_admin ) {
				insert_query = GlobalVars.dbcon.NewQuery( "INSERT INTO `erro_admin` (`id`, `ckey`, `rank`, `level`, `flags`) VALUES (null, '" + adm_ckey + "', '" + new_rank + "', -1, 0)" );
				insert_query.Execute();
				log_query = GlobalVars.dbcon.NewQuery( "INSERT INTO `test`.`erro_admin_log` (`id` ,`datetime` ,`adminckey` ,`adminip` ,`log` ) VALUES (NULL , NOW( ) , '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', 'Added new admin " + adm_ckey + " to rank " + new_rank + "');" );
				log_query.Execute();
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>New admin added.</span>" );
			} else if ( !( admin_id == null ) && Lang13.Bool( Lang13.IsNumber( admin_id ) ) ) {
				insert_query2 = GlobalVars.dbcon.NewQuery( "UPDATE `erro_admin` SET rank = '" + new_rank + "' WHERE id = " + admin_id );
				insert_query2.Execute();
				log_query2 = GlobalVars.dbcon.NewQuery( "INSERT INTO `test`.`erro_admin_log` (`id` ,`datetime` ,`adminckey` ,`adminip` ,`log` ) VALUES (NULL , NOW( ) , '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', 'Edited the rank of " + adm_ckey + " to " + new_rank + "');" );
				log_query2.Execute();
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Admin rank changed.</span>" );
			}
			return;
		}

		// Function from file: permissionedit.dm
		public void edit_admin_permissions(  ) {
			string output = null;
			dynamic adm_ckey = null;
			Admins D = null;
			dynamic rank = null;
			string rights = null;

			
			if ( !GlobalFuncs.check_rights( 128 ) ) {
				return;
			}
			output = new Txt( @"<!DOCTYPE html>
<html>
<head>
<title>Permissions Panel</title>
<script type='text/javascript' src='search.js'></script>
<link rel='stylesheet' type='text/css' href='panels.css'>
</head>
<body onload='selectTextField();updateSearch();'>
<div id='main'><table id='searchable' cellspacing='0'>
<tr class='title'>
<th style='width:125px;text-align:right;'>CKEY <a class='small' href='?src=" ).Ref( this ).str( ";editrights=add'>[+]</a></th>\n<th style='width:125px;'>RANK</th><th style='width:100%;'>PERMISSIONS</th>\n</tr>\n" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admin_datums )) {
				adm_ckey = _a;
				
				D = GlobalVars.admin_datums[adm_ckey];

				if ( !( D != null ) ) {
					continue;
				}
				rank = ( Lang13.Bool( D.rank ) ? D.rank : ((dynamic)( "*none*" )) );
				rights = GlobalFuncs.rights2text( D.rights, " " );

				if ( !Lang13.Bool( rights ) ) {
					rights = "*none*";
				}
				output += new Txt( "<tr>\n<td style='text-align:right;'>" ).item( adm_ckey ).str( " <a class='small' href='?src=" ).Ref( this ).str( ";editrights=remove;ckey=" ).item( adm_ckey ).str( "'>[-]</a></td>\n<td><a href='?src=" ).Ref( this ).str( ";editrights=rank;ckey=" ).item( adm_ckey ).str( "'>" ).item( rank ).str( "</a></td>\n<td><a class='small' href='?src=" ).Ref( this ).str( ";editrights=permissions;ckey=" ).item( adm_ckey ).str( "'>" ).item( rights ).str( "</a></font></td>\n</tr>" ).ToString();
			}
			output += @"
</table></div>
<div id='top'><b>Search:</b> <input type='text' id='filter' value='' style='width:70%;' onkeyup='updateSearch();'></div>
</body>
</html>";
			Interface13.Browse( Task13.User, output, "window=editrights;size=600x500" );
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_panel( string playerckey = null, string adminckey = null ) {
			string output = null;
			dynamic j = null;
			dynamic j2 = null;
			dynamic j3 = null;
			string blcolor = null;
			string bdcolor = null;
			string ulcolor = null;
			string udcolor = null;
			string adminsearch = null;
			string playersearch = null;
			DBQuery select_query = null;
			dynamic banid = null;
			dynamic bantime = null;
			dynamic bantype = null;
			dynamic reason = null;
			dynamic job = null;
			dynamic duration = null;
			dynamic expiration = null;
			dynamic ckey = null;
			dynamic ackey = null;
			dynamic unbanned = null;
			dynamic unbanckey = null;
			dynamic unbantime = null;
			dynamic edits = null;
			string lcolor = null;
			string dcolor = null;
			string typedesc = null;

			
			if ( !( Task13.User.client != null ) ) {
				return;
			}

			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Failed to establish database connection</span>" );
				return;
			}
			output = "<div align='center'><table width='90%'><tr>";
			output += new Txt( @"<td width='35%' align='center'>
		<h1>Banning panel</h1>
		</td>
		<td width='65%' align='center' bgcolor='#f9f9f9'>
		<form method='GET' action='?src=" ).Ref( this ).str( "'><b>Add custom ban:</b> (ONLY use this if you can't ban through any other method)\n		<input type='hidden' name='src' value='" ).Ref( this ).str( @"'>
		<table width='100%'><tr>
		<td><b>Ban type:</b><select name='dbbanaddtype'>
		<option value=''>--</option>
		<option value='" ).item( 1 ).str( "'>PERMABAN</option>\n		<option value='" ).item( 2 ).str( "'>TEMPBAN</option>\n		<option value='" ).item( 3 ).str( "'>JOB PERMABAN</option>\n		<option value='" ).item( 4 ).str( "'>JOB TEMPBAN</option>\n		<option value='" ).item( 6 ).str( "'>APPEARANCE BAN</option>\n		<option value='" ).item( 7 ).str( "'>OOC_PERMABAN</option>\n		<option value='" ).item( 8 ).str( @"'>OOC_TEMPBAN</option>
		</select></td>
		<td><b>Ckey:</b> <input type='text' name='dbbanaddckey'></td></tr>
		<tr><td><b>Duration:</b> <input type='text' name='dbbaddduration'></td>
		<td><b>Job:</b><select name='dbbanaddjob'>
		<option value=''>--</option>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_all_jobs() )) {
				j = _a;
				
				output += "<option value='" + j + "'>" + j + "</option>";
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.nonhuman_positions )) {
				j2 = _b;
				
				output += "<option value='" + j2 + "'>" + j2 + "</option>";
			}

			foreach (dynamic _c in Lang13.Enumerate( new ByTable(new object [] { "traitor", "changeling", "operative", "revolutionary", "cultist", "wizard" }) )) {
				j3 = _c;
				
				output += "<option value='" + j3 + "'>" + j3 + "</option>";
			}
			output += new Txt( @"</select></td></tr></table>
		<b>Reason:<br></b><textarea name='dbbanreason' cols='50'></textarea><br>
		<input type='submit' value='Add ban'>
		</form>
		</td>
		</tr>
		</table>
		<form method='GET' action='?src=" ).Ref( this ).str( "'><b>Search:</b>\n		<input type='hidden' name='src' value='" ).Ref( this ).str( "'>\n		<b>Ckey:</b> <input type='text' name='dbsearchckey' value='" ).item( playerckey ).str( "'>\n		<b>Admin ckey:</b> <input type='text' name='dbsearchadmin' value='" ).item( adminckey ).str( "'>\n		<input type='submit' value='search'>\n		</form>\n		Please note that all jobban bans or unbans are in-effect the following round." ).ToString();

			if ( Lang13.Bool( adminckey ) || Lang13.Bool( playerckey ) ) {
				blcolor = "#ffeeee";
				bdcolor = "#ffdddd";
				ulcolor = "#eeffee";
				udcolor = "#ddffdd";
				output += @"<table width='90%' bgcolor='#e3e3e3' cellpadding='5' cellspacing='0' align='center'>
			<tr>
			<th width='25%'><b>TYPE</b></th>
			<th width='20%'><b>CKEY</b></th>
			<th width='20%'><b>TIME APPLIED</b></th>
			<th width='20%'><b>ADMIN</b></th>
			<th width='15%'><b>OPTIONS</b></th>
			</tr>";
				adminckey = String13.CKey( adminckey );
				playerckey = String13.CKey( playerckey );
				adminsearch = "";
				playersearch = "";

				if ( Lang13.Bool( adminckey ) ) {
					adminsearch = "AND a_ckey = '" + adminckey + "' ";
				}

				if ( Lang13.Bool( playerckey ) ) {
					playersearch = "AND ckey = '" + playerckey + "' ";
				}
				select_query = GlobalVars.dbcon.NewQuery( "SELECT id, bantime, bantype, reason, job, duration, expiration_time, ckey, a_ckey, unbanned, unbanned_ckey, unbanned_datetime, edits FROM erro_ban WHERE 1 " + playersearch + " " + adminsearch + " ORDER BY bantime DESC" );
				select_query.Execute();

				while (select_query.NextRow()) {
					banid = select_query.item[1];
					bantime = select_query.item[2];
					bantype = select_query.item[3];
					reason = select_query.item[4];
					job = select_query.item[5];
					duration = select_query.item[6];
					expiration = select_query.item[7];
					ckey = select_query.item[8];
					ackey = select_query.item[9];
					unbanned = select_query.item[10];
					unbanckey = select_query.item[11];
					unbantime = select_query.item[12];
					edits = select_query.item[13];
					lcolor = blcolor;
					dcolor = bdcolor;

					if ( Lang13.Bool( unbanned ) ) {
						lcolor = ulcolor;
						dcolor = udcolor;
					}
					typedesc = "";

					dynamic _d = bantype; // Was a switch-case, sorry for the mess.
					if ( _d=="PERMABAN" ) {
						typedesc = "<font color='red'><b>PERMABAN</b></font>";
					} else if ( _d=="TEMPBAN" ) {
						typedesc = "<b>TEMPBAN</b><br><font size='2'>(" + duration + " minutes " + ( Lang13.Bool( unbanned ) ? "" : new Txt( "(<a href=\"byond://?src=" ).Ref( this ).str( ";dbbanedit=duration;dbbanid=" ).item( banid ).str( "\">Edit</a>))" ).ToString() ) + "<br>Expires " + expiration + "</font>";
					} else if ( _d=="JOB_PERMABAN" ) {
						typedesc = "<b>JOBBAN</b><br><font size='2'>(" + job + ")";
					} else if ( _d=="JOB_TEMPBAN" ) {
						typedesc = "<b>TEMP JOBBAN</b><br><font size='2'>(" + job + ")<br>(" + duration + " minutes<br>Expires " + expiration;
					} else if ( _d=="APPEARANCE_PERMABAN" ) {
						typedesc = "<b>APPEARANCE/NAME BAN</b>";
					} else if ( _d=="OOC_PERMABAN" ) {
						typedesc = "<b>PERMA OOCBAN</b>";
					} else if ( _d=="OOC_TEMPBAN" ) {
						typedesc = "<b>TEMP OOCBAN</b>";
					}
					output += "<tr bgcolor='" + dcolor + "'>\n				<td align='center'>" + typedesc + "</td>\n				<td align='center'><b>" + ckey + "</b></td>\n				<td align='center'>" + bantime + "</td>\n				<td align='center'><b>" + ackey + "</b></td>\n				<td align='center'>" + ( Lang13.Bool( unbanned ) ? "" : new Txt( "<b><a href=\"byond://?src=" ).Ref( this ).str( ";dbbanedit=unban;dbbanid=" ).item( banid ).str( "\">Unban</a></b>" ).ToString() ) + "</td>\n				</tr>\n				<tr bgcolor='" + lcolor + "'>\n				<td align='center' colspan='5'><b>Reason: " + ( Lang13.Bool( unbanned ) ? "" : new Txt( "(<a href=\"byond://?src=" ).Ref( this ).str( ";dbbanedit=reason;dbbanid=" ).item( banid ).str( "\">Edit</a>)" ).ToString() ) + "</b> <cite>\"" + reason + "\"</cite></td>\n				</tr>";

					if ( Lang13.Bool( edits ) ) {
						output += "<tr bgcolor='" + dcolor + "'>\n					<td align='center' colspan='5'><b>EDITS</b></td>\n					</tr>\n					<tr bgcolor='" + lcolor + "'>\n					<td align='center' colspan='5'><font size='2'>" + edits + "</font></td>\n					</tr>";
					}

					if ( Lang13.Bool( unbanned ) ) {
						output += "<tr bgcolor='" + dcolor + "'>\n					<td align='center' colspan='5' bgcolor=''><b>UNBANNED by admin " + unbanckey + " on " + unbantime + "</b></td>\n					</tr>";
					}
					output += "<tr>\n				<td colspan='5' bgcolor='white'>&nbsp</td>\n				</tr>";
				}
				output += "</table></div>";
			}
			Interface13.Browse( Task13.User, output, "window=lookupbans;size=900x500" );
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_unban_by_id( dynamic id = null ) {
			string sql = null;
			int ban_number = 0;
			dynamic pckey = null;
			DBQuery query = null;
			string unban_ckey = null;
			string unban_computerid = null;
			string unban_ip = null;
			string sql_update = null;
			DBQuery query_update = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}
			sql = "SELECT ckey FROM erro_ban WHERE id = " + id;
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			ban_number = 0;
			query = GlobalVars.dbcon.NewQuery( sql );
			query.Execute();

			while (query.NextRow()) {
				pckey = query.item[1];
				ban_number++;
			}

			if ( ban_number == 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Database update failed due to a ban id not being present in the database.</span>" );
				return;
			}

			if ( ban_number > 1 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Database update failed due to multiple bans having the same ID. Contact the database admin.</span>" );
				return;
			}

			if ( !( this.owner != null ) || !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( this.owner ) ) ) {
				return;
			}
			unban_ckey = this.owner.ckey;
			unban_computerid = this.owner.computer_id;
			unban_ip = this.owner.address;
			sql_update = "UPDATE erro_ban SET unbanned = 1, unbanned_datetime = Now(), unbanned_ckey = '" + unban_ckey + "', unbanned_computerid = '" + unban_computerid + "', unbanned_ip = '" + unban_ip + "' WHERE id = " + id;
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has lifted " + pckey + "'s ban." );
			query_update = GlobalVars.dbcon.NewQuery( sql_update );
			query_update.Execute();

			if ( GlobalVars.on_unban is _Event ) {
				GlobalVars.on_unban.Invoke( new ByTable().Set( "id", id ).Set( "ckey", pckey ).Set( "admin", this.owner ) );
			}
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_edit( double? banid = null, dynamic param = null ) {
			DBQuery query = null;
			string eckey = null;
			dynamic pckey = null;
			dynamic duration = null;
			dynamic reason = null;
			dynamic value = null;
			DBQuery update_query = null;
			DBQuery update_query2 = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( banid ) ) || !( param is string ) ) {
				GlobalFuncs.to_chat( Task13.User, "Cancelled" );
				return;
			}
			query = GlobalVars.dbcon.NewQuery( "SELECT ckey, duration, reason FROM erro_ban WHERE id = " + banid );
			query.Execute();
			eckey = Task13.User.ckey;

			if ( query.NextRow() ) {
				pckey = query.item[1];
				duration = query.item[2];
				reason = query.item[3];
			} else {
				GlobalFuncs.to_chat( Task13.User, "Invalid ban id. Contact the database admin" );
				return;
			}
			reason = GlobalFuncs.sql_sanitize_text( reason );

			dynamic _a = param; // Was a switch-case, sorry for the mess.
			if ( _a=="reason" ) {
				
				if ( !Lang13.Bool( value ) ) {
					value = Interface13.Input( "Insert the new reason for " + pckey + "'s ban", "New Reason", "" + reason, null, null, InputType.Str | InputType.Null );
					value = GlobalFuncs.sql_sanitize_text( value );

					if ( !Lang13.Bool( value ) ) {
						GlobalFuncs.to_chat( Task13.User, "Cancelled" );
						return;
					}
				}
				update_query = GlobalVars.dbcon.NewQuery( "UPDATE erro_ban SET reason = '" + value + "', edits = CONCAT(edits,'- " + eckey + " changed ban reason from <cite><b>\\\"" + reason + "\\\"</b></cite> to <cite><b>\\\"" + value + "\\\"</b></cite><BR>') WHERE id = " + banid );
				update_query.Execute();
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has edited a ban for " + pckey + "'s reason from " + reason + " to " + value );
			} else if ( _a=="duration" ) {
				
				if ( !Lang13.Bool( value ) ) {
					value = Interface13.Input( "Insert the new duration (in minutes) for " + pckey + "'s ban", "New Duration", "" + duration, null, null, InputType.Num | InputType.Null );

					if ( !Lang13.Bool( Lang13.IsNumber( value ) ) || !Lang13.Bool( value ) ) {
						GlobalFuncs.to_chat( Task13.User, "Cancelled" );
						return;
					}
				}
				update_query2 = GlobalVars.dbcon.NewQuery( "UPDATE erro_ban SET duration = " + value + ", edits = CONCAT(edits,'- " + eckey + " changed ban duration from " + duration + " to " + value + "<br>'), expiration_time = DATE_ADD(bantime, INTERVAL " + value + " MINUTE) WHERE id = " + banid );
				GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has edited a ban for " + pckey + "'s duration from " + duration + " to " + value );
				update_query2.Execute();
			} else if ( _a=="unban" ) {
				
				if ( Interface13.Alert( "Unban " + pckey + "?", "Unban?", "Yes", "No" ) == "Yes" ) {
					this.DB_ban_unban_by_id( banid );
					return;
				} else {
					GlobalFuncs.to_chat( Task13.User, "Cancelled" );
					return;
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "Cancelled" );
				return;
			}
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_unban( string ckey = null, int bantype = 0, dynamic job = null ) {
			job = job ?? "";

			string bantype_str = null;
			bool bantype_pass = false;
			string bantype_sql = null;
			string sql = null;
			dynamic ban_id = null;
			int ban_number = 0;
			DBQuery query = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}

			if ( bantype != 0 ) {
				bantype_pass = false;

				switch ((int)( bantype )) {
					case 1:
						bantype_str = "PERMABAN";
						bantype_pass = true;
						break;
					case 2:
						bantype_str = "TEMPBAN";
						bantype_pass = true;
						break;
					case 3:
						bantype_str = "JOB_PERMABAN";
						bantype_pass = true;
						break;
					case 4:
						bantype_str = "JOB_TEMPBAN";
						bantype_pass = true;
						break;
					case 6:
						bantype_str = "APPEARANCE_PERMABAN";
						bantype_pass = true;
						break;
					case 5:
						bantype_str = "ANY";
						bantype_pass = true;
						break;
				}

				if ( !bantype_pass ) {
					return;
				}
			}
			bantype_sql = null;

			if ( bantype_str == "ANY" ) {
				bantype_sql = "(bantype = 'PERMABAN' OR (bantype = 'TEMPBAN' AND expiration_time > Now() ) )";
			} else {
				bantype_sql = "bantype = '" + bantype_str + "'";
			}
			sql = "SELECT id FROM erro_ban WHERE ckey = '" + ckey + "' AND " + bantype_sql + " AND (unbanned is null OR unbanned = false)";

			if ( Lang13.Bool( job ) ) {
				sql += " AND job = '" + job + "'";
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			ban_id = null;
			ban_number = 0;
			query = GlobalVars.dbcon.NewQuery( sql );
			query.Execute();

			while (query.NextRow()) {
				ban_id = query.item[1];
				ban_number++;
			}

			if ( ban_number == 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Database update failed due to no bans fitting the search criteria. If this is not a legacy ban you should contact the database admin.</span>" );
				return;
			}

			if ( ban_number > 1 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Database update failed due to multiple bans fitting the search criteria. Note down the ckey, job and current time and contact the database admin.</span>" );
				return;
			}

			if ( ban_id is string ) {
				ban_id = String13.ParseNumber( ban_id );
			}

			if ( !Lang13.Bool( Lang13.IsNumber( ban_id ) ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Database update failed due to a ban ID mismatch. Contact the database admin.</span>" );
				return;
			}
			this.DB_ban_unban_by_id( ban_id );
			return;
		}

		// Function from file: functions.dm
		public void DB_ban_record( double? bantype = null, dynamic banned_mob = null, dynamic duration = null, dynamic reason = null, dynamic job = null, bool? rounds = null, string banckey = null ) {
			duration = duration ?? -1;
			job = job ?? "";
			rounds = rounds ?? false;

			string serverip = null;
			bool bantype_pass = false;
			string bantype_str = null;
			string ckey = null;
			dynamic computerid = null;
			string ip = null;
			DBQuery query = null;
			bool validckey = false;
			string a_ckey = null;
			string a_computerid = null;
			string a_ip = null;
			string who = null;
			dynamic C = null;
			string adminwho = null;
			dynamic C2 = null;
			string sql = null;
			DBQuery query_insert = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			serverip = "" + Game13.internet_address + ":" + Game13.port;
			bantype_pass = false;

			switch ((double?)( bantype )) {
				case 1:
					bantype_str = "PERMABAN";
					duration = -1;
					bantype_pass = true;
					break;
				case 2:
					bantype_str = "TEMPBAN";
					bantype_pass = true;
					break;
				case 3:
					bantype_str = "JOB_PERMABAN";
					duration = -1;
					bantype_pass = true;
					break;
				case 4:
					bantype_str = "JOB_TEMPBAN";
					bantype_pass = true;
					break;
				case 6:
					bantype_str = "APPEARANCE_PERMABAN";
					bantype_pass = true;
					break;
				case 7:
					bantype_str = "OOC_PERMABAN";
					duration = -1;
					bantype_pass = true;
					break;
				case 8:
					bantype_str = "OOC_TEMPBAN";
					bantype_pass = true;
					break;
			}

			if ( !bantype_pass ) {
				return;
			}

			if ( !( reason is string ) ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( duration ) ) ) {
				return;
			}
			ckey = null;
			computerid = null;
			ip = null;

			if ( banned_mob is Mob ) {
				ckey = banned_mob.ckey;

				if ( Lang13.Bool( banned_mob.client ) ) {
					computerid = banned_mob.client.computer_id;
					ip = banned_mob.client.address;
				}
			} else if ( Lang13.Bool( banckey ) ) {
				ckey = String13.CKey( banckey );
			}
			query = GlobalVars.dbcon.NewQuery( "SELECT id FROM erro_player WHERE ckey = '" + ckey + "'" );
			query.Execute();
			validckey = false;

			if ( query.NextRow() ) {
				validckey = true;
			}

			if ( !validckey ) {
				
				if ( !Lang13.Bool( banned_mob ) || Lang13.Bool( banned_mob ) && !GlobalFuncs.IsGuestKey( banned_mob.key ) ) {
					GlobalFuncs.message_admins( "<font color='red'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempted to ban " + ckey + ", but " + ckey + " has not been seen yet. Please only ban actual players.</font>" );
					return;
				}
			}
			a_ckey = null;
			a_computerid = null;
			a_ip = null;

			if ( this.owner != null && Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( this.owner ) ) ) {
				a_ckey = this.owner.ckey;
				a_computerid = this.owner.computer_id;
				a_ip = this.owner.address;
			}
			who = null;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.clients )) {
				C = _b;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( !Lang13.Bool( who ) ) {
					who = "" + C;
				} else {
					who += ", " + C;
				}
			}
			adminwho = null;

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.admins )) {
				C2 = _c;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C2 ) ) ) {
					continue;
				}

				if ( !Lang13.Bool( adminwho ) ) {
					adminwho = "" + C2;
				} else {
					adminwho += ", " + C2;
				}
			}
			reason = GlobalFuncs.sql_sanitize_text( reason );
			sql = "INSERT INTO erro_ban (`id`,`bantime`,`serverip`,`bantype`,`reason`,`job`,`duration`,`rounds`,`expiration_time`,`ckey`,`computerid`,`ip`,`a_ckey`,`a_computerid`,`a_ip`,`who`,`adminwho`,`edits`,`unbanned`,`unbanned_datetime`,`unbanned_ckey`,`unbanned_computerid`,`unbanned_ip`) VALUES (null, Now(), '" + serverip + "', '" + bantype_str + "', '" + reason + "', '" + job + "', " + ( Lang13.Bool( duration ) ? "" + duration : "0" ) + ", " + ( rounds == true ? "" + rounds : "0" ) + ", Now() + INTERVAL " + ( Convert.ToDouble( duration ) > 0 ? duration : ((dynamic)( 0 )) ) + " MINUTE, '" + ckey + "', '" + computerid + "', '" + ip + "', '" + a_ckey + "', '" + a_computerid + "', '" + a_ip + "', '" + who + "', '" + adminwho + "', '', null, null, null, null, null)";
			query_insert = GlobalVars.dbcon.NewQuery( sql );
			query_insert.Execute();
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Ban saved to database.</span>" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has added a " + bantype_str + " for " + ckey + " " + ( Lang13.Bool( job ) ? "(" + job + ")" : "" ) + " " + ( Convert.ToDouble( duration ) > 0 ? "(" + duration + " minutes)" : "" ) + " with the reason: \"" + reason + "\" to the ban database." );

			if ( GlobalVars.on_ban is _Event ) {
				GlobalVars.on_ban.Invoke( new ByTable()
					.Set( "ckey", ckey )
					.Set( "computer_id", computerid )
					.Set( "reason", reason )
					.Set( "duration", duration )
					.Set( "ip", ip )
					.Set( "type", bantype )
					.Set( "job", job )
					.Set( "admin", Task13.User )
				 );
			}
			return;
		}

		// Function from file: vg-web.dm
		public string getVGPanel( string route = null, ByTable query = null, bool? admin = null ) {
			query = query ?? new ByTable();
			admin = admin ?? false;

			string url = null;

			this.checkSessionKey();
			url = "" + GlobalVars.config.vgws_base_url + "/index.php/" + route;

			if ( admin == true ) {
				query["s"] = this.sessKey;
			}
			url += GlobalFuncs.buildurlquery( query );
			return url;
		}

		// Function from file: player_panel.dm
		public void player_panel_old(  ) {
			string dat = null;
			ByTable mobs = null;
			dynamic M = null;
			dynamic H = null;

			
			if ( !( Task13.User.client.holder != null ) ) {
				return;
			}
			dat = "<html><head><title>Player Menu</title></head>\n<body><table border=1 cellspacing=5><B><tr><th>Name</th><th>Real Name</th><th>Assigned Job</th><th>Key</th><th>Options</th><th>PM</th><th>Traitor?</th></tr></B>";
			mobs = GlobalFuncs.sortmobs();

			foreach (dynamic _b in Lang13.Enumerate( mobs )) {
				M = _b;
				

				if ( !Lang13.Bool( M.ckey ) ) {
					continue;
				}
				dat += "<tr><td>" + M.name + "</td>";

				if ( M is Mob_Living_Silicon_Ai ) {
					dat += "<td>AI</td>";
				} else if ( M is Mob_Living_Silicon_Robot ) {
					dat += "<td>Cyborg</td>";
				} else if ( M is Mob_Living_Carbon_Human ) {
					dat += "<td>" + M.real_name + "</td>";
				} else if ( M is Mob_Living_Silicon_Pai ) {
					dat += "<td>pAI</td>";
				} else if ( M is Mob_NewPlayer ) {
					dat += "<td>New Player</td>";
				} else if ( M is Mob_Dead_Observer ) {
					dat += "<td>Ghost</td>";
				} else if ( M is Mob_Living_Carbon_Monkey ) {
					dat += "<td>Monkey</td>";
				} else if ( M is Mob_Living_Carbon_Alien ) {
					dat += "<td>Alien</td>";
				} else if ( M is Mob_Living_SimpleAnimal_Borer ) {
					dat += "<td>Borer</td>";
				} else {
					dat += "<td>Unknown</td>";
				}

				if ( M is Mob_Living_Carbon_Human ) {
					H = M;

					if ( Lang13.Bool( H.mind ) && Lang13.Bool( H.mind.assigned_role ) ) {
						dat += "<td>" + H.mind.assigned_role + "</td>";
					}
				} else {
					dat += "<td>NA</td>";
				}
				dat += new Txt( "<td>" ).item( ( Lang13.Bool( M.client ) ? "" + M.client : "No client" ) ).str( "</td>\n		<td align=center><A HREF='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M ).str( "'>X</A></td>\n		<td align=center><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M ).str( "'>PM</A></td>\n		" ).ToString();

				switch ((int)( GlobalFuncs.is_special_character( M ) )) {
					case 0:
						dat += new Txt( "<td align=center><A HREF='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M ).str( "'>Traitor?</A></td>" ).ToString();
						break;
					case 1:
						dat += new Txt( "<td align=center><A HREF='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M ).str( "'><font color=red>Traitor?</font></A></td>" ).ToString();
						break;
					case 2:
						dat += new Txt( "<td align=center><A HREF='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M ).str( "'><font color=red><b>Traitor?</b></font></A></td>" ).ToString();
						break;
				}
			}
			dat += "</table></body></html>";
			Interface13.Browse( Task13.User, dat, "window=players;size=640x480" );
			return;
		}

		// Function from file: player_panel.dm
		public void player_panel_new(  ) {
			string dat = null;
			ByTable mobs = null;
			int i = 0;
			dynamic M = null;
			string color = null;
			int is_antagonist = 0;
			string M_job = null;
			string M_name = null;
			string M_rname = null;
			string M_key = null;

			
			if ( !( Task13.User.client.holder != null ) ) {
				return;
			}
			dat = "<html><head><title>Admin Player Panel</title></head>";
			dat += new Txt( @"

		<head>
			<script type='text/javascript'>

				var locked_tabs = new Array();

				function updateSearch(){


					var filter_text = document.getElementById('filter');
					var filter = filter_text.value.toLowerCase();

					if(complete_list != null && complete_list != """"){
						var mtbl = document.getElementById(""maintable_data_archive"");
						mtbl.innerHTML = complete_list;
					}

					if(filter.value == """"){
						return;
					}else{

						var maintable_data = document.getElementById('maintable_data');
						var ltr = maintable_data.getElementsByTagName(""tr"");
						for ( var i = 0; i < ltr.length; ++i )
						{
							try{
								var tr = ltr[i];
								if(tr.getAttribute(""id"").indexOf(""data"") != 0){
									continue;
								}
								var ltd = tr.getElementsByTagName(""td"");
								var td = ltd[0];
								var lsearch = td.getElementsByTagName(""b"");
								var search = lsearch[0];
								//var inner_span = li.getElementsByTagName(""span"")[1] //Should only ever contain one element.
								//document.write(""<p>""+search.innerText+""<br>""+filter+""<br>""+search.innerText.indexOf(filter))
								if ( search.innerText.toLowerCase().indexOf(filter) == -1 )
								{
									//document.write(""a"");
									//ltr.removeChild(tr);
									td.innerHTML = """";
									i--;
								}
							}catch(err) {   }
						}
					}

					var count = 0;
					var index = -1;
					var debug = document.getElementById(""debug"");

					locked_tabs = new Array();

				}

				function expand(id,job,name,real_name,image,key,ip,antagonist,ref){

					clearAll();

					var span = document.getElementById(id);

					body = ""<table><tr><td>"";

					body += ""</td><td align='center'>"";

					body += ""<font size='2'><b>""+job+"" ""+name+""</b><br><b>Real name ""+real_name+""</b><br><b>Played by ""+key+"" (""+ip+"")</b></font>""

					body += ""</td><td align='center'>"";

					body += ""<a href='?src=" ).Ref( this ).str( ";adminplayeropts=\"+ref+\"'>PP</a> - \"\n					body += \"<a href='?src=" ).Ref( this ).str( ";notes=show;mob=\"+ref+\"'>N</a> - \"\n					body += \"<a href='?_src_=vars;Vars=\"+ref+\"'>VV</a> - \"\n					body += \"<a href='?src=" ).Ref( this ).str( ";traitor=\"+ref+\"'>TP</a> - \"\n					body += \"<a href='?src=" ).Ref( Task13.User ).str( ";priv_msg=\"+ref+\"'>PM</a> - \"\n					body += \"<a href='?src=" ).Ref( this ).str( ";subtlemessage=\"+ref+\"'>SM</a> - \"\n					body += \"<a href='?src=" ).Ref( this ).str( ";adminplayerobservejump=\"+ref+\"'>JMP</a><br>\"\n					if(antagonist > 0)\n						body += \"<font size='2'><a href='?src=" ).Ref( this ).str( @";check_antagonist=1'><font color='red'><b>Antagonist</b></font></a></font>"";

					body += ""</td></tr></table>"";


					span.innerHTML = body
				}

				function clearAll(){
					var spans = document.getElementsByTagName('span');
					for(var i = 0; i < spans.length; i++){
						var span = spans[i];

						var id = span.getAttribute(""id"");

						if(!(id.indexOf(""item"")==0))
							continue;

						var pass = 1;

						for(var j = 0; j < locked_tabs.length; j++){
							if(locked_tabs[j]==id){
								pass = 0;
								break;
							}
						}

						if(pass != 1)
							continue;




						span.innerHTML = """";
					}
				}

				function addToLocked(id,link_id,notice_span_id){
					var link = document.getElementById(link_id);
					var decision = link.getAttribute(""name"");
					if(decision == ""1""){
						link.setAttribute(""name"",""2"");
					}else{
						link.setAttribute(""name"",""1"");
						removeFromLocked(id,link_id,notice_span_id);
						return;
					}

					var pass = 1;
					for(var j = 0; j < locked_tabs.length; j++){
						if(locked_tabs[j]==id){
							pass = 0;
							break;
						}
					}
					if(!pass)
						return;
					locked_tabs.push(id);
					var notice_span = document.getElementById(notice_span_id);
					notice_span.innerHTML = ""<font color='red'>Locked</font> "";
					//link.setAttribute(""onClick"",""attempt('""+id+""','""+link_id+""','""+notice_span_id+""');"");
					//document.write(""removeFromLocked('""+id+""','""+link_id+""','""+notice_span_id+""')"");
					//document.write(""aa - ""+link.getAttribute(""onClick""));
				}

				function attempt(ab){
					return ab;
				}

				function removeFromLocked(id,link_id,notice_span_id){
					//document.write(""a"");
					var index = 0;
					var pass = 0;
					for(var j = 0; j < locked_tabs.length; j++){
						if(locked_tabs[j]==id){
							pass = 1;
							index = j;
							break;
						}
					}
					if(!pass)
						return;
					locked_tabs[index] = """";
					var notice_span = document.getElementById(notice_span_id);
					notice_span.innerHTML = """";
					//var link = document.getElementById(link_id);
					//link.setAttribute(""onClick"",""addToLocked('""+id+""','""+link_id+""','""+notice_span_id+""')"");
				}

				function selectTextField(){
					var filter_text = document.getElementById('filter');
					filter_text.focus();
					filter_text.select();
				}

			</script>
		</head>


	" ).ToString();
			dat += "<body onload='selectTextField(); updateSearch();' onkeyup='updateSearch();'>";
			dat += new Txt( @"

		<table width='560' align='center' cellspacing='0' cellpadding='5' id='maintable'>
			<tr id='title_tr'>
				<td align='center'>
					<font size='5'><b>Player panel</b></font><br>
					Hover over a line to see more information - <a href='?src=" ).Ref( this ).str( @";check_antagonist=1'>Check antagonists</a>
					<p>
				</td>
			</tr>
			<tr id='search_tr'>
				<td align='center'>
					<b>Search:</b> <input type='text' id='filter' value='' style='width:300px;'>
				</td>
			</tr>
	</table>

	" ).ToString();
			dat += "\n		<span id='maintable_data_archive'>\n		<table width='560' align='center' cellspacing='0' cellpadding='5' id='maintable_data'>";
			mobs = GlobalFuncs.sortmobs();
			i = 1;

			foreach (dynamic _a in Lang13.Enumerate( mobs )) {
				M = _a;
				

				if ( Lang13.Bool( M.ckey ) ) {
					color = "#e6e6e6";

					if ( i % 2 == 0 ) {
						color = "#f2f2f2";
					}
					is_antagonist = GlobalFuncs.is_special_character( M );
					M_job = "";

					if ( M is Mob_Living ) {
						
						if ( M is Mob_Living_Carbon ) {
							
							if ( M is Mob_Living_Carbon_Human ) {
								M_job = M.job;
							} else if ( M is Mob_Living_Carbon_Slime ) {
								M_job = "slime";
							} else if ( M is Mob_Living_Carbon_Monkey ) {
								M_job = "Monkey";
							} else if ( M is Mob_Living_Carbon_Alien ) {
								
								if ( M is Mob_Living_Carbon_Alien_Larva ) {
									M_job = "Alien larva";
								} else {
									M_job = "Alien";
								}
							} else {
								M_job = "Carbon-based";
							}
						} else if ( M is Mob_Living_Silicon ) {
							
							if ( M is Mob_Living_Silicon_Ai ) {
								M_job = "AI";
							} else if ( M is Mob_Living_Silicon_Pai ) {
								M_job = "pAI";
							} else if ( M is Mob_Living_Silicon_Robot ) {
								M_job = "Cyborg";
							} else if ( M is Mob_Living_Silicon_Robot_Mommi ) {
								M_job = "Mobile-MMI";
							} else {
								M_job = "Silicon-based";
							}
						} else if ( M is Mob_Living_SimpleAnimal ) {
							
							if ( M is Mob_Living_SimpleAnimal_Corgi ) {
								M_job = "Corgi";
							} else if ( M is Mob_Living_SimpleAnimal_Borer ) {
								M_job = "Borer";
							} else {
								M_job = "Animal";
							}
						} else {
							M_job = "Living";
						}
					} else if ( M is Mob_NewPlayer ) {
						M_job = "New player";
					} else if ( M is Mob_Dead_Observer ) {
						M_job = "Ghost";
					}
					M_job = GlobalFuncs.replacetext( M_job, "'", "" );
					M_job = GlobalFuncs.replacetext( M_job, "\"", "" );
					M_job = GlobalFuncs.replacetext( M_job, "\\", "" );
					M_name = M.name;
					M_name = GlobalFuncs.replacetext( M_name, "'", "" );
					M_name = GlobalFuncs.replacetext( M_name, "\"", "" );
					M_name = GlobalFuncs.replacetext( M_name, "\\", "" );
					M_rname = M.real_name;
					M_rname = GlobalFuncs.replacetext( M_rname, "'", "" );
					M_rname = GlobalFuncs.replacetext( M_rname, "\"", "" );
					M_rname = GlobalFuncs.replacetext( M_rname, "\\", "" );
					M_key = M.key;
					M_key = GlobalFuncs.replacetext( M_key, "'", "" );
					M_key = GlobalFuncs.replacetext( M_key, "\"", "" );
					M_key = GlobalFuncs.replacetext( M_key, "\\", "" );
					dat += new Txt( "\n\n				<tr id='data" ).item( i ).str( "' name='" ).item( i ).str( "' onClick=\"addToLocked('item" ).item( i ).str( "','data" ).item( i ).str( "','notice_span" ).item( i ).str( "')\">\n					<td align='center' bgcolor='" ).item( color ).str( "'>\n						<span id='notice_span" ).item( i ).str( "'></span>\n						<a id='link" ).item( i ).str( "'\n						onmouseover='expand(\"item" ).item( i ).str( "\",\"" ).item( M_job ).str( "\",\"" ).item( M_name ).str( "\",\"" ).item( M_rname ).str( "\",\"--unused--\",\"" ).item( M_key ).str( "\",\"" ).item( M.lastKnownIP ).str( "\"," ).item( is_antagonist ).str( ",\"" ).Ref( M ).str( "\")'\n						>\n						<b id='search" ).item( i ).str( "'>" ).item( M_name ).str( " - " ).item( M_rname ).str( " - " ).item( M_key ).str( " (" ).item( M_job ).str( ")</b>\n						</a>\n						<br><span id='item" ).item( i ).str( @"'></span>
					</td>
				</tr>

			" ).ToString();
					i++;
				}
			}
			dat += @"
		</table>
		</span>

		<script type='text/javascript'>
			var maintable = document.getElementById(""maintable_data_archive"");
			var complete_list = maintable.innerHTML;
		</script>
	</body></html>
	";
			Interface13.Browse( Task13.User, dat, "window=players;size=600x480" );
			return;
		}

		// Function from file: newbanjob.dm
		public void unjobbanpanel(  ) {
			int count = 0;
			dynamic dat = null;
			dynamic A = null;

			count = 0;
			GlobalVars.Banlistjob.cd = "/base";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.Banlistjob.dir )) {
				A = _a;
				
				count++;
				GlobalVars.Banlistjob.cd = "/base/" + A;
				dat += new Txt( "<tr><td><A href='?src=" ).Ref( this ).str( ";unjobbanf=" ).item( GlobalVars.Banlistjob["key"] ).item( GlobalVars.Banlistjob["id"] ).item( GlobalVars.Banlistjob["rank"] ).str( "'>(U)</A> Key: <B>" ).item( GlobalVars.Banlistjob["key"] ).str( " </B>Rank: <B>" ).item( GlobalVars.Banlistjob["rank"] ).str( "</B></td><td> (" ).item( ( Lang13.Bool( GlobalVars.Banlistjob["temp"] ) ? "" + ( Lang13.Bool( GlobalFuncs.GetBanExpjob( GlobalVars.Banlistjob["minutes"] ) ) ? GlobalFuncs.GetBanExpjob( GlobalVars.Banlistjob["minutes"] ) : ((dynamic)( "Removal pending" )) ) : "Permaban" ) ).str( ")</td><td>(By: " ).item( GlobalVars.Banlistjob["bannedby"] ).str( ")</td><td>(Reason: " ).item( GlobalVars.Banlistjob["reason"] ).str( ")</td></tr>" ).ToString();
			}
			dat += "</table>\n		<HR><B>Bans:</B> <FONT COLOR=blue>(U) = Unban , </FONT> - <FONT COLOR=green>(" + count + " Bans)</FONT><HR><table border=1 rules=all frame=void cellspacing=0 cellpadding=3 >" + dat;
			Interface13.Browse( Task13.User, dat, "window=unbanp;size=875x400" );
			return;
		}

		// Function from file: NewBan.dm
		public void unbanpanel(  ) {
			int count = 0;
			dynamic dat = null;
			dynamic A = null;
			string _ref = null;
			dynamic key = null;
			dynamic id = null;
			dynamic ip = null;
			dynamic reason = null;
			dynamic by = null;
			dynamic expiry = null;

			count = 0;
			GlobalVars.Banlist.cd = "/base";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.Banlist.dir )) {
				A = _a;
				
				count++;
				GlobalVars.Banlist.cd = "/base/" + A;
				_ref = new Txt().Ref( this ).ToString();
				key = GlobalVars.Banlist["key"];
				id = GlobalVars.Banlist["id"];
				ip = GlobalVars.Banlist["ip"];
				reason = GlobalVars.Banlist["reason"];
				by = GlobalVars.Banlist["bannedby"];
				expiry = null;

				if ( Lang13.Bool( GlobalVars.Banlist["temp"] ) ) {
					expiry = GlobalFuncs.GetExp( Convert.ToDouble( GlobalVars.Banlist["minutes"] ) );

					if ( !Lang13.Bool( expiry ) ) {
						expiry = "Removal Pending";
					}
				} else {
					expiry = "Permaban";
				}
				dat += "<tr><td><A href='?src=" + _ref + ";unbanf=" + key + id + "'>(U)</A><A href='?src=" + _ref + ";unbane=" + key + id + "'>(E)</A> Key: <B>" + key + "</B></td><td>ComputerID: <B>" + id + "</B></td><td>IP: <B>" + ip + "</B></td><td> " + expiry + "</td><td>(By: " + by + ")</td><td>(Reason: " + reason + ")</td></tr>";
			}
			dat += "</table>\n		<HR><B>Bans:</B> <FONT COLOR=blue>(U) = Unban , (E) = Edit Ban</FONT> - <FONT COLOR=green>(" + count + " Bans)</FONT><HR><table border=1 rules=all frame=void cellspacing=0 cellpadding=3 >" + dat;
			Interface13.Browse( Task13.User, dat, "window=unbanp;size=875x400" );
			return;
		}

		// Function from file: holder2.dm
		public dynamic checkSessionKey( int? recurse = null ) {
			recurse = recurse ?? 0;

			DBQuery query = null;

			
			if ( recurse == 5 ) {
				return "[BROKEN]";
			}
			recurse++;
			query = GlobalVars.dbcon.NewQuery( "DELETE FROM admin_sessions WHERE expires < Now()" );
			query.Execute();
			query = GlobalVars.dbcon.NewQuery( "SELECT sessID FROM admin_sessions WHERE ckey = '" + this.owner.ckey + "' AND expires > Now()" );
			query.Execute();
			this.sessKey = false;

			while (query.NextRow()) {
				this.sessKey = Lang13.Bool( query.item[1] );
				query = GlobalVars.dbcon.NewQuery( "UPDATE admin_sessions SET expires=DATE_ADD(NOW(), INTERVAL 24 HOUR), IP='" + this.owner.address + "' WHERE ckey = '" + this.owner.ckey );
				query.Execute();
				return this.sessKey;
			}
			query = GlobalVars.dbcon.NewQuery( "INSERT INTO admin_sessions (sessID,ckey,expires, IP) VALUES (UUID(), '" + this.owner.ckey + "', DATE_ADD(NOW(), INTERVAL 24 HOUR), '" + this.owner.address + "')" );
			query.Execute();
			return this.checkSessionKey( recurse );
		}

		// Function from file: holder2.dm
		public void disassociate(  ) {
			
			if ( this.owner != null ) {
				GlobalVars.admins.Remove( this.owner );
				this.owner.remove_admin_verbs();
				this.owner.holder = null;
				this.owner = null;
			}
			return;
		}

		// Function from file: holder2.dm
		public void associate( Client C = null ) {
			
			if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
				this.owner = C;
				this.owner.holder = this;
				this.owner.add_admin_verbs();
				GlobalVars.admins.Or( C );
				this.owner.verbs.Remove( typeof(Client).GetMethod( "readmin" ) );
			}
			return;
		}

		// Function from file: create_turf.dm
		public void create_turf( Mob user = null ) {
			string turfjs = null;

			
			if ( !Lang13.Bool( GlobalVars.create_turf_html ) ) {
				turfjs = null;
				turfjs = GlobalFuncs.list2text( Lang13.GetTypes( typeof(Tile) ), ";" );
				GlobalVars.create_turf_html = File13.Read( "html/create_object.html" );
				GlobalVars.create_turf_html = GlobalFuncs.replacetext( GlobalVars.create_turf_html, "null /* object types */", "\"" + turfjs + "\"" );
			}
			Interface13.Browse( user, GlobalFuncs.replacetext( GlobalVars.create_turf_html, "/* ref src */", new Txt().Ref( this ).ToString() ), "window=create_turf;size=425x475" );
			return;
		}

		// Function from file: create_object.dm
		public void quick_create_object( Mob user = null ) {
			string quick_create_object_html = null;
			dynamic pathtext = null;
			Type path = null;
			string objectjs = null;

			quick_create_object_html = null;
			pathtext = null;
			pathtext = Interface13.Input( "Select the path of the object you wish to create.", "Path", "/obj", null, new ByTable(new object [] { "/obj", "/obj/structure", "/obj/item", "/obj/item/weapon", "/obj/machinery" }), InputType.Any );
			path = Lang13.FindClass( pathtext );

			if ( !Lang13.Bool( quick_create_object_html ) ) {
				objectjs = null;
				objectjs = GlobalFuncs.list2text( Lang13.GetTypes( path ), ";" );
				quick_create_object_html = File13.Read( "html/create_object.html" );
				quick_create_object_html = GlobalFuncs.replacetext( quick_create_object_html, "null /* object types */", "\"" + objectjs + "\"" );
			}
			Interface13.Browse( user, GlobalFuncs.replacetext( quick_create_object_html, "/* ref src */", new Txt().Ref( this ).ToString() ), "window=quick_create_object;size=425x475" );
			return;
		}

		// Function from file: create_object.dm
		public void create_object( Mob user = null ) {
			string objectjs = null;

			
			if ( !Lang13.Bool( GlobalVars.create_object_html ) ) {
				objectjs = null;
				objectjs = GlobalFuncs.list2text( Lang13.GetTypes( typeof(Obj) ), ";" );
				GlobalVars.create_object_html = File13.Read( "html/create_object.html" );
				GlobalVars.create_object_html = GlobalFuncs.replacetext( GlobalVars.create_object_html, "null /* object types */", "\"" + objectjs + "\"" );
			}
			Interface13.Browse( user, GlobalFuncs.replacetext( GlobalVars.create_object_html, "/* ref src */", new Txt().Ref( this ).ToString() ), "window=create_object;size=425x475" );
			return;
		}

		// Function from file: create_mob.dm
		public void create_mob( Mob user = null ) {
			string mobjs = null;

			
			if ( !Lang13.Bool( GlobalVars.create_mob_html ) ) {
				mobjs = null;
				mobjs = GlobalFuncs.list2text( Lang13.GetTypes( typeof(Mob) ), ";" );
				GlobalVars.create_mob_html = File13.Read( "html/create_object.html" );
				GlobalVars.create_mob_html = GlobalFuncs.replacetext( GlobalVars.create_mob_html, "null /* object types */", "\"" + mobjs + "\"" );
			}
			Interface13.Browse( user, GlobalFuncs.replacetext( GlobalVars.create_mob_html, "/* ref src */", new Txt().Ref( this ).ToString() ), "window=create_mob;size=425x520" );
			return;
		}

		// Function from file: check_antagonists.dm
		public void check_antagonists(  ) {
			string dat = null;
			double timeleft = 0;
			Mind N = null;
			dynamic M = null;
			dynamic N2 = null;
			Ent_Static disk_loc = null;
			Ent_Static M2 = null;
			Ent_Static O = null;
			Mind N3 = null;
			dynamic M3 = null;
			Mind N4 = null;
			dynamic M4 = null;
			Mind N5 = null;
			dynamic M5 = null;
			dynamic mob_loc = null;
			Mind changeling = null;
			dynamic M6 = null;
			Mind wizard = null;
			dynamic M7 = null;
			Mind N6 = null;
			dynamic M8 = null;
			int living_crew = 0;
			int living_cultists = 0;
			Mob_Living L = null;
			dynamic cult_round = null;
			int? obj_count = null;
			string explanation = null;
			Mind vampire = null;
			dynamic M9 = null;
			Mind Mind = null;
			dynamic M10 = null;
			Mind traitor = null;
			dynamic M11 = null;
			dynamic mode = null;
			Mind blob = null;
			dynamic M12 = null;
			dynamic M13 = null;
			Mind vox = null;
			dynamic M14 = null;
			dynamic mode_ticker = null;
			int objective_count = 0;
			Objective objective = null;
			Mind ert = null;
			dynamic M15 = null;
			Mind deathsquad = null;
			dynamic M16 = null;

			
			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state >= 3 ) {
				dat = "<html><head><title>Round Status</title></head><body><h1><B>Round Status</B></h1>";
				dat += "Current Game Mode: <B>" + GlobalVars.ticker.mode.name + "</B><BR>\n			Round Duration: <B>" + Num13.Floor( Game13.time / 36000 ) + ":" + GlobalFuncs.add_zero( Game13.time / 600 % 60, 2 ) + ":" + Game13.time / 100 % 6 + Game13.time / 100 % 10 + "</B><BR>\n			<B>Emergency shuttle</B><BR>";

				if ( !GlobalVars.emergency_shuttle.online ) {
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";call_shuttle=1'>Call Shuttle</a><br>" ).ToString();
				} else {
					timeleft = GlobalVars.emergency_shuttle.timeleft();

					switch ((int)( GlobalVars.emergency_shuttle.location )) {
						case 0:
							dat += new Txt( "ETA: <a href='?src=" ).Ref( this ).str( ";edit_shuttle_time=1'>" ).item( timeleft / 60 % 60 ).str( ":" ).item( GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) ).str( "</a><BR>\n						<a href='?src=" ).Ref( this ).str( ";call_shuttle=2'>Send Back</a><br>" ).ToString();
							break;
						case 1:
							dat += new Txt( "ETA: <a href='?src=" ).Ref( this ).str( ";edit_shuttle_time=1'>" ).item( timeleft / 60 % 60 ).str( ":" ).item( GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) ).str( "</a><BR>" ).ToString();
							break;
					}
				}
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";delay_round_end=1'>" ).item( ( GlobalVars.ticker.delay_end != 0 ? "End Round Normally" : "Delay Round End" ) ).str( "</a><br>" ).ToString();

				if ( GlobalVars.ticker.mode.syndicates.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Syndicates</B></td><td></td></tr>";

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.ticker.mode.syndicates, typeof(Mind) )) {
						N = _b;
						
						M = N.current;

						if ( Lang13.Bool( M ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M ).str( "'>" ).item( M.real_name ).str( "</a>" ).item( ( Lang13.Bool( M.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M ).str( "'>PM</A></td></tr>" ).ToString();
						} else {
							dat += "<tr><td><i>Nuclear Operative not found!</i></td></tr>";
						}
					}
					dat += "</table><br><table><tr><td><B>Nuclear Disk(s)</B></td></tr>";
					N2 = Lang13.FindObj( typeof(Obj_Item_Weapon_Disk_Nuclear) );

					if ( Lang13.Bool( N2 ) ) {
						dat += "<tr><td>" + N2.name + ", ";
						disk_loc = N2.loc;

						while (!( disk_loc is Tile )) {
							
							if ( disk_loc is Mob ) {
								M2 = disk_loc;
								dat += new Txt( "carried by <a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M2 ).str( "'>" ).item( ((dynamic)M2).real_name ).str( "</a> " ).ToString();
							}

							if ( disk_loc is Obj ) {
								O = disk_loc;
								dat += new Txt( "in " ).a( O.name ).item().str( " " ).ToString();
							}
							disk_loc = disk_loc.loc;
						}
						dat += "in " + disk_loc.loc + " at (" + disk_loc.x + ", " + disk_loc.y + ", " + disk_loc.z + ")</td></tr>";
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.head_revolutionaries.len != 0 || GlobalVars.ticker.mode.revolutionaries.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Revolutionaries</B></td><td></td></tr>";

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.ticker.mode.head_revolutionaries, typeof(Mind) )) {
						N3 = _c;
						
						M3 = N3.current;

						if ( !Lang13.Bool( M3 ) ) {
							dat += "<tr><td><i>Head Revolutionary not found!</i></td></tr>";
						} else {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M3 ).str( "'>" ).item( M3.real_name ).str( "</a> <b>(Leader)</b>" ).item( ( Lang13.Bool( M3.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M3.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M3 ).str( "'>PM</A></td></tr>" ).ToString();
						}
					}

					foreach (dynamic _d in Lang13.Enumerate( GlobalVars.ticker.mode.revolutionaries, typeof(Mind) )) {
						N4 = _d;
						
						M4 = N4.current;

						if ( Lang13.Bool( M4 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M4 ).str( "'>" ).item( M4.real_name ).str( "</a>" ).item( ( Lang13.Bool( M4.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M4.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M4 ).str( "'>PM</A></td></tr>" ).ToString();
						}
					}
					dat += "</table><table cellspacing=5><tr><td><B>Target(s)</B></td><td></td><td><B>Location</B></td></tr>";

					foreach (dynamic _e in Lang13.Enumerate( ((GameMode)GlobalVars.ticker.mode).get_living_heads(), typeof(Mind) )) {
						N5 = _e;
						
						M5 = N5.current;

						if ( Lang13.Bool( M5 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M5 ).str( "'>" ).item( M5.real_name ).str( "</a>" ).item( ( Lang13.Bool( M5.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M5.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M5 ).str( "'>PM</A></td>" ).ToString();
							mob_loc = GlobalFuncs.get_turf( M5 );
							dat += "<td>" + mob_loc.loc + "</td></tr>";
						} else {
							dat += "<tr><td><i>Head not found!</i></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.changelings.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Changelings</B></td><td></td><td></td></tr>";

					foreach (dynamic _f in Lang13.Enumerate( GlobalVars.ticker.mode.changelings, typeof(Mind) )) {
						changeling = _f;
						
						M6 = changeling.current;

						if ( Lang13.Bool( M6 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M6 ).str( "'>" ).item( M6.real_name ).str( "</a>" ).item( ( Lang13.Bool( M6.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M6.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M6 ).str( "'>PM</A></td>\n						<td><A HREF='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M6 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += "<tr><td><i>Changeling not found!</i></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.wizards.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Wizards</B></td><td></td><td></td></tr>";

					foreach (dynamic _g in Lang13.Enumerate( GlobalVars.ticker.mode.wizards, typeof(Mind) )) {
						wizard = _g;
						
						M7 = wizard.current;

						if ( Lang13.Bool( M7 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M7 ).str( "'>" ).item( M7.real_name ).str( "</a>" ).item( ( Lang13.Bool( M7.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M7.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M7 ).str( "'>PM</A></td>\n						<td><A HREF='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M7 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += "<tr><td><i>Wizard not found!</i></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.cult.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Cultists</B></td><td></td></tr>";

					foreach (dynamic _h in Lang13.Enumerate( GlobalVars.ticker.mode.cult, typeof(Mind) )) {
						N6 = _h;
						
						M8 = N6.current;

						if ( Lang13.Bool( M8 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M8 ).str( "'>" ).item( M8.real_name ).str( "</a>" ).item( ( Lang13.Bool( M8.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M8.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M8 ).str( "'>PM</A></td>\n						<td><A href='?src=" ).Ref( this ).str( ";cult_privatespeak=" ).Ref( M8 ).str( "'>Nar-Speak</A></td></tr>" ).ToString();
						}
					}
					dat += "</table>";
					living_crew = 0;
					living_cultists = 0;

					foreach (dynamic _i in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
						L = _i;
						

						if ( L.stat != 2 ) {
							Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( L.mind ) );

							if ( false ) {
								living_cultists++;
							} else if ( L is Mob_Living_Carbon ) {
								living_crew++;
							}
						}
					}
					dat += new Txt( "<br>" ).item( living_cultists ).str( " living cultists. (use <a href='?src=" ).Ref( this ).str( ";cult_mindspeak=" ).Ref( this ).str( "'>Voice of Nar-Sie</a>)" ).ToString();
					dat += "<br>" + living_crew + " living non-cultists.";
					dat += "<br>";
					cult_round = GlobalFuncs.find_active_mode( "cult" );

					if ( Lang13.Bool( cult_round ) ) {
						dat += "<br><B>Cult Objectives:</B>";
						obj_count = null;
						obj_count = 1;

						while (( obj_count ??0) <= cult_round.objectives.len) {
							explanation = null;

							dynamic _j = cult_round.objectives[obj_count]; // Was a switch-case, sorry for the mess.
							if ( _j=="convert" ) {
								explanation = "Reach a total of " + cult_round.convert_target + " cultists." + ( ( obj_count ??0) < cult_round.objectives.len ? "<font color='green'><B>Success!</B></font>" : "(currently " + cult_round.cult.len + " cultists)" );
							} else if ( _j=="bloodspill" ) {
								explanation = "Cover " + cult_round.spilltarget + " tiles in blood." + ( ( obj_count ??0) < cult_round.objectives.len ? "<font color='green'><B>Success!</B></font>" : "(currently " + cult_round.bloody_floors.len + " bloody floors)" );
							} else if ( _j=="sacrifice" ) {
								explanation = "Sacrifice " + cult_round.sacrifice_target.name + ", the " + cult_round.sacrifice_target.assigned_role + "." + ( ( obj_count ??0) < cult_round.objectives.len ? "<font color='green'><B>Success!</B></font>" : "" );
							} else if ( _j=="eldergod" ) {
								explanation = "Summon Nar-Sie." + ( ( obj_count ??0) < cult_round.objectives.len ? "<font color='green'><B>Success!</B></font>" : "" );
							} else if ( _j=="harvest" ) {
								explanation = "Bring " + cult_round.harvest_target + " humans directly to Nar-Sie." + ( cult_round.bonus ? "<font color='green'><B>Success!</B></font>" : "(currently " + cult_round.harvested + " sacrifices)" );
							} else if ( _j=="hijack" ) {
								explanation = "Don't let any non-cultist escape on the Shuttle alive." + ( cult_round.bonus ? "<font color='green'><B>Success!</B></font>" : "" );
							} else if ( _j=="massacre" ) {
								explanation = "Massacre the crew until there are less than " + cult_round.massacre_target + " people left on the station." + ( cult_round.bonus ? "<font color='green'><B>Success!</B></font>" : "" );
							}
							dat += "<br><B>Objective #" + obj_count + "</B>: " + explanation;
							obj_count++;
						}

						if ( !cult_round.narsie_condition_cleared ) {
							dat += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";cult_nextobj=" ).Ref( this ).str( "'>complete objective (debug)</a>" ).ToString();
						}
					}
				}

				if ( GlobalVars.ticker.mode.vampires.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Vampires</B></td><td></td><td></td></tr>";

					foreach (dynamic _k in Lang13.Enumerate( GlobalVars.ticker.mode.vampires, typeof(Mind) )) {
						vampire = _k;
						
						M9 = vampire.current;

						if ( Lang13.Bool( M9 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M9 ).str( "'>" ).item( M9.real_name ).str( "</a>" ).item( ( Lang13.Bool( M9.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M9.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M9 ).str( "'>PM</A></td>\n						<td><A HREF='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M9 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += "<tr><td><i>Vampire not found!</i></td></tr>";
						}
					}
				}

				if ( GlobalVars.ticker.mode.enthralled.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Thralls</B></td><td></td><td></td></tr>";

					foreach (dynamic _l in Lang13.Enumerate( GlobalVars.ticker.mode.enthralled, typeof(Mind) )) {
						Mind = _l;
						
						M10 = Mind.current;

						if ( Lang13.Bool( M10 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M10 ).str( "'>" ).item( M10.real_name ).str( "</a>" ).item( ( Lang13.Bool( M10.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M10.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M10 ).str( "'>PM</A></td>\n						<td><A HREF='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M10 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += "<tr><td><i>Enthralled not found!</i></td></tr>";
						}
					}
				}

				if ( GlobalVars.ticker.mode.traitors.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Traitors</B></td><td></td><td></td></tr>";

					foreach (dynamic _m in Lang13.Enumerate( GlobalVars.ticker.mode.traitors, typeof(Mind) )) {
						traitor = _m;
						
						M11 = traitor.current;

						if ( Lang13.Bool( M11 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M11 ).str( "'>" ).item( M11.real_name ).str( "</a>" ).item( ( Lang13.Bool( M11.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M11.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M11 ).str( "'>PM</A></td>\n						<td><A HREF='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M11 ).str( "'>Show Objective</A></td></tr>" ).ToString();
						} else {
							dat += "<tr><td><i>Traitor not found!</i></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode is GameMode_Blob ) {
					mode = GlobalVars.ticker.mode;
					dat += "<br><table cellspacing=5><tr><td><B>Blob</B></td><td></td><td></td></tr>\n				<tr><td><i>Progress: " + GlobalVars.blobs.len + "/" + mode.blobwincount + "</i></td></tr>";

					foreach (dynamic _n in Lang13.Enumerate( mode.infected_crew, typeof(Mind) )) {
						blob = _n;
						
						M12 = blob.current;

						if ( Lang13.Bool( M12 ) ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M12 ).str( "'>" ).item( M12.real_name ).str( "</a>" ).item( ( Lang13.Bool( M12.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M12.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?priv_msg=" ).Ref( M12 ).str( "'>PM</A></td>" ).ToString();
						} else {
							dat += "<tr><td><i>Blob not found!</i></td></tr>";
						}
					}
					dat += "</table>";
				} else if ( Lang13.Bool( Lang13.FindIn( typeof(Mob_Camera_Blob), GlobalVars.mob_list ) ) ) {
					dat += "<br><table cellspacing=5><tr><td><B>Blob</B></td><td></td><td></td></tr>";

					foreach (dynamic _o in Lang13.Enumerate( GlobalVars.mob_list )) {
						M13 = _o;
						

						if ( M13 is Mob_Camera_Blob ) {
							dat += new Txt( "<tr><td><a href='?_src_=holder;adminplayeropts=" ).Ref( M13 ).str( "'>" ).item( M13.real_name ).str( "</a>" ).item( ( Lang13.Bool( M13.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M13.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?priv_msg=" ).Ref( M13 ).str( "'>PM</A></td>" ).ToString();
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.raiders.len != 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Raiders</B></td><td></td><td></td></tr>";

					foreach (dynamic _p in Lang13.Enumerate( GlobalVars.ticker.mode.raiders, typeof(Mind) )) {
						vox = _p;
						
						M14 = vox.current;

						if ( Lang13.Bool( M14 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M14 ).str( "'>" ).item( M14.real_name ).str( "</a>" ).item( ( Lang13.Bool( M14.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M14.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M14 ).str( "'>PM</A></td></tr>" ).ToString();
						} else {
							dat += "<tr><td><i>Vox Raider not found!</i></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode is GameMode_Heist ) {
					mode_ticker = GlobalVars.ticker.mode;
					objective_count = 1;
					dat += "<br><B>Raider Objectives:</B>";

					foreach (dynamic _q in Lang13.Enumerate( mode_ticker.raid_objectives, typeof(Objective) )) {
						objective = _q;
						
						dat += "<BR><B>Objective #" + objective_count++ + "</B>: " + objective.explanation_text + "</td></tr>";
					}
				}

				if ( GlobalVars.ticker.mode.ert.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>ERT</B></td><td></td><td></td></tr>";

					foreach (dynamic _r in Lang13.Enumerate( GlobalVars.ticker.mode.ert, typeof(Mind) )) {
						ert = _r;
						
						M15 = ert.current;

						if ( Lang13.Bool( M15 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M15 ).str( "'>" ).item( M15.real_name ).str( "</a>" ).item( ( Lang13.Bool( M15.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M15.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M15 ).str( "'>PM</A></td>" ).ToString();
						} else {
							dat += "<tr><td><i>Emergency Responder not found!</i></td></tr>";
						}
					}
					dat += "</table>";
				}

				if ( GlobalVars.ticker.mode.deathsquad.len > 0 ) {
					dat += "<br><table cellspacing=5><tr><td><B>Deathsquad</B></td><td></td><td></td></tr>";

					foreach (dynamic _s in Lang13.Enumerate( GlobalVars.ticker.mode.deathsquad, typeof(Mind) )) {
						deathsquad = _s;
						
						M16 = deathsquad.current;

						if ( Lang13.Bool( M16 ) ) {
							dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";adminplayeropts=" ).Ref( M16 ).str( "'>" ).item( M16.real_name ).str( "</a>" ).item( ( Lang13.Bool( M16.client ) ? "" : " <i>(logged out)</i>" ) ).item( ( Convert.ToInt32( M16.stat ) == 2 ? " <b><font color=red>(DEAD)</font></b>" : "" ) ).str( "</td>\n						<td><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M16 ).str( "'>PM</A></td>" ).ToString();
						} else {
							dat += "<tr><td><i>Death Commando not found!</i></td></tr>";
						}
					}
					dat += "</table>";
				}
				dat += "</body></html>";
				Interface13.Browse( Task13.User, dat, "window=roundstatus;size=440x500" );
			} else {
				Interface13.Alert( "The game hasn't started yet!" );
			}
			return;
		}

		// Function from file: admin_verbs.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Stop All Media", desc: "Stops all music and video.", group: "Fun" )]
		public void media_stop_all(  ) {
			
			if ( !GlobalFuncs.check_rights( 8 ) ) {
				return;
			}
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has stopped all media." );
			GlobalFuncs.stop_all_media();
			return;
		}

		// Function from file: admin.dm
		public bool cmd_ghost_drag( Mob_Dead_Observer frommob = null, Mob tomob = null ) {
			string question = null;

			
			if ( !GlobalFuncs.check_rights( 1024, false ) ) {
				return false;
			}

			if ( !Lang13.Bool( frommob.ckey ) ) {
				return false;
			}
			question = "";

			if ( Lang13.Bool( tomob.ckey ) ) {
				question = "This mob already has a user (" + tomob.key + ") in control of it! ";
			}
			question += "Are you sure you want to place " + frommob.name + "(" + frommob.key + ") in control of " + tomob.name + "?";

			if ( Interface13.Alert( question, "Place ghost in control of mob?", "Yes", "No" ) != "Yes" ) {
				return true;
			}

			if ( !( frommob != null ) || !( tomob != null ) ) {
				return true;
			}
			tomob.ghostize( false );
			GlobalFuncs.message_admins( "<span class='adminnotice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " has put " + frommob.ckey + " in control of " + tomob.name + ".</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " stuffed " + frommob.ckey + " into " + tomob.name + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "CGD" );
			tomob.ckey = frommob.ckey;
			GlobalFuncs.qdel( frommob );
			return true;
		}

		// Function from file: admin.dm
		public void output_ai_laws(  ) {
			int ai_number = 0;
			Mob_Living_Silicon S = null;
			Mob_Living_Silicon R = null;
			Mob_Living_Silicon pAI = null;
			Mob_Living_Silicon pAI2 = null;

			ai_number = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon) )) {
				S = _a;
				
				ai_number++;

				if ( S is Mob_Living_Silicon_Ai ) {
					GlobalFuncs.to_chat( Task13.User, "<b>AI " + GlobalFuncs.key_name( S, Task13.User ) + "'s laws:</b>" );
				} else if ( S is Mob_Living_Silicon_Robot ) {
					R = S;
					GlobalFuncs.to_chat( Task13.User, "<b>CYBORG " + GlobalFuncs.key_name( S, Task13.User ) + " " + ( Lang13.Bool( ((dynamic)R).connected_ai ) ? "(Slaved to: " + ((dynamic)R).connected_ai + ")" : "(Independant)" ) + ": laws:</b>" );
				} else if ( S is Mob_Living_Silicon_Pai ) {
					pAI = S;
					GlobalFuncs.to_chat( Task13.User, "<b>pAI " + GlobalFuncs.key_name( S, Task13.User ) + "'s laws (master: " + ((dynamic)pAI).master + " ):</b>" );
				} else {
					GlobalFuncs.to_chat( Task13.User, "<b>SOMETHING SILICON " + GlobalFuncs.key_name( S, Task13.User ) + "'s laws:</b>" );
				}

				if ( S is Mob_Living_Silicon_Pai ) {
					pAI2 = S;
					((Mob_Living_Silicon_Pai)pAI2).show_directives( Task13.User );
				} else if ( S.laws == null ) {
					GlobalFuncs.to_chat( Task13.User, "" + GlobalFuncs.key_name( S, Task13.User ) + "'s laws are null?? Contact a coder." );
				} else {
					S.laws.show_laws( Task13.User );
				}
			}

			if ( !( ai_number != 0 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<b>No AIs located</b>" );
			}
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle guests", desc: "Guests can't enter", group: "Server" )]
		public void toggleguests(  ) {
			GlobalVars.guests_allowed = !GlobalVars.guests_allowed;

			if ( !GlobalVars.guests_allowed ) {
				GlobalFuncs.to_chat( typeof(Game13), "<B>Guests may no longer enter the game.</B>" );
			} else {
				GlobalFuncs.to_chat( typeof(Game13), "<B>Guests may now enter the game.</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled guests game entering " + ( GlobalVars.guests_allowed ? "" : "dis" ) + "allowed." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled guests game entering " + ( GlobalVars.guests_allowed ? "" : "dis" ) + "allowed.</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TGU" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle tinted welding helmes", desc: "Reduces view range when wearing welding helmets", group: "Debug" )]
		public void toggletintedweldhelmets(  ) {
			GlobalVars.tinted_weldhelh = !GlobalVars.tinted_weldhelh;

			if ( GlobalVars.tinted_weldhelh ) {
				GlobalFuncs.to_chat( typeof(Game13), "<B>The tinted_weldhelh has been enabled!</B>" );
			} else {
				GlobalFuncs.to_chat( typeof(Game13), "<B>The tinted_weldhelh has been disabled!</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled tinted_weldhelh." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled tinted_weldhelh." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TTWH" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Traitor Panel", desc: "Edit mobs's memory and role", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void show_traitor_panel( dynamic M = null ) {
			
			if ( !( M is Mob ) ) {
				GlobalFuncs.to_chat( Task13.User, "This can only be used on instances of type /mob" );
				return;
			}

			if ( !Lang13.Bool( M.mind ) ) {
				GlobalFuncs.to_chat( Task13.User, "This mob has no mind!" );
				return;
			}
			((Mind)M.mind).edit_memory();
			GlobalFuncs.feedback_add_details( "admin_verb", "STP" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Spawn", desc: "(atom path) Spawn an atom", group: "Debug" )]
		[VerbArg( 1, InputType.Str )]
		public void spawn_atom( string _object = null ) {
			ByTable matches = null;
			dynamic path = null;
			dynamic chosen = null;
			dynamic T = null;

			
			if ( !GlobalFuncs.check_rights( 4096 ) ) {
				return;
			}
			matches = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Ent_Static) ) )) {
				path = _a;
				

				if ( String13.FindIgnoreCase( "" + path, _object, 1, 0 ) != 0 ) {
					matches.Add( path );
				}
			}

			if ( matches.len == 0 ) {
				return;
			}
			chosen = null;

			if ( matches.len == 1 ) {
				chosen = matches[1];
			} else {
				chosen = Interface13.Input( "Select an atom type", "Spawn Atom", matches[1], null, matches, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( chosen ) ) {
					return;
				}
			}

			if ( Lang13.Bool( chosen.IsSubclassOf( typeof(Tile) ) ) ) {
				T = GlobalFuncs.get_turf( Task13.User.loc );
				((Tile)T).ChangeTurf( chosen );
			} else {
				Lang13.Call( chosen, Task13.User.loc );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " spawned " + chosen + " at (" + Task13.User.x + "," + Task13.User.y + "," + Task13.User.z + ")" );
			GlobalFuncs.feedback_add_details( "admin_verb", "SA" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Unprison", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void unprison( Ent_Static M = null ) {
			
			if ( M.z == 2 ) {
				
				if ( GlobalVars.config.allow_admin_jump ) {
					M.loc = Rand13.PickFromTable( GlobalVars.latejoin );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has unprisoned " + GlobalFuncs.key_name_admin( M ) );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has unprisoned " + GlobalFuncs.key_name( M ) );
				} else {
					Interface13.Alert( "Admin jumping disabled" );
				}
			} else {
				Interface13.Alert( "" + M.name + " is not prisoned." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "UP" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Immediate Reboot", desc: "Reboots the server post haste", group: "Server" )]
		public void immreboot(  ) {
			
			if ( !( Task13.User.client.holder != null ) ) {
				return;
			}

			if ( Interface13.Alert( "Reboot server?", null, "Yes", "No" ) == "No" ) {
				return;
			}
			GlobalFuncs.to_chat( typeof(Game13), "<span class='warning'><b>Rebooting world!</b> <span class='notice'>Initiated by " + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "Admin" : Task13.User.key ) + "!</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " initiated an immediate reboot." );
			GlobalFuncs.feedback_set_details( "end_error", "immediate admin reboot - by " + Task13.User.key + " " + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "(stealth)" : "" ) );
			GlobalFuncs.feedback_add_details( "admin_verb", "IR" );

			if ( GlobalVars.blackbox != null ) {
				GlobalVars.blackbox.save_all_data_to_sql();
			}
			GlobalFuncs.CallHook( "Reboot", new ByTable() );

			if ( GlobalVars.watchdog.waiting ) {
				GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><B>Server will shut down for an automatic update in a few seconds.</B></span>" );
				GlobalVars.watchdog.signal_ready();
				return;
			}
			Game13.Reboot();
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Revive", desc: "Toggle admin revives", group: "Server" )]
		public void adrev(  ) {
			GlobalVars.config.allow_admin_rev = !GlobalVars.config.allow_admin_rev;
			GlobalFuncs.message_admins( "<span class='notice'>Toggled reviving to " + GlobalVars.config.allow_admin_rev + ".</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAR" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Spawn", desc: "Toggle admin spawning", group: "Server" )]
		public void adspawn(  ) {
			GlobalVars.config.allow_admin_spawning = !GlobalVars.config.allow_admin_spawning;
			GlobalFuncs.message_admins( "<span class='notice'>Toggled admin item spawning to " + GlobalVars.config.allow_admin_spawning + ".</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TAS" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Jump", desc: "Toggle admin jumping", group: "Server" )]
		public void adjump(  ) {
			GlobalVars.config.allow_admin_jump = !GlobalVars.config.allow_admin_jump;
			GlobalFuncs.message_admins( "<span class='notice'>Toggled admin jumping to " + GlobalVars.config.allow_admin_jump + ".</span>" );
			GlobalFuncs.feedback_add_details( "admin_verb", "TJ" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Delay", desc: "Delay the game start/end", group: "Server" )]
		public void delay(  ) {
			
			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return;
			}

			if ( !( GlobalVars.ticker != null ) || GlobalVars.ticker.current_state != 1 ) {
				
				if ( GlobalVars.ticker.delay_end == 2 ) {
					GlobalFuncs.to_chat( typeof(Game13), "<font size=4><span class='danger'>World Reboot triggered by " + GlobalFuncs.key_name( Task13.User ) + "!</font></span>" );
					GlobalFuncs.log_admin( "<font size=4><span class='danger'>World Reboot triggered by " + GlobalFuncs.key_name( Task13.User ) + "!</font></span>" );

					if ( GlobalVars.watchdog.waiting ) {
						GlobalVars.watchdog.signal_ready();
					} else {
						Game13.Reboot();
					}
				}
				GlobalVars.ticker.delay_end = !( GlobalVars.ticker.delay_end != 0 ) ?1:0;
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " " + ( GlobalVars.ticker.delay_end != 0 ? "delayed the round end" : "has made the round end normally" ) + "." );
				GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name( Task13.User ) + " " + ( GlobalVars.ticker.delay_end != 0 ? "delayed the round end" : "has made the round end normally" ) + ".</span>" );
				return;
			}

			if ( !( GlobalVars.going != 0 ) ) {
				GlobalVars.going = 2;
				GlobalVars.ticker.pregame_timeleft = Game13.timeofday + GlobalVars.ticker.remaining_time;
				GlobalFuncs.to_chat( typeof(Game13), "<b>The game will start soon.</b>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " removed the delay." );
			} else {
				GlobalVars.going = 0;
				GlobalFuncs.to_chat( typeof(Game13), "<b>The game start has been delayed.</b>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " delayed the game." );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "DELAY" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Aliens", desc: "Toggle alien mobs", group: "Server" )]
		public void toggle_aliens(  ) {
			GlobalVars.aliens_allowed = !GlobalVars.aliens_allowed;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled Aliens to " + GlobalVars.aliens_allowed + "." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled Aliens " + ( GlobalVars.aliens_allowed ? "on" : "off" ) + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TA" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Respawn", desc: "Respawn basically", group: "Server" )]
		public void toggleaban(  ) {
			GlobalVars.abandon_allowed = !GlobalVars.abandon_allowed;

			if ( GlobalVars.abandon_allowed ) {
				GlobalFuncs.to_chat( typeof(Game13), "<B>You may now respawn.</B>" );
			} else {
				GlobalFuncs.to_chat( typeof(Game13), "<B>You may no longer respawn :(</B>" );
			}
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled respawn to " + ( GlobalVars.abandon_allowed ? "On" : "Off" ) + ".</span>" );
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled respawn to " + ( GlobalVars.abandon_allowed ? "On" : "Off" ) + "." );
			Game13.update_status();
			GlobalFuncs.feedback_add_details( "admin_verb", "TR" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle AI", desc: "People can't be AI", group: "Server" )]
		public void toggleAI(  ) {
			GlobalVars.config.allow_ai = !GlobalVars.config.allow_ai;

			if ( !GlobalVars.config.allow_ai ) {
				GlobalFuncs.to_chat( typeof(Game13), "<B>The AI job is no longer chooseable.</B>" );
			} else {
				GlobalFuncs.to_chat( typeof(Game13), "<B>The AI job is chooseable now.</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled AI allowed." );
			Game13.update_status();
			GlobalFuncs.feedback_add_details( "admin_verb", "TAI" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Entering", desc: "People can't enter", group: "Server" )]
		public void toggleenter(  ) {
			GlobalVars.enter_allowed = !GlobalVars.enter_allowed;

			if ( !GlobalVars.enter_allowed ) {
				GlobalFuncs.to_chat( typeof(Game13), "<B>New players may no longer enter the game.</B>" );
			} else {
				GlobalFuncs.to_chat( typeof(Game13), "<B>New players may now enter the game.</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled new player game entering." );
			GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled new player game entering.</span>" );
			Game13.update_status();
			GlobalFuncs.feedback_add_details( "admin_verb", "TE" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Start Now", desc: "Start the round RIGHT NOW", group: "Server" )]
		public bool startnow(  ) {
			
			if ( !( GlobalVars.ticker != null ) ) {
				Interface13.Alert( "Unable to start the game as it is not set up." );
				return false;
			}

			if ( GlobalVars.ticker.current_state == 1 ) {
				GlobalVars.ticker.current_state = 2;
				GlobalFuncs.log_admin( "" + Task13.User.key + " has started the game." );
				GlobalFuncs.message_admins( "<font color='blue'>" + Task13.User.key + " has started the game.</font>" );
				GlobalFuncs.feedback_add_details( "admin_verb", "SN" );
				return true;
			} else {
				GlobalFuncs.to_chat( Task13.User, "<font color='red'>Error: Start Now: Game has already started.</font>" );
				return false;
			}
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Traitor Scaling", desc: "Toggle traitor scaling", group: "Server" )]
		public void toggletraitorscaling(  ) {
			GlobalVars.traitor_scaling = !GlobalVars.traitor_scaling;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled Traitor Scaling to " + GlobalVars.traitor_scaling + "." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled Traitor Scaling " + ( GlobalVars.traitor_scaling ? "on" : "off" ) + "." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TTS" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle Dead OOC", desc: "Toggle dis bitch", group: "Server" )]
		public void toggleoocdead(  ) {
			GlobalVars.dooc_allowed = !GlobalVars.dooc_allowed;
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled OOC." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled Dead OOC." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TDOOC" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Toggle OOC", desc: "Globally Toggles OOC", group: "Server" )]
		public void toggleooc(  ) {
			GlobalVars.ooc_allowed = !GlobalVars.ooc_allowed;

			if ( GlobalVars.ooc_allowed ) {
				GlobalFuncs.to_chat( typeof(Game13), "<B>The OOC channel has been globally enabled!</B>" );
			} else {
				GlobalFuncs.to_chat( typeof(Game13), "<B>The OOC channel has been globally disabled!</B>" );
			}
			GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " toggled OOC." );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " toggled OOC." );
			GlobalFuncs.feedback_add_details( "admin_verb", "TOOC" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Announce", desc: "Announce your desires to the world", group: "Special Verbs" )]
		public void announce(  ) {
			dynamic message = null;

			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}
			message = Interface13.Input( "Global message to send:", "Admin Announce", null, null, null, InputType.StrMultiline );

			if ( Lang13.Bool( message ) ) {
				
				if ( !GlobalFuncs.check_rights( 16, false ) ) {
					message = GlobalFuncs.adminscrub( message, 500 );
				}
				GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><b>" + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "Administrator" : Task13.User.key ) + " Announces:</b>\n 	 " + message + "</span>" );
				GlobalFuncs.log_admin( "Announce: " + GlobalFuncs.key_name( Task13.User ) + " : " + message );
			}
			GlobalFuncs.feedback_add_details( "admin_verb", "A" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Restart", desc: "Restarts the world", group: "Server" )]
		public void restart(  ) {
			string confirm = null;

			
			if ( !( Task13.User.client.holder != null ) ) {
				return;
			}
			confirm = Interface13.Alert( "Restart the game world?", "Restart", "Yes", "Cancel" );

			if ( confirm == "Cancel" ) {
				return;
			}

			if ( confirm == "Yes" ) {
				GlobalFuncs.to_chat( typeof(Game13), "<span class='warning'><b>Restarting world!</b> <span class='notice'>Initiated by " + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "Admin" : Task13.User.key ) + "!</span>" );
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " initiated a reboot." );
				GlobalFuncs.feedback_set_details( "end_error", "admin reboot - by " + Task13.User.key + " " + ( Lang13.Bool( Task13.User.client.holder.fakekey ) ? "(stealth)" : "" ) );
				GlobalFuncs.feedback_add_details( "admin_verb", "R" );

				if ( GlobalVars.blackbox != null ) {
					GlobalVars.blackbox.save_all_data_to_sql();
				}
				GlobalFuncs.CallHook( "Reboot", new ByTable() );

				if ( GlobalVars.watchdog.waiting ) {
					GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><B>Server will shut down for an automatic update in a few seconds.</B></span>" );
					GlobalVars.watchdog.signal_ready();
					return;
				}
				Task13.Sleep( 50 );
				Game13.Reboot();
			}
			return;
		}

		// Function from file: admin.dm
		public void shuttle_magic(  ) {
			string dat = null;

			dat = "<b>WARNING:</b> server may explode!<hr><br>";

			if ( !( this.selected_shuttle is Shuttle ) ) {
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";shuttle_select=1'>Select a shuttle</a><hr>" ).ToString();
			} else {
				dat += new Txt( "Selected shuttle: <b>" ).item( ((dynamic)this.selected_shuttle).name ).str( "</b> (<i>" ).item( this.selected_shuttle.type ).str( "</i>)<br>\n		<a href='?_src_=vars;Vars=" ).Ref( this.selected_shuttle ).str( "'>view variables</A> | <a href='?src=" ).Ref( this ).str( ";shuttle_teleport_to=1'>teleport to</a> | <a href='?src=" ).Ref( this ).str( ";shuttle_select=1'>select another shuttle</a><br>\n		cooldown: " ).item( ((dynamic)this.selected_shuttle).cooldown ).str( " | pre-flight delay: " ).item( ((dynamic)this.selected_shuttle).pre_flight_delay ).str( " | transit delay: " ).item( ((dynamic)this.selected_shuttle).transit_delay ).str( "<br>\n		rotation " ).item( ( Lang13.Bool( ((dynamic)this.selected_shuttle).can_rotate ) ? "<b>ENABLED</b>" : "<b>DISABLED</b>" ) ).str( " | transit " ).item( ( Lang13.Bool( ((dynamic)this.selected_shuttle).use_transit ) ? "ENABLED" : "DISABLED" ) ).str( "<hr>\n\n		<a href='?src=" ).Ref( this ).str( ";shuttle_create_destination=1'>Create a destination docking port</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_modify_destination=1'>Add a destination docking port</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_set_transit=1'>Modify transit area</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_get_console=1'>Get control console</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_edit=1'>Modify parameters" ).item( ( Lang13.Bool( ((dynamic)this.selected_shuttle).is_special() ) ? " and pre-defined areas" : "" ) ).str( "</a>\n		<hr>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_move_to=1'>Send</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_forcemove=1'>Teleport</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_supercharge=1'>Make movement instant</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_show_overlay=1'>Draw outline</a>\n		<hr>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_lockdown=1'>" ).item( ( Lang13.Bool( ((dynamic)this.selected_shuttle).lockdown ) ? "Lift lockdown" : "Lock down" ) ).str( "</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_reset=1'>Reset</a><br>\n		<a href='?src=" ).Ref( this ).str( ";shuttle_delete=1'>Delete</a>\n		<hr>\n		" ).ToString();
			}
			dat += new Txt( "\n	<a href='?src=" ).Ref( this ).str( ";shuttle_shuttlify=1'>Turn current area into a shuttle</a><br>\n	<a href='?src=" ).Ref( this ).str( ";shuttle_add_docking_port=1'>Create a shuttle docking port</a><br>\n	<a href='?src=" ).Ref( this ).str( ";shuttle_mass_lockdown=1'>Lock down all shuttles</a><br>\n	" ).ToString();
			Interface13.Browse( Task13.User, dat, "window=shuttlemagic" );
			return;
		}

		// Function from file: admin.dm
		public void Secrets(  ) {
			string dat = null;

			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}
			dat = "<B>The first rule of adminbuse is: you don't talk about the adminbuse.</B><HR>";

			if ( GlobalFuncs.check_rights( 8, false ) || GlobalFuncs.check_rights( 16384, false ) ) {
				dat += "\n			<B>Fourth-Wall Demolition</B><BR>\n			<BR>\n			";
			}

			if ( GlobalFuncs.check_rights( 16384, false ) ) {
				dat += new Txt( "\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=spawnadminbus'>Spawn an Adminbus</A><BR>\n			" ).ToString();
			}

			if ( GlobalFuncs.check_rights( 8, false ) ) {
				dat += new Txt( "\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=spawnselfdummy'>Spawn yourself as a Test Dummy</A><BR>\n			<BR>\n			" ).ToString();
			}

			if ( GlobalFuncs.check_rights( 2, false ) ) {
				dat += new Txt( "\n			<B>Admin Secrets</B><BR>\n			<BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=clear_bombs'>Remove all bombs currently in existence</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=list_bombers'>Bombing List</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=check_antagonist'>Show current traitors and objectives</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=list_signalers'>Show last " ).item( Lang13.Length( GlobalVars.lastsignalers ) ).str( " signalers</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=list_lawchanges'>Show last " ).item( Lang13.Length( GlobalVars.lawchanges ) ).str( " law changes</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=showailaws'>Show AI Laws</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=showgm'>Show Game Mode</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=manifest'>Show Crew Manifest</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=DNA'>List DNA (Blood)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsadmin=fingerprints'>List Fingerprints</A><BR><BR>\n			<BR>\n			" ).ToString();
			}

			if ( GlobalFuncs.check_rights( 8, false ) ) {
				dat += new Txt( "\n			<B>'Random' Events</B><BR>\n			<BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=gravity'>Toggle station artificial gravity</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=wave'>Spawn a wave of meteors (aka lagocolyptic shower)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=gravanomalies'>Spawn a gravitational anomaly (aka lagitational anomolag)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=timeanomalies'>Spawn wormholes</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=goblob'>Spawn blob</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=aliens'>Trigger an Alien infestation</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=alien_silent'>Spawn an Alien silently</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=spiders'>Trigger a Spider infestation</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=striketeam'>Send in a strike team</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=carp'>Trigger a Carp migration</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=radiation'>Irradiate the station</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=prison_break'>Trigger a Prison Break</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=virus'>Trigger a Virus Outbreak</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=immovable'>Spawn an Immovable Rod</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=lightsout'>Toggle a \"lights out\" event</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=ionstorm'>Spawn an Ion Storm</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=spacevines'>Spawn Space-Vines</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=comms_blackout'>Trigger a communication blackout</A><BR>\n			<A href='?src=" ).Ref( this ).str( @";secretsfun=pda_spam'>Trigger a wave of PDA spams</A><BR>
			<BR>
			<B>Fun Secrets</B><BR>
			<BR>
			<A href='?src=" ).Ref( this ).str( ";secretsfun=hardcore_mode'>" ).item( ( GlobalVars.ticker != null && GlobalVars.ticker.hardcore_mode ? "Disable" : "Enable" ) ).str( " hardcore mode (makes starvation kill!)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=sec_clothes'>Remove 'internal' clothing</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=sec_all_clothes'>Remove ALL clothing</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=monkey'>Turn all humans into monkeys</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=sec_classic1'>Remove firesuits, grilles, and pods</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=power'>Make all areas powered</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=unpower'>Make all areas unpowered</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=quickpower'>Power all SMES</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=toggleprisonstatus'>Toggle Prison Shuttle Status(Use with S/R)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=activateprison'>Send Prison Shuttle</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=deactivateprison'>Return Prison Shuttle</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=prisonwarp'>Warp all Players to Prison</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=tripleAI'>Triple AI mode (needs to be used in the lobby)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=traitor_all'>Everyone is the traitor</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=onlyone'>There can only be one!</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=flicklights'>Ghost Mode</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=retardify'>Make all players retarded</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=fakeguns'>Make all items look like guns</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=experimentalguns'>Distribute experimental guns to the crew</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=schoolgirl'>Japanese Animes Mode</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=eagles'>Egalitarian Station Mode</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=movealienship'>Move Alien Dinghy</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=blackout'>Break all lights</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=whiteout'>Fix all lights</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=thebees'>Unleash THE BEES onto the crew</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=floorlava'>The floor is lava! (DANGEROUS: extremely lame)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=togglenarsie'>Toggle Nar-Sie's behaviour</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=fakealerts'>Trigger a fake alert</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=fakebooms'>Adds in some Micheal Bay to the shift without major destruction</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=massbomber'>Turn every players into Bomberman</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=bomberhurt'>Make Bomberman Bombs actually hurt players</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=bomberdestroy'>Make Bomberman Bombs actually destroy stuff</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=bombernohurt'>Make Bomberman Bombs harmless to players(default)</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=bombernodestroy'>Make Bomberman Bombs harmless to the environnement(default)</A><BR>\n			<A href='?src=" ).Ref( this ).str( @";secretsfun=placeturret'>Create a turret</A><BR>
			<BR>
			<B>Final Solutions</B><BR>
			<I>(Warning, these will end the round!)</I><BR>
			<BR>
			<A href='?src=" ).Ref( this ).str( ";secretsfun=hellonearth'>Summon Nar-Sie</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=supermattercascade'>Start a Supermatter Cascade</A><BR>\n			" ).ToString();
			}

			if ( GlobalFuncs.check_rights( 16, false ) ) {
				dat += new Txt( @"
			<BR>
			<B>Server</B><BR>
			<BR>
			<A href='?src=" ).Ref( this ).str( ";secretsfun=togglebombcap'>Toggle bomb cap</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretsfun=togglebombmethod'>Toggle explosion method</A><BR>\n			" ).ToString();
			}
			dat += "<BR>";

			if ( GlobalFuncs.check_rights( 32, false ) ) {
				dat += new Txt( "\n			<B>Security Level Elevated</B><BR>\n			<BR>\n			<A href='?src=" ).Ref( this ).str( ";secretscoder=maint_access_engiebrig'>Change all maintenance doors to engie/brig access only</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretscoder=maint_access_brig'>Change all maintenance doors to brig access only</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretscoder=infinite_sec'>Remove cap on security officers</A><BR>\n			<a href='?src=" ).Ref( this ).str( @";secretscoder=virus_custom'>Custom Virus Outbreak</a><BR>
			<BR>
			<B>Coder Secrets</B><BR>
			<BR>
			<A href='?src=" ).Ref( this ).str( ";secretsadmin=list_job_debug'>Show Job Debug</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";secretscoder=spawn_objects'>Admin Log</A><BR>\n			<BR>\n			" ).ToString();
			}
			Interface13.Browse( Task13.User, dat, "window=secrets" );
			return;
		}

		// Function from file: admin.dm
		public void Game(  ) {
			string dat = null;

			
			if ( !GlobalFuncs.check_rights( 0 ) ) {
				return;
			}
			dat = new Txt( "\n		<center><B>Game Panel</B></center><hr>\n\n		<A href='?src=" ).Ref( this ).str( ";c_mode=1'>Change Game Mode</A><br>\n		" ).ToString();

			if ( GlobalVars.master_mode == "secret" ) {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";f_secret=1'>(Force Secret Mode)</A><br>" ).ToString();
			}
			dat += new Txt( @"
		<hr />
		<ul>
			<li>
				<a href=""?src=" ).Ref( this ).str( ";set_base_laws=ai\"><b>Default Cyborg/AI Laws:</b>" ).item( GlobalVars.base_law_type ).str( "</a>\n			</li>\n			<li>\n				<a href=\"?src=" ).Ref( this ).str( ";set_base_laws=mommi\"><b>Default MoMMI Laws:</b>" ).item( GlobalVars.mommi_base_law_type ).str( @"</a>
			</li>
		</ul>
		<hr />
		<A href='?src=" ).Ref( this ).str( ";create_object=1'>Create Object</A><br>\n		<A href='?src=" ).Ref( this ).str( ";quick_create_object=1'>Quick Create Object</A><br>\n		<A href='?src=" ).Ref( this ).str( ";create_turf=1'>Create Turf</A><br>\n		<A href='?src=" ).Ref( this ).str( ";create_mob=1'>Create Mob</A><br>\n		<hr />\n		<A href='?src=" ).Ref( this ).str( ";vsc=airflow'>Edit ZAS Settings</A><br>\n		<A href='?src=" ).Ref( this ).str( ";vsc=default'>Choose a default ZAS setting</A><br>\n		" ).ToString();
			Interface13.Browse( Task13.User, dat, "window=admin2;size=280x370" );
			return;
		}

		// Function from file: admin.dm
		public void Jobbans(  ) {
			string dat = null;
			dynamic t = null;
			dynamic r = null;

			
			if ( !GlobalFuncs.check_rights( 4 ) ) {
				return;
			}
			dat = "<B>Job Bans!</B><HR><table>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.jobban_keylist )) {
				t = _a;
				
				r = t;

				if ( String13.FindIgnoreCase( r, "##", 1, 0 ) != 0 ) {
					r = String13.SubStr( r, 1, String13.FindIgnoreCase( r, "##", 1, 0 ) );
				}
				dat += new Txt( "<tr><td>" ).item( t ).str( " (<A href='?src=" ).Ref( this ).str( ";removejobban=" ).item( r ).str( "'>unban</A>)</td></tr>" ).ToString();
			}
			dat += "</table>";
			Interface13.Browse( Task13.User, dat, "window=ban;size=400x400" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Access Newscaster Network", desc: "Allows you to view, add and edit news feeds.", group: "Fun" )]
		public void access_news_network(  ) {
			string dat = null;
			bool wanted_already = false;
			FeedChannel CHANNEL = null;
			bool check = false;
			FeedChannel FC = null;
			int i = 0;
			FeedMessage MESSAGE = null;
			FeedChannel CHANNEL2 = null;
			FeedChannel CHANNEL3 = null;
			FeedMessage MESSAGE2 = null;
			FeedMessage MESSAGE3 = null;
			bool wanted_already2 = false;
			int end_param = 0;

			
			if ( !( this is Admins ) ) {
				Task13.Source = Task13.User.client.holder;
			}

			if ( !( this is Admins ) ) {
				GlobalFuncs.to_chat( Task13.User, "Error: you are not an admin!" );
				return;
			}
			dat = "<HEAD><TITLE>Admin Newscaster</TITLE></HEAD><H3>Admin Newscaster Unit</H3>";

			switch ((double?)( this.admincaster_screen )) {
				case 0:
					dat += "Welcome to the admin newscaster.<BR> Here you can add, edit and censor every newspiece on the network.\n				<BR>Feed channels and stories entered through here will be uneditable and handled as official news by the rest of the units.\n				<BR>Note that this panel allows full freedom over the news network, there are no constrictions except the few basic ones. Don't break things!</FONT>\n			";

					if ( GlobalVars.news_network.wanted_issue != null ) {
						dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";ac_view_wanted=1'>Read Wanted Issue</A>" ).ToString();
					}
					dat += new Txt( "<HR><BR><A href='?src=" ).Ref( this ).str( ";ac_create_channel=1'>Create Feed Channel</A>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_view=1'>View Feed Channels</A>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_create_feed_story=1'>Submit new Feed story</A>\n				<BR><BR><A href='?src=" ).Ref( Task13.User ).str( ";mach_close=newscaster_main'>Exit</A>\n			" ).ToString();
					wanted_already = false;

					if ( GlobalVars.news_network.wanted_issue != null ) {
						wanted_already = true;
					}
					dat += new Txt( "<HR><B>Feed Security functions:</B><BR>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_menu_wanted=1'>" ).item( ( wanted_already ? "Manage" : "Publish" ) ).str( " \"Wanted\" Issue</A>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_menu_censor_story=1'>Censor Feed Stories</A>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_menu_censor_channel=1'>Mark Feed Channel with Nanotrasen D-Notice (disables and locks the channel.</A>\n				<BR><HR><A href='?src=" ).Ref( this ).str( ";ac_set_signature=1'>The newscaster recognises you as:<BR> <FONT COLOR='green'>" ).item( this.admincaster_signature ).str( "</FONT></A>\n			" ).ToString();
					break;
				case 1:
					dat += "Station Feed Channels<HR>";

					if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
						dat += "<I>No active channels found...</I>";
					} else {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
							CHANNEL = _a;
							

							if ( CHANNEL.is_admin_channel ) {
								dat += new Txt( "<B><FONT style='BACKGROUND-COLOR: LightGreen'><A href='?src=" ).Ref( this ).str( ";ac_show_channel=" ).Ref( CHANNEL ).str( "'>" ).item( CHANNEL.channel_name ).str( "</A></FONT></B><BR>" ).ToString();
							} else {
								dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";ac_show_channel=" ).Ref( CHANNEL ).str( "'>" ).item( CHANNEL.channel_name ).str( "</A> " ).item( ( CHANNEL.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR></B>" ).ToString();
							}
						}
					}
					dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";ac_refresh=1'>Refresh</A>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Back</A>\n			" ).ToString();
					break;
				case 2:
					dat += new Txt( "\n				Creating new Feed Channel...\n				<HR><B><A href='?src=" ).Ref( this ).str( ";ac_set_channel_name=1'>Channel Name</A>:</B> " ).item( this.admincaster_feed_channel.channel_name ).str( "<BR>\n				<B><A href='?src=" ).Ref( this ).str( ";ac_set_signature=1'>Channel Author</A>:</B> <FONT COLOR='green'>" ).item( this.admincaster_signature ).str( "</FONT><BR>\n				<B><A href='?src=" ).Ref( this ).str( ";ac_set_channel_lock=1'>Will Accept Public Feeds</A>:</B> " ).item( ( Lang13.Bool( this.admincaster_feed_channel.locked ) ? "NO" : "YES" ) ).str( "<BR><BR>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_submit_new_channel=1'>Submit</A><BR><BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Cancel</A><BR>\n			" ).ToString();
					break;
				case 3:
					dat += new Txt( "\n				Creating new Feed Message...\n				<HR><B><A href='?src=" ).Ref( this ).str( ";ac_set_channel_receiving=1'>Receiving Channel</A>:</B> " ).item( this.admincaster_feed_channel.channel_name ).str( "<BR>\" //MARK\n				<B>Message Author:</B> <FONT COLOR='green'>" ).item( this.admincaster_signature ).str( "</FONT><BR>\n				<B><A href='?src=" ).Ref( this ).str( ";ac_set_new_message=1'>Message Body</A>:</B> " ).item( this.admincaster_feed_message.body ).str( " <BR>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_submit_new_message=1'>Submit</A><BR><BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Cancel</A><BR>\n			" ).ToString();
					break;
				case 4:
					dat += new Txt( "\n					Feed story successfully submitted to " ).item( this.admincaster_feed_channel.channel_name ).str( ".<BR><BR>\n					<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>\n				" ).ToString();
					break;
				case 5:
					dat += new Txt( "\n				Feed Channel " ).item( this.admincaster_feed_channel.channel_name ).str( " created successfully.<BR><BR>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>\n			" ).ToString();
					break;
				case 6:
					dat += "<B><FONT COLOR='maroon'>ERROR: Could not submit Feed story to Network.</B></FONT><HR><BR>";

					if ( this.admincaster_feed_channel.channel_name == "" ) {
						dat += "<FONT COLOR='maroon'>ï¿½Invalid receiving channel name.</FONT><BR>";
					}

					if ( this.admincaster_feed_message.body == "" || this.admincaster_feed_message.body == "[REDACTED]" ) {
						dat += "<FONT COLOR='maroon'>ï¿½Invalid message body.</FONT><BR>";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 3 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 7:
					dat += "<B><FONT COLOR='maroon'>ERROR: Could not submit Feed Channel to Network.</B></FONT><HR><BR>";

					if ( this.admincaster_feed_channel.channel_name == "" || this.admincaster_feed_channel.channel_name == "[REDACTED]" ) {
						dat += "<FONT COLOR='maroon'>ï¿½Invalid channel name.</FONT><BR>";
					}
					check = false;

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
						FC = _b;
						

						if ( FC.channel_name == this.admincaster_feed_channel.channel_name ) {
							check = true;
							break;
						}
					}

					if ( check ) {
						dat += "<FONT COLOR='maroon'>ï¿½Channel name already in use.</FONT><BR>";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 2 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 9:
					dat += "<B>" + this.admincaster_feed_channel.channel_name + ": </B><FONT SIZE=1>[created by: <FONT COLOR='maroon'>" + this.admincaster_feed_channel.author + "</FONT>]</FONT><HR>";

					if ( this.admincaster_feed_channel.censored ) {
						dat += "\n					<FONT COLOR='red'><B>ATTENTION: </B></FONT>This channel has been deemed as threatening to the welfare of the station, and marked with a Nanotrasen D-Notice.<BR>\n					No further feed story additions are allowed while the D-Notice is in effect.</FONT><BR><BR>\n				";
					} else if ( GlobalFuncs.isemptylist( this.admincaster_feed_channel.messages ) ) {
						dat += "<I>No feed messages found in channel...</I><BR>";
					} else {
						i = 0;

						foreach (dynamic _c in Lang13.Enumerate( this.admincaster_feed_channel.messages, typeof(FeedMessage) )) {
							MESSAGE = _c;
							
							i++;
							dat += "-" + MESSAGE.body + " <BR>";

							if ( Lang13.Bool( MESSAGE.img ) ) {
								Interface13.CacheBrowseResource( Task13.User, MESSAGE.img, "tmp_photo" + i + ".png" );
								dat += "<img src='tmp_photo" + i + ".png' width = '180'><BR><BR>";
							}
							dat += "<FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE.author + "</FONT>]</FONT><BR>";
						}
					}
					dat += new Txt( "\n				<BR><HR><A href='?src=" ).Ref( this ).str( ";ac_refresh=1'>Refresh</A>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 1 ).str( "'>Back</A>\n			" ).ToString();
					break;
				case 10:
					dat += @"
				<B>Nanotrasen Feed Censorship Tool</B><BR>
				<FONT SIZE=1>NOTE: Due to the nature of news Feeds, total deletion of a Feed Story is not possible.<BR>
				Keep in mind that users attempting to view a censored feed will instead see the [REDACTED] tag above it.</FONT>
				<HR>Select Feed channel to get Stories from:<BR>
			";

					if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
						dat += "<I>No feed channels found active...</I><BR>";
					} else {
						
						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
							CHANNEL2 = _d;
							
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ac_pick_censor_channel=" ).Ref( CHANNEL2 ).str( "'>" ).item( CHANNEL2.channel_name ).str( "</A> " ).item( ( CHANNEL2.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR>" ).ToString();
						}
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
					break;
				case 11:
					dat += @"
				<B>Nanotrasen D-Notice Handler</B><HR>
				<FONT SIZE=1>A D-Notice is to be bestowed upon the channel if the handling Authority deems it as harmful for the station's
				morale, integrity or disciplinary behaviour. A D-Notice will render a channel unable to be updated by anyone, without deleting any feed
				stories it might contain at the time. You can lift a D-Notice if you have the required access at any time.</FONT><HR>
			";

					if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
						dat += "<I>No feed channels found active...</I><BR>";
					} else {
						
						foreach (dynamic _e in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
							CHANNEL3 = _e;
							
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ac_pick_d_notice=" ).Ref( CHANNEL3 ).str( "'>" ).item( CHANNEL3.channel_name ).str( "</A> " ).item( ( CHANNEL3.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR>" ).ToString();
						}
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Back</A>" ).ToString();
					break;
				case 12:
					dat += new Txt( "\n				<B>" ).item( this.admincaster_feed_channel.channel_name ).str( ": </B><FONT SIZE=1>[ created by: <FONT COLOR='maroon'>" ).item( this.admincaster_feed_channel.author ).str( "</FONT> ]</FONT><BR>\n				<FONT SIZE=2><A href='?src=" ).Ref( this ).str( ";ac_censor_channel_author=" ).Ref( this.admincaster_feed_channel ).str( "'>" ).item( ( this.admincaster_feed_channel.author == "[REDACTED]" ? "Undo Author censorship" : "Censor channel Author" ) ).str( "</A></FONT><HR>\n			" ).ToString();

					if ( GlobalFuncs.isemptylist( this.admincaster_feed_channel.messages ) ) {
						dat += "<I>No feed messages found in channel...</I><BR>";
					} else {
						
						foreach (dynamic _f in Lang13.Enumerate( this.admincaster_feed_channel.messages, typeof(FeedMessage) )) {
							MESSAGE2 = _f;
							
							dat += new Txt( "\n						-" ).item( MESSAGE2.body ).str( " <BR><FONT SIZE=1>[Story by <FONT COLOR='maroon'>" ).item( MESSAGE2.author ).str( "</FONT>]</FONT><BR>\n						<FONT SIZE=2><A href='?src=" ).Ref( this ).str( ";ac_censor_channel_story_body=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.body == "[REDACTED]" ? "Undo story censorship" : "Censor story" ) ).str( "</A>  -  <A href='?src=" ).Ref( this ).str( ";ac_censor_channel_story_author=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.author == "[REDACTED]" ? "Undo Author Censorship" : "Censor message Author" ) ).str( "</A></FONT><BR>\n					" ).ToString();
						}
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 10 ).str( "'>Back</A>" ).ToString();
					break;
				case 13:
					dat += new Txt( "\n				<B>" ).item( this.admincaster_feed_channel.channel_name ).str( ": </B><FONT SIZE=1>[ created by: <FONT COLOR='maroon'>" ).item( this.admincaster_feed_channel.author ).str( "</FONT> ]</FONT><BR>\n				Channel messages listed below. If you deem them dangerous to the station, you can <A href='?src=" ).Ref( this ).str( ";ac_toggle_d_notice=" ).Ref( this.admincaster_feed_channel ).str( "'>Bestow a D-Notice upon the channel</A>.<HR>\n			" ).ToString();

					if ( this.admincaster_feed_channel.censored ) {
						dat += "\n					<FONT COLOR='red'><B>ATTENTION: </B></FONT>This channel has been deemed as threatening to the welfare of the station, and marked with a Nanotrasen D-Notice.<BR>\n					No further feed story additions are allowed while the D-Notice is in effect.</FONT><BR><BR>\n				";
					} else if ( GlobalFuncs.isemptylist( this.admincaster_feed_channel.messages ) ) {
						dat += "<I>No feed messages found in channel...</I><BR>";
					} else {
						
						foreach (dynamic _g in Lang13.Enumerate( this.admincaster_feed_channel.messages, typeof(FeedMessage) )) {
							MESSAGE3 = _g;
							
							dat += "-" + MESSAGE3.body + " <BR><FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE3.author + "</FONT>]</FONT><BR>";
						}
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 11 ).str( "'>Back</A>" ).ToString();
					break;
				case 14:
					dat += "<B>Wanted Issue Handler:</B>";
					wanted_already2 = false;
					end_param = 1;

					if ( GlobalVars.news_network.wanted_issue != null ) {
						wanted_already2 = true;
						end_param = 2;
					}

					if ( wanted_already2 ) {
						dat += "<FONT SIZE=2><BR><I>A wanted issue is already in Feed Circulation. You can edit or cancel it below.</FONT></I>";
					}
					dat += new Txt( "\n				<HR>\n				<A href='?src=" ).Ref( this ).str( ";ac_set_wanted_name=1'>Criminal Name</A>: " ).item( this.admincaster_feed_message.author ).str( " <BR>\n				<A href='?src=" ).Ref( this ).str( ";ac_set_wanted_desc=1'>Description</A>: " ).item( this.admincaster_feed_message.body ).str( " <BR>\n			" ).ToString();

					if ( wanted_already2 ) {
						dat += "<B>Wanted Issue created by:</B><FONT COLOR='green'> " + GlobalVars.news_network.wanted_issue.backup_author + "</FONT><BR>";
					} else {
						dat += "<B>Wanted Issue will be created under prosecutor:</B><FONT COLOR='green'> " + this.admincaster_signature + "</FONT><BR>";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_submit_wanted=" ).item( end_param ).str( "'>" ).item( ( wanted_already2 ? "Edit Issue" : "Submit" ) ).str( "</A>" ).ToString();

					if ( wanted_already2 ) {
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_cancel_wanted=1'>Take down Issue</A>" ).ToString();
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
					break;
				case 15:
					dat += new Txt( "\n				<FONT COLOR='green'>Wanted issue for " ).item( this.admincaster_feed_message.author ).str( " is now in Network Circulation.</FONT><BR><BR>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>\n			" ).ToString();
					break;
				case 16:
					dat += "<B><FONT COLOR='maroon'>ERROR: Wanted Issue rejected by Network.</B></FONT><HR><BR>";

					if ( this.admincaster_feed_message.author == "" || this.admincaster_feed_message.author == "[REDACTED]" ) {
						dat += "<FONT COLOR='maroon'>ï¿½Invalid name for person wanted.</FONT><BR>";
					}

					if ( this.admincaster_feed_message.body == "" || this.admincaster_feed_message.body == "[REDACTED]" ) {
						dat += "<FONT COLOR='maroon'>ï¿½Invalid description.</FONT><BR>";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
					break;
				case 17:
					dat += new Txt( "\n				<B>Wanted Issue successfully deleted from Circulation</B><BR>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>\n			" ).ToString();
					break;
				case 18:
					dat += "\n				<B><FONT COLOR ='maroon'>-- STATIONWIDE WANTED ISSUE --</B></FONT><BR><FONT SIZE=2>[Submitted by: <FONT COLOR='green'>" + GlobalVars.news_network.wanted_issue.backup_author + "</FONT>]</FONT><HR>\n				<B>Criminal</B>: " + GlobalVars.news_network.wanted_issue.author + "<BR>\n				<B>Description</B>: " + GlobalVars.news_network.wanted_issue.body + "<BR>\n				<B>Photo:</B>:\n			";

					if ( Lang13.Bool( GlobalVars.news_network.wanted_issue.img ) ) {
						Interface13.CacheBrowseResource( Task13.User, GlobalVars.news_network.wanted_issue.img, "tmp_photow.png" );
						dat += "<BR><img src='tmp_photow.png' width = '180'>";
					} else {
						dat += "None";
					}
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Back</A><BR>" ).ToString();
					break;
				case 19:
					dat += new Txt( "\n				<FONT COLOR='green'>Wanted issue for " ).item( this.admincaster_feed_message.author ).str( " successfully edited.</FONT><BR><BR>\n				<BR><A href='?src=" ).Ref( this ).str( ";ac_setScreen=" ).item( 0 ).str( "'>Return</A><BR>\n			" ).ToString();
					break;
				default:
					dat += "I'm sorry to break your immersion. This shit's bugged. Report this bug to Agouri, polyxenitopalidou@gmail.com";
					break;
			}
			Interface13.Browse( Task13.User, dat, "window=admincaster_main;size=400x600" );
			GlobalFuncs.onclose( Task13.User, "admincaster_main" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Player Info", group: "Admin" )]
		[VerbArg( 1, InputType.Str )]
		public void show_player_info( string key = null ) {
			string dat = null;
			SaveFile info = null;
			dynamic infos = null;
			bool update_file = false;
			int i = 0;
			PlayerInfo I = null;

			
			if ( !( this is Admins ) ) {
				Task13.Source = Task13.User.client.holder;
			}

			if ( !( this is Admins ) ) {
				GlobalFuncs.to_chat( Task13.User, "Error: you are not an admin!" );
				return;
			}
			dat = "<html><head><title>Info on " + key + "</title></head>\n<body>";
			info = new SaveFile( "data/player_saves/" + String13.SubStr( key, 1, 2 ) + "/" + key + "/info.sav" );
			infos = ((dynamic)info).Read();

			if ( !Lang13.Bool( infos ) ) {
				dat += "No information found on the given key.<br>";
			} else {
				update_file = false;
				i = 0;

				foreach (dynamic _a in Lang13.Enumerate( infos, typeof(PlayerInfo) )) {
					I = _a;
					
					i += 1;

					if ( !Lang13.Bool( I.timestamp ) ) {
						I.timestamp = "Pre-4/3/2012";
						update_file = true;
					}

					if ( !Lang13.Bool( I.rank ) ) {
						I.rank = "N/A";
						update_file = true;
					}
					dat += "<font color=#008800>" + I.content + "</font> <i>by " + I.author + " (" + I.rank + ")</i> on <i><font color=blue>" + I.timestamp + "</i></font> ";

					if ( I.author == Task13.User.key || GlobalFuncs.check_rights( 128, false ) ) {
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";remove_player_info=" ).item( key ).str( ";remove_index=" ).item( i ).str( "'>Remove</A>" ).ToString();
					}
					dat += "<br><br>";
				}

				if ( update_file ) {
					((dynamic)info).WriteMsg( infos );
				}
			}
			dat += new Txt( "<br>\n		<A href='?src=" ).Ref( this ).str( ";add_player_info=" ).item( key ).str( "'>Add Comment</A><br>\n		</body></html>" ).ToString();
			Interface13.Browse( Task13.User, dat, "window=adminplayerinfo;size=480x480" );
			return;
		}

		// Function from file: admin.dm
		public bool player_has_info( string key = null ) {
			SaveFile info = null;
			dynamic infos = null;

			info = new SaveFile( "data/player_saves/" + String13.SubStr( key, 1, 2 ) + "/" + key + "/info.sav" );
			infos = ((dynamic)info).Read();

			if ( !Lang13.Bool( infos ) || !( infos.len != 0 ) ) {
				return false;
			} else {
				return true;
			}
		}

		// Function from file: admin.dm
		public void PlayerNotesPage( double? page = null ) {
			string dat = null;
			SaveFile S = null;
			dynamic note_keys = null;
			double? number_pages = null;
			double? page_index = null;
			double lower_bound = 0;
			double? upper_bound = null;
			double? index = null;
			dynamic t = null;
			double? index2 = null;

			dat = "<B>Player notes</B><HR>";
			S = new SaveFile( "data/player_notes.sav" );
			note_keys = ((dynamic)S).Read();

			if ( !Lang13.Bool( note_keys ) ) {
				dat += "No notes found.";
			} else {
				dat += "<table>";
				note_keys = GlobalFuncs.sortList( note_keys );
				number_pages = note_keys.len / 50;

				if ( number_pages != Num13.Floor( number_pages ??0 ) ) {
					number_pages = Num13.Floor( number_pages ??0 ) + 1;
				}
				page_index = ( page ??0) - 1;

				if ( ( page_index ??0) < 0 || ( page_index ??0) >= ( number_pages ??0) ) {
					return;
				}
				lower_bound = ( page_index ??0) * 50 + 1;
				upper_bound = ( ( page_index ??0) + 1 ) * 50;
				upper_bound = Num13.MinInt( ((int)( upper_bound ??0 )), note_keys.len );
				index = null;
				index = lower_bound;

				while (( index ??0) <= ( upper_bound ??0)) {
					t = note_keys[index];
					dat += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";notes=show;ckey=" ).item( t ).str( "'>" ).item( t ).str( "</a></td></tr>" ).ToString();
					index++;
				}
				dat += "</table><br>";
				index2 = null;
				index2 = 1;

				while (( index2 ??0) <= ( number_pages ??0)) {
					
					if ( index2 == page ) {
						dat += "<b>";
					}
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";notes=list;index=" ).item( index2 ).str( "'>" ).item( index2 ).str( "</a> " ).ToString();

					if ( index2 == page ) {
						dat += "</b>";
					}
					index2++;
				}
			}
			Interface13.Browse( Task13.User, dat, "window=player_notes;size=400x400" );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Lookup bans on CKEY", group: "Admin" )]
		public void checkCKEY(  ) {
			string ckey = null;

			
			if ( !( Task13.User != null ) ) {
				return;
			}

			if ( !( this is Admins ) ) {
				Task13.Source = Task13.User.client.holder;
			}

			if ( !( this is Admins ) ) {
				GlobalFuncs.to_chat( Task13.User, "Error: you are not an admin!" );
				return;
			}
			this.checkSessionKey();
			ckey = String13.ToLower( Interface13.Input( "Type player ckey", "ckey", null, null, null, InputType.Str | InputType.Null ) );
			Interface13.Link( Task13.User, this.getVGPanel( "rapsheet", new ByTable().Set( "ckey", ckey ), true ) );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Lookup bans on Computer ID", group: "Admin" )]
		public void checkCID(  ) {
			dynamic cid = null;

			
			if ( !( Task13.User != null ) ) {
				return;
			}

			if ( !( this is Admins ) ) {
				Task13.Source = Task13.User.client.holder;
			}

			if ( !( this is Admins ) ) {
				GlobalFuncs.to_chat( Task13.User, "Error: you are not an admin!" );
				return;
			}
			this.checkSessionKey();
			cid = Interface13.Input( "Type computer ID", "CID", 0, null, null, InputType.Num | InputType.Null );

			if ( Lang13.Bool( cid ) ) {
				Interface13.Link( Task13.User, this.getVGPanel( "rapsheet", new ByTable().Set( "cid", cid ), true ) );
			}
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Player Notes", group: "Admin" )]
		public void PlayerNotes(  ) {
			
			if ( !( this is Admins ) ) {
				Task13.Source = Task13.User.client.holder;
			}

			if ( !( this is Admins ) ) {
				GlobalFuncs.to_chat( Task13.User, "Error: you are not an admin!" );
				return;
			}
			this.PlayerNotesPage( 1 );
			return;
		}

		// Function from file: admin.dm
		// Warning, this is probably a verb! It is in a place that a verb probably shouldn't be! This should probably be fixed!
		[VerbInfo( name: "Show Player Panel", desc: "Edit player (respawn, ban, heal, etc)", group: "Admin" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void show_player_panel( dynamic M = null ) {
			string body = null;
			string species_description = null;
			dynamic H = null;
			int muted = 0;
			dynamic bname = null;
			int? block = null;
			bool bstate = false;
			string bcolor = null;
			AiLaws L = null;
			bool f = false;
			dynamic k = null;
			dynamic L2 = null;

			
			if ( !Lang13.Bool( M ) ) {
				GlobalFuncs.to_chat( Task13.User, "You seem to be selecting a mob that doesn't exist anymore." );
				return;
			}

			if ( !( this is Admins ) ) {
				Task13.Source = Task13.User.client.holder;
			}

			if ( !( this is Admins ) ) {
				GlobalFuncs.to_chat( Task13.User, "Error: you are not an admin!" );
				return;
			}
			this.checkSessionKey();
			body = "<html><head><title>Options for " + M.key + "</title></head>\n<body>Options panel for <b>" + M + "</b>";

			if ( Lang13.Bool( M.client ) ) {
				body += new Txt( "played by <b>" ).item( M.client ).str( "</b>\n			[<A href='?src=" ).Ref( this ).str( ";editrights=show'>" ).item( ( Lang13.Bool( M.client.holder ) ? M.client.holder.rank : "Player" ) ).str( "</A>]" ).ToString();
			}

			if ( M is Mob_NewPlayer ) {
				body += " <B>Hasn't Entered Game</B> ";
			} else {
				body += new Txt( " [<A href='?src=" ).Ref( this ).str( ";revive=" ).Ref( M ).str( "'>Heal</A>] " ).ToString();
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				species_description = "" + ( Lang13.Bool( H.species ) ? H.species.name : "<span class='danger'><b>No Species</b></span>" );
			}
			body += new Txt( "\n		<br><br>[\n		<a href='?_src_=vars;Vars=" ).Ref( M ).str( "'>VV</a> -\n		<a href='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M ).str( "'>TP</a> -\n		<a href='?src=" ).Ref( this ).str( ";rapsheet=1;rsckey=" ).item( M.ckey ).str( "'>Bans</a> -\n		<a href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M ).str( "'>PM</a> -\n		<a href='?src=" ).Ref( this ).str( ";subtlemessage=" ).Ref( M ).str( "'>SM</a> -\n		<a href='?src=" ).Ref( this ).str( ";adminplayerobservejump=" ).Ref( M ).str( "'>JMP</a>] </b><br>\n		<b>Mob type</b> = " ).item( M.type ).item( ( Lang13.Bool( species_description ) ? " - Species = " + species_description : "" ) ).str( "<br><br>\n		<A href='?src=" ).Ref( this ).str( ";boot2=" ).Ref( M ).str( "'>Kick</A> |\n		<A href='?_src_=holder;warn=" ).item( M.ckey ).str( "'>Warn</A> |\n		<A href='?_src_=holder;unwarn=" ).item( M.ckey ).str( "'>UNWarn</A> |\n		<A href='?src=" ).Ref( this ).str( ";newban=" ).Ref( M ).str( "'>Ban</A> |\n		<A href='?src=" ).Ref( this ).str( ";jobban2=" ).Ref( M ).str( "'>Jobban</A> |\n		<A href='?src=" ).Ref( this ).str( ";oocban=" ).Ref( M ).str( "'>OOC Ban</A> |\n		<A href='?_src_=holder;appearanceban=" ).Ref( M ).str( "'>Identity Ban</A> |\n		<A href='?src=" ).Ref( this ).str( ";notes=show;mob=" ).Ref( M ).str( "'>Notes</A>\n	" ).ToString();

			if ( Lang13.Bool( M.client ) ) {
				body += new Txt( "| <A HREF='?src=" ).Ref( this ).str( ";sendtoprison=" ).Ref( M ).str( "'>Prison</A> | " ).ToString();
				muted = M.client.prefs.muted;
				body += new Txt( "<br><b>Mute: </b>\n			[<A href='?src=" ).Ref( this ).str( ";mute=" ).Ref( M ).str( ";mute_type=" ).item( 1 ).str( "'><font color='" ).item( ( ( muted & 1 ) != 0 ? "red" : "blue" ) ).str( "'>IC</font></a> |\n			<A href='?src=" ).Ref( this ).str( ";mute=" ).Ref( M ).str( ";mute_type=" ).item( 2 ).str( "'><font color='" ).item( ( ( muted & 2 ) != 0 ? "red" : "blue" ) ).str( "'>OOC</font></a> |\n			<A href='?src=" ).Ref( this ).str( ";mute=" ).Ref( M ).str( ";mute_type=" ).item( 4 ).str( "'><font color='" ).item( ( ( muted & 4 ) != 0 ? "red" : "blue" ) ).str( "'>PRAY</font></a> |\n			<A href='?src=" ).Ref( this ).str( ";mute=" ).Ref( M ).str( ";mute_type=" ).item( 8 ).str( "'><font color='" ).item( ( ( muted & 8 ) != 0 ? "red" : "blue" ) ).str( "'>ADMINHELP</font></a> |\n			<A href='?src=" ).Ref( this ).str( ";mute=" ).Ref( M ).str( ";mute_type=" ).item( 16 ).str( "'><font color='" ).item( ( ( muted & 16 ) != 0 ? "red" : "blue" ) ).str( "'>DEADCHAT</font></a>]\n			(<A href='?src=" ).Ref( this ).str( ";mute=" ).Ref( M ).str( ";mute_type=" ).item( 31 ).str( "'><font color='" ).item( ( ( muted & 31 ) != 0 ? "red" : "blue" ) ).str( "'>toggle all</font></a>)\n		" ).ToString();
			}
			body += new Txt( "<br><br>\n		<A href='?src=" ).Ref( this ).str( ";jumpto=" ).Ref( M ).str( "'><b>Jump to</b></A> |\n		<A href='?src=" ).Ref( this ).str( ";getmob=" ).Ref( M ).str( "'>Get</A> |\n		<A href='?src=" ).Ref( this ).str( ";sendmob=" ).Ref( M ).str( "'>Send To</A>\n		<br><br>\n		<A href='?src=" ).Ref( this ).str( ";traitor=" ).Ref( M ).str( "'>Traitor panel</A> |\n		<A href='?src=" ).Ref( this ).str( ";narrateto=" ).Ref( M ).str( "'>Narrate to</A> |\n		<A href='?src=" ).Ref( this ).str( ";subtlemessage=" ).Ref( M ).str( "'>Subtle message</A>\n	" ).ToString();
			body += ((Mob)M).player_panel_controls( Task13.User );

			if ( Lang13.Bool( M.client ) ) {
				
				if ( !( M is Mob_NewPlayer ) ) {
					body += "<br><br>\n				<b>Transformation:</b>\n				<br>";

					if ( M is Mob_Living_Carbon_Monkey ) {
						body += "<B>Monkeyized</B> | ";
					} else {
						body += new Txt( "<A href='?src=" ).Ref( this ).str( ";monkeyone=" ).Ref( M ).str( "'>Monkeyize</A> | " ).ToString();
					}

					if ( M is Mob_Living_SimpleAnimal_Corgi ) {
						body += "<B>Corgized</B> | ";
					} else {
						body += new Txt( "<A href='?src=" ).Ref( this ).str( ";corgione=" ).Ref( M ).str( "'>Corgize</A> | " ).ToString();
					}

					if ( M is Mob_Living_Silicon_Ai ) {
						body += "<B>Is an AI</B> ";
					} else if ( M is Mob_Living_Carbon_Human ) {
						body += new Txt( "<A href='?src=" ).Ref( this ).str( ";makeai=" ).Ref( M ).str( "'>Make AI</A> |\n					<A href='?src=" ).Ref( this ).str( ";makerobot=" ).Ref( M ).str( "'>Make Robot</A> |\n					<A href='?src=" ).Ref( this ).str( ";makemommi=" ).Ref( M ).str( "'>Make MoMMI</A> |\n					<A href='?src=" ).Ref( this ).str( ";makealien=" ).Ref( M ).str( "'>Make Alien</A> |\n					<A href='?src=" ).Ref( this ).str( ";makeslime=" ).Ref( M ).str( "'>Make slime</A> |\n					<A href='?src=" ).Ref( this ).str( ";makecluwne=" ).Ref( M ).str( "'>Make Cluwne</A> |\n				" ).ToString();
					}

					if ( M is Mob_Living_SimpleAnimal ) {
						body += new Txt( "<A href='?src=" ).Ref( this ).str( ";makeanimal=" ).Ref( M ).str( "'>Re-Animalize</A> | " ).ToString();
					} else {
						body += new Txt( "<A href='?src=" ).Ref( this ).str( ";makeanimal=" ).Ref( M ).str( "'>Animalize</A> | " ).ToString();
					}

					if ( M is Mob_Living_Carbon && !( M is Mob_Living_Carbon_Brain ) && !( M is Mob_Living_Carbon_Alien ) ) {
						body += "<br><br>";
						body += "<b>DNA Blocks:</b><br><table border='0'><tr><th>&nbsp;</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th>";
						block = null;
						block = 1;

						while (( block ??0) <= 54) {
							
							if ( ( ( block ??0) - 1 ) % 5 == 0 ) {
								body += "</tr><tr><th>" + ( ( block ??0) - 1 ) + "</th>";
							}
							bname = GlobalVars.assigned_blocks[block];
							body += "<td>";

							if ( Lang13.Bool( bname ) ) {
								bstate = ((Dna)M.dna).GetSEState( block );
								bcolor = "" + ( bstate ? "#006600" : "#ff0000" );
								body += new Txt( "<A href='?src=" ).Ref( this ).str( ";togmutate=" ).Ref( M ).str( ";block=" ).item( block ).str( "' style='color:" ).item( bcolor ).str( ";'>" ).item( bname ).str( "</A><sub>" ).item( block ).str( "</sub>" ).ToString();
							} else {
								body += "" + block;
							}
							body += "</td>";
							block++;
						}
						body += "</tr></table>";
					}

					if ( M is Mob_Living_Silicon && Lang13.Bool( M.laws ) ) {
						body += "<br><br>";
						body += "<b>Laws:</b><br />";
						L = M.laws;
						body += L.display_admin_tools( M );
						body += new Txt( "<br /><a href='?src=" ).Ref( this ).str( ";mob=" ).Ref( M ).str( ";add_law=1'>Add Law</a>" ).ToString();
						body += new Txt( " | <a href='?src=" ).Ref( this ).str( ";mob=" ).Ref( M ).str( ";clear_laws=1'>Clear Laws</a>" ).ToString();
						body += new Txt( " | <a href='?src=" ).Ref( this ).str( ";mob=" ).Ref( M ).str( ";reset_laws=1'>Reset Lawset</a>" ).ToString();
						body += new Txt( "<br /><a href='?src=" ).Ref( this ).str( ";mob=" ).Ref( M ).str( ";announce_laws=1'><b>Send Laws</b></a> - User is not notified of changes until this button pushed!<br />" ).ToString();
					}
					body += new Txt( "<br><br>\n				<b>Rudimentary transformation:</b><font size=2><br>These transformations only create a new mob type and copy stuff over. They do not take into account MMIs and similar mob-specific things. The buttons in 'Transformations' are preferred, when possible.</font><br>\n				<A href='?src=" ).Ref( this ).str( ";simplemake=observer;mob=" ).Ref( M ).str( "'>Observer</A> |\n				[ Alien: <A href='?src=" ).Ref( this ).str( ";simplemake=drone;mob=" ).Ref( M ).str( "'>Drone</A>,\n				<A href='?src=" ).Ref( this ).str( ";simplemake=hunter;mob=" ).Ref( M ).str( "'>Hunter</A>,\n				<A href='?src=" ).Ref( this ).str( ";simplemake=queen;mob=" ).Ref( M ).str( "'>Queen</A>,\n				<A href='?src=" ).Ref( this ).str( ";simplemake=sentinel;mob=" ).Ref( M ).str( "'>Sentinel</A>,\n				<A href='?src=" ).Ref( this ).str( ";simplemake=larva;mob=" ).Ref( M ).str( "'>Larva</A> ]\n				<A href='?src=" ).Ref( this ).str( ";simplemake=human;mob=" ).Ref( M ).str( "'>Human</A>\n				[ slime: <A href='?src=" ).Ref( this ).str( ";simplemake=slime;mob=" ).Ref( M ).str( "'>Baby</A>,\n				<A href='?src=" ).Ref( this ).str( ";simplemake=adultslime;mob=" ).Ref( M ).str( "'>Adult</A> ]\n				<A href='?src=" ).Ref( this ).str( ";simplemake=monkey;mob=" ).Ref( M ).str( "'>Monkey</A> |\n				<A href='?src=" ).Ref( this ).str( ";simplemake=robot;mob=" ).Ref( M ).str( "'>Cyborg</A> |\n				<A href='?src=" ).Ref( this ).str( ";simplemake=cat;mob=" ).Ref( M ).str( "'>Cat</A> |\n				<A href='?src=" ).Ref( this ).str( ";simplemake=runtime;mob=" ).Ref( M ).str( "'>Runtime</A> |\n				<A href='?src=" ).Ref( this ).str( ";simplemake=corgi;mob=" ).Ref( M ).str( "'>Corgi</A> |\n				<A href='?src=" ).Ref( this ).str( ";simplemake=ian;mob=" ).Ref( M ).str( "'>Ian</A> |\n				<A href='?src=" ).Ref( this ).str( ";simplemake=crab;mob=" ).Ref( M ).str( "'>Crab</A> |\n				<A href='?src=" ).Ref( this ).str( ";simplemake=coffee;mob=" ).Ref( M ).str( "'>Coffee</A> |\n				[ Construct: <A href='?src=" ).Ref( this ).str( ";simplemake=constructarmoured;mob=" ).Ref( M ).str( "'>Armoured</A> ,\n				<A href='?src=" ).Ref( this ).str( ";simplemake=constructbuilder;mob=" ).Ref( M ).str( "'>Builder</A> ,\n				<A href='?src=" ).Ref( this ).str( ";simplemake=constructwraith;mob=" ).Ref( M ).str( "'>Wraith</A> ]\n				<A href='?src=" ).Ref( this ).str( ";simplemake=shade;mob=" ).Ref( M ).str( "'>Shade</A>\n				<br>\n			" ).ToString();
				}
			}

			if ( Lang13.Bool( M.client ) ) {
				body += new Txt( "<br><br>\n			<b>Other actions:</b>\n			<br>\n			<A href='?src=" ).Ref( this ).str( ";forcespeech=" ).Ref( M ).str( "'>Forcesay</A> |\n			<A href='?src=" ).Ref( this ).str( ";tdome1=" ).Ref( M ).str( "'>Thunderdome Green</A> |\n			<A href='?src=" ).Ref( this ).str( ";tdome2=" ).Ref( M ).str( "'>Thunderdome Red</A> |\n			<A href='?src=" ).Ref( this ).str( ";tdomeadmin=" ).Ref( M ).str( "'>Thunderdome Admin</A> |\n			<A href='?src=" ).Ref( this ).str( ";tdomeobserve=" ).Ref( M ).str( "'>Thunderdome Observer</A> |\n		" ).ToString();
			}
			body += "<br><br><b>Languages:</b><br>";
			f = true;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.all_languages )) {
				k = _a;
				
				L2 = GlobalVars.all_languages[k];

				if ( !f ) {
					body += " | ";
				} else {
					f = false;
				}
				Interface13.Stat( null, M.languages.Contains( L2 ) );

				if ( !f ) {
					body += new Txt( "<a href='?src=" ).Ref( this ).str( ";toglang=" ).Ref( M ).str( ";lang=" ).item( String13.HtmlEncode( k ) ).str( "' style='color:#006600'>" ).item( k ).str( "</a>" ).ToString();
				} else {
					body += new Txt( "<a href='?src=" ).Ref( this ).str( ";toglang=" ).Ref( M ).str( ";lang=" ).item( String13.HtmlEncode( k ) ).str( "' style='color:#ff0000'>" ).item( k ).str( "</a>" ).ToString();
				}
			}
			body += "<br>\n		</body></html>\n	";
			Interface13.Browse( Task13.User, body, new Txt( "window=adminplayeropts-" ).Ref( M ).str( ";size=550x515" ).ToString() );
			GlobalFuncs.feedback_add_details( "admin_verb", "SPP" );
			return;
		}

		// Function from file: admin.dm
		public override bool SDQL_update( dynamic var_name = null, double? new_value = null ) {
			return false;
		}

	}

}