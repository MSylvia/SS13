// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Symptom_DamageConverter : Symptom {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Toxic Compensation";
			this.stealth = 1;
			this.resistance = -4;
			this.stage_speed = -4;
			this.transmittable = -2;
			this.level = 4;
		}

		// Function from file: damage_converter.dm
		public bool Convert( dynamic M = null ) {
			int get_damage = 0;

			
			if ( ((Mob_Living)M).getFireLoss() < Convert.ToDouble( ((Mob_Living)M).getMaxHealth() ) || ((Mob_Living)M).getBruteLoss() < Convert.ToDouble( ((Mob_Living)M).getMaxHealth() ) ) {
				get_damage = Rand13.Int( 1, 2 );
				((Mob_Living)M).adjustFireLoss( -get_damage );
				((Mob_Living)M).adjustBruteLoss( -get_damage );
				((Mob_Living)M).adjustToxLoss( get_damage );
				return true;
			}
			return false;
		}

		// Function from file: damage_converter.dm
		public override void Activate( Disease_Advance A = null ) {
			dynamic M = null;

			base.Activate( A );

			if ( Rand13.PercentChance( GlobalVars.SYMPTOM_ACTIVATION_PROB ) ) {
				M = A.affected_mob;

				switch ((int?)( A.stage )) {
					case 4:
					case 5:
						this.Convert( M );
						break;
				}
			}
			return;
		}

	}

}