// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Transmitter : Wires {

		public double counter = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Media_Transmitter_Broadcast);
			this.wire_count = 5;
		}

		public Wires_Transmitter ( Obj holder = null ) : base( holder ) {
			
		}

		// Function from file: transmitter.dm
		public override void UpdateCut( double? index = null, bool mended = false ) {
			Obj T = null;

			T = this.holder;

			switch ((int?)(index)) {
				case 1:
					((dynamic)T).power_change();
					((dynamic)T).shock( Task13.User, 50 );
					break;
				case 8:
					((dynamic)T).shock( Task13.User, 50 );
					break;
			}
			return;
		}

		// Function from file: transmitter.dm
		public override void UpdatePulsed( double? index = null ) {
			Obj T = null;
			GasMixture env = null;

			T = this.holder;

			switch ((int?)(index)) {
				case 1:
					((dynamic)T).on = !Lang13.Bool( ((dynamic)T).on );
					((dynamic)T).update_on();
					break;
				case 8:
					((dynamic)T).unhook_media_sources();
					break;
				case 16:
					env = T.loc.return_air();
					this.counter = ( env.temperature ??0) / 313.41 * 100;
					break;
			}
			return;
		}

		// Function from file: transmitter.dm
		public override string GetInteractWindow(  ) {
			string _default = null;

			Obj T = null;

			T = this.holder;
			_default += base.GetInteractWindow();
			_default += "<BR>The backlight is " + ( this.IsIndexCut( GlobalVars.TRANS_POWER ) != 0 ? "dim" : "illuminated" ) + ".<BR>\n	The radiation warning light is " + ( Convert.ToDouble( ((dynamic)T).count_rad_wires() ) > 1 ? "brightly" : "" ) + " " + ( Lang13.Bool( ((dynamic)T).count_rad_wires() ) ? "shining" : "off" ) + ".<BR>\n	It has a cryptic display " + ( this.counter != 0 ? "reading " + this.counter : "that is blank" ) + ".<BR>";
			return _default;
		}

		// Function from file: transmitter.dm
		public override bool CanUse( dynamic L = null ) {
			Obj T = null;

			T = this.holder;

			if ( Lang13.Bool( ((dynamic)T).panel_open ) ) {
				return true;
			}
			return false;
		}

	}

}