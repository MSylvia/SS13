// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Signal : Game_Data {

		public dynamic source = null;
		public bool transmission_method = false;
		public ByTable data = new ByTable();
		public dynamic encryption = null;
		public bool frequency = false;

		// Function from file: communications.dm
		public Signal (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.pointers.Add( new Txt().Ref( this ).ToString() );
			return;
		}

		// Function from file: Telecomms.dm
		public void tcombroadcast( dynamic message = null, dynamic freq = null, string source = null, string job = null ) {
			Game_Data newsign = null;
			Obj_Machinery_Telecomms_Server S = null;
			Obj_Item_Device_Radio hradio = null;
			Game_Data virt = null;
			dynamic connection = null;
			int? pass = null;

			newsign = GlobalFuncs.getFromPool( typeof(Signal) );
			S = this.data["server"];
			hradio = S.server_radio;

			if ( !( hradio != null ) ) {
				GlobalFuncs.error( "" + this + " has no radio." );
				return;
			}

			if ( ( !Lang13.Bool( message ) || message == "" ) && message != 0 ) {
				message = "*beep*";
			}

			if ( !Lang13.Bool( source ) ) {
				source = "" + String13.HtmlEncode( String13.ToUpper( S.id ) );
				hradio = new Obj_Item_Device_Radio();
			}

			if ( !Lang13.Bool( freq ) || !Lang13.Bool( Lang13.IsNumber( freq ) ) && String13.ParseNumber( freq ) == null ) {
				freq = 1459;
			}

			if ( String13.FindIgnoreCase( String13.NumberToString( Convert.ToDouble( freq ) ), ".", 1, 0 ) != 0 ) {
				freq *= 10;
			}

			if ( !Lang13.Bool( job ) ) {
				job = "Unknown";
			}
			virt = GlobalFuncs.getFromPool( typeof(Dynamic_Virtualspeaker), null );
			((dynamic)virt).name = source;
			((dynamic)virt).job = job;
			((dynamic)virt).faketrack = 1;
			((dynamic)newsign).data["mob"] = virt;
			((dynamic)newsign).data["mobtype"] = typeof(Mob_Living_Carbon_Human);
			((dynamic)newsign).data["name"] = source;
			((dynamic)newsign).data["realname"] = ((dynamic)newsign).data["name"];
			((dynamic)newsign).data["job"] = "" + job;
			((dynamic)newsign).data["compression"] = 0;
			((dynamic)newsign).data["message"] = message;
			((dynamic)newsign).data["type"] = 2;

			if ( !Lang13.Bool( Lang13.IsNumber( freq ) ) ) {
				freq = String13.ParseNumber( freq );
			}
			((dynamic)newsign).frequency = freq;
			connection = GlobalVars.radio_controller.return_frequency( freq );
			((dynamic)newsign).data["connection"] = connection;
			((dynamic)newsign).data["radio"] = hradio;
			((dynamic)newsign).data["vmessage"] = message;
			((dynamic)newsign).data["vname"] = source;
			((dynamic)newsign).data["vmask"] = 0;
			((dynamic)newsign).data["level"] = this.data["level"];
			((dynamic)newsign).sanitize_data();
			pass = S.relay_information( newsign, "/obj/machinery/telecomms/hub" );

			if ( !Lang13.Bool( pass ) ) {
				S.relay_information( newsign, "/obj/machinery/telecomms/broadcaster" );
			}
			Task13.Schedule( 50, (Task13.Closure)(() => {
				GlobalFuncs.returnToPool( virt );
				return;
			}));
			return;
		}

		// Function from file: Telecomms.dm
		public void signaler( dynamic freq = null, double? code = null ) {
			freq = freq ?? 1459;
			code = code ?? 30;

			Obj_Machinery_Telecomms_Server S = null;
			dynamic connection = null;
			Game_Data signal = null;
			string time = null;

			
			if ( Lang13.Bool( Lang13.IsNumber( freq ) ) && Lang13.Bool( Lang13.IsNumber( code ) ) ) {
				S = this.data["server"];

				if ( S.last_signal + 20 > Game13.timeofday && S.last_signal < 864000 ) {
					return;
				}
				S.last_signal = Game13.timeofday;
				connection = GlobalVars.radio_controller.return_frequency( freq );

				if ( String13.FindIgnoreCase( String13.NumberToString( Convert.ToDouble( freq ) ), ".", 1, 0 ) != 0 ) {
					freq *= 10;
				}
				freq = GlobalFuncs.sanitize_frequency( freq );
				code = Num13.Floor( code ??0 );
				code = ( ( code ??0) <= 0 ? 0 : ( ( code ??0) >= 100 ? 100 : code ) );
				signal = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal).source = S;
				((dynamic)signal).encryption = code;
				((dynamic)signal).data["message"] = "ACTIVATE";
				connection.post_signal( S, signal );
				time = String13.FormatTime( Game13.realtime, "hh:mm:ss" );
				GlobalVars.lastsignalers.Add( "" + time + " <B>:</B> " + S.id + " sent a signal command, which was triggered by NTSL.<B>:</B> " + GlobalFuncs.format_frequency( freq ) + "/" + code );
			}
			return;
		}

		// Function from file: Telecomms.dm
		public dynamic mem( dynamic address = null, bool value = false ) {
			dynamic S = null;

			
			if ( address is string ) {
				S = this.data["server"];

				if ( !value && value ) {
					return S.memory[address];
				} else {
					S.memory[address] = value;
				}
			}
			return null;
		}

		// Function from file: communications.dm
		public void sanitize_data(  ) {
			dynamic d = null;
			dynamic val = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.data )) {
				d = _a;
				
				val = this.data[d];

				if ( val is string ) {
					this.data[d] = GlobalFuncs.strip_html_simple( val );
				}
			}
			return;
		}

		// Function from file: communications.dm
		public string debug_print(  ) {
			string _default = null;

			dynamic i = null;
			dynamic L = null;
			dynamic t = null;

			
			if ( Lang13.Bool( this.source ) ) {
				_default = "signal = {source = '" + this.source + "' (" + this.source.x + "," + this.source.y + "," + this.source.z + ")\n";
			} else {
				_default = "signal = {source = '" + this.source + "' ()\n";
			}

			foreach (dynamic _b in Lang13.Enumerate( this.data )) {
				i = _b;
				
				_default += "data[\"" + i + "\"] = \"" + this.data[i] + "\"\n";

				if ( GlobalFuncs.islist( this.data[i] ) ) {
					L = this.data[i];

					foreach (dynamic _a in Lang13.Enumerate( L )) {
						t = _a;
						
						_default += "data[\"" + i + "\"] list has: " + t;
					}
				}
			}
			return _default;
		}

		// Function from file: communications.dm
		public void copy_from( Signal model = null ) {
			this.source = model.source;
			this.transmission_method = model.transmission_method;
			this.data = model.data;
			this.encryption = model.encryption;
			this.frequency = model.frequency;
			return;
		}

		// Function from file: communications.dm
		public override dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			dynamic _default = null;

			_default = base.resetVariables( "data" );
			this.source = null;
			this.data = new ByTable();
			return _default;
		}

		// Function from file: communications.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.pointers.Remove( new Txt().Ref( this ).ToString() );
			return null;
		}

	}

}