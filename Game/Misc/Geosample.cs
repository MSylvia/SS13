// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Geosample : Game_Data {

		public int age = 0;
		public int age_thousand = 0;
		public int age_million = 0;
		public int age_billion = 0;
		public string artifact_id = "";
		public double artifact_distance = -1;
		public string source_mineral = "chlorine";
		public double total_spread = 0;
		public ByTable find_presence = new ByTable();

		// Function from file: geosample.dm
		public Geosample ( Tile_Unsimulated_Mineral container = null ) {
			this.UpdateTurf( container );
			return;
		}

		// Function from file: geosample.dm
		public void UpdateNearbyArtifactInfo( Ent_Static container = null ) {
			Tile_Unsimulated_Mineral T = null;
			double cur_dist = 0;

			
			if ( !( container != null ) || !( container is Tile_Unsimulated_Mineral ) ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)container).artifact_find ) ) {
				this.artifact_distance = Rand13.Float();
				this.artifact_id = ((dynamic)container).artifact_find.artifact_id;
			} else if ( GlobalVars.master_controller != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.master_controller.artifact_spawning_turfs, typeof(Tile_Unsimulated_Mineral) )) {
					T = _a;
					

					if ( T.artifact_find != null ) {
						cur_dist = Map13.GetDistance( container, T ) * 2;

						if ( ( this.artifact_distance < 0 || cur_dist < this.artifact_distance ) && cur_dist <= T.artifact_find.artifact_detect_range ) {
							this.artifact_distance = cur_dist + Rand13.Float() * 2 - 1;
							this.artifact_id = T.artifact_find.artifact_id;
						}
					} else {
						GlobalVars.master_controller.artifact_spawning_turfs.Remove( T );
					}
				}
			}
			return;
		}

		// Function from file: geosample.dm
		public void UpdateTurf( Tile_Unsimulated_Mineral container = null ) {
			Find F = null;
			string responsive_reagent = null;
			double total_presence = 0;
			dynamic carrier = null;
			dynamic carrier2 = null;
			dynamic entry = null;

			
			if ( !( container != null ) || !( container is Tile_Unsimulated_Mineral ) ) {
				return;
			}
			this.age = Rand13.Int( 1, 999 );

			if ( container.mineral != null ) {
				
				switch ((string)( container.mineral.name )) {
					case "Uranium":
						this.age_million = Rand13.Int( 1, 704 );
						this.age_thousand = Rand13.Int( 1, 999 );
						this.find_presence["potassium"] = Rand13.Int( 1, 1000 ) / 100;
						this.source_mineral = "potassium";
						break;
					case "Iron":
						this.age_thousand = Rand13.Int( 1, 999 );
						this.age_million = Rand13.Int( 1, 999 );
						this.find_presence["iron"] = Rand13.Int( 1, 1000 ) / 100;
						this.source_mineral = "iron";
						break;
					case "Diamond":
						this.age_thousand = Rand13.Int( 1, 999 );
						this.age_million = Rand13.Int( 1, 999 );
						this.find_presence["nitrogen"] = Rand13.Int( 1, 1000 ) / 100;
						this.source_mineral = "nitrogen";
						break;
					case "Gold":
						this.age_thousand = Rand13.Int( 1, 999 );
						this.age_million = Rand13.Int( 1, 999 );
						this.age_billion = Rand13.Int( 3, 4 );
						this.find_presence["iron"] = Rand13.Int( 1, 1000 ) / 100;
						this.source_mineral = "iron";
						break;
					case "Silver":
						this.age_thousand = Rand13.Int( 1, 999 );
						this.age_million = Rand13.Int( 1, 999 );
						this.find_presence["iron"] = Rand13.Int( 1, 1000 ) / 100;
						this.source_mineral = "iron";
						break;
					case "Plasma":
						this.age_thousand = Rand13.Int( 1, 999 );
						this.age_million = Rand13.Int( 1, 999 );
						this.age_billion = Rand13.Int( 10, 13 );
						this.find_presence["plasma"] = Rand13.Int( 1, 1000 ) / 100;
						this.source_mineral = "plasma";
						break;
					case "Clown":
						this.age = Rand13.Int( -1, -999 );
						this.age_thousand = Rand13.Int( -1, -999 );
						this.find_presence["plasma"] = Rand13.Int( 1, 1000 ) / 100;
						this.source_mineral = "plasma";
						break;
				}
			}

			if ( Rand13.PercentChance( 75 ) ) {
				this.find_presence["phosphorus"] = Rand13.Int( 1, 500 ) / 100;
			}

			if ( Rand13.PercentChance( 25 ) ) {
				this.find_presence["mercury"] = Rand13.Int( 1, 500 ) / 100;
			}
			this.find_presence["chlorine"] = Rand13.Int( 500, 2500 ) / 100;

			foreach (dynamic _b in Lang13.Enumerate( container.finds, typeof(Find) )) {
				F = _b;
				
				responsive_reagent = GlobalFuncs.get_responsive_reagent( F.find_type );
				this.find_presence[responsive_reagent] = F.dissonance_spread;
			}
			total_presence = 0;

			foreach (dynamic _c in Lang13.Enumerate( this.find_presence )) {
				carrier = _c;
				
				total_presence += Convert.ToDouble( this.find_presence[carrier] );
			}

			foreach (dynamic _d in Lang13.Enumerate( this.find_presence )) {
				carrier2 = _d;
				
				this.find_presence[carrier2] = this.find_presence[carrier2] / total_presence;
			}

			foreach (dynamic _e in Lang13.Enumerate( this.find_presence )) {
				entry = _e;
				
				this.total_spread += Convert.ToDouble( this.find_presence[entry] );
			}
			return;
		}

	}

}