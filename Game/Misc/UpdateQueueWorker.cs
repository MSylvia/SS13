// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class UpdateQueueWorker : Game_Data {

		public ByTable objects = null;
		public bool killed = false;
		public bool finished = false;
		public string procName = null;
		public ByTable arguments = null;
		public int lastStart = 0;
		public int? cpuThreshold = null;

		// Function from file: updateQueueWorker.dm
		public UpdateQueueWorker ( ByTable objects = null, string procName = null, ByTable arguments = null, int? cpuThreshold = null ) {
			cpuThreshold = cpuThreshold ?? 90;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.init( objects, procName, arguments, cpuThreshold );
			return;
		}

		// Function from file: updateQueueWorker.dm
		public void start(  ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.doWork();
				return;
			}));
			return;
		}

		// Function from file: updateQueueWorker.dm
		public void kill(  ) {
			this.killed = true;
			this.objects = null;
			Task13.Schedule( 300, (Task13.Closure)(() => {
				Lang13.Delete( this );
				Task13.Source = null;
				return;
				return;
			}));
			return;
		}

		// Function from file: updateQueueWorker.dm
		[VerbInfo( name: "finished" )]
		public void f_finished(  ) {
			
			if ( this.killed ) {
				Lang13.Delete( this );
				Task13.Source = null;
				return;
			}
			this.finished = true;
			return;
		}

		// Function from file: updateQueueWorker.dm
		public void doWork(  ) {
			Game_Data _object = null;

			
			if ( !( this.objects != null ) || !( this.objects.len != 0 ) ) {
				this.f_finished(); return;
			}
			this.lastStart = Game13.timeofday;
			_object = this.objects[this.objects.len];
			this.objects.len--;

			if ( _object is Game_Data && !( _object is Tile ) && !( _object.disposed == true ) && _object.gcDestroyed == null ) {
				this.arguments.Apply( Lang13.BindFunc( _object, this.procName ) );
			} else if ( _object is Tile_Unsimulated_Wall_Supermatter ) {
				this.arguments.Apply( Lang13.BindFunc( _object, this.procName ) );
			}

			if ( !( this.objects != null ) || !( this.objects.len != 0 ) ) {
				this.f_finished(); return;
			}

			if ( Game13.cpu > ( this.cpuThreshold ??0) ) {
				Task13.Schedule( ((int)( Game13.tick_lag )), (Task13.Closure)(() => {
					this.doWork();
					return;
				}));
			} else {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.doWork();
					return;
				}));
			}
			return;
		}

		// Function from file: updateQueueWorker.dm
		public void init( ByTable objects = null, string procName = null, ByTable arguments = null, int? cpuThreshold = null ) {
			cpuThreshold = cpuThreshold ?? 90;

			this.objects = objects;
			this.procName = procName;
			this.arguments = arguments;
			this.cpuThreshold = cpuThreshold;
			this.killed = false;
			this.finished = false;
			return;
		}

	}

}