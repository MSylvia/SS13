// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class PdaApp_Spesspets : PdaApp {

		public Obj_Machinery_AccountDatabase linked_db = null;
		public int game_state = 0;
		public string petname = "Ianitchi";
		public string petID = "000000";
		public int level = 0;
		public double exp = 0;
		public string race = "Corgegg";
		public int hatching = 0;
		public bool ishungry = false;
		public bool isdirty = false;
		public int ishurt = 0;
		public int ishappy = 0;
		public int isatwork = 0;
		public int issleeping = 0;
		public string last_spoken = "Corgegg";
		public dynamic walk_target = null;
		public int last_walk_start = 0;
		public int total_happiness = 0;
		public int total_hunger = 0;
		public int total_dirty = 0;
		public int walk_completed = 0;
		public int next_coin = 0;
		public int total_coins = 0;
		public bool isfighting = false;
		public ByTable challenged = new ByTable();
		public bool isvisiting = false;
		public ByTable visited = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Spess Pets";
			this.desc = "A virtual pet simulator. For when you don't have the balls to own a real pet. Includes multi-PDA interactions and Nanocoin mining.";
			this.price = 70;
			this.menu = 107;
			this.icon = "pda_egg";
		}

		// Function from file: spess pets.dm
		public void button_rates(  ) {
			this.last_spoken = "<i>At the current rates you will get " + GlobalVars.nanocoins_rates + " dollars per nanocoins.</i>";
			return;
		}

		// Function from file: spess pets.dm
		public void button_cash(  ) {
			dynamic D = null;
			int transaction_amount = 0;
			Transaction T = null;

			
			if ( !Lang13.Bool( this.pda_device.id ) ) {
				this.last_spoken = "<i>Insert an ID card linked to collect the nanocoins at the current rates.</i>";
			} else {
				
				if ( !( this.linked_db != null ) ) {
					this.reconnect_database();
				}

				if ( this.linked_db != null ) {
					
					if ( this.linked_db.activated ) {
						D = this.linked_db.attempt_account_access( this.pda_device.id.associated_account_number, 0, 2, false );

						if ( Lang13.Bool( D ) ) {
							this.last_spoken = "<i>Transferring all nanocoins to " + D.owner_name + "'s bank account.</i>";
							transaction_amount = GlobalFuncs.nano2dollar( this.total_coins );
							D.money += transaction_amount;
							T = new Transaction();
							T.target_name = "" + D.owner_name + " (via " + this.name + "(" + this.petname + "))";
							T.purpose = "Nanocoin Transfer (from " + this.name + "(" + this.petname + "))";
							T.amount = "" + transaction_amount;
							T.source_terminal = "Nanocoin Mines";
							T.date = GlobalVars.current_date_string;
							T.time = GlobalFuncs.worldtime2text();
							D.transaction_log.Add( T );
							this.total_coins = 0;
						} else {
							this.last_spoken = "<i>Unable to access account. Either its security settings don't allow remote checking or the account is nonexistent.</i>";
						}
					} else {
						this.last_spoken = "<i>Unfortunately your station's Accounts Database doesn't allow remote access. Negociate with your HoP or Captain to solve this issue.</i>";
					}
				} else {
					this.last_spoken = "<i>Unable to connect to accounts database. The database is either nonexistent, inoperative, or too far away.</i>";
				}
			}
			return;
		}

		// Function from file: spess pets.dm
		public void button_work(  ) {
			
			if ( this.ishungry ) {
				this.last_spoken = "" + this.petname + " cannot go to work without having lunch first!";
				return;
			}

			if ( this.isdirty ) {
				this.last_spoken = "" + this.petname + " cannot go to work without taking a shower first!";
				return;
			}

			if ( this.ishurt != 0 ) {
				this.last_spoken = "" + this.petname + " cannot go to work without getting some medical assistance first!";
				return;
			}
			this.last_spoken = "" + this.petname + " just left for work!";
			this.isatwork = 600;
			return;
		}

		// Function from file: spess pets.dm
		public void button_visit(  ) {
			int chance_to_get_along = 0;
			dynamic T = null;
			ByTable possible_visitors = null;
			Obj_Item_Device_Pda check_pda = null;
			dynamic pet_app = null;
			dynamic T2 = null;
			dynamic visitor = null;

			this.isvisiting = true;
			chance_to_get_along = 50;

			if ( this.level >= 6 && this.level <= 10 ) {
				chance_to_get_along += 15;
			}
			T = GlobalFuncs.get_turf( this.pda_device );
			possible_visitors = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.PDAs, typeof(Obj_Item_Device_Pda) )) {
				check_pda = _a;
				
				pet_app = Lang13.FindIn( typeof(PdaApp_Spesspets), check_pda.applications );

				if ( Lang13.Bool( pet_app ) && pet_app.game_state == 2 && !pet_app.isvisiting && ( !Lang13.Bool( this.visited[pet_app.petID] ) || Game13.time - Convert.ToDouble( this.visited[pet_app.petID] ) >= 6000 ) ) {
					T2 = GlobalFuncs.get_turf( check_pda );

					if ( Map13.FetchInRange( 3, T ).Contains( T2 ) ) {
						possible_visitors.Add( pet_app );
					}
				}
			}

			if ( possible_visitors.len != 0 ) {
				visitor = Rand13.PickFromTable( possible_visitors );
				this.visited[visitor.petID] = Game13.time;
				this.last_spoken = "" + this.petname + " meets " + visitor.petname;
				visitor.last_spoken = "" + visitor.petname + " meets " + this.petname;
				visitor.isvisiting = true;
				Task13.Schedule( 20, (Task13.Closure)(() => {
					
					if ( this.level >= 6 && this.level <= 10 ) {
						chance_to_get_along += 15;
					}

					if ( this.race == visitor.race ) {
						chance_to_get_along += 20;
					}

					if ( Rand13.PercentChance( chance_to_get_along ) ) {
						this.last_spoken = "" + this.petname + " and " + visitor.petname + " are getting along nicely!";
						visitor.last_spoken = "" + visitor.petname + " and " + this.petname + " are getting along nicely!";
						this.exp += 900;
						visitor.exp += 900;
					} else {
						this.last_spoken = "" + this.petname + " and " + visitor.petname + " are shouting at each other!";
						visitor.last_spoken = "" + visitor.petname + " and " + this.petname + " are shouting at each other!";
					}
					return;
				}));
				visitor.isvisiting = false;
			} else {
				this.last_spoken = "There is no one to meet nearby.";
			}
			this.isvisiting = false;
			return;
		}

		// Function from file: spess pets.dm
		public void button_fight(  ) {
			int chance_to_win = 0;
			dynamic T = null;
			ByTable possible_challengers = null;
			Obj_Item_Device_Pda check_pda = null;
			dynamic pet_app = null;
			dynamic T2 = null;
			dynamic challenger = null;
			int enemy_level = 0;

			this.isfighting = true;
			chance_to_win = 50;

			if ( this.level >= 11 && this.level <= 15 ) {
				chance_to_win += 15;
			}

			if ( this.ishurt != 0 ) {
				chance_to_win -= 15;
			}
			T = GlobalFuncs.get_turf( this.pda_device );
			possible_challengers = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.PDAs, typeof(Obj_Item_Device_Pda) )) {
				check_pda = _a;
				
				pet_app = Lang13.FindIn( typeof(PdaApp_Spesspets), check_pda.applications );

				if ( Lang13.Bool( pet_app ) && pet_app.game_state == 2 && !pet_app.isfighting && ( !Lang13.Bool( this.challenged[pet_app.petID] ) || Game13.time - Convert.ToDouble( this.challenged[pet_app.petID] ) >= 6000 ) ) {
					T2 = GlobalFuncs.get_turf( check_pda );

					if ( Map13.FetchInRange( 3, T ).Contains( T2 ) ) {
						possible_challengers.Add( pet_app );
					}
				}
			}

			if ( possible_challengers.len != 0 ) {
				challenger = Rand13.PickFromTable( possible_challengers );
				this.challenged[challenger.petID] = Game13.time;
				this.last_spoken = "" + this.petname + " runs accross " + challenger.petname + " (level " + challenger.level + ")";
				challenger.last_spoken = "" + challenger.petname + " runs accross " + this.petname + " (level " + this.level + ")";
				challenger.isfighting = true;
				Task13.Schedule( 20, (Task13.Closure)(() => {
					
					if ( this.level >= 11 && this.level <= 15 ) {
						chance_to_win -= 15;
					}

					if ( Rand13.PercentChance( chance_to_win ) ) {
						this.last_spoken = "" + this.petname + " has defeated " + challenger.petname + "!";
						this.ishappy = 1200;

						if ( this.level >= 11 && this.level <= 15 ) {
							this.exp += 900;
						}
						challenger.last_spoken = "" + challenger.petname + " has lost to the enemy!";
						challenger.ishurt = Num13.MaxInt( 1, challenger.ishurt );
					} else {
						this.last_spoken = "" + this.petname + " has lost to " + challenger.petname + "!";
						this.ishurt = 1;
						challenger.last_spoken = "" + challenger.petname + " has defeated " + this.petname + "!";
						challenger.ishappy = 1200;

						if ( Convert.ToDouble( challenger.level ) >= 11 && Convert.ToDouble( challenger.level ) <= 15 ) {
							challenger.exp += 900;
						}
					}
					return;
				}));
				challenger.isfighting = false;
			} else {
				enemy_level = Rand13.Int( this.level - 3, this.level + 3 );
				this.last_spoken = "" + this.petname + " runs accross a level " + enemy_level + " enemy " + Rand13.Pick(new object [] { "mouse", "spider", "bee", "carp" });
				Task13.Schedule( 20, (Task13.Closure)(() => {
					chance_to_win += ( this.level - enemy_level ) * 2;
					chance_to_win = Num13.MinInt( 100, Num13.MaxInt( 0, chance_to_win ) );

					if ( Rand13.PercentChance( chance_to_win ) ) {
						this.last_spoken = "" + this.petname + " has defeated the enemy!";
						this.ishappy = 600;

						if ( this.level >= 11 && this.level <= 15 ) {
							this.exp += 900;
						}
					} else {
						this.last_spoken = "" + this.petname + " has lost to the enemy!";
						this.ishurt = Num13.MaxInt( 1, this.ishurt );
					}
					return;
				}));
			}
			this.isfighting = false;
			return;
		}

		// Function from file: spess pets.dm
		public void button_heal(  ) {
			
			if ( this.ishurt != 0 ) {
				this.ishurt = 0;
				this.last_spoken = "You bandage up " + this.petname + "!";
			}
			return;
		}

		// Function from file: spess pets.dm
		public void button_clean(  ) {
			
			if ( this.isdirty ) {
				this.isdirty = false;
				this.last_spoken = "You clean up " + this.petname + "!";
			}
			return;
		}

		// Function from file: spess pets.dm
		public void button_feed(  ) {
			string food = null;

			
			if ( this.ishungry ) {
				this.ishungry = false;
				food = "meat";

				switch ((string)( this.race )) {
					case "Corgegg":
						food = "" + Rand13.Pick(new object [] { "meat", "bones" });
						break;
					case "Borgegg":
						food = "" + Rand13.Pick(new object [] { "bolts", "oil" });
						break;
					case "Chimpegg":
						food = "" + Rand13.Pick(new object [] { "bananas", "nuts" });
						break;
					case "Syndegg":
						food = "" + Rand13.Pick(new object [] { "syndie-cakes", "busta-nuts" });
						break;
				}
				this.last_spoken = "You feed " + this.petname + " some " + food + "!";

				if ( this.level >= 1 && this.level <= 5 ) {
					this.exp += 900;
				}
			}
			return;
		}

		// Function from file: spess pets.dm
		public void button_walk(  ) {
			ByTable valid_area_types = null;
			dynamic current_area = null;

			
			if ( !Lang13.Bool( this.walk_target ) || Game13.time - this.last_walk_start > 36000 ) {
				this.last_walk_start = Game13.time;
				valid_area_types = new ByTable();

				switch ((string)( this.race )) {
					case "Corgegg":
						valid_area_types = new ByTable(new object [] { typeof(Zone_CrewQuarters_Bar), typeof(Zone_Chapel_Main), typeof(Zone_Library), typeof(Zone_Hydroponics), typeof(Zone_CrewQuarters_Kitchen), typeof(Zone_CrewQuarters_Hop) });
						break;
					case "Borgegg":
						valid_area_types = new ByTable(new object [] { 
							typeof(Zone_CrewQuarters_Bar), 
							typeof(Zone_Maintenance_Incinerator), 
							typeof(Zone_Engineering_Atmos), 
							typeof(Zone_Hydroponics), 
							typeof(Zone_Storage_Tech), 
							typeof(Zone_Storage_NukeStorage)
						 });
						break;
					case "Chimpegg":
						valid_area_types = new ByTable(new object [] { 
							typeof(Zone_CrewQuarters_Bar), 
							typeof(Zone_CrewQuarters_Kitchen), 
							typeof(Zone_Science_Xenobiology), 
							typeof(Zone_Science_Telescience), 
							typeof(Zone_Science_Robotics), 
							typeof(Zone_Science_TestArea), 
							typeof(Zone_Maintenance_Ghettobar)
						 });
						break;
					case "Syndegg":
						valid_area_types = new ByTable(new object [] { 
							typeof(Zone_CrewQuarters_Bar), 
							typeof(Zone_Storage_NukeStorage), 
							typeof(Zone_Derelict_Ship), 
							typeof(Zone_Asteroid_Clown), 
							typeof(Zone_VoxTradingPost), 
							typeof(Zone_Science_TestArea), 
							typeof(Zone_Derelict), 
							typeof(Zone_Djstation)
						 });
						break;
				}
				this.walk_target = Lang13.FindObj( Rand13.PickFromTable( valid_area_types ) );
				this.last_spoken = "Looks like " + this.petname + " wants to go visit " + this.walk_target.name + "!";
			} else {
				current_area = GlobalFuncs.get_area( this.pda_device );

				if ( current_area.name == this.walk_target.name ) {
					this.exp += 900;
					this.ishappy = Num13.MaxInt( 300, this.ishappy );
					this.walk_completed++;
					this.last_spoken = new Txt().item( this.petname ).str( " happily looks around " ).the( this.walk_target.name ).item().str( "!" ).ToString();
					this.walk_target = null;
				} else {
					this.last_spoken = "Looks like " + this.petname + " wants to go visit " + this.walk_target.name + "!";
				}
			}
			return;
		}

		// Function from file: spess pets.dm
		public void button_talk(  ) {
			string talk_line = null;

			talk_line = "";

			switch ((string)( this.race )) {
				case "Corgegg":
					
					dynamic _a = this.level; // Was a switch-case, sorry for the mess.
					if ( 1<=_a&&_a<=5 ) {
						talk_line = Rand13.Pick(new object [] { "woof", "arf", "nuff", "awoo" });
					} else if ( 6<=_a&&_a<=10 ) {
						talk_line = Rand13.Pick(new object [] { "I wuf U", "" + ( this.isdirty ? "I made that for you" : "Arf Arf Arf" ), "I wanna walk", "Awooo" });
					} else if ( 11<=_a&&_a<=15 ) {
						talk_line = Rand13.Pick(new object [] { "Who you woofing to?", "" + ( this.ishurt != 0 ? "Tis but a scratch" : "Grrrr" ), "" + ( this.ishappy != 0 ? "I feel like a million bones" : "Gimme something to rip apart" ), "Ian is my idol" });
					} else if ( 16<=_a&&_a<=48 ) {
						talk_line = "" + ( this.issleeping != 0 ? "Zzzzz" : "" + Rand13.Pick(new object [] { "Woof sweet Woof", "The days come and go, and I'm just here, woofing", "I should buy a house", "Ouaf! Wan! I can woof in 36 different languages!" }) );
					} else if ( 49<=_a&&_a<=50 ) {
						talk_line = Rand13.Pick(new object [] { "so tired", "I need some sleep" });
					}
					break;
				case "Borgegg":
					
					dynamic _b = this.level; // Was a switch-case, sorry for the mess.
					if ( 1<=_b&&_b<=5 ) {
						talk_line = Rand13.Pick(new object [] { "beebeep", "ping", "beep boop", "buzz" });
					} else if ( 6<=_b&&_b<=10 ) {
						GlobalFuncs.to_chat();
					} else if ( 11<=_b&&_b<=15 ) {
						talk_line = Rand13.Pick(new object [] { "Imma cut you", "" + ( this.ishurt != 0 ? "Minor dents aquired" : "*buzzing loudly*" ), "" + ( this.ishappy != 0 ? "*beeping loudly*" : "c'mon, emmag me" ), "ur the autistic one" });
					} else if ( 16<=_b&&_b<=48 ) {
						talk_line = "" + ( this.issleeping != 0 ? "Bzzzz" : "" + Rand13.Pick(new object [] { "I built that", "I'm gonna be a station AI someday", "Can I come outside?", "Hello World()" }) );
					} else if ( 49<=_b&&_b<=50 ) {
						talk_line = Rand13.Pick(new object [] { "Goodnight World", "Shutting down" });
					}
					break;
				case "Chimpegg":
					
					dynamic _c = this.level; // Was a switch-case, sorry for the mess.
					if ( 1<=_c&&_c<=5 ) {
						talk_line = Rand13.Pick(new object [] { "ook", "ooki", "eek", "ook?" });
					} else if ( 6<=_c&&_c<=10 ) {
						talk_line = Rand13.Pick(new object [] { "U got a banana?", "" + ( this.isdirty ? "Imma throw me poop at 'em" : "Ook? Ook!" ), "Dem balls" });
					} else if ( 11<=_c&&_c<=15 ) {
						talk_line = Rand13.Pick(new object [] { "You lookin for monkey trabble?", "" + ( this.ishurt != 0 ? "Dun look at me!" : "Come on look at me!" ), "" + ( this.ishappy != 0 ? "I feel like a million bananas" : "Oooooooki!" ), "Later I'll be an astrochimp" });
					} else if ( 16<=_c&&_c<=48 ) {
						talk_line = "" + ( this.issleeping != 0 ? "One banana, Two bananas,...." : "" + Rand13.Pick(new object [] { "Good ta see ya", "I gat sam spare banana juice, let's throw da paaty", "What does Ook mean anyway? Out-Of-Karakter?" }) );
					} else if ( 49<=_c&&_c<=50 ) {
						talk_line = Rand13.Pick(new object [] { "don't wake me up", "I'll be gone soon" });
					}
					break;
				case "Syndegg":
					
					dynamic _d = this.level; // Was a switch-case, sorry for the mess.
					if ( 1<=_d&&_d<=5 ) {
						talk_line = Rand13.Pick(new object [] { "arrr", "errr", "newkemm", "madabone?" });
					} else if ( 6<=_d&&_d<=10 ) {
						talk_line = Rand13.Pick(new object [] { "Are u valeed", "" + ( this.isdirty ? "Nuclear Poop Emergency" : "Im a big guy!" ), "Look at dis" });
					} else if ( 11<=_d&&_d<=15 ) {
						talk_line = Rand13.Pick(new object [] { "I'm gonna become a cop, the newer kind of cops.", "" + ( this.ishurt != 0 ? "Fetch some gauze" : "Pow Pow" ), "" + ( this.ishappy != 0 ? "I like my stations in pieces" : "Gotta get da deesk!" ), "Red suits me so well" });
					} else if ( 16<=_d&&_d<=48 ) {
						talk_line = "" + ( this.issleeping != 0 ? "Zzzzz(muffled banter about nukes)zzzzzzz" : "" + Rand13.Pick(new object [] { "Alright! Let's get started", "I'm saving cash for a Mauler", "See the galaxy, Take down Megacorps!" }) );
					} else if ( 49<=_d&&_d<=50 ) {
						talk_line = Rand13.Pick(new object [] { "never say die", "I will be back" });
					}
					break;
			}
			this.last_spoken = "<b>" + this.petname + "</b> says: \"" + talk_line + "\"";
			return;
		}

		// Function from file: spess pets.dm
		public void previous_egg(  ) {
			
			switch ((string)( this.race )) {
				case "Corgegg":
					this.race = "Syndegg";
					this.petname = "Nukitchi";
					break;
				case "Borgegg":
					this.race = "Corgegg";
					this.petname = "Ianitchi";
					break;
				case "Chimpegg":
					this.race = "Borgegg";
					this.petname = "Borgitchi";
					break;
				case "Syndegg":
					this.race = "Chimpegg";
					this.petname = "PunPunitchi";
					break;
			}
			this.last_spoken = this.race;
			return;
		}

		// Function from file: spess pets.dm
		public void next_egg(  ) {
			
			switch ((string)( this.race )) {
				case "Corgegg":
					this.race = "Borgegg";
					this.petname = "Borgitchi";
					break;
				case "Borgegg":
					this.race = "Chimpegg";
					this.petname = "PunPunitchi";
					break;
				case "Chimpegg":
					this.race = "Syndegg";
					this.petname = "Nukitchi";
					break;
				case "Syndegg":
					this.race = "Corgegg";
					this.petname = "Ianitchi";
					break;
			}
			this.last_spoken = this.race;
			return;
		}

		// Function from file: spess pets.dm
		public void button_hatch(  ) {
			this.game_state = 2;
			this.level = 1;
			this.last_spoken = "" + this.petname + " is born!";
			return;
		}

		// Function from file: apps.dm
		public void game_update( Mob user = null ) {
			Mob C = null;
			dynamic pda_device = null;
			dynamic user_loc = null;
			dynamic pda_loc = null;

			
			if ( user is Mob_Living_Carbon ) {
				C = user;

				if ( Lang13.Bool( C.machine ) && C.machine is Obj_Item_Device_Pda ) {
					pda_device = C.machine;
					user_loc = GlobalFuncs.get_turf( user );
					pda_loc = GlobalFuncs.get_turf( pda_device );

					if ( Map13.GetDistance( user_loc, pda_loc ) <= 1 ) {
						
						if ( Convert.ToInt32( pda_device.mode ) == 107 ) {
							((Obj_Item)pda_device).attack_self( C );
						}
					} else {
						user.unset_machine();
						Interface13.Browse( user, null, "window=pda" );
					}
				}
			}
			return;
		}

		// Function from file: apps.dm
		public void game_tick( Mob user = null ) {
			double new_exp = 0;

			
			if ( this.game_state == 1 ) {
				this.hatching++;

				if ( this.hatching > 1200 ) {
					this.last_spoken = "Help him hatch already you piece of fuck!";
				} else if ( this.hatching > 600 ) {
					this.last_spoken = "Looks like the pet is trying to hatch from the egg!";
				} else if ( this.hatching > 300 ) {
					this.last_spoken = "Did the egg just move?";
				} else {
					this.last_spoken = "The egg stands still.";
				}
			}

			if ( this.game_state == 2 ) {
				
				if ( this.isatwork != 0 ) {
					this.isatwork--;
					this.next_coin--;

					if ( this.next_coin <= 0 ) {
						this.total_coins++;
						this.next_coin = Rand13.Int( 10, 15 );

						if ( this.ishappy != 0 ) {
							this.next_coin = Rand13.Int( 5, 7 );
						}
					}

					if ( !( this.isatwork != 0 ) ) {
						this.issleeping = 600;
					}
				}

				if ( this.issleeping != 0 ) {
					this.issleeping--;
				}

				if ( this.ishappy != 0 ) {
					this.ishappy--;
					this.total_happiness++;
				}

				if ( this.ishungry ) {
					this.total_hunger++;
				}

				if ( this.isdirty ) {
					this.total_dirty++;
				}

				if ( this.ishurt != 0 ) {
					this.ishurt++;

					if ( this.ishurt >= 600 ) {
						this.game_state = 3;
					}
				}
				new_exp = 0;

				if ( !this.isdirty ) {
					new_exp = 1;

					if ( this.ishappy != 0 ) {
						new_exp = new_exp * 2;
					}

					if ( this.ishurt != 0 ) {
						new_exp = new_exp / 2;
					}
				}
				this.exp += new_exp;

				if ( this.exp > 900 ) {
					this.level++;
					this.exp = 0;

					if ( this.level >= 50 ) {
						this.game_state = 3;
					}
				}
			}
			this.game_update( user );

			if ( this.game_state < 3 ) {
				Task13.Schedule( 10, (Task13.Closure)(() => {
					this.game_tick( user );
					return;
				}));
			}
			return;
		}

		// Function from file: apps.dm
		public void reconnect_database(  ) {
			Obj_Machinery_AccountDatabase DB = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.account_DBs, typeof(Obj_Machinery_AccountDatabase) )) {
				DB = _a;
				

				if ( DB.z == this.pda_device.loc.z || DB.z == 1 ) {
					
					if ( DB.stat == 0 && DB.activated ) {
						this.linked_db = DB;
						break;
					}
				}
			}
			return;
		}

		// Function from file: apps.dm
		public override void onInstall( dynamic device = null ) {
			base.onInstall( (object)(device) );
			this.petID = String13.NumberToString( Rand13.Int( 0, 999999 ) );
			this.reconnect_database();
			return;
		}

	}

}