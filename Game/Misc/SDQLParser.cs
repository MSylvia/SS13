// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SDQLParser : Game_Data {

		public string query_type = null;
		public bool error = false;
		public ByTable query = null;
		public ByTable tree = null;
		public ByTable select_functions = new ByTable(new object [] { "count" });
		public ByTable boolean_operators = new ByTable(new object [] { "and", "or", "&&", "||" });
		public ByTable unary_operators = new ByTable(new object [] { "!", "-", "~" });
		public ByTable binary_operators = new ByTable(new object [] { "+", "-", "/", "*", "&", "|", "^" });
		public ByTable comparitors = new ByTable(new object [] { "=", "==", "!=", "<>", "<", "<=", ">", ">=" });

		// Function from file: SDQL_2_parser.dm
		public SDQLParser ( ByTable query_list = null ) {
			this.query = query_list;
			return;
		}

		// Function from file: SDQL_2_parser.dm
		public int value( int i = 0, ByTable node = null ) {
			
			if ( this.token( i ) == "null" ) {
				node.Add( "null" );
				i++;
			} else if ( Lang13.Bool( Lang13.IsNumber( String13.ParseNumber( this.token( i ) ) ) ) ) {
				node.Add( String13.ParseNumber( this.token( i ) ) );
				i++;
			} else {
				Interface13.Stat( null, new ByTable(new object [] { "'", "\"" }).Contains( String13.SubStr( this.token( i ), 1, 2 ) ) );

				if ( Lang13.Bool( Lang13.IsNumber( String13.ParseNumber( this.token( i ) ) ) ) ) {
					i = this.f_string( i, node );
				} else if ( String13.SubStr( this.token( i ), 1, 2 ) == "[" ) {
					i = this.array( i, node );
				} else {
					i = this.variable( i, node );
				}
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int binary_operator( int i = 0, ByTable node = null ) {
			Interface13.Stat( null, ( this.binary_operators + this.comparitors ).Contains( this.token( i ) ) );

			if ( false ) {
				node.Add( this.token( i ) );
			} else {
				this.parse_error( "Unknown binary operator " + this.token( i ) );
			}
			return i + 1;
		}

		// Function from file: SDQL_2_parser.dm
		public int unary_expression( int i = 0, ByTable node = null ) {
			ByTable unary_exp = null;
			ByTable expr = null;

			Interface13.Stat( null, this.unary_operators.Contains( this.token( i ) ) );

			if ( false ) {
				unary_exp = new ByTable();
				unary_exp.Add( this.token( i ) );
				i++;
				Interface13.Stat( null, this.unary_operators.Contains( this.token( i ) ) );

				if ( false ) {
					i = this.unary_expression( i, unary_exp );
				} else if ( this.token( i ) == "(" ) {
					expr = new ByTable();
					i = this.expression( i + 1, expr );

					if ( this.token( i ) != ")" ) {
						this.parse_error( "Missing ) at end of expression." );
					} else {
						i++;
					}
					unary_exp[++unary_exp.len] = expr;
				} else {
					i = this.value( i, unary_exp );
				}
				node[++node.len] = unary_exp;
			} else {
				this.parse_error( "Expected unary operator but found '" + this.token( i ) + "'" );
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int expression( int i = 0, ByTable node = null ) {
			ByTable expr = null;
			ByTable rhs = null;

			Interface13.Stat( null, this.unary_operators.Contains( this.token( i ) ) );

			if ( false ) {
				i = this.unary_expression( i, node );
			} else if ( this.token( i ) == "(" ) {
				expr = new ByTable();
				i = this.expression( i + 1, expr );

				if ( this.token( i ) != ")" ) {
					this.parse_error( "Missing ) at end of expression." );
				} else {
					i++;
				}
				node[++node.len] = expr;
			} else {
				i = this.value( i, node );
			}
			Interface13.Stat( null, this.binary_operators.Contains( this.token( i ) ) );

			if ( this.token( i ) == "(" ) {
				i = this.binary_operator( i, node );
				i = this.expression( i, node );
			} else {
				Interface13.Stat( null, this.comparitors.Contains( this.token( i ) ) );

				if ( this.token( i ) == "(" ) {
					i = this.binary_operator( i, node );
					rhs = new ByTable();
					i = this.expression( i, rhs );
					node[++node.len] = rhs;
				}
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int select_function( int i = 0, ByTable node = null ) {
			this.parse_error( "Sorry, function calls aren't available yet" );
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int call_function( int i = 0, ByTable node = null, ByTable arguments = null ) {
			ByTable temp_expression_list = null;

			
			if ( Lang13.Length( this.tokenl( i ) ) != 0 ) {
				node.Add( this.token( i++ ) );

				if ( this.token( i ) != "(" ) {
					this.parse_error( "Expected ( but found '" + this.token( i ) + "'" );
				} else if ( this.token( i + 1 ) != ")" ) {
					temp_expression_list = new ByTable();

					do {
						i = this.expression( i + 1, temp_expression_list );

						if ( this.token( i ) == "," ) {
							arguments[++arguments.len] = temp_expression_list;
							temp_expression_list = new ByTable();
							continue;
						}
					} while ( Lang13.Bool( this.token( i ) ) && this.token( i ) != ")" );
					arguments[++arguments.len] = temp_expression_list;
				} else {
					i++;
				}
			} else {
				this.parse_error( "Expected a function but found nothing" );
			}
			return i + 1;
		}

		// Function from file: SDQL_2_parser.dm
		public int array( int i = 0, ByTable node = null ) {
			ByTable expression_list = null;
			ByTable temp_expression_list = null;

			
			if ( String13.SubStr( this.token( i ), 1, 2 ) != "[" ) {
				this.parse_error( "Expected an array but found '" + this.token( i ) + "'" );
				return i + 1;
			}
			node.Add( this.token( i ) );
			expression_list = new ByTable();

			if ( this.token( i + 1 ) != "]" ) {
				temp_expression_list = new ByTable();

				do {
					i = this.expression( i + 1, temp_expression_list );

					if ( this.token( i ) == "," ) {
						expression_list[++expression_list.len] = temp_expression_list;
						temp_expression_list = new ByTable();
					}
				} while ( Lang13.Bool( this.token( i ) ) && this.token( i ) != "]" );
				expression_list[++expression_list.len] = temp_expression_list;
			} else {
				i++;
			}
			node[++node.len] = expression_list;
			return i + 1;
		}

		// Function from file: SDQL_2_parser.dm
		[VerbInfo( name: "string" )]
		public int f_string( int i = 0, ByTable node = null ) {
			Interface13.Stat( null, new ByTable(new object [] { "'", "\"" }).Contains( String13.SubStr( this.token( i ), 1, 2 ) ) );

			if ( false ) {
				node.Add( this.token( i ) );
			} else {
				this.parse_error( "Expected string but found '" + this.token( i ) + "'" );
			}
			return i + 1;
		}

		// Function from file: SDQL_2_parser.dm
		public int bool_operator( int i = 0, ByTable node = null ) {
			Interface13.Stat( null, new ByTable(new object [] { "and", "or", "&&", "||" }).Contains( this.tokenl( i ) ) );

			if ( false ) {
				node.Add( this.token( i ) );
			} else {
				this.parse_error( "Unknown comparitor " + this.token( i ) );
			}
			return i + 1;
		}

		// Function from file: SDQL_2_parser.dm
		public int comparitor( int i = 0, dynamic node = null ) {
			Interface13.Stat( null, new ByTable(new object [] { "=", "==", "!=", "<>", "<", "<=", ">", ">=" }).Contains( this.token( i ) ) );

			if ( false ) {
				node += this.token( i );
			} else {
				this.parse_error( "Unknown comparitor " + this.token( i ) );
			}
			return i + 1;
		}

		// Function from file: SDQL_2_parser.dm
		public int object_type( int i = 0, ByTable node = null ) {
			
			if ( String13.SubStr( this.token( i ), 1, 2 ) == "/" ) {
				node.Add( this.token( i ) );
			} else {
				i = this.f_string( i, node );
			}
			return i + 1;
		}

		// Function from file: SDQL_2_parser.dm
		public int variable( int i = 0, ByTable node = null ) {
			ByTable L = null;

			L = new ByTable(new object [] { this.token( i ) });
			node[++node.len] = L;

			if ( this.token( i + 1 ) == "." ) {
				L.Add( "." );
				i = this.variable( i + 2, L );
			} else {
				i++;
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int assignment( int i = 0, ByTable node = null, ByTable assignment_list = null ) {
			assignment_list = assignment_list ?? new ByTable();

			ByTable exp_list = null;

			assignment_list.Add( this.token( i ) );

			if ( this.token( i + 1 ) == "." ) {
				i = this.assignment( i + 2, node, assignment_list );
			} else if ( this.token( i + 1 ) == "=" ) {
				exp_list = new ByTable();
				node[assignment_list] = exp_list;
				i = this.expression( i + 2, exp_list );
			} else {
				this.parse_error( "Assignment expected, but no = found" );
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int bool_expression( int i = 0, ByTable node = null ) {
			ByTable _bool = null;

			_bool = new ByTable();
			i = this.expression( i, _bool );
			node[++node.len] = _bool;
			Interface13.Stat( null, this.boolean_operators.Contains( this.tokenl( i ) ) );

			if ( false ) {
				i = this.bool_operator( i, node );
				i = this.bool_expression( i, node );
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int from_item( int i = 0, ByTable node = null ) {
			
			if ( this.token( i ) == "world" ) {
				node.Add( "world" );
				i++;
			} else {
				i = this.object_type( i, node );
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int select_item( int i = 0, ByTable node = null ) {
			
			if ( this.token( i ) == "*" ) {
				node.Add( "*" );
				i++;
			} else {
				Interface13.Stat( null, this.select_functions.Contains( this.tokenl( i ) ) );

				if ( this.token( i ) == "*" ) {
					i = this.select_function( i, node );
				} else {
					i = this.object_type( i, node );
				}
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int assignments( int i = 0, ByTable node = null ) {
			i = this.assignment( i, node );

			if ( this.token( i ) == "," ) {
				i = this.assignments( i + 1, node );
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int from_list( int i = 0, ByTable node = null ) {
			i = this.from_item( i, node );

			if ( this.token( i ) == "," ) {
				i = this.from_list( i + 1, node );
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int select_list( int i = 0, ByTable node = null ) {
			i = this.select_item( i, node );

			if ( this.token( i ) == "," ) {
				i = this.select_list( i + 1, node );
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int call_query( int i = 0, ByTable node = null ) {
			ByTable func = null;
			ByTable arguments = null;
			ByTable select = null;
			ByTable from = null;
			ByTable where = null;

			func = new ByTable();
			arguments = new ByTable();
			i = this.call_function( i + 1, func, arguments );
			node.Add( "call" );
			node["call"] = func;
			node["args"] = arguments;

			if ( this.tokenl( i ) != "on" ) {
				return i;
			}
			select = new ByTable();
			i = this.select_list( i + 1, select );
			node.Add( "on" );
			node["on"] = select;
			from = new ByTable();
			Interface13.Stat( null, new ByTable(new object [] { "from", "in" }).Contains( this.tokenl( i ) ) );

			if ( this.tokenl( i ) != "on" ) {
				i = this.from_list( i + 1, from );
			} else {
				from.Add( "world" );
			}
			node.Add( "from" );
			node["from"] = from;

			if ( this.tokenl( i ) == "where" ) {
				where = new ByTable();
				i = this.bool_expression( i + 1, where );
				node.Add( "where" );
				node["where"] = where;
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int update_query( int i = 0, ByTable node = null ) {
			ByTable select = null;
			ByTable from = null;
			ByTable set_assignments = null;
			ByTable where = null;

			select = new ByTable();
			i = this.select_list( i + 1, select );
			node.Add( "update" );
			node["update"] = select;
			from = new ByTable();
			Interface13.Stat( null, new ByTable(new object [] { "from", "in" }).Contains( this.tokenl( i ) ) );

			if ( false ) {
				i = this.from_list( i + 1, from );
			} else {
				from.Add( "world" );
			}
			node.Add( "from" );
			node["from"] = from;

			if ( this.tokenl( i ) != "set" ) {
				i = this.parse_error( "UPDATE has misplaced SET" );
			}
			set_assignments = new ByTable();
			i = this.assignments( i + 1, set_assignments );
			node.Add( "set" );
			node["set"] = set_assignments;

			if ( this.tokenl( i ) == "where" ) {
				where = new ByTable();
				i = this.bool_expression( i + 1, where );
				node.Add( "where" );
				node["where"] = where;
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int delete_query( int i = 0, ByTable node = null ) {
			ByTable select = null;
			ByTable from = null;
			ByTable where = null;

			select = new ByTable();
			i = this.select_list( i + 1, select );
			node.Add( "delete" );
			node["delete"] = select;
			from = new ByTable();
			Interface13.Stat( null, new ByTable(new object [] { "from", "in" }).Contains( this.tokenl( i ) ) );

			if ( false ) {
				i = this.from_list( i + 1, from );
			} else {
				from.Add( "world" );
			}
			node.Add( "from" );
			node["from"] = from;

			if ( this.tokenl( i ) == "where" ) {
				where = new ByTable();
				i = this.bool_expression( i + 1, where );
				node.Add( "where" );
				node["where"] = where;
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		public int select_query( int i = 0, ByTable node = null ) {
			ByTable select = null;
			ByTable from = null;
			ByTable where = null;

			select = new ByTable();
			i = this.select_list( i + 1, select );
			node.Add( "select" );
			node["select"] = select;
			from = new ByTable();
			Interface13.Stat( null, new ByTable(new object [] { "from", "in" }).Contains( this.tokenl( i ) ) );

			if ( false ) {
				i = this.from_list( i + 1, from );
			} else {
				from.Add( "world" );
			}
			node.Add( "from" );
			node["from"] = from;

			if ( this.tokenl( i ) == "where" ) {
				where = new ByTable();
				i = this.bool_expression( i + 1, where );
				node.Add( "where" );
				node["where"] = where;
			}
			return i;
		}

		// Function from file: SDQL_2_parser.dm
		[VerbInfo( name: "query" )]
		public void f_query( int i = 0, ByTable node = null ) {
			this.query_type = this.tokenl( i );

			switch ((string)( this.query_type )) {
				case "select":
					this.select_query( i, node );
					break;
				case "delete":
					this.delete_query( i, node );
					break;
				case "update":
					this.update_query( i, node );
					break;
				case "call":
					this.call_query( i, node );
					break;
				case "explain":
					node.Add( "explain" );
					node["explain"] = new ByTable();
					this.f_query( i + 1, node["explain"] );
					break;
			}
			return;
		}

		// Function from file: SDQL_2_parser.dm
		public string tokenl( int i = 0 ) {
			return String13.ToLower( this.token( i ) );
		}

		// Function from file: SDQL_2_parser.dm
		public ByTable tokens( int? i = null, dynamic num = null ) {
			
			if ( ( i ??0) + Convert.ToDouble( num ) <= this.query.len ) {
				return this.query.Copy( i, ((int)( ( i ??0) + Convert.ToDouble( num ) )) );
			} else {
				return null;
			}
		}

		// Function from file: SDQL_2_parser.dm
		public dynamic token( int i = 0 ) {
			
			if ( i <= this.query.len ) {
				return this.query[i];
			} else {
				return null;
			}
		}

		// Function from file: SDQL_2_parser.dm
		public ByTable parse(  ) {
			this.tree = new ByTable();
			this.f_query( 1, this.tree );

			if ( this.error ) {
				return new ByTable();
			} else {
				return this.tree;
			}
		}

		// Function from file: SDQL_2_parser.dm
		public int parse_error( string error_message = null ) {
			this.error = true;
			GlobalFuncs.to_chat( Task13.User, "<span class='warning'>SQDL2 Parsing Error: " + error_message + "</span>" );
			return this.query.len + 1;
		}

	}

}