// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SpeechFilter : Game_Data {

		public ByTable expressions = new ByTable();

		// Function from file: speech.dm
		public dynamic FilterSpeech( dynamic msg = null ) {
			dynamic key = null;
			dynamic SFA = null;

			
			if ( this.expressions.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.expressions )) {
					key = _a;
					
					SFA = this.expressions[key];

					if ( Lang13.Bool( SFA ) && !Lang13.Bool( SFA.broken ) ) {
						msg = SFA.Run( msg );
					}
				}
			}
			return msg;
		}

		// Function from file: speech.dm
		public void rmExpression( dynamic key = null ) {
			this.expressions[key] = null;
			return;
		}

		// Function from file: speech.dm
		public string addExpression( string orig = null, Type action = null, ByTable args = null ) {
			this.expressions[orig] = Lang13.Call( action, orig, args );
			return orig;
		}

		// Function from file: speech.dm
		public string addCallback( string orig = null, Type callback = null, ByTable args = null ) {
			return this.addExpression( orig, callback, args );
		}

		// Function from file: speech.dm
		public string addWordReplacement( string orig = null, string replacement = null, bool? case_sensitive = null ) {
			case_sensitive = case_sensitive ?? false;

			return this.addReplacement( "\\b" + orig + "\\b", replacement, case_sensitive );
		}

		// Function from file: speech.dm
		public string addPickReplacement( string orig = null, ByTable replacements = null, bool? case_sensitive = null ) {
			case_sensitive = case_sensitive ?? false;

			orig = GlobalFuncs.replacetext( orig, "/", "\\/" );
			return this.addExpression( "/" + orig + "/" + ( case_sensitive == true ? "" : "i" ) + "g", typeof(SpeechFilterAction_PickReplace), replacements );
		}

		// Function from file: speech.dm
		public string addReplacement( string orig = null, string replacement = null, bool? case_sensitive = null ) {
			case_sensitive = case_sensitive ?? false;

			orig = GlobalFuncs.replacetext( orig, "/", "\\/" );
			replacement = GlobalFuncs.replacetext( replacement, "/", "\\/" );
			return this.addExpression( "/" + orig + "/" + replacement + "/" + ( case_sensitive == true ? "" : "i" ) + "g", typeof(SpeechFilterAction_Replace) );
		}

	}

}