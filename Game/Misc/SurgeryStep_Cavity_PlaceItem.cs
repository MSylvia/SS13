// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_Cavity_PlaceItem : SurgeryStep_Cavity {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.allowed_tools = new ByTable().Set( typeof(Obj_Item), 100 );
			this.min_duration = 80;
			this.max_duration = 100;
		}

		// Function from file: implant.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			Organ_External affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( "'s hand slips, scraping tissue inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>Your hand slips, scraping tissue inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString() );
			affected.createwound( "cut", 20 );
			return null;
		}

		// Function from file: implant.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;
			Wound_InternalBleeding I = null;
			Obj_Item disobj = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " puts " ).the( tool ).item().str( " inside " ).item( target ).str( "'s " ).item( this.get_cavity( affected ) ).str( " cavity.</span>" ).ToString(), new Txt( "<span class='notice'>You put " ).the( tool ).item().str( " inside " ).item( target ).str( "'s " ).item( this.get_cavity( affected ) ).str( " cavity.</span>" ).ToString() );

			if ( Convert.ToDouble( tool.w_class ) > this.get_max_wclass( affected ) / 2 && Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You tear some vessels trying to fit such big object in this cavity." );
				I = new Wound_InternalBleeding( 15 );
				affected.wounds.Add( I );
				((Mob_Living_Carbon_Human)affected.owner).custom_pain( "You feel something rip in your " + affected.display_name + "!", true );
			}
			user.drop_item();
			affected.hidden = tool;
			tool.loc = target;

			if ( tool is Obj_Item_Weapon_Implant ) {
				disobj = tool;
				((dynamic)disobj).part = affected;
				affected.implants.Add( disobj );
			}
			affected.cavity = false;
			return false;
		}

		// Function from file: implant.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " starts putting " ).the( tool ).item().str( " inside " ).item( target ).str( "'s " ).item( this.get_cavity( affected ) ).str( " cavity." ).ToString(), new Txt( "You start putting " ).the( tool ).item().str( " inside " ).item( target ).str( "'s " ).item( this.get_cavity( affected ) ).str( " cavity." ).ToString() );
			((Mob_Living_Carbon_Human)target).custom_pain( "The pain in your chest is living hell!", true );
			base.begin_step( (object)(user), (object)(target), target_zone, tool, (object)(surgery) );
			return false;
		}

		// Function from file: implant.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			Organ_External affected = null;
			bool can_fit = false;

			
			if ( !( target is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>This isn't a human!.</span>" );
				return 0;
			}
			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			can_fit = !( affected.hidden != null ) && affected.cavity && Convert.ToDouble( tool.w_class ) <= this.get_max_wclass( affected );
			return base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 && can_fit ?1:0;
		}

	}

}