// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ConnectionEdge_Unsimulated : ConnectionEdge {

		public dynamic B = null;
		public GasMixture air = null;

		// Function from file: ConnectionGroup.dm
		public ConnectionEdge_Unsimulated ( dynamic A = null, dynamic B = null ) {
			this.A = A;
			this.B = B;
			A.edges.Add( this );
			this.air = ((Ent_Static)B).return_air();
			return;
		}

		// Function from file: ConnectionGroup.dm
		public override void tick(  ) {
			dynamic differential = null;
			ByTable attracted = null;

			
			if ( this.A.invalid ) {
				this.erase();
				return;
			}
			GlobalFuncs.ShareSpace( this.A.air, this.air, this.dbg_out );
			GlobalVars.air_master.mark_zone_update( this.A );
			differential = this.A.air.return_pressure() - this.air.return_pressure();

			if ( Math.Abs( Convert.ToDouble( differential ) ) < Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowLightestPressure) ) ) ) {
				return;
			}
			attracted = this.A.movables();
			this.flow( attracted, Math.Abs( Convert.ToDouble( differential ) ), Convert.ToDouble( differential ) < 0 );
			return;
		}

		// Function from file: ConnectionGroup.dm
		public override bool contains_zone( dynamic Z = null ) {
			return this.A == Z;
		}

		// Function from file: ConnectionGroup.dm
		public override dynamic erase(  ) {
			dynamic _default = null;

			this.A.edges.Remove( this );
			_default = base.erase();
			return _default;
		}

		// Function from file: ConnectionGroup.dm
		public override dynamic remove_connection( Connection c = null ) {
			dynamic _default = null;

			this.connecting_turfs.Remove( c.B );
			this.air.group_multiplier = this.coefficient;
			_default = base.remove_connection( c );
			return _default;
		}

		// Function from file: ConnectionGroup.dm
		public override dynamic add_connection( Connection c = null ) {
			dynamic _default = null;

			_default = base.add_connection( c );
			this.connecting_turfs.Add( c.B );
			this.air.group_multiplier = this.coefficient;
			return _default;
		}

	}

}