// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Cameranet : Game_Data {

		public ByTable cameras = new ByTable();
		public ByTable chunks = new ByTable();
		public bool ready = false;

		// Function from file: cameranet.dm
		public bool checkTurfVis( dynamic position = null ) {
			Camerachunk chunk = null;

			chunk = this.getCameraChunk( Lang13.IntNullable( position.x ), Lang13.IntNullable( position.y ), Convert.ToInt32( position.z ) );

			if ( chunk != null ) {
				
				if ( chunk.changed ) {
					chunk.hasChanged( true );
				}

				if ( Lang13.Bool( chunk.visibleTurfs[position] ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: cameranet.dm
		public bool checkCameraVis( dynamic target = null ) {
			dynamic position = null;

			position = GlobalFuncs.get_turf( target );
			return this.checkTurfVis( position );
		}

		// Function from file: cameranet.dm
		public void majorChunkChange( Ent_Static c = null, int choice = 0 ) {
			dynamic T = null;
			int x1 = 0;
			int y1 = 0;
			int? x2 = null;
			int? y2 = null;
			int? x = null;
			int? y = null;
			Camerachunk chunk = null;

			
			if ( !( c != null ) ) {
				return;
			}
			T = GlobalFuncs.get_turf( c );

			if ( Lang13.Bool( T ) ) {
				x1 = Num13.MaxInt( 0, Convert.ToInt32( T.x - 8 ) ) & 65520;
				y1 = Num13.MaxInt( 0, Convert.ToInt32( T.y - 8 ) ) & 65520;
				x2 = Num13.MinInt( Game13.map_size_x, Convert.ToInt32( T.x + 8 ) ) & 65520;
				y2 = Num13.MinInt( Game13.map_size_y, Convert.ToInt32( T.y + 8 ) ) & 65520;
				x = null;
				x = x1;

				while (( x ??0) <= ( x2 ??0)) {
					y = null;
					y = y1;

					while (( y ??0) <= ( y2 ??0)) {
						
						if ( Lang13.Bool( this.chunkGenerated( x, y, Convert.ToInt32( T.z ) ) ) ) {
							chunk = this.getCameraChunk( x, y, Convert.ToInt32( T.z ) );

							if ( choice == 0 ) {
								chunk.cameras.Remove( c );
							} else if ( choice == 1 ) {
								chunk.cameras.Or( c );
							}
							chunk.hasChanged();
						}
						y += GlobalVars.CHUNK_SIZE;
					}
					x += GlobalVars.CHUNK_SIZE;
				}
			}
			return;
		}

		// Function from file: cameranet.dm
		public void updatePortableCamera( Obj_Machinery_Camera c = null ) {
			
			if ( c.can_use() ) {
				this.majorChunkChange( c, 1 );
			}
			return;
		}

		// Function from file: cameranet.dm
		public void addCamera( Obj_Machinery_Camera c = null ) {
			
			if ( c.can_use() ) {
				this.majorChunkChange( c, 1 );
			}
			return;
		}

		// Function from file: cameranet.dm
		public void removeCamera( Obj_Machinery_Camera c = null ) {
			
			if ( c.can_use() ) {
				this.majorChunkChange( c, 0 );
			}
			return;
		}

		// Function from file: cameranet.dm
		public void updateChunk( int? x = null, int? y = null, int z = 0 ) {
			Camerachunk chunk = null;

			
			if ( !Lang13.Bool( this.chunkGenerated( x, y, z ) ) ) {
				return;
			}
			chunk = this.getCameraChunk( x, y, z );
			chunk.hasChanged();
			return;
		}

		// Function from file: cameranet.dm
		public void updateVisibility( Ent_Static A = null, bool? opacity_check = null ) {
			opacity_check = opacity_check ?? true;

			
			if ( !( GlobalVars.ticker != null ) || opacity_check == true && !A.opacity ) {
				return;
			}
			this.majorChunkChange( A, 2 );
			return;
		}

		// Function from file: cameranet.dm
		public void visibility( Mob_Camera_AiEye ai = null ) {
			int x1 = 0;
			int y1 = 0;
			int? x2 = null;
			int? y2 = null;
			ByTable visibleChunks = null;
			int? x = null;
			int? y = null;
			ByTable remove = null;
			ByTable add = null;
			dynamic chunk = null;
			dynamic c = null;
			dynamic chunk2 = null;
			dynamic c2 = null;

			x1 = Num13.MaxInt( 0, ai.x - 16 ) & 65520;
			y1 = Num13.MaxInt( 0, ai.y - 16 ) & 65520;
			x2 = Num13.MinInt( Game13.map_size_x, ai.x + 16 ) & 65520;
			y2 = Num13.MinInt( Game13.map_size_y, ai.y + 16 ) & 65520;
			visibleChunks = new ByTable();
			x = null;
			x = x1;

			while (( x ??0) <= ( x2 ??0)) {
				y = null;
				y = y1;

				while (( y ??0) <= ( y2 ??0)) {
					visibleChunks.Or( this.getCameraChunk( x, y, ai.z ) );
					y += GlobalVars.CHUNK_SIZE;
				}
				x += GlobalVars.CHUNK_SIZE;
			}
			remove = ai.visibleCameraChunks - visibleChunks;
			add = visibleChunks - ai.visibleCameraChunks;

			foreach (dynamic _a in Lang13.Enumerate( remove )) {
				chunk = _a;
				
				c = chunk;
				((Camerachunk)c).remove( ai );
			}

			foreach (dynamic _b in Lang13.Enumerate( add )) {
				chunk2 = _b;
				
				c2 = chunk2;
				((Camerachunk)c2).add( ai );
			}
			return;
		}

		// Function from file: cameranet.dm
		public dynamic getCameraChunk( int? x = null, int? y = null, int z = 0 ) {
			string key = null;

			x &= 65520;
			y &= 65520;
			key = "" + x + "," + y + "," + z;

			if ( !Lang13.Bool( this.chunks[key] ) ) {
				this.chunks[key] = new Camerachunk( null, x, y, z );
			}
			return this.chunks[key];
		}

		// Function from file: cameranet.dm
		public dynamic chunkGenerated( int? x = null, int? y = null, int z = 0 ) {
			string key = null;

			x &= 65520;
			y &= 65520;
			key = "" + x + "," + y + "," + z;
			return this.chunks[key];
		}

	}

}