// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Spell_Targeted_EquipItem : Spell_Targeted {

		public ByTable equipped_summons = new ByTable();
		public ByTable summoned_items = new ByTable();
		public bool delete_old = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "equipment spell";
		}

		// Function from file: equip.dm
		public virtual dynamic summon_item( dynamic newtype = null ) {
			return Lang13.Call( newtype );
		}

		// Function from file: equip.dm
		public override bool cast( ByTable targets = null, Mob user = null ) {
			user = user ?? Task13.User;

			Mob_Living L = null;
			dynamic slot_id = null;
			dynamic to_create = null;
			dynamic new_item = null;
			dynamic old_item = null;
			Obj_Item to_remove = null;
			Ent_Static M = null;

			base.cast( targets, user );

			foreach (dynamic _b in Lang13.Enumerate( targets, typeof(Mob_Living) )) {
				L = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.equipped_summons )) {
					slot_id = _a;
					
					to_create = this.equipped_summons[slot_id];
					slot_id = String13.ParseNumber( slot_id );
					new_item = this.summon_item( to_create );
					old_item = L.get_item_by_slot( slot_id );
					L.equip_to_slot( new_item, slot_id );

					if ( Lang13.Bool( old_item ) ) {
						L.remove_from_mob( old_item );

						if ( this.delete_old ) {
							GlobalFuncs.qdel( old_item );
						} else {
							old_item.loc = L.loc;
						}
					}

					if ( Lang13.Bool( this.duration ) ) {
						this.summoned_items.Add( new_item );
					}
				}
			}

			if ( Lang13.Bool( this.duration ) ) {
				Task13.Schedule( this.duration ??0, (Task13.Closure)(() => {
					
					foreach (dynamic _c in Lang13.Enumerate( this.summoned_items, typeof(Obj_Item) )) {
						to_remove = _c;
						

						if ( to_remove.loc is Mob ) {
							M = to_remove.loc;
							((dynamic)M).remove_from_mob( to_remove );
							GlobalFuncs.qdel( to_remove );
						}
					}
					return;
				}));
			}
			return false;
		}

	}

}