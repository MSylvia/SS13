// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Spell_AreaTeleport : Spell {

		public bool randomise_selection = false;
		public bool invocation_area = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Teleport";
			this.desc = "This spell teleports you to a type of area of your selection.";
			this.school = "abjuration";
			this.charge_max = 600;
			this.invocation = "SCYAR NILA";
			this.invocation_type = "shout";
			this.cooldown_min = 200;
			this.smoke_spread = 1;
			this.smoke_amt = 5;
			this.cast_sound = "sound/effects/teleport.ogg";
			this.hud_state = "wiz_tele";
		}

		// Function from file: vgstation13.dme
		[VerbInfo( name: "invocation" )]
		[VerbArg( 1, InputType.Mob )]
		[VerbArg( 2, InputType.Zone )]
		public override void f_invocation( Ent_Dynamic user = null, ByTable targets = null ) {
			
			if ( !( targets is Zone ) ) {
				return;
			}

			if ( !this.invocation_area || !( targets != null ) ) {
				base.f_invocation( user, targets );
			} else {
				this.invocation += "" + String13.ToUpper( ((dynamic)targets).name );
				base.f_invocation( user, targets );
			}
			return;
		}

		// Function from file: area_teleport.dm
		public override void after_cast( ByTable targets = null ) {
			return;
		}

		// Function from file: area_teleport.dm
		public override bool cast( ByTable targets = null, Mob user = null ) {
			ByTable L = null;
			dynamic T = null;
			bool clear = false;
			Obj O = null;
			dynamic attempt = null;
			bool success = false;

			
			if ( !( targets is Zone ) ) {
				
				if ( targets is ByTable ) {
					targets = targets[1];
				}
			}
			L = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_area_turfs( ((dynamic)targets).type ) )) {
				T = _b;
				

				if ( !T.density ) {
					clear = true;

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj) )) {
						O = _a;
						

						if ( O.density ) {
							clear = false;
							break;
						}
					}

					if ( clear ) {
						L.Add( T );
					}
				}
			}

			if ( !( L.len != 0 ) ) {
				GlobalFuncs.to_chat( user, "The spell matrix was unable to locate a suitable teleport destination for an unknown reason. Sorry." );
				return false;
			}

			if ( user != null && Lang13.Bool( user.locked_to ) ) {
				((Ent_Dynamic)user.locked_to).unlock_atom( user );
			}
			attempt = null;
			success = false;

			while (L.len != 0) {
				attempt = Rand13.PickFromTable( L );
				success = user.Move( attempt );

				if ( !success ) {
					L.Remove( attempt );
				} else {
					break;
				}
			}

			if ( !success ) {
				user.loc = Rand13.PickFromTable( L );
			}
			return false;
		}

		// Function from file: area_teleport.dm
		public override ByTable choose_targets( Mob user = null ) {
			dynamic A = null;
			dynamic thearea = null;

			A = null;

			if ( !this.randomise_selection ) {
				A = Interface13.Input( "Area to teleport to", "Teleport", A, null, GlobalVars.teleportlocs, InputType.Any );
			} else {
				A = Rand13.PickFromTable( GlobalVars.teleportlocs );
			}
			thearea = GlobalVars.teleportlocs[A];
			return new ByTable(new object [] { thearea });
		}

		// Function from file: area_teleport.dm
		public override ByTable before_cast( ByTable targets = null ) {
			return null;
		}

	}

}