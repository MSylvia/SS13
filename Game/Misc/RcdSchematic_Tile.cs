// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RcdSchematic_Tile : RcdSchematic {

		public PaintInfo selection = null;
		public double? selected_dir = 2;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Decals";
			this.category = "Painting";
			this.flags = 2;
		}

		public RcdSchematic_Tile ( dynamic n_master = null ) : base( (object)(n_master) ) {
			
		}

		// Function from file: tile.dm
		public override dynamic attack( dynamic A = null, dynamic user = null ) {
			string nname = null;
			double? thisdir = null;

			
			if ( !( this.selection != null ) ) {
				return 1;
			}

			if ( !this.selection.validate( A ) ) {
				return "maybe you're using it on the wrong floor type?";
			}
			nname = "";
			thisdir = this.selected_dir;

			switch ((int?)( this.selection.ftype )) {
				case 1:
					nname = "floor";
					break;
				case 3:
					nname = "reinforced floor";
					break;
				case 2:
					nname = "plating";
					break;
			}
			GlobalFuncs.to_chat( user, "Painting floor..." );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this.master ), "sound/effects/spray3.ogg", 15, 1 );

			if ( !GlobalFuncs.do_after( user, A, 20 ) ) {
				return 1;
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this.master ), "sound/machines/click.ogg", 50, 1 );
			this.selection.apply( A, nname, null, thisdir );
			return null;
		}

		// Function from file: tile.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			ByTable our_list = null;
			int idx = 0;
			double? dir = null;

			
			if ( Lang13.Bool( href_list["select_paint"] ) ) {
				our_list = this.get_our_list();
				idx = ( Num13.Floor( String13.ParseNumber( href_list["select_paint"] ) ??0 ) <= 1 ? 1 : ( Num13.Floor( String13.ParseNumber( href_list["select_paint"] ) ??0 ) >= our_list.len ? our_list.len : Num13.Floor( String13.ParseNumber( href_list["select_paint"] ) ??0 ) ) );
				this.selection = our_list[idx];
				Interface13.Stat( null, this.get_dir_list_by_dir_type( this.selection.adirs ).Contains( this.selected_dir ) );

				if ( !( Num13.Floor( String13.ParseNumber( href_list["select_paint"] ) ??0 ) <= 1 ) ) {
					this.selected_dir = 2;
				}
				this.master.update_options_menu();
				_default = 1;
			}

			if ( Lang13.Bool( href_list["set_dir"] ) ) {
				dir = String13.ParseNumber( href_list["set_dir"] );
				Interface13.Stat( null, this.get_dir_list_by_dir_type( this.selection.adirs ).Contains( dir ) );

				if ( !false ) {
					return 1;
				}
				this.selected_dir = dir;
			}
			return _default;
		}

		// Function from file: tile.dm
		public override dynamic get_HTML( dynamic D = null ) {
			dynamic _default = null;

			ByTable our_list = null;
			PaintInfo P = null;
			dynamic dir = null;
			string selected = null;

			_default = new ByTable();
			_default += "<p>";
			our_list = this.get_our_list();

			foreach (dynamic _b in Lang13.Enumerate( our_list, typeof(PaintInfo) )) {
				P = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.get_dir_list_by_dir_type( P.adirs ) )) {
					dir = _a;
					
					selected = "";

					if ( this.selection == P && dir == this.selected_dir ) {
						selected = " class='selected'";
					}
					_default += new Txt( "<a href='?src=" ).Ref( this.master.v_interface ).str( ";select_paint=" ).item( our_list.Find( P ) ).str( ";set_dir=" ).item( dir ).str( "'" ).item( selected ).str( "><img src='" ).item( P.file_name ).item( P.icon_state ).str( "_" ).item( dir ).str( ".png'/></a>" ).ToString();
				}
			}
			_default += "</p>";
			_default = GlobalFuncs.list2text( _default );
			return _default;
		}

		// Function from file: tile.dm
		public virtual ByTable get_our_list(  ) {
			return GlobalVars.paint_variants[this.name];
		}

		// Function from file: tile.dm
		public ByTable get_dir_list_by_dir_type( int adir = 0 ) {
			
			switch ((int)( adir )) {
				case 1:
					return new ByTable(new object [] { GlobalVars.SOUTH });
					break;
				case 2:
					return GlobalVars.cardinal;
					break;
				case 3:
					return GlobalVars.alldirs;
					break;
			}
			return null;
		}

		// Function from file: tile.dm
		public override void send_assets( dynamic client = null ) {
			ByTable our_list = null;
			PaintInfo P = null;
			dynamic ndir = null;

			our_list = this.get_our_list();

			if ( !( our_list != null ) ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( our_list, typeof(PaintInfo) )) {
				P = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.get_dir_list_by_dir_type( P.adirs ) )) {
					ndir = _a;
					
					GlobalFuncs.send_asset( client, "" + P.file_name + P.icon_state + "_" + ndir + ".png" );
				}
			}
			return;
		}

		// Function from file: tile.dm
		public override void register_assets(  ) {
			ByTable our_list = null;
			PaintInfo P = null;
			dynamic ndir = null;

			our_list = this.get_our_list();

			if ( !( our_list != null ) ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( our_list, typeof(PaintInfo) )) {
				P = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.get_dir_list_by_dir_type( P.adirs ) )) {
					ndir = _a;
					
					GlobalFuncs.register_asset( "" + P.file_name + P.icon_state + "_" + ndir + ".png", new Icon( P.icon, P.icon_state, ndir ) );
				}
			}
			return;
		}

	}

}