// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Objective : Game_Data {

		public Game_Data owner = null;
		public string explanation_text = "Nothing";
		public dynamic target = null;
		public dynamic target_amount = 0;
		public bool completed = false;
		public bool blocked = false;
		public ByTable bad_targets = new ByTable(new object [] { "AI", "Cyborg", "Mobile MMI" });

		// Function from file: objective.dm
		public Objective ( string text = null ) {
			
			if ( Lang13.Bool( text ) ) {
				this.explanation_text = text;
			}
			return;
		}

		// Function from file: objective.dm
		public virtual dynamic find_target_by_role( dynamic role = null, bool? role_type = null ) {
			role_type = role_type ?? false;

			Mind possible_target = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
				possible_target = _a;
				

				if ( possible_target != this.owner && possible_target.current is Mob_Living_Carbon_Human && Convert.ToInt32( possible_target.current.z ) != GlobalVars.map.zCentcomm && ( role_type == true ? ((dynamic)( possible_target.special_role )) : possible_target.assigned_role ) == role && !this.bad_targets.Contains( possible_target.assigned_role ) ) {
					this.target = possible_target;
					break;
				}
			}
			return null;
		}

		// Function from file: objective.dm
		public virtual dynamic find_target(  ) {
			ByTable possible_targets = null;
			Mind possible_target = null;

			possible_targets = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
				possible_target = _a;
				

				if ( possible_target != this.owner && possible_target.current is Mob_Living_Carbon_Human && Convert.ToInt32( possible_target.current.z ) != GlobalVars.map.zCentcomm && Convert.ToInt32( possible_target.current.stat ) != 2 && !this.bad_targets.Contains( possible_target.assigned_role ) ) {
					possible_targets.Add( possible_target );
				}
			}

			if ( possible_targets.len > 0 ) {
				this.target = Rand13.PickFromTable( possible_targets );
			}
			return null;
		}

		// Function from file: objective.dm
		public virtual dynamic check_completion(  ) {
			return this.completed;
		}

	}

}