// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Meteor : GameMode {

		public int waittime_l = 600;
		public int waittime_h = 1800;
		public int meteorannouncedelay_l = 2100;
		public int meteorannouncedelay_h = 3000;
		public int meteorannouncedelay = 2400;
		public int supplydelay = 100;
		public int meteordelay_l = 4500;
		public int meteordelay_h = 6000;
		public int meteorshuttlemultiplier = 3;
		public int meteordelay = 7500;
		public bool meteors_allowed = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "meteor";
			this.config_tag = "meteor";
			this.required_players_secret = 20;
			this.uplink_welcome = "EVIL METEOR Uplink Console:";
		}

		// Function from file: meteor_supply.dm
		public void meteor_initial_supply(  ) {
			ByTable meteor_initial_drop = null;
			dynamic initial_supply_area = null;
			Effect_Effect_System_SparkSpread spark_system = null;
			dynamic meteor_supplypaths = null;
			ByTable valid = null;
			Tile_Simulated_Floor F = null;
			dynamic picked = null;

			meteor_initial_drop = new ByTable(new object [] { 
				typeof(Obj_Structure_Closet_Crate_Engi_MeteorMaterials), 
				typeof(Obj_Structure_Closet_Crate_MeteorAssortedProtection), 
				typeof(Obj_Structure_Closet_Crate_Engi_MeteorBuildgear), 
				typeof(Obj_Structure_Closet_Crate_Freezer_MeteorPizza), 
				typeof(Obj_Structure_Closet_Crate_MeteorPanic), 
				typeof(Obj_Structure_Closet_Crate_Secure_Large_MeteorShieldwallgen), 
				typeof(Obj_Structure_Closet_Crate_Secure_Large_MeteorShieldgens), 
				typeof(Obj_Structure_Closet_Crate_Secure_Large_MeteorPower), 
				typeof(Obj_Structure_Closet_Crate_Engi_MeteorBreach), 
				typeof(Obj_Machinery_Computer_Bhangmeter)
			 });
			initial_supply_area = Lang13.FindObj( typeof(Zone_CrewQuarters_Bar) );
			spark_system = new Effect_Effect_System_SparkSpread();

			foreach (dynamic _b in Lang13.Enumerate( meteor_initial_drop )) {
				meteor_supplypaths = _b;
				
				valid = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( initial_supply_area, typeof(Tile_Simulated_Floor) )) {
					F = _a;
					

					if ( !F.has_dense_content() ) {
						valid.Add( F );
					}
				}
				picked = Rand13.PickFromTable( valid );
				spark_system.attach( picked );
				spark_system.set_up( 5, 0, picked );
				spark_system.start();
				Lang13.Call( meteor_supplypaths, picked );
			}
			return;
		}

		// Function from file: meteor.dm
		public override bool declare_completion( bool? ragin = null ) {
			dynamic text = null;
			int survivors = 0;
			Mob_Living player = null;
			dynamic location = null;

			survivors = 0;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
				player = _b;
				

				if ( player.stat != 2 ) {
					location = GlobalFuncs.get_turf( player.loc );

					if ( !Lang13.Bool( location ) ) {
						continue;
					}

					dynamic _a = location.loc.type; // Was a switch-case, sorry for the mess.
					if ( _a==typeof(Zone_Shuttle_Escape_Centcom) ) {
						text += "<br><b><font size=2>" + player.real_name + " escaped on the emergency shuttle</font></b>";
					} else if ( _a==typeof(Zone_Shuttle_EscapePod1_Centcom) || _a==typeof(Zone_Shuttle_EscapePod2_Centcom) || _a==typeof(Zone_Shuttle_EscapePod3_Centcom) || _a==typeof(Zone_Shuttle_EscapePod5_Centcom) ) {
						text += "<br><font size=2>" + player.real_name + " escaped in a life pod.</font>";
					} else {
						text += "<br><font size=1>" + player.real_name + " survived but is stranded without any hope of rescue.</font>";
					}
					survivors++;
				}
			}

			if ( survivors != 0 ) {
				GlobalFuncs.to_chat( typeof(Game13), "<span class='info'><B>The following survived the meteor storm</B>:" + text + "</span>" );
			} else {
				GlobalFuncs.to_chat( typeof(Game13), "<span class='info'><B>The meteors crashed this station with no survivors!</B></span>" );
			}
			GlobalFuncs.feedback_set_details( "round_end_result", "end - evacuation" );
			GlobalFuncs.feedback_set( "round_end_result", survivors );
			base.declare_completion( ragin );
			return true;
		}

		// Function from file: meteor.dm
		public override bool process(  ) {
			int? meteors_in_wave = null;

			
			if ( this.meteors_allowed ) {
				meteors_in_wave = Rand13.Int( 150, 200 );
				GlobalFuncs.meteor_wave( meteors_in_wave, 3 );
			}
			return false;
		}

		// Function from file: meteor.dm
		public override bool post_setup(  ) {
			this.meteorannouncedelay = Rand13.Int( ((int)( 3.5 )), 5 ) * 600;
			this.meteordelay = Rand13.Int( ((int)( 7.5 )), 10 ) * 600;
			Task13.Schedule( 450, (Task13.Closure)(() => {
				GlobalFuncs.message_admins( "Meteor storm confirmed by Space Weather Incorporated. Announcement arrives in " + Num13.Floor( ( this.meteorannouncedelay - 450 ) / 600 ) + " minutes, actual meteors in " + Num13.Floor( ( this.meteordelay + this.meteorannouncedelay - 450 ) / 600 ) + " minutes. Shuttle will take " + 30 + " minutes to arrive and supplies will be dispatched in the Bar." );
				return;
			}));
			Task13.Schedule( Rand13.Int( GlobalVars.waittime_l, GlobalVars.waittime_h ), (Task13.Closure)(() => {
				
				if ( !this.mixed ) {
					this.send_intercept();
				}
				return;
			}));
			Task13.Schedule( this.meteorannouncedelay, (Task13.Closure)(() => {
				
				if ( Rand13.PercentChance( 70 ) ) {
					GlobalFuncs.command_alert( "A meteor storm has been detected in proximity of " + GlobalFuncs.station_name() + " and is expected to strike within " + Num13.Floor( Rand13.Int( this.meteordelay - 600, this.meteordelay + 600 ) / 600 ) + " minutes. A backup emergency shuttle is being dispatched and emergency gear should be teleported into your station's Bar area in " + 10 + " seconds.", "Space Weather Automated Announcements" );
				} else {
					GlobalFuncs.command_alert( "A meteor storm has been detected in proximity of " + GlobalFuncs.station_name() + " and is expected to strike within " + Num13.Floor( Rand13.Int( this.meteordelay - 1800, this.meteordelay + 1800 ) / 600 ) + " minutes. A backup emergency shuttle is being dispatched and emergency gear should be teleported into your station's Bar area in " + 10 + " seconds.", "Space Weather Automated Announcements" );
				}
				Game13.WriteMsg( new Sound( "sound/AI/meteorround.ogg" ) );
				Task13.Schedule( 100, (Task13.Closure)(() => {
					GlobalVars.emergency_shuttle.incall( GlobalVars.meteorshuttlemultiplier );
					GlobalFuncs.captain_announce( "A backup emergency shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes. Justification : 'Major meteor storm inbound. Evacuation procedures deferred to Space Weather Inc. THIS IS NOT A DRILL'" );
					Game13.WriteMsg( new Sound( "sound/AI/shuttlecalled.ogg" ) );
					GlobalFuncs.SetUniversalState( typeof(UniversalState_MeteorStorm) );
					return;
				}));
				Task13.Schedule( GlobalVars.supplydelay, (Task13.Closure)(() => {
					this.meteor_initial_supply();
					return;
				}));
				Task13.Schedule( this.meteordelay, (Task13.Closure)(() => {
					this.meteors_allowed = true;
					return;
				}));
				return;
			}));
			return false;
		}

		// Function from file: meteor.dm
		public override bool pre_setup(  ) {
			GlobalFuncs.log_admin( "Starting a round of meteor." );
			GlobalFuncs.message_admins( "Starting a round of meteor." );
			return true;
		}

		// Function from file: meteor.dm
		public override void announce(  ) {
			GlobalFuncs.to_chat( typeof(Game13), "<B>The current game mode is - Meteor!</B>" );
			GlobalFuncs.to_chat( typeof(Game13), "<B>The space station is about to be struck by a major meteor shower. You must hold out until the escape shuttle arrives.</B>" );
			return;
		}

	}

}