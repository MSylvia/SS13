// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ConnectionEdge : Game_Data {

		public _Zone A = null;
		public ByTable connecting_turfs = new ByTable();
		public int coefficient = 0;
		public bool dbg_out = false;

		// Function from file: ConnectionGroup.dm
		public ConnectionEdge (  ) {
			Task13.Crash( "Cannot make connection edge without specifications." );
			return;
		}

		// Function from file: ConnectionGroup.dm
		public void flow( dynamic movable = null, double differential = 0, bool repelled = false, bool? flipped = null ) {
			flipped = flipped ?? false;

			Ent_Dynamic M = null;
			ByTable close_turfs = null;
			dynamic U = null;

			
			if ( !Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowPush) ) ) ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( movable, typeof(Ent_Dynamic) )) {
				M = _b;
				

				if ( !M.AirflowCanPush() ) {
					continue;
				}

				if ( M.last_airflow > Game13.time - Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowDelay) ) ) ) {
					continue;
				}

				if ( M.airflow_speed != 0 ) {
					continue;
				}

				if ( M is Mob && differential > Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowStunPressure) ) ) ) {
					
					if ( Lang13.Bool( ((dynamic)M).status_flags & 4096 ) ) {
						continue;
					}
					((dynamic)M).airflow_stun();
				}

				if ( M.check_airflow_movable( differential ) ) {
					close_turfs = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( this.connecting_turfs )) {
						U = _a;
						

						if ( Map13.GetDistance( M, U ) < Convert.ToDouble( Game13.view ) ) {
							close_turfs.Add( U );
						}
					}

					if ( !( close_turfs.len != 0 ) ) {
						continue;
					}
					M.airflow_dest = Rand13.PickFromTable( close_turfs );

					if ( M != null ) {
						
						if ( repelled ) {
							
							if ( flipped == true ) {
								Interface13.Stat( null, this.A.contents.Contains( M.loc ) );

								if ( !false ) {
									continue;
								}
							} else {
								Interface13.Stat( null, ((dynamic)this).B.contents.Contains( M.loc ) );

								if ( !( flipped == true ) ) {
									continue;
								}
							}
							M.RepelAirflowDest( differential / 5 );
						} else if ( flipped == true ) {
							Interface13.Stat( null, ((dynamic)this).B.contents.Contains( M.loc ) );

							if ( !false ) {
								continue;
							}
						} else {
							Interface13.Stat( null, this.A.contents.Contains( M.loc ) );

							if ( !( flipped == true ) ) {
								continue;
								M.GotoAirflowDest( differential / 10 );
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: ConnectionGroup.dm
		public virtual void tick(  ) {
			return;
		}

		// Function from file: ConnectionGroup.dm
		public virtual dynamic erase(  ) {
			GlobalVars.air_master.remove_edge( this );
			return null;
		}

		// Function from file: ConnectionGroup.dm
		public virtual bool contains_zone( dynamic Z = null ) {
			return false;
		}

		// Function from file: ConnectionGroup.dm
		public virtual dynamic remove_connection( Connection c = null ) {
			this.coefficient--;

			if ( this.coefficient <= 0 ) {
				this.erase();
			}
			return null;
		}

		// Function from file: ConnectionGroup.dm
		public virtual dynamic add_connection( Connection c = null ) {
			this.coefficient++;
			return null;
		}

	}

}