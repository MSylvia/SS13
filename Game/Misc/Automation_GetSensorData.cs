// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_GetSensorData : Automation {

		public dynamic field = "temperature";
		public dynamic sensor = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Sensor: Get Data";
			this.returntype = true;
		}

		public Automation_GetSensorData ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			
		}

		// Function from file: sensors.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			ByTable sensor_list = null;
			Obj_Machinery_AirSensor G = null;
			Obj_Machinery_Meter M = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["set_field"] ) ) {
				this.field = Interface13.Input( "Select a sensor output:", "Sensor Data", this.field, null, new ByTable(new object [] { "temperature", "pressure", "oxygen", "toxins", "nitrogen", "carbon_dioxide" }), InputType.Null | InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_sensor"] ) ) {
				sensor_list = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_AirSensor) )) {
					G = _a;
					

					if ( !( G.id_tag == null ) && G.frequency == this.parent.frequency ) {
						sensor_list.Or( G.id_tag );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Meter) )) {
					M = _b;
					

					if ( !( M.id_tag == null ) && M.frequency == this.parent.frequency ) {
						sensor_list.Or( M.id_tag );
					}
				}
				this.sensor = Interface13.Input( "Select a sensor:", "Sensor Data", this.field, null, sensor_list, InputType.Null | InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: sensors.dm
		public override string GetText(  ) {
			return new Txt( "<a href=\"?src=" ).Ref( this ).str( ";set_field=1\">" ).item( this.fmtString( this.field ) ).str( "</a> from sensor <a href=\"?src=" ).Ref( this ).str( ";set_sensor=1\">" ).item( this.fmtString( this.sensor ) ).str( "</a>" ).ToString();
		}

		// Function from file: sensors.dm
		public override dynamic Evaluate(  ) {
			
			if ( this.parent.sensor_information.Contains( Lang13.Bool( this.sensor ) && Lang13.Bool( this.field ) && Lang13.Bool( this.sensor ) ) ) {
				return this.parent.sensor_information[this.sensor][this.field];
			}
			return 0;
		}

		// Function from file: sensors.dm
		public override void Import( ByTable json = null ) {
			base.Import( json );
			this.sensor = json["sensor"];
			this.field = json["field"];
			return;
		}

		// Function from file: sensors.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["sensor"] = this.sensor;
			json["field"] = this.field;
			return json;
		}

	}

}