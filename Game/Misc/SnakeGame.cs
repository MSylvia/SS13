// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SnakeGame : Game_Data {

		public double? level = 1;
		public double snakescore = 0;
		public int eggs_eaten = 0;
		public double? lastinput = null;
		public bool gameover = false;
		public double? gyroscope = 0;
		public double? labyrinth = 0;
		public Snake_Head head = null;
		public Snake_Egg next_egg = null;
		public Snake_Bonus next_bonus = null;
		public ByTable snakeparts = new ByTable();
		public ByTable labyrinthwalls = new ByTable();

		// Function from file: snake.dm
		public void set_labyrinth( double? lab_type = null ) {
			int? x = null;
			Snake_Wall W = null;
			int? x2 = null;
			Snake_Wall W2 = null;
			int? y = null;
			Snake_Wall W3 = null;
			int? y2 = null;
			Snake_Wall W4 = null;
			Snake_Wall W1 = null;
			Snake_Wall W22 = null;
			Snake_Wall W32 = null;
			Snake_Wall W42 = null;
			Snake_Wall W5 = null;
			Snake_Wall W6 = null;
			Snake_Wall W7 = null;
			Snake_Wall W8 = null;
			Snake_Wall W9 = null;
			Snake_Wall W10 = null;
			Snake_Wall W11 = null;
			Snake_Wall W12 = null;
			int? x3 = null;
			Snake_Wall W13 = null;
			int? x4 = null;
			Snake_Wall W14 = null;
			int? x5 = null;
			Snake_Wall W15 = null;
			int? x6 = null;
			Snake_Wall W16 = null;
			int? y3 = null;
			Snake_Wall W17 = null;
			int? y4 = null;
			Snake_Wall W18 = null;
			int? x7 = null;
			Snake_Wall W19 = null;
			int? x8 = null;
			Snake_Wall W20 = null;
			int? y5 = null;
			Snake_Wall W21 = null;
			int? y6 = null;
			Snake_Wall W23 = null;
			int? y7 = null;
			Snake_Wall W24 = null;
			int? y8 = null;
			Snake_Wall W25 = null;
			int? x9 = null;
			Snake_Wall W26 = null;
			int? x10 = null;
			Snake_Wall W27 = null;
			int? x11 = null;
			Snake_Wall W28 = null;
			Snake_Wall W110 = null;
			Snake_Wall W29 = null;
			Snake_Wall W33 = null;
			Snake_Wall W43 = null;
			Snake_Wall W52 = null;
			int? x12 = null;
			Snake_Wall W30 = null;
			int? y9 = null;
			Snake_Wall W31 = null;
			int? x13 = null;
			Snake_Wall W34 = null;
			int? y10 = null;
			Snake_Wall W35 = null;
			int? y11 = null;
			Snake_Wall W36 = null;

			this.labyrinthwalls = new ByTable();
			this.labyrinth = lab_type;

			switch ((double?)( lab_type )) {
				case 0:
					return;
					break;
				case 1:
					x = null;
					x = 1;

					while (( x ??0) <= 20) {
						W = new Snake_Wall( x, 1 );
						this.labyrinthwalls.Add( W );
						x++;
					}
					x2 = null;
					x2 = 1;

					while (( x2 ??0) <= 20) {
						W2 = new Snake_Wall( x2, 9 );
						this.labyrinthwalls.Add( W2 );
						x2++;
					}
					y = null;
					y = 2;

					while (( y ??0) <= 8) {
						W3 = new Snake_Wall( 1, y );
						this.labyrinthwalls.Add( W3 );
						y++;
					}
					y2 = null;
					y2 = 2;

					while (( y2 ??0) <= 8) {
						W4 = new Snake_Wall( 20, y2 );
						this.labyrinthwalls.Add( W4 );
						y2++;
					}
					break;
				case 2:
					W1 = new Snake_Wall( 1, 1 );
					this.labyrinthwalls.Add( W1 );
					W22 = new Snake_Wall( 2, 1 );
					this.labyrinthwalls.Add( W22 );
					W32 = new Snake_Wall( 1, 2 );
					this.labyrinthwalls.Add( W32 );
					W42 = new Snake_Wall( 20, 1 );
					this.labyrinthwalls.Add( W42 );
					W5 = new Snake_Wall( 19, 1 );
					this.labyrinthwalls.Add( W5 );
					W6 = new Snake_Wall( 20, 2 );
					this.labyrinthwalls.Add( W6 );
					W7 = new Snake_Wall( 1, 9 );
					this.labyrinthwalls.Add( W7 );
					W8 = new Snake_Wall( 1, 8 );
					this.labyrinthwalls.Add( W8 );
					W9 = new Snake_Wall( 2, 9 );
					this.labyrinthwalls.Add( W9 );
					W10 = new Snake_Wall( 20, 9 );
					this.labyrinthwalls.Add( W10 );
					W11 = new Snake_Wall( 19, 9 );
					this.labyrinthwalls.Add( W11 );
					W12 = new Snake_Wall( 20, 8 );
					this.labyrinthwalls.Add( W12 );
					x3 = null;
					x3 = 9;

					while (( x3 ??0) <= 12) {
						W13 = new Snake_Wall( x3, 4 );
						this.labyrinthwalls.Add( W13 );
						x3++;
					}
					x4 = null;
					x4 = 9;

					while (( x4 ??0) <= 12) {
						W14 = new Snake_Wall( x4, 6 );
						this.labyrinthwalls.Add( W14 );
						x4++;
					}
					break;
				case 3:
					x5 = null;
					x5 = 1;

					while (( x5 ??0) <= 10) {
						W15 = new Snake_Wall( x5, 3 );
						this.labyrinthwalls.Add( W15 );
						x5++;
					}
					x6 = null;
					x6 = 11;

					while (( x6 ??0) <= 20) {
						W16 = new Snake_Wall( x6, 7 );
						this.labyrinthwalls.Add( W16 );
						x6++;
					}
					y3 = null;
					y3 = 1;

					while (( y3 ??0) <= 5) {
						W17 = new Snake_Wall( 12, y3 );
						this.labyrinthwalls.Add( W17 );
						y3++;
					}
					y4 = null;
					y4 = 5;

					while (( y4 ??0) <= 9) {
						W18 = new Snake_Wall( 9, y4 );
						this.labyrinthwalls.Add( W18 );
						y4++;
					}
					break;
				case 4:
					x7 = null;
					x7 = 1;

					while (( x7 ??0) <= 20) {
						W19 = new Snake_Wall( x7, 1 );
						this.labyrinthwalls.Add( W19 );
						x7++;
					}
					x8 = null;
					x8 = 1;

					while (( x8 ??0) <= 20) {
						W20 = new Snake_Wall( x8, 9 );
						this.labyrinthwalls.Add( W20 );
						x8++;
					}
					y5 = null;
					y5 = 2;

					while (( y5 ??0) <= 8) {
						
						if ( y5 != 5 ) {
							W21 = new Snake_Wall( 1, y5 );
							this.labyrinthwalls.Add( W21 );
						}
						y5++;
					}
					y6 = null;
					y6 = 2;

					while (( y6 ??0) <= 8) {
						
						if ( y6 != 5 ) {
							W23 = new Snake_Wall( 20, y6 );
							this.labyrinthwalls.Add( W23 );
						}
						y6++;
					}
					y7 = null;
					y7 = 3;

					while (( y7 ??0) <= 7) {
						W24 = new Snake_Wall( 8, y7 );
						this.labyrinthwalls.Add( W24 );
						y7++;
					}
					y8 = null;
					y8 = 3;

					while (( y8 ??0) <= 7) {
						W25 = new Snake_Wall( 13, y8 );
						this.labyrinthwalls.Add( W25 );
						y8++;
					}
					break;
				case 5:
					x9 = null;
					x9 = 1;

					while (( x9 ??0) <= 20) {
						W26 = new Snake_Wall( x9, 3 );
						this.labyrinthwalls.Add( W26 );
						x9++;
					}
					x10 = null;
					x10 = 1;

					while (( x10 ??0) <= 20) {
						
						if ( x10 != 10 ) {
							W27 = new Snake_Wall( x10, 6 );
							this.labyrinthwalls.Add( W27 );
						}
						x10++;
					}
					x11 = null;
					x11 = 1;

					while (( x11 ??0) <= 17) {
						
						if ( x11 != 4 ) {
							W28 = new Snake_Wall( x11, 9 );
							this.labyrinthwalls.Add( W28 );
						}
						x11++;
					}
					W110 = new Snake_Wall( 1, 8 );
					this.labyrinthwalls.Add( W110 );
					W29 = new Snake_Wall( 9, 7 );
					this.labyrinthwalls.Add( W29 );
					W33 = new Snake_Wall( 9, 8 );
					this.labyrinthwalls.Add( W33 );
					W43 = new Snake_Wall( 11, 1 );
					this.labyrinthwalls.Add( W43 );
					W52 = new Snake_Wall( 11, 2 );
					this.labyrinthwalls.Add( W52 );
					break;
				case 6:
					x12 = null;
					x12 = 1;

					while (( x12 ??0) <= 20) {
						W30 = new Snake_Wall( x12, 5 );
						this.labyrinthwalls.Add( W30 );
						x12++;
					}
					y9 = null;
					y9 = 1;

					while (( y9 ??0) <= 9) {
						
						if ( y9 != 5 ) {
							W31 = new Snake_Wall( 11, y9 );
							this.labyrinthwalls.Add( W31 );
						}
						y9++;
					}
					break;
				case 7:
					x13 = null;
					x13 = 1;

					while (( x13 ??0) <= 20) {
						W34 = new Snake_Wall( x13, 5 );
						this.labyrinthwalls.Add( W34 );
						x13++;
					}
					y10 = null;
					y10 = 1;

					while (( y10 ??0) <= 4) {
						W35 = new Snake_Wall( 5, y10 );
						this.labyrinthwalls.Add( W35 );
						y10++;
					}
					y11 = null;
					y11 = 1;

					while (( y11 ??0) <= 4) {
						W36 = new Snake_Wall( 16, y11 );
						this.labyrinthwalls.Add( W36 );
						y11++;
					}
					break;
			}
			return;
		}

		// Function from file: snake.dm
		public void eat_bonus(  ) {
			this.snakescore += ( this.next_bonus.life ??0) * ( this.level ??0) * 2;
			this.next_bonus.life = 0;
			this.eggs_eaten = 0;
			return;
		}

		// Function from file: snake.dm
		public void spawn_bonus(  ) {
			ByTable available_spots = null;
			int? x = null;
			int? y = null;
			Spot S = null;
			Spot S2 = null;
			Snake_Wall W = null;
			Snake_Body B = null;
			dynamic chosen_spot = null;

			this.next_bonus.bonustype = Rand13.Int( 1, 6 );
			available_spots = new ByTable();
			x = null;
			x = 1;

			while (( x ??0) <= 19) {
				y = null;
				y = 1;

				while (( y ??0) <= 9) {
					S = new Spot( x, y );
					available_spots.Add( S );
					y++;
				}
				x++;
			}

			foreach (dynamic _c in Lang13.Enumerate( available_spots, typeof(Spot) )) {
				S2 = _c;
				

				foreach (dynamic _a in Lang13.Enumerate( this.labyrinthwalls, typeof(Snake_Wall) )) {
					W = _a;
					

					if ( S2.x == W.x && S2.y == W.y ) {
						available_spots.Remove( S2 );
					}

					if ( ( S2.x ??0) + 1 == W.x && S2.y == W.y ) {
						available_spots.Remove( S2 );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
					B = _b;
					

					if ( ( B.life ??0) > 0 && S2.x == B.x && S2.y == B.y ) {
						available_spots.Remove( S2 );
					}

					if ( ( B.life ??0) > 0 && ( S2.x ??0) + 1 == B.x && S2.y == B.y ) {
						available_spots.Remove( S2 );
					}
				}

				if ( S2.x == this.head.x && S2.y == this.head.y ) {
					available_spots.Remove( S2 );
				}

				if ( ( S2.x ??0) + 1 == this.head.x && S2.y == this.head.y ) {
					available_spots.Remove( S2 );
				}

				if ( this.next_egg.x == S2.x && this.next_egg.y == S2.y ) {
					available_spots.Remove( S2 );
				}

				if ( this.next_egg.x == ( S2.x ??0) + 1 && this.next_egg.y == S2.y ) {
					available_spots.Remove( S2 );
				}
			}

			if ( !( available_spots.len != 0 ) ) {
				this.eggs_eaten = 4;
				return;
			}
			chosen_spot = Rand13.PickFromTable( available_spots );
			this.next_bonus.x = Lang13.IntNullable( chosen_spot.x );
			this.next_bonus.y = Lang13.IntNullable( chosen_spot.y );
			this.next_bonus.life = 20;
			return;
		}

		// Function from file: snake.dm
		public void eat_egg( int? next_x = null, int? next_y = null ) {
			Snake_Body B = null;
			ByTable available_spots = null;
			int? x = null;
			int? y = null;
			Spot S = null;
			Spot S2 = null;
			Snake_Wall W = null;
			Snake_Body B2 = null;
			dynamic chosen_spot = null;

			this.head.life++;

			foreach (dynamic _a in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
				B = _a;
				
				B.life++;
			}
			this.snakescore += this.level ??0;
			available_spots = new ByTable();
			x = null;
			x = 1;

			while (( x ??0) <= 20) {
				y = null;
				y = 1;

				while (( y ??0) <= 9) {
					S = new Spot( x, y );
					available_spots.Add( S );
					y++;
				}
				x++;
			}

			foreach (dynamic _d in Lang13.Enumerate( available_spots, typeof(Spot) )) {
				S2 = _d;
				

				foreach (dynamic _b in Lang13.Enumerate( this.labyrinthwalls, typeof(Snake_Wall) )) {
					W = _b;
					

					if ( S2.x == W.x && S2.y == W.y ) {
						available_spots.Remove( S2 );
					}
				}

				foreach (dynamic _c in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
					B2 = _c;
					

					if ( ( B2.life ??0) > 0 && S2.x == B2.x && S2.y == B2.y ) {
						available_spots.Remove( S2 );
					}
				}

				if ( S2.x == this.head.x && S2.y == this.head.y ) {
					available_spots.Remove( S2 );
				}

				if ( S2.x == next_x && S2.y == next_y ) {
					available_spots.Remove( S2 );
				}

				if ( ( this.next_bonus.life ??0) > 0 && this.next_bonus.x == S2.x && this.next_bonus.y == S2.y ) {
					available_spots.Remove( S2 );
				}

				if ( ( this.next_bonus.life ??0) > 0 && ( this.next_bonus.x ??0) + 1 == S2.x && this.next_bonus.y == S2.y ) {
					available_spots.Remove( S2 );
				}
			}

			if ( !( available_spots.len != 0 ) ) {
				this.gameover = true;
				return;
			}
			chosen_spot = Rand13.PickFromTable( available_spots );
			this.next_egg.x = Lang13.IntNullable( chosen_spot.x );
			this.next_egg.y = Lang13.IntNullable( chosen_spot.y );
			this.eggs_eaten++;

			if ( this.eggs_eaten == 5 ) {
				this.spawn_bonus();
			}
			return;
		}

		// Function from file: snake.dm
		public void game_tick( int dir = 0 ) {
			Snake_Body newbody = null;
			double? old_dir = null;
			int? next_x = null;
			int? next_y = null;
			int? afternext_x = null;
			int? afternext_y = null;
			Snake_Body B = null;
			Snake_Wall W = null;
			bool hunger = false;
			Snake_Body B2 = null;

			newbody = new Snake_Body();
			this.snakeparts.Add( newbody );
			newbody.x = this.head.x;
			newbody.y = this.head.y;
			newbody.life = this.head.life;

			if ( this.head.next_full ) {
				newbody.isfull = true;
				this.head.next_full = false;
			}

			if ( Lang13.Bool( this.gyroscope ) ) {
				this.lastinput = dir;
			}
			old_dir = this.head.dir;

			if ( Lang13.Bool( this.lastinput ) && !( this.head.dir == GlobalVars.NORTH && this.lastinput == GlobalVars.SOUTH ) && !( this.head.dir == GlobalVars.SOUTH && this.lastinput == GlobalVars.NORTH ) && !( this.head.dir == GlobalVars.EAST && this.lastinput == GlobalVars.WEST ) && !( this.head.dir == GlobalVars.WEST && this.lastinput == GlobalVars.EAST ) ) {
				
				if ( this.head.dir != this.lastinput ) {
					newbody.corner = this.head.dir;
				}
				this.head.dir = this.lastinput;
				this.lastinput = null;
			} else {
				this.lastinput = null;
			}
			newbody.dir = this.head.dir;
			next_x = this.head.x;
			next_y = this.head.y;
			afternext_x = this.head.x;
			afternext_y = this.head.y;

			switch ((double?)( this.head.dir )) {
				case 1:
					next_x = this.head.x;
					next_y = ( this.head.y ??0) + 1;
					break;
				case 2:
					next_x = this.head.x;
					next_y = ( this.head.y ??0) - 1;
					break;
				case 4:
					next_x = ( this.head.x ??0) + 1;
					next_y = this.head.y;
					break;
				case 8:
					next_x = ( this.head.x ??0) - 1;
					next_y = this.head.y;
					break;
			}

			if ( ( next_x ??0) > 20 ) {
				next_x = 1;
			}

			if ( ( next_x ??0) < 1 ) {
				next_x = 20;
			}

			if ( ( next_y ??0) > 9 ) {
				next_y = 1;
			}

			if ( ( next_y ??0) < 1 ) {
				next_y = 9;
			}

			switch ((double?)( this.head.dir )) {
				case 1:
					afternext_x = next_x;
					afternext_y = ( next_y ??0) + 1;
					break;
				case 2:
					afternext_x = next_x;
					afternext_y = ( next_y ??0) - 1;
					break;
				case 4:
					afternext_x = ( next_x ??0) + 1;
					afternext_y = next_y;
					break;
				case 8:
					afternext_x = ( next_x ??0) - 1;
					afternext_y = next_y;
					break;
			}

			if ( ( afternext_x ??0) > 20 ) {
				afternext_x = 1;
			}

			if ( ( afternext_x ??0) < 1 ) {
				afternext_x = 20;
			}

			if ( ( afternext_y ??0) > 9 ) {
				afternext_y = 1;
			}

			if ( ( afternext_y ??0) < 1 ) {
				afternext_y = 9;
			}

			foreach (dynamic _c in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
				B = _c;
				

				if ( ( B.life ??0) > 0 && B.x == next_x && B.y == next_y ) {
					this.gameover = true;
					this.head.dir = old_dir;
					newbody.life = 0;
					this.snakeparts.Remove( newbody );
					return;
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( this.labyrinthwalls, typeof(Snake_Wall) )) {
				W = _d;
				

				if ( W.x == next_x && W.y == next_y ) {
					this.gameover = true;
					this.head.dir = old_dir;
					newbody.life = 0;
					this.snakeparts.Remove( newbody );
					return;
				}
			}
			hunger = false;

			if ( this.next_egg.x == next_x && this.next_egg.y == next_y ) {
				this.eat_egg( next_x, next_y );
				this.head.next_full = true;
			}

			if ( this.next_egg.x == afternext_x && this.next_egg.y == afternext_y ) {
				hunger = true;
			}

			if ( ( this.next_bonus.life ??0) > 0 && ( this.next_bonus.x == next_x || ( this.next_bonus.x ??0) + 1 == next_x ) && this.next_bonus.y == next_y ) {
				this.eat_bonus();
				this.head.next_full = true;
			}

			if ( ( this.next_bonus.life ??0) > 0 && ( this.next_bonus.x == afternext_x || ( this.next_bonus.x ??0) + 1 == afternext_x ) && this.next_bonus.y == afternext_y ) {
				hunger = true;
			}

			if ( hunger ) {
				this.head.open_mouth = true;
			} else {
				this.head.open_mouth = false;
			}

			if ( ( this.next_bonus.life ??0) > 0 ) {
				this.next_bonus.life--;

				if ( this.next_bonus.life == 0 ) {
					this.eggs_eaten = 0;
				}
			}

			foreach (dynamic _e in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
				B2 = _e;
				
				B2.life--;

				if ( ( B2.life ??0) <= 0 ) {
					this.snakeparts.Remove( B2 );
				}
			}
			this.head.x = next_x;
			this.head.y = next_y;

			if ( this.snakescore >= 9999 ) {
				this.gameover = true;
			}
			return;
		}

		// Function from file: snake.dm
		public void game_start(  ) {
			int? i = null;
			Snake_Body B = null;
			Snake_Body B2 = null;
			Snake_Body B3 = null;
			Snake_Body B4 = null;
			Snake_Body B5 = null;

			this.gameover = false;
			this.head = new Snake_Head();
			this.snakeparts = new ByTable();
			i = null;
			i = 6;

			while (( i ??0) > 0) {
				B = new Snake_Body();
				B.x = ( i ??0) + 3;
				B.life = i;
				this.snakeparts.Add( B );
				i--;
			}
			this.next_egg = new Snake_Egg();
			this.next_egg.x = 15;
			this.next_bonus = new Snake_Bonus();
			this.next_bonus.life = 0;
			this.eggs_eaten = 0;
			this.snakescore = 0;

			switch ((double?)( this.labyrinth )) {
				case 3:
					
					foreach (dynamic _a in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
						B2 = _a;
						
						B2.y = 6;
						B2.x += 5;
					}
					this.head.y = 6;
					this.head.x += 5;
					this.next_egg.y = 6;
					this.next_egg.x = 3;
					break;
				case 4:
					
					foreach (dynamic _b in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
						B3 = _b;
						
						B3.x += 8;
					}
					this.head.x += 8;
					this.next_egg.x = 3;
					break;
				case 6:
					
					foreach (dynamic _c in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
						B4 = _c;
						
						B4.x += 8;
						B4.y = 6;
					}
					this.head.x += 8;
					this.head.y = 6;
					this.next_egg.x = 3;
					this.next_egg.y = 6;
					break;
				case 7:
					
					foreach (dynamic _d in Lang13.Enumerate( this.snakeparts, typeof(Snake_Body) )) {
						B5 = _d;
						
						B5.y = 6;
					}
					this.head.y = 6;
					this.next_egg.y = 6;
					break;
			}
			return;
		}

	}

}