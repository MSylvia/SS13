// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_SetValveState : Automation {

		public dynamic valve = null;
		public double? state = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Digital Valve: Set Open/Closed";
		}

		public Automation_SetValveState ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			
		}

		// Function from file: digital_valves.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			ByTable valves = null;
			Obj_Machinery_Atmospherics_Binary_Valve_Digital V = null;

			
			if ( Lang13.Bool( href_list["set_state"] ) ) {
				this.state = !Lang13.Bool( this.state ) ?1:0;
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_subject"] ) ) {
				valves = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Binary_Valve_Digital) )) {
					V = _a;
					

					if ( !( V.id_tag == null ) && V.frequency == this.parent.frequency ) {
						valves.Or( V.id_tag );
					}
				}

				if ( valves.len == 0 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to find any digital valves on this frequency.</span>" );
					return null;
				}
				this.valve = Interface13.Input( "Select a valve:", "Sensor Data", this.valve, null, valves, InputType.Null | InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}
			return null;
		}

		// Function from file: digital_valves.dm
		public override string GetText(  ) {
			return new Txt( "Set digital valve <a href=\"?src=" ).Ref( this ).str( ";set_subject=1\">" ).item( this.fmtString( this.valve ) ).str( "</a> to <a href=\"?src=" ).Ref( this ).str( ";set_state=1\">" ).item( ( Lang13.Bool( this.state ) ? "open" : "closed" ) ).str( "</a>." ).ToString();
		}

		// Function from file: digital_valves.dm
		public override bool process(  ) {
			
			if ( Lang13.Bool( this.valve ) ) {
				this.parent.send_signal( new ByTable().Set( "tag", this.valve ).Set( "command", "valve_set" ).Set( "state", this.state ) );
			}
			return false;
		}

		// Function from file: digital_valves.dm
		public override void Import( ByTable json = null ) {
			base.Import( json );
			this.valve = json["valve"];
			this.state = String13.ParseNumber( json["state"] );
			return;
		}

		// Function from file: digital_valves.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["valve"] = this.valve;
			json["state"] = this.state;
			return json;
		}

	}

}