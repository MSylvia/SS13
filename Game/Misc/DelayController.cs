// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class DelayController : Game_Data {

		public double? min_delay = 1;
		public double? max_delay = 10000;
		public double next_allowed = 0;

		// Function from file: delays.dm
		public DelayController ( bool? min = null, int? max = null ) {
			this.min_delay = Lang13.DoubleNullable( min );
			this.max_delay = max;
			return;
		}

		// Function from file: delays.dm
		public bool blocked(  ) {
			return this.next_allowed > Game13.time;
		}

		// Function from file: delays.dm
		public void delayNext( dynamic delay = null, bool? additive = null ) {
			
			if ( additive == true ) {
				this.addDelay( delay );
			} else {
				this.setDelay( delay );
			}
			return;
		}

		// Function from file: delays.dm
		public void addDelay( dynamic delay = null ) {
			int current_delay = 0;

			current_delay = Num13.MaxInt( 0, ((int)( this.next_allowed - Game13.time )) );
			this.setDelay( current_delay + Convert.ToDouble( delay ) );
			return;
		}

		// Function from file: delays.dm
		public void setDelay( dynamic delay = null ) {
			this.next_allowed = Game13.time + Convert.ToDouble( ( Convert.ToDouble( delay ) <= ( this.min_delay ??0) ? ((dynamic)( this.min_delay )) : ( Convert.ToDouble( delay ) >= ( this.max_delay ??0) ? ((dynamic)( this.max_delay )) : delay ) ) );
			return;
		}

	}

}