// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Cult : GameMode {

		public dynamic sacrifice_target = null;
		public bool finished = false;
		public int waittime_l = 600;
		public int waittime_h = 1800;
		public ByTable startwords = new ByTable(new object [] { "blood", "join", "self", "hell" });
		public ByTable objectives = new ByTable();
		public int min_cultists_to_start = 3;
		public int max_cultists_to_start = 4;
		public bool acolytes_survived = false;
		public bool ext_survivors = false;
		public bool narsie_condition_cleared = false;
		public int current_objective = 1;
		public int prenarsie_objectives = 2;
		public ByTable bloody_floors = new ByTable();
		public int spilltarget = 100;
		public int convert_target = 0;
		public int harvested = 0;
		public ByTable sacrificed = new ByTable();
		public bool mass_convert = false;
		public bool spilled_blood = false;
		public int max_spilled_blood = 0;
		public bool bonus = false;
		public int harvest_target = 10;
		public int massacre_target = 5;
		public int escaped_shuttle = 0;
		public int escaped_pod = 0;
		public int survivors = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "cult";
			this.config_tag = "cult";
			this.restricted_jobs = new ByTable(new object [] { "Chaplain", "AI", "Cyborg", "Security Officer", "Warden", "Detective", "Head of Security", "Captain", "Internal Affairs Agent", "Mobile MMI", "Head of Personnel" });
			this.protected_jobs = new ByTable();
			this.required_players = 5;
			this.required_players_secret = 15;
			this.required_enemies = 3;
			this.recommended_enemies = 4;
			this.uplink_welcome = "Nar-Sie Uplink Console:";
		}

		// Function from file: cult.dm
		public override bool declare_completion( bool? ragin = null ) {
			string text = null;
			int? obj_count = null;
			string explanation = null;

			this.bonus_check();

			if ( GlobalVars.universe.name == "Hell Rising" ) {
				
				if ( this.bonus ) {
					GlobalFuncs.feedback_set_details( "round_end_result", "win - narsie summoned - all objectives completed" );
					this.completion_text += "<FONT size = 3><B>Cult Total Victory!</B></FONT>";
					this.completion_text += "<BR><B>The Cult has summoned Nar-Sie and fulfilled all of his requests</B>";
				} else {
					GlobalFuncs.feedback_set_details( "round_end_result", "win - narsie summoned" );
					this.completion_text += "<FONT size = 3><B>Cult Major Victory!</B></FONT>";
					this.completion_text += "<BR><B>The Cult has managed to summon Nar-Sie</B>";
				}
			} else if ( this.current_objective > 1 ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "halfwin - some objectives completed" );
				this.completion_text += "<FONT size = 3><B>Crew Minor Victory!</B></FONT>";
				this.completion_text += "<BR><B>The Cult didn't summon Nar-Sie in time but still managed to fulfill some of his requests.</B>";
			} else {
				GlobalFuncs.feedback_set_details( "round_end_result", "loss - no objective done" );
				this.completion_text += "<FONT size = 3><B>Crew Major Victory!</B></FONT>";
				this.completion_text += "<BR><B>The Staff has managed to stop the Cult</B>";
			}
			text = "<BR><b>Objectives Completed:</b> " + ( this.current_objective - 1 + ( this.bonus ?1:0) );

			if ( this.objectives.len != 0 ) {
				text += "<br><b>The cultists' objectives were:</b>";
				obj_count = null;
				obj_count = 1;

				while (( obj_count ??0) <= this.objectives.len) {
					explanation = null;

					dynamic _a = this.objectives[obj_count]; // Was a switch-case, sorry for the mess.
					if ( _a=="convert" ) {
						
						if ( ( obj_count ??0) < this.objectives.len ) {
							explanation = "Convert " + this.convert_target + " crewmembers (" + this.cult.len + " cultists at round end). <font color='green'><B>Success!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_convertion|SUCCESS" );
						} else {
							explanation = "Convert " + this.convert_target + " crewmembers (" + this.cult.len + " total cultists). <font color='red'><B>Fail!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_convertion|FAIL" );
						}
					} else if ( _a=="bloodspill" ) {
						
						if ( ( obj_count ??0) < this.objectives.len ) {
							explanation = "Cover " + this.spilltarget + " tiles of the station in blood (The peak number of covered tiles was: " + this.max_spilled_blood + "). <font color='green'><B>Success!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_bloodspill|SUCCESS" );
						} else {
							explanation = "Cover " + this.spilltarget + " tiles of the station in blood (The peak number of covered tiles was: " + this.max_spilled_blood + "). <font color='red'><B>Fail!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_bloodspill|FAIL" );
						}
					} else if ( _a=="sacrifice" ) {
						
						if ( Lang13.Bool( this.sacrifice_target ) ) {
							
							if ( this.sacrificed.Contains( this.sacrifice_target ) ) {
								explanation = "Sacrifice " + this.sacrifice_target.name + ", the " + this.sacrifice_target.assigned_role + ". <font color='green'><B>Success!</B></font>";
								GlobalFuncs.feedback_add_details( "cult_objective", "cult_sacrifice|SUCCESS" );
							} else if ( Lang13.Bool( this.sacrifice_target ) && Lang13.Bool( this.sacrifice_target.current ) ) {
								explanation = "Sacrifice " + this.sacrifice_target.name + ", the " + this.sacrifice_target.assigned_role + ". <font color='red'>Fail.</font>";
								GlobalFuncs.feedback_add_details( "cult_objective", "cult_sacrifice|FAIL" );
							} else {
								explanation = "Sacrifice " + this.sacrifice_target.name + ", the " + this.sacrifice_target.assigned_role + ". <font color='red'>Fail (Gibbed).</font>";
								GlobalFuncs.feedback_add_details( "cult_objective", "cult_sacrifice|FAIL|GIBBED" );
							}
						}
					} else if ( _a=="eldergod" ) {
						
						if ( GlobalVars.universe.name == "Hell Rising" ) {
							explanation = "Summon Nar-Sie. <font color='green'><B>Success!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_narsie|SUCCESS" );
						} else {
							explanation = "Summon Nar-Sie. <font color='red'>Fail.</font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_narsie|FAIL" );
						}
					} else if ( _a=="harvest" ) {
						
						if ( this.harvested > this.harvest_target ) {
							explanation = "Offer " + this.harvest_target + " humans for Nar-Sie's first meal of the day. (" + this.harvested + " eaten) <font color='green'><B>Success!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_harvest|SUCCESS" );
						} else {
							explanation = "Offer " + this.harvest_target + " humans for Nar-Sie's first meal of the day. (" + this.harvested + " eaten) <font color='red'><B>Fail!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_harvest|FAIL" );
						}
					} else if ( _a=="hijack" ) {
						
						if ( !( this.escaped_shuttle != 0 ) ) {
							explanation = "Do not let a single non-cultist board the Escape Shuttle. (" + this.escaped_shuttle + " escaped on the shuttle) (" + this.escaped_pod + " escaped on pods) <font color='green'><B>Success!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_hijack|SUCCESS" );
						} else {
							explanation = "Do not let a single non-cultist board the Escape Shuttle. (" + this.escaped_shuttle + " escaped on the shuttle) (" + this.escaped_pod + " escaped on pods) <font color='red'><B>Fail!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_hijack|FAIL" );
						}
					} else if ( _a=="massacre" ) {
						
						if ( this.survivors < this.massacre_target ) {
							explanation = "Massacre the crew until less than " + this.massacre_target + " humans are left on the station. (" + this.survivors + " humans left alive) <font color='green'><B>Success!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_massacre|SUCCESS" );
						} else {
							explanation = "Massacre the crew until less than " + this.massacre_target + " humans are left on the station. (" + this.survivors + " humans left alive) <font color='red'><B>Fail!</B></font>";
							GlobalFuncs.feedback_add_details( "cult_objective", "cult_massacre|FAIL" );
						}
					}
					text += "<br><B>Objective #" + obj_count + "</B>: " + explanation;
					obj_count++;
				}
			}
			this.completion_text += text;
			base.declare_completion( ragin );
			return true;
		}

		// Function from file: cult.dm
		public override bool add_cultist( dynamic cult_mind = null ) {
			
			if ( !base.add_cultist( (object)(cult_mind) ) ) {
				return false;
			}
			this.memoize_cult_objectives( cult_mind );
			return false;
		}

		// Function from file: cult.dm
		public override void grant_runeword( dynamic cult_mob = null, dynamic word = null ) {
			
			if ( !Lang13.Bool( word ) ) {
				
				if ( this.startwords.len > 0 ) {
					word = Rand13.PickFromTable( this.startwords );
					this.startwords.Remove( word );
				}
			}
			base.grant_runeword( (object)(cult_mob), (object)(word) ); return;
		}

		// Function from file: cult.dm
		public override bool post_setup(  ) {
			this.modePlayer.Add( this.cult );
			this.first_phase();

			if ( !this.mixed ) {
				Task13.Schedule( Rand13.Int( GlobalVars.waittime_l, GlobalVars.waittime_h ), (Task13.Closure)(() => {
					
					if ( !this.mixed ) {
						this.send_intercept();
					}
					return;
				}));
				base.post_setup();
			}
			return false;
		}

		// Function from file: cult.dm
		public void bonus_check(  ) {
			Mob_Living L = null;
			dynamic T = null;
			Mob_Living_Carbon C = null;
			dynamic T2 = null;

			
			if ( GlobalVars.universe.name == "Hell Rising" ) {
				
				dynamic _c = this.objectives[this.current_objective]; // Was a switch-case, sorry for the mess.
				if ( _c=="harvest" ) {
					
					if ( this.harvested >= this.harvest_target ) {
						this.bonus = true;
					}
				} else if ( _c=="hijack" ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
						L = _a;
						

						if ( L.stat != 2 ) {
							
							if ( !this.cult.Contains( L.mind ) ) {
								T = GlobalFuncs.get_turf( L );

								if ( T.loc is Zone_Shuttle_Escape_Centcom ) {
									this.escaped_shuttle++;
								} else if ( T.loc is Zone_Shuttle_EscapePod1_Centcom || T.loc is Zone_Shuttle_EscapePod2_Centcom || T.loc is Zone_Shuttle_EscapePod3_Centcom || T.loc is Zone_Shuttle_EscapePod5_Centcom ) {
									this.escaped_pod++;
								}
							}
						}
					}

					if ( !( this.escaped_shuttle != 0 ) ) {
						this.bonus = true;
					}
				} else if ( _c=="massacre" ) {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon) )) {
						C = _b;
						

						if ( C.stat != 2 ) {
							
							if ( !this.cult.Contains( C.mind ) ) {
								T2 = GlobalFuncs.get_turf( C );

								if ( Convert.ToInt32( T2.z ) == GlobalVars.map.zMainStation ) {
									this.survivors++;
								}
							}
						}
					}

					if ( this.survivors < this.massacre_target ) {
						this.bonus = true;
					}
				}
			}
			return;
		}

		// Function from file: cult.dm
		public ByTable get_unconvertables(  ) {
			ByTable ucs = null;
			Mob_Living_Carbon_Human player = null;

			ucs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				player = _a;
				

				if ( player.mind != null && ( !GlobalFuncs.is_convertable_to_cult( player.mind ) || Lang13.Bool( GlobalFuncs.jobban_isbanned( player, "cultist" ) ) ) ) {
					ucs.Add( player.mind );
				}
			}
			return ucs;
		}

		// Function from file: cult.dm
		public void memoize_cult_objectives( dynamic cult_mind = null ) {
			string explanation = null;

			GlobalFuncs.to_chat( cult_mind.current, "The convert rune is Join Blood Self" );
			cult_mind.memory += "The convert rune is Join Blood Self<BR>";

			dynamic _a = this.objectives[this.current_objective]; // Was a switch-case, sorry for the mess.
			if ( _a=="convert" ) {
				explanation = "We must increase our influence before we can summon Nar-Sie. Convert " + this.convert_target + " crew members. Take it slowly to avoid raising suspicions.";
			} else if ( _a=="bloodspill" ) {
				explanation = "We must prepare this place for the Geometer of Blood's coming. Spill blood and gibs over " + this.spilltarget + " floor tiles.";
			} else if ( _a=="sacrifice" ) {
				explanation = "We need to sacrifice " + this.sacrifice_target.name + ", the " + this.sacrifice_target.assigned_role + ", for his blood is the key that will lead our master to this realm. You will need 3 cultists around a Sacrifice rune (Hell Blood Join) to perform the ritual.";
			} else if ( _a=="eldergod" ) {
				explanation = "Summon Nar-Sie via the use of the Tear Reality rune (Hell Join Self). You will need 9 cultists standing on and around the rune to summon Him.";
			}
			GlobalFuncs.to_chat( cult_mind.current, "<B>Objective #" + this.current_objective + "</B>: " + explanation );
			cult_mind.memory += "<B>Objective #" + this.current_objective + "</B>: " + explanation + "<BR>";
			return;
		}

		// Function from file: cult.dm
		public dynamic pick_bonus_objective(  ) {
			ByTable possible_objectives = null;
			int living_crew = 0;
			Mob_Living_Carbon C = null;
			dynamic T = null;

			possible_objectives = new ByTable();
			living_crew = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon) )) {
				C = _a;
				

				if ( C.stat != 2 ) {
					
					if ( !this.cult.Contains( C.mind ) ) {
						T = GlobalFuncs.get_turf( C );

						if ( Convert.ToInt32( T.z ) == GlobalVars.map.zMainStation ) {
							living_crew++;
						}
					}
				}
			}

			if ( living_crew > 5 ) {
				possible_objectives.Or( "massacre" );
			}

			if ( living_crew > 10 ) {
				possible_objectives.Or( "harvest" );
			}
			possible_objectives.Or( "hijack" );
			return Rand13.PickFromTable( possible_objectives );
		}

		// Function from file: cult.dm
		public dynamic pick_objective(  ) {
			ByTable possible_objectives = null;
			ByTable possible_targets = null;
			Mob_Living_Carbon_Human player = null;
			Mob_Living_Carbon_Human player2 = null;
			int living_crew = 0;
			int living_cultists = 0;
			Mob_Living L = null;
			int total = 0;

			possible_objectives = new ByTable();

			if ( !this.spilled_blood && this.bloody_floors.len < this.spilltarget ) {
				possible_objectives.Or( "bloodspill" );
			}

			if ( !( this.sacrificed.len != 0 ) ) {
				possible_targets = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
					player = _a;
					

					if ( player.z == GlobalVars.map.zCentcomm ) {
						continue;
					}

					if ( player.mind != null && !GlobalFuncs.is_convertable_to_cult( player.mind ) && player.stat != 2 ) {
						possible_targets.Add( player.mind );
					}
				}

				if ( !( possible_targets.len != 0 ) ) {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
						player2 = _b;
						

						if ( player2.z == GlobalVars.map.zCentcomm ) {
							continue;
						}

						if ( player2.mind != null && !this.cult.Contains( player2.mind ) ) {
							possible_targets.Add( player2.mind );
						}
					}
				}

				if ( possible_targets.len > 0 ) {
					this.sacrifice_target = Rand13.PickFromTable( possible_targets );
					possible_objectives.Or( "sacrifice" );
				} else {
					GlobalFuncs.message_admins( "Didn't find a suitable sacrifice target...what the hell? Shout at Deity." );
					GlobalFuncs.log_admin( "Didn't find a suitable sacrifice target...what the hell? Shout at Deity." );
				}
			}

			if ( !this.mass_convert ) {
				living_crew = 0;
				living_cultists = 0;

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
					L = _c;
					

					if ( L.stat != 2 ) {
						
						if ( this.cult.Contains( L.mind ) ) {
							living_cultists++;
						} else if ( L is Mob_Living_Carbon ) {
							living_crew++;
						}
					}
				}
				total = living_crew + living_cultists;

				if ( living_cultists * 2 < total ) {
					
					if ( total < 15 ) {
						GlobalFuncs.message_admins( "There are " + total + " players, too little for the mass convert objective!" );
						GlobalFuncs.log_admin( "There are " + total + " players, too little for the mass convert objective!" );
					} else if ( total > 50 ) {
						GlobalFuncs.message_admins( "There are " + total + " players, too many for the mass convert objective!" );
						GlobalFuncs.log_admin( "There are " + total + " players, too many for the mass convert objective!" );
					} else {
						possible_objectives.Or( "convert" );
						this.convert_target = Num13.Floor( total / 2 );
					}
				}
			}

			if ( !( possible_objectives.len != 0 ) ) {
				GlobalFuncs.message_admins( "No suitable objectives left! Nar-Sie objective unlocked." );
				GlobalFuncs.log_admin( "No suitable objectives left! Nar-Sie objective unlocked." );
				return "eldergod";
			} else {
				return Rand13.PickFromTable( possible_objectives );
			}
		}

		// Function from file: cult.dm
		public void third_phase(  ) {
			dynamic last_objective = null;
			string explanation = null;
			Mind cult_mind = null;

			this.current_objective++;
			Task13.Sleep( 10 );
			last_objective = this.pick_bonus_objective();
			this.objectives.Add( last_objective );

			dynamic _a = last_objective; // Was a switch-case, sorry for the mess.
			if ( _a=="harvest" ) {
				explanation = "The Geometer of Blood hungers for his first meal of this never-ending day. Offer him " + this.harvest_target + " humans in sacrifice.";
			} else if ( _a=="hijack" ) {
				explanation = "Nar-Sie wishes for his troops to start the assault on Centcom immediately. Hijack the escape shuttle and don't let a single non-cultist board it.";
			} else if ( _a=="massacre" ) {
				explanation = "Nar-Sie wants to watch you as you massacre the remaining humans on the station (until less than " + this.massacre_target + " humans are left alive).";
			}

			foreach (dynamic _b in Lang13.Enumerate( this.cult, typeof(Mind) )) {
				cult_mind = _b;
				
				GlobalFuncs.to_chat( cult_mind.current, "<B>Objective #" + this.current_objective + "</B>: " + explanation );
				cult_mind.memory += "<B>Objective #" + this.current_objective + "</B>: " + explanation + "<BR>";
			}
			GlobalFuncs.message_admins( "Last Cult Objective: " + last_objective );
			GlobalFuncs.log_admin( "Last Cult Objective: " + last_objective );
			return;
		}

		// Function from file: cult.dm
		public void second_phase(  ) {
			string explanation = null;
			Mind cult_mind = null;

			this.narsie_condition_cleared = true;
			this.objectives.Add( "eldergod" );
			explanation = "Summon Nar-Sie on the Station via the use of the Tear Reality rune (Hell Join Self). You will need 9 cultists standing on and around the rune to summon Him.";

			foreach (dynamic _a in Lang13.Enumerate( this.cult, typeof(Mind) )) {
				cult_mind = _a;
				
				GlobalFuncs.to_chat( cult_mind.current, "<span class='sinister'>You and your acolytes have succeeded in preparing the station for the ultimate ritual!</span>" );
				GlobalFuncs.to_chat( cult_mind.current, "<B>Objective #" + this.current_objective + "</B>: " + explanation );
				cult_mind.memory += "<B>Objective #" + this.current_objective + "</B>: " + explanation + "<BR>";
			}
			return;
		}

		// Function from file: cult.dm
		public void additional_phase(  ) {
			dynamic new_objective = null;
			ByTable unconvertables = null;
			string explanation = null;
			Mind cult_mind = null;

			this.current_objective++;
			GlobalFuncs.message_admins( "Picking a new Cult objective." );
			new_objective = "eldergod";

			if ( this.cult.len >= 4 ) {
				
				if ( this.current_objective <= this.prenarsie_objectives ) {
					unconvertables = this.get_unconvertables();

					if ( unconvertables.len <= this.cult.len * 2 ) {
						new_objective = this.pick_objective();
					} else {
						GlobalFuncs.message_admins( "There are over twice more unconvertables than there are cultists (" + this.cult.len + " cultists for " + unconvertables.len + ") unconvertables! Nar-Sie objective unlocked." );
						GlobalFuncs.log_admin( "There are over twice more unconvertables than there are cultists (" + this.cult.len + " cultists for " + unconvertables.len + ") unconvertables! Nar-Sie objective unlocked." );
					}
				} else {
					GlobalFuncs.message_admins( "The Cult has already completed " + this.prenarsie_objectives + " objectives! Nar-Sie objective unlocked." );
					GlobalFuncs.log_admin( "The Cult has already completed " + this.prenarsie_objectives + " objectives! Nar-Sie objective unlocked." );
				}
			} else {
				GlobalFuncs.message_admins( "There are less than 4 cultists! Nar-Sie objective unlocked." );
				GlobalFuncs.log_admin( "There are less than 4 cultists! Nar-Sie objective unlocked." );
			}

			if ( !( this.sacrificed.len != 0 ) && new_objective != "sacrifice" ) {
				this.sacrifice_target = null;
			}

			if ( new_objective == "eldergod" ) {
				this.second_phase();
				return;
			} else {
				this.objectives.Add( new_objective );

				dynamic _a = new_objective; // Was a switch-case, sorry for the mess.
				if ( _a=="convert" ) {
					explanation = "We must increase our influence before we can summon Nar-Sie. Convert " + this.convert_target + " crew members. Take it slowly to avoid raising suspicions.";
				} else if ( _a=="bloodspill" ) {
					this.spilltarget = Rand13.Int( 0, GlobalVars.player_list.len * 3 ) + 100;
					explanation = "We must prepare this place for the Geometer of Blood's coming. Spread blood and gibs over " + this.spilltarget + " of the Station's floor tiles.";
				} else if ( _a=="sacrifice" ) {
					explanation = "We need to sacrifice " + this.sacrifice_target.name + ", the " + this.sacrifice_target.assigned_role + ", for his blood is the key that will lead our master to this realm. You will need 3 cultists around a Sacrifice rune (Hell Blood Join) to perform the ritual.";
				}

				foreach (dynamic _b in Lang13.Enumerate( this.cult, typeof(Mind) )) {
					cult_mind = _b;
					
					GlobalFuncs.to_chat( cult_mind.current, "<span class='sinister'>You and your acolytes have completed your task, but this place requires yet more preparation!</span>" );
					GlobalFuncs.to_chat( cult_mind.current, "<B>Objective #" + this.current_objective + "</B>: " + explanation );
					cult_mind.memory += "<B>Objective #" + this.current_objective + "</B>: " + explanation + "<BR>";
				}
				GlobalFuncs.message_admins( "New Cult Objective: " + new_objective );
				GlobalFuncs.log_admin( "New Cult Objective: " + new_objective );
				this.blood_check();
			}
			return;
		}

		// Function from file: cult.dm
		public void bypass_phase(  ) {
			
			dynamic _a = this.objectives[this.current_objective]; // Was a switch-case, sorry for the mess.
			if ( _a=="convert" ) {
				this.mass_convert = true;
			} else if ( _a=="bloodspill" ) {
				this.spilled_blood = true;
			} else if ( _a=="sacrifice" ) {
				this.sacrificed.Add( this.sacrifice_target );
			}
			this.additional_phase();
			return;
		}

		// Function from file: cult.dm
		public void first_phase(  ) {
			dynamic new_objective = null;
			string explanation = null;
			Mind cult_mind = null;
			dynamic wikiroute = null;

			new_objective = this.pick_objective();
			this.objectives.Add( new_objective );

			dynamic _a = new_objective; // Was a switch-case, sorry for the mess.
			if ( _a=="convert" ) {
				explanation = "We must increase our influence before we can summon Nar-Sie. Convert " + this.convert_target + " crew members. Take it slowly to avoid raising suspicions.";
			} else if ( _a=="bloodspill" ) {
				this.spilltarget = Rand13.Int( 0, GlobalVars.player_list.len * 3 ) + 100;
				explanation = "We must prepare this place for the Geometer of Blood's coming. Spill blood and gibs over " + this.spilltarget + " floor tiles.";
			} else if ( _a=="sacrifice" ) {
				explanation = "We need to sacrifice " + this.sacrifice_target.name + ", the " + this.sacrifice_target.assigned_role + ", for his blood is the key that will lead our master to this realm. You will need 3 cultists around a Sacrifice rune (Hell Blood Join) to perform the ritual.";
			}

			foreach (dynamic _b in Lang13.Enumerate( this.cult, typeof(Mind) )) {
				cult_mind = _b;
				
				this.equip_cultist( cult_mind.current );
				this.grant_runeword( cult_mind.current );
				this.update_cult_icons_added( cult_mind );
				cult_mind.special_role = "Cultist";
				wikiroute = GlobalVars.role_wiki["cultist"];
				GlobalFuncs.to_chat( cult_mind.current, new Txt( "<span class='sinister'>You are a member of the cult!</span> <span class='info'><a HREF='?src=" ).Ref( cult_mind.current ).str( ";getwiki=" ).item( wikiroute ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
				GlobalFuncs.to_chat( cult_mind.current, "<span class='sinister'>You can now speak and understand the forgotten tongue of Nar-Sie.</span>" );
				((Mob)cult_mind.current).add_language( "Cult" );
				GlobalFuncs.to_chat( cult_mind.current, "<B>Objective #" + this.current_objective + "</B>: " + explanation );
				cult_mind.memory += "<B>Objective #" + this.current_objective + "</B>: " + explanation + "<BR>";
			}
			return;
		}

		// Function from file: cult.dm
		public void check_numbers(  ) {
			
			if ( this.objectives[this.current_objective] == "convert" && this.cult.len >= this.convert_target && !this.mass_convert ) {
				this.mass_convert = true;
				this.additional_phase();
			}
			return;
		}

		// Function from file: cult.dm
		public void blood_check(  ) {
			this.max_spilled_blood = Num13.MaxInt( this.bloody_floors.len, this.max_spilled_blood );

			if ( this.objectives[this.current_objective] == "bloodspill" && this.bloody_floors.len >= this.spilltarget && !this.spilled_blood ) {
				this.spilled_blood = true;
				this.additional_phase();
			}
			return;
		}

		// Function from file: cult.dm
		public override bool pre_setup(  ) {
			bool _default = false;

			ByTable cultists_possible = null;
			Mind player = null;
			dynamic job = null;
			double cultists_number = 0;
			dynamic cultist = null;

			
			if ( GlobalVars.ticker.mode is GameMode_Mixed ) {
				this.mixed = true;
			}

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}
			cultists_possible = this.get_players_for_role( "cultist" );

			foreach (dynamic _b in Lang13.Enumerate( cultists_possible, typeof(Mind) )) {
				player = _b;
				

				if ( this.mixed && GlobalVars.ticker.mode.modePlayer.Contains( player ) ) {
					cultists_possible.Remove( player );
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.restricted_jobs )) {
					job = _a;
					

					if ( player.assigned_role == job ) {
						cultists_possible.Remove( player );
					}
				}
			}

			foreach (dynamic _c in Lang13.IterateRange( 1, GlobalVars.max_cultists_to_start )) {
				cultists_number = _c;
				

				if ( !( cultists_possible.len != 0 ) ) {
					break;
				}
				cultist = Rand13.PickFromTable( cultists_possible );
				cultists_possible.Remove( cultist );
				this.cult.Add( cultist );
			}
			_default = this.cult.len <= 0;

			if ( _default ) {
				GlobalFuncs.log_admin( "Failed to set-up a round of cult. Couldn't pick any players to be starting cultists." );
				GlobalFuncs.message_admins( "Failed to set-up a round of cult. Couldn't pick any players to be starting cultists." );
			} else {
				GlobalFuncs.log_admin( "Starting a round of cult with " + this.cult.len + " starting cultists." );
				GlobalFuncs.message_admins( "Starting a round of cult with " + this.cult.len + " starting cultists." );

				if ( this.mixed ) {
					GlobalVars.ticker.mode.modePlayer.Add( this.cult );
					GlobalVars.ticker.mode.cult += this.cult;
				}
			}
			return !_default;
		}

		// Function from file: cult.dm
		public override void announce(  ) {
			GlobalFuncs.to_chat( typeof(Game13), "<B>The current game mode is - Cult!</B>" );
			GlobalFuncs.to_chat( typeof(Game13), "<B>Some crewmembers are attempting to start a cult!<BR>\nCultists - complete your objectives. Convert crewmembers to your cause by using the convert rune. Remember - there is no you, there is only the cult.<BR>\nPersonnel - Do not let the cult succeed in its mission. Brainwashing them with the chaplain's bible reverts them to whatever CentCom-allowed faith they had.</B>" );
			return;
		}

	}

}