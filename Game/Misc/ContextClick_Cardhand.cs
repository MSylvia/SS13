// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ContextClick_Cardhand : ContextClick {

		public ContextClick_Cardhand ( Obj_Item to_hold = null ) : base( to_hold ) {
			
		}

		// Function from file: playing_cards.dm
		public override dynamic action( dynamic used_item = null, dynamic user = null, dynamic _params = null ) {
			Obj_Item hand = null;
			dynamic index = null;
			dynamic card = null;
			dynamic C = null;
			dynamic index2 = null;

			hand = this.holder;

			if ( !Lang13.Bool( used_item ) ) {
				index = ( Convert.ToDouble( this.return_clicked_id_by_params( _params ) ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( this.return_clicked_id_by_params( _params ) ) >= ((dynamic)hand).currenthand.len ? ((dynamic)( ((dynamic)hand).currenthand.len )) : this.return_clicked_id_by_params( _params ) ) );
				card = ((dynamic)hand).currenthand[index];
				((dynamic)hand).currenthand.Remove( card );
				((Mob)user).put_in_hands( card );
				hand.update_icon();

				if ( ((dynamic)hand).currenthand.len == 1 ) {
					C = ((dynamic)hand).currenthand[1];
					GlobalFuncs.qdel( hand );
					((Mob)user).put_in_inactive_hand( C );
				}
			} else if ( used_item is Obj_Item_Toy_Singlecard ) {
				index2 = ( Convert.ToDouble( this.return_clicked_id_by_params( _params ) ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( this.return_clicked_id_by_params( _params ) ) >= ((dynamic)hand).currenthand.len ? ((dynamic)( ((dynamic)hand).currenthand.len )) : this.return_clicked_id_by_params( _params ) ) );
				((dynamic)hand).currenthand.Insert( index2, used_item );
				hand.update_icon();
			}
			return null;
		}

		// Function from file: playing_cards.dm
		public override dynamic return_clicked_id( double? x_pos = null, double? y_pos = null ) {
			Obj_Item hand = null;
			int card_distance = 0;
			int starting_card_x = 0;

			hand = this.holder;
			card_distance = 9 - ((dynamic)hand).currenthand.len;
			starting_card_x = ((dynamic)hand).currenthand.len * ( 9 - ((dynamic)hand).currenthand.len ) - 9;

			if ( ( x_pos ??0) < starting_card_x + 7 ) {
				return 1;
			} else {
				return Num13.Floor( ( ( x_pos ??0) - ( starting_card_x + 7 ) ) / card_distance ) + 2;
			}
		}

	}

}