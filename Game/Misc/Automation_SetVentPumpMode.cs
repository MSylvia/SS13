// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_SetVentPumpMode : Automation {

		public dynamic vent_pump = null;
		public dynamic mode = "stabilize";
		public double? vent_type = 0;
		public ByTable modes = new ByTable(new object [] { "stabilize", "purge" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Vent Pump: Mode";
		}

		// Function from file: vent_pump.dm
		public Automation_SetVentPumpMode ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.children = new ByTable(new object [] { null });
			return;
		}

		// Function from file: vent_pump.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			ByTable injector_names = null;
			Obj_Machinery_Atmospherics_Unary_VentPump I = null;
			Obj_Machinery_Atmospherics_Binary_DpVentPump I2 = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["set_mode"] ) ) {
				this.mode = Interface13.Input( "Select a mode to put this pump into.", this.mode, null, null, this.modes, InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_vent_pump"] ) ) {
				injector_names = new ByTable();

				if ( !Lang13.Bool( this.vent_type ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Unary_VentPump) )) {
						I = _a;
						

						if ( !( I.id_tag == null ) && I.frequency == this.parent.frequency ) {
							injector_names.Or( I.id_tag );
						}
					}
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Binary_DpVentPump) )) {
						I2 = _b;
						

						if ( !( I2.id_tag == null ) && I2.frequency == this.parent.frequency ) {
							injector_names.Or( I2.id_tag );
						}
					}
				}
				this.vent_pump = Interface13.Input( "Select a vent:", "Vent Pumps", this.vent_pump, null, injector_names, InputType.Null | InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["toggle_type"] ) ) {
				this.vent_type = !Lang13.Bool( this.vent_type ) ?1:0;
				this.parent.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: vent_pump.dm
		public override string GetText(  ) {
			return new Txt( "Set <a href=\"?src=" ).Ref( this ).str( ";toggle_type=1\">" ).item( ( Lang13.Bool( this.vent_type ) ? "Dual-Port" : "Unary" ) ).str( "</a> vent pump <a href=\"?src=" ).Ref( this ).str( ";set_vent_pump=1\">" ).item( this.fmtString( this.vent_pump ) ).str( "</a> mode to <a href=\"?src=" ).Ref( this ).str( ";set_mode=1\">" ).item( this.mode ).str( "</a>." ).ToString();
		}

		// Function from file: vent_pump.dm
		public override bool process(  ) {
			
			if ( Lang13.Bool( this.vent_pump ) ) {
				this.parent.send_signal( new ByTable().Set( "tag", this.vent_pump ).Set( 2, this.mode ), ( Lang13.Bool( this.vent_type ) ? GlobalVars.RADIO_ATMOSIA : GlobalVars.RADIO_FROM_AIRALARM ) );
			}
			return false;
		}

		// Function from file: vent_pump.dm
		public override void Import( ByTable json = null ) {
			base.Import( json );
			this.vent_pump = json["vent_pump"];
			this.mode = json["mode"];
			this.vent_type = String13.ParseNumber( json["vent_type"] );
			return;
		}

		// Function from file: vent_pump.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["vent_pump"] = this.vent_pump;
			json["mode"] = this.mode;
			json["vent_type"] = this.vent_type;
			return json;
		}

	}

}