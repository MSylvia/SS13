// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Dna : Game_Data {

		public string uni_identity = "";
		public string struc_enzymes = "";
		public string unique_enzymes = "";
		public bool dirtyUI = false;
		public bool dirtySE = false;
		public dynamic SE = new ByTable( 54 );
		public dynamic UI = new ByTable( 13 );
		public dynamic b_type = "A+";
		public string mutantrace = null;
		public dynamic real_name = null;
		public dynamic species = "Human";

		// Function from file: dna2_domutcheck.dm
		public void chicken2vox( dynamic C = null, Dna D = null ) {
			Mob_Living_Carbon_Human_Vox V = null;

			V = new Mob_Living_Carbon_Human_Vox( C.loc );

			if ( D.GetUIState( 11 ) ) {
				V.setGender( GlobalVars.FEMALE );
			} else {
				V.setGender( GlobalVars.MALE );
			}

			if ( Lang13.Bool( C.mind ) ) {
				((Mind)C.mind).transfer_to( V );
			}
			GlobalFuncs.qdel( C );
			return;
		}

		// Function from file: dna2.dm
		public void ready_dna( dynamic character = null ) {
			this.ResetUIFrom( character );
			this.ResetSE();
			this.unique_enzymes = Num13.Md5( character.real_name );
			GlobalVars.reg_dna[this.unique_enzymes] = character.real_name;

			if ( Lang13.Bool( character.species ) ) {
				this.species = character.species.name;
			}
			return;
		}

		// Function from file: dna2.dm
		public void check_integrity( Mob_Living_Carbon_Human character = null ) {
			
			if ( character != null ) {
				
				if ( this.UI.len != 13 ) {
					this.ResetUIFrom( character );
				}

				if ( Lang13.Length( this.struc_enzymes ) != 162 ) {
					this.ResetSE();
				}

				if ( Lang13.Length( this.unique_enzymes ) != 32 ) {
					this.unique_enzymes = Num13.Md5( character.real_name );
				}
			} else {
				
				if ( Lang13.Length( this.uni_identity ) != 39 ) {
					this.uni_identity = "00600200A00E0110148FC01300B0095BD7FD3F4";
				}

				if ( Lang13.Length( this.struc_enzymes ) != 162 ) {
					this.struc_enzymes = "43359156756131E13763334D1C369012032164D4FE4CD61544B6C03F251B6C60A42821D26BA3B0FD6";
				}
			}
			return;
		}

		// Function from file: dna2.dm
		public void UpdateSE(  ) {
			dynamic block = null;

			this.struc_enzymes = "";

			foreach (dynamic _a in Lang13.Enumerate( this.SE )) {
				block = _a;
				
				this.struc_enzymes += GlobalFuncs.EncodeDNABlock( block );
			}
			this.dirtySE = false;
			return;
		}

		// Function from file: dna2.dm
		public void UpdateUI(  ) {
			dynamic block = null;

			this.uni_identity = "";

			foreach (dynamic _a in Lang13.Enumerate( this.UI )) {
				block = _a;
				
				this.uni_identity += GlobalFuncs.EncodeDNABlock( block );
			}
			this.dirtyUI = false;
			return;
		}

		// Function from file: dna2.dm
		public void SetSESubBlock( double? block = null, double? subBlock = null, string newSubBlock = null, bool? defer = null ) {
			defer = defer ?? false;

			dynamic oldBlock = null;
			string newBlock = null;
			double? i = null;

			
			if ( ( block ??0) <= 0 ) {
				return;
			}
			oldBlock = this.GetSEBlock( block );
			newBlock = "";
			i = null;
			i = 1;

			while (( i ??0) <= Lang13.Length( oldBlock )) {
				
				if ( i == subBlock ) {
					newBlock += newSubBlock;
				} else {
					newBlock += String13.SubStr( oldBlock, ((int)( i ??0 )), ((int)( ( i ??0) + 1 )) );
				}
				i++;
			}
			this.SetSEBlock( block, newBlock, defer );
			return;
		}

		// Function from file: dna2.dm
		public string GetSESubBlock( double? block = null, double? subBlock = null ) {
			return String13.SubStr( this.GetSEBlock( block ), ((int)( subBlock ??0 )), ((int)( ( subBlock ??0) + 1 )) );
		}

		// Function from file: dna2.dm
		public void SetSEBlock( double? block = null, string value = null, bool? defer = null ) {
			defer = defer ?? false;

			double nval = 0;

			
			if ( ( block ??0) <= 0 ) {
				return;
			}
			nval = GlobalFuncs.hex2num( value );
			this.SetSEValue( block, nval, defer ); return;
		}

		// Function from file: dna2.dm
		public dynamic GetSEBlock( double? block = null ) {
			return GlobalFuncs.EncodeDNABlock( this.GetSEValue( block ) );
		}

		// Function from file: dna2.dm
		public void SetSEState( dynamic block = null, bool on = false, bool? defer = null ) {
			defer = defer ?? false;

			ByTable BOUNDS = null;
			double val = 0;

			
			if ( Convert.ToDouble( block ) <= 0 ) {
				return;
			}
			BOUNDS = GlobalFuncs.GetDNABounds( block );

			if ( on ) {
				val = Rand13.Int( Convert.ToInt32( BOUNDS[2] ), Convert.ToInt32( BOUNDS[3] ) );
			} else {
				val = Rand13.Int( 1, Convert.ToInt32( BOUNDS[1] ) );
			}
			this.SetSEValue( block, val, defer );
			return;
		}

		// Function from file: dna2.dm
		public bool GetSEState( dynamic block = null ) {
			ByTable BOUNDS = null;
			bool value = false;

			
			if ( Convert.ToDouble( block ) <= 0 ) {
				return false;
			}
			BOUNDS = GlobalFuncs.GetDNABounds( block );
			value = this.GetSEValue( block );
			return ( value ?1:0) >= Convert.ToDouble( BOUNDS[2] );
		}

		// Function from file: dna2.dm
		public int GetSEValueRange( bool block = false, dynamic maxvalue = null ) {
			bool value = false;

			
			if ( ( block ?1:0) <= 0 ) {
				return 0;
			}
			value = this.GetSEValue( block );
			return Num13.Floor( ( value ?1:0) / 4096 * Convert.ToDouble( maxvalue ) + 1 );
		}

		// Function from file: dna2.dm
		public void SetSEValueRange( int? block = null, int value = 0, int maxvalue = 0 ) {
			int range = 0;

			
			if ( ( block ??0) <= 0 ) {
				return;
			}

			if ( !( maxvalue <= 4095 ) ) {
				Task13.Crash( "" + "code/game/dna/dna2.dm" + ":" + 307 + ":Assertion Failed: " + "maxvalue<=4095" );
			}
			range = Num13.Floor( 4095 / maxvalue );

			if ( value != 0 ) {
				this.SetSEValue( block, value * range - Rand13.Int( 1, range - 1 ) );
			}
			return;
		}

		// Function from file: dna2.dm
		public bool GetSEValue( dynamic block = null ) {
			
			if ( Convert.ToDouble( block ) <= 0 ) {
				return false;
			}
			return Lang13.Bool( this.SE[block] );
		}

		// Function from file: dna2.dm
		public void SetSEValue( dynamic block = null, double value = 0, bool? defer = null ) {
			defer = defer ?? false;

			
			if ( Convert.ToDouble( block ) <= 0 ) {
				return;
			}

			if ( !( value >= 0 ) ) {
				Task13.Crash( "" + "code/game/dna/dna2.dm" + ":" + 290 + ":Assertion Failed: " + "value>=0" );
			}

			if ( !( value <= 4095 ) ) {
				Task13.Crash( "" + "code/game/dna/dna2.dm" + ":" + 291 + ":Assertion Failed: " + "value<=4095" );
			}
			this.SE[block] = value;
			this.dirtySE = true;

			if ( !( defer == true ) ) {
				this.UpdateSE();
			}
			return;
		}

		// Function from file: dna2.dm
		public void ResetSE(  ) {
			int? i = null;

			i = null;
			i = 1;

			while (( i ??0) <= 54) {
				this.SetSEValue( i, Rand13.Int( 1, 1024 ), true );
				i++;
			}
			this.UpdateSE();
			return;
		}

		// Function from file: dna2.dm
		public void SetUISubBlock( double? block = null, double? subBlock = null, string newSubBlock = null, bool? defer = null ) {
			defer = defer ?? false;

			dynamic oldBlock = null;
			string newBlock = null;
			double? i = null;

			
			if ( ( block ??0) <= 0 ) {
				return;
			}
			oldBlock = this.GetUIBlock( block );
			newBlock = "";
			i = null;
			i = 1;

			while (( i ??0) <= Lang13.Length( oldBlock )) {
				
				if ( i == subBlock ) {
					newBlock += newSubBlock;
				} else {
					newBlock += String13.SubStr( oldBlock, ((int)( i ??0 )), ((int)( ( i ??0) + 1 )) );
				}
				i++;
			}
			this.SetUIBlock( block, newBlock, defer );
			return;
		}

		// Function from file: dna2.dm
		public string GetUISubBlock( double? block = null, double? subBlock = null ) {
			return String13.SubStr( this.GetUIBlock( block ), ((int)( subBlock ??0 )), ((int)( ( subBlock ??0) + 1 )) );
		}

		// Function from file: dna2.dm
		public void SetUIBlock( double? block = null, string value = null, bool? defer = null ) {
			defer = defer ?? false;

			
			if ( ( block ??0) <= 0 ) {
				return;
			}
			this.SetUIValue( block, GlobalFuncs.hex2num( value ), defer ); return;
		}

		// Function from file: dna2.dm
		public dynamic GetUIBlock( double? block = null ) {
			return GlobalFuncs.EncodeDNABlock( this.GetUIValue( block ) );
		}

		// Function from file: dna2.dm
		public void SetUIState( dynamic block = null, bool on = false, bool? defer = null ) {
			defer = defer ?? false;

			double val = 0;

			
			if ( Convert.ToDouble( block ) <= 0 ) {
				return;
			}

			if ( on ) {
				val = Rand13.Int( 2050, 4095 );
			} else {
				val = Rand13.Int( 1, 2049 );
			}
			this.SetUIValue( block, val, defer );
			return;
		}

		// Function from file: dna2.dm
		public bool GetUIState( dynamic block = null ) {
			
			if ( Convert.ToDouble( block ) <= 0 ) {
				return false;
			}
			return Convert.ToDouble( this.UI[block] ) > 2050;
		}

		// Function from file: dna2.dm
		public int GetUIValueRange( double? block = null, int maxvalue = 0 ) {
			bool value = false;

			
			if ( ( block ??0) <= 0 ) {
				return 0;
			}
			value = this.GetUIValue( block );
			return Num13.Floor( ( value ?1:0) / 4096 * maxvalue + 1 );
		}

		// Function from file: dna2.dm
		public void SetUIValueRange( double? block = null, double? value = null, int maxvalue = 0, bool? defer = null ) {
			defer = defer ?? false;

			double range = 0;

			
			if ( ( block ??0) <= 0 ) {
				return;
			}

			if ( !( maxvalue <= 4095 ) ) {
				Task13.Crash( "" + "code/game/dna/dna2.dm" + ":" + 218 + ":Assertion Failed: " + "maxvalue<=4095" );
			}
			range = 4095 / maxvalue;

			if ( Lang13.Bool( value ) ) {
				this.SetUIValue( block, Num13.Floor( ( value ??0) * range ), defer );
			}
			return;
		}

		// Function from file: dna2.dm
		public bool GetUIValue( dynamic block = null ) {
			
			if ( Convert.ToDouble( block ) <= 0 ) {
				return false;
			}
			return Lang13.Bool( this.UI[block] );
		}

		// Function from file: dna2.dm
		public void SetUIValue( dynamic block = null, double value = 0, bool? defer = null ) {
			defer = defer ?? false;

			
			if ( Convert.ToDouble( block ) <= 0 ) {
				return;
			}

			if ( !( value >= 0 ) ) {
				Task13.Crash( "" + "code/game/dna/dna2.dm" + ":" + 202 + ":Assertion Failed: " + "value>=0" );
			}

			if ( !( value <= 4095 ) ) {
				Task13.Crash( "" + "code/game/dna/dna2.dm" + ":" + 203 + ":Assertion Failed: " + "value<=4095" );
			}
			this.UI[block] = value;
			this.dirtyUI = true;

			if ( !( defer == true ) ) {
				this.UpdateUI();
			}
			return;
		}

		// Function from file: dna2.dm
		public void ResetUIFrom( dynamic character = null ) {
			double? hair = null;
			double? beard = null;

			this.ResetUI( true );

			if ( !Lang13.Bool( character.h_style ) ) {
				character.h_style = "Skinhead";
			}
			hair = GlobalVars.hair_styles_list.Find( character.h_style );

			if ( !Lang13.Bool( character.f_style ) ) {
				character.f_style = "Shaved";
			}
			beard = GlobalVars.facial_hair_styles_list.Find( character.f_style );
			this.SetUIValueRange( 1, Lang13.DoubleNullable( character.r_hair ), 255, true );
			this.SetUIValueRange( 2, Lang13.DoubleNullable( character.g_hair ), 255, true );
			this.SetUIValueRange( 3, Lang13.DoubleNullable( character.b_hair ), 255, true );
			this.SetUIValueRange( 4, Lang13.DoubleNullable( character.r_facial ), 255, true );
			this.SetUIValueRange( 5, Lang13.DoubleNullable( character.g_facial ), 255, true );
			this.SetUIValueRange( 6, Lang13.DoubleNullable( character.b_facial ), 255, true );
			this.SetUIValueRange( 8, Lang13.DoubleNullable( character.r_eyes ), 255, true );
			this.SetUIValueRange( 9, Lang13.DoubleNullable( character.g_eyes ), 255, true );
			this.SetUIValueRange( 10, Lang13.DoubleNullable( character.b_eyes ), 255, true );
			this.SetUIValueRange( 7, 35 - Convert.ToDouble( character.s_tone ), 220, true );
			this.SetUIState( 11, character.gender != GlobalVars.MALE, true );
			this.SetUIValueRange( 13, hair, GlobalVars.hair_styles_list.len, true );
			this.SetUIValueRange( 12, beard, GlobalVars.facial_hair_styles_list.len, true );
			this.UpdateUI();
			return;
		}

		// Function from file: dna2.dm
		public void ResetUI( bool? defer = null ) {
			defer = defer ?? false;

			int? i = null;

			i = null;
			i = 1;

			while (( i ??0) <= 13) {
				
				switch ((int?)( i )) {
					case 7:
						this.SetUIValueRange( 7, Rand13.Int( 1, 220 ), 220, true );
						break;
					default:
						this.UI[i] = Rand13.Int( 0, 4095 );
						break;
				}
				i++;
			}

			if ( !( defer == true ) ) {
				this.UpdateUI();
			}
			return;
		}

		// Function from file: dna2.dm
		public void GiveRandomSE( int? notflags = null, bool? flags = null, int? genetype = null ) {
			notflags = notflags ?? 0;
			flags = flags ?? false;
			genetype = genetype ?? -1;

			this.SetSEState( Rand13.PickFromTable( GlobalFuncs.query_genes( notflags, flags, genetype ) ), true );
			return;
		}

		// Function from file: dna2.dm
		public Dna Clone(  ) {
			Dna new_dna = null;
			int? b = null;

			new_dna = new Dna();
			new_dna.unique_enzymes = this.unique_enzymes;
			new_dna.b_type = this.b_type;
			new_dna.mutantrace = this.mutantrace;
			new_dna.real_name = this.real_name;
			new_dna.species = this.species;
			b = null;
			b = 1;

			while (( b ??0) <= 54) {
				new_dna.SE[b] = this.SE[b];

				if ( ( b ??0) <= 13 ) {
					new_dna.UI[b] = this.UI[b];
				}
				b++;
			}
			new_dna.UpdateUI();
			new_dna.UpdateSE();
			return new_dna;
		}

	}

}