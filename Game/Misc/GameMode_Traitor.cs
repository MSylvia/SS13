// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Traitor : GameMode {

		public string traitor_name = "traitor";
		public int waittime_l = 600;
		public int waittime_h = 1800;
		public int traitors_possible = 4;
		public int traitor_scaling_coeff = 5;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "traitor";
			this.config_tag = "traitor";
			this.restricted_jobs = new ByTable(new object [] { "Cyborg", "Mobile MMI" });
			this.protected_jobs = new ByTable(new object [] { "Security Officer", "Warden", "Detective", "Head of Security", "Captain" });
			this.required_enemies = 1;
			this.recommended_enemies = 4;
		}

		// Function from file: traitor.dm
		public override bool process(  ) {
			Mind traitor_mind = null;
			Objective objective = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.traitors, typeof(Mind) )) {
				traitor_mind = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( traitor_mind.objectives, typeof(Objective) )) {
					objective = _a;
					
					objective.check_completion();
				}
			}
			return false;
		}

		// Function from file: traitor.dm
		public override bool declare_completion( bool? ragin = null ) {
			base.declare_completion( ragin );
			return false;
		}

		// Function from file: traitor.dm
		public override bool post_setup(  ) {
			Mind traitor = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.traitors, typeof(Mind) )) {
				traitor = _a;
				
				this.forge_traitor_objectives( traitor );
				Task13.Schedule( Rand13.Int( 10, 100 ), (Task13.Closure)(() => {
					this.finalize_traitor( traitor );
					this.greet_traitor( traitor );
					return;
				}));
			}
			this.modePlayer.Add( this.traitors );

			if ( !this.mixed ) {
				Task13.Schedule( Rand13.Int( GlobalVars.waittime_l, GlobalVars.waittime_h ), (Task13.Closure)(() => {
					
					if ( !this.mixed ) {
						this.send_intercept();
					}
					return;
				}));
				base.post_setup();
			}
			return true;
		}

		// Function from file: traitor.dm
		public override bool pre_setup(  ) {
			ByTable possible_traitors = null;
			int? num_traitors = null;
			Mind player = null;
			dynamic job = null;
			int? j = null;
			dynamic traitor = null;

			
			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}
			possible_traitors = this.get_players_for_role( "traitor" );

			if ( !( possible_traitors.len != 0 ) ) {
				return false;
			}
			num_traitors = 1;

			if ( GlobalVars.config.traitor_scaling ) {
				num_traitors = Num13.MaxInt( this.required_enemies, Num13.Floor( this.num_players() / GlobalVars.traitor_scaling_coeff ) );
			} else {
				num_traitors = ( this.num_players() <= this.required_enemies ? this.required_enemies : ( this.num_players() >= this.traitors_possible ? this.traitors_possible : this.num_players() ) );
			}

			foreach (dynamic _b in Lang13.Enumerate( possible_traitors, typeof(Mind) )) {
				player = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.restricted_jobs )) {
					job = _a;
					

					if ( player.assigned_role == job ) {
						possible_traitors.Remove( player );
					}
				}
			}

			if ( possible_traitors.len < this.required_enemies ) {
				return false;
			}
			j = null;
			j = 0;

			while (( j ??0) < ( num_traitors ??0)) {
				
				if ( !( possible_traitors.len != 0 ) ) {
					break;
				}
				traitor = Rand13.PickFromTable( possible_traitors );
				this.traitors.Add( traitor );
				traitor.special_role = "traitor";
				possible_traitors.Remove( traitor );
				j++;
			}

			if ( !( this.traitors.len != 0 ) ) {
				return false;
			}
			return true;
		}

		// Function from file: traitor.dm
		public override void announce(  ) {
			GlobalFuncs.to_chat( typeof(Game13), "<B>The current game mode is - Traitor!</B>" );
			GlobalFuncs.to_chat( typeof(Game13), "<B>There is a syndicate traitor on the station. Do not let the traitor succeed!</B>" );
			return;
		}

	}

}