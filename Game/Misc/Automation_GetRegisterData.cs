// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_GetRegisterData : Automation {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Register: Get Data";
			this.returntype = true;
			this.valid_child_returntypes = new ByTable(new object [] { 1 });
		}

		// Function from file: registers.dm
		public Automation_GetRegisterData ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.children = new ByTable(new object [] { null });
			return;
		}

		// Function from file: registers.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			bool new_child = false;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["setfield"] ) ) {
				new_child = this.selectValidChildFor( Task13.User );

				if ( !new_child ) {
					return 1;
				}
				this.children[1] = new_child;
				this.parent.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: registers.dm
		public override string GetText(  ) {
			Automation field = null;
			string _out = null;

			field = this.children[1];
			_out = new Txt( "Value from register: <a href='?src=" ).Ref( this ).str( ";setfield=1'>(Set Field)</a> (" ).ToString();

			if ( field == null ) {
				_out += "-----";
			} else {
				_out += field.GetText();
			}
			_out += ")";
			return _out;
		}

		// Function from file: registers.dm
		public override dynamic Evaluate(  ) {
			dynamic field = null;
			dynamic registerid = null;

			field = this.children[1];
			registerid = ( Convert.ToDouble( field.Evaluate() ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( field.Evaluate() ) >= ( this.parent.register_amount ??0) ? ((dynamic)( this.parent.register_amount )) : field.Evaluate() ) );

			if ( Lang13.Bool( registerid ) ) {
				return this.parent.registers[registerid];
			}
			return 0;
		}

	}

}