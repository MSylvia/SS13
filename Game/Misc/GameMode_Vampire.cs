// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Vampire : GameMode {

		public int prob_int_murder_target = 50;
		public int prob_right_murder_target_l = 25;
		public int prob_right_murder_target_h = 50;
		public int prob_int_item = 50;
		public int prob_right_item_l = 25;
		public int prob_right_item_h = 50;
		public int prob_int_sab_target = 50;
		public int prob_right_sab_target_l = 25;
		public int prob_right_sab_target_h = 50;
		public int prob_right_killer_l = 25;
		public int prob_right_killer_h = 50;
		public int prob_right_objective_l = 25;
		public int prob_right_objective_h = 50;
		public int waittime_l = 600;
		public int waittime_h = 1800;
		public int? vampire_amount = 4;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "vampire";
			this.config_tag = "vampire";
			this.restricted_jobs = new ByTable(new object [] { "AI", "Cyborg", "Mobile MMI", "Security Officer", "Warden", "Detective", "Head of Security", "Captain", "Chaplain" });
			this.protected_jobs = new ByTable();
			this.required_players = 1;
			this.required_players_secret = 10;
			this.required_enemies = 1;
			this.recommended_enemies = 4;
		}

		// Function from file: vampire.dm
		public override bool post_setup(  ) {
			Mind vampire = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.vampires, typeof(Mind) )) {
				vampire = _a;
				
				this.grant_vampire_powers( vampire.current );
				vampire.special_role = "Vampire";
				this.forge_vampire_objectives( vampire );
				this.greet_vampire( vampire );
			}

			if ( !this.mixed ) {
				Task13.Schedule( Rand13.Int( GlobalVars.waittime_l, GlobalVars.waittime_h ), (Task13.Closure)(() => {
					
					if ( !this.mixed ) {
						this.send_intercept();
					}
					return;
				}));
				base.post_setup();
			}
			return false;
		}

		// Function from file: vampire.dm
		public override bool pre_setup(  ) {
			ByTable possible_vampires = null;
			Mind player = null;
			dynamic job = null;
			int? i = null;
			dynamic vampire = null;

			
			if ( GlobalVars.ticker.mode is GameMode_Mixed ) {
				this.mixed = true;
			}

			if ( this.mixed ) {
				this.recommended_enemies = 2;
				this.required_enemies = 1;
			}

			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}
			possible_vampires = this.get_players_for_role( "vampire" );

			foreach (dynamic _b in Lang13.Enumerate( possible_vampires, typeof(Mind) )) {
				player = _b;
				

				if ( this.mixed && GlobalVars.ticker.mode.modePlayer.Contains( player ) ) {
					possible_vampires.Remove( player );
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.restricted_jobs )) {
					job = _a;
					

					if ( player.assigned_role == job ) {
						possible_vampires.Remove( player );
					}
				}
			}
			this.vampire_amount = Num13.MinInt( this.recommended_enemies, Num13.MaxInt( this.required_enemies, Num13.Floor( this.num_players() / 10 ) ) );

			if ( possible_vampires.len > 0 ) {
				i = null;
				i = 0;

				while (( i ??0) < ( this.vampire_amount ??0)) {
					
					if ( !( possible_vampires.len != 0 ) ) {
						break;
					}
					vampire = Rand13.PickFromTable( possible_vampires );
					possible_vampires.Remove( vampire );

					if ( Lang13.Bool( vampire.special_role ) ) {
						
					} else {
						this.vampires.Add( vampire );
						this.modePlayer.Add( this.vampires );
					}
					i++;
				}
				GlobalFuncs.log_admin( "Starting a round of vampire with " + this.vampires.len + " vampires." );
				GlobalFuncs.message_admins( "Starting a round of vampire with " + this.vampires.len + " vampires." );

				if ( this.mixed ) {
					GlobalVars.ticker.mode.modePlayer.Add( this.vampires );
					GlobalVars.ticker.mode.vampires.Add( this.vampires );
				}
				return true;
			} else {
				GlobalFuncs.log_admin( "Failed to set-up a round of vampire. Couldn't find any volunteers to be vampires." );
				GlobalFuncs.message_admins( "Failed to set-up a round of vampire. Couldn't find any volunteers to be vampires." );
				return false;
			}
		}

		// Function from file: vampire.dm
		public override void announce(  ) {
			GlobalFuncs.to_chat( typeof(Game13), "<B>The current game mode is - Vampires!</B>" );
			GlobalFuncs.to_chat( typeof(Game13), "<B>There are Vampires from Space Transylvania on the station, keep your blood close and neck safe!</B>" );
			return;
		}

	}

}