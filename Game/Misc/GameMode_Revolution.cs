// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Revolution : GameMode {

		public int finished = 0;
		public int checkwin_counter = 0;
		public int max_headrevs = 3;
		public int waittime_l = 600;
		public int waittime_h = 1800;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "revolution";
			this.config_tag = "revolution";
			this.restricted_jobs = new ByTable(new object [] { 
				"Security Officer", 
				"Warden", 
				"Detective", 
				"AI", 
				"Cyborg", 
				"Mobile MMI", 
				"Captain", 
				"Head of Personnel", 
				"Head of Security", 
				"Chief Engineer", 
				"Research Director", 
				"Chief Medical Officer", 
				"Internal Affairs Agent"
			 });
			this.required_players = 4;
			this.required_players_secret = 25;
			this.required_enemies = 3;
			this.recommended_enemies = 3;
			this.uplink_welcome = "Revolutionary Uplink Console:";
		}

		// Function from file: revolution.dm
		public override bool declare_completion( bool? ragin = null ) {
			
			if ( this.finished == 1 ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "win - heads killed" );
				this.completion_text = "<br><span class='danger'><FONT size = 3> The heads of staff were killed or abandoned the station! The revolutionaries win!</FONT></span>";
			} else if ( this.finished == 2 ) {
				GlobalFuncs.feedback_set_details( "round_end_result", "loss - rev heads killed" );
				this.completion_text = "<br><span class='danger'><FONT size = 3> The heads of staff managed to stop the revolution!</FONT></span>";
			}
			base.declare_completion( ragin );
			return true;
		}

		// Function from file: revolution.dm
		public bool check_heads_victory(  ) {
			Mind rev_mind = null;
			dynamic T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
				rev_mind = _a;
				
				T = GlobalFuncs.get_turf( rev_mind.current );

				if ( rev_mind != null && Lang13.Bool( rev_mind.current ) && Convert.ToInt32( rev_mind.current.stat ) != 2 && Lang13.Bool( T ) && Lang13.Bool( T.z ) == true ) {
					
					if ( rev_mind.current is Mob_Living_Carbon_Human ) {
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: revolution.dm
		public bool check_rev_victory(  ) {
			Mind rev_mind = null;
			Objective objective = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
				rev_mind = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( rev_mind.objectives, typeof(Objective) )) {
					objective = _a;
					

					if ( !Lang13.Bool( objective.check_completion() ) ) {
						return false;
					}
				}
				return true;
			}
			return false;
		}

		// Function from file: revolution.dm
		public override bool check_finished(  ) {
			
			if ( GlobalVars.config.continous_rounds ) {
				
				if ( this.finished != 0 ) {
					
					if ( GlobalVars.emergency_shuttle != null ) {
						GlobalVars.emergency_shuttle.always_fake_recall = false;
					}
				}
				return base.check_finished();
			}

			if ( this.finished != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: revolution.dm
		public override bool check_win(  ) {
			
			if ( this.check_rev_victory() ) {
				this.finished = 1;
			} else if ( this.check_heads_victory() ) {
				this.finished = 2;
			}
			return false;
		}

		// Function from file: revolution.dm
		public override bool process(  ) {
			this.checkwin_counter++;

			if ( this.checkwin_counter >= 5 ) {
				
				if ( !( this.finished != 0 ) ) {
					((GameMode)GlobalVars.ticker.mode).check_win();
				}
				this.checkwin_counter = 0;
			}
			return false;
		}

		// Function from file: revolution.dm
		public override bool post_setup(  ) {
			ByTable heads = null;
			Mind rev_mind = null;
			Mind head_mind = null;
			Objective_Mutiny rev_obj = null;
			Mind rev_mind2 = null;

			heads = this.get_living_heads();

			foreach (dynamic _b in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
				rev_mind = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( heads, typeof(Mind) )) {
					head_mind = _a;
					
					rev_obj = new Objective_Mutiny();
					rev_obj.owner = rev_mind;
					rev_obj.target = head_mind;
					rev_obj.explanation_text = "Assassinate " + head_mind.name + ", the " + head_mind.assigned_role + ".";
					rev_mind.objectives.Add( rev_obj );
				}
				this.equip_revolutionary( rev_mind.current );
				this.update_rev_icons_added( rev_mind );
			}

			foreach (dynamic _c in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
				rev_mind2 = _c;
				
				this.greet_revolutionary( rev_mind2 );
			}
			this.modePlayer.Add( this.head_revolutionaries );

			if ( GlobalVars.emergency_shuttle != null ) {
				GlobalVars.emergency_shuttle.always_fake_recall = true;
			}
			Task13.Schedule( Rand13.Int( GlobalVars.waittime_l, GlobalVars.waittime_h ), (Task13.Closure)(() => {
				
				if ( !this.mixed ) {
					this.send_intercept();
				}
				return;
			}));
			base.post_setup();
			return false;
		}

		// Function from file: revolution.dm
		public override bool pre_setup(  ) {
			ByTable possible_headrevs = null;
			int head_check = 0;
			Mob_NewPlayer player = null;
			Mind player2 = null;
			dynamic job = null;
			double i = 0;
			dynamic lenin = null;

			
			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}
			possible_headrevs = this.get_players_for_role( "revolutionary" );
			head_check = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				player = _a;
				

				if ( GlobalVars.command_positions.Contains( player.mind.assigned_role ) ) {
					head_check++;
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( possible_headrevs, typeof(Mind) )) {
				player2 = _c;
				

				foreach (dynamic _b in Lang13.Enumerate( this.restricted_jobs )) {
					job = _b;
					

					if ( player2.assigned_role == job ) {
						possible_headrevs.Remove( player2 );
					}
				}
			}

			foreach (dynamic _d in Lang13.IterateRange( 1, this.max_headrevs )) {
				i = _d;
				

				if ( possible_headrevs.len == 0 ) {
					break;
				}
				lenin = Rand13.PickFromTable( possible_headrevs );
				possible_headrevs.Remove( lenin );
				this.head_revolutionaries.Add( lenin );
			}

			if ( this.head_revolutionaries.len == 0 || !( head_check != 0 ) ) {
				GlobalFuncs.log_admin( "Failed to set-up a round of revolution. Couldn't find any heads of staffs or any volunteers to be head revolutionaries." );
				GlobalFuncs.message_admins( "Failed to set-up a round of revolution. Couldn't find any heads of staffs or any volunteers to be head revolutionaries." );
				return false;
			}
			GlobalFuncs.log_admin( "Starting a round of revolution with " + this.head_revolutionaries.len + " head revolutionaries and " + head_check + " heads of staff." );
			GlobalFuncs.message_admins( "Starting a round of revolution with " + this.head_revolutionaries.len + " head revolutionaries and " + head_check + " heads of staff." );
			return true;
		}

		// Function from file: revolution.dm
		public override void announce(  ) {
			GlobalFuncs.to_chat( typeof(Game13), "<B>The current game mode is - Revolution!</B>" );
			GlobalFuncs.to_chat( typeof(Game13), "<B>Some crewmembers are attempting to start a revolution!<BR>\nRevolutionaries - Kill the Captain, HoP, HoS, CE, RD and CMO. Convert other crewmembers (excluding the heads of staff, and security officers) to your cause by flashing them. Protect your leaders.<BR>\nPersonnel - Protect the heads of staff. Kill the leaders of the revolution, and brainwash the other revolutionaries (by beating them in the head).</B>" );
			return;
		}

	}

}