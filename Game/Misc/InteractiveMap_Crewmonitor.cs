// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class InteractiveMap_Crewmonitor : InteractiveMap {

		public ByTable jobs = null;

		// Function from file: crew.dm
		public InteractiveMap_Crewmonitor (  ) {
			ByTable jobs = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			jobs = new ByTable();
			jobs["Captain"] = 0;
			jobs["Head of Personnel"] = 50;
			jobs["Head of Security"] = 10;
			jobs["Warden"] = 11;
			jobs["Security Officer"] = 12;
			jobs["Detective"] = 13;
			jobs["Chief Medical Officer"] = 20;
			jobs["Chemist"] = 21;
			jobs["Geneticist"] = 22;
			jobs["Virologist"] = 23;
			jobs["Medical Doctor"] = 24;
			jobs["Paramedic"] = 25;
			jobs["Research Director"] = 30;
			jobs["Scientist"] = 31;
			jobs["Roboticist"] = 32;
			jobs["Chief Engineer"] = 40;
			jobs["Station Engineer"] = 41;
			jobs["Atmospheric Technician"] = 42;
			jobs["Mechanic"] = 43;
			jobs["Quartermaster"] = 51;
			jobs["Shaft Miner"] = 52;
			jobs["Cargo Technician"] = 53;
			jobs["Bartender"] = 61;
			jobs["Chef"] = 62;
			jobs["Botanist"] = 63;
			jobs["Librarian"] = 64;
			jobs["Chaplain"] = 65;
			jobs["Clown"] = 66;
			jobs["Mime"] = 67;
			jobs["Janitor"] = 68;
			jobs["Internal Affairs Agent"] = 69;
			jobs["Admiral"] = 200;
			jobs["Centcom Commander"] = 210;
			jobs["Emergency Response Team Commander"] = 220;
			jobs["Security Response Officer"] = 221;
			jobs["Engineer Response Officer"] = 222;
			jobs["Medical Response Officer"] = 223;
			jobs["Assistant"] = 999;
			this.jobs = jobs;
			return;
		}

		// Function from file: crew.dm
		public override void sendResources( Client C = null ) {
			base.sendResources( C );
			Interface13.CacheBrowseResource( C, "crewmonitor.js", null );
			Interface13.CacheBrowseResource( C, "crewmonitor.css", null );
			return;
		}

		// Function from file: crew.dm
		public override void queueUpdate( int z = 0 ) {
			Controller_Process_Html html = null;

			html = GlobalVars.processScheduler.getProcess( "html" );
			html.queue( GlobalVars.crewmonitor, "update", z );
			return;
		}

		// Function from file: crew.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob_Living_Silicon_Ai AI = null;
			double? x = null;
			double? y = null;
			Tile tile = null;
			dynamic C = null;
			Ent_Static current_loc = null;
			double? x2 = null;
			double? y2 = null;
			Tile tile2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( hclient is HtmlInterfaceClient ) {
				
				if ( Lang13.Bool( hclient ) && Lang13.Bool( hclient.client ) && Lang13.Bool( hclient.client.mob ) && hclient.client.mob is Mob_Living_Silicon_Ai ) {
					AI = hclient.client.mob;

					dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
					if ( _a=="select_person" ) {
						AI.__CallVerb("track", href_list["name"] );
					} else if ( _a=="select_position" ) {
						x = String13.ParseNumber( href_list["x"] );
						y = String13.ParseNumber( href_list["y"] );
						tile = Map13.GetTile( ((int)( x ??0 )), ((int)( y ??0 )), AI.z );
						C = Lang13.FindIn( typeof(Obj_Machinery_Camera), Map13.FetchInRange( tile, 5 ) );

						if ( !Lang13.Bool( C ) ) {
							C = Lang13.FindIn( typeof(Obj_Machinery_Camera), Map13.FetchInRange( tile, 10 ) );
						}

						if ( !Lang13.Bool( C ) ) {
							C = Lang13.FindIn( typeof(Obj_Machinery_Camera), Map13.FetchInRange( tile, 15 ) );
						}

						if ( Lang13.Bool( C ) ) {
							current_loc = AI.eyeobj.loc;
							Task13.Schedule( Num13.MinInt( 30, ((int)( Map13.GetDistance( GlobalFuncs.get_turf( C ), AI.eyeobj ) / 4 )) ), (Task13.Closure)(() => {
								
								if ( AI != null && AI.eyeobj != null && current_loc == AI.eyeobj.loc ) {
									AI.switchCamera( C );
								}
								return;
							}));
						}
					} else if ( _a=="crewclick" ) {
						x2 = String13.ParseNumber( href_list["x"] );
						y2 = String13.ParseNumber( href_list["y"] );
						tile2 = Map13.GetTile( ((int)( x2 ??0 )), ((int)( y2 ??0 )), AI.z );

						if ( tile2 != null ) {
							AI.eyeobj.forceMove( tile2 );
						}
					}
				}
			}
			return null;
		}

		// Function from file: crew.dm
		public override bool hiIsValidClient( dynamic hclient = null, dynamic hi = null ) {
			return base.hiIsValidClient( (object)(hclient), (object)(hi) ) && ((Mob)hclient.client.mob).html_mob_check( typeof(Obj_Machinery_Computer_Crew) );
		}

		// Function from file: crew.dm
		public override void update( dynamic z = null, bool? ignore_unused = null, Obj_Machinery_Camera single = null, int? adding = null ) {
			ignore_unused = ignore_unused ?? GlobalVars.FALSE;

			HtmlInterface hi = null;
			ByTable results = null;
			dynamic U = null;
			dynamic I = null;
			dynamic pos = null;
			int ijob = 0;
			string name = null;
			dynamic assignment = null;
			double? dam1 = null;
			double? dam2 = null;
			double? dam3 = null;
			double? dam4 = null;
			string area = null;
			int? pos_x = null;
			int? pos_y = null;
			double? see_pos_x = null;
			double? see_pos_y = null;
			string life_status = null;
			Mob_Living_Carbon_Human H = null;
			dynamic player_area = null;
			Mob_Living_Carbon_Brain B = null;
			Ent_Static M = null;
			dynamic parea = null;

			
			if ( Lang13.Bool( this.interfaces["" + z] ) ) {
				hi = this.interfaces["" + z];

				if ( ignore_unused == true || hi.isUsed() == true ) {
					results = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
						H = _a;
						

						if ( H.iscorpse ) {
							continue;
						}

						if ( ( H.z == 0 || H.z == z ) && H.w_uniform is Obj_Item_Clothing_Under ) {
							U = H.w_uniform;

							if ( U.has_sensor != 0 && Lang13.Bool( U.sensor_mode ) ) {
								pos = ( H.z == 0 || Convert.ToInt32( U.sensor_mode ) == 3 ? GlobalFuncs.get_turf( H ) : null );

								if ( H.z == 0 && ( !Lang13.Bool( pos ) || pos.z != z ) ) {
									continue;
								}
								I = ( Lang13.Bool( H.wear_id ) ? ((Obj_Item)H.wear_id).GetID() : null );

								if ( Lang13.Bool( I ) ) {
									name = I.registered_name;
									assignment = I.assignment;
									ijob = Convert.ToInt32( this.jobs[I.rank] );
								} else {
									name = "<i>Unknown</i>";
									assignment = "";
									ijob = 80;
								}

								if ( Convert.ToDouble( U.sensor_mode ) >= 1 ) {
									life_status = ( !Lang13.Bool( H.stat ) ? "true" : "false" );
								} else {
									life_status = null;
								}

								if ( Convert.ToDouble( U.sensor_mode ) >= 2 ) {
									dam1 = Num13.Round( Convert.ToDouble( H.getOxyLoss() ), 1 );
									dam2 = Num13.Round( Convert.ToDouble( H.getToxLoss() ), 1 );
									dam3 = Num13.Round( H.getFireLoss(), 1 );
									dam4 = Num13.Round( H.getBruteLoss(), 1 );
								} else {
									dam1 = null;
									dam2 = null;
									dam3 = null;
									dam4 = null;
								}

								if ( Convert.ToDouble( U.sensor_mode ) >= 3 ) {
									
									if ( !Lang13.Bool( pos ) ) {
										pos = GlobalFuncs.get_turf( H );
									}
									player_area = GlobalFuncs.get_area( H );
									area = GlobalFuncs.format_text( player_area.name );
									pos_x = Lang13.IntNullable( pos.x );
									pos_y = Lang13.IntNullable( pos.y );
									see_pos_x = Lang13.DoubleNullable( pos.x - GlobalVars.WORLD_X_OFFSET[z] );
									see_pos_y = Lang13.DoubleNullable( pos.y - GlobalVars.WORLD_Y_OFFSET[z] );
								} else {
									area = null;
									pos_x = null;
									pos_y = null;
									see_pos_x = null;
									see_pos_y = null;
								}
								results[++results.len] = new ByTable(new object [] { name, assignment, ijob, life_status, dam1, dam2, dam3, dam4, area, pos_x, pos_y, H.monitor_check(), see_pos_x, see_pos_y });
							}
						}
					}

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Brain) )) {
						B = _b;
						
						M = B.loc;
						pos = GlobalFuncs.get_turf( B );

						if ( Lang13.Bool( pos ) && Convert.ToInt32( pos.z ) != 2 && pos.z == z && M is Obj_Item_Device_Mmi && ((dynamic)M).brainmob == B && !( M.loc is Mob_Living_Silicon_Robot ) ) {
							parea = GlobalFuncs.get_area( B );
							area = GlobalFuncs.format_text( parea.name );
							see_pos_x = Lang13.DoubleNullable( pos.x - GlobalVars.WORLD_X_OFFSET[z] );
							see_pos_y = Lang13.DoubleNullable( pos.y - GlobalVars.WORLD_Y_OFFSET[z] );
							results[++results.len] = new ByTable(new object [] { M.name, "MMI", 80, ( Lang13.Bool( B.stat ) || !Lang13.Bool( B.key ) ? "false" : "true" ), null, null, null, null, area, pos.x, pos.y, 1, see_pos_x, see_pos_y });
						}
					}
					this.data = results;
					this.updateFor( null, hi, z );
				}
			}
			return;
		}

		// Function from file: crew.dm
		public override void updateFor( dynamic hclient_or_mob = null, HtmlInterface hi = null, dynamic z = null, Obj_Machinery_Camera single = null ) {
			base.updateFor( (object)(hclient_or_mob), hi, (object)(z), single );
			return;
		}

		// Function from file: crew.dm
		public override void show( dynamic mob = null, dynamic z = null, HtmlInterface currui = null ) {
			HtmlInterface hi = null;

			
			if ( !Lang13.Bool( z ) ) {
				z = mob.z;
			}

			if ( z == 2 ) {
				return;
			}

			if ( Convert.ToDouble( z ) > 0 && this.interfaces != null ) {
				
				if ( !Lang13.Bool( this.interfaces["" + z] ) ) {
					this.interfaces["" + z] = new HtmlInterface_Nanotrasen( this, "Crew Monitoring", 900, 800, "" + "<script type=\"text/javascript\" src=\"3-jquery.timers.js\"></script><script type=\"text/javascript\" src=\"libraries.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"html_interface_icons.css\" /><link rel=\"stylesheet\" type=\"text/css\" href=\"map_shared.css\" /><script type=\"text/javascript\" src=\"map_shared.js\">" + " <link rel=\"stylesheet\" type=\"text/css\" href=\"crewmonitor.css\" /></script><script type=\"text/javascript\">var z = " + z + "; var tile_size = " + Game13.icon_size + "; var maxx = " + Game13.map_size_x + "; var maxy = " + Game13.map_size_y + ";</script><script type=\"text/javascript\" src=\"crewmonitor.js\"></script>" );
					hi = this.interfaces["" + z];
					hi.updateContent( "content", "<div id='switches'><a href=\"javascript:switchTo(0);\">Switch to mini map</a> <a href=\"javascript:switchTo(1);\">Switch to text-based</a> <a href='javascript:changezlevels();'>Change Z-Level</a> </div><div id=\"uiMapContainer\"><div id=\"uiMap\" unselectable=\"on\"></div></div><div id=\"textbased\"></div>" );
					this.update( z, GlobalVars.TRUE );
				} else {
					hi = this.interfaces["" + z];
					this.update( z, GlobalVars.TRUE );
				}
				hi = this.interfaces["" + z];
				hi.show( mob, currui );
				this.updateFor( mob, hi, z );
			}
			return;
		}

	}

}