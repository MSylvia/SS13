// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Species : Game_Data {

		public string name = null;
		public string icobase = "icons/mob/human_races/r_human.dmi";
		public string deform = "icons/mob/human_races/r_def_human.dmi";
		public string override_icon = null;
		public string eyes = "eyes_s";
		public Type primitive = null;
		public string tail = null;
		public string language = "Galactic Common";
		public string default_language = "Galactic Common";
		public string attack_verb = "punch";
		public int punch_damage = 0;
		public int punch_throw_range = 0;
		public bool punch_throw_speed = true;
		public dynamic mutantrace = null;
		public string breath_type = "oxygen";
		public Type survival_gear = typeof(Obj_Item_Weapon_Storage_Box_Survival);
		public double cold_level_1 = 260;
		public int cold_level_2 = 200;
		public int cold_level_3 = 120;
		public double heat_level_1 = 360;
		public double heat_level_2 = 400;
		public double heat_level_3 = 1000;
		public int fireloss_mult = 1;
		public int darksight = 2;
		public double throw_mult = 1;
		public double hazard_high_pressure = 550;
		public double warning_high_pressure = 325;
		public double warning_low_pressure = 50;
		public double hazard_low_pressure = 20;
		public double pressure_resistance = 0;
		public dynamic brute_resist = null;
		public dynamic burn_resist = null;
		public int brute_mod = 0;
		public double burn_mod = 0;
		public double body_temperature = 310.41;
		public double? max_hurt_damage = 5;
		public ByTable default_mutations = new ByTable();
		public ByTable default_blocks = new ByTable();
		public ByTable default_block_names = new ByTable();
		public int flags = 0;
		public int chem_flags = 0;
		public ByTable abilities = new ByTable();
		public string blood_color = "#A10808";
		public string flesh_color = "#FFC896";
		public dynamic base_color = null;
		public string uniform_icons = "icons/mob/uniform.dmi";
		public string fat_uniform_icons = "icons/mob/uniform_fat.dmi";
		public string gloves_icons = "icons/mob/hands.dmi";
		public string glasses_icons = "icons/mob/eyes.dmi";
		public string ears_icons = "icons/mob/ears.dmi";
		public string shoes_icons = "icons/mob/feet.dmi";
		public string head_icons = "icons/mob/head.dmi";
		public string belt_icons = "icons/mob/belt.dmi";
		public string wear_suit_icons = "icons/mob/suit.dmi";
		public string wear_mask_icons = "icons/mob/mask.dmi";
		public string back_icons = "icons/mob/back.dmi";
		public bool race_key = false;
		public dynamic icon_template = null;
		public ByTable has_organ = new ByTable()
											.Set( "heart", typeof(Organ_Internal_Heart) )
											.Set( "lungs", typeof(Organ_Internal_Lungs) )
											.Set( "liver", typeof(Organ_Internal_Liver) )
											.Set( "kidneys", typeof(Organ_Internal_Kidney) )
											.Set( "brain", typeof(Organ_Internal_Brain) )
											.Set( "appendix", typeof(Organ_Internal_Appendix) )
											.Set( "eyes", typeof(Organ_Internal_Eyes) )
										;
		public bool has_mutant_race = true;
		public int move_speed_mod = 0;
		public bool can_be_hypothermic = true;
		public bool has_sweat_glands = true;

		// Function from file: species.dm
		public virtual void equip( Mob_Living_Carbon_Human H = null ) {
			return;
		}

		// Function from file: species.dm
		public void handle_death( dynamic H = null ) {
			return;
		}

		// Function from file: species.dm
		public virtual string makeName( string gender = null, dynamic C = null ) {
			
			if ( gender == GlobalVars.FEMALE ) {
				return GlobalFuncs.capitalize( Rand13.PickFromTable( GlobalVars.first_names_female ) ) + " " + GlobalFuncs.capitalize( Rand13.PickFromTable( GlobalVars.last_names ) );
			} else {
				return GlobalFuncs.capitalize( Rand13.PickFromTable( GlobalVars.first_names_male ) ) + " " + GlobalFuncs.capitalize( Rand13.PickFromTable( GlobalVars.last_names ) );
			}
		}

		// Function from file: species.dm
		public virtual bool handle_breath( dynamic breath = null, Mob_Living_Carbon_Human H = null ) {
			double safe_oxygen_min = 0;
			double safe_co2_max = 0;
			double safe_toxins_max = 0;
			double safe_toxins_mask = 0;
			double SA_para_min = 0;
			double SA_sleep_min = 0;
			dynamic oxygen_used = null;
			dynamic nitrogen_used = null;
			dynamic breath_pressure = null;
			double vox_oxygen_max = 0;
			dynamic O2_pp = null;
			dynamic Toxins_pp = null;
			dynamic CO2_pp = null;
			dynamic Nitrogen_pp = null;
			double ratio = 0;
			double ratio2 = 0;
			int oxy_restored = 0;
			dynamic ratio3 = null;
			dynamic ratio4 = null;
			Gas_SleepingAgent SA = null;
			double SA_pp = 0;

			safe_oxygen_min = 16;
			safe_co2_max = 10;
			safe_toxins_max = 0.5;
			safe_toxins_mask = 5;
			SA_para_min = 1;
			SA_sleep_min = 5;
			oxygen_used = 0;
			nitrogen_used = 0;
			breath_pressure = ((GasMixture)breath).f_total_moles() * breath.temperature * 8.314 / 0.5;
			vox_oxygen_max = 1;
			O2_pp = breath.oxygen / ((GasMixture)breath).f_total_moles() * breath_pressure;
			Toxins_pp = breath.toxins / ((GasMixture)breath).f_total_moles() * breath_pressure;
			CO2_pp = breath.carbon_dioxide / ((GasMixture)breath).f_total_moles() * breath_pressure;
			Nitrogen_pp = breath.nitrogen / ((GasMixture)breath).f_total_moles() * breath_pressure;

			if ( Convert.ToDouble( O2_pp ) < safe_oxygen_min && this.name != "Vox" ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						H.emote( "gasp" );
						return;
					}));
				}

				if ( Convert.ToDouble( O2_pp ) > 0 ) {
					ratio = safe_oxygen_min / Convert.ToDouble( O2_pp );
					H.adjustOxyLoss( Num13.MinInt( ((int)( ratio * 5 )), 1 ) );
					H.failed_last_breath = true;
					oxygen_used = breath.oxygen * ratio / 6;
				} else {
					H.adjustOxyLoss( 1 );
					H.failed_last_breath = true;
				}
				H.oxygen_alert = Num13.MaxInt( H.oxygen_alert, 1 );
			} else if ( Convert.ToDouble( Nitrogen_pp ) < safe_oxygen_min && this.name == "Vox" ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						H.emote( "gasp" );
						return;
					}));
				}

				if ( Convert.ToDouble( Nitrogen_pp ) > 0 ) {
					ratio2 = safe_oxygen_min / Convert.ToDouble( Nitrogen_pp );
					H.adjustOxyLoss( Num13.MinInt( ((int)( ratio2 * 5 )), 1 ) );
					H.failed_last_breath = true;
					nitrogen_used = breath.nitrogen * ratio2 / 6;
				} else {
					H.adjustOxyLoss( 1 );
					H.failed_last_breath = true;
				}
				H.oxygen_alert = Num13.MaxInt( H.oxygen_alert, 1 );
			} else {
				H.failed_last_breath = false;
				oxy_restored = 5;

				if ( GlobalVars.hardcore_mode && Lang13.Bool( H.ckey ) && H.client != null ) {
					
					if ( H.nutrition < 60 ) {
						oxy_restored = 1;
					}
				}
				H.adjustOxyLoss( -oxy_restored );
				oxygen_used = breath.oxygen / 6;
				H.oxygen_alert = 0;
			}
			breath.oxygen -= oxygen_used;
			breath.nitrogen -= nitrogen_used;
			breath.carbon_dioxide += oxygen_used;

			if ( Convert.ToDouble( CO2_pp ) > safe_co2_max ) {
				
				if ( !( H.co2overloadtime != 0 ) ) {
					H.co2overloadtime = Game13.time;
				} else if ( Game13.time - H.co2overloadtime > 120 ) {
					H.Paralyse( 3 );
					H.adjustOxyLoss( 3 );

					if ( Game13.time - H.co2overloadtime > 300 ) {
						H.adjustOxyLoss( 8 );
					}
				}

				if ( Rand13.PercentChance( 20 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						H.emote( "cough" );
						return;
					}));
				}
			} else {
				H.co2overloadtime = 0;
			}

			if ( Convert.ToDouble( Toxins_pp ) > safe_toxins_max ) {
				ratio3 = breath.toxins / safe_toxins_max * 10;

				if ( Lang13.Bool( H.wear_mask ) ) {
					
					if ( Lang13.Bool( H.wear_mask.flags & 8192 ) ) {
						
						if ( Convert.ToDouble( breath.toxins ) > safe_toxins_mask ) {
							ratio3 = breath.toxins / safe_toxins_mask * 10;
						} else {
							ratio3 = 0;
						}
					}
				}

				if ( Lang13.Bool( ratio3 ) ) {
					
					if ( Lang13.Bool( H.reagents ) ) {
						((Reagents)H.reagents).add_reagent( "plasma", ( Convert.ToDouble( ratio3 ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( ratio3 ) >= 10 ? ((dynamic)( 10 )) : ratio3 ) ) );
					}
					H.toxins_alert = Num13.MaxInt( H.toxins_alert, 1 );
				}
			} else if ( Convert.ToDouble( O2_pp ) > vox_oxygen_max && this.name == "Vox" ) {
				ratio4 = breath.oxygen / vox_oxygen_max * 1000;
				H.adjustToxLoss( ( Convert.ToDouble( ratio4 ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( ratio4 ) >= 10 ? ((dynamic)( 10 )) : ratio4 ) ) );
				H.toxins_alert = Num13.MaxInt( H.toxins_alert, 1 );
			} else {
				H.toxins_alert = 0;
			}

			if ( breath.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( breath.trace_gases, typeof(Gas_SleepingAgent) )) {
					SA = _a;
					
					SA_pp = ( SA.moles ??0) / Convert.ToDouble( ((GasMixture)breath).f_total_moles() ) * Convert.ToDouble( breath_pressure );

					if ( SA_pp > SA_para_min ) {
						H.Paralyse( 3 );

						if ( SA_pp > SA_sleep_min ) {
							H.sleeping = Num13.MinInt( H.sleeping + 2, 10 );
						}
					} else if ( SA_pp > 0.15 ) {
						
						if ( Rand13.PercentChance( 20 ) ) {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								H.emote( Rand13.Pick(new object [] { "giggle", "laugh" }) );
								return;
							}));
						}
					}
					SA.moles = 0;
				}
			}

			if ( Convert.ToDouble( breath.temperature - 310.41 ) > 50 && !H.mutations.Contains( 106 ) ) {
				
				if ( ( H.status_flags & 4096 ) != 0 ) {
					return true;
				} else if ( Convert.ToDouble( breath.temperature ) > this.heat_level_1 ) {
					
					if ( Rand13.PercentChance( 20 ) ) {
						
						if ( H.dna.mutantrace == "slime" ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You feel supercharged by the extreme heat!</span>" );
						} else {
							GlobalFuncs.to_chat( H, "<span class='warning'>You feel your face burning and a searing heat in your lungs!</span>" );
						}
					}
				}

				if ( H.dna.mutantrace == "slime" ) {
					
					if ( Convert.ToDouble( breath.temperature ) < this.cold_level_1 ) {
						H.adjustToxLoss( Num13.Floor( this.cold_level_1 - Convert.ToDouble( breath.temperature ) ) );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 1 );
					}
				}

				if ( H.dna.mutantrace != "slime" ) {
					
					dynamic _b = breath.temperature; // Was a switch-case, sorry for the mess.
					if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 3, "fire", "head", null, null, null, "Excessive Cold" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 1 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 2, "fire", "head", null, null, null, "Excessive Heat" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 2 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 4, "fire", "head", null, null, null, "Excessive Heat" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 2 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 8, "fire", "head", null, null, null, "Excessive Heat" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 2 );
					}
				}
			}
			return true;
		}

		// Function from file: species.dm
		public void handle_post_spawn( Mob_Living_Carbon_Human H = null ) {
			return;
		}

		// Function from file: species.dm
		public void create_organs( Mob_Living_Carbon_Human H = null ) {
			dynamic organ = null;
			dynamic organ_type = null;
			dynamic name = null;
			Organ_External O = null;
			Organ_External E = null;
			Organ_Internal I = null;

			H.organs = new ByTable();
			H.organs_by_name["chest"] = new Organ_External_Chest();
			H.organs_by_name["groin"] = new Organ_External_Groin( H.organs_by_name["chest"] );
			H.organs_by_name["head"] = new Organ_External_Head( H.organs_by_name["chest"] );
			H.organs_by_name["l_arm"] = new Organ_External_LArm( H.organs_by_name["chest"] );
			H.organs_by_name["r_arm"] = new Organ_External_RArm( H.organs_by_name["chest"] );
			H.organs_by_name["r_leg"] = new Organ_External_RLeg( H.organs_by_name["groin"] );
			H.organs_by_name["l_leg"] = new Organ_External_LLeg( H.organs_by_name["groin"] );
			H.organs_by_name["l_hand"] = new Organ_External_LHand( H.organs_by_name["l_arm"] );
			H.organs_by_name["r_hand"] = new Organ_External_RHand( H.organs_by_name["r_arm"] );
			H.organs_by_name["l_foot"] = new Organ_External_LFoot( H.organs_by_name["l_leg"] );
			H.organs_by_name["r_foot"] = new Organ_External_RFoot( H.organs_by_name["r_leg"] );
			H.internal_organs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.has_organ )) {
				organ = _a;
				
				organ_type = this.has_organ[organ];
				H.internal_organs_by_name[organ] = Lang13.Call( organ_type, H );
			}

			foreach (dynamic _b in Lang13.Enumerate( H.organs_by_name )) {
				name = _b;
				
				H.organs.Add( H.organs_by_name[name] );
			}

			foreach (dynamic _c in Lang13.Enumerate( H.organs, typeof(Organ_External) )) {
				O = _c;
				
				O.owner = H;
			}

			if ( ( this.flags & 16384 ) != 0 ) {
				
				foreach (dynamic _d in Lang13.Enumerate( H.organs, typeof(Organ_External) )) {
					E = _d;
					

					if ( ( E.status & 1 ) != 0 || ( E.status & 64 ) != 0 ) {
						continue;
					}
					E.status |= 128;
				}

				foreach (dynamic _e in Lang13.Enumerate( H.internal_organs, typeof(Organ_Internal) )) {
					I = _e;
					
					I.mechanize();
				}
			}
			return;
		}

		// Function from file: species.dm
		public virtual bool handle_speech( dynamic speech = null, Mob_Living_Carbon_Human H = null ) {
			dynamic gene_type = null;
			Dna_Gene gene = null;

			
			if ( H.dna != null ) {
				
				if ( Lang13.Length( speech.message ) >= 2 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( H.active_genes )) {
						gene_type = _a;
						
						gene = GlobalVars.dna_genes[gene_type];

						if ( !Lang13.Bool( gene.block ) ) {
							continue;
						}

						if ( Lang13.Bool( gene.OnSay( H, speech ) ) ) {
							return false;
						}
					}
				}
			}
			return true;
		}

	}

}