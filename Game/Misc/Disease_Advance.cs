// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Disease_Advance : Disease {

		public ByTable symptoms = new ByTable();
		public string id = "";
		public bool processing = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Unknown";
			this.desc = "An engineered disease which can contain a multitude of symptoms.";
			this.form = "Advance Disease";
			this.agent = "advance microbes";
			this.max_stages = 5;
			this.spread = "Unknown";
			this.affected_species = new ByTable(new object [] { "Human", "Monkey" });
		}

		// Function from file: advance.dm
		public Disease_Advance ( bool? process = null, Disease_Advance D = null ) : base( process, D ) {
			process = process ?? true;

			dynamic symp = null;
			dynamic S = null;
			Symptom S2 = null;

			
			if ( !( GlobalVars.dictionary_symptoms.len != 0 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.list_symptoms )) {
					symp = _a;
					
					S = Lang13.Call( symp );
					GlobalVars.dictionary_symptoms[S.id] = symp;
				}
			}

			if ( !( D is Disease_Advance ) ) {
				D = null;
			}

			if ( !( this.symptoms != null ) || !( this.symptoms.len != 0 ) ) {
				
				if ( !( D != null ) || !( D.symptoms != null ) || !( D.symptoms.len != 0 ) ) {
					this.symptoms = this.GenerateSymptoms();
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( D.symptoms, typeof(Symptom) )) {
						S2 = _b;
						
						this.symptoms.Add( Lang13.Call( S2.type ) );
					}
				}
			}
			this.Refresh();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: advance.dm
		public void RemoveSymptom( dynamic S = null ) {
			this.symptoms.Remove( S );
			return;
		}

		// Function from file: advance.dm
		public void AddSymptom( dynamic S = null ) {
			
			if ( this.HasSymptom( S ) ) {
				return;
			}

			if ( this.symptoms.len < Rand13.Int( -1, 1 ) + 5 ) {
				this.symptoms.Add( S );
			} else {
				this.RemoveSymptom( Rand13.PickFromTable( this.symptoms ) );
				this.symptoms.Add( S );
			}
			return;
		}

		// Function from file: advance.dm
		public string GetDiseaseID(  ) {
			dynamic L = null;
			Symptom S = null;
			string result = null;

			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.symptoms, typeof(Symptom) )) {
				S = _a;
				
				L += S.id;
			}
			L = GlobalFuncs.sortList( L );
			result = GlobalFuncs.list2text( L, ":" );
			this.id = result;
			return result;
		}

		// Function from file: advance.dm
		public void AssignName( dynamic name = null ) {
			name = name ?? "Unknown";

			this.name = name;
			return;
		}

		// Function from file: advance.dm
		public void Devolve(  ) {
			dynamic s = null;

			
			if ( this.symptoms.len > 1 ) {
				s = GlobalFuncs.safepick( this.symptoms );

				if ( Lang13.Bool( s ) ) {
					this.RemoveSymptom( s );
					this.Refresh( true );
				}
			}
			return;
		}

		// Function from file: advance.dm
		public void Evolve( int? level = null ) {
			level = level ?? 2;

			dynamic s = null;

			s = GlobalFuncs.safepick( this.GenerateSymptoms( level, true ) );

			if ( Lang13.Bool( s ) ) {
				this.AddSymptom( s );
				this.Refresh( true );
			}
			return;
		}

		// Function from file: advance.dm
		public void GenerateCure( ByTable properties = null ) {
			properties = properties ?? new ByTable();

			int res = 0;
			dynamic D = null;

			
			if ( properties != null && properties.len != 0 ) {
				res = ( Convert.ToDouble( properties["resistance"] - this.symptoms.len / 2 ) <= 1 ? 1 : ( Convert.ToDouble( properties["resistance"] - this.symptoms.len / 2 ) >= GlobalVars.advance_cures.len ? GlobalVars.advance_cures.len : Convert.ToInt32( properties["resistance"] - this.symptoms.len / 2 ) ) );
				this.cure_id = GlobalVars.advance_cures[res];
				D = GlobalVars.chemical_reagents_list[this.cure_id];
				this.cure = D.name;
			}
			return;
		}

		// Function from file: advance.dm
		public void SetSeverity( dynamic level_sev = null ) {
			
			dynamic _a = level_sev; // Was a switch-case, sorry for the mess.
			if ( Double.NegativeInfinity<=_a&&_a<=0 ) {
				this.severity = "Non-Threat";
			} else if ( 5<=_a&&_a<=Double.PositiveInfinity ) {
				this.severity = "BIOHAZARD THREAT!";
			} else if ( _a==1 ) {
				this.severity = "Minor";
			} else if ( _a==2 ) {
				this.severity = "Medium";
			} else if ( _a==3 ) {
				this.severity = "Harmful";
			} else if ( _a==4 ) {
				this.severity = "Dangerous!";
			} else {
				this.severity = "Unknown";
			}
			return;
		}

		// Function from file: advance.dm
		public void SetSpread( int spread_id = 0 ) {
			
			switch ((int)( spread_id )) {
				case 0:
					this.spread = "None";
					break;
				case -1:
					this.spread = "None";
					break;
				case 4:
				case 3:
				case 2:
					this.spread = "On contact";
					break;
				case 5:
					this.spread = "Airborne";
					break;
				case 1:
					this.spread = "Blood";
					break;
			}
			this.spread_type = spread_id;
			return;
		}

		// Function from file: advance.dm
		public void AssignProperties( ByTable properties = null ) {
			properties = properties ?? new ByTable();

			
			if ( properties != null && properties.len != 0 ) {
				this.hidden = new ByTable(new object [] { Convert.ToDouble( properties["stealth"] ) > 2, Convert.ToDouble( properties["stealth"] ) > 3 });
				this.SetSpread( ( Convert.ToDouble( properties["transmittable"] - this.symptoms.len ) <= 1 ? 1 : ( Convert.ToDouble( properties["transmittable"] - this.symptoms.len ) >= 5 ? 5 : Convert.ToInt32( properties["transmittable"] - this.symptoms.len ) ) ) );
				this.permeability_mod = Num13.MaxInt( GlobalFuncs.Ceiling( properties["transmittable"] * 0.4 ), 1 );
				this.cure_chance = 15 - ( Convert.ToDouble( properties["resistance"] ) <= -5 ? -5 : ( Convert.ToDouble( properties["resistance"] ) >= 5 ? 5 : Convert.ToInt32( properties["resistance"] ) ) );
				this.stage_prob = Num13.MaxInt( Convert.ToInt32( properties["stage_rate"] ), 2 );
				this.SetSeverity( properties["severity"] );
				this.GenerateCure( properties );
			} else {
				Task13.Crash( "Our properties were empty or null!" );
			}
			return;
		}

		// Function from file: advance.dm
		public ByTable GenerateProperties(  ) {
			ByTable properties = null;
			Symptom S = null;

			
			if ( !( this.symptoms != null ) || !( this.symptoms.len != 0 ) ) {
				Task13.Crash( "We did not have any symptoms before generating properties." );
				return null;
			}
			properties = new ByTable().Set( "resistance", 1 ).Set( "stealth", 1 ).Set( "stage_rate", 1 ).Set( "transmittable", 1 ).Set( "severity", 1 );

			foreach (dynamic _a in Lang13.Enumerate( this.symptoms, typeof(Symptom) )) {
				S = _a;
				
				properties["resistance"] += S.resistance;
				properties["stealth"] += S.stealth;
				properties["stage_rate"] += S.stage_speed;
				properties["transmittable"] += S.transmittable;
				properties["severity"] = Num13.MaxInt( Convert.ToInt32( properties["severity"] ), S.level );
			}
			return properties;
		}

		// Function from file: advance.dm
		public void Refresh( bool? new_name = null ) {
			new_name = new_name ?? false;

			ByTable properties = null;
			dynamic A = null;

			properties = this.GenerateProperties();
			this.AssignProperties( properties );

			if ( !Lang13.Bool( GlobalVars.archive_diseases[this.GetDiseaseID()] ) ) {
				
				if ( new_name == true ) {
					this.AssignName();
				}
				GlobalVars.archive_diseases[this.GetDiseaseID()] = this;
				GlobalVars.archive_diseases[this.GetDiseaseID()] = new Disease_Advance( false, this );
			}
			A = GlobalVars.archive_diseases[this.GetDiseaseID()];
			this.AssignName( A.name );
			return;
		}

		// Function from file: advance.dm
		public ByTable GenerateSymptoms( int? type_level_limit = null, bool? amount_get = null ) {
			type_level_limit = type_level_limit ?? 2;
			amount_get = amount_get ?? false;

			ByTable generated = null;
			ByTable possible_symptoms = null;
			dynamic symp = null;
			dynamic S = null;
			int? number_of = null;
			int? i = null;
			dynamic S2 = null;

			generated = new ByTable();
			possible_symptoms = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.list_symptoms )) {
				symp = _a;
				
				S = Lang13.Call( symp );

				if ( Convert.ToDouble( S.level ) <= ( type_level_limit ??0) ) {
					
					if ( !this.HasSymptom( S ) ) {
						possible_symptoms.Add( S );
					}
				}
			}

			if ( !( possible_symptoms.len != 0 ) ) {
				return null;
			}
			number_of = Lang13.IntNullable( amount_get );

			if ( !( amount_get == true ) ) {
				number_of = 1;

				while (Rand13.PercentChance( 20 )) {
					number_of += 1;
				}
			}
			i = null;
			i = 1;

			while (( number_of ??0) >= ( i ??0)) {
				S2 = Rand13.PickFromTable( possible_symptoms );
				generated.Add( S2 );
				possible_symptoms.Remove( S2 );
				i++;
			}
			return generated;
		}

		// Function from file: advance.dm
		public bool HasSymptom( dynamic S = null ) {
			Symptom symp = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.symptoms, typeof(Symptom) )) {
				symp = _a;
				

				if ( symp.id == S.id ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: advance.dm
		public void Mix( dynamic D = null ) {
			Symptom S = null;

			
			if ( !this.IsSame( D ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.shuffle( D.symptoms ), typeof(Symptom) )) {
					S = _a;
					
					this.AddSymptom( Lang13.Call( S.type ) );
				}
			}
			return;
		}

		// Function from file: advance.dm
		public override dynamic Copy( bool? process = null ) {
			process = process ?? false;

			return new Disease_Advance( process, this );
		}

		// Function from file: advance.dm
		[VerbInfo( name: "cure" )]
		public override void f_cure( bool? resistance = null ) {
			resistance = resistance ?? true;

			string id = null;

			
			if ( Lang13.Bool( this.affected_mob ) ) {
				id = "" + this.GetDiseaseID();

				if ( resistance == true && !this.affected_mob.resistances.Contains( id ) ) {
					this.affected_mob.resistances[id] = id;
				}
				this.affected_mob.viruses -= this;
			}
			Lang13.Delete( this );
			Task13.Source = null;
			return;
		}

		// Function from file: advance.dm
		public override bool IsSame( dynamic D = null ) {
			
			if ( !( D is Disease_Advance ) ) {
				return false;
			}

			if ( this.GetDiseaseID() != ((Disease_Advance)D).GetDiseaseID() ) {
				return false;
			}
			return true;
		}

		// Function from file: advance.dm
		public override bool stage_act(  ) {
			Symptom S = null;
			Symptom S2 = null;

			base.stage_act();

			if ( this.symptoms != null && this.symptoms.len != 0 ) {
				
				if ( !this.processing ) {
					this.processing = true;

					foreach (dynamic _a in Lang13.Enumerate( this.symptoms, typeof(Symptom) )) {
						S = _a;
						
						S.Start( this );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( this.symptoms, typeof(Symptom) )) {
					S2 = _b;
					
					S2.Activate( this );
				}
			} else {
				Task13.Crash( "We do not have any symptoms during stage_act()!" );
			}
			return false;
		}

		// Function from file: advance.dm
		public override void Del(  ) {
			Symptom S = null;

			
			if ( this.processing ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.symptoms, typeof(Symptom) )) {
					S = _a;
					
					S.End( this );
				}
			}
			base.Del();
			return;
		}

	}

}