// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class PaiController : Game_Data {

		public ByTable pai_candidates = new ByTable();
		public ByTable asked = new ByTable();
		public int askDelay = 600;

		// Function from file: recruit.dm
		public void question( dynamic C = null ) {
			string response = null;
			string warning = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( C ) ) {
					return;
				}
				this.asked.Add( C.key );
				this.asked[C.key] = Game13.time;
				response = Interface13.Alert( C, "Someone is requesting a pAI personality. Would you like to play as a personal AI?", "pAI Request", "Yes", "No", "Never for this round" );

				if ( !Lang13.Bool( C ) ) {
					return;
				}

				if ( response == "Yes" ) {
					this.recruitWindow( C.mob );
				} else if ( response == "Never for this round" ) {
					warning = Interface13.Alert( C, "Are you sure? This action will be undoable and you will need to wait until next round.", "You sure?", "Yes", "No" );

					if ( warning == "Yes" ) {
						this.asked[C.key] = Double.PositiveInfinity;
					} else {
						this.question( C );
					}
				}
				return;
			}));
			return;
		}

		// Function from file: recruit.dm
		public bool check_recruit( dynamic O = null ) {
			
			if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( O, "pAI" ) ) ) {
				return false;
			}

			if ( O.has_enabled_antagHUD == 1 && GlobalVars.config.antag_hud_restricted ) {
				return false;
			}

			if ( Lang13.Bool( O.client ) ) {
				return true;
			}
			return false;
		}

		// Function from file: recruit.dm
		public void requestRecruits(  ) {
			Mob_Dead_Observer O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "pAI" ), typeof(Mob_Dead_Observer) )) {
				O = _a;
				

				if ( O.client != null ) {
					
					if ( this.check_recruit( O ) ) {
						GlobalFuncs.to_chat( O, new Txt( "<span class='recruit'>A pAI card is looking for personalities. (<a href='?src=" ).Ref( this ).str( ";signup=" ).Ref( O ).str( "'>Sign Up</a>)</span>" ).ToString() );
					}
				}
			}
			return;
		}

		// Function from file: recruit.dm
		public void findPAI( Obj_Item_Device_Paicard p = null, Mob user = null ) {
			ByTable available = null;
			PaiCandidate c = null;
			bool found = false;
			Mob_Dead_Observer o = null;
			string dat = null;
			PaiCandidate c2 = null;

			this.requestRecruits();
			available = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.paiController.pai_candidates, typeof(PaiCandidate) )) {
				c = _b;
				

				if ( c.ready ) {
					found = false;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
						o = _a;
						

						if ( o.key == c.key ) {
							found = true;
						}
					}

					if ( found ) {
						available.Add( c );
					}
				}
			}
			dat = "";
			dat += @"
				<style type=""text/css"">

				p.top {
					background-color: #AAAAAA; color: black;
				}

				tr.d0 td {
					background-color: #CC9999; color: black;
				}
				tr.d1 td {
					background-color: #9999CC; color: black;
				}
				tr.d2 td {
					background-color: #99CC99; color: black;
				}
				</style>
				";
			dat += "<p class=\"top\">Requesting AI personalities from central database... If there are no entries, or if a suitable entry is not listed, check again later as more personalities may be added.</p>\n			<table>";

			foreach (dynamic _c in Lang13.Enumerate( available, typeof(PaiCandidate) )) {
				c2 = _c;
				
				dat += new Txt( "<tr class=\"d0\"><td>Name:</td><td>" ).item( c2.name ).str( "</td></tr>\n				<tr class=\"d1\"><td>Description:</td><td>" ).item( c2.description ).str( "</td></tr>\n				<tr class=\"d0\"><td>Preferred Role:</td><td>" ).item( c2.role ).str( "</td></tr>\n				<tr class=\"d1\"><td>OOC Comments:</td><td>" ).item( c2.comments ).str( "</td></tr>\n				<tr class=\"d2\"><td><a href='byond://?src=" ).Ref( this ).str( ";download=1;candidate=" ).Ref( c2 ).str( ";device=" ).Ref( p ).str( "'>[Download " ).item( c2.name ).str( "]</a></td><td></td></tr>" ).ToString();
			}
			dat += "</table>";
			Interface13.Browse( user, dat, "window=findPai" );
			return;
		}

		// Function from file: recruit.dm
		public void recruitWindow( dynamic M = null ) {
			PaiCandidate candidate = null;
			PaiCandidate c = null;
			string dat = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.pai_candidates, typeof(PaiCandidate) )) {
				c = _a;
				

				if ( !( c is PaiCandidate ) || !( M is Mob ) ) {
					break;
				}

				if ( c.key == M.key ) {
					candidate = c;
				}
			}

			if ( !( candidate != null ) ) {
				candidate = new PaiCandidate();
				candidate.key = M.key;
				this.pai_candidates.Add( candidate );
			}
			dat = "";
			dat += @"
				<style type=""text/css"">

				p.top {
					background-color: #AAAAAA; color: black;
				}

				tr.d0 td {
					background-color: #CC9999; color: black;
				}
				tr.d1 td {
					background-color: #9999CC; color: black;
				}
				</style>
				";
			dat += new Txt( "<p class=\"top\">Please configure your pAI personality's options. Remember, what you enter here could determine whether or not the user requesting a personality chooses you!</p>\n			<table>\n			<tr class=\"d0\"><td>Name:</td><td>" ).item( candidate.name ).str( "</td></tr>\n			<tr class=\"d1\"><td><a href='byond://?src=" ).Ref( this ).str( ";option=name;new=1;candidate=" ).Ref( candidate ).str( "'>[Edit]</a></td><td>What you plan to call yourself. Suggestions: Any character name you would choose for a station character OR an AI.</td></tr>\n			<tr class=\"d0\"><td>Description:</td><td>" ).item( candidate.description ).str( "</td></tr>\n			<tr class=\"d1\"><td><a href='byond://?src=" ).Ref( this ).str( ";option=desc;new=1;candidate=" ).Ref( candidate ).str( "'>[Edit]</a></td><td>What sort of pAI you typically play; your mannerisms, your quirks, etc. This can be as sparse or as detailed as you like.</td></tr>\n			<tr class=\"d0\"><td>Preferred Role:</td><td>" ).item( candidate.role ).str( "</td></tr>\n			<tr class=\"d1\"><td><a href='byond://?src=" ).Ref( this ).str( ";option=role;new=1;candidate=" ).Ref( candidate ).str( "'>[Edit]</a></td><td>Do you like to partner with sneaky social ninjas? Like to help security hunt down thugs? Enjoy watching an engineer's back while he saves the station yet again? This doesn't have to be limited to just station jobs. Pretty much any general descriptor for what you'd like to be doing works here.</td></tr>\n			<tr class=\"d0\"><td>OOC Comments:</td><td>" ).item( candidate.comments ).str( "</td></tr>\n			<tr class=\"d1\"><td><a href='byond://?src=" ).Ref( this ).str( ";option=ooc;new=1;candidate=" ).Ref( candidate ).str( "'>[Edit]</a></td><td>Anything you'd like to address specifically to the player reading this in an OOC manner. \"I prefer more serious RP.\", \"I'm still learning the interface!\", etc. Feel free to leave this blank if you want.</td></tr>\n			</table>\n			<br>\n			<h3><a href='byond://?src=" ).Ref( this ).str( ";option=submit;new=1;candidate=" ).Ref( candidate ).str( "'>Submit Personality</a></h3><br>\n			<a href='byond://?src=" ).Ref( this ).str( ";option=save;new=1;candidate=" ).Ref( candidate ).str( "'>Save Personality</a><br>\n			<a href='byond://?src=" ).Ref( this ).str( ";option=load;new=1;candidate=" ).Ref( candidate ).str( "'>Load Personality</a><br>" ).ToString();
			Interface13.Browse( M, dat, "window=paiRecruit" );
			return;
		}

		// Function from file: recruit.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic O = null;
			dynamic candidate = null;
			dynamic card = null;
			Mob_Living_Silicon_Pai pai = null;
			dynamic candidate2 = null;
			dynamic option = null;
			dynamic t = null;
			Obj_Item_Device_Paicard p = null;

			Interface13.Stat( null, href_list.Contains( "signup" ) );

			if ( false ) {
				O = Lang13.FindObj( href_list["signup"] );

				if ( !Lang13.Bool( O ) ) {
					return null;
				}

				if ( !this.check_recruit( O ) ) {
					return null;
				}
				this.recruitWindow( O );
				return null;
			}

			if ( Lang13.Bool( href_list["download"] ) ) {
				candidate = Lang13.FindObj( href_list["candidate"] );
				card = Lang13.FindObj( href_list["device"] );

				if ( Lang13.Bool( card.pai ) ) {
					return null;
				}

				if ( card is Obj_Item_Device_Paicard && candidate is PaiCandidate ) {
					pai = new Mob_Living_Silicon_Pai( card );

					if ( !Lang13.Bool( candidate.name ) ) {
						pai.name = Rand13.PickFromTable( GlobalVars.ninja_names );
					} else {
						pai.name = candidate.name;
					}
					pai.real_name = pai.name;
					pai.key = candidate.key;
					((Obj_Item_Device_Paicard)card).setPersonality( pai );
					card.looking_for_personality = false;
					GlobalFuncs.RemoveAllFactionIcons( card.pai.mind );
					this.pai_candidates.Remove( candidate );
					Interface13.Browse( Task13.User, null, "window=findPai" );
				}
			}

			if ( Lang13.Bool( href_list["new"] ) ) {
				candidate2 = Lang13.FindObj( href_list["candidate"] );
				option = href_list["option"];
				t = "";

				dynamic _b = option; // Was a switch-case, sorry for the mess.
				if ( _b=="name" ) {
					t = Interface13.Input( "Enter a name for your pAI", "pAI Name", candidate2.name, null, null, InputType.Str );

					if ( Lang13.Bool( t ) ) {
						candidate2.name = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 26 );
					}
				} else if ( _b=="desc" ) {
					t = Interface13.Input( "Enter a description for your pAI", "pAI Description", candidate2.description, null, null, InputType.StrMultiline );

					if ( Lang13.Bool( t ) ) {
						candidate2.description = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 1024 );
					}
				} else if ( _b=="role" ) {
					t = Interface13.Input( "Enter a role for your pAI", "pAI Role", candidate2.role, null, null, InputType.Str );

					if ( Lang13.Bool( t ) ) {
						candidate2.role = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 1024 );
					}
				} else if ( _b=="ooc" ) {
					t = Interface13.Input( "Enter any OOC comments", "pAI OOC Comments", candidate2.comments, null, null, InputType.StrMultiline );

					if ( Lang13.Bool( t ) ) {
						candidate2.comments = String13.SubStr( GlobalFuncs.sanitize( t ), 1, 1024 );
					}
				} else if ( _b=="save" ) {
					((PaiCandidate)candidate2).savefile_save( Task13.User );
				} else if ( _b=="load" ) {
					((PaiCandidate)candidate2).savefile_load( Task13.User );

					if ( Lang13.Bool( candidate2.name ) ) {
						candidate2.name = String13.SubStr( GlobalFuncs.sanitize( candidate2.name ), 1, 26 );
					}

					if ( Lang13.Bool( candidate2.description ) ) {
						candidate2.description = String13.SubStr( GlobalFuncs.sanitize( candidate2.description ), 1, 1024 );
					}

					if ( Lang13.Bool( candidate2.role ) ) {
						candidate2.role = String13.SubStr( GlobalFuncs.sanitize( candidate2.role ), 1, 1024 );
					}

					if ( Lang13.Bool( candidate2.comments ) ) {
						candidate2.comments = String13.SubStr( GlobalFuncs.sanitize( candidate2.comments ), 1, 1024 );
					}
				} else if ( _b=="submit" ) {
					
					if ( Lang13.Bool( candidate2 ) ) {
						candidate2.ready = 1;

						foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_Paicard) )) {
							p = _a;
							

							if ( p.looking_for_personality ) {
								p.alertUpdate();
							}
						}
					}
					Interface13.Browse( Task13.User, null, "window=paiRecruit" );
					return null;
				}
				this.recruitWindow( Task13.User );
			}
			return null;
		}

	}

}