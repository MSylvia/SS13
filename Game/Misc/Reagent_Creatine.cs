// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Reagent_Creatine : Reagent {

		public bool has_been_hulk = false;
		public bool has_ripped_and_torn = false;
		public bool hulked_at = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Creatine";
			this.id = "creatine";
			this.description = "Highly toxic substance that grants the user enormous strength, before their muscles seize and tear their own body to shreds.";
			this.reagent_state = 2;
			this.color = "#6F884F";
			this.custom_metabolism = 0.1;
			this.data = 1;
		}

		// Function from file: Chemistry-Reagents.dm
		public void dehulk( Mob_Living H = null, double? damage = null, bool? override_remove = null, bool? gib = null ) {
			damage = damage ?? 200;
			override_remove = override_remove ?? false;
			gib = gib ?? true;

			Organ_External E = null;

			
			if ( this.has_been_hulk && !this.has_ripped_and_torn ) {
				GlobalFuncs.to_chat( H, "<span class='warning'>You feel like your muscles are ripping apart!</span>" );
				this.has_ripped_and_torn = true;

				if ( !( override_remove == true ) ) {
					((Reagents)this.holder).remove_reagent( this.id );
				}
				H.adjustBruteLoss( damage );

				if ( gib == true ) {
					
					foreach (dynamic _a in Lang13.Enumerate( ((dynamic)H).organs, typeof(Organ_External) )) {
						E = _a;
						

						if ( Rand13.PercentChance( 50 ) ) {
							E.droplimb( 1, true );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).species ) ) {
						GlobalFuncs.hgibs( H.loc, H.viruses, H.dna, ((dynamic)H).species.flesh_color, ((dynamic)H).species.blood_color );
					} else {
						GlobalFuncs.hgibs( H.loc, H.viruses, H.dna );
					}
				}
				((dynamic)H).hulk_time = 0;
				H.mutations.Remove( 4 );
				H.update_mutations();
				((Mob_Living_Carbon_Human)H).update_body();
			}
			return;
		}

		// Function from file: Chemistry-Reagents.dm
		public override bool on_mob_life( Mob_Living M = null, int? alien = null ) {
			Mob_Living H = null;

			
			if ( base.on_mob_life( M, alien ) ) {
				return true;
			}

			dynamic _a = this.volume; // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=25 ) {
				M.adjustToxLoss( 1 );
				M.Dizzy( 5 );
				M.Jitter( 5 );

				if ( Rand13.PercentChance( 5 ) ) {
					GlobalFuncs.to_chat( M, "<span class='warning'>Oh god, the pain!</span>" );
				}
			} else if ( 25<=_a&&_a<=Double.PositiveInfinity ) {
				
				if ( M is Mob_Living_Carbon_Human ) {
					H = M;

					if ( ((dynamic)H).species.name != "Dionae" ) {
						
						if ( Convert.ToDouble( ((dynamic)H).hulk_time ) < Game13.time && !this.has_been_hulk ) {
							((dynamic)H).hulk_time = Game13.time + 300;
							this.hulked_at = Lang13.Bool( ((dynamic)H).hulk_time );

							if ( !H.mutations.Contains( 4 ) ) {
								this.has_been_hulk = true;
								this.has_ripped_and_torn = false;
								H.mutations.Add( 4 );
								H.update_mutations();
								((Mob_Living_Carbon_Human)H).update_body();
								GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( M ) + " is TOO SWOLE TO CONTROL (on creatine)! (" + GlobalFuncs.formatJumpTo( M ) + ")" );
							}
						} else if ( Convert.ToDouble( ((dynamic)H).hulk_time ) < Game13.time && this.has_been_hulk ) {
							this.dehulk( H );
						} else if ( Rand13.PercentChance( 1 ) ) {
							H.say( Rand13.Pick(new object [] { "YOU TRYIN' BUILD SUM MUSSLE?", "TOO SWOLE TO CONTROL", "HEY MANG", "HEY MAAAANG" }) );
						}
					}
				}
			}
			this.data++;
			return false;
		}

		// Function from file: Chemistry-Reagents.dm
		public override bool reagent_deleted(  ) {
			dynamic M = null;
			Mob_Living_Carbon_Human H = null;
			double timedmg = 0;

			
			if ( base.reagent_deleted() ) {
				return true;
			}

			if ( !( this.holder != null ) ) {
				return false;
			}
			M = ((dynamic)this.holder).my_atom;

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( !this.has_been_hulk || this.has_ripped_and_torn || !H.mutations.Contains( 4 ) ) {
					return false;
				}
				timedmg = ( 300 - ( H.hulk_time - Game13.time ) ) / 10;
				this.dehulk( H, timedmg * 3, true, false );
			}
			return false;
		}

	}

}