// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class InteractiveMap : Game_Data {

		public ByTable interfaces = null;
		public ByTable data = null;

		// Function from file: interactive_map.dm
		public InteractiveMap (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.interfaces = new ByTable();
			this.data = new ByTable();
			return;
		}

		// Function from file: interactive_map.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			HtmlInterfaceClient L = null;
			double? newz = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( hclient is HtmlInterfaceClient ) {
				
				if ( Lang13.Bool( hclient ) && Lang13.Bool( hclient.client ) && Lang13.Bool( hclient.client.mob ) ) {
					L = hclient.client.mob;

					if ( !( L is Mob_Living ) ) {
						return null;
					}

					dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
					if ( _a=="changez" ) {
						newz = String13.ParseNumber( href_list["value"] );

						if ( Lang13.Bool( newz ) ) {
							this.show( L, newz, currui );
							return 1;
						}
					}
				}
			}
			return null;
		}

		// Function from file: interactive_map.dm
		public virtual void sendResources( Client C = null ) {
			double z = 0;

			Interface13.CacheBrowseResource( C, "map_shared.js", null );
			Interface13.CacheBrowseResource( C, "map_shared.css", null );

			foreach (dynamic _a in Lang13.IterateRange( 1, Game13.map_size_z )) {
				z = _a;
				

				if ( z == 2 ) {
					continue;
				}
				Interface13.CacheBrowseResource( C, new File( "" + GlobalFuncs.getMinimapFile( z ) + ".png" ), "minimap_" + z + ".png" );
			}
			return;
		}

		// Function from file: interactive_map.dm
		public virtual void queueUpdate( int z = 0 ) {
			return;
		}

		// Function from file: interactive_map.dm
		public virtual bool hiIsValidClient( dynamic hclient = null, dynamic hi = null ) {
			return Lang13.Bool( hclient.client.mob ) && Lang13.Bool( hclient.client.mob.stat ) == false;
		}

		// Function from file: interactive_map.dm
		public virtual void update( dynamic z = null, bool? ignore_unused = null, Obj_Machinery_Camera single = null, int? adding = null ) {
			ignore_unused = ignore_unused ?? GlobalVars.FALSE;

			return;
		}

		// Function from file: interactive_map.dm
		public virtual void updateFor( dynamic hclient_or_mob = null, HtmlInterface hi = null, dynamic z = null, Obj_Machinery_Camera single = null ) {
			ByTable L = null;

			hi.callJavaScript( "clearAll", new ByTable(), hclient_or_mob );

			foreach (dynamic _a in Lang13.Enumerate( this.data, typeof(ByTable) )) {
				L = _a;
				
				hi.callJavaScript( "add", L, hclient_or_mob );
			}
			return;
		}

		// Function from file: interactive_map.dm
		public virtual void show( dynamic mob = null, dynamic z = null, HtmlInterface currui = null ) {
			return;
		}

		// Function from file: interactive_map.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			HtmlInterface hi = null;

			
			if ( this.interfaces != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.interfaces, typeof(HtmlInterface) )) {
					hi = _a;
					
					this.Destroy( hi );
				}
				this.interfaces = null;
			}
			return base.Destroy( (object)(brokenup) );
		}

	}

}