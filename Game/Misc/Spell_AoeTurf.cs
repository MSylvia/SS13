// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Spell_AoeTurf : Spell {

		public int inner_radius = -1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.spell_flags = 64;
		}

		// Function from file: aoe_turf.dm
		public override void perform( Mob user = null, bool? skipcharge = null, Tile_Simulated T = null ) {
			user = user ?? Task13.User;
			skipcharge = skipcharge ?? false;

			ByTable targets = null;

			
			if ( !( this.holder != null ) ) {
				this.holder = user;
			}

			if ( !this.cast_check( skipcharge, user ) ) {
				return;
			}

			if ( this.cast_delay != 0 && !this.spell_do_after( user, this.cast_delay ) ) {
				return;
			}
			targets = new ByTable();

			if ( T != null ) {
				targets = new ByTable(new object [] { T });
			} else {
				targets = this.choose_targets( user );
			}

			if ( targets != null && targets.len != 0 ) {
				this.f_invocation( user, targets );
				this.take_charge( user, skipcharge );
				this.before_cast( targets );
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>" + user.real_name + " (" + user.ckey + ") cast the spell " + this.name + ".</font>" );

				if ( Rand13.PercentChance( this.critfailchance ) ) {
					this.critfail( targets, user );
				} else {
					this.cast( targets, user );
				}
				this.after_cast( targets );
			}
			return;
		}

		// Function from file: aoe_turf.dm
		public override ByTable choose_targets( Mob user = null ) {
			user = user ?? Task13.User;

			ByTable targets = null;
			dynamic target = null;

			targets = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.view_or_range( this.range, this.holder, this.selection_type ) )) {
				target = _a;
				
				Interface13.Stat( null, GlobalFuncs.view_or_range( this.inner_radius, this.holder, this.selection_type ).Contains( target ) );

				if ( !false ) {
					
					if ( target.density && ( this.spell_flags & 64 ) != 0 ) {
						continue;
					}

					if ( target is Tile_Space && ( this.spell_flags & 128 ) != 0 ) {
						continue;
					}
					targets.Add( target );
				}
			}

			if ( !( targets.len != 0 ) ) {
				return null;
			}
			return targets;
		}

	}

}