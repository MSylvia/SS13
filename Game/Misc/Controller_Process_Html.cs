// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_Process_Html : Controller_Process {

		public ByTable v_update = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.schedule_interval = 17;
		}

		public Controller_Process_Html ( dynamic scheduler = null ) : base( (object)(scheduler) ) {
			
		}

		// Function from file: htmlui.dm
		public void queue( InteractiveMap_Crewmonitor _ref = null, string procname = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { _ref, procname } ).Extend(_);

			ProcqueueItem item = null;

			item = new ProcqueueItem();
			item.v_ref = _args[1];
			item.procname = _args[2];

			if ( _args.len > 2 ) {
				item.args = _args.Copy( 3 );
			}
			this.v_update.Insert( 1, item );
			return;
		}

		// Function from file: htmlui.dm
		public override bool doWork(  ) {
			ByTable L = null;
			string key = null;
			ProcqueueItem item = null;
			bool first = false;
			dynamic a = null;

			
			if ( this.v_update.len != 0 ) {
				L = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( this.v_update, typeof(ProcqueueItem) )) {
					item = _b;
					
					key = "" + item.v_ref + "_" + item.procname;

					if ( Lang13.Bool( item.args ) ) {
						key += "(";
						first = true;

						foreach (dynamic _a in Lang13.Enumerate( item.args )) {
							a = _a;
							

							if ( !first ) {
								key += ",";
							}
							key += "" + a;
							first = false;
						}
						key += ")";
					}

					if ( !L.Contains( key ) ) {
						
						if ( Lang13.Bool( item.args ) ) {
							item.args.Apply( Lang13.BindFunc( item.v_ref, item.procname ) );
						} else {
							Lang13.Call( Lang13.BindFunc( item.v_ref, item.procname ) );
						}
						L.Add( key );
					}
				}
				this.v_update.Cut();
			}
			return false;
		}

		// Function from file: htmlui.dm
		public override void setup(  ) {
			this.name = "html";
			return;
		}

	}

}