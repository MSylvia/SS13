// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GlobalIterator_MechSynth : GlobalIterator {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.delay = 100;
		}

		public GlobalIterator_MechSynth ( ByTable arguments = null, bool? autostart = null ) : base( arguments, autostart ) {
			
		}

		// Function from file: medical_tools.dm
		public override bool process( Obj port = null, dynamic mecha = null ) {
			dynamic energy_drain = null;
			int amount = 0;
			dynamic reagent = null;

			
			if ( !Lang13.Bool( ((dynamic)port).chassis ) ) {
				return this.stop();
			}
			energy_drain = ((dynamic)port).energy_drain * 10;

			if ( !( ((dynamic)port).processed_reagents.len != 0 ) || ( port.reagents.total_volume ??0) >= Convert.ToDouble( port.reagents.maximum_volume ) || !((Obj_Mecha)((dynamic)port).chassis).has_charge( energy_drain ) ) {
				((dynamic)port).occupant_message( "<span class=\"alert\">Reagent processing stopped.</a>" );
				((dynamic)port).log_message( "Reagent processing stopped." );
				return this.stop();
			}

			if ( GlobalFuncs.anyprob( port.reliability ) ) {
				((dynamic)port).critfail();
			}
			amount = Convert.ToInt32( ((dynamic)port).synth_speed / ((dynamic)port).processed_reagents.len );

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)port).processed_reagents )) {
				reagent = _a;
				
				((Reagents)port.reagents).add_reagent( reagent, amount );
				((dynamic)port).chassis.use_power( energy_drain );
			}
			return true;
		}

	}

}