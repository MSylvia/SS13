// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Game_Data : Base_Data {

		public bool? disposed = null;
		public string gcDestroyed = null;
		public dynamic timeDestroyed = null;


		// Function from file: nanoexternal.dm
		public virtual void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? true;

			return;
		}

		// Function from file: SDQL_2.dm
		public virtual bool SDQL_update( dynamic var_name = null, double? new_value = null ) {
			this.vars[var_name] = new_value;
			return true;
		}

		// Function from file: atoms.dm
		public virtual void setGender( string gend = null ) {
			gend = gend ?? GlobalVars.FEMALE;

			
			if ( !this.vars.Contains( "gender" ) ) {
				Task13.Crash( "Oh shit you stupid nigger the " + this + " doesn't have a gender variable." );
			}

			if ( this is Mob_Living_Carbon_Human ) {
				
				if ( !( gend != GlobalVars.PLURAL && gend != GlobalVars.NEUTER ) ) {
					Task13.Crash( "" + "code/game/atoms.dm" + ":" + 728 + ":Assertion Failed: " + "gend != PLURAL && gend != NEUTER" );
				}
			}
			((dynamic)this).gender = gend;
			return;
		}

		// Function from file: garbage.dm
		public virtual dynamic Destroy( dynamic brokenup = null ) {
			GlobalFuncs.qdel( this, true, true );
			return null;
		}

		// Function from file: datumpool.dm
		public virtual dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			dynamic key = null;

			
			if ( !Lang13.Bool( GlobalVars.pooledvariables[this.type] ) ) {
				this.createVariables( _args );
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.pooledvariables[this.type] )) {
				key = _a;
				
				this.vars[key] = GlobalVars.pooledvariables[this.type][key];
			}
			return null;
		}

		// Function from file: datumpool.dm
		public void createVariables( params object[] _ ) {
			ByTable _args = new ByTable( new object[] {  } ).Extend(_);

			ByTable exclude = null;
			dynamic key = null;

			GlobalVars.pooledvariables[this.type] = new ByTable();
			exclude = GlobalVars.exclude + _args;

			foreach (dynamic _a in Lang13.Enumerate( this.vars )) {
				key = _a;
				

				if ( exclude.Contains( key ) ) {
					continue;
				}
				GlobalVars.pooledvariables[this.type][key] = Lang13.Initial( this, key );
			}
			return;
		}

	}

}