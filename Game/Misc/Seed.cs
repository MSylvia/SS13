// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Seed : Game_Data {

		public int uid = 0;
		public string name = null;
		public string seed_name = null;
		public string seed_noun = "seeds";
		public string display_name = null;
		public bool roundstart = false;
		public bool mysterious = false;
		public ByTable products = null;
		public ByTable mutants = null;
		public ByTable chems = null;
		public ByTable consume_gasses = new ByTable();
		public ByTable exude_gasses = new ByTable();
		public double nutrient_consumption = 0.25;
		public double water_consumption = 3;
		public dynamic ideal_heat = 293;
		public dynamic heat_tolerance = 20;
		public dynamic ideal_light = 7;
		public dynamic light_tolerance = 5;
		public double toxins_tolerance = 4;
		public dynamic lowkpa_tolerance = 25;
		public dynamic highkpa_tolerance = 200;
		public double pest_tolerance = 5;
		public double weed_tolerance = 5;
		public double endurance = 100;
		public double yield = 0;
		public double lifespan = 0;
		public double maturation = 0;
		public double production = 0;
		public int growth_stages = 6;
		public int harvest_repeat = 0;
		public double potency = 1;
		public int spread = 0;
		public int immutable = 0;
		public int alter_temp = 0;
		public int carnivorous = 0;
		public int parasite = 0;
		public int? hematophage = 0;
		public int thorny = 0;
		public int stinging = 0;
		public int ligneous = 0;
		public int teleporting = 0;
		public int juicy = 0;
		public string plant_dmi = "icons/obj/hydroponics.dmi";
		public string plant_icon = null;
		public string packet_icon = "seed";
		public int biolum = 0;
		public string biolum_colour = null;
		public Type splat_type = typeof(Obj_Effect_Decal_Cleanable_FruitSmudge);
		public Type mob_drop = null;
		public bool large = true;
		public bool product_requires_player = false;
		public ByTable currently_querying = null;
		public bool searching = false;

		// Function from file: seed_mobs.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic O = null;

			
			if ( Lang13.Bool( href_list["signup"] ) ) {
				O = Lang13.FindObj( href_list["signup"] );

				if ( !Lang13.Bool( O ) ) {
					return null;
				}
				this.volunteer( O );
			}
			return null;
		}

		// Function from file: seed_mobs.dm
		public dynamic check_observer( dynamic O = null ) {
			
			if ( O.has_enabled_antagHUD == 1 && GlobalVars.config.antag_hud_restricted ) {
				return 0;
			}

			if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( O, "Dionaea" ) ) || !GlobalFuncs.is_alien_whitelisted( this, "Diona" ) && GlobalVars.config.usealienwhitelist ) {
				return 0;
			}
			return O.client;
		}

		// Function from file: seed_mobs.dm
		public void volunteer( dynamic O = null ) {
			
			if ( !this.searching || !( O is Mob_Dead_Observer ) ) {
				return;
			}

			if ( !Lang13.Bool( this.check_observer( O ) ) ) {
				GlobalFuncs.to_chat( O, "<span class='warning'>You cannot be " + this.display_name + ".</span>" );
				return;
			}
			Interface13.Stat( null, this.currently_querying.Contains( O ) );

			if ( !Lang13.Bool( this.check_observer( O ) ) ) {
				GlobalFuncs.to_chat( O, "<span class='notice'>Removed from registration list.</span>" );
				this.currently_querying.Remove( O );
				return;
			} else {
				GlobalFuncs.to_chat( O, "<span class='notice'>Added to registration list.</span>" );
				this.currently_querying.Add( O );
				return;
			}
		}

		// Function from file: seed_mobs.dm
		public void transfer_personality( dynamic player = null, dynamic host = null ) {
			dynamic newname = null;

			
			if ( !Lang13.Bool( player ) || !Lang13.Bool( host ) ) {
				return;
			}

			if ( Lang13.Bool( host.client ) && Lang13.Bool( host.ckey ) ) {
				return;
			}
			host.ckey = player.ckey;

			if ( Lang13.Bool( player.mob ) && Lang13.Bool( player.mob.mind ) ) {
				((Mind)player.mob.mind).transfer_to( host );
			}

			if ( Lang13.Bool( host.dna ) ) {
				host.dna.real_name = host.real_name;
			}
			GlobalFuncs.callHook( "harvest_podman" );
			GlobalFuncs.to_chat( host, "<span class='good'><B>You awaken slowly, stirring into sluggish motion as the air caresses you.</B></span>" );

			if ( host is Mob_Living_Carbon_Monkey_Diona ) {
				GlobalFuncs.to_chat( host, "<B>You are " + host + ", one of a race of drifting interstellar plantlike creatures that sometimes share their seeds with human traders.</B>" );
				GlobalFuncs.to_chat( host, "<B>Too much darkness will send you into shock and starve you, but light will help you heal.</B>" );
			}
			newname = Interface13.Input( host, "Enter a name, or leave blank for the default name.", "Name change", "", null, InputType.Str );
			newname = String13.SubStr( GlobalFuncs.sanitize( newname ), 1, 26 );

			if ( newname != "" ) {
				host.real_name = newname;
				host.name = host.real_name;
			}
			return;
		}

		// Function from file: seed_mobs.dm
		public void request_player( dynamic host = null ) {
			ByTable active_candidates = null;
			Mob_Dead_Observer O = null;
			Mob_Dead_Observer O2 = null;
			dynamic O3 = null;

			
			if ( !Lang13.Bool( host ) ) {
				return;
			}
			this.searching = true;
			active_candidates = GlobalFuncs.get_active_candidates( "Dionaea" );

			foreach (dynamic _a in Lang13.Enumerate( active_candidates, typeof(Mob_Dead_Observer) )) {
				O = _a;
				

				if ( !Lang13.Bool( this.check_observer( O ) ) ) {
					continue;
				}
				this.currently_querying.Or( O );
				GlobalFuncs.to_chat( O, new Txt( "<span class='recruit'>Someone is harvesting " ).item( this.display_name ).str( ". You have been added to the list of potential ghosts. (<a href='?src=" ).Ref( O ).str( ";jump=" ).Ref( host ).str( "'>Teleport</a> | <a href='?src=" ).Ref( this ).str( ";signup=" ).Ref( O ).str( "'>retract</a>)</span>" ).ToString() );
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.dead_mob_list - active_candidates, typeof(Mob_Dead_Observer) )) {
				O2 = _b;
				

				if ( !Lang13.Bool( this.check_observer( O2 ) ) ) {
					continue;
				}
				GlobalFuncs.to_chat( O2, new Txt( "<span class='recruit'>Someone is harvesting " ).item( this.display_name ).str( ". (<a href='?src=" ).Ref( O2 ).str( ";jump=" ).Ref( host ).str( "'>Teleport</a> | <a href='?src=" ).Ref( this ).str( ";signup=" ).Ref( O2 ).str( "'>Sign up</a>)</span>" ).ToString() );
			}
			Task13.Schedule( 600, (Task13.Closure)(() => {
				
				if ( !( this.currently_querying != null ) || !( this.currently_querying.len != 0 ) ) {
					return;
				}
				O3 = null;
				O3 = Rand13.PickFromTable( this.currently_querying );

				while (this.currently_querying.len != 0 && !Lang13.Bool( this.check_observer( O3 ) )) {
					this.currently_querying.Remove( O3 );
					O3 = Rand13.PickFromTable( this.currently_querying );
				}

				if ( !Lang13.Bool( this.check_observer( O3 ) ) ) {
					return;
				}
				this.transfer_personality( O3.client, host );
				return;
			}));
			return;
		}

		// Function from file: seed_mobs.dm
		public void handle_living_product( dynamic host = null ) {
			Obj_Item_Seeds S = null;

			
			if ( !Lang13.Bool( host ) || !( host is Mob_Living ) ) {
				return;
			}

			if ( !this.product_requires_player ) {
				return;
			}
			this.currently_querying = new ByTable();
			this.request_player( host );
			Task13.Schedule( 675, (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( host.ckey ) && !Lang13.Bool( host.client ) ) {
					((Mob)host).death();
					host.stat = 2;
					((Ent_Static)host).visible_message( "<span class='warning'><b>" + host + " is malformed and unable to survive. It expires pitifully, leaving behind some seeds.</span>" );

					if ( this.mob_drop != null ) {
						Lang13.Call( this.mob_drop, GlobalFuncs.get_turf( host ) );
					} else {
						S = new Obj_Item_Seeds( GlobalFuncs.get_turf( host ) );
						S.seed_type = this.name;
						S.update_seed();
					}
				}
				return;
			}));
			return;
		}

		// Function from file: seed_datums.dm
		public ByTable get_reagent_names(  ) {
			ByTable reagent_names = null;
			dynamic R = null;
			dynamic rid = null;

			reagent_names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.chems )) {
				rid = _a;
				
				R = GlobalVars.chemical_reagents_list[rid];
				reagent_names.Add( R.name );
			}
			return reagent_names;
		}

		// Function from file: seed_datums.dm
		public Seed diverge( int? modified = null ) {
			Seed new_seed = null;

			
			if ( this.immutable > 0 ) {
				return null;
			}
			new_seed = new Seed();
			new_seed.name = "new line";
			new_seed.uid = 0;
			new_seed.roundstart = false;
			new_seed.large = this.large;

			if ( this.products != null ) {
				new_seed.products = this.products.Copy();
			}

			if ( this.mutants != null ) {
				new_seed.mutants = this.mutants.Copy();
			}

			if ( this.chems != null ) {
				new_seed.chems = this.chems.Copy();
			}

			if ( this.consume_gasses != null ) {
				new_seed.consume_gasses = this.consume_gasses.Copy();
			}

			if ( this.exude_gasses != null ) {
				new_seed.exude_gasses = this.exude_gasses.Copy();
			}

			if ( modified != -1 ) {
				new_seed.seed_name = "" + ( this.roundstart ? "" + ( Lang13.Bool( modified ) ? "modified" : "mutant" ) + " " : "" ) + this.seed_name;
				new_seed.display_name = "" + ( this.roundstart ? "" + ( Lang13.Bool( modified ) ? "modified" : "mutant" ) + " " : "" ) + this.display_name;
			} else {
				new_seed.seed_name = "" + this.seed_name;
				new_seed.display_name = "" + this.display_name;
			}
			new_seed.nutrient_consumption = this.nutrient_consumption;
			new_seed.water_consumption = this.water_consumption;
			new_seed.ideal_heat = this.ideal_heat;
			new_seed.heat_tolerance = this.heat_tolerance;
			new_seed.ideal_light = this.ideal_light;
			new_seed.light_tolerance = this.light_tolerance;
			new_seed.toxins_tolerance = this.toxins_tolerance;
			new_seed.lowkpa_tolerance = this.lowkpa_tolerance;
			new_seed.highkpa_tolerance = this.highkpa_tolerance;
			new_seed.pest_tolerance = this.pest_tolerance;
			new_seed.weed_tolerance = this.weed_tolerance;
			new_seed.endurance = this.endurance;
			new_seed.yield = this.yield;
			new_seed.lifespan = this.lifespan;
			new_seed.maturation = this.maturation;
			new_seed.production = this.production;
			new_seed.growth_stages = this.growth_stages;
			new_seed.harvest_repeat = this.harvest_repeat;
			new_seed.potency = this.potency;
			new_seed.spread = this.spread;
			new_seed.carnivorous = this.carnivorous;
			new_seed.parasite = this.parasite;
			new_seed.hematophage = this.hematophage;
			new_seed.thorny = this.thorny;
			new_seed.stinging = this.stinging;
			new_seed.ligneous = this.ligneous;
			new_seed.teleporting = this.teleporting;
			new_seed.juicy = this.juicy;
			new_seed.plant_icon = this.plant_icon;
			new_seed.splat_type = this.splat_type;
			new_seed.packet_icon = this.packet_icon;
			new_seed.biolum = this.biolum;
			new_seed.biolum_colour = this.biolum_colour;
			new_seed.alter_temp = this.alter_temp;

			if ( !( new_seed is Seed ) ) {
				Task13.Crash( "" + "code/modules/hydroponics/seed_datums.dm" + ":" + 693 + ":Assertion Failed: " + "istype(new_seed)" );
			}
			return new_seed;
		}

		// Function from file: seed_datums.dm
		public void spawn_seed_packet( dynamic target = null ) {
			Obj_Item_Seeds seeds = null;

			this.add_newline_to_controller();
			seeds = new Obj_Item_Seeds( target );
			seeds.seed_type = this.name;
			seeds.update_seed();
			return;
		}

		// Function from file: seed_datums.dm
		public bool check_harvest( dynamic user = null, dynamic tray = null ) {
			bool success = false;
			bool stung = false;
			dynamic H = null;
			dynamic assblast = null;
			Organ_External affecting = null;
			dynamic rid = null;
			double? drawing = null;
			dynamic M = null;

			success = true;
			stung = false;

			if ( this.thorny != 0 || this.stinging != 0 ) {
				H = user;

				if ( H is Mob_Living_Carbon_Human ) {
					
					if ( !((Mob_Living_Carbon_Human)H).check_body_part_coverage( 1536 ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( new ByTable(new object [] { "r_hand", "l_hand" }) )) {
							assblast = _b;
							

							if ( stung ) {
								continue;
							}
							affecting = ((Mob_Living_Carbon_Human)H).get_organ( assblast );

							if ( affecting != null && affecting.is_existing() && affecting.is_usable() && affecting.is_organic() ) {
								stung = true;

								if ( this.thorny != 0 ) {
									
									if ( affecting.take_damage( this.carnivorous * 5 + 5, 0 ) ) {
										((Mob_Living)H).UpdateDamageIcon();
										((Mob_Living)H).updatehealth();
									} else {
										((Mob_Living)H).adjustBruteLoss( this.carnivorous * 5 + 5 );
									}
									GlobalFuncs.to_chat( H, new Txt( "<span class='danger'>You are prickled by the sharp thorns on " ).the( this.seed_name ).item().str( "!</span>" ).ToString() );

									if ( Lang13.Bool( H.species ) && !Lang13.Bool( H.species.flags & 8 ) ) {
										success = false;
									}
								}

								if ( this.stinging != 0 ) {
									
									if ( this.chems != null && this.chems.len != 0 ) {
										
										foreach (dynamic _a in Lang13.Enumerate( this.chems )) {
											rid = _a;
											
											((Reagents)H.reagents).add_reagent( rid, ( 1 <= 5 ? 5 : ( 1 >= this.potency / 10 ? this.potency / 10 : 1 ) ) );
										}
										GlobalFuncs.to_chat( H, new Txt( "<span class='danger'>You are stung by " ).the( this.seed_name ).item().str( "!</span>" ).ToString() );

										if ( Lang13.Bool( this.hematophage ) ) {
											
											if ( Lang13.Bool( tray ) && Lang13.Bool( H.species ) && !Lang13.Bool( H.species.flags & 1 ) ) {
												drawing = Num13.MinInt( 15, H.vessel.get_reagent_amount( "blood" ) ?1:0 );
												H.vessel.remove_reagent( "blood", drawing );
												((Reagents)tray.reagents).add_reagent( "blood", drawing );
											}
										}
									}
								}
							}
						}
					}
				}
			}

			if ( this.ligneous != 0 ) {
				
				if ( user is Mob_Living_Carbon ) {
					M = user;

					if ( ( !Lang13.Bool( M.l_hand ) || !Lang13.Bool( ((Obj)M.l_hand).is_sharp() ) ) && ( !Lang13.Bool( M.r_hand ) || !Lang13.Bool( ((Obj)M.r_hand).is_sharp() ) ) ) {
						GlobalFuncs.to_chat( M, "<span class='warning'>The stems on this plant are too tough to cut by hand, you'll need something sharp in one of your hands to harvest it.</span>" );
						success = false;
					}
				}
			}
			return success;
		}

		// Function from file: seed_datums.dm
		public void harvest( dynamic user = null, double? yield_mod = null ) {
			yield_mod = yield_mod ?? 1;

			double? total_yield = null;
			double? i = null;
			dynamic product_type = null;
			dynamic product = null;
			dynamic current_product = null;
			dynamic current_product2 = null;

			
			if ( !Lang13.Bool( user ) ) {
				return;
			}

			if ( this.products == null || !( this.products.len != 0 ) || this.yield <= 0 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You fail to harvest anything useful.</span>" );
			} else {
				GlobalFuncs.to_chat( user, "You harvest from the " + this.display_name + "." );
				this.add_newline_to_controller();
				total_yield = 0;

				if ( this.yield > -1 ) {
					
					if ( yield_mod == null || ( yield_mod ??0) < 0 ) {
						yield_mod = 1;
						total_yield = this.yield;
					} else {
						total_yield = this.yield * ( yield_mod ??0);
					}
					total_yield = Num13.Floor( Num13.MaxInt( 1, ((int)( total_yield ??0 )) ) );
				}
				this.currently_querying = new ByTable();
				i = null;
				i = 0;

				while (( i ??0) < ( total_yield ??0)) {
					product_type = Rand13.PickFromTable( this.products );
					product = null;

					if ( Lang13.Bool( product_type.IsSubclassOf( typeof(Obj_Item_Stack) ) ) ) {
						product = GlobalFuncs.drop_stack( product_type, GlobalFuncs.get_turf( user ), 1, user );
					} else {
						product = Lang13.Call( product_type, GlobalFuncs.get_turf( user ) );
					}
					GlobalVars.score["stuffharvested"] += 1;

					if ( this.mysterious ) {
						product.name += "?";
						product.desc += " On second thought, something about this one looks strange.";
					}

					if ( this.biolum != 0 ) {
						
						if ( Lang13.Bool( this.biolum_colour ) ) {
							product.light_color = this.biolum_colour;
						}
						((Ent_Static)product).set_light( 2 );
					}

					if ( product is Mob_Living ) {
						((Ent_Static)product).visible_message( "<span class='notice'>The pod disgorges " + product + "!</span>" );
						this.handle_living_product( product );
					} else if ( product is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown ) {
						current_product = product;
						current_product.plantname = this.name;
					} else if ( product is Obj_Item_Weapon_Grown ) {
						current_product2 = product;
						current_product2.plantname = this.name;
					}
					i++;
				}
			}
			return;
		}

		// Function from file: seed_datums.dm
		public void add_newline_to_controller(  ) {
			
			if ( this.name == "new line" || !false ) {
				this.uid = GlobalVars.plant_controller.seeds.len + 1;
				this.name = "" + this.uid;
				GlobalVars.plant_controller.seeds[this.name] = this;
			}
			return;
		}

		// Function from file: seed_datums.dm
		public dynamic get_gene( dynamic genetype = null ) {
			Plantgene P = null;

			
			if ( !Lang13.Bool( genetype ) ) {
				return 0;
			}
			P = new Plantgene();
			P.genetype = genetype;

			dynamic _a = genetype; // Was a switch-case, sorry for the mess.
			if ( _a=="phytochemistry" ) {
				P.values = new ByTable(new object [] { ( this.chems != null ? ((dynamic)( this.chems )) : ((dynamic)( 0 )) ), ( this.potency != 0 ? this.potency : 0 ), ( this.teleporting != 0 ? this.teleporting : 0 ) });
			} else if ( _a=="morphology" ) {
				P.values = new ByTable(new object [] { 
					( this.products != null ? ((dynamic)( this.products )) : ((dynamic)( 0 )) ), 
					( this.thorny != 0 ? this.thorny : 0 ), 
					( this.stinging != 0 ? this.stinging : 0 ), 
					( this.ligneous != 0 ? this.ligneous : 0 ), 
					( this.juicy != 0 ? this.juicy : 0 )
				 });
			} else if ( _a=="bioluminescence" ) {
				P.values = new ByTable(new object [] { ( this.biolum != 0 ? this.biolum : 0 ), ( Lang13.Bool( this.biolum_colour ) ? ((dynamic)( this.biolum_colour )) : ((dynamic)( 0 )) ) });
			} else if ( _a=="ecology" ) {
				P.values = new ByTable(new object [] { 
					( Lang13.Bool( this.ideal_heat ) ? this.ideal_heat : ((dynamic)( 0 )) ), 
					( Lang13.Bool( this.heat_tolerance ) ? this.heat_tolerance : ((dynamic)( 0 )) ), 
					( Lang13.Bool( this.ideal_light ) ? this.ideal_light : ((dynamic)( 0 )) ), 
					( Lang13.Bool( this.light_tolerance ) ? this.light_tolerance : ((dynamic)( 0 )) ), 
					( Lang13.Bool( this.lowkpa_tolerance ) ? this.lowkpa_tolerance : ((dynamic)( 0 )) ), 
					( Lang13.Bool( this.highkpa_tolerance ) ? this.highkpa_tolerance : ((dynamic)( 0 )) )
				 });
			} else if ( _a=="ecophysiology" ) {
				P.values = new ByTable(new object [] { 
					( this.toxins_tolerance != 0 ? this.toxins_tolerance : 0 ), 
					( this.pest_tolerance != 0 ? this.pest_tolerance : 0 ), 
					( this.weed_tolerance != 0 ? this.weed_tolerance : 0 ), 
					( this.lifespan != 0 ? this.lifespan : 0 ), 
					( this.endurance != 0 ? this.endurance : 0 )
				 });
			} else if ( _a=="metabolism" ) {
				P.values = new ByTable(new object [] { 
					( this.nutrient_consumption != 0 ? this.nutrient_consumption : 0 ), 
					( this.water_consumption != 0 ? this.water_consumption : 0 ), 
					( this.alter_temp != 0 ? this.alter_temp : 0 ), 
					( this.exude_gasses != null ? ((dynamic)( this.exude_gasses )) : ((dynamic)( 0 )) )
				 });
			} else if ( _a=="nutrition" ) {
				P.values = new ByTable(new object [] { 
					( this.carnivorous != 0 ? this.carnivorous : 0 ), 
					( this.parasite != 0 ? this.parasite : 0 ), 
					( Lang13.Bool( this.hematophage ) ? this.hematophage : 0 ), 
					( this.consume_gasses != null ? ((dynamic)( this.consume_gasses )) : ((dynamic)( 0 )) )
				 });
			} else if ( _a=="development" ) {
				P.values = new ByTable(new object [] { 
					( this.production != 0 ? this.production : 0 ), 
					( this.maturation != 0 ? this.maturation : 0 ), 
					( this.spread != 0 ? this.spread : 0 ), 
					( this.harvest_repeat != 0 ? this.harvest_repeat : 0 ), 
					( this.yield != 0 ? this.yield : 0 )
				 });
			}
			return ( P != null ? ((dynamic)( P )) : ((dynamic)( 0 )) );
		}

		// Function from file: seed_datums.dm
		public void apply_gene( Plantgene gene = null, int mode = 0 ) {
			dynamic gene_value = null;
			dynamic rid = null;
			ByTable gene_chem = null;
			double i = 0;
			dynamic new_gasses = null;
			dynamic new_gasses2 = null;

			
			if ( !( gene != null ) || !( gene.values != null ) || this.immutable > 0 ) {
				return;
			}

			dynamic _k = gene.genetype; // Was a switch-case, sorry for the mess.
			if ( _k=="phytochemistry" ) {
				
				if ( !( this.chems != null ) || mode == 2 ) {
					this.chems = new ByTable();
				}
				gene_value = gene.values[1];

				foreach (dynamic _b in Lang13.Enumerate( gene_value )) {
					rid = _b;
					
					gene_chem = gene_value[rid];
					Interface13.Stat( null, this.chems.Contains( rid ) );

					if ( !false || !Lang13.Bool( this.chems[rid] ) ) {
						this.chems[rid] = gene_chem.Copy();
						continue;
					}

					foreach (dynamic _a in Lang13.IterateRange( 1, gene_chem.len )) {
						i = _a;
						

						if ( gene_chem[i] == null ) {
							this.chems[rid][i] = 0;
							gene_chem[i] = 0;
						}

						if ( !Lang13.Bool( this.chems[rid][i] ) ) {
							continue;
						}

						if ( Lang13.Bool( this.chems[rid][i] ) ) {
							this.chems[rid][i] = Num13.MaxInt( 1, Num13.Floor( Convert.ToDouble( ( gene_chem[i] + this.chems[rid][i] ) / 2 ) ) );
						} else {
							this.chems[rid][i] = gene_chem[i];
						}
					}
				}

				switch ((int)( mode )) {
					case 2:
						this.potency = Convert.ToDouble( gene.values[2] );
						this.teleporting = Convert.ToInt32( gene.values[3] );
						break;
					case 1:
						this.potency = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[2], this.potency, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						this.teleporting = Num13.MaxInt( Convert.ToInt32( gene.values[3] ), this.teleporting );
						break;
				}
			} else if ( _k=="morphology" ) {
				
				if ( Lang13.Bool( gene.values[1] ) ) {
					
					if ( !( this.products != null ) || mode == 2 ) {
						this.products = new ByTable();
					}
					this.products.Or( gene.values[1] );
				}

				switch ((int)( mode )) {
					case 2:
						this.thorny = Convert.ToInt32( gene.values[2] );
						this.stinging = Convert.ToInt32( gene.values[3] );
						this.ligneous = Convert.ToInt32( gene.values[4] );
						this.juicy = Convert.ToInt32( gene.values[5] );
						break;
					case 1:
						this.thorny = Num13.MaxInt( Convert.ToInt32( gene.values[2] ), this.thorny );
						this.stinging = Num13.MaxInt( Convert.ToInt32( gene.values[3] ), this.stinging );
						this.ligneous = Num13.MaxInt( Convert.ToInt32( gene.values[4] ), this.ligneous );
						this.juicy = Num13.MaxInt( Convert.ToInt32( gene.values[5] ), this.juicy );
						break;
				}
			} else if ( _k=="bioluminescence" ) {
				
				switch ((int)( mode )) {
					case 2:
						this.biolum = Convert.ToInt32( gene.values[1] );
						this.biolum_colour = gene.values[2];
						break;
					case 1:
						this.biolum = Num13.MaxInt( Convert.ToInt32( gene.values[1] ), this.biolum );
						this.biolum_colour = GlobalFuncs.BlendRGB( gene.values[2], this.biolum_colour, Rand13.Int( 40, 60 ) / 100 );
						break;
				}
			} else if ( _k=="ecology" ) {
				
				switch ((int)( mode )) {
					case 2:
						this.ideal_heat = gene.values[1];
						this.heat_tolerance = gene.values[2];
						this.ideal_light = gene.values[3];
						this.light_tolerance = gene.values[4];
						this.lowkpa_tolerance = gene.values[5];
						this.highkpa_tolerance = gene.values[6];
						break;
					case 1:
						this.ideal_heat = GlobalFuncs.Ceiling( GlobalFuncs.mix( gene.values[1], this.ideal_heat, Rand13.Int( 40, 60 ) / 100 ) );
						this.heat_tolerance = GlobalFuncs.Ceiling( GlobalFuncs.mix( gene.values[2], this.heat_tolerance, Rand13.Int( 40, 60 ) / 100 ) );
						this.ideal_light = GlobalFuncs.Ceiling( GlobalFuncs.mix( gene.values[3], this.ideal_light, Rand13.Int( 40, 60 ) / 100 ) );
						this.light_tolerance = GlobalFuncs.Ceiling( GlobalFuncs.mix( gene.values[4], this.light_tolerance, Rand13.Int( 40, 60 ) / 100 ) );
						this.lowkpa_tolerance = GlobalFuncs.Ceiling( GlobalFuncs.mix( gene.values[5], this.lowkpa_tolerance, Rand13.Int( 40, 60 ) / 100 ) );
						this.highkpa_tolerance = GlobalFuncs.Ceiling( GlobalFuncs.mix( gene.values[6], this.highkpa_tolerance, Rand13.Int( 40, 60 ) / 100 ) );
						break;
				}
			} else if ( _k=="ecophysiology" ) {
				
				switch ((int)( mode )) {
					case 2:
						this.toxins_tolerance = Convert.ToDouble( gene.values[1] );
						this.pest_tolerance = Convert.ToDouble( gene.values[2] );
						this.weed_tolerance = Convert.ToDouble( gene.values[3] );
						this.lifespan = Convert.ToDouble( gene.values[4] );
						this.endurance = Convert.ToDouble( gene.values[5] );
						break;
					case 1:
						this.toxins_tolerance = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[1], this.toxins_tolerance, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						this.pest_tolerance = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[2], this.pest_tolerance, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						this.weed_tolerance = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[3], this.weed_tolerance, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						this.lifespan = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[4], this.lifespan, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						this.endurance = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[5], this.endurance, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						break;
				}
			} else if ( _k=="metabolism" ) {
				
				switch ((int)( mode )) {
					case 2:
						this.nutrient_consumption = Convert.ToDouble( gene.values[1] );
						this.water_consumption = Convert.ToDouble( gene.values[2] );
						this.alter_temp = Convert.ToInt32( gene.values[3] );
						break;
					case 1:
						this.nutrient_consumption = Convert.ToDouble( GlobalFuncs.mix( gene.values[1], this.nutrient_consumption, Rand13.Int( 40, 60 ) / 100 ) );
						this.water_consumption = Convert.ToDouble( GlobalFuncs.mix( gene.values[2], this.water_consumption, Rand13.Int( 40, 60 ) / 100 ) );
						this.alter_temp = Num13.MaxInt( Convert.ToInt32( gene.values[3] ), this.alter_temp );
						break;
				}
				new_gasses = gene.values[4];

				if ( GlobalFuncs.islist( new_gasses ) ) {
					
					if ( !( this.exude_gasses != null ) || mode == 2 ) {
						this.exude_gasses = new ByTable();
					}
					this.exude_gasses.Or( new_gasses );
				}
			} else if ( _k=="nutrition" ) {
				
				switch ((int)( mode )) {
					case 2:
						this.carnivorous = Convert.ToInt32( gene.values[1] );
						this.parasite = Convert.ToInt32( gene.values[2] );
						this.hematophage = Lang13.IntNullable( gene.values[3] );
						break;
					case 1:
						this.carnivorous = Num13.MaxInt( Convert.ToInt32( gene.values[1] ), this.carnivorous );
						this.parasite = Num13.MaxInt( Convert.ToInt32( gene.values[2] ), this.parasite );
						this.hematophage = Num13.MaxInt( Convert.ToInt32( gene.values[3] ), this.hematophage ??0 );
						break;
				}
				new_gasses2 = gene.values[4];

				if ( GlobalFuncs.islist( new_gasses2 ) ) {
					
					if ( !( this.consume_gasses != null ) || mode == 2 ) {
						this.consume_gasses = new ByTable();
					}
					this.consume_gasses.Or( new_gasses2 );
				}
			} else if ( _k=="development" ) {
				
				switch ((int)( mode )) {
					case 2:
						this.production = Convert.ToDouble( gene.values[1] );
						this.maturation = Convert.ToDouble( gene.values[2] );
						this.spread = Convert.ToInt32( gene.values[3] );
						this.harvest_repeat = Convert.ToInt32( gene.values[4] );
						this.yield = Convert.ToDouble( gene.values[5] );
						break;
					case 1:
						this.production = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[1], this.production, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						this.maturation = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[2], this.maturation, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						this.spread = Num13.MaxInt( Convert.ToInt32( gene.values[3] ), this.spread );
						this.harvest_repeat = Num13.MaxInt( Convert.ToInt32( gene.values[4] ), this.harvest_repeat );
						this.yield = Num13.Round( Convert.ToDouble( GlobalFuncs.mix( gene.values[5], this.yield, Rand13.Int( 40, 60 ) / 100 ) ), 0.1 );
						break;
				}
			}
			return;
		}

		// Function from file: seed_datums.dm
		public void randomize_icon( bool? change_packet = null ) {
			change_packet = change_packet ?? true;

			dynamic plant_icons = null;

			plant_icons = Rand13.PickFromTable( new ByTable(new object [] { 
				new ByTable(new object [] { "seed-chili", "chili", 6 }), 
				new ByTable(new object [] { "seed-icepepper", "chiliice", 6 }), 
				new ByTable(new object [] { "seed-berry", "berry", 6 }), 
				new ByTable(new object [] { "seed-glowberry", "glowberry", 6 }), 
				new ByTable(new object [] { "seed-poisonberry", "poisonberry", 6 }), 
				new ByTable(new object [] { "seed-deathberry", "deathberry", 6 }), 
				new ByTable(new object [] { "seed-nettle", "nettle", 6 }), 
				new ByTable(new object [] { "seed-deathnettle", "deathnettle", 6 }), 
				new ByTable(new object [] { "seed-tomato", "tomato", 6 }), 
				new ByTable(new object [] { "seed-bloodtomato", "bloodtomato", 6 }), 
				new ByTable(new object [] { "seed-killertomato", "killertomato", 2 }), 
				new ByTable(new object [] { "seed-bluetomato", "bluetomato", 6 }), 
				new ByTable(new object [] { "seed-bluespacetomato", "bluespacetomato", 6 }), 
				new ByTable(new object [] { "seed-eggplant", "eggplant", 6 }), 
				new ByTable(new object [] { "seed-eggy", "eggy", 6 }), 
				new ByTable(new object [] { "seed-apple", "apple", 6 }), 
				new ByTable(new object [] { "seed-goldapple", "goldapple", 6 }), 
				new ByTable(new object [] { "seed-ambrosiavulgaris", "ambrosiavulgaris", 6 }), 
				new ByTable(new object [] { "seed-ambrosiadeus", "ambrosiadeus", 6 }), 
				new ByTable(new object [] { "mycelium-chanter", "chanter", 3 }), 
				new ByTable(new object [] { "mycelium-plump", "plump", 3 }), 
				new ByTable(new object [] { "mycelium-reishi", "reishi", 4 }), 
				new ByTable(new object [] { "mycelium-liberty", "liberty", 3 }), 
				new ByTable(new object [] { "mycelium-amanita", "amanita", 3 }), 
				new ByTable(new object [] { "mycelium-angel", "angel", 3 }), 
				new ByTable(new object [] { "mycelium-tower", "towercap", 3 }), 
				new ByTable(new object [] { "mycelium-glowshroom", "glowshroom", 4 }), 
				new ByTable(new object [] { "mycelium-walkingmushroom", "walkingmushroom", 3 }), 
				new ByTable(new object [] { "mycelium-plast", "plastellium", 3 }), 
				new ByTable(new object [] { "seed-harebell", "harebell", 4 }), 
				new ByTable(new object [] { "seed-poppy", "poppy", 3 }), 
				new ByTable(new object [] { "seed-sunflower", "sunflower", 3 }), 
				new ByTable(new object [] { "seed-moonflower", "moonflower", 3 }), 
				new ByTable(new object [] { "seed-novaflower", "novaflower", 3 }), 
				new ByTable(new object [] { "seed-grapes", "grape", 2 }), 
				new ByTable(new object [] { "seed-greengrapes", "greengrape", 2 }), 
				new ByTable(new object [] { "seed-peanut", "peanut", 6 }), 
				new ByTable(new object [] { "seed-cabbage", "cabbage", 1 }), 
				new ByTable(new object [] { "seed-shand", "shand", 3 }), 
				new ByTable(new object [] { "seed-mtear", "mtear", 4 }), 
				new ByTable(new object [] { "seed-banana", "banana", 6 }), 
				new ByTable(new object [] { "seed-corn", "corn", 3 }), 
				new ByTable(new object [] { "seed-potato", "potato", 4 }), 
				new ByTable(new object [] { "seed-soybean", "soybean", 6 }), 
				new ByTable(new object [] { "seed-koibean", "soybean", 6 }), 
				new ByTable(new object [] { "seed-wheat", "wheat", 6 }), 
				new ByTable(new object [] { "seed-rice", "rice", 4 }), 
				new ByTable(new object [] { "seed-carrot", "carrot", 3 }), 
				new ByTable(new object [] { "seed-ambrosiavulgaris", "weeds", 4 }), 
				new ByTable(new object [] { "seed-whitebeet", "whitebeet", 6 }), 
				new ByTable(new object [] { "seed-sugarcane", "sugarcane", 3 }), 
				new ByTable(new object [] { "seed-watermelon", "watermelon", 6 }), 
				new ByTable(new object [] { "seed-pumpkin", "pumpkin", 2 }), 
				new ByTable(new object [] { "seed-lime", "lime", 6 }), 
				new ByTable(new object [] { "seed-lemon", "lemon", 6 }), 
				new ByTable(new object [] { "seed-orange", "orange", 6 }), 
				new ByTable(new object [] { "seed-grass", "grass", 2 }), 
				new ByTable(new object [] { "seed-cocoapod", "cocoapod", 5 }), 
				new ByTable(new object [] { "seed-cherry", "cherry", 5 }), 
				new ByTable(new object [] { "seed-kudzu", "kudzu", 4 })
			 }) );

			if ( change_packet == true ) {
				this.packet_icon = plant_icons[1];
			}
			this.plant_icon = plant_icons[2];
			this.growth_stages = Convert.ToInt32( plant_icons[3] );
			return;
		}

		// Function from file: seed_datums.dm
		public bool add_random_chemical( int? severity = null ) {
			severity = severity ?? 15;

			ByTable possible_chems = null;
			dynamic rid = null;
			dynamic new_chem = null;

			possible_chems = new ByTable()
				.Set( "rezadone", 200 )
				.Set( "peridaxon", 200 )
				.Set( "cryoxadone", 100 )
				.Set( "radium", 100 )
				.Set( "plasticide", 100 )
				.Set( "hyperzine", 100 )
				.Set( "thermite", 100 )
				.Set( "synaptizine", 100 )
				.Set( "leporazine", 100 )
				.Set( "potassium", 100 )
				.Set( "plasma", 100 )
				.Set( "bicaridine", 100 )
				.Set( "inaprovaline", 100 )
				.Set( "ryetalyn", 100 )
				.Set( "alkysine", 100 )
				.Set( "dermaline", 100 )
				.Set( "dexalin", 100 )
				.Set( "dexalinp", 75 )
				.Set( "hyronalin", 100 )
				.Set( "blood", 100 )
				.Set( "cryptobiolin", 100 )
				.Set( "mercury", 100 )
				.Set( "impedrezene", 100 )
				.Set( "stoxin", 100 )
				.Set( "cyanide", 100 )
				.Set( "neurotoxin", 100 )
				.Set( "toxin", 100 )
				.Set( "slimejelly", 75 )
				.Set( "mutationtoxin", 50 )
				.Set( "amutationtoxin", 10 )
				.Set( "space_drugs", 100 )
				.Set( "methylin", 100 )
				.Set( "carppheromones", 40 )
				.Set( "nothing", 50 )
				.Set( "mindbreaker", 100 )
				.Set( "minttoxin", 60 )
				.Set( "sugar", 100 )
				.Set( "ethylredoxrazine", 100 )
				.Set( "paroxetine", 100 )
				.Set( "tramadol", 100 )
			;

			foreach (dynamic _a in Lang13.Enumerate( this.chems )) {
				rid = _a;
				
				possible_chems.Remove( rid );
			}

			if ( !( possible_chems.len != 0 ) ) {
				return false;
			}
			new_chem = GlobalFuncs.pickweight( possible_chems );
			this.chems[new_chem] = new ByTable(new object [] { Rand13.Int( 1, ((int)( ( severity ??0) / 3 )) ), Rand13.Int( 10 - GlobalFuncs.Ceiling( ( severity ??0) / 3 ), 15 ) });
			return true;
		}

		// Function from file: seed_datums.dm
		public void randomize(  ) {
			dynamic gas = null;
			dynamic gas2 = null;
			int? additional_chems = null;
			int? x = null;
			int carnivore_prob = 0;
			int vine_prob = 0;
			int juicy_prob = 0;

			this.roundstart = false;
			this.seed_name = "strange plant";
			this.display_name = "strange plants";
			this.mysterious = true;
			this.seed_noun = Rand13.Pick(new object [] { "spores", "nodes", "cuttings", "seeds" });
			this.products = new ByTable(new object [] { Rand13.PickFromTable( Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) ) - typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) ) });
			this.potency = Rand13.Int( 5, 30 );
			this.randomize_icon();

			if ( Rand13.PercentChance( 40 ) ) {
				this.harvest_repeat = 1;
			}

			if ( Rand13.PercentChance( 5 ) ) {
				this.consume_gasses = new ByTable();
				gas = Rand13.Pick(new object [] { "oxygen", "nitrogen", "plasma", "carbon_dioxide" });
				this.consume_gasses[gas] = Rand13.Int( 3, 9 );
			}

			if ( Rand13.PercentChance( 5 ) ) {
				this.exude_gasses = new ByTable();
				gas2 = Rand13.Pick(new object [] { "oxygen", "nitrogen", "plasma", "carbon_dioxide" });
				this.exude_gasses[gas2] = Rand13.Int( 3, 9 );
			}
			this.chems = new ByTable();

			if ( Rand13.PercentChance( 80 ) ) {
				this.chems["nutriment"] = new ByTable(new object [] { Rand13.Int( 1, 5 ), Rand13.Int( 5, 10 ) });
			}
			additional_chems = Rand13.Int( 0, 5 );
			x = null;
			x = 1;

			while (( x ??0) <= ( additional_chems ??0)) {
				
				if ( !this.add_random_chemical() ) {
					break;
				}
				x++;
			}

			if ( Rand13.PercentChance( 90 ) ) {
				this.nutrient_consumption = Rand13.Int( 30 ) / 100;
			} else {
				this.nutrient_consumption = 0;
			}

			if ( Rand13.PercentChance( 90 ) ) {
				this.water_consumption = Rand13.Int( 10 );
			} else {
				this.water_consumption = 0;
			}
			this.ideal_heat = Rand13.Int( 273, 313 );
			this.heat_tolerance = Rand13.Int( 10, 30 );
			this.ideal_light = Rand13.Int( 2, 10 );
			this.light_tolerance = Rand13.Int( 2, 7 );
			this.toxins_tolerance = Rand13.Int( 2, 7 );
			this.pest_tolerance = Rand13.Int( 2, 7 );
			this.weed_tolerance = Rand13.Int( 2, 7 );
			this.lowkpa_tolerance = Rand13.Int( 10, 50 );
			this.highkpa_tolerance = Rand13.Int( 100, 300 );

			if ( Rand13.PercentChance( 5 ) ) {
				this.alter_temp = 1;
			}
			carnivore_prob = Rand13.Int( 100 );

			if ( carnivore_prob < 5 ) {
				this.carnivorous = 2;
			} else if ( carnivore_prob < 10 ) {
				this.carnivorous = 1;
			}

			if ( Rand13.PercentChance( 5 ) ) {
				this.parasite = 1;
			}
			vine_prob = Rand13.Int( 100 );

			if ( vine_prob < 5 ) {
				this.spread = 2;
			} else if ( vine_prob < 10 ) {
				this.spread = 1;
			}

			if ( Rand13.PercentChance( 10 ) ) {
				this.biolum = 1;
				this.biolum_colour = "#" + GlobalFuncs.get_random_colour( true );
			}

			if ( Rand13.PercentChance( 5 ) ) {
				this.hematophage = 1;
			}

			if ( Rand13.PercentChance( 5 ) ) {
				this.thorny = 1;
			}

			if ( Rand13.PercentChance( 5 ) ) {
				this.stinging = 1;
			}

			if ( Rand13.PercentChance( 5 ) ) {
				this.ligneous = 1;
			}
			juicy_prob = Rand13.Int( 100 );

			if ( juicy_prob < 5 ) {
				this.juicy = 2;
			} else if ( juicy_prob < 10 ) {
				this.juicy = 1;
			}
			this.endurance = Rand13.Int( 60, 100 );
			this.yield = Rand13.Int( 2, 15 );
			this.maturation = Rand13.Int( 3, 15 );
			this.production = Rand13.Int( 3, 10 );
			this.lifespan = Rand13.Int( 4, 15 ) * 5;
			return;
		}

		// Function from file: hydroponics_mutations.dm
		public dynamic get_mutant_variant(  ) {
			
			if ( !( this.mutants != null ) || !( this.mutants.len != 0 ) || this.immutable > 0 ) {
				return 0;
			}
			return Rand13.PickFromTable( this.mutants );
		}

	}

}