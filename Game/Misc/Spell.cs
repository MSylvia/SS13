// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Spell : Game_Data {

		public dynamic name = "Spell";
		public string desc = "A spell";
		public string panel = "Spells";
		public string school = "evocation";
		public string charge_type = "recharge";
		public int charge_max = 100;
		public int charge_counter = 0;
		public string still_recharging_msg = "<span class='notice'>The spell is still recharging.</span>";
		public int? silenced = 0;
		public string holder_var_type = "bruteloss";
		public int holder_var_amount = 20;
		public int spell_flags = 2;
		public dynamic invocation = "HURP DURP";
		public string invocation_type = "none";
		public int? range = 7;
		public string message = "";
		public string selection_type = "view";
		public Ent_Dynamic holder = null;
		public int? duration = 0;
		public ByTable spell_levels = new ByTable().Set( "speed", 0 ).Set( "power", 0 );
		public ByTable level_max = new ByTable().Set( "total", 4 ).Set( "speed", 4 ).Set( "power", 0 );
		public int cooldown_reduc = 0;
		public bool delay_reduc = false;
		public int cooldown_min = 0;
		public bool overlay = false;
		public string overlay_icon = "icons/obj/wizard.dmi";
		public string overlay_icon_state = "spell";
		public bool overlay_lifespan = false;
		public bool sparks_spread = false;
		public int sparks_amt = 0;
		public int smoke_spread = 0;
		public int smoke_amt = 0;
		public int critfailchance = 0;
		public int cast_delay = 1;
		public string cast_sound = "";
		public string hud_state = "";
		public string override_base = "";
		public Game_Data connected_button = null;

		// Function from file: spell_code.dm
		public Spell (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.charge_counter = this.charge_max;
			return;
		}

		// Function from file: spell_code.dm
		public bool spell_do_after( Mob user = null, int delay = 0, int? numticks = null ) {
			numticks = numticks ?? 5;

			int delayfraction = 0;
			Ent_Static Location = null;
			int? originalstat = null;
			int? i = null;

			
			if ( !( user != null ) || user == null ) {
				return false;
			}

			if ( numticks == 0 ) {
				return true;
			}
			delayfraction = Num13.Floor( delay / ( numticks ??0) );
			Location = user.loc;
			originalstat = user.stat;
			i = null;
			i = 0;

			while (( i ??0) < ( numticks ??0)) {
				Task13.Sleep( delayfraction );

				if ( !( user != null ) || !( ( this.spell_flags & 17 ) != 0 ) && user.stat != originalstat || !( user.loc == Location ) ) {
					return false;
				}
				i++;
			}
			return true;
		}

		// Function from file: spell_code.dm
		public virtual dynamic quicken_spell(  ) {
			string temp = null;

			
			if ( !this.can_improve( "speed" ) ) {
				return 0;
			}
			this.spell_levels["speed"]++;

			if ( this.delay_reduc && this.cast_delay != 0 ) {
				this.cast_delay = Num13.MaxInt( 0, this.cast_delay - ( this.delay_reduc ?1:0) );
			} else if ( this.cast_delay != 0 ) {
				this.cast_delay = Num13.Floor( Num13.MaxInt( 0, Convert.ToInt32( Lang13.Initial( this, "cast_delay" ) * ( ( this.level_max["speed"] - this.spell_levels["speed"] ) / this.level_max["speed"] ) ) ) );
			}

			if ( this.charge_type == "recharge" ) {
				
				if ( this.cooldown_reduc != 0 ) {
					this.charge_max = Num13.MaxInt( this.cooldown_min, this.charge_max - this.cooldown_reduc );
				} else {
					this.charge_max = Num13.Floor( Num13.MaxInt( this.cooldown_min, Convert.ToInt32( Lang13.Initial( this, "charge_max" ) * ( ( this.level_max["speed"] - this.spell_levels["speed"] ) / this.level_max["speed"] ) ) ) );
				}
			}

			if ( this.charge_max < this.charge_counter ) {
				this.charge_counter = this.charge_max;
			}
			temp = "";
			this.name = Lang13.Initial( this, "name" );

			dynamic _a = this.level_max["speed"] - this.spell_levels["speed"]; // Was a switch-case, sorry for the mess.
			if ( _a==3 ) {
				temp = "You have improved " + this.name + " into Efficient " + this.name + ".";
				this.name = "Efficient " + this.name;
			} else if ( _a==2 ) {
				temp = "You have improved " + this.name + " into Quickened " + this.name + ".";
				this.name = "Quickened " + this.name;
			} else if ( _a==1 ) {
				temp = "You have improved " + this.name + " into Free " + this.name + ".";
				this.name = "Free " + this.name;
			} else if ( _a==0 ) {
				temp = "You have improved " + this.name + " into Instant " + this.name + ".";
				this.name = "Instant " + this.name;
			}
			return temp;
		}

		// Function from file: spell_code.dm
		public virtual dynamic empower_spell(  ) {
			return null;
		}

		// Function from file: spell_code.dm
		public bool can_improve( string upgrade_type = null ) {
			
			if ( Convert.ToDouble( this.level_max["total"] ) <= Convert.ToDouble( this.spell_levels["speed"] + this.spell_levels["power"] ) ) {
				return false;
			}

			if ( Lang13.Bool( upgrade_type ) && false && false ) {
				
				if ( Convert.ToDouble( this.spell_levels[upgrade_type] ) >= Convert.ToDouble( this.level_max[upgrade_type] ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: spell_code.dm
		[VerbInfo( name: "invocation" )]
		[VerbArg( 1, InputType.Mob )]
		public virtual void f_invocation( Ent_Dynamic user = null, ByTable targets = null ) {
			user = user ?? Task13.User;

			
			switch ((string)( this.invocation_type )) {
				case "shout":
					
					if ( Rand13.PercentChance( 50 ) ) {
						user.say( this.invocation );
					} else {
						user.say( GlobalFuncs.replacetext( this.invocation, " ", "`" ) );
					}
					break;
				case "whisper":
					
					if ( Rand13.PercentChance( 50 ) ) {
						user.__CallVerb("Whisper", this.invocation );
					} else {
						user.__CallVerb("Whisper", GlobalFuncs.replacetext( this.invocation, " ", "`" ) );
					}
					break;
				case "emote":
					((Mob)user).emote( "me", 1, this.invocation );
					break;
			}
			return;
		}

		// Function from file: spell_code.dm
		public bool take_charge( Ent_Dynamic user = null, bool? skipcharge = null ) {
			user = user ?? user;

			
			if ( !( skipcharge == true ) ) {
				
				switch ((string)( this.charge_type )) {
					case "recharge":
						this.charge_counter = 0;
						this.process();
						return true;
						break;
					case "charges":
						this.charge_counter--;
						return true;
						break;
					case "holdervar":
						this.adjust_var( user, this.holder_var_type, this.holder_var_amount );
						return true;
						break;
				}
				return false;
			}
			return true;
		}

		// Function from file: spell_code.dm
		public bool check_charge( bool? skipcharge = null, Mob user = null ) {
			
			if ( !( skipcharge == true ) ) {
				
				switch ((string)( this.charge_type )) {
					case "recharge":
						
						if ( this.charge_counter < this.charge_max ) {
							GlobalFuncs.to_chat( user, this.still_recharging_msg );
							return false;
						}
						break;
					case "charges":
						
						if ( !( this.charge_counter != 0 ) ) {
							GlobalFuncs.to_chat( user, "<span class='notice'>" + this.name + " has no charges left.</span>" );
							return false;
						}
						break;
				}
			}
			return true;
		}

		// Function from file: spell_code.dm
		public bool cast_check( bool? skipcharge = null, Mob user = null ) {
			skipcharge = skipcharge ?? false;
			user = user ?? Task13.User;

			int ourz = 0;
			dynamic T = null;
			dynamic T2 = null;
			Mob SA = null;
			dynamic spell = null;

			Interface13.Stat( null, user.spell_list.Contains( this ) );

			if ( !( user == null ) && this.holder == user ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You shouldn't have this spell! Something's wrong.</span>" );
				return false;
			}

			if ( ( this.silenced ??0) > 0 ) {
				return false;
			}

			if ( Lang13.Bool( user.reagents ) && ((Reagents)user.reagents).has_reagent( "zombiepowder" ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You just can't seem to focus enough to do this.</span>" );
				return false;
			}
			ourz = user.z;

			if ( !( ourz != 0 ) ) {
				T = GlobalFuncs.get_turf( user );

				if ( !Lang13.Bool( T ) ) {
					return false;
				}
				ourz = Convert.ToInt32( T.z );
			}

			if ( GlobalVars.map.zLevels.len < ourz || !( ourz != 0 ) ) {
				Game13.log.WriteMsg( "##WARNING: " + new Txt().item( user ).str( " is somehow on a zlevel " ).item( ( ourz > GlobalVars.map.zLevels.len ? "higher" : "lower" ) ).str( " than our zlevels list! " ).item( GlobalVars.map.zLevels.len ).str( " level" ).s().str( ", " ).item( GlobalVars.map.nameLong ).str( " - " ).item( GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( user ) ) ).ToString() + " in " + "code/modules/spells/spell_code.dm" + " at line " + 219 + " src: " + this + " usr: " + Task13.User + "." );
				return false;
			}

			if ( GlobalVars.map.zLevels[ourz] is ZLevel_Centcomm && ( this.spell_flags & 8 ) != 0 ) {
				return false;
			}

			if ( ( this.spell_flags & 256 ) != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( 1, this.holder ) )) {
					T2 = _a;
					

					if ( GlobalFuncs.findNullRod( T2 ) ) {
						return false;
					}
				}
			}

			if ( user is Mob_Living_SimpleAnimal && this.holder == user ) {
				SA = user;

				if ( Lang13.Bool( ((dynamic)SA).purge ) ) {
					GlobalFuncs.to_chat( SA, "<span class='warning'>The nullrod's power interferes with your own!</span>" );
					return false;
				}
			}

			if ( !this.check_charge( skipcharge, user ) ) {
				return false;
			}

			if ( !( ( this.spell_flags & 1 ) != 0 ) && this.holder == user ) {
				
				if ( Lang13.Bool( user.stat ) && !( ( this.spell_flags & 16 ) != 0 ) ) {
					GlobalFuncs.to_chat( Task13.User, "Not when you're incapacitated." );
					return false;
				}

				if ( user is Mob_Living_Carbon_Human || user is Mob_Living_Carbon_Monkey && !false ) {
					
					if ( user.wear_mask is Obj_Item_Clothing_Mask_Muzzle ) {
						GlobalFuncs.to_chat( user, "Mmmf mrrfff!" );
						return false;
					}
				}
			}
			spell = Lang13.FindIn( typeof(Spell_Noclothes), user.spell_list );

			if ( ( this.spell_flags & 2 ) != 0 && !( Lang13.Bool( spell ) && spell is Spell_Noclothes ) && this.holder == user ) {
				
				if ( !user.wearing_wiz_garb() ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: spell_code.dm
		public virtual void after_cast( ByTable targets = null ) {
			Ent_Static target = null;
			dynamic location = null;
			Effect_Effect_System_SparkSpread sparks = null;
			Effect_Effect_System_SmokeSpread smoke = null;
			Effect_Effect_System_SmokeSpread_Bad smoke2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( targets, typeof(Ent_Static) )) {
				target = _a;
				
				location = GlobalFuncs.get_turf( target );

				if ( target is Mob_Living && Lang13.Bool( this.message ) ) {
					GlobalFuncs.to_chat( target, "" + this.message );
				}

				if ( this.sparks_spread ) {
					sparks = new Effect_Effect_System_SparkSpread();
					sparks.set_up( this.sparks_amt, 0, location );
					sparks.start();
				}

				if ( this.smoke_spread != 0 ) {
					
					if ( this.smoke_spread == 1 ) {
						smoke = new Effect_Effect_System_SmokeSpread();
						smoke.set_up( this.smoke_amt, 0, location );
						smoke.start();
					} else if ( this.smoke_spread == 2 ) {
						smoke2 = new Effect_Effect_System_SmokeSpread_Bad();
						smoke2.set_up( this.smoke_amt, 0, location );
						smoke2.start();
					}
				}
			}
			return;
		}

		// Function from file: spell_code.dm
		public virtual ByTable before_cast( ByTable targets = null ) {
			ByTable valid_targets = null;
			Ent_Static target = null;
			Ent_Static location = null;
			Obj_Effect_Overlay spell = null;

			valid_targets = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( targets, typeof(Ent_Static) )) {
				target = _a;
				
				Interface13.Stat( null, GlobalFuncs.view_or_range( this.range, Task13.User, this.selection_type ).Contains( target ) );

				if ( !( target is Ent_Static ) ) {
					continue;
				}
				valid_targets.Add( target );

				if ( this.overlay ) {
					location = null;

					if ( target is Mob_Living ) {
						location = target.loc;
					} else if ( target is Tile ) {
						location = target;
					}
					spell = new Obj_Effect_Overlay( location );
					spell.icon = this.overlay_icon;
					spell.icon_state = this.overlay_icon_state;
					spell.anchored = 1;
					spell.density = false;
					Task13.Schedule( this.overlay_lifespan ?1:0, (Task13.Closure)(() => {
						GlobalFuncs.qdel( spell );
						spell = null;
						return;
					}));
				}
			}
			return valid_targets;
		}

		// Function from file: spell_code.dm
		public void adjust_var( Ent_Dynamic target = null, string type = null, int amount = 0 ) {
			target = target ?? Task13.User;

			
			switch ((string)( type )) {
				case "bruteloss":
					((Mob_Living)target).adjustBruteLoss( amount );
					break;
				case "fireloss":
					((Mob_Living)target).adjustFireLoss( amount );
					break;
				case "toxloss":
					((Mob_Living)target).adjustToxLoss( amount );
					break;
				case "oxyloss":
					((Mob_Living)target).adjustOxyLoss( amount );
					break;
				case "stunned":
					((Mob)target).AdjustStunned( amount );
					break;
				case "weakened":
					((Mob)target).AdjustWeakened( amount );
					break;
				case "paralysis":
					((Mob)target).AdjustParalysis( amount );
					break;
				default:
					target.vars[type] += amount;
					break;
			}
			return;
		}

		// Function from file: spell_code.dm
		public void critfail( ByTable targets = null, Mob user = null ) {
			return;
		}

		// Function from file: spell_code.dm
		public virtual bool cast( ByTable targets = null, Mob user = null ) {
			return false;
		}

		// Function from file: spell_code.dm
		public virtual void perform( Mob user = null, bool? skipcharge = null, Tile_Simulated T = null ) {
			user = user ?? Task13.User;
			skipcharge = skipcharge ?? false;

			ByTable targets = null;

			
			if ( !( this.holder != null ) ) {
				this.holder = user;
			}

			if ( !this.cast_check( skipcharge, user ) ) {
				return;
			}

			if ( this.cast_delay != 0 && !this.spell_do_after( user, this.cast_delay ) ) {
				return;
			}
			targets = this.choose_targets( user );

			if ( !this.cast_check( skipcharge, user ) ) {
				return;
			}

			if ( targets != null && targets.len != 0 ) {
				this.f_invocation( user, targets );
				this.take_charge( user, skipcharge );
				this.before_cast( targets );
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>" + user.real_name + " (" + user.ckey + ") cast the spell " + this.name + ".</font>" );

				if ( Rand13.PercentChance( this.critfailchance ) ) {
					this.critfail( targets, user );
				} else {
					this.cast( targets, user );
				}
				this.after_cast( targets );
			}
			return;
		}

		// Function from file: spell_code.dm
		public virtual ByTable choose_targets( Mob user = null ) {
			user = user ?? Task13.User;

			return null;
		}

		// Function from file: spell_code.dm
		public virtual void process(  ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (this.charge_counter < this.charge_max) {
					
					if ( this.holder != null && !this.holder.timestopped ) {
						this.charge_counter++;
					}
					Task13.Sleep( 1 );
				}
				return;
			}));
			return;
		}

	}

}