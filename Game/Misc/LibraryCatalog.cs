// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class LibraryCatalog : Game_Data {

		public ByTable cached_books = new ByTable();

		// Function from file: lib_machines.dm
		public dynamic getBookByID( string id = null ) {
			double? sqlid = null;
			DBQuery query = null;
			ByTable results = null;
			Cachedbook CB = null;

			
			if ( this.cached_books.Contains( "" + id ) ) {
				return this.cached_books["" + id];
			}
			sqlid = String13.ParseNumber( id );

			if ( !Lang13.Bool( sqlid ) ) {
				return null;
			}
			query = GlobalVars.dbcon_old.NewQuery( "SELECT  id, author, title, category, ckey  FROM library WHERE id=" + sqlid );
			query.Execute();
			results = new ByTable();

			while (query.NextRow()) {
				CB = new Cachedbook();
				CB.LoadFromRow( new ByTable().Set( "id", query.item[1] ).Set( "author", query.item[2] ).Set( "title", query.item[3] ).Set( "category", query.item[4] ).Set( "ckey", query.item[5] ) );
				results.Add( CB );
				this.cached_books["" + id] = CB;
				return CB;
			}
			return results;
		}

		// Function from file: lib_machines.dm
		public void rmBookByID( dynamic user = null, string id = null ) {
			Cachedbook CB = null;
			double? sqlid = null;
			DBQuery query = null;

			
			if ( this.cached_books.Contains( "" + id ) ) {
				CB = this.cached_books["" + id];

				if ( CB.programmatic ) {
					GlobalFuncs.to_chat( user, "<span class='danger'>That book cannot be removed from the system, as it does not actually exist in the database.</span>" );
					return;
				}
			}
			sqlid = String13.ParseNumber( id );

			if ( !Lang13.Bool( sqlid ) ) {
				return;
			}
			query = GlobalVars.dbcon_old.NewQuery( "DELETE FROM library WHERE id=" + sqlid );
			query.Execute();
			return;
		}

		// Function from file: lib_machines.dm
		public void initialize(  ) {
			int newid = 0;
			dynamic typepath = null;
			dynamic B = null;
			Cachedbook CB = null;

			newid = 1;

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item_Weapon_Book_Manual) ) - typeof(Obj_Item_Weapon_Book_Manual) )) {
				typepath = _a;
				
				B = Lang13.Call( typepath, null );
				CB = new Cachedbook();
				CB.forbidden = Lang13.Bool( B.forbidden );
				CB.title = B.name;
				CB.author = B.author;
				CB.programmatic = true;
				CB.path = typepath;
				CB.id = "M" + newid;
				newid++;
				this.cached_books["" + CB.id] = CB;
			}
			return;
		}

	}

}