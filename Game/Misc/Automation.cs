// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation : Game_Data {

		public string name = "Base Automation";
		public string label = "Unnamed Script";
		public string desc = "No Description.";
		public Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation parent = null;
		public ByTable valid_child_returntypes = new ByTable();
		public ByTable children = new ByTable();
		public bool? returntype = false;

		// Function from file: statements.dm
		public Automation ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) {
			this.parent = aa;
			return;
		}

		// Function from file: statements.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			int? ghost_flags = null;
			bool norange = false;
			bool new_child = false;
			string confirm = null;
			Automation A = null;
			dynamic A2 = null;
			string confirm2 = null;
			Automation A3 = null;
			dynamic A4 = null;

			ghost_flags = 0;

			if ( this.parent.ghost_write ) {
				ghost_flags |= 1;
			}

			if ( !GlobalFuncs.canGhostWrite( Task13.User, this.parent, "", ghost_flags ) ) {
				
				if ( Task13.User.restrained() || Task13.User.lying == true || Lang13.Bool( Task13.User.stat ) ) {
					return 1;
				}

				if ( !Lang13.Bool( Task13.User.dexterity_check() ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You don't have the dexterity to do this!</span>" );
					return 1;
				}
				norange = false;

				if ( Task13.User.mutations != null && Task13.User.mutations.len != 0 ) {
					Interface13.Stat( null, Task13.User.mutations.Contains( 1 ) );

					if ( false ) {
						norange = true;
					}
				}

				if ( !norange ) {
					
					if ( ( !GlobalFuncs.in_range( this.parent, Task13.User ) || !( this.parent.loc is Tile ) ) && !( Task13.User is Mob_Living_Silicon ) ) {
						return 1;
					}
				}
			} else if ( !this.parent.custom_aghost_alerts ) {
				GlobalFuncs.log_adminghost( "" + GlobalFuncs.key_name( Task13.User ) + " screwed with " + this.parent + " (" + href + ")!" );
			}

			if ( Lang13.Bool( href_list["add"] ) ) {
				new_child = this.selectValidChildFor( Task13.User );

				if ( !new_child ) {
					return 1;
				}
				this.children.Add( new_child );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["remove"] ) ) {
				
				if ( href_list["remove"] == "*" ) {
					confirm = Interface13.Alert( "Are you sure you want to remove ALL automations?", "Automations", "Yes", "No" );

					if ( confirm == "No" ) {
						return 0;
					}

					foreach (dynamic _a in Lang13.Enumerate( this.children, typeof(Automation) )) {
						A = _a;
						
						A.OnRemove();
						this.children.Remove( A );
					}
				} else {
					A2 = Lang13.FindObj( href_list["remove"] );

					if ( !Lang13.Bool( A2 ) ) {
						return 1;
					}
					confirm2 = Interface13.Alert( "Are you sure you want to remove this automation?", "Automations", "Yes", "No" );

					if ( confirm2 == "No" ) {
						return 0;
					}
					((Automation)A2).OnRemove();
					this.children.Remove( A2 );
				}
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["reset"] ) ) {
				
				if ( href_list["reset"] == "*" ) {
					
					foreach (dynamic _b in Lang13.Enumerate( this.children, typeof(Automation) )) {
						A3 = _b;
						
						A3.OnReset();
					}
				} else {
					A4 = Lang13.FindObj( href_list["reset"] );

					if ( !Lang13.Bool( A4 ) ) {
						return 1;
					}
					((Automation)A4).OnReset();
				}
				this.parent.updateUsrDialog();
				return 1;
			}
			this.parent.add_fingerprint( Task13.User );
			return 0;
		}

		// Function from file: statements.dm
		public bool selectValidChildFor( Mob user = null, ByTable returntypes = null ) {
			returntypes = returntypes ?? this.valid_child_returntypes;

			return this.parent.selectValidChildFor( this, user, returntypes );
		}

		// Function from file: statements.dm
		public bool fmtString( dynamic str = null ) {
			return Lang13.Bool( str ) || Lang13.Bool( "-----" );
		}

		// Function from file: statements.dm
		public virtual void Import( ByTable json = null ) {
			Interface13.Stat( null, json.Contains( "label" ) );

			if ( false ) {
				this.label = json["label"];
			}
			Interface13.Stat( null, json.Contains( "desc" ) );

			if ( false ) {
				this.desc = json["desc"];
			}
			Interface13.Stat( null, json.Contains( "children" ) );

			if ( false ) {
				this.children = this.unpackChildren( json["children"] );
			}
			return;
		}

		// Function from file: statements.dm
		public ByTable packChildren( ByTable childList = null ) {
			ByTable _default = null;

			Automation A = null;

			_default = new ByTable();

			if ( childList.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( childList, typeof(Automation) )) {
					A = _a;
					

					if ( A == null || !( A is Automation ) ) {
						_default.Add( null );
						continue;
					}
					_default.Add( new ByTable(new object [] { A.Export() }) );
				}
			}
			return _default;
		}

		// Function from file: statements.dm
		public ByTable unpackChildren( ByTable childList = null ) {
			ByTable _default = null;

			ByTable cData = null;
			Type Atype = null;
			dynamic A = null;

			_default = new ByTable();

			if ( childList.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( childList, typeof(ByTable) )) {
					cData = _a;
					

					if ( cData == null || !false ) {
						_default.Add( null );
						continue;
					}
					Atype = Lang13.FindClass( cData["type"] );
					Interface13.Stat( null, GlobalVars.automation_types.Contains( Atype ) );

					if ( !( cData == null || !false ) ) {
						continue;
					}
					A = Lang13.Call( Atype, this.parent );
					((Automation)A).Import( cData );
					_default.Add( A );
				}
			}
			return _default;
		}

		// Function from file: statements.dm
		public dynamic unpackChild( ByTable cData = null ) {
			Type Atype = null;
			dynamic A = null;

			
			if ( cData == null || !false ) {
				return null;
			}
			Atype = Lang13.FindClass( cData["type"] );
			Interface13.Stat( null, GlobalVars.automation_types.Contains( Atype ) );

			if ( !( cData == null || !false ) ) {
				return null;
			}
			A = Lang13.Call( Atype, this.parent );
			((Automation)A).Import( cData );
			return A;
		}

		// Function from file: statements.dm
		public virtual ByTable Export(  ) {
			ByTable R = null;
			ByTable C = null;
			Automation A = null;

			R = new ByTable().Set( "type", this.type );

			if ( Lang13.Initial( this, "label" ) != this.label ) {
				R["label"] = this.label;
			}

			if ( Lang13.Initial( this, "desc" ) != this.desc ) {
				R["desc"] = this.desc;
			}

			if ( this.children.len != 0 ) {
				C = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.children, typeof(Automation) )) {
					A = _a;
					
					C.Add( new ByTable(new object [] { A.Export() }) );
				}
				R["children"] = C;
			}
			return R;
		}

		// Function from file: statements.dm
		public virtual dynamic Evaluate(  ) {
			return 0;
		}

		// Function from file: statements.dm
		public virtual bool process(  ) {
			return false;
		}

		// Function from file: statements.dm
		public void OnRemove(  ) {
			return;
		}

		// Function from file: statements.dm
		public void OnReset(  ) {
			return;
		}

		// Function from file: statements.dm
		public virtual string GetText(  ) {
			return "" + this.type + " doesn't override GetText()!";
		}

	}

}