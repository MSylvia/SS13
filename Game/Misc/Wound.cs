// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wound : Game_Data {

		public ByTable stages = null;
		public int current_stage = 0;
		public string desc = "";
		public double damage = 0;
		public double bleed_timer = 0;
		public bool min_damage = false;
		public string damage_type = "cut";
		public bool needs_treatment = false;
		public bool bandaged = false;
		public bool clamped = false;
		public bool salved = false;
		public bool disinfected = false;
		public int created = 0;
		public int amount = 1;
		public int max_bleeding_stage = 1;
		public bool v_internal = false;
		public double germ_level = 0;
		public ByTable desc_list = new ByTable();
		public ByTable damage_list = new ByTable();

		// Function from file: wound.dm
		public Wound ( int damage = 0 ) {
			dynamic V = null;

			this.created = Game13.time;

			foreach (dynamic _a in Lang13.Enumerate( this.stages )) {
				V = _a;
				
				this.desc_list.Add( V );
				this.damage_list.Add( this.stages[V] );
			}
			this.damage = damage;
			this.next_stage();
			this.heal_damage( 0 );
			this.max_bleeding_stage = this.desc_list.len - this.max_bleeding_stage;
			this.bleed_timer += damage / 0.75;
			return;
		}

		// Function from file: wound.dm
		public bool bleeding(  ) {
			return ( this.damage > 30 || this.bleed_timer > 0 ) && !( this.bandaged || this.clamped ) && ( this.damage_type == "bruise" && this.damage >= 20 || this.damage_type == "cut" && this.damage >= 5 ) && this.current_stage <= this.max_bleeding_stage && !this.v_internal;
		}

		// Function from file: wound.dm
		public void open_wound( double? damage = null ) {
			this.damage += damage ??0;
			this.bleed_timer += ( damage ??0) / 0.75;

			while (this.current_stage > 1 && Convert.ToDouble( this.damage_list[this.current_stage - 1] ) <= this.damage) {
				this.current_stage--;
			}
			this.desc = this.desc_list[this.current_stage];
			this.min_damage = Lang13.Bool( this.damage_list[this.current_stage] );
			return;
		}

		// Function from file: wound.dm
		public double heal_damage( double amount = 0, bool? heals_internal = null ) {
			heals_internal = heals_internal ?? false;

			int healed_damage = 0;

			
			if ( this.v_internal && !( heals_internal == true ) ) {
				return amount;
			}
			healed_damage = Num13.MinInt( ((int)( this.damage )), ((int)( amount )) );
			amount -= healed_damage;
			this.damage -= healed_damage;

			while (this.damage / this.amount < Convert.ToDouble( this.damage_list[this.current_stage] ) && this.current_stage < this.desc_list.len) {
				this.current_stage++;
			}
			this.desc = this.desc_list[this.current_stage];
			this.min_damage = Lang13.Bool( this.damage_list[this.current_stage] );
			return amount;
		}

		// Function from file: wound.dm
		public bool infection_check(  ) {
			int dam_coef = 0;

			
			if ( this.damage < 10 ) {
				return false;
			}

			if ( this.is_treated() && this.damage < 25 ) {
				return false;
			}

			if ( this.disinfected ) {
				this.germ_level = 0;
				return false;
			}

			if ( this.damage_type == "bruise" && !this.bleeding() ) {
				return false;
			}
			dam_coef = Num13.Floor( this.damage / 10 );

			switch ((string)( this.damage_type )) {
				case "bruise":
					return Rand13.PercentChance( dam_coef * 5 );
					break;
				case "fire":
					return Rand13.PercentChance( dam_coef * 10 );
					break;
				case "cut":
					return Rand13.PercentChance( dam_coef * 20 );
					break;
			}
			return false;
		}

		// Function from file: wound.dm
		public bool can_infect(  ) {
			int dam_coef = 0;

			
			if ( this.is_treated() && this.damage < 10 ) {
				return false;
			}

			if ( this.disinfected ) {
				return false;
			}
			dam_coef = Num13.Floor( this.damage / 10 );

			switch ((string)( this.damage_type )) {
				case "bruise":
					return Rand13.PercentChance( dam_coef * 5 ) && this.bleeding();
					break;
				case "fire":
					return Rand13.PercentChance( dam_coef * 10 );
					break;
				case "cut":
					return Rand13.PercentChance( dam_coef * 20 );
					break;
			}
			return false;
		}

		// Function from file: wound.dm
		public bool is_treated(  ) {
			
			if ( !this.needs_treatment ) {
				return true;
			}

			if ( this.damage_type == "bruise" || this.damage_type == "cut" ) {
				return this.bandaged;
			} else if ( this.damage_type == "fire" ) {
				return this.salved;
			}
			return false;
		}

		// Function from file: wound.dm
		public bool started_healing(  ) {
			return this.current_stage > 1;
		}

		// Function from file: wound.dm
		public bool next_stage(  ) {
			
			if ( this.current_stage + 1 > this.desc_list.len ) {
				return false;
			}
			this.current_stage++;
			this.min_damage = Lang13.Bool( this.damage_list[this.current_stage] );
			this.desc = this.desc_list[this.current_stage];
			return true;
		}

	}

}