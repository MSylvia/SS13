// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_Cavity_CloseSpace : SurgeryStep_Cavity {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.priority = 2;
			this.allowed_tools = new ByTable()
				.Set( typeof(Obj_Item_Weapon_Cautery), 100 )
				.Set( typeof(Obj_Item_Weapon_Scalpel_Laser), 100 )
				.Set( typeof(Obj_Item_Clothing_Mask_Cigarette), 75 )
				.Set( typeof(Obj_Item_Weapon_Lighter), 50 )
				.Set( typeof(Obj_Item_Weapon_Weldingtool), 25 )
			;
			this.min_duration = 60;
			this.max_duration = 80;
		}

		// Function from file: implant.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			Organ_External affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( "'s hand slips, scraping tissue inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>Your hand slips, scraping tissue inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString() );
			affected.createwound( "cut", 20 );
			return null;
		}

		// Function from file: implant.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " mends " ).item( target ).str( "'s " ).item( this.get_cavity( affected ) ).str( " cavity walls with " ).the( tool ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You mend " ).item( target ).str( "'s " ).item( this.get_cavity( affected ) ).str( " cavity walls with " ).the( tool ).item().str( ".</span>" ).ToString() );
			return false;
		}

		// Function from file: implant.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " starts mending " ).item( target ).str( "'s " ).item( this.get_cavity( affected ) ).str( " cavity wall with " ).the( tool ).item().str( "." ).ToString(), new Txt( "You start mending " ).item( target ).str( "'s " ).item( this.get_cavity( affected ) ).str( " cavity wall with " ).the( tool ).item().str( "." ).ToString() );
			((Mob_Living_Carbon_Human)target).custom_pain( "The pain in your chest is living hell!", true );
			affected.cavity = false;
			base.begin_step( (object)(user), (object)(target), target_zone, tool, (object)(surgery) );
			return false;
		}

		// Function from file: implant.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			Organ_External affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			return base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 && affected.cavity ?1:0;
		}

		// Function from file: implant.dm
		public override bool tool_quality( Obj_Item tool = null ) {
			dynamic T = null;

			
			if ( Lang13.Bool( tool.is_hot() ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.allowed_tools )) {
					T = _a;
					

					if ( Lang13.Bool( T.IsInstanceOfType( tool ) ) ) {
						return Lang13.Bool( this.allowed_tools[T] );
					}
				}
			}
			return false;
		}

	}

}