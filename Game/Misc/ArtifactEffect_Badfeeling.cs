// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ArtifactEffect_Badfeeling : ArtifactEffect {

		public ByTable messages = new ByTable(new object [] { 
											"You feel worried.", 
											"Something doesn't feel right.", 
											"You get a strange feeling in your gut.", 
											"Your instincts are trying to warn you about something.", 
											"Someone just walked over your grave.", 
											"There's a strange feeling in the air.", 
											"There's a strange smell in the air.", 
											"The tips of your fingers feel tingly.", 
											"You feel twitchy.", 
											"You have a terrible sense of foreboding.", 
											"You've got a bad feeling about this.", 
											"Your scalp prickles.", 
											"The light seems to flicker.", 
											"The shadows seem to lengthen.", 
											"The walls are getting closer.", 
											"Something is wrong"
										 });
		public ByTable drastic_messages = new ByTable(new object [] { "You've got to get out of here!", "Someone's trying to kill you!", "There's something out there!", "What's happening to you?", "OH GOD!", "HELP ME!" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.effecttype = "badfeeling";
			this.effect_type = 2;
		}

		public ArtifactEffect_Badfeeling ( dynamic location = null ) : base( (object)(location) ) {
			
		}

		// Function from file: unknown_effect_badfeeling.dm
		public override bool DoEffectPulse( dynamic holder = null ) {
			Mob_Living_Carbon_Human H = null;

			
			if ( this.holder != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this.holder, this.effectrange ), typeof(Mob_Living_Carbon_Human) )) {
					H = _a;
					

					if ( Rand13.PercentChance( 50 ) ) {
						
						if ( Rand13.PercentChance( 95 ) ) {
							GlobalFuncs.to_chat( H, "<font color='red' size='" + String13.NumberToString( Rand13.Int( 1, 5 ) ) + "'><b>" + Rand13.PickFromTable( this.drastic_messages ) + "</b></font>" );
						} else {
							GlobalFuncs.to_chat( H, "<font color='red'>" + Rand13.PickFromTable( this.messages ) + "</font>" );
						}
					}

					if ( Rand13.PercentChance( 50 ) ) {
						H.dizziness += Rand13.Int( 3, 5 );
					} else if ( Rand13.PercentChance( 25 ) ) {
						H.dizziness += Rand13.Int( 5, 15 );
					}
				}
				return true;
			}
			return false;
		}

		// Function from file: unknown_effect_badfeeling.dm
		public override bool DoEffectAura( dynamic holder = null ) {
			Mob_Living_Carbon_Human H = null;

			
			if ( this.holder != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this.holder, this.effectrange ), typeof(Mob_Living_Carbon_Human) )) {
					H = _a;
					

					if ( Rand13.PercentChance( 5 ) ) {
						
						if ( Rand13.PercentChance( 75 ) ) {
							GlobalFuncs.to_chat( H, "<font color='red'>" + Rand13.PickFromTable( this.messages ) + "</font>" );
						} else {
							GlobalFuncs.to_chat( H, "<font color='red' size='" + String13.NumberToString( Rand13.Int( 1, 5 ) ) + "'><b>" + Rand13.PickFromTable( this.drastic_messages ) + "</b></font>" );
						}
					}

					if ( Rand13.PercentChance( 10 ) ) {
						H.dizziness += Rand13.Int( 3, 5 );
					}
				}
				return true;
			}
			return false;
		}

		// Function from file: unknown_effect_badfeeling.dm
		public override bool DoEffectTouch( dynamic user = null ) {
			dynamic H = null;

			
			if ( Lang13.Bool( user ) ) {
				
				if ( user is Mob_Living_Carbon_Human ) {
					H = user;

					if ( Rand13.PercentChance( 50 ) ) {
						
						if ( Rand13.PercentChance( 75 ) ) {
							GlobalFuncs.to_chat( H, "<b><font color='red' size='" + String13.NumberToString( Rand13.Int( 1, 5 ) ) + "'><b>" + Rand13.PickFromTable( this.drastic_messages ) + "</b></font>" );
						} else {
							GlobalFuncs.to_chat( H, "<font color='red'>" + Rand13.PickFromTable( this.messages ) + "</font>" );
						}
					}

					if ( Rand13.PercentChance( 50 ) ) {
						H.dizziness += Rand13.Int( 3, 5 );
					}
				}
			}
			return false;
		}

	}

}