// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Store : Game_Data {

		public ByTable items = new ByTable();
		public ByTable orders = new ByTable();
		public Obj_Machinery_AccountDatabase linked_db = null;

		// Function from file: store.dm
		public Store (  ) {
			dynamic itempath = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Storeitem) ) - typeof(Storeitem) )) {
				itempath = _a;
				
				this.items.Add( Lang13.Call( itempath ) );
			}
			return;
		}

		// Function from file: store.dm
		public bool PlaceOrder( Mob usr = null, dynamic itemID = null, Obj_Machinery_Computer_Merch merchcomp = null ) {
			dynamic item = null;

			item = Lang13.Call( itemID );

			if ( !Lang13.Bool( item ) ) {
				return false;
			}

			if ( !this.charge( usr, Lang13.DoubleNullable( item.cost ), item, merchcomp ) ) {
				return false;
			}
			((Storeitem)item).deliver( usr, merchcomp );
			return true;
		}

		// Function from file: store.dm
		public void reconnect_database(  ) {
			Obj_Machinery_AccountDatabase DB = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.account_DBs, typeof(Obj_Machinery_AccountDatabase) )) {
				DB = _a;
				

				if ( DB.z == 1 ) {
					
					if ( !( ( DB.stat & 2 ) != 0 ) && DB.activated ) {
						this.linked_db = DB;
						break;
					}
				}
			}
			return;
		}

		// Function from file: store.dm
		public bool charge( Mob user = null, double? amount = null, dynamic item = null, Obj_Machinery_Computer_Merch merchcomp = null ) {
			dynamic card = null;
			dynamic D = null;
			string using_account = null;
			Transaction T = null;

			
			if ( !( user != null ) ) {
				return false;
			}
			card = user.get_id_card();

			if ( !Lang13.Bool( card ) ) {
				return false;
			}
			this.reconnect_database();

			if ( !( this.linked_db != null ) ) {
				return false;
			}
			D = card.virtual_wallet;
			using_account = "Virtual Wallet";

			if ( !Lang13.Bool( D ) ) {
				((Obj_Item_Weapon_Card_Id)card).update_virtual_wallet();
				D = card.virtual_wallet;
			}

			if ( ( D.money ??0) < ( amount ??0) ) {
				D = this.linked_db.attempt_account_access( card.associated_account_number, 0, 2, false );
				using_account = "Bank Account";

				if ( !Lang13.Bool( D ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have that much money on your virtual wallet!</span>" ).ToString() );
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>Unable to access your bank account.</span>" ).ToString() );
					return false;
				} else if ( ( D.security_level ??0) > 0 ) {
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have that much money on your virtual wallet!</span>" ).ToString() );
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>Lower your bank account's security settings if you wish to pay directly from it.</span>" ).ToString() );
					return false;
				} else if ( ( D.money ??0) < ( amount ??0) ) {
					GlobalFuncs.to_chat( user, new Txt().icon( merchcomp ).str( "<span class='warning'>You don't have that much money on your bank account!</span>" ).ToString() );
					return false;
				}
			}
			D.money -= amount ??0;
			GlobalFuncs.to_chat( user, new Txt().icon( merchcomp ).str( "<span class='notice'>Remaining balance (" ).item( using_account ).str( "): " ).item( D.money ).str( "$</span>" ).ToString() );
			T = new Transaction();
			T.target_name = D.owner_name;
			T.purpose = "Purchase of " + item.name;
			T.amount = -( amount ??0);
			T.date = GlobalVars.current_date_string;
			T.time = GlobalFuncs.worldtime2text();
			T.source_terminal = merchcomp.machine_id;
			D.transaction_log.Add( T );

			if ( GlobalVars.vendor_account != null ) {
				T = new Transaction();
				T.target_name = "" + GlobalFuncs.command_name() + " Merchandising";
				T.purpose = "Purchase of " + item.name;
				T.amount = amount;
				T.date = GlobalVars.current_date_string;
				T.time = GlobalFuncs.worldtime2text();
				T.source_terminal = merchcomp.machine_id;
				GlobalVars.vendor_account.transaction_log.Add( T );
			}
			return true;
		}

	}

}