// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Event_Blob : Event {

		public Obj Blob = null;
		public ByTable infected_crew = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.announceWhen = 30;
			this.endWhen = 150;
		}

		public Event_Blob ( Obj_Item_MechaParts_MechaEquipment_Tool_CableLayer tlistener = null, string tprocname = null ) : base( tlistener, tprocname ) {
			
		}

		// Function from file: blob.dm
		public override void tick(  ) {
			
			if ( !( this.Blob != null ) && this.infected_crew.len == 0 ) {
				this.kill();
				return;
			}

			if ( GlobalFuncs.IsMultiple( this.activeFor, 3 ) ) {
				this.Blob.process();
			}
			return;
		}

		// Function from file: blob.dm
		public void greetblob( dynamic user = null ) {
			GlobalFuncs.to_chat( user, @"<B><span class='warning'>You are infected by the Blob!</B>
<b>Your body is ready to give spawn to a new blob core which will eat this station.</b>
<b>Find a good location to spawn the core and then take control and overwhelm the station!</b>
<b>When you have found a location, wait until you spawn; this will happen automatically and you cannot speed up the process.</b>
<b>If you go outside of the station level, or in space, then you will die; make sure your location has lots of ground to cover.</b></span>" );
			return;
		}

		// Function from file: blob.dm
		public void burst_blobs(  ) {
			Mind blob = null;
			Mind blob2 = null;
			Mind blob3 = null;
			dynamic blob_client = null;
			dynamic location = null;
			dynamic C = null;
			Obj_Effect_Blob_Core core = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( this.infected_crew, typeof(Mind) )) {
					blob = _a;
					
					((Mob)blob.current).show_message( "<span class='alert'>You feel tired and bloated.</span>" );
				}
				Task13.Sleep( 600 );

				foreach (dynamic _b in Lang13.Enumerate( this.infected_crew, typeof(Mind) )) {
					blob2 = _b;
					
					((Mob)blob2.current).show_message( "<span class='alert'>You feel like you are about to burst.</span>" );
				}
				Task13.Sleep( 300 );

				foreach (dynamic _c in Lang13.Enumerate( this.infected_crew, typeof(Mind) )) {
					blob3 = _c;
					
					blob_client = null;
					location = null;

					if ( blob3.current is Mob_Living_Carbon ) {
						C = blob3.current;

						if ( Lang13.Bool( GlobalVars.directory[String13.CKey( blob3.key )] ) ) {
							blob_client = GlobalVars.directory[String13.CKey( blob3.key )];
							location = GlobalFuncs.get_turf( C );

							if ( Lang13.Bool( location.z ) != true || location is Tile_Space ) {
								location = null;
							}
							((Mob)C).gib();
						}
					}

					if ( Lang13.Bool( blob_client ) && Lang13.Bool( location ) ) {
						core = new Obj_Effect_Blob_Core( location, 200, blob_client, 3 );

						if ( core.overmind != null && core.overmind.mind != null ) {
							core.overmind.mind.name = blob3.name;
							this.infected_crew.Remove( blob3 );
							this.infected_crew.Add( core.overmind.mind );
						}
					}
				}
				Task13.Sleep( 100 );
				GlobalFuncs.biohazard_alert();
				return;
			}));
			return;
		}

		// Function from file: blob.dm
		public override bool start(  ) {
			ByTable possible_blobs = null;
			Mob_Living G = null;
			dynamic blob = null;

			possible_blobs = GlobalFuncs.get_minds_in_role( false );

			if ( !( possible_blobs.len != 0 ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( possible_blobs, typeof(Mob_Living) )) {
				G = _a;
				

				if ( G.client != null && !( G.client.holder != null ) && !( G.client.is_afk() != 0 ) && Lang13.Bool( G.client.desires_role( "blob" ) ) ) {
					blob = Rand13.PickFromTable( possible_blobs );
					this.infected_crew.Add( blob );
					blob.special_role = "Blob";
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + blob.key + " (ckey) has been selected as a Blob" ) ) );
					possible_blobs.Remove( blob );
					this.greetblob( blob );
					return false;
				}
			}
			return false;
		}

		// Function from file: blob.dm
		public override void announce(  ) {
			this.burst_blobs();
			return;
		}

	}

}