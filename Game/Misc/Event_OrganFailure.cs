// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Event_OrganFailure : Event {

		public int severity = 1;

		public Event_OrganFailure ( Obj_Item_MechaParts_MechaEquipment_Tool_CableLayer tlistener = null, string tprocname = null ) : base( tlistener, tprocname ) {
			
		}

		// Function from file: organ_failure.dm
		public override bool start(  ) {
			dynamic candidates = null;
			Mob_Living_Carbon_Human G = null;
			Mob_Living_Carbon_Human C = null;
			dynamic organ_name = null;
			dynamic I = null;

			candidates = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				G = _a;
				

				if ( G.mind != null && Lang13.Bool( G.mind.current ) && Convert.ToInt32( G.mind.current.stat ) != 2 ) {
					candidates += G;
				}
			}

			if ( !( candidates.len != 0 ) ) {
				return false;
			}
			candidates = GlobalFuncs.shuffle( candidates );

			while (this.severity > 0 && candidates.len != 0) {
				C = candidates[1];

				if ( !( C != null ) ) {
					continue;
				}
				organ_name = Rand13.PickFromTable( C.internal_organs_by_name );
				I = C.internal_organs_by_name[organ_name];

				if ( !Lang13.Bool( I ) ) {
					candidates.Remove( C );
					this.severity--;
					continue;
				}
				I.damage += Rand13.Int( 5, 10 ) * this.severity;
				candidates.Remove( C );
				this.severity--;
			}
			return false;
		}

		// Function from file: organ_failure.dm
		public override void announce(  ) {
			GlobalFuncs.biohazard_alert( Rand13.Int( 3, 7 ) );
			return;
		}

		// Function from file: organ_failure.dm
		public override void setup(  ) {
			this.announceWhen = Rand13.Int( 0, 150 );
			this.endWhen = this.announceWhen + 1;
			this.severity = Rand13.Int( 1, 4 );
			return;
		}

	}

}