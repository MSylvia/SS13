// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Map : Game_Data {

		public string nameShort = "";
		public string nameLong = "";
		public ByTable zLevels = new ByTable();
		public int zMainStation = 1;
		public int zCentcomm = 2;
		public int zTCommSat = 3;
		public int zDerelict = 4;
		public int zAsteroid = 5;
		public int zDeepSpace = 6;
		public int tDomeX = 0;
		public int tDomeY = 0;
		public int tDomeZ = 0;
		public string map_dir = "";
		public bool dorf = false;

		// Function from file: _map.dm
		public Map (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.loadZLevels( this.zLevels );
			return;
		}

		// Function from file: _map.dm
		public void addZLevel( dynamic level = null, double? z_to_use = null ) {
			z_to_use = z_to_use ?? 0;

			
			if ( !( level is ZLevel ) ) {
				Game13.log.WriteMsg( "## WARNING: " + ( "ERROR: addZLevel received " + ( Lang13.Bool( level ) ? "a bad level of type " + ( level is Type ? "" + level : "" + level.type ) : "no level at all!" ) ) );
				return;
			}

			if ( !Lang13.Bool( level.base_turf ) ) {
				level.base_turf = typeof(Tile_Space);
			}

			if ( ( z_to_use ??0) > this.zLevels.len ) {
				this.zLevels.len = ((int)( z_to_use ??0 ));
			}
			this.zLevels[z_to_use] = level;

			if ( !level.movementJammed ) {
				GlobalVars.accessable_z_levels.Add( new ByTable().Set( "" + z_to_use, level.movementChance ) );
			}
			return;
		}

		// Function from file: _map.dm
		public void loadZLevels( ByTable levelPaths = null ) {
			double? i = null;
			dynamic path = null;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, levelPaths.len )) {
				i = _a;
				
				path = levelPaths[i];
				this.addZLevel( Lang13.Call( path ), i );
			}
			return;
		}

	}

}