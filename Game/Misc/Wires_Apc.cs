// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Apc : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Power_Apc);
			this.wire_count = 4;
		}

		public Wires_Apc ( Obj holder = null ) : base( holder ) {
			
		}

		// Function from file: apc.dm
		public override void UpdateCut( double? index = null, bool mended = false ) {
			Ent_Static A = null;

			A = this.holder;

			switch ((int?)( index )) {
				case 2:
				case 4:
					
					if ( !mended ) {
						((dynamic)A).shock( Task13.User, 50 );
						((dynamic)A).shorted = 1;
					} else if ( !( this.IsIndexCut( GlobalVars.APC_WIRE_MAIN_POWER1 ) != 0 ) && !( this.IsIndexCut( GlobalVars.APC_WIRE_MAIN_POWER2 ) != 0 ) ) {
						((dynamic)A).shorted = 0;
						((dynamic)A).shock( Task13.User, 50 );
					}
					break;
				case 8:
					
					if ( !mended ) {
						
						if ( Lang13.Bool( ((dynamic)A).aidisabled ) == false ) {
							((dynamic)A).aidisabled = 1;
						}
					} else if ( Lang13.Bool( ((dynamic)A).aidisabled ) == true ) {
						((dynamic)A).aidisabled = 0;
					}
					break;
			}
			((dynamic)A).updateDialog();
			return;
		}

		// Function from file: apc.dm
		public override void UpdatePulsed( double? index = null ) {
			Ent_Static A = null;

			A = this.holder;

			switch ((int?)(index)) {
				case 1:
					((dynamic)A).locked = 0;
					Task13.Schedule( 300, (Task13.Closure)(() => {
						
						if ( A != null ) {
							((dynamic)A).locked = 1;
							((dynamic)A).updateDialog();
						}
						return;
					}));
					break;
				case 2:
				case 4:
					
					if ( Lang13.Bool( ((dynamic)A).shorted ) == false ) {
						((dynamic)A).shorted = 1;
						Task13.Schedule( 1200, (Task13.Closure)(() => {
							
							if ( A != null && !( this.IsIndexCut( GlobalVars.APC_WIRE_MAIN_POWER1 ) != 0 ) && !( this.IsIndexCut( GlobalVars.APC_WIRE_MAIN_POWER2 ) != 0 ) ) {
								((dynamic)A).shorted = 0;
								((dynamic)A).updateDialog();
							}
							return;
						}));
					}
					break;
				case 8:
					
					if ( Lang13.Bool( ((dynamic)A).aidisabled ) == false ) {
						((dynamic)A).aidisabled = 1;
						Task13.Schedule( 10, (Task13.Closure)(() => {
							
							if ( A != null && !( this.IsIndexCut( GlobalVars.APC_WIRE_AI_CONTROL ) != 0 ) ) {
								((dynamic)A).aidisabled = 0;
								((dynamic)A).updateDialog();
							}
							return;
						}));
					}
					break;
			}
			((dynamic)A).updateDialog();
			return;
		}

		// Function from file: apc.dm
		public override bool CanUse( dynamic L = null ) {
			Obj A = null;

			A = this.holder;

			if ( Lang13.Bool( ((dynamic)A).wiresexposed ) ) {
				return true;
			}
			return false;
		}

		// Function from file: apc.dm
		public override string GetInteractWindow(  ) {
			string _default = null;

			Obj A = null;

			A = this.holder;
			_default += base.GetInteractWindow();
			_default += "<br>\n" + ( Lang13.Bool( ((dynamic)A).locked ) ? "The APC is locked." : "The APC is unlocked." ) + "<br>\n" + ( Lang13.Bool( ((dynamic)A).shorted ) ? "The APCs power has been shorted." : "The APC is working properly!" ) + "<br>\n" + ( Lang13.Bool( ((dynamic)A).aidisabled ) ? "The 'AI control allowed' light is off." : "The 'AI control allowed' light is on." );
			return _default;
		}

	}

}