// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Connection : Game_Data {

		public Tile A = null;
		public dynamic B = null;
		public dynamic zoneA = null;
		public dynamic zoneB = null;
		public ConnectionEdge edge = null;
		public int state = 0;

		// Function from file: Connection.dm
		public Connection ( Tile A = null, dynamic B = null ) {
			this.A = A;
			this.B = B;
			this.zoneA = ((dynamic)A).zone;

			if ( !( B is Tile_Simulated ) ) {
				this.mark_space();
				this.edge = GlobalVars.air_master.get_edge( ((dynamic)A).zone, B );
				this.edge.add_connection( this );
			} else {
				this.zoneB = B.zone;
				this.edge = GlobalVars.air_master.get_edge( ((dynamic)A).zone, B.zone );
				this.edge.add_connection( this );
			}
			return;
		}

		// Function from file: Connection.dm
		public void update(  ) {
			int block_status = 0;
			bool b_is_space = false;

			
			if ( !( this.A is Tile_Simulated ) ) {
				this.erase();
				return;
			}
			block_status = GlobalVars.air_master.air_blocked( this.A, this.B );

			if ( ( block_status & 1 ) != 0 ) {
				this.erase();
				return;
			} else if ( ( block_status & 2 ) != 0 ) {
				
				if ( this.direct() != 0 ) {
					this.mark_indirect();
				} else {
					this.mark_direct();
				}
			}
			b_is_space = !( this.B is Tile_Simulated );

			if ( ( this.state & 4 ) != 0 ) {
				
				if ( !b_is_space ) {
					this.erase();
					return;
				}

				if ( ((dynamic)this.A).zone != this.zoneA ) {
					
					if ( !Lang13.Bool( ((dynamic)this.A).zone ) ) {
						this.erase();
						return;
					} else {
						this.edge.remove_connection( this );
						this.edge = GlobalVars.air_master.get_edge( ((dynamic)this.A).zone, this.B );
						this.edge.add_connection( this );
						this.zoneA = ((dynamic)this.A).zone;
					}
				}
				return;
			} else if ( b_is_space ) {
				this.erase();
				return;
			}

			if ( ((dynamic)this.A).zone == this.B.zone ) {
				this.erase();
				return;
			}

			if ( ((dynamic)this.A).zone != this.zoneA || Lang13.Bool( this.zoneB ) && this.B.zone != this.zoneB ) {
				
				if ( Lang13.Bool( ((dynamic)this.A).zone ) && Lang13.Bool( this.B.zone ) ) {
					this.edge.remove_connection( this );
					this.edge = GlobalVars.air_master.get_edge( ((dynamic)this.A).zone, this.B.zone );
					this.edge.add_connection( this );
					this.zoneA = ((dynamic)this.A).zone;
					this.zoneB = this.B.zone;
				} else {
					this.erase();
					return;
				}
			}
			return;
		}

		// Function from file: Connection.dm
		public void erase(  ) {
			this.edge.remove_connection( this );
			this.state |= 8;
			return;
		}

		// Function from file: Connection.dm
		public bool valid(  ) {
			return !( ( this.state & 8 ) != 0 );
		}

		// Function from file: Connection.dm
		public int direct(  ) {
			return this.state & 2;
		}

		// Function from file: Connection.dm
		public void mark_space(  ) {
			this.state |= 4;
			return;
		}

		// Function from file: Connection.dm
		public void mark_indirect(  ) {
			this.state &= 65533;
			return;
		}

		// Function from file: Connection.dm
		public void mark_direct(  ) {
			this.state |= 2;
			return;
		}

	}

}