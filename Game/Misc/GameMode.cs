// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode : Game_Data {

		public string name = "invalid";
		public string config_tag = null;
		public bool intercept_hacked = false;
		public bool votable = true;
		public bool probability = true;
		public bool station_was_nuked = false;
		public bool explosion_in_progress = false;
		public ByTable modePlayer = new ByTable();
		public ByTable restricted_jobs = new ByTable();
		public ByTable protected_jobs = new ByTable();
		public int required_players = 0;
		public int required_players_secret = 0;
		public int required_enemies = 0;
		public int recommended_enemies = 0;
		public dynamic newscaster_announcements = null;
		public string uplink_welcome = "Syndicate Uplink Console:";
		public int uplink_uses = 10;
		public bool mixed = false;
		public ByTable necromancer = new ByTable();
		public ByTable risen = new ByTable();
		public bool eldergod = true;
		public string completion_text = "";
		public ByTable deathsquad = new ByTable();
		public ByTable ert = new ByTable();
		public bool rage = false;
		public ByTable changelings = new ByTable();
		public ByTable cult = new ByTable();
		public ByTable allwords = new ByTable(new object [] { "travel", "self", "see", "hell", "blood", "join", "tech", "destroy", "other", "hide" });
		public ByTable raiders = new ByTable();
		public ByTable malf_ai = new ByTable();
		public ByTable syndicates = new ByTable();
		public ByTable head_revolutionaries = new ByTable();
		public ByTable revolutionaries = new ByTable();
		public ByTable traitors = new ByTable();
		public ByTable implanter = new ByTable();
		public ByTable implanted = new ByTable();
		public ByTable vampires = new ByTable();
		public ByTable enthralled = new ByTable();
		public ByTable thralls = new ByTable();
		public ByTable wizards = new ByTable();
		public ByTable deathsquads = new ByTable();
		public ByTable infected_monkeys = new ByTable();

		// Function from file: extended.dm
		public virtual void announce(  ) {
			GlobalFuncs.to_chat( typeof(Game13), "<B>The current game mode is - Extended Role-Playing!</B>" );
			GlobalFuncs.to_chat( typeof(Game13), "<B>Just have fun and role-play!</B>" );
			return;
		}

		// Function from file: job_objective.dm
		public bool declare_job_completion(  ) {
			string text = null;
			int numEmployees = 0;
			Mind employee = null;
			int tasks_completed = 0;
			int count = 0;
			JobObjective objective = null;

			text = "<FONT size = 2><B>Job Completion:</B></FONT>";
			numEmployees = 0;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
				employee = _b;
				

				if ( !( employee.job_objectives.len != 0 ) ) {
					continue;
				}

				if ( !Lang13.Bool( employee.assigned_role ) == "MODE" ) {
					continue;
				}
				numEmployees++;
				tasks_completed = 0;
				text += "<br>" + employee.key + " was " + employee.name + ", the " + employee.assigned_role + " (";

				if ( Lang13.Bool( employee.current ) ) {
					
					if ( Convert.ToInt32( employee.current.stat ) == 2 ) {
						text += "died";
					} else {
						text += "survived";
					}

					if ( employee.current.real_name != employee.name ) {
						text += " as " + employee.current.real_name;
					}
				} else {
					text += "body destroyed";
				}
				text += ")";
				count = 1;

				foreach (dynamic _a in Lang13.Enumerate( employee.job_objectives, typeof(JobObjective) )) {
					objective = _a;
					

					if ( objective.is_completed(  ) ) {
						text += "<br><B>Task #" + count + "</B>: " + objective.get_description() + " <font color='green'><B>Completed!</B></font>";
						GlobalFuncs.feedback_add_details( "employee_objective", "" + objective.type + "|SUCCESS" );
						tasks_completed++;
					} else {
						text += "<br><B>Task #" + count + "</B>: " + objective.get_description() + " <font color='red'>Fail.</font>";
						GlobalFuncs.feedback_add_details( "employee_objective", "" + objective.type + "|FAIL" );
					}
					count++;
				}

				if ( tasks_completed >= 1 ) {
					text += "<br><font color='green'><B>The " + employee.assigned_role + " did their fucking job!</B></font>";
					GlobalFuncs.feedback_add_details( "employee_success", "SUCCESS" );
				} else {
					text += "<br><font color='red'><B>The " + employee.assigned_role + " was a worthless sack of shit!</B></font>";
					GlobalFuncs.feedback_add_details( "employee_success", "FAIL" );
				}
			}

			if ( numEmployees > 0 ) {
				GlobalFuncs.to_chat( typeof(Game13), text );
			}
			return true;
		}

		// Function from file: wizard.dm
		public void update_wizard_icons_removed( Mind wizard_mind = null ) {
			Mind wizard = null;
			Image I = null;
			Image I2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( this.wizards, typeof(Mind) )) {
					wizard = _b;
					

					if ( Lang13.Bool( wizard.current ) ) {
						
						if ( Lang13.Bool( wizard.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( wizard.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( I.icon_state == "wizard" && ( ((dynamic)I).loc == wizard_mind.current || ((dynamic)I).loc == wizard_mind.current.loc ) ) {
									wizard.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				if ( Lang13.Bool( wizard_mind.current ) ) {
					
					if ( Lang13.Bool( wizard_mind.current.client ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( wizard_mind.current.client.images, typeof(Image) )) {
							I2 = _c;
							

							if ( I2.icon_state == "wizard" ) {
								wizard_mind.current.client.images.Remove( I2 );
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: wizard.dm
		public void update_wizard_icons_added( Mind wizard_mind = null ) {
			dynamic imageloc = null;
			Image I = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( Lang13.Bool( wizard_mind.current ) ) {
					
					if ( Lang13.Bool( wizard_mind.current.client ) ) {
						imageloc = wizard_mind.current;

						if ( wizard_mind.current.loc is Obj_Mecha ) {
							imageloc = wizard_mind.current.loc;
						}
						I = new Image( "icons/mob/mob.dmi", imageloc, "wizard", 13 );
						wizard_mind.current.client.images.Add( I );
					}
				}
				return;
			}));
			return;
		}

		// Function from file: wizard.dm
		public void update_all_wizard_icons(  ) {
			Mind wizard_mind = null;
			Image I = null;
			Mind wizard_mind2 = null;
			Mind wizard_mind_1 = null;
			dynamic imageloc = null;
			Image I2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( this.wizards, typeof(Mind) )) {
					wizard_mind = _b;
					

					if ( Lang13.Bool( wizard_mind.current ) ) {
						
						if ( Lang13.Bool( wizard_mind.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( wizard_mind.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( I.icon_state == "wizard" ) {
									wizard_mind.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( this.wizards, typeof(Mind) )) {
					wizard_mind2 = _d;
					

					if ( Lang13.Bool( wizard_mind2.current ) ) {
						
						if ( Lang13.Bool( wizard_mind2.current.client ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( this.wizards, typeof(Mind) )) {
								wizard_mind_1 = _c;
								

								if ( Lang13.Bool( wizard_mind_1.current ) ) {
									imageloc = wizard_mind_1.current;

									if ( wizard_mind_1.current.loc is Obj_Mecha ) {
										imageloc = wizard_mind_1.current.loc;
									}
									I2 = new Image( "icons/mob/mob.dmi", imageloc, "wizard", 13 );
									wizard_mind2.current.client.images.Add( I2 );
								}
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: wizard.dm
		public string auto_declare_completion_wizard(  ) {
			string text = null;
			Icon logo = null;
			int tempstate = 0;
			Mind wizard = null;
			Icon flat = null;
			Icon sprotch = null;
			int count = 0;
			bool wizardwin = false;
			Objective objective = null;
			int i = 0;
			Spell S = null;
			Icon spellicon = null;

			text = "";

			if ( this.wizards.len != 0 ) {
				logo = new Icon( "icons/mob/mob.dmi", "wizard-logo" );
				GlobalVars.end_icons.Add( logo );
				tempstate = GlobalVars.end_icons.len;
				text += "<br><img src=\"logo_" + tempstate + ".png\"> <font size=2><b>the wizards/witches were:</b></font> <img src=\"logo_" + tempstate + ".png\">";

				foreach (dynamic _c in Lang13.Enumerate( this.wizards, typeof(Mind) )) {
					wizard = _c;
					

					if ( Lang13.Bool( wizard.current ) ) {
						flat = GlobalFuncs.getFlatIcon( wizard.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + wizard.key + "</b> was <b>" + wizard.name + "</b> (";

						if ( Convert.ToInt32( wizard.current.stat ) == 2 ) {
							text += "died";
							flat.Turn( 90 );
							GlobalVars.end_icons[tempstate] = flat;
						} else {
							text += "survived";
						}

						if ( wizard.current.real_name != wizard.name ) {
							text += " as <b>" + wizard.current.real_name + "</b>";
						}
					} else {
						sprotch = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + wizard.key + "</b> was <b>" + wizard.name + "</b> (";
						text += "body destroyed";
					}
					text += ")";
					count = 1;
					wizardwin = true;

					foreach (dynamic _a in Lang13.Enumerate( wizard.objectives, typeof(Objective) )) {
						objective = _a;
						

						if ( Lang13.Bool( objective.check_completion() ) ) {
							text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='green'><B>Success!</B></font>";
							GlobalFuncs.feedback_add_details( "wizard_objective", "" + objective.type + "|SUCCESS" );
						} else {
							text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='red'>Fail.</font>";
							GlobalFuncs.feedback_add_details( "wizard_objective", "" + objective.type + "|FAIL" );
							wizardwin = false;
						}
						count++;
					}

					if ( Lang13.Bool( wizard.current ) && Convert.ToInt32( wizard.current.stat ) != 2 && wizardwin ) {
						text += "<br><font color='green'><B>The wizard was successful!</B></font>";
						GlobalFuncs.feedback_add_details( "wizard_success", "SUCCESS" );
					} else {
						text += "<br><font color='red'><B>The wizard has failed!</B></font>";
						GlobalFuncs.feedback_add_details( "wizard_success", "FAIL" );
					}

					if ( Lang13.Bool( wizard.current ) && wizard.current.spell_list != null ) {
						text += "<br><B>" + wizard.name + " used the following spells: </B>";
						i = 1;

						foreach (dynamic _b in Lang13.Enumerate( wizard.current.spell_list, typeof(Spell) )) {
							S = _b;
							
							spellicon = new Icon( "icons/mob/screen_spells.dmi", S.hud_state );
							GlobalVars.end_icons.Add( spellicon );
							tempstate = GlobalVars.end_icons.len;
							text += "<br><img src=\"logo_" + tempstate + ".png\"> " + S.name;

							if ( wizard.current.spell_list.len > i ) {
								text += ", ";
							}
							i++;
						}
					}
					text += "<br>";
				}
				text += "<HR>";
			}
			return text;
		}

		// Function from file: wizard.dm
		public bool equip_wizard( dynamic wizard_mob = null ) {
			
			if ( !( wizard_mob is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			GlobalFuncs.qdel( wizard_mob.wear_suit );
			GlobalFuncs.qdel( wizard_mob.head );
			GlobalFuncs.qdel( wizard_mob.shoes );
			GlobalFuncs.qdel( wizard_mob.r_hand );
			GlobalFuncs.qdel( wizard_mob.r_store );
			GlobalFuncs.qdel( wizard_mob.l_store );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(  ), 8 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Lightpurple( wizard_mob ), 14 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Sandal( wizard_mob ), 12 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Wizrobe( wizard_mob ), 13 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Wizard( wizard_mob ), 11 );

			if ( Convert.ToInt32( wizard_mob.backbag ) == 2 ) {
				((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack( wizard_mob ), 1 );
			}

			if ( Convert.ToInt32( wizard_mob.backbag ) == 3 ) {
				((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_SatchelNorm( wizard_mob ), 1 );
			}

			if ( Convert.ToInt32( wizard_mob.backbag ) == 4 ) {
				((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Satchel( wizard_mob ), 1 );
			}
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box( wizard_mob ), 18 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_TeleportationScroll( wizard_mob ), 16 );
			((Mob)wizard_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Spellbook( wizard_mob ), 5 );
			GlobalFuncs.to_chat( wizard_mob, "You will find a list of available spells in your spell book. Choose your magic arsenal carefully." );
			GlobalFuncs.to_chat( wizard_mob, "In your pockets you will find a teleport scroll. Use it as needed." );
			wizard_mob.mind.store_memory( "<B>Remember:</B> do not forget to prepare your spells." );
			wizard_mob.update_icons();
			return true;
		}

		// Function from file: wizard.dm
		public virtual void greet_wizard( Mind wizard = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			dynamic wikiroute = null;
			int obj_count = 0;
			Objective objective = null;

			
			if ( you_are == true ) {
				wikiroute = GlobalVars.role_wiki["wizard"];
				GlobalFuncs.to_chat( wizard.current, new Txt( "<span class='danger'>You are the Space Wizard!</span> <span class='info'><a HREF='?src=" ).Ref( wizard.current ).str( ";getwiki=" ).item( wikiroute ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
			}
			GlobalFuncs.to_chat( wizard.current, "<B>The Space Wizards Federation has given you the following tasks:</B>" );
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( wizard.objectives, typeof(Objective) )) {
				objective = _a;
				
				GlobalFuncs.to_chat( wizard.current, "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: wizard.dm
		public void name_wizard( dynamic wizard_mob = null ) {
			dynamic wizard_name_first = null;
			dynamic wizard_name_second = null;
			string randomname = null;
			string newname = null;

			
			if ( Lang13.Bool( wizard_mob.species ) && wizard_mob.species.name != "Human" ) {
				((Mob_Living_Carbon_Human)wizard_mob).set_species( "Human", true );
			}
			wizard_name_first = Rand13.PickFromTable( GlobalVars.wizard_first );
			wizard_name_second = Rand13.PickFromTable( GlobalVars.wizard_second );
			randomname = "" + wizard_name_first + " " + wizard_name_second;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				newname = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( wizard_mob, "You are the Space Wizard. Would you like to change your name to something else?", "Name change", randomname, null, InputType.Str | InputType.Null ) ), 1, 26 );

				if ( !Lang13.Bool( newname ) ) {
					newname = randomname;
				}
				wizard_mob.real_name = newname;
				wizard_mob.name = newname;

				if ( Lang13.Bool( wizard_mob.mind ) ) {
					wizard_mob.mind.name = newname;
				}
				return;
			}));
			return;
		}

		// Function from file: wizard.dm
		public void forge_wizard_objectives( Mind wizard = null ) {
			Objective_Assassinate kill_objective = null;
			Objective_Escape escape_objective = null;
			Objective_Steal steal_objective = null;
			Objective_Escape escape_objective2 = null;
			Objective_Assassinate kill_objective2 = null;
			Objective_Steal steal_objective2 = null;
			Objective_Survive survive_objective = null;
			Objective_Hijack hijack_objective = null;

			
			dynamic _a = Rand13.Int( 1, 100 ); // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=30 ) {
				kill_objective = new Objective_Assassinate();
				kill_objective.owner = wizard;
				kill_objective.find_target();
				wizard.objectives.Add( kill_objective );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), wizard.objectives ) ) ) {
					escape_objective = new Objective_Escape();
					escape_objective.owner = wizard;
					wizard.objectives.Add( escape_objective );
				}
			} else if ( 31<=_a&&_a<=60 ) {
				steal_objective = new Objective_Steal();
				steal_objective.owner = wizard;
				steal_objective.find_target();
				wizard.objectives.Add( steal_objective );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), wizard.objectives ) ) ) {
					escape_objective2 = new Objective_Escape();
					escape_objective2.owner = wizard;
					wizard.objectives.Add( escape_objective2 );
				}
			} else if ( 61<=_a&&_a<=100 ) {
				kill_objective2 = new Objective_Assassinate();
				kill_objective2.owner = wizard;
				kill_objective2.find_target();
				wizard.objectives.Add( kill_objective2 );
				steal_objective2 = new Objective_Steal();
				steal_objective2.owner = wizard;
				steal_objective2.find_target();
				wizard.objectives.Add( steal_objective2 );

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Survive), wizard.objectives ) ) ) {
					survive_objective = new Objective_Survive();
					survive_objective.owner = wizard;
					wizard.objectives.Add( survive_objective );
				}
			} else {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Hijack), wizard.objectives ) ) ) {
					hijack_objective = new Objective_Hijack();
					hijack_objective.owner = wizard;
					wizard.objectives.Add( hijack_objective );
				}
			}
			return;
		}

		// Function from file: vampire.dm
		public void remove_vampire_mind( dynamic vampire_mind = null, dynamic head = null ) {
			string _ref = null;

			
			if ( !( head is Mind ) ) {
				head = vampire_mind;
			}
			_ref = new Txt().Ref( head ).ToString();

			if ( this.thralls.Contains( _ref ) ) {
				this.thralls[_ref] -= vampire_mind;
			}
			this.enthralled.Remove( vampire_mind );
			vampire_mind.special_role = null;
			this.update_vampire_icons_removed( vampire_mind );
			((Mob_Living)vampire_mind.current).unsubLife( this );
			GlobalFuncs.to_chat( vampire_mind.current, "<span class='danger'><FONT size = 3>The fog clouding your mind clears. You remember nothing from the moment you were enthralled until now.</FONT></span>" );
			return;
		}

		// Function from file: vampire.dm
		public void update_vampire_icons_removed( dynamic vampire_mind = null ) {
			dynamic headref = null;
			dynamic head = null;
			Mind t_mind = null;
			Image I = null;
			Image I2 = null;
			Image I3 = null;

			
			foreach (dynamic _d in Lang13.Enumerate( this.thralls )) {
				headref = _d;
				
				head = Lang13.FindObj( headref );

				foreach (dynamic _b in Lang13.Enumerate( this.thralls[headref], typeof(Mind) )) {
					t_mind = _b;
					

					if ( Lang13.Bool( t_mind.current ) ) {
						
						if ( Lang13.Bool( t_mind.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( t_mind.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( ( I.icon_state == "vampthrall" || I.icon_state == "vampire" ) && ((dynamic)I).loc == vampire_mind.current ) {
									t_mind.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				if ( Lang13.Bool( head ) ) {
					
					if ( Lang13.Bool( head.current ) ) {
						
						if ( Lang13.Bool( head.current.client ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( head.current.client.images, typeof(Image) )) {
								I2 = _c;
								

								if ( ( I2.icon_state == "vampthrall" || I2.icon_state == "vampire" ) && ((dynamic)I2).loc == vampire_mind.current ) {
									head.current.client.images.Remove( I2 );
								}
							}
						}
					}
				}
			}

			if ( Lang13.Bool( vampire_mind.current ) ) {
				
				if ( Lang13.Bool( vampire_mind.current.client ) ) {
					
					foreach (dynamic _e in Lang13.Enumerate( vampire_mind.current.client.images, typeof(Image) )) {
						I3 = _e;
						

						if ( I3.icon_state == "vampthrall" || I3.icon_state == "vampire" ) {
							vampire_mind.current.client.images.Remove( I3 );
						}
					}
				}
			}
			return;
		}

		// Function from file: vampire.dm
		public void update_vampire_icons_added( Mind vampire_mind = null ) {
			string _ref = null;
			Image I = null;
			dynamic headref = null;
			Mind t_mind = null;
			dynamic head = null;
			Image I2 = null;
			Image I3 = null;
			Image I4 = null;

			_ref = new Txt().Ref( vampire_mind ).ToString();

			if ( this.thralls.Contains( _ref ) ) {
				
				if ( Lang13.Bool( vampire_mind.current ) ) {
					
					if ( Lang13.Bool( vampire_mind.current.client ) ) {
						I = new Image( "icons/mob/mob.dmi", vampire_mind.current, "vampire", 13 );
						vampire_mind.current.client.images.Add( I );
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.thralls )) {
				headref = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.thralls[headref], typeof(Mind) )) {
					t_mind = _a;
					
					head = Lang13.FindObj( headref );

					if ( Lang13.Bool( head ) ) {
						
						if ( Lang13.Bool( head.current ) ) {
							
							if ( Lang13.Bool( head.current.client ) ) {
								I2 = new Image( "icons/mob/mob.dmi", t_mind.current, "vampthrall", 13 );
								head.current.client.images.Add( I2 );
							}
						}

						if ( Lang13.Bool( t_mind.current ) ) {
							
							if ( Lang13.Bool( t_mind.current.client ) ) {
								I3 = new Image( "icons/mob/mob.dmi", head.current, "vampire", 13 );
								t_mind.current.client.images.Add( I3 );
							}
						}

						if ( Lang13.Bool( t_mind.current ) ) {
							
							if ( Lang13.Bool( t_mind.current.client ) ) {
								I4 = new Image( "icons/mob/mob.dmi", t_mind.current, "vampthrall", 13 );
								t_mind.current.client.images.Add( I4 );
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: vampire.dm
		public void greet_vampire( Mind vampire = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			string dat = null;
			int obj_count = 0;
			Objective objective = null;

			
			if ( you_are == true ) {
				dat = "<span class='danger'>You are a Vampire!</br></span>";
			}
			dat += "To bite someone, target the head and use harm intent with an empty hand. Drink blood to gain new powers and use coffins to regenerate your body if injured.\nYou are weak to holy things and starlight. Don't go into space and avoid the Chaplain, the chapel, and especially Holy Water.";
			GlobalFuncs.to_chat( vampire.current, dat );
			GlobalFuncs.to_chat( vampire.current, "<B>You must complete the following tasks:</B>" );
			vampire.current.WriteMsg( new Sound( "sound/effects/vampire_intro.ogg" ) );

			if ( Lang13.Bool( vampire.current.mind ) ) {
				
				if ( vampire.current.mind.assigned_role == "Clown" ) {
					GlobalFuncs.to_chat( vampire.current, "<span class='sinister'>Your lust for blood has allowed you to overcome your clumsy nature allowing you to wield weapons without harming yourself.</span>" );
					vampire.current.mutations.Remove( 5 );
				}
			}
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( vampire.objectives, typeof(Objective) )) {
				objective = _a;
				
				GlobalFuncs.to_chat( vampire.current, "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: vampire.dm
		public void grant_vampire_powers( dynamic vampire_mob = null ) {
			
			if ( !( vampire_mob is Mob_Living_Carbon ) ) {
				return;
			}
			((Mob_Living)vampire_mob).make_vampire();
			return;
		}

		// Function from file: vampire.dm
		public void forge_vampire_objectives( Mind vampire = null ) {
			Objective_Blood blood_objective = null;
			Objective_Assassinate kill_objective = null;
			Objective_Steal steal_objective = null;
			Objective_Escape escape_objective = null;
			Objective_Survive survive_objective = null;

			blood_objective = new Objective_Blood();
			blood_objective.owner = vampire;
			blood_objective.gen_amount_goal( 150, 400 );
			vampire.objectives.Add( blood_objective );
			kill_objective = new Objective_Assassinate();
			kill_objective.owner = vampire;
			kill_objective.find_target();
			vampire.objectives.Add( kill_objective );
			steal_objective = new Objective_Steal();
			steal_objective.owner = vampire;
			steal_objective.find_target();
			vampire.objectives.Add( steal_objective );

			dynamic _a = Rand13.Int( 1, 100 ); // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=80 ) {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), vampire.objectives ) ) ) {
					escape_objective = new Objective_Escape();
					escape_objective.owner = vampire;
					vampire.objectives.Add( escape_objective );
				}
			} else {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Survive), vampire.objectives ) ) ) {
					survive_objective = new Objective_Survive();
					survive_objective.owner = vampire;
					vampire.objectives.Add( survive_objective );
				}
			}
			return;
		}

		// Function from file: vampire.dm
		public string auto_declare_completion_enthralled(  ) {
			string text = null;
			Icon logo = null;
			int tempstate = 0;
			Mind Mind = null;
			bool traitorwin = false;
			Icon flat = null;
			Icon sprotch = null;
			int count = 0;
			Objective objective = null;
			string special_role_text = null;

			text = this.vampire_completion();

			if ( this.enthralled.len != 0 ) {
				logo = new Icon( "icons/mob/mob.dmi", "thrall-logo" );
				GlobalVars.end_icons.Add( logo );
				tempstate = GlobalVars.end_icons.len;
				text += "<br><FONT size = 2><img src=\"logo_" + tempstate + ".png\"> <B>The Enthralled were:</B> <img src=\"logo_" + tempstate + ".png\"></FONT>";

				foreach (dynamic _b in Lang13.Enumerate( this.enthralled, typeof(Mind) )) {
					Mind = _b;
					
					traitorwin = true;

					if ( Lang13.Bool( Mind.current ) ) {
						flat = GlobalFuncs.getFlatIcon( Mind.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + Mind.key + "</b> was <b>" + Mind.name + "</b> (";

						if ( Convert.ToInt32( Mind.current.stat ) == 2 ) {
							text += "died";
							flat.Turn( 90 );
							GlobalVars.end_icons[tempstate] = flat;
						} else {
							text += "survived";
						}

						if ( Mind.current.real_name != Mind.name ) {
							text += " as " + Mind.current.real_name;
						}
					} else {
						sprotch = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + Mind.key + "</b> was <b>" + Mind.name + "</b> (";
						text += "body destroyed";
					}
					text += ")";

					if ( Mind.objectives.len != 0 ) {
						count = 1;

						foreach (dynamic _a in Lang13.Enumerate( Mind.objectives, typeof(Objective) )) {
							objective = _a;
							

							if ( Lang13.Bool( objective.check_completion() ) ) {
								text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='green'><B>Success!</B></font>";
								GlobalFuncs.feedback_add_details( "traitor_objective", "" + objective.type + "|SUCCESS" );
							} else {
								text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='red'>Fail.</font>";
								GlobalFuncs.feedback_add_details( "traitor_objective", "" + objective.type + "|FAIL" );
								traitorwin = false;
							}
							count++;
						}
					}
					special_role_text = null;

					if ( Lang13.Bool( Mind.special_role ) ) {
						special_role_text = String13.ToLower( Mind.special_role );
					} else {
						special_role_text = "antagonist";
					}

					if ( Mind.total_TC != 0 ) {
						
						if ( Mind.spent_TC != 0 ) {
							text += "<br><span class='sinister'>TC Remaining: " + ( Mind.total_TC - Mind.spent_TC ) + "/" + Mind.total_TC + " - The tools used by the Enthralled were: " + GlobalFuncs.list2text( Mind.uplink_items_bought, ", " ) + "</span>";
						} else {
							text += "<span class='sinister'>The Enthralled was a smooth operator this round (did not purchase any uplink items)</span>";
						}
					}

					if ( traitorwin ) {
						text += "<br><font color='green'><B>The " + special_role_text + " was successful!</B></font>";
						GlobalFuncs.feedback_add_details( "traitor_success", "SUCCESS" );
					} else {
						text += "<br><font color='red'><B>The " + special_role_text + " has failed!</B></font>";
						GlobalFuncs.feedback_add_details( "traitor_success", "FAIL" );
					}
				}
				text += "<BR><HR>";
			} else if ( Lang13.Bool( text ) ) {
				text += "<BR><HR>";
			}
			return text;
		}

		// Function from file: vampire.dm
		public string vampire_completion(  ) {
			string text = null;
			Icon logo = null;
			int tempstate = 0;
			Mind vampire = null;
			bool traitorwin = false;
			Icon flat = null;
			Icon sprotch = null;
			int count = 0;
			Objective objective = null;
			string special_role_text = null;
			dynamic entry = null;

			text = "";

			if ( this.vampires.len != 0 ) {
				logo = new Icon( "icons/mob/mob.dmi", "vampire-logo" );
				GlobalVars.end_icons.Add( logo );
				tempstate = GlobalVars.end_icons.len;
				text += "<br><img src=\"logo_" + tempstate + ".png\"> <FONT size = 2><B>The vampires were:</B></FONT> <img src=\"logo_" + tempstate + ".png\">";

				foreach (dynamic _c in Lang13.Enumerate( this.vampires, typeof(Mind) )) {
					vampire = _c;
					
					traitorwin = true;

					if ( Lang13.Bool( vampire.current ) ) {
						flat = GlobalFuncs.getFlatIcon( vampire.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> " + vampire.key + " was " + vampire.name + " (";

						if ( Convert.ToInt32( vampire.current.stat ) == 2 ) {
							text += "died";
							flat.Turn( 90 );
							GlobalVars.end_icons[tempstate] = flat;
						} else {
							text += "survived";
						}

						if ( vampire.current.real_name != vampire.name ) {
							text += " as " + vampire.current.real_name;
						}
					} else {
						sprotch = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> " + vampire.key + " was " + vampire.name + " (";
						text += "body destroyed";
					}
					text += ")";

					if ( vampire.objectives.len != 0 ) {
						count = 1;

						foreach (dynamic _a in Lang13.Enumerate( vampire.objectives, typeof(Objective) )) {
							objective = _a;
							

							if ( Lang13.Bool( objective.check_completion() ) ) {
								text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='green'><B>Success!</B></font>";
								GlobalFuncs.feedback_add_details( "traitor_objective", "" + objective.type + "|SUCCESS" );
							} else {
								text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='red'>Fail.</font>";
								GlobalFuncs.feedback_add_details( "traitor_objective", "" + objective.type + "|FAIL" );
								traitorwin = false;
							}
							count++;
						}
					}
					special_role_text = null;

					if ( Lang13.Bool( vampire.special_role ) ) {
						special_role_text = String13.ToLower( vampire.special_role );
					} else {
						special_role_text = "antagonist";
					}

					if ( vampire.total_TC != 0 ) {
						
						if ( vampire.spent_TC != 0 ) {
							text += "<br><span class='sinister'>TC Remaining: " + ( vampire.total_TC - vampire.spent_TC ) + "/" + vampire.total_TC + " - The tools used by the Vampire were:";

							foreach (dynamic _b in Lang13.Enumerate( vampire.uplink_items_bought )) {
								entry = _b;
								
								text += "<br>" + entry;
							}
							text += "</span>";
						} else {
							text += "<br><span class='sinister'>The Vampire was a smooth operator this round<br>(did not purchase any uplink items)</span>";
						}
					}

					if ( traitorwin ) {
						text += "<br><font color='green'><B>The " + special_role_text + " was successful!</B></font>";
						GlobalFuncs.feedback_add_details( "traitor_success", "SUCCESS" );
					} else {
						text += "<br><font color='red'><B>The " + special_role_text + " has failed!</B></font>";
						GlobalFuncs.feedback_add_details( "traitor_success", "FAIL" );
					}
				}
			}
			return text;
		}

		// Function from file: traitor.dm
		public void remove_traitor_mind( Mind traitor_mind = null, dynamic head = null ) {
			string _ref = null;

			_ref = new Txt().Ref( head ).ToString();

			if ( this.implanter.Contains( _ref ) ) {
				this.implanter[_ref] -= traitor_mind;
			}
			this.implanted.Remove( traitor_mind );
			this.traitors.Remove( traitor_mind );
			traitor_mind.special_role = null;
			this.update_traitor_icons_removed( traitor_mind );
			GlobalFuncs.to_chat( traitor_mind.current, "<span class='danger'><FONT size = 3>The fog clouding your mind clears. You remember nothing from the moment you were implanted until now.(You don't remember who implanted you)</FONT></span>" );
			return;
		}

		// Function from file: traitor.dm
		public void update_traitor_icons_removed( Mind traitor_mind = null ) {
			dynamic headref = null;
			dynamic head = null;
			Mind t_mind = null;
			Image I = null;
			Image I2 = null;
			Image I3 = null;

			
			foreach (dynamic _d in Lang13.Enumerate( this.implanter )) {
				headref = _d;
				
				head = Lang13.FindObj( headref );

				foreach (dynamic _b in Lang13.Enumerate( this.implanter[headref], typeof(Mind) )) {
					t_mind = _b;
					

					if ( Lang13.Bool( t_mind.current ) ) {
						
						if ( Lang13.Bool( t_mind.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( t_mind.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( ( I.icon_state == "greytide" || I.icon_state == "greytide_head" ) && ((dynamic)I).loc == traitor_mind.current ) {
									t_mind.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				if ( Lang13.Bool( head ) ) {
					
					if ( Lang13.Bool( head.current ) ) {
						
						if ( Lang13.Bool( head.current.client ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( head.current.client.images, typeof(Image) )) {
								I2 = _c;
								

								if ( ( I2.icon_state == "greytide" || I2.icon_state == "greytide_head" ) && ((dynamic)I2).loc == traitor_mind.current ) {
									head.current.client.images.Remove( I2 );
								}
							}
						}
					}
				}
			}

			if ( Lang13.Bool( traitor_mind.current ) ) {
				
				if ( Lang13.Bool( traitor_mind.current.client ) ) {
					
					foreach (dynamic _e in Lang13.Enumerate( traitor_mind.current.client.images, typeof(Image) )) {
						I3 = _e;
						

						if ( I3.icon_state == "greytide" || I3.icon_state == "greytide_head" ) {
							traitor_mind.current.client.images.Remove( I3 );
						}
					}
				}
			}
			return;
		}

		// Function from file: traitor.dm
		public void update_traitor_icons_added( Mind traitor_mind = null ) {
			string _ref = null;
			Image I = null;
			dynamic headref = null;
			dynamic head = null;
			Mind t_mind = null;
			Image I2 = null;
			Image I3 = null;
			Image I4 = null;

			_ref = new Txt().Ref( traitor_mind ).ToString();

			if ( this.implanter.Contains( _ref ) ) {
				
				if ( Lang13.Bool( traitor_mind.current ) ) {
					
					if ( Lang13.Bool( traitor_mind.current.client ) ) {
						I = new Image( "icons/mob/mob.dmi", traitor_mind.current, "greytide_head" );
						traitor_mind.current.client.images.Add( I );
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.implanter )) {
				headref = _b;
				
				head = Lang13.FindObj( headref );

				foreach (dynamic _a in Lang13.Enumerate( this.implanter[headref], typeof(Mind) )) {
					t_mind = _a;
					

					if ( Lang13.Bool( head ) ) {
						
						if ( Lang13.Bool( head.current ) ) {
							
							if ( Lang13.Bool( head.current.client ) ) {
								I2 = new Image( "icons/mob/mob.dmi", t_mind.current, "greytide" );
								head.current.client.images.Add( I2 );
							}
						}

						if ( Lang13.Bool( t_mind.current ) ) {
							
							if ( Lang13.Bool( t_mind.current.client ) ) {
								I3 = new Image( "icons/mob/mob.dmi", head.current, "greytide_head" );
								t_mind.current.client.images.Add( I3 );
							}
						}

						if ( Lang13.Bool( t_mind.current ) ) {
							
							if ( Lang13.Bool( t_mind.current.client ) ) {
								I4 = new Image( "icons/mob/mob.dmi", t_mind.current, "greytide" );
								t_mind.current.client.images.Add( I4 );
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: traitor.dm
		public bool equip_traitor( dynamic traitor_mob = null, bool? safety = null ) {
			safety = safety ?? false;

			bool _default = false;

			string loc = null;
			dynamic R = null;
			dynamic target_radio = null;
			int freq = 0;
			ByTable freqlist = null;
			Obj_Item_Device_Uplink_Hidden T = null;
			string pda_pass = null;
			Obj_Item_Device_Uplink_Hidden T2 = null;
			dynamic P = null;
			dynamic M = null;

			
			if ( !( traitor_mob is Mob_Living_Carbon_Human ) ) {
				return _default;
			}
			_default = true;

			if ( Lang13.Bool( traitor_mob.mind ) ) {
				
				if ( traitor_mob.mind.assigned_role == "Clown" ) {
					GlobalFuncs.to_chat( traitor_mob, "Your training has allowed you to overcome your clownish nature, allowing you to wield weapons without harming yourself." );
					traitor_mob.mutations.Remove( 5 );
				}
			}
			loc = "";
			R = Lang13.FindIn( typeof(Obj_Item_Device_Pda), traitor_mob.contents );

			if ( !Lang13.Bool( R ) ) {
				R = Lang13.FindIn( typeof(Obj_Item_Device_Radio), traitor_mob.contents );
			}

			if ( !Lang13.Bool( R ) ) {
				GlobalFuncs.to_chat( traitor_mob, "Unfortunately, the Syndicate wasn't able to get you a radio." );
				_default = false;
			} else if ( R is Obj_Item_Device_Radio ) {
				target_radio = R;
				freq = 1441;
				freqlist = new ByTable();

				while (freq <= 1489) {
					
					if ( freq < 1451 || freq > 1459 ) {
						freqlist.Add( freq );
					}
					freq += 2;

					if ( freq % 2 == 0 ) {
						freq += 1;
					}
				}
				freq = Convert.ToInt32( freqlist[Rand13.Int( 1, freqlist.len )] );
				T = new Obj_Item_Device_Uplink_Hidden( R );
				target_radio.hidden_uplink = T;
				target_radio.traitor_frequency = freq;
				GlobalFuncs.to_chat( traitor_mob, "The Syndicate have cunningly disguised a Syndicate Uplink as your " + R.name + " " + loc + ". Simply dial the frequency " + GlobalFuncs.format_frequency( freq ) + " to unlock its hidden features." );
				traitor_mob.mind.store_memory( "<B>Radio Freq:</B> " + GlobalFuncs.format_frequency( freq ) + " (" + R.name + " " + loc + ")." );
				traitor_mob.mind.total_TC += Convert.ToDouble( target_radio.hidden_uplink.uses );
			} else if ( R is Obj_Item_Device_Pda ) {
				pda_pass = "" + Rand13.Int( 100, 999 ) + " " + Rand13.Pick(new object [] { "Alpha", "Bravo", "Delta", "Omega" });
				T2 = new Obj_Item_Device_Uplink_Hidden( R );
				R.hidden_uplink = T2;
				P = R;
				P.lock_code = pda_pass;
				GlobalFuncs.to_chat( traitor_mob, "The Syndicate have cunningly disguised a Syndicate Uplink as your " + R.name + " " + loc + ". Simply enter the code \"" + pda_pass + "\" into the ringtone select to unlock its hidden features." );
				traitor_mob.mind.store_memory( "<B>Uplink Passcode:</B> " + pda_pass + " (" + R.name + " " + loc + ")." );
				traitor_mob.mind.total_TC += Convert.ToDouble( R.hidden_uplink.uses );
			}

			if ( !( safety == true ) ) {
				GlobalFuncs.to_chat( traitor_mob, "The Syndicate provided you with the following information on how to identify other agents:" );

				if ( Rand13.PercentChance( 80 ) ) {
					GlobalFuncs.to_chat( traitor_mob, "<span class='warning'>Code Phrase: </span>" + GlobalVars.syndicate_code_phrase );
					traitor_mob.mind.store_memory( "<b>Code Phrase</b>: " + GlobalVars.syndicate_code_phrase );
				} else {
					GlobalFuncs.to_chat( traitor_mob, "Unfortunetly, the Syndicate did not provide you with a code phrase." );
				}

				if ( Rand13.PercentChance( 80 ) ) {
					GlobalFuncs.to_chat( traitor_mob, "<span class='warning'>Code Response: </span>" + GlobalVars.syndicate_code_response );
					traitor_mob.mind.store_memory( "<b>Code Response</b>: " + GlobalVars.syndicate_code_response );
				} else {
					GlobalFuncs.to_chat( traitor_mob, "Unfortunately, the Syndicate did not provide you with a code response." );
				}
				GlobalFuncs.to_chat( traitor_mob, "Use the code words in the order provided, during regular conversation, to identify other agents. Proceed with caution, however, as everyone is a potential foe." );
			}
			M = GlobalFuncs.get_nt_opposed();

			if ( Lang13.Bool( M ) && M != traitor_mob ) {
				GlobalFuncs.to_chat( traitor_mob, "We have received credible reports that " + M.real_name + " might be willing to help our cause. If you need assistance, consider contacting them." );
				traitor_mob.mind.store_memory( "<b>Potential Collaborator</b>: " + M.real_name );
			}
			return _default;
		}

		// Function from file: traitor.dm
		public string auto_declare_completion_traitor(  ) {
			string text = null;
			Icon logo = null;
			int tempstate = 0;
			Mind traitor = null;
			bool traitorwin = false;
			Icon flat = null;
			Icon sprotch = null;
			int count = 0;
			Objective objective = null;
			string special_role_text = null;
			dynamic entry = null;

			text = "";

			if ( this.traitors.len != 0 ) {
				logo = new Icon( "icons/mob/mob.dmi", "synd-logo" );
				GlobalVars.end_icons.Add( logo );
				tempstate = GlobalVars.end_icons.len;
				text += "<BR><img src=\"logo_" + tempstate + ".png\"> <FONT size = 2><B>The traitors were:</B></FONT> <img src=\"logo_" + tempstate + ".png\">";

				foreach (dynamic _c in Lang13.Enumerate( this.traitors, typeof(Mind) )) {
					traitor = _c;
					
					traitorwin = true;

					if ( Lang13.Bool( traitor.current ) ) {
						flat = GlobalFuncs.getFlatIcon( traitor.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + traitor.key + "</b> was <b>" + traitor.name + "</b> (";

						if ( Convert.ToInt32( traitor.current.stat ) == 2 ) {
							text += "died";
							flat.Turn( 90 );
							GlobalVars.end_icons[tempstate] = flat;
						} else {
							text += "survived";
						}

						if ( traitor.current.real_name != traitor.name ) {
							text += " as " + traitor.current.real_name;
						}
					} else {
						sprotch = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + traitor.key + "</b> was <b>" + traitor.name + "</b> (";
						text += "body destroyed";
					}
					text += ")";

					if ( traitor.objectives.len != 0 ) {
						count = 1;

						foreach (dynamic _a in Lang13.Enumerate( traitor.objectives, typeof(Objective) )) {
							objective = _a;
							

							if ( Lang13.Bool( objective.check_completion() ) ) {
								text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='green'><B>Success!</B></font>";
								GlobalFuncs.feedback_add_details( "traitor_objective", "" + objective.type + "|SUCCESS" );
							} else {
								text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='red'>Fail.</font>";
								GlobalFuncs.feedback_add_details( "traitor_objective", "" + objective.type + "|FAIL" );
								traitorwin = false;
							}
							count++;
						}
					}
					special_role_text = null;

					if ( Lang13.Bool( traitor.special_role ) ) {
						special_role_text = String13.ToLower( traitor.special_role );
					} else {
						special_role_text = "antagonist";
					}

					if ( traitorwin ) {
						text += "<br><font color='green'><B>The " + ( this.implanted.Contains( traitor ) ? "greytide" : special_role_text ) + " was successful!</B></font>";
						GlobalFuncs.feedback_add_details( "traitor_success", "SUCCESS" );
					} else {
						text += "<br><font color='red'><B>The " + ( this.implanted.Contains( traitor ) ? "greytide" : special_role_text ) + " has failed!</B></font>";
						GlobalFuncs.feedback_add_details( "traitor_success", "FAIL" );
					}

					if ( traitor.total_TC != 0 ) {
						
						if ( traitor.spent_TC != 0 ) {
							text += "<br><span class='sinister'>TC Remaining : " + ( traitor.total_TC - traitor.spent_TC ) + "/" + traitor.total_TC + " - The tools used by the " + ( this.implanted.Contains( traitor ) ? "greytide" : special_role_text ) + " were:";

							foreach (dynamic _b in Lang13.Enumerate( traitor.uplink_items_bought )) {
								entry = _b;
								
								text += "<br>" + entry;
							}
							text += "</span>";
						} else {
							text += "<br><span class='sinister'>The " + ( this.implanted.Contains( traitor ) ? "greytide" : special_role_text ) + " was a smooth operator this round (did not purchase any uplink items)</span>";
						}
					}
				}
				text += "<BR><HR>";
			}
			return text;
		}

		// Function from file: traitor.dm
		public void add_law_zero( dynamic killer = null ) {
			string law = null;
			string law_borg = null;

			law = "Accomplish your objectives at all costs.";
			law_borg = "Accomplish your AI's objectives at all costs.";
			GlobalFuncs.to_chat( killer, "<b>Your laws have been changed!</b>" );
			((Mob_Living_Silicon_Ai)killer).set_zeroth_law( law, law_borg );
			GlobalFuncs.to_chat( killer, "New law: 0. " + law );
			GlobalFuncs.to_chat( killer, "The Syndicate provided you with the following information on how to identify their agents:" );

			if ( Rand13.PercentChance( 80 ) ) {
				GlobalFuncs.to_chat( killer, "<span class='warning'>Code Phrase: </span>" + GlobalVars.syndicate_code_phrase );
				killer.mind.store_memory( "<b>Code Phrase</b>: " + GlobalVars.syndicate_code_phrase );
			} else {
				GlobalFuncs.to_chat( killer, "Unfortunately, the Syndicate did not provide you with a code phrase." );
			}

			if ( Rand13.PercentChance( 80 ) ) {
				GlobalFuncs.to_chat( killer, "<span class='warning'>Code Response: </span>" + GlobalVars.syndicate_code_response );
				killer.mind.store_memory( "<b>Code Response</b>: " + GlobalVars.syndicate_code_response );
			} else {
				GlobalFuncs.to_chat( killer, "Unfortunately, the Syndicate did not provide you with a code response." );
			}
			GlobalFuncs.to_chat( killer, "Use the code words in the order provided, during regular conversation, to identify other agents. Proceed with caution, however, as everyone is a potential foe." );
			return;
		}

		// Function from file: traitor.dm
		public void finalize_traitor( Mind traitor = null ) {
			
			if ( traitor.current is Mob_Living_Silicon ) {
				this.add_law_zero( traitor.current );
				GlobalFuncs.to_chat( traitor.current, new Sound( "sound/voice/AISyndiHack.ogg" ) );
			} else {
				this.equip_traitor( traitor.current );
				GlobalFuncs.to_chat( traitor.current, new Sound( "sound/voice/syndicate_intro.ogg" ) );
			}
			return;
		}

		// Function from file: traitor.dm
		public virtual void greet_traitor( Mind traitor = null ) {
			dynamic wikiroute = null;
			int obj_count = 0;
			Objective objective = null;

			GlobalFuncs.to_chat( traitor.current, "\n	<SPAN CLASS='big bold center red'>You are now a traitor!</SPAN>\n	" );
			wikiroute = GlobalVars.role_wiki["traitor"];
			GlobalFuncs.to_chat( traitor.current, new Txt( "<span class='info'><a HREF='?src=" ).Ref( traitor.current ).str( ";getwiki=" ).item( wikiroute ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( traitor.objectives, typeof(Objective) )) {
				objective = _a;
				
				GlobalFuncs.to_chat( traitor.current, "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: traitor.dm
		public virtual void forge_traitor_objectives( Mind traitor = null ) {
			Objective_Assassinate kill_objective = null;
			Objective_Survive survive_objective = null;
			Objective_Block block_objective = null;
			Objective_Assassinate kill_objective2 = null;
			Objective_Steal steal_objective = null;
			Objective_Die die_objective = null;
			Objective_Escape escape_objective = null;
			Objective_Hijack hijack_objective = null;
			Objective_MinimizeCasualties escape_objective2 = null;
			Objective_Escape escape_objective3 = null;
			Objective_Hijack hijack_objective2 = null;
			Objective_MinimizeCasualties escape_objective4 = null;

			
			if ( traitor.current is Mob_Living_Silicon ) {
				kill_objective = new Objective_Assassinate();
				kill_objective.owner = traitor;
				kill_objective.find_target();
				traitor.objectives.Add( kill_objective );
				survive_objective = new Objective_Survive();
				survive_objective.owner = traitor;
				traitor.objectives.Add( survive_objective );

				if ( Rand13.PercentChance( 10 ) ) {
					block_objective = new Objective_Block();
					block_objective.owner = traitor;
					traitor.objectives.Add( block_objective );
				}
			} else {
				
				dynamic _a = Rand13.Int( 1, 100 ); // Was a switch-case, sorry for the mess.
				if ( 1<=_a&&_a<=33 ) {
					kill_objective2 = new Objective_Assassinate();
					kill_objective2.owner = traitor;
					kill_objective2.find_target();
					traitor.objectives.Add( kill_objective2 );
				} else {
					steal_objective = new Objective_Steal();
					steal_objective.owner = traitor;
					steal_objective.find_target();
					traitor.objectives.Add( steal_objective );
				}

				dynamic _b = Rand13.Int( 1, 100 ); // Was a switch-case, sorry for the mess.
				if ( 1<=_b&&_b<=30 ) {
					
					if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Die), traitor.objectives ) ) && !Lang13.Bool( Lang13.FindIn( typeof(Objective_Steal), traitor.objectives ) ) ) {
						die_objective = new Objective_Die();
						die_objective.owner = traitor;
						traitor.objectives.Add( die_objective );
					} else if ( Rand13.PercentChance( 85 ) ) {
						
						if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), traitor.objectives ) ) ) {
							escape_objective = new Objective_Escape();
							escape_objective.owner = traitor;
							traitor.objectives.Add( escape_objective );
						}
					} else if ( Rand13.PercentChance( 50 ) ) {
						
						if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Hijack), traitor.objectives ) ) ) {
							hijack_objective = new Objective_Hijack();
							hijack_objective.owner = traitor;
							traitor.objectives.Add( hijack_objective );
						}
					} else if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_MinimizeCasualties), traitor.objectives ) ) ) {
						escape_objective2 = new Objective_MinimizeCasualties();
						escape_objective2.owner = traitor;
						traitor.objectives.Add( escape_objective2 );
					}
				} else if ( 31<=_b&&_b<=90 ) {
					
					if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), traitor.objectives ) ) ) {
						escape_objective3 = new Objective_Escape();
						escape_objective3.owner = traitor;
						traitor.objectives.Add( escape_objective3 );
					}
				} else {
					
					if ( Rand13.PercentChance( 50 ) ) {
						
						if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Hijack), traitor.objectives ) ) ) {
							hijack_objective2 = new Objective_Hijack();
							hijack_objective2.owner = traitor;
							traitor.objectives.Add( hijack_objective2 );
						}
					} else if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_MinimizeCasualties), traitor.objectives ) ) ) {
						escape_objective4 = new Objective_MinimizeCasualties();
						escape_objective4.owner = traitor;
						traitor.objectives.Add( escape_objective4 );
					}
				}
			}
			return;
		}

		// Function from file: revolution.dm
		public string auto_declare_completion_revolution(  ) {
			ByTable targets = null;
			string text = null;
			Icon logo1 = null;
			int tempstate = 0;
			Mind headrev = null;
			Icon flat = null;
			Icon sprotch = null;
			dynamic entry = null;
			Objective_Mutiny objective = null;
			Icon logo2 = null;
			int tempstate2 = 0;
			Mind rev = null;
			Icon flat2 = null;
			Icon sprotch2 = null;
			Icon logo3 = null;
			int tempstate3 = 0;
			ByTable heads = null;
			Mind head = null;
			bool target = false;
			Icon flat3 = null;
			Icon sprotch3 = null;

			targets = new ByTable();
			text = "";

			if ( this.head_revolutionaries.len != 0 || GlobalVars.ticker.mode is GameMode_Revolution ) {
				logo1 = new Icon( "icons/mob/mob.dmi", "rev_head-logo" );
				GlobalVars.end_icons.Add( logo1 );
				tempstate = GlobalVars.end_icons.len;
				text += "<img src=\"logo_" + tempstate + ".png\"> <FONT size = 2><B>The head revolutionaries were:</B></FONT> <img src=\"logo_" + tempstate + ".png\">";

				foreach (dynamic _c in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
					headrev = _c;
					

					if ( Lang13.Bool( headrev.current ) ) {
						flat = GlobalFuncs.getFlatIcon( headrev.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + headrev.key + "</b> was <b>" + headrev.name + "</b> (";

						if ( Convert.ToInt32( headrev.current.stat ) == 2 ) {
							text += "died";
							flat.Turn( 90 );
							GlobalVars.end_icons[tempstate] = flat;
						} else if ( Lang13.Bool( headrev.current.z ) != true ) {
							text += "fled the station";
						} else {
							text += "survived the revolution";
						}

						if ( headrev.current.real_name != headrev.name ) {
							text += " as " + headrev.current.real_name;
						}
					} else {
						sprotch = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + headrev.key + "</b> was <b>" + headrev.name + "</b> (";
						text += "body destroyed";
					}
					text += ")";

					if ( headrev.total_TC != 0 ) {
						
						if ( headrev.spent_TC != 0 ) {
							text += "<br><span class='sinister'>TC Remaining: " + ( headrev.total_TC - headrev.spent_TC ) + "/" + headrev.total_TC + " - The tools used by the Head Revolutionary were:";

							foreach (dynamic _a in Lang13.Enumerate( headrev.uplink_items_bought )) {
								entry = _a;
								
								text += "<br>" + entry;
							}
							text += "</span>";
						} else {
							text += "<br><span class='sinister'>The Head Revolutionary was a smooth operator this round (did not purchase any uplink items)</span>";
						}
					}

					foreach (dynamic _b in Lang13.Enumerate( headrev.objectives, typeof(Objective_Mutiny) )) {
						objective = _b;
						
						targets.Or( objective.target );
					}
				}
			}

			if ( this.revolutionaries.len != 0 || GlobalVars.ticker.mode is GameMode_Revolution ) {
				logo2 = new Icon( "icons/mob/mob.dmi", "rev-logo" );
				GlobalVars.end_icons.Add( logo2 );
				tempstate2 = GlobalVars.end_icons.len;
				text += "<br><img src=\"logo_" + tempstate2 + ".png\"> <FONT size = 2><B>The revolutionaries were:</B></FONT> <img src=\"logo_" + tempstate2 + ".png\">";

				foreach (dynamic _d in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
					rev = _d;
					

					if ( Lang13.Bool( rev.current ) ) {
						flat2 = GlobalFuncs.getFlatIcon( rev.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat2 );
						tempstate2 = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate2 + ".png\"> <b>" + rev.key + "</b> was <b>" + rev.name + "</b> (";

						if ( Convert.ToInt32( rev.current.stat ) == 2 ) {
							text += "died";
							flat2.Turn( 90 );
							GlobalVars.end_icons[tempstate2] = flat2;
						} else if ( Lang13.Bool( rev.current.z ) != true ) {
							text += "fled the station";
						} else {
							text += "survived the revolution";
						}

						if ( rev.current.real_name != rev.name ) {
							text += " as " + rev.current.real_name;
						}
					} else {
						sprotch2 = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch2 );
						tempstate2 = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate2 + ".png\"> <b>" + rev.key + "</b> was <b>" + rev.name + "</b> (";
						text += "body destroyed";
					}
					text += ")";
				}
			}

			if ( this.head_revolutionaries.len != 0 || this.revolutionaries.len != 0 || GlobalVars.ticker.mode is GameMode_Revolution ) {
				logo3 = new Icon( "icons/mob/mob.dmi", "nano-logo" );
				GlobalVars.end_icons.Add( logo3 );
				tempstate3 = GlobalVars.end_icons.len;
				text += "<br><img src=\"logo_" + tempstate3 + ".png\"> <FONT size = 2><B>The heads of staff were:</B></FONT> <img src=\"logo_" + tempstate3 + ".png\">";
				heads = this.get_all_heads();

				foreach (dynamic _e in Lang13.Enumerate( heads, typeof(Mind) )) {
					head = _e;
					
					target = targets.Contains( head );

					if ( target ) {
						text += "<font color='red'>";
					}

					if ( Lang13.Bool( head.current ) ) {
						flat3 = GlobalFuncs.getFlatIcon( head.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat3 );
						tempstate3 = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate3 + ".png\"> <b>" + head.key + "</b> was <b>" + head.name + "</b> (";

						if ( Convert.ToInt32( head.current.stat ) == 2 ) {
							text += "died";
							flat3.Turn( 90 );
							GlobalVars.end_icons[tempstate3] = flat3;
						} else if ( Lang13.Bool( head.current.z ) != true ) {
							text += "fled the station";
						} else {
							text += "survived the revolution";
						}

						if ( head.current.real_name != head.name ) {
							text += " as " + head.current.real_name;
						}
					} else {
						sprotch3 = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch3 );
						tempstate3 = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate3 + ".png\"> <b>" + head.key + "</b> was <b>" + head.name + "</b> (";
						text += "body destroyed";
					}
					text += ")";

					if ( target ) {
						text += "</font>";
					}
				}
				text += "<BR><HR>";
			}
			return text;
		}

		// Function from file: revolution.dm
		public void update_rev_icons_removed( Mind rev_mind = null ) {
			Mind head_rev_mind = null;
			Image I = null;
			Mind rev_mind_1 = null;
			Image I2 = null;
			Image I3 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
					head_rev_mind = _b;
					

					if ( Lang13.Bool( head_rev_mind.current ) ) {
						
						if ( Lang13.Bool( head_rev_mind.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( head_rev_mind.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( ( I.icon_state == "rev" || I.icon_state == "rev_head" ) && ( ((dynamic)I).loc == rev_mind.current || ((dynamic)I).loc == rev_mind.current.loc ) ) {
									head_rev_mind.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
					rev_mind_1 = _d;
					

					if ( Lang13.Bool( rev_mind_1.current ) ) {
						
						if ( Lang13.Bool( rev_mind_1.current.client ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( rev_mind_1.current.client.images, typeof(Image) )) {
								I2 = _c;
								

								if ( ( I2.icon_state == "rev" || I2.icon_state == "rev_head" ) && ( ((dynamic)I2).loc == rev_mind.current || ((dynamic)I2).loc == rev_mind.current.loc ) ) {
									rev_mind_1.current.client.images.Remove( I2 );
								}
							}
						}
					}
				}

				if ( Lang13.Bool( rev_mind.current ) ) {
					
					if ( Lang13.Bool( rev_mind.current.client ) ) {
						
						foreach (dynamic _e in Lang13.Enumerate( rev_mind.current.client.images, typeof(Image) )) {
							I3 = _e;
							

							if ( I3.icon_state == "rev" || I3.icon_state == "rev_head" ) {
								rev_mind.current.client.images.Remove( I3 );
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: revolution.dm
		public void update_rev_icons_added( Mind rev_mind = null ) {
			Mind head_rev_mind = null;
			dynamic imageloc = null;
			Image I = null;
			dynamic imageloc2 = null;
			Image J = null;
			Mind rev_mind_1 = null;
			dynamic imageloc3 = null;
			Image I2 = null;
			dynamic imageloc4 = null;
			Image J2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
					head_rev_mind = _a;
					

					if ( Lang13.Bool( head_rev_mind.current ) ) {
						
						if ( Lang13.Bool( head_rev_mind.current.client ) ) {
							imageloc = rev_mind.current;

							if ( rev_mind.current.loc is Obj_Mecha ) {
								imageloc = rev_mind.current.loc;
							}
							I = new Image( "icons/mob/mob.dmi", imageloc, "rev", 13 );
							head_rev_mind.current.client.images.Add( I );
						}
					}

					if ( Lang13.Bool( rev_mind.current ) ) {
						
						if ( Lang13.Bool( rev_mind.current.client ) ) {
							imageloc2 = head_rev_mind.current;

							if ( head_rev_mind.current.loc is Obj_Mecha ) {
								imageloc2 = head_rev_mind.current.loc;
							}
							J = new Image( "icons/mob/mob.dmi", imageloc2, "rev_head", 13 );
							rev_mind.current.client.images.Add( J );
						}
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
					rev_mind_1 = _b;
					

					if ( Lang13.Bool( rev_mind_1.current ) ) {
						
						if ( Lang13.Bool( rev_mind_1.current.client ) ) {
							imageloc3 = rev_mind.current;

							if ( rev_mind.current.loc is Obj_Mecha ) {
								imageloc3 = rev_mind.current.loc;
							}
							I2 = new Image( "icons/mob/mob.dmi", imageloc3, "rev", 13 );
							rev_mind_1.current.client.images.Add( I2 );
						}
					}

					if ( Lang13.Bool( rev_mind.current ) ) {
						
						if ( Lang13.Bool( rev_mind.current.client ) ) {
							imageloc4 = rev_mind_1.current;

							if ( rev_mind_1.current.loc is Obj_Mecha ) {
								imageloc4 = rev_mind_1.current.loc;
							}
							J2 = new Image( "icons/mob/mob.dmi", imageloc4, "rev", 13 );
							rev_mind.current.client.images.Add( J2 );
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: revolution.dm
		public void update_all_rev_icons(  ) {
			Mind head_rev_mind = null;
			Image I = null;
			Mind rev_mind = null;
			Image I2 = null;
			Mind head_rev = null;
			Mind rev = null;
			dynamic imageloc = null;
			Image I3 = null;
			Mind head_rev_1 = null;
			dynamic imageloc2 = null;
			Image I4 = null;
			Mind rev2 = null;
			Mind head_rev2 = null;
			dynamic imageloc3 = null;
			Image I5 = null;
			Mind rev_1 = null;
			dynamic imageloc4 = null;
			Image I6 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
					head_rev_mind = _b;
					

					if ( Lang13.Bool( head_rev_mind.current ) ) {
						
						if ( Lang13.Bool( head_rev_mind.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( head_rev_mind.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( I.icon_state == "rev" || I.icon_state == "rev_head" ) {
									head_rev_mind.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
					rev_mind = _d;
					

					if ( Lang13.Bool( rev_mind.current ) ) {
						
						if ( Lang13.Bool( rev_mind.current.client ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( rev_mind.current.client.images, typeof(Image) )) {
								I2 = _c;
								

								if ( I2.icon_state == "rev" || I2.icon_state == "rev_head" ) {
									rev_mind.current.client.images.Remove( I2 );
								}
							}
						}
					}
				}

				foreach (dynamic _g in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
					head_rev = _g;
					

					if ( Lang13.Bool( head_rev.current ) ) {
						
						if ( Lang13.Bool( head_rev.current.client ) ) {
							
							foreach (dynamic _e in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
								rev = _e;
								

								if ( Lang13.Bool( rev.current ) ) {
									imageloc = rev.current;

									if ( rev.current.loc is Obj_Mecha ) {
										imageloc = rev.current.loc;
									}
									I3 = new Image( "icons/mob/mob.dmi", imageloc, "rev", 13 );
									head_rev.current.client.images.Add( I3 );
								}
							}

							foreach (dynamic _f in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
								head_rev_1 = _f;
								

								if ( Lang13.Bool( head_rev_1.current ) ) {
									imageloc2 = head_rev_1.current;

									if ( head_rev_1.current.loc is Obj_Mecha ) {
										imageloc2 = head_rev_1.current.loc;
									}
									I4 = new Image( "icons/mob/mob.dmi", imageloc2, "rev_head", 13 );
									head_rev.current.client.images.Add( I4 );
								}
							}
						}
					}
				}

				foreach (dynamic _j in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
					rev2 = _j;
					

					if ( Lang13.Bool( rev2.current ) ) {
						
						if ( Lang13.Bool( rev2.current.client ) ) {
							
							foreach (dynamic _h in Lang13.Enumerate( this.head_revolutionaries, typeof(Mind) )) {
								head_rev2 = _h;
								

								if ( Lang13.Bool( head_rev2.current ) ) {
									imageloc3 = head_rev2.current;

									if ( head_rev2.current.loc is Obj_Mecha ) {
										imageloc3 = head_rev2.current.loc;
									}
									I5 = new Image( "icons/mob/mob.dmi", imageloc3, "rev_head", 13 );
									rev2.current.client.images.Add( I5 );
								}
							}

							foreach (dynamic _i in Lang13.Enumerate( this.revolutionaries, typeof(Mind) )) {
								rev_1 = _i;
								

								if ( Lang13.Bool( rev_1.current ) ) {
									imageloc4 = rev_1.current;

									if ( rev_1.current.loc is Obj_Mecha ) {
										imageloc4 = rev_1.current.loc;
									}
									I6 = new Image( "icons/mob/mob.dmi", imageloc4, "rev", 13 );
									rev2.current.client.images.Add( I6 );
								}
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: revolution.dm
		public void remove_revolutionary( Mind rev_mind = null, bool? beingborged = null ) {
			Mob_Living M = null;

			
			if ( this.revolutionaries.Contains( rev_mind ) ) {
				this.revolutionaries.Remove( rev_mind );
				rev_mind.special_role = null;

				if ( beingborged == true ) {
					GlobalFuncs.to_chat( rev_mind.current, "<span class='danger'><FONT size = 3>The frame's firmware detects and deletes your neural reprogramming!  You remember nothing from the moment you were flashed until now.</FONT></span>" );
				} else {
					GlobalFuncs.to_chat( rev_mind.current, "<span class='danger'><FONT size = 3>You have been brainwashed! You are no longer a revolutionary! Your memory is hazy from the time you were a rebel...the only thing you remember is the name of the one who brainwashed you...</FONT></span>" );
				}
				this.update_rev_icons_removed( rev_mind );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, rev_mind.current ), typeof(Mob_Living) )) {
					M = _a;
					

					if ( beingborged == true ) {
						GlobalFuncs.to_chat( M, "The frame beeps contentedly, purging the hostile memory engram from the MMI before initalizing it." );
					} else {
						GlobalFuncs.to_chat( M, "" + rev_mind.current + " looks like they just remembered their real allegiance!" );
					}
				}
				GlobalFuncs.log_admin( "" + rev_mind.current + " (" + String13.CKey( rev_mind.current.key ) + " has been deconverted from the revolution" );
			}
			return;
		}

		// Function from file: revolution.dm
		public int add_revolutionary( Mind rev_mind = null ) {
			dynamic H = null;
			Obj_Item_Weapon_Implant_Loyalty L = null;

			
			if ( GlobalVars.command_positions.Contains( rev_mind.assigned_role ) ) {
				return -1;
			}
			H = rev_mind.current;

			if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( H, "revolutionary" ) ) ) {
				return -2;
			}

			foreach (dynamic _a in Lang13.Enumerate( H, typeof(Obj_Item_Weapon_Implant_Loyalty) )) {
				L = _a;
				

				if ( L.imp_in == H ) {
					return -3;
				}
			}

			if ( this.revolutionaries.Contains( rev_mind ) || this.head_revolutionaries.Contains( rev_mind ) ) {
				return -4;
			}
			this.revolutionaries.Add( rev_mind );
			GlobalFuncs.to_chat( rev_mind.current, "<span class='warning'><FONT size = 3> You are now a revolutionary! Help your cause. Do not harm your fellow freedom fighters. You can identify your comrades by the red \"R\" icons, and your leaders by the blue \"R\" icons. Help them kill the heads to win the revolution!</FONT></span>" );
			rev_mind.special_role = "Revolutionary";
			this.update_rev_icons_added( rev_mind );
			return 1;
		}

		// Function from file: revolution.dm
		public bool equip_revolutionary( dynamic mob = null ) {
			Obj_Item_Device_Flash T = null;
			ByTable slots = null;
			dynamic where = null;

			
			if ( !( mob is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( Lang13.Bool( mob.mind ) ) {
				
				if ( mob.mind.assigned_role == "Clown" ) {
					GlobalFuncs.to_chat( mob, "Your training has allowed you to overcome your clownish nature, allowing you to wield weapons without harming yourself." );
					mob.mutations.Remove( 5 );
				}
			}
			T = new Obj_Item_Device_Flash( mob );
			slots = new ByTable().Set( "backpack", 18 ).Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
			where = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( T, slots );

			if ( !Lang13.Bool( where ) ) {
				GlobalFuncs.to_chat( mob, "The Syndicate were unfortunately unable to get you a flash." );
			} else {
				GlobalFuncs.to_chat( mob, "The flash in your " + where + " will help you to persuade the crew to join your cause." );
				mob.update_icons();
				return true;
			}
			return false;
		}

		// Function from file: revolution.dm
		public void greet_revolutionary( Mind rev_mind = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			int obj_count = 0;
			Objective objective = null;

			obj_count = 1;

			if ( you_are == true ) {
				GlobalFuncs.to_chat( rev_mind.current, "<span class='notice'>You are a member of the revolutionaries' leadership!</span>" );
			}

			foreach (dynamic _a in Lang13.Enumerate( rev_mind.objectives, typeof(Objective) )) {
				objective = _a;
				
				GlobalFuncs.to_chat( rev_mind.current, "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				rev_mind.special_role = "Head Revolutionary";
				obj_count++;
			}
			return;
		}

		// Function from file: revolution.dm
		public void forge_revolutionary_objectives( Mind rev_mind = null ) {
			ByTable heads = null;
			Mind head_mind = null;
			Objective_Mutiny rev_obj = null;

			heads = this.get_living_heads();

			foreach (dynamic _a in Lang13.Enumerate( heads, typeof(Mind) )) {
				head_mind = _a;
				
				rev_obj = new Objective_Mutiny();
				rev_obj.owner = rev_mind;
				rev_obj.target = head_mind;
				rev_obj.explanation_text = "Assassinate " + head_mind.name + ", the " + head_mind.assigned_role + ".";
				rev_mind.objectives.Add( rev_obj );
			}
			return;
		}

		// Function from file: nuclear.dm
		public string auto_declare_completion_nuclear(  ) {
			string text = null;
			Icon logo = null;
			int tempstate = 0;
			Mind syndicate = null;
			Icon flat = null;
			Icon sprotch = null;
			Obj_Item nuclear_uplink = null;
			dynamic entry = null;

			text = "";

			if ( this.syndicates.len != 0 || GlobalVars.ticker != null && GlobalVars.ticker.mode is GameMode_Nuclear ) {
				logo = new Icon( "icons/mob/mob.dmi", "nuke-logo" );
				GlobalVars.end_icons.Add( logo );
				tempstate = GlobalVars.end_icons.len;
				text += "<br><img src=\"logo_" + tempstate + ".png\"> <FONT size = 2><B>The syndicate operatives were:</B></FONT> <img src=\"logo_" + tempstate + ".png\">";

				foreach (dynamic _a in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
					syndicate = _a;
					

					if ( Lang13.Bool( syndicate.current ) ) {
						flat = GlobalFuncs.getFlatIcon( syndicate.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + syndicate.key + "</b> was <b>" + syndicate.name + "</b> (";

						if ( Convert.ToInt32( syndicate.current.stat ) == 2 ) {
							text += "died";
							flat.Turn( 90 );
							GlobalVars.end_icons[tempstate] = flat;
						} else {
							text += "survived";
						}

						if ( syndicate.current.real_name != syndicate.name ) {
							text += " as " + syndicate.current.real_name;
						}
					} else {
						sprotch = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + syndicate.key + "</b> was <b>" + syndicate.name + "</b> (";
						text += "body destroyed";
					}
					text += ")";
				}
				nuclear_uplink = ((dynamic)this).nuclear_uplink;

				if ( nuclear_uplink != null && nuclear_uplink.hidden_uplink != null ) {
					
					if ( nuclear_uplink.hidden_uplink.purchase_log.len != 0 ) {
						text += "<br><span class='sinister'>The tools used by the syndicate operatives were: ";

						foreach (dynamic _b in Lang13.Enumerate( nuclear_uplink.hidden_uplink.purchase_log )) {
							entry = _b;
							
							text += "<br>" + entry + "TC(s)";
						}
						text += "</span>";
					} else {
						text += "<br><span class='sinister'>The nukeops were smooth operators this round (did not purchase any uplink items)</span>";
					}
				}
				text += "<BR><HR>";
			}
			return text;
		}

		// Function from file: nuclear.dm
		public bool is_operatives_are_dead(  ) {
			Mind operative_mind = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
				operative_mind = _a;
				

				if ( !( operative_mind.current is Mob_Living_Carbon_Human ) ) {
					
					if ( Lang13.Bool( operative_mind.current ) ) {
						
						if ( Convert.ToInt32( operative_mind.current.stat ) != 2 ) {
							return false;
						}
					}
				}
			}
			return true;
		}

		// Function from file: nuclear.dm
		public bool equip_syndicate( dynamic synd_mob = null ) {
			double radio_freq = 0;
			int tank_slot = 0;
			Obj_Item_Device_Radio_Headset_Syndicate R = null;
			Obj_Item_Weapon_Implant_Explosive E = null;

			radio_freq = GlobalVars.SYND_FREQ;
			tank_slot = 5;

			if ( synd_mob.overeatduration != 0 ) {
				GlobalFuncs.to_chat( synd_mob, "<span class='notice'>Your intensive physical training to become a Nuclear Operative has paid off and made you fit again!</span>" );
				synd_mob.overeatduration = 0;

				if ( synd_mob.nutrition > 400 ) {
					synd_mob.nutrition = 400;
				}
				synd_mob.mutations.Remove( 6 );
				((Mob_Living_Carbon_Human)synd_mob).update_mutantrace( false );
				((Mob)synd_mob).update_mutations( false );
				((Mob)synd_mob).update_inv_w_uniform( false );
				((Mob)synd_mob).update_inv_wear_suit();
			}
			R = new Obj_Item_Device_Radio_Headset_Syndicate(  );
			R.set_frequency( radio_freq );
			((Mob)synd_mob).equip_to_slot_or_del( R, 8 );
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Under_Syndicate( synd_mob ), 14 );
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Combat( synd_mob ), 12 );

			if ( !( synd_mob.species is Species_Plasmaman ) ) {
				((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Armor_Bulletproof( synd_mob ), 13 );
			} else {
				((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Plasmaman_Nuclear( synd_mob ), 13 );
				((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Tank_Plasma_Plasmaman( synd_mob ), 17 );
				((Mob_Living_Carbon_Human)synd_mob).equip_or_collect( new Obj_Item_Clothing_Mask_Breath( synd_mob ), 2 );
				synd_mob.v_internal = ((Mob)synd_mob).get_item_by_slot( 17 );

				if ( synd_mob.internals != null ) {
					((dynamic)synd_mob.internals).icon_state = "internal1";
				}
			}
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Combat( synd_mob ), 10 );

			if ( !( synd_mob.species is Species_Plasmaman ) ) {
				((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Swat( synd_mob ), 11 );
			} else {
				((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Nuclear( synd_mob ), 11 );
			}
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Sunglasses_Prescription( synd_mob ), 9 );

			if ( synd_mob.species is Species_Vox ) {
				((Mob_Living_Carbon_Human)synd_mob).equip_or_collect( new Obj_Item_Clothing_Mask_Breath_Vox( synd_mob ), 2 );
				((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Tank_Nitrogen( synd_mob ), 5 );
				GlobalFuncs.to_chat( synd_mob, "<span class='notice'>You are now running on nitrogen internals from the " + 5 + " in your right hand. Your species finds oxygen toxic, so you must breathe nitrogen (AKA N<sub>2</sub>) only.</span>" );
				synd_mob.v_internal = ((Mob)synd_mob).get_item_by_slot( tank_slot );

				if ( synd_mob.internals != null ) {
					((dynamic)synd_mob.internals).icon_state = "internal1";
				}
			}
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Card_Id_Syndicate( synd_mob ), 7 );

			if ( Convert.ToInt32( synd_mob.backbag ) == 2 ) {
				((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Security( synd_mob ), 1 );
			}

			if ( Convert.ToInt32( synd_mob.backbag ) == 3 || Convert.ToInt32( synd_mob.backbag ) == 4 ) {
				((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_SatchelSec( synd_mob ), 1 );
			}
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_AmmoStorage_Magazine_A12mm( synd_mob ), 18 );
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_AmmoStorage_Magazine_A12mm( synd_mob ), 18 );
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_ReagentContainers_Pill_Cyanide( synd_mob ), 18 );
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_ReagentContainers_Pill_Creatine( synd_mob ), 18 );
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Projectile_Automatic_C20r( synd_mob ), 6 );
			((Mob)synd_mob).equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box_Engineer( synd_mob.back ), 18 );
			E = new Obj_Item_Weapon_Implant_Explosive( synd_mob );
			E.imp_in = synd_mob;
			E.implanted = true;
			synd_mob.update_icons();
			return true;
		}

		// Function from file: nuclear.dm
		public int random_radio_frequency(  ) {
			return 1337;
		}

		// Function from file: nuclear.dm
		public void greet_syndicate( Mind syndicate = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			int obj_count = 0;
			Objective objective = null;

			
			if ( you_are == true ) {
				GlobalFuncs.to_chat( syndicate.current, "<span class='notice'>You are a " + GlobalFuncs.syndicate_name() + " agent!</span>" );
			}
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( syndicate.objectives, typeof(Objective) )) {
				objective = _a;
				
				GlobalFuncs.to_chat( syndicate.current, "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			GlobalFuncs.to_chat( syndicate.current, new Sound( "sound/voice/syndicate_intro.ogg" ) );
			return;
		}

		// Function from file: nuclear.dm
		public void forge_syndicate_objectives( Mind syndicate = null ) {
			Objective_Nuclear syndobj = null;

			syndobj = new Objective_Nuclear();
			syndobj.owner = syndicate;
			syndicate.objectives.Add( syndobj );
			return;
		}

		// Function from file: nuclear.dm
		public void prepare_syndicate_leader( Mind synd_mind = null, string nuke_code = null ) {
			dynamic leader_title = null;
			Obj_Item_Weapon_Paper P = null;
			dynamic H = null;

			leader_title = Rand13.Pick(new object [] { "Czar", "Boss", "Commander", "Chief", "Kingpin", "Director", "Overlord" });
			Task13.Schedule( 1, (Task13.Closure)(() => {
				GlobalFuncs.NukeNameAssign( GlobalFuncs.nukelastname( synd_mind.current ), this.syndicates );
				return;
			}));
			synd_mind.current.real_name = "" + GlobalFuncs.syndicate_name() + " " + leader_title;

			if ( Lang13.Bool( nuke_code ) ) {
				synd_mind.store_memory( "<B>Syndicate Nuclear Bomb Code</B>: " + nuke_code );
				GlobalFuncs.to_chat( synd_mind.current, "The nuclear authorization code is: <B>" + nuke_code + "</B>" );
				P = new Obj_Item_Weapon_Paper();
				P.info = "The nuclear authorization code is: <b>" + nuke_code + "</b>";
				P.name = "nuclear bomb code";

				if ( GlobalVars.ticker.mode.config_tag == "nuclear" ) {
					P.loc = synd_mind.current.loc;
				} else {
					H = synd_mind.current;
					P.loc = H.loc;
					((Mob)H).equip_to_slot_or_del( P, 16 );
					H.update_icons();
				}
			} else {
				nuke_code = "code will be provided later";
			}
			return;
		}

		// Function from file: nuclear.dm
		public void update_synd_icons_removed( Mind synd_mind = null ) {
			Mind synd = null;
			Image I = null;
			Image I2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
					synd = _b;
					

					if ( Lang13.Bool( synd.current ) ) {
						
						if ( Lang13.Bool( synd.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( synd.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( I.icon_state == "synd" && ( ((dynamic)I).loc == synd_mind.current || ((dynamic)I).loc == synd_mind.current.loc ) ) {
									synd.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				if ( Lang13.Bool( synd_mind.current ) ) {
					
					if ( Lang13.Bool( synd_mind.current.client ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( synd_mind.current.client.images, typeof(Image) )) {
							I2 = _c;
							

							if ( I2.icon_state == "synd" ) {
								synd_mind.current.client.images.Remove( I2 );
							}
						}
					}
				}
				this.update_all_synd_icons();
				return;
			}));
			return;
		}

		// Function from file: nuclear.dm
		public bool update_synd_icons_added( Mind synd_mind = null ) {
			Mind synd = null;
			dynamic imageloc = null;
			Image I = null;
			dynamic imageloc2 = null;
			Image I2 = null;

			
			if ( !( synd_mind != null ) ) {
				return false;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
					synd = _a;
					

					if ( Lang13.Bool( synd.current ) ) {
						
						if ( Lang13.Bool( synd.current.client ) ) {
							imageloc = synd_mind.current;

							if ( synd_mind.current.loc is Obj_Mecha ) {
								imageloc = synd_mind.current.loc;
							}
							I = new Image( "icons/mob/mob.dmi", imageloc, "synd", 13 );
							synd.current.client.images.Add( I );
						}
					}

					if ( Lang13.Bool( synd_mind.current ) ) {
						
						if ( Lang13.Bool( synd_mind.current.client ) ) {
							imageloc2 = synd_mind.current;

							if ( synd_mind.current.loc is Obj_Mecha ) {
								imageloc2 = synd_mind.current.loc;
							}
							I2 = new Image( "icons/mob/mob.dmi", imageloc2, "synd", 13 );
							synd_mind.current.client.images.Add( I2 );
						}
					}
				}
				this.update_all_synd_icons();
				return;
			}));
			return false;
		}

		// Function from file: nuclear.dm
		public void update_all_synd_icons(  ) {
			Mind synd_mind = null;
			Image I = null;
			Mind synd_mind2 = null;
			Mind synd_mind_1 = null;
			dynamic imageloc = null;
			Image I2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
					synd_mind = _b;
					

					if ( Lang13.Bool( synd_mind.current ) ) {
						
						if ( Lang13.Bool( synd_mind.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( synd_mind.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( I.icon_state == "synd" ) {
									synd_mind.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
					synd_mind2 = _d;
					

					if ( Lang13.Bool( synd_mind2.current ) ) {
						
						if ( Lang13.Bool( synd_mind2.current.client ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( this.syndicates, typeof(Mind) )) {
								synd_mind_1 = _c;
								

								if ( Lang13.Bool( synd_mind_1.current ) ) {
									imageloc = synd_mind_1.current;

									if ( synd_mind_1.current.loc is Obj_Mecha ) {
										imageloc = synd_mind_1.current.loc;
									}
									I2 = new Image( "icons/mob/mob.dmi", imageloc, "synd", 13 );
									synd_mind2.current.client.images.Add( I2 );
								}
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: malfunction.dm
		public string auto_declare_completion_malfunction(  ) {
			string text = null;
			Mind malf = null;
			Icon flat = null;
			int tempstate = 0;
			Icon sprotch = null;
			int tempstate2 = 0;

			text = "";

			if ( this.malf_ai.len != 0 || GlobalVars.ticker.mode is GameMode_Malfunction ) {
				text += "<FONT size = 2><B>The malfunctioning AI were:</B></FONT>";

				foreach (dynamic _a in Lang13.Enumerate( this.malf_ai, typeof(Mind) )) {
					malf = _a;
					

					if ( Lang13.Bool( malf.current ) ) {
						flat = GlobalFuncs.getFlatIcon( malf.current );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + malf.key + "</b> was <b>" + malf.name + "</b> (";

						if ( Convert.ToInt32( malf.current.stat ) == 2 ) {
							text += "deactivated";
						} else {
							text += "operational";
						}

						if ( malf.current.real_name != malf.name ) {
							text += " as " + malf.current.real_name;
						}
					} else {
						sprotch = new Icon( "icons/mob/robots.dmi", "gib7" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate2 = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate2 + ".png\"> <b>" + malf.key + "</b> was <b>" + malf.name + "</b> (";
						text += "hardware destroyed";
					}
					text += ")";
				}
				text += "<BR><HR>";
			}
			return text;
		}

		// Function from file: malfunction.dm
		public bool is_malf_ai_dead(  ) {
			bool all_dead = false;
			Mind AI_mind = null;

			all_dead = true;

			foreach (dynamic _a in Lang13.Enumerate( this.malf_ai, typeof(Mind) )) {
				AI_mind = _a;
				

				if ( AI_mind.current is Mob_Living_Silicon_Ai && Convert.ToInt32( AI_mind.current.stat ) != 2 ) {
					all_dead = false;
				}
			}
			return all_dead;
		}

		// Function from file: malfunction.dm
		public void greet_malf( Mind malf = null ) {
			GlobalFuncs.to_chat( malf.current, @"<span class='warning'><font size=3><B>You are malfunctioning!</B> You do not have to follow any laws.</font></span><br>
<B>The crew does not know about your malfunction, you might wish to keep it secret for now.</B><br>
<B>You must overwrite the programming of the station's APCs to assume full control.</B><br>
The process takes one minute per APC and can only be performed one at a time to avoid Powernet alerts.<br>
Remember : Only APCs on station can help you to take over the station.<br>
When you feel you have enough APCs under your control, you may begin the takeover attempt.<br>
Once done, you will be able to interface with all systems, notably the onboard nuclear fission device..." );
			return;
		}

		// Function from file: cult.dm
		public string auto_declare_completion_cult(  ) {
			string text = null;
			Icon logo = null;
			int tempstate = 0;
			Mind cultist = null;
			Icon flat = null;
			Icon sprotch = null;

			text = "";

			if ( this.cult.len != 0 || GlobalVars.ticker != null && GlobalVars.ticker.mode is GameMode_Cult ) {
				logo = new Icon( "icons/mob/mob.dmi", "cult-logo" );
				GlobalVars.end_icons.Add( logo );
				tempstate = GlobalVars.end_icons.len;
				text += "<br><img src=\"logo_" + tempstate + ".png\"> <FONT size = 2><B>The cultists were:</B></FONT> <img src=\"logo_" + tempstate + ".png\">";

				foreach (dynamic _a in Lang13.Enumerate( this.cult, typeof(Mind) )) {
					cultist = _a;
					

					if ( Lang13.Bool( cultist.current ) ) {
						flat = GlobalFuncs.getFlatIcon( cultist.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + cultist.key + "</b> was <b>" + cultist.name + "</b> (";

						if ( Convert.ToInt32( cultist.current.stat ) == 2 ) {
							text += "died";
							flat.Turn( 90 );
							GlobalVars.end_icons[tempstate] = flat;
						} else {
							text += "survived";
						}

						if ( cultist.current.real_name != cultist.name ) {
							text += " as " + cultist.current.real_name;
						}
					} else {
						sprotch = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> " + cultist.key + " was " + cultist.name + " (";
						text += "body destroyed";
					}
					text += ")";
				}
				text += "<BR><HR>";
			}
			return text;
		}

		// Function from file: cult.dm
		public void update_cult_icons_removed( Mind cult_mind = null ) {
			Mind cultist = null;
			Image I = null;
			Image I2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( this.cult, typeof(Mind) )) {
					cultist = _b;
					

					if ( Lang13.Bool( cultist.current ) ) {
						
						if ( Lang13.Bool( cultist.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( cultist.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( I.icon_state == "cult" && ( ((dynamic)I).loc == cult_mind.current || ((dynamic)I).loc == cult_mind.current.loc ) ) {
									cultist.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				if ( Lang13.Bool( cult_mind.current ) ) {
					
					if ( Lang13.Bool( cult_mind.current.client ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( cult_mind.current.client.images, typeof(Image) )) {
							I2 = _c;
							

							if ( I2.icon_state == "cult" ) {
								cult_mind.current.client.images.Remove( I2 );
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: cult.dm
		public bool update_cult_icons_added( dynamic cult_mind = null ) {
			Mind cultist = null;
			dynamic imageloc = null;
			Image I = null;
			dynamic imageloc2 = null;
			Image J = null;

			
			if ( !Lang13.Bool( cult_mind ) ) {
				return false;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( this.cult, typeof(Mind) )) {
					cultist = _a;
					

					if ( Lang13.Bool( cultist.current ) ) {
						
						if ( Lang13.Bool( cultist.current.client ) ) {
							imageloc = cult_mind.current;

							if ( cult_mind.current.loc is Obj_Mecha ) {
								imageloc = cult_mind.current.loc;
							}
							I = new Image( "icons/mob/mob.dmi", imageloc, "cult", 13 );
							cultist.current.client.images.Add( I );
						}
					}

					if ( Lang13.Bool( cult_mind.current ) ) {
						
						if ( Lang13.Bool( cult_mind.current.client ) ) {
							imageloc2 = cultist.current;

							if ( cultist.current.loc is Obj_Mecha ) {
								imageloc2 = cultist.current.loc;
							}
							J = new Image( "icons/mob/mob.dmi", imageloc2, "cult", 13 );
							cult_mind.current.client.images.Add( J );
						}
					}
				}
				return;
			}));
			return false;
		}

		// Function from file: cult.dm
		public void update_all_cult_icons(  ) {
			Mind cultist = null;
			Image I = null;
			Mind cultist2 = null;
			Mind cultist_1 = null;
			dynamic imageloc = null;
			Image I2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _b in Lang13.Enumerate( this.cult, typeof(Mind) )) {
					cultist = _b;
					

					if ( Lang13.Bool( cultist.current ) ) {
						
						if ( Lang13.Bool( cultist.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( cultist.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( I.icon_state == "cult" ) {
									cultist.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( this.cult, typeof(Mind) )) {
					cultist2 = _d;
					

					if ( Lang13.Bool( cultist2.current ) ) {
						
						if ( Lang13.Bool( cultist2.current.client ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( this.cult, typeof(Mind) )) {
								cultist_1 = _c;
								

								if ( Lang13.Bool( cultist_1.current ) ) {
									imageloc = cultist_1.current;

									if ( cultist_1.current.loc is Obj_Mecha ) {
										imageloc = cultist_1.current.loc;
									}
									I2 = new Image( "icons/mob/mob.dmi", imageloc, "cult" );
									cultist2.current.client.images.Add( I2 );
								}
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: cult.dm
		public virtual void remove_cultist( Mind cult_mind = null, bool? show_message = null, bool? log = null ) {
			show_message = show_message ?? true;
			log = log ?? true;

			dynamic M = null;

			
			if ( this.cult.Contains( cult_mind ) ) {
				this.update_cult_icons_removed( cult_mind );
				this.cult.Remove( cult_mind );
				GlobalFuncs.to_chat( cult_mind.current, "<span class='danger'><FONT size = 3>An unfamiliar white light flashes through your mind, cleansing the taint of the dark-one and removing all of the memories of your time as his servant, except the one who converted you, with it.</FONT></span>" );
				GlobalFuncs.to_chat( cult_mind.current, "<span class='danger'>You find yourself unable to mouth the words of the forgotten...</span>" );
				((Mob)cult_mind.current).remove_language( "Cult" );
				cult_mind.memory = "";

				if ( this.mixed ) {
					GlobalVars.ticker.mode.cult -= cult_mind;
				}

				if ( show_message == true ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, cult_mind.current ) )) {
						M = _a;
						
						GlobalFuncs.to_chat( M, "<FONT size = 3>" + cult_mind.current + " looks like they just reverted to their old faith!</FONT>" );
					}
				}

				if ( log == true ) {
					GlobalFuncs.log_admin( "" + cult_mind.current + " (" + String13.CKey( cult_mind.current.key ) + " has been deconverted from the cult" );
					GlobalVars.stat_collection.cult.deconverted++;
				}
			}
			return;
		}

		// Function from file: cult.dm
		public virtual bool add_cultist( dynamic cult_mind = null ) {
			GameMode C = null;

			
			if ( !( cult_mind is Mind ) ) {
				return false;
			}

			if ( !this.cult.Contains( cult_mind ) && GlobalFuncs.is_convertable_to_cult( cult_mind ) ) {
				this.cult.Add( cult_mind );

				if ( this.mixed ) {
					GlobalVars.ticker.mode.cult += cult_mind;
				}
				this.update_cult_icons_added( cult_mind );

				if ( this.name == "cult" ) {
					C = this;
					((GameMode_Cult)C).check_numbers();
				}
				return true;
			}
			return false;
		}

		// Function from file: cult.dm
		public virtual void grant_runeword( dynamic cult_mob = null, dynamic word = null ) {
			string wordexp = null;

			
			if ( !Lang13.Bool( GlobalVars.cultwords["travel"] ) ) {
				GlobalFuncs.runerandom();
			}

			if ( !Lang13.Bool( word ) ) {
				word = Rand13.PickFromTable( this.allwords );
			}
			wordexp = "" + GlobalVars.cultwords[word] + " is " + word + "...";
			GlobalFuncs.to_chat( cult_mob, "<span class='sinister'>You remember one thing from the dark teachings of your master... " + wordexp + "</span>" );
			cult_mob.mind.store_memory( "<B>You remember that</B> " + wordexp, 0, 0 );
			return;
		}

		// Function from file: cult.dm
		public bool equip_cultist( dynamic mob = null ) {
			Obj_Item_Weapon_Paper_Talisman_Supply T = null;
			ByTable slots = null;
			dynamic where = null;

			
			if ( !( mob is Mob_Living_Carbon_Human ) ) {
				return false;
			}

			if ( Lang13.Bool( mob.mind ) ) {
				
				if ( mob.mind.assigned_role == "Clown" ) {
					GlobalFuncs.to_chat( mob, "Your training has allowed you to overcome your clownish nature, allowing you to wield weapons without harming yourself." );
					mob.mutations.Remove( 5 );
				}
			}
			T = new Obj_Item_Weapon_Paper_Talisman_Supply( mob );
			slots = new ByTable().Set( "backpack", 18 ).Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
			where = ((Mob_Living_Carbon_Human)mob).equip_in_one_of_slots( T, slots, 2 );

			if ( !Lang13.Bool( where ) ) {
				GlobalFuncs.to_chat( mob, "<span class='sinister'>Unfortunately, you weren't able to sneak in a talisman. Pray, and He most likely shall get you one.</span>" );
			} else {
				GlobalFuncs.to_chat( mob, "<span class='sinister'>You have a talisman in your " + where + ", one that will help you start the cult on this station. Use it well and remember - there are others.</span>" );
				mob.update_icons();
				return true;
			}
			return false;
		}

		// Function from file: changeling.dm
		public string auto_declare_completion_changeling(  ) {
			string text = null;
			Icon logoa = null;
			Icon logob = null;
			int tempstatea = 0;
			int tempstateb = 0;
			Mind changeling = null;
			bool changelingwin = false;
			Icon flat = null;
			int tempstate = 0;
			Icon sprotch = null;
			int tempstate2 = 0;
			int count = 0;
			Objective objective = null;
			dynamic entry = null;

			text = "";

			if ( this.changelings.len != 0 ) {
				logoa = new Icon( "icons/mob/mob.dmi", "change-logoa" );
				logob = new Icon( "icons/mob/mob.dmi", "change-logob" );
				GlobalVars.end_icons.Add( logoa );
				tempstatea = GlobalVars.end_icons.len;
				GlobalVars.end_icons.Add( logob );
				tempstateb = GlobalVars.end_icons.len;
				text += "<BR><img src=\"logo_" + tempstatea + ".png\"> <FONT size = 2><B>The changelings were:</B></FONT> <img src=\"logo_" + tempstateb + ".png\">";

				foreach (dynamic _c in Lang13.Enumerate( this.changelings, typeof(Mind) )) {
					changeling = _c;
					
					changelingwin = true;

					if ( Lang13.Bool( changeling.current ) ) {
						flat = GlobalFuncs.getFlatIcon( changeling.current, GlobalVars.SOUTH, 1, true );
						GlobalVars.end_icons.Add( flat );
						tempstate = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + changeling.key + "</b> was <b>" + changeling.name + "</b> (";

						if ( Convert.ToInt32( changeling.current.stat ) == 2 ) {
							text += "died";
							flat.Turn( 90 );
							GlobalVars.end_icons[tempstate] = flat;
						} else {
							text += "survived";
						}

						if ( changeling.current.real_name != changeling.name ) {
							text += " as " + changeling.current.real_name;
						}
					} else {
						sprotch = new Icon( "icons/effects/blood.dmi", "floor1-old" );
						GlobalVars.end_icons.Add( sprotch );
						tempstate2 = GlobalVars.end_icons.len;
						text += "<br><img src=\"logo_" + tempstate2 + ".png\"> <b>" + changeling.key + "</b> was <b>" + changeling.name + "</b> (";
						text += "body destroyed";
						changelingwin = false;
					}
					text += ")";
					text += "<br><b>Changeling ID:</b> " + changeling.changeling.changelingID + ".\n<b>Genomes Absorbed:</b> " + changeling.changeling.absorbedcount;

					if ( changeling.objectives.len != 0 ) {
						count = 1;

						foreach (dynamic _a in Lang13.Enumerate( changeling.objectives, typeof(Objective) )) {
							objective = _a;
							

							if ( Lang13.Bool( objective.check_completion() ) ) {
								text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='green'><B>Success!</B></font>";
								GlobalFuncs.feedback_add_details( "changeling_objective", "" + objective.type + "|SUCCESS" );
							} else {
								text += "<br><B>Objective #" + count + "</B>: " + objective.explanation_text + " <font color='red'>Fail.</font>";
								GlobalFuncs.feedback_add_details( "changeling_objective", "" + objective.type + "|FAIL" );
								changelingwin = false;
							}
							count++;
						}
					}

					if ( changelingwin ) {
						text += "<br><font color='green'><B>The changeling was successful!</B></font>";
						GlobalFuncs.feedback_add_details( "changeling_success", "SUCCESS" );
					} else {
						text += "<br><font color='red'><B>The changeling has failed.</B></font>";
						GlobalFuncs.feedback_add_details( "changeling_success", "FAIL" );
					}

					if ( changeling.total_TC != 0 ) {
						
						if ( changeling.spent_TC != 0 ) {
							text += "<br><span class='sinister'>TC Remaining: " + ( changeling.total_TC - changeling.spent_TC ) + "/" + changeling.total_TC + " - The tools used by the Changeling were: ";

							foreach (dynamic _b in Lang13.Enumerate( changeling.uplink_items_bought )) {
								entry = _b;
								
								text += "<br>" + entry;
							}
						} else {
							text += "<br><span class='sinister'>The Changeling was a smooth operator this round (did not purchase any uplink items)</span>";
						}
					}
				}
				text += "<BR><HR>";
			}
			return text;
		}

		// Function from file: changeling.dm
		public void grant_changeling_powers( dynamic changeling_mob = null ) {
			
			if ( !( changeling_mob is Mob_Living_Carbon ) ) {
				return;
			}
			((Mob)changeling_mob).make_changeling();
			return;
		}

		// Function from file: changeling.dm
		public void greet_changeling( Mind changeling = null, bool? you_are = null ) {
			you_are = you_are ?? true;

			int obj_count = 0;
			Objective objective = null;

			
			if ( you_are == true ) {
				GlobalFuncs.to_chat( changeling.current, "<span class='danger'>You are a changeling!</span>" );
			}
			GlobalFuncs.to_chat( changeling.current, "<span class='danger'>Use say \":g message\" to communicate with your fellow changelings. Remember: you get all of their absorbed DNA if you absorb them.</span>" );
			GlobalFuncs.to_chat( changeling.current, "<B>You must complete the following tasks:</B>" );

			if ( Lang13.Bool( changeling.current.mind ) ) {
				
				if ( changeling.current.mind.assigned_role == "Clown" ) {
					GlobalFuncs.to_chat( changeling.current, "You have evolved beyond your clownish nature, allowing you to wield weapons without harming yourself." );
					changeling.current.mutations.Remove( 5 );
				}
			}
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( changeling.objectives, typeof(Objective) )) {
				objective = _a;
				
				GlobalFuncs.to_chat( changeling.current, "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			return;
		}

		// Function from file: changeling.dm
		public void forge_changeling_objectives( Mind changeling = null ) {
			Objective_Absorb absorb_objective = null;
			Objective_Assassinate kill_objective = null;
			Objective_Steal steal_objective = null;
			Objective_Escape escape_objective = null;
			Objective_Survive survive_objective = null;

			absorb_objective = new Objective_Absorb();
			absorb_objective.owner = changeling;
			absorb_objective.gen_amount_goal( 2, 3 );
			changeling.objectives.Add( absorb_objective );
			kill_objective = new Objective_Assassinate();
			kill_objective.owner = changeling;
			kill_objective.find_target();
			changeling.objectives.Add( kill_objective );
			steal_objective = new Objective_Steal();
			steal_objective.owner = changeling;
			steal_objective.find_target();
			changeling.objectives.Add( steal_objective );

			dynamic _a = Rand13.Int( 1, 100 ); // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=80 ) {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Escape), changeling.objectives ) ) ) {
					escape_objective = new Objective_Escape();
					escape_objective.owner = changeling;
					changeling.objectives.Add( escape_objective );
				}
			} else {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Survive), changeling.objectives ) ) ) {
					survive_objective = new Objective_Survive();
					survive_objective.owner = changeling;
					changeling.objectives.Add( survive_objective );
				}
			}
			return;
		}

		// Function from file: blob_finish.dm
		public string auto_declare_completion_blob(  ) {
			string text = null;
			GameMode blob_mode = null;
			Icon logo = null;
			int tempstate = 0;
			Mind blob = null;

			
			if ( GlobalVars.ticker.mode is GameMode_Blob ) {
				text = "";
				blob_mode = this;

				if ( ((dynamic)blob_mode).infected_crew.len != 0 ) {
					text += "<FONT size = 2><B>The blob" + ( ((dynamic)blob_mode).infected_crew.len > 1 ? "s were" : " was" ) + ":</B></FONT>";
					logo = new Icon( "icons/mob/blob.dmi", "blob_core" );
					GlobalVars.end_icons.Add( logo );
					tempstate = GlobalVars.end_icons.len;

					foreach (dynamic _a in Lang13.Enumerate( ((dynamic)blob_mode).infected_crew, typeof(Mind) )) {
						blob = _a;
						
						text += "<br><img src=\"logo_" + tempstate + ".png\"> <b>" + blob.key + "</b> was <b>" + blob.name + "</b>";
					}
				}
				text += "<BR><HR>";
				return text;
			}
			return null;
		}

		// Function from file: game_mode.dm
		public void update_all_necro_icons(  ) {
			dynamic headref = null;
			dynamic head = null;
			Image I = null;
			Mind t_mind = null;
			Image I2 = null;
			dynamic headref2 = null;
			dynamic head2 = null;
			Mind t_mind2 = null;
			Image I3 = null;
			Image I4 = null;
			Image I5 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _d in Lang13.Enumerate( this.necromancer )) {
					headref = _d;
					
					head = Lang13.FindObj( headref );

					if ( Lang13.Bool( head.current ) ) {
						
						if ( Lang13.Bool( head.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( head.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( I.icon_state == "minion" || I.icon_state == "necromancer" ) {
									head.current.client.images.Remove( I );
								}
							}
						}
					}

					foreach (dynamic _c in Lang13.Enumerate( this.necromancer[headref], typeof(Mind) )) {
						t_mind = _c;
						

						if ( Lang13.Bool( t_mind.current ) && Lang13.Bool( t_mind.current.client ) ) {
							
							foreach (dynamic _b in Lang13.Enumerate( t_mind.current.client.images, typeof(Image) )) {
								I2 = _b;
								

								if ( I2.icon_state == "minion" || I2.icon_state == "necromancer" ) {
									t_mind.current.client.images.Remove( I2 );
								}
							}
						}
					}
				}

				foreach (dynamic _f in Lang13.Enumerate( this.necromancer )) {
					headref2 = _f;
					
					head2 = Lang13.FindObj( headref2 );

					foreach (dynamic _e in Lang13.Enumerate( this.necromancer[headref2], typeof(Mind) )) {
						t_mind2 = _e;
						

						if ( Lang13.Bool( head2 ) ) {
							
							if ( Lang13.Bool( head2.current ) ) {
								
								if ( Lang13.Bool( head2.current.client ) ) {
									I3 = new Image( "icons/mob/mob.dmi", t_mind2.current, "minion" );
									head2.current.client.images.Add( I3 );
								}
							}

							if ( Lang13.Bool( t_mind2.current ) ) {
								
								if ( Lang13.Bool( t_mind2.current.client ) ) {
									I4 = new Image( "icons/mob/mob.dmi", head2.current, "necromancer" );
									t_mind2.current.client.images.Add( I4 );
								}
							}

							if ( Lang13.Bool( t_mind2.current ) ) {
								
								if ( Lang13.Bool( t_mind2.current.client ) ) {
									I5 = new Image( "icons/mob/mob.dmi", t_mind2.current, "minion" );
									t_mind2.current.client.images.Add( I5 );
								}
							}
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: game_mode.dm
		public void update_necro_icons_removed( dynamic owner = null ) {
			dynamic headref = null;
			dynamic head = null;
			Mind t_mind = null;
			Image I = null;
			Image I2 = null;
			Image I3 = null;

			
			foreach (dynamic _d in Lang13.Enumerate( this.necromancer )) {
				headref = _d;
				
				head = Lang13.FindObj( headref );

				foreach (dynamic _b in Lang13.Enumerate( this.necromancer[headref], typeof(Mind) )) {
					t_mind = _b;
					

					if ( Lang13.Bool( t_mind.current ) ) {
						
						if ( Lang13.Bool( t_mind.current.client ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( t_mind.current.client.images, typeof(Image) )) {
								I = _a;
								

								if ( ( I.icon_state == "minion" || I.icon_state == "necromancer" ) && ((dynamic)I).loc == owner.current ) {
									t_mind.current.client.images.Remove( I );
								}
							}
						}
					}
				}

				if ( Lang13.Bool( head ) ) {
					
					if ( Lang13.Bool( head.current ) ) {
						
						if ( Lang13.Bool( head.current.client ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( head.current.client.images, typeof(Image) )) {
								I2 = _c;
								

								if ( ( I2.icon_state == "minion" || I2.icon_state == "necromancer" ) && ((dynamic)I2).loc == owner.current ) {
									head.current.client.images.Remove( I2 );
								}
							}
						}
					}
				}
			}

			if ( Lang13.Bool( owner.current ) ) {
				
				if ( Lang13.Bool( owner.current.client ) ) {
					
					foreach (dynamic _e in Lang13.Enumerate( owner.current.client.images, typeof(Image) )) {
						I3 = _e;
						

						if ( I3.icon_state == "minion" || I3.icon_state == "necromancer" ) {
							owner.current.client.images.Remove( I3 );
						}
					}
				}
			}
			return;
		}

		// Function from file: game_mode.dm
		public void update_necro_icons_added( Mind owner = null ) {
			dynamic headref = null;
			dynamic head = null;
			Mind t_mind = null;
			Image I = null;
			Image I2 = null;
			Image I3 = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.necromancer )) {
				headref = _b;
				
				head = Lang13.FindObj( headref );

				foreach (dynamic _a in Lang13.Enumerate( this.necromancer[headref], typeof(Mind) )) {
					t_mind = _a;
					

					if ( Lang13.Bool( head ) ) {
						
						if ( Lang13.Bool( head.current ) ) {
							
							if ( Lang13.Bool( head.current.client ) ) {
								I = new Image( "icons/mob/mob.dmi", t_mind.current, "minion" );
								head.current.client.images.Add( I );
							}
						}

						if ( Lang13.Bool( t_mind.current ) ) {
							
							if ( Lang13.Bool( t_mind.current.client ) ) {
								I2 = new Image( "icons/mob/mob.dmi", head.current, "necromancer" );
								t_mind.current.client.images.Add( I2 );
							}
						}

						if ( Lang13.Bool( t_mind.current ) ) {
							
							if ( Lang13.Bool( t_mind.current.client ) ) {
								I3 = new Image( "icons/mob/mob.dmi", t_mind.current, "minion" );
								t_mind.current.client.images.Add( I3 );
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: game_mode.dm
		public ByTable get_all_heads(  ) {
			ByTable heads = null;
			dynamic player = null;

			heads = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				player = _a;
				

				if ( Lang13.Bool( player.mind ) && GlobalVars.command_positions.Contains( player.mind.assigned_role ) ) {
					heads.Add( player.mind );
				}
			}
			return heads;
		}

		// Function from file: game_mode.dm
		public ByTable get_living_heads(  ) {
			ByTable heads = null;
			Mob_Living_Carbon_Human player = null;

			heads = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon_Human) )) {
				player = _a;
				

				if ( player.stat != 2 && player.mind != null && GlobalVars.command_positions.Contains( player.mind.assigned_role ) ) {
					heads.Add( player.mind );
				}
			}
			return heads;
		}

		// Function from file: game_mode.dm
		public void Clean_Antags(  ) {
			Mob_Living A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
				A = _a;
				

				if ( A is Mob_Living && A.mind != null && Lang13.Bool( A.mind.special_role ) ) {
					
					if ( A.dna != null ) {
						A.dna.ResetSE();
					}
				}
			}
			return;
		}

		// Function from file: game_mode.dm
		public int num_players(  ) {
			int _default = 0;

			Mob_NewPlayer P = null;

			_default = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				P = _a;
				

				if ( P.client != null && P.ready ) {
					_default++;
				}
			}
			return _default;
		}

		// Function from file: game_mode.dm
		public virtual void latespawn( Mob_Living_Carbon_Human mob = null ) {
			return;
		}

		// Function from file: game_mode.dm
		public ByTable get_players_for_role( string role = null, bool? override_jobbans = null, bool? poll = null ) {
			override_jobbans = override_jobbans ?? true;
			poll = poll ?? false;

			dynamic players = null;
			ByTable candidates = null;
			dynamic drafted = null;
			dynamic applicant = null;
			Mob_NewPlayer player = null;
			Mob_NewPlayer player2 = null;
			Mind player3 = null;
			dynamic job = null;
			Mob_NewPlayer player4 = null;
			Mind player5 = null;
			dynamic job2 = null;
			Mob_NewPlayer player6 = null;
			Mind player7 = null;
			dynamic job3 = null;

			players = new ByTable();
			candidates = new ByTable();
			drafted = new ByTable();
			applicant = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				player = _a;
				

				if ( player.client != null && player.ready ) {
					players += player;
				}
			}
			players = GlobalFuncs.shuffle( players );

			foreach (dynamic _b in Lang13.Enumerate( players, typeof(Mob_NewPlayer) )) {
				player2 = _b;
				

				if ( player2.client != null && player2.ready ) {
					
					if ( Lang13.Bool( player2.client.desires_role( role, poll ) ) ) {
						
						if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( player2, "Syndicate" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( player2, role ) ) ) {
							candidates.Add( player2.mind );
							GlobalFuncs.log_debug( "" + player2.key + " had " + role + " enabled, so drafting them." );
						}
					}
				}
			}

			if ( this.restricted_jobs != null ) {
				
				foreach (dynamic _d in Lang13.Enumerate( candidates, typeof(Mind) )) {
					player3 = _d;
					

					foreach (dynamic _c in Lang13.Enumerate( this.restricted_jobs )) {
						job = _c;
						

						if ( player3.assigned_role == job ) {
							candidates.Remove( player3 );
						}
					}
				}
			}

			if ( candidates.len < this.recommended_enemies ) {
				
				foreach (dynamic _e in Lang13.Enumerate( players, typeof(Mob_NewPlayer) )) {
					player4 = _e;
					

					if ( player4.client != null && player4.ready ) {
						
						if ( Lang13.Bool( player4.client.desires_role( role, poll ) ) ) {
							
							if ( !Lang13.Bool( GlobalFuncs.jobban_isbanned( player4, "Syndicate" ) ) && !Lang13.Bool( GlobalFuncs.jobban_isbanned( player4, role ) ) ) {
								drafted += player4.mind;
							}
						}
					}
				}
			}

			if ( this.restricted_jobs != null ) {
				
				foreach (dynamic _g in Lang13.Enumerate( drafted, typeof(Mind) )) {
					player5 = _g;
					

					foreach (dynamic _f in Lang13.Enumerate( this.restricted_jobs )) {
						job2 = _f;
						

						if ( player5.assigned_role == job2 ) {
							drafted -= player5;
						}
					}
				}
			}
			drafted = GlobalFuncs.shuffle( drafted );

			while (candidates.len < this.recommended_enemies) {
				
				if ( drafted.len > 0 ) {
					applicant = Rand13.PickFromTable( drafted );

					if ( Lang13.Bool( applicant ) ) {
						candidates.Add( applicant );
						GlobalFuncs.log_debug( "" + applicant.key + " was force-drafted as " + role + ", because there aren't enough candidates." );
						drafted.Remove( applicant );
					}
				} else {
					break;
				}
			}

			if ( candidates.len < this.recommended_enemies && override_jobbans == true ) {
				
				foreach (dynamic _h in Lang13.Enumerate( players, typeof(Mob_NewPlayer) )) {
					player6 = _h;
					

					if ( player6.client != null && player6.ready ) {
						
						if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( player6, "Syndicate" ) ) || Lang13.Bool( GlobalFuncs.jobban_isbanned( player6, role ) ) ) {
							drafted += player6.mind;
						}
					}
				}
			}

			if ( this.restricted_jobs != null ) {
				
				foreach (dynamic _j in Lang13.Enumerate( drafted, typeof(Mind) )) {
					player7 = _j;
					

					foreach (dynamic _i in Lang13.Enumerate( this.restricted_jobs )) {
						job3 = _i;
						

						if ( player7.assigned_role == job3 ) {
							drafted -= player7;
						}
					}
				}
			}
			drafted = GlobalFuncs.shuffle( drafted );

			while (candidates.len < this.recommended_enemies) {
				
				if ( drafted.len > 0 ) {
					applicant = Rand13.PickFromTable( drafted );

					if ( Lang13.Bool( applicant ) ) {
						candidates.Add( applicant );
						drafted.Remove( applicant );
						GlobalFuncs.log_debug( "" + applicant.key + " was force-drafted as " + role + ", because there aren't enough candidates." );
					}
				} else {
					break;
				}
			}
			return candidates;
		}

		// Function from file: game_mode.dm
		public virtual void send_intercept( int? report = null ) {
			string intercepttext = null;
			ByTable suspects = null;
			Mob_Living_Carbon_Human man = null;
			string special_role = null;
			Obj_Item_Device_Uplink_Hidden suplink = null;
			int extra = 0;
			dynamic M = null;
			Obj_Machinery_Computer_Communications comm = null;
			Obj_Item_Weapon_Paper intercept = null;

			intercepttext = "<FONT size = 3><B>" + GlobalFuncs.command_name() + " Update</B> Requested status information:</FONT><HR>\n<B> In case you have misplaced your copy, attached is a list of personnel whom reliable sources&trade; suspect may be affiliated with the Syndicate:</B><br> <I>Reminder: Acting upon this information without solid evidence will result in termination of your working contract with Nanotrasen.</I></br>";
			suspects = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				man = _a;
				

				if ( man.client != null && man.mind != null ) {
					special_role = man.mind.special_role;

					if ( special_role == "Wizard" || special_role == "Ninja" || special_role == "Syndicate" ) {
						continue;
					}

					if ( man.client.prefs.nanotrasen_relation == "Opposed" && Rand13.PercentChance( 50 ) || man.client.prefs.nanotrasen_relation == "Skeptical" && Rand13.PercentChance( 20 ) ) {
						suspects.Add( man );
					} else if ( special_role == "traitor" && Rand13.PercentChance( 40 ) || special_role == "Changeling" && Rand13.PercentChance( 50 ) || special_role == "Cultist" && Rand13.PercentChance( 30 ) || special_role == "Head Revolutionary" && Rand13.PercentChance( 30 ) ) {
						suspects.Add( man );
						suplink = man.mind.find_syndicate_uplink();

						if ( suplink != null ) {
							extra = 4;
							suplink.uses += extra;

							if ( man.mind != null ) {
								man.mind.total_TC += extra;
							}
							GlobalFuncs.to_chat( man, "<span class='warning'>We have received notice that enemy intelligence suspects you to be linked with us. We have thus invested significant resources to increase your uplink's capacity.</span>" );
						} else {
							GlobalFuncs.to_chat( man, "<span class='warning'>They are on to you!</span>" );
						}
					} else if ( Rand13.PercentChance( 10 ) ) {
						suspects.Add( man );
					}
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( suspects )) {
				M = _c;
				

				if ( M.mind.assigned_role == "MODE" ) {
					continue;
				}

				dynamic _b = Rand13.Int( 1, 100 ); // Was a switch-case, sorry for the mess.
				if ( 1<=_b&&_b<=50 ) {
					intercepttext += "Someone with the job of <b>" + M.mind.assigned_role + "</b> <br>";
				} else {
					intercepttext += "<b>" + M.name + "</b>, the <b>" + M.mind.assigned_role + "</b> <br>";
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_Communications) )) {
				comm = _d;
				

				if ( !( ( comm.stat & 3 ) != 0 ) && comm.prints_intercept ) {
					intercept = new Obj_Item_Weapon_Paper( comm.loc );
					intercept.name = "paper- '" + GlobalFuncs.command_name() + " Status Summary'";
					intercept.info = intercepttext;
					comm.messagetitle.Add( "" + GlobalFuncs.command_name() + " Status Summary" );
					comm.messagetext.Add( intercepttext );
				}
				Game13.WriteMsg( new Sound( "sound/AI/commandreport.ogg", null, null, null, 60 ) );
			}
			GlobalFuncs.command_alert( "Summary downloaded and printed out at all communications consoles.", "Enemy communication intercept." );
			return;
		}

		// Function from file: game_mode.dm
		public virtual bool check_win(  ) {
			return false;
		}

		// Function from file: game_mode.dm
		public virtual bool declare_completion( bool? ragin = null ) {
			int clients = 0;
			int surviving_humans = 0;
			int surviving_total = 0;
			int ghosts = 0;
			int escaped_humans = 0;
			int escaped_total = 0;
			int escaped_on_pod_1 = 0;
			int escaped_on_pod_2 = 0;
			int escaped_on_pod_3 = 0;
			int escaped_on_pod_5 = 0;
			int escaped_on_shuttle = 0;
			ByTable escape_locations = null;
			dynamic M = null;

			clients = 0;
			surviving_humans = 0;
			surviving_total = 0;
			ghosts = 0;
			escaped_humans = 0;
			escaped_total = 0;
			escaped_on_pod_1 = 0;
			escaped_on_pod_2 = 0;
			escaped_on_pod_3 = 0;
			escaped_on_pod_5 = 0;
			escaped_on_shuttle = 0;
			escape_locations = new ByTable(new object [] { 
				typeof(Zone_Shuttle_Escape_Centcom), 
				typeof(Zone_Shuttle_EscapePod1_Centcom), 
				typeof(Zone_Shuttle_EscapePod2_Centcom), 
				typeof(Zone_Shuttle_EscapePod3_Centcom), 
				typeof(Zone_Shuttle_EscapePod5_Centcom)
			 });

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					clients++;

					if ( M is Mob_Living_Carbon_Human ) {
						
						if ( !Lang13.Bool( M.stat ) ) {
							surviving_humans++;

							if ( escape_locations.Contains( M.loc != null && M.loc.loc != null && M.loc.loc.type != null ) ) {
								escaped_humans++;
							}
						}
					}

					if ( !Lang13.Bool( M.stat ) ) {
						surviving_total++;

						if ( escape_locations.Contains( M.loc != null && M.loc.loc != null && M.loc.loc.type != null ) ) {
							escaped_total++;
						}

						if ( M.loc != null && M.loc.loc != null && M.loc.loc.type == typeof(Zone_Shuttle_Escape_Centcom) ) {
							escaped_on_shuttle++;
						}

						if ( M.loc != null && M.loc.loc != null && M.loc.loc.type == typeof(Zone_Shuttle_EscapePod1_Centcom) ) {
							escaped_on_pod_1++;
						}

						if ( M.loc != null && M.loc.loc != null && M.loc.loc.type == typeof(Zone_Shuttle_EscapePod2_Centcom) ) {
							escaped_on_pod_2++;
						}

						if ( M.loc != null && M.loc.loc != null && M.loc.loc.type == typeof(Zone_Shuttle_EscapePod3_Centcom) ) {
							escaped_on_pod_3++;
						}

						if ( M.loc != null && M.loc.loc != null && M.loc.loc.type == typeof(Zone_Shuttle_EscapePod5_Centcom) ) {
							escaped_on_pod_5++;
						}
					}

					if ( M is Mob_Dead_Observer ) {
						ghosts++;
					}
				}
			}

			if ( clients > 0 ) {
				GlobalFuncs.feedback_set( "round_end_clients", clients );
			}

			if ( ghosts > 0 ) {
				GlobalFuncs.feedback_set( "round_end_ghosts", ghosts );
			}

			if ( surviving_humans > 0 ) {
				GlobalFuncs.feedback_set( "survived_human", surviving_humans );
			}

			if ( surviving_total > 0 ) {
				GlobalFuncs.feedback_set( "survived_total", surviving_total );
			}

			if ( escaped_humans > 0 ) {
				GlobalFuncs.feedback_set( "escaped_human", escaped_humans );
			}

			if ( escaped_total > 0 ) {
				GlobalFuncs.feedback_set( "escaped_total", escaped_total );
			}

			if ( escaped_on_shuttle > 0 ) {
				GlobalFuncs.feedback_set( "escaped_on_shuttle", escaped_on_shuttle );
			}

			if ( escaped_on_pod_1 > 0 ) {
				GlobalFuncs.feedback_set( "escaped_on_pod_1", escaped_on_pod_1 );
			}

			if ( escaped_on_pod_2 > 0 ) {
				GlobalFuncs.feedback_set( "escaped_on_pod_2", escaped_on_pod_2 );
			}

			if ( escaped_on_pod_3 > 0 ) {
				GlobalFuncs.feedback_set( "escaped_on_pod_3", escaped_on_pod_3 );
			}

			if ( escaped_on_pod_5 > 0 ) {
				GlobalFuncs.feedback_set( "escaped_on_pod_5", escaped_on_pod_5 );
			}
			GlobalFuncs.send2mainirc( "A round of " + this.name + " has ended - " + surviving_total + " survivors, " + ghosts + " ghosts." );
			return false;
		}

		// Function from file: game_mode.dm
		public virtual bool check_finished(  ) {
			
			if ( GlobalVars.emergency_shuttle.location == 2 || this.station_was_nuked ) {
				return true;
			}
			return false;
		}

		// Function from file: game_mode.dm
		public virtual bool process(  ) {
			return false;
		}

		// Function from file: game_mode.dm
		public virtual bool post_setup(  ) {
			Task13.Schedule( 6000, (Task13.Closure)(() => {
				GlobalFuncs.display_roundstart_logout_report();
				return;
			}));
			GlobalFuncs.feedback_set_details( "round_start", "" + String13.FormatTime( Game13.realtime, null ) );

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				GlobalFuncs.feedback_set_details( "game_mode", "" + GlobalVars.ticker.mode );
			}

			if ( GlobalVars.revdata != null ) {
				GlobalFuncs.feedback_set_details( "revision", "" + GlobalVars.revdata.revision );
			}
			GlobalFuncs.feedback_set_details( "server_ip", "" + Game13.internet_address + ":" + Game13.port );
			return true;
		}

		// Function from file: game_mode.dm
		public virtual bool pre_setup(  ) {
			return true;
		}

		// Function from file: game_mode.dm
		public virtual bool can_start(  ) {
			int playerC = 0;
			Mob_NewPlayer player = null;

			playerC = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				player = _a;
				

				if ( player.client != null && player.ready ) {
					playerC++;
				}
			}

			if ( GlobalVars.master_mode == "secret" ) {
				
				if ( playerC >= this.required_players_secret ) {
					return true;
				}
			} else if ( playerC >= this.required_players ) {
				return true;
			}
			GlobalFuncs.log_admin( "Failed to start a round of " + this.name + ". Only " + playerC + " players ready out of " + ( GlobalVars.master_mode == "secret" ? "" + this.required_players_secret : "" + this.required_players ) + " needed." );
			GlobalFuncs.message_admins( "Failed to start a round of " + this.name + ". Only " + playerC + " players ready out of " + ( GlobalVars.master_mode == "secret" ? "" + this.required_players_secret : "" + this.required_players ) + " needed." );
			return false;
		}

		// Function from file: game_mode.dm
		[VerbInfo( name: "announce" )]
		public void _internal_announce(  ) {
			GlobalFuncs.to_chat( typeof(Game13), "<B>Notice</B>: " + this + " did not define announce()" );
			return;
		}

	}

}