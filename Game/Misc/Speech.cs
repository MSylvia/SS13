// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Speech : Game_Data {

		public dynamic name = "";
		public string as_name = "";
		public string message = "";
		public double frequency = 0;
		public string job = "";
		public string lquote = "\"";
		public string rquote = "\"";
		public Language language = null;
		public dynamic radio = null;
		public Ent_Dynamic speaker = null;
		public dynamic message_classes = new ByTable(new object [] { "message" });
		public dynamic wrapper_classes = new ByTable(new object [] { "game", "say" });
		public int mode = 1;

		// Function from file: speech.dm
		public override dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			base.resetVariables( "wrapper_classes", "message_classes" );
			this.message_classes = new ByTable();
			this.wrapper_classes = new ByTable();
			this.language = null;
			this.speaker = null;
			this.radio = null;
			return null;
		}

		// Function from file: speech.dm
		public override void Del(  ) {
			base.Del();
			return;
		}

		// Function from file: speech.dm
		public void set_language( dynamic lang_id = null ) {
			this.language = GlobalVars.all_languages[lang_id];
			return;
		}

		// Function from file: speech.dm
		public void from_signal( dynamic signal = null ) {
			dynamic data = null;

			this.frequency = Convert.ToDouble( signal.frequency );

			if ( Lang13.Bool( signal.data.Contains( "mob" ) ) ) {
				this.speaker = signal.data["mob"];
			}
			this.message = signal.data["message"];
			this.name = signal.data["name"];
			this.job = signal.data["job"];
			this.radio = signal.data["radio"];
			this.language = signal.data["language"];
			this.mode = Convert.ToInt32( signal.data["mode"] );
			this.lquote = signal.data["left_quote"];
			this.rquote = signal.data["right_quote"];
			data = signal.data["message_classes"];

			if ( Lang13.Bool( data ) ) {
				this.message_classes = data.Copy();
			}
			data = signal.data["wrapper_classes"];

			if ( Lang13.Bool( data ) ) {
				this.wrapper_classes = data.Copy();
			}
			return;
		}

		// Function from file: speech.dm
		public dynamic to_signal( dynamic signal = null ) {
			
			if ( this.speaker != null ) {
				signal.data["mob"] = this.speaker;
				signal.data["mobtype"] = this.speaker.type;
			}
			signal.data["message_classes"] = this.message_classes.Copy();
			signal.data["wrapper_classes"] = this.wrapper_classes.Copy();
			signal.data["realname"] = this.get_real_name();
			signal.data["name"] = this.name;
			signal.data["job"] = this.job;
			signal.data["key"] = this.get_key();
			signal.data["message"] = this.message;
			signal.data["radio"] = this.radio;
			signal.data["mode"] = this.mode;
			signal.data["language"] = this.language;
			signal.data["r_quote"] = this.rquote;
			signal.data["l_quote"] = this.lquote;
			signal.frequency = this.frequency;
			return signal;
		}

		// Function from file: speech.dm
		public dynamic get_key(  ) {
			Ent_Dynamic M = null;

			
			if ( this.speaker is Mob ) {
				M = this.speaker;

				if ( Lang13.Bool( ((dynamic)M).client ) ) {
					return ((dynamic)M).key;
				}
			}
			return null;
		}

		// Function from file: speech.dm
		public dynamic get_real_name(  ) {
			Ent_Dynamic M = null;

			
			if ( this.speaker is Mob ) {
				M = this.speaker;
				return ((dynamic)M).real_name;
			}
			return this.name;
		}

		// Function from file: speech.dm
		public string render_as_name(  ) {
			
			if ( Lang13.Bool( this.as_name ) && this.as_name != this.name ) {
				return " (as " + this.as_name + ")";
			}
			return "";
		}

		// Function from file: speech.dm
		public string render_message(  ) {
			string rendered = null;

			rendered = this.message;

			if ( !Lang13.Bool( this.lquote ) ) {
				this.lquote = "\"";
			}

			if ( !Lang13.Bool( this.rquote ) ) {
				this.rquote = "\"";
			}
			rendered = "<span class='" + GlobalFuncs.list2text( this.message_classes, " " ) + "'>" + this.lquote + rendered + this.rquote + "</span>";

			if ( this.language != null ) {
				rendered = this.language.render_speech( this, rendered );
			} else if ( this.speaker != null ) {
				rendered = this.speaker.say_quote( rendered );
			} else {
				Game13.log.WriteMsg( "## WARNING: " + ( "Speaker not set! (message=\"" + this.message + "\")" ) );
			}
			return rendered;
		}

		// Function from file: speech.dm
		public string render_message_classes( string sep = null ) {
			sep = sep ?? " ";

			return GlobalFuncs.list2text( this.message_classes, sep );
		}

		// Function from file: speech.dm
		public string render_wrapper_classes( string sep = null ) {
			sep = sep ?? " ";

			return GlobalFuncs.list2text( this.wrapper_classes, sep );
		}

		// Function from file: speech.dm
		public Game_Data scramble(  ) {
			Game_Data clone = null;

			clone = this.clone();

			if ( this.language != null ) {
				((dynamic)clone).message = this.language.scramble( this.message );
			} else {
				((dynamic)clone).message = GlobalFuncs.stars( this.message, 10 );
			}
			return clone;
		}

		// Function from file: speech.dm
		public Game_Data clone(  ) {
			Game_Data clone = null;

			clone = GlobalFuncs.getFromPool( typeof(Speech) );
			((dynamic)clone).name = this.name;
			((dynamic)clone).as_name = this.as_name;
			((dynamic)clone).message = this.message;
			((dynamic)clone).frequency = this.frequency;
			((dynamic)clone).job = this.job;
			((dynamic)clone).language = this.language;
			((dynamic)clone).radio = this.radio;
			((dynamic)clone).speaker = this.speaker;
			((dynamic)clone).mode = this.mode;
			((dynamic)clone).message_classes = this.message_classes.Copy();
			((dynamic)clone).wrapper_classes = this.wrapper_classes.Copy();
			return clone;
		}

		// Function from file: speech.dm
		public void update_speaker( Ent_Dynamic new_speaker = null, dynamic radio = null ) {
			this.speaker = new_speaker;
			this.job = this.speaker.get_job( this );
			this.radio = radio;
			this.name = new_speaker.GetVoice();
			this.as_name = new_speaker.get_alt_name();
			return;
		}

	}

}