// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Reagents : Game_Data {

		public ByTable reagent_list = new ByTable();
		public ByTable amount_cache = new ByTable();
		public double? total_volume = 0;
		public dynamic maximum_volume = 100;
		public Ent_Static my_atom = null;

		// Function from file: Chemistry-Holder.dm
		public Reagents ( dynamic maximum = null ) {
			maximum = maximum ?? 100;

			dynamic path = null;
			dynamic D = null;
			dynamic path2 = null;
			dynamic D2 = null;
			ByTable reaction_ids = null;
			dynamic reaction = null;
			dynamic id = null;

			this.maximum_volume = maximum;

			if ( !( GlobalVars.chemical_reagents_list != null ) ) {
				GlobalVars.chemical_reagents_list = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Reagent) ) - typeof(Reagent) )) {
					path = _a;
					
					D = Lang13.Call( path );
					GlobalVars.chemical_reagents_list[D.id] = D;
				}
			}

			if ( !( GlobalVars.chemical_reactions_list != null ) ) {
				GlobalVars.chemical_reactions_list = new ByTable();

				foreach (dynamic _d in Lang13.Enumerate( Lang13.GetTypes( typeof(ChemicalReaction) ) - typeof(ChemicalReaction) )) {
					path2 = _d;
					
					D2 = Lang13.Call( path2 );
					reaction_ids = new ByTable();

					if ( D2.required_reagents != null && D2.required_reagents.len != 0 ) {
						
						foreach (dynamic _b in Lang13.Enumerate( D2.required_reagents )) {
							reaction = _b;
							
							reaction_ids.Add( reaction );
						}
					}

					foreach (dynamic _c in Lang13.Enumerate( reaction_ids )) {
						id = _c;
						

						if ( !Lang13.Bool( GlobalVars.chemical_reactions_list[id] ) ) {
							GlobalVars.chemical_reactions_list[id] = new ByTable();
						}
						GlobalVars.chemical_reactions_list[id] += D2;
						break;
					}
				}
			}
			return;
		}

		// Function from file: Chemistry-Holder.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Reagent reagent = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				reagent = _a;
				
				GlobalFuncs.qdel( reagent );
			}
			this.reagent_list.Cut();

			if ( this.my_atom != null ) {
				this.my_atom = null;
			}
			return null;
		}

		// Function from file: Chemistry-Holder.dm
		public bool is_full(  ) {
			return ( this.total_volume ??0) >= Convert.ToDouble( this.maximum_volume );
		}

		// Function from file: Chemistry-Holder.dm
		public bool is_empty(  ) {
			return ( this.total_volume ??0) <= 0;
		}

		// Function from file: Chemistry-Holder.dm
		public ByTable get_bad_reagent_names(  ) {
			ByTable bad_reagents = null;
			dynamic reagent_id = null;

			
			if ( !( GlobalVars.reagents_to_log is ByTable ) || GlobalVars.reagents_to_log.len == 0 ) {
				return null;
			}
			bad_reagents = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.reagents_to_log )) {
				reagent_id = _a;
				

				if ( this.has_reagent( reagent_id ) ) {
					bad_reagents.Add( GlobalVars.reagents_to_log[reagent_id] );
				}
			}
			return bad_reagents;
		}

		// Function from file: Chemistry-Holder.dm
		public void set_data( string reagent_id = null, dynamic new_data = null ) {
			Reagent D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				D = _a;
				

				if ( D.id == reagent_id ) {
					D.data = new_data;
				}
			}
			return;
		}

		// Function from file: Chemistry-Holder.dm
		public dynamic get_data( dynamic reagent_id = null ) {
			Reagent D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				D = _a;
				

				if ( D.id == reagent_id ) {
					return D.data;
				}
			}
			return null;
		}

		// Function from file: Chemistry-Holder.dm
		public bool remove_all_type( Type reagent_type = null, double? amount = null, bool? strict = null, bool? safety = null ) {
			strict = strict ?? false;
			safety = safety ?? true;

			bool has_removed_reagent = false;
			Reagent R = null;
			bool matches = false;

			
			if ( !Lang13.Bool( Lang13.IsNumber( amount ) ) ) {
				return true;
			}
			has_removed_reagent = false;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				R = _a;
				
				matches = false;

				if ( strict == true ) {
					
					if ( R.type == reagent_type ) {
						matches = true;
					}
				} else if ( Lang13.Bool( ((dynamic)reagent_type).IsInstanceOfType( R ) ) ) {
					matches = true;
				}

				if ( matches ) {
					has_removed_reagent = this.remove_reagent( R.id, amount, safety );
				}
			}
			return has_removed_reagent;
		}

		// Function from file: Chemistry-Holder.dm
		public string get_reagent_ids( bool? and_amount = null ) {
			and_amount = and_amount ?? false;

			ByTable stuff = null;
			Reagent A = null;

			stuff = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				A = _a;
				

				if ( and_amount == true ) {
					stuff.Add( "" + this.get_reagent_amount( A.id ) + "U of " + A.id );
				} else {
					stuff.Add( A.id );
				}
			}
			return GlobalFuncs.english_list( stuff );
		}

		// Function from file: Chemistry-Holder.dm
		public string get_reagents(  ) {
			string res = null;
			Reagent A = null;

			res = "";

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				A = _a;
				

				if ( res != "" ) {
					res += ",";
				}
				res += A.name;
			}
			return res;
		}

		// Function from file: Chemistry-Holder.dm
		public bool get_reagent_amount( dynamic reagent = null ) {
			dynamic A = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				A = _a;
				
				R = A;

				if ( R.id == reagent ) {
					return Lang13.Bool( R.volume );
				}
			}
			return false;
		}

		// Function from file: Chemistry-Holder.dm
		public dynamic get_reagent( string reagent = null, int? amount = null ) {
			amount = amount ?? -1;

			dynamic A = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				A = _a;
				
				R = A;

				if ( R.id == reagent ) {
					
					if ( !Lang13.Bool( amount ) ) {
						return R;
					} else if ( Convert.ToDouble( R.volume ) >= ( amount ??0) ) {
						return R;
					}
					return 0;
				}
			}
			return 0;
		}

		// Function from file: Chemistry-Holder.dm
		public bool has_reagent( dynamic reagent = null, int? amount = null ) {
			amount = amount ?? -1;

			
			if ( this.amount_cache.Contains( reagent ) ) {
				return Convert.ToDouble( this.amount_cache[reagent] ) >= Num13.MaxInt( 0, amount ??0 );
			}
			return false;
		}

		// Function from file: Chemistry-Holder.dm
		public bool remove_reagent( dynamic reagent = null, dynamic amount = null, bool? safety = null ) {
			Reagent R = null;

			
			if ( !Lang13.Bool( Lang13.IsNumber( amount ) ) ) {
				return true;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				R = _a;
				

				if ( R.id == reagent ) {
					
					if ( !R.on_removal( amount ) ) {
						return false;
					}
					R.volume -= Convert.ToDouble( amount );
					this.update_total();

					if ( !( safety == true ) ) {
						this.handle_reactions();
					}

					if ( this.my_atom != null ) {
						this.my_atom.on_reagent_change();
					}
					return false;
				}
			}
			return true;
		}

		// Function from file: Chemistry-Holder.dm
		public bool add_reagent( dynamic reagent = null, dynamic amount = null, dynamic data = null ) {
			Reagent R = null;
			dynamic mix1 = null;
			dynamic mix2 = null;
			ByTable to_mix = null;
			Disease_Advance AD = null;
			Disease_Advance AD2 = null;
			dynamic AD3 = null;
			ByTable preserve = null;
			Disease_Advance D = null;
			Base_Data D2 = null;
			dynamic R2 = null;

			
			if ( !( this.my_atom != null ) ) {
				return false;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( amount ) ) ) {
				return true;
			}
			this.update_total();

			if ( ( this.total_volume ??0) + Convert.ToDouble( amount ) > Convert.ToDouble( this.maximum_volume ) ) {
				amount = this.maximum_volume - this.total_volume;
			}

			foreach (dynamic _d in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				R = _d;
				

				if ( R.id == reagent ) {
					R.volume += Convert.ToDouble( amount );
					this.update_total();
					this.my_atom.on_reagent_change();

					if ( R.id == "blood" && reagent == "blood" ) {
						
						if ( Lang13.Bool( R.data ) && Lang13.Bool( data ) ) {
							
							if ( Lang13.Bool( R.data["viruses"] ) || Lang13.Bool( data["viruses"] ) ) {
								mix1 = R.data["viruses"];
								mix2 = data["viruses"];
								to_mix = new ByTable();

								foreach (dynamic _a in Lang13.Enumerate( mix1, typeof(Disease_Advance) )) {
									AD = _a;
									
									to_mix.Add( AD );
								}

								foreach (dynamic _b in Lang13.Enumerate( mix2, typeof(Disease_Advance) )) {
									AD2 = _b;
									
									to_mix.Add( AD2 );
								}
								AD3 = GlobalFuncs.Advance_Mix( to_mix );

								if ( Lang13.Bool( AD3 ) ) {
									preserve = new ByTable(new object [] { AD3 });

									foreach (dynamic _c in Lang13.Enumerate( R.data["viruses"], typeof(Disease_Advance) )) {
										D = _c;
										
									}
									R.data["viruses"] = preserve;
								}
							}
						}
					}
					this.handle_reactions();
					return false;
				}
			}
			D2 = GlobalVars.chemical_reagents_list[reagent];

			if ( D2 != null ) {
				R2 = Lang13.Call( D2.type );
				this.reagent_list.Add( R2 );
				R2.holder = this;
				R2.volume = amount;
				GlobalFuncs.SetViruses( R2, data );
				this.update_total();
				this.my_atom.on_reagent_change();
				this.handle_reactions();
				return false;
			} else {
				Game13.log.WriteMsg( "## WARNING: " + ( "" + this.my_atom + " attempted to add a reagent called '" + reagent + "' which doesn't exist. (" + Task13.User + ")" ) );
			}
			this.handle_reactions();
			return true;
		}

		// Function from file: Chemistry-Holder.dm
		public void reaction( dynamic A = null, int? method = null, int? volume_modifier = null ) {
			method = method ?? GlobalVars.TOUCH;
			volume_modifier = volume_modifier ?? 0;

			Reagent R = null;
			Reagent R2 = null;

			
			switch ((int?)( method )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
						R = _a;
						

						if ( A is Mob ) {
							
							if ( A is Mob_Living_SimpleAnimal ) {
								R.reaction_animal( A, GlobalVars.TOUCH, ( R.volume ??0) + ( volume_modifier ??0) );
							} else {
								R.reaction_mob( A, GlobalVars.TOUCH, ( R.volume ??0) + ( volume_modifier ??0) );
							}
						}

						if ( A is Tile ) {
							R.reaction_turf( A, ( R.volume ??0) + ( volume_modifier ??0) );
						}

						if ( A is Obj ) {
							R.reaction_obj( A, ( R.volume ??0) + ( volume_modifier ??0) );
						}
					}
					break;
				case 2:
					
					foreach (dynamic _b in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
						R2 = _b;
						

						if ( A is Mob ) {
							
							if ( A is Mob_Living_SimpleAnimal ) {
								R2.reaction_animal( A, GlobalVars.INGEST, ( R2.volume ??0) + ( volume_modifier ??0) );
							} else {
								R2.reaction_mob( A, GlobalVars.INGEST, ( R2.volume ??0) + ( volume_modifier ??0) );
							}
						}

						if ( A is Tile && R2 != null ) {
							R2.reaction_turf( A, ( R2.volume ??0) + ( volume_modifier ??0) );
						}

						if ( A is Obj && R2 != null ) {
							R2.reaction_obj( A, ( R2.volume ??0) + ( volume_modifier ??0) );
						}
					}
					break;
			}
			return;
		}

		// Function from file: Chemistry-Holder.dm
		public bool clear_reagents(  ) {
			Reagent R = null;

			this.amount_cache.len = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				R = _a;
				
				this.del_reagent( R.id, false );
			}
			this.update_total();

			if ( this.my_atom != null ) {
				this.my_atom.on_reagent_change();
			}
			return false;
		}

		// Function from file: Chemistry-Holder.dm
		public bool update_total(  ) {
			Reagent R = null;

			this.total_volume = 0;
			this.amount_cache.len = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				R = _a;
				

				if ( ( R.volume ??0) < 0.1 ) {
					this.del_reagent( R.id, false );
				} else {
					this.total_volume += R.volume ??0;
					this.amount_cache[R.id] = R.volume;
				}
			}
			return false;
		}

		// Function from file: Chemistry-Holder.dm
		public bool del_reagent( string reagent = null, bool? update_totals = null ) {
			update_totals = update_totals ?? true;

			bool total_dirty = false;
			dynamic A = null;
			dynamic R = null;

			total_dirty = false;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				A = _a;
				
				R = A;

				if ( R.id == reagent ) {
					((Reagent)R).reagent_deleted();
					this.reagent_list.Remove( A );
					R.holder = null;
					total_dirty = true;
					break;
				}
			}

			if ( total_dirty && update_totals == true ) {
				this.update_total();
				this.my_atom.on_reagent_change();
			}
			return total_dirty;
		}

		// Function from file: Chemistry-Holder.dm
		public void isolate_reagent( dynamic reagent = null ) {
			dynamic A = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				A = _a;
				
				R = A;

				if ( R.id != reagent ) {
					this.del_reagent( R.id, false );
				}
			}
			this.update_total();
			this.my_atom.on_reagent_change();
			return;
		}

		// Function from file: Chemistry-Holder.dm
		public bool handle_reactions(  ) {
			bool reaction_occured = false;
			Reagent R = null;
			dynamic reaction = null;
			dynamic C = null;
			int total_required_reagents = 0;
			int total_matching_reagents = 0;
			int total_required_catalysts = 0;
			int total_matching_catalysts = 0;
			bool matching_container = false;
			bool matching_other = false;
			ByTable multipliers = null;
			dynamic B = null;
			dynamic B2 = null;
			Ent_Static M = null;
			dynamic multiplier = null;
			dynamic preserved_data = null;
			dynamic B3 = null;
			int? created_volume = null;
			dynamic S = null;
			Ent_Static ME2 = null;

			
			if ( !( this.my_atom != null ) ) {
				return false;
			}

			if ( Lang13.Bool( this.my_atom.flags & 16384 ) ) {
				return false;
			}
			reaction_occured = false;

			do {
				reaction_occured = false;

				foreach (dynamic _f in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
					R = _f;
					

					foreach (dynamic _e in Lang13.Enumerate( GlobalVars.chemical_reactions_list[R.id] )) {
						reaction = _e;
						

						if ( !Lang13.Bool( reaction ) ) {
							continue;
						}
						C = reaction;

						if ( C.requires_heating ) {
							
							if ( this.my_atom.loc is Obj_Machinery_BunsenBurner ) {
								
								if ( !Lang13.Bool( ((dynamic)this.my_atom.loc).heated ) ) {
									continue;
								}
							} else {
								continue;
							}
						}
						total_required_reagents = C.required_reagents.len;
						total_matching_reagents = 0;
						total_required_catalysts = C.required_catalysts.len;
						total_matching_catalysts = 0;
						matching_container = false;
						matching_other = false;
						multipliers = new ByTable();

						foreach (dynamic _a in Lang13.Enumerate( C.required_reagents )) {
							B = _a;
							

							if ( !this.has_reagent( B, Lang13.IntNullable( C.required_reagents[B] ) ) ) {
								break;
							}
							total_matching_reagents++;
							multipliers.Add( Num13.Floor( ( this.get_reagent_amount( B ) ?1:0) / Convert.ToDouble( C.required_reagents[B] ) ) );
						}

						foreach (dynamic _b in Lang13.Enumerate( C.required_catalysts )) {
							B2 = _b;
							

							if ( !this.has_reagent( B2, Lang13.IntNullable( C.required_catalysts[B2] ) ) ) {
								break;
							}
							total_matching_catalysts++;
						}

						if ( !( C.required_container != null ) ) {
							matching_container = true;
						} else if ( this.my_atom.type == C.required_container ) {
							matching_container = true;
						}

						if ( !C.required_other ) {
							matching_other = true;
						} else if ( this.my_atom is Obj_Item_SlimeExtract ) {
							M = this.my_atom;

							if ( Convert.ToDouble( ((dynamic)M).Uses ) > 0 ) {
								matching_other = true;
							}
						}

						if ( total_matching_reagents == total_required_reagents && total_matching_catalysts == total_required_catalysts && matching_container && matching_other ) {
							multiplier = Num13.Min( multipliers );
							preserved_data = null;

							foreach (dynamic _c in Lang13.Enumerate( C.required_reagents )) {
								B3 = _c;
								

								if ( !Lang13.Bool( preserved_data ) ) {
									preserved_data = this.get_data( B3 );
								}
								this.remove_reagent( B3, multiplier * C.required_reagents[B3], true );
							}
							created_volume = Lang13.IntNullable( C.result_amount * multiplier );

							if ( Lang13.Bool( C.result ) ) {
								GlobalFuncs.feedback_add_details( "chemical_reaction", "" + C.result + "|" + C.result_amount * multiplier );
								multiplier = Num13.MaxInt( Convert.ToInt32( multiplier ), 1 );
								this.add_reagent( C.result, C.result_amount * multiplier );
								this.set_data( C.result, preserved_data );

								foreach (dynamic _d in Lang13.Enumerate( C.secondary_results )) {
									S = _d;
									
									this.add_reagent( S, C.result_amount * C.secondary_results[S] * multiplier );
								}
							}

							if ( this.my_atom is Obj_Item_Weapon_Grenade_ChemGrenade ) {
								this.my_atom.visible_message( new Txt( "<span class='caution'>" ).icon( this.my_atom ).str( " Something comes out of " ).the( this.my_atom ).item().str( ".</span>" ).ToString() );
							} else if ( this.my_atom is Mob_Living_Carbon_Human ) {
								this.my_atom.visible_message( "<span class='notice'>" + this.my_atom + " shudders a little.</span>", "<span class='notice'>You shudder a little.</span>" );
							} else {
								this.my_atom.visible_message( new Txt( "<span class='notice'>" ).icon( this.my_atom ).str( " The solution begins to bubble.</span>" ).ToString() );
							}

							if ( this.my_atom is Obj_Item_SlimeExtract ) {
								ME2 = this.my_atom;
								((dynamic)ME2).Uses--;

								if ( Convert.ToDouble( ((dynamic)ME2).Uses ) <= 0 ) {
									
									if ( !( ME2.loc is Obj_Item_Weapon_Grenade_ChemGrenade ) ) {
										ME2.visible_message( new Txt( "<span class='notice'>" ).icon( this.my_atom.icon_state ).str( " " ).The( this.my_atom ).item().str( "'s power is consumed in the reaction.</span>" ).ToString() );
									}
									ME2.name = "used slime extract";
									ME2.desc = "This extract has been used up.";
								}
							}
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this.my_atom ), "sound/effects/bubbles.ogg", 80, 1 );
							((ChemicalReaction)C).on_reaction( this, created_volume );
							reaction_occured = true;
							break;
						}
					}
				}
			} while ( reaction_occured );
			this.update_total();
			return false;
		}

		// Function from file: Chemistry-Holder.dm
		public void conditional_update( dynamic A = null ) {
			Reagent R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				R = _a;
				
				R.on_update( A );
			}
			this.update_total();
			return;
		}

		// Function from file: Chemistry-Holder.dm
		public void conditional_update_move( dynamic A = null, bool? Running = null ) {
			Running = Running ?? false;

			Reagent R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				R = _a;
				
				R.on_move( A );
			}
			this.update_total();
			return;
		}

		// Function from file: Chemistry-Holder.dm
		public void update_aerosol( Mob_Living M = null ) {
			dynamic A = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				A = _a;
				
				R = A;

				if ( M != null && Lang13.Bool( R ) ) {
					((Reagent)R).on_mob_life( M );
				}
			}
			this.update_total();
			return;
		}

		// Function from file: Chemistry-Holder.dm
		public void metabolize( Mob_Living_Carbon M = null, int? alien = null ) {
			dynamic A = null;
			dynamic R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list )) {
				A = _a;
				
				R = A;

				if ( M != null && Lang13.Bool( R ) ) {
					((Reagent)R).on_mob_life( M, alien );
				}
			}
			this.update_total();
			return;
		}

		// Function from file: Chemistry-Holder.dm
		public dynamic trans_id_to( dynamic target = null, dynamic reagent = null, dynamic amount = null, bool? preserve_data = null ) {
			amount = amount ?? 1;
			preserve_data = preserve_data ?? true;

			Reagents R = null;
			dynamic trans_data = null;
			Reagent current_reagent = null;

			
			if ( !Lang13.Bool( target ) ) {
				return null;
			}

			if ( !Lang13.Bool( target.reagents ) || this.is_empty() || !this.get_reagent_amount( reagent ) ) {
				return null;
			}
			R = target.reagents;

			if ( ( this.get_reagent_amount( reagent ) ?1:0) < Convert.ToDouble( amount ) ) {
				amount = this.get_reagent_amount( reagent );
			}
			amount = Num13.MinInt( Convert.ToInt32( amount ), Convert.ToInt32( R.maximum_volume - R.total_volume ) );
			trans_data = null;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				current_reagent = _a;
				

				if ( current_reagent.id == reagent ) {
					
					if ( preserve_data == true ) {
						trans_data = current_reagent.data;
					}
					R.add_reagent( current_reagent.id, amount, trans_data );
					this.remove_reagent( current_reagent.id, amount, true );
					break;
				}
			}
			R.handle_reactions();
			return amount;
		}

		// Function from file: Chemistry-Holder.dm
		public double? copy_to( Obj_Effect_Effect_Smoke_Chem target = null, double? amount = null, bool? multiplier = null, bool? preserve_data = null ) {
			amount = amount ?? 1;
			multiplier = multiplier ?? true;
			preserve_data = preserve_data ?? true;

			dynamic R = null;
			double part = 0;
			dynamic trans_data = null;
			Reagent current_reagent = null;
			double current_reagent_transfer = 0;

			
			if ( !( target != null ) ) {
				return null;
			}

			if ( !Lang13.Bool( target.reagents ) || this.is_empty() ) {
				return null;
			}
			R = target.reagents;
			amount = Num13.MinInt( Num13.MinInt( ((int)( amount ??0 )), ((int)( this.total_volume ??0 )) ), Convert.ToInt32( R.maximum_volume - R.total_volume ) );
			part = ( amount ??0) / ( this.total_volume ??0);
			trans_data = null;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				current_reagent = _a;
				
				current_reagent_transfer = ( current_reagent.volume ??0) * part;

				if ( preserve_data == true ) {
					trans_data = current_reagent.data;
				}
				((Reagents)R).add_reagent( current_reagent.id, current_reagent_transfer * ( multiplier == true ?1:0), trans_data );
			}
			((Reagents)R).handle_reactions();
			this.handle_reactions();
			return amount;
		}

		// Function from file: Chemistry-Holder.dm
		public int? trans_to_holder( Reagents target = null, int? amount = null, bool? multiplier = null, bool? preserve_data = null ) {
			amount = amount ?? 1;
			multiplier = multiplier ?? true;
			preserve_data = preserve_data ?? true;

			Reagents R = null;
			double part = 0;
			dynamic trans_data = null;
			Reagent current_reagent = null;
			double current_reagent_transfer = 0;

			
			if ( !( target != null ) || this.is_empty() ) {
				return null;
			}
			R = target;
			amount = Num13.MinInt( Num13.MinInt( amount ??0, ((int)( this.total_volume ??0 )) ), Convert.ToInt32( R.maximum_volume - R.total_volume ) );
			part = ( amount ??0) / ( this.total_volume ??0);
			trans_data = null;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				current_reagent = _a;
				

				if ( !( current_reagent != null ) ) {
					continue;
				}
				current_reagent_transfer = ( current_reagent.volume ??0) * part;

				if ( preserve_data == true ) {
					trans_data = current_reagent.data;
				}
				R.add_reagent( current_reagent.id, current_reagent_transfer * ( multiplier == true ?1:0), trans_data );
				this.remove_reagent( current_reagent.id, current_reagent_transfer );
			}
			R.handle_reactions();
			this.handle_reactions();
			return amount;
		}

		// Function from file: Chemistry-Holder.dm
		public dynamic trans_to( dynamic target = null, dynamic amount = null, double? multiplier = null, bool? preserve_data = null ) {
			amount = amount ?? 1;
			multiplier = multiplier ?? 1;
			preserve_data = preserve_data ?? true;

			dynamic R = null;
			dynamic AM = null;
			dynamic part = null;
			dynamic trans_data = null;
			Reagent current_reagent = null;
			dynamic C = null;
			double current_reagent_transfer = 0;

			
			if ( !Lang13.Bool( target ) ) {
				return null;
			}

			if ( target is Reagents ) {
				R = target;
			} else {
				AM = target;

				if ( !Lang13.Bool( AM.reagents ) || this.is_empty() ) {
					return null;
				} else {
					R = AM.reagents;
				}
			}
			amount = Num13.MinInt( Num13.MinInt( Convert.ToInt32( amount ), ((int)( this.total_volume ??0 )) ), Convert.ToInt32( R.maximum_volume - R.total_volume ) );
			part = amount / this.total_volume;
			trans_data = null;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				current_reagent = _a;
				

				if ( !( current_reagent != null ) ) {
					continue;
				}

				if ( current_reagent.id == "blood" && target is Mob_Living_Carbon ) {
					C = target;
					((Mob_Living_Carbon)C).inject_blood( this.my_atom, amount );
					continue;
				}
				current_reagent_transfer = ( current_reagent.volume ??0) * Convert.ToDouble( part );

				if ( preserve_data == true ) {
					trans_data = current_reagent.data;
				}
				((Reagents)R).add_reagent( current_reagent.id, current_reagent_transfer * ( multiplier ??0), trans_data );
				this.remove_reagent( current_reagent.id, current_reagent_transfer );
			}
			((Reagents)R).handle_reactions();
			this.handle_reactions();
			return amount;
		}

		// Function from file: Chemistry-Holder.dm
		public string get_master_reagent_id(  ) {
			string the_id = null;
			double? the_volume = null;
			Reagent A = null;

			the_id = null;
			the_volume = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				A = _a;
				

				if ( ( A.volume ??0) > ( the_volume ??0) ) {
					the_volume = A.volume;
					the_id = A.id;
				}
			}
			return the_id;
		}

		// Function from file: Chemistry-Holder.dm
		public string get_master_reagent_name(  ) {
			string the_name = null;
			double? the_volume = null;
			Reagent A = null;

			the_name = null;
			the_volume = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.reagent_list, typeof(Reagent) )) {
				A = _a;
				

				if ( ( A.volume ??0) > ( the_volume ??0) ) {
					the_volume = A.volume;
					the_name = A.name;
				}
			}
			return the_name;
		}

		// Function from file: Chemistry-Holder.dm
		public int? remove_any( dynamic amount = null ) {
			amount = amount ?? 1;

			int? total_transfered = null;
			int current_list_element = 0;
			dynamic current_reagent = null;

			total_transfered = 0;
			current_list_element = 1;
			current_list_element = Rand13.Int( 1, this.reagent_list.len );

			while (total_transfered != amount) {
				
				if ( ( total_transfered ??0) >= Convert.ToDouble( amount ) ) {
					break;
				}

				if ( this.is_empty() || !( this.reagent_list.len != 0 ) ) {
					break;
				}

				if ( current_list_element > this.reagent_list.len ) {
					current_list_element = 1;
				}
				current_reagent = this.reagent_list[current_list_element];
				this.remove_reagent( current_reagent.id, 1 );
				current_list_element++;
				total_transfered++;
			}
			this.handle_reactions();
			return total_transfered;
		}

	}

}