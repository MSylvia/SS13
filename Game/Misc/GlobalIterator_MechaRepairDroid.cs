// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GlobalIterator_MechaRepairDroid : GlobalIterator {

		public GlobalIterator_MechaRepairDroid ( ByTable arguments = null, bool? autostart = null ) : base( arguments, autostart ) {
			
		}

		// Function from file: tools.dm
		public override bool process( Obj port = null, dynamic mecha = null ) {
			int health_boost = 0;
			bool repaired = false;
			dynamic int_dam_flag = null;

			
			if ( !Lang13.Bool( ((dynamic)port).chassis ) ) {
				this.stop();
				((dynamic)port).set_ready_state( 1 );
				return false;
			}
			health_boost = Convert.ToInt32( ((dynamic)port).health_boost );
			repaired = false;

			if ( ((Obj_Mecha)((dynamic)port).chassis).hasInternalDamage( 4 ) != 0 ) {
				health_boost *= -2;
			} else if ( ((Obj_Mecha)((dynamic)port).chassis).hasInternalDamage() != 0 && Rand13.PercentChance( 15 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)port).repairable_damage )) {
					int_dam_flag = _a;
					

					if ( ((Obj_Mecha)((dynamic)port).chassis).hasInternalDamage( int_dam_flag ) != 0 ) {
						((Obj_Mecha)((dynamic)port).chassis).clearInternalDamage( int_dam_flag );
						repaired = true;
						break;
					}
				}
			}

			if ( health_boost < 0 || Convert.ToDouble( ((dynamic)port).chassis.health ) < Convert.ToDouble( Lang13.Initial( ((dynamic)port).chassis, "health" ) ) ) {
				((dynamic)port).chassis.health += Num13.MinInt( health_boost, Convert.ToInt32( Lang13.Initial( ((dynamic)port).chassis, "health" ) - ((dynamic)port).chassis.health ) );
				repaired = true;
			}

			if ( repaired ) {
				
				if ( Lang13.Bool( ((dynamic)port).chassis.use_power( ((dynamic)port).energy_drain ) ) ) {
					((dynamic)port).set_ready_state( 0 );
				} else {
					this.stop();
					((dynamic)port).set_ready_state( 1 );
					return false;
				}
			} else {
				((dynamic)port).set_ready_state( 1 );
			}
			return false;
		}

	}

}