// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_SetVentPumpPressure : Automation {

		public dynamic vent_pump = null;
		public double? intpressureout = 0;
		public double? intpressurein = 0;
		public double? extpressure = 0;
		public double? mode = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Vent Pump: Pressure Settings";
		}

		public Automation_SetVentPumpPressure ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			
		}

		// Function from file: vent_pump.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			ByTable injector_names = null;
			Obj_Machinery_Atmospherics_Binary_DpVentPump I = null;
			Obj_Machinery_Atmospherics_Unary_VentPump I2 = null;
			dynamic response = null;
			dynamic response2 = null;
			dynamic response3 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["set_vent_pump"] ) ) {
				injector_names = new ByTable();

				if ( Lang13.Bool( this.mode ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Binary_DpVentPump) )) {
						I = _a;
						

						if ( !( I.id_tag == null ) && I.frequency == this.parent.frequency ) {
							injector_names.Or( I.id_tag );
						}
					}
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Unary_VentPump) )) {
						I2 = _b;
						

						if ( !( I2.id_tag == null ) && I2.frequency == this.parent.frequency ) {
							injector_names.Or( I2.id_tag );
						}
					}
				}
				this.vent_pump = Interface13.Input( "Select a vent:", "Vent Pumps", this.vent_pump, null, injector_names, InputType.Null | InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_intpressure_out"] ) ) {
				response = Interface13.Input( "Set new pressure, in kPa. [0-" + 5066.25 + "]", null, null, null, null, InputType.Num );
				this.intpressureout = String13.ParseNumber( response );
				this.intpressureout = ( ( this.intpressureout ??0) <= 0 ? 0 : ( ( this.intpressureout ??0) >= 5066.25 ? 5066.25 : this.intpressureout ) );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_intpressure_in"] ) ) {
				response2 = Interface13.Input( "Set new pressure, in kPa. [0-" + 5066.25 + "]", null, null, null, null, InputType.Num );
				this.intpressurein = String13.ParseNumber( response2 );
				this.intpressurein = ( ( this.intpressurein ??0) <= 0 ? 0 : ( ( this.intpressurein ??0) >= 5066.25 ? 5066.25 : this.intpressurein ) );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_external"] ) ) {
				response3 = Interface13.Input( Task13.User, "Set new pressure, in kPa. [0-" + 5066.25 + "]", null, null, null, InputType.Num );
				this.extpressure = String13.ParseNumber( response3 );
				this.extpressure = ( ( this.extpressure ??0) <= 0 ? 0 : ( ( this.extpressure ??0) >= 5066.25 ? 5066.25 : this.extpressure ) );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["swap_modes"] ) ) {
				this.mode = !Lang13.Bool( this.mode ) ?1:0;
				this.vent_pump = null;
				this.parent.updateUsrDialog();
				return 1;
			}
			return null;
		}

		// Function from file: vent_pump.dm
		public override string GetText(  ) {
			
			if ( Lang13.Bool( this.mode ) ) {
				return new Txt( "Set <a href=\"?src=" ).Ref( this ).str( ";swap_modes=1\">dual-port</a> vent pump <a href=\"?src=" ).Ref( this ).str( ";set_vent_pump=1\">" ).item( this.fmtString( this.vent_pump ) ).str( "</a>\n			pressure bounds: internal outwards: <a href=\"?src=" ).Ref( this ).str( ";set_intpressure_out=1\">" ).item( this.fmtString( this.intpressureout ) ).str( "</a>\n			internal inwards: <a href=\"?src=" ).Ref( this ).str( ";set_intpressure_in=1\">" ).item( this.fmtString( this.intpressurein ) ).str( "</a>\n			external: <a href=\"?src=" ).Ref( this ).str( ";set_external=1\">" ).item( this.fmtString( this.extpressure ) ).str( "</a>\n		" ).ToString();
			} else {
				return new Txt( "Set <a href=\"?src=" ).Ref( this ).str( ";swap_modes=1\">unary</a> vent pump <a href=\"?src=" ).Ref( this ).str( ";set_vent_pump=1\">" ).item( this.fmtString( this.vent_pump ) ).str( "</a>\n			pressure bounds: internal: <a href=\"?src=" ).Ref( this ).str( ";set_intpressure_out=1\">" ).item( this.fmtString( this.intpressureout ) ).str( "</a>\n			external: <a href=\"?src=" ).Ref( this ).str( ";set_external=1\">" ).item( this.fmtString( this.extpressure ) ).str( "</a>\n		" ).ToString();
			}
		}

		// Function from file: vent_pump.dm
		public override bool process(  ) {
			ByTable data = null;
			string filter = null;

			
			if ( Lang13.Bool( this.vent_pump ) ) {
				data = new ByTable().Set( "tag", this.vent_pump );
				filter = GlobalVars.RADIO_ATMOSIA;

				if ( Lang13.Bool( this.mode ) ) {
					
					if ( Lang13.Bool( this.intpressurein ) ) {
						data.Add( new ByTable().Set( "set_input_pressure", this.intpressurein ) );
					}

					if ( Lang13.Bool( this.intpressureout ) ) {
						data.Add( new ByTable().Set( "set_output_pressure", this.intpressureout ) );
					}

					if ( Lang13.Bool( this.extpressure ) ) {
						data.Add( new ByTable().Set( "set_external_pressure", this.extpressure ) );
					}
				} else {
					
					if ( Lang13.Bool( this.intpressureout ) ) {
						data.Add( new ByTable().Set( "set_internal_pressure", this.intpressureout ) );
					}

					if ( Lang13.Bool( this.extpressure ) ) {
						data.Add( new ByTable().Set( "set_external_pressure", this.extpressure ) );
					}
					filter = GlobalVars.RADIO_FROM_AIRALARM;
				}
				this.parent.send_signal( data, filter );
			}
			return false;
		}

		// Function from file: vent_pump.dm
		public override void Import( ByTable json = null ) {
			base.Import( json );
			this.vent_pump = json["vent_pump"];
			this.intpressureout = String13.ParseNumber( json["intpressureout"] );
			this.intpressurein = String13.ParseNumber( json["intpressurein"] );
			this.extpressure = String13.ParseNumber( json["extpressure"] );
			this.mode = String13.ParseNumber( json["mode"] );
			return;
		}

		// Function from file: vent_pump.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["vent_pump"] = this.vent_pump;
			json["intpressureout"] = this.intpressureout;
			json["intpressurein"] = this.intpressurein;
			json["extpressure"] = this.extpressure;
			json["mode"] = this.mode;
			return json;
		}

	}

}