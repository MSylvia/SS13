// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Organ_External_Head : Organ_External {

		public bool disfigured = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "head";
			this.icon_name = "head";
			this.display_name = "head";
			this.max_damage = 130;
			this.min_broken_damage = 40;
			this.body_part = 1;
			this.vital = true;
			this.encased = "skull";
			this.slots_to_drop = new ByTable(new object [] { 9, 2, 11, 8 });
		}

		public Organ_External_Head ( dynamic P = null ) : base( (object)(P) ) {
			
		}

		// Function from file: organ_external.dm
		public void disfigure( string type = null ) {
			type = type ?? "brute";

			
			if ( this.disfigured ) {
				return;
			}

			if ( type == "brute" ) {
				this.owner.visible_message( new Txt( "<span class='warning'>You hear a sickening cracking sound coming from " ).the( this.owner ).item().str( "'s face.</span>" ).ToString(), "<span class='danger'>Your face becomes an unrecognizable, mangled mess!</span>", "<span class='warning'>You hear a sickening crack.</span>" );
			} else if ( type == "burn" ) {
				this.owner.visible_message( "<span class='warning'>" + this.owner + "'s face melts away, turning into a mangled mess!</span>", "<span class='danger'>Your face melts away into an unrecognizable, mangled mess!</span>", "<span class='warning'>You hear a sickening sizzle.</span>" );
			} else if ( type == "frostbite" ) {
				this.owner.visible_message( "<span class='warning'>" + this.owner + "'s frozen face blisters and cracks.</span>", "<span class='danger'>Your face blisters and numbs away!</span>", "<span class='warning'>You hear a sickening crackling.</span>" );
			} else {
				this.owner.visible_message( "<span class='warning'>" + this.owner + "'s face disfigures.</span>", "<span class='danger'>Your face becomes an unrecognizable, mangled mess!</span>" );
			}
			this.disfigured = true;
			return;
		}

		// Function from file: organ_external.dm
		public override bool take_damage( double? brute = null, double? burn = null, bool? sharp = null, string edge = null, string used_weapon = null, ByTable forbidden_limbs = null ) {
			forbidden_limbs = forbidden_limbs ?? new ByTable();

			base.take_damage( brute, burn, sharp, edge, used_weapon, forbidden_limbs );

			if ( !this.disfigured ) {
				
				if ( this.brute_dam > 40 ) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.disfigure( "brute" );
					}
				}

				if ( this.burn_dam > 40 ) {
					this.disfigure( ( used_weapon != "Low Body Temperature" ? "burn" : "frostbite" ) );
				}
			}
			return false;
		}

		// Function from file: organ_external.dm
		public override Icon get_icon( string race_icon = null, bool? deform_icon = null ) {
			string g = null;
			string baseicon = null;

			
			if ( !( this.owner != null ) ) {
				return base.get_icon( race_icon, deform_icon );
			}
			g = "m";

			if ( this.owner.gender == GlobalVars.FEMALE ) {
				g = "f";
			}
			baseicon = this.owner.race_icon;

			if ( ( this.status & 2048 ) != 0 ) {
				baseicon = this.owner.deform_icon;
			}

			if ( this.is_peg() != 0 ) {
				baseicon = "icons/mob/human_races/o_peg.dmi";
			}

			if ( this.is_robotic() != 0 ) {
				baseicon = "icons/mob/human_races/o_robot.dmi";
			}
			return new Icon( baseicon, "" + this.icon_name + "_" + g );
		}

		// Function from file: organ_external.dm
		public override Obj_Item generate_dropped_organ( Obj_Item current_organ = null ) {
			Organ_Internal B = null;
			Obj_Item H = null;

			
			if ( !( current_organ != null ) ) {
				
				if ( Lang13.Bool( this.owner.species.flags & 16384 ) ) {
					current_organ = new Obj_Item_Weapon_Organ_Head_Posi( this.owner.loc, this.owner );
				} else {
					current_organ = new Obj_Item_Weapon_Organ_Head( this.owner.loc, this.owner );
				}
			}
			B = this.owner.internal_organs_by_name["brain"];
			H = current_organ;

			if ( B != null ) {
				((dynamic)H).organ_data = B;
				B.organ_holder = current_organ;
				B.owner_dna = ((dynamic)H).owner_dna;
			}
			this.owner.internal_organs_by_name["brain"] = null;
			this.owner.internal_organs_by_name.Remove( "brain" );
			this.owner.internal_organs.Remove( B );
			this.internal_organs -= B;
			return current_organ;
		}

	}

}