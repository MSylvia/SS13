// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_Compare : Automation {

		public dynamic comparator = "Greater Than";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "comparison";
			this.returntype = true;
			this.valid_child_returntypes = new ByTable(new object [] { 1 });
		}

		// Function from file: statements.dm
		public Automation_Compare ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.children = new ByTable(new object [] { null, null });
			return;
		}

		// Function from file: statements.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			double? idx = null;
			bool new_child = false;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["set_comparator"] ) ) {
				this.comparator = Interface13.Input( "Select a comparison operator:", "Compare", "Greater Than", null, new ByTable(new object [] { "Greater Than", "Greater Than or Equal to", "Less Than", "Less Than or Equal to", "Equal to", "NOT Equal To" }), InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_field"] ) ) {
				idx = String13.ParseNumber( href_list["set_field"] );
				new_child = this.selectValidChildFor( Task13.User );

				if ( !new_child ) {
					return 1;
				}
				this.children[idx] = new_child;
				this.parent.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: statements.dm
		public override string GetText(  ) {
			string _default = null;

			Automation left = null;
			Automation right = null;

			left = this.children[1];
			right = this.children[2];
			_default = new Txt( "<a href=\"?src=" ).Ref( this ).str( ";set_field=1\">(Set Left)</a> (" ).ToString();

			if ( left == null ) {
				_default += "-----";
			} else {
				_default += left.GetText();
			}
			_default += new Txt( ")  is <a href=\"?src=" ).Ref( this ).str( ";set_comparator=left\">" ).item( this.comparator ).str( "</a>: <a href=\"?src=" ).Ref( this ).str( ";set_field=2\">(Set Right)</a> (" ).ToString();

			if ( right == null ) {
				_default += "-----";
			} else {
				_default += right.GetText();
			}
			_default += ")";
			return _default;
		}

		// Function from file: statements.dm
		public override dynamic Evaluate(  ) {
			dynamic d_left = null;
			dynamic d_right = null;
			dynamic left = null;
			dynamic right = null;

			
			if ( this.children.len < 2 ) {
				return 0;
			}
			d_left = this.children[1];
			d_right = this.children[2];

			if ( !Lang13.Bool( d_left ) || !Lang13.Bool( d_right ) ) {
				return 0;
			}
			left = d_left.Evaluate();
			right = d_right.Evaluate();

			dynamic _a = this.comparator; // Was a switch-case, sorry for the mess.
			if ( _a=="Greater Than" ) {
				return Convert.ToDouble( left ) > Convert.ToDouble( right );
			} else if ( _a=="Greater Than or Equal to" ) {
				return Convert.ToDouble( left ) >= Convert.ToDouble( right );
			} else if ( _a=="Less Than" ) {
				return Convert.ToDouble( left ) < Convert.ToDouble( right );
			} else if ( _a=="Less Than or Equal to" ) {
				return Convert.ToDouble( left ) <= Convert.ToDouble( right );
			} else if ( _a=="Equal to" ) {
				return left == right;
			} else if ( _a=="NOT Equal To" ) {
				return left != right;
			} else {
				return 0;
			}
			return null;
		}

		// Function from file: statements.dm
		public override void Import( ByTable json = null ) {
			base.Import( json );
			this.comparator = json["cmp"];
			return;
		}

		// Function from file: statements.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["cmp"] = this.comparator;
			return json;
		}

	}

}