// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class WritingStyle : SpeechFilter {

		public string style = "font-family:Verdana, sans;";
		public string style_sign = "font-family:'Times New Roman', monospace;text-style:italic;";

		// Function from file: pen.dm
		public WritingStyle (  ) {
			Console.WriteLine(",,");
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.addReplacement( GlobalFuncs.REG_BBTAG( "center" ), "<center>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "/center" ), "</center>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "br" ), "<BR>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "b" ), "<B>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "/b" ), "</B>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "i" ), "<I>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "/i" ), "</I>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "u" ), "<U>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "/u" ), "</U>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "large" ), "<span style=\"font-size:25px\">" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "/large" ), "</span>" );
			this.addReplacement( GlobalFuncs.REG_BBTAG( "[^\\]]" ), "" );
			return;
		}

		// Function from file: pen.dm
		public string Format( dynamic t = null, dynamic P = null, dynamic user = null, dynamic paper = null ) {
			int count = 0;
			dynamic key = null;
			dynamic SFA = null;

			
			if ( GlobalVars.paperwork ) {
				t = this.parse_markdown( t );
			} else {
				count = 0;

				if ( this.expressions.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.expressions )) {
						key = _a;
						

						if ( count >= 500 ) {
							break;
						}
						count++;
						SFA = this.expressions[key];

						if ( Lang13.Bool( SFA ) && !Lang13.Bool( SFA.broken ) ) {
							t = SFA.Run( t, user, paper );
						}

						if ( count % 100 == 0 ) {
							Task13.Sleep( 1 );
						}
					}
				}
				t = GlobalFuncs.replacetext( t, "[sign]", "<font face=\"Times New Roman\"><i>" + user.real_name + "</i></font>" );
				t = GlobalFuncs.replacetext( t, "[field]", "<span class=\"paper_field\"></span>" );
			}
			return "<span style=\"" + this.style + ";color:" + P.color + "\">" + t + "</span>";
		}

		// Function from file: pen.dm
		public dynamic parse_markdown( dynamic command_args = null ) {
			return Lang13.Call( Lang13.BindFunc( GlobalVars.paperwork_library, "render_html" ), command_args );
		}

	}

}