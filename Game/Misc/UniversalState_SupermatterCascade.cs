// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class UniversalState_SupermatterCascade : UniversalState {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Supermatter Cascade";
			this.desc = "Unknown harmonance affecting universal substructure, converting nearby matter to supermatter.";
			this.decay_rate = 5;
		}

		// Function from file: universe.dm
		public override void OverlayAndAmbientSet(  ) {
			int count = 0;
			dynamic T = null;
			Dynamic_LightingOverlay L = null;

			count = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.turfs )) {
				T = _a;
				
				count++;

				if ( !( count % 50000 != 0 ) ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}

				if ( T is Tile_Space ) {
					T.overlays += "end01";
				} else if ( Convert.ToInt32( T.z ) != GlobalVars.map.zCentcomm ) {
					T.underlays += "end01";
				}

				if ( Game13.cpu > 80 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.all_lighting_overlays, typeof(Dynamic_LightingOverlay) )) {
				L = _b;
				
				count++;

				if ( !( count % 50000 != 0 ) ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}

				if ( L.z != GlobalVars.map.zCentcomm ) {
					L.update_lumcount( 0.15, 0.5, 0 );
				}

				if ( Game13.cpu > 80 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
			}
			return;
		}

		// Function from file: universe.dm
		public void PlayerSet(  ) {
			Mind M = null;
			bool failed_objectives = false;
			Objective O = null;
			Objective_Survive live = null;
			Obj_Effect_Rune R = null;
			dynamic cult = null;
			dynamic A = null;
			dynamic A2 = null;

			
			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.player_list, typeof(Mind) )) {
				M = _c;
				

				if ( !( M.current is Mob_Living ) ) {
					continue;
				}

				if ( Convert.ToInt32( M.current.stat ) != 2 ) {
					((Mob)M.current).Weaken( 10 );
					Icon13.Flick( "e_flash", M.current.flash );
				}

				if ( Game13.cpu > 80 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
				failed_objectives = false;

				foreach (dynamic _a in Lang13.Enumerate( M.objectives, typeof(Objective) )) {
					O = _a;
					
					O.blocked = O.type != typeof(Objective_Survive);

					if ( O.blocked ) {
						failed_objectives = true;
					}

					if ( Game13.cpu > 80 ) {
						Task13.Sleep( ((int)( Game13.tick_lag )) );
					}
				}

				if ( !Lang13.Bool( Lang13.FindIn( typeof(Objective_Survive), M.objectives ) ) ) {
					live = new Objective_Survive( "Escape collapsing universe through the rift on the research output." );
					live.owner = M;
					M.objectives.Add( live );
				}

				if ( failed_objectives ) {
					GlobalFuncs.to_chat( M, "<span class='danger'><font size=3>You have permitted the universe to collapse and have therefore failed your objectives.</font></span>" );
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.rune_list, typeof(Obj_Effect_Rune) )) {
					R = _b;
					

					if ( R != null ) {
						GlobalFuncs.qdel( R );
					}
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.revolutionaries.Remove( M );
					GlobalFuncs.to_chat( M, "<span class='danger'><FONT size = 3>The massive pulse of energy clears your mind.  You are no longer a revolutionary.</FONT></span>" );
					((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( M );
					M.special_role = null;
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.head_revolutionaries.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.head_revolutionaries.Remove( M );
					GlobalFuncs.to_chat( M.current, "<span class='danger'><FONT size = 3>The massive pulse of energy clears your mind.  You are no longer a head revolutionary.</FONT></span>" );
					((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( M );
					M.special_role = null;
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.cult -= M;
					((GameMode)GlobalVars.ticker.mode).update_cult_icons_removed( M );
					M.special_role = null;
					cult = GlobalVars.ticker.mode;

					if ( cult is GameMode_Cult ) {
						((GameMode_Cult)cult).memoize_cult_objectives( M );
					}
					GlobalFuncs.to_chat( M.current, "<span class='danger'><FONT size = 3>Nar-Sie loses interest in this plane. You are no longer a cultist.</FONT></span>" );
					GlobalFuncs.to_chat( M.current, "<span class='danger'>You find yourself unable to mouth the words of the forgotten...</span>" );
					((Mob)M.current).remove_language( "Cult" );
					M.memory = "";
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.wizards.Remove( M );
					M.special_role = null;
					((Mob)M.current).spellremove( M.current );
					GlobalFuncs.to_chat( M.current, "<span class='danger'><FONT size = 3>Your powers ebb and you feel weak. You are no longer a wizard.</FONT></span>" );
					((GameMode)GlobalVars.ticker.mode).update_wizard_icons_removed( M );
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.changelings.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.changelings.Remove( M );
					M.special_role = null;
					((Mob)M.current).remove_changeling_powers();
					M.current.verbs -= typeof(Changeling).GetMethod( "EvolutionMenu" );

					if ( M.changeling != null ) {
						GlobalFuncs.qdel( M.changeling );
						M.changeling = null;
					}
					GlobalFuncs.to_chat( M.current, "<span class='danger'><FONT size = 3>You grow weak and lose your powers. You are no longer a changeling and are stuck in your current form.</FONT></span>" );
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.vampires.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.vampires.Remove( M );
					M.special_role = null;
					((Mob)M.current).remove_vampire_powers();

					if ( M.vampire != null ) {
						GlobalFuncs.qdel( M.vampire );
						M.vampire = null;
					}
					GlobalFuncs.to_chat( M.current, "<span class='danger'><FONT size = 3>You grow weak and lose your powers. You are no longer a vampire and are stuck in your current form.</FONT></span>" );
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.syndicates.Remove( M );
					((GameMode)GlobalVars.ticker.mode).update_synd_icons_removed( M );
					M.special_role = null;
					GlobalFuncs.to_chat( M.current, "<span class='danger'><FONT size = 3>Your masters are likely dead or dying. You are no longer a syndicate operative.</FONT></span>" );
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.traitors.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.traitors.Remove( M );
					M.special_role = null;
					GlobalFuncs.to_chat( M.current, "<span class='danger'><FONT size = 3>Your masters are likely dead or dying.  You are no longer a traitor.</FONT></span>" );

					if ( M.current is Mob_Living_Silicon_Ai ) {
						A = M.current;
						A.set_zeroth_law( "" );
						A.show_laws();
					}
				}
				Interface13.Stat( null, GlobalVars.ticker.mode.malf_ai.Contains( M ) );

				if ( failed_objectives ) {
					GlobalVars.ticker.mode.malf_ai.Remove( M );
					M.special_role = null;
					A2 = M.current;
					A2.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "choose_modules" ), typeof(GameMode_Malfunction).GetMethod( "takeover" ), typeof(GameMode_Malfunction).GetMethod( "ai_win" ) );
					A2.malf_picker.remove_verbs( A2 );
					A2.laws = Lang13.Call( GlobalVars.base_law_type );
					GlobalFuncs.qdel( A2.malf_picker );
					A2.malf_picker = null;
					A2.show_laws();
					A2.icon_state = "ai";
					GlobalFuncs.to_chat( A2, "<span class='danger'><FONT size = 3>The massive blast of energy has fried the systems that were malfunctioning.  You are no longer malfunctioning.</FONT></span>" );
				}

				if ( Game13.cpu > 80 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
			}
			return;
		}

		// Function from file: universe.dm
		public void APCSet(  ) {
			Obj_Machinery_Power_Apc APC = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Apc) )) {
				APC = _a;
				

				if ( !( ( APC.stat & 1 ) != 0 ) && !APC.is_critical ) {
					APC.chargemode = false;

					if ( Lang13.Bool( APC.cell ) ) {
						APC.cell.charge = 0;
					}
					APC.emagged = 1;
					APC.queue_icon_update();
				}

				if ( Game13.cpu > 80 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
			}
			return;
		}

		// Function from file: universe.dm
		public void MiscSet(  ) {
			Obj_Machinery_Firealarm alm = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Firealarm) )) {
				alm = _a;
				

				if ( !( ( alm.stat & 1 ) != 0 ) ) {
					alm.ex_act( 2 );
				}

				if ( Game13.cpu > 80 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
			}
			return;
		}

		// Function from file: universe.dm
		public void AreaSet(  ) {
			dynamic ca = null;
			dynamic A = null;

			
			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.areas )) {
				ca = _b;
				
				A = GlobalFuncs.get_area_master( ca );

				if ( !( A is Zone ) || A.type == typeof(Zone) || A is Zone_Beach ) {
					continue;
				}
				A.jammed = 2;
				A.fire = null;
				A.atmos = true;
				A.atmosalm = 0;
				A.poweralm = true;
				A.party = null;
				A.radalert = false;

				if ( Rand13.PercentChance( 25 ) ) {
					
					switch ((int)( Rand13.Int( 1, 4 ) )) {
						case 1:
							A.fire = 1;
							break;
						case 2:
							A.atmosalm = 1;
							break;
						case 3:
							A.radalert = true;
							break;
						case 4:
							A.party = true;
							break;
					}
				}
				((Zone)A).updateicon();

				if ( Game13.cpu > 80 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
			}
			return;
		}

		// Function from file: universe.dm
		public override void OnEnter(  ) {
			dynamic M = null;
			string txt = null;
			Obj_Machinery_Computer_ShuttleControl C = null;

			GlobalFuncs.to_chat( typeof(Game13), "<span class='sinister' style='font-size:22pt'>You are blinded by a brilliant flash of energy.</span>" );
			Game13.WriteMsg( new Sound( "sound/effects/cascade.ogg" ) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				
				Icon13.Flick( "e_flash", M.flash );
			}

			if ( GlobalVars.emergency_shuttle.direction == 2 ) {
				GlobalFuncs.captain_announce( "The emergency shuttle has returned due to bluespace distortion." );
			}
			GlobalVars.emergency_shuttle.force_shutdown();
			GlobalVars.suspend_alert = true;
			this.AreaSet();

			if ( Game13.cpu > 80 ) {
				Task13.Sleep( ((int)( Game13.tick_lag )) );
			}
			this.MiscSet();

			if ( Game13.cpu > 80 ) {
				Task13.Sleep( ((int)( Game13.tick_lag )) );
			}
			this.APCSet();

			if ( Game13.cpu > 80 ) {
				Task13.Sleep( ((int)( Game13.tick_lag )) );
			}
			this.OverlayAndAmbientSet();

			if ( Game13.cpu > 80 ) {
				Task13.Sleep( ((int)( Game13.tick_lag )) );
			}
			GlobalVars.ticker.mode.eldergod = false;
			GlobalVars.ticker.StartThematic( "endgame" );
			this.PlayerSet();

			if ( Game13.cpu > 80 ) {
				Task13.Sleep( ((int)( Game13.tick_lag )) );
			}

			if ( !( GlobalVars.endgame_exits.len != 0 ) ) {
				GlobalFuncs.message_admins( "<span class='warning'><font size=7>SOMEBODY DIDNT PUT ENDGAME EXITS FOR THIS FUCKING MAP: " + GlobalVars.map.nameLong + "</span></font>" );
			} else {
				new Obj_Machinery_Singularity_Narsie_Large_Exit( Rand13.PickFromTable( GlobalVars.endgame_exits ) );
			}
			Task13.Schedule( Rand13.Int( 30, 60 ) * 10, (Task13.Closure)(() => {
				txt = "\nThere's been a galaxy-wide electromagnetic pulse.  All of our systems are heavily damaged and many personnel are dead or dying. We are seeing increasing indications of the universe itself beginning to unravel.\n\n" + GlobalFuncs.station_name() + @", you are the only facility nearby a bluespace rift, which is near your research outpost.  You are hereby directed to enter the rift using all means necessary, quite possibly as the last humans alive.

You have five minutes before the universe collapses. Good l[[###!!!-

AUTOMATED ALERT: Link to " + GlobalFuncs.command_name() + " lost.\n\nThe access requirements on the Asteroid Shuttles' consoles have now been revoked.\n";
				GlobalFuncs.command_alert( txt, "SUPERMATTER CASCADE DETECTED" );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_ShuttleControl) )) {
					C = _b;
					

					if ( C.shuttle is Shuttle_Mining || C.shuttle is Shuttle_Research ) {
						C.req_access = null;
					}
				}
				Task13.Sleep( 3000 );
				GlobalVars.ticker.declare_completion();
				GlobalVars.ticker.station_explosion_cinematic( 0, null );
				GlobalFuncs.to_chat( typeof(Game13), "<B>Resetting in 30 seconds!</B>" );
				GlobalFuncs.feedback_set_details( "end_error", "Universe ended" );

				if ( GlobalVars.blackbox != null ) {
					GlobalVars.blackbox.save_all_data_to_sql();
				}

				if ( GlobalVars.watchdog.waiting ) {
					GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><B>Server will shut down for an automatic update in a few seconds.</B></span>" );
					GlobalVars.watchdog.signal_ready();
					return;
				}
				Task13.Sleep( 300 );
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "Rebooting due to universal collapse" ) );
				GlobalFuncs.CallHook( "Reboot", new ByTable() );
				Game13.Reboot();
				return;
				return;
			}));
			return;
		}

		// Function from file: universe.dm
		public override void DecayTurf( Ent_Static T = null ) {
			Ent_Static W = null;
			Ent_Static F = null;

			
			if ( T is Tile_Simulated_Wall ) {
				W = T;
				W.melt();
				return;
			}

			if ( T is Tile_Simulated_Floor ) {
				F = T;

				if ( !Lang13.Bool( ((dynamic)F).burnt ) ) {
					((Tile_Simulated_Floor)F).burn_tile();
				} else if ( !( F is Tile_Simulated_Floor_Plating ) ) {
					((Tile_Simulated_Floor)F).break_tile_to_plating();
				}
				return;
			}
			return;
		}

		// Function from file: universe.dm
		public override void OnTurfChange( dynamic NT = null ) {
			
			if ( NT.name == "space" ) {
				NT.overlays += "end01";
				NT.underlays -= "end01";
			} else {
				NT.overlays -= "end01";
			}
			return;
		}

		// Function from file: universe.dm
		public override bool OnShuttleCall( Mob user = null ) {
			dynamic msg = null;

			
			if ( user != null ) {
				
				if ( user.hallucinating() ) {
					msg = Rand13.Pick(new object [] { "your mother and father arguing", "a smooth jazz tune", "somebody speaking " + Rand13.Pick(new object [] { "french", "siik'tajr", "gibberish" }), "" + Rand13.Pick(new object [] { "somebody", "your parents", "a gorilla", "a man", "a woman" }) + " making " + Rand13.Pick(new object [] { "chicken", "cow", "train", "duck", "cat", "dog", "strange", "funny" }) + " sounds" });
					GlobalFuncs.to_chat( user, "<span class='sinister'>All you hear on the frequency is " + msg + ". There will be no shuttle call today.</span>" );
				} else {
					GlobalFuncs.to_chat( user, "<span class='sinister'>All you hear on the frequency is static and panicked screaming. There will be no shuttle call today.</span>" );
				}
			}
			return false;
		}

	}

}