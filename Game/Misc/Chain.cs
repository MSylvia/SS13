// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Chain : Game_Data {

		public ByTable links = new ByTable();
		public dynamic extremity_A = null;
		public Ent_Static extremity_B = null;
		public Obj_Item_Weapon_Gun_Hookshot hookshot = null;
		public bool undergoing_deletion = false;
		public bool snap = false;
		public bool rewinding = false;

		// Function from file: hookshot.dm
		public Chain (  ) {
			Task13.Schedule( 20, (Task13.Closure)(() => {
				this.process();
				return;
			}));
			return;
		}

		// Function from file: hookshot.dm
		public void rewind_chain(  ) {
			int? i = null;
			Ent_Dynamic C1 = null;
			Ent_Dynamic C2 = null;
			Ent_Static T = null;
			Ent_Static U = null;
			dynamic L = null;

			this.rewinding = true;

			if ( !( this.extremity_A.tether != null ) ) {
				this.Delete_Chain();
				return;
			}
			i = null;
			i = 1;

			while (( i ??0) <= this.links.len) {
				C1 = this.extremity_A.tether;

				if ( !( C1 != null ) ) {
					break;
				}
				C2 = ((dynamic)C1).extremity_B;

				if ( !( C2 != null ) ) {
					break;
				}

				if ( C2 is Obj_Effect_Overlay_Chain ) {
					T = C1.loc;
					C1.loc = this.extremity_A.loc;
					((dynamic)C2).follow( C1, T );
					((dynamic)C2).extremity_A = this.extremity_A;
					((dynamic)C2).update_overlays( C1 );
					this.extremity_A.tether = C2;
				} else if ( this.extremity_B != null ) {
					
					if ( Lang13.Bool( ((dynamic)this.extremity_B).anchored ) ) {
						((dynamic)this.extremity_B).tether = null;
						((dynamic)C1).extremity_B = null;
						this.extremity_B = null;
					} else {
						U = C1.loc;

						if ( U != null && U.Enter( C2, C2.loc ) ) {
							C2.loc = C1.loc;
						} else {
							((dynamic)this.extremity_B).tether = null;
							this.extremity_B = null;
							((dynamic)C1).extremity_B = null;
						}

						if ( this.extremity_A is Mob_Living ) {
							L = this.extremity_A;
							C2.CtrlClick( L );
						}
					}
				}
				((dynamic)C1).rewinding = 1;
				GlobalFuncs.qdel( C1 );
				Task13.Sleep( 1 );
				i++;
			}
			this.Delete_Chain();
			return;
		}

		// Function from file: hookshot.dm
		public void Delete_Chain(  ) {
			int? i = null;
			dynamic C = null;

			
			if ( this.undergoing_deletion ) {
				return;
			}
			this.undergoing_deletion = true;

			if ( Lang13.Bool( this.extremity_A ) ) {
				
				if ( this.snap ) {
					((Ent_Static)this.extremity_A).visible_message( new Txt( "The chain snaps and let go of " ).the( this.extremity_A ).item().ToString() );
				}
				this.extremity_A.tether = null;
			}

			if ( this.extremity_B != null ) {
				
				if ( this.snap ) {
					this.extremity_B.visible_message( new Txt( "The chain snaps and let go of " ).the( this.extremity_B ).item().ToString() );
				}
				((dynamic)this.extremity_B).tether = null;
			}
			i = null;
			i = 1;

			while (( i ??0) <= this.links.len) {
				C = this.links["" + i];
				GlobalFuncs.qdel( C );
				i++;
			}

			if ( this.hookshot != null ) {
				this.hookshot.chain_datum = null;
				this.hookshot.update_icon();
			}
			return;
		}

		// Function from file: hookshot.dm
		public bool Check_Integrity(  ) {
			int? i = null;
			dynamic C = null;

			i = null;
			i = 1;

			while (( i ??0) <= this.links.len) {
				C = this.links["" + i];

				if ( !Lang13.Bool( C.rewinding ) && ( Map13.GetDistance( C, C.extremity_A ) > 1 || Map13.GetDistance( C, C.extremity_B ) > 1 ) ) {
					return false;
				}
				i++;
			}
			return true;
		}

		// Function from file: hookshot.dm
		public void process(  ) {
			
			while (!this.undergoing_deletion) {
				
				if ( !this.Check_Integrity() ) {
					this.snap = true;
					this.Delete_Chain();
				}
				Task13.Sleep( 20 );
			}
			return;
		}

	}

}