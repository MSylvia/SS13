// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GasMixture : Game_Data {

		public dynamic oxygen = 0;
		public dynamic carbon_dioxide = 0;
		public dynamic nitrogen = 0;
		public dynamic toxins = 0;
		public dynamic total_moles = 0;
		public double? volume = 2500;
		public double? temperature = 0;
		public int group_multiplier = 1;
		public int graphics = 0;
		public dynamic pressure = 0;
		public ByTable trace_gases = new ByTable();
		public dynamic oxygen_archived = null;
		public dynamic carbon_dioxide_archived = null;
		public dynamic nitrogen_archived = null;
		public dynamic toxins_archived = null;
		public double? temperature_archived = null;
		public int graphics_archived = 0;
		public bool fuel_burnt = false;

		// Function from file: Fire.dm
		public int calculate_firelevel( dynamic T = null ) {
			dynamic fuel = null;
			double total_fuel = 0;
			bool firelevel = false;
			Ent_Static A = null;
			double total_combustables = 0;
			double dampening_multiplier = 0;
			double mix_multiplier = 0;

			fuel = Lang13.FindIn( typeof(Gas_VolatileFuel), this.trace_gases );
			total_fuel = 0;
			firelevel = false;

			if ( this.check_recombustability( T ) ) {
				total_fuel += Convert.ToDouble( this.toxins );

				if ( Lang13.Bool( T ) && T is Tile ) {
					total_fuel += ((Ent_Static)T).getFireFuel() ??0;

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
						A = _a;
						

						if ( A != null ) {
							total_fuel += A.getFireFuel() ??0;
						}
					}
				}

				if ( Lang13.Bool( fuel ) ) {
					total_fuel += fuel.moles ??0;
				}
				total_combustables = total_fuel + Convert.ToDouble( this.oxygen );

				if ( total_fuel > 0 && Convert.ToDouble( this.oxygen ) > 0 ) {
					dampening_multiplier = total_combustables / ( total_combustables + Convert.ToDouble( this.nitrogen ) + Convert.ToDouble( this.carbon_dioxide ) );
					mix_multiplier = 1 / ( Math.Pow( Convert.ToDouble( this.oxygen / total_combustables ), 2 ) * 5 + 1 );
					firelevel = Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireFirelevelMultiplier) ) * mix_multiplier * dampening_multiplier );
				}
			}
			return Num13.MaxInt( 0, firelevel ?1:0 );
		}

		// Function from file: Fire.dm
		public bool check_combustability( Tile_Simulated T = null, bool? objects = null ) {
			dynamic fuel = null;
			Ent_Static A = null;

			fuel = Lang13.FindIn( typeof(Gas_VolatileFuel), this.trace_gases );

			if ( Lang13.Bool( this.oxygen ) && ( Lang13.Bool( this.toxins ) || Lang13.Bool( fuel ) ) ) {
				
				if ( Num13.Round( Convert.ToDouble( this.toxins * GlobalVars.zas_settings.Get( typeof(ZASSetting_FireConsumptionRate) ) ), 0.0 ) >= 061 ) {
					return true;
				}

				if ( Lang13.Bool( fuel ) && Num13.Round( ( fuel.moles ??0) * Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireConsumptionRate) ) ), 0.0 ) >= 0.1 ) {
					return true;
				}
			}

			if ( objects == true && T is Tile ) {
				
				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
					A = _a;
					

					if ( !( A != null ) || !Lang13.Bool( this.oxygen ) || ( A.autoignition_temperature ??0) > ( this.temperature ??0) ) {
						continue;
					}

					if ( Num13.Round( ( A.getFireFuel() ??0) * Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireConsumptionRate) ) ), 0.0 ) >= A.volatility ) {
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: Fire.dm
		public bool check_recombustability( dynamic T = null ) {
			dynamic fuel = null;
			bool still_burning = false;
			Ent_Static A = null;

			fuel = Lang13.FindIn( typeof(Gas_VolatileFuel), this.trace_gases );

			if ( Lang13.Bool( this.oxygen ) && ( Lang13.Bool( this.toxins ) || Lang13.Bool( fuel ) ) ) {
				
				if ( Num13.Round( Convert.ToDouble( this.toxins * GlobalVars.zas_settings.Get( typeof(ZASSetting_FireConsumptionRate) ) ), 0.0 ) >= 061 ) {
					return true;
				}

				if ( Lang13.Bool( fuel ) && Num13.Round( ( fuel.moles ??0) * Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireConsumptionRate) ) ), 0.0 ) >= 0.1 ) {
					return true;
				}
			}

			if ( !Lang13.Bool( T ) ) {
				return false;
			}

			if ( !( T is Tile ) ) {
				Game13.log.WriteMsg( "## WARNING: " + ( "check_recombustability being asked to check a " + T.type + " instead of /turf." ) );
				return false;
			}
			still_burning = false;

			foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
				A = _a;
				

				if ( !( A != null ) ) {
					continue;
				}

				if ( !Lang13.Bool( this.oxygen ) ) {
					A.extinguish();
					continue;
				}

				if ( Num13.Round( ( A.getFireFuel() ??0) * Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireConsumptionRate) ) ), 0.0 ) >= A.volatility ) {
					still_burning = true;
				} else if ( A.on_fire ) {
					A.ashify();
				}
			}
			return still_burning;
		}

		// Function from file: Fire.dm
		public double zburn( dynamic T = null, bool? force_burn = null ) {
			double value = 0;
			double total_fuel = 0;
			dynamic fuel = null;
			bool can_use_turf = false;
			Ent_Static A = null;
			int firelevel = 0;
			double starting_energy = 0;
			int total_oxygen = 0;
			double used_fuel_ratio = 0;
			double total_reactants = 0;
			double used_reactants_ratio = 0;
			Ent_Static A2 = null;

			value = 0;

			if ( ( ( this.temperature ??0) > 373.41 || force_burn == true ) && this.check_recombustability( T ) ) {
				total_fuel = 0;
				fuel = Lang13.FindIn( typeof(Gas_VolatileFuel), this.trace_gases );
				total_fuel += Convert.ToDouble( this.toxins );

				if ( Lang13.Bool( fuel ) ) {
					total_fuel += fuel.moles ??0;
				}
				can_use_turf = Lang13.Bool( T ) && T is Tile;

				if ( can_use_turf ) {
					
					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
						A = _a;
						

						if ( !( A != null ) ) {
							continue;
						}
						total_fuel += A.getFireFuel() ??0;
					}
				}

				if ( 0 == total_fuel ) {
					return 0;
				}
				firelevel = this.calculate_firelevel( T );
				starting_energy = ( this.temperature ??0) * this.heat_capacity();
				total_oxygen = Num13.MinInt( Convert.ToInt32( this.oxygen ), ((int)( total_fuel * 2 )) );
				used_fuel_ratio = Num13.MinInt( Convert.ToInt32( this.oxygen / 2 ), ((int)( total_fuel )) ) / total_fuel;
				total_fuel = total_fuel * used_fuel_ratio;
				total_reactants = total_fuel + total_oxygen;
				used_reactants_ratio = ( total_reactants * firelevel / Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireFirelevelMultiplier) ) ) <= 0.2 ? 0.2 : ( total_reactants * firelevel / Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireFirelevelMultiplier) ) ) >= total_reactants ? total_reactants : total_reactants * firelevel / Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireFirelevelMultiplier) ) ) ) ) / total_reactants;
				this.oxygen -= Num13.MinInt( Convert.ToInt32( this.oxygen ), ((int)( total_oxygen * used_reactants_ratio )) );
				this.toxins -= Num13.MinInt( Convert.ToInt32( this.toxins ), Convert.ToInt32( this.toxins * used_fuel_ratio * used_reactants_ratio * 3 ) );

				if ( Convert.ToDouble( this.toxins ) < 0 ) {
					this.toxins = 0;
				}
				this.carbon_dioxide += Num13.MaxInt( ((int)( total_fuel * 2 )), 0 );

				if ( Lang13.Bool( fuel ) ) {
					fuel.moles -= ( fuel.moles ??0) * used_fuel_ratio * used_reactants_ratio * 5;

					if ( ( fuel.moles ??0) <= 0 ) {
						GlobalFuncs.qdel( fuel );
						fuel = null;
					}
				}

				if ( can_use_turf ) {
					
					if ( ( ((Ent_Static)T).getFireFuel() ??0) > 0 ) {
						((Ent_Static)T).burnFireFuel( used_fuel_ratio, used_reactants_ratio );
					}

					foreach (dynamic _b in Lang13.Enumerate( T, typeof(Ent_Static) )) {
						A2 = _b;
						

						if ( ( A2.getFireFuel() ??0) > 0 ) {
							A2.burnFireFuel( used_fuel_ratio, used_reactants_ratio );
						}
					}
				}
				this.temperature = ( starting_energy + Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireFuelEnergyRelease) ) * total_fuel ) ) / this.heat_capacity();
				this.update_values();
				value = total_reactants * used_reactants_ratio;
			}
			return value;
		}

		// Function from file: _gas_mixture.dm
		public bool divide( int factor = 0 ) {
			Gas trace_gas = null;

			this.oxygen /= factor;
			this.carbon_dioxide /= factor;
			this.nitrogen /= factor;
			this.toxins /= factor;

			if ( this.trace_gases != null && this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					trace_gas.moles /= factor;
				}
			}
			this.update_values();
			return true;
		}

		// Function from file: _gas_mixture.dm
		public bool multiply( int factor = 0 ) {
			Gas trace_gas = null;

			this.oxygen *= factor;
			this.carbon_dioxide *= factor;
			this.nitrogen *= factor;
			this.toxins *= factor;

			if ( this.trace_gases != null && this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					trace_gas.moles *= factor;
				}
			}
			this.update_values();
			return true;
		}

		// Function from file: _gas_mixture.dm
		public bool subtract( GasMixture right_side = null ) {
			Gas trace_gas = null;
			dynamic corresponding = null;

			this.oxygen = Num13.Max( this.oxygen - right_side.oxygen );
			this.carbon_dioxide = Num13.Max( this.carbon_dioxide - right_side.carbon_dioxide );
			this.nitrogen = Num13.Max( this.nitrogen - right_side.nitrogen );
			this.toxins = Num13.Max( this.toxins - right_side.toxins );

			if ( this.trace_gases.len != 0 || right_side.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( right_side.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.FindIn( trace_gas.type, this.trace_gases );

					if ( Lang13.Bool( corresponding ) ) {
						corresponding.moles = Num13.MaxInt( 0, ((int)( ( corresponding.moles ??0) - ( trace_gas.moles ??0) )) );
					}
				}
			}
			this.update_values();
			return true;
		}

		// Function from file: _gas_mixture.dm
		public bool add( GasMixture right_side = null ) {
			Gas trace_gas = null;
			dynamic corresponding = null;

			
			if ( !( right_side != null ) ) {
				return false;
			}
			this.oxygen += right_side.oxygen;
			this.carbon_dioxide += right_side.carbon_dioxide;
			this.nitrogen += right_side.nitrogen;
			this.toxins += right_side.toxins;

			if ( this.trace_gases.len != 0 || right_side.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( right_side.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.FindIn( trace_gas.type, this.trace_gases );

					if ( !Lang13.Bool( corresponding ) ) {
						corresponding = Lang13.Call( trace_gas.type );
						this.trace_gases.Add( corresponding );
					}
					corresponding.moles += trace_gas.moles ??0;
				}
			}
			this.update_values();
			return true;
		}

		// Function from file: _gas_mixture.dm
		public bool compare( GasMixture sample = null ) {
			double? check_moles = null;
			Gas trace_gas = null;
			dynamic corresponding = null;
			Gas trace_gas2 = null;
			dynamic corresponding2 = null;

			
			if ( !( sample != null ) ) {
				return false;
			}

			if ( Math.Abs( Convert.ToDouble( this.oxygen - sample.oxygen ) ) > 5.196689128875732 && ( Convert.ToDouble( this.oxygen ) < Convert.ToDouble( sample.oxygen * 0.41 ) || Convert.ToDouble( this.oxygen ) > Convert.ToDouble( sample.oxygen * 1.41 ) ) ) {
				return false;
			}

			if ( Math.Abs( Convert.ToDouble( this.nitrogen - sample.nitrogen ) ) > 5.196689128875732 && ( Convert.ToDouble( this.nitrogen ) < Convert.ToDouble( sample.nitrogen * 0.41 ) || Convert.ToDouble( this.nitrogen ) > Convert.ToDouble( sample.nitrogen * 1.41 ) ) ) {
				return false;
			}

			if ( Math.Abs( Convert.ToDouble( this.carbon_dioxide - sample.carbon_dioxide ) ) > 5.196689128875732 && ( Convert.ToDouble( this.carbon_dioxide ) < Convert.ToDouble( sample.carbon_dioxide * 0.41 ) || Convert.ToDouble( this.carbon_dioxide ) > Convert.ToDouble( sample.carbon_dioxide * 1.41 ) ) ) {
				return false;
			}

			if ( Math.Abs( Convert.ToDouble( this.toxins - sample.toxins ) ) > 5.196689128875732 && ( Convert.ToDouble( this.toxins ) < Convert.ToDouble( sample.toxins * 0.41 ) || Convert.ToDouble( this.toxins ) > Convert.ToDouble( sample.toxins * 1.41 ) ) ) {
				return false;
			}

			if ( Convert.ToDouble( this.f_total_moles() ) > 5.196689128875732 ) {
				
				if ( Math.Abs( ( this.temperature ??0) - ( sample.temperature ??0) ) > 4 && ( ( this.temperature ??0) < ( sample.temperature ??0) * 0.971 || ( this.temperature ??0) > ( sample.temperature ??0) * 1.011 ) ) {
					return false;
				}
			}

			if ( sample.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( sample.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.FindIn( trace_gas.type, this.trace_gases );

					if ( Lang13.Bool( corresponding ) ) {
						check_moles = corresponding.moles;
					} else {
						check_moles = 0;
					}

					if ( Math.Abs( ( trace_gas.moles ??0) - ( check_moles ??0) ) > 5.196689128875732 && ( ( check_moles ??0) < ( trace_gas.moles ??0) * 0.41 || ( check_moles ??0) > ( trace_gas.moles ??0) * 1.41 ) ) {
						return false;
					}
				}
			}

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas2 = _b;
					
					corresponding2 = Lang13.FindIn( trace_gas2.type, this.trace_gases );

					if ( Lang13.Bool( corresponding2 ) ) {
						check_moles = corresponding2.moles;
					} else {
						check_moles = 0;
					}

					if ( Math.Abs( ( trace_gas2.moles ??0) - ( check_moles ??0) ) > 5.196689128875732 && ( ( trace_gas2.moles ??0) < ( check_moles ??0) * 0.41 || ( trace_gas2.moles ??0) > ( check_moles ??0) * 1.41 ) ) {
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: _gas_mixture.dm
		public void temperature_turf_share( Tile sharer = null, dynamic conduction_coefficient = null ) {
			double delta_temperature = 0;
			double self_heat_capacity = 0;
			dynamic heat = null;

			delta_temperature = ( this.temperature_archived ??0) - sharer.temperature;

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity();

				if ( sharer.heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * delta_temperature * ( self_heat_capacity * sharer.heat_capacity / ( self_heat_capacity + sharer.heat_capacity ) );
					this.temperature -= Convert.ToDouble( heat / ( self_heat_capacity * this.group_multiplier ) );
					sharer.temperature += Convert.ToDouble( heat / sharer.heat_capacity );
				}
			}
			return;
		}

		// Function from file: _gas_mixture.dm
		public void temperature_mimic( Tile model = null, double conduction_coefficient = 0, dynamic border_multiplier = null ) {
			double delta_temperature = 0;
			double self_heat_capacity = 0;
			double heat = 0;

			delta_temperature = ( this.temperature ??0) - model.temperature;

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity();

				if ( !( this.group_multiplier != 0 ) ) {
					GlobalFuncs.message_admins( new Txt( "Error!  The gas mixture (ref " ).Ref( this ).str( ") has no group multiplier!" ).ToString() );
					return;
				}

				if ( model.heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * delta_temperature * ( self_heat_capacity * model.heat_capacity / ( self_heat_capacity + model.heat_capacity ) );

					if ( Lang13.Bool( border_multiplier ) ) {
						this.temperature -= heat * Convert.ToDouble( border_multiplier ) / ( self_heat_capacity * this.group_multiplier );
					} else {
						this.temperature -= heat / ( self_heat_capacity * this.group_multiplier );
					}
				}
			}
			return;
		}

		// Function from file: _gas_mixture.dm
		public void temperature_share( GasMixture sharer = null, double conduction_coefficient = 0 ) {
			double delta_temperature = 0;
			double self_heat_capacity = 0;
			double sharer_heat_capacity = 0;
			double heat = 0;

			delta_temperature = ( this.temperature_archived ??0) - ( sharer.temperature_archived ??0);

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity_archived();
				sharer_heat_capacity = sharer.heat_capacity_archived();

				if ( !( this.group_multiplier != 0 ) ) {
					GlobalFuncs.message_admins( new Txt( "Error!  The gas mixture (ref " ).Ref( this ).str( ") has no group multiplier!" ).ToString() );
					return;
				}

				if ( sharer_heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = conduction_coefficient * delta_temperature * ( self_heat_capacity * sharer_heat_capacity / ( self_heat_capacity + sharer_heat_capacity ) );
					this.temperature -= heat / ( self_heat_capacity * this.group_multiplier );
					sharer.temperature += heat / ( sharer_heat_capacity * sharer.group_multiplier );
				}
			}
			return;
		}

		// Function from file: _gas_mixture.dm
		public bool check_me_then_temperature_mimic( Tile model = null, dynamic conduction_coefficient = null ) {
			double delta_temperature = 0;
			double self_temperature_delta = 0;
			double self_heat_capacity = 0;
			int heat = 0;

			delta_temperature = ( this.temperature_archived ??0) - model.temperature;
			self_temperature_delta = 0;

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity_archived();

				if ( model.heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = Convert.ToInt32( conduction_coefficient * delta_temperature * ( self_heat_capacity * model.heat_capacity / ( self_heat_capacity + model.heat_capacity ) ) );
					self_temperature_delta = -heat / ( self_heat_capacity * this.group_multiplier );
				}
			}

			if ( Math.Abs( self_temperature_delta ) > 4 && Math.Abs( self_temperature_delta ) > ( this.temperature_archived ??0) * 0.012 ) {
				return false;
			}
			this.temperature += self_temperature_delta;
			return true;
		}

		// Function from file: _gas_mixture.dm
		public bool check_me_then_temperature_turf_share( Tile sharer = null, dynamic conduction_coefficient = null ) {
			double delta_temperature = 0;
			double self_temperature_delta = 0;
			double sharer_temperature_delta = 0;
			double self_heat_capacity = 0;
			int heat = 0;

			delta_temperature = ( this.temperature_archived ??0) - sharer.temperature;
			self_temperature_delta = 0;
			sharer_temperature_delta = 0;

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity_archived();

				if ( sharer.heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
					heat = Convert.ToInt32( conduction_coefficient * delta_temperature * ( self_heat_capacity * sharer.heat_capacity / ( self_heat_capacity + sharer.heat_capacity ) ) );
					self_temperature_delta = -heat / ( self_heat_capacity * this.group_multiplier );
					sharer_temperature_delta = heat / sharer.heat_capacity;
				}
			} else {
				return true;
			}

			if ( Math.Abs( self_temperature_delta ) > 4 && Math.Abs( self_temperature_delta ) > ( this.temperature_archived ??0) * 0.012 ) {
				return false;
			}
			this.temperature += self_temperature_delta;
			sharer.temperature += sharer_temperature_delta;
			return true;
		}

		// Function from file: _gas_mixture.dm
		public bool check_me_then_temperature_share( GasMixture sharer = null, dynamic conduction_coefficient = null ) {
			double delta_temperature = 0;
			double self_heat_capacity = 0;
			double sharer_heat_capacity = 0;
			double self_temperature_delta = 0;
			double sharer_temperature_delta = 0;
			int heat = 0;

			delta_temperature = ( this.temperature_archived ??0) - ( sharer.temperature_archived ??0);
			self_heat_capacity = this.heat_capacity_archived();
			sharer_heat_capacity = sharer.heat_capacity_archived();
			self_temperature_delta = 0;
			sharer_temperature_delta = 0;

			if ( sharer_heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
				heat = Convert.ToInt32( conduction_coefficient * delta_temperature * ( self_heat_capacity * sharer_heat_capacity / ( self_heat_capacity + sharer_heat_capacity ) ) );
				self_temperature_delta = -heat / ( self_heat_capacity * this.group_multiplier );
				sharer_temperature_delta = heat / ( sharer_heat_capacity * sharer.group_multiplier );
			} else {
				return true;
			}

			if ( Math.Abs( self_temperature_delta ) > 4 && Math.Abs( self_temperature_delta ) > ( this.temperature_archived ??0) * 0.012 ) {
				return false;
			}
			this.temperature += self_temperature_delta;
			sharer.temperature += sharer_temperature_delta;
			return true;
		}

		// Function from file: _gas_mixture.dm
		public int check_both_then_temperature_share( GasMixture sharer = null, dynamic conduction_coefficient = null ) {
			double delta_temperature = 0;
			double self_heat_capacity = 0;
			double sharer_heat_capacity = 0;
			double self_temperature_delta = 0;
			double sharer_temperature_delta = 0;
			int heat = 0;

			delta_temperature = ( this.temperature_archived ??0) - ( sharer.temperature_archived ??0);
			self_heat_capacity = this.heat_capacity_archived();
			sharer_heat_capacity = sharer.heat_capacity_archived();
			self_temperature_delta = 0;
			sharer_temperature_delta = 0;

			if ( sharer_heat_capacity > 0.0003 && self_heat_capacity > 0.0003 ) {
				heat = Convert.ToInt32( conduction_coefficient * delta_temperature * ( self_heat_capacity * sharer_heat_capacity / ( self_heat_capacity + sharer_heat_capacity ) ) );
				self_temperature_delta = -heat / ( self_heat_capacity * this.group_multiplier );
				sharer_temperature_delta = heat / ( sharer_heat_capacity * sharer.group_multiplier );
			} else {
				return 1;
			}

			if ( Math.Abs( self_temperature_delta ) > 4 && Math.Abs( self_temperature_delta ) > ( this.temperature_archived ??0) * 0.012 ) {
				return 0;
			}

			if ( Math.Abs( sharer_temperature_delta ) > 4 && Math.Abs( sharer_temperature_delta ) > ( sharer.temperature_archived ??0) * 0.012 ) {
				return -1;
			}
			this.temperature += self_temperature_delta;
			sharer.temperature += sharer_temperature_delta;
			return 1;
		}

		// Function from file: _gas_mixture.dm
		public double mimic( Tile model = null, dynamic border_multiplier = null ) {
			double delta_oxygen = 0;
			double delta_carbon_dioxide = 0;
			double delta_nitrogen = 0;
			double delta_toxins = 0;
			double delta_temperature = 0;
			double heat_transferred = 0;
			int old_self_heat_capacity = 0;
			double heat_capacity_transferred = 0;
			double delta_air = 0;
			double air_heat_capacity = 0;
			double carbon_dioxide_heat_capacity = 0;
			double toxins_heat_capacity = 0;
			double moved_moles = 0;
			Gas trace_gas = null;
			double delta = 0;
			double heat_cap_transferred = 0;
			double new_self_heat_capacity = 0;
			double delta_pressure = 0;

			delta_oxygen = Num13.Round( Convert.ToDouble( this.oxygen_archived - model.oxygen ), 0.0 ) / 5;
			delta_carbon_dioxide = Num13.Round( Convert.ToDouble( this.carbon_dioxide_archived - model.carbon_dioxide ), 0.0 ) / 5;
			delta_nitrogen = Num13.Round( Convert.ToDouble( this.nitrogen_archived - model.nitrogen ), 0.0 ) / 5;
			delta_toxins = Num13.Round( Convert.ToDouble( this.toxins_archived - model.toxins ), 0.0 ) / 5;
			delta_temperature = ( this.temperature_archived ??0) - model.temperature;
			heat_transferred = 0;
			old_self_heat_capacity = 0;
			heat_capacity_transferred = 0;

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				delta_air = delta_oxygen + delta_nitrogen;

				if ( delta_air != 0 ) {
					air_heat_capacity = delta_air * 20;
					heat_transferred -= air_heat_capacity * model.temperature;
					heat_capacity_transferred -= air_heat_capacity;
				}

				if ( delta_carbon_dioxide != 0 ) {
					carbon_dioxide_heat_capacity = delta_carbon_dioxide * 30;
					heat_transferred -= carbon_dioxide_heat_capacity * model.temperature;
					heat_capacity_transferred -= carbon_dioxide_heat_capacity;
				}

				if ( delta_toxins != 0 ) {
					toxins_heat_capacity = delta_toxins * 200;
					heat_transferred -= toxins_heat_capacity * model.temperature;
					heat_capacity_transferred -= toxins_heat_capacity;
				}
				old_self_heat_capacity = this.heat_capacity() * this.group_multiplier;
			}

			if ( Lang13.Bool( border_multiplier ) ) {
				this.oxygen -= delta_oxygen * Convert.ToDouble( border_multiplier ) / this.group_multiplier;
				this.carbon_dioxide -= delta_carbon_dioxide * Convert.ToDouble( border_multiplier ) / this.group_multiplier;
				this.nitrogen -= delta_nitrogen * Convert.ToDouble( border_multiplier ) / this.group_multiplier;
				this.toxins -= delta_toxins * Convert.ToDouble( border_multiplier ) / this.group_multiplier;
			} else {
				this.oxygen -= delta_oxygen / this.group_multiplier;
				this.carbon_dioxide -= delta_carbon_dioxide / this.group_multiplier;
				this.nitrogen -= delta_nitrogen / this.group_multiplier;
				this.toxins -= delta_toxins / this.group_multiplier;
			}
			moved_moles = delta_oxygen + delta_carbon_dioxide + delta_nitrogen + delta_toxins;

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					delta = 0;
					delta = ( trace_gas.moles_archived ??0) / 5;

					if ( Lang13.Bool( border_multiplier ) ) {
						trace_gas.moles -= delta * Convert.ToDouble( border_multiplier ) / this.group_multiplier;
					} else {
						trace_gas.moles -= delta / this.group_multiplier;
					}
					heat_cap_transferred = delta * trace_gas.specific_heat;
					heat_transferred += heat_cap_transferred * ( this.temperature_archived ??0);
					heat_capacity_transferred += heat_cap_transferred;
					moved_moles += delta;
				}
			}
			this.update_values();

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				new_self_heat_capacity = old_self_heat_capacity - heat_capacity_transferred;

				if ( new_self_heat_capacity > 0.0003 ) {
					
					if ( Lang13.Bool( border_multiplier ) ) {
						this.temperature = ( old_self_heat_capacity * ( this.temperature ??0) - heat_capacity_transferred * Convert.ToDouble( border_multiplier ) * ( this.temperature_archived ??0) ) / new_self_heat_capacity;
					} else {
						this.temperature = ( old_self_heat_capacity * ( this.temperature ??0) - heat_capacity_transferred * Convert.ToDouble( border_multiplier ) * ( this.temperature_archived ??0) ) / new_self_heat_capacity;
					}
				}
				this.temperature_mimic( model, model.thermal_conductivity, border_multiplier );
			}

			if ( delta_temperature > 393.41 || Math.Abs( moved_moles ) > 5.196689128875732 ) {
				delta_pressure = ( this.temperature_archived ??0) * Convert.ToDouble( this.f_total_moles() + moved_moles ) - model.temperature * ( ( model.oxygen ??0) + ( model.carbon_dioxide ??0) + ( model.nitrogen ??0) + ( model.toxins ??0) );
				return delta_pressure * 8.314 / ( this.volume ??0);
			} else {
				return 0;
			}
		}

		// Function from file: _gas_mixture.dm
		public double share( GasMixture sharer = null ) {
			double delta_oxygen = 0;
			double delta_carbon_dioxide = 0;
			double delta_nitrogen = 0;
			double delta_toxins = 0;
			double delta_temperature = 0;
			int old_self_heat_capacity = 0;
			double old_sharer_heat_capacity = 0;
			double heat_self_to_sharer = 0;
			double heat_capacity_self_to_sharer = 0;
			double heat_sharer_to_self = 0;
			double heat_capacity_sharer_to_self = 0;
			double delta_air = 0;
			double air_heat_capacity = 0;
			double carbon_dioxide_heat_capacity = 0;
			double toxins_heat_capacity = 0;
			double moved_moles = 0;
			ByTable trace_types_considered = null;
			Gas trace_gas = null;
			dynamic corresponding = null;
			double delta = 0;
			double individual_heat_capacity = 0;
			Gas trace_gas2 = null;
			dynamic corresponding2 = null;
			double delta2 = 0;
			double individual_heat_capacity2 = 0;
			double new_self_heat_capacity = 0;
			double new_sharer_heat_capacity = 0;
			double delta_pressure = 0;

			
			if ( !( sharer is GasMixture ) ) {
				return 0;
			}
			delta_oxygen = Num13.Round( Convert.ToDouble( this.oxygen_archived - sharer.oxygen_archived ), 0.0 ) / 5;
			delta_carbon_dioxide = Num13.Round( Convert.ToDouble( this.carbon_dioxide_archived - sharer.carbon_dioxide_archived ), 0.0 ) / 5;
			delta_nitrogen = Num13.Round( Convert.ToDouble( this.nitrogen_archived - sharer.nitrogen_archived ), 0.0 ) / 5;
			delta_toxins = Num13.Round( Convert.ToDouble( this.toxins_archived - sharer.toxins_archived ), 0.0 ) / 5;
			delta_temperature = ( this.temperature_archived ??0) - ( sharer.temperature_archived ??0);
			old_self_heat_capacity = 0;
			old_sharer_heat_capacity = 0;
			heat_self_to_sharer = 0;
			heat_capacity_self_to_sharer = 0;
			heat_sharer_to_self = 0;
			heat_capacity_sharer_to_self = 0;

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				delta_air = delta_oxygen + delta_nitrogen;

				if ( delta_air != 0 ) {
					air_heat_capacity = delta_air * 20;

					if ( delta_air > 0 ) {
						heat_self_to_sharer += air_heat_capacity * ( this.temperature_archived ??0);
						heat_capacity_self_to_sharer += air_heat_capacity;
					} else {
						heat_sharer_to_self -= air_heat_capacity * ( sharer.temperature_archived ??0);
						heat_capacity_sharer_to_self -= air_heat_capacity;
					}
				}

				if ( delta_carbon_dioxide != 0 ) {
					carbon_dioxide_heat_capacity = delta_carbon_dioxide * 30;

					if ( delta_carbon_dioxide > 0 ) {
						heat_self_to_sharer += carbon_dioxide_heat_capacity * ( this.temperature_archived ??0);
						heat_capacity_self_to_sharer += carbon_dioxide_heat_capacity;
					} else {
						heat_sharer_to_self -= carbon_dioxide_heat_capacity * ( sharer.temperature_archived ??0);
						heat_capacity_sharer_to_self -= carbon_dioxide_heat_capacity;
					}
				}

				if ( delta_toxins != 0 ) {
					toxins_heat_capacity = delta_toxins * 200;

					if ( delta_toxins > 0 ) {
						heat_self_to_sharer += toxins_heat_capacity * ( this.temperature_archived ??0);
						heat_capacity_self_to_sharer += toxins_heat_capacity;
					} else {
						heat_sharer_to_self -= toxins_heat_capacity * ( sharer.temperature_archived ??0);
						heat_capacity_sharer_to_self -= toxins_heat_capacity;
					}
				}
				old_self_heat_capacity = this.heat_capacity() * this.group_multiplier;
				old_sharer_heat_capacity = sharer.heat_capacity() * sharer.group_multiplier;
			}
			this.oxygen -= delta_oxygen / this.group_multiplier;
			sharer.oxygen += delta_oxygen / sharer.group_multiplier;
			this.carbon_dioxide -= delta_carbon_dioxide / this.group_multiplier;
			sharer.carbon_dioxide += delta_carbon_dioxide / sharer.group_multiplier;
			this.nitrogen -= delta_nitrogen / this.group_multiplier;
			sharer.nitrogen += delta_nitrogen / sharer.group_multiplier;
			this.toxins -= delta_toxins / this.group_multiplier;
			sharer.toxins += delta_toxins / sharer.group_multiplier;
			moved_moles = delta_oxygen + delta_carbon_dioxide + delta_nitrogen + delta_toxins;
			trace_types_considered = new ByTable();

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.FindIn( trace_gas.type, sharer.trace_gases );
					delta = 0;

					if ( Lang13.Bool( corresponding ) ) {
						delta = Num13.Round( ( trace_gas.moles_archived ??0) - ( corresponding.moles_archived ??0), 0.0 ) / 5;
					} else {
						corresponding = Lang13.Call( trace_gas.type );
						sharer.trace_gases.Add( corresponding );
						delta = ( trace_gas.moles_archived ??0) / 5;
					}
					trace_gas.moles -= delta / this.group_multiplier;
					corresponding.moles += delta / sharer.group_multiplier;

					if ( delta != 0 ) {
						individual_heat_capacity = trace_gas.specific_heat * delta;

						if ( delta > 0 ) {
							heat_self_to_sharer += individual_heat_capacity * ( this.temperature_archived ??0);
							heat_capacity_self_to_sharer += individual_heat_capacity;
						} else {
							heat_sharer_to_self -= individual_heat_capacity * ( sharer.temperature_archived ??0);
							heat_capacity_sharer_to_self -= individual_heat_capacity;
						}
					}
					moved_moles += delta;
					trace_types_considered.Add( trace_gas.type );
				}
			}

			if ( sharer.trace_gases.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( sharer.trace_gases, typeof(Gas) )) {
					trace_gas2 = _b;
					

					if ( trace_types_considered.Contains( trace_gas2.type ) ) {
						continue;
					} else {
						corresponding2 = null;
						delta2 = 0;
						corresponding2 = Lang13.Call( trace_gas2.type );
						this.trace_gases.Add( corresponding2 );
						delta2 = ( trace_gas2.moles_archived ??0) / 5;
						trace_gas2.moles -= delta2 / sharer.group_multiplier;
						corresponding2.moles += delta2 / this.group_multiplier;
						individual_heat_capacity2 = trace_gas2.specific_heat * delta2;
						heat_sharer_to_self += individual_heat_capacity2 * ( sharer.temperature_archived ??0);
						heat_capacity_sharer_to_self += individual_heat_capacity2;
						moved_moles += -delta2;
					}
				}
			}
			this.update_values();
			sharer.update_values();

			if ( Math.Abs( delta_temperature ) > 0.5 ) {
				new_self_heat_capacity = old_self_heat_capacity + heat_capacity_sharer_to_self - heat_capacity_self_to_sharer;
				new_sharer_heat_capacity = old_sharer_heat_capacity + heat_capacity_self_to_sharer - heat_capacity_sharer_to_self;

				if ( new_self_heat_capacity > 0.0003 ) {
					this.temperature = ( old_self_heat_capacity * ( this.temperature ??0) - heat_capacity_self_to_sharer * ( this.temperature_archived ??0) + heat_capacity_sharer_to_self * ( sharer.temperature_archived ??0) ) / new_self_heat_capacity;
				}

				if ( new_sharer_heat_capacity > 0.0003 ) {
					sharer.temperature = ( old_sharer_heat_capacity * ( sharer.temperature ??0) - heat_capacity_sharer_to_self * ( sharer.temperature_archived ??0) + heat_capacity_self_to_sharer * ( this.temperature_archived ??0) ) / new_sharer_heat_capacity;

					if ( Math.Abs( old_sharer_heat_capacity ) > 0.0003 ) {
						
						if ( Math.Abs( new_sharer_heat_capacity / old_sharer_heat_capacity - 1 ) < 0.1 ) {
							this.temperature_share( sharer, 0.4 );
						}
					}
				}
			}

			if ( delta_temperature > 393.41 || Math.Abs( moved_moles ) > 5.196689128875732 ) {
				delta_pressure = ( this.temperature_archived ??0) * Convert.ToDouble( this.f_total_moles() + moved_moles ) - ( sharer.temperature_archived ??0) * Convert.ToDouble( sharer.f_total_moles() - moved_moles );
				return delta_pressure * 8.314 / ( this.volume ??0);
			} else {
				return 0;
			}
		}

		// Function from file: _gas_mixture.dm
		public bool check_turf( dynamic model = null ) {
			dynamic delta_oxygen = null;
			dynamic delta_carbon_dioxide = null;
			dynamic delta_nitrogen = null;
			dynamic delta_toxins = null;
			double delta_temperature = 0;
			Gas trace_gas = null;

			delta_oxygen = ( this.oxygen_archived - model.oxygen ) / 5;
			delta_carbon_dioxide = ( this.carbon_dioxide_archived - model.carbon_dioxide ) / 5;
			delta_nitrogen = ( this.nitrogen_archived - model.nitrogen ) / 5;
			delta_toxins = ( this.toxins_archived - model.toxins ) / 5;
			delta_temperature = ( this.temperature_archived ??0) - Convert.ToDouble( model.temperature );

			if ( Math.Abs( Convert.ToDouble( delta_oxygen ) ) > 5.196689128875732 && Math.Abs( Convert.ToDouble( delta_oxygen ) ) >= Convert.ToDouble( this.oxygen_archived * 0.05 ) || Math.Abs( Convert.ToDouble( delta_carbon_dioxide ) ) > 5.196689128875732 && Math.Abs( Convert.ToDouble( delta_carbon_dioxide ) ) >= Convert.ToDouble( this.carbon_dioxide_archived * 0.05 ) || Math.Abs( Convert.ToDouble( delta_nitrogen ) ) > 5.196689128875732 && Math.Abs( Convert.ToDouble( delta_nitrogen ) ) >= Convert.ToDouble( this.nitrogen_archived * 0.05 ) || Math.Abs( Convert.ToDouble( delta_toxins ) ) > 5.196689128875732 && Math.Abs( Convert.ToDouble( delta_toxins ) ) >= Convert.ToDouble( this.toxins_archived * 0.05 ) ) {
				return false;
			}

			if ( Math.Abs( delta_temperature ) > 4 ) {
				return false;
			}

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					

					if ( ( trace_gas.moles_archived ??0) > 20.78675651550293 ) {
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: _gas_mixture.dm
		public int check_gas_mixture( GasMixture sharer = null ) {
			double delta_oxygen = 0;
			double delta_carbon_dioxide = 0;
			double delta_nitrogen = 0;
			double delta_toxins = 0;
			double delta_temperature = 0;
			Gas trace_gas = null;
			dynamic corresponding = null;
			Gas trace_gas2 = null;
			Gas trace_gas3 = null;
			dynamic corresponding2 = null;

			
			if ( !( sharer is GasMixture ) ) {
				return 0;
			}
			delta_oxygen = Num13.Round( Convert.ToDouble( this.oxygen_archived - sharer.oxygen_archived ), 0.0 ) / 5;
			delta_carbon_dioxide = Num13.Round( Convert.ToDouble( this.carbon_dioxide_archived - sharer.carbon_dioxide_archived ), 0.0 ) / 5;
			delta_nitrogen = Num13.Round( Convert.ToDouble( this.nitrogen_archived - sharer.nitrogen_archived ), 0.0 ) / 5;
			delta_toxins = Num13.Round( Convert.ToDouble( this.toxins_archived - sharer.toxins_archived ), 0.0 ) / 5;
			delta_temperature = ( this.temperature_archived ??0) - ( sharer.temperature_archived ??0);

			if ( Math.Abs( delta_oxygen ) > 5.196689128875732 && Math.Abs( delta_oxygen ) >= Convert.ToDouble( this.oxygen_archived * 0.05 ) || Math.Abs( delta_carbon_dioxide ) > 5.196689128875732 && Math.Abs( delta_carbon_dioxide ) >= Convert.ToDouble( this.carbon_dioxide_archived * 0.05 ) || Math.Abs( delta_nitrogen ) > 5.196689128875732 && Math.Abs( delta_nitrogen ) >= Convert.ToDouble( this.nitrogen_archived * 0.05 ) || Math.Abs( delta_toxins ) > 5.196689128875732 && Math.Abs( delta_toxins ) >= Convert.ToDouble( this.toxins_archived * 0.05 ) ) {
				return 0;
			}

			if ( Math.Abs( delta_temperature ) > 4 ) {
				return 0;
			}

			if ( sharer.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( sharer.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					

					if ( ( trace_gas.moles_archived ??0) > 20.78675651550293 ) {
						corresponding = Lang13.FindIn( trace_gas.type, this.trace_gases );

						if ( Lang13.Bool( corresponding ) ) {
							
							if ( ( trace_gas.moles_archived ??0) >= ( corresponding.moles_archived ??0) * 0.2 ) {
								return 0;
							}
						} else {
							return 0;
						}
					}
				}
			}

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas2 = _b;
					

					if ( ( trace_gas2.moles_archived ??0) > 20.78675651550293 ) {
						
						if ( !Lang13.Bool( Lang13.FindIn( trace_gas2.type, sharer.trace_gases ) ) ) {
							return 0;
						}
					}
				}
			}

			if ( Math.Abs( delta_oxygen ) > 5.196689128875732 && Math.Abs( delta_oxygen ) >= Convert.ToDouble( sharer.oxygen_archived * 0.05 ) || Math.Abs( delta_carbon_dioxide ) > 5.196689128875732 && Math.Abs( delta_carbon_dioxide ) >= Convert.ToDouble( sharer.carbon_dioxide_archived * 0.05 ) || Math.Abs( delta_nitrogen ) > 5.196689128875732 && Math.Abs( delta_nitrogen ) >= Convert.ToDouble( sharer.nitrogen_archived * 0.05 ) || Math.Abs( delta_toxins ) > 5.196689128875732 && Math.Abs( delta_toxins ) >= Convert.ToDouble( sharer.toxins_archived * 0.05 ) ) {
				return -1;
			}

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas3 = _c;
					

					if ( ( trace_gas3.moles_archived ??0) > 20.78675651550293 ) {
						corresponding2 = Lang13.FindIn( trace_gas3.type, sharer.trace_gases );

						if ( Lang13.Bool( corresponding2 ) ) {
							
							if ( ( trace_gas3.moles_archived ??0) >= ( corresponding2.moles_archived ??0) * 0.2 ) {
								return -1;
							}
						} else {
							return -1;
						}
					}
				}
			}
			return 1;
		}

		// Function from file: _gas_mixture.dm
		public bool copy_from( GasMixture sample = null ) {
			Gas trace_gas = null;
			dynamic corresponding = null;

			this.oxygen = sample.oxygen;
			this.carbon_dioxide = sample.carbon_dioxide;
			this.nitrogen = sample.nitrogen;
			this.toxins = sample.toxins;
			this.total_moles = sample.f_total_moles();
			this.trace_gases.len = 0;

			if ( sample.trace_gases.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( sample.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.Call( trace_gas.type );
					this.trace_gases.Add( corresponding );
					corresponding.moles = trace_gas.moles;
				}
			}
			this.temperature = sample.temperature;
			return true;
		}

		// Function from file: _gas_mixture.dm
		public dynamic check_then_remove( double amount = 0 ) {
			amount = Num13.MinInt( ((int)( amount )), Convert.ToInt32( this.f_total_moles() ) );

			if ( amount > 0.05 && amount > Convert.ToDouble( this.f_total_moles() * 0.05 ) ) {
				return 0;
			}
			return this.remove( amount );
		}

		// Function from file: _gas_mixture.dm
		public GasMixture remove_ratio( double ratio = 0 ) {
			GasMixture removed = null;
			Gas trace_gas = null;
			dynamic corresponding = null;

			
			if ( ratio <= 0 ) {
				return null;
			}
			ratio = Num13.MinInt( ((int)( ratio )), 1 );
			removed = new GasMixture();
			removed.oxygen = Num13.Round( Convert.ToDouble( this.oxygen * ratio ), 0.0 );
			removed.nitrogen = Num13.Round( Convert.ToDouble( this.nitrogen * ratio ), 0.0 );
			removed.carbon_dioxide = Num13.Round( Convert.ToDouble( this.carbon_dioxide * ratio ), 0.0 );
			removed.toxins = Num13.Round( Convert.ToDouble( this.toxins * ratio ), 0.0 );
			this.oxygen -= removed.oxygen / this.group_multiplier;
			this.nitrogen -= removed.nitrogen / this.group_multiplier;
			this.carbon_dioxide -= removed.carbon_dioxide / this.group_multiplier;
			this.toxins -= removed.toxins / this.group_multiplier;

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.Call( trace_gas.type );
					removed.trace_gases.Add( corresponding );
					corresponding.moles = ( trace_gas.moles ??0) * ratio;
					trace_gas.moles -= ( corresponding.moles ??0) / this.group_multiplier;
				}
			}
			removed.temperature = this.temperature;
			this.update_values();
			removed.update_values();
			return removed;
		}

		// Function from file: _gas_mixture.dm
		public GasMixture remove( dynamic amount = null ) {
			dynamic sum = null;
			GasMixture removed = null;
			Gas trace_gas = null;
			dynamic corresponding = null;

			
			if ( this.group_multiplier == 0 ) {
				return null;
			}
			sum = this.f_total_moles();
			amount = Num13.MinInt( Convert.ToInt32( amount ), Convert.ToInt32( sum ) );

			if ( Convert.ToDouble( amount ) <= 0 ) {
				return null;
			}
			removed = new GasMixture();
			removed.oxygen = Num13.Round( Convert.ToDouble( this.oxygen / sum * amount ), 0.0 );
			removed.nitrogen = Num13.Round( Convert.ToDouble( this.nitrogen / sum * amount ), 0.0 );
			removed.carbon_dioxide = Num13.Round( Convert.ToDouble( this.carbon_dioxide / sum * amount ), 0.0 );
			removed.toxins = Num13.Round( Convert.ToDouble( this.toxins / sum * amount ), 0.0 );
			this.oxygen -= removed.oxygen / this.group_multiplier;
			this.nitrogen -= removed.nitrogen / this.group_multiplier;
			this.carbon_dioxide -= removed.carbon_dioxide / this.group_multiplier;
			this.toxins -= removed.toxins / this.group_multiplier;

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.Call( trace_gas.type );
					removed.trace_gases.Add( corresponding );
					corresponding.moles = ( trace_gas.moles ??0) / Convert.ToDouble( sum ) * Convert.ToDouble( amount );
					trace_gas.moles -= ( corresponding.moles ??0) / this.group_multiplier;
				}
			}
			removed.temperature = this.temperature;
			this.update_values();
			removed.update_values();
			return removed;
		}

		// Function from file: _gas_mixture.dm
		public bool merge( dynamic giver = null ) {
			int self_heat_capacity = 0;
			int giver_heat_capacity = 0;
			int combined_heat_capacity = 0;
			Gas trace_gas = null;
			dynamic corresponding = null;

			
			if ( !Lang13.Bool( giver ) ) {
				return false;
			}

			if ( Math.Abs( ( this.temperature ??0) - Convert.ToDouble( giver.temperature ) ) > 0.5 ) {
				self_heat_capacity = this.heat_capacity() * this.group_multiplier;
				giver_heat_capacity = ((GasMixture)giver).heat_capacity() * giver.group_multiplier;
				combined_heat_capacity = giver_heat_capacity + self_heat_capacity;

				if ( combined_heat_capacity != 0 ) {
					this.temperature = Lang13.DoubleNullable( ( giver.temperature * giver_heat_capacity + ( this.temperature ??0) * self_heat_capacity ) / combined_heat_capacity );
				}
			}

			if ( this.group_multiplier > 1 || giver.group_multiplier > 1 ) {
				this.oxygen += giver.oxygen * giver.group_multiplier / this.group_multiplier;
				this.carbon_dioxide += giver.carbon_dioxide * giver.group_multiplier / this.group_multiplier;
				this.nitrogen += giver.nitrogen * giver.group_multiplier / this.group_multiplier;
				this.toxins += giver.toxins * giver.group_multiplier / this.group_multiplier;
			} else {
				this.oxygen += giver.oxygen;
				this.carbon_dioxide += giver.carbon_dioxide;
				this.nitrogen += giver.nitrogen;
				this.toxins += giver.toxins;
			}

			if ( giver.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( giver.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.FindIn( trace_gas.type, this.trace_gases );

					if ( !Lang13.Bool( corresponding ) ) {
						corresponding = Lang13.Call( trace_gas.type );
						this.trace_gases.Add( corresponding );
					}
					corresponding.moles += ( trace_gas.moles ??0) * giver.group_multiplier / this.group_multiplier;
				}
			}
			this.update_values();
			return true;
		}

		// Function from file: _gas_mixture.dm
		public bool check_then_merge( GasMixture giver = null ) {
			Gas trace_gas = null;
			dynamic corresponding = null;

			
			if ( !( giver != null ) ) {
				return false;
			}

			if ( Convert.ToDouble( giver.oxygen ) > 5.196689128875732 && Convert.ToDouble( giver.oxygen ) >= Convert.ToDouble( this.oxygen * 0.05 ) || Convert.ToDouble( giver.carbon_dioxide ) > 5.196689128875732 && Convert.ToDouble( giver.carbon_dioxide ) >= Convert.ToDouble( this.carbon_dioxide * 0.05 ) || Convert.ToDouble( giver.nitrogen ) > 5.196689128875732 && Convert.ToDouble( giver.nitrogen ) >= Convert.ToDouble( this.nitrogen * 0.05 ) || Convert.ToDouble( giver.toxins ) > 5.196689128875732 && Convert.ToDouble( giver.toxins ) >= Convert.ToDouble( this.toxins * 0.05 ) ) {
				return false;
			}

			if ( Math.Abs( ( giver.temperature ??0) - ( this.temperature ??0) ) > 4 ) {
				return false;
			}

			if ( giver.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( giver.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					corresponding = Lang13.FindIn( trace_gas.type, this.trace_gases );

					if ( ( trace_gas.moles ??0) > 5.196689128875732 && ( !Lang13.Bool( corresponding ) || ( trace_gas.moles ??0) >= ( corresponding.moles ??0) * 0.05 ) ) {
						return false;
					}
				}
			}
			return this.merge( giver );
		}

		// Function from file: _gas_mixture.dm
		public bool archive(  ) {
			Gas trace_gas = null;

			this.oxygen_archived = this.oxygen;
			this.carbon_dioxide_archived = this.carbon_dioxide;
			this.nitrogen_archived = this.nitrogen;
			this.toxins_archived = this.toxins;

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					trace_gas.moles_archived = trace_gas.moles;
				}
			}
			this.temperature_archived = this.temperature;
			this.graphics_archived = this.graphics;
			return true;
		}

		// Function from file: _gas_mixture.dm
		public double fire(  ) {
			return this.zburn( null );
		}

		// Function from file: _gas_mixture.dm
		public double react( dynamic dump_location = null ) {
			return this.zburn( null );
		}

		// Function from file: _gas_mixture.dm
		public bool check_tile_graphic(  ) {
			dynamic sleeping_agent = null;

			this.graphics = 0;

			if ( Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_IceFormation) ) ) ) {
				
				if ( ( this.temperature ??0) <= 273.41 && Convert.ToDouble( this.return_pressure() ) > 10 ) {
					this.graphics |= 8;
				}
			}

			if ( Convert.ToDouble( this.toxins ) > 061 ) {
				this.graphics |= 1;
			}

			if ( Lang13.Length( this.trace_gases ) != 0 ) {
				sleeping_agent = Lang13.FindIn( typeof(Gas_SleepingAgent), this.trace_gases );

				if ( Lang13.Bool( sleeping_agent ) && ( sleeping_agent.moles ??0) > 1 ) {
					this.graphics |= 2;
				}
			}
			return this.graphics != this.graphics_archived;
		}

		// Function from file: _gas_mixture.dm
		public void update_values(  ) {
			Gas trace_gas = null;

			this.total_moles = this.oxygen + this.carbon_dioxide + this.nitrogen + this.toxins;

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					this.total_moles += trace_gas.moles;
				}
			}

			if ( ( this.volume ??0) > 0 ) {
				this.pressure = this.f_total_moles() * this.temperature * 8.314 / this.volume;
			} else {
				this.pressure = 0;
			}
			return;
		}

		// Function from file: _gas_mixture.dm
		public dynamic return_pressure(  ) {
			return this.pressure;
		}

		// Function from file: _gas_mixture.dm
		[VerbInfo( name: "total moles" )]
		public dynamic f_total_moles(  ) {
			return this.total_moles;
		}

		// Function from file: _gas_mixture.dm
		public int heat_capacity_archived(  ) {
			double heat_capacity_archived = 0;
			Gas trace_gas = null;

			heat_capacity_archived = Num13.MaxInt( 0, Convert.ToInt32( this.carbon_dioxide_archived * 30 + ( this.oxygen_archived + this.nitrogen_archived ) * 20 + this.toxins_archived * 200 ) );

			if ( this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					heat_capacity_archived += ( trace_gas.moles_archived ??0) * trace_gas.specific_heat;
				}
			}
			return Num13.MaxInt( ((int)( 0.0003 )), ((int)( heat_capacity_archived )) );
		}

		// Function from file: _gas_mixture.dm
		public int heat_capacity(  ) {
			double heat_capacity = 0;
			Gas trace_gas = null;

			heat_capacity = Num13.MaxInt( 0, Convert.ToInt32( this.carbon_dioxide * 30 + ( this.oxygen + this.nitrogen ) * 20 + this.toxins * 200 ) );

			if ( this.trace_gases != null && this.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.trace_gases, typeof(Gas) )) {
					trace_gas = _a;
					
					heat_capacity += ( trace_gas.moles ??0) * trace_gas.specific_heat;
				}
			}
			return Num13.MaxInt( ((int)( 0.0003 )), ((int)( heat_capacity )) );
		}

		// Function from file: _gas_mixture.dm
		public double thermal_energy(  ) {
			return ( this.temperature ??0) * this.heat_capacity();
		}

		// Function from file: _gas_mixture.dm
		public int return_volume(  ) {
			return Num13.MaxInt( 0, ((int)( this.volume ??0 )) );
		}

		// Function from file: _gas_mixture.dm
		public double? return_temperature(  ) {
			return this.temperature;
		}

		// Function from file: _gas_mixture.dm
		public void adjust_gas( dynamic gasid = null, int moles = 0, bool? update = null ) {
			update = update ?? true;

			
			if ( moles == 0 ) {
				return;
			}

			dynamic _a = gasid; // Was a switch-case, sorry for the mess.
			if ( _a=="oxygen" ) {
				
				if ( this.group_multiplier != 1 ) {
					this.oxygen += moles / this.group_multiplier;
				} else {
					this.oxygen += moles;
				}
			} else if ( _a=="plasma" ) {
				
				if ( this.group_multiplier != 1 ) {
					this.toxins += moles / this.group_multiplier;
				} else {
					this.toxins += moles;
				}
			} else if ( _a=="carbon_dioxide" ) {
				
				if ( this.group_multiplier != 1 ) {
					this.carbon_dioxide += moles / this.group_multiplier;
				} else {
					this.carbon_dioxide += moles;
				}
			} else if ( _a=="nitrogen" ) {
				
				if ( this.group_multiplier != 1 ) {
					this.nitrogen += moles / this.group_multiplier;
				} else {
					this.nitrogen += moles;
				}
			}

			if ( update == true ) {
				this.update_values();
			}
			return;
		}

		// Function from file: _gas_mixture.dm
		public void adjust( double? o2 = null, double? co2 = null, double? n2 = null, double? tx = null, ByTable traces = null ) {
			o2 = o2 ?? 0;
			co2 = co2 ?? 0;
			n2 = n2 ?? 0;
			tx = tx ?? 0;
			traces = traces ?? new ByTable();

			Gas G = null;
			dynamic T = null;

			this.oxygen = Num13.MaxInt( 0, Convert.ToInt32( this.oxygen + o2 ) );
			this.carbon_dioxide = Num13.MaxInt( 0, Convert.ToInt32( this.carbon_dioxide + co2 ) );
			this.nitrogen = Num13.MaxInt( 0, Convert.ToInt32( this.nitrogen + n2 ) );
			this.toxins = Num13.MaxInt( 0, Convert.ToInt32( this.toxins + tx ) );

			foreach (dynamic _a in Lang13.Enumerate( traces, typeof(Gas) )) {
				G = _a;
				
				T = Lang13.FindIn( G.type, this.trace_gases );

				if ( Lang13.Bool( T ) ) {
					T.moles = Num13.MaxInt( ((int)( ( G.moles ??0) + ( T.moles ??0) )), 0 );
				} else if ( ( G.moles ??0) > 0 ) {
					this.trace_gases.Or( G );
				}
			}
			this.update_values();
			return;
		}

	}

}