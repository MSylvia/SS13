// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_AirSystem : Controller {

		public ByTable zones = new ByTable();
		public ByTable edges = new ByTable();
		public ByTable tiles_to_update = new ByTable();
		public ByTable zones_to_update = new ByTable();
		public ByTable active_hotspots = new ByTable();
		public int active_zones = 0;
		public int current_cycle = 0;
		public int update_delay = 5;
		public int failed_ticks = 0;
		public dynamic tick_progress = 0;
		public int next_id = 1;

		// Function from file: Controller.dm
		public void remove_edge( ConnectionEdge c = null ) {
			this.edges.Remove( c );
			return;
		}

		// Function from file: Controller.dm
		public bool has_same_air( dynamic A = null, dynamic B = null ) {
			
			if ( A.oxygen != B.oxygen ) {
				return false;
			}

			if ( A.nitrogen != B.nitrogen ) {
				return false;
			}

			if ( A.toxins != B.toxins ) {
				return false;
			}

			if ( A.carbon_dioxide != B.carbon_dioxide ) {
				return false;
			}

			if ( A.temperature != B.temperature ) {
				return false;
			}
			return true;
		}

		// Function from file: Controller.dm
		public ConnectionEdge get_edge( dynamic A = null, dynamic B = null ) {
			ConnectionEdge_Zone edge = null;
			ConnectionEdge_Zone edge2 = null;
			ConnectionEdge_Unsimulated edge3 = null;
			ConnectionEdge_Unsimulated edge4 = null;

			
			if ( B is _Zone ) {
				
				foreach (dynamic _a in Lang13.Enumerate( A.edges, typeof(ConnectionEdge_Zone) )) {
					edge = _a;
					

					if ( edge.contains_zone( B ) ) {
						return edge;
					}
				}
				edge2 = new ConnectionEdge_Zone( A, B );
				this.edges.Add( edge2 );
				return edge2;
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( A.edges, typeof(ConnectionEdge_Unsimulated) )) {
					edge3 = _b;
					

					if ( this.has_same_air( edge3.B, B ) ) {
						return edge3;
					}
				}
				edge4 = new ConnectionEdge_Unsimulated( A, B );
				this.edges.Add( edge4 );
				return edge4;
			}
		}

		// Function from file: Controller.dm
		public bool equivalent_pressure( _Zone A = null, dynamic B = null ) {
			return A.air.compare( B.air );
		}

		// Function from file: Controller.dm
		public void mark_zone_update( dynamic Z = null ) {
			
			if ( Lang13.Bool( Z.needs_update ) ) {
				return;
			}
			this.zones_to_update.Add( Z );
			Z.needs_update = 1;
			return;
		}

		// Function from file: Controller.dm
		public void mark_for_update( dynamic T = null ) {
			
			if ( T.needs_air_update ) {
				return;
			}
			this.tiles_to_update.Or( T );
			T.needs_air_update = true;
			return;
		}

		// Function from file: Controller.dm
		public void connect( Tile A = null, dynamic B = null ) {
			int block = 0;
			bool direct = false;
			bool space = false;
			int a_to_b = 0;
			int b_to_a = 0;
			Connection c = null;

			block = GlobalVars.air_master.air_blocked( A, B );

			if ( ( block & 1 ) != 0 ) {
				return;
			}
			direct = !( ( block & 2 ) != 0 );
			space = !( B is Tile_Simulated );

			if ( direct && !space ) {
				
				if ( this.equivalent_pressure( ((dynamic)A).zone, B.zone ) || this.current_cycle == 0 ) {
					this.merge( ((dynamic)A).zone, B.zone );
					return;
				}
			}
			a_to_b = Map13.GetDistance( A, B );
			b_to_a = Map13.GetDistance( B, A );

			if ( !( A.connections != null ) ) {
				A.connections = new ConnectionManager();
			}

			if ( !Lang13.Bool( B.connections ) ) {
				B.connections = new ConnectionManager();
			}

			if ( A.connections.get( a_to_b ) != null ) {
				return;
			}

			if ( ((ConnectionManager)B.connections).get( b_to_a ) != null ) {
				return;
			}

			if ( !space ) {
				
				if ( ((dynamic)A).zone == B.zone ) {
					return;
				}
			}
			c = new Connection( A, B );
			A.connections.place( c, a_to_b );
			B.connections.place( c, b_to_a );

			if ( direct ) {
				c.mark_direct();
			}
			return;
		}

		// Function from file: Controller.dm
		public void merge( _Zone A = null, dynamic B = null ) {
			
			if ( A.contents.len < B.contents.len ) {
				A.c_merge( B );
				this.mark_zone_update( B );
			} else {
				((_Zone)B).c_merge( A );
				this.mark_zone_update( A );
			}
			return;
		}

		// Function from file: Controller.dm
		public bool has_valid_zone( Tile T = null ) {
			return T is Tile_Simulated && Lang13.Bool( ((dynamic)T).zone ) && !((dynamic)T).zone.invalid;
		}

		// Function from file: Controller.dm
		public int air_blocked( Tile A = null, dynamic B = null ) {
			int ablock = 0;

			ablock = A.c_airblock( B );

			if ( ablock == 3 ) {
				return 3;
			}
			return ablock | ((Ent_Static)B).c_airblock( A );
		}

		// Function from file: Controller.dm
		public void remove_zone( _Zone z = null ) {
			this.zones.Remove( z );
			return;
		}

		// Function from file: Controller.dm
		public void add_zone( _Zone z = null ) {
			this.zones.Add( z );
			z.name = "Zone " + this.next_id++;
			this.mark_zone_update( z );
			return;
		}

		// Function from file: Controller.dm
		public bool Tick(  ) {
			bool _default = false;

			ByTable updating = null;
			dynamic T = null;
			ConnectionEdge edge = null;
			Obj_Fire fire = null;
			_Zone zone = null;

			_default = true;
			this.current_cycle++;
			this.tick_progress = "updating turf properties";

			if ( this.tiles_to_update.len != 0 ) {
				updating = this.tiles_to_update;
				this.tiles_to_update = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( updating )) {
					T = _a;
					
					((Tile)T).update_air_properties();
					((Tile)T).post_update_air_properties();
					T.needs_air_update = false;

					if ( Game13.cpu > 85 ) {
						Task13.Sleep( ((int)( Game13.tick_lag )) );
					}
				}
			}

			if ( _default ) {
				this.tick_progress = "processing edges";
			}

			foreach (dynamic _b in Lang13.Enumerate( this.edges, typeof(ConnectionEdge) )) {
				edge = _b;
				
				edge.tick();

				if ( Game13.cpu > 85 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
			}

			if ( _default ) {
				this.tick_progress = "processing fire";
			}

			foreach (dynamic _c in Lang13.Enumerate( this.active_hotspots, typeof(Obj_Fire) )) {
				fire = _c;
				
				fire.process();

				if ( Game13.cpu > 85 ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
			}

			if ( _default ) {
				this.tick_progress = "updating zones";
			}
			this.active_zones = this.zones_to_update.len;

			if ( this.zones_to_update.len != 0 ) {
				updating = this.zones_to_update;
				this.zones_to_update = new ByTable();

				foreach (dynamic _d in Lang13.Enumerate( updating, typeof(_Zone) )) {
					zone = _d;
					
					zone.tick();

					if ( Game13.cpu > 85 ) {
						Task13.Sleep( ((int)( Game13.tick_lag )) );
					}
					zone.needs_update = false;
				}
			}

			if ( _default ) {
				this.tick_progress = "success";
			}
			return _default;
		}

		// Function from file: Controller.dm
		public void Start(  ) {
			
			while (true) {
				this.Tick();
				Task13.Sleep( Num13.MaxInt( 5, this.update_delay * GlobalVars.tick_multiplier ) );
			}
			return;
		}

		// Function from file: Controller.dm
		public void Setup(  ) {
			int start_time = 0;
			int simulated_turf_count = 0;
			Tile_Simulated S = null;

			GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>Processing Geometry...</span>" );
			Task13.Sleep( -1 );
			start_time = Game13.timeofday;
			simulated_turf_count = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.turfs, typeof(Tile_Simulated) )) {
				S = _a;
				
				simulated_turf_count++;

				if ( !( simulated_turf_count % 50000 != 0 ) ) {
					Task13.Sleep( ((int)( Game13.tick_lag )) );
				}
				S.update_air_properties();
			}
			GlobalFuncs.to_chat( typeof(Game13), "<font color='red'><b>Geometry initialized in " + Num13.Round( ( Game13.timeofday - start_time ) * 0.1, 0.1 ) + " seconds.</b>\nTotal Simulated Turfs: " + simulated_turf_count + "\nTotal Zones: " + this.zones.len + "\nTotal Unsimulated Turfs: " + ( Game13.map_size_x * Game13.map_size_y * Game13.map_size_z - simulated_turf_count ) + "</font>" );
			return;
		}

	}

}