// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_GameController : Controller {

		public int breather_ticks = 2;
		public ByTable fusion_reactions = null;
		public int minimum_ticks = 20;
		public double air_cost = 0;
		public double sun_cost = 0;
		public double mobs_cost = 0;
		public double diseases_cost = 0;
		public double machines_cost = 0;
		public double objects_cost = 0;
		public double networks_cost = 0;
		public double powernets_cost = 0;
		public double nano_cost = 0;
		public double events_cost = 0;
		public double ticker_cost = 0;
		public double garbageCollectorCost = 0;
		public double total_cost = 0;
		public Type last_thing_processed = null;
		public ByTable expensive_mobs = new ByTable();
		public bool rebuild_active_areas = false;
		public bool initialized = false;
		public dynamic garbageCollector = null;
		public ByTable artifact_spawning_turfs = new ByTable();

		// Function from file: master_controller.dm
		public Controller_GameController (  ) {
			int watch = 0;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.master_controller != this ) {
				GlobalFuncs.log_debug( "Rebuilding Master Controller" );

				if ( GlobalVars.master_controller is Controller_GameController ) {
					this.recover();
					GlobalFuncs.qdel( GlobalVars.master_controller );
				}
				GlobalVars.master_controller = this;
			}
			watch = 0;

			if ( GlobalVars.job_master == null ) {
				watch = GlobalFuncs.start_watch();
				GlobalVars.job_master = new Controller_Occupations();
				GlobalVars.job_master.SetupOccupations();
				GlobalVars.job_master.LoadJobs( "config/jobs.txt" );
				GlobalFuncs.log_startup_progress( "Job setup complete in " + GlobalFuncs.stop_watch( watch ) + "s." );
			}

			if ( !Lang13.Bool( GlobalVars.syndicate_code_phrase ) ) {
				GlobalVars.syndicate_code_phrase = GlobalFuncs.generate_code_phrase();
			}

			if ( !Lang13.Bool( GlobalVars.syndicate_code_response ) ) {
				GlobalVars.syndicate_code_response = GlobalFuncs.generate_code_phrase();
			}
			return;
		}

		// Function from file: master_controller.dm
		public override dynamic recover(  ) {
			dynamic _default = null;

			string msg = null;
			dynamic varname = null;
			dynamic varval = null;
			Base_Data D = null;

			_default = base.recover();
			msg = "## DEBUG: " + String13.FormatTime( Game13.timeofday, null ) + " MC restarted. Reports:\n";

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.master_controller.vars )) {
				varname = _b;
				

				dynamic _a = varname; // Was a switch-case, sorry for the mess.
				if ( _a=="tag" || _a=="type" || _a=="parent_type" || _a=="vars" ) {
					continue;
				} else {
					varval = GlobalVars.master_controller.vars[varname];

					if ( varval is Game_Data ) {
						D = varval;
						msg += "	 " + varname + " = " + D.type + "\n";
					} else {
						msg += "	 " + varname + " = " + varval + "\n";
					}
				}
			}
			Game13.log.WriteMsg( msg );
			return _default;
		}

		// Function from file: master_controller.dm
		public void processEvents(  ) {
			Event Event = null;

			this.last_thing_processed = typeof(Event);

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.events, typeof(Event) )) {
				Event = _a;
				

				if ( Event != null ) {
					Event.process();
					continue;
				}
				GlobalVars.events.Remove( Event );
			}
			GlobalFuncs.checkEvent();
			return;
		}

		// Function from file: master_controller.dm
		public void processNano(  ) {
			Nanoui Nanoui = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.nanomanager.processing_uis, typeof(Nanoui) )) {
				Nanoui = _a;
				

				if ( Nanoui != null ) {
					Nanoui.process();
					continue;
				}
				GlobalVars.nanomanager.processing_uis.Remove( Nanoui );
			}
			return;
		}

		// Function from file: master_controller.dm
		public void processPowernets(  ) {
			Powernet Powernet = null;

			this.last_thing_processed = typeof(Powernet);

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.powernets, typeof(Powernet) )) {
				Powernet = _a;
				

				if ( Powernet != null ) {
					Powernet.reset();
					continue;
				}
				GlobalVars.powernets.Remove( Powernet );
			}
			return;
		}

		// Function from file: master_controller.dm
		public void processPipenets(  ) {
			PipeNetwork Pipe_Network = null;

			this.last_thing_processed = typeof(PipeNetwork);

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.pipe_networks, typeof(PipeNetwork) )) {
				Pipe_Network = _a;
				

				if ( Pipe_Network != null ) {
					Pipe_Network.process();
					continue;
				}
				GlobalVars.pipe_networks.Remove( Pipe_Network );
			}
			return;
		}

		// Function from file: master_controller.dm
		public void processObjects(  ) {
			Obj Object = null;
			Tile_Unsimulated_Wall_Supermatter SM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.processing_objects, typeof(Obj) )) {
				Object = _a;
				

				if ( Object != null && Object.loc != null ) {
					this.last_thing_processed = Object.type;
					Object.process();
					continue;
				}
				GlobalVars.processing_objects.Remove( Object );
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.processing_objects, typeof(Tile_Unsimulated_Wall_Supermatter) )) {
				SM = _b;
				

				if ( SM != null ) {
					this.last_thing_processed = SM.type;
					SM.process();
					continue;
				}
				GlobalVars.processing_objects.Remove( SM );
			}
			return;
		}

		// Function from file: master_controller.dm
		public void processMachines(  ) {
			Obj_Machinery Machinery = null;
			int start = 0;
			int end = 0;

			GlobalVars.machine_profiling.len = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery) )) {
				Machinery = _a;
				

				if ( Machinery != null && Machinery.loc != null ) {
					this.last_thing_processed = Machinery.type;
					start = Game13.timeofday;

					if ( 26 == Machinery.process() ) {
						Machinery.inMachineList = false;
						GlobalVars.machines.Remove( Machinery );
						continue;
					}

					if ( Machinery != null && Machinery.use_power != 0 ) {
						Machinery.auto_use_power();
					}
					end = Game13.timeofday;
					Interface13.Stat( null, GlobalVars.machine_profiling.Contains( Machinery.type ) );

					if ( !( Machinery != null && Machinery.use_power != 0 ) ) {
						GlobalVars.machine_profiling[Machinery.type] = 0;
					}
					GlobalVars.machine_profiling[Machinery.type] += end - start;
				}
			}
			return;
		}

		// Function from file: master_controller.dm
		public void processDiseases(  ) {
			Disease Disease = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.active_diseases, typeof(Disease) )) {
				Disease = _a;
				

				if ( Disease != null ) {
					this.last_thing_processed = Disease.type;
					Disease.process();
					continue;
				}
				GlobalVars.active_diseases.Remove( Disease );
			}
			return;
		}

		// Function from file: master_controller.dm
		public void processMobs(  ) {
			int? i = null;
			Mob M = null;
			int clock = 0;

			i = 1;
			this.expensive_mobs.len = 0;

			while (( i ??0) <= GlobalVars.mob_list.len) {
				M = GlobalVars.mob_list[i];

				if ( M != null ) {
					clock = Game13.timeofday;
					this.last_thing_processed = M.type;
					M.Life();

					if ( Game13.timeofday - clock > 1 ) {
						this.expensive_mobs.Add( M );
					}
					i++;
					continue;
				}

				if ( !GlobalVars.mob_list.Remove( null ) ) {
					GlobalVars.mob_list.Cut( i, ( i ??0) + 1 );
				}
			}
			return;
		}

		// Function from file: master_controller.dm
		public void process(  ) {
			int? timer = null;
			int start_time = 0;
			int end_time = 0;

			this.processing = true;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (true) {
					
					if ( GlobalVars.failsafe == null ) {
						new Controller_Failsafe();
					}

					if ( this.processing ) {
						this.iteration++;
						timer = null;
						start_time = Game13.timeofday;
						GlobalVars.vote.process();

						if ( !( GlobalVars.air_processing_killed == true ) ) {
							timer = Game13.timeofday;
							this.last_thing_processed = GlobalVars.air_master.type;

							if ( !GlobalVars.air_master.Tick() ) {
								GlobalVars.air_master.failed_ticks++;

								if ( GlobalVars.air_master.failed_ticks > 5 ) {
									GlobalFuncs.to_chat( typeof(Game13), "<font color='red'><b>RUNTIMES IN ATMOS TICKER.  Killing air simulation!</font></b>" );
									Game13.log.WriteMsg( "### ZAS SHUTDOWN" );
									GlobalFuncs.message_admins( "ZASALERT: unable to run " + GlobalVars.air_master.tick_progress + ", shutting down!" );
									GlobalFuncs.log_admin( "ZASALERT: unable run zone/process() -- " + GlobalVars.air_master.tick_progress );
									GlobalVars.air_processing_killed = true;
									GlobalVars.air_master.failed_ticks = 0;
								}
							}
							this.air_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						}
						Task13.Sleep( this.breather_ticks );
						timer = Game13.timeofday;
						this.last_thing_processed = GlobalVars.sun.type;
						GlobalVars.sun.calc_position();
						this.sun_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						Task13.Sleep( this.breather_ticks );
						timer = Game13.timeofday;
						this.processMobs();
						this.mobs_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						Task13.Sleep( this.breather_ticks );
						timer = Game13.timeofday;
						this.processDiseases();
						this.diseases_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						Task13.Sleep( this.breather_ticks );
						timer = Game13.timeofday;
						this.processMachines();
						this.machines_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						Task13.Sleep( this.breather_ticks );
						timer = Game13.timeofday;
						this.processObjects();
						this.objects_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						Task13.Sleep( this.breather_ticks );

						if ( !GlobalVars.pipe_processing_killed ) {
							timer = Game13.timeofday;
							this.processPipenets();
							this.networks_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						}
						Task13.Sleep( this.breather_ticks );
						timer = Game13.timeofday;
						this.processPowernets();
						this.powernets_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						Task13.Sleep( this.breather_ticks );
						timer = Game13.timeofday;
						this.processNano();
						this.nano_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						Task13.Sleep( this.breather_ticks );
						timer = Game13.timeofday;
						this.processEvents();
						this.events_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						timer = Game13.timeofday;
						this.last_thing_processed = GlobalVars.ticker.type;
						GlobalVars.ticker.process();
						this.ticker_cost = ( Game13.timeofday - ( timer ??0) ) / 10;
						timer = Game13.timeofday;
						this.last_thing_processed = GlobalVars.garbageCollector.type;
						GlobalVars.garbageCollector.process();
						this.garbageCollectorCost = ( Game13.timeofday - ( timer ??0) ) / 10;
						this.total_cost = this.air_cost + this.sun_cost + this.mobs_cost + this.diseases_cost + this.machines_cost + this.objects_cost + this.networks_cost + this.powernets_cost + this.nano_cost + this.events_cost + this.ticker_cost + this.garbageCollectorCost;
						end_time = Game13.timeofday;

						if ( end_time < start_time ) {
							start_time -= 864000;
						}
						Task13.Sleep( ((int)( Num13.Round( this.minimum_ticks - ( end_time - start_time ), 1 ) )) );
					} else {
						Task13.Sleep( 10 );
					}
				}
				return;
			}));
			return;
		}

		// Function from file: master_controller.dm
		public void setup_objects(  ) {
			int watch = 0;
			int overwatch = 0;
			int count = 0;
			Ent_Dynamic _object = null;
			Obj_Machinery_Atmospherics machine = null;
			Obj_Machinery_Atmospherics_Unary U = null;
			Obj_Machinery_Atmospherics_Unary T = null;
			Obj_Machinery_Atmospherics_Unary T2 = null;

			watch = GlobalFuncs.start_watch();
			overwatch = GlobalFuncs.start_watch();
			GlobalFuncs.log_startup_progress( "Populating asset cache..." );
			GlobalFuncs.populate_asset_cache();
			GlobalFuncs.log_startup_progress( "  Populated " + GlobalVars.asset_cache.len + " assets in " + GlobalFuncs.stop_watch( watch ) + "s." );
			watch = GlobalFuncs.start_watch();
			GlobalFuncs.log_startup_progress( "Initializing objects..." );
			count = 0;

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Ent_Dynamic) )) {
				_object = _a;
				
				_object.initialize();
				count++;
			}
			GlobalFuncs.log_startup_progress( "  Initialized " + count + " objects in " + GlobalFuncs.stop_watch( watch ) + "s." );
			watch = GlobalFuncs.start_watch();
			count = 0;
			GlobalFuncs.log_startup_progress( "Initializing pipe networks..." );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics) )) {
				machine = _b;
				
				machine.build_network();
				count++;
			}
			GlobalFuncs.log_startup_progress( "  Initialized " + count + " pipe networks in " + GlobalFuncs.stop_watch( watch ) + "s." );
			watch = GlobalFuncs.start_watch();
			count = 0;
			GlobalFuncs.log_startup_progress( "Initializing atmos machinery..." );

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Unary) )) {
				U = _c;
				

				if ( U is Obj_Machinery_Atmospherics_Unary_VentPump ) {
					T = U;
					((Obj_Machinery_Atmospherics_Unary_VentPump)T).broadcast_status();
					count++;
				} else if ( U is Obj_Machinery_Atmospherics_Unary_VentScrubber ) {
					T2 = U;
					((Obj_Machinery_Atmospherics_Unary_VentScrubber)T2).broadcast_status();
					count++;
				}
			}
			GlobalFuncs.log_startup_progress( "  Initialized " + count + " atmos devices in " + GlobalFuncs.stop_watch( watch ) + "s." );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				watch = GlobalFuncs.start_watch();
				GlobalFuncs.log_startup_progress( "Generating in-game minimaps..." );
				GlobalFuncs.generateMiniMaps();
				GlobalFuncs.log_startup_progress( "  Finished minimaps in " + GlobalFuncs.stop_watch( watch ) + "s." );
				return;
			}));
			GlobalFuncs.log_startup_progress( "Finished initializations in " + GlobalFuncs.stop_watch( overwatch ) + "s." );
			return;
		}

		// Function from file: master_controller.dm
		public void cachedamageicons(  ) {
			Mob_Living_Carbon_Human H = null;
			ByTable slist = null;
			Icon DI = null;
			string species_blood = null;
			Species S = null;
			Organ_External O = null;
			double brute = 0;
			double burn = 0;
			string damage_state = null;

			H = new Mob_Living_Carbon_Human( Map13.GetTile( 1, 1, 2 ) );
			slist = new ByTable(new object [] { new Species_Human(), new Species_Vox(), new Species_Diona() });

			foreach (dynamic _d in Lang13.Enumerate( slist, typeof(Species) )) {
				S = _d;
				
				species_blood = ( S.blood_color == "#A10808" ? "" : S.blood_color );
				Game13.log.WriteMsg( "## TESTING: " + ( "Generating " + S + ", Blood(" + species_blood + ")" ) );

				foreach (dynamic _c in Lang13.Enumerate( H.organs, typeof(Organ_External) )) {
					O = _c;
					

					foreach (dynamic _b in Lang13.IterateRange( 1, 3 )) {
						brute = _b;
						

						foreach (dynamic _a in Lang13.IterateRange( 1, 3 )) {
							burn = _a;
							
							damage_state = "" + brute + burn;
							DI = new Icon( "icons/mob/dam_human.dmi", "" + damage_state );
							DI.Blend( new Icon( "icons/mob/dam_mask.dmi", O.icon_name ), 2 );

							if ( Lang13.Bool( species_blood ) ) {
								DI.Blend( S.blood_color, 2 );
							}
							GlobalVars.damage_icon_parts["" + damage_state + "/" + O.icon_name + "/" + species_blood] = DI;
						}
					}
				}
			}
			Lang13.Delete( H );
			H = null;
			return;
		}

		// Function from file: master_controller.dm
		public void buildcamlist(  ) {
			dynamic key = null;
			Obj_Machinery_Camera C = null;
			dynamic ourlist = null;
			Obj_Machinery_Camera C2 = null;
			dynamic ourlist2 = null;
			dynamic key2 = null;
			ByTable keylist = null;

			GlobalVars.adv_camera.camerasbyzlevel = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.adv_camera.zlevels )) {
				key = _a;
				
				GlobalVars.adv_camera.camerasbyzlevel["" + key] = new ByTable();
			}

			if ( !( GlobalVars.cameranet is Cameranet ) || !( GlobalVars.cameranet.cameras is ByTable ) || !( GlobalVars.cameranet.cameras.len != 0 ) ) {
				Game13.log.WriteMsg( "cameranet has not been initialized before us, finding cameras manually." );

				foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj_Machinery_Camera) )) {
					C = _b;
					

					if ( C.z == 1 || C.z == 5 ) {
						ourlist = GlobalVars.adv_camera.camerasbyzlevel["" + C.z];
						ourlist += C;
					}
				}
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
					C2 = _c;
					

					if ( C2.z == 1 || C2.z == 5 ) {
						ourlist2 = GlobalVars.adv_camera.camerasbyzlevel["" + C2.z];
						ourlist2 += C2;
					}
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.adv_camera.camerasbyzlevel )) {
				key2 = _d;
				
				keylist = GlobalVars.adv_camera.camerasbyzlevel[key2];
				Game13.log.WriteMsg( "" + key2 + " has " + keylist.len + " entries" );
			}
			GlobalVars.adv_camera.initialized = true;
			return;
		}

		// Function from file: master_controller.dm
		public void setup(  ) {
			int watch = 0;
			int? i = null;

			Game13.tick_lag = GlobalVars.config.Ticklag ??0;
			GlobalVars.socket_talk = new SocketTalk();
			GlobalVars.socket_talk.send_raw( "type=startup" );
			GlobalFuncs.createRandomZlevel();
			this.setup_objects();
			GlobalFuncs.setupgenetics();
			GlobalFuncs.setupfactions();
			GlobalFuncs.setup_economy();
			GlobalFuncs.SetupXenoarch();
			watch = GlobalFuncs.start_watch();
			GlobalFuncs.log_startup_progress( "Caching damage icons..." );
			this.cachedamageicons();
			GlobalFuncs.log_startup_progress( "  Finished caching damage icons in " + GlobalFuncs.stop_watch( watch ) + "s." );
			this.buildcamlist();

			if ( Lang13.Bool( GlobalVars.config.media_base_url ) ) {
				watch = GlobalFuncs.start_watch();
				GlobalFuncs.log_startup_progress( "Caching jukebox playlists..." );
				GlobalFuncs.load_juke_playlists();
				GlobalFuncs.log_startup_progress( "  Finished caching jukebox playlists in " + GlobalFuncs.stop_watch( watch ) + "s." );
			}
			i = null;
			i = 0;

			while (( i ??0) < GlobalVars.max_secret_rooms) {
				GlobalFuncs.make_mining_asteroid_secret();
				i++;
			}
			this.initialized = true;
			return;
		}

	}

}