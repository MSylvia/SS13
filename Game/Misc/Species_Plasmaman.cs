// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Species_Plasmaman : Species {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Plasmaman";
			this.icobase = "icons/mob/human_races/r_plasmaman_sb.dmi";
			this.deform = "icons/mob/human_races/r_plasmaman_pb.dmi";
			this.language = "Clatter";
			this.has_sweat_glands = false;
			this.flags = 1025;
			this.breath_type = "plasma";
			this.heat_level_1 = 350;
			this.heat_level_3 = 500;
			this.burn_mod = 0.5;
		}

		// Function from file: species.dm
		public override bool handle_breath( dynamic breath = null, Mob_Living_Carbon_Human H = null ) {
			double safe_plasma_min = 0;
			double safe_co2_max = 0;
			double SA_para_min = 0;
			double SA_sleep_min = 0;
			dynamic plasma_used = null;
			bool nitrogen_used = false;
			dynamic breath_pressure = null;
			dynamic Toxins_pp = null;
			dynamic CO2_pp = null;
			double ratio = 0;
			Gas_SleepingAgent SA = null;
			double SA_pp = 0;

			safe_plasma_min = 16;
			safe_co2_max = 10;
			SA_para_min = 1;
			SA_sleep_min = 5;
			plasma_used = 0;
			nitrogen_used = false;
			breath_pressure = ((GasMixture)breath).f_total_moles() * breath.temperature * 8.314 / 0.5;
			Toxins_pp = breath.toxins / ((GasMixture)breath).f_total_moles() * breath_pressure;
			CO2_pp = breath.carbon_dioxide / ((GasMixture)breath).f_total_moles() * breath_pressure;

			if ( Convert.ToDouble( Toxins_pp ) < safe_plasma_min ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						H.emote( "gasp" );
						return;
					}));
				}

				if ( Convert.ToDouble( Toxins_pp ) > 0 ) {
					ratio = safe_plasma_min / Convert.ToDouble( Toxins_pp );
					H.adjustOxyLoss( Num13.MinInt( ((int)( ratio * 5 )), 1 ) );
					H.failed_last_breath = true;
					plasma_used = breath.toxins * ratio / 6;
				} else {
					H.adjustOxyLoss( 1 );
					H.failed_last_breath = true;
				}
				H.oxygen_alert = Num13.MaxInt( H.oxygen_alert, 1 );
			} else {
				H.failed_last_breath = false;
				H.adjustOxyLoss( -5 );
				plasma_used = breath.toxins / 6;
				H.oxygen_alert = 0;

				if ( !H.on_fire ) {
					
					if ( Convert.ToDouble( H.bodytemperature ) < 310.41 ) {
						H.bodytemperature = Num13.MinInt( Convert.ToInt32( H.bodytemperature + 0.5 ), ((int)( 310.41 )) );
					} else {
						H.bodytemperature = Num13.MinInt( Convert.ToInt32( H.bodytemperature - 0.5 ), ((int)( 310.41 )) );
					}
				}
			}
			breath.toxins -= plasma_used;
			breath.nitrogen -= nitrogen_used ?1:0;
			breath.carbon_dioxide += plasma_used;

			if ( Convert.ToDouble( CO2_pp ) > safe_co2_max ) {
				
				if ( !( H.co2overloadtime != 0 ) ) {
					H.co2overloadtime = Game13.time;
				} else if ( Game13.time - H.co2overloadtime > 120 ) {
					H.Paralyse( 3 );
					H.adjustOxyLoss( 3 );

					if ( Game13.time - H.co2overloadtime > 300 ) {
						H.adjustOxyLoss( 8 );
					}
				}

				if ( Rand13.PercentChance( 20 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						H.emote( "cough" );
						return;
					}));
				}
			} else {
				H.co2overloadtime = 0;
			}

			if ( breath.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( breath.trace_gases, typeof(Gas_SleepingAgent) )) {
					SA = _a;
					
					SA_pp = ( SA.moles ??0) / Convert.ToDouble( ((GasMixture)breath).f_total_moles() ) * Convert.ToDouble( breath_pressure );

					if ( SA_pp > SA_para_min ) {
						H.Paralyse( 3 );

						if ( SA_pp > SA_sleep_min ) {
							H.sleeping = Num13.MinInt( H.sleeping + 2, 10 );
						}
					} else if ( SA_pp > 0.15 ) {
						
						if ( Rand13.PercentChance( 20 ) ) {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								H.emote( Rand13.Pick(new object [] { "giggle", "laugh" }) );
								return;
							}));
						}
					}
					SA.moles = 0;
				}
			}

			if ( Math.Abs( 310.41 - Convert.ToDouble( breath.temperature ) ) > 50 && !H.mutations.Contains( 106 ) ) {
				
				if ( ( H.status_flags & 4096 ) != 0 ) {
					return true;
				} else if ( Convert.ToDouble( breath.temperature ) > this.heat_level_1 ) {
					
					if ( Rand13.PercentChance( 20 ) ) {
						
						if ( H.dna.mutantrace == "slime" ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>You feel supercharged by the extreme heat!</span>" );
						} else {
							GlobalFuncs.to_chat( this, "<span class='warning'>You feel your face burning and a searing heat in your lungs!</span>" );
						}
					}
				}

				if ( H.dna.mutantrace == "slime" ) {
					
					if ( Convert.ToDouble( breath.temperature ) < this.cold_level_1 ) {
						H.adjustToxLoss( Num13.Floor( this.cold_level_1 - Convert.ToDouble( breath.temperature ) ) );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 1 );
					}
				} else {
					
					dynamic _b = breath.temperature; // Was a switch-case, sorry for the mess.
					if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 3, "fire", "head", null, null, null, "Excessive Cold" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 1 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 1.5, "fire", "head", null, null, null, "Excessive Cold" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 1 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 0.5, "fire", "head", null, null, null, "Excessive Cold" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 1 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 2, "fire", "head", null, null, null, "Excessive Heat" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 2 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 4, "fire", "head", null, null, null, "Excessive Heat" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 2 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=Double.PositiveInfinity ) {
						H.apply_damage( 8, "fire", "head", null, null, null, "Excessive Heat" );
						H.fire_alert = Num13.MaxInt( H.fire_alert, 2 );
					}
				}
			}
			return true;
		}

		// Function from file: species.dm
		public override void equip( Mob_Living_Carbon_Human H = null ) {
			Type suit = null;
			Type helm = null;
			int? tank_slot = null;
			string tank_slot_name = null;

			H.fire_sprite = "Plasmaman";
			H.u_equip( H.wear_suit, true );
			H.u_equip( H.head, true );

			if ( H.mind.assigned_role != "Clown" ) {
				H.u_equip( H.wear_mask, true );
			}
			H.equip_or_collect( new Obj_Item_Clothing_Mask_Breath( H ), 2 );
			suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman);
			helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman);
			tank_slot = 17;
			tank_slot_name = "suit storage";

			dynamic _a = H.mind.assigned_role; // Was a switch-case, sorry for the mess.
			if ( _a=="Scientist" || _a=="Geneticist" || _a=="Roboticist" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Science);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Science);
			} else if ( _a=="Research Director" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Science_Rd);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Science_Rd);
			} else if ( _a=="Station Engineer" || _a=="Mechanic" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Engineer);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Engineer);
			} else if ( _a=="Chief Engineer" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Engineer_Ce);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Engineer_Ce);
			} else if ( _a=="Atmospheric Technician" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Atmostech);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Atmostech);
			} else if ( _a=="Warden" || _a=="Detective" || _a=="Security Officer" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Security);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Security);
			} else if ( _a=="Head of Security" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Security_Hos);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Security_Hos);
			} else if ( _a=="Captain" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Security_Captain);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Security_Captain);
			} else if ( _a=="Head of Personnel" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Security_Hop);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Security_Hop);
			} else if ( _a=="Medical Doctor" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Medical);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Medical);
			} else if ( _a=="Paramedic" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Medical_Paramedic);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Medical_Paramedic);
			} else if ( _a=="Chemist" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Medical_Chemist);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Medical_Chemist);
			} else if ( _a=="Chief Medical Officer" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Medical_Cmo);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Medical_Cmo);
			} else if ( _a=="Bartender" || _a=="Chef" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Service);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Service);
			} else if ( _a=="Cargo Technician" || _a=="Quartermaster" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Cargo);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Cargo);
			} else if ( _a=="Shaft Miner" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Miner);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Miner);
			} else if ( _a=="Botanist" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Botanist);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Botanist);
			} else if ( _a=="Chaplain" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Chaplain);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Chaplain);
			} else if ( _a=="Janitor" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Janitor);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Janitor);
			} else if ( _a=="Assistant" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Assistant);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Assistant);
			} else if ( _a=="Clown" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Clown);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Clown);
			} else if ( _a=="Mime" ) {
				suit = typeof(Obj_Item_Clothing_Suit_Space_Plasmaman_Mime);
				helm = typeof(Obj_Item_Clothing_Head_Helmet_Space_Plasmaman_Mime);
			}
			H.equip_or_collect( Lang13.Call( suit, H ), 13 );
			H.equip_or_collect( Lang13.Call( helm, H ), 11 );
			H.equip_or_collect( new Obj_Item_Weapon_Tank_Plasma_Plasmaman( H ), tank_slot );
			GlobalFuncs.to_chat( H, "<span class='notice'>You are now running on plasma internals from the " + H.s_store + " in your " + tank_slot_name + ".  You must breathe plasma in order to survive, and are extremely flammable.</span>" );
			H.v_internal = H.get_item_by_slot( tank_slot );

			if ( H.internals != null ) {
				((dynamic)H.internals).icon_state = "internal1";
			}
			return;
		}

		// Function from file: species.dm
		public override bool handle_speech( dynamic speech = null, Mob_Living_Carbon_Human H = null ) {
			speech.message = GlobalFuncs.replacetext( speech.message, "s", GlobalFuncs.stutter( "ss" ) );
			return base.handle_speech( (object)(speech), H );
		}

	}

}