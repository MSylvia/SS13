// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Circuits : Game_Data {

		public Ent_Static holder = null;
		public ByTable fuse_point_names = new ByTable().Set( "Alpha", 1 ).Set( "Beta", 2 ).Set( "Gamma", 4 ).Set( "Delta", 8 ).Set( "Eta", 16 ).Set( "Theta", 32 ).Set( "Iota", 64 );
		public ByTable possible_boards = new ByTable(new object [] { 
											typeof(Obj_Item_Weapon_Circuitboard_Autolathe), 
											typeof(Obj_Item_Weapon_Circuitboard_SeedExtractor), 
											typeof(Obj_Item_Weapon_Circuitboard_Conveyor), 
											typeof(Obj_Item_Weapon_Circuitboard_AirAlarm), 
											typeof(Obj_Item_Weapon_Circuitboard_FireAlarm), 
											typeof(Obj_Item_Weapon_Circuitboard_Airlock), 
											typeof(Obj_Item_Weapon_Circuitboard_PowerControl), 
											typeof(Obj_Item_Weapon_Circuitboard_Vendomat), 
											typeof(Obj_Item_Weapon_Circuitboard_Microwave)
										 });
		public dynamic assigned_boards = null;
		public int localbit = 0;
		public string table_options = " align='center'";
		public string row_options1 = " width='80px'";
		public string row_options2 = " width='80px'";
		public int window_x = 240;
		public int? window_y = 300;

		// Function from file: circuits.dm
		public Circuits ( dynamic homeboard = null ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.holder = homeboard;

			if ( !( GlobalVars.assigned_boards.len != 0 ) ) {
				this.generate_schema();
			}
			return;
		}

		// Function from file: circuits.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob L = null;
			dynamic I = null;
			dynamic S = null;
			string greek = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( GlobalFuncs.in_range( this.holder, Task13.User ) && Task13.User is Mob_Living ) {
				L = Task13.User;

				if ( Lang13.Bool( href_list["action"] ) ) {
					I = L.get_active_hand();
					this.holder.add_hiddenprint( L );

					if ( Lang13.Bool( href_list["fuse"] ) ) {
						
						if ( I is Obj_Item_Weapon_Solder ) {
							S = I;

							if ( Lang13.Bool( S.remove_fuel( 1, L ) ) ) {
								GlobalFuncs.playsound( L.loc, "sound/items/welder.ogg", 25, 1 );
								greek = href_list["fuse"];
								this.togglefuse( String13.ParseNumber( greek ) );
							}
						} else {
							GlobalFuncs.to_chat( L, "<span class='error'>You need a soldering tool!</span>" );
						}
					}
					this.Interact( Task13.User );
				}
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=wires" );
				Task13.User.unset_machine(  );
			}
			return null;
		}

		// Function from file: circuits.dm
		public string GetInteractWindow(  ) {
			string html = null;
			dynamic fusepoint = null;

			html = "<div class='block'>";
			html += "<h3>Protoboard</h3>";
			html += "<table" + this.table_options + ">";

			foreach (dynamic _a in Lang13.Enumerate( this.fuse_point_names )) {
				fusepoint = _a;
				
				html += new Txt( "<tr>\n		<td" ).item( this.row_options1 ).str( "><font color='blue'>" ).item( fusepoint ).str( "</font>\n		</td>\n		<td" ).item( this.row_options2 ).str( ">\n		<A href='?src=" ).Ref( this ).str( ";action=1;fuse=" ).item( this.fuse_point_names[fusepoint] ).str( "'>" ).item( ( this.checkfuse( String13.ParseNumber( this.fuse_point_names[fusepoint] ) ) != 0 ? "Melt" : "Fuse" ) ).str( "</A></td></tr>" ).ToString();
			}
			html += "</table>";
			html += "</div>";
			return html;
		}

		// Function from file: circuits.dm
		public bool Interact( Mob user = null ) {
			string html = null;
			Browser popup = null;

			
			if ( !( user is Mob_Living ) ) {
				return false;
			}
			html = null;

			if ( this.holder != null ) {
				html = this.GetInteractWindow();
			}

			if ( Lang13.Bool( html ) ) {
				user.set_machine( this.holder );
			}
			popup = new Browser( user, "circuits", this.holder.name, this.window_x, this.window_y );
			popup.set_content( html );
			//popup.set_title_image( user.browse_rsc_icon( this.holder.icon, this.holder.icon_state ) );
			popup.open();
			return false;
		}

		// Function from file: circuits.dm
		public void togglefuse( double? greek = null ) {
			this.localbit ^= ((int)( greek ??0 ));
			return;
		}

		// Function from file: circuits.dm
		public int checkfuse( double? greek = null ) {
			return this.localbit & ((int)( greek ??0 ));
		}

		// Function from file: circuits.dm
		public int newhash( int choose = 0 ) {
			ByTable fuse_point_list = null;
			int build = 0;
			dynamic choice = null;

			fuse_point_list = new ByTable(new object [] { 1, 2, 4, 8, 16, 32, 64 });
			build = 0;
			choice = null;

			while (choose > 0) {
				choice = GlobalFuncs.pick_n_take( fuse_point_list );
				build |= Convert.ToInt32( choice );
				choose--;
			}
			return build;
		}

		// Function from file: circuits.dm
		public bool check_config( dynamic proposed = null ) {
			dynamic bitflag = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.assigned_boards )) {
				bitflag = _a;
				

				if ( String13.ParseNumber( proposed ) == String13.ParseNumber( bitflag ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: circuits.dm
		public void generate_schema(  ) {
			dynamic C = null;
			int newbit = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( this.possible_boards )) {
				C = _a;
				
				newbit = this.newhash( 5 );

				while (!this.check_config( newbit )) {
					newbit = this.newhash( 5 );
				}
				GlobalVars.assigned_boards["" + newbit] = C;
			}
			return;
		}

	}

}