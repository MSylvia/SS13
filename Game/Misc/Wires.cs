// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires : Game_Data {

		public bool random = false;
		public Obj holder = null;
		public Type holder_type = null;
		public int wire_count = 0;
		public int wires_status = 0;
		public bool check_wires = false;
		public ByTable wires = new ByTable();
		public ByTable wire_names = null;
		public ByTable signallers = new ByTable();
		public string table_options = " align='center'";
		public string row_options1 = " width='80px'";
		public string row_options2 = " width='260px'";
		public int window_x = 370;
		public int? window_y = 470;

		// Function from file: wires.dm
		public Wires ( Obj holder = null ) {
			dynamic wires = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.holder = holder;

			if ( !Lang13.Bool( ((dynamic)this.holder_type).IsInstanceOfType( holder ) ) ) {
				Task13.Crash( "Our holder is null/the wrong type!" );
				return;
			}

			if ( this.random ) {
				this.GenerateWires();
			} else if ( !Lang13.Bool( GlobalVars.same_wires[this.holder_type] ) ) {
				this.GenerateWires();
				GlobalVars.same_wires[this.holder_type] = this.wires.Copy();
			} else {
				wires = GlobalVars.same_wires[this.holder_type];
				this.wires = wires;
			}
			return;
		}

		// Function from file: wires.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob L = null;
			dynamic I = null;
			dynamic colour = null;
			dynamic colour2 = null;
			dynamic colour3 = null;
			Ent_Static O = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( GlobalFuncs.in_range( this.holder, Task13.User ) && Task13.User is Mob_Living ) {
				L = Task13.User;

				if ( this.CanUse( L ) && Lang13.Bool( href_list["action"] ) ) {
					I = L.get_active_hand();
					this.holder.add_hiddenprint( L );

					if ( Lang13.Bool( href_list["cut"] ) ) {
						
						if ( I is Obj_Item_Weapon_Wirecutters ) {
							colour = href_list["cut"];
							this.CutWireColour( colour );
						} else {
							GlobalFuncs.to_chat( L, "<span class='error'>You need wirecutters!</span>" );
						}
					} else if ( Lang13.Bool( href_list["pulse"] ) ) {
						
						if ( I is Obj_Item_Device_Multitool ) {
							colour2 = href_list["pulse"];
							this.PulseColour( colour2 );
						} else {
							GlobalFuncs.to_chat( L, "<span class='error'>You need a multitool!</span>" );
						}
					} else if ( Lang13.Bool( href_list["attach"] ) ) {
						colour3 = href_list["attach"];

						if ( this.IsAttached( colour3 ) ) {
							O = this.Detach( colour3 );

							if ( O != null ) {
								L.put_in_hands( O );
							}
						} else if ( I is Obj_Item_Device_Assembly_Signaler ) {
							
							if ( L.drop_item( I ) ) {
								this.Attach( colour3, I );
							}
						} else {
							GlobalFuncs.to_chat( L, "<span class='error'>You need a remote signaller!</span>" );
						}
					}
					this.Interact( Task13.User );
				}
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=wires" );
				Task13.User.unset_machine(  );
			}
			return null;
		}

		// Function from file: wires.dm
		public bool IsAllCut(  ) {
			
			if ( this.wires_status == ( 1 << this.wire_count ) - 1 ) {
				return true;
			}
			return false;
		}

		// Function from file: wires.dm
		public void CutAll(  ) {
			double? i = null;

			i = null;
			i = 1;

			while (( i ??0) < 65535 && ( i ??0) < 1 << this.wire_count) {
				this.CutWireIndex( i );
				i += i ??0;
			}
			return;
		}

		// Function from file: wires.dm
		public void RandomCut(  ) {
			double? r = null;

			r = Rand13.Int( 1, this.wires.len );
			this.CutWireIndex( r );
			return;
		}

		// Function from file: wires.dm
		public void CutWireIndex( double? index = null ) {
			
			if ( this.IsIndexCut( index ) != 0 ) {
				this.wires_status &= ~((int)( index ??0 ));
				this.UpdateCut( index, true );
			} else {
				this.wires_status |= ((int)( index ??0 ));
				this.UpdateCut( index, false );
			}
			return;
		}

		// Function from file: wires.dm
		public void CutWireColour( dynamic colour = null ) {
			double? index = null;

			index = Lang13.DoubleNullable( this.GetIndex( colour ) );
			this.CutWireIndex( index );
			return;
		}

		// Function from file: wires.dm
		public void Pulse( dynamic S = null ) {
			dynamic colour = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.signallers )) {
				colour = _a;
				

				if ( S == this.signallers[colour] ) {
					this.PulseColour( colour );
					break;
				}
			}
			return;
		}

		// Function from file: wires.dm
		public Ent_Static Detach( dynamic colour = null ) {
			Ent_Static S = null;

			
			if ( Lang13.Bool( colour ) ) {
				S = this.GetAttached( colour );

				if ( S != null ) {
					this.signallers.Remove( colour );
					((dynamic)S).connected = null;
					S.loc = this.holder.loc;
					return S;
				}
			}
			return null;
		}

		// Function from file: wires.dm
		public dynamic Attach( dynamic colour = null, dynamic S = null ) {
			
			if ( Lang13.Bool( colour ) && Lang13.Bool( S ) ) {
				
				if ( !this.IsAttached( colour ) ) {
					this.signallers[colour] = S;
					S.loc = this.holder;
					S.connected = this;
					return S;
				}
			}
			return null;
		}

		// Function from file: wires.dm
		public dynamic GetAttached( dynamic colour = null ) {
			
			if ( Lang13.Bool( this.signallers[colour] ) ) {
				return this.signallers[colour];
			}
			return null;
		}

		// Function from file: wires.dm
		public bool IsAttached( dynamic colour = null ) {
			
			if ( Lang13.Bool( this.signallers[colour] ) ) {
				return true;
			}
			return false;
		}

		// Function from file: wires.dm
		public int IsIndexCut( double? index = null ) {
			return ((int)( index ??0 )) & this.wires_status;
		}

		// Function from file: wires.dm
		public int IsColourCut( dynamic colour = null ) {
			double? index = null;

			index = Lang13.DoubleNullable( this.GetIndex( colour ) );
			return this.IsIndexCut( index );
		}

		// Function from file: wires.dm
		public dynamic GetIndex( dynamic colour = null ) {
			dynamic index = null;

			
			if ( Lang13.Bool( this.wires[colour] ) ) {
				index = this.wires[colour];
				return index;
			} else {
				Task13.Crash( "" + colour + " is not a key in wires." );
			}
			return null;
		}

		// Function from file: wires.dm
		public void PulseIndex( double? index = null ) {
			
			if ( this.IsIndexCut( index ) != 0 ) {
				return;
			}
			this.UpdatePulsed( index );
			return;
		}

		// Function from file: wires.dm
		public void PulseColour( dynamic colour = null ) {
			this.PulseIndex( Lang13.DoubleNullable( this.GetIndex( colour ) ) );
			return;
		}

		// Function from file: wires.dm
		public virtual bool CanUse( dynamic L = null ) {
			return true;
		}

		// Function from file: wires.dm
		public virtual void UpdatePulsed( double? index = null ) {
			return;
		}

		// Function from file: wires.dm
		public virtual void UpdateCut( double? index = null, bool mended = false ) {
			return;
		}

		// Function from file: wires.dm
		public virtual string GetInteractWindow(  ) {
			string html = null;
			dynamic colour = null;

			html = "<div class='block'>";
			html += "<h3>Exposed Wires</h3>";
			html += "<table" + this.table_options + ">";

			foreach (dynamic _a in Lang13.Enumerate( this.wires )) {
				colour = _a;
				
				html += "<tr>";
				html += "<td" + this.row_options1 + "><font color='" + colour + "'>" + GlobalFuncs.capitalize( colour ) + "</font>";

				if ( this.check_wires && this.wire_names != null && Lang13.Bool( this.wires[colour] ) ) {
					html += " (" + this.GetWireName( this.wires[colour] ) + ")";
				}
				html += "</td>";
				html += "<td" + this.row_options2 + ">";
				html += new Txt( "<A href='?src=" ).Ref( this ).str( ";action=1;cut=" ).item( colour ).str( "'>" ).item( ( this.IsColourCut( colour ) != 0 ? "Mend" : "Cut" ) ).str( "</A>" ).ToString();
				html += new Txt( " <A href='?src=" ).Ref( this ).str( ";action=1;pulse=" ).item( colour ).str( "'>Pulse</A>" ).ToString();
				html += new Txt( " <A href='?src=" ).Ref( this ).str( ";action=1;attach=" ).item( colour ).str( "'>" ).item( ( this.IsAttached( colour ) ? "Detach" : "Attach" ) ).str( " Signaller</A></td></tr>" ).ToString();
			}
			html += "</table>";
			html += "</div>";
			return html;
		}

		// Function from file: wires.dm
		public dynamic GetWireName( dynamic i = null ) {
			return this.wire_names["" + i];
		}

		// Function from file: wires.dm
		public virtual bool Interact( dynamic user = null ) {
			string html = null;
			Browser popup = null;

			
			if ( !( user is Mob_Living ) ) {
				return false;
			}
			html = null;

			if ( this.holder != null && this.CanUse( user ) ) {
				html = this.GetInteractWindow();
			}

			if ( Lang13.Bool( html ) ) {
				((Mob)user).set_machine( this.holder );
			}
			popup = new Browser( user, "wires", this.holder.name, this.window_x, this.window_y );
			popup.set_content( html );
			//popup.set_title_image( ((Mob)user).browse_rsc_icon( this.holder.icon, this.holder.icon_state ) );
			popup.open();
			return false;
		}

		// Function from file: wires.dm
		public void GenerateWires(  ) {
			ByTable colours_to_pick = null;
			ByTable indexes_to_pick = null;
			int? i = null;
			dynamic colour = null;
			dynamic index = null;

			colours_to_pick = GlobalVars.wireColours.Copy();
			indexes_to_pick = new ByTable();
			i = null;
			i = 1;

			while (( i ??0) < 65535 && ( i ??0) < 1 << this.wire_count) {
				indexes_to_pick.Add( i );
				i += i ??0;
			}
			colours_to_pick.len = this.wire_count;

			while (colours_to_pick.len != 0 && indexes_to_pick.len != 0) {
				colour = GlobalFuncs.pick_n_take( colours_to_pick );
				index = GlobalFuncs.pick_n_take( indexes_to_pick );
				this.wires[colour] = index;
			}
			return;
		}

		// Function from file: wires.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.holder != null ) {
				this.holder = null;
			}
			return null;
		}

	}

}