// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_Occupations : Controller {

		public ByTable occupations = new ByTable();
		public dynamic unassigned = new ByTable();
		public ByTable job_debug = new ByTable();

		// Function from file: job_controller.dm
		public void HandleFeedbackGathering(  ) {
			Job job = null;
			string tmp_str = null;
			int level1 = 0;
			int level2 = 0;
			int level3 = 0;
			int level4 = 0;
			int level5 = 0;
			int level6 = 0;
			Mob_NewPlayer player = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.occupations, typeof(Job) )) {
				job = _b;
				
				tmp_str = "|" + job.title + "|";
				level1 = 0;
				level2 = 0;
				level3 = 0;
				level4 = 0;
				level5 = 0;
				level6 = 0;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
					player = _a;
					

					if ( !( player.ready && player.mind != null && !Lang13.Bool( player.mind.assigned_role ) ) ) {
						continue;
					}

					if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( player, job.title ) ) ) {
						level5++;
						continue;
					}

					if ( !job.player_old_enough( player.client ) ) {
						level6++;
						continue;
					}

					if ( Lang13.Bool( player.client.prefs.GetJobDepartment( job, 1 ) & job.flag ) ) {
						level1++;
					} else if ( Lang13.Bool( player.client.prefs.GetJobDepartment( job, 2 ) & job.flag ) ) {
						level2++;
					} else if ( Lang13.Bool( player.client.prefs.GetJobDepartment( job, 3 ) & job.flag ) ) {
						level3++;
					} else {
						level4++;
					}
				}
				tmp_str += "HIGH=" + level1 + "|MEDIUM=" + level2 + "|LOW=" + level3 + "|NEVER=" + level4 + "|BANNED=" + level5 + "|YOUNG=" + level6 + "|-";
				GlobalFuncs.feedback_add_details( "job_preferences", tmp_str );
			}
			return;
		}

		// Function from file: job_controller.dm
		public bool LoadJobs( string jobsfile = null ) {
			ByTable jobEntries = null;
			dynamic job = null;
			int pos = 0;
			string name = null;
			string value = null;
			Job J = null;

			
			if ( !GlobalVars.config.load_jobs_from_txt ) {
				return false;
			}
			jobEntries = GlobalFuncs.file2list( jobsfile );

			foreach (dynamic _a in Lang13.Enumerate( jobEntries )) {
				job = _a;
				

				if ( !Lang13.Bool( job ) ) {
					continue;
				}
				job = GlobalFuncs.trim( job );

				if ( !( Lang13.Length( job ) != 0 ) ) {
					continue;
				}
				pos = String13.FindIgnoreCase( job, "=", 1, 0 );
				name = null;
				value = null;

				if ( pos != 0 ) {
					name = String13.SubStr( job, 1, pos );
					value = String13.SubStr( job, pos + 1, 0 );
				} else {
					continue;
				}

				if ( Lang13.Bool( name ) && Lang13.Bool( value ) ) {
					J = this.GetJob( name );

					if ( !( J != null ) ) {
						continue;
					}
					J.total_positions = String13.ParseNumber( value );
					J.spawn_positions = String13.ParseNumber( value );

					if ( name == "AI" || name == "Cyborg" || name == "Mobile MMI" ) {
						J.total_positions = 0;
					}
				}
			}
			return true;
		}

		// Function from file: job_controller.dm
		public bool spawnId( dynamic H = null, dynamic rank = null, string title = null, int? wallet_funds = null ) {
			wallet_funds = wallet_funds ?? 0;

			dynamic C = null;
			Job job = null;
			Job J = null;
			dynamic pda = null;

			
			if ( !Lang13.Bool( H ) ) {
				return false;
			}
			C = null;
			job = null;

			foreach (dynamic _a in Lang13.Enumerate( this.occupations, typeof(Job) )) {
				J = _a;
				

				if ( J.title == rank ) {
					job = J;
					break;
				}
			}

			if ( job != null ) {
				
				if ( job.title == "Cyborg" || job.title == "Mobile MMI" ) {
					return false;
				} else {
					C = Lang13.Call( job.idtype, H );
					C.access = job.get_access();
				}
			} else {
				C = new Obj_Item_Weapon_Card_Id( H );
			}

			if ( Lang13.Bool( C ) ) {
				C.registered_name = H.real_name;
				C.rank = rank;
				C.assignment = ( Lang13.Bool( title ) ? ((dynamic)( title )) : rank );
				C.name = "" + C.registered_name + "'s ID Card (" + C.assignment + ")";

				if ( Lang13.Bool( H.mind ) && H.mind.initial_account != null ) {
					C.associated_account_number = H.mind.initial_account.account_number;
				}
				((Mob_Living_Carbon_Human)H).equip_or_collect( C, 7 );
				((Obj_Item_Weapon_Card_Id)C).update_virtual_wallet( wallet_funds );
			}
			((Mob_Living_Carbon_Human)H).equip_or_collect( Lang13.Call( job.pdatype, H ), job.pdaslot );

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Device_Pda), H ) ) ) {
				pda = Lang13.FindIn( typeof(Obj_Item_Device_Pda), H );
				pda.owner = H.real_name;
				pda.ownjob = C.assignment;
				pda.name = "PDA-" + H.real_name + " (" + pda.ownjob + ")";
			}
			((Mob)H).update_inv_belt();
			((Mob)H).update_inv_wear_id();
			return true;
		}

		// Function from file: job_controller.dm
		public bool EquipRank( dynamic H = null, dynamic rank = null, bool? joined_late = null ) {
			joined_late = joined_late ?? false;

			Job job = null;
			dynamic S = null;
			Obj_Effect_Landmark_Start sloc = null;
			int? balance_bank = null;
			int? balance_wallet = null;
			MoneyAccount M = null;
			string remembered_info = null;
			Transaction T = null;
			string remembered_info2 = null;
			MoneyAccount department_account = null;
			string alt_title = null;
			Obj_Item_Weapon_Storage_Backpack BPK = null;
			Obj_Item_Weapon_Storage_Backpack_SatchelNorm BPK2 = null;
			Obj_Item_Weapon_Storage_Backpack_Satchel BPK3 = null;
			bool equipped = false;
			dynamic G = null;
			dynamic left_leg = null;
			dynamic right_leg = null;
			Obj_Structure_Bed_Chair_Vehicle_Wheelchair W = null;

			
			if ( !Lang13.Bool( H ) ) {
				return false;
			}
			job = this.GetJob( rank );

			if ( job != null ) {
				job.equip( H );
			} else {
				GlobalFuncs.to_chat( H, "Your job is " + rank + " and the game just can't handle it! Please report this bug to an administrator." );
			}
			H.job = rank;

			if ( !( joined_late == true ) ) {
				S = null;

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark_Start) )) {
					sloc = _a;
					

					if ( sloc.name != rank ) {
						continue;
					}

					if ( Lang13.Bool( Lang13.FindIn( typeof(Mob_Living), sloc.loc ) ) ) {
						continue;
					}
					S = sloc;
					break;
				}

				if ( !Lang13.Bool( S ) ) {
					S = Lang13.FindObj( "start*" + rank );
				}

				if ( S is Obj_Effect_Landmark_Start && S.loc is Tile ) {
					H.loc = S.loc;
				}
			}
			balance_bank = Rand13.Int( 100, 250 );
			balance_wallet = Rand13.Int( 100, 250 );

			if ( GlobalVars.centcomm_account_db != null ) {
				M = GlobalFuncs.create_account( H.real_name, balance_bank, null );

				if ( Lang13.Bool( H.mind ) ) {
					remembered_info = "";
					remembered_info += "<b>Your account number is:</b> #" + M.account_number + "<br>";
					remembered_info += "<b>Your account pin is:</b> " + M.remote_access_pin + "<br>";
					remembered_info += "<b>Your bank account funds are:</b> $" + balance_bank + "<br>";
					remembered_info += "<b>Your virtual wallet funds are:</b> $" + balance_wallet + "<br>";

					if ( M.transaction_log.len != 0 ) {
						T = M.transaction_log[1];
						remembered_info += "<b>Your account was created:</b> " + T.time + ", " + T.date + " at " + T.source_terminal + "<br>";
					}
					H.mind.store_memory( remembered_info );
					H.mind.initial_account = M;
				}

				if ( Lang13.Bool( H.mind ) && job.head_position ) {
					remembered_info2 = "";
					department_account = GlobalVars.department_accounts[job.department];

					if ( department_account != null ) {
						remembered_info2 += "<b>Your department's account number is:</b> #" + department_account.account_number + "<br>";
						remembered_info2 += "<b>Your department's account pin is:</b> " + department_account.remote_access_pin + "<br>";
						remembered_info2 += "<b>Your department's account funds are:</b> $" + department_account.money + "<br>";
					}
					H.mind.store_memory( remembered_info2 );
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					GlobalFuncs.to_chat( H, "<span class='danger'>Your bank account number is: <span style='color: black;'>" + M.account_number + "</span>, your bank account pin is: <span style='color: black;'>" + M.remote_access_pin + "</span></span>" );
					GlobalFuncs.to_chat( H, "<span class='danger'>Your virtual wallet funds are: <span style='color: black;'>$" + balance_wallet + "</span>, your bank account funds are: <span style='color: black;'>$" + balance_bank + "</span></span>" );
					return;
				}));
			}
			alt_title = null;

			if ( Lang13.Bool( H.mind ) ) {
				H.mind.assigned_role = rank;
				alt_title = H.mind.role_alt_title;

				dynamic _c = rank; // Was a switch-case, sorry for the mess.
				if ( _c=="Cyborg" ) {
					Task13.Schedule( 20, (Task13.Closure)(() => {
						((Mob_Living_Carbon_Human)H).Robotize();
						return;
					}));
					return true;
				} else if ( _c=="Mobile MMI" ) {
					((Mob_Living_Carbon_Human)H).MoMMIfy( true );
					return true;
				} else if ( _c=="AI" || _c=="Clown" ) {
					
					if ( rank == "Clown" ) {
						H.species.equip( H );
					}
				} else {
					
					dynamic _b = H.backbag; // Was a switch-case, sorry for the mess.
					if ( _b==1 ) {
						
						if ( H.species.survival_gear != null ) {
							((Mob)H).equip_to_slot_or_del( Lang13.Call( H.species.survival_gear, H ), 5 );
						}
					} else if ( _b==2 ) {
						BPK = new Obj_Item_Weapon_Storage_Backpack( H );

						if ( H.species.survival_gear != null ) {
							Lang13.Call( H.species.survival_gear, BPK );
						}
						((Mob)H).equip_to_slot_or_del( BPK, 1 );
					} else if ( _b==3 ) {
						BPK2 = new Obj_Item_Weapon_Storage_Backpack_SatchelNorm( H );

						if ( H.species.survival_gear != null ) {
							Lang13.Call( H.species.survival_gear, BPK2 );
						}
						((Mob)H).equip_to_slot_or_del( BPK2, 1 );
					} else if ( _b==4 ) {
						BPK3 = new Obj_Item_Weapon_Storage_Backpack_Satchel( H );

						if ( H.species.survival_gear != null ) {
							Lang13.Call( H.species.survival_gear, BPK3 );
						}
						((Mob)H).equip_to_slot_or_del( BPK3, 1 );
					}
					H.species.equip( H );
				}
			}
			GlobalFuncs.to_chat( H, "<B>You are the " + ( Lang13.Bool( alt_title ) ? ((dynamic)( alt_title )) : rank ) + ".</B>" );
			GlobalFuncs.to_chat( H, "<b>As the " + ( Lang13.Bool( alt_title ) ? ((dynamic)( alt_title )) : rank ) + " you answer directly to " + job.supervisors + ". Special circumstances may change this.</b>" );

			if ( job.req_admin_notify != 0 ) {
				GlobalFuncs.to_chat( H, "<b>You are playing a job that is important for Game Progression. If you have to disconnect, please notify the admins via adminhelp.</b>" );
			}
			this.spawnId( H, rank, alt_title, balance_wallet );
			((Mob)H).equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset(  ), 8 );

			if ( Lang13.Bool( H.disabilities & 1 ) ) {
				equipped = ((Mob)H).equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Regular( H ), 9 );

				if ( !equipped ) {
					G = H.glasses;
					G.prescription = true;
				}
			}
			left_leg = ((Mob_Living_Carbon_Human)H).get_organ( "l_foot" );
			right_leg = ((Mob_Living_Carbon_Human)H).get_organ( "r_foot" );

			if ( !( joined_late == true ) ) {
				
				if ( ( !Lang13.Bool( left_leg ) || Lang13.Bool( left_leg.status & 64 ) ) && ( !Lang13.Bool( right_leg ) || Lang13.Bool( right_leg.status & 64 ) ) ) {
					W = new Obj_Structure_Bed_Chair_Vehicle_Wheelchair( H.loc );
					W.buckle_mob( H, H );
				}
			}
			return true;
		}

		// Function from file: job_controller.dm
		public bool DivideOccupations(  ) {
			Job_Ai A = null;
			Mob_NewPlayer player = null;
			dynamic shuffledoccupations = null;
			double level = 0;
			Mob_NewPlayer player2 = null;
			Job job = null;
			double count = 0;
			Job officer = null;
			Job warden = null;
			Job hos = null;
			Job_Assistant assist = null;
			Job master_assistant = null;
			dynamic assistant_candidates = null;
			Mob_NewPlayer player3 = null;
			Mob_NewPlayer player4 = null;
			Mob_NewPlayer player5 = null;
			Mob_NewPlayer player6 = null;

			this.Debug( "Running DO" );
			this.SetupOccupations();

			if ( GlobalVars.ticker != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.occupations, typeof(Job_Ai) )) {
					A = _a;
					

					if ( GlobalVars.ticker.triai ) {
						A.spawn_positions = 3;
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				player = _b;
				

				if ( player.ready && player.mind != null && !Lang13.Bool( player.mind.assigned_role ) ) {
					this.unassigned += player;

					if ( Lang13.Bool( player.client.prefs.randomslot ) ) {
						player.client.prefs.random_character_sqlite( player, player.ckey );
					}
				}
			}
			this.Debug( "DO, Len: " + this.unassigned.len );

			if ( this.unassigned.len == 0 ) {
				return false;
			}
			this.unassigned = GlobalFuncs.shuffle( this.unassigned );
			this.HandleFeedbackGathering();
			this.Debug( "DO, Running Head Check" );
			this.FillHeadPosition();
			this.Debug( "DO, Head Check end" );
			this.Debug( "DO, Running AI Check" );
			this.FillAIPosition();
			this.Debug( "DO, AI Check end" );
			this.Debug( "DO, Running Standard Check" );
			shuffledoccupations = GlobalFuncs.shuffle( this.occupations );

			foreach (dynamic _e in Lang13.IterateRange( 1, 3 )) {
				level = _e;
				
				this.CheckHeadPositions( level );

				foreach (dynamic _d in Lang13.Enumerate( this.unassigned, typeof(Mob_NewPlayer) )) {
					player2 = _d;
					

					foreach (dynamic _c in Lang13.Enumerate( shuffledoccupations, typeof(Job) )) {
						job = _c;
						

						if ( !( job != null ) ) {
							continue;
						}

						if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( player2, job.title ) ) ) {
							this.Debug( "DO isbanned failed, Player: " + player2 + ", Job:" + job.title );
							continue;
						}

						if ( !job.player_old_enough( player2.client ) ) {
							this.Debug( "DO player not old enough, Player: " + player2 + ", Job:" + job.title );
							continue;
						}

						if ( Lang13.Bool( player2.client.prefs.GetJobDepartment( job, level ) & job.flag ) ) {
							
							if ( ( job.current_positions ??0) < ( job.spawn_positions ??0) || job.spawn_positions == -1 ) {
								this.Debug( "DO pass, Player: " + player2 + ", Level:" + level + ", Job:" + job.title );
								this.AssignRole( player2, job.title );
								this.unassigned -= player2;
								break;
							}
						}
					}
				}
			}
			count = 0;
			officer = GlobalVars.job_master.GetJob( "Security Officer" );
			warden = GlobalVars.job_master.GetJob( "Warden" );
			hos = GlobalVars.job_master.GetJob( "Head of Security" );
			count = ( officer.current_positions ??0) + ( warden.current_positions ??0) + ( hos.current_positions ??0);
			this.Debug( "DO, Running Assistant Check 1" );
			assist = new Job_Assistant();
			master_assistant = this.GetJob( "Assistant" );
			assistant_candidates = this.FindOccupationCandidates( assist, 3 );
			assistant_candidates = GlobalFuncs.shuffle( assistant_candidates );
			this.Debug( "AC1, Candidates: " + assistant_candidates.len );

			foreach (dynamic _f in Lang13.Enumerate( assistant_candidates, typeof(Mob_NewPlayer) )) {
				player3 = _f;
				
				this.Debug( "AC1 pass, Player: " + player3 );

				if ( GlobalVars.config.assistantlimit ) {
					
					if ( ( master_assistant.current_positions ??0) > ( GlobalVars.config.assistantratio ??0) * count ) {
						
						if ( count < 5 ) {
							break;
						}
					}
				}
				this.AssignRole( player3, "Assistant" );
				assistant_candidates -= player3;
			}
			this.unassigned |= assistant_candidates;
			this.Debug( "DO, AC1 end" );

			foreach (dynamic _g in Lang13.Enumerate( this.unassigned, typeof(Mob_NewPlayer) )) {
				player4 = _g;
				

				if ( player4.client.prefs.alternate_option == 0 ) {
					this.GiveRandomJob( player4 );
				}
			}
			this.Debug( "DO, Standard Check end" );
			this.Debug( "DO, Running AC2" );

			foreach (dynamic _h in Lang13.Enumerate( this.unassigned, typeof(Mob_NewPlayer) )) {
				player5 = _h;
				

				if ( player5.client.prefs.alternate_option == 1 ) {
					
					if ( GlobalVars.config.assistantlimit ) {
						count = ( officer.current_positions ??0) + ( warden.current_positions ??0) + ( hos.current_positions ??0);

						if ( ( master_assistant.current_positions ??0) > ( GlobalVars.config.assistantratio ??0) * count ) {
							
							if ( count < 5 ) {
								player5.ready = false;
								this.unassigned -= player5;
								continue;
							}
						}
					}
					this.Debug( "AC2 Assistant located, Player: " + player5 );
					this.AssignRole( player5, "Assistant" );
				}
			}

			foreach (dynamic _i in Lang13.Enumerate( this.unassigned, typeof(Mob_NewPlayer) )) {
				player6 = _i;
				

				if ( player6.client.prefs.alternate_option == 2 ) {
					GlobalFuncs.to_chat( player6, "<span class='danger'>You have not been placed in the game due to job related restrictions." );
					player6.ready = false;
					this.unassigned -= player6;
				}
			}
			return true;
		}

		// Function from file: job_controller.dm
		public bool FillAIPosition(  ) {
			int ai_selected = 0;
			Job job = null;
			double? i = null;
			double level = 0;
			ByTable candidates = null;
			dynamic candidate = null;
			Mob_NewPlayer player = null;

			ai_selected = 0;
			job = this.GetJob( "AI" );

			if ( !( job != null ) ) {
				return false;
			}

			if ( job.title == "AI" && GlobalVars.config != null && !GlobalVars.config.allow_ai ) {
				return false;
			}
			i = null;
			i = job.total_positions;

			while (( i ??0) > 0) {
				
				foreach (dynamic _a in Lang13.IterateRange( 1, 3 )) {
					level = _a;
					
					candidates = new ByTable();

					if ( GlobalVars.ticker.mode.name == "AI malfunction" ) {
						candidates = this.FindOccupationCandidates( job, level, "malf AI" );
					} else {
						candidates = this.FindOccupationCandidates( job, level );
					}

					if ( candidates.len != 0 ) {
						candidate = Rand13.PickFromTable( candidates );

						if ( this.AssignRole( candidate, "AI" ) ) {
							ai_selected++;
							break;
						}
					}
				}

				if ( GlobalVars.ticker.mode.name == "AI malfunction" && !( ai_selected != 0 ) ) {
					this.unassigned = GlobalFuncs.shuffle( this.unassigned );

					foreach (dynamic _b in Lang13.Enumerate( this.unassigned, typeof(Mob_NewPlayer) )) {
						player = _b;
						

						if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( player, "AI" ) ) ) {
							continue;
						}

						if ( this.AssignRole( player, "AI" ) ) {
							ai_selected++;
							break;
						}
					}
				}

				if ( ai_selected != 0 ) {
					return true;
				}
				return false;
				i--;
			}
			return false;
		}

		// Function from file: job_controller.dm
		public void CheckHeadPositions( double level = 0 ) {
			dynamic command_position = null;
			Job job = null;
			ByTable candidates = null;
			dynamic candidate = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.command_positions )) {
				command_position = _a;
				
				job = this.GetJob( command_position );

				if ( !( job != null ) ) {
					continue;
				}
				candidates = this.FindOccupationCandidates( job, level );

				if ( !( candidates.len != 0 ) ) {
					continue;
				}
				candidate = Rand13.PickFromTable( candidates );
				this.AssignRole( candidate, command_position );
			}
			return;
		}

		// Function from file: job_controller.dm
		public bool FillHeadPosition(  ) {
			double level = 0;
			dynamic command_position = null;
			Job job = null;
			ByTable candidates = null;
			dynamic candidate = null;

			
			foreach (dynamic _b in Lang13.IterateRange( 1, 3 )) {
				level = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.command_positions )) {
					command_position = _a;
					
					job = this.GetJob( command_position );

					if ( !( job != null ) ) {
						continue;
					}
					candidates = this.FindOccupationCandidates( job, level );

					if ( !( candidates.len != 0 ) ) {
						continue;
					}
					candidate = Rand13.PickFromTable( candidates );

					if ( this.AssignRole( candidate, command_position ) ) {
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: job_controller.dm
		public void ResetOccupations(  ) {
			Mob_NewPlayer player = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
				player = _a;
				

				if ( player != null && player.mind != null ) {
					player.mind.assigned_role = null;
					player.mind.special_role = null;
				}
			}
			this.SetupOccupations();
			this.unassigned = new ByTable();
			return;
		}

		// Function from file: job_controller.dm
		public void GiveRandomJob( Mob_NewPlayer player = null ) {
			Job job = null;

			this.Debug( "GRJ Giving random job, Player: " + player );

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.shuffle( this.occupations ), typeof(Job) )) {
				job = _a;
				

				if ( !( job != null ) ) {
					continue;
				}

				if ( Lang13.Bool( ((dynamic)this.GetJob( "Assistant" )).IsInstanceOfType( job ) ) ) {
					continue;
				}

				if ( GlobalVars.command_positions.Contains( job ) ) {
					continue;
				}

				if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( player, job.title ) ) ) {
					this.Debug( "GRJ isbanned failed, Player: " + player + ", Job: " + job.title );
					continue;
				}

				if ( !job.player_old_enough( player.client ) ) {
					this.Debug( "GRJ player not old enough, Player: " + player );
					continue;
				}

				if ( ( job.current_positions ??0) < ( job.spawn_positions ??0) || job.spawn_positions == -1 ) {
					this.Debug( "GRJ Random job given, Player: " + player + ", Job: " + job );
					this.AssignRole( player, job.title );
					this.unassigned -= player;
					break;
				}
			}
			return;
		}

		// Function from file: job_controller.dm
		public ByTable FindOccupationCandidates( Job job = null, double level = 0, string flag = null ) {
			ByTable candidates = null;
			Mob_NewPlayer player = null;

			this.Debug( "Running FOC, Job: " + job + ", Level: " + level + ", Flag: " + flag );
			candidates = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.unassigned, typeof(Mob_NewPlayer) )) {
				player = _a;
				

				if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( player, job.title ) ) ) {
					this.Debug( "FOC isbanned failed, Player: " + player );
					continue;
				}

				if ( !job.player_old_enough( player.client ) ) {
					this.Debug( "FOC player not old enough, Player: " + player );
					continue;
				}

				if ( Lang13.Bool( flag ) && !Lang13.Bool( player.client.desires_role( job.title ) ) ) {
					this.Debug( "FOC flag failed, Player: " + player + ", Flag: " + flag + ", " );
					continue;
				}

				if ( Lang13.Bool( player.client.prefs.GetJobDepartment( job, level ) & job.flag ) ) {
					this.Debug( "FOC pass, Player: " + player + ", Level:" + level );
					candidates.Add( player );
				}
			}
			return candidates;
		}

		// Function from file: job_controller.dm
		public bool FreeRole( dynamic rank = null ) {
			Job job = null;

			job = this.GetJob( rank );

			if ( job != null && ( job.current_positions ??0) >= ( job.total_positions ??0) ) {
				job.total_positions++;
				return true;
			}
			return false;
		}

		// Function from file: job_controller.dm
		public bool AssignRole( dynamic player = null, dynamic rank = null, bool? latejoin = null ) {
			latejoin = latejoin ?? false;

			Job job = null;
			double? position_limit = null;

			this.Debug( "Running AR, Player: " + player + ", Rank: " + rank + ", LJ: " + latejoin );

			if ( Lang13.Bool( player ) && Lang13.Bool( player.mind ) && Lang13.Bool( rank ) ) {
				job = this.GetJob( rank );

				if ( !( job != null ) ) {
					return false;
				}

				if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( player, rank ) ) ) {
					return false;
				}

				if ( !job.player_old_enough( player.client ) ) {
					return false;
				}
				position_limit = job.total_positions;

				if ( !( latejoin == true ) ) {
					position_limit = job.spawn_positions;
				}

				if ( ( job.current_positions ??0) < ( position_limit ??0) || position_limit == -1 ) {
					this.Debug( "Player: " + player + " is now Rank: " + rank + ", JCP:" + job.current_positions + ", JPL:" + position_limit );
					player.mind.assigned_role = rank;
					player.mind.role_alt_title = this.GetPlayerAltTitle( player, rank );
					this.unassigned -= player;
					job.current_positions++;
					return true;
				}
			}
			this.Debug( "AR has failed, Player: " + player + ", Rank: " + rank );
			return false;
		}

		// Function from file: job_controller.dm
		public dynamic GetPlayerAltTitle( dynamic player = null, dynamic rank = null ) {
			return player.client.prefs.GetPlayerAltTitle( this.GetJob( rank ) );
		}

		// Function from file: job_controller.dm
		public Job GetJob( dynamic rank = null ) {
			Job J = null;

			
			if ( !Lang13.Bool( rank ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.occupations, typeof(Job) )) {
				J = _a;
				

				if ( !( J != null ) ) {
					continue;
				}

				if ( J.title == rank ) {
					return J;
				}
			}
			return null;
		}

		// Function from file: job_controller.dm
		public bool Debug( string text = null ) {
			
			if ( !GlobalVars.Debug2 ) {
				return false;
			}
			this.job_debug.Add( text );
			return true;
		}

		// Function from file: job_controller.dm
		public bool SetupOccupations( string faction = null ) {
			faction = faction ?? "Station";

			dynamic all_jobs = null;
			dynamic J = null;
			dynamic job = null;

			this.occupations = new ByTable();
			all_jobs = Lang13.GetTypes( typeof(Job) );

			if ( !( all_jobs.len != 0 ) ) {
				GlobalFuncs.to_chat( typeof(Game13), "<span class='danger'>Error setting up jobs, no job datums found</span>" );
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( all_jobs )) {
				J = _a;
				
				job = Lang13.Call( J );

				if ( !Lang13.Bool( job ) ) {
					continue;
				}

				if ( job.faction != faction ) {
					continue;
				}
				this.occupations.Add( job );
			}
			return true;
		}

	}

}