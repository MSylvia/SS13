// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class RcdSchematic_PaintPipes : RcdSchematic {

		public bool mass_colour = false;
		public ByTable available_colors = new ByTable()
											.Set( "grey", "#B4B4B4" )
											.Set( "red", "#B70000" )
											.Set( "blue", "#0000B7" )
											.Set( "cyan", "#00B8B8" )
											.Set( "green", "#00B900" )
											.Set( "orange", "#B77900" )
											.Set( "purple", "#800080" )
											.Set( "custom", "custom" )
										;
		public int last_colouration = 0;
		public dynamic selected_color = "grey";
		public double colouring_delay = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Paint pipes";
			this.category = "Utilities";
			this.flags = 4;
		}

		// Function from file: pipe.dm
		public RcdSchematic_PaintPipes ( dynamic n_master = null ) : base( (object)(n_master) ) {
			dynamic color_css = null;
			dynamic color_name = null;
			string color = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !( this.master != null ) || !( this.master.v_interface != null ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.available_colors )) {
				color_name = _a;
				
				color = this.available_colors[color_name];

				if ( color == "custom" ) {
					color = "#000000";
				}
				color_css += "\n			a.color." + color_name + " {\n				color: " + color + ";\n			}\n			a.color." + color_name + ":hover {\n				border:1px solid " + color + ";\n			}\n			a.color." + color_name + ".selected {\n				background-color: " + color + ";\n			}\n		";
			}
			this.master.v_interface.head += "<style type='text/css'>" + color_css + "</style><br><";
			return;
		}

		// Function from file: pipe.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( href_list["set_color"] ) ) {
				Interface13.Stat( null, this.available_colors.Contains( href_list["set_color"] ) );

				if ( false ) {
					this.selected_color = href_list["set_color"];
					this.master.update_options_menu();
				}
			}

			if ( Lang13.Bool( href_list["set_mass_colour"] ) ) {
				this.mass_colour = ( this.mass_colour ? false : true );
				this.master.update_options_menu();
			}
			return 1;
		}

		// Function from file: pipe.dm
		public override dynamic attack( dynamic A = null, dynamic user = null ) {
			dynamic O = null;
			dynamic pipe_to_colour = null;
			dynamic pipe_line = null;
			ByTable pipeline_members = null;

			
			if ( !( A is Obj_Machinery_Atmospherics ) ) {
				return 1;
			}
			O = A;
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this.master ), "sound/machines/click.ogg", 50, 1 );
			Interface13.Stat( null, this.available_colors.Contains( this.selected_color ) );

			if ( !( A is Obj_Machinery_Atmospherics ) ) {
				this.selected_color = this.available_colors[this.selected_color];
			}

			if ( this.mass_colour && Game13.timeofday < this.last_colouration + this.colouring_delay ) {
				return "We aren't ready to mass paint again; please wait " + ( this.last_colouration + this.colouring_delay - Game13.timeofday ) + " more seconds!";
			}

			if ( this.mass_colour && O is Obj_Machinery_Atmospherics_Pipe ) {
				pipe_to_colour = O;
				pipe_line = pipe_to_colour.parent;
				pipeline_members = pipe_line.members;

				if ( pipeline_members.len < 500 ) {
					this.last_colouration = Game13.timeofday;
					this.colouring_delay = pipeline_members.len / 2;
					O.color = this.selected_color;
					((Obj_Machinery_Atmospherics_Pipe)pipe_to_colour).mass_colouration( this.selected_color );
				} else {
					return "That pipe network is simply too big to paint!";
				}
			} else {
				O.color = this.selected_color;
				O.update_icon();
			}
			((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " paints " ).the( O ).item().str( " " ).item( this.selected_color ).str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You paint " ).the( O ).item().str( " " ).item( this.selected_color ).str( ".</span>" ).ToString() );
			return null;
		}

		// Function from file: pipe.dm
		public override dynamic get_HTML( dynamic D = null ) {
			dynamic _default = null;

			dynamic color_name = null;
			string selected = null;
			string mass_colour_on = null;

			_default += "<h4>Colour Choice:</h4>";

			foreach (dynamic _a in Lang13.Enumerate( this.available_colors )) {
				color_name = _a;
				
				selected = "";

				if ( color_name == this.selected_color ) {
					selected = " selected";
				}

				if ( this.selected_color == "custom" ) {
					this.selected_color = Interface13.Input( "Select Colour to change the pipe to", "Custom Pipe Colour", this.selected_color, null, null, InputType.Color );
				}

				if ( this.selected_color == "#ffffff" ) {
					this.selected_color = "#fffffe";
				}
				_default += new Txt( "<a class='color " ).item( color_name ).item( selected ).str( "' href='?src=" ).Ref( this.master.v_interface ).str( ";set_color=" ).item( color_name ).str( "'>&bull;</a>" ).ToString();
			}
			mass_colour_on = ( this.mass_colour ? "On" : "Off" );
			_default += new Txt( " <br>\n			<h4>Mass Colour:</h4>\n			Mass Colouration: <b><A href='?src=" ).Ref( this.master.v_interface ).str( ";set_mass_colour=1'>" ).item( mass_colour_on ).str( "</a></b>" ).ToString();
			return _default;
		}

		// Function from file: pipe.dm
		public override bool deselect( Mob user = null, RcdSchematic new_schematic = null ) {
			bool _default = false;

			_default = base.deselect( user, new_schematic );
			this.selected_color = this.available_colors[1];
			return _default;
		}

	}

}