// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Wires_Camera : Wires {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.holder_type = typeof(Obj_Machinery_Camera);
			this.wire_count = 6;
		}

		public Wires_Camera ( Obj holder = null ) : base( holder ) {
			
		}

		// Function from file: camera.dm
		public bool CanDeconstruct(  ) {
			
			if ( this.IsIndexCut( GlobalVars.CAMERA_WIRE_POWER ) != 0 && this.IsIndexCut( GlobalVars.CAMERA_WIRE_FOCUS ) != 0 && this.IsIndexCut( GlobalVars.CAMERA_WIRE_LIGHT ) != 0 && this.IsIndexCut( GlobalVars.CAMERA_WIRE_NOTHING1 ) != 0 && this.IsIndexCut( GlobalVars.CAMERA_WIRE_NOTHING2 ) != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: camera.dm
		public override void UpdatePulsed( double? index = null ) {
			Ent_Static C = null;
			dynamic new_range = null;

			C = this.holder;

			if ( this.IsIndexCut( index ) != 0 ) {
				return;
			}

			switch ((int?)(index)) {
				case 1:
					new_range = ( ((dynamic)C).view_range == Lang13.Initial( C, "view_range" ) ? ((dynamic)C).short_range : Lang13.Initial( C, "view_range" ) );
					((dynamic)C).setViewRange( new_range );
					break;
				case 2:
					((dynamic)C).deactivate( null );
					break;
				case 4:
					((dynamic)C).light_disabled = !Lang13.Bool( ((dynamic)C).light_disabled );
					break;
				case 8:
					C.visible_message( new Txt().icon( C ).str( " *beep*" ).ToString(), new Txt().icon( C ).str( " *beep*" ).ToString() );
					break;
			}
			return;
		}

		// Function from file: camera.dm
		public override void UpdateCut( double? index = null, bool mended = false ) {
			Ent_Static C = null;
			dynamic range = null;

			C = this.holder;

			switch ((int?)(index)) {
				case 1:
					range = ( mended ? Lang13.Initial( C, "view_range" ) : ((dynamic)C).short_range );
					((dynamic)C).setViewRange( range );
					break;
				case 2:
					
					if ( Lang13.Bool( ((dynamic)C).status ) && !mended || !Lang13.Bool( ((dynamic)C).status ) && mended ) {
						((dynamic)C).deactivate( Task13.User, 1 );
					}
					break;
				case 4:
					((dynamic)C).light_disabled = !mended;
					break;
				case 8:
					
					if ( !mended ) {
						((dynamic)C).triggerCameraAlarm();
					} else {
						((dynamic)C).cancelCameraAlarm();
					}
					break;
			}
			return;
		}

		// Function from file: camera.dm
		public override bool CanUse( dynamic L = null ) {
			Ent_Static C = null;

			C = this.holder;

			if ( !Lang13.Bool( ((dynamic)C).panel_open ) ) {
				return false;
			}
			return true;
		}

		// Function from file: camera.dm
		public override string GetInteractWindow(  ) {
			string _default = null;

			Ent_Static C = null;

			_default = base.GetInteractWindow();
			C = this.holder;
			_default += "<br>\n" + ( ((dynamic)C).view_range == Lang13.Initial( C, "view_range" ) ? "The focus light is on." : "The focus light is off." );
			_default += "<br>\n" + ( Lang13.Bool( ((dynamic)C).can_use() ) ? "The power link light is on." : "The power link light is off." );
			_default += "<br>\n" + ( Lang13.Bool( ((dynamic)C).light_disabled ) ? "The camera light is off." : "The camera light is on." );
			_default += "<br>\n" + ( Lang13.Bool( ((dynamic)C).alarm_on ) ? "The alarm light is on." : "The alarm light is off." );
			return _default;
		}

	}

}