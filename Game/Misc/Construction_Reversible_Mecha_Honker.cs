// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Construction_Reversible_Mecha_Honker : Construction_Reversible_Mecha {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.base_icon = "honker";
			this.result = "/obj/mecha/combat/honker";
			this.steps = new ByTable(new object [] { 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ).Set( "vis_msg", "{USER} adds the bike horn to {HOLDER}" ).Set( "amount", 1 ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Crowbar) ).Set( "vis_msg", "{USER} remove{s} the clown boots from {HOLDER}." ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Clothing_Shoes_ClownShoes) ).Set( "amount", 1 ).Set( "vis_msg", "{USER} put{s} clown boots on {HOLDER}." ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Crowbar) ).Set( "vis_msg", "{USER} remove{s} the clown wig and mask from {HOLDER}." ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Clothing_Mask_Gas_ClownHat) ).Set( "amount", 1 ).Set( "vis_msg", "{USER} put{s} clown wig and mask on {HOLDER}." ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Crowbar) ).Set( "vis_msg", "{USER} uninstall{s} the weapon control module." ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Circuitboard_Mecha_Honker_Targeting) ).Set( "amount", 1 ).Set( "vis_msg", "{USER} install{s} the weapon control module into {HOLDER}." ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Crowbar) ).Set( "vis_msg", "{USER} uninstall{s} the peripherals control module." ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Circuitboard_Mecha_Honker_Peripherals) ).Set( "amount", 1 ).Set( "vis_msg", "{USER} install{s} the peripherals control module into {HOLDER}." ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Crowbar) ).Set( "vis_msg", "{USER} uninstall{s} the central control module." ) )
				, 
				new ByTable()
					.Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Circuitboard_Mecha_Honker_Main) ).Set( "amount", 1 ).Set( "vis_msg", "{USER} install{s} the central control module into {HOLDER}." ) )
					.Set( "backstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
				, 
				new ByTable().Set( "nextstep", new ByTable().Set( "key", typeof(Obj_Item_Weapon_Bikehorn) ) )
			 });
		}

		public Construction_Reversible_Mecha_Honker ( Ent_Static atom = null ) : base( atom ) {
			
		}

		// Function from file: mecha_construction_paths.dm
		public override void add_board_keys(  ) {
			return;
		}

		// Function from file: mecha_construction_paths.dm
		public override bool custom_action( dynamic index = null, dynamic diff = null, dynamic used_atom = null, dynamic user = null ) {
			
			if ( !base.custom_action( (object)(index), (object)(diff), (object)(used_atom), (object)(user) ) ) {
				return false;
			}

			if ( used_atom is Obj_Item_Weapon_Bikehorn ) {
				GlobalFuncs.playsound( this.holder, "sound/items/bikehorn.ogg", 50, 1 );
				((Ent_Static)user).visible_message( "HONK!" );
			}
			this.holder.icon_state = "honker_chassis";
			return true;
		}

		// Function from file: mecha_construction_paths.dm
		public override void set_desc( double? index = null ) {
			return;
		}

	}

}