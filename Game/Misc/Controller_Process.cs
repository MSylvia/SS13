// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_Process : Controller {

		public Controller_ProcessScheduler main = null;
		public bool idle = true;
		public bool queued = false;
		public bool running = false;
		public bool hung = false;
		public bool? killed = false;
		public dynamic status = null;
		public dynamic previousStatus = null;
		public bool disabled = false;
		public string name = null;
		public int schedule_interval = 50;
		public double sleep_interval = 0;
		public double hang_warning_time = 300;
		public double hang_alert_time = 600;
		public double hang_restart_time = 900;
		public int cpu_threshold = 90;
		public int cpu_defer_count = 0;
		public double? last_slept = 0;
		public double? run_start = 0;
		public dynamic times_killed = null;
		public int ticks = 0;
		public dynamic last_task = "";
		public dynamic last_object = null;

		// Function from file: process.dm
		public Controller_Process ( dynamic scheduler = null ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.main = scheduler;
			this.previousStatus = "idle";
			this.f_idle();
			this.name = "process";
			this.sleep_interval = Game13.tick_lag / 8;
			this.last_slept = 0;
			this.run_start = 0;
			this.ticks = 0;
			this.last_task = 0;
			this.last_object = null;
			return;
		}

		// Function from file: process.dm
		public int getTicks(  ) {
			return this.ticks;
		}

		// Function from file: process.dm
		public dynamic getLastRunTime(  ) {
			return this.main.getProcessLastRunTime( this );
		}

		// Function from file: process.dm
		public void enable(  ) {
			this.disabled = false;
			return;
		}

		// Function from file: process.dm
		public void disable(  ) {
			this.disabled = true;
			return;
		}

		// Function from file: process.dm
		public virtual void onFinish(  ) {
			return;
		}

		// Function from file: process.dm
		public void onStart(  ) {
			return;
		}

		// Function from file: process.dm
		public void onKill(  ) {
			return;
		}

		// Function from file: process.dm
		public void copyStateFrom( Base_Data target = null ) {
			return;
		}

		// Function from file: process.dm
		public void _copyStateFrom( Base_Data target = null ) {
			this.main = ((dynamic)target).main;
			this.name = ((dynamic)target).name;
			this.schedule_interval = Convert.ToInt32( ((dynamic)target).schedule_interval );
			this.sleep_interval = Convert.ToDouble( ((dynamic)target).sleep_interval );
			this.last_slept = 0;
			this.run_start = 0;
			this.times_killed = ((dynamic)target).times_killed;
			this.ticks = Convert.ToInt32( ((dynamic)target).ticks );
			this.last_task = ((dynamic)target).last_task;
			this.last_object = ((dynamic)target).last_object;
			this.copyStateFrom( target );
			return;
		}

		// Function from file: process.dm
		public void setLastTask( dynamic task = null, dynamic _object = null ) {
			this.last_task = task;
			this.last_object = _object;
			return;
		}

		// Function from file: process.dm
		public void setStatus( dynamic newStatus = null ) {
			this.previousStatus = this.status;
			this.status = newStatus;
			return;
		}

		// Function from file: process.dm
		public string getPreviousStatusText(  ) {
			return this.getStatusText( this.previousStatus );
		}

		// Function from file: process.dm
		public dynamic getPreviousStatus(  ) {
			return this.previousStatus;
		}

		// Function from file: process.dm
		public string getStatusText( dynamic s = null ) {
			s = s ?? 0;

			
			if ( !Lang13.Bool( s ) ) {
				s = this.status;
			}

			dynamic _a = s; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return "idle";
			} else if ( _a==2 ) {
				return "queued";
			} else if ( _a==3 ) {
				return "running";
			} else if ( _a==4 ) {
				return "maybe hung";
			} else if ( _a==5 ) {
				return "probably hung";
			} else if ( _a==6 ) {
				return "HUNG";
			} else {
				return "UNKNOWN";
			}
			return null;
		}

		// Function from file: process.dm
		public dynamic getStatus(  ) {
			return this.status;
		}

		// Function from file: process.dm
		public ByTable getContextData(  ) {
			return new ByTable()
				.Set( "name", this.name )
				.Set( "averageRunTime", this.main.averageRunTime( this ) )
				.Set( "lastRunTime", this.main.last_run_time[this] )
				.Set( "highestRunTime", this.main.highest_run_time[this] )
				.Set( "ticks", this.ticks )
				.Set( "schedule", this.schedule_interval )
				.Set( "status", this.getStatusText() )
				.Set( "disabled", this.disabled )
			;
		}

		// Function from file: process.dm
		public string getContext(  ) {
			return "<tr><td>" + this.name + "</td><td>" + this.main.averageRunTime( this ) + "</td><td>" + this.main.last_run_time[this] + "</td><td>" + this.main.highest_run_time[this] + "</td><td>" + this.ticks + "</td></tr>\n";
		}

		// Function from file: process.dm
		public void tickDetail(  ) {
			return;
		}

		// Function from file: process.dm
		public double getElapsedTime(  ) {
			
			if ( ( GlobalFuncs.__btime__timeofhour() ??0) < ( this.run_start ??0) ) {
				return ( GlobalFuncs.__btime__timeofhour() ??0) - ( ( this.run_start ??0) - 36000 );
			}
			return ( GlobalFuncs.__btime__timeofhour() ??0) - ( this.run_start ??0);
		}

		// Function from file: process.dm
		public void update(  ) {
			double elapsedTime = 0;

			
			if ( this.previousStatus != this.status ) {
				this.setStatus( this.status );
			}
			elapsedTime = this.getElapsedTime();

			if ( this.hung ) {
				this.handleHung();
				return;
			} else if ( elapsedTime > this.hang_restart_time ) {
				this.f_hung();
			} else if ( elapsedTime > this.hang_alert_time ) {
				this.setStatus( 5 );
			} else if ( elapsedTime > this.hang_warning_time ) {
				this.setStatus( 4 );
			}
			return;
		}

		// Function from file: process.dm
		public void scheck( bool? tickId = null ) {
			tickId = tickId ?? false;

			
			if ( this.killed == true ) {
				Task13.Crash( "A killed process is still running somehow..." );
			}

			if ( this.hung ) {
				this.handleHung();
				Task13.Crash( "Process " + this.name + " hung and was restarted." );
			}

			if ( this.main.getCurrentTickElapsedTime() > this.main.timeAllowance ) {
				Task13.Sleep( ((int)( Game13.tick_lag )) );
				this.cpu_defer_count++;
				this.last_slept = GlobalFuncs.__btime__timeofhour();
			} else {
				
				if ( ( GlobalFuncs.__btime__timeofhour() ??0) < ( this.last_slept ??0) ) {
					this.last_slept -= 36000;
				}

				if ( ( GlobalFuncs.__btime__timeofhour() ??0) > ( this.last_slept ??0) + this.sleep_interval ) {
					Task13.Sleep( 0 );
					this.last_slept = GlobalFuncs.__btime__timeofhour();
				}
			}
			return;
		}

		// Function from file: process.dm
		public void kill(  ) {
			string msg = null;

			
			if ( !( this.killed == true ) ) {
				msg = "" + this.name + " process was killed at tick #" + this.ticks + ".";
				GlobalFuncs.logTheThing( "debug", null, null, msg );
				GlobalFuncs.logTheThing( "diary", null, null, msg, "debug" );
				this.onKill();
				this.killed = GlobalVars.TRUE;
				Lang13.Delete( this );
				Task13.Source = null;
				return;
			}
			return;
		}

		// Function from file: process.dm
		public void handleHung(  ) {
			Base_Data lastObj = null;
			dynamic lastObjType = null;
			string msg = null;

			lastObj = this.last_object;
			lastObjType = "null";

			if ( lastObj is Game_Data ) {
				lastObjType = lastObj.type;
			}

			if ( ( GlobalFuncs.__btime__timeofhour() ??0) < ( this.run_start ??0) ) {
				this.run_start -= 36000;
			}
			msg = "" + this.name + " process hung at tick #" + this.ticks + ". Process was unresponsive for " + ( ( GlobalFuncs.__btime__timeofhour() ??0) - ( this.run_start ??0) ) / 10 + " seconds and was restarted. Last task: " + this.last_task + ". Last Object Type: " + lastObjType;
			GlobalFuncs.logTheThing( "debug", null, null, msg );
			GlobalFuncs.logTheThing( "diary", null, null, msg, "debug" );
			GlobalFuncs.message_admins( msg );
			this.main.restartProcess( this.name );
			return;
		}

		// Function from file: process.dm
		[VerbInfo( name: "hung" )]
		public void f_hung(  ) {
			this.hung = true;
			this.setStatus( 6 );
			return;
		}

		// Function from file: process.dm
		[VerbInfo( name: "queued" )]
		public void f_queued(  ) {
			this.idle = false;
			this.running = false;
			this.queued = true;
			this.hung = false;
			this.setStatus( 2 );
			return;
		}

		// Function from file: process.dm
		[VerbInfo( name: "idle" )]
		public void f_idle(  ) {
			this.queued = false;
			this.running = false;
			this.idle = true;
			this.hung = false;
			this.setStatus( 1 );
			return;
		}

		// Function from file: process.dm
		[VerbInfo( name: "running" )]
		public void f_running(  ) {
			this.idle = false;
			this.queued = false;
			this.running = true;
			this.hung = false;
			this.setStatus( 3 );
			return;
		}

		// Function from file: process.dm
		public void process(  ) {
			this.started();
			this.doWork();
			this.finished();
			return;
		}

		// Function from file: process.dm
		public virtual void setup(  ) {
			return;
		}

		// Function from file: process.dm
		public virtual bool doWork(  ) {
			return false;
		}

		// Function from file: process.dm
		public void finished(  ) {
			this.ticks++;
			this.f_idle();
			this.main.processFinished( this );
			this.onFinish();
			return;
		}

		// Function from file: process.dm
		public virtual void started(  ) {
			this.last_slept = GlobalFuncs.__btime__timeofhour();
			this.run_start = GlobalFuncs.__btime__timeofhour();
			this.cpu_defer_count = 0;
			this.f_running();
			this.main.processStarted( this );
			this.onStart();
			return;
		}

	}

}