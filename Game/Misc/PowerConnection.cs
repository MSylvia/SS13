// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class PowerConnection : Game_Data {

		public Obj_Machinery_Media_Transmitter_Broadcast parent = null;
		public int? channel = 1;
		public bool build_status = false;
		public bool connected = false;
		public Powernet powernet = null;
		public bool machine_flags = false;
		public bool inMachineList = false;
		public dynamic parentMoveKey = null;
		public dynamic turf = null;

		// Function from file: components.dm
		public PowerConnection ( Obj_Machinery_Media_Transmitter_Broadcast parent = null ) {
			this.parent = parent;
			GlobalVars.power_machines.Or( this );
			this.parentMoveKey = parent.on_moved.Add( this, "parent_moved" );
			this.addToTurf();
			return;
		}

		// Function from file: components.dm
		public void removeStaticPower( int value = 0, int powerchannel = 0 ) {
			this.addStaticPower( -value, powerchannel );
			return;
		}

		// Function from file: components.dm
		public void addStaticPower( int value = 0, int powerchannel = 0 ) {
			
			if ( !Lang13.Bool( this.parent.areaMaster ) ) {
				return;
			}
			((Zone)this.parent.areaMaster).addStaticPower( value, powerchannel );
			return;
		}

		// Function from file: components.dm
		public ByTable get_indirect_connections(  ) {
			ByTable _default = null;

			Obj_Structure_Cable C = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.parent.loc, typeof(Obj_Structure_Cable) )) {
				C = _a;
				

				if ( C.get_powernet() != null ) {
					continue;
				}

				if ( C.d1 == 0 ) {
					_default.Add( C );
				}
			}
			return _default;
		}

		// Function from file: components.dm
		public ByTable get_marked_connections(  ) {
			ByTable _default = null;

			double? cdir = null;
			Tile T = null;
			dynamic card = null;
			Obj_Structure_Cable C = null;

			_default = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				card = _b;
				
				T = Map13.GetStep( this.parent.loc, Convert.ToInt32( card ) );
				cdir = Map13.GetDistance( T, this.parent.loc );

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Structure_Cable) )) {
					C = _a;
					

					if ( C.d1 == cdir || C.d2 == cdir ) {
						_default.Add( C );
					}
				}
			}
			return _default;
		}

		// Function from file: components.dm
		public ByTable get_connections(  ) {
			ByTable _default = null;

			double? cdir = null;
			Tile T = null;
			dynamic card = null;
			Obj_Structure_Cable C = null;

			_default = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				card = _b;
				
				T = Map13.GetStep( this.parent.loc, Convert.ToInt32( card ) );
				cdir = Map13.GetDistance( T, this.parent.loc );

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Structure_Cable) )) {
					C = _a;
					

					if ( C.get_powernet() != null ) {
						continue;
					}

					if ( C.d1 == cdir || C.d2 == cdir ) {
						_default.Add( C );
					}
				}
			}
			return _default;
		}

		// Function from file: components.dm
		public bool disconnect(  ) {
			this.connected = false;

			if ( !( this.get_powernet() != null ) ) {
				this.build_status = false;
				return false;
			}
			this.powernet.remove_component( this );
			return true;
		}

		// Function from file: components.dm
		public virtual bool connect(  ) {
			dynamic T = null;
			Obj_Structure_Cable C = null;

			T = GlobalFuncs.get_turf( this.parent );
			C = ((Tile)T).get_cable_node();

			if ( !( C != null ) || !( C.get_powernet() != null ) ) {
				return false;
			}
			C.powernet.add_component( this );
			this.connected = true;
			return true;
		}

		// Function from file: components.dm
		public virtual void power_change(  ) {
			return;
		}

		// Function from file: components.dm
		public virtual bool use_power( dynamic amount = null, int? chan = null ) {
			chan = chan ?? this.channel;

			
			if ( this.parent.areaMaster == null || !Lang13.Bool( this.parent.areaMaster ) ) {
				return false;
			}

			if ( !this.powered( chan ) ) {
				return false;
			}
			((Zone)this.parent.areaMaster).use_power( amount, chan );
			return false;
		}

		// Function from file: components.dm
		public virtual bool powered( int? chan = null ) {
			chan = chan ?? this.channel;

			
			if ( !( this.parent != null ) || !( this.parent.loc != null ) ) {
				return false;
			}

			if ( this.parent.areaMaster == null || !Lang13.Bool( this.parent.areaMaster ) ) {
				return false;
			}

			if ( ( ( this.machine_flags ?1:0) & 16 ) != 0 && !Lang13.Bool( this.parent.anchored ) ) {
				return false;
			}
			return ((Zone)this.parent.areaMaster).powered( chan );
		}

		// Function from file: components.dm
		public ByTable getPowernetNodes(  ) {
			
			if ( !( this.get_powernet() != null ) ) {
				return new ByTable();
			}
			return this.powernet.nodes;
		}

		// Function from file: components.dm
		public bool check_rebuild(  ) {
			Obj_Structure_Cable C = null;

			
			if ( !this.build_status ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.parent.loc, typeof(Obj_Structure_Cable) )) {
				C = _a;
				

				if ( Lang13.Bool( C.check_rebuild() ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: components.dm
		public Powernet get_powernet(  ) {
			this.check_rebuild();
			return this.powernet;
		}

		// Function from file: components.dm
		public double get_avail(  ) {
			
			if ( this.get_powernet() != null ) {
				return this.powernet.avail;
			} else {
				return 0;
			}
		}

		// Function from file: components.dm
		public double get_surplus(  ) {
			
			if ( this.get_powernet() != null ) {
				return this.powernet.avail - this.powernet.load;
			} else {
				return 0;
			}
		}

		// Function from file: components.dm
		public void add_load( dynamic amount = null ) {
			
			if ( this.get_powernet() != null ) {
				this.powernet.load += Convert.ToDouble( amount );
			}
			return;
		}

		// Function from file: components.dm
		public void add_avail( dynamic amount = null ) {
			
			if ( this.get_powernet() != null ) {
				this.powernet.newavail += Convert.ToDouble( amount );
			}
			return;
		}

		// Function from file: components.dm
		public virtual void process(  ) {
			return;
		}

		// Function from file: components.dm
		public void excess( double netexcess = 0 ) {
			return;
		}

		// Function from file: components.dm
		public void removeFromTurf(  ) {
			
			if ( !Lang13.Bool( this.turf ) ) {
				return;
			}
			this.turf.power_connections.Remove( this );

			if ( this.turf.power_connections.len == 0 ) {
				this.turf.power_connections = null;
			}
			this.turf = null;
			return;
		}

		// Function from file: components.dm
		public void addToTurf(  ) {
			this.turf = GlobalFuncs.get_turf( this.parent );

			if ( !Lang13.Bool( this.turf ) ) {
				return;
			}

			if ( this.turf.power_connections == null ) {
				this.turf.power_connections = new ByTable(new object [] { this });
			} else {
				this.turf.power_connections.Add( this );
			}
			return;
		}

		// Function from file: components.dm
		public void parent_moved( dynamic args = null ) {
			this.removeFromTurf();
			this.addToTurf();
			return;
		}

		// Function from file: components.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.disconnect();
			GlobalVars.power_machines.Remove( this.parent );
			this.removeFromTurf();
			this.parent.on_moved.Remove( this.parentMoveKey );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}