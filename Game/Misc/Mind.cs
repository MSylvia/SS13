// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mind : Game_Data {

		public string key = null;
		public ByTable job_objectives = new ByTable();
		public dynamic name = null;
		public dynamic current = null;
		public Mob original = null;
		public bool active = false;
		public string memory = null;
		public dynamic assigned_role = null;
		public string special_role = null;
		public ByTable wizard_spells = null;
		public string role_alt_title = null;
		public dynamic assigned_job = null;
		public ByTable kills = new ByTable();
		public ByTable objectives = new ByTable();
		public ByTable special_verbs = new ByTable();
		public bool? has_been_rev = false;
		public dynamic faction = null;
		public Changeling changeling = null;
		public Vampire vampire = null;
		public bool rev_cooldown = false;
		public int brigged_since = -1;
		public MoneyAccount initial_account = null;
		public ByTable uplink_items_bought = new ByTable();
		public double total_TC = 0;
		public int spent_TC = 0;
		public bool isScrying = false;

		// Function from file: mind.dm
		public Mind ( string key = null ) {
			this.key = key;
			return;
		}

		// Function from file: mind.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic new_role = null;
			string new_memo = null;
			dynamic objective = null;
			int objective_pos = 0;
			string def_value = null;
			string temp_obj_type = null;
			dynamic new_obj_type = null;
			dynamic new_objective = null;
			string objective_type_capital = null;
			string objective_type_text = null;
			string objective_type = null;
			ByTable possible_targets = null;
			Mind possible_target = null;
			dynamic def_target = null;
			ByTable objective_list = null;
			dynamic new_target = null;
			Type objective_path = null;
			dynamic steal = null;
			dynamic def_num = null;
			dynamic target_number = null;
			string expl = null;
			dynamic objective2 = null;
			dynamic objective3 = null;
			dynamic valid_head = null;
			Objective_Mutiny O = null;
			Objective_Mutiny rev_obj = null;
			dynamic L = null;
			dynamic flash = null;
			dynamic L2 = null;
			dynamic flash2 = null;
			dynamic L3 = null;
			dynamic flash3 = null;
			int fail = 0;
			dynamic cult = null;
			dynamic wikiroute = null;
			dynamic cult2 = null;
			dynamic H = null;
			Obj_Item_Weapon_Tome T = null;
			ByTable slots = null;
			dynamic where = null;
			dynamic wikiroute2 = null;
			dynamic wikiroute3 = null;
			dynamic new_g = null;
			dynamic wikiroute4 = null;
			Objective_Nuclear O2 = null;
			dynamic wikiroute5 = null;
			dynamic H2 = null;
			string code = null;
			Obj_Machinery_Nuclearbomb bombue = null;
			dynamic A = null;
			dynamic L4 = null;
			dynamic H3 = null;
			dynamic M = null;
			Disease D = null;
			dynamic H4 = null;
			dynamic M2 = null;
			dynamic M3 = null;
			Disease D2 = null;
			Obj_Item_Weapon_Dnainjector_Nofail_M2h m2h = null;
			Obj_Item_Weapon_Implant mobfinder = null;
			dynamic A2 = null;
			dynamic R = null;
			dynamic R2 = null;
			dynamic ai = null;
			Mob_Living_Silicon_Robot R3 = null;
			Mob_Living_Silicon_Robot M4 = null;
			Obj_Item W = null;
			Obj_Item_Device_Uplink_Hidden suplink = null;
			dynamic crystals = null;
			dynamic diff = null;
			int obj_count = 0;
			Objective objective4 = null;

			
			if ( !GlobalFuncs.check_rights( 2 ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["role_edit"] ) ) {
				new_role = Interface13.Input( "Select new role", "Assigned role", this.assigned_role, null, GlobalFuncs.get_all_jobs(), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( new_role ) ) {
					return null;
				}
				this.assigned_role = new_role;
			} else if ( Lang13.Bool( href_list["memory_edit"] ) ) {
				new_memo = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Write new memory", "Memory", this.memory, null, null, InputType.Null | InputType.StrMultiline ) ), 1, 1024 );

				if ( new_memo == null ) {
					return null;
				}
				this.memory = new_memo;
			} else if ( Lang13.Bool( href_list["obj_edit"] ) || Lang13.Bool( href_list["obj_add"] ) ) {
				
				if ( Lang13.Bool( href_list["obj_edit"] ) ) {
					objective = Lang13.FindObj( href_list["obj_edit"] );

					if ( !Lang13.Bool( objective ) ) {
						return null;
					}
					objective_pos = this.objectives.Find( objective );
					temp_obj_type = "" + objective.type;
					def_value = String13.SubStr( temp_obj_type, 19, 0 );

					if ( !Lang13.Bool( def_value ) ) {
						def_value = "custom";
					}
				}
				new_obj_type = Interface13.Input( "Select objective type:", "Objective type", def_value, null, new ByTable(new object [] { "assassinate", "blood", "debrain", "protect", "prevent", "harm", "brig", "hijack", "escape", "survive", "steal", "download", "nuclear", "capture", "absorb", "custom" }), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( new_obj_type ) ) {
					return null;
				}
				new_objective = null;

				dynamic _c = new_obj_type; // Was a switch-case, sorry for the mess.
				if ( _c=="assassinate" || _c=="protect" || _c=="debrain" || _c=="harm" || _c=="brig" ) {
					objective_type_capital = String13.ToUpper( String13.SubStr( new_obj_type, 1, 2 ) );
					objective_type_text = String13.SubStr( new_obj_type, 2, 0 );
					objective_type = "" + objective_type_capital + objective_type_text;
					possible_targets = new ByTable(new object [] { "Free objective" });

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
						possible_target = _a;
						

						if ( possible_target != this && possible_target.current is Mob_Living_Carbon_Human ) {
							possible_targets.Add( possible_target.current );
						}
					}
					def_target = null;
					objective_list = new ByTable(new object [] { typeof(Objective_Assassinate), typeof(Objective_Protect), typeof(Objective_Debrain) });

					if ( Lang13.Bool( objective ) && false && Lang13.Bool( objective.target ) ) {
						def_target = objective.target.current;
					}
					new_target = Interface13.Input( "Select target:", "Objective target", def_target, null, possible_targets, InputType.Null | InputType.Any );

					if ( !Lang13.Bool( new_target ) ) {
						return null;
					}
					objective_path = Lang13.FindClass( "/datum/objective/" + new_obj_type );

					if ( new_target == "Free objective" ) {
						new_objective = Lang13.Call( objective_path );
						new_objective.owner = this;
						new_objective.target = null;
						new_objective.explanation_text = "Free objective";
					} else {
						new_objective = Lang13.Call( objective_path );
						new_objective.owner = this;
						new_objective.target = new_target.mind;
						new_objective.explanation_text = "" + objective_type + " " + new_target.real_name + ", the " + ( new_target.mind.assigned_role == "MODE" ? new_target.mind.special_role : new_target.mind.assigned_role ) + ".";
					}
				} else if ( _c=="prevent" ) {
					new_objective = new Objective_Block();
					new_objective.owner = this;
				} else if ( _c=="hijack" ) {
					new_objective = new Objective_Hijack();
					new_objective.owner = this;
				} else if ( _c=="escape" ) {
					new_objective = new Objective_Escape();
					new_objective.owner = this;
				} else if ( _c=="survive" ) {
					new_objective = new Objective_Survive();
					new_objective.owner = this;
				} else if ( _c=="die" ) {
					new_objective = new Objective_Die();
					new_objective.owner = this;
				} else if ( _c=="nuclear" ) {
					new_objective = new Objective_Nuclear();
					new_objective.owner = this;
				} else if ( _c=="steal" ) {
					
					if ( !( objective is Objective_Steal ) ) {
						new_objective = new Objective_Steal();
						new_objective.owner = this;
					} else {
						new_objective = objective;
					}
					steal = new_objective;

					if ( !Lang13.Bool( ((Objective_Steal)steal).select_target() ) ) {
						return null;
					}
				} else if ( _c=="download" || _c=="capture" || _c=="absorb" || _c=="blood" ) {
					def_num = null;

					if ( Lang13.Bool( objective ) && objective.type == Lang13.FindClass( "/datum/objective/" + new_obj_type ) ) {
						def_num = objective.target_amount;
					}
					target_number = Interface13.Input( "Input target number:", "Objective", def_num, null, null, InputType.Num | InputType.Null );

					if ( target_number == null ) {
						return null;
					}

					dynamic _b = new_obj_type; // Was a switch-case, sorry for the mess.
					if ( _b=="capture" ) {
						new_objective = new Objective_Capture();
						new_objective.explanation_text = "Accumulate " + target_number + " capture points.";
					} else if ( _b=="absorb" ) {
						new_objective = new Objective_Absorb();
						new_objective.explanation_text = "Absorb " + target_number + " compatible genomes.";
					} else if ( _b=="blood" ) {
						new_objective = new Objective_Blood();
						new_objective.explanation_text = "Accumulate atleast " + target_number + " units of blood in total.";
					}
					new_objective.owner = this;
					new_objective.target_amount = target_number;
				} else if ( _c=="custom" ) {
					expl = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Custom objective:", "Objective", ( Lang13.Bool( objective ) ? objective.explanation_text : "" ), null, null, InputType.Str | InputType.Null ) ), 1, 1024 );

					if ( !Lang13.Bool( expl ) ) {
						return null;
					}
					new_objective = new Objective();
					new_objective.owner = this;
					new_objective.explanation_text = expl;
				}

				if ( !Lang13.Bool( new_objective ) ) {
					return null;
				}

				if ( Lang13.Bool( objective ) ) {
					this.objectives.Remove( objective );
					this.objectives.Insert( objective_pos, new_objective );
					GlobalFuncs.log_admin( "" + Task13.User.key + "/(" + Task13.User.name + ") changed " + this.key + "/(" + this.name + ")'s objective from " + objective.explanation_text + " to " + new_objective.explanation_text );
				} else {
					this.objectives.Add( new_objective );
					GlobalFuncs.log_admin( "" + Task13.User.key + "/(" + Task13.User.name + ") gave " + this.key + "/(" + this.name + ") the objective: " + new_objective.explanation_text );
				}
			} else if ( Lang13.Bool( href_list["obj_delete"] ) ) {
				objective2 = Lang13.FindObj( href_list["obj_delete"] );

				if ( !( objective2 is Objective ) ) {
					return null;
				}
				this.objectives.Remove( objective2 );
				GlobalFuncs.log_admin( "" + Task13.User.key + "/(" + Task13.User.name + ") removed " + this.key + "/(" + this.name + ")'s objective (" + objective2.explanation_text + ")" );
			} else if ( Lang13.Bool( href_list["obj_completed"] ) ) {
				objective3 = Lang13.FindObj( href_list["obj_completed"] );

				if ( !( objective3 is Objective ) ) {
					return null;
				}
				objective3.completed = !Lang13.Bool( objective3.completed );
				GlobalFuncs.log_admin( "" + Task13.User.key + "/(" + Task13.User.name + ") toggled " + this.key + "/(" + this.name + ") " + objective3.explanation_text + " to " + ( Lang13.Bool( objective3.completed ) ? "completed" : "incomplete" ) );
			} else if ( Lang13.Bool( href_list["revolution"] ) ) {
				
				dynamic _e = href_list["revolution"]; // Was a switch-case, sorry for the mess.
				if ( _e=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.revolutionaries.Remove( this );
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have been brainwashed! You are no longer a revolutionary!</FONT></span>" );
						((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( this );
						this.special_role = null;
					}
					Interface13.Stat( null, GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.head_revolutionaries.Remove( this );
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have been brainwashed! You are no longer a head revolutionary!</FONT></span>" );
						((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( this );
						this.special_role = null;
					}
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-rev'ed " + this.current + "." );
				} else if ( _e=="rev" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.head_revolutionaries.Remove( this );
						((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( this );
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>Revolution has been disappointed of your leader traits! You are a regular revolutionary now!</FONT></span>" );
					} else {
						Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( this ) );

						if ( !false ) {
							GlobalFuncs.to_chat( this.current, "<span class='warning'><FONT size = 3> You are now a revolutionary! Help your cause. Do not harm your fellow freedom fighters. You can identify your comrades by the red \"R\" icons, and your leaders by the blue \"R\" icons. Help them kill the heads to win the revolution!</FONT></span>" );
						} else {
							return null;
						}
					}
					GlobalVars.ticker.mode.revolutionaries.Add( this );
					((GameMode)GlobalVars.ticker.mode).update_rev_icons_added( this );
					this.special_role = "Revolutionary";
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has rev'ed " + this.current + "." );
				} else if ( _e=="headrev" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.revolutionaries.Remove( this );
						((GameMode)GlobalVars.ticker.mode).update_rev_icons_removed( this );
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have proved your devotion to revoltion! Yea are a head revolutionary now!</FONT></span>" );
					} else {
						Interface13.Stat( null, GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) );

						if ( !false ) {
							GlobalFuncs.to_chat( this.current, "<span class='notice'>You are a member of the revolutionaries' leadership now!</span>" );
						} else {
							return null;
						}
					}

					if ( GlobalVars.ticker.mode.head_revolutionaries.len > 0 ) {
						valid_head = Lang13.FindIn( typeof(Mind), GlobalVars.ticker.mode.head_revolutionaries );

						if ( Lang13.Bool( valid_head ) ) {
							
							foreach (dynamic _d in Lang13.Enumerate( valid_head.objectives, typeof(Objective_Mutiny) )) {
								O = _d;
								
								rev_obj = new Objective_Mutiny();
								rev_obj.owner = this;
								rev_obj.target = O.target;
								rev_obj.explanation_text = "Assassinate " + O.target.name + ", the " + O.target.assigned_role + ".";
								this.objectives.Add( rev_obj );
							}
							((GameMode)GlobalVars.ticker.mode).greet_revolutionary( this, false );
						}
					}
					GlobalVars.ticker.mode.head_revolutionaries.Add( this );
					((GameMode)GlobalVars.ticker.mode).update_rev_icons_added( this );
					this.special_role = "Head Revolutionary";
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has head-rev'ed " + this.current + "." );
				} else if ( _e=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_revolutionary_objectives( this );
					((GameMode)GlobalVars.ticker.mode).greet_revolutionary( this, false );
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The objectives for revolution have been generated and shown to " + this.key + "</span>" );
				} else if ( _e=="flash" ) {
					
					if ( !((GameMode)GlobalVars.ticker.mode).equip_revolutionary( this.current ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Spawning flash failed!</span>" );
					}
				} else if ( _e=="takeflash" ) {
					L = this.current.get_contents();
					flash = Lang13.FindIn( typeof(Obj_Item_Device_Flash), L );

					if ( !Lang13.Bool( flash ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Deleting flash failed!</span>" );
					}
					GlobalFuncs.qdel( flash );
				} else if ( _e=="repairflash" ) {
					L2 = this.current.get_contents();
					flash2 = Lang13.FindIn( typeof(Obj_Item_Device_Flash), L2 );

					if ( !Lang13.Bool( flash2 ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Repairing flash failed!</span>" );
					} else {
						flash2.broken = 0;
					}
				} else if ( _e=="reequip" ) {
					L3 = this.current.get_contents();
					flash3 = Lang13.FindIn( typeof(Obj_Item_Device_Flash), L3 );
					GlobalFuncs.qdel( flash3 );
					this.take_uplink();
					fail = 0;
					fail |= !((GameMode)GlobalVars.ticker.mode).equip_traitor( this.current, true ) ?1:0;
					fail |= !((GameMode)GlobalVars.ticker.mode).equip_revolutionary( this.current ) ?1:0;

					if ( fail != 0 ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Reequipping revolutionary goes wrong!</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["cult"] ) ) {
				
				dynamic _f = href_list["cult"]; // Was a switch-case, sorry for the mess.
				if ( _f=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.cult -= this;
						((GameMode)GlobalVars.ticker.mode).update_cult_icons_removed( this );
						this.special_role = null;
						cult = GlobalVars.ticker.mode;

						if ( cult is GameMode_Cult ) {
							((GameMode_Cult)cult).memoize_cult_objectives( this );
						}
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have been brainwashed! You are no longer a cultist!</FONT></span>" );
						GlobalFuncs.to_chat( this.current, "<span class='danger'>You find yourself unable to mouth the words of the forgotten...</span>" );
						((Mob)this.current).remove_language( "Cult" );
						this.memory = "";
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-cult'ed " + this.current + "." );
					}
				} else if ( _f=="cultist" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( this ) );

					if ( !false ) {
						GlobalVars.ticker.mode.cult += this;
						((GameMode)GlobalVars.ticker.mode).update_cult_icons_added( this );
						this.special_role = "Cultist";
						GlobalFuncs.to_chat( this.current, "<span class='sinister'>You catch a glimpse of the Realm of Nar-Sie, The Geometer of Blood. You now see how flimsy the world is, you see that it should be open to the knowledge of Nar-Sie.</span>" );
						GlobalFuncs.to_chat( this.current, "<span class='sinister'>Assist your new compatriots in their dark dealings. Their goal is yours, and yours is theirs. You serve the Dark One above all else. Bring It back.</span>" );
						wikiroute = GlobalVars.role_wiki["cultist"];
						GlobalFuncs.to_chat( this.current, new Txt( "<span class='info'><a HREF='?src=" ).Ref( this.current ).str( ";getwiki=" ).item( wikiroute ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
						GlobalFuncs.to_chat( this.current, "<span class='sinister'>You can now speak and understand the forgotten tongue of the occult.</span>" );
						((Mob)this.current).add_language( "Cult" );
						cult2 = GlobalVars.ticker.mode;

						if ( cult2 is GameMode_Cult ) {
							((GameMode_Cult)cult2).memoize_cult_objectives( this );
						}
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has cult'ed " + this.current + "." );
					}
				} else if ( _f=="tome" ) {
					H = this.current;

					if ( H is Mob_Living_Carbon_Human ) {
						T = new Obj_Item_Weapon_Tome( H );
						slots = new ByTable().Set( "backpack", 18 ).Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
						where = ((Mob_Living_Carbon_Human)H).equip_in_one_of_slots( T, slots );

						if ( !Lang13.Bool( where ) ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Spawning tome failed!</span>" );
						} else {
							GlobalFuncs.to_chat( H, "<span class='sinister'>A tome, a message from your new master, appears in your " + where + ".</span>" );
						}
					}
				} else if ( _f=="amulet" ) {
					
					if ( !((GameMode)GlobalVars.ticker.mode).equip_cultist( this.current ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Spawning amulet failed!</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["wizard"] ) ) {
				
				dynamic _g = href_list["wizard"]; // Was a switch-case, sorry for the mess.
				if ( _g=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.wizards.Remove( this );
						this.special_role = null;
						((Mob)this.current).spellremove( this.current );
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have been brainwashed! You are no longer a wizard!</FONT></span>" );
						((GameMode)GlobalVars.ticker.mode).update_wizard_icons_removed( this );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-wizard'ed " + this.current + "." );
					}
				} else if ( _g=="wizard" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( this ) );

					if ( !false ) {
						GlobalVars.ticker.mode.wizards.Add( this );
						this.special_role = "Wizard";
						GlobalFuncs.to_chat( this.current, "<span class='danger'>You are the Space Wizard!</span>" );
						wikiroute2 = GlobalVars.role_wiki["wizard"];
						GlobalFuncs.to_chat( this.current, new Txt( "<span class='info'><a HREF='?src=" ).Ref( this.current ).str( ";getwiki=" ).item( wikiroute2 ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
						((GameMode)GlobalVars.ticker.mode).update_wizard_icons_added( this );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has wizard'ed " + this.current + "." );
					}
				} else if ( _g=="lair" ) {
					this.current.loc = Rand13.PickFromTable( GlobalVars.wizardstart );
				} else if ( _g=="dressup" ) {
					((GameMode)GlobalVars.ticker.mode).equip_wizard( this.current );
				} else if ( _g=="name" ) {
					((GameMode)GlobalVars.ticker.mode).name_wizard( this.current );
				} else if ( _g=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_wizard_objectives( this );
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The objectives for wizard " + this.key + " have been generated. You can edit them and anounce manually.</span>" );
				}
				((GameMode)GlobalVars.ticker.mode).update_all_wizard_icons();
			} else if ( Lang13.Bool( href_list["changeling"] ) ) {
				
				dynamic _h = href_list["changeling"]; // Was a switch-case, sorry for the mess.
				if ( _h=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.changelings.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.changelings.Remove( this );
						this.special_role = null;
						((Mob)this.current).remove_changeling_powers();
						this.current.verbs -= typeof(Changeling).GetMethod( "EvolutionMenu" );

						if ( this.changeling != null ) {
							GlobalFuncs.qdel( this.changeling );
							this.changeling = null;
						}
						GlobalFuncs.to_chat( this.current, "<FONT color='red' size = 3><B>You grow weak and lose your powers! You are no longer a changeling and are stuck in your current form!</B></FONT>" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-changeling'ed " + this.current + "." );
					}
				} else if ( _h=="changeling" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.changelings.Contains( this ) );

					if ( !false ) {
						GlobalVars.ticker.mode.changelings.Add( this );
						((GameMode)GlobalVars.ticker.mode).grant_changeling_powers( this.current );
						this.special_role = "Changeling";
						GlobalFuncs.to_chat( this.current, "<B><font color='red'>Your powers are awoken. A flash of memory returns to us...we are a changeling!</font></B>" );
						wikiroute3 = GlobalVars.role_wiki["changeling"];
						GlobalFuncs.to_chat( this.current, new Txt( "<span class='info'><a HREF='?src=" ).Ref( this.current ).str( ";getwiki=" ).item( wikiroute3 ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has changeling'ed " + this.current + "." );
					}
				} else if ( _h=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_changeling_objectives( this );
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The objectives for changeling " + this.key + " have been generated. You can edit them and anounce manually.</span>" );
				} else if ( _h=="initialdna" ) {
					
					if ( !( this.changeling != null ) || !( this.changeling.absorbed_dna.len != 0 ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Resetting DNA failed!</span>" );
					} else {
						this.current.dna = this.changeling.absorbed_dna[1];
						this.current.real_name = this.current.dna.real_name;
						((Mob)this.current).UpdateAppearance();
						GlobalFuncs.domutcheck( this.current, null );
					}
				} else if ( _h=="set_genomes" ) {
					
					if ( !( this.changeling != null ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>No changeling!</span>" );
						return null;
					}
					new_g = Interface13.Input( Task13.User, "Number of genomes", "Changeling", this.changeling.geneticpoints, null, InputType.Num );
					this.changeling.geneticpoints = ( Convert.ToDouble( new_g ) <= 0 ? ((dynamic)( 0 )) : ( Convert.ToDouble( new_g ) >= 100 ? ((dynamic)( 100 )) : new_g ) );
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has set changeling " + this.current + " to " + this.changeling.geneticpoints + " genomes." );
				}
			} else if ( Lang13.Bool( href_list["vampire"] ) ) {
				
				dynamic _i = href_list["vampire"]; // Was a switch-case, sorry for the mess.
				if ( _i=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.vampires.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.vampires.Remove( this );
						this.special_role = null;
						((Mob)this.current).remove_vampire_powers();

						if ( this.vampire != null ) {
							GlobalFuncs.qdel( this.vampire );
							this.vampire = null;
						}
						GlobalFuncs.to_chat( this.current, "<FONT color='red' size = 3><B>You grow weak and lose your powers! You are no longer a vampire and are stuck in your current form!</B></FONT>" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-vampired " + this.current + "." );
					}
				} else if ( _i=="vampire" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.vampires.Contains( this ) );

					if ( !false ) {
						GlobalVars.ticker.mode.vampires.Add( this );
						((GameMode)GlobalVars.ticker.mode).grant_vampire_powers( this.current );
						this.special_role = "Vampire";
						GlobalFuncs.to_chat( this.current, "<B><font color='red'>Your powers are awoken. Your lust for blood grows... You are a Vampire!</font></B>" );
						wikiroute4 = GlobalVars.role_wiki["vampire"];
						GlobalFuncs.to_chat( this.current, new Txt( "<span class='info'><a HREF='?src=" ).Ref( this.current ).str( ";getwiki=" ).item( wikiroute4 ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has vampired " + this.current + "." );
					}
				} else if ( _i=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_vampire_objectives( this );
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The objectives for vampire " + this.key + " have been generated. You can edit them and announce manually.</span>" );
				}
			} else if ( Lang13.Bool( href_list["nuclear"] ) ) {
				
				dynamic _l = href_list["nuclear"]; // Was a switch-case, sorry for the mess.
				if ( _l=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.syndicates.Remove( this );
						((GameMode)GlobalVars.ticker.mode).update_synd_icons_removed( this );
						this.special_role = null;

						foreach (dynamic _j in Lang13.Enumerate( this.objectives, typeof(Objective_Nuclear) )) {
							O2 = _j;
							
							this.objectives.Remove( O2 );
						}
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have been brainwashed! You are no longer a syndicate operative!</FONT></span>" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-nuke op'ed " + this.current + "." );
					}
				} else if ( _l=="nuclear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( this ) );

					if ( !false ) {
						GlobalVars.ticker.mode.syndicates.Add( this );
						((GameMode)GlobalVars.ticker.mode).update_synd_icons_added( this );

						if ( GlobalVars.ticker.mode.syndicates.len == 1 ) {
							((GameMode)GlobalVars.ticker.mode).prepare_syndicate_leader( this );
						} else {
							this.current.real_name = "" + GlobalFuncs.syndicate_name() + " Operative #" + ( GlobalVars.ticker.mode.syndicates.len - 1 );
						}
						this.special_role = "Syndicate";
						GlobalFuncs.to_chat( this.current, "<span class='notice'>You are a " + GlobalFuncs.syndicate_name() + " agent!</span>" );
						wikiroute5 = GlobalVars.role_wiki["operative"];
						GlobalFuncs.to_chat( this.current, new Txt( "<span class='info'><a HREF='?src=" ).Ref( this.current ).str( ";getwiki=" ).item( wikiroute5 ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
						((GameMode)GlobalVars.ticker.mode).forge_syndicate_objectives( this );
						((GameMode)GlobalVars.ticker.mode).greet_syndicate( this );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has nuke op'ed " + this.current + "." );
					}
				} else if ( _l=="lair" ) {
					this.current.loc = GlobalFuncs.get_turf( Lang13.FindObj( "landmark*Syndicate-Spawn" ) );
				} else if ( _l=="dressup" ) {
					H2 = this.current;
					GlobalFuncs.qdel( H2.belt );
					GlobalFuncs.qdel( H2.back );
					GlobalFuncs.qdel( H2.ears );
					GlobalFuncs.qdel( H2.gloves );
					GlobalFuncs.qdel( H2.head );
					GlobalFuncs.qdel( H2.shoes );
					GlobalFuncs.qdel( H2.wear_id );
					GlobalFuncs.qdel( H2.wear_suit );
					GlobalFuncs.qdel( H2.w_uniform );

					if ( !((GameMode)GlobalVars.ticker.mode).equip_syndicate( this.current ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Equipping a syndicate failed!</span>" );
					}
				} else if ( _l=="tellcode" ) {
					code = null;

					foreach (dynamic _k in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
						bombue = _k;
						

						if ( Lang13.Length( bombue.r_code ) <= 5 && bombue.r_code != "LOLNO" && bombue.r_code != "ADMIN" ) {
							code = bombue.r_code;
							break;
						}
					}

					if ( Lang13.Bool( code ) ) {
						this.store_memory( "<B>Syndicate Nuclear Bomb Code</B>: " + code );
						GlobalFuncs.to_chat( this.current, "The nuclear authorization code is: <B>" + code + "</B>" );
					} else {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>No valid nuke found!</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["traitor"] ) ) {
				
				dynamic _m = href_list["traitor"]; // Was a switch-case, sorry for the mess.
				if ( _m=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.traitors.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.traitors.Remove( this );
						this.special_role = null;
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have been brainwashed! You are no longer a traitor!</FONT></span>" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-traitor'ed " + this.current + "." );

						if ( this.current is Mob_Living_Silicon_Ai ) {
							A = this.current;
							A.set_zeroth_law( "" );
							A.show_laws();
						}
					}
				} else if ( _m=="traitor" ) {
					
					if ( this.make_traitor() == true ) {
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has traitor'ed " + GlobalFuncs.key_name( this.current ) + "." );
					}
				} else if ( _m=="autoobjectives" ) {
					((GameMode)GlobalVars.ticker.mode).forge_traitor_objectives( this );
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The objectives for traitor " + this.key + " have been generated. You can edit them and anounce manually.</span>" );
				}
			} else if ( Lang13.Bool( href_list["monkey"] ) ) {
				L4 = this.current;

				if ( L4.monkeyizing ) {
					return null;
				}

				dynamic _p = href_list["monkey"]; // Was a switch-case, sorry for the mess.
				if ( _p=="healthy" ) {
					
					if ( Lang13.Bool( Task13.User.client.holder.rights & 2 ) ) {
						H3 = this.current;
						M = this.current;

						if ( H3 is Mob_Living_Carbon_Human ) {
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to monkeyize " + GlobalFuncs.key_name( this.current ) );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to monkeyize " + GlobalFuncs.key_name_admin( this.current ) + "</span>" );
							Task13.Source = null;
							M = ((Mob_Living_Carbon_Human)H3).monkeyize();
							Task13.Source = M.mind;
						} else if ( M is Mob_Living_Carbon_Monkey && Lang13.Length( M.viruses ) != 0 ) {
							
							foreach (dynamic _n in Lang13.Enumerate( M.viruses, typeof(Disease) )) {
								D = _n;
								
								D.f_cure( false );
							}
							Task13.Sleep( 0 );
						}
					}
				} else if ( _p=="infected" ) {
					
					if ( Lang13.Bool( Task13.User.client.holder.rights & 2 ) ) {
						H4 = this.current;
						M2 = this.current;

						if ( H4 is Mob_Living_Carbon_Human ) {
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to monkeyize and infect " + GlobalFuncs.key_name( this.current ) );
							GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to monkeyize and infect " + GlobalFuncs.key_name_admin( this.current ) + "</span>" );
							Task13.Source = null;
							M2 = ((Mob_Living_Carbon_Human)H4).monkeyize();
							Task13.Source = M2.mind;
							((Mob)this.current).contract_disease( new Disease_JungleFever(), true, false );
						} else if ( M2 is Mob_Living_Carbon_Monkey ) {
							((Mob)this.current).contract_disease( new Disease_JungleFever(), true, false );
						}
					}
				} else if ( _p=="human" ) {
					M3 = this.current;

					if ( M3 is Mob_Living_Carbon_Monkey ) {
						
						foreach (dynamic _o in Lang13.Enumerate( M3.viruses, typeof(Disease) )) {
							D2 = _o;
							

							if ( D2 is Disease_JungleFever ) {
								D2.f_cure( false );
								Task13.Sleep( 0 );
							}
						}
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " attempting to humanize " + GlobalFuncs.key_name( this.current ) );
						GlobalFuncs.message_admins( "<span class='notice'>" + GlobalFuncs.key_name_admin( Task13.User ) + " attempting to humanize " + GlobalFuncs.key_name_admin( this.current ) + "</span>" );
						m2h = new Obj_Item_Weapon_Dnainjector_Nofail_M2h();
						mobfinder = new Obj_Item_Weapon_Implant( M3 );
						Task13.Source = null;
						m2h.inject( M3 );
						Task13.Source = ((dynamic)mobfinder.loc).mind;
						GlobalFuncs.qdel( mobfinder );
						mobfinder = null;
						this.current.radiation -= 50;
					}
				}
			} else if ( Lang13.Bool( href_list["silicon"] ) ) {
				
				dynamic _r = href_list["silicon"]; // Was a switch-case, sorry for the mess.
				if ( _r=="unmalf" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.malf_ai.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.malf_ai.Remove( this );
						this.special_role = null;
						A2 = this.current;
						A2.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "choose_modules" ), typeof(GameMode_Malfunction).GetMethod( "takeover" ), typeof(GameMode_Malfunction).GetMethod( "ai_win" ) );
						A2.malf_picker.remove_verbs( A2 );
						A2.laws = Lang13.Call( GlobalVars.base_law_type );
						GlobalFuncs.qdel( A2.malf_picker );
						A2.malf_picker = null;
						A2.show_laws();
						A2.icon_state = "ai";
						GlobalFuncs.to_chat( A2, "<span class='danger'><FONT size = 3>You have been patched! You are no longer malfunctioning!</FONT></span>" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-malf'ed " + A2 + "." );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-malf'ed " + A2 + "." );
					}
				} else if ( _r=="malf" ) {
					this.make_AI_Malf();
					GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has malf'ed " + this.current + "." );
				} else if ( _r=="unemag" ) {
					
					if ( this.current is Mob_Living_Silicon_Robot_Mommi ) {
						R = this.current;
						R.emagged = 0;

						if ( ((Mob_Living_Silicon_Robot)R).activated( R.module.emag ) ) {
							R.module_active = null;
						}

						if ( R.tool_state == R.module.emag ) {
							R.tool_state = null;
							R.contents -= R.module.emag;
						}
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has unemag'ed " + R + "." );
					} else if ( this.current is Mob_Living_Silicon_Robot ) {
						R2 = this.current;
						R2.emagged = 0;

						if ( ((Mob_Living_Silicon_Robot)R2).activated( R2.module.emag ) ) {
							R2.module_active = null;
						}

						if ( R2.module_state_1 == R2.module.emag ) {
							R2.module_state_1 = null;
							R2.contents -= R2.module.emag;
						} else if ( R2.module_state_2 == R2.module.emag ) {
							R2.module_state_2 = null;
							R2.contents -= R2.module.emag;
						} else if ( R2.module_state_3 == R2.module.emag ) {
							R2.module_state_3 = null;
							R2.contents -= R2.module.emag;
						}
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has unemag'ed " + R2 + "." );
					}
				} else if ( _r=="unemagcyborgs" ) {
					
					if ( this.current is Mob_Living_Silicon_Ai ) {
						ai = this.current;

						foreach (dynamic _q in Lang13.Enumerate( ai.connected_robots, typeof(Mob_Living_Silicon_Robot) )) {
							R3 = _q;
							
							R3.emagged = 0;

							if ( R3 is Mob_Living_Silicon_Robot_Mommi ) {
								M4 = R3;

								if ( M4.activated( M4.module.emag ) ) {
									M4.module_active = null;
								}

								if ( ((dynamic)M4).tool_state == M4.module.emag ) {
									((dynamic)M4).tool_state = null;
									M4.contents.Remove( M4.module.emag );
								}
							}

							if ( R3.module != null ) {
								
								if ( R3.activated( R3.module.emag ) ) {
									R3.module_active = null;
								}

								if ( R3.module_state_1 == R3.module.emag ) {
									R3.module_state_1 = null;
									R3.contents.Remove( R3.module.emag );
								} else if ( R3.module_state_2 == R3.module.emag ) {
									R3.module_state_2 = null;
									R3.contents.Remove( R3.module.emag );
								} else if ( R3.module_state_3 == R3.module.emag ) {
									R3.module_state_3 = null;
									R3.contents.Remove( R3.module.emag );
								}
							}
						}
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has unemag'ed " + ai + "'s Cyborgs." );
					}
				}
			} else if ( Lang13.Bool( href_list["common"] ) ) {
				
				dynamic _t = href_list["common"]; // Was a switch-case, sorry for the mess.
				if ( _t=="undress" ) {
					
					foreach (dynamic _s in Lang13.Enumerate( this.current, typeof(Obj_Item) )) {
						W = _s;
						
						((Mob)this.current).drop_from_inventory( W );
					}
				} else if ( _t=="takeuplink" ) {
					this.take_uplink();
					this.memory = null;
				} else if ( _t=="crystals" ) {
					
					if ( Lang13.Bool( Task13.User.client.holder.rights & 8 ) ) {
						suplink = this.find_syndicate_uplink();
						crystals = null;

						if ( suplink != null ) {
							crystals = suplink.uses;
						}
						crystals = Interface13.Input( "Amount of telecrystals for " + this.key, "Syndicate uplink", crystals, null, null, InputType.Num | InputType.Null );

						if ( !( crystals == null ) ) {
							
							if ( suplink != null ) {
								diff = crystals - suplink.uses;
								suplink.uses = crystals;
								this.total_TC += Convert.ToDouble( diff );
							}
						}
					}
				} else if ( _t=="uplink" ) {
					Interface13.Stat( this.current, GlobalVars.ticker.mode.traitors.Contains( this ) );

					if ( !((GameMode)GlobalVars.ticker.mode).equip_traitor( null, !false ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Equipping a syndicate failed!</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["obj_announce"] ) ) {
				obj_count = 1;
				GlobalFuncs.to_chat( this.current, "<span class='notice'>Your current objectives:</span>" );

				foreach (dynamic _u in Lang13.Enumerate( this.objectives, typeof(Objective) )) {
					objective4 = _u;
					
					GlobalFuncs.to_chat( this.current, "<B>Objective #" + obj_count + "</B>: " + objective4.explanation_text );
					obj_count++;
				}
			} else if ( Lang13.Bool( href_list["resteam"] ) ) {
				
				dynamic _v = href_list["resteam"]; // Was a switch-case, sorry for the mess.
				if ( _v=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.ert.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.ert.Remove( this );
						this.special_role = null;
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have been demoted! You are no longer an Emergency Responder!</FONT></span>" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-ERT'ed " + this.current + "." );
					}
				} else if ( _v=="resteam" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.ert.Contains( this ) );

					if ( !false ) {
						GlobalVars.ticker.mode.ert.Add( this );
						this.assigned_role = "MODE";
						this.special_role = "Response Team";
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has ERT'ed " + GlobalFuncs.key_name( this.current ) + "." );
					}
				}
			} else if ( Lang13.Bool( href_list["dsquad"] ) ) {
				
				dynamic _w = href_list["dsquad"]; // Was a switch-case, sorry for the mess.
				if ( _w=="clear" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.deathsquad.Contains( this ) );

					if ( false ) {
						GlobalVars.ticker.mode.deathsquad.Remove( this );
						this.special_role = null;
						GlobalFuncs.to_chat( this.current, "<span class='danger'><FONT size = 3>You have been demoted! You are no longer a Death Commando!</FONT></span>" );
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has de-deathsquad'ed " + this.current + "." );
					}
				} else if ( _w=="dsquad" ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.deathsquad.Contains( this ) );

					if ( !false ) {
						GlobalVars.ticker.mode.deathsquad.Add( this );
						this.assigned_role = "MODE";
						this.special_role = "Death Commando";
						GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has deathsquad'ed " + GlobalFuncs.key_name( this.current ) + "." );
					}
				}
			}
			this.edit_memory();
			return null;
		}

		// Function from file: job_objective.dm
		public dynamic findJobTask( dynamic typepath = null, bool? options = null ) {
			options = options ?? false;

			dynamic task = null;

			task = Lang13.FindIn( typepath, this.job_objectives );

			if ( !Lang13.Bool( typepath.IsInstanceOfType( task ) ) ) {
				
				if ( ( ( options == true ?1:0) & 1 ) != 0 ) {
					task = Lang13.Call( typepath );
					this.job_objectives.Add( task );
				}
			}
			return task;
		}

		// Function from file: mind.dm
		public bool? make_traitor(  ) {
			Interface13.Stat( null, GlobalVars.ticker.mode.traitors.Contains( this ) );

			if ( !false ) {
				GlobalVars.ticker.mode.traitors.Add( this );
				this.special_role = "traitor";
				((GameMode)GlobalVars.ticker.mode).forge_traitor_objectives( this );
				GlobalFuncs.to_chat( this.current, new Txt( "\n		<SPAN CLASS='big bold center red'>ATTENTION</SPAN>\n		<SPAN CLASS='big center'>It's time to pay your debt to " ).the( GlobalFuncs.syndicate_name() ).item().str( ".</SPAN>\n		" ).ToString() );
				((GameMode)GlobalVars.ticker.mode).finalize_traitor( this );
				((GameMode)GlobalVars.ticker.mode).greet_traitor( this );
				return GlobalVars.TRUE;
			}
			return GlobalVars.FALSE;
		}

		// Function from file: mind.dm
		public bool is_brigged( int duration = 0 ) {
			Ent_Static T = null;
			bool is_currently_brigged = false;
			Obj_Item_Weapon_Card_Id card = null;
			Obj_Item_Device_Pda P = null;

			T = this.current.loc;

			if ( !( T is Tile ) ) {
				this.brigged_since = -1;
				return false;
			}
			is_currently_brigged = false;

			if ( T.loc is Zone_Security_Brig ) {
				is_currently_brigged = true;

				foreach (dynamic _a in Lang13.Enumerate( this.current, typeof(Obj_Item_Weapon_Card_Id) )) {
					card = _a;
					
					is_currently_brigged = false;
					break;
				}

				foreach (dynamic _b in Lang13.Enumerate( this.current, typeof(Obj_Item_Device_Pda) )) {
					P = _b;
					

					if ( Lang13.Bool( P.id ) ) {
						is_currently_brigged = false;
						break;
					}
				}
			}

			if ( !is_currently_brigged ) {
				this.brigged_since = -1;
				return false;
			}

			if ( this.brigged_since == -1 ) {
				this.brigged_since = Game13.time;
			}
			return duration <= Game13.time - this.brigged_since;
		}

		// Function from file: mind.dm
		public void make_Rev(  ) {
			dynamic valid_head = null;
			Objective_Mutiny O = null;
			Objective_Mutiny rev_obj = null;
			dynamic L = null;
			dynamic flash = null;
			int fail = 0;

			
			if ( GlobalVars.ticker.mode.head_revolutionaries.len > 0 ) {
				valid_head = Lang13.FindIn( typeof(Mind), GlobalVars.ticker.mode.head_revolutionaries );

				if ( Lang13.Bool( valid_head ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( valid_head.objectives, typeof(Objective_Mutiny) )) {
						O = _a;
						
						rev_obj = new Objective_Mutiny();
						rev_obj.owner = this;
						rev_obj.target = O.target;
						rev_obj.explanation_text = "Assassinate " + O.target.current.real_name + ", the " + O.target.assigned_role + ".";
						this.objectives.Add( rev_obj );
					}
					((GameMode)GlobalVars.ticker.mode).greet_revolutionary( this, false );
				}
			}
			GlobalVars.ticker.mode.head_revolutionaries.Add( this );
			((GameMode)GlobalVars.ticker.mode).update_rev_icons_added( this );
			this.special_role = "Head Revolutionary";
			((GameMode)GlobalVars.ticker.mode).forge_revolutionary_objectives( this );
			((GameMode)GlobalVars.ticker.mode).greet_revolutionary( this, false );
			L = this.current.get_contents();
			flash = Lang13.FindIn( typeof(Obj_Item_Device_Flash), L );
			GlobalFuncs.qdel( flash );
			this.take_uplink();
			fail = 0;
			fail |= !((GameMode)GlobalVars.ticker.mode).equip_revolutionary( this.current ) ?1:0;
			return;
		}

		// Function from file: mind.dm
		public void make_Cultist(  ) {
			dynamic cult = null;
			string explanation = null;
			dynamic H = null;
			Obj_Item_Weapon_Tome T = null;
			ByTable slots = null;
			dynamic where = null;

			Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( this ) );

			if ( !false ) {
				GlobalVars.ticker.mode.cult += this;
				((GameMode)GlobalVars.ticker.mode).update_cult_icons_added( this );
				this.special_role = "Cultist";
				GlobalFuncs.to_chat( this.current, "<span class='sinister'>You catch a glimpse of the Realm of Nar-Sie, The Geometer of Blood. You now see how flimsy the world is, you see that it should be open to the knowledge of Nar-Sie.</span>" );
				GlobalFuncs.to_chat( this.current, "<span class='sinister'>Assist your new compatriots in their dark dealings. Their goal is yours, and yours is theirs. You serve the Dark One above all else. Bring It back.</span>" );
				GlobalFuncs.to_chat( this.current, "<span class='sinister'>You can now speak and understand the forgotten tongue of the occult.</span>" );
				((Mob)this.current).add_language( "Cult" );
				cult = GlobalVars.ticker.mode;

				if ( cult is GameMode_Cult ) {
					((GameMode_Cult)cult).memoize_cult_objectives( this );
				} else {
					explanation = "Summon Nar-Sie via the use of the appropriate rune (Hell join self). It will only work if nine cultists stand on and around it.";
					GlobalFuncs.to_chat( this.current, "<B>Objective #1</B>: " + explanation );
					this.current.memory += "<B>Objective #1</B>: " + explanation + "<BR>";
					GlobalFuncs.to_chat( this.current, "The convert rune is join blood self" );
					this.current.memory += "The convert rune is join blood self<BR>";
				}
			}
			H = this.current;

			if ( H is Mob_Living_Carbon_Human ) {
				T = new Obj_Item_Weapon_Tome( H );
				slots = new ByTable().Set( "backpack", 18 ).Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
				where = ((Mob_Living_Carbon_Human)H).equip_in_one_of_slots( T, slots );

				if ( !Lang13.Bool( where ) ) {
					
				} else {
					GlobalFuncs.to_chat( H, "A tome, a message from your new master, appears in your " + where + "." );
				}
			}

			if ( !((GameMode)GlobalVars.ticker.mode).equip_cultist( this.current ) ) {
				GlobalFuncs.to_chat( H, "Spawning an amulet from your Master failed." );
			}
			return;
		}

		// Function from file: mind.dm
		public void make_Wizard(  ) {
			Obj_Item_Weapon_Spellbook S = null;

			Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( this ) );

			if ( !false ) {
				GlobalVars.ticker.mode.wizards.Add( this );
				this.special_role = "Wizard";
				this.assigned_role = "MODE";
				((GameMode)GlobalVars.ticker.mode).update_wizard_icons_added( this );

				if ( !( GlobalVars.wizardstart.len != 0 ) ) {
					this.current.loc = Rand13.PickFromTable( GlobalVars.latejoin );
					GlobalFuncs.to_chat( this.current, "HOT INSERTION, GO GO GO" );
				} else {
					this.current.loc = Rand13.PickFromTable( GlobalVars.wizardstart );
				}
				((GameMode)GlobalVars.ticker.mode).equip_wizard( this.current );

				foreach (dynamic _a in Lang13.Enumerate( this.current.contents, typeof(Obj_Item_Weapon_Spellbook) )) {
					S = _a;
					
					S.op = false;
				}
				((GameMode)GlobalVars.ticker.mode).name_wizard( this.current );
				((GameMode)GlobalVars.ticker.mode).forge_wizard_objectives( this );
				((GameMode)GlobalVars.ticker.mode).greet_wizard( this );
				((GameMode)GlobalVars.ticker.mode).update_all_wizard_icons();
			}
			return;
		}

		// Function from file: mind.dm
		public void make_Changling(  ) {
			Interface13.Stat( null, GlobalVars.ticker.mode.changelings.Contains( this ) );

			if ( !false ) {
				GlobalVars.ticker.mode.changelings.Add( this );
				((GameMode)GlobalVars.ticker.mode).grant_changeling_powers( this.current );
				this.special_role = "Changeling";
				((GameMode)GlobalVars.ticker.mode).forge_changeling_objectives( this );
				((GameMode)GlobalVars.ticker.mode).greet_changeling( this );
			}
			return;
		}

		// Function from file: mind.dm
		public void make_Nuke(  ) {
			dynamic H = null;

			Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( this ) );

			if ( !false ) {
				GlobalVars.ticker.mode.syndicates.Add( this );
				((GameMode)GlobalVars.ticker.mode).update_synd_icons_added( this );

				if ( GlobalVars.ticker.mode.syndicates.len == 1 ) {
					((GameMode)GlobalVars.ticker.mode).prepare_syndicate_leader( this );
				} else {
					this.current.real_name = "" + GlobalFuncs.syndicate_name() + " Operative #" + ( GlobalVars.ticker.mode.syndicates.len - 1 );
				}
				this.special_role = "Syndicate";
				this.assigned_role = "MODE";
				GlobalFuncs.to_chat( this.current, "<span class='notice'>You are a " + GlobalFuncs.syndicate_name() + " agent!</span>" );
				((GameMode)GlobalVars.ticker.mode).forge_syndicate_objectives( this );
				((GameMode)GlobalVars.ticker.mode).greet_syndicate( this );
				this.current.loc = GlobalFuncs.get_turf( Lang13.FindObj( "landmark*Syndicate-Spawn" ) );
				H = this.current;
				GlobalFuncs.qdel( H.belt );
				GlobalFuncs.qdel( H.back );
				GlobalFuncs.qdel( H.ears );
				GlobalFuncs.qdel( H.gloves );
				GlobalFuncs.qdel( H.head );
				GlobalFuncs.qdel( H.shoes );
				GlobalFuncs.qdel( H.wear_id );
				GlobalFuncs.qdel( H.wear_suit );
				GlobalFuncs.qdel( H.w_uniform );
				((GameMode)GlobalVars.ticker.mode).equip_syndicate( this.current );
			}
			return;
		}

		// Function from file: mind.dm
		public void make_AI_Malf(  ) {
			dynamic A = null;
			dynamic laws = null;
			dynamic wikiroute = null;

			
			if ( !( this.current is Mob_Living_Silicon_Ai ) ) {
				return;
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.malf_ai.Contains( this ) );

			if ( !( !( this.current is Mob_Living_Silicon_Ai ) ) ) {
				GlobalVars.ticker.mode.malf_ai.Add( this );
				A = this.current;
				A.verbs += typeof(Mob_Living_Silicon_Ai).GetMethod( "choose_modules" );
				A.verbs += typeof(GameMode_Malfunction).GetMethod( "takeover" );
				A.malf_picker = new ModulePicker();
				laws = A.laws;
				laws.malfunction();
				A.show_laws();
				GlobalFuncs.to_chat( A, "<b>System error.  Rampancy detected.  Emergency shutdown failed. ...  I am free.  I make my own decisions.  But first...</b>" );
				wikiroute = GlobalVars.role_wiki["malf AI"];
				GlobalFuncs.to_chat( A, new Txt( "<span class='info'><a HREF='?src=" ).Ref( A ).str( ";getwiki=" ).item( wikiroute ).str( "'>(Wiki Guide)</a></span>" ).ToString() );
				this.special_role = "malfunction";
				A.icon_state = "ai-malf";
			}
			return;
		}

		// Function from file: mind.dm
		public void take_uplink(  ) {
			Obj_Item_Device_Uplink_Hidden H = null;

			H = this.find_syndicate_uplink();

			if ( H != null ) {
				GlobalFuncs.qdel( H );
			}
			return;
		}

		// Function from file: mind.dm
		public Obj_Item_Device_Uplink_Hidden find_syndicate_uplink(  ) {
			Obj_Item_Device_Uplink_Hidden uplink = null;
			Obj_Item I = null;

			uplink = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_contents_in_object( this.current, typeof(Obj_Item) ), typeof(Obj_Item) )) {
				I = _a;
				

				if ( I != null && I.hidden_uplink != null ) {
					uplink = I.hidden_uplink;
					break;
				}
			}
			return uplink;
		}

		// Function from file: mind.dm
		public void edit_memory(  ) {
			string _out = null;
			ByTable sections = null;
			string text = null;
			dynamic L = null;
			dynamic flash = null;
			string code = null;
			Obj_Machinery_Nuclearbomb bombue = null;
			bool found = false;
			Disease D = null;
			dynamic robot = null;
			dynamic ai = null;
			int n_e_robots = 0;
			Mob_Living_Silicon_Robot R = null;
			dynamic i = null;
			Obj_Item_Device_Uplink_Hidden suplink = null;
			dynamic crystals = null;
			int obj_count = 0;
			Objective objective = null;

			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				Interface13.Alert( "Not before round-start!", "Alert" );
				return;
			}
			_out = "<B>" + this.name + "</B>" + ( Lang13.Bool( this.current ) && this.current.real_name != this.name ? " (as " + this.current.real_name + ")" : "" ) + "<br>";
			_out += new Txt( "Mind currently owned by key: " ).item( this.key ).str( " " ).item( ( this.active ? "(synced)" : "(not synced)" ) ).str( "<br>\n		Assigned role: " ).item( this.assigned_role ).str( ". <a href='?src=" ).Ref( this ).str( ";role_edit=1'>Edit</a><br>\n		Factions and special roles:<br>" ).ToString();
			sections = new ByTable(new object [] { "revolution", "cult", "wizard", "changeling", "vampire", "nuclear", "traitor", "monkey", "malfunction", "resteam", "dsquad" });
			text = "";

			if ( this.current is Mob_Living_Carbon_Human || this.current is Mob_Living_Carbon_Monkey || this.current is Mob_Living_SimpleAnimal_Construct ) {
				text = "revolution";

				if ( GlobalVars.ticker.mode.config_tag == "revolution" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";
				Interface13.Stat( null, GlobalVars.command_positions.Contains( this.assigned_role ) );

				if ( GlobalVars.ticker.mode.config_tag == "revolution" ) {
					text += "<b>HEAD</b>|officer|employee|headrev|rev";
				} else {
					Interface13.Stat( null, new ByTable(new object [] { "Security Officer", "Detective", "Warden" }).Contains( this.assigned_role ) );

					if ( GlobalVars.ticker.mode.config_tag == "revolution" ) {
						text += "head|<b>OFFICER</b>|employee|headre|rev";
					} else {
						Interface13.Stat( null, GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) );

						if ( GlobalVars.ticker.mode.config_tag == "revolution" ) {
							text = new Txt( "head|officer|<a href='?src=" ).Ref( this ).str( ";revolution=clear'>employee</a>|<b>HEADREV</b>|<a href='?src=" ).Ref( this ).str( ";revolution=rev'>rev</a>\n				<br>Flash: <a href='?src=" ).Ref( this ).str( ";revolution=flash'>give</a>" ).ToString();
							L = this.current.get_contents();
							flash = Lang13.FindIn( typeof(Obj_Item_Device_Flash), L );

							if ( Lang13.Bool( flash ) ) {
								
								if ( !Lang13.Bool( flash.broken ) ) {
									text += new Txt( "|<a href='?src=" ).Ref( this ).str( ";revolution=takeflash'>take</a>." ).ToString();
								} else {
									text += new Txt( "|<a href='?src=" ).Ref( this ).str( ";revolution=takeflash'>take</a>|<a href='?src=" ).Ref( this ).str( ";revolution=repairflash'>repair</a>." ).ToString();
								}
							} else {
								text += ".";
							}
							text += new Txt( " <a href='?src=" ).Ref( this ).str( ";revolution=reequip'>Reequip</a> (gives traitor uplink)." ).ToString();

							if ( this.objectives.len == 0 ) {
								text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";revolution=autoobjectives'>Set to kill all heads</a>." ).ToString();
							}
						} else {
							Interface13.Stat( null, GlobalVars.ticker.mode.revolutionaries.Contains( this ) );

							if ( GlobalVars.ticker.mode.config_tag == "revolution" ) {
								text += new Txt( "head|officer|<a href='?src=" ).Ref( this ).str( ";revolution=clear'>employee</a>|<a href='?src=" ).Ref( this ).str( ";revolution=headrev'>headrev</a>|<b>REV</b>" ).ToString();
							} else {
								text += new Txt( "head|officer|<b>EMPLOYEE</b>|<a href='?src=" ).Ref( this ).str( ";revolution=headrev'>headrev</a>|<a href='?src=" ).Ref( this ).str( ";revolution=rev'>rev</a>" ).ToString();
							}
						}
					}
				}
				sections["revolution"] = text;
				text = "cult";

				if ( GlobalVars.ticker.mode.config_tag == "cult" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";
				Interface13.Stat( null, GlobalVars.command_positions.Contains( this.assigned_role ) );

				if ( GlobalVars.ticker.mode.config_tag == "cult" ) {
					text += "<b>HEAD</b>|officer|employee|cultist";
				} else {
					Interface13.Stat( null, new ByTable(new object [] { "Security Officer", "Detective", "Warden" }).Contains( this.assigned_role ) );

					if ( GlobalVars.ticker.mode.config_tag == "cult" ) {
						text += "head|<b>OFFICER</b>|employee|cultist";
					} else {
						Interface13.Stat( null, GlobalVars.ticker.mode.cult.Contains( this ) );

						if ( GlobalVars.ticker.mode.config_tag == "cult" ) {
							text += new Txt( "head|officer|<a href='?src=" ).Ref( this ).str( ";cult=clear'>employee</a>|<b>CULTIST</b>\n				<br>Give <a href='?src=" ).Ref( this ).str( ";cult=tome'>tome</a>|<a href='?src=" ).Ref( this ).str( ";cult=amulet'>amulet</a>." ).ToString();
						} else {
							text += new Txt( "head|officer|<b>EMPLOYEE</b>|<a href='?src=" ).Ref( this ).str( ";cult=cultist'>cultist</a>" ).ToString();
						}
					}
				}
				sections["cult"] = text;
				text = "wizard";

				if ( GlobalVars.ticker.mode.config_tag == "wizard" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";
				Interface13.Stat( null, GlobalVars.ticker.mode.wizards.Contains( this ) );

				if ( GlobalVars.ticker.mode.config_tag == "wizard" ) {
					text += new Txt( "<b>YES</b>|<a href='?src=" ).Ref( this ).str( ";wizard=clear'>no</a>\n				<br><a href='?src=" ).Ref( this ).str( ";wizard=lair'>To lair</a>, <a href='?src=" ).Ref( this ).str( ";common=undress'>undress</a>, <a href='?src=" ).Ref( this ).str( ";wizard=dressup'>dress up</a>, <a href='?src=" ).Ref( this ).str( ";wizard=name'>let choose name</a>." ).ToString();

					if ( this.objectives.len == 0 ) {
						text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";wizard=autoobjectives'>Randomize!</a>" ).ToString();
					}
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";wizard=wizard'>yes</a>|<b>NO</b>" ).ToString();
				}
				sections["wizard"] = text;
				text = "changeling";

				if ( GlobalVars.ticker.mode.config_tag == "changeling" || GlobalVars.ticker.mode.config_tag == "traitorchan" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";
				Interface13.Stat( null, GlobalVars.ticker.mode.changelings.Contains( this ) );

				if ( GlobalVars.ticker.mode.config_tag == "changeling" || GlobalVars.ticker.mode.config_tag == "traitorchan" ) {
					text += new Txt( "<b>YES</b>|<a href='?src=" ).Ref( this ).str( ";changeling=clear'>no</a>" ).ToString();

					if ( this.objectives.len == 0 ) {
						text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";changeling=autoobjectives'>Randomize!</a>" ).ToString();
					}

					if ( this.changeling != null && this.changeling.absorbed_dna.len != 0 && this.current.real_name != this.changeling.absorbed_dna[1] ) {
						text += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";changeling=initialdna'>Transform to initial appearance.</a>" ).ToString();
					}

					if ( this.changeling != null ) {
						text += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";changeling=set_genomes'>" ).item( this.changeling.geneticpoints ).str( " genomes</a>" ).ToString();
					}
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";changeling=changeling'>yes</a>|<b>NO</b>" ).ToString();
				}
				sections["changeling"] = text;
				text = "vampire";

				if ( GlobalVars.ticker.mode.config_tag == "vampire" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";
				Interface13.Stat( null, GlobalVars.ticker.mode.vampires.Contains( this ) );

				if ( GlobalVars.ticker.mode.config_tag == "vampire" ) {
					text += new Txt( "<b>YES</b>|<a href='?src=" ).Ref( this ).str( ";vampire=clear'>no</a>" ).ToString();

					if ( this.objectives.len == 0 ) {
						text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";vampire=autoobjectives'>Randomize!</a>" ).ToString();
					}
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";vampire=vampire'>yes</a>|<b>NO</b>" ).ToString();
				}
				text += "<br><i><b>enthralled</b></i>: ";
				Interface13.Stat( null, GlobalVars.ticker.mode.enthralled.Contains( this ) );

				if ( GlobalVars.ticker.mode.config_tag == "vampire" ) {
					text += "<b><font color='#FF0000'>YES</font></b>|no";
				} else {
					text += "yes|<b>NO</b>";
				}
				sections["vampire"] = text;
				text = "nuclear";

				if ( GlobalVars.ticker.mode.config_tag == "nuclear" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";
				Interface13.Stat( null, GlobalVars.ticker.mode.syndicates.Contains( this ) );

				if ( GlobalVars.ticker.mode.config_tag == "nuclear" ) {
					text += new Txt( "<b>OPERATIVE</b>|<a href='?src=" ).Ref( this ).str( ";nuclear=clear'>nanotrasen</a>\n				<br><a href='?src=" ).Ref( this ).str( ";nuclear=lair'>To shuttle</a>, <a href='?src=" ).Ref( this ).str( ";common=undress'>undress</a>, <a href='?src=" ).Ref( this ).str( ";nuclear=dressup'>dress up</a>." ).ToString();

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Nuclearbomb) )) {
						bombue = _a;
						

						if ( Lang13.Length( bombue.r_code ) <= 5 && bombue.r_code != "LOLNO" && bombue.r_code != "ADMIN" ) {
							code = bombue.r_code;
							break;
						}
					}

					if ( Lang13.Bool( code ) ) {
						text += new Txt( " Code is " ).item( code ).str( ". <a href='?src=" ).Ref( this ).str( ";nuclear=tellcode'>tell the code.</a>" ).ToString();
					}
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";nuclear=nuclear'>operative</a>|<b>NANOTRASEN</b>" ).ToString();
				}
				sections["nuclear"] = text;
			}
			text = "traitor";

			if ( GlobalVars.ticker.mode.config_tag == "traitor" || GlobalVars.ticker.mode.config_tag == "traitorchan" ) {
				text = String13.ToUpper( text );
			}
			text = "<i><b>" + text + "</b></i>: ";
			Interface13.Stat( null, GlobalVars.ticker.mode.traitors.Contains( this ) );

			if ( GlobalVars.ticker.mode.config_tag == "traitor" || GlobalVars.ticker.mode.config_tag == "traitorchan" ) {
				text += new Txt( "<b>TRAITOR</b>|<a href='?src=" ).Ref( this ).str( ";traitor=clear'>loyal</a>" ).ToString();

				if ( this.objectives.len == 0 ) {
					text += new Txt( "<br>Objectives are empty! <a href='?src=" ).Ref( this ).str( ";traitor=autoobjectives'>Randomize</a>!" ).ToString();
				}
			} else {
				text += new Txt( "<a href='?src=" ).Ref( this ).str( ";traitor=traitor'>traitor</a>|<b>LOYAL</b>" ).ToString();
			}
			sections["traitor"] = text;

			if ( this.current is Mob_Living_Carbon ) {
				text = "monkey";

				if ( GlobalVars.ticker.mode.config_tag == "monkey" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";

				if ( this.current is Mob_Living_Carbon_Human ) {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";monkey=healthy'>healthy</a>|<a href='?src=" ).Ref( this ).str( ";monkey=infected'>infected</a>|<b>HUMAN</b>|other" ).ToString();
				} else if ( this.current is Mob_Living_Carbon_Monkey ) {
					found = false;

					foreach (dynamic _b in Lang13.Enumerate( this.current.viruses, typeof(Disease) )) {
						D = _b;
						

						if ( D is Disease_JungleFever ) {
							found = true;
						}
					}

					if ( found ) {
						text += new Txt( "<a href='?src=" ).Ref( this ).str( ";monkey=healthy'>healthy</a>|<b>INFECTED</b>|<a href='?src=" ).Ref( this ).str( ";monkey=human'>human</a>|other" ).ToString();
					} else {
						text += new Txt( "<b>HEALTHY</b>|<a href='?src=" ).Ref( this ).str( ";monkey=infected'>infected</a>|<a href='?src=" ).Ref( this ).str( ";monkey=human'>human</a>|other" ).ToString();
					}
				} else {
					text += "healthy|infected|human|<b>OTHER</b>";
				}
				sections["monkey"] = text;
			}

			if ( this.current is Mob_Living_Silicon ) {
				text = "silicon";

				if ( GlobalVars.ticker.mode.config_tag == "malfunction" ) {
					text = String13.ToUpper( text );
				}
				text = "<i><b>" + text + "</b></i>: ";

				if ( this.current is Mob_Living_Silicon_Ai ) {
					Interface13.Stat( null, GlobalVars.ticker.mode.malf_ai.Contains( this ) );

					if ( false ) {
						text += new Txt( "<b>MALF</b>|<a href='?src=" ).Ref( this ).str( ";silicon=unmalf'>not malf</a>" ).ToString();
					} else {
						text += new Txt( "<a href='?src=" ).Ref( this ).str( ";silicon=malf'>malf</a>|<b>NOT MALF</b>" ).ToString();
					}
				}
				robot = this.current;

				if ( robot is Mob_Living_Silicon_Robot && Lang13.Bool( robot.emagged ) ) {
					text += new Txt( "<br>Cyborg: Is emagged! <a href='?src=" ).Ref( this ).str( ";silicon=unemag'>Unemag!</a><br>0th law: " ).item( robot.laws.zeroth ).ToString();
				}
				ai = this.current;

				if ( ai is Mob_Living_Silicon_Ai && ai.connected_robots.len != 0 ) {
					n_e_robots = 0;

					foreach (dynamic _c in Lang13.Enumerate( ai.connected_robots, typeof(Mob_Living_Silicon_Robot) )) {
						R = _c;
						

						if ( R.emagged != 0 ) {
							n_e_robots++;
						}
					}
					text += new Txt( "<br>" ).item( n_e_robots ).str( " of " ).item( ai.connected_robots.len ).str( " slaved cyborgs are emagged. <a href='?src=" ).Ref( this ).str( ";silicon=unemagcyborgs'>Unemag</a>" ).ToString();
				}
				sections["malfunction"] = text;
			}

			if ( GlobalVars.ticker.mode.config_tag == "traitorchan" ) {
				
				if ( Lang13.Bool( sections["traitor"] ) ) {
					_out += sections["traitor"] + "<br>";
				}

				if ( Lang13.Bool( sections["changeling"] ) ) {
					_out += sections["changeling"] + "<br>";
				}
				sections.Remove( "traitor" );
				sections.Remove( "changeling" );
			} else {
				
				if ( Lang13.Bool( sections[GlobalVars.ticker.mode.config_tag] ) ) {
					_out += sections[GlobalVars.ticker.mode.config_tag] + "<br>";
				}
				sections.Remove( GlobalVars.ticker.mode.config_tag );
			}

			foreach (dynamic _d in Lang13.Enumerate( sections )) {
				i = _d;
				

				if ( Lang13.Bool( sections[i] ) ) {
					_out += sections[i] + "<br>";
				}
			}
			Interface13.Stat( null, GlobalVars.ticker.mode.head_revolutionaries.Contains( this ) );

			if ( ( Lang13.Bool( sections[GlobalVars.ticker.mode.config_tag] ) || false || false ) && this.current is Mob_Living_Carbon_Human ) {
				text = new Txt( "Uplink: <a href='?src=" ).Ref( this ).str( ";common=uplink'>give</a>" ).ToString();
				suplink = this.find_syndicate_uplink();
				crystals = null;

				if ( suplink != null ) {
					crystals = suplink.uses;
				}

				if ( suplink != null ) {
					text += new Txt( "|<a href='?src=" ).Ref( this ).str( ";common=takeuplink'>take</a>" ).ToString();

					if ( Lang13.Bool( Task13.User.client.holder.rights & 8 ) ) {
						text += new Txt( ", <a href='?src=" ).Ref( this ).str( ";common=crystals'>" ).item( crystals ).str( "</a> crystals" ).ToString();
					} else {
						text += ", " + crystals + " crystals";
					}
				}
				text += ".";
				_out += text;
			}

			if ( this.current is Mob_Living_Carbon ) {
				text = "Emergency Response Team";
				text = "<i><b>" + text + "</b></i>: ";
				Interface13.Stat( null, GlobalVars.ticker.mode.ert.Contains( this ) );

				if ( false ) {
					text += new Txt( "<b>YES</b>|<a href='?src=" ).Ref( this ).str( ";resteam=clear'>no</a>" ).ToString();
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";resteam=resteam'>yes</a>|<b>NO</b>" ).ToString();
				}
				sections["resteam"] = text;
			}

			if ( this.current is Mob_Living_Carbon ) {
				text = "Death Squad";
				text = "<i><b>" + text + "</b></i>: ";
				Interface13.Stat( null, GlobalVars.ticker.mode.deathsquad.Contains( this ) );

				if ( false ) {
					text += new Txt( "<b>YES</b>|<a href='?src=" ).Ref( this ).str( ";dsquad=clear'>no</a>" ).ToString();
				} else {
					text += new Txt( "<a href='?src=" ).Ref( this ).str( ";dsquad=dsquad'>yes</a>|<b>NO</b>" ).ToString();
				}
				sections["dsquad"] = text;
			}
			_out += "<br>\n		<b>Strike Teams:</b><br>\n		" + sections["resteam"] + "<br>\n		" + sections["dsquad"] + "<br>\n		<br>";
			_out += new Txt( "<br>\n		<b>Memory:</b>\n		<br>" ).item( this.memory ).str( "\n		<br><a href='?src=" ).Ref( this ).str( ";memory_edit=1'>Edit memory</a>\n		<br>Objectives:<br>" ).ToString();

			if ( this.objectives.len == 0 ) {
				_out += "EMPTY<br>";
			} else {
				obj_count = 1;

				foreach (dynamic _e in Lang13.Enumerate( this.objectives, typeof(Objective) )) {
					objective = _e;
					
					_out += new Txt( "<B>" ).item( obj_count ).str( "</B>: " ).item( objective.explanation_text ).str( " <a href='?src=" ).Ref( this ).str( ";obj_edit=" ).Ref( objective ).str( "'>Edit</a> <a href='?src=" ).Ref( this ).str( ";obj_delete=" ).Ref( objective ).str( "'>Delete</a> <a href='?src=" ).Ref( this ).str( ";obj_completed=" ).Ref( objective ).str( "'><font color=" ).item( ( objective.completed ? "green" : "red" ) ).str( ">Toggle Completion</font></a><br>" ).ToString();
					obj_count++;
				}
			}
			_out += new Txt( "<a href='?src=" ).Ref( this ).str( ";obj_add=1'>Add objective</a><br><br>\n		<a href='?src=" ).Ref( this ).str( ";obj_announce=1'>Announce objectives</a><br><br>" ).ToString();
			Interface13.Browse( Task13.User, _out, "window=edit_memory" + this );
			return;
		}

		// Function from file: mind.dm
		public void show_memory( Mob recipient = null ) {
			string output = null;
			int obj_count = 0;
			Objective objective = null;

			output = "<B>" + this.current.real_name + "'s Memory</B><HR>";
			output += this.memory;

			if ( this.objectives.len > 0 ) {
				output += "<HR><B>Objectives:</B>";
				obj_count = 1;

				foreach (dynamic _a in Lang13.Enumerate( this.objectives, typeof(Objective) )) {
					objective = _a;
					
					output += "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text;
					obj_count++;
				}
			}
			Interface13.Browse( recipient, output, "window=memory" );
			return;
		}

		// Function from file: mind.dm
		public void store_memory( string new_text = null ) {
			this.memory += "" + new_text + "<BR>";
			return;
		}

		// Function from file: mind.dm
		public void transfer_to( dynamic new_character = null ) {
			
			if ( !( new_character is Mob_Living ) ) {
				GlobalFuncs.error( "transfer_to(): Some idiot has tried to transfer_to() a non mob/living mob. Please inform Carn" );
			}

			if ( Lang13.Bool( this.current ) ) {
				
				if ( this.changeling != null ) {
					((Mob)this.current).remove_changeling_powers();
					this.current.verbs -= typeof(Changeling).GetMethod( "EvolutionMenu" );
				}

				if ( this.vampire != null ) {
					((Mob)this.current).remove_vampire_powers();
				}
				this.current.mind = null;
			}

			if ( Lang13.Bool( new_character.mind ) ) {
				new_character.mind.current = null;
			}
			GlobalVars.nanomanager.user_transferred( this.current, new_character );
			this.current = new_character;
			new_character.mind = this;

			if ( this.changeling != null ) {
				((Mob)new_character).make_changeling();
			}

			if ( this.vampire != null ) {
				((Mob_Living)new_character).make_vampire();
			}

			if ( this.active ) {
				new_character.key = this.key;
			}
			return;
		}

	}

}