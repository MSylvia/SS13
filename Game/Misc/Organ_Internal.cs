// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Organ_Internal : Organ {

		public double damage = 0;
		public double min_bruised_damage = 10;
		public double min_broken_damage = 30;
		public string parent_organ = "chest";
		public int robotic = 0;
		public Type removed_type = null;
		public ByTable transplant_data = null;
		public int? rejecting = null;
		public dynamic organ_holder = null;
		public dynamic owner_dna = null;

		// Function from file: organ_internal.dm
		public Organ_Internal ( Mob_Living_Carbon_Human H = null ) {
			dynamic E = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( H != null ) {
				E = H.organs_by_name[this.parent_organ];

				if ( E.internal_organs == null ) {
					E.internal_organs = new ByTable();
				}
				E.internal_organs |= this;
				H.internal_organs.Or( this );
				this.owner = H;
			}
			return;
		}

		// Function from file: organ_internal.dm
		public override bool process(  ) {
			int antibiotics = 0;
			dynamic parent = null;

			
			if ( this.robotic >= 2 || Lang13.Bool( this.owner.species ) && Lang13.Bool( this.owner.species.flags & 512 ) ) {
				this.germ_level = 0;
				return false;
			}

			if ( Convert.ToDouble( this.owner.bodytemperature ) >= 170 ) {
				this.handle_antibiotics();
				antibiotics = ((Reagents)this.owner.reagents).get_reagent_amount( "spaceacillin" ) ?1:0;

				if ( this.germ_level > 0 && this.germ_level < 50 && Rand13.PercentChance( 30 ) ) {
					this.germ_level--;
				}

				if ( this.germ_level >= 50 ) {
					
					if ( antibiotics < 5 && Rand13.PercentChance( Num13.Floor( this.germ_level / 6 ) ) ) {
						this.germ_level++;
					}
				}

				if ( this.germ_level >= 500 ) {
					parent = this.owner.get_organ( this.parent_organ );

					if ( antibiotics < 5 && Convert.ToDouble( parent.germ_level ) < this.germ_level && ( Convert.ToDouble( parent.germ_level ) < 200 || Rand13.PercentChance( 30 ) ) ) {
						parent.germ_level++;
					}

					if ( Rand13.PercentChance( 3 ) ) {
						this.take_damage( 1, Rand13.PercentChance( 30 ) );
					}
				}

				if ( this.transplant_data != null ) {
					
					if ( !Lang13.Bool( this.rejecting ) ) {
						
						if ( this.owner.species.name != this.transplant_data["species"] ) {
							this.rejecting = 1;
						} else if ( Rand13.PercentChance( 20 ) && this.owner.dna != null && GlobalFuncs.blood_incompatible( this.transplant_data["blood_type"], this.owner.dna.b_type ) ) {
							this.rejecting = 1;
						}
					} else {
						this.rejecting++;

						if ( ( this.rejecting ??0) % 10 == 0 ) {
							
							dynamic _a = this.rejecting; // Was a switch-case, sorry for the mess.
							if ( 1<=_a&&_a<=50 ) {
								this.take_damage( Rand13.Int( 1, 2 ) );
							} else if ( 51<=_a&&_a<=200 ) {
								this.take_damage( Rand13.Int( 2, 3 ) );
							} else if ( 201<=_a&&_a<=500 ) {
								this.take_damage( Rand13.Int( 3, 4 ) );
								((Reagents)this.owner.reagents).add_reagent( "toxin", 1 );
							} else if ( 501<=_a&&_a<=Double.PositiveInfinity ) {
								this.take_damage( 5 );
								((Reagents)this.owner.reagents).add_reagent( "toxin", Rand13.Int( 3, 5 ) );
							}
						}
					}
				}
			}
			return false;
		}

		// Function from file: organ_internal.dm
		public dynamic remove( dynamic user = null ) {
			dynamic removed_organ = null;

			
			if ( !( this.removed_type != null ) ) {
				return 0;
			}
			removed_organ = Lang13.Call( this.removed_type, GlobalFuncs.get_turf( user ) );

			if ( removed_organ is Obj_Item_Organ ) {
				removed_organ.organ_data = this;
				removed_organ.update();
				this.organ_holder = removed_organ;
			}
			return removed_organ;
		}

		// Function from file: organ_internal.dm
		public void mechassist(  ) {
			this.robotic = 1;
			this.min_bruised_damage = 15;
			this.min_broken_damage = 35;
			return;
		}

		// Function from file: organ_internal.dm
		public void mechanize(  ) {
			this.robotic = 2;
			return;
		}

		// Function from file: organ_internal.dm
		public void emp_act( int severity = 0 ) {
			
			switch ((int)( this.robotic )) {
				case 0:
					return;
					break;
				case 1:
					
					switch ((int)( severity )) {
						case 1:
							this.take_damage( 20, false );
							return;
							break;
						case 2:
							this.take_damage( 7, false );
							return;
							break;
						case 3:
							this.take_damage( 3, false );
							return;
							break;
					}
					break;
				case 2:
					
					switch ((int)( severity )) {
						case 1:
							this.take_damage( 40, false );
							return;
							break;
						case 2:
							this.take_damage( 15, false );
							return;
							break;
						case 3:
							this.take_damage( 10, false );
							return;
							break;
					}
					break;
			}
			return;
		}

		// Function from file: organ_internal.dm
		public void take_damage( double amount = 0, bool? silent = null ) {
			silent = silent ?? false;

			dynamic parent = null;

			
			if ( !( this.owner != null ) ) {
				return;
			}

			if ( this.robotic == 2 ) {
				this.damage += amount * 0.8;
			} else {
				this.damage += amount;
			}
			parent = this.owner.get_organ( this.parent_organ );

			if ( !( silent == true ) ) {
				this.owner.custom_pain( "Something inside your " + parent.display_name + " hurts a lot.", true );
			}
			return;
		}

		// Function from file: organ_internal.dm
		public bool is_broken(  ) {
			return this.damage >= this.min_broken_damage;
		}

		// Function from file: organ_internal.dm
		public bool is_bruised(  ) {
			return this.damage >= this.min_bruised_damage;
		}

		// Function from file: organ_internal.dm
		public void rejuvenate(  ) {
			this.damage = 0;
			return;
		}

		// Function from file: organ_internal.dm
		public override dynamic Copy(  ) {
			dynamic I = null;

			I = base.Copy();
			I.damage = this.damage;
			I.min_bruised_damage = this.min_bruised_damage;
			I.min_broken_damage = this.min_broken_damage;
			I.parent_organ = this.parent_organ;
			I.robotic = this.robotic;
			I.removed_type = this.removed_type;
			I.transplant_data = this.transplant_data;
			I.rejecting = this.rejecting;
			I.organ_holder = null;
			I.owner_dna = this.owner_dna;
			return I;
		}

	}

}