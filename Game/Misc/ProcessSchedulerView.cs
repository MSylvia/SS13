// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ProcessSchedulerView : Game_Data {

		public HtmlInterface v_interface = null;

		// Function from file: processSchedulerView.dm
		public ProcessSchedulerView (  ) {
			this.v_interface = new HtmlInterface( this, "Process Scheduler Detail", 800, 600, GlobalVars.head );
			GlobalVars.html_machines.Add( this );
			return;
		}

		// Function from file: processSchedulerView.dm
		public void getContext(  ) {
			string text = null;

			text = new Txt( "\n	<h2>Process Scheduler</h2>\n	<a href='?src=" ).Ref( this ).str( ";action=refresh'>Refresh</a>\n	<h3>The process scheduler controls " ).item( GlobalVars.processScheduler.getProcessCount() ).str( " loops.<h3>" ).ToString();
			text += "<div class='statusDisplay'>";
			text += "<div id=\"processTable\">";
			text += this.getProcessTable();
			text += "</div></div></body></html>";
			this.v_interface.updateLayout( "<div id=\"content\"></div>" );
			this.v_interface.updateContent( "content", text );
			return;
		}

		// Function from file: processSchedulerView.dm
		public void refreshTable(  ) {
			string text = null;

			text = this.getProcessTable();
			this.v_interface.updateContent( "processTable", text );
			return;
		}

		// Function from file: processSchedulerView.dm
		public string getProcessTable(  ) {
			string text = null;
			ByTable data = null;

			text = "<table><thead><tr><td>Name</td><td colspan=2>Avg(s)</td><td colspan=2>Last(s)</td><td colspan=2>Highest(s)</td><td colspan=2>Tickcount</td><td colspan=2>Tickrate</td><td>State</td><td>Action</td></tr></thead><tbody>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.processScheduler.getStatusData(), typeof(ByTable) )) {
				data = _a;
				
				text += "<tr>";
				text += "<td>" + data["name"] + "</td>";
				text += "<td colspan=2>" + String13.NumberToString( Convert.ToDouble( data["averageRunTime"] / 10 ), 3 ) + "</td>";
				text += "<td colspan=2>" + String13.NumberToString( Convert.ToDouble( data["lastRunTime"] / 10 ), 3 ) + "</td>";
				text += "<td colspan=2>" + String13.NumberToString( Convert.ToDouble( data["highestRunTime"] / 10 ), 3 ) + "</td>";
				text += "<td colspan=2>" + String13.NumberToString( Convert.ToDouble( data["ticks"] ), 4 ) + "</td>";
				text += "<td colspan=2>" + data["schedule"] + "</td>";
				text += "<td>" + data["status"] + "</td>";
				text += new Txt( "<td><a href=\"?src=" ).Ref( this ).str( ";action=kill;name=" ).item( data["name"] ).str( "\">Kill</a>" ).ToString();

				if ( Lang13.Bool( data["disabled"] ) ) {
					text += new Txt( "<a href=\"?src=" ).Ref( this ).str( ";action=enable;name=" ).item( data["name"] ).str( "\">Enable</a>" ).ToString();
				} else {
					text += new Txt( "<a href=\"?src=" ).Ref( this ).str( ";action=disable;name=" ).item( data["name"] ).str( "\">Disable</a>" ).ToString();
				}
				text += "</td>";
				text += "</tr>";
			}
			text += "</tbody></table>";
			return text;
		}

		// Function from file: processSchedulerView.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string toKill = null;
			string toEnable = null;
			string toDisable = null;

			
			if ( !GlobalFuncs.check_rights( 32 ) ) {
				return null;
			}

			if ( !Lang13.Bool( href_list["action"] ) ) {
				return null;
			}

			dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
			if ( _a=="kill" ) {
				toKill = href_list["name"];
				GlobalVars.processScheduler.killProcess( toKill );
				this.refreshTable();
			} else if ( _a=="enable" ) {
				toEnable = href_list["name"];
				GlobalVars.processScheduler.enableProcess( toEnable );
				this.refreshTable();
			} else if ( _a=="disable" ) {
				toDisable = href_list["name"];
				GlobalVars.processScheduler.disableProcess( toDisable );
				this.refreshTable();
			} else if ( _a=="refresh" ) {
				this.refreshTable();
			}
			return null;
		}

	}

}