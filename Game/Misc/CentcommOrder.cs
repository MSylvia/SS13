// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class CentcommOrder : Game_Data {

		public int id = 0;
		public string name = "CentComm";
		public MoneyAccount acct = null;
		public bool credits_min = false;
		public bool credits_max = false;
		public bool worth = false;
		public bool must_be_in_crate = true;
		public bool recurring = false;
		public ByTable requested = new ByTable();
		public ByTable fulfilled = new ByTable();

		// Function from file: centcomm_orders.dm
		public CentcommOrder (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.id = GlobalVars.current_centcomm_order_id++;
			return;
		}

		// Function from file: centcomm_orders.dm
		public void OnPostUnload(  ) {
			return;
		}

		// Function from file: centcomm_orders.dm
		public void Pay(  ) {
			this.acct.charge( -( this.worth ?1:0), null, "Payment for order #" + this.id, null, null, this.name );
			return;
		}

		// Function from file: centcomm_orders.dm
		public virtual bool CheckFulfilled( dynamic O = null, dynamic in_crate = null ) {
			dynamic typepath = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.requested )) {
				typepath = _a;
				

				if ( !this.fulfilled.Contains( typepath ) || Convert.ToDouble( this.fulfilled[typepath] ) < Convert.ToDouble( this.requested[typepath] ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: centcomm_orders.dm
		public virtual bool CheckShuttleObject( Ent_Static O = null, bool in_crate = false ) {
			
			if ( this.must_be_in_crate && !in_crate ) {
				return false;
			}

			if ( !( O != null ) ) {
				return false;
			}

			if ( this.requested.Contains( O.type ) ) {
				
				if ( !this.fulfilled.Contains( O.type ) ) {
					this.fulfilled[O.type] = 0;
				}

				if ( this.fulfilled[O.type] == this.requested[O.type] ) {
					return false;
				}
				this.fulfilled[O.type] = this.fulfilled[O.type] + 1;
				GlobalFuncs.qdel( O );
				return true;
			}
			return false;
		}

	}

}