// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GlobalIterator_MechaGenerator : GlobalIterator {

		public GlobalIterator_MechaGenerator ( ByTable arguments = null, bool? autostart = null ) : base( arguments, autostart ) {
			
		}

		// Function from file: tools.dm
		public override bool process( Obj port = null, dynamic mecha = null ) {
			dynamic cur_charge = null;
			dynamic use_fuel = null;

			
			if ( !Lang13.Bool( ((dynamic)port).chassis ) ) {
				this.stop();
				((dynamic)port).set_ready_state( 1 );
				return false;
			}

			if ( Convert.ToDouble( ((dynamic)port).fuel.amount ) <= 0 ) {
				this.stop();
				((dynamic)port).log_message( "Deactivated - no fuel." );
				((dynamic)port).set_ready_state( 1 );
				return false;
			}

			if ( GlobalFuncs.anyprob( port.reliability ) ) {
				((dynamic)port).critfail();
				this.stop();
				return false;
			}
			cur_charge = ((Obj_Mecha)((dynamic)port).chassis).get_charge();

			if ( cur_charge == null ) {
				((dynamic)port).set_ready_state( 1 );
				((dynamic)port).occupant_message( "No powercell detected." );
				((dynamic)port).log_message( "Deactivated." );
				this.stop();
				return false;
			}
			use_fuel = ((dynamic)port).fuel_per_cycle_idle;

			if ( Convert.ToDouble( cur_charge ) < Convert.ToDouble( ((dynamic)port).chassis.cell.maxcharge ) ) {
				use_fuel = ((dynamic)port).fuel_per_cycle_active;
				((Obj_Mecha)((dynamic)port).chassis).give_power( Convert.ToDouble( ((dynamic)port).power_per_cycle ) );
			}
			((dynamic)port).fuel.amount -= Num13.MinInt( Convert.ToInt32( use_fuel / ((dynamic)port).fuel.perunit ), Convert.ToInt32( ((dynamic)port).fuel.amount ) );
			((dynamic)port).update_equip_info();
			return true;
		}

	}

}