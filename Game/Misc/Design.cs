// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Design : Game_Data {

		public string name = "Name";
		public dynamic desc = "Desc";
		public string id = "id";
		public ByTable req_tech = new ByTable();
		public int reliability_mod = 0;
		public int reliability_base = 100;
		public int reliability = 100;
		public int build_type = 0;
		public ByTable materials = new ByTable();
		public dynamic build_path = null;
		public bool locked = false;
		public ByTable req_lock_access = null;
		public string category = "Misc";

		// Function from file: designs.dm
		public double MatTotal(  ) {
			double total = 0;
			dynamic matID = null;

			total = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.materials )) {
				matID = _a;
				
				total += Convert.ToDouble( this.materials[matID] );
			}
			return total;
		}

		// Function from file: designs.dm
		public double TechTotal(  ) {
			double total = 0;
			dynamic tech = null;

			total = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.req_tech )) {
				tech = _a;
				
				total += Convert.ToDouble( this.req_tech[tech] );
			}
			return total;
		}

		// Function from file: designs.dm
		public void CalcReliability( ByTable temp_techs = null ) {
			int new_reliability = 0;
			Tech T = null;

			new_reliability = this.reliability_mod + this.reliability_base;

			foreach (dynamic _a in Lang13.Enumerate( temp_techs, typeof(Tech) )) {
				T = _a;
				

				if ( this.req_tech.Contains( T.id ) ) {
					new_reliability += T.level;
				}
			}
			new_reliability = ( new_reliability <= this.reliability_base ? this.reliability_base : ( new_reliability >= 100 ? 100 : new_reliability ) );
			this.reliability = new_reliability;
			return;
		}

	}

}