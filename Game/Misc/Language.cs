// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Language : Game_Data {

		public string name = "an unknown language";
		public string desc = "A language.";
		public string speech_verb = "says";
		public string ask_verb = "asks";
		public string exclaim_verb = "exclaims";
		public string whisper_verb = "whispers";
		public string colour = "body";
		public string key = "x";
		public int flags = 0;
		public bool native = false;
		public ByTable syllables = null;
		public int space_chance = 55;
		public ByTable scramble_cache = new ByTable();

		// Function from file: language.dm
		public dynamic scramble( string input = null ) {
			dynamic n = null;
			int input_size = 0;
			string scrambled_text = null;
			bool capitalize = false;
			dynamic next = null;
			int chance = 0;
			string ending = null;
			string input_ending = null;

			
			if ( !( this.syllables != null ) || !( this.syllables.len != 0 ) ) {
				return GlobalFuncs.stars( input );
			}
			Interface13.Stat( null, this.scramble_cache.Contains( input ) );

			if ( !( this.syllables != null ) || !( this.syllables.len != 0 ) ) {
				n = this.scramble_cache[input];
				this.scramble_cache.Remove( input );
				this.scramble_cache[input] = n;
				return n;
			}
			input_size = Lang13.Length( input );
			scrambled_text = "";
			capitalize = true;

			while (Lang13.Length( scrambled_text ) < input_size) {
				next = Rand13.PickFromTable( this.syllables );

				if ( capitalize ) {
					next = GlobalFuncs.capitalize( next );
					capitalize = false;
				}
				scrambled_text += next;
				chance = Rand13.Int( 100 );

				if ( chance <= 5 ) {
					scrambled_text += ". ";
					capitalize = true;
				} else if ( chance > 5 && chance <= this.space_chance ) {
					scrambled_text += " ";
				}
			}
			scrambled_text = GlobalFuncs.trim( scrambled_text );
			ending = String13.SubStr( scrambled_text, Lang13.Length( scrambled_text ), 0 );

			if ( ending == "." ) {
				scrambled_text = String13.SubStr( scrambled_text, 1, Lang13.Length( scrambled_text ) - 1 );
			}
			input_ending = String13.SubStr( input, input_size, 0 );
			Interface13.Stat( null, new ByTable(new object [] { "!", "?", "." }).Contains( input_ending ) );

			if ( ending == "." ) {
				scrambled_text += input_ending;
			}
			this.scramble_cache[input] = scrambled_text;

			if ( this.scramble_cache.len > 20 ) {
				this.scramble_cache.Cut( 1, this.scramble_cache.len - 20 - 1 );
			}
			return scrambled_text;
		}

		// Function from file: language.dm
		public string render_speech( Speech speech = null, string html_message = null ) {
			return "" + this.get_spoken_verb( speech.message, speech.speaker is Mob_Living_Silicon, speech.mode ) + ", " + html_message;
		}

		// Function from file: language.dm
		public dynamic filter_speech( dynamic speech = null ) {
			speech.message_classes.Add( this.colour );
			speech.message = GlobalFuncs.capitalize( speech.message );
			return speech;
		}

		// Function from file: language.dm
		public virtual dynamic say_misunderstood( dynamic M = null, string message = null ) {
			return GlobalFuncs.stars( message );
		}

		// Function from file: language.dm
		public string get_spoken_verb( string msg = null, bool silicon = false, bool mode = false ) {
			string msg_end = null;

			
			switch ((bool)( mode )) {
				case 2:
					return "" + this.whisper_verb;
					break;
				case 3:
					return "" + this.whisper_verb + " with their final breath";
					break;
			}
			msg_end = String13.SubStr( msg, Lang13.Length( msg ), 0 );

			switch ((string)( msg_end )) {
				case "!":
					return ( silicon ? "declares" : this.exclaim_verb );
					break;
				case "?":
					return ( silicon ? "queries" : this.ask_verb );
					break;
			}
			return ( silicon ? "states" : this.speech_verb );
		}

	}

}