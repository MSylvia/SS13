// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_Head_Attach : SurgeryStep_Head {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.allowed_tools = new ByTable().Set( typeof(Obj_Item_Weapon_Organ_Head), 100 );
			this.min_duration = 80;
			this.max_duration = 100;
		}

		// Function from file: headreattach.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			string affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( "<span class='warning'>" + user + "'s hand slips, damaging connectors on " + target + "'s neck!</span>", "<span class='warning'>Your hand slips, damaging connectors on " + target + "'s neck!</span>" );
			((Mob_Living)target).apply_damage( 10, "brute", affected );
			return null;
		}

		// Function from file: headreattach.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;
			Obj_Item B = null;
			ButcheringProduct BP = null;
			dynamic match = null;
			dynamic copied = null;
			dynamic I = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( "<span class='notice'>" + user + " has attached " + target + "'s head to the body.</span>", "<span class='notice'>You have attached " + target + "'s head to the body.</span>" );
			affected.status = 0;
			affected.amputated = false;
			affected.destspawn = false;
			((Mob_Living_Carbon_Human)target).update_body();
			((Mob_Living)target).updatehealth();
			((Mob_Living)target).UpdateDamageIcon();
			B = tool;

			if ( Lang13.Bool( ((dynamic)B).brainmob.mind ) ) {
				((Mind)((dynamic)B).brainmob.mind).transfer_to( target );
			}

			if ( ((dynamic)B).butchering_drops.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)B).butchering_drops, typeof(ButcheringProduct) )) {
					BP = _a;
					
					match = Lang13.FindIn( BP.type, target.butchering_drops );

					if ( match is ButcheringProduct ) {
						target.butchering_drops -= match;
						GlobalFuncs.qdel( match );
					}
					target.butchering_drops += BP;
					((dynamic)B).butchering_drops -= BP;
				}
			}
			copied = null;

			if ( Lang13.Bool( ((dynamic)B).organ_data ) ) {
				I = ((dynamic)B).organ_data;
				copied = I.Copy();
			} else {
				copied = new Organ_Internal_Brain();
			}
			copied.owner = target;
			target.internal_organs_by_name["brain"] = copied;
			target.internal_organs += copied;
			affected.internal_organs += copied;
			((Mob)user).u_equip( B, true );
			B.loc = target;
			affected.organ_item = B;
			return false;
		}

		// Function from file: headreattach.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			((Ent_Static)user).visible_message( "" + user + " starts attaching " + tool + " to " + target + "'s reshaped neck.", "You start attaching " + tool + " to " + target + "'s reshaped neck." );
			return false;
		}

		// Function from file: headreattach.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			dynamic head = null;

			head = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			return base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 && Lang13.Bool( head.status & 4 ) ?1:0;
		}

	}

}