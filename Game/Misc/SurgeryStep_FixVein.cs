// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_FixVein : SurgeryStep {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.priority = 2;
			this.allowed_tools = new ByTable().Set( typeof(Obj_Item_Weapon_FixOVein), 100 ).Set( typeof(Obj_Item_Stack_CableCoil), 75 );
			this.can_infect = true;
			this.blood_level = 1;
			this.min_duration = 70;
			this.max_duration = 90;
		}

		// Function from file: other.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( "<span class='warning'>" + user + "'s hand slips, smearing " + tool + " in the incision in " + target + "'s " + affected.display_name + "!</span>", "<span class='warning'>Your hand slips, smearing " + tool + " in the incision in " + target + "'s " + affected.display_name + "!</span>" );
			affected.take_damage( 5, 0 );
			return null;
		}

		// Function from file: other.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;
			Wound W = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " has patched the damaged vein in " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You have patched the damaged vein in " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( ".</span>" ).ToString() );

			foreach (dynamic _a in Lang13.Enumerate( affected.wounds, typeof(Wound) )) {
				W = _a;
				

				if ( W.v_internal ) {
					affected.wounds.Remove( W );
					((Organ_External)affected).update_damages();
				}
			}

			if ( user is Mob_Living_Carbon_Human && Rand13.PercentChance( 40 ) ) {
				((Mob_Living_Carbon_Human)user).f_bloody_hands( target, 0 );
			}
			return false;
		}

		// Function from file: other.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " starts patching the damaged vein in " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "." ).ToString(), new Txt( "You start patching the damaged vein in " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "." ).ToString() );
			((Mob_Living_Carbon_Human)target).custom_pain( "The pain in " + affected.display_name + " is unbearable!", true );
			base.begin_step( (object)(user), (object)(target), target_zone, tool, (object)(surgery) );
			return false;
		}

		// Function from file: other.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			Organ_External affected = null;
			bool internal_bleeding = false;
			Wound W = null;

			
			if ( !GlobalFuncs.hasorgans( target ) ) {
				return 0;
			}
			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			internal_bleeding = false;

			foreach (dynamic _a in Lang13.Enumerate( affected.wounds, typeof(Wound) )) {
				W = _a;
				

				if ( W.v_internal ) {
					internal_bleeding = true;
					break;
				}
			}
			return affected.open >= 2 && internal_bleeding ?1:0;
		}

	}

}