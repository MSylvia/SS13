// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class GameMode_Traitor_DoubleAgents : GameMode_Traitor {

		public ByTable target_list = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "double agents";
			this.config_tag = "double_agents";
			this.restricted_jobs = new ByTable(new object [] { "Cyborg", "AI", "Captain", "Head of Personnel", "Chief Medical Officer", "Research Director", "Chief Engineer", "Head of Security", "Mobile MMI" });
			this.required_players = 15;
			this.required_enemies = 2;
			this.recommended_enemies = 6;
			this.traitor_name = "double agent";
		}

		// Function from file: vgstation13.dme
		public override void greet_traitor( Mind traitor = null ) {
			int obj_count = 0;
			Objective objective = null;

			GlobalFuncs.to_chat( traitor.current, "<B><font size=3 color=red>You are the double agent.<br>Relations with the other groups in the Syndicate Coalition have gone south, take the other agents out before they do the same to you.</font></B>" );
			obj_count = 1;

			foreach (dynamic _a in Lang13.Enumerate( traitor.objectives, typeof(Objective) )) {
				objective = _a;
				
				GlobalFuncs.to_chat( traitor.current, "<B>Objective #" + obj_count + "</B>: " + objective.explanation_text );
				obj_count++;
			}
			GlobalFuncs.to_chat( traitor.current, new Sound( "sound/voice/syndicate_intro.ogg" ) );
			return;
		}

		// Function from file: doubleagent.dm
		public override void forge_traitor_objectives( Mind traitor = null ) {
			Objective_Assassinate kill_objective = null;
			Objective_Hijack hijack_objective = null;
			Objective_Escape escape_objective = null;

			
			if ( this.target_list.len > 1 ) {
				kill_objective = new Objective_Assassinate();
				kill_objective.owner = traitor;
				kill_objective.target = this.target_list[traitor];

				if ( Lang13.Bool( kill_objective.target ) ) {
					kill_objective.explanation_text = "Assassinate " + kill_objective.target.current.real_name + ", the " + kill_objective.target.special_role + ".";
				} else {
					kill_objective.find_target();
				}
				traitor.objectives.Add( kill_objective );
			}

			if ( Rand13.PercentChance( 15 ) ) {
				hijack_objective = new Objective_Hijack();
				hijack_objective.owner = traitor;
				traitor.objectives.Add( hijack_objective );
			} else {
				escape_objective = new Objective_Escape();
				escape_objective.owner = traitor;
				traitor.objectives.Add( escape_objective );
			}
			return;
		}

		// Function from file: doubleagent.dm
		public override bool pre_setup(  ) {
			ByTable possible_traitors = null;
			int? num_traitors = null;
			Mind player = null;
			dynamic job = null;
			int? j = null;
			dynamic traitor = null;

			
			if ( GlobalVars.config.protect_roles_from_antagonist ) {
				this.restricted_jobs.Add( this.protected_jobs );
			}
			possible_traitors = this.get_players_for_role( "traitor" );

			if ( !( possible_traitors.len != 0 ) ) {
				GlobalFuncs.log_admin( "Failed to set-up a round of double agents. Couldn't find any volunteers to be traitors." );
				GlobalFuncs.message_admins( "Failed to set-up a round of double agents. Couldn't find any volunteers to be traitors." );
				return false;
			}
			num_traitors = 1;

			if ( GlobalVars.config.traitor_scaling ) {
				num_traitors = Num13.MaxInt( this.required_enemies, Num13.Floor( this.num_players() / GlobalVars.traitor_scaling_coeff ) );
			} else {
				num_traitors = ( this.num_players() <= this.required_enemies ? this.required_enemies : ( this.num_players() >= this.traitors_possible ? this.traitors_possible : this.num_players() ) );
			}

			foreach (dynamic _b in Lang13.Enumerate( possible_traitors, typeof(Mind) )) {
				player = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.restricted_jobs )) {
					job = _a;
					

					if ( player.assigned_role == job ) {
						possible_traitors.Remove( player );
					}
				}
			}

			if ( possible_traitors.len < this.required_enemies ) {
				GlobalFuncs.log_admin( "Failed to set-up a round of double agents. Couldn't find enough volunteers to be traitors." );
				GlobalFuncs.message_admins( "Failed to set-up a round of double agents. Couldn't find enough volunteers to be traitors." );
				return false;
			}
			j = null;
			j = 0;

			while (( j ??0) < ( num_traitors ??0)) {
				
				if ( !( possible_traitors.len != 0 ) ) {
					break;
				}
				traitor = Rand13.PickFromTable( possible_traitors );
				this.traitors.Add( traitor );
				traitor.special_role = "traitor";
				possible_traitors.Remove( traitor );
				j++;
			}

			if ( !( this.traitors.len != 0 ) ) {
				GlobalFuncs.log_admin( "Failed to set-up a round of double agents. Couldn't find any volunteers to be traitors." );
				GlobalFuncs.message_admins( "Failed to set-up a round of double agents. Couldn't find any volunteers to be traitors." );
				return false;
			}

			if ( this.traitors.len < this.required_enemies ) {
				GlobalFuncs.log_admin( "Failed to set-up a round of double agents. Couldn't find enough volunteers to be traitors." );
				GlobalFuncs.message_admins( "Failed to set-up a round of double agents. Couldn't find enough volunteers to be traitors." );
				return false;
			}
			GlobalFuncs.log_admin( "Starting a round of double agents with " + this.traitors.len + " starting traitors." );
			GlobalFuncs.message_admins( "Starting a round of double agents with " + this.traitors.len + " starting traitors." );
			return true;
		}

		// Function from file: doubleagent.dm
		public override bool post_setup(  ) {
			int i = 0;
			Mind traitor = null;

			i = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.traitors, typeof(Mind) )) {
				traitor = _a;
				
				i++;

				if ( i + 1 > this.traitors.len ) {
					i = 0;
				}
				this.target_list[traitor] = this.traitors[i + 1];
			}
			base.post_setup();
			return false;
		}

		// Function from file: doubleagent.dm
		public override void announce(  ) {
			GlobalFuncs.to_chat( typeof(Game13), "<B>The current game mode is - Double Agents!</B>" );
			GlobalFuncs.to_chat( typeof(Game13), "<B>There are double agents killing eachother! Do not let them succeed!</B>" );
			return;
		}

	}

}