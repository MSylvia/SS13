// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class MediaManager : Game_Data {

		public string url = "";
		public int? start_time = 0;
		public dynamic source_volume = 1;
		public dynamic volume = 50;
		public Client owner = null;
		public dynamic mob = null;
		public bool forced = false;
		public string window = "rpane.hosttracker";
		public string playerstyle = null;

		// Function from file: mediamanager.dm
		public MediaManager ( dynamic holder = null ) {
			this.mob = holder;
			this.owner = this.mob.client;

			if ( this.owner.prefs != null ) {
				
				if ( !( this.owner.prefs.volume == null ) ) {
					this.volume = this.owner.prefs.volume;
				}

				if ( Lang13.Bool( this.owner.prefs.usewmp ) ) {
					this.playerstyle = GlobalVars.PLAYER_OLD_HTML;
				} else {
					this.playerstyle = GlobalVars.PLAYER_HTML;
				}
			}
			return;
		}

		// Function from file: mediamanager.dm
		public void update_volume( dynamic value = null ) {
			this.volume = value;
			this.send_update();
			return;
		}

		// Function from file: mediamanager.dm
		public void update_music(  ) {
			string targetURL = null;
			int? targetStartTime = null;
			dynamic targetVolume = null;
			dynamic A = null;
			Obj_Machinery_Media M = null;

			targetURL = "";
			targetStartTime = 0;
			targetVolume = 0;

			if ( this.forced || !( this.owner != null ) ) {
				return;
			}
			A = GlobalFuncs.get_area_master( this.mob );

			if ( !Lang13.Bool( A ) ) {
				this.stop_music();
				return;
			}
			M = A.media_source;

			if ( M != null && M.playing != 0 ) {
				targetURL = M.media_url;
				targetStartTime = M.media_start_time;
				targetVolume = M.volume;
			}
			this.push_music( targetURL, targetStartTime, targetVolume );
			return;
		}

		// Function from file: mediamanager.dm
		public void stop_music(  ) {
			this.push_music( "", 0, 1 );
			return;
		}

		// Function from file: mediamanager.dm
		public void push_music( string targetURL = null, int? targetStartTime = null, dynamic targetVolume = null ) {
			
			if ( this.url != targetURL || Math.Abs( ( targetStartTime ??0) - ( this.start_time ??0) ) > 1 || Math.Abs( Convert.ToDouble( targetVolume - this.source_volume ) ) > 0.1 ) {
				this.url = targetURL;
				this.start_time = targetStartTime;
				this.source_volume = ( Convert.ToDouble( targetVolume ) <= 0 ? ((dynamic)( 0 )) : ( Convert.ToDouble( targetVolume ) >= 1 ? ((dynamic)( 1 )) : targetVolume ) );
				this.send_update();
			}
			return;
		}

		// Function from file: mediamanager.dm
		public void send_update(  ) {
			
			if ( !( this.owner.prefs != null ) ) {
				return;
			}

			if ( !Lang13.Bool( this.owner.prefs.toggles & 16384 ) && this.url != "" ) {
				return;
			}
			Interface13.Output( this.owner, String13.MakeUrlParams( new ByTable(new object [] { this.url, ( Game13.time - ( this.start_time ??0) ) / 10, this.volume * this.source_volume }) ), "" + GlobalVars.window + ":SetMusic" );
			return;
		}

		// Function from file: mediamanager.dm
		public void open(  ) {
			Interface13.Browse( this.owner, null, "window=" + GlobalVars.window );
			Interface13.Browse( this.owner, this.playerstyle, "window=" + GlobalVars.window );
			this.send_update();
			return;
		}

	}

}