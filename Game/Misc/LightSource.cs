// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class LightSource : Game_Data {

		public Ent_Static top_atom = null;
		public Ent_Static source_atom = null;
		public Ent_Static source_turf = null;
		public dynamic light_power = null;
		public dynamic light_range = null;
		public dynamic light_color = null;
		public double lum_r = 0;
		public double lum_g = 0;
		public double lum_b = 0;
		public double applied_lum_r = 0;
		public double applied_lum_g = 0;
		public double applied_lum_b = 0;
		public ByTable effect_str = null;
		public bool applied = false;
		public bool vis_update = false;
		public bool needs_update = false;
		public bool destroyed = false;
		public bool force_update = false;

		// Function from file: light_source.dm
		public LightSource ( Ent_Static owner = null, Ent_Static top = null ) {
			this.source_atom = owner;

			if ( !( this.source_atom.light_sources != null ) ) {
				this.source_atom.light_sources = new ByTable();
			}
			this.source_atom.light_sources.Add( this );
			this.top_atom = top;

			if ( this.top_atom != this.source_atom ) {
				
				if ( !( top.light_sources != null ) ) {
					top.light_sources = new ByTable();
				}
				this.top_atom.light_sources.Add( this );
			}
			this.source_turf = this.top_atom;
			this.light_power = this.source_atom.light_power;
			this.light_range = this.source_atom.light_range;
			this.light_color = this.source_atom.light_color;
			this.parse_light_color();
			this.effect_str = new ByTable();
			this.update();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: light_source.dm
		public double calc_turf( Tile T = null ) {
			double _default = 0;

			
			if ( T.lighting_overlay != null ) {
				_default = Math.Pow( T.x - this.source_turf.x, 2 ) + Math.Pow( T.y - this.source_turf.y, 2 ) + 1;
				_default = 1 - ( Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) <= 0 ? 0 : ( Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) >= 1 ? 1 : Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) ) );
				_default *= Convert.ToDouble( this.light_power );
				_default = Num13.Round( _default, 0.0078125 );
				this.effect_str[T] = _default;
				((Dynamic_LightingOverlay)T.lighting_overlay).update_lumcount( this.applied_lum_r * _default, this.applied_lum_g * _default, this.applied_lum_b * _default );
			}
			return _default;
		}

		// Function from file: light_source.dm
		public double smart_vis_update(  ) {
			double _default = 0;

			ByTable view = null;
			dynamic T = null;
			ByTable new_turfs = null;
			dynamic T2 = null;
			ByTable old_turfs = null;
			dynamic T3 = null;
			int str = 0;

			view = new ByTable( 0 );
			GlobalVars.dview_mob.loc = this.source_turf;
			GlobalVars.dview_mob.see_invisible = 0;

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( GlobalVars.dview_mob, this.light_range ) )) {
				T = _a;
				
				view.Add( T );
			}
			new_turfs = view - this.effect_str;

			foreach (dynamic _b in Lang13.Enumerate( new_turfs )) {
				T2 = _b;
				

				if ( T2.lighting_overlay != null ) {
					_default = Math.Pow( Convert.ToDouble( T2.x - this.source_turf.x ), 2 ) + Math.Pow( Convert.ToDouble( T2.y - this.source_turf.y ), 2 ) + 1;
					_default = 1 - ( Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) <= 0 ? 0 : ( Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) >= 1 ? 1 : Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) ) );

					if ( !( _default != 0 ) ) {
						continue;
					}
					_default *= Convert.ToDouble( this.light_power );
					_default = Num13.Round( _default, 0.0078125 );
					this.effect_str[T2] = _default;
					((Dynamic_LightingOverlay)T2.lighting_overlay).update_lumcount( this.applied_lum_r * _default, this.applied_lum_g * _default, this.applied_lum_b * _default );
				} else {
					this.effect_str[T2] = 0;
				}

				if ( !( T2.affecting_lights != null ) ) {
					T2.affecting_lights = new ByTable();
				}
				T2.affecting_lights.Add( this );
			}
			old_turfs = this.effect_str - view;

			foreach (dynamic _c in Lang13.Enumerate( old_turfs )) {
				T3 = _c;
				

				if ( T3.affecting_lights != null ) {
					T3.affecting_lights.Remove( this );
				}

				if ( T3.lighting_overlay != null ) {
					str = Convert.ToInt32( this.effect_str[T3] );
					((Dynamic_LightingOverlay)T3.lighting_overlay).update_lumcount( -str * this.applied_lum_r, -str * this.applied_lum_g, -str * this.applied_lum_b );
				}
				this.effect_str.Remove( T3 );
			}
			return _default;
		}

		// Function from file: light_source.dm
		public void remove_lum(  ) {
			dynamic T = null;
			int str = 0;

			this.applied = false;

			foreach (dynamic _a in Lang13.Enumerate( this.effect_str )) {
				T = _a;
				

				if ( T.affecting_lights != null ) {
					T.affecting_lights.Remove( this );
				}

				if ( T.lighting_overlay != null ) {
					str = Convert.ToInt32( this.effect_str[T] );
					((Dynamic_LightingOverlay)T.lighting_overlay).update_lumcount( -str * this.applied_lum_r, -str * this.applied_lum_g, -str * this.applied_lum_b );
				}
			}
			this.effect_str.Cut();
			return;
		}

		// Function from file: light_source.dm
		public double apply_lum(  ) {
			double _default = 0;

			dynamic T = null;

			this.applied = true;
			this.applied_lum_r = this.lum_r;
			this.applied_lum_g = this.lum_g;
			this.applied_lum_b = this.lum_b;

			if ( this.source_turf is Tile ) {
				GlobalVars.dview_mob.loc = this.source_turf;
				GlobalVars.dview_mob.see_invisible = 20;

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( GlobalVars.dview_mob, this.light_range ) )) {
					T = _a;
					

					if ( T.lighting_overlay != null ) {
						_default = Math.Pow( Convert.ToDouble( T.x - this.source_turf.x ), 2 ) + Math.Pow( Convert.ToDouble( T.y - this.source_turf.y ), 2 ) + 1;
						_default = 1 - ( Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) <= 0 ? 0 : ( Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) >= 1 ? 1 : Math.Sqrt( _default ) / Num13.MaxInt( 1, Convert.ToInt32( this.light_range ) ) ) );

						if ( !( _default != 0 ) ) {
							continue;
						}
						_default *= Convert.ToDouble( this.light_power );
						_default = Num13.Round( _default, 0.0078125 );
						this.effect_str[T] = _default;
						((Dynamic_LightingOverlay)T.lighting_overlay).update_lumcount( this.applied_lum_r * _default, this.applied_lum_g * _default, this.applied_lum_b * _default );
					} else {
						this.effect_str[T] = 0;
					}

					if ( !( T.affecting_lights != null ) ) {
						T.affecting_lights = new ByTable();
					}
					T.affecting_lights.Add( this );
				}
			}
			return _default;
		}

		// Function from file: light_source.dm
		public void parse_light_color(  ) {
			
			if ( Lang13.Bool( this.light_color ) ) {
				this.lum_r = GlobalFuncs.GetRedPart( this.light_color ) / 255;
				this.lum_g = GlobalFuncs.GetGreenPart( this.light_color ) / 255;
				this.lum_b = GlobalFuncs.GetBluePart( this.light_color ) / 255;
			} else {
				this.lum_r = 1;
				this.lum_g = 1;
				this.lum_b = 1;
			}
			return;
		}

		// Function from file: light_source.dm
		public bool check(  ) {
			bool _default = false;

			
			if ( !( this.source_atom != null ) || !Lang13.Bool( this.light_range ) || !Lang13.Bool( this.light_power ) ) {
				this.destroy();
				return true;
			}

			if ( !( this.top_atom != null ) ) {
				this.top_atom = this.source_atom;
				_default = true;
			}

			if ( this.top_atom is Tile ) {
				
				if ( this.source_turf != this.top_atom ) {
					this.source_turf = this.top_atom;
					_default = true;
				}
			} else if ( this.top_atom.loc != this.source_turf ) {
				this.source_turf = this.top_atom.loc;
				_default = true;
			}

			if ( this.source_atom.light_power != this.light_power ) {
				this.light_power = this.source_atom.light_power;
				_default = true;
			}

			if ( this.source_atom.light_range != this.light_range ) {
				this.light_range = this.source_atom.light_range;
				_default = true;
			}

			if ( Lang13.Bool( this.light_range ) && Lang13.Bool( this.light_power ) && !this.applied ) {
				_default = true;
			}

			if ( this.source_atom.light_color != this.light_color ) {
				this.light_color = this.source_atom.light_color;
				this.parse_light_color();
				_default = true;
			}
			return _default;
		}

		// Function from file: light_source.dm
		[VerbInfo( name: "vis update" )]
		public void f_vis_update(  ) {
			
			if ( !this.needs_update ) {
				this.needs_update = true;
				GlobalVars.lighting_update_lights.Add( this );
			}
			this.vis_update = true;
			return;
		}

		// Function from file: light_source.dm
		[VerbInfo( name: "force update" )]
		public void f_force_update(  ) {
			this.force_update = true;

			if ( !this.needs_update ) {
				this.needs_update = true;
				GlobalVars.lighting_update_lights.Add( this );
			}
			return;
		}

		// Function from file: light_source.dm
		public void update( Ent_Static new_top_atom = null ) {
			
			if ( new_top_atom != null && new_top_atom != this.top_atom ) {
				
				if ( this.top_atom != this.source_atom ) {
					this.top_atom.light_sources.Remove( this );
				}
				this.top_atom = new_top_atom;

				if ( this.top_atom != this.source_atom ) {
					
					if ( !( this.top_atom.light_sources != null ) ) {
						this.top_atom.light_sources = new ByTable();
					}
					this.top_atom.light_sources.Add( this );
				}
			}

			if ( !this.needs_update ) {
				GlobalVars.lighting_update_lights.Add( this );
				this.needs_update = true;
			}
			return;
		}

		// Function from file: light_source.dm
		public void destroy(  ) {
			this.destroyed = true;
			this.f_force_update();

			if ( this.source_atom != null ) {
				this.source_atom.light_sources.Remove( this );
			}

			if ( this.top_atom != null ) {
				this.top_atom.light_sources.Remove( this );
			}
			return;
		}

	}

}