// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Design_MechanicDesign : Design {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "";
			this.desc = "";
			this.req_tech = new ByTable();
			this.category = "";
		}

		// Function from file: mechanic_designs.dm
		public Design_MechanicDesign ( dynamic O = null ) {
			dynamic M = null;
			Obj_Item I = null;
			Obj_Item CB = null;
			Design part_design = null;
			dynamic C = null;
			Type CB2 = null;
			Design circuit_design = null;
			dynamic I2 = null;
			dynamic matID = null;

			
			if ( !( O is Obj ) ) {
				return;
			}
			this.name = O.name;
			this.desc = Lang13.Initial( O, "desc" );
			this.build_path = O.type;
			GlobalVars.design_list.Add( this );

			if ( O is Obj_Machinery ) {
				M = O;
				this.build_type = 64;
				this.materials.Add( new ByTable().Set( "$iron", 18750 ) );

				if ( Lang13.Bool( M.component_parts ) && M.component_parts.len != 0 ) {
					this.category = "Machines";

					foreach (dynamic _a in Lang13.Enumerate( M.component_parts, typeof(Obj_Item) )) {
						I = _a;
						

						if ( I is Obj_Item_Weapon_Circuitboard ) {
							CB = I;
							this.req_tech = GlobalFuncs.ConvertReqString2List( CB.origin_tech );
						}
						part_design = GlobalFuncs.FindDesign( I );

						if ( part_design != null ) {
							this.copyCost( part_design, null, true );
						}
					}
				} else if ( M is Obj_Machinery_Computer ) {
					this.category = "Computers";
					C = M;

					if ( Lang13.Bool( C.circuit ) ) {
						CB2 = Lang13.FindClass( C.circuit );
						this.req_tech = GlobalFuncs.ConvertReqString2List( Lang13.Initial( CB2, "origin_tech" ) );
						circuit_design = GlobalFuncs.FindTypeDesign( CB2 );

						if ( circuit_design != null ) {
							this.copyCost( circuit_design, null, true );
						}
					}
				}
			} else if ( O is Obj_Item ) {
				I2 = O;
				this.category = "Items";
				this.build_type = 128;
				this.req_tech = GlobalFuncs.ConvertReqString2List( I2.origin_tech );

				if ( Lang13.Bool( I2.materials ) ) {
					
					foreach (dynamic _b in Lang13.Enumerate( I2.materials.storage )) {
						matID = _b;
						

						if ( Convert.ToDouble( I2.materials.storage[matID] ) > 0 ) {
							this.materials.Add( new ByTable().Set( "" + matID, I2.materials.storage[matID] ) );
						}
					}
				} else {
					this.Gen_Tech_Mats();
				}
			}

			if ( !Lang13.Bool( this.category ) ) {
				this.category = "Misc";
			}
			return; // Warning! Attempt to return some other value!
		}

		// Function from file: mechanic_designs.dm
		public void Gen_Tech_Mats( bool? modifier = null ) {
			modifier = modifier ?? true;

			double techtotal = 0;
			dynamic matID = null;

			
			if ( ( modifier == true ?1:0) < 0 ) {
				return;
			}
			techtotal = this.TechTotal() / 2;
			this.materials["$iron"] += techtotal * Num13.Round( Rand13.Int( 300, 1500 ), 100 ) * ( modifier == true ?1:0);
			this.materials["$glass"] += techtotal * Num13.Round( Rand13.Int( 150, 300 ), 50 ) * ( modifier == true ?1:0);

			if ( this.build_type == 128 ) {
				
				if ( Rand13.PercentChance( ((int)( techtotal * 15 )) ) ) {
					this.materials[Rand13.Pick(new object [] { "$plasma", "$uranium", "$gold", "$silver" })] += techtotal * Num13.Round( Rand13.Int( 50, 250 ), 10 ) * ( modifier == true ?1:0);
				}

				if ( Rand13.PercentChance( ((int)( techtotal * 8 )) ) ) {
					this.materials[Rand13.Pick(new object [] { "$plasma", "$uranium", "$gold", "$silver" })] += techtotal * Num13.Round( Rand13.Int( 50, 250 ), 10 ) * ( modifier == true ?1:0);
				}

				if ( techtotal >= 7 ) {
					this.materials["$diamond"] += techtotal * Num13.Round( Rand13.Int( 10, 150 ), 10 ) * ( modifier == true ?1:0);
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( this.materials )) {
				matID = _a;
				
				this.materials[matID] -= this.materials[matID] % 20;
			}
			return;
		}

		// Function from file: mechanic_designs.dm
		public void copyCost( Design D = null, bool? filter_mats = null, bool? filter_chems = null ) {
			filter_mats = filter_mats ?? false;
			filter_chems = filter_chems ?? false;

			dynamic matID = null;

			
			foreach (dynamic _a in Lang13.Enumerate( D.materials )) {
				matID = _a;
				

				if ( String13.SubStr( matID, 1, 2 ) == "$" ) {
					
					if ( filter_mats == true ) {
						continue;
					}
				} else if ( filter_chems == true ) {
					continue;
				}
				Interface13.Stat( null, this.materials.Contains( matID ) );

				if ( !( filter_chems == true ) ) {
					this.materials.Add( new ByTable().Set( "" + matID, 0 ) );
				}
				this.materials[matID] += D.materials[matID];
			}
			return;
		}

	}

}