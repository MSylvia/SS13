// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Objective_Absorb : Objective {

		public Objective_Absorb ( string text = null ) : base( text ) {
			
		}

		// Function from file: objective.dm
		public override dynamic check_completion(  ) {
			
			if ( this.blocked ) {
				return 0;
			}

			if ( this.owner != null && Lang13.Bool( ((dynamic)this.owner).changeling ) && ((dynamic)this.owner).changeling.absorbed_dna != null && ((dynamic)this.owner).changeling.absorbedcount >= Convert.ToDouble( this.target_amount ) ) {
				return 1;
			} else {
				return 0;
			}
		}

		// Function from file: objective.dm
		public dynamic gen_amount_goal( int? lowbound = null, int? highbound = null ) {
			lowbound = lowbound ?? 4;
			highbound = highbound ?? 6;

			int n_p = 0;
			Mob_NewPlayer P = null;
			Mob_Living_Carbon_Human P2 = null;

			this.target_amount = Rand13.Int( lowbound ??0, highbound ??0 );

			if ( GlobalVars.ticker != null ) {
				n_p = 1;

				if ( GlobalVars.ticker.current_state == 2 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
						P = _a;
						

						if ( P.client != null && P.ready && P.mind != this.owner ) {
							n_p++;
						}
					}
				} else if ( GlobalVars.ticker.current_state == 3 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
						P2 = _b;
						

						if ( P2.client != null && !false && P2.mind != this.owner ) {
							n_p++;
						}
					}
				}
				this.target_amount = Num13.MinInt( Convert.ToInt32( this.target_amount ), n_p );
			}
			this.explanation_text = "Absorb " + this.target_amount + " compatible genomes.";
			return this.target_amount;
		}

	}

}