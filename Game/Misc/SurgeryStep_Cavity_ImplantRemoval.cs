// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_Cavity_ImplantRemoval : SurgeryStep_Cavity {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.allowed_tools = new ByTable().Set( typeof(Obj_Item_Weapon_Hemostat), 100 ).Set( typeof(Obj_Item_Weapon_Wirecutters), 75 ).Set( typeof(Obj_Item_Weapon_Kitchen_Utensil_Fork), 20 );
			this.min_duration = 80;
			this.max_duration = 100;
		}

		// Function from file: implant.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			Organ_External affected = null;
			int fail_prob = 0;
			Ent_Static imp = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( "'s hand slips, scraping tissue inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>Your hand slips, scraping tissue inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString() );
			affected.createwound( "cut", 20 );

			if ( affected.implants.len != 0 ) {
				fail_prob = 10;
				fail_prob += 100 - ( this.tool_quality( tool ) ?1:0);

				if ( Rand13.PercentChance( fail_prob ) ) {
					imp = affected.implants[1];
					((Ent_Static)user).visible_message( "<span class='warning'>Something beeps inside " + target + "'s " + affected.display_name + "!</span>" );
					GlobalFuncs.playsound( imp.loc, "sound/items/countdown.ogg", 75, 1, -3 );
					Task13.Schedule( 25, (Task13.Closure)(() => {
						((dynamic)imp).activate();
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: implant.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;
			int find_prob = 0;
			Ent_Static obj = null;
			Ent_Static imp = null;
			Ent_Static worm = null;
			Ent_Static imp2 = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			find_prob = 0;

			if ( affected.implants.len != 0 ) {
				obj = affected.implants[1];

				if ( obj is Obj_Item_Weapon_Implant ) {
					imp = obj;

					if ( Lang13.Bool( ((dynamic)imp).islegal() ) ) {
						find_prob += 60;
					} else {
						find_prob += 40;
					}
				} else {
					find_prob += 50;
				}

				if ( Rand13.PercentChance( find_prob ) ) {
					((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " takes something out of incision on " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You take " ).item( obj ).str( " out of incision on " ).item( target ).str( "'s " ).item( affected.display_name ).str( "s with " ).the( tool ).item().str( ".</span>" ).ToString() );
					affected.implants.Remove( obj );

					if ( obj is Mob_Living_SimpleAnimal_Borer ) {
						worm = obj;

						if ( Lang13.Bool( ((dynamic)worm).controlling ) ) {
							((Mob_Living_Carbon)target).release_control();
						}
						((dynamic)worm).detach();
					}
					obj.loc = GlobalFuncs.get_turf( target );

					if ( obj is Obj_Item_Weapon_Implant ) {
						imp2 = obj;
						((dynamic)imp2).imp_in = null;
						((dynamic)imp2).implanted = 0;
						affected.implants.Remove( imp2 );
						target.contents -= imp2;
					}
				} else {
					((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " removes " ).the( tool ).item().str( " from " ).item( target ).str( "'s " ).item( affected.display_name ).str( ".</span>" ).ToString(), "<span class='notice'>There's something inside " + target + "'s " + affected.display_name + ", but you just missed it this time.</span>" );
				}
			} else if ( Lang13.Bool( affected.hidden ) ) {
				((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " takes something out of incision on " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You take something out of incision on " ).item( target ).str( "'s " ).item( affected.display_name ).str( "s with " ).the( tool ).item().str( ".</span>" ).ToString() );
				affected.hidden.loc = GlobalFuncs.get_turf( target );

				if ( !( affected.hidden.blood_DNA != null ) ) {
					affected.hidden.blood_DNA = new ByTable();
				}
				affected.hidden.blood_DNA[target.dna.unique_enzymes] = target.dna.b_type;
				affected.hidden.update_icon();
				affected.hidden = null;
			} else {
				((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " could not find anything inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( ", and pulls " ).the( tool ).item().str( " out.</span>" ).ToString(), "<span class='notice'>You could not find anything inside " + target + "'s " + affected.display_name + ".</span>" );
			}
			return false;
		}

		// Function from file: implant.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " starts poking around inside the incision on " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "." ).ToString(), new Txt( "You start poking around inside the incision on " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "." ).ToString() );
			((Mob_Living_Carbon_Human)target).custom_pain( "The pain in your chest is living hell!", true );
			base.begin_step( (object)(user), (object)(target), target_zone, tool, (object)(surgery) );
			return false;
		}

		// Function from file: implant.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			dynamic sponge = null;
			dynamic affected = null;

			sponge = target.internal_organs_by_name["brain"];
			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			return base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 && !Lang13.Bool( affected.status & 1 ) && ( !Lang13.Bool( sponge ) || !Lang13.Bool( sponge.damage ) ) ?1:0;
		}

	}

}