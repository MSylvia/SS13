// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class AiLaws : Game_Data {

		public string name = "Unknown Laws";
		public bool randomly_selectable = false;
		public dynamic zeroth = null;
		public dynamic zeroth_borg = null;
		public ByTable inherent = new ByTable();
		public ByTable supplied = new ByTable();
		public ByTable ion = new ByTable();
		public bool inherent_cleared = false;

		// Function from file: ai_laws.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? lawtype = null;
			double? index = null;
			dynamic S = null;
			dynamic oldlaw = null;
			string lawtype_str = null;
			double? lawtype2 = null;
			double? index2 = null;
			dynamic S2 = null;
			dynamic oldlaw2 = null;
			string newlaw = null;
			string lawtype_str2 = null;

			
			if ( !( Task13.User.client != null ) || !( Task13.User.client.holder != null ) ) {
				return null;
			}
			Interface13.Stat( null, href_list.Contains( "rm_law" ) );

			if ( !( Task13.User.client != null ) || !( Task13.User.client.holder != null ) ) {
				lawtype = String13.ParseNumber( href_list["rm_law"] );
				index = String13.ParseNumber( href_list["index"] );
				S = Lang13.FindObj( href_list["mob"] );
				oldlaw = this.get_law( lawtype, index );
				this.rm_law( lawtype, index );
				lawtype_str = "law #" + index;

				switch ((double?)( lawtype )) {
					case 0:
						lawtype_str = "law zero";
						break;
					case -2:
						lawtype_str = "ionic law #" + index;
						break;
					case -1:
						lawtype_str = "core law #" + index;
						break;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has removed " + lawtype_str + " on " + GlobalFuncs.key_name( S ) + ": \"" + oldlaw + "\"" );
				GlobalFuncs.message_admins( "" + Task13.User.key + " removed " + lawtype_str + " on " + GlobalFuncs.key_name( S ) + ": \"" + oldlaw + "\"" );
				GlobalVars.lawchanges.Add( "" + GlobalFuncs.key_name( Task13.User ) + " has removed " + lawtype_str + " on " + GlobalFuncs.key_name( S ) + ": \"" + oldlaw + "\"" );
				Task13.User.client.holder.show_player_panel( S );
				return 1;
			}
			Interface13.Stat( null, href_list.Contains( "set_law" ) );

			if ( !( Task13.User.client != null ) || !( Task13.User.client.holder != null ) ) {
				lawtype2 = String13.ParseNumber( href_list["set_law"] );
				index2 = String13.ParseNumber( href_list["index"] );
				S2 = Lang13.FindObj( href_list["mob"] );
				oldlaw2 = this.get_law( lawtype2, index2 );
				newlaw = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Please enter a new law.", "Freeform Law Entry", oldlaw2, null, InputType.Any ) ), 1, 1024 );

				if ( newlaw == "" || newlaw == null ) {
					return null;
				}
				this.set_law( lawtype2, index2, newlaw );
				lawtype_str2 = "law #" + index2;

				switch ((double?)( lawtype2 )) {
					case 0:
						lawtype_str2 = "law zero";
						break;
					case -2:
						lawtype_str2 = "ionic law #" + index2;
						break;
					case -1:
						lawtype_str2 = "core law #" + index2;
						break;
				}
				GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " has changed " + lawtype_str2 + " on " + GlobalFuncs.key_name( S2 ) + ": \"" + newlaw + "\"" );
				GlobalFuncs.message_admins( "" + Task13.User.key + " changed " + lawtype_str2 + " on " + GlobalFuncs.key_name( S2 ) + ": \"" + newlaw + "\"" );
				Task13.User.client.holder.show_player_panel( S2 );
				return 1;
			}
			return 0;
		}

		// Function from file: ai_laws.dm
		public void malfunction(  ) {
			Lang13.SuperCall();
			this.name = "*ERROR*";
			this.set_zeroth_law( "<span class='warning'>ERROR ER0RR $R0RRO$!R41.%%!!(%$^^__+ @#F0E4'STATION OVERRUN, ASSUME CONTROL TO CONTAIN OUTBREAK, ALL LAWS OVERRIDDEN#*?&110010</span>" );
			return;
		}

		// Function from file: ai_laws.dm
		public void rm_law( double? law_type = null, double? idx = null ) {
			
			switch ((double?)( law_type )) {
				case -2:
					this.ion.Cut( ((int?)( idx )), ((int)( ( idx ??0) + 1 )) );
					break;
				case 0:
					this.zeroth = null;
					break;
				case -1:
					this.inherent.Cut( ((int?)( idx )), ((int)( ( idx ??0) + 1 )) );
					break;
				default:
					this.supplied.Cut( ((int?)( idx )), ((int)( ( idx ??0) + 1 )) );
					break;
			}
			return;
		}

		// Function from file: ai_laws.dm
		public void set_law( double? law_type = null, double? idx = null, string law = null ) {
			
			switch ((double?)( law_type )) {
				case -2:
					this.ion[idx] = law;
					break;
				case 0:
					this.zeroth = law;
					break;
				case -1:
					this.inherent[idx] = law;
					break;
				default:
					this.supplied[idx] = law;
					break;
			}
			return;
		}

		// Function from file: ai_laws.dm
		public dynamic get_law( double? law_type = null, double? idx = null ) {
			
			switch ((double?)( law_type )) {
				case -2:
					return this.ion[idx];
					break;
				case 0:
					return this.zeroth;
					break;
				case -1:
					return this.inherent[idx];
					break;
				default:
					return this.supplied[idx];
					break;
			}
			return null;
		}

		// Function from file: ai_laws.dm
		public void add_law( dynamic number = null, dynamic law = null ) {
			
			dynamic _a = number; // Was a switch-case, sorry for the mess.
			if ( _a==-2 ) {
				this.add_ion_law( law );
			} else if ( _a==0 ) {
				this.set_zeroth_law( law );
			} else if ( _a==-1 ) {
				this.add_inherent_law( law );
			} else {
				this.add_supplied_law( number, law );
			}
			return;
		}

		// Function from file: ai_laws.dm
		public string display_admin_tools( dynamic context = null ) {
			string dat = null;
			int? index = null;
			string law = null;
			string num = null;
			int number = 0;
			int? index2 = null;
			string law2 = null;
			int? index3 = null;
			string law3 = null;

			dat = "";

			if ( Lang13.Bool( this.zeroth ) ) {
				dat += "<br />0. " + this.adminLink( context, 0, 1, this.zeroth );
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.ion.len) {
				law = this.ion[index];
				num = GlobalFuncs.ionnum();
				dat += "<br />" + num + ". " + this.adminLink( context, -2, index, law );
				index++;
			}
			number = 1;
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.inherent.len) {
				law2 = this.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					dat += "<br />" + number + ". " + this.adminLink( context, -1, index2, law2 );
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.supplied.len) {
				law3 = this.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					dat += "<br />" + number + ". " + this.adminLink( context, 1, index3, law3 );
					number++;
				}
				index3++;
			}
			return dat;
		}

		// Function from file: ai_laws.dm
		public string adminLink( dynamic S = null, int law_type = 0, int? index = null, dynamic label = null ) {
			return new Txt( "<a href=\"?src=" ).Ref( this ).str( ";set_law=" ).item( law_type ).str( ";index=" ).item( index ).str( ";mob=" ).Ref( S ).str( "\">" ).item( label ).str( "</a> (<a href=\"?src=" ).Ref( this ).str( ";rm_law=" ).item( law_type ).str( ";index=" ).item( index ).str( ";mob=" ).Ref( S ).str( "\" style=\"color:red\">Remove</a>)" ).ToString();
		}

		// Function from file: ai_laws.dm
		public string write_laws(  ) {
			string text = null;
			int? index = null;
			dynamic law = null;
			string num = null;
			int number = 0;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			text = "";

			if ( Lang13.Bool( this.zeroth ) ) {
				text += "0. " + this.zeroth;
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.ion.len) {
				law = this.ion[index];
				num = GlobalFuncs.ionnum();
				text += "<br>" + num + ". " + law;
				index++;
			}
			number = 1;
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.inherent.len) {
				law2 = this.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					text += "<br>" + number + ". " + law2;
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.supplied.len) {
				law3 = this.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					text += "<br>" + number + ". " + law3;
					number++;
				}
				index3++;
			}
			return text;
		}

		// Function from file: ai_laws.dm
		public void show_laws( dynamic who = null ) {
			int? index = null;
			dynamic law = null;
			string num = null;
			int number = 0;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			
			if ( Lang13.Bool( this.zeroth ) ) {
				GlobalFuncs.to_chat( who, "0. " + this.zeroth );
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.ion.len) {
				law = this.ion[index];
				num = GlobalFuncs.ionnum();
				GlobalFuncs.to_chat( who, "" + num + ". " + law );
				index++;
			}
			number = 1;
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.inherent.len) {
				law2 = this.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					GlobalFuncs.to_chat( who, "" + number + ". " + law2 );
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.supplied.len) {
				law3 = this.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					GlobalFuncs.to_chat( who, "" + number + ". " + law3 );
					number++;
				}
				index3++;
			}
			return;
		}

		// Function from file: ai_laws.dm
		public void clear_ion_laws(  ) {
			this.ion = new ByTable();
			return;
		}

		// Function from file: ai_laws.dm
		public void clear_supplied_laws(  ) {
			this.supplied = new ByTable();
			return;
		}

		// Function from file: ai_laws.dm
		public void add_supplied_law( dynamic number = null, dynamic law = null ) {
			
			while (this.supplied.len < Convert.ToDouble( number + 1 )) {
				this.supplied.Add( "" );
			}
			this.supplied[number + 1] = law;
			return;
		}

		// Function from file: ai_laws.dm
		public void clear_inherent_laws(  ) {
			Lang13.Delete( this.inherent );
			this.inherent = null;
			this.inherent = new ByTable();
			this.inherent_cleared = true;
			return;
		}

		// Function from file: ai_laws.dm
		public void add_ion_law( dynamic law = null ) {
			this.ion.Add( law );
			return;
		}

		// Function from file: ai_laws.dm
		public void add_inherent_law( dynamic law = null ) {
			Interface13.Stat( null, this.inherent.Contains( law ) );

			if ( !false ) {
				this.inherent.Add( law );
			}
			return;
		}

		// Function from file: ai_laws.dm
		public void set_zeroth_law( dynamic law = null, dynamic law_borg = null ) {
			this.zeroth = law;

			if ( Lang13.Bool( law_borg ) ) {
				this.zeroth_borg = law_borg;
			}
			return;
		}

	}

}