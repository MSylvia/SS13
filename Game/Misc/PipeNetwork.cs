// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class PipeNetwork : Game_Data {

		public ByTable gases = new ByTable();
		public ByTable normal_members = new ByTable();
		public ByTable line_members = new ByTable();
		public bool update = true;
		public GasMixture air_transient = null;
		public GasMixture radiate = null;

		// Function from file: datum_pipe_network.dm
		public PipeNetwork (  ) {
			this.air_transient = new GasMixture();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: datum_pipe_network.dm
		public bool reconcile_air(  ) {
			double total_thermal_energy = 0;
			double total_heat_capacity = 0;
			double air_transient_volume = 0;
			GasMixture gas = null;
			int temp_heatcap = 0;
			Gas trace_gas = null;
			dynamic corresponding = null;
			GasMixture gas2 = null;
			double volume_ratio = 0;
			Gas trace_gas2 = null;
			dynamic corresponding2 = null;

			total_thermal_energy = 0;
			total_heat_capacity = 0;
			air_transient_volume = 0;
			this.air_transient.oxygen = 0;
			this.air_transient.nitrogen = 0;
			this.air_transient.toxins = 0;
			this.air_transient.carbon_dioxide = 0;
			this.air_transient.trace_gases = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.gases, typeof(GasMixture) )) {
				gas = _b;
				
				air_transient_volume += gas.volume ??0;
				temp_heatcap = gas.heat_capacity();
				total_thermal_energy += ( gas.temperature ??0) * temp_heatcap;
				total_heat_capacity += temp_heatcap;
				this.air_transient.oxygen += gas.oxygen;
				this.air_transient.nitrogen += gas.nitrogen;
				this.air_transient.toxins += gas.toxins;
				this.air_transient.carbon_dioxide += gas.carbon_dioxide;

				if ( gas.trace_gases.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( gas.trace_gases, typeof(Gas) )) {
						trace_gas = _a;
						
						corresponding = Lang13.FindIn( trace_gas.type, this.air_transient.trace_gases );

						if ( !Lang13.Bool( corresponding ) ) {
							corresponding = Lang13.Call( trace_gas.type );
							this.air_transient.trace_gases.Add( corresponding );
						}
						corresponding.moles += trace_gas.moles ??0;
					}
				}
			}
			this.air_transient.volume = air_transient_volume;

			if ( air_transient_volume > 0 ) {
				
				if ( total_heat_capacity > 0 ) {
					this.air_transient.temperature = total_thermal_energy / total_heat_capacity;

					if ( this.air_transient.react() != 0 ) {
						this.update = true;
					}
				} else {
					this.air_transient.temperature = 0;
				}

				foreach (dynamic _d in Lang13.Enumerate( this.gases, typeof(GasMixture) )) {
					gas2 = _d;
					
					volume_ratio = ( gas2.volume ??0) / ( this.air_transient.volume ??0);
					gas2.oxygen = this.air_transient.oxygen * volume_ratio;
					gas2.nitrogen = this.air_transient.nitrogen * volume_ratio;
					gas2.toxins = this.air_transient.toxins * volume_ratio;
					gas2.carbon_dioxide = this.air_transient.carbon_dioxide * volume_ratio;
					gas2.temperature = this.air_transient.temperature;

					if ( this.air_transient.trace_gases.len != 0 ) {
						
						foreach (dynamic _c in Lang13.Enumerate( this.air_transient.trace_gases, typeof(Gas) )) {
							trace_gas2 = _c;
							
							corresponding2 = Lang13.FindIn( trace_gas2.type, gas2.trace_gases );

							if ( !Lang13.Bool( corresponding2 ) ) {
								corresponding2 = Lang13.Call( trace_gas2.type );
								gas2.trace_gases.Add( corresponding2 );
							}
							corresponding2.moles = ( trace_gas2.moles ??0) * volume_ratio;
						}
					}
					gas2.update_values();
				}
			}
			this.air_transient.update_values();
			return true;
		}

		// Function from file: datum_pipe_network.dm
		public void update_network_gases(  ) {
			Obj_Machinery_Atmospherics normal_member = null;
			ByTable result = null;
			Pipeline line_member = null;

			this.gases = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.normal_members, typeof(Obj_Machinery_Atmospherics) )) {
				normal_member = _a;
				
				result = normal_member.return_network_air( this );

				if ( result != null ) {
					this.gases.Add( result );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.line_members, typeof(Pipeline) )) {
				line_member = _b;
				
				this.gases.Add( line_member.air );
			}
			return;
		}

		// Function from file: datum_pipe_network.dm
		public bool merge( Game_Data giver = null ) {
			Obj_Machinery_Atmospherics normal_member = null;
			Pipeline line_member = null;

			
			if ( giver == this ) {
				return false;
			}
			this.normal_members.Or( ((dynamic)giver).normal_members );
			this.line_members.Or( ((dynamic)giver).line_members );

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)giver).normal_members, typeof(Obj_Machinery_Atmospherics) )) {
				normal_member = _a;
				
				normal_member.reassign_network( giver, this );
			}

			foreach (dynamic _b in Lang13.Enumerate( ((dynamic)giver).line_members, typeof(Pipeline) )) {
				line_member = _b;
				
				line_member.network = this;
			}
			this.update_network_gases();
			return true;
		}

		// Function from file: datum_pipe_network.dm
		public bool build_network( dynamic start_normal = null, dynamic reference = null ) {
			
			if ( !Lang13.Bool( start_normal ) ) {
				GlobalFuncs.returnToPool( this );
				return false;
			}
			start_normal.network_expand( this, reference );
			this.update_network_gases();

			if ( this.normal_members.len > 0 || this.line_members.len > 0 ) {
				GlobalVars.pipe_networks.Or( this );
			} else {
				GlobalFuncs.returnToPool( this );
				return false;
			}
			return true;
		}

		// Function from file: datum_pipe_network.dm
		public void process(  ) {
			
			if ( this.update ) {
				this.update = false;
				this.reconcile_air();
				this.radiate = null;
			}
			return;
		}

		// Function from file: datum_pipe_network.dm
		public override dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			base.resetVariables( "gases", "normal_members", "line_members" );
			this.gases = new ByTable();
			this.normal_members = new ByTable();
			this.line_members = new ByTable();
			return null;
		}

		// Function from file: datum_pipe_network.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Pipeline pipeline = null;
			Obj_Machinery_Atmospherics objects = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.line_members, typeof(Pipeline) )) {
				pipeline = _a;
				
				pipeline.network = null;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.normal_members, typeof(Obj_Machinery_Atmospherics) )) {
				objects = _b;
				
				objects.unassign_network( this );
			}
			return null;
		}

	}

}