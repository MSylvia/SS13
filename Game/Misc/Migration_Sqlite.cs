// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Migration_Sqlite : Migration {

		public string dbfilename = "";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.dbms = "sqlite";
		}

		// Function from file: sqlite_migration.dm
		public Migration_Sqlite ( dynamic mc = null ) : base( (object)(mc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( mc is MigrationController_Sqlite ) {
				this.dbfilename = mc.dbfilename;
			}
			return;
		}

		// Function from file: sqlite_migration.dm
		public override dynamic hasColumn( string tableName = null, string columnName = null ) {
			ByTable row = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.query( "PRAGMA table_info(" + tableName + ")" ), typeof(ByTable) )) {
				row = _a;
				

				if ( row["name"] == columnName ) {
					return GlobalVars.TRUE;
				}
			}
			return GlobalVars.FALSE;
		}

		// Function from file: sqlite_migration.dm
		public override dynamic hasTable( string tableName = null ) {
			return this.hasResult( "SELECT name FROM sqlite_master WHERE type='" + tableName + "'" );
		}

		// Function from file: sqlite_migration.dm
		public override bool? execute( string sql = null ) {
			Database_Query Q = null;

			Q = new Database_Query();
			Q.Add( sql );

			if ( !Lang13.Bool( Q.Execute( this.dbfilename ) ) ) {
				Game13.log.WriteMsg( sql );
				Game13.log.WriteMsg( "Error in " + this.package + "#" + this.id + ": " + Q.ErrorMsg() );
				return GlobalVars.FALSE;
			}
			return GlobalVars.TRUE;
		}

		// Function from file: sqlite_migration.dm
		public override dynamic hasResult( string sql = null ) {
			Database_Query Q = null;

			Q = new Database_Query();
			Q.Add( sql );

			if ( !Lang13.Bool( Q.Execute( this.dbfilename ) ) ) {
				Game13.log.WriteMsg( sql );
				Game13.log.WriteMsg( "Error in " + this.package + "#" + this.id + ": " + Q.ErrorMsg() );
				return GlobalVars.FALSE;
			}
			return Q.NextRow();
		}

		// Function from file: sqlite_migration.dm
		public override dynamic query( string sql = null ) {
			Database_Query Q = null;
			ByTable O = null;

			Q = new Database_Query();
			Q.Add( sql );

			if ( !Lang13.Bool( Q.Execute( this.dbfilename ) ) ) {
				Game13.log.WriteMsg( sql );
				Game13.log.WriteMsg( "Error in " + this.package + "#" + this.id + ": " + Q.ErrorMsg() );
				return null;
			}
			O = new ByTable();

			while (Lang13.Bool( Q.NextRow() )) {
				O.Add( new ByTable(new object [] { Q.GetRowData() }) );
			}

			if ( !( O.len != 0 ) ) {
				return null;
			}
			return O;
		}

	}

}