// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Spell_Targeted_Eat : Spell_Targeted {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Eat";
			this.desc = "Eat just about anything!";
			this.panel = "Mutant Powers";
			this.charge_max = 300;
			this.range = 1;
			this.override_base = "genetic";
			this.hud_state = "gen_eat";
			this.cast_sound = "sound/items/eatfood.ogg";
			this.compatible_mobs = new ByTable(new object [] { 
				typeof(Obj_Item), 
				typeof(Mob_Living_SimpleAnimal_Hostile), 
				typeof(Mob_Living_SimpleAnimal_Parrot), 
				typeof(Mob_Living_SimpleAnimal_Cat), 
				typeof(Mob_Living_SimpleAnimal_Corgi), 
				typeof(Mob_Living_SimpleAnimal_Crab), 
				typeof(Mob_Living_SimpleAnimal_Mouse), 
				typeof(Mob_Living_Carbon_Monkey), 
				typeof(Mob_Living_Carbon_Human), 
				typeof(Mob_Living_Carbon_Slime), 
				typeof(Mob_Living_Carbon_Alien_Larva), 
				typeof(Mob_Living_SimpleAnimal_Slime), 
				typeof(Mob_Living_SimpleAnimal_Adultslime), 
				typeof(Mob_Living_SimpleAnimal_Tomato), 
				typeof(Mob_Living_SimpleAnimal_Chick), 
				typeof(Mob_Living_SimpleAnimal_Chicken), 
				typeof(Mob_Living_SimpleAnimal_Lizard), 
				typeof(Mob_Living_SimpleAnimal_Cow), 
				typeof(Mob_Living_SimpleAnimal_Spiderbot)
			 });
		}

		// Function from file: goon_powers.dm
		public override bool cast( ByTable targets = null, Mob user = null ) {
			Ent_Static the_item = null;
			string m_his = null;
			Ent_Static H = null;
			dynamic limb = null;

			
			if ( !( targets != null ) || !( targets.len != 0 ) ) {
				return false;
			}
			the_item = targets[1];

			if ( !( the_item != null ) || !the_item.Adjacent( user ) ) {
				return false;
			}

			if ( the_item is Mob_Living_Carbon_Human ) {
				m_his = "its";

				if ( user.gender == GlobalVars.MALE ) {
					m_his = "his";
				}

				if ( user.gender == GlobalVars.FEMALE ) {
					m_his = "her";
				}
				H = the_item;
				limb = ((dynamic)H).get_organ( ((dynamic)Task13.User.zone_sel).selecting );

				if ( !( limb is Organ_External ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You can't eat this part of them!</span>" );
					return false;
				}

				if ( limb is Organ_External_Head ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You try to put " ).item( the_item ).str( "'s " ).item( limb.display_name ).str( " in your mouth, but " ).his_her_its_their().str( " ears tickle your throat!</span>" ).ToString() );
					return false;
				}

				if ( limb is Organ_External_Chest ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You try to put " + the_item + "'s " + limb.display_name + " in your mouth, but it's too big to fit!</span>" );
					return false;
				}

				if ( limb is Organ_External_Groin ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You try to put " + the_item + "'s " + limb.display_name + " in your mouth, but it feels far too inappropriate!</span>" );
					return false;
				}
				user.visible_message( "<span class='danger'>" + user + " begins stuffing " + the_item + "'s " + limb.display_name + " into " + m_his + " gaping maw!</span>" );

				if ( !GlobalFuncs.do_mob( user, the_item, 300 ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You were interrupted before you could eat " + the_item + "'s " + limb.display_name + "!</span>" );
				} else {
					user.visible_message( "<span class='danger'>" + user + " eats " + the_item + "'s " + limb.display_name + ".</span>", "<span class='danger'>You eat " + the_item + "'s " + limb.display_name + ".</span>" );
					((Organ_External)limb).droplimb( 1, null, false );
					this.doHeal( user );
				}
			} else {
				user.visible_message( new Txt( "<span class='warning'>" ).item( Task13.User ).str( " eats " ).the( the_item ).item().str( "." ).ToString() );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( user ), "sound/items/eatfood.ogg", 50, 0 );
				GlobalFuncs.qdel( the_item );
				this.doHeal( Task13.User );
			}
			return false;
		}

		// Function from file: goon_powers.dm
		public override ByTable choose_targets( Mob user = null ) {
			user = user ?? Task13.User;

			ByTable targets = null;
			Ent_Dynamic target = null;
			Ent_Dynamic implant = null;
			ByTable possible_targets = null;
			Ent_Dynamic M = null;
			Ent_Dynamic implant2 = null;
			dynamic M2 = null;
			ByTable possible_targets2 = null;
			Ent_Dynamic target2 = null;
			Ent_Dynamic implant3 = null;
			int? i = null;
			dynamic M3 = null;
			int? i2 = null;
			dynamic target3 = null;
			Mob_Living target4 = null;
			bool found = false;
			dynamic mob_type = null;
			Obj_Item I = null;

			targets = new ByTable();

			if ( this.max_targets == 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.view_or_range( this.range, user, this.selection_type ), typeof(Ent_Dynamic) )) {
					target = _a;
					

					if ( !GlobalFuncs.is_type_in_list( target, this.compatible_mobs ) && !( target is Obj_Item ) ) {
						continue;
					}

					if ( target is Obj_Item_Weapon_Implant ) {
						implant = target;

						if ( Lang13.Bool( ((dynamic)implant).imp_in ) ) {
							continue;
						}
					}
					targets.Add( target );
				}
			} else if ( this.max_targets == 1 ) {
				
				if ( ( this.range ??0) <= 0 && ( this.spell_flags & 64 ) != 0 ) {
					targets.Add( user );
				} else {
					possible_targets = new ByTable();

					foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.view_or_range( this.range, user, this.selection_type ), typeof(Ent_Dynamic) )) {
						M = _b;
						

						if ( !( ( this.spell_flags & 64 ) != 0 ) && M == user ) {
							continue;
						}

						if ( !GlobalFuncs.is_type_in_list( M, this.compatible_mobs ) && !( M is Obj_Item ) ) {
							continue;
						}

						if ( M is Obj_Item_Weapon_Implant ) {
							implant2 = M;

							if ( Lang13.Bool( ((dynamic)implant2).imp_in ) ) {
								continue;
							}
						}
						possible_targets.Add( M );
					}

					if ( possible_targets.len != 0 ) {
						
						if ( ( this.spell_flags & 128 ) != 0 ) {
							M2 = Interface13.Input( "Choose something to eat.", "Targeting", null, null, possible_targets, InputType.Null | InputType.Any );

							if ( Lang13.Bool( M2 ) ) {
								targets.Add( M2 );
							}
						} else {
							targets.Add( Rand13.PickFromTable( possible_targets ) );
						}
					}
				}
			} else {
				possible_targets2 = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.view_or_range( this.range, user, this.selection_type ), typeof(Ent_Dynamic) )) {
					target2 = _c;
					

					if ( target2 is Obj_Item_Weapon_Implant ) {
						implant3 = target2;

						if ( Lang13.Bool( ((dynamic)implant3).imp_in ) ) {
							continue;
						}
					}
					possible_targets2.Add( target2 );
				}

				if ( ( this.spell_flags & 128 ) != 0 ) {
					i = null;
					i = 1;

					while (( i ??0) <= ( this.max_targets ??0)) {
						M3 = Interface13.Input( "Choose something to eat.", "Targeting", null, null, possible_targets2, InputType.Null | InputType.Any );

						if ( !Lang13.Bool( M3 ) ) {
							break;
						}

						if ( GlobalFuncs.view_or_range( this.range, user, this.selection_type ).Contains( M3 ) ) {
							targets.Add( M3 );
							possible_targets2.Remove( M3 );
						}
						i++;
					}
				} else {
					i2 = null;
					i2 = 1;

					while (( i2 ??0) <= ( this.max_targets ??0)) {
						
						if ( !( possible_targets2.len != 0 ) ) {
							break;
						}

						if ( this.target_ignore_prev ) {
							target3 = Rand13.PickFromTable( possible_targets2 );
							possible_targets2.Remove( target3 );
							targets.Add( target3 );
						} else {
							targets.Add( Rand13.PickFromTable( possible_targets2 ) );
						}
						i2++;
					}
				}
			}

			if ( !( ( this.spell_flags & 64 ) != 0 ) && targets.Contains( user ) ) {
				targets.Remove( user );
			}

			if ( this.compatible_mobs != null && this.compatible_mobs.len != 0 ) {
				
				foreach (dynamic _e in Lang13.Enumerate( targets, typeof(Mob_Living) )) {
					target4 = _e;
					
					found = false;

					foreach (dynamic _d in Lang13.Enumerate( this.compatible_mobs )) {
						mob_type = _d;
						

						if ( Lang13.Bool( mob_type.IsInstanceOfType( target4 ) ) ) {
							found = true;
						}
					}

					if ( !found ) {
						targets.Remove( target4 );
					}
				}
			}

			foreach (dynamic _f in Lang13.Enumerate( targets, typeof(Obj_Item) )) {
				I = _f;
				

				if ( !( I is Obj_Item ) || !this.holder.Adjacent( I ) ) {
					targets.Remove( I );
				}
			}
			return targets;
		}

		// Function from file: goon_powers.dm
		public void doHeal( Mob user = null ) {
			Mob H = null;
			dynamic name = null;
			Organ_External affecting = null;

			
			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)H).organs_by_name )) {
					name = _a;
					
					affecting = null;

					if ( !Lang13.Bool( ((dynamic)H).organs[name] ) ) {
						continue;
					}
					affecting = ((dynamic)H).organs[name];

					if ( !( affecting is Organ_External ) ) {
						continue;
					}
					affecting.heal_damage( 4, 0 );
				}
				((dynamic)H).UpdateDamageIcon();
				((Mob_Living)H).updatehealth();
			}
			return;
		}

	}

}