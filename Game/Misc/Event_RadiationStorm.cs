// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Event_RadiationStorm : Event {

		public ByTable safe_zones = new ByTable(new object [] { 
											typeof(Zone_Maintenance), 
											typeof(Zone_CrewQuarters_Sleep), 
											typeof(Zone_Security_Prison), 
											typeof(Zone_Security_Perma), 
											typeof(Zone_Security_GasChamber), 
											typeof(Zone_Security_Brig), 
											typeof(Zone_Shuttle), 
											typeof(Zone_VoxStation), 
											typeof(Zone_SyndicateStation)
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.announceWhen = 1;
		}

		public Event_RadiationStorm ( Obj_Item_MechaParts_MechaEquipment_Tool_CableLayer tlistener = null, string tprocname = null ) : base( tlistener, tprocname ) {
			
		}

		// Function from file: radiation_storm.dm
		public override bool start(  ) {
			dynamic A = null;
			dynamic ma = null;
			int? i = null;
			int irradiationThisBurst = 0;
			bool randomMutation = false;
			bool badMutation = false;
			Mob_Living_Carbon_Human H = null;
			dynamic T = null;
			bool applied_rads = false;
			dynamic A2 = null;
			dynamic ma2 = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/radiation.ogg" ) );
				GlobalFuncs.command_alert( "High levels of radiation detected near the station, ETA in 30 seconds. Please evacuate into one of the shielded maintenance tunnels.", "Anomaly Alert" );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
					A = _a;
					

					if ( Lang13.Bool( A.z ) != true || this.is_safe_zone( A ) ) {
						continue;
					}
					ma = GlobalFuncs.get_area_master( A );
					((Zone)ma).radiation_alert();
				}
				GlobalFuncs.make_maint_all_access();
				Task13.Sleep( 300 );
				GlobalFuncs.command_alert( "The station has entered the radiation belt. Please remain in a sheltered area until we have passed the radiation belt.", "Anomaly Alert" );
				i = null;
				i = 0;

				while (( i ??0) < 15) {
					irradiationThisBurst = Rand13.Int( 15, 25 );
					randomMutation = Rand13.PercentChance( 50 );
					badMutation = Rand13.PercentChance( 50 );

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.living_mob_list, typeof(Mob_Living_Carbon_Human) )) {
						H = _b;
						

						if ( H.loc is Obj_Spacepod ) {
							continue;
						}
						T = GlobalFuncs.get_turf( H );

						if ( !Lang13.Bool( T ) ) {
							continue;
						}

						if ( Lang13.Bool( T.z ) != true || this.is_safe_zone( T.loc ) ) {
							continue;
						}
						applied_rads = Convert.ToDouble( H.apply_effect( irradiationThisBurst, "irradiate", 0 ) ) > irradiationThisBurst / 4;

						if ( randomMutation && applied_rads ) {
							
							if ( badMutation ) {
								GlobalFuncs.randmutb( H );
								GlobalFuncs.domutcheck( H, null, true );
							} else {
								GlobalFuncs.randmutg( H );
								GlobalFuncs.domutcheck( H, null, true );
							}
						}
					}
					Task13.Sleep( 25 );
					i++;
				}
				GlobalFuncs.command_alert( "The station has passed the radiation belt. Please report to medbay if you experience any unusual symptoms. Maintenance will lose all access again shortly.", "Anomaly Alert" );

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.areas )) {
					A2 = _c;
					

					if ( Lang13.Bool( A2.z ) != true || this.is_safe_zone( A2 ) ) {
						continue;
					}
					ma2 = GlobalFuncs.get_area_master( A2 );
					((Zone)ma2).reset_radiation_alert();
				}
				Task13.Sleep( 600 );
				GlobalFuncs.revoke_maint_all_access();
				return;
			}));
			return false;
		}

		// Function from file: radiation_storm.dm
		public bool is_safe_zone( dynamic A = null ) {
			dynamic szt = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.safe_zones )) {
				szt = _a;
				

				if ( Lang13.Bool( szt.IsInstanceOfType( A ) ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: radiation_storm.dm
		public override void announce(  ) {
			return;
		}

	}

}