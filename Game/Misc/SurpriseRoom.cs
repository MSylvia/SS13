// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurpriseRoom : Game_Data {

		public ByTable turfs = new ByTable( 0 );
		public ByTable turf_info = new ByTable( 0 );
		public bool size_x = false;
		public bool size_y = false;

		// Function from file: surprise.dm
		public bool AdjacentToTurfType( Ent_Static T = null, bool turfType = false ) {
			dynamic dir = null;
			Tile AT = null;
			SurpriseTurfInfo info = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				AT = Map13.GetStep( T, Convert.ToInt32( dir ) );
				info = this.GetTurfInfo( AT );

				if ( !( info != null ) ) {
					continue;
				}

				if ( info.turf_type == turfType ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: surprise.dm
		public dynamic AdjacentToType( Tile T = null, dynamic adjacent_type = null ) {
			SurpriseTurfInfo sti = null;

			sti = this.GetTurfInfo( T );
			return Lang13.FindIn( adjacent_type, sti.GetAdjacentTypes() );
		}

		// Function from file: surprise.dm
		public bool IsFloor( Tile T = null ) {
			SurpriseTurfInfo sti = null;

			sti = this.GetTurfInfo( T );
			return !sti.turf_type;
		}

		// Function from file: surprise.dm
		public bool IsWall( Tile T = null ) {
			SurpriseTurfInfo sti = null;

			sti = this.GetTurfInfo( T );
			return sti.turf_type;
		}

		// Function from file: surprise.dm
		public void UpdateAdjacentsOfTurf( dynamic T = null ) {
			dynamic Ti = null;
			dynamic dir = null;
			Tile AT = null;
			SurpriseTurfInfo ATi = null;

			Ti = this.turf_info[T];

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				AT = Map13.GetStep( T, Convert.ToInt32( dir ) );
				Interface13.Stat( null, this.turfs.Contains( AT ) );

				if ( !false ) {
					return;
				}
				Interface13.Stat( null, this.turf_info.Contains( AT ) );

				if ( !( !false ) ) {
					this.UpdateTurf( AT, true );
				}
				ATi = this.turf_info[AT];
				ATi.adjacents["" + GlobalFuncs.reverse_direction( dir )] = Ti.types;
			}
			return;
		}

		// Function from file: surprise.dm
		public void AddTypeToTurf( Tile T = null, dynamic newtype = null ) {
			SurpriseTurfInfo sti = null;

			sti = this.GetTurfInfo( T );
			sti.types.Or( newtype );
			return;
		}

		// Function from file: surprise.dm
		public void UpdateTurf( dynamic T = null, bool? no_adjacent = null ) {
			no_adjacent = no_adjacent ?? false;

			SurpriseTurfInfo sti = null;
			Ent_Static A = null;

			sti = this.GetTurfInfo( T );

			if ( !( sti.types is ByTable ) || sti.types == null ) {
				sti.types = new ByTable();
			} else {
				sti.types.len = 0;
			}

			foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Ent_Static) )) {
				A = _a;
				
				sti.types.Or( A.type );
			}

			if ( no_adjacent == true ) {
				return;
			}
			this.UpdateAdjacentsOfTurf( T );
			return;
		}

		// Function from file: surprise.dm
		public SurpriseTurfInfo GetTurfInfo( dynamic T = null ) {
			SurpriseTurfInfo sti = null;

			Interface13.Stat( null, this.turf_info.Contains( T ) );

			if ( !false ) {
				sti = new SurpriseTurfInfo();
				this.turf_info[T] = sti;
			} else {
				sti = this.turf_info[T];
			}
			return sti;
		}

		// Function from file: surprise.dm
		public ByTable GetTurfs( bool ttype = false ) {
			ByTable selected = null;
			dynamic T = null;
			SurpriseTurfInfo Ti = null;

			selected = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( this.turfs )) {
				T = _a;
				
				Ti = this.GetTurfInfo( T );

				if ( Ti.turf_type == ttype ) {
					selected.Or( T );
				}
			}
			return selected;
		}

		// Function from file: surprise.dm
		public void UpdateTurfs(  ) {
			dynamic T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.turfs )) {
				T = _a;
				
				this.UpdateTurf( T );
			}
			return;
		}

	}

}