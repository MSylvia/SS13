// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Event_Wallrot : Event {

		public int severity = 1;

		public Event_Wallrot ( Obj_Item_MechaParts_MechaEquipment_Tool_CableLayer tlistener = null, string tprocname = null ) : base( tlistener, tprocname ) {
			
		}

		// Function from file: vgstation13.dme
		public override bool start(  ) {
			Tile center = null;
			int? i = null;
			Tile candidate = null;
			int rotcount = 0;
			Tile_Simulated_Wall W = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				center = null;
				i = null;
				i = 0;

				while (( i ??0) < 100) {
					candidate = Map13.GetTile( Rand13.Int( 1, Game13.map_size_x ), Rand13.Int( 1, Game13.map_size_y ), 1 );

					if ( candidate is Tile_Simulated_Wall ) {
						center = candidate;
					}
					i++;
				}

				if ( center != null ) {
					((Tile_Simulated_Wall)center).rot();
					rotcount = 0;

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( center, 5 ), typeof(Tile_Simulated_Wall) )) {
						W = _a;
						

						if ( Rand13.PercentChance( 50 ) ) {
							W.rot();
							rotcount++;

							if ( rotcount >= this.severity ) {
								break;
							}
						}
					}
				}
				return;
			}));
			return false;
		}

		// Function from file: wallrot.dm
		public override void announce(  ) {
			GlobalFuncs.command_alert( "Harmful fungi detected on station. Station structures may be contaminated.", "Biohazard Alert" );
			return;
		}

		// Function from file: wallrot.dm
		public override void setup(  ) {
			this.announceWhen = Rand13.Int( 0, 300 );
			this.endWhen = this.announceWhen + 1;
			this.severity = Rand13.Int( 5, 10 );
			return;
		}

	}

}