// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Database_Query : Database {

		public bool database = false;

		public Database_Query ( string query = null, params object[] _ ) : base( query ) {
			ByTable _args = new ByTable( new object[] { query } ).Extend(_);

			DB13.op( this, 5, ( _args.len > 1 ? _args : _args[1] ) );
			return;
		}

		public override dynamic Close(  ) {
			return DB13.op( this, 10 );
		}

		public dynamic GetRowData(  ) {
			return DB13.op( this, 18 );
		}

		public dynamic GetColumn( bool column = false ) {
			return DB13.op( this, 17, ( column ?1:0) - 1 );
		}

		public dynamic Columns( dynamic column = null ) {
			return DB13.op( this, 16, ( Lang13.Bool( Lang13.IsNumber( column ) ) ? column - 1 : column ) );
		}

		public dynamic Reset(  ) {
			return DB13.op( this, 11 );
		}

		public dynamic RowsAffected(  ) {
			return DB13.op( this, 12 );
		}

		public dynamic NextRow(  ) {
			return DB13.op( this, 9 );
		}

		public dynamic Execute( dynamic database = null ) {
			
			if ( Lang13.Bool( database ) && !( database is Database ) ) {
				database = new Database( database );
			}
			this.database = Lang13.Bool( database ) || this.database;
			return DB13.op( this, 8, this.database );
		}

		public void Add( string query = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { query } ).Extend(_);

			DB13.op( this, 5, ( _args.len > 1 ? _args : _args[1] ) );
			return;
		}

		public void Clear(  ) {
			DB13.op( this, 4 );
			return;
		}

		public override void Open( dynamic filename = null ) {
			return;
		}

	}

}