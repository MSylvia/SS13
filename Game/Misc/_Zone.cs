// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class _Zone : Game_Data {

		public string name = null;
		public bool invalid = false;
		public ByTable contents = new ByTable();
		public bool needs_update = false;
		public ByTable edges = new ByTable();
		public GasMixture air = new GasMixture();

		// Function from file: Zone.dm
		public _Zone (  ) {
			GlobalVars.air_master.add_zone( this );
			this.air.temperature = 2.73;
			this.air.group_multiplier = 1;
			this.air.volume = 2500;
			return;
		}

		// Function from file: Zone.dm
		public void dbg_data( Client M = null ) {
			int zone_edges = 0;
			int space_edges = 0;
			int space_coefficient = 0;
			ConnectionEdge E = null;

			GlobalFuncs.to_chat( M, this.name );
			GlobalFuncs.to_chat( M, "O2: " + this.air.oxygen + " N2: " + this.air.nitrogen + " CO2: " + this.air.carbon_dioxide + " P: " + this.air.toxins );
			GlobalFuncs.to_chat( M, "P: " + this.air.return_pressure() + " kPa V: " + this.air.volume + "L T: " + this.air.temperature + "ï¿½K (" + ( ( this.air.temperature ??0) - 273.41 ) + "ï¿½C)" );
			GlobalFuncs.to_chat( M, "O2 per N2: " + ( Lang13.Bool( this.air.nitrogen ) ? this.air.oxygen / this.air.nitrogen : ((dynamic)( "N/A" )) ) + " Moles: " + this.air.total_moles );
			GlobalFuncs.to_chat( M, "Simulated: " + this.contents.len + " (" + this.air.group_multiplier + ")" );

			if ( this.invalid ) {
				GlobalFuncs.to_chat( M, "Invalid!" );
			}
			zone_edges = 0;
			space_edges = 0;
			space_coefficient = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.edges, typeof(ConnectionEdge) )) {
				E = _a;
				

				if ( E.type == typeof(ConnectionEdge_Zone) ) {
					zone_edges++;
				} else {
					space_edges++;
					space_coefficient += E.coefficient;
					GlobalFuncs.to_chat( M, "" + ((dynamic)E).air.return_pressure() + "kPa" );
				}
			}
			GlobalFuncs.to_chat( M, "Zone Edges: " + zone_edges );
			GlobalFuncs.to_chat( M, "Space Edges: " + space_edges + " (" + space_coefficient + " connections)" );
			return;
		}

		// Function from file: Zone.dm
		public void tick(  ) {
			Tile_Simulated T = null;

			this.air.archive();

			if ( this.air.check_tile_graphic() ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Tile_Simulated) )) {
					T = _a;
					
					T.set_graphic( this.air.graphics );
				}
			}
			return;
		}

		// Function from file: Zone.dm
		public void add_tile_air( GasMixture tile_air = null ) {
			this.air.group_multiplier = 1;
			this.air.multiply( this.contents.len );
			this.air.merge( tile_air );
			this.air.divide( this.contents.len + 1 );
			this.air.group_multiplier = this.contents.len + 1;
			return;
		}

		// Function from file: Zone.dm
		public void rebuild(  ) {
			Tile_Simulated T = null;

			
			if ( this.invalid ) {
				return;
			}
			this.c_invalidate();

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Tile_Simulated) )) {
				T = _a;
				
				T.needs_air_update = false;
				GlobalVars.air_master.mark_for_update( T );
			}
			return;
		}

		// Function from file: Zone.dm
		public void c_invalidate(  ) {
			this.invalid = true;
			GlobalVars.air_master.remove_zone( this );
			return;
		}

		// Function from file: Zone.dm
		public void c_merge( dynamic into = null ) {
			Tile_Simulated T = null;

			this.c_invalidate();

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Tile_Simulated) )) {
				T = _a;
				
				into.add( T );
			}
			return;
		}

		// Function from file: Zone.dm
		public void remove( dynamic T = null ) {
			this.contents.Remove( T );
			T.zone = null;
			((Tile_Simulated)T).set_graphic( 0 );

			if ( this.contents.len != 0 ) {
				this.air.group_multiplier = this.contents.len;
			} else {
				this.c_invalidate();
			}
			return;
		}

		// Function from file: Zone.dm
		public void add( Tile_Simulated T = null ) {
			GasMixture turf_air = null;

			turf_air = T.return_air();
			this.add_tile_air( turf_air );
			T.zone = this;
			this.contents.Add( T );
			T.set_graphic( this.air.graphics );
			return;
		}

		// Function from file: Airflow.dm
		public ByTable movables(  ) {
			ByTable _default = null;

			dynamic T = null;
			Ent_Static A = null;

			_default = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.contents )) {
				T = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
					A = _a;
					

					if ( A is Obj_Effect || A is Mob_Dead_Observer || A is Mob_Camera_AiEye ) {
						continue;
					}
					_default.Add( A );
				}
			}
			return _default;
		}

	}

}