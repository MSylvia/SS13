// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class InteractiveMap_Camera : InteractiveMap {

		public ByTable zlevel_data = null;
		public ByTable zlevels = null;
		public ByTable camerasbyzlevel = null;
		public bool initialized = false;

		// Function from file: adv_camera.dm
		public InteractiveMap_Camera (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.zlevels = new ByTable(new object [] { 1, 5 });
			this.zlevel_data = new ByTable().Set( "1", new ByTable() ).Set( "5", new ByTable() );
			return;
		}

		// Function from file: adv_camera.dm
		public override void sendResources( Client C = null ) {
			base.sendResources( C );
			Interface13.CacheBrowseResource( C, "advcamera.js", null );
			return;
		}

		// Function from file: adv_camera.dm
		public override void queueUpdate( int z = 0 ) {
			Controller_Process_Html html = null;

			html = GlobalVars.processScheduler.getProcess( "html" );
			html.queue( GlobalVars.crewmonitor, "update", z );
			return;
		}

		// Function from file: adv_camera.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic L = null;
			Obj_Machinery_Computer_Security_Advanced A = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( hclient is HtmlInterfaceClient ) {
				
				if ( Lang13.Bool( hclient ) && Lang13.Bool( hclient.client ) && Lang13.Bool( hclient.client.mob ) && hclient.client.mob is Mob_Living ) {
					L = hclient.client.mob;
					Task13.User = L;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.html_machines, typeof(Obj_Machinery_Computer_Security_Advanced) )) {
						A = _a;
						

						if ( Task13.User.machine == A ) {
							A.Topic( href, href_list, hclient );
							break;
						}
					}
				}
			}
			return null;
		}

		// Function from file: adv_camera.dm
		public override bool hiIsValidClient( dynamic hclient = null, dynamic hi = null ) {
			bool _default = false;

			bool los = false;

			_default = base.hiIsValidClient( (object)(hclient), (object)(hi) );
			los = ((Mob)hclient.client.mob).html_mob_check( typeof(Obj_Machinery_Computer_Security_Advanced) );

			if ( !los ) {
				((Mob)hclient.client.mob).reset_view( hclient.client.mob );
			}
			return _default && los;
		}

		// Function from file: adv_camera.dm
		public override void update( dynamic z = null, bool? ignore_unused = null, Obj_Machinery_Camera single = null, int? adding = null ) {
			ignore_unused = ignore_unused ?? GlobalVars.FALSE;
			adding = adding ?? 0;

			dynamic zz = null;
			HtmlInterface hi = null;
			string ID = null;
			bool status = false;
			dynamic name = null;
			string area = null;
			int pos_x = 0;
			int pos_y = 0;
			int pos_z = 0;
			double see_x = 0;
			double see_y = 0;
			ByTable results = null;
			dynamic ourcams = null;
			Obj_Machinery_Camera C = null;
			dynamic pos = null;
			dynamic AA = null;
			dynamic pos2 = null;
			dynamic AA2 = null;

			
			if ( Lang13.Bool( this.interfaces["" + z] ) ) {
				zz = String13.ParseNumber( z );

				if ( !Lang13.Bool( zz ) ) {
					zz = z;
				}
				hi = this.interfaces["" + zz];

				if ( ignore_unused == true || hi.isUsed() == true ) {
					results = new ByTable();
					ourcams = this.camerasbyzlevel["" + z];

					if ( !( single is Obj_Machinery_Camera ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( ourcams, typeof(Obj_Machinery_Camera) )) {
							C = _a;
							
							pos = GlobalFuncs.get_turf( C );

							if ( !Lang13.Bool( pos ) ) {
								this.camerasbyzlevel["" + zz] -= C;
								continue;
							}

							if ( pos.z != zz ) {
								this.camerasbyzlevel["" + zz] -= C;

								if ( Lang13.Bool( pos.z ) == true || Convert.ToInt32( pos.z ) == 5 ) {
									this.camerasbyzlevel["" + zz] |= C;
								}
								continue;
							}
							ID = new Txt().Ref( C ).ToString();
							status = C.alarm_on;

							if ( !C.can_use() ) {
								continue;
							}
							name = C.c_tag;
							AA = GlobalFuncs.get_area( C );
							area = GlobalFuncs.format_text( AA.name );
							pos_x = Convert.ToInt32( pos.x );
							pos_y = Convert.ToInt32( pos.y );
							pos_z = Convert.ToInt32( pos.z );
							see_x = Convert.ToDouble( pos.x - GlobalVars.WORLD_X_OFFSET[z] );
							see_y = Convert.ToDouble( pos.y - GlobalVars.WORLD_Y_OFFSET[z] );
							results[++results.len] = new ByTable(new object [] { ID, status, name, area, pos_x, pos_y, pos_z, see_x, see_y });
						}
					} else {
						pos2 = GlobalFuncs.get_turf( single );

						if ( pos2.z != zz ) {
							this.camerasbyzlevel["" + zz] -= single;

							if ( Lang13.Bool( pos2.z ) == true || Convert.ToInt32( pos2.z ) == 5 ) {
								this.camerasbyzlevel["" + zz] |= single;
							} else {
								adding = 2;
							}
						}
						ID = new Txt().Ref( single ).ToString();
						status = single.alarm_on;

						if ( !single.can_use() ) {
							adding = 2;
						}
						name = single.c_tag;
						AA2 = GlobalFuncs.get_area( single );
						area = GlobalFuncs.format_text( AA2.name );
						pos_x = Convert.ToInt32( pos2.x );
						pos_y = Convert.ToInt32( pos2.y );
						pos_z = Convert.ToInt32( pos2.z );
						see_x = Convert.ToDouble( pos2.x - GlobalVars.WORLD_X_OFFSET[z] );
						see_y = Convert.ToDouble( pos2.y - GlobalVars.WORLD_Y_OFFSET[z] );
						results[++results.len] = new ByTable(new object [] { ID, status, name, area, pos_x, pos_y, pos_z, see_x, see_y, adding });
					}
					this.zlevel_data["" + z] = results;
					this.updateFor( null, hi, z, single );
				}
			}
			return;
		}

		// Function from file: adv_camera.dm
		public override void updateFor( dynamic hclient_or_mob = null, HtmlInterface hi = null, dynamic z = null, Obj_Machinery_Camera single = null ) {
			ByTable L = null;

			
			if ( !( single != null ) ) {
				hi.callJavaScript( "clearAll", new ByTable(), hclient_or_mob );
			}
			this.data = this.zlevel_data["" + z];

			foreach (dynamic _a in Lang13.Enumerate( this.data, typeof(ByTable) )) {
				L = _a;
				
				hi.callJavaScript( "add", L, hclient_or_mob );
			}
			return;
		}

		// Function from file: adv_camera.dm
		public override void show( dynamic mob = null, dynamic z = null, HtmlInterface currui = null ) {
			HtmlInterface hi = null;

			z = String13.ParseNumber( z );

			if ( !Lang13.Bool( z ) ) {
				z = mob.z;
			}
			Interface13.Stat( null, this.zlevels.Contains( z ) );

			if ( !( !Lang13.Bool( z ) ) ) {
				GlobalFuncs.to_chat( mob, "zlevel(" + z + ") good levels: " + GlobalFuncs.list2text( this.zlevels, " " ) );
				GlobalFuncs.to_chat( mob, "<span class='danger'>Unable to establish a connection: </span>You're too far away from the station!" );
				return;
			}

			if ( this.interfaces != null ) {
				
				if ( !Lang13.Bool( this.interfaces["" + z] ) ) {
					this.interfaces["" + z] = new HtmlInterface_Nanotrasen( this, "Security Cameras", 900, 800, "" + "<script type=\"text/javascript\" src=\"3-jquery.timers.js\"></script><script type=\"text/javascript\" src=\"libraries.min.js\"></script><link rel=\"stylesheet\" type=\"text/css\" href=\"html_interface_icons.css\" /><link rel=\"stylesheet\" type=\"text/css\" href=\"map_shared.css\" /><script type=\"text/javascript\" src=\"map_shared.js\">" + " </script><script type=\"text/javascript\">var z = " + z + "; var tile_size = " + Game13.icon_size + "; var maxx = " + Game13.map_size_x + "; var maxy = " + Game13.map_size_y + ";</script><script type=\"text/javascript\" src=\"advcamera.js\"></script>" );
					hi = this.interfaces["" + z];
					hi.updateContent( "content", new Txt( "<div id='switches'><a href=\"javascript:switchTo(0);\">Switch to mini map</a> <a href=\"javascript:switchTo(1);\">Switch to text-based</a> <a href='javascript:changezlevels();'>Change Z-Level</a> <a href='byond://?src=" ).Ref( hi ).str( "&cancel=1'>Cancel Viewing</a></div> <div id=\"uiMapContainer\"><div id=\"uiMap\" unselectable=\"on\"></div></div><div id=\"textbased\"></div>" ).ToString() );
					this.update( z, GlobalVars.TRUE );
				} else {
					hi = this.interfaces["" + z];
				}
				hi = this.interfaces["" + z];
				hi.show( mob, currui );
				this.updateFor( mob, hi, z );
			}
			return;
		}

	}

}