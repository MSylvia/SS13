// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ConnectionEdge_Zone : ConnectionEdge {

		public dynamic B = null;
		public int direct = 0;

		// Function from file: ConnectionGroup.dm
		public ConnectionEdge_Zone ( dynamic A = null, dynamic B = null ) {
			this.A = A;
			this.B = B;
			A.edges.Add( this );
			B.edges.Add( this );
			return;
		}

		// Function from file: ConnectionGroup.dm
		public dynamic get_connected_zone( _Zone from = null ) {
			
			if ( this.A == from ) {
				return this.B;
			} else {
				return this.A;
			}
		}

		// Function from file: ConnectionGroup.dm
		public override void tick(  ) {
			dynamic differential = null;
			dynamic attracted = null;
			dynamic repelled = null;
			bool? flipped = null;

			
			if ( this.A.invalid || this.B.invalid ) {
				this.erase();
				return;
			}

			if ( this.direct != 0 ) {
				
				if ( GlobalVars.air_master.equivalent_pressure( this.A, this.B ) ) {
					this.erase();
					GlobalVars.air_master.merge( this.A, this.B );
					return;
				}
			}
			GlobalFuncs.ShareRatio( this.A.air, this.B.air, this.coefficient );
			GlobalVars.air_master.mark_zone_update( this.A );
			GlobalVars.air_master.mark_zone_update( this.B );
			differential = this.A.air.return_pressure() - this.B.air.return_pressure();

			if ( Math.Abs( Convert.ToDouble( differential ) ) < Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowLightestPressure) ) ) ) {
				return;
			}
			flipped = false;

			if ( Convert.ToDouble( differential ) > 0 ) {
				attracted = this.A.movables();
				repelled = ((_Zone)this.B).movables();
			} else {
				flipped = true;
				attracted = ((_Zone)this.B).movables();
				repelled = this.A.movables();
			}
			this.flow( attracted, Math.Abs( Convert.ToDouble( differential ) ), false, flipped );
			this.flow( repelled, Math.Abs( Convert.ToDouble( differential ) ), true, flipped );
			return;
		}

		// Function from file: ConnectionGroup.dm
		public override dynamic erase(  ) {
			dynamic _default = null;

			this.A.edges.Remove( this );
			this.B.edges.Remove( this );
			_default = base.erase();
			return _default;
		}

		// Function from file: ConnectionGroup.dm
		public override bool contains_zone( dynamic Z = null ) {
			return this.A == Z || this.B == Z;
		}

		// Function from file: ConnectionGroup.dm
		public override dynamic remove_connection( Connection c = null ) {
			dynamic _default = null;

			this.connecting_turfs.Remove( c.A );

			if ( c.direct() != 0 ) {
				this.direct--;
			}
			_default = base.remove_connection( c );
			return _default;
		}

		// Function from file: ConnectionGroup.dm
		public override dynamic add_connection( Connection c = null ) {
			dynamic _default = null;

			_default = base.add_connection( c );
			this.connecting_turfs.Add( c.A );

			if ( c.direct() != 0 ) {
				this.direct++;
			}
			return _default;
		}

	}

}