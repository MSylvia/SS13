// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Spell_AoeTurf_Conjure : Spell_AoeTurf {

		public ByTable summon_type = new ByTable();
		public int? summon_amt = 1;
		public bool summon_exclusive = false;
		public ByTable newVars = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Conjure";
			this.desc = "This spell conjures objs of the specified types in range.";
			this.school = "conjuration";
			this.range = 0;
			this.cast_sound = "sound/items/welder.ogg";
		}

		// Function from file: conjure.dm
		public virtual void conjure_animation( Dynamic_Overlay animation = null, dynamic target = null ) {
			GlobalFuncs.qdel( animation );
			animation = null;
			return;
		}

		// Function from file: conjure.dm
		public override bool cast( ByTable targets = null, Mob user = null ) {
			int? i = null;
			dynamic summoned_object_type = null;
			dynamic spawn_place = null;
			dynamic summoned_object = null;
			Dynamic_Overlay animation = null;
			dynamic varName = null;

			GlobalFuncs.playsound( GlobalFuncs.get_turf( user ), this.cast_sound, 50, 1 );
			i = null;
			i = 1;

			while (( i ??0) <= ( this.summon_amt ??0)) {
				
				if ( !( targets.len != 0 ) ) {
					break;
				}
				summoned_object_type = null;

				if ( this.summon_exclusive ) {
					
					if ( !( this.summon_type.len != 0 ) ) {
						break;
					}
					summoned_object_type = this.summon_type[1];
					this.summon_type.Remove( summoned_object_type );
				} else {
					summoned_object_type = Rand13.PickFromTable( this.summon_type );
				}
				spawn_place = Rand13.PickFromTable( targets );

				if ( ( this.spell_flags & 32 ) != 0 ) {
					targets.Remove( spawn_place );
				}
				summoned_object = null;

				if ( Lang13.Bool( summoned_object_type.IsSubclassOf( typeof(Tile) ) ) ) {
					
					if ( GlobalFuncs.get_turf( user ) is Tile_Simulated_Shuttle || spawn_place is Tile_Simulated_Shuttle ) {
						GlobalFuncs.to_chat( user, "<span class='warning>You can't build things on shuttles!</span>" );
						i++;
						continue;
					}
					((Tile)spawn_place).ChangeTurf( summoned_object_type );
					summoned_object = spawn_place;
				} else {
					summoned_object = Lang13.Call( summoned_object_type, spawn_place );
				}
				animation = new Dynamic_Overlay( spawn_place );
				animation.name = "conjure";
				animation.density = false;
				animation.anchored = 1;
				animation.icon = "icons/effects/effects.dmi";
				animation.layer = 3;
				animation.master = summoned_object;

				foreach (dynamic _a in Lang13.Enumerate( this.newVars )) {
					varName = _a;
					
					Interface13.Stat( null, summoned_object.vars.Contains( varName ) );

					if ( false ) {
						summoned_object.vars[varName] = this.newVars[varName];
					}
				}

				if ( Lang13.Bool( this.duration ) ) {
					Task13.Schedule( this.duration ??0, (Task13.Closure)(() => {
						
						if ( Lang13.Bool( summoned_object ) && !( summoned_object is Tile ) ) {
							GlobalFuncs.qdel( summoned_object );
						}
						return;
					}));
				}
				this.conjure_animation( animation, spawn_place );
				i++;
			}
			return false;
		}

	}

}