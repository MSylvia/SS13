// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_SetScrubberGasses : Automation {

		public dynamic scrubber = null;
		public ByTable gasses = new ByTable().Set( "co2", 1 ).Set( "tox", 0 ).Set( "n2o", 0 ).Set( "o2", 0 ).Set( "n2", 0 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Scrubber: Gasses";
		}

		public Automation_SetScrubberGasses ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			
		}

		// Function from file: scrubbers.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			dynamic gas = null;
			ByTable injector_names = null;
			Obj_Machinery_Atmospherics_Unary_VentScrubber S = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["tog_gas"] ) ) {
				gas = href_list["tog_gas"];

				if ( !this.gasses.Contains( gas ) ) {
					return _default;
				}
				this.gasses[gas] = !Lang13.Bool( this.gasses[gas] );
				this.parent.updateUsrDialog();
				return 1;
			}

			if ( Lang13.Bool( href_list["set_scrubber"] ) ) {
				injector_names = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.atmos_machines, typeof(Obj_Machinery_Atmospherics_Unary_VentScrubber) )) {
					S = _a;
					

					if ( !( S.id_tag == null ) && S.frequency == this.parent.frequency ) {
						injector_names.Or( S.id_tag );
					}
				}
				this.scrubber = Interface13.Input( "Select a scrubber:", "Scrubbers", this.scrubber, null, injector_names, InputType.Null | InputType.Any );
				this.parent.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: scrubbers.dm
		public override string GetText(  ) {
			string txt = null;
			dynamic gas = null;

			txt = new Txt( "Set Scrubber <a href=\"?src=" ).Ref( this ).str( ";set_scrubber=1\">" ).item( this.fmtString( this.scrubber ) ).str( "</a> to scrub " ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( this.gasses )) {
				gas = _a;
				
				txt += new Txt( " " ).item( GlobalVars.gas_labels[gas] ).str( " (<a href=\"?src=" ).Ref( this ).str( ";tog_gas=" ).item( gas ).str( "\">" ).item( ( Lang13.Bool( this.gasses[gas] ) ? "on" : "off" ) ).str( "</a>)," ).ToString();
			}
			return txt;
		}

		// Function from file: scrubbers.dm
		public override bool process(  ) {
			ByTable data = null;
			dynamic gas = null;

			
			if ( Lang13.Bool( this.scrubber ) ) {
				data = new ByTable().Set( "tag", this.scrubber ).Set( "sigtype", "command" );

				foreach (dynamic _a in Lang13.Enumerate( this.gasses )) {
					gas = _a;
					
					data[gas + "_scrub"] = this.gasses[gas];
				}
				this.parent.send_signal( data, GlobalVars.RADIO_FROM_AIRALARM );
			}
			return false;
		}

		// Function from file: scrubbers.dm
		public override void Import( ByTable json = null ) {
			dynamic newgasses = null;
			dynamic key = null;

			base.Import( json );
			this.scrubber = json["scrubber"];
			newgasses = json["gasses"];

			foreach (dynamic _a in Lang13.Enumerate( newgasses )) {
				key = _a;
				
				this.gasses[key] = newgasses[key];
			}
			return;
		}

		// Function from file: scrubbers.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["scrubber"] = this.scrubber;
			json["gasses"] = this.gasses;
			return json;
		}

	}

}