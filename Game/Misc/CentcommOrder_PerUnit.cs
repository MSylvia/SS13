// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class CentcommOrder_PerUnit : CentcommOrder {

		public ByTable unit_prices = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.recurring = true;
		}

		// Function from file: centcomm_orders.dm
		public override bool CheckFulfilled( dynamic O = null, dynamic in_crate = null ) {
			double toPay = 0;
			dynamic typepath = null;
			dynamic worth_per_unit = null;
			dynamic amount = null;

			toPay = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.fulfilled )) {
				typepath = _a;
				
				worth_per_unit = this.unit_prices[typepath];
				amount = this.fulfilled[typepath];
				toPay += Convert.ToDouble( amount * worth_per_unit );

				if ( Convert.ToDouble( this.requested[typepath] ) != Double.PositiveInfinity ) {
					this.requested[typepath] = Num13.MaxInt( 0, Convert.ToInt32( this.requested[typepath] - this.fulfilled[typepath] ) );
				}
				this.fulfilled[typepath] = 0;
			}

			if ( toPay != 0 ) {
				this.acct.charge( -toPay, null, "Payment for order #" + this.id, null, null, this.name );
			}
			return false;
		}

		// Function from file: centcomm_orders.dm
		public override bool CheckShuttleObject( Ent_Static O = null, bool in_crate = false ) {
			
			if ( this.must_be_in_crate && !in_crate ) {
				return false;
			}

			if ( !( O != null ) ) {
				return false;
			}
			Interface13.Stat( null, this.requested.Contains( O.type ) );

			if ( !( O != null ) ) {
				Interface13.Stat( null, this.fulfilled.Contains( O.type ) );

				if ( !false ) {
					this.fulfilled[O.type] = 0;
				}
				this.fulfilled[O.type] = this.fulfilled[O.type] + 1;
				GlobalFuncs.qdel( O );
				return true;
			}
			return false;
		}

	}

}