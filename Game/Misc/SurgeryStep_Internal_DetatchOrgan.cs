// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_Internal_DetatchOrgan : SurgeryStep_Internal {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.allowed_tools = new ByTable().Set( typeof(Obj_Item_Weapon_Scalpel), 100 ).Set( typeof(Obj_Item_Weapon_Kitchen_Utensil_Knife_Large), 75 ).Set( typeof(Obj_Item_Weapon_Shard), 50 );
			this.min_duration = 90;
			this.max_duration = 110;
		}

		// Function from file: organs_internal.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			Organ_External affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( "'s hand slips, slicing an artery inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>Your hand slips, slicing an artery inside " ).item( target ).str( "'s " ).item( affected.display_name ).str( " with " ).the( tool ).item().str( "!</span>" ).ToString() );
			affected.createwound( "cut", Rand13.Int( 30, 50 ) );
			return null;
		}

		// Function from file: organs_internal.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic I = null;

			((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " has separated " ).item( target ).str( "'s " ).item( target.op_stage.current_organ ).str( " with " ).the( tool ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You have separated " ).item( target ).str( "'s " ).item( target.op_stage.current_organ ).str( " with " ).the( tool ).item().str( ".</span>" ).ToString() );
			I = target.internal_organs_by_name[target.op_stage.current_organ];

			if ( Lang13.Bool( I ) && I is Organ_Internal ) {
				I.status |= 1;
			}
			return false;
		}

		// Function from file: organs_internal.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " starts to separate " ).item( target ).str( "'s " ).item( target.op_stage.current_organ ).str( " with " ).the( tool ).item().str( "." ).ToString(), new Txt( "You start to separate " ).item( target ).str( "'s " ).item( target.op_stage.current_organ ).str( " with " ).the( tool ).item().str( "." ).ToString() );
			((Mob_Living_Carbon_Human)target).custom_pain( "The pain in your " + affected.display_name + " is living hell!", true );
			base.begin_step( (object)(user), (object)(target), target_zone, tool, (object)(surgery) );
			return false;
		}

		// Function from file: organs_internal.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			ByTable attached_organs = null;
			dynamic organ = null;
			Organ_Internal I = null;
			dynamic organ_to_remove = null;

			
			if ( !( base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 ) ) {
				return 0;
			}
			target.op_stage.current_organ = null;
			attached_organs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( target.internal_organs_by_name )) {
				organ = _a;
				
				I = target.internal_organs_by_name[organ];

				if ( !( I.status != 0 ) && I.parent_organ == target_zone ) {
					attached_organs.Or( organ );
				}
			}
			organ_to_remove = Interface13.Input( user, "Which organ do you want to prepare for removal?", null, null, attached_organs, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( organ_to_remove ) ) {
				return 0;
			}
			target.op_stage.current_organ = organ_to_remove;
			return base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 && Lang13.Bool( organ_to_remove ) ?1:0;
		}

		// Function from file: organs_internal.dm
		public override bool tool_quality( Obj_Item tool = null ) {
			bool _default = false;

			_default = base.tool_quality( tool );

			if ( !Lang13.Bool( tool.is_sharp() ) ) {
				return false;
			}
			return _default;
		}

	}

}