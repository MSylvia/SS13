// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Pipeline : Game_Data {

		public GasMixture air = null;
		public ByTable members = new ByTable();
		public ByTable edges = new ByTable();
		public Game_Data network = null;
		public double alert_pressure = 0;
		public int last_pressure_check = 0;
		public int PRESSURE_CHECK_DELAY = 5;

		// Function from file: datum_pipeline.dm
		public bool temperature_interact( Tile target = null, dynamic share_volume = null, dynamic thermal_conductivity = null ) {
			int total_heat_capacity = 0;
			double partial_heat_capacity = 0;
			Tile modeled_location = null;
			double delta_temperature = 0;
			dynamic heat = null;
			double delta_temperature2 = 0;
			int sharer_heat_capacity = 0;
			double self_temperature_delta = 0;
			double sharer_temperature_delta = 0;
			int heat2 = 0;
			double delta_temperature3 = 0;
			dynamic heat3 = null;

			total_heat_capacity = this.air.heat_capacity();
			partial_heat_capacity = total_heat_capacity * Convert.ToDouble( share_volume / this.air.volume );

			if ( target is Tile_Simulated ) {
				modeled_location = target;

				if ( modeled_location.blocks_air ) {
					
					if ( modeled_location.heat_capacity > 0 && partial_heat_capacity > 0 ) {
						delta_temperature = ( this.air.temperature ??0) - modeled_location.temperature;
						heat = thermal_conductivity * delta_temperature * ( partial_heat_capacity * modeled_location.heat_capacity / ( partial_heat_capacity + modeled_location.heat_capacity ) );
						this.air.temperature -= Convert.ToDouble( heat / total_heat_capacity );
						modeled_location.temperature += Convert.ToDouble( heat / modeled_location.heat_capacity );
					}
				} else {
					delta_temperature2 = 0;
					sharer_heat_capacity = 0;

					if ( Lang13.Bool( ((dynamic)modeled_location).zone ) ) {
						delta_temperature2 = ( this.air.temperature ??0) - Convert.ToDouble( ((dynamic)modeled_location).zone.air.temperature );
						sharer_heat_capacity = ((GasMixture)((dynamic)modeled_location).zone.air).heat_capacity();
					} else {
						delta_temperature2 = ( this.air.temperature ??0) - ( modeled_location.air.temperature ??0);
						sharer_heat_capacity = modeled_location.air.heat_capacity();
					}
					self_temperature_delta = 0;
					sharer_temperature_delta = 0;

					if ( sharer_heat_capacity > 0 && partial_heat_capacity > 0 ) {
						heat2 = Convert.ToInt32( thermal_conductivity * delta_temperature2 * ( partial_heat_capacity * sharer_heat_capacity / ( partial_heat_capacity + sharer_heat_capacity ) ) );
						self_temperature_delta = -heat2 / total_heat_capacity;
						sharer_temperature_delta = heat2 / sharer_heat_capacity;
					} else {
						return true;
					}
					this.air.temperature += self_temperature_delta;

					if ( Lang13.Bool( ((dynamic)modeled_location).zone ) ) {
						((dynamic)modeled_location).zone.air.temperature += sharer_temperature_delta / ((dynamic)modeled_location).zone.air.group_multiplier;
					} else {
						modeled_location.air.temperature += sharer_temperature_delta;
					}
				}
			} else if ( target.heat_capacity > 0 && partial_heat_capacity > 0 ) {
				delta_temperature3 = ( this.air.temperature ??0) - target.temperature;
				heat3 = thermal_conductivity * delta_temperature3 * ( partial_heat_capacity * target.heat_capacity / ( partial_heat_capacity + target.heat_capacity ) );
				this.air.temperature -= Convert.ToDouble( heat3 / total_heat_capacity );
			}

			if ( this.network != null ) {
				((dynamic)this.network).update = 1;
			}
			return false;
		}

		// Function from file: datum_pipeline.dm
		public void mingle_with_turf( Ent_Static target = null, dynamic mingle_volume = null ) {
			GasMixture air_sample = null;
			GasMixture turf_copy = null;
			GasMixture turf_air = null;

			air_sample = this.air.remove_ratio( Convert.ToDouble( mingle_volume / this.air.volume ) );
			air_sample.volume = Lang13.DoubleNullable( mingle_volume );

			if ( target is Tile_Simulated && Lang13.Bool( ((dynamic)target).zone ) ) {
				turf_copy = new GasMixture();
				turf_copy.copy_from( ((dynamic)target).zone.air );
				turf_copy.volume = Lang13.DoubleNullable( ((dynamic)target).zone.air.volume );
				GlobalFuncs.equalize_gases( new ByTable(new object [] { air_sample, turf_copy }) );
				this.air.merge( air_sample );
				turf_copy.subtract( ((dynamic)target).zone.air );
				((GasMixture)((dynamic)target).zone.air).merge( turf_copy );
			} else {
				turf_air = target.return_air();
				GlobalFuncs.equalize_gases( new ByTable(new object [] { air_sample, turf_air }) );
				this.air.merge( air_sample );
			}

			if ( this.network != null ) {
				((dynamic)this.network).update = 1;
			}
			return;
		}

		// Function from file: datum_pipeline.dm
		public Game_Data return_network( dynamic reference = null ) {
			
			if ( !( this.network != null ) ) {
				this.network = GlobalFuncs.getFromPool( typeof(PipeNetwork) );
				((dynamic)this.network).build_network( this, null );
			}
			return this.network;
		}

		// Function from file: datum_pipeline.dm
		public bool network_expand( PipeNetwork new_network = null, Obj_Machinery_Atmospherics reference = null ) {
			Obj_Machinery_Atmospherics_Pipe edge = null;
			Obj_Machinery_Atmospherics result = null;

			
			if ( new_network.line_members.Find( this ) != 0 ) {
				return false;
			}
			new_network.line_members.Add( this );
			this.network = new_network;

			foreach (dynamic _b in Lang13.Enumerate( this.edges, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
				edge = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( edge.pipeline_expansion(), typeof(Obj_Machinery_Atmospherics) )) {
					result = _a;
					

					if ( !( result is Obj_Machinery_Atmospherics_Pipe ) && result != reference ) {
						result.network_expand( new_network, edge );
					}
				}
			}
			return true;
		}

		// Function from file: datum_pipeline.dm
		public void build_pipeline( Obj_Machinery_Atmospherics_Pipe _base = null ) {
			ByTable possible_expansions = null;
			int volume = 0;
			Obj_Machinery_Atmospherics_Pipe borderline = null;
			ByTable result = null;
			int edge_check = 0;
			Obj_Machinery_Atmospherics_Pipe item = null;

			possible_expansions = new ByTable(new object [] { _base });
			this.members = new ByTable(new object [] { _base });
			this.edges = new ByTable();
			volume = _base.volume;
			_base.parent = this;
			this.alert_pressure = _base.alert_pressure;

			if ( _base.air_temporary != null ) {
				this.air = _base.air_temporary;
				_base.air_temporary = null;
			} else {
				this.air = new GasMixture();
			}

			while (possible_expansions.len > 0) {
				
				foreach (dynamic _b in Lang13.Enumerate( possible_expansions, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
					borderline = _b;
					
					result = borderline.pipeline_expansion();
					edge_check = result.len;

					if ( result.len > 0 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( result, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
							item = _a;
							

							if ( !( this.members.Find( item ) != 0 ) ) {
								this.members.Add( item );
								possible_expansions.Add( item );
								volume += item.volume;
								item.parent = this;
								this.alert_pressure = Num13.MinInt( ((int)( this.alert_pressure )), ((int)( item.alert_pressure )) );

								if ( item.air_temporary != null ) {
									this.air.merge( item.air_temporary );
								}
							}
							edge_check--;
						}
					}

					if ( edge_check > 0 ) {
						this.edges.Add( borderline );
					}
					possible_expansions.Remove( borderline );
				}
			}
			this.air.volume = volume;
			this.air.update_values();
			return;
		}

		// Function from file: datum_pipeline.dm
		public void temporarily_store_air(  ) {
			Obj_Machinery_Atmospherics_Pipe member = null;
			Gas trace_gas = null;
			dynamic corresponding = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.members, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
				member = _b;
				
				member.air_temporary = new GasMixture();
				member.air_temporary.volume = member.volume;
				member.air_temporary.oxygen = this.air.oxygen * member.volume / this.air.volume;
				member.air_temporary.nitrogen = this.air.nitrogen * member.volume / this.air.volume;
				member.air_temporary.toxins = this.air.toxins * member.volume / this.air.volume;
				member.air_temporary.carbon_dioxide = this.air.carbon_dioxide * member.volume / this.air.volume;
				member.air_temporary.temperature = this.air.temperature;

				if ( this.air.trace_gases.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.air.trace_gases, typeof(Gas) )) {
						trace_gas = _a;
						
						corresponding = Lang13.Call( trace_gas.type );
						member.air_temporary.trace_gases.Add( corresponding );
						corresponding.moles = ( trace_gas.moles ??0) * member.volume / ( this.air.volume ??0);
					}
				}
				member.air_temporary.update_values();
			}
			return;
		}

		// Function from file: datum_pipeline.dm
		public void process(  ) {
			dynamic pressure = null;
			Obj_Machinery_Atmospherics_Pipe member = null;

			
			if ( ( Game13.timeofday - this.last_pressure_check ) / 10 >= GlobalVars.PRESSURE_CHECK_DELAY ) {
				pressure = this.air.return_pressure();

				if ( Convert.ToDouble( pressure ) > this.alert_pressure ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.members, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
						member = _a;
						

						if ( !member.check_pressure( pressure ) ) {
							this.last_pressure_check = Game13.timeofday;
							break;
						}
					}
				}
			}
			return;
		}

		// Function from file: datum_pipeline.dm
		public override dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			base.resetVariables( "members", "edges" );
			this.members = new ByTable();
			this.edges = new ByTable();
			return null;
		}

		// Function from file: datum_pipeline.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Machinery_Atmospherics_Pipe M = null;

			
			if ( this.network != null ) {
				GlobalFuncs.returnToPool( this.network );
			}

			if ( this.air != null && Lang13.Bool( this.air.volume ) ) {
				this.temporarily_store_air();
				GlobalFuncs.qdel( this.air );
				this.air = null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.members, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
				M = _a;
				
				M.parent = null;
			}
			return null;
		}

		// Function from file: datum_pipe_network.dm
		public override void Del(  ) {
			GlobalVars.pipe_networks.Remove( this );
			base.Del();
			return;
		}

	}

}