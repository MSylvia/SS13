// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Disease : Game_Data {

		public string form = "Virus";
		public dynamic name = "No disease";
		public int? stage = 1;
		public int? max_stages = 0;
		public string cure = null;
		public dynamic cure_id = null;
		public ByTable cure_list = null;
		public int cure_chance = 8;
		public string spread = null;
		public string initial_spread = null;
		public int spread_type = 5;
		public int? contagious_period = 0;
		public ByTable affected_species = new ByTable();
		public dynamic affected_mob = null;
		public Mob_Living_Carbon_Human holder = null;
		public bool carrier = false;
		public bool curable = false;
		public ByTable strain_data = new ByTable();
		public int stage_prob = 4;
		public string agent = "some microbes";
		public double permeability_mod = 1;
		public string desc = null;
		public string severity = null;
		public int longevity = 150;
		public ByTable hidden = new ByTable(new object [] { 0, 0 });
		public bool can_carry = true;
		public int age = 0;
		public int stage_minimum_age = 0;

		// Function from file: disease.dm
		public Disease ( bool? process = null, Disease_Advance D = null ) {
			process = process ?? true;

			this.cure_list = new ByTable(new object [] { this.cure_id });

			if ( process == true ) {
				GlobalVars.active_diseases.Add( this );
			}
			this.initial_spread = this.spread;
			return;
		}

		// Function from file: disease.dm
		public override void Del(  ) {
			GlobalVars.active_diseases.Remove( this );

			if ( Lang13.Bool( this.affected_mob ) ) {
				this.affected_mob.viruses -= this;
			}
			base.Del();
			return;
		}

		// Function from file: disease.dm
		public virtual dynamic Copy( bool? process = null ) {
			process = process ?? false;

			return Lang13.Call( this.type, process, this );
		}

		// Function from file: disease.dm
		public virtual bool IsSame( dynamic D = null ) {
			
			if ( Lang13.Bool( ((dynamic)D.type).IsInstanceOfType( this ) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: disease.dm
		[VerbInfo( name: "cure" )]
		public virtual void f_cure( bool? resistance = null ) {
			resistance = resistance ?? true;

			string saved_type = null;

			
			if ( Lang13.Bool( this.affected_mob ) ) {
				
				if ( resistance == true && !false ) {
					saved_type = "" + this.type;
					this.affected_mob.resistances.Add( Lang13.FindClass( saved_type ) );
				}
				this.affected_mob.viruses -= this;
			}
			Lang13.Delete( this );
			Task13.Source = null;
			return;
		}

		// Function from file: disease.dm
		public void process(  ) {
			Disease D = null;

			
			if ( !( this.holder != null ) ) {
				GlobalVars.active_diseases.Remove( this );
				return;
			}

			if ( Rand13.PercentChance( 65 ) ) {
				this.f_spread( this.holder );
			}

			if ( Lang13.Bool( this.affected_mob ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.affected_mob.viruses, typeof(Disease) )) {
					D = _a;
					

					if ( D != this ) {
						
						if ( this.IsSame( D ) ) {
							Lang13.Delete( D );
							D = null;
						}
					}
				}
			}

			if ( this.holder == this.affected_mob ) {
				
				if ( Convert.ToInt32( this.affected_mob.stat ) != 2 ) {
					this.stage_act();
				} else {
					
					if ( this.spread_type != -1 ) {
						this.spread_type = 4;
					}
					this.affected_mob = null;
				}
			}

			if ( !Lang13.Bool( this.affected_mob ) ) {
				
				if ( Rand13.PercentChance( 70 ) ) {
					
					if ( --this.longevity <= 0 ) {
						this.f_cure( false );
					}
				}
			}
			return;
		}

		// Function from file: disease.dm
		[VerbInfo( name: "spread" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile | InputType.Zone )]
		public bool f_spread( dynamic source = null, int? airborne_range = null, int? force_spread = null ) {
			airborne_range = airborne_range ?? 2;

			int? how_spread = null;
			int? check_range = null;
			Mob_Living_Carbon M = null;

			how_spread = this.spread_type;

			if ( !( this.affected_mob is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( Lang13.Bool( force_spread ) ) {
				how_spread = force_spread;
			}

			if ( how_spread == -1 || how_spread == 0 || how_spread == 1 ) {
				return false;
			}

			if ( ( this.stage ??0) < ( this.contagious_period ??0) ) {
				return false;
			}

			if ( !Lang13.Bool( source ) ) {
				
				if ( Lang13.Bool( this.affected_mob ) ) {
					source = this.affected_mob;
				} else {
					return false;
				}
			}

			if ( this.affected_mob.reagents != null ) {
				
				if ( Lang13.Bool( this.affected_mob ) ) {
					
					if ( ((Reagents)this.affected_mob.reagents).has_reagent( "spaceacillin" ) ) {
						return false;
					}
				}
			}
			check_range = airborne_range;

			if ( how_spread != 5 && how_spread != -1 ) {
				check_range = 1;
			}

			if ( source.loc is Tile ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( source, check_range ), typeof(Mob_Living_Carbon) )) {
					M = _a;
					

					if ( M.loc is Tile ) {
						
						if ( Lang13.Bool( GlobalFuncs.AStar( source.loc, M.loc, typeof(Tile).GetMethod( "AdjacentTurfs" ), typeof(Tile).GetMethod( "Distance" ), check_range ) ) ) {
							M.contract_disease( this, false, true, force_spread );
						}
					}
				}
			}
			return false;
		}

		// Function from file: disease.dm
		public bool spread_by_touch(  ) {
			
			switch ((int)( this.spread_type )) {
				case 2:
				case 3:
				case 4:
					return true;
					break;
			}
			return false;
		}

		// Function from file: disease.dm
		public bool has_cure(  ) {
			bool result = false;
			dynamic C_id = null;
			dynamic C_list = null;
			dynamic C_id2 = null;

			
			if ( !Lang13.Bool( this.cure_id ) ) {
				return false;
			}
			result = true;

			if ( this.cure_list == new ByTable(new object [] { this.cure_id }) ) {
				
				if ( this.cure_id is ByTable ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.cure_id )) {
						C_id = _a;
						

						if ( !((Reagents)this.affected_mob.reagents).has_reagent( C_id ) ) {
							result = false;
						}
					}
				} else if ( !((Reagents)this.affected_mob.reagents).has_reagent( this.cure_id ) ) {
					result = false;
				}
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( this.cure_list )) {
					C_list = _c;
					

					if ( C_list is ByTable ) {
						
						foreach (dynamic _b in Lang13.Enumerate( this.cure_id )) {
							C_id2 = _b;
							

							if ( this.affected_mob.reagents != null ) {
								result = false;
							} else if ( !((Reagents)this.affected_mob.reagents).has_reagent( C_id2 ) ) {
								result = false;
							}
						}
					} else if ( this.affected_mob.reagents != null ) {
						
						if ( !((Reagents)this.affected_mob.reagents).has_reagent( C_list ) ) {
							result = false;
						}
					}
				}
			}
			return result;
		}

		// Function from file: disease.dm
		public virtual bool stage_act(  ) {
			bool cure_present = false;

			this.age++;
			cure_present = this.has_cure();

			if ( this.carrier && !cure_present ) {
				return false;
			}
			this.spread = ( cure_present ? "Remissive" : this.initial_spread );

			if ( ( this.stage ??0) > ( this.max_stages ??0) ) {
				this.stage = this.max_stages;
			}

			if ( !cure_present && Rand13.PercentChance( this.stage_prob ) && this.age > this.stage_minimum_age ) {
				this.stage = Num13.MinInt( ( this.stage ??0) + 1, this.max_stages ??0 );
				this.age = 0;
			} else if ( cure_present && Rand13.PercentChance( this.cure_chance ) ) {
				this.stage = Num13.MaxInt( ( this.stage ??0) - 1, 1 );
			}

			if ( ( this.stage ??0) <= 1 && ( Rand13.PercentChance( 1 ) && this.curable || cure_present && Rand13.PercentChance( this.cure_chance ) ) ) {
				this.f_cure();
				return false;
			}
			return false;
		}

	}

}