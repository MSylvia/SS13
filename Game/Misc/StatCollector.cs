// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class StatCollector : Game_Data {

		public ByTable human_death_stats = new ByTable();
		public ByTable death_stats = new ByTable();
		public ByTable explosion_stats = new ByTable();
		public ByTable uplink_purchases = new ByTable();
		public ByTable badass_bundles = new ByTable();
		public double blood_spilled = 0;
		public int crates_ordered = 0;
		public int artifacts_discovered = 0;
		public bool narsie_corpses_fed = false;
		public bool escapees = false;
		public bool crewscore = false;
		public int nuked = 0;
		public StatBlob_Cult cult = new StatBlob_Cult();
		public StatBlob_Xeno xeno = new StatBlob_Xeno();
		public string gamemode = "UNSET";
		public dynamic mixed_gamemodes = null;
		public double round_start_time = 0;

		// Function from file: statcollection.dm
		public void Process(  ) {
			string filename_date = null;
			int roundnum = 0;
			File statfile = null;
			double start_time = 0;
			Stat_DeathStat D = null;
			Stat_ExplosionStat E = null;
			Stat_UplinkPurchaseStat U = null;
			Stat_UplinkBadassBundleStat B = null;
			string o = null;
			dynamic S = null;

			filename_date = String13.FormatTime( this.round_start_time, "YYYY.DD.MM" );
			roundnum = 1;

			while (File13.Exists( new File( "" + "data/statfiles/" + "statistics_" + filename_date + "." + roundnum + ".txt" ) )) {
				roundnum++;
			}
			statfile = new File( "" + "data/statfiles/" + "statistics_" + filename_date + "." + roundnum + ".txt" );
			Game13.WriteMsg( "Writing statistics to file" );
			start_time = Game13.realtime;
			this.Write_Header( statfile );
			statfile.WriteMsg( "TECH_TOTAL|" + this.get_research_score() );
			statfile.WriteMsg( "BLOOD_SPILLED|" + this.blood_spilled );
			statfile.WriteMsg( "CRATES_ORDERED|" + this.crates_ordered );
			statfile.WriteMsg( "ARTIFACTS_DISCOVERED|" + this.artifacts_discovered );
			statfile.WriteMsg( "CREWSCORE|" + this.crewscore );
			statfile.WriteMsg( "ESCAPEES|" + this.escapees );
			statfile.WriteMsg( "NUKED|" + this.nuked );

			foreach (dynamic _a in Lang13.Enumerate( this.death_stats, typeof(Stat_DeathStat) )) {
				D = _a;
				
				statfile.WriteMsg( "MOB_DEATH|" + D.mob_typepath + "|" + D.special_role + "|" + String13.NumberToString( D.time_of_death, 30 ) + "|" + D.last_attacked_by + "|" + D.death_x + "|" + D.death_y + "|" + D.death_z + "|" + D.key + "|" + D.realname );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.explosion_stats, typeof(Stat_ExplosionStat) )) {
				E = _b;
				
				statfile.WriteMsg( "EXPLOSION|" + E.epicenter_x + "|" + E.epicenter_y + "|" + E.epicenter_z + "|" + E.devastation_range + "|" + E.heavy_impact_range + "|" + E.light_impact_range + "|" + E.max_range );
			}

			foreach (dynamic _c in Lang13.Enumerate( this.uplink_purchases, typeof(Stat_UplinkPurchaseStat) )) {
				U = _c;
				
				statfile.WriteMsg( "UPLINK_ITEM|" + U.purchaser_key + "|" + U.purchaser_name + "|" + U.purchaser_is_traitor + "|" + U.bundle + "|" + U.itemtype );
			}

			foreach (dynamic _e in Lang13.Enumerate( this.badass_bundles, typeof(Stat_UplinkBadassBundleStat) )) {
				B = _e;
				
				o = "BADASS_BUNDLE|" + B.purchaser_key + "|" + B.purchaser_name + "|" + B.purchaser_is_traitor;

				foreach (dynamic _d in Lang13.Enumerate( B.contains )) {
					S = _d;
					
					o += "|" + S;
				}
				statfile.WriteMsg( "" + o );
			}
			this.cult.doPostRoundChecks();
			this.cult.writeStats( statfile );
			this.xeno.doPostRoundChecks();
			this.xeno.writeStats( statfile );
			this.antagCheck( statfile );
			this.Write_Footer( statfile );
			Game13.WriteMsg( "Statistics written to file in " + ( start_time - Game13.realtime ) / 10 + " seconds." );
			return;
		}

		// Function from file: statcollection.dm
		public void Write_Footer( File statfile = null ) {
			statfile.WriteMsg( "WRITE_COMPLETE" );
			return;
		}

		// Function from file: statcollection.dm
		public void Write_Header( File statfile = null ) {
			dynamic mixy = null;
			string T = null;
			GameMode GM = null;

			statfile.WriteMsg( "STATLOG_START|" + "1.0" + "|" + GlobalVars.map.nameLong + "|" + String13.NumberToString( this.round_start_time, 30 ) + "|" + String13.NumberToString( Game13.realtime, 30 ) );
			statfile.WriteMsg( "MASTERMODE|" + GlobalVars.master_mode );

			if ( GlobalVars.ticker.mode is GameMode_Mixed ) {
				mixy = GlobalVars.ticker.mode;
				T = "GAMEMODE";

				foreach (dynamic _a in Lang13.Enumerate( mixy.modes, typeof(GameMode) )) {
					GM = _a;
					
					T += "|" + GM.name;
				}
				statfile.WriteMsg( T );
			} else {
				statfile.WriteMsg( "GAMEMODE|" + GlobalVars.ticker.mode.name );
			}
			return;
		}

		// Function from file: statcollection.dm
		public void antagCheck( File statfile = null ) {
			Mind Mind = null;
			Objective objective = null;

			
			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
				Mind = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( Mind.objectives, typeof(Objective) )) {
					objective = _a;
					

					if ( objective.explanation_text == "Free Objective" ) {
						statfile.WriteMsg( "ANTAG_OBJ|" + Mind.name + "|" + Mind.key + "|" + Mind.special_role + "|FREE_OBJ" );
					} else if ( Lang13.Bool( objective.target ) ) {
						statfile.WriteMsg( "ANTAG_OBJ|" + Mind.name + "|" + Mind.key + "|" + Mind.special_role + "|" + objective.type + "|" + objective.target + "|" + objective.target.assigned_role + "|" + objective.target.name + "|" + objective.check_completion() + "|" + objective.explanation_text );
					} else {
						statfile.WriteMsg( "ANTAG_OBJ|" + Mind.name + "|" + Mind.key + "|" + Mind.special_role + "|" + objective.type + "|" + objective.check_completion() + "|" + objective.explanation_text );
					}
				}
			}
			return;
		}

		// Function from file: statcollection.dm
		public dynamic get_research_score(  ) {
			Obj_Machinery_RND_Server server = null;
			dynamic tech_level_total = null;
			Obj_Machinery_RND_Server serber = null;
			Tech T = null;
			dynamic KT = null;

			server = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_RND_Server) )) {
				serber = _a;
				

				if ( serber.name == "Core R&D Server" ) {
					server = serber;
					break;
				}
			}

			if ( !( server != null ) ) {
				return null;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.tech_list, typeof(Tech) )) {
				T = _b;
				

				if ( T.goal_level == 0 ) {
					continue;
				}
				KT = Lang13.FindIn( T.type, server.files.known_tech );
				tech_level_total += KT.level;
			}
			return tech_level_total;
		}

		// Function from file: statcollection.dm
		public void add_explosion_stat( dynamic epicenter = null, dynamic dev_range = null, dynamic hi_range = null, dynamic li_range = null, int mx_range = 0 ) {
			Stat_ExplosionStat e = null;

			e = new Stat_ExplosionStat();
			e.epicenter_x = Convert.ToInt32( epicenter.x );
			e.epicenter_y = Convert.ToInt32( epicenter.y );
			e.epicenter_z = Convert.ToInt32( epicenter.z );
			e.devastation_range = dev_range;
			e.heavy_impact_range = hi_range;
			e.light_impact_range = li_range;
			e.max_range = mx_range;
			GlobalVars.stat_collection.explosion_stats.Add( e );
			return;
		}

		// Function from file: statcollection.dm
		public bool add_death_stat( Mob M = null ) {
			Stat_DeathStat d = null;

			
			if ( GlobalVars.ticker.current_state != 3 ) {
				return false;
			}
			d = new Stat_DeathStat();
			d.time_of_death = M.timeofdeath;
			d.last_attacked_by = M.LAssailant;
			d.death_x = M.x;
			d.death_y = M.y;
			d.death_z = M.z;
			d.mob_typepath = M.type;
			d.realname = M.name;

			if ( M.mind != null ) {
				
				if ( Lang13.Bool( M.mind.special_role ) && M.mind.special_role != "" ) {
					d.special_role = M.mind.special_role;
				}

				if ( Lang13.Bool( M.mind.key ) ) {
					d.key = M.mind.key;
				}

				if ( Lang13.Bool( M.mind.name ) ) {
					d.realname = M.mind.name;
				}
			}
			GlobalVars.stat_collection.death_stats.Add( d );
			return false;
		}

		// Function from file: statcollection.dm
		public void uplink_purchase( UplinkItem bundle = null, dynamic resulting_item = null, Mob user = null ) {
			bool was_traitor = false;
			Stat_UplinkBadassBundleStat BAD = null;
			dynamic B = null;
			Obj O = null;
			Stat_UplinkPurchaseStat UP = null;

			was_traitor = true;

			if ( user.mind != null && user.mind.special_role != "traitor" ) {
				was_traitor = false;
			}

			if ( bundle is UplinkItem_Badass_Bundle ) {
				BAD = new Stat_UplinkBadassBundleStat();
				B = resulting_item;

				foreach (dynamic _a in Lang13.Enumerate( B.contents, typeof(Obj) )) {
					O = _a;
					
					BAD.contains.Add( O.type );
				}
				BAD.purchaser_key = user.mind.key;
				BAD.purchaser_name = user.mind.name;
				BAD.purchaser_is_traitor = was_traitor;
				this.badass_bundles.Add( BAD );
			} else {
				UP = new Stat_UplinkPurchaseStat();

				if ( bundle is UplinkItem_Badass_Random ) {
					UP.itemtype = resulting_item.type;
				} else {
					UP.itemtype = bundle.item;
				}
				UP.bundle = bundle.type;
				UP.purchaser_key = user.mind.key;
				UP.purchaser_name = user.mind.name;
				UP.purchaser_is_traitor = was_traitor;
				this.uplink_purchases.Add( UP );
			}
			return;
		}

	}

}