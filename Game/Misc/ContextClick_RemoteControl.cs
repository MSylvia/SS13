// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class ContextClick_RemoteControl : ContextClick {

		public ByTable buttons = new ByTable();
		public ByTable removable_buttons = new ByTable();
		public ByTable pressed = new ByTable();

		public ContextClick_RemoteControl ( Obj_Item to_hold = null ) : base( to_hold ) {
			
		}

		// Function from file: remote.dm
		public override dynamic action( dynamic used_item = null, dynamic user = null, dynamic _params = null ) {
			dynamic button_id = null;
			dynamic removed = null;
			dynamic button_id2 = null;

			
			if ( Lang13.Bool( used_item ) ) {
				
				if ( used_item is Obj_Item_Weapon_Screwdriver ) {
					button_id = this.return_clicked_id_by_params( _params );

					if ( Lang13.Bool( this.get_button_by_id( button_id ) ) ) {
						removed = this.remove_button( button_id );

						if ( Lang13.Bool( removed ) ) {
							GlobalFuncs.to_chat( user, new Txt( "You pop out " ).the( removed ).item().str( "." ).ToString() );
							((Mob)user).put_in_hands( removed );
						} else {
							GlobalFuncs.to_chat( user, "The button doesn't seem to be removable." );
						}
						return 1;
					}
				}

				if ( used_item is Obj_Item_Device_RemoteButton ) {
					
					if ( ((Mob)user).drop_item( used_item, this.holder ) ) {
						
						if ( this.add_button( used_item, this.return_clicked_id_by_params( _params ) ) ) {
							GlobalFuncs.to_chat( user, new Txt( "You click " ).the( used_item ).item().str( " into " ).the( this.holder ).item().str( "." ).ToString() );
							return 1;
						} else {
							((Ent_Dynamic)used_item).forceMove( GlobalFuncs.get_turf( this ) );
						}
					}
				}
			}
			button_id2 = this.return_clicked_id_by_params( _params );
			return this.press_button( button_id2, user );
		}

		// Function from file: remote.dm
		public bool press_button( dynamic button_id = null, dynamic user = null ) {
			Obj_Item_Device_RemoteButton button = null;

			Interface13.Stat( null, this.pressed.Contains( button_id ) );

			if ( false ) {
				return false;
			}
			button = this.get_button_by_id( button_id );

			if ( button != null ) {
				button.on_press( user );

				if ( button.depression_time != 0 ) {
					this.pressed.Or( button_id );
					Task13.Schedule( button.depression_time, (Task13.Closure)(() => {
						this.pressed.Remove( button_id );
						return;
					}));
				}
				return true;
			}
			return false;
		}

		// Function from file: remote.dm
		public virtual string get_icon_type( dynamic button_id = null ) {
			return null;
		}

		// Function from file: remote.dm
		public virtual ByTable get_pixel_displacement( dynamic button_id = null ) {
			return new ByTable().Set( "pixel_x", 0 ).Set( "pixel_y", 0 );
		}

		// Function from file: remote.dm
		public dynamic get_button_by_id( dynamic button_id = null ) {
			
			if ( Lang13.Bool( button_id ) && false ) {
				return this.buttons[button_id];
			}
			return null;
		}

		// Function from file: remote.dm
		public dynamic remove_button( dynamic button_id = null, bool? _override = null ) {
			_override = _override ?? false;

			Obj_Item_Device_RemoteButton old_button = null;

			Interface13.Stat( null, this.buttons.Contains( button_id ) );

			if ( !( _override == null ) ) {
				return 0;
			}
			Interface13.Stat( null, this.removable_buttons.Contains( button_id ) );

			if ( !( !( _override == null ) ) && !( _override == true ) ) {
				return null;
			}
			old_button = this.buttons[button_id];

			if ( !( old_button != null ) ) {
				return 0;
			}
			this.buttons[button_id] = null;
			old_button.on_remote_remove();
			return old_button;
		}

		// Function from file: remote.dm
		public bool can_attach_button( dynamic button = null, dynamic button_id = null ) {
			return true;
		}

		// Function from file: remote.dm
		public bool add_button( dynamic button = null, dynamic button_id = null ) {
			
			if ( !Lang13.Bool( button ) || !( button is Obj_Item_Device_RemoteButton ) || !false || Lang13.Bool( this.buttons[button_id] ) ) {
				return false;
			}

			if ( !this.can_attach_button( button, button_id ) ) {
				return false;
			}
			this.buttons[button_id] = button;
			((Obj_Item_Device_RemoteButton)button).on_remote_attach( this.holder, this, button_id );
			return true;
		}

	}

}