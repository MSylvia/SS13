// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class HtmlInterface : Game_Data {

		public Game_Data v_ref = null;
		public string title = null;
		public ByTable content_elements = new ByTable();
		public string layout = null;
		public ByTable clients = null;
		public string head = "";
		public int? width = null;
		public int? height = null;
		public string default_html_file = "html_interface.html";

		// Function from file: html_interface.dm
		public HtmlInterface ( Game_Data _ref = null, string title = null, int? width = null, int? height = null, string head = null ) {
			width = width ?? 700;
			height = height ?? 480;
			head = head ?? "";

			GlobalVars.html_interfaces.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.v_ref = _ref;
			this.title = title;
			this.width = width;
			this.height = height;
			this.head = head;
			return;
		}

		// Function from file: nanotrasen.dm
		public void specificRenderTitle( dynamic hclient = null, bool? ignore_cache = null ) {
			ignore_cache = ignore_cache ?? GlobalVars.FALSE;

			Interface13.WindowSet( hclient.client, new Txt( "browser_" ).Ref( this ).str( ".uiTitle" ).ToString(), String13.MakeUrlParams( new ByTable().Set( "text", "" + this.title ) ) );
			return;
		}

		// Function from file: html_interface.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic hclient2 = null;

			hclient2 = this.getClient( Task13.User.client );

			if ( hclient2 is HtmlInterfaceClient ) {
				Interface13.Stat( null, href_list.Contains( "html_interface_action" ) );

				if ( false ) {
					
					dynamic _a = href_list["html_interface_action"]; // Was a switch-case, sorry for the mess.
					if ( _a=="onload" ) {
						hclient2.layout = null;
						hclient2.content_elements.len = 0;
						this._renderTitle( hclient2, GlobalVars.TRUE, GlobalVars.TRUE );
						this._renderLayout( hclient2, GlobalVars.TRUE );
						hclient2.is_loaded = GlobalVars.TRUE;
					} else if ( _a=="onclose" ) {
						this.hide( hclient2 );
					}
				} else if ( this.v_ref != null ) {
					this.v_ref.Topic( href, href_list, hclient2 );
				}
			}
			return null;
		}

		// Function from file: html_interface.dm
		public void _renderContent( dynamic id = null, dynamic hclient = null, bool? ignore_cache = null, bool? ignore_loaded = null ) {
			ignore_cache = ignore_cache ?? GlobalVars.FALSE;
			ignore_loaded = ignore_loaded ?? GlobalVars.FALSE;

			dynamic html = null;

			
			if ( Lang13.Bool( hclient ) && ( ignore_loaded == true || hclient.is_loaded == true ) ) {
				html = this.content_elements[id];

				if ( ignore_cache == true || !false || html != hclient.content_elements[id] ) {
					hclient.content_elements[id] = html;
					Interface13.Output( hclient.client, String13.MakeUrlParams( new ByTable(new object [] { id, html }) ), new Txt( "browser_" ).Ref( this ).str( ".browser:updateContent" ).ToString() );
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public void _renderLayout( dynamic hclient = null, bool? ignore_loaded = null ) {
			ignore_loaded = ignore_loaded ?? GlobalVars.FALSE;

			string html = null;
			dynamic id = null;

			
			if ( Lang13.Bool( hclient ) && ( ignore_loaded == true || hclient.is_loaded == true ) ) {
				html = this.layout;

				if ( html != hclient.layout ) {
					hclient.layout = html;
					Interface13.Output( hclient.client, String13.MakeUrlParams( new ByTable(new object [] { html }) ), new Txt( "browser_" ).Ref( this ).str( ".browser:updateLayout" ).ToString() );

					foreach (dynamic _a in Lang13.Enumerate( this.content_elements )) {
						id = _a;
						
						this._renderContent( id, hclient, null, ignore_loaded );
					}
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public void _renderTitle( dynamic hclient = null, bool? ignore_cache = null, bool? ignore_loaded = null ) {
			ignore_cache = ignore_cache ?? GlobalVars.FALSE;
			ignore_loaded = ignore_loaded ?? GlobalVars.FALSE;

			
			if ( Lang13.Bool( hclient ) && ( ignore_loaded == true || hclient.is_loaded == true ) ) {
				
				if ( ignore_cache == true || this.title != hclient.title ) {
					hclient.title = this.title;
					this.specificRenderTitle( hclient );
					Interface13.Output( hclient.client, String13.MakeUrlParams( new ByTable(new object [] { this.title }) ), new Txt( "browser_" ).Ref( this ).str( ".browser:setTitle" ).ToString() );
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public dynamic _getClient( dynamic hclient = null ) {
			bool res = false;

			
			if ( Lang13.Bool( hclient ) ) {
				
				if ( Lang13.Bool( hclient.client ) ) {
					res = hclient.client.inactivity <= 6000 && Lang13.Bool( ( Lang13.HasCall( this.v_ref, "hiIsValidClient" ) ? Lang13.Call( Lang13.BindFunc( this.v_ref, "hiIsValidClient" ), hclient, this ) : ((dynamic)( GlobalVars.TRUE )) ) );

					if ( res ) {
						
						if ( !Lang13.Bool( hclient.active ) ) {
							this.enableFor( hclient );
						}
					} else if ( Lang13.Bool( hclient.active ) ) {
						this.disableFor( hclient );
					}
					return hclient;
				} else {
					return null;
				}
			} else {
				return null;
			}
			return null;
		}

		// Function from file: html_interface.dm
		public void closeAll(  ) {
			dynamic client = null;

			
			if ( this.clients != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.clients )) {
					client = _a;
					
					this.hide( this.clients[client] );
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public bool? isUsed(  ) {
			dynamic hclient = null;
			dynamic key = null;

			
			if ( this.clients != null && this.clients.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.clients )) {
					key = _a;
					
					hclient = this._getClient( this.clients[key] );

					if ( Lang13.Bool( hclient ) ) {
						
						if ( Lang13.Bool( hclient.active ) ) {
							return GlobalVars.TRUE;
						}
					} else {
						this.clients.Remove( key );
					}
				}
			}
			return GlobalVars.FALSE;
		}

		// Function from file: html_interface.dm
		public virtual void disableFor( dynamic hclient = null ) {
			hclient.active = GlobalVars.FALSE;
			return;
		}

		// Function from file: html_interface.dm
		public virtual dynamic enableFor( dynamic hclient = null ) {
			hclient.active = GlobalVars.TRUE;
			this.show( hclient );
			return null;
		}

		// Function from file: html_interface.dm
		public dynamic getClient( dynamic client = null, bool? create_if_not_exist = null ) {
			create_if_not_exist = create_if_not_exist ?? GlobalVars.FALSE;

			dynamic mob = null;

			
			if ( client is HtmlInterfaceClient ) {
				return this._getClient( client );
			} else if ( client is Mob ) {
				mob = client;
				client = mob.client;
			}

			if ( Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( client ) ) ) {
				
				if ( create_if_not_exist == true && ( !( this.clients != null ) || !false ) ) {
					
					if ( !( this.clients != null ) ) {
						this.clients = new ByTable();
					}
					Interface13.Stat( null, this.clients.Contains( client ) );

					if ( !( !( this.clients != null ) ) ) {
						this.clients[client] = new HtmlInterfaceClient( client );
					}
				}

				if ( this.clients != null && false ) {
					return this._getClient( this.clients[client] );
				} else {
					return null;
				}
			} else {
				return null;
			}
			return null;
		}

		// Function from file: html_interface.dm
		public void hide( dynamic hclient = null ) {
			hclient = this.getClient( hclient );

			if ( hclient is HtmlInterfaceClient ) {
				
				if ( this.clients != null ) {
					this.clients.Remove( hclient.client );

					if ( !( this.clients.len != 0 ) ) {
						this.clients = null;
					}
				}
				hclient.client.hi_last_pos = Interface13.WindowGet( hclient.client, new Txt( "browser_" ).Ref( this ).ToString(), "pos" );
				Interface13.WindowShow( hclient.client, new Txt( "browser_" ).Ref( this ).ToString(), GlobalVars.FALSE );
				Interface13.WindowSet( hclient.client, new Txt( "browser_" ).Ref( this ).ToString(), "parent=none" );

				if ( Lang13.HasCall( this.v_ref, "hiOnHide" ) ) {
					Lang13.Call( Lang13.BindFunc( this.v_ref, "hiOnHide" ), hclient );
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public void show( dynamic hclient = null, HtmlInterface oldwindow = null ) {
			hclient = this.getClient( hclient, GlobalVars.TRUE );

			if ( hclient is HtmlInterfaceClient ) {
				
				if ( oldwindow != null && Interface13.WindowExists( hclient.client, new Txt( "browser_" ).Ref( oldwindow ).ToString() ) ) {
					oldwindow.hide( hclient );
				}

				if ( Interface13.WindowExists( hclient.client, new Txt( "browser_" ).Ref( this ).ToString() ) ) {
					this._renderTitle( hclient, GlobalVars.TRUE );
					this._renderLayout( hclient );

					if ( Interface13.WindowGet( hclient.client, new Txt( "browser_" ).Ref( this ).ToString(), "is-visible" ) == "false" ) {
						Interface13.WindowShow( hclient.client, new Txt( "browser_" ).Ref( this ).ToString(), GlobalVars.TRUE );
					}
				} else {
					this.createWindow( hclient );
					hclient.is_loaded = GlobalVars.FALSE;
					Interface13.Output( hclient.client, GlobalFuncs.replacetextEx( GlobalFuncs.replacetextEx( File13.Read( this.default_html_file ), "[hsrc]", new Txt().Ref( this ).ToString() ), "</head>", "" + this.head + "</head>" ), new Txt( "browser_" ).Ref( this ).str( ".browser" ).ToString() );
					Interface13.WindowShow( hclient.client, new Txt( "browser_" ).Ref( this ).ToString(), GlobalVars.TRUE );
				}

				while (Lang13.Bool( hclient.client ) && Lang13.Bool( hclient.active ) && !( hclient.is_loaded == true )) {
					Task13.Sleep( 2 );
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public void updateContent( string id = null, dynamic content = null, bool? ignore_cache = null ) {
			ignore_cache = ignore_cache ?? GlobalVars.FALSE;

			dynamic hclient = null;
			dynamic client = null;

			this.content_elements[id] = content;

			foreach (dynamic _a in Lang13.Enumerate( this.clients )) {
				client = _a;
				
				hclient = this._getClient( this.clients[client] );

				if ( Lang13.Bool( hclient ) && Lang13.Bool( hclient.active ) ) {
					Task13.Schedule( -1, (Task13.Closure)(() => {
						this._renderContent( id, hclient, ignore_cache );
						return;
					}));
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public virtual void updateLayout( string nlayout = null ) {
			dynamic hclient = null;
			dynamic client = null;

			this.layout = nlayout;

			foreach (dynamic _a in Lang13.Enumerate( this.clients )) {
				client = _a;
				
				hclient = this._getClient( this.clients[client] );

				if ( Lang13.Bool( hclient ) && Lang13.Bool( hclient.active ) ) {
					this._renderLayout( hclient );
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public void callJavaScript( string func = null, ByTable arguments = null, dynamic hclient = null ) {
			dynamic client = null;

			
			if ( !( arguments != null ) ) {
				arguments = new ByTable();
			}

			if ( Lang13.Bool( hclient ) ) {
				hclient = this.getClient( hclient );

				if ( hclient is HtmlInterfaceClient ) {
					
					if ( hclient.is_loaded == true ) {
						Interface13.Output( hclient.client, String13.MakeUrlParams( arguments ), new Txt( "browser_" ).Ref( this ).str( ".browser:" ).item( func ).ToString() );
					}
				}
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( this.clients )) {
					client = _a;
					

					if ( Lang13.Bool( this.clients[client] ) ) {
						this.callJavaScript( func, arguments, this.clients[client] );
					}
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public void executeJavaScript( string jscript = null, dynamic hclient = null ) {
			dynamic client = null;

			
			if ( Lang13.Bool( hclient ) ) {
				hclient = this.getClient( hclient );

				if ( hclient is HtmlInterfaceClient ) {
					
					if ( hclient.is_loaded == true ) {
						Interface13.Output( hclient.client, String13.MakeUrlParams( new ByTable(new object [] { jscript }) ), new Txt( "browser_" ).Ref( this ).str( ".browser:eval" ).ToString() );
					}
				}
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( this.clients )) {
					client = _a;
					

					if ( Lang13.Bool( this.clients[client] ) ) {
						this.executeJavaScript( jscript, this.clients[client] );
					}
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public void setTitle( dynamic title = null, bool? ignore_cache = null ) {
			ignore_cache = ignore_cache ?? GlobalVars.FALSE;

			dynamic hclient = null;
			dynamic client = null;

			this.title = title;

			foreach (dynamic _a in Lang13.Enumerate( this.clients )) {
				client = _a;
				
				hclient = this._getClient( this.clients[client] );

				if ( Lang13.Bool( hclient ) && Lang13.Bool( hclient.active ) ) {
					this._renderTitle( this.clients[client], ignore_cache );
				}
			}
			return;
		}

		// Function from file: html_interface.dm
		public string getTitle(  ) {
			return this.title;
		}

		// Function from file: html_interface.dm
		public virtual bool sendAssets( Client client = null ) {
			GlobalFuncs.send_asset( client, "jquery.min.js" );
			GlobalFuncs.send_asset( client, "bootstrap.min.js" );
			GlobalFuncs.send_asset( client, "bootstrap.min.css" );
			GlobalFuncs.send_asset( client, "html_interface.css" );
			GlobalFuncs.send_asset( client, "html_interface.js" );
			GlobalFuncs.send_asset( client, "html_interface_icons.css" );
			return false;
		}

		// Function from file: html_interface.dm
		public virtual dynamic createWindow( dynamic hclient = null ) {
			ByTable _params = null;

			Interface13.WindowClone( hclient.client, "window", new Txt( "browser_" ).Ref( this ).ToString() );
			_params = new ByTable()
				.Set( "size", "" + this.width + "x" + this.height )
				.Set( "statusbar", "false" )
				.Set( "on-close", new Txt( "byond://?src=" ).Ref( this ).str( "&html_interface_action=onclose" ).ToString() )
			;

			if ( Lang13.Bool( hclient.client.hi_last_pos ) ) {
				_params["pos"] = "" + hclient.client.hi_last_pos;
			}
			Interface13.WindowSet( hclient.client, new Txt( "browser_" ).Ref( this ).ToString(), String13.MakeUrlParams( _params ) );
			Interface13.WindowSet( hclient.client, new Txt( "browser_" ).Ref( this ).str( ".browser" ).ToString(), String13.MakeUrlParams( new ByTable()
				.Set( "parent", new Txt( "browser_" ).Ref( this ).ToString() )
				.Set( "type", "browser" )
				.Set( "pos", "0,0" )
				.Set( "size", "" + this.width + "x" + this.height )
				.Set( "anchor1", "0,0" )
				.Set( "anchor2", "100,100" )
				.Set( "use-title", "true" )
				.Set( "auto-format", "false" )
			 ) );
			this.sendAssets( hclient.client );
			return null;
		}

		// Function from file: html_interface.dm
		public virtual dynamic registerResources(  ) {
			GlobalFuncs.register_asset( "jquery.min.js", "jquery.min.js" );
			GlobalFuncs.register_asset( "bootstrap.min.js", "bootstrap.min.js" );
			GlobalFuncs.register_asset( "bootstrap.min.css", "bootstrap.min.css" );
			GlobalFuncs.register_asset( "html_interface.css", "html_interface.css" );
			GlobalFuncs.register_asset( "html_interface.js", "html_interface.js" );
			GlobalFuncs.register_asset( "html_interface_icons.css", "html_interface_icons.css" );
			return null;
		}

		// Function from file: html_interface.dm
		[VerbInfo( name: "specificRenderTitle" )]
		public void _internal_specificRenderTitle( dynamic hclient = null, bool? ignore_cache = null ) {
			ignore_cache = ignore_cache ?? GlobalVars.FALSE;

			return;
		}

		// Function from file: html_interface.dm
		public override void Del(  ) {
			this.closeAll();
			GlobalVars.html_interfaces.Remove( this );
			base.Del(); return;
		}

	}

}