// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Automation_PulseAssembly : Automation {

		public dynamic assembly_num = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.name = "Assembly: Pulse";
		}

		public Automation_PulseAssembly ( Obj_Machinery_Computer_GeneralAirControl_AtmosAutomation aa = null ) : base( aa ) {
			
		}

		// Function from file: assemblies.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["set_ass_num"] ) ) {
				this.assembly_num = Interface13.Input( "Select an assembly port to send a pulse to (max: " + GlobalVars.max_linked_assembly_amount + ").", "Assembly", this.assembly_num, null, null, InputType.Num | InputType.Null );
				this.assembly_num = ( Convert.ToDouble( this.assembly_num ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( this.assembly_num ) >= GlobalVars.max_linked_assembly_amount ? ((dynamic)( GlobalVars.max_linked_assembly_amount )) : this.assembly_num ) );
				this.parent.updateUsrDialog();
				return 1;
			}
			return _default;
		}

		// Function from file: assemblies.dm
		public override string GetText(  ) {
			dynamic T = null;
			dynamic A = null;

			T = null;

			if ( Lang13.IsInRange( Convert.ToDouble( this.assembly_num ), 1, GlobalVars.max_linked_assembly_amount ) ) {
				A = this.parent.linked_assemblies[this.assembly_num];

				if ( A is Obj_Item_Device_Assembly ) {
					T = A;
				}
			}
			return new Txt( "Pulse assembly #<a href=\"?src=" ).Ref( this ).str( ";set_ass_num=1\">" ).item( this.assembly_num ).str( "</a>" ).item( ( Lang13.Bool( T ) ? "- " + T : "" ) ).str( "." ).ToString();
		}

		// Function from file: assemblies.dm
		public override bool process(  ) {
			dynamic A = null;

			A = this.parent.linked_assemblies[this.assembly_num];

			if ( Lang13.Bool( A ) ) {
				A.activate();
			}
			return false;
		}

		// Function from file: assemblies.dm
		public override void Import( ByTable json = null ) {
			base.Import( json );
			this.assembly_num = String13.ParseNumber( json["assembly_num"] );
			return;
		}

		// Function from file: assemblies.dm
		public override ByTable Export(  ) {
			ByTable json = null;

			json = base.Export();
			json["assembly_num"] = this.assembly_num;
			return json;
		}

	}

}