// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep : Game_Data {

		public double priority = 0;
		public ByTable allowed_tools = null;
		public dynamic allowed_species = null;
		public dynamic disallowed_species = null;
		public int min_duration = 0;
		public int max_duration = 0;
		public ByTable doing_surgery = new ByTable();
		public bool can_infect = false;
		public int blood_level = 0;

		// Function from file: surgery.dm
		public virtual bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			return null;
		}

		// Function from file: surgery.dm
		public virtual bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			
			if ( tool is Obj_Item_Weapon_Scalpel_Laser || tool is Obj_Item_Weapon_Retractor_Manager ) {
				tool.icon_state = "" + Lang13.Initial( tool, "icon_state" ) + "_off";
			}
			return false;
		}

		// Function from file: surgery.dm
		public virtual bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			dynamic affected = null;
			dynamic H = null;

			affected = ((Mob_Living_Carbon_Human)target).get_organ( target_zone );

			if ( !Lang13.Bool( affected ) ) {
				return false;
			}

			if ( this.can_infect && Lang13.Bool( affected ) ) {
				GlobalFuncs.spread_germs_to_organ( affected, user );
			}

			if ( user is Mob_Living_Carbon_Human && Rand13.PercentChance( 60 ) ) {
				H = user;

				if ( this.blood_level != 0 ) {
					((Mob_Living_Carbon_Human)H).f_bloody_hands( target, 0 );
				}

				if ( this.blood_level > 1 ) {
					((Mob_Living_Carbon_Human)H).bloody_body( target, false );
				}
			}

			if ( tool is Obj_Item_Weapon_Scalpel_Laser || tool is Obj_Item_Weapon_Retractor_Manager ) {
				tool.icon_state = "" + Lang13.Initial( tool, "icon_state" ) + "_on";
				Task13.Schedule( ((int)( this.max_duration * tool.surgery_speed )), (Task13.Closure)(() => {
					tool.icon_state = "" + Lang13.Initial( tool, "icon_state" ) + "_off";
					return;
				}));
			}
			return false;
		}

		// Function from file: surgery.dm
		public bool can_operate( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			return true;
		}

		// Function from file: surgery.dm
		public virtual int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			return 0;
		}

		// Function from file: surgery.dm
		public virtual bool is_valid_mutantrace( dynamic target = null ) {
			dynamic species = null;
			dynamic species2 = null;

			
			if ( !GlobalFuncs.hasorgans( target ) ) {
				return false;
			}

			if ( Lang13.Bool( this.allowed_species ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.allowed_species )) {
					species = _a;
					

					if ( target.dna.mutantrace == species ) {
						return true;
					}
				}
			}

			if ( Lang13.Bool( this.disallowed_species ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.disallowed_species )) {
					species2 = _b;
					

					if ( target.dna.mutantrace == species2 ) {
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: surgery.dm
		public bool check_anesthesia( dynamic target = null ) {
			
			if ( Convert.ToDouble( target.sleeping ) > 0 || Lang13.Bool( target.stat ) ) {
				return true;
			}

			if ( Rand13.PercentChance( 25 ) ) {
				return true;
			}
			return false;
		}

		// Function from file: surgery.dm
		public virtual bool tool_quality( Obj_Item tool = null ) {
			dynamic T = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.allowed_tools )) {
				T = _a;
				

				if ( Lang13.Bool( T.IsInstanceOfType( tool ) ) ) {
					return Lang13.Bool( this.allowed_tools[T] );
				}
			}
			return false;
		}

	}

}