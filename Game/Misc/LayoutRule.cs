// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class LayoutRule : Game_Data {

		public dynamic root = null;
		public SurpriseRoom room = null;
		public dynamic placetype = null;
		public int min_to_place = 0;
		public int max_to_place = 0;
		public int placed_times = 0;
		public ByTable decorations = new ByTable();
		public bool flags = false;

		// Function from file: surprise.dm
		public LayoutRule ( dynamic _root = null, dynamic _room = null ) {
			this.root = _root;
			this.room = _room;
			return;
		}

		// Function from file: surprise.dm
		public virtual ByTable GetCandidates(  ) {
			return new ByTable();
		}

		// Function from file: surprise.dm
		public bool Evaluate(  ) {
			ByTable candidates = null;
			int? n = null;
			int? i = null;
			Tile T = null;

			candidates = this.GetCandidates();

			if ( candidates.len == 0 ) {
				return false;
			}

			if ( this.max_to_place <= 0 ) {
				this.max_to_place = candidates.len;
			}
			n = candidates.len;

			if ( this.min_to_place > 0 ) {
				n = Num13.MinInt( candidates.len, Rand13.Int( this.min_to_place, this.max_to_place ) );
			}

			if ( n == 0 ) {
				return false;
			}
			i = null;
			i = 0;

			while (( i ??0) < ( n ??0)) {
				T = candidates[1];
				candidates.Remove( T );
				this.Plop( T );
				i++;
			}
			return false;
		}

		// Function from file: surprise.dm
		public void Plop( Tile T = null ) {
			dynamic decoration = null;

			Lang13.Call( this.placetype, T );
			this.placed_times++;
			this.room.AddTypeToTurf( T, this.placetype );

			if ( this.decorations.len != 0 ) {
				decoration = GlobalFuncs.pickweight( this.decorations );
				Lang13.Call( decoration, T );
				this.room.AddTypeToTurf( T, decoration );
			}
			return;
		}

	}

}