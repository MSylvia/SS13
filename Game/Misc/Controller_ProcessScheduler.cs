// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_ProcessScheduler : Controller {

		public ByTable processes = new ByTable();
		public ByTable running = new ByTable();
		public ByTable idle = new ByTable();
		public ByTable queued = new ByTable();
		public ByTable nameToProcessMap = new ByTable();
		public ByTable last_start = new ByTable();
		public ByTable last_run_time = new ByTable();
		public ByTable last_twenty_run_times = new ByTable();
		public ByTable highest_run_time = new ByTable();
		public double scheduler_sleep_interval = 1;
		public bool isRunning = false;
		public ByTable deferredSetupList = new ByTable();
		public int currentTick = 0;
		public double? currentTickStart = 0;
		public double timeAllowance = 0;
		public double cpuAverage = 0;
		public double timeAllowanceMax = 0;

		// Function from file: processScheduler.dm
		public Controller_ProcessScheduler (  ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.scheduler_sleep_interval = Game13.tick_lag;
			this.timeAllowance = Game13.tick_lag * 0.5;
			this.timeAllowanceMax = Game13.tick_lag;
			return;
		}

		// Function from file: processScheduler.dm
		public double sign( double x = 0 ) {
			
			if ( x == 0 ) {
				return 1;
			}
			return x / Math.Abs( x );
		}

		// Function from file: processScheduler.dm
		public void updateTimeAllowance(  ) {
			double error = 0;
			double timeAllowanceDelta = 0;

			error = this.cpuAverage - 100;
			timeAllowanceDelta = this.sign( error ) * Game13.tick_lag * Num13.MaxInt( 0, ((int)( Math.Abs( error ) * 0.01 )) ) * -0.5;
			this.timeAllowance = Num13.MinInt( ((int)( this.timeAllowanceMax )), Num13.MaxInt( 0, ((int)( this.timeAllowance + timeAllowanceDelta )) ) );
			return;
		}

		// Function from file: processScheduler.dm
		public void updateCurrentTickData(  ) {
			
			if ( Game13.time > this.currentTick ) {
				this.currentTick = Game13.time;
				this.currentTickStart = GlobalFuncs.__btime__timeofhour();
				this.updateTimeAllowance();
				this.cpuAverage = ( Game13.cpu + this.cpuAverage + this.cpuAverage ) / 3;
			}
			return;
		}

		// Function from file: processScheduler.dm
		public double getCurrentTickElapsedTime(  ) {
			
			if ( Game13.time > this.currentTick ) {
				this.updateCurrentTickData();
				return 0;
			} else {
				return ( GlobalFuncs.__btime__timeofhour() ??0) - ( this.currentTickStart ??0);
			}
		}

		// Function from file: processScheduler.dm
		public bool getIsRunning(  ) {
			return this.isRunning;
		}

		// Function from file: processScheduler.dm
		public dynamic getProcessLastRunTime( Controller_Process process = null ) {
			return this.last_run_time[process];
		}

		// Function from file: processScheduler.dm
		public dynamic getProcess( string name = null ) {
			return this.nameToProcessMap[name];
		}

		// Function from file: processScheduler.dm
		public void disableProcess( string processName = null ) {
			Controller_Process process = null;

			
			if ( this.hasProcess( processName ) ) {
				process = this.nameToProcessMap[processName];
				process.disable();
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void enableProcess( string processName = null ) {
			Controller_Process process = null;

			
			if ( this.hasProcess( processName ) ) {
				process = this.nameToProcessMap[processName];
				process.enable();
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void restartProcess( string processName = null ) {
			Base_Data oldInstance = null;
			dynamic newInstance = null;

			
			if ( this.hasProcess( processName ) ) {
				oldInstance = this.nameToProcessMap[processName];
				newInstance = Lang13.Call( oldInstance.type, this );
				((Controller_Process)newInstance)._copyStateFrom( oldInstance );
				this.replaceProcess( oldInstance, newInstance );
				((dynamic)oldInstance).kill();
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void killProcess( string processName = null ) {
			this.restartProcess( processName );
			return;
		}

		// Function from file: processScheduler.dm
		public bool hasProcess( string processName = null ) {
			
			if ( Lang13.Bool( this.nameToProcessMap[processName] ) ) {
				return true;
			}
			return false;
		}

		// Function from file: processScheduler.dm
		public int getProcessCount(  ) {
			return this.processes.len;
		}

		// Function from file: processScheduler.dm
		public ByTable getStatusData(  ) {
			ByTable data = null;
			Controller_Process p = null;

			data = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.processes, typeof(Controller_Process) )) {
				p = _a;
				
				data.len++;
				data[data.len] = p.getContextData();
			}
			return data;
		}

		// Function from file: processScheduler.dm
		public double averageRunTime( Controller_Process process = null ) {
			dynamic lastTwenty = null;
			double t = 0;
			int c = 0;
			dynamic time = null;

			lastTwenty = this.last_twenty_run_times[process];
			t = 0;
			c = 0;

			foreach (dynamic _a in Lang13.Enumerate( lastTwenty )) {
				time = _a;
				
				t += Convert.ToDouble( time );
				c++;
			}

			if ( c > 0 ) {
				return t / c;
			}
			return c;
		}

		// Function from file: processScheduler.dm
		public void recordRunTime( dynamic process = null, double time = 0 ) {
			ByTable lastTwenty = null;

			this.last_run_time[process] = time;

			if ( time > Convert.ToDouble( this.highest_run_time[process] ) ) {
				this.highest_run_time[process] = time;
			}
			lastTwenty = this.last_twenty_run_times[process];

			if ( lastTwenty.len == 20 ) {
				lastTwenty.Cut( 1, 2 );
			}
			lastTwenty.len++;
			lastTwenty[lastTwenty.len] = time;
			return;
		}

		// Function from file: processScheduler.dm
		public void recordEnd( dynamic process = null, double? time = null ) {
			time = time ?? GlobalFuncs.__btime__timeofhour();

			double lastRunTime = 0;

			
			if ( ( time ??0) < Convert.ToDouble( this.last_start[process] ) ) {
				this.last_start[process] -= 36000;
			}
			lastRunTime = ( time ??0) - Convert.ToDouble( this.last_start[process] );

			if ( lastRunTime < 0 ) {
				lastRunTime = 0;
			}
			this.recordRunTime( process, lastRunTime );
			return;
		}

		// Function from file: processScheduler.dm
		public void recordStart( dynamic process = null, double? time = null ) {
			time = time ?? GlobalFuncs.__btime__timeofhour();

			this.last_start[process] = time;
			return;
		}

		// Function from file: processScheduler.dm
		public void setRunningProcessState( Controller_Process process = null ) {
			Interface13.Stat( null, this.queued.Contains( process ) );

			if ( false ) {
				this.queued.Remove( process );
			}
			Interface13.Stat( null, this.idle.Contains( process ) );

			if ( false ) {
				this.idle.Remove( process );
			}
			Interface13.Stat( null, this.running.Contains( process ) );

			if ( !false ) {
				this.running.Add( process );
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void setQueuedProcessState( Controller_Process process = null ) {
			Interface13.Stat( null, this.running.Contains( process ) );

			if ( false ) {
				this.running.Remove( process );
			}
			Interface13.Stat( null, this.idle.Contains( process ) );

			if ( false ) {
				this.idle.Remove( process );
			}
			Interface13.Stat( null, this.queued.Contains( process ) );

			if ( !false ) {
				this.queued.Add( process );
			}
			process.f_queued();
			return;
		}

		// Function from file: processScheduler.dm
		public void setIdleProcessState( Controller_Process process = null ) {
			Interface13.Stat( null, this.running.Contains( process ) );

			if ( false ) {
				this.running.Remove( process );
			}
			Interface13.Stat( null, this.queued.Contains( process ) );

			if ( false ) {
				this.queued.Remove( process );
			}
			Interface13.Stat( null, this.idle.Contains( process ) );

			if ( !false ) {
				this.idle.Add( process );
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void processFinished( Controller_Process process = null ) {
			this.setIdleProcessState( process );
			this.recordEnd( process );
			return;
		}

		// Function from file: processScheduler.dm
		public void processStarted( Controller_Process process = null ) {
			this.setRunningProcessState( process );
			this.recordStart( process );
			return;
		}

		// Function from file: processScheduler.dm
		public void runProcess( Controller_Process process = null ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				process.process();
				return;
			}));
			return;
		}

		// Function from file: processScheduler.dm
		public void replaceProcess( Base_Data oldProcess = null, dynamic newProcess = null ) {
			this.processes.Remove( oldProcess );
			this.processes.Add( newProcess );
			newProcess.idle();
			this.idle.Remove( oldProcess );
			this.running.Remove( oldProcess );
			this.queued.Remove( oldProcess );
			this.idle.Add( newProcess );
			this.last_start.Remove( oldProcess );
			this.last_start.Add( newProcess );
			this.last_start[newProcess] = 0;
			this.last_run_time.Add( newProcess );
			this.last_run_time[newProcess] = this.last_run_time[oldProcess];
			this.last_run_time.Remove( oldProcess );
			this.last_twenty_run_times.Add( newProcess );
			this.last_twenty_run_times[newProcess] = this.last_twenty_run_times[oldProcess];
			this.last_twenty_run_times.Remove( oldProcess );
			this.highest_run_time.Add( newProcess );
			this.highest_run_time[newProcess] = this.highest_run_time[oldProcess];
			this.highest_run_time.Remove( oldProcess );
			this.recordStart( newProcess, 0 );
			this.recordEnd( newProcess, 0 );
			this.nameToProcessMap[newProcess.name] = newProcess;
			return;
		}

		// Function from file: processScheduler.dm
		public void addProcess( dynamic process = null ) {
			this.processes.Add( process );
			process.idle();
			this.idle.Add( process );
			this.last_start.Add( process );
			this.last_start[process] = 0;
			this.last_run_time.Add( process );
			this.last_run_time[process] = 0;
			this.last_twenty_run_times.Add( process );
			this.last_twenty_run_times[process] = new ByTable();
			this.highest_run_time.Add( process );
			this.highest_run_time[process] = 0;
			this.recordStart( process, 0 );
			this.recordEnd( process, 0 );
			process.setup();
			this.nameToProcessMap[process.name] = process;
			return;
		}

		// Function from file: processScheduler.dm
		public void runQueuedProcesses(  ) {
			Controller_Process p = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.queued, typeof(Controller_Process) )) {
				p = _a;
				
				this.runProcess( p );
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void queueProcesses(  ) {
			Controller_Process p = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.processes, typeof(Controller_Process) )) {
				p = _a;
				

				if ( p.disabled || p.running || p.queued || !p.idle ) {
					continue;
				}

				if ( ( GlobalFuncs.__btime__timeofhour() ??0) < Convert.ToDouble( this.last_start[p] ) ) {
					this.last_start[p] -= 36000;
				}

				if ( ( GlobalFuncs.__btime__timeofhour() ??0) > Convert.ToDouble( this.last_start[p] + p.schedule_interval ) ) {
					this.setQueuedProcessState( p );
				}
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void checkRunningProcesses(  ) {
			Controller_Process p = null;
			dynamic status = null;
			dynamic previousStatus = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.running, typeof(Controller_Process) )) {
				p = _b;
				
				p.update();

				if ( p == null ) {
					continue;
				}
				status = p.getStatus();
				previousStatus = p.getPreviousStatus();

				if ( status != previousStatus ) {
					
					dynamic _a = status; // Was a switch-case, sorry for the mess.
					if ( _a==5 ) {
						GlobalFuncs.message_admins( "Process '" + p.name + "' may be hung." );
					} else if ( _a==6 ) {
						GlobalFuncs.message_admins( "Process '" + p.name + "' is hung and will be restarted." );
					}
				}
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void stop(  ) {
			this.isRunning = false;
			return;
		}

		// Function from file: processScheduler.dm
		public void process(  ) {
			double? i = null;

			this.updateCurrentTickData();
			i = null;
			i = Game13.tick_lag;

			while (( i ??0) < Game13.tick_lag * 50) {
				Task13.Schedule( ((int)( i ??0 )), (Task13.Closure)(() => {
					this.updateCurrentTickData();
					return;
				}));
				i += Game13.tick_lag;
			}

			while (this.isRunning) {
				Task13.Schedule( ((int)( Game13.tick_lag * 50 )), (Task13.Closure)(() => {
					this.updateCurrentTickData();
					return;
				}));
				this.checkRunningProcesses();
				this.queueProcesses();
				this.runQueuedProcesses();
				Task13.Sleep( ((int)( this.scheduler_sleep_interval )) );
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void start(  ) {
			this.isRunning = true;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.process();
				return;
			}));
			return;
		}

		// Function from file: processScheduler.dm
		public void setup(  ) {
			dynamic process = null;

			
			if ( GlobalVars.processScheduler != null && GlobalVars.processScheduler != this ) {
				Lang13.Delete( GlobalVars.processScheduler );
				GlobalVars.processScheduler = null;
				GlobalVars.processScheduler = this;
			} else if ( !( GlobalVars.processScheduler != null ) ) {
				GlobalVars.processScheduler = this;
			}

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Controller_Process) ) - typeof(Controller_Process) )) {
				process = _a;
				
				Interface13.Stat( null, this.deferredSetupList.Contains( process ) );

				if ( !false ) {
					this.addProcess( Lang13.Call( process, this ) );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.deferredSetupList )) {
				process = _b;
				
				this.addProcess( Lang13.Call( process, this ) );
			}
			return;
		}

		// Function from file: processScheduler.dm
		public void deferSetupFor( Type processPath = null ) {
			Interface13.Stat( null, this.deferredSetupList.Contains( processPath ) );

			if ( !false ) {
				this.deferredSetupList.Add( processPath );
			}
			return;
		}

	}

}