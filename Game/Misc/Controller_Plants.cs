// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Controller_Plants : Controller {

		public int plants_per_tick = 500;
		public int plant_tick_time = 50;
		public ByTable plant_queue = new ByTable();
		public ByTable seeds = new ByTable();
		public ByTable gene_tag_masks = new ByTable();

		// Function from file: seed_controller.dm
		public Controller_Plants (  ) {
			
			if ( GlobalVars.plant_controller != null && GlobalVars.plant_controller != this ) {
				GlobalFuncs.log_debug( "Rebuilding plant controller." );
				GlobalFuncs.qdel( GlobalVars.plant_controller );
			}
			GlobalVars.plant_controller = this;
			this.setup();
			this.process();
			return;
		}

		// Function from file: seed_controller.dm
		public void remove_plant( Obj_Effect_Plantsegment plant = null ) {
			this.plant_queue.Remove( plant );
			return;
		}

		// Function from file: seed_controller.dm
		public void add_plant( dynamic plant = null ) {
			this.plant_queue.Or( plant );
			return;
		}

		// Function from file: seed_controller.dm
		public void process(  ) {
			int processed = 0;
			int? target_to_process = null;
			int? x = null;
			dynamic plant = null;

			this.processing = true;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				processed = 0;

				while (true) {
					
					if ( !this.processing ) {
						Task13.Sleep( this.plant_tick_time );
					} else {
						processed = 0;

						if ( this.plant_queue.len != 0 ) {
							target_to_process = Num13.MinInt( this.plant_queue.len, this.plants_per_tick );
							x = null;
							x = 0;

							while (( x ??0) < ( target_to_process ??0)) {
								
								if ( !( this.plant_queue.len != 0 ) ) {
									break;
								}
								plant = Rand13.PickFromTable( this.plant_queue );
								this.plant_queue.Remove( plant );

								if ( !( plant is Obj_Effect_Plantsegment ) ) {
									
								} else {
									((Obj)plant).process();
									processed++;
									Task13.Sleep( 1 );
								}
								x++;
							}
						}
						Task13.Sleep( Num13.MaxInt( 1, this.plant_tick_time - processed ) );
					}
				}
				return;
			}));
			return;
		}

		// Function from file: seed_controller.dm
		public Seed create_random_seed( bool? survive_on_station = null ) {
			Seed seed = null;

			seed = new Seed();
			seed.randomize();
			seed.uid = GlobalVars.plant_controller.seeds.len + 1;
			seed.name = "" + seed.uid;
			this.seeds[seed.name] = seed;

			if ( survive_on_station == true ) {
				
				if ( seed.consume_gasses != null ) {
					seed.consume_gasses["plasma"] = null;
					seed.consume_gasses["carbon_dioxide"] = null;
				}

				if ( seed.chems != null && !( seed.chems["pacid"] == null ) ) {
					seed.chems["pacid"] = null;
					seed.chems.Remove( null );
				}
				seed.ideal_heat = Lang13.Initial( seed, "ideal_heat" );
				seed.heat_tolerance = Lang13.Initial( seed, "heat_tolerance" );
				seed.ideal_light = Lang13.Initial( seed, "ideal_light" );
				seed.light_tolerance = Lang13.Initial( seed, "light_tolerance" );
				seed.lowkpa_tolerance = Lang13.Initial( seed, "lowkpa_tolerance" );
				seed.highkpa_tolerance = Lang13.Initial( seed, "highkpa_tolerance" );
			}
			return seed;
		}

		// Function from file: seed_controller.dm
		public void setup(  ) {
			dynamic type = null;
			dynamic S = null;
			Obj_Item_Seeds S2 = null;
			ByTable gene_tags = null;
			ByTable used_masks = null;
			dynamic gene_tag = null;
			string gene_mask = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Seed) ) - typeof(Seed) )) {
				type = _a;
				
				S = Lang13.Call( type );
				this.seeds[S.name] = S;
				S.uid = "" + this.seeds.len;
				S.roundstart = true;
			}

			foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Seeds) )) {
				S2 = _b;
				
				S2.update_seed();
			}
			gene_tags = new ByTable(new object [] { "phytochemistry", "morphology", "bioluminescence", "ecology", "ecophysiology", "metabolism", "nutrition", "development" });
			used_masks = new ByTable();

			while (gene_tags != null && gene_tags.len != 0) {
				gene_tag = Rand13.PickFromTable( gene_tags );
				gene_mask = "" + GlobalFuncs.num2hex( Rand13.Int( 0, 255 ) );
				Interface13.Stat( null, used_masks.Contains( gene_mask ) );

				if ( false ) {
					gene_mask = "" + GlobalFuncs.num2hex( Rand13.Int( 0, 255 ) );
					// goto 78;
				}
				used_masks.Add( gene_mask );
				gene_tags.Remove( gene_tag );
				this.gene_tag_masks[gene_tag] = gene_mask;
			}
			return;
		}

	}

}