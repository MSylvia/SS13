// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Research : Game_Data {

		public ByTable known_tech = new ByTable();
		public ByTable known_designs = new ByTable();

		// Function from file: research.dm
		public Research (  ) {
			dynamic T = null;
			dynamic D = null;

			
			if ( !( GlobalVars.tech_list.len != 0 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Tech) ) - GlobalVars.hidden_tech )) {
					T = _a;
					
					GlobalVars.tech_list.Add( Lang13.Call( T ) );
				}
			}

			if ( !( GlobalVars.design_list.len != 0 ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( Lang13.GetTypes( typeof(Design) ) - typeof(Design) )) {
					D = _b;
					
					GlobalVars.design_list.Add( Lang13.Call( D ) );
				}
			}
			this.RefreshResearch();
			return;
		}

		// Function from file: research.dm
		public void UpdateDesign( Type path = null ) {
			Design KD = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.known_designs, typeof(Design) )) {
				KD = _a;
				

				if ( KD.build_path == path ) {
					KD.reliability_mod += Rand13.Int( 1, 2 );
					break;
				}
			}
			return;
		}

		// Function from file: research.dm
		public void UpdateTech( dynamic ID = null, int level = 0 ) {
			Tech KT = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
				KT = _a;
				

				if ( KT.id == ID ) {
					
					if ( KT.level <= level ) {
						KT.level = Num13.MaxInt( KT.level + 1, level - 1 );
					}
				}
			}
			return;
		}

		// Function from file: research.dm
		public void RefreshResearch(  ) {
			Tech PT = null;
			Design PD = null;
			dynamic T = null;
			Design D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.tech_list, typeof(Tech) )) {
				PT = _a;
				

				if ( this.TechHasReqs( PT ) ) {
					this.AddTech2Known( PT );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.design_list, typeof(Design) )) {
				PD = _b;
				

				if ( this.DesignHasReqs( PD ) ) {
					this.AddDesign2Known( PD );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
				T = _c;
				
				T = ( Convert.ToDouble( T.level ) <= 1 ? 1 : ( Convert.ToDouble( T.level ) >= 20 ? 20 : Convert.ToInt32( T.level ) ) );
			}

			foreach (dynamic _d in Lang13.Enumerate( this.known_designs, typeof(Design) )) {
				D = _d;
				
				D.CalcReliability( this.known_tech );
			}
			return;
		}

		// Function from file: research.dm
		public void AddDesign2Known( Design D = null ) {
			Design known = null;

			Interface13.Stat( null, this.known_designs.Contains( D ) );

			if ( !false ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.known_designs, typeof(Design) )) {
					known = _a;
					

					if ( D.id == known.id ) {
						
						if ( D.reliability_mod > known.reliability_mod ) {
							known.reliability_mod = D.reliability_mod;
						}
						return;
					}
				}
				this.known_designs.Add( D );
			}
			return;
		}

		// Function from file: research.dm
		public int AddTech2Known( Tech T = null ) {
			Tech known = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
				known = _a;
				

				if ( T.id == known.id ) {
					
					if ( T.level > known.level ) {
						known.level = T.level;
					}
					return 1;
				}
			}
			this.known_tech.Add( T );
			return 2;
		}

		// Function from file: research.dm
		public bool DesignHasReqs( Design D = null ) {
			int matches = 0;
			ByTable k_tech = null;
			Tech known = null;
			dynamic req = null;

			
			if ( D.req_tech.len == 0 ) {
				return true;
			}
			matches = 0;
			k_tech = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
				known = _a;
				
				k_tech[known.id] = known.level;
			}

			foreach (dynamic _b in Lang13.Enumerate( D.req_tech )) {
				req = _b;
				

				if ( !( k_tech[req] == null ) && Convert.ToDouble( k_tech[req] ) >= Convert.ToDouble( D.req_tech[req] ) ) {
					matches++;
				}
			}

			if ( matches == D.req_tech.len ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: research.dm
		public bool TechHasReqs( Tech T = null ) {
			int matches = 0;
			dynamic req = null;
			Tech known = null;

			
			if ( T.req_tech.len == 0 ) {
				return true;
			}
			matches = 0;

			foreach (dynamic _b in Lang13.Enumerate( T.req_tech )) {
				req = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.known_tech, typeof(Tech) )) {
					known = _a;
					

					if ( req == known.id && known.level >= Convert.ToDouble( T.req_tech[req] ) ) {
						matches++;
						break;
					}
				}
			}

			if ( matches == T.req_tech.len ) {
				return true;
			} else {
				return false;
			}
		}

	}

}