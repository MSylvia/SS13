// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class SurgeryStep_Butt_CauterizeButt : SurgeryStep_Butt {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.allowed_tools = new ByTable()
				.Set( typeof(Obj_Item_Weapon_Cautery), 100 )
				.Set( typeof(Obj_Item_Weapon_Scalpel_Laser), 100 )
				.Set( typeof(Obj_Item_Clothing_Mask_Cigarette), 75 )
				.Set( typeof(Obj_Item_Weapon_Lighter), 50 )
				.Set( typeof(Obj_Item_Weapon_Weldingtool), 25 )
			;
			this.min_duration = 50;
			this.max_duration = 70;
		}

		// Function from file: butt.dm
		public override bool? fail_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			((Ent_Static)user).visible_message( "<span class='warning'>" + target + " lets out a small fart, which gets set alight with " + user + "'s " + tool + "!</span>", "<span class='warning'>" + target + " farts into the open flame, burning his anus!</span>" );
			((Mob_Living)target).apply_damage( Num13.MaxInt( 10, Convert.ToInt32( tool.force ) ), "fire", "groin" );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/holler.ogg", 50, 1 );
			return null;
		}

		// Function from file: butt.dm
		public override bool end_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			Obj_Item_Clothing_Head_Butt B = null;

			((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " finishes cauterizing " ).item( target ).str( "'s ass with " ).the( tool ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You have cauterized " ).item( target ).str( "'s ass with " ).the( tool ).item().str( ".</span>" ).ToString() );
			B = new Obj_Item_Clothing_Head_Butt( target.loc );
			B.transfer_buttdentity( target );
			target.op_stage.butt = 4;
			return false;
		}

		// Function from file: butt.dm
		public override bool begin_step( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null, dynamic surgery = null ) {
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " begins to cauterize " ).item( target ).str( "'s ass with " ).the( tool ).item().str( "." ).ToString(), new Txt( "You begin to cauterize " ).item( target ).str( "'s ass with " ).the( tool ).item().str( "." ).ToString() );
			((Mob_Living_Carbon_Human)target).custom_pain( "IT BUURNS!", true );
			base.begin_step( (object)(user), (object)(target), target_zone, tool, (object)(surgery) );
			return false;
		}

		// Function from file: butt.dm
		public override int can_use( dynamic user = null, dynamic target = null, string target_zone = null, Obj_Item tool = null ) {
			return base.can_use( (object)(user), (object)(target), target_zone, tool ) != 0 && target_zone == "groin" && target.op_stage.butt == 3 ?1:0;
		}

		// Function from file: butt.dm
		public override bool tool_quality( Obj_Item tool = null ) {
			dynamic T = null;

			
			if ( Lang13.Bool( tool.is_hot() ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.allowed_tools )) {
					T = _a;
					

					if ( Lang13.Bool( T.IsInstanceOfType( tool ) ) ) {
						return Lang13.Bool( this.allowed_tools[T] );
					}
				}
			}
			return false;
		}

	}

}