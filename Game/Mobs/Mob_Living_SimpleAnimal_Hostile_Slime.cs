// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Slime : Mob_Living_SimpleAnimal_Hostile {

		public string colour = "grey";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.speak_emote = new ByTable(new object [] { "angrily chirps" });
			this.icon_living = "grey baby slime eat";
			this.icon_dead = "grey baby slime dead";
			this.health = 150;
			this.maxHealth = 150;
			this.melee_damage_lower = 10;
			this.melee_damage_upper = 15;
			this.melee_damage_type = "clone";
			this.response_help = "pets";
			this.response_disarm = "shoos";
			this.response_harm = "stomps on";
			this.attacktext = "glomps";
			this.attack_sound = "sound/weapons/welderattack.ogg";
			this.faction = "slimesummon";
			this.speed = 4;
			this.can_butcher = false;
			this.icon = "icons/mob/slimes.dmi";
			this.icon_state = "grey baby slime eat";
		}

		// Function from file: slime.dm
		public Mob_Living_SimpleAnimal_Hostile_Slime ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.overlays = 0;
			this.overlays.Add( "bloodlust" );
			return;
		}

		// Function from file: slime.dm
		public virtual void calm(  ) {
			Type calmed_type = null;
			string path_end = null;
			dynamic calmed = null;
			dynamic M = null;

			calmed_type = typeof(Mob_Living_Carbon_Slime);

			if ( this.colour != "grey" ) {
				path_end = GlobalFuncs.replacetext( this.colour, " ", "" );
				calmed_type = Lang13.FindClass( "/mob/living/carbon/slime/" + path_end );
			}
			calmed = Lang13.Call( calmed_type, this.loc );

			foreach (dynamic _a in Lang13.Enumerate( this.friends )) {
				M = _a;
				
				calmed.Friends.Add( M );
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: slime.dm
		public override dynamic AttackingTarget(  ) {
			this.forceMove( GlobalFuncs.get_turf( this.target ) );
			base.AttackingTarget();
			return null;
		}

		// Function from file: slime.dm
		public override void MoveToTarget(  ) {
			base.MoveToTarget();

			if ( Lang13.Bool( this.target ) && ((Ent_Static)this.target).Adjacent( this ) ) {
				this.forceMove( GlobalFuncs.get_turf( this.target ) );
			}
			return;
		}

		// Function from file: slime.dm
		public override bool Life(  ) {
			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();

			if ( Convert.ToDouble( this.bodytemperature ) < 273.41 ) {
				this.calm();
			}
			return false;
		}

	}

}