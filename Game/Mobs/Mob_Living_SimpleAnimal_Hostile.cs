// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile : Mob_Living_SimpleAnimal {

		public int stance = 1;
		public dynamic target = null;
		public int attack_same = 0;
		public bool ranged = false;
		public bool rapid = false;
		public Type projectiletype = null;
		public string projectilesound = null;
		public Type casingtype = null;
		public int move_to_delay = 2;
		public ByTable friends = new ByTable();
		public int? vision_range = 9;
		public int aggro_vision_range = 9;
		public int idle_vision_range = 9;
		public string ranged_message = "fires";
		public int ranged_cooldown = 0;
		public int ranged_cooldown_cap = 3;
		public int? retreat_distance = null;
		public int? minimum_distance = 1;
		public int search_objects = 0;
		public ByTable wanted_objects = new ByTable();
		public int stat_attack = 0;
		public bool stat_exclusive = false;
		public dynamic attack_faction = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.faction = "hostile";
			this.stop_automated_movement_when_pulled = false;
			this.environment_smash = 1;
		}

		public Mob_Living_SimpleAnimal_Hostile ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: hostile.dm
		public override void Die( bool? gore = null ) {
			this.LoseAggro();
			base.Die( gore );
			Map13.Walk( this, 0, 0 );
			return;
		}

		// Function from file: hostile.dm
		public override bool adjustBruteLoss( dynamic amount = null, string damage_type = null ) {
			dynamic new_target = null;
			dynamic new_target2 = null;

			base.adjustBruteLoss( (object)(amount), damage_type );

			if ( !Lang13.Bool( this.stat ) && this.search_objects < 3 ) {
				
				if ( this.search_objects != 0 ) {
					this.search_objects = 0;
					this.target = null;
				}

				if ( this.stance == 1 ) {
					this.Aggro();
					new_target = this.FindTarget();
					this.GiveTarget( new_target );
				}

				if ( this.stance == 3 ) {
					
					if ( this.target != null && Rand13.PercentChance( 25 ) ) {
						new_target2 = this.FindTarget();
						this.GiveTarget( new_target2 );
					}
				}
			}
			return false;
		}

		// Function from file: hostile.dm
		public override bool CanAttack( dynamic target = null ) {
			dynamic L = null;
			dynamic H = null;
			dynamic M = null;

			
			if ( this.see_invisible < Convert.ToDouble( target.invisibility ) ) {
				return false;
			}

			if ( target is Mob_Living && this.search_objects < 2 ) {
				L = target;

				if ( Convert.ToDouble( L.stat ) > this.stat_attack || Convert.ToInt32( L.stat ) != this.stat_attack && this.stat_exclusive ) {
					return false;
				}

				if ( Lang13.Bool( L.flags & 128 ) ) {
					return false;
				}

				if ( L is Mob_Living_Silicon_Robot_Mommi ) {
					return false;
				}

				if ( L.faction == this.faction && !( this.attack_same != 0 ) || L.faction != this.faction && this.attack_same == 2 || L.faction != this.attack_faction && Lang13.Bool( this.attack_faction ) ) {
					return false;
				}

				if ( this.faction == new Txt().Ref( L ).ToString() && !( this.attack_same != 0 ) ) {
					return false;
				}

				if ( this.faction == "slimesummon" ) {
					
					if ( L is Mob_Living_Carbon_Slime ) {
						return false;
					}

					if ( L is Mob_Living_Carbon_Human ) {
						H = L;

						if ( Lang13.Bool( H.dna ) ) {
							
							if ( H.dna.mutantrace == "slime" || H.dna.mutantrace == "adamantine" || H.dna.mutantrace == "coalgolem" ) {
								return false;
							}
						}
					}
				}

				if ( ( L is Mob_Living_SimpleAnimal_Corgi_Ian || L is Mob_Living_Carbon_Human_Dummy ) && this.faction == "adminbus mob" ) {
					return false;
				}
				Interface13.Stat( null, this.friends.Contains( L ) );

				if ( ( L is Mob_Living_SimpleAnimal_Corgi_Ian || L is Mob_Living_Carbon_Human_Dummy ) && this.faction == "adminbus mob" ) {
					return false;
				}
				return true;
			}

			if ( target is Obj ) {
				
				if ( GlobalFuncs.is_type_in_list( target, this.wanted_objects ) ) {
					return true;
				}

				if ( target is Obj_Mecha && this.search_objects < 2 ) {
					M = target;

					if ( Lang13.Bool( M.occupant ) ) {
						
						if ( this.CanAttack( M.occupant ) ) {
							return true;
						}
					}
				}
			}
			return false;
		}

		// Function from file: hostile.dm
		public bool FindHidden( dynamic hidden_target = null ) {
			
			if ( this.target.loc is Obj_Structure_Closet || this.target.loc is Obj_Machinery_Disposal || this.target.loc is Obj_Machinery_Sleeper ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: hostile.dm
		public void EscapeConfinement(  ) {
			Ent_Static A = null;

			
			if ( Lang13.Bool( this.locked_to ) ) {
				((Ent_Static)this.locked_to).attack_animal( this );
			}

			if ( !( this.loc is Tile ) && this.loc != null ) {
				A = this.loc;
				A.attack_animal( this );
			}
			return;
		}

		// Function from file: hostile.dm
		public virtual void DestroySurroundings(  ) {
			dynamic dir = null;
			Tile T = null;
			Ent_Static A = null;

			
			if ( this.environment_smash != 0 ) {
				this.EscapeConfinement();

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					dir = _b;
					
					T = Map13.GetStep( this, Convert.ToInt32( dir ) );

					if ( T is Tile_Simulated_Wall && T.Adjacent( this ) ) {
						T.attack_animal( this );
					}

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Static) )) {
						A = _a;
						

						if ( !A.Adjacent( this ) ) {
							continue;
						}

						if ( A is Obj_Structure_Window || A is Obj_Structure_Closet || A is Obj_Structure_Table || A is Obj_Structure_Grille || A is Obj_Structure_Rack ) {
							A.attack_animal( this );
						}
					}
				}
			}
			return;
		}

		// Function from file: hostile.dm
		public void Shoot( dynamic target = null, Ent_Static start = null, Mob_Living_SimpleAnimal_Hostile user = null, bool? bullet = null ) {
			bullet = bullet ?? false;

			dynamic A = null;
			dynamic T = null;
			dynamic U = null;

			
			if ( target == start ) {
				return;
			}
			A = Lang13.Call( this.projectiletype, user.loc );
			GlobalFuncs.playsound( user, this.projectilesound, 100, 1 );

			if ( !Lang13.Bool( A ) ) {
				return;
			}

			if ( !( target is Tile ) ) {
				Lang13.Delete( A );
				A = null;
				return;
			}
			A.current = target;
			T = GlobalFuncs.get_turf( this );
			U = GlobalFuncs.get_turf( target );
			A.original = target;
			A.target = U;
			A.current = T;
			A.starting = T;
			A.yo = Convert.ToDouble( target.y - start.y );
			A.xo = Convert.ToDouble( target.x - start.x );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				((Obj_Item_Projectile)A).OnFired();
				((Obj)A).process();
				return;
			}));
			return;
		}

		// Function from file: hostile.dm
		public virtual void OpenFire( dynamic target = null ) {
			dynamic tturf = null;

			tturf = GlobalFuncs.get_turf( target );

			if ( this.rapid ) {
				Task13.Schedule( 1, (Task13.Closure)(() => {
					this.Shoot( tturf, this.loc, this );

					if ( Lang13.Bool( this.ranged_message ) ) {
						this.visible_message( "<span class='warning'><b>" + this + "</b> " + this.ranged_message + " at " + target + "!</span>", 1 );
					}

					if ( this.casingtype != null ) {
						Lang13.Call( this.casingtype, GlobalFuncs.get_turf( this ) );
					}
					return;
				}));
				Task13.Schedule( 4, (Task13.Closure)(() => {
					this.Shoot( tturf, this.loc, this );

					if ( Lang13.Bool( this.ranged_message ) ) {
						this.visible_message( "<span class='warning'><b>" + this + "</b> " + this.ranged_message + " at " + target + "!</span>", 1 );
					}

					if ( this.casingtype != null ) {
						Lang13.Call( this.casingtype, GlobalFuncs.get_turf( this ) );
					}
					return;
				}));
				Task13.Schedule( 6, (Task13.Closure)(() => {
					this.Shoot( tturf, this.loc, this );

					if ( Lang13.Bool( this.ranged_message ) ) {
						this.visible_message( "<span class='warning'><b>" + this + "</b> " + this.ranged_message + " at " + target + "!</span>", 1 );
					}

					if ( this.casingtype != null ) {
						Lang13.Call( this.casingtype, GlobalFuncs.get_turf( this ) );
					}
					return;
				}));
			} else {
				this.Shoot( tturf, this.loc, this );

				if ( Lang13.Bool( this.ranged_message ) ) {
					this.visible_message( "<span class='warning'><b>" + this + "</b> " + this.ranged_message + " at " + target + "!</span>", 1 );
				}

				if ( this.casingtype != null ) {
					Lang13.Call( this.casingtype );
				}
			}
			this.ranged_cooldown = this.ranged_cooldown_cap;
			return;
		}

		// Function from file: hostile.dm
		public virtual void LostTarget(  ) {
			this.stance = 1;
			Map13.Walk( this, 0, 0 );
			this.LoseAggro();
			return;
		}

		// Function from file: hostile.dm
		public virtual void LoseTarget(  ) {
			this.stance = 1;
			this.target = null;
			Map13.Walk( this, 0, 0 );
			this.LoseAggro();
			return;
		}

		// Function from file: hostile.dm
		public virtual void LoseAggro(  ) {
			this.stop_automated_movement = false;
			this.vision_range = this.idle_vision_range;
			return;
		}

		// Function from file: hostile.dm
		public virtual void Aggro(  ) {
			this.vision_range = this.aggro_vision_range;
			return;
		}

		// Function from file: hostile.dm
		public virtual dynamic AttackingTarget(  ) {
			((Ent_Static)this.target).attack_animal( this );
			return null;
		}

		// Function from file: hostile.dm
		public bool AttackTarget(  ) {
			this.stop_automated_movement = true;

			if ( !Lang13.Bool( this.target ) || !this.CanAttack( this.target ) ) {
				this.LoseTarget();
				return false;
			}
			Interface13.Stat( null, this.ListTargets().Contains( this.target ) );

			if ( !( !Lang13.Bool( this.target ) || !this.CanAttack( this.target ) ) ) {
				this.LostTarget();
				return false;
			}

			if ( this.loc is Tile && ((Ent_Static)this.target).Adjacent( this ) ) {
				this.AttackingTarget();
				return true;
			}
			return false;
		}

		// Function from file: hostile.dm
		public void Goto( dynamic target = null, int delay = 0, int? minimum_distance = null ) {
			Map13.WalkTowards( this, target, minimum_distance ??0, delay );
			return;
		}

		// Function from file: hostile.dm
		public virtual void MoveToTarget(  ) {
			int? target_distance = null;
			Ent_Static A = null;

			this.stop_automated_movement = true;

			if ( !Lang13.Bool( this.target ) || !this.CanAttack( this.target ) ) {
				this.LoseTarget();
				return;
			}
			Interface13.Stat( null, this.ListTargets().Contains( this.target ) );

			if ( !Lang13.Bool( this.target ) || !this.CanAttack( this.target ) ) {
				target_distance = Map13.GetDistance( this, this.target );

				if ( this.ranged ) {
					
					if ( ( target_distance ??0) >= 2 && this.ranged_cooldown <= 0 ) {
						this.OpenFire( this.target );
					}
				}

				if ( this.loc is Tile && ((Ent_Static)this.target).Adjacent( this ) ) {
					this.AttackingTarget();
				}

				if ( this.canmove ) {
					
					if ( this.retreat_distance != null && ( target_distance ??0) <= ( this.retreat_distance ??0) ) {
						Map13.WalkAway( this, this.target, this.retreat_distance, this.move_to_delay );
					} else {
						this.Goto( this.target, this.move_to_delay, this.minimum_distance );
					}
				}
				return;
			}

			if ( this.target.loc != null && Map13.GetDistance( this, this.target.loc ) <= ( this.vision_range ??0) ) {
				
				if ( this.FindHidden( this.target ) && this.environment_smash != 0 ) {
					A = this.target.loc;

					if ( this.canmove ) {
						this.Goto( A, this.move_to_delay, this.minimum_distance );
					}

					if ( A.Adjacent( this ) ) {
						A.attack_animal( this );
					}
					return;
				} else {
					this.LostTarget();
				}
			}
			this.LostTarget();
			return;
		}

		// Function from file: hostile.dm
		public virtual void GiveTarget( dynamic new_target = null ) {
			this.target = new_target;

			if ( this.target != null ) {
				this.Aggro();
				this.stance = 3;
			}
			return;
		}

		// Function from file: hostile.dm
		public dynamic PickTarget( ByTable Targets = null ) {
			Ent_Static A = null;
			int target_dist = 0;
			int possible_target_distance = 0;
			dynamic chosen_target = null;

			
			if ( this.target != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Targets, typeof(Ent_Static) )) {
					A = _a;
					
					target_dist = Map13.GetDistance( this, this.target );
					possible_target_distance = Map13.GetDistance( this, A );

					if ( target_dist < possible_target_distance ) {
						Targets.Remove( A );
					}
				}
			}

			if ( !( Targets.len != 0 ) ) {
				return null;
			}
			chosen_target = Rand13.PickFromTable( Targets );
			return chosen_target;
		}

		// Function from file: hostile.dm
		public virtual dynamic Found( Ent_Static A = null ) {
			return null;
		}

		// Function from file: hostile.dm
		public virtual dynamic FindTarget(  ) {
			ByTable Targets = null;
			dynamic Target = null;
			Ent_Static A = null;
			ByTable FoundTarget = null;

			Targets = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.ListTargets(), typeof(Ent_Static) )) {
				A = _a;
				

				if ( Lang13.Bool( this.Found( A ) ) ) {
					FoundTarget = new ByTable();
					FoundTarget.Add( A );
					Targets = FoundTarget;
					break;
				}

				if ( this.CanAttack( A ) ) {
					Targets.Add( A );
					continue;
				}
			}
			Target = this.PickTarget( Targets );
			return Target;
		}

		// Function from file: hostile.dm
		public virtual ByTable ListTargets(  ) {
			ByTable L = null;
			Obj_Mecha M = null;

			L = new ByTable();

			if ( !( this.search_objects != 0 ) ) {
				L.Add( Map13.FetchHearersExcludeThis( this, this.vision_range ) );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mechas_list, typeof(Obj_Mecha) )) {
					M = _a;
					

					if ( Map13.GetDistance( M, this ) <= ( this.vision_range ??0) && GlobalFuncs.can_see( this, M, this.vision_range ) ) {
						L.Add( M );
					}
				}
			} else {
				L.Add( Map13.FetchInViewExcludeThis( this, this.vision_range ) );
			}
			return L;
		}

		// Function from file: hostile.dm
		public override bool Life(  ) {
			bool _default = false;

			Ent_Static L = null;
			dynamic new_target = null;

			
			if ( this.timestopped ) {
				return false;
			}
			_default = base.Life();

			if ( this.loc is Obj_Item_Device_Mobcapsule ) {
				return false;
			}

			if ( !_default ) {
				Map13.Walk( this, 0, 0 );
				return false;
			}

			if ( this.client != null && !this.deny_client_move ) {
				return false;
			}

			if ( !Lang13.Bool( this.stat ) ) {
				
				if ( Convert.ToDouble( this.size ) > 1 && this.loc is Obj_Item_Weapon_Holder ) {
					L = this.loc.loc;

					if ( !( L is Mob_Living ) || ((dynamic)L).faction != this.faction || !this.CanAttack( L ) ) {
						GlobalFuncs.returnToPool( this.loc );
					} else {
						return false;
					}
				}

				switch ((int)( this.stance )) {
					case 1:
						
						if ( this.environment_smash != 0 ) {
							this.EscapeConfinement();
						}
						new_target = this.FindTarget();
						this.GiveTarget( new_target );
						break;
					case 3:
						
						if ( !Lang13.Bool( this.flags & 128 ) ) {
							this.MoveToTarget();
							this.DestroySurroundings();
						}
						break;
					case 4:
						
						if ( !Lang13.Bool( this.flags & 128 ) ) {
							this.AttackTarget();
							this.DestroySurroundings();
						}
						break;
				}

				if ( this.ranged ) {
					this.ranged_cooldown--;
				}
			}
			return _default;
		}

		// Function from file: hostile.dm
		public override dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			base.resetVariables( "wanted_objects", "friends", (object)(_args) );
			this.wanted_objects = new ByTable();
			this.friends = new ByTable();
			return null;
		}

	}

}