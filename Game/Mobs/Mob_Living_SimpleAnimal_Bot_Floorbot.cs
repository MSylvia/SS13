// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Bot_Floorbot : Mob_Living_SimpleAnimal_Bot {

		public int? process_type = null;
		public double? targetdirection = null;
		public double amount = 10;
		public bool replacetiles = false;
		public bool eattiles = false;
		public bool maketiles = false;
		public bool fixfloors = false;
		public bool autotile = false;
		public bool nag_on_empty = true;
		public bool nagged = false;
		public int max_targets = 50;
		public dynamic target = null;
		public Ent_Static oldloc = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 25;
			this.maxHealth = 25;
			this.radio_key = typeof(Obj_Item_Device_Encryptionkey_HeadsetEng);
			this.radio_channel = "Engineering";
			this.bot_type = 4;
			this.model = "Floorbot";
			this.bot_core = typeof(Obj_Machinery_BotCore_Floorbot);
			this.window_id = "autofloor";
			this.window_name = "Automatic Station Floor Repairer v1.1";
			this.icon_state = "floorbot0";
		}

		// Function from file: floorbot.dm
		public Mob_Living_SimpleAnimal_Bot_Floorbot ( dynamic loc = null ) : base( (object)(loc) ) {
			Job_Engineer J = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			J = new Job_Engineer();
			this.access_card.access += J.get_access();
			this.prev_access = this.access_card.access;
			return;
		}

		// Function from file: floorbot.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			
			if ( A is Tile ) {
				this.repair( A );
			} else if ( A is Obj_Item_Stack_Tile_Plasteel ) {
				this.eattile( A );
			} else if ( A is Obj_Item_Stack_Sheet_Metal ) {
				this.maketile( A );
			} else {
				base.UnarmedAttack( A, proximity_flag );
			}
			return;
		}

		// Function from file: floorbot.dm
		public override void explode(  ) {
			dynamic Tsec = null;
			Obj_Item_Weapon_Storage_Toolbox_Mechanical N = null;
			Obj_Item_Stack_Tile_Plasteel T = null;
			Obj_Item_Stack_Tile_Plasteel T2 = null;
			EffectSystem_SparkSpread s = null;

			this.on = 0;
			this.visible_message( "<span class='boldannounce'>" + this + " blows apart!</span>" );
			Tsec = GlobalFuncs.get_turf( this );
			N = new Obj_Item_Weapon_Storage_Toolbox_Mechanical( Tsec );
			N.contents = new ByTable();
			new Obj_Item_Device_Assembly_ProxSensor( Tsec );

			if ( Rand13.PercentChance( 50 ) ) {
				new Obj_Item_RobotParts_LArm( Tsec );
			}

			while (this.amount != 0) {
				
				if ( this.amount >= 16 ) {
					T = new Obj_Item_Stack_Tile_Plasteel( Tsec );
					T.amount = 16;
					this.amount -= 16;
				} else {
					T2 = new Obj_Item_Stack_Tile_Plasteel( Tsec );
					T2.amount = this.amount;
					this.amount = 0;
				}
			}
			s = new EffectSystem_SparkSpread();
			s.set_up( 3, 1, this );
			s.start();
			base.explode();
			return;
		}

		// Function from file: floorbot.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.amount > 0 ) {
				this.icon_state = "floorbot" + this.on;
			} else {
				this.icon_state = "floorbot" + this.on + "e";
			}
			return false;
		}

		// Function from file: floorbot.dm
		public override dynamic process_scan( dynamic scan_target = null ) {
			dynamic result = null;
			dynamic F = null;

			
			switch ((int?)( this.process_type )) {
				case 1:
					
					if ( this.is_hull_breach( scan_target ) ) {
						result = scan_target;
						this.anchored = 1;
					}
					break;
				case 2:
					
					if ( Map13.GetDistance( this, scan_target ) == this.targetdirection ) {
						result = scan_target;
						this.anchored = 1;
					}
					break;
				case 5:
					F = scan_target;

					if ( F is Tile_Simulated_Floor_Plating ) {
						result = F;
					}
					break;
				case 3:
					F = scan_target;

					if ( F is Tile_Simulated_Floor && ( Lang13.Bool( F.broken ) || F.burnt ) ) {
						result = F;
					}
					break;
				case 6:
					F = scan_target;

					if ( !( F is Tile_Simulated_Floor_Plating ) ) {
						result = F;
					}
					break;
				default:
					result = scan_target;
					break;
			}
			return result;
		}

		// Function from file: floorbot.dm
		public void maketile( dynamic M = null ) {
			Obj_Item_Stack_Tile_Plasteel T = null;

			
			if ( !( M is Obj_Item_Stack_Sheet_Metal ) ) {
				return;
			}
			this.visible_message( "<span class='notice'>" + this + " begins to create tiles.</span>" );
			this.v_mode = 8;
			Task13.Schedule( 20, (Task13.Closure)(() => {
				
				if ( M == null ) {
					this.target = null;
					this.v_mode = 0;
					return;
				}
				T = new Obj_Item_Stack_Tile_Plasteel();
				T.amount = 4;
				T.loc = M.loc;

				if ( Convert.ToDouble( M.amount ) > 1 ) {
					M.amount--;
				} else {
					GlobalFuncs.qdel( M );
				}
				this.target = null;
				this.v_mode = 0;
				return;
			}));
			return;
		}

		// Function from file: floorbot.dm
		public void eattile( dynamic T = null ) {
			double i = 0;

			
			if ( !( T is Obj_Item_Stack_Tile_Plasteel ) ) {
				return;
			}
			this.visible_message( "<span class='notice'>" + this + " begins to collect tiles.</span>" );
			this.v_mode = 8;
			Task13.Schedule( 20, (Task13.Closure)(() => {
				
				if ( T == null ) {
					this.target = null;
					this.v_mode = 0;
					return;
				}

				if ( this.amount + Convert.ToDouble( T.amount ) > 50 ) {
					i = 50 - this.amount;
					this.amount += i;
					T.amount -= i;
				} else {
					this.amount += Convert.ToDouble( T.amount );
					GlobalFuncs.qdel( T );
				}
				this.update_icon();
				this.target = null;
				this.v_mode = 0;
				return;
			}));
			return;
		}

		// Function from file: floorbot.dm
		public void repair( dynamic target_turf = null ) {
			dynamic F = null;

			
			if ( target_turf is Tile_Space ) {
				
				if ( !this.is_hull_breach( target_turf ) && !Lang13.Bool( this.targetdirection ) ) {
					this.target = null;
					return;
				}
			} else if ( !( target_turf is Tile_Simulated_Floor ) ) {
				return;
			}

			if ( this.amount <= 0 ) {
				this.v_mode = 0;
				this.target = null;
				return;
			}
			this.anchored = 1;
			this.icon_state = "floorbot-c";

			if ( target_turf is Tile_Space ) {
				this.visible_message( "<span class='notice'>" + ( Lang13.Bool( this.targetdirection ) ? "" + this + " begins installing a bridge plating." : "" + this + " begins to repair the hole." ) + " </span>" );
				this.v_mode = 8;
				Task13.Schedule( 50, (Task13.Closure)(() => {
					
					if ( this.v_mode == 8 ) {
						
						if ( this.autotile ) {
							((Tile)target_turf).ChangeTurf( typeof(Tile_Simulated_Floor_Plasteel) );
						} else {
							((Tile)target_turf).ChangeTurf( typeof(Tile_Simulated_Floor_Plating) );
						}
						this.v_mode = 0;
						this.amount -= 1;
						this.update_icon();
						this.anchored = 0;
						this.target = null;
					}
					return;
				}));
			} else {
				F = target_turf;
				this.v_mode = 8;
				this.visible_message( "<span class='notice'>" + this + " begins repairing the floor.</span>" );
				Task13.Schedule( 50, (Task13.Closure)(() => {
					
					if ( this.v_mode == 8 ) {
						F.broken = 0;
						F.burnt = false;
						((Tile)F).ChangeTurf( typeof(Tile_Simulated_Floor_Plasteel) );
						this.v_mode = 0;
						this.amount -= 1;
						this.update_icon();
						this.anchored = 0;
						this.target = null;
					}
					return;
				}));
			}
			return;
		}

		// Function from file: floorbot.dm
		public bool is_hull_breach( dynamic t = null ) {
			dynamic t_area = null;

			t_area = GlobalFuncs.get_area( t );

			if ( Lang13.Bool( t_area ) && ( t_area.name == "Space" || String13.FindIgnoreCase( t_area.name, "huttle", 1, 0 ) != 0 ) ) {
				return false;
			} else {
				return true;
			}
		}

		// Function from file: floorbot.dm
		public void nag(  ) {
			
			if ( !this.nagged ) {
				this.f_speak( "Requesting refill at <b>" + GlobalFuncs.get_area( this ) + "</b>!", this.radio_channel );
				this.nagged = true;
			}
			return;
		}

		// Function from file: floorbot.dm
		public override bool handle_automated_action(  ) {
			Tile T = null;
			dynamic TL = null;
			dynamic F = null;

			
			if ( !base.handle_automated_action() ) {
				return false;
			}

			if ( this.v_mode == 8 ) {
				return false;
			}

			if ( this.amount <= 0 && !Lang13.Bool( this.target ) ) {
				
				if ( this.eattiles ) {
					this.target = this.scan( typeof(Obj_Item_Stack_Tile_Plasteel) );
					this.process_type = null;
				}

				if ( !Lang13.Bool( this.target ) && this.maketiles ) {
					this.target = this.scan( typeof(Obj_Item_Stack_Sheet_Metal) );
					this.process_type = null;
					return false;
				} else if ( this.nag_on_empty ) {
					this.nag();
				}
			}

			if ( Rand13.PercentChance( 5 ) ) {
				this.audible_message( "" + this + " makes an excited booping beeping sound!" );
			}

			if ( !Lang13.Bool( this.target ) && this.emagged < 2 && this.amount > 0 ) {
				
				if ( this.targetdirection != null ) {
					T = Map13.GetStep( this, ((int)( this.targetdirection ??0 )) );

					if ( T is Tile_Space ) {
						this.target = T;
					} else {
						this.target = this.scan( typeof(Tile_Space) );
					}
					this.process_type = 2;
				}

				if ( !Lang13.Bool( this.target ) ) {
					this.process_type = 1;
					this.target = this.scan( typeof(Tile_Space) );
				}

				if ( !Lang13.Bool( this.target ) && this.replacetiles ) {
					this.process_type = 5;
					this.target = this.scan( typeof(Tile_Simulated_Floor) );
				}

				if ( !Lang13.Bool( this.target ) && this.fixfloors ) {
					this.process_type = 3;
					this.target = this.scan( typeof(Tile_Simulated_Floor) );
				}
			}

			if ( !Lang13.Bool( this.target ) && this.emagged == 2 ) {
				this.process_type = 6;
				this.target = this.scan( typeof(Tile_Simulated_Floor) );
			}

			if ( !Lang13.Bool( this.target ) ) {
				
				if ( this.auto_patrol ) {
					
					if ( this.v_mode == 0 || this.v_mode == 4 ) {
						this.start_patrol();
					}

					if ( this.v_mode == 5 ) {
						this.bot_patrol();
					}
				}
			}

			if ( Lang13.Bool( this.target ) ) {
				
				if ( this.path.len == 0 ) {
					
					if ( !( this.target is Tile ) ) {
						TL = GlobalFuncs.get_turf( this.target );
						this.path = GlobalFuncs.get_path_to( this, TL, typeof(Tile).GetMethod( "Distance_cardinal" ), false, 30, null, null, this.access_card, null, false );
					} else {
						this.path = GlobalFuncs.get_path_to( this, this.target, typeof(Tile).GetMethod( "Distance_cardinal" ), false, 30, null, null, this.access_card, null, false );
					}

					if ( !this.bot_move( this.target ) ) {
						this.add_to_ignore( this.target );
						this.target = null;
						this.v_mode = 0;
						return false;
					}
				} else if ( !this.bot_move( this.target ) ) {
					this.target = null;
					this.v_mode = 0;
					return false;
				}

				if ( this.loc == this.target || this.loc == this.target.loc ) {
					
					if ( this.target is Obj_Item_Stack_Tile_Plasteel ) {
						this.eattile( this.target );
					} else if ( this.target is Obj_Item_Stack_Sheet_Metal ) {
						this.maketile( this.target );
					} else if ( this.target is Tile && this.emagged < 2 ) {
						this.repair( this.target );
					} else if ( this.emagged == 2 && this.target is Tile_Simulated_Floor ) {
						F = this.target;
						this.anchored = 1;
						this.v_mode = 8;

						if ( Rand13.PercentChance( 90 ) ) {
							((Tile_Simulated_Floor)F).break_tile_to_plating();
						} else {
							((Tile)F).ReplaceWithLattice();
						}
						this.audible_message( "<span class='danger'>" + this + " makes an excited booping sound.</span>" );
						Task13.Schedule( 50, (Task13.Closure)(() => {
							this.amount++;
							this.anchored = 0;
							this.v_mode = 0;
							this.target = null;
							return;
						}));
					}
					this.path = new ByTable();
					return false;
				}
			}
			this.oldloc = this.loc;
			return false;
		}

		// Function from file: floorbot.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic setdir = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return 1;
			}

			dynamic _b = href_list["operation"]; // Was a switch-case, sorry for the mess.
			if ( _b=="replace" ) {
				this.replacetiles = !this.replacetiles;
			} else if ( _b=="tiles" ) {
				this.eattiles = !this.eattiles;
			} else if ( _b=="make" ) {
				this.maketiles = !this.maketiles;
			} else if ( _b=="fix" ) {
				this.fixfloors = !this.fixfloors;
			} else if ( _b=="autotile" ) {
				this.autotile = !this.autotile;
			} else if ( _b=="emptynag" ) {
				this.nag_on_empty = !this.nag_on_empty;
			} else if ( _b=="anchor" ) {
				this.anchored = !Lang13.Bool( this.anchored );
			} else if ( _b=="bridgemode" ) {
				setdir = Interface13.Input( "Select construction direction:", null, null, null, new ByTable(new object [] { "north", "east", "south", "west", "disable" }), InputType.Null | InputType.Any );

				dynamic _a = setdir; // Was a switch-case, sorry for the mess.
				if ( _a=="north" ) {
					this.targetdirection = 1;
				} else if ( _a=="south" ) {
					this.targetdirection = 2;
				} else if ( _a=="east" ) {
					this.targetdirection = 4;
				} else if ( _a=="west" ) {
					this.targetdirection = 8;
				} else if ( _a=="disable" ) {
					this.targetdirection = null;
				}
			}
			this.update_controls();
			return null;
		}

		// Function from file: floorbot.dm
		public override bool emag_act( dynamic user = null ) {
			base.emag_act( (object)(user) );

			if ( this.emagged == 2 ) {
				
				if ( Lang13.Bool( user ) ) {
					user.WriteMsg( "<span class='danger'>" + this + " buzzes and beeps.</span>" );
				}
			}
			return false;
		}

		// Function from file: floorbot.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic T = null;
			double? loaded = null;

			
			if ( A is Obj_Item_Stack_Tile_Plasteel ) {
				T = A;

				if ( this.amount >= 50 ) {
					return null;
				}
				loaded = Num13.MinInt( ((int)( 50 - this.amount )), Convert.ToInt32( T.amount ) );
				((Obj_Item_Stack)T).use( loaded );
				this.amount += loaded ??0;

				if ( ( loaded ??0) > 0 ) {
					user.WriteMsg( "<span class='notice'>You load " + loaded + " tiles into the floorbot. He now contains " + this.amount + " tiles.</span>" );
					this.nagged = false;
					this.update_icon();
				} else {
					user.WriteMsg( "<span class='warning'>You need at least one floor tile to put into " + this + "!</span>" );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: floorbot.dm
		public override string get_controls( dynamic M = null ) {
			dynamic dat = null;
			string bmode = null;

			dat += this.hack( M );
			dat += this.showpai( M );
			dat += "<TT><B>Floor Repairer Controls v1.1</B></TT><BR><BR>";
			dat += new Txt( "Status: <A href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( Lang13.Bool( this.on ) ? "On" : "Off" ) ).str( "</A><BR>" ).ToString();
			dat += "Maintenance panel panel is " + ( this.open ? "opened" : "closed" ) + "<BR>";
			dat += "Tiles left: " + this.amount + "<BR>";
			dat += "Behvaiour controls are " + ( this.locked ? "locked" : "unlocked" ) + "<BR>";

			if ( !this.locked || M is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( M ) ) ) {
				dat += new Txt( "Add tiles to new hull plating: <A href='?src=" ).Ref( this ).str( ";operation=autotile'>" ).item( ( this.autotile ? "Yes" : "No" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "Replace floor tiles: <A href='?src=" ).Ref( this ).str( ";operation=replace'>" ).item( ( this.replacetiles ? "Yes" : "No" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "Finds tiles: <A href='?src=" ).Ref( this ).str( ";operation=tiles'>" ).item( ( this.eattiles ? "Yes" : "No" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "Make pieces of metal into tiles when empty: <A href='?src=" ).Ref( this ).str( ";operation=make'>" ).item( ( this.maketiles ? "Yes" : "No" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "Transmit notice when empty: <A href='?src=" ).Ref( this ).str( ";operation=emptynag'>" ).item( ( this.nag_on_empty ? "Yes" : "No" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "Repair damaged tiles and platings: <A href='?src=" ).Ref( this ).str( ";operation=fix'>" ).item( ( this.fixfloors ? "Yes" : "No" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "Traction Magnets: <A href='?src=" ).Ref( this ).str( ";operation=anchor'>" ).item( ( Lang13.Bool( this.anchored ) ? "Engaged" : "Disengaged" ) ).str( "</A><BR>" ).ToString();
				dat += new Txt( "Patrol Station: <A href='?src=" ).Ref( this ).str( ";operation=patrol'>" ).item( ( this.auto_patrol ? "Yes" : "No" ) ).str( "</A><BR>" ).ToString();

				if ( Lang13.Bool( this.targetdirection ) ) {
					bmode = GlobalFuncs.dir2text( this.targetdirection );
				} else {
					bmode = "disabled";
				}
				dat += new Txt( "Bridge Mode : <A href='?src=" ).Ref( this ).str( ";operation=bridgemode'>" ).item( bmode ).str( "</A><BR>" ).ToString();
			}
			return dat;
		}

		// Function from file: floorbot.dm
		public override void set_custom_texts(  ) {
			this.text_hack = "You corrupt " + this.name + "'s construction protocols.";
			this.text_dehack = "You detect errors in " + this.name + " and reset his programming.";
			this.text_dehack_fail = "" + this.name + " is not responding to reset commands!";
			return;
		}

		// Function from file: floorbot.dm
		public override void bot_reset(  ) {
			base.bot_reset();
			this.target = null;
			this.oldloc = null;
			this.ignore_list = new ByTable();
			this.nagged = false;
			this.anchored = 0;
			this.update_icon();
			return;
		}

		// Function from file: floorbot.dm
		public override void turn_off(  ) {
			base.turn_off();
			this.update_icon();
			return;
		}

		// Function from file: floorbot.dm
		public override bool turn_on(  ) {
			bool _default = false;

			_default = base.turn_on();
			this.update_icon();
			return _default;
		}

	}

}