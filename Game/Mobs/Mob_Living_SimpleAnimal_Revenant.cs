// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Revenant : Mob_Living_SimpleAnimal {

		public string icon_idle = "revenant_idle";
		public string icon_reveal = "revenant_revealed";
		public string icon_stun = "revenant_stun";
		public string icon_drain = "revenant_draining";
		public int essence = 75;
		public int essence_regen_cap = 75;
		public bool essence_regenerating = true;
		public int essence_regen_amount = 5;
		public int essence_accumulated = 0;
		public bool revealed = false;
		public int unreveal_time = 0;
		public int unstun_time = 0;
		public bool inhibited = false;
		public int essence_drained = 0;
		public bool draining = false;
		public ByTable drained_mobs = new ByTable();
		public int perfectsouls = 0;
		public Image ghostimage = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 50;
			this.incorporeal_move = 3;
			this.health = Double.PositiveInfinity;
			this.maxHealth = Double.PositiveInfinity;
			this.healable = false;
			this.languages = 65535;
			this.response_help = "passes through";
			this.response_disarm = "swings through";
			this.response_harm = "punches through";
			this.unsuitable_atmos_damage = 0;
			this.damage_coeff = new ByTable().Set( "brute", 1 ).Set( "fire", 1 ).Set( "tox", 0 ).Set( "clone", 0 ).Set( "stamina", 0 ).Set( "oxy", 0 );
			this.atmos_requirements = new ByTable().Set( "min_oxy", 0 ).Set( "max_oxy", 0 ).Set( "min_tox", 0 ).Set( "max_tox", 0 ).Set( "min_co2", 0 ).Set( "max_co2", 0 ).Set( "min_n2", 0 ).Set( "max_n2", 0 );
			this.minbodytemp = 0;
			this.maxbodytemp = Double.PositiveInfinity;
			this.harm_intent_damage = 0;
			this.friendly = "touches";
			this.status_flags = 0;
			this.wander = false;
			this.flying = true;
			this.anchored = 1;
			this.mob_size = 0;
			this.pass_flags = 21;
			this.speed = 0;
			this.unique_name = true;
			this.icon = "icons/mob/mob.dmi";
			this.icon_state = "revenant_idle";
			this.layer = 5;
			this.see_in_dark = 8;
			this.see_invisible = 5;
		}

		// Function from file: revenant.dm
		public Mob_Living_SimpleAnimal_Revenant ( dynamic loc = null ) : base( (object)(loc) ) {
			Objective_Revenant objective = null;
			Objective_RevenantFluff objective2 = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.ghostimage = new Image( this.icon, this, this.icon_state );
			GlobalVars.ghost_darkness_images.Or( this.ghostimage );
			GlobalFuncs.updateallghostimages();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				if ( this.mind != null ) {
					this.mind.remove_all_antag();
					this.mind.wipe_memory();
					this.WriteMsg( "sound/effects/ghost.ogg" );
					this.WriteMsg( "<br>" );
					this.WriteMsg( "<span class='deadsay'><font size=3><b>You are a revenant.</b></font></span>" );
					this.WriteMsg( "<b>Your formerly mundane spirit has been infused with alien energies and empowered into a revenant.</b>" );
					this.WriteMsg( "<b>You are not dead, not alive, but somewhere in between. You are capable of limited interaction with both worlds.</b>" );
					this.WriteMsg( "<b>You are invincible and invisible to everyone but other ghosts. Most abilities will reveal you, rendering you vulnerable.</b>" );
					this.WriteMsg( "<b>To function, you are to drain the life essence from humans. This essence is a resource, as well as your health, and will power all of your abilities.</b>" );
					this.WriteMsg( "<b><i>You do not remember anything of your past lives, nor will you remember anything about this one after your death.</i></b>" );
					this.WriteMsg( "<b>Be sure to read the wiki page at https://tgstation13.org/wiki/Revenant to learn more.</b>" );
					objective = new Objective_Revenant();
					objective.owner = this.mind;
					this.mind.objectives.Add( objective );
					this.WriteMsg( "<b>Objective #1</b>: " + objective.explanation_text );
					objective2 = new Objective_RevenantFluff();
					objective2.owner = this.mind;
					this.mind.objectives.Add( objective2 );
					this.WriteMsg( "<b>Objective #2</b>: " + objective2.explanation_text );
					GlobalVars.ticker.mode.traitors.Or( this.mind );
				}
				this.AddSpell( new Obj_Effect_ProcHolder_Spell_Targeted_RevenantTransmit( null ) );
				this.AddSpell( new Obj_Effect_ProcHolder_Spell_AoeTurf_Revenant_Defile( null ) );
				this.AddSpell( new Obj_Effect_ProcHolder_Spell_AoeTurf_Revenant_Overload( null ) );
				this.AddSpell( new Obj_Effect_ProcHolder_Spell_AoeTurf_Revenant_Malfunction( null ) );
				this.AddSpell( new Obj_Effect_ProcHolder_Spell_AoeTurf_Revenant_Blight( null ) );
				return;
			}));
			return;
		}

		// Function from file: revenant.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Nullrod ) {
				this.visible_message( "<span class='warning'>" + this + " violently flinches!</span>", new Txt( "<span class='revendanger'>As " ).the( A ).item().str( " passes through you, you feel your essence draining away!</span>" ).ToString() );
				this.adjustBruteLoss( 25 );
				this.inhibited = true;
				Task13.Schedule( 30, (Task13.Closure)(() => {
					this.inhibited = false;
					return;
				}));
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: revenant.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			int? i = null;
			Obj_Item_Weapon_Ectoplasm_Revenant R = null;

			
			if ( !this.revealed ) {
				return false;
			}
			base.death( true, toast );
			GlobalVars.ghost_darkness_images.Remove( this.ghostimage );
			GlobalFuncs.updateallghostimages();
			this.WriteMsg( "<span class='revendanger'>NO! No... it's too late, you can feel your essence breaking apart...</span>" );
			this.notransform = 1;
			this.revealed = true;
			this.invisibility = 0;
			GlobalFuncs.playsound( this, "sound/effects/screech.ogg", 100, 1 );
			this.visible_message( "<span class='warning'>" + this + " lets out a waning screech as violet mist swirls around its dissolving body!</span>" );
			this.icon_state = "revenant_draining";
			i = null;
			i = this.alpha;

			while (( i ??0) > 0) {
				Task13.Sleep( ((int)( 0.1 )) );
				this.alpha = i ??0;
				i -= 10;
			}
			this.visible_message( "<span class='danger'>" + this + "'s body breaks apart into a fine pile of blue dust.</span>" );
			R = new Obj_Item_Weapon_Ectoplasm_Revenant( GlobalFuncs.get_turf( this ) );
			R.client_to_revive = this.client;
			this.ghostize();
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: revenant.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( null, "Current essence: " + this.essence + "/" + this.essence_regen_cap + "E" );
				Interface13.Stat( null, "Stolen essence: " + this.essence_accumulated + "E" );
				Interface13.Stat( null, "Stolen perfect souls: " + this.perfectsouls );
			}
			return null;
		}

		// Function from file: revenant.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			string rendered = null;
			dynamic M = null;

			
			if ( !Lang13.Bool( message ) ) {
				return false;
			}
			GlobalFuncs.log_say( "" + GlobalFuncs.key_name( this ) + " : " + message );
			rendered = "<span class='revennotice'><b>" + this + "</b> says, \"" + message + "\"</span>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( M is Mob_Living_SimpleAnimal_Revenant ) {
					M.WriteMsg( rendered );
				}

				if ( M is Mob_Dead_Observer ) {
					M.WriteMsg( new Txt( "<a href='?src=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( "'>(F)</a> " ).item( rendered ).ToString() );
				}
			}
			return false;
		}

		// Function from file: revenant.dm
		public override void ClickOn( Ent_Static A = null, string _params = null ) {
			A.examine( this );

			if ( A is Mob_Living_Carbon_Human && Map13.GetDistance( this, A ) <= 1 ) {
				this.Harvest( A );
			}
			return;
		}

		// Function from file: revenant.dm
		public override dynamic adjustHealth( dynamic amount = null ) {
			dynamic _default = null;

			
			if ( !this.revealed ) {
				return 0;
			}
			_default = amount;
			this.essence = Num13.MaxInt( 0, ((int)( this.essence - Convert.ToDouble( amount ) )) );

			if ( this.essence == 0 ) {
				this.WriteMsg( "<span class='revendanger'>You feel your essence fraying!</span>" );
			}
			return _default;
		}

		// Function from file: revenant.dm
		public override void narsie_act(  ) {
			return;
		}

		// Function from file: revenant.dm
		public override double singularity_act( int? current_size = null, Obj_Singularity S = null ) {
			return 0;
		}

		// Function from file: revenant.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: revenant.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			return true;
		}

		// Function from file: revenant.dm
		public override int Process_Spacemove( dynamic movement_dir = null ) {
			movement_dir = movement_dir ?? 0;

			return 1;
		}

		// Function from file: revenant.dm
		public bool change_essence_amount( int essence_amt = 0, bool? silent = null, Ent_Static source = null ) {
			silent = silent ?? false;

			
			if ( !( this != null ) ) {
				return false;
			}

			if ( this.essence + essence_amt <= 0 ) {
				return false;
			}
			this.essence = Num13.MaxInt( 0, this.essence + essence_amt );

			if ( essence_amt > 0 ) {
				this.essence_accumulated = Num13.MaxInt( 0, this.essence_accumulated + essence_amt );
			}

			if ( !( silent == true ) ) {
				
				if ( essence_amt > 0 ) {
					this.WriteMsg( "<span class='revennotice'>Gained " + essence_amt + "E from " + source + ".</span>" );
				} else {
					this.WriteMsg( "<span class='revenminor'>Lost " + essence_amt + "E from " + source + ".</span>" );
				}
			}
			return true;
		}

		// Function from file: revenant.dm
		public bool castcheck( int essence_cost = 0 ) {
			dynamic T = null;

			
			if ( !( this != null ) ) {
				return false;
			}
			T = GlobalFuncs.get_turf( this );

			if ( T is Tile_Simulated_Wall ) {
				this.WriteMsg( "<span class='revenwarning'>You cannot use abilities from inside of a wall.</span>" );
				return false;
			}

			if ( this.inhibited ) {
				this.WriteMsg( "<span class='revenwarning'>Your powers have been suppressed by nulling energy!</span>" );
				return false;
			}

			if ( !this.change_essence_amount( essence_cost, true ) ) {
				this.WriteMsg( "<span class='revenwarning'>You lack the essence to use that ability.</span>" );
				return false;
			}
			return true;
		}

		// Function from file: revenant.dm
		public void Harvest( Ent_Static target = null ) {
			
			if ( !this.castcheck( 0 ) ) {
				return;
			}

			if ( this.draining ) {
				this.WriteMsg( "<span class='revenwarning'>You are already siphoning the essence of a soul!</span>" );
				return;
			}

			if ( this.drained_mobs.Contains( target ) ) {
				this.WriteMsg( "<span class='revenwarning'>" + target + "'s soul is dead and empty.</span>" );
				return;
			}

			if ( !Lang13.Bool( ((dynamic)target).stat ) ) {
				this.WriteMsg( "<span class='revennotice'>This being's soul is too strong to harvest.</span>" );

				if ( Rand13.PercentChance( 10 ) ) {
					((dynamic)target).WriteMsg( "You feel as if you are being watched." );
				}
				return;
			}
			this.draining = true;
			this.essence_drained += Rand13.Int( 15, 20 );
			this.WriteMsg( "<span class='revennotice'>You search for the soul of " + target + ".</span>" );

			if ( GlobalFuncs.do_after( this, 10, false, target ) ) {
				
				if ( Lang13.Bool( ((dynamic)target).ckey ) ) {
					this.WriteMsg( "<span class='revennotice'>Their soul burns with intelligence.</span>" );
					this.essence_drained += Rand13.Int( 20, 30 );
				}

				if ( Convert.ToInt32( ((dynamic)target).stat ) != 2 ) {
					this.WriteMsg( "<span class='revennotice'>Their soul blazes with life!</span>" );
					this.essence_drained += Rand13.Int( 40, 50 );
				} else {
					this.WriteMsg( "<span class='revennotice'>Their soul is weak and faltering.</span>" );
				}

				if ( GlobalFuncs.do_after( this, 20, false, target ) ) {
					
					dynamic _a = this.essence_drained; // Was a switch-case, sorry for the mess.
					if ( 1<=_a&&_a<=30 ) {
						this.WriteMsg( "<span class='revennotice'>" + target + " will not yield much essence. Still, every bit counts.</span>" );
					} else if ( 30<=_a&&_a<=70 ) {
						this.WriteMsg( "<span class='revennotice'>" + target + " will yield an average amount of essence.</span>" );
					} else if ( 70<=_a&&_a<=90 ) {
						this.WriteMsg( "<span class='revenboldnotice'>Such a feast! " + target + " will yield much essence to you.</span>" );
					} else if ( 90<=_a&&_a<=Double.PositiveInfinity ) {
						this.WriteMsg( "<span class='revenbignotice'>Ah, the perfect soul. " + target + " will yield massive amounts of essence to you.</span>" );
					}

					if ( GlobalFuncs.do_after( this, 20, false, target ) ) {
						
						if ( !Lang13.Bool( ((dynamic)target).stat ) ) {
							this.WriteMsg( "<span class='revenwarning'>They are now powerful enough to fight off your draining.</span>" );
							((dynamic)target).WriteMsg( "<span class='boldannounce'>You feel something tugging across your body before subsiding.</span>" );
							this.draining = false;
							this.essence_drained = 0;
							return;
						}
						this.WriteMsg( "<span class='revenminor'>You begin siphoning essence from " + target + "'s soul.</span>" );

						if ( Convert.ToInt32( ((dynamic)target).stat ) != 2 ) {
							((dynamic)target).WriteMsg( "<span class='warning'>You feel a horribly unpleasant draining sensation as your grip on life weakens...</span>" );
						}
						this.reveal( 46 );
						this.stun( 46 );
						target.visible_message( "<span class='warning'>" + target + " suddenly rises slightly into the air, their skin turning an ashy gray.</span>" );
						this.Beam( target, "drain_life", "icons/effects/effects.dmi", 44 );

						if ( GlobalFuncs.do_after( this, 50, false, target ) ) {
							this.change_essence_amount( this.essence_drained, false, target );

							if ( this.essence_drained <= 90 && Convert.ToInt32( ((dynamic)target).stat ) != 2 ) {
								this.essence_regen_cap += 5;
								this.WriteMsg( "<span class='revenboldnotice'>The absorption of " + target + "'s living soul has increased your maximum essence level. Your new maximum essence is " + this.essence_regen_cap + ".</span>" );
							}

							if ( this.essence_drained > 90 ) {
								this.essence_regen_cap += 15;
								this.perfectsouls += 1;
								this.WriteMsg( "<span class='revenboldnotice'>The perfection of " + target + "'s soul has increased your maximum essence level. Your new maximum essence is " + this.essence_regen_cap + ".</span>" );
							}
							this.WriteMsg( "<span class='revennotice'>" + target + "'s soul has been considerably weakened and will yield no more essence for the time being.</span>" );
							target.visible_message( "<span class='warning'>" + target + " slumps onto the ground.</span>", "<span class='revenwarning'>Violets lights, dancing in your vision, getting clo--</span>" );
							this.drained_mobs.Add( target );
							((dynamic)target).death( 0 );
						} else {
							this.WriteMsg( "<span class='revenwarning'>" + ( target != null ? "" + target + " has" : "They have" ) + " been drawn out of your grasp. The link has been broken.</span>" );
							this.draining = false;
							this.essence_drained = 0;

							if ( target != null ) {
								target.visible_message( "<span class='warning'>" + target + " slumps onto the ground.</span>", "<span class='revenwarning'>Violets lights, dancing in your vision, receding--</span>" );
							}
							return;
						}
					} else {
						this.WriteMsg( "<span class='revenwarning'>You are not close enough to siphon " + ( target != null ? "" + target + "'s" : "their" ) + " soul. The link has been broken.</span>" );
						this.draining = false;
						this.essence_drained = 0;
						return;
					}
				}
			}
			this.draining = false;
			this.essence_drained = 0;
			return;
		}

		// Function from file: revenant.dm
		public void update_spooky_icon(  ) {
			
			if ( this.revealed ) {
				
				if ( Lang13.Bool( this.notransform ) ) {
					
					if ( this.draining ) {
						this.icon_state = this.icon_drain;
					} else {
						this.icon_state = this.icon_stun;
					}
				} else {
					this.icon_state = this.icon_reveal;
				}
			} else {
				this.icon_state = this.icon_idle;
			}

			if ( this.ghostimage != null ) {
				this.ghostimage.icon_state = this.icon_state;
				GlobalFuncs.updateallghostimages();
			}
			return;
		}

		// Function from file: revenant.dm
		public void stun( int time = 0 ) {
			
			if ( !( this != null ) ) {
				return;
			}

			if ( time <= 0 ) {
				return;
			}
			this.notransform = 1;

			if ( !( this.unstun_time != 0 ) ) {
				this.WriteMsg( "<span class='revendanger'>You cannot move!</span>" );
				this.unstun_time = Game13.time + time;
			} else {
				this.WriteMsg( "<span class='revenwarning'>You cannot move!</span>" );
				this.unstun_time = this.unstun_time + time;
			}
			this.update_spooky_icon();
			return;
		}

		// Function from file: revenant.dm
		public void reveal( int time = 0 ) {
			
			if ( !( this != null ) ) {
				return;
			}

			if ( time <= 0 ) {
				return;
			}
			this.revealed = true;
			this.invisibility = 0;
			this.incorporeal_move = 0;

			if ( !( this.unreveal_time != 0 ) ) {
				this.WriteMsg( "<span class='revendanger'>You have been revealed!</span>" );
				this.unreveal_time = Game13.time + time;
			} else {
				this.WriteMsg( "<span class='revenwarning'>You have been revealed!</span>" );
				this.unreveal_time = this.unreveal_time + time;
			}
			this.update_spooky_icon();
			return;
		}

		// Function from file: revenant.dm
		public override bool Life(  ) {
			this.ear_damage = 0;
			this.ear_deaf = 0;

			if ( this.revealed && this.essence <= 0 ) {
				this.death();
			}

			if ( this.unreveal_time != 0 && Game13.time >= this.unreveal_time ) {
				this.unreveal_time = 0;
				this.revealed = false;
				this.incorporeal_move = 3;
				this.invisibility = 50;
				this.WriteMsg( "<span class='revenboldnotice'>You are once more concealed.</span>" );
			}

			if ( this.unstun_time != 0 && Game13.time >= this.unstun_time ) {
				this.unstun_time = 0;
				this.notransform = 0;
				this.WriteMsg( "<span class='revenboldnotice'>You can move again!</span>" );
			}

			if ( this.essence_regenerating && !this.inhibited && this.essence < this.essence_regen_cap ) {
				this.essence = Num13.MinInt( this.essence_regen_cap, this.essence + this.essence_regen_amount );
			}
			this.update_spooky_icon();
			base.Life();
			return false;
		}

	}

}