// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Retaliate : Mob_Living_SimpleAnimal_Hostile {

		public ByTable enemies = new ByTable();
		public bool hostile = false;

		public Mob_Living_SimpleAnimal_Hostile_Retaliate ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: retaliate.dm
		public override bool adjustBruteLoss( dynamic amount = null, string damage_type = null ) {
			base.adjustBruteLoss( (object)(amount), damage_type );
			this.Retaliate();
			return false;
		}

		// Function from file: retaliate.dm
		public virtual bool Retaliate(  ) {
			ByTable around = null;
			Ent_Dynamic A = null;
			Ent_Dynamic M = null;
			Ent_Dynamic M2 = null;
			Mob_Living_SimpleAnimal_Hostile_Retaliate H = null;

			
			if ( Lang13.Bool( this.stat ) ) {
				return false;
			}
			around = Map13.FetchInView( this.vision_range, this );

			foreach (dynamic _a in Lang13.Enumerate( around, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( A == this ) {
					continue;
				}

				if ( A is Mob_Living ) {
					M = A;

					if ( !( this.attack_same != 0 ) && ((dynamic)M).faction != this.faction ) {
						this.enemies.Or( M );
					}
				} else if ( A is Obj_Mecha ) {
					M2 = A;

					if ( Lang13.Bool( ((dynamic)M2).occupant ) ) {
						this.enemies.Or( M2 );
						this.enemies.Or( ((dynamic)M2).occupant );
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( around, typeof(Mob_Living_SimpleAnimal_Hostile_Retaliate) )) {
				H = _b;
				

				if ( !( this.attack_same != 0 ) && !( H.attack_same != 0 ) && H.faction == this.faction ) {
					H.enemies.Or( this.enemies );
				}
			}
			return false;
		}

		// Function from file: retaliate.dm
		public override ByTable ListTargets(  ) {
			ByTable see = null;

			
			if ( this.hostile ) {
				return base.ListTargets();
			}

			if ( !( this.enemies.len != 0 ) ) {
				return new ByTable();
			}
			see = base.ListTargets();
			see.And( this.enemies );
			return see;
		}

		// Function from file: retaliate.dm
		public override dynamic Found( Ent_Static A = null ) {
			Ent_Static L = null;
			Ent_Static M = null;

			
			if ( A is Mob_Living ) {
				L = A;

				if ( !Lang13.Bool( ((dynamic)L).stat ) ) {
					this.stance = 3;
					return L;
				} else {
					this.enemies.Remove( L );
				}
			} else if ( A is Obj_Mecha ) {
				M = A;

				if ( Lang13.Bool( ((dynamic)M).occupant ) ) {
					this.stance = 3;
					return A;
				}
			}
			return null;
		}

	}

}