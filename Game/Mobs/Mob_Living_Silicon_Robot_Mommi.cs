// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon_Robot_Mommi : Mob_Living_Silicon_Robot {

		public bool keeper = false;
		public bool picked = false;
		public string subtype = "keeper";
		public dynamic inv_tool = null;
		public string prefix = "Mobile MMI";
		public string damage_control_network = "Damage Control";
		public dynamic static_choice = "static";
		public ByTable static_choices = new ByTable(new object [] { "static", "letter", "blank" });
		public dynamic tool_state = null;
		public dynamic head_state = null;
		public ByTable overlays_hats = new ByTable( 2 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "Mobile MMI";
			this.maxHealth = 60;
			this.health = 60;
			this.pass_flags = 1;
			this.mob_swap_flags = 63;
			this.modtype = "robot";
			this.icon_state = "mommi";
		}

		// Function from file: mommi.dm
		public Mob_Living_Silicon_Robot_Mommi(dynamic loc = null, bool? syndie = null, bool? unfinished = null, string startup_sound = null) : base((object)(loc), syndie, unfinished, "sound/misc/interference.ogg") {
			this.spark_system = new Effect_Effect_System_SparkSpread();
			this.spark_system.set_up( 5, 0, this );
			this.spark_system.attach( this );
			this.ident = Rand13.Int( 1, 999 );
			this.updatename();
			this.updateicon();

			if ( !Lang13.Bool( this.cell ) ) {
				this.cell = new Obj_Item_Weapon_Cell( this );
				this.cell.maxcharge = 7500;
				this.cell.charge = 7500;
			}

			this.module = new Obj_Item_Weapon_RobotModule_Mommi( this );
			this.laws = Lang13.Call( GlobalVars.mommi_base_law_type );

			if ( !( this.laws is AiLaws_Keeper ) ) {
				this.connected_ai = GlobalFuncs.select_active_ai_with_fewest_borgs();
			} else {
				this.keeper = true;
				this.connected_ai = null;
				this.scrambledcodes = true;
			}

			if ( this.connected_ai != null ) {
				this.connected_ai.connected_robots.Add( this );
				this.lawsync();
				this.lawupdate = true;
			} else {
				this.lawupdate = false;
			}

			if ( !this.scrambledcodes && !( this.camera != null ) ) {
				this.camera = new Obj_Machinery_Camera( this );
				this.camera.c_tag = this.real_name;
				this.camera.network = new ByTable(new object [] { "SS13" });

				if ( this.wires.IsCameraCut() != 0 ) {
					this.camera.status = false;
				}
			}

			if ( this.connected_ai != null && this.keeper ) {
				GlobalFuncs.to_chat( typeof(Game13), "<span class='warning'>ASSERT FAILURE: connected_ai && keeper in mommi.dm</span>" );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_head( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic head = null;
			Image overhats = null;
			Image bloodsies = null;

			
			if ( Lang13.Bool( this.head_state ) ) {
				head = this.head_state;
				overhats = new Image( ( Lang13.Bool( head.icon_override ) ? head.icon_override : "icons/mob/head.dmi" ), null, "" + head.icon_state );

				if ( head.blood_DNA != null && head.blood_DNA.len != 0 ) {
					bloodsies = new Image( "icons/effects/blood.dmi", null, "helmetblood" );
					bloodsies.color = head.blood_color;
					overhats.overlays.Add( bloodsies );
				}
				this.overlays_hats[1] = overhats;
			} else {
				this.overlays_hats[1] = null;
			}

			if ( update_icons == true ) {
				this.updateicon();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void updateicon(  ) {
			double overlay_layer = 0;
			Image I = null;

			this.overlays.len = 0;
			this.icon_state = this.subtype;

			if ( this.opened ) {
				
				if ( this.wiresexposed ) {
					this.overlays.Add( "ov-openpanel +w" );
				} else if ( Lang13.Bool( this.cell ) ) {
					this.overlays.Add( "ov-openpanel +c" );
				} else {
					this.overlays.Add( "ov-openpanel -c" );
				}
			}
			overlay_layer = 11;

			if ( this.layer != GlobalVars.MOB_LAYER ) {
				overlay_layer = 2.2;
			}
			this.overlays.Add( new Image( this.icon, "eyes-" + this.subtype + ( this.emagged != 0 ? "-emagged" : "" ), overlay_layer ) );

			if ( Lang13.Bool( this.anchored ) ) {
				this.overlays.Add( new Image( this.icon, "" + this.subtype + "-park", overlay_layer ) );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.overlays_hats, typeof(Image) )) {
				I = _b;
				

				switch ((string)( this.subtype )) {
					case "mommi":
						I.pixel_y = -8;
						break;
					case "hovermommi":
						I.pixel_y = -5;
						break;
					case "keeper":
						I.pixel_y = -7;
						break;
					case "repairbot":
						I.pixel_y = -14;
						break;
					case "replicator":
						I.pixel_y = -10;
						break;
					case "mommiprime":
						I.pixel_y = -7;
						break;
					case "scout":
						I.pixel_y = -15;
						break;
				}
				this.overlays.Add( I );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void regenerate_icons(  ) {
			base.regenerate_icons();
			this.update_inv_head( false );
			this.update_hud();
			return;
		}

		// Function from file: say.dm
		public override bool handle_inherent_channels( Game_Data speech = null, string message_mode = null ) {
			bool _default = false;

			dynamic T = null;
			string msg = null;
			string interior_message = null;
			string rendered = null;
			dynamic S = null;
			dynamic test = null;

			_default = base.handle_inherent_channels( speech, message_mode );

			if ( _default ) {
				return _default;
			}

			if ( this.keeper ) {
				((dynamic)speech).message = GlobalFuncs.trim( ((dynamic)speech).message );

				if ( !Lang13.Bool( ((dynamic)speech).message ) ) {
					return _default;
				}
				T = GlobalFuncs.get_turf( this );
				msg = ( !Lang13.Bool( T ) ? "Nullspace" : "" + T.x + "," + T.y + "," + T.z );
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( this ) + " (@" + msg + ") " + this.damage_control_network + ": " + String13.HtmlEncode( ((dynamic)speech).message ) ) ) );
				interior_message = this.say_quote( "\"" + String13.HtmlEncode( ((dynamic)speech).message ) + "\"" );
				rendered = "<i><span class='mommi game say'>" + this.damage_control_network + ", <span class='name'>" + this.name + "</span> <span class='message'>" + interior_message + "</span></span></i>";

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					S = _a;
					
					test = S;

					if ( test is Mob_Living_Silicon_Robot_Mommi && test.keeper || S is Mob_Dead_Observer ) {
						GlobalFuncs.handle_render( S, rendered, this );
					}
				}
				return true;
			}
			return _default;
		}

		// Function from file: say.dm
		public override string say_quote( dynamic text = null ) {
			string ending = null;

			ending = String13.SubStr( text, Lang13.Length( text ), 0 );

			if ( ending == "?" ) {
				return "queries, " + text;
			} else if ( ending == "!" ) {
				return "declares, " + text;
			}
			return "states, " + text;
		}

		// Function from file: mommi_movement.dm
		public override int Process_Spacemove( bool? check_drift = null, bool? ignore_slip = null ) {
			Obj_Item_Weapon_Tank_Jetpack J = null;

			
			if ( this.module != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.module.modules, typeof(Obj_Item_Weapon_Tank_Jetpack) )) {
					J = _a;
					

					if ( J != null && J is Obj_Item_Weapon_Tank_Jetpack ) {
						
						if ( J.allow_thrust( 0.01 ) ) {
							return 1;
						}
					}
				}
			}

			if ( base.Process_Spacemove( check_drift, ignore_slip ) != 0 ) {
				return 1;
			}
			return 0;
		}

		// Function from file: mommi_movement.dm
		public override double? Process_Spaceslipping( double? prob_slip = null ) {
			prob_slip = prob_slip ?? 5;

			return 0;
		}

		// Function from file: mommi.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			base.Move( (object)(NewLoc), Dir, step_x, step_y );
			return false;
		}

		// Function from file: mommi.dm
		public override void radio_menu(  ) {
			this.v_radio.interact( this );
			return;
		}

		// Function from file: mommi.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string t1 = null;
			dynamic O = null;
			dynamic O2 = null;
			dynamic TS = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( Task13.User != null && this != Task13.User ) {
				return null;
			}

			if ( Lang13.Bool( href_list["mach_close"] ) ) {
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
				return null;
			}

			if ( Lang13.Bool( href_list["showalerts"] ) ) {
				this.robot_alerts();
				return null;
			}

			if ( Lang13.Bool( href_list["mod"] ) ) {
				O = Lang13.FindObj( href_list["mod"] );

				if ( Lang13.Bool( O ) ) {
					((Obj_Item)O).attack_self( this );
				}
			}

			if ( Lang13.Bool( href_list["act"] ) ) {
				O2 = Lang13.FindObj( href_list["act"] );

				if ( !Lang13.Bool( Lang13.FindIn( O2, this.module.modules ) ) && O2 != this.module.emag ) {
					return null;
				}
				TS = this.tool_state;

				if ( Lang13.Bool( this.tool_state ) ) {
					this.contents.Remove( this.tool_state );

					if ( this.client != null ) {
						this.client.screen.Remove( this.tool_state );
					}
				}
				this.tool_state = O2;
				O2.layer = 20;
				this.contents.Add( O2 );
				this.inv_tool.icon_state = "inv1 +a";
				this.module_active = this.tool_state;

				if ( Lang13.Bool( TS ) && TS is Obj_Item ) {
					
					if ( Lang13.Bool( this.is_in_modules( TS ) ) ) {
						TS.loc = this.module;
					} else {
						TS.layer = Lang13.Initial( TS, "layer" );
						TS.loc = this.loc;
					}
				}
				this.installed_modules();
			}
			return null;
		}

		// Function from file: mommi.dm
		public override void installed_modules(  ) {
			string dat = null;
			dynamic obj = null;

			
			if ( this.weapon_lock ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>Weapon lock active, unable to use modules! Count:" + this.weaponlock_time + "</span>" );
				return;
			}

			if ( !( this.module != null ) ) {
				this.pick_module();
				return;
			}

			if ( !this.picked ) {
				this.choose_icon();
				return;
			}
			dat = "<HEAD><TITLE>Modules</TITLE><META HTTP-EQUIV='Refresh' CONTENT='10'></HEAD><BODY>\n";
			dat += new Txt( @"<BR>
	<BR>
	<B>Activated Modules</B>
	<BR>
	Sight Mode: <A HREF=?src=" ).Ref( this ).str( ";vision=0>" ).item( ( this.sensor_mode != 0 ? "" + GlobalVars.vision_types_list[this.sensor_mode] : "No sight module enabled" ) ).str( "</A><BR>\n	Utility Module: " ).item( ( Lang13.Bool( this.tool_state ) ? new Txt( "<A HREF=?src=" ).Ref( this ).str( ";mod=" ).Ref( this.tool_state ).str( ">" ).item( this.tool_state ).str( "</A>" ).ToString() : "No module selected" ) ).str( "<BR>\n	<BR>\n	<B>Installed Modules</B><BR><BR>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( this.module.modules )) {
				obj = _a;
				

				if ( !Lang13.Bool( obj ) ) {
					dat += "<B>Resource depleted</B><BR>";
				} else if ( this.activated( obj ) ) {
					dat += "" + obj + ": <B>Activated</B><BR>";
				} else {
					dat += new Txt().item( obj ).str( ": <A HREF=?src=" ).Ref( this ).str( ";act=" ).Ref( obj ).str( ">Activate</A><BR>" ).ToString();
				}
			}

			if ( this.emagged != 0 ) {
				
				if ( this.activated( this.module.emag ) ) {
					dat += "" + this.module.emag + ": <B>Activated</B><BR>";
				} else {
					dat += new Txt().item( this.module.emag ).str( ": <A HREF=?src=" ).Ref( this ).str( ";act=" ).Ref( this.module.emag ).str( ">Activate</A><BR>" ).ToString();
				}
			}
			Interface13.Browse( this, dat, "window=robotmod&can_close=1" );
			GlobalFuncs.onclose( this, "robotmod" );
			return;
		}

		// Function from file: mommi.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			int randn = 0;
			dynamic found = null;
			dynamic TS = null;
			dynamic found2 = null;
			dynamic TS2 = null;

			this.add_fingerprint( a );

			if ( this.opened && !this.wiresexposed && !( a is Mob_Living_Silicon ) ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					this.cell.updateicon();
					((Ent_Static)this.cell).add_fingerprint( a );
					((Mob)a).put_in_active_hand( this.cell );
					GlobalFuncs.to_chat( a, new Txt( "You remove " ).the( this.cell ).item().str( "." ).ToString() );
					this.cell = null;
					this.updateicon();
					return null;
				}
			}

			if ( !( a is Mob_Living_Silicon ) ) {
				
				dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
				if ( _a=="disarm" ) {
					a.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Disarmed " + this.name + " (" + this.ckey + ")</font>" );
					this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been disarmed by " + a.name + " (" + a.ckey + ")</font>" );
					GlobalFuncs.log_admin( "ATTACK: " + a.name + " (" + a.ckey + ") disarmed " + this.name + " (" + this.ckey + ")" );
					GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + a.name + " (" + a.ckey + ") disarmed " + this.name + " (" + this.ckey + ")</font>" ) ) );
					randn = Rand13.Int( 1, 100 );

					if ( randn <= 25 ) {
						this.weakened = 3;
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						this.visible_message( "<span class='danger'>" + a + " has pushed " + this + "!</span>" );
						found = Lang13.FindIn( this.tool_state, this.module.modules );

						if ( !Lang13.Bool( found ) ) {
							TS = this.tool_state;
							this.drop_item( TS );

							if ( Lang13.Bool( TS ) && TS.loc != null ) {
								this.visible_message( "<span class='warning'><B>" + this + "'s robotic arm loses grip on what it was holding</span>" );
							}
						}
						return null;
					}

					if ( randn <= 50 ) {
						found2 = Lang13.FindIn( this.tool_state, this.module.modules );

						if ( !Lang13.Bool( found2 ) ) {
							TS2 = this.tool_state;
							this.drop_item( TS2 );
							GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
							this.visible_message( "<span class='danger'>" + a + " has disarmed " + this + "!</span>" );
						} else {
							GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
							this.visible_message( "<span class='danger'>" + a + " attempted to disarm " + this + "!</span>" );
						}
						return null;
					}
				} else if ( _a=="help" ) {
					this.help_shake_act( a );
					return null;
				}
			}
			return null;
		}

		// Function from file: mommi.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic coil = null;
			dynamic O = null;
			ByTable limbs = null;
			double newlimb = 0;
			dynamic limb_to_spawn = null;
			dynamic U = null;

			
			if ( a is Obj_Item_Stack_CableCoil && this.wiresexposed ) {
				coil = a;
				this.adjustFireLoss( -30 );
				this.updatehealth();
				coil.use( 1 );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, b ) )) {
					O = _a;
					
					O.show_message( "<span class='warning'>" + b + " has fixed some of the burnt wires on " + this + "!</span>", 1 );
				}
			} else if ( a is Obj_Item_Weapon_Crowbar ) {
				
				if ( this.stat == 2 ) {
					GlobalFuncs.to_chat( b, "You pop the MMI off the base." );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						GlobalFuncs.qdel( this );
						return;
					}));
					return null;
				}

				if ( this.opened ) {
					
					if ( Lang13.Bool( this.mmi ) && this.wiresexposed && this.wires.IsAllCut() ) {
						GlobalFuncs.to_chat( b, new Txt( "You jam the crowbar into " ).the( this ).item().str( " and begin levering " ).item( this.mmi ).str( "." ).ToString() );

						if ( GlobalFuncs.do_after( b, this, 3 ) ) {
							GlobalFuncs.to_chat( b, "You damage some parts of the casing, but eventually manage to rip out " + this.mmi + "!" );
							limbs = new ByTable(new object [] { typeof(Obj_Item_RobotParts_LLeg), typeof(Obj_Item_RobotParts_RLeg), typeof(Obj_Item_RobotParts_LArm), typeof(Obj_Item_RobotParts_RArm) });

							foreach (dynamic _b in Lang13.IterateRange( 1, Rand13.Int( 2, 4 ) )) {
								newlimb = _b;
								
								limb_to_spawn = Rand13.PickFromTable( limbs );
								limbs.Remove( limb_to_spawn );
								Lang13.Call( limb_to_spawn, this.loc );
							}
							GlobalFuncs.qdel( this );
							return null;
						}
					} else {
						GlobalFuncs.to_chat( b, "You close the cover." );
						this.opened = false;
						this.updateicon();
					}
				} else if ( this.locked ) {
					GlobalFuncs.to_chat( b, "The cover is locked and cannot be opened." );
				} else {
					GlobalFuncs.to_chat( b, "You open the cover." );
					this.opened = true;
					this.updateicon();
				}
			} else if ( a is Obj_Item_Weapon_Cell && this.opened ) {
				
				if ( this.wiresexposed ) {
					GlobalFuncs.to_chat( b, "Close the panel first." );
				} else if ( Lang13.Bool( this.cell ) ) {
					GlobalFuncs.to_chat( b, "There is a power cell already installed." );
				} else {
					b.drop_item( a, this );
					this.cell = a;
					GlobalFuncs.to_chat( b, "You insert the power cell." );
				}
				this.updateicon();
			} else if ( a is Obj_Item_Weapon_Wirecutters || a is Obj_Item_Device_Multitool ) {
				
				if ( this.wiresexposed ) {
					this.wires.Interact( b );
				} else {
					GlobalFuncs.to_chat( b, "You can't reach the wiring." );
				}
			} else if ( a is Obj_Item_Weapon_Screwdriver && this.opened && !Lang13.Bool( this.cell ) ) {
				this.wiresexposed = !this.wiresexposed;
				GlobalFuncs.to_chat( b, "The wires have been " + ( this.wiresexposed ? "exposed" : "unexposed" ) + "." );
				this.updateicon();
			} else if ( a is Obj_Item_Weapon_Screwdriver && this.opened && Lang13.Bool( this.cell ) ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.attackby( a, b );
				} else {
					GlobalFuncs.to_chat( b, "Unable to locate a radio." );
				}
				this.updateicon();
			} else if ( a is Obj_Item_Device_Encryptionkey && this.opened ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.attackby( a, b );
				} else {
					GlobalFuncs.to_chat( b, "Unable to locate a radio." );
				}
			} else if ( a is Obj_Item_Borg_Upgrade ) {
				U = a;

				if ( !this.opened ) {
					GlobalFuncs.to_chat( b, "You must access the borgs internals!" );
				} else if ( !( this.module != null ) && U.require_module ) {
					GlobalFuncs.to_chat( b, "The borg must choose a module before he can be upgraded!" );
				} else if ( Lang13.Bool( U.locked ) ) {
					GlobalFuncs.to_chat( b, "The upgrade is locked and cannot be used yet!" );
				} else {
					
					if ( U is Obj_Item_Borg_Upgrade_Reset ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>No.</span>" );
						return null;
					}

					if ( Lang13.Bool( U.action( this ) ) ) {
						GlobalFuncs.to_chat( b, "You apply the upgrade to " + this + "!" );
						b.drop_item( U, this );
					} else {
						GlobalFuncs.to_chat( b, "Upgrade error!" );
					}
				}
			} else if ( a is Obj_Item_Device_CameraBug ) {
				this.help_shake_act( b );
				return 0;
			} else {
				this.spark_system.start();
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: mommi.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( user == this && this.emagged != 1 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Nanotrasen Patented Anti-Emancipation Override initiated.</span>" );
				return true;
			}

			if ( base.emag_act( (object)(user) ) ) {
				return true;
			}
			this.remove_static_overlays();
			this.updateicon();
			this.keeper = false;
			return false;
		}

		// Function from file: mommi.dm
		public override void updatename( string prefix = null ) {
			dynamic changed_name = null;

			changed_name = "";

			if ( Lang13.Bool( this.custom_name ) ) {
				changed_name = this.custom_name;
			} else {
				changed_name = "" + this.prefix + " " + String13.NumberToString( this.ident );
			}
			this.real_name = changed_name;
			this.name = this.real_name;
			return;
		}

		// Function from file: mommi.dm
		public override void remove_screen_objs(  ) {
			base.remove_screen_objs();

			if ( Lang13.Bool( this.inv_tool ) ) {
				GlobalFuncs.returnToPool( this.inv_tool );

				if ( this.client != null ) {
					this.client.screen.Remove( this.inv_tool );
				}
				this.inv_tool = null;
			}
			return;
		}

		// Function from file: mommi.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic nmmi = null;
			dynamic T = null;

			this.remove_static_overlays();

			if ( Lang13.Bool( this.mmi ) ) {
				nmmi = this.mmi;
				T = GlobalFuncs.get_turf( this.loc );

				if ( Lang13.Bool( T ) ) {
					nmmi.loc = T;
				}

				if ( this.mind != null ) {
					this.mind.transfer_to( nmmi.brainmob );
				}
				this.mmi = null;
				nmmi.icon = "icons/obj/assemblies.dmi";
				nmmi.invisibility = 0;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: mommi.dm
		public override void pick_module( dynamic forced_module = null ) {
			ByTable modules = null;
			ByTable module_sprites = null;

			
			if ( this.module != null ) {
				return;
			}
			modules = new ByTable(new object [] { "MoMMI" });

			if ( modules.len != 0 ) {
				this.modtype = Interface13.Input( "Please, select a module!", "Robot", null, null, modules, InputType.Null | InputType.Any );
			} else {
				this.modtype = modules[0];
			}

			if ( !Lang13.Bool( this.modtype ) ) {
				return;
			}
			module_sprites = new ByTable( 0 );

			if ( this.module != null ) {
				return;
			}

			dynamic _a = this.modtype; // Was a switch-case, sorry for the mess.
			if ( _a=="MoMMI" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Standard( this );
				module_sprites["Basic"] = "mommi";
				module_sprites["Keeper"] = "keeper";
				module_sprites["Replicator"] = "replicator";
				module_sprites["RepairBot"] = "repairbot";
				module_sprites["Hover"] = "hovermommi";
				module_sprites["Prime"] = "mommiprime";
			}

			if ( this.custom_sprite ) {
				module_sprites["Custom"] = "" + this.ckey + "-" + this.modtype;
			}
			((dynamic)this.hands).icon_state = String13.ToLower( this.modtype );
			GlobalFuncs.feedback_inc( "mommi_" + String13.ToLower( this.modtype ), 1 );
			this.updatename();
			this.choose_icon( 6, module_sprites );
			this.base_icon = this.icon_state;
			return;
		}

		// Function from file: mommi.dm
		public override void choose_icon( int? triesleft = null, ByTable module_sprites = null ) {
			dynamic icontype = null;
			dynamic answer = null;

			icontype = Interface13.Input( "Select an icon!", "Mobile MMI", null, null, new ByTable(new object [] { "Basic", "Hover", "Keeper", "RepairBot", "Replicator", "Prime", "Scout" }), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( icontype ) ) {
				return;
			}

			dynamic _a = icontype; // Was a switch-case, sorry for the mess.
			if ( _a=="Replicator" ) {
				this.subtype = "replicator";
			} else if ( _a=="Keeper" ) {
				this.subtype = "keeper";
			} else if ( _a=="RepairBot" ) {
				this.subtype = "repairbot";
			} else if ( _a=="Hover" ) {
				this.subtype = "hovermommi";
			} else if ( _a=="Prime" ) {
				this.subtype = "mommiprime";
			} else if ( _a=="Scout" ) {
				this.subtype = "scout";
			} else {
				this.subtype = "mommi";
			}
			this.updateicon();
			answer = Interface13.Input( "Is this what you want?", "Mobile MMI", null, null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

			dynamic _b = answer; // Was a switch-case, sorry for the mess.
			if ( _b=="No" ) {
				this.choose_icon();
				return;
			}
			this.picked = true;
			return;
		}

		// Function from file: mommi.dm
		public override void generate_static_overlay(  ) {
			
			if ( !( this.static_overlays is ByTable ) ) {
				this.static_overlays = new ByTable();
			}
			return;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();

			if ( this.can_see_static() ) {
				this.add_static_overlays();
			}
			return null;
		}

		// Function from file: life.dm
		public override bool update_canmove(  ) {
			this.canmove = !( this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 || Lang13.Bool( this.locked_to ) || this.lockcharge == true || Lang13.Bool( this.anchored ) );
			return this.canmove;
		}

		// Function from file: life.dm
		public override void update_items(  ) {
			Obj I = null;

			
			if ( this.client != null ) {
				this.client.screen.Remove( this.contents );

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					I = _a;
					

					if ( I != null ) {
						
						if ( I != this.cell && I != this.v_radio && I != this.camera && I != this.mmi ) {
							this.client.screen.Add( I );
						}
					}
				}
			}

			if ( Lang13.Bool( this.tool_state ) ) {
				this.tool_state.screen_loc = "CENTER-1:16,SOUTH:5";
			}

			if ( Lang13.Bool( this.head_state ) ) {
				this.head_state.screen_loc = "WEST+4:14,SOUTH:5";
			}
			return;
		}

		// Function from file: life.dm
		public override bool handle_regular_hud_updates(  ) {
			Mind tra = null;
			Image I = null;
			dynamic cellcharge = null;

			this.handle_sensor_modes();

			switch ((int)( this.sensor_mode )) {
				case 1:
					GlobalFuncs.process_sec_hud( this, true );
					break;
				case 2:
					GlobalFuncs.process_med_hud( this );
					break;
			}

			if ( this.healths != null ) {
				
				if ( this.stat != 2 ) {
					
					dynamic _b = this.health; // Was a switch-case, sorry for the mess.
					if ( 60<=_b&&_b<=Double.PositiveInfinity ) {
						((dynamic)this.healths).icon_state = "health0";
					} else if ( 40<=_b&&_b<=60 ) {
						((dynamic)this.healths).icon_state = "health1";
					} else if ( 30<=_b&&_b<=40 ) {
						((dynamic)this.healths).icon_state = "health2";
					} else if ( 10<=_b&&_b<=20 ) {
						((dynamic)this.healths).icon_state = "health3";
					} else if ( 0<=_b&&_b<=10 ) {
						((dynamic)this.healths).icon_state = "health4";
					} else if ( 0<=_b&&_b<=0 ) {
						((dynamic)this.healths).icon_state = "health5";
					} else {
						((dynamic)this.healths).icon_state = "health6";
					}
				} else {
					((dynamic)this.healths).icon_state = "health7";
				}
			}

			if ( this.syndicate && this.client != null ) {
				
				if ( GlobalVars.ticker.mode.name == "traitor" ) {
					
					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.ticker.mode.traitors, typeof(Mind) )) {
						tra = _c;
						

						if ( Lang13.Bool( tra.current ) ) {
							I = new Image( "icons/mob/mob.dmi", tra.current, "traitor" );
							this.client.images.Add( I );
						}
					}
				}

				if ( this.connected_ai != null ) {
					this.connected_ai.connected_robots.Remove( this );
					this.connected_ai = null;
				}

				if ( this.mind != null ) {
					
					if ( !Lang13.Bool( this.mind.special_role ) ) {
						this.mind.special_role = "traitor";
						GlobalVars.ticker.mode.traitors.Add( this.mind );
					}
				}
			}

			if ( !this.can_see_static() ) {
				
				if ( this.static_overlays != null && this.static_overlays.len != 0 ) {
					this.remove_static_overlays();
				}
			}

			if ( this.cells != null ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					cellcharge = this.cell.charge / this.cell.maxcharge;

					dynamic _d = cellcharge; // Was a switch-case, sorry for the mess.
					if ( 0.75<=_d&&_d<=Double.PositiveInfinity ) {
						((dynamic)this.cells).icon_state = "charge4";
					} else if ( 0.5<=_d&&_d<=0.75 ) {
						((dynamic)this.cells).icon_state = "charge3";
					} else if ( 0.25<=_d&&_d<=0.5 ) {
						((dynamic)this.cells).icon_state = "charge2";
					} else if ( 0<=_d&&_d<=0.25 ) {
						((dynamic)this.cells).icon_state = "charge1";
					} else {
						((dynamic)this.cells).icon_state = "charge0";
					}
				} else {
					((dynamic)this.cells).icon_state = "charge-empty";
				}
			}

			if ( this.bodytemp != null ) {
				
				dynamic _e = this.bodytemperature; // Was a switch-case, sorry for the mess.
				if ( 335<=_e&&_e<=Double.PositiveInfinity ) {
					((dynamic)this.bodytemp).icon_state = "temp2";
				} else if ( 320<=_e&&_e<=335 ) {
					((dynamic)this.bodytemp).icon_state = "temp1";
				} else if ( 300<=_e&&_e<=320 ) {
					((dynamic)this.bodytemp).icon_state = "temp0";
				} else if ( 260<=_e&&_e<=300 ) {
					((dynamic)this.bodytemp).icon_state = "temp-1";
				} else {
					((dynamic)this.bodytemp).icon_state = "temp-2";
				}
			}

			if ( this.pullin != null ) {
				((dynamic)this.pullin).icon_state = "pull" + ( this.pulling != null ? true : false );
			}
			this.client.screen.Remove( GlobalVars.global_hud.blurry, GlobalVars.global_hud.druggy, GlobalVars.global_hud.vimpaired );

			if ( this.blind != null && this.stat != 2 ) {
				
				if ( Lang13.Bool( this.blinded ) ) {
					((dynamic)this.blind).layer = 18;
				} else {
					((dynamic)this.blind).layer = 0;

					if ( ( this.disabilities & 1 ) != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.vimpaired );
					}

					if ( Lang13.Bool( this.eye_blurry ) ) {
						this.client.screen.Add( GlobalVars.global_hud.blurry );
					}

					if ( this.druggy != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.druggy );
					}
				}
			}

			if ( this.stat != 2 ) {
				
				if ( Lang13.Bool( this.machine ) ) {
					
					if ( !( ((Ent_Static)this.machine).check_eye( this ) == true ) ) {
						this.reset_view( null );
					}
				} else if ( !this.client.adminobs && !this.isTeleViewing( this.client.eye ) ) {
					this.reset_view( null );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public override bool handle_regular_status_updates(  ) {
			
			if ( this.camera != null && !this.scrambledcodes ) {
				
				if ( this.stat == 2 || this.wires.IsCameraCut() != 0 ) {
					this.camera.status = false;
				} else {
					this.camera.status = true;
				}
			}
			this.health = this.maxHealth - ( this.getOxyLoss() + this.getFireLoss() + this.getBruteLoss() );

			if ( Convert.ToDouble( this.getOxyLoss() ) > 50 ) {
				this.Paralyse( 3 );
			}

			if ( this.sleeping != 0 ) {
				this.Paralyse( 3 );
				this.sleeping--;
			}

			if ( this.resting != 0 ) {
				this.Weaken( 5 );
			}

			if ( Convert.ToDouble( this.health ) <= 0 && this.stat != 2 ) {
				this.gib();
			}

			if ( this.stat != 2 ) {
				
				if ( this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 ) {
					this.stat = 1;

					if ( this.stunned > 0 ) {
						this.AdjustStunned( -1 );
					}

					if ( this.weakened > 0 ) {
						this.AdjustWeakened( -1 );
					}

					if ( this.paralysis > 0 ) {
						this.AdjustParalysis( -1 );
						this.blinded = 1;
					} else {
						this.blinded = 0;
					}
				} else {
					this.stat = 0;
				}
			} else {
				this.blinded = 1;
				this.stat = 2;
			}

			if ( Lang13.Bool( this.stuttering ) ) {
				this.stuttering--;
			}

			if ( this.eye_blind != 0 ) {
				this.eye_blind--;
				this.blinded = 1;
			}

			if ( this.ear_deaf > 0 ) {
				this.ear_deaf--;
			}

			if ( this.ear_damage < 25 ) {
				this.ear_damage -= 0.05;
				this.ear_damage = Num13.MaxInt( ((int)( this.ear_damage )), 0 );
			}
			this.density = !( this.lying == true );

			if ( ( this.sdisabilities & 1 ) != 0 ) {
				this.blinded = 1;
			}

			if ( ( this.sdisabilities & 4 ) != 0 ) {
				this.ear_deaf = 1;
			}

			if ( Convert.ToDouble( this.eye_blurry ) > 0 ) {
				this.eye_blurry--;
				this.eye_blurry = Num13.MaxInt( 0, Convert.ToInt32( this.eye_blurry ) );
			}

			if ( this.druggy > 0 ) {
				this.druggy--;
				this.druggy = Num13.MaxInt( 0, this.druggy );
			}
			return true;
		}

		// Function from file: life.dm
		public override void use_power(  ) {
			
			if ( Lang13.Bool( this.cell ) ) {
				
				if ( Convert.ToDouble( this.cell.charge ) <= 0 ) {
					this.uneq_all();
				} else if ( Convert.ToDouble( this.cell.charge ) <= 100 ) {
					this.uneq_all();
					this.cell.use( 1 );
				} else {
					
					if ( this.sensor_mode != 0 ) {
						this.cell.use( 5 );
					}

					if ( Lang13.Bool( this.tool_state ) ) {
						this.cell.use( 5 );
					}
					this.cell.use( 1 );
					this.blinded = 0;
					this.stat = 0;
				}
			} else {
				this.uneq_all();
				this.stat = 1;
			}
			return;
		}

		// Function from file: life.dm
		public override void clamp_values(  ) {
			this.SetParalysis( Num13.MinInt( this.paralysis, 30 ) );
			this.sleeping = 0;
			this.adjustBruteLoss( 0 );
			this.adjustToxLoss( 0 );
			this.adjustOxyLoss( 0 );
			this.adjustFireLoss( 0 );
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.monkeyizing ) {
				return false;
			}
			this.blinded = null;
			this.clamp_values();
			this.handle_regular_status_updates();

			if ( this.client != null ) {
				this.handle_regular_hud_updates();
				this.update_items();
			}

			if ( this.stat != 2 ) {
				this.use_power();
				this.process_killswitch();
				this.process_locks();
			}
			this.update_canmove();
			this.handle_beams();
			return false;
		}

		// Function from file: vgstation13.dme
		public override void lawsync(  ) {
			this.laws_sanity_check();
			return;
		}

		// Function from file: laws.dm
		public override void statelaws(  ) {
			string prefix = null;
			int number = 0;
			int? index = null;
			dynamic law = null;
			string num = null;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			prefix = ";";

			if ( this.keeper ) {
				prefix = ":b";
			}
			this.say( prefix + "Current Active Laws:" );
			number = 1;
			Task13.Sleep( 10 );

			if ( Lang13.Bool( this.laws.zeroth ) ) {
				
				if ( this.lawcheck[1] == "Yes" ) {
					this.say( "" + prefix + "0. " + this.laws.zeroth );
					Task13.Sleep( 10 );
				}
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.laws.ion.len) {
				law = this.laws.ion[index];
				num = GlobalFuncs.ionnum();

				if ( Lang13.Length( law ) > 0 ) {
					
					if ( this.ioncheck[index] == "Yes" ) {
						this.say( "" + prefix + num + ". " + law );
						Task13.Sleep( 10 );
					}
				}
				index++;
			}
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.laws.inherent.len) {
				law2 = this.laws.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					
					if ( this.lawcheck[( index2 ??0) + 1] == "Yes" ) {
						this.say( "" + prefix + number + ". " + law2 );
						Task13.Sleep( 10 );
					}
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.laws.supplied.len) {
				law3 = this.laws.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					
					if ( this.lawcheck.len >= number + 1 ) {
						
						if ( this.lawcheck[number + 1] == "Yes" ) {
							this.say( "" + prefix + number + ". " + law3 );
							Task13.Sleep( 10 );
						}
						number++;
					}
				}
				index3++;
			}
			return;
		}

		// Function from file: laws.dm
		public override void laws_sanity_check(  ) {
			
			if ( !Lang13.Bool( this.laws ) ) {
				this.laws = Lang13.Call( GlobalVars.mommi_base_law_type );
			}
			return;
		}

		// Function from file: inventory.dm
		public override dynamic attack_ui( dynamic slot = null ) {
			dynamic W = null;

			W = this.tool_state;

			if ( W is Obj_Item ) {
				
				if ( this.equip_to_slot( W, slot ) ) {
					this.update_items();
				} else {
					GlobalFuncs.to_chat( this, "<span class='warning'>You are unable to equip that.</span>" );
				}
			}
			return null;
		}

		// Function from file: inventory.dm
		public override bool equip_to_slot( dynamic W = null, dynamic slot = null, bool? redraw_mob = null ) {
			redraw_mob = redraw_mob ?? true;

			dynamic wearing = null;

			
			if ( !Lang13.Bool( slot ) ) {
				return false;
			}

			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( !( ( ( W.slot_flags ??0) & 64 ) != 0 ) ) {
				return false;
			}

			if ( W == this.tool_state ) {
				
				if ( Lang13.Bool( this.is_in_modules( this.tool_state ) ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You cannot equip a module to your head.</span>" );
					return false;
				}

				if ( this.client != null ) {
					this.client.screen.Remove( this.tool_state );
				}
				this.tool_state = null;
				this.deselect_module( "tool_slot" );
				this.inv_tool.icon_state = "inv1";
				this.module_active = null;
			}

			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==11 ) {
				wearing = this.head_state;

				if ( Lang13.Bool( wearing ) ) {
					this.put_in_active_hand( wearing );
					this.tool_state = wearing;
					this.select_module( "tool_slot" );
				}
				this.head_state = W;
				((Obj_Item)W).equipped( this, slot );

				if ( this.client != null ) {
					this.client.screen.Add( this.head_state );
				}
			} else {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are trying to equip this item to an unsupported inventory slot. How the heck did you manage that? Stop it...</span>" );
				return false;
			}
			W.layer = 20;
			this.update_inv_head();
			return true;
		}

		// Function from file: inventory.dm
		public override void cycle_modules(  ) {
			return;
		}

		// Function from file: inventory.dm
		public override void toggle_module( dynamic module = null ) {
			
			if ( !Lang13.Bool( ((dynamic)"tool_slot").Contains( module ) ) ) {
				return;
			}

			if ( this.module_selected( module ) ) {
				this.deselect_module( module );
			} else if ( this.f_module_active( module ) ) {
				this.select_module( module );
			} else {
				this.deselect_module( this.get_selected_module() );
			}
			return;
		}

		// Function from file: inventory.dm
		public override void deselect_module( dynamic module = null ) {
			
			if ( !Lang13.Bool( ((dynamic)"tool_slot").Contains( module ) ) ) {
				return;
			}

			if ( this.module_active == this.tool_state ) {
				this.inv_tool.icon_state = "inv1";
				this.module_active = null;
				return;
			}
			return;
		}

		// Function from file: inventory.dm
		public override void select_module( dynamic module = null ) {
			
			if ( !Lang13.Bool( ((dynamic)"tool_slot").Contains( module ) ) ) {
				return;
			}

			if ( !this.f_module_active( module ) ) {
				return;
			}

			if ( this.module_active != this.tool_state ) {
				this.inv_tool.icon_state = "inv1 +a";
				this.module_active = this.tool_state;
				return;
			}
			return;
		}

		// Function from file: inventory.dm
		public override dynamic get_selected_module(  ) {
			
			if ( Lang13.Bool( this.tool_state ) && this.module_active == this.tool_state ) {
				return "tool_slot";
			}
			return 0;
		}

		// Function from file: inventory.dm
		[VerbInfo( name: "module active" )]
		public override bool f_module_active( dynamic module = null ) {
			
			if ( !Lang13.Bool( ((dynamic)"tool_slot").Contains( module ) ) ) {
				return false;
			}

			if ( Lang13.Bool( this.tool_state ) ) {
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public override bool module_selected( dynamic module = null ) {
			return module == this.get_selected_module();
		}

		// Function from file: inventory.dm
		public override bool activated( dynamic O = null ) {
			
			if ( this.tool_state == O ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: inventory.dm
		public override void uneq_all(  ) {
			this.module_active = null;
			this.unequip_sight();
			this.unequip_tool();
			this.unequip_head();
			return;
		}

		// Function from file: inventory.dm
		public override void uneq_active(  ) {
			dynamic TS = null;

			
			if ( this.module_active == null ) {
				return;
			}

			if ( this.contents.Contains( this.module_active ) && !this.module.modules.Contains( this.module_active ) && this.module_active != this.module.emag && this.candrop ) {
				TS = this.tool_state;
				this.drop_item( TS );
			}

			if ( this.tool_state == this.module_active ) {
				TS = this.tool_state;

				if ( !Lang13.Bool( this.is_in_modules( TS ) ) ) {
					this.drop_item();
				}

				if ( this.client != null ) {
					this.client.screen.Remove( this.tool_state );
				}
				this.contents.Remove( this.tool_state );
				this.module_active = null;
				this.tool_state = null;
				this.inv_tool.icon_state = "inv1";
			}

			if ( Lang13.Bool( this.is_in_modules( TS ) ) ) {
				((Ent_Dynamic)TS).forceMove( this.module );
			}
			this.hud_used.update_robot_modules_display();
			return;
		}

		// Function from file: inventory.dm
		public override bool drop_item( dynamic to_drop = null, dynamic Target = null, bool? force_drop = null ) {
			force_drop = force_drop ?? false;

			dynamic TS = null;
			dynamic T = null;

			
			if ( Lang13.Bool( this.tool_state ) ) {
				
				if ( Lang13.Bool( this.is_in_modules( this.tool_state ) ) ) {
					
					if ( this.contents.Contains( this.tool_state ) && this.module.modules.Contains( this.tool_state ) ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>This item cannot be dropped.</span>" );
						return false;
					}
				}

				if ( this.client != null ) {
					this.client.screen.Remove( this.tool_state );
				}
				this.contents.Remove( this.tool_state );
				TS = this.tool_state;

				if ( !Lang13.Bool( Target ) ) {
					Target = GlobalFuncs.get_turf( this );
				}
				TS.layer = Lang13.Initial( TS, "layer" );
				TS.loc = Target;

				if ( Target is Tile ) {
					T = Target;
					((Base_Static)T).Entered( this.tool_state , null );
				}
				((Obj_Item)TS).dropped( this );
				this.tool_state = null;
				this.module_active = null;
				this.inv_tool.icon_state = "inv1";
				this.update_items();
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public override bool drop_item_v(  ) {
			
			if ( this.stat == 0 && this.loc is Tile ) {
				return this.drop_item();
			}
			return false;
		}

		// Function from file: inventory.dm
		public override dynamic get_multitool( bool? if_active = null ) {
			if_active = if_active ?? false;

			
			if ( this.get_active_hand() is Obj_Item_Device_Multitool ) {
				return this.get_active_hand();
			}

			if ( if_active == true && this.tool_state is Obj_Item_Device_Multitool ) {
				return this.tool_state;
			}
			return null;
		}

		// Function from file: inventory.dm
		public override bool put_in_active_hand( dynamic W = null ) {
			
			if ( !Lang13.Bool( W ) ) {
				return false;
			}

			if ( Lang13.Bool( this.get_active_hand() ) ) {
				this.uneq_active();
			}
			return this.put_in_hands( W );
		}

		// Function from file: inventory.dm
		public override bool u_equip( dynamic W = null, bool? dropped = null ) {
			
			if ( W == this.tool_state ) {
				
				if ( this.module_active == this.tool_state ) {
					this.module_active = null;
				}
				this.unequip_tool();
			} else if ( W == this.head_state ) {
				this.unequip_head();
			}
			return false;
		}

		// Function from file: inventory.dm
		public override bool remove_from_mob( dynamic O = null ) {
			this.u_equip( O, false );

			if ( this.client != null ) {
				this.client.screen.Remove( O );
			}
			O.layer = Lang13.Initial( O, "layer" );
			O.screen_loc = null;
			return true;
		}

		// Function from file: inventory.dm
		public override bool put_in_hands( dynamic W = null ) {
			dynamic TS = null;

			
			if ( !Lang13.Bool( W ) ) {
				return false;
			}

			if ( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) <= 100 ) {
				this.drop_item( W );
				return false;
			}

			if ( W.type == typeof(Obj_Item_Device_MaterialSynth) ) {
				this.drop_item( W );
				return false;
			}

			if ( Lang13.Bool( this.tool_state ) ) {
				TS = this.tool_state;

				if ( !Lang13.Bool( this.is_in_modules( this.tool_state ) ) ) {
					this.drop_item( TS );
				} else {
					TS.loc = this.module;
				}
				this.contents.Remove( this.tool_state );

				if ( this.client != null ) {
					this.client.screen.Remove( this.tool_state );
				}
			}
			this.tool_state = W;
			W.layer = 20;
			((Ent_Dynamic)W).forceMove( this );
			this.module_active = this.tool_state;
			this.inv_tool.icon_state = "inv1 +a";
			this.update_items();
			return true;
		}

		// Function from file: login.dm
		public void remove_static_overlays(  ) {
			Image I = null;

			
			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.static_overlays, typeof(Image) )) {
					I = _a;
					
					this.client.images.Remove( I );
				}
			}
			this.static_overlays.len = 0;
			return;
		}

		// Function from file: login.dm
		public void add_static_overlays(  ) {
			Mob_Living living = null;
			dynamic chosen = null;

			this.remove_static_overlays();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living) )) {
				living = _a;
				

				if ( living is Mob_Living_Silicon ) {
					continue;
				}
				chosen = null;

				if ( living.static_overlays.Contains( this.static_choice ) ) {
					chosen = living.static_overlays[this.static_choice];
				} else {
					chosen = living.static_overlays[1];
				}
				this.static_overlays.Add( chosen );
				this.client.images.Add( chosen );
			}
			return;
		}

		// Function from file: login.dm
		public bool can_see_static(  ) {
			return this.keeper && !( this.emagged != 0 ) && !this.syndicate && GlobalVars.config != null && GlobalVars.config.mommi_static;
		}

		// Function from file: inventory.dm
		public void unequip_tool(  ) {
			dynamic TS = null;

			
			if ( Lang13.Bool( this.tool_state ) ) {
				TS = this.tool_state;

				if ( !Lang13.Bool( this.is_in_modules( TS ) ) ) {
					this.drop_item();
				}

				if ( this.client != null ) {
					this.client.screen.Remove( this.tool_state );
				}
				this.contents.Remove( this.tool_state );
				this.tool_state = null;
				this.inv_tool.icon_state = "inv1";

				if ( Lang13.Bool( this.is_in_modules( TS ) ) ) {
					((Ent_Dynamic)TS).forceMove( this.module );
				}
				this.hud_used.update_robot_modules_display();
			}
			return;
		}

		// Function from file: inventory.dm
		public void unequip_head(  ) {
			
			if ( Lang13.Bool( this.head_state ) ) {
				this.select_module( "tool_slot" );
				this.put_in_active_hand( this.head_state );

				if ( this.client != null ) {
					this.client.screen.Remove( this.head_state );
				}
				this.head_state = null;
				this.update_inv_head();
			}
			return;
		}

		// Function from file: inventory.dm
		public dynamic is_in_modules( dynamic W = null, bool? permit_sheets = null ) {
			permit_sheets = permit_sheets ?? false;

			Obj_Item_Stack_Sheet S = null;

			
			if ( Lang13.Bool( ((dynamic)this.module.emag.type).IsInstanceOfType( W ) ) ) {
				return this.module.emag;
			}

			if ( W is Obj_Item_Stack_Sheet ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.module.modules, typeof(Obj_Item_Stack_Sheet) )) {
					S = _a;
					

					if ( S.type == W.type ) {
						return ( permit_sheets == true ? ((dynamic)( 0 )) : ((dynamic)( S )) );
					}
				}
			} else {
				return this.module.modules.Contains( W );
			}
			return null;
		}

		// Function from file: inventory.dm
		public override dynamic get_equipped_items(  ) {
			return this.head_state;
		}

		// Function from file: inventory.dm
		public override ByTable get_all_slots(  ) {
			return new ByTable(new object [] { this.tool_state, this.head_state });
		}

		// Function from file: inventory.dm
		public override dynamic get_active_hand(  ) {
			return this.module_active;
		}

		// Function from file: examine.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string msg = null;
			dynamic I = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<EM>" ).item().str( "</EM>!\n" ).ToString();
			msg += "<p>It's like a crab, but it has a utility tool on one arm and a crude metal claw on the other.  That, and you doubt it'd survive in an ocean for very long.</p><span class='warning'>";

			if ( this.getBruteLoss() != 0 ) {
				
				if ( this.getBruteLoss() < 75 ) {
					msg += "It looks slightly dented.\n";
				} else {
					msg += "<B>It looks severely dented!</B>\n";
				}
			}

			if ( this.getFireLoss() != 0 ) {
				
				if ( this.getFireLoss() < 75 ) {
					msg += "It looks slightly charred.\n";
				} else {
					msg += "<B>It looks severely burnt and heat-warped!</B>\n";
				}
			}
			msg += "</span>";

			if ( Lang13.Bool( this.tool_state ) ) {
				I = this.tool_state;
				msg += new Txt( "Its utitility claw is gripping " ).icon( I ).str( " " ).item( ( I.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " " ).item( I.name ).str( ".\n" ).ToString();
			}

			if ( this.opened ) {
				msg += "<span class='warning'>Its cover is open and the power cell is " + ( Lang13.Bool( this.cell ) ? "installed" : "missing" ) + ".</span>\n";
			} else {
				msg += "Its cover is closed.\n";
			}

			switch ((int?)( this.stat )) {
				case 0:
					
					if ( !( this.client != null ) ) {
						msg += "It appears to be in stand-by mode.\n";
					}
					break;
				case 1:
					msg += "<span class='warning'>It doesn't seem to be responding.</span>\n";
					break;
				case 2:
					msg += "<span class='deadsay'>It looks completely unsalvageable.</span>\n";
					break;
			}
			msg += "*---------*</span>";
			GlobalFuncs.to_chat( user, msg );
			return null;
		}

		// Function from file: vgstation13.dme
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			type = type ?? 1;

			string param = null;
			int t1 = 0;
			dynamic M = null;
			dynamic A = null;
			dynamic M2 = null;
			dynamic A2 = null;
			dynamic M3 = null;
			dynamic A3 = null;
			string input = null;
			dynamic input2 = null;
			dynamic M4 = null;
			dynamic A4 = null;
			dynamic M5 = null;
			dynamic A5 = null;
			dynamic M6 = null;
			dynamic A6 = null;
			dynamic M7 = null;
			dynamic A7 = null;
			dynamic M8 = null;
			dynamic A8 = null;
			dynamic M9 = null;
			dynamic A9 = null;
			dynamic M10 = null;
			dynamic A10 = null;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( this.timestopped ) {
				return;
			}
			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( String13.FindIgnoreCase( act, "s", -1, 0 ) != 0 && !( String13.FindIgnoreCase( act, "_", -2, 0 ) != 0 ) ) {
				act = String13.SubStr( act, 1, Lang13.Length( act ) );
			}

			dynamic _k = act; // Was a switch-case, sorry for the mess.
			if ( _k=="help" ) {
				GlobalFuncs.to_chat( this, "Available emotes: aflap, bow, clap, custom, flap, twitch, twitch_s, salute, nod, deathgasp, me, glare, stare, shrug, beep, ping, buzz, look" );
				return;
			} else if ( _k=="salute" ) {
				M = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A = _a;
						

						if ( param == A.name ) {
							M = A;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> salutes to " + param + ".";
				} else {
					message = "<B>" + this + "</b> salutes.";
				}
				type = 1;
			} else if ( _k=="bow" ) {
				
				if ( !Lang13.Bool( this.locked_to ) ) {
					M2 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
							A2 = _b;
							

							if ( param == A2.name ) {
								M2 = A2;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M2 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> bows to " + param + ".";
					} else {
						message = "<B>" + this + "</B> bows.";
					}
				}
				type = 1;
			} else if ( _k=="shrug" ) {
				M3 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A3 = _c;
						

						if ( param == A3.name ) {
							M3 = A3;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M3 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> shrugs at " + param + ".";
				} else {
					message = "<B>" + this + "</B> shrugs.";
				}
				type = 1;
			} else if ( _k=="clap" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).item( this ).str( "</B> clangs " ).his_her_its_their().str( " utility claws together in a crude simulation of applause." ).ToString();
					type = 2;
				}
			} else if ( _k=="flap" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " utility arms as through they were wings." ).ToString();
					type = 2;
				}
			} else if ( _k=="aflap" ) {
				
				if ( !this.restrained() ) {
					message = "<B>" + this + "</B> flaps his utility arms ANGRILY!";
					type = 2;
				}
			} else if ( _k=="custom" ) {
				input = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Choose an emote to display.", null, null, null, null, InputType.Str | InputType.Null ) ), 1, 1024 );

				if ( !Lang13.Bool( input ) ) {
					return;
				}
				input2 = Interface13.Input( "Is this a visible or hearable emote?", null, null, null, new ByTable(new object [] { "Visible", "Hearable" }), InputType.Any );

				if ( input2 == "Visible" ) {
					type = 1;
				} else if ( input2 == "Hearable" ) {
					type = 2;
				} else {
					Interface13.Alert( "Unable to use this emote, must be either hearable or visible." );
					return;
				}
				message = "<B>" + this + "</B> " + input;
			} else if ( _k=="me" ) {
				
				if ( this.client != null ) {
					
					if ( ( this.client.prefs.muted & 1 ) != 0 ) {
						GlobalFuncs.to_chat( this, "You cannot send IC messages (muted)." );
						return;
					}

					if ( this.client.handle_spam_prevention( message, 1 ) ) {
						return;
					}
				}

				if ( Lang13.Bool( this.stat ) ) {
					return;
				}

				if ( !Lang13.Bool( message ) ) {
					return;
				} else {
					message = "<B>" + this + "</B> " + message;
				}
			} else if ( _k=="twitch" ) {
				message = "<B>" + this + "</B> twitches violently.";
				type = 1;
			} else if ( _k=="twitch_s" ) {
				message = "<B>" + this + "</B> twitches.";
				type = 1;
			} else if ( _k=="nod" ) {
				message = new Txt( "<B>" ).item( this ).str( "</B> bobs " ).his_her_its_their().str( " body in a rough approximation of nodding." ).ToString();
				type = 1;
			} else if ( _k=="deathgasp" ) {
				message = "<B>" + this + "</B> shudders violently for a moment, then becomes motionless, its eyes slowly darkening.";
				type = 1;
			} else if ( _k=="glare" ) {
				M4 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A4 = _d;
						

						if ( param == A4.name ) {
							M4 = A4;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M4 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> glares at " + param + " as best a robot spider can glare.";
				} else {
					message = "<B>" + this + "</B> glares as best a robot spider can glare.";
				}
			} else if ( _k=="stare" ) {
				M5 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A5 = _e;
						

						if ( param == A5.name ) {
							M5 = A5;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M5 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> stares at " + param + ".";
				} else {
					message = "<B>" + this + "</B> stares.";
				}
			} else if ( _k=="look" ) {
				M6 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _f in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A6 = _f;
						

						if ( param == A6.name ) {
							M6 = A6;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M6 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> looks at " + param + ".";
				} else {
					message = "<B>" + this + "</B> looks.";
				}
				type = 1;
			} else if ( _k=="beep" ) {
				M7 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _g in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A7 = _g;
						

						if ( param == A7.name ) {
							M7 = A7;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M7 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> beeps at " + param + ".";
				} else {
					message = "<B>" + this + "</B> beeps.";
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/twobeep.ogg", 50, 0 );
				type = 1;
			} else if ( _k=="ping" ) {
				M8 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _h in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A8 = _h;
						

						if ( param == A8.name ) {
							M8 = A8;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M8 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> pings at " + param + ".";
				} else {
					message = "<B>" + this + "</B> pings.";
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/Ping.ogg", 50, 0 );
				type = 1;
			} else if ( _k=="buzz" ) {
				M9 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _i in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A9 = _i;
						

						if ( param == A9.name ) {
							M9 = A9;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M9 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> buzzes at " + param + ".";
				} else {
					message = "<B>" + this + "</B> buzzes.";
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/buzz-sigh.ogg", 50, 0 );
				type = 1;
			} else if ( _k=="comment" ) {
				M10 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _j in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A10 = _j;
						

						if ( param == A10.name ) {
							M10 = A10;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M10 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> cheerily vocalizes at " + param + ".";
				} else {
					message = "<B>" + this + "</B> vocalizes.";
				}
				GlobalFuncs.playsound( this, GlobalFuncs.get_sfx( "mommicomment" ), 50, 0 );
				type = 1;
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				
				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					foreach (dynamic _l in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _l;
						
						O.show_message( message, type );
					}
				} else {
					
					foreach (dynamic _m in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						O2 = _m;
						
						O2.show_message( message, type );
					}
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			Ent_Static RC = null;

			
			if ( this.stat == 2 ) {
				return null;
			}

			if ( !( gibbed == true ) ) {
				this.emote( "deathgasp" );
			}
			this.stat = 2;
			this.update_canmove();

			if ( this.camera != null ) {
				this.camera.status = false;
			}

			if ( this.in_contents_of( typeof(Obj_Machinery_RechargeStation) ) ) {
				RC = this.loc;

				if ( Lang13.Bool( ((dynamic)RC).upgrading ) ) {
					((dynamic)RC).upgrading = 0;
					((dynamic)RC).upgrade_finished = -1;
				}
				((dynamic)RC).go_out();
			}

			if ( this.blind != null ) {
				((dynamic)this.blind).layer = 0;
			}
			this.sight |= 28;
			this.see_in_dark = 8;
			this.see_invisible = 45;
			this.updateicon();
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );
			}
			GlobalFuncs.sql_report_cyborg_death( this );
			return base.death( gibbed );
		}

		// Function from file: death.dm
		public override void dust(  ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "dust-r", 15 );
			new Obj_Effect_Decal_Remains_Robot( this.loc );

			if ( Lang13.Bool( this.mmi ) ) {
				GlobalFuncs.qdel( this.mmi );
			}
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			dynamic found = null;
			dynamic TS = null;

			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "gibbed-r", 15 );
			GlobalFuncs.robogibs( this.loc, this.viruses );
			GlobalVars.living_mob_list.Remove( this );
			GlobalVars.dead_mob_list.Remove( this );

			if ( this.module != null && this.module is Obj_Item_Weapon_RobotModule ) {
				found = Lang13.FindIn( this.tool_state, this.module.modules );

				if ( !Lang13.Bool( found ) && this.tool_state != this.module.emag ) {
					TS = this.tool_state;
					this.drop_item( TS );
				}
			}
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: ventcrawl.dm
		public override bool ventcrawl_carry(  ) {
			return true;
		}

		// Function from file: ventcrawl.dm
		public override bool can_ventcrawl(  ) {
			return true;
		}

		// Function from file: mommi.dm
		[Verb]
		[VerbInfo( name: "Examine", group: "IC" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public override void examination( Ent_Static A = null ) {
			
			if ( A is Mob && this.can_see_static() ) {
				GlobalFuncs.to_chat( Task13.User, "Your vision module can't determine any of " + A + "'s features." );
				return;
			}
			Lang13.SuperCall( A );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Toggle Parking Brake", desc: "Lock yourself in place", group: "Robot Commands" )]
		public void park(  ) {
			Mob_Living_Silicon_Robot_Mommi R = null;

			R = this;
			R.anchored = !Lang13.Bool( R.anchored );
			R.canmove = !Lang13.Bool( R.anchored );
			this.updateicon();
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Hide", desc: "Allows to hide beneath tables or certain items. Toggled on or off.", group: "Robot Commands" )]
		public void f_hide(  ) {
			Mob_Living_Silicon_Robot_Mommi R = null;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( this.stat != 0 ) {
				return;
			}
			R = this;

			if ( !R.canmove ) {
				return;
			}

			if ( this.layer != 2.2 ) {
				this.layer = 2.2;
				GlobalFuncs.to_chat( this, "<span class='notice'>You are now hiding.</span>" );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewersExcludeThis( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						GlobalFuncs.to_chat( O, "<B>" + this + " tries to hide itself!</B>" );
					}
				}
			} else {
				this.layer = GlobalVars.MOB_LAYER;
				GlobalFuncs.to_chat( this, "<span class='notice'>You have stopped hiding.</span>" );

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewersExcludeThis( null, this ) )) {
					O2 = _b;
					

					if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
						GlobalFuncs.to_chat( O2, "" + this + " slowly peeks up..." );
					}
				}
			}
			this.updateicon();
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Crawl through Vent", desc: "Enter an air vent and crawl through the pipe system.", group: "Robot Commands" )]
		public void ventcrawl(  ) {
			dynamic pipe = null;

			pipe = this.start_ventcrawl();

			if ( Lang13.Bool( pipe ) ) {
				this.handle_ventcrawl( pipe );
			}
			return;
		}

		// Function from file: login.dm
		[Verb]
		[VerbInfo( name: "Change Vision Filter", desc: "Change the filter on the system used to remove organics from your viewscreen.", group: "Robot Commands" )]
		public void toggle_statics(  ) {
			dynamic selected_style = null;

			
			if ( !this.can_see_static() ) {
				return;
			}
			selected_style = Interface13.Input( "Select a vision filter", "Vision Filter", null, null, this.static_choices, InputType.Null | InputType.Any );

			if ( this.static_choices.Contains( selected_style ) ) {
				this.static_choice = selected_style;
				this.add_static_overlays();
			}
			return;
		}

		// Function from file: inventory.dm
		[Verb]
		[VerbInfo( name: "quick-equip", hidden: true )]
		public void quick_equip(  ) {
			Mob_Living_Silicon_Robot_Mommi M = null;
			dynamic I = null;

			
			if ( !this.module_selected( "tool_slot" ) ) {
				return;
			}

			if ( this is Mob_Living_Silicon_Robot_Mommi ) {
				M = this;
				I = M.tool_state;

				if ( !Lang13.Bool( I ) ) {
					GlobalFuncs.to_chat( M, "<span class='notice'>You are not holding anything to equip.</span>" );
					return;
				}

				if ( M.equip_to_slot( I, 11 ) ) {
					this.update_items();
				} else {
					GlobalFuncs.to_chat( M, "<span class='warning'>You are unable to equip that.</span>" );
				}
			}
			return;
		}

	}

}