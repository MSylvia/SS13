// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Monkey : Mob_Living_Carbon {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.voice_name = "monkey";
			this.verb_say = "chimpers";
			this.pass_flags = 1;
			this.languages = 2;
			this.ventcrawler = 1;
			this.butcher_results = new ByTable().Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Monkey), 5 ).Set( typeof(Obj_Item_Stack_Sheet_Animalhide_Monkey), 1 );
			this.type_of_meat = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Monkey);
			this.gib_type = typeof(Obj_Effect_Decal_Cleanable_Blood_Gibs);
			this.unique_name = true;
			this.icon = "icons/mob/monkey.dmi";
			this.icon_state = "monkey1";
		}

		// Function from file: monkey.dm
		public Mob_Living_Carbon_Monkey ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_Organ_Internal I = null;

			this.verbs.Add( typeof(Mob_Living).GetMethod( "mob_sleep" ) );
			this.verbs.Add( typeof(Mob_Living).GetMethod( "lay_down" ) );
			this.gender = Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE });
			this.real_name = this.name;

			if ( GlobalVars.good_mutations.len != 0 ) {
				this.initialize();
			}
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Appendix() );
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Heart() );
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Brain() );

			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
				I = _a;
				
				I.Insert( this );
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hud_back( dynamic I = null ) {
			
			if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
				I.screen_loc = "CENTER-2:15,SOUTH:5";
				this.client.screen.Add( I );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hud_wear_mask( dynamic I = null ) {
			
			if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
				I.screen_loc = "CENTER-3:14,SOUTH:5";
				this.client.screen.Add( I );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hud_head( dynamic I = null ) {
			
			if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
				I.screen_loc = "CENTER-4:13,SOUTH:5";
				this.client.screen.Add( I );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_legcuffed(  ) {
			Image standing = null;

			this.remove_overlay( 5 );

			if ( Lang13.Bool( this.legcuffed ) ) {
				standing = new Image( "icons/mob/mob.dmi", null, "legcuff1", -5 );
				standing.pixel_y = 8;
				this.overlays_standing[5] = standing;
			}
			this.apply_overlay( 5 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_handcuffed(  ) {
			this.remove_overlay( 6 );

			if ( Lang13.Bool( this.handcuffed ) ) {
				this.overlays_standing[6] = new Image( "icons/mob/mob.dmi", null, "handcuff1", -6 );
				this.apply_overlay( 6 );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_fire( string fire_icon = null ) {
			base.update_fire( "Monkey_burning" );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_icons(  ) {
			Image I = null;

			this.overlays.Cut();
			this.icon_state = "monkey1";

			foreach (dynamic _a in Lang13.Enumerate( this.overlays_standing, typeof(Image) )) {
				I = _a;
				
				this.overlays.Add( I );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override bool regenerate_icons(  ) {
			
			if ( !base.regenerate_icons() ) {
				this.update_inv_wear_mask();
				this.update_inv_head();
				this.update_inv_back();
				this.update_icons();
				this.update_transform();
			}
			return false;
		}

		// Function from file: monkey.dm
		public override double check_eye_prot(  ) {
			double number = 0;
			dynamic MFP = null;

			number = base.check_eye_prot();

			if ( this.wear_mask is Obj_Item_Clothing_Mask ) {
				MFP = this.wear_mask;
				number += Convert.ToDouble( MFP.flash_protect );
			}
			return number;
		}

		// Function from file: monkey.dm
		public override double get_permeability_protection(  ) {
			double protection = 0;

			protection = 0;

			if ( Lang13.Bool( this.head ) ) {
				protection = 1 - Convert.ToDouble( this.head.permeability_coefficient );
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				protection = Num13.MaxInt( ((int)( 1 - Convert.ToDouble( this.wear_mask.permeability_coefficient ) )), ((int)( protection )) );
			}
			protection = protection / 7;
			return protection;
		}

		// Function from file: monkey.dm
		public override void help_shake_act( dynamic M = null ) {
			dynamic H = null;

			
			if ( Convert.ToDouble( this.health ) < 0 && M is Mob_Living_Carbon_Human ) {
				H = M;
				((Mob_Living_Carbon_Human)H).do_cpr( this );
			} else {
				base.help_shake_act( (object)(M) );
			}
			return;
		}

		// Function from file: monkey.dm
		public override dynamic acid_act( int acidpwr = 0, double? toxpwr = null, double? acid_volume = null ) {
			
			if ( Lang13.Bool( this.wear_mask ) ) {
				
				if ( !this.wear_mask.unacidable ) {
					((Ent_Static)this.wear_mask).acid_act( acidpwr );
					this.update_inv_wear_mask();
				} else {
					this.WriteMsg( "<span class='warning'>Your mask protects you from the acid.</span>" );
				}
				return null;
			}
			this.take_organ_damage( Num13.MinInt( ((int)( ( toxpwr ??0) * 6 )), ((int)( ( acid_volume ??0) * acidpwr / 10 )) ) );
			return null;
		}

		// Function from file: monkey.dm
		public override int assess_threat( Mob_Living_SimpleAnimal_Bot judgebot = null, string lasercolor = null ) {
			int threatcount = 0;

			
			if ( judgebot.emagged == 2 ) {
				return 10;
			}
			threatcount = 0;

			if ( !Lang13.Bool( lasercolor ) && Lang13.Bool( ((dynamic)judgebot).idcheck ) ) {
				threatcount += 4;
			}

			if ( Lang13.Bool( lasercolor ) ) {
				
				if ( lasercolor == "b" ) {
					
					if ( this.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag || this.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) {
						threatcount += 4;
					}
				}

				if ( lasercolor == "r" ) {
					
					if ( this.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag || this.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag ) {
						threatcount += 4;
					}
				}
				return threatcount;
			}

			if ( Lang13.Bool( ((dynamic)judgebot).weaponscheck ) ) {
				
				if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.l_hand ) ) ) {
					threatcount += 4;
				}

				if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.r_hand ) ) ) {
					threatcount += 4;
				}
			}

			if ( GlobalFuncs.isloyal( this ) ) {
				threatcount -= 1;
			}
			return threatcount;
		}

		// Function from file: monkey.dm
		public override bool canBeHandcuffed(  ) {
			return true;
		}

		// Function from file: monkey.dm
		public override bool reagent_check( dynamic R = null ) {
			return false;
		}

		// Function from file: monkey.dm
		public override bool IsAdvancedToolUser(  ) {
			return false;
		}

		// Function from file: monkey.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			switch ((int?)( severity )) {
				case 1:
					this.gib();
					return false;
					break;
				case 2:
					this.adjustBruteLoss( 60 );
					this.adjustFireLoss( 60 );
					this.adjustEarDamage( 30, 120 );
					break;
				case 3:
					this.adjustBruteLoss( 30 );

					if ( Rand13.PercentChance( 50 ) ) {
						this.Paralyse( 10 );
					}
					this.adjustEarDamage( 15, 60 );
					break;
			}
			this.updatehealth();
			return false;
		}

		// Function from file: monkey.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( null, "Intent: " + this.a_intent );
				Interface13.Stat( null, "Move Mode: " + this.m_intent );

				if ( this.client != null && this.mind != null ) {
					
					if ( this.mind.changeling != null ) {
						Interface13.Stat( "Chemical Storage", "" + this.mind.changeling.chem_charges + "/" + this.mind.changeling.chem_storage );
						Interface13.Stat( "Absorbed DNA", this.mind.changeling.absorbedcount );
					}
				}
			}
			return null;
		}

		// Function from file: monkey.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			int damage = 0;

			
			if ( base.attack_slime( user ) ) {
				damage = Rand13.Int( 5, 35 );

				if ( user.is_adult ) {
					damage = Rand13.Int( 20, 40 );
				}
				this.adjustBruteLoss( damage );
				this.updatehealth();
			}
			return false;
		}

		// Function from file: monkey.dm
		public override bool attack_animal( Mob_Living user = null ) {
			int damage = 0;

			
			if ( base.attack_animal( user ) ) {
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );

				dynamic _a = ((dynamic)user).melee_damage_type; // Was a switch-case, sorry for the mess.
				if ( _a=="brute" ) {
					this.adjustBruteLoss( damage );
				} else if ( _a=="fire" ) {
					this.adjustFireLoss( damage );
				} else if ( _a=="tox" ) {
					this.adjustToxLoss( damage );
				} else if ( _a=="oxy" ) {
					this.adjustOxyLoss( damage );
				} else if ( _a=="clone" ) {
					this.adjustCloneLoss( damage );
				} else if ( _a=="stamina" ) {
					this.adjustStaminaLoss( damage );
				}
				this.updatehealth();
			}
			return false;
		}

		// Function from file: monkey.dm
		public override bool attack_alien( dynamic user = null ) {
			int damage = 0;

			
			if ( base.attack_alien( (object)(user) ) ) {
				
				if ( user.a_intent == "harm" ) {
					
					if ( Rand13.PercentChance( 95 ) && Convert.ToDouble( this.health ) > 0 ) {
						GlobalFuncs.playsound( this.loc, "sound/weapons/slice.ogg", 25, 1, -1 );
						damage = Rand13.Int( 15, 30 );

						if ( damage >= 25 ) {
							damage = Rand13.Int( 20, 40 );

							if ( this.paralysis < 15 ) {
								this.Paralyse( Rand13.Int( 10, 15 ) );
							}
							this.visible_message( "<span class='danger'>" + user + " has wounded " + this.name + "!</span>", "<span class='userdanger'>" + user + " has wounded " + this.name + "!</span>" );
						} else {
							this.visible_message( "<span class='danger'>" + user + " has slashed " + this.name + "!</span>", "<span class='userdanger'>" + user + " has slashed " + this.name + "!</span>" );
						}

						if ( this.stat != 2 ) {
							this.adjustBruteLoss( damage );
							this.updatehealth();
						}
						GlobalFuncs.add_logs( user, this, "attacked" );
					} else {
						GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );
						this.visible_message( "<span class='danger'>" + user + " has attempted to lunge at " + this.name + "!</span>", "<span class='userdanger'>" + user + " has attempted to lunge at " + this.name + "!</span>" );
					}
				}

				if ( user.a_intent == "disarm" ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/pierce.ogg", 25, 1, -1 );

					if ( Rand13.PercentChance( 95 ) ) {
						this.Weaken( 10 );
						this.visible_message( "<span class='danger'>" + user + " has tackled down " + this.name + "!</span>", "<span class='userdanger'>" + user + " has tackled down " + this.name + "!</span>" );
					} else if ( this.drop_item() ) {
						this.visible_message( "<span class='danger'>" + user + " has disarmed " + this.name + "!</span>", "<span class='userdanger'>" + user + " has disarmed " + this.name + "!</span>" );
					}
					GlobalFuncs.add_logs( user, this, "disarmed" );
					this.updatehealth();
				}
			}
			return false;
		}

		// Function from file: monkey.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			int damage = 0;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}

			dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.help_shake_act( a );
			} else if ( _a=="grab" ) {
				this.grabbedby( a );
			} else if ( _a=="harm" ) {
				((Ent_Dynamic)a).do_attack_animation( this );

				if ( Rand13.PercentChance( 75 ) ) {
					this.visible_message( "<span class='danger'>" + a + " has punched " + this.name + "!</span>", "<span class='userdanger'>" + a + " has punched " + this.name + "!</span>" );
					GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
					damage = Rand13.Int( 5, 10 );

					if ( Rand13.PercentChance( 40 ) ) {
						damage = Rand13.Int( 10, 15 );

						if ( this.paralysis < 5 && Convert.ToDouble( this.health ) > 0 ) {
							this.Paralyse( Rand13.Int( 10, 15 ) );
							this.visible_message( "<span class='danger'>" + a + " has knocked out " + this.name + "!</span>", "<span class='userdanger'>" + a + " has knocked out " + this.name + "!</span>" );
						}
					}
					this.adjustBruteLoss( damage );
					GlobalFuncs.add_logs( a, this, "attacked" );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					this.visible_message( "<span class='danger'>" + a + " has attempted to punch " + this.name + "!</span>", "<span class='userdanger'>" + a + " has attempted to punch " + this.name + "!</span>" );
				}
			} else if ( _a=="disarm" ) {
				
				if ( !( this.paralysis != 0 ) ) {
					((Ent_Dynamic)a).do_attack_animation( this );

					if ( Rand13.PercentChance( 25 ) ) {
						this.Paralyse( 2 );
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						GlobalFuncs.add_logs( a, this, "pushed" );
						this.visible_message( "<span class='danger'>" + a + " has pushed down " + this + "!</span>", "<span class='userdanger'>" + a + " has pushed down " + this + "!</span>" );
					} else if ( this.drop_item() ) {
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						this.visible_message( "<span class='danger'>" + a + " has disarmed " + this + "!</span>", "<span class='userdanger'>" + a + " has disarmed " + this + "!</span>" );
					}
				}
			}
			return null;
		}

		// Function from file: monkey.dm
		public override bool attack_larva( Mob_Living_Carbon_Alien_Larva user = null ) {
			int damage = 0;

			
			if ( base.attack_larva( user ) ) {
				damage = Rand13.Int( 1, 3 );

				if ( this.stat != 2 ) {
					user.amount_grown = Num13.MinInt( user.amount_grown + damage, user.max_grown );
					this.adjustBruteLoss( damage );
					this.updatehealth();
				}
			}
			return false;
		}

		// Function from file: monkey.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			int damage = 0;

			
			if ( Lang13.Bool( base.attack_paw( (object)(a), (object)(b), (object)(c) ) ) ) {
				damage = Rand13.Int( 1, 5 );

				if ( this.stat != 2 ) {
					this.adjustBruteLoss( damage );
					this.updatehealth();
				}
			}
			return null;
		}

		// Function from file: monkey.dm
		public override dynamic movement_delay(  ) {
			dynamic _default = null;

			double health_deficiency = 0;

			
			if ( this.reagents != null ) {
				
				if ( Lang13.Bool( this.reagents.has_reagent( "morphine" ) ) ) {
					return -1;
				}

				if ( Lang13.Bool( this.reagents.has_reagent( "nuka_cola" ) ) ) {
					return -1;
				}
			}
			_default = base.movement_delay();
			health_deficiency = 100 - Convert.ToDouble( this.health );

			if ( health_deficiency >= 45 ) {
				_default += health_deficiency / 25;
			}

			if ( Convert.ToDouble( this.bodytemperature ) < 283.22198486328125 ) {
				_default += ( 283.22198486328125 - Convert.ToDouble( this.bodytemperature ) ) / 10 * 1.75;
			}
			return _default + GlobalVars.config.monkey_delay;
		}

		// Function from file: monkey.dm
		public override void prepare_data_huds(  ) {
			AtomHud_Data_Human_Medical hud = null;

			base.prepare_data_huds();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.huds, typeof(AtomHud_Data_Human_Medical) )) {
				hud = _a;
				
				hud.add_to_hud( this );
			}
			return;
		}

		// Function from file: monkey.dm
		public override void initialize(  ) {
			this.create_dna(  );
			this.dna.initialize_dna( GlobalFuncs.random_blood_type() );
			return;
		}

		// Function from file: life.dm
		public override bool handle_fire(  ) {
			
			if ( base.handle_fire() ) {
				return false;
			}
			this.bodytemperature += 30;
			return false;
		}

		// Function from file: life.dm
		public override bool has_smoke_protection(  ) {
			
			if ( Lang13.Bool( this.wear_mask ) ) {
				
				if ( Lang13.Bool( this.wear_mask.flags & 8192 ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: life.dm
		public override void handle_random_events(  ) {
			
			if ( Rand13.PercentChance( 1 ) && Rand13.PercentChance( 2 ) ) {
				this.emote( "scratch" );
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_environment( GasMixture environment = null ) {
			dynamic loc_temp = null;
			dynamic pressure = null;
			dynamic adjusted_pressure = null;

			
			if ( !( environment != null ) ) {
				return;
			}
			loc_temp = this.get_temperature( environment );

			if ( this.stat != 2 ) {
				this.natural_bodytemperature_stabilization();
			}

			if ( !this.on_fire ) {
				
				if ( Convert.ToDouble( loc_temp ) < Convert.ToDouble( this.bodytemperature ) ) {
					this.bodytemperature += Num13.MinInt( Convert.ToInt32( ( loc_temp - this.bodytemperature ) / 6 ), 30 );
				} else {
					this.bodytemperature += Num13.MinInt( Convert.ToInt32( ( loc_temp - this.bodytemperature ) / 6 ), 30 );
				}
			}

			if ( Convert.ToDouble( this.bodytemperature ) > 360.41 ) {
				
				dynamic _a = this.bodytemperature; // Was a switch-case, sorry for the mess.
				if ( 360<=_a&&_a<=400 ) {
					this.throw_alert( "temp", typeof(Obj_Screen_Alert_Hot), 1 );
					this.adjustFireLoss( 2 );
				} else if ( 400<=_a&&_a<=460 ) {
					this.throw_alert( "temp", typeof(Obj_Screen_Alert_Hot), 2 );
					this.adjustFireLoss( 3 );
				} else if ( 460<=_a&&_a<=Double.PositiveInfinity ) {
					this.throw_alert( "temp", typeof(Obj_Screen_Alert_Hot), 3 );

					if ( this.on_fire ) {
						this.adjustFireLoss( 8 );
					} else {
						this.adjustFireLoss( 3 );
					}
				}
			} else if ( Convert.ToDouble( this.bodytemperature ) < 260.41 ) {
				
				if ( !( this.loc is Obj_Machinery_Atmospherics_Components_Unary_CryoCell ) ) {
					
					dynamic _b = this.bodytemperature; // Was a switch-case, sorry for the mess.
					if ( 200<=_b&&_b<=260 ) {
						this.throw_alert( "temp", typeof(Obj_Screen_Alert_Cold), 1 );
						this.adjustFireLoss( 0.5 );
					} else if ( 120<=_b&&_b<=200 ) {
						this.throw_alert( "temp", typeof(Obj_Screen_Alert_Cold), 2 );
						this.adjustFireLoss( 1.5 );
					} else if ( Double.NegativeInfinity<=_b&&_b<=120 ) {
						this.throw_alert( "temp", typeof(Obj_Screen_Alert_Cold), 3 );
						this.adjustFireLoss( 3 );
					}
				} else {
					this.clear_alert( "temp" );
				}
			} else {
				this.clear_alert( "temp" );
			}
			pressure = environment.return_pressure();
			adjusted_pressure = this.calculate_affecting_pressure( pressure );

			dynamic _c = adjusted_pressure; // Was a switch-case, sorry for the mess.
			if ( 550<=_c&&_c<=Double.PositiveInfinity ) {
				this.adjustBruteLoss( Num13.MinInt( Convert.ToInt32( ( adjusted_pressure / 550 - 1 ) * 4 ), 4 ) );
				this.throw_alert( "pressure", typeof(Obj_Screen_Alert_Highpressure), 2 );
			} else if ( 325<=_c&&_c<=550 ) {
				this.throw_alert( "pressure", typeof(Obj_Screen_Alert_Highpressure), 1 );
			} else if ( 50<=_c&&_c<=325 ) {
				this.clear_alert( "pressure" );
			} else if ( 20<=_c&&_c<=50 ) {
				this.throw_alert( "pressure", typeof(Obj_Screen_Alert_Lowpressure), 1 );
			} else {
				this.adjustBruteLoss( 2 );
				this.throw_alert( "pressure", typeof(Obj_Screen_Alert_Lowpressure), 2 );
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_breath_temperature( dynamic breath = null ) {
			
			if ( Math.Abs( 310.41 - Convert.ToDouble( breath.temperature ) ) > 50 ) {
				
				dynamic _a = breath.temperature; // Was a switch-case, sorry for the mess.
				if ( Double.NegativeInfinity<=_a&&_a<=120 ) {
					this.adjustFireLoss( 3 );
				} else if ( 120<=_a&&_a<=200 ) {
					this.adjustFireLoss( 1.5 );
				} else if ( 200<=_a&&_a<=260 ) {
					this.adjustFireLoss( 0.5 );
				} else if ( 360<=_a&&_a<=400 ) {
					this.adjustFireLoss( 2 );
				} else if ( 400<=_a&&_a<=1000 ) {
					this.adjustFireLoss( 3 );
				} else if ( 1000<=_a&&_a<=Double.PositiveInfinity ) {
					this.adjustFireLoss( 8 );
				}
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_chemicals_in_body(  ) {
			
			if ( this.reagents != null ) {
				this.reagents.metabolize( this, true );
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_mutations_and_radiation(  ) {
			
			if ( this.radiation != 0 ) {
				
				if ( this.radiation > 100 ) {
					this.Weaken( 10 );
					this.WriteMsg( "<span class='danger'>You feel weak.</span>" );
					this.emote( "collapse" );
				}

				dynamic _a = this.radiation; // Was a switch-case, sorry for the mess.
				if ( 50<=_a&&_a<=75 ) {
					
					if ( Rand13.PercentChance( 5 ) ) {
						this.Weaken( 3 );
						this.WriteMsg( "<span class='danger'>You feel weak.</span>" );
						this.emote( "collapse" );
					}
				} else if ( 75<=_a&&_a<=100 ) {
					
					if ( Rand13.PercentChance( 1 ) ) {
						this.WriteMsg( "<span class='danger'>You mutate!</span>" );
						GlobalFuncs.randmutb( this );
						this.emote( "gasp" );
						this.domutcheck();
					}
				}
				base.handle_mutations_and_radiation();
			}
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			
			if ( Lang13.Bool( this.notransform ) ) {
				return false;
			}
			base.Life();

			if ( !( this.client != null ) && this.stat == 0 ) {
				
				if ( Rand13.PercentChance( 33 ) && this.canmove && this.loc is Tile && !( this.pulledby != null ) && !( this.grabbed_by.len != 0 ) ) {
					Map13.Step( this, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) ) );
				}

				if ( Rand13.PercentChance( 1 ) ) {
					this.emote( Rand13.Pick(new object [] { "scratch", "jump", "roll", "tail" }) );
				}
			}
			return false;
		}

		// Function from file: inventory.dm
		public override bool can_equip( Obj_Item I = null, dynamic slot = null, bool? disable_warning = null ) {
			disable_warning = disable_warning ?? false;

			
			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==4 ) {
				
				if ( Lang13.Bool( this.l_hand ) ) {
					return false;
				}
				return true;
			} else if ( _a==5 ) {
				
				if ( Lang13.Bool( this.r_hand ) ) {
					return false;
				}
				return true;
			} else if ( _a==2 ) {
				
				if ( Lang13.Bool( this.wear_mask ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 32 ) ) {
					return false;
				}
				return true;
			} else if ( _a==11 ) {
				
				if ( Lang13.Bool( this.head ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 64 ) ) {
					return false;
				}
				return true;
			} else if ( _a==1 ) {
				
				if ( Lang13.Bool( this.back ) ) {
					return false;
				}

				if ( !Lang13.Bool( I.slot_flags & 1024 ) ) {
					return false;
				}
				return true;
			}
			return false;
		}

		// Function from file: emote.dm
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			string param = null;
			int t1 = 0;
			bool muzzled = false;

			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}
			muzzled = this.is_muzzled();

			switch ((string)( act )) {
				case "deathgasp":
				case "deathgasps":
					message = "<b>" + this + "</b> lets out a faint chimper as it collapses and stops moving...";
					m_type = 1;
					break;
				case "gnarl":
				case "gnarls":
					
					if ( !muzzled ) {
						message = "<B>" + this + "</B> gnarls and shows its teeth..";
						m_type = 2;
					}
					break;
				case "me":
					base.emote( act, m_type, (object)(message) );
					return;
					break;
				case "moan":
				case "moans":
					message = "<B>" + this + "</B> moans!";
					m_type = 2;
					break;
				case "paw":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> flails its paw.";
						m_type = 1;
					}
					break;
				case "roar":
				case "roars":
					
					if ( !muzzled ) {
						message = "<B>" + this + "</B> roars.";
						m_type = 2;
					}
					break;
				case "roll":
				case "rolls":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> rolls.";
						m_type = 1;
					}
					break;
				case "scratch":
				case "scratches":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> scratches.";
						m_type = 1;
					}
					break;
				case "screech":
				case "screeches":
					
					if ( !muzzled ) {
						message = "<B>" + this + "</B> screeches.";
						m_type = 2;
					}
					break;
				case "shiver":
				case "shivers":
					message = "<B>" + this + "</B> shivers.";
					m_type = 2;
					break;
				case "sign":
				case "signs":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> signs" + ( Lang13.Bool( String13.ParseNumber( param ) ) ? " the number " + String13.ParseNumber( param ) : null ) + ".";
						m_type = 1;
					}
					break;
				case "tail":
					message = "<B>" + this + "</B> waves its tail.";
					m_type = 1;
					break;
				case "help":
					this.WriteMsg( "Help for monkey emotes. You can use these emotes with say \"*emote\":\n\naflap, airguitar, blink, blink_r, blush, bow-(none)/mob, burp, choke, chuckle, clap, collapse, cough, dance, deathgasp, drool, flap, frown, gasp, gnarl, giggle, glare-(none)/mob, grin, jump, laugh, look, me, moan, nod, paw, point-(atom), roar, roll, scream, scratch, screech, shake, shiver, sigh, sign-#, sit, smile, sneeze, sniff, snore, stare-(none)/mob, sulk, sway, tail, tremble, twitch, twitch_s, wave whimper, wink, yawn" );
					break;
				default:
					base.emote( act, m_type, (object)(message) );
					break;
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				
				if ( this.client != null ) {
					GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message );
				}

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else {
					this.audible_message( message );
				}
			}
			return;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			
			if ( this.stat == 2 ) {
				return false;
			}
			this.stat = 2;

			if ( !( gibbed == true ) ) {
				this.visible_message( "<b>" + this + "</b> lets out a faint chimper as it collapses and stops moving..." );
			}

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				((GameMode)GlobalVars.ticker.mode).check_win();
			}
			return base.death( gibbed, toast );
		}

		// Function from file: death.dm
		public override void dust( dynamic animation = null ) {
			animation = animation ?? 1;

			base.dust( (object)(animation) );
			return;
		}

		// Function from file: death.dm
		public override void dust_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			base.dust_animation( animate, "dust-m" );
			return;
		}

		// Function from file: death.dm
		public override void gib_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			base.gib_animation( animate, "gibbed-m" );
			return;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			return;
		}

		// Function from file: monkey.dm
		public override void create_mob_hud(  ) {
			
			if ( this.client != null && !( this.hud_used != null ) ) {
				this.hud_used = new Hud_Monkey( this, GlobalFuncs.ui_style2icon( this.client.prefs.UI_style ) );
			}
			return;
		}

		// Function from file: other_mobs.dm
		public override bool RestrainedClickOn( Ent_Static A = null ) {
			Ent_Static ML = null;
			string dam_zone = null;
			dynamic affecting = null;
			double? armor = null;
			Disease D = null;

			
			if ( base.RestrainedClickOn( A ) ) {
				return false;
			}

			if ( this.a_intent != "harm" || !( A is Mob ) ) {
				return false;
			}

			if ( this.is_muzzled() ) {
				return false;
			}
			ML = A;
			dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });
			affecting = null;

			if ( ML is Mob_Living_Carbon_Human ) {
				affecting = ((dynamic)ML).get_organ( GlobalFuncs.ran_zone( dam_zone ) );
			}
			armor = ((Mob_Living)ML).run_armor_check( affecting, "melee" );

			if ( Rand13.PercentChance( 75 ) ) {
				((Mob_Living)ML).apply_damage( Rand13.Int( 1, 3 ), "brute", affecting, armor );
				ML.visible_message( "<span class='danger'>" + this.name + " bites " + ML + "!</span>", "<span class='userdanger'>" + this.name + " bites " + ML + "!</span>" );

				if ( ( armor ??0) >= 2 ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
					D = _a;
					
					((dynamic)ML).ForceContractDisease( D );
				}
			} else {
				ML.visible_message( "<span class='danger'>" + this + " has attempted to bite " + ML + "!</span>" );
			}
			return false;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			A.attack_paw( this );
			return;
		}

		// Function from file: monkey.dm
		[Verb]
		[VerbInfo( name: "Remove Internals", group: "IC" )]
		public void removeinternal(  ) {
			this.v_internal = null;
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( !this.canSuicide() ) {
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( !this.canSuicide() ) {
				return;
			}

			if ( confirm == "Yes" ) {
				this.suiciding = 1;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " is attempting to bite " ).his_her_its_their().str( " tongue. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).item( this ).str( " is attempting to bite " ).his_her_its_their().str( " tongue. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.adjustOxyLoss( Num13.MaxInt( ((int)( 200 - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss() - Convert.ToDouble( this.getOxyLoss() ) )), 0 ) );
				this.death( false );
			}
			return;
		}

	}

}