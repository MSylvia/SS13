// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Monkey : Mob_Living_Carbon {

		public int oxygen_alert = 0;
		public int co2overloadtime = 0;
		public double temperature_resistance = 348.41;
		public int toxins_alert = 0;
		public int fire_alert = 0;
		public int pressure_alert = 0;
		public bool temperature_alert = false;
		public bool canWearClothes = true;
		public bool canWearHats = true;
		public bool canWearGlasses = true;
		public dynamic uniform = null;
		public dynamic hat = null;
		public dynamic glasses = null;
		public dynamic wear_id = null;
		public string greaterform = "Human";
		public ByTable uni_append = new ByTable(new object [] { 300, 1250 });
		public bool update_muts = true;
		public int? alien = 0;
		public ByTable overlays_lying = new ByTable( 10 );
		public ByTable overlays_standing = new ByTable( 10 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.voice_name = "monkey";
			this.pass_flags = 1;
			this.v_update_icon = false;
			this.meat_type = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Animal_Monkey);
			this.species_type = typeof(Mob_Living_Carbon_Monkey);
			this.treadmill_speed = 0.8;
			this.mob_bump_flag = 2;
			this.mob_swap_flags = 50;
			this.mob_push_flags = 54;
			this.size = 2;
			this.icon = "icons/mob/monkey.dmi";
			this.icon_state = "monkey1";
		}

		// Function from file: monkey.dm
		public Mob_Living_Carbon_Monkey ( dynamic loc = null ) : base( (object)(loc) ) {
			Reagents R = null;
			int? b = null;

			R = new Reagents( 1000 );
			this.reagents = R;
			R.my_atom = this;

			if ( this.name == Lang13.Initial( this, "name" ) ) {
				this.name = "" + this.name + " (" + Rand13.Int( 1, 1000 ) + ")";
				this.real_name = this.name;
			}

			if ( !( this.dna != null ) ) {
				
				if ( this.gender == GlobalVars.NEUTER ) {
					this.setGender( Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE }) );
				}
				this.dna = new Dna( /* Pruned args, no ctor exists. */ );
				this.dna.real_name = this.real_name;
				this.dna.b_type = Rand13.Pick(new object [] { "A+", "A-", "AB+", "AB-", "O+", "O-" });
				this.dna.ResetSE();
				this.dna.ResetUI();
				this.dna.unique_enzymes = Num13.Md5( this.name );
				this.dna.SetSEState( GlobalVars.MONKEYBLOCK, true );
				this.dna.SetSEValueRange( GlobalVars.MONKEYBLOCK, 3500, 4095 );
				this.dna.SetUIState( 11, this.gender != GlobalVars.MALE, true );

				if ( this.uni_append.len > 0 ) {
					b = null;
					b = 1;

					while (( b ??0) <= this.uni_append.len) {
						this.dna.SetUIValue( 13 - ( this.uni_append.len - ( b ??0) ), Convert.ToDouble( this.uni_append[b] ), true );
						b++;
					}
				}
				this.dna.UpdateUI();
				this.update_muts = true;
			}

			if ( !( this is Mob_Living_Carbon_Monkey_Diona ) ) {
				this.add_language( "Monkey" );
				this.default_language = GlobalVars.all_languages["Monkey"];
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icons();
			return;
		}

		// Function from file: update_icons.dm
		public override void update_fire( bool? update_icons = null ) {
			this.overlays.Remove( this.overlays_standing[9] );

			if ( this.on_fire ) {
				this.overlays_standing[9] = new Image( "icons/mob/OnFire.dmi", null, "Standing", -9 );
				this.overlays.Add( this.overlays_standing[9] );
			} else {
				this.overlays_standing[9] = null;
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_targeted( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			
			if ( this.targeted_by != null && this.target_locked != null ) {
				this.overlays_standing[10] = this.target_locked;
			} else if ( !( this.targeted_by != null ) && this.target_locked != null ) {
				Lang13.Delete( this.target_locked );
				this.target_locked = null;
			}

			if ( !( this.targeted_by != null ) ) {
				this.overlays_standing[10] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hud(  ) {
			
			if ( this.client != null ) {
				this.client.screen.Or( this.contents );

				if ( this.m_hat != null ) {
					
					if ( Lang13.Bool( this.hat ) ) {
						((dynamic)this.m_hat).icon_state = this.hat.icon_state;
					} else {
						((dynamic)this.m_hat).icon_state = "none";
					}
				}

				if ( this.m_suitclothes != null ) {
					
					if ( Lang13.Bool( this.uniform ) ) {
						((dynamic)this.m_suitclothes).icon_state = this.uniform.icon_state;
					} else {
						((dynamic)this.m_suitclothes).icon_state = "none";
					}
				}

				if ( this.m_glasses != null ) {
					
					if ( Lang13.Bool( this.glasses ) ) {
						((dynamic)this.m_glasses).icon_state = this.glasses.icon_state;
					} else {
						((dynamic)this.m_glasses).icon_state = "none";
					}
				}
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_handcuffed( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			
			if ( Lang13.Bool( this.handcuffed ) ) {
				this.drop_hands();
				this.stop_pulling();
				this.overlays_standing[6] = new Image( "icons/mob/monkey.dmi", null, "handcuff1" );
			} else {
				this.overlays_standing[6] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_back( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			
			if ( Lang13.Bool( this.back ) ) {
				this.overlays_standing[3] = new Image( "icons/mob/back.dmi", null, "" + this.back.icon_state );
				this.back.screen_loc = "WEST+5:14,SOUTH:5";
			} else {
				this.overlays_standing[3] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_l_hand( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			dynamic t_inhand_state = null;

			
			if ( Lang13.Bool( this.l_hand ) ) {
				t_state = this.l_hand.item_state;
				t_inhand_state = this.l_hand.inhand_states["left_hand"];

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.l_hand.icon_state;
				}
				this.overlays_standing[7] = new Image( t_inhand_state, null, t_state );
				this.l_hand.screen_loc = "CENTER:16,SOUTH:5";

				if ( Lang13.Bool( this.handcuffed ) ) {
					this.drop_item( this.l_hand );
				}
			} else {
				this.overlays_standing[7] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_r_hand( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			dynamic t_inhand_states = null;

			
			if ( Lang13.Bool( this.r_hand ) ) {
				t_state = this.r_hand.item_state;
				t_inhand_states = this.r_hand.inhand_states["right_hand"];

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.r_hand.icon_state;
				}
				this.overlays_standing[8] = new Image( t_inhand_states, null, t_state );
				this.r_hand.screen_loc = "CENTER-1:16,SOUTH:5";

				if ( Lang13.Bool( this.handcuffed ) ) {
					this.drop_item( this.r_hand );
				}
			} else {
				this.overlays_standing[8] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_mask( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			
			if ( Lang13.Bool( this.wear_mask ) && this.wear_mask is Obj_Item_Clothing_Mask ) {
				this.overlays_standing[2] = new Image( "icons/mob/monkey.dmi", null, "" + this.wear_mask.icon_state );
				this.wear_mask.screen_loc = "WEST+4:14,SOUTH:5";
			} else {
				this.overlays_standing[2] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_glasses( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;

			
			if ( Lang13.Bool( this.glasses ) ) {
				t_state = this.glasses.icon_state;
				this.overlays_standing[4] = new Image( "icons/mob/monkey_eyes.dmi", null, t_state );
			} else {
				this.overlays_standing[4] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override dynamic update_icons(  ) {
			Image I = null;
			Matrix M = null;
			Matrix M2 = null;

			this.update_hud();
			this.lying_prev = this.lying;
			this.overlays.len = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.overlays_standing, typeof(Image) )) {
				I = _a;
				
				this.overlays.Add( I );
			}

			if ( this.lying == true ) {
				M = Num13.Matrix();
				M.Turn( 90 );
				M.Translate( 1, -6 );
				this.transform = M;
			} else {
				M2 = Num13.Matrix();
				this.transform = M2;
			}
			return null;
		}

		// Function from file: update_icons.dm
		public override void regenerate_icons(  ) {
			base.regenerate_icons();
			this.update_inv_uniform( false );
			this.update_inv_wear_mask( false );
			this.update_inv_back( false );
			this.update_inv_glasses( false );
			this.update_inv_hat( false );
			this.update_inv_r_hand( false );
			this.update_inv_l_hand( false );
			this.update_inv_handcuffed( false );
			this.update_fire();
			this.update_icons();
			this.update_hud();
			return;
		}

		// Function from file: say.dm
		public override bool say_understands( Ent_Dynamic other = null, Language speaking = null ) {
			
			if ( other != null ) {
				other = other.GetSource();
			}

			if ( other is Mob_Living_Silicon ) {
				return true;
			}

			if ( speaking != null && speaking.name == "Galactic Common" ) {
				
				if ( Lang13.Bool( this.dexterity_check() ) ) {
					return true;
				}
			}
			return base.say_understands( other, speaking );
		}

		// Function from file: say.dm
		public override string say_quote( dynamic text = null ) {
			return "chimpers, " + text;
		}

		// Function from file: monkey.dm
		public override dynamic dexterity_check(  ) {
			
			if ( this.stat != 0 ) {
				return 0;
			}

			if ( GlobalVars.ticker.mode.name == "monkey" ) {
				return 1;
			}

			if ( ((Reagents)this.reagents).has_reagent( "methylin" ) ) {
				return 1;
			}
			return 0;
		}

		// Function from file: monkey.dm
		public override int assess_threat( Obj_Machinery_Bot judgebot = null, string lasercolor = null ) {
			int threatcount = 0;

			
			if ( judgebot.emagged == 2 ) {
				return 10;
			}
			threatcount = 0;

			if ( Lang13.Bool( lasercolor ) ) {
				
				if ( lasercolor == "b" ) {
					
					if ( this.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag || this.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) {
						threatcount += 4;
					}
				}

				if ( lasercolor == "r" ) {
					
					if ( this.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag || this.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag ) {
						threatcount += 4;
					}
				}
				return threatcount;
			}

			if ( Lang13.Bool( ((dynamic)judgebot).weaponscheck ) ) {
				
				if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.l_hand ) ) ) {
					threatcount += 4;
				}

				if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.r_hand ) ) ) {
					threatcount += 4;
				}
			}

			if ( GlobalFuncs.isloyal( this ) ) {
				threatcount -= 1;
			}
			return threatcount;
		}

		// Function from file: monkey.dm
		public override ByTable GetAccess(  ) {
			ByTable ACL = null;
			dynamic I = null;

			ACL = new ByTable();
			I = this.get_active_hand();

			if ( I is Obj_Item ) {
				ACL.Or( I.GetAccess() );
			}
			return ACL;
		}

		// Function from file: monkey.dm
		public override dynamic IsAdvancedToolUser(  ) {
			return this.dexterity_check();
		}

		// Function from file: monkey.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat != 2 ) {
				this.adjustFireLoss( 60 );
				this.health = 100 - Convert.ToDouble( this.getOxyLoss() ) - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss();
			}

			if ( Rand13.PercentChance( 50 ) ) {
				this.Paralyse( 10 );
			}

			if ( this.stat == 2 && this.client != null ) {
				this.gib();
				return false;
			}

			if ( this.stat == 2 && !( this.client != null ) ) {
				GlobalFuncs.gibs( this.loc, this.viruses );
				GlobalFuncs.qdel( this );
				return false;
			}
			return false;
		}

		// Function from file: monkey.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.blinded ) ) {
				Icon13.Flick( "flash", this.flash );
			}

			switch ((int?)( severity )) {
				case 1:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 200 );
						this.health = 100 - Convert.ToDouble( this.getOxyLoss() ) - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss();
					}
					break;
				case 2:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 60 );
						this.adjustFireLoss( 60 );
						this.health = 100 - Convert.ToDouble( this.getOxyLoss() ) - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss();
					}
					break;
				case 3:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 30 );
						this.health = 100 - Convert.ToDouble( this.getOxyLoss() ) - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss();
					}

					if ( Rand13.PercentChance( 50 ) ) {
						this.Paralyse( 10 );
					}
					break;
			}
			return false;
		}

		// Function from file: monkey.dm
		public override dynamic emp_act( int severity = 0 ) {
			Obj_Item_Stickybomb B = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Stickybomb) )) {
				B = _a;
				

				if ( Lang13.Bool( B.stuck_to ) ) {
					this.visible_message( new Txt( "<span class='warning'>" ).the( B ).item().str( " stuck on " ).the( this ).item().str( " suddenly deactivates itself and falls to the ground.</span>" ).ToString() );
					B.deactivate();
					B.unstick();
				}
			}

			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}

			if ( Lang13.Bool( this.wear_id ) ) {
				this.wear_id.emp_act( severity );
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: monkey.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( null, "Intent: " + this.a_intent );
				Interface13.Stat( null, "Move Mode: " + this.m_intent );

				if ( this.client != null && this.mind != null ) {
					
					if ( ((dynamic)this.client).statpanel == "Status" ) {
						
						if ( this.mind.changeling != null ) {
							Interface13.Stat( "Chemical Storage", this.mind.changeling.chem_charges );
							Interface13.Stat( "Genetic Damage Time", this.mind.changeling.geneticdamage );
						}
					}
				}
			}
			return null;
		}

		// Function from file: monkey.dm
		public override void attack_slime( Mob_Living_Carbon_Slime user = null ) {
			dynamic O = null;
			int damage = 0;
			int stunprob = 0;
			double power = 0;
			dynamic O2 = null;
			Effect_Effect_System_SparkSpread s = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "You cannot attack people before the game has started." );
				return;
			}

			if ( Lang13.Bool( user.Victim ) ) {
				return;
			}

			if ( Convert.ToDouble( this.health ) > -100 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						O.show_message( "<span class='danger'>The " + user.name + " glomps " + this + "!</span>", 1 );
					}
				}
				damage = Rand13.Int( 1, 3 );

				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					damage = Rand13.Int( 20, 40 );
				} else {
					damage = Rand13.Int( 5, 35 );
				}
				this.adjustBruteLoss( damage );

				if ( user.powerlevel > 0 ) {
					stunprob = 10;
					power = user.powerlevel + Rand13.Int( 0, 3 );

					dynamic _b = user.powerlevel; // Was a switch-case, sorry for the mess.
					if ( 1<=_b&&_b<=2 ) {
						stunprob = 20;
					} else if ( 3<=_b&&_b<=4 ) {
						stunprob = 30;
					} else if ( 5<=_b&&_b<=6 ) {
						stunprob = 40;
					} else if ( 7<=_b&&_b<=8 ) {
						stunprob = 60;
					} else if ( _b==9 ) {
						stunprob = 70;
					} else if ( _b==10 ) {
						stunprob = 95;
					}

					if ( Rand13.PercentChance( stunprob ) ) {
						user.powerlevel -= 3;

						if ( user.powerlevel < 0 ) {
							user.powerlevel = 0;
						}

						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O2 = _c;
							

							if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
								O2.show_message( "<span class='danger'>The " + user.name + " has shocked " + this + "!</span>", 1 );
							}
						}
						this.Weaken( power );

						if ( Convert.ToDouble( this.stuttering ) < power ) {
							this.stuttering = power;
						}
						this.Stun( power );
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();

						if ( Rand13.PercentChance( stunprob ) && user.powerlevel >= 8 ) {
							this.adjustFireLoss( user.powerlevel * Rand13.Int( 6, 10 ) );
						}
					}
				}
				this.updatehealth();
			}
			return;
		}

		// Function from file: monkey.dm
		public override dynamic attack_alien( Mob user = null ) {
			dynamic O = null;
			int damage = 0;
			dynamic O2 = null;
			dynamic O3 = null;
			dynamic O4 = null;
			Game_Data G = null;
			dynamic O5 = null;
			int damage2 = 0;
			dynamic O6 = null;
			dynamic O7 = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "You cannot attack people before the game has started." );
				return null;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				GlobalFuncs.to_chat( user, "No attacking people at spawn, you jackass." );
				return null;
			}

			dynamic _h = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _h=="help" ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						O.show_message( "<span class='notice'>" + user + " caresses " + this + " with its scythe like arm.</span>", 1 );
					}
				}
			} else if ( _h=="hurt" ) {
				
				if ( Rand13.PercentChance( 95 ) && Convert.ToDouble( this.health ) > 0 ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slice.ogg", 25, 1, -1 );
					damage = Rand13.Int( 15, 30 );

					if ( damage >= 25 ) {
						damage = Rand13.Int( 20, 40 );

						if ( this.paralysis < 15 ) {
							this.Paralyse( Rand13.Int( 10, 15 ) );
						}

						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O2 = _b;
							

							if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
								O2.show_message( "<span class='danger'>" + user + " has wounded " + this.name + "!</span>", 1 );
							}
						}
					} else {
						
						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O3 = _c;
							

							if ( Lang13.Bool( O3.client ) && !Lang13.Bool( O3.blinded ) ) {
								O3.show_message( "<span class='danger'>" + user + " has slashed " + this.name + "!</span>", 1 );
							}
						}
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );

					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O4 = _d;
						

						if ( Lang13.Bool( O4.client ) && !Lang13.Bool( O4.blinded ) ) {
							O4.show_message( "<span class='danger'>" + user + " has attempted to lunge at " + this.name + "!</span>", 1 );
						}
					}
				}
			} else if ( _h=="grab" ) {
				
				if ( user == this ) {
					return null;
				}
				G = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), user, this );
				user.put_in_active_hand( G );
				this.grabbed_by.Add( G );
				((Obj_Item_Weapon_Grab)G).synch();
				this.LAssailant = user;
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

				foreach (dynamic _e in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O5 = _e;
					
					O5.show_message( "<span class='warning'>" + user + " has grabbed " + this.name + " passively!</span>", 1 );
				}
			} else if ( _h=="disarm" ) {
				GlobalFuncs.playsound( this.loc, "sound/weapons/pierce.ogg", 25, 1, -1 );
				damage2 = 5;

				if ( Rand13.PercentChance( 95 ) ) {
					this.Weaken( 15 );

					foreach (dynamic _f in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O6 = _f;
						

						if ( Lang13.Bool( O6.client ) && !Lang13.Bool( O6.blinded ) ) {
							O6.show_message( "<span class='danger'>" + user + " has tackled down " + this.name + "!</span>", 1 );
						}
					}
				} else {
					this.drop_item();

					foreach (dynamic _g in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O7 = _g;
						

						if ( Lang13.Bool( O7.client ) && !Lang13.Bool( O7.blinded ) ) {
							O7.show_message( "<span class='danger'>" + user + " has disarmed " + this.name + "!</span>", 1 );
						}
					}
				}
				this.adjustBruteLoss( damage2 );
				this.updatehealth();
			}
			return null;
		}

		// Function from file: monkey.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic G = null;
			dynamic O = null;
			dynamic O2 = null;
			dynamic damage = null;
			string dam_zone = null;
			dynamic O3 = null;
			dynamic O4 = null;
			Game_Data G2 = null;
			dynamic O5 = null;
			dynamic O6 = null;
			dynamic O7 = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( a, "You cannot attack people before the game has started." );
				return null;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				GlobalFuncs.to_chat( a, "No attacking people at spawn, you jackass." );
				return null;
			}

			if ( Lang13.Bool( a.gloves ) && a.gloves is Obj_Item_Clothing_Gloves ) {
				G = a.gloves;

				if ( Lang13.Bool( G.cell ) ) {
					
					if ( a.a_intent == "hurt" ) {
						
						if ( Convert.ToDouble( G.cell.charge ) >= 2500 ) {
							G.cell.use( 2500 );
							this.Weaken( 5 );

							if ( Convert.ToDouble( this.stuttering ) < 5 ) {
								this.stuttering = 5;
							}
							this.Stun( 5 );

							foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
								O = _a;
								

								if ( Lang13.Bool( O.client ) ) {
									O.show_message( "<span class='danger'>" + this + " has been touched with the stun gloves by " + a + "!</span>", 1, "<span class='warning'>You hear someone fall</span>", 2 );
								}
							}
							return null;
						} else {
							GlobalFuncs.to_chat( a, "<span class='warning'>Not enough charge! </span>" );
							return null;
						}
					}
				}
			}

			if ( a.a_intent == "help" ) {
				this.help_shake_act( a );
			} else if ( a.a_intent == "hurt" ) {
				
				if ( Rand13.PercentChance( 75 ) && Convert.ToDouble( this.health ) > 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O2 = _b;
						

						if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
							O2.show_message( "<span class='danger'>" + a + " has punched " + this.name + "!</span>", 1 );
						}
					}
					GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
					damage = Rand13.Int( 5, 10 );
					dam_zone = "";

					if ( a.zone_sel != null && Lang13.Bool( ((dynamic)a.zone_sel).selecting ) ) {
						dam_zone = ((dynamic)a.zone_sel).selecting;
					}
					damage = this.defense( damage, dam_zone );

					if ( Convert.ToDouble( damage ) > 5 && Rand13.PercentChance( 40 ) ) {
						damage = Rand13.Int( 10, 15 );

						if ( this.paralysis < 5 ) {
							this.Paralyse( Rand13.Int( 10, 15 ) );
							Task13.Schedule( 0, (Task13.Closure)(() => {
								
								foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
									O3 = _c;
									

									if ( Lang13.Bool( O3.client ) && !Lang13.Bool( O3.blinded ) ) {
										O3.show_message( "<span class='danger'>" + a + " has knocked out " + this.name + "!</span>", 1 );
									}
								}
								return;
								return;
							}));
						}
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );

					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O4 = _d;
						

						if ( Lang13.Bool( O4.client ) && !Lang13.Bool( O4.blinded ) ) {
							O4.show_message( "<span class='danger'>" + a + " has attempted to punch " + this.name + "!</span>", 1 );
						}
					}
				}
			} else if ( a.a_intent == "grab" ) {
				
				if ( a == this || Lang13.Bool( this.anchored ) ) {
					return null;
				}
				G2 = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), a, this );
				((Mob)a).put_in_active_hand( G2 );
				this.grabbed_by.Add( G2 );
				((dynamic)G2).synch();
				this.LAssailant = a;
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

				foreach (dynamic _e in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O5 = _e;
					
					O5.show_message( "<span class='warning'>" + a + " has grabbed " + this.name + " passively!</span>", 1 );
				}
			} else if ( !( this.paralysis != 0 ) ) {
				
				if ( Rand13.PercentChance( 25 ) ) {
					this.Paralyse( 2 );
					GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

					foreach (dynamic _f in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O6 = _f;
						

						if ( Lang13.Bool( O6.client ) && !Lang13.Bool( O6.blinded ) ) {
							O6.show_message( "<span class='danger'>" + a + " has pushed down " + this.name + "!</span>", 1 );
						}
					}
				} else {
					this.drop_item();
					GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

					foreach (dynamic _g in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O7 = _g;
						

						if ( Lang13.Bool( O7.client ) && !Lang13.Bool( O7.blinded ) ) {
							O7.show_message( "<span class='danger'>" + a + " has disarmed " + this.name + "!</span>", 1 );
						}
					}
				}
			}
			return null;
		}

		// Function from file: monkey.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			dynamic O = null;
			int damage = 0;
			Disease D = null;
			dynamic O2 = null;

			base.attack_paw( a, (object)(b), (object)(c) );

			if ( a.a_intent == "help" ) {
				this.help_shake_act( a );
			} else if ( a.a_intent == "hurt" && !( this.wear_mask is Obj_Item_Clothing_Mask_Muzzle ) ) {
				
				if ( Rand13.PercentChance( 75 ) && Convert.ToDouble( this.health ) > 0 ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _a;
						
						O.show_message( "<span class='danger'>" + a.name + " has bit " + this.name + "!</span>", 1 );
					}
					damage = Rand13.Int( 1, 5 );
					this.adjustBruteLoss( damage );
					this.health = 100 - Convert.ToDouble( this.getOxyLoss() ) - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss();

					foreach (dynamic _b in Lang13.Enumerate( a.viruses, typeof(Disease) )) {
						D = _b;
						

						if ( D.spread == "Bite" ) {
							this.contract_disease( D, true, false );
						}
					}
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O2 = _c;
						
						O2.show_message( "<span class='danger'>" + a.name + " has attempted to bite " + this.name + "!</span>", 1 );
					}
				}
			}
			return null;
		}

		// Function from file: monkey.dm
		public override double getarmor( dynamic def_zone = null, string type = null ) {
			bool armorscore = false;

			armorscore = false;

			if ( def_zone == "head" || def_zone == "eyes" || def_zone == "head" ) {
				
				if ( Lang13.Bool( this.hat ) ) {
					armorscore = Lang13.Bool( this.hat.armor[type] );
				}
			} else if ( Lang13.Bool( this.uniform ) ) {
				armorscore = Lang13.Bool( this.uniform.armor[type] );
			}
			return armorscore ?1:0;
		}

		// Function from file: monkey.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string t1 = null;
			Obj_Effect_EquipE_Monkey O = null;
			dynamic remove_from = null;
			dynamic add_to = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["mach_close"] ) ) {
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
			}

			if ( Lang13.Bool( href_list["item"] ) && !Lang13.Bool( Task13.User.stat ) && !Task13.User.restrained() && GlobalFuncs.in_range( this, Task13.User ) ) {
				O = new Obj_Effect_EquipE_Monkey();
				O.source = Task13.User;
				O.target = this;
				O.item = Task13.User.get_active_hand();
				O.s_loc = Task13.User.loc;
				O.t_loc = this.loc;
				O.place = href_list["item"];
				this.requests.Add( O );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					O.process();
					return;
					return;
				}));
			}

			if ( Lang13.Bool( href_list["remove_inv"] ) ) {
				
				if ( !this.Adjacent( Task13.User ) || !( Task13.User is Mob_Living_Carbon_Human || Task13.User is Mob_Living_Carbon_Monkey || Task13.User is Mob_Living_Silicon_Robot || Task13.User is Mob_Living_Carbon_Alien_Humanoid ) ) {
					return null;
				}
				remove_from = href_list["remove_inv"];

				dynamic _a = remove_from; // Was a switch-case, sorry for the mess.
				if ( _a=="uniform" ) {
					
					if ( Lang13.Bool( this.uniform ) ) {
						this.uniform.loc = this.loc;
						this.uniform = null;
						this.regenerate_icons();
					} else {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>He has no uniform to remove.</span>" );
						return null;
					}
				} else if ( _a=="hat" ) {
					
					if ( Lang13.Bool( this.hat ) ) {
						this.hat.loc = this.loc;
						this.hat = null;
						this.regenerate_icons();
					} else {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>He has no hat to remove</span>" );
						return null;
					}
				} else if ( _a=="glasses" ) {
					
					if ( Lang13.Bool( this.glasses ) ) {
						this.glasses.loc = this.loc;
						this.glasses = null;
						this.regenerate_icons();
					} else {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>He has no glasses to remove</span>" );
						return null;
					}
				}
				this.show_inv( Task13.User );
			} else if ( Lang13.Bool( href_list["add_inv"] ) ) {
				
				if ( !this.Adjacent( Task13.User ) || !( Task13.User is Mob_Living_Carbon_Human || Task13.User is Mob_Living_Carbon_Monkey || Task13.User is Mob_Living_Silicon_Robot || Task13.User is Mob_Living_Carbon_Alien_Humanoid ) ) {
					return null;
				}
				add_to = href_list["add_inv"];

				if ( !Lang13.Bool( Task13.User.get_active_hand() ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You have nothing in your hand to put on him.</span>" );
					return null;
				}

				dynamic _b = add_to; // Was a switch-case, sorry for the mess.
				if ( _b=="uniform" ) {
					
					if ( Lang13.Bool( this.uniform ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>He's already wearing something.</span>" );
						return null;
					} else {
						this.wearclothes( Task13.User.get_active_hand() );
					}
				} else if ( _b=="hat" ) {
					
					if ( Lang13.Bool( this.hat ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>He's already wearing something.</span>" );
						return null;
					} else {
						this.wearhat( Task13.User.get_active_hand() );
					}
				} else if ( _b=="glasses" ) {
					
					if ( Lang13.Bool( this.glasses ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>He's already wearing something.</span>" );
						return null;
					} else {
						this.wearglasses( Task13.User.get_active_hand() );
					}
				}
				this.show_inv( Task13.User );
			}
			base.Topic( href, href_list, (object)(hclient) );
			return null;
		}

		// Function from file: monkey.dm
		public override dynamic movement_delay(  ) {
			double tally = 0;
			double health_deficiency = 0;
			Ent_Static T = null;

			tally = 0;

			if ( Lang13.Bool( this.reagents ) ) {
				
				if ( ((Reagents)this.reagents).has_reagent( "hyperzine" ) ) {
					return -1;
				}

				if ( ((Reagents)this.reagents).has_reagent( "nuka_cola" ) ) {
					return -1;
				}
			}
			health_deficiency = 100 - Convert.ToDouble( this.health );

			if ( health_deficiency >= 45 ) {
				tally += health_deficiency / 25;
			}

			if ( Convert.ToDouble( this.bodytemperature ) < 283.22198486328125 ) {
				tally += ( 283.22198486328125 - Convert.ToDouble( this.bodytemperature ) ) / 10 * 1.75;
			}

			if ( this.loc is Tile_Simulated_Floor ) {
				T = this.loc;

				if ( ((dynamic)T).material == "phazon" ) {
					return -1;
				}
			}
			return tally + Convert.ToDouble( GlobalVars.config.monkey_delay );
		}

		// Function from file: monkey.dm
		public override void show_inv( dynamic user = null ) {
			bool has_breathable_mask = false;
			string TAB = null;
			string dat = null;
			Browser popup = null;

			((Mob)user).set_machine( this );
			has_breathable_mask = this.wear_mask is Obj_Item_Clothing_Mask;
			TAB = "&nbsp;&nbsp;&nbsp;&nbsp;";
			dat = new Txt( "\n	<B>Left Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=l_hand'>		" ).item( ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.v_abstract ) ? this.l_hand : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A><BR>\n	<B>Right Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=r_hand'>		" ).item( ( Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.v_abstract ) ? this.r_hand : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A><BR>\n	" ).ToString();
			dat += new Txt( "<BR><B>Back:</B> <A href='?src=" ).Ref( this ).str( ";item=back'> " ).item( ( Lang13.Bool( this.back ) && !Lang13.Bool( this.back.v_abstract ) ? this.back : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

			if ( has_breathable_mask && this.back is Obj_Item_Weapon_Tank ) {
				dat += new Txt( "<BR>" ).item( TAB ).str( "&#8627;<A href='?src=" ).Ref( this ).str( ";item=internal'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
			}
			dat += "<BR>";

			if ( this.canWearHats ) {
				
				if ( Lang13.Bool( this.hat ) ) {
					dat += new Txt( "<br><b>Headwear:</b> " ).item( this.hat ).str( " (<a href='?src=" ).Ref( this ).str( ";remove_inv=hat'>Remove</a>)" ).ToString();
				} else {
					dat += new Txt( "<br><b>Headwear:</b> <a href='?src=" ).Ref( this ).str( ";add_inv=hat'><font color=grey>Empty</font></a>" ).ToString();
				}
			}
			dat += new Txt( "<BR><B>Mask:</B> <A href='?src=" ).Ref( this ).str( ";item=mask'>		" ).item( ( Lang13.Bool( this.wear_mask ) && !Lang13.Bool( this.wear_mask.v_abstract ) ? this.wear_mask : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

			if ( this.canWearGlasses ) {
				
				if ( Lang13.Bool( this.glasses ) ) {
					dat += new Txt( "<br><b>Glasses:</b> " ).item( this.glasses ).str( " (<a href='?src=" ).Ref( this ).str( ";remove_inv=glasses'>Remove</a>)" ).ToString();
				} else {
					dat += new Txt( "<br><b>Glasses:</b> <a href='?src=" ).Ref( this ).str( ";add_inv=glasses'><font color=grey>Empty</font></a>" ).ToString();
				}
			}

			if ( this.canWearClothes ) {
				
				if ( Lang13.Bool( this.uniform ) ) {
					dat += new Txt( "<br><b>Uniform:</b> " ).item( this.uniform ).str( " (<a href='?src=" ).Ref( this ).str( ";remove_inv=uniform'>Remove</a>)" ).ToString();
				} else {
					dat += new Txt( "<br><b>Uniform:</b> <a href='?src=" ).Ref( this ).str( ";add_inv=uniform'><font color=grey>Empty</font></a>" ).ToString();
				}
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				dat += new Txt( "<BR><B>Handcuffed:</B> <A href='?src=" ).Ref( this ).str( ";item=handcuff'>Remove</A>" ).ToString();
			}
			dat += new Txt( "\n	<BR>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).Ref( this ).str( "'>Close</A>\n	" ).ToString();
			popup = new Browser( user, new Txt( "mob" ).Ref( this ).ToString(), "" + this, 340, 500 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: monkey.dm
		public override bool abiotic( bool? full_body = null ) {
			return Lang13.Bool( this.wear_mask ) || Lang13.Bool( this.l_hand ) || Lang13.Bool( this.r_hand ) || Lang13.Bool( this.back ) || Lang13.Bool( this.uniform ) || Lang13.Bool( this.hat );
		}

		// Function from file: monkey.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			this.uniform = null;
			this.hat = null;
			this.glasses = null;
			return null;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.update_hud();
			return null;
		}

		// Function from file: life.dm
		public override bool handle_fire(  ) {
			
			if ( base.handle_fire() ) {
				return false;
			}
			this.adjustFireLoss( 6 );
			return false;
		}

		// Function from file: life.dm
		public override int get_heat_protection_flags( dynamic temperature = null ) {
			int thermal_protection_flags = 0;

			thermal_protection_flags = 0;

			if ( Lang13.Bool( this.hat ) && ( this.hat.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.hat.body_parts_covered );
			}

			if ( Lang13.Bool( this.wear_mask ) && ( this.wear_mask.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.wear_mask.body_parts_covered );
			}

			if ( Lang13.Bool( this.uniform ) && ( this.uniform.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.uniform.body_parts_covered );
			}
			return thermal_protection_flags;
		}

		// Function from file: life.dm
		public override int get_cold_protection( dynamic thermal_protection_flags = null ) {
			double thermal_protection = 0;
			int max_protection = 0;

			thermal_protection = 0;

			if ( Lang13.Bool( this.hat ) ) {
				thermal_protection += ((Obj_Item)this.hat).return_thermal_protection();
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				thermal_protection += ((Obj_Item)this.wear_mask).return_thermal_protection();
			}

			if ( Lang13.Bool( this.uniform ) ) {
				thermal_protection += ((Obj_Item)this.uniform).return_thermal_protection();
			}
			max_protection = this.get_thermal_protection( this.get_thermal_protection_flags() );
			return Num13.MinInt( ((int)( thermal_protection )), max_protection );
		}

		// Function from file: life.dm
		public override int get_thermal_protection_flags(  ) {
			int thermal_protection_flags = 0;

			thermal_protection_flags = 0;

			if ( Lang13.Bool( this.hat ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.hat.body_parts_covered );
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.wear_mask.body_parts_covered );
			}

			if ( Lang13.Bool( this.uniform ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.uniform.body_parts_covered );
			}
			return thermal_protection_flags;
		}

		// Function from file: update_icons.dm
		public void update_inv_hat( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			string t_state = null;

			
			if ( Lang13.Bool( this.hat ) ) {
				t_state = this.hat.icon_state;
				this.overlays_standing[5] = new Image( "icons/mob/monkey_head.dmi", null, t_state );
			} else {
				this.overlays_standing[5] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public void update_inv_uniform( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;

			
			if ( Lang13.Bool( this.uniform ) ) {
				t_state = this.uniform.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.uniform.icon_state;
				}
				this.overlays_standing[1] = new Image( "icons/mob/monkey.dmi", null, t_state );
			} else {
				this.overlays_standing[1] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: monkey.dm
		public dynamic defense( dynamic power = null, string def_zone = null ) {
			int armor = 0;
			dynamic damage = null;

			armor = this.run_armor_check( def_zone, "melee", "Your armor has protected your " + def_zone + ".", "Your armor has softened hit to your " + def_zone + "." );

			if ( armor >= 2 ) {
				return 0;
			}

			if ( !Lang13.Bool( power ) ) {
				return 0;
			}
			damage = power;

			if ( armor != 0 ) {
				damage = damage / ( armor + 1 );
			}
			return damage;
		}

		// Function from file: monkey.dm
		public void wearglasses( dynamic G = null ) {
			dynamic oldglasses = null;

			
			if ( Lang13.Bool( G ) ) {
				
				if ( G is Obj_Item_Clothing_Glasses ) {
					oldglasses = null;

					if ( Lang13.Bool( this.glasses ) ) {
						oldglasses = this.glasses;
						this.glasses = null;
					}
					this.glasses = G;
					Task13.User.drop_item( this.glasses, this, true );
					this.regenerate_icons();

					if ( Lang13.Bool( oldglasses ) ) {
						Task13.User.put_in_hands( oldglasses );
					}
				}
			} else if ( Lang13.Bool( this.glasses ) ) {
				Task13.User.put_in_hands( this.glasses );
				this.glasses = null;
				this.regenerate_icons();
			}
			return;
		}

		// Function from file: monkey.dm
		public void wearclothes( dynamic C = null ) {
			dynamic olduniform = null;

			
			if ( Lang13.Bool( C ) ) {
				
				if ( C is Obj_Item_Clothing_Monkeyclothes ) {
					olduniform = null;

					if ( Lang13.Bool( this.uniform ) ) {
						olduniform = this.uniform;
						this.uniform = null;
					}
					this.uniform = C;
					Task13.User.drop_item( this.uniform, this, true );
					this.regenerate_icons();

					if ( Lang13.Bool( olduniform ) ) {
						Task13.User.put_in_hands( olduniform );
					}
				}
			} else if ( Lang13.Bool( this.uniform ) ) {
				Task13.User.put_in_hands( this.uniform );
				this.uniform = null;
				this.regenerate_icons();
			}
			return;
		}

		// Function from file: monkey.dm
		public void wearhat( dynamic H = null ) {
			dynamic oldhat = null;

			
			if ( Lang13.Bool( H ) ) {
				
				if ( H is Obj_Item_Clothing_Head ) {
					oldhat = null;

					if ( Lang13.Bool( this.hat ) ) {
						oldhat = this.hat;
						this.hat = null;
					}
					this.hat = H;
					Task13.User.drop_item( this.hat, this, true );
					this.regenerate_icons();

					if ( Lang13.Bool( oldhat ) ) {
						Task13.User.put_in_hands( oldhat );
					}
				}
			} else if ( Lang13.Bool( this.hat ) ) {
				Task13.User.put_in_hands( this.hat );
				this.hat = null;
				this.regenerate_icons();
			}
			return;
		}

		// Function from file: life.dm
		public void handle_changeling(  ) {
			
			if ( this.mind != null && this.mind.changeling != null ) {
				this.mind.changeling.regenerate();
			}
			return;
		}

		// Function from file: life.dm
		public void handle_random_events(  ) {
			
			if ( Rand13.PercentChance( 1 ) && Rand13.PercentChance( 2 ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.emote( "scratch" );
					return;
					return;
				}));
			}
			return;
		}

		// Function from file: life.dm
		public bool handle_regular_hud_updates(  ) {
			
			if ( !this.canWearHats && this.m_hatbg != null ) {
				
				if ( ((dynamic)this.m_hatbg).icon_state != "blank" ) {
					((dynamic)this.m_hatbg).icon_state = "blank";
				}
			}

			if ( !this.canWearClothes && this.m_suitclothesbg != null ) {
				
				if ( ((dynamic)this.m_suitclothesbg).icon_state != "blank" ) {
					((dynamic)this.m_suitclothesbg).icon_state = "blank";
				}
			}

			if ( !this.canWearGlasses && this.m_glassesbg != null ) {
				
				if ( ((dynamic)this.m_glassesbg).icon_state != "blank" ) {
					((dynamic)this.m_glassesbg).icon_state = "blank";
				}
			}

			if ( this.stat == 2 || this.mutations.Contains( 3 ) ) {
				this.sight |= GlobalVars.SEE_TURFS;
				this.sight |= GlobalVars.SEE_MOBS;
				this.sight |= GlobalVars.SEE_OBJS;
				this.see_in_dark = 8;
				this.see_invisible = 45;
			} else if ( this.stat != 2 ) {
				this.sight &= 65519;
				this.sight &= 65531;
				this.sight &= 65527;
				this.see_in_dark = 2;
				this.see_invisible = 25;
			}

			if ( this.healths != null ) {
				
				if ( this.stat != 2 ) {
					
					dynamic _a = this.health; // Was a switch-case, sorry for the mess.
					if ( 100<=_a&&_a<=Double.PositiveInfinity ) {
						((dynamic)this.healths).icon_state = "health0";
					} else if ( 80<=_a&&_a<=100 ) {
						((dynamic)this.healths).icon_state = "health1";
					} else if ( 60<=_a&&_a<=80 ) {
						((dynamic)this.healths).icon_state = "health2";
					} else if ( 40<=_a&&_a<=60 ) {
						((dynamic)this.healths).icon_state = "health3";
					} else if ( 20<=_a&&_a<=40 ) {
						((dynamic)this.healths).icon_state = "health4";
					} else if ( 0<=_a&&_a<=20 ) {
						((dynamic)this.healths).icon_state = "health5";
					} else {
						((dynamic)this.healths).icon_state = "health6";
					}
				} else {
					((dynamic)this.healths).icon_state = "health7";
				}
			}

			if ( this.pressure != null ) {
				((dynamic)this.pressure).icon_state = "pressure" + this.pressure_alert;
			}

			if ( this.pullin != null ) {
				((dynamic)this.pullin).icon_state = "pull" + ( this.pulling != null ? true : false );
			}

			if ( this.toxin != null ) {
				((dynamic)this.toxin).icon_state = "tox" + ( this.toxins_alert != 0 ? true : false );
			}

			if ( this.oxygen != null ) {
				((dynamic)this.oxygen).icon_state = "oxy" + ( this.oxygen_alert != 0 ? true : false );
			}

			if ( this.fire != null ) {
				((dynamic)this.fire).icon_state = "fire" + ( this.fire_alert != 0 ? 2 : 0 );
			}

			if ( this.bodytemp != null ) {
				
				dynamic _b = this.bodytemperature; // Was a switch-case, sorry for the mess.
				if ( 345<=_b&&_b<=Double.PositiveInfinity ) {
					((dynamic)this.bodytemp).icon_state = "temp4";
				} else if ( 335<=_b&&_b<=345 ) {
					((dynamic)this.bodytemp).icon_state = "temp3";
				} else if ( 327<=_b&&_b<=335 ) {
					((dynamic)this.bodytemp).icon_state = "temp2";
				} else if ( 316<=_b&&_b<=327 ) {
					((dynamic)this.bodytemp).icon_state = "temp1";
				} else if ( 300<=_b&&_b<=316 ) {
					((dynamic)this.bodytemp).icon_state = "temp0";
				} else if ( 295<=_b&&_b<=300 ) {
					((dynamic)this.bodytemp).icon_state = "temp-1";
				} else if ( 280<=_b&&_b<=295 ) {
					((dynamic)this.bodytemp).icon_state = "temp-2";
				} else if ( 260<=_b&&_b<=280 ) {
					((dynamic)this.bodytemp).icon_state = "temp-3";
				} else {
					((dynamic)this.bodytemp).icon_state = "temp-4";
				}
			}
			this.client.screen.Remove( GlobalVars.global_hud.blurry, GlobalVars.global_hud.druggy, GlobalVars.global_hud.vimpaired );

			if ( this.blind != null && this.stat != 2 ) {
				
				if ( Lang13.Bool( this.blinded ) ) {
					((dynamic)this.blind).layer = 18;
				} else {
					((dynamic)this.blind).layer = 0;

					if ( ( this.disabilities & 1 ) != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.vimpaired );
					}

					if ( Lang13.Bool( this.eye_blurry ) ) {
						this.client.screen.Add( GlobalVars.global_hud.blurry );
					}

					if ( this.druggy != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.druggy );
					}
				}
			}

			if ( this.stat != 2 ) {
				
				if ( Lang13.Bool( this.machine ) ) {
					
					if ( !( ((Ent_Static)this.machine).check_eye( this ) == true ) ) {
						this.reset_view( null );
					}
				} else if ( this.client != null && !this.client.adminobs && !this.isTeleViewing( this.client.eye ) ) {
					this.reset_view( null );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public bool handle_regular_status_updates(  ) {
			dynamic O = null;

			this.updatehealth();

			if ( this.stat == 2 ) {
				this.blinded = 1;
				this.silent = 0;
			} else {
				this.updatehealth();

				if ( Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_dead ) || !this.has_brain() ) {
					this.death();
					this.blinded = 1;
					this.stat = 2;
					this.silent = 0;
					return true;
				}

				if ( Convert.ToDouble( this.getOxyLoss() ) > 25 || Convert.ToDouble( GlobalVars.config.health_threshold_crit ) > Convert.ToDouble( this.health ) ) {
					
					if ( Convert.ToDouble( this.health ) <= 20 && Rand13.PercentChance( 1 ) ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.emote( "gasp" );
							return;
						}));
					}

					if ( !((Reagents)this.reagents).has_reagent( "inaprovaline" ) ) {
						this.adjustOxyLoss( 1 );
					}
					this.Paralyse( 3 );
				}

				if ( this.halloss > 100 ) {
					GlobalFuncs.to_chat( this, "<span class='notice'>You're in too much pain to keep going...</span>" );

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewersExcludeThis( null, this ) )) {
						O = _a;
						
						O.show_message( "<B>" + this + "</B> slumps to the ground, too weak to continue fighting.", 1 );
					}
					this.Paralyse( 10 );
					this.setHalLoss( 99 );
				}

				if ( this.paralysis != 0 ) {
					this.AdjustParalysis( -1 );
					this.blinded = 1;
					this.stat = 1;

					if ( this.halloss > 0 ) {
						this.adjustHalLoss( -3 );
					}
				} else if ( this.sleeping != 0 ) {
					this.handle_dreams();
					this.adjustHalLoss( -3 );
					this.sleeping = Num13.MaxInt( this.sleeping - 1, 0 );
					this.blinded = 1;
					this.stat = 1;

					if ( Rand13.PercentChance( 10 ) && Lang13.Bool( this.health ) && !this.hal_crit ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.emote( "snore" );
							return;
						}));
					}
				} else if ( this.resting != 0 ) {
					
					if ( this.halloss > 0 ) {
						this.adjustHalLoss( -3 );
					}
				} else if ( this.undergoing_hypothermia() >= 3 ) {
					this.stat = 1;
				} else {
					this.stat = 0;

					if ( this.halloss > 0 ) {
						this.adjustHalLoss( -1 );
					}
				}

				if ( ( this.sdisabilities & 1 ) != 0 ) {
					this.blinded = 1;
				} else if ( this.eye_blind != 0 ) {
					this.eye_blind = Num13.MaxInt( this.eye_blind - 1, 0 );
					this.blinded = 1;
				} else if ( Lang13.Bool( this.eye_blurry ) ) {
					this.eye_blurry = Num13.MaxInt( Convert.ToInt32( this.eye_blurry - 1 ), 0 );
				}

				if ( ( this.sdisabilities & 4 ) != 0 ) {
					this.ear_deaf = Num13.MaxInt( this.ear_deaf, 1 );
				} else if ( this.ear_deaf != 0 ) {
					this.ear_deaf = Num13.MaxInt( this.ear_deaf - 1, 0 );
				} else if ( this.ear_damage < 25 ) {
					this.ear_damage = Num13.MaxInt( ((int)( this.ear_damage - 0.05 )), 0 );
				}

				if ( this.stunned != 0 ) {
					this.AdjustStunned( -1 );
				}

				if ( this.weakened != 0 ) {
					this.weakened = Num13.MaxInt( ((int)( this.weakened - 1 )), 0 );
				}

				if ( Lang13.Bool( this.stuttering ) ) {
					this.stuttering = Num13.MaxInt( Convert.ToInt32( this.stuttering - 1 ), 0 );
				}

				if ( this.silent != 0 ) {
					this.silent = Num13.MaxInt( this.silent - 1, 0 );
				}

				if ( this.druggy != 0 ) {
					this.druggy = Num13.MaxInt( this.druggy - 1, 0 );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public void handle_chemicals_in_body(  ) {
			double light_amount = 0;
			Ent_Static T = null;

			
			if ( Lang13.Bool( this.alien ) ) {
				light_amount = 0;

				if ( this.loc is Tile ) {
					T = this.loc;

					if ( Lang13.Bool( ((dynamic)T).dynamic_lighting ) ) {
						light_amount = ((Tile)T).get_lumcount( 0.5 );
					} else {
						light_amount = 5;
					}
				}
				this.nutrition += light_amount;
				this.traumatic_shock -= light_amount;

				if ( this.nutrition > 500 ) {
					this.nutrition = 500;
				}

				if ( light_amount > 2 ) {
					this.adjustBruteLoss( -1 );
					this.adjustToxLoss( -1 );
					this.adjustOxyLoss( -1 );
				}
			}
			this.burn_calories( 0.15, true );

			if ( Lang13.Bool( this.reagents ) ) {
				((Reagents)this.reagents).metabolize( this, this.alien );
			}

			if ( Lang13.Bool( this.drowsyness ) ) {
				this.drowsyness--;
				this.eye_blurry = Num13.MaxInt( 2, Convert.ToInt32( this.eye_blurry ) );

				if ( Rand13.PercentChance( 5 ) ) {
					this.sleeping += 1;
					this.Paralyse( 5 );
				}
			}
			this.confused = Num13.MaxInt( 0, this.confused - 1 );

			if ( this.resting != 0 ) {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 5 );
			} else {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 1 );
			}
			this.updatehealth();
			return;
		}

		// Function from file: life.dm
		public void handle_temperature_damage( dynamic body_part = null, dynamic exposed_temperature = null, dynamic exposed_intensity = null ) {
			int discomfort = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}
			discomfort = Num13.MinInt( ((int)( Math.Abs( Convert.ToDouble( exposed_temperature - this.bodytemperature ) ) * Convert.ToDouble( exposed_intensity ) / 2000000 )), 1 );

			if ( Convert.ToDouble( exposed_temperature ) > Convert.ToDouble( this.bodytemperature ) ) {
				this.adjustFireLoss( discomfort * 20 );
			} else {
				this.adjustFireLoss( discomfort * 5 );
			}
			return;
		}

		// Function from file: life.dm
		public void handle_environment( GasMixture environment = null ) {
			bool spaceproof = false;
			dynamic loc_temp = null;
			double environment_heat_capacity = 0;
			dynamic heat_turf = null;
			double thermal_loss = 0;
			int thermal_protection = 0;
			dynamic pressure = null;
			dynamic adjusted_pressure = null;

			
			if ( !( environment != null ) || Lang13.Bool( this.flags & 128 ) ) {
				return;
			}
			spaceproof = false;

			if ( Lang13.Bool( this.hat ) && this.hat is Obj_Item_Clothing_Head_Helmet_Space && Lang13.Bool( this.uniform ) && this.uniform is Obj_Item_Clothing_Monkeyclothes_Space ) {
				spaceproof = true;
			}
			loc_temp = this.get_loc_temp( environment );
			environment_heat_capacity = environment.heat_capacity();

			if ( GlobalFuncs.get_turf( this ) is Tile_Space ) {
				heat_turf = GlobalFuncs.get_turf( this );
				environment_heat_capacity = heat_turf.heat_capacity;
			}

			if ( !this.on_fire ) {
				
				if ( Convert.ToDouble( loc_temp ) < Convert.ToDouble( this.get_skin_temperature() ) ) {
					thermal_loss = this.get_thermal_loss( environment );
					this.bodytemperature -= thermal_loss;
				} else {
					thermal_protection = this.get_thermal_protection( this.get_heat_protection_flags( loc_temp ) );

					if ( thermal_protection < 1 ) {
						this.bodytemperature += Num13.MinInt( ((int)( ( 1 - thermal_protection ) * Convert.ToDouble( ( loc_temp - this.get_skin_temperature() ) / 80 ) )), 10 );
					}
				}
			}

			if ( this.stat == 2 ) {
				this.bodytemperature += ( ( environment.temperature ??0) - Convert.ToDouble( this.bodytemperature ) ) * environment_heat_capacity * 0.1 / ( environment_heat_capacity + 270000 );
			}
			pressure = environment.return_pressure();
			adjusted_pressure = this.calculate_affecting_pressure( pressure );

			dynamic _a = adjusted_pressure; // Was a switch-case, sorry for the mess.
			if ( 550<=_a&&_a<=Double.PositiveInfinity ) {
				this.adjustBruteLoss( Num13.MinInt( Convert.ToInt32( ( adjusted_pressure / 550 - 1 ) * 4 ), 4 ) );
				this.pressure_alert = 2;
			} else if ( 325<=_a&&_a<=550 ) {
				this.pressure_alert = 1;
			} else if ( 50<=_a&&_a<=325 ) {
				this.pressure_alert = 0;
			} else if ( 20<=_a&&_a<=50 ) {
				
				if ( !spaceproof ) {
					this.pressure_alert = -1;
				}
			} else {
				
				if ( !spaceproof ) {
					
					if ( !this.mutations.Contains( 2 ) ) {
						this.adjustBruteLoss( 2 );
						this.pressure_alert = -2;
					} else {
						this.pressure_alert = -1;
					}
				}
			}
			return;
		}

		// Function from file: life.dm
		public bool handle_breath( dynamic breath = null ) {
			int safe_oxygen_min = 0;
			int safe_co2_max = 0;
			double safe_toxins_max = 0;
			int safe_toxins_mask = 0;
			double SA_para_min = 0;
			double SA_sleep_min = 0;
			dynamic oxygen_used = null;
			dynamic breath_pressure = null;
			dynamic O2_pp = null;
			dynamic Toxins_pp = null;
			dynamic CO2_pp = null;
			double ratio = 0;
			dynamic ratio2 = null;
			Gas_SleepingAgent SA = null;
			double SA_pp = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 || Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( breath ) || breath.total_moles == 0 ) {
				this.adjustOxyLoss( 7 );
				this.oxygen_alert = Num13.MaxInt( this.oxygen_alert, 1 );
				return false;
			}
			safe_oxygen_min = 16;
			safe_co2_max = 10;
			safe_toxins_max = 0.5;
			safe_toxins_mask = 5;
			SA_para_min = 0.5;
			SA_sleep_min = 5;
			oxygen_used = 0;
			breath_pressure = ((GasMixture)breath).f_total_moles() * breath.temperature * 8.314 / 0.5;
			O2_pp = breath.oxygen / ((GasMixture)breath).f_total_moles() * breath_pressure;
			Toxins_pp = breath.toxins / ((GasMixture)breath).f_total_moles() * breath_pressure;
			CO2_pp = breath.carbon_dioxide / ((GasMixture)breath).f_total_moles() * breath_pressure;

			if ( Convert.ToDouble( O2_pp ) < safe_oxygen_min ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "gasp" );
						return;
					}));
				}

				if ( O2_pp == 0 ) {
					O2_pp = 0.01;
				}
				ratio = safe_oxygen_min / Convert.ToDouble( O2_pp );
				this.adjustOxyLoss( Num13.MinInt( ((int)( ratio * 5 )), 7 ) );
				oxygen_used = breath.oxygen * ratio / 6;
				this.oxygen_alert = Num13.MaxInt( this.oxygen_alert, 1 );
			} else {
				this.adjustOxyLoss( -5 );
				oxygen_used = breath.oxygen / 6;
				this.oxygen_alert = 0;
			}
			breath.oxygen -= oxygen_used;
			breath.carbon_dioxide += oxygen_used;

			if ( Convert.ToDouble( CO2_pp ) > safe_co2_max ) {
				
				if ( !( this.co2overloadtime != 0 ) ) {
					this.co2overloadtime = Game13.time;
				} else if ( Game13.time - this.co2overloadtime > 120 ) {
					this.Paralyse( 3 );
					this.adjustOxyLoss( 3 );

					if ( Game13.time - this.co2overloadtime > 300 ) {
						this.adjustOxyLoss( 8 );
					}
				}

				if ( Rand13.PercentChance( 20 ) ) {
					this.emote( "cough" );
				}
			} else {
				this.co2overloadtime = 0;
			}

			if ( Convert.ToDouble( Toxins_pp ) > safe_toxins_max ) {
				ratio2 = breath.toxins / safe_toxins_max * 10;

				if ( Lang13.Bool( this.wear_mask ) ) {
					
					if ( Lang13.Bool( this.wear_mask.flags & 8192 ) ) {
						
						if ( Convert.ToDouble( breath.toxins ) > safe_toxins_mask ) {
							ratio2 = breath.toxins / safe_toxins_mask * 10;
						} else {
							ratio2 = 0;
						}
					}
				}

				if ( Lang13.Bool( ratio2 ) ) {
					
					if ( Lang13.Bool( this.reagents ) ) {
						((Reagents)this.reagents).add_reagent( "plasma", ( Convert.ToDouble( ratio2 ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( ratio2 ) >= 10 ? ((dynamic)( 10 )) : ratio2 ) ) );
					}
					this.toxins_alert = Num13.MaxInt( this.toxins_alert, 1 );
				}
			} else {
				this.toxins_alert = 0;
			}

			if ( breath.trace_gases.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( breath.trace_gases, typeof(Gas_SleepingAgent) )) {
					SA = _a;
					
					SA_pp = ( SA.moles ??0) / Convert.ToDouble( ((GasMixture)breath).f_total_moles() ) * Convert.ToDouble( breath_pressure );

					if ( SA_pp > SA_para_min ) {
						this.Paralyse( 3 );

						if ( SA_pp > SA_sleep_min ) {
							this.sleeping = Num13.MaxInt( this.sleeping + 2, 10 );
						}
					} else if ( SA_pp > 0.01 ) {
						
						if ( Rand13.PercentChance( 20 ) ) {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								this.emote( Rand13.Pick(new object [] { "giggle", "laugh" }) );
								return;
							}));
						}
					}
				}
			}

			if ( Convert.ToDouble( breath.temperature ) > 339.41 ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You feel a searing heat in your lungs!</span>" );
				}
				this.fire_alert = Num13.MaxInt( this.fire_alert, 2 );
			} else {
				this.fire_alert = 0;
			}
			return true;
		}

		// Function from file: life.dm
		public dynamic get_breath_from_internal( double volume_needed = 0 ) {
			
			if ( Lang13.Bool( this.v_internal ) ) {
				
				if ( !( this.contents.Find( this.v_internal ) != 0 ) ) {
					this.v_internal = null;
				}

				if ( !Lang13.Bool( this.wear_mask ) || !Lang13.Bool( this.wear_mask.flags | 8 ) ) {
					this.v_internal = null;
				}

				if ( Lang13.Bool( this.v_internal ) ) {
					
					if ( this.internals != null ) {
						((dynamic)this.internals).icon_state = "internal1";
					}
					return ((Obj_Item_Weapon_Tank)this.v_internal).remove_air_volume( volume_needed );
				} else if ( this.internals != null ) {
					((dynamic)this.internals).icon_state = "internal0";
				}
			}
			return null;
		}

		// Function from file: life.dm
		public void breathe(  ) {
			GasMixture environment = null;
			dynamic breath = null;
			Ent_Static location_as_object = null;
			Ent_Static location_as_object2 = null;
			dynamic breath_moles = null;
			bool block = false;
			Obj_Effect_Effect_Smoke_Chem smoke = null;
			Ent_Static location_as_object3 = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( Lang13.Bool( this.reagents ) ) {
				
				if ( ((Reagents)this.reagents).has_reagent( "lexorin" ) ) {
					return;
				}
			}

			if ( !( this.loc != null ) ) {
				return;
			}
			environment = this.loc.return_air();

			if ( Convert.ToDouble( this.health ) < 0 ) {
				this.losebreath++;
			}

			if ( this.losebreath > 0 ) {
				this.losebreath--;

				if ( Rand13.PercentChance( 75 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "gasp" );
						return;
					}));
				}

				if ( this.loc is Obj ) {
					location_as_object = this.loc;
					((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
				}
			} else {
				breath = this.get_breath_from_internal( 0.5 );

				if ( !Lang13.Bool( breath ) ) {
					
					if ( this.loc is Obj ) {
						location_as_object2 = this.loc;
						breath = ((dynamic)location_as_object2).handle_internal_lifeform( this, 0.5 );
					} else if ( this.loc is Tile ) {
						breath_moles = environment.f_total_moles() * 0.5 / 2500;
						breath = this.loc.remove_air( breath_moles );
						block = false;

						if ( Lang13.Bool( this.wear_mask ) ) {
							
							if ( this.wear_mask is Obj_Item_Clothing_Mask_Gas ) {
								block = true;
							}
						}

						if ( !block ) {
							
							foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Obj_Effect_Effect_Smoke_Chem) )) {
								smoke = _a;
								

								if ( Lang13.Bool( smoke.reagents.total_volume ) ) {
									((Reagents)smoke.reagents).reaction( this, GlobalVars.INGEST );
									Task13.Schedule( 5, (Task13.Closure)(() => {
										
										if ( smoke != null ) {
											smoke.reagents.copy_to( this, 10 );
										}
										return;
									}));
									break;
								}
							}
						}
					}
				} else if ( this.loc is Obj ) {
					location_as_object3 = this.loc;
					((dynamic)location_as_object3).handle_internal_lifeform( this, 0 );
				}
			}
			this.handle_breath( breath );

			if ( Lang13.Bool( breath ) ) {
				this.loc.assume_air( breath );
			}
			return;
		}

		// Function from file: life.dm
		public bool handle_virus_updates(  ) {
			Disease D = null;
			dynamic ID = null;
			dynamic V = null;
			dynamic ID2 = null;
			Disease2_Disease V2 = null;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( Convert.ToDouble( this.bodytemperature ) > 406 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
					D = _a;
					
					D.f_cure();
				}

				foreach (dynamic _b in Lang13.Enumerate( this.virus2 )) {
					ID = _b;
					
					V = this.virus2[ID];
					V.cure( this );
				}
			}
			this.findAirborneVirii();

			foreach (dynamic _c in Lang13.Enumerate( this.virus2 )) {
				ID2 = _c;
				
				V2 = this.virus2[ID2];

				if ( V2 == null ) {
					Task13.Crash( "virus2 nulled before calling activate()" );
				} else {
					V2.activate( this );
				}

				if ( !( V2 != null ) ) {
					continue;
				}

				if ( ( ((int)( V2.antigen ??0 )) & ((int)( this.antibodies ??0 )) ) != 0 ) {
					V2.dead = true;
				}
			}
			return false;
		}

		// Function from file: life.dm
		public bool findAirborneVirii(  ) {
			Obj_Effect_Decal_Cleanable_Blood B = null;
			dynamic ID = null;
			Disease2_Disease V = null;
			Obj_Effect_Decal_Cleanable_Mucus M = null;
			dynamic ID2 = null;
			Disease2_Disease V2 = null;

			
			if ( GlobalVars.blood_virus_spreading_disabled ) {
				return false;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Obj_Effect_Decal_Cleanable_Blood) )) {
				B = _b;
				

				if ( B.virus2.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( B.virus2 )) {
						ID = _a;
						
						V = B.virus2[ID];

						if ( GlobalFuncs.infect_virus2( this, V, null, "(Airborne from blood)" ) ) {
							return true;
						}
					}
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Obj_Effect_Decal_Cleanable_Mucus) )) {
				M = _d;
				

				if ( M.virus2.len != 0 ) {
					
					foreach (dynamic _c in Lang13.Enumerate( M.virus2 )) {
						ID2 = _c;
						
						V2 = M.virus2[ID2];

						if ( GlobalFuncs.infect_virus2( this, V2, null, "(Airborne from mucus)" ) ) {
							return true;
						}
					}
				}
			}
			return false;
		}

		// Function from file: life.dm
		public void handle_mutations_and_radiation(  ) {
			dynamic C = null;
			double rads = 0;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( this.getFireLoss() != 0 ) {
				
				if ( this.mutations.Contains( 106 ) || Rand13.PercentChance( 50 ) ) {
					
					dynamic _a = this.getFireLoss(); // Was a switch-case, sorry for the mess.
					if ( 1<=_a&&_a<=50 ) {
						this.adjustFireLoss( -1 );
					} else if ( 51<=_a&&_a<=100 ) {
						this.adjustFireLoss( -5 );
					}
				}
			}

			if ( this.mutations.Contains( 4 ) && Convert.ToDouble( this.health ) <= 25 ) {
				this.mutations.Remove( 4 );
				GlobalFuncs.to_chat( this, "<span class='warning'>You suddenly feel very weak.</span>" );
				this.Weaken( 3 );
				this.emote( "collapse" );

				if ( ((Reagents)this.reagents).has_reagent( "creatine" ) ) {
					C = ((Reagents)this.reagents).get_reagent( "creatine" );
					((Reagent_Creatine)C).dehulk( this );
				}
			}

			if ( this.radiation != 0 ) {
				
				if ( this is Mob_Living_Carbon_Monkey_Diona ) {
					rads = this.radiation / 25;
					this.radiation -= rads;
					this.nutrition += rads;
					this.heal_overall_damage( rads, rads );
					this.adjustOxyLoss( -rads );
					this.adjustToxLoss( -rads );
					this.updatehealth();
					return;
				}

				if ( this.radiation > 100 ) {
					this.radiation = 100;
					this.Weaken( 10 );
					GlobalFuncs.to_chat( this, "<span class='warning'>You feel weak.</span>" );
					this.emote( "collapse" );
				}

				dynamic _b = this.radiation; // Was a switch-case, sorry for the mess.
				if ( 1<=_b&&_b<=49 ) {
					this.radiation--;

					if ( Rand13.PercentChance( 25 ) ) {
						this.adjustToxLoss( 1 );
						this.updatehealth();
					}
				} else if ( 50<=_b&&_b<=74 ) {
					this.radiation -= 2;
					this.adjustToxLoss( 1 );

					if ( Rand13.PercentChance( 5 ) ) {
						this.radiation -= 5;
						this.Weaken( 3 );
						GlobalFuncs.to_chat( this, "<span class='warning'>You feel weak.</span>" );
						this.emote( "collapse" );
					}
					this.updatehealth();
				} else if ( 75<=_b&&_b<=100 ) {
					this.radiation -= 3;
					this.adjustToxLoss( 3 );

					if ( Rand13.PercentChance( 1 ) ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>You mutate!</span>" );
						GlobalFuncs.randmutb( this );
						GlobalFuncs.domutcheck( this, null );
						this.emote( "gasp" );
					}
					this.updatehealth();
				}
			}
			return;
		}

		// Function from file: life.dm
		public void handle_disabilities(  ) {
			
			if ( ( this.disabilities & 2 ) != 0 ) {
				
				if ( Rand13.PercentChance( 1 ) && this.paralysis < 10 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You have a seizure!</span>" );
					this.Paralyse( 10 );
				}
			}

			if ( ( this.disabilities & 4 ) != 0 ) {
				
				if ( Rand13.PercentChance( 5 ) && this.paralysis <= 1 ) {
					this.drop_item();
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "cough" );
						return;
						return;
					}));
				}
			}

			if ( ( this.disabilities & 8 ) != 0 ) {
				
				if ( Rand13.PercentChance( 10 ) && this.paralysis <= 1 ) {
					this.Stun( 10 );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "twitch" );
						return;
						return;
					}));
				}
			}

			if ( ( this.disabilities & 16 ) != 0 ) {
				
				if ( Rand13.PercentChance( 10 ) ) {
					this.stuttering = Num13.MaxInt( 10, Convert.ToInt32( this.stuttering ) );
				}
			}
			return;
		}

		// Function from file: life.dm
		public override dynamic calculate_affecting_pressure( dynamic pressure = null ) {
			base.calculate_affecting_pressure( (object)(pressure) );
			return pressure;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			GasMixture environment = null;
			Ent_Static location_as_object = null;
			Obj_Item_Weapon_Grab G = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.monkeyizing ) {
				return false;
			}

			if ( this.update_muts ) {
				this.update_muts = false;
				GlobalFuncs.domutcheck( this, null, true );
			}
			base.Life();

			if ( this.loc != null ) {
				environment = this.loc.return_air();
			}

			if ( this.stat != 2 ) {
				
				if ( !( this is Mob_Living_Carbon_Monkey_Diona ) ) {
					
					if ( GlobalVars.air_master.current_cycle % 4 == 2 ) {
						this.breathe();
					} else if ( this.loc is Obj ) {
						location_as_object = this.loc;
						((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
					}
				}
				this.handle_changeling();
				this.handle_mutations_and_radiation();
				this.handle_chemicals_in_body();
				this.handle_disabilities();
				this.handle_virus_updates();
			}
			this.blinded = null;

			if ( environment != null ) {
				this.handle_environment( environment );
			}
			this.handle_body_temperature();
			this.handle_fire();
			this.handle_regular_status_updates();
			this.update_canmove();

			if ( this.client != null ) {
				this.handle_regular_hud_updates();
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Grab) )) {
				G = _a;
				
				G.process();
			}

			if ( !( this.client != null ) && this.stat == 0 ) {
				
				if ( Rand13.PercentChance( 33 ) && this.canmove && this.loc is Tile && !( this.pulledby != null ) ) {
					Map13.Step( this, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) ) );
				}

				if ( Rand13.PercentChance( 1 ) ) {
					this.emote( Rand13.Pick(new object [] { "scratch", "jump", "roll", "tail" }) );
				}
			}
			return false;
		}

		// Function from file: vgstation13.dme
		public override bool equip_to_slot( dynamic W = null, dynamic slot = null, bool? redraw_mob = null ) {
			redraw_mob = redraw_mob ?? true;

			
			if ( !Lang13.Bool( slot ) ) {
				return false;
			}

			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( W == this.get_active_hand() ) {
				this.u_equip( W, false );
			}

			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				this.back = W;
				((Obj_Item)W).equipped( this, slot );
				this.update_inv_back( redraw_mob );
			} else if ( _a==2 ) {
				this.wear_mask = W;
				((Obj_Item)W).equipped( this, slot );
				this.update_inv_wear_mask( redraw_mob );
			} else if ( _a==3 ) {
				this.handcuffed = W;
				this.update_inv_handcuffed( redraw_mob );
			} else if ( _a==19 ) {
				this.legcuffed = W;
				((Obj_Item)W).equipped( this, slot );
				this.update_inv_legcuffed( redraw_mob );
			} else if ( _a==4 ) {
				this.l_hand = W;
				((Obj_Item)W).equipped( this, slot );
				this.update_inv_l_hand( redraw_mob );
			} else if ( _a==5 ) {
				this.r_hand = W;
				((Obj_Item)W).equipped( this, slot );
				this.update_inv_r_hand( redraw_mob );
			} else if ( _a==18 ) {
				W.loc = this.back;
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You are trying to eqip this item to an unsupported inventory slot. How the heck did you manage that? Stop it...</span>" );
				return false;
			}
			W.layer = 20;
			return false;
		}

		// Function from file: examine.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string msg = null;
			string butchery = null;
			ButcheringProduct B = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<EM>" ).item().str( "</EM>!\n" ).ToString();

			if ( Lang13.Bool( this.handcuffed ) ) {
				msg += new Txt( "It is " ).icon( this.handcuffed ).str( " handcuffed!\n" ).ToString();
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				msg += new Txt( "It has " ).icon( this.wear_mask ).str( " " ).a( this.wear_mask ).item().str( " on its head.\n" ).ToString();
			}

			if ( Lang13.Bool( this.l_hand ) ) {
				msg += new Txt( "It has " ).icon( this.l_hand ).str( " " ).a( this.l_hand ).item().str( " in its left hand.\n" ).ToString();
			}

			if ( Lang13.Bool( this.r_hand ) ) {
				msg += new Txt( "It has " ).icon( this.r_hand ).str( " " ).a( this.r_hand ).item().str( " in its right hand.\n" ).ToString();
			}

			if ( Lang13.Bool( this.back ) ) {
				msg += new Txt( "It has " ).icon( this.back ).str( " " ).a( this.back ).item().str( " on its back.\n" ).ToString();
			}

			if ( this.isDead() ) {
				msg += "<span class='deadsay'>It is limp and unresponsive, with no signs of life.</span>\n";
			} else {
				msg += "<span class='warning'>";

				if ( this.getBruteLoss() != 0 ) {
					
					if ( this.getBruteLoss() < 30 ) {
						msg += "It has minor bruising.\n";
					} else {
						msg += "<B>It has severe bruising!</B>\n";
					}
				}

				if ( this.getFireLoss() != 0 ) {
					
					if ( this.getFireLoss() < 30 ) {
						msg += "It has minor burns.\n";
					} else {
						msg += "<B>It has severe burns!</B>\n";
					}
				}

				if ( this.stat == 1 ) {
					msg += "It isn't responding to anything around it; it seems to be asleep.\n";
				}
				msg += "</span>";
			}

			if ( this.digitalcamo ) {
				msg += "It is repulsively uncanny!\n";
			}
			butchery = "";

			if ( this.butchering_drops != null && this.butchering_drops.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.butchering_drops, typeof(ButcheringProduct) )) {
					B = _a;
					
					butchery = "" + butchery + B.desc_modifier( this );
				}
			}

			if ( Lang13.Bool( butchery ) ) {
				msg += "<span class='info'>" + butchery + "</span>";
			}
			msg += "*---------*</span>";
			GlobalFuncs.to_chat( user, msg );
			return null;
		}

		// Function from file: vgstation13.dme
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			type = type ?? 1;

			string param = null;
			int t1 = 0;
			bool muzzled = false;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( this.timestopped ) {
				return;
			}
			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( String13.FindIgnoreCase( act, "s", -1, 0 ) != 0 && !( String13.FindIgnoreCase( act, "_", -2, 0 ) != 0 ) ) {
				act = String13.SubStr( act, 1, Lang13.Length( act ) );
			}
			muzzled = this.wear_mask is Obj_Item_Clothing_Mask_Muzzle;

			dynamic _a = act; // Was a switch-case, sorry for the mess.
			if ( _a=="me" ) {
				
				if ( this.silent != 0 ) {
					return;
				}

				if ( this.client != null ) {
					
					if ( ( this.client.prefs.muted & 1 ) != 0 ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>You cannot send IC messages (muted).</span>" );
						return;
					}

					if ( this.client.handle_spam_prevention( message, 1 ) ) {
						return;
					}
				}

				if ( Lang13.Bool( this.stat ) ) {
					return;
				}

				if ( !Lang13.Bool( message ) ) {
					return;
				}
				this.custom_emote( type, message ); return;
			} else if ( _a=="custom" ) {
				this.custom_emote( type, message ); return;
			} else if ( _a=="airguitar" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> is strumming the air and headbanging like a safari chimp." ).ToString();
					type = 1;
				}
			} else if ( _a=="blink_r" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> blinks rapidly." ).ToString();
				type = 1;
			} else if ( _a=="sign" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> signs" ).item( ( Lang13.Bool( String13.ParseNumber( param ) ) ? " the number " + String13.ParseNumber( param ) : null ) ).str( "." ).ToString();
					type = 1;
				}
			} else if ( _a=="scratch" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> scratches." ).ToString();
					type = 1;
				}
			} else if ( _a=="whimper" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> whimpers." ).ToString();
					type = 2;
				}
			} else if ( _a=="roar" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> roars." ).ToString();
					type = 2;
				}
			} else if ( _a=="tail" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> waves his tail." ).ToString();
				type = 1;
			} else if ( _a=="gasp" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> gasps." ).ToString();
				type = 2;
			} else if ( _a=="shiver" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> shivers." ).ToString();
				type = 2;
			} else if ( _a=="drool" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> drools." ).ToString();
				type = 1;
			} else if ( _a=="paw" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> flails his paw." ).ToString();
					type = 1;
				}
			} else if ( _a=="scretch" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> scretches." ).ToString();
					type = 2;
				}
			} else if ( _a=="choke" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> chokes." ).ToString();
				type = 2;
			} else if ( _a=="moan" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> moans!" ).ToString();
				type = 2;
			} else if ( _a=="nod" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> nods his head." ).ToString();
				type = 1;
			} else if ( _a=="sit" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> sits down." ).ToString();
				type = 1;
			} else if ( _a=="sway" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> sways around dizzily." ).ToString();
				type = 1;
			} else if ( _a=="sulk" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> sulks down sadly." ).ToString();
				type = 1;
			} else if ( _a=="twitch" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> twitches violently." ).ToString();
				type = 1;
			} else if ( _a=="dance" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> dances around happily." ).ToString();
					type = 1;
				}
			} else if ( _a=="roll" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> rolls." ).ToString();
					type = 1;
				}
			} else if ( _a=="shake" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> shakes his head." ).ToString();
				type = 1;
			} else if ( _a=="gnarl" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this.name ).item().str( "</B> gnarls and shows his teeth.." ).ToString();
					type = 2;
				}
			} else if ( _a=="jump" ) {
				message = new Txt( "<B>" ).The( this.name ).item().str( "</B> jumps!" ).ToString();
				type = 1;
			} else if ( _a=="spin" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> spins out of control!" ).ToString();
				type = 1;
			} else if ( _a=="collapse" ) {
				this.Paralyse( 2 );
				message = new Txt( "<B>" ).The( this ).item().str( "</B> collapses!" ).ToString();
				type = 2;
			} else if ( _a=="deathgasp" ) {
				message = new Txt( "<b>" ).The( this.name ).item().str( "</b> lets out a faint chimper as it collapses and stops moving..." ).ToString();
				type = 1;
			} else if ( _a=="cough" ) {
				
				if ( !muzzled ) {
					message = "<B>" + this + "</B> coughs!";
				} else {
					message = "<B>" + this + "</B> makes a strong noise.";
				}
				type = 2;
			} else if ( _a=="help" ) {
				GlobalFuncs.to_chat( this, "choke, collapse, cough, dance, deathgasp, drool, gasp, shiver, gnarl, jump, paw, moan, nod, roar, roll, scratch,\nscretch, shake, sign-#, sit, sulk, sway, tail, twitch, whimper" );
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				
				if ( this.client != null ) {
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]EMOTE: " + ( "" + this.name + "/" + this.key + " (@" + this.x + "," + this.y + "," + this.z + "): " + message ) ) );
				}

				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _b;
						
						O.show_message( message, type );
					}
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						O2 = _c;
						
						O2.show_message( message, type );
					}
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			dynamic O = null;

			
			if ( this.stat == 2 ) {
				return null;
			}

			if ( this.healths != null ) {
				((dynamic)this.healths).icon_state = "health5";
			}
			this.stat = 2;

			if ( !( gibbed == true ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					
					O.show_message( "<b>The " + this.name + "</b> lets out a faint chimper as it collapses and stops moving...", 1 );
				}
			}
			this.update_canmove();

			if ( this.blind != null ) {
				((dynamic)this.blind).layer = 0;
			}
			((GameMode)GlobalVars.ticker.mode).check_win();
			return base.death( gibbed );
		}

		// Function from file: death.dm
		public override void dust(  ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.dropBorers( true );
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "dust-m", 15 );
			new Obj_Effect_Decal_Cleanable_Ash( this.loc );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "gibbed-m", 15 );
			GlobalFuncs.gibs( this.loc, this.viruses, this.dna );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			return;
		}

		// Function from file: ventcrawl.dm
		public override bool can_ventcrawl(  ) {
			return true;
		}

		// Function from file: other_mobs.dm
		public override void RestrainedClickOn( Ent_Static A = null ) {
			Ent_Static ML = null;
			dynamic dam_zone = null;
			dynamic armor = null;
			dynamic O = null;
			Disease D = null;
			dynamic O2 = null;

			
			if ( this.a_intent != "hurt" || !( A is Mob ) ) {
				return;
			}
			this.delayNextAttack( 10 );

			if ( this.wear_mask is Obj_Item_Clothing_Mask_Muzzle ) {
				return;
			}
			ML = A;
			dam_zone = GlobalFuncs.ran_zone( Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" }) );
			armor = ((dynamic)ML).run_armor_check( dam_zone, "melee" );

			if ( Rand13.PercentChance( 75 ) ) {
				((dynamic)ML).apply_damage( Rand13.Int( 1, 3 ), "brute", dam_zone, armor );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, ML ) )) {
					O = _a;
					
					O.show_message( "<span class='danger'>" + this.name + " has bit " + ML + "!</span>", 1 );
				}

				if ( Convert.ToDouble( armor ) >= 2 ) {
					return;
				}

				if ( ML is Mob_Living_Carbon_Monkey ) {
					
					foreach (dynamic _b in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
						D = _b;
						

						if ( D is Disease_JungleFever ) {
							((dynamic)ML).contract_disease( D, 1, 0 );
						}
					}
				}
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, ML ) )) {
					O2 = _c;
					
					O2.show_message( "<span class='danger'>" + this + " has attempted to bite " + ML + "!</span>", 1 );
				}
			}
			return;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool proximity_flag = false, string _params = null ) {
			
			if ( A is Mob ) {
				this.delayNextAttack( 10 );
			}
			A.attack_paw( this );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Crawl through Vent", desc: "Enter an air vent and crawl through the pipe system.", group: "Object" )]
		public void ventcrawl(  ) {
			dynamic pipe = null;

			pipe = this.start_ventcrawl();

			if ( Lang13.Bool( pipe ) ) {
				this.handle_ventcrawl( pipe );
			}
			return;
		}

		// Function from file: monkey.dm
		[Verb]
		[VerbInfo( name: "Remove Internals", group: "IC" )]
		public void removeinternal(  ) {
			this.v_internal = null;
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			dynamic B = null;
			string confirm = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You can't commit suicide before the game starts!</span>" );
				return;
			}

			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already dead!</span>" );
				return;
			}

			if ( this.suiciding == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already committing suicide! Be patient!</span>" );
				return;
			}
			B = this.has_brain_worms();

			if ( Lang13.Bool( B ) && B.controlling ) {
				GlobalFuncs.to_chat( this, "Your can't suicide while controlling your host, you dick." );
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( confirm == "Yes" ) {
				
				if ( !this.canmove || this.restrained() ) {
					GlobalFuncs.to_chat( this, "You can't commit suicide whilst restrained! ((You can type Ghost instead however.))" );
					return;
				}
				this.suiciding = true;
				this.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " is attempting to bite " ).his_her_its_their().str( " tongue off. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.adjustOxyLoss( Num13.MaxInt( ((int)( 175 - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss() - Convert.ToDouble( this.getOxyLoss() ) )), 0 ) );
				this.updatehealth();
			}
			return;
		}

	}

}