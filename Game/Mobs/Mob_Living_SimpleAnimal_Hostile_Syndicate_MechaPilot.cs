// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Syndicate_MechaPilot : Mob_Living_SimpleAnimal_Hostile_Syndicate {

		public Type spawn_mecha_type = typeof(Obj_Mecha_Combat_Marauder_Mauler_Loaded);
		public Obj_Mecha mecha = null;
		public int required_mecha_charge = 7500;
		public int mecha_charge_evacuate = 50;
		public int threat_use_mecha_smoke = 5;
		public int defence_mode_chance = 35;
		public int smoke_chance = 20;
		public int retreat_chance = 40;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.wanted_objects = new ByTable();
		}

		// Function from file: mecha_pilot.dm
		public Mob_Living_SimpleAnimal_Hostile_Syndicate_MechaPilot ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic M = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.spawn_mecha_type != null ) {
				M = Lang13.Call( this.spawn_mecha_type, GlobalFuncs.get_turf( this ) );

				if ( M is Obj_Mecha ) {
					this.enter_mecha( M );
				}
			}
			return;
		}

		// Function from file: mecha_pilot.dm
		public override void Goto( dynamic target = null, int delay = 0, dynamic minimum_distance = null ) {
			
			if ( this.mecha != null ) {
				Map13.WalkTowards( this.mecha, target, Convert.ToInt32( minimum_distance ), delay );
			} else {
				base.Goto( (object)(target), delay, (object)(minimum_distance) );
			}
			return;
		}

		// Function from file: mecha_pilot.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;

			
			if ( this.mecha != null && this.loc == this.mecha ) {
				this.mecha.relaymove( this, Dir );
				return false;
			}
			base.Move( (object)(NewLoc), Dir, step_x, step_y );
			return false;
		}

		// Function from file: mecha_pilot.dm
		public override bool EscapeConfinement(  ) {
			
			if ( this.mecha != null && this.loc == this.mecha ) {
				return false;
			}
			base.EscapeConfinement();
			return false;
		}

		// Function from file: mecha_pilot.dm
		public override bool CanAttack( dynamic the_target = null ) {
			bool _default = false;

			dynamic M = null;

			
			if ( the_target is Obj_Mecha ) {
				M = the_target;

				if ( this.mecha != null ) {
					
					if ( M == this.mecha || !this.CanAttack( M.occupant ) ) {
						return false;
					}
				} else if ( this.is_valid_mecha( M ) ) {
					return true;
				}
			}
			_default = base.CanAttack( (object)(the_target) );
			return _default;
		}

		// Function from file: mecha_pilot.dm
		public override dynamic gib( dynamic animation = null ) {
			
			if ( this.mecha != null ) {
				this.mecha.aimob_exit_mech( this );
			}
			base.gib( (object)(animation) );
			return null;
		}

		// Function from file: mecha_pilot.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			
			if ( this.mecha != null ) {
				this.mecha.aimob_exit_mech( this );
			}
			base.death( gibbed, toast );
			return false;
		}

		// Function from file: mecha_pilot.dm
		public override bool handle_automated_action(  ) {
			Obj_Mecha_Combat C = null;
			ByTable L = null;
			int threat_count = 0;

			
			if ( base.handle_automated_action() ) {
				
				if ( !( this.mecha != null ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this.vision_range, this ), typeof(Obj_Mecha_Combat) )) {
						C = _a;
						

						if ( this.is_valid_mecha( C ) ) {
							this.target = C;
							this.minimum_distance = 1;
							this.ranged = false;
							break;
						}
					}
				}

				if ( this.mecha != null ) {
					L = this.PossibleThreats();
					threat_count = L.len;

					if ( !this.mecha.has_charge( this.mecha_charge_evacuate ) ) {
						this.exit_mecha( this.mecha );
						return false;
					}

					if ( this.mecha.health < Convert.ToDouble( Lang13.Initial( this.mecha, "health" ) * 0.1 ) ) {
						this.exit_mecha( this.mecha );
						return false;
					}

					if ( threat_count >= this.threat_use_mecha_smoke && Rand13.PercentChance( this.smoke_chance ) ) {
						
						if ( this.mecha.smoke_action != null && Lang13.Bool( this.mecha.smoke_action.owner ) && this.mecha.smoke != 0 ) {
							this.mecha.smoke_action.Activate();
						}
					}

					if ( this.mecha.health < Convert.ToDouble( Lang13.Initial( this.mecha, "health" ) * 0.25 ) ) {
						
						if ( Rand13.PercentChance( this.defence_mode_chance ) ) {
							
							if ( this.mecha.defense_action != null && Lang13.Bool( this.mecha.defense_action.owner ) && !Lang13.Bool( this.mecha.defence_mode ) ) {
								this.mecha.leg_overload_mode = 0;
								this.mecha.defense_action.Activate( GlobalVars.TRUE );
								GlobalFuncs.addtimer( this.mecha.defense_action, "Activate", 100, GlobalVars.FALSE, GlobalVars.FALSE );
							}
						} else if ( Rand13.PercentChance( this.retreat_chance ) ) {
							
							if ( this.mecha.overload_action != null && Lang13.Bool( this.mecha.overload_action.owner ) && !Lang13.Bool( this.mecha.leg_overload_mode ) ) {
								this.mecha.overload_action.Activate( GlobalVars.TRUE );
								GlobalFuncs.addtimer( this.mecha.overload_action, "Activate", 100, GlobalVars.FALSE, GlobalVars.FALSE );
							}
							this.retreat_distance = 50;
							Task13.Schedule( 100, (Task13.Closure)(() => {
								this.retreat_distance = 0;
								return;
							}));
						}
					}
				}
			}
			return false;
		}

		// Function from file: mecha_pilot.dm
		public override bool AttackingTarget(  ) {
			ByTable possible_weapons = null;
			dynamic ME = null;
			dynamic M = null;

			
			if ( this.mecha != null ) {
				possible_weapons = this.get_mecha_equip_by_flag( 1 );

				if ( possible_weapons.len != 0 ) {
					ME = Rand13.PickFromTable( possible_weapons );
					this.mecha_face_target( this.target );

					if ( Lang13.Bool( ME.action( this.target ) ) ) {
						((Obj_Item_MechaParts_MechaEquipment)ME).start_cooldown();
						return false;
					}
				}

				if ( this.mecha.melee_can_hit ) {
					this.mecha_face_target( this.target );
					((Ent_Static)this.target).mech_melee_attack( this.mecha );
				}
			} else {
				
				if ( this.target is Obj_Mecha ) {
					M = this.target;

					if ( this.is_valid_mecha( M ) ) {
						this.enter_mecha( M );
						return false;
					} else if ( !this.CanAttack( M ) ) {
						this.target = null;
						return false;
					}
				}
				((Ent_Static)this.target).attack_animal( this );
			}
			return false;
		}

		// Function from file: mecha_pilot.dm
		public override void OpenFire( dynamic A = null ) {
			ByTable possible_weapons = null;
			dynamic ME = null;

			
			if ( this.mecha != null ) {
				this.mecha_reload();
				this.mecha_face_target( A );
				possible_weapons = this.get_mecha_equip_by_flag( 2 );

				if ( possible_weapons.len != 0 ) {
					ME = Rand13.PickFromTable( possible_weapons );

					if ( Lang13.Bool( ME.action( A ) ) ) {
						((Obj_Item_MechaParts_MechaEquipment)ME).start_cooldown();
						return;
					}
				}
			} else {
				base.OpenFire( (object)(A) );
			}
			return;
		}

		// Function from file: mecha_pilot.dm
		public ByTable get_mecha_equip_by_flag( int? flag = null ) {
			flag = flag ?? 2;

			ByTable _default = null;

			dynamic equip = null;
			dynamic ME = null;

			_default = new ByTable();

			if ( this.mecha != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.mecha.equipment )) {
					equip = _a;
					
					ME = equip;

					if ( Lang13.Bool( ME.range & flag ) && ((Obj_Item_MechaParts_MechaEquipment)ME).action_checks( ME ) ) {
						_default.Add( ME );
					}
				}
			}
			return _default;
		}

		// Function from file: mecha_pilot.dm
		public void mecha_reload(  ) {
			dynamic equip = null;
			dynamic ME = null;

			
			if ( this.mecha != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.mecha.equipment )) {
					equip = _a;
					
					ME = equip;

					if ( ((Obj_Item_MechaParts_MechaEquipment)ME).needs_rearm() ) {
						((Obj_Item_MechaParts_MechaEquipment)ME).rearm();
					}
				}
			}
			return;
		}

		// Function from file: mecha_pilot.dm
		public void mecha_face_target( dynamic A = null ) {
			int? dirto = null;

			
			if ( this.mecha != null ) {
				dirto = Map13.GetDistance( this.mecha, A );

				if ( this.mecha.dir != dirto ) {
					this.mecha.mechturn( dirto );
				}
			}
			return;
		}

		// Function from file: mecha_pilot.dm
		public bool is_valid_mecha( dynamic M = null ) {
			
			if ( !Lang13.Bool( M ) ) {
				return false;
			}

			if ( Lang13.Bool( M.occupant ) ) {
				return false;
			}

			if ( !((Obj_Mecha)M).has_charge( this.required_mecha_charge ) ) {
				return false;
			}

			if ( Convert.ToDouble( M.health ) < Convert.ToDouble( Lang13.Initial( M, "health" ) * 0.5 ) ) {
				return false;
			}
			return true;
		}

		// Function from file: mecha_pilot.dm
		public bool exit_mecha( Obj_Mecha M = null ) {
			int search_aggressiveness = 0;
			Obj_Mecha_Combat C = null;

			
			if ( !( M != null ) ) {
				return false;
			}
			this.mecha.aimob_exit_mech( this );
			this.allow_movement_on_non_turfs = GlobalVars.FALSE;
			this.targets_from = this;
			this.wanted_objects = Lang13.GetTypes( typeof(Obj_Mecha_Combat) ) - typeof(Obj_Mecha_Combat);
			search_aggressiveness = 2;

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, this.vision_range ), typeof(Obj_Mecha_Combat) )) {
				C = _a;
				

				if ( this.is_valid_mecha( C ) ) {
					this.target = C;
					search_aggressiveness = 3;
					break;
				}
			}
			this.search_objects = search_aggressiveness;
			this.ranged = false;
			this.minimum_distance = 1;
			return false;
		}

		// Function from file: mecha_pilot.dm
		public bool enter_mecha( dynamic M = null ) {
			bool do_ranged = false;
			dynamic equip = null;
			dynamic ME = null;

			
			if ( !Lang13.Bool( M ) ) {
				return false;
			}
			this.target = null;
			((Obj_Mecha)M).aimob_enter_mech( this );
			this.targets_from = M;
			this.allow_movement_on_non_turfs = GlobalVars.TRUE;
			do_ranged = false;

			foreach (dynamic _a in Lang13.Enumerate( this.mecha.equipment )) {
				equip = _a;
				
				ME = equip;

				if ( Lang13.Bool( ME.range & 2 ) ) {
					do_ranged = true;
					break;
				}
			}

			if ( do_ranged ) {
				this.minimum_distance = 5;
				this.ranged = true;
			} else {
				this.minimum_distance = 1;
				this.ranged = false;
			}
			this.wanted_objects = new ByTable();
			this.search_objects = 0;

			if ( this.mecha != null && this.mecha.lights_action != null ) {
				this.mecha.lights_action.Activate();
			}
			return false;
		}

	}

}