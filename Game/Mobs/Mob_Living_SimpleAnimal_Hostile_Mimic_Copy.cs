// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Mimic_Copy : Mob_Living_SimpleAnimal_Hostile_Mimic {

		public dynamic creator = null;
		public bool destroy_objects = false;
		public bool knockdown_people = false;
		public int time_to_die = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.copied_object = null;
		}

		// Function from file: mimic.dm
		public Mob_Living_SimpleAnimal_Hostile_Mimic_Copy ( dynamic loc = null, Obj copy = null, dynamic creator = null, bool? destroy_original = null, int? duration = null ) : base( (object)(loc) ) {
			destroy_original = destroy_original ?? false;
			duration = duration ?? 0;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.CopyObject( copy, creator, destroy_original );

			if ( Lang13.Bool( duration ) ) {
				this.time_to_die = Game13.time + ( duration ??0);
			}
			return;
		}

		// Function from file: mimic.dm
		public override dynamic AttackingTarget(  ) {
			dynamic _default = null;

			Mob L = null;

			_default = base.AttackingTarget();

			if ( this.knockdown_people ) {
				L = _default;

				if ( L is Mob_Living ) {
					
					if ( Rand13.PercentChance( 15 ) ) {
						L.Weaken( 1 );
						L.visible_message( new Txt( "<span class='danger'>" ).the( this ).item().str( " knocks down " ).the( L ).item().str( "!</span>" ).ToString() );
					}
				}
			}
			return _default;
		}

		// Function from file: mimic.dm
		public override void DestroySurroundings(  ) {
			
			if ( this.destroy_objects ) {
				base.DestroySurroundings();
			}
			return;
		}

		// Function from file: mimic.dm
		public bool CopyObject( Obj O = null, dynamic creator = null, bool? destroy_original = null ) {
			destroy_original = destroy_original ?? false;

			Icon redimage = null;
			Icon redimage_south = null;
			Icon redimage_east = null;
			int amplitude = 0;
			int pixel_x_diff = 0;
			int pixel_y_diff = 0;
			Obj I = null;

			
			if ( destroy_original == true || this.CheckObject( O ) ) {
				O.loc = this;
				this.appearance = O.appearance;
				this.icon_living = this.icon_state;
				redimage = new Icon( this.icon, this.icon_state );
				redimage.MapColors( "#ff0000", "#ff0000", "#ff0000" );
				redimage_south = redimage;
				redimage_east = redimage;
				redimage_south.Shift( GlobalVars.SOUTH, 1 );
				this.underlays.Add( redimage_south );
				redimage_east.Shift( GlobalVars.EAST, 1 );
				this.underlays.Add( redimage_east );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					amplitude = 2;
					pixel_x_diff = Rand13.Int( -amplitude, amplitude );
					pixel_y_diff = Rand13.Int( -amplitude, amplitude );
					Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff ).Set( "pixel_y", this.pixel_y + pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ) );
					Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff ).Set( "pixel_y", this.pixel_y - pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
					pixel_x_diff = Rand13.Int( -amplitude, amplitude );
					pixel_y_diff = Rand13.Int( -amplitude, amplitude );
					Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff ).Set( "pixel_y", this.pixel_y + pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ) );
					Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff ).Set( "pixel_y", this.pixel_y - pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
					pixel_x_diff = Rand13.Int( -amplitude, amplitude );
					pixel_y_diff = Rand13.Int( -amplitude, amplitude );
					Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff ).Set( "pixel_y", this.pixel_y + pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ) );
					Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff ).Set( "pixel_y", this.pixel_y - pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
					return;
				}));

				if ( O is Obj_Structure || O is Obj_Machinery ) {
					this.health = this.anchored * 50 + 50;
					this.destroy_objects = true;

					if ( O.density && Lang13.Bool( O.anchored ) ) {
						this.knockdown_people = true;
						this.melee_damage_lower *= 2;
						this.melee_damage_upper *= 2;
					}
				} else if ( O is Obj_Item ) {
					I = O;
					this.health = ((dynamic)I).w_class * 15;
					this.melee_damage_lower = I.force + 2;
					this.melee_damage_upper = I.force + 2;
					this.move_to_delay = Convert.ToInt32( ((dynamic)I).w_class * 2 );
				}
				this.maxHealth = this.health;

				if ( Lang13.Bool( creator ) ) {
					this.creator = creator;
					this.faction = new Txt().Ref( creator ).ToString();
				}

				if ( destroy_original == true ) {
					GlobalFuncs.qdel( O );
				}
				return true;
			}
			return false;
		}

		// Function from file: mimic.dm
		public bool CheckObject( Obj O = null ) {
			
			if ( ( O is Obj_Item || O is Obj_Structure ) && !GlobalFuncs.is_type_in_list( O, GlobalVars.protected_objects ) ) {
				return true;
			}
			return false;
		}

		// Function from file: mimic.dm
		public void ChangeOwner( Ent_Static owner = null ) {
			
			if ( owner != this.creator ) {
				this.LoseTarget();
				this.creator = owner;
				this.faction = new Txt().Ref( owner ).ToString();
			}
			return;
		}

		// Function from file: mimic.dm
		public override ByTable ListTargets(  ) {
			ByTable _default = null;

			_default = base.ListTargets();
			return _default - this.creator;
		}

		// Function from file: mimic.dm
		public override void Die( bool? gore = null ) {
			Ent_Dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				M = _a;
				
				M.loc = GlobalFuncs.get_turf( this );
			}
			base.Die( gore );
			return;
		}

		// Function from file: mimic.dm
		public override bool Life(  ) {
			int amplitude = 0;
			int pixel_x_diff = 0;
			int pixel_y_diff = 0;
			Mob_Living M = null;

			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				amplitude = 2;
				pixel_x_diff = Rand13.Int( -amplitude, amplitude );
				pixel_y_diff = Rand13.Int( -amplitude, amplitude );
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff ).Set( "pixel_y", this.pixel_y + pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ) );
				Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff ).Set( "pixel_y", this.pixel_y - pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
				pixel_x_diff = Rand13.Int( -amplitude, amplitude );
				pixel_y_diff = Rand13.Int( -amplitude, amplitude );
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff ).Set( "pixel_y", this.pixel_y + pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ) );
				Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff ).Set( "pixel_y", this.pixel_y - pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
				pixel_x_diff = Rand13.Int( -amplitude, amplitude );
				pixel_y_diff = Rand13.Int( -amplitude, amplitude );
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff ).Set( "pixel_y", this.pixel_y + pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ) );
				Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff ).Set( "pixel_y", this.pixel_y - pixel_y_diff ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
				return;
			}));

			if ( this.time_to_die != 0 && Game13.time >= this.time_to_die ) {
				this.Die();
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Mob_Living) )) {
				M = _a;
				
				this.Die();
				return false;
			}
			return false;
		}

	}

}