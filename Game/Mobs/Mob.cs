// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob : Base_Mob {

		public int next_click = 0;
		public bool next_move_adjust = false;
		public bool next_move_modifier = true;
		public ByTable skincmds = new ByTable();
		public int? suiciding = 0;
		public ByTable open_uis = new ByTable();
		public ByTable alerts = new ByTable();
		public ByTable screens = new ByTable();
		public HSB sandbox = null;
		public int bloody_hands = 0;
		public dynamic bloody_hands_mob = null;
		public Mind mind = null;
		public ByTable actions = new ByTable();
		public int stat = 0;
		public Obj_Screen_Robot_Module hands = null;
		public string zone_selected = null;
		public string macro_default = "default";
		public string macro_hotkeys = "hotkeys";
		public int damageoverlaytemp = 0;
		public string computer_id = null;
		public dynamic lastattacker = null;
		public dynamic lastattacked = null;
		public ByTable attack_log = new ByTable();
		public Obj machine = null;
		public bool? other_mobs = null;
		public string memory = "";
		public dynamic disabilities = 0;
		public dynamic pulling = null;
		public double next_move = 0;
		public int? notransform = null;
		public bool hand = false;
		public int eye_blind = 0;
		public int eye_blurry = 0;
		public double? ear_deaf = 0;
		public int ear_damage = 0;
		public double stuttering = 0;
		public double slurring = 0;
		public dynamic real_name = null;
		public double druggy = 0;
		public double confused = 0;
		public int sleeping = 0;
		public int resting = 0;
		public int? lying = 0;
		public int? lying_prev = 0;
		public bool canmove = true;
		public int eye_damage = 0;
		public int lastpuke = 0;
		public dynamic name_archive = null;
		public int timeofdeath = 0;
		public int cpr_time = 1;
		public dynamic bodytemperature = 310.05499267578125;
		public int drowsyness = 0;
		public int dizziness = 0;
		public int jitteriness = 0;
		public double nutrition = 400;
		public int satiety = 0;
		public int overeatduration = 0;
		public int paralysis = 0;
		public double stunned = 0;
		public int weakened = 0;
		public int losebreath = 0;
		public dynamic a_intent = "help";
		public string m_intent = "run";
		public string lastKnownIP = null;
		public Ent_Dynamic buckled = null;
		public dynamic l_hand = null;
		public dynamic r_hand = null;
		public Obj_Item_Weapon_Storage s_active = null;
		public int see_override = 0;
		public Hud hud_used = null;
		public bool research_scanner = false;
		public Action_Innate_ScanMode scanner = new Action_Innate_ScanMode();
		public ByTable grabbed_by = new ByTable();
		public ByTable requests = new ByTable();
		public ByTable mapobjs = new ByTable();
		public bool in_throw_mode = false;
		public string music_lastplayed = "null";
		public dynamic job = null;
		public double radiation = 0;
		public string voice_name = "unidentifiable voice";
		public dynamic faction = new ByTable(new object [] { "neutral" });
		public bool move_on_shuttle = true;
		public dynamic LAssailant = null;
		public ByTable mob_spell_list = new ByTable();
		public ByTable viruses = new ByTable();
		public ByTable resistances = new ByTable();
		public int status_flags = 15;
		public bool digitalcamo = false;
		public bool digitalinvis = false;
		public Image digitaldisguise = null;
		public bool weakeyes = false;
		public bool has_unlimited_silicon_privilege = false;
		public bool force_compose = false;
		public Base_Data control_object = null;
		public Obj remote_control = null;
		public dynamic listed_turf = null;
		public ByTable permanent_huds = new ByTable();
		public double resize = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.mouse_drag_pointer = 1;
			this.flags = 16;
			this.hud_possible = new ByTable(new object [] { "12" });
			this.pressure_resistance = 8;
			this.layer = 4;
			this.see_in_dark = 2;
			this.see_invisible = 0;
		}

		// Function from file: mob.dm
		public Mob ( dynamic loc = null ) : base( (object)(loc) ) {
			this.tag = "mob_" + GlobalVars.next_mob_id++;
			GlobalVars.mob_list.Add( this );

			if ( this.stat == 2 ) {
				GlobalVars.dead_mob_list.Add( this );
			} else {
				GlobalVars.living_mob_list.Add( this );
			}
			this.prepare_huds();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: shuttle.dm
		public override bool onShuttleMove( Ent_Static T1 = null, double? rotation = null ) {
			bool _default = false;

			
			if ( !this.move_on_shuttle ) {
				return false;
			}
			_default = base.onShuttleMove( T1, rotation );

			if ( !_default ) {
				return _default;
			}

			if ( this.client != null ) {
				
				if ( this.buckled != null ) {
					GlobalFuncs.shake_camera( this, 2, 1 );
				} else {
					GlobalFuncs.shake_camera( this, 7, 1 );
				}
			}
			return _default;
		}

		// Function from file: mob_movement.dm
		public override dynamic get_spacemove_backup(  ) {
			dynamic _default = null;

			dynamic dense_object_backup = null;
			dynamic A = null;
			dynamic turf = null;
			dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( GlobalFuncs.get_turf( this ), 1 ) )) {
				A = _a;
				

				if ( A is Zone ) {
					continue;
				} else if ( A is Tile ) {
					turf = A;

					if ( turf is Tile_Space ) {
						continue;
					}

					if ( !turf.density && !Lang13.Bool( this.mob_negates_gravity() ) ) {
						continue;
					}
					return A;
				} else {
					AM = A;

					if ( AM == this.buckled ) {
						continue;
					}

					if ( !((Ent_Static)AM).CanPass( this ) || AM.density ) {
						
						if ( Lang13.Bool( AM.anchored ) ) {
							return AM;
						}

						if ( this.pulling == AM ) {
							continue;
						}
						dense_object_backup = AM;
						break;
					}
				}
			}
			_default = dense_object_backup;
			return _default;
		}

		// Function from file: mob_movement.dm
		public override int Process_Spacemove( dynamic movement_dir = null ) {
			movement_dir = movement_dir ?? 0;

			dynamic backup = null;

			
			if ( base.Process_Spacemove( (object)(movement_dir) ) != 0 ) {
				return 1;
			}
			backup = this.get_spacemove_backup();

			if ( Lang13.Bool( backup ) ) {
				
				if ( backup is Ent_Dynamic && Lang13.Bool( movement_dir ) && !Lang13.Bool( backup.anchored ) ) {
					
					if ( ((Ent_Dynamic)backup).newtonian_move( Num13.Rotate( movement_dir, 180 ) ) ) {
						this.WriteMsg( "<span class='info'>You push off of " + backup + " to propel yourself.</span>" );
					}
				}
				return 1;
			}
			return 0;
		}

		// Function from file: mob_movement.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;

			dynamic moving_mob = null;

			
			if ( height == 0 ) {
				return true;
			}

			if ( mover is Obj_Item_Projectile || mover.throwing ) {
				return !this.density || Lang13.Bool( this.lying );
			}

			if ( ((Ent_Dynamic)mover).checkpass( 16 ) != 0 ) {
				return true;
			}

			if ( this.buckled == mover ) {
				return true;
			}

			if ( mover is Mob ) {
				moving_mob = mover;

				if ( this.other_mobs == true && moving_mob.other_mobs == true ) {
					return true;
				}

				if ( mover == this.buckled_mob ) {
					return true;
				}
			}
			return !mover.density || !this.density || Lang13.Bool( this.lying );
		}

		// Function from file: mob.dm
		public override void post_buckle_mob( dynamic M = null ) {
			dynamic height = null;

			
			if ( M == this.buckled_mob ) {
				height = ((Mob)M).get_mob_buckling_height( this );
				M.pixel_y = Lang13.Initial( M, "pixel_y" ) + height;

				if ( Convert.ToDouble( M.layer ) < this.layer ) {
					M.layer = this.layer + 0.1;
				}
			} else {
				M.layer = Lang13.Initial( M, "layer" );
				M.pixel_y = Lang13.Initial( M, "pixel_y" );
			}
			return;
		}

		// Function from file: mob.dm
		public override bool buckle_mob( dynamic M = null, bool? force = null ) {
			force = force ?? false;

			dynamic T = null;
			bool old_density = false;
			dynamic can_step = null;

			
			if ( M.buckled != null ) {
				return false;
			}
			T = GlobalFuncs.get_turf( this );

			if ( M.loc != T ) {
				old_density = this.density;
				this.density = false;
				Map13.StepTowardsSimple( M, T );
				can_step = null;
				this.density = old_density;

				if ( !Lang13.Bool( can_step ) ) {
					return false;
				}
			}
			return base.buckle_mob( (object)(M), force );
		}

		// Function from file: mob.dm
		public override void shuttleRotate( double? rotation = null ) {
			this.dir = ((int)( GlobalFuncs.angle2dir( ( rotation ??0) + ( GlobalFuncs.dir2angle( this.dir ) ??0) ) ??0 ));
			return;
		}

		// Function from file: mob.dm
		public override dynamic Stat(  ) {
			string ETA = null;
			double timeleft = 0;
			Subsystem SS = null;
			ByTable overrides = null;
			Image I = null;
			Ent_Static A = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( null, "Map: " + "Box Station" );

				if ( GlobalVars.nextmap != null && GlobalVars.nextmap is Votablemap ) {
					Interface13.Stat( null, "Next Map: " + GlobalVars.nextmap.friendlyname );
				}
				Interface13.Stat( null, "Server Time: " + String13.FormatTime( Game13.realtime, "YYYY-MM-DD hh:mm" ) );

				switch ((int)( GlobalVars.SSshuttle.emergency.mode )) {
					case 1:
						ETA = "RCL";
						break;
					case 2:
						ETA = "ETA";
						break;
					case 3:
						ETA = "ETD";
						break;
					case 5:
						ETA = "ESC";
						break;
					case 4:
						ETA = "ERR";
						break;
				}

				if ( Lang13.Bool( ETA ) ) {
					timeleft = GlobalVars.SSshuttle.emergency.timeLeft();
					Interface13.Stat( null, "" + ETA + "-" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) );
				}
			}

			if ( this.client != null && this.client.holder != null ) {
				
				if ( Interface13.IsStatPanelActive( "MC" ) ) {
					Interface13.Stat( "Location:", "(" + this.x + ", " + this.y + ", " + this.z + ")" );
					Interface13.Stat( "CPU:", "" + Game13.cpu );
					Interface13.Stat( "Instances:", "" + Game13.contents.len );
					GlobalVars.config.stat_entry();
					Interface13.Stat( null, null );

					if ( GlobalVars.Master != null ) {
						GlobalVars.Master.stat_entry();
					} else {
						Interface13.Stat( "Master Controller:", "ERROR" );
					}

					if ( GlobalVars.Failsafe != null ) {
						GlobalVars.Failsafe.stat_entry();
					} else {
						Interface13.Stat( "Failsafe Controller:", "ERROR" );
					}

					if ( GlobalVars.Master != null ) {
						Interface13.Stat( "Subsystems:", "" + Num13.Round( GlobalVars.Master.subsystem_cost, 0.01 ) + "ds" );
						Interface13.Stat( null, null );

						foreach (dynamic _b in Lang13.Enumerate( GlobalVars.Master.subsystems, typeof(Subsystem) )) {
							SS = _b;
							
							SS.stat_entry();
						}
					}
					GlobalVars.cameranet.stat_entry();
				}
			}

			if ( Lang13.Bool( this.listed_turf ) && this.client != null ) {
				
				if ( !this.TurfAdjacent( this.listed_turf ) ) {
					this.listed_turf = null;
				} else {
					Interface13.SetStatPanel( this.listed_turf.name, null, this.listed_turf );
					overrides = new ByTable();

					foreach (dynamic _c in Lang13.Enumerate( this.client.images, typeof(Image) )) {
						I = _c;
						

						if ( Lang13.Bool( ((dynamic)I).loc ) && ((dynamic)I).loc.loc == this.listed_turf && I.v_override ) {
							overrides = ((dynamic)I).loc;
						}
					}

					foreach (dynamic _d in Lang13.Enumerate( this.listed_turf, typeof(Ent_Static) )) {
						A = _d;
						

						if ( !( A.mouse_opacity != 0 ) ) {
							continue;
						}

						if ( A.invisibility > this.see_invisible ) {
							continue;
						}

						if ( overrides.len != 0 && overrides.Contains( A ) ) {
							continue;
						}
						Interface13.SetStatPanel( this.listed_turf.name, null, A );
					}
				}
			}

			if ( this.mind != null ) {
				this.add_spells_to_statpanel( this.mind.spell_list );

				if ( this.mind.changeling != null ) {
					this.add_stings_to_statpanel( this.mind.changeling.purchasedpowers );
				}
			}
			this.add_spells_to_statpanel( this.mob_spell_list );
			return null;
		}

		// Function from file: mob.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			base.MouseDrop( (object)(over), (object)(src_location), (object)(over_location), src_control, (object)(over_control), _params );

			if ( over != Task13.User ) {
				return null;
			}

			if ( Task13.User == this ) {
				return null;
			}

			if ( !this.Adjacent( Task13.User ) ) {
				return null;
			}

			if ( over is Mob_Living_Silicon_Ai ) {
				return null;
			}
			this.show_inv( Task13.User );
			return null;
		}

		// Function from file: mob.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string t1 = null;
			double? slot = null;
			dynamic what = null;

			
			if ( Lang13.Bool( href_list["mach_close"] ) ) {
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
			}

			if ( Lang13.Bool( href_list["refresh"] ) ) {
				
				if ( this.machine != null && Map13.GetDistance( this, Task13.User ) <= 1 ) {
					this.show_inv( this.machine );
				}
			}

			if ( Task13.User.canUseTopic( this, true, true ) ) {
				
				if ( Lang13.Bool( href_list["item"] ) ) {
					slot = String13.ParseNumber( href_list["item"] );
					what = this.get_item_by_slot( slot );

					if ( Lang13.Bool( what ) ) {
						Task13.User.stripPanelUnequip( what, this, slot );
					} else {
						Task13.User.stripPanelEquip( what, this, slot );
					}
				}
			}

			if ( Task13.User.machine == this ) {
				
				if ( this.Adjacent( Task13.User ) ) {
					this.show_inv( Task13.User );
				} else {
					Interface13.Browse( Task13.User, null, new Txt( "window=mob" ).Ref( this ).ToString() );
				}
			}
			return null;
		}

		// Function from file: mob.dm
		public override void audible_message( dynamic message = null, string deaf_message = null, int? hearing_distance = null, string self_message = null ) {
			int? range = null;
			dynamic M = null;
			dynamic msg = null;

			range = 7;

			if ( Lang13.Bool( hearing_distance ) ) {
				range = hearing_distance;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_hearers_in_view( range, this ) )) {
				M = _a;
				
				msg = message;

				if ( Lang13.Bool( self_message ) && M == this ) {
					msg = self_message;
				}
				M.show_message( msg, 2, deaf_message, 1 );
			}
			return;
		}

		// Function from file: mob.dm
		public override void visible_message( dynamic message = null, dynamic self_message = null, string blind_message = null ) {
			dynamic T = null;
			dynamic M = null;
			dynamic msg = null;

			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_hearers_in_view( 7, this ) )) {
				M = _a;
				

				if ( !Lang13.Bool( M.client ) ) {
					continue;
				}
				msg = message;

				if ( M == this ) {
					
					if ( Lang13.Bool( self_message ) ) {
						msg = self_message;
					}
				} else if ( Convert.ToDouble( M.see_invisible ) < this.invisibility || T != this.loc ) {
					
					if ( Lang13.Bool( blind_message ) ) {
						msg = blind_message;
					} else {
						continue;
					}
				} else if ( Lang13.Bool( T.lighting_object ) ) {
					
					if ( Convert.ToDouble( T.lighting_object.invisibility ) <= Convert.ToDouble( M.see_invisible ) && !Lang13.Bool( T.lighting_object.luminosity ) ) {
						
						if ( Lang13.Bool( blind_message ) ) {
							msg = blind_message;
						} else {
							continue;
						}
					}
				}
				M.show_message( msg, 1, blind_message, 2 );
			}
			return;
		}

		// Function from file: mob.dm
		public override dynamic Destroy(  ) {
			dynamic infection = null;

			GlobalVars.mob_list.Remove( this );
			GlobalVars.dead_mob_list.Remove( this );
			GlobalVars.living_mob_list.Remove( this );
			GlobalFuncs.qdel( this.hud_used );

			if ( this.mind != null && this.mind.current == this ) {
				this.spellremove( this );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.viruses )) {
				infection = _a;
				
				GlobalFuncs.qdel( infection );
			}
			this.ghostize();
			return base.Destroy();
		}

		// Function from file: logout.dm
		public override bool Logout(  ) {
			int admins_number = 0;
			dynamic cheesy_message = null;
			Ent_Static Loc = null;

			GlobalVars.SStgui.on_logout( this );
			this.unset_machine();
			GlobalVars.player_list.Remove( this );
			GlobalFuncs.log_access( "Logout: " + GlobalFuncs.key_name( this ) );

			if ( Lang13.Bool( GlobalVars.admin_datums[this.ckey] ) ) {
				
				if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
					admins_number = GlobalVars.admins.len;

					if ( admins_number == 0 ) {
						cheesy_message = Rand13.PickFromTable( new ByTable(new object [] { 
							"I have no admins online!", 
							"I'm all alone :(", 
							"I'm feeling lonely :(", 
							"I'm so lonely :(", 
							"Why does nobody love me? :(", 
							"I want a man :(", 
							"Where has everyone gone?", 
							"I need a hug :(", 
							"Someone come hold me :(", 
							"I need someone on me :(", 
							"What happened? Where has everyone gone?", 
							"Forever alone :("
						 }) );

						if ( Lang13.Bool( cheesy_message ) ) {
							cheesy_message += " (No admins online)";
						}
						GlobalFuncs.send2irc( "Server", "" + cheesy_message );
					}
				}
			}
			base.Logout();

			if ( this.loc is Obj ) {
				Loc = this.loc;
				((Obj)Loc).on_log();
			}
			return true;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			Ent_Static Loc = null;

			GlobalVars.player_list.Or( this );
			this.update_Login_details();
			Game13.update_status();
			this.client.screen = new ByTable();
			this.client.images = new ByTable();

			if ( !( this.hud_used != null ) ) {
				this.create_mob_hud();
			}

			if ( this.hud_used != null ) {
				this.hud_used.show_hud( this.hud_used.hud_version );
			}
			this.next_move = 1;
			base.Login();

			if ( this.key != this.client.key ) {
				this.key = this.client.key;
			}
			this.reset_perspective( this.loc );

			if ( this.loc is Obj ) {
				Loc = this.loc;
				((Obj)Loc).on_log();
			}
			this.reload_huds();
			this.reload_fullscreen();

			if ( GlobalVars.deadmins.Contains( this.ckey ) ) {
				this.verbs.Add( typeof(Client).GetMethod( "readmin" ) );
			}
			this.add_click_catcher();
			this.sync_mind();

			if ( Lang13.Bool( this.client.prefs.hotkeys ) ) {
				Interface13.WindowSet( this, null, "mainwindow.macro=" + this.macro_hotkeys + " mapwindow.map.focus=true input.background-color=#e0e0e0" );
			} else {
				Interface13.WindowSet( this, null, "mainwindow.macro=" + this.macro_default + " input.focus=true input.background-color=#d3b5b5" );
			}
			return null;
		}

		// Function from file: lighting_system.dm
		public override int get_light_range( int radius = 0 ) {
			return Num13.MinInt( radius, 6 );
		}

		// Function from file: sound.dm
		public override void playsound_local( dynamic turf_source = null, dynamic soundin = null, int? vol = null, int? vary = null, double? frequency = null, int? falloff = null, bool? surround = null ) {
			surround = surround ?? true;

			
			if ( !( this.client != null ) || ( this.ear_deaf ??0) > 0 ) {
				return;
			}
			base.playsound_local( (object)(turf_source), (object)(soundin), vol, vary, frequency, falloff, surround );
			return;
		}

		// Function from file: telekinesis.dm
		public override void attack_tk( Mob_Living_Carbon_Human user = null ) {
			return;
		}

		// Function from file: interface.dm
		public virtual void hotkey_help(  ) {
			string hotkey_mode = null;
			string other = null;

			hotkey_mode = @"<font color='purple'>
Hotkey-Mode: (hotkey-mode must be on)
	TAB = toggle hotkey-mode
	a = left
	s = down
	d = right
	w = up
	q = drop
	e = equip
	r = throw
	m = me
	t = say
	o = OOC
	b = resist
	x = swap-hand
	z = activate held object (or y)
	f = cycle-intents-left
	g = cycle-intents-right
	1 = help-intent
	2 = disarm-intent
	3 = grab-intent
	4 = harm-intent
</font>";
			other = @"<font color='purple'>
Any-Mode: (hotkey doesn't need to be on)
	Ctrl+a = left
	Ctrl+s = down
	Ctrl+d = right
	Ctrl+w = up
	Ctrl+q = drop
	Ctrl+e = equip
	Ctrl+r = throw
	Ctrl+b = resist
	Ctrl+O = OOC
	Ctrl+x = swap-hand
	Ctrl+z = activate held object (or Ctrl+y)
	Ctrl+f = cycle-intents-left
	Ctrl+g = cycle-intents-right
	Ctrl+1 = help-intent
	Ctrl+2 = disarm-intent
	Ctrl+3 = grab-intent
	Ctrl+4 = harm-intent
	DEL = pull
	INS = cycle-intents-right
	HOME = drop
	PGUP = swap-hand
	PGDN = activate held object
	END = throw
</font>";
			this.WriteMsg( hotkey_mode );
			this.WriteMsg( other );
			return;
		}

		// Function from file: physical.dm
		public virtual int physical_can_use_topic( Game_Data src_object = null ) {
			return -1;
		}

		// Function from file: notcontained.dm
		public virtual int notcontained_can_use_topic( Game_Data src_object = null ) {
			return -1;
		}

		// Function from file: hands.dm
		public virtual int hands_can_use_topic( Game_Data src_object = null ) {
			return -1;
		}

		// Function from file: default.dm
		public virtual int default_can_use_topic( Game_Data src_object = null ) {
			return -1;
		}

		// Function from file: states.dm
		public virtual int shared_ui_interaction( Game_Data src_object = null ) {
			
			if ( !( this.client != null ) ) {
				return -1;
			} else if ( this.stat != 0 ) {
				return 0;
			} else if ( this.incapacitated() || Lang13.Bool( this.lying ) ) {
				return 1;
			}
			return 2;
		}

		// Function from file: helpers.dm
		public virtual dynamic getlimb( Type typepath = null ) {
			return null;
		}

		// Function from file: helpers.dm
		public virtual Obj_Item_Organ_Internal getorganslot( string slot = null ) {
			return null;
		}

		// Function from file: helpers.dm
		public virtual ByTable getorganszone( string zone = null, bool? subzones = null ) {
			return null;
		}

		// Function from file: helpers.dm
		public virtual dynamic getorgan( Type typepath = null ) {
			return null;
		}

		// Function from file: carbon.dm
		public virtual void throw_item( Ent_Static target = null ) {
			return;
		}

		// Function from file: say.dm
		public virtual bool binarycheck(  ) {
			return false;
		}

		// Function from file: living.dm
		public virtual bool become_blind(  ) {
			return false;
		}

		// Function from file: living.dm
		public virtual bool become_nearsighted(  ) {
			return false;
		}

		// Function from file: living.dm
		public virtual bool cure_nearsighted(  ) {
			return false;
		}

		// Function from file: living.dm
		public virtual bool cure_blind(  ) {
			return false;
		}

		// Function from file: living.dm
		public virtual void set_drugginess( int amount = 0 ) {
			return;
		}

		// Function from file: living.dm
		public virtual void adjust_drugginess( double amount = 0 ) {
			return;
		}

		// Function from file: living.dm
		public virtual void adjust_eye_damage( int amount = 0 ) {
			return;
		}

		// Function from file: living.dm
		public virtual void set_eye_damage( int amount = 0 ) {
			return;
		}

		// Function from file: living.dm
		public virtual void damage_eyes( bool amount = false ) {
			return;
		}

		// Function from file: living.dm
		public virtual void set_blurriness( int amount = 0 ) {
			int old_eye_blurry = 0;

			old_eye_blurry = this.eye_blurry;
			this.eye_blurry = Num13.MaxInt( amount, 0 );

			if ( amount > 0 ) {
				
				if ( !( old_eye_blurry != 0 ) ) {
					this.overlay_fullscreen( "blurry", typeof(Obj_Screen_Fullscreen_Blurry) );
				}
			} else if ( old_eye_blurry != 0 ) {
				this.clear_fullscreen( "blurry" );
			}
			return;
		}

		// Function from file: living.dm
		public virtual void adjust_blurriness( dynamic amount = null ) {
			int old_eye_blurry = 0;

			old_eye_blurry = this.eye_blurry;
			this.eye_blurry = Num13.MaxInt( ((int)( this.eye_blurry + Convert.ToDouble( amount ) )), 0 );

			if ( Convert.ToDouble( amount ) > 0 ) {
				
				if ( !( old_eye_blurry != 0 ) ) {
					this.overlay_fullscreen( "blurry", typeof(Obj_Screen_Fullscreen_Blurry) );
				}
			} else if ( old_eye_blurry != 0 ) {
				this.clear_fullscreen( "blurry" );
			}
			return;
		}

		// Function from file: living.dm
		public virtual void blur_eyes( dynamic amount = null ) {
			int old_eye_blurry = 0;

			
			if ( Convert.ToDouble( amount ) > 0 ) {
				old_eye_blurry = this.eye_blurry;
				this.eye_blurry = Num13.MaxInt( Convert.ToInt32( amount ), this.eye_blurry );

				if ( !( old_eye_blurry != 0 ) ) {
					this.overlay_fullscreen( "blurry", typeof(Obj_Screen_Fullscreen_Blurry) );
				}
			}
			return;
		}

		// Function from file: living.dm
		public virtual void set_blindness( int amount = 0 ) {
			int old_eye_blind = 0;
			bool blind_minimum = false;

			
			if ( amount > 0 ) {
				old_eye_blind = this.eye_blind;
				this.eye_blind = amount;

				if ( this.client != null && !( old_eye_blind != 0 ) ) {
					this.throw_alert( "blind", typeof(Obj_Screen_Alert_Blind) );
					this.overlay_fullscreen( "blind", typeof(Obj_Screen_Fullscreen_Blind) );
				}
			} else if ( this.eye_blind != 0 ) {
				blind_minimum = false;

				if ( this.stat == 1 || Lang13.Bool( this.disabilities & 1 ) ) {
					blind_minimum = true;
				}
				this.eye_blind = blind_minimum ?1:0;

				if ( !( this.eye_blind != 0 ) ) {
					this.clear_alert( "blind" );
					this.clear_fullscreen( "blind" );
				}
			}
			return;
		}

		// Function from file: living.dm
		public virtual void adjust_blindness( int amount = 0 ) {
			int old_eye_blind = 0;
			bool blind_minimum = false;

			
			if ( amount > 0 ) {
				old_eye_blind = this.eye_blind;
				this.eye_blind += amount;

				if ( !( old_eye_blind != 0 ) ) {
					this.throw_alert( "blind", typeof(Obj_Screen_Alert_Blind) );
					this.overlay_fullscreen( "blind", typeof(Obj_Screen_Fullscreen_Blind) );
				}
			} else if ( this.eye_blind != 0 ) {
				blind_minimum = false;

				if ( this.stat == 1 || Lang13.Bool( this.disabilities & 1 ) ) {
					blind_minimum = true;
				}
				this.eye_blind = Num13.MaxInt( this.eye_blind + amount, blind_minimum ?1:0 );

				if ( !( this.eye_blind != 0 ) ) {
					this.clear_alert( "blind" );
					this.clear_fullscreen( "blind" );
				}
			}
			return;
		}

		// Function from file: living.dm
		public virtual void blind_eyes( double amount = 0 ) {
			int old_eye_blind = 0;

			
			if ( amount > 0 ) {
				old_eye_blind = this.eye_blind;
				this.eye_blind = Num13.MaxInt( this.eye_blind, ((int)( amount )) );

				if ( !( old_eye_blind != 0 ) ) {
					this.throw_alert( "blind", typeof(Obj_Screen_Alert_Blind) );
					this.overlay_fullscreen( "blind", typeof(Obj_Screen_Fullscreen_Blind) );
				}
			}
			return;
		}

		// Function from file: living.dm
		public virtual void update_sight(  ) {
			return;
		}

		// Function from file: living.dm
		public virtual ByTable get_contents( Obj_Item_Weapon_Storage Storage = null ) {
			return null;
		}

		// Function from file: observer.dm
		public Mob_Dead_Observer ghostize( bool? can_reenter_corpse = null ) {
			can_reenter_corpse = can_reenter_corpse ?? true;

			Mob_Dead_Observer ghost = null;

			
			if ( Lang13.Bool( this.key ) ) {
				
				if ( !String13.CompareIgnoreCase( "@", String13.SubStr( this.key, 1, 2 ) ) ) {
					ghost = new Mob_Dead_Observer( this );
					GlobalVars.SStgui.on_transfer( this, ghost );
					ghost.can_reenter_corpse = can_reenter_corpse;
					ghost.key = this.key;
					return ghost;
				}
			}
			return null;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_ears(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_pockets(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_s_store(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_glasses(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_shoes(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_wear_id(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_gloves(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_hair(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_head(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_belt(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_w_uniform(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_wear_suit(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_wear_mask(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_r_hand(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_l_hand(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_back(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_legcuffed(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_handcuffed(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_transform(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_icons(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual bool regenerate_icons(  ) {
			return false;
		}

		// Function from file: transform_procs.dm
		public bool safe_animal( dynamic MP = null ) {
			
			if ( !Lang13.Bool( MP ) ) {
				return false;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Hostile_Construct) ) ) ) {
				return false;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Pet_Cat) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Pet_Dog_Corgi) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Crab) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Hostile_Carp) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Hostile_Mushroom) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Shade) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Hostile_Killertomato) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Mouse) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Hostile_Bear) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Parrot) ) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: transform_procs.dm
		public virtual dynamic Animalize(  ) {
			dynamic _default = null;

			dynamic mobtypes = null;
			dynamic mobpath = null;
			dynamic new_mob = null;

			mobtypes = Lang13.GetTypes( typeof(Mob_Living_SimpleAnimal) );
			mobpath = Interface13.Input( "Which type of mob should " + this + " turn into?", "Choose a type", null, null, mobtypes, InputType.Any );

			if ( !this.safe_animal( mobpath ) ) {
				Task13.User.WriteMsg( "<span class='danger'>Sorry but this mob type is currently unavailable.</span>" );
				return _default;
			}
			new_mob = Lang13.Call( mobpath, this.loc );
			new_mob.key = this.key;
			new_mob.a_intent = "harm";
			new_mob.WriteMsg( "You feel more... animalistic" );
			_default = new_mob;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: transform_procs.dm
		public Mob_Camera_God become_god( string side_colour = null ) {
			Mob_Camera_God _default = null;

			Mob_Camera_God G = null;

			G = new Mob_Camera_God( this.loc );
			G.side = side_colour;

			if ( this.mind != null ) {
				this.mind.transfer_to( G );
			} else {
				G.key = this.key;
			}
			G.job = "Deity";
			G.rename_self( "deity" );
			G.update_icons();
			_default = G;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: transform_procs.dm
		public virtual Mob_Living_Silicon_Ai AIize(  ) {
			Mob_Living_Silicon_Ai _default = null;

			Mob_Living_Silicon_Ai O = null;
			Obj_Effect_Landmark loc_landmark = null;
			Obj_Effect_Landmark_Start sloc = null;
			Obj_Effect_Landmark tripai = null;
			Obj_Effect_Landmark_Start sloc2 = null;
			Obj_Item_Device_Radio_Intercom comm = null;

			
			if ( this.client != null ) {
				this.stopLobbySound();
			}
			O = new Mob_Living_Silicon_Ai( this.loc, null, null, true );
			O.invisibility = 0;
			O.aiRestorePowerRoutine = 0;

			if ( this.mind != null ) {
				this.mind.transfer_to( O );
			} else {
				O.key = this.key;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark_Start) )) {
				sloc = _a;
				

				if ( sloc.name != "AI" ) {
					continue;
				}

				if ( Lang13.Bool( Lang13.FindIn( typeof(Mob_Living), sloc.loc ) ) ) {
					continue;
				}
				loc_landmark = sloc;
			}

			if ( !( loc_landmark != null ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					tripai = _b;
					

					if ( tripai.name == "tripai" ) {
						
						if ( Lang13.Bool( Lang13.FindIn( typeof(Mob_Living), tripai.loc ) ) ) {
							continue;
						}
						loc_landmark = tripai;
					}
				}
			}

			if ( !( loc_landmark != null ) ) {
				O.WriteMsg( "Oh god sorry we can't find an unoccupied AI spawn location, so we're spawning you on top of someone." );

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark_Start) )) {
					sloc2 = _c;
					

					if ( sloc2.name == "AI" ) {
						loc_landmark = sloc2;
					}
				}
			}
			O.loc = loc_landmark.loc;

			foreach (dynamic _d in Lang13.Enumerate( O.loc, typeof(Obj_Item_Device_Radio_Intercom) )) {
				comm = _d;
				
				comm.ai.Add( O );
			}
			O.WriteMsg( "<B>You are playing the station's AI. The AI cannot move, but can interact with many objects while viewing them (through cameras).</B>" );
			O.WriteMsg( "<B>To look at other parts of the station, click on yourself to get a camera menu.</B>" );
			O.WriteMsg( "<B>While observing through a camera, you can use most (networked) devices which you can see, such as computers, APCs, intercoms, doors, etc.</B>" );
			O.WriteMsg( "To use something, simply click on it." );
			O.WriteMsg( "Use say \":b to speak to your cyborgs through binary." );
			O.WriteMsg( "For department channels, use the following say commands:" );
			O.WriteMsg( ":o - AI Private, :c - Command, :s - Security, :e - Engineering, :u - Supply, :v - Service, :m - Medical, :n - Science." );
			O.show_laws();
			O.WriteMsg( "<b>These laws may be changed by other players, or by you being the traitor.</b>" );
			O.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "show_laws_verb" ) );
			O.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "ai_statuschange" ) );
			O.job = "AI";
			O.rename_self( "ai" );
			_default = O;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: say.dm
		public virtual int lingcheck(  ) {
			return 0;
		}

		// Function from file: say.dm
		public virtual dynamic hivecheck(  ) {
			return 0;
		}

		// Function from file: say.dm
		public virtual void emote( string act = null, int? m_type = null, dynamic message = null ) {
			return;
		}

		// Function from file: say.dm
		public void say_dead( dynamic message = null ) {
			dynamic name = null;
			string alt_name = null;
			string rendered = null;
			dynamic M = null;
			bool adminoverride = false;

			name = this.real_name;
			alt_name = "";

			if ( GlobalVars.say_disabled ) {
				Task13.User.WriteMsg( "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( this.mind != null && Lang13.Bool( this.mind.name ) ) {
				name = "" + this.mind.name;
			} else {
				name = this.real_name;
			}

			if ( name != this.real_name ) {
				alt_name = " (died as " + this.real_name + ")";
			}
			message = this.say_quote( message, this.get_spans() );
			rendered = "<span class='game deadsay'><span class='prefix'>DEAD:</span> <span class='name'>" + name + "</span>" + alt_name + " <span class='message'>" + message + "</span></span>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				
				adminoverride = false;

				if ( Lang13.Bool( M.client ) && Lang13.Bool( M.client.holder ) && ( M.client.prefs.chat_toggles & 2 ) != 0 ) {
					adminoverride = true;
				}

				if ( M is Mob_NewPlayer && !adminoverride ) {
					continue;
				}

				if ( Convert.ToInt32( M.stat ) != 2 && !adminoverride ) {
					continue;
				}

				if ( M is Mob_Dead_Observer ) {
					M.WriteMsg( new Txt( "<a href=?src=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( ">(F)</a> " ).item( rendered ).ToString() );
				} else {
					M.WriteMsg( "" + rendered );
				}
			}
			return;
		}

		// Function from file: mob_transformation_simple.dm
		public dynamic change_mob_type( dynamic new_type = null, dynamic location = null, dynamic new_name = null, bool? delete_old_mob = null ) {
			delete_old_mob = delete_old_mob ?? false;

			dynamic M = null;
			Mob C = null;
			dynamic D = null;
			dynamic H = null;

			
			if ( this is Mob_NewPlayer ) {
				Task13.User.WriteMsg( "<span class='danger'>cannot convert players who have not entered yet.</span>" );
				return null;
			}

			if ( !Lang13.Bool( new_type ) ) {
				new_type = Interface13.Input( "Mob type path:", "Mob type", null, null, null, InputType.Str | InputType.Null );
			}

			if ( new_type is string ) {
				new_type = Lang13.FindClass( new_type );
			}

			if ( !( new_type is Type ) ) {
				Task13.User.WriteMsg( "Invalid type path (new_type = " + new_type + ") in change_mob_type(). Contact a coder." );
				return null;
			}

			if ( new_type == typeof(Mob_NewPlayer) ) {
				Task13.User.WriteMsg( "<span class='danger'>cannot convert into a new_player mob type.</span>" );
				return null;
			}

			if ( location is Tile ) {
				M = Lang13.Call( new_type, location );
			} else {
				M = Lang13.Call( new_type, this.loc );
			}

			if ( !Lang13.Bool( M ) || !( M is Mob ) ) {
				Task13.User.WriteMsg( "Type path is not a mob (new_type = " + new_type + ") in change_mob_type(). Contact a coder." );
				GlobalFuncs.qdel( M );
				return null;
			}

			if ( new_name is string ) {
				M.name = new_name;
				M.real_name = new_name;
			} else {
				M.name = this.name;
				M.real_name = this.real_name;
			}

			if ( this.has_dna() != null && Lang13.Bool( M.has_dna() ) ) {
				C = this;
				D = M;
				((dynamic)C).dna.transfer_identity( D );
				((Mob_Living_Carbon)D).updateappearance( null, true, true );
			} else if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				this.client.prefs.copy_to( H );
				((Dna)H.dna).update_dna_identity();
			}

			if ( this.mind != null && M is Mob_Living ) {
				this.mind.transfer_to( M );
			} else {
				M.key = this.key;
			}

			if ( delete_old_mob == true ) {
				Task13.Schedule( 1, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this );
					return;
				}));
			}
			return M;
		}

		// Function from file: mob_movement.dm
		public virtual void update_gravity( bool has_gravity = false ) {
			return;
		}

		// Function from file: mob_movement.dm
		public virtual bool slip( int s_amount = 0, int w_amount = 0, dynamic O = null, dynamic lube = null ) {
			return false;
		}

		// Function from file: mob_movement.dm
		public void Move_Pulled( Ent_Static A = null ) {
			dynamic M = null;
			Mob_Living t = null;

			
			if ( !this.canmove || this.restrained() || !Lang13.Bool( this.pulling ) ) {
				return;
			}

			if ( Lang13.Bool( this.pulling.anchored ) ) {
				return;
			}

			if ( !((Ent_Static)this.pulling).Adjacent( this ) ) {
				return;
			}

			if ( A == this.loc && this.pulling.density ) {
				return;
			}

			if ( !( this.Process_Spacemove( Map13.GetDistance( this.pulling.loc, A ) ) != 0 ) ) {
				return;
			}

			if ( this.pulling is Mob ) {
				M = this.pulling;
				t = M.pulling;
				((Mob)M).stop_pulling();
				Map13.Step( this.pulling, Map13.GetDistance( this.pulling.loc, A ) );

				if ( Lang13.Bool( M ) ) {
					((Mob)M).start_pulling( t );
				}
			} else {
				Map13.Step( this.pulling, Map13.GetDistance( this.pulling.loc, A ) );
			}
			return;
		}

		// Function from file: mob_movement.dm
		public virtual int? mob_negates_gravity(  ) {
			return 0;
		}

		// Function from file: mob_movement.dm
		public virtual bool mob_has_gravity( Ent_Static T = null ) {
			return GlobalFuncs.has_gravity( this, T );
		}

		// Function from file: mob_helpers.dm
		public virtual bool reagent_check( dynamic R = null ) {
			return true;
		}

		// Function from file: mob_helpers.dm
		public virtual bool abiotic( bool? full_body = null ) {
			full_body = full_body ?? false;

			
			if ( Lang13.Bool( this.l_hand ) && ( ( !Lang13.Bool( this.l_hand.flags ) ?1:0) & 128 ) != 0 || Lang13.Bool( this.r_hand ) && ( ( !Lang13.Bool( this.r_hand.flags ) ?1:0) & 128 ) != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual bool update_health_hud( dynamic shown_health_amount = null ) {
			return false;
		}

		// Function from file: mob.dm
		public virtual void update_stat(  ) {
			return;
		}

		// Function from file: mob.dm
		public virtual void replace_identification_name( dynamic oldname = null, dynamic newname = null ) {
			ByTable searching = null;
			bool search_id = false;
			bool search_pda = false;
			dynamic A = null;
			dynamic ID = null;
			dynamic PDA = null;

			searching = this.GetAllContents();
			search_id = true;
			search_pda = true;

			foreach (dynamic _a in Lang13.Enumerate( searching )) {
				A = _a;
				

				if ( search_id && A is Obj_Item_Weapon_Card_Id ) {
					ID = A;

					if ( ID.registered_name == oldname ) {
						ID.registered_name = newname;
						ID.update_label();

						if ( !search_pda ) {
							break;
						}
						search_id = false;
					}
				} else if ( search_pda && A is Obj_Item_Device_Pda ) {
					PDA = A;

					if ( PDA.owner == oldname ) {
						PDA.owner = newname;
						PDA.update_label();

						if ( !search_id ) {
							break;
						}
						search_pda = false;
					}
				}
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void replace_records_name( dynamic oldname = null, dynamic newname = null ) {
			return;
		}

		// Function from file: mob.dm
		public virtual bool fully_replace_character_name( dynamic oldname = null, dynamic newname = null ) {
			Mind T = null;
			Objective obj = null;

			
			if ( !Lang13.Bool( newname ) ) {
				return false;
			}
			this.real_name = newname;
			this.name = newname;

			if ( this.mind != null ) {
				this.mind.name = newname;
			}

			if ( Lang13.Bool( oldname ) ) {
				this.replace_records_name( oldname, newname );
				this.replace_identification_name( oldname, newname );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
					T = _b;
					

					foreach (dynamic _a in Lang13.Enumerate( T.objectives, typeof(Objective) )) {
						obj = _a;
						

						if ( Lang13.Bool( obj.target ) && Lang13.Bool( obj.target.current ) && obj.target.current.real_name == this.name ) {
							obj.update_explanation_text();
						}
					}
				}
			}
			return true;
		}

		// Function from file: mob.dm
		public bool faction_check( dynamic target = null ) {
			dynamic F = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.faction )) {
				F = _a;
				

				if ( Lang13.Bool( target.faction.Contains( F ) ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual bool canUseTopic( dynamic M = null, bool? be_close = null, bool? no_dextery = null ) {
			return false;
		}

		// Function from file: mob.dm
		public bool can_see_reagents(  ) {
			Mob H = null;
			Obj_Item_Clothing CL = null;
			Obj_Item_Clothing CL2 = null;

			
			if ( this.stat == 2 ) {
				return true;
			}

			if ( this.has_unlimited_silicon_privilege ) {
				return true;
			}

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				if ( Lang13.Bool( ((dynamic)H).head ) && ((dynamic)H).head is Obj_Item_Clothing ) {
					CL = ((dynamic)H).head;

					if ( CL.scan_reagents ) {
						return true;
					}
				}

				if ( Lang13.Bool( ((dynamic)H).wear_mask ) && ((dynamic)H).wear_mask.scan_reagents ) {
					return true;
				}

				if ( Lang13.Bool( ((dynamic)H).glasses ) && ((dynamic)H).glasses is Obj_Item_Clothing ) {
					CL2 = ((dynamic)H).glasses;

					if ( CL2.scan_reagents ) {
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual bool can_unbuckle(  ) {
			return true;
		}

		// Function from file: mob.dm
		[VerbInfo( name: "can buckle" )]
		public virtual bool f_can_buckle(  ) {
			return true;
		}

		// Function from file: mob.dm
		public virtual int get_mob_buckling_height( Mob seat = null ) {
			Mob L = null;

			
			if ( seat is Mob_Living ) {
				L = seat;

				if ( Convert.ToDouble( ((dynamic)L).mob_size ) <= 1 ) {
					return 0;
				}
			}
			return 9;
		}

		// Function from file: mob.dm
		public void AddSpell( dynamic spell = null ) {
			this.mob_spell_list.Add( spell );

			if ( !Lang13.Bool( spell.action ) ) {
				spell.action = new Action_SpellAction();
				spell.action.target = spell;
				spell.action.name = spell.name;
				spell.action.button_icon = spell.action_icon;
				spell.action.button_icon_state = spell.action_icon_state;
				spell.action.background_icon_state = spell.action_background_icon_state;
			}

			if ( this is Mob_Living ) {
				((Action)spell.action).Grant( this );
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void setEarDamage( int damage = 0, double? deaf = null ) {
			return;
		}

		// Function from file: mob.dm
		public virtual void adjustEarDamage( double damage = 0, int deaf = 0 ) {
			return;
		}

		// Function from file: mob.dm
		public Mob_Dead_Observer notify_ghost_cloning( string message = null, string sound = null, dynamic source = null ) {
			message = message ?? "Someone is trying to revive you. Re-enter your corpse if you want to be revived!";
			sound = sound ?? "sound/effects/genetics.ogg";

			Mob_Dead_Observer ghost = null;

			ghost = this.get_ghost();

			if ( ghost != null ) {
				ghost.notify_cloning( message, sound, source );
				return ghost;
			}
			return null;
		}

		// Function from file: mob.dm
		public Mob_Dead_Observer get_ghost( bool? even_if_they_cant_reenter = null ) {
			even_if_they_cant_reenter = even_if_they_cant_reenter ?? false;

			Mob_Dead_Observer G = null;

			
			if ( this.mind != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.dead_mob_list, typeof(Mob_Dead_Observer) )) {
					G = _a;
					

					if ( G.mind == this.mind ) {
						
						if ( G.can_reenter_corpse == true || even_if_they_cant_reenter == true ) {
							return G;
						}
						break;
					}
				}
			}
			return null;
		}

		// Function from file: mob.dm
		public virtual int assess_threat( Mob_Living_SimpleAnimal_Bot judgebot = null, string lasercolor = null ) {
			return 0;
		}

		// Function from file: mob.dm
		public void AdjustResting( dynamic amount = null ) {
			this.resting = Num13.MaxInt( ((int)( this.resting + Convert.ToDouble( amount ) )), 0 );
			this.update_canmove();
			return;
		}

		// Function from file: mob.dm
		public void SetResting( dynamic amount = null ) {
			this.resting = Num13.MaxInt( Convert.ToInt32( amount ), 0 );
			this.update_canmove();
			return;
		}

		// Function from file: mob.dm
		public void Resting( dynamic amount = null ) {
			this.resting = Num13.MaxInt( Num13.MaxInt( this.resting, Convert.ToInt32( amount ) ), 0 );
			this.update_canmove();
			return;
		}

		// Function from file: mob.dm
		public void AdjustSleeping( int amount = 0 ) {
			int old_sleeping = 0;

			old_sleeping = this.sleeping;
			this.sleeping = Num13.MaxInt( this.sleeping + amount, 0 );

			if ( !( old_sleeping != 0 ) && this.sleeping != 0 ) {
				this.throw_alert( "asleep", typeof(Obj_Screen_Alert_Asleep) );
				this.update_stat();
			} else if ( old_sleeping != 0 && !( this.sleeping != 0 ) ) {
				this.clear_alert( "asleep" );
				this.update_stat();
			}
			return;
		}

		// Function from file: mob.dm
		public void SetSleeping( int amount = 0 ) {
			int old_sleeping = 0;

			old_sleeping = this.sleeping;
			this.sleeping = Num13.MaxInt( amount, 0 );

			if ( !( old_sleeping != 0 ) && this.sleeping != 0 ) {
				this.throw_alert( "asleep", typeof(Obj_Screen_Alert_Asleep) );
				this.update_stat();
			} else if ( old_sleeping != 0 && !( this.sleeping != 0 ) ) {
				this.clear_alert( "asleep" );
				this.update_stat();
			}
			return;
		}

		// Function from file: mob.dm
		public void Sleeping( dynamic amount = null, bool? updating_stat = null ) {
			updating_stat = updating_stat ?? true;

			int old_sleeping = 0;

			old_sleeping = this.sleeping;
			this.sleeping = Num13.MaxInt( Num13.MaxInt( this.sleeping, Convert.ToInt32( amount ) ), 0 );

			if ( !( old_sleeping != 0 ) && this.sleeping != 0 ) {
				this.throw_alert( "asleep", typeof(Obj_Screen_Alert_Asleep) );

				if ( updating_stat == true ) {
					this.update_stat();
				}
			} else if ( old_sleeping != 0 && !( this.sleeping != 0 ) ) {
				this.clear_alert( "asleep" );

				if ( updating_stat == true ) {
					this.update_stat();
				}
			}
			return;
		}

		// Function from file: mob.dm
		public void AdjustParalysis( int amount = 0 ) {
			int old_paralysis = 0;

			
			if ( ( this.status_flags & 4 ) != 0 ) {
				old_paralysis = this.paralysis;
				this.paralysis = Num13.MaxInt( this.paralysis + amount, 0 );

				if ( !( old_paralysis != 0 ) && this.paralysis != 0 || old_paralysis != 0 && !( this.paralysis != 0 ) ) {
					this.update_stat();
				}
			}
			return;
		}

		// Function from file: mob.dm
		public void SetParalysis( int amount = 0 ) {
			int old_paralysis = 0;

			
			if ( ( this.status_flags & 4 ) != 0 ) {
				old_paralysis = this.paralysis;
				this.paralysis = Num13.MaxInt( amount, 0 );

				if ( !( old_paralysis != 0 ) && this.paralysis != 0 || old_paralysis != 0 && !( this.paralysis != 0 ) ) {
					this.update_stat();
				}
			}
			return;
		}

		// Function from file: mob.dm
		public void Paralyse( dynamic amount = null ) {
			int old_paralysis = 0;

			
			if ( ( this.status_flags & 4 ) != 0 ) {
				old_paralysis = this.paralysis;
				this.paralysis = Num13.MaxInt( Num13.MaxInt( this.paralysis, Convert.ToInt32( amount ) ), 0 );

				if ( !( old_paralysis != 0 ) && this.paralysis != 0 || old_paralysis != 0 && !( this.paralysis != 0 ) ) {
					this.update_stat();
				}
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void AdjustWeakened( int amount = 0, bool? ignore_canweaken = null ) {
			ignore_canweaken = ignore_canweaken ?? false;

			
			if ( ( this.status_flags & 2 ) != 0 || ignore_canweaken == true ) {
				this.weakened = Num13.MaxInt( this.weakened + amount, 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void SetWeakened( int amount = 0 ) {
			
			if ( ( this.status_flags & 2 ) != 0 ) {
				this.weakened = Num13.MaxInt( amount, 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void Weaken( dynamic amount = null, bool? ignore_canweaken = null ) {
			ignore_canweaken = ignore_canweaken ?? false;

			
			if ( ( this.status_flags & 2 ) != 0 || ignore_canweaken == true ) {
				this.weakened = Num13.MaxInt( Num13.MaxInt( this.weakened, Convert.ToInt32( amount ) ), 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void AdjustStunned( int amount = 0 ) {
			
			if ( ( this.status_flags & 1 ) != 0 ) {
				this.stunned = Num13.MaxInt( ((int)( this.stunned + amount )), 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void SetStunned( double amount = 0 ) {
			
			if ( ( this.status_flags & 1 ) != 0 ) {
				this.stunned = Num13.MaxInt( ((int)( amount )), 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void Stun( dynamic amount = null ) {
			
			if ( ( this.status_flags & 1 ) != 0 ) {
				this.stunned = Num13.MaxInt( Num13.MaxInt( ((int)( this.stunned )), Convert.ToInt32( amount ) ), 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public void Dizzy( double amount = 0 ) {
			this.dizziness = Num13.MaxInt( this.dizziness, ((int)( amount )), 0 );
			return;
		}

		// Function from file: mob.dm
		public void Jitter( int amount = 0 ) {
			this.jitteriness = Num13.MaxInt( this.jitteriness, amount, 0 );
			return;
		}

		// Function from file: mob.dm
		public virtual void activate_hand( dynamic selhand = null ) {
			return;
		}

		// Function from file: mob.dm
		public virtual void swap_hand(  ) {
			return;
		}

		// Function from file: mob.dm
		public virtual bool IsAdvancedToolUser(  ) {
			return false;
		}

		// Function from file: mob.dm
		public virtual void fall( bool forced = false ) {
			this.drop_l_hand();
			this.drop_r_hand();
			return;
		}

		// Function from file: mob.dm
		public virtual bool update_canmove(  ) {
			bool ko = false;
			bool buckle_lying = false;

			ko = this.weakened != 0 || this.paralysis != 0 || this.stat != 0 || ( this.status_flags & 8192 ) != 0;
			buckle_lying = !( this.buckled != null && !( this.buckled.buckle_lying != 0 ) );

			if ( ko || this.resting != 0 || this.stunned != 0 ) {
				this.drop_r_hand();
				this.drop_l_hand();
				this.unset_machine();

				if ( Lang13.Bool( this.pulling ) ) {
					this.stop_pulling();
				}
			} else {
				this.lying = 0;
				this.canmove = true;
			}

			if ( this.buckled != null ) {
				this.lying = ( buckle_lying ?1:0) * 90;
			} else if ( ( ko || this.resting != 0 ) && !Lang13.Bool( this.lying ) ) {
				this.fall( ko );
			}
			this.canmove = !( ko || this.resting != 0 || this.stunned != 0 || this.buckled != null );
			this.density = !Lang13.Bool( this.lying );

			if ( Lang13.Bool( this.lying ) ) {
				
				if ( this.layer == Lang13.Initial( this, "layer" ) ) {
					this.layer = 371;
				}
			} else if ( this.layer == 371 ) {
				this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) );
			}
			this.update_transform();
			this.lying_prev = this.lying;
			return this.canmove;
		}

		// Function from file: mob.dm
		public bool canface(  ) {
			
			if ( !this.canmove ) {
				return false;
			}

			if ( this.client.moving ) {
				return false;
			}

			if ( Game13.time < Convert.ToDouble( this.client.move_delay ) ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return false;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				return false;
			}

			if ( Lang13.Bool( this.notransform ) ) {
				return false;
			}

			if ( this.restrained() ) {
				return false;
			}
			return true;
		}

		// Function from file: mob.dm
		public void add_stings_to_statpanel( ByTable stings = null ) {
			Obj_Effect_ProcHolder_Changeling S = null;

			
			foreach (dynamic _a in Lang13.Enumerate( stings, typeof(Obj_Effect_ProcHolder_Changeling) )) {
				S = _a;
				

				if ( S.chemical_cost >= 0 && S.can_be_used_by( this ) ) {
					Interface13.SetStatPanel( "" + S.panel, ( S.chemical_cost > 0 ? "" + S.chemical_cost : "" ), S );
				}
			}
			return;
		}

		// Function from file: mob.dm
		public void add_spells_to_statpanel( ByTable spells = null ) {
			Obj_Effect_ProcHolder_Spell S = null;

			
			foreach (dynamic _b in Lang13.Enumerate( spells, typeof(Obj_Effect_ProcHolder_Spell) )) {
				S = _b;
				

				if ( S.can_be_cast_by( this ) ) {
					
					switch ((string)( S.charge_type )) {
						case "recharge":
							Interface13.SetStatPanel( "" + S.panel, "" + S.charge_counter / 10 + "/" + S.charge_max / 10, S );
							break;
						case "charges":
							Interface13.SetStatPanel( "" + S.panel, "" + S.charge_counter + "/" + S.charge_max, S );
							break;
						case "holdervar":
							Interface13.SetStatPanel( "" + S.panel, "" + S.holder_var_type + " " + S.holder_var_amount, S );
							break;
					}
				}
			}
			return;
		}

		// Function from file: mob.dm
		public void show_viewers( dynamic message = null ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, null ) )) {
				M = _a;
				
				((Mob)M).see( message );
			}
			return;
		}

		// Function from file: mob.dm
		public bool see( dynamic message = null ) {
			
			if ( !this.is_active() ) {
				return false;
			}
			this.WriteMsg( message );
			return true;
		}

		// Function from file: mob.dm
		public virtual bool is_muzzled(  ) {
			return false;
		}

		// Function from file: mob.dm
		public virtual bool is_active(  ) {
			return 0 >= Task13.User.stat;
		}

		// Function from file: mob.dm
		public virtual bool stripPanelEquip( dynamic what = null, Mob who = null, double? where = null, bool? child_override = null ) {
			return false;
		}

		// Function from file: mob.dm
		public virtual void stripPanelUnequip( dynamic what = null, Mob who = null, double? where = null, bool? child_override = null ) {
			return;
		}

		// Function from file: mob.dm
		public void store_memory( string msg = null, dynamic popup = null, bool? sane = null ) {
			sane = sane ?? true;

			msg = String13.SubStr( msg, 1, 1024 );

			if ( sane == true ) {
				msg = GlobalFuncs.sanitize( msg );
			}

			if ( Lang13.Length( this.memory ) == 0 ) {
				this.memory += msg;
			} else {
				this.memory += "<BR>" + msg;
			}

			if ( Lang13.Bool( popup ) ) {
				this.f_memory();
			}
			return;
		}

		// Function from file: mob.dm
		public void update_pull_hud_icon(  ) {
			
			if ( this.client != null && this.hud_used != null ) {
				
				if ( this.hud_used.pull_icon != null ) {
					this.hud_used.pull_icon.update_icon( this );
				}
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void start_pulling( dynamic AM = null ) {
			dynamic M = null;

			
			if ( !Lang13.Bool( AM ) || !( this != null ) ) {
				return;
			}

			if ( AM == this || !( AM.loc is Tile ) ) {
				return;
			}

			if ( Lang13.Bool( AM.anchored ) ) {
				return;
			}
			((Ent_Static)AM).add_fingerprint( this );

			if ( Lang13.Bool( this.pulling ) ) {
				
				if ( AM == this.pulling ) {
					return;
				}
				this.stop_pulling();
			}
			this.pulling = AM;
			AM.pulledby = this;
			this.update_pull_hud_icon();

			if ( AM is Mob ) {
				M = AM;

				if ( !( this is Mob_Living_Carbon ) ) {
					M.LAssailant = null;
				} else {
					M.LAssailant = Task13.User;
				}
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void show_inv( Obj user = null ) {
			return;
		}

		// Function from file: mob.dm
		public virtual bool reset_perspective( dynamic A = null ) {
			
			if ( this.client != null ) {
				
				if ( A is Ent_Dynamic ) {
					this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
					this.client.eye = A;
				} else if ( this.loc is Tile ) {
					this.client.eye = this.client.mob;
					this.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
				} else {
					this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
					this.client.eye = this.loc;
				}
				return true;
			}
			return false;
		}

		// Function from file: mob.dm
		public bool equip_to_appropriate_slot( dynamic W = null ) {
			dynamic slot = null;

			
			if ( !( W is Obj_Item ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( W.slot_equipment_priority )) {
				slot = _a;
				

				if ( this.equip_to_slot_if_possible( W, slot, false, true, true ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mob.dm
		public dynamic equip_to_slot_or_del( dynamic W = null, int slot = 0 ) {
			this.equip_to_slot_if_possible( W, slot, true, true, false );
			return null;
		}

		// Function from file: mob.dm
		public virtual bool equip_to_slot( dynamic W = null, dynamic slot = null ) {
			return false;
		}

		// Function from file: mob.dm
		public bool equip_to_slot_if_possible( dynamic W = null, dynamic slot = null, bool? qdel_on_fail = null, bool? disable_warning = null, bool? redraw_mob = null ) {
			qdel_on_fail = qdel_on_fail ?? false;
			disable_warning = disable_warning ?? false;
			redraw_mob = redraw_mob ?? true;

			
			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( !Lang13.Bool( ((Obj_Item)W).mob_can_equip( this, slot, disable_warning ) ) ) {
				
				if ( qdel_on_fail == true ) {
					GlobalFuncs.qdel( W );
				} else if ( !( disable_warning == true ) ) {
					this.WriteMsg( "<span class='warning'>You are unable to equip that!</span>" );
				}
				return false;
			}
			this.equip_to_slot( W, slot );
			return true;
		}

		// Function from file: mob.dm
		public virtual bool attack_ui( int slot = 0 ) {
			dynamic W = null;
			dynamic I = null;

			W = this.get_active_hand();

			if ( W is Obj_Item ) {
				
				if ( this.equip_to_slot_if_possible( W, slot, false, false, false ) ) {
					return true;
				}
			}

			if ( !Lang13.Bool( W ) ) {
				I = this.get_item_by_slot( slot );

				if ( I is Obj_Item ) {
					((Ent_Static)I).attack_hand( this );
				}
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual bool incapacitated(  ) {
			return false;
		}

		// Function from file: mob.dm
		public virtual bool restrained(  ) {
			return false;
		}

		// Function from file: mob.dm
		public ByTable ret_grab( Obj_Effect_ListContainer_Mobl L = null, bool? flag = null ) {
			dynamic G = null;
			dynamic G2 = null;
			ByTable temp = null;

			
			if ( !( this.l_hand is Obj_Item_Weapon_Grab ) && !( this.r_hand is Obj_Item_Weapon_Grab ) ) {
				
				if ( !( L != null ) ) {
					return null;
				} else {
					return L.container;
				}
			} else {
				
				if ( !( L != null ) ) {
					L = new Obj_Effect_ListContainer_Mobl( null );
					L.container.Add( this );
					L.master = this;
				}

				if ( this.l_hand is Obj_Item_Weapon_Grab ) {
					G = this.l_hand;

					if ( !( L.container.Find( G.affecting ) != 0 ) ) {
						L.container.Add( G.affecting );

						if ( Lang13.Bool( G.affecting ) ) {
							((Mob)G.affecting).ret_grab( L, true );
						}
					}
				}

				if ( this.r_hand is Obj_Item_Weapon_Grab ) {
					G2 = this.r_hand;

					if ( !( L.container.Find( G2.affecting ) != 0 ) ) {
						L.container.Add( G2.affecting );

						if ( Lang13.Bool( G2.affecting ) ) {
							((Mob)G2.affecting).ret_grab( L, true );
						}
					}
				}

				if ( !( flag == true ) ) {
					
					if ( L.master == this ) {
						temp = new ByTable();
						temp.Add( L.container );
						GlobalFuncs.qdel( L );
						return temp;
					} else {
						return L.container;
					}
				}
			}
			return null;
		}

		// Function from file: mob.dm
		public virtual dynamic get_item_by_slot( dynamic slot_id = null ) {
			
			dynamic _a = slot_id; // Was a switch-case, sorry for the mess.
			if ( _a==4 ) {
				return this.l_hand;
			} else if ( _a==5 ) {
				return this.r_hand;
			}
			return null;
		}

		// Function from file: mob.dm
		public virtual bool Life(  ) {
			return false;
		}

		// Function from file: mob.dm
		public virtual dynamic movement_delay(  ) {
			return 0;
		}

		// Function from file: mob.dm
		public void show_message( dynamic msg = null, int? type = null, dynamic alt_msg = null, int? alt_type = null ) {
			
			if ( !( this.client != null ) ) {
				return;
			}
			msg = String13.SubStr( msg, 1, 1024 );

			if ( Lang13.Bool( type ) ) {
				
				if ( ( ( type ??0) & 1 ) != 0 && this.eye_blind != 0 ) {
					
					if ( !Lang13.Bool( alt_msg ) ) {
						return;
					} else {
						msg = alt_msg;
						type = alt_type;
					}
				}

				if ( ( ( type ??0) & 2 ) != 0 && Lang13.Bool( this.ear_deaf ) ) {
					
					if ( !Lang13.Bool( alt_msg ) ) {
						return;
					} else {
						msg = alt_msg;
						type = alt_type;

						if ( ( ( type ??0) & 1 ) != 0 && this.eye_blind != 0 ) {
							return;
						}
					}
				}
			}

			if ( this.stat == 1 ) {
				
				if ( ( ( type ??0) & 2 ) != 0 ) {
					this.WriteMsg( "<I>... You can almost hear something ...</I>" );
				}
			} else {
				this.WriteMsg( msg );
			}
			return;
		}

		// Function from file: mob.dm
		[VerbInfo( group: "Admin", hidden: true )]
		public bool Cell(  ) {
			GasMixture environment = null;
			string t = null;
			dynamic id = null;
			dynamic gas = null;

			
			if ( !( this.loc != null ) ) {
				return false;
			}
			environment = this.loc.return_air();
			t = "<span class='notice'>Coordinates: " + this.x + "," + this.y + " \n</span>";
			t += "<span class='danger'>Temperature: " + environment.temperature + " \n</span>";

			foreach (dynamic _a in Lang13.Enumerate( environment.gases )) {
				id = _a;
				
				gas = environment.gases[id];

				if ( Lang13.Bool( gas[1] ) ) {
					t += "<span class='notice'>" + gas[3][2] + ": " + gas[1] + " \n</span>";
				}
			}
			Task13.User.WriteMsg( t );
			return false;
		}

		// Function from file: login.dm
		public void update_Login_details(  ) {
			dynamic M = null;
			dynamic matches = null;

			this.lastKnownIP = this.client.address;
			this.computer_id = this.client.computer_id;
			GlobalFuncs.log_access( "Login: " + GlobalFuncs.key_name( this ) + " from " + ( Lang13.Bool( this.lastKnownIP ) ? this.lastKnownIP : "localhost" ) + "-" + this.computer_id + " || BYOND v" + this.client.byond_version );

			if ( GlobalVars.config.log_access ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( M == this ) {
						continue;
					}

					if ( Lang13.Bool( M.key ) && M.key != this.key ) {
						matches = null;

						if ( M.lastKnownIP == this.client.address ) {
							matches += "IP (" + this.client.address + ")";
						}

						if ( M.computer_id == this.client.computer_id ) {
							
							if ( Lang13.Bool( matches ) ) {
								matches += " and ";
							}
							matches += "ID (" + this.client.computer_id + ")";
							Task13.Schedule( 0, (Task13.Closure)(() => {
								Interface13.Alert( "You have logged in already with another key this round, please log out of this one NOW or risk being banned!" );
								return;
							}));
						}

						if ( Lang13.Bool( matches ) ) {
							
							if ( Lang13.Bool( M.client ) ) {
								GlobalFuncs.message_admins( "<font color='red'><B>Notice: </B><font color='blue'>" + GlobalFuncs.key_name_admin( this ) + " has the same " + matches + " as " + GlobalFuncs.key_name_admin( M ) + ".</font>" );
								GlobalFuncs.log_access( "Notice: " + GlobalFuncs.key_name( this ) + " has the same " + matches + " as " + GlobalFuncs.key_name( M ) + "." );
							} else {
								GlobalFuncs.message_admins( "<font color='red'><B>Notice: </B><font color='blue'>" + GlobalFuncs.key_name_admin( this ) + " has the same " + matches + " as " + GlobalFuncs.key_name_admin( M ) + " (no longer logged in). </font>" );
								GlobalFuncs.log_access( "Notice: " + GlobalFuncs.key_name( this ) + " has the same " + matches + " as " + GlobalFuncs.key_name( M ) + " (no longer logged in)." );
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: inventory.dm
		public ByTable get_equipped_items(  ) {
			ByTable items = null;

			items = new ByTable();

			if ( GlobalFuncs.hasvar( this, "back" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).back ) ) {
					items.Add( ((dynamic)this).back );
				}
			}

			if ( GlobalFuncs.hasvar( this, "belt" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).belt ) ) {
					items.Add( ((dynamic)this).belt );
				}
			}

			if ( GlobalFuncs.hasvar( this, "ears" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).ears ) ) {
					items.Add( ((dynamic)this).ears );
				}
			}

			if ( GlobalFuncs.hasvar( this, "glasses" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).glasses ) ) {
					items.Add( ((dynamic)this).glasses );
				}
			}

			if ( GlobalFuncs.hasvar( this, "gloves" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).gloves ) ) {
					items.Add( ((dynamic)this).gloves );
				}
			}

			if ( GlobalFuncs.hasvar( this, "head" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).head ) ) {
					items.Add( ((dynamic)this).head );
				}
			}

			if ( GlobalFuncs.hasvar( this, "shoes" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).shoes ) ) {
					items.Add( ((dynamic)this).shoes );
				}
			}

			if ( GlobalFuncs.hasvar( this, "wear_id" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).wear_id ) ) {
					items.Add( ((dynamic)this).wear_id );
				}
			}

			if ( GlobalFuncs.hasvar( this, "wear_mask" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).wear_mask ) ) {
					items.Add( ((dynamic)this).wear_mask );
				}
			}

			if ( GlobalFuncs.hasvar( this, "wear_suit" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).wear_suit ) ) {
					items.Add( ((dynamic)this).wear_suit );
				}
			}

			if ( GlobalFuncs.hasvar( this, "w_uniform" ) ) {
				
				if ( Lang13.Bool( ((dynamic)this).w_uniform ) ) {
					items.Add( ((dynamic)this).w_uniform );
				}
			}
			return items;
		}

		// Function from file: inventory.dm
		public bool remove_from_mob( dynamic O = null ) {
			this.unEquip( O );
			O.screen_loc = null;
			return true;
		}

		// Function from file: inventory.dm
		public virtual bool unEquip( dynamic I = null, int? force = null ) {
			
			if ( !Lang13.Bool( I ) ) {
				return true;
			}

			if ( Lang13.Bool( I.flags & 2 ) && !Lang13.Bool( force ) ) {
				return false;
			}

			if ( I == this.r_hand ) {
				this.r_hand = null;
				this.update_inv_r_hand();
			} else if ( I == this.l_hand ) {
				this.l_hand = null;
				this.update_inv_l_hand();
			}

			if ( Lang13.Bool( I ) ) {
				
				if ( this.client != null ) {
					this.client.screen.Remove( I );
				}
				I.loc = this.loc;
				((Obj_Item)I).dropped( this );

				if ( Lang13.Bool( I ) ) {
					I.layer = Lang13.Initial( I, "layer" );
				}
			}
			return true;
		}

		// Function from file: inventory.dm
		public bool canUnEquip( dynamic I = null, dynamic force = null ) {
			
			if ( !Lang13.Bool( I ) ) {
				return true;
			}

			if ( Lang13.Bool( I.flags & 2 ) && !Lang13.Bool( force ) ) {
				return false;
			}
			return true;
		}

		// Function from file: inventory.dm
		public virtual bool drop_item(  ) {
			
			if ( this.hand ) {
				return this.drop_l_hand();
			} else {
				return this.drop_r_hand();
			}
		}

		// Function from file: inventory.dm
		public bool drop_r_hand(  ) {
			
			if ( !this.loc.allow_drop() ) {
				return false;
			}
			return this.unEquip( this.r_hand );
		}

		// Function from file: inventory.dm
		public bool drop_l_hand(  ) {
			
			if ( !this.loc.allow_drop() ) {
				return false;
			}
			return this.unEquip( this.l_hand );
		}

		// Function from file: inventory.dm
		public bool drop_item_v(  ) {
			
			if ( this.stat == 0 && this.loc is Tile ) {
				return this.drop_item();
			}
			return false;
		}

		// Function from file: inventory.dm
		public bool put_in_hands( dynamic W = null ) {
			
			if ( !Lang13.Bool( W ) ) {
				return false;
			}

			if ( this.put_in_active_hand( W ) ) {
				return true;
			} else if ( this.put_in_inactive_hand( W ) ) {
				return true;
			} else {
				W.loc = GlobalFuncs.get_turf( this );
				W.layer = Lang13.Initial( W, "layer" );
				((Obj_Item)W).dropped( this );
				return false;
			}
			return false;
		}

		// Function from file: inventory.dm
		public bool put_in_inactive_hand( dynamic W = null ) {
			
			if ( this.hand ) {
				return this.put_in_r_hand( W );
			} else {
				return this.put_in_l_hand( W );
			}
		}

		// Function from file: inventory.dm
		public bool put_in_active_hand( dynamic W = null ) {
			
			if ( this.hand ) {
				return this.put_in_l_hand( W );
			} else {
				return this.put_in_r_hand( W );
			}
		}

		// Function from file: inventory.dm
		public virtual bool put_in_hand_check( dynamic W = null ) {
			
			if ( Lang13.Bool( this.lying ) && !Lang13.Bool( W.flags & 128 ) ) {
				return false;
			}

			if ( !( W is Obj_Item ) ) {
				return false;
			}
			return true;
		}

		// Function from file: inventory.dm
		public bool put_in_r_hand( dynamic W = null ) {
			
			if ( !this.put_in_hand_check( W ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.r_hand ) ) {
				W.loc = this;
				this.r_hand = W;
				W.layer = 20;
				((Obj_Item)W).equipped( this, 5 );

				if ( this.pulling == W ) {
					this.__CallVerb("Stop Pulling" );
				}
				this.update_inv_r_hand();
				W.pixel_x = Lang13.Initial( W, "pixel_x" );
				W.pixel_y = Lang13.Initial( W, "pixel_y" );
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public bool put_in_l_hand( dynamic W = null ) {
			
			if ( !this.put_in_hand_check( W ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.l_hand ) ) {
				W.loc = this;
				this.l_hand = W;
				W.layer = 20;
				((Obj_Item)W).equipped( this, 4 );

				if ( this.pulling == W ) {
					this.__CallVerb("Stop Pulling" );
				}
				this.update_inv_l_hand();
				W.pixel_x = Lang13.Initial( W, "pixel_x" );
				W.pixel_y = Lang13.Initial( W, "pixel_y" );
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public virtual bool can_equip( Obj_Item I = null, dynamic slot = null, bool? disable_warning = null ) {
			disable_warning = disable_warning ?? false;

			return false;
		}

		// Function from file: inventory.dm
		public dynamic get_inactive_hand(  ) {
			
			if ( this.hand ) {
				return this.r_hand;
			} else {
				return this.l_hand;
			}
		}

		// Function from file: inventory.dm
		public virtual dynamic get_active_hand(  ) {
			
			if ( this.hand ) {
				return this.l_hand;
			} else {
				return this.r_hand;
			}
		}

		// Function from file: tgstation.dme
		public virtual bool death( bool? gibbed = null, bool? toast = null ) {
			return false;
		}

		// Function from file: death.dm
		public virtual void dust( dynamic animation = null ) {
			return;
		}

		// Function from file: death.dm
		public virtual dynamic gib( dynamic animation = null ) {
			return null;
		}

		// Function from file: watertank.dm
		public virtual int getWatertankSlot(  ) {
			return 1;
		}

		// Function from file: objs.dm
		public void set_machine( Obj O = null ) {
			
			if ( this.machine != null ) {
				this.unset_machine();
			}
			this.machine = O;

			if ( O is Obj ) {
				O.in_use = true;
			}
			return;
		}

		// Function from file: objs.dm
		public void unset_machine(  ) {
			
			if ( this.machine != null ) {
				this.machine.on_unset_machine( this );
				this.machine = null;
			}
			return;
		}

		// Function from file: overview.dm
		public void clearmap(  ) {
			Obj_Screen O = null;

			this.client.screen.Remove( this.mapobjs );

			foreach (dynamic _a in Lang13.Enumerate( this.mapobjs, typeof(Obj_Screen) )) {
				O = _a;
				
				GlobalFuncs.qdel( O );
			}
			this.mapobjs = null;
			this.unset_machine();
			return;
		}

		// Function from file: wizard.dm
		public bool casting(  ) {
			
			if ( !( ((dynamic)Task13.User).wear_suit is Obj_Item_Clothing_Suit_Wizrobe ) ) {
				Task13.User.WriteMsg( "I don't feel strong enough without my robe." );
				return false;
			}

			if ( !( ((dynamic)Task13.User).shoes is Obj_Item_Clothing_Shoes_Sandal ) ) {
				Task13.User.WriteMsg( "I don't feel strong enough without my sandals." );
				return false;
			}

			if ( !( ((dynamic)Task13.User).head is Obj_Item_Clothing_Head_Wizard ) ) {
				Task13.User.WriteMsg( "I don't feel strong enough without my hat." );
				return false;
			} else {
				return true;
			}
		}

		// Function from file: wizard.dm
		public void spellremove( dynamic M = null ) {
			Obj_Effect_ProcHolder_Spell spell_to_remove = null;

			
			if ( !( this.mind != null ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.mind.spell_list, typeof(Obj_Effect_ProcHolder_Spell) )) {
				spell_to_remove = _a;
				
				GlobalFuncs.qdel( spell_to_remove );
				this.mind.spell_list.Remove( spell_to_remove );
			}
			return;
		}

		// Function from file: h_sandbox.dm
		[VerbInfo( name: "Sandbox Panel" )]
		public void sandbox_panel(  ) {
			
			if ( this.sandbox != null ) {
				this.sandbox.update();
			}
			return;
		}

		// Function from file: h_sandbox.dm
		public void CanBuild(  ) {
			
			if ( GlobalVars.master_mode == "sandbox" ) {
				this.sandbox = new HSB();
				this.sandbox.owner = this.ckey;

				if ( this.client.holder != null ) {
					this.sandbox.admin = true;
				}
				this.verbs.Add( typeof(Mob).GetMethod( "sandbox_panel" ) );
			}
			return;
		}

		// Function from file: runes.dm
		public dynamic null_rod_check(  ) {
			dynamic N = null;

			N = Lang13.FindIn( typeof(Obj_Item_Weapon_Nullrod), this );

			if ( Lang13.Bool( N ) ) {
				return N;
			}
			return 0;
		}

		// Function from file: ritual.dm
		public void cult_add_comm(  ) {
			this.verbs.Add( typeof(Mob_Living).GetMethod( "cult_innate_comm" ) );
			return;
		}

		// Function from file: evolution_menu.dm
		public void remove_changeling_powers( bool? keep_free_powers = null ) {
			keep_free_powers = keep_free_powers ?? false;

			Obj_Effect_ProcHolder_Changeling p = null;

			
			if ( this is Mob_Living_Carbon_Human || this is Mob_Living_Carbon_Monkey ) {
				
				if ( this.mind != null && this.mind.changeling != null ) {
					this.mind.changeling.changeling_speak = false;
					this.mind.changeling.reset();

					foreach (dynamic _a in Lang13.Enumerate( this.mind.changeling.purchasedpowers, typeof(Obj_Effect_ProcHolder_Changeling) )) {
						p = _a;
						

						if ( p.dna_cost == 0 && keep_free_powers == true ) {
							continue;
						}
						this.mind.changeling.purchasedpowers.Remove( p );
						p.on_refund( this );
					}
				}

				if ( this.hud_used != null ) {
					this.hud_used.lingstingdisplay.icon_state = null;
					this.hud_used.lingstingdisplay.invisibility = 101;
				}
			}
			return;
		}

		// Function from file: evolution_menu.dm
		public bool make_changeling(  ) {
			dynamic path = null;
			dynamic S = null;
			Mob C = null;
			Changelingprofile prof = null;

			
			if ( !( this.mind != null ) ) {
				return false;
			}

			if ( !( this is Mob_Living_Carbon_Human ) && !( this is Mob_Living_Carbon_Monkey ) ) {
				return false;
			}

			if ( !( this.mind.changeling != null ) ) {
				this.mind.changeling = new Changeling( this.gender );
			}

			if ( !( GlobalVars.sting_paths != null ) ) {
				GlobalVars.sting_paths = GlobalFuncs.init_paths( typeof(Obj_Effect_ProcHolder_Changeling) );
			}

			if ( this.mind.changeling.purchasedpowers != null ) {
				this.remove_changeling_powers( true );
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.sting_paths )) {
				path = _a;
				
				S = Lang13.Call( path );

				if ( !( S.dna_cost != 0 ) ) {
					
					if ( !this.mind.changeling.has_sting( S ) ) {
						this.mind.changeling.purchasedpowers.Add( S );
					}
					((Obj_Effect_ProcHolder_Changeling)S).on_purchase( this );
				}
			}
			C = this;

			if ( C is Mob_Living_Carbon_Human ) {
				prof = this.mind.changeling.add_new_profile( C, this );
				this.mind.changeling.first_prof = prof;
			}
			return true;
		}

		// Function from file: sound.dm
		public void stopLobbySound(  ) {
			this.WriteMsg( new Sound( null, false, false, 1, 85 ) );
			return;
		}

		// Function from file: dna.dm
		public virtual void domutcheck(  ) {
			return;
		}

		// Function from file: dna.dm
		public virtual Dna has_dna(  ) {
			return null;
		}

		// Function from file: dna.dm
		public virtual void set_species( dynamic mrace = null, bool? icon_update = null ) {
			icon_update = icon_update ?? true;

			return;
		}

		// Function from file: _MobProcs.dm
		public bool ForceContractDisease( dynamic D = null ) {
			
			if ( !this.CanContractDisease( D ) ) {
				return false;
			}
			this.AddDisease( D );
			return false;
		}

		// Function from file: _MobProcs.dm
		public void AddDisease( dynamic D = null ) {
			dynamic DD = null;
			ByTable skipped = null;
			dynamic V = null;
			dynamic L = null;

			DD = Lang13.Call( D.type, 1, D, 0 );
			this.viruses.Add( DD );
			DD.affected_mob = this;
			DD.holder = this;
			skipped = new ByTable(new object [] { "affected_mob", "holder", "carrier", "stage", "type", "parent_type", "vars", "transformed" });

			foreach (dynamic _a in Lang13.Enumerate( DD.vars )) {
				V = _a;
				

				if ( skipped.Contains( V ) ) {
					continue;
				}

				if ( DD.vars[V] is ByTable ) {
					L = D.vars[V];
					DD.vars[V] = L.Copy();
				} else {
					DD.vars[V] = D.vars[V];
				}
			}
			((Mob_Living_Carbon)DD.affected_mob).med_hud_set_status();
			return;
		}

		// Function from file: _MobProcs.dm
		public virtual bool ContractDisease( Disease D = null ) {
			
			if ( !this.CanContractDisease( D ) ) {
				return false;
			}
			this.AddDisease( D );
			return false;
		}

		// Function from file: _MobProcs.dm
		public virtual bool CanContractDisease( dynamic D = null ) {
			
			if ( this.stat == 2 ) {
				return false;
			}

			if ( this.resistances.Contains( ((Disease)D).GetDiseaseID() ) ) {
				return false;
			}

			if ( this.HasDisease( D ) ) {
				return false;
			}

			if ( !D.viable_mobtypes.Contains( this.type ) ) {
				return false;
			}

			if ( GlobalFuncs.count_by_type( this.viruses, typeof(Disease_Advance) ) >= 3 ) {
				return false;
			}
			return true;
		}

		// Function from file: _MobProcs.dm
		public bool HasDisease( dynamic D = null ) {
			Disease DD = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				DD = _a;
				

				if ( ((Disease)D).IsSame( DD ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mind.dm
		public virtual void mind_initialize(  ) {
			
			if ( this.mind != null ) {
				this.mind.key = this.key;
			} else {
				this.mind = new Mind( this.key );

				if ( GlobalVars.ticker != null ) {
					GlobalVars.ticker.minds.Add( this.mind );
				} else {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						throw new Exception( "mind_initialize(): No ticker ready" );
						return;
					}));
				}
			}

			if ( !Lang13.Bool( this.mind.name ) ) {
				this.mind.name = this.real_name;
			}
			this.mind.current = this;
			return;
		}

		// Function from file: mind.dm
		public virtual void sync_mind(  ) {
			this.mind_initialize();
			this.mind.active = true;
			return;
		}

		// Function from file: hud.dm
		public virtual void add_click_catcher(  ) {
			this.client.screen.Add( GlobalVars._void );
			return;
		}

		// Function from file: hud.dm
		public virtual void reload_huds(  ) {
			ByTable gang_huds = null;
			Gang G = null;
			AtomHud hud = null;

			gang_huds = new ByTable();

			if ( Lang13.Bool( GlobalVars.ticker.mode ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.mode.gangs, typeof(Gang) )) {
					G = _a;
					
					gang_huds.Add( G.ganghud );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.huds | gang_huds, typeof(AtomHud) )) {
				hud = _b;
				

				if ( hud.hudusers.Contains( this ) ) {
					hud.add_hud_to( this );
				}
			}
			return;
		}

		// Function from file: browser.dm
		public object browse_rsc_icon( string icon = null, string icon_state = null, int? dir = null ) {
			dir = dir ?? -1;

			return null;
		}

		// Function from file: hud.dm
		public virtual void create_mob_hud(  ) {
			
			if ( this.client != null && !( this.hud_used != null ) ) {
				this.hud_used = new Hud( this );
			}
			return;
		}

		// Function from file: fullscreen.dm
		public void reload_fullscreen(  ) {
			dynamic category = null;

			
			if ( this.client != null && this.stat != 2 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.screens )) {
					category = _a;
					
					this.client.screen.Or( this.screens[category] );
				}
			}
			return;
		}

		// Function from file: fullscreen.dm
		public void hide_fullscreens(  ) {
			dynamic category = null;

			
			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.screens )) {
					category = _a;
					
					this.client.screen.Remove( this.screens[category] );
				}
			}
			return;
		}

		// Function from file: fullscreen.dm
		public void clear_fullscreens(  ) {
			dynamic category = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.screens )) {
				category = _a;
				
				this.clear_fullscreen( category );
			}
			return;
		}

		// Function from file: fullscreen.dm
		public void clear_fullscreen( dynamic category = null, int? animated = null ) {
			animated = animated ?? 10;

			dynamic screen = null;

			screen = this.screens[category];

			if ( !Lang13.Bool( screen ) ) {
				return;
			}
			this.screens.Remove( category );

			if ( Lang13.Bool( animated ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					Icon13.Animate( new ByTable().Set( 1, screen ).Set( "alpha", 0 ).Set( "time", animated ) );
					Task13.Sleep( animated ??0 );

					if ( this.client != null ) {
						this.client.screen.Remove( screen );
					}
					GlobalFuncs.qdel( screen );
					return;
				}));
			} else {
				
				if ( this.client != null ) {
					this.client.screen.Remove( screen );
				}
				GlobalFuncs.qdel( screen );
			}
			return;
		}

		// Function from file: fullscreen.dm
		public dynamic overlay_fullscreen( string category = null, Type type = null, int? severity = null ) {
			dynamic screen = null;

			
			if ( Lang13.Bool( this.screens[category] ) ) {
				screen = this.screens[category];

				if ( screen.type != type ) {
					this.clear_fullscreen( category, GlobalVars.FALSE );
					return this.overlay_fullscreen();
				} else if ( !Lang13.Bool( severity ) || severity == Lang13.IntNullable( screen.severity ) ) {
					return null;
				}
			} else {
				screen = GlobalFuncs.PoolOrNew( type );
			}
			screen.icon_state = "" + Lang13.Initial( screen, "icon_state" ) + severity;
			screen.severity = severity;
			this.screens[category] = screen;

			if ( this.client != null && this.stat != 2 ) {
				this.client.screen.Add( screen );
			}
			return screen;
		}

		// Function from file: alert.dm
		public bool clear_alert( string category = null ) {
			dynamic alert = null;

			alert = this.alerts[category];

			if ( !Lang13.Bool( alert ) ) {
				return false;
			}
			this.alerts.Remove( category );

			if ( this.client != null && this.hud_used != null ) {
				this.hud_used.reorganize_alerts();
				this.client.screen.Remove( alert );
			}
			GlobalFuncs.qdel( alert );
			return false;
		}

		// Function from file: alert.dm
		public dynamic throw_alert( string category = null, Type type = null, int? severity = null, dynamic new_master = null ) {
			dynamic alert = null;
			dynamic old_layer = null;

			
			if ( !Lang13.Bool( category ) ) {
				return null;
			}

			if ( Lang13.Bool( this.alerts[category] ) ) {
				alert = this.alerts[category];

				if ( Lang13.Bool( new_master ) && new_master != alert.master ) {
					GlobalFuncs.warning( "" + ( "" + this + " threw alert " + category + " with new_master " + new_master + " while already having that alert with master " + alert.master ) + " in " + "code/_onclick/hud/alert.dm" + " at line " + 23 + " src: " + this + " usr: " + Task13.User + "." );
					this.clear_alert( category );
					return this.throw_alert();
				} else if ( alert.type != type ) {
					this.clear_alert( category );
					return this.throw_alert();
				} else if ( !Lang13.Bool( severity ) || severity == Lang13.IntNullable( alert.severity ) ) {
					
					if ( Lang13.Bool( alert.timeout ) ) {
						this.clear_alert( category );
						return this.throw_alert();
					} else {
						return 0;
					}
				}
			} else {
				alert = GlobalFuncs.PoolOrNew( type );
			}

			if ( Lang13.Bool( new_master ) ) {
				old_layer = new_master.layer;
				new_master.layer = GlobalVars.FLOAT_LAYER;
				alert.overlays += new_master;
				new_master.layer = old_layer;
				alert.icon_state = "template";
				alert.master = new_master;
			} else {
				alert.icon_state = "" + Lang13.Initial( alert, "icon_state" ) + severity;
				alert.severity = severity;
			}
			this.alerts[category] = alert;

			if ( this.client != null && this.hud_used != null ) {
				this.hud_used.reorganize_alerts();
			}
			alert.transform = Num13.Matrix( 32, 6, 7 );
			Icon13.Animate( new ByTable().Set( 1, alert ).Set( "transform", Num13.Matrix() ).Set( "time", 2.5 ).Set( "easing", 3 ) );

			if ( Lang13.Bool( alert.timeout ) ) {
				Task13.Schedule( Convert.ToInt32( alert.timeout ), (Task13.Closure)(() => {
					
					if ( Lang13.Bool( alert.timeout ) && this.alerts[category] == alert && Game13.time >= Convert.ToDouble( alert.timeout ) ) {
						this.clear_alert( category );
					}
					return;
				}));
				alert.timeout = Game13.time + Convert.ToDouble( alert.timeout ) - Game13.tick_lag;
			}
			return alert;
		}

		// Function from file: action.dm
		public virtual void update_action_buttons(  ) {
			return;
		}

		// Function from file: click.dm
		public virtual void face_atom( Ent_Static A = null ) {
			double dx = 0;
			double dy = 0;

			
			if ( this.buckled != null || this.stat != 0 || !( A != null ) || !( this.x != 0 ) || !( this.y != 0 ) || !( A.x != 0 ) || !( A.y != 0 ) ) {
				return;
			}
			dx = A.x - this.x;
			dy = A.y - this.y;

			if ( !( dx != 0 ) && !( dy != 0 ) ) {
				
				if ( A.pixel_y > 16 ) {
					this.dir = ((int)( GlobalVars.NORTH ));
				} else if ( A.pixel_y < -16 ) {
					this.dir = ((int)( GlobalVars.SOUTH ));
				} else if ( A.pixel_x > 16 ) {
					this.dir = ((int)( GlobalVars.EAST ));
				} else if ( A.pixel_x < -16 ) {
					this.dir = ((int)( GlobalVars.WEST ));
				}
				return;
			}

			if ( Math.Abs( dx ) < Math.Abs( dy ) ) {
				
				if ( dy > 0 ) {
					this.dir = ((int)( GlobalVars.NORTH ));
				} else {
					this.dir = ((int)( GlobalVars.SOUTH ));
				}
			} else if ( dx > 0 ) {
				this.dir = ((int)( GlobalVars.EAST ));
			} else {
				this.dir = ((int)( GlobalVars.WEST ));
			}
			return;
		}

		// Function from file: click.dm
		public virtual void LaserEyes( Ent_Static A = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual void CtrlShiftClickOn( Ent_Static A = null ) {
			A.CtrlShiftClick( this );
			return;
		}

		// Function from file: click.dm
		public virtual bool TurfAdjacent( dynamic T = null ) {
			return ((Ent_Static)T).Adjacent( this );
		}

		// Function from file: click.dm
		public virtual void AltClickOn( Ent_Static A = null ) {
			A.AltClick( this );
			return;
		}

		// Function from file: click.dm
		public virtual void CtrlClickOn( Ent_Static A = null ) {
			A.CtrlClick( this );
			return;
		}

		// Function from file: click.dm
		public virtual void ShiftClickOn( Ent_Static A = null ) {
			A.ShiftClick( this );
			return;
		}

		// Function from file: click.dm
		public virtual void MiddleClickOn( Ent_Static A = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual bool RestrainedClickOn( Ent_Static A = null ) {
			return false;
		}

		// Function from file: click.dm
		public virtual void RangedAttack( Ent_Static A = null, string _params = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			
			if ( A is Mob ) {
				this.changeNext_move( 8 );
			}
			return;
		}

		// Function from file: click.dm
		public virtual void DblClickOn( Ent_Static A = null, string _params = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual void ClickOn( Ent_Static A = null, string _params = null ) {
			ByTable modifiers = null;
			Ent_Static M = null;
			dynamic W = null;
			dynamic resolved = null;
			dynamic resolved2 = null;

			
			if ( Game13.time <= this.next_click ) {
				return;
			}
			this.next_click = Game13.time + 1;

			if ( this.client.click_intercept != null ) {
				
				if ( Lang13.Bool( Lang13.Call( Lang13.BindFunc( this.client.click_intercept, "ClickOn" ), this, _params, A ) ) ) {
					return;
				}
			}
			modifiers = String13.ParseUrlParams( _params );

			if ( Lang13.Bool( modifiers["shift"] ) && Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlShiftClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["middle"] ) ) {
				this.MiddleClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["shift"] ) ) {
				this.ShiftClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["alt"] ) ) {
				this.AltClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlClickOn( A );
				return;
			}

			if ( this.stat != 0 || this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 || this.sleeping != 0 ) {
				return;
			}
			this.face_atom( A );

			if ( this.next_move > Game13.time ) {
				return;
			}

			if ( this.loc is Obj_Mecha ) {
				M = this.loc;
				((Obj_Mecha)M).click_action( A, this ); return;
			}

			if ( this.restrained() ) {
				this.changeNext_move( 10 );
				this.RestrainedClickOn( A );
				return;
			}

			if ( this.in_throw_mode ) {
				this.throw_item( A );
				return;
			}
			W = this.get_active_hand();

			if ( W == A ) {
				((Obj_Item)W).attack_self( this );

				if ( this.hand ) {
					this.update_inv_l_hand(  );
				} else {
					this.update_inv_r_hand(  );
				}
				return;
			}

			if ( !( A is Tile ) && A == this.loc || this.contents.Contains( A ) || this.contents.Contains( A.loc ) || A.loc != null && this.contents.Contains( A.loc.loc ) ) {
				
				if ( Lang13.Bool( W ) ) {
					resolved = A.attackby( W, this );

					if ( !Lang13.Bool( resolved ) && A != null && Lang13.Bool( W ) ) {
						W.afterattack( A, this, 1, _params );
					}
				} else {
					
					if ( A is Mob ) {
						this.changeNext_move( 8 );
					}
					this.UnarmedAttack( A );
				}
				return;
			}

			if ( !( this.loc is Tile ) ) {
				return;
			}

			if ( A is Tile || A.loc is Tile || A.loc != null && A.loc.loc is Tile ) {
				
				if ( A.Adjacent( this ) ) {
					
					if ( Lang13.Bool( W ) ) {
						resolved2 = A.attackby( W, this, _params );

						if ( !Lang13.Bool( resolved2 ) && A != null && Lang13.Bool( W ) ) {
							W.afterattack( A, this, 1, _params );
						}
					} else {
						
						if ( A is Mob ) {
							this.changeNext_move( 8 );
						}
						this.UnarmedAttack( A, true );
					}
					return;
				} else if ( Lang13.Bool( W ) ) {
					W.afterattack( A, this, 0, _params );
				} else {
					this.RangedAttack( A, _params );
				}
			}
			return;
		}

		// Function from file: click.dm
		public void changeNext_move( double num = 0 ) {
			this.next_move = Game13.time + ( num + ( this.next_move_adjust ?1:0) ) * ( this.next_move_modifier ?1:0);
			return;
		}

		// Function from file: unsorted.dm
		public void rename_self( string role = null ) {
			dynamic oldname = null;
			dynamic newname = null;
			int loop = 0;
			int safety = 0;
			Mob_Living M = null;

			oldname = this.real_name;
			loop = 1;
			safety = 0;

			while (loop != 0 && safety < 5) {
				
				if ( this.client != null && Lang13.Bool( this.client.prefs.custom_names[role] ) && !( safety != 0 ) ) {
					newname = this.client.prefs.custom_names[role];
				} else {
					
					switch ((string)( role )) {
						case "clown":
							newname = Rand13.PickFromTable( GlobalVars.clown_names );
							break;
						case "mime":
							newname = Rand13.PickFromTable( GlobalVars.mime_names );
							break;
						case "ai":
							newname = Rand13.PickFromTable( GlobalVars.ai_names );
							break;
						case "deity":
							newname = Rand13.PickFromTable( GlobalVars.clown_names | GlobalVars.ai_names | GlobalVars.mime_names );
							break;
						default:
							return;
							break;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
					M = _b;
					

					if ( M == this ) {
						continue;
					}

					if ( !Lang13.Bool( newname ) || M.real_name == newname ) {
						newname = null;
						loop++;
						break;
					}
				}
				loop--;
				safety++;
			}

			if ( Lang13.Bool( newname ) ) {
				this.fully_replace_character_name( oldname, newname );
			}
			return;
		}

		// Function from file: icons.dm
		public void AddCamoOverlay( dynamic A = null ) {
			Icon opacity_icon = null;
			Icon alpha_mask = null;
			int? i = null;
			Image I = null;

			opacity_icon = new Icon( A.icon, A.icon_state );
			alpha_mask = GlobalFuncs.getIconMask( this );
			opacity_icon.AddAlphaMask( alpha_mask );
			opacity_icon.ChangeOpacity( 0.4 );
			i = null;
			i = 0;

			while (( i ??0) < 5) {
				I = new Image( opacity_icon, null, A.icon_state, this.layer + 0.8 );

				switch ((int?)( i )) {
					case 1:
						I.pixel_x--;
						break;
					case 2:
						I.pixel_x++;
						break;
					case 3:
						I.pixel_y--;
						break;
					case 4:
						I.pixel_y++;
						break;
				}
				this.overlays.Add( I );
				i++;
			}
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Me", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public void me_verb( string message = null ) {
			
			if ( GlobalVars.say_disabled ) {
				Task13.User.WriteMsg( "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}
			message = GlobalFuncs.trim( String13.SubStr( GlobalFuncs.sanitize( message ), 1, 1024 ) );
			Task13.User.emote( "me", 1, message );
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Whisper", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public virtual void whisper( dynamic message = null ) {
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Say", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public void say_verb( dynamic message = null ) {
			
			if ( GlobalVars.say_disabled ) {
				Task13.User.WriteMsg( "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}
			Task13.User.say( message );
			return;
		}

		// Function from file: mob_helpers.dm
		[Verb]
		[VerbInfo( name: "a-intent", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void a_intent_change( string input = null ) {
			
			if ( this is Mob_Living_Carbon_Human || this is Mob_Living_Carbon_Alien_Humanoid || this is Mob_Living_Carbon_Brain ) {
				
				switch ((string)( input )) {
					case "help":
					case "disarm":
					case "grab":
					case "harm":
						this.a_intent = input;
						break;
					case "right":
						this.a_intent = GlobalFuncs.intent_numeric( ( GlobalFuncs.intent_numeric( this.a_intent ) + 1 ) % 4 );
						break;
					case "left":
						this.a_intent = GlobalFuncs.intent_numeric( ( GlobalFuncs.intent_numeric( this.a_intent ) + 3 ) % 4 );
						break;
				}

				if ( this.hud_used != null && this.hud_used.action_intent != null ) {
					this.hud_used.action_intent.icon_state = "" + this.a_intent;
				}
			} else if ( this is Mob_Living_Silicon_Robot || this is Mob_Living_Carbon_Monkey || this is Mob_Living_Carbon_Alien_Larva ) {
				
				switch ((string)( input )) {
					case "help":
						this.a_intent = "help";
						break;
					case "harm":
						this.a_intent = "harm";
						break;
					case "right":
					case "left":
						this.a_intent = GlobalFuncs.intent_numeric( GlobalFuncs.intent_numeric( this.a_intent ) - 3 );
						break;
				}

				if ( this.hud_used != null && this.hud_used.action_intent != null ) {
					this.hud_used.action_intent.icon_state = "" + this.a_intent;
				}
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public bool southface(  ) {
			
			if ( !this.canface() ) {
				return false;
			}
			this.dir = ((int)( GlobalVars.SOUTH ));
			this.client.move_delay += this.movement_delay();
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public bool northface(  ) {
			
			if ( !this.canface() ) {
				return false;
			}
			this.dir = ((int)( GlobalVars.NORTH ));
			this.client.move_delay += this.movement_delay();
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public bool westface(  ) {
			
			if ( !this.canface() ) {
				return false;
			}
			this.dir = ((int)( GlobalVars.WEST ));
			this.client.move_delay += this.movement_delay();
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public bool eastface(  ) {
			
			if ( !this.canface() ) {
				return false;
			}
			this.dir = ((int)( GlobalVars.EAST ));
			this.client.move_delay += this.movement_delay();
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Cancel Camera View", group: "OOC" )]
		public virtual void cancel_camera(  ) {
			this.reset_perspective( null );
			this.unset_machine();
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Observe", group: "OOC" )]
		public void observe(  ) {
			bool is_admin = false;
			ByTable creatures = null;
			dynamic eye_name = null;
			string ok = null;
			dynamic mob_eye = null;

			is_admin = false;

			if ( GlobalFuncs.check_rights_for( this.client, 2 ) ) {
				is_admin = true;
			} else if ( this.stat != 2 || this is Mob_NewPlayer ) {
				Task13.User.WriteMsg( "<span class='notice'>You must be observing to use this!</span>" );
				return;
			}

			if ( is_admin && this.stat == 2 ) {
				is_admin = false;
			}
			creatures = GlobalFuncs.getpois();
			this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
			eye_name = null;
			ok = "" + ( is_admin ? "Admin Observe" : "Observe" );
			eye_name = Interface13.Input( "Please, select a player!", ok, null, null, creatures, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( eye_name ) ) {
				return;
			}
			mob_eye = creatures[eye_name];

			if ( this.client != null && Lang13.Bool( mob_eye ) ) {
				this.client.eye = mob_eye;
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Respawn", group: "OOC" )]
		public void abandon_mob(  ) {
			Mob_NewPlayer M = null;

			
			if ( !GlobalVars.abandon_allowed ) {
				return;
			}

			if ( this.stat != 2 || !( GlobalVars.ticker != null ) ) {
				Task13.User.WriteMsg( "<span class='boldnotice'>You must be dead to use this!</span>" );
				return;
			}
			GlobalFuncs.log_game( "" + Task13.User.name + "/" + Task13.User.key + " used abandon mob." );
			Task13.User.WriteMsg( "<span class='boldnotice'>Please roleplay correctly!</span>" );

			if ( !( this.client != null ) ) {
				GlobalFuncs.log_game( "" + Task13.User.key + " AM failed due to disconnect." );
				return;
			}
			this.client.screen.Cut();
			this.client.screen.Add( GlobalVars._void );

			if ( !( this.client != null ) ) {
				GlobalFuncs.log_game( "" + Task13.User.key + " AM failed due to disconnect." );
				return;
			}
			M = new Mob_NewPlayer();

			if ( !( this.client != null ) ) {
				GlobalFuncs.log_game( "" + Task13.User.key + " AM failed due to disconnect." );
				GlobalFuncs.qdel( M );
				return;
			}
			M.key = this.key;
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Add Note", group: "IC" )]
		[VerbArg( 1, InputType.StrMultiline )]
		public virtual void add_memory( string msg = null ) {
			msg = String13.SubStr( msg, 1, 1024 );
			msg = GlobalFuncs.sanitize( msg );

			if ( this.mind != null ) {
				this.mind.store_memory( msg );
			} else {
				this.WriteMsg( "The game appears to have misplaced your mind datum, so we can't show you your notes." );
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Notes", group: "IC" )]
		public virtual void f_memory(  ) {
			
			if ( this.mind != null ) {
				this.mind.show_memory( this );
			} else {
				this.WriteMsg( "The game appears to have misplaced your mind datum, so we can't show you your notes." );
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Activate Held Object", group: "Object", access: VerbAccess.IsUser )]
		public virtual void mode(  ) {
			dynamic W = null;
			dynamic W2 = null;

			
			if ( this.loc is Obj_Mecha ) {
				return;
			}

			if ( this.hand ) {
				W = this.l_hand;

				if ( Lang13.Bool( W ) ) {
					((Obj_Item)W).attack_self( this );
					this.update_inv_l_hand();
				}
			} else {
				W2 = this.r_hand;

				if ( Lang13.Bool( W2 ) ) {
					((Obj_Item)W2).attack_self( this );
					this.update_inv_r_hand();
				}
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Stop Pulling", group: "IC" )]
		public void stop_pulling(  ) {
			
			if ( Lang13.Bool( this.pulling ) ) {
				this.pulling.pulledby = null;
				this.pulling = null;
				this.update_pull_hud_icon();
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Point To", group: "Object" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public virtual bool pointed( dynamic A = null ) {
			dynamic tile = null;
			Obj_Effect_Decal_Point P = null;

			
			if ( !( this != null ) || !( this.loc is Tile ) || !Map13.FetchInView( null, this.loc ).Contains( A ) ) {
				return false;
			}

			if ( A is Obj_Effect_Decal_Point ) {
				return false;
			}
			tile = GlobalFuncs.get_turf( A );

			if ( !Lang13.Bool( tile ) ) {
				return false;
			}
			P = new Obj_Effect_Decal_Point( tile );
			P.invisibility = this.invisibility;
			Task13.Schedule( 20, (Task13.Closure)(() => {
				
				if ( P != null ) {
					GlobalFuncs.qdel( P );
				}
				return;
			}));
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Examine", group: "IC" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public virtual void examinate( Ent_Static A = null ) {
			
			if ( GlobalFuncs.is_blind( this ) != 0 ) {
				this.WriteMsg( "<span class='notice'>Something is there but you can't see it.</span>" );
				return;
			}
			this.face_atom( A );
			A.examine( this );
			return;
		}

		// Function from file: inventory.dm
		[Verb]
		[VerbInfo( name: "quick-equip", hidden: true )]
		public void quick_equip(  ) {
			dynamic I = null;

			I = this.get_active_hand();

			if ( Lang13.Bool( I ) ) {
				((Obj_Item)I).equip_to_best_slot( this );
			}
			return;
		}

		// Function from file: pray.dm
		[Verb]
		[VerbInfo( name: "Pray", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public void pray( string msg = null ) {
			Image cross = null;
			dynamic C = null;

			
			if ( GlobalVars.say_disabled ) {
				Task13.User.WriteMsg( "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			GlobalFuncs.log_prayer( "" + this.key + "/(" + this.name + "): " + msg );

			if ( Task13.User.client != null ) {
				
				if ( ( Task13.User.client.prefs.muted & 4 ) != 0 ) {
					Task13.User.WriteMsg( "<span class='danger'>You cannot pray (muted).</span>" );
					return;
				}

				if ( this.client.handle_spam_prevention( msg, 4 ) ) {
					return;
				}
			}
			cross = new Image( "icons/obj/storage.dmi", "bible" );

			if ( Task13.User.job == "Chaplain" ) {
				cross = new Image( "icons/obj/storage.dmi", "kingyellow" );
				msg = new Txt( "<span class='adminnotice'>" ).icon( cross ).str( " <b><font color=blue>CHAPLAIN PRAYER: </font>" ).item( GlobalFuncs.key_name_admin( this ) ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( this ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayeropts=" ).Ref( this ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( this ).str( "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" ).Ref( this ).str( "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( this ).str( "'>FLW</A>) (<A HREF='?_src_=holder;traitor=" ).Ref( this ).str( "'>TP</A>) (<A HREF='?_src_=holder;adminspawncookie=" ).Ref( this ).str( "'>SC</a>):</b> " ).item( msg ).str( "</span>" ).ToString();
			} else if ( GlobalFuncs.iscultist( Task13.User ) ) {
				cross = new Image( "icons/obj/storage.dmi", "tome" );
				msg = new Txt( "<span class='adminnotice'>" ).icon( cross ).str( " <b><font color=red>CULTIST PRAYER: </font>" ).item( GlobalFuncs.key_name_admin( this ) ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( this ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayeropts=" ).Ref( this ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( this ).str( "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" ).Ref( this ).str( "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( this ).str( "'>FLW</A>) (<A HREF='?_src_=holder;traitor=" ).Ref( this ).str( "'>TP</A>) (<A HREF='?_src_=holder;adminspawncookie=" ).Ref( this ).str( "'>SC</a>):</b> " ).item( msg ).str( "</span>" ).ToString();
			} else {
				cross = new Image( "icons/obj/storage.dmi", "bible" );
				msg = new Txt( "<span class='adminnotice'>" ).icon( cross ).str( " <b><font color=purple>PRAYER: </font>" ).item( GlobalFuncs.key_name_admin( this ) ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( this ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayeropts=" ).Ref( this ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( this ).str( "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" ).Ref( this ).str( "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( this ).str( "'>FLW</A>) (<A HREF='?_src_=holder;traitor=" ).Ref( this ).str( "'>TP</A>) (<A HREF='?_src_=holder;adminspawncookie=" ).Ref( this ).str( "'>SC</a>):</b> " ).item( msg ).str( "</span>" ).ToString();
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( ( C.prefs.chat_toggles & 16 ) != 0 ) {
					C.WriteMsg( msg );

					if ( Lang13.Bool( C.prefs.toggles & 512 ) ) {
						
						if ( Task13.User.job == "Chaplain" ) {
							C.WriteMsg( "sound/effects/pray.ogg" );
						}
					}
				}
			}
			Task13.User.WriteMsg( "Your prayers have been received by the gods." );
			GlobalFuncs.feedback_add_details( "admin_verb", "PR" );
			return;
		}

		// Function from file: skincmd.dm
		[Verb]
		[VerbInfo( hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void skincmd( string data = null ) {
			string _ref = null;
			Obj a = null;

			_ref = String13.SubStr( data, 1, String13.FindIgnoreCase( data, ";", 1, 0 ) );

			if ( this.skincmds[_ref] != null ) {
				a = this.skincmds[_ref];
				a.SkinCmd( this, String13.SubStr( data, String13.FindIgnoreCase( data, ";", 1, 0 ) + 1, 0 ) );
			}
			return;
		}

		// Function from file: voting.dm
		[Verb]
		[VerbInfo( name: "Vote", group: "OOC" )]
		public void vote(  ) {
			Browser popup = null;

			popup = new Browser( this, "vote", "Voting Panel" );
			popup.set_window_options( "can_close=0" );
			popup.set_content( GlobalVars.SSvote.f_interface( this.client ) );
			popup.open( false );
			return;
		}

		// Function from file: hud.dm
		[Verb]
		[VerbInfo( name: "F12", hidden: true )]
		public void button_pressed_F12(  ) {
			
			if ( this.hud_used != null && this.client != null ) {
				this.hud_used.show_hud();
				Task13.User.WriteMsg( "<span class ='info'>Switched HUD mode. Press F12 to toggle.</span>" );
			} else {
				Task13.User.WriteMsg( "<span class ='warning'>This mob type does not use a HUD.</span>" );
			}
			return;
		}

	}

}