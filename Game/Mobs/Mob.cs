// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob : Base_Mob {

		public ByTable skincmds = new ByTable();
		public HSB sandbox = null;
		public bool? suiciding = false;
		public ByTable open_uis = new ByTable();
		public ByTable pain_stored = new ByTable();
		public string last_pain_message = "";
		public int next_pain_time = 0;
		public Image fallimage = null;
		public double last_airflow_stun = 0;
		public int? bloody_hands = 0;
		public dynamic bloody_hands_mob = null;
		public bool track_blood = false;
		public ByTable feet_blood_DNA = null;
		public dynamic feet_blood_color = null;
		public dynamic track_blood_type = null;
		public DelayController click_delayer = new DelayController( true, 10000 );
		public DelayController attack_delayer = new DelayController( true, 10000 );
		public DelayController special_delayer = new DelayController( true, 10000 );
		public Mind mind = null;
		public int? stat = 0;
		public Game_Data flash = null;
		public Game_Data blind = null;
		public Game_Data hands = null;
		public Game_Data pullin = null;
		public Game_Data visible = null;
		public Game_Data purged = null;
		public Game_Data internals = null;
		public Game_Data oxygen = null;
		public dynamic i_select = null;
		public dynamic m_select = null;
		public Game_Data toxin = null;
		public Game_Data fire = null;
		public Game_Data bodytemp = null;
		public Game_Data healths = null;
		public Game_Data throw_icon = null;
		public Game_Data nutrition_icon = null;
		public Game_Data pressure = null;
		public Game_Data damageoverlay = null;
		public Game_Data pain = null;
		public Game_Data item_use_icon = null;
		public Game_Data gun_move_icon = null;
		public Game_Data gun_run_icon = null;
		public Game_Data gun_setting_icon = null;
		public Game_Data m_suitclothes = null;
		public Game_Data m_suitclothesbg = null;
		public Game_Data m_hat = null;
		public Game_Data m_hatbg = null;
		public Game_Data m_glasses = null;
		public Game_Data m_glassesbg = null;
		public ByTable spell_masters = null;
		public Image narsimage = null;
		public Image narglow = null;
		public Image riftimage = null;
		public Game_Data zone_sel = null;
		public bool use_me = true;
		public int damageoverlaytemp = 0;
		public string computer_id = null;
		public dynamic lastattacker = null;
		public dynamic lastattacked = null;
		public ByTable attack_log = new ByTable();
		public bool already_placed = false;
		public dynamic machine = null;
		public bool? other_mobs = null;
		public string memory = "";
		public bool poll_answer = false;
		public int sdisabilities = 0;
		public int disabilities = 0;
		public Ent_Static pulling = null;
		public bool monkeyizing = false;
		public bool other = false;
		public bool? hand = null;
		public int eye_blind = 0;
		public dynamic eye_blurry = null;
		public int ear_deaf = 0;
		public double ear_damage = 0;
		public dynamic stuttering = null;
		public double slurring = 0;
		public dynamic real_name = null;
		public dynamic flavor_text = "";
		public string med_record = "";
		public string sec_record = "";
		public string gen_record = "";
		public double? blinded = null;
		public int bhunger = 0;
		public Obj_Effect_Rune ajourn = null;
		public int druggy = 0;
		public int confused = 0;
		public dynamic antitoxs = null;
		public dynamic plasma = null;
		public int sleeping = 0;
		public int resting = 0;
		public bool? lying = false;
		public bool? lying_prev = false;
		public bool canmove = true;
		public bool candrop = true;
		public bool lastpuke = false;
		public bool v_unacidable = false;
		public dynamic size = 3;
		public ByTable callOnFace = new ByTable();
		public ByTable pinned = new ByTable();
		public ByTable embedded = new ByTable();
		public ByTable abilities = new ByTable();
		public ByTable speak_emote = new ByTable(new object [] { "says" });
		public int? emote_type = 1;
		public double treadmill_speed = 1;
		public dynamic name_archive = null;
		public int timeofdeath = 0;
		public bool cpr_time = true;
		public dynamic bodytemperature = 310.05499267578125;
		public dynamic drowsyness = 0;
		public int dizziness = 0;
		public int jitteriness = 0;
		public bool flying = false;
		public bool charges = false;
		public double nutrition = 400;
		public int overeatduration = 0;
		public int paralysis = 0;
		public double stunned = 0;
		public double weakened = 0;
		public int losebreath = 0;
		public dynamic intent = null;
		public bool shakecamera = false;
		public dynamic a_intent = "help";
		public string m_int = null;
		public string m_intent = "run";
		public string lastKnownIP = null;
		public dynamic l_hand = null;
		public dynamic r_hand = null;
		public dynamic back = null;
		public dynamic v_internal = null;
		public Obj_Item s_active = null;
		public dynamic wear_mask = null;
		public bool seer = false;
		public Hud hud_used = null;
		public UiIcons gui_icons = null;
		public ByTable grabbed_by = new ByTable();
		public ByTable requests = new ByTable();
		public ByTable mapobjs = new ByTable();
		public bool in_throw_mode = false;
		public bool coughedtime = false;
		public int? inertia_dir = 0;
		public string music_lastplayed = "null";
		public dynamic job = null;
		public bool blindness = true;
		public int deafness = 2;
		public int muteness = 4;
		public Dna dna = null;
		public double radiation = 0;
		public ByTable mutations = new ByTable();
		public string voice_name = "unidentifiable voice";
		public string faction = "neutral";
		public bool move_on_shuttle = true;
		public bool captured = false;
		public ByTable proc_holder_list = new ByTable();
		public dynamic LAssailant = null;
		public ByTable spell_list = new ByTable();
		public ByTable viruses = new ByTable();
		public ByTable resistances = new ByTable();
		public dynamic virus = null;
		public bool v_update_icon = true;
		public int status_flags = 15;
		public bool digitalcamo = false;
		public ByTable radar_blips = new ByTable();
		public bool radar_open = false;
		public bool force_compose = false;
		public Base_Data control_object = null;
		public Obj_Item_Projectile_Nikita orient_object = null;
		public bool universal_speak = false;
		public bool universal_understand = false;
		public bool has_limbs = true;
		public bool can_stand = true;
		public bool immune_to_ssd = false;
		public dynamic listed_turf = null;
		public ByTable active_genes = new ByTable();
		public bool kills = false;
		public int last_movement = -100;
		public bool deny_client_move = false;
		public int incorporeal_move = 0;
		public int origin_x = 0;
		public int origin_y = 0;
		public int origin_z = 0;
		public bool iscorpse = false;
		public ByTable languages = new ByTable( 0 );
		public bool stat_fucked = true;
		public _Event on_uattack = null;
		public ByTable alphas = new ByTable();
		public ByTable targeted_by = null;
		public int target_time = -100;
		public int last_move_intent = -100;
		public int last_target_click = -5;
		public Image target_locked = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.mouse_drag_pointer = 1;
			this.w_type = 3;
			this.flags = 17;
			this.penetration_dampening = 7;
			this.forceinvertredraw = true;
			this.layer = 4;
			this.see_in_dark = 2;
			this.see_invisible = 0;
		}

		// Function from file: mob.dm
		public Mob ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.mob_list.Add( this );

			if ( 2 == this.stat ) {
				GlobalVars.dead_mob_list.Add( this );
			} else {
				GlobalVars.living_mob_list.Add( this );
			}
			this.store_position();
			this.on_uattack = new _Event( null, this );
			this.forceMove( this.loc );

			if ( Lang13.Bool( this.flags & 32 ) ) {
				GlobalFuncs.getFromPool( typeof(Mob_Virtualhearer), this );
			}
			this.on_moved.Add( this, "update_verbs_onmove" );
			return;
		}

		// Function from file: Airflow.dm
		public override dynamic airflow_hit( dynamic A = null ) {
			dynamic _default = null;

			dynamic M = null;
			Obj_Item item = null;

			
			if ( this.size == 1 ) {
				return _default;
			}

			if ( !this.sound_override ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
					M = _a;
					
					M.show_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " slams into " ).a( A ).item().str( "!</span>" ).ToString(), 1, "<span class='warning'>You hear a loud slam!</span>", 2 );
				}
			}

			if ( A is Obj_Item ) {
				item = A;
				this.SetWeakened( item.w_class );
			} else {
				this.SetWeakened( Rand13.Int( 1, 5 ) );
			}
			_default = base.airflow_hit( (object)(A) );
			return _default;
		}

		// Function from file: Airflow.dm
		public override bool AirflowCanPush(  ) {
			
			if ( this.mutations.Contains( 300 ) ) {
				return false;
			}
			return true;
		}

		// Function from file: Airflow.dm
		public override bool check_airflow_movable( double n = 0 ) {
			
			if ( n < Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowHeavyPressure) ) ) ) {
				return false;
			}
			return true;
		}

		// Function from file: disposal.dm
		public override void pipe_eject( int? direction = null ) {
			
			if ( this.client != null ) {
				this.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
				this.client.eye = this;
			}
			return;
		}

		// Function from file: say.dm
		public override bool say_understands( Ent_Dynamic other = null, Language speaking = null ) {
			Language L = null;

			
			if ( this.stat == 2 ) {
				return true;
			}

			if ( this.universal_speak || this.universal_understand ) {
				return true;
			}

			if ( !( speaking != null ) ) {
				
				if ( other != null ) {
					other = other.GetSource();
				}

				if ( !( other != null ) || !( other is Mob ) ) {
					return true;
				}

				if ( Lang13.Bool( ((dynamic)other).universal_speak ) ) {
					return true;
				}

				if ( this is Mob_Living_Silicon_Ai && other is Mob_Living_Silicon_Pai ) {
					return true;
				}

				if ( Lang13.Bool( ((dynamic)this.type).IsInstanceOfType( other ) ) || Lang13.Bool( ((dynamic)other.type).IsInstanceOfType( this ) ) ) {
					return true;
				}
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.languages, typeof(Language) )) {
				L = _a;
				

				if ( speaking.name == L.name ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mob_movement.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			dynamic moving_mob = null;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Mob ) {
				moving_mob = mover;

				if ( this.other_mobs == true && moving_mob.other_mobs == true ) {
					return true;
				}
			}
			return !mover.density || !this.density || this.lying == true;
		}

		// Function from file: mob_defines.dm
		public override dynamic resetVariables( string args = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { args } ).Extend(_);

			base.resetVariables( "callOnFace", "pinned", "embedded", "abilities", "grabbed_by", "requests", "mapobjs", "mutations", "spell_list", "viruses", "resistances", "radar_blips", "active_genes", "attack_log", "speak_emote", (object)(_args) );
			this.callOnFace = new ByTable();
			this.pinned = new ByTable();
			this.embedded = new ByTable();
			this.abilities = new ByTable();
			this.grabbed_by = new ByTable();
			this.requests = new ByTable();
			this.mapobjs = new ByTable();
			this.mutations = new ByTable();
			this.spell_list = new ByTable();
			this.viruses = new ByTable();
			this.resistances = new ByTable();
			this.radar_blips = new ByTable();
			this.active_genes = new ByTable();
			this.attack_log = new ByTable();
			return null;
		}

		// Function from file: mob.dm
		public override void attack_pai( Mob_Living_Silicon_Pai user = null ) {
			this.ShiftClick( user );
			return;
		}

		// Function from file: mob.dm
		public override bool can_shuttle_move( Shuttle S = null ) {
			return true;
		}

		// Function from file: mob.dm
		public override void shuttle_rotate( double? angle = null ) {
			this.dir = Num13.Rotate( this.dir, -( angle ??0) );
			return;
		}

		// Function from file: mob.dm
		public override bool shuttle_act( Shuttle S = null ) {
			return false;
		}

		// Function from file: mob.dm
		public override dynamic Stat(  ) {
			Controller_Process process = null;
			Ent_Static A = null;
			Spell S = null;

			base.Stat();

			if ( this.client != null && this.client.holder != null && this.client.inactivity < 1200 ) {
				
				if ( Interface13.IsStatPanelActive( "Status" ) ) {
					Interface13.Stat( null, "Location:	(" + this.x + ", " + this.y + ", " + this.z + ")" );
					Interface13.Stat( null, "CPU:	" + Game13.cpu );
					Interface13.Stat( null, "Instances:	" + Game13.contents.len );
					Interface13.Stat( null, GlobalVars.FUCK );

					if ( !this.stat_fucked ) {
						
						if ( GlobalVars.garbageCollector != null ) {
							Interface13.Stat( null, "	qdel - " + ( GlobalVars.garbageCollector.del_everything ? "off" : "on" ) );
							Interface13.Stat( null, "	on queue - " + GlobalVars.garbageCollector.queue.len );
							Interface13.Stat( null, "	total delete - " + GlobalVars.garbageCollector.dels_count );
							Interface13.Stat( null, "	soft delete - " + GlobalVars.soft_dels );
							Interface13.Stat( null, "	hard delete - " + GlobalVars.garbageCollector.hard_dels );
						} else {
							Interface13.Stat( null, "Garbage Controller is not running." );
						}

						if ( GlobalVars.processScheduler != null && GlobalVars.processScheduler.getIsRunning() ) {
							process = GlobalVars.processScheduler.getProcess( "vote" );
							Interface13.Stat( null, "VOT	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "air" );
							Interface13.Stat( null, "AIR	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "sun" );
							Interface13.Stat( null, "SUN	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "ticker" );
							Interface13.Stat( null, "TIC	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "garbage" );
							Interface13.Stat( null, "GAR	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "lighting" );
							Interface13.Stat( null, "LIG	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "supply shuttle" );
							Interface13.Stat( null, "SUP	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "emergency shuttle" );
							Interface13.Stat( null, "EME	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "inactivity" );
							Interface13.Stat( null, "IAC	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "mob" );
							Interface13.Stat( null, "MOB(" + GlobalVars.mob_list.len + ")	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "disease" );
							Interface13.Stat( null, "DIS(" + GlobalVars.active_diseases.len + ")	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "machinery" );
							Interface13.Stat( null, "MAC(" + GlobalVars.machines.len + ")	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "power" );
							Interface13.Stat( null, "POM(" + GlobalVars.power_machines.len + ")	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "obj" );
							Interface13.Stat( null, "OBJ(" + GlobalVars.processing_objects.len + ")	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "pipenet" );
							Interface13.Stat( null, "PIP(" + GlobalVars.pipe_networks.len + ")	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "nanoui" );
							Interface13.Stat( null, "NAN(" + GlobalVars.nanomanager.processing_uis.len + ")	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
							process = GlobalVars.processScheduler.getProcess( "event" );
							Interface13.Stat( null, "EVE(" + GlobalVars.events.len + ")	 - #" + process.getTicks() + "	 - " + process.getLastRunTime() );
						} else {
							Interface13.Stat( null, "processScheduler is not running." );
						}
					}
				}
			}

			if ( this.client != null && this.client.inactivity < 1200 ) {
				
				if ( Lang13.Bool( this.listed_turf ) ) {
					
					if ( Map13.GetDistance( this.listed_turf, this ) > 1 ) {
						this.listed_turf = null;
					} else if ( Interface13.IsStatPanelActive( this.listed_turf.name ) ) {
						Interface13.SetStatPanel( this.listed_turf.name, null, this.listed_turf );

						foreach (dynamic _a in Lang13.Enumerate( this.listed_turf, typeof(Ent_Static) )) {
							A = _a;
							

							if ( A.invisibility > this.see_invisible ) {
								continue;
							}
							Interface13.SetStatPanel( this.listed_turf.name, null, A );
						}
					}
				}

				if ( this.spell_list != null && this.spell_list.len != 0 ) {
					
					foreach (dynamic _c in Lang13.Enumerate( this.spell_list, typeof(Spell) )) {
						S = _c;
						

						if ( !( S.connected_button != null ) || !Interface13.IsStatPanelActive( S.panel ) ) {
							continue;
						}

						switch ((string)( S.charge_type )) {
							case "recharge":
								Interface13.SetStatPanel( S.panel, "" + S.charge_counter / 10 + "/" + S.charge_max / 10, S.connected_button );
								break;
							case "charges":
								Interface13.SetStatPanel( S.panel, "" + S.charge_counter + "/" + S.charge_max, S.connected_button );
								break;
							case "holdervar":
								Interface13.SetStatPanel( S.panel, "" + S.holder_var_type + " " + S.holder_var_amount, S.connected_button );
								break;
						}
					}
				}
			}
			Task13.Sleep( ((int)( Game13.tick_lag * 2 )) );
			return null;
		}

		// Function from file: mob.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			base.MouseDrop( over_object, (object)(src_location), over_location, (object)(src_control), (object)(over_control), _params );

			if ( over_object != Task13.User ) {
				return null;
			}

			if ( Task13.User == this ) {
				return null;
			}

			if ( !this.Adjacent( Task13.User ) ) {
				return null;
			}

			if ( over_object is Mob_Living_Silicon_Ai ) {
				return null;
			}
			this.show_inv( Task13.User );
			return null;
		}

		// Function from file: mob.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string t1 = null;

			
			if ( Lang13.Bool( href_list["mach_close"] ) ) {
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
			}

			dynamic _a = href_list["flavor_text"]; // Was a switch-case, sorry for the mess.
			if ( _a=="more" ) {
				Interface13.Browse( Task13.User, "<HTML><HEAD><TITLE>" + this.name + "</TITLE></HEAD><BODY><TT>" + GlobalFuncs.replacetext( this.flavor_text, "\n", "<BR>" ) + "</TT></BODY></HTML>", "window=" + this.name + ";size=500x200" );
				GlobalFuncs.onclose( Task13.User, "" + this.name );
			} else if ( _a=="change" ) {
				this.update_flavor_text();
			}
			return null;
		}

		// Function from file: mob.dm
		public override void visible_message( dynamic message = null, dynamic self_message = null, dynamic blind_message = null, string drugged_message = null, string self_drugged_message = null, string blind_drugged_message = null ) {
			ByTable L = null;
			dynamic M = null;
			bool hallucination = false;
			dynamic msg = null;
			dynamic msg2 = null;

			
			if ( this.loc is Obj_Item_Weapon_Holder ) {
				L = Map13.FetchViewers( null, GlobalFuncs.get_turf( this ) );
			} else {
				L = Map13.FetchViewers( null, this );
			}

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				M = _a;
				

				if ( Convert.ToDouble( M.see_invisible ) < this.invisibility ) {
					continue;
				}
				hallucination = ((Mob)M).hallucinating();
				msg = message;
				msg2 = blind_message;

				if ( hallucination && Lang13.Bool( drugged_message ) ) {
					
					if ( Lang13.Bool( drugged_message ) ) {
						msg = drugged_message;
					}

					if ( Lang13.Bool( blind_drugged_message ) ) {
						msg2 = blind_drugged_message;
					}
				}

				if ( M == this ) {
					
					if ( Lang13.Bool( self_message ) ) {
						msg = self_message;
					}

					if ( hallucination && Lang13.Bool( self_drugged_message ) ) {
						msg = self_drugged_message;
					}
				}
				M.show_message( msg, 1, msg2, 2 );
			}
			return;
		}

		// Function from file: mob.dm
		public override int projectile_check(  ) {
			return 8;
		}

		// Function from file: mob.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Mob Ca = null;
			Obj_Screen_Movable_SpellMaster spell_master = null;
			Ent_Dynamic AM = null;
			Ent_Dynamic screenobj = null;
			Obj leftovers = null;

			
			if ( this.on_uattack != null ) {
				this.on_uattack.holder = null;
			}
			this.unset_machine();

			if ( this.mind != null && this.mind.current == this ) {
				this.mind.current = null;
			}
			this.spellremove( this );

			if ( this is Mob_Living_Carbon ) {
				Ca = this;
				((dynamic)Ca).dropBorers( 1 );
			}

			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
					spell_master = _a;
					
					GlobalFuncs.returnToPool( spell_master );
				}
				this.spell_masters = null;
				GlobalVars.spells = null;
				this.remove_screen_objs();

				foreach (dynamic _b in Lang13.Enumerate( this.client.screen, typeof(Ent_Dynamic) )) {
					AM = _b;
					
					screenobj = AM;

					if ( screenobj is Obj_Screen ) {
						
						if ( !Lang13.Bool( ((dynamic)screenobj).globalscreen ) ) {
							GlobalFuncs.returnToPool( AM );
						}
					} else {
						GlobalFuncs.qdel( AM );
					}
				}
				this.client.screen = new ByTable();
			}
			GlobalVars.mob_list.Remove( this );
			GlobalVars.dead_mob_list.Remove( this );
			GlobalVars.living_mob_list.Remove( this );
			this.ghostize( false );
			this.click_delayer = null;
			this.attack_delayer = null;
			this.special_delayer = null;
			this.gui_icons = null;
			GlobalFuncs.qdel( this.hud_used );
			this.hud_used = null;

			foreach (dynamic _c in Lang13.Enumerate( this, typeof(Obj) )) {
				leftovers = _c;
				
				GlobalFuncs.qdel( leftovers );
			}

			if ( this.on_uattack != null ) {
				this.on_uattack.holder = null;
				this.on_uattack = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: mob.dm
		public override void burnFireFuel( double used_fuel_ratio = 0, double used_reactants_ratio = 0 ) {
			return;
		}

		// Function from file: mob.dm
		public override int recycle( Game_Data rec = null ) {
			return 3;
		}

		// Function from file: logout.dm
		public override bool Logout(  ) {
			Ent_Static location = null;
			Mob_Virtualhearer VH = null;
			int admins_number = 0;

			
			if ( this.loc is Obj ) {
				location = this.loc;
				((dynamic)location).on_log();
			}

			if ( !Lang13.Bool( this.flags & 32 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.virtualhearers, typeof(Mob_Virtualhearer) )) {
					VH = _a;
					

					if ( VH.attached == this ) {
						GlobalFuncs.returnToPool( VH );
					}
				}
			}
			GlobalVars.nanomanager.user_logout( this );
			GlobalVars.player_list.Remove( this );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Logout: " + GlobalFuncs.key_name( this ) + " (" + GlobalFuncs.formatLocation( this.loc ) + ")" ) ) );
			this.remove_screen_objs();

			if ( Lang13.Bool( GlobalVars.admin_datums[this.ckey] ) ) {
				
				if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
					admins_number = GlobalVars.admins.len;
					GlobalFuncs.message_admins( "Admin logout: " + GlobalFuncs.key_name( this ) );

					if ( admins_number == 0 ) {
						GlobalFuncs.send2adminirc( "" + GlobalFuncs.key_name( this ) + " logged out - no more admins online." );
					}
				}
			}
			base.Logout();
			return false;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			Obj_Screen_Movable_SpellMaster spell_master = null;
			Mob H = null;
			Obj_Screen_Movable_SpellMaster spell_master2 = null;
			Ent_Static location = null;

			GlobalVars.player_list.Or( this );
			this.update_Login_details();
			Game13.update_status();

			if ( this.hud_used != null ) {
				GlobalFuncs.qdel( this.hud_used );
			}
			this.client.images = null;

			if ( this.spell_masters != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
					spell_master = _a;
					
					spell_master.toggle_open( 1 );
					this.client.screen.Remove( spell_master );
				}
			}
			this.client.reset_screen();
			this.hud_used = new Hud( this );
			this.gui_icons = new UiIcons( /* Pruned args, no ctor exists. */ );
			this.client.screen.Add( GlobalVars.catcher );

			if ( GlobalVars.round_end_info == "" ) {
				Interface13.WindowSet( this.client, "rpane.round_end", "is-visible=false" );
			}
			this.delayNextMove( 0 );
			this.sight |= GlobalVars.SEE_SELF;
			base.Login();
			this.reset_view();

			if ( Lang13.Bool( this.flags & 16 ) && !Lang13.Bool( this.flags & 32 ) ) {
				GlobalFuncs.getFromPool( typeof(Mob_Virtualhearer), this );
			}
			this.client.verbs.Remove( GlobalVars.ability_verbs );

			if ( this.abilities != null ) {
				this.client.verbs.Or( this.abilities );
			}

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				if ( Lang13.Bool( ((dynamic)H).species ) && Lang13.Bool( ((dynamic)H).species.abilities ) ) {
					H.verbs.Or( ((dynamic)H).species.abilities );
				}
			}

			if ( this.client != null ) {
				
				if ( GlobalVars.deadmins.Contains( this.ckey ) ) {
					this.client.verbs.Add( typeof(Client).GetMethod( "readmin" ) );
				}

				if ( this.mutations.Contains( 212 ) ) {
					this.client.view = Num13.MaxInt( this.client.view, Convert.ToInt32( Game13.view + 2 ) );
				}
			}
			GlobalFuncs.CallHook( "Login", new ByTable().Set( "client", this.client ).Set( "mob", this ) );

			if ( this.spell_masters != null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
					spell_master2 = _b;
					
					this.client.screen.Add( spell_master2 );
					spell_master2.toggle_open( 1 );
				}
			}

			if ( this.loc is Obj ) {
				location = this.loc;
				((dynamic)location).on_log();
			}

			if ( this.client != null && this.client.haszoomed && !( this.client.holder != null ) ) {
				this.client.view = Convert.ToInt32( Game13.view );
				this.client.haszoomed = false;
			}
			return null;
		}

		// Function from file: telekinesis.dm
		public override void attack_tk( Mob user = null ) {
			return;
		}

		// Function from file: Plasma.dm
		public virtual void pl_effects(  ) {
			return;
		}

		// Function from file: Plasma.dm
		public virtual void contaminate(  ) {
			return;
		}

		// Function from file: Airflow.dm
		public virtual bool airflow_stun(  ) {
			
			if ( this.stat == 2 || Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.last_airflow_stun > Game13.time - Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowStunCooldown) ) ) ) {
				return false;
			}

			if ( !( ( this.status_flags & 1 ) != 0 ) && !( ( this.status_flags & 2 ) != 0 ) ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>You stay upright as the air rushes past you.</span>" );
				return false;
			}

			if ( this.weakened <= 0 ) {
				this.WriteMsg( "<span class='warning'>The sudden rush of air knocks you over!</span>" );
			}
			this.SetWeakened( 5 );
			this.last_airflow_stun = Game13.time;
			return false;
		}

		// Function from file: MedicalSideEffects.dm
		public virtual void add_side_effect( string name = null, bool? strength = null ) {
			strength = strength ?? false;

			return;
		}

		// Function from file: fall.dm
		public void see_fall( dynamic T = null, int? range = null ) {
			range = range ?? 8;

			dynamic T_mob = null;
			Matrix original = null;
			int new_x = 0;
			int new_y = 0;

			T_mob = GlobalFuncs.get_turf( this );

			if ( ( !Lang13.Bool( T ) || T == null ) && this.fallimage != null ) {
				Icon13.Animate( new ByTable().Set( 1, this.fallimage ).Set( "transform", this.fallimage.transform / 50 ).Set( "time", 2 ) );
				Task13.Sleep( 2 );
				Lang13.Delete( this.fallimage );
				this.fallimage = null;
				return;
			} else if ( Lang13.Bool( T ) && Lang13.Bool( T_mob ) && T.z == T_mob.z && Map13.GetDistance( T, T_mob ) <= 15 ) {
				
				if ( !( this.fallimage != null ) ) {
					this.fallimage = new Image( "icons/effects/640x640.dmi", null, "fall", 201 );
					original = this.fallimage.transform;
					this.fallimage.transform /= 50;
					this.fallimage.mouse_opacity = 0;
				}
				new_x = Convert.ToInt32( ( T.x - T_mob.x ) * 32 - 304 );
				new_y = Convert.ToInt32( ( T.y - T_mob.y ) * 32 - 304 );
				this.fallimage.pixel_x = new_x;
				this.fallimage.pixel_y = new_y;
				((dynamic)this.fallimage).loc = T_mob;
				GlobalFuncs.to_chat( this, this.fallimage );
				Icon13.Animate( new ByTable().Set( 1, this.fallimage ).Set( "transform", original / ( 8 / ( range ??0) ) ).Set( "time", 3 ) );
			}
			return;
		}

		// Function from file: pain.dm
		public void flash_pain(  ) {
			Icon13.Flick( "pain", this.pain );
			return;
		}

		// Function from file: carbon.dm
		public dynamic has_brain_worms(  ) {
			dynamic I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents )) {
				I = _a;
				

				if ( I is Mob_Living_SimpleAnimal_Borer ) {
					return I;
				}
			}
			return 0;
		}

		// Function from file: carbon.dm
		public virtual void throw_item( Ent_Static target = null, Obj_Item what = null ) {
			return;
		}

		// Function from file: say.dm
		public void addSpeechBubble( dynamic speech_bubble = null ) {
			
			if ( this.client != null ) {
				this.client.images.Add( speech_bubble );
				Task13.Schedule( 30, (Task13.Closure)(() => {
					
					if ( this.client != null ) {
						this.client.images.Remove( speech_bubble );
					}
					return;
				}));
			}
			return;
		}

		// Function from file: living.dm
		public virtual ByTable get_contents( Obj_Item Storage = null ) {
			return null;
		}

		// Function from file: living.dm
		public virtual int CheckSlip(  ) {
			return 0;
		}

		// Function from file: observer.dm
		public Mob_Dead_Observer ghostize( bool? flags = null ) {
			flags = flags ?? true;

			Mob_Dead_Observer ghost = null;

			
			if ( Lang13.Bool( this.key ) && !( String13.SubStr( this.key, 1, 2 ) == "@" ) ) {
				ghost = new Mob_Dead_Observer( this, flags );
				ghost.timeofdeath = this.timeofdeath;
				ghost.key = this.key;

				if ( ghost.client != null && !( ghost.client.holder != null ) && !GlobalVars.config.antag_hud_allowed ) {
					ghost.verbs.Remove( typeof(Mob_Dead_Observer).GetMethod( "toggle_antagHUD" ) );
				}
				return ghost;
			}
			return null;
		}

		// Function from file: camera.dm
		public virtual void update_transform(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_targeted( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_ears( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_pockets( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_s_store( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_glasses( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_shoes( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_wear_id( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_mutations( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_gloves( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_head( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_belt( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_w_uniform( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_wear_suit( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_wear_mask( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_r_hand( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_l_hand( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_back( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_legcuffed( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_inv_handcuffed( bool? update_icons = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_hud(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual dynamic update_icons(  ) {
			return null;
		}

		// Function from file: update_icons.dm
		public virtual void regenerate_icons(  ) {
			return;
		}

		// Function from file: transform_procs.dm
		public bool safe_animal( dynamic MP = null ) {
			
			if ( !Lang13.Bool( MP ) ) {
				return false;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_SpaceWorm) ) ) ) {
				return false;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Construct_Behemoth) ) ) ) {
				return false;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Construct_Armoured) ) ) ) {
				return false;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Construct_Wraith) ) ) ) {
				return false;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Construct_Builder) ) ) ) {
				return false;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Cat) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Corgi) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Crab) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Hostile_Carp) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Hostile_Mushroom) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Shade) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Tomato) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Mouse) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Hostile_Bear) ) ) ) {
				return true;
			}

			if ( Lang13.Bool( MP.IsSubclassOf( typeof(Mob_Living_SimpleAnimal_Parrot) ) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: transform_procs.dm
		public virtual dynamic Animalize(  ) {
			dynamic mobtypes = null;
			dynamic mobpath = null;
			dynamic new_mob = null;

			mobtypes = Lang13.GetTypes( typeof(Mob_Living_SimpleAnimal) );
			mobpath = Interface13.Input( "Which type of mob should " + this + " turn into?", "Choose a type", null, null, mobtypes, InputType.Any );

			if ( !this.safe_animal( mobpath ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Sorry but this mob type is currently unavailable.</span>" );
				return null;
			}
			new_mob = Lang13.Call( mobpath, GlobalFuncs.get_turf( this ) );
			new_mob.key = this.key;
			new_mob.a_intent = "hurt";
			GlobalFuncs.to_chat( new_mob, "You feel more... animalistic" );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return new_mob;
		}

		// Function from file: transform_procs.dm
		public virtual Mob_Living_Silicon_Ai AIize(  ) {
			Mob_Living_Silicon_Ai _default = null;

			Mob_Living_Silicon_Ai O = null;
			Obj_Effect_Landmark loc_landmark = null;
			Obj_Effect_Landmark_Start sloc = null;
			Obj_Effect_Landmark tripai = null;
			Obj_Effect_Landmark_Start sloc2 = null;
			Obj_Item_Device_Radio_Intercom comm = null;

			
			if ( this.client != null ) {
				GlobalFuncs.to_chat( this, new Sound( null, false, false, 1, 85 ) );
			}
			O = new Mob_Living_Silicon_Ai( GlobalFuncs.get_turf( this ), GlobalVars.base_law_type, null, true );
			O.invisibility = 0;
			O.aiRestorePowerRoutine = 0;

			if ( this.mind != null ) {
				this.mind.transfer_to( O );
				O.mind.original = O;
			} else {
				O.key = this.key;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark_Start) )) {
				sloc = _a;
				

				if ( sloc.name != "AI" ) {
					continue;
				}

				if ( Lang13.Bool( Lang13.FindIn( typeof(Mob_Living), sloc.loc ) ) ) {
					continue;
				}
				loc_landmark = sloc;
			}

			if ( !( loc_landmark != null ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark) )) {
					tripai = _b;
					

					if ( tripai.name == "tripai" ) {
						
						if ( Lang13.Bool( Lang13.FindIn( typeof(Mob_Living), tripai.loc ) ) ) {
							continue;
						}
						loc_landmark = tripai;
					}
				}
			}

			if ( !( loc_landmark != null ) ) {
				GlobalFuncs.to_chat( O, "Oh god sorry we can't find an unoccupied AI spawn location, so we're spawning you on top of someone." );

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.landmarks_list, typeof(Obj_Effect_Landmark_Start) )) {
					sloc2 = _c;
					

					if ( sloc2.name == "AI" ) {
						loc_landmark = sloc2;
					}
				}
			}
			O.loc = loc_landmark.loc;

			foreach (dynamic _d in Lang13.Enumerate( O.loc, typeof(Obj_Item_Device_Radio_Intercom) )) {
				comm = _d;
				
				comm.ai.Add( O );
			}
			GlobalFuncs.to_chat( O, "<B>You are playing the station's AI. The AI cannot move, but can interact with many objects while viewing them (through cameras).</B>" );
			GlobalFuncs.to_chat( O, "<B>To look at other parts of the station, click on yourself to get a camera menu.</B>" );
			GlobalFuncs.to_chat( O, "<B>While observing through a camera, you can use most (networked) devices which you can see, such as computers, APCs, intercoms, doors, etc.</B>" );
			GlobalFuncs.to_chat( O, "To use something, simply click on it." );
			GlobalFuncs.to_chat( O, "Use say \":b to speak to your cyborgs through binary." );

			if ( !( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode.malf_ai.Contains( O.mind ) ) ) {
				O.show_laws();
				GlobalFuncs.to_chat( O, "<b>These laws may be changed by other players, or by you being the traitor.</b>" );
			}
			O.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "show_laws_verb" ) );
			O.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "ai_statuschange" ) );
			O.job = "AI";
			O.rename_self( "ai", true );
			_default = O;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: spells.dm
		public void silence_spells( int? amount = null ) {
			amount = amount ?? 0;

			Obj_Screen_Movable_SpellMaster spell_master = null;

			
			if ( !( ( amount ??0) >= 0 ) ) {
				return;
			}

			if ( !( this.spell_masters != null ) || !( this.spell_masters.len != 0 ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
				spell_master = _a;
				
				spell_master.silence_spells( amount );
			}
			return;
		}

		// Function from file: spells.dm
		public bool remove_spell( Spell spell_to_remove = null ) {
			Obj_Screen_Movable_SpellMaster spell_master = null;

			
			if ( !( spell_to_remove != null ) || !( spell_to_remove is Spell ) ) {
				return false;
			}

			if ( !this.spell_list.Contains( spell_to_remove ) ) {
				return false;
			}

			if ( !( this.spell_masters != null ) || !( this.spell_masters.len != 0 ) ) {
				return false;
			}

			if ( this.mind != null && this.mind.wizard_spells != null ) {
				this.mind.wizard_spells.Remove( spell_to_remove );
			}
			this.spell_list.Remove( spell_to_remove );

			foreach (dynamic _a in Lang13.Enumerate( this.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
				spell_master = _a;
				
				spell_master.remove_spell( spell_to_remove );
			}
			return true;
		}

		// Function from file: spells.dm
		public bool add_spell( dynamic spell_to_add = null, string spell_base = null, Type master_type = null ) {
			spell_base = spell_base ?? "wiz_spell_ready";
			master_type = master_type ?? typeof(Obj_Screen_Movable_SpellMaster);

			Obj_Screen_Movable_SpellMaster spell_master = null;
			Game_Data new_spell_master = null;

			
			if ( !( this.spell_masters != null ) ) {
				this.spell_masters = new ByTable();
			}

			if ( this.spell_masters.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
					spell_master = _a;
					

					if ( spell_master.type == master_type ) {
						this.spell_list.Add( spell_to_add );
						spell_master.add_spell( spell_to_add );
						return true;
					}
				}
			}
			new_spell_master = GlobalFuncs.getFromPool( master_type );

			if ( this.client != null ) {
				this.client.screen.Add( new_spell_master );
			}
			((dynamic)new_spell_master).spell_holder = this;
			((Obj_Screen_Movable_SpellMaster)new_spell_master).add_spell( spell_to_add );

			if ( Lang13.Bool( spell_base ) ) {
				((dynamic)new_spell_master).icon_state = spell_base;
			}
			this.spell_masters.Add( new_spell_master );
			this.spell_list.Add( spell_to_add );
			return true;
		}

		// Function from file: say.dm
		public string parse_language( string message = null ) {
			string language_prefix = null;
			dynamic L = null;

			
			if ( Lang13.Length( message ) >= 2 ) {
				language_prefix = String13.ToLower( String13.SubStr( message, 1, 3 ) );

				if ( GlobalVars.language_keys.Contains( language_prefix ) ) {
					L = GlobalVars.language_keys[language_prefix];

					if ( this.can_speak_lang( L ) ) {
						return L;
					} else if ( L is Language ) {
						return language_prefix;
					}
				}
			}
			return null;
		}

		// Function from file: say.dm
		public virtual bool binarycheck(  ) {
			return false;
		}

		// Function from file: say.dm
		public virtual bool hivecheck(  ) {
			return false;
		}

		// Function from file: say.dm
		public virtual bool construct_chat_check( int? setting = null ) {
			return false;
		}

		// Function from file: say.dm
		public virtual bool lingcheck(  ) {
			return false;
		}

		// Function from file: say.dm
		public dynamic get_ear(  ) {
			return GlobalFuncs.get_turf( this );
		}

		// Function from file: say.dm
		public virtual void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			
			if ( this.timestopped ) {
				return;
			}

			if ( act == "me" ) {
				this.custom_emote( type, message ); return;
			}
			return;
		}

		// Function from file: say.dm
		public void say_dead( dynamic message = null ) {
			dynamic name = null;
			string alt_name = null;
			string rendered2 = null;
			dynamic M = null;

			name = this.real_name;
			alt_name = "";

			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( this.client != null && !Lang13.Bool( this.client.prefs.toggles & 32 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>You have deadchat muted.</span>" );
				return;
			}

			if ( this.mind != null && Lang13.Bool( this.mind.name ) ) {
				name = "" + this.mind.name;
			} else {
				name = this.real_name;
			}

			if ( name != this.real_name ) {
				alt_name = " (died as " + this.real_name + ")";
			}
			message = this.say_quote( "\"" + String13.HtmlEncode( message ) + "\"" );
			rendered2 = null;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				
				rendered2 = new Txt( "<span class='game deadsay'><a href='byond://?src=" ).Ref( M ).str( ";follow2=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( "'>(Follow)</a><span class='prefix'> DEAD:</span> <span class='name'>" ).item( name ).str( "</span>" ).item( alt_name ).str( " <span class='message'>" ).item( message ).str( "</span></span>" ).ToString();

				if ( M is Mob_NewPlayer || !Lang13.Bool( M.client ) ) {
					continue;
				}

				if ( Lang13.Bool( M.client ) && Lang13.Bool( M.client.holder ) && Lang13.Bool( M.client.holder.rights & 2 ) && Lang13.Bool( M.client.prefs.toggles & 32 ) ) {
					GlobalFuncs.to_chat( M, rendered2 );
				} else if ( Lang13.Bool( M.client ) && Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client.prefs.toggles & 32 ) ) {
					GlobalFuncs.to_chat( M, rendered2 );
				}
			}
			return;
		}

		// Function from file: mob_transformation_simple.dm
		public dynamic change_mob_type( dynamic new_type = null, dynamic location = null, dynamic new_name = null, bool? delete_old_mob = null ) {
			delete_old_mob = delete_old_mob ?? false;

			dynamic M = null;

			
			if ( this is Mob_NewPlayer ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>cannot convert players who have not entered yet.</span>" );
				return null;
			}

			if ( !Lang13.Bool( new_type ) ) {
				new_type = Interface13.Input( "Mob type path:", "Mob type", null, null, null, InputType.Str | InputType.Null );
			}

			if ( new_type is string ) {
				new_type = Lang13.FindClass( new_type );
			}

			if ( !( new_type is Type ) ) {
				GlobalFuncs.to_chat( Task13.User, "Invalid type path (new_type = " + new_type + ") in change_mob_type(). Contact a coder." );
				return null;
			}

			if ( new_type == typeof(Mob_NewPlayer) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>cannot convert into a new_player mob type.</span>" );
				return null;
			}

			if ( location is Tile ) {
				M = Lang13.Call( new_type, location );
			} else {
				M = Lang13.Call( new_type, this.loc );
			}

			if ( !Lang13.Bool( M ) || !( M is Mob ) ) {
				GlobalFuncs.to_chat( Task13.User, "Type path is not a mob (new_type = " + new_type + ") in change_mob_type(). Contact a coder." );
				GlobalFuncs.qdel( M );
				M = null;
				return null;
			}

			if ( new_name is string ) {
				M.name = new_name;
				M.real_name = new_name;
			} else {
				M.name = this.name;
				M.real_name = this.real_name;
			}

			if ( this.dna != null ) {
				M.dna = this.dna.Clone();
			}

			if ( this.mind != null ) {
				this.mind.transfer_to( M );
			} else {
				M.key = this.key;
			}

			if ( delete_old_mob == true ) {
				Task13.Schedule( 1, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this );
					return;
				}));
			}
			return M;
		}

		// Function from file: mob_movement.dm
		public void Move_Pulled( Ent_Static A = null ) {
			Ent_Static M = null;
			Mob t = null;

			
			if ( !this.canmove || this.restrained() || !( this.pulling != null ) ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)this.pulling).anchored ) ) {
				return;
			}

			if ( !this.pulling.Adjacent( this ) ) {
				return;
			}

			if ( !( this.pulling.loc is Tile ) ) {
				return;
			}

			if ( A == this.loc && this.pulling.density ) {
				return;
			}

			if ( !( this.Process_Spacemove( null, true ) != 0 ) ) {
				return;
			}

			if ( this.pulling is Mob ) {
				M = this.pulling;
				t = ((dynamic)M).pulling;
				((Mob)M).stop_pulling();
				Map13.Step( (Ent_Dynamic)(this.pulling), Map13.GetDistance( this.pulling.loc, A ) );

				if ( M != null ) {
					((dynamic)M).start_pulling( t );
				}
			} else {
				Map13.Step( (Ent_Dynamic)(this.pulling), Map13.GetDistance( this.pulling.loc, A ) );
			}
			return;
		}

		// Function from file: mob_movement.dm
		public virtual double? Process_Spaceslipping( double? prob_slip = null ) {
			prob_slip = prob_slip ?? 5;

			
			if ( Lang13.Bool( this.stat ) ) {
				prob_slip = 0;
			}
			prob_slip = Num13.Floor( prob_slip ??0 );
			return prob_slip;
		}

		// Function from file: mob_movement.dm
		public virtual int Process_Spacemove( bool? check_drift = null, bool? ignore_slip = null ) {
			check_drift = check_drift ?? false;
			ignore_slip = ignore_slip ?? false;

			int dense_object = 0;
			dynamic turf = null;
			Mob H = null;
			Obj O = null;

			
			if ( this.restrained() ) {
				return 0;
			}
			dense_object = 0;

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 1 ) )) {
				turf = _a;
				

				if ( turf is Tile_Space ) {
					continue;
				}
				H = this;

				if ( turf is Tile_Simulated_Floor && Lang13.Bool( this.areaMaster ) && this.areaMaster.has_gravity == false && !( H is Mob_Living_Carbon_Human && ((dynamic)H).shoes is Obj_Item_Clothing_Shoes_Magboots && Lang13.Bool( ((dynamic)H).shoes.flags & 1024 ) ) ) {
					continue;
				}
				dense_object++;
				break;
			}

			if ( !( dense_object != 0 ) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Lattice), Map13.FetchInViewExcludeThis( this, 1 ) ) ) ) {
				dense_object++;
			}

			if ( !( dense_object != 0 ) && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Catwalk), Map13.FetchInViewExcludeThis( this, 1 ) ) ) ) {
				dense_object++;
			}

			if ( !( dense_object != 0 ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInViewExcludeThis( this, 1 ), typeof(Obj) )) {
					O = _b;
					

					if ( O != null && O.density && Lang13.Bool( O.anchored ) ) {
						dense_object++;
						break;
					}
				}
			}

			if ( !( dense_object != 0 ) ) {
				return 0;
			}

			if ( !( ignore_slip == true ) && Rand13.PercentChance( ((int)( this.Process_Spaceslipping( 5 ) ??0 )) ) ) {
				GlobalFuncs.to_chat( this, "<span class='notice'><B>You slipped!</B></span>" );
				this.inertia_dir = this.last_move;
				Map13.Step( this, this.inertia_dir ??0 );
				return 0;
			}
			this.inertia_dir = 0;
			return 1;
		}

		// Function from file: mob_helpers.dm
		public virtual bool abiotic( bool? full_body = null ) {
			full_body = full_body ?? false;

			
			if ( full_body == true && ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.v_abstract ) || Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.v_abstract ) || Lang13.Bool( this.back ) || Lang13.Bool( this.wear_mask ) ) ) {
				return true;
			}

			if ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.v_abstract ) || Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.v_abstract ) ) {
				return true;
			}
			return false;
		}

		// Function from file: mob_helpers.dm
		public bool incapacitated(  ) {
			
			if ( this.isStunned() || this.restrained() ) {
				return true;
			}
			return false;
		}

		// Function from file: mob_helpers.dm
		public bool isStunned(  ) {
			
			if ( this.isUnconscious() || this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: mob_helpers.dm
		public bool isDead(  ) {
			
			if ( this.stat == 2 || ( this.status_flags & 8192 ) != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: mob_helpers.dm
		public bool isUnconscious(  ) {
			
			if ( Lang13.Bool( this.stat ) || ( this.status_flags & 8192 ) != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: mob_cleanup.dm
		public void contract_disease( dynamic virus = null, bool? skip_this = null, bool? force_species_check = null, int? spread_type = null ) {
			skip_this = skip_this ?? false;
			force_species_check = force_species_check ?? true;
			spread_type = spread_type ?? -5;

			dynamic A = null;
			bool fail = false;
			dynamic name = null;
			Type mob_type = null;
			dynamic v = null;
			dynamic Cl = null;
			bool passed = false;
			int? head_ch = null;
			int? body_ch = null;
			int? hands_ch = null;
			int? feet_ch = null;
			dynamic target_zone = null;
			Mob H = null;
			Mob M = null;
			dynamic v2 = null;

			
			if ( ( this.stat ??0) >= 2 ) {
				return;
			}

			if ( virus is Disease_Advance ) {
				A = virus;

				if ( this.resistances.Contains( ((Disease_Advance)A).GetDiseaseID() ) ) {
					return;
				}

				if ( GlobalFuncs.count_by_type( this.viruses, typeof(Disease_Advance) ) >= 3 ) {
					return;
				}
			} else if ( this.resistances.Find( virus.type ) != 0 ) {
				return;
			}

			if ( this.has_disease( virus ) ) {
				return;
			}

			if ( force_species_check == true ) {
				fail = true;

				foreach (dynamic _a in Lang13.Enumerate( virus.affected_species )) {
					name = _a;
					
					mob_type = Lang13.FindClass( "/mob/living/carbon/" + String13.ToLower( name ) );

					if ( mob_type != null && Lang13.Bool( ((dynamic)mob_type).IsInstanceOfType( this ) ) ) {
						fail = false;
						break;
					}
				}

				if ( fail ) {
					return;
				}
			}

			if ( skip_this == true ) {
				v = Lang13.Call( virus.type, 1, virus, 0 );
				this.viruses.Add( v );
				v.affected_mob = this;
				v.strain_data = v.strain_data.Copy();
				v.holder = this;

				if ( v.can_carry && Rand13.PercentChance( 5 ) ) {
					v.carrier = true;
				}
				return;
			}

			if ( Rand13.PercentChance( ((int)( 15 / virus.permeability_mod )) ) ) {
				return;
			}
			Cl = null;
			passed = true;
			head_ch = null;
			body_ch = null;
			hands_ch = null;
			feet_ch = null;

			if ( spread_type == -5 ) {
				spread_type = virus.spread_type;
			}

			switch ((int?)( spread_type )) {
				case 3:
					head_ch = 0;
					body_ch = 0;
					hands_ch = 100;
					feet_ch = 0;
					break;
				case 2:
					head_ch = 0;
					body_ch = 0;
					hands_ch = 0;
					feet_ch = 100;
					break;
				default:
					head_ch = 100;
					body_ch = 100;
					hands_ch = 25;
					feet_ch = 25;
					break;
			}
			target_zone = Rand13.PickWeightedDynamic(new object [] { head_ch, 1, body_ch, 2, hands_ch, 3, }, 4 );

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				dynamic _c = target_zone; // Was a switch-case, sorry for the mess.
				if ( _c==1 ) {
					
					if ( ((dynamic)H).head is Obj && !( ((dynamic)H).head is Obj_Item_Weapon_Paper ) ) {
						Cl = ((dynamic)H).head;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}

					if ( passed && H.wear_mask is Obj ) {
						Cl = H.wear_mask;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				} else if ( _c==2 ) {
					
					if ( ((dynamic)H).wear_suit is Obj ) {
						Cl = ((dynamic)H).wear_suit;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}

					if ( passed && 14 is Obj ) {
						Cl = 14;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				} else if ( _c==3 ) {
					
					if ( ((dynamic)H).wear_suit is Obj && Lang13.Bool( ((dynamic)H).wear_suit.body_parts_covered & 512 | 1024 ) ) {
						Cl = ((dynamic)H).wear_suit;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}

					if ( passed && ((dynamic)H).gloves is Obj ) {
						Cl = ((dynamic)H).gloves;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				} else if ( _c==4 ) {
					
					if ( ((dynamic)H).wear_suit is Obj && Lang13.Bool( ((dynamic)H).wear_suit.body_parts_covered & 32 | 64 ) ) {
						Cl = ((dynamic)H).wear_suit;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}

					if ( passed && ((dynamic)H).shoes is Obj ) {
						Cl = ((dynamic)H).shoes;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				} else {
					GlobalFuncs.to_chat( this, "Something strange's going on, something's wrong." );
				}
			} else if ( this is Mob_Living_Carbon_Monkey ) {
				M = this;

				dynamic _d = target_zone; // Was a switch-case, sorry for the mess.
				if ( _d==1 ) {
					
					if ( Lang13.Bool( M.wear_mask ) && M.wear_mask is Obj ) {
						Cl = M.wear_mask;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				}
			}

			if ( !passed && spread_type == 5 && !( this.internals != null ) ) {
				passed = Rand13.PercentChance( ((int)( virus.permeability_mod * 50 - 1 )) );
			}

			if ( passed ) {
				v2 = Lang13.Call( virus.type, 1, virus, 0 );
				this.viruses.Add( v2 );
				v2.affected_mob = this;
				v2.strain_data = v2.strain_data.Copy();
				v2.holder = this;

				if ( v2.can_carry && Rand13.PercentChance( 5 ) ) {
					v2.carrier = true;
				}
				return;
			}
			return;
		}

		// Function from file: mob_cleanup.dm
		public bool has_disease( dynamic virus = null ) {
			Disease D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _a;
				

				if ( D.IsSame( virus ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual void nuke_act(  ) {
			return;
		}

		// Function from file: mob.dm
		public virtual void teleport_to( dynamic A = null ) {
			this.forceMove( GlobalFuncs.get_turf( A ) );
			return;
		}

		// Function from file: mob.dm
		public void handle_alpha(  ) {
			int lowest_alpha = 0;
			dynamic alpha_modification = null;

			
			if ( this.alphas.len < 1 ) {
				this.alpha = 255;
			} else {
				lowest_alpha = 255;

				foreach (dynamic _a in Lang13.Enumerate( this.alphas )) {
					alpha_modification = _a;
					
					lowest_alpha = Num13.MinInt( lowest_alpha, Convert.ToInt32( this.alphas[alpha_modification] ) );
				}
				this.alpha = lowest_alpha;
			}
			return;
		}

		// Function from file: mob.dm
		public void get_subtle_message( dynamic msg = null ) {
			dynamic pre_msg = null;
			dynamic adjective = null;
			dynamic location = null;

			pre_msg = "You hear a voice in your head...";

			if ( this.mind != null && this.mind.assigned_role == "Chaplain" ) {
				pre_msg = "You hear the voice of " + GlobalVars.ticker.Bible_deity_name + " in your head... ";
			}

			if ( this.hallucinating() ) {
				adjective = Rand13.Pick(new object [] { "an angry", "a funny", "a squeaky", "a disappointed", "your mother's", "your father's", "" + GlobalVars.ticker.Bible_deity_name + "'s", "an annoyed", "a brittle", "a loud", "a very loud", "a quiet" });
				location = Rand13.Pick(new object [] { " from above", " from below", " in your head", "" });
				pre_msg = Rand13.PickFromTable( "You hear " + adjective + " voice" + location + "..." );
			}
			GlobalFuncs.to_chat( this, "<b>" + pre_msg + " <em>" + msg + "</em></b>" );
			return;
		}

		// Function from file: mob.dm
		public bool hallucinating(  ) {
			Mob M = null;

			
			if ( this is Mob_Living ) {
				M = this;

				if ( Convert.ToDouble( ((dynamic)M).hallucination ) >= 100 ) {
					return true;
				}

				if ( M.druggy >= 5 ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mob.dm
		public bool is_deaf(  ) {
			
			if ( ( this.sdisabilities & 4 ) != 0 || this.ear_deaf != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: mob.dm
		public bool is_blind(  ) {
			
			if ( ( this.sdisabilities & 1 ) != 0 || Lang13.Bool( this.blinded ) || this.paralysis != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual bool html_mob_check( Type typepath = null ) {
			return false;
		}

		// Function from file: mob.dm
		public virtual bool isTeleViewing( dynamic client_eye = null ) {
			
			if ( client_eye is Obj_Machinery_Camera ) {
				return true;
			}

			if ( client_eye is Obj_Item_Projectile_Nikita ) {
				return true;
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual dynamic dexterity_check(  ) {
			return 0;
		}

		// Function from file: mob.dm
		public bool on_foot(  ) {
			return !( this.lying == true || this.flying || Lang13.Bool( this.locked_to ) );
		}

		// Function from file: mob.dm
		public virtual int assess_threat( Obj_Machinery_Bot judgebot = null, string lasercolor = null ) {
			return 0;
		}

		// Function from file: mob.dm
		public virtual bool hasFullAccess(  ) {
			return false;
		}

		// Function from file: mob.dm
		public virtual ByTable GetAccess(  ) {
			return new ByTable();
		}

		// Function from file: mob.dm
		[VerbInfo( name: "Yank out object", desc: "Remove an embedded item at the cost of bleeding and pain.", group: "Object", access: VerbAccess.InView, range: 1 )]
		public virtual bool yank_out_object(  ) {
			Mob S = null;
			Mob U = null;
			ByTable valid_objects = null;
			bool? self = null;
			Obj_Item_Weapon W = null;
			dynamic selection = null;
			Obj_Item_Weapon O = null;

			
			if ( !( Task13.User is Mob_Living ) || Task13.User.client != null && Task13.User.client.move_delayer.blocked() ) {
				return false;
			}
			this.delayNextMove( 20 );
			this.delayNextAttack( 20 );

			if ( Task13.User.stat == 1 ) {
				GlobalFuncs.to_chat( Task13.User, "You are unconcious and cannot do that!" );
				return false;
			}

			if ( Task13.User.restrained() ) {
				GlobalFuncs.to_chat( Task13.User, "You are restrained and cannot do that!" );
				return false;
			}
			S = this;
			U = Task13.User;
			valid_objects = new ByTable();
			self = null;

			if ( S == U ) {
				self = true;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.embedded, typeof(Obj_Item_Weapon) )) {
				W = _a;
				

				if ( Convert.ToDouble( W.w_class ) >= 2 ) {
					valid_objects.Add( W );
				}
			}

			if ( !( valid_objects.len != 0 ) ) {
				
				if ( self == true ) {
					GlobalFuncs.to_chat( this, "You have nothing stuck in your body that is large enough to remove." );
				} else {
					GlobalFuncs.to_chat( U, "" + this + " has nothing stuck in their wounds that is large enough to remove." );
				}
				return false;
			}
			selection = Interface13.Input( "What do you want to yank out?", "Embedded objects", null, null, valid_objects, InputType.Any );

			if ( self == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You attempt to get a good grip on the " + selection + " in your body.</span></span>" );
			} else {
				GlobalFuncs.to_chat( U, "<span class='warning'>You attempt to get a good grip on the " + selection + " in " + S + "'s body.</span>" );
			}

			if ( !GlobalFuncs.do_after( U, this, 80 ) ) {
				return false;
			}

			if ( !Lang13.Bool( selection ) || !( S != null ) || !( U != null ) ) {
				return false;
			}

			if ( self == true ) {
				this.visible_message( "<span class='danger'><b>" + this + " rips " + selection + " out of their body.</b></span>", "<span class='warning'>You rip " + selection + " out of your body.</span>" );
			} else {
				this.visible_message( "<span class='danger'><b>" + Task13.User + " rips " + selection + " out of " + this + "'s body.</b></span>", "<span class='warning'>" + Task13.User + " rips " + selection + " out of your body.</span>" );
			}
			selection.loc = GlobalFuncs.get_turf( this );

			foreach (dynamic _b in Lang13.Enumerate( this.pinned, typeof(Obj_Item_Weapon) )) {
				O = _b;
				

				if ( O == selection ) {
					this.pinned.Remove( O );
				}

				if ( !( this.pinned.len != 0 ) ) {
					this.anchored = 0;
				}
			}
			return true;
		}

		// Function from file: mob.dm
		public void flash_weak_pain(  ) {
			Icon13.Flick( "weak_pain", this.pain );
			return;
		}

		// Function from file: mob.dm
		public virtual string get_species(  ) {
			return "";
		}

		// Function from file: mob.dm
		public void AdjustResting( dynamic amount = null ) {
			this.resting = Num13.MaxInt( ((int)( this.resting + Convert.ToDouble( amount ) )), 0 );
			return;
		}

		// Function from file: mob.dm
		public void SetResting( dynamic amount = null ) {
			this.resting = Num13.MaxInt( Convert.ToInt32( amount ), 0 );
			return;
		}

		// Function from file: mob.dm
		public void Resting( dynamic amount = null ) {
			this.resting = Num13.MaxInt( Num13.MaxInt( this.resting, Convert.ToInt32( amount ) ), 0 );
			return;
		}

		// Function from file: mob.dm
		public void AdjustSleeping( dynamic amount = null ) {
			this.sleeping = Num13.MaxInt( ((int)( this.sleeping + Convert.ToDouble( amount ) )), 0 );
			return;
		}

		// Function from file: mob.dm
		public void SetSleeping( dynamic amount = null ) {
			this.sleeping = Num13.MaxInt( Convert.ToInt32( amount ), 0 );
			return;
		}

		// Function from file: mob.dm
		public void Sleeping( int amount = 0 ) {
			this.sleeping = Num13.MaxInt( Num13.MaxInt( this.sleeping, amount ), 0 );
			return;
		}

		// Function from file: mob.dm
		public void AdjustParalysis( int amount = 0 ) {
			
			if ( ( this.status_flags & 4 ) != 0 ) {
				this.paralysis = Num13.MaxInt( this.paralysis + amount, 0 );
			}
			return;
		}

		// Function from file: mob.dm
		public void SetParalysis( int amount = 0 ) {
			
			if ( ( this.status_flags & 4 ) != 0 ) {
				this.paralysis = Num13.MaxInt( amount, 0 );
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void Paralyse( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4 ) != 0 ) {
				this.paralysis = Num13.MaxInt( Num13.MaxInt( this.paralysis, Convert.ToInt32( amount ) ), 0 );
			}
			return;
		}

		// Function from file: mob.dm
		public void Dizzy( double amount = 0 ) {
			this.dizziness = Num13.MaxInt( this.dizziness, ((int)( amount )), 0 );
			return;
		}

		// Function from file: mob.dm
		public void Jitter( int amount = 0 ) {
			this.jitteriness = Num13.MaxInt( this.jitteriness, amount, 0 );
			return;
		}

		// Function from file: mob.dm
		public void AdjustWeakened( int amount = 0 ) {
			
			if ( ( this.status_flags & 2 ) != 0 ) {
				this.weakened = Num13.MaxInt( ((int)( this.weakened + amount )), 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public void SetWeakened( dynamic amount = null ) {
			
			if ( ( this.status_flags & 2 ) != 0 ) {
				this.weakened = Num13.MaxInt( Convert.ToInt32( amount ), 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void Weaken( dynamic amount = null ) {
			
			if ( ( this.status_flags & 2 ) != 0 ) {
				this.weakened = Num13.MaxInt( Num13.MaxInt( ((int)( this.weakened )), Convert.ToInt32( amount ) ), 0 );
				this.update_canmove();
			}
			return;
		}

		// Function from file: mob.dm
		public void AdjustStunned( int amount = 0 ) {
			
			if ( ( this.status_flags & 1 ) != 0 ) {
				this.stunned = Num13.MaxInt( ((int)( this.stunned + amount )), 0 );
			}
			return;
		}

		// Function from file: mob.dm
		public void SetStunned( bool amount = false ) {
			
			if ( ( this.status_flags & 1 ) != 0 ) {
				this.stunned = Num13.MaxInt( amount ?1:0, 0 );
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void Stun( dynamic amount = null ) {
			
			if ( ( this.status_flags & 1 ) != 0 ) {
				this.stunned = Num13.MaxInt( Num13.MaxInt( ((int)( this.stunned )), Convert.ToInt32( amount ) ), 0 );
			}
			return;
		}

		// Function from file: mob.dm
		public virtual dynamic IsAdvancedToolUser(  ) {
			return 0;
		}

		// Function from file: mob.dm
		public dynamic Facing(  ) {
			dynamic _default = null;

			dynamic listener = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.callOnFace )) {
				_default = _a;
				
				listener = Lang13.FindObj( _default );

				if ( Lang13.Bool( listener ) ) {
					Lang13.Call( Lang13.BindFunc( listener, this.callOnFace[_default] ), this );
				} else {
					this.callOnFace.Remove( _default );
				}
			}
			return _default;
		}

		// Function from file: mob.dm
		public virtual bool update_canmove(  ) {
			
			if ( Lang13.Bool( this.locked_to ) ) {
				this.canmove = false;
				this.lying = ( ( this.locked_to.lockflags & 1 ) != 0 ? GlobalVars.TRUE : GlobalVars.FALSE );
			} else if ( this.isUnconscious() || this.weakened != 0 || this.paralysis != 0 || this.resting != 0 ) {
				this.stop_pulling();
				this.lying = true;
				this.canmove = false;
			} else if ( this.stunned != 0 ) {
				this.canmove = false;
			} else if ( this.captured ) {
				this.anchored = 1;
				this.canmove = false;
				this.lying = false;
			} else {
				this.lying = !this.can_stand;
				this.canmove = this.has_limbs;
			}

			if ( this.lying == true ) {
				
				if ( this is Mob_Living_Carbon_Human ) {
					this.layer = 3.9;
				}
				this.density = false;
				this.drop_hands();
			} else {
				
				if ( this is Mob_Living_Carbon_Human ) {
					this.layer = 4;
				}
				this.density = true;
			}

			if ( this.v_update_icon ) {
				this.v_update_icon = false;
				this.regenerate_icons();
			} else if ( this.lying != this.lying_prev ) {
				this.update_icons();
			}
			return this.canmove;
		}

		// Function from file: mob.dm
		public bool canface(  ) {
			
			if ( !this.canmove ) {
				return false;
			}

			if ( Lang13.Bool( this.client.moving ) ) {
				return false;
			}

			if ( this.client.move_delayer.blocked() ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return false;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				return false;
			}

			if ( this.monkeyizing ) {
				return false;
			}

			if ( this.restrained() ) {
				return false;
			}
			return true;
		}

		// Function from file: mob.dm
		public void show_viewers( string message = null ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, null ) )) {
				M = _a;
				
				((Mob)M).see( message );
			}
			return;
		}

		// Function from file: mob.dm
		public bool see( string message = null ) {
			
			if ( !this.is_active() ) {
				return false;
			}
			GlobalFuncs.to_chat( this, message );
			return true;
		}

		// Function from file: mob.dm
		public virtual bool is_active(  ) {
			return 0 >= ( Task13.User.stat ??0);
		}

		// Function from file: mob.dm
		public virtual bool can_use_hands(  ) {
			return false;
		}

		// Function from file: mob.dm
		public bool pull_damage(  ) {
			Mob H = null;
			dynamic name = null;
			dynamic e = null;

			
			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				if ( Convert.ToDouble( ((dynamic)H).health - ((dynamic)H).halloss ) <= Convert.ToDouble( GlobalVars.config.health_threshold_softcrit ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( ((dynamic)H).organs_by_name )) {
						name = _a;
						
						e = ((dynamic)H).organs_by_name[name];

						if ( H.lying == true ) {
							
							if ( ( Lang13.Bool( e.status & 32 ) && !Lang13.Bool( e.status & 256 ) || Lang13.Bool( e.status & 8 ) ) && ((Mob_Living)H).getBruteLoss() + ((Mob_Living)H).getFireLoss() >= 100 ) {
								return true;
								break;
							}
						}
					}
				}
				return false;
			}
			return false;
		}

		// Function from file: mob.dm
		public void update_verbs_onmove(  ) {
			dynamic checkdir = null;
			Tile checkturf = null;
			Obj_Structure_Bed_Chair C = null;
			Obj_Structure_Bed_Chair C2 = null;

			
			if ( this.client != null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH, GlobalVars.EAST, GlobalVars.WEST, GlobalVars.NORTHEAST, GlobalVars.NORTHWEST, GlobalVars.SOUTHEAST, GlobalVars.SOUTHWEST }) )) {
					checkdir = _b;
					
					checkturf = Map13.GetStep( this, Convert.ToInt32( checkdir ) );

					foreach (dynamic _a in Lang13.Enumerate( checkturf, typeof(Obj_Structure_Bed_Chair) )) {
						C = _a;
						
						this.verbs.Or( typeof(Mob).GetMethod( "rotate_chair" ) );
						throw new Exception("Failed to remove goto!"); // FIXME, GOTO;
					}
				}

				foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Obj_Structure_Bed_Chair) )) {
					C2 = _c;
					
					this.verbs.Or( typeof(Mob).GetMethod( "rotate_chair" ) );
					throw new Exception("Failed to remove goto!"); // FIXME, GOTO;
				}
				this.verbs.Remove( typeof(Mob).GetMethod( "rotate_chair" ) );
			}
			return;
		}

		// Function from file: mob.dm
		public string print_flavor_text(  ) {
			string msg = null;

			
			if ( Lang13.Bool( this.flavor_text ) ) {
				msg = GlobalFuncs.replacetext( this.flavor_text, "\n", "<br />" );

				if ( Lang13.Length( msg ) <= 32 ) {
					return "<font color='#ffa000'><b>" + msg + "</b></font>";
				} else {
					return new Txt( "<font color='#ffa000'><b>" ).item( String13.SubStr( msg, 1, 32 ) ).str( "...<a href='?src=" ).Ref( this ).str( ";flavor_text=more'>More</a></b></font>" ).ToString();
				}
			}
			return null;
		}

		// Function from file: mob.dm
		public void warn_flavor_changed(  ) {
			
			if ( Lang13.Bool( this.flavor_text ) ) {
				GlobalFuncs.to_chat( this, "<h2 class='alert'>OOC Warning:</h2>" );
				GlobalFuncs.to_chat( this, new Txt( "<span class='alert'>Your flavor text is likely out of date! <a href='?src=" ).Ref( this ).str( ";flavor_text=change'>Change</a></span>" ).ToString() );
			}
			return;
		}

		// Function from file: mob.dm
		[VerbInfo( access: VerbAccess.InUserContents, range: 127 )]
		public void update_flavor_text(  ) {
			dynamic msg = null;

			
			if ( Task13.User != this ) {
				GlobalFuncs.to_chat( Task13.User, "No." );
			}
			msg = Interface13.Input( Task13.User, "Set the flavor text in your 'examine' verb. Can also be used for OOC notes about your character.", "Flavor Text", String13.HtmlDecode( this.flavor_text ), null, InputType.Null | InputType.StrMultiline );

			if ( msg != null ) {
				msg = String13.SubStr( msg, 1, 1024 );
				msg = String13.HtmlEncode( msg );
				this.flavor_text = msg;
			}
			return;
		}

		// Function from file: mob.dm
		public void store_memory( string msg = null, dynamic popup = null, bool? sane = null ) {
			sane = sane ?? true;

			msg = String13.SubStr( msg, 1, 1024 );

			if ( sane == true ) {
				msg = GlobalFuncs.sanitize( msg );
			}

			if ( Lang13.Length( this.memory ) == 0 ) {
				this.memory += msg;
			} else {
				this.memory += "<BR>" + msg;
			}

			if ( Lang13.Bool( popup ) ) {
				this.f_memory();
			}
			return;
		}

		// Function from file: mob.dm
		public virtual void start_pulling( Ent_Static AM = null ) {
			Ent_Static P = null;
			Ent_Static M = null;
			Ent_Static temp_P = null;
			Ent_Static M2 = null;

			
			if ( !( AM != null ) || !( this != null ) || this == AM || !( AM.loc is Tile ) ) {
				return;
			}
			P = AM;

			if ( AM is Mob ) {
				M = AM;

				if ( Lang13.Bool( ((dynamic)M).locked_to ) ) {
					P = ((dynamic)M).locked_to;
				}
			}

			if ( !Lang13.Bool( ((dynamic)P).anchored ) ) {
				P.add_fingerprint( this );

				if ( this.pulling != null ) {
					temp_P = this.pulling;
					this.stop_pulling();

					if ( P == temp_P ) {
						return;
					}
				}
				this.pulling = P;
				((dynamic)P).pulledby = this;

				if ( P is Mob ) {
					M2 = P;

					if ( !( this is Mob_Living_Carbon ) ) {
						((dynamic)M2).LAssailant = null;
					} else {
						((dynamic)M2).LAssailant = Task13.User;
					}
				}
			}
			return;
		}

		// Function from file: mob.dm
		public ByTable ret_grab( Obj_Effect_ListContainer_Mobl L = null, bool? flag = null ) {
			dynamic G = null;
			dynamic G2 = null;
			ByTable temp = null;

			
			if ( !( this.l_hand is Obj_Item_Weapon_Grab ) && !( this.r_hand is Obj_Item_Weapon_Grab ) ) {
				
				if ( !( L != null ) ) {
					return null;
				} else {
					return L.container;
				}
			} else {
				
				if ( !( L != null ) ) {
					L = new Obj_Effect_ListContainer_Mobl( null );
					L.container.Add( this );
					L.master = this;
				}

				if ( this.l_hand is Obj_Item_Weapon_Grab ) {
					G = this.l_hand;

					if ( !( L.container.Find( G.affecting ) != 0 ) ) {
						L.container.Add( G.affecting );

						if ( Lang13.Bool( G.affecting ) ) {
							((Mob)G.affecting).ret_grab( L, true );
						}
					}
				}

				if ( this.r_hand is Obj_Item_Weapon_Grab ) {
					G2 = this.r_hand;

					if ( !( L.container.Find( G2.affecting ) != 0 ) ) {
						L.container.Add( G2.affecting );

						if ( Lang13.Bool( G2.affecting ) ) {
							((Mob)G2.affecting).ret_grab( L, true );
						}
					}
				}

				if ( !( flag == true ) ) {
					
					if ( L.master == this ) {
						temp = new ByTable();
						temp.Add( L.container );
						L.loc = null;
						return temp;
					} else {
						return L.container;
					}
				}
			}
			return null;
		}

		// Function from file: mob.dm
		public virtual void show_inv( dynamic user = null ) {
			string dat = null;

			((Mob)user).set_machine( this );
			dat = new Txt( "\n	<B><HR><FONT size=3>" ).item( this.name ).str( "</FONT></B>\n	<BR><HR>\n	<BR><B>Head(Mask):</B> <A href='?src=" ).Ref( this ).str( ";item=mask'>" ).item( ( Lang13.Bool( this.wear_mask ) ? this.wear_mask : ((dynamic)( "Nothing" )) ) ).str( "</A>\n	<BR><B>Left Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=l_hand'>" ).item( ( Lang13.Bool( this.l_hand ) ? this.l_hand : ((dynamic)( "Nothing" )) ) ).str( "</A>\n	<BR><B>Right Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=r_hand'>" ).item( ( Lang13.Bool( this.r_hand ) ? this.r_hand : ((dynamic)( "Nothing" )) ) ).str( "</A>\n	<BR><B>Back:</B> <A href='?src=" ).Ref( this ).str( ";item=back'>" ).item( ( Lang13.Bool( this.back ) ? this.back : ((dynamic)( "Nothing" )) ) ).str( "</A> " ).item( ( this.wear_mask is Obj_Item_Clothing_Mask && this.back is Obj_Item_Weapon_Tank && !Lang13.Bool( this.v_internal ) ? new Txt( " <A href='?src=" ).Ref( this ).str( ";item=internal'>Set Internal</A>" ).ToString() : "" ) ).str( "\n	<BR>" ).item( ( Lang13.Bool( this.v_internal ) ? new Txt( "<A href='?src=" ).Ref( this ).str( ";item=internal'>Remove Internal</A>" ).ToString() : "" ) ).str( "\n	<BR><A href='?src=" ).Ref( this ).str( ";item=pockets'>Empty Pockets</A>\n	<BR><A href='?src=" ).Ref( user ).str( ";refresh=1'>Refresh</A>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).Ref( this ).str( "'>Close</A>\n	<BR>" ).ToString();
			Interface13.Browse( user, dat, "window=mob" + this.name + ";size=325x500" );
			GlobalFuncs.onclose( user, new Txt( "mob" ).Ref( this ).ToString() );
			return;
		}

		// Function from file: mob.dm
		public virtual void reset_view( dynamic A = null ) {
			
			if ( this.client != null ) {
				
				if ( A is Ent_Dynamic ) {
					this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
					this.client.eye = A;
				} else if ( this.loc is Tile ) {
					this.client.eye = this.client.mob;
					this.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
				} else {
					this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
					this.client.eye = this.loc;
				}
			}
			return;
		}

		// Function from file: mob.dm
		public bool check_for_open_slot( Obj_Item W = null ) {
			bool openslot = false;
			dynamic slot = null;

			
			if ( !( W is Obj_Item ) ) {
				return false;
			}
			openslot = false;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.slot_equipment_priority )) {
				slot = _a;
				

				if ( W.mob_check_equip( this, slot, true ) == 1 ) {
					openslot = true;
					break;
				}
			}
			return openslot;
		}

		// Function from file: mob.dm
		public bool equip_to_appropriate_slot( dynamic W = null ) {
			dynamic slot = null;

			
			if ( !( W is Obj_Item ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.slot_equipment_priority )) {
				slot = _a;
				

				if ( this.equip_to_slot_if_possible( W, slot, 0, true, true, true ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mob.dm
		public bool equip_to_slot_or_drop( dynamic W = null, int? slot = null ) {
			return this.equip_to_slot_if_possible( W, slot, 2, true, false );
		}

		// Function from file: mob.dm
		public bool equip_to_slot_or_del( dynamic W = null, int slot = 0 ) {
			return this.equip_to_slot_if_possible( W, slot, 1, true, false );
		}

		// Function from file: mob.dm
		public virtual bool equip_to_slot( dynamic W = null, dynamic slot = null, bool? redraw_mob = null ) {
			return false;
		}

		// Function from file: mob.dm
		public bool equip_to_slot_if_possible( dynamic W = null, dynamic slot = null, int? act_on_fail = null, bool? disable_warning = null, bool? redraw_mob = null, bool? automatic = null ) {
			act_on_fail = act_on_fail ?? 0;
			disable_warning = disable_warning ?? false;
			redraw_mob = redraw_mob ?? true;
			automatic = automatic ?? false;

			Mob H = null;
			bool in_the_hand = false;
			dynamic wearing = null;

			
			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				switch ((int)( ((Obj_Item)W).mob_can_equip( this, slot, disable_warning, automatic ) )) {
					case 0:
						
						switch ((int?)( act_on_fail )) {
							case 1:
								GlobalFuncs.qdel( W );
								W = null;
								break;
							case 2:
								W.loc = GlobalFuncs.get_turf( this );
								break;
							default:
								
								if ( !( disable_warning == true ) ) {
									GlobalFuncs.to_chat( this, "<span class='warning'>You are unable to equip that.</span>" );
								}
								break;
						}
						return false;
						break;
					case 1:
						this.equip_to_slot( W, slot, redraw_mob );
						break;
					case 2:
						in_the_hand = this.get_active_hand() == W || this.get_inactive_hand() == W;
						wearing = this.get_item_by_slot( slot );

						if ( Lang13.Bool( wearing ) ) {
							
							if ( !in_the_hand ) {
								
								switch ((int?)( act_on_fail )) {
									case 1:
										GlobalFuncs.qdel( W );
										break;
									case 2:
										W.loc = GlobalFuncs.get_turf( this );
										break;
								}
								return false;
							}

							if ( this.drop_item( W ) ) {
								
								if ( !this.put_in_active_hand( wearing ) ) {
									this.equip_to_slot( wearing, slot, redraw_mob );

									switch ((int?)( act_on_fail )) {
										case 1:
											GlobalFuncs.qdel( W );
											break;
										default:
											
											if ( !( disable_warning == true ) && act_on_fail != 2 ) {
												GlobalFuncs.to_chat( this, "<span class='warning'>You are unable to equip that.</span>" );
											}
											break;
									}
									return false;
								} else {
									this.equip_to_slot( W, slot, redraw_mob );
									this.u_equip( wearing, false );
									this.put_in_active_hand( wearing );
								}

								if ( Lang13.Bool( ((dynamic)H).s_store ) && !( ((Obj_Item)((dynamic)H).s_store).mob_can_equip( this, 17, true ) != 0 ) ) {
									this.u_equip( ((dynamic)H).s_store, true );
								}
							}
						}
						break;
				}
				return true;
			} else {
				
				if ( !( ((Obj_Item)W).mob_can_equip( this, slot, disable_warning ) != 0 ) ) {
					
					switch ((int?)( act_on_fail )) {
						case 1:
							GlobalFuncs.qdel( W );
							W = null;
							break;
						case 2:
							W.loc = GlobalFuncs.get_turf( this );
							break;
						default:
							
							if ( !( disable_warning == true ) ) {
								GlobalFuncs.to_chat( this, "<span class='warning'>You are unable to equip that.</span>" );
							}
							break;
					}
					return false;
				}
				this.equip_to_slot( W, slot, redraw_mob );
				return true;
			}
		}

		// Function from file: mob.dm
		public bool put_in_any_hand_if_possible( dynamic W = null, int? act_on_fail = null, bool? disable_warning = null, bool? redraw_mob = null ) {
			act_on_fail = act_on_fail ?? 0;
			disable_warning = disable_warning ?? true;
			redraw_mob = redraw_mob ?? true;

			
			if ( this.equip_to_slot_if_possible( W, 4, act_on_fail, disable_warning, redraw_mob ) ) {
				this.update_inv_l_hand();
				return true;
			} else if ( this.equip_to_slot_if_possible( W, 5, act_on_fail, disable_warning, redraw_mob ) ) {
				this.update_inv_r_hand();
				return true;
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual dynamic attack_ui( dynamic slot = null ) {
			dynamic W = null;

			W = this.get_active_hand();

			if ( W is Obj_Item ) {
				this.equip_to_slot_if_possible( W, slot );
			}

			if ( this is Mob_Living_Carbon_Human && W == ((dynamic)this).head ) {
				((dynamic)this).update_hair();
			}
			return null;
		}

		// Function from file: mob.dm
		public virtual bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual dynamic get_item_by_slot( dynamic slot_id = null ) {
			
			dynamic _a = slot_id; // Was a switch-case, sorry for the mess.
			if ( _a==4 ) {
				return this.l_hand;
			} else if ( _a==5 ) {
				return this.r_hand;
			}
			return null;
		}

		// Function from file: mob.dm
		public void see_rift( Obj_Machinery_Singularity_Narsie_Large_Exit R = null ) {
			dynamic T_mob = null;
			double new_x = 0;
			double new_y = 0;

			T_mob = GlobalFuncs.get_turf( this );

			if ( R.z == Convert.ToInt32( T_mob.z ) && Map13.GetDistance( R, T_mob ) <= R.consume_range + 10 && !Map13.FetchInView( null, T_mob ).Contains( R ) ) {
				
				if ( !( this.riftimage != null ) ) {
					this.riftimage = new Image( "icons/obj/rift.dmi", T_mob, "rift", 12, 1 );
					this.riftimage.mouse_opacity = 0;
				}
				new_x = ( R.x - Convert.ToDouble( T_mob.x ) ) * 32 + R.pixel_x;
				new_y = ( R.y - Convert.ToDouble( T_mob.y ) ) * 32 + R.pixel_y;
				this.riftimage.pixel_x = ((int)( new_x ));
				this.riftimage.pixel_y = ((int)( new_y ));
				((dynamic)this.riftimage).loc = T_mob;
				GlobalFuncs.to_chat( this, this.riftimage );
			} else if ( this.riftimage != null ) {
				Lang13.Delete( this.riftimage );
				this.riftimage = null;
			}
			return;
		}

		// Function from file: mob.dm
		public void see_narsie( Obj_Machinery_Singularity_Narsie_Large N = null, dynamic dir = null ) {
			int new_x = 0;
			int new_y = 0;

			
			if ( N.chained ) {
				
				if ( this.narsimage != null ) {
					Lang13.Delete( this.narsimage );
					this.narsimage = null;
					Lang13.Delete( this.narglow );
					this.narglow = null;
				}
				return;
			}

			if ( N.z == this.z && Map13.GetDistance( N, this ) <= N.consume_range + 10 && !Map13.FetchInView( null, this ).Contains( N ) ) {
				
				if ( !( this.narsimage != null ) ) {
					this.narsimage = new Image( "icons/obj/narsie.dmi", this.loc, "narsie", 9, 1 );
					this.narsimage.mouse_opacity = 0;
				}

				if ( !( this.narglow != null ) ) {
					this.narglow = new Image( "icons/obj/narsie.dmi", ((dynamic)this.narsimage).loc, "glow-narsie", 12, 1 );
					this.narglow.mouse_opacity = 0;
				}
				new_x = ( N.x - this.x ) * 32 + N.pixel_x;
				new_y = ( N.y - this.y ) * 32 + N.pixel_y;
				this.narsimage.pixel_x = new_x;
				this.narsimage.pixel_y = new_y;
				this.narglow.pixel_x = new_x;
				this.narglow.pixel_y = new_y;
				((dynamic)this.narsimage).loc = this.loc;
				((dynamic)this.narglow).loc = this.loc;
				GlobalFuncs.to_chat( this, this.narsimage );
				GlobalFuncs.to_chat( this, this.narglow );
			} else if ( this.narsimage != null ) {
				Lang13.Delete( this.narsimage );
				this.narsimage = null;
				Lang13.Delete( this.narglow );
				this.narglow = null;
			}
			return;
		}

		// Function from file: mob.dm
		public virtual bool Life(  ) {
			Obj_Screen_Movable_SpellMaster spell_master = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.spell_masters != null && this.spell_masters.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.spell_masters, typeof(Obj_Screen_Movable_SpellMaster) )) {
					spell_master = _a;
					
					spell_master.update_spells( false, this );
				}
			}
			return false;
		}

		// Function from file: mob.dm
		public virtual dynamic movement_delay(  ) {
			return 0;
		}

		// Function from file: mob.dm
		public dynamic findname( dynamic msg = null ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( M.real_name == "" + msg ) {
					return M;
				}
			}
			return 0;
		}

		// Function from file: mob.dm
		public void show_message( dynamic msg = null, int? type = null, string alt = null, int? alt_type = null ) {
			
			if ( !( this.client != null ) ) {
				return;
			}
			msg = String13.SubStr( msg, 1, 1024 );

			if ( Lang13.Bool( type ) ) {
				
				if ( ( ( type ??0) & 1 ) != 0 && this.is_blind() ) {
					
					if ( !Lang13.Bool( alt ) ) {
						return;
					} else {
						msg = alt;
						type = alt_type;
					}
				}

				if ( ( ( type ??0) & 2 ) != 0 && this.is_deaf() ) {
					
					if ( !Lang13.Bool( alt ) ) {
						GlobalFuncs.to_chat( this, "<span class='notice'>You can almost hear someone talking.</span>" );
						return;
					} else {
						msg = alt;
						type = alt_type;

						if ( ( ( type ??0) & 1 ) != 0 && ( ( this.sdisabilities & 1 ) != 0 || Lang13.Bool( this.blinded ) || this.paralysis != 0 ) ) {
							return;
						}
					}
				}
			}

			if ( this.stat == 1 || this.sleeping > 0 ) {
				
				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					if ( !Lang13.Bool( alt ) ) {
						return;
					} else {
						GlobalFuncs.to_chat( this, "<span class='notice'>You can almost hear someone talking.</span>" );
						return;
					}
				} else {
					GlobalFuncs.to_chat( this, "<span class='notice'>You can almost hear someone talking.</span>" );
					return;
				}
			} else {
				GlobalFuncs.to_chat( this, msg );
			}
			return;
		}

		// Function from file: mob.dm
		public void simple_message( string msg = null, dynamic hallucination_msg = null ) {
			
			if ( this.hallucinating() && Lang13.Bool( hallucination_msg ) ) {
				GlobalFuncs.to_chat( this, hallucination_msg );
			} else {
				GlobalFuncs.to_chat( this, msg );
			}
			return;
		}

		// Function from file: mob.dm
		[VerbInfo( group: "Admin", hidden: true )]
		public bool Cell(  ) {
			GasMixture environment = null;
			string t = null;
			Gas trace_gas = null;

			
			if ( !( this.loc != null ) ) {
				return false;
			}
			environment = this.loc.return_air();
			t = "<span class='notice'> Coordinates: " + this.x + "," + this.y + " \n</span>";
			t += "<span class='warning'> Temperature: " + environment.temperature + " \n</span>\n<span class='notice'> Nitrogen: " + environment.nitrogen + " \n</span>\n<span class='notice'> Oxygen: " + environment.oxygen + " \n</span>\n<span class='notice'> Plasma : " + environment.toxins + " \n</span>\n<span class='notice'> Carbon Dioxide: " + environment.carbon_dioxide + " \n</span>";

			foreach (dynamic _a in Lang13.Enumerate( environment.trace_gases, typeof(Gas) )) {
				trace_gas = _a;
				
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'> " + trace_gas.type + ": " + trace_gas.moles + " \n</span>" );
			}
			Task13.User.show_message( t, 1 );
			return false;
		}

		// Function from file: mob.dm
		public virtual string player_panel_controls( Mob user = null ) {
			return "";
		}

		// Function from file: mob.dm
		public virtual string generate_name(  ) {
			return this.name;
		}

		// Function from file: mob.dm
		public void send_back(  ) {
			this.x = this.origin_x;
			this.y = this.origin_y;
			this.z = this.origin_z;
			return;
		}

		// Function from file: mob.dm
		public void store_position(  ) {
			this.origin_x = this.x;
			this.origin_y = this.y;
			this.origin_z = this.z;
			return;
		}

		// Function from file: mob.dm
		public virtual bool is_muzzled(  ) {
			return false;
		}

		// Function from file: mob.dm
		public override dynamic cultify(  ) {
			return null;
		}

		// Function from file: mob.dm
		public virtual void remove_screen_objs(  ) {
			Obj_Screen_ItemAction actionitem = null;

			
			if ( this.flash != null ) {
				GlobalFuncs.returnToPool( this.flash );

				if ( this.client != null ) {
					this.client.screen.Remove( this.flash );
				}
				this.flash = null;
			}

			if ( this.blind != null ) {
				GlobalFuncs.returnToPool( this.blind );

				if ( this.client != null ) {
					this.client.screen.Remove( this.blind );
				}
				this.blind = null;
			}

			if ( this.hands != null ) {
				GlobalFuncs.returnToPool( this.hands );

				if ( this.client != null ) {
					this.client.screen.Remove( this.hands );
				}
				this.hands = null;
			}

			if ( this.pullin != null ) {
				GlobalFuncs.returnToPool( this.pullin );

				if ( this.client != null ) {
					this.client.screen.Remove( this.pullin );
				}
				this.pullin = null;
			}

			if ( this.visible != null ) {
				GlobalFuncs.returnToPool( this.visible );

				if ( this.client != null ) {
					this.client.screen.Remove( this.visible );
				}
				this.visible = null;
			}

			if ( this.purged != null ) {
				GlobalFuncs.returnToPool( this.purged );

				if ( this.client != null ) {
					this.client.screen.Remove( this.purged );
				}
				this.purged = null;
			}

			if ( this.internals != null ) {
				GlobalFuncs.returnToPool( this.internals );

				if ( this.client != null ) {
					this.client.screen.Remove( this.internals );
				}
				this.internals = null;
			}

			if ( this.oxygen != null ) {
				GlobalFuncs.returnToPool( this.oxygen );

				if ( this.client != null ) {
					this.client.screen.Remove( this.oxygen );
				}
				this.oxygen = null;
			}

			if ( Lang13.Bool( this.i_select ) ) {
				GlobalFuncs.returnToPool( this.i_select );

				if ( this.client != null ) {
					this.client.screen.Remove( this.i_select );
				}
				this.i_select = null;
			}

			if ( Lang13.Bool( this.m_select ) ) {
				GlobalFuncs.returnToPool( this.m_select );

				if ( this.client != null ) {
					this.client.screen.Remove( this.m_select );
				}
				this.m_select = null;
			}

			if ( this.toxin != null ) {
				GlobalFuncs.returnToPool( this.toxin );

				if ( this.client != null ) {
					this.client.screen.Remove( this.toxin );
				}
				this.toxin = null;
			}

			if ( this.fire != null ) {
				GlobalFuncs.returnToPool( this.fire );

				if ( this.client != null ) {
					this.client.screen.Remove( this.fire );
				}
				this.fire = null;
			}

			if ( this.bodytemp != null ) {
				GlobalFuncs.returnToPool( this.bodytemp );

				if ( this.client != null ) {
					this.client.screen.Remove( this.bodytemp );
				}
				this.bodytemp = null;
			}

			if ( this.healths != null ) {
				GlobalFuncs.returnToPool( this.healths );

				if ( this.client != null ) {
					this.client.screen.Remove( this.healths );
				}
				this.healths = null;
			}

			if ( this.throw_icon != null ) {
				GlobalFuncs.returnToPool( this.throw_icon );

				if ( this.client != null ) {
					this.client.screen.Remove( this.throw_icon );
				}
				this.throw_icon = null;
			}

			if ( this.nutrition_icon != null ) {
				GlobalFuncs.returnToPool( this.nutrition_icon );

				if ( this.client != null ) {
					this.client.screen.Remove( this.nutrition_icon );
				}
				this.nutrition_icon = null;
			}

			if ( this.pressure != null ) {
				GlobalFuncs.returnToPool( this.pressure );

				if ( this.client != null ) {
					this.client.screen.Remove( this.pressure );
				}
				this.pressure = null;
			}

			if ( this.damageoverlay != null ) {
				GlobalFuncs.returnToPool( this.damageoverlay );

				if ( this.client != null ) {
					this.client.screen.Remove( this.damageoverlay );
				}
				this.damageoverlay = null;
			}

			if ( this.pain != null ) {
				GlobalFuncs.returnToPool( this.pain );

				if ( this.client != null ) {
					this.client.screen.Remove( this.pain );
				}
				this.pain = null;
			}

			if ( this.item_use_icon != null ) {
				GlobalFuncs.returnToPool( this.item_use_icon );

				if ( this.client != null ) {
					this.client.screen.Remove( this.item_use_icon );
				}
				this.item_use_icon = null;
			}

			if ( this.gun_move_icon != null ) {
				GlobalFuncs.returnToPool( this.gun_move_icon );

				if ( this.client != null ) {
					this.client.screen.Remove( this.gun_move_icon );
				}
				this.gun_move_icon = null;
			}

			if ( this.gun_run_icon != null ) {
				GlobalFuncs.returnToPool( this.gun_run_icon );

				if ( this.client != null ) {
					this.client.screen.Remove( this.gun_run_icon );
				}
				this.gun_run_icon = null;
			}

			if ( this.gun_setting_icon != null ) {
				GlobalFuncs.returnToPool( this.gun_setting_icon );

				if ( this.client != null ) {
					this.client.screen.Remove( this.gun_setting_icon );
				}
				this.gun_setting_icon = null;
			}

			if ( this.m_suitclothes != null ) {
				GlobalFuncs.returnToPool( this.m_suitclothes );

				if ( this.client != null ) {
					this.client.screen.Remove( this.m_suitclothes );
				}
				this.m_suitclothes = null;
			}

			if ( this.m_suitclothesbg != null ) {
				GlobalFuncs.returnToPool( this.m_suitclothesbg );

				if ( this.client != null ) {
					this.client.screen.Remove( this.m_suitclothesbg );
				}
				this.m_suitclothesbg = null;
			}

			if ( this.m_hat != null ) {
				GlobalFuncs.returnToPool( this.m_hat );

				if ( this.client != null ) {
					this.client.screen.Remove( this.m_hat );
				}
				this.m_hat = null;
			}

			if ( this.m_hatbg != null ) {
				GlobalFuncs.returnToPool( this.m_hatbg );

				if ( this.client != null ) {
					this.client.screen.Remove( this.m_hatbg );
				}
				this.m_hatbg = null;
			}

			if ( this.m_glasses != null ) {
				GlobalFuncs.returnToPool( this.m_glasses );

				if ( this.client != null ) {
					this.client.screen.Remove( this.m_glasses );
				}
				this.m_glasses = null;
			}

			if ( this.m_glassesbg != null ) {
				GlobalFuncs.returnToPool( this.m_glassesbg );

				if ( this.client != null ) {
					this.client.screen.Remove( this.m_glassesbg );
				}
				this.m_glasses = null;
			}

			if ( this.zone_sel != null ) {
				GlobalFuncs.returnToPool( this.zone_sel );

				if ( this.client != null ) {
					this.client.screen.Remove( this.zone_sel );
				}
				this.zone_sel = null;
			}

			if ( this.hud_used != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.hud_used.item_action_list, typeof(Obj_Screen_ItemAction) )) {
					actionitem = _a;
					

					if ( this.client != null ) {
						this.client.screen.Remove( actionitem );
						this.client.images.Remove( actionitem.overlay );
					}
					GlobalFuncs.returnToPool( actionitem );
					this.hud_used.item_action_list.Remove( actionitem );
				}
			}
			return;
		}

		// Function from file: login.dm
		public void update_Login_details(  ) {
			dynamic M = null;
			dynamic matches = null;

			this.lastKnownIP = this.client.address;
			this.computer_id = this.client.computer_id;
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Login: " + GlobalFuncs.key_name( this ) + " from " + ( Lang13.Bool( this.lastKnownIP ) ? this.lastKnownIP : "localhost" ) + "-" + this.computer_id + " || BYOND v" + this.client.byond_version ) ) );

			if ( GlobalVars.config.log_access ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( M == this ) {
						continue;
					}

					if ( Lang13.Bool( M.key ) && M.key != this.key ) {
						matches = null;

						if ( M.lastKnownIP == this.client.address ) {
							matches += "IP (" + this.client.address + ")";
						}

						if ( M.computer_id == this.client.computer_id ) {
							
							if ( Lang13.Bool( matches ) ) {
								matches += " and ";
							}
							matches += "ID (" + this.client.computer_id + ")";
							Task13.Schedule( 0, (Task13.Closure)(() => {
								Interface13.Alert( "You have logged in already with another key this round, please log out of this one NOW or risk being banned!" );
								return;
							}));
						}

						if ( Lang13.Bool( matches ) ) {
							
							if ( Lang13.Bool( M.client ) ) {
								GlobalFuncs.message_admins( new Txt( "<font color='red'><B>Notice: </B><font color='blue'><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( this ).str( "'>" ).item( GlobalFuncs.key_name_admin( this ) ).str( "</A> has the same " ).item( matches ).str( " as <A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( M ).str( "'>" ).item( GlobalFuncs.key_name_admin( M ) ).str( "</A>.</font>" ).ToString() );
								GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Notice: " + GlobalFuncs.key_name( this ) + " has the same " + matches + " as " + GlobalFuncs.key_name( M ) + "." ) ) );
							} else {
								GlobalFuncs.message_admins( new Txt( "<font color='red'><B>Notice: </B><font color='blue'><A href='?src=" ).Ref( Task13.User ).str( ";priv_msg=" ).Ref( this ).str( "'>" ).item( GlobalFuncs.key_name_admin( this ) ).str( "</A> has the same " ).item( matches ).str( " as " ).item( GlobalFuncs.key_name_admin( M ) ).str( " (no longer logged in). </font>" ).ToString() );
								GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ACCESS: " + ( "Notice: " + GlobalFuncs.key_name( this ) + " has the same " + matches + " as " + GlobalFuncs.key_name( M ) + " (no longer logged in)." ) ) );
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: language.dm
		public virtual bool can_speak_lang( dynamic speaking = null ) {
			return this.languages.Contains( this.universal_speak || Lang13.Bool( speaking ) );
		}

		// Function from file: language.dm
		public virtual bool remove_language( dynamic rem_language = null ) {
			bool _default = false;

			dynamic L = null;

			L = GlobalVars.all_languages[rem_language];
			_default = this.languages.Contains( L );
			this.languages.Remove( L );
			return _default;
		}

		// Function from file: language.dm
		public virtual bool add_language( dynamic language = null, bool? can_speak = null ) {
			dynamic new_language = null;

			new_language = GlobalVars.all_languages[language];

			if ( this.languages.Contains( !( new_language is Language ) || Lang13.Bool( new_language ) ) ) {
				return false;
			}
			this.languages.Add( new_language );
			return true;
		}

		// Function from file: inventory.dm
		public dynamic get_id_card(  ) {
			dynamic _default = null;

			Obj_Item I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.get_all_slots(), typeof(Obj_Item) )) {
				I = _a;
				
				_default = I.GetID();

				if ( Lang13.Bool( _default ) ) {
					break;
				}
			}
			return _default;
		}

		// Function from file: inventory.dm
		public virtual ByTable get_clothing_items( ByTable filter = null ) {
			ByTable equipped = null;

			equipped = this.get_all_slots();
			equipped.Remove( new ByTable(new object [] { this.get_active_hand(), this.get_inactive_hand() }) );
			return equipped;
		}

		// Function from file: inventory.dm
		public virtual dynamic get_equipped_items(  ) {
			ByTable equipped = null;

			equipped = this.get_all_slots();
			equipped.Remove( new ByTable(new object [] { this.get_active_hand(), this.get_inactive_hand() }) );
			return equipped;
		}

		// Function from file: inventory.dm
		public virtual ByTable get_all_slots(  ) {
			return new ByTable(new object [] { this.wear_mask, this.back, this.l_hand, this.r_hand });
		}

		// Function from file: inventory.dm
		public virtual bool remove_from_mob( dynamic O = null ) {
			this.u_equip( O, true );

			if ( this.client != null ) {
				this.client.screen.Remove( O );
			}

			if ( !Lang13.Bool( O ) ) {
				return false;
			}
			O.layer = Lang13.Initial( O, "layer" );
			O.screen_loc = null;
			return true;
		}

		// Function from file: inventory.dm
		public virtual bool u_equip( dynamic W = null, bool? dropped = null ) {
			dropped = dropped ?? true;

			bool success = false;

			
			if ( !Lang13.Bool( W ) ) {
				return false;
			}
			success = false;

			if ( W == this.r_hand ) {
				this.r_hand = null;
				success = true;
				this.update_inv_r_hand();
			} else if ( W == this.l_hand ) {
				this.l_hand = null;
				success = true;
				this.update_inv_l_hand();
			} else if ( W == this.back ) {
				this.back = null;
				success = true;
				this.update_inv_back();
			} else if ( W == this.wear_mask ) {
				this.wear_mask = null;
				success = true;
				this.update_inv_wear_mask();
			} else {
				return false;
			}

			if ( success ) {
				
				if ( this.client != null ) {
					this.client.screen.Remove( W );
				}

				if ( dropped == true ) {
					W.loc = this.loc;
					((Obj_Item)W).dropped( this );
				}

				if ( Lang13.Bool( W ) ) {
					W.layer = Lang13.Initial( W, "layer" );
				}
			}
			return true;
		}

		// Function from file: inventory.dm
		public virtual void before_take_item( dynamic W = null ) {
			W.loc = null;
			W.layer = Lang13.Initial( W, "layer" );
			this.u_equip( W, false );
			this.update_icons();
			return;
		}

		// Function from file: inventory.dm
		public void drop_hands( dynamic Target = null, bool? force_drop = null ) {
			force_drop = force_drop ?? false;

			this.drop_item( this.get_active_hand(), Target, force_drop );
			this.drop_item( this.get_inactive_hand(), Target, force_drop );
			return;
		}

		// Function from file: inventory.dm
		public virtual bool drop_item( dynamic to_drop = null, dynamic Target = null, bool? force_drop = null ) {
			force_drop = force_drop ?? false;

			
			if ( !this.candrop ) {
				return false;
			}

			if ( !Lang13.Bool( to_drop ) ) {
				to_drop = this.get_active_hand();
			}

			if ( !( to_drop is Obj_Item ) ) {
				return false;
			}

			if ( to_drop.cant_drop > 0 && !( force_drop == true ) ) {
				return false;
			}

			if ( !Lang13.Bool( Target ) ) {
				Target = this.loc;
			}
			this.remove_from_mob( to_drop );

			if ( !Lang13.Bool( to_drop ) ) {
				return false;
			}
			((Ent_Dynamic)to_drop).forceMove( Target );
			((Obj_Item)to_drop).dropped( this );

			if ( Lang13.Bool( to_drop ) && to_drop.loc != null ) {
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public void drop_all(  ) {
			Obj_Item I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.get_all_slots(), typeof(Obj_Item) )) {
				I = _a;
				
				this.drop_from_inventory( I );
			}
			return;
		}

		// Function from file: inventory.dm
		public bool drop_from_inventory( dynamic W = null ) {
			
			if ( Lang13.Bool( W ) ) {
				
				if ( this.client != null ) {
					this.client.screen.Remove( W );
				}
				this.u_equip( W, true );

				if ( !Lang13.Bool( W ) ) {
					return true;
				}
				W.layer = Lang13.Initial( W, "layer" );
				((Ent_Dynamic)W).forceMove( this.loc );
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public virtual bool drop_item_v(  ) {
			
			if ( this.stat == 0 && this.loc is Tile ) {
				return this.drop_item();
			}
			return false;
		}

		// Function from file: inventory.dm
		public virtual bool put_in_hands( dynamic W = null ) {
			
			if ( !Lang13.Bool( W ) ) {
				return false;
			}

			if ( this.put_in_active_hand( W ) ) {
				this.update_inv_l_hand();
				this.update_inv_r_hand();
				return true;
			} else if ( this.put_in_inactive_hand( W ) ) {
				this.update_inv_l_hand();
				this.update_inv_r_hand();
				return true;
			} else {
				W.loc = GlobalFuncs.get_turf( this );
				W.layer = Lang13.Initial( W, "layer" );
				((Obj_Item)W).dropped();
				return false;
			}
			return false;
		}

		// Function from file: inventory.dm
		public virtual bool put_in_inactive_hand( dynamic W = null ) {
			
			if ( this.hand == true ) {
				return this.put_in_r_hand( W );
			} else {
				return this.put_in_l_hand( W );
			}
		}

		// Function from file: inventory.dm
		public virtual bool put_in_active_hand( dynamic W = null ) {
			
			if ( this.hand == true ) {
				return this.put_in_l_hand( W );
			} else {
				return this.put_in_r_hand( W );
			}
		}

		// Function from file: inventory.dm
		public virtual bool put_in_hand_check( dynamic I = null, bool? this_hand = null ) {
			
			if ( this.lying == true ) {
				return false;
			}

			if ( !( I is Obj_Item ) ) {
				return false;
			}

			if ( Lang13.Bool( I.flags & 64 ) ) {
				
				if ( !((Obj_Item)I).wield( this, true ) ) {
					GlobalFuncs.to_chat( this, new Txt( "You need both hands to pick up " ).the( I ).item().str( "." ).ToString() );
					return false;
				}
			}
			return true;
		}

		// Function from file: inventory.dm
		public bool put_in_r_hand( dynamic W = null ) {
			
			if ( !this.put_in_hand_check( W, this.hand ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.r_hand ) ) {
				
				if ( Lang13.Bool( ((Obj_Item)W).prepickup( this ) ) ) {
					return false;
				}
				W.loc = this;
				this.r_hand = W;
				W.layer = 20;
				W.pixel_x = Lang13.Initial( W, "pixel_x" );
				W.pixel_y = Lang13.Initial( W, "pixel_y" );
				((Obj_Item)W).equipped( this, 5 );

				if ( this.client != null ) {
					this.client.screen.Or( W );
				}

				if ( this.pulling == W ) {
					this.stop_pulling();
				}
				this.update_inv_r_hand();
				((Obj_Item)W).pickup( this );
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public bool put_in_l_hand( dynamic W = null ) {
			
			if ( !this.put_in_hand_check( W, this.hand ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.l_hand ) ) {
				
				if ( Lang13.Bool( ((Obj_Item)W).prepickup( this ) ) ) {
					return false;
				}
				W.loc = this;
				this.l_hand = W;
				W.layer = 20;
				W.pixel_x = Lang13.Initial( W, "pixel_x" );
				W.pixel_y = Lang13.Initial( W, "pixel_y" );
				((Obj_Item)W).equipped( this, 4 );

				if ( this.client != null ) {
					this.client.screen.Or( W );
				}

				if ( this.pulling == W ) {
					this.stop_pulling();
				}
				this.update_inv_l_hand();
				((Obj_Item)W).pickup( this );
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public virtual dynamic get_multitool( bool? if_active = null ) {
			if_active = if_active ?? false;

			return null;
		}

		// Function from file: inventory.dm
		public virtual dynamic get_inactive_hand(  ) {
			
			if ( this.hand == true ) {
				return this.r_hand;
			} else {
				return this.l_hand;
			}
		}

		// Function from file: inventory.dm
		public dynamic get_active_hand_organ(  ) {
			dynamic temp = null;

			
			if ( !( this is Mob_Living_Carbon ) ) {
				return null;
			}

			if ( GlobalFuncs.hasorgans( this ) ) {
				temp = ((dynamic)this).organs_by_name["r_hand"];

				if ( this.hand == true ) {
					temp = ((dynamic)this).organs_by_name["l_hand"];
				}
				return temp;
			}
			return null;
		}

		// Function from file: inventory.dm
		public virtual dynamic get_active_hand(  ) {
			
			if ( this.hand == true ) {
				return this.l_hand;
			} else {
				return this.r_hand;
			}
		}

		// Function from file: emote.dm
		public void emote_dead( string message = null ) {
			string input = null;
			dynamic M = null;

			
			if ( ( this.client.prefs.muted & 16 ) != 0 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot send deadchat emotes (muted).</span>" );
				return;
			}

			if ( !Lang13.Bool( this.client.prefs.toggles & 32 ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You have deadchat muted.</span>" );
				return;
			}

			if ( !Lang13.Bool( message ) ) {
				input = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( this, "Choose an emote to display.", null, null, null, InputType.Str | InputType.Null ) ), 1, 1024 );
			} else {
				input = message;
			}

			if ( Lang13.Bool( input ) ) {
				message = "<span class='game deadsay'><span class='prefix'>DEAD:</span> <b>" + this + "</b> " + message + "</span>";
			} else {
				return;
			}

			if ( Lang13.Bool( message ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( M is Mob_NewPlayer ) {
						continue;
					}

					if ( Lang13.Bool( M.client ) && Lang13.Bool( M.client.holder ) && Lang13.Bool( M.client.holder.rights & 2 | 8192 ) && Lang13.Bool( M.client.prefs.toggles & 32 ) ) {
						GlobalFuncs.to_chat( M, message );
					} else if ( Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client.prefs.toggles & 32 ) ) {
						((Mob)M).show_message( message, 2 );
					}
				}
			}
			return;
		}

		// Function from file: emote.dm
		public void custom_emote( int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			bool muzzled = false;
			dynamic input = null;
			dynamic M = null;
			Mob_Living M2 = null;

			
			if ( Lang13.Bool( this.stat ) || !this.use_me && Task13.User == this ) {
				GlobalFuncs.to_chat( Task13.User, "You are unable to emote." );
				return;
			}
			muzzled = this.wear_mask is Obj_Item_Clothing_Mask_Muzzle;

			if ( m_type == 2 && muzzled ) {
				return;
			}

			if ( !Lang13.Bool( message ) ) {
				input = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( this, "Choose an emote to display.", null, null, null, InputType.Str | InputType.Null ) ), 1, 1024 );
			} else {
				input = message;
			}

			if ( Lang13.Bool( input ) ) {
				message = "<B>" + this + "</B> " + input;
			} else {
				return;
			}

			if ( Lang13.Bool( message ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]EMOTE: " + ( "" + this.name + "/" + this.key + " (@" + this.x + "," + this.y + "," + this.z + "): " + message ) ) );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( !Lang13.Bool( M.client ) ) {
						continue;
					}

					if ( M is Mob_NewPlayer ) {
						continue;
					}

					if ( String13.FindIgnoreCase( message, " snores.", 1, 0 ) != 0 ) {
						break;
					}

					if ( Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client ) && M.client.prefs != null && Lang13.Bool( M.client.prefs.toggles & 128 ) && !Map13.FetchViewers( null, this ).Contains( M ) ) {
						M.show_message( message );
					}
				}

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else if ( ( ( m_type ??0) & 2 ) != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_hearers_in_view( GlobalFuncs.get_turf( this ), null ), typeof(Mob_Living) )) {
						M2 = _b;
						
						M2.show_message( message, m_type );
					}
				}
			}
			return;
		}

		// Function from file: delays.dm
		public void delayNext( int types = 0, double delay = 0, bool? additive = null ) {
			additive = additive ?? false;

			
			if ( ( types & 1 ) != 0 ) {
				this.delayNextMove( delay, additive );
			}

			if ( ( types & 2 ) != 0 ) {
				this.delayNextAttack( delay, additive );
			}

			if ( ( types & 4 ) != 0 ) {
				this.delayNextSpecial( delay, additive );
			}
			return;
		}

		// Function from file: delays.dm
		public void delayNextSpecial( double delay = 0, bool? additive = null ) {
			additive = additive ?? false;

			this.special_delayer.delayNext( delay, additive );
			return;
		}

		// Function from file: delays.dm
		public void delayNextAttack( dynamic delay = null, bool? additive = null ) {
			additive = additive ?? false;

			this.attack_delayer.delayNext( delay, additive );
			return;
		}

		// Function from file: delays.dm
		public void delayNextMove( dynamic delay = null, bool? additive = null ) {
			additive = additive ?? false;

			
			if ( this.client != null ) {
				this.client.move_delayer.delayNext( delay, additive );
			}
			return;
		}

		// Function from file: death.dm
		public void resurrect(  ) {
			GlobalVars.living_mob_list.Or( this );
			GlobalVars.dead_mob_list.Remove( this );
			this.verbs.Remove( typeof(Mob_Living).GetMethod( "butcher" ) );
			return;
		}

		// Function from file: death.dm
		public virtual dynamic death( bool? gibbed = null ) {
			Obj_Item I = null;

			this.timeofdeath = Game13.time;
			GlobalVars.living_mob_list.Remove( this );
			GlobalVars.dead_mob_list.Add( this );
			GlobalVars.stat_collection.add_death_stat( this );

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				I = _a;
				
				I.OnMobDeath( this );
			}
			return Lang13.SuperCall( gibbed );
		}

		// Function from file: death.dm
		public virtual void dust(  ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			new Obj_Effect_Decal_Cleanable_Ash( this.loc );
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: death.dm
		public virtual dynamic gib( bool? animation = null, bool? meat = null ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalFuncs.gibs( this.loc, this.viruses, this.dna );
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: mediamanager.dm
		public void force_music( string url = null, int? start = null, dynamic volume = null ) {
			volume = volume ?? 1;

			
			if ( this.client != null && this.client.media != null ) {
				this.client.media.forced = url != "";

				if ( this.client.media.forced ) {
					this.client.media.push_music( url, start, volume );
				} else {
					this.client.media.update_music();
				}
			}
			return;
		}

		// Function from file: mediamanager.dm
		public void stop_all_music(  ) {
			
			if ( this.client != null && this.client.media != null ) {
				this.client.media.push_music( "", 0, 1 );
			}
			return;
		}

		// Function from file: mediamanager.dm
		public void update_music(  ) {
			
			if ( this.client != null && this.client.media != null && !this.client.media.forced ) {
				this.client.media.update_music();
			}
			return;
		}

		// Function from file: utils.dm
		public MoneyAccount get_worn_id_account( bool? require_pin = null, dynamic user = null ) {
			require_pin = require_pin ?? false;

			dynamic I = null;
			dynamic attempt_pin = null;
			MoneyAccount D = null;

			
			if ( this is Mob_Living_Carbon_Human ) {
				I = this.get_id_card();
				attempt_pin = 0;

				if ( !( I is Obj_Item_Weapon_Card_Id ) ) {
					return null;
				}
				D = GlobalFuncs.get_money_account( I.associated_account_number );

				if ( require_pin == true && Lang13.Bool( user ) ) {
					attempt_pin = Interface13.Input( user, "Enter pin code", "Transaction", null, null, InputType.Num );

					if ( D.remote_access_pin != attempt_pin ) {
						return null;
					}
				}
				return D;
			} else if ( this is Mob_Living_Silicon ) {
				return GlobalVars.station_account;
			}
			return null;
		}

		// Function from file: holder2.dm
		public bool check_rights( int rights_required = 0 ) {
			
			if ( this != null && this.client != null ) {
				
				if ( rights_required != 0 ) {
					
					if ( this.client.holder != null ) {
						
						if ( ( rights_required & Convert.ToInt32( this.client.holder.rights ) ) != 0 ) {
							return true;
						}
					}
				} else if ( this.client.holder != null ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: objs.dm
		public void set_machine( dynamic O = null ) {
			this.unset_machine();

			if ( O is Obj ) {
				this.machine = O;

				if ( !( this.machine._using != null ) ) {
					this.machine._using = new ByTable();
				}
				this.machine._using.Add( this );
				this.machine.in_use = true;
			}
			return;
		}

		// Function from file: objs.dm
		public void unset_machine(  ) {
			
			if ( Lang13.Bool( this.machine ) ) {
				
				if ( this.machine._using != null ) {
					this.machine._using.Remove( this );

					if ( !( this.machine._using.len != 0 ) ) {
						this.machine._using = null;
					}
				}
				this.machine = null;
			}
			return;
		}

		// Function from file: overview.dm
		public void clearmap(  ) {
			Obj_Screen O = null;

			this.client.screen.Remove( this.mapobjs );

			foreach (dynamic _a in Lang13.Enumerate( this.mapobjs, typeof(Obj_Screen) )) {
				O = _a;
				
				GlobalFuncs.returnToPool( O );
			}
			this.mapobjs = null;
			this.unset_machine();
			return;
		}

		// Function from file: wizard.dm
		public virtual bool wearing_wiz_garb(  ) {
			GlobalFuncs.to_chat( this, "Silly creature, you're not a human. Only humans can cast this spell." );
			return false;
		}

		// Function from file: wizard.dm
		public void spellremove( dynamic M = null ) {
			Spell spell_to_remove = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.spell_list, typeof(Spell) )) {
				spell_to_remove = _a;
				
				this.remove_spell( spell_to_remove );
			}
			return;
		}

		// Function from file: rightandwrong.dm
		public void rightandwrong( bool summon_type = false ) {
			Mob_Living_Carbon_Human H = null;
			Objective_Survive survive = null;
			int obj_count = 0;
			Objective OBJ = null;
			dynamic randomizeguns = null;
			dynamic randomizemagic = null;

			GlobalFuncs.to_chat( Task13.User, "<B>You summoned " + ( summon_type ? "magic" : "guns" ) + "!</B>" );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User, true ) + " summoned " + ( summon_type ? "magic" : "guns" ) + "!" );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( Task13.User ) + " summoned " + ( summon_type ? "magic" : "guns" ) + "!" ) ) );

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Carbon_Human) )) {
				H = _d;
				

				if ( H.stat == 2 || !( H.client != null ) ) {
					continue;
				}

				if ( GlobalFuncs.is_special_character( H ) != 0 ) {
					continue;
				}

				if ( Rand13.PercentChance( 35 ) && !GlobalVars.ticker.mode.traitors.Contains( H.mind ) ) {
					GlobalVars.ticker.mode.traitors.Add( H.mind );
					H.mind.special_role = "traitor";
					survive = new Objective_Survive();
					survive.owner = H.mind;
					H.mind.objectives.Add( survive );
					H.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Was made into a survivor, and trusts no one!</font>" );
					GlobalFuncs.to_chat( H, "<B>You are the survivor! Your own safety matters above all else, trust no one and kill anyone who gets in your way. However, armed as you are, now would be the perfect time to settle that score or grab that pair of yellow gloves you've been eyeing...</B>" );
					obj_count = 1;

					foreach (dynamic _a in Lang13.Enumerate( H.mind.objectives, typeof(Objective) )) {
						OBJ = _a;
						
						GlobalFuncs.to_chat( H, "<B>Objective #" + obj_count + "</B>: " + OBJ.explanation_text );
						obj_count++;
					}
				}
				randomizeguns = Rand13.Pick(new object [] { "taser", "egun", "laser", "revolver", "detective", "smg", "nuclear", "deagle", "gyrojet", "pulse", "silenced", "cannon", "doublebarrel", "shotgun", "combatshotgun", "mateba", "smg", "uzi", "crossbow", "saw", "hecate", "osipr", "gatling", "bison", "ricochet", "spur", "nagant", "beegun" });
				randomizemagic = Rand13.Pick(new object [] { "fireball", "smoke", "blind", "mindswap", "forcewall", "knock", "horsemask", "charge", "wandnothing", "wanddeath", "wandresurrection", "wandpolymorph", "wandteleport", "wanddoor", "wandfireball", "staffchange", "staffhealing", "armor", "scrying" });

				if ( !summon_type ) {
					
					dynamic _b = randomizeguns; // Was a switch-case, sorry for the mess.
					if ( _b=="taser" ) {
						new Obj_Item_Weapon_Gun_Energy_Taser( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="egun" ) {
						new Obj_Item_Weapon_Gun_Energy_Gun( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="laser" ) {
						new Obj_Item_Weapon_Gun_Energy_Laser( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="revolver" ) {
						new Obj_Item_Weapon_Gun_Projectile( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="detective" ) {
						new Obj_Item_Weapon_Gun_Projectile_Detective( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="smg" ) {
						new Obj_Item_Weapon_Gun_Projectile_Automatic_C20r( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="nuclear" ) {
						new Obj_Item_Weapon_Gun_Energy_Gun_Nuclear( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="deagle" ) {
						new Obj_Item_Weapon_Gun_Projectile_Deagle_Camo( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="gyrojet" ) {
						new Obj_Item_Weapon_Gun_Projectile_Gyropistol( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="pulse" ) {
						new Obj_Item_Weapon_Gun_Energy_PulseRifle( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="silenced" ) {
						new Obj_Item_Weapon_Gun_Projectile_Pistol( GlobalFuncs.get_turf( H ) );
						new Obj_Item_GunPart_Silencer( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="cannon" ) {
						new Obj_Item_Weapon_Gun_Energy_Lasercannon( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="doublebarrel" ) {
						new Obj_Item_Weapon_Gun_Projectile_Shotgun_Pump( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="shotgun" ) {
						new Obj_Item_Weapon_Gun_Projectile_Shotgun_Pump( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="combatshotgun" ) {
						new Obj_Item_Weapon_Gun_Projectile_Shotgun_Pump_Combat( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="mateba" ) {
						new Obj_Item_Weapon_Gun_Projectile_Mateba( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="smg" ) {
						new Obj_Item_Weapon_Gun_Projectile_Automatic( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="uzi" ) {
						new Obj_Item_Weapon_Gun_Projectile_Automatic_MiniUzi( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="crossbow" ) {
						new Obj_Item_Weapon_Gun_Energy_Crossbow( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="saw" ) {
						new Obj_Item_Weapon_Gun_Projectile_Automatic_L6Saw( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="hecate" ) {
						new Obj_Item_Weapon_Gun_Projectile_Hecate( GlobalFuncs.get_turf( H ) );
						new Obj_Item_AmmoCasing_BMG50( GlobalFuncs.get_turf( H ) );
						new Obj_Item_AmmoCasing_BMG50( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="osipr" ) {
						new Obj_Item_Weapon_Gun_Osipr( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="gatling" ) {
						new Obj_Item_Weapon_Gun_Gatling( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="bison" ) {
						new Obj_Item_Weapon_Gun_Energy_Bison( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="ricochet" ) {
						new Obj_Item_Weapon_Gun_Energy_Ricochet( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="spur" ) {
						new Obj_Item_Weapon_Gun_Energy_Polarstar( GlobalFuncs.get_turf( H ) );
						new Obj_Item_Device_Modkit_SpurParts( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="nagant" ) {
						new Obj_Item_Weapon_Gun_Projectile_Nagant( GlobalFuncs.get_turf( H ) );
					} else if ( _b=="beegun" ) {
						new Obj_Item_Weapon_Gun_Gatling_Beegun( GlobalFuncs.get_turf( H ) );
					}
					GlobalFuncs.playsound( GlobalFuncs.get_turf( H ), "sound/effects/summon_guns.ogg", 50, 1 );
				} else {
					
					dynamic _c = randomizemagic; // Was a switch-case, sorry for the mess.
					if ( _c=="fireball" ) {
						new Obj_Item_Weapon_Spellbook_Oneuse_Fireball( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="smoke" ) {
						new Obj_Item_Weapon_Spellbook_Oneuse_Smoke( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="blind" ) {
						new Obj_Item_Weapon_Spellbook_Oneuse_Blind( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="mindswap" ) {
						new Obj_Item_Weapon_Spellbook_Oneuse_Mindswap( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="forcewall" ) {
						new Obj_Item_Weapon_Spellbook_Oneuse_Forcewall( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="knock" ) {
						new Obj_Item_Weapon_Spellbook_Oneuse_Knock( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="horsemask" ) {
						new Obj_Item_Weapon_Spellbook_Oneuse_Horsemask( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="charge" ) {
						new Obj_Item_Weapon_Spellbook_Oneuse_Charge( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="armor" ) {
						new Obj_Item_Clothing_Suit_Space_Rig_Wizard( GlobalFuncs.get_turf( H ) );
						new Obj_Item_Clothing_Head_Helmet_Space_Rig_Wizard( GlobalFuncs.get_turf( H ) );
					} else if ( _c=="scrying" ) {
						new Obj_Item_Weapon_Scrying( GlobalFuncs.get_turf( H ) );

						if ( !H.mutations.Contains( 3 ) ) {
							H.mutations.Add( 3 );
							H.sight |= 28;
							H.see_in_dark = 8;
							H.see_invisible = 45;
							GlobalFuncs.to_chat( H, "<span class='notice'>The walls suddenly disappear.</span>" );
						}
					}
				}
			}
			return;
		}

		// Function from file: vampire_powers.dm
		public void remove_vampire_blood( int? amount = null ) {
			amount = amount ?? 0;

			int? bloodold = null;

			
			if ( !( this.mind != null ) || !( this.mind.vampire != null ) ) {
				return;
			}
			bloodold = this.mind.vampire.bloodusable;
			this.mind.vampire.bloodusable = Num13.MaxInt( 0, ( this.mind.vampire.bloodusable ??0) - ( amount ??0) );

			if ( bloodold != this.mind.vampire.bloodusable ) {
				GlobalFuncs.to_chat( this, "<span class='notice'><b>You have " + this.mind.vampire.bloodusable + " left to use.</b></span>" );
			}
			return;
		}

		// Function from file: vampire_powers.dm
		public bool handle_vampire_menace(  ) {
			dynamic T = null;
			Mob_Living_Carbon C = null;

			
			if ( !( this.mind != null ) || !( this.mind.vampire != null ) || !( this is Mob_Living_Carbon_Human ) ) {
				this.mind.vampire.ismenacing = false;
				return false;
			}

			if ( !this.mind.vampire.ismenacing ) {
				this.mind.vampire.ismenacing = false;
				return false;
			}
			T = GlobalFuncs.get_turf( this );

			if ( ((Tile)T).get_lumcount() > 2 ) {
				this.mind.vampire.ismenacing = false;
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( null, 6 ), typeof(Mob_Living_Carbon) )) {
				C = _a;
				

				if ( Rand13.PercentChance( 35 ) ) {
					continue;
				}

				if ( !C.vampire_affected( this.mind.current ) ) {
					continue;
				}
				C.stuttering += 20;
				C.Jitter( 20 );
				C.Dizzy( 20 );
				GlobalFuncs.to_chat( C, "<span class='sinister'>Your heart is filled with dread, and you shake uncontrollably.</span>" );
			}
			return false;
		}

		// Function from file: vampire_powers.dm
		public bool handle_enthrall( dynamic H = null ) {
			string _ref = null;
			Objective_Protect new_objective = null;

			
			if ( !( H is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( this, "<b><span class='warning'>SOMETHING WENT WRONG, YELL AT POMF OR NEXIS</b>" );
				return false;
			}
			_ref = new Txt().Ref( this.mind ).ToString();

			if ( !GlobalVars.ticker.mode.thralls.Contains( _ref ) ) {
				GlobalVars.ticker.mode.thralls[_ref] = new ByTable(new object [] { H.mind });
			} else {
				GlobalVars.ticker.mode.thralls[_ref] += H.mind;
			}
			new_objective = new Objective_Protect();
			new_objective.owner = H.mind;
			new_objective.target = this.mind;
			new_objective.explanation_text = "You have been Enthralled by " + this.name + ", the vampire. Follow their every command.";
			H.mind.objectives += new_objective;
			GlobalVars.ticker.mode.enthralled.Add( H.mind );
			GlobalVars.ticker.mode.enthralled[H.mind] = this.mind;
			H.mind.special_role = "VampThrall";
			GlobalFuncs.to_chat( H, "<span class='sinister'>You have been Enthralled by " + this.name + ". Follow their every command.</span>" );
			GlobalFuncs.to_chat( this, "<span class='warning'>You have successfully Enthralled " + H.name + ". <i>If they refuse to do as you say just adminhelp.</i></span>" );
			((GameMode)GlobalVars.ticker.mode).update_vampire_icons_added( H.mind );
			((GameMode)GlobalVars.ticker.mode).update_vampire_icons_added( this.mind );
			GlobalFuncs.log_admin( "" + String13.CKey( this.key ) + " has mind-slaved " + String13.CKey( H.key ) + "." );
			GlobalFuncs.message_admins( "" + String13.CKey( this.key ) + " has mind-slaved " + String13.CKey( H.key ) + " (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + H.x + ";Y=" + H.y + ";Z=" + H.z + "'>JMP</A>)." );
			return false;
		}

		// Function from file: vampire_powers.dm
		public bool can_enthrall( dynamic C = null ) {
			bool enthrall_safe = false;
			Obj_Item_Weapon_Implant_Loyalty L = null;
			Obj_Item_Weapon_Implant_Traitor T = null;

			enthrall_safe = false;

			if ( this.mind.vampire.powers.Contains( 0 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( C, typeof(Obj_Item_Weapon_Implant_Loyalty) )) {
					L = _a;
					

					if ( L != null && L.implanted ) {
						enthrall_safe = true;
						break;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( C, typeof(Obj_Item_Weapon_Implant_Traitor) )) {
					T = _b;
					

					if ( T != null && T.implanted ) {
						enthrall_safe = true;
						break;
					}
				}
			}

			if ( !Lang13.Bool( C ) ) {
				Game13.log.WriteMsg( new Txt( "something bad happened on enthralling a mob src is " ).item( this ).str( " " ).item( this.key ).str( " " ).Ref( this ).ToString() );
				return false;
			}

			if ( !Lang13.Bool( C.mind ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>" + C.name + "'s mind is not there for you to enthrall.</span>" );
				return false;
			}

			if ( enthrall_safe || GlobalVars.ticker.mode.vampires.Contains( C.mind ) || C.mind.vampire != null || GlobalVars.ticker.mode.enthralled.Contains( C.mind ) ) {
				((Ent_Static)C).visible_message( "<span class='warning'>" + C + " seems to resist the takeover!</span>", "<span class='notice'>You feel a familiar sensation in your skull that quickly dissipates.</span>" );
				return false;
			}

			if ( !((Mob)C).vampire_affected( this.mind ) ) {
				((Ent_Static)C).visible_message( "<span class='warning'>" + C + " seems to resist the takeover!</span>", "<span class='notice'>Your faith of " + GlobalVars.ticker.Bible_deity_name + " has kept your mind clear of all evil</span>" );
			}

			if ( !( C is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You can only enthrall humanoids!" );
				return false;
			}
			return true;
		}

		// Function from file: vampire_powers.dm
		public bool handle_vampire_cloak(  ) {
			dynamic T = null;

			
			if ( !( this.mind != null ) || !( this.mind.vampire != null ) || !( this is Mob_Living_Carbon_Human ) ) {
				this.alphas["vampire_cloak"] = 255;
				this.color = "#FFFFFF";
				return false;
			}
			T = GlobalFuncs.get_turf( this );

			if ( !this.mind.vampire.iscloaking ) {
				this.alphas["vampire_cloak"] = 255;
				this.color = "#FFFFFF";
				return false;
			}

			if ( ((Tile)T).get_lumcount() * 10 <= 2 ) {
				this.alphas["vampire_cloak"] = Num13.Floor( 38.25 );

				if ( this.mind.vampire.powers.Contains( 14 ) ) {
					this.color = "#000000";
				}
				return true;
			} else if ( this.mind.vampire.powers.Contains( 14 ) ) {
				this.alphas["vampire_cloak"] = Num13.Floor( 38.25 );
			} else {
				this.alphas["vampire_cloak"] = Num13.Floor( 204 );
			}
			return false;
		}

		// Function from file: vampire_powers.dm
		public dynamic vampire_active( int? required_blood = null, int? max_stat = null, bool? active_range = null ) {
			required_blood = required_blood ?? 0;
			max_stat = max_stat ?? 0;
			active_range = active_range ?? true;

			bool pass = false;
			Vampire vampire = null;
			ByTable victims = null;
			Mob_Living_Carbon C = null;
			dynamic T = null;

			pass = this.vampire_power( required_blood, max_stat );

			if ( !pass ) {
				return null;
			}
			vampire = this.mind.vampire;

			if ( !( vampire != null ) ) {
				return null;
			}
			victims = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, active_range ), typeof(Mob_Living_Carbon) )) {
				C = _a;
				
				victims.Add( C );
			}
			T = Interface13.Input( this, "Victim?", null, null, victims, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( T ) ) {
				return null;
			}

			if ( !Map13.FetchInView( null, active_range ).Contains( T ) ) {
				return null;
			}

			if ( !this.vampire_can_reach( T, active_range ) ) {
				return null;
			}

			if ( !this.vampire_power( required_blood, max_stat ) ) {
				return null;
			}
			return T;
		}

		// Function from file: vampire_powers.dm
		public bool vampire_can_reach( dynamic M = null, bool? active_range = null ) {
			active_range = active_range ?? true;

			
			if ( M.loc == this.loc ) {
				return true;
			}

			if ( !( this.loc is Tile ) || !( M.loc is Tile ) ) {
				return false;
			}

			if ( this.Adjacent( M ) ) {
				return true;
			}
			return false;
		}

		// Function from file: vampire_powers.dm
		public bool vampire_affected( dynamic M = null ) {
			
			if ( this.mind != null && this.mind.vampire != null ) {
				return false;
			}

			if ( Lang13.Bool( M ) && M.vampire != null && M.vampire.powers.Contains( 13 ) ) {
				return true;
			}

			if ( this.mind != null && this.mind.assigned_role == "Chaplain" ) {
				return false;
			}
			return true;
		}

		// Function from file: vampire_powers.dm
		public bool vampire_power( int? required_blood = null, int? max_stat = null ) {
			required_blood = required_blood ?? 0;
			max_stat = max_stat ?? 0;

			Vampire vampire = null;
			bool fullpower = false;
			dynamic T = null;

			
			if ( !( this.mind != null ) ) {
				return false;
			}

			if ( !( this is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are in too weak of a form to do this!</span>" );
				return false;
			}
			vampire = this.mind.vampire;

			if ( !( vampire != null ) ) {
				Game13.log.WriteMsg( "" + this + " has vampire verbs but isn't a vampire." );
				return false;
			}
			fullpower = vampire.powers.Contains( 13 );

			if ( ( this.stat ??0) > ( max_stat ??0) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are incapacitated.</span>" );
				return false;
			}

			if ( vampire.nullified != 0 ) {
				
				if ( !fullpower ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Something is blocking your powers!</span>" );
					return false;
				}
			}

			if ( ( vampire.bloodusable ??0) < ( required_blood ??0) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You require at least " + required_blood + " units of usable blood to do that!</span>" );
				return false;
			}

			if ( this.areaMaster is Zone_Chapel ) {
				
				if ( !fullpower ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Your powers are useless on this holy ground.</span>" );
					return false;
				}
			}

			if ( GlobalFuncs.check_holy( this ) && !fullpower ) {
				T = GlobalFuncs.get_turf( this );

				if ( ((Tile)T).get_lumcount() * 10 > 2 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>This ground has been blessed and illuminated, suppressing your abilities.</span>" );
					return false;
				}
			}
			return true;
		}

		// Function from file: vampire.dm
		public void announce_new_power( ByTable old_powers = null, ByTable new_powers = null ) {
			string msg = null;
			dynamic n = null;

			msg = "";

			foreach (dynamic _b in Lang13.Enumerate( new_powers )) {
				n = _b;
				

				if ( !old_powers.Contains( n ) ) {
					
					dynamic _a = n; // Was a switch-case, sorry for the mess.
					if ( _a==4 ) {
						msg = "<span class='notice'>You have gained the shapeshifting ability, at the cost of stored blood you can change your form permanently.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_shapeshift" ) );
					} else if ( _a==5 ) {
						msg = "<span class='notice'>Your vampiric vision has improved.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.mind.store_memory( "<font size = 1>" + msg + "</font>" );
					} else if ( _a==6 ) {
						msg = "<span class='notice'>You have gained the Diseased Touch ability which causes those you touch to die shortly after unless treated medically.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_disease" ) );
					} else if ( _a==7 ) {
						msg = "<span class='notice'>You have gained the Cloak of Darkness ability which when toggled makes you near invisible in the shroud of darkness.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_cloak" ) );
					} else if ( _a==8 ) {
						msg = "<span class='notice'>You have gained the Summon Bats ability.";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_bats" ) );
					} else if ( _a==9 ) {
						msg = "<span class='notice'>You have gained the Chiroptean Screech ability which stuns anything with ears in a large radius and shatters glass in the process.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_screech" ) );
					} else if ( _a==10 ) {
						msg = "<span class='notice'>You have gained the Mist Form ability which allows you to take on the form of mist for a short period and pass over any obstacle in your path.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_jaunt" ) );
					} else if ( _a==11 ) {
						msg = "<span class='notice'>You have gained the Enthrall ability which at a heavy blood cost allows you to enslave a human that is not loyal to any other for a random period of time.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_enthrall" ) );
					} else if ( _a==12 ) {
						msg = "<span class='notice'>You have gained the ability to shadowstep, which makes you disappear into nearby shadows at the cost of blood.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_shadowstep" ) );
					} else if ( _a==13 ) {
						msg = "<span class='sinister'>You have reached physical maturity. You are more resistant to holy things, and your vision has been improved greatly.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.mind.store_memory( "<font size = 1>" + msg + "</font>" );
					} else if ( _a==14 ) {
						msg = "<span class='notice'>You have gained mastery over the shadows. In the dark, you can mask your identity, instantly terrify non-vampires who approach you, and enter the chapel for a longer period of time.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_shadowmenace" ) );
					} else if ( _a==15 ) {
						msg = "<span class='sinister'>You develop an uncanny charismatic aura that makes you difficult to disobey. Hypnotise and Enthrall take less time to perform, and Enthrall works on implanted targets.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.mind.store_memory( "<font size = 1>" + msg + "</font>" );
					} else if ( _a==16 ) {
						msg = "<span class='sinister'>You have reached the absolute peak of your power. Your abilities cannot be nullified very easily, and you may return from the grave so long as your body is not burned, destroyed or sanctified. You can also spawn a rather nice cape.</span>";
						GlobalFuncs.to_chat( this, "" + msg );
						this.mind.store_memory( "<font size = 1>" + msg + "</font>" );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_undeath" ) );
						this.verbs.Add( typeof(Client).GetMethod( "vampire_spawncape" ) );
					}
				}
			}
			return;
		}

		// Function from file: vampire.dm
		public void check_vampire_upgrade( Mind v = null ) {
			Vampire vamp = null;
			ByTable old_powers = null;

			
			if ( !( v != null ) ) {
				return;
			}

			if ( !( v.vampire != null ) ) {
				return;
			}
			vamp = v.vampire;
			old_powers = vamp.powers.Copy();

			if ( vamp.bloodtotal >= 100 ) {
				vamp.powers.Or( 5 );
				vamp.powers.Or( 4 );
			}

			if ( vamp.bloodtotal >= 150 ) {
				vamp.powers.Or( 7 );
				vamp.powers.Or( 6 );
			}

			if ( vamp.bloodtotal >= 200 ) {
				vamp.powers.Or( 8 );
				vamp.powers.Or( 9 );
			}

			if ( vamp.bloodtotal >= 250 ) {
				vamp.powers.Or( 12 );
			}

			if ( vamp.bloodtotal >= 300 ) {
				vamp.powers.Or( 10 );
				vamp.powers.Or( 11 );
			}

			if ( vamp.bloodtotal >= 400 ) {
				vamp.powers.Or( 13 );
			}

			if ( vamp.bloodtotal >= 450 ) {
				vamp.powers.Or( 14 );
			}

			if ( vamp.bloodtotal >= 500 ) {
				vamp.powers.Or( 15 );
			}

			if ( vamp.bloodtotal >= 666 ) {
				vamp.powers.Or( 16 );
			}
			this.announce_new_power( old_powers, vamp.powers );
			return;
		}

		// Function from file: vampire.dm
		public bool handle_bloodsucking( Mob_Living_Carbon_Human H = null ) {
			int blood = 0;
			int bloodtotal = 0;
			int? bloodusable = null;

			this.mind.vampire.draining = H;
			blood = 0;
			bloodtotal = 0;
			bloodusable = 0;
			this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Bit " + H.name + " (" + H.ckey + ") in the neck and draining their blood</font>" );
			H.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been bit in the neck by " + this.name + " (" + this.ckey + ")</font>" );
			GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "" + this.name + " (" + this.ckey + ") bit " + H.name + " (" + H.ckey + ") in the neck" ) ) );
			this.visible_message( "<span class='danger'>" + this.name + " bites " + H.name + "'s neck!</span>", "<span class='danger'>You bite " + H.name + "'s neck and begin to drain their blood.</span>", "<span class='notice'>You hear a soft puncture and a wet sucking noise.</span>" );

			if ( !( this is Mob_Living_Carbon ) ) {
				H.LAssailant = null;
			} else {
				H.LAssailant = this;
			}

			while (GlobalFuncs.do_mob( this, H, 50 )) {
				
				if ( !( this.mind.vampire != null ) || !GlobalVars.ticker.mode.vampires.Contains( this.mind ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Your fangs have disappeared!</span>" );
					this.mind.vampire.draining = null;
					return false;
				}

				if ( Lang13.Bool( H.species.flags & 1 ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Not a drop of blood here</span>" );
					this.mind.vampire.draining = null;
					return false;
				}
				bloodtotal = this.mind.vampire.bloodtotal;
				bloodusable = this.mind.vampire.bloodusable;

				if ( !H.vessel.get_reagent_amount( "blood" ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>They've got no blood left to give.</span>" );
					break;
				}

				if ( ( H.stat ??0) < 2 ) {
					blood = Num13.MinInt( 10, H.vessel.get_reagent_amount( "blood" ) ?1:0 );
					this.mind.vampire.bloodtotal += blood;
					this.mind.vampire.bloodusable += blood;
					H.adjustCloneLoss( 10 );
				} else {
					blood = Num13.MinInt( 5, H.vessel.get_reagent_amount( "blood" ) ?1:0 );
					this.mind.vampire.bloodtotal += blood;
				}

				if ( bloodtotal != this.mind.vampire.bloodtotal ) {
					GlobalFuncs.to_chat( this, "<span class='notice'>You have accumulated " + this.mind.vampire.bloodtotal + " " + ( this.mind.vampire.bloodtotal > 1 ? "units" : "unit" ) + " of blood" + ( this.mind.vampire.bloodusable != bloodusable ? ", and have " + this.mind.vampire.bloodusable + " left to use" : "." ) + "</span>" );
				}
				this.check_vampire_upgrade( this.mind );
				H.vessel.remove_reagent( "blood", 25 );
			}
			this.mind.vampire.draining = null;
			GlobalFuncs.to_chat( this, "<span class='notice'>You stop draining " + H.name + " of blood.</span>" );
			return true;
		}

		// Function from file: vampire.dm
		public void remove_vampire_powers(  ) {
			dynamic handler = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( "/client/proc" ) )) {
				handler = _a;
				

				if ( String13.FindIgnoreCase( "" + handler, "vampire_", 1, 0 ) != 0 ) {
					this.verbs.Remove( handler );
				}
			}
			return;
		}

		// Function from file: h_sandbox.dm
		[VerbInfo( name: "Sandbox Spawn", desc: "Spawn any item or machine", group: "Sandbox" )]
		[VerbArg( 1, InputType.Str )]
		public void sandbox_spawn_atom( string _object = null ) {
			dynamic types = null;
			dynamic type = null;
			ByTable matches = null;
			dynamic path = null;
			dynamic chosen = null;

			types = Lang13.GetTypes( typeof(Obj_Item) ) + Lang13.GetTypes( typeof(Obj_Machinery) );

			foreach (dynamic _a in Lang13.Enumerate( types )) {
				type = _a;
				

				if ( GlobalFuncs.is_banned_type( type ) ) {
					types -= type;
				}
			}
			matches = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( types )) {
				path = _b;
				

				if ( GlobalFuncs.is_banned_type( path ) ) {
					continue;
				}

				if ( String13.FindIgnoreCase( "" + path, _object, 1, 0 ) != 0 ) {
					matches.Add( path );
				}
			}

			if ( matches.len == 0 ) {
				return;
			}
			chosen = null;

			if ( matches.len == 1 ) {
				chosen = matches[1];
			} else {
				chosen = Interface13.Input( "Select an atom type", "Spawn Atom", matches[1], null, matches, InputType.Null | InputType.Any );

				if ( !Lang13.Bool( chosen ) ) {
					return;
				}
			}

			if ( GlobalFuncs.is_banned_type( chosen ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>Denied.</span>" );
				return;
			}
			Lang13.Call( chosen, Task13.User.loc );
			GlobalFuncs.message_admins( "[SANDBOX] " + GlobalFuncs.key_name( Task13.User ) + " spawned " + chosen + " at (" + Task13.User.x + "," + Task13.User.y + "," + Task13.User.z + ")" );
			GlobalFuncs.feedback_add_details( "admin_verb", "hSBSA" );
			return;
		}

		// Function from file: h_sandbox.dm
		[VerbInfo( name: "Sandbox Panel", group: "Sandbox" )]
		public void sandbox_panel(  ) {
			
			if ( this.sandbox != null ) {
				this.sandbox.update();
			}
			return;
		}

		// Function from file: h_sandbox.dm
		public void CanBuild(  ) {
			
			if ( GlobalVars.ticker.mode.name == "sandbox" ) {
				this.sandbox = new HSB();
				this.sandbox.owner = this.ckey;

				if ( this.client.holder != null ) {
					this.sandbox.admin = true;
				}
				this.verbs.Add( typeof(Mob).GetMethod( "sandbox_panel" ) );
				this.verbs.Add( typeof(Mob).GetMethod( "sandbox_spawn_atom" ) );
			}
			return;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Extract DNA Sting (40)", desc: "Stealthily sting a target to extract their DNA.", group: "Changeling" )]
		public bool changeling_extract_dna_sting(  ) {
			Changeling changeling = null;
			dynamic T = null;

			changeling = null;

			if ( this.mind != null && this.mind.changeling != null ) {
				changeling = this.mind.changeling;
			}

			if ( !( changeling != null ) ) {
				return false;
			}
			T = this.changeling_sting( 40, typeof(Mob).GetMethod( "changeling_extract_dna_sting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}
			T.dna.real_name = T.real_name;
			changeling.absorbed_dna.Or( T.dna );

			if ( Lang13.Bool( T.species ) && !changeling.absorbed_species.Contains( T.species.name ) ) {
				changeling.absorbed_species.Add( T.species.name );
			}
			GlobalFuncs.feedback_add_details( "changeling_powers", "ED" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Death Sting (40)", desc: "Causes spasms onto death.", group: "Changeling" )]
		public bool changeling_DEATHsting(  ) {
			dynamic T = null;

			T = this.changeling_sting( 40, typeof(Mob).GetMethod( "changeling_DEATHsting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}
			GlobalFuncs.to_chat( T, "<span class='danger'>You feel a small prick and your chest becomes tight.</span>" );
			T.silent = 10;
			((Mob)T).Paralyse( 10 );
			((Mob)T).Jitter( 1000 );

			if ( Lang13.Bool( T.reagents ) ) {
				((Reagents)T.reagents).add_reagent( "lexorin", 40 );
			}
			GlobalFuncs.feedback_add_details( "changeling_powers", "DTHS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Unfat sting", desc: "A rapid weightloss plan that actually works!", group: "Changeling" )]
		public bool changeling_unfat_sting(  ) {
			dynamic T = null;

			T = this.changeling_sting( 0, typeof(Mob).GetMethod( "changeling_unfat_sting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}

			if ( T.overeatduration > 100 ) {
				GlobalFuncs.to_chat( T, "<span class='danger'>You feel a small prick as your stomach churns violently. You begin to feel skinnier.</span>" );
				T.overeatduration = 0;
				T.nutrition = Num13.MaxInt( ((int)( T.nutrition - 200 )), 0 );
				GlobalFuncs.feedback_add_details( "changeling_powers", "US" );
			}
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Transformation sting (40)", desc: "Sting target", group: "Changeling" )]
		public bool changeling_transformation_sting(  ) {
			dynamic changeling = null;
			ByTable names = null;
			Dna DNA = null;
			dynamic S = null;
			Dna chosen_dna = null;
			dynamic T = null;

			changeling = this.changeling_power( 40 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( changeling.absorbed_dna, typeof(Dna) )) {
				DNA = _a;
				
				names.Add( "" + DNA.real_name );
			}
			S = Interface13.Input( "Select the target DNA: ", "Target DNA", null, null, names, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( S ) ) {
				return false;
			}
			chosen_dna = ((Changeling)changeling).GetDNA( S );

			if ( !( chosen_dna != null ) ) {
				return false;
			}
			T = this.changeling_sting( 40, typeof(Mob).GetMethod( "changeling_transformation_sting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}

			if ( Lang13.Bool( T.mutations.Contains( 7 ) ) || !( T is Mob_Living_Carbon_Human ) && !( T is Mob_Living_Carbon_Monkey ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>Our sting appears ineffective against its DNA.</span>" );
				return false;
			}
			((Ent_Static)T).visible_message( "<span class='warning'>" + T + " transforms!</span>" );
			T.dna = chosen_dna.Clone();
			T.real_name = chosen_dna.real_name;
			((Mob)T).UpdateAppearance();
			GlobalFuncs.domutcheck( T, null );
			GlobalFuncs.feedback_add_details( "changeling_powers", "TS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Paralysis sting (30)", desc: "Sting target", group: "Changeling" )]
		public bool changeling_paralysis_sting(  ) {
			dynamic T = null;

			T = this.changeling_sting( 30, typeof(Mob).GetMethod( "changeling_paralysis_sting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}
			GlobalFuncs.to_chat( T, "<span class='danger'>Your muscles begin to painfully tighten.</span>" );
			((Mob)T).Weaken( 20 );
			GlobalFuncs.feedback_add_details( "changeling_powers", "PS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Deaf sting (5)", desc: "Sting target:", group: "Changeling" )]
		public bool changeling_deaf_sting(  ) {
			dynamic T = null;

			T = this.changeling_sting( 5, typeof(Mob).GetMethod( "changeling_deaf_sting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}
			GlobalFuncs.to_chat( T, "<span class='danger'>Your ears pop and begin ringing loudly!</span>" );
			T.sdisabilities |= 4;
			Task13.Schedule( 300, (Task13.Closure)(() => {
				T.sdisabilities &= 65531;
				return;
			}));
			GlobalFuncs.feedback_add_details( "changeling_powers", "DS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Blind sting (20)", desc: "Sting target", group: "Changeling" )]
		public bool changeling_blind_sting(  ) {
			dynamic T = null;

			T = this.changeling_sting( 20, typeof(Mob).GetMethod( "changeling_blind_sting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}
			GlobalFuncs.to_chat( T, "<span class='danger'>Your eyes burn horrificly!</span>" );
			T.disabilities |= 1;
			Task13.Schedule( 300, (Task13.Closure)(() => {
				T.disabilities &= 65534;
				return;
			}));
			T.eye_blind = 10;
			T.eye_blurry = 20;
			GlobalFuncs.feedback_add_details( "changeling_powers", "BS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Silence sting (10)", desc: "Sting target", group: "Changeling" )]
		public bool changeling_silence_sting(  ) {
			dynamic T = null;

			T = this.changeling_sting( 10, typeof(Mob).GetMethod( "changeling_silence_sting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}
			T.silent += 30;
			GlobalFuncs.feedback_add_details( "changeling_powers", "SS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Hallucination Sting (15)", desc: "Causes terror in the target.", group: "Changeling" )]
		public bool changeling_lsdsting(  ) {
			dynamic T = null;

			T = this.changeling_sting( 15, typeof(Mob).GetMethod( "changeling_lsdsting" ) );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}
			Task13.Schedule( Rand13.Int( 300, 600 ), (Task13.Closure)(() => {
				
				if ( Lang13.Bool( T ) ) {
					T.hallucination += 400;
				}
				return;
			}));
			GlobalFuncs.feedback_add_details( "changeling_powers", "HS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		public dynamic changeling_sting( double? required_chems = null, System.Reflection.MethodInfo verb_path = null ) {
			required_chems = required_chems ?? 0;

			dynamic changeling = null;
			ByTable victims = null;
			Mob_Living_Carbon C = null;
			dynamic T = null;

			changeling = this.changeling_power( required_chems );

			if ( !Lang13.Bool( changeling ) ) {
				return null;
			}
			victims = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInViewExcludeThis( null, changeling.sting_range ), typeof(Mob_Living_Carbon) )) {
				C = _a;
				
				victims.Add( C );
			}
			T = Interface13.Input( this, "Who will we sting?", null, null, victims, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( T ) ) {
				return null;
			}

			if ( !Map13.FetchInView( null, changeling.sting_range ).Contains( T ) ) {
				return null;
			}

			if ( !this.sting_can_reach( T, changeling.sting_range ) ) {
				return null;
			}

			if ( !Lang13.Bool( this.changeling_power( required_chems ) ) ) {
				return null;
			}
			changeling.chem_charges -= required_chems ??0;
			changeling.sting_range = 1;
			this.verbs.Remove( verb_path );
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.verbs.Add( verb_path );
				return;
			}));
			GlobalFuncs.to_chat( this, "<span class='notice'>We stealthily sting " + T + ".</span>" );

			if ( !Lang13.Bool( T.mind ) || !( T.mind.changeling != null ) ) {
				return T;
			}
			GlobalFuncs.to_chat( T, "<span class='warning'>You feel a tiny prick.</span>" );
			return null;
		}

		// Function from file: changeling_powers.dm
		public bool sting_can_reach( dynamic M = null, int? sting_range = null ) {
			sting_range = sting_range ?? 1;

			
			if ( M.loc == this.loc ) {
				return true;
			}

			if ( !( this.loc is Tile ) || !( M.loc is Tile ) ) {
				return false;
			}

			if ( ( sting_range ??0) < 2 ) {
				return this.Adjacent( M );
			}

			if ( Lang13.Bool( GlobalFuncs.AStar( this.loc, M.loc, typeof(Tile).GetMethod( "AdjacentTurfs" ), typeof(Tile).GetMethod( "Distance" ), sting_range ) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Mimic Voice", desc: "Shape our vocal glands to form a voice of someone we choose. We cannot regenerate chemicals when mimicing.", group: "Changeling" )]
		public void changeling_mimicvoice(  ) {
			Mob user = null;
			dynamic changeling = null;
			dynamic mimic_voice = null;

			
			if ( !( Task13.User != null ) ) {
				return;
			}
			user = Task13.User;
			changeling = this.changeling_power();

			if ( !Lang13.Bool( changeling ) ) {
				return;
			}

			if ( Lang13.Bool( changeling.mimicing ) ) {
				changeling.mimicing = "";
				GlobalFuncs.to_chat( this, "<span class='notice'>We return our vocal glands to their original location.</span>" );
				return;
			}
			mimic_voice = GlobalFuncs.stripped_input( user, "Enter a name to mimic.", "Mimic Voice", null, 26 );

			if ( !Lang13.Bool( mimic_voice ) ) {
				return;
			}
			changeling.mimicing = mimic_voice;
			GlobalFuncs.to_chat( this, "<span class='notice'>We shape our glands to take the voice of <b>" + mimic_voice + "</b>, this will stop us from regenerating chemicals while active.</span>" );
			GlobalFuncs.to_chat( this, "<span class='notice'>Use this power again to return to our original voice and reproduce chemicals again.</span>" );
			GlobalFuncs.feedback_add_details( "changeling_powers", "MV" );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (this != null && this.mind != null && this.mind.changeling != null && Lang13.Bool( this.mind.changeling.mimicing )) {
					this.mind.changeling.chem_charges = Num13.MaxInt( ((int)( ( this.mind.changeling.chem_charges ??0) - 1 )), 0 );
					Task13.Sleep( 40 );
				}

				if ( this != null && this.mind != null && this.mind.changeling != null ) {
					this.mind.changeling.mimicing = "";
				}
				return;
			}));
			return;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Hive Absorb (20)", desc: "Allows you to absorb DNA that is being channeled in the airwaves.", group: "Changeling" )]
		public bool changeling_hivedownload(  ) {
			dynamic changeling = null;
			ByTable names = null;
			Dna DNA = null;
			dynamic S = null;
			dynamic chosen_dna = null;

			changeling = this.changeling_power( 20, 1 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.hivemind_bank, typeof(Dna) )) {
				DNA = _a;
				

				if ( !changeling.absorbed_dna.Contains( DNA ) ) {
					names[DNA.real_name] = DNA;
				}
			}

			if ( names.len <= 0 ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>There's no new DNA to absorb from the air.</span>" );
				return false;
			}
			S = Interface13.Input( "Select a DNA absorb from the air: ", "Absorb DNA", null, null, names, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( S ) ) {
				return false;
			}
			chosen_dna = names[S];

			if ( !Lang13.Bool( chosen_dna ) ) {
				return false;
			}
			changeling.chem_charges -= 20;
			changeling.absorbed_dna.Add( chosen_dna );
			GlobalFuncs.to_chat( this, "<span class='notice'>We absorb the DNA of " + S + " from the air.</span>" );
			GlobalFuncs.feedback_add_details( "changeling_powers", "HD" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Hive Channel (10)", desc: "Allows you to channel DNA in the airwaves to allow other changelings to absorb it.", group: "Changeling" )]
		public bool changeling_hiveupload(  ) {
			dynamic changeling = null;
			ByTable names = null;
			Dna DNA = null;
			dynamic S = null;
			Dna chosen_dna = null;

			changeling = this.changeling_power( 10, 1 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( changeling.absorbed_dna, typeof(Dna) )) {
				DNA = _a;
				

				if ( !GlobalVars.hivemind_bank.Contains( DNA ) ) {
					names.Add( DNA.real_name );
				}
			}

			if ( names.len <= 0 ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>The airwaves already have all of our DNA.</span>" );
				return false;
			}
			S = Interface13.Input( "Select a DNA to channel: ", "Channel DNA", null, null, names, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( S ) ) {
				return false;
			}
			chosen_dna = ((Changeling)changeling).GetDNA( S );

			if ( !( chosen_dna != null ) ) {
				return false;
			}
			changeling.chem_charges -= 10;
			GlobalVars.hivemind_bank.Add( chosen_dna );
			GlobalFuncs.to_chat( this, "<span class='notice'>We channel the DNA of " + S + " to the air.</span>" );
			GlobalFuncs.feedback_add_details( "changeling_powers", "HU" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Rapid Regeneration (30)", desc: "Begins rapidly regenerating.  Does not effect stuns or chemicals.", group: "Changeling" )]
		public bool changeling_rapidregen(  ) {
			dynamic changeling = null;
			Mob C = null;
			int? i = null;

			changeling = this.changeling_power( 30, 0, 100, 1 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			this.mind.changeling.chem_charges -= 30;
			C = this;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				i = null;
				i = 0;

				while (( i ??0) < 10) {
					
					if ( C != null ) {
						((Mob_Living)C).adjustBruteLoss( -10 );
						((Mob_Living)C).adjustToxLoss( -10 );
						((Mob_Living)C).adjustOxyLoss( -10 );
						((Mob_Living)C).adjustFireLoss( -10 );
						Task13.Sleep( 10 );
					}
					i++;
				}
				return;
			}));
			this.verbs.Remove( typeof(Mob).GetMethod( "changeling_rapidregen" ) );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.verbs.Add( typeof(Mob).GetMethod( "changeling_rapidregen" ) );
				return;
			}));
			GlobalFuncs.feedback_add_details( "changeling_powers", "RR" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Toggle Digital Camoflague", desc: "The AI can no longer track us, but we will look different if examined.  Has a constant cost while active.", group: "Changeling" )]
		public bool changeling_digitalcamo(  ) {
			dynamic changeling = null;
			Mob C = null;

			changeling = this.changeling_power();

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			C = this;

			if ( C.digitalcamo ) {
				GlobalFuncs.to_chat( C, "<span class='notice'>We return to normal.</span>" );
			} else {
				GlobalFuncs.to_chat( C, "<span class='notice'>We distort our form to prevent AI-tracking.</span>" );
			}
			C.digitalcamo = !C.digitalcamo;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (C != null && C.digitalcamo && C.mind != null && C.mind.changeling != null) {
					C.mind.changeling.chem_charges = Num13.MaxInt( ((int)( ( C.mind.changeling.chem_charges ??0) - 1 )), 0 );
					Task13.Sleep( 40 );
				}
				return;
			}));
			this.verbs.Remove( typeof(Mob).GetMethod( "changeling_digitalcamo" ) );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.verbs.Add( typeof(Mob).GetMethod( "changeling_digitalcamo" ) );
				return;
			}));
			GlobalFuncs.feedback_add_details( "changeling_powers", "CAM" );
			return true;
		}

		// Function from file: changeling_powers.dm
		public bool changeling_engorgedglands(  ) {
			this.mind.changeling.chem_storage += 25;
			return true;
		}

		// Function from file: changeling_powers.dm
		public bool changeling_fastchemical(  ) {
			this.mind.changeling.chem_recharge_rate *= 2;
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Epinephrine Sacs (45)", desc: "Removes all stuns", group: "Changeling" )]
		public bool changeling_unstun(  ) {
			dynamic changeling = null;
			Mob C = null;
			Mob H = null;

			changeling = this.changeling_power( 45, 0, 100, 1 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			changeling.chem_charges -= 45;
			C = this;

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				if ( Lang13.Bool( ((dynamic)H).said_last_words ) ) {
					((dynamic)H).said_last_words = 0;
				}
			}
			C.stat = 0;
			C.SetParalysis( 0 );
			C.SetStunned( false );
			C.SetWeakened( 0 );
			C.lying = false;
			C.update_canmove();
			this.verbs.Remove( typeof(Mob).GetMethod( "changeling_unstun" ) );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.verbs.Add( typeof(Mob).GetMethod( "changeling_unstun" ) );
				return;
			}));
			GlobalFuncs.feedback_add_details( "changeling_powers", "UNS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Ranged Sting (10)", desc: "Your next sting ability can be used against targets 2 squares away.", group: "Changeling" )]
		public bool changeling_boost_range(  ) {
			dynamic changeling = null;

			changeling = this.changeling_power( 10, 0, 100 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			changeling.chem_charges -= 10;
			GlobalFuncs.to_chat( this, "<span class='notice'>Your throat adjusts to launch the sting.</span>" );
			changeling.sting_range = 2;
			this.verbs.Remove( typeof(Mob).GetMethod( "changeling_boost_range" ) );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.verbs.Add( typeof(Mob).GetMethod( "changeling_boost_range" ) );
				return;
			}));
			GlobalFuncs.feedback_add_details( "changeling_powers", "RS" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Regenerative Stasis (20)", group: "Changeling" )]
		public bool changeling_fakedeath(  ) {
			dynamic changeling = null;
			Mob C = null;

			
			if ( !( this.loc is Tile ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>((Due to a BYOND bug, it is not possible to come out of regenerative statis if you are not on a turf (walls, floors...)))</span>" );
				return false;
			}
			changeling = this.changeling_power( 20, 1, 100, 2 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			C = this;

			if ( C.suiciding == true ) {
				GlobalFuncs.to_chat( C, "<span class='warning'>Why would we wish to regenerate if we have already committed suicide?" );
				return false;
			}

			if ( !Lang13.Bool( C.stat ) && Interface13.Alert( "Are we sure we wish to fake our death?", null, "Yes", "No" ) == "No" ) {
				return false;
			}
			GlobalFuncs.to_chat( C, "<span class='notice'>We will attempt to regenerate our form.</span>" );
			C.status_flags |= 8192;
			C.update_canmove();
			C.remove_changeling_powers();
			C.emote( "deathgasp" );
			((dynamic)C).tod = GlobalFuncs.worldtime2text();
			Task13.Schedule( Rand13.Int( 800, 1200 ), (Task13.Closure)(() => {
				GlobalFuncs.to_chat( this, "<span class='warning'>We are now ready to regenerate.</span>" );
				this.verbs.Add( typeof(Mob).GetMethod( "changeling_returntolife" ) );
				return;
			}));
			GlobalFuncs.feedback_add_details( "changeling_powers", "FD" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Return To Life (20)", group: "Changeling" )]
		public void changeling_returntolife(  ) {
			dynamic changeling = null;
			Mob C = null;

			changeling = this.changeling_power( 20, 1, 100, 2 );

			if ( !Lang13.Bool( changeling ) ) {
				return;
			}
			C = this;

			if ( Lang13.Bool( this.changeling_power( 20, 1, 100, 2 ) ) ) {
				changeling.chem_charges -= 20;
				GlobalVars.dead_mob_list.Remove( C );
				GlobalVars.living_mob_list.Or( new ByTable(new object [] { C }) );
				C.stat = 0;
				((dynamic)C).tod = null;
				((Mob_Living)C).revive( false );
				GlobalFuncs.to_chat( C, "<span class='notice'>We have regenerated.</span>" );
				C.visible_message( "<span class='warning'>" + this + " appears to wake from the dead, having healed all wounds.</span>" );
				C.status_flags &= 57343;
				C.update_canmove();
				C.make_changeling();
			}
			this.regenerate_icons();
			this.verbs.Remove( typeof(Mob).GetMethod( "changeling_returntolife" ) );
			GlobalFuncs.feedback_add_details( "changeling_powers", "RJ" );
			return;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Transform (1)", group: "Changeling" )]
		public bool changeling_lesser_transform(  ) {
			dynamic changeling = null;
			ByTable names = null;
			Dna DNA = null;
			dynamic S = null;
			Dna chosen_dna = null;
			Mob C = null;
			Dynamic_Overlay animation = null;
			Mob_Living_Carbon_Human O = null;
			Obj_Item W = null;
			Obj T = null;

			changeling = this.changeling_power( 1, 1, 0, null, true );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( changeling.absorbed_dna, typeof(Dna) )) {
				DNA = _a;
				
				names.Add( "" + DNA.real_name );
			}
			S = Interface13.Input( "Select the target DNA: ", "Target DNA", null, null, names, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( S ) ) {
				return false;
			}
			chosen_dna = ((Changeling)changeling).GetDNA( S );

			if ( !( chosen_dna != null ) ) {
				return false;
			}
			C = this;
			changeling.chem_charges--;
			C.remove_changeling_powers();
			C.visible_message( "<span class='warning'>" + C + " transforms!</span>" );
			C.dna = chosen_dna.Clone();
			C.monkeyizing = true;
			C.canmove = false;
			C.icon = null;
			C.overlays.len = 0;
			C.invisibility = 101;
			C.delayNextAttack( 50 );
			animation = new Dynamic_Overlay( C.loc );
			animation.icon_state = "blank";
			animation.icon = "icons/mob/mob.dmi";
			animation.master = this;
			Icon13.Flick( "monkey2h", animation );
			Task13.Sleep( 48 );
			GlobalFuncs.qdel( animation );
			animation = null;
			O = new Mob_Living_Carbon_Human( this );

			if ( C.dna.GetUIState( 11 ) ) {
				O.setGender( GlobalVars.FEMALE );
			} else {
				O.setGender( GlobalVars.MALE );
			}
			((dynamic)C).transferImplantsTo( O );
			((dynamic)C).transferBorers( O );
			O.dna = C.dna.Clone();
			C.dna = null;
			O.real_name = chosen_dna.real_name;

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _b;
				
				C.drop_from_inventory( W );
			}

			foreach (dynamic _c in Lang13.Enumerate( C, typeof(Obj) )) {
				T = _c;
				
				GlobalFuncs.qdel( T );
			}
			O.loc = C.loc;
			O.UpdateAppearance();
			GlobalFuncs.domutcheck( O, null );
			O.setToxLoss( ((dynamic)C).getToxLoss() );
			O.adjustBruteLoss( ((dynamic)C).getBruteLoss() );
			O.setOxyLoss( ((dynamic)C).getOxyLoss() );
			O.adjustFireLoss( ((dynamic)C).getFireLoss() );
			O.stat = C.stat;
			O.delayNextAttack( 0 );
			C.mind.transfer_to( O );
			O.make_changeling();
			O.changeling_update_languages( changeling.absorbed_languages );
			GlobalFuncs.feedback_add_details( "changeling_powers", "LFT" );
			GlobalFuncs.qdel( C );
			C = null;
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Lesser Form (1)", group: "Changeling" )]
		public bool changeling_lesser_form(  ) {
			dynamic changeling = null;
			Mob C = null;
			Dynamic_Overlay animation = null;
			Mob_Living_Carbon_Monkey O = null;
			Obj_Item W = null;
			Obj T = null;

			changeling = this.changeling_power( 1, 0, 0, null, true );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			C = this;

			if ( !( C is Mob_Living_Carbon_Human ) || !( ((dynamic)C).species.primitive != null ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We cannot perform this ability in this form!</span>" );
				return false;
			}
			changeling.chem_charges--;
			C.remove_changeling_powers();
			C.visible_message( "<span class='warning'>" + C + " transforms!</span>" );
			changeling.geneticdamage = 30;
			GlobalFuncs.to_chat( C, "<span class='warning'>Our genes cry out!</span>" );
			C.monkeyizing = true;
			C.canmove = false;
			C.icon = null;
			C.overlays.len = 0;
			C.invisibility = 101;
			C.delayNextAttack( 50 );
			animation = new Dynamic_Overlay( C.loc );
			animation.icon_state = "blank";
			animation.icon = "icons/mob/mob.dmi";
			animation.master = this;
			Icon13.Flick( "h2monkey", animation );
			Task13.Sleep( 48 );
			animation.master = null;
			GlobalFuncs.qdel( animation );
			O = new Mob_Living_Carbon_Monkey( this );
			O.dna = C.dna.Clone();
			C.dna = null;
			((dynamic)C).transferImplantsTo( O );
			((dynamic)C).transferBorers( O );

			foreach (dynamic _a in Lang13.Enumerate( C, typeof(Obj_Item) )) {
				W = _a;
				
				C.drop_from_inventory( W );
			}

			foreach (dynamic _b in Lang13.Enumerate( C, typeof(Obj) )) {
				T = _b;
				
				GlobalFuncs.qdel( T );
			}
			O.loc = C.loc;
			O.name = "monkey (" + Rand13.Int( 1, 1000 ) + ")";
			O.setToxLoss( ((dynamic)C).getToxLoss() );
			O.adjustBruteLoss( ((dynamic)C).getBruteLoss() );
			O.setOxyLoss( ((dynamic)C).getOxyLoss() );
			O.adjustFireLoss( ((dynamic)C).getFireLoss() );
			O.stat = C.stat;
			O.delayNextAttack( 0 );
			O.a_intent = "hurt";
			C.mind.transfer_to( O );
			O.make_changeling(  );
			O.verbs.Add( typeof(Mob).GetMethod( "changeling_lesser_transform" ) );
			O.changeling_update_languages( O.mind.changeling.absorbed_languages );
			GlobalFuncs.feedback_add_details( "changeling_powers", "LF" );
			GlobalFuncs.qdel( C );
			C = null;
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Transform (5)", group: "Changeling" )]
		public bool changeling_transform(  ) {
			dynamic changeling = null;
			ByTable names = null;
			Dna DNA = null;
			dynamic S = null;
			Dna chosen_dna = null;
			dynamic oldspecies = null;
			Mob H = null;

			changeling = this.changeling_power( 5, 1, 0, null, true );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			names = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( changeling.absorbed_dna, typeof(Dna) )) {
				DNA = _a;
				
				names.Add( "" + DNA.real_name );
			}
			S = Interface13.Input( "Select the target DNA: ", "Target DNA", null, null, names, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( S ) ) {
				return false;
			}
			chosen_dna = ((Changeling)changeling).GetDNA( S );

			if ( !( chosen_dna != null ) ) {
				return false;
			}
			changeling.chem_charges -= 5;
			this.visible_message( "<span class='warning'>" + this + " transforms!</span>" );
			changeling.geneticdamage = 30;
			oldspecies = this.dna.species;
			this.dna = chosen_dna.Clone();
			this.real_name = chosen_dna.real_name;
			this.flavor_text = "";
			this.UpdateAppearance();
			H = this;

			if ( H is Mob_Living_Carbon_Human && oldspecies != this.dna.species ) {
				((Mob_Living_Carbon_Human)H).set_species( H.dna.species, false );
			}
			GlobalFuncs.domutcheck( this, null );
			this.verbs.Remove( typeof(Mob).GetMethod( "changeling_transform" ) );
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.verbs.Add( typeof(Mob).GetMethod( "changeling_transform" ) );
				return;
			}));
			GlobalFuncs.feedback_add_details( "changeling_powers", "TR" );
			return true;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Absorb DNA", group: "Changeling" )]
		public bool changeling_absorb_dna(  ) {
			dynamic changeling = null;
			dynamic G = null;
			Mob_Living_Carbon_Human T = null;
			int? stage = null;
			dynamic affecting = null;
			Mob thechangeling = null;
			bool avail_blood = false;
			Reagent_Blood B = null;
			dynamic language = null;
			dynamic dna_data = null;
			Power_Changeling Tp = null;

			changeling = this.changeling_power( 0, 0, 100 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}
			G = this.get_active_hand();

			if ( !( G is Obj_Item_Weapon_Grab ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We must be grabbing a creature in our active hand to absorb them.</span>" );
				return false;
			}
			T = G.affecting;

			if ( !( T is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>" + T + " is not compatible with our biology.</span>" );
				return false;
			}

			if ( T.mutations.Contains( 8 ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>This creature's DNA is ruined beyond useability!</span>" );
				return false;
			}

			if ( ( !Lang13.Bool( G.state ) ?1:0) == 5 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We must have a tighter grip to absorb this creature.</span>" );
				return false;
			}

			if ( changeling.isabsorbing ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We are already absorbing!</span>" );
				return false;
			}
			changeling.isabsorbing = true;
			stage = null;
			stage = 1;

			while (( stage ??0) <= 3) {
				
				switch ((int?)( stage )) {
					case 1:
						GlobalFuncs.to_chat( this, "<span class='notice'>This creature is compatible. We must hold still...</span>" );
						break;
					case 2:
						GlobalFuncs.to_chat( this, "<span class='notice'>We extend a proboscis.</span>" );
						this.visible_message( "<span class='warning'>" + this + " extends a proboscis!</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/lingextends.ogg", 50, 1 );
						break;
					case 3:
						GlobalFuncs.to_chat( this, "<span class='notice'>We stab " + T + " with the proboscis.</span>" );
						this.visible_message( "<span class='danger'>" + this + " stabs " + T + " with the proboscis!</span>" );
						GlobalFuncs.to_chat( T, "<span class='danger'>You feel a sharp stabbing pain!</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/lingstabs.ogg", 50, 1 );
						affecting = T.get_organ( ((dynamic)this.zone_sel).selecting );

						if ( Lang13.Bool( affecting.take_damage( 39, 0, 1, "large organic needle" ) ) ) {
							T.UpdateDamageIcon( true );
							stage++;
							continue;
						}
						break;
				}
				GlobalFuncs.feedback_add_details( "changeling_powers", "A" + stage );

				if ( !GlobalFuncs.do_mob( this, T, 150 ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Our absorption of " + T + " has been interrupted!</span>" );
					changeling.isabsorbing = false;
					return false;
				}
				stage++;
			}
			GlobalFuncs.to_chat( this, "<span class='notice'>We have absorbed " + T + "!</span>" );
			this.visible_message( "<span class='danger'>" + this + " sucks the fluids from " + T + "!</span>" );
			GlobalFuncs.to_chat( T, "<span class='danger'>You have been absorbed by the changeling!</span>" );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/lingabsorbs.ogg", 50, 1 );
			T.dna.real_name = T.real_name;
			changeling.absorbed_dna.Or( T.dna );

			if ( this is Mob_Living_Carbon_Human ) {
				thechangeling = this;
				avail_blood = T.vessel.get_reagent_amount( "blood" );

				foreach (dynamic _b in Lang13.Enumerate( ((dynamic)thechangeling).vessel.reagent_list, typeof(Reagent_Blood) )) {
					B = _b;
					
					B.volume = Num13.MinInt( GlobalVars.BLOOD_VOLUME_MAX, ((int)( ( avail_blood ?1:0) + ( B.volume ??0) )) );
				}
			}

			if ( this.nutrition < 400 ) {
				this.nutrition = Num13.MinInt( ((int)( this.nutrition + T.nutrition )), 400 );
			}
			changeling.chem_charges += 10;
			changeling.geneticpoints += 2;

			foreach (dynamic _c in Lang13.Enumerate( T.languages )) {
				language = _c;
				

				if ( !changeling.absorbed_languages.Contains( language ) ) {
					changeling.absorbed_languages.Add( language );
				}
			}
			this.changeling_update_languages( changeling.absorbed_languages );

			if ( Lang13.Bool( T.species ) && !changeling.absorbed_species.Contains( T.species.name ) ) {
				changeling.absorbed_species.Add( T.species.name );
			}

			if ( T.mind != null && T.mind.changeling != null ) {
				
				if ( T.mind.changeling.absorbed_dna != null ) {
					
					foreach (dynamic _d in Lang13.Enumerate( T.mind.changeling.absorbed_dna )) {
						dna_data = _d;
						

						if ( changeling.absorbed_dna.Contains( dna_data ) ) {
							continue;
						}
						changeling.absorbed_dna.Add( dna_data );
						changeling.absorbedcount++;
					}
					T.mind.changeling.absorbed_dna.len = 1;
				}

				if ( T.mind.changeling.purchasedpowers != null ) {
					
					foreach (dynamic _e in Lang13.Enumerate( T.mind.changeling.purchasedpowers, typeof(Power_Changeling) )) {
						Tp = _e;
						

						if ( changeling.purchasedpowers.Contains( Tp ) ) {
							continue;
						} else {
							changeling.purchasedpowers.Add( Tp );

							if ( !Tp.isVerb ) {
								Lang13.Call( Tp.verbpath );
							} else {
								this.make_changeling();
							}
						}
					}
				}
				changeling.chem_charges += T.mind.changeling.chem_charges ??0;
				changeling.geneticpoints += T.mind.changeling.geneticpoints;
				T.mind.changeling.chem_charges = 0;
				T.mind.changeling.geneticpoints = 0;
				T.mind.changeling.absorbedcount = 0;
			}
			changeling.absorbedcount++;
			changeling.isabsorbing = false;
			this.updateChangelingHUD();
			T.death( false );
			T.Drain();
			return true;
		}

		// Function from file: changeling_powers.dm
		public dynamic changeling_power( double? required_chems = null, int? required_dna = null, int? max_genetic_damage = null, int? max_stat = null, bool? deny_horror = null ) {
			required_chems = required_chems ?? 0;
			required_dna = required_dna ?? 0;
			max_genetic_damage = max_genetic_damage ?? 100;
			max_stat = max_stat ?? 0;
			deny_horror = deny_horror ?? false;

			Changeling changeling = null;
			Mob H = null;

			
			if ( this.timestopped ) {
				return 0;
			}

			if ( !( this.mind != null ) ) {
				return null;
			}

			if ( !( this is Mob_Living_Carbon ) ) {
				return null;
			}
			changeling = this.mind.changeling;

			if ( !( changeling != null ) ) {
				Game13.log.WriteMsg( "" + this + " has the changeling_transform() verb but is not a changeling." );
				return null;
			}

			if ( ( this.stat ??0) > ( max_stat ??0) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We are incapacitated.</span>" );
				return null;
			}

			if ( changeling.absorbed_dna.len < ( required_dna ??0) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We require at least " + required_dna + " samples of compatible DNA.</span>" );
				return null;
			}

			if ( ( changeling.chem_charges ??0) < ( required_chems ??0) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We require at least " + required_chems + " units of chemicals to do that!</span>" );
				return null;
			}

			if ( ( changeling.geneticdamage ??0) > ( max_genetic_damage ??0) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>Our genomes are still reassembling. We need time to recover first.</span>" );
				return null;
			}
			H = this;

			if ( deny_horror == true && H is Mob_Living_Carbon_Human && Lang13.Bool( ((dynamic)H).species ) && ((dynamic)H).species.name == "Horror" ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are not permitted to taint our purity.  You cannot do this as a Horror.</span>" );
				return null;
			}
			return changeling;
		}

		// Function from file: changeling_powers.dm
		public void remove_changeling_powers(  ) {
			Power_Changeling P = null;

			
			if ( !( this.mind != null ) || !( this.mind.changeling != null ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.mind.changeling.purchasedpowers, typeof(Power_Changeling) )) {
				P = _a;
				

				if ( P.isVerb ) {
					this.verbs.Remove( P.verbpath );
				}
			}
			return;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Horror Form (30)", desc: "This costly evolution allows us to transform into an all-consuming abomination. We are extremely strong, to the point that we can force airlocks open and devour humans whole, and immune to stuns.", group: "Changeling" )]
		public void changeling_horror_form(  ) {
			dynamic changeling = null;
			Mob H = null;
			Obj_Item slot = null;
			Dynamic_Overlay animation = null;

			
			if ( !( this is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>We must be in human form before activating Horror Form.</span>" );
				return;
			}
			changeling = this.changeling_power( 0, 0, 100 );

			if ( !Lang13.Bool( changeling ) ) {
				return;
			}
			H = this;

			foreach (dynamic _a in Lang13.Enumerate( H.get_all_slots(), typeof(Obj_Item) )) {
				slot = _a;
				
				this.u_equip( slot, true );
			}
			this.monkeyizing = true;
			this.canmove = false;
			this.delayNextAttack( 50 );
			this.icon = null;
			this.invisibility = 101;
			animation = new Dynamic_Overlay( this.loc );
			H.visible_message( "<span class = 'warning'>" + this + " emits a putrid odor as their torso splits open!</span>" );
			GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/effects/greaterling.ogg" ) );
			GlobalFuncs.to_chat( typeof(Game13), "<span class = 'sinister'>A roar pierces the air and makes your blood curdle. Uh oh.</span>" );
			animation.icon_state = "blank";
			animation.icon = "icons/mob/mob.dmi";
			animation.master = this;
			Icon13.Flick( "h2horror", animation );
			Task13.Sleep( 28 );
			GlobalFuncs.qdel( animation );
			this.monkeyizing = false;
			this.canmove = true;
			this.delayNextAttack( 0 );
			this.icon = null;
			this.invisibility = Convert.ToInt32( Lang13.Initial( this, "invisibility" ) );
			((dynamic)H).maxHealth = 800;
			((dynamic)H).health = 800;
			((dynamic)H).set_species( "Horror" );
			H.client.verbs.Or( ((dynamic)H).species.abilities );
			H.update_icons();
			return;
		}

		// Function from file: changeling_powers.dm
		[VerbInfo( name: "Change Species (5)", group: "Changeling" )]
		public bool changeling_change_species(  ) {
			Mob H = null;
			dynamic changeling = null;
			dynamic S = null;

			H = this;

			if ( !( H is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We may only use this power while in humanoid form.</span>" );
				return false;
			}
			changeling = this.changeling_power( 5, 1, 0 );

			if ( !Lang13.Bool( changeling ) ) {
				return false;
			}

			if ( changeling.absorbed_species.len < 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>We do not know of any other species genomes to use.</span>" );
				return false;
			}
			S = Interface13.Input( "Select the target species: ", "Target Species", null, null, changeling.absorbed_species, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( S ) ) {
				return false;
			}
			GlobalFuncs.domutcheck( this, null );
			changeling.chem_charges -= 5;
			changeling.geneticdamage = 30;
			this.visible_message( "<span class='warning'>" + this + " transforms!</span>" );
			this.verbs.Remove( typeof(Mob).GetMethod( "changeling_change_species" ) );
			((Mob_Living_Carbon_Human)H).set_species( S, true );
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.verbs.Add( typeof(Mob).GetMethod( "changeling_change_species" ) );
				this.regenerate_icons();
				return;
			}));
			this.changeling_update_languages( changeling.absorbed_languages );
			GlobalFuncs.feedback_add_details( "changeling_powers", "TR" );
			return true;
		}

		// Function from file: changeling_powers.dm
		public void changeling_update_languages( ByTable updated_languages = null ) {
			dynamic language = null;

			this.languages.len = 0;

			foreach (dynamic _a in Lang13.Enumerate( updated_languages )) {
				language = _a;
				
				this.languages.Add( language );
			}
			this.add_language( "Changeling" );
			return;
		}

		// Function from file: changeling_powers.dm
		public void updateChangelingHUD(  ) {
			int C = 0;

			
			if ( this.hud_used != null ) {
				
				if ( !( this.mind.changeling != null ) ) {
					return;
				}

				if ( !( this.hud_used.vampire_blood_display != null ) ) {
					this.hud_used.changeling_hud();
				}
				((dynamic)this.hud_used.vampire_blood_display).maptext_width = 64;
				((dynamic)this.hud_used.vampire_blood_display).maptext_height = 32;
				C = Num13.Floor( this.mind.changeling.chem_charges ??0 );
				((dynamic)this.hud_used.vampire_blood_display).maptext = "<div align='left' valign='top' style='position:relative; top:0px; left:6px'> C:<font color='#EAB67B' size='1'>" + C + "</font><br> G:<font color='#FF2828' size='1'>" + this.mind.changeling.absorbedcount + "</font></div>";
			}
			return;
		}

		// Function from file: changeling_powers.dm
		public bool make_changeling(  ) {
			bool lesser_form = false;
			dynamic P = null;
			Power_Changeling P2 = null;
			Power_Changeling P3 = null;
			Mob H = null;
			dynamic language = null;

			
			if ( !( this.mind != null ) ) {
				return false;
			}

			if ( !( this.mind.changeling != null ) ) {
				this.mind.changeling = new Changeling( this.gender );
			}
			this.verbs.Add( typeof(Changeling).GetMethod( "EvolutionMenu" ) );
			lesser_form = !( this is Mob_Living_Carbon_Human );

			if ( !( GlobalVars.powerinstances.len != 0 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.powers )) {
					P = _a;
					
					GlobalVars.powerinstances.Add( Lang13.Call( P ) );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.powerinstances, typeof(Power_Changeling) )) {
				P2 = _b;
				

				if ( !( P2.genomecost != 0 ) ) {
					
					if ( !this.mind.changeling.purchasedpowers.Contains( P2 ) ) {
						this.mind.changeling.purchasePower( this.mind, P2.name, false );
					}
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.mind.changeling.purchasedpowers, typeof(Power_Changeling) )) {
				P3 = _c;
				

				if ( P3.isVerb ) {
					
					if ( lesser_form && !P3.allowduringlesserform ) {
						continue;
					}

					if ( !this.verbs.Contains( P3 ) ) {
						this.verbs.Add( P3.verbpath );
					}
				}
			}
			this.mind.changeling.absorbed_dna.Or( this.dna );
			H = this;

			if ( H is Mob_Living_Carbon_Human ) {
				this.mind.changeling.absorbed_species.Or( ((dynamic)H).species.name );
			}

			foreach (dynamic _d in Lang13.Enumerate( this.languages )) {
				language = _d;
				
				this.mind.changeling.absorbed_languages.Or( language );
			}
			this.updateChangelingHUD();
			return true;
		}

		// Function from file: scoreboard.dm
		public void scorestats( string completions = null ) {
			string dat = null;
			int? i = null;

			dat = completions;
			dat += "<BR><h2>Round Statistics and Score</h2>";
			dat += "<B><U>GENERAL STATS</U></B><BR>\n\n	<U>THE GOOD:</U><BR>\n	<B>Length of Shift:</B> " + Num13.Floor( Game13.time / 600 ) + " Minutes (" + Num13.Floor( Convert.ToDouble( GlobalVars.score["time"] * 0.2 ) ) + " Points)<BR>\n	<B>Hydroponics Harvests:</B> " + GlobalVars.score["stuffharvested"] + " (" + GlobalVars.score["stuffharvested"] + " Points)<BR>\n	<B>Ore Smelted:</B> " + GlobalVars.score["oremined"] + " (" + GlobalVars.score["oremined"] + " Points)<BR>\n	<B>Meals Prepared:</B> " + GlobalVars.score["meals"] + " (" + GlobalVars.score["meals"] * 5 + " Points)<BR>\n	<B>Shuttle Escapees:</B> " + GlobalVars.score["escapees"] + " (" + GlobalVars.score["escapees"] * 100 + " Points)<BR>\n	<B>Random Events Endured:</B> " + GlobalVars.score["eventsendured"] + " (" + GlobalVars.score["eventsendured"] * 200 + " Points)<BR>\n	<B>Whole Station Powered:</B> " + ( Lang13.Bool( GlobalVars.score["powerbonus"] ) ? "Yes" : "No" ) + " (" + GlobalVars.score["powerbonus"] * 2500 + " Points)<BR>\n	<B>Ultra-Clean Station:</B> " + ( Lang13.Bool( GlobalVars.score["messbonus"] ) ? "Yes" : "No" ) + " (" + GlobalVars.score["messbonus"] * 10000 + " Points)<BR><BR>\n\n	<U>THE BAD:</U><BR>\n	<B>Dead Crewmen:</B> " + GlobalVars.score["deadcrew"] + " (-" + GlobalVars.score["deadcrew"] * 250 + " Points)<BR>\n	<B>Destroyed Silicons:</B> " + GlobalVars.score["deadsilicon"] + " (-" + GlobalVars.score["deadsilicon"] * 500 + " Points)<BR>\n	<B>AIs Destroyed:</B> " + GlobalVars.score["deadaipenalty"] + " (-" + GlobalVars.score["deadaipenalty"] * 1000 + " Points)<BR>\n	<B>Uncleaned Messes:</B> " + GlobalVars.score["mess"] + " (-" + GlobalVars.score["mess"] + " Points)<BR>\n	<B>Trash on Station:</B> " + GlobalVars.score["litter"] + " (-" + GlobalVars.score["litter"] + " Points)<BR>\n	<B>Station Power Issues:</B> " + GlobalVars.score["powerloss"] + " (-" + GlobalVars.score["powerloss"] * 50 + " Points)<BR>\n	<B>Unique Disease Vectors:</B> " + GlobalVars.score["disease"] + " (-" + GlobalVars.score["disease"] * 50 + " Points)<BR><BR>\n\n	<U>THE WEIRD</U><BR>";
			dat += "<B>Food Eaten:</b> " + GlobalVars.score["foodeaten"] + "<BR>\n	<B>Times a Clown was Abused:</B> " + GlobalVars.score["clownabuse"] + "<BR>\n	<B>Number of Explosions This Shift:</B> " + GlobalVars.score["explosions"] + "<BR>\n	<B>Number of Arena Rounds:</B> " + GlobalVars.score["arenafights"] + "<BR>";

			if ( GlobalVars.arena_top_score ) {
				dat += "<B>Best Arena Fighter (won " + GlobalVars.arena_top_score + " rounds!):</B> " + GlobalVars.score["arenabest"] + "<BR>";
			}

			if ( Lang13.Bool( GlobalVars.score["escapees"] ) ) {
				
				if ( Lang13.Bool( GlobalVars.score["dmgestdamage"] ) ) {
					dat += "<B>Most Battered Escapee:</B> " + GlobalVars.score["dmgestname"] + ", " + GlobalVars.score["dmgestjob"] + ": " + GlobalVars.score["dmgestdamage"] + " damage (" + GlobalVars.score["dmgestkey"] + ")<BR>";
				}

				if ( Lang13.Bool( GlobalVars.score["richestcash"] ) ) {
					dat += "<B>Richest Escapee:</B> " + GlobalVars.score["richestname"] + ", " + GlobalVars.score["richestjob"] + ": " + GlobalVars.score["richestcash"] + " space credits (" + GlobalVars.score["richestkey"] + ")<BR>";
				}
			} else {
				dat += "The station wasn't evacuated or there were no survivors!<BR>";
			}
			dat += "<HR><BR>\n\n	<B><U>FINAL SCORE: " + GlobalVars.score["crewscore"] + "</U></B><BR>";
			GlobalVars.score["rating"] = "A Rating";

			dynamic _a = GlobalVars.score["crewscore"]; // Was a switch-case, sorry for the mess.
			if ( Double.NegativeInfinity<=_a&&_a<=-50000 ) {
				GlobalVars.score["rating"] = "Even the Singularity Deserves Better";
			} else if ( -49999<=_a&&_a<=-5000 ) {
				GlobalVars.score["rating"] = "Singularity Fodder";
			} else if ( -4999<=_a&&_a<=-1000 ) {
				GlobalVars.score["rating"] = "You're All Fired";
			} else if ( -999<=_a&&_a<=-500 ) {
				GlobalVars.score["rating"] = "A Waste of Perfectly Good Oxygen";
			} else if ( -499<=_a&&_a<=-250 ) {
				GlobalVars.score["rating"] = "A Wretched Heap of Scum and Incompetence";
			} else if ( -249<=_a&&_a<=-100 ) {
				GlobalVars.score["rating"] = "Outclassed by Lab Monkeys";
			} else if ( -99<=_a&&_a<=-21 ) {
				GlobalVars.score["rating"] = "The Undesirables";
			} else if ( -20<=_a&&_a<=-1 ) {
				GlobalVars.score["rating"] = "Not So Good";
			} else if ( 1<=_a&&_a<=20 ) {
				GlobalVars.score["rating"] = "Ambivalently Average";
			} else if ( 21<=_a&&_a<=99 ) {
				GlobalVars.score["rating"] = "Not Bad, but Not Good";
			} else if ( 100<=_a&&_a<=249 ) {
				GlobalVars.score["rating"] = "Skillful Servants of Science";
			} else if ( 250<=_a&&_a<=499 ) {
				GlobalVars.score["rating"] = "Best of a Good Bunch";
			} else if ( 500<=_a&&_a<=999 ) {
				GlobalVars.score["rating"] = "Lean Mean Machine Thirteen";
			} else if ( 1000<=_a&&_a<=4999 ) {
				GlobalVars.score["rating"] = "Promotions for Everyone";
			} else if ( 5000<=_a&&_a<=9999 ) {
				GlobalVars.score["rating"] = "Ambassadors of Discovery";
			} else if ( 10000<=_a&&_a<=49999 ) {
				GlobalVars.score["rating"] = "The Pride of Science Itself";
			} else if ( 50000<=_a&&_a<=Double.PositiveInfinity ) {
				GlobalVars.score["rating"] = "Nanotrasen's Finest";
			} else if ( _a==0 ) {
				GlobalVars.score["rating"] = "Nothing of Value";
			}
			dat += "<B><U>RATING:</U></B> " + GlobalVars.score["rating"];
			i = null;
			i = 1;

			while (( i ??0) <= GlobalVars.end_icons.len) {
				Interface13.CacheBrowseResource( this, GlobalVars.end_icons[i], "logo_" + i + ".png" );
				i++;
			}

			if ( !GlobalVars.endgame_info_logged ) {
				GlobalVars.endgame_info_logged = true;
				GlobalVars.round_end_info = dat;
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + dat ) );
				GlobalVars.stat_collection.escapees = Lang13.Bool( GlobalVars.score["escapees"] );
				GlobalVars.stat_collection.crewscore = Lang13.Bool( GlobalVars.score["crewscore"] );
				GlobalVars.stat_collection.Process();
			}
			Interface13.Browse( this, dat, "window=roundstats;size=1000x600" );
			return;
		}

		// Function from file: dna2_helpers.dm
		public bool UpdateAppearance( dynamic UI = null ) {
			Mob H = null;
			int hair = 0;
			int beard = 0;

			
			if ( this is Mob_Living_Carbon_Human ) {
				
				if ( UI != null ) {
					this.dna.UI = UI;
					this.dna.UpdateUI();
				}
				this.dna.check_integrity();
				H = this;
				((dynamic)H).r_hair = this.dna.GetUIValueRange( 1, 255 );
				((dynamic)H).g_hair = this.dna.GetUIValueRange( 2, 255 );
				((dynamic)H).b_hair = this.dna.GetUIValueRange( 3, 255 );
				((dynamic)H).r_facial = this.dna.GetUIValueRange( 4, 255 );
				((dynamic)H).g_facial = this.dna.GetUIValueRange( 5, 255 );
				((dynamic)H).b_facial = this.dna.GetUIValueRange( 6, 255 );
				((dynamic)H).r_eyes = this.dna.GetUIValueRange( 8, 255 );
				((dynamic)H).g_eyes = this.dna.GetUIValueRange( 9, 255 );
				((dynamic)H).b_eyes = this.dna.GetUIValueRange( 10, 255 );
				((dynamic)H).s_tone = 35 - this.dna.GetUIValueRange( 7, 220 );
				H.setGender( GlobalVars.MALE );

				if ( this.dna.GetUIState( 11 ) ) {
					H.setGender( GlobalVars.FEMALE );
				} else {
					H.setGender( GlobalVars.MALE );
				}
				hair = this.dna.GetUIValueRange( 13, GlobalVars.hair_styles_list.len );

				if ( 0 < hair && hair <= GlobalVars.hair_styles_list.len ) {
					((dynamic)H).h_style = GlobalVars.hair_styles_list[hair];
				}
				beard = this.dna.GetUIValueRange( 12, GlobalVars.facial_hair_styles_list.len );

				if ( 0 < beard && beard <= GlobalVars.facial_hair_styles_list.len ) {
					((dynamic)H).f_style = GlobalVars.facial_hair_styles_list[beard];
				}
				((Mob_Living_Carbon_Human)H).update_body( false );
				((Mob_Living_Carbon_Human)H).update_hair();
				return true;
			} else {
				return false;
			}
		}

		// Function from file: sound.dm
		public void playsound_local( dynamic turf_source = null, dynamic soundin = null, dynamic vol = null, double? vary = null, int? frequency = null, int? falloff = null, bool? gas_modified = null, int? channel = null ) {
			channel = channel ?? 0;

			dynamic current_turf = null;
			GasMixture environment = null;
			dynamic atmosphere = null;
			Sound S = null;
			dynamic T = null;
			int dx = 0;
			int dz = 0;

			
			if ( !( this.client != null ) ) {
				return;
			}

			if ( this.ear_deaf > 0 ) {
				vol = vol / ( this.ear_deaf + 1 );
			}

			if ( gas_modified == true ) {
				current_turf = GlobalFuncs.get_turf( this );

				if ( !Lang13.Bool( current_turf ) ) {
					return;
				}
				environment = ((Ent_Static)current_turf).return_air();
				atmosphere = 0;

				if ( environment != null ) {
					atmosphere = environment.return_pressure();
				}

				if ( Convert.ToDouble( atmosphere ) < 2 ) {
					vol = 0;
				} else {
					vol = Num13.MinInt( Convert.ToInt32( vol * atmosphere / 101.32499694824219 ), Convert.ToInt32( vol ) );
				}
			}
			soundin = GlobalFuncs.get_sfx( soundin );
			S = new Sound( soundin, false, false, channel, vol );

			if ( Lang13.Bool( vary ) ) {
				
				if ( Lang13.Bool( frequency ) ) {
					S.frequency = frequency;
				} else {
					S.frequency = GlobalFuncs.get_rand_frequency();
				}
			}

			if ( turf_source is Tile ) {
				T = GlobalFuncs.get_turf( this );
				dx = Convert.ToInt32( turf_source.x - T.x );
				S.x = Num13.Round( ( dx <= -7 ? -7 : ( dx >= GlobalVars.SURROUND_CAP ? GlobalVars.SURROUND_CAP : dx ) ), 1 );
				dz = Convert.ToInt32( turf_source.y - T.y );
				S.z = Num13.Round( ( dz <= -7 ? -7 : ( dz >= GlobalVars.SURROUND_CAP ? GlobalVars.SURROUND_CAP : dz ) ), 1 );
				S.y = true;
				S.falloff = ( Lang13.Bool( falloff ) ? falloff : GlobalVars.FALLOFF_SOUNDS );
			}
			this.WriteMsg( S );
			return;
		}

		// Function from file: data_huds.dm
		public virtual void regular_hud_updates(  ) {
			Image hud = null;

			
			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.client.images, typeof(Image) )) {
					hud = _a;
					

					if ( String13.FindIgnoreCase( hud.icon_state, "hud", 1, 4 ) != 0 ) {
						this.client.images.Remove( hud );
					}
				}
			}

			if ( GlobalVars.med_hud_users.Contains( this ) ) {
				GlobalVars.med_hud_users.Remove( this );
			}

			if ( GlobalVars.sec_hud_users.Contains( this ) ) {
				GlobalVars.sec_hud_users.Remove( this );
			}
			return;
		}

		// Function from file: mind.dm
		public virtual void mind_initialize(  ) {
			
			if ( this.mind != null ) {
				this.mind.key = this.key;
			} else {
				this.mind = new Mind( this.key );
				this.mind.original = this;

				if ( GlobalVars.ticker != null ) {
					GlobalVars.ticker.minds.Add( this.mind );
				} else {
					Game13.log.WriteMsg( "## DEBUG: mind_initialize(): No ticker ready yet! Please inform Carn" );
				}
			}

			if ( !Lang13.Bool( this.mind.name ) ) {
				this.mind.name = this.real_name;
			}
			this.mind.current = this;
			return;
		}

		// Function from file: browser.dm
		public void browse_rsc_icon( string icon = null, string icon_state = null, int? dir = null ) {
			dir = dir ?? -1;

			return;
		}

		// Function from file: screen_objects.dm
		public virtual void update_action_buttons(  ) {
			return;
		}

		// Function from file: ventcrawl.dm
		public dynamic start_ventcrawl(  ) {
			dynamic pipe = null;
			ByTable pipes = null;
			Obj_Machinery_Atmospherics_Unary U = null;

			pipes = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( null, 1 ), typeof(Obj_Machinery_Atmospherics_Unary) )) {
				U = _a;
				

				if ( GlobalFuncs.is_type_in_list( U, GlobalVars.ventcrawl_machinery ) && this.Adjacent( U ) ) {
					pipes.Or( U );
				}
			}

			if ( !( pipes != null ) || !( pipes.len != 0 ) ) {
				GlobalFuncs.to_chat( this, "There are no pipes that you can ventcrawl into within range!" );
				return null;
			}

			if ( pipes.len == 1 ) {
				pipe = pipes[1];
			} else {
				pipe = Interface13.Input( "Crawl Through Vent", "Pick a pipe", null, null, pipes, InputType.Null | InputType.Any );
			}

			if ( this.canmove && Lang13.Bool( pipe ) ) {
				return pipe;
			}
			return null;
		}

		// Function from file: click.dm
		public void face_atom( Ent_Static A = null ) {
			double dx = 0;
			double dy = 0;

			
			if ( this.stat != 0 || Lang13.Bool( this.locked_to ) || !( A != null ) || !( this.x != 0 ) || !( this.y != 0 ) || !( A.x != 0 ) || !( A.y != 0 ) ) {
				return;
			}
			dx = A.x - this.x;
			dy = A.y - this.y;

			if ( !( dx != 0 ) && !( dy != 0 ) ) {
				
				if ( A.pixel_y > 16 ) {
					this.change_dir( GlobalVars.NORTH );
				} else if ( A.pixel_y < -16 ) {
					this.change_dir( GlobalVars.SOUTH );
				} else if ( A.pixel_x > 16 ) {
					this.change_dir( GlobalVars.EAST );
				} else if ( A.pixel_x < -16 ) {
					this.change_dir( GlobalVars.WEST );
				}
				return;
			}

			if ( Math.Abs( dx ) < Math.Abs( dy ) ) {
				
				if ( dy > 0 ) {
					this.change_dir( GlobalVars.NORTH );
				} else {
					this.change_dir( GlobalVars.SOUTH );
				}
			} else if ( dx > 0 ) {
				this.change_dir( GlobalVars.EAST );
			} else {
				this.change_dir( GlobalVars.WEST );
			}
			return;
		}

		// Function from file: click.dm
		public virtual void LaserEyes( Ent_Static A = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual bool AltClickOn( Ent_Static A = null ) {
			A.AltClick( this );
			return false;
		}

		// Function from file: click.dm
		public virtual void CtrlClickOn( Ent_Static A = null ) {
			A.CtrlClick( this );
			return;
		}

		// Function from file: click.dm
		public virtual void ShiftClickOn( Ent_Static A = null ) {
			A.ShiftClick( this );
			return;
		}

		// Function from file: click.dm
		public virtual void MiddleClickOn( Ent_Static A = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual void RestrainedClickOn( Ent_Static A = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual void RangedAttack( Ent_Static A = null, string _params = null ) {
			
			if ( !( this.mutations != null ) || !( this.mutations.len != 0 ) ) {
				return;
			}

			if ( this.mutations.Contains( 9 ) && this.a_intent == "hurt" ) {
				this.LaserEyes( A );
			} else if ( this.mutations.Contains( 1 ) ) {
				A.attack_tk( this );
			}
			return;
		}

		// Function from file: click.dm
		public virtual void UnarmedAttack( Ent_Static A = null, bool proximity_flag = false, string _params = null ) {
			
			if ( A is Mob ) {
				this.delayNextAttack( 10 );
			}
			return;
		}

		// Function from file: click.dm
		public virtual void DblClickOn( Ent_Static A = null, string _params = null ) {
			return;
		}

		// Function from file: click.dm
		public virtual bool ClickOn( Ent_Static A = null, string _params = null ) {
			ByTable modifiers = null;
			Ent_Static M = null;
			dynamic W = null;
			dynamic resolved = null;

			
			if ( !( this.click_delayer != null ) ) {
				this.click_delayer = new DelayController();
			}

			if ( this.timestopped ) {
				return false;
			}

			if ( this.click_delayer.blocked() ) {
				return false;
			}
			this.click_delayer.setDelay( 1 );

			if ( this.client.buildmode != 0 ) {
				GlobalFuncs.build_click( this, this.client.buildmode, _params, A );
				return false;
			}
			modifiers = String13.ParseUrlParams( _params );

			if ( Lang13.Bool( modifiers["middle"] ) ) {
				this.MiddleClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["shift"] ) ) {
				this.ShiftClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["alt"] ) ) {
				this.AltClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlClickOn( A );
				return false;
			}

			if ( this.isStunned() ) {
				return false;
			}
			this.face_atom( A );

			if ( this.attack_delayer.blocked() ) {
				return false;
			}

			if ( this.loc is Obj_Mecha ) {
				
				if ( !Lang13.Bool( Lang13.FindIn( typeof(Tile), new ByTable(new object [] { A, A.loc }) ) ) ) {
					return false;
				}
				M = this.loc;
				((Obj_Mecha)M).click_action( A, this ); return false;
			}

			if ( this.restrained() ) {
				this.RestrainedClickOn( A );
				return false;
			}

			if ( this.in_throw_mode ) {
				this.throw_item( A );
				return false;
			}
			W = this.get_active_hand();

			if ( W == A ) {
				((Obj_Item)W).attack_self( this, _params );

				if ( this.hand == true ) {
					this.update_inv_l_hand( false );
				} else {
					this.update_inv_r_hand( false );
				}
				return false;
			}

			if ( !( this.loc is Tile ) ) {
				return false;
			}

			if ( A.Adjacent( this, 3 ) ) {
				
				if ( Lang13.Bool( W ) ) {
					resolved = ((Obj_Item)W).preattack( A, this, true, _params );

					if ( !Lang13.Bool( resolved ) ) {
						resolved = A.attackby( W, this, _params );

						if ( A is Mob || A is Obj_Mecha || W is Obj_Item_Weapon_Grab ) {
							this.delayNextAttack( 10 );
						}

						if ( !Lang13.Bool( resolved ) && A != null && Lang13.Bool( W ) ) {
							W.afterattack( A, this, 1, _params );
						} else {
							this.delayNextAttack( 10 );
						}
					}
				} else {
					
					if ( A is Mob || W is Obj_Item_Weapon_Grab ) {
						this.delayNextAttack( 10 );
					}

					if ( this.on_uattack is _Event ) {
						this.on_uattack.Invoke( new ByTable().Set( "atom", A ) );
					}
					this.UnarmedAttack( A, true, _params );
				}
				return false;
			} else if ( Lang13.Bool( W ) ) {
				
				if ( A is Mob ) {
					this.delayNextAttack( 10 );
				}

				if ( !((Obj_Item)W).preattack( A, this, false, _params ) ) {
					W.afterattack( A, this, 0, _params );
				}
			} else {
				
				if ( A is Mob ) {
					this.delayNextAttack( 10 );
				}
				this.RangedAttack( A, _params );

				if ( this.on_uattack is _Event ) {
					this.on_uattack.Invoke( new ByTable().Set( "atom", A ) );
				}
			}
			return false;
		}

		// Function from file: unsorted.dm
		public void rename_self( string role = null, bool? allow_numbers = null ) {
			allow_numbers = allow_numbers ?? false;

			dynamic oldname = null;
			int time_passed = 0;
			dynamic newname = null;
			int? i = null;
			Mob_Living M = null;
			Mob A = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				oldname = this.real_name;
				time_passed = Game13.time;
				i = null;
				i = 1;

				while (( i ??0) <= 3) {
					newname = Interface13.Input( this, "You are a " + role + ". Would you like to change your name to something else?", "Name change", oldname, null, InputType.Str );

					if ( Game13.time - time_passed > 300 ) {
						return;
					}
					newname = GlobalFuncs.reject_bad_name( newname, allow_numbers );

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living) )) {
						M = _a;
						

						if ( M == this ) {
							continue;
						}

						if ( !Lang13.Bool( newname ) || M.real_name == newname ) {
							newname = null;
							break;
						}
					}

					if ( Lang13.Bool( newname ) ) {
						break;
					}
					GlobalFuncs.to_chat( this, "Sorry, that " + role + "-name wasn't appropriate, please try another. It's possibly too long/short, has bad characters or is already taken." );
					i++;
				}

				if ( !Lang13.Bool( newname ) ) {
					return;
				}

				if ( String13.CompareIgnoreCase( role, "ai" ) ) {
					
					if ( this is Mob_Living_Silicon_Ai ) {
						A = this;
						oldname = null;

						if ( Lang13.Bool( ((dynamic)A).eyeobj ) ) {
							((dynamic)A).eyeobj.name = "" + newname + " (AI Eye)";
						}

						if ( Lang13.Bool( ((dynamic)A).aiPDA ) ) {
							((dynamic)A).aiPDA.owner = newname;
							((dynamic)A).aiPDA.name = newname + " (" + ((dynamic)A).aiPDA.ownjob + ")";
						}
					}
				}
				this.fully_replace_character_name( oldname, newname );
				return;
			}));
			return;
		}

		// Function from file: unsorted.dm
		public bool fully_replace_character_name( dynamic oldname = null, dynamic newname = null ) {
			ByTable L = null;
			Data_Record R = null;
			bool? search_id = null;
			bool? search_pda = null;
			dynamic _object = null;
			dynamic ID = null;
			dynamic PDA = null;
			Mind themind = null;
			bool found = false;
			Objective objective = null;
			int obj_count = 0;
			Objective objective2 = null;

			
			if ( !Lang13.Bool( newname ) ) {
				return false;
			}
			this.real_name = newname;
			this.name = newname;

			if ( this.mind != null ) {
				this.mind.name = newname;
			}

			if ( this.dna != null ) {
				this.dna.real_name = this.real_name;
			}

			if ( Lang13.Bool( oldname ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.data_core.general, GlobalVars.data_core.medical, GlobalVars.data_core.security, GlobalVars.data_core.locked }), typeof(ByTable) )) {
					L = _a;
					

					if ( L != null ) {
						R = GlobalFuncs.find_record( "name", oldname, L );

						if ( R != null ) {
							R.fields["name"] = newname;
						}
					}
				}
				search_id = GlobalVars.TRUE;
				search_pda = GlobalVars.TRUE;

				foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_contents_in_object( this ) )) {
					_object = _b;
					

					if ( search_id == true && _object is Obj_Item_Weapon_Card_Id ) {
						ID = _object;

						if ( ID.registered_name == oldname ) {
							ID.registered_name = newname;
							ID.name = "" + newname + "'s ID Card (" + ID.assignment + ")";

							if ( !( search_pda == true ) ) {
								break;
							}
							search_id = GlobalVars.FALSE;
						}
					} else if ( search_pda == true && _object is Obj_Item_Device_Pda ) {
						PDA = _object;

						if ( PDA.owner == oldname ) {
							PDA.owner = newname;
							PDA.name = "PDA-" + newname + " (" + PDA.ownjob + ")";

							if ( !( search_id == true ) ) {
								break;
							}
							search_pda = GlobalVars.FALSE;
						}
					}
				}

				foreach (dynamic _e in Lang13.Enumerate( GlobalVars.ticker.minds, typeof(Mind) )) {
					themind = _e;
					

					if ( themind != null ) {
						found = false;

						foreach (dynamic _c in Lang13.Enumerate( themind.objectives, typeof(Objective) )) {
							objective = _c;
							

							if ( objective != null && objective.target == this.mind ) {
								found = true;
								objective.explanation_text = GlobalFuncs.replacetext( objective.explanation_text, oldname, newname );
								themind.memory = GlobalFuncs.replacetext( themind.memory, oldname, newname );
							}
						}

						if ( Lang13.Bool( themind.current ) && found ) {
							obj_count = 1;
							GlobalFuncs.to_chat( themind.current, "<span class='danger'>Objectives Updated</span>" );
							GlobalFuncs.to_chat( themind.current, "<span class='notice'>Your current objectives:</span>" );

							foreach (dynamic _d in Lang13.Enumerate( themind.objectives, typeof(Objective) )) {
								objective2 = _d;
								
								GlobalFuncs.to_chat( themind.current, "<B>Objective #" + obj_count + "</B>: " + objective2.explanation_text );
								obj_count++;
							}
						}
					}
				}
			}
			return true;
		}

		// Function from file: timed_alerts.dm
		public string timed_alert( int? time = null, string message = null, string title = null, string button1 = null, string button2 = null, string button3 = null ) {
			string selected_button = null;

			selected_button = "";

			if ( this.client != null ) {
				selected_button = this.client.f_timed_alert( time, this, message, title, button1, button2, button3 );
			}
			return selected_button;
		}

		// Function from file: mobs.dm
		public bool isVentCrawling(  ) {
			return this.loc is Obj_Machinery_Atmospherics;
		}

		// Function from file: icons.dm
		public void AddCamoOverlay( dynamic A = null ) {
			Icon opacity_icon = null;
			Icon alpha_mask = null;
			int? i = null;
			Image I = null;

			opacity_icon = new Icon( A.icon, A.icon_state );
			alpha_mask = GlobalFuncs.getIconMask( this );
			opacity_icon.AddAlphaMask( alpha_mask );
			opacity_icon.ChangeOpacity( 0.4 );
			i = null;
			i = 0;

			while (( i ??0) < 5) {
				I = new Image( opacity_icon, null, A.icon_state, this.layer + 0.8 );

				switch ((int?)( i )) {
					case 1:
						I.pixel_x--;
						break;
					case 2:
						I.pixel_x++;
						break;
					case 3:
						I.pixel_y--;
						break;
					case 4:
						I.pixel_y++;
						break;
				}
				this.overlays.Add( I );
				i++;
			}
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Me", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public void me_verb( string message = null ) {
			
			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( !Lang13.Bool( Task13.User.stat ) && ( Task13.User.status_flags & 8192 ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Doing this will give us away!</span>" );
				return;
			}
			message = GlobalFuncs.trim( String13.SubStr( GlobalFuncs.sanitize( message ), 1, 1024 ) );

			if ( Task13.User.stat == 2 ) {
				Task13.User.emote_dead( message );
			} else {
				Task13.User.emote( "me", Task13.User.emote_type, message );
			}
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Whisper", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public virtual void whisper( dynamic message = null ) {
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Say", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public void say_verb( dynamic message = null ) {
			
			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}
			Task13.User.say( message );
			return;
		}

		// Function from file: mob_helpers.dm
		[Verb]
		[VerbInfo( name: "a-intent", hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void a_intent_change( dynamic input = null ) {
			
			if ( this is Mob_Living_Carbon_Human || this is Mob_Living_Carbon_Alien_Humanoid || this is Mob_Living_Carbon_Brain ) {
				
				dynamic _a = input; // Was a switch-case, sorry for the mess.
				if ( _a=="help" || _a=="disarm" || _a=="grab" || _a=="hurt" ) {
					this.a_intent = input;
				} else if ( _a=="right" ) {
					this.a_intent = GlobalFuncs.intent_numeric( ( GlobalFuncs.intent_numeric( this.a_intent ) + 1 ) % 4 );
				} else if ( _a=="left" ) {
					this.a_intent = GlobalFuncs.intent_numeric( ( GlobalFuncs.intent_numeric( this.a_intent ) + 3 ) % 4 );
				}

				if ( this.hud_used != null && this.hud_used.action_intent != null ) {
					((dynamic)this.hud_used.action_intent).icon_state = "intent_" + this.a_intent;
				}
			} else if ( this is Mob_Living_Silicon_Robot || this is Mob_Living_Carbon_Monkey || this is Mob_Living_Carbon_Alien_Larva ) {
				
				dynamic _b = input; // Was a switch-case, sorry for the mess.
				if ( _b=="help" ) {
					this.a_intent = "help";
				} else if ( _b=="hurt" ) {
					this.a_intent = "hurt";
				} else if ( _b=="right" || _b=="left" ) {
					this.a_intent = GlobalFuncs.intent_numeric( GlobalFuncs.intent_numeric( this.a_intent ) - 3 );
				}

				if ( this.hud_used != null && this.hud_used.action_intent != null ) {
					
					if ( this.a_intent == "hurt" ) {
						((dynamic)this.hud_used.action_intent).icon_state = "harm";
					} else {
						((dynamic)this.hud_used.action_intent).icon_state = "help";
					}
				}
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public bool southface(  ) {
			
			if ( !this.canface() ) {
				return false;
			}
			this.dir = ((int)( GlobalVars.SOUTH ));
			this.Facing();
			this.delayNextMove( this.movement_delay(), true );
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public bool northface(  ) {
			
			if ( !this.canface() ) {
				return false;
			}
			this.dir = ((int)( GlobalVars.NORTH ));
			this.Facing();
			this.delayNextMove( this.movement_delay(), true );
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public bool westface(  ) {
			
			if ( !this.canface() ) {
				return false;
			}
			this.dir = ((int)( GlobalVars.WEST ));
			this.Facing();
			this.delayNextMove( this.movement_delay(), true );
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public bool eastface(  ) {
			
			if ( !this.canface() ) {
				return false;
			}
			this.dir = ((int)( GlobalVars.EAST ));
			this.Facing();
			this.delayNextMove( this.movement_delay(), true );
			return true;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Rotate Chair", group: "Object" )]
		public void rotate_chair(  ) {
			dynamic C = null;
			Obj_Structure_Bed_Chair C2 = null;
			dynamic checkdir = null;
			Tile checkturf = null;
			Obj_Structure_Bed_Chair C3 = null;

			
			if ( Lang13.Bool( this.locked_to ) ) {
				
				if ( this.locked_to is Obj_Structure_Bed_Chair ) {
					C = this.locked_to;
					((Obj_Structure_Bed_Chair)C).rotate();
					return;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Obj_Structure_Bed_Chair) )) {
				C2 = _a;
				
				C2.rotate();
				return;
			}

			foreach (dynamic _c in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH, GlobalVars.EAST, GlobalVars.WEST, GlobalVars.NORTHEAST, GlobalVars.NORTHWEST, GlobalVars.SOUTHEAST, GlobalVars.SOUTHWEST }) )) {
				checkdir = _c;
				
				checkturf = Map13.GetStep( this, Convert.ToInt32( checkdir ) );

				foreach (dynamic _b in Lang13.Enumerate( checkturf, typeof(Obj_Structure_Bed_Chair) )) {
					C3 = _b;
					
					C3.rotate();
					return;
				}
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Cancel Camera View", group: "OOC" )]
		public virtual void cancel_camera(  ) {
			Mob M = null;
			Mob H = null;

			this.unset_machine();
			this.reset_view( null );

			if ( this is Mob_Living ) {
				M = this;

				if ( Lang13.Bool( ((dynamic)M).cameraFollow ) ) {
					((dynamic)M).cameraFollow = null;
				}

				if ( this is Mob_Living_Carbon_Human ) {
					H = M;
					((Mob_Living_Carbon_Human)H).handle_regular_hud_updates();
				}
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Observe", group: "OOC" )]
		public void observe(  ) {
			bool is_admin = false;
			ByTable names = null;
			ByTable namecounts = null;
			ByTable creatures = null;
			Obj O = null;
			string name = null;
			string name2 = null;
			string name3 = null;
			dynamic M = null;
			string name4 = null;
			dynamic eye_name = null;
			string ok = null;
			Mob mob_eye = null;

			is_admin = false;

			if ( this.client.holder != null && Lang13.Bool( this.client.holder.rights & 2 ) ) {
				is_admin = true;
			} else if ( this.stat != 2 || this is Mob_NewPlayer ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You must be observing to use this!</span>" );
				return;
			}

			if ( is_admin && this.stat == 2 ) {
				is_admin = false;
			}
			names = new ByTable();
			namecounts = new ByTable();
			creatures = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj) )) {
				O = _a;
				

				if ( !( O.loc != null ) ) {
					continue;
				}

				if ( O is Obj_Item_Weapon_Disk_Nuclear ) {
					name = "Nuclear Disk";

					if ( names.Find( name ) != 0 ) {
						namecounts[name]++;
						name = "" + name + " (" + namecounts[name] + ")";
					} else {
						names.Add( name );
						namecounts[name] = 1;
					}
					creatures[name] = O;
				}

				if ( O is Obj_Machinery_Singularity ) {
					name2 = "Singularity";

					if ( names.Find( name2 ) != 0 ) {
						namecounts[name2]++;
						name2 = "" + name2 + " (" + namecounts[name2] + ")";
					} else {
						names.Add( name2 );
						namecounts[name2] = 1;
					}
					creatures[name2] = O;
				}

				if ( O is Obj_Machinery_Bot ) {
					name3 = "BOT: " + O.name;

					if ( names.Find( name3 ) != 0 ) {
						namecounts[name3]++;
						name3 = "" + name3 + " (" + namecounts[name3] + ")";
					} else {
						names.Add( name3 );
						namecounts[name3] = 1;
					}
					creatures[name3] = O;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.sortNames( GlobalVars.mob_list ) )) {
				M = _b;
				
				name4 = M.name;

				if ( names.Find( name4 ) != 0 ) {
					namecounts[name4]++;
					name4 = "" + name4 + " (" + namecounts[name4] + ")";
				} else {
					names.Add( name4 );
					namecounts[name4] = 1;
				}
				creatures[name4] = M;
			}
			this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
			eye_name = null;
			ok = "" + ( is_admin ? "Admin Observe" : "Observe" );
			eye_name = Interface13.Input( "Please, select a player!", ok, null, null, creatures, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( eye_name ) ) {
				return;
			}
			mob_eye = creatures[eye_name];

			if ( this.client != null && mob_eye != null ) {
				this.client.eye = mob_eye;

				if ( is_admin ) {
					this.client.adminobs = true;

					if ( mob_eye == this.client.mob || this.client.eye == this.client.mob ) {
						this.client.adminobs = false;
					}
				}
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Respawn", group: "OOC" )]
		public void abandon_mob(  ) {
			int deathtime = 0;
			Mob G = null;
			int deathtimeminutes = 0;
			string pluralcheck = null;
			double deathtimeseconds = 0;
			Mob_NewPlayer M = null;

			
			if ( !GlobalVars.abandon_allowed ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'> Respawn is disabled.</span>" );
				return;
			}

			if ( this.stat != 2 || !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'> <B>You must be dead to use this!</B></span>" );
				return;
			}

			if ( GlobalVars.ticker.mode.name == "meteor" || GlobalVars.ticker.mode.name == "epidemic" ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'> Respawn is disabled.</span>" );
				return;
			} else {
				deathtime = Game13.time - this.timeofdeath;

				if ( this is Mob_Dead_Observer ) {
					G = this;

					if ( Lang13.Bool( ((dynamic)G).has_enabled_antagHUD ) == true && GlobalVars.config.antag_hud_restricted ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='notice'> <B>Upon using the antagHUD you forfeighted the ability to join the round.</B></span>" );
						return;
					}
				}
				deathtimeminutes = Num13.Floor( deathtime / 600 );
				pluralcheck = "minute";

				if ( deathtimeminutes == 0 ) {
					pluralcheck = "";
				} else if ( deathtimeminutes == 1 ) {
					pluralcheck = " " + deathtimeminutes + " minute and";
				} else if ( deathtimeminutes > 1 ) {
					pluralcheck = " " + deathtimeminutes + " minutes and";
				}
				deathtimeseconds = Num13.Round( ( deathtime - deathtimeminutes * 600 ) / 10, 1 );
				GlobalFuncs.to_chat( Task13.User, "You have been dead for" + pluralcheck + " " + deathtimeseconds + " seconds." );

				if ( deathtime < Convert.ToDouble( GlobalVars.config.respawn_delay * 600 ) ) {
					GlobalFuncs.to_chat( Task13.User, "You must wait " + GlobalVars.config.respawn_delay + " minutes to respawn!" );
					return;
				} else {
					GlobalFuncs.to_chat( Task13.User, "You can respawn now, enjoy your new life!" );
				}
			}
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + Task13.User.name + "/" + Task13.User.key + " used abandon mob." ) ) );
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'> <B>Make sure to play a different character, and please roleplay correctly!</B></span>" );

			if ( !( this.client != null ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + Task13.User.key + " AM failed due to disconnect." ) ) );
				return;
			}
			this.client.screen.len = 0;

			if ( !( this.client != null ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + Task13.User.key + " AM failed due to disconnect." ) ) );
				return;
			}
			M = new Mob_NewPlayer();

			if ( !( this.client != null ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + Task13.User.key + " AM failed due to disconnect." ) ) );
				GlobalFuncs.qdel( M );
				M = null;
				return;
			}
			M.key = this.key;
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Examine", group: "IC" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public virtual void examination( Ent_Static A = null ) {
			
			if ( this.is_blind(  ) ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>Something is there but you can't see it.</span>" );
				return;
			}
			this.face_atom( A );
			A.examine( this );
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Add Note", group: "IC" )]
		[VerbArg( 1, InputType.StrMultiline )]
		public virtual void add_memory( string msg = null ) {
			msg = String13.SubStr( msg, 1, 1024 );
			msg = GlobalFuncs.sanitize( msg );

			if ( this.mind != null ) {
				this.mind.store_memory( msg );
			} else {
				GlobalFuncs.to_chat( this, "The game appears to have misplaced your mind datum, so we can't show you your notes." );
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Notes", group: "IC" )]
		public virtual void f_memory(  ) {
			
			if ( this.mind != null ) {
				this.mind.show_memory( this );
			} else {
				GlobalFuncs.to_chat( this, "The game appears to have misplaced your mind datum, so we can't show you your notes." );
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Activate Held Object", group: "IC", access: VerbAccess.IsUser )]
		public virtual void mode(  ) {
			dynamic W = null;
			dynamic W2 = null;

			
			if ( this.attack_delayer.blocked() ) {
				return;
			}

			if ( this.loc is Obj_Mecha ) {
				return;
			}

			if ( this.hand == true ) {
				W = this.l_hand;

				if ( Lang13.Bool( W ) ) {
					((Obj_Item)W).attack_self( this );
					this.update_inv_l_hand();
				}
			} else {
				W2 = this.r_hand;

				if ( Lang13.Bool( W2 ) ) {
					((Obj_Item)W2).attack_self( this );
					this.update_inv_r_hand();
				}
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Stop Pulling", group: "IC" )]
		public void stop_pulling(  ) {
			
			if ( this.pulling != null ) {
				((dynamic)this.pulling).pulledby = null;
				this.pulling = null;
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Point To", group: "Object" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public virtual bool pointed( dynamic A = null ) {
			dynamic tile = null;
			Obj_Effect_Decal_Point point = null;

			
			if ( !( this != null ) || Task13.User.isUnconscious() || !( this.loc is Tile ) || !Map13.FetchInView( null, this.loc ).Contains( A ) ) {
				return false;
			}

			if ( A is Obj_Effect_Decal_Point ) {
				return false;
			}
			tile = GlobalFuncs.get_turf( A );

			if ( !Lang13.Bool( tile ) ) {
				return false;
			}
			point = new Obj_Effect_Decal_Point( tile );
			point.invisibility = this.invisibility;
			Task13.Schedule( 20, (Task13.Closure)(() => {
				
				if ( point != null ) {
					GlobalFuncs.qdel( point );
				}
				return;
			}));
			return true;
		}

		// Function from file: language.dm
		[Verb]
		[VerbInfo( name: "Check Known Languages", group: "IC", access: VerbAccess.IsUser )]
		public virtual void check_languages(  ) {
			string dat = null;
			Language L = null;

			dat = "<b><font size = 5>Known Languages</font></b><br/><br/>";

			foreach (dynamic _a in Lang13.Enumerate( this.languages, typeof(Language) )) {
				L = _a;
				
				dat += "<b>" + L.name + " (:" + L.key + ")</b><br/>" + L.desc + "<br/><br/>";
			}
			Interface13.Browse( this, dat, "window=checklanguage" );
			return;
		}

		// Function from file: voting.dm
		[Verb]
		[VerbInfo( name: "Vote", group: "OOC" )]
		public void vote(  ) {
			
			if ( GlobalVars.vote != null ) {
				
				if ( !GlobalVars.vote.initialized ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>The voting controller isn't fully initialized yet.</span>" );
				} else {
					GlobalVars.vote.interact( Task13.User.client );
				}
			}
			return;
		}

		// Function from file: pray.dm
		[Verb]
		[VerbInfo( name: "Pray", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public void pray( string msg = null ) {
			string orig_message = null;
			Image cross = null;
			dynamic C = null;

			
			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Speech is currently admin-disabled.</span>" );
				return;
			}
			msg = String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}

			if ( Task13.User.client != null ) {
				
				if ( ( Task13.User.client.prefs.muted & 4 ) != 0 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You cannot pray (muted).</span>" );
					return;
				}

				if ( this.client.handle_spam_prevention( msg, 4 ) ) {
					return;
				}
			}
			orig_message = msg;
			cross = new Image( "icons/obj/storage.dmi", "bible" );
			msg = new Txt( "<span class='notice'>" ).icon( cross ).str( " <b><font color='purple'>PRAY (DEITY:" ).item( GlobalVars.ticker.Bible_deity_name ).str( "): </font>" ).item( GlobalFuncs.key_name( this, 1 ) ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( this ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayeropts=" ).Ref( this ).str( "'>PP</A>) (<A HREF='?_src_=vars;Vars=" ).Ref( this ).str( "'>VV</A>) (<A HREF='?_src_=holder;subtlemessage=" ).Ref( this ).str( "'>SM</A>) (<A HREF='?_src_=holder;adminplayerobservejump=" ).Ref( this ).str( "'>JMP</A>) (<A HREF='?_src_=holder;secretsadmin=check_antagonist'>CA</A>) (<A HREF='?_src_=holder;adminspawncookie=" ).Ref( this ).str( "'>SC</a>):</b> " ).item( msg ).str( "</span>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.admins )) {
				C = _a;
				

				if ( !Lang13.Bool( ((dynamic)typeof(Client)).IsInstanceOfType( C ) ) ) {
					continue;
				}

				if ( Lang13.Bool( C.prefs.toggles & 256 ) ) {
					
					if ( Lang13.Bool( C.prefs.special_popup ) ) {
						Interface13.Output( C, msg, "window1.msay_output" );
					} else {
						GlobalFuncs.to_chat( C, msg );
					}
					GlobalFuncs.to_chat( C, "sound/effects/prayer.ogg" );
				}
			}

			if ( !Lang13.Bool( this.stat ) ) {
				Task13.User.__CallVerb("Whisper", orig_message );
			}
			GlobalFuncs.to_chat( Task13.User, "Your prayers have been received by the gods." );
			GlobalFuncs.feedback_add_details( "admin_verb", "PR" );
			return;
		}

		// Function from file: changeling_powers.dm
		[Verb]
		[VerbInfo( name: "(Mobs) Check Mob List", hidden: true )]
		public void check_mob_list(  ) {
			bool yes = false;
			dynamic M = null;
			dynamic M2 = null;

			yes = false;

			if ( GlobalVars.mob_list.Contains( this ) ) {
				yes = true;
			} else {
				M = Lang13.FindIn( this, GlobalVars.mob_list );

				if ( M == this ) {
					yes = true;
				}
			}
			GlobalFuncs.to_chat( Task13.User, "" + ( yes ? "<span class='good'>" : "<span class='bad'>" ) + " You are " + ( yes ? "" : "not " ) + "in the mob list</span>" );
			yes = false;

			if ( GlobalVars.living_mob_list.Contains( this ) ) {
				yes = true;
			} else {
				M2 = Lang13.FindIn( this, GlobalVars.living_mob_list );

				if ( M2 == this ) {
					yes = true;
				}
			}
			GlobalFuncs.to_chat( Task13.User, "" + ( yes ? "<span class='good'>" : "<span class='bad'>" ) + " You are " + ( yes ? "" : "not " ) + "in the living mob list</span>" );
			return;
		}

		// Function from file: skincmd.dm
		[Verb]
		[VerbInfo( hidden: true )]
		[VerbArg( 1, InputType.Str )]
		public void skincmd( string data = null ) {
			string _ref = null;
			Obj a = null;

			_ref = String13.SubStr( data, 1, String13.FindIgnoreCase( data, ";", 1, 0 ) );

			if ( this.skincmds[_ref] != null ) {
				a = this.skincmds[_ref];
				a.SkinCmd( this, String13.SubStr( data, String13.FindIgnoreCase( data, ";", 1, 0 ) + 1, 0 ) );
			}
			return;
		}

		// Function from file: hud.dm
		[Verb]
		[VerbInfo( name: "F12", hidden: true )]
		public void button_pressed_F12(  ) {
			
			if ( this.hud_used != null && this.client != null ) {
				
				if ( this is Mob_Living_Carbon_Human ) {
					
					if ( !( this.client != null ) ) {
						return;
					}

					if ( this.hud_used.hud_shown ) {
						this.hud_used.hud_shown = false;

						if ( this.hud_used.adding != null ) {
							this.client.screen.Remove( this.hud_used.adding );
						}

						if ( this.hud_used.other != null ) {
							this.client.screen.Remove( this.hud_used.other );
						}

						if ( this.hud_used.hotkeybuttons != null ) {
							this.client.screen.Remove( this.hud_used.hotkeybuttons );
						}

						if ( this.hud_used.item_action_list != null ) {
							this.client.screen.Remove( this.hud_used.item_action_list );
						}
						this.client.screen.Add( this.hud_used.l_hand_hud_object );
						this.client.screen.Add( this.hud_used.r_hand_hud_object );
						this.client.screen.Add( this.hud_used.action_intent );
						((dynamic)this.hud_used.action_intent).screen_loc = "EAST-1:28,SOUTH:5";
						this.client.screen.Remove( this.zone_sel );
					} else {
						this.hud_used.hud_shown = true;

						if ( this.hud_used.adding != null ) {
							this.client.screen.Add( this.hud_used.adding );
						}

						if ( this.hud_used.other != null && this.hud_used.inventory_shown ) {
							this.client.screen.Add( this.hud_used.other );
						}

						if ( this.hud_used.hotkeybuttons != null && !this.hud_used.hotkey_ui_hidden ) {
							this.client.screen.Add( this.hud_used.hotkeybuttons );
						}
						((dynamic)this.hud_used.action_intent).screen_loc = "EAST-2:26,SOUTH:5";
						this.client.screen.Add( this.zone_sel );
					}
					this.hud_used.hidden_inventory_update();
					this.hud_used.persistant_inventory_update();
					this.update_action_buttons();
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Inventory hiding is currently only supported for human mobs, sorry.</span>" );
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>This mob type does not use a HUD.</span>" );
			}
			return;
		}

	}

}