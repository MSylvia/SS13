// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon : Mob_Living {

		public bool dreaming = false;
		public int shock_stage = 0;
		public Image halimage = null;
		public Image halbody = null;
		public Obj halitem = null;
		public int hal_screwyhud = 0;
		public bool handling_hal = false;
		public bool hal_crit = false;
		public ByTable stomach_contents = new ByTable();
		public ByTable virus2 = new ByTable();
		public double? antibodies = 0;
		public bool last_eating = false;
		public int life_tick = 0;
		public int analgesic = 0;
		public int number_wounds = 0;
		public dynamic handcuffed = null;
		public dynamic legcuffed = null;
		public SurgeryStatus op_stage = new SurgeryStatus();
		public string pose = null;
		public int pulse = 3;
		public bool hasmouth = true;
		public _Event on_emote = new _Event();

		public Mob_Living_Carbon ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: carbon.dm
		public override bool can_use_hands(  ) {
			
			if ( Lang13.Bool( this.handcuffed ) ) {
				return false;
			}

			if ( Lang13.Bool( this.locked_to ) && !( this.locked_to is Obj_Structure_Bed_Chair ) ) {
				return false;
			}
			return true;
		}

		// Function from file: update_icons.dm
		public override void update_transform(  ) {
			Matrix final_transform = null;
			int final_pixel_y = 0;
			int final_dir = 0;

			
			if ( this.lying != this.lying_prev ) {
				final_transform = Num13.Matrix();
				final_pixel_y = this.pixel_y;
				final_dir = this.dir;

				if ( this.lying == false ) {
					final_pixel_y += 6;
				} else if ( this.lying_prev == false ) {
					final_pixel_y -= 6;
					final_transform.Turn( 90 );
				}

				if ( ( this.dir & 12 ) != 0 ) {
					final_dir = Convert.ToInt32( Rand13.Pick(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH }) );
				}
				this.lying_prev = this.lying;
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "transform", final_transform ).Set( "pixel_y", final_pixel_y ).Set( "dir", final_dir ).Set( "time", 2 ).Set( "easing", 192 ) );
			}
			return;
		}

		// Function from file: inventory.dm
		public override ByTable get_clothing_items( ByTable filter = null ) {
			ByTable equipped = null;

			equipped = base.get_clothing_items( filter );
			equipped.Remove( new ByTable(new object [] { this.handcuffed, this.legcuffed, this.back }) );
			return equipped;
		}

		// Function from file: inventory.dm
		public override ByTable get_all_slots(  ) {
			return new ByTable(new object [] { this.l_hand, this.r_hand, this.handcuffed, this.legcuffed, this.back, this.wear_mask });
		}

		// Function from file: inventory.dm
		public override dynamic get_item_by_slot( dynamic slot_id = null ) {
			
			dynamic _a = slot_id; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return this.back;
			} else if ( _a==2 ) {
				return this.wear_mask;
			} else if ( _a==3 ) {
				return this.handcuffed;
			} else if ( _a==19 ) {
				return this.legcuffed;
			} else if ( _a==4 ) {
				return this.l_hand;
			} else if ( _a==5 ) {
				return this.r_hand;
			}
			return null;
		}

		// Function from file: carbon.dm
		public override int CheckSlip(  ) {
			return !Lang13.Bool( this.locked_to ) && !( this.lying == true ) ?1:0;
		}

		// Function from file: carbon.dm
		public override bool html_mob_check( Type typepath = null ) {
			Ent_Dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.html_machines, typeof(Ent_Dynamic) )) {
				AM = _a;
				

				if ( typepath == AM.type ) {
					
					if ( this.Adjacent( AM ) ) {
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: carbon.dm
		public override Language get_default_language(  ) {
			
			if ( this.default_language != null ) {
				return this.default_language;
			}
			return null;
		}

		// Function from file: carbon.dm
		public override bool is_muzzled(  ) {
			return this.wear_mask is Obj_Item_Clothing_Mask_Muzzle;
		}

		// Function from file: carbon.dm
		public override void show_inv( dynamic user = null ) {
			bool has_breathable_mask = false;
			string TAB = null;
			string dat = null;
			Browser popup = null;

			((Mob)user).set_machine( this );
			has_breathable_mask = this.wear_mask is Obj_Item_Clothing_Mask;
			TAB = "&nbsp;&nbsp;&nbsp;&nbsp;";
			dat = "";

			if ( Lang13.Bool( this.handcuffed ) ) {
				dat += new Txt( "<BR><B>Handcuffed:</B> <A href='?src=" ).Ref( this ).str( ";item=handcuff'>Remove</A>" ).ToString();
			} else {
				dat += new Txt( "\n		<B>Left Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=l_hand'>		" ).item( ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.v_abstract ) ? this.l_hand : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A><BR>\n		<B>Right Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=r_hand'>		" ).item( ( Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.v_abstract ) ? this.r_hand : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A><BR>\n		" ).ToString();
			}
			dat += new Txt( "<BR><B>Back:</B> <A href='?src=" ).Ref( this ).str( ";item=back'> " ).item( ( Lang13.Bool( this.back ) && !Lang13.Bool( this.back.v_abstract ) ? this.back : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

			if ( has_breathable_mask && this.back is Obj_Item_Weapon_Tank ) {
				dat += new Txt( "<BR>" ).item( TAB ).str( "&#8627;<A href='?src=" ).Ref( this ).str( ";item=internal'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
			}
			dat += "<BR>";
			dat += new Txt( "<BR><B>Mask:</B> <A href='?src=" ).Ref( this ).str( ";item=mask'>		" ).item( ( Lang13.Bool( this.wear_mask ) && !Lang13.Bool( this.wear_mask.v_abstract ) ? this.wear_mask : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();
			dat += new Txt( "\n	<BR>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).Ref( this ).str( "'>Close</A>\n	" ).ToString();
			popup = new Browser( user, new Txt( "mob" ).Ref( this ).ToString(), "" + this, 340, 500 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: carbon.dm
		public override bool u_equip( dynamic W = null, bool? dropped = null ) {
			dropped = dropped ?? true;

			bool success = false;

			success = false;

			if ( !Lang13.Bool( W ) ) {
				return false;
			} else if ( W == this.handcuffed ) {
				this.handcuffed = null;
				success = true;
				this.update_inv_handcuffed();
			} else if ( W == this.legcuffed ) {
				this.legcuffed = null;
				success = true;
				this.update_inv_legcuffed();
			} else {
				base.u_equip( (object)(W), dropped );
			}

			if ( success ) {
				
				if ( Lang13.Bool( W ) ) {
					
					if ( this.client != null ) {
						this.client.screen.Remove( W );
					}

					if ( dropped == true ) {
						W.loc = this.loc;
						((Obj_Item)W).dropped( this );
					}

					if ( Lang13.Bool( W ) ) {
						W.layer = Lang13.Initial( W, "layer" );
					}
				}
			}
			return false;
		}

		// Function from file: carbon.dm
		public override bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				return true;
			}
			return false;
		}

		// Function from file: carbon.dm
		public override void throw_item( Ent_Static target = null, Obj_Item what = null ) {
			dynamic item = null;
			dynamic offhand = null;
			dynamic G = null;
			dynamic start_T = null;
			dynamic end_T = null;
			dynamic M = null;
			string start_T_descriptor = null;
			string end_T_descriptor = null;
			dynamic I = null;
			Ent_Static space_obj = null;
			Ent_Static Ho = null;
			double throw_mult = 0;
			Mob_Living_Carbon H = null;

			this.throw_mode_off();

			if ( Lang13.Bool( Task13.User.stat ) || !( target != null ) ) {
				return;
			}

			if ( !( this.loc is Tile ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You can't do that now!</span>" );
				return;
			}

			if ( target.type == typeof(Obj_Screen) ) {
				return;
			}
			item = this.get_active_hand();

			if ( what != null ) {
				item = what;
			}

			if ( !Lang13.Bool( item ) ) {
				return;
			}

			if ( item is Obj_Item_Offhand ) {
				offhand = item;

				if ( offhand.wielding != null ) {
					this.throw_item( target, offhand.wielding );
					return;
				}
			}

			if ( item is Obj_Item_Weapon_Grab ) {
				G = item;
				item = ((Obj_Item_Weapon_Grab)G).toss();

				if ( item is Mob ) {
					start_T = GlobalFuncs.get_turf( this.loc );
					end_T = GlobalFuncs.get_turf( target );

					if ( Lang13.Bool( start_T ) && Lang13.Bool( end_T ) ) {
						M = item;
						start_T_descriptor = "<font color='#6b5d00'>tile at " + start_T.x + ", " + start_T.y + ", " + start_T.z + " in area " + GlobalFuncs.get_area( start_T ) + "</font>";
						end_T_descriptor = "<font color='#6b4400'>tile at " + end_T.x + ", " + end_T.y + ", " + end_T.z + " in area " + GlobalFuncs.get_area( end_T ) + "</font>";
						M.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been thrown by " + Task13.User.name + " (" + Task13.User.ckey + ") from " + start_T_descriptor + " with the target " + end_T_descriptor + "</font>" );
						Task13.User.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Has thrown " + M.name + " (" + M.ckey + ") from " + start_T_descriptor + " with the target " + end_T_descriptor + "</font>" );
						GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User.name + " (" + Task13.User.ckey + ") Has thrown " + M.name + " (" + M.ckey + ") from " + start_T_descriptor + " with the target " + end_T_descriptor + "</font>" ) ) );

						if ( !( Task13.User is Mob_Living_Carbon ) ) {
							M.LAssailant = null;
						} else {
							M.LAssailant = Task13.User;
						}
						GlobalFuncs.returnToPool( G );
					}
				}
			}

			if ( !Lang13.Bool( item ) ) {
				return;
			}
			I = item;

			if ( I is Obj_Item && I.cant_drop > 0 ) {
				Task13.User.WriteMsg( "<span class='warning'>It's stuck to your hand!</span>" );
				return;
			}
			this.remove_from_mob( item );

			if ( Lang13.Bool( item ) ) {
				((Ent_Dynamic)item).forceMove( GlobalFuncs.get_turf( this ) );
				this.visible_message( "<span class='warning'>" + this + " has thrown " + item + ".</span>", null, null, "<span class='warning'>" + item + " escapes from " + this + "'s grasp and flies away!</span>" );

				if ( this.loc is Tile_Space || Lang13.Bool( this.areaMaster ) && this.areaMaster.has_gravity == false ) {
					space_obj = this;

					if ( this.loc is Obj_Item_Weapon_Holder ) {
						Ho = this.loc;

						if ( Ho.loc is Mob ) {
							space_obj = Ho.loc;
						}
					}
					((dynamic)space_obj).inertia_dir = Map13.GetDistance( target, this );
					Map13.Step( (Ent_Dynamic)(space_obj), this.inertia_dir ??0 );
				}
				throw_mult = 1;

				if ( this is Mob_Living_Carbon_Human ) {
					H = this;
					throw_mult = ((dynamic)H).species.throw_mult;

					if ( H.mutations.Contains( ((dynamic)( H.mutations != null || 202 != 0 )).Contains( 4 ) ) ) {
						throw_mult += 0.5;
					}
				}
				((Ent_Dynamic)item).throw_at( target, ( item.throw_range ??0) * throw_mult, item.throw_speed * throw_mult );
			}
			return;
		}

		// Function from file: carbon.dm
		public override bool clean_blood( dynamic clean_feet = null ) {
			bool _default = false;

			Mob_Living_Carbon H = null;

			_default = base.clean_blood( (object)(clean_feet) );

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				if ( Lang13.Bool( ((dynamic)H).gloves ) ) {
					
					if ( ((Ent_Static)((dynamic)H).gloves).clean_blood() ) {
						H.update_inv_gloves( false );
					}
					((dynamic)H).gloves.germ_level = 0;
				} else {
					
					if ( Lang13.Bool( H.bloody_hands ) ) {
						H.bloody_hands = 0;
						H.update_inv_gloves( false );
					}
					H.germ_level = 0;
				}
			}
			this.update_icons();
			return _default;
		}

		// Function from file: carbon.dm
		public override dynamic electrocute_act( dynamic shock_damage = null, dynamic source = null, double? base_siemens_coeff = null, bool? def_zone = null ) {
			base_siemens_coeff = base_siemens_coeff ?? 1;

			dynamic damage = null;
			Effect_Effect_System_SparkSpread SparkSpread = null;

			damage = shock_damage * base_siemens_coeff;

			if ( Convert.ToDouble( damage ) <= 0 ) {
				damage = 0;
			}

			if ( !this.take_overall_damage( 0, damage, "" + source ) ) {
				return 0;
			}
			this.visible_message( "<span class='warning'>" + this + " was shocked by the " + source + "!</span>", "<span class='danger'>You feel a powerful shock course through your body!</span>", "<span class='warning'>You hear a heavy electrical crack.</span>", "<span class='notice'>" + this + " starts raving!</span>", "<span class='notice'>You feel butterflies in your stomach!</span>", "<span class='warning'>You hear a policeman whistling!</span>" );
			this.Stun( 10 );
			this.Weaken( 10 );
			SparkSpread = new Effect_Effect_System_SparkSpread();
			SparkSpread.set_up( 5, 1, this.loc );
			SparkSpread.start();
			return damage;
		}

		// Function from file: carbon.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Mob_Living_Carbon ) ) {
				return null;
			}
			this.share_contact_diseases( a );
			return null;
		}

		// Function from file: carbon.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Organ_External temp = null;

			
			if ( !( a is Mob_Living_Carbon ) ) {
				return null;
			}

			if ( GlobalFuncs.hasorgans( a ) ) {
				temp = a.organs_by_name["r_hand"];

				if ( a.hand == true ) {
					temp = a.organs_by_name["l_hand"];
				}

				if ( temp != null && !temp.is_usable() ) {
					GlobalFuncs.to_chat( a, "<span class='warning'>You can't use your " + temp.display_name + "</span>" );
					return null;
				}
			}
			this.share_contact_diseases( a );
			return null;
		}

		// Function from file: carbon.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			dynamic _default = null;

			dynamic M = null;
			dynamic N = null;

			this.dropBorers( true );

			foreach (dynamic _b in Lang13.Enumerate( this )) {
				M = _b;
				

				if ( this.stomach_contents.Contains( M ) ) {
					this.stomach_contents.Remove( M );
				}
				M.loc = this.loc;

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					N = _a;
					

					if ( Lang13.Bool( N.client ) ) {
						N.show_message( "<span class='danger'>" + M + " bursts out of " + this + "!</span>", 2 );
					}
				}
			}
			_default = base.gib( animation, meat );
			return _default;
		}

		// Function from file: carbon.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			dynamic M2 = null;
			dynamic I = null;
			double? d = null;
			Mob_Living_Carbon H = null;
			dynamic organ = null;
			dynamic temp = null;
			dynamic M3 = null;
			Ent_Dynamic A = null;

			
			if ( this.stomach_contents.Contains( M ) ) {
				
				if ( Rand13.PercentChance( 40 ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( this, 4 ) )) {
						M2 = _a;
						

						if ( Lang13.Bool( M2.client ) ) {
							M2.show_message( "<span class='warning'>You hear something rumbling inside " + this + "'s stomach...</span>", 2 );
						}
					}
					I = M.get_active_hand();

					if ( Lang13.Bool( I ) && Lang13.Bool( I.force ) ) {
						d = Rand13.Int( Num13.Floor( Convert.ToDouble( I.force / 4 ) ), Convert.ToInt32( I.force ) );

						if ( this is Mob_Living_Carbon_Human ) {
							H = this;
							organ = ((dynamic)H).get_organ( "chest" );

							if ( organ is Organ_External ) {
								temp = organ;

								if ( Lang13.Bool( temp.take_damage( d, 0 ) ) ) {
									H.UpdateDamageIcon();
								}
							}
							H.updatehealth();
						} else {
							this.take_organ_damage( d );
						}

						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, M ) )) {
							M3 = _b;
							

							if ( Lang13.Bool( M3.client ) ) {
								M3.show_message( "<span class='warning'><B>" + M + " attacks " + this + "'s stomach wall with the " + I.name + "!</span>", 2 );
							}
						}
						GlobalFuncs.playsound( M.loc, "sound/effects/attackblob.ogg", 50, 1 );

						if ( Rand13.PercentChance( ((int)( this.getBruteLoss() - 50 )) ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( this.stomach_contents, typeof(Ent_Dynamic) )) {
								A = _c;
								
								A.loc = this.loc;
								this.stomach_contents.Remove( A );
							}
							this.gib();
						}
					}
				}
			}
			return null;
		}

		// Function from file: carbon.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			int damage = 0;
			dynamic dam_zone = null;
			dynamic affecting = null;

			
			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				user.emote( "" + ((dynamic)user).friendly + " " + this );
			} else {
				
				if ( Lang13.Bool( ((dynamic)user).attack_sound ) ) {
					GlobalFuncs.playsound( this.loc, ((dynamic)user).attack_sound, 50, 1, 1 );
				}
				this.visible_message( new Txt( "<span class='warning'><B>" ).item( user ).str( "</B> " ).item( ((dynamic)user).attacktext ).str( " " ).the( this ).item().str( " !</span>" ).ToString() );
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>attacked " + this.name + " (" + this.ckey + ")</font>" );
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>was attacked by " + user.name + " (" + user.ckey + ")</font>" );
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );
				dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });

				if ( user.zone_sel != null && Lang13.Bool( ((dynamic)user.zone_sel).selecting ) ) {
					dam_zone = ((dynamic)user.zone_sel).selecting;
				}
				affecting = GlobalFuncs.ran_zone( dam_zone );
				this.apply_damage( damage, ((dynamic)user).melee_damage_type, affecting );
				this.updatehealth();
			}
			return null;
		}

		// Function from file: carbon.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;

			bool _default = false;

			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( _default ) {
				
				if ( this.nutrition != 0 && this.stat != 2 ) {
					this.burn_calories( 0.0075 );

					if ( this.m_intent == "run" ) {
						this.burn_calories( 0.0075 );
					}
				}
				this.update_minimap();
			}
			return _default;
		}

		// Function from file: carbon.dm
		public override dynamic Bump(Ent_Static Obstacle = null, dynamic yes = null) {
			
			if ( this.now_pushing || !Lang13.Bool( yes ) ) {
				return null;
			}
			base.Bump( Obstacle );

			if ( Obstacle is Mob_Living_Carbon && Rand13.PercentChance( 10 ) ) {
				this.spread_disease_to( Obstacle, "Contact" );
			}
			return null;
		}

		// Function from file: carbon.dm
		public override dynamic Login(  ) {
			base.Login();
			this.update_hud();
			return null;
		}

		// Function from file: transform_procs.dm
		public override Mob_Living_Silicon_Ai AIize(  ) {
			Obj_Item W = null;

			
			if ( this.monkeyizing ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.drop_from_inventory( W );
			}
			this.dropBorers();
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.delayNextAttack( 50 );
			return base.AIize();
		}

		// Function from file: wildwest.dm
		[VerbInfo( name: "Resurrection", group: "Immortality" )]
		public bool immortality(  ) {
			Mob C = null;

			C = Task13.User;

			if ( !Lang13.Bool( C.stat ) ) {
				GlobalFuncs.to_chat( C, "<span class='notice'>You're not dead yet!</span>" );
				return false;
			}
			GlobalFuncs.to_chat( C, "<span class='notice'>Death is not your end!</span>" );
			Task13.Schedule( Rand13.Int( 800, 1200 ), (Task13.Closure)(() => {
				
				if ( C.stat == 2 ) {
					this.resurrect();
				}
				C.stat = 0;
				((dynamic)C).tod = null;
				((Mob_Living)C).setToxLoss( 0 );
				((Mob_Living)C).setOxyLoss( 0 );
				((Mob_Living)C).setCloneLoss( 0 );
				C.SetParalysis( 0 );
				C.SetStunned( false );
				C.SetWeakened( 0 );
				C.radiation = 0;
				((Mob_Living)C).heal_overall_damage( ((Mob_Living)C).getBruteLoss(), ((Mob_Living)C).getFireLoss() );
				((Reagents)C.reagents).clear_reagents();
				GlobalFuncs.to_chat( C, "<span class='notice'>You have regenerated.</span>" );
				C.visible_message( "<span class='warning'>" + Task13.User + " appears to wake from the dead, having healed all wounds.</span>" );
				C.update_canmove();
				return;
			}));
			return true;
		}

		// Function from file: helpers.dm
		public string spread_disease_to( Obj victim = null, string vector = null ) {
			vector = vector ?? "Airborne";

			dynamic ID = null;
			Disease2_Disease V = null;
			bool nudity = false;
			Obj H = null;
			dynamic select_area = null;
			ByTable clothes = null;
			Obj_Item_Clothing C = null;
			dynamic ID2 = null;
			Disease2_Disease V2 = null;

			
			if ( this == victim ) {
				return "retardation";
			}

			if ( this.virus2.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.virus2 )) {
					ID = _a;
					
					GlobalFuncs.log_debug( "Attempting virus " + ID );
					V = this.virus2[ID];

					if ( V.spreadtype != vector ) {
						continue;
					}

					if ( vector == "Airborne" ) {
						
						if ( GlobalFuncs.airborne_can_reach( GlobalFuncs.get_turf( this ), GlobalFuncs.get_turf( victim ) ) ) {
							GlobalFuncs.infect_virus2( victim, V, null, "(Airborne, from " + GlobalFuncs.key_name( this ) + ")" );
						}
					}

					if ( vector == "Contact" ) {
						
						if ( this.Adjacent( victim ) ) {
							GlobalFuncs.infect_virus2( victim, V, null, "(Contact with " + GlobalFuncs.key_name( this ) + ")" );
						}
					}
				}
			}

			if ( ((dynamic)victim).virus2.len > 0 && vector == "Contact" ) {
				nudity = true;

				if ( victim is Mob_Living_Carbon_Human ) {
					H = victim;
					select_area = ((dynamic)H).get_organ( ((dynamic)this.zone_sel).selecting );
					clothes = new ByTable(new object [] { ((dynamic)H).head, ((dynamic)H).wear_mask, ((dynamic)H).wear_suit, ((dynamic)H).w_uniform, ((dynamic)H).gloves, ((dynamic)H).shoes });

					foreach (dynamic _b in Lang13.Enumerate( clothes, typeof(Obj_Item_Clothing) )) {
						C = _b;
						

						if ( C != null && C is Obj_Item_Clothing ) {
							
							if ( Lang13.Bool( C.body_parts_covered & select_area.body_part ) ) {
								nudity = false;
							}
						}
					}
				}

				if ( nudity ) {
					
					foreach (dynamic _c in Lang13.Enumerate( ((dynamic)victim).virus2 )) {
						ID2 = _c;
						
						V2 = ((dynamic)victim).virus2[ID2];

						if ( V2 != null && V2.spreadtype != vector ) {
							continue;
						}
						GlobalFuncs.infect_virus2( this, V2, null, "(Contact with " + GlobalFuncs.key_name( victim ) + ")" );
					}
				}
			}
			return null;
		}

		// Function from file: pain.dm
		[VerbInfo( name: "pain" )]
		public void f_pain( string partname = null, int amount = 0, bool force = false, bool? burning = null ) {
			burning = burning ?? false;

			string msg = null;

			
			if ( ( this.stat ??0) >= 2 ) {
				return;
			}

			if ( ((Reagents)this.reagents).has_reagent( "paracetamol" ) ) {
				return;
			}

			if ( ((Reagents)this.reagents).has_reagent( "tramadol" ) ) {
				return;
			}

			if ( ((Reagents)this.reagents).has_reagent( "oxycodone" ) ) {
				return;
			}

			if ( this.analgesic != 0 ) {
				return;
			}

			if ( Game13.time < this.next_pain_time && !force ) {
				return;
			}

			if ( amount > 50 && Rand13.PercentChance( ((int)( amount / 5 )) ) ) {
				this.drop_item();
			}

			if ( burning == true ) {
				
				dynamic _a = amount; // Was a switch-case, sorry for the mess.
				if ( 1<=_a&&_a<=10 ) {
					msg = "<span class='danger'>Your " + partname + " burns.</span>";
				} else if ( 11<=_a&&_a<=90 ) {
					this.flash_weak_pain();
					msg = "<span class='danger'><font size=2>Your " + partname + " burns badly!</font></span>";
				} else if ( 91<=_a&&_a<=10000 ) {
					this.flash_pain();
					msg = "<span class='danger'><font size=3>OH GOD! Your " + partname + " is on fire!</font></span>";
				}
			} else {
				
				dynamic _b = amount; // Was a switch-case, sorry for the mess.
				if ( 1<=_b&&_b<=10 ) {
					msg = "<b>Your " + partname + " hurts.</b>";
				} else if ( 11<=_b&&_b<=90 ) {
					this.flash_weak_pain();
					msg = "<b><font size=2>Your " + partname + " hurts badly.</font></b>";
				} else if ( 91<=_b&&_b<=10000 ) {
					this.flash_pain();
					msg = "<b><font size=3>OH GOD! Your " + partname + " is hurting terribly!</font></b>";
				}
			}

			if ( Lang13.Bool( msg ) && ( msg != this.last_pain_message || Rand13.PercentChance( 10 ) ) ) {
				this.last_pain_message = msg;
				GlobalFuncs.to_chat( this, msg );
			}
			this.next_pain_time = Game13.time + ( 100 - amount );
			return;
		}

		// Function from file: blood.dm
		public dynamic get_blood( dynamic container = null ) {
			dynamic res = null;
			Reagent_Blood D = null;

			res = Lang13.FindIn( typeof(Reagent_Blood), container.reagent_list );

			if ( Lang13.Bool( res ) ) {
				
				if ( res.data["donor"] != this ) {
					
					foreach (dynamic _a in Lang13.Enumerate( container.reagent_list, typeof(Reagent_Blood) )) {
						D = _a;
						

						if ( D.data["donor"] == this ) {
							return D;
						}
					}
				}
			}
			return res;
		}

		// Function from file: blood.dm
		public virtual void inject_blood( Ent_Static container = null, dynamic amount = null ) {
			dynamic injected = null;
			ByTable chems = null;
			dynamic C = null;

			injected = this.get_blood( container.reagents );

			if ( !Lang13.Bool( injected ) ) {
				return;
			}
			this.virus2.Or( GlobalFuncs.virus_copylist( injected.data["virus2"] ) );

			if ( Lang13.Bool( injected.data["antibodies"] ) && Rand13.PercentChance( 5 ) ) {
				this.antibodies = ((int)( this.antibodies )) | ( Convert.ToInt32( injected.data["antibodies"] ) );
			}
			chems = new ByTable();
			chems = String13.ParseUrlParams( injected.data["trace_chem"] );

			foreach (dynamic _a in Lang13.Enumerate( chems )) {
				C = _a;
				
				((Reagents)this.reagents).add_reagent( C, ( String13.ParseNumber( chems[C] ) ??0) / 560 * Convert.ToDouble( amount ) );
			}
			((Reagents)this.reagents).update_total();
			((Reagents)container.reagents).remove_reagent( "blood", amount );
			return;
		}

		// Function from file: blood.dm
		public virtual dynamic take_blood( Obj_Item_Device_MassSpectrometer container = null, dynamic amount = null ) {
			dynamic B = null;
			Mob_Living_Carbon H = null;
			ByTable temp_chem = null;
			Reagent R = null;

			B = ( container != null ? this.get_blood( container.reagents ) : null );

			if ( !Lang13.Bool( B ) ) {
				B = new Reagent_Blood();
			}
			B.holder = ( container != null ? container.reagents : null );
			B.volume += amount;
			B.data["donor"] = this;

			if ( !Lang13.Bool( B.data["virus2"] ) ) {
				B.data["virus2"] = new ByTable();
			}
			B.data["virus2"] |= GlobalFuncs.virus_copylist( this.virus2 );
			B.data["antibodies"] = this.antibodies;
			B.data["blood_DNA"] = String13.SubStr( this.dna.unique_enzymes, 1, 0 );

			if ( this.resistances != null && this.resistances.len != 0 ) {
				
				if ( Lang13.Bool( B.data["resistances"] ) ) {
					B.data["resistances"] |= this.resistances.Copy();
				} else {
					B.data["resistances"] = this.resistances.Copy();
				}
			}
			B.data["blood_type"] = String13.SubStr( this.dna.b_type, 1, 0 );

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;
				B.data["blood_colour"] = ((dynamic)H).species.blood_color;
				B.color = B.data["blood_colour"];
			}
			temp_chem = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
				R = _a;
				
				temp_chem.Add( R.id );
				temp_chem[R.id] = R.volume;
			}
			B.data["trace_chem"] = String13.MakeUrlParams( temp_chem );
			return B;
		}

		// Function from file: shock.dm
		public virtual bool handle_shock(  ) {
			this.updateshock();
			return false;
		}

		// Function from file: shock.dm
		public dynamic updateshock(  ) {
			Mob_Living_Carbon M = null;
			Organ_External organ = null;

			this.traumatic_shock = this.getOxyLoss() + this.getToxLoss() * 061 + this.getFireLoss() * 1.5 + this.getBruteLoss() * 1.2 + this.getCloneLoss() * 1.7 + this.halloss * 2;

			if ( ((Reagents)this.reagents).has_reagent( "alkysine" ) ) {
				this.traumatic_shock -= 10;
			}

			if ( ((Reagents)this.reagents).has_reagent( "inaprovaline" ) ) {
				this.traumatic_shock -= 25;
			}

			if ( ((Reagents)this.reagents).has_reagent( "synaptizine" ) ) {
				this.traumatic_shock -= 40;
			}

			if ( ((Reagents)this.reagents).has_reagent( "paracetamol" ) ) {
				this.traumatic_shock -= 50;
			}

			if ( ((Reagents)this.reagents).has_reagent( "tramadol" ) ) {
				this.traumatic_shock -= 80;
			}

			if ( ((Reagents)this.reagents).has_reagent( "oxycodone" ) ) {
				this.traumatic_shock -= 200;
			}

			if ( this.slurring != 0 ) {
				this.traumatic_shock -= 20;
			}

			if ( this.analgesic != 0 ) {
				this.traumatic_shock = 0;
			}

			if ( this is Mob_Living_Carbon_Human ) {
				M = this;

				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)M).organs, typeof(Organ_External) )) {
					organ = _a;
					

					if ( !( organ != null ) ) {
						continue;
					}

					if ( ( organ.status & 64 ) != 0 && !organ.amputated ) {
						this.traumatic_shock += 60;
					} else if ( ( organ.status & 32 ) != 0 || organ.open != 0 ) {
						this.traumatic_shock += 30;

						if ( ( organ.status & 256 ) != 0 ) {
							this.traumatic_shock -= 25;
						}
					}
				}
			}

			if ( Convert.ToDouble( this.traumatic_shock ) < 0 ) {
				this.traumatic_shock = 0;
			}
			return this.traumatic_shock;
		}

		// Function from file: give.dm
		public void give_item( Mob user = null ) {
			dynamic I = null;

			
			if ( this.stat == 2 || user.stat == 2 || this.client == null ) {
				return;
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Those hands are cuffed right now.</span>" );
				return;
			}

			if ( user.get_active_hand() == null ) {
				GlobalFuncs.to_chat( user, "You don't have anything in your " + ( user.hand == true ? "left hand" : "right hand" ) + " to give to " + this + "." );
				return;
			}
			I = user.get_active_hand();

			if ( !Lang13.Bool( I ) ) {
				return;
			}

			if ( this == user ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You tried to give yourself " ).the( I ).item().str( ", but you didn't want it.</span>" ).ToString() );
				return;
			}

			if ( this.r_hand == null || this.l_hand == null ) {
				
				switch ((string)( Interface13.Alert( this, new Txt().item( user ).str( " wants to give you " ).a( I ).item().str( "?" ).ToString(), null, "Yes", "No" ) )) {
					case "Yes":
						
						if ( !Lang13.Bool( I ) ) {
							return;
						}

						if ( !this.Adjacent( user ) ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>You need to stay still while giving an object.</span>" );
							GlobalFuncs.to_chat( this, "<span class='warning'>" + user + " moved away.</span>" );
							return;
						}

						if ( user.get_active_hand() != I ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>You need to keep the item in your hand.</span>" );
							GlobalFuncs.to_chat( this, new Txt( "<span class='warning'>" ).item( user ).str( " has put " ).the( I ).item().str( " away!</span>" ).ToString() );
							return;
						}

						if ( this.r_hand != null && this.l_hand != null ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>Your hands are full.</span>" );
							GlobalFuncs.to_chat( user, "<span class='warning'>Their hands are full.</span>" );
							return;
						}

						if ( !user.drop_item( I ) ) {
							this.WriteMsg( new Txt( "<span class='warning'>" ).item( user ).str( " can't let go of " ).the( I ).item().str( "!</span>" ).ToString() );
							user.WriteMsg( new Txt( "<span class='warning'>You can't seem to let go of " ).the( I ).item().str( ".</span>" ).ToString() );
							return;
						}
						this.put_in_hands( I );
						this.visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " handed " ).the( I ).item().str( " to " ).item( this ).str( ".</span>" ).ToString() );
						break;
					case "No":
						this.visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " tried to hand " ).the( I ).item().str( " to " ).item( this ).str( " but " ).he_she_it_they().str( " didn't want it.</span>" ).ToString() );
						break;
				}
			} else {
				GlobalFuncs.to_chat( user, "<span class='warning'>" + this + "'s hands are full.</span>" );
			}
			return;
		}

		// Function from file: carbon.dm
		public void transferBorers( dynamic target = null ) {
			dynamic B = null;
			dynamic C = null;

			B = this.has_brain_worms();

			if ( Lang13.Bool( B ) ) {
				((Mob_Living_SimpleAnimal_Borer)B).detach();

				if ( target is Mob_Living_Carbon ) {
					C = target;
					((Mob_Living_SimpleAnimal_Borer)B).perform_infestation( C );
				} else {
					GlobalFuncs.to_chat( B, "<span class='notice'>You're forcefully popped out of your host!</span>" );
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public void dropBorers( bool? gibbed = null ) {
			dynamic B = null;

			B = this.has_brain_worms();

			if ( Lang13.Bool( B ) ) {
				((Mob_Living_SimpleAnimal_Borer)B).detach();

				if ( gibbed == true ) {
					GlobalFuncs.to_chat( B, "<span class='danger'>As your host is violently destroyed, so are you!</span>" );
					((Mob)B).ghostize( false );
					GlobalFuncs.qdel( B );
				} else {
					GlobalFuncs.to_chat( B, "<span class='notice'>You're forcefully popped out of your host!</span>" );
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public void transferImplantsTo( dynamic newmob = null ) {
			Obj_Item_Weapon_Implant I = null;
			dynamic H = null;
			Organ_External affected = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Implant) )) {
				I = _b;
				
				I.loc = newmob;
				I.implanted = true;
				I.imp_in = newmob;

				if ( newmob is Mob_Living_Carbon_Human ) {
					H = newmob;

					if ( !Lang13.Bool( I.part ) ) {
						I.part = typeof(Organ_External_Chest);
					}

					foreach (dynamic _a in Lang13.Enumerate( H.organs, typeof(Organ_External) )) {
						affected = _a;
						

						if ( !Lang13.Bool( I.part.IsInstanceOfType( affected ) ) ) {
							continue;
						}
						affected.implants.Add( I );
					}
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public bool Slip( double stun_amount = 0, int weaken_amount = 0, bool? slip_on_walking = null ) {
			slip_on_walking = slip_on_walking ?? false;

			
			if ( !( slip_on_walking == true ) && this.m_intent == "walk" ) {
				return false;
			}

			if ( this.CheckSlip() < 1 || !this.on_foot() ) {
				return false;
			}
			this.stop_pulling();
			this.Stun( stun_amount );
			this.Weaken( weaken_amount );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/misc/slip.ogg", 50, 1, -3 );
			return true;
		}

		// Function from file: carbon.dm
		public bool isInCrit(  ) {
			return Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_crit ) && this.stat != 2;
		}

		// Function from file: carbon.dm
		[VerbInfo( name: "Torment host", desc: "Punish your host with agony.", group: "Alien" )]
		public void punish_host(  ) {
			dynamic B = null;

			B = this.has_brain_worms();

			if ( !Lang13.Bool( B ) ) {
				return;
			}

			if ( Lang13.Bool( B.host_brain.ckey ) ) {
				GlobalFuncs.to_chat( this, "<span class='danger'>You send a punishing spike of psychic agony lancing into your host's brain.</span>" );
				GlobalFuncs.to_chat( B.host_brain, "<span class='danger'><FONT size=3>Horrific, burning agony lances through you, ripping a soundless scream from your trapped mind!</FONT></span>" );
			}
			return;
		}

		// Function from file: carbon.dm
		public void do_release_control( bool? rptext = null ) {
			rptext = rptext ?? true;

			dynamic B = null;

			B = this.has_brain_worms();

			if ( !Lang13.Bool( B ) ) {
				return;
			}

			if ( B.controlling ) {
				
				if ( rptext == true ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>You withdraw your probosci, releasing control of " + B.host_brain + "</span>" );
					GlobalFuncs.to_chat( B.host_brain, "<span class='danger'>Your vision swims as the alien parasite releases control of your body.</span>" );
				}
				B.ckey = this.ckey;
				B.controlling = false;
			}

			if ( Lang13.Bool( B.host_brain.ckey ) ) {
				this.ckey = B.host_brain.ckey;
				B.host_brain.ckey = null;
				B.host_brain.name = "host brain";
				B.host_brain.real_name = "host brain";
			}
			this.verbs.Remove( typeof(Mob_Living_Carbon).GetMethod( "release_control" ) );
			this.verbs.Remove( typeof(Mob_Living_Carbon).GetMethod( "punish_host" ) );
			return;
		}

		// Function from file: carbon.dm
		[VerbInfo( name: "Release Control", desc: "Release control of your host's body.", group: "Alien" )]
		public void release_control(  ) {
			this.do_release_control( false );
			return;
		}

		// Function from file: carbon.dm
		public string get_pulse( bool method = false ) {
			int temp = 0;

			temp = 0;

			switch ((int)( this.pulse )) {
				case 0:
					return "0";
					break;
				case 1:
					temp = Rand13.Int( 20, 40 );
					return String13.NumberToString( ( method ? temp : temp + Rand13.Int( -10, 10 ) ) );
					break;
				case 2:
					temp = Rand13.Int( 40, 60 );
					return String13.NumberToString( ( method ? temp : temp + Rand13.Int( -10, 10 ) ) );
					break;
				case 3:
					temp = Rand13.Int( 60, 90 );
					return String13.NumberToString( ( method ? temp : temp + Rand13.Int( -10, 10 ) ) );
					break;
				case 4:
					temp = Rand13.Int( 90, 120 );
					return String13.NumberToString( ( method ? temp : temp + Rand13.Int( -10, 10 ) ) );
					break;
				case 5:
					temp = Rand13.Int( 120, 160 );
					return String13.NumberToString( ( method ? temp : temp + Rand13.Int( -10, 10 ) ) );
					break;
				case 6:
					return ( method ? ">250" : "extremely weak and fast, patient's artery feels like a thread" );
					break;
			}
			return null;
		}

		// Function from file: carbon.dm
		public void throw_mode_on(  ) {
			
			if ( Lang13.Bool( this.gcDestroyed ) ) {
				return;
			}
			this.in_throw_mode = true;
			((dynamic)this.throw_icon).icon_state = "act_throw_on";
			return;
		}

		// Function from file: carbon.dm
		public void throw_mode_off(  ) {
			this.in_throw_mode = false;
			((dynamic)this.throw_icon).icon_state = "act_throw_off";
			return;
		}

		// Function from file: carbon.dm
		public void toggle_throw_mode(  ) {
			
			if ( this.in_throw_mode ) {
				this.throw_mode_off();
			} else {
				this.throw_mode_on();
			}
			return;
		}

		// Function from file: carbon.dm
		public virtual void setDNA( dynamic newDNA = null ) {
			this.dna = newDNA;
			return;
		}

		// Function from file: carbon.dm
		public virtual Dna getDNA(  ) {
			return this.dna;
		}

		// Function from file: carbon.dm
		public virtual int eyecheck(  ) {
			return 0;
		}

		// Function from file: carbon.dm
		public void help_shake_act( dynamic M = null ) {
			Mob_Living_Carbon H = null;
			Organ_External org = null;
			string status = null;
			double brutedamage = 0;
			double burndamage = 0;
			string t_him = null;
			Mob_Living_Carbon H2 = null;
			Mob_Living_Carbon H3 = null;

			
			if ( Convert.ToDouble( this.health ) >= Convert.ToDouble( GlobalVars.config.health_threshold_crit ) ) {
				
				if ( this == M && this is Mob_Living_Carbon_Human ) {
					H = this;
					this.visible_message( "<span class='notice'>" + this + " examines " + ( this.gender == GlobalVars.MALE ? "himself" : "herself" ) + ".</span>", "<span class='notice'>You check yourself for injuries.</span>" );

					foreach (dynamic _a in Lang13.Enumerate( ((dynamic)H).organs, typeof(Organ_External) )) {
						org = _a;
						
						status = "";
						brutedamage = org.brute_dam;
						burndamage = org.burn_dam;

						if ( this.halloss > 0 ) {
							
							if ( Rand13.PercentChance( 30 ) ) {
								brutedamage += this.halloss;
							}

							if ( Rand13.PercentChance( 30 ) ) {
								burndamage += this.halloss;
							}
						}

						if ( brutedamage > 0 ) {
							status = "bruised";
						}

						if ( brutedamage > 20 ) {
							status = "bleeding";
						}

						if ( brutedamage > 40 ) {
							status = "mangled";
						}

						if ( brutedamage > 0 && burndamage > 0 ) {
							status += " and ";
						}

						if ( burndamage > 40 ) {
							status += "peeling away";
						} else if ( burndamage > 10 ) {
							status += "blistered";
						} else if ( burndamage > 0 ) {
							status += "numb";
						}

						if ( ( org.status & 64 ) != 0 ) {
							status = "MISSING!";
						}

						if ( ( org.status & 2048 ) != 0 ) {
							status = "weirdly shapen.";
						}

						if ( status == "" ) {
							status = "OK";
						}
						this.show_message( "	 " + ( status == "OK" ? "<span class='notice'></span>" : "<span class='danger'></span>" ) + "My " + org.display_name + " is " + status + ".", 1 );
					}

					if ( H.mutations.Contains( 29 ) && !Lang13.Bool( ((dynamic)H).w_uniform ) && !Lang13.Bool( ((dynamic)H).wear_suit ) ) {
						((dynamic)H).play_xylophone();
					}
				} else if ( this.lying == true ) {
					t_him = "it";

					if ( this.gender == GlobalVars.MALE ) {
						t_him = "him";
					} else if ( this.gender == GlobalVars.FEMALE ) {
						t_him = "her";
					}

					if ( this is Mob_Living_Carbon_Human && Lang13.Bool( ((dynamic)this).w_uniform ) ) {
						H2 = this;
						((Ent_Static)((dynamic)H2).w_uniform).add_fingerprint( M );
					}
					this.sleeping = Num13.MaxInt( 0, this.sleeping - 5 );

					if ( this.sleeping == 0 ) {
						this.resting = 0;
					}
					this.AdjustParalysis( -3 );
					this.AdjustStunned( -3 );
					this.AdjustWeakened( -3 );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
					((Ent_Static)M).visible_message( "<span class='notice'>" + M + " shakes " + this + " trying to wake " + t_him + " up!</span>", "<span class='notice'>You shake " + this + " trying to wake " + t_him + " up!</span>", null, "<span class='notice'>" + M + " starts massaging " + t_him + "'s back.</span>", "<span class='notice'>You start massaging " + t_him + "'s back.</span>" );
				} else {
					
					if ( this is Mob_Living_Carbon_Human && Lang13.Bool( ((dynamic)this).w_uniform ) ) {
						H3 = this;
						((Ent_Static)((dynamic)H3).w_uniform).add_fingerprint( M );
					}
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
					((Ent_Static)M).visible_message( "<span class='notice'>" + M + " gives " + this + " a " + Rand13.Pick(new object [] { "hug", "warm embrace" }) + ".</span>", "<span class='notice'>You hug " + this + ".</span>" );
					((Reagents)this.reagents).add_reagent( "paracetamol", 1 );
					this.share_contact_diseases( M );
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public void activate_hand( dynamic selhand = null ) {
			
			if ( selhand is string ) {
				selhand = String13.ToLower( selhand );

				if ( selhand == "right" || selhand == "r" ) {
					selhand = 0;
				}

				if ( selhand == "left" || selhand == "l" ) {
					selhand = 1;
				}
			}

			if ( selhand != this.hand ) {
				this.swap_hand();
			}
			return;
		}

		// Function from file: carbon.dm
		public void swap_hand(  ) {
			this.hand = !( this.hand == true );

			if ( this.hud_used.l_hand_hud_object != null && this.hud_used.r_hand_hud_object != null ) {
				
				if ( this.hand == true ) {
					((dynamic)this.hud_used.l_hand_hud_object).icon_state = "hand_active";
					((dynamic)this.hud_used.r_hand_hud_object).icon_state = "hand_inactive";
				} else {
					((dynamic)this.hud_used.l_hand_hud_object).icon_state = "hand_inactive";
					((dynamic)this.hud_used.r_hand_hud_object).icon_state = "hand_active";
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public void share_contact_diseases( dynamic M = null ) {
			Disease D = null;
			Disease D2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _a;
				

				if ( D.spread_by_touch() ) {
					((Mob)M).contract_disease( D, false, true, 3 );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( M.viruses, typeof(Disease) )) {
				D2 = _b;
				

				if ( D2.spread_by_touch() ) {
					this.contract_disease( D2, false, true, 3 );
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public void update_minimap(  ) {
			dynamic pda_device = null;
			dynamic user_loc = null;
			dynamic pda_loc = null;

			pda_device = this.machine;

			if ( Lang13.Bool( this.machine ) && pda_device is Obj_Item_Device_Pda ) {
				user_loc = GlobalFuncs.get_turf( this );
				pda_loc = GlobalFuncs.get_turf( pda_device );

				if ( Map13.GetDistance( user_loc, pda_loc ) <= 1 ) {
					
					if ( Convert.ToInt32( pda_device.mode ) == 104 ) {
						((Obj_Item)pda_device).attack_self( this );
					}
				} else {
					this.unset_machine();
					Interface13.Browse( this, null, "window=pda" );
				}
			}
			return;
		}

		// Function from file: Hallucination.dm
		public void handle_hallucinations(  ) {
			int halpick = 0;
			ByTable slots_free = null;
			Mob_Living_Carbon H = null;
			ByTable possible_points = null;
			Tile_Simulated_Floor F = null;
			dynamic target = null;
			ByTable creepyasssounds = null;
			ByTable hisses = null;
			ByTable possible_points2 = null;
			Tile_Simulated_Floor F2 = null;
			dynamic target2 = null;
			dynamic txt_verb = null;
			dynamic location = null;
			dynamic L = null;
			ByTable mob_list = null;
			Mob_Living M = null;
			dynamic random_food = null;
			Image foodie = null;
			Client C = null;
			int duration = 0;

			
			if ( this.handling_hal ) {
				return;
			}
			this.handling_hal = true;

			while (this.hallucination > 20) {
				Task13.Sleep( ((int)( Rand13.Int( 200, 500 ) / ( this.hallucination / 25 ) )) );
				halpick = Rand13.Int( 1, 104 );

				dynamic _i = halpick; // Was a switch-case, sorry for the mess.
				if ( 0<=_i&&_i<=15 ) {
					this.hal_screwyhud = Convert.ToInt32( Rand13.Pick(new object [] { 1, 2, 3, 3, 4, 4 }) );
					Task13.Schedule( Rand13.Int( 100, 250 ), (Task13.Closure)(() => {
						this.hal_screwyhud = 0;
						return;
					}));
				} else if ( 16<=_i&&_i<=25 ) {
					
					if ( !( this.halitem != null ) ) {
						this.halitem = new Obj();
						slots_free = new ByTable(new object [] { "CENTER:16,SOUTH:5", "CENTER-1:16,SOUTH:5" });

						if ( Lang13.Bool( this.l_hand ) ) {
							slots_free.Remove( "CENTER:16,SOUTH:5" );
						}

						if ( Lang13.Bool( this.r_hand ) ) {
							slots_free.Remove( "CENTER-1:16,SOUTH:5" );
						}

						if ( this is Mob_Living_Carbon_Human ) {
							H = this;

							if ( !Lang13.Bool( ((dynamic)H).belt ) ) {
								slots_free.Add( "WEST+4:14,SOUTH:5" );
							}

							if ( !Lang13.Bool( ((dynamic)H).l_store ) ) {
								slots_free.Add( "CENTER+1:18,SOUTH:5" );
							}

							if ( !Lang13.Bool( ((dynamic)H).r_store ) ) {
								slots_free.Add( "CENTER+2:20,SOUTH:5" );
							}
						}

						if ( slots_free.len != 0 ) {
							this.halitem.screen_loc = Rand13.PickFromTable( slots_free );
							this.halitem.layer = 50;

							switch ((int)( Rand13.Int( 1, 6 ) )) {
								case 1:
									this.halitem.icon = "icons/obj/gun.dmi";
									this.halitem.icon_state = "revolver";
									this.halitem.name = "Revolver";
									break;
								case 2:
									this.halitem.icon = "icons/obj/assemblies.dmi";
									this.halitem.icon_state = "plastic-explosive0";
									this.halitem.name = "Mysterious Package";

									if ( Rand13.PercentChance( 25 ) ) {
										this.halitem.icon_state = "c4small_1";
									}
									break;
								case 3:
									this.halitem.icon = "icons/obj/weapons.dmi";
									this.halitem.icon_state = "sword1";
									this.halitem.name = "Sword";
									break;
								case 4:
									this.halitem.icon = "icons/obj/weapons.dmi";
									this.halitem.icon_state = "stunbaton";
									this.halitem.name = "Stun Baton";
									break;
								case 5:
									this.halitem.icon = "icons/obj/card.dmi";
									this.halitem.icon_state = "emag";
									this.halitem.name = "Cryptographic Sequencer";
									break;
								case 6:
									this.halitem.icon = "icons/obj/grenade.dmi";
									this.halitem.icon_state = "flashbang1";
									this.halitem.name = "Flashbang";
									break;
							}

							if ( this.client != null ) {
								this.client.screen.Add( this.halitem );
							}
							Task13.Schedule( Rand13.Int( 100, 250 ), (Task13.Closure)(() => {
								
								if ( this.client != null ) {
									this.client.screen.Remove( this.halitem );
								}
								this.halitem = null;
								return;
							}));
						}
					}
				} else if ( 26<=_i&&_i<=40 ) {
					
					if ( !( this.halimage != null ) && this.client != null ) {
						possible_points = new ByTable();

						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( Game13.view, this ), typeof(Tile_Simulated_Floor) )) {
							F = _b;
							
							possible_points.Add( F );
						}

						if ( possible_points.len != 0 ) {
							target = Rand13.PickFromTable( possible_points );

							switch ((int)( Rand13.Int( 1, 4 ) )) {
								case 1:
									this.halimage = new Image( "icons/turf/space.dmi", target, "" + Rand13.Int( 1, 25 ), GlobalVars.TURF_LAYER );
									break;
								case 2:
									this.halimage = new Image( "icons/effects/fire.dmi", target, "1", GlobalVars.TURF_LAYER );
									break;
								case 3:
									this.halimage = new Image( "icons/obj/assemblies.dmi", target, "plastic-explosive2", 3.01 );
									break;
								case 4:
									this.halimage = new Image( "icons/obj/grenade.dmi", target, "flashbang_active", GlobalVars.OBJ_LAYER );
									break;
							}

							if ( this.client != null ) {
								this.client.images.Add( this.halimage );
							}
							Task13.Schedule( Rand13.Int( 10, 50 ), (Task13.Closure)(() => {
								
								if ( this.client != null ) {
									this.client.images.Remove( this.halimage );
								}
								this.halimage = null;
								return;
							}));
						}
					}
				} else if ( 41<=_i&&_i<=65 ) {
					
					if ( this.client != null ) {
						
						switch ((int)( Rand13.Int( 1, 16 ) )) {
							case 1:
								this.WriteMsg( "sound/machines/airlock.ogg" );
								break;
							case 2:
								
								if ( Rand13.PercentChance( 50 ) ) {
									this.WriteMsg( "sound/effects/Explosion1.ogg" );
								} else {
									this.WriteMsg( "sound/effects/Explosion2.ogg" );
								}
								break;
							case 3:
								this.WriteMsg( "sound/effects/explosionfar.ogg" );
								break;
							case 4:
								this.WriteMsg( "sound/effects/Glassbr1.ogg" );
								break;
							case 5:
								this.WriteMsg( "sound/effects/Glassbr2.ogg" );
								break;
							case 6:
								this.WriteMsg( "sound/effects/Glassbr3.ogg" );
								break;
							case 7:
								this.WriteMsg( "sound/machines/twobeep.ogg" );
								break;
							case 8:
								this.WriteMsg( "sound/machines/windowdoor.ogg" );
								break;
							case 9:
								this.WriteMsg( "sound/weapons/Gunshot.ogg" );
								Task13.Schedule( Rand13.Int( 10, 30 ), (Task13.Closure)(() => {
									this.WriteMsg( "sound/weapons/Gunshot.ogg" );
									return;
								}));
								break;
							case 10:
								this.WriteMsg( "sound/weapons/smash.ogg" );
								break;
							case 11:
								this.WriteMsg( "sound/weapons/Taser.ogg" );
								Task13.Schedule( Rand13.Int( 10, 30 ), (Task13.Closure)(() => {
									this.WriteMsg( "sound/weapons/Taser.ogg" );
									return;
								}));
								break;
							case 12:
								creepyasssounds = new ByTable(new object [] { 
									"sound/effects/ghost.ogg", 
									"sound/effects/ghost2.ogg", 
									"sound/effects/heart_beat_single.ogg", 
									"sound/effects/ear_ring_single.ogg", 
									"sound/effects/screech.ogg", 
									"sound/hallucinations/behind_you1.ogg", 
									"sound/hallucinations/behind_you2.ogg", 
									"sound/hallucinations/far_noise.ogg", 
									"sound/hallucinations/growl1.ogg", 
									"sound/hallucinations/growl2.ogg", 
									"sound/hallucinations/growl3.ogg", 
									"sound/hallucinations/im_here1.ogg", 
									"sound/hallucinations/im_here2.ogg", 
									"sound/hallucinations/i_see_you1.ogg", 
									"sound/hallucinations/i_see_you2.ogg", 
									"sound/hallucinations/look_up1.ogg", 
									"sound/hallucinations/look_up2.ogg", 
									"sound/hallucinations/over_here1.ogg", 
									"sound/hallucinations/over_here2.ogg", 
									"sound/hallucinations/over_here3.ogg", 
									"sound/hallucinations/turn_around1.ogg", 
									"sound/hallucinations/turn_around2.ogg", 
									"sound/hallucinations/veryfar_noise.ogg", 
									"sound/hallucinations/wail.ogg"
								 });
								this.WriteMsg( Rand13.PickFromTable( creepyasssounds ) );
								break;
							case 13:
								
								if ( Rand13.PercentChance( 50 ) ) {
									this.WriteMsg( "sound/items/welder.ogg" );
								} else {
									this.WriteMsg( "sound/items/welder2.ogg" );
								}
								break;
							case 14:
								
								if ( Rand13.PercentChance( 50 ) ) {
									this.WriteMsg( "sound/items/Screwdriver.ogg" );
								} else {
									this.WriteMsg( "sound/items/Screwdriver2.ogg" );
								}
								break;
							case 15:
								hisses = new ByTable(new object [] { "sound/voice/hiss1.ogg", "sound/voice/hiss2.ogg", "sound/voice/hiss3.ogg", "sound/voice/hiss4.ogg", "sound/voice/hiss5.ogg" });
								this.WriteMsg( Rand13.PickFromTable( hisses ) );
								break;
							case 16:
								this.WriteMsg( "sound/machines/ya_dun_clucked.ogg" );
								Task13.Schedule( Rand13.Int( 1, 15 ), (Task13.Closure)(() => {
									GlobalFuncs.to_chat( this, "<i>You are filled with a great sadness.</i>" );
									return;
								}));
								break;
						}
					}
				} else if ( 66<=_i&&_i<=70 ) {
					
					if ( !( this.halbody != null ) && this.client != null ) {
						possible_points2 = new ByTable();

						foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInView( Game13.view, this ), typeof(Tile_Simulated_Floor) )) {
							F2 = _e;
							
							possible_points2.Add( F2 );
						}

						if ( possible_points2.len != 0 ) {
							target2 = Rand13.PickFromTable( possible_points2 );

							switch ((int)( Rand13.Int( 1, 4 ) )) {
								case 1:
									this.halbody = new Image( "icons/mob/human.dmi", target2, "husk_l", GlobalVars.TURF_LAYER );
									break;
								case 2:
								case 3:
									this.halbody = new Image( "icons/mob/human.dmi", target2, "husk_s", GlobalVars.TURF_LAYER );
									break;
								case 4:
									this.halbody = new Image( "icons/mob/alien.dmi", target2, "alienother", GlobalVars.TURF_LAYER );
									break;
							}

							if ( this.client != null ) {
								this.client.images.Add( this.halbody );
							}
							Task13.Schedule( Rand13.Int( 50, 80 ), (Task13.Closure)(() => {
								
								if ( this.client != null ) {
									this.client.images.Remove( this.halbody );
								}
								this.halbody = null;
								return;
							}));
						}
					}
				} else if ( 71<=_i&&_i<=72 ) {
					this.sleeping = 20;
					this.hal_crit = true;
					this.hal_screwyhud = 1;
					Task13.Schedule( Rand13.Int( 50, 100 ), (Task13.Closure)(() => {
						this.sleeping = 0;
						this.hal_crit = false;
						this.hal_screwyhud = 0;
						return;
					}));
				} else if ( 73<=_i&&_i<=75 ) {
					
					if ( Rand13.PercentChance( ((int)( 0.01 )) ) ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>You feel a <b>HUGE</b> prick!</span>" );
					} else {
						GlobalFuncs.to_chat( this, "<span class='warning'>You feel a tiny prick!</span>" );
					}
				} else if ( 78<=_i&&_i<=80 ) {
					GlobalFuncs.to_chat( this, "<i>" + Rand13.PickFromTable( GlobalVars.boo_phrases ) + "</i>" );
				} else if ( 82<=_i&&_i<=85 ) {
					this.WriteMsg( GlobalFuncs.get_sfx( "clownstep" ) );
					Task13.Schedule( Rand13.Int( 16, 28 ), (Task13.Closure)(() => {
						this.WriteMsg( GlobalFuncs.get_sfx( "clownstep" ) );
						return;
					}));
				} else if ( _i==76 ) {
					
					if ( Rand13.PercentChance( 5 ) ) {
						GlobalFuncs.to_chat( this, "<h1 class='alert'>Priority Announcement</h1>" );
						GlobalFuncs.to_chat( this, "<span class='alert'>The Emergency Shuttle has docked with the station. You have 3 minutes to board the Emergency Shuttle.</span>" );
						this.WriteMsg( new Sound( "sound/AI/shuttledock.ogg" ) );
					} else {
						txt_verb = Rand13.Pick(new object [] { "go to", "die in", "stay in", "avoid" });
						location = Rand13.Pick(new object [] { "security", "arrivals", "bridge", "your old house", "the escape shuttle hallway", "deep space", "the DJ satelite", "science" });
						GlobalFuncs.to_chat( this, "<i>You feel a sudden urge to " + txt_verb + " " + location + Rand13.Pick(new object [] { "...", "!", "." }) + "</i>" );
					}
				} else if ( _i==77 ) {
					
					if ( Rand13.PercentChance( 5 ) ) {
						GlobalFuncs.to_chat( this, "<font size=4 color='red'>Attention! Delta security level reached!</font>" );
						GlobalFuncs.to_chat( this, "<font color='red'>" + GlobalVars.config.alert_desc_delta + "</font>" );
						this.WriteMsg( new Sound( "sound/AI/aimalf.ogg" ) );

						if ( this.client != null ) {
							GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( Task13.User ) + " just got a fake delta AI message from hallucinating! " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( Task13.User ) ) );
						}
					} else {
						
						switch ((int)( Rand13.Int( 1, 10 ) )) {
							case 1:
								GlobalFuncs.to_chat( this, "Your joints feel stiff." );
								break;
							case 2:
								GlobalFuncs.to_chat( this, "<span class='warning'>Beep...boop..</span>" );
								break;
							case 3:
								GlobalFuncs.to_chat( this, "<span class='warning'>Bop...beeep...</span>" );
								break;
							case 4:
								GlobalFuncs.to_chat( this, "<span class='warning'>Your joints feel very stiff.</span>" );
								break;
							case 5:
								this.say( Rand13.Pick(new object [] { "Beep, boop", "beep, beep!", "Boop...bop" }) );
								break;
							case 6:
								GlobalFuncs.to_chat( this, "Your skin feels loose." );
								break;
							case 7:
								GlobalFuncs.to_chat( this, "<span class='warning'>You feel a stabbing pain in your head.</span>" );
								break;
							case 8:
								GlobalFuncs.to_chat( this, "<span class='warning'>You can feel something move...inside.</span>" );
								break;
							case 9:
								GlobalFuncs.to_chat( this, "<span class='warning'>Your skin feels very loose.</span>" );
								break;
							case 10:
								GlobalFuncs.to_chat( this, "<span class='warning'>Your skin feels as if it's about to burst off...</span>" );
								break;
						}
					}
				} else if ( _i==81 ) {
					this.WriteMsg( new Sound( "sound/weapons/flash.ogg" ) );
					Icon13.Flick( "e_flash", this.flash );

					if ( Rand13.PercentChance( 20 ) ) {
						this.Weaken( 10 );
					}
				} else if ( _i==86 ) {
					
					if ( Rand13.PercentChance( 15 ) ) {
						L = this;

						if ( Rand13.PercentChance( 50 ) ) {
							mob_list = new ByTable();

							foreach (dynamic _h in Lang13.Enumerate( Map13.FetchViewers( null, this ), typeof(Mob_Living) )) {
								M = _h;
								
								mob_list.Or( M );
							}

							if ( mob_list.len != 0 ) {
								L = Rand13.PickFromTable( mob_list );
							}
						}
						random_food = Rand13.PickFromTable( Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) ) - Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Customizable) ) );

						if ( Lang13.Bool( Lang13.Initial( random_food, "icon" ) ) && Lang13.Bool( Lang13.Initial( random_food, "name" ) ) && Lang13.Bool( Lang13.Initial( random_food, "icon_state" ) ) ) {
							foodie = new Image( Lang13.Initial( random_food, "icon" ), Lang13.Initial( random_food, "icon_state" ) );
							((dynamic)foodie).loc = L;
							foodie.v_override = true;
							C = this.client;
							C.images.Add( foodie );

							if ( L == this ) {
								GlobalFuncs.to_chat( this, "<span class='info'>You feel like a " + Lang13.Initial( random_food, "name" ) + ". Oh wow!</span>" );
							} else {
								GlobalFuncs.to_chat( this, "<span class='info'>You smell " + Lang13.Initial( random_food, "name" ) + "...</span>" );
							}
							duration = Rand13.Int( 600, 1200 );
							Task13.Schedule( duration, (Task13.Closure)(() => {
								
								if ( C != null ) {
									C.images.Remove( foodie );
								}
								return;
							}));
						}
					}
				}
			}
			this.handling_hal = false;
			return;
		}

		// Function from file: Dreaming.dm
		public void handle_dreams(  ) {
			
			if ( Rand13.PercentChance( 5 ) && !this.dreaming ) {
				this.dream();
			}
			return;
		}

		// Function from file: Dreaming.dm
		public void dream(  ) {
			ByTable dreams = null;
			int? i = null;
			dynamic dream_image = null;

			this.dreaming = true;
			dreams = new ByTable(new object [] { 
				"an ID card", 
				"a bottle", 
				"a familiar face", 
				"a crewmember", 
				"a toolbox", 
				"a security officer", 
				"the captain", 
				"deep space", 
				"a doctor", 
				"the engine", 
				"a traitor", 
				"an ally", 
				"darkness", 
				"light", 
				"a scientist", 
				"a monkey", 
				"a loved one", 
				"warmth", 
				"the sun", 
				"a hat", 
				"the Luna", 
				"a planet", 
				"plasma", 
				"air", 
				"the medical bay", 
				"the bridge", 
				"blinking lights", 
				"a blue light", 
				"Nanotrasen", 
				"healing", 
				"power", 
				"respect", 
				"riches", 
				"space", 
				"happiness", 
				"pride", 
				"water", 
				"melons", 
				"flying", 
				"the eggs", 
				"money", 
				"the head of personnel", 
				"the head of security", 
				"a chief engineer", 
				"a research director", 
				"a chief medical officer", 
				"the detective", 
				"the warden", 
				"a member of the internal affairs", 
				"a station engineer", 
				"the janitor", 
				"atmospheric technician", 
				"the quartermaster", 
				"a cargo technician", 
				"the botanist", 
				"a shaft miner", 
				"a psychologist", 
				"the chemist", 
				"the geneticist", 
				"the virologist", 
				"the roboticist", 
				"the chef", 
				"the bartender", 
				"the chaplain", 
				"the librarian", 
				"a mouse", 
				"an ert member", 
				"a beach", 
				"the holodeck", 
				"a smokey room", 
				"a mouse", 
				"the bar", 
				"the rain", 
				"the ai core", 
				"the mining station", 
				"the research station", 
				"a beaker of strange liquid", 
				"a team", 
				"a man with a bad haircut", 
				"the moons of jupiter", 
				"an old malfunctioning AI", 
				"a ship full of spiders", 
				"bork", 
				"a chicken", 
				"a supernova", 
				"lockers", 
				"ninjas", 
				"chickens", 
				"the oven", 
				"euphoria", 
				"space god", 
				"farting", 
				"bones burning", 
				"flesh evaporating", 
				"distant worlds", 
				"skeletons", 
				"voices everywhere", 
				"death", 
				"a traitor", 
				"dark allyways", 
				"darkness", 
				"a catastrophe", 
				"a gun", 
				"freezing", 
				"a ruined station", 
				"plasma fires", 
				"an abandoned laboratory", 
				"The Syndicate", 
				"blood", 
				"falling", 
				"flames", 
				"ice", 
				"the cold", 
				"an operating table", 
				"a war", 
				"red men", 
				"malfunctioning robots", 
				"a ship full of spiders", 
				"valids", 
				"hardcore", 
				"your mom", 
				"lewd", 
				"explosions", 
				"broken bones", 
				"clowns everywhere", 
				"features", 
				"a crash", 
				"a skrell", 
				"a unathi", 
				"a tajaran", 
				"a vox", 
				"a plasmaman", 
				"a skellington", 
				"a diona", 
				"the derelict", 
				"the end of the world", 
				"the thunderdome", 
				"a ship full of dead clowns", 
				"a chicken with godlike powers", 
				"a red bus that drives through space"
			 });
			Task13.Schedule( 0, (Task13.Closure)(() => {
				i = null;
				i = Rand13.Int( 1, 4 );

				while (( i ??0) > 0) {
					dream_image = Rand13.PickFromTable( dreams );
					dreams.Remove( dream_image );
					GlobalFuncs.to_chat( this, "<span class='notice'><i>... " + dream_image + " ...</i></span>" );
					Task13.Sleep( Rand13.Int( 40, 70 ) );

					if ( this.paralysis <= 0 ) {
						this.dreaming = false;
						return;
					}
					i--;
				}
				this.dreaming = false;
				return;
				return;
			}));
			return;
		}

		// Function from file: click.dm
		public override void MiddleClickOn( Ent_Static A = null ) {
			this.swap_hand();
			return;
		}

		// Function from file: give.dm
		[Verb]
		[VerbInfo( name: "Give", group: "IC", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void give(  ) {
			this.give_item( Task13.User );
			return;
		}

		// Function from file: carbon.dm
		[Verb]
		[VerbInfo( name: "Sleep", group: "IC" )]
		public void mob_sleep(  ) {
			
			if ( Task13.User.sleeping != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You are already sleeping.</span>" );
				return;
			}

			if ( Interface13.Alert( this, "Are you sure you want to sleep for a while?", "Sleep", "Yes", "No" ) == "Yes" ) {
				Task13.User.sleeping = 150;
			}
			return;
		}

		// Function from file: items.dm
		[Verb]
		[VerbInfo( name: "Show Held Item", group: "Object" )]
		public void showoff(  ) {
			dynamic I = null;

			I = this.get_active_hand();

			if ( Lang13.Bool( I ) && !Lang13.Bool( I.v_abstract ) ) {
				((Obj_Item)I).showoff( this );
			}
			return;
		}

	}

}