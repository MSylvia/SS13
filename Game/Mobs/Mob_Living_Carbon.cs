// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon : Mob_Living {

		public bool dreaming = false;
		public Image halimage = null;
		public Image halbody = null;
		public Obj halitem = null;
		public int hal_screwyhud = 0;
		public bool handling_hal = false;
		public ByTable stomach_contents = new ByTable();
		public ByTable internal_organs = new ByTable();
		public int silent = 0;
		public dynamic handcuffed = null;
		public dynamic legcuffed = null;
		public dynamic back = null;
		public dynamic wear_mask = null;
		public dynamic v_internal = null;
		public dynamic head = null;
		public Dna dna = null;
		public bool failed_last_breath = false;
		public int co2overloadtime = 0;
		public double temperature_resistance = 348.41;
		public Type type_of_meat = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab);
		public ByTable abilities = new ByTable();
		public Type gib_type = typeof(Obj_Effect_Decal_Cleanable_Blood_Gibs);
		public bool rotate_on_lying = true;
		public double tinttotal = 0;
		public ByTable overlays_standing = new ByTable( 27 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.hud_possible = new ByTable(new object [] { "1", "2", "12" });
			this.has_limbs = true;
		}

		// Function from file: carbon.dm
		public Mob_Living_Carbon ( dynamic loc = null ) : base( (object)(loc) ) {
			this.create_reagents( 1000 );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: helpers.dm
		public override Obj_Item_Organ_Internal getorganslot( string slot = null ) {
			Obj_Item_Organ_Internal O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
				O = _a;
				

				if ( slot == O.slot ) {
					return O;
				}
			}
			return null;
		}

		// Function from file: helpers.dm
		public override ByTable getorganszone( string zone = null, bool? subzones = null ) {
			subzones = subzones ?? false;

			ByTable returnorg = null;
			Obj_Item_Organ_Internal O = null;

			returnorg = new ByTable();

			if ( subzones == true ) {
				
				if ( zone == "head" ) {
					returnorg = this.getorganszone( "eyes" ) + this.getorganszone( "mouth" );
				}

				if ( zone == "chest" ) {
					returnorg = this.getorganszone( "groin" );
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
				O = _a;
				

				if ( zone == O.zone ) {
					returnorg.Add( O );
				}
			}
			return returnorg;
		}

		// Function from file: helpers.dm
		public override dynamic getorgan( Type typepath = null ) {
			return Lang13.FindIn( typepath, this.internal_organs );
		}

		// Function from file: shuttle.dm
		public override bool onShuttleMove( Ent_Static T1 = null, double? rotation = null ) {
			bool _default = false;

			_default = base.onShuttleMove( T1, rotation );

			if ( !_default ) {
				return _default;
			}

			if ( !( this.buckled != null ) ) {
				this.Weaken( 3 );
			}
			return _default;
		}

		// Function from file: ninjaDrainAct.dm
		public override dynamic ninjadrain_act( Obj_Item_Clothing_Suit_Space_SpaceNinja S = null, Ent_Static H = null, Obj_Item_Clothing_Gloves_SpaceNinja G = null ) {
			dynamic _default = null;

			EffectSystem_SparkSpread spark_system = null;

			
			if ( !( S != null ) || !( H != null ) || !( G != null ) ) {
				return "INVALID";
			}
			_default = "MOBSHOCKFAIL";

			if ( Lang13.Bool( S.cell ) && Lang13.Bool( S.cell.charge ) && ((Obj_Item_Weapon_StockParts_Cell)S.cell).use( 1000 ) ) {
				_default = "MOBSHOCK";
				spark_system = new EffectSystem_SparkSpread();
				spark_system.set_up( 5, 0, this.loc );
				GlobalFuncs.playsound( this, "sparks", 50, 1 );
				this.visible_message( "<span class='danger'>" + H + " electrocutes " + this + " with their touch!</span>", "<span class='userdanger'>" + H + " electrocutes you with their touch!</span>" );
				this.electrocute_act( 25, H );
			}
			return _default;
		}

		// Function from file: say.dm
		public override dynamic hivecheck(  ) {
			return this.getorgan( typeof(Obj_Item_Organ_Internal_Alien_Hivenode) );
		}

		// Function from file: update_icons.dm
		public override void update_inv_handcuffed(  ) {
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_head(  ) {
			Image standing = null;

			this.remove_overlay( 7 );

			if ( Lang13.Bool( this.head ) ) {
				standing = ((Obj_Item)this.head).build_worn_icon( this.head.icon_state, 7, "icons/mob/head.dmi" );
				this.overlays_standing[7] = standing;
				this.update_hud_head( this.head );
			}
			this.apply_overlay( 7 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_back(  ) {
			Image standing = null;

			this.remove_overlay( 10 );

			if ( Lang13.Bool( this.back ) ) {
				standing = ((Obj_Item)this.back).build_worn_icon( this.back.icon_state, 10, "icons/mob/back.dmi" );
				this.overlays_standing[10] = standing;
				this.update_hud_back( this.back );
			}
			this.apply_overlay( 10 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_mask(  ) {
			Image standing = null;

			this.remove_overlay( 8 );

			if ( this.wear_mask is Obj_Item_Clothing_Mask ) {
				
				if ( !( Lang13.Bool( this.head ) && ( ( this.head.flags_inv ??0) & 1 ) != 0 ) ) {
					standing = ((Obj_Item)this.wear_mask).build_worn_icon( this.wear_mask.icon_state, 8, "icons/mob/mask.dmi" );
					this.overlays_standing[8] = standing;
				}
				this.update_hud_wear_mask( this.wear_mask );
			}
			this.apply_overlay( 8 );
			return;
		}

		// Function from file: update_icons.dm
		public override bool regenerate_icons(  ) {
			
			if ( Lang13.Bool( this.notransform ) ) {
				return true;
			}
			this.update_inv_r_hand();
			this.update_inv_l_hand();
			this.update_inv_handcuffed();
			this.update_inv_legcuffed();
			this.update_fire();
			return false;
		}

		// Function from file: update_icons.dm
		public override void update_fire( string fire_icon = null ) {
			fire_icon = fire_icon ?? "Generic_mob_burning";

			this.remove_overlay( 1 );

			if ( this.on_fire ) {
				this.overlays_standing[1] = new Image( "icons/mob/OnFire.dmi", null, fire_icon, -1 );
			}
			this.apply_overlay( 1 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_l_hand(  ) {
			dynamic t_state = null;
			Image standing = null;

			this.remove_overlay( 4 );

			if ( Lang13.Bool( this.handcuffed ) ) {
				this.drop_l_hand();
				return;
			}

			if ( Lang13.Bool( this.l_hand ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_version != 3 ) {
					this.l_hand.screen_loc = "CENTER: 16,SOUTH:5";
					this.client.screen.Add( this.l_hand );
				}
				t_state = this.l_hand.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.l_hand.icon_state;
				}
				standing = ((Obj_Item)this.l_hand).build_worn_icon( t_state, 4, this.l_hand.lefthand_file, GlobalVars.TRUE );
				this.overlays_standing[4] = standing;
			}
			this.apply_overlay( 4 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_r_hand(  ) {
			dynamic t_state = null;
			Image standing = null;

			this.remove_overlay( 3 );

			if ( Lang13.Bool( this.handcuffed ) ) {
				this.drop_r_hand();
				return;
			}

			if ( Lang13.Bool( this.r_hand ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_version != 3 ) {
					this.r_hand.screen_loc = "CENTER:-16,SOUTH:5";
					this.client.screen.Add( this.r_hand );
				}
				t_state = this.r_hand.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.r_hand.icon_state;
				}
				standing = ((Obj_Item)this.r_hand).build_worn_icon( t_state, 3, this.r_hand.righthand_file, GlobalVars.TRUE );
				this.overlays_standing[3] = standing;
			}
			this.apply_overlay( 3 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_transform(  ) {
			Matrix ntransform = null;
			dynamic final_pixel_y = null;
			int final_dir = 0;
			int changed = 0;

			ntransform = Num13.Matrix( this.transform );
			final_pixel_y = this.pixel_y;
			final_dir = this.dir;
			changed = 0;

			if ( this.lying != this.lying_prev && this.rotate_on_lying ) {
				changed++;
				ntransform.TurnTo( this.lying_prev, this.lying );

				if ( this.lying == 0 ) {
					final_pixel_y = this.get_standard_pixel_y_offset();
				} else if ( this.lying_prev == 0 ) {
					this.pixel_y = Convert.ToInt32( this.get_standard_pixel_y_offset() );
					final_pixel_y = this.get_standard_pixel_y_offset( this.lying );

					if ( ( this.dir & 12 ) != 0 ) {
						final_dir = Convert.ToInt32( Rand13.Pick(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH }) );
					}
				}
				this.lying_prev = this.lying;
			}

			if ( this.resize != 1 ) {
				changed++;
				ntransform.Scale( this.resize );
				this.resize = 1;
			}

			if ( changed != 0 ) {
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "transform", ntransform ).Set( "time", 2 ).Set( "pixel_y", final_pixel_y ).Set( "dir", final_dir ).Set( "easing", 192 ) );
				this.floating = false;
			}
			return;
		}

		// Function from file: say.dm
		public override bool can_speak_vocal( dynamic message = null ) {
			
			if ( this.silent != 0 ) {
				return false;
			}
			return base.can_speak_vocal( (object)(message) );
		}

		// Function from file: say.dm
		public override dynamic treat_message( dynamic message = null ) {
			message = base.treat_message( (object)(message) );

			if ( Lang13.Bool( this.wear_mask ) ) {
				message = ((Obj_Item_Clothing_Mask)this.wear_mask).speechModification( message );
			}
			return message;
		}

		// Function from file: life.dm
		public override void handle_actions(  ) {
			Obj_Item I = null;

			base.handle_actions();

			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item) )) {
				I = _a;
				
				this.give_action_button( I, 1 );
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_status_effects(  ) {
			int restingpwr = 0;
			Client C = null;
			double pixel_x_diff = 0;
			double pixel_y_diff = 0;
			double temp = 0;
			int saved_dizz = 0;
			Mob_Living_Carbon oldsrc = null;
			double amplitude = 0;

			base.handle_status_effects();

			if ( Lang13.Bool( this.staminaloss ) ) {
				
				if ( this.sleeping != 0 ) {
					this.adjustStaminaLoss( -10 );
				} else {
					this.adjustStaminaLoss( -2 );
				}
			}

			if ( this.sleeping != 0 ) {
				this.handle_dreams();
				this.AdjustSleeping( -1 );

				if ( Rand13.PercentChance( 10 ) && Convert.ToDouble( this.health ) > ( GlobalVars.config.health_threshold_crit ??0) ) {
					this.emote( "snore" );
				}
			}
			restingpwr = this.resting * 4 + 1;

			if ( this.dizziness != 0 ) {
				C = this.client;
				pixel_x_diff = 0;
				pixel_y_diff = 0;
				saved_dizz = this.dizziness;

				if ( C != null ) {
					oldsrc = this;
					amplitude = this.dizziness * ( Math.Sin( this.dizziness * Game13.time * 0.031 ) + 1 ) / 70;
					Task13.Source = null;
					Task13.Schedule( 0, (Task13.Closure)(() => {
						
						if ( C != null ) {
							temp = amplitude * Math.Sin( saved_dizz * Game13.time * 0.008 );
							pixel_x_diff += temp;
							C.pixel_x += ((int)( temp ));
							temp = amplitude * Math.Cos( saved_dizz * Game13.time * 0.008 );
							pixel_y_diff += temp;
							C.pixel_y += ((int)( temp ));
							Task13.Sleep( 3 );

							if ( C != null ) {
								temp = amplitude * Math.Sin( saved_dizz * Game13.time * 0.008 );
								pixel_x_diff += temp;
								C.pixel_x += ((int)( temp ));
								temp = amplitude * Math.Cos( saved_dizz * Game13.time * 0.008 );
								pixel_y_diff += temp;
								C.pixel_y += ((int)( temp ));
							}
							Task13.Sleep( 3 );

							if ( C != null ) {
								C.pixel_x -= ((int)( pixel_x_diff ));
								C.pixel_y -= ((int)( pixel_y_diff ));
							}
						}
						return;
					}));
					Task13.Source = oldsrc;
				}
				this.dizziness = Num13.MaxInt( this.dizziness - restingpwr, 0 );
			}

			if ( this.drowsyness != 0 ) {
				this.drowsyness = Num13.MaxInt( this.drowsyness - restingpwr, 0 );
				this.blur_eyes( 2 );

				if ( Rand13.PercentChance( 5 ) ) {
					this.AdjustSleeping( 1 );
					this.Paralyse( 5 );
				}
			}

			if ( this.confused != 0 ) {
				this.confused = Num13.MaxInt( 0, ((int)( this.confused - 1 )) );
			}

			if ( this.jitteriness != 0 ) {
				this.do_jitter_animation( this.jitteriness );
				this.jitteriness = Num13.MaxInt( this.jitteriness - restingpwr, 0 );
			}

			if ( this.stuttering != 0 ) {
				this.stuttering = Num13.MaxInt( ((int)( this.stuttering - 1 )), 0 );
			}

			if ( this.slurring != 0 ) {
				this.slurring = Num13.MaxInt( ((int)( this.slurring - 1 )), 0 );
			}

			if ( this.silent != 0 ) {
				this.silent = Num13.MaxInt( this.silent - 1, 0 );
			}

			if ( this.druggy != 0 ) {
				this.adjust_drugginess( -1 );
			}

			if ( this.hallucination != 0 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.handle_hallucinations();
					return;
				}));
				this.hallucination = Num13.MaxInt( ((int)( this.hallucination - 2 )), 0 );
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_stomach(  ) {
			Mob_Living M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.stomach_contents, typeof(Mob_Living) )) {
				M = _a;
				

				if ( M.loc != this ) {
					this.stomach_contents.Remove( M );
					continue;
				}

				if ( M is Mob_Living_Carbon && this.stat != 2 ) {
					
					if ( M.stat == 2 ) {
						M.death( true );
						this.stomach_contents.Remove( M );
						GlobalFuncs.qdel( M );
						continue;
					}

					if ( GlobalVars.SSmob.times_fired % 3 == 1 ) {
						
						if ( !( ( M.status_flags & 4096 ) != 0 ) ) {
							M.adjustBruteLoss( 5 );
						}
						this.nutrition += 10;
					}
				}
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_chemicals_in_body(  ) {
			
			if ( this.reagents != null ) {
				this.reagents.metabolize( this );
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_mutations_and_radiation(  ) {
			Mutation_Human HM = null;
			dynamic mut = null;

			
			if ( this.dna != null && this.dna.temporary_mutations.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.dna.temporary_mutations )) {
					mut = _a;
					

					if ( Convert.ToDouble( this.dna.temporary_mutations[mut] ) < Game13.time ) {
						
						if ( mut == "ui changed" ) {
							
							if ( Lang13.Bool( this.dna.previous["UI"] ) ) {
								this.dna.uni_identity = GlobalFuncs.merge_text( this.dna.uni_identity, this.dna.previous["UI"] );
								this.updateappearance( null, null, true );
								this.dna.previous.Remove( "UI" );
							}
							this.dna.temporary_mutations.Remove( mut );
							continue;
						}

						if ( mut == "ue changed" ) {
							
							if ( Lang13.Bool( this.dna.previous["name"] ) ) {
								this.real_name = this.dna.previous["name"];
								this.name = this.real_name;
								this.dna.previous.Remove( "name" );
							}

							if ( Lang13.Bool( this.dna.previous["UE"] ) ) {
								this.dna.unique_enzymes = this.dna.previous["UE"];
								this.dna.previous.Remove( "UE" );
							}

							if ( Lang13.Bool( this.dna.previous["blood_type"] ) ) {
								this.dna.blood_type = this.dna.previous["blood_type"];
								this.dna.previous.Remove( "blood_type" );
							}
							this.dna.temporary_mutations.Remove( mut );
							continue;
						}
						HM = GlobalVars.mutations_list[mut];
						HM.force_lose( this );
						this.dna.temporary_mutations.Remove( mut );
					}
				}
			}

			if ( this.radiation != 0 ) {
				
				dynamic _b = this.radiation; // Was a switch-case, sorry for the mess.
				if ( 0<=_b&&_b<=50 ) {
					this.radiation = Num13.MaxInt( ((int)( this.radiation - 1 )), 0 );

					if ( Rand13.PercentChance( 25 ) ) {
						this.adjustToxLoss( 1 );
					}
				} else if ( 50<=_b&&_b<=75 ) {
					this.radiation = Num13.MaxInt( ((int)( this.radiation - 2 )), 0 );
					this.adjustToxLoss( 1 );

					if ( Rand13.PercentChance( 5 ) ) {
						this.radiation = Num13.MaxInt( ((int)( this.radiation - 5 )), 0 );
					}
				} else if ( 75<=_b&&_b<=100 ) {
					this.radiation = Num13.MaxInt( ((int)( this.radiation - 3 )), 0 );
					this.adjustToxLoss( 3 );
				} else {
					this.radiation = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.radiation )), 100 ) );
				}
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_breathing(  ) {
			Ent_Static location_as_object = null;

			
			if ( GlobalVars.SSmob.times_fired % 4 == 2 || this.failed_last_breath ) {
				this.breathe();
			} else if ( this.loc is Obj ) {
				location_as_object = this.loc;
				((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
			}
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			bool _default = false;

			Obj_Item_Organ_Internal O = null;
			dynamic G = null;
			dynamic G2 = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}

			if ( !( this.loc != null ) ) {
				return _default;
			}

			if ( this.damageoverlaytemp != 0 ) {
				this.damageoverlaytemp = 0;
				this.update_damage_hud();
			}

			if ( base.Life() ) {
				_default = true;

				foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
					O = _a;
					
					O.on_life();
				}
			}

			if ( this.l_hand is Obj_Item_Weapon_Grab ) {
				G = this.l_hand;
				((Game_Data)G).process();
			}

			if ( this.r_hand is Obj_Item_Weapon_Grab ) {
				G2 = this.r_hand;
				((Game_Data)G2).process();
			}
			this.handle_changeling();
			return _default;
		}

		// Function from file: inventory.dm
		public override bool unEquip( dynamic I = null, int? force = null ) {
			bool _default = false;

			_default = base.unEquip( (object)(I), force );

			if ( !_default || !Lang13.Bool( I ) ) {
				return _default;
			}

			if ( I == this.head ) {
				this.head = null;
				this.head_update( I );
			} else if ( I == this.back ) {
				this.back = null;
				this.update_inv_back();
			} else if ( I == this.wear_mask ) {
				this.wear_mask = null;
				this.wear_mask_update( I, true );
			} else if ( I == this.handcuffed ) {
				this.handcuffed = null;

				if ( this.buckled != null && this.buckled.buckle_requires_restraints ) {
					this.buckled.unbuckle_mob();
				}
				this.update_handcuffed();
			} else if ( I == this.legcuffed ) {
				this.legcuffed = null;
				this.update_inv_legcuffed();
			}
			return _default;
		}

		// Function from file: inventory.dm
		public override bool equip_to_slot( dynamic W = null, dynamic slot = null ) {
			
			if ( !Lang13.Bool( slot ) ) {
				return false;
			}

			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( W == this.l_hand ) {
				this.l_hand = null;
			} else if ( W == this.r_hand ) {
				this.r_hand = null;
			}
			W.screen_loc = null;
			W.loc = this;
			((Obj_Item)W).equipped( this, slot );
			W.layer = 20;

			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				this.back = W;
				this.update_inv_back();
			} else if ( _a==2 ) {
				this.wear_mask = W;
				this.wear_mask_update( W, false );
			} else if ( _a==11 ) {
				this.head = W;
				this.head_update( W );
			} else if ( _a==3 ) {
				this.handcuffed = W;
				this.update_handcuffed();
			} else if ( _a==19 ) {
				this.legcuffed = W;
				this.update_inv_legcuffed();
			} else if ( _a==4 ) {
				this.l_hand = W;
				this.update_inv_l_hand();
			} else if ( _a==5 ) {
				this.r_hand = W;
				this.update_inv_r_hand();
			} else if ( _a==18 ) {
				
				if ( W == this.get_active_hand() ) {
					this.unEquip( W );
				}
				W.loc = this.back;
			} else {
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public override dynamic get_item_by_slot( dynamic slot_id = null ) {
			
			dynamic _a = slot_id; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return this.back;
			} else if ( _a==2 ) {
				return this.wear_mask;
			} else if ( _a==11 ) {
				return this.head;
			} else if ( _a==3 ) {
				return this.handcuffed;
			} else if ( _a==19 ) {
				return this.legcuffed;
			} else if ( _a==4 ) {
				return this.l_hand;
			} else if ( _a==5 ) {
				return this.r_hand;
			}
			return null;
		}

		// Function from file: examine.dm
		public override double examine( dynamic user = null ) {
			string msg = null;
			double temp = 0;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<EM>" ).item().str( "</EM>!\n" ).ToString();

			if ( Lang13.Bool( this.handcuffed ) ) {
				msg += new Txt( "It is " ).icon( this.handcuffed ).str( " handcuffed!\n" ).ToString();
			}

			if ( Lang13.Bool( this.head ) ) {
				msg += new Txt( "It has " ).icon( this.head ).str( " " ).a( this.head ).item().str( " on its head. \n" ).ToString();
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				msg += new Txt( "It has " ).icon( this.wear_mask ).str( " " ).a( this.wear_mask ).item().str( " on its face.\n" ).ToString();
			}

			if ( Lang13.Bool( this.l_hand ) ) {
				msg += new Txt( "It has " ).icon( this.l_hand ).str( " " ).a( this.l_hand ).item().str( " in its left hand.\n" ).ToString();
			}

			if ( Lang13.Bool( this.r_hand ) ) {
				msg += new Txt( "It has " ).icon( this.r_hand ).str( " " ).a( this.r_hand ).item().str( " in its right hand.\n" ).ToString();
			}

			if ( Lang13.Bool( this.back ) ) {
				msg += new Txt( "It has " ).icon( this.back ).str( " " ).a( this.back ).item().str( " on its back.\n" ).ToString();
			}

			if ( this.stat == 2 ) {
				msg += "<span class='deadsay'>It is limp and unresponsive, with no signs of life.</span>\n";
			} else {
				msg += "<span class='warning'>";
				temp = this.getBruteLoss();

				if ( temp != 0 ) {
					
					if ( temp < 30 ) {
						msg += "It has minor bruising.\n";
					} else {
						msg += "<B>It has severe bruising!</B>\n";
					}
				}
				temp = this.getFireLoss();

				if ( temp != 0 ) {
					
					if ( temp < 30 ) {
						msg += "It has minor burns.\n";
					} else {
						msg += "<B>It has severe burns!</B>\n";
					}
				}
				temp = this.getCloneLoss();

				if ( temp != 0 ) {
					
					if ( this.getCloneLoss() < 30 ) {
						msg += "It is slightly deformed.\n";
					} else {
						msg += "<b>It is severely deformed.</b>\n";
					}
				}

				if ( this.getBrainLoss() > 60 ) {
					msg += "It seems to be clumsy and unable to think.\n";
				}

				if ( this.fire_stacks > 0 ) {
					msg += "It's covered in something flammable.\n";
				}

				if ( this.fire_stacks < 0 ) {
					msg += "It's soaked in water.\n";
				}

				if ( this.stat == 1 ) {
					msg += "It isn't responding to anything around it; it seems to be asleep.\n";
				}
				msg += "</span>";
			}

			if ( this.digitalcamo ) {
				msg += "It is moving its body in an unnatural and blatantly unsimian manner.\n";
			}

			if ( !Lang13.Bool( this.getorgan( typeof(Obj_Item_Organ_Internal_Brain) ) ) ) {
				msg += "<span class='deadsay'>It appears that it's brain is missing...</span>\n";
			}
			msg += "*---------*</span>";
			user.WriteMsg( msg );
			return 0;
		}

		// Function from file: emote.dm
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			string param = null;
			int t1 = 0;
			bool muzzled = false;
			dynamic M = null;
			dynamic A = null;
			dynamic M2 = null;

			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}
			muzzled = this.is_muzzled();

			switch ((string)( act )) {
				case "aflap":
					
					if ( !this.restrained() ) {
						message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " wings ANGRILY!" ).ToString();
						m_type = 2;
					}
					break;
				case "airguitar":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> is strumming the air and headbanging like a safari chimp.";
						m_type = 1;
					}
					break;
				case "blink":
				case "blinks":
					message = "<B>" + this + "</B> blinks.";
					m_type = 1;
					break;
				case "blink_r":
					message = "<B>" + this + "</B> blinks rapidly.";
					m_type = 1;
					break;
				case "blush":
				case "blushes":
					message = "<B>" + this + "</B> blushes.";
					m_type = 1;
					break;
				case "bow":
				case "bows":
					
					if ( !( this.buckled != null ) ) {
						M = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
								A = _a;
								

								if ( param == A.name ) {
									M = A;
									break;
								}
							}
						}

						if ( !Lang13.Bool( M ) ) {
							param = null;
						}

						if ( Lang13.Bool( param ) ) {
							message = "<B>" + this + "</B> bows to " + param + ".";
						} else {
							message = "<B>" + this + "</B> bows.";
						}
					}
					m_type = 1;
					break;
				case "burp":
				case "burps":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "choke":
				case "chokes":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a strong noise.";
						m_type = 2;
					}
					break;
				case "chuckle":
				case "chuckles":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a noise.";
						m_type = 2;
					}
					break;
				case "clap":
				case "claps":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> claps.";
						m_type = 2;
					}
					break;
				case "cough":
				case "coughs":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a strong noise.";
						m_type = 2;
					}
					break;
				case "deathgasp":
				case "deathgasps":
					message = new Txt( "<B>" ).item( this ).str( "</B> seizes up and falls limp, " ).his_her_its_their().str( " eyes dead and lifeless..." ).ToString();
					m_type = 1;
					break;
				case "flap":
				case "flaps":
					
					if ( !this.restrained() ) {
						message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " wings." ).ToString();
						m_type = 2;
					}
					break;
				case "gasp":
				case "gasps":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a weak noise.";
						m_type = 2;
					}
					break;
				case "giggle":
				case "giggles":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a noise.";
						m_type = 2;
					}
					break;
				case "laugh":
				case "laughs":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a noise.";
					}
					break;
				case "me":
					
					if ( !( this.silent != 0 ) ) {
						base.emote( act, m_type, (object)(message) );
					}
					return;
					break;
				case "nod":
				case "nods":
					message = "<B>" + this + "</B> nods.";
					m_type = 1;
					break;
				case "scream":
				case "screams":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a very loud noise.";
						m_type = 2;
					}
					break;
				case "shake":
				case "shakes":
					message = new Txt( "<B>" ).item( this ).str( "</B> shakes " ).his_her_its_their().str( " head." ).ToString();
					m_type = 1;
					break;
				case "sneeze":
				case "sneezes":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a strange noise.";
						m_type = 2;
					}
					break;
				case "sigh":
				case "sighs":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> sighs.";
						m_type = 2;
					}
					break;
				case "sniff":
				case "sniffs":
					message = "<B>" + this + "</B> sniffs.";
					m_type = 2;
					break;
				case "snore":
				case "snores":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a noise.";
						m_type = 2;
					}
					break;
				case "whimper":
				case "whimpers":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					} else {
						message = "<B>" + this + "</B> makes a weak noise.";
						m_type = 2;
					}
					break;
				case "wink":
				case "winks":
					message = "<B>" + this + "</B> winks.";
					m_type = 1;
					break;
				case "yawn":
				case "yawns":
					
					if ( !muzzled ) {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "help":
					this.WriteMsg( "Help for emotes. You can use these emotes with say \"*emote\":\n\naflap, airguitar, blink, blink_r, blush, bow-(none)/mob, burp, choke, chuckle, clap, collapse, cough, dance, deathgasp, drool, flap, frown, gasp, giggle, glare-(none)/mob, grin, jump, laugh, look, me, nod, point-atom, scream, shake, sigh, sit, smile, sneeze, sniff, snore, stare-(none)/mob, sulk, sway, tremble, twitch, twitch_s, wave, whimper, wink, yawn" );
					break;
				default:
					base.emote( act, m_type, (object)(message) );
					break;
			}

			if ( Lang13.Bool( message ) ) {
				GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message );

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
					M2 = _c;
					

					if ( !Lang13.Bool( M2.client ) || M2 is Mob_NewPlayer ) {
						continue;
					}

					if ( Convert.ToInt32( M2.stat ) == 2 && Lang13.Bool( M2.client ) && ( M2.client.prefs.chat_toggles & 8 ) != 0 && !Map13.FetchViewers( null, this ).Contains( M2 ) ) {
						M2.show_message( message );
					}
				}

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else if ( ( ( m_type ??0) & 2 ) != 0 ) {
					this.audible_message( message );
				}
			}
			return;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			this.silent = 0;
			this.losebreath = 0;
			this.med_hud_set_health();
			this.med_hud_set_status();
			base.death( gibbed, toast );
			return false;
		}

		// Function from file: carbon_defense.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			int stunprob = 0;
			EffectSystem_SparkSpread s = null;
			double power = 0;

			
			if ( base.attack_slime( user ) ) {
				
				if ( user.powerlevel > 0 ) {
					stunprob = user.powerlevel * 7 + 10;

					if ( Rand13.PercentChance( stunprob ) ) {
						user.powerlevel -= 3;

						if ( user.powerlevel < 0 ) {
							user.powerlevel = 0;
						}
						this.visible_message( "<span class='danger'>The " + user.name + " has shocked " + this + "!</span>", "<span class='userdanger'>The " + user.name + " has shocked " + this + "!</span>" );
						s = new EffectSystem_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();
						power = user.powerlevel + Rand13.Int( 0, 3 );
						this.Weaken( power );

						if ( this.stuttering < power ) {
							this.stuttering = power;
						}
						this.Stun( power );

						if ( Rand13.PercentChance( stunprob ) && user.powerlevel >= 8 ) {
							this.adjustFireLoss( user.powerlevel * Rand13.Int( 6, 10 ) );
							this.updatehealth();
						}
					}
				}
				return true;
			}
			return false;
		}

		// Function from file: carbon_defense.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Disease D = null;
			Disease D2 = null;
			Disease D3 = null;

			
			if ( !( a is Mob_Living_Carbon ) ) {
				return 0;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _a;
				

				if ( D.IsSpreadByTouch() ) {
					((Mob)a).ContractDisease( D );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( a.viruses, typeof(Disease) )) {
				D2 = _b;
				

				if ( D2.IsSpreadByTouch() ) {
					this.ContractDisease( D2 );
				}
			}

			if ( a.a_intent == "help" ) {
				this.help_shake_act( a );
				return 0;
			}

			if ( Lang13.Bool( base.attack_paw( (object)(a), (object)(b), (object)(c) ) ) ) {
				
				foreach (dynamic _c in Lang13.Enumerate( a.viruses, typeof(Disease) )) {
					D3 = _c;
					
					this.ForceContractDisease( D3 );
				}
				return 1;
			}
			return null;
		}

		// Function from file: carbon_defense.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			Disease D = null;
			Disease D2 = null;
			Surgery S = null;

			
			if ( !( a is Mob_Living_Carbon ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _a;
				

				if ( D.IsSpreadByTouch() ) {
					((Mob)a).ContractDisease( D );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( a.viruses, typeof(Disease) )) {
				D2 = _b;
				

				if ( D2.IsSpreadByTouch() ) {
					this.ContractDisease( D2 );
				}
			}

			if ( Lang13.Bool( this.lying ) ) {
				
				if ( a.a_intent == "help" ) {
					
					if ( this.surgeries.len != 0 ) {
						
						foreach (dynamic _c in Lang13.Enumerate( this.surgeries, typeof(Surgery) )) {
							S = _c;
							

							if ( S.next_step( a, this ) ) {
								return 1;
							}
						}
					}
				}
			}
			return 0;
		}

		// Function from file: carbon_defense.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Surgery S = null;

			
			if ( Lang13.Bool( this.lying ) ) {
				
				if ( this.surgeries.len != 0 ) {
					
					if ( user != this && user.a_intent == "help" ) {
						
						foreach (dynamic _a in Lang13.Enumerate( this.surgeries, typeof(Surgery) )) {
							S = _a;
							

							if ( S.next_step( user, this ) ) {
								return 1;
							}
						}
					}
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: carbon_defense.dm
		public override bool throw_impact( dynamic target = null, Mob_Living_Carbon thrower = null ) {
			bool _default = false;

			_default = base.throw_impact( (object)(target), thrower );

			if ( target.density && target is Tile ) {
				this.Weaken( 1 );
				this.take_organ_damage( 10 );
			}
			return _default;
		}

		// Function from file: carbon_defense.dm
		public override bool hitby( Ent_Dynamic AM = null, bool? skipcatch = null, bool? hitpush = null, bool? blocked = null ) {
			hitpush = hitpush ?? true;
			blocked = blocked ?? false;

			Ent_Dynamic I = null;

			
			if ( !( skipcatch == true ) ) {
				
				if ( this.in_throw_mode && !Lang13.Bool( this.get_active_hand() ) ) {
					
					if ( this.canmove && !this.restrained() ) {
						
						if ( AM is Obj_Item ) {
							I = AM;

							if ( I.loc is Tile ) {
								this.put_in_active_hand( I );
								this.visible_message( "<span class='warning'>" + this + " catches " + I + "!</span>" );
								this.throw_mode_off();
								return true;
							}
						}
					}
				}
			}
			base.hitby( AM, skipcatch, hitpush, blocked );
			return false;
		}

		// Function from file: carbon.dm
		public override void update_stat(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}

			if ( this.stat != 2 ) {
				
				if ( Convert.ToDouble( this.health ) <= ( GlobalVars.config.health_threshold_dead ??0) || !Lang13.Bool( this.getorgan( typeof(Obj_Item_Organ_Internal_Brain) ) ) ) {
					this.death();
					return;
				}

				if ( this.paralysis != 0 || this.sleeping != 0 || Convert.ToDouble( this.getOxyLoss() ) > 50 || ( this.status_flags & 8192 ) != 0 || Convert.ToDouble( this.health ) <= ( GlobalVars.config.health_threshold_crit ??0) ) {
					
					if ( this.stat == 0 ) {
						this.stat = 1;
						this.blind_eyes( 1 );
						this.update_canmove();
					}
				} else if ( this.stat == 1 ) {
					this.stat = 0;
					this.resting = 0;
					this.adjust_blindness( -1 );
					this.update_canmove();
				}
			}
			this.update_damage_hud();
			this.update_health_hud();
			return;
		}

		// Function from file: carbon.dm
		public override bool update_health_hud( dynamic shown_health_amount = null ) {
			bool _default = false;

			
			if ( !( this.client != null ) || !( this.hud_used != null ) ) {
				return _default;
			}

			if ( this.hud_used.healths != null ) {
				
				if ( this.stat != 2 ) {
					_default = true;

					if ( !Lang13.Bool( shown_health_amount ) ) {
						shown_health_amount = this.health;
					}

					if ( Convert.ToDouble( shown_health_amount ) >= Convert.ToDouble( this.maxHealth ) ) {
						this.hud_used.healths.icon_state = "health0";
					} else if ( Convert.ToDouble( shown_health_amount ) > Convert.ToDouble( this.maxHealth * 0.8 ) ) {
						this.hud_used.healths.icon_state = "health1";
					} else if ( Convert.ToDouble( shown_health_amount ) > Convert.ToDouble( this.maxHealth * 0.6 ) ) {
						this.hud_used.healths.icon_state = "health2";
					} else if ( Convert.ToDouble( shown_health_amount ) > Convert.ToDouble( this.maxHealth * 0.4 ) ) {
						this.hud_used.healths.icon_state = "health3";
					} else if ( Convert.ToDouble( shown_health_amount ) > Convert.ToDouble( this.maxHealth * 0.2 ) ) {
						this.hud_used.healths.icon_state = "health4";
					} else if ( Convert.ToDouble( shown_health_amount ) > 0 ) {
						this.hud_used.healths.icon_state = "health5";
					} else {
						this.hud_used.healths.icon_state = "health6";
					}
				} else {
					this.hud_used.healths.icon_state = "health7";
				}
			}
			return _default;
		}

		// Function from file: carbon.dm
		public override void update_damage_hud(  ) {
			int? severity = null;
			int? severity2 = null;
			double hurtdamage = 0;
			int? severity3 = null;

			
			if ( !( this.client != null ) ) {
				return;
			}

			if ( this.stat == 1 && Convert.ToDouble( this.health ) <= ( GlobalVars.config.health_threshold_crit ??0) ) {
				severity = 0;

				dynamic _a = this.health; // Was a switch-case, sorry for the mess.
				if ( -20<=_a&&_a<=-10 ) {
					severity = 1;
				} else if ( -30<=_a&&_a<=-20 ) {
					severity = 2;
				} else if ( -40<=_a&&_a<=-30 ) {
					severity = 3;
				} else if ( -50<=_a&&_a<=-40 ) {
					severity = 4;
				} else if ( -60<=_a&&_a<=-50 ) {
					severity = 5;
				} else if ( -70<=_a&&_a<=-60 ) {
					severity = 6;
				} else if ( -80<=_a&&_a<=-70 ) {
					severity = 7;
				} else if ( -90<=_a&&_a<=-80 ) {
					severity = 8;
				} else if ( -95<=_a&&_a<=-90 ) {
					severity = 9;
				} else if ( Double.NegativeInfinity<=_a&&_a<=-95 ) {
					severity = 10;
				}
				this.overlay_fullscreen( "crit", typeof(Obj_Screen_Fullscreen_Crit), severity );
			} else {
				this.clear_fullscreen( "crit" );

				if ( Lang13.Bool( this.oxyloss ) ) {
					severity2 = 0;

					dynamic _b = this.oxyloss; // Was a switch-case, sorry for the mess.
					if ( 10<=_b&&_b<=20 ) {
						severity2 = 1;
					} else if ( 20<=_b&&_b<=25 ) {
						severity2 = 2;
					} else if ( 25<=_b&&_b<=30 ) {
						severity2 = 3;
					} else if ( 30<=_b&&_b<=35 ) {
						severity2 = 4;
					} else if ( 35<=_b&&_b<=40 ) {
						severity2 = 5;
					} else if ( 40<=_b&&_b<=45 ) {
						severity2 = 6;
					} else if ( 45<=_b&&_b<=Double.PositiveInfinity ) {
						severity2 = 7;
					}
					this.overlay_fullscreen( "oxy", typeof(Obj_Screen_Fullscreen_Oxy), severity2 );
				} else {
					this.clear_fullscreen( "oxy" );
				}
				hurtdamage = this.getBruteLoss() + this.getFireLoss() + this.damageoverlaytemp;

				if ( hurtdamage != 0 ) {
					severity3 = 0;

					dynamic _c = hurtdamage; // Was a switch-case, sorry for the mess.
					if ( 5<=_c&&_c<=15 ) {
						severity3 = 1;
					} else if ( 15<=_c&&_c<=30 ) {
						severity3 = 2;
					} else if ( 30<=_c&&_c<=45 ) {
						severity3 = 3;
					} else if ( 45<=_c&&_c<=70 ) {
						severity3 = 4;
					} else if ( 70<=_c&&_c<=85 ) {
						severity3 = 5;
					} else if ( 85<=_c&&_c<=Double.PositiveInfinity ) {
						severity3 = 6;
					}
					this.overlay_fullscreen( "brute", typeof(Obj_Screen_Fullscreen_Brute), severity3 );
				} else {
					this.clear_fullscreen( "brute" );
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public override void revive(  ) {
			Obj_Item_Weapon_Restraints R = null;
			Reagent R2 = null;
			Disease D = null;
			dynamic BR = null;
			Mob_Living_Carbon human_mob = null;
			Mutation_Human HM = null;

			this.setToxLoss( 0 );
			this.setOxyLoss( 0 );
			this.setCloneLoss( false );
			this.setBrainLoss( 0 );
			this.setStaminaLoss( 0 );
			this.SetParalysis( 0 );
			this.SetStunned( 0 );
			this.SetWeakened( 0 );
			this.SetSleeping( 0 );
			this.radiation = 0;
			this.nutrition = 400;
			this.bodytemperature = 310;
			this.disabilities = 0;
			this.ear_deaf = 0;
			this.ear_damage = 0;
			this.hallucination = 0;
			this.heal_overall_damage( 1000, 1000 );
			this.ExtinguishMob();
			this.fire_stacks = 0;
			this.suiciding = 0;
			this.handcuffed = Lang13.Initial( this, "handcuffed" );

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Restraints) )) {
				R = _a;
				
				GlobalFuncs.qdel( R );
			}
			this.update_handcuffed();

			if ( this.reagents != null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
					R2 = _b;
					
					this.reagents.clear_reagents();
				}
				this.reagents.addiction_list = new ByTable();
			}

			foreach (dynamic _c in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _c;
				
				D.cure( 0 );
			}
			BR = this.getorgan( typeof(Obj_Item_Organ_Internal_Brain) );

			if ( Lang13.Bool( BR ) ) {
				
				if ( this.stat == 2 ) {
					GlobalVars.dead_mob_list.Remove( this );
					GlobalVars.living_mob_list.Add( this );
				}
				this.stat = 0;
				BR.damaged_brain = false;
			}
			this.set_blindness( 0 );
			this.set_blurriness( 0 );
			this.set_eye_damage( 0 );

			if ( this is Mob_Living_Carbon_Human ) {
				human_mob = this;
				((dynamic)human_mob).restore_blood();
				((dynamic)human_mob).remove_all_embedded_objects();
			}
			this.updatehealth();
			this.update_fire();

			if ( this.dna != null ) {
				
				foreach (dynamic _d in Lang13.Enumerate( this.dna.mutations, typeof(Mutation_Human) )) {
					HM = _d;
					

					if ( HM.quality != 1 ) {
						this.dna.remove_mutation( HM.name );
					}
				}
			}
			this.update_sight();
			this.reload_fullscreen();
			this.update_canmove();
			return;
		}

		// Function from file: carbon.dm
		public override void update_sight(  ) {
			dynamic A = null;
			Obj_Item_Organ_Internal_Cyberimp_Eyes E = null;

			
			if ( !( this.client != null ) ) {
				return;
			}

			if ( this.stat == 2 ) {
				this.sight = 28;
				this.see_in_dark = 8;
				this.see_invisible = 60;
				return;
			}
			this.see_invisible = Convert.ToInt32( Lang13.Initial( this, "see_invisible" ) );
			this.see_in_dark = Convert.ToInt32( Lang13.Initial( this, "see_in_dark" ) );
			this.sight = Convert.ToInt32( Lang13.Initial( this, "sight" ) );

			if ( this.client.eye != this ) {
				A = this.client.eye;

				if ( ((Ent_Static)A).update_remote_sight( this ) ) {
					return;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal_Cyberimp_Eyes) )) {
				E = _a;
				
				this.sight |= E.sight_flags;

				if ( E.dark_view != 0 ) {
					this.see_in_dark = Num13.MaxInt( this.see_in_dark, E.dark_view );
				}

				if ( E.see_invisible != 0 ) {
					this.see_invisible = Num13.MinInt( this.see_invisible, E.see_invisible );
				}
			}

			if ( this.see_override != 0 ) {
				this.see_invisible = this.see_override;
			}
			return;
		}

		// Function from file: carbon.dm
		public override bool fully_replace_character_name( dynamic oldname = null, dynamic newname = null ) {
			base.fully_replace_character_name( (object)(oldname), (object)(newname) );

			if ( this.dna != null ) {
				this.dna.real_name = this.real_name;
			}
			return false;
		}

		// Function from file: carbon.dm
		public override dynamic Stat(  ) {
			dynamic vessel = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				vessel = this.getorgan( typeof(Obj_Item_Organ_Internal_Alien_Plasmavessel) );

				if ( Lang13.Bool( vessel ) ) {
					Interface13.Stat( null, "Plasma Stored: " + vessel.storedPlasma + "/" + vessel.max_plasma );
				}

				if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Device_Assembly_Health), this ) ) ) {
					Interface13.Stat( null, "Health: " + this.health );
				}
			}
			this.add_abilities_to_panel();
			return null;
		}

		// Function from file: carbon.dm
		public override double check_eye_prot(  ) {
			double number = 0;
			Obj_Item_Organ_Internal_Cyberimp_Eyes EFP = null;

			number = base.check_eye_prot();

			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal_Cyberimp_Eyes) )) {
				EFP = _a;
				
				number += EFP.flash_protect;
			}
			return number;
		}

		// Function from file: carbon.dm
		public override double emp_act( int severity = 0 ) {
			Obj_Item_Organ_Internal O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
				O = _a;
				
				O.emp_act( severity );
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: carbon.dm
		public override bool check_ear_prot(  ) {
			
			if ( Lang13.Bool( this.head ) && Lang13.Bool( this.head.flags & 4096 ) ) {
				return true;
			}
			return false;
		}

		// Function from file: carbon.dm
		public override dynamic get_standard_pixel_y_offset( int? lying = null ) {
			lying = lying ?? 0;

			
			if ( Lang13.Bool( lying ) ) {
				return -6;
			} else {
				return Lang13.Initial( this, "pixel_y" );
			}
		}

		// Function from file: carbon.dm
		public override void resist_restraints(  ) {
			dynamic I = null;

			I = null;

			if ( Lang13.Bool( this.handcuffed ) ) {
				I = this.handcuffed;
			} else if ( Lang13.Bool( this.legcuffed ) ) {
				I = this.legcuffed;
			}

			if ( Lang13.Bool( I ) ) {
				this.changeNext_move( 100 );
				this.last_special = Game13.time + 100;
				this.cuff_resist( I );
			}
			return;
		}

		// Function from file: carbon.dm
		public override void resist_fire(  ) {
			this.fire_stacks -= 5;
			this.Weaken( 3, true );
			this.spin( 32, 2 );
			this.visible_message( "<span class='danger'>" + this + " rolls on the floor, trying to put themselves out!</span>", "<span class='notice'>You stop, drop, and roll!</span>" );
			Task13.Sleep( 30 );

			if ( this.fire_stacks <= 0 ) {
				this.visible_message( "<span class='danger'>" + this + " has successfully extinguished themselves!</span>", "<span class='notice'>You extinguish yourself.</span>" );
				this.ExtinguishMob();
			}
			return;
		}

		// Function from file: carbon.dm
		public override void resist_buckle(  ) {
			
			if ( this.restrained() ) {
				this.changeNext_move( 100 );
				this.last_special = Game13.time + 100;
				this.visible_message( "<span class='warning'>" + this + " attempts to unbuckle themself!</span>", "<span class='notice'>You attempt to unbuckle yourself... (This will take around one minute and you need to stay still.)</span>" );

				if ( GlobalFuncs.do_after( this, 600, false, this ) ) {
					
					if ( !( this.buckled != null ) ) {
						return;
					}
					this.buckled.user_unbuckle_mob( this );
				} else if ( this != null && this.buckled != null ) {
					this.WriteMsg( "<span class='warning'>You fail to unbuckle yourself!</span>" );
				}
			} else {
				this.buckled.user_unbuckle_mob( this );
			}
			return;
		}

		// Function from file: carbon.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( this.stat == 2 ) {
				return false;
			} else {
				this.show_message( "<span class='userdanger'>The blob attacks!</span>" );
				this.adjustBruteLoss( 10 );
			}
			return false;
		}

		// Function from file: carbon.dm
		public override bool is_muzzled(  ) {
			return this.wear_mask is Obj_Item_Clothing_Mask_Muzzle;
		}

		// Function from file: carbon.dm
		public override void fall( bool forced = false ) {
			this.loc.handle_fall( this, forced );
			return;
		}

		// Function from file: carbon.dm
		public override bool slip( int s_amount = 0, int w_amount = 0, dynamic O = null, dynamic lube = null ) {
			GlobalFuncs.add_logs( this, null, "slipped", null, "on " + ( Lang13.Bool( O ) ? O.name : "floor" ) );
			return this.loc.handle_slip( this, s_amount, w_amount, O, lube );
		}

		// Function from file: carbon.dm
		public override dynamic getTrail(  ) {
			
			if ( this.getBruteLoss() < 300 ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					return "ltrails_1";
				}
				return "ltrails_2";
			} else if ( Rand13.PercentChance( 50 ) ) {
				return "trails_1";
			}
			return "trails_2";
		}

		// Function from file: carbon.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? slot = null;
			dynamic ITEM = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.canUseTopic( this, true, true ) ) {
				
				if ( Lang13.Bool( href_list["internal"] ) ) {
					slot = String13.ParseNumber( href_list["internal"] );
					ITEM = this.get_item_by_slot( slot );

					if ( Lang13.Bool( ITEM ) && ITEM is Obj_Item_Weapon_Tank && Lang13.Bool( this.wear_mask ) && Lang13.Bool( this.wear_mask.flags & 8 ) ) {
						this.visible_message( "<span class='danger'>" + Task13.User + " tries to " + ( Lang13.Bool( this.v_internal ) ? "close" : "open" ) + " the valve on " + this + "'s " + ITEM + ".</span>", "<span class='userdanger'>" + Task13.User + " tries to " + ( Lang13.Bool( this.v_internal ) ? "close" : "open" ) + " the valve on " + this + "'s " + ITEM + ".</span>" );

						if ( GlobalFuncs.do_mob( Task13.User, this, 40 ) ) {
							
							if ( Lang13.Bool( this.v_internal ) ) {
								this.v_internal = null;
								this.update_internals_hud_icon( false );
							} else if ( Lang13.Bool( ITEM ) && ITEM is Obj_Item_Weapon_Tank && Lang13.Bool( this.wear_mask ) && Lang13.Bool( this.wear_mask.flags & 8 ) ) {
								this.v_internal = ITEM;
								this.update_internals_hud_icon( true );
							}
							this.visible_message( "<span class='danger'>" + Task13.User + " " + ( Lang13.Bool( this.v_internal ) ? "opens" : "closes" ) + " the valve on " + this + "'s " + ITEM + ".</span>", "<span class='userdanger'>" + Task13.User + " " + ( Lang13.Bool( this.v_internal ) ? "opens" : "closes" ) + " the valve on " + this + "'s " + ITEM + ".</span>" );
						}
					}
				}
			}
			return null;
		}

		// Function from file: carbon.dm
		public override void show_inv( Obj user = null ) {
			string dat = null;

			((dynamic)user).set_machine( this );
			dat = new Txt( "\n	<HR>\n	<B><FONT size=3>" ).item( this.name ).str( "</FONT></B>\n	<HR>\n	<BR><B>Head:</B> <A href='?src=" ).Ref( this ).str( ";item=" ).item( 11 ).str( "'>				" ).item( ( Lang13.Bool( this.head ) && !Lang13.Bool( this.head.flags & 128 ) ? this.head : ((dynamic)( "Nothing" )) ) ).str( "</A>\n	<BR><B>Mask:</B> <A href='?src=" ).Ref( this ).str( ";item=" ).item( 2 ).str( "'>		" ).item( ( Lang13.Bool( this.wear_mask ) && !Lang13.Bool( this.wear_mask.flags & 128 ) ? this.wear_mask : ((dynamic)( "Nothing" )) ) ).str( "</A>\n	<BR><B>Left Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=" ).item( 4 ).str( "'>		" ).item( ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.flags & 128 ) ? this.l_hand : ((dynamic)( "Nothing" )) ) ).str( "</A>\n	<BR><B>Right Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=" ).item( 5 ).str( "'>		" ).item( ( Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.flags & 128 ) ? this.r_hand : ((dynamic)( "Nothing" )) ) ).str( "</A>" ).ToString();
			dat += new Txt( "<BR><B>Back:</B> <A href='?src=" ).Ref( this ).str( ";item=" ).item( 1 ).str( "'>" ).item( ( Lang13.Bool( this.back ) ? this.back : ((dynamic)( "Nothing" )) ) ).str( "</A>" ).ToString();

			if ( this.wear_mask is Obj_Item_Clothing_Mask && this.back is Obj_Item_Weapon_Tank ) {
				dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";internal=1'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";item=" ).item( 3 ).str( "'>Handcuffed</A>" ).ToString();
			}

			if ( Lang13.Bool( this.legcuffed ) ) {
				dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";item=" ).item( 19 ).str( "'>Legcuffed</A>" ).ToString();
			}
			dat += new Txt( "\n	<BR>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).Ref( this ).str( "'>Close</A>\n	" ).ToString();
			Interface13.Browse( user, dat, new Txt( "window=mob" ).Ref( this ).str( ";size=325x500" ).ToString() );
			GlobalFuncs.onclose( user, new Txt( "mob" ).Ref( this ).ToString() );
			return;
		}

		// Function from file: carbon.dm
		public override bool restrained(  ) {
			
			if ( Lang13.Bool( this.handcuffed ) ) {
				return true;
			}
			return false;
		}

		// Function from file: carbon.dm
		public override void throw_item( Ent_Static target = null ) {
			dynamic item = null;
			dynamic G = null;
			dynamic start_T = null;
			dynamic end_T = null;
			dynamic M = null;
			string start_T_descriptor = null;
			string end_T_descriptor = null;

			this.throw_mode_off();

			if ( !( target != null ) || !( this.loc is Tile ) ) {
				return;
			}

			if ( target is Obj_Screen ) {
				return;
			}
			item = this.get_active_hand();

			if ( !Lang13.Bool( item ) || Lang13.Bool( item.flags & 2 ) ) {
				return;
			}

			if ( item is Obj_Item_Weapon_Grab ) {
				G = item;
				item = ((Obj_Item_Weapon_Grab)G).get_mob_if_throwable();
				GlobalFuncs.qdel( G );

				if ( item is Mob ) {
					start_T = GlobalFuncs.get_turf( this.loc );
					end_T = GlobalFuncs.get_turf( target );

					if ( Lang13.Bool( start_T ) && Lang13.Bool( end_T ) ) {
						M = item;
						start_T_descriptor = "<font color='#6b5d00'>tile at " + start_T.x + ", " + start_T.y + ", " + start_T.z + " in area " + GlobalFuncs.get_area( start_T ) + "</font>";
						end_T_descriptor = "<font color='#6b4400'>tile at " + end_T.x + ", " + end_T.y + ", " + end_T.z + " in area " + GlobalFuncs.get_area( end_T ) + "</font>";
						GlobalFuncs.add_logs( this, M, "thrown", null, "from " + start_T_descriptor + " with the target " + end_T_descriptor );
					}
				}
			}

			if ( !Lang13.Bool( item ) ) {
				return;
			}

			if ( !( item is Mob ) ) {
				this.unEquip( item );
			}

			if ( this.client != null ) {
				this.client.screen.Remove( item );
			}

			if ( Lang13.Bool( item ) ) {
				item.layer = Lang13.Initial( item, "layer" );
				this.visible_message( "<span class='danger'>" + this + " has thrown " + item + ".</span>" );
				this.newtonian_move( Map13.GetDistance( target, this ) );
				((Ent_Dynamic)item).throw_at( target, item.throw_range, item.throw_speed, this );
			}
			return;
		}

		// Function from file: carbon.dm
		public override bool flash_eyes( double? intensity = null, bool? override_blindness_check = null, bool? affect_silicon = null, bool? visual = null, Type type = null ) {
			intensity = intensity ?? 1;
			override_blindness_check = override_blindness_check ?? false;
			affect_silicon = affect_silicon ?? false;
			visual = visual ?? false;

			bool _default = false;

			double damage = 0;

			_default = base.flash_eyes( intensity, override_blindness_check, affect_silicon, visual, type );
			damage = ( intensity ??0) - this.check_eye_prot();

			if ( _default ) {
				
				if ( visual == true ) {
					return _default;
				}

				if ( this.weakeyes ) {
					this.Stun( 2 );
				}

				switch ((int)( damage )) {
					case 1:
						this.WriteMsg( "<span class='warning'>Your eyes sting a little.</span>" );

						if ( Rand13.PercentChance( 40 ) ) {
							this.adjust_eye_damage( 1 );
						}
						break;
					case 2:
						this.WriteMsg( "<span class='warning'>Your eyes burn.</span>" );
						this.adjust_eye_damage( Rand13.Int( 2, 4 ) );
						break;
					default:
						this.WriteMsg( "<span class='warning'>Your eyes itch and burn severely!</span>" );
						this.adjust_eye_damage( Rand13.Int( 12, 16 ) );
						break;
				}

				if ( this.eye_damage > 10 ) {
					this.blind_eyes( damage );
					this.blur_eyes( damage * Rand13.Int( 3, 6 ) );

					if ( this.eye_damage > 20 ) {
						
						if ( Rand13.PercentChance( this.eye_damage - 20 ) ) {
							
							if ( this.become_nearsighted() ) {
								this.WriteMsg( "<span class='warning'>Your eyes start to burn badly!</span>" );
							}
						} else if ( Rand13.PercentChance( this.eye_damage - 25 ) ) {
							
							if ( this.become_blind() ) {
								this.WriteMsg( "<span class='warning'>You can't see anything!</span>" );
							}
						}
					} else {
						this.WriteMsg( "<span class='warning'>Your eyes are really starting to hurt. This can't be good for you!</span>" );
					}
				}
				return true;
			} else if ( damage == 0 ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					this.WriteMsg( "<span class='notice'>Something bright flashes in the corner of your vision!</span>" );
				}
			}
			return _default;
		}

		// Function from file: carbon.dm
		public override void activate_hand( dynamic selhand = null ) {
			
			if ( selhand is string ) {
				selhand = String13.ToLower( selhand );

				if ( selhand == "right" || selhand == "r" ) {
					selhand = 0;
				}

				if ( selhand == "left" || selhand == "l" ) {
					selhand = 1;
				}
			}

			if ( selhand != this.hand ) {
				this.swap_hand();
			} else {
				this.mode();
			}
			return;
		}

		// Function from file: carbon.dm
		public override void swap_hand(  ) {
			dynamic item_in_hand = null;

			item_in_hand = this.get_active_hand();

			if ( Lang13.Bool( item_in_hand ) ) {
				
				if ( item_in_hand is Obj_Item_Weapon_Twohanded ) {
					
					if ( item_in_hand.wielded ) {
						Task13.User.WriteMsg( "<span class='warning'>Your other hand is too busy holding the " + item_in_hand.name + "</span>" );
						return;
					}
				}
			}
			this.hand = !this.hand;

			if ( this.hud_used.l_hand_hud_object != null && this.hud_used.r_hand_hud_object != null ) {
				
				if ( this.hand ) {
					this.hud_used.l_hand_hud_object.icon_state = "hand_l_active";
					this.hud_used.r_hand_hud_object.icon_state = "hand_r_inactive";
				} else {
					this.hud_used.l_hand_hud_object.icon_state = "hand_l_inactive";
					this.hud_used.r_hand_hud_object.icon_state = "hand_r_active";
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public override dynamic electrocute_act( dynamic shock_damage = null, dynamic source = null, double? siemens_coeff = null, bool? safety = null, bool? _override = null, bool? tesla_shock = null ) {
			siemens_coeff = siemens_coeff ?? 1;
			safety = safety ?? false;
			_override = _override ?? false;

			shock_damage *= siemens_coeff;

			if ( Convert.ToDouble( shock_damage ) < 1 && !( safety == true ) ) {
				return 0;
			}

			if ( Lang13.Bool( this.reagents.has_reagent( "teslium" ) ) ) {
				shock_damage *= 1.5;
			}
			this.take_overall_damage( 0, shock_damage );
			this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " was shocked by " ).the( source ).item().str( "!</span>" ).ToString(), "<span class='userdanger'>You feel a powerful shock coursing through your body!</span>", "<span class='italics'>You hear a heavy electrical crack.</span>" );
			this.jitteriness += 1000;
			this.do_jitter_animation( this.jitteriness );
			this.stuttering += 2;

			if ( !( _override == true ) || _override == true && ( siemens_coeff ??0) > 0.5 ) {
				this.Stun( 2 );
			}
			Task13.Schedule( 20, (Task13.Closure)(() => {
				this.jitteriness = Num13.MaxInt( this.jitteriness - 990, 10 );

				if ( !( _override == true ) || _override == true && ( siemens_coeff ??0) > 0.5 ) {
					this.Stun( 3 );
					this.Weaken( 3 );
				}
				return;
			}));

			if ( safety == true ) {
				return safety;
			} else {
				return shock_damage;
			}
		}

		// Function from file: carbon.dm
		public override dynamic gib( dynamic animation = null ) {
			animation = animation ?? 1;

			dynamic _default = null;

			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this )) {
				M = _a;
				

				if ( this.stomach_contents.Contains( M ) ) {
					this.stomach_contents.Remove( M );
				}
				M.loc = this.loc;
				this.visible_message( "<span class='danger'>" + M + " bursts out of " + this + "!</span>" );
			}
			_default = base.gib( (object)(animation) );
			return _default;
		}

		// Function from file: carbon.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			dynamic I = null;
			int d = 0;
			Mob_Living_Carbon H = null;
			dynamic organ = null;
			dynamic temp = null;
			Ent_Dynamic A = null;

			
			if ( this.stomach_contents.Contains( user ) ) {
				
				if ( Rand13.PercentChance( 40 ) ) {
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.audible_message( "<span class='warning'>You hear something rumbling inside " + this + "'s stomach...</span>", "<span class='warning'>You hear something rumbling.</span>", 4, "<span class='userdanger'>Something is rumbling inside your stomach!</span>" );
					}
					I = user.get_active_hand();

					if ( Lang13.Bool( I ) && Lang13.Bool( I.force ) ) {
						d = Rand13.Int( Num13.Floor( Convert.ToDouble( I.force / 4 ) ), Convert.ToInt32( I.force ) );

						if ( this is Mob_Living_Carbon_Human ) {
							H = this;
							organ = ((dynamic)H).get_organ( "chest" );

							if ( organ is Obj_Item_Organ_Limb ) {
								temp = organ;

								if ( ((Obj_Item_Organ_Limb)temp).take_damage( d, 0 ) ) {
									H.update_damage_overlays(  );
								}
							}
							H.updatehealth();
						} else {
							this.take_organ_damage( d );
						}
						this.visible_message( "<span class='danger'>" + user + " attacks " + this + "'s stomach wall with the " + I.name + "!</span>", "<span class='userdanger'>" + user + " attacks your stomach wall with the " + I.name + "!</span>" );
						GlobalFuncs.playsound( user.loc, "sound/effects/attackblob.ogg", 50, 1 );

						if ( Rand13.PercentChance( ((int)( this.getBruteLoss() - 50 )) ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( this.stomach_contents, typeof(Ent_Dynamic) )) {
								A = _a;
								
								A.loc = this.loc;
								this.stomach_contents.Remove( A );
							}
							this.gib();
						}
					}
				}
			}
			return false;
		}

		// Function from file: carbon.dm
		public override dynamic movement_delay(  ) {
			dynamic _default = null;

			_default = base.movement_delay();

			if ( Lang13.Bool( this.legcuffed ) ) {
				_default += this.legcuffed.slowdown;
			}
			return _default;
		}

		// Function from file: carbon.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( _default ) {
				
				if ( this.nutrition != 0 && this.stat != 2 ) {
					this.nutrition -= 0.01;

					if ( this.m_intent == "run" ) {
						this.nutrition -= 0.01;
					}
				}

				if ( Lang13.Bool( this.disabilities & 32 ) && this.m_intent == "run" && Convert.ToDouble( this.bodytemperature ) <= 360 ) {
					this.bodytemperature += 2;
				}
			}
			return _default;
		}

		// Function from file: carbon.dm
		public override dynamic Destroy(  ) {
			Ent_Dynamic guts = null;
			Ent_Dynamic food = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Ent_Dynamic) )) {
				guts = _a;
				
				GlobalFuncs.qdel( guts );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.stomach_contents, typeof(Ent_Dynamic) )) {
				food = _b;
				
				GlobalFuncs.qdel( food );
			}
			this.remove_from_all_data_huds();

			if ( this.dna != null ) {
				GlobalFuncs.qdel( this.dna );
			}
			return base.Destroy();
		}

		// Function from file: carbon.dm
		public override void updatehealth(  ) {
			base.updatehealth();
			this.med_hud_set_health();
			this.med_hud_set_status();
			return;
		}

		// Function from file: carbon.dm
		public override void prepare_huds(  ) {
			base.prepare_huds();
			this.prepare_data_huds();
			return;
		}

		// Function from file: living.dm
		public override bool become_blind(  ) {
			
			if ( !Lang13.Bool( this.disabilities & 1 ) ) {
				this.disabilities |= 1;
				this.blind_eyes( 1 );
				return true;
			}
			return false;
		}

		// Function from file: living.dm
		public override bool become_nearsighted(  ) {
			
			if ( !Lang13.Bool( this.disabilities & 8 ) ) {
				this.disabilities |= 8;
				this.overlay_fullscreen( "nearsighted", typeof(Obj_Screen_Fullscreen_Impaired), 1 );
				return true;
			}
			return false;
		}

		// Function from file: living.dm
		public override bool cure_nearsighted(  ) {
			
			if ( Lang13.Bool( this.disabilities & 8 ) ) {
				this.disabilities &= 65527;
				this.clear_fullscreen( "nearsighted" );
				return true;
			}
			return false;
		}

		// Function from file: living.dm
		public override bool cure_blind(  ) {
			
			if ( Lang13.Bool( this.disabilities & 1 ) ) {
				this.disabilities &= 65534;
				this.adjust_blindness( -1 );
				return true;
			}
			return false;
		}

		// Function from file: living.dm
		public override void set_drugginess( int amount = 0 ) {
			double old_druggy = 0;

			old_druggy = this.druggy;
			this.druggy = amount;

			if ( amount > 0 ) {
				
				if ( !( old_druggy != 0 ) ) {
					this.overlay_fullscreen( "high", typeof(Obj_Screen_Fullscreen_High) );
					this.throw_alert( "high", typeof(Obj_Screen_Alert_High) );
				}
			} else if ( old_druggy != 0 ) {
				this.clear_fullscreen( "high" );
				this.clear_alert( "high" );
			}
			return;
		}

		// Function from file: living.dm
		public override void adjust_drugginess( double amount = 0 ) {
			double old_druggy = 0;

			old_druggy = this.druggy;

			if ( amount > 0 ) {
				this.druggy += amount;

				if ( !( old_druggy != 0 ) ) {
					this.overlay_fullscreen( "high", typeof(Obj_Screen_Fullscreen_High) );
					this.throw_alert( "high", typeof(Obj_Screen_Alert_High) );
				}
			} else if ( old_druggy != 0 ) {
				this.druggy = Num13.MaxInt( ((int)( this.eye_blurry + amount )), 0 );

				if ( !( this.druggy != 0 ) ) {
					this.clear_fullscreen( "high" );
					this.clear_alert( "high" );
				}
			}
			return;
		}

		// Function from file: living.dm
		public override void adjust_eye_damage( int amount = 0 ) {
			this.eye_damage = Num13.MaxInt( this.eye_damage + amount, 0 );

			if ( this.eye_damage > 20 ) {
				
				if ( this.eye_damage > 30 ) {
					this.overlay_fullscreen( "eye_damage", typeof(Obj_Screen_Fullscreen_Impaired), 2 );
				} else {
					this.overlay_fullscreen( "eye_damage", typeof(Obj_Screen_Fullscreen_Impaired), 1 );
				}
			} else {
				this.clear_fullscreen( "eye_damage" );
			}
			return;
		}

		// Function from file: living.dm
		public override void set_eye_damage( int amount = 0 ) {
			this.eye_damage = Num13.MaxInt( amount, 0 );

			if ( this.eye_damage > 20 ) {
				
				if ( this.eye_damage > 30 ) {
					this.overlay_fullscreen( "eye_damage", typeof(Obj_Screen_Fullscreen_Impaired), 2 );
				} else {
					this.overlay_fullscreen( "eye_damage", typeof(Obj_Screen_Fullscreen_Impaired), 1 );
				}
			} else {
				this.clear_fullscreen( "eye_damage" );
			}
			return;
		}

		// Function from file: living.dm
		public override void damage_eyes( bool amount = false ) {
			
			if ( ( amount ?1:0) > 0 ) {
				this.eye_damage = amount ?1:0;

				if ( this.eye_damage > 20 ) {
					
					if ( this.eye_damage > 30 ) {
						this.overlay_fullscreen( "eye_damage", typeof(Obj_Screen_Fullscreen_Impaired), 2 );
					} else {
						this.overlay_fullscreen( "eye_damage", typeof(Obj_Screen_Fullscreen_Impaired), 1 );
					}
				}
			}
			return;
		}

		// Function from file: living.dm
		public override bool setStaminaLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.staminaloss = amount;
			this.update_stamina();
			return false;
		}

		// Function from file: living.dm
		public override bool adjustStaminaLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.staminaloss = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( this.staminaloss + amount ), Convert.ToInt32( this.maxHealth * 2 ) ) );
			this.update_stamina();
			return false;
		}

		// Function from file: transform_procs.dm
		public override Mob_Living_Silicon_Ai AIize(  ) {
			Obj_Item W = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.unEquip( W );
			}
			this.regenerate_icons();
			this.notransform = 1;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			return base.AIize();
		}

		// Function from file: suicide.dm
		public override bool canSuicide(  ) {
			
			if ( !base.canSuicide() ) {
				return false;
			}

			if ( !this.canmove || this.restrained() ) {
				this.WriteMsg( "You can't commit suicide whilst restrained! ((You can type Ghost instead however.))" );
				return false;
			}
			return true;
		}

		// Function from file: dna.dm
		public override void domutcheck(  ) {
			Mutation_Human A = null;

			
			if ( !( this.has_dna() != null ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.good_mutations | GlobalVars.bad_mutations | GlobalVars.not_good_mutations, typeof(Mutation_Human) )) {
				A = _a;
				

				if ( A.check_block( this ) is Mob ) {
					return;
				}
			}
			this.update_mutations_overlay();
			return;
		}

		// Function from file: dna.dm
		public override Dna has_dna(  ) {
			return this.dna;
		}

		// Function from file: dna.dm
		public override void set_species( dynamic mrace = null, bool? icon_update = null ) {
			icon_update = icon_update ?? true;

			Type EB = null;

			
			if ( Lang13.Bool( mrace ) && this.has_dna() != null ) {
				
				if ( this.dna.species.exotic_blood != null ) {
					EB = this.dna.species.exotic_blood;
					this.reagents.del_reagent( Lang13.Initial( EB, "id" ) );
				}
				this.dna.species = Lang13.Call( mrace );
			}
			return;
		}

		// Function from file: _MobProcs.dm
		public override bool ContractDisease( Disease D = null ) {
			dynamic Cl = null;
			bool passed = false;
			int head_ch = 0;
			int body_ch = 0;
			int hands_ch = 0;
			int feet_ch = 0;
			dynamic target_zone = null;
			Mob_Living_Carbon H = null;
			Mob_Living_Carbon M = null;

			
			if ( !this.CanContractDisease( D ) ) {
				return false;
			}
			Cl = null;
			passed = true;
			head_ch = 100;
			body_ch = 100;
			hands_ch = 25;
			feet_ch = 25;

			if ( ( D.spread_flags & 16 ) != 0 ) {
				head_ch = 0;
				body_ch = 0;
				hands_ch = 100;
				feet_ch = 0;
			}

			if ( ( D.spread_flags & 8 ) != 0 ) {
				head_ch = 0;
				body_ch = 0;
				hands_ch = 0;
				feet_ch = 100;
			}

			if ( Rand13.PercentChance( ((int)( 15 / D.permeability_mod )) ) ) {
				return false;
			}

			if ( this.satiety > 0 && Rand13.PercentChance( ((int)( this.satiety / 10 )) ) ) {
				return false;
			}
			target_zone = Rand13.PickWeightedDynamic(new object [] { head_ch, 1, body_ch, 2, hands_ch, 3, }, 4 );

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				dynamic _a = target_zone; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					
					if ( H.head is Obj && !( H.head is Obj_Item_Weapon_Paper ) ) {
						Cl = H.head;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}

					if ( passed && H.wear_mask is Obj ) {
						Cl = H.wear_mask;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				} else if ( _a==2 ) {
					
					if ( ((dynamic)H).wear_suit is Obj ) {
						Cl = ((dynamic)H).wear_suit;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}

					if ( passed && 14 is Obj ) {
						Cl = 14;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				} else if ( _a==3 ) {
					
					if ( ((dynamic)H).wear_suit is Obj && ( ( ((dynamic)H).wear_suit.body_parts_covered ??0) & 1536 ) != 0 ) {
						Cl = ((dynamic)H).wear_suit;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}

					if ( passed && ((dynamic)H).gloves is Obj ) {
						Cl = ((dynamic)H).gloves;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				} else if ( _a==4 ) {
					
					if ( ((dynamic)H).wear_suit is Obj && ( ( ((dynamic)H).wear_suit.body_parts_covered ??0) & 96 ) != 0 ) {
						Cl = ((dynamic)H).wear_suit;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}

					if ( passed && ((dynamic)H).shoes is Obj ) {
						Cl = ((dynamic)H).shoes;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				}
			} else if ( this is Mob_Living_Carbon_Monkey ) {
				M = this;

				dynamic _b = target_zone; // Was a switch-case, sorry for the mess.
				if ( _b==1 ) {
					
					if ( Lang13.Bool( M.wear_mask ) && M.wear_mask is Obj ) {
						Cl = M.wear_mask;
						passed = Rand13.PercentChance( Convert.ToInt32( Cl.permeability_coefficient * 100 - 1 ) );
					}
				}
			}

			if ( !passed && ( D.spread_flags & 64 ) != 0 && !Lang13.Bool( this.v_internal ) ) {
				passed = Rand13.PercentChance( ((int)( D.permeability_mod * 50 - 1 )) );
			}

			if ( passed ) {
				this.AddDisease( D );
			}
			return false;
		}

		// Function from file: death.dm
		public bool Drain(  ) {
			this.ChangeToHusk();
			this.disabilities |= 128;
			return true;
		}

		// Function from file: death.dm
		public virtual bool ChangeToHusk(  ) {
			
			if ( Lang13.Bool( this.disabilities & 64 ) ) {
				return false;
			}
			this.disabilities |= 64;
			this.status_flags |= 16384;
			return true;
		}

		// Function from file: blood.dm
		public dynamic get_blood( Reagents container = null ) {
			dynamic res = null;
			Reagent_Blood D = null;

			res = Lang13.FindIn( typeof(Reagent_Blood), container.reagent_list );

			if ( Lang13.Bool( res ) ) {
				
				if ( res.data["donor"] != this ) {
					
					foreach (dynamic _a in Lang13.Enumerate( container.reagent_list, typeof(Reagent_Blood) )) {
						D = _a;
						

						if ( D.data["donor"] == this ) {
							return D;
						}
					}
				}
			}
			return res;
		}

		// Function from file: blood.dm
		public virtual void inject_blood( dynamic container = null, dynamic amount = null ) {
			dynamic injected = null;
			ByTable chems = null;
			dynamic C = null;

			injected = this.get_blood( container.reagents );

			if ( !Lang13.Bool( injected ) ) {
				return;
			}
			chems = new ByTable();
			chems = String13.ParseUrlParams( injected.data["trace_chem"] );

			foreach (dynamic _a in Lang13.Enumerate( chems )) {
				C = _a;
				
				this.reagents.add_reagent( C, ( String13.ParseNumber( chems[C] ) ??0) / 560 * Convert.ToDouble( amount ) );
			}
			this.reagents.update_total();
			((Reagents)container.reagents).remove_reagent( "blood", amount );
			return;
		}

		// Function from file: blood.dm
		public virtual dynamic take_blood( dynamic container = null, dynamic amount = null ) {
			dynamic B = null;
			Disease D = null;
			ByTable temp_chem = null;
			Reagent R = null;

			B = this.get_blood( container.reagents );

			if ( !Lang13.Bool( B ) ) {
				B = new Reagent_Blood();
			}
			B.holder = container;
			B.volume += amount;
			B.data["donor"] = this;
			B.data["viruses"] = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _a;
				
				B.data["viruses"] += D.Copy();
			}
			B.data["blood_DNA"] = String13.SubStr( this.dna.unique_enzymes, 1, 0 );

			if ( this.resistances != null && this.resistances.len != 0 ) {
				B.data["resistances"] = this.resistances.Copy();
			}
			temp_chem = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
				R = _b;
				
				temp_chem[R.id] = R.volume;
			}
			B.data["trace_chem"] = String13.MakeUrlParams( temp_chem );

			if ( this.mind != null ) {
				B.data["mind"] = this.mind;
			}

			if ( Lang13.Bool( this.ckey ) ) {
				B.data["ckey"] = this.ckey;
			}

			if ( !Lang13.Bool( this.suiciding ) ) {
				B.data["cloneable"] = 1;
			}
			B.data["blood_type"] = String13.SubStr( this.dna.blood_type, 1, 0 );
			B.data["gender"] = this.gender;
			B.data["real_name"] = this.real_name;
			B.data["features"] = this.dna.features;
			B.data["factions"] = this.faction;
			return B;
		}

		// Function from file: alien_powers.dm
		public bool usePlasma( int amount = 0 ) {
			
			if ( this.getPlasma() >= amount ) {
				this.adjustPlasma( -amount );
				return true;
			}
			return false;
		}

		// Function from file: alien_powers.dm
		public virtual bool adjustPlasma( dynamic amount = null ) {
			dynamic vessel = null;

			vessel = this.getorgan( typeof(Obj_Item_Organ_Internal_Alien_Plasmavessel) );

			if ( !Lang13.Bool( vessel ) ) {
				return false;
			}
			vessel.storedPlasma = Num13.MaxInt( ((int)( vessel.storedPlasma + Convert.ToDouble( amount ) )), 0 );
			vessel.storedPlasma = Num13.MinInt( vessel.storedPlasma, vessel.max_plasma );
			return true;
		}

		// Function from file: alien_powers.dm
		public int getPlasma(  ) {
			dynamic vessel = null;

			vessel = this.getorgan( typeof(Obj_Item_Organ_Internal_Alien_Plasmavessel) );

			if ( !Lang13.Bool( vessel ) ) {
				return 0;
			}
			return vessel.storedPlasma;
		}

		// Function from file: alien_powers.dm
		[VerbInfo( name: "Corrossive Acid" )]
		[VerbArg( 1, InputType.Obj | InputType.Tile, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void corrosive_acid( dynamic O = null ) {
			Mob user = null;
			dynamic A = null;

			
			if ( !( Task13.User is Mob_Living_Carbon ) ) {
				return;
			}
			user = Task13.User;
			A = Lang13.FindIn( typeof(Obj_Effect_ProcHolder_Alien_Acid), ((dynamic)user).abilities );

			if ( !Lang13.Bool( A ) ) {
				return;
			}

			if ( Convert.ToDouble( ((dynamic)user).getPlasma() ) > A.plasma_cost && ((Obj_Effect_ProcHolder_Alien_Acid)A).corrode( O ) ) {
				((dynamic)user).adjustPlasma( -A.plasma_cost );
			}
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_hud_back( dynamic I = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_hud_wear_mask( dynamic I = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public virtual void update_hud_head( dynamic I = null ) {
			return;
		}

		// Function from file: update_icons.dm
		public void update_hud_handcuffed(  ) {
			Obj_Screen_Inventory R = null;
			Obj_Screen_Inventory L = null;

			
			if ( this.hud_used != null ) {
				R = this.hud_used.r_hand_hud_object;
				L = this.hud_used.l_hand_hud_object;

				if ( R != null && L != null ) {
					
					if ( Lang13.Bool( this.handcuffed ) ) {
						R.overlays.Add( new Image( "icons/mob/screen_gen.dmi", null, "markus" ) );
						L.overlays.Add( new Image( "icons/mob/screen_gen.dmi", null, "gabrielle" ) );
					} else {
						R.overlays = null;
						L.overlays = null;
					}
				}
			}
			return;
		}

		// Function from file: update_icons.dm
		public void remove_overlay( int cache_index = 0 ) {
			
			if ( Lang13.Bool( this.overlays_standing[cache_index] ) ) {
				this.overlays.Remove( this.overlays_standing[cache_index] );
				this.overlays_standing[cache_index] = null;
			}
			return;
		}

		// Function from file: update_icons.dm
		public void apply_overlay( int cache_index = 0 ) {
			dynamic I = null;

			I = this.overlays_standing[cache_index];

			if ( Lang13.Bool( I ) ) {
				this.overlays.Add( I );
			}
			return;
		}

		// Function from file: life.dm
		public void natural_bodytemperature_stabilization(  ) {
			double body_temperature_difference = 0;

			body_temperature_difference = 310.41 - Convert.ToDouble( this.bodytemperature );

			dynamic _a = this.bodytemperature; // Was a switch-case, sorry for the mess.
			if ( Double.NegativeInfinity<=_a&&_a<=260.41 ) {
				
				if ( this.nutrition >= 2 ) {
					this.nutrition -= 2;
				}
				this.bodytemperature += Num13.MaxInt( ((int)( body_temperature_difference * this.metabolism_efficiency / 12 )), 10 );
			} else if ( 260.41<=_a&&_a<=310.41 ) {
				this.bodytemperature += Num13.MaxInt( ((int)( body_temperature_difference * this.metabolism_efficiency / 12 )), Num13.MinInt( ((int)( body_temperature_difference )), ((int)( 2.5 )) ) );
			} else if ( 310.41<=_a&&_a<=360.41 ) {
				this.bodytemperature += Num13.MinInt( ((int)( body_temperature_difference * this.metabolism_efficiency / 12 )), Num13.MaxInt( ((int)( body_temperature_difference )), ((int)( -2.5 )) ) );
			} else if ( 360.41<=_a&&_a<=Double.PositiveInfinity ) {
				this.bodytemperature += Num13.MinInt( ((int)( body_temperature_difference / 12 )), -10 );
			}
			return;
		}

		// Function from file: life.dm
		public virtual void handle_changeling(  ) {
			
			if ( this.mind != null && this.hud_used != null ) {
				
				if ( this.mind.changeling != null ) {
					this.mind.changeling.regenerate( this );
					this.hud_used.lingchemdisplay.invisibility = 0;
					this.hud_used.lingchemdisplay.maptext = "<div align='center' valign='middle' style='position:relative; top:0px; left:6px'><font color='#dd66dd'>" + Num13.Floor( this.mind.changeling.chem_charges ) + "</font></div>";
				} else {
					this.hud_used.lingchemdisplay.invisibility = 101;
				}
			}
			return;
		}

		// Function from file: life.dm
		public dynamic get_breath_from_internal( double volume_needed = 0 ) {
			
			if ( Lang13.Bool( this.v_internal ) ) {
				
				if ( !( this.contents.Find( this.v_internal ) != 0 ) ) {
					this.v_internal = null;
				}

				if ( !Lang13.Bool( this.wear_mask ) || !Lang13.Bool( this.wear_mask.flags & 8 ) ) {
					this.v_internal = null;
				}

				if ( Lang13.Bool( this.v_internal ) ) {
					this.update_internals_hud_icon( true );
					return ((Obj_Item_Weapon_Tank)this.v_internal).remove_air_volume( volume_needed );
				} else {
					this.update_internals_hud_icon( false );
				}
			}
			return null;
		}

		// Function from file: life.dm
		public virtual void handle_breath_temperature( dynamic breath = null ) {
			return;
		}

		// Function from file: life.dm
		public virtual bool check_breath( dynamic breath = null ) {
			int safe_oxy_min = 0;
			int safe_co2_max = 0;
			double safe_tox_max = 0;
			double SA_para_min = 0;
			double SA_sleep_min = 0;
			bool oxygen_used = false;
			double breath_pressure = 0;
			ByTable breath_gases = null;
			int O2_partialpressure = 0;
			double Toxins_partialpressure = 0;
			int CO2_partialpressure = 0;
			double ratio = 0;
			dynamic ratio2 = null;
			double SA_partialpressure = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( breath ) || ((GasMixture)breath).total_moles() == 0 ) {
				
				if ( Lang13.Bool( this.reagents.has_reagent( "epinephrine" ) ) ) {
					return false;
				}
				this.adjustOxyLoss( 1 );
				this.failed_last_breath = true;
				this.throw_alert( "oxy", typeof(Obj_Screen_Alert_Oxy) );
				return false;
			}
			safe_oxy_min = 16;
			safe_co2_max = 10;
			safe_tox_max = 0.05;
			SA_para_min = 1;
			SA_sleep_min = 5;
			oxygen_used = false;
			breath_pressure = ((GasMixture)breath).total_moles() * Convert.ToDouble( breath.temperature ) * 8.31 / 0.5;
			breath_gases = breath.gases;
			((GasMixture)breath).assert_gases( "o2", "plasma", "co2", "n2o" );
			O2_partialpressure = Convert.ToInt32( breath_gases["o2"][1] / ((GasMixture)breath).total_moles() * breath_pressure );
			Toxins_partialpressure = Convert.ToDouble( breath_gases["plasma"][1] / ((GasMixture)breath).total_moles() * breath_pressure );
			CO2_partialpressure = Convert.ToInt32( breath_gases["co2"][1] / ((GasMixture)breath).total_moles() * breath_pressure );

			if ( O2_partialpressure < safe_oxy_min ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					this.emote( "gasp" );
				}

				if ( O2_partialpressure > 0 ) {
					ratio = safe_oxy_min / O2_partialpressure;
					this.adjustOxyLoss( Num13.MinInt( ((int)( ratio * 5 )), 3 ) );
					this.failed_last_breath = true;
					oxygen_used = Lang13.Bool( breath_gases["o2"][1] * ratio / 6 );
				} else {
					this.adjustOxyLoss( 3 );
					this.failed_last_breath = true;
				}
				this.throw_alert( "oxy", typeof(Obj_Screen_Alert_Oxy) );
			} else {
				this.failed_last_breath = false;

				if ( Lang13.Bool( this.oxyloss ) ) {
					this.adjustOxyLoss( -5 );
				}
				oxygen_used = Lang13.Bool( breath_gases["o2"][1] / 6 );
				this.clear_alert( "oxy" );
			}
			breath_gases["o2"][1] -= oxygen_used ?1:0;
			breath_gases["co2"][1] += oxygen_used ?1:0;

			if ( CO2_partialpressure > safe_co2_max ) {
				
				if ( !( this.co2overloadtime != 0 ) ) {
					this.co2overloadtime = Game13.time;
				} else if ( Game13.time - this.co2overloadtime > 120 ) {
					this.Paralyse( 3 );
					this.adjustOxyLoss( 3 );

					if ( Game13.time - this.co2overloadtime > 300 ) {
						this.adjustOxyLoss( 8 );
					}
				}

				if ( Rand13.PercentChance( 20 ) ) {
					this.emote( "cough" );
				}
			} else {
				this.co2overloadtime = 0;
			}

			if ( Toxins_partialpressure > safe_tox_max ) {
				ratio2 = breath_gases["plasma"][1] / safe_tox_max * 10;

				if ( this.reagents != null ) {
					this.reagents.add_reagent( "plasma", Num13.MaxInt( 1, Num13.MinInt( Convert.ToInt32( ratio2 ), 10 ) ) );
				}
				this.throw_alert( "tox_in_air", typeof(Obj_Screen_Alert_ToxInAir) );
			} else {
				this.clear_alert( "tox_in_air" );
			}

			if ( Lang13.Bool( breath_gases["n2o"] ) ) {
				SA_partialpressure = Convert.ToDouble( breath_gases["n2o"][1] / ((GasMixture)breath).total_moles() * breath_pressure );

				if ( SA_partialpressure > SA_para_min ) {
					this.Paralyse( 3 );

					if ( SA_partialpressure > SA_sleep_min ) {
						this.Sleeping( Num13.MaxInt( this.sleeping + 2, 10 ) );
					}
				} else if ( SA_partialpressure > 0.01 ) {
					
					if ( Rand13.PercentChance( 20 ) ) {
						this.emote( Rand13.Pick(new object [] { "giggle", "laugh" }) );
					}
				}
			}
			breath.garbage_collect();
			this.handle_breath_temperature( breath );
			return true;
		}

		// Function from file: life.dm
		public virtual bool has_smoke_protection(  ) {
			return false;
		}

		// Function from file: life.dm
		public virtual void breathe(  ) {
			GasMixture environment = null;
			dynamic breath = null;
			Ent_Static loc_as_obj = null;
			Ent_Static loc_as_obj2 = null;
			double breath_moles = 0;
			Ent_Static loc_as_obj3 = null;

			
			if ( Lang13.Bool( this.reagents.has_reagent( "lexorin" ) ) ) {
				return;
			}

			if ( this.loc is Obj_Machinery_Atmospherics_Components_Unary_CryoCell ) {
				return;
			}

			if ( this.loc != null ) {
				environment = this.loc.return_air();
			}

			if ( Convert.ToDouble( this.health ) <= ( GlobalVars.config.health_threshold_crit ??0) ) {
				this.losebreath++;
			}

			if ( this.losebreath > 0 ) {
				this.losebreath--;

				if ( Rand13.PercentChance( 10 ) ) {
					this.emote( "gasp" );
				}

				if ( this.loc is Obj ) {
					loc_as_obj = this.loc;
					((dynamic)loc_as_obj).handle_internal_lifeform( this, 0 );
				}
			} else {
				breath = this.get_breath_from_internal( 0.5 );

				if ( !Lang13.Bool( breath ) ) {
					
					if ( this.loc is Obj ) {
						loc_as_obj2 = this.loc;
						breath = ((dynamic)loc_as_obj2).handle_internal_lifeform( this, 0.5 );
					} else if ( this.loc is Tile ) {
						breath_moles = 0;

						if ( environment != null ) {
							breath_moles = environment.total_moles() * 0.0011;
						}
						breath = this.loc.remove_air( breath_moles );
					}
				} else if ( this.loc is Obj ) {
					loc_as_obj3 = this.loc;
					((dynamic)loc_as_obj3).handle_internal_lifeform( this, 0 );
				}
			}
			this.check_breath( breath );

			if ( Lang13.Bool( breath ) ) {
				this.loc.assume_air( breath );
			}
			return;
		}

		// Function from file: inventory.dm
		public virtual void head_update( dynamic I = null, bool? forced = null ) {
			dynamic C = null;

			
			if ( I is Obj_Item_Clothing ) {
				C = I;

				if ( C.tint != 0 || Lang13.Bool( Lang13.Initial( C, "tint" ) ) ) {
					this.update_tint();
				}
			}

			if ( ( ( I.flags_inv ??0) & 1 ) != 0 || forced == true ) {
				this.update_inv_wear_mask();
			}
			this.update_inv_head();
			return;
		}

		// Function from file: inventory.dm
		public virtual void wear_mask_update( dynamic C = null, bool? unequip = null ) {
			unequip = unequip ?? true;

			
			if ( C.tint != 0 || Lang13.Bool( Lang13.Initial( C, "tint" ) ) ) {
				this.update_tint();
			}
			this.update_inv_wear_mask();
			return;
		}

		// Function from file: carbon.dm
		public void update_handcuffed(  ) {
			
			if ( Lang13.Bool( this.handcuffed ) ) {
				this.drop_r_hand();
				this.drop_l_hand();
				this.__CallVerb("Stop Pulling" );
				this.throw_alert( "handcuffed", typeof(Obj_Screen_Alert_Restrained_Handcuffed), null, this.handcuffed );
			} else {
				this.clear_alert( "handcuffed" );
			}
			this.update_inv_handcuffed();
			this.update_hud_handcuffed();
			return;
		}

		// Function from file: carbon.dm
		public void update_internals_hud_icon( bool? internal_state = null ) {
			internal_state = internal_state ?? false;

			
			if ( this.hud_used != null && this.hud_used.internals != null ) {
				this.hud_used.internals.icon_state = "internal" + internal_state;
			}
			return;
		}

		// Function from file: carbon.dm
		public virtual double get_total_tint(  ) {
			double _default = 0;

			dynamic HT = null;

			_default = 0;

			if ( this.head is Obj_Item_Clothing_Head ) {
				HT = this.head;
				_default += HT.tint;
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				_default += this.wear_mask.tint;
			}
			return _default;
		}

		// Function from file: carbon.dm
		public void update_tint(  ) {
			
			if ( !GlobalVars.tinted_weldhelh ) {
				return;
			}
			this.tinttotal = this.get_total_tint();

			if ( this.tinttotal >= 3 ) {
				this.overlay_fullscreen( "tint", typeof(Obj_Screen_Fullscreen_Blind) );
			} else if ( this.tinttotal >= 2 ) {
				this.overlay_fullscreen( "tint", typeof(Obj_Screen_Fullscreen_Impaired), 2 );
			} else {
				this.clear_fullscreen( "tint", 0 );
			}
			return;
		}

		// Function from file: carbon.dm
		public bool vomit( int? lost_nutrition = null, bool? blood = null, bool? stun = null, int? distance = null, bool? message = null ) {
			lost_nutrition = lost_nutrition ?? 10;
			blood = blood ?? false;
			stun = stun ?? true;
			distance = distance ?? 0;
			message = message ?? true;

			dynamic T = null;
			double i = 0;

			
			if ( this.is_muzzled() ) {
				
				if ( message == true ) {
					this.WriteMsg( "<span class='warning'>The muzzle prevents you from vomiting!</span>" );
				}
				return false;
			}

			if ( stun == true ) {
				this.Stun( 4 );
			}

			if ( this.nutrition < 100 && !( blood == true ) ) {
				
				if ( message == true ) {
					this.visible_message( "<span class='warning'>" + this + " dry heaves!</span>", "<span class='userdanger'>You try to throw up, but there's nothing your stomach!</span>" );
				}

				if ( stun == true ) {
					this.Weaken( 10 );
				}
			} else {
				
				if ( message == true ) {
					this.visible_message( "<span class='danger'>" + this + " throws up!</span>", "<span class='userdanger'>You throw up!</span>" );
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/splat.ogg", 50, 1 );
				T = GlobalFuncs.get_turf( this );

				foreach (dynamic _a in Lang13.IterateRange( 0, distance )) {
					i = _a;
					

					if ( blood == true ) {
						
						if ( Lang13.Bool( T ) ) {
							((Ent_Static)T).add_blood_floor( this );
						}

						if ( stun == true ) {
							this.adjustBruteLoss( 3 );
						}
					} else {
						
						if ( Lang13.Bool( T ) ) {
							((Ent_Static)T).add_vomit_floor( this );
						}
						this.nutrition -= lost_nutrition ??0;

						if ( stun == true ) {
							this.adjustToxLoss( -3 );
						}
					}
					T = Map13.GetStep( T, this.dir );

					if ( GlobalFuncs.is_blocked_turf( T ) ) {
						break;
					}
				}
			}
			return true;
		}

		// Function from file: carbon.dm
		public void add_abilities_to_panel(  ) {
			Obj_Effect_ProcHolder_Alien A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.abilities, typeof(Obj_Effect_ProcHolder_Alien) )) {
				A = _a;
				
				Interface13.SetStatPanel( "" + A.panel, ( A.plasma_cost > 0 ? "(" + A.plasma_cost + ")" : "" ), A );
			}
			return;
		}

		// Function from file: carbon.dm
		public void RemoveAbility( Obj_Effect_ProcHolder_Alien A = null ) {
			this.abilities.Remove( A );
			A.on_lose( this );

			if ( A.action != null ) {
				A.action.Remove( this );
			}
			return;
		}

		// Function from file: carbon.dm
		public void AddAbility( Obj_Effect_ProcHolder_Alien A = null ) {
			this.abilities.Add( A );
			A.on_gain( this );

			if ( A.has_action ) {
				
				if ( !( A.action != null ) ) {
					A.action = new Action_SpellAction_Alien();
					A.action.target = A;
					A.action.name = A.name;
					A.action.button_icon = A.action_icon;
					A.action.button_icon_state = A.action_icon_state;
					A.action.background_icon_state = A.action_background_icon_state;
				}
				A.action.Grant( this );
			}
			GlobalFuncs.sortInsert( this.abilities, typeof(GlobalFuncs).GetMethod( "cmp_abilities_cost" ), false );
			return;
		}

		// Function from file: carbon.dm
		public void accident( dynamic I = null ) {
			int modifier = 0;
			dynamic target = null;
			int? range = null;
			int? i = null;
			Tile new_turf = null;
			dynamic target2 = null;

			
			if ( !Lang13.Bool( I ) || Lang13.Bool( I.flags & 130 ) ) {
				return;
			}
			this.unEquip( I );
			modifier = 0;

			if ( Lang13.Bool( this.disabilities & 256 ) ) {
				modifier -= 40;
			}

			dynamic _a = Rand13.Int( 1, 100 ) + modifier; // Was a switch-case, sorry for the mess.
			if ( Double.NegativeInfinity<=_a&&_a<=0 ) {
				((Obj_Item)I).attack( this, this );
			} else if ( 1<=_a&&_a<=30 ) {
				((Ent_Dynamic)I).throw_impact( this );
			} else if ( 31<=_a&&_a<=60 ) {
				target = GlobalFuncs.get_turf( this.loc );
				range = Rand13.Int( 2, ((int)( I.throw_range ??0 )) );
				i = null;
				i = 1;

				while (( i ??0) < ( range ??0)) {
					new_turf = Map13.GetStep( target, this.dir );
					target = new_turf;

					if ( new_turf.density ) {
						break;
					}
					i++;
				}
				((Ent_Dynamic)I).throw_at( target, I.throw_range, I.throw_speed, this );
			} else if ( 61<=_a&&_a<=90 ) {
				target2 = GlobalFuncs.get_turf( this.loc );
				((Ent_Dynamic)I).throw_at( target2, I.throw_range, I.throw_speed, this );
			}
			return;
		}

		// Function from file: carbon.dm
		public bool is_mouth_covered( bool? head_only = null, bool? mask_only = null ) {
			head_only = head_only ?? false;
			mask_only = mask_only ?? false;

			
			if ( !( mask_only == true ) && Lang13.Bool( this.head ) && Lang13.Bool( this.head.flags_cover & 16 ) || !( head_only == true ) && Lang13.Bool( this.wear_mask ) && Lang13.Bool( this.wear_mask.flags_cover & 8 ) ) {
				return true;
			}
			return false;
		}

		// Function from file: carbon.dm
		public void uncuff(  ) {
			dynamic W = null;
			dynamic W2 = null;

			
			if ( Lang13.Bool( this.handcuffed ) ) {
				W = this.handcuffed;
				this.handcuffed = null;

				if ( this.buckled != null && this.buckled.buckle_requires_restraints ) {
					this.buckled.unbuckle_mob();
				}
				this.update_handcuffed();

				if ( this.client != null ) {
					this.client.screen.Remove( W );
				}

				if ( Lang13.Bool( W ) ) {
					W.loc = this.loc;
					((Obj_Item)W).dropped( this );

					if ( Lang13.Bool( W ) ) {
						W.layer = Lang13.Initial( W, "layer" );
					}
				}
			}

			if ( Lang13.Bool( this.legcuffed ) ) {
				W2 = this.legcuffed;
				this.legcuffed = null;
				this.update_inv_legcuffed();

				if ( this.client != null ) {
					this.client.screen.Remove( W2 );
				}

				if ( Lang13.Bool( W2 ) ) {
					W2.loc = this.loc;
					((Obj_Item)W2).dropped( this );

					if ( Lang13.Bool( W2 ) ) {
						W2.layer = Lang13.Initial( W2, "layer" );
					}
				}
			}
			return;
		}

		// Function from file: carbon.dm
		public virtual bool cuff_resist( dynamic I = null, double? breakouttime = null, bool? cuff_break = null ) {
			breakouttime = breakouttime ?? 600;
			cuff_break = cuff_break ?? false;

			double displaytime = 0;

			breakouttime = I.breakouttime;
			displaytime = ( breakouttime ??0) / 600;

			if ( !( cuff_break == true ) ) {
				this.visible_message( "<span class='warning'>" + this + " attempts to remove " + I + "!</span>" );
				this.WriteMsg( "<span class='notice'>You attempt to remove " + I + "... (This will take around " + displaytime + " minutes and you need to stand still.)</span>" );

				if ( GlobalFuncs.do_after( this, breakouttime, false, this ) ) {
					
					if ( I.loc != this || this.buckled != null ) {
						return false;
					}
					this.visible_message( "<span class='danger'>" + this + " manages to remove " + I + "!</span>" );
					this.WriteMsg( "<span class='notice'>You successfully remove " + I + ".</span>" );

					if ( I == this.handcuffed ) {
						this.handcuffed.loc = this.loc;
						((Obj_Item)this.handcuffed).dropped( this );
						this.handcuffed = null;

						if ( this.buckled != null && this.buckled.buckle_requires_restraints ) {
							this.buckled.unbuckle_mob();
						}
						this.update_handcuffed();
						return false;
					}

					if ( I == this.legcuffed ) {
						this.legcuffed.loc = this.loc;
						((Obj_Item)this.legcuffed).dropped();
						this.legcuffed = null;
						this.update_inv_legcuffed();
						return false;
					}
					return true;
				} else {
					this.WriteMsg( "<span class='warning'>You fail to remove " + I + "!</span>" );
				}
			} else {
				breakouttime = 50;
				this.visible_message( "<span class='warning'>" + this + " is trying to break " + I + "!</span>" );
				this.WriteMsg( "<span class='notice'>You attempt to break " + I + "... (This will take around 5 seconds and you need to stand still.)</span>" );

				if ( GlobalFuncs.do_after( this, breakouttime, false, this ) ) {
					
					if ( !( I.loc != null ) || this.buckled != null ) {
						return false;
					}
					this.visible_message( "<span class='danger'>" + this + " manages to break " + I + "!</span>" );
					this.WriteMsg( "<span class='notice'>You successfully break " + I + ".</span>" );
					GlobalFuncs.qdel( I );

					if ( I == this.handcuffed ) {
						this.handcuffed = null;
						this.update_handcuffed();
						return false;
					} else if ( I == this.legcuffed ) {
						this.legcuffed = null;
						this.update_inv_legcuffed();
						return false;
					}
					return true;
				} else {
					this.WriteMsg( "<span class='warning'>You fail to break " + I + "!</span>" );
				}
			}
			return false;
		}

		// Function from file: carbon.dm
		public void spin( int spintime = 0, int speed = 0 ) {
			double? D = null;

			D = this.dir;

			while (spintime >= speed) {
				Task13.Sleep( speed );

				switch ((int?)( D )) {
					case 1:
						D = GlobalVars.EAST;
						break;
					case 2:
						D = GlobalVars.WEST;
						break;
					case 4:
						D = GlobalVars.SOUTH;
						break;
					case 8:
						D = GlobalVars.NORTH;
						break;
				}
				this.dir = ((int)( D ??0 ));
				spintime -= speed;
			}
			return;
		}

		// Function from file: carbon.dm
		public virtual bool canBeHandcuffed(  ) {
			return false;
		}

		// Function from file: carbon.dm
		public void throw_mode_on(  ) {
			this.in_throw_mode = true;

			if ( this.client != null && this.hud_used != null ) {
				this.hud_used.throw_icon.icon_state = "act_throw_on";
			}
			return;
		}

		// Function from file: carbon.dm
		public void throw_mode_off(  ) {
			this.in_throw_mode = false;

			if ( this.client != null && this.hud_used != null ) {
				this.hud_used.throw_icon.icon_state = "act_throw_off";
			}
			return;
		}

		// Function from file: carbon.dm
		public virtual void toggle_throw_mode(  ) {
			
			if ( this.stat != 0 ) {
				return;
			}

			if ( this.in_throw_mode ) {
				this.throw_mode_off();
			} else {
				this.throw_mode_on();
			}
			return;
		}

		// Function from file: carbon.dm
		public virtual void help_shake_act( dynamic M = null ) {
			
			if ( this.on_fire ) {
				M.WriteMsg( "<span class='warning'>You can't put them out with just your bare hands!" );
				return;
			}

			if ( Convert.ToDouble( this.health ) >= 0 ) {
				
				if ( Lang13.Bool( this.lying ) ) {
					this.AdjustSleeping( -5 );
					((Ent_Static)M).visible_message( new Txt( "<span class='notice'>" ).item( M ).str( " shakes " ).item( this ).str( " trying to get " ).him_her_it_them().str( " up!</span>" ).ToString(), new Txt( "<span class='notice'>You shake " ).item( this ).str( " trying to get " ).him_her_it_them().str( " up!</span>" ).ToString() );
				} else {
					((Ent_Static)M).visible_message( new Txt( "<span class='notice'>" ).item( M ).str( " hugs " ).item( this ).str( " to make " ).him_her_it_them().str( " feel better!</span>" ).ToString(), new Txt( "<span class='notice'>You hug " ).item( this ).str( " to make " ).him_her_it_them().str( " feel better!</span>" ).ToString() );
				}
				this.AdjustParalysis( -3 );
				this.AdjustStunned( -3 );
				this.AdjustWeakened( -3 );
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
			}
			return;
		}

		// Function from file: carbon.dm
		public virtual void prepare_data_huds(  ) {
			Lang13.SuperCall();
			this.med_hud_set_health();
			this.med_hud_set_status();
			return;
		}

		// Function from file: living.dm
		public virtual void update_stamina(  ) {
			return;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_Carbon_Human humanize( int? tr_flags = null ) {
			tr_flags = tr_flags ?? 67;

			Mob_Living_Carbon_Human _default = null;

			ByTable implants = null;
			ByTable int_organs = null;
			Obj_Item_Weapon_Implant W = null;
			Obj_Item_Organ_Internal I = null;
			Obj_Item W2 = null;
			Dynamic_Overlay animation = null;
			Mob_Living_Carbon_Human O = null;
			Obj_Item C = null;
			Mutation_Human R = null;
			Disease D = null;
			Obj_Item_Weapon_Implant I2 = null;
			Obj_Item_Organ_Internal I3 = null;
			Obj_Item_Organ_Internal I4 = null;
			Obj_Effect_ProcHolder_Changeling_Humanform HF = null;
			dynamic A = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}
			implants = new ByTable();
			int_organs = new ByTable();

			if ( ( ( tr_flags ??0) & 16 ) != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Implant) )) {
					W = _a;
					
					implants.Add( W );
				}
			}

			if ( ( ( tr_flags ??0) & 256 ) != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
					I = _b;
					
					int_organs.Add( I );
					I.Remove( this, true );
				}
			}

			if ( ( ( tr_flags ??0) & 1 ) != 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.contents - implants - int_organs, typeof(Obj_Item) )) {
					W2 = _c;
					
					this.unEquip( W2 );

					if ( this.client != null ) {
						this.client.screen.Remove( W2 );
					}

					if ( W2 != null ) {
						W2.loc = this.loc;
						W2.dropped( this );
						W2.layer = Convert.ToDouble( Lang13.Initial( W2, "layer" ) );
					}
				}
			}
			this.notransform = 1;
			this.canmove = false;
			this.stunned = 1;
			this.icon = null;
			this.overlays.Cut();
			this.invisibility = 101;
			animation = new Dynamic_Overlay( this.loc );
			animation.icon_state = "blank";
			animation.icon = "icons/mob/mob.dmi";
			animation.master = this;
			Icon13.Flick( "monkey2h", animation );
			Task13.Sleep( 22 );
			O = new Mob_Living_Carbon_Human( this.loc );

			foreach (dynamic _d in Lang13.Enumerate( O.loc, typeof(Obj_Item) )) {
				C = _d;
				
				O.equip_to_appropriate_slot( C );
			}
			GlobalFuncs.qdel( animation );
			this.dna.transfer_identity( O );
			O.updateappearance( null, true );

			if ( String13.CompareIgnoreCase( String13.SubStr( O.dna.real_name, 1, 7 ), "monkey" ) ) {
				O.real_name = GlobalFuncs.random_unique_name( O.gender );
				O.dna.generate_unique_enzymes(  );
			} else {
				O.real_name = O.dna.real_name;
			}
			O.name = O.real_name;

			if ( ( ( tr_flags ??0) & 32 ) != 0 ) {
				O.dna.struc_enzymes = this.dna.struc_enzymes;
				R = GlobalVars.mutations_list["Monkified"];
				O.dna.struc_enzymes = R.set_se( O.dna.struc_enzymes, false );
				O.domutcheck();
			}

			if ( Lang13.Bool( this.suiciding ) ) {
				O.suiciding = this.suiciding;
			}
			O.loc = this.loc;

			if ( ( ( tr_flags ??0) & 2 ) != 0 ) {
				O.viruses = this.viruses;
				this.viruses = new ByTable();

				foreach (dynamic _e in Lang13.Enumerate( O.viruses, typeof(Disease) )) {
					D = _e;
					
					D.affected_mob = O;
					D.holder = O;
				}
				O.med_hud_set_status();
			}

			if ( ( ( tr_flags ??0) & 4 ) != 0 ) {
				O.setToxLoss( this.getToxLoss() );
				O.adjustBruteLoss( this.getBruteLoss() );
				O.setOxyLoss( this.getOxyLoss() );
				O.adjustFireLoss( this.getFireLoss() );
				O.radiation = this.radiation;
			}

			if ( ( ( tr_flags ??0) & 16 ) != 0 ) {
				
				foreach (dynamic _f in Lang13.Enumerate( implants, typeof(Obj_Item_Weapon_Implant) )) {
					I2 = _f;
					
					I2.loc = O;
					I2.implanted = O;
				}
				O.sec_hud_set_implants();
			}

			if ( ( ( tr_flags ??0) & 256 ) != 0 ) {
				
				foreach (dynamic _g in Lang13.Enumerate( O.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
					I3 = _g;
					
					GlobalFuncs.qdel( I3 );
				}

				foreach (dynamic _h in Lang13.Enumerate( int_organs, typeof(Obj_Item_Organ_Internal) )) {
					I4 = _h;
					
					I4.Insert( O, 1 );
				}
			}

			if ( this.mind != null ) {
				this.mind.transfer_to( O );

				if ( O.mind.changeling != null ) {
					
					foreach (dynamic _i in Lang13.Enumerate( O.mind.changeling.purchasedpowers, typeof(Obj_Effect_ProcHolder_Changeling_Humanform) )) {
						HF = _i;
						
						this.mind.changeling.purchasedpowers.Remove( HF );
					}
				}
			}
			O.a_intent = "help";

			if ( ( ( tr_flags ??0) & 64 ) != 0 ) {
				O.WriteMsg( "<B>You are now a human.</B>" );
			}
			_default = O;

			foreach (dynamic _j in Lang13.Enumerate( this.loc.vars )) {
				A = _j;
				

				if ( this.loc.vars[A] == this ) {
					this.loc.vars[A] = O;
				}
			}
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_Carbon_Monkey monkeyize( int? tr_flags = null ) {
			tr_flags = tr_flags ?? 67;

			Mob_Living_Carbon_Monkey _default = null;

			ByTable implants = null;
			ByTable int_organs = null;
			Obj_Item_Weapon_Implant W = null;
			Obj_Item_Organ_Internal I = null;
			Obj_Item W2 = null;
			Dynamic_Overlay animation = null;
			Mob_Living_Carbon_Monkey O = null;
			Mutation_Human R = null;
			Disease D = null;
			Obj_Item_Weapon_Implant I2 = null;
			Obj_Item_Organ_Internal I3 = null;
			Obj_Item_Organ_Internal I4 = null;
			dynamic A = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}
			implants = new ByTable();
			int_organs = new ByTable();

			if ( ( ( tr_flags ??0) & 16 ) != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Implant) )) {
					W = _a;
					
					implants.Add( W );
				}
			}

			if ( ( ( tr_flags ??0) & 256 ) != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
					I = _b;
					
					int_organs.Add( I );
					I.Remove( this, true );
				}
			}

			if ( ( ( tr_flags ??0) & 1 ) != 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.contents - implants - int_organs, typeof(Obj_Item) )) {
					W2 = _c;
					
					this.unEquip( W2 );
				}
			}
			this.notransform = 1;
			this.canmove = false;
			this.stunned = 1;
			this.icon = null;
			this.overlays.Cut();
			this.invisibility = 101;
			animation = new Dynamic_Overlay( this.loc );
			animation.icon_state = "blank";
			animation.icon = "icons/mob/mob.dmi";
			animation.master = this;
			Icon13.Flick( "h2monkey", animation );
			Task13.Sleep( 22 );
			O = new Mob_Living_Carbon_Monkey( this.loc );
			GlobalFuncs.qdel( animation );

			if ( ( ( tr_flags ??0) & 8 ) != 0 ) {
				O.name = "monkey (" + String13.SubStr( Num13.Md5( this.real_name ), 2, 6 ) + ")";
				O.real_name = "monkey (" + String13.SubStr( Num13.Md5( this.real_name ), 2, 6 ) + ")";
			}
			this.dna.transfer_identity( O );
			O.updateappearance( false );

			if ( ( ( tr_flags ??0) & 32 ) != 0 ) {
				O.dna.struc_enzymes = this.dna.struc_enzymes;
				R = GlobalVars.mutations_list["Monkified"];
				O.dna.struc_enzymes = R.set_se( O.dna.struc_enzymes, true );
			}

			if ( Lang13.Bool( this.suiciding ) ) {
				O.suiciding = this.suiciding;
			}
			O.loc = this.loc;
			O.a_intent = "harm";

			if ( ( ( tr_flags ??0) & 2 ) != 0 ) {
				O.viruses = this.viruses;
				this.viruses = new ByTable();

				foreach (dynamic _d in Lang13.Enumerate( O.viruses, typeof(Disease) )) {
					D = _d;
					
					D.affected_mob = O;
					D.holder = O;
				}
			}

			if ( ( ( tr_flags ??0) & 4 ) != 0 ) {
				O.setToxLoss( this.getToxLoss() );
				O.adjustBruteLoss( this.getBruteLoss() );
				O.setOxyLoss( this.getOxyLoss() );
				O.adjustFireLoss( this.getFireLoss() );
				O.radiation = this.radiation;
			}

			if ( ( ( tr_flags ??0) & 16 ) != 0 ) {
				
				foreach (dynamic _e in Lang13.Enumerate( implants, typeof(Obj_Item_Weapon_Implant) )) {
					I2 = _e;
					
					I2.loc = O;
					I2.implanted = O;
				}
			}

			if ( ( ( tr_flags ??0) & 256 ) != 0 ) {
				
				foreach (dynamic _f in Lang13.Enumerate( O.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
					I3 = _f;
					
					GlobalFuncs.qdel( I3 );
				}

				foreach (dynamic _g in Lang13.Enumerate( int_organs, typeof(Obj_Item_Organ_Internal) )) {
					I4 = _g;
					
					I4.Insert( O, 1 );
				}
			}

			if ( this.mind != null ) {
				this.mind.transfer_to( O );

				if ( O.mind.changeling != null ) {
					O.mind.changeling.purchasedpowers.Add( new Obj_Effect_ProcHolder_Changeling_Humanform( null ) );
				}
			}

			if ( ( ( tr_flags ??0) & 64 ) != 0 ) {
				O.WriteMsg( "<B>You are now a monkey.</B>" );
			}

			foreach (dynamic _h in Lang13.Enumerate( this.loc.vars )) {
				A = _h;
				

				if ( this.loc.vars[A] == this ) {
					this.loc.vars[A] = O;
				}
			}
			_default = O;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: Hallucination.dm
		public void hallucinate( dynamic hal_type = null ) {
			ByTable creepyasssounds = null;
			ByTable slots_free = null;
			Mob_Living_Carbon H = null;
			ByTable possible_points = null;
			Tile_Simulated_Floor F = null;
			dynamic target = null;
			ByTable possible_points2 = null;
			Tile_Simulated_Floor F2 = null;
			dynamic target2 = null;
			Image body = null;
			Matrix M = null;

			
			dynamic _g = hal_type; // Was a switch-case, sorry for the mess.
			if ( _g=="xeno" ) {
				new Obj_Effect_Hallucination_XenoAttack( this.loc, this );
			} else if ( _g=="singulo" ) {
				new Obj_Effect_Hallucination_SingularityScare( this.loc, this );
			} else if ( _g=="battle" ) {
				new Obj_Effect_Hallucination_Battle( this.loc, this );
			} else if ( _g=="flood" ) {
				new Obj_Effect_Hallucination_FakeFlood( this.loc, this );
			} else if ( _g=="delusion" ) {
				new Obj_Effect_Hallucination_Delusion( this.loc, this );
			} else if ( _g=="fake" ) {
				new Obj_Effect_Hallucination_Fakeattacker( this.loc, this );
			} else if ( _g=="bolts" ) {
				new Obj_Effect_Hallucination_Bolts( this.loc, this );
			} else if ( _g=="bolts_minor" ) {
				new Obj_Effect_Hallucination_Bolts( this.loc, this, Rand13.Int( 1, 2 ) );
			} else if ( _g=="whispers" ) {
				new Obj_Effect_Hallucination_Whispers( this.loc, this );
			} else if ( _g=="message" ) {
				new Obj_Effect_Hallucination_Message( this.loc, this );
			} else if ( _g=="sounds" ) {
				
				switch ((int)( Rand13.Int( 1, 18 ) )) {
					case 1:
						this.WriteMsg( "sound/machines/airlock.ogg" );
						break;
					case 2:
						
						if ( Rand13.PercentChance( 50 ) ) {
							this.WriteMsg( "sound/effects/Explosion1.ogg" );
						} else {
							this.WriteMsg( "sound/effects/Explosion2.ogg" );
						}
						break;
					case 3:
						this.WriteMsg( "sound/effects/explosionfar.ogg" );
						break;
					case 4:
						this.WriteMsg( "sound/effects/Glassbr1.ogg" );
						break;
					case 5:
						this.WriteMsg( "sound/effects/Glassbr2.ogg" );
						break;
					case 6:
						this.WriteMsg( "sound/effects/Glassbr3.ogg" );
						break;
					case 7:
						this.WriteMsg( "sound/machines/twobeep.ogg" );
						break;
					case 8:
						this.WriteMsg( "sound/machines/windowdoor.ogg" );
						break;
					case 9:
						this.WriteMsg( "sound/weapons/gunshot.ogg" );
						Task13.Schedule( Rand13.Int( 10, 30 ), (Task13.Closure)(() => {
							this.WriteMsg( "sound/weapons/gunshot.ogg" );
							return;
						}));
						break;
					case 10:
						this.WriteMsg( "sound/weapons/smash.ogg" );
						break;
					case 11:
						this.WriteMsg( "sound/weapons/taser.ogg" );
						Task13.Schedule( Rand13.Int( 10, 30 ), (Task13.Closure)(() => {
							this.WriteMsg( "sound/weapons/taser.ogg" );
							return;
						}));
						break;
					case 12:
						creepyasssounds = new ByTable(new object [] { 
							"sound/effects/ghost.ogg", 
							"sound/effects/ghost2.ogg", 
							"sound/effects/Heart Beat.ogg", 
							"sound/effects/screech.ogg", 
							"sound/hallucinations/behind_you1.ogg", 
							"sound/hallucinations/behind_you2.ogg", 
							"sound/hallucinations/far_noise.ogg", 
							"sound/hallucinations/growl1.ogg", 
							"sound/hallucinations/growl2.ogg", 
							"sound/hallucinations/growl3.ogg", 
							"sound/hallucinations/im_here1.ogg", 
							"sound/hallucinations/im_here2.ogg", 
							"sound/hallucinations/i_see_you1.ogg", 
							"sound/hallucinations/i_see_you2.ogg", 
							"sound/hallucinations/look_up1.ogg", 
							"sound/hallucinations/look_up2.ogg", 
							"sound/hallucinations/over_here1.ogg", 
							"sound/hallucinations/over_here2.ogg", 
							"sound/hallucinations/over_here3.ogg", 
							"sound/hallucinations/turn_around1.ogg", 
							"sound/hallucinations/turn_around2.ogg", 
							"sound/hallucinations/veryfar_noise.ogg", 
							"sound/hallucinations/wail.ogg"
						 });
						this.WriteMsg( Rand13.PickFromTable( creepyasssounds ) );
						break;
					case 13:
						this.WriteMsg( "<span class='warning'>You feel a tiny prick!</span>" );
						break;
					case 14:
						this.WriteMsg( "<h1 class='alert'>Priority Announcement</h1>" );
						this.WriteMsg( "<br><br><span class='alert'>The Emergency Shuttle has docked with the station. You have 3 minutes to board the Emergency Shuttle.</span><br><br>" );
						this.WriteMsg( new Sound( "sound/AI/shuttledock.ogg" ) );
						break;
					case 15:
						this.WriteMsg( "sound/items/welder.ogg" );
						break;
					case 16:
						this.WriteMsg( "sound/items/Screwdriver.ogg" );
						break;
					case 17:
						this.WriteMsg( "sound/weapons/saberon.ogg" );
						break;
					case 18:
						this.WriteMsg( "sound/weapons/saberoff.ogg" );
						break;
				}
			} else if ( _g=="hudscrew" ) {
				this.hal_screwyhud = Convert.ToInt32( Rand13.Pick(new object [] { 1, 2, 3, 3, 4, 4 }) );
				Task13.Schedule( Rand13.Int( 100, 250 ), (Task13.Closure)(() => {
					this.hal_screwyhud = 0;
					return;
				}));
			} else if ( _g=="items" ) {
				
				if ( !( this.halitem != null ) ) {
					this.halitem = new Obj();
					slots_free = new ByTable(new object [] { "CENTER: 16,SOUTH:5", "CENTER:-16,SOUTH:5" });

					if ( Lang13.Bool( this.l_hand ) ) {
						slots_free.Remove( "CENTER: 16,SOUTH:5" );
					}

					if ( Lang13.Bool( this.r_hand ) ) {
						slots_free.Remove( "CENTER:-16,SOUTH:5" );
					}

					if ( this is Mob_Living_Carbon_Human ) {
						H = this;

						if ( !Lang13.Bool( ((dynamic)H).belt ) ) {
							slots_free.Add( "CENTER-3:14,SOUTH:5" );
						}

						if ( !Lang13.Bool( ((dynamic)H).l_store ) ) {
							slots_free.Add( "CENTER+1:18,SOUTH:5" );
						}

						if ( !Lang13.Bool( ((dynamic)H).r_store ) ) {
							slots_free.Add( "CENTER+2:20,SOUTH:5" );
						}
					}

					if ( slots_free.len != 0 ) {
						this.halitem.screen_loc = Rand13.PickFromTable( slots_free );
						this.halitem.layer = 50;

						switch ((int)( Rand13.Int( 1, 6 ) )) {
							case 1:
								this.halitem.icon = "icons/obj/guns/projectile.dmi";
								this.halitem.icon_state = "revolver";
								this.halitem.name = "Revolver";
								break;
							case 2:
								this.halitem.icon = "icons/obj/assemblies.dmi";
								this.halitem.icon_state = "plastic-explosive0";
								this.halitem.name = "Mysterious Package";

								if ( Rand13.PercentChance( 25 ) ) {
									this.halitem.icon_state = "c4small_1";
								}
								break;
							case 3:
								this.halitem.icon = "icons/obj/weapons.dmi";
								this.halitem.icon_state = "sword1";
								this.halitem.name = "Sword";
								break;
							case 4:
								this.halitem.icon = "icons/obj/weapons.dmi";
								this.halitem.icon_state = "stunbaton";
								this.halitem.name = "Stun Baton";
								break;
							case 5:
								this.halitem.icon = "icons/obj/card.dmi";
								this.halitem.icon_state = "emag";
								this.halitem.name = "Cryptographic Sequencer";
								break;
							case 6:
								this.halitem.icon = "icons/obj/grenade.dmi";
								this.halitem.icon_state = "flashbang1";
								this.halitem.name = "Flashbang";
								break;
						}

						if ( this.client != null ) {
							this.client.screen.Add( this.halitem );
						}
						Task13.Schedule( Rand13.Int( 100, 250 ), (Task13.Closure)(() => {
							GlobalFuncs.qdel( this.halitem );
							return;
						}));
					}
				}
			} else if ( _g=="dangerflash" ) {
				
				if ( !( this.halimage != null ) ) {
					possible_points = new ByTable();

					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( Game13.view, this ), typeof(Tile_Simulated_Floor) )) {
						F = _c;
						
						possible_points.Add( F );
					}

					if ( possible_points.len != 0 ) {
						target = Rand13.PickFromTable( possible_points );

						switch ((int)( Rand13.Int( 1, 3 ) )) {
							case 1:
								this.halimage = new Image( "icons/turf/space.dmi", target, "" + Rand13.Int( 1, 25 ), GlobalVars.TURF_LAYER );
								break;
							case 2:
								this.halimage = new Image( "icons/effects/fire.dmi", target, "1", GlobalVars.TURF_LAYER );
								break;
							case 3:
								this.halimage = new Image( "icons/obj/assemblies.dmi", target, "plastic-explosive2", 3.01 );
								break;
						}

						if ( this.client != null ) {
							this.client.images.Add( this.halimage );
						}
						Task13.Schedule( Rand13.Int( 10, 50 ), (Task13.Closure)(() => {
							
							if ( this.client != null ) {
								this.client.images.Remove( this.halimage );
							}
							this.halimage = null;
							return;
						}));
					}
				}
			} else if ( _g=="death" ) {
				this.hal_screwyhud = 1;
				this.SetSleeping( 20 );
				Task13.Schedule( Rand13.Int( 50, 100 ), (Task13.Closure)(() => {
					this.hal_screwyhud = 0;
					this.SetSleeping( 0 );
					return;
				}));
			} else if ( _g=="husks" ) {
				
				if ( !( this.halbody != null ) ) {
					possible_points2 = new ByTable();

					foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInView( Game13.view, this ), typeof(Tile_Simulated_Floor) )) {
						F2 = _e;
						
						possible_points2.Add( F2 );
					}

					if ( possible_points2.len != 0 ) {
						target2 = Rand13.PickFromTable( possible_points2 );

						switch ((int)( Rand13.Int( 1, 4 ) )) {
							case 1:
								body = new Image( "icons/mob/human.dmi", target2, "husk_s", GlobalVars.TURF_LAYER );
								M = Num13.Matrix();
								M.Turn( 90 );
								body.transform = M;
								this.halbody = body;
								break;
							case 2:
							case 3:
								this.halbody = new Image( "icons/mob/human.dmi", target2, "husk_s", GlobalVars.TURF_LAYER );
								break;
							case 4:
								this.halbody = new Image( "icons/mob/alien.dmi", target2, "alienother", GlobalVars.TURF_LAYER );
								break;
						}

						if ( this.client != null ) {
							this.client.images.Add( this.halbody );
						}
						Task13.Schedule( Rand13.Int( 50, 80 ), (Task13.Closure)(() => {
							
							if ( this.client != null ) {
								this.client.images.Remove( this.halbody );
							}
							this.halbody = null;
							return;
						}));
					}
				}
			}
			return;
		}

		// Function from file: Hallucination.dm
		public void handle_hallucinations(  ) {
			ByTable minor = null;
			ByTable medium = null;
			ByTable major = null;
			int grade = 0;
			ByTable current = null;
			int trip_length = 0;
			dynamic a = null;
			dynamic b = null;
			dynamic c = null;
			dynamic halpick = null;

			
			if ( this.handling_hal ) {
				return;
			}
			minor = new ByTable().Set( "sounds", 20 ).Set( "bolts_minor", 10 ).Set( "whispers", 15 ).Set( "message", 5 );
			medium = new ByTable().Set( "hudscrew", 15 ).Set( "items", 15 ).Set( "dangerflash", 15 ).Set( "bolts", 10 ).Set( "flood", 10 ).Set( "husks", 10 ).Set( "battle", 10 );
			major = new ByTable().Set( "fake", 10 ).Set( "death", 5 ).Set( "xeno", 10 ).Set( "singulo", 10 ).Set( "delusion", 10 );
			grade = 0;
			current = new ByTable();
			trip_length = 0;
			this.handling_hal = true;

			while (this.hallucination > 20) {
				Task13.Sleep( ((int)( Rand13.Int( 200, 500 ) / ( this.hallucination / 25 ) )) );
				trip_length += 1;

				if ( Rand13.PercentChance( Num13.MinInt( 20, trip_length * 2 ) ) ) {
					grade = Num13.MinInt( 3, grade + 1 );
				}

				if ( Rand13.PercentChance( 20 ) ) {
					continue;
				}
				current = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( minor )) {
					a = _a;
					
					current[a] = minor[a] * ( grade == 0 ? 2 : 1 );
				}

				foreach (dynamic _b in Lang13.Enumerate( medium )) {
					b = _b;
					
					current[b] = medium[b] * ( grade == 1 ? 2 : 1 );
				}

				foreach (dynamic _c in Lang13.Enumerate( major )) {
					c = _c;
					
					current[c] = major[c] * ( grade == 2 ? 2 : 1 );
				}
				halpick = GlobalFuncs.pickweight( current );
				this.hallucinate( halpick );
			}
			this.handling_hal = false;
			return;
		}

		// Function from file: Dreaming.dm
		public void handle_dreams(  ) {
			
			if ( Rand13.PercentChance( 5 ) && !this.dreaming ) {
				this.dream();
			}
			return;
		}

		// Function from file: Dreaming.dm
		public bool dream(  ) {
			ByTable dreams = null;
			int? i = null;
			dynamic dream_image = null;

			this.dreaming = true;
			dreams = new ByTable(new object [] { 
				"an ID card", 
				"a bottle", 
				"a familiar face", 
				"a crewmember", 
				"a toolbox", 
				"a security officer", 
				"the captain", 
				"voices from all around", 
				"deep space", 
				"a doctor", 
				"the engine", 
				"a traitor", 
				"an ally", 
				"darkness", 
				"light", 
				"a scientist", 
				"a monkey", 
				"a catastrophe", 
				"a loved one", 
				"a gun", 
				"warmth", 
				"freezing", 
				"the sun", 
				"a hat", 
				"the Luna", 
				"a ruined station", 
				"a planet", 
				"plasma", 
				"air", 
				"the medical bay", 
				"the bridge", 
				"blinking lights", 
				"a blue light", 
				"an abandoned laboratory", 
				"Nanotrasen", 
				"The Syndicate", 
				"blood", 
				"healing", 
				"power", 
				"respect", 
				"riches", 
				"space", 
				"a crash", 
				"happiness", 
				"pride", 
				"a fall", 
				"water", 
				"flames", 
				"ice", 
				"melons", 
				"flying"
			 });
			i = null;
			i = Rand13.Int( 1, 4 );

			while (( i ??0) > 0) {
				dream_image = Rand13.PickFromTable( dreams );
				dreams.Remove( dream_image );
				this.WriteMsg( "<span class='notice'><i>... " + dream_image + " ...</i></span>" );
				Task13.Sleep( Rand13.Int( 40, 70 ) );

				if ( this.paralysis <= 0 ) {
					this.dreaming = false;
					return false;
				}
				i--;
			}
			this.dreaming = false;
			return true;
		}

		// Function from file: wildwest.dm
		[VerbInfo( name: "Resurrection", group: "Immortality" )]
		public bool immortality(  ) {
			Mob C = null;

			C = Task13.User;

			if ( !( C.stat != 0 ) ) {
				C.WriteMsg( "<span class='notice'>You're not dead yet!</span>" );
				return false;
			}
			C.WriteMsg( "<span class='notice'>Death is not your end!</span>" );
			Task13.Schedule( Rand13.Int( 80, 120 ), (Task13.Closure)(() => {
				((Mob_Living)C).revive();
				C.WriteMsg( "<span class='notice'>You have regenerated.</span>" );
				C.visible_message( "<span class='warning'>" + Task13.User + " appears to wake from the dead, having healed all wounds.</span>" );
				C.update_canmove();
				return;
			}));
			return true;
		}

		// Function from file: tiny_prick.dm
		public void unset_sting(  ) {
			
			if ( this.mind != null && this.mind.changeling != null && this.mind.changeling.chosen_sting != null ) {
				this.mind.changeling.chosen_sting.unset_sting( this );
			}
			return;
		}

		// Function from file: dna.dm
		public virtual void updateappearance( bool? icon_update = null, bool? mutcolor_update = null, bool? mutations_overlay_update = null ) {
			icon_update = icon_update ?? true;
			mutcolor_update = mutcolor_update ?? false;
			mutations_overlay_update = mutations_overlay_update ?? false;

			
			if ( !( this.has_dna() != null ) ) {
				return;
			}
			this.gender = ( Lang13.Bool( GlobalFuncs.deconstruct_block( GlobalFuncs.getblock( this.dna.uni_identity, 5 ), 2 ) - 1 ) ? GlobalVars.FEMALE : GlobalVars.MALE );
			return;
		}

		// Function from file: dna.dm
		public void create_dna(  ) {
			this.dna = new Dna( this );

			if ( !Lang13.Bool( this.dna.species ) ) {
				this.dna.species = new Species_Human();
			}
			return;
		}

		// Function from file: data_huds.dm
		public void med_hud_set_status(  ) {
			dynamic holder = null;

			holder = this.hud_list["2"];

			if ( this.stat == 2 ) {
				holder.icon_state = "huddead";
			} else if ( ( this.status_flags & 32768 ) != 0 ) {
				holder.icon_state = "hudxeno";
			} else if ( this.check_virus() ) {
				holder.icon_state = "hudill";
			} else {
				holder.icon_state = "hudhealthy";
			}
			return;
		}

		// Function from file: data_huds.dm
		public void med_hud_set_health(  ) {
			dynamic holder = null;
			dynamic T = null;

			holder = this.hud_list["1"];

			if ( this.stat == 2 ) {
				holder.icon_state = "hudhealth-100";
			} else {
				holder.icon_state = "hud" + GlobalFuncs.RoundHealth( this.health );
			}
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				GlobalVars.crewmonitor.queueUpdate( Convert.ToInt32( T.z ) );
			}
			return;
		}

		// Function from file: data_huds.dm
		public void update_suit_sensors(  ) {
			dynamic B = null;
			dynamic T = null;

			B = GlobalVars.huds[3];
			B.update_suit_sensors( this );
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				GlobalVars.crewmonitor.queueUpdate( Convert.ToInt32( T.z ) );
			}
			return;
		}

		// Function from file: data_huds.dm
		public bool check_virus(  ) {
			Disease D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _a;
				

				if ( !( ( D.visibility_flags & 1 ) != 0 ) && D.severity != "No threat" ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: mutations.dm
		public virtual void update_mutations_overlay(  ) {
			return;
		}

		// Function from file: other_mobs.dm
		public override bool RestrainedClickOn( Ent_Static A = null ) {
			return false;
		}

		// Function from file: click.dm
		public override void AltClickOn( Ent_Static A = null ) {
			
			if ( !( this.stat != 0 ) && this.mind != null && this.mind.changeling != null && this.mind.changeling.chosen_sting != null && A is Mob_Living_Carbon && A != this ) {
				this.next_click = Game13.time + 5;
				this.mind.changeling.chosen_sting.try_to_sting( this, A );
			} else {
				base.AltClickOn( A );
			}
			return;
		}

		// Function from file: click.dm
		public override void MiddleClickOn( Ent_Static A = null ) {
			
			if ( !( this.stat != 0 ) && this.mind != null && this.mind.changeling != null && this.mind.changeling.chosen_sting != null && A is Mob_Living_Carbon && A != this ) {
				this.next_click = Game13.time + 5;
				this.mind.changeling.chosen_sting.try_to_sting( this, A );
			} else {
				this.swap_hand();
			}
			return;
		}

	}

}