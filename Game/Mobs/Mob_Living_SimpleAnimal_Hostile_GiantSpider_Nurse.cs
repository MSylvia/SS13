// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_GiantSpider_Nurse : Mob_Living_SimpleAnimal_Hostile_GiantSpider {

		public int fed = 0;
		public Obj cocoon_target = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "nurse";
			this.icon_dead = "nurse_dead";
			this.maxHealth = 75;
			this.health = 75;
			this.melee_damage_lower = 5;
			this.melee_damage_upper = 10;
			this.poison_per_bite = 10;
			this.poison_type = "stoxin";
			this.speed = 2.5;
			this.icon_state = "nurse";
		}

		public Mob_Living_SimpleAnimal_Hostile_GiantSpider_Nurse ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: nurse.dm
		public override bool Life(  ) {
			ByTable can_see = null;
			Mob_Living C = null;
			dynamic W = null;
			dynamic E = null;
			Obj O = null;
			Obj D = null;
			Obj D2 = null;
			dynamic W2 = null;
			Obj_Effect_Spider_Cocoon C2 = null;
			bool large_cocoon = false;
			Mob_Living M = null;
			Obj_Item I = null;
			Obj_Structure S = null;
			Obj_Machinery M2 = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.loc is Obj_Item_Device_Mobcapsule ) {
				return false;
			}
			base.Life();

			if ( !Lang13.Bool( this.stat ) ) {
				
				if ( this.stance == 1 ) {
					can_see = Map13.FetchInView( 10, this );

					if ( !( this.busy != 0 ) && Rand13.PercentChance( 30 ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( can_see, typeof(Mob_Living) )) {
							C = _a;
							

							if ( Lang13.Bool( C.stat ) && !( C is Mob_Living_SimpleAnimal_Hostile_GiantSpider ) ) {
								this.cocoon_target = C;
								this.busy = 3;
								this.Goto( C, this.move_to_delay );
								this.GiveUp( C );
								return false;
							}
						}
						W = Lang13.FindIn( typeof(Obj_Effect_Spider_Stickyweb), GlobalFuncs.get_turf( this ) );

						if ( !Lang13.Bool( W ) ) {
							this.busy = 1;
							this.visible_message( new Txt( "<span class='notice'>" ).the( this ).item().str( " begins to secrete a sticky substance.</span>" ).ToString() );
							this.stop_automated_movement = true;
							Task13.Schedule( 40, (Task13.Closure)(() => {
								
								if ( this.busy == 1 ) {
									W = Lang13.FindIn( typeof(Obj_Effect_Spider_Stickyweb), GlobalFuncs.get_turf( this ) );

									if ( !Lang13.Bool( W ) ) {
										new Obj_Effect_Spider_Stickyweb( this.loc );
									}
									this.busy = 0;
									this.stop_automated_movement = false;
								}
								return;
							}));
						} else if ( this.fed > 0 ) {
							E = Lang13.FindIn( typeof(Obj_Effect_Spider_Eggcluster), GlobalFuncs.get_turf( this ) );

							if ( !Lang13.Bool( E ) ) {
								this.busy = 2;
								this.visible_message( new Txt( "<span class='notice'>" ).the( this ).item().str( " begins to lay a cluster of eggs.</span>" ).ToString() );
								this.stop_automated_movement = true;
								Task13.Schedule( 50, (Task13.Closure)(() => {
									
									if ( this.busy == 2 ) {
										E = Lang13.FindIn( typeof(Obj_Effect_Spider_Eggcluster), GlobalFuncs.get_turf( this ) );

										if ( !Lang13.Bool( E ) ) {
											new Obj_Effect_Spider_Eggcluster( this.loc );
											this.fed--;
										}
										this.busy = 0;
										this.stop_automated_movement = false;
									}
									return;
								}));
							}
						}

						if ( this.fed > 0 ) {
							return false;
						}

						foreach (dynamic _b in Lang13.Enumerate( can_see, typeof(Obj) )) {
							O = _b;
							

							if ( O is Obj_Machinery_Door ) {
								D = O;

								if ( D.density ) {
									continue;
								}

								if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Effect_Spider_Stickyweb), GlobalFuncs.get_turf( O ) ) ) ) {
									continue;
								}
							} else if ( Lang13.Bool( O.anchored ) ) {
								continue;
							}

							if ( O is Obj_Item || O is Obj_Structure || O is Obj_Machinery ) {
								
								if ( O is Mob_Living_SimpleAnimal_Hostile_GiantSpider ) {
									continue;
								}
								this.cocoon_target = O;
								this.busy = 3;
								this.stop_automated_movement = true;
								this.Goto( O, this.move_to_delay );
								this.GiveUp( O );
							}
						}
					} else if ( this.busy == 3 && this.cocoon_target != null ) {
						
						if ( Map13.GetDistance( this, this.cocoon_target ) <= 1 ) {
							
							if ( this.cocoon_target is Mob_Living_SimpleAnimal_Hostile_GiantSpider ) {
								this.busy = 0;
								this.stop_automated_movement = false;
							}
							this.busy = 4;
							this.visible_message( new Txt( "<span class='notice'>" ).the( this ).item().str( " begins to secrete a sticky substance around " ).the( this.cocoon_target ).item().str( ".</span>" ).ToString() );
							this.stop_automated_movement = true;
							Map13.Walk( this, 0, 0 );
							Task13.Schedule( 50, (Task13.Closure)(() => {
								
								if ( this.busy == 4 ) {
									
									if ( this.cocoon_target != null && this.cocoon_target.loc is Tile && Map13.GetDistance( this, this.cocoon_target ) <= 1 ) {
										
										if ( this.cocoon_target is Obj_Machinery_Door ) {
											D2 = this.cocoon_target;
											W2 = Lang13.FindIn( typeof(Obj_Effect_Spider_Stickyweb), GlobalFuncs.get_turf( this.cocoon_target ) );

											if ( !Lang13.Bool( W2 ) ) {
												this.visible_message( new Txt( "<span class='warning'>" ).the( this ).item().str( " jams " ).the( this.cocoon_target ).item().str( " open with web!</span>" ).ToString() );
												W2 = new Obj_Effect_Spider_Stickyweb( this.cocoon_target.loc );
												((dynamic)D2).jammed = W2;
											}
											this.busy = 0;
											this.stop_automated_movement = false;
										} else {
											C2 = new Obj_Effect_Spider_Cocoon( this.cocoon_target.loc );
											large_cocoon = false;
											C2.pixel_x = this.cocoon_target.pixel_x;
											C2.pixel_y = this.cocoon_target.pixel_y;

											foreach (dynamic _c in Lang13.Enumerate( C2.loc, typeof(Mob_Living) )) {
												M = _c;
												

												if ( M is Mob_Living_SimpleAnimal_Hostile_GiantSpider ) {
													continue;
												}
												large_cocoon = true;
												this.fed++;
												this.visible_message( new Txt( "<span class='warning'>" ).the( this ).item().str( " sticks a proboscis into " ).the( this.cocoon_target ).item().str( " and sucks a viscous substance out.</span>" ).ToString() );
												M.loc = C2;
												C2.pixel_x = M.pixel_x;
												C2.pixel_y = M.pixel_y;
												break;
											}

											foreach (dynamic _d in Lang13.Enumerate( C2.loc, typeof(Obj_Item) )) {
												I = _d;
												
												I.loc = C2;
											}

											foreach (dynamic _e in Lang13.Enumerate( C2.loc, typeof(Obj_Structure) )) {
												S = _e;
												

												if ( !Lang13.Bool( S.anchored ) ) {
													S.loc = C2;
													large_cocoon = true;
												}
											}

											foreach (dynamic _f in Lang13.Enumerate( C2.loc, typeof(Obj_Machinery) )) {
												M2 = _f;
												

												if ( !Lang13.Bool( M2.anchored ) ) {
													M2.loc = C2;
													large_cocoon = true;
												}
											}

											if ( large_cocoon ) {
												C2.icon_state = Rand13.Pick(new object [] { "cocoon_large1", "cocoon_large2", "cocoon_large3" });
												C2.health = Lang13.Initial( C2, "health" ) * 2;
											}
										}
									}
									this.busy = 0;
									this.stop_automated_movement = false;
								}
								return;
							}));
						}
					}
				} else {
					this.busy = 0;
					this.stop_automated_movement = false;
				}
			}
			return false;
		}

		// Function from file: nurse.dm
		public void GiveUp( Obj C = null ) {
			Task13.Schedule( 100, (Task13.Closure)(() => {
				
				if ( this.busy == 3 ) {
					
					if ( this.cocoon_target == C && Map13.GetDistance( this, this.cocoon_target ) > 1 ) {
						this.cocoon_target = null;
					}
					this.busy = 0;
					this.stop_automated_movement = false;
				}
				return;
			}));
			return;
		}

	}

}