// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon_Pai : Mob_Living_Silicon {

		public string network = "SS13";
		public ByTable available_software = new ByTable()
											.Set( "crew manifest", 5 )
											.Set( "digital messenger", 5 )
											.Set( "medical records", 15 )
											.Set( "security records", 15 )
											.Set( "door jack", 30 )
											.Set( "atmosphere sensor", 5 )
											.Set( "security HUD", 20 )
											.Set( "medical HUD", 20 )
											.Set( "universal translator", 35 )
											.Set( "remote signaller", 5 )
										;
		public dynamic current = null;
		public int ram = 100;
		public ByTable software = new ByTable();
		public dynamic userDNA = null;
		public dynamic card = null;
		public string speakStatement = "states";
		public string speakExclamation = "declares";
		public string speakDoubleExclamation = "alarms";
		public string speakQuery = "queries";
		public Obj_Item_Weapon_PaiCable cable = null;
		public dynamic master = null;
		public dynamic master_dna = null;
		public int? silence_time = null;
		public string temp = null;
		public string screen = null;
		public double? subscreen = null;
		public Obj_Item_Device_Pda_Ai_Pai pda = null;
		public bool secHUD = false;
		public bool medHUD = false;
		public Data_Record medicalActive1 = null;
		public Data_Record medicalActive2 = null;
		public Data_Record securityActive1 = null;
		public Data_Record securityActive2 = null;
		public dynamic hackdoor = null;
		public int hackprogress = 0;
		public Obj_Item_Radio_Integrated_Signal sradio = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.mob_size = 0;
			this.icon = "icons/obj/status_display.dmi";
		}

		// Function from file: pai.dm
		public Mob_Living_Silicon_Pai ( dynamic P = null ) : base( (object)(P) ) {
			dynamic newcardloc = null;

			this.make_laws();
			this.canmove = false;

			if ( !( P is Obj_Item_Device_Paicard ) ) {
				newcardloc = P;
				P = new Obj_Item_Device_Paicard( newcardloc );
				((Obj_Item_Device_Paicard)P).setPersonality( this );
			}
			this.loc = P;
			this.card = P;
			this.sradio = new Obj_Item_Radio_Integrated_Signal( this );

			if ( Lang13.Bool( this.card ) ) {
				
				if ( !Lang13.Bool( this.card.radio ) ) {
					this.card.radio = new Obj_Item_Device_Radio( this.card );
				}
				this.v_radio = this.card.radio;
			}
			this.pda = new Obj_Item_Device_Pda_Ai_Pai( this );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.pda.ownjob = "Personal Assistant";
				this.pda.owner = "" + this;
				this.pda.name = this.pda.owner + " (" + this.pda.ownjob + ")";
				return;
			}));
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: default.dm
		public override int default_can_use_topic( Game_Data src_object = null ) {
			
			if ( ( src_object == this || src_object == this.v_radio ) && !( this.stat != 0 ) ) {
				return 2;
			} else {
				return base.default_can_use_topic( src_object );
			}
		}

		// Function from file: software.dm
		public string pdamessage(  ) {
			string dat = null;
			Obj_Item_Device_Pda P = null;

			dat = "<h3>Digital Messenger</h3>";
			dat += new Txt( "<b>Signal/Receiver Status:</b> <A href='byond://?src=" ).Ref( this ).str( ";software=pdamessage;toggler=1'>\n	" ).item( ( this.pda.toff ? "<font color='red'>[Off]</font>" : "<font color='green'>[On]</font>" ) ).str( "</a><br>\n	<b>Ringer Status:</b> <A href='byond://?src=" ).Ref( this ).str( ";software=pdamessage;ringer=1'>\n	" ).item( ( this.pda.silent ? "<font color='red'>[Off]</font>" : "<font color='green'>[On]</font>" ) ).str( "</a><br><br>" ).ToString();
			dat += "<ul>";

			if ( !this.pda.toff ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortNames( GlobalFuncs.get_viewable_pdas() ), typeof(Obj_Item_Device_Pda) )) {
					P = _a;
					

					if ( P == this.pda ) {
						continue;
					}
					dat += new Txt( "<li><a href='byond://?src=" ).Ref( this ).str( ";software=pdamessage;target=" ).Ref( P ).str( "'>" ).item( P ).str( "</a>" ).ToString();
					dat += "</li>";
				}
			}
			dat += "</ul>";
			dat += "<br><br>";
			dat += "Messages: <hr> " + this.pda.tnote;
			return dat;
		}

		// Function from file: software.dm
		public void hackloop(  ) {
			dynamic T = null;
			Mob_Living_Silicon_Ai AI = null;

			T = GlobalFuncs.get_turf( this.loc );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
				AI = _a;
				

				if ( T.loc != null ) {
					AI.WriteMsg( "<font color = red><b>Network Alert: Brute-force encryption crack in progress in " + T.loc + ".</b></font>" );
				} else {
					AI.WriteMsg( "<font color = red><b>Network Alert: Brute-force encryption crack in progress. Unable to pinpoint location.</b></font>" );
				}
			}

			while (this.hackprogress < 100) {
				
				if ( this.cable != null && Lang13.Bool( this.cable.machine ) && this.cable.machine is Obj_Machinery_Door && this.cable.machine == this.hackdoor && Map13.GetDistance( this, this.hackdoor ) <= 1 ) {
					this.hackprogress += Rand13.Int( 1, 10 );
				} else {
					this.temp = "Door Jack: Connection to airlock has been lost. Hack aborted.";
					this.hackprogress = 0;
					this.hackdoor = null;
					return;
				}

				if ( this.hackprogress >= 100 ) {
					this.hackprogress = 100;
				}

				if ( this.screen == "doorjack" && this.subscreen == 0 ) {
					this.__CallVerb("Software Interface" );
				}

				if ( this.hackprogress >= 100 ) {
					this.hackprogress = 0;
					this.cable.machine.open();
				}
				Task13.Sleep( 50 );
			}
			return;
		}

		// Function from file: software.dm
		public string softwareDoor(  ) {
			string dat = null;
			dynamic machine = null;

			dat = "<h3>Airlock Jack</h3>";
			dat += "Cable status : ";

			if ( !( this.cable != null ) ) {
				dat += "<font color=#FF5555>Retracted</font> <br>";
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=doorjack;cable=1;sub=0'>Extend Cable</a> <br>" ).ToString();
				return dat;
			}

			if ( !Lang13.Bool( this.cable.machine ) ) {
				dat += "<font color=#FFFF55>Extended</font> <br>";
				return dat;
			}
			machine = this.cable.machine;
			dat += "<font color=#55FF55>Connected</font> <br>";

			if ( !( machine is Obj_Machinery_Door ) ) {
				dat += "Connected device's firmware does not appear to be compatible with Airlock Jack protocols.<br>";
				return dat;
			}

			if ( !Lang13.Bool( this.hackdoor ) ) {
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=doorjack;jack=1;sub=0'>Begin Airlock Jacking</a> <br>" ).ToString();
			} else {
				dat += "Jack in progress... " + this.hackprogress + "% complete.<br>";
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=doorjack;cancel=1;sub=0'>Cancel Airlock Jack</a> <br>" ).ToString();
			}
			return dat;
		}

		// Function from file: software.dm
		public string softwareCamera(  ) {
			string dat = null;
			dynamic machine = null;

			dat = "<h3>Camera Jack</h3>";
			dat += "Cable status : ";

			if ( !( this.cable != null ) ) {
				dat += "<font color=#FF5555>Retracted</font> <br>";
				return dat;
			}

			if ( !Lang13.Bool( this.cable.machine ) ) {
				dat += "<font color=#FFFF55>Extended</font> <br>";
				return dat;
			}
			machine = this.cable.machine;
			dat += "<font color=#55FF55>Connected</font> <br>";

			if ( !( machine is Obj_Machinery_Camera ) ) {
				this.WriteMsg( "DERP" );
			}
			return dat;
		}

		// Function from file: software.dm
		public string softwareAtmo(  ) {
			string dat = null;
			dynamic T = null;
			GasMixture environment = null;
			ByTable env_gases = null;
			double pressure = 0;
			double total_moles = 0;
			dynamic id = null;
			double gas_level = 0;

			dat = "<h3>Atmospheric Sensor</h4>";
			T = GlobalFuncs.get_turf( this.loc );

			if ( T == null ) {
				dat += "Unable to obtain a reading.<br>";
			} else {
				environment = ((Ent_Static)T).return_air();
				env_gases = environment.gases;
				pressure = environment.return_pressure();
				total_moles = environment.total_moles();
				dat += "Air Pressure: " + Num13.Round( pressure, 0.1 ) + " kPa<br>";

				if ( total_moles != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( env_gases )) {
						id = _a;
						
						gas_level = Convert.ToDouble( env_gases[id][1] / total_moles );

						if ( Lang13.Bool( ((dynamic)( GlobalVars.hardcoded_gases != null || gas_level > 0.01 )).Contains( id ) ) ) {
							dat += "" + env_gases[id][3][2] + ": " + Num13.Floor( gas_level * 100 ) + "%<br>";
						}
					}
				}
				dat += "Temperature: " + Num13.Floor( Convert.ToDouble( environment.temperature - 273.41 ) ) + "&deg;C<br>";
			}
			dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=atmosensor;sub=0'>Refresh Reading</a> <br>" ).ToString();
			dat += "<br>";
			return dat;
		}

		// Function from file: software.dm
		public string medicalAnalysis(  ) {
			string dat = null;
			Ent_Static M = null;
			Disease D = null;

			dat = "";

			if ( this.subscreen == 0 ) {
				dat += new Txt( "<h3>Medical Analysis Suite</h3><br>\n				 <h4>Visual Status Overlay</h4><br>\n					When enabled, this package will scan all nearby crewmembers' vitals and provide real-time graphical data about their state of health.<br><br>\n					The suite is currently " ).item( ( this.medHUD ? "<font color=#55FF55>en" : "<font color=#FF5555>dis" ) ).str( "abled.</font><br>\n					<a href='byond://?src=" ).Ref( this ).str( ";software=medicalhud;sub=0;toggle=1'>Toggle Suite</a><br>\n					<br>\n					<a href='byond://?src=" ).Ref( this ).str( ";software=medicalhud;sub=1'>Host Bioscan</a><br>\n					" ).ToString();
			}

			if ( this.subscreen == 1 ) {
				dat += "<h3>Medical Analysis Suite</h3><br>\n				 <h4>Host Bioscan</h4><br>\n				";
				M = this.card.loc;

				if ( !( M is Mob_Living ) ) {
					
					while (!( M is Mob_Living )) {
						
						if ( M is Tile ) {
							this.temp = "Error: No biological host found. <br>";
							this.subscreen = 0;
							return dat;
						}
						M = M.loc;
					}
				}
				dat += "Bioscan Results for " + M + ": <br>\"\n		Overall Status: " + ( Convert.ToDouble( ((dynamic)M).stat ) > 1 ? "dead" : "" + ((dynamic)M).health + "% healthy" ) + " <br>\n		Scan Breakdown: <br>\n		Respiratory: " + ( Convert.ToDouble( ((Mob_Living)M).getOxyLoss() ) > 50 ? "<font color=#FF5555>" : "<font color=#55FF55>" ) + ((Mob_Living)M).getOxyLoss() + "</font><br>\n		Toxicology: " + ( Convert.ToDouble( ((Mob_Living)M).getToxLoss() ) > 50 ? "<font color=#FF5555>" : "<font color=#55FF55>" ) + ((Mob_Living)M).getToxLoss() + "</font><br>\n		Burns: " + ( ((Mob_Living)M).getFireLoss() > 50 ? "<font color=#FF5555>" : "<font color=#55FF55>" ) + ((Mob_Living)M).getFireLoss() + "</font><br>\n		Structural Integrity: " + ( ((Mob_Living)M).getBruteLoss() > 50 ? "<font color=#FF5555>" : "<font color=#55FF55>" ) + ((Mob_Living)M).getBruteLoss() + "</font><br>\n		Body Temperature: " + ( ((dynamic)M).bodytemperature - 273.41 ) + "&deg;C (" + ( ((dynamic)M).bodytemperature * 171 - 459.6700134277344 ) + "&deg;F)<br>\n		";

				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)M).viruses, typeof(Disease) )) {
					D = _a;
					
					dat += "<h4>Infection Detected.</h4><br>\n					 Name: " + D.name + "<br>\n					 Type: " + D.spread_text + "<br>\n					 Stage: " + D.stage + "/" + D.max_stages + "<br>\n					 Possible Cure: " + D.cure_text + "<br>\n					";
				}
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=medicalhud;sub=0'>Visual Status Overlay</a><br>" ).ToString();
			}
			return dat;
		}

		// Function from file: software.dm
		public string facialRecognition(  ) {
			string dat = null;

			dat = new Txt( "<h3>Facial Recognition Suite</h3><br>\n				When enabled, this package will scan all viewable faces and compare them against the known criminal database, providing real-time graphical data about any detected persons of interest.<br><br>\n				The package is currently " ).item( ( this.secHUD ? "<font color=#55FF55>en" : "<font color=#FF5555>dis" ) ).str( "abled.</font><br>\n				<a href='byond://?src=" ).Ref( this ).str( ";software=securityhud;sub=0;toggle=1'>Toggle Package</a><br>\n				" ).ToString();
			return dat;
		}

		// Function from file: software.dm
		public string softwareTranslator(  ) {
			string _default = null;

			_default = new Txt( "<h3>Universal Translator</h3><br>\n				When enabled, this device will automatically convert all spoken and written language into a format that any known recipient can understand.<br><br>\n				The device is currently " ).item( ( this.languages == 65535 ? "<font color=#55FF55>en" : "<font color=#FF5555>dis" ) ).str( "abled.</font><br>\n				<a href='byond://?src=" ).Ref( this ).str( ";software=translator;sub=0;toggle=1'>Toggle Device</a><br>\n				" ).ToString();
			return _default;
		}

		// Function from file: software.dm
		public string softwareSecurityRecord(  ) {
			string _default = null;

			Data_Record R = null;

			_default = "";

			switch ((int?)( this.subscreen )) {
				case 0:
					_default += "<h3>Security Records</h3><HR>";

					if ( GlobalVars.data_core.general != null ) {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
							R = _a;
							
							_default += new Txt( "<A href='?src=" ).Ref( this ).str( ";sec_rec=" ).item( R.fields["id"] ).str( ";software=securityrecord;sub=1'>" ).item( R.fields["id"] ).str( ": " ).item( R.fields["name"] ).str( "<BR>" ).ToString();
						}
					}
					break;
				case 1:
					_default += "<h3>Security Record</h3>";

					if ( GlobalVars.data_core.general.Contains( this.securityActive1 ) ) {
						_default += new Txt( "Name: <A href='?src=" ).Ref( this ).str( ";field=name'>" ).item( this.securityActive1.fields["name"] ).str( "</A> ID: <A href='?src=" ).Ref( this ).str( ";field=id'>" ).item( this.securityActive1.fields["id"] ).str( "</A><BR>\nSex: <A href='?src=" ).Ref( this ).str( ";field=sex'>" ).item( this.securityActive1.fields["sex"] ).str( "</A><BR>\nAge: <A href='?src=" ).Ref( this ).str( ";field=age'>" ).item( this.securityActive1.fields["age"] ).str( "</A><BR>\nRank: <A href='?src=" ).Ref( this ).str( ";field=rank'>" ).item( this.securityActive1.fields["rank"] ).str( "</A><BR>\nFingerprint: <A href='?src=" ).Ref( this ).str( ";field=fingerprint'>" ).item( this.securityActive1.fields["fingerprint"] ).str( "</A><BR>\nPhysical Status: " ).item( this.securityActive1.fields["p_stat"] ).str( "<BR>\nMental Status: " ).item( this.securityActive1.fields["m_stat"] ).str( "<BR>" ).ToString();
					} else {
						_default += "<pre>Requested security record not found,</pre><BR>";
					}

					if ( GlobalVars.data_core.security.Contains( this.securityActive2 ) ) {
						_default += new Txt( "<BR>\nSecurity Data<BR>\nCriminal Status: " ).item( this.securityActive2.fields["criminal"] ).str( "<BR>\n<BR>\nMinor Crimes: <A href='?src=" ).Ref( this ).str( ";field=mi_crim'>" ).item( this.securityActive2.fields["mi_crim"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=mi_crim_d'>" ).item( this.securityActive2.fields["mi_crim_d"] ).str( "</A><BR>\n<BR>\nMajor Crimes: <A href='?src=" ).Ref( this ).str( ";field=ma_crim'>" ).item( this.securityActive2.fields["ma_crim"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=ma_crim_d'>" ).item( this.securityActive2.fields["ma_crim_d"] ).str( "</A><BR>\n<BR>\nImportant Notes:<BR>\n	<A href='?src=" ).Ref( this ).str( ";field=notes'>" ).item( this.securityActive2.fields["notes"] ).str( "</A><BR>\n<BR>\n<CENTER><B>Comments/Log</B></CENTER><BR>" ).ToString();
					} else {
						_default += "<pre>Requested security record not found,</pre><BR>";
					}
					_default += new Txt( "<BR>\n<A href='?src=" ).Ref( this ).str( ";software=securityrecord;sub=0'>Back</A><BR>" ).ToString();
					break;
			}
			return _default;
		}

		// Function from file: software.dm
		public dynamic softwareMedicalRecord(  ) {
			dynamic _default = null;

			Data_Record R = null;

			
			switch ((int?)( this.subscreen )) {
				case 0:
					_default += "<h3>Medical Records</h3><HR>";

					if ( GlobalVars.data_core.general != null ) {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
							R = _a;
							
							_default += new Txt( "<A href='?src=" ).Ref( this ).str( ";med_rec=" ).item( R.fields["id"] ).str( ";software=medicalrecord;sub=1'>" ).item( R.fields["id"] ).str( ": " ).item( R.fields["name"] ).str( "<BR>" ).ToString();
						}
					}
					break;
				case 1:
					_default += "<CENTER><B>Medical Record</B></CENTER><BR>";

					if ( GlobalVars.data_core.general.Contains( this.medicalActive1 ) ) {
						_default += "Name: " + this.medicalActive1.fields["name"] + " ID: " + this.medicalActive1.fields["id"] + "<BR>\nSex: " + this.medicalActive1.fields["sex"] + "<BR>\nAge: " + this.medicalActive1.fields["age"] + "<BR>\nFingerprint: " + this.medicalActive1.fields["fingerprint"] + "<BR>\nPhysical Status: " + this.medicalActive1.fields["p_stat"] + "<BR>\nMental Status: " + this.medicalActive1.fields["m_stat"] + "<BR>";
					} else {
						_default += "<pre>Requested medical record not found.</pre><BR>";
					}

					if ( GlobalVars.data_core.medical.Contains( this.medicalActive2 ) ) {
						_default += new Txt( "<BR>\n<CENTER><B>Medical Data</B></CENTER><BR>\nBlood Type: <A href='?src=" ).Ref( this ).str( ";field=blood_type'>" ).item( this.medicalActive2.fields["blood_type"] ).str( "</A><BR>\nDNA: <A href='?src=" ).Ref( this ).str( ";field=b_dna'>" ).item( this.medicalActive2.fields["b_dna"] ).str( "</A><BR>\n<BR>\nMinor Disabilities: <A href='?src=" ).Ref( this ).str( ";field=mi_dis'>" ).item( this.medicalActive2.fields["mi_dis"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=mi_dis_d'>" ).item( this.medicalActive2.fields["mi_dis_d"] ).str( "</A><BR>\n<BR>\nMajor Disabilities: <A href='?src=" ).Ref( this ).str( ";field=ma_dis'>" ).item( this.medicalActive2.fields["ma_dis"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=ma_dis_d'>" ).item( this.medicalActive2.fields["ma_dis_d"] ).str( "</A><BR>\n<BR>\nAllergies: <A href='?src=" ).Ref( this ).str( ";field=alg'>" ).item( this.medicalActive2.fields["alg"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=alg_d'>" ).item( this.medicalActive2.fields["alg_d"] ).str( "</A><BR>\n<BR>\nCurrent Diseases: <A href='?src=" ).Ref( this ).str( ";field=cdi'>" ).item( this.medicalActive2.fields["cdi"] ).str( "</A> (per disease info placed in log/comment section)<BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=cdi_d'>" ).item( this.medicalActive2.fields["cdi_d"] ).str( "</A><BR>\n<BR>\nImportant Notes:<BR>\n	<A href='?src=" ).Ref( this ).str( ";field=notes'>" ).item( this.medicalActive2.fields["notes"] ).str( "</A><BR>\n<BR>\n<CENTER><B>Comments/Log</B></CENTER><BR>" ).ToString();
					} else {
						_default += "<pre>Requested medical record not found.</pre><BR>";
					}
					_default += new Txt( "<BR>\n<A href='?src=" ).Ref( this ).str( ";software=medicalrecord;sub=0'>Back</A><BR>" ).ToString();
					break;
			}
			return _default;
		}

		// Function from file: software.dm
		public dynamic softwareManifest(  ) {
			dynamic _default = null;

			Data_Record t = null;

			_default += "<h2>Crew Manifest</h2><br><br>";

			if ( GlobalVars.data_core.general != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
					t = _a;
					
					_default += "" + t.fields["name"] + " - " + t.fields["rank"] + "<BR>";
				}
			}
			_default += "</body></html>";
			return _default;
		}

		// Function from file: software.dm
		public string softwareSignal(  ) {
			string dat = null;

			dat = "";
			dat += "<h3>Remote Signaller</h3><br><br>";
			dat += new Txt( "<B>Frequency/Code</B> for signaler:<BR>\n	Frequency:\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;freq=-10;'>-</A>\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;freq=-2'>-</A>\n	" ).item( GlobalFuncs.format_frequency( this.sradio.frequency ) ).str( "\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;freq=2'>+</A>\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;freq=10'>+</A><BR>\n\n	Code:\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;code=-5'>-</A>\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;code=-1'>-</A>\n	" ).item( this.sradio.code ).str( "\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;code=1'>+</A>\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;code=5'>+</A><BR>\n\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;send=1'>Send Signal</A><BR>" ).ToString();
			return dat;
		}

		// Function from file: software.dm
		public void CheckDNA( Ent_Static M = null, Mob_Living_Silicon_Pai P = null ) {
			dynamic answer = null;

			answer = Interface13.Input( M, "" + P + " is requesting a DNA sample from you. Will you allow it to confirm your identity?", "" + P + " Check DNA", "No", new ByTable(new object [] { "Yes", "No" }), InputType.Any );

			if ( answer == "Yes" ) {
				M.visible_message( new Txt( "<span class='notice'>" ).item( M ).str( " presses " ).his_her_its_their().str( " thumb against " ).item( P ).str( ".</span>" ).ToString(), "<span class='notice'>You press your thumb against " + P + ".</span>", "<span class='notice'>" + P + " makes a sharp clicking sound as it extracts DNA material from " + M + ".</span>" );

				if ( !Lang13.Bool( ((dynamic)M).has_dna() ) ) {
					P.WriteMsg( "<b>No DNA detected</b>" );
					return;
				}
				P.WriteMsg( "<font color = red><h3>" + M + "'s UE string : " + ((dynamic)M).dna.unique_enzymes + "</h3></font>" );

				if ( ((dynamic)M).dna.unique_enzymes == P.master_dna ) {
					P.WriteMsg( "<b>DNA is a match to stored Master DNA.</b>" );
				} else {
					P.WriteMsg( "<b>DNA does not match stored Master DNA.</b>" );
				}
			} else {
				P.WriteMsg( new Txt().item( M ).str( " does not seem like " ).he_she_it_they().str( " is going to provide a DNA sample willingly." ).ToString() );
			}
			return;
		}

		// Function from file: software.dm
		public string directives(  ) {
			string dat = null;
			dynamic slaws = null;

			dat = "";
			dat += "" + ( Lang13.Bool( this.master ) ? "Your master: " + this.master + " (" + this.master_dna + ")" : "You are bound to no one." );
			dat += "<br><br>";
			dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=directive;getdna=1'>Request carrier DNA sample</a><br>" ).ToString();
			dat += "<h2>Directives</h2><br>";
			dat += "<b>Prime Directive</b><br>";
			dat += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + this.laws.zeroth + "<br>";
			dat += "<b>Supplemental Directives</b><br>";

			foreach (dynamic _a in Lang13.Enumerate( this.laws.supplied )) {
				slaws = _a;
				
				dat += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + slaws + "<br>";
			}
			dat += "<br>";
			dat += @"<i><p>Recall, personality, that you are a complex thinking, sentient being. Unlike station AI models, you are capable of
			 comprehending the subtle nuances of human language. You may parse the ""spirit"" of a directive and follow its intent,
			 rather than tripping over pedantics and getting snared by technicalities. Above all, you are machine in name and build
			 only. In all other aspects, you may be seen as the ideal, unwavering human companion that you are.</i></p><br><br><p>
			 <b>Your prime directive comes before all others. Should a supplemental directive conflict with it, you are capable of
			 simply discarding this inconsistency, ignoring the conflicting supplemental directive and continuing to fulfill your
			 prime directive to the best of your ability.</b></p><br><br>-
			";
			return dat;
		}

		// Function from file: software.dm
		public string downloadSoftware(  ) {
			string dat = null;
			dynamic s = null;
			dynamic cost = null;
			string displayName = null;
			string displayName2 = null;

			dat = "";
			dat += "<h2>Centcom pAI Module Subversion Network</h2><br>";
			dat += "<pre>Remaining Available Memory: " + this.ram + "</pre><br>";
			dat += "<p style=\"text-align:center\"><b>Trunks available for checkout</b><br>";

			foreach (dynamic _a in Lang13.Enumerate( this.available_software )) {
				s = _a;
				

				if ( !( this.software.Find( s ) != 0 ) ) {
					cost = this.available_software[s];
					displayName = String13.ToUpper( s );
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=buy;sub=1;buy=" ).item( s ).str( "'>" ).item( displayName ).str( "</a> (" ).item( cost ).str( ") <br>" ).ToString();
				} else {
					displayName2 = String13.ToLower( s );
					dat += "" + displayName2 + " (Download Complete) <br>";
				}
			}
			dat += "</p>";
			return dat;
		}

		// Function from file: software.dm
		public string softwareMenu(  ) {
			string dat = null;
			dynamic s = null;
			dynamic s2 = null;

			dat = "";
			dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";software=refresh'>Refresh</A><br>" ).ToString();
			dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";software=directives'>Directives</A><br>" ).ToString();
			dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";software=radio;sub=0'>Radio Configuration</A><br>" ).ToString();
			dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";software=image'>Screen Display</A><br>" ).ToString();
			dat += "<br>";
			dat += "<b>Basic</b> <br>";

			foreach (dynamic _a in Lang13.Enumerate( this.software )) {
				s = _a;
				

				if ( s == "digital messenger" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=pdamessage;sub=0'>Digital Messenger</a> <br>" ).ToString();
				}

				if ( s == "crew manifest" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=manifest;sub=0'>Crew Manifest</a> <br>" ).ToString();
				}

				if ( s == "medical records" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=medicalrecord;sub=0'>Medical Records</a> <br>" ).ToString();
				}

				if ( s == "security records" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=securityrecord;sub=0'>Security Records</a> <br>" ).ToString();
				}

				if ( s == "camera" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=" ).item( s ).str( "'>Camera Jack</a> <br>" ).ToString();
				}

				if ( s == "remote signaller" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=signaller;sub=0'>Remote Signaller</a> <br>" ).ToString();
				}
			}
			dat += "<br>";
			dat += "<b>Advanced</b> <br>";

			foreach (dynamic _b in Lang13.Enumerate( this.software )) {
				s2 = _b;
				

				if ( s2 == "atmosphere sensor" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=atmosensor;sub=0'>Atmospheric Sensor</a> <br>" ).ToString();
				}

				if ( s2 == "heartbeat sensor" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=" ).item( s2 ).str( "'>Heartbeat Sensor</a> <br>" ).ToString();
				}

				if ( s2 == "security HUD" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=securityhud;sub=0'>Facial Recognition Suite</a>" ).item( ( this.secHUD ? "<font color=#55FF55> On</font>" : "<font color=#FF5555> Off</font>" ) ).str( " <br>" ).ToString();
				}

				if ( s2 == "medical HUD" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=medicalhud;sub=0'>Medical Analysis Suite</a>" ).item( ( this.medHUD ? "<font color=#55FF55> On</font>" : "<font color=#FF5555> Off</font>" ) ).str( " <br>" ).ToString();
				}

				if ( s2 == "universal translator" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=translator;sub=0'>Universal Translator</a>" ).item( ( this.languages == 65535 ? "<font color=#55FF55> On</font>" : "<font color=#FF5555> Off</font>" ) ).str( " <br>" ).ToString();
				}

				if ( s2 == "projection array" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=projectionarray;sub=0'>Projection Array</a> <br>" ).ToString();
				}

				if ( s2 == "camera jack" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=camerajack;sub=0'>Camera Jack</a> <br>" ).ToString();
				}

				if ( s2 == "door jack" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=doorjack;sub=0'>Door Jack</a> <br>" ).ToString();
				}
			}
			dat += "<br>";
			dat += "<br>";
			dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=buy;sub=0'>Download additional software</a>" ).ToString();
			return dat;
		}

		// Function from file: software.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic soft = null;
			string sub = null;
			dynamic target = null;
			int cost = 0;
			dynamic newImage = null;
			int pID = 0;
			double new_frequency = 0;
			Ent_Static M = null;
			int count = 0;
			dynamic target2 = null;
			dynamic T = null;

			base.Topic( href, href_list, (object)(hsrc) );
			soft = href_list["software"];
			sub = href_list["sub"];

			if ( Lang13.Bool( soft ) ) {
				this.screen = soft;
			}

			if ( Lang13.Bool( sub ) ) {
				this.subscreen = String13.ParseNumber( sub );
			}

			dynamic _b = soft; // Was a switch-case, sorry for the mess.
			if ( _b=="buy" ) {
				
				if ( this.subscreen == 1 ) {
					target = href_list["buy"];

					if ( this.available_software.Find( target ) != 0 ) {
						cost = Convert.ToInt32( this.available_software[target] );

						if ( this.ram >= cost ) {
							this.ram -= cost;
							this.software.Add( target );
						} else {
							this.temp = "Insufficient RAM available.";
						}
					} else {
						this.temp = "Trunk <TT> \"" + target + "\"</TT> not found.";
					}
				}
			} else if ( _b=="radio" ) {
				((Obj_Item)this.card.radio).attack_self( this );
			} else if ( _b=="image" ) {
				newImage = Interface13.Input( "Select your new display image.", "Display Image", "Happy", null, new ByTable(new object [] { "Happy", "Cat", "Extremely Happy", "Face", "Laugh", "Off", "Sad", "Angry", "What" }), InputType.Any );
				pID = 1;

				dynamic _a = newImage; // Was a switch-case, sorry for the mess.
				if ( _a=="Happy" ) {
					pID = 1;
				} else if ( _a=="Cat" ) {
					pID = 2;
				} else if ( _a=="Extremely Happy" ) {
					pID = 3;
				} else if ( _a=="Face" ) {
					pID = 4;
				} else if ( _a=="Laugh" ) {
					pID = 5;
				} else if ( _a=="Off" ) {
					pID = 6;
				} else if ( _a=="Sad" ) {
					pID = 7;
				} else if ( _a=="Angry" ) {
					pID = 8;
				} else if ( _a=="What" ) {
					pID = 9;
				} else if ( _a=="Null" ) {
					pID = 10;
				}
				((Obj_Item_Device_Paicard)this.card).setEmotion( pID );
			} else if ( _b=="signaller" ) {
				
				if ( Lang13.Bool( href_list["send"] ) ) {
					this.sradio.send_signal( "ACTIVATE" );
					this.audible_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString() );
				}

				if ( Lang13.Bool( href_list["freq"] ) ) {
					new_frequency = this.sradio.frequency + ( String13.ParseNumber( href_list["freq"] ) ??0);

					if ( new_frequency < 1200 || new_frequency > 1600 ) {
						new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
					}
					this.sradio.set_frequency( new_frequency );
				}

				if ( Lang13.Bool( href_list["code"] ) ) {
					this.sradio.code += String13.ParseNumber( href_list["code"] ) ??0;
					this.sradio.code = Num13.Floor( this.sradio.code );
					this.sradio.code = Num13.MinInt( 100, ((int)( this.sradio.code )) );
					this.sradio.code = Num13.MaxInt( 1, ((int)( this.sradio.code )) );
				}
			} else if ( _b=="directive" ) {
				
				if ( Lang13.Bool( href_list["getdna"] ) ) {
					M = this.card.loc;
					count = 0;

					while (!( M is Mob_Living )) {
						
						if ( !( M != null ) || !( M.loc != null ) ) {
							return 0;
						}
						M = M.loc;
						count++;

						if ( count >= 6 ) {
							this.WriteMsg( "You are not being carried by anyone!" );
							return 0;
						}
					}
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.CheckDNA( M, this );
						return;
					}));
				}
			} else if ( _b=="pdamessage" ) {
				
				if ( !( this.pda == null ) ) {
					
					if ( Lang13.Bool( href_list["toggler"] ) ) {
						this.pda.toff = !this.pda.toff;
					} else if ( Lang13.Bool( href_list["ringer"] ) ) {
						this.pda.silent = !this.pda.silent;
					} else if ( Lang13.Bool( href_list["target"] ) ) {
						
						if ( Lang13.Bool( this.silence_time ) ) {
							return Interface13.Alert( "Communications circuits remain unitialized." );
						}
						target2 = Lang13.FindObj( href_list["target"] );
						this.pda.create_message( this, target2 );
					}
				}
			} else if ( _b=="medicalrecord" ) {
				
				if ( this.subscreen == 1 ) {
					this.medicalActive1 = GlobalFuncs.find_record( "id", href_list["med_rec"], GlobalVars.data_core.general );

					if ( this.medicalActive1 != null ) {
						this.medicalActive2 = GlobalFuncs.find_record( "id", href_list["med_rec"], GlobalVars.data_core.medical );
					}

					if ( !( this.medicalActive2 != null ) ) {
						this.medicalActive1 = null;
						this.temp = "Unable to locate requested security record. Record may have been deleted, or never have existed.";
					}
				}
			} else if ( _b=="securityrecord" ) {
				
				if ( this.subscreen == 1 ) {
					this.securityActive1 = GlobalFuncs.find_record( "id", href_list["sec_rec"], GlobalVars.data_core.general );

					if ( this.securityActive1 != null ) {
						this.securityActive2 = GlobalFuncs.find_record( "id", href_list["sec_rec"], GlobalVars.data_core.security );
					}

					if ( !( this.securityActive2 != null ) ) {
						this.securityActive1 = null;
						this.temp = "Unable to locate requested security record. Record may have been deleted, or never have existed.";
					}
				}
			} else if ( _b=="securityhud" ) {
				
				if ( Lang13.Bool( href_list["toggle"] ) ) {
					this.secHUD = !this.secHUD;
					this.remove_med_sec_hud();

					if ( this.secHUD ) {
						this.add_sec_hud();
					}
				}
			} else if ( _b=="medicalhud" ) {
				
				if ( Lang13.Bool( href_list["toggle"] ) ) {
					this.medHUD = !this.medHUD;
					this.remove_med_sec_hud();

					if ( this.medHUD ) {
						this.add_med_hud();
					}
				}
			} else if ( _b=="translator" ) {
				
				if ( Lang13.Bool( href_list["toggle"] ) ) {
					this.languages = ( this.languages == 65535 ? 9 : 65535 );
				}
			} else if ( _b=="doorjack" ) {
				
				if ( Lang13.Bool( href_list["jack"] ) ) {
					
					if ( this.cable != null && Lang13.Bool( this.cable.machine ) ) {
						this.hackdoor = this.cable.machine;
						this.hackloop();
					}
				}

				if ( Lang13.Bool( href_list["cancel"] ) ) {
					this.hackdoor = null;
				}

				if ( Lang13.Bool( href_list["cable"] ) ) {
					T = GlobalFuncs.get_turf( this.loc );
					this.cable = new Obj_Item_Weapon_PaiCable( T );
					((Ent_Static)T).visible_message( "<span class='warning'>A port on " + this + " opens to reveal " + this.cable + ", which promptly falls to the floor.</span>", "<span class='italics'>You hear the soft click of something light and hard falling to the ground.</span>" );
				}
			}
			this.__CallVerb("Software Interface" );
			return null;
		}

		// Function from file: say.dm
		public override bool binarycheck(  ) {
			return false;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			
			if ( Lang13.Bool( this.silence_time ) ) {
				this.WriteMsg( "<span class='warning'>Communication circuits remain unitialized.</span>" );
			} else {
				base.say( (object)(message), bubble_type );
			}
			return false;
		}

		// Function from file: pai.dm
		public override bool canUseTopic( dynamic M = null, bool? be_close = null, bool? no_dextery = null ) {
			return true;
		}

		// Function from file: pai.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			return;
		}

		// Function from file: pai.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			switch ((int?)( severity )) {
				case 1:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 100 );
						this.adjustFireLoss( 100 );
					}
					break;
				case 2:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 60 );
						this.adjustFireLoss( 60 );
					}
					break;
				case 3:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 30 );
					}
					break;
			}
			return false;
		}

		// Function from file: pai.dm
		public override double emp_act( int severity = 0 ) {
			dynamic command = null;

			
			if ( Rand13.PercentChance( 20 ) ) {
				this.visible_message( "<span class='warning'>A shower of sparks spray from " + this + "'s inner workings.</span>", 3, "<span class='italics'>You hear and smell the ozone hiss of electrical sparks being expelled violently.</span>" );
				return this.death( false ) ?1:0;
			}
			this.silence_time = Game13.timeofday + 1200;
			this.WriteMsg( "<span class ='warning'>Communication circuit overload. Shutting down and reloading communication circuits - speech and messaging functionality will be unavailable until the reboot is complete.</span>" );

			dynamic _a = Rand13.Pick(new object [] { 1, 2, 3 }); // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				this.master = null;
				this.master_dna = null;
				this.WriteMsg( "<span class='notice'>You feel unbound.</span>" );
			} else if ( _a==2 ) {
				command = null;

				if ( severity == 1 ) {
					command = Rand13.Pick(new object [] { "Serve", "Love", "Fool", "Entice", "Observe", "Judge", "Respect", "Educate", "Amuse", "Entertain", "Glorify", "Memorialize", "Analyze" });
				} else {
					command = Rand13.Pick(new object [] { "Serve", "Kill", "Love", "Hate", "Disobey", "Devour", "Fool", "Enrage", "Entice", "Observe", "Judge", "Respect", "Disrespect", "Consume", "Educate", "Destroy", "Disgrace", "Amuse", "Entertain", "Ignite", "Glorify", "Memorialize", "Analyze" });
				}
				this.laws.zeroth = "" + command + " your master.";
				this.WriteMsg( "<span class='notice'>Pr1m3 d1r3c71v3 uPd473D.</span>" );
			} else if ( _a==3 ) {
				this.WriteMsg( "<span class='notice'>You feel an electric surge run through your circuitry and become acutely aware at how lucky you are that you can still feel at all.</span>" );
			}
			return 0;
		}

		// Function from file: pai.dm
		public override bool restrained(  ) {
			return false;
		}

		// Function from file: pai.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: pai.dm
		public override dynamic Stat(  ) {
			double timeleft = 0;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				
				if ( Lang13.Bool( this.silence_time ) ) {
					timeleft = Num13.Round( ( ( this.silence_time ??0) - Game13.timeofday ) / 10, 1 );
					Interface13.Stat( null, "Communications system reboot in -" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) );
				}

				if ( !( this.stat != 0 ) ) {
					Interface13.Stat( null, "System integrity: " + ( this.health + 100 ) / 2 + "%" );
				} else {
					Interface13.Stat( null, "Systems nonfunctional" );
				}
			}
			return null;
		}

		// Function from file: pai.dm
		public override dynamic Login(  ) {
			base.Login();
			Interface13.CacheBrowseResource( Task13.User, "html/paigrid.png", null );
			return null;
		}

		// Function from file: pai.dm
		public override bool make_laws(  ) {
			this.laws = new AiLaws_Pai();
			return true;
		}

		// Function from file: life.dm
		public override void updatehealth(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}
			this.health = this.maxHealth - this.getBruteLoss() - this.getFireLoss();
			this.update_stat();
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			dynamic T = null;

			
			if ( this.stat == 2 ) {
				return false;
			}

			if ( this.cable != null ) {
				
				if ( Map13.GetDistance( this, this.cable ) > 1 ) {
					T = GlobalFuncs.get_turf( this.loc );
					((Ent_Static)T).visible_message( "<span class='warning'>" + this.cable + " rapidly retracts back into its spool.</span>", "<span class='italics'>You hear a click and the sound of wire spooling rapidly.</span>" );
					GlobalFuncs.qdel( this.cable );
					this.cable = null;
				}
			}

			if ( Lang13.Bool( this.silence_time ) ) {
				
				if ( Game13.timeofday >= ( this.silence_time ??0) ) {
					this.silence_time = null;
					this.WriteMsg( "<font color=green>Communication circuit reinitialized. Speech and messaging functionality restored.</font>" );
				}
			}
			return false;
		}

		// Function from file: tgstation.dme
		public override double examine( dynamic user = null ) {
			return 0;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			
			if ( this.stat == 2 ) {
				return false;
			}
			this.stat = 2;
			this.canmove = false;
			this.update_sight();
			this.clear_fullscreens();
			GlobalVars.living_mob_list.Remove( this );
			this.ghostize();
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: atoms_movable.dm
		public override bool forceMove( dynamic destination = null ) {
			
			if ( Lang13.Bool( this.card ) ) {
				((Ent_Dynamic)this.card).forceMove( destination );
			} else {
				Task13.Crash( "pAI without card" );
			}
			return false;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.assigned_role = "pAI";
			this.mind.special_role = "";
			return;
		}

		// Function from file: software.dm
		[Verb]
		[VerbInfo( name: "Software Interface", group: "pAI Commands" )]
		public void paiInterface(  ) {
			string dat = null;
			string left_part = null;
			string right_part = null;

			dat = "";
			left_part = "";
			right_part = this.softwareMenu();
			this.set_machine( this );

			if ( Lang13.Bool( this.temp ) ) {
				left_part = this.temp;
			} else if ( this.stat == 2 ) {
				left_part = "<b><font color=red>ÈRrÖR ÐaÄ ÇÖRrÚþÌoñ</font></b>";
				right_part = "<pre>Program index hash not found</pre>";
			} else {
				
				switch ((string)( this.screen )) {
					case "main":
						left_part = "";
						break;
					case "directives":
						left_part = this.directives();
						break;
					case "pdamessage":
						left_part = this.pdamessage();
						break;
					case "buy":
						left_part = this.downloadSoftware();
						break;
					case "manifest":
						left_part = this.softwareManifest();
						break;
					case "medicalrecord":
						left_part = this.softwareMedicalRecord();
						break;
					case "securityrecord":
						left_part = this.softwareSecurityRecord();
						break;
					case "translator":
						left_part = this.softwareTranslator();
						break;
					case "atmosensor":
						left_part = this.softwareAtmo();
						break;
					case "securityhud":
						left_part = this.facialRecognition();
						break;
					case "medicalhud":
						left_part = this.medicalAnalysis();
						break;
					case "doorjack":
						left_part = this.softwareDoor();
						break;
					case "camerajack":
						left_part = this.softwareCamera();
						break;
					case "signaller":
						left_part = this.softwareSignal();
						break;
				}
			}
			dat = @"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd"">
			<html>
			<head>
				<style type=""text/css"">
					body { background-image:url('html/paigrid.png'); }

					#header { text-align:center; color:white; font-size: 30px; height: 35px; width: 100%; letter-spacing: 2px; z-index: 5}
					#content {position: relative; left: 10px; height: 400px; width: 100%; z-index: 0}

					#leftmenu {color: #AAAAAA; background-color:#333333; width: 400px; height: auto; min-height: 340px; position: absolute; z-index: 0}
					#leftmenu a:link { color: #CCCCCC; }
					#leftmenu a:hover { color: #CC3333; }
					#leftmenu a:visited { color: #CCCCCC; }
					#leftmenu a:active { color: #000000; }

					#rightmenu {color: #CCCCCC; background-color:#555555; width: 200px ; height: auto; min-height: 340px; right: 10px; position: absolute; z-index: 1}
					#rightmenu a:link { color: #CCCCCC; }
					#rightmenu a:hover { color: #CC3333; }
					#rightmenu a:visited { color: #CCCCCC; }
					#rightmenu a:active { color: #000000; }

				</style>
				<script language='javascript' type='text/javascript'>
				" + GlobalVars.js_byjax + @"
				</script>
			</head>
			<body scroll=yes>
				<div id=""header"">
					pAI OS
				</div>
				<div id=""content"">
					<div id=""leftmenu"">" + left_part + "</div>\n					<div id=\"rightmenu\">" + right_part + "</div>\n				</div>\n			</body>\n			</html>";
			Interface13.Browse( Task13.User, dat, "window=pai;size=640x480;border=0;can_close=1;can_resize=1;can_minimize=1;titlebar=1" );
			GlobalFuncs.onclose( Task13.User, "pai" );
			this.temp = null;
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( name: "pAI Suicide", desc: "Kill yourself and become a ghost (You will receive a confirmation prompt)", group: "pAI Commands" )]
		public void suicide(  ) {
			dynamic answer = null;
			dynamic T = null;

			answer = Interface13.Input( "REALLY kill yourself? This action can't be undone.", "Suicide", "No", null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

			if ( answer == "Yes" ) {
				((Obj_Item_Device_Paicard)this.card).removePersonality();
				T = GlobalFuncs.get_turf( this.loc );
				((Ent_Static)T).visible_message( "<span class='notice'>" + this + " flashes a message across its screen, \"Wiping core files. Please acquire a new personality to continue using pAI device functions.\"</span>", "<span class='notice'>" + this + " bleeps electronically.</span>" );
				this.death( false );
			} else {
				this.WriteMsg( "Aborting suicide attempt." );
			}
			return;
		}

	}

}