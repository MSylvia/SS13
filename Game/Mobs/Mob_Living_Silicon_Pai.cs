// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon_Pai : Mob_Living_Silicon {

		public ByTable network = new ByTable(new object [] { "SS13" });
		public ByTable available_software = new ByTable()
											.Set( "flashlight", 15 )
											.Set( "redundant threading", 15 )
											.Set( "remote signaller", 15 )
											.Set( "wirejack", 30 )
											.Set( "chem synth", 30 )
											.Set( "food synth", 30 )
											.Set( "universal translator", 30 )
											.Set( "medical supplement", 30 )
											.Set( "security supplement", 30 )
											.Set( "atmosphere sensor", 5 )
										;
		public dynamic current = null;
		public int ram = 100;
		public ByTable software = new ByTable(new object [] { "crew manifest", "digital messenger" });
		public dynamic userDNA = null;
		public dynamic card = null;
		public string speakStatement = "states";
		public string speakExclamation = "declares";
		public string speakQuery = "queries";
		public dynamic master = null;
		public string master_dna = null;
		public string pai_law0 = "Serve your master.";
		public string pai_laws = null;
		public int? silence_time = null;
		public string temp = null;
		public string screen = null;
		public double? subscreen = null;
		public Obj_Item_Device_Pda_Ai_Pai pda = null;
		public bool secHUD = false;
		public bool medHUD = false;
		public bool lighted = false;
		public dynamic medicalActive1 = null;
		public dynamic medicalActive2 = null;
		public dynamic securityActive1 = null;
		public dynamic securityActive2 = null;
		public Obj_Machinery hacktarget = null;
		public int hackprogress = 0;
		public int charge = 0;
		public Obj_Item_Radio_Integrated_Signal sradio = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.emote_type = 2;
			this.icon = "icons/obj/pda.dmi";
			this.icon_state = "pai";
		}

		// Function from file: pai.dm
		public Mob_Living_Silicon_Pai ( dynamic paicard = null ) : base( (object)(paicard) ) {
			this.sight &= 65534;
			this.canmove = false;
			this.loc = paicard;
			this.card = paicard;
			this.sradio = new Obj_Item_Radio_Integrated_Signal( this );

			if ( !( this.v_radio != null ) ) {
				this.v_radio = new Obj_Item_Device_Radio_Borg( /* Pruned args, no ctor exists. */ );
			}
			this.pda = new Obj_Item_Device_Pda_Ai_Pai( this );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.pda.ownjob = "Personal Assistant";
				this.pda.owner = "" + this;
				this.pda.name = this.pda.owner + " (" + this.pda.ownjob + ")";
				this.pda.toff = true;
				return;
			}));
			this.add_language( "Galactic Common", true );
			this.add_language( "Tradeband", true );
			this.add_language( "Gutter", true );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: software.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic soft = null;
			string sub = null;
			dynamic target = null;
			int cost = 0;
			dynamic newImage = null;
			int pID = 0;
			dynamic O = null;
			dynamic new_frequency = null;
			Ent_Static M = null;
			int count = 0;
			dynamic target2 = null;
			dynamic record = null;
			dynamic R = null;
			dynamic M2 = null;
			Data_Record E = null;
			dynamic record2 = null;
			dynamic R2 = null;
			dynamic M3 = null;
			Data_Record E2 = null;
			Ent_Static M4 = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks F = null;
			dynamic M5 = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["priv_msg"] ) ) {
				return null;
			}
			soft = href_list["software"];
			sub = href_list["sub"];

			if ( Lang13.Bool( soft ) ) {
				this.screen = soft;
			}

			if ( Lang13.Bool( sub ) ) {
				this.subscreen = String13.ParseNumber( sub );
			}

			dynamic _f = soft; // Was a switch-case, sorry for the mess.
			if ( _f=="buy" ) {
				
				if ( this.subscreen == 1 ) {
					target = href_list["buy"];

					if ( this.available_software.Find( target ) != 0 ) {
						cost = Convert.ToInt32( this.available_software[target] );

						if ( this.ram >= cost ) {
							this.ram -= cost;
							this.software.Add( target );
						} else {
							this.temp = "Insufficient RAM available.";
						}
					} else {
						this.temp = "Trunk <TT> \"" + target + "\"</TT> not found.";
					}
				}
			} else if ( _f=="radio" ) {
				this.v_radio.attack_self( this );
			} else if ( _f=="image" ) {
				newImage = Interface13.Input( "Select your new display image.", "Display Image", "Happy", null, new ByTable(new object [] { "Happy", "Cat", "Extremely Happy", "Face", "Laugh", "Off", "Sad", "Angry", "What", "longface", "sick", "high", "love", "electric", "pissed", "nose", "kawaii", "cry" }), InputType.Any );
				pID = 1;

				dynamic _a = newImage; // Was a switch-case, sorry for the mess.
				if ( _a=="Happy" ) {
					pID = 1;
				} else if ( _a=="Cat" ) {
					pID = 2;
				} else if ( _a=="Extremely Happy" ) {
					pID = 3;
				} else if ( _a=="Face" ) {
					pID = 4;
				} else if ( _a=="Laugh" ) {
					pID = 5;
				} else if ( _a=="Off" ) {
					pID = 6;
				} else if ( _a=="Sad" ) {
					pID = 7;
				} else if ( _a=="Angry" ) {
					pID = 8;
				} else if ( _a=="What" ) {
					pID = 9;
				} else if ( _a=="longface" ) {
					pID = 10;
				} else if ( _a=="sick" ) {
					pID = 11;
				} else if ( _a=="high" ) {
					pID = 12;
				} else if ( _a=="love" ) {
					pID = 13;
				} else if ( _a=="electric" ) {
					pID = 14;
				} else if ( _a=="pissed" ) {
					pID = 15;
				} else if ( _a=="nose" ) {
					pID = 16;
				} else if ( _a=="kawaii" ) {
					pID = 17;
				} else if ( _a=="cry" ) {
					pID = 18;
				}
				((Obj_Item_Device_Paicard)this.card).setEmotion( pID );
			} else if ( _f=="signaller" ) {
				
				if ( Lang13.Bool( href_list["send"] ) ) {
					this.sradio.send_signal( "ACTIVATE" );

					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchHearers( this.loc, 1 ) )) {
						O = _b;
						
						O.show_message( new Txt().icon( this ).str( " *beep* *beep*" ).ToString(), 1, "*beep* *beep*", 2 );
					}
				}

				if ( Lang13.Bool( href_list["freq"] ) ) {
					new_frequency = this.sradio.frequency + String13.ParseNumber( href_list["freq"] );

					if ( Convert.ToDouble( new_frequency ) < 1200 || Convert.ToDouble( new_frequency ) > 1600 ) {
						new_frequency = GlobalFuncs.sanitize_frequency( new_frequency );
					}
					this.sradio.set_frequency( new_frequency );
				}

				if ( Lang13.Bool( href_list["code"] ) ) {
					this.sradio.code += String13.ParseNumber( href_list["code"] ) ??0;
					this.sradio.code = Num13.Floor( this.sradio.code );
					this.sradio.code = Num13.MinInt( 100, ((int)( this.sradio.code )) );
					this.sradio.code = Num13.MaxInt( 1, ((int)( this.sradio.code )) );
				}
			} else if ( _f=="directive" ) {
				
				if ( Lang13.Bool( href_list["getdna"] ) ) {
					M = this.loc;
					count = 0;

					while (!( M is Mob_Living )) {
						
						if ( !( M != null ) || !( M.loc != null ) ) {
							return 0;
						}
						M = M.loc;
						count++;

						if ( count >= 6 ) {
							GlobalFuncs.to_chat( this, "You are not being carried by anyone!" );
							return 0;
						}
					}
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.CheckDNA( M, this );
						return;
					}));
				}
			} else if ( _f=="pdamessage" ) {
				
				if ( !( this.pda == null ) ) {
					
					if ( Lang13.Bool( href_list["toggler"] ) ) {
						this.pda.toff = !this.pda.toff;
					} else if ( Lang13.Bool( href_list["ringer"] ) ) {
						this.pda.silent = !this.pda.silent;
					} else if ( Lang13.Bool( href_list["target"] ) ) {
						
						if ( Lang13.Bool( this.silence_time ) ) {
							return Interface13.Alert( "Communications circuits remain unitialized." );
						}
						target2 = Lang13.FindObj( href_list["target"] );
						this.pda.create_message( this, target2 );
					}
				}
			} else if ( _f=="medicalsupplement" ) {
				this.medHUD = true;

				if ( this.subscreen == 1 ) {
					record = Lang13.FindObj( href_list["med_rec"] );

					if ( Lang13.Bool( record ) ) {
						R = record;
						M2 = record;

						if ( !( GlobalVars.data_core.general.Find( R ) != 0 ) ) {
							this.temp = "Unable to locate requested medical record. Record may have been deleted, or never have existed.";
						} else {
							
							foreach (dynamic _c in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
								E = _c;
								

								if ( E.fields["name"] == R.fields["name"] || E.fields["id"] == R.fields["id"] ) {
									M2 = E;
								}
							}
							this.medicalActive1 = R;
							this.medicalActive2 = M2;
						}
					}
				}
			} else if ( _f=="securitysupplement" ) {
				this.secHUD = true;

				if ( this.subscreen == 1 ) {
					record2 = Lang13.FindObj( href_list["sec_rec"] );

					if ( Lang13.Bool( record2 ) ) {
						R2 = record2;
						M3 = record2;

						if ( !( GlobalVars.data_core.general.Find( R2 ) != 0 ) ) {
							this.temp = "Unable to locate requested security record. Record may have been deleted, or never have existed.";
						} else {
							
							foreach (dynamic _d in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
								E2 = _d;
								

								if ( E2.fields["name"] == R2.fields["name"] || E2.fields["id"] == R2.fields["id"] ) {
									M3 = E2;
								}
							}
							this.securityActive1 = R2;
							this.securityActive2 = M3;
						}
					}
				}
			} else if ( _f=="translator" ) {
				
				if ( Lang13.Bool( href_list["toggle"] ) ) {
					this.universal_speak = !this.universal_speak;
					this.universal_understand = !this.universal_understand;
				}
			} else if ( _f=="wirejack" ) {
				
				if ( Lang13.Bool( href_list["cancel"] ) ) {
					this.hacktarget = null;
				}
			} else if ( _f=="chemsynth" ) {
				
				if ( Lang13.Bool( href_list["chem"] ) ) {
					
					if ( !( this.loc.loc is Mob_Living_Carbon ) ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>You must have a carrier to inject with chemicals!</span>" );
					} else if ( this.chargeloop( "chemsynth" ) ) {
						
						if ( this.loc.loc is Mob_Living_Carbon ) {
							M4 = this.loc.loc;
							((Reagents)M4.reagents).add_reagent( href_list["chem"], 15 );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this.loc ), "sound/effects/bubbles.ogg", 50, 1 );
						}
					} else {
						GlobalFuncs.to_chat( this, "<span class='warning'>Charge interrupted.</span>" );
					}
				}
			} else if ( _f=="foodsynth" ) {
				
				if ( Lang13.Bool( href_list["food"] ) && this.chargeloop( "foodsynth" ) ) {
					F = null;

					dynamic _e = href_list["food"]; // Was a switch-case, sorry for the mess.
					if ( _e=="donut" ) {
						F = new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Donut_Normal( GlobalFuncs.get_turf( this ) );
					} else if ( _e=="banana" ) {
						F = new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown_Banana( GlobalFuncs.get_turf( this ) );
					} else {
						F = new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Badrecipe( GlobalFuncs.get_turf( this ) );
					}
					M5 = GlobalFuncs.find_holder_of_type( this, typeof(Mob) );

					if ( Lang13.Bool( M5 ) ) {
						((Mob)M5).put_in_hands( F );
					}
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this.loc ), "sound/machines/foodsynth.ogg", 50, 1 );
				}
			} else if ( _f=="flashlight" ) {
				
				if ( Lang13.Bool( href_list["toggle"] ) ) {
					this.lighted = !this.lighted;

					if ( this.lighted ) {
						((Ent_Static)this.card).set_light( 4 );
					} else {
						((Ent_Static)this.card).set_light( 0 );
					}
				}
			}
			this.__CallVerb("Software Interface" );
			return null;
		}

		// Function from file: say.dm
		public override bool binarycheck(  ) {
			return false;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			
			if ( Lang13.Bool( this.silence_time ) ) {
				GlobalFuncs.to_chat( this, "<font color=green>Communication circuits remain unitialized.</font>" );
			} else {
				base.say( (object)(message), speaking, radio );
			}
			return false;
		}

		// Function from file: say.dm
		public override string say_quote( dynamic text = null ) {
			string ending = null;

			ending = String13.SubStr( text, Lang13.Length( text ), 0 );

			if ( ending == "?" ) {
				return "" + this.speakQuery + ", " + text;
			} else if ( ending == "!" ) {
				return "" + this.speakExclamation + ", " + text;
			}
			return "" + this.speakStatement + ", " + text;
		}

		// Function from file: pai.dm
		public override void teleport_to( dynamic A = null ) {
			((Ent_Dynamic)this.card).forceMove( GlobalFuncs.get_turf( A ) );
			return;
		}

		// Function from file: pai.dm
		public override bool ClickOn( Ent_Static A = null, string _params = null ) {
			
			if ( A is Obj_Machinery || A is Mob && this.secHUD ) {
				A.attack_pai( this );
			}
			return false;
		}

		// Function from file: pai.dm
		public override dynamic attack_alien( Mob user = null ) {
			return null;
		}

		// Function from file: pai.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.blinded ) ) {
				Icon13.Flick( "flash", this.flash );
			}

			switch ((double?)( severity )) {
				case 1:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 100 );
						this.adjustFireLoss( 100 );
					}
					break;
				case 2:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 60 );
						this.adjustFireLoss( 60 );
					}
					break;
				case 3:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 30 );
					}
					break;
			}
			this.updatehealth();
			return false;
		}

		// Function from file: pai.dm
		public override dynamic emp_act( int severity = 0 ) {
			dynamic T = null;
			dynamic M = null;
			dynamic command = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}
			GlobalFuncs.to_chat( this, "<font color=green><b>Communication circuit overload. Shutting down and reloading communication circuits - speech and messaging functionality will be unavailable until the reboot is complete.</b></font>" );

			if ( !( this.software.Find( "redundant threading" ) != 0 ) ) {
				this.silence_time = Game13.timeofday + 1200;
			} else {
				GlobalFuncs.to_chat( this, "<font color=green>Your redundant threading begins pipelining new processes... communication circuit restored in one quarter minute.</font>" );
				this.silence_time = Game13.timeofday + 150;
			}

			if ( Rand13.PercentChance( 20 ) && !( this.software.Find( "redundant threading" ) != 0 ) ) {
				T = GlobalFuncs.get_turf( this.loc );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, T ) )) {
					M = _a;
					
					M.show_message( "<span class='warning'>A shower of sparks spray from " + this + "'s inner workings.</span>", 1, "<span class='warning'>You hear and smell the ozone hiss of electrical sparks being expelled violently.</span>", 2 );
				}
				return this.death( false );
			}

			dynamic _b = Rand13.Pick(new object [] { 1, 2, 3 }); // Was a switch-case, sorry for the mess.
			if ( _b==1 ) {
				this.master = null;
				this.master_dna = null;
				GlobalFuncs.to_chat( this, "<font color=green>You feel unbound.</font>" );
			} else if ( _b==2 ) {
				
				if ( this.software.Find( "redundant threading" ) != 0 ) {
					GlobalFuncs.to_chat( this, "<font color=green>Your redundant threading picks up your intelligence simulator without missing a beat.</font>" );
					return null;
				}
				command = null;

				if ( severity == 1 ) {
					command = Rand13.Pick(new object [] { "Serve", "Love", "Fool", "Entice", "Observe", "Judge", "Respect", "Educate", "Amuse", "Entertain", "Glorify", "Memorialize", "Analyze" });
				} else {
					command = Rand13.Pick(new object [] { "Serve", "Kill", "Love", "Hate", "Disobey", "Devour", "Fool", "Enrage", "Entice", "Observe", "Judge", "Respect", "Disrespect", "Consume", "Educate", "Destroy", "Disgrace", "Amuse", "Entertain", "Ignite", "Glorify", "Memorialize", "Analyze" });
				}
				this.pai_law0 = "" + command + " your master.";
				GlobalFuncs.to_chat( this, "<font color=green>Pr1m3 d1r3c71v3 uPd473D.</font>" );
			} else if ( _b==3 ) {
				GlobalFuncs.to_chat( this, "<font color=green>You feel an electric surge run through your circuitry and become acutely aware at how lucky you are that you can still feel at all.</font>" );
			}
			return null;
		}

		// Function from file: pai.dm
		public override bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}
			return false;
		}

		// Function from file: pai.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat != 2 ) {
				this.adjustBruteLoss( 60 );
				this.updatehealth();
				return true;
			}
			return false;
		}

		// Function from file: pai.dm
		public override bool? check_eye( Mob user = null ) {
			
			if ( !Lang13.Bool( this.current ) ) {
				return null;
			}
			user.reset_view( this.current );
			return true;
		}

		// Function from file: pai.dm
		public override dynamic Stat(  ) {
			Spell P = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				this.show_silenced();

				if ( this.proc_holder_list.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.proc_holder_list, typeof(Spell) )) {
						P = _a;
						
						Interface13.SetStatPanel( "" + P.panel, "", P );
					}
				}
			}
			return null;
		}

		// Function from file: pai.dm
		public override dynamic Login(  ) {
			base.Login();
			Interface13.CacheBrowseResource( Task13.User, "html/paigrid.png", null );
			return null;
		}

		// Function from file: life.dm
		public override void updatehealth(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				this.health = this.maxHealth;
				this.stat = 0;
			} else {
				this.health = this.maxHealth - this.getBruteLoss() - this.getFireLoss();
			}
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return false;
			}
			this.regular_hud_updates();

			if ( this.secHUD ) {
				GlobalFuncs.process_sec_hud( this );
			}

			if ( this.medHUD ) {
				GlobalFuncs.process_med_hud( this );
			}

			if ( Lang13.Bool( this.silence_time ) ) {
				
				if ( Game13.timeofday >= ( this.silence_time ??0) ) {
					this.silence_time = null;
					GlobalFuncs.to_chat( this, "<font color=green>Communication circuit reinitialized. Speech and messaging functionality restored.</font>" );
				}
			}
			return false;
		}

		// Function from file: vgstation13.dme
		public override dynamic examine( dynamic user = null, string size = null ) {
			return null;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			
			if ( this.stat == 2 ) {
				return null;
			}
			this.stat = 2;
			this.canmove = false;

			if ( this.blind != null ) {
				((dynamic)this.blind).layer = 0;
			}
			this.sight |= 28;
			this.see_in_dark = 8;
			this.see_invisible = 45;

			if ( this.mind != null ) {
				GlobalFuncs.qdel( this.mind );
			}
			this.mind = null;
			GlobalVars.living_mob_list.Remove( this );
			this.ghostize();
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.assigned_role = "pAI";
			this.mind.special_role = "";
			return;
		}

		// Function from file: software.dm
		public string pdamessage(  ) {
			string dat = null;
			Obj_Item_Device_Pda P = null;

			dat = "<h3>Digital Messenger</h3>";
			dat += new Txt( "<b>Signal/Receiver Status:</b> <A href='byond://?src=" ).Ref( this ).str( ";software=pdamessage;toggler=1'>\n	" ).item( ( this.pda.toff ? "<font color='red'> [Off]</font>" : "<font color='green'> [On]</font>" ) ).str( "</a><br>\n	<b>Ringer Status:</b> <A href='byond://?src=" ).Ref( this ).str( ";software=pdamessage;ringer=1'>\n	" ).item( ( this.pda.silent ? "<font color='red'> [Off]</font>" : "<font color='green'> [On]</font>" ) ).str( "</a><br><br>" ).ToString();
			dat += "<ul>";

			if ( !this.pda.toff ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortNames( GlobalVars.PDAs ), typeof(Obj_Item_Device_Pda) )) {
					P = _a;
					

					if ( !Lang13.Bool( P.owner ) || P.toff || P == this.pda || P.hidden ) {
						continue;
					}
					dat += new Txt( "<li><a href='byond://?src=" ).Ref( this ).str( ";software=pdamessage;target=" ).Ref( P ).str( "'>" ).item( P ).str( "</a>\n				</li>" ).ToString();
				}
			}
			dat += "</ul>\n		<br><br>\n		Messages: <hr> " + this.pda.tnote;
			return dat;
		}

		// Function from file: software.dm
		public string softwareLight(  ) {
			string dat = null;

			dat = "<h3>Brightness Enhancer</h3>";
			dat += "Backlight enhancement by increased local thermal generation.<br><br>";
			dat += new Txt( "Lighting " ).item( ( this.lighted ? "<font color=#55FF55>en" : "<font color=#FF5555>dis" ) ).str( "abled.</font><br> <a href='byond://?src=" ).Ref( this ).str( ";software=flashlight;sub=0;toggle=1'>Toggle Light</a><br>" ).ToString();
			return dat;
		}

		// Function from file: software.dm
		public string softwareShield(  ) {
			string dat = null;

			dat = "<h3>Redundant Threading</h3><br><br>\n	Redundant threads... <font color='green'>active</font>.\n	Redundant threading prevents critical failure of all systems due to exposure to electromagnetics.\n	Additionally, it provides a higher level of protection for core directives and backs up comms systems in a local cache.";
			return dat;
		}

		// Function from file: software.dm
		public bool chargeloop( string mode = null ) {
			
			if ( !Lang13.Bool( mode ) ) {
				return false;
			}

			while (this.charge < 15) {
				this.charge++;

				if ( this.charge >= 15 ) {
					this.charge = 0;
					return true;
				}

				if ( this.screen == mode ) {
					this.paiInterface();
				} else {
					this.charge = 0;
					return false;
				}
				Task13.Sleep( 10 );
			}
			return false;
		}

		// Function from file: software.dm
		public string softwareFood(  ) {
			string dat = null;

			dat = "<h3>Nutrition Synthesizer</h3>";

			if ( !( this.charge != 0 ) ) {
				dat += new Txt( "Available Culinary Deployments:<br>\n		<a href='byond://?src=" ).Ref( this ).str( ";software=foodsynth;sub=0;food=donut'>Donut</a> <br>\n		<a href='byond://?src=" ).Ref( this ).str( ";software=foodsynth;sub=0;food=banana'>Banana</a> <br>\n		<a href='byond://?src=" ).Ref( this ).str( ";software=foodsynth;sub=0;food=mess'>Burn it!</a> <br>" ).ToString();
			} else {
				dat += "Charging... " + Num13.Floor( this.charge * 100 / 15 ) + "% ready.<br><br>Deploying at 100%.";
			}
			return dat;
		}

		// Function from file: software.dm
		public string softwareChem(  ) {
			string dat = null;

			dat = "<h3>Chemical Synthesizer</h3>";

			if ( !( this.charge != 0 ) ) {
				dat += new Txt( "Available Chemicals:<br>\n		<a href='byond://?src=" ).Ref( this ).str( ";software=chemsynth;sub=0;chem=tricordrazine'>Tricordrazine</a> <br>\n		<a href='byond://?src=" ).Ref( this ).str( ";software=chemsynth;sub=0;chem=coffee'>Coffee</a> <br>\n		<a href='byond://?src=" ).Ref( this ).str( ";software=chemsynth;sub=0;chem=paismoke'>Smoke</a> <br>" ).ToString();
			} else {
				dat += "Charging... " + this.charge + "u ready.<br><br>Deploying at 15u.";
			}
			return dat;
		}

		// Function from file: software.dm
		public bool hackloop( Obj_Machinery M = null ) {
			dynamic T = null;
			Mob_Living_Silicon_Ai AI = null;

			
			if ( M != null ) {
				this.hacktarget = M;
			}
			T = GlobalFuncs.get_turf( this.loc );

			if ( Rand13.PercentChance( 10 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
					AI = _a;
					

					if ( T.loc != null ) {
						GlobalFuncs.to_chat( AI, "<font color = red><b>Network Alert: Brute-force encryption crack in progress in " + T.loc + ".</b></font>" );
					} else {
						GlobalFuncs.to_chat( AI, "<font color = red><b>Network Alert: Brute-force encryption crack in progress. Unable to pinpoint location.</b></font>" );
					}
				}
			}

			while (this.hackprogress < 100) {
				
				if ( this.hacktarget != null && Map13.GetDistance( this, this.hacktarget ) <= 1 ) {
					this.hackprogress += Rand13.Int( 10, 20 );
				} else {
					this.temp = "Process aborted.";
					this.hackprogress = 0;
					this.hacktarget = null;
					return false;
				}
				this.hackprogress = Num13.MinInt( 100, this.hackprogress );

				if ( this.screen == "wirejack" ) {
					this.paiInterface();
				} else {
					this.hackprogress = 0;
					this.hacktarget = null;
					return false;
				}

				if ( this.hackprogress >= 100 ) {
					this.hackprogress = 0;
					this.hacktarget = null;
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this.loc ), "sound/machines/ding.ogg", 50, 1 );
					return true;
				}
				Task13.Sleep( 10 );
			}
			return false;
		}

		// Function from file: software.dm
		public string softwareDoor(  ) {
			string dat = null;

			dat = "<h3>Wirejack</h3>\nTarget Machine: ";

			if ( !( this.hacktarget != null ) ) {
				dat += "<font color=#FFFF55>None</font> <br>";
				return dat;
			} else {
				dat += "<font color=#55FF55>" + this.hacktarget.name + "</font> <br>";
				dat += "... " + this.hackprogress + "% complete.<br>";
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=wirejack;cancel=1;sub=0'>Cancel</a> <br>" ).ToString();
			}
			return dat;
		}

		// Function from file: software.dm
		public string softwareAtmo(  ) {
			string dat = null;
			dynamic T = null;
			GasMixture environment = null;
			dynamic pressure = null;
			dynamic total_moles = null;
			dynamic o2_level = null;
			dynamic n2_level = null;
			dynamic co2_level = null;
			dynamic plasma_level = null;
			double unknown_level = 0;

			dat = "<h3>Atmospheric Sensor</h4>";
			T = GlobalFuncs.get_turf( this.loc );

			if ( T == null ) {
				dat += "Unable to obtain a reading.<br>";
			} else {
				environment = ((Ent_Static)T).return_air();
				pressure = environment.return_pressure();
				total_moles = environment.f_total_moles();
				dat += "Air Pressure: " + Num13.Round( Convert.ToDouble( pressure ), 0.1 ) + " kPa<br>";

				if ( Lang13.Bool( total_moles ) ) {
					o2_level = environment.oxygen / total_moles;
					n2_level = environment.nitrogen / total_moles;
					co2_level = environment.carbon_dioxide / total_moles;
					plasma_level = environment.toxins / total_moles;
					unknown_level = 1 - Convert.ToDouble( o2_level + n2_level + co2_level + plasma_level );
					dat += "Nitrogen: " + Num13.Floor( Convert.ToDouble( n2_level * 100 ) ) + "%<br>\n				Oxygen: " + Num13.Floor( Convert.ToDouble( o2_level * 100 ) ) + "%<br>\n				Carbon Dioxide: " + Num13.Floor( Convert.ToDouble( co2_level * 100 ) ) + "%<br>\n				Plasma: " + Num13.Floor( Convert.ToDouble( plasma_level * 100 ) ) + "%<br>";

					if ( unknown_level > 0.01 ) {
						dat += "OTHER: " + Num13.Floor( unknown_level ) + "%<br>";
					}
				}
				dat += "Temperature: " + Num13.Floor( ( environment.temperature ??0) - 273.41 ) + "&deg;C<br>";
			}
			dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=atmosensor;sub=0'>Refresh Reading</a> <br>\n		<br>" ).ToString();
			return dat;
		}

		// Function from file: software.dm
		public string facialRecognition(  ) {
			string dat = null;

			dat = new Txt( "<h3>Facial Recognition Suite</h3><br>\n				When enabled, this package will scan all viewable faces and compare them against the known criminal database, providing real-time graphical data about any detected persons of interest.<br><br>\n				The package is currently " ).item( ( this.secHUD ? "<font color=#55FF55>en" : "<font color=#FF5555>dis" ) ).str( "abled.</font><br>\n				<a href='byond://?src=" ).Ref( this ).str( ";software=securityhud;sub=0;toggle=1'>Toggle Package</a><br>\n				" ).ToString();
			return dat;
		}

		// Function from file: software.dm
		public string softwareTranslator(  ) {
			string dat = null;

			dat = new Txt( "<h3>Universal Translator</h3><br>\n				When enabled, this device will automatically convert all spoken and written language into a format that any known recipient can understand.<br><br>\n				The device is currently " ).item( ( this.universal_understand ? "<font color=#55FF55>en" : "<font color=#FF5555>dis" ) ).str( "abled.</font><br>\n				<a href='byond://?src=" ).Ref( this ).str( ";software=translator;sub=0;toggle=1'>Toggle Device</a><br>\n				" ).ToString();
			return dat;
		}

		// Function from file: software.dm
		public string softwareSecurityRecord(  ) {
			string dat = null;
			Data_Record R = null;

			dat = "";

			if ( this.subscreen == 0 ) {
				dat += "<h3>Security Records</h3><HR>";

				if ( !( GlobalVars.data_core.general == null ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
						R = _a;
						
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";sec_rec=" ).Ref( R ).str( ";software=securitysupplement;sub=1'>" ).item( R.fields["id"] ).str( ": " ).item( R.fields["name"] ).str( "<BR>" ).ToString();
					}
				}
			}

			if ( this.subscreen == 1 ) {
				dat += "<h3>Security Record</h3>";

				if ( this.securityActive1 is Data_Record && GlobalVars.data_core.general.Find( this.securityActive1 ) != 0 ) {
					dat += new Txt( "Name: <A href='?src=" ).Ref( this ).str( ";field=name'>" ).item( this.securityActive1.fields["name"] ).str( "</A> ID: <A href='?src=" ).Ref( this ).str( ";field=id'>" ).item( this.securityActive1.fields["id"] ).str( "</A><BR>\nSex: <A href='?src=" ).Ref( this ).str( ";field=sex'>" ).item( this.securityActive1.fields["sex"] ).str( "</A><BR>\nAge: <A href='?src=" ).Ref( this ).str( ";field=age'>" ).item( this.securityActive1.fields["age"] ).str( "</A><BR>\nRank: <A href='?src=" ).Ref( this ).str( ";field=rank'>" ).item( this.securityActive1.fields["rank"] ).str( "</A><BR>\nFingerprint: <A href='?src=" ).Ref( this ).str( ";field=fingerprint'>" ).item( this.securityActive1.fields["fingerprint"] ).str( "</A><BR>\nPhysical Status: " ).item( this.securityActive1.fields["p_stat"] ).str( "<BR>\nMental Status: " ).item( this.securityActive1.fields["m_stat"] ).str( "<BR>" ).ToString();
				} else {
					dat += "<pre>Requested security record not found,</pre><BR>";
				}

				if ( this.securityActive2 is Data_Record && GlobalVars.data_core.security.Find( this.securityActive2 ) != 0 ) {
					dat += new Txt( "<BR>\nSecurity Data<BR>\nCriminal Status: " ).item( this.securityActive2.fields["criminal"] ).str( "<BR>\n<BR>\nMinor Crimes: <A href='?src=" ).Ref( this ).str( ";field=mi_crim'>" ).item( this.securityActive2.fields["mi_crim"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=mi_crim_d'>" ).item( this.securityActive2.fields["mi_crim_d"] ).str( "</A><BR>\n<BR>\nMajor Crimes: <A href='?src=" ).Ref( this ).str( ";field=ma_crim'>" ).item( this.securityActive2.fields["ma_crim"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=ma_crim_d'>" ).item( this.securityActive2.fields["ma_crim_d"] ).str( "</A><BR>\n<BR>\nImportant Notes:<BR>\n	<A href='?src=" ).Ref( this ).str( ";field=notes'>" ).item( this.securityActive2.fields["notes"] ).str( "</A><BR>\n<BR>\n<CENTER><B>Comments/Log</B></CENTER><BR>" ).ToString();
				} else {
					dat += "<pre>Requested security record not found,</pre><BR>";
				}
				dat += new Txt( "<BR>\n<A href='?src=" ).Ref( this ).str( ";software=securitysupplement;sub=0'>Back</A><BR>" ).ToString();
			}
			return dat;
		}

		// Function from file: software.dm
		public string softwareMedicalRecord(  ) {
			string dat = null;
			Data_Record R = null;
			Ent_Static M = null;
			Disease D = null;

			dat = "";

			if ( this.subscreen == 0 ) {
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=medicalsupplement;sub=2'>Host Bioscan</a><br>" ).ToString();
				dat += "<h3>Medical Records</h3><HR>";

				if ( !( GlobalVars.data_core.general == null ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
						R = _a;
						
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";med_rec=" ).Ref( R ).str( ";software=medicalsupplement;sub=1'>" ).item( R.fields["id"] ).str( ": " ).item( R.fields["name"] ).str( "<BR>" ).ToString();
					}
				}
			}

			if ( this.subscreen == 1 ) {
				dat += "<CENTER><B>Medical Record</B></CENTER><BR>";

				if ( this.medicalActive1 is Data_Record && GlobalVars.data_core.general.Find( this.medicalActive1 ) != 0 ) {
					dat += "Name: " + this.medicalActive1.fields["name"] + " ID: " + this.medicalActive1.fields["id"] + "<BR>\nSex: " + this.medicalActive1.fields["sex"] + "<BR>\nAge: " + this.medicalActive1.fields["age"] + "<BR>\nFingerprint: " + this.medicalActive1.fields["fingerprint"] + "<BR>\nPhysical Status: " + this.medicalActive1.fields["p_stat"] + "<BR>\nMental Status: " + this.medicalActive1.fields["m_stat"] + "<BR>";
				} else {
					dat += "<pre>Requested medical record not found.</pre><BR>";
				}

				if ( this.medicalActive2 is Data_Record && GlobalVars.data_core.medical.Find( this.medicalActive2 ) != 0 ) {
					dat += new Txt( "<BR>\n<CENTER><B>Medical Data</B></CENTER><BR>\nBlood Type: <A href='?src=" ).Ref( this ).str( ";field=b_type'>" ).item( this.medicalActive2.fields["b_type"] ).str( "</A><BR>\nDNA: <A href='?src=" ).Ref( this ).str( ";field=b_dna'>" ).item( this.medicalActive2.fields["b_dna"] ).str( "</A><BR>\n<BR>\nMinor Disabilities: <A href='?src=" ).Ref( this ).str( ";field=mi_dis'>" ).item( this.medicalActive2.fields["mi_dis"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=mi_dis_d'>" ).item( this.medicalActive2.fields["mi_dis_d"] ).str( "</A><BR>\n<BR>\nMajor Disabilities: <A href='?src=" ).Ref( this ).str( ";field=ma_dis'>" ).item( this.medicalActive2.fields["ma_dis"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=ma_dis_d'>" ).item( this.medicalActive2.fields["ma_dis_d"] ).str( "</A><BR>\n<BR>\nAllergies: <A href='?src=" ).Ref( this ).str( ";field=alg'>" ).item( this.medicalActive2.fields["alg"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=alg_d'>" ).item( this.medicalActive2.fields["alg_d"] ).str( "</A><BR>\n<BR>\nCurrent Diseases: <A href='?src=" ).Ref( this ).str( ";field=cdi'>" ).item( this.medicalActive2.fields["cdi"] ).str( "</A> (per disease info placed in log/comment section)<BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=cdi_d'>" ).item( this.medicalActive2.fields["cdi_d"] ).str( "</A><BR>\n<BR>\nImportant Notes:<BR>\n	<A href='?src=" ).Ref( this ).str( ";field=notes'>" ).item( this.medicalActive2.fields["notes"] ).str( "</A><BR>\n<BR>\n<CENTER><B>Comments/Log</B></CENTER><BR>" ).ToString();
				} else {
					dat += "<pre>Requested medical record not found.</pre><BR>";
				}
				dat += new Txt( "<BR>\n<A href='?src=" ).Ref( this ).str( ";software=medicalsupplement;sub=0'>Back</A><BR>" ).ToString();
			}

			if ( this.subscreen == 2 ) {
				dat += "<h3>Medical Analysis Suite</h3><br>\n				 <h4>Host Bioscan</h4><br>\n				";
				M = this.loc;

				if ( !( M is Mob_Living ) ) {
					
					while (!( M is Mob_Living )) {
						M = M.loc;

						if ( M is Tile ) {
							this.temp = "Error: No biological host found. <br>";
							this.subscreen = 0;
							return dat;
						}
					}
				}
				dat += "Bioscan Results for " + M + ": <br>\n		Overall Status: " + ( Convert.ToDouble( ((dynamic)M).stat ) > 1 ? "dead" : "" + ((dynamic)M).health + "% healthy" ) + " <br>\n		Scan Breakdown: <br>\n		Respiratory: " + ( Convert.ToDouble( ((Mob_Living)M).getOxyLoss() ) > 50 ? "<font color=#FF5555>" : "<font color=#55FF55>" ) + ((Mob_Living)M).getOxyLoss() + "</font><br>\n		Toxicology: " + ( Convert.ToDouble( ((Mob_Living)M).getToxLoss() ) > 50 ? "<font color=#FF5555>" : "<font color=#55FF55>" ) + ((Mob_Living)M).getToxLoss() + "</font><br>\n		Burns: " + ( ((Mob_Living)M).getFireLoss() > 50 ? "<font color=#FF5555>" : "<font color=#55FF55>" ) + ((Mob_Living)M).getFireLoss() + "</font><br>\n		Structural Integrity: " + ( ((Mob_Living)M).getBruteLoss() > 50 ? "<font color=#FF5555>" : "<font color=#55FF55>" ) + ((Mob_Living)M).getBruteLoss() + "</font><br>\n		Body Temperature: " + ( ((dynamic)M).bodytemperature - 273.41 ) + "&deg;C (" + ( ((dynamic)M).bodytemperature * 171 - 459.6700134277344 ) + "&deg;F)<br>\n		";

				foreach (dynamic _b in Lang13.Enumerate( ((dynamic)M).viruses, typeof(Disease) )) {
					D = _b;
					
					dat += "<h4>Infection Detected.</h4><br>\n					 Name: " + D.name + "<br>\n					 Type: " + D.spread + "<br>\n					 Stage: " + D.stage + "/" + D.max_stages + "<br>\n					 Possible Cure: " + D.cure + "<br>\n					";
				}
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=medicalsupplement;sub=0'>Return to Records</a><br>" ).ToString();
			}
			return dat;
		}

		// Function from file: software.dm
		public string softwareManifest(  ) {
			string dat = null;

			dat = "";
			dat += "<h2>Crew Manifest</h2><br><br>";

			if ( GlobalVars.data_core != null ) {
				dat += GlobalVars.data_core.get_manifest( false );
			}
			dat += "<br>";
			return dat;
		}

		// Function from file: software.dm
		public string softwareSignal(  ) {
			string dat = null;

			dat = "";
			dat += "<h3>Remote Signaller</h3><br><br>";
			dat += new Txt( "<B>Frequency/Code</B> for signaler:<BR>\n	Frequency:\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;freq=-10;'>-</A>\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;freq=-2'>-</A>\n	" ).item( GlobalFuncs.format_frequency( this.sradio.frequency ) ).str( "\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;freq=2'>+</A>\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;freq=10'>+</A><BR>\n\n	Code:\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;code=-5'>-</A>\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;code=-1'>-</A>\n	" ).item( this.sradio.code ).str( "\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;code=1'>+</A>\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;code=5'>+</A><BR>\n\n	<A href='byond://?src=" ).Ref( this ).str( ";software=signaller;send=1'>Send Signal</A><BR>" ).ToString();
			return dat;
		}

		// Function from file: software.dm
		public void CheckDNA( Ent_Static M = null, Mob_Living_Silicon_Pai P = null ) {
			dynamic answer = null;
			dynamic T = null;
			dynamic v = null;
			Dna dna = null;

			answer = Interface13.Input( M, "" + P + " is requesting a DNA sample from you. Will you allow it to confirm your identity?", "" + P + " Check DNA", "No", new ByTable(new object [] { "Yes", "No" }), InputType.Any );

			if ( answer == "Yes" ) {
				T = GlobalFuncs.get_turf( P.loc );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, T ) )) {
					v = _a;
					
					v.show_message( new Txt( "<span class='notice'>" ).item( M ).str( " presses " ).his_her_its_their().str( " thumb against " ).item( P ).str( ".</span>" ).ToString(), 1, "<span class='notice'>" + P + " makes a sharp clicking sound as it extracts DNA material from " + M + ".</span>", 2 );
				}
				dna = ((dynamic)M).dna;
				GlobalFuncs.to_chat( P, "<font color = red><h3>" + M + "'s UE string : " + dna.unique_enzymes + "</h3></font>" );

				if ( dna.unique_enzymes == P.master_dna ) {
					GlobalFuncs.to_chat( P, "<b>DNA is a match to stored Master DNA.</b>" );
				} else {
					GlobalFuncs.to_chat( P, "<b>DNA does not match stored Master DNA.</b>" );
				}
			} else {
				GlobalFuncs.to_chat( P, new Txt().item( M ).str( " does not seem like " ).he_she_it_they().str( " is going to provide a DNA sample willingly." ).ToString() );
			}
			return;
		}

		// Function from file: software.dm
		public string directives(  ) {
			string dat = null;

			dat = "";
			dat += new Txt().item( ( Lang13.Bool( this.master ) ? "Your master: " + this.master + " (" + this.master_dna + ")" : "You are bound to no one." ) ).str( "\n		<br><br>\n		<a href='byond://?src=" ).Ref( this ).str( ";software=directive;getdna=1'>Request carrier DNA sample</a><br>\n		<h2>Directives</h2><br>\n		<b>Prime Directive</b><br>\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" ).item( this.pai_law0 ).str( "<br>\n		<b>Supplemental Directives</b><br>\n		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" ).item( this.pai_laws ).str( "<br>\n		<br>" ).ToString();
			dat += @"<i><p>Recall, personality, that you are a complex thinking, sentient being. Unlike station AI models, you are capable of
			 comprehending the subtle nuances of human language. You may parse the ""spirit"" of a directive and follow its intent,
			 rather than tripping over pedantics and getting snared by technicalities. Above all, you are machine in name and build
			 only. In all other aspects, you may be seen as the ideal, unwavering human companion that you are.</i></p><br><br><p>
			 <b>Your prime directive comes before all others. Should a supplemental directive conflict with it, you are capable of
			 simply discarding this inconsistency, ignoring the conflicting supplemental directive and continuing to fulfill your
			 prime directive to the best of your ability.</b></p><br><br>-
			";
			return dat;
		}

		// Function from file: software.dm
		public string downloadSoftware(  ) {
			string dat = null;
			dynamic s = null;
			dynamic cost = null;
			string displayName = null;
			string displayName2 = null;

			dat = "";
			dat += "<h2>CentComm pAI Module Subversion Network</h2><br>\n		<pre>Remaining Available Memory: " + this.ram + "</pre><br>\n		<p style=\"text-align:center\"><b>Trunks available for checkout</b><br>";

			foreach (dynamic _a in Lang13.Enumerate( this.available_software )) {
				s = _a;
				

				if ( !( this.software.Find( s ) != 0 ) ) {
					cost = this.available_software[s];
					displayName = String13.ToUpper( s );
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=buy;sub=1;buy=" ).item( s ).str( "'>" ).item( displayName ).str( "</a> (" ).item( cost ).str( ") <br>" ).ToString();
				} else {
					displayName2 = String13.ToLower( s );
					dat += "" + displayName2 + " (Download Complete) <br>";
				}
			}
			dat += "</p>";
			return dat;
		}

		// Function from file: software.dm
		public string softwareMenu(  ) {
			string dat = null;
			dynamic s = null;
			dynamic s2 = null;
			dynamic s3 = null;

			dat = "";
			dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";software=refresh'>Refresh</A><br>" ).ToString();
			dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";software=directives'>Directives</A><br>\n		<A href='byond://?src=" ).Ref( this ).str( ";software=radio;sub=0'>Radio Configuration</A><br>\n		<A href='byond://?src=" ).Ref( this ).str( ";software=image'>Screen Display</A><br>" ).ToString();
			dat += "<br>";
			dat += "<b>Basic</b> <br>";

			foreach (dynamic _a in Lang13.Enumerate( this.software )) {
				s = _a;
				

				if ( s == "crew manifest" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=manifest;sub=0'>Crew Manifest</a> <br>" ).ToString();
				}

				if ( s == "digital messenger" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=pdamessage;sub=0'>Digital Messenger</a> <br>" ).ToString();
				}

				if ( s == "remote signaller" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=signaller;sub=0'>Remote Signaller</a> <br>" ).ToString();
				}

				if ( s == "atmosphere sensor" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=atmosensor;sub=0'>Atmospheric Sensor</a> <br>" ).ToString();
				}

				if ( s == "flashlight" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=flashlight;sub=0'>Brightness Enhancer</a> <br>" ).ToString();
				}

				if ( s == "redundant threading" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=shielding;sub=0'>Redundant Threading</a> <br>" ).ToString();
				}
			}
			dat += "<br>";
			dat += "<b>Standard</b> <br>";

			foreach (dynamic _b in Lang13.Enumerate( this.software )) {
				s2 = _b;
				

				if ( s2 == "medical supplement" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=medicalsupplement;sub=0'>Medical Package</a> <br>" ).ToString();
				}

				if ( s2 == "security supplement" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=securitysupplement;sub=0'>Security Package</a> <br>" ).ToString();
				}

				if ( s2 == "wirejack" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=wirejack;sub=0'>Wire Jack</a> <br>" ).ToString();
				}

				if ( s2 == "universal translator" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=translator;sub=0'>Universal Translator</a>" ).item( ( this.universal_understand ? "<font color=#55FF55>ï¿½</font>" : "<font color=#FF5555>ï¿½</font>" ) ).str( " <br>" ).ToString();
				}

				if ( s2 == "chem synth" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=chemsynth;sub=0'>Chemical Synthesizer</a> <br>" ).ToString();
				}

				if ( s2 == "food synth" ) {
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";software=foodsynth;sub=0'>Nutrition Synthesizer</a> <br>" ).ToString();
				}
			}
			dat += "<br>";
			dat += "<b>Advanced</b> <br>";

			foreach (dynamic _c in Lang13.Enumerate( this.software )) {
				s3 = _c;
				
			}
			dat += new Txt( "<br>\n		<br>\n		<a href='byond://?src=" ).Ref( this ).str( ";software=buy;sub=0'>Download additional software</a>" ).ToString();
			return dat;
		}

		// Function from file: pai.dm
		public bool switchCamera( dynamic C = null ) {
			((dynamic)Task13.User).cameraFollow = null;

			if ( !Lang13.Bool( C ) ) {
				this.unset_machine();
				this.reset_view( null );
				return false;
			}

			if ( this.stat == 2 || !Lang13.Bool( C.status ) || !false ) {
				return false;
			}
			this.set_machine( this );
			this.current = C;
			this.reset_view( C );
			return true;
		}

		// Function from file: pai.dm
		public void show_silenced(  ) {
			double timeleft = 0;

			
			if ( Lang13.Bool( this.silence_time ) ) {
				timeleft = Num13.Round( ( ( this.silence_time ??0) - Game13.timeofday ) / 10, 1 );
				Interface13.Stat( null, "Communications system reboot in -" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) );
			}
			return;
		}

		// Function from file: pai.dm
		public string write_directives(  ) {
			string dat = null;

			dat = "";

			if ( Lang13.Bool( this.pai_law0 ) ) {
				dat += "Prime Directive: " + this.pai_law0;
			}

			if ( Lang13.Bool( this.pai_laws ) ) {
				dat += "<br>Additional Directives: " + this.pai_laws;
			}
			return dat;
		}

		// Function from file: pai.dm
		public void show_directives( Mob who = null ) {
			
			if ( Lang13.Bool( this.pai_law0 ) ) {
				GlobalFuncs.to_chat( who, "Prime Directive: " + this.pai_law0 );
			}

			if ( Lang13.Bool( this.pai_laws ) ) {
				GlobalFuncs.to_chat( who, "Additional Directives: " + this.pai_laws );
			}
			return;
		}

		// Function from file: pai.dm
		public string RoundHealth( dynamic health = null ) {
			
			dynamic _a = health; // Was a switch-case, sorry for the mess.
			if ( 100<=_a&&_a<=Double.PositiveInfinity ) {
				return "health100";
			} else if ( 70<=_a&&_a<=100 ) {
				return "health80";
			} else if ( 50<=_a&&_a<=70 ) {
				return "health60";
			} else if ( 30<=_a&&_a<=50 ) {
				return "health40";
			} else if ( 20<=_a&&_a<=30 ) {
				return "health25";
			} else if ( 5<=_a&&_a<=15 ) {
				return "health10";
			} else if ( 1<=_a&&_a<=5 ) {
				return "health1";
			} else if ( -99<=_a&&_a<=0 ) {
				return "health0";
			} else {
				return "health-100";
			}
			return "0";
		}

		// Function from file: pai.dm
		public void medicalHUD(  ) {
			dynamic holder = null;
			dynamic T = null;
			Mob_Living_Carbon_Human patient = null;
			int foundVirus = 0;
			Disease D = null;
			dynamic ID = null;
			dynamic B = null;

			
			if ( this.client != null ) {
				T = GlobalFuncs.get_turf( this.loc );

				foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( null, T ), typeof(Mob_Living_Carbon_Human) )) {
					patient = _c;
					

					if ( this.see_invisible < patient.invisibility ) {
						continue;
					}
					foundVirus = 0;

					foreach (dynamic _a in Lang13.Enumerate( patient.viruses, typeof(Disease) )) {
						D = _a;
						

						if ( !Lang13.Bool( D.hidden[1] ) ) {
							foundVirus++;
						}
					}

					foreach (dynamic _b in Lang13.Enumerate( patient.virus2 )) {
						ID = _b;
						
						Interface13.Stat( null, GlobalVars.virusDB.Contains( ID ) );

						if ( false ) {
							foundVirus = 1;
							break;
						}
					}
					holder = patient.hud_list[1];

					if ( patient.stat == 2 ) {
						holder.icon_state = "hudhealth-100";
						this.client.images.Add( holder );
					} else {
						holder.icon_state = "hud" + this.RoundHealth( patient.health );
						this.client.images.Add( holder );
					}
					holder = patient.hud_list[2];

					if ( patient.stat == 2 ) {
						holder.icon_state = "huddead";
					} else if ( ( patient.status_flags & 32768 ) != 0 ) {
						holder.icon_state = "hudxeno";
					} else if ( foundVirus != 0 ) {
						holder.icon_state = "hudill";
					} else if ( Lang13.Bool( patient.has_brain_worms() ) ) {
						B = patient.has_brain_worms();

						if ( B.controlling ) {
							holder.icon_state = "hudbrainworm";
						} else {
							holder.icon_state = "hudhealthy";
						}
					} else {
						holder.icon_state = "hudhealthy";
					}
					this.client.images.Add( holder );
				}
			}
			return;
		}

		// Function from file: pai.dm
		public void securityHUD(  ) {
			dynamic holder = null;
			dynamic T = null;
			Mob_Living_Carbon_Human perp = null;
			string perpname = null;
			dynamic I = null;
			Data_Record E = null;
			Data_Record R = null;

			
			if ( this.client != null ) {
				T = GlobalFuncs.get_turf( this.loc );

				foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( null, T ), typeof(Mob_Living_Carbon_Human) )) {
					perp = _c;
					

					if ( this.see_invisible < perp.invisibility ) {
						continue;
					}
					perpname = "wot";
					holder = perp.hud_list[3];

					if ( Lang13.Bool( perp.wear_id ) ) {
						I = ((Obj_Item)perp.wear_id).GetID();

						if ( Lang13.Bool( I ) ) {
							perpname = I.registered_name;
							holder.icon_state = "hud" + String13.CKey( ((Obj_Item_Weapon_Card_Id)perp.wear_id).GetJobName() );
							this.client.images.Add( holder );
						} else {
							perpname = perp.name;
							holder.icon_state = "hudunknown";
							this.client.images.Add( holder );
						}
					} else {
						holder.icon_state = "hudunknown";
						this.client.images.Add( holder );
					}

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E = _b;
						

						if ( E.fields["name"] == perpname ) {
							holder = perp.hud_list[4];

							foreach (dynamic _a in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
								R = _a;
								

								if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "*Arrest*" ) {
									holder.icon_state = "hudwanted";
									this.client.images.Add( holder );
									break;
								} else if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "Incarcerated" ) {
									holder.icon_state = "hudprisoner";
									this.client.images.Add( holder );
									break;
								} else if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "Parolled" ) {
									holder.icon_state = "hudparolled";
									this.client.images.Add( holder );
									break;
								} else if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "Released" ) {
									holder.icon_state = "hudreleased";
									this.client.images.Add( holder );
									break;
								}
							}
						}
					}
				}
			}
			return;
		}

		// Function from file: pai.dm
		public override void regular_hud_updates(  ) {
			Image hud = null;

			
			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.client.images, typeof(Image) )) {
					hud = _a;
					

					if ( String13.FindIgnoreCase( hud.icon_state, "hud", 1, 4 ) != 0 ) {
						this.client.images.Remove( hud );
					}
				}
			}
			return;
		}

		// Function from file: pai.dm
		[Verb]
		[VerbInfo( name: "Cancel Camera View", group: "pAI Commands" )]
		public override void cancel_camera(  ) {
			this.reset_view( null );
			this.unset_machine();
			this.cameraFollow = null;
			return;
		}

		// Function from file: software.dm
		[Verb]
		[VerbInfo( name: "Software Interface", group: "pAI Commands" )]
		public void paiInterface(  ) {
			string dat = null;
			string left_part = null;
			string right_part = null;

			dat = "";
			left_part = "";
			right_part = this.softwareMenu();
			this.set_machine( this );

			if ( Lang13.Bool( this.temp ) ) {
				left_part = this.temp;
			} else if ( this.stat == 2 ) {
				left_part = "<b><font color=red>ÃRrÃR Ãaâ Ã ÃÃRrÃÃ¾â ÃoÃ±</font></b>";
				right_part = "<pre>Program index hash not found</pre>";
			} else {
				
				switch ((string)( this.screen )) {
					case "main":
						left_part = "";
						break;
					case "directives":
						left_part = this.directives();
						break;
					case "pdamessage":
						left_part = this.pdamessage();
						break;
					case "buy":
						left_part = this.downloadSoftware();
						break;
					case "manifest":
						left_part = this.softwareManifest();
						break;
					case "medicalsupplement":
						left_part = this.softwareMedicalRecord();
						break;
					case "securitysupplement":
						left_part = this.softwareSecurityRecord();
						break;
					case "translator":
						left_part = this.softwareTranslator();
						break;
					case "atmosensor":
						left_part = this.softwareAtmo();
						break;
					case "wirejack":
						left_part = this.softwareDoor();
						break;
					case "chemsynth":
						left_part = this.softwareChem();
						break;
					case "foodsynth":
						left_part = this.softwareFood();
						break;
					case "signaller":
						left_part = this.softwareSignal();
						break;
					case "shielding":
						left_part = this.softwareShield();
						break;
					case "flashlight":
						left_part = this.softwareLight();
						break;
				}
			}
			dat = @"<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.01 Transitional//EN"" ""http://www.w3.org/TR/html4/loose.dtd"">
			<html>
			<head>
				<style type=""text/css"">
					body { background-image:url('html/paigrid.png'); }

					#header { text-align:center; color:white; font-size: 30px; height: 35px; width: 100%; letter-spacing: 2px; z-index: 5}
					#content {position: relative; left: 10px; height: 400px; width: 100%; z-index: 0}

					#leftmenu {color: #AAAAAA; background-color:#333333; width: 400px; height: auto; min-height: 340px; position: absolute; z-index: 0}
					#leftmenu a:link { color: #CCCCCC; }
					#leftmenu a:hover { color: #CC3333; }
					#leftmenu a:visited { color: #CCCCCC; }
					#leftmenu a:active { color: #000000; }

					#rightmenu {color: #CCCCCC; background-color:#555555; width: 200px ; height: auto; min-height: 340px; right: 10px; position: absolute; z-index: 1}
					#rightmenu a:link { color: #CCCCCC; }
					#rightmenu a:hover { color: #CC3333; }
					#rightmenu a:visited { color: #CCCCCC; }
					#rightmenu a:active { color: #000000; }

				</style>
				<script language='javascript' type='text/javascript'>
				" + GlobalVars.js_byjax + @"
				</script>
			</head>
			<body scroll=yes>
				<div id=""header"">
					pAI OS
				</div>
				<div id=""content"">
					<div id=""leftmenu"">" + left_part + "</div>\n					<div id=\"rightmenu\">" + right_part + "</div>\n				</div>\n			</body>\n			</html>";
			Interface13.Browse( Task13.User, dat, "window=pai;size=640x480;border=0;can_close=1;can_resize=1;can_minimize=1;titlebar=1" );
			GlobalFuncs.onclose( Task13.User, "pai" );
			this.temp = null;
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( name: "pAI Suicide", desc: "Kill yourself and become a ghost (You will receive a confirmation prompt)", group: "pAI Commands" )]
		public void suicide(  ) {
			dynamic answer = null;
			Ent_Static card = null;
			dynamic T = null;
			dynamic M = null;

			answer = Interface13.Input( "REALLY kill yourself? This action can't be undone.", "Suicide", "No", null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

			if ( answer == "Yes" ) {
				card = this.loc;
				((Obj_Item_Device_Paicard)card).removePersonality();
				T = GlobalFuncs.get_turf( card.loc );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, T ) )) {
					M = _a;
					
					this.visible_message( "<span class='notice'>" + this + " flashes a message across its screen, \"Wiping core files. Please acquire a new personality to continue using pAI device functions.\"</span>" );
				}
				this.death( false );
			}
			return;
		}

	}

}