// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Monkey_Diona : Mob_Living_Carbon_Monkey {

		public ByTable donors = new ByTable();
		public bool ready_evolve = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.voice_name = "diona nymph";
			this.speak_emote = new ByTable(new object [] { "chirrups" });
			this.species_type = typeof(Mob_Living_Carbon_Monkey_Diona);
			this.holder_type = typeof(Obj_Item_Weapon_Holder_Diona);
			this.canWearHats = false;
			this.canWearClothes = false;
			this.canWearGlasses = false;
			this.icon_state = "nymph1";
		}

		// Function from file: diona.dm
		public Mob_Living_Carbon_Monkey_Diona ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.setGender( GlobalVars.NEUTER );
			this.dna.mutantrace = "plant";
			this.greaterform = "Diona";
			this.alien = 1;
			this.add_language( "Rootspeak" );
			this.default_language = GlobalVars.all_languages["Rootspeak"];
			return;
		}

		// Function from file: diona.dm
		public override dynamic dexterity_check(  ) {
			return 0;
		}

		// Function from file: diona.dm
		public void update_progression(  ) {
			
			if ( !( this.donors.len != 0 ) ) {
				return;
			}

			if ( this.donors.len == 5 ) {
				this.ready_evolve = true;
				GlobalFuncs.to_chat( this, "<span class='good'>You feel ready to move on to your next stage of growth.</span>" );
			} else if ( this.donors.len == 4 ) {
				GlobalFuncs.to_chat( this, "<span class='good'>You feel your vocal range expand, and realize you know how to speak with the creatures around you.</span>" );
				this.add_language( "Galactic Common" );
				this.default_language = GlobalVars.all_languages["Galactic Common"];
			} else if ( this.donors.len == 3 ) {
				GlobalFuncs.to_chat( this, "<span class='good'>More blood seeps into you, continuing to expand your growing collection of memories.</span>" );
			} else if ( this.donors.len == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='good'>You feel your awareness expand, and realize you know how to understand the creatures around you.</span>" );
			} else {
				GlobalFuncs.to_chat( this, "<span class='good'>The blood seeps into your small form, and you draw out the echoes of memories and personality from it, working them into your budding mind.</span>" );
			}
			return;
		}

		// Function from file: diona.dm
		public override bool say_understands( Ent_Dynamic other = null, Language speaking = null ) {
			
			if ( other != null ) {
				other = other.GetSource();
			}

			if ( other is Mob_Living_Carbon_Human ) {
				
				if ( speaking != null && speaking.name == "Galactic Common" ) {
					
					if ( this.donors.len >= 2 ) {
						return true;
					}
				}
			}
			return base.say_understands( other, speaking );
		}

		// Function from file: diona.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a.a_intent == "help" && !Lang13.Bool( this.locked_to ) && this.loc is Tile && ((Mob)a).get_active_hand() == null ) {
				this.scoop_up( a );
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: diona.dm
		[Verb]
		[VerbInfo( name: "Take Blood Sample", desc: "Take a blood sample from a suitable donor to help understand those around you and evolve.", group: "Diona" )]
		public void steal_blood(  ) {
			ByTable choices = null;
			Mob_Living_Carbon C = null;
			dynamic M = null;

			choices = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Mob_Living_Carbon) )) {
				C = _a;
				

				if ( C.real_name != this.real_name ) {
					choices.Add( C );
				}
			}
			M = Interface13.Input( this, "Who do you wish to take a sample from?", null, null, null | choices, InputType.Any );

			if ( !Lang13.Bool( M ) || !( this != null ) ) {
				return;
			}

			if ( this.donors.Find( M.real_name ) != 0 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>That donor offers you nothing new.</span>" );
				return;
			}
			this.visible_message( "<span class='warning'>" + this + " flicks out a feeler and neatly steals a sample of " + M + "'s blood.</span>", "<span class='warning'>You flick out a feeler and neatly steal a sample of " + M + "'s blood.</span>" );
			this.donors.Add( M.real_name );
			Task13.Schedule( 25, (Task13.Closure)(() => {
				this.update_progression();
				return;
			}));
			return;
		}

		// Function from file: diona.dm
		[Verb]
		[VerbInfo( name: "Evolve", desc: "Grow to a more complex form.", group: "Diona" )]
		public bool evolve(  ) {
			Mob_Living_Carbon_Human adult = null;
			Ent_Static L = null;
			Language L2 = null;

			
			if ( !GlobalFuncs.is_alien_whitelisted( this, "Diona" ) && GlobalVars.config.usealienwhitelist ) {
				GlobalFuncs.to_chat( this, Interface13.Alert( "You are currently not whitelisted to play an adult Diona." ) );
				return false;
			}

			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "You cannot evolve if you are dead!" );
				return false;
			}

			if ( this.donors.len < 5 ) {
				GlobalFuncs.to_chat( this, "You are not yet ready for your growth..." );
				return false;
			}

			if ( this.nutrition < 400 ) {
				GlobalFuncs.to_chat( this, "You have not yet consumed enough to grow..." );
				return false;
			}
			this.visible_message( "<span class='warning'>" + this + " begins to shift and quiver, and erupts in a shower of shed bark and twigs!</span>", "<span class='warning'>You begin to shift and quiver, then erupt in a shower of shed bark and twigs, attaining your adult form!</span>" );
			adult = new Mob_Living_Carbon_Human( GlobalFuncs.get_turf( this.loc ) );
			adult.set_species( "Diona" );
			this.transferImplantsTo( adult );
			this.transferBorers( adult );

			if ( this.loc is Obj_Item_Weapon_Holder_Diona ) {
				L = this.loc;
				this.loc = L.loc;
				GlobalFuncs.qdel( L );
				L = null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.languages, typeof(Language) )) {
				L2 = _a;
				
				adult.add_language( L2.name );
			}
			adult.regenerate_icons();
			adult.name = this.name;
			adult.real_name = this.real_name;
			this.mind.transfer_to( adult );
			this.drop_all();
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: diona.dm
		[Verb]
		[VerbInfo( name: "Eat Weeds", desc: "Clean the weeds out of soil or a hydroponics tray.", group: "Diona" )]
		public void eat_weeds(  ) {
			ByTable trays = null;
			Obj_Machinery_PortableAtmospherics_Hydroponics tray = null;
			dynamic target = null;

			trays = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( null, 1 ), typeof(Obj_Machinery_PortableAtmospherics_Hydroponics) )) {
				tray = _a;
				

				if ( tray.weedlevel > 0 ) {
					trays.Add( tray );
				}
			}
			target = Interface13.Input( "Select a tray:", null, null, null, trays, InputType.Null | InputType.Any );

			if ( !( this != null ) || !Lang13.Bool( target ) || target.weedlevel == 0 ) {
				return;
			}
			((Reagents)this.reagents).add_reagent( "nutriment", target.weedlevel );
			target.weedlevel = 0;
			this.visible_message( "<span class='warning'>" + this + " begins rooting through " + target + ", ripping out weeds and eating them noisily.</span>", "<span class='warning'>You begin rooting through " + target + ", ripping out weeds and eating them noisily.</span>" );
			return;
		}

		// Function from file: diona.dm
		[Verb]
		[VerbInfo( name: "Fertilize plant", desc: "Turn your food into nutrients for plants.", group: "Diona" )]
		public void fertilize_plant(  ) {
			ByTable trays = null;
			Obj_Machinery_PortableAtmospherics_Hydroponics tray = null;
			dynamic target = null;

			trays = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( null, 1 ), typeof(Obj_Machinery_PortableAtmospherics_Hydroponics) )) {
				tray = _a;
				

				if ( tray.nutrilevel < 10 ) {
					trays.Add( tray );
				}
			}
			target = Interface13.Input( "Select a tray:", null, null, null, trays, InputType.Null | InputType.Any );

			if ( !( this != null ) || !Lang13.Bool( target ) || Convert.ToInt32( target.nutrilevel ) == 10 ) {
				return;
			}
			this.nutrition -= ( 10 - Convert.ToDouble( target.nutrilevel ) ) * 5;
			target.nutrilevel = 10;
			this.visible_message( "<span class='warning'>" + this + " secretes a trickle of green liquid from its tail, refilling " + target + "'s nutrient tray.</span>", "<span class='warning'>You secrete a trickle of green liquid from your tail, refilling " + target + "'s nutrient tray.</span>" );
			return;
		}

	}

}