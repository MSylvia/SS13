// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Camera_AiEye : Mob_Camera {

		public ByTable visibleCameraChunks = new ByTable();
		public Mob_Living_Silicon_Ai ai = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
		}

		public Mob_Camera_AiEye ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: eye.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			Ent_Dynamic M = null;
			Ent_Dynamic H = null;

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}

			if ( Lang13.Bool( _args[1].frequency ) ) {
				return null;
			}
			M = _args[1].speaker;

			if ( M is Mob ) {
				
				if ( M is Mob_Living_Carbon_Human ) {
					H = _args[1].speaker;

					if ( Lang13.Bool( ((dynamic)H).check_body_part_coverage( 4096 ) ) ) {
						return null;
					}
				}
				this.ai.Hear( _args );
			}
			return null;
		}

		// Function from file: eye.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			return false;
		}

		// Function from file: eye.dm
		public override bool forceMove( dynamic destination = null, int? no_tp = null ) {
			dynamic H = null;

			
			if ( this.ai != null ) {
				
				if ( !( this.ai.loc is Tile ) ) {
					return false;
				}

				if ( !( destination is Tile ) ) {
					destination = destination.loc;

					while (!( destination is Tile )) {
						destination = destination.loc;
					}
				}
				this.forceEnter( destination );
				GlobalVars.cameranet.visibility( this );

				if ( this.ai.client != null && this.ai.client.eye != this ) {
					this.ai.client.eye = this;
					this.ai.sight |= GlobalVars.SEE_TURFS;
					this.ai.sight |= GlobalVars.SEE_MOBS;
					this.ai.sight |= GlobalVars.SEE_OBJS;
					this.ai.see_in_dark = 8;
					this.ai.see_invisible = 45;
				}

				if ( this.ai.current is Obj_Machinery_Hologram_Holopad ) {
					H = this.ai.current;
					((Obj_Machinery_Hologram_Holopad)H).move_hologram();
				}
			}
			return false;
		}

	}

}