// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Human_Interactive : Mob_Living_Carbon_Human {

		public int doing = 0;
		public int interest = 100;
		public int timeout = 0;
		public int inactivity_period = 0;
		public dynamic TARGET = null;
		public dynamic LAST_TARGET = null;
		public ByTable nearby = new ByTable();
		public dynamic best_force = 0;
		public bool retal = false;
		public dynamic retal_target = null;
		public bool update_hands = false;
		public Obj_Item_Weapon_Card_Id MYID = null;
		public Obj_Item_Device_Pda MYPDA = null;
		public dynamic main_hand = null;
		public dynamic other_hand = null;
		public int TRAITS = 0;
		public dynamic myjob = null;
		public int robustness = 50;
		public int smartness = 50;
		public int attitude = 50;
		public int slyness = 50;
		public bool graytide = false;
		public int chattyness = 15;
		public ByTable functions = new ByTable(new object [] { "nearbyscan", "combat", "doorscan", "shitcurity", "chatter" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.faction = new ByTable(new object [] { "station" });
		}

		// Function from file: interactive.dm
		public Mob_Living_Carbon_Human_Interactive ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic R = null;
			dynamic L = null;
			dynamic R2 = null;
			dynamic L2 = null;
			dynamic R3 = null;
			dynamic L3 = null;
			Obj_Item_Organ_Limb LIMB = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.random();
			this.MYID = new Obj_Item_Weapon_Card_Id( this );
			this.MYID.name = "" + this.real_name + "'s ID Card (" + this.myjob.title + ")";
			this.MYID.assignment = "" + this.myjob.title;
			this.MYID.registered_name = this.real_name;
			this.MYID.access = this.myjob.access;
			this.equip_to_slot_or_del( this.MYID, 7 );
			this.MYPDA = new Obj_Item_Device_Pda( this );
			this.MYPDA.owner = this.real_name;
			this.MYPDA.ownjob = "Crew";
			this.MYPDA.name = "PDA-" + this.real_name + " (" + this.myjob.title + ")";
			this.equip_to_slot_or_del( this.MYPDA, 6 );
			this.zone_selected = "chest";

			if ( Rand13.PercentChance( 10 ) ) {
				
				if ( Rand13.PercentChance( ((int)( 67.5 )) ) ) {
					R = Lang13.FindIn( typeof(Obj_Item_Organ_Limb_RArm), this.organs );
					GlobalFuncs.qdel( R );
					this.organs.Add( new Obj_Item_Organ_Limb_Robot_RArm() );
				} else {
					L = Lang13.FindIn( typeof(Obj_Item_Organ_Limb_LArm), this.organs );
					GlobalFuncs.qdel( L );
					this.organs.Add( new Obj_Item_Organ_Limb_Robot_LArm() );
				}

				if ( Rand13.PercentChance( ((int)( 67.5 )) ) ) {
					R2 = Lang13.FindIn( typeof(Obj_Item_Organ_Limb_RLeg), this.organs );
					GlobalFuncs.qdel( R2 );
					this.organs.Add( new Obj_Item_Organ_Limb_Robot_RLeg() );
				} else {
					L2 = Lang13.FindIn( typeof(Obj_Item_Organ_Limb_LLeg), this.organs );
					GlobalFuncs.qdel( L2 );
					this.organs.Add( new Obj_Item_Organ_Limb_Robot_LLeg() );
				}

				if ( Rand13.PercentChance( ((int)( 67.5 )) ) ) {
					R3 = Lang13.FindIn( typeof(Obj_Item_Organ_Limb_Chest), this.organs );
					GlobalFuncs.qdel( R3 );
					this.organs.Add( new Obj_Item_Organ_Limb_Robot_Chest() );
				} else {
					L3 = Lang13.FindIn( typeof(Obj_Item_Organ_Limb_Head), this.organs );
					GlobalFuncs.qdel( L3 );
					this.organs.Add( new Obj_Item_Organ_Limb_Robot_Head() );
				}

				foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
					LIMB = _a;
					
					LIMB.owner = this;
				}
			}
			this.update_icons();
			this.update_damage_overlays(  );
			this.update_augments();
			this.hand = false;

			if ( ( this.TRAITS & 2 ) != 0 ) {
				this.robustness = 75;
			} else if ( ( this.TRAITS & 4 ) != 0 ) {
				this.robustness = 25;
			}

			if ( ( this.TRAITS & 8 ) != 0 ) {
				this.smartness = 25;
			} else if ( ( this.TRAITS & 16 ) != 0 ) {
				this.disabilities |= 256;
				this.smartness = 75;
			}

			if ( ( this.TRAITS & 32 ) != 0 ) {
				this.attitude = 75;
			} else if ( ( this.TRAITS & 64 ) != 0 ) {
				this.attitude = 1;
			}

			if ( ( this.TRAITS & 128 ) != 0 ) {
				this.slyness = 75;
			}
			GlobalVars.SSnpc.insertBot( this );
			return;
		}

		// Function from file: interactive.dm
		public override bool Life(  ) {
			Obj_Item_Weapon_Grab G = null;
			dynamic Proc = null;
			dynamic D = null;
			Tile T = null;
			dynamic W = null;
			dynamic C = null;
			dynamic I = null;
			dynamic STR = null;
			dynamic W2 = null;

			base.Life();

			if ( this.isnotfunc() ) {
				Map13.Walk( this, 0, 0 );
				return false;
			}

			if ( this.a_intent != "disarm" ) {
				this.a_intent = "disarm";
			}

			if ( this.interest < 0 || this.inactivity_period < 0 ) {
				
				if ( this.interest < 0 ) {
					this.interest = 0;
				}

				if ( this.inactivity_period < 0 ) {
					this.inactivity_period = 0;
				}
			}

			if ( this.interest > 100 ) {
				this.interest = 100;
			}
			this.nearby = new ByTable();

			if ( !Lang13.Bool( this.l_hand ) || !Lang13.Bool( this.r_hand ) ) {
				this.update_hands = true;
			}

			if ( this.update_hands ) {
				
				if ( Lang13.Bool( this.l_hand ) || Lang13.Bool( this.r_hand ) ) {
					
					if ( Lang13.Bool( this.l_hand ) ) {
						this.hand = true;
						this.main_hand = this.l_hand;

						if ( Lang13.Bool( this.r_hand ) ) {
							this.other_hand = this.r_hand;
						}
					} else if ( Lang13.Bool( this.r_hand ) ) {
						this.hand = false;
						this.main_hand = this.r_hand;

						if ( Lang13.Bool( this.l_hand ) ) {
							this.other_hand = this.l_hand;
						}
					}
					this.update_icons();
				}
				this.update_hands = false;
			}

			if ( this.grabbed_by.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.grabbed_by, typeof(Obj_Item_Weapon_Grab) )) {
					G = _a;
					

					if ( this.Adjacent( G ) ) {
						this.a_intent = "disarm";
						((Ent_Static)G.assailant).attack_hand( this );
						this.inactivity_period = 10;
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.functions )) {
				Proc = _b;
				

				if ( !this.isnotfunc() ) {
					this.callfunction( Proc );
				}
			}

			if ( Lang13.Bool( this.TARGET ) && Map13.FetchInView( null, 1 ).Contains( this.TARGET ) || this.timeout >= 2 ) {
				
				if ( Map13.FetchInView( this, 1 ).Contains( this.TARGET ) ) {
					this.doing |= 2;

					if ( this.TARGET is Obj_Machinery_Door ) {
						D = this.TARGET;

						if ( ((Obj)D).check_access( this.MYID ) && !( D is Obj_Machinery_Door_Poddoor ) ) {
							D.open();
							Task13.Sleep( 15 );
							T = Map13.GetStep( Map13.GetStep( D.loc, this.dir ), this.dir );
							this.tryWalk( T );
						}
					}

					if ( Rand13.PercentChance( this.slyness ) ) {
						
						if ( this.TARGET is Obj_Item_Weapon ) {
							W = this.TARGET;

							if ( Convert.ToDouble( W.force ) >= Convert.ToDouble( this.best_force ) || Rand13.PercentChance( ((int)( 67.5 )) ) ) {
								
								if ( !Lang13.Bool( this.l_hand ) || !Lang13.Bool( this.r_hand ) ) {
									this.take_to_slot( W );
								} else {
									this.insert_into_backpack();
								}
							}
						}

						if ( this.TARGET is Obj_Item_Clothing ) {
							
							if ( Rand13.PercentChance( ((int)( 67.5 )) ) ) {
								
								if ( !Lang13.Bool( this.l_hand ) || !Lang13.Bool( this.r_hand ) ) {
									C = this.TARGET;
									this.take_to_slot( C );

									if ( !this.equip_to_appropriate_slot( C ) ) {
										I = this.get_item_by_slot( C );
										this.unEquip( I );
										this.equip_to_appropriate_slot( C );
									}
									this.update_hands = true;
									this.drop_item();

									if ( Lang13.Bool( ((dynamic)this.loc).Contains( ((dynamic)( this.loc != null || this.MYID != null )).Contains( this.MYPDA ) ) ) ) {
										
										if ( Lang13.Bool( ((dynamic)this.loc).Contains( this.MYPDA ) ) ) {
											this.equip_to_appropriate_slot( this.MYPDA );
										}

										if ( Lang13.Bool( ((dynamic)this.loc).Contains( this.MYID ) ) ) {
											this.equip_to_appropriate_slot( this.MYID );
										}
									}
								}
							}
						}
					}

					if ( this.TARGET is Obj_Structure ) {
						STR = this.TARGET;

						if ( Lang13.Bool( this.main_hand ) ) {
							W2 = this.main_hand;
							((Ent_Static)STR).attackby( W2, this );
						} else {
							((Ent_Static)STR).attack_hand( this );
						}
					}
				}
				this.interest = this.interest + 25;
				this.doing = this.doing & 65533;
				this.timeout = 0;
				this.TARGET = null;
			} else {
				this.tryWalk( this.TARGET );
				this.timeout++;
			}

			if ( !( this.doing != 0 ) ) {
				this.interest--;
			} else {
				this.interest++;
			}

			if ( this.inactivity_period > 0 ) {
				this.inactivity_period--;
			}

			if ( !( this.doing != 0 ) && !this.isnotfunc() && !Lang13.Bool( this.TARGET ) ) {
				this.doing |= 4;

				if ( this.nearby.len > 4 ) {
					this.TARGET = Rand13.PickFromTable( this.target_filter( GlobalFuncs.ultra_range( 32, this, true ) ) );
				} else if ( Rand13.PercentChance( ((int)( 67.5 )) ) ) {
					this.TARGET = Lang13.FindIn( typeof(Obj_Item), GlobalFuncs.ultra_range( 16, this, true ) );
				} else if ( Rand13.PercentChance( ((int)( 67.5 )) ) ) {
					this.TARGET = Lang13.FindIn( typeof(Obj_Machinery_Door), GlobalFuncs.ultra_range( 16, this, true ) );
				} else if ( Rand13.PercentChance( ((int)( 67.5 )) ) ) {
					this.TARGET = Rand13.PickFromTable( this.target_filter( GlobalFuncs.ultra_range( 16, this, true ) ) );
				} else {
					this.TARGET = GlobalFuncs.safepick( GlobalFuncs.get_area_turfs( this.job2area( this.myjob ) ) );
				}
				this.tryWalk( this.TARGET );
			}
			this.LAST_TARGET = this.TARGET;
			return false;
		}

		// Function from file: interactive.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			base.attack_hand( (object)(a), b, c );

			if ( Convert.ToDouble( this.health ) > 0 ) {
				
				if ( a.a_intent == "help" ) {
					this.chatter();
				}

				if ( a.a_intent == "harm" ) {
					this.retal = true;
					this.retal_target = a;
				}
			}
			return null;
		}

		// Function from file: interactive.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			dynamic potentialAssault = null;

			potentialAssault = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInView( P.starting, 2 ) );

			if ( Lang13.Bool( potentialAssault ) ) {
				this.retal = true;
				this.retal_target = potentialAssault;
			}
			base.bullet_act( (object)(P), (object)(def_zone) );
			return null;
		}

		// Function from file: interactive.dm
		public override bool attacked_by( Obj_Item I = null, dynamic user = null, bool? def_zone = null ) {
			base.attacked_by( I, (object)(user), def_zone );
			this.retal = true;
			this.retal_target = user;
			return false;
		}

		// Function from file: interactive.dm
		public void nearbyscan( dynamic obj = null ) {
			Mob_Living M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 4 ), typeof(Mob_Living) )) {
				M = _a;
				

				if ( M != this ) {
					this.nearby.Add( M );
				}
			}
			return;
		}

		// Function from file: interactive.dm
		public void doorscan( dynamic obj = null ) {
			dynamic dir = null;
			Tile T = null;
			Obj_Machinery_Door D = null;

			
			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _b;
				
				T = Map13.GetStep( this, Convert.ToInt32( dir ) );

				if ( T != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Obj_Machinery_Door) )) {
						D = _a;
						

						if ( D.check_access( this.MYID ) && !( D is Obj_Machinery_Door_Poddoor ) && D.density ) {
							Task13.Schedule( 1, (Task13.Closure)(() => {
								D.open();
								Task13.Sleep( 5 );
								this.walk2derpless( Map13.GetStep( D, Convert.ToInt32( dir ) ) );
								return;
							}));
						}
					}
				}
			}
			return;
		}

		// Function from file: interactive.dm
		public void combat( dynamic obj = null ) {
			dynamic M = null;
			dynamic M2 = null;
			dynamic P = null;
			dynamic P2 = null;
			dynamic W = null;

			this.enforce_hands();

			if ( this.canmove ) {
				
				if ( Rand13.PercentChance( this.attitude ) && ( this.graytide || ( this.TRAITS & 32 ) != 0 ) || this.retal ) {
					this.a_intent = "harm";
					this.zone_selected = Rand13.Pick(new object [] { "chest", "r_leg", "l_leg", "r_arm", "l_arm", "head" });
					this.doing |= 8;

					if ( this.retal ) {
						this.TARGET = this.retal_target;
					} else {
						M = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInViewExcludeThis( this, 7 ) );

						if ( M is Mob_Living_Carbon_Human_Interactive_Greytide ) {
							return;
						}

						if ( M != this ) {
							this.TARGET = M;
						}

						if ( !Lang13.Bool( M ) ) {
							this.doing = this.doing & 65527;
						}
					}
				}
			}

			if ( Lang13.Bool( this.TARGET ) && ( this.doing & 8 ) != 0 || this.graytide ) {
				M2 = this.TARGET;

				if ( M2 is Mob_Living ) {
					
					if ( this.targetRange( M2 ) <= 50 ) {
						
						if ( Convert.ToDouble( M2.health ) > 1 ) {
							
							if ( Lang13.Bool( this.main_hand ) ) {
								
								if ( this.main_hand.force != 0 ) {
									
									if ( this.main_hand is Obj_Item_Weapon_Gun_Projectile ) {
										P = this.main_hand;

										if ( !Lang13.Bool( P.chambered ) ) {
											((Obj_Item_Weapon_Gun_Projectile)P).chamber_round();
											P.update_icon();
										} else if ( ((Obj_Item_Weapon_Gun_Projectile)P).get_ammo( true ) == 0 ) {
											((Obj_Item)P).attack_self( this );
										} else {
											P.afterattack( this.TARGET, this );
										}
									} else if ( this.main_hand is Obj_Item_Weapon_Gun_Energy ) {
										P2 = this.main_hand;

										if ( !Lang13.Bool( ((Obj_Item_Weapon_Gun)P2).can_shoot() ) ) {
											P2.update_icon();
											this.drop_item();
										} else {
											P2.afterattack( this.TARGET, this );
										}
									} else if ( Map13.GetDistance( this, this.TARGET ) > 2 ) {
										
										if ( !this.walk2derpless( this.TARGET ) ) {
											this.timeout++;
										}
									} else {
										W = this.main_hand;

										if ( Rand13.PercentChance( this.robustness ) ) {
											((Obj_Item)W).attack( this.TARGET, this );
										}
									}
									Task13.Sleep( 1 );
								}
							} else if ( this.targetRange( this.TARGET ) > 2 ) {
								this.tryWalk( this.TARGET );
							} else if ( this.Adjacent( this.TARGET ) ) {
								((Ent_Static)M2).attack_hand( this );
								Task13.Sleep( 1 );
							}
						}
						this.timeout++;
					} else if ( this.timeout >= 10 || Convert.ToDouble( M2.health ) <= 1 || !( this.targetRange( M2 ) > 14 ) ) {
						this.doing = this.doing & 65527;
						this.timeout = 0;
						this.TARGET = null;
						this.retal = false;
						this.retal_target = null;
					}
				} else {
					this.timeout++;
				}
			}
			return;
		}

		// Function from file: interactive.dm
		public void sidestep( Tile obj = null ) {
			bool shift = false;
			dynamic dir = null;
			Tile T = null;
			Obj A = null;
			int towalk = 0;
			int towalk2 = 0;

			shift = false;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _b;
				
				T = Map13.GetStep( this, Convert.ToInt32( dir ) );

				if ( T != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( T.contents, typeof(Obj) )) {
						A = _a;
						

						if ( this.denied_filter( A ) ) {
							shift = true;
						}
					}

					if ( T.density ) {
						shift = true;
					}

					if ( shift ) {
						
						if ( this.dir == GlobalVars.NORTH || GlobalVars.SOUTH != 0 ) {
							towalk = Convert.ToInt32( Rand13.Pick(new object [] { GlobalVars.EAST, GlobalVars.WEST }) );
							Map13.WalkTowards( this, Map13.GetStep( this, towalk ), 0, 5 );
						} else {
							towalk2 = Convert.ToInt32( Rand13.Pick(new object [] { GlobalVars.NORTH, GlobalVars.SOUTH }) );
							Map13.WalkTowards( this, Map13.GetStep( this, towalk2 ), 0, 5 );
						}
					}
				}
			}
			return;
		}

		// Function from file: interactive.dm
		public void shitcurity( dynamic obj = null ) {
			Obj_Item I = null;

			
			if ( this.retal && Lang13.Bool( this.TARGET ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item) )) {
					I = _a;
					

					if ( I is Obj_Item_Weapon_Restraints_Handcuffs ) {
						this.take_to_slot( I );
						I.attack( this.TARGET, this );
						Task13.Sleep( 25 );
					}
				}
			}
			return;
		}

		// Function from file: interactive.dm
		public void chatter( dynamic obj = null ) {
			dynamic verbs_use = null;
			dynamic verbs_touch = null;
			dynamic verbs_move = null;
			dynamic nouns_insult = null;
			dynamic nouns_generic = null;
			dynamic nouns_objects = null;
			dynamic nouns_body = null;
			dynamic adjective_insult = null;
			dynamic adjective_objects = null;
			dynamic adjective_generic = null;
			dynamic curse_words = null;
			dynamic chat = null;
			dynamic chat2 = null;
			dynamic chat3 = null;
			dynamic what = null;
			string toSay = null;
			int? i = null;

			verbs_use = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "verbs_use" ) );
			verbs_touch = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "verbs_touch" ) );
			verbs_move = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "verbs_move" ) );
			nouns_insult = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "nouns_insult" ) );
			nouns_generic = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "nouns_generic" ) );
			nouns_objects = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "nouns_objects" ) );
			nouns_body = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "nouns_body" ) );
			adjective_insult = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "adjective_insult" ) );
			adjective_objects = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "adjective_objects" ) );
			adjective_generic = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "adjective_generic" ) );
			curse_words = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "curse_words" ) );

			if ( ( this.doing & 2 ) != 0 ) {
				
				if ( Rand13.PercentChance( this.chattyness ) ) {
					chat = Rand13.Pick(new object [] { "This " + nouns_objects + " is a little " + adjective_objects + ".", "Well " + verbs_use + " my " + nouns_body + ", this " + nouns_insult + " is pretty " + adjective_insult + ".", "" + GlobalFuncs.capitalize( curse_words ) + ", what am I meant to do with this " + adjective_insult + " " + nouns_objects + "." });
					this.say( chat );
				}
			}

			if ( ( this.doing & 4 ) != 0 ) {
				
				if ( Rand13.PercentChance( this.chattyness ) ) {
					chat2 = Rand13.Pick(new object [] { "Oh " + curse_words + ", " + verbs_move + "!", "Time to get my " + adjective_generic + " " + adjective_insult + " " + nouns_body + " elsewhere.", "I wonder if there is anything to " + verbs_use + " and " + verbs_touch + " somewhere else.." });
					this.say( chat2 );
				}
			}

			if ( ( this.doing & 8 ) != 0 ) {
				
				if ( Rand13.PercentChance( this.chattyness ) ) {
					chat3 = Rand13.Pick(new object [] { "I'm going to " + verbs_use + " you, you " + adjective_insult + " " + nouns_insult + "!", "Rend and " + verbs_touch + ", Rend and " + verbs_use + "!", "You " + nouns_insult + ", I'm going to " + verbs_use + " you right in the " + nouns_body + ". JUST YOU WAIT!" });
					this.say( chat3 );
				}
			}

			if ( Rand13.PercentChance( ((int)( this.chattyness / 2 )) ) ) {
				what = Rand13.Pick(new object [] { 1, 2, 3, 4, 5 });

				dynamic _a = what; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					this.say( "Well " + curse_words + ", this is a " + adjective_generic + " situation." );
				} else if ( _a==2 ) {
					this.say( "Oh " + curse_words + ", that " + nouns_insult + " was one hell of an " + adjective_insult + " " + nouns_body + "." );
				} else if ( _a==3 ) {
					this.say( "I want to " + verbs_use + " that " + nouns_insult + " when I find them." );
				} else if ( _a==4 ) {
					this.say( "" + Rand13.Pick(new object [] { "Innocent", "Guilty", "Traitorous", "Honk" }) + " until proven " + adjective_generic + "!" );
				} else if ( _a==5 ) {
					toSay = "";
					i = null;
					i = 0;

					while (( i ??0) < 5) {
						curse_words = Rand13.PickFromTable( GlobalFuncs.strings( "npc_chatter.txt", "curse_words" ) );
						toSay += "" + curse_words + " ";
						i++;
					}
					this.say( "Hey " + nouns_generic + ", why dont you go " + toSay + ", you " + nouns_insult + "!" );
				}
			}
			return;
		}

		// Function from file: interactive.dm
		public bool denied_filter( Obj target = null ) {
			ByTable denied = null;
			dynamic a = null;

			denied = new ByTable(new object [] { typeof(Obj_Structure_Window), typeof(Obj_Structure_Table) });

			foreach (dynamic _a in Lang13.Enumerate( denied )) {
				a = _a;
				

				if ( Lang13.Bool( a.IsInstanceOfType( target ) ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: interactive.dm
		public ByTable target_filter( ByTable target = null ) {
			ByTable L = null;
			Ent_Static A = null;

			L = target;

			foreach (dynamic _a in Lang13.Enumerate( target, typeof(Ent_Static) )) {
				A = _a;
				

				if ( A is Zone || A is Tile_Space ) {
					L.Remove( A );
				}
			}
			return L;
		}

		// Function from file: interactive.dm
		public Type job2area( dynamic target = null ) {
			dynamic T = null;

			T = target;

			if ( T.title == "Assistant" ) {
				return typeof(Zone_Hallway_Primary);
			}

			if ( T.title == "Captain" || T.title == "Head of Personnel" ) {
				return typeof(Zone_Bridge);
			}

			if ( T.title == "Bartender" || T.title == "Chef" ) {
				return typeof(Zone_CrewQuarters);
			}

			if ( T.title == "Station Engineer" || T.title == "Chief Engineer" || T.title == "Atmospheric Technician" ) {
				return typeof(Zone_Engine);
			}

			if ( T.title == "Chief Medical Officer" || T.title == "Medical Doctor" || T.title == "Chemist" || T.title == "Virologist" || T.title == "Geneticist" ) {
				return typeof(Zone_Medical);
			}

			if ( T.title == "Research Director" || T.title == "Scientist" || T.title == "Roboticist" ) {
				return typeof(Zone_Toxins);
			}

			if ( T.title == "Head of Security" || T.title == "Warden" || T.title == "Security Officer" || T.title == "Detective" ) {
				return typeof(Zone_Security);
			} else {
				return Rand13.Pick(new object [] { typeof(Zone_Hallway), typeof(Zone_CrewQuarters) });
			}
		}

		// Function from file: interactive.dm
		public bool walk2derpless( dynamic target = null ) {
			dynamic T = null;
			Tile D = null;

			
			if ( !Lang13.Bool( target ) ) {
				return false;
			}
			T = GlobalFuncs.get_turf( target );
			D = Map13.GetStep( this, this.dir );

			if ( D != null ) {
				
				if ( !D.density ) {
					Map13.WalkTowards( this, T, 0, 5 );
					this.doing = this.doing & 65531;
					return true;
				} else {
					this.sidestep( D );
					this.doing = this.doing & 65531;
					return false;
				}
			} else {
				this.doing = this.doing & 65531;
				return false;
			}
			return false;
		}

		// Function from file: interactive.dm
		public void tryWalk( dynamic TARGET = null ) {
			
			if ( !this.isnotfunc() ) {
				
				if ( !this.walk2derpless( TARGET ) ) {
					this.timeout++;
				}
			} else {
				this.timeout++;
			}
			return;
		}

		// Function from file: interactive.dm
		public void callfunction( dynamic Proc = null ) {
			Lang13.Call( Lang13.BindFunc( this, Proc ), this );
			return;
		}

		// Function from file: interactive.dm
		public int targetRange( dynamic towhere = null ) {
			return Map13.GetDistance( GlobalFuncs.get_turf( towhere ), GlobalFuncs.get_turf( this ) );
		}

		// Function from file: interactive.dm
		public void insert_into_backpack(  ) {
			ByTable slots = null;
			dynamic I = null;
			dynamic BP = null;

			slots = new ByTable().Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
			I = this.get_item_by_slot( Rand13.PickFromTable( slots ) );
			BP = this.get_item_by_slot( 1 );

			if ( Lang13.Bool( this.back ) && Lang13.Bool( BP ) && Lang13.Bool( I ) ) {
				
				if ( ((Obj_Item_Weapon_Storage)BP).can_be_inserted( I, false ) ) {
					((Obj_Item_Weapon_Storage)BP).handle_item_insertion( I, false );
				}
			} else {
				this.unEquip( I, GlobalVars.TRUE );
			}
			this.update_hands = true;
			return;
		}

		// Function from file: interactive.dm
		public void take_to_slot( dynamic G = null ) {
			ByTable slots = null;

			slots = new ByTable().Set( "left pocket", 15 ).Set( "right pocket", 16 ).Set( "left hand", 4 ).Set( "right hand", 5 );
			G.loc = this;

			if ( Lang13.Bool( G.force ) && Convert.ToDouble( G.force ) > Convert.ToDouble( this.best_force ) ) {
				this.best_force = G.force;
			}
			this.equip_in_one_of_slots( G, slots );
			this.update_hands = true;
			return;
		}

		// Function from file: interactive.dm
		public void swap_hands(  ) {
			dynamic T = null;

			this.hand = !this.hand;
			T = this.other_hand;
			this.main_hand = this.other_hand;
			this.other_hand = T;
			return;
		}

		// Function from file: interactive.dm
		public void enforce_hands(  ) {
			
			if ( this.hand ) {
				
				if ( !Lang13.Bool( this.l_hand ) ) {
					this.main_hand = null;

					if ( Lang13.Bool( this.r_hand ) ) {
						this.swap_hands();
					}
				}
			} else if ( !Lang13.Bool( this.r_hand ) ) {
				this.main_hand = null;

				if ( Lang13.Bool( this.l_hand ) ) {
					this.swap_hands();
				}
			}
			return;
		}

		// Function from file: interactive.dm
		public bool isnotfunc( int? checkDead = null ) {
			checkDead = checkDead ?? GlobalVars.TRUE;

			
			if ( !this.canmove ) {
				return true;
			}

			if ( Convert.ToDouble( this.health ) <= 0 && Lang13.Bool( checkDead ) ) {
				return true;
			}

			if ( this.restrained() ) {
				return true;
			}

			if ( this.paralysis != 0 ) {
				return true;
			}

			if ( this.stunned != 0 ) {
				return true;
			}

			if ( this.stat != 0 ) {
				return true;
			}

			if ( this.inactivity_period > 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: interactive.dm
		public string interest2string( int inter = 0 ) {
			string toReturn = null;

			toReturn = "Flatlined";

			if ( inter >= 0 && inter <= 25 ) {
				toReturn = "Very Bored";
			}

			if ( inter >= 26 && inter <= 50 ) {
				toReturn = "Bored";
			}

			if ( inter >= 51 && inter <= 75 ) {
				toReturn = "Content";
			}

			if ( inter >= 76 ) {
				toReturn = "Excited";
			}
			return toReturn;
		}

		// Function from file: interactive.dm
		public string doing2string( dynamic doin = null ) {
			string toReturn = null;

			toReturn = "";

			if ( !Lang13.Bool( doin ) ) {
				toReturn = "not doing anything";
			}

			if ( Lang13.Bool( doin & 2 ) ) {
				toReturn += "interacting with something, ";
			}

			if ( Lang13.Bool( doin & 8 ) ) {
				toReturn += "engaging in combat, ";
			}

			if ( Lang13.Bool( doin & 4 ) ) {
				toReturn += "and going somewhere";
			}
			return toReturn;
		}

		// Function from file: interactive.dm
		public void random(  ) {
			ByTable jobs = null;
			dynamic job = null;
			dynamic J = null;

			this.age = Rand13.Int( 17, 85 );
			jobs = GlobalVars.SSjob.occupations.Copy();

			foreach (dynamic _a in Lang13.Enumerate( jobs )) {
				job = _a;
				
				J = job;

				if ( J.title == "Cyborg" || J.title == "AI" || J.title == "Chaplain" || J.title == "Mime" ) {
					jobs.Remove( J );
				}
			}
			this.myjob = Rand13.PickFromTable( jobs );
			this.job = this.myjob.title;

			if ( !this.graytide ) {
				this.myjob.equip( this );
			}
			((Job)this.myjob).apply_fingerprints( this );
			return;
		}

		// Function from file: interactive.dm
		public int? takeDelegate( Mob_Living_Carbon_Human_Interactive from = null, int? doReset = null ) {
			doReset = doReset ?? GlobalVars.TRUE;

			this.eye_color = "red";

			if ( from == this ) {
				return GlobalVars.FALSE;
			}
			this.TARGET = from.TARGET;
			this.LAST_TARGET = from.LAST_TARGET;
			this.retal = from.retal;
			this.retal_target = from.retal_target;
			this.doing = from.doing;
			this.timeout = 0;
			this.inactivity_period = 0;
			this.interest = 100;

			if ( Lang13.Bool( doReset ) ) {
				from.TARGET = null;
				from.LAST_TARGET = null;
				from.retal = false;
				from.retal_target = null;
				from.doing = 0;
			}
			return GlobalVars.TRUE;
		}

	}

}