// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Alien_Larva : Mob_Living_Carbon_Alien {

		public int amount_grown = 0;
		public dynamic co2overloadtime = null;
		public double temperature_resistance = 348.41;
		public int max_grown = 200;
		public dynamic time_of_birth = null;
		public bool temperature_alert = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "alien larva";
			this.pass_flags = 1;
			this.maxHealth = 25;
			this.health = 25;
			this.storedPlasma = 50;
			this.max_plasma = 50;
			this.size = 1;
			this.icon_state = "larva0";
		}

		// Function from file: larva.dm
		public Mob_Living_Carbon_Alien_Larva ( dynamic loc = null ) : base( (object)(loc) ) {
			Reagents R = null;

			R = new Reagents( 100 );
			this.reagents = R;
			R.my_atom = this;

			if ( this.name == "alien larva" ) {
				this.name = "alien larva (" + Rand13.Int( 1, 1000 ) + ")";
			}
			this.real_name = this.name;
			this.regenerate_icons();
			this.add_language( "Xenomorph" );
			this.default_language = GlobalVars.all_languages["Xenomorph"];
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: update_icons.dm
		public override dynamic update_icons(  ) {
			int state = 0;

			state = 0;

			if ( this.amount_grown > 150 ) {
				state = 2;
			} else if ( this.amount_grown > 50 ) {
				state = 1;
			}

			if ( this.stat == 2 ) {
				this.icon_state = "larva" + state + "_dead";
			} else if ( Lang13.Bool( this.handcuffed ) || Lang13.Bool( this.legcuffed ) ) {
				this.icon_state = "larva" + state + "_cuff";
			} else if ( this.stunned != 0 ) {
				this.icon_state = "larva" + state + "_stun";
			} else if ( this.lying == true || this.resting != 0 ) {
				this.icon_state = "larva" + state + "_sleep";
			} else {
				this.icon_state = "larva" + state;
			}
			return null;
		}

		// Function from file: update_icons.dm
		public override void regenerate_icons(  ) {
			this.overlays = new ByTable();
			this.update_icons();
			return;
		}

		// Function from file: life.dm
		public void handle_stomach(  ) {
			Mob_Living M = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( this.stomach_contents, typeof(Mob_Living) )) {
					M = _a;
					

					if ( M.loc != this ) {
						this.stomach_contents.Remove( M );
						continue;
					}

					if ( M is Mob_Living_Carbon && this.stat != 2 ) {
						
						if ( M.stat == 2 ) {
							M.death( true );
							this.stomach_contents.Remove( M );
							GlobalFuncs.qdel( M );
							M = null;
							continue;
						}

						if ( GlobalVars.air_master.current_cycle % 3 == 1 ) {
							
							if ( !( ( M.status_flags & 4096 ) != 0 ) ) {
								M.adjustBruteLoss( 5 );
							}
							this.nutrition += 10;
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: life.dm
		public void handle_random_events(  ) {
			return;
		}

		// Function from file: life.dm
		public bool handle_regular_hud_updates(  ) {
			
			if ( this.stat == 2 || this.mutations.Contains( 3 ) ) {
				this.sight |= GlobalVars.SEE_TURFS;
				this.sight |= GlobalVars.SEE_MOBS;
				this.sight |= GlobalVars.SEE_OBJS;
				this.see_in_dark = 8;
				this.see_invisible = 5;
			} else if ( this.stat != 2 ) {
				this.sight |= GlobalVars.SEE_MOBS;
				this.sight &= 65519;
				this.sight &= 65527;
				this.see_in_dark = 4;
				this.see_invisible = 5;
			}

			if ( this.healths != null ) {
				
				if ( this.stat != 2 ) {
					
					dynamic _a = this.health; // Was a switch-case, sorry for the mess.
					if ( 25<=_a&&_a<=Double.PositiveInfinity ) {
						((dynamic)this.healths).icon_state = "health0";
					} else if ( 19<=_a&&_a<=25 ) {
						((dynamic)this.healths).icon_state = "health1";
					} else if ( 13<=_a&&_a<=19 ) {
						((dynamic)this.healths).icon_state = "health2";
					} else if ( 7<=_a&&_a<=13 ) {
						((dynamic)this.healths).icon_state = "health3";
					} else if ( 0<=_a&&_a<=7 ) {
						((dynamic)this.healths).icon_state = "health4";
					} else {
						((dynamic)this.healths).icon_state = "health5";
					}
				} else {
					((dynamic)this.healths).icon_state = "health6";
				}
			}

			if ( this.pullin != null ) {
				((dynamic)this.pullin).icon_state = "pull" + ( this.pulling != null ? true : false );
			}

			if ( this.toxin != null ) {
				((dynamic)this.toxin).icon_state = "tox" + ( this.toxins_alert != 0 ? true : false );
			}

			if ( this.oxygen != null ) {
				((dynamic)this.oxygen).icon_state = "oxy" + ( this.oxygen_alert ? true : false );
			}

			if ( this.fire != null ) {
				((dynamic)this.fire).icon_state = "fire" + ( this.fire_alert != 0 ? true : false );
			}

			if ( this.client != null ) {
				this.client.screen.Remove( GlobalVars.global_hud.blurry, GlobalVars.global_hud.druggy, GlobalVars.global_hud.vimpaired );
			}

			if ( this.blind != null && this.stat != 2 ) {
				
				if ( Lang13.Bool( this.blinded ) ) {
					((dynamic)this.blind).layer = 18;
				} else {
					((dynamic)this.blind).layer = 0;

					if ( ( this.disabilities & 1 ) != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.vimpaired );
					}

					if ( Lang13.Bool( this.eye_blurry ) ) {
						this.client.screen.Add( GlobalVars.global_hud.blurry );
					}

					if ( this.druggy != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.druggy );
					}
				}
			}

			if ( this.stat != 2 ) {
				
				if ( Lang13.Bool( this.machine ) ) {
					
					if ( !( ((Ent_Static)this.machine).check_eye( this ) == true ) ) {
						this.reset_view( null );
					}
				} else if ( this.client != null && !this.client.adminobs ) {
					this.reset_view( null );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public bool handle_regular_status_updates(  ) {
			this.updatehealth();

			if ( this.stat == 2 ) {
				this.blinded = 1;
				this.silent = 0;
			} else {
				
				if ( Convert.ToDouble( this.health ) < -25 || !this.has_brain() ) {
					this.death();
					this.blinded = 1;
					this.silent = 0;
					return true;
				}

				if ( Convert.ToDouble( this.getOxyLoss() ) > 25 || 0 > Convert.ToDouble( this.health ) ) {
					
					if ( !((Reagents)this.reagents).has_reagent( "inaprovaline" ) ) {
						this.adjustOxyLoss( 1 );
					}
					this.Paralyse( 3 );
				}

				if ( this.paralysis != 0 ) {
					this.AdjustParalysis( -2 );
					this.blinded = 1;
					this.stat = 1;
				} else if ( this.sleeping != 0 ) {
					this.sleeping = Num13.MaxInt( this.sleeping - 1, 0 );
					this.blinded = 1;
					this.stat = 1;

					if ( Rand13.PercentChance( 10 ) && Lang13.Bool( this.health ) ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.emote( "hiss_" );
							return;
						}));
					}
				} else {
					this.stat = 0;
				}

				if ( this.move_delay_add > 0 ) {
					this.move_delay_add = Num13.MaxInt( 0, this.move_delay_add - Rand13.Int( 1, 2 ) );
				}

				if ( ( this.sdisabilities & 1 ) != 0 ) {
					this.blinded = 1;
				} else if ( this.eye_blind != 0 ) {
					this.eye_blind = Num13.MaxInt( this.eye_blind - 1, 0 );
					this.blinded = 1;
				} else if ( Lang13.Bool( this.eye_blurry ) ) {
					this.eye_blurry = Num13.MaxInt( Convert.ToInt32( this.eye_blurry - 1 ), 0 );
				}

				if ( ( this.sdisabilities & 4 ) != 0 ) {
					this.ear_deaf = Num13.MaxInt( this.ear_deaf, 1 );
				} else if ( this.ear_deaf != 0 ) {
					this.ear_deaf = Num13.MaxInt( this.ear_deaf - 1, 0 );
				} else if ( this.ear_damage < 25 ) {
					this.ear_damage = Num13.MaxInt( ((int)( this.ear_damage - 0.05 )), 0 );
				}

				if ( this.stunned != 0 ) {
					this.AdjustStunned( -1 );
				}

				if ( this.weakened != 0 ) {
					this.weakened = Num13.MaxInt( ((int)( this.weakened - 1 )), 0 );
				}

				if ( Lang13.Bool( this.stuttering ) ) {
					this.stuttering = Num13.MaxInt( Convert.ToInt32( this.stuttering - 1 ), 0 );
				}

				if ( this.silent != 0 ) {
					this.silent = Num13.MaxInt( this.silent - 1, 0 );
				}

				if ( this.druggy != 0 ) {
					this.druggy = Num13.MaxInt( this.druggy - 1, 0 );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public void handle_chemicals_in_body(  ) {
			
			if ( Lang13.Bool( this.reagents ) ) {
				((Reagents)this.reagents).metabolize( this );
			}

			if ( this.mutations.Contains( 6 ) ) {
				
				if ( this.nutrition < 100 ) {
					
					if ( Rand13.PercentChance( Num13.Floor( ( 50 - this.nutrition ) / 100 ) ) ) {
						GlobalFuncs.to_chat( this, "<span class='notice'>You feel fit again !</span>" );
						this.mutations.Add( 6 );
					}
				}
			} else if ( this.nutrition > 500 ) {
				
				if ( Rand13.PercentChance( Num13.Floor( ( this.nutrition - this.max_grown ) / 2 ) + 5 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>You suddenly feel blubbery !</span>" );
					this.mutations.Add( 6 );
				}
			}
			this.burn_calories( 0.1 );

			if ( !Lang13.Bool( this.stat ) ) {
				this.burn_calories( 0.05 );
			}

			if ( Lang13.Bool( this.drowsyness ) ) {
				this.drowsyness--;
				this.eye_blurry = Num13.MaxInt( 2, Convert.ToInt32( this.eye_blurry ) );

				if ( Rand13.PercentChance( 5 ) ) {
					this.sleeping += 1;
					this.Paralyse( 5 );
				}
			}
			this.confused = Num13.MaxInt( 0, this.confused - 1 );

			if ( this.resting != 0 ) {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 5 );
				this.jitteriness = Num13.MaxInt( 0, this.jitteriness - 5 );
			} else {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 1 );
				this.jitteriness = Num13.MaxInt( 0, this.jitteriness - 1 );
			}
			this.updatehealth();
			return;
		}

		// Function from file: life.dm
		public bool handle_breath( dynamic breath = null ) {
			dynamic toxins_used = null;
			dynamic breath_pressure = null;
			dynamic Toxins_pp = null;

			
			if ( ( this.status_flags & 4096 ) != 0 || Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( breath ) || breath.total_moles == 0 ) {
				return false;
			}
			toxins_used = 0;
			breath_pressure = ((GasMixture)breath).f_total_moles() * breath.temperature * 8.314 / 0.5;
			Toxins_pp = breath.toxins / ((GasMixture)breath).f_total_moles() * breath_pressure;

			if ( Lang13.Bool( Toxins_pp ) ) {
				this.adjustToxLoss( breath.toxins * 250 );
				this.toxins_alert = Num13.MaxInt( this.toxins_alert, 1 );
				toxins_used = breath.toxins;
			} else {
				this.toxins_alert = 0;
			}
			breath.toxins -= toxins_used;
			breath.oxygen += toxins_used;

			if ( Convert.ToDouble( breath.temperature ) > 339.41 && !this.mutations.Contains( 106 ) ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>You feel a searing heat in your lungs !</span>" );
				}
				this.fire_alert = Num13.MaxInt( this.fire_alert, 1 );
			} else {
				this.fire_alert = 0;
			}
			return true;
		}

		// Function from file: life.dm
		public dynamic get_breath_from_internal( double volume_needed = 0 ) {
			
			if ( Lang13.Bool( this.v_internal ) ) {
				
				if ( !( this.contents.Find( this.v_internal ) != 0 ) ) {
					this.v_internal = null;
				}

				if ( !Lang13.Bool( this.wear_mask ) || !Lang13.Bool( this.wear_mask.flags & 8 ) ) {
					this.v_internal = null;
				}

				if ( Lang13.Bool( this.v_internal ) ) {
					
					if ( this.internals != null ) {
						((dynamic)this.internals).icon_state = "internal1";
					}
					return ((Obj_Item_Weapon_Tank)this.v_internal).remove_air_volume( volume_needed );
				} else if ( this.internals != null ) {
					((dynamic)this.internals).icon_state = "internal0";
				}
			}
			return null;
		}

		// Function from file: life.dm
		public void breathe(  ) {
			GasMixture environment = null;
			dynamic breath = null;
			Ent_Static location_as_object = null;
			Ent_Static location_as_object2 = null;
			dynamic breath_moles = null;
			Obj_Effect_Effect_Smoke_Chem smoke = null;
			Ent_Static location_as_object3 = null;

			
			if ( ((Reagents)this.reagents).has_reagent( "lexorin" ) ) {
				return;
			}

			if ( this.loc is Obj_Machinery_Atmospherics_Unary_CryoCell ) {
				return;
			}
			environment = this.loc.return_air();

			if ( Convert.ToDouble( this.health ) < 0 ) {
				this.losebreath++;
			}

			if ( this.losebreath > 0 ) {
				this.losebreath--;

				if ( Rand13.PercentChance( 75 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "gasp" );
						return;
					}));
				}

				if ( this.loc is Obj ) {
					location_as_object = this.loc;
					((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
				}
			} else {
				breath = this.get_breath_from_internal( 0.5 );

				if ( !Lang13.Bool( breath ) ) {
					
					if ( this.loc is Obj ) {
						location_as_object2 = this.loc;
						breath = ((dynamic)location_as_object2).handle_internal_lifeform( this, 0.5 );
					} else if ( this.loc is Tile ) {
						breath_moles = 0;
						breath_moles = environment.f_total_moles() * 0.5 / 2500;
						breath = this.loc.remove_air( breath_moles );

						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Obj_Effect_Effect_Smoke_Chem) )) {
							smoke = _a;
							

							if ( Lang13.Bool( smoke.reagents.total_volume ) ) {
								((Reagents)smoke.reagents).reaction( this, GlobalVars.INGEST );
								Task13.Schedule( 5, (Task13.Closure)(() => {
									
									if ( smoke != null ) {
										smoke.reagents.copy_to( this, 10 );
									}
									return;
								}));
								break;
							}
						}
					}
				} else if ( this.loc is Obj ) {
					location_as_object3 = this.loc;
					((dynamic)location_as_object3).handle_internal_lifeform( this, 0 );
				}
			}
			this.handle_breath( breath );

			if ( Lang13.Bool( breath ) ) {
				this.loc.assume_air( breath );
			}
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			GasMixture enviroment = null;
			Ent_Static location_as_object = null;
			Obj_Item_Weapon_Grab G = null;

			
			if ( !( this.loc != null ) ) {
				return false;
			}

			if ( this.monkeyizing ) {
				return false;
			}

			if ( this.timestopped ) {
				return false;
			}
			base.Life();
			enviroment = this.loc.return_air();

			if ( this.stat != 2 ) {
				
				if ( this.amount_grown < this.max_grown ) {
					this.amount_grown++;
				}

				if ( GlobalVars.air_master.current_cycle % 4 == 2 ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.breathe();
						return;
					}));
				} else if ( this.loc is Obj ) {
					location_as_object = this.loc;
					((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
				}
				this.handle_mutations_and_radiation();
				this.handle_chemicals_in_body();
			}
			this.blinded = null;
			this.handle_environment( enviroment );
			this.handle_regular_status_updates();
			this.update_canmove();

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Grab) )) {
				G = _a;
				
				G.process();
			}
			this.update_icons();

			if ( this.client != null ) {
				this.handle_regular_hud_updates();
			}
			return false;
		}

		// Function from file: larva.dm
		public override void show_inv( dynamic user = null ) {
			string dat = null;

			((Mob)user).set_machine( this );
			dat = new Txt( "\n	<B><HR><FONT size=3>" ).item( this.name ).str( "</FONT></B>\n	<BR><HR><BR>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).item( this.name ).str( "'>Close</A>\n	<BR>" ).ToString();
			Interface13.Browse( user, dat, "window=mob" + this.name + ";size=340x480" );
			GlobalFuncs.onclose( user, "mob" + this.name );
			return;
		}

		// Function from file: larva.dm
		public override bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}
			return false;
		}

		// Function from file: larva.dm
		public override dynamic attack_alien( Mob user = null ) {
			int damage = 0;
			dynamic O = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You cannot attack people before the game has started.</span>" );
				return null;
			}
			base.attack_alien( user );

			dynamic _b = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _b=="help" ) {
				this.sleeping = Num13.MaxInt( 0, this.sleeping - 5 );
				this.resting = 0;
				this.AdjustParalysis( -3 );
				this.AdjustStunned( -3 );
				this.AdjustWeakened( -3 );
				this.visible_message( "<span class='notice'>" + user.name + " nuzzles " + this + " trying to wake it up !</span>" );
			} else {
				
				if ( Convert.ToDouble( this.health ) > 0 ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );
					damage = Rand13.Int( 1, 3 );

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _a;
						

						if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
							O.show_message( "<span class='danger'>" + user.name + " has bit " + this + "!</span>", 1 );
						}
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.to_chat( user, "<span class='alien'>" + this.name + " is too injured for that.</span>" );
				}
			}
			return null;
		}

		// Function from file: larva.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic G = null;
			Obj_Effect_EquipE_Human O = null;
			Game_Data G2 = null;
			double damage = 0;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>You cannot attack people before the game has started.</span>" );
				return null;
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( a.gloves ) && a.gloves is Obj_Item_Clothing_Gloves ) {
				G = a.gloves;

				if ( Lang13.Bool( G.cell ) ) {
					
					if ( a.a_intent == "hurt" ) {
						
						if ( Convert.ToDouble( G.cell.charge ) >= 2500 ) {
							G.cell.use( 2500 );
							this.Weaken( 5 );

							if ( Convert.ToDouble( this.stuttering ) < 5 ) {
								this.stuttering = 5;
							}
							this.Stun( 5 );
							this.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " has been touched with the stun gloves by " ).item( a ).str( " !</span>" ).ToString() );
							return null;
						} else {
							GlobalFuncs.to_chat( a, "<span class='warning'>Not enough charge !</span>" );
							return null;
						}
					}
				}
			}

			dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				
				if ( Convert.ToDouble( this.health ) > 0 ) {
					this.help_shake_act( a );
				} else if ( Convert.ToDouble( a.health ) >= -75 ) {
					
					if ( Lang13.Bool( a.head ) && Lang13.Bool( a.head.flags & 4 ) || Lang13.Bool( a.wear_mask ) && !Lang13.Bool( a.wear_mask.flags & 32 ) ) {
						GlobalFuncs.to_chat( a, "<span class='notice'>Remove that mask!</span>" );
						return null;
					}
					O = new Obj_Effect_EquipE_Human();
					O.source = a;
					O.target = this;
					O.s_loc = a.loc;
					O.t_loc = this.loc;
					O.place = "CPR";
					this.requests.Add( O );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						O.process();
						return;
						return;
					}));
				}
			} else if ( _a=="grab" ) {
				
				if ( a == this ) {
					return null;
				}
				G2 = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), a, this );
				((Mob)a).put_in_active_hand( G2 );
				this.grabbed_by.Add( G2 );
				((dynamic)G2).synch();
				this.LAssailant = a;
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
				this.visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " has grabbed " ).the( this ).item().str( " passively !</span>" ).ToString() );
			} else {
				damage = Rand13.Int( 1, 9 );

				if ( Rand13.PercentChance( 90 ) ) {
					
					if ( Lang13.Bool( a.mutations.Contains( 4 ) ) ) {
						damage += 5;
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.Paralyse( 1 );
							Map13.StepAway( this, a, 15 );
							Task13.Sleep( 3 );
							Map13.StepAway( this, a, 15 );
							return;
						}));
					}
					GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
					this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has punched " ).the( this ).item().str( " !</span>" ).ToString() );

					if ( damage > 4.9 ) {
						this.Weaken( Rand13.Int( 10, 15 ) );
						this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has weakened " ).the( this ).item().str( " !</span>" ).ToString() );
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has attempted to punch " ).the( this ).item().str( " !</span>" ).ToString() );
				}
			}
			return null;
		}

		// Function from file: larva.dm
		public override void attack_slime( Mob_Living_Carbon_Slime user = null ) {
			dynamic O = null;
			int damage = 0;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You cannot attack people before the game has started.</span>" );
				return;
			}

			if ( Lang13.Bool( user.Victim ) ) {
				return;
			}

			if ( Convert.ToDouble( this.health ) > -100 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					
					this.visible_message( new Txt( "<span class='danger'>" ).The( user ).item().str( " glomps " ).the( this ).item().str( "!</span>" ).ToString() );
				}
				damage = Rand13.Int( 1, 3 );

				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					damage = Rand13.Int( 20, 40 );
				} else {
					damage = Rand13.Int( 5, 35 );
				}
				this.adjustBruteLoss( damage );
				this.updatehealth();
			}
			return;
		}

		// Function from file: larva.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Mob_Living_Carbon_Monkey ) ) {
				return null;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>You cannot attack people before the game has started.</span>" );
				return null;
			}
			base.attack_paw( a, (object)(b), (object)(c) );

			dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.help_shake_act( a );
			} else {
				
				if ( this.wear_mask is Obj_Item_Clothing_Mask_Muzzle ) {
					return null;
				}

				if ( Convert.ToDouble( this.health ) > 0 ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );
					this.visible_message( new Txt( "<span class='danger'>" ).The( a ).item().str( " has bit " ).the( this ).item().str( " !</span>" ).ToString() );
					this.adjustBruteLoss( Rand13.Int( 1, 3 ) );
					this.updatehealth();
				}
			}
			return null;
		}

		// Function from file: larva.dm
		public override dynamic attack_ui( dynamic slot = null ) {
			return null;
		}

		// Function from file: larva.dm
		public override bool blob_act( dynamic severity = null ) {
			bool shielded = false;
			double? damage = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return false;
			}
			shielded = false;
			damage = null;

			if ( this.stat != 2 ) {
				damage = Rand13.Int( 10, 30 );
			}

			if ( shielded ) {
				damage /= 4;
			}
			GlobalFuncs.to_chat( this, "<span class='warning'>The blob attacks you !</span>" );
			this.adjustFireLoss( damage );
			this.updatehealth();
			return false;
		}

		// Function from file: larva.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			dynamic b_loss = null;
			dynamic f_loss = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.blinded ) ) {
				Icon13.Flick( "flash", this.flash );
			}
			b_loss = null;
			f_loss = null;

			switch ((int?)( severity )) {
				case 1:
					b_loss += 500;
					this.gib();
					return false;
					break;
				case 2:
					b_loss += 60;
					f_loss += 60;
					this.ear_damage += 30;
					this.ear_deaf += 120;
					break;
				case 3:
					b_loss += 30;

					if ( Rand13.PercentChance( 50 ) ) {
						this.Paralyse( 1 );
					}
					this.ear_damage += 15;
					this.ear_deaf += 60;
					break;
			}
			this.adjustBruteLoss( b_loss );
			this.adjustFireLoss( f_loss );
			this.updatehealth();
			return false;
		}

		// Function from file: larva.dm
		public override bool adjustToxLoss( dynamic amount = null ) {
			
			if ( this.stat != 2 ) {
				this.amount_grown = Num13.MinInt( this.amount_grown + 1, this.max_grown );
			}
			base.adjustToxLoss( (object)(amount) );
			return false;
		}

		// Function from file: larva.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( null, "Progress: " + this.amount_grown + "/" + this.max_grown );
			}
			return null;
		}

		// Function from file: vgstation13.dme
		public override bool u_equip( dynamic W = null, bool? dropped = null ) {
			return false;
		}

		// Function from file: vgstation13.dme
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			type = type ?? 1;

			string param = null;
			int t1 = 0;
			bool muzzled = false;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( this.timestopped ) {
				return;
			}
			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( String13.FindIgnoreCase( act, "s", -1, 0 ) != 0 && !( String13.FindIgnoreCase( act, "_", -2, 0 ) != 0 ) ) {
				act = String13.SubStr( act, 1, Lang13.Length( act ) );
			}
			muzzled = this.wear_mask is Obj_Item_Clothing_Mask_Muzzle;

			dynamic _a = act; // Was a switch-case, sorry for the mess.
			if ( _a=="me" ) {
				
				if ( this.silent != 0 ) {
					return;
				}

				if ( this.client != null ) {
					
					if ( ( this.client.prefs.muted & 1 ) != 0 ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>You cannot send IC messages (muted).</span>" );
						return;
					}

					if ( this.client.handle_spam_prevention( message, 1 ) ) {
						return;
					}
				}

				if ( Lang13.Bool( this.stat ) ) {
					return;
				}

				if ( !Lang13.Bool( message ) ) {
					return;
				}
				this.custom_emote( type, message ); return;
			} else if ( _a=="custom" ) {
				this.custom_emote( type, message ); return;
			} else if ( _a=="sign" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> signs" ).item( ( Lang13.Bool( String13.ParseNumber( param ) ) ? " the number " + String13.ParseNumber( param ) : null ) ).str( "." ).ToString();
					type = 1;
				}
			} else if ( _a=="burp" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> burps." ).ToString();
					type = 2;
				}
			} else if ( _a=="scratch" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> scratches." ).ToString();
					type = 1;
				}
			} else if ( _a=="whimper" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> whimpers." ).ToString();
					type = 2;
				}
			} else if ( _a=="tail" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> waves its tail." ).ToString();
				type = 1;
			} else if ( _a=="gasp" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> gasps." ).ToString();
				type = 2;
			} else if ( _a=="shiver" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> shivers." ).ToString();
				type = 2;
			} else if ( _a=="drool" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> drools." ).ToString();
				type = 1;
			} else if ( _a=="scretch" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> scretches." ).ToString();
					type = 2;
				}
			} else if ( _a=="choke" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> chokes." ).ToString();
				type = 2;
			} else if ( _a=="moan" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> moans!" ).ToString();
				type = 2;
			} else if ( _a=="nod" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> nods its head." ).ToString();
				type = 1;
			} else if ( _a=="sway" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> sways around dizzily." ).ToString();
				type = 1;
			} else if ( _a=="sulk" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> sulks down sadly." ).ToString();
				type = 1;
			} else if ( _a=="twitch" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> twitches violently." ).ToString();
				type = 1;
			} else if ( _a=="dance" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> dances around happily." ).ToString();
					type = 1;
				}
			} else if ( _a=="roll" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> rolls." ).ToString();
					type = 1;
				}
			} else if ( _a=="shake" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> shakes its head." ).ToString();
				type = 1;
			} else if ( _a=="gnarl" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> gnarls and shows its teeth.." ).ToString();
					type = 2;
				}
			} else if ( _a=="jump" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> jumps!" ).ToString();
				type = 1;
			} else if ( _a=="hiss_" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> hisses softly." ).ToString();
				type = 1;
			} else if ( _a=="collapse" ) {
				this.Paralyse( 2 );
				message = new Txt( "<B>" ).The( this ).item().str( "</B> collapses!" ).ToString();
				type = 2;
			} else if ( _a=="help" ) {
				GlobalFuncs.to_chat( this, "burp, choke, collapse, dance, drool, gasp, shiver, gnarl, jump, moan, nod, roll, scratch,\nscretch, shake, sign-#, sulk, sway, tail, twitch, whimper" );
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]EMOTE: " + ( "" + this.name + "/" + this.key + " (@" + this.x + "," + this.y + "," + this.z + "): " + message ) ) );

				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _b;
						
						O.show_message( message, type );
					}
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						O2 = _c;
						
						O2.show_message( message, type );
					}
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			
			if ( this.stat == 2 ) {
				return null;
			}

			if ( this.healths != null ) {
				((dynamic)this.healths).icon_state = "health6";
			}
			this.stat = 2;
			this.icon_state = "larva_dead";

			if ( !( gibbed == true ) ) {
				this.update_canmove();

				if ( this.client != null ) {
					((dynamic)this.blind).layer = 0;
				}
			}
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );
			}
			GlobalVars.living_mob_list.Remove( this );
			return base.death( gibbed );
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.special_role = "Larva";
			return;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool proximity_flag = false, string _params = null ) {
			
			if ( A is Mob ) {
				this.delayNextAttack( 10 );
			}
			A.attack_larva( this );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Evolve", desc: "Evolve into a fully grown Alien.", group: "Alien" )]
		public void evolve(  ) {
			string alien_caste = null;
			Mob_Living_Carbon_Alien_Humanoid new_xeno = null;
			Language L = null;

			
			if ( this.stat != 0 ) {
				return;
			}

			if ( this.amount_grown >= this.max_grown ) {
				GlobalFuncs.to_chat( this, @"<span class='notice'><B>You are growing into a beautiful alien! It is time to choose a caste.</B><br>
		There are three castes to choose from:<br>
		<B>Hunters</B> are strong and agile, able to hunt away from the hive and rapidly move through ventilation shafts. Hunters generate plasma slowly and have low reserves.<br>
		<B>Sentinels</B> are tasked with protecting the hive and are deadly up close and at a range. They are not as physically imposing nor fast as the hunters.<br>
		<B>Drones</B> are the working class, offering the largest plasma storage and generation. They are the only caste which may evolve again, turning into the dreaded alien queen." );
				alien_caste = Interface13.Alert( this, "Please choose which alien caste you shall evolve to.", null, "Hunter", "Sentinel", "Drone" );

				switch ((string)( alien_caste )) {
					case "Hunter":
						new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Hunter( this.loc );
						break;
					case "Sentinel":
						new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Sentinel( this.loc );
						break;
					case "Drone":
						new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Drone( this.loc );
						break;
				}

				foreach (dynamic _b in Lang13.Enumerate( this.languages, typeof(Language) )) {
					L = _b;
					
					new_xeno.add_language( L.name );
				}

				if ( this.mind != null ) {
					this.mind.transfer_to( new_xeno );
				}
				this.transferImplantsTo( new_xeno );
				this.transferBorers( new_xeno );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/evolve.ogg", 40, 1 );
				GlobalFuncs.qdel( this );
				return;
			} else {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are not fully grown yet.</span>" );
				return;
			}
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Hide", desc: "Allows you to hide beneath tables or items laid on the ground. Toggle.", group: "Alien" )]
		public void f_hide(  ) {
			
			if ( this.stat != 0 ) {
				return;
			}

			if ( this.layer != 2.2 ) {
				this.layer = 2.2;
				this.visible_message( "<span class='danger'>" + this + " scurries to the ground !</span>", "<span class='alien'>You are now hiding.</span>" );
			} else {
				this.layer = GlobalVars.MOB_LAYER;
				this.visible_message( "<span class='warning'>" + this + " slowly peeks up from the ground...</span>", "<span class='alien'>You have stopped hiding.</span>" );
			}
			return;
		}

	}

}