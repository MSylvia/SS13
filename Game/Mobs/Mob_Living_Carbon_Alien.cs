// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Alien : Mob_Living_Carbon {

		public bool nightvision = true;
		public dynamic wear_id = null;
		public bool has_fine_manipulation = false;
		public int move_delay_add = 0;
		public double heat_protection = 0.5;
		public bool leaping = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.voice_name = "alien";
			this.faction = new ByTable(new object [] { "alien" });
			this.ventcrawler = 2;
			this.languages = 4;
			this.verb_say = "hisses";
			this.bubble_icon = "alien";
			this.type_of_meat = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Xeno);
			this.status_flags = 12;
			this.gib_type = typeof(Obj_Effect_Decal_Cleanable_Xenoblood_Xgibs);
			this.unique_name = true;
			this.icon = "icons/mob/alien.dmi";
			this.see_in_dark = 4;
		}

		// Function from file: alien.dm
		public Mob_Living_Carbon_Alien ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_Organ_Internal I = null;

			this.verbs.Add( typeof(Mob_Living).GetMethod( "mob_sleep" ) );
			this.verbs.Add( typeof(Mob_Living).GetMethod( "lay_down" ) );
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Brain_Alien() );
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Alien_Hivenode() );

			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
				I = _a;
				
				I.Insert( this );
			}
			this.AddAbility( new Obj_Effect_ProcHolder_Alien_Nightvisiontoggle( null ) );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: alien_powers.dm
		public override bool adjustPlasma( dynamic amount = null ) {
			bool _default = false;

			_default = base.adjustPlasma( (object)(amount) );
			this.updatePlasmaDisplay();
			return _default;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			bool _default = false;

			_default = base.say( (object)(message), bubble_type );

			if ( _default ) {
				GlobalFuncs.playsound( this.loc, "hiss", 25, 1, 1 );
			}
			return _default;
		}

		// Function from file: logout.dm
		public override bool Logout(  ) {
			base.Logout();
			this.RemoveInfectionImages();
			return false;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.AddInfectionImages();
			return null;
		}

		// Function from file: tgstation.dme
		public override void handle_changeling(  ) {
			return;
		}

		// Function from file: life.dm
		public override void handle_status_effects(  ) {
			base.handle_status_effects();

			if ( this.move_delay_add > 0 ) {
				this.move_delay_add = Num13.MaxInt( 0, this.move_delay_add - Rand13.Int( 1, 2 ) );
			}
			return;
		}

		// Function from file: life.dm
		public override bool check_breath( dynamic breath = null ) {
			bool toxins_used = false;
			double breath_pressure = 0;
			ByTable breath_gases = null;
			dynamic Toxins_pp = null;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( breath ) || ((GasMixture)breath).total_moles() == 0 ) {
				return false;
			}
			toxins_used = false;
			breath_pressure = ((GasMixture)breath).total_moles() * Convert.ToDouble( breath.temperature ) * 8.31 / 0.5;
			breath_gases = breath.gases;
			((GasMixture)breath).assert_gases( "plasma", "o2" );
			Toxins_pp = breath_gases["plasma"][1] / ((GasMixture)breath).total_moles() * breath_pressure;

			if ( Lang13.Bool( Toxins_pp ) ) {
				this.adjustPlasma( breath_gases["plasma"][1] * 250 );
				this.throw_alert( "alien_tox", typeof(Obj_Screen_Alert_AlienTox) );
				toxins_used = Lang13.Bool( breath_gases["plasma"][1] );
			} else {
				this.clear_alert( "alien_tox" );
			}
			breath_gases["plasma"][1] -= toxins_used ?1:0;
			breath_gases["o2"][1] += toxins_used ?1:0;
			breath.garbage_collect();
			this.handle_breath_temperature( breath );
			return false;
		}

		// Function from file: death.dm
		public override void dust( dynamic animation = null ) {
			animation = animation ?? 1;

			base.dust( (object)(animation) );
			return;
		}

		// Function from file: death.dm
		public override void dust_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			base.dust_animation( animate, "dust-a" );
			return;
		}

		// Function from file: death.dm
		public override void spawn_dust(  ) {
			new Obj_Effect_Decal_Remains_Xeno( this.loc );
			return;
		}

		// Function from file: death.dm
		public override void gib_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			base.gib_animation( animate, "gibbed-a" );
			return;
		}

		// Function from file: death.dm
		public override void spawn_gibs(  ) {
			GlobalFuncs.xgibs( this.loc, this.viruses );
			return;
		}

		// Function from file: alien_defense.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			int damage = 0;

			
			if ( base.attack_slime( user ) ) {
				damage = Rand13.Int( 5, 35 );

				if ( user.is_adult ) {
					damage = Rand13.Int( 10, 40 );
				}
				this.adjustBruteLoss( damage );
				GlobalFuncs.add_logs( user, this, "attacked" );
				this.updatehealth();
			}
			return false;
		}

		// Function from file: alien_defense.dm
		public override bool attack_animal( Mob_Living user = null ) {
			int damage = 0;

			
			if ( base.attack_animal( user ) ) {
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );

				dynamic _a = ((dynamic)user).melee_damage_type; // Was a switch-case, sorry for the mess.
				if ( _a=="brute" ) {
					this.adjustBruteLoss( damage );
				} else if ( _a=="fire" ) {
					this.adjustFireLoss( damage );
				} else if ( _a=="tox" ) {
					this.adjustToxLoss( damage );
				} else if ( _a=="oxy" ) {
					this.adjustOxyLoss( damage );
				} else if ( _a=="clone" ) {
					this.adjustCloneLoss( damage );
				} else if ( _a=="stamina" ) {
					this.adjustStaminaLoss( damage );
				}
				this.updatehealth();
			}
			return false;
		}

		// Function from file: alien_defense.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_paw( (object)(a), (object)(b), (object)(c) ) ) ) {
				
				if ( this.stat != 2 ) {
					this.adjustBruteLoss( Rand13.Int( 1, 3 ) );
					this.updatehealth();
				}
			}
			return null;
		}

		// Function from file: alien_defense.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return 0;
			}

			dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.help_shake_act( a );
			} else if ( _a=="grab" ) {
				this.grabbedby( a );
			} else if ( _a=="harm" || _a=="disarm" ) {
				((Ent_Dynamic)a).do_attack_animation( this );
				return 1;
			}
			return 0;
		}

		// Function from file: alien_defense.dm
		public override bool attack_larva( Mob_Living_Carbon_Alien_Larva user = null ) {
			return this.attack_alien( user );
		}

		// Function from file: alien_defense.dm
		public override bool attack_alien( dynamic user = null ) {
			bool damage = false;

			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				user.WriteMsg( "You cannot attack people before the game has started." );
				return false;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				user.WriteMsg( "No attacking people at spawn, you jackass." );
				return false;
			}

			dynamic _a = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.AdjustSleeping( -5 );
				this.resting = 0;
				this.AdjustParalysis( -3 );
				this.AdjustStunned( -3 );
				this.AdjustWeakened( -3 );
				this.visible_message( "<span class='notice'>" + user.name + " nuzzles " + this + " trying to wake it up!</span>" );
			} else if ( _a=="grab" ) {
				this.grabbedby( user );
			} else {
				
				if ( Convert.ToDouble( this.health ) > 0 ) {
					((Ent_Dynamic)user).do_attack_animation( this );
					GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );
					damage = true;
					this.visible_message( "<span class='danger'>" + user.name + " bites " + this + "!</span>", "<span class='userdanger'>" + user.name + " bites " + this + "!</span>" );
					this.adjustBruteLoss( damage );
					GlobalFuncs.add_logs( user, this, "attacked" );
					this.updatehealth();
				} else {
					user.WriteMsg( "<span class='warning'>" + this.name + " is too injured for that.</span>" );
				}
			}
			return false;
		}

		// Function from file: alien_defense.dm
		public override bool hitby( Ent_Dynamic AM = null, bool? skipcatch = null, bool? hitpush = null, bool? blocked = null ) {
			base.hitby( AM, true, false );
			return false;
		}

		// Function from file: alien.dm
		public override void update_sight(  ) {
			dynamic A = null;
			Obj_Item_Organ_Internal_Cyberimp_Eyes E = null;

			
			if ( !( this.client != null ) ) {
				return;
			}

			if ( this.stat == 2 ) {
				this.sight |= GlobalVars.SEE_TURFS;
				this.sight |= GlobalVars.SEE_MOBS;
				this.sight |= GlobalVars.SEE_OBJS;
				this.see_in_dark = 8;
				this.see_invisible = 60;
				return;
			}
			this.sight = GlobalVars.SEE_MOBS;

			if ( this.nightvision ) {
				this.see_in_dark = 8;
				this.see_invisible = 5;
			} else {
				this.see_in_dark = 4;
				this.see_invisible = 25;
			}

			if ( this.client.eye != this ) {
				A = this.client.eye;

				if ( ((Ent_Static)A).update_remote_sight( this ) ) {
					return;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal_Cyberimp_Eyes) )) {
				E = _a;
				
				this.sight |= E.sight_flags;

				if ( E.dark_view != 0 ) {
					this.see_in_dark = Num13.MaxInt( this.see_in_dark, E.dark_view );
				}

				if ( E.see_invisible != 0 ) {
					this.see_invisible = Num13.MinInt( this.see_invisible, E.see_invisible );
				}
			}

			if ( this.see_override != 0 ) {
				this.see_invisible = this.see_override;
			}
			return;
		}

		// Function from file: alien.dm
		public override dynamic get_standard_pixel_y_offset( int? lying = null ) {
			lying = lying ?? 0;

			return Lang13.Initial( this, "pixel_y" );
		}

		// Function from file: alien.dm
		public override bool canBeHandcuffed(  ) {
			return true;
		}

		// Function from file: screen.dm
		public virtual void updatePlasmaDisplay(  ) {
			
			if ( this.hud_used != null ) {
				this.hud_used.alien_plasma_display.maptext = "<div align='center' valign='middle' style='position:relative; top:0px; left:6px'><font color='magenta'>" + Num13.Floor( this.getPlasma() ) + "</font></div>";
			}
			return;
		}

		// Function from file: alien.dm
		public virtual void alien_evolve( Mob_Living_Carbon_Alien_Humanoid_Royal new_xeno = null ) {
			this.WriteMsg( "<span class='noticealien'>You begin to evolve!</span>" );
			this.visible_message( "<span class='alertalien'>" + this + " begins to twist and contort!</span>" );

			if ( this.mind != null ) {
				this.mind.transfer_to( new_xeno );
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: alien.dm
		public void RemoveInfectionImages(  ) {
			Image I = null;

			
			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.client.images, typeof(Image) )) {
					I = _a;
					

					if ( GlobalFuncs.dd_hasprefix_case( I.icon_state, "infected" ) != 0 ) {
						GlobalFuncs.qdel( I );
					}
				}
			}
			return;
		}

		// Function from file: alien.dm
		public void AddInfectionImages(  ) {
			Mob_Living C = null;
			dynamic A = null;
			Image I = null;

			
			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living) )) {
					C = _a;
					

					if ( ( C.status_flags & 32768 ) != 0 ) {
						A = C.getorgan( typeof(Obj_Item_Organ_Internal_BodyEgg_AlienEmbryo) );

						if ( Lang13.Bool( A ) ) {
							I = new Image( "icons/mob/alien.dmi", C, "infected" + A.stage );
							this.client.images.Add( I );
						}
					}
				}
			}
			return;
		}

		// Function from file: alien.dm
		public override dynamic getTrail(  ) {
			
			if ( this.getBruteLoss() < 200 ) {
				return Rand13.PickFromTable( new ByTable(new object [] { "xltrails_1", "xltrails2" }) );
			} else {
				return Rand13.PickFromTable( new ByTable(new object [] { "xttrails_1", "xttrails2" }) );
			}
		}

		// Function from file: alien.dm
		public override void Stun( dynamic amount = null ) {
			
			if ( ( this.status_flags & 1 ) != 0 ) {
				this.stunned = Num13.MaxInt( Num13.MaxInt( ((int)( this.stunned )), Convert.ToInt32( amount ) ), 0 );
			} else {
				this.move_delay_add = Num13.MinInt( this.move_delay_add + Num13.Floor( Convert.ToDouble( amount / 2 ) ), 10 );
			}
			return;
		}

		// Function from file: alien.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( null, "Intent: " + this.a_intent );
			}
			return null;
		}

		// Function from file: alien.dm
		public override bool IsAdvancedToolUser(  ) {
			return this.has_fine_manipulation;
		}

		// Function from file: alien.dm
		public override bool reagent_check( dynamic R = null ) {
			return false;
		}

		// Function from file: alien.dm
		public override bool handle_fire(  ) {
			
			if ( base.handle_fire() ) {
				return false;
			}
			this.bodytemperature += 30;
			return false;
		}

		// Function from file: alien.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			switch ((int?)( severity )) {
				case 1:
					this.gib();
					return false;
					break;
				case 2:
					this.adjustBruteLoss( 60 );
					this.adjustFireLoss( 60 );
					this.adjustEarDamage( 30, 120 );
					break;
				case 3:
					this.adjustBruteLoss( 30 );

					if ( Rand13.PercentChance( 50 ) ) {
						this.Paralyse( 1 );
					}
					this.adjustEarDamage( 15, 60 );
					break;
			}
			this.updatehealth();
			return false;
		}

		// Function from file: alien.dm
		public override void handle_environment( GasMixture environment = null ) {
			dynamic loc_temp = null;
			double thermal_protection = 0;

			
			if ( !( environment != null ) ) {
				return;
			}
			loc_temp = this.get_temperature( environment );

			if ( !this.on_fire ) {
				
				if ( Convert.ToDouble( loc_temp ) > Convert.ToDouble( this.bodytemperature ) ) {
					thermal_protection = this.heat_protection;

					if ( thermal_protection < 1 ) {
						this.bodytemperature += ( 1 - thermal_protection ) * Convert.ToDouble( ( loc_temp - this.bodytemperature ) / 6 );
					}
				} else {
					this.bodytemperature += ( loc_temp - this.bodytemperature ) / 6;
				}
			}

			if ( Convert.ToDouble( this.bodytemperature ) > 360.41 ) {
				this.throw_alert( "alien_fire", typeof(Obj_Screen_Alert_AlienFire) );

				dynamic _a = this.bodytemperature; // Was a switch-case, sorry for the mess.
				if ( 360<=_a&&_a<=400 ) {
					this.apply_damage( 2, "fire" );
				} else if ( 400<=_a&&_a<=460 ) {
					this.apply_damage( 3, "fire" );
				} else if ( 460<=_a&&_a<=Double.PositiveInfinity ) {
					
					if ( this.on_fire ) {
						this.apply_damage( 8, "fire" );
					} else {
						this.apply_damage( 3, "fire" );
					}
				}
			} else {
				this.clear_alert( "alien_fire" );
			}
			return;
		}

		// Function from file: alien.dm
		public override dynamic getToxLoss(  ) {
			return 0;
		}

		// Function from file: alien.dm
		public override double check_eye_prot(  ) {
			return base.check_eye_prot() + 2;
		}

		// Function from file: alien.dm
		public override dynamic adjustFireLoss( dynamic amount = null, bool? updating_health = null ) {
			
			if ( Convert.ToDouble( amount ) > 0 ) {
				base.adjustFireLoss( (object)(amount * 2), updating_health );
			} else {
				base.adjustFireLoss( (object)(amount), updating_health );
			}
			return null;
		}

		// Function from file: alien.dm
		public override dynamic adjustToxLoss( dynamic amount = null, bool? updating_health = null ) {
			return null;
		}

		// Function from file: alien.dm
		public override int assess_threat( Mob_Living_SimpleAnimal_Bot judgebot = null, string lasercolor = null ) {
			return -10;
		}

		// Function from file: living.dm
		public override bool setStaminaLoss( dynamic amount = null ) {
			return false;
		}

		// Function from file: living.dm
		public override bool adjustStaminaLoss( dynamic amount = null ) {
			return false;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.special_role = "Alien";
			this.mind.assigned_role = "Alien";
			return;
		}

		// Function from file: other_mobs.dm
		public override bool RestrainedClickOn( Ent_Static A = null ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			A.attack_alien( this );
			return;
		}

	}

}