// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Sculpture : Mob_Living_SimpleAnimal {

		public string response_snap = "snapped the neck of";
		public string response_snap_target = "In the blink of an eye, something grabs you and snaps your neck!";
		public ByTable snap_sound = new ByTable(new object [] { "sound/scp/firstpersonsnap.ogg", "sound/scp/firstpersonsnap2.ogg", "sound/scp/firstpersonsnap3.ogg" });
		public ByTable scare_sound = new ByTable(new object [] { "sound/scp/scare1.ogg", "sound/scp/scare2.ogg", "sound/scp/scare3.ogg", "sound/scp/scare4.ogg" });
		public Game_Data G = null;
		public bool observed = false;
		public bool hibernate = false;
		public bool scare_played = false;
		public dynamic entry_vent = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "sculpture";
			this.icon_dead = "sculpture";
			this.emote_hear = new ByTable(new object [] { "makes a faint scraping sound" });
			this.emote_see = new ByTable(new object [] { "twitches slightly", "shivers" });
			this.response_help = "touches the";
			this.response_disarm = "pushes the";
			this.response_harm = "hits the";
			this.meat_type = null;
			this.icon = "code/WorkInProgress/Cael_Aislinn/unknown.dmi";
			this.icon_state = "sculpture";
		}

		public Mob_Living_SimpleAnimal_Sculpture ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: areas.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: sculpture.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			
			if ( !( this.G != null ) && !this.observed ) {
				this.GrabMob( AM );
			}
			return false;
		}

		// Function from file: sculpture.dm
		public override dynamic Bump( Obj Obstacle = null, dynamic yes = null ) {
			
			if ( !( this.G != null ) && !this.observed ) {
				this.GrabMob( Obstacle );
			}
			base.Bump( Obstacle );
			return null;
		}

		// Function from file: sculpture.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			base.Topic( href, href_list, (object)(hclient) );
			return null;
		}

		// Function from file: sculpture.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: sculpture.dm
		public override bool Life(  ) {
			Mob_Living M = null;
			int xdif = 0;
			int ydif = 0;
			dynamic T = null;
			bool in_darkness = false;
			Mob_Living_Carbon_Human M2 = null;
			ByTable conscious = null;
			Mob_Living M3 = null;
			Mob_Living_Carbon_Human target = null;
			Mob_Living_Carbon_Human M4 = null;
			dynamic target_turf = null;
			Tile next_turf = null;
			int num_turfs = 0;
			Obj_Structure_Window W = null;
			Obj_Structure_Table O = null;
			Obj_Structure_Grille G = null;
			Obj_Machinery_Door_Airlock A = null;
			Obj_Machinery_Door D = null;
			ByTable turfs = null;
			dynamic thisturf = null;
			dynamic target_turf2 = null;
			Tile next_turf2 = null;
			int num_turfs2 = 0;
			Obj_Structure_Window W2 = null;
			Obj_Structure_Table O2 = null;
			Obj_Structure_Grille G2 = null;
			Obj_Machinery_Door D2 = null;
			ByTable vents = null;
			Obj_Machinery_Atmospherics_Unary_VentPump temp_vent = null;
			dynamic exit_vent = null;
			int travel_time = 0;
			dynamic new_area = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.hibernate ) {
				return false;
			}

			if ( this.G != null ) {
				((dynamic)this.G).process();
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Mob_Living_Carbon_Human) )) {
				M = _a;
				

				if ( Lang13.Bool( M.stat ) || M == this ) {
					continue;
				}
				xdif = M.x - this.x;
				ydif = M.y - this.y;

				if ( !( ydif == 0 ) ) {
					
					if ( ydif < 0 && M.dir == GlobalVars.NORTH ) {
						this.observed = true;
						break;
					} else if ( ydif > 0 && M.dir == GlobalVars.SOUTH ) {
						this.observed = true;
						break;
					}
				}

				if ( !( xdif == 0 ) ) {
					
					if ( xdif < 0 && M.dir == GlobalVars.EAST ) {
						this.observed = true;
						break;
					} else if ( xdif > 0 && M.dir == GlobalVars.WEST ) {
						this.observed = true;
						break;
					}
				} else if ( xdif == 0 && ydif == 0 ) {
					this.observed = false;
				} else {
					this.observed = false;
				}
			}
			T = GlobalFuncs.get_turf( this );
			in_darkness = false;

			if ( Lang13.Bool( T.luminosity ) == false && !( T is Tile_Unsimulated ) ) {
				in_darkness = true;
			}

			if ( this.observed && !in_darkness ) {
				return false;
			}

			foreach (dynamic _b in Lang13.Enumerate( T, typeof(Mob_Living_Carbon_Human) )) {
				M2 = _b;
				

				if ( M2.stat == 0 ) {
					this.GrabMob( M2 );
					break;
				}
			}
			conscious = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Mob_Living_Carbon_Human) )) {
				M3 = _c;
				

				if ( M3 == this ) {
					continue;
				}

				if ( M3.stat == 0 ) {
					conscious.Add( M3 );
				}
			}
			target = null;

			foreach (dynamic _d in Lang13.Enumerate( conscious, typeof(Mob_Living_Carbon_Human) )) {
				M4 = _d;
				

				if ( !( target != null ) || Map13.GetDistance( this, M4 ) < Map13.GetDistance( this, target ) ) {
					target = M4;
				}
			}

			if ( target != null ) {
				target_turf = null;

				if ( in_darkness ) {
					target_turf = Map13.GetStep( target, /*[I CANNOT CONVERT SOME RANDOM SHIT TO AN INT: Mob_Living_SimpleAnimal_Sculpture]*/ 0 );

					if ( !this.scare_played ) {
						GlobalFuncs.playsound( this.loc, Rand13.PickFromTable( this.scare_sound ), 100, 1, -1 );
						this.scare_played = true;
						Task13.Schedule( 50, (Task13.Closure)(() => {
							this.scare_played = false;
							return;
						}));
					}
				} else {
					target_turf = GlobalFuncs.get_turf( target );

					if ( !this.scare_played ) {
						GlobalFuncs.playsound( this.loc, Rand13.PickFromTable( this.scare_sound ), 100, 1, -1 );
						this.scare_played = true;
						Task13.Schedule( 50, (Task13.Closure)(() => {
							this.scare_played = false;
							return;
						}));
					}
				}
				next_turf = Map13.GetStepTowardsSimple( this, target );
				num_turfs = Map13.GetDistance( this, target );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					while (GlobalFuncs.get_turf( this ) != target_turf && num_turfs > 0) {
						
						foreach (dynamic _e in Lang13.Enumerate( next_turf, typeof(Obj_Structure_Window) )) {
							W = _e;
							
							W.Destroy( 1 );
							Task13.Sleep( 5 );
						}

						foreach (dynamic _f in Lang13.Enumerate( next_turf, typeof(Obj_Structure_Table) )) {
							O = _f;
							
							O.ex_act( 1 );
							Task13.Sleep( 10 );
						}

						foreach (dynamic _g in Lang13.Enumerate( next_turf, typeof(Obj_Structure_Grille) )) {
							G = _g;
							
							G.ex_act( 1 );
							Task13.Sleep( 10 );
						}

						foreach (dynamic _h in Lang13.Enumerate( next_turf, typeof(Obj_Machinery_Door_Airlock) )) {
							A = _h;
							

							if ( A.welded == true || A.locked ) {
								break;
							}
							A.open();
							Task13.Sleep( 10 );
						}

						foreach (dynamic _i in Lang13.Enumerate( next_turf, typeof(Obj_Machinery_Door) )) {
							D = _i;
							
							D.open();
							Task13.Sleep( 10 );
						}

						if ( !next_turf.CanPass( this, next_turf ) ) {
							break;
						}
						this.loc = next_turf;
						this.dir = Map13.GetDistance( this, target );
						next_turf = Map13.GetStep( this, Map13.GetDistance( next_turf, target ) );
						num_turfs--;
					}
					return;
				}));
			}

			if ( Rand13.PercentChance( 30 ) ) {
				turfs = new ByTable();

				foreach (dynamic _j in Lang13.Enumerate( Map13.FetchInView( this, 7 ) )) {
					thisturf = _j;
					

					if ( thisturf is Tile_Space ) {
						continue;
					} else if ( thisturf is Tile_Simulated_Wall ) {
						continue;
					} else if ( thisturf is Tile_Unsimulated_Mineral ) {
						continue;
					} else if ( thisturf is Tile_Simulated_Shuttle_Wall ) {
						continue;
					} else if ( thisturf is Tile_Unsimulated_Wall ) {
						continue;
					}
					turfs.Add( thisturf );
				}
				target_turf2 = GlobalFuncs.safepick( turfs );

				if ( !Lang13.Bool( target_turf2 ) ) {
					return false;
				}
				next_turf2 = Map13.GetStepTowardsSimple( this, target_turf2 );
				num_turfs2 = Map13.GetDistance( this, target_turf2 );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					while (GlobalFuncs.get_turf( this ) != target_turf2 && num_turfs2 > 0) {
						
						foreach (dynamic _k in Lang13.Enumerate( next_turf2, typeof(Obj_Structure_Window) )) {
							W2 = _k;
							
							W2.Destroy( 1 );
							Task13.Sleep( 5 );
						}

						foreach (dynamic _l in Lang13.Enumerate( next_turf2, typeof(Obj_Structure_Table) )) {
							O2 = _l;
							
							O2.ex_act( 1 );
							Task13.Sleep( 5 );
						}

						foreach (dynamic _m in Lang13.Enumerate( next_turf2, typeof(Obj_Structure_Grille) )) {
							G2 = _m;
							
							G2.ex_act( 1 );
							Task13.Sleep( 5 );
						}

						foreach (dynamic _n in Lang13.Enumerate( next_turf2, typeof(Obj_Machinery_Door) )) {
							D2 = _n;
							
							D2.open();
							Task13.Sleep( 5 );
						}

						if ( !next_turf2.CanPass( this, next_turf2 ) ) {
							break;
						}
						this.loc = next_turf2;
						this.dir = Map13.GetDistance( this, target );
						next_turf2 = Map13.GetStep( this, Map13.GetDistance( next_turf2, target_turf2 ) );
						num_turfs2--;
					}
					return;
				}));
			}

			foreach (dynamic _p in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
				this.entry_vent = _p;
				

				if ( !( this.entry_vent is Obj_Machinery_Atmospherics_Unary_VentPump ) ) {
					continue;
				}

				if ( Rand13.PercentChance( 75 ) ) {
					return false;
				}
				Task13.Sleep( 5 );
				base.Life();

				if ( Lang13.Bool( this.entry_vent.network ) && this.entry_vent.network.normal_members.len != 0 ) {
					vents = new ByTable();

					foreach (dynamic _o in Lang13.Enumerate( this.entry_vent.network.normal_members, typeof(Obj_Machinery_Atmospherics_Unary_VentPump) )) {
						temp_vent = _o;
						
						vents.Add( temp_vent );
					}

					if ( !( vents.len != 0 ) ) {
						this.entry_vent = null;
						return false;
					}
					exit_vent = Rand13.PickFromTable( vents );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.visible_message( "<span class='danger'>" + this + " suddenly disappears into the vent !</span>" );
						this.loc = exit_vent;
						travel_time = Num13.Floor( Map13.GetDistance( this.loc, exit_vent.loc ) / 2 );
						Task13.Schedule( travel_time, (Task13.Closure)(() => {
							
							if ( !Lang13.Bool( exit_vent ) || Lang13.Bool( exit_vent.welded ) ) {
								this.loc = this.entry_vent;
								this.entry_vent = null;
								return;
							}
							this.loc = exit_vent.loc;
							this.entry_vent = null;
							new_area = GlobalFuncs.get_area( this.loc );

							if ( Lang13.Bool( new_area ) ) {
								((Base_Static)new_area).Entered( this );
							}
							this.visible_message( "<span class='danger'>" + this + " suddenly appears from the vent !</span>" );
							return;
						}));
						return;
					}));
				} else {
					this.entry_vent = null;
				}
			}
			return false;
		}

		// Function from file: sculpture.dm
		public void GrabMob( Ent_Static target = null ) {
			
			if ( target != null && target != this && target is Mob_Living_Carbon_Human && !this.observed ) {
				this.G = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), this, target );
				((dynamic)target).Stun( 1 );
				((dynamic)target).Paralyse( 1 );
				((dynamic)this.G).loc = this;
				((dynamic)target).grabbed_by += this.G;
				((Obj_Item_Weapon_Grab)this.G).synch();
				((dynamic)target).LAssailant = this;
				((Mob_Living)target).apply_damage( Rand13.Int( 120, 150 ), "brute", "head" );
				GlobalFuncs.playsound( target.loc, Rand13.PickFromTable( this.snap_sound ), 100, 1, -1 );
				this.visible_message( "<span class='danger'>" + this + " " + this.response_snap + " " + target + "!</span>" );
				GlobalFuncs.to_chat( target, "<span class='alert'><b>" + this.response_snap_target + "</b> Your vision fades away...</span>" );
				((dynamic)target).attack_log += "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Had his neck snapped by " + this + "!</font>";
				GlobalFuncs.log_admin( "" + target + " (" + ((dynamic)target).ckey + ") had his neck snapped by an active " + this + "." );
				GlobalFuncs.message_admins( "ALERT: <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + target.x + ";Y=" + target.y + ";Z=" + target.z + "'>" + ((dynamic)target).real_name + "</a> had his neck snapped by an active " + this + "." );
				Lang13.Delete( this.G );
				this.G = null;
			}
			return;
		}

	}

}