// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Blobspore : Mob_Living_SimpleAnimal_Hostile {

		public Obj_Effect_Blob_Factory factory = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "blobpod";
			this.pass_flags = 8;
			this.health = 30;
			this.maxHealth = 30;
			this.melee_damage_lower = 2;
			this.melee_damage_upper = 4;
			this.attacktext = "hits";
			this.attack_sound = "sound/weapons/rapidslice.ogg";
			this.can_butcher = false;
			this.faction = "blob";
			this.min_oxy = 0;
			this.max_tox = false;
			this.max_co2 = 0;
			this.minbodytemp = 0;
			this.maxbodytemp = 360;
			this.icon = "icons/mob/blob.dmi";
			this.icon_state = "blobpod";
		}

		// Function from file: factory.dm
		public Mob_Living_SimpleAnimal_Hostile_Blobspore ( dynamic loc = null, Obj_Effect_Blob_Factory linked_node = null ) : base( (object)(loc) ) {
			
			if ( linked_node is Obj_Effect_Blob_Factory ) {
				this.factory = linked_node;
				this.factory.spores.Add( this );
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: factory.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.factory != null ) {
				this.factory.spores.Remove( this );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: factory.dm
		public override void Die( bool? gore = null ) {
			dynamic sound = null;

			sound = Rand13.Pick(new object [] { "sound/effects/gib1.ogg", "sound/effects/gib2.ogg", "sound/effects/gib3.ogg" });
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), sound, 50, 1 );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: factory.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( mover is Obj_Effect_Blob ) {
				return true;
			}
			return base.CanPass( (object)(mover), (object)(target), height, air_group );
		}

		// Function from file: factory.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: factory.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			base.fire_act( air, exposed_temperature, exposed_volume );
			this.adjustBruteLoss( ( ( exposed_temperature ??0) * 0.01 <= 1 ? 1 : ( ( exposed_temperature ??0) * 0.01 >= 5 ? 5 : ( exposed_temperature ??0) * 0.01 ) ) );
			return false;
		}

	}

}