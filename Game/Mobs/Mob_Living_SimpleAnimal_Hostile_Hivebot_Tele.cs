// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Hivebot_Tele : Mob_Living_SimpleAnimal_Hostile_Hivebot {

		public string bot_type = "norm";
		public int bot_amt = 10;
		public int spawn_delay = 600;
		public bool turn_on = false;
		public bool auto_spawn = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "def_radar-off";
			this.health = 200;
			this.maxHealth = 200;
			this.status_flags = 0;
			this.anchored = 1;
			this.stop_automated_movement = true;
			this.icon_state = "def_radar-off";
		}

		// Function from file: hivebot.dm
		public Mob_Living_SimpleAnimal_Hostile_Hivebot_Tele ( dynamic loc = null ) : base( (object)(loc) ) {
			Effect_Effect_System_SmokeSpread smoke = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			smoke = new Effect_Effect_System_SmokeSpread();
			smoke.set_up( 5, 0, this.loc );
			smoke.start();
			this.visible_message( "<span class='danger'>The " + this + " warps in!</span>" );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/EMPulse.ogg", 25, 1 );
			return;
		}

		// Function from file: hivebot.dm
		public override bool Life(  ) {
			base.Life();

			if ( this.stat == 0 ) {
				
				if ( Rand13.PercentChance( 2 ) ) {
					this.warpbots();
				}
			}
			return false;
		}

		// Function from file: hivebot.dm
		public void warpbots(  ) {
			this.icon_state = "def_radar";
			this.visible_message( "<span class='warning'>The " + this + " turns on!</span>" );

			while (this.bot_amt > 0) {
				this.bot_amt--;

				switch ((string)( this.bot_type )) {
					case "norm":
						new Mob_Living_SimpleAnimal_Hostile_Hivebot( GlobalFuncs.get_turf( this ) );
						break;
					case "range":
						new Mob_Living_SimpleAnimal_Hostile_Hivebot_Range( GlobalFuncs.get_turf( this ) );
						break;
					case "rapid":
						new Mob_Living_SimpleAnimal_Hostile_Hivebot_Rapid( GlobalFuncs.get_turf( this ) );
						break;
				}
			}
			Task13.Schedule( 100, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return;
		}

	}

}