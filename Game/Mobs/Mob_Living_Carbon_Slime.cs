// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Slime : Mob_Living_Carbon {

		public bool AIproc = false;
		public dynamic co2overloadtime = null;
		public double temperature_resistance = 348.41;
		public bool Atkcool = false;
		public bool Tempstun = false;
		public int Discipline = 0;
		public bool SStun = false;
		public int cores = 1;
		public int powerlevel = 0;
		public int amount_grown = 0;
		public dynamic Victim = null;
		public Mob_Living_Carbon Target = null;
		public int attacked = 0;
		public bool tame = false;
		public ByTable Friends = new ByTable();
		public ByTable FriendsWeight = new ByTable();
		public ByTable speech_buffer = new ByTable();
		public string colour = "grey";
		public Type primarytype = typeof(Mob_Living_Carbon_Slime);
		public Type adulttype = typeof(Mob_Living_Carbon_Slime_Adult);
		public Type coretype = typeof(Obj_Item_SlimeExtract_Grey);
		public ByTable slime_mutation = new ByTable( 4 );
		public int core_removal_stage = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pass_flags = 1;
			this.speak_emote = new ByTable(new object [] { "hums" });
			this.maxHealth = 150;
			this.health = 150;
			this.v_update_icon = false;
			this.nutrition = 700;
			this.update_slimes = false;
			this.hasmouth = false;
			this.can_butcher = false;
			this.status_flags = 12;
			this.universal_speak = true;
			this.universal_understand = true;
			this.icon = "icons/mob/slimes.dmi";
			this.icon_state = "grey baby slime";
			this.layer = 5;
			this.see_in_dark = 8;
		}

		// Function from file: slime.dm
		public Mob_Living_Carbon_Slime ( dynamic loc = null ) : base( (object)(loc) ) {
			Reagents R = null;

			R = new Reagents( 100 );
			this.reagents = R;
			R.my_atom = this;
			this.name = "" + this.colour + " slime (" + Rand13.Int( 1, 1000 ) + ")";
			this.desc = "A baby " + this.colour + " slime.";
			this.real_name = this.name;
			Task13.Schedule( 1, (Task13.Closure)(() => {
				this.regenerate_icons();
				GlobalFuncs.to_chat( this, "<span class='notice'>Your icons have been generated!</span>" );
				return;
			}));
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: slime.dm
		public override bool IgniteMob(  ) {
			return false;
		}

		// Function from file: slime.dm
		public override bool has_eyes(  ) {
			return false;
		}

		// Function from file: slime.dm
		public override void updatehealth(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				this.health = this.maxHealth;
				this.stat = 0;
			} else {
				this.health = this.maxHealth - ( this.getOxyLoss() + this.getToxLoss() + this.getFireLoss() + this.getBruteLoss() + this.getCloneLoss() );
			}
			return;
		}

		// Function from file: slime.dm
		public override void show_inv( dynamic user = null ) {
			string dat = null;

			return;
			((Mob)user).set_machine( this );
			dat = new Txt( "\n	<B><HR><FONT size=3>" ).item( this.name ).str( "</FONT></B>\n	<BR><HR><BR>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).item( this.name ).str( "'>Close</A>\n	<BR>" ).ToString();
			Interface13.Browse( user, dat, "window=mob" + this.name + ";size=340x480" );
			GlobalFuncs.onclose( user, "mob" + this.name );
			return;
		}

		// Function from file: slime.dm
		public override bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}
			return false;
		}

		// Function from file: slime.dm
		public override dynamic attack_alien( Mob user = null ) {
			dynamic O = null;
			int damage = 0;
			dynamic O2 = null;
			dynamic O3 = null;
			dynamic O4 = null;
			Game_Data G = null;
			dynamic O5 = null;
			int damage2 = 0;
			dynamic O6 = null;
			dynamic O7 = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "You cannot attack people before the game has started." );
				return null;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				GlobalFuncs.to_chat( user, "No attacking people at spawn, you jackass." );
				return null;
			}

			dynamic _h = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _h=="help" ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						O.show_message( "<span class='notice'>" + user + " caresses " + this + " with its scythe like arm.</span>", 1 );
					}
				}
			} else if ( _h=="hurt" ) {
				
				if ( Rand13.PercentChance( 95 ) && Convert.ToDouble( this.health ) > 0 ) {
					this.attacked += 10;
					GlobalFuncs.playsound( this.loc, "sound/weapons/slice.ogg", 25, 1, -1 );
					damage = Rand13.Int( 15, 30 );

					if ( damage >= 25 ) {
						damage = Rand13.Int( 20, 40 );

						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O2 = _b;
							

							if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
								O2.show_message( "<span class='danger'>" + user + " has attacked " + this.name + "!</span>", 1 );
							}
						}
					} else {
						
						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O3 = _c;
							

							if ( Lang13.Bool( O3.client ) && !Lang13.Bool( O3.blinded ) ) {
								O3.show_message( "<span class='danger'>" + user + " has wounded " + this.name + "!</span>", 1 );
							}
						}
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );

					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O4 = _d;
						

						if ( Lang13.Bool( O4.client ) && !Lang13.Bool( O4.blinded ) ) {
							O4.show_message( "<span class='danger'>" + user + " has attempted to lunge at " + this.name + "!</span>", 1 );
						}
					}
				}
			} else if ( _h=="grab" ) {
				
				if ( user == this ) {
					return null;
				}
				G = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), user, this );
				user.put_in_active_hand( G );
				this.grabbed_by.Add( G );
				((Obj_Item_Weapon_Grab)G).synch();
				this.LAssailant = user;
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

				foreach (dynamic _e in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O5 = _e;
					
					O5.show_message( "<span class='warning'>" + user + " has grabbed " + this.name + " passively!</span>", 1 );
				}
			} else if ( _h=="disarm" ) {
				GlobalFuncs.playsound( this.loc, "sound/weapons/pierce.ogg", 25, 1, -1 );
				damage2 = 5;
				this.attacked += 10;

				if ( Rand13.PercentChance( 95 ) ) {
					
					foreach (dynamic _f in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O6 = _f;
						

						if ( Lang13.Bool( O6.client ) && !Lang13.Bool( O6.blinded ) ) {
							O6.show_message( "<span class='danger'>" + user + " has tackled " + this.name + "!</span>", 1 );
						}
					}

					if ( Lang13.Bool( this.Victim ) ) {
						this.Victim = null;
						this.anchored = 0;

						if ( Rand13.PercentChance( 80 ) && !( this.client != null ) ) {
							this.Discipline++;

							if ( !( this is Mob_Living_Carbon_Slime ) ) {
								
								if ( this.Discipline == 1 ) {
									this.attacked = 0;
								}
							}
						}
					}
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.SStun = true;
						Task13.Sleep( Rand13.Int( 5, 20 ) );
						this.SStun = false;
						return;
					}));
					Task13.Schedule( 0, (Task13.Closure)(() => {
						Map13.StepAway( this, user, 15 );
						Task13.Sleep( 3 );
						Map13.StepAway( this, user, 15 );
						return;
					}));
				} else {
					this.drop_item();

					foreach (dynamic _g in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O7 = _g;
						

						if ( Lang13.Bool( O7.client ) && !Lang13.Bool( O7.blinded ) ) {
							O7.show_message( "<span class='danger'>" + user + " has disarmed " + this.name + "!</span>", 1 );
						}
					}
				}
				this.adjustBruteLoss( damage2 );
				this.updatehealth();
			}
			return null;
		}

		// Function from file: slime.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic O = null;
			dynamic O2 = null;
			dynamic O3 = null;
			dynamic O4 = null;
			dynamic G = null;
			dynamic O5 = null;
			Game_Data G2 = null;
			dynamic O6 = null;
			int damage = 0;
			dynamic O7 = null;
			dynamic O8 = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( a, "You cannot attack people before the game has started." );
				return null;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				GlobalFuncs.to_chat( a, "No attacking people at spawn, you jackass." );
				return null;
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( this.Victim ) ) {
				
				if ( this.Victim == a ) {
					
					if ( Rand13.PercentChance( 60 ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O = _a;
							

							if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
								O.show_message( new Txt( "<span class='warning'>" ).item( a ).str( " attempts to wrestle " ).the( this.name ).item().str( " off!</span>" ).ToString(), 1 );
							}
						}
						GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					} else {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O2 = _b;
							

							if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
								O2.show_message( new Txt( "<span class='warning'>" ).item( a ).str( " manages to wrestle " ).the( this.name ).item().str( " off!</span>" ).ToString(), 1 );
							}
						}
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

						if ( Rand13.PercentChance( 90 ) && !( this.client != null ) ) {
							this.Discipline++;
						}
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.SStun = true;
							Task13.Sleep( Rand13.Int( 45, 60 ) );

							if ( this != null ) {
								this.SStun = false;
							}
							return;
						}));
						this.Victim = null;
						this.anchored = 0;
						Map13.StepAway( this, a, null );
					}
					return null;
				} else {
					
					if ( Rand13.PercentChance( 30 ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O3 = _c;
							

							if ( Lang13.Bool( O3.client ) && !Lang13.Bool( O3.blinded ) ) {
								O3.show_message( new Txt( "<span class='warning'>" ).item( a ).str( " attempts to wrestle " ).the( this.name ).item().str( " off of " ).item( this.Victim ).str( "!</span>" ).ToString(), 1 );
							}
						}
						GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					} else {
						
						foreach (dynamic _d in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O4 = _d;
							

							if ( Lang13.Bool( O4.client ) && !Lang13.Bool( O4.blinded ) ) {
								O4.show_message( new Txt( "<span class='warning'>" ).item( a ).str( " manages to wrestle " ).the( this.name ).item().str( " off of " ).item( this.Victim ).str( "!</span>" ).ToString(), 1 );
							}
						}
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

						if ( Rand13.PercentChance( 80 ) && !( this.client != null ) ) {
							this.Discipline++;

							if ( !( this is Mob_Living_Carbon_Slime_Adult ) ) {
								
								if ( this.Discipline == 1 ) {
									this.attacked = 0;
								}
							}
						}
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.SStun = true;
							Task13.Sleep( Rand13.Int( 55, 65 ) );

							if ( this != null ) {
								this.SStun = false;
							}
							return;
						}));
						this.Victim = null;
						this.anchored = 0;
						Map13.StepAway( this, a, null );
					}
					return null;
				}
			}

			if ( Lang13.Bool( a.gloves ) && a.gloves is Obj_Item_Clothing_Gloves ) {
				G = a.gloves;

				if ( Lang13.Bool( G.cell ) ) {
					
					if ( a.a_intent == "hurt" ) {
						
						if ( Convert.ToDouble( G.cell.charge ) >= 2500 ) {
							G.cell.use( 2500 );

							foreach (dynamic _e in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
								O5 = _e;
								

								if ( Lang13.Bool( O5.client ) && !Lang13.Bool( O5.blinded ) ) {
									O5.show_message( "<span class='danger'>" + this + " has been touched with the stun gloves by " + a + "!</span>", 1, "<span class='warning'>You hear someone fall.</span>", 2 );
								}
							}
							return null;
						} else {
							GlobalFuncs.to_chat( a, "<span class='warning'>Not enough charge! </span>" );
							return null;
						}
					}
				}
			}

			dynamic _i = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _i=="help" ) {
				this.help_shake_act( a );
			} else if ( _i=="grab" ) {
				
				if ( a == this ) {
					return null;
				}
				G2 = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), a, this );
				((Mob)a).put_in_active_hand( G2 );
				this.grabbed_by.Add( G2 );
				((dynamic)G2).synch();
				this.LAssailant = a;
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

				foreach (dynamic _f in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O6 = _f;
					

					if ( Lang13.Bool( O6.client ) && !Lang13.Bool( O6.blinded ) ) {
						O6.show_message( "<span class='warning'>" + a + " has grabbed " + this + " passively!</span>", 1 );
					}
				}
			} else {
				damage = Rand13.Int( 1, 9 );
				this.attacked += 10;

				if ( Rand13.PercentChance( 90 ) ) {
					
					if ( Lang13.Bool( a.mutations.Contains( 4 ) ) ) {
						damage += 5;

						if ( Lang13.Bool( this.Victim ) ) {
							this.Victim = null;
							this.anchored = 0;

							if ( Rand13.PercentChance( 80 ) && !( this.client != null ) ) {
								this.Discipline++;
							}
						}
						Task13.Schedule( 0, (Task13.Closure)(() => {
							Map13.StepAway( this, a, 15 );
							Task13.Sleep( 3 );
							Map13.StepAway( this, a, 15 );
							return;
						}));
					}
					GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );

					foreach (dynamic _g in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O7 = _g;
						

						if ( Lang13.Bool( O7.client ) && !Lang13.Bool( O7.blinded ) ) {
							O7.show_message( "<span class='danger'>" + a + " has punched " + this + "!</span>", 1 );
						}
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );

					foreach (dynamic _h in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O8 = _h;
						

						if ( Lang13.Bool( O8.client ) && !Lang13.Bool( O8.blinded ) ) {
							O8.show_message( "<span class='danger'>" + a + " has attempted to punch " + this + "!</span>", 1 );
						}
					}
				}
			}
			return null;
		}

		// Function from file: slime.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			dynamic O = null;

			
			if ( !( a is Mob_Living_Carbon_Monkey ) ) {
				return null;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( a, "You cannot attack people before the game has started." );
				return null;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				GlobalFuncs.to_chat( a, "No attacking people at spawn, you jackass." );
				return null;
			}
			base.attack_paw( a, (object)(b), (object)(c) );

			dynamic _b = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _b=="help" ) {
				this.help_shake_act( a );
			} else {
				
				if ( this.wear_mask is Obj_Item_Clothing_Mask_Muzzle ) {
					return null;
				}

				if ( Convert.ToDouble( this.health ) > 0 ) {
					this.attacked += 10;

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _a;
						

						if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
							O.show_message( "<span class='danger'>" + a.name + " has attacked " + this + "!</span>", 1 );
						}
					}
					this.adjustBruteLoss( Rand13.Int( 1, 3 ) );
					this.updatehealth();
				}
			}
			return null;
		}

		// Function from file: slime.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			dynamic O = null;
			int damage = 0;

			
			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				user.emote( "" + ((dynamic)user).friendly + " " + this );
			} else {
				
				if ( Lang13.Bool( ((dynamic)user).attack_sound ) ) {
					GlobalFuncs.playsound( this.loc, ((dynamic)user).attack_sound, 50, 1, 1 );
				}

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					
					O.show_message( "<span class='warning'><B>" + user + "</B> " + ((dynamic)user).attacktext + " " + this + "!</span>", 1 );
				}
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>attacked " + this.name + " (" + this.ckey + ")</font>" );
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>was attacked by " + user.name + " (" + user.ckey + ")</font>" );
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );
				this.adjustBruteLoss( damage );
				this.updatehealth();
			}
			return null;
		}

		// Function from file: slime.dm
		public override void attack_slime( Mob_Living_Carbon_Slime user = null ) {
			dynamic O = null;
			int damage = 0;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "You cannot attack people before the game has started." );
				return;
			}

			if ( Lang13.Bool( this.Victim ) ) {
				return;
			}

			if ( Convert.ToDouble( this.health ) > -100 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						O.show_message( "<span class='danger'>The " + user.name + " has glomped " + this + "!</span>", 1 );
					}
				}
				damage = Rand13.Int( 1, 3 );
				this.attacked += 5;

				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					damage = Rand13.Int( 1, 6 );
				} else {
					damage = Rand13.Int( 1, 3 );
				}
				this.adjustBruteLoss( damage );
				this.updatehealth();
			}
			return;
		}

		// Function from file: slime.dm
		public override dynamic attack_ui( dynamic slot = null ) {
			return null;
		}

		// Function from file: slime.dm
		public override bool u_equip( dynamic W = null, bool? dropped = null ) {
			return false;
		}

		// Function from file: slime.dm
		public override bool blob_act( dynamic severity = null ) {
			bool shielded = false;
			double? damage = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return false;
			}
			shielded = false;
			damage = null;

			if ( this.stat != 2 ) {
				damage = Rand13.Int( 10, 30 );
			}

			if ( shielded ) {
				damage /= 4;
			}
			this.show_message( "<span class='warning'>The blob attacks you!</span>" );
			this.adjustFireLoss( damage );
			this.updatehealth();
			return false;
		}

		// Function from file: slime.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			dynamic b_loss = null;
			dynamic f_loss = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat == 2 && this.client != null ) {
				return false;
			} else if ( this.stat == 2 && !( this.client != null ) ) {
				GlobalFuncs.qdel( this );
				return false;
			}
			b_loss = null;
			f_loss = null;

			switch ((int?)( severity )) {
				case 1:
					b_loss += 500;
					return false;
					break;
				case 2:
					b_loss += 60;
					f_loss += 60;
					break;
				case 3:
					b_loss += 30;
					break;
			}
			this.adjustBruteLoss( b_loss );
			this.adjustFireLoss( f_loss );
			this.updatehealth();
			return false;
		}

		// Function from file: slime.dm
		public override dynamic emp_act( int severity = 0 ) {
			Obj_Item_Stickybomb B = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Stickybomb) )) {
				B = _a;
				

				if ( Lang13.Bool( B.stuck_to ) ) {
					this.visible_message( new Txt( "<span class='warning'>" ).the( B ).item().str( " stuck on " ).the( this ).item().str( " suddenly deactivates itself and falls to the ground.</span>" ).ToString() );
					B.deactivate();
					B.unstick();
				}
			}

			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}
			this.powerlevel = 0;
			base.emp_act( severity );
			return null;
		}

		// Function from file: slime.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			this.attacked += 10;
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return 0;
		}

		// Function from file: slime.dm
		public override bool adjustFireLoss( dynamic amount = null ) {
			base.adjustFireLoss( -Math.Abs( Convert.ToDouble( (object)amount ) ) );
			return false;
		}

		// Function from file: slime.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				
				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					Interface13.Stat( null, "Health: " + Num13.Floor( Convert.ToDouble( this.health / 200 * 100 ) ) + "%" );
				} else {
					Interface13.Stat( null, "Health: " + Num13.Floor( Convert.ToDouble( this.health / 150 * 100 ) ) + "%" );
				}

				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					Interface13.Stat( null, "Nutrition: " + this.nutrition + "/1200" );

					if ( this.amount_grown >= 10 ) {
						Interface13.Stat( null, "You can reproduce!" );
					}
				} else {
					Interface13.Stat( null, "Nutrition: " + this.nutrition + "/1000" );

					if ( this.amount_grown >= 10 ) {
						Interface13.Stat( null, "You can evolve!" );
					}
				}
				Interface13.Stat( null, "Power Level: " + this.powerlevel );
			}
			return null;
		}

		// Function from file: slime.dm
		public override int Process_Spacemove( bool? check_drift = null, bool? ignore_slip = null ) {
			return 2;
		}

		// Function from file: slime.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			int probab = 0;
			Mob tmob = null;

			
			if ( !Lang13.Bool( yes ) || this.now_pushing ) {
				return null;
			}
			this.now_pushing = true;

			if ( Obstacle is Obj ) {
				
				if ( !( this.client != null ) && this.powerlevel > 0 ) {
					probab = 10;

					dynamic _a = this.powerlevel; // Was a switch-case, sorry for the mess.
					if ( 1<=_a&&_a<=2 ) {
						probab = 20;
					} else if ( 3<=_a&&_a<=4 ) {
						probab = 30;
					} else if ( 5<=_a&&_a<=6 ) {
						probab = 40;
					} else if ( 7<=_a&&_a<=8 ) {
						probab = 60;
					} else if ( _a==9 ) {
						probab = 70;
					} else if ( _a==10 ) {
						probab = 95;
					}

					if ( Rand13.PercentChance( probab ) ) {
						
						if ( Obstacle is Obj_Structure_Window || Obstacle is Obj_Structure_Grille ) {
							
							if ( this is Mob_Living_Carbon_Slime_Adult ) {
								
								if ( this.nutrition <= 600 && !this.Atkcool ) {
									Obstacle.attack_slime( this );
									Task13.Schedule( 0, (Task13.Closure)(() => {
										this.Atkcool = true;
										Task13.Sleep( 15 );
										this.Atkcool = false;
										return;
									}));
								}
							} else if ( this.nutrition <= 500 && !this.Atkcool ) {
								
								if ( Rand13.PercentChance( 5 ) ) {
									Obstacle.attack_slime( this );
									Task13.Schedule( 0, (Task13.Closure)(() => {
										this.Atkcool = true;
										Task13.Sleep( 15 );
										this.Atkcool = false;
										return;
									}));
								}
							}
						}
					}
				}
			}

			if ( Obstacle is Mob ) {
				tmob = (Mob)Obstacle;

				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					
					if ( tmob is Mob_Living_Carbon_Human ) {
						
						if ( Rand13.PercentChance( 90 ) ) {
							this.now_pushing = false;
							return null;
						}
					}
				} else if ( tmob is Mob_Living_Carbon_Human ) {
					this.now_pushing = false;
					return null;
				}
			}
			this.now_pushing = false;
			base.Bump( Obstacle );
			return null;
		}

		// Function from file: slime.dm
		public override dynamic movement_delay(  ) {
			double tally = 0;
			double health_deficiency = 0;

			tally = 0;
			health_deficiency = 100 - Convert.ToDouble( this.health );

			if ( health_deficiency >= 45 ) {
				tally += health_deficiency / 25;
			}

			if ( Convert.ToDouble( this.bodytemperature ) < 183.222 ) {
				tally += ( 283.22198486328125 - Convert.ToDouble( this.bodytemperature ) ) / 10 * 1.75;
			}

			if ( Lang13.Bool( this.reagents ) ) {
				
				if ( ((Reagents)this.reagents).has_reagent( "hyperzine" ) ) {
					tally *= 2;
				}

				if ( ((Reagents)this.reagents).has_reagent( "frostoil" ) ) {
					tally *= 5;
				}
			}

			if ( Convert.ToDouble( this.health ) <= 0 ) {
				tally *= 2;
			}

			if ( Convert.ToDouble( this.bodytemperature ) >= 330.2300109863281 ) {
				return -1;
			}
			return tally + Convert.ToDouble( GlobalVars.config.slime_delay );
		}

		// Function from file: slime.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			this.Friends = null;
			this.FriendsWeight = null;
			this.Victim = null;
			this.Target = null;
			return null;
		}

		// Function from file: say.dm
		public override bool say_understands( Ent_Dynamic other = null, Language speaking = null ) {
			
			if ( other is Mob_Living_Carbon_Slime ) {
				return true;
			}
			return base.say_understands( other, speaking );
		}

		// Function from file: say.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			Ent_Dynamic speaker = null;

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}

			if ( _args[1].speaker != null && _args[1].speaker != this && !Lang13.Bool( _args[1].frequency ) ) {
				speaker = _args[1].speaker;

				if ( speaker != null ) {
					speaker = speaker.GetSource();
				}

				if ( this.Friends.Contains( speaker ) ) {
					this.speech_buffer = new ByTable();
					this.speech_buffer.Add( _args[1].name );
					this.speech_buffer.Add( String13.ToLower( String13.HtmlEncode( _args[2] ) ) );
				}
			}
			base.Hear( (object)(speech), (object)(rendered_speech) );
			return null;
		}

		// Function from file: say.dm
		public override string say_quote( dynamic text = null ) {
			string ending = null;

			ending = String13.SubStr( text, Lang13.Length( text ), 0 );

			if ( ending == "?" ) {
				return "telepathically asks, " + text;
			} else if ( ending == "!" ) {
				return "telepathically cries, " + text;
			}
			return "telepathically chirps, " + text;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			base.say( (object)(message), speaking, radio );
			return false;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.update_hud();
			return null;
		}

		// Function from file: life.dm
		public override void regular_hud_updates(  ) {
			return;
		}

		// Function from file: slime.dm
		public void rabid(  ) {
			Type rabid_type = null;
			string rabid_age = null;
			dynamic rabid = null;
			dynamic M = null;

			
			if ( Lang13.Bool( this.stat ) ) {
				return;
			}

			if ( this.client != null ) {
				return;
			}
			rabid_type = typeof(Mob_Living_SimpleAnimal_Hostile_Slime);
			rabid_age = "baby";

			if ( this is Mob_Living_Carbon_Slime_Adult ) {
				rabid_type = typeof(Mob_Living_SimpleAnimal_Hostile_Slime_Adult);
				rabid_age = "adult";
			}
			rabid = Lang13.Call( rabid_type, this.loc );
			rabid.icon_state = "" + this.colour + " " + rabid_age + " slime eat";
			rabid.icon_living = "" + this.colour + " " + rabid_age + " slime eat";
			rabid.icon_dead = "" + this.colour + " baby slime dead";
			rabid.colour = "" + this.colour;

			foreach (dynamic _a in Lang13.Enumerate( this.Friends )) {
				M = _a;
				
				rabid.friends.Add( M );
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: slime.dm
		public bool get_obstacle_ok( Ent_Static A = null ) {
			int direct = 0;
			Obj_Item_Weapon_Dummy D = null;
			bool ok = false;
			Tile Step_1 = null;
			Tile Step_2 = null;
			bool check_1 = false;
			bool check_2 = false;
			Obj border_obstacle = null;
			Obj border_obstacle2 = null;
			Obj border_obstacle3 = null;
			Obj border_obstacle4 = null;
			Obj border_obstacle5 = null;
			Obj border_obstacle6 = null;

			direct = Map13.GetDistance( this, A );
			D = new Obj_Item_Weapon_Dummy( this.loc );
			ok = false;

			if ( ( direct - 1 & direct ) != 0 ) {
				
				switch ((int)( direct )) {
					case 5:
						Step_1 = Map13.GetStep( this, ((int)( GlobalVars.NORTH )) );
						Step_2 = Map13.GetStep( this, ((int)( GlobalVars.EAST )) );
						break;
					case 6:
						Step_1 = Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) );
						Step_2 = Map13.GetStep( this, ((int)( GlobalVars.EAST )) );
						break;
					case 9:
						Step_1 = Map13.GetStep( this, ((int)( GlobalVars.NORTH )) );
						Step_2 = Map13.GetStep( this, ((int)( GlobalVars.WEST )) );
						break;
					case 10:
						Step_1 = Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) );
						Step_2 = Map13.GetStep( this, ((int)( GlobalVars.WEST )) );
						break;
				}

				if ( Step_1 != null && Step_2 != null ) {
					check_1 = false;
					check_2 = false;
					Map13.StepTowards( D, Step_1, 0 );

					if ( false ) {
						check_1 = true;

						foreach (dynamic _b in Lang13.Enumerate( Step_1, typeof(Obj) )) {
							border_obstacle = _b;
							

							if ( Lang13.Bool( border_obstacle.flags & 512 ) ) {
								
								if ( !border_obstacle.CheckExit( D, A ) ) {
									check_1 = false;
								}
							}
						}

						foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.get_turf( A ), typeof(Obj) )) {
							border_obstacle2 = _c;
							

							if ( Lang13.Bool( border_obstacle2.flags & 512 ) && this != border_obstacle2 ) {
								
								if ( !border_obstacle2.CanPass( D, D.loc, 1, false ) ) {
									check_1 = false;
								}
							}
						}
					}
					D.loc = this.loc;
					Map13.StepTowards( D, Step_2, 0 );

					if ( false ) {
						check_2 = true;

						foreach (dynamic _d in Lang13.Enumerate( Step_2, typeof(Obj) )) {
							border_obstacle3 = _d;
							

							if ( Lang13.Bool( border_obstacle3.flags & 512 ) ) {
								
								if ( !border_obstacle3.CheckExit( D, A ) ) {
									check_2 = false;
								}
							}
						}

						foreach (dynamic _e in Lang13.Enumerate( GlobalFuncs.get_turf( A ), typeof(Obj) )) {
							border_obstacle4 = _e;
							

							if ( Lang13.Bool( border_obstacle4.flags & 512 ) && this != border_obstacle4 ) {
								
								if ( !border_obstacle4.CanPass( D, D.loc, 1, false ) ) {
									check_2 = false;
								}
							}
						}
					}

					if ( check_1 || check_2 ) {
						ok = true;
					}
				}
			} else if ( this.loc == this.loc ) {
				ok = true;
			} else {
				ok = true;

				foreach (dynamic _f in Lang13.Enumerate( this.loc, typeof(Obj) )) {
					border_obstacle5 = _f;
					

					if ( Lang13.Bool( border_obstacle5.flags & 512 ) ) {
						
						if ( !border_obstacle5.CheckExit( D, A ) ) {
							ok = false;
						}
					}
				}

				foreach (dynamic _g in Lang13.Enumerate( GlobalFuncs.get_turf( A ), typeof(Obj) )) {
					border_obstacle6 = _g;
					

					if ( Lang13.Bool( border_obstacle6.flags & 512 ) && A != border_obstacle6 ) {
						
						if ( !border_obstacle6.CanPass( D, D.loc, 1, false ) ) {
							ok = false;
						}
					}
				}
			}
			D.loc = null;
			D = null;

			if ( !ok ) {
				return false;
			}
			return true;
		}

		// Function from file: powers.dm
		public void UpdateFeed( Mob_Living M = null ) {
			
			if ( Lang13.Bool( this.Victim ) ) {
				
				if ( this.Victim == M ) {
					this.loc = M.loc;
				}
			}
			return;
		}

		// Function from file: powers.dm
		public void Feedstop(  ) {
			
			if ( Lang13.Bool( this.Victim ) ) {
				
				if ( Lang13.Bool( this.Victim.client ) ) {
					GlobalFuncs.to_chat( this.Victim, "" + this + " has let go of your head!" );
				}
				this.Victim = null;
			}
			return;
		}

		// Function from file: powers.dm
		public void Feedon( dynamic M = null ) {
			double lastnut = 0;
			Mob_Living_Carbon_Slime slime = null;

			this.Victim = M;
			this.loc = M.loc;
			this.canmove = false;
			this.anchored = 1;
			lastnut = this.nutrition;

			if ( this is Mob_Living_Carbon_Slime_Adult ) {
				this.icon_state = "" + this.colour + " adult slime eat";
			} else {
				this.icon_state = "" + this.colour + " baby slime eat";
			}

			while (Lang13.Bool( this.Victim ) && Convert.ToDouble( M.health ) > -70 && this.stat != 2) {
				this.canmove = false;

				if ( Map13.FetchInView( this, 1 ).Contains( M ) ) {
					this.loc = M.loc;

					if ( Rand13.PercentChance( 15 ) && Lang13.Bool( M.client ) && M is Mob_Living_Carbon ) {
						GlobalFuncs.to_chat( M, "<span class='warning'>" + Rand13.Pick(new object [] { "You can feel your body becoming weak!</span>", "You feel like you're about to die!", "You feel every part of your body screaming in agony!", "A low, rolling pain passes through your body!", "Your body feels as if it's falling apart!", "You feel extremely weak!", "A sharp, deep pain bathes every inch of your body!" }) );
					}

					if ( M is Mob_Living_Carbon ) {
						((Mob_Living)this.Victim).adjustCloneLoss( Rand13.Int( 1, 10 ) );
						((Mob_Living)this.Victim).adjustToxLoss( Rand13.Int( 1, 2 ) );

						if ( Convert.ToDouble( this.Victim.health ) <= 0 ) {
							((Mob_Living)this.Victim).adjustToxLoss( Rand13.Int( 2, 4 ) );
						}
						this.adjustToxLoss( -10 );
						this.adjustOxyLoss( -10 );
						this.adjustBruteLoss( -10 );
						this.adjustFireLoss( -10 );
						this.adjustCloneLoss( -10 );

						if ( Lang13.Bool( this.Victim ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( M, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
								slime = _a;
								

								if ( slime.Victim == M && slime != this ) {
									slime.Feedstop();
								}
							}
						}
						this.nutrition += Rand13.Int( 10, 25 );

						if ( this.nutrition >= lastnut + 50 ) {
							
							if ( Rand13.PercentChance( 80 ) ) {
								lastnut = this.nutrition;
								this.powerlevel++;

								if ( this.powerlevel > 10 ) {
									this.powerlevel = 10;
								}
							}
						}

						if ( this is Mob_Living_Carbon_Slime_Adult ) {
							
							if ( this.nutrition > 1200 ) {
								this.nutrition = 1200;
							}
						} else if ( this.nutrition > 1000 ) {
							this.nutrition = 1000;
						}
						((Mob_Living)this.Victim).updatehealth();
						this.updatehealth();
					} else if ( Rand13.PercentChance( 25 ) ) {
						GlobalFuncs.to_chat( this, "<span class='warning'><i>" + Rand13.Pick(new object [] { "This subject is incompatable</span>", "This subject does not have a life energy", "This subject is empty", "I am not satisified", "I can not feed from this subject", "I do not feel nourished", "This subject is not food" }) + "...</i>" );
					}
					Task13.Sleep( Rand13.Int( 15, 45 ) );
				} else {
					break;
				}
			}

			if ( this.stat == 2 ) {
				
				if ( !( this is Mob_Living_Carbon_Slime_Adult ) ) {
					this.icon_state = "" + this.colour + " baby slime dead";
				}
			} else if ( this is Mob_Living_Carbon_Slime_Adult ) {
				this.icon_state = "" + this.colour + " adult slime";
			} else {
				this.icon_state = "" + this.colour + " baby slime";
			}
			this.canmove = true;
			this.anchored = 0;

			if ( Lang13.Bool( M ) ) {
				
				if ( Convert.ToDouble( M.health ) <= -70 ) {
					M.canmove = false;

					if ( !( this.client != null ) ) {
						
						if ( Lang13.Bool( this.Victim ) && !( this.attacked != 0 ) ) {
							
							if ( Lang13.Bool( this.Victim.LAssailant ) && this.Victim.LAssailant != this.Victim ) {
								
								if ( Rand13.PercentChance( 50 ) ) {
									
									if ( !this.Friends.Contains( this.Victim.LAssailant ) ) {
										this.Friends.Add( this.Victim.LAssailant );
									}
								}
							}
						}
					}

					if ( Lang13.Bool( M.client ) && this is Mob_Living_Carbon_Human ) {
						
						if ( Rand13.PercentChance( 85 ) ) {
							this.rabid();
						}
					}

					if ( this.client != null ) {
						GlobalFuncs.to_chat( this, "<i>This subject does not have a strong enough life energy anymore...</i>" );
					}
				} else {
					M.canmove = true;

					if ( this.client != null ) {
						GlobalFuncs.to_chat( this, "<i>I have stopped feeding...</i>" );
					}
				}
			} else if ( this.client != null ) {
				GlobalFuncs.to_chat( this, "<i>I have stopped feeding...</i>" );
			}
			this.Victim = null;
			return;
		}

		// Function from file: life.dm
		public void handle_targets(  ) {
			bool hungry = false;
			bool starving = false;
			dynamic nofriend = null;
			ByTable targets = null;
			Mob_Living L = null;
			Mob_Living H = null;
			bool notarget = false;
			Mob_Living_Carbon_Slime M = null;
			Mob_Living_Carbon C = null;

			
			if ( this.Tempstun ) {
				
				if ( !Lang13.Bool( this.Victim ) ) {
					this.canmove = false;
				}
			} else {
				this.canmove = true;
			}

			if ( this.attacked > 50 ) {
				this.attacked = 50;
			}

			if ( this.attacked > 0 ) {
				
				if ( Rand13.PercentChance( 85 ) ) {
					this.attacked--;
				}
			}

			if ( this.Discipline > 0 ) {
				
				if ( Rand13.PercentChance( 10 ) ) {
					this.Discipline--;
				}
			}

			if ( !( this.client != null ) ) {
				
				if ( !this.canmove ) {
					return;
				}

				if ( this.Target != null ) {
					
					if ( this.attacked <= 0 ) {
						this.Target = null;
					}
				}

				if ( Lang13.Bool( this.Victim ) ) {
					return;
				}

				if ( Rand13.PercentChance( 1 ) ) {
					this.emote( Rand13.Pick(new object [] { "bounce", "sway", "light", "vibrate", "jiggle" }) );
				}

				if ( this.AIproc && this.SStun ) {
					return;
				}
				hungry = false;
				starving = false;

				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					
					dynamic _a = this.nutrition; // Was a switch-case, sorry for the mess.
					if ( 601<=_a&&_a<=900 ) {
						
						if ( Rand13.PercentChance( 25 ) ) {
							hungry = true;
						}
					} else if ( 301<=_a&&_a<=600 ) {
						hungry = true;
					} else if ( 0<=_a&&_a<=300 ) {
						starving = true;
					}
				} else {
					
					dynamic _b = this.nutrition; // Was a switch-case, sorry for the mess.
					if ( 501<=_b&&_b<=700 ) {
						
						if ( Rand13.PercentChance( 25 ) ) {
							hungry = true;
						}
					} else if ( 201<=_b&&_b<=500 ) {
						hungry = true;
					} else if ( 0<=_b&&_b<=200 ) {
						starving = true;
					}
				}

				if ( starving && !( this.client != null ) ) {
					
					if ( this.Friends.len > 0 && Rand13.PercentChance( 1 ) ) {
						nofriend = Rand13.PickFromTable( this.Friends );
						this.Friends.Remove( nofriend );
					}
				}

				if ( !( this.Target != null ) ) {
					targets = new ByTable();

					if ( hungry || starving ) {
						
						foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Mob_Living) )) {
							L = _d;
							

							if ( L is Mob_Living_Carbon_Slime || L.stat != 0 || L is Mob_Living_SimpleAnimal ) {
								continue;
							}

							if ( L is Mob_Living_Silicon ) {
								
								if ( !( this is Mob_Living_Carbon_Slime_Adult ) ) {
									
									if ( !starving && this.Discipline > 0 ) {
										continue;
									}
								}

								if ( this.tame ) {
									continue;
								}
								targets.Add( L );
							} else if ( L is Mob_Living_Carbon ) {
								
								if ( L is Mob_Living_Carbon_Human ) {
									H = L;

									if ( H.dna != null ) {
										
										if ( H.dna.mutantrace == "slime" ) {
											continue;
										}
									}
								}

								if ( !( this is Mob_Living_Carbon_Slime_Adult ) ) {
									
									if ( !starving && this.Discipline > 0 ) {
										continue;
									}
								}

								if ( this.Friends.Contains( L ) ) {
									continue;
								}

								if ( this.tame && L is Mob_Living_Carbon_Human ) {
									continue;
								}

								if ( !L.canmove ) {
									notarget = false;

									foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( L, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
										M = _c;
										

										if ( M.Victim == L ) {
											notarget = true;
										}
									}

									if ( notarget ) {
										continue;
									}
								}
								targets.Add( L );
							}
						}
					}

					if ( ( hungry || starving ) && targets.len > 0 ) {
						
						if ( !( this is Mob_Living_Carbon_Slime_Adult ) ) {
							
							if ( !starving ) {
								
								foreach (dynamic _e in Lang13.Enumerate( targets, typeof(Mob_Living_Carbon) )) {
									C = _e;
									

									if ( !( this.Discipline != 0 ) && Rand13.PercentChance( 5 ) ) {
										
										if ( C is Mob_Living_Carbon_Human ) {
											this.Target = C;
											break;
										}

										if ( C is Mob_Living_Carbon_Alien_Humanoid ) {
											this.Target = C;
											break;
										}
									}

									if ( C is Mob_Living_Carbon_Alien_Larva ) {
										this.Target = C;
										break;
									}

									if ( C is Mob_Living_Carbon_Monkey ) {
										this.Target = C;
										break;
									}
								}
							} else {
								this.Target = targets[1];
							}
						} else {
							this.Target = targets[1];
						}
					}

					if ( targets.len > 0 ) {
						
						if ( this.attacked > 0 ) {
							this.Target = targets[1];
						}
					}
				}

				if ( !( this.Target != null ) ) {
					
					if ( hungry || starving ) {
						
						if ( this.canmove && this.loc is Tile && Rand13.PercentChance( 50 ) ) {
							Map13.Step( this, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) ) );
						}
					} else if ( this.canmove && this.loc is Tile && Rand13.PercentChance( 33 ) ) {
						Map13.Step( this, Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) ) );
					}
				} else if ( !this.AIproc ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.AIprocess();
						return;
					}));
				}
			}
			return;
		}

		// Function from file: life.dm
		public void handle_nutrition(  ) {
			int? i = null;
			Type newslime = null;
			dynamic M = null;
			dynamic A = null;

			
			if ( Rand13.PercentChance( 20 ) ) {
				
				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					this.burn_calories( Rand13.Int( 4, 6 ) );
				} else {
					this.burn_calories( Rand13.Int( 2, 3 ) );
				}
			}

			if ( this.nutrition <= 0 ) {
				this.nutrition = 0;

				if ( Rand13.PercentChance( 75 ) ) {
					this.adjustToxLoss( Rand13.Int( 0, 5 ) );
				}
			} else if ( this is Mob_Living_Carbon_Slime_Adult ) {
				
				if ( this.nutrition >= 1000 ) {
					
					if ( Rand13.PercentChance( 40 ) ) {
						this.amount_grown++;
					}
				}
			} else if ( this.nutrition >= 800 ) {
				
				if ( Rand13.PercentChance( 40 ) ) {
					this.amount_grown++;
				}
			}

			if ( this.amount_grown >= 10 && !Lang13.Bool( this.Victim ) && !( this.Target != null ) ) {
				
				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					
					if ( !( this.client != null ) ) {
						i = null;
						i = 1;

						while (( i ??0) <= 4) {
							newslime = null;

							if ( Rand13.PercentChance( 70 ) ) {
								newslime = this.primarytype;
							} else {
								newslime = this.slime_mutation[Rand13.Int( 1, 4 )];
							}
							M = Lang13.Call( newslime, this.loc );
							M.powerlevel = Num13.Floor( this.powerlevel / 4 );
							M.Friends = this.Friends;
							M.tame = this.tame;
							M.Discipline = this.Discipline;

							if ( i != 1 ) {
								Map13.StepAway( M, this, null );
							}
							GlobalFuncs.feedback_add_details( "slime_babies_born", "slimebirth_" + GlobalFuncs.replacetext( M.colour, " ", "_" ) );
							i++;
						}
						GlobalFuncs.qdel( this );
					}
				} else if ( !( this.client != null ) ) {
					A = Lang13.Call( this.adulttype, this.loc );
					A.nutrition = this.nutrition;
					A.powerlevel = Num13.MaxInt( 0, this.powerlevel - 1 );
					A.Friends = this.Friends;
					A.tame = this.tame;
					GlobalFuncs.qdel( this );
				}
			}
			return;
		}

		// Function from file: life.dm
		public bool handle_regular_status_updates(  ) {
			
			if ( this is Mob_Living_Carbon_Slime_Adult ) {
				this.health = 200 - Convert.ToDouble( this.getOxyLoss() + this.getToxLoss() + this.getFireLoss() + this.getBruteLoss() + this.getCloneLoss() );
			} else {
				this.health = 150 - Convert.ToDouble( this.getOxyLoss() + this.getToxLoss() + this.getFireLoss() + this.getBruteLoss() + this.getCloneLoss() );
			}

			if ( Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_dead ) && this.stat != 2 ) {
				this.death();
				return false;
			} else if ( Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_crit ) ) {
				
				if ( !((Reagents)this.reagents).has_reagent( "inaprovaline" ) ) {
					this.adjustOxyLoss( 10 );
				}

				if ( this.stat != 2 ) {
					this.stat = 1;
				}
			}

			if ( Rand13.PercentChance( 30 ) ) {
				this.adjustOxyLoss( -1 );
				this.adjustToxLoss( -1 );
				this.adjustFireLoss( -1 );
				this.adjustCloneLoss( -1 );
				this.adjustBruteLoss( -1 );
			}

			if ( this.stat == 2 ) {
				this.lying = true;
				this.blinded = 1;
			} else if ( this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 || this.status_flags != 0 && 8192 != 0 ) {
				
				if ( this.stunned > 0 ) {
					this.AdjustStunned( -1 );
					this.stat = 0;
				}

				if ( this.weakened > 0 ) {
					this.AdjustWeakened( -1 );
					this.lying = false;
					this.stat = 0;
				}

				if ( this.paralysis > 0 ) {
					this.AdjustParalysis( -1 );
					this.blinded = 0;
					this.lying = false;
					this.stat = 0;
				}
			} else {
				this.lying = false;
				this.stat = 0;
			}

			if ( Lang13.Bool( this.stuttering ) ) {
				this.stuttering = 0;
			}

			if ( this.eye_blind != 0 ) {
				this.eye_blind = 0;
				this.blinded = 1;
			}

			if ( this.ear_deaf > 0 ) {
				this.ear_deaf = 0;
			}

			if ( this.ear_damage < 25 ) {
				this.ear_damage = 0;
			}
			this.density = !( this.lying == true );

			if ( ( this.sdisabilities & 1 ) != 0 ) {
				this.blinded = 1;
			}

			if ( ( this.sdisabilities & 4 ) != 0 ) {
				this.ear_deaf = 1;
			}

			if ( Convert.ToDouble( this.eye_blurry ) > 0 ) {
				this.eye_blurry = 0;
			}

			if ( this.druggy > 0 ) {
				this.druggy = 0;
			}
			return true;
		}

		// Function from file: life.dm
		public void handle_chemicals_in_body(  ) {
			
			if ( Lang13.Bool( this.reagents ) ) {
				((Reagents)this.reagents).metabolize( this );
			}
			this.updatehealth();
			return;
		}

		// Function from file: life.dm
		public dynamic adjust_body_temperature( dynamic current = null, double? loc_temp = null, bool boost = false ) {
			dynamic temperature = null;
			double difference = 0;
			double increments = 0;
			double change = 0;
			dynamic temp_change = null;

			temperature = current;
			difference = Math.Abs( Convert.ToDouble( current - loc_temp ) );

			if ( difference > 50 ) {
				increments = difference / 5;
			} else {
				increments = difference / 10;
			}
			change = increments * ( boost ?1:0);

			if ( Convert.ToDouble( current ) < ( loc_temp ??0) ) {
				temperature = Num13.MinInt( ((int)( loc_temp ??0 )), Convert.ToInt32( temperature + change ) );
			} else if ( Convert.ToDouble( current ) > ( loc_temp ??0) ) {
				temperature = Num13.MaxInt( ((int)( loc_temp ??0 )), Convert.ToInt32( temperature - change ) );
			}
			temp_change = temperature - current;
			return temp_change;
		}

		// Function from file: life.dm
		public void handle_environment( GasMixture environment = null ) {
			double? loc_temp = null;
			dynamic heat_turf = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( !( environment != null ) ) {
				this.adjustToxLoss( Rand13.Int( 10, 20 ) );
				return;
			}
			loc_temp = 273.41;

			if ( GlobalFuncs.get_turf( this ) is Tile_Space ) {
				heat_turf = GlobalFuncs.get_turf( this );
				loc_temp = Lang13.DoubleNullable( heat_turf.temperature );
			} else if ( this.loc is Obj_Machinery_Atmospherics_Unary_CryoCell ) {
				loc_temp = Lang13.DoubleNullable( ((dynamic)this.loc).air_contents.temperature );
			} else {
				loc_temp = environment.temperature;
			}

			if ( Convert.ToDouble( this.bodytemperature ) < 278.41 ) {
				
				if ( Convert.ToDouble( this.bodytemperature ) <= 233.41 ) {
					this.Tempstun = true;
				}

				if ( Convert.ToDouble( this.bodytemperature ) <= 223.41 ) {
					
					if ( Convert.ToDouble( this.bodytemperature ) <= 50 ) {
						this.adjustToxLoss( 301 );
					} else {
						this.adjustToxLoss( Num13.Floor( Math.Sqrt( Convert.ToDouble( this.bodytemperature ) ) ) * 2 );
					}
				}
			} else {
				this.Tempstun = false;
			}

			if ( ( loc_temp ??0) < 310.41 ) {
				this.bodytemperature += this.adjust_body_temperature( this.bodytemperature, loc_temp, true );
			} else {
				this.bodytemperature += this.adjust_body_temperature( this.bodytemperature, loc_temp, true );
			}
			this.updatehealth();
			return;
		}

		// Function from file: life.dm
		public void AIprocess(  ) {
			bool hungry = false;
			bool starving = false;
			Mob_Living_Carbon_Slime M = null;
			dynamic sleeptime = null;

			
			if ( this.AIproc || this.stat == 2 || this.client != null ) {
				return;
			}
			hungry = false;
			starving = false;

			if ( this is Mob_Living_Carbon_Slime_Adult ) {
				
				dynamic _a = this.nutrition; // Was a switch-case, sorry for the mess.
				if ( 400<=_a&&_a<=1100 ) {
					hungry = true;
				} else if ( 0<=_a&&_a<=399 ) {
					starving = true;
				}
			} else {
				
				dynamic _b = this.nutrition; // Was a switch-case, sorry for the mess.
				if ( 150<=_b&&_b<=900 ) {
					hungry = true;
				} else if ( 0<=_b&&_b<=149 ) {
					starving = true;
				}
			}
			this.AIproc = true;

			while (this.AIproc && this.stat != 2 && ( this.attacked > 0 || starving || hungry || Lang13.Bool( this.Victim ) )) {
				
				if ( Lang13.Bool( this.Victim ) ) {
					break;
				}

				if ( !( this.Target != null ) || this.client != null ) {
					break;
				}

				if ( Convert.ToDouble( this.Target.health ) <= -70 || this.Target.stat == 2 ) {
					this.Target = null;
					this.AIproc = false;
					break;
				}

				if ( this.Target != null ) {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( this.Target, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
						M = _c;
						

						if ( M.Victim == this.Target ) {
							this.Target = null;
							this.AIproc = false;
							break;
						}
					}

					if ( !this.AIproc ) {
						break;
					}

					if ( Map13.FetchInView( this, 1 ).Contains( this.Target ) ) {
						
						if ( this.Target is Mob_Living_Silicon ) {
							
							if ( !this.Atkcool ) {
								Task13.Schedule( 0, (Task13.Closure)(() => {
									this.Atkcool = true;
									Task13.Sleep( 15 );
									this.Atkcool = false;
									return;
								}));

								if ( this.Target.Adjacent( this ) ) {
									this.Target.attack_slime( this );
								}
							}
							return;
						}

						if ( !( this.Target.lying == true ) && Rand13.PercentChance( 80 ) ) {
							
							if ( this.Target.client != null && Convert.ToDouble( this.Target.health ) >= 20 ) {
								
								if ( !this.Atkcool ) {
									Task13.Schedule( 0, (Task13.Closure)(() => {
										this.Atkcool = true;
										Task13.Sleep( 25 );
										this.Atkcool = false;
										return;
									}));

									if ( this.Target.Adjacent( this ) ) {
										this.Target.attack_slime( this );
									}
								}

								if ( Rand13.PercentChance( 30 ) ) {
									Map13.StepTowards( this, this.Target, 0 );
								}
							} else if ( !this.Atkcool && this.Target.Adjacent( this ) ) {
								this.Feedon( this.Target );
							}
						} else if ( !this.Atkcool && this.Target.Adjacent( this ) ) {
							this.Feedon( this.Target );
						}
					} else if ( Map13.FetchInView( this, 7 ).Contains( this.Target ) ) {
						
						if ( this.Target.Adjacent( this ) ) {
							Map13.StepTowards( this, this.Target, 0 );
						}
					} else {
						this.Target = null;
						this.AIproc = false;
						break;
					}
				}
				sleeptime = this.movement_delay();

				if ( Convert.ToDouble( sleeptime ) <= 0 ) {
					sleeptime = 1;
				}
				Task13.Sleep( Convert.ToInt32( sleeptime + 2 ) );
			}
			this.AIproc = false;
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			GasMixture environment = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.monkeyizing ) {
				return false;
			}
			base.Life();

			if ( this.stat != 2 ) {
				this.handle_chemicals_in_body();
				this.handle_nutrition();
				this.handle_targets();
			}

			if ( this.loc != null ) {
				environment = this.loc.return_air();
			}
			this.blinded = null;
			this.regular_hud_updates();

			if ( environment != null ) {
				this.handle_environment( environment );
			}
			this.handle_regular_status_updates();
			return false;
		}

		// Function from file: examine.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string msg = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<EM>" ).item().str( "</EM>!\n" ).ToString();

			if ( this.stat == 2 ) {
				msg += "<span class='deadsay'>It is limp and unresponsive.</span>\n";
			} else {
				
				if ( this.getBruteLoss() != 0 ) {
					msg += "<span class='warning'>";

					if ( this.getBruteLoss() < 40 ) {
						msg += "It has some punctures in its flesh!";
					} else {
						msg += "<B>It has severe punctures and tears in its flesh!</B>";
					}
					msg += "</span>\n";
				}

				dynamic _a = this.powerlevel; // Was a switch-case, sorry for the mess.
				if ( 2<=_a&&_a<=3 ) {
					msg += "It is flickering gently with a little electrical activity.\n";
				} else if ( 4<=_a&&_a<=5 ) {
					msg += "It is glowing gently with moderate levels of electrical activity.\n";
				} else if ( 6<=_a&&_a<=9 ) {
					msg += "<span class='warning'>It is glowing brightly with high levels of electrical activity.</span>\n";
				} else if ( _a==10 ) {
					msg += "<span class='danger'>It is radiating with massive levels of electrical activity!</span>\n";
				}
			}
			msg += "*---------*</span>";
			GlobalFuncs.to_chat( user, msg );
			return null;
		}

		// Function from file: vgstation13.dme
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			type = type ?? 1;

			int t1 = 0;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( this.timestopped ) {
				return;
			}

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( String13.FindIgnoreCase( act, "s", -1, 0 ) != 0 && !( String13.FindIgnoreCase( act, "_", -2, 0 ) != 0 ) ) {
				act = String13.SubStr( act, 1, Lang13.Length( act ) );
			}

			dynamic _a = act; // Was a switch-case, sorry for the mess.
			if ( _a=="me" ) {
				
				if ( this.silent != 0 ) {
					return;
				}

				if ( this.client != null ) {
					
					if ( ( this.client.prefs.muted & 1 ) != 0 ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>You cannot send IC messages (muted).</span>" );
						return;
					}

					if ( this.client.handle_spam_prevention( message, 1 ) ) {
						return;
					}
				}

				if ( Lang13.Bool( this.stat ) ) {
					return;
				}

				if ( !Lang13.Bool( message ) ) {
					return;
				}
				this.custom_emote( type, message ); return;
			} else if ( _a=="bounce" ) {
				message = "<B>The " + this.name + "</B> bounces in place.";
				type = 1;
			} else if ( _a=="jiggle" ) {
				message = "<B>The " + this.name + "</B> jiggles!";
				type = 1;
			} else if ( _a=="light" ) {
				message = "<B>The " + this.name + "</B> lights up for a bit, then stops.";
				type = 1;
			} else if ( _a=="moan" ) {
				message = "<B>The " + this.name + "</B> moans.";
				type = 2;
			} else if ( _a=="shiver" ) {
				message = "<B>The " + this.name + "</B> shivers.";
				type = 2;
			} else if ( _a=="sway" ) {
				message = "<B>The " + this.name + "</B> sways around dizzily.";
				type = 1;
			} else if ( _a=="twitch" ) {
				message = "<B>The " + this.name + "</B> twitches.";
				type = 1;
			} else if ( _a=="vibrate" ) {
				message = "<B>The " + this.name + "</B> vibrates!";
				type = 1;
			} else if ( _a=="help" ) {
				GlobalFuncs.to_chat( this, "Help for slime emotes. You can use these emotes with say \"*emote\":\n\nbounce, jiggle, light, moan, shiver, sway, twitch, vibrate" );
			} else {
				GlobalFuncs.to_chat( this, "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				
				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _b;
						
						O.show_message( message, type );
					}
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						O2 = _c;
						
						O2.show_message( message, type );
					}
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			dynamic M1 = null;
			dynamic M2 = null;
			dynamic O = null;

			
			if ( this.stat == 2 ) {
				return null;
			}
			this.stat = 2;
			this.icon_state = "" + this.colour + " baby slime dead";

			if ( !( gibbed == true ) ) {
				
				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					M1 = Lang13.Call( this.primarytype, this.loc );

					if ( this.mind != null ) {
						this.mind.transfer_to( M1 );
					} else {
						M1.key = this.key;
						M1.rabid();
					}
					M2 = Lang13.Call( this.primarytype, this.loc );
					M2.rabid();

					if ( this != null ) {
						GlobalFuncs.qdel( this );
						return null;
					}
				} else {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _a;
						
						O.show_message( "<b>The " + this.name + "</b> seizes up and falls limp...", 1 );
					}
				}
			}
			this.update_canmove();

			if ( this.blind != null ) {
				((dynamic)this.blind).layer = 0;
			}
			((GameMode)GlobalVars.ticker.mode).check_win();
			return base.death( gibbed );
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.assigned_role = "slime";
			return;
		}

		// Function from file: ventcrawl.dm
		public override bool can_ventcrawl(  ) {
			return true;
		}

		// Function from file: other_mobs.dm
		public override void RestrainedClickOn( Ent_Static A = null ) {
			return;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool proximity_flag = false, string _params = null ) {
			A.attack_slime( this );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Crawl through Vent", desc: "Enter an air vent and crawl through the pipe system.", group: "Object" )]
		public void ventcrawl(  ) {
			dynamic pipe = null;

			
			if ( Lang13.Bool( this.Victim ) ) {
				return;
			}
			pipe = this.start_ventcrawl();

			if ( Lang13.Bool( pipe ) && !Lang13.Bool( this.Victim ) ) {
				this.handle_ventcrawl( pipe );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( desc: "This will make you split into four Slimes. NOTE: this will KILL you, but you will be transferred into one of the babies.", group: "Slime" )]
		public void Reproduce(  ) {
			ByTable babies = null;
			int new_nutrition = 0;
			int new_powerlevel = 0;
			int? i = null;
			Type newslime = null;
			dynamic M = null;
			dynamic new_slime = null;

			
			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "<i>I must be conscious to do this...</i>" );
				return;
			}

			if ( this is Mob_Living_Carbon_Slime_Adult ) {
				
				if ( this.amount_grown >= 10 ) {
					
					if ( Lang13.Bool( this.stat ) ) {
						GlobalFuncs.to_chat( this, "<i>I must be conscious to do this...</i>" );
						return;
					}
					babies = new ByTable();
					new_nutrition = Num13.Floor( this.nutrition * 081 );
					new_powerlevel = Num13.Floor( this.powerlevel / 4 );
					i = null;
					i = 1;

					while (( i ??0) <= 4) {
						newslime = null;

						if ( Rand13.PercentChance( 70 ) ) {
							newslime = this.primarytype;
						} else {
							newslime = this.slime_mutation[Rand13.Int( 1, 4 )];
						}
						M = Lang13.Call( newslime, this.loc );
						M.nutrition = new_nutrition;
						M.powerlevel = new_powerlevel;

						if ( i != 1 ) {
							Map13.StepAway( M, this, null );
						}
						babies.Add( M );
						GlobalFuncs.feedback_add_details( "slime_babies_born", "slimebirth_" + GlobalFuncs.replacetext( M.colour, " ", "_" ) );
						i++;
					}
					new_slime = Rand13.PickFromTable( babies );
					new_slime.a_intent = "hurt";
					new_slime.languages = this.languages.Copy();
					new_slime.name = this.name;
					new_slime.real_name = this.real_name;

					if ( this.mind != null ) {
						this.mind.transfer_to( new_slime );
					} else {
						new_slime.key = this.key;
					}
					this.transferImplantsTo( new_slime );
					this.transferBorers( new_slime );
					GlobalFuncs.to_chat( new_slime, "<B>You are now a slime!</B>" );
					GlobalFuncs.qdel( this );
				} else {
					GlobalFuncs.to_chat( this, "<i>I am not ready to reproduce yet...</i>" );
				}
			} else {
				GlobalFuncs.to_chat( this, "<i>I am not old enough to reproduce yet...</i>" );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( desc: "This will let you evolve from baby to adult slime.", group: "Slime" )]
		public void Evolve(  ) {
			dynamic new_slime = null;

			
			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "<i>I must be conscious to do this...</i>" );
				return;
			}

			if ( !( this is Mob_Living_Carbon_Slime_Adult ) ) {
				
				if ( this.amount_grown >= 10 ) {
					new_slime = Lang13.Call( this.adulttype, this.loc );
					new_slime.nutrition = this.nutrition;
					new_slime.powerlevel = Num13.MaxInt( 0, this.powerlevel - 1 );
					new_slime.a_intent = "hurt";

					if ( this.mind != null ) {
						this.mind.transfer_to( new_slime );
					} else {
						new_slime.key = this.key;
					}
					new_slime.languages = this.languages.Copy();
					new_slime.name = this.name;
					new_slime.real_name = this.real_name;
					this.transferImplantsTo( new_slime );
					this.transferBorers( new_slime );
					GlobalFuncs.to_chat( new_slime, "<B>You are now an adult slime.</B>" );
					GlobalFuncs.qdel( this );
				} else {
					GlobalFuncs.to_chat( this, "<i>I am not ready to evolve yet...</i>" );
				}
			} else {
				GlobalFuncs.to_chat( this, "<i>I have already evolved...</i>" );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( desc: "This will let you feed on any valid creature in the surrounding area. This should also be used to halt the feeding process.", group: "Slime" )]
		public void Feed(  ) {
			ByTable choices = null;
			Mob_Living C = null;
			dynamic M = null;
			Mob_Living_Carbon_Slime met = null;

			
			if ( Lang13.Bool( this.Victim ) ) {
				this.Feedstop();
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "<i>I must be conscious to do this...</i>" );
				return;
			}
			choices = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Mob_Living) )) {
				C = _a;
				

				if ( C != this && !( C is Mob_Living_Carbon_Slime ) ) {
					choices.Add( C );
				}
			}
			M = Interface13.Input( this, "Who do you wish to feed on?", null, null, null | choices, InputType.Any );

			if ( !Lang13.Bool( M ) ) {
				return;
			}

			if ( Map13.FetchInView( this, 1 ).Contains( M ) ) {
				
				if ( !( this is Mob_Living_Carbon_Brain ) ) {
					
					if ( !( M is Mob_Living_Carbon_Slime ) ) {
						
						if ( this.stat != 2 ) {
							
							if ( Convert.ToDouble( this.health ) > -70 ) {
								
								foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( null, null ), typeof(Mob_Living_Carbon_Slime) )) {
									met = _b;
									

									if ( met.Victim == M && met != this ) {
										GlobalFuncs.to_chat( this, "<i>The " + met.name + " is already feeding on this subject...</i>" );
										return;
									}
								}
								GlobalFuncs.to_chat( this, "<span class='notice'><i>I have latched onto the subject and begun feeding...</i></span>" );
								GlobalFuncs.to_chat( M, "<span class='danger'>The " + this.name + " has latched onto your head!</span>" );
								this.Feedon( M );
							} else {
								GlobalFuncs.to_chat( this, "<i>This subject does not have a strong enough life energy...</i>" );
							}
						} else {
							GlobalFuncs.to_chat( this, "<i>This subject does not have an edible life energy...</i>" );
						}
					} else {
						GlobalFuncs.to_chat( this, "<i>I must not feed on my brothers...</i>" );
					}
				} else {
					GlobalFuncs.to_chat( this, "<i>This subject does not have an edible life energy...</i>" );
				}
			}
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already dead!</span>" );
				return;
			}

			if ( this.suiciding == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already committing suicide! Be patient!</span>" );
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( confirm == "Yes" ) {
				this.suiciding = true;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " starts vibrating uncontrollably! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.setOxyLoss( 100 );
				this.adjustBruteLoss( 100 - this.getBruteLoss() );
				this.setToxLoss( 100 );
				this.setCloneLoss( 100 );
				this.updatehealth();
			}
			return;
		}

	}

}