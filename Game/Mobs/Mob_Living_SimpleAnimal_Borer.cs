// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Borer : Mob_Living_SimpleAnimal {

		public bool busy = false;
		public double chemicals = 10;
		public dynamic host = null;
		public string truename = null;
		public Mob_Living_CaptiveBrain host_brain = null;
		public bool controlling = false;
		public ByTable avail_chems = new ByTable();
		public ByTable avail_abilities = new ByTable();
		public ByTable attached_verbs = new ByTable(new object [] { typeof(Obj_Item_Verbs_Borer_Attached) });
		public ByTable beheaded_verbs = new ByTable(new object [] { typeof(Obj_Item_Verbs_Borer_Beheaded) });
		public ByTable detached_verbs = new ByTable(new object [] { typeof(Obj_Item_Verbs_Borer_Detached) });
		public int numChildren = 0;
		public ResearchTree_Borer research = null;
		public ByTable verb_holders = new ByTable();
		public ByTable borer_avail_unlocks = new ByTable();
		public dynamic eh_emote = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "cortical borer";
			this.speak_emote = new ByTable(new object [] { "chirrups" });
			this.emote_hear = new ByTable(new object [] { "chirrups" });
			this.response_help = "pokes the";
			this.response_disarm = "prods the";
			this.response_harm = "stomps on the";
			this.icon_living = "brainslug";
			this.icon_dead = "brainslug_dead";
			this.speed = 5;
			this.size = 2;
			this.max_tox = false;
			this.a_intent = "hurt";
			this.stop_automated_movement = true;
			this.status_flags = 8;
			this.attacktext = "nips";
			this.friendly = "prods";
			this.wander = false;
			this.pass_flags = 1;
			this.canEnterVentWith = "/mob/living/captive_brain=0&/obj/item/verbs/borer=0";
			this.icon_state = "brainslug";
		}

		// Function from file: borer.dm
		public Mob_Living_SimpleAnimal_Borer ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic chemtype = null;
			dynamic C = null;
			dynamic ultype = null;
			dynamic U = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.truename = "" + Rand13.Pick(new object [] { "Primary", "Secondary", "Tertiary", "Quaternary" }) + " " + Rand13.Int( 1000, 9999 );
			this.host_brain = new Mob_Living_CaptiveBrain( this );

			if ( this.name == Lang13.Initial( this, "name" ) ) {
				this.name = "" + this.name + " (" + Rand13.Int( 1, 1000 ) + ")";
				this.real_name = this.name;
			}
			this.update_verbs( 0 );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.borer_chem_types )) {
				chemtype = _a;
				
				C = Lang13.Call( chemtype );

				if ( !C.unlockable ) {
					this.avail_chems[C.name] = C;
				}
			}
			this.research = new ResearchTree_Borer( this );

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.borer_unlock_types )) {
				ultype = _b;
				
				U = Lang13.Call( ultype );

				if ( U.id != "" ) {
					this.borer_avail_unlocks.Add( U );
				}
			}
			return;
		}

		// Function from file: borer.dm
		public override dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			string response = null;

			
			if ( !Lang13.Bool( this.key ) ) {
				
				if ( user.can_reenter_corpse != 0 ) {
					response = Interface13.Alert( user, "Do you want to take it over?", "This borer has no soul", "Yes", "No" );

					if ( response == "Yes" ) {
						
						if ( !Lang13.Bool( this.key ) ) {
							this.transfer_personality( user.client );
						} else if ( Lang13.Bool( this.key ) ) {
							GlobalFuncs.to_chat( this, "<span class='notice'>Somebody jumped your claim on this borer and is already controlling it. Try another </span>" );
						}
					}
				} else if ( !( user.can_reenter_corpse != 0 ) ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>While the borer may be mindless, you have recently ghosted and thus are not allowed to take over for now.</span>" );
				}
			}
			return null;
		}

		// Function from file: borer.dm
		public override dynamic Stat(  ) {
			double timeleft = 0;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				
				if ( GlobalVars.emergency_shuttle != null ) {
					
					if ( GlobalVars.emergency_shuttle.online && GlobalVars.emergency_shuttle.location < 2 ) {
						timeleft = GlobalVars.emergency_shuttle.timeleft();

						if ( timeleft != 0 ) {
							Interface13.Stat( null, "ETA-" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) );
						}
					}
				}
				Interface13.Stat( "Chemicals", this.chemicals );
			}
			return null;
		}

		// Function from file: borer.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			string encoded_message = null;
			dynamic T = null;
			dynamic M = null;
			string controls = null;
			string rendered = null;

			message = GlobalFuncs.trim( String13.SubStr( message, 1, 1024 ) );
			message = GlobalFuncs.capitalize( message );

			if ( !Lang13.Bool( message ) ) {
				return false;
			}

			if ( this.stat == 2 ) {
				this.say_dead( message ); return false;
			}

			if ( Lang13.Bool( this.stat ) ) {
				return false;
			}

			if ( this.client != null ) {
				
				if ( ( this.client.prefs.muted & 1 ) != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You cannot speak in IC (muted).</span>" );
					return false;
				}

				if ( this.client.handle_spam_prevention( message, 1 ) ) {
					return false;
				}
			}

			if ( String13.SubStr( message, 1, 2 ) == "*" ) {
				this.emote( String13.SubStr( message, 2, 0 ) ); return false;
			}

			if ( String13.SubStr( message, 1, 2 ) == ";" ) {
				this.borer_speak( String13.SubStr( message, 2, 0 ) ); return false;
			}

			if ( !Lang13.Bool( this.host ) ) {
				GlobalFuncs.to_chat( this, "You have no host to speak to." );
				return false;
			}
			encoded_message = String13.HtmlEncode( message );
			GlobalFuncs.to_chat( this, "You drop words into " + this.host + "'s mind: <span class='borer2host'>\"" + encoded_message + "\"</span>" );
			GlobalFuncs.to_chat( this.host, "<b>Your mind speaks to you:</b> <span class='borer2host'>\"" + encoded_message + "\"</span>" );
			T = GlobalFuncs.get_turf( this );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + this.truename + " " + GlobalFuncs.key_name( this ) + " (@" + T.x + "," + T.y + "," + T.z + ") -> " + this.host + "(" + GlobalFuncs.key_name( this.host ) + ") Borer->Host Speech: " + message ) ) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( M is Mob_NewPlayer ) {
					continue;
				}

				if ( M is Mob_Dead_Observer && Lang13.Bool( M.client ) && Lang13.Bool( M.client.prefs.toggles & 64 ) ) {
					controls = new Txt( "<a href='byond://?src=" ).Ref( M ).str( ";follow2=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( "'>Follow</a>" ).ToString();

					if ( Lang13.Bool( M.client.holder ) ) {
						controls += new Txt( " | <A HREF='?_src_=holder;adminmoreinfo=" ).Ref( this ).str( "'>?</A>" ).ToString();
					}
					rendered = "<span class='thoughtspeech'>Thought-speech, <b>" + this.truename + "</b> (" + controls + ") -> <b>" + this.host + ":</b> " + encoded_message + "</span>";
					M.show_message( rendered, 2 );
				}
			}
			return false;
		}

		// Function from file: borer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic chemID = null;
			BorerChem C = null;

			
			if ( !Task13.User.check_rights( 2 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Hell no.</span>" );
				return null;
			}

			dynamic _a = href_list["act"]; // Was a switch-case, sorry for the mess.
			if ( _a=="detach" ) {
				GlobalFuncs.to_chat( this, "<span class='danger'>You feel dazed, and then appear outside of your host!</span>" );

				if ( Lang13.Bool( this.host ) ) {
					GlobalFuncs.to_chat( this.host, "<span class='info'>You no longer feel the presence in your mind!</span>" );
				}
				this.detach();
			} else if ( _a=="release" ) {
				
				if ( Lang13.Bool( this.host ) ) {
					((Mob_Living_Carbon)this.host).do_release_control();
				}
			} else if ( _a=="verbs" ) {
				this.update_verbs( !( this.host == null ) ?1:0 );
			} else if ( _a=="add_chem" ) {
				chemID = Interface13.Input( "Chem name (ex: creatine):", "Chemicals", null, null, null, InputType.Str | InputType.Null );

				if ( chemID == null ) {
					return null;
				}
				C = new BorerChem();
				C.name = chemID;
				C.cost = 0;
				this.avail_chems[C.name] = C;
				GlobalFuncs.to_chat( Task13.User, "ADDED!" );
				GlobalFuncs.to_chat( this, "<span class='info'>You learned how to secrete " + C.name + "!</span>" );
			}
			return null;
		}

		// Function from file: borer.dm
		public override string player_panel_controls( Mob user = null ) {
			string html = null;

			html = "<h2>" + this + " Controls</h2>";

			if ( Lang13.Bool( this.host ) ) {
				html += new Txt( "<b>Host:</b> " ).item( this.host ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( this.host ).str( "'>?</A> | <a href='?_src_=vars;mob_player_panel=" ).Ref( this.host ).str( "'>PP</a>)" ).ToString();
			} else {
				html += "<em>No host</em>";
			}
			html += "<ul>";

			if ( user.check_rights( 2 ) ) {
				html += new Txt( "<li><a href=\"?src=" ).Ref( this ).str( "&act=add_chem\">Give Chem</a></li>" ).ToString();
				html += new Txt( "<li><a href=\"?src=" ).Ref( this ).str( "&act=detach\">Detach</a></li>" ).ToString();
				html += new Txt( "<li><a href=\"?src=" ).Ref( this ).str( "&act=verbs\">Resend Verbs</a></li>" ).ToString();

				if ( Lang13.Bool( this.host ) ) {
					html += new Txt( "<li><a href=\"?src=" ).Ref( this ).str( "&act=release\">Release Control</a></li>" ).ToString();
				}
			}
			return html + "</ul>";
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Taste Blood", desc: "See if there's anything within the blood of your host.", group: "Alien" )]
		public void taste_blood(  ) {
			string dat = null;
			Reagent R = null;

			
			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "You cannot taste blood in your current state." );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}
			GlobalFuncs.to_chat( this, "<span class='info'>You taste the blood of your host, and process it for abnormalities.</span>" );

			if ( !( this.host.reagents == null ) ) {
				dat = "";

				if ( this.host.reagents.reagent_list.len > 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.host.reagents.reagent_list, typeof(Reagent) )) {
						R = _a;
						

						if ( R.id == "blood" ) {
							continue;
						}
						dat += "\n 	 <span class='notice'>" + R + " (" + R.volume + " units)</span>";
					}
				}

				if ( Lang13.Bool( dat ) ) {
					GlobalFuncs.to_chat( this, "<span class='notice'>Chemicals found: " + dat + "</span>" );
				} else {
					GlobalFuncs.to_chat( this, "<span class='notice'>No active chemical agents found in " + this.host + "'s blood.</span>" );
				}
			} else {
				GlobalFuncs.to_chat( this, "<span class='notice'>No significant chemical agents found in " + this.host + "'s blood.</span>" );
			}
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Analyze Health", desc: "Check the health of your host.", group: "Alien" )]
		public void analyze_host(  ) {
			GlobalFuncs.to_chat( this, "<span class='info'>You listen to the song of your host's nervous system, hunting for dischordant notes...</span>" );
			Task13.Schedule( 50, (Task13.Closure)(() => {
				GlobalFuncs.healthanalyze( this.host, this, true, true, true );
				return;
			}));
			return;
		}

		// Function from file: borer.dm
		public void forge_objectives(  ) {
			Objective_Survive survive_objective = null;

			survive_objective = new Objective_Survive();
			survive_objective.owner = this.mind;
			this.mind.objectives.Add( survive_objective );
			return;
		}

		// Function from file: borer.dm
		public void transfer_personality( Client candidate = null ) {
			
			if ( !( candidate != null ) ) {
				return;
			}
			this.mind = candidate.mob.mind;
			this.ckey = candidate.ckey;

			if ( this.mind != null ) {
				this.mind.assigned_role = "Cortical Borer";
				GlobalFuncs.to_chat( this, "<span class='danger'>You are a Cortical Borer!</span>" );
				GlobalFuncs.to_chat( this, "<span class='info'>You are a small slug-like symbiote that attaches to your host's brain.  Your only goals are to survive and procreate. However, there are those who would like to destroy you, and hosts don't take kindly to jerks.  Being as helpful to your host as possible is the best option for survival.</span>" );
				GlobalFuncs.to_chat( this, "<span class='info'>Borers can speak with other borers over the Cortical Link.  To do so, release control and use <code>say \";message\"</code>.  To communicate with your host only, speak normally.</span>" );
				GlobalFuncs.to_chat( this, "<span class='info'><b>New:</b> To get new abilities for you and your host, use <em>Evolve</em> to unlock things.  Borers are now symbiotic biological pAIs.</span>" );

				if ( GlobalVars.config.borer_takeover_immediately ) {
					GlobalFuncs.to_chat( this, "<span class='info'><b>Important:</b> While you receive full control at the start, <em>it is asked that you release control at some point so your host has a chance to play.</em>  If they misbehave, you are permitted to kill them.</span>" );
				}
			}
			return;
		}

		// Function from file: borer.dm
		public dynamic request_player(  ) {
			ByTable candidates = null;
			Mob_Dead_Observer G = null;
			dynamic i = null;

			candidates = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_active_candidates( "borer", null, "HEY KID, YOU WANNA BE A BORER?" ), typeof(Mob_Dead_Observer) )) {
				G = _a;
				

				if ( !( G.client != null ) ) {
					continue;
				}

				if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( G, "Syndicate" ) ) ) {
					continue;
				}
				candidates.Add( G );
			}

			if ( !( candidates.len != 0 ) ) {
				return 0;
			}
			GlobalFuncs.shuffle( candidates );

			foreach (dynamic _b in Lang13.Enumerate( candidates )) {
				i = _b;
				

				if ( !Lang13.Bool( i ) || !Lang13.Bool( i.client ) ) {
					continue;
				}
				return i;
			}
			return 0;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Reproduce", desc: "Spawn offspring in the form of an egg.", group: "Alien" )]
		public void reproduce(  ) {
			dynamic T = null;

			
			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "You cannot reproduce in your current state." );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}

			if ( this.busy ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are already doing something.</span>" );
				return;
			}

			if ( this.chemicals >= 100 ) {
				this.busy = true;
				GlobalFuncs.to_chat( this, "<span class='warning'>You strain, trying to push out your young...</span>" );
				this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " begins to struggle and strain!</span>" ).ToString(), null, null, new Txt( "<span class='notice'>" ).The( this ).item().str( " starts dancing.</span>" ).ToString() );
				T = GlobalFuncs.get_turf( this );

				if ( GlobalFuncs.do_after( this, T, 50 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>You twitch and quiver as you rapidly excrete an egg from your sluglike body.</span>" );
					this.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " heaves violently, expelling a small, gelatinous egg!</span>" ).ToString(), null, null, new Txt( "<span class='notice'>" ).The( this ).item().str( " starts farting a rainbow! Suddenly, a pot of gold appears.</span>" ).ToString() );
					this.chemicals -= 100;
					this.numChildren++;
					GlobalFuncs.playsound( T, "sound/effects/splat.ogg", 50, 1 );

					if ( T is Tile_Simulated ) {
						((Ent_Static)T).add_vomit_floor( null, true );
					}
					new Obj_Item_Weapon_ReagentContainers_Food_Snacks_BorerEgg( T );
				}
				this.busy = false;
			} else {
				GlobalFuncs.to_chat( this, "You do not have enough chemicals stored to reproduce." );
				return;
			}
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Hide", desc: "Allows to hide beneath tables or certain items. Toggled on or off.", group: "Alien" )]
		public override void hide( bool? h = null ) {
			
			if ( this.layer != 2.2 ) {
				this.layer = 2.2;
				GlobalFuncs.to_chat( this, "<span class='notice'>You are now hiding.</span>" );
			} else {
				this.layer = GlobalVars.MOB_LAYER;
				GlobalFuncs.to_chat( this, "<span class='notice'>You have stopped hiding.</span>" );
			}
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Crawl through Vent", desc: "Enter an air vent and crawl through the pipe system.", group: "Alien" )]
		public void ventcrawl(  ) {
			dynamic pipe = null;

			
			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "You cannot ventcrawl your current state." );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}
			pipe = this.start_ventcrawl();

			if ( Lang13.Bool( pipe ) ) {
				this.handle_ventcrawl( pipe );
			}
			return;
		}

		// Function from file: borer.dm
		public void host_emote( dynamic args = null ) {
			this.show_message( args["message"], Lang13.IntNullable( args["m_type"] ) );
			this.host_brain.show_message( args["message"], Lang13.IntNullable( args["m_type"] ) );
			return;
		}

		// Function from file: borer.dm
		public bool perform_infestation( dynamic M = null ) {
			dynamic H = null;
			Organ_External head = null;
			dynamic uid = null;
			dynamic U = null;

			
			if ( !Lang13.Bool( M ) || !( M is Mob_Living_Carbon ) ) {
				GlobalFuncs.error( "" + this + ": Unable to perform_infestation on " + M + "!" );
				return false;
			}
			this.update_verbs( 1 );
			this.host = M;
			this.loc = M;

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				head = ((Mob_Living_Carbon_Human)H).get_organ( "head" );
				head.implants.Add( this );
			}
			this.host_brain.name = M.name;
			this.host_brain.real_name = M.real_name;
			this.eh_emote = this.host.on_emote.Add( this, "host_emote" );

			foreach (dynamic _a in Lang13.Enumerate( this.research.unlocked.Copy() )) {
				uid = _a;
				
				U = this.research.get( uid );

				if ( Lang13.Bool( U ) ) {
					U.on_attached();
				}
			}

			if ( GlobalVars.config.borer_takeover_immediately ) {
				this.do_bonding( true );
			}
			return false;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Infest", desc: "Infest a suitable humanoid host.", group: "Alien" )]
		public void infest(  ) {
			ByTable choices = null;
			Mob_Living_Carbon C = null;
			dynamic M = null;
			dynamic H = null;

			
			if ( Lang13.Bool( this.host ) ) {
				GlobalFuncs.to_chat( this, "You are already within a host." );
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "You cannot infest a target in your current state." );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}
			choices = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Mob_Living_Carbon) )) {
				C = _a;
				

				if ( C.stat != 2 && this.Adjacent( C ) ) {
					choices.Add( C );
				}
			}
			M = Interface13.Input( this, "Who do you wish to infest?", null, null, null | choices, InputType.Any );

			if ( !Lang13.Bool( M ) || !( this != null ) ) {
				return;
			}

			if ( !this.Adjacent( M ) ) {
				return;
			}

			if ( Lang13.Bool( ((Mob)M).has_brain_worms() ) ) {
				GlobalFuncs.to_chat( this, "You cannot infest someone who is already infested!" );
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( ((Mob_Living_Carbon_Human)H).check_body_part_coverage( 8192 ) ) {
					GlobalFuncs.to_chat( this, "You cannot get through that host's protective gear." );
					return;
				}
			}
			GlobalFuncs.to_chat( this, "You slither up " + M + " and begin probing at their ear canal..." );
			GlobalFuncs.to_chat( M, "<span class='sinister'>You feel something slithering up your leg...</span>" );

			if ( !GlobalFuncs.do_after( this, M, 50 ) ) {
				GlobalFuncs.to_chat( this, "As " + M + " moves away, you are dislodged and fall to the ground." );
				return;
			}

			if ( !Lang13.Bool( M ) || !( this != null ) ) {
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "You cannot infest a target in your current state." );
				return;
			}

			if ( Convert.ToInt32( M.stat ) == 2 ) {
				GlobalFuncs.to_chat( this, "That is not an appropriate target." );
				return;
			}
			Interface13.Stat( null, Map13.FetchInView( this, 1 ).Contains( M ) );

			if ( Convert.ToInt32( M.stat ) == 2 ) {
				GlobalFuncs.to_chat( this, "You wiggle into " + M + "'s ear." );
				this.perform_infestation( M );
				return;
			} else {
				GlobalFuncs.to_chat( this, "They are no longer in range!" );
				return;
			}
		}

		// Function from file: borer.dm
		public void detach(  ) {
			dynamic H = null;
			dynamic head = null;
			dynamic uid = null;
			dynamic U = null;

			
			if ( Lang13.Bool( this.host ) ) {
				
				if ( this.host is Mob_Living_Carbon_Human ) {
					H = this.host;
					head = ((Mob_Living_Carbon_Human)H).get_organ( "head" );
					head.implants.Remove( this );
				}
			}
			this.loc = GlobalFuncs.get_turf( this );
			this.controlling = false;
			this.reset_view( null );
			this.machine = null;

			if ( Lang13.Bool( this.host ) ) {
				this.host.reset_view( null );
				this.host.machine = null;
				this.host.verbs -= typeof(Mob_Living_Carbon).GetMethod( "release_control" );
				this.host.verbs -= typeof(Mob_Living_Carbon).GetMethod( "punish_host" );

				foreach (dynamic _a in Lang13.Enumerate( this.research.unlocked.Copy() )) {
					uid = _a;
					
					U = this.research.get( uid );

					if ( Lang13.Bool( U ) ) {
						
						if ( U.remove_on_detach ) {
							((Unlockable)U).relock();
						}
						((Unlockable_Borer)U).on_detached();
					}
				}
				this.host.on_emote.Remove( this.eh_emote );
			}

			if ( this.host_brain != null && Lang13.Bool( this.host_brain.ckey ) ) {
				this.ckey = this.host.ckey;
				this.host.ckey = this.host_brain.ckey;
				this.host_brain.ckey = null;
				this.host_brain.name = "host brain";
				this.host_brain.real_name = "host brain";
			}
			this.host = null;
			this.update_verbs( 0 );
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Abandon Host", desc: "Slither out of your host.", group: "Alien" )]
		public void abandon_host(  ) {
			bool in_head = false;

			in_head = this.loc is Obj_Item_Weapon_Organ_Head;

			if ( !Lang13.Bool( this.host ) && !in_head ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are not inside a host body.</span>" );
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot leave your host in your current state.</span>" );
				return;
			}

			if ( this.research.unlocking && !in_head ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}

			if ( !( this != null ) ) {
				return;
			}
			GlobalFuncs.to_chat( this, "<span class='info'>You begin disconnecting from " + this.host + "'s synapses and prodding at their internal ear canal.</span>" );
			Task13.Schedule( 200, (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( this.host ) && !in_head || !( this != null ) ) {
					return;
				}

				if ( Lang13.Bool( this.stat ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You cannot abandon " + this.host + " in your current state.</span>" );
					return;
				}

				if ( in_head ) {
					GlobalFuncs.to_chat( this, new Txt( "<span class='info'>You wiggle out of the ear of " ).the( this.loc ).item().str( " and plop to the ground.</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( this, "<span class='info'>You wiggle out of " + this.host + "'s ear and plop to the ground.</span>" );
				}
				this.detach();
				return;
			}));
			return;
		}

		// Function from file: borer.dm
		public void infest_head( Obj_Item_Weapon_Organ_Head head = null ) {
			this.detach();
			head.borer = this;
			this.loc = head;
			this.update_verbs( 2 );
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Secrete Chemicals", desc: "Push some chemicals into your host's bloodstream.", group: "Alien" )]
		public void secrete_chemicals(  ) {
			dynamic chemID = null;
			dynamic chem = null;
			int max_amount = 0;
			dynamic units = null;

			
			if ( !Lang13.Bool( this.host ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are not inside a host body.</span>" );
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot secrete chemicals in your current state.</span>" );
				return;
			}

			if ( this.controlling ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're too busy controlling your host.</span>" );
				return;
			}

			if ( Convert.ToInt32( this.host.stat ) == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot do that in your host's current state.</span>" );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}
			chemID = Interface13.Input( "Select a chemical to secrete.", "Chemicals", null, null, this.avail_chems, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( chemID ) ) {
				return;
			}
			chem = this.avail_chems[chemID];
			max_amount = 50;

			if ( Convert.ToDouble( chem.cost ) > 0 ) {
				max_amount = Num13.Floor( this.chemicals / Convert.ToDouble( chem.cost ) );
			}

			if ( max_amount == 0 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You don't have enough energy to even synthesize one unit!</span>" );
				return;
			}
			units = Interface13.Input( "Enter dosage in units.\n\nMax: " + max_amount + "\nCost: " + chem.cost + "/unit", "Chemicals", null, null, null, InputType.Num );
			units = Num13.Floor( Convert.ToDouble( units ) );

			if ( Convert.ToDouble( units ) < 1 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot synthesize this little.</span>" );
				return;
			}

			if ( this.chemicals < Convert.ToDouble( chem.cost * units ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You don't have enough energy to synthesize this much!</span>" );
				return;
			}

			if ( !Lang13.Bool( this.host ) || this.controlling || !( this != null ) || Lang13.Bool( this.stat ) ) {
				return;
			}
			GlobalFuncs.to_chat( this, "<span class='info'>You squirt a measure of " + chem.name + " from your reservoirs into " + this.host + "'s bloodstream.</span>" );
			GlobalFuncs.add_gamelogs( this, new Txt( "secreted " ).item( units ).str( "U of '" ).item( chemID ).str( "' into " ).the( this.host ).item().ToString(), GlobalVars.TRUE, GlobalVars.TRUE, null, "danger" );
			((Reagents)this.host.reagents).add_reagent( chem.name, units );
			this.chemicals -= Convert.ToDouble( chem.cost * units );
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Evolve", desc: "Upgrade yourself or your host.", group: "Alien" )]
		public void evolve(  ) {
			
			if ( !Lang13.Bool( this.host ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are not inside a host body.</span>" );
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot secrete chemicals in your current state.</span>" );
				return;
			}

			if ( this.controlling ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're too busy controlling your host.</span>" );
				return;
			}

			if ( Convert.ToInt32( this.host.stat ) == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot do that in your host's current state.</span>" );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}
			this.research.display( this );
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Retard Host", desc: "Give the host a bit of brain damage.  Can be healed with alkysine.", group: "Alien" )]
		public void damage_brain(  ) {
			
			if ( !Lang13.Bool( this.host ) ) {
				GlobalFuncs.to_chat( this, "You are not inside a host body." );
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "You cannot secrete chemicals in your current state." );
				return;
			}

			if ( Convert.ToInt32( this.host.stat ) == 2 ) {
				GlobalFuncs.to_chat( this, "You cannot do that in your host's current state." );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}
			GlobalFuncs.to_chat( this, "<span class='danger'>You twitch your probosci.</span>" );
			GlobalFuncs.to_chat( this.host, "<span class='sinister'>You feel something twitch, and get a headache.</span>" );
			((Mob_Living)this.host).adjustBrainLoss( 15 );
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Kill Host", desc: "Give the host massive brain damage, killing them nearly instantly.", group: "Alien" )]
		public void kill_host(  ) {
			string reason = null;

			
			if ( !Lang13.Bool( this.host ) ) {
				GlobalFuncs.to_chat( this, "You are not inside a host body." );
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "You cannot secrete chemicals in your current state." );
				return;
			}

			if ( Convert.ToInt32( this.host.stat ) == 2 ) {
				GlobalFuncs.to_chat( this, "You cannot do that in your host's current state." );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}
			reason = GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Please enter a brief reason for killing the host, or press cancel.\n\nThis will be logged, and presented to the host.", "Oh snap", null, null, InputType.Str | InputType.Null ), 1024 );

			if ( reason == null || reason == "" ) {
				return;
			}
			GlobalFuncs.to_chat( this, "<span class='danger'>You thrash your probosci around the host's brain, triggering massive brain damage and stopping your host's heart.</span>" );
			GlobalFuncs.to_chat( this.host, "<span class='sinister'>You get a splitting headache, and then, as blackness descends upon you, you hear: " + reason + "</span>" );
			Task13.Schedule( 10, (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( this.host ) || !( this != null ) || Lang13.Bool( this.stat ) ) {
					return;
				}
				((Mob_Living)this.host).adjustBrainLoss( 100 );

				if ( Convert.ToInt32( this.host.stat ) != 2 ) {
					((Mob)this.host).death( false );
					this.host.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='red'>Killed by an unhappy borer: " + GlobalFuncs.key_name( this ) + " Reason: " + reason + "</font>" );
					GlobalFuncs.message_admins( "Borer " + GlobalFuncs.key_name_admin( this ) + " killed " + GlobalFuncs.key_name_admin( this.host ) + " for reason: " + reason );
				}
				this.detach();
				return;
			}));
			return;
		}

		// Function from file: borer.dm
		public void do_bonding( bool? rptext = null ) {
			rptext = rptext ?? false;

			
			if ( !Lang13.Bool( this.host ) || Convert.ToInt32( this.host.stat ) == 2 || !( this != null ) || this.controlling || this.research.unlocking ) {
				return;
			}
			GlobalFuncs.to_chat( this, "<span class='danger'>You plunge your probosci deep into the cortex of the host brain, interfacing directly with their nervous system.</span>" );
			GlobalFuncs.to_chat( this.host, "<span class='danger'>You feel a strange shifting sensation behind your eyes as an alien consciousness displaces yours.</span>" );
			this.host_brain.ckey = this.host.ckey;
			this.host_brain.name = this.host.real_name;
			this.host.ckey = this.ckey;
			this.controlling = true;
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Assume Control", desc: "Fully connect to the brain of your host.", group: "Alien" )]
		public void bond_brain(  ) {
			
			if ( !Lang13.Bool( this.host ) ) {
				GlobalFuncs.to_chat( this, "You are not inside a host body." );
				return;
			}

			if ( Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "You cannot do that in your current state." );
				return;
			}

			if ( Convert.ToInt32( this.host.stat ) == 2 ) {
				GlobalFuncs.to_chat( this, "You cannot do that in your host's current state." );
				return;
			}

			if ( this.research.unlocking ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are busy evolving.</span>" );
				return;
			}
			GlobalFuncs.to_chat( this, "You begin delicately adjusting your connection to the host brain..." );
			Task13.Schedule( this.host.brainloss * 5 + 300, (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( this.host ) || !( this != null ) || this.controlling ) {
					return;
				} else {
					this.do_bonding( true );
				}
				return;
			}));
			return;
		}

		// Function from file: borer.dm
		[VerbInfo( name: "Borer Speak", desc: "Communicate with your bretheren", group: "Alien" )]
		public void borer_speak( string message = null ) {
			dynamic T = null;
			dynamic M = null;
			string controls = null;

			
			if ( !Lang13.Bool( message ) ) {
				return;
			}
			T = GlobalFuncs.get_turf( this );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + this.truename + " " + GlobalFuncs.key_name( this ) + " (@" + T.x + "," + T.y + "," + T.z + ") Borer Cortical Hivemind: " + message ) ) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( M is Mob_NewPlayer ) {
					continue;
				}

				if ( M is Mob_Living_SimpleAnimal_Borer || M is Mob_Dead_Observer && Lang13.Bool( M.client ) && Lang13.Bool( M.client.prefs.toggles & 64 ) ) {
					controls = "";

					if ( M is Mob_Dead_Observer ) {
						controls = new Txt( " (<a href='byond://?src=" ).Ref( M ).str( ";follow2=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( "'>Follow</a>" ).ToString();

						if ( Lang13.Bool( M.client.holder ) ) {
							controls += new Txt( " | <A HREF='?_src_=holder;adminmoreinfo=" ).Ref( this ).str( "'>?</A>" ).ToString();
						}
						controls += ") in " + this.host;
					}
					GlobalFuncs.to_chat( M, "<span class='cortical'>Cortical link, <b>" + this.truename + "</b>" + controls + ": " + message + "</span>" );
				}
			}
			return;
		}

		// Function from file: borer.dm
		public void update_verbs( int mode = 0 ) {
			dynamic VH = null;
			ByTable verbtypes = null;
			dynamic verbtype = null;

			
			if ( this.verb_holders.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.verb_holders )) {
					VH = _a;
					
					GlobalFuncs.qdel( VH );
				}
			}
			this.verb_holders = new ByTable();
			verbtypes = new ByTable();

			switch ((int)( mode )) {
				case 1:
					verbtypes = this.attached_verbs;
					break;
				case 0:
					verbtypes = this.detached_verbs;
					break;
				case 2:
					verbtypes = this.beheaded_verbs;
					break;
			}

			foreach (dynamic _c in Lang13.Enumerate( verbtypes )) {
				verbtype = _c;
				
				this.verb_holders.Add( Lang13.Call( verbtype, this ) );
			}
			return;
		}

		// Function from file: borer.dm
		public override bool Life(  ) {
			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();

			if ( Lang13.Bool( this.host ) ) {
				
				if ( !Lang13.Bool( this.stat ) && !Lang13.Bool( this.host.stat ) ) {
					
					if ( this.chemicals < 250 ) {
						this.chemicals++;
					}

					if ( this.controlling ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							((Mob_Living)this.host).adjustBrainLoss( Rand13.Int( 1, 2 ) );
						}

						if ( Rand13.PercentChance( ((int)( this.host.brainloss / 20 )) ) ) {
							((Ent_Dynamic)this.host).say( "*" + Rand13.PickFromTable( new ByTable(new object [] { "blink", "blink_r", "choke", "aflap", "drool", "twitch", "twitch_s", "gasp" }) ) );
						}
					}
				}
			}
			return false;
		}

		// Function from file: borer.dm
		public override dynamic Login(  ) {
			base.Login();

			if ( this.mind != null ) {
				GlobalFuncs.RemoveAllFactionIcons( this.mind );
			}
			return null;
		}

		// Function from file: ventcrawl.dm
		public override bool can_ventcrawl(  ) {
			return true;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public override void suicide(  ) {
			string confirm = null;

			
			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already dead!</span>" );
				return;
			}

			if ( this.suiciding == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already committing suicide! Be patient!</span>" );
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( confirm == "Yes" ) {
				this.suiciding = true;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " suddenly starts trashing around " ).item( ( Lang13.Bool( this.host ) ? "" + this.host + "'s head" : "" ) ).str( "! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.detach();
				this.Die();
			}
			return;
		}

	}

}