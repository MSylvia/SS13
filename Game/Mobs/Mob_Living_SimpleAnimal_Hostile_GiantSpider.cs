// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_GiantSpider : Mob_Living_SimpleAnimal_Hostile {

		public dynamic icon_aggro = null;
		public int busy = 0;
		public int poison_per_bite = 5;
		public string poison_type = "toxin";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "guard";
			this.icon_dead = "guard_dead";
			this.speak_emote = new ByTable(new object [] { "chitters" });
			this.emote_hear = new ByTable(new object [] { "chitters" });
			this.speak_chance = 5;
			this.turns_per_move = 5;
			this.meat_type = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Spidermeat);
			this.response_help = "pets";
			this.response_disarm = "gently pushes aside";
			this.response_harm = "stomps";
			this.maxHealth = 200;
			this.health = 200;
			this.melee_damage_lower = 15;
			this.melee_damage_upper = 20;
			this.heat_damage_per_tick = 20;
			this.cold_damage_per_tick = 20;
			this.faction = "spiders";
			this.pass_flags = 1;
			this.move_to_delay = 6;
			this.speed = 3;
			this.attack_sound = "sound/weapons/spiderlunge.ogg";
			this.species_type = typeof(Mob_Living_SimpleAnimal_Hostile_GiantSpider);
			this.wanted_objects = new ByTable(new object [] { typeof(Obj_Machinery_Bot), typeof(Obj_Machinery_Light) });
			this.search_objects = 1;
			this.size = 2;
			this.min_oxy = 0;
			this.max_tox = false;
			this.max_co2 = 0;
			this.minbodytemp = 0;
			this.icon_state = "guard";
			this.see_in_dark = 10;
		}

		public Mob_Living_SimpleAnimal_Hostile_GiantSpider ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: base_spider.dm
		public override void LoseAggro(  ) {
			base.LoseAggro();

			if ( Lang13.Bool( this.icon_aggro ) ) {
				this.icon_state = this.icon_living;
			}
			return;
		}

		// Function from file: base_spider.dm
		public override void Aggro(  ) {
			base.Aggro();

			if ( Lang13.Bool( this.icon_aggro ) ) {
				this.icon_state = this.icon_aggro;
			}
			return;
		}

		// Function from file: base_spider.dm
		public override bool Life(  ) {
			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();

			if ( !Lang13.Bool( this.stat ) ) {
				
				if ( this.stance == 1 ) {
					
					if ( !( this.busy != 0 ) && !( this.life_tick % 100 != 0 ) ) {
						this.stop_automated_movement = true;
						this.Goto( Rand13.PickFromTable( Map13.FetchInRangeExcludeThis( this, 20 ) ), this.move_to_delay );
						Task13.Schedule( 50, (Task13.Closure)(() => {
							this.stop_automated_movement = false;
							Map13.Walk( this, 0, 0 );
							return;
						}));
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: base_spider.dm
		public override dynamic AttackingTarget(  ) {
			dynamic W = null;
			dynamic T = null;
			dynamic D = null;
			Obj_Machinery_Door_Firedoor FD = null;
			dynamic L = null;

			
			if ( this.target is Obj_Structure_Window ) {
				W = this.target;

				if ( Map13.GetDistance( this, this.target ) > 1 ) {
					return null;
				}
				T = GlobalFuncs.get_turf( W );

				if ( this.performPressureCheck( T ) != 0 ) {
					return null;
				}
			}

			if ( this.target is Obj_Machinery_Door ) {
				D = this.target;

				if ( this.CanOpenDoor( D ) ) {
					
					if ( Map13.GetDistance( this, this.target ) > 1 ) {
						return null;
					}
					this.stop_automated_movement = true;
					Map13.Walk( this, 0, 0 );
					((Ent_Static)D).visible_message( new Txt( "<span class='warning'>" ).The( D ).item().str( "'s motors whine as four arachnid claws begin trying to force it open!</span>" ).ToString() );
					Task13.Schedule( 50, (Task13.Closure)(() => {
						
						if ( this.CanOpenDoor( D ) && Rand13.PercentChance( 25 ) ) {
							((Obj_Machinery_Door)D).open( 1 );
							((Ent_Static)D).visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " forces " ).the( D ).item().str( " open!</span>" ).ToString() );

							foreach (dynamic _a in Lang13.Enumerate( D.loc, typeof(Obj_Machinery_Door_Firedoor) )) {
								FD = _a;
								

								if ( FD != null && FD.density ) {
									FD.open( 1 );
								}
							}
							this.busy = 0;
							this.stop_automated_movement = false;
							this.target = null;
						}
						return;
					}));
					return null;
				}
				this.busy = 0;
				this.stop_automated_movement = false;
				return null;
			}
			base.AttackingTarget();

			if ( this.target is Mob_Living ) {
				L = this.target;

				if ( Lang13.Bool( L.reagents ) ) {
					
					if ( Rand13.PercentChance( this.poison_per_bite ) ) {
						this.visible_message( new Txt( "<span class='warning'>" ).the( this ).item().str( " injects a powerful toxin!</span>" ).ToString() );
						((Reagents)L.reagents).add_reagent( this.poison_type, this.poison_per_bite );
					}
				}
			}
			return null;
		}

		// Function from file: base_spider.dm
		public override bool CanAttack( dynamic target = null ) {
			dynamic L = null;

			
			if ( target is Mob_Living_SimpleAnimal_Hostile_GiantSpider ) {
				return false;
			}

			if ( target is Obj_Effect ) {
				return false;
			}

			if ( target is Obj_Machinery_Door ) {
				return this.CanOpenDoor( target );
			}

			if ( target is Obj_Machinery_Light ) {
				L = target;
				return Lang13.Bool( L.status ) != true && Convert.ToInt32( L.status ) != 2;
			}
			return base.CanAttack( (object)(target) );
		}

		// Function from file: base_spider.dm
		public bool CanOpenDoor( dynamic D = null ) {
			dynamic A = null;
			dynamic T = null;

			
			if ( D is Obj_Machinery_Door_Poddoor || D is Obj_Machinery_Door_Airlock_MultiTile_Glass ) {
				return false;
			}

			if ( Convert.ToDouble( D.operating ) > 0 ) {
				return false;
			}

			if ( !D.density ) {
				return false;
			}

			if ( D is Obj_Machinery_Door_Airlock ) {
				A = D;

				if ( Lang13.Bool( A.locked ) || Lang13.Bool( A.welded ) || Lang13.Bool( A.jammed ) ) {
					return false;
				}
			}
			T = GlobalFuncs.get_turf( D );

			if ( !( this.performPressureCheck( T ) != 0 ) ) {
				return false;
			}
			return true;
		}

		// Function from file: base_spider.dm
		public double performPressureCheck( dynamic loc = null ) {
			dynamic lT = null;
			GasMixture myenv = null;
			dynamic pressure = null;
			dynamic dir = null;
			dynamic T = null;
			GasMixture environment = null;
			double pdiff = 0;

			lT = loc;

			if ( !( lT is Tile_Simulated ) || !Lang13.Bool( lT.zone ) ) {
				return 0;
			}
			myenv = ((Ent_Static)lT).return_air();
			pressure = myenv.return_pressure();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				dir = _a;
				
				T = GlobalFuncs.get_turf( Map13.GetStep( loc, Convert.ToInt32( dir ) ) );

				if ( Lang13.Bool( T ) && T is Tile_Simulated && Lang13.Bool( T.zone ) ) {
					environment = ((Ent_Static)T).return_air();
					pdiff = Math.Abs( Convert.ToDouble( pressure - environment.return_pressure() ) );

					if ( pdiff > 50 ) {
						return pdiff;
					}
				}
			}
			return 0;
		}

		// Function from file: base_spider.dm
		public override dynamic update_icons(  ) {
			dynamic _default = null;

			dynamic our_legs = null;

			_default = base.update_icons();

			if ( this.stat == 2 && this.butchering_drops != null ) {
				our_legs = Lang13.FindIn( typeof(ButcheringProduct_SpiderLegs), this.butchering_drops );

				if ( our_legs is ButcheringProduct_SpiderLegs ) {
					this.icon_state = "" + this.icon_dead + ( Convert.ToDouble( our_legs.amount ) < 8 ? our_legs.amount : "" );
				}
			}
			return _default;
		}

	}

}