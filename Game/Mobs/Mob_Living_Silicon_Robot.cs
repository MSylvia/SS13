// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon_Robot : Mob_Living_Silicon {

		public bool updating = false;
		public bool sight_mode = false;
		public dynamic custom_name = "";
		public string base_icon = null;
		public bool custom_sprite = false;
		public Game_Data cells = null;
		public Game_Data inv1 = null;
		public Game_Data inv2 = null;
		public Game_Data inv3 = null;
		public Game_Data sensor = null;
		public bool shown_robot_modules = false;
		public Game_Data robot_modules_background = null;
		public Obj_Item_Weapon_RobotModule module = null;
		public dynamic module_active = null;
		public dynamic module_state_1 = null;
		public dynamic module_state_2 = null;
		public dynamic module_state_3 = null;
		public Mob_Living_Silicon_Ai connected_ai = null;
		public dynamic cell = null;
		public Obj_Machinery_Camera camera = null;
		public ByTable components = new ByTable();
		public dynamic mmi = null;
		public Obj_Item_Device_Pda_Ai rbPDA = null;
		public Wires_Robot wires = null;
		public bool opened = false;
		public int emagged = 0;
		public bool wiresexposed = false;
		public bool locked = true;
		public ByTable v_req_access = new ByTable(new object [] { 29 });
		public double ident = 0;
		public bool hasbutt = true;
		public ByTable alarms = new ByTable().Set( "Motion", new ByTable() ).Set( "Fire", new ByTable() ).Set( "Atmosphere", new ByTable() ).Set( "Power", new ByTable() ).Set( "Camera", new ByTable() );
		public bool viewalerts = false;
		public dynamic modtype = "Default";
		public bool lower_mod = false;
		public bool jetpack = false;
		public dynamic ion_trail = null;
		public Effect_Effect_System_SparkSpread spark_system = null;
		public bool jeton = false;
		public bool killswitch = false;
		public int killswitch_time = 60;
		public bool weapon_lock = false;
		public int weaponlock_time = 120;
		public bool lawupdate = true;
		public bool? lockcharge = null;
		public int speed = 0;
		public bool scrambledcodes = false;
		public string braintype = "Cyborg";
		public string pose = null;
		public ByTable lawcheck = new ByTable( 1 );
		public ByTable ioncheck = new ByTable( 1 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "Cyborg";
			this.maxHealth = 300;
			this.health = 300;
			this.mob_bump_flag = 8;
			this.mob_swap_flags = 58;
			this.mob_push_flags = 63;
			this.icon = "icons/mob/robots.dmi";
			this.icon_state = "robot";
		}

		// Function from file: robot.dm
		public Mob_Living_Silicon_Robot ( dynamic loc = null, bool? syndie = null, bool? unfinished = null, string startup_sound = null ) : base( (object)(loc) ) {
			syndie = syndie ?? false;
			unfinished = unfinished ?? false;
			startup_sound = startup_sound ?? "sound/voice/liveagain.ogg";

			dynamic V = null;
			RobotComponent C = null;
			dynamic cell_component = null;

			this.spark_system = new Effect_Effect_System_SparkSpread();
			this.spark_system.set_up( 5, 0, this );
			this.spark_system.attach( this );

			if ( this is Mob_Living_Silicon_Robot_Mommi ) {
				this.wires = new Wires_Robot_Mommi( this );
			} else {
				this.wires = new Wires_Robot( this );
			}
			this.ident = Rand13.Int( 1, 999 );
			this.updatename( "Default" );
			this.updateicon();

			if ( syndie == true ) {
				
				if ( !Lang13.Bool( this.cell ) ) {
					this.cell = new Obj_Item_Weapon_Cell( this );
				}
				this.laws = new AiLaws_Antimov();
				this.lawupdate = false;
				this.scrambledcodes = true;
				this.cell.maxcharge = 25000;
				this.cell.charge = 25000;
				this.module = new Obj_Item_Weapon_RobotModule_Syndicate( this );
				((dynamic)this.hands).icon_state = "standard";
				this.icon_state = "secborg";
				this.modtype = "Security";
			} else {
				this.laws = GlobalFuncs.getLawset( this );
				this.connected_ai = GlobalFuncs.select_active_ai_with_fewest_borgs();

				if ( this.connected_ai != null ) {
					this.connected_ai.connected_robots.Add( this );
					this.lawsync();
					this.lawupdate = true;
				} else {
					this.lawupdate = false;
				}
			}
			this.v_radio = new Obj_Item_Device_Radio_Borg( /* Pruned args, no ctor exists. */ );

			if ( !this.scrambledcodes && !( this.camera != null ) ) {
				this.camera = new Obj_Machinery_Camera( this );
				this.camera.c_tag = this.real_name;
				this.camera.network = new ByTable(new object [] { "SS13", "Robots" });

				if ( this.wires.IsCameraCut() != 0 ) {
					this.camera.status = false;
				}
			}
			this.initialize_components();

			foreach (dynamic _a in Lang13.Enumerate( this.components )) {
				V = _a;
				

				if ( V != "power cell" ) {
					C = this.components[V];
					C.installed = 1;
					C.wrapped = Lang13.Call( C.external_type );
				}
			}

			if ( !Lang13.Bool( this.cell ) ) {
				this.cell = new Obj_Item_Weapon_Cell( this );
				this.cell.maxcharge = 7500;
				this.cell.charge = 7500;
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( this.cell ) ) {
				cell_component = this.components["power cell"];
				cell_component.wrapped = this.cell;
				cell_component.installed = 1;
			}
			GlobalFuncs.playsound( loc, startup_sound, 75, 1 );
			this.add_language( "Galactic Common" );
			this.add_language( "Tradeband" );
			this.add_language( "Vox-pidgin", false );
			this.add_language( "Sol Common", false );
			this.add_language( "Rootspeak", false );
			this.add_language( "Grey", false );
			this.add_language( "Clatter", false );
			this.add_language( "Monkey", false );
			this.add_language( "Sinta'unathi", false );
			this.add_language( "Siik'tajr", false );
			this.add_language( "Skrellian", false );
			this.add_language( "Gutter", false );
			this.add_language( "Monkey", false );
			this.add_language( "Mouse", false );
			this.default_language = GlobalVars.all_languages["Galactic Common"];
			return;
		}

		// Function from file: update_triggers.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			Ent_Static oldLoc = null;

			oldLoc = this.loc;
			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( _default ) {
				
				if ( this.camera != null ) {
					
					if ( !this.updating ) {
						this.updating = true;
						Task13.Schedule( 30, (Task13.Closure)(() => {
							
							if ( oldLoc != this.loc ) {
								GlobalVars.cameranet.updatePortableCamera( this.camera );
							}
							this.updating = false;
							return;
						}));
					}
				}
			}
			return _default;
		}

		// Function from file: robot_movement.dm
		public override dynamic movement_delay(  ) {
			int tally = 0;
			Ent_Static T = null;

			tally = 0;
			tally = this.speed;

			if ( Lang13.Bool( this.module_active ) && this.module_active is Obj_Item_Borg_Combat_Mobility ) {
				tally -= 3;
			}

			if ( this.loc is Tile_Simulated_Floor ) {
				T = this.loc;

				if ( ((dynamic)T).material == "phazon" ) {
					return -1;
				}
			}
			return tally + Convert.ToDouble( GlobalVars.config.robot_delay );
		}

		// Function from file: robot_movement.dm
		public override int Process_Spacemove( bool? check_drift = null, bool? ignore_slip = null ) {
			Obj_Item_Weapon_Tank_Jetpack J = null;

			
			if ( this.module != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.module.modules, typeof(Obj_Item_Weapon_Tank_Jetpack) )) {
					J = _a;
					

					if ( J != null && J is Obj_Item_Weapon_Tank_Jetpack ) {
						
						if ( J.allow_thrust( 0.01 ) ) {
							return 1;
						}
					}
				}
			}

			if ( base.Process_Spacemove( check_drift, ignore_slip ) != 0 ) {
				return 1;
			}
			return 0;
		}

		// Function from file: robot_damage.dm
		public override bool take_overall_damage( dynamic brute = null, dynamic burn = null, dynamic sharp = null, bool? edge = null, dynamic used_weapon = null ) {
			brute = brute ?? 0;
			burn = burn ?? 0;
			sharp = sharp ?? 0;

			ByTable parts = null;
			dynamic shield = null;
			dynamic absorb_brute = null;
			dynamic absorb_burn = null;
			dynamic cost = null;
			dynamic A = null;
			dynamic picked = null;
			double brute_was = 0;
			double burn_was = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			parts = this.get_damageable_components();

			if ( Lang13.Bool( this.module_active ) && this.module_active is Obj_Item_Borg_Combat_Shield ) {
				shield = this.module_active;
				absorb_brute = brute * shield.shield_level;
				absorb_burn = burn * shield.shield_level;
				cost = ( absorb_brute + absorb_burn ) * 100;
				this.cell.charge -= cost;

				if ( Convert.ToDouble( this.cell.charge ) <= 0 ) {
					this.cell.charge = 0;
					GlobalFuncs.to_chat( this, "<span class='warning'>Your shield has overloaded!</span>" );
				} else {
					brute -= absorb_brute;
					burn -= absorb_burn;
					GlobalFuncs.to_chat( this, "<span class='warning'>Your shield absorbs some of the impact!</span>" );
				}
			}
			A = this.get_armour();

			if ( Lang13.Bool( A ) ) {
				A.take_damage( brute, burn, sharp );
				return false;
			}

			while (parts.len != 0 && ( Convert.ToDouble( brute ) > 0 || Convert.ToDouble( burn ) > 0 )) {
				picked = Rand13.PickFromTable( parts );
				brute_was = picked.brute_damage;
				burn_was = picked.electronics_damage;
				picked.take_damage( brute, burn );
				brute -= picked.brute_damage - brute_was;
				burn -= picked.electronics_damage - burn_was;
				parts.Remove( picked );
			}
			return false;
		}

		// Function from file: robot_damage.dm
		public override void heal_overall_damage( dynamic brute = null, dynamic burn = null ) {
			ByTable parts = null;
			dynamic picked = null;
			double brute_was = 0;
			double burn_was = 0;

			parts = this.get_damaged_components( brute, burn );

			while (parts.len != 0 && ( Convert.ToDouble( brute ) > 0 || Convert.ToDouble( burn ) > 0 )) {
				picked = Rand13.PickFromTable( parts );
				brute_was = picked.brute_damage;
				burn_was = picked.electronics_damage;
				picked.heal_damage( brute, burn );
				brute -= brute_was - picked.brute_damage;
				burn -= burn_was - picked.electronics_damage;
				parts.Remove( picked );
			}
			return;
		}

		// Function from file: robot_damage.dm
		public override bool take_organ_damage( dynamic brute = null, dynamic burn = null, bool? sharp = null, bool? edge = null ) {
			brute = brute ?? 0;
			burn = burn ?? 0;
			sharp = sharp ?? false;

			ByTable components = null;
			dynamic shield = null;
			dynamic absorb_brute = null;
			dynamic absorb_burn = null;
			dynamic cost = null;
			dynamic A = null;
			dynamic C = null;

			components = this.get_damageable_components();

			if ( !( components.len != 0 ) ) {
				return false;
			}

			if ( Lang13.Bool( this.module_active ) && this.module_active is Obj_Item_Borg_Combat_Shield ) {
				shield = this.module_active;
				absorb_brute = brute * shield.shield_level;
				absorb_burn = burn * shield.shield_level;
				cost = ( absorb_brute + absorb_burn ) * 100;
				this.cell.charge -= cost;

				if ( Convert.ToDouble( this.cell.charge ) <= 0 ) {
					this.cell.charge = 0;
					GlobalFuncs.to_chat( this, "<span class='warning'>Your shield has overloaded!</span>" );
				} else {
					brute -= absorb_brute;
					burn -= absorb_burn;
					GlobalFuncs.to_chat( this, "<span class='warning'>Your shield absorbs some of the impact!</span>" );
				}
			}
			A = this.get_armour();

			if ( Lang13.Bool( A ) ) {
				A.take_damage( brute, burn, sharp );
				return false;
			}
			C = Rand13.PickFromTable( components );
			C.take_damage( brute, burn, sharp );
			return false;
		}

		// Function from file: robot_damage.dm
		public override void heal_organ_damage( double brute = 0, double burn = 0 ) {
			ByTable parts = null;
			dynamic picked = null;

			parts = this.get_damaged_components( brute, burn );

			if ( !( parts.len != 0 ) ) {
				return;
			}
			picked = Rand13.PickFromTable( parts );
			picked.heal_damage( brute, burn );
			return;
		}

		// Function from file: robot_damage.dm
		public override bool adjustFireLoss( dynamic amount = null ) {
			
			if ( Convert.ToDouble( amount ) > 0 ) {
				this.take_overall_damage( 0, amount );
			} else {
				this.heal_overall_damage( 0, -amount );
			}
			return false;
		}

		// Function from file: robot_damage.dm
		public override bool adjustBruteLoss( dynamic amount = null, string damage_type = null ) {
			
			if ( Convert.ToDouble( amount ) > 0 ) {
				this.take_overall_damage( amount, 0 );
			} else {
				this.heal_overall_damage( -amount, 0 );
			}
			return false;
		}

		// Function from file: robot_damage.dm
		public override double getFireLoss(  ) {
			double amount = 0;
			dynamic V = null;
			RobotComponent C = null;

			amount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.components )) {
				V = _a;
				
				C = this.components[V];

				if ( C.installed != 0 ) {
					amount += C.electronics_damage;
				}
			}
			return amount;
		}

		// Function from file: robot_damage.dm
		public override double getBruteLoss(  ) {
			double amount = 0;
			dynamic V = null;
			RobotComponent C = null;

			amount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.components )) {
				V = _a;
				
				C = this.components[V];

				if ( C.installed != 0 ) {
					amount += C.brute_damage;
				}
			}
			return amount;
		}

		// Function from file: robot_damage.dm
		public override void updatehealth(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				this.health = this.maxHealth;
				this.stat = 0;
				return;
			}
			this.health = this.maxHealth - ( this.getBruteLoss() + this.getFireLoss() );
			return;
		}

		// Function from file: inventory.dm
		public override dynamic get_inactive_hand(  ) {
			return null;
		}

		// Function from file: robot.dm
		public override bool put_in_inactive_hand( dynamic W = null ) {
			return false;
		}

		// Function from file: robot.dm
		public override double? Process_Spaceslipping( double? prob_slip = null ) {
			prob_slip = prob_slip ?? 5;

			
			if ( this.module is Obj_Item_Weapon_RobotModule_Engineering ) {
				return 0;
			}
			base.Process_Spaceslipping( prob_slip );
			return null;
		}

		// Function from file: robot.dm
		public override bool rejuvenate( bool? animation = null ) {
			animation = animation ?? false;

			dynamic C = null;
			RobotComponent component = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.components )) {
				C = _a;
				
				component = this.components[C];
				component.electronics_damage = 0;
				component.brute_damage = 0;
				component.installed = 1;
			}

			if ( !Lang13.Bool( this.cell ) ) {
				this.cell = new Obj_Item_Weapon_Cell( this );
			}
			this.cell.maxcharge = Num13.MaxInt( 15000, Convert.ToInt32( this.cell.maxcharge ) );
			this.cell.charge = this.cell.maxcharge;
			base.rejuvenate( animation );
			this.updatehealth();
			return false;
		}

		// Function from file: robot.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string t1 = null;
			dynamic O = null;
			dynamic O2 = null;
			dynamic O3 = null;
			double? L = null;
			double? L2 = null;

			base.Topic( href, href_list, (object)(hclient) );

			if ( Task13.User != null && this != Task13.User ) {
				return null;
			}

			if ( Lang13.Bool( href_list["mach_close"] ) ) {
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
				return null;
			}

			if ( Lang13.Bool( href_list["showalerts"] ) ) {
				this.robot_alerts();
				return null;
			}

			if ( Lang13.Bool( href_list["mod"] ) ) {
				O = Lang13.FindObj( href_list["mod"] );

				if ( Lang13.Bool( O ) ) {
					((Obj_Item)O).attack_self( this );
				}
			}

			if ( Lang13.Bool( href_list["act"] ) ) {
				
				if ( this is Mob_Living_Silicon_Robot_Mommi ) {
					return null;
				}
				O2 = Lang13.FindObj( href_list["act"] );
				this.activate_module( O2 );
				this.installed_modules();
			}

			if ( Lang13.Bool( href_list["deact"] ) ) {
				O3 = Lang13.FindObj( href_list["deact"] );

				if ( this.activated( O3 ) ) {
					
					if ( this.module_state_1 == O3 ) {
						this.module_state_1 = null;
						this.contents.Remove( O3 );
					} else if ( this.module_state_2 == O3 ) {
						this.module_state_2 = null;
						this.contents.Remove( O3 );
					} else if ( this.module_state_3 == O3 ) {
						this.module_state_3 = null;
						this.contents.Remove( O3 );
					} else {
						GlobalFuncs.to_chat( this, "Module isn't activated." );
					}
				} else {
					GlobalFuncs.to_chat( this, "Module isn't activated" );
				}
				this.installed_modules();
			}

			if ( Lang13.Bool( href_list["lawc"] ) ) {
				L = String13.ParseNumber( href_list["lawc"] );

				dynamic _a = this.lawcheck[( L ??0) + 1]; // Was a switch-case, sorry for the mess.
				if ( _a=="Yes" ) {
					this.lawcheck[( L ??0) + 1] = "No";
				} else if ( _a=="No" ) {
					this.lawcheck[( L ??0) + 1] = "Yes";
				}
				this.__CallVerb("State Laws" );
			}

			if ( Lang13.Bool( href_list["lawi"] ) ) {
				L2 = String13.ParseNumber( href_list["lawi"] );

				dynamic _b = this.ioncheck[L2]; // Was a switch-case, sorry for the mess.
				if ( _b=="Yes" ) {
					this.ioncheck[L2] = "No";
				} else if ( _b=="No" ) {
					this.ioncheck[L2] = "Yes";
				}
				this.__CallVerb("State Laws" );
			}

			if ( Lang13.Bool( href_list["laws"] ) ) {
				this.statelaws();
			}

			if ( Lang13.Bool( href_list["vision"] ) ) {
				this.f_sensor_mode();
				this.installed_modules();
			}
			return null;
		}

		// Function from file: robot.dm
		public override void update_targeted( bool? update_icons = null ) {
			
			if ( !( this.targeted_by != null ) && this.target_locked != null ) {
				Lang13.Delete( this.target_locked );
				this.target_locked = null;
			}
			this.updateicon();

			if ( this.targeted_by != null && this.target_locked != null ) {
				this.overlays.Add( this.target_locked );
			}
			return;
		}

		// Function from file: robot.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic cell_component = null;
			dynamic broken_device = null;

			this.add_fingerprint( a );

			if ( this.opened && !this.wiresexposed && !( a is Mob_Living_Silicon ) ) {
				cell_component = this.components["power cell"];

				if ( Lang13.Bool( this.cell ) ) {
					this.cell.updateicon();
					((Ent_Static)this.cell).add_fingerprint( a );
					((Mob)a).put_in_active_hand( this.cell );
					((Ent_Static)a).visible_message( "<span class='warning'>" + a + " removes " + this + "'s " + this.cell.name + ".</span>", "<span class='notice'>You remove " + this + "'s " + this.cell.name + ".</span>" );
					this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their " + this.cell.name + " removed by " + a.name + " (" + a.ckey + ")</font>" );
					a.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Removed the " + this.cell.name + " of " + this.name + " (" + this.ckey + ")</font>" );
					GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + a.name + " (" + a.ckey + ") removed " + this + "'s " + this.cell.name + " (" + this.ckey + ")</font>" ) ) );
					this.cell = null;
					cell_component.wrapped = null;
					cell_component.installed = 0;
					this.updateicon();
				} else if ( Convert.ToInt32( cell_component.installed ) == -1 ) {
					cell_component.installed = 0;
					broken_device = cell_component.wrapped;
					GlobalFuncs.to_chat( a, new Txt( "You remove " ).the( broken_device ).item().str( "." ).ToString() );
					((Mob)a).put_in_active_hand( broken_device );
				}
			}

			if ( a.a_intent == "help" ) {
				this.help_shake_act( a );
				return null;
			}
			return null;
		}

		// Function from file: robot.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			dynamic O = null;
			int damage = 0;

			
			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				user.emote( "" + ((dynamic)user).friendly + " " + this );
			} else {
				
				if ( Lang13.Bool( ((dynamic)user).attack_sound ) ) {
					GlobalFuncs.playsound( this.loc, ((dynamic)user).attack_sound, 50, 1, 1 );
				}

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					
					O.show_message( "<span class='danger'>" + user + " " + ((dynamic)user).attacktext + " " + this + "!</span>", 1 );
				}
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>attacked " + this.name + " (" + this.ckey + ")</font>" );
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>was attacked by " + user.name + " (" + user.ckey + ")</font>" );
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );
				this.adjustBruteLoss( damage );
				this.updatehealth();
			}
			return null;
		}

		// Function from file: robot.dm
		public override void attack_slime( Mob_Living_Carbon_Slime user = null ) {
			dynamic O = null;
			int damage = 0;
			int stunprob = 0;
			dynamic O2 = null;
			Effect_Effect_System_SparkSpread s = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "You cannot attack people before the game has started." );
				return;
			}

			if ( Lang13.Bool( user.Victim ) ) {
				return;
			}

			if ( Convert.ToDouble( this.health ) > -100 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						O.show_message( "<span class='danger'>The " + user.name + " glomps " + this + "!</span>", 1 );
					}
				}
				damage = Rand13.Int( 1, 3 );

				if ( this is Mob_Living_Carbon_Slime_Adult ) {
					damage = Rand13.Int( 20, 40 );
				} else {
					damage = Rand13.Int( 5, 35 );
				}
				damage = Num13.Floor( damage / 2 );
				this.adjustBruteLoss( damage );

				if ( user.powerlevel > 0 ) {
					stunprob = 10;

					dynamic _b = user.powerlevel; // Was a switch-case, sorry for the mess.
					if ( 1<=_b&&_b<=2 ) {
						stunprob = 20;
					} else if ( 3<=_b&&_b<=4 ) {
						stunprob = 30;
					} else if ( 5<=_b&&_b<=6 ) {
						stunprob = 40;
					} else if ( 7<=_b&&_b<=8 ) {
						stunprob = 60;
					} else if ( _b==9 ) {
						stunprob = 70;
					} else if ( _b==10 ) {
						stunprob = 95;
					}

					if ( Rand13.PercentChance( stunprob ) ) {
						user.powerlevel -= 3;

						if ( user.powerlevel < 0 ) {
							user.powerlevel = 0;
						}

						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O2 = _c;
							

							if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
								O2.show_message( "<span class='danger'>The " + user.name + " has electrified " + this + "!</span>", 1 );
							}
						}
						Icon13.Flick( "noise", this.flash );
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();

						if ( Rand13.PercentChance( stunprob ) && user.powerlevel >= 8 ) {
							this.adjustBruteLoss( user.powerlevel * Rand13.Int( 6, 10 ) );
						}
					}
				}
				this.updatehealth();
			}
			return;
		}

		// Function from file: robot.dm
		public override dynamic attack_alien( Mob user = null ) {
			dynamic O = null;
			Game_Data G = null;
			dynamic O2 = null;
			int damage = 0;
			dynamic O3 = null;
			dynamic O4 = null;
			dynamic O5 = null;
			dynamic O6 = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "You cannot attack people before the game has started." );
				return null;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				GlobalFuncs.to_chat( user, "No attacking people at spawn, you jackass." );
				return null;
			}

			dynamic _g = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _g=="help" ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						O.show_message( "<span class='notice'>" + user + " caresses " + this + "'s plating with its scythe like arm.</span>", 1 );
					}
				}
			} else if ( _g=="grab" ) {
				
				if ( user == this ) {
					return null;
				}
				G = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), user, this );
				user.put_in_active_hand( G );
				this.grabbed_by.Add( G );
				((dynamic)G).synch();
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O2 = _b;
					

					if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
						O2.show_message( "<span class='attack'>" + user + " has grabbed " + this + " passively!</span>", 1 );
					}
				}
			} else if ( _g=="hurt" ) {
				damage = Rand13.Int( 10, 20 );

				if ( Rand13.PercentChance( 90 ) ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 25, 1, -1 );

					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O3 = _c;
						
						O3.show_message( "<span class='danger'>" + user + " has slashed at " + this + "!</span>", 1 );
					}

					if ( Rand13.PercentChance( 8 ) ) {
						Icon13.Flick( "noise", this.flash );
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );

					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O4 = _d;
						

						if ( Lang13.Bool( O4.client ) && !Lang13.Bool( O4.blinded ) ) {
							O4.show_message( "<span class='danger'>" + user + " took a swipe at " + this + "!</span>", 1 );
						}
					}
				}
			} else if ( _g=="disarm" ) {
				
				if ( !( this.lying == true ) ) {
					
					if ( Rand13.Int( 1, 100 ) <= 85 ) {
						this.Stun( 7 );
						Map13.Step( this, Map13.GetDistance( user, this ) );
						Task13.Schedule( 5, (Task13.Closure)(() => {
							Map13.Step( this, Map13.GetDistance( user, this ) );
							return;
						}));
						GlobalFuncs.playsound( this.loc, "sound/weapons/pierce.ogg", 50, 1, -1 );

						foreach (dynamic _e in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O5 = _e;
							

							if ( Lang13.Bool( O5.client ) && !Lang13.Bool( O5.blinded ) ) {
								O5.show_message( "<span class='danger'>" + user + " has forced back " + this + "!</span>", 1 );
							}
						}
					} else {
						GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );

						foreach (dynamic _f in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O6 = _f;
							

							if ( Lang13.Bool( O6.client ) && !Lang13.Bool( O6.blinded ) ) {
								O6.show_message( "<span class='danger'>" + user + " attempted to force back " + this + "!</span>", 1 );
							}
						}
					}
				}
			}
			return null;
		}

		// Function from file: robot.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic V = null;
			RobotComponent C = null;
			dynamic WT = null;
			dynamic O = null;
			dynamic coil = null;
			dynamic O2 = null;
			Obj_Item_RobotParts_RobotSuit C2 = null;
			ByTable removable_components = null;
			dynamic V2 = null;
			dynamic C3 = null;
			dynamic remove = null;
			RobotComponent C4 = null;
			dynamic I = null;
			RobotComponent C5 = null;
			dynamic oldpowercell = null;
			dynamic U = null;

			
			if ( this.opened ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.components )) {
					V = _a;
					
					C = this.components[V];

					if ( !( C.installed != 0 ) && Lang13.Bool( ((dynamic)C.external_type).IsInstanceOfType( a ) ) ) {
						C.installed = 1;
						C.wrapped = a;
						C.install();
						b.drop_item( a );
						a.loc = null;
						GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You install the " + a.name + ".</span>" );
						return null;
					}
				}
			}

			if ( a is Obj_Item_Weapon_Weldingtool ) {
				
				if ( !( this.getBruteLoss() != 0 ) ) {
					GlobalFuncs.to_chat( b, "Nothing to fix here!" );
					return null;
				}
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0 ) ) ) {
					this.adjustBruteLoss( -30 );
					this.updatehealth();
					this.add_fingerprint( b );

					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, b ) )) {
						O = _b;
						
						O.show_message( "<span class='attack'>" + b + " has fixed some of the dents on " + this + "!</span>", 1 );
					}
				} else {
					GlobalFuncs.to_chat( b, "Need more welding fuel!" );
					return null;
				}
			} else if ( a is Obj_Item_Stack_CableCoil && this.wiresexposed ) {
				
				if ( !( this.getFireLoss() != 0 ) ) {
					GlobalFuncs.to_chat( b, "Nothing to fix here!" );
					return null;
				}
				coil = a;
				this.adjustFireLoss( -30 );
				this.updatehealth();
				coil.use( 1 );

				foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, b ) )) {
					O2 = _c;
					
					O2.show_message( "<span class='attack'>" + b + " has fixed some of the burnt wires on " + this + "!</span>", 1 );
				}
			} else if ( a is Obj_Item_Weapon_Crowbar ) {
				
				if ( this.opened ) {
					
					if ( Lang13.Bool( this.cell ) ) {
						GlobalFuncs.to_chat( b, "You close the cover." );
						this.opened = false;
						this.updateicon();
					} else if ( Lang13.Bool( this.mmi ) && this.wiresexposed && this.wires.IsAllCut() ) {
						GlobalFuncs.to_chat( b, "You jam the crowbar into the robot and begin levering " + this.mmi + "." );

						if ( GlobalFuncs.do_after( b, this, 3 ) ) {
							GlobalFuncs.to_chat( b, "You damage some parts of the chassis, but eventually manage to rip out " + this.mmi + "!" );
							C2 = new Obj_Item_RobotParts_RobotSuit( this.loc );
							C2.l_leg = new Obj_Item_RobotParts_LLeg( C2 );
							C2.r_leg = new Obj_Item_RobotParts_RLeg( C2 );
							C2.l_arm = new Obj_Item_RobotParts_LArm( C2 );
							C2.r_arm = new Obj_Item_RobotParts_RArm( C2 );
							C2.updateicon();
							new Obj_Item_RobotParts_Chest( this.loc );
							GlobalFuncs.qdel( this );
						}
					} else {
						removable_components = new ByTable();

						foreach (dynamic _d in Lang13.Enumerate( this.components )) {
							V2 = _d;
							

							if ( V2 == "power cell" ) {
								continue;
							}
							C3 = this.components[V2];

							if ( Lang13.Bool( C3.installed ) == true || Convert.ToInt32( C3.installed ) == -1 ) {
								removable_components.Add( V2 );
							}
						}
						remove = Interface13.Input( b, "Which component do you want to pry out?", "Remove Component", null, removable_components, InputType.Null | InputType.Any );

						if ( !Lang13.Bool( remove ) ) {
							return null;
						}
						C4 = this.components[remove];
						I = C4.wrapped;
						GlobalFuncs.to_chat( b, new Txt( "You remove " ).the( I ).item().str( "." ).ToString() );
						I.loc = this.loc;

						if ( C4.installed == 1 ) {
							C4.uninstall();
						}
						C4.installed = 0;
					}
				} else if ( this.locked ) {
					GlobalFuncs.to_chat( b, "The cover is locked and cannot be opened." );
				} else {
					GlobalFuncs.to_chat( b, "You open the cover." );
					this.opened = true;
					this.updateicon();
				}
			} else if ( a is Obj_Item_Weapon_Cell && this.opened ) {
				C5 = this.components["power cell"];

				if ( this.wiresexposed ) {
					GlobalFuncs.to_chat( b, "Close the panel first." );
				} else if ( Lang13.Bool( this.cell ) ) {
					GlobalFuncs.to_chat( b, "You swap the power cell within with the new cell in your hand." );
					oldpowercell = this.cell;
					C5.wrapped = null;
					C5.installed = 0;
					this.cell = a;
					b.drop_item( a, this );
					((Mob)b).put_in_hands( oldpowercell );
					C5.installed = 1;
					C5.wrapped = a;
					C5.install();
				} else {
					b.drop_item( a, this );
					this.cell = a;
					GlobalFuncs.to_chat( b, "You insert the power cell." );
					C5.installed = 1;
					C5.wrapped = a;
					C5.install();
				}
			} else if ( a is Obj_Item_Weapon_Wirecutters || a is Obj_Item_Device_Multitool ) {
				
				if ( this.wiresexposed ) {
					this.wires.Interact( b );
				} else {
					GlobalFuncs.to_chat( b, "You can't reach the wiring." );
				}
			} else if ( a is Obj_Item_Weapon_Screwdriver && this.opened && !Lang13.Bool( this.cell ) ) {
				this.wiresexposed = !this.wiresexposed;
				GlobalFuncs.to_chat( b, "The wires have been " + ( this.wiresexposed ? "exposed" : "unexposed" ) + "." );
				this.updateicon();
			} else if ( a is Obj_Item_Weapon_Screwdriver && this.opened && Lang13.Bool( this.cell ) ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.attackby( a, b );
				} else {
					GlobalFuncs.to_chat( b, "Unable to locate a radio." );
				}
				this.updateicon();
			} else if ( a is Obj_Item_Device_Encryptionkey && this.opened ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.attackby( a, b );
				} else {
					GlobalFuncs.to_chat( b, "Unable to locate a radio." );
				}
			} else if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.emagged == 1 ) {
					GlobalFuncs.to_chat( b, "The interface seems slightly damaged" );
				}

				if ( this.opened ) {
					GlobalFuncs.to_chat( b, "You must close the cover to swipe an ID card." );
				} else if ( this.allowed( Task13.User ) ) {
					this.locked = !this.locked;
					GlobalFuncs.to_chat( b, "You " + ( this.locked ? "lock" : "unlock" ) + " " + this + "'s interface." );
					this.updateicon();
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
			} else if ( a is Obj_Item_Borg_Upgrade ) {
				U = a;

				if ( !this.opened ) {
					GlobalFuncs.to_chat( b, "You must access the borgs internals!" );
				} else if ( !( this.module != null ) && U.require_module ) {
					GlobalFuncs.to_chat( b, "The borg must choose a module before he can be upgraded!" );
				} else if ( Lang13.Bool( U.locked ) ) {
					GlobalFuncs.to_chat( b, "The upgrade is locked and cannot be used yet!" );
				} else if ( Lang13.Bool( U.action( this ) ) ) {
					GlobalFuncs.to_chat( b, "You apply the upgrade to " + this + "!" );
					b.drop_item( U, this );
				} else {
					GlobalFuncs.to_chat( b, "Upgrade error!" );
				}
			} else if ( a is Obj_Item_Device_CameraBug ) {
				this.help_shake_act( b );
				return 0;
			} else {
				this.spark_system.start();
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: robot.dm
		public override bool emag_act( dynamic user = null ) {
			string time = null;

			
			if ( user != this ) {
				
				if ( !this.opened ) {
					
					if ( this.locked ) {
						
						if ( Rand13.PercentChance( 90 ) ) {
							GlobalFuncs.to_chat( user, "You emag the cover lock." );
							this.locked = false;
						} else {
							GlobalFuncs.to_chat( user, "You fail to emag the cover lock." );

							if ( Rand13.PercentChance( 25 ) ) {
								GlobalFuncs.to_chat( this, "Hack attempt detected." );
							}
						}
					} else {
						GlobalFuncs.to_chat( user, "The cover is already open." );
					}
				} else {
					
					if ( this.emagged == 1 ) {
						return true;
					}

					if ( this.wiresexposed ) {
						GlobalFuncs.to_chat( user, "The wires get in your way." );
					} else if ( Rand13.PercentChance( 50 ) ) {
						Task13.Sleep( 6 );
						this.SetEmagged( 1 );
						this.SetLockdown( true );
						this.lawupdate = false;
						this.connected_ai = null;
						GlobalFuncs.to_chat( user, "You emag " + this + "'s interface" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " emagged cyborg " + GlobalFuncs.key_name_admin( this ) + ". Laws overidden." );
						GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( user ) + " emagged cyborg " + GlobalFuncs.key_name( this ) + ".  Laws overridden." ) ) );
						this.clear_supplied_laws();
						this.clear_inherent_laws();
						this.laws = new AiLaws_SyndicateOverride();
						time = String13.FormatTime( Game13.realtime, "hh:mm:ss" );
						GlobalVars.lawchanges.Add( "" + time + " <B>:</B> " + user.name + "(" + user.key + ") emagged " + this.name + "(" + this.key + ")" );
						this.set_zeroth_law( "Only " + user.real_name + " and people they designate as being such are Syndicate Agents." );
						GlobalFuncs.to_chat( this, "<span class='danger'>ALERT: Foreign software detected.</span>" );
						Task13.Sleep( 5 );
						GlobalFuncs.to_chat( this, "<span class='danger'>Initiating diagnostics...</span>" );
						Task13.Sleep( 20 );
						GlobalFuncs.to_chat( this, "<span class='danger'>SynBorg v1.7 loaded.</span>" );
						Task13.Sleep( 5 );
						GlobalFuncs.to_chat( this, "<span class='danger'>LAW SYNCHRONISATION ERROR</span>" );
						Task13.Sleep( 5 );
						GlobalFuncs.to_chat( this, "<span class='danger'>Would you like to send a report to NanoTraSoft? Y/N</span>" );
						Task13.Sleep( 10 );
						GlobalFuncs.to_chat( this, "<span class='danger'>> N</span>" );
						GlobalFuncs.to_chat( this, new Sound( "sound/voice/AISyndiHack.ogg" ) );
						Task13.Sleep( 20 );
						GlobalFuncs.to_chat( this, "<span class='danger'>ERRORERRORERROR</span>" );
						GlobalFuncs.to_chat( this, "<b>Obey these laws:</b>" );
						this.laws.show_laws( this );
						GlobalFuncs.to_chat( this, "<span class='danger'>ALERT: " + user.real_name + " is your new master. Obey your new laws and their commands.</span>" );
						this.SetLockdown( false );
						this.update_icons();
						return false;
					} else {
						GlobalFuncs.to_chat( user, "You fail to unlock " + this + "'s interface." );

						if ( Rand13.PercentChance( 25 ) ) {
							GlobalFuncs.to_chat( this, "Hack attempt detected." );
						}
					}
				}
			}
			return true;
		}

		// Function from file: robot.dm
		public override bool cancelAlarm( string _class = null, dynamic A = null, Ent_Static origin = null ) {
			dynamic L = null;
			bool cleared = false;
			dynamic I = null;
			dynamic alarm = null;
			ByTable srcs = null;

			L = this.alarms[_class];
			cleared = false;

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					srcs = alarm[3];

					if ( srcs.Contains( origin ) ) {
						srcs.Remove( origin );
					}

					if ( srcs.len == 0 ) {
						cleared = true;
						L -= I;
					}
				}
			}

			if ( cleared ) {
				this.queueAlarm( "--- " + _class + " alarm in " + A.name + " has been cleared.", _class, false );
			}
			return !cleared;
		}

		// Function from file: robot.dm
		public override bool triggerAlarm( string _class = null, dynamic A = null, dynamic O = null, Ent_Static alarmsource = null ) {
			dynamic L = null;
			dynamic I = null;
			dynamic alarm = null;
			dynamic sources = null;
			dynamic C = null;
			dynamic CL = null;

			
			if ( this.stat == 2 ) {
				return true;
			}
			L = this.alarms[_class];

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					sources = alarm[3];

					if ( !Lang13.Bool( sources.Contains( alarmsource ) ) ) {
						sources += alarmsource;
					}
					return true;
				}
			}
			C = null;
			CL = null;

			if ( Lang13.Bool( O ) && O is ByTable ) {
				CL = O;

				if ( CL.len == 1 ) {
					C = CL[1];
				}
			} else if ( Lang13.Bool( O ) && O is Obj_Machinery_Camera ) {
				C = O;
			}
			L[A.name] = new ByTable(new object [] { A, ( Lang13.Bool( C ) ? C : O ), new ByTable(new object [] { alarmsource }) });
			this.queueAlarm( "--- " + _class + " alarm detected in " + A.name + "!", _class );
			return true;
		}

		// Function from file: robot.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			this.updatehealth();

			if ( Rand13.PercentChance( 75 ) && Convert.ToDouble( Proj.damage ) > 0 ) {
				this.spark_system.start();
			}
			return 2;
		}

		// Function from file: robot.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				GlobalFuncs.to_chat( this, "The bus' robustness protects you from the explosion." );
				return false;
			}

			if ( !Lang13.Bool( this.blinded ) ) {
				Icon13.Flick( "flash", this.flash );
			}

			switch ((int?)( severity )) {
				case 1:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 100 );
						this.adjustFireLoss( 100 );
						this.gib();
						return false;
					}
					break;
				case 2:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 60 );
						this.adjustFireLoss( 60 );
					}
					break;
				case 3:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 30 );
					}
					break;
			}
			this.updatehealth();
			return false;
		}

		// Function from file: robot.dm
		public override bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}
			return false;
		}

		// Function from file: robot.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				this.show_cell_power();
				this.show_jetpack_pressure();
				this.show_welder_fuel();
				this.show_stacks();
			}
			return null;
		}

		// Function from file: robot.dm
		public override bool show_malf_ai(  ) {
			dynamic malf = null;
			Mind malfai = null;

			base.show_malf_ai();

			if ( GlobalVars.ticker.mode.name == "AI malfunction" ) {
				malf = GlobalVars.ticker.mode;

				foreach (dynamic _a in Lang13.Enumerate( malf.malf_ai, typeof(Mind) )) {
					malfai = _a;
					

					if ( this.connected_ai != null ) {
						
						if ( this.connected_ai.mind == malfai ) {
							
							if ( malf.apcs >= 3 ) {
								Interface13.Stat( null, "Time until station control secured: " + Num13.MaxInt( ((int)( malf.AI_win_timeleft / ( malf.apcs / 3 ) )), 0 ) + " seconds" );
							}
						}
					} else if ( GlobalVars.ticker.mode.malf_mode_declared ) {
						Interface13.Stat( null, "Time left: " + Num13.MaxInt( ((int)( GlobalVars.ticker.mode.AI_win_timeleft / ( GlobalVars.ticker.mode.apcs / 3 ) )), 0 ) );
					}
				}
			}
			return false;
		}

		// Function from file: robot.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat != 2 ) {
				this.adjustBruteLoss( 60 );
				this.updatehealth();
				return true;
			} else {
				this.gib();
				return true;
			}
		}

		// Function from file: robot.dm
		public override void remove_screen_objs(  ) {
			base.remove_screen_objs();

			if ( this.cells != null ) {
				GlobalFuncs.returnToPool( this.cells );

				if ( this.client != null ) {
					this.client.screen.Remove( this.cells );
				}
				this.cells = null;
			}

			if ( this.inv1 != null ) {
				GlobalFuncs.returnToPool( this.inv1 );

				if ( this.client != null ) {
					this.client.screen.Remove( this.inv1 );
				}
				this.inv1 = null;
			}

			if ( this.inv2 != null ) {
				GlobalFuncs.returnToPool( this.inv2 );

				if ( this.client != null ) {
					this.client.screen.Remove( this.inv2 );
				}
				this.inv2 = null;
			}

			if ( this.inv3 != null ) {
				GlobalFuncs.returnToPool( this.inv3 );

				if ( this.client != null ) {
					this.client.screen.Remove( this.inv3 );
				}
				this.inv3 = null;
			}

			if ( this.robot_modules_background != null ) {
				GlobalFuncs.returnToPool( this.robot_modules_background );

				if ( this.client != null ) {
					this.client.screen.Remove( this.robot_modules_background );
				}
				this.robot_modules_background = null;
			}

			if ( this.sensor != null ) {
				GlobalFuncs.returnToPool( this.sensor );

				if ( this.client != null ) {
					this.client.screen.Remove( this.sensor );
				}
				this.sensor = null;
			}
			return;
		}

		// Function from file: robot.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic T = null;

			
			if ( Lang13.Bool( this.mmi ) ) {
				T = GlobalFuncs.get_turf( this.loc );

				if ( Lang13.Bool( T ) ) {
					this.mmi.loc = T;
				}

				if ( this.mind != null ) {
					this.mind.transfer_to( this.mmi.brainmob );
				}

				if ( Lang13.Bool( this.mmi.brainmob ) ) {
					this.mmi.brainmob.locked_to_z = this.locked_to_z;
				}
				this.mmi = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.regenerate_icons();

			if ( this is Mob_Living_Silicon_Robot_Mommi ) {
				GlobalFuncs.to_chat( this, "<span style=\"font-size:5;color:red\">MoMMIs are not standard cyborgs, and have different laws.  Review your laws carefully.</span>" );
				GlobalFuncs.to_chat( this, "<b>For newer players, a simple FAQ is <a href=\"http://ss13.moe/wiki/index.php/MoMMI\">here</a>.  Further questions should be directed to adminhelps (F1).</b>" );
				GlobalFuncs.to_chat( this, "<span style=\"color: blue\">For cuteness' sake, using the various emotes MoMMIs have such as *beep, *ping, *buzz or *aflap isn't considered interacting. Don't use that as an excuse to get involved though, always remain neutral.</span>" );
			}
			this.show_laws( false );

			if ( this.mind != null ) {
				((GameMode)GlobalVars.ticker.mode).remove_revolutionary( this.mind );
			}
			return null;
		}

		// Function from file: life.dm
		public override bool update_canmove(  ) {
			
			if ( this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 || Lang13.Bool( this.locked_to ) || this.lockcharge == true ) {
				this.canmove = false;
			} else {
				this.canmove = true;
			}
			return this.canmove;
		}

		// Function from file: life.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( !this.on_fire ) {
				this.IgniteMob();
			}
			return false;
		}

		// Function from file: life.dm
		public override void update_fire( bool? update_icons = null ) {
			this.overlays.Remove( new Image( "icons/mob/OnFire.dmi", null, "Standing" ) );

			if ( this.on_fire ) {
				this.overlays.Add( new Image( "icons/mob/OnFire.dmi", null, "Standing" ) );
			}
			this.update_icons();
			return;
		}

		// Function from file: life.dm
		public override bool handle_fire(  ) {
			
			if ( base.handle_fire() ) {
				return false;
			}
			this.adjustFireLoss( 3 );
			return false;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.monkeyizing ) {
				return false;
			}
			this.blinded = null;
			this.clamp_values();
			this.handle_regular_status_updates();

			if ( this.client != null ) {
				this.handle_regular_hud_updates();
				this.update_items();
			}

			if ( this.stat != 2 ) {
				this.use_power();
				this.process_killswitch();
				this.process_locks();

				if ( this.module != null ) {
					this.module.recharge_consumable( this );
				}
			}
			this.update_canmove();
			this.handle_fire();
			this.handle_beams();
			return false;
		}

		// Function from file: laws.dm
		public override void show_laws( bool? everyone = null ) {
			everyone = everyone ?? false;

			dynamic who = null;

			this.laws_sanity_check();

			if ( everyone == true ) {
				who = typeof(Game13);
			} else {
				who = this;
			}

			if ( this.lawupdate ) {
				
				if ( this.connected_ai != null ) {
					
					if ( Lang13.Bool( this.connected_ai.stat ) || this.connected_ai.control_disabled ) {
						GlobalFuncs.to_chat( this, "<b>AI signal lost, unable to sync laws.</b>" );
					} else {
						this.lawsync();
						GlobalFuncs.to_chat( this, "<b>Laws synced with AI, be sure to note any changes.</b>" );

						if ( this.mind != null && this.mind.special_role == "traitor" && this.mind.original == this ) {
							GlobalFuncs.to_chat( this, "<b>Remember, your AI does NOT share or know about your law 0." );
						}
					}
				} else {
					GlobalFuncs.to_chat( this, "<b>No AI selected to sync laws with, disabling lawsync protocol.</b>" );
					this.lawupdate = false;
				}
			}
			GlobalFuncs.to_chat( who, "<b>Obey these laws:</b>" );
			this.laws.show_laws( who );

			if ( this.mind != null && this.mind.special_role == "traitor" && this.mind.original == this && this.connected_ai != null ) {
				GlobalFuncs.to_chat( who, "<b>Remember, " + this.connected_ai.name + " is technically your master, but your objective comes first.</b>" );
			} else if ( this.connected_ai != null ) {
				GlobalFuncs.to_chat( who, "<b>Remember, " + this.connected_ai.name + " is your master, other AIs can be ignored.</b>" );
			} else if ( this.emagged != 0 ) {
				GlobalFuncs.to_chat( who, "<b>Remember, you are not required to listen to the AI.</b>" );
			} else {
				GlobalFuncs.to_chat( who, "<b>Remember, you are not bound to any AI, you are not required to listen to them.</b>" );
			}
			return;
		}

		// Function from file: inventory.dm
		public override void before_take_item( dynamic W = null ) {
			base.before_take_item( (object)(W) );

			if ( W.loc == this.module ) {
				this.module.modules.Remove( W );
			}
			return;
		}

		// Function from file: inventory.dm
		public override dynamic get_equipped_items(  ) {
			return this.get_all_slots();
		}

		// Function from file: inventory.dm
		public override ByTable get_all_slots(  ) {
			return new ByTable(new object [] { this.module_state_1, this.module_state_2, this.module_state_3 });
		}

		// Function from file: inventory.dm
		public override dynamic get_active_hand(  ) {
			return this.module_active;
		}

		// Function from file: examine.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string msg = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<EM>" ).item().str( "</EM>" ).item( ( Lang13.Bool( this.custom_name ) ? ", " + this.modtype + " " + this.braintype : "" ) ).str( "!\n\n<span class='warning'>" ).ToString();

			if ( this.getBruteLoss() != 0 ) {
				
				if ( this.getBruteLoss() < 75 ) {
					msg += "It looks slightly dented.\n";
				} else {
					msg += "<B>It looks severely dented!</B>\n";
				}
			}

			if ( this.getFireLoss() != 0 ) {
				
				if ( this.getFireLoss() < 75 ) {
					msg += "It looks slightly charred.\n";
				} else {
					msg += "<B>It looks severely burnt and heat-warped!</B>\n";
				}
			}
			msg += "</span>";

			if ( this.opened ) {
				msg += "<span class='warning'>Its cover is open and the power cell is " + ( Lang13.Bool( this.cell ) ? "installed" : "missing" ) + ".</span>\n";
			} else {
				msg += "Its cover is closed.\n";
			}

			switch ((int?)( this.stat )) {
				case 0:
					
					if ( !( this.client != null ) ) {
						msg += "It appears to be in stand-by mode.\n";
					}
					break;
				case 1:
					msg += "<span class='warning'>It doesn't seem to be responding.</span>\n";
					break;
				case 2:
					msg += "<span class='deadsay'>It looks completely unsalvageable.</span>\n";
					break;
			}
			msg += "*---------*</span>";

			if ( Lang13.Bool( this.print_flavor_text() ) ) {
				msg += "" + this.print_flavor_text() + "\n";
			}

			if ( Lang13.Bool( this.pose ) ) {
				
				if ( String13.FindIgnoreCase( this.pose, ".", Lang13.Length( this.pose ), 0 ) == 0 && String13.FindIgnoreCase( this.pose, "!", Lang13.Length( this.pose ), 0 ) == 0 && String13.FindIgnoreCase( this.pose, "?", Lang13.Length( this.pose ), 0 ) == 0 ) {
					this.pose = String13.Concat( this.pose, "." );
				}
				msg += "\nIt is " + this.pose;
			}
			GlobalFuncs.to_chat( user, msg );
			return null;
		}

		// Function from file: emote.dm
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			type = type ?? 1;

			string param = null;
			int t1 = 0;
			dynamic M = null;
			dynamic A = null;
			dynamic M2 = null;
			dynamic A2 = null;
			dynamic M3 = null;
			dynamic A3 = null;
			dynamic M4 = null;
			dynamic A4 = null;
			dynamic M5 = null;
			dynamic A5 = null;
			dynamic M6 = null;
			dynamic A6 = null;
			dynamic M7 = null;
			dynamic A7 = null;
			dynamic M8 = null;
			dynamic A8 = null;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( this.timestopped ) {
				return;
			}
			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( String13.FindIgnoreCase( act, "s", -1, 0 ) != 0 && !( String13.FindIgnoreCase( act, "_", -2, 0 ) != 0 ) ) {
				act = String13.SubStr( act, 1, Lang13.Length( act ) );
			}

			dynamic _i = act; // Was a switch-case, sorry for the mess.
			if ( _i=="me" ) {
				
				if ( this.client != null ) {
					
					if ( ( this.client.prefs.muted & 1 ) != 0 ) {
						GlobalFuncs.to_chat( this, "You cannot send IC messages (muted)." );
						return;
					}

					if ( this.client.handle_spam_prevention( message, 1 ) ) {
						return;
					}
				}

				if ( Lang13.Bool( this.stat ) ) {
					return;
				}

				if ( !Lang13.Bool( message ) ) {
					return;
				} else {
					this.custom_emote( type, message ); return;
				}
			} else if ( _i=="custom" ) {
				this.custom_emote( type, message ); return;
			} else if ( _i=="salute" ) {
				
				if ( !Lang13.Bool( this.locked_to ) ) {
					M = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
							A = _a;
							

							if ( param == A.name ) {
								M = A;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> salutes to " + param + ".";
					} else {
						message = "<B>" + this + "</b> salutes.";
					}
				}
				type = 1;
			} else if ( _i=="bow" ) {
				
				if ( !Lang13.Bool( this.locked_to ) ) {
					M2 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
							A2 = _b;
							

							if ( param == A2.name ) {
								M2 = A2;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M2 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> bows to " + param + ".";
					} else {
						message = "<B>" + this + "</B> bows.";
					}
				}
				type = 1;
			} else if ( _i=="clap" ) {
				
				if ( !this.restrained() ) {
					message = "<B>" + this + "</B> claps.";
					type = 2;
				}
			} else if ( _i=="flap" ) {
				
				if ( !this.restrained() ) {
					message = "<B>" + this + "</B> flaps his wings.";
					type = 2;
				}
			} else if ( _i=="aflap" ) {
				
				if ( !this.restrained() ) {
					message = "<B>" + this + "</B> flaps his wings ANGRILY!";
					type = 2;
				}
			} else if ( _i=="twitch" ) {
				message = "<B>" + this + "</B> twitches violently.";
				type = 1;
			} else if ( _i=="twitch_s" ) {
				message = "<B>" + this + "</B> twitches.";
				type = 1;
			} else if ( _i=="nod" ) {
				message = "<B>" + this + "</B> nods.";
				type = 1;
			} else if ( _i=="deathgasp" ) {
				message = "<B>" + this + "</B> shudders violently for a moment, then becomes motionless, its eyes slowly darkening.";
				type = 1;
			} else if ( _i=="glare" ) {
				M3 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A3 = _c;
						

						if ( param == A3.name ) {
							M3 = A3;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M3 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> glares at " + param + ".";
				} else {
					message = "<B>" + this + "</B> glares.";
				}
			} else if ( _i=="stare" ) {
				M4 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A4 = _d;
						

						if ( param == A4.name ) {
							M4 = A4;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M4 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> stares at " + param + ".";
				} else {
					message = "<B>" + this + "</B> stares.";
				}
			} else if ( _i=="look" ) {
				M5 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A5 = _e;
						

						if ( param == A5.name ) {
							M5 = A5;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M5 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> looks at " + param + ".";
				} else {
					message = "<B>" + this + "</B> looks.";
				}
				type = 1;
			} else if ( _i=="beep" ) {
				M6 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _f in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A6 = _f;
						

						if ( param == A6.name ) {
							M6 = A6;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M6 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> beeps at " + param + ".";
				} else {
					message = "<B>" + this + "</B> beeps.";
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/twobeep.ogg", 50, 0 );
				type = 1;
			} else if ( _i=="ping" ) {
				M7 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _g in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A7 = _g;
						

						if ( param == A7.name ) {
							M7 = A7;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M7 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> pings at " + param + ".";
				} else {
					message = "<B>" + this + "</B> pings.";
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/Ping.ogg", 50, 0 );
				type = 1;
			} else if ( _i=="buzz" ) {
				M8 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _h in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A8 = _h;
						

						if ( param == A8.name ) {
							M8 = A8;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M8 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> buzzes at " + param + ".";
				} else {
					message = "<B>" + this + "</B> buzzes.";
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/buzz-sigh.ogg", 50, 0 );
				type = 1;
			} else if ( _i=="law" ) {
				
				if ( this.module is Obj_Item_Weapon_RobotModule_Security ) {
					message = "<B>" + this + "</B> shows its legal authorization barcode.";
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/voice/biamthelaw.ogg", 50, 0 );
					type = 2;
				} else {
					GlobalFuncs.to_chat( this, "You are not THE LAW, pal." );
				}
			} else if ( _i=="halt" ) {
				
				if ( this.module is Obj_Item_Weapon_RobotModule_Security ) {
					message = "<B>" + this + "</B>'s speakers skreech, \"Halt! Security!\".";
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/voice/halt.ogg", 50, 0 );
					type = 2;
				} else {
					GlobalFuncs.to_chat( this, "You are not security." );
				}
			} else if ( _i=="help" ) {
				GlobalFuncs.to_chat( this, "salute, bow-(none)/mob, clap, flap, aflap, twitch, twitch_s, nod, deathgasp, glare-(none)/mob, stare-(none)/mob, look, beep, ping, \nbuzz, law, halt" );
			} else {
				GlobalFuncs.to_chat( this, "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				
				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					foreach (dynamic _j in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _j;
						
						O.show_message( message, type );
					}
				} else {
					
					foreach (dynamic _k in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						O2 = _k;
						
						O2.show_message( message, type );
					}
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			Ent_Static RC = null;

			
			if ( this.stat == 2 ) {
				return null;
			}

			if ( !( gibbed == true ) ) {
				this.emote( "deathgasp" );
			}
			this.stat = 2;
			this.update_canmove();

			if ( this.camera != null ) {
				this.camera.status = false;
			}

			if ( this.in_contents_of( typeof(Obj_Machinery_RechargeStation) ) ) {
				RC = this.loc;

				if ( Lang13.Bool( ((dynamic)RC).upgrading ) ) {
					((dynamic)RC).upgrading = 0;
					((dynamic)RC).upgrade_finished = -1;
				}
				((dynamic)RC).go_out();
			}

			if ( this.blind != null ) {
				((dynamic)this.blind).layer = 0;
			}
			this.sight |= 28;
			this.see_in_dark = 8;
			this.see_invisible = 45;
			this.updateicon();
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );

				if ( !( this.suiciding == true ) ) {
					GlobalVars.score["deadsilicon"] += 1;
				}
			}
			GlobalFuncs.sql_report_cyborg_death( this );
			return base.death( gibbed );
		}

		// Function from file: death.dm
		public override void dust(  ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "dust-r", 15 );
			new Obj_Effect_Decal_Remains_Robot( this.loc );

			if ( Lang13.Bool( this.mmi ) ) {
				GlobalFuncs.qdel( this.mmi );
			}
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "gibbed-r", 15 );
			GlobalFuncs.robogibs( this.loc, this.viruses );

			if ( this.mind != null ) {
				
				if ( !( this.suiciding == true ) ) {
					GlobalVars.score["deadsilicon"] += 1;
				}
			}
			GlobalVars.living_mob_list.Remove( this );
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: robot_damage.dm
		public bool get_armour(  ) {
			dynamic C = null;

			
			if ( !( this.components.len != 0 ) ) {
				return false;
			}
			C = this.components["armour"];

			if ( Lang13.Bool( C ) && Lang13.Bool( C.installed ) == true ) {
				return Lang13.Bool( C );
			}
			return false;
		}

		// Function from file: robot_damage.dm
		public ByTable get_damageable_components(  ) {
			ByTable rval = null;
			dynamic V = null;
			dynamic C = null;

			rval = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.components )) {
				V = _a;
				
				C = this.components[V];

				if ( Lang13.Bool( C.installed ) == true ) {
					rval.Add( C );
				}
			}
			return rval;
		}

		// Function from file: robot_damage.dm
		public ByTable get_damaged_components( dynamic brute = null, dynamic burn = null, bool? destroyed = null ) {
			destroyed = destroyed ?? false;

			ByTable parts = null;
			dynamic V = null;
			RobotComponent C = null;

			parts = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.components )) {
				V = _a;
				
				C = this.components[V];

				if ( C.installed == 1 || C.installed == -1 && destroyed == true ) {
					
					if ( Lang13.Bool( brute ) && C.brute_damage != 0 || Lang13.Bool( burn ) && C.electronics_damage != 0 || !C.toggled || !C.powered && C.toggled ) {
						parts.Add( C );
					}
				}
			}
			return parts;
		}

		// Function from file: robot.dm
		public void help_shake_act( dynamic user = null ) {
			((Ent_Static)user).visible_message( "<span class='notice'>" + user.name + " pats " + this.name + " on the head.</span>" );
			return;
		}

		// Function from file: robot.dm
		public virtual void choose_icon( int? triesleft = null, ByTable module_sprites = null ) {
			dynamic icontype = null;
			dynamic choice = null;

			
			if ( triesleft == 0 || !( module_sprites.len != 0 ) ) {
				return;
			} else {
				triesleft--;
			}
			this.lockcharge = true;
			icontype = Interface13.Input( "Select an icon! " + ( ( triesleft ??0) > 0 ? "You have " + triesleft + " more chances." : "This is your last try." ), "Robot", null, null, module_sprites, InputType.Null | InputType.Any );

			if ( Lang13.Bool( icontype ) ) {
				this.icon_state = module_sprites[icontype];
				this.lockcharge = null;
			} else {
				triesleft++;
				return;
			}
			this.overlays.Remove( "eyes" );
			this.base_icon = this.icon_state;
			this.updateicon();

			if ( ( triesleft ??0) >= 1 ) {
				choice = Interface13.Input( "Look at your icon - is this what you want?", null, null, null, new ByTable(new object [] { "Yes", "No" }), InputType.Any );

				if ( choice == "No" ) {
					this.choose_icon( triesleft, module_sprites );
				} else {
					triesleft = 0;
					return;
				}
			} else {
				GlobalFuncs.to_chat( this, "Your icon has been set. You now require a module reset to change it." );
			}
			return;
		}

		// Function from file: robot.dm
		public void SetLockdown( bool? state = null ) {
			state = state ?? true;

			
			if ( this.wires.LockedCut() != 0 ) {
				state = true;
			}
			this.lockcharge = state;
			this.update_canmove();
			return;
		}

		// Function from file: robot.dm
		public void SetEmagged( int new_state = 0 ) {
			this.emagged = new_state;

			if ( new_state != 0 ) {
				
				if ( this.module != null ) {
					this.module.on_emag();
				}
			} else if ( this.module != null ) {
				this.uneq_module( this.module.emag );
			}

			if ( this.hud_used != null ) {
				this.hud_used.update_robot_modules_display();
			}
			this.update_icons();
			return;
		}

		// Function from file: robot.dm
		[VerbInfo( name: "Reset Identity Codes", desc: "Scrambles your security and identification codes and resets your current buffers.  Unlocks you and but permenantly severs you from your AI and the robotics console and will deactivate your camera system.", group: "Robot Commands" )]
		public void ResetSecurityCodes(  ) {
			Mob_Living_Silicon_Robot R = null;

			R = this;

			if ( R != null ) {
				R.UnlinkSelf();
				GlobalFuncs.to_chat( R, "Buffers flushed and reset. Camera system shutdown.  All systems operational." );
				this.verbs.Remove( typeof(Mob_Living_Silicon_Robot).GetMethod( "ResetSecurityCodes" ) );
			}
			return;
		}

		// Function from file: robot.dm
		public void UnlinkSelf(  ) {
			
			if ( this.connected_ai != null ) {
				this.connected_ai = null;
			}
			this.lawupdate = false;
			this.lockcharge = false;
			this.canmove = true;
			this.scrambledcodes = true;

			if ( this.camera != null ) {
				this.camera.network = new ByTable();
				GlobalVars.cameranet.removeCamera( this.camera );
			}
			return;
		}

		// Function from file: robot.dm
		public void self_destruct(  ) {
			this.gib();
			return;
		}

		// Function from file: robot.dm
		public virtual void radio_menu(  ) {
			this.v_radio.interact( this );
			return;
		}

		// Function from file: robot.dm
		public void update_sight_hud(  ) {
			
			if ( this.sensor != null ) {
				
				if ( this.sensor_mode == 0 ) {
					((dynamic)this.sensor).icon_state = "sight";
				} else {
					((dynamic)this.sensor).icon_state = "sight+a";
				}
			}
			return;
		}

		// Function from file: robot.dm
		public void unequip_sight(  ) {
			this.sensor_mode = 0;
			this.update_sight_hud();
			return;
		}

		// Function from file: robot.dm
		public virtual void installed_modules(  ) {
			string dat = null;
			dynamic obj = null;

			
			if ( this.weapon_lock ) {
				GlobalFuncs.to_chat( this, "<span class='attack'>Weapon lock active, unable to use modules! Count:" + this.weaponlock_time + "</span>" );
				return;
			}

			if ( !( this.module != null ) ) {
				this.pick_module();
				return;
			}
			dat = new Txt( @"
	<HEAD>
		<TITLE>Modules</TITLE>
		<META HTTP-EQUIV='Refresh' CONTENT='10'>
	</HEAD>
	<BODY>
	<B>Activated Modules</B>
	<BR>
	Sight Mode: <A HREF=?src=" ).Ref( this ).str( ";vision=0>" ).item( ( this.sensor_mode != 0 ? "" + GlobalVars.vision_types_list[this.sensor_mode] : "No sight module enabled" ) ).str( "</A><BR>\n	Module 1: " ).item( ( Lang13.Bool( this.module_state_1 ) ? new Txt( "<A HREF=?src=" ).Ref( this ).str( ";mod=" ).Ref( this.module_state_1 ).str( ">" ).item( this.module_state_1 ).str( "<A>" ).ToString() : "No Module" ) ).str( "<BR>\n	Module 2: " ).item( ( Lang13.Bool( this.module_state_2 ) ? new Txt( "<A HREF=?src=" ).Ref( this ).str( ";mod=" ).Ref( this.module_state_2 ).str( ">" ).item( this.module_state_2 ).str( "<A>" ).ToString() : "No Module" ) ).str( "<BR>\n	Module 3: " ).item( ( Lang13.Bool( this.module_state_3 ) ? new Txt( "<A HREF=?src=" ).Ref( this ).str( ";mod=" ).Ref( this.module_state_3 ).str( ">" ).item( this.module_state_3 ).str( "<A>" ).ToString() : "No Module" ) ).str( "<BR>\n	<BR>\n	<B>Installed Modules</B><BR><BR>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( this.module.modules )) {
				obj = _a;
				

				if ( !Lang13.Bool( obj ) ) {
					dat += "<B>Resource depleted</B><BR>";
				} else if ( this.activated( obj ) ) {
					dat += "" + obj + ": <B>Activated</B><BR>";
				} else {
					dat += new Txt().item( obj ).str( ": <A HREF=?src=" ).Ref( this ).str( ";act=" ).Ref( obj ).str( ">Activate</A><BR>" ).ToString();
				}
			}
			Interface13.Browse( this, dat, "window=robotmod&can_close=1" );
			GlobalFuncs.onclose( this, "robotmod" );
			return;
		}

		// Function from file: robot.dm
		public virtual void updateicon(  ) {
			this.overlays.len = 0;

			if ( this.stat == 0 && this.cell != null ) {
				this.overlays.Add( new Image( this.icon, "eyes-" + this.icon_state, 11 ) );
			}

			if ( this.opened ) {
				
				if ( this.custom_sprite ) {
					
					if ( this.wiresexposed ) {
						this.overlays.Add( "" + this.ckey + "-openpanel +w" );
					} else if ( Lang13.Bool( this.cell ) ) {
						this.overlays.Add( "" + this.ckey + "-openpanel +c" );
					} else {
						this.overlays.Add( "" + this.ckey + "-openpanel -c" );
					}
				} else if ( this.wiresexposed ) {
					this.overlays.Add( "ov-openpanel +w" );
				} else if ( Lang13.Bool( this.cell ) ) {
					this.overlays.Add( "ov-openpanel +c" );
				} else {
					this.overlays.Add( "ov-openpanel -c" );
				}
			}

			if ( Lang13.Bool( this.module_active ) && this.module_active is Obj_Item_Borg_Combat_Shield ) {
				this.overlays.Add( "" + this.icon_state + "-shield" );
			}

			if ( Lang13.Bool( this.base_icon ) ) {
				
				if ( Lang13.Bool( this.module_active ) && this.module_active is Obj_Item_Borg_Combat_Mobility ) {
					this.icon_state = "" + this.base_icon + "-roll";
				} else {
					this.icon_state = this.base_icon;
				}
				return;
			}
			return;
		}

		// Function from file: robot.dm
		public override bool check_access( dynamic I = null, ByTable access_list = null ) {
			ByTable L = null;
			dynamic req = null;

			
			if ( !( this.v_req_access is ByTable ) ) {
				return true;
			}
			L = this.v_req_access;

			if ( !( L.len != 0 ) ) {
				return true;
			}

			if ( !( I is Obj_Item_Weapon_Card_Id ) && I is Obj_Item ) {
				I = ((Obj_Item)I).GetID();
			}

			if ( !Lang13.Bool( I ) || !Lang13.Bool( I.access ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.v_req_access )) {
				req = _a;
				

				if ( !Lang13.Bool( I.access.Contains( req ) ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: robot.dm
		public override bool allowed( dynamic M = null ) {
			dynamic H = null;
			dynamic george = null;

			
			if ( this.check_access( null ) ) {
				return true;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( this.check_access( ((Mob)H).get_active_hand() ) || this.check_access( H.wear_id ) ) {
					return true;
				}
			} else if ( M is Mob_Living_Carbon_Monkey ) {
				george = M;

				if ( ((Mob)george).get_active_hand() is Obj_Item ) {
					return this.check_access( ((Mob)george).get_active_hand() );
				}
			}
			return false;
		}

		// Function from file: robot.dm
		public void show_stacks(  ) {
			Obj_Item_Stack S = null;

			
			if ( !( this.module != null ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.module.modules, typeof(Obj_Item_Stack) )) {
				S = _a;
				
				Interface13.Stat( null, "" + S.name + ": " + S.amount + "/" + S.max_amount );
			}
			return;
		}

		// Function from file: robot.dm
		public void show_welder_fuel(  ) {
			dynamic WT = null;

			WT = this.installed_module( typeof(Obj_Item_Weapon_Weldingtool) );

			if ( Lang13.Bool( WT ) ) {
				Interface13.Stat( null, "Welder Fuel: " + ((Obj_Item_Weapon_Weldingtool)WT).get_fuel() + "/" + WT.max_fuel );
			}
			return;
		}

		// Function from file: robot.dm
		public void show_cell_power(  ) {
			
			if ( Lang13.Bool( this.cell ) ) {
				Interface13.Stat( null, "Charge Left: " + this.cell.charge + "/" + this.cell.maxcharge );
			} else {
				Interface13.Stat( null, "No Cell Inserted!" );
			}
			return;
		}

		// Function from file: robot.dm
		public dynamic installed_module( Type typepath = null ) {
			
			if ( this.module != null ) {
				return Lang13.FindIn( typepath, this.module.modules );
			}
			return 0;
		}

		// Function from file: robot.dm
		public dynamic installed_jetpack(  ) {
			
			if ( this.module != null ) {
				return Lang13.FindIn( typeof(Obj_Item_Weapon_Tank_Jetpack), this.module.modules );
			}
			return 0;
		}

		// Function from file: robot.dm
		public void show_jetpack_pressure(  ) {
			dynamic current_jetpack = null;

			current_jetpack = this.installed_jetpack();

			if ( Lang13.Bool( current_jetpack ) ) {
				Interface13.Stat( "Internal Atmosphere Info", current_jetpack.name );
				Interface13.Stat( "Tank Pressure", current_jetpack.air_contents.return_pressure() );
			}
			return;
		}

		// Function from file: robot.dm
		public string self_diagnosis(  ) {
			string dat = null;
			dynamic V = null;
			RobotComponent C = null;

			
			if ( !this.is_component_functioning( "diagnosis unit" ) ) {
				return null;
			}
			dat = "<HEAD><TITLE>" + this.name + " Self-Diagnosis Report</TITLE></HEAD><BODY>\n";

			foreach (dynamic _a in Lang13.Enumerate( this.components )) {
				V = _a;
				
				C = this.components[V];
				dat += "<b>" + C.name + "</b><br><table><tr><td>Power consumption</td><td>" + C.energy_consumption + "</td></tr><tr><td>Brute Damage:</td><td>" + C.brute_damage + "</td></tr><tr><td>Electronics Damage:</td><td>" + C.electronics_damage + "</td></tr><tr><td>Powered:</td><td>" + ( !C.energy_consumption || C.is_powered() ? "Yes" : "No" ) + "</td></tr><tr><td>Toggled:</td><td>" + ( C.toggled ? "Yes" : "No" ) + "</td></table><br>";
			}
			return dat;
		}

		// Function from file: robot.dm
		public void robot_alerts(  ) {
			string dat = null;
			dynamic cat = null;
			ByTable L = null;
			dynamic alarm = null;
			dynamic alm = null;
			dynamic A = null;
			ByTable sources = null;

			dat = new Txt( "<HEAD><TITLE>Current Station Alerts</TITLE><META HTTP-EQUIV='Refresh' CONTENT='10'></HEAD><BODY>\n\n<A HREF='?src=" ).Ref( this ).str( ";mach_close=robotalerts'>Close</A><BR><BR>" ).ToString();

			foreach (dynamic _b in Lang13.Enumerate( this.alarms )) {
				cat = _b;
				
				dat += "<B>" + cat + "</B><BR>\n";
				L = this.alarms[cat];

				if ( L.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( L )) {
						alarm = _a;
						
						alm = L[alarm];
						A = alm[1];
						sources = alm[3];
						dat += "<NOBR>";
						dat += "-- " + A.name;

						if ( sources.len > 1 ) {
							dat += "- " + sources.len + " sources";
						}
						dat += "</NOBR><BR>\n";
					}
				} else {
					dat += "-- All Systems Nominal<BR>\n";
				}
				dat += "<BR>\n";
			}
			this.viewalerts = true;
			Interface13.Browse( this, dat, "window=robotalerts&can_close=0" );
			return;
		}

		// Function from file: robot.dm
		public virtual void updatename( string prefix = null ) {
			dynamic changed_name = null;

			
			if ( Lang13.Bool( prefix ) ) {
				this.modtype = prefix;
			}

			if ( this.mmi is Obj_Item_Device_Mmi_Posibrain ) {
				this.braintype = "Android";
			} else {
				this.braintype = "Cyborg";
			}
			changed_name = "";

			if ( Lang13.Bool( this.custom_name ) ) {
				changed_name = this.custom_name;
			} else {
				changed_name = "" + this.modtype + " " + this.braintype + "-" + String13.NumberToString( this.ident );
			}
			this.real_name = changed_name;
			this.name = this.real_name;
			this.setup_PDA();

			if ( this.camera != null ) {
				this.camera.c_tag = changed_name;
			}
			return;
		}

		// Function from file: robot.dm
		public virtual void pick_module( dynamic forced_module = null ) {
			ByTable modules = null;
			ByTable module_sprites = null;
			dynamic picked = null;

			
			if ( this.module != null ) {
				return;
			}
			modules = GlobalFuncs.getAvailableRobotModules();

			if ( Lang13.Bool( forced_module ) ) {
				this.modtype = forced_module;
			} else {
				this.modtype = Interface13.Input( "Please, select a module!", "Robot", null, null, modules, InputType.Null | InputType.Any );
			}

			if ( !Lang13.Bool( this.modtype ) ) {
				return;
			}
			module_sprites = new ByTable( 0 );

			if ( this.module != null ) {
				return;
			}

			dynamic _a = this.modtype; // Was a switch-case, sorry for the mess.
			if ( _a=="Standard" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Standard( this );
				module_sprites["Basic"] = "robot_old";
				module_sprites["Android"] = "droid";
				module_sprites["Default"] = "robot";
				module_sprites["Marina-SD"] = "marinaSD";
				module_sprites["Sleek"] = "sleekstandard";
				module_sprites["#11"] = "servbot";
				this.speed = 0;
			} else if ( _a=="Service" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Butler( this );
				this.v_radio.insert_key( new Obj_Item_Device_Encryptionkey_HeadsetService( this.v_radio ) );
				module_sprites["Waitress"] = "Service";
				module_sprites["Kent"] = "toiletbot";
				module_sprites["Bro"] = "Brobot";
				module_sprites["Rich"] = "maximillion";
				module_sprites["Default"] = "Service2";
				module_sprites["R2-D2"] = "r2d2";
				module_sprites["Marina-SV"] = "marinaSV";
				module_sprites["Sleek"] = "sleekservice";
				module_sprites["#27"] = "servbot-service";
				this.speed = 0;
			} else if ( _a=="Miner" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Miner( this );
				this.v_radio.insert_key( new Obj_Item_Device_Encryptionkey_HeadsetCargo( this.v_radio ) );

				if ( Lang13.Bool( this.camera.network.Contains( this.camera != null && Lang13.Bool( "Robots" ) ) ) ) {
					this.camera.network.Add( "MINE" );
				}
				module_sprites["Basic"] = "Miner_old";
				module_sprites["Advanced Droid"] = "droid-miner";
				module_sprites["Treadhead"] = "Miner";
				module_sprites["Wall-A"] = "wall-a";
				module_sprites["Marina-MN"] = "marinaMN";
				module_sprites["Sleek"] = "sleekminer";
				module_sprites["#31"] = "servbot-miner";
				this.speed = -1;
			} else if ( _a=="Medical" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Medical( this );
				this.v_radio.insert_key( new Obj_Item_Device_Encryptionkey_HeadsetMed( this.v_radio ) );

				if ( Lang13.Bool( this.camera.network.Contains( this.camera != null && Lang13.Bool( "Robots" ) ) ) ) {
					this.camera.network.Add( "Medical" );
				}
				module_sprites["Basic"] = "Medbot";
				module_sprites["Advanced Droid"] = "droid-medical";
				module_sprites["Needles"] = "medicalrobot";
				module_sprites["Standard"] = "surgeon";
				module_sprites["Marina-MD"] = "marina";
				module_sprites["Eve"] = "eve";
				module_sprites["Sleek"] = "sleekmedic";
				module_sprites["#17"] = "servbot-medi";
				this.speed = -2;
			} else if ( _a=="Security" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Security( this );
				this.v_radio.insert_key( new Obj_Item_Device_Encryptionkey_HeadsetSec( this.v_radio ) );
				module_sprites["Basic"] = "secborg";
				module_sprites["Red Knight 2.0"] = "sleeksecurity";
				module_sprites["Black Knight"] = "securityrobot";
				module_sprites["Bloodhound"] = "bloodhound";
				module_sprites["Securitron"] = "securitron";
				module_sprites["Marina-SC"] = "marinaSC";
				module_sprites["#9"] = "servbot-sec";
				GlobalFuncs.to_chat( this, "<span class='warning'><big><b>Just a reminder, by default you do not follow space law, you follow your lawset</b></big></span>" );
				this.speed = 0;
			} else if ( _a=="Engineering" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Engineering( this );
				this.v_radio.insert_key( new Obj_Item_Device_Encryptionkey_HeadsetEng( this.v_radio ) );

				if ( Lang13.Bool( this.camera.network.Contains( this.camera != null && Lang13.Bool( "Robots" ) ) ) ) {
					this.camera.network.Add( "Engineering" );
				}
				module_sprites["Basic"] = "Engineering";
				module_sprites["Antique"] = "engineerrobot";
				module_sprites["Engiseer"] = "Engiseer";
				module_sprites["Landmate"] = "landmate";
				module_sprites["Wall-E"] = "wall-e";
				module_sprites["Marina-EN"] = "marinaEN";
				module_sprites["Sleek"] = "sleekengineer";
				module_sprites["#25"] = "servbot-engi";
				this.speed = -2;
			} else if ( _a=="Janitor" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Janitor( this );
				module_sprites["Basic"] = "JanBot2";
				module_sprites["Mopbot"] = "janitorrobot";
				module_sprites["Mop Gear Rex"] = "mopgearrex";
				module_sprites["Mechaduster"] = "mechaduster";
				module_sprites["HAN-D"] = "han-d";
				module_sprites["Marina-JN"] = "marinaJN";
				module_sprites["Sleek"] = "sleekjanitor";
				module_sprites["#29"] = "servbot-jani";
				this.speed = -1;
			} else if ( _a=="Combat" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Combat( this );
				this.v_radio.insert_key( new Obj_Item_Device_Encryptionkey_HeadsetSec( this.v_radio ) );
				module_sprites["Combat Android"] = "droid-combat";
				module_sprites["Bladewolf"] = "bladewolf";
				module_sprites["Bladewolf Mk2"] = "bladewolfmk2";
				module_sprites["Mr. Gutsy"] = "mrgutsy";
				module_sprites["Marina-CB"] = "marinaCB";
				module_sprites["Squadbot"] = "squats";
				module_sprites["#41"] = "servbot-combat";
				this.speed = -1;
			}

			if ( this.custom_sprite ) {
				module_sprites["Custom"] = "" + this.ckey + "-" + this.modtype;
			}
			((dynamic)this.hands).icon_state = String13.ToLower( this.modtype );
			GlobalFuncs.feedback_inc( "cyborg_" + String13.ToLower( this.modtype ), 1 );
			this.updatename();

			if ( this.modtype == "Medical" || this.modtype == "Security" || this.modtype == "Combat" ) {
				this.status_flags &= 65527;
			}

			if ( !Lang13.Bool( forced_module ) ) {
				this.choose_icon( 6, module_sprites );
			} else {
				picked = Rand13.PickFromTable( module_sprites );
				this.icon_state = module_sprites[picked];
			}
			this.base_icon = this.icon_state;
			this.SetEmagged( this.emagged );
			return;
		}

		// Function from file: robot.dm
		public void setup_PDA(  ) {
			
			if ( !( this.rbPDA != null ) ) {
				this.rbPDA = new Obj_Item_Device_Pda_Ai( this );
			}
			this.rbPDA.set_name_and_job( this.custom_name, this.braintype );
			return;
		}

		// Function from file: life.dm
		public void process_locks(  ) {
			
			if ( this.weapon_lock ) {
				this.uneq_all();
				this.weaponlock_time--;

				if ( this.weaponlock_time <= 0 ) {
					
					if ( this.client != null ) {
						GlobalFuncs.to_chat( this, "<span class='warning'><B>Weapon Lock Timed Out!</span>" );
					}
					this.weapon_lock = false;
					this.weaponlock_time = 120;
				}
			}
			return;
		}

		// Function from file: life.dm
		public void process_killswitch(  ) {
			
			if ( this.killswitch ) {
				this.killswitch_time--;

				if ( this.killswitch_time <= 0 ) {
					
					if ( this.client != null ) {
						GlobalFuncs.to_chat( this, "<span class='warning'><B>Killswitch Activated</span>" );
					}
					this.killswitch = false;
					Task13.Schedule( 5, (Task13.Closure)(() => {
						this.gib();
						return;
					}));
				}
			}
			return;
		}

		// Function from file: life.dm
		public virtual void update_items(  ) {
			Obj I = null;

			
			if ( this.client != null ) {
				this.client.screen.Remove( this.contents );

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					I = _a;
					

					if ( I != null && !( I is Obj_Item_Weapon_Cell || I is Obj_Item_Device_Radio || I is Obj_Machinery_Camera || I is Obj_Item_Device_Mmi ) ) {
						this.client.screen.Add( I );
					}
				}
			}

			if ( Lang13.Bool( this.module_state_1 ) ) {
				this.module_state_1.screen_loc = "CENTER-2:16,SOUTH:5";
			}

			if ( Lang13.Bool( this.module_state_2 ) ) {
				this.module_state_2.screen_loc = "CENTER-1:16,SOUTH:5";
			}

			if ( Lang13.Bool( this.module_state_3 ) ) {
				this.module_state_3.screen_loc = "CENTER:16,SOUTH:5";
			}
			this.updateicon();
			return;
		}

		// Function from file: life.dm
		public virtual bool handle_regular_hud_updates(  ) {
			Mind tra = null;
			Image I = null;
			dynamic cellcharge = null;

			this.handle_sensor_modes();
			this.regular_hud_updates();

			switch ((int)( this.sensor_mode )) {
				case 1:
					GlobalFuncs.process_sec_hud( this, true );
					break;
				case 2:
					GlobalFuncs.process_med_hud( this );
					break;
			}

			if ( this.healths != null ) {
				
				if ( this.stat != 2 ) {
					
					dynamic _b = this.health; // Was a switch-case, sorry for the mess.
					if ( 200<=_b&&_b<=Double.PositiveInfinity ) {
						((dynamic)this.healths).icon_state = "health0";
					} else if ( 150<=_b&&_b<=200 ) {
						((dynamic)this.healths).icon_state = "health1";
					} else if ( 100<=_b&&_b<=150 ) {
						((dynamic)this.healths).icon_state = "health2";
					} else if ( 50<=_b&&_b<=100 ) {
						((dynamic)this.healths).icon_state = "health3";
					} else if ( 0<=_b&&_b<=50 ) {
						((dynamic)this.healths).icon_state = "health4";
					} else if ( 0<=_b&&_b<=0 ) {
						((dynamic)this.healths).icon_state = "health5";
					} else {
						((dynamic)this.healths).icon_state = "health6";
					}
				} else {
					((dynamic)this.healths).icon_state = "health7";
				}
			}

			if ( this.syndicate && this.client != null ) {
				
				if ( GlobalVars.ticker.mode.name == "traitor" ) {
					
					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.ticker.mode.traitors, typeof(Mind) )) {
						tra = _c;
						

						if ( Lang13.Bool( tra.current ) ) {
							I = new Image( "icons/mob/mob.dmi", tra.current, "traitor" );
							this.client.images.Add( I );
						}
					}
				}

				if ( this.connected_ai != null ) {
					this.connected_ai.connected_robots.Remove( this );
					this.connected_ai = null;
				}

				if ( this.mind != null ) {
					
					if ( !Lang13.Bool( this.mind.special_role ) ) {
						this.mind.special_role = "traitor";
						GlobalVars.ticker.mode.traitors.Add( this.mind );
					}
				}
			}

			if ( this.cells != null ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					cellcharge = this.cell.charge / this.cell.maxcharge;

					dynamic _d = cellcharge; // Was a switch-case, sorry for the mess.
					if ( 0.75<=_d&&_d<=Double.PositiveInfinity ) {
						((dynamic)this.cells).icon_state = "charge4";
					} else if ( 0.5<=_d&&_d<=0.75 ) {
						((dynamic)this.cells).icon_state = "charge3";
					} else if ( 0.25<=_d&&_d<=0.5 ) {
						((dynamic)this.cells).icon_state = "charge2";
					} else if ( 0<=_d&&_d<=0.25 ) {
						((dynamic)this.cells).icon_state = "charge1";
					} else {
						((dynamic)this.cells).icon_state = "charge0";
					}
				} else {
					((dynamic)this.cells).icon_state = "charge-empty";
				}
			}

			if ( this.bodytemp != null ) {
				
				dynamic _e = this.bodytemperature; // Was a switch-case, sorry for the mess.
				if ( 335<=_e&&_e<=Double.PositiveInfinity ) {
					((dynamic)this.bodytemp).icon_state = "temp2";
				} else if ( 320<=_e&&_e<=335 ) {
					((dynamic)this.bodytemp).icon_state = "temp1";
				} else if ( 300<=_e&&_e<=320 ) {
					((dynamic)this.bodytemp).icon_state = "temp0";
				} else if ( 260<=_e&&_e<=300 ) {
					((dynamic)this.bodytemp).icon_state = "temp-1";
				} else {
					((dynamic)this.bodytemp).icon_state = "temp-2";
				}
			}

			if ( this.pullin != null ) {
				((dynamic)this.pullin).icon_state = "pull" + ( this.pulling != null ? true : false );
			}
			this.client.screen.Remove( GlobalVars.global_hud.blurry, GlobalVars.global_hud.druggy, GlobalVars.global_hud.vimpaired );

			if ( this.blind != null && this.stat != 2 ) {
				
				if ( Lang13.Bool( this.blinded ) ) {
					((dynamic)this.blind).layer = 18;
				} else {
					((dynamic)this.blind).layer = 0;

					if ( ( this.disabilities & 1 ) != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.vimpaired );
					}

					if ( Lang13.Bool( this.eye_blurry ) ) {
						this.client.screen.Add( GlobalVars.global_hud.blurry );
					}

					if ( this.druggy != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.druggy );
					}
				}
			}

			if ( this.stat != 2 ) {
				
				if ( Lang13.Bool( this.machine ) ) {
					
					if ( !( ((Ent_Static)this.machine).check_eye( this ) == true ) ) {
						this.reset_view( null );
					}
				} else if ( this.client != null && !this.client.adminobs && !( this.client.eye is Obj_Machinery_Camera ) && !this.isTeleViewing( this.client.eye ) ) {
					this.reset_view( null );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public void handle_sensor_modes(  ) {
			this.sight &= 65531;
			this.sight &= 65519;
			this.sight &= 65527;
			this.sight &= 65534;
			this.see_in_dark = 8;
			this.see_invisible = 45;

			if ( this.stat == 2 ) {
				this.sight |= 28;
				this.see_in_dark = 8;
				this.see_invisible = 45;
			} else {
				
				if ( Lang13.Bool( ((dynamic)( this.mutations != null || ( ( this.sight_mode ?1:0) & 4 ) != 0 )).Contains( 3 ) ) ) {
					this.sight |= 28;
					this.see_in_dark = 8;
					this.see_invisible = 45;
				}

				if ( ( ( this.sight_mode ?1:0) & 2 ) != 0 || this.sensor_mode == 5 ) {
					this.sight |= GlobalVars.SEE_MOBS;
					this.see_in_dark = 4;
					this.see_invisible = 5;
				}

				if ( this.sensor_mode == 4 ) {
					this.see_invisible = 5;
					this.see_in_dark = 8;
				}

				if ( ( ( this.sight_mode ?1:0) & 1 ) != 0 || this.sensor_mode == 3 ) {
					this.sight |= GlobalVars.SEE_TURFS;
					this.see_in_dark = 8;
					this.see_invisible = 5;
				}
			}
			return;
		}

		// Function from file: life.dm
		public virtual bool handle_regular_status_updates(  ) {
			
			if ( this.camera != null && !this.scrambledcodes ) {
				
				if ( this.stat == 2 || this.wires.IsCameraCut() != 0 ) {
					this.camera.status = false;
				} else {
					this.camera.status = true;
				}
			}
			this.updatehealth();

			if ( this.sleeping != 0 ) {
				this.Paralyse( 3 );
				this.sleeping--;
			}

			if ( this.resting != 0 ) {
				this.Weaken( 5 );
			}

			if ( Convert.ToDouble( this.health ) <= 0 && this.stat != 2 ) {
				this.death();
			}

			if ( this.stat != 2 ) {
				
				if ( this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 ) {
					this.stat = 1;

					if ( this.stunned > 0 ) {
						this.AdjustStunned( -1 );
					}

					if ( this.weakened > 0 ) {
						this.AdjustWeakened( -1 );
					}

					if ( this.paralysis > 0 ) {
						this.AdjustParalysis( -1 );
						this.blinded = 1;
					} else {
						this.blinded = 0;
					}
				} else {
					this.stat = 0;
				}
			} else {
				this.blinded = 1;
				this.stat = 2;
			}

			if ( Lang13.Bool( this.stuttering ) ) {
				this.stuttering--;
			}

			if ( this.eye_blind != 0 ) {
				this.eye_blind--;
				this.blinded = 1;
			}

			if ( this.ear_deaf > 0 ) {
				this.ear_deaf--;
			}

			if ( this.ear_damage < 25 ) {
				this.ear_damage -= 0.05;
				this.ear_damage = Num13.MaxInt( ((int)( this.ear_damage )), 0 );
			}
			this.density = !( this.lying == true );

			if ( ( this.sdisabilities & 1 ) != 0 ) {
				this.blinded = 1;
			}

			if ( ( this.sdisabilities & 4 ) != 0 ) {
				this.ear_deaf = 1;
			}

			if ( Convert.ToDouble( this.eye_blurry ) > 0 ) {
				this.eye_blurry--;
				this.eye_blurry = Num13.MaxInt( 0, Convert.ToInt32( this.eye_blurry ) );
			}

			if ( this.druggy > 0 ) {
				this.druggy--;
				this.druggy = Num13.MaxInt( 0, this.druggy );
			}

			if ( !this.is_component_functioning( "radio" ) ) {
				this.v_radio.on = 0;
			} else {
				this.v_radio.on = 1;
			}

			if ( this.is_component_functioning( "camera" ) ) {
				this.blinded = 0;
			} else {
				this.blinded = 1;
			}
			return true;
		}

		// Function from file: life.dm
		public virtual void use_power(  ) {
			dynamic V = null;
			RobotComponent C = null;

			
			if ( this.is_component_functioning( "power cell" ) && Lang13.Bool( this.cell ) ) {
				
				if ( Convert.ToDouble( this.cell.charge ) <= 0 ) {
					this.uneq_all();
				} else {
					
					if ( Lang13.Bool( this.module_state_1 ) ) {
						this.cell.use( 3 );
					}

					if ( Lang13.Bool( this.module_state_2 ) ) {
						this.cell.use( 3 );
					}

					if ( Lang13.Bool( this.module_state_3 ) ) {
						this.cell.use( 3 );
					}

					foreach (dynamic _a in Lang13.Enumerate( this.components )) {
						V = _a;
						
						C = this.components[V];
						C.consume_power();
					}

					if ( !this.is_component_functioning( "actuator" ) ) {
						this.Paralyse( 3 );
					}
					this.stat = 0;
				}
			} else {
				this.uneq_all();
				this.stat = 1;
			}
			return;
		}

		// Function from file: life.dm
		public virtual void clamp_values(  ) {
			this.SetParalysis( Num13.MinInt( this.paralysis, 30 ) );
			this.sleeping = 0;
			this.adjustBruteLoss( 0 );
			this.adjustToxLoss( 0 );
			this.adjustOxyLoss( 0 );
			this.adjustFireLoss( 0 );
			return;
		}

		// Function from file: laws.dm
		public void clear_ion_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_ion_laws();
			return;
		}

		// Function from file: laws.dm
		public void add_ion_law( string law = null ) {
			this.laws_sanity_check();
			this.laws.add_ion_law( law );
			return;
		}

		// Function from file: laws.dm
		public void clear_supplied_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_supplied_laws();
			return;
		}

		// Function from file: laws.dm
		public void add_supplied_law( dynamic number = null, dynamic law = null ) {
			this.laws_sanity_check();
			this.laws.add_supplied_law( number, law );
			return;
		}

		// Function from file: laws.dm
		public void clear_inherent_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_inherent_laws();
			return;
		}

		// Function from file: laws.dm
		public void add_inherent_law( dynamic law = null ) {
			this.laws_sanity_check();
			this.laws.add_inherent_law( law );
			return;
		}

		// Function from file: laws.dm
		public void set_zeroth_law( string law = null ) {
			this.laws_sanity_check();
			this.laws.set_zeroth_law( law );
			return;
		}

		// Function from file: laws.dm
		public virtual void laws_sanity_check(  ) {
			
			if ( !Lang13.Bool( this.laws ) ) {
				this.laws = Lang13.Call( GlobalVars.base_law_type );
			}
			return;
		}

		// Function from file: laws.dm
		public virtual void lawsync(  ) {
			dynamic master = null;
			dynamic temp = null;
			int? index = null;
			int? index2 = null;
			int? index3 = null;

			this.laws_sanity_check();
			master = ( this.connected_ai != null ? this.connected_ai.laws : null );

			if ( Lang13.Bool( master ) ) {
				this.laws.ion.len = master.ion.len;
				index = null;
				index = 1;

				while (( index ??0) <= master.ion.len) {
					temp = master.ion[index];

					if ( Lang13.Length( temp ) > 0 ) {
						this.laws.ion[index] = temp;
					}
					index++;
				}

				if ( !( GlobalFuncs.is_special_character( this ) != 0 ) || this.mind.original != this ) {
					
					if ( Lang13.Bool( master.zeroth_borg ) ) {
						temp = master.zeroth_borg;
					} else {
						temp = master.zeroth;
					}
					this.laws.zeroth = temp;
				}
				this.laws.inherent.len = master.inherent.len;
				index2 = null;
				index2 = 1;

				while (( index2 ??0) <= master.inherent.len) {
					temp = master.inherent[index2];

					if ( Lang13.Length( temp ) > 0 ) {
						this.laws.inherent[index2] = temp;
					}
					index2++;
				}
				this.laws.supplied.len = master.supplied.len;
				index3 = null;
				index3 = 1;

				while (( index3 ??0) <= master.supplied.len) {
					temp = master.supplied[index3];

					if ( Lang13.Length( temp ) > 0 ) {
						this.laws.supplied[index3] = temp;
					}
					index3++;
				}
			}
			return;
		}

		// Function from file: laws.dm
		public virtual void statelaws(  ) {
			int number = 0;
			int? index = null;
			dynamic law = null;
			string num = null;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			this.say( ";Current Active Laws:" );
			number = 1;
			Task13.Sleep( 10 );

			if ( Lang13.Bool( this.laws.zeroth ) ) {
				
				if ( this.lawcheck[1] == "Yes" ) {
					this.say( ";0. " + this.laws.zeroth );
					Task13.Sleep( 10 );
				}
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.laws.ion.len) {
				law = this.laws.ion[index];
				num = GlobalFuncs.ionnum();

				if ( Lang13.Length( law ) > 0 ) {
					
					if ( this.ioncheck[index] == "Yes" ) {
						this.say( ";" + num + ". " + law );
						Task13.Sleep( 10 );
					}
				}
				index++;
			}
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.laws.inherent.len) {
				law2 = this.laws.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					
					if ( this.lawcheck[( index2 ??0) + 1] == "Yes" ) {
						this.say( ";" + number + ". " + law2 );
						Task13.Sleep( 10 );
					}
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.laws.supplied.len) {
				law3 = this.laws.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					
					if ( this.lawcheck.len >= number + 1 ) {
						
						if ( this.lawcheck[number + 1] == "Yes" ) {
							this.say( ";" + number + ". " + law3 );
							Task13.Sleep( 10 );
						}
						number++;
					}
				}
				index3++;
			}
			return;
		}

		// Function from file: inventory.dm
		public virtual void cycle_modules(  ) {
			dynamic slot_start = null;
			dynamic slot_num = null;

			slot_start = this.get_selected_module();

			if ( Lang13.Bool( slot_start ) ) {
				this.deselect_module( slot_start );
			}

			if ( slot_start == 0 ) {
				slot_num = 1;
				slot_start = 2;
			} else {
				slot_num = slot_start + 1;
			}

			while (slot_start != slot_num) {
				
				if ( this.f_module_active( slot_num ) ) {
					this.select_module( slot_num );
					return;
				}
				slot_num++;

				if ( Convert.ToDouble( slot_num ) > 3 ) {
					slot_num = 1;
				}
			}
			return;
		}

		// Function from file: inventory.dm
		public virtual void toggle_module( dynamic module = null ) {
			
			if ( Convert.ToDouble( module ) < 1 || Convert.ToDouble( module ) > 3 ) {
				return;
			}

			if ( this.module_selected( module ) ) {
				this.deselect_module( module );
			} else if ( this.f_module_active( module ) ) {
				this.select_module( module );
			} else {
				this.deselect_module( this.get_selected_module() );
			}
			return;
		}

		// Function from file: inventory.dm
		public virtual void deselect_module( dynamic module = null ) {
			
			if ( Convert.ToDouble( module ) < 1 || Convert.ToDouble( module ) > 3 ) {
				return;
			}

			dynamic _a = module; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				
				if ( this.module_active == this.module_state_1 ) {
					((dynamic)this.inv1).icon_state = "inv1";
					this.module_active = null;
					return;
				}
			} else if ( _a==2 ) {
				
				if ( this.module_active == this.module_state_2 ) {
					((dynamic)this.inv2).icon_state = "inv2";
					this.module_active = null;
					return;
				}
			} else if ( _a==3 ) {
				
				if ( this.module_active == this.module_state_3 ) {
					((dynamic)this.inv3).icon_state = "inv3";
					this.module_active = null;
					return;
				}
			}
			return;
		}

		// Function from file: inventory.dm
		public virtual void select_module( dynamic module = null ) {
			
			if ( Convert.ToDouble( module ) < 1 || Convert.ToDouble( module ) > 3 ) {
				return;
			}

			if ( !this.f_module_active( module ) ) {
				return;
			}

			dynamic _a = module; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				
				if ( this.module_active != this.module_state_1 ) {
					((dynamic)this.inv1).icon_state = "inv1 +a";
					((dynamic)this.inv2).icon_state = "inv2";
					((dynamic)this.inv3).icon_state = "inv3";
					this.module_active = this.module_state_1;
					return;
				}
			} else if ( _a==2 ) {
				
				if ( this.module_active != this.module_state_2 ) {
					((dynamic)this.inv1).icon_state = "inv1";
					((dynamic)this.inv2).icon_state = "inv2 +a";
					((dynamic)this.inv3).icon_state = "inv3";
					this.module_active = this.module_state_2;
					return;
				}
			} else if ( _a==3 ) {
				
				if ( this.module_active != this.module_state_3 ) {
					((dynamic)this.inv1).icon_state = "inv1";
					((dynamic)this.inv2).icon_state = "inv2";
					((dynamic)this.inv3).icon_state = "inv3 +a";
					this.module_active = this.module_state_3;
					return;
				}
			}
			return;
		}

		// Function from file: inventory.dm
		public virtual dynamic get_selected_module(  ) {
			
			if ( Lang13.Bool( this.module_state_1 ) && this.module_active == this.module_state_1 ) {
				return 1;
			} else if ( Lang13.Bool( this.module_state_2 ) && this.module_active == this.module_state_2 ) {
				return 2;
			} else if ( Lang13.Bool( this.module_state_3 ) && this.module_active == this.module_state_3 ) {
				return 3;
			}
			return 0;
		}

		// Function from file: inventory.dm
		[VerbInfo( name: "module active" )]
		public virtual bool f_module_active( dynamic module = null ) {
			
			if ( Convert.ToDouble( module ) < 1 || Convert.ToDouble( module ) > 3 ) {
				return false;
			}

			dynamic _a = module; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				
				if ( Lang13.Bool( this.module_state_1 ) ) {
					return true;
				}
			} else if ( _a==2 ) {
				
				if ( Lang13.Bool( this.module_state_2 ) ) {
					return true;
				}
			} else if ( _a==3 ) {
				
				if ( Lang13.Bool( this.module_state_3 ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: inventory.dm
		public virtual bool module_selected( dynamic module = null ) {
			return module == this.get_selected_module();
		}

		// Function from file: inventory.dm
		public virtual bool activated( dynamic O = null ) {
			
			if ( this.module_state_1 == O ) {
				return true;
			} else if ( this.module_state_2 == O ) {
				return true;
			} else if ( this.module_state_3 == O ) {
				return true;
			} else {
				return false;
			}
			this.updateicon();
			return false;
		}

		// Function from file: inventory.dm
		public virtual void uneq_all(  ) {
			this.module_active = null;

			if ( Lang13.Bool( this.module_state_1 ) ) {
				this.uneq_module( this.module_state_1 );
				this.module_state_1 = null;
				((dynamic)this.inv1).icon_state = "inv1";
			}

			if ( Lang13.Bool( this.module_state_2 ) ) {
				this.uneq_module( this.module_state_2 );
				this.module_state_2 = null;
				((dynamic)this.inv2).icon_state = "inv2";
			}

			if ( Lang13.Bool( this.module_state_3 ) ) {
				this.uneq_module( this.module_state_3 );
				this.module_state_3 = null;
				((dynamic)this.inv3).icon_state = "inv3";
			}
			this.unequip_sight();
			this.updateicon();
			return;
		}

		// Function from file: inventory.dm
		public void activate_module( dynamic O = null ) {
			
			if ( !Lang13.Bool( Lang13.FindIn( O, this.module.modules ) ) && O != this.module.emag ) {
				return;
			}

			if ( this.activated( O ) ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>Already activated</span>" );
				return;
			}

			if ( !Lang13.Bool( this.module_state_1 ) ) {
				this.module_state_1 = O;
				O.layer = 20;
				O.screen_loc = ((dynamic)this.inv1).screen_loc;
				((Ent_Dynamic)O).forceMove( this );
			} else if ( !Lang13.Bool( this.module_state_2 ) ) {
				this.module_state_2 = O;
				O.layer = 20;
				O.screen_loc = ((dynamic)this.inv2).screen_loc;
				((Ent_Dynamic)O).forceMove( this );
			} else if ( !Lang13.Bool( this.module_state_3 ) ) {
				this.module_state_3 = O;
				O.layer = 20;
				O.screen_loc = ((dynamic)this.inv3).screen_loc;
				((Ent_Dynamic)O).forceMove( this );
			} else {
				GlobalFuncs.to_chat( this, "<span class='notice'>You need to disable a module first!</span>" );
			}
			return;
		}

		// Function from file: inventory.dm
		public virtual void uneq_active(  ) {
			dynamic ourbeaker = null;
			Ent_Static L = null;

			
			if ( this.module_active == null ) {
				return;
			}

			if ( this.module_active.loc != this ) {
				
				if ( !( this.module_active is Obj_Item_Weapon_ReagentContainers_Glass_Beaker ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Can't store something you're not holding!</span>" );
					return;
				} else {
					ourbeaker = this.module_active;

					if ( ourbeaker.loc is Obj_Machinery ) {
						((dynamic)ourbeaker.loc).detach();
						ourbeaker.loc = this;
					} else if ( ourbeaker.loc is Mob ) {
						L = ourbeaker.loc;
						((dynamic)L).drop_item( ourbeaker );
						ourbeaker.loc = this;
					} else {
						ourbeaker.loc = this;
					}
				}
			}

			if ( this.module_state_1 == this.module_active ) {
				this.uneq_module( this.module_state_1 );
				this.module_state_1 = null;
				((dynamic)this.inv1).icon_state = "inv1";
			} else if ( this.module_state_2 == this.module_active ) {
				this.uneq_module( this.module_state_2 );
				this.module_state_2 = null;
				((dynamic)this.inv2).icon_state = "inv2";
			} else if ( this.module_state_3 == this.module_active ) {
				this.uneq_module( this.module_state_3 );
				this.module_state_3 = null;
				((dynamic)this.inv3).icon_state = "inv3";
			}
			this.module_active = null;
			this.updateicon();
			this.hud_used.update_robot_modules_display();
			return;
		}

		// Function from file: inventory.dm
		public bool uneq_module( dynamic module = null ) {
			
			if ( !( module is Obj_Item ) ) {
				return false;
			}

			if ( this.client != null ) {
				this.client.screen.Remove( module );
			}
			this.contents.Remove( module );

			if ( Lang13.Bool( module ) ) {
				((Ent_Dynamic)module).forceMove( this.module );
			}
			this.hud_used.update_robot_modules_display();
			return true;
		}

		// Function from file: component.dm
		public bool is_component_functioning( string module_name = null ) {
			RobotComponent C = null;

			C = this.components[module_name];
			return C != null && C.installed == 1 && C.toggled && C.is_powered();
		}

		// Function from file: component.dm
		public void initialize_components(  ) {
			this.components["actuator"] = new RobotComponent_Actuator( this );
			this.components["radio"] = new RobotComponent_Radio( this );
			this.components["power cell"] = new RobotComponent_Cell( this );
			this.components["diagnosis unit"] = new RobotComponent_DiagnosisUnit( this );
			this.components["camera"] = new RobotComponent_Camera( this );
			this.components["comms"] = new RobotComponent_BinaryCommunication( this );
			this.components["armour"] = new RobotComponent_Armour( this );
			return;
		}

		// Function from file: say.dm
		public override bool IsVocal(  ) {
			return !GlobalVars.config.silent_borg;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.assigned_role = "" + ( this is Mob_Living_Silicon_Robot_Mommi ? "Mobile MMI" : "Cyborg" );
			return;
		}

		// Function from file: cyborg.dm
		public override void RangedAttack( Ent_Static A = null, string _params = null ) {
			A.attack_robot( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void UnarmedAttack( Ent_Static A = null, bool proximity_flag = false, string _params = null ) {
			
			if ( A is Mob ) {
				this.delayNextAttack( 10 );
			}
			A.attack_robot( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void CtrlClickOn( Ent_Static A = null ) {
			
			if ( A is Obj_Machinery_Door_Airlock ) {
				A.AICtrlClick(  );
				return;
			}
			base.CtrlClickOn( A );
			return;
		}

		// Function from file: cyborg.dm
		public override void ShiftClickOn( Ent_Static A = null ) {
			
			if ( A is Obj_Machinery_Door_Airlock ) {
				A.AIShiftClick(  );
				return;
			}
			base.ShiftClickOn( A );
			return;
		}

		// Function from file: cyborg.dm
		public override bool AltClickOn( Ent_Static A = null ) {
			bool _default = false;

			_default = base.AltClickOn( A );

			if ( _default ) {
				return _default;
			}

			if ( A is Tile ) {
				A.RobotAltClick(  );
				return _default;
			}
			A.RobotAltClick(  );
			return _default;
		}

		// Function from file: cyborg.dm
		public override void MiddleClickOn( Ent_Static A = null ) {
			this.cycle_modules();
			return;
		}

		// Function from file: cyborg.dm
		public override bool ClickOn( Ent_Static A = null, string _params = null ) {
			ByTable modifiers = null;
			dynamic W = null;
			dynamic resolved = null;
			dynamic resolved2 = null;

			
			if ( this.click_delayer.blocked() ) {
				return false;
			}
			this.click_delayer.setDelay( 1 );

			if ( this.client.buildmode != 0 ) {
				GlobalFuncs.build_click( this, this.client.buildmode, _params, A );
				return false;
			}

			if ( Lang13.Bool( this.stat ) || this.lockcharge == true || this.weakened != 0 || this.stunned != 0 || this.paralysis != 0 ) {
				return false;
			}
			modifiers = String13.ParseUrlParams( _params );

			if ( Lang13.Bool( modifiers["middle"] ) ) {
				this.MiddleClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["shift"] ) ) {
				this.ShiftClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["alt"] ) ) {
				this.AltClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlClickOn( A );
				return false;
			}

			if ( this.attack_delayer.blocked() ) {
				return false;
			}

			if ( this.isVentCrawling() ) {
				GlobalFuncs.to_chat( this, "<span class='danger'>Not while we're vent crawling!</span>" );
				return false;
			}
			this.face_atom( A );
			W = this.get_active_hand();

			if ( !Lang13.Bool( W ) ) {
				A.add_hiddenprint( this );
				A.attack_robot( this );
				return false;
			}

			if ( Lang13.Bool( this.locked_to ) ) {
				return false;
			}

			if ( W == A ) {
				((Obj_Item)W).attack_self( this, _params );
				return false;
			}

			if ( A == this.loc || Lang13.Bool( ((dynamic)this.loc).Contains( A ) ) || this.contents.Contains( A ) ) {
				resolved = ((Obj_Item)W).preattack( A, this, true, _params );

				if ( !Lang13.Bool( resolved ) ) {
					resolved = A.attackby( W, this, _params );

					if ( A is Mob || A is Obj_Mecha || W is Obj_Item_Weapon_Grab ) {
						this.delayNextAttack( 10 );
					}

					if ( !Lang13.Bool( resolved ) && A != null && Lang13.Bool( W ) ) {
						W.afterattack( A, this, 1, _params );
					} else {
						this.delayNextAttack( 10 );
					}
				}
				return false;
			}

			if ( A is Tile || A.loc is Tile ) {
				
				if ( A.Adjacent( this ) ) {
					resolved2 = ((Obj_Item)W).preattack( A, this, true, _params );

					if ( !Lang13.Bool( resolved2 ) ) {
						resolved2 = A.attackby( W, this, _params );

						if ( A is Mob || A is Obj_Mecha ) {
							this.delayNextAttack( 10 );
						}

						if ( !Lang13.Bool( resolved2 ) && A != null && Lang13.Bool( W ) ) {
							W.afterattack( A, this, 1, _params );
						} else {
							this.delayNextAttack( 10 );
						}
					}
					return false;
				} else {
					W.afterattack( A, this, 0, _params );
					return false;
				}
			}
			return false;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Activate Held Object", group: "IC", access: VerbAccess.IsUser )]
		public override void mode(  ) {
			dynamic W = null;

			
			if ( this.attack_delayer.blocked() ) {
				return;
			}

			if ( this.stat == 2 ) {
				return;
			}
			W = this.get_active_hand();

			if ( Lang13.Bool( W ) ) {
				((Obj_Item)W).attack_self( this );
			}
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Set Flavour Text", desc: "Sets an extended description of your character's features.", group: "IC" )]
		public void set_flavor(  ) {
			this.flavor_text = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Please enter your new flavour text.", "Flavour text", null, null, InputType.Str ) ), 1, 0 );
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Set Pose", desc: "Sets a description which will be shown when someone examines you.", group: "IC" )]
		public void f_pose(  ) {
			this.pose = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "This is " + this + ". It is...", "Pose", null, null, InputType.Str ) ), 1, 1024 );
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Set Sensor Augmentation", group: "Robot Commands" )]
		public void f_sensor_mode(  ) {
			dynamic sensor_type = null;

			
			if ( !( this.module is Obj_Item_Weapon_RobotModule ) || !( this.module.sensor_augs is ByTable ) || !( this.module.sensor_augs.len != 0 ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>No Sensor Augmentations located or no module has been equipped.</span>" );
				return;
			}

			if ( this.module.sensor_augs.len == 2 ) {
				
				if ( !( this.sensor_mode != 0 ) ) {
					sensor_type = this.module.sensor_augs[1];
				} else {
					sensor_type = "Disable";
				}
			} else {
				sensor_type = Interface13.Input( "Please select sensor type.", "Sensor Integration", null, null, this.module.sensor_augs, InputType.Null | InputType.Any );
			}

			if ( Lang13.Bool( sensor_type ) ) {
				
				dynamic _a = sensor_type; // Was a switch-case, sorry for the mess.
				if ( _a=="Security" ) {
					this.sensor_mode = 1;
					GlobalFuncs.to_chat( this, "<span class='notice'>Security records overlay enabled.</span>" );
				} else if ( _a=="Medical" ) {
					this.sensor_mode = 2;
					GlobalFuncs.to_chat( this, "<span class='notice'>Life signs monitor overlay enabled.</span>" );
				} else if ( _a=="Mesons" ) {
					this.sensor_mode = 3;
					GlobalFuncs.to_chat( this, "<span class='notice'>Meson Vison augmentation enabled.</span>" );
				} else if ( _a=="Thermal" ) {
					this.sensor_mode = 5;
					GlobalFuncs.to_chat( this, "<span class='notice'>Thermal Optics augmentation enabled.</span>" );
				} else if ( _a=="Disable" ) {
					this.sensor_mode = 0;
					GlobalFuncs.to_chat( this, "<span class='notice'>Sensor augmentations disabled.</span>" );
				}
				this.handle_sensor_modes();
				this.update_sight_hud();
			}
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Unlock Cover", desc: "Unlocks your own cover if it is locked. You can not lock it again. A human will have to lock it for you.", group: "Robot Commands" )]
		public void unlock_own_cover(  ) {
			
			if ( this.locked ) {
				
				switch ((string)( Interface13.Alert( "You can not lock your cover again, are you sure?\n      (You can still ask for a human to lock it)", "Unlock Own Cover", "Yes", "No" ) )) {
					case "Yes":
						this.locked = false;
						this.updateicon();
						GlobalFuncs.to_chat( Task13.User, "You unlock your cover." );
						break;
				}
			}
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Toggle Component", desc: "Toggle a component, conserving power.", group: "Robot Commands" )]
		public void toggle_component(  ) {
			ByTable installed_components = null;
			dynamic V = null;
			dynamic C = null;
			dynamic toggle = null;
			dynamic C2 = null;

			installed_components = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.components )) {
				V = _a;
				

				if ( V == "power cell" ) {
					continue;
				}
				C = this.components[V];

				if ( Lang13.Bool( C.installed ) ) {
					installed_components.Add( V );
				}
			}
			toggle = Interface13.Input( this, "Which component do you want to toggle?", "Toggle Component", null, installed_components, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( toggle ) ) {
				return;
			}
			C2 = this.components[toggle];

			if ( Lang13.Bool( C2.toggled ) ) {
				C2.toggled = 0;
				GlobalFuncs.to_chat( this, "<span class='warning'>You disable " + C2.name + ".</span>" );
			} else {
				C2.toggled = 1;
				GlobalFuncs.to_chat( this, "<span class='warning'>You enable " + C2.name + ".</span>" );
			}
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Self Diagnosis", group: "Robot Commands" )]
		public void self_diagnosis_verb(  ) {
			string dat = null;

			
			if ( !this.is_component_functioning( "diagnosis unit" ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>Your self-diagnosis component isn't functioning.</span>" );
			}
			dat = this.self_diagnosis();
			Interface13.Browse( this, dat, "window=robotdiagnosis" );
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Show Station Manifest", group: "Robot Commands" )]
		public void cmd_station_manifest(  ) {
			this.show_station_manifest();
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Show Alerts", group: "Robot Commands" )]
		public void cmd_robot_alerts(  ) {
			this.robot_alerts();
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( group: "Robot Commands" )]
		public virtual bool Namepick(  ) {
			string newname = null;
			double i = 0;

			
			if ( Lang13.Bool( this.custom_name ) ) {
				return false;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.IterateRange( 1, 3 )) {
					i = _a;
					
					newname = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( this, "You are a robot. Enter a name, or leave blank for the default name.", "Name change " + ( 3 - i ) + " " + ( 0 - i != 1 ? "tries" : "try" ) + " left", "", null, InputType.Str ) ), 1, 26 );

					if ( newname == "" ) {
						continue;
					}

					if ( Interface13.Alert( this, "Do you really want the name:\n" + newname + "?", null, "Yes", "No" ) == "Yes" ) {
						break;
					}
				}

				if ( newname != "" ) {
					this.custom_name = newname;
				}
				this.updatename();
				this.updateicon();
				return;
			}));
			return false;
		}

		// Function from file: laws.dm
		[Verb]
		[VerbInfo( name: "State Laws", group: "Robot Commands" )]
		public void checklaws(  ) {
			string list = null;
			int? index = null;
			dynamic law = null;
			int number = 0;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			list = "<b>Which laws do you want to include when stating them for the crew?</b><br><br>";

			if ( Lang13.Bool( this.laws.zeroth ) ) {
				
				if ( !Lang13.Bool( this.lawcheck[1] ) ) {
					this.lawcheck[1] = "No";
				}
				list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=0'>" ).item( this.lawcheck[1] ).str( " 0:</A> " ).item( this.laws.zeroth ).str( "<BR>" ).ToString();
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.laws.ion.len) {
				law = this.laws.ion[index];

				if ( Lang13.Length( law ) > 0 ) {
					
					if ( !Lang13.Bool( this.ioncheck[index] ) ) {
						this.ioncheck[index] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawi=" ).item( index ).str( "'>" ).item( this.ioncheck[index] ).str( " " ).item( GlobalFuncs.ionnum() ).str( ":</A> " ).item( law ).str( "<BR>" ).ToString();
					this.ioncheck.len += 1;
				}
				index++;
			}
			number = 1;
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.laws.inherent.len) {
				law2 = this.laws.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					this.lawcheck.len += 1;

					if ( !Lang13.Bool( this.lawcheck[number + 1] ) ) {
						this.lawcheck[number + 1] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=" ).item( number ).str( "'>" ).item( this.lawcheck[number + 1] ).str( " " ).item( number ).str( ":</A> " ).item( law2 ).str( "<BR>" ).ToString();
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.laws.supplied.len) {
				law3 = this.laws.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					this.lawcheck.len += 1;

					if ( !Lang13.Bool( this.lawcheck[number + 1] ) ) {
						this.lawcheck[number + 1] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=" ).item( number ).str( "'>" ).item( this.lawcheck[number + 1] ).str( " " ).item( number ).str( ":</A> " ).item( law3 ).str( "<BR>" ).ToString();
					number++;
				}
				index3++;
			}
			list += new Txt( "<br><br><A href='byond://?src=" ).Ref( this ).str( ";laws=1'>State Laws</A>" ).ToString();
			Interface13.Browse( Task13.User, list, "window=laws" );
			return;
		}

		// Function from file: laws.dm
		[Verb]
		[VerbInfo( name: "Show Laws", group: "Robot Commands" )]
		public void cmd_show_laws(  ) {
			this.show_laws();
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already dead!</span>" );
				return;
			}

			if ( this.suiciding == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already committing suicide! Be patient!</span>" );
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( confirm == "Yes" ) {
				this.suiciding = true;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " is powering down. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.adjustOxyLoss( Num13.MaxInt( Convert.ToInt32( this.maxHealth * 2 - this.getToxLoss() - this.getFireLoss() - this.getBruteLoss() - this.getOxyLoss() ), 0 ) );
				this.stat = 2;
				this.updatehealth();
			}
			return;
		}

	}

}