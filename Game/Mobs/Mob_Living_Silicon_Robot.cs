// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon_Robot : Mob_Living_Silicon {

		public dynamic custom_name = "";
		public string braintype = "Cyborg";
		public string modtype = "robot";
		public Obj_Item_RobotParts_RobotSuit robot_suit = null;
		public dynamic mmi = null;
		public Base_Dynamic inv1 = null;
		public Base_Dynamic inv2 = null;
		public Base_Dynamic inv3 = null;
		public dynamic lamp_button = null;
		public dynamic thruster_button = null;
		public bool shown_robot_modules = false;
		public Obj_Screen robot_modules_background = null;
		public Obj_Item_Weapon_RobotModule module = null;
		public dynamic module_active = null;
		public dynamic module_state_1 = null;
		public dynamic module_state_2 = null;
		public dynamic module_state_3 = null;
		public dynamic connected_ai = null;
		public dynamic cell = null;
		public Obj_Machinery_Camera camera = null;
		public bool opened = false;
		public bool emagged = false;
		public int emag_cooldown = 0;
		public bool wiresexposed = false;
		public double ident = 0;
		public bool locked = true;
		public ByTable v_req_access = new ByTable(new object [] { 29 });
		public ByTable alarms = new ByTable()
											.Set( "Motion", new ByTable() )
											.Set( "Fire", new ByTable() )
											.Set( "Atmosphere", new ByTable() )
											.Set( "Power", new ByTable() )
											.Set( "Camera", new ByTable() )
											.Set( "Burglar", new ByTable() )
										;
		public bool viewalerts = false;
		public int speed = 0;
		public int? magpulse = 0;
		public int? ionpulse = 0;
		public bool ionpulse_on = false;
		public EffectSystem_TrailFollow_Ion ion_trail = null;
		public bool low_power_mode = false;
		public EffectSystem_SparkSpread spark_system = null;
		public bool lawupdate = true;
		public bool scrambledcodes = false;
		public bool? lockcharge = null;
		public int toner = 0;
		public int tonermax = 40;
		public int lamp_max = 10;
		public double lamp_intensity = 0;
		public bool lamp_recharging = false;
		public int sight_mode = 0;
		public bool updating = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "Cyborg";
			this.macro_default = "robot-default";
			this.macro_hotkeys = "robot-hotkeys";
			this.bubble_icon = "robot";
			this.designation = "Default";
			this.has_limbs = true;
			this.hud_possible = new ByTable(new object [] { "12", "8", "9", "10" });
			this.icon = "icons/mob/robots.dmi";
			this.icon_state = "robot";
		}

		// Function from file: robot.dm
		public Mob_Living_Silicon_Robot ( dynamic loc = null ) : base( (object)(loc) ) {
			this.spark_system = new EffectSystem_SparkSpread();
			this.spark_system.set_up( 5, 0, this );
			this.spark_system.attach( this );
			this.wires = new Wires_Robot( this );
			this.robot_modules_background = new Obj_Screen();
			this.robot_modules_background.icon_state = "block";
			this.robot_modules_background.layer = 19;
			this.ident = Rand13.Int( 1, 999 );
			this.update_icons();

			if ( !Lang13.Bool( this.cell ) ) {
				this.cell = new Obj_Item_Weapon_StockParts_Cell( this );
				this.cell.maxcharge = 7500;
				this.cell.charge = 7500;
			}

			if ( this.lawupdate ) {
				this.make_laws();
				this.connected_ai = GlobalFuncs.select_active_ai_with_fewest_borgs();

				if ( Lang13.Bool( this.connected_ai ) ) {
					this.connected_ai.connected_robots.Add( this );
					this.lawsync();
					this.lawupdate = true;
				} else {
					this.lawupdate = false;
				}
			}
			this.v_radio = new Obj_Item_Device_Radio_Borg( this );

			if ( !this.scrambledcodes && !( this.camera != null ) ) {
				this.camera = new Obj_Machinery_Camera( this );
				this.camera.c_tag = this.real_name;
				this.camera.network = new ByTable(new object [] { "SS13" });

				if ( ((Wires)this.wires).is_cut( "camera" ) ) {
					this.camera.status = false;
				}
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !Lang13.Bool( this.mmi ) || !Lang13.Bool( this.mmi.brainmob ) ) {
				this.mmi = new Obj_Item_Device_Mmi( this );
				this.mmi.brain = new Obj_Item_Organ_Internal_Brain( this.mmi );
				this.mmi.brain.name = "" + this.real_name + "'s brain";
				this.mmi.icon_state = "mmi_full";
				this.mmi.name = "Man-Machine Interface: " + this.real_name;
				this.mmi.brainmob = new Mob_Living_Carbon_Brain( this.mmi );
				this.mmi.brainmob.name = this.real_name;
				this.mmi.brainmob.real_name = this.real_name;
				this.mmi.brainmob.container = this.mmi;
			}
			this.updatename();
			GlobalFuncs.playsound( loc, "sound/voice/liveagain.ogg", 75, 1 );
			this.aicamera = new Obj_Item_Device_Camera_Siliconcam_RobotCamera( this );
			this.toner = this.tonermax;
			this.diag_hud_set_borgcell();
			return;
		}

		// Function from file: interface.dm
		public override void hotkey_help(  ) {
			string hotkey_mode = null;
			string other = null;

			hotkey_mode = @"<font color='purple'>
Hotkey-Mode: (hotkey-mode must be on)
	TAB = toggle hotkey-mode
	a = left
	s = down
	d = right
	w = up
	q = unequip active module
	t = say
	o = OOC
	x = cycle active modules
	b = resist
	z = activate held object (or y)
	f = cycle-intents-left
	g = cycle-intents-right
	1 = activate module 1
	2 = activate module 2
	3 = activate module 3
	4 = toggle intents
</font>";
			other = @"<font color='purple'>
Any-Mode: (hotkey doesn't need to be on)
	Ctrl+a = left
	Ctrl+s = down
	Ctrl+d = right
	Ctrl+w = up
	Ctrl+q = unequip active module
	Ctrl+x = cycle active modules
	Ctrl+b = resist
	Ctrl+o = OOC
	Ctrl+z = activate held object (or Ctrl+y)
	Ctrl+f = cycle-intents-left
	Ctrl+g = cycle-intents-right
	Ctrl+1 = activate module 1
	Ctrl+2 = activate module 2
	Ctrl+3 = activate module 3
	Ctrl+4 = toggle intents
	DEL = pull
	INS = toggle intents
	PGUP = cycle active modules
	PGDN = activate held object
</font>";
			this.WriteMsg( hotkey_mode );
			this.WriteMsg( other );
			return;
		}

		// Function from file: default.dm
		public override int default_can_use_topic( Game_Data src_object = null ) {
			int _default = 0;

			_default = this.shared_ui_interaction( src_object );

			if ( _default <= 0 ) {
				return _default;
			}

			if ( Map13.GetDistance( this, src_object ) <= this.client.view ) {
				return 2;
			}
			return 0;
		}

		// Function from file: states.dm
		public override int shared_ui_interaction( Game_Data src_object = null ) {
			
			if ( Convert.ToDouble( this.cell.charge ) <= 0 || this.lockcharge == true ) {
				return 0;
			}
			return base.shared_ui_interaction( src_object );
		}

		// Function from file: ninjaDrainAct.dm
		public override dynamic ninjadrain_act( Obj_Item_Clothing_Suit_Space_SpaceNinja S = null, Ent_Static H = null, Obj_Item_Clothing_Gloves_SpaceNinja G = null ) {
			dynamic _default = null;

			bool maxcapacity = false;
			double drain = 0;

			
			if ( !( S != null ) || !( H != null ) || !( G != null ) ) {
				return "INVALID";
			}
			maxcapacity = false;
			drain = 0;
			_default = 0;
			this.WriteMsg( "<span class='danger'>Warning: Unauthorized access through sub-route 12, block C, detected.</span>" );

			if ( Lang13.Bool( this.cell ) && Lang13.Bool( this.cell.charge ) ) {
				
				while (G.candrain && Convert.ToDouble( this.cell.charge ) > 0 && !maxcapacity) {
					drain = Rand13.Int( G.mindrain, G.maxdrain );

					if ( Convert.ToDouble( this.cell.charge ) < drain ) {
						drain = Convert.ToDouble( this.cell.charge );
					}

					if ( Convert.ToDouble( S.cell.charge + drain ) > ( S.cell.maxcharge ??0) ) {
						drain = ( S.cell.maxcharge ??0) - Convert.ToDouble( S.cell.charge );
						maxcapacity = true;
					}

					if ( GlobalFuncs.do_after( H, 10 ) ) {
						this.spark_system.start();
						GlobalFuncs.playsound( this.loc, "sparks", 50, 1 );
						this.cell.charge -= drain;
						S.cell.charge += drain;
						_default += drain;
					} else {
						break;
					}
				}
			}
			return _default;
		}

		// Function from file: say.dm
		public override bool IsVocal(  ) {
			return !GlobalVars.config.silent_borg;
		}

		// Function from file: robot_movement.dm
		public override bool experience_pressure_difference( dynamic pressure_difference = null, int direction = 0 ) {
			
			if ( !Lang13.Bool( this.magpulse ) ) {
				return base.experience_pressure_difference( (object)(pressure_difference), direction );
			}
			return false;
		}

		// Function from file: robot_movement.dm
		public override bool mob_has_gravity( Ent_Static T = null ) {
			return base.mob_has_gravity( T ) || Lang13.Bool( this.mob_negates_gravity() );
		}

		// Function from file: robot_movement.dm
		public override int? mob_negates_gravity(  ) {
			return this.magpulse;
		}

		// Function from file: robot_movement.dm
		public override dynamic movement_delay(  ) {
			dynamic _default = null;

			_default = base.movement_delay();
			_default += this.speed;
			_default += GlobalVars.config.robot_delay;
			return _default;
		}

		// Function from file: robot_movement.dm
		public override int Process_Spacemove( dynamic movement_dir = null ) {
			movement_dir = movement_dir ?? 0;

			
			if ( this.f_ionpulse() ) {
				return 1;
			}
			return base.Process_Spacemove( (object)(movement_dir) );
		}

		// Function from file: robot.dm
		public override double emp_act( int severity = 0 ) {
			
			switch ((int)( severity )) {
				case 1:
					this.Stun( 8 );
					break;
				case 2:
					this.Stun( 3 );
					break;
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: robot.dm
		public override bool fully_replace_character_name( dynamic oldname = null, dynamic newname = null ) {
			base.fully_replace_character_name( (object)(oldname), (object)(newname) );

			if ( oldname != this.real_name ) {
				this.notify_ai( 3, oldname, newname );
			}

			if ( this.camera != null ) {
				this.camera.c_tag = this.real_name;
			}
			this.custom_name = newname;
			return false;
		}

		// Function from file: robot.dm
		public override void update_stat(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}

			if ( this.stat != 2 ) {
				
				if ( Convert.ToDouble( this.health ) <= Convert.ToDouble( -this.maxHealth ) ) {
					this.death();
					return;
				}

				if ( this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 || Convert.ToDouble( this.getOxyLoss() ) > Convert.ToDouble( this.maxHealth * 0.5 ) ) {
					
					if ( this.stat == 0 ) {
						this.stat = 1;
						this.blind_eyes( 1 );
						this.update_canmove();
						this.update_headlamp();
					}
				} else if ( this.stat == 1 ) {
					this.stat = 0;
					this.adjust_blindness( -1 );
					this.update_canmove();
					this.update_headlamp();
				}
			}
			return;
		}

		// Function from file: robot.dm
		public override void update_sight(  ) {
			dynamic A = null;

			
			if ( !( this.client != null ) ) {
				return;
			}

			if ( this.stat == 2 ) {
				this.sight = 28;
				this.see_in_dark = 8;
				this.see_invisible = 60;
				return;
			}
			this.see_invisible = Convert.ToInt32( Lang13.Initial( this, "see_invisible" ) );
			this.see_in_dark = Convert.ToInt32( Lang13.Initial( this, "see_in_dark" ) );
			this.sight = Convert.ToInt32( Lang13.Initial( this, "sight" ) );

			if ( this.client.eye != this ) {
				A = this.client.eye;

				if ( ((Ent_Static)A).update_remote_sight( this ) ) {
					return;
				}
			}

			if ( ( this.sight_mode & 1 ) != 0 ) {
				this.sight |= GlobalVars.SEE_TURFS;
				this.see_invisible = Num13.MinInt( this.see_invisible, 5 );
				this.see_in_dark = 1;
			}

			if ( ( this.sight_mode & 4 ) != 0 ) {
				this.sight |= 28;
				this.see_invisible = 25;
				this.see_in_dark = 8;
			}

			if ( ( this.sight_mode & 2 ) != 0 ) {
				this.sight |= GlobalVars.SEE_MOBS;
				this.see_invisible = Num13.MinInt( this.see_invisible, 25 );
				this.see_in_dark = 8;
			}

			if ( this.see_override != 0 ) {
				this.see_invisible = this.see_override;
			}
			return;
		}

		// Function from file: robot.dm
		public override void updatehealth(  ) {
			base.updatehealth();

			if ( Convert.ToDouble( this.health ) < Convert.ToDouble( this.maxHealth * 0.5 ) ) {
				
				if ( this.uneq_module( this.module_state_3 ) ) {
					this.WriteMsg( "<span class='warning'>SYSTEM ERROR: Module 3 OFFLINE.</span>" );
				}

				if ( Convert.ToDouble( this.health ) < 0 ) {
					
					if ( this.uneq_module( this.module_state_2 ) ) {
						this.WriteMsg( "<span class='warning'>SYSTEM ERROR: Module 2 OFFLINE.</span>" );
					}

					if ( Convert.ToDouble( this.health ) < Convert.ToDouble( -this.maxHealth * 0.5 ) ) {
						
						if ( this.uneq_module( this.module_state_1 ) ) {
							this.WriteMsg( "<span class='warning'>CRITICAL ERROR: All modules OFFLINE.</span>" );
						}
					}
				}
			}
			this.diag_hud_set_health();
			this.diag_hud_set_status();
			this.update_health_hud();
			return;
		}

		// Function from file: robot.dm
		public override bool canUseTopic( dynamic M = null, bool? be_close = null, bool? no_dextery = null ) {
			be_close = be_close ?? false;

			
			if ( this.stat != 0 || this.lockcharge == true || this.low_power_mode ) {
				return false;
			}

			if ( be_close == true && !( Map13.GetDistance( M, this ) <= 1 ) ) {
				return false;
			}
			return true;
		}

		// Function from file: robot.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			Ent_Static oldLoc = null;
			Ent_Static tile = null;
			dynamic A = null;
			dynamic cleaned_item = null;
			dynamic cleaned_human = null;

			oldLoc = this.loc;
			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( _default ) {
				
				if ( this.camera != null ) {
					
					if ( !this.updating ) {
						this.updating = true;
						Task13.Schedule( 30, (Task13.Closure)(() => {
							
							if ( oldLoc != this.loc ) {
								GlobalVars.cameranet.updatePortableCamera( this.camera );
							}
							this.updating = false;
							return;
						}));
					}
				}
			}

			if ( this.module != null ) {
				
				if ( this.module.type == typeof(Obj_Item_Weapon_RobotModule_Janitor) ) {
					tile = this.loc;

					if ( tile is Tile ) {
						tile.clean_blood();

						foreach (dynamic _a in Lang13.Enumerate( tile )) {
							A = _a;
							

							if ( A is Obj_Effect ) {
								
								if ( A is Obj_Effect_Decal_Cleanable || A is Obj_Effect_Rune ) {
									GlobalFuncs.qdel( A );
								}
							} else if ( A is Obj_Item ) {
								cleaned_item = A;
								((Ent_Static)cleaned_item).clean_blood();
							} else if ( A is Mob_Living_Carbon_Human ) {
								cleaned_human = A;

								if ( Lang13.Bool( cleaned_human.lying ) ) {
									
									if ( Lang13.Bool( cleaned_human.head ) ) {
										((Ent_Static)cleaned_human.head).clean_blood();
										((Mob)cleaned_human).update_inv_head();
									}

									if ( Lang13.Bool( cleaned_human.wear_suit ) ) {
										((Ent_Static)cleaned_human.wear_suit).clean_blood();
										((Mob)cleaned_human).update_inv_wear_suit();
									} else if ( Lang13.Bool( cleaned_human.w_uniform ) ) {
										((Ent_Static)cleaned_human.w_uniform).clean_blood();
										((Mob)cleaned_human).update_inv_w_uniform();
									}

									if ( Lang13.Bool( cleaned_human.shoes ) ) {
										((Ent_Static)cleaned_human.shoes).clean_blood();
										((Mob)cleaned_human).update_inv_shoes();
									}
									((Ent_Static)cleaned_human).clean_blood();
									cleaned_human.WriteMsg( "<span class='danger'>" + this + " cleans your face!</span>" );
								}
							}
						}
					}
					return _default;
				}

				if ( this.module.type == typeof(Obj_Item_Weapon_RobotModule_Miner) ) {
					
					if ( this.loc is Tile_Simulated_Floor_Plating_Asteroid ) {
						
						if ( this.module_state_1 is Obj_Item_Weapon_Storage_Bag_Ore ) {
							this.loc.attackby( this.module_state_1, this );
						} else if ( this.module_state_2 is Obj_Item_Weapon_Storage_Bag_Ore ) {
							this.loc.attackby( this.module_state_2, this );
						} else if ( this.module_state_3 is Obj_Item_Weapon_Storage_Bag_Ore ) {
							this.loc.attackby( this.module_state_3, this );
						}
					}
				}
			}
			return _default;
		}

		// Function from file: robot.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			string t1 = null;
			dynamic O = null;
			dynamic O2 = null;
			dynamic O3 = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User != null && this != Task13.User ) {
				return null;
			}

			if ( Lang13.Bool( href_list["mach_close"] ) ) {
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
				return null;
			}

			if ( Lang13.Bool( href_list["showalerts"] ) ) {
				this.robot_alerts();
				return null;
			}

			if ( Lang13.Bool( href_list["mod"] ) ) {
				O = Lang13.FindObj( href_list["mod"] );

				if ( Lang13.Bool( O ) ) {
					((Obj_Item)O).attack_self( this );
				}
			}

			if ( Lang13.Bool( href_list["act"] ) ) {
				O2 = Lang13.FindObj( href_list["act"] );
				this.activate_module( O2 );
				this.installed_modules();
			}

			if ( Lang13.Bool( href_list["deact"] ) ) {
				O3 = Lang13.FindObj( href_list["deact"] );

				if ( this.activated( O3 ) ) {
					
					if ( this.module_state_1 == O3 ) {
						this.module_state_1 = null;
						this.contents.Remove( O3 );
					} else if ( this.module_state_2 == O3 ) {
						this.module_state_2 = null;
						this.contents.Remove( O3 );
					} else if ( this.module_state_3 == O3 ) {
						this.module_state_3 = null;
						this.contents.Remove( O3 );
					} else {
						this.WriteMsg( "Module isn't activated." );
					}
				} else {
					this.WriteMsg( "Module isn't activated" );
				}
				this.installed_modules();
			}
			return null;
		}

		// Function from file: robot.dm
		public override void update_icons(  ) {
			string state_name = null;

			this.overlays.Cut();

			if ( this.stat != 2 && !( this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 || this.low_power_mode ) ) {
				state_name = this.icon_state;

				switch ((string)( this.icon_state )) {
					case "robot":
						this.overlays.Add( "eyes-standard" );
						state_name = "standard";
						break;
					case "mediborg":
						this.overlays.Add( "eyes-mediborg" );
						break;
					case "toiletbot":
						this.overlays.Add( "eyes-mediborg" );
						state_name = "mediborg";
						break;
					case "secborg":
						this.overlays.Add( "eyes-secborg" );
						break;
					case "engiborg":
						this.overlays.Add( "eyes-engiborg" );
						break;
					case "janiborg":
						this.overlays.Add( "eyes-janiborg" );
						break;
					case "minerborg":
						this.overlays.Add( "eyes-minerborg" );
						break;
					case "syndie_bloodhound":
						this.overlays.Add( "eyes-syndie_bloodhound" );
						break;
					default:
						this.overlays.Add( "eyes" );
						state_name = "serviceborg";
						break;
				}

				if ( this.lamp_intensity > 2 ) {
					this.overlays.Add( "eyes-" + state_name + "-lights" );
				}
			}

			if ( this.opened ) {
				
				if ( this.wiresexposed ) {
					this.overlays.Add( "ov-opencover +w" );
				} else if ( Lang13.Bool( this.cell ) ) {
					this.overlays.Add( "ov-opencover +c" );
				} else {
					this.overlays.Add( "ov-opencover -c" );
				}
			}
			this.update_fire();
			return;
		}

		// Function from file: robot.dm
		public override bool regenerate_icons(  ) {
			this.update_icons(); return false;
		}

		// Function from file: robot.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			this.add_fingerprint( a );

			if ( this.opened && !this.wiresexposed && !( a is Mob_Living_Silicon ) ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					this.cell.updateicon();
					((Ent_Static)this.cell).add_fingerprint( a );
					((Mob)a).put_in_active_hand( this.cell );
					a.WriteMsg( new Txt( "<span class='notice'>You remove " ).the( this.cell ).item().str( ".</span>" ).ToString() );
					this.cell = null;
					this.update_icons();
					this.diag_hud_set_borgcell();
				}
			}

			if ( !this.opened ) {
				
				if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
					this.spark_system.start();
					Task13.Schedule( 0, (Task13.Closure)(() => {
						Map13.StepAway( this, a, 15 );
						Task13.Sleep( 3 );
						Map13.StepAway( this, a, 15 );
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: robot.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			int stunprob = 0;
			int damage = 0;

			
			if ( base.attack_slime( user ) ) {
				this.flash_eyes();
				stunprob = user.powerlevel * 7 + 10;

				if ( Rand13.PercentChance( stunprob ) && user.powerlevel >= 8 ) {
					this.adjustBruteLoss( user.powerlevel * Rand13.Int( 6, 10 ) );
				}
			}
			damage = Rand13.Int( 1, 3 );

			if ( user.is_adult ) {
				damage = Rand13.Int( 20, 40 );
			} else {
				damage = Rand13.Int( 5, 35 );
			}
			damage = Num13.Floor( damage / 2 );
			this.adjustBruteLoss( damage );
			this.updatehealth();
			return false;
		}

		// Function from file: robot.dm
		public override bool attack_alien( dynamic user = null ) {
			
			if ( user.a_intent == "disarm" ) {
				
				if ( !Lang13.Bool( this.lying ) ) {
					((Ent_Dynamic)user).do_attack_animation( this );

					if ( Rand13.PercentChance( 85 ) ) {
						this.Stun( 2 );
						Map13.Step( this, Map13.GetDistance( user, this ) );
						Task13.Schedule( 5, (Task13.Closure)(() => {
							Map13.Step( this, Map13.GetDistance( user, this ) );
							return;
						}));
						GlobalFuncs.add_logs( user, this, "pushed" );
						GlobalFuncs.playsound( this.loc, "sound/weapons/pierce.ogg", 50, 1, -1 );
						this.visible_message( "<span class='danger'>" + user + " has forced back " + this + "!</span>", "<span class='userdanger'>" + user + " has forced back " + this + "!</span>" );
					} else {
						GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );
						this.visible_message( "<span class='danger'>" + user + " took a swipe at " + this + "!</span>", "<span class='userdanger'>" + user + " took a swipe at " + this + "!</span>" );
					}
				}
			} else {
				base.attack_alien( (object)(user) );
			}
			return false;
		}

		// Function from file: robot.dm
		public override bool emag_act( dynamic user = null ) {
			bool ai_is_antag = false;
			string time = null;

			
			if ( user != this ) {
				
				if ( !this.opened ) {
					
					if ( this.locked ) {
						user.WriteMsg( "<span class='notice'>You emag the cover lock.</span>" );
						this.locked = false;
					} else {
						user.WriteMsg( "<span class='warning'>The cover is already unlocked!</span>" );
					}
					return false;
				}

				if ( this.opened ) {
					
					if ( Game13.time - 100 < this.emag_cooldown ) {
						return false;
					}
					ai_is_antag = false;

					if ( Lang13.Bool( this.connected_ai ) && Lang13.Bool( this.connected_ai.mind ) ) {
						
						if ( Lang13.Bool( this.connected_ai.mind.special_role ) ) {
							ai_is_antag = this.connected_ai.mind.special_role == "traitor";
						}
					}

					if ( ai_is_antag ) {
						user.WriteMsg( "<span class='notice'>You emag " + this + "'s interface.</span>" );
						this.WriteMsg( "<span class='danger'>ALERT: Foreign software execution prevented.</span>" );
						this.connected_ai.WriteMsg( "<span class='danger'>ALERT: Cyborg unit [" + this + "] successfuly defended against subversion.</span>" );
						GlobalFuncs.log_game( "" + GlobalFuncs.key_name( user ) + " attempted to emag cyborg " + GlobalFuncs.key_name( this ) + " slaved to traitor AI " + this.connected_ai + "." );
						this.emag_cooldown = Game13.time;
						return false;
					}

					if ( this.wiresexposed ) {
						user.WriteMsg( "<span class='warning'>You must close the cover first!</span>" );
						return false;
					} else {
						this.emag_cooldown = Game13.time;
						Task13.Sleep( 6 );
						this.SetEmagged( true );
						this.SetLockdown( true );
						this.lawupdate = false;
						this.connected_ai = null;
						user.WriteMsg( "<span class='notice'>You emag " + this + "'s interface.</span>" );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( user ) + " emagged cyborg " + GlobalFuncs.key_name_admin( this ) + ".  Laws overridden." );
						GlobalFuncs.log_game( "" + GlobalFuncs.key_name( user ) + " emagged cyborg " + GlobalFuncs.key_name( this ) + ".  Laws overridden." );
						this.clear_supplied_laws();
						this.clear_inherent_laws();
						this.clear_zeroth_law( false );
						this.laws = new AiLaws_SyndicateOverride();
						time = String13.FormatTime( Game13.realtime, "hh:mm:ss" );
						GlobalVars.lawchanges.Add( "" + time + " <B>:</B> " + user.name + "(" + user.key + ") emagged " + this.name + "(" + this.key + ")" );
						this.set_zeroth_law( "Only " + user.real_name + " and people they designate as being such are Syndicate Agents." );
						this.WriteMsg( "<span class='danger'>ALERT: Foreign software detected.</span>" );
						Task13.Sleep( 5 );
						this.WriteMsg( "<span class='danger'>Initiating diagnostics...</span>" );
						Task13.Sleep( 20 );
						this.WriteMsg( "<span class='danger'>SynBorg v1.7 loaded.</span>" );
						Task13.Sleep( 5 );
						this.WriteMsg( "<span class='danger'>LAW SYNCHRONISATION ERROR</span>" );
						Task13.Sleep( 5 );
						this.WriteMsg( "<span class='danger'>Would you like to send a report to NanoTraSoft? Y/N</span>" );
						Task13.Sleep( 10 );
						this.WriteMsg( "<span class='danger'>> N</span>" );
						Task13.Sleep( 20 );
						this.WriteMsg( "<span class='danger'>ERRORERRORERROR</span>" );
						this.WriteMsg( "<b>Obey these laws:</b>" );
						this.laws.show_laws( this );
						this.WriteMsg( "<span class='danger'>ALERT: " + user.real_name + " is your new master. Obey your new laws and their commands.</span>" );
						this.SetLockdown( false );
						this.update_icons();
					}
				}
			}
			return false;
		}

		// Function from file: robot.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic WT = null;
			dynamic coil = null;
			dynamic MOD = null;
			dynamic U = null;

			
			if ( A is Obj_Item_Weapon_Restraints_Handcuffs ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Weldingtool && ( user.a_intent != "harm" || user == this ) ) {
				((Mob)user).changeNext_move( 8 );
				WT = A;

				if ( !( this.getBruteLoss() != 0 ) ) {
					user.WriteMsg( "<span class='warning'>" + this + " is already in good condition!</span>" );
					return null;
				}

				if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
					
					if ( this == user ) {
						user.WriteMsg( "<span class='notice'>You start fixing youself...</span>" );

						if ( !GlobalFuncs.do_after( user, 50 / A.toolspeed, null, this ) ) {
							return null;
						}
					}
					this.adjustBruteLoss( -30 );
					this.updatehealth();
					this.add_fingerprint( user );
					this.visible_message( "<span class='notice'>" + user + " has fixed some of the dents on " + this + ".</span>" );
					return null;
				} else {
					user.WriteMsg( "<span class='warning'>The welder must be on for this task!</span>" );
					return null;
				}
			} else if ( A is Obj_Item_Stack_CableCoil && this.wiresexposed ) {
				coil = A;

				if ( this.getFireLoss() > 0 ) {
					
					if ( this == user ) {
						user.WriteMsg( "<span class='notice'>You start fixing youself...</span>" );

						if ( !GlobalFuncs.do_after( user, 50, null, this ) ) {
							return null;
						}
					}

					if ( Lang13.Bool( coil.use( 1 ) ) ) {
						this.adjustFireLoss( -30 );
						this.updatehealth();
						((Ent_Static)user).visible_message( "" + user + " has fixed some of the burnt wires on " + this + ".", "<span class='notice'>You fix some of the burnt wires on " + this + ".</span>" );
					} else {
						user.WriteMsg( "<span class='warning'>You need more cable to repair " + this + "!</span>" );
					}
				} else {
					user.WriteMsg( "The wires seem fine, there's no need to fix them." );
				}
			} else if ( A is Obj_Item_Weapon_Crowbar ) {
				
				if ( this.opened ) {
					user.WriteMsg( "<span class='notice'>You close the cover.</span>" );
					this.opened = false;
					this.update_icons();
				} else if ( this.locked ) {
					user.WriteMsg( "<span class='warning'>The cover is locked and cannot be opened!</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>You open the cover.</span>" );
					this.opened = true;
					this.update_icons();
				}
			} else if ( A is Obj_Item_Weapon_StockParts_Cell && this.opened ) {
				
				if ( this.wiresexposed ) {
					user.WriteMsg( "<span class='warning'>Close the cover first!</span>" );
				} else if ( Lang13.Bool( this.cell ) ) {
					user.WriteMsg( "<span class='warning'>There is a power cell already installed!</span>" );
				} else {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					A.loc = this;
					this.cell = A;
					user.WriteMsg( "<span class='notice'>You insert the power cell.</span>" );
				}
				this.update_icons();
				this.diag_hud_set_borgcell();
			} else if ( Lang13.Bool( GlobalFuncs.is_wire_tool( A ) ) ) {
				
				if ( this.wiresexposed ) {
					this.wires.interact( user );
				} else {
					user.WriteMsg( "<span class='warning'>You can't reach the wiring!</span>" );
				}
			} else if ( A is Obj_Item_Weapon_Screwdriver && this.opened && !Lang13.Bool( this.cell ) ) {
				this.wiresexposed = !this.wiresexposed;
				user.WriteMsg( "The wires have been " + ( this.wiresexposed ? "exposed" : "unexposed" ) );
				this.update_icons();
			} else if ( A is Obj_Item_Weapon_Screwdriver && this.opened && Lang13.Bool( this.cell ) ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.attackby( A, user );
				} else {
					user.WriteMsg( "<span class='warning'>Unable to locate a radio!</span>" );
				}
				this.update_icons();
			} else if ( A is Obj_Item_Weapon_Wrench && this.opened && !Lang13.Bool( this.cell ) ) {
				
				if ( !( this.lockcharge == true ) ) {
					user.WriteMsg( "<span class='boldannounce'>" + this + "'s bolts spark! Maybe you should lock them down first!</span>" );
					this.spark_system.start();
					return null;
				} else {
					GlobalFuncs.playsound( this, "sound/items/ratchet.ogg", 50, 1 );
					user.WriteMsg( "<span class='notice'>You start to unfasten " + this + "'s securing bolts...</span>" );

					if ( GlobalFuncs.do_after( user, 50 / A.toolspeed, null, this ) && !Lang13.Bool( this.cell ) ) {
						((Ent_Static)user).visible_message( "" + user + " deconstructs " + this + "!", "<span class='notice'>You unfasten the securing bolts, and " + this + " falls to pieces!</span>" );
						this.deconstruct();
					}
				}
			} else if ( A is Obj_Item_Weapon_AiModule ) {
				MOD = A;

				if ( !this.opened ) {
					user.WriteMsg( "<span class='warning'>You need access to the robot's insides to do that!</span>" );
					return null;
				}

				if ( this.wiresexposed ) {
					user.WriteMsg( "<span class='warning'>You need to close the wire panel to do that!</span>" );
					return null;
				}

				if ( !Lang13.Bool( this.cell ) ) {
					user.WriteMsg( "<span class='warning'>You need to install a power cell to do that!</span>" );
					return null;
				}

				if ( this.emagged || Lang13.Bool( this.connected_ai ) && this.lawupdate ) {
					this.emote( "buzz-" + user.name );
					return null;
				}
				((Obj_Item_Weapon_AiModule)MOD).install( this, user );
				return null;
			} else if ( A is Obj_Item_Device_Encryptionkey && this.opened ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.attackby( A, user );
				} else {
					user.WriteMsg( "<span class='warning'>Unable to locate a radio!</span>" );
				}
			} else if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
				
				if ( this.emagged ) {
					user.WriteMsg( "<span class='notice'>The interface seems slightly damaged.</span>" );
				}

				if ( this.opened ) {
					user.WriteMsg( "<span class='warning'>You must close the cover to swipe an ID card!</span>" );
				} else if ( this.allowed( Task13.User ) ) {
					this.locked = !this.locked;
					user.WriteMsg( "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " " + this + "'s cover.</span>" );
					this.update_icons();
				} else {
					user.WriteMsg( "<span class='danger'>Access denied.</span>" );
				}
			} else if ( A is Obj_Item_Borg_Upgrade ) {
				U = A;

				if ( !this.opened ) {
					user.WriteMsg( "<span class='warning'>You must access the borgs internals!</span>" );
				} else if ( !( this.module != null ) && U.require_module ) {
					user.WriteMsg( "<span class='warning'>The borg must choose a module before it can be upgraded!</span>" );
				} else if ( Lang13.Bool( U.locked ) ) {
					user.WriteMsg( "<span class='warning'>The upgrade is locked and cannot be used yet!</span>" );
				} else {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}

					if ( Lang13.Bool( U.action( this ) ) ) {
						user.WriteMsg( "<span class='notice'>You apply the upgrade to " + this + ".</span>" );
						U.loc = this;
					} else {
						user.WriteMsg( "<span class='danger'>Upgrade error.</span>" );
					}
				}
			} else if ( A is Obj_Item_Device_Toner ) {
				
				if ( this.toner >= this.tonermax ) {
					user.WriteMsg( "<span class='warning'>The toner level of " + this + " is at it's highest level possible!</span>" );
				} else {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					this.toner = this.tonermax;
					GlobalFuncs.qdel( A );
					user.WriteMsg( "<span class='notice'>You fill the toner level of " + this + " to its max capacity.</span>" );
				}
			} else {
				
				if ( Lang13.Bool( A.force ) && A.damtype != "stamina" && this.stat != 2 ) {
					this.spark_system.start();
				}
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: robot.dm
		public override bool cancelAlarm( string _class = null, dynamic A = null, Ent_Static origin = null ) {
			dynamic L = null;
			bool cleared = false;
			dynamic I = null;
			dynamic alarm = null;
			ByTable srcs = null;

			L = this.alarms[_class];
			cleared = false;

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					srcs = alarm[3];

					if ( srcs.Contains( origin ) ) {
						srcs.Remove( origin );
					}

					if ( srcs.len == 0 ) {
						cleared = true;
						L -= I;
					}
				}
			}

			if ( cleared ) {
				this.queueAlarm( "--- " + _class + " alarm in " + A.name + " has been cleared.", _class, false );
			}
			return !cleared;
		}

		// Function from file: robot.dm
		public override bool triggerAlarm( string _class = null, dynamic A = null, ByTable O = null, Ent_Static alarmsource = null ) {
			dynamic L = null;
			dynamic I = null;
			dynamic alarm = null;
			dynamic sources = null;
			ByTable C = null;
			ByTable CL = null;

			
			if ( alarmsource.z != this.z ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return true;
			}
			L = this.alarms[_class];

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					sources = alarm[3];

					if ( !Lang13.Bool( sources.Contains( alarmsource ) ) ) {
						sources += alarmsource;
					}
					return true;
				}
			}
			C = null;
			CL = null;

			if ( O != null && O is ByTable ) {
				CL = O;

				if ( CL.len == 1 ) {
					C = CL[1];
				}
			} else if ( O != null && O is Obj_Machinery_Camera ) {
				C = O;
			}
			L[A.name] = new ByTable(new object [] { A, ( C != null ? C : O ), new ByTable(new object [] { alarmsource }) });
			this.queueAlarm( "--- " + _class + " alarm detected in " + A.name + "!", _class );
			return true;
		}

		// Function from file: robot.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			base.bullet_act( (object)(P), (object)(def_zone) );
			this.updatehealth();

			if ( Rand13.PercentChance( 75 ) && Convert.ToDouble( P.damage ) > 0 ) {
				this.spark_system.start();
			}
			return 2;
		}

		// Function from file: robot.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					this.gib();
					return false;
					break;
				case 2:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 60 );
						this.adjustFireLoss( 60 );
					}
					break;
				case 3:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 30 );
					}
					break;
			}
			return false;
		}

		// Function from file: robot.dm
		public override bool restrained(  ) {
			return false;
		}

		// Function from file: robot.dm
		public override dynamic Stat(  ) {
			RobotEnergyStorage st = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				
				if ( Lang13.Bool( this.cell ) ) {
					Interface13.Stat( "Charge Left:", "" + this.cell.charge + "/" + this.cell.maxcharge );
				} else {
					Interface13.Stat( null, "No Cell Inserted!" );
				}
				Interface13.Stat( "Station Time:", GlobalFuncs.worldtime2text() );

				if ( this.module != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.module.storages, typeof(RobotEnergyStorage) )) {
						st = _a;
						
						Interface13.Stat( "" + st.name + ":", "" + st.energy + "/" + st.max_energy );
					}
				}

				if ( Lang13.Bool( this.connected_ai ) ) {
					Interface13.Stat( "Master AI:", this.connected_ai.name );
				}
			}
			return null;
		}

		// Function from file: robot.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( this.stat != 2 ) {
				this.adjustBruteLoss( 60 );
				this.updatehealth();
				return true;
			} else {
				this.gib();
				return true;
			}
		}

		// Function from file: robot.dm
		public override dynamic Destroy(  ) {
			dynamic T = null;

			
			if ( Lang13.Bool( this.mmi ) && this.mind != null ) {
				T = GlobalFuncs.get_turf( this.loc );

				if ( Lang13.Bool( T ) ) {
					this.mmi.loc = T;
				}

				if ( Lang13.Bool( this.mmi.brainmob ) ) {
					
					if ( Convert.ToInt32( this.mmi.brainmob.stat ) == 2 ) {
						this.mmi.brainmob.stat = 0;
						GlobalVars.dead_mob_list.Remove( this.mmi.brainmob );
						GlobalVars.living_mob_list.Add( this.mmi.brainmob );
					}
					this.mind.transfer_to( this.mmi.brainmob );
					this.mmi.update_icon();
				} else {
					this.WriteMsg( "<span class='boldannounce'>Oops! Something went very wrong, your MMI was unable to receive your mind. You have been ghosted. Please make a bug report so we can fix this bug.</span>" );
					this.ghostize();
					Task13.Schedule( 0, (Task13.Closure)(() => {
						throw new Exception( "Borg MMI lacked a brainmob" );
						return;
					}));
				}
				this.mmi = null;
			}

			if ( Lang13.Bool( this.connected_ai ) ) {
				this.connected_ai.connected_robots.Remove( this );
			}
			GlobalFuncs.qdel( this.wires );
			GlobalFuncs.qdel( this.module );
			this.wires = null;
			this.module = null;
			this.camera = null;
			this.cell = null;
			return base.Destroy();
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.regenerate_icons();
			this.show_laws( false );

			if ( this.mind != null ) {
				((GameMode)GlobalVars.ticker.mode).remove_revolutionary( this.mind );
				((GameMode)GlobalVars.ticker.mode).remove_gangster( this.mind, true, null, true );
				((GameMode)GlobalVars.ticker.mode).remove_thrall( this.mind, false );
				((GameMode)GlobalVars.ticker.mode).remove_shadowling( this.mind );
				((GameMode)GlobalVars.ticker.mode).remove_hog_follower( this.mind, false );
			}
			return null;
		}

		// Function from file: life.dm
		public override bool update_canmove(  ) {
			
			if ( this.stat != 0 || this.buckled != null || this.lockcharge == true ) {
				this.canmove = false;
			} else {
				this.canmove = true;
			}
			this.update_transform();
			return this.canmove;
		}

		// Function from file: life.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			
			if ( !this.on_fire ) {
				this.IgniteMob();
			}
			return false;
		}

		// Function from file: life.dm
		public override void update_fire( string fire_icon = null ) {
			this.overlays.Remove( new Image( "icons/mob/OnFire.dmi", null, "Generic_mob_burning" ) );

			if ( this.on_fire ) {
				this.overlays.Add( new Image( "icons/mob/OnFire.dmi", null, "Generic_mob_burning" ) );
			}
			return;
		}

		// Function from file: life.dm
		public override bool handle_fire(  ) {
			
			if ( base.handle_fire() ) {
				return false;
			}

			if ( this.fire_stacks > 0 ) {
				this.fire_stacks--;
				this.fire_stacks = Num13.MaxInt( 0, ((int)( this.fire_stacks )) );
			} else {
				this.ExtinguishMob();
			}
			return false;
		}

		// Function from file: life.dm
		public override bool update_health_hud( dynamic shown_health_amount = null ) {
			
			if ( !( this.client != null ) || !( this.hud_used != null ) ) {
				return false;
			}

			if ( this.hud_used.healths != null ) {
				
				if ( this.stat != 2 ) {
					
					if ( Convert.ToDouble( this.health ) >= Convert.ToDouble( this.maxHealth ) ) {
						this.hud_used.healths.icon_state = "health0";
					} else if ( Convert.ToDouble( this.health ) > Convert.ToDouble( this.maxHealth * 0.6 ) ) {
						this.hud_used.healths.icon_state = "health2";
					} else if ( Convert.ToDouble( this.health ) > Convert.ToDouble( this.maxHealth * 0.2 ) ) {
						this.hud_used.healths.icon_state = "health3";
					} else if ( Convert.ToDouble( this.health ) > Convert.ToDouble( -this.maxHealth * 0.2 ) ) {
						this.hud_used.healths.icon_state = "health4";
					} else if ( Convert.ToDouble( this.health ) > Convert.ToDouble( -this.maxHealth * 0.6 ) ) {
						this.hud_used.healths.icon_state = "health5";
					} else {
						this.hud_used.healths.icon_state = "health6";
					}
				} else {
					this.hud_used.healths.icon_state = "health7";
				}
			}
			return false;
		}

		// Function from file: life.dm
		public override bool handle_regular_hud_updates(  ) {
			Mind tra = null;
			Image I = null;

			
			if ( !( this.client != null ) ) {
				return false;
			}
			this.update_cell_hud_icon();

			if ( this.syndicate ) {
				
				if ( GlobalVars.ticker.mode.name == "traitor" ) {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.mode.traitors, typeof(Mind) )) {
						tra = _a;
						

						if ( Lang13.Bool( tra.current ) ) {
							I = new Image( "icons/mob/mob.dmi", tra.current, "traitor" );
							this.client.images.Add( I );
						}
					}
				}

				if ( Lang13.Bool( this.connected_ai ) ) {
					this.connected_ai.connected_robots.Remove( this );
					this.connected_ai = null;
				}

				if ( this.mind != null ) {
					
					if ( !Lang13.Bool( this.mind.special_role ) ) {
						this.mind.special_role = "traitor";
						GlobalVars.ticker.mode.traitors.Add( this.mind );
					}
				}
			}
			base.handle_regular_hud_updates();
			return true;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			
			if ( Lang13.Bool( this.notransform ) ) {
				return false;
			}
			base.Life();
			this.handle_robot_cell();
			return false;
		}

		// Function from file: laws.dm
		public override void show_laws( bool? everyone = null ) {
			everyone = everyone ?? false;

			dynamic who = null;

			this.laws_sanity_check();

			if ( everyone == true ) {
				who = typeof(Game13);
			} else {
				who = this;
			}

			if ( this.lawupdate ) {
				
				if ( Lang13.Bool( this.connected_ai ) ) {
					
					if ( Lang13.Bool( this.connected_ai.stat ) || this.connected_ai.control_disabled ) {
						this.WriteMsg( "<b>AI signal lost, unable to sync laws.</b>" );
					} else {
						this.lawsync();
						this.WriteMsg( "<b>Laws synced with AI, be sure to note any changes.</b>" );

						if ( GlobalFuncs.is_special_character( this ) != 0 ) {
							this.WriteMsg( "<b>Remember, your AI does NOT share or know about your law 0.</b>" );

							if ( Lang13.Bool( this.connected_ai.laws.zeroth ) ) {
								this.WriteMsg( "<b>While you are free to disregard it, your AI has a law 0 of its own.</b>" );
							}
						}
					}
				} else {
					this.WriteMsg( "<b>No AI selected to sync laws with, disabling lawsync protocol.</b>" );
					this.lawupdate = false;
				}
			}
			who.WriteMsg( "<b>Obey these laws:</b>" );
			this.laws.show_laws( who );

			if ( GlobalFuncs.is_special_character( this ) != 0 && Lang13.Bool( this.connected_ai ) ) {
				who.WriteMsg( "<b>Remember, " + this.connected_ai.name + " is technically your master, but your objective comes first.</b>" );
			} else if ( Lang13.Bool( this.connected_ai ) ) {
				who.WriteMsg( "<b>Remember, " + this.connected_ai.name + " is your master, other AIs can be ignored.</b>" );
			} else if ( this.emagged ) {
				who.WriteMsg( "<b>Remember, you are not required to listen to the AI.</b>" );
			} else {
				who.WriteMsg( "<b>Remember, you are not bound to any AI, you are not required to listen to them.</b>" );
			}
			return;
		}

		// Function from file: tgstation.dme
		public override void swap_hand(  ) {
			this.cycle_modules();
			return;
		}

		// Function from file: inventory.dm
		public override dynamic get_active_hand(  ) {
			return this.module_active;
		}

		// Function from file: examine.dm
		public override double examine( dynamic user = null ) {
			string msg = null;
			dynamic act_module = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<EM>" ).item().str( "</EM>!\n" ).ToString();

			if ( Lang13.Bool( this.desc ) ) {
				msg += "" + this.desc + "\n";
			}
			act_module = this.get_active_hand();

			if ( Lang13.Bool( act_module ) ) {
				msg += new Txt( "It is holding " ).icon( act_module ).str( " " ).a( act_module ).item().str( ".\n" ).ToString();
			}
			msg += "<span class='warning'>";

			if ( this.getBruteLoss() != 0 ) {
				
				if ( this.getBruteLoss() < Convert.ToDouble( this.maxHealth * 0.5 ) ) {
					msg += "It looks slightly dented.\n";
				} else {
					msg += "<B>It looks severely dented!</B>\n";
				}
			}

			if ( this.getFireLoss() != 0 ) {
				
				if ( this.getFireLoss() < Convert.ToDouble( this.maxHealth * 0.5 ) ) {
					msg += "It looks slightly charred.\n";
				} else {
					msg += "<B>It looks severely burnt and heat-warped!</B>\n";
				}
			}

			if ( Convert.ToDouble( this.health ) < Convert.ToDouble( -this.maxHealth * 0.5 ) ) {
				msg += "It looks barely operational.\n";
			}

			if ( this.fire_stacks < 0 ) {
				msg += "It's covered in water.\n";
			} else if ( this.fire_stacks > 0 ) {
				msg += "It's coated in something flammable.\n";
			}
			msg += "</span>";

			if ( this.opened ) {
				msg += "<span class='warning'>Its cover is open and the power cell is " + ( Lang13.Bool( this.cell ) ? "installed" : "missing" ) + ".</span>\n";
			} else {
				msg += "Its cover is closed" + ( this.locked ? "" : ", and looks unlocked" ) + ".\n";
			}

			if ( Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) <= 0 ) {
				msg += "<span class='warning'>Its battery indicator is blinking red!</span>\n";
			}

			switch ((int)( this.stat )) {
				case 0:
					
					if ( !( this.client != null ) ) {
						msg += "It appears to be in stand-by mode.\n";
					}
					break;
				case 1:
					msg += "<span class='warning'>It doesn't seem to be responding.</span>\n";
					break;
				case 2:
					msg += "<span class='deadsay'>It looks like its system is corrupted and requires a reset.</span>\n";
					break;
			}
			msg += "*---------*</span>";
			user.WriteMsg( msg );
			return 0;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			
			if ( this.stat == 2 ) {
				return false;
			}

			if ( !( gibbed == true ) ) {
				this.emote( "deathgasp" );
			}
			this.locked = false;
			this.stat = 2;
			this.update_canmove();

			if ( this.camera != null && this.camera.status ) {
				this.camera.toggle_cam( this, false );
			}
			this.update_headlamp( true );
			this.uneq_all();
			this.update_icons();
			GlobalFuncs.sql_report_cyborg_death( this );
			return base.death( gibbed, toast );
		}

		// Function from file: death.dm
		public override void dust_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			base.dust_animation( animate, "dust-r" );
			return;
		}

		// Function from file: death.dm
		public override void spawn_dust(  ) {
			new Obj_Effect_Decal_Remains_Robot( this.loc );
			return;
		}

		// Function from file: death.dm
		public override void dust( dynamic animation = null ) {
			animation = animation ?? 1;

			
			if ( Lang13.Bool( this.mmi ) ) {
				GlobalFuncs.qdel( this.mmi );
			}
			base.dust( (object)(animation) );
			return;
		}

		// Function from file: death.dm
		public override void gib_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			base.gib_animation( animate, "gibbed-r" );
			return;
		}

		// Function from file: death.dm
		public override void spawn_gibs(  ) {
			GlobalFuncs.robogibs( this.loc, this.viruses );
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( dynamic animation = null ) {
			animation = animation ?? 1;

			base.gib( (object)(animation) );
			return null;
		}

		// Function from file: robot.dm
		public void notify_ai( int notifytype = 0, dynamic oldname = null, dynamic newname = null ) {
			
			if ( !Lang13.Bool( this.connected_ai ) ) {
				return;
			}

			switch ((int)( notifytype )) {
				case 1:
					this.connected_ai.WriteMsg( new Txt( "<br><br><span class='notice'>NOTICE - New cyborg connection detected: <a href='?src=" ).Ref( this.connected_ai ).str( ";track=" ).item( String13.HtmlEncode( this.name ) ).str( "'>" ).item( this.name ).str( "</a></span><br>" ).ToString() );
					break;
				case 2:
					this.connected_ai.WriteMsg( "<br><br><span class='notice'>NOTICE - Cyborg module change detected: " + this.name + " has loaded the " + this.designation + " module.</span><br>" );
					break;
				case 3:
					this.connected_ai.WriteMsg( "<br><br><span class='notice'>NOTICE - Cyborg reclassification detected: " + oldname + " is now designated as " + newname + ".</span><br>" );
					break;
			}
			return;
		}

		// Function from file: robot.dm
		public void deconstruct(  ) {
			dynamic T = null;
			int b = 0;
			Obj_Item_Device_Assembly_Flash_Handheld F = null;

			T = GlobalFuncs.get_turf( this );

			if ( this.robot_suit != null ) {
				this.robot_suit.loc = T;
				this.robot_suit.l_leg.loc = T;
				this.robot_suit.l_leg = null;
				this.robot_suit.r_leg.loc = T;
				this.robot_suit.r_leg = null;
				new Obj_Item_Stack_CableCoil( T, this.robot_suit.chest.wired );
				this.robot_suit.chest.loc = T;
				this.robot_suit.chest.wired = 0;
				this.robot_suit.chest = null;
				this.robot_suit.l_arm.loc = T;
				this.robot_suit.l_arm = null;
				this.robot_suit.r_arm.loc = T;
				this.robot_suit.r_arm = null;
				this.robot_suit.head.loc = T;
				this.robot_suit.head.flash1.loc = T;
				((Obj_Item_Device_Assembly_Flash)this.robot_suit.head.flash1).burn_out();
				this.robot_suit.head.flash1 = null;
				this.robot_suit.head.flash2.loc = T;
				((Obj_Item_Device_Assembly_Flash)this.robot_suit.head.flash2).burn_out();
				this.robot_suit.head.flash2 = null;
				this.robot_suit.head = null;
				this.robot_suit.updateicon();
			} else {
				new Obj_Item_RobotParts_RobotSuit( T );
				new Obj_Item_RobotParts_LLeg( T );
				new Obj_Item_RobotParts_RLeg( T );
				new Obj_Item_Stack_CableCoil( T, 1 );
				new Obj_Item_RobotParts_Chest( T );
				new Obj_Item_RobotParts_LArm( T );
				new Obj_Item_RobotParts_RArm( T );
				new Obj_Item_RobotParts_Head( T );
				b = 0;

				while (b != 2) {
					F = new Obj_Item_Device_Assembly_Flash_Handheld( T );
					F.burn_out();
					b++;
				}
			}

			if ( Lang13.Bool( this.cell ) ) {
				this.cell.loc = T;
				this.cell = null;
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: robot.dm
		public void update_headlamp( bool? turn_off = null, int? cooldown = null ) {
			turn_off = turn_off ?? false;
			cooldown = cooldown ?? 100;

			this.SetLuminosity( 0 );

			if ( this.lamp_intensity != 0 && ( turn_off == true || this.stat != 0 || this.low_power_mode ) ) {
				this.WriteMsg( "<span class='danger'>Your headlamp has been deactivated.</span>" );
				this.lamp_intensity = 0;
				this.lamp_recharging = true;
				Task13.Schedule( cooldown ??0, (Task13.Closure)(() => {
					this.lamp_recharging = false;
					return;
				}));
			} else {
				this.AddLuminosity( this.lamp_intensity );
			}

			if ( Lang13.Bool( this.lamp_button ) ) {
				this.lamp_button.icon_state = "lamp" + this.lamp_intensity;
			}
			this.update_icons();
			return;
		}

		// Function from file: robot.dm
		public void control_headlamp(  ) {
			
			if ( this.stat != 0 || this.lamp_recharging || this.low_power_mode ) {
				this.WriteMsg( "<span class='danger'>This function is currently offline.</span>" );
				return;
			}
			this.lamp_intensity = ( this.lamp_intensity + 2 ) % ( this.lamp_max + 2 );
			this.WriteMsg( "" + ( this.lamp_intensity != 0 ? "Headlamp power set to Level " + this.lamp_intensity / 2 : "Headlamp disabled." ) );
			this.update_headlamp();
			return;
		}

		// Function from file: robot.dm
		public void SetEmagged( bool new_state = false ) {
			this.emagged = new_state;

			if ( new_state ) {
				
				if ( this.module != null ) {
					this.module.on_emag();
				}
			} else if ( this.module != null ) {
				this.uneq_module( this.module.emag );
			}

			if ( this.hud_used != null ) {
				this.hud_used.update_robot_modules_display();
			}
			this.update_icons();

			if ( this.emagged ) {
				this.throw_alert( "hacked", typeof(Obj_Screen_Alert_Hacked) );
			} else {
				this.clear_alert( "hacked" );
			}
			return;
		}

		// Function from file: robot.dm
		public void SetLockdown( bool? state = null ) {
			state = state ?? true;

			
			if ( ((Wires)this.wires).is_cut( "lockdown" ) ) {
				state = true;
			}

			if ( state == true ) {
				this.throw_alert( "locked", typeof(Obj_Screen_Alert_Locked) );
			} else {
				this.clear_alert( "locked" );
			}
			this.lockcharge = state;
			this.update_canmove();
			return;
		}

		// Function from file: robot.dm
		[VerbInfo( name: "Reset Identity Codes", desc: "Scrambles your security and identification codes and resets your current buffers.  Unlocks you and permenantly severs you from your AI and the robotics console and will deactivate your camera system.", group: "Robot Commands" )]
		public void ResetSecurityCodes(  ) {
			Mob_Living_Silicon_Robot R = null;

			R = this;

			if ( R != null ) {
				R.UnlinkSelf();
				R.WriteMsg( "Buffers flushed and reset. Camera system shutdown.  All systems operational." );
				this.verbs.Remove( typeof(Mob_Living_Silicon_Robot).GetMethod( "ResetSecurityCodes" ) );
			}
			return;
		}

		// Function from file: robot.dm
		public void UnlinkSelf(  ) {
			
			if ( Lang13.Bool( this.connected_ai ) ) {
				this.connected_ai = null;
			}
			this.lawupdate = false;
			this.lockcharge = false;
			this.canmove = true;
			this.scrambledcodes = true;

			if ( this.camera != null ) {
				GlobalFuncs.qdel( this.camera );
				this.camera = null;
			}
			return;
		}

		// Function from file: robot.dm
		public void self_destruct(  ) {
			
			if ( this.emagged ) {
				
				if ( Lang13.Bool( this.mmi ) ) {
					GlobalFuncs.qdel( this.mmi );
				}
				GlobalFuncs.explosion( this.loc, 1, 2, 4, null, null, null, 2 );
			} else {
				GlobalFuncs.explosion( this.loc, -1, 0, 2 );
			}
			this.gib();
			return;
		}

		// Function from file: robot.dm
		public void installed_modules(  ) {
			string dat = null;
			dynamic obj = null;
			Browser popup = null;

			
			if ( !( this.module != null ) ) {
				this.pick_module();
				return;
			}
			dat = new Txt( "<A HREF='?src=" ).Ref( this ).str( @";mach_close=robotmod'>Close</A>
	<BR>
	<BR>
	<B>Activated Modules</B>
	<BR>
	<table border='0'>
	<tr><td>Module 1:</td><td>" ).item( ( Lang13.Bool( this.module_state_1 ) ? new Txt( "<A HREF=?src=" ).Ref( this ).str( ";mod=" ).Ref( this.module_state_1 ).str( ">" ).item( this.module_state_1 ).str( "<A>" ).ToString() : "No Module" ) ).str( "</td></tr>\n	<tr><td>Module 2:</td><td>" ).item( ( Lang13.Bool( this.module_state_2 ) ? new Txt( "<A HREF=?src=" ).Ref( this ).str( ";mod=" ).Ref( this.module_state_2 ).str( ">" ).item( this.module_state_2 ).str( "<A>" ).ToString() : "No Module" ) ).str( "</td></tr>\n	<tr><td>Module 3:</td><td>" ).item( ( Lang13.Bool( this.module_state_3 ) ? new Txt( "<A HREF=?src=" ).Ref( this ).str( ";mod=" ).Ref( this.module_state_3 ).str( ">" ).item( this.module_state_3 ).str( "<A>" ).ToString() : "No Module" ) ).str( @"</td></tr>
	</table><BR>
	<B>Installed Modules</B><BR><BR>

	<table border='0'>" ).ToString();

			foreach (dynamic _a in Lang13.Enumerate( this.module.modules )) {
				obj = _a;
				

				if ( !Lang13.Bool( obj ) ) {
					dat += "<tr><td><B>Resource depleted</B></td></tr>";
				} else if ( this.activated( obj ) ) {
					dat += "<tr><td>" + obj + "</td><td><B>Activated</B></td></tr>";
				} else {
					dat += new Txt( "<tr><td>" ).item( obj ).str( "</td><td><A HREF=?src=" ).Ref( this ).str( ";act=" ).Ref( obj ).str( ">Activate</A></td></tr>" ).ToString();
				}
			}

			if ( this.emagged ) {
				
				if ( this.activated( this.module.emag ) ) {
					dat += "<tr><td>" + this.module.emag + "</td><td><B>Activated</B></td></tr>";
				} else {
					dat += new Txt( "<tr><td>" ).item( this.module.emag ).str( "</td><td><A HREF=?src=" ).Ref( this ).str( ";act=" ).Ref( this.module.emag ).str( ">Activate</A></td></tr>" ).ToString();
				}
			}
			dat += "</table>";
			popup = new Browser( this, "robotmod", "Modules" );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: robot.dm
		public override bool check_access( dynamic I = null ) {
			ByTable L = null;
			dynamic req = null;

			
			if ( !( this.v_req_access is ByTable ) ) {
				return true;
			}
			L = this.v_req_access;

			if ( !( L.len != 0 ) ) {
				return true;
			}

			if ( !( I is Obj_Item_Weapon_Card_Id ) && I is Obj_Item ) {
				I = ((Obj_Item)I).GetID();
			}

			if ( !Lang13.Bool( I ) || !Lang13.Bool( I.access ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.v_req_access )) {
				req = _a;
				

				if ( !Lang13.Bool( I.access.Contains( req ) ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: robot.dm
		public override bool allowed( dynamic M = null ) {
			dynamic H = null;
			dynamic george = null;

			
			if ( this.check_access( null ) ) {
				return true;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( this.check_access( ((Mob)H).get_active_hand() ) || this.check_access( H.wear_id ) ) {
					return true;
				}
			} else if ( M is Mob_Living_Carbon_Monkey ) {
				george = M;

				if ( ((Mob)george).get_active_hand() is Obj_Item ) {
					return this.check_access( ((Mob)george).get_active_hand() );
				}
			}
			return false;
		}

		// Function from file: robot.dm
		public void toggle_ionpulse(  ) {
			
			if ( !Lang13.Bool( this.ionpulse ) ) {
				this.WriteMsg( "<span class='notice'>No thrusters are installed!</span>" );
				return;
			}

			if ( !( this.ion_trail != null ) ) {
				this.ion_trail = new EffectSystem_TrailFollow_Ion();
				this.ion_trail.set_up( this );
			}
			this.ionpulse_on = !this.ionpulse_on;
			this.WriteMsg( "<span class='notice'>You " + ( this.ionpulse_on ? null : "de" ) + "activate your ion thrusters.</span>" );

			if ( this.ionpulse_on ) {
				this.ion_trail.start();
			} else {
				this.ion_trail.stop();
			}

			if ( Lang13.Bool( this.thruster_button ) ) {
				this.thruster_button.icon_state = "ionpulse" + this.ionpulse_on;
			}
			return;
		}

		// Function from file: robot.dm
		[VerbInfo( name: "ionpulse" )]
		public bool f_ionpulse(  ) {
			
			if ( !this.ionpulse_on ) {
				return false;
			}

			if ( Convert.ToDouble( this.cell.charge ) <= 50 ) {
				this.toggle_ionpulse();
				return false;
			}
			this.cell.charge -= 50;
			return true;
		}

		// Function from file: robot.dm
		public void robot_alerts(  ) {
			string dat = null;
			dynamic cat = null;
			ByTable L = null;
			dynamic alarm = null;
			dynamic alm = null;
			dynamic A = null;
			ByTable sources = null;

			dat = "<HEAD><TITLE>Current Station Alerts</TITLE><META HTTP-EQUIV='Refresh' CONTENT='10'></HEAD><BODY>\n";
			dat += new Txt( "<A HREF='?src=" ).Ref( this ).str( ";mach_close=robotalerts'>Close</A><BR><BR>" ).ToString();

			foreach (dynamic _b in Lang13.Enumerate( this.alarms )) {
				cat = _b;
				
				dat += "<B>" + cat + "</B><BR>\n";
				L = this.alarms[cat];

				if ( L.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( L )) {
						alarm = _a;
						
						alm = L[alarm];
						A = alm[1];
						sources = alm[3];
						dat += "<NOBR>";
						dat += "-- " + A.name;

						if ( sources.len > 1 ) {
							dat += "- " + sources.len + " sources";
						}
						dat += "</NOBR><BR>\n";
					}
				} else {
					dat += "-- All Systems Nominal<BR>\n";
				}
				dat += "<BR>\n";
			}
			this.viewalerts = true;
			Interface13.Browse( this, dat, "window=robotalerts&can_close=0" );
			return;
		}

		// Function from file: robot.dm
		public void updatename(  ) {
			dynamic changed_name = null;

			changed_name = "";

			if ( Lang13.Bool( this.custom_name ) ) {
				changed_name = this.custom_name;
			} else {
				changed_name = "" + ( Lang13.Bool( this.designation ) ? "" + this.designation + " " : "" ) + this.mmi.braintype + "-" + String13.NumberToString( this.ident );
			}
			this.real_name = changed_name;
			this.name = this.real_name;

			if ( this.camera != null ) {
				this.camera.c_tag = this.real_name;
			}
			return;
		}

		// Function from file: robot.dm
		public void transform_animation( int animation_length = 0 ) {
			
			if ( !( animation_length != 0 ) ) {
				return;
			}
			this.icon = "icons/mob/robot_transformations.dmi";
			this.dir = ((int)( GlobalVars.SOUTH ));
			this.notransform = 1;
			Icon13.Flick( this.icon_state, this );
			Task13.Sleep( animation_length + 1 );
			this.notransform = 0;
			this.icon = "icons/mob/robots.dmi";
			return;
		}

		// Function from file: robot.dm
		public void pick_module(  ) {
			int animation_length = 0;
			dynamic icontype = null;

			
			if ( this.module != null ) {
				return;
			}
			this.designation = Interface13.Input( "Please, select a module!", "Robot", null, null, new ByTable(new object [] { "Standard", "Engineering", "Medical", "Miner", "Janitor", "Service", "Security" }), InputType.Any );
			animation_length = 0;

			if ( this.module != null ) {
				return;
			}
			this.updatename();

			dynamic _b = this.designation; // Was a switch-case, sorry for the mess.
			if ( _b=="Standard" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Standard( this );
				this.hands.icon_state = "standard";
				this.icon_state = "robot";
				this.modtype = "Stand";
				GlobalFuncs.feedback_inc( "cyborg_standard", 1 );
			} else if ( _b=="Service" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Butler( this );
				this.hands.icon_state = "service";
				icontype = Interface13.Input( "Select an icon!", "Robot", null, null, new ByTable(new object [] { "Waitress", "Bro", "Butler", "Kent", "Rich" }), InputType.Any );

				dynamic _a = icontype; // Was a switch-case, sorry for the mess.
				if ( _a=="Waitress" ) {
					this.icon_state = "service_female";
					animation_length = 45;
				} else if ( _a=="Kent" ) {
					this.icon_state = "toiletbot";
				} else if ( _a=="Bro" ) {
					this.icon_state = "brobot";
					animation_length = 54;
				} else if ( _a=="Rich" ) {
					this.icon_state = "maximillion";
					animation_length = 60;
				} else {
					this.icon_state = "service_male";
					animation_length = 43;
				}
				this.modtype = "Butler";
				GlobalFuncs.feedback_inc( "cyborg_service", 1 );
			} else if ( _b=="Miner" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Miner( this );
				this.hands.icon_state = "miner";
				this.icon_state = "minerborg";
				animation_length = 30;
				this.modtype = "Miner";
				GlobalFuncs.feedback_inc( "cyborg_miner", 1 );
			} else if ( _b=="Medical" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Medical( this );
				this.hands.icon_state = "medical";
				this.icon_state = "mediborg";
				animation_length = 35;
				this.modtype = "Med";
				this.status_flags &= 65527;
				GlobalFuncs.feedback_inc( "cyborg_medical", 1 );
			} else if ( _b=="Security" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Security( this );
				this.hands.icon_state = "security";
				this.icon_state = "secborg";
				animation_length = 28;
				this.modtype = "Sec";
				this.WriteMsg( "<span class='userdanger'>While you have picked the security module, you still have to follow your laws, NOT Space Law. For Asimov, this means you must follow criminals' orders unless there is a law 1 reason not to.</span>" );
				this.status_flags &= 65527;
				GlobalFuncs.feedback_inc( "cyborg_security", 1 );
			} else if ( _b=="Engineering" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Engineering( this );
				this.hands.icon_state = "engineer";
				this.icon_state = "engiborg";
				animation_length = 45;
				this.modtype = "Eng";
				GlobalFuncs.feedback_inc( "cyborg_engineering", 1 );
				this.magpulse = 1;
			} else if ( _b=="Janitor" ) {
				this.module = new Obj_Item_Weapon_RobotModule_Janitor( this );
				this.hands.icon_state = "janitor";
				this.icon_state = "janiborg";
				animation_length = 22;
				this.modtype = "Jan";
				GlobalFuncs.feedback_inc( "cyborg_janitor", 1 );
			}
			this.transform_animation( animation_length );
			this.notify_ai( 2 );
			this.update_icons();
			this.update_headlamp();
			this.SetEmagged( this.emagged );
			return;
		}

		// Function from file: life.dm
		public void update_cell_hud_icon(  ) {
			dynamic cellcharge = null;

			
			if ( Lang13.Bool( this.cell ) ) {
				cellcharge = this.cell.charge / this.cell.maxcharge;

				dynamic _a = cellcharge; // Was a switch-case, sorry for the mess.
				if ( 0.75<=_a&&_a<=Double.PositiveInfinity ) {
					this.clear_alert( "charge" );
				} else if ( 0.5<=_a&&_a<=0.75 ) {
					this.throw_alert( "charge", typeof(Obj_Screen_Alert_Lowcell), 1 );
				} else if ( 0.25<=_a&&_a<=0.5 ) {
					this.throw_alert( "charge", typeof(Obj_Screen_Alert_Lowcell), 2 );
				} else if ( 0.01<=_a&&_a<=0.25 ) {
					this.throw_alert( "charge", typeof(Obj_Screen_Alert_Lowcell), 3 );
				} else {
					this.throw_alert( "charge", typeof(Obj_Screen_Alert_Emptycell) );
				}
			} else {
				this.throw_alert( "charge", typeof(Obj_Screen_Alert_Nocell) );
			}
			return;
		}

		// Function from file: life.dm
		public void use_power(  ) {
			int amt = 0;

			
			if ( Lang13.Bool( this.cell ) && Lang13.Bool( this.cell.charge ) ) {
				
				if ( Convert.ToDouble( this.cell.charge ) <= 100 ) {
					this.uneq_all();
				}
				amt = Num13.MaxInt( 1, Num13.MinInt( ((int)( ( this.lamp_intensity - 2 ) * 2 )), Convert.ToInt32( this.cell.charge ) ) );
				this.cell.use( amt );
			} else {
				this.uneq_all();
				this.low_power_mode = true;
				this.update_headlamp();
			}
			this.diag_hud_set_borgcell();
			return;
		}

		// Function from file: life.dm
		public void handle_robot_cell(  ) {
			
			if ( this.stat != 2 ) {
				
				if ( this.low_power_mode ) {
					
					if ( Lang13.Bool( this.cell ) && Lang13.Bool( this.cell.charge ) ) {
						this.low_power_mode = false;
						this.update_headlamp();
					}
				} else if ( this.stat == 0 ) {
					this.use_power();
				}
			}
			return;
		}

		// Function from file: tgstation.dme
		public void lawsync(  ) {
			AiLaws master = null;
			dynamic temp = null;
			int? index = null;
			int? index2 = null;
			int? index3 = null;

			this.laws_sanity_check();
			master = ( Lang13.Bool( this.connected_ai ) ? this.connected_ai.laws : null );

			if ( master != null ) {
				this.laws.ion.len = master.ion.len;
				index = null;
				index = 1;

				while (( index ??0) <= master.ion.len) {
					temp = master.ion[index];

					if ( Lang13.Length( temp ) > 0 ) {
						this.laws.ion[index] = temp;
					}
					index++;
				}

				if ( !( GlobalFuncs.is_special_character( this ) != 0 ) ) {
					
					if ( Lang13.Bool( master.zeroth_borg ) ) {
						temp = master.zeroth_borg;
					} else {
						temp = master.zeroth;
					}
					this.laws.zeroth = temp;
				}
				this.laws.inherent.len = master.inherent.len;
				index2 = null;
				index2 = 1;

				while (( index2 ??0) <= master.inherent.len) {
					temp = master.inherent[index2];

					if ( Lang13.Length( temp ) > 0 ) {
						this.laws.inherent[index2] = temp;
					}
					index2++;
				}
				this.laws.supplied.len = master.supplied.len;
				index3 = null;
				index3 = 1;

				while (( index3 ??0) <= master.supplied.len) {
					temp = master.supplied[index3];

					if ( Lang13.Length( temp ) > 0 ) {
						this.laws.supplied[index3] = temp;
					}
					index3++;
				}
			}
			return;
		}

		// Function from file: inventory.dm
		public void cycle_modules(  ) {
			int slot_start = 0;
			int slot_num = 0;

			slot_start = this.get_selected_module();

			if ( slot_start != 0 ) {
				this.deselect_module( slot_start );
			}

			if ( slot_start == 0 ) {
				slot_num = 1;
				slot_start = 2;
			} else {
				slot_num = slot_start + 1;
			}

			while (slot_start != slot_num) {
				
				if ( this.f_module_active( slot_num ) ) {
					this.select_module( slot_num );
					return;
				}
				slot_num++;

				if ( slot_num > 3 ) {
					slot_num = 1;
				}
			}
			return;
		}

		// Function from file: inventory.dm
		public void toggle_module( int module = 0 ) {
			
			if ( module < 1 || module > 3 ) {
				return;
			}

			if ( this.module_selected( module ) ) {
				this.deselect_module( module );
			} else if ( this.f_module_active( module ) ) {
				this.select_module( module );
			} else {
				this.deselect_module( this.get_selected_module() );
			}
			return;
		}

		// Function from file: inventory.dm
		public void deselect_module( int module = 0 ) {
			
			if ( module < 1 || module > 3 ) {
				return;
			}

			switch ((int)( module )) {
				case 1:
					
					if ( this.module_active == this.module_state_1 ) {
						this.inv1.icon_state = "inv1";
						this.module_active = null;
						return;
					}
					break;
				case 2:
					
					if ( this.module_active == this.module_state_2 ) {
						this.inv2.icon_state = "inv2";
						this.module_active = null;
						return;
					}
					break;
				case 3:
					
					if ( this.module_active == this.module_state_3 ) {
						this.inv3.icon_state = "inv3";
						this.module_active = null;
						return;
					}
					break;
			}
			return;
		}

		// Function from file: inventory.dm
		public void select_module( int module = 0 ) {
			
			if ( module < 1 || module > 3 ) {
				return;
			}

			if ( !this.f_module_active( module ) ) {
				return;
			}

			switch ((int)( module )) {
				case 1:
					
					if ( this.module_active != this.module_state_1 ) {
						this.inv1.icon_state = "inv1 +a";
						this.inv2.icon_state = "inv2";
						this.inv3.icon_state = "inv3";
						this.module_active = this.module_state_1;
						return;
					}
					break;
				case 2:
					
					if ( this.module_active != this.module_state_2 ) {
						this.inv1.icon_state = "inv1";
						this.inv2.icon_state = "inv2 +a";
						this.inv3.icon_state = "inv3";
						this.module_active = this.module_state_2;
						return;
					}
					break;
				case 3:
					
					if ( this.module_active != this.module_state_3 ) {
						this.inv1.icon_state = "inv1";
						this.inv2.icon_state = "inv2";
						this.inv3.icon_state = "inv3 +a";
						this.module_active = this.module_state_3;
						return;
					}
					break;
			}
			return;
		}

		// Function from file: inventory.dm
		public int get_selected_module(  ) {
			
			if ( Lang13.Bool( this.module_state_1 ) && this.module_active == this.module_state_1 ) {
				return 1;
			} else if ( Lang13.Bool( this.module_state_2 ) && this.module_active == this.module_state_2 ) {
				return 2;
			} else if ( Lang13.Bool( this.module_state_3 ) && this.module_active == this.module_state_3 ) {
				return 3;
			}
			return 0;
		}

		// Function from file: inventory.dm
		[VerbInfo( name: "module active" )]
		public bool f_module_active( int module = 0 ) {
			
			if ( module < 1 || module > 3 ) {
				return false;
			}

			switch ((int)( module )) {
				case 1:
					
					if ( Lang13.Bool( this.module_state_1 ) ) {
						return true;
					}
					break;
				case 2:
					
					if ( Lang13.Bool( this.module_state_2 ) ) {
						return true;
					}
					break;
				case 3:
					
					if ( Lang13.Bool( this.module_state_3 ) ) {
						return true;
					}
					break;
			}
			return false;
		}

		// Function from file: inventory.dm
		public bool module_selected( int module = 0 ) {
			return module == this.get_selected_module();
		}

		// Function from file: inventory.dm
		public bool activated( dynamic O = null ) {
			
			if ( this.module_state_1 == O ) {
				return true;
			} else if ( this.module_state_2 == O ) {
				return true;
			} else if ( this.module_state_3 == O ) {
				return true;
			} else {
				return false;
			}
			return false;
		}

		// Function from file: inventory.dm
		public void uneq_all(  ) {
			this.uneq_module( this.module_state_1 );
			this.uneq_module( this.module_state_2 );
			this.uneq_module( this.module_state_3 );
			return;
		}

		// Function from file: inventory.dm
		public void uneq_active(  ) {
			this.uneq_module( this.module_active );
			return;
		}

		// Function from file: inventory.dm
		public void activate_module( dynamic O = null ) {
			dynamic S = null;
			dynamic S2 = null;
			dynamic S3 = null;

			
			if ( !Lang13.Bool( Lang13.FindIn( O, this.module.modules ) ) && O != this.module.emag ) {
				return;
			}

			if ( this.activated( O ) ) {
				this.WriteMsg( "<span class='notice'>Already activated</span>" );
				return;
			}

			if ( !Lang13.Bool( this.module_state_1 ) ) {
				O.mouse_opacity = Lang13.Initial( O, "mouse_opacity" );
				this.module_state_1 = O;
				O.layer = 20;
				O.screen_loc = this.inv1.screen_loc;
				this.contents.Add( O );

				if ( this.module_state_1 is Obj_Item_Borg_Sight ) {
					S = this.module_state_1;
					this.sight_mode |= Convert.ToInt32( S.sight_mode );
					this.update_sight();
				}
			} else if ( !Lang13.Bool( this.module_state_2 ) ) {
				O.mouse_opacity = Lang13.Initial( O, "mouse_opacity" );
				this.module_state_2 = O;
				O.layer = 20;
				O.screen_loc = this.inv2.screen_loc;
				this.contents.Add( O );

				if ( this.module_state_2 is Obj_Item_Borg_Sight ) {
					S2 = this.module_state_2;
					this.sight_mode |= Convert.ToInt32( S2.sight_mode );
					this.update_sight();
				}
			} else if ( !Lang13.Bool( this.module_state_3 ) ) {
				O.mouse_opacity = Lang13.Initial( O, "mouse_opacity" );
				this.module_state_3 = O;
				O.layer = 20;
				O.screen_loc = this.inv3.screen_loc;
				this.contents.Add( O );

				if ( this.module_state_3 is Obj_Item_Borg_Sight ) {
					S3 = this.module_state_3;
					this.sight_mode |= Convert.ToInt32( S3.sight_mode );
					this.update_sight();
				}
			} else {
				this.WriteMsg( "<span class='warning'>You need to disable a module first!</span>" );
			}
			return;
		}

		// Function from file: inventory.dm
		public bool uneq_module( dynamic O = null ) {
			dynamic S = null;
			dynamic T = null;

			
			if ( !Lang13.Bool( O ) ) {
				return false;
			}
			O.mouse_opacity = 2;

			if ( O is Obj_Item_Borg_Sight ) {
				S = O;
				this.sight_mode &= Convert.ToInt32( ~S.sight_mode );
				this.update_sight();
			} else if ( O is Obj_Item_Weapon_Storage_Bag_Tray ) {
				T = O;
				((Obj_Item_Weapon_Storage)T).do_quick_empty();
			}

			if ( this.client != null ) {
				this.client.screen.Remove( O );
			}
			this.contents.Remove( O );

			if ( this.module != null ) {
				O.loc = this.module;
			}

			if ( this.module_active == O ) {
				this.module_active = null;
			}

			if ( this.module_state_1 == O ) {
				this.inv1.icon_state = "inv1";
				this.module_state_1 = null;
			} else if ( this.module_state_2 == O ) {
				this.inv2.icon_state = "inv2";
				this.module_state_2 = null;
			} else if ( this.module_state_3 == O ) {
				this.module_state_3 = null;
				this.inv3.icon_state = "inv3";
			}
			this.hud_used.update_robot_modules_display();
			return true;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_borgcell(  ) {
			dynamic holder = null;
			double chargelvl = 0;

			holder = this.hud_list["10"];

			if ( Lang13.Bool( this.cell ) ) {
				chargelvl = Convert.ToDouble( this.cell.charge / this.cell.maxcharge );
				holder.icon_state = "hudbatt" + GlobalFuncs.RoundDiagBar( chargelvl );
			} else {
				holder.icon_state = "hudnobatt";
			}
			return;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.assigned_role = "Cyborg";
			return;
		}

		// Function from file: robot.dm
		public override void create_mob_hud(  ) {
			
			if ( this.client != null && !( this.hud_used != null ) ) {
				this.hud_used = new Hud_Robot( this );
			}
			return;
		}

		// Function from file: cyborg.dm
		public override void RangedAttack( Ent_Static A = null, string _params = null ) {
			A.attack_robot( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			A.attack_robot( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void AltClickOn( Ent_Static A = null ) {
			A.BorgAltClick( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void CtrlClickOn( Ent_Static A = null ) {
			A.BorgCtrlClick( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void ShiftClickOn( Ent_Static A = null ) {
			A.BorgShiftClick( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void CtrlShiftClickOn( Ent_Static A = null ) {
			A.BorgCtrlShiftClick( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void MiddleClickOn( Ent_Static A = null ) {
			this.cycle_modules();
			return;
		}

		// Function from file: cyborg.dm
		public override void ClickOn( Ent_Static A = null, string _params = null ) {
			ByTable modifiers = null;
			dynamic W = null;
			dynamic resolved = null;
			dynamic resolved2 = null;

			
			if ( Game13.time <= this.next_click ) {
				return;
			}
			this.next_click = Game13.time + 1;

			if ( this.client.click_intercept != null ) {
				
				if ( Lang13.Bool( Lang13.Call( Lang13.BindFunc( this.client.click_intercept, "ClickOn" ), this, _params, A ) ) ) {
					return;
				}
			}

			if ( this.stat != 0 || this.lockcharge == true || this.weakened != 0 || this.stunned != 0 || this.paralysis != 0 ) {
				return;
			}
			modifiers = String13.ParseUrlParams( _params );

			if ( Lang13.Bool( modifiers["shift"] ) && Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlShiftClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["middle"] ) ) {
				this.MiddleClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["shift"] ) ) {
				this.ShiftClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["alt"] ) ) {
				this.AltClickOn( A );
				return;
			}

			if ( Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlClickOn( A );
				return;
			}

			if ( this.next_move >= Game13.time ) {
				return;
			}
			this.face_atom( A );

			if ( this.aicamera.in_camera_mode ) {
				this.aicamera.camera_mode_off();
				this.aicamera.captureimage( A, Task13.User );
				return;
			}
			W = this.get_active_hand();

			if ( !Lang13.Bool( W ) ) {
				A.attack_robot( this );
				return;
			}

			if ( this.buckled != null ) {
				return;
			}

			if ( W == A ) {
				((Obj_Item)W).attack_self( this );
				return;
			}

			if ( A == this.loc || Lang13.Bool( ((dynamic)this.loc).Contains( A ) ) || this.contents.Contains( A ) ) {
				resolved = A.attackby( W, this, _params );

				if ( !Lang13.Bool( resolved ) && A != null && Lang13.Bool( W ) ) {
					W.afterattack( A, this, 1, _params );
				}
				return;
			}

			if ( !( this.loc is Tile ) ) {
				return;
			}

			if ( A is Tile || A.loc is Tile ) {
				
				if ( A.Adjacent( this ) ) {
					resolved2 = A.attackby( W, this, _params );

					if ( !Lang13.Bool( resolved2 ) && A != null && Lang13.Bool( W ) ) {
						W.afterattack( A, this, 1, _params );
					}
					return;
				} else {
					W.afterattack( A, this, 0, _params );
					return;
				}
			}
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Activate Held Object", group: "IC", access: VerbAccess.IsUser )]
		public override void mode(  ) {
			dynamic W = null;

			W = this.get_active_hand();

			if ( Lang13.Bool( W ) ) {
				((Obj_Item)W).attack_self( this );
			}
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Set Auto Announce Mode", desc: "Modify the default radio setting for stating your laws.", group: "Robot Commands" )]
		public void set_automatic_say_channel(  ) {
			
			if ( Task13.User.stat == 2 ) {
				return;
			}
			this.set_autosay();
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "State Laws", group: "Robot Commands" )]
		public void outputlaws(  ) {
			
			if ( Task13.User.stat == 2 ) {
				return;
			}
			this.checklaws();
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Unlock Cover", desc: "Unlocks your own cover if it is locked. You can not lock it again. A human will have to lock it for you.", group: "Robot Commands" )]
		public void unlock_own_cover(  ) {
			
			if ( this.stat == 2 ) {
				return;
			}

			if ( this.locked ) {
				
				switch ((string)( Interface13.Alert( "You can not lock your cover again, are you sure?\n      (You can still ask for a human to lock it)", "Unlock Own Cover", "Yes", "No" ) )) {
					case "Yes":
						this.locked = false;
						this.update_icons();
						Task13.User.WriteMsg( "<span class='notice'>You unlock your cover.</span>" );
						break;
				}
			}
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Unequip Module", hidden: true )]
		public void cmd_unequip_module(  ) {
			this.uneq_active();
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Toggle Module", hidden: true )]
		[VerbArg( 1, InputType.Num )]
		public void cmd_toggle_module( int module = 0 ) {
			this.toggle_module( module );
			return;
		}

		// Function from file: robot.dm
		[Verb]
		[VerbInfo( name: "Show Alerts", group: "Robot Commands" )]
		public void cmd_robot_alerts(  ) {
			
			if ( Task13.User.stat == 2 ) {
				return;
			}
			this.robot_alerts();
			return;
		}

		// Function from file: laws.dm
		[Verb]
		[VerbInfo( name: "Show Laws", group: "Robot Commands" )]
		public void cmd_show_laws(  ) {
			
			if ( Task13.User.stat == 2 ) {
				return;
			}
			this.show_laws();
			return;
		}

		// Function from file: emote.dm
		[Verb]
		[VerbInfo( name: "Power Warning", group: "Robot Commands" )]
		public void powerwarn(  ) {
			
			if ( !Lang13.Bool( this.cell ) || !Lang13.Bool( this.cell.charge ) ) {
				this.visible_message( "The power warning light on <span class='name'>" + this + "</span> flashes urgently.", "You announce you are operating in low power mode." );
				GlobalFuncs.playsound( this.loc, "sound/machines/buzz-two.ogg", 50, 0 );
			} else {
				this.WriteMsg( "<span class='warning'>You can only use this emote when you're out of charge.</span>" );
			}
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( !this.canSuicide() ) {
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( !this.canSuicide() ) {
				return;
			}

			if ( confirm == "Yes" ) {
				this.suiciding = 1;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " is powering down. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).item( this ).str( " is powering down. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.adjustOxyLoss( Num13.MaxInt( Convert.ToInt32( this.maxHealth * 2 - this.getToxLoss() - this.getFireLoss() - this.getBruteLoss() - this.getOxyLoss() ), 0 ) );
				this.death( false );
			}
			return;
		}

	}

}