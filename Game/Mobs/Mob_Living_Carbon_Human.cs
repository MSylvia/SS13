// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Human : Mob_Living_Carbon {

		public int hulk_time = 0;
		public int co2overloadtime = 0;
		public double temperature_resistance = 348.41;
		public Reagents vessel = null;
		public bool pale = false;
		public ByTable organs = new ByTable();
		public ByTable organs_by_name = new ByTable();
		public ByTable internal_organs_by_name = new ByTable();
		public ByTable internal_organs = new ByTable();
		public ByTable side_effects = new ByTable();
		public ByTable hud_list = new ByTable( 9 );
		public dynamic species = null;
		public bool embedded_flag = false;
		public double? r_hair = 0;
		public double? g_hair = 0;
		public double? b_hair = 0;
		public dynamic h_style = "Bald";
		public double? r_facial = 0;
		public double? g_facial = 0;
		public double? b_facial = 0;
		public dynamic f_style = "Shaved";
		public double? r_eyes = 0;
		public double? g_eyes = 0;
		public double? b_eyes = 0;
		public double? s_tone = 0;
		public string lip_style = null;
		public double? age = 30;
		public string b_type = "A+";
		public double? underwear = 1;
		public double? backbag = 2;
		public dynamic wear_suit = null;
		public dynamic w_uniform = null;
		public dynamic shoes = null;
		public dynamic belt = null;
		public dynamic gloves = null;
		public dynamic glasses = null;
		public dynamic head = null;
		public dynamic ears = null;
		public dynamic wear_id = null;
		public dynamic r_store = null;
		public dynamic l_store = null;
		public dynamic s_store = null;
		public dynamic l_ear = null;
		public dynamic r_ear = null;
		public bool used_skillpoints = false;
		public dynamic skill_specialization = null;
		public ByTable skills = null;
		public Icon stand_icon = null;
		public dynamic lying_icon = null;
		public bool miming = false;
		public string special_voice = "";
		public int? said_last_words = 0;
		public bool failed_last_breath = false;
		public double last_dam = -1;
		public ByTable bad_external_organs = new ByTable();
		public bool xylophone = false;
		public dynamic remoteview_target = null;
		public string hand_blood_color = null;
		public int meatleft = 3;
		public bool check_mutations = false;
		public int lastFart = 0;
		public int lastScream = 0;
		public int oxygen_alert = 0;
		public int toxins_alert = 0;
		public int fire_alert = 0;
		public int pressure_alert = 0;
		public string prev_gender = null;
		public bool temperature_alert = false;
		public bool in_stasis = false;
		public bool do_deferred_species_setup = false;
		public bool exposedtimenow = false;
		public bool firstexposed = false;
		public dynamic cycle = 0;
		public string last_processed = "";
		public ByTable overlays_standing = new ByTable( 25 );
		public dynamic previous_damage_appearance = null;
		public string race_icon = null;
		public string deform_icon = null;
		public bool update_overlays = false;
		public ByTable obj_overlays = new ByTable( 25 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "unknown";
			this.voice_name = "unknown";
			this.can_butcher = false;
			this.mob_bump_flag = 1;
			this.mob_push_flags = 63;
			this.mob_swap_flags = 63;
			this.fire_dmi = "icons/mob/OnFire.dmi";
			this.fire_sprite = "Standing";
			this.icon = "icons/mob/human.dmi";
			this.icon_state = "body_m_s";
		}

		// Function from file: human.dm
		public Mob_Living_Carbon_Human ( dynamic new_loc = null, string new_species_name = null, bool? delay_ready_dna_ = null ) : base( (object)(new_loc) ) {
			delay_ready_dna_ = delay_ready_dna_ ?? false;

			
			if ( !( GlobalVars.hair_styles_list.len != 0 ) ) {
				GlobalFuncs.buildHairLists();
			}

			if ( !( GlobalVars.all_species.len != 0 ) ) {
				GlobalFuncs.buildSpeciesLists();
			}

			if ( !Lang13.Bool( this.species ) ) {
				
				if ( Lang13.Bool( new_species_name ) ) {
					this.set_species( new_species_name );
				} else {
					this.set_species();
				}
			}
			this.default_language = this.get_default_language();
			this.create_reagents( 1000 );

			if ( !( this.dna != null ) ) {
				this.dna = new Dna( /* Pruned args, no ctor exists. */ );
				this.dna.species = this.species.name;
			}
			this.hud_list[1] = new Image( "icons/mob/hud.dmi", this, "hudhealth100" );
			this.hud_list[2] = new Image( "icons/mob/hud.dmi", this, "hudhealthy" );
			this.hud_list[3] = new Image( "icons/mob/hud.dmi", this, "hudunknown" );
			this.hud_list[4] = new Image( "icons/mob/hud.dmi", this, "hudblank" );
			this.hud_list[5] = new Image( "icons/mob/hud.dmi", this, "hudblank" );
			this.hud_list[6] = new Image( "icons/mob/hud.dmi", this, "hudblank" );
			this.hud_list[7] = new Image( "icons/mob/hud.dmi", this, "hudblank" );
			this.hud_list[8] = new Image( "icons/mob/hud.dmi", this, "hudblank" );
			this.hud_list[9] = new Image( "icons/mob/hud.dmi", this, "hudhealthy" );
			this.obj_overlays[1] = new Obj_Overlays_FireLayer();
			this.obj_overlays[2] = new Obj_Overlays_MutantraceLayer();
			this.obj_overlays[3] = new Obj_Overlays_MutationsLayer();
			this.obj_overlays[4] = new Obj_Overlays_DamageLayer();
			this.obj_overlays[5] = new Obj_Overlays_UniformLayer();
			this.obj_overlays[14] = new Obj_Overlays_IdLayer();
			this.obj_overlays[7] = new Obj_Overlays_ShoesLayer();
			this.obj_overlays[8] = new Obj_Overlays_GlovesLayer();
			this.obj_overlays[9] = new Obj_Overlays_EarsLayer();
			this.obj_overlays[6] = new Obj_Overlays_SuitLayer();
			this.obj_overlays[10] = new Obj_Overlays_GlassesLayer();
			this.obj_overlays[11] = new Obj_Overlays_BeltLayer();
			this.obj_overlays[12] = new Obj_Overlays_SuitStoreLayer();
			this.obj_overlays[13] = new Obj_Overlays_BackLayer();
			this.obj_overlays[15] = new Obj_Overlays_HairLayer();
			this.obj_overlays[16] = new Obj_Overlays_GlassesOverHairLayer();
			this.obj_overlays[17] = new Obj_Overlays_FacemaskLayer();
			this.obj_overlays[18] = new Obj_Overlays_HeadLayer();
			this.obj_overlays[19] = new Obj_Overlays_HandcuffLayer();
			this.obj_overlays[20] = new Obj_Overlays_LegcuffLayer();
			this.obj_overlays[21] = new Obj_Overlays_LHandLayer();
			this.obj_overlays[22] = new Obj_Overlays_RHandLayer();
			this.obj_overlays[23] = new Obj_Overlays_TailLayer();
			this.obj_overlays[24] = new Obj_Overlays_TargetedLayer();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( this.dna != null ) {
				this.dna.real_name = this.real_name;
			}
			this.prev_gender = this.gender;
			this.make_blood();
			this.init_butchering_list();

			if ( !( delay_ready_dna_ == true ) ) {
				this.dna.ready_dna( this );
			}

			if ( GlobalVars.hardcore_mode ) {
				Task13.Schedule( 20, (Task13.Closure)(() => {
					
					if ( Lang13.Bool( this.ckey ) && this.client != null ) {
						GlobalFuncs.to_chat( this, "<h5><span class='notice'>Hardcore mode is enabled!</span></h5>" );
						GlobalFuncs.to_chat( this, "<b>You must eat to survive. Starvation for extended periods of time will kill you!</b>" );
						GlobalFuncs.to_chat( this, "<b>Keep an eye out on the hunger indicator on the right of your screen; it will start flashing red and black when you're close to starvation.</b>" );
					}
					return;
				}));
			}
			return;
		}

		// Function from file: Plasma.dm
		public override void pl_effects(  ) {
			Obj_Item_Clothing eye_protection = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_CLOTHCONTAMINATION) ) ) ) {
				this.contaminate();
			}

			if ( ( this.stat ??0) >= 2 ) {
				return;
			}

			if ( this.species.breath_type != "plasma" ) {
				
				if ( Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_SKINBURNS) ) ) ) {
					
					if ( !this.pl_head_protected() || !this.pl_suit_protected() ) {
						this.burn_skin( 0.75 );

						if ( Rand13.PercentChance( 20 ) ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>Your skin burns!</span>" );
						}
						this.updatehealth();
					}
				}

				if ( Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_EYEBURNS) ) ) ) {
					eye_protection = this.get_body_part_coverage( 2048 );

					if ( !( eye_protection != null ) ) {
						this.burn_eyes();
					}
				}

				if ( Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_GENETICCORRUPTION) ) ) ) {
					
					if ( Rand13.Int( 1, 10000 ) < Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_GENETICCORRUPTION) ) ) ) {
						GlobalFuncs.randmutb( this );
						GlobalFuncs.to_chat( this, "<span class='warning'>High levels of toxins cause you to spontaneously mutate.</span>" );
						GlobalFuncs.domutcheck( this, null );
					}
				}
			}
			return;
		}

		// Function from file: Plasma.dm
		public override void contaminate(  ) {
			
			if ( !this.pl_suit_protected() ) {
				this.suit_contamination();
			}

			if ( !this.pl_head_protected() ) {
				
				if ( Rand13.PercentChance( 1 ) ) {
					this.suit_contamination();
				}
			}
			return;
		}

		// Function from file: Fire.dm
		public override void FireBurn( double firelevel = 0, double? last_temperature = null, dynamic pressure = null ) {
			bool head_exposure = false;
			bool chest_exposure = false;
			bool groin_exposure = false;
			bool legs_exposure = false;
			bool arms_exposure = false;
			Obj_Item_Clothing C = null;
			double mx = 0;

			head_exposure = true;
			chest_exposure = true;
			groin_exposure = true;
			legs_exposure = true;
			arms_exposure = true;

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Clothing) )) {
				C = _a;
				

				if ( this.l_hand == C || this.r_hand == C ) {
					continue;
				}

				if ( ( C.max_heat_protection_temperature ??0) >= ( last_temperature ??0) ) {
					
					if ( !GlobalFuncs.is_slot_hidden( C.body_parts_covered, 14337 ) ) {
						head_exposure = false;
					}

					if ( !GlobalFuncs.is_slot_hidden( C.body_parts_covered, 2 ) ) {
						chest_exposure = false;
					}

					if ( !GlobalFuncs.is_slot_hidden( C.body_parts_covered, 4 ) ) {
						groin_exposure = false;
					}

					if ( !GlobalFuncs.is_slot_hidden( C.body_parts_covered, 24 ) ) {
						legs_exposure = false;
					}

					if ( !GlobalFuncs.is_slot_hidden( C.body_parts_covered, 384 ) ) {
						arms_exposure = false;
					}
				}
			}
			mx = firelevel * 5 / Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireFirelevelMultiplier) ) ) * Num13.MinInt( Convert.ToInt32( pressure / 101.32499694824219 ), 1 );
			this.apply_damage( mx * ( head_exposure ?1:0) * 2.5, "fire", "head", 0, 0, "Fire" );
			this.apply_damage( mx * ( chest_exposure ?1:0) * 2.5, "fire", "chest", 0, 0, "Fire" );
			this.apply_damage( mx * ( groin_exposure ?1:0) * 2, "fire", "groin", 0, 0, "Fire" );
			this.apply_damage( mx * ( legs_exposure ?1:0) * 0.6, "fire", "l_leg", 0, 0, "Fire" );
			this.apply_damage( mx * ( legs_exposure ?1:0) * 0.6, "fire", "r_leg", 0, 0, "Fire" );
			this.apply_damage( mx * ( arms_exposure ?1:0) * 0.4, "fire", "l_arm", 0, 0, "Fire" );
			this.apply_damage( mx * ( arms_exposure ?1:0) * 0.4, "fire", "r_arm", 0, 0, "Fire" );
			return;
		}

		// Function from file: Airflow.dm
		public override dynamic airflow_hit( dynamic A = null ) {
			dynamic _default = null;

			double b_loss = 0;
			int? blocked = null;

			
			if ( Rand13.PercentChance( 33 ) ) {
				this.loc.add_blood( this );
				this.bloody_body( this );
			}
			b_loss = this.airflow_speed * Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowDamage) ) );
			blocked = this.run_armor_check( "head", "melee" );
			this.apply_damage( b_loss / 3, "brute", "head", blocked, 0, null, "Airflow" );
			blocked = this.run_armor_check( "chest", "melee" );
			this.apply_damage( b_loss / 3, "brute", "chest", blocked, 0, null, "Airflow" );
			blocked = this.run_armor_check( "groin", "melee" );
			this.apply_damage( b_loss / 3, "brute", "groin", blocked, 0, null, "Airflow" );

			if ( Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowPush) ) ) || this.AirflowCanPush() ) {
				
				if ( this.airflow_speed > 10 ) {
					this.paralysis += Num13.Floor( this.airflow_speed * Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowStun) ) ) );
					this.stunned = Num13.MaxInt( ((int)( this.stunned )), this.paralysis + 3 );
				} else {
					this.stunned += Num13.Floor( this.airflow_speed * Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowStun) ) ) / 2 );
				}
			}
			_default = base.airflow_hit( (object)(A) );
			return _default;
		}

		// Function from file: Airflow.dm
		public override bool airflow_stun(  ) {
			
			if ( this.last_airflow_stun > Game13.time - Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowStunCooldown) ) ) ) {
				return false;
			}

			if ( Lang13.Bool( this.locked_to ) || Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( Lang13.Bool( this.shoes ) ) {
				
				if ( this.CheckSlip() < 1 ) {
					return false;
				}
			}

			if ( !( ( this.status_flags & 1 ) != 0 ) && !( ( this.status_flags & 2 ) != 0 ) ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>You stay upright as the air rushes past you.</span>" );
				return false;
			}

			if ( this.weakened <= 0 ) {
				this.WriteMsg( "<span class='warning'>The sudden rush of air knocks you over!</span>" );
			}
			this.SetWeakened( Rand13.Int( 1, 5 ) );
			this.last_airflow_stun = Game13.time;
			return false;
		}

		// Function from file: MedicalSideEffects.dm
		public override void add_side_effect( string name = null, bool? strength = null ) {
			strength = strength ?? false;

			MedicalEffect M = null;
			dynamic L = null;
			dynamic T = null;
			dynamic M2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.side_effects, typeof(MedicalEffect) )) {
				M = _a;
				

				if ( M.name == name ) {
					M.strength = Num13.MaxInt( ((int)( M.strength )), 10 );
					return;
				}
			}
			L = Lang13.GetTypes( typeof(MedicalEffect) ) - typeof(MedicalEffect);

			foreach (dynamic _b in Lang13.Enumerate( L )) {
				T = _b;
				
				M2 = Lang13.Call( T );

				if ( M2.name == name ) {
					M2.strength = strength;
					this.side_effects.Add( M2 );
				}
			}
			return;
		}

		// Function from file: blood.dm
		public override void inject_blood( Ent_Static container = null, dynamic amount = null ) {
			dynamic injected = null;
			dynamic our = null;

			injected = this.get_blood( container.reagents );

			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 1 ) ) {
				((Reagents)this.reagents).add_reagent( "blood", amount, injected.data );
				((Reagents)this.reagents).update_total();
				return;
			}
			our = this.get_blood( this.vessel );

			if ( !Lang13.Bool( injected ) || !Lang13.Bool( our ) ) {
				return;
			}

			if ( GlobalFuncs.blood_incompatible( injected.data["blood_type"], our.data["blood_type"] ) ) {
				((Reagents)this.reagents).add_reagent( "toxin", amount * 0.5 );
				((Reagents)this.reagents).update_total();
			} else {
				this.vessel.add_reagent( "blood", amount, injected.data );
				this.vessel.update_total();
			}
			base.inject_blood( container, (object)(amount) );
			return;
		}

		// Function from file: blood.dm
		public override dynamic take_blood( Obj_Item_Device_MassSpectrometer container = null, dynamic amount = null ) {
			dynamic _default = null;

			
			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 1 ) ) {
				return null;
			}

			if ( ( this.vessel.get_reagent_amount( "blood" ) ?1:0) < Convert.ToDouble( amount ) ) {
				return null;
			}
			_default = base.take_blood( container, (object)(amount) );
			this.vessel.remove_reagent( "blood", amount );
			return _default;
		}

		// Function from file: life_helpers.dm
		public override int get_cold_protection( dynamic thermal_protection_flags = null ) {
			double thermal_protection = 0;
			int max_protection = 0;

			
			if ( this.mutations.Contains( 2 ) ) {
				return 1;
			}
			thermal_protection = 0;

			if ( Lang13.Bool( this.head ) ) {
				thermal_protection += ((Obj_Item)this.head).return_thermal_protection();
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				thermal_protection += ((Obj_Item)this.wear_suit).return_thermal_protection();
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				thermal_protection += ((Obj_Item)this.w_uniform).return_thermal_protection();
			}

			if ( Lang13.Bool( this.shoes ) ) {
				thermal_protection += ((Obj_Item)this.shoes).return_thermal_protection();
			}

			if ( Lang13.Bool( this.gloves ) ) {
				thermal_protection += ((Obj_Item)this.gloves).return_thermal_protection();
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				thermal_protection += ((Obj_Item)this.wear_mask).return_thermal_protection();
			}
			max_protection = this.get_thermal_protection( this.get_thermal_protection_flags() );
			return Num13.MinInt( ((int)( thermal_protection )), max_protection );
		}

		// Function from file: life_helpers.dm
		public override int get_heat_protection( int thermal_protection_flags = 0 ) {
			
			if ( this.mutations.Contains( 106 ) ) {
				return 1;
			}
			return this.get_thermal_protection( thermal_protection_flags );
		}

		// Function from file: life_helpers.dm
		public override int get_thermal_protection_flags(  ) {
			int thermal_protection_flags = 0;

			thermal_protection_flags = 0;

			if ( Lang13.Bool( this.head ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.head.body_parts_covered );
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.wear_suit.body_parts_covered );
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.w_uniform.body_parts_covered );
			}

			if ( Lang13.Bool( this.shoes ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.shoes.body_parts_covered );
			}

			if ( Lang13.Bool( this.gloves ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.gloves.body_parts_covered );
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				thermal_protection_flags |= Convert.ToInt32( this.wear_mask.body_parts_covered );
			}
			return thermal_protection_flags;
		}

		// Function from file: life_helpers.dm
		public override int get_heat_protection_flags( dynamic temperature = null ) {
			int thermal_protection_flags = 0;

			thermal_protection_flags = 0;

			if ( Lang13.Bool( this.head ) ) {
				
				if ( Lang13.Bool( this.head.max_heat_protection_temperature ) && ( this.head.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= Convert.ToInt32( this.head.body_parts_covered );
				}
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( Lang13.Bool( this.wear_suit.max_heat_protection_temperature ) && ( this.wear_suit.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= Convert.ToInt32( this.wear_suit.body_parts_covered );
				}
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				
				if ( Lang13.Bool( this.w_uniform.max_heat_protection_temperature ) && ( this.w_uniform.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= Convert.ToInt32( this.w_uniform.body_parts_covered );
				}
			}

			if ( Lang13.Bool( this.shoes ) ) {
				
				if ( Lang13.Bool( this.shoes.max_heat_protection_temperature ) && ( this.shoes.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= Convert.ToInt32( this.shoes.body_parts_covered );
				}
			}

			if ( Lang13.Bool( this.gloves ) ) {
				
				if ( Lang13.Bool( this.gloves.max_heat_protection_temperature ) && ( this.gloves.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= Convert.ToInt32( this.gloves.body_parts_covered );
				}
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				
				if ( Lang13.Bool( this.wear_mask.max_heat_protection_temperature ) && ( this.wear_mask.max_heat_protection_temperature ??0) >= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= Convert.ToInt32( this.wear_mask.body_parts_covered );
				}
			}
			return thermal_protection_flags;
		}

		// Function from file: life_helpers.dm
		public override dynamic calculate_affecting_pressure( dynamic pressure = null ) {
			double pressure_difference = 0;
			ByTable clothing_items = null;
			double species_difference = 0;
			int body_parts_protected = 0;
			Obj_Item equipment = null;

			base.calculate_affecting_pressure( (object)(pressure) );
			pressure_difference = Math.Abs( Convert.ToDouble( pressure - 101.32499694824219 ) );
			clothing_items = new ByTable(new object [] { this.head, this.wear_mask, this.wear_suit, this.w_uniform, this.gloves, this.shoes });
			species_difference = 0;

			if ( Lang13.Bool( this.species ) ) {
				species_difference = Convert.ToDouble( this.species.pressure_resistance );
			}
			body_parts_protected = 0;

			foreach (dynamic _a in Lang13.Enumerate( clothing_items, typeof(Obj_Item) )) {
				equipment = _a;
				

				if ( equipment != null && equipment.pressure_resistance >= pressure_difference ) {
					body_parts_protected |= Convert.ToInt32( equipment.body_parts_covered );
				}
			}
			pressure_difference = Num13.MaxInt( ((int)( pressure_difference - species_difference )), 0 );
			pressure_difference *= 1 - Math.Pow( GlobalFuncs.return_cover_protection( body_parts_protected ), 5 );

			if ( Convert.ToDouble( pressure ) > 101.32499694824219 ) {
				return pressure_difference + 101.32499694824219;
			} else {
				return 101.32499694824219 - pressure_difference;
			}
		}

		// Function from file: handle_shock.dm
		public override bool handle_shock(  ) {
			base.handle_shock();

			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( this.analgesic != 0 || Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 8 ) ) {
				return false;
			}

			if ( Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_softcrit ) ) {
				this.shock_stage = Num13.MaxInt( this.shock_stage, 61 );
			}

			if ( Convert.ToDouble( this.traumatic_shock ) >= 80 ) {
				this.shock_stage += 1;
			} else if ( Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_softcrit ) ) {
				this.shock_stage = Num13.MaxInt( this.shock_stage, 61 );
			} else {
				this.shock_stage = Num13.MinInt( this.shock_stage, 160 );
				this.shock_stage = Num13.MaxInt( this.shock_stage - 1, 0 );
				return false;
			}

			if ( this.shock_stage == 10 ) {
				GlobalFuncs.to_chat( this, "<span class='danger'>" + Rand13.Pick(new object [] { "It hurts so much!", "You really need some painkillers.", "Dear god, the pain!" }) + "</span>" );
			}

			if ( this.shock_stage >= 30 ) {
				
				if ( this.shock_stage == 30 ) {
					this.emote( "me", 1, "is having trouble keeping their eyes open." );
				}
				this.eye_blurry = Num13.MaxInt( 2, Convert.ToInt32( this.eye_blurry ) );
				this.stuttering = Num13.MaxInt( Convert.ToInt32( this.stuttering ), 5 );
			}

			if ( this.shock_stage == 40 ) {
				GlobalFuncs.to_chat( this, "<span class='danger'>" + Rand13.Pick(new object [] { "The pain is excrutiating!", "Please, just end the pain!", "Your whole body is going numb!" }) + "</span>" );
			}

			if ( this.shock_stage >= 60 ) {
				
				if ( this.shock_stage == 60 ) {
					this.emote( "me", 1, "'s body becomes limp." );
				}

				if ( Rand13.PercentChance( 2 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>" + Rand13.Pick(new object [] { "The pain is excrutiating!", "Please, just end the pain!", "Your whole body is going numb!" }) + "</span>" );
					this.Weaken( 20 );
				}
			}

			if ( this.shock_stage >= 80 ) {
				
				if ( Rand13.PercentChance( 5 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>" + Rand13.Pick(new object [] { "The pain is excrutiating!", "Please, just end the pain!", "Your whole body is going numb!" }) + "</span>" );
					this.Weaken( 20 );
				}
			}

			if ( this.shock_stage >= 120 ) {
				
				if ( Rand13.PercentChance( 2 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>" + Rand13.Pick(new object [] { "You black out!", "You feel like you could die any moment now.", "You're about to lose consciousness." }) + "</span>" );
					this.Paralyse( 5 );
				}
			}

			if ( this.shock_stage == 150 ) {
				this.emote( "me", 1, "can no longer stand, collapsing!" );
				this.Weaken( 20 );
			}

			if ( this.shock_stage >= 150 ) {
				this.Weaken( 20 );
			}
			return false;
		}

		// Function from file: handle_fire.dm
		public override bool handle_fire(  ) {
			int thermal_protection = 0;

			
			if ( base.handle_fire() ) {
				return false;
			}
			thermal_protection = this.get_heat_protection( this.get_heat_protection_flags( 30000 ) );

			if ( 1 - thermal_protection > 0.0 && Convert.ToDouble( this.bodytemperature ) < 373.41 ) {
				this.bodytemperature = Num13.MinInt( Convert.ToInt32( this.bodytemperature + 10 ), ((int)( 373.41 )) );
			}
			return false;
		}

		// Function from file: update_icons.dm
		public override void update_inv_l_hand( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			dynamic t_inhand_state = null;
			Icon check_dimensions = null;
			dynamic O = null;
			dynamic dyn_overlay = null;

			this.overlays.Remove( this.obj_overlays[21] );

			if ( Lang13.Bool( this.l_hand ) ) {
				this.l_hand.screen_loc = "CENTER:16,SOUTH:5";
				t_state = this.l_hand.item_state;
				t_inhand_state = this.l_hand.inhand_states["left_hand"];
				check_dimensions = new Icon( t_inhand_state );

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.l_hand.icon_state;
				}
				O = this.obj_overlays[21];
				O.icon = t_inhand_state;
				O.icon_state = t_state;
				O.pixel_x = ( check_dimensions.Width() - 32 ) * -1 / 2;
				O.pixel_y = ( check_dimensions.Height() - 32 ) * -1 / 2;
				O.overlays.len = 0;

				if ( this.l_hand.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.l_hand.dynamic_overlay["" + 21] ) ) {
						dyn_overlay = this.l_hand.dynamic_overlay["" + 21];
						O.overlays += dyn_overlay;
					}
				}
				this.overlays.Add( O );
				this.obj_overlays[21] = O;

				if ( Lang13.Bool( this.handcuffed ) ) {
					this.drop_item( this.l_hand );
				}
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_r_hand( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			dynamic t_inhand_state = null;
			Icon check_dimensions = null;
			dynamic O = null;
			dynamic dyn_overlay = null;

			this.overlays.Remove( this.obj_overlays[22] );

			if ( Lang13.Bool( this.r_hand ) ) {
				this.r_hand.screen_loc = "CENTER-1:16,SOUTH:5";
				t_state = this.r_hand.item_state;
				t_inhand_state = this.r_hand.inhand_states["right_hand"];
				check_dimensions = new Icon( t_inhand_state );

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.r_hand.icon_state;
				}
				O = this.obj_overlays[22];
				O.icon = t_inhand_state;
				O.icon_state = t_state;
				O.pixel_x = ( check_dimensions.Width() - 32 ) * -1 / 2;
				O.pixel_y = ( check_dimensions.Height() - 32 ) * -1 / 2;
				O.overlays.len = 0;

				if ( this.r_hand.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.r_hand.dynamic_overlay["" + 22] ) ) {
						dyn_overlay = this.r_hand.dynamic_overlay["" + 22];
						O.overlays += dyn_overlay;
					}
				}
				this.overlays.Add( O );
				this.obj_overlays[22] = O;

				if ( Lang13.Bool( this.handcuffed ) ) {
					this.drop_item( this.r_hand );
				}
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_legcuffed( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;

			this.overlays.Remove( this.obj_overlays[20] );

			if ( Lang13.Bool( this.legcuffed ) ) {
				O = this.obj_overlays[20];
				O.icon = "icons/mob/mob.dmi";
				O.icon_state = "legcuff1";
				this.overlays.Add( O );
				this.obj_overlays[20] = O;

				if ( this.m_intent != "walk" ) {
					this.m_intent = "walk";

					if ( this.hud_used != null && this.hud_used.move_intent != null ) {
						((dynamic)this.hud_used.move_intent).icon_state = "walking";
					}
				}
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_handcuffed( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;

			this.overlays.Remove( this.obj_overlays[19] );

			if ( Lang13.Bool( this.handcuffed ) ) {
				this.drop_hands();
				this.stop_pulling();
				O = this.obj_overlays[19];
				O.icon = "icons/mob/mob.dmi";
				O.icon_state = "handcuff1";
				this.overlays.Add( O );
				this.obj_overlays[19] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hud(  ) {
			
			if ( this.client != null ) {
				this.client.screen.Or( this.contents );

				if ( this.hud_used != null ) {
					this.hud_used.hidden_inventory_update();
				}
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_back( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			Image standing = null;
			dynamic I = null;
			dynamic O = null;
			dynamic dyn_overlay = null;

			this.overlays.Remove( this.obj_overlays[13] );

			if ( Lang13.Bool( this.back ) ) {
				this.back.screen_loc = "CENTER-2:14,SOUTH:5";
				standing = new Image( ( Lang13.Bool( this.back.icon_override ) ? this.back.icon_override : "icons/mob/back.dmi" ), null, "" + this.back.icon_state );
				I = this.back;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.back_icons ) ) {
						standing.icon = this.species.back_icons;
					}
				}
				O = this.obj_overlays[13];
				O.icon = standing;
				O.icon_state = standing.icon_state;
				O.overlays.len = 0;

				if ( this.back.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.back.dynamic_overlay["" + 13] ) ) {
						dyn_overlay = this.back.dynamic_overlay["" + 13];
						O.overlays += dyn_overlay;
					}
				}
				this.overlays.Add( O );
				this.obj_overlays[13] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_mask( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;
			Image standing = null;
			dynamic I = null;
			dynamic dyn_overlay = null;
			Image bloodsies = null;

			this.overlays.Remove( this.obj_overlays[17] );

			if ( Lang13.Bool( this.wear_mask ) && ( this.wear_mask is Obj_Item_Clothing_Mask || this.wear_mask is Obj_Item_Clothing_Accessory ) && !this.check_hidden_head_flags( 38912 ) ) {
				O = this.obj_overlays[17];
				O.overlays.len = 0;
				this.wear_mask.screen_loc = "WEST+1:8,SOUTH+2:9";
				standing = new Image( ( Lang13.Bool( this.wear_mask.icon_override ) ? this.wear_mask.icon_override : "icons/mob/mask.dmi" ), null, "" + this.wear_mask.icon_state );
				I = this.wear_mask;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.wear_mask_icons ) ) {
						standing.icon = this.species.wear_mask_icons;
					}
				}

				if ( this.wear_mask.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.wear_mask.dynamic_overlay["" + 17] ) ) {
						dyn_overlay = this.wear_mask.dynamic_overlay["" + 17];
						O.overlays += dyn_overlay;
					}
				}

				if ( !( this.wear_mask is Obj_Item_Clothing_Mask_Cigarette ) && this.wear_mask.blood_DNA != null && this.wear_mask.blood_DNA.len != 0 ) {
					bloodsies = new Image( "icons/effects/blood.dmi", null, "maskblood" );
					bloodsies.color = this.wear_mask.blood_color;
					O.overlays += bloodsies;
				}
				O.icon = standing;
				O.icon_state = standing.icon_state;
				this.overlays.Add( O );
				this.obj_overlays[17] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_pockets( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			
			if ( Lang13.Bool( this.l_store ) ) {
				this.l_store.screen_loc = "CENTER+1:18,SOUTH:5";
			}

			if ( Lang13.Bool( this.r_store ) ) {
				this.r_store.screen_loc = "CENTER+2:20,SOUTH:5";
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_suit( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;
			Image standing = null;
			dynamic I = null;
			dynamic dyn_overlay = null;
			dynamic S = null;
			Image bloodsies = null;

			this.overlays.Remove( this.obj_overlays[6] );

			if ( Lang13.Bool( this.wear_suit ) && this.wear_suit is Obj_Item_Clothing_Suit ) {
				this.wear_suit.screen_loc = "WEST+1:8,SOUTH+1:7";
				O = this.obj_overlays[6];
				O.overlays.len = 0;
				standing = new Image( ( Lang13.Bool( this.wear_suit.icon_override ) ? this.wear_suit.icon_override : "icons/mob/suit.dmi" ), null, "" + this.wear_suit.icon_state );

				if ( this.wear_suit is Obj_Item_Clothing_Suit_StraightJacket ) {
					this.drop_from_inventory( this.handcuffed );
					this.drop_hands();
				}
				I = this.wear_suit;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.wear_suit_icons ) ) {
						standing.icon = this.species.wear_suit_icons;
					}
				}

				if ( this.wear_suit.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.wear_suit.dynamic_overlay["" + 6] ) ) {
						dyn_overlay = this.wear_suit.dynamic_overlay["" + 6];
						O.overlays += dyn_overlay;
					}
				}

				if ( this.wear_suit.blood_DNA != null && this.wear_suit.blood_DNA.len != 0 ) {
					S = this.wear_suit;
					bloodsies = new Image( "icons/effects/blood.dmi", null, "" + S.blood_overlay_type + "blood" );
					bloodsies.color = this.wear_suit.blood_color;
					O.overlays += bloodsies;
				}
				O.icon = standing;
				O.icon_state = standing.icon_state;
				this.overlays.Add( O );
				this.obj_overlays[6] = O;
				this.update_tail_showing( false );
			} else {
				this.update_tail_showing( false );
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_belt( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			Image standing = null;
			dynamic I = null;
			dynamic O = null;
			dynamic dyn_overlay = null;

			this.overlays.Remove( this.obj_overlays[11] );

			if ( Lang13.Bool( this.belt ) ) {
				this.belt.screen_loc = "WEST+4:14,SOUTH:5";
				t_state = this.belt.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.belt.icon_state;
				}
				standing = new Image( ( Lang13.Bool( this.belt.icon_override ) ? this.belt.icon_override : "icons/mob/belt.dmi" ), null, "" + t_state );
				I = this.belt;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.belt_icons ) ) {
						standing.icon = this.species.belt_icons;
					}
				}
				O = this.obj_overlays[11];
				O.icon = standing;
				O.icon_state = standing.icon_state;
				O.overlays.len = 0;

				if ( this.belt.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.belt.dynamic_overlay["" + 11] ) ) {
						dyn_overlay = this.belt.dynamic_overlay["" + 11];
						O.overlays += dyn_overlay;
					}
				}
				this.overlays.Add( O );
				this.obj_overlays[11] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_head( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;
			Image standing = null;
			dynamic I = null;
			dynamic dyn_overlay = null;
			Image bloodsies = null;

			this.overlays.Remove( this.obj_overlays[18] );

			if ( Lang13.Bool( this.head ) ) {
				O = this.obj_overlays[18];
				O.overlays.len = 0;
				this.head.screen_loc = "WEST+1:8,SOUTH+3:11";

				if ( this.head is Obj_Item_Clothing_Head_Kitty ) {
					standing = new Image( this.head.mob );
				} else {
					standing = new Image( ( Lang13.Bool( this.head.icon_override ) ? this.head.icon_override : "icons/mob/head.dmi" ), null, "" + this.head.icon_state );
				}
				I = this.head;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.head_icons ) ) {
						standing.icon = this.species.head_icons;
					}
				}

				if ( this.head.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.head.dynamic_overlay["" + 18] ) ) {
						dyn_overlay = this.head.dynamic_overlay["" + 18];
						O.overlays += dyn_overlay;
					}
				}

				if ( this.head.blood_DNA != null && this.head.blood_DNA.len != 0 ) {
					bloodsies = new Image( "icons/effects/blood.dmi", null, "helmetblood" );
					bloodsies.color = this.head.blood_color;
					O.overlays += bloodsies;
				}
				O.icon = standing;
				O.icon_state = standing.icon_state;
				this.overlays.Add( O );
				this.obj_overlays[18] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_s_store( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			dynamic O = null;
			dynamic dyn_overlay = null;

			this.overlays.Remove( this.obj_overlays[12] );

			if ( Lang13.Bool( this.s_store ) ) {
				t_state = this.s_store.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.s_store.icon_state;
				}
				O = this.obj_overlays[12];
				O.icon = "icons/mob/belt_mirror.dmi";
				O.icon_state = t_state;
				O.overlays.len = 0;

				if ( this.s_store.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.s_store.dynamic_overlay["" + 12] ) ) {
						dyn_overlay = this.s_store.dynamic_overlay["" + 12];
						O.overlays += dyn_overlay;
					}
				}
				this.overlays.Add( O );
				this.obj_overlays[12] = O;
				this.s_store.screen_loc = "WEST+2:10,SOUTH:5";
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_shoes( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;
			dynamic I = null;
			dynamic dyn_overlay = null;
			Image bloodsies = null;

			this.overlays.Remove( this.obj_overlays[7] );

			if ( Lang13.Bool( this.shoes ) && !this.check_hidden_body_flags( 96 ) ) {
				O = this.obj_overlays[7];
				O.icon = ( Lang13.Bool( this.shoes.icon_override ) ? this.shoes.icon_override : "icons/mob/feet.dmi" );
				O.icon_state = this.shoes.icon_state;
				I = this.shoes;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.shoes_icons ) ) {
						O.icon = this.species.shoes_icons;
					}
				}
				O.overlays.len = 0;

				if ( this.shoes.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.shoes.dynamic_overlay["" + 7] ) ) {
						dyn_overlay = this.shoes.dynamic_overlay["" + 7];
						O.overlays += dyn_overlay;
					}
				}

				if ( this.shoes.blood_DNA != null && this.shoes.blood_DNA.len != 0 ) {
					bloodsies = new Image( "icons/effects/blood.dmi", null, "shoeblood" );
					bloodsies.color = this.shoes.blood_color;
					O.overlays += bloodsies;
				}
				this.overlays.Add( O );
				this.obj_overlays[7] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_ears( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			Image standing = null;
			dynamic I = null;
			dynamic O = null;
			dynamic dyn_overlay = null;

			this.overlays.Remove( this.obj_overlays[9] );

			if ( Lang13.Bool( this.ears ) && !this.check_hidden_head_flags( 8192 ) ) {
				standing = new Image( ( Lang13.Bool( this.ears.icon_override ) ? this.ears.icon_override : "icons/mob/ears.dmi" ), null, "" + this.ears.icon_state );
				I = this.ears;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.ears_icons ) ) {
						standing.icon = this.species.ears_icons;
					}
				}
				O = this.obj_overlays[9];
				O.icon = standing;
				O.icon_state = standing.icon_state;
				O.overlays.len = 0;

				if ( this.ears.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.ears.dynamic_overlay["" + 9] ) ) {
						dyn_overlay = this.ears.dynamic_overlay["" + 9];
						O.overlays += dyn_overlay;
					}
				}
				this.overlays.Add( O );
				this.obj_overlays[9] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_glasses( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			Image standing = null;
			dynamic I = null;
			dynamic O = null;
			dynamic dyn_overlay = null;
			dynamic O2 = null;
			dynamic dyn_overlay2 = null;

			this.overlays.Remove( this.obj_overlays[10] );
			this.overlays.Remove( this.obj_overlays[16] );

			if ( Lang13.Bool( this.glasses ) && !this.check_hidden_head_flags( 2048 ) ) {
				standing = new Image( ( Lang13.Bool( this.glasses.icon_override ) ? this.glasses.icon_override : "icons/mob/eyes.dmi" ), null, "" + this.glasses.icon_state );
				I = this.glasses;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.glasses_icons ) ) {
						standing.icon = this.species.glasses_icons;
					}
				}

				if ( this.glasses.cover_hair ) {
					O = this.obj_overlays[16];
					O.icon = standing;
					O.icon_state = standing.icon_state;
					O.overlays.len = 0;

					if ( this.glasses.dynamic_overlay != null ) {
						
						if ( Lang13.Bool( this.glasses.dynamic_overlay["" + 16] ) ) {
							dyn_overlay = this.glasses.dynamic_overlay["" + 16];
							O.overlays += dyn_overlay;
						}
					}
					this.overlays.Add( O );
					this.obj_overlays[16] = O;
				} else {
					O2 = this.obj_overlays[10];
					O2.icon = standing;
					O2.icon_state = standing.icon_state;
					O2.overlays.len = 0;

					if ( this.glasses.dynamic_overlay != null ) {
						
						if ( Lang13.Bool( this.glasses.dynamic_overlay["" + 10] ) ) {
							dyn_overlay2 = this.glasses.dynamic_overlay["" + 10];
							O2.overlays += dyn_overlay2;
						}
					}
					this.overlays.Add( O2 );
					this.obj_overlays[10] = O2;
				}
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_gloves( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;
			dynamic t_state = null;
			Image standing = null;
			dynamic I = null;
			dynamic dyn_overlay = null;
			Image bloodsies = null;

			this.overlays.Remove( this.obj_overlays[8] );
			O = this.obj_overlays[8];
			O.overlays.len = 0;
			O.color = null;

			if ( Lang13.Bool( this.gloves ) && !this.check_hidden_body_flags( 1536 ) ) {
				t_state = this.gloves.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.gloves.icon_state;
				}
				standing = new Image( ( Lang13.Bool( this.gloves.icon_override ) ? this.gloves.icon_override : "icons/mob/hands.dmi" ), null, "" + t_state );
				I = this.gloves;

				if ( I.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.gloves_icons ) ) {
						standing.icon = this.species.gloves_icons;
					}
				}

				if ( this.gloves.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.gloves.dynamic_overlay["" + 8] ) ) {
						dyn_overlay = this.gloves.dynamic_overlay["" + 8];
						O.overlays += dyn_overlay;
					}
				}

				if ( this.gloves.blood_DNA != null && this.gloves.blood_DNA.len != 0 ) {
					bloodsies = new Image( "icons/effects/blood.dmi", null, "bloodyhands" );
					bloodsies.color = this.gloves.blood_color;
					standing.overlays.Add( bloodsies );
					O.overlays += bloodsies;
				}
				this.gloves.screen_loc = "WEST+2:10,SOUTH+1:7";
				O.icon = standing;
				O.icon_state = standing.icon_state;
				this.overlays.Add( O );
				this.obj_overlays[8] = O;
			} else if ( this.blood_DNA != null && this.blood_DNA.len != 0 ) {
				O.icon = "icons/effects/blood.dmi";
				O.icon_state = "bloodyhands";
				O.color = this.hand_blood_color;
				this.overlays.Add( O );
				this.obj_overlays[8] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_id( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;
			dynamic ID_worn = null;
			dynamic dyn_overlay = null;

			this.overlays.Remove( this.obj_overlays[14] );

			if ( Lang13.Bool( this.wear_id ) ) {
				this.wear_id.screen_loc = "WEST+3:12,SOUTH:5";

				if ( Lang13.Bool( this.w_uniform ) && this.w_uniform.displays_id ) {
					O = this.obj_overlays[14];
					ID_worn = this.wear_id;
					O.icon = "icons/mob/ids.dmi";
					O.icon_state = ID_worn.icon_state;
					O.overlays.len = 0;

					if ( this.wear_id.dynamic_overlay != null ) {
						
						if ( Lang13.Bool( this.wear_id.dynamic_overlay["" + 14] ) ) {
							dyn_overlay = this.wear_id.dynamic_overlay["" + 14];
							O.overlays += dyn_overlay;
						}
					}
					this.overlays.Add( O );
					this.obj_overlays[14] = O;
				}
			}
			this.hud_updateflag |= 8;
			this.hud_updateflag |= 16;

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_w_uniform( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;
			string t_color = null;
			Image standing = null;
			dynamic under_uniform = null;
			dynamic dyn_overlay = null;
			Image bloodsies = null;
			Obj_Item_Clothing_Accessory accessory = null;
			dynamic tie_color = null;
			Obj_Item thing = null;

			this.overlays.Remove( this.obj_overlays[5] );

			if ( Lang13.Bool( this.w_uniform ) && this.w_uniform is Obj_Item_Clothing_Under && !this.check_hidden_body_flags( 414 ) ) {
				this.w_uniform.screen_loc = "WEST:6,SOUTH+1:7";
				O = this.obj_overlays[5];
				O.overlays.len = 0;
				t_color = this.w_uniform._color;

				if ( !Lang13.Bool( t_color ) ) {
					t_color = this.icon_state;
				}
				standing = new Image( null, null, "" + t_color + "_s" );

				if ( this.mutations.Contains( 6 ) && Lang13.Bool( this.species.flags & 8192 ) ) {
					
					if ( Lang13.Bool( this.w_uniform.flags & 8192 ) ) {
						standing.icon = "icons/mob/uniform_fat.dmi";
					} else {
						GlobalFuncs.to_chat( this, new Txt( "<span class='warning'>You burst out of " ).the( this.w_uniform ).item().str( "!</span>" ).ToString() );
						this.drop_from_inventory( this.w_uniform );
						return;
					}
				} else {
					standing.icon = "icons/mob/uniform.dmi";
				}
				under_uniform = this.w_uniform;

				if ( under_uniform.species_fit.Contains( this.species.name ) ) {
					
					if ( Lang13.Bool( this.species.uniform_icons ) ) {
						standing.icon = this.species.uniform_icons;
					}
				}

				if ( Lang13.Bool( this.w_uniform.icon_override ) ) {
					standing.icon = this.w_uniform.icon_override;
				}

				if ( this.w_uniform.dynamic_overlay != null ) {
					
					if ( Lang13.Bool( this.w_uniform.dynamic_overlay["" + 5] ) ) {
						dyn_overlay = this.w_uniform.dynamic_overlay["" + 5];
						O.overlays += dyn_overlay;
					}
				}

				if ( this.w_uniform.blood_DNA != null && this.w_uniform.blood_DNA.len != 0 ) {
					bloodsies = new Image( "icons/effects/blood.dmi", null, "uniformblood" );
					bloodsies.color = this.w_uniform.blood_color;
					O.overlays += bloodsies;
				}

				if ( under_uniform.accessories.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( under_uniform.accessories, typeof(Obj_Item_Clothing_Accessory) )) {
						accessory = _a;
						
						tie_color = accessory._color;

						if ( !Lang13.Bool( tie_color ) ) {
							tie_color = accessory.icon_state;
						}
						O.overlays += new Image( "icons/mob/ties.dmi", null, "" + tie_color );
					}
				}
				O.icon = standing;
				O.icon_state = standing.icon_state;
				this.overlays.Add( O );
				this.obj_overlays[5] = O;
			} else if ( !this.check_hidden_body_flags( 414 ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( new ByTable(new object [] { this.r_store, this.l_store, this.wear_id, this.belt }), typeof(Obj_Item) )) {
					thing = _b;
					

					if ( thing != null ) {
						this.u_equip( thing, true );

						if ( this.client != null ) {
							this.client.screen.Remove( thing );
						}

						if ( thing != null ) {
							thing.loc = this.loc;
							thing.layer = Convert.ToDouble( Lang13.Initial( thing, "layer" ) );
						}
					}
				}
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void regenerate_icons(  ) {
			base.regenerate_icons();

			if ( this.monkeyizing ) {
				return;
			}
			this.update_fire( false );
			this.update_mutations( false );
			this.update_mutantrace( false );
			this.update_inv_w_uniform( false );
			this.update_inv_gloves( false );
			this.update_inv_glasses( false );
			this.update_inv_ears( false );
			this.update_inv_shoes( false );
			this.update_inv_s_store( false );
			this.update_inv_wear_mask( false );
			this.update_inv_head( false );
			this.update_inv_belt( false );
			this.update_inv_back( false );
			this.update_inv_wear_suit( false );
			this.update_inv_wear_id( false );
			this.update_inv_r_hand( false );
			this.update_inv_l_hand( false );
			this.update_inv_handcuffed( false );
			this.update_inv_legcuffed( false );
			this.update_inv_pockets( false );
			this.QueueUpdateDamageIcon( true );
			this.update_icons();
			this.update_hud();
			return;
		}

		// Function from file: update_icons.dm
		public override void update_fire( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;

			this.overlays.Remove( this.obj_overlays[1] );

			if ( this.on_fire ) {
				O = this.obj_overlays[1];
				O.icon = this.fire_dmi;
				O.icon_state = this.fire_sprite;
				this.overlays.Add( O );
				this.obj_overlays[1] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_targeted( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;

			this.overlays.Remove( this.obj_overlays[24] );

			if ( this.targeted_by != null && this.target_locked != null ) {
				O = this.obj_overlays[24];
				O.icon = this.target_locked;
				O.icon_state = "locking";
				this.overlays.Add( O );
				this.obj_overlays[24] = O;
			} else if ( !( this.targeted_by != null ) && this.target_locked != null ) {
				Lang13.Delete( this.target_locked );
				this.target_locked = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_mutations( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			string fat = null;
			Image standing = null;
			dynamic O = null;
			bool add_image = false;
			string g = null;
			bool hulk = false;
			dynamic gene_type = null;
			Dna_Gene gene = null;
			dynamic underlay = null;
			dynamic mut = null;

			
			if ( this.mutations.Contains( 6 ) ) {
				fat = "fat";
			}
			standing = new Image( "icons/effects/genetics.dmi" );
			this.overlays.Remove( this.obj_overlays[3] );
			O = this.obj_overlays[3];
			O.overlays.len = 0;
			O.underlays.len = 0;
			add_image = false;
			g = "m";

			if ( this.gender == GlobalVars.FEMALE ) {
				g = "f";
			}
			hulk = false;

			foreach (dynamic _a in Lang13.Enumerate( this.active_genes )) {
				gene_type = _a;
				
				gene = GlobalVars.dna_genes[gene_type];

				if ( !Lang13.Bool( gene.block ) ) {
					continue;
				}

				if ( gene.name == "Hulk" ) {
					hulk = true;
				}
				underlay = gene.OnDrawUnderlays( this, g, fat );

				if ( Lang13.Bool( underlay ) ) {
					O.underlays += underlay;
					add_image = true;
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.mutations )) {
				mut = _c;
				

				dynamic _b = mut; // Was a switch-case, sorry for the mess.
				if ( _b==4 ) {
					
					if ( !hulk ) {
						
						if ( Lang13.Bool( fat ) ) {
							standing.underlays.Add( "hulk_" + fat + "_s" );
						} else {
							standing.underlays.Add( "hulk_" + g + "_s" );
						}
						add_image = true;
					}
				} else if ( _b==9 ) {
					O.overlays += "lasereyes_s";
					add_image = true;
				}
			}

			if ( this.mutations.Contains( 2 ) && this.mutations.Contains( 106 ) ) {
				O.underlays -= "cold" + fat + "_s";
				O.underlays -= "fire" + fat + "_s";
				O.underlays += "coldfire" + fat + "_s";
			}

			if ( add_image ) {
				O.icon = standing;
				O.icon_state = standing.icon_state;
				this.overlays.Add( O );
				this.obj_overlays[3] = O;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void UpdateDamageIcon( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			Image standing_image = null;
			Organ_External O = null;
			Icon DI = null;
			dynamic O2 = null;

			standing_image = new Image( "icons/mob/dam_human.dmi", "blank" );

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				O = _a;
				

				if ( !( ( O.status & 64 ) != 0 ) ) {
					O.update_icon();

					if ( O.damage_state == "00" ) {
						continue;
					}
					DI = null;
					DI = this.get_damage_icon_part( O.damage_state, O.icon_name, ( this.species.blood_color == "#A10808" ? "" : this.species.blood_color ) );
					standing_image.overlays.Add( DI );
				}
			}
			O2 = this.obj_overlays[4];
			this.overlays.Remove( O2 );
			O2.overlays.len = 0;
			O2.overlays += standing_image;
			this.overlays.Add( O2 );
			this.obj_overlays[4] = O2;

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override dynamic update_icons(  ) {
			this.update_hud();
			this.update_overlays_standing();
			this.update_transform();
			return null;
		}

		// Function from file: say.dm
		public override bool say_understands( Ent_Dynamic other = null, Language speaking = null ) {
			Ent_Dynamic D = null;

			
			if ( other != null ) {
				other = other.GetSource();
			}

			if ( Lang13.Bool( this.has_brain_worms() ) ) {
				return true;
			}

			if ( !( speaking != null ) ) {
				
				if ( other is Mob_Living_Carbon_Monkey_Diona ) {
					D = other;

					if ( ((dynamic)D).donors.len >= 4 ) {
						return true;
					}
				}

				if ( other is Mob_Living_Silicon ) {
					return true;
				}

				if ( other is Mob_Living_Carbon_Brain ) {
					return true;
				}

				if ( other is Mob_Living_Carbon_Slime ) {
					return true;
				}
			}
			return base.say_understands( other, speaking );
		}

		// Function from file: say.dm
		public override string get_alt_name(  ) {
			
			if ( this.name != this.GetVoice() ) {
				return this.get_id_name( "Unknown" );
			}
			return null;
		}

		// Function from file: say.dm
		public override int radio( Game_Data speech = null, string message_mode = null ) {
			int _default = 0;

			_default = base.radio( speech, message_mode );

			if ( _default != 0 ) {
				return _default;
			}

			switch ((string)( message_mode )) {
				case "headset":
					
					if ( Lang13.Bool( this.ears ) ) {
						((Obj_Item)this.ears).talk_into( speech, message_mode );
					}
					return 3;
					break;
				case "secure headset":
					
					if ( Lang13.Bool( this.ears ) ) {
						((Obj_Item)this.ears).talk_into( speech, message_mode );
					}
					return 3;
					break;
				case "department":
					
					if ( Lang13.Bool( this.ears ) ) {
						((Obj_Item)this.ears).talk_into( speech, message_mode );
					}
					return 3;
					break;
			}

			if ( GlobalVars.radiochannels.Contains( message_mode ) ) {
				
				if ( Lang13.Bool( this.ears ) ) {
					((Obj_Item)this.ears).talk_into( speech, message_mode );
					return 3;
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public override bool binarycheck(  ) {
			dynamic dongle = null;

			
			if ( Lang13.Bool( this.ears ) ) {
				dongle = this.ears;

				if ( !( dongle is Obj_Item_Device_Radio_Headset ) ) {
					return false;
				}

				if ( Lang13.Bool( dongle.translate_binary ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: say.dm
		public override bool IsVocal(  ) {
			
			if ( this.mind != null ) {
				return !this.miming;
			}
			return true;
		}

		// Function from file: say.dm
		public override dynamic GetVoice(  ) {
			dynamic V = null;
			dynamic idcard = null;

			
			if ( this.wear_mask is Obj_Item_Clothing_Mask_Gas_Voice ) {
				V = this.wear_mask;

				if ( V.vchange && Lang13.Bool( this.wear_id ) && V.is_flipped == 1 ) {
					idcard = ((Obj_Item)this.wear_id).GetID();

					if ( idcard is Obj_Item_Weapon_Card_Id ) {
						return idcard.registered_name;
					} else {
						return "Unknown";
					}
				} else {
					return this.real_name;
				}
			}

			if ( this.mind != null && this.mind.changeling != null && Lang13.Bool( this.mind.changeling.mimicing ) ) {
				return this.mind.changeling.mimicing;
			}

			if ( Lang13.Bool( this.GetSpecialVoice() ) ) {
				return this.GetSpecialVoice();
			}
			return this.real_name;
		}

		// Function from file: say.dm
		public override void treat_speech( Game_Data speech = null, bool? genesay = null ) {
			genesay = genesay ?? false;

			Disease_PierrotThroat D = null;
			ByTable temp_message = null;
			ByTable pick_list = null;
			int? i = null;
			int? i2 = null;
			dynamic H = null;

			
			if ( Lang13.Bool( this.wear_mask ) && this.wear_mask is Obj_Item_Clothing_Mask ) {
				
				if ( !( String13.SubStr( ((dynamic)speech).message, 1, 2 ) == "*" || this.mind != null && this.mind.changeling != null && GlobalVars.department_radio_keys[String13.SubStr( ((dynamic)speech).message, 1, 3 )] != "changeling" ) ) {
					((Obj_Item_Clothing_Mask)this.wear_mask).treat_mask_speech( speech );
				}
			}

			if ( this.mutations.Contains( 4 ) && Convert.ToDouble( this.health ) >= 25 && Lang13.Length( ((dynamic)speech).message ) != 0 ) {
				((dynamic)speech).message = "" + String13.ToUpper( GlobalFuncs.replacetext( ((dynamic)speech).message, ".", "!" ) ) + "!!";
			}

			if ( this.slurring != 0 || this.undergoing_hypothermia() == 2 && Rand13.PercentChance( 25 ) ) {
				((dynamic)speech).message = GlobalFuncs.slur( ((dynamic)speech).message );
			}

			if ( this.viruses != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease_PierrotThroat) )) {
					D = _a;
					
					temp_message = GlobalFuncs.text2list( ((dynamic)speech).message, " " );
					pick_list = new ByTable();
					i = null;
					i = 1;

					while (( i ??0) <= temp_message.len) {
						pick_list.Add( i );
						i++;
					}
					i2 = null;
					i2 = 1;

					while (( i2 ??0) <= ( D.stage ??0) && ( i2 ??0) <= temp_message.len) {
						
						if ( Rand13.PercentChance( ( D.stage ??0) * 3 ) ) {
							H = Rand13.PickFromTable( pick_list );

							if ( String13.FindIgnoreCase( temp_message[H], "*", 1, 0 ) != 0 || String13.FindIgnoreCase( temp_message[H], ";", 1, 0 ) != 0 || String13.FindIgnoreCase( temp_message[H], ":", 1, 0 ) != 0 ) {
								i2++;
								continue;
							}
							temp_message[H] = "HONK";
							pick_list.Remove( H );
						}
						((dynamic)speech).message = GlobalFuncs.list2text( temp_message, " " );
						i2++;
					}
				}
			}
			base.treat_speech( speech, genesay );

			if ( this.dna != null ) {
				((Species)this.species).handle_speech( speech, this );
			}
			return;
		}

		// Function from file: say.dm
		public override string say_quote( dynamic text = null ) {
			Mob_Living_Carbon_Human L = null;
			string ending = null;

			
			if ( !Lang13.Bool( text ) ) {
				return "says, \"...\"";
			}

			if ( Lang13.Bool( this.stuttering ) ) {
				return "stammers, " + text;
			}

			if ( this is Mob_Living ) {
				L = this;

				if ( L.getBrainLoss() >= 60 ) {
					return "gibbers, " + text;
				}
			}
			ending = String13.SubStr( text, Lang13.Length( text ), 0 );

			if ( ending == "?" ) {
				return "asks, " + text;
			}

			if ( ending == "!" ) {
				return "exclaims, " + text;
			}
			return "says, " + text;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.update_hud();
			((GameMode)GlobalVars.ticker.mode).update_all_synd_icons();
			return null;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			GasMixture environment = null;
			Ent_Static location_as_object = null;
			Obj_Item_Weapon_Grab G = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.monkeyizing ) {
				return false;
			}

			if ( !( this.loc != null ) ) {
				return false;
			}

			if ( this.do_deferred_species_setup ) {
				this.DeferredSpeciesSetup();
				this.do_deferred_species_setup = false;
			}
			this.blinded = null;
			this.fire_alert = 0;
			this.life_tick++;
			environment = this.loc.return_air();
			this.in_stasis = this.loc is Obj_Structure_Closet_BodyBag_Cryobag && Lang13.Bool( ((dynamic)this.loc).opened ) == false;

			if ( this.in_stasis ) {
				((dynamic)this.loc).used++;
			}

			if ( this.stat != 2 && !this.in_stasis ) {
				
				if ( GlobalVars.air_master.current_cycle % 4 == 2 || this.failed_last_breath ) {
					this.breathe();
					this.last_processed = "Breathe";
				} else if ( this.loc is Obj ) {
					location_as_object = this.loc;
					((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
					this.last_processed = "Interacted with our container";
				}

				if ( this.check_mutations ) {
					Game13.log.WriteMsg( "## TESTING: " + ( "Updating " + this.real_name + "'s mutations: " + GlobalFuncs.english_list( this.mutations ) ) );
					GlobalFuncs.domutcheck( this, null, true );
					this.update_mutations();
					this.check_mutations = false;
				}
				this.handle_changeling();
				this.handle_mutations_and_radiation();
				this.handle_chemicals_in_body();
				this.handle_disabilities();
				this.handle_random_events();
				this.handle_virus_updates();
				this.handle_stomach();
				this.handle_shock();
				this.handle_pain();
				this.handle_medical_side_effects();
				this.handle_equipment();
			}
			this.handle_stasis_bag();

			if ( this.life_tick > 5 && this.timeofdeath != 0 && ( this.timeofdeath < 5 || Game13.time - this.timeofdeath > 6000 ) ) {
				this.cycle = "DEAD";
				return false;
			}
			this.handle_environment( environment );
			this.handle_fire();
			this.handle_regular_status_updates();
			this.update_canmove();
			this.name = this.get_visible_name();
			this.handle_regular_hud_updates();
			this.pulse = this.handle_pulse();

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Grab) )) {
				G = _a;
				
				G.process();
			}

			if ( this.mind != null && this.mind.vampire != null ) {
				this.handle_vampire();
			}
			this.handle_alpha();

			if ( this.update_overlays ) {
				this.update_overlays = false;
				this.UpdateDamageIcon();
			}
			this.cycle++;
			base.Life();
			return false;
		}

		// Function from file: inventory.dm
		public override dynamic get_multitool( bool? if_active = null ) {
			if_active = if_active ?? false;

			
			if ( this.get_active_hand() is Obj_Item_Device_Multitool ) {
				return this.get_active_hand();
			}

			if ( if_active == true && this.get_inactive_hand() is Obj_Item_Device_Multitool ) {
				return this.get_inactive_hand();
			}
			return null;
		}

		// Function from file: inventory.dm
		public override bool equip_to_slot( dynamic W = null, dynamic slot = null, bool? redraw_mob = null ) {
			redraw_mob = redraw_mob ?? true;

			
			if ( !Lang13.Bool( slot ) ) {
				return false;
			}

			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( !this.has_organ_for_slot( slot ) ) {
				return false;
			}

			if ( W == this.l_hand ) {
				this.l_hand = null;
				this.update_inv_l_hand();
			} else if ( W == this.r_hand ) {
				this.r_hand = null;
				this.update_inv_r_hand();
			}

			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				this.back = W;
				this.update_inv_back( redraw_mob );
			} else if ( _a==2 ) {
				this.wear_mask = W;
				this.update_inv_wear_mask( redraw_mob );
			} else if ( _a==3 ) {
				this.handcuffed = W;
				this.update_inv_handcuffed( redraw_mob );
			} else if ( _a==19 ) {
				this.legcuffed = W;
				this.update_inv_legcuffed( redraw_mob );
			} else if ( _a==4 ) {
				this.l_hand = W;
				this.update_inv_l_hand( redraw_mob );
			} else if ( _a==5 ) {
				this.r_hand = W;
				this.update_inv_r_hand( redraw_mob );
			} else if ( _a==6 ) {
				this.belt = W;
				this.update_inv_belt( redraw_mob );
			} else if ( _a==7 ) {
				this.wear_id = W;
				this.update_inv_wear_id( redraw_mob );
			} else if ( _a==8 ) {
				this.ears = W;
				this.update_inv_ears( redraw_mob );
			} else if ( _a==9 ) {
				this.glasses = W;
				this.update_inv_glasses( redraw_mob );
			} else if ( _a==10 ) {
				this.gloves = W;
				this.update_inv_gloves( redraw_mob );
			} else if ( _a==11 ) {
				this.head = W;
				this.update_hair( redraw_mob );

				if ( W is Obj_Item_Clothing_Head_Kitty ) {
					W.update_icon( this );
				}
				this.update_inv_head( redraw_mob );
			} else if ( _a==12 ) {
				this.shoes = W;
				this.update_inv_shoes( redraw_mob );
			} else if ( _a==13 ) {
				this.wear_suit = W;
				this.update_inv_wear_suit( redraw_mob );
			} else if ( _a==14 ) {
				this.w_uniform = W;
				this.update_inv_w_uniform( redraw_mob );
			} else if ( _a==15 ) {
				this.l_store = W;
				this.update_inv_pockets( redraw_mob );
			} else if ( _a==16 ) {
				this.r_store = W;
				this.update_inv_pockets( redraw_mob );
			} else if ( _a==17 ) {
				this.s_store = W;
				this.update_inv_s_store( redraw_mob );
			} else if ( _a==18 ) {
				
				if ( this.get_active_hand() == W ) {
					this.u_equip( W, false );
				}
				W.loc = this.back;
				return false;
			} else {
				GlobalFuncs.to_chat( this, "<span class='warning'>You are trying to equip this item to an unsupported inventory slot. Report this to a coder!</span>" );
				return false;
			}
			this.update_hidden_item_icons( W );
			W.layer = 20;
			((Obj_Item)W).equipped( this, slot );
			W.loc = this;
			return false;
		}

		// Function from file: inventory.dm
		public override bool u_equip( dynamic W = null, bool? dropped = null ) {
			dropped = dropped ?? true;

			bool success = false;

			
			if ( !Lang13.Bool( W ) ) {
				return false;
			}

			if ( W == this.wear_suit ) {
				
				if ( Lang13.Bool( this.s_store ) ) {
					this.u_equip( this.s_store, true );
				}
				success = true;
				this.wear_suit = null;
				this.update_inv_wear_suit();
			} else if ( W == this.w_uniform ) {
				
				if ( Lang13.Bool( this.r_store ) ) {
					this.u_equip( this.r_store, true );
				}

				if ( Lang13.Bool( this.l_store ) ) {
					this.u_equip( this.l_store, true );
				}

				if ( Lang13.Bool( this.wear_id ) ) {
					this.u_equip( this.wear_id, true );
				}

				if ( Lang13.Bool( this.belt ) ) {
					this.u_equip( this.belt, true );
				}
				this.w_uniform = null;
				success = true;
				this.update_inv_w_uniform();
			} else if ( W == this.gloves ) {
				this.gloves = null;
				success = true;
				this.update_inv_gloves();
			} else if ( W == this.glasses ) {
				this.glasses = null;
				success = true;
				this.update_inv_glasses();
			} else if ( W == this.head ) {
				this.head = null;
				success = true;
				this.update_inv_head();
			} else if ( W == this.ears ) {
				this.ears = null;
				success = true;
				this.update_inv_ears();
			} else if ( W == this.shoes ) {
				this.shoes = null;
				success = true;
				this.update_inv_shoes();
			} else if ( W == this.belt ) {
				this.belt = null;
				success = true;
				this.update_inv_belt();
			} else if ( W == this.wear_mask ) {
				this.wear_mask = null;
				success = true;

				if ( Lang13.Bool( this.v_internal ) ) {
					
					if ( this.internals != null ) {
						((dynamic)this.internals).icon_state = "internal0";
					}
					this.v_internal = null;
				}
				this.update_inv_wear_mask();
			} else if ( W == this.wear_id ) {
				this.wear_id = null;
				success = true;
				this.update_inv_wear_id();
			} else if ( W == this.r_store ) {
				this.r_store = null;
				success = true;
				this.update_inv_pockets();
			} else if ( W == this.l_store ) {
				this.l_store = null;
				success = true;
				this.update_inv_pockets();
			} else if ( W == this.s_store ) {
				this.s_store = null;
				success = true;
				this.update_inv_s_store();
			} else if ( W == this.back ) {
				this.back = null;
				success = true;
				this.update_inv_back();
			} else if ( W == this.handcuffed ) {
				this.handcuffed = null;
				success = true;
				this.update_inv_handcuffed();
			} else if ( W == this.legcuffed ) {
				this.legcuffed = null;
				success = true;
				this.update_inv_legcuffed();
			} else if ( W == this.r_hand ) {
				this.r_hand = null;
				success = true;
				this.update_inv_r_hand();
			} else if ( W == this.l_hand ) {
				this.l_hand = null;
				success = true;
				this.update_inv_l_hand();
			} else {
				return false;
			}

			if ( success ) {
				this.update_hidden_item_icons( W );
			}

			if ( success ) {
				
				if ( Lang13.Bool( W ) ) {
					
					if ( this.client != null ) {
						this.client.screen.Remove( W );
					}
					W.loc = this.loc;
					((Obj_Item)W).unequipped();

					if ( dropped == true ) {
						((Obj_Item)W).dropped( this );
					}

					if ( Lang13.Bool( W ) ) {
						W.layer = Lang13.Initial( W, "layer" );
					}
				}
			}
			this.update_action_buttons();
			return true;
		}

		// Function from file: inventory.dm
		public override dynamic get_item_by_slot( dynamic slot_id = null ) {
			
			dynamic _a = slot_id; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return this.back;
			} else if ( _a==2 ) {
				return this.wear_mask;
			} else if ( _a==3 ) {
				return this.handcuffed;
			} else if ( _a==19 ) {
				return this.legcuffed;
			} else if ( _a==4 ) {
				return this.l_hand;
			} else if ( _a==5 ) {
				return this.r_hand;
			} else if ( _a==6 ) {
				return this.belt;
			} else if ( _a==7 ) {
				return this.wear_id;
			} else if ( _a==8 ) {
				return this.ears;
			} else if ( _a==9 ) {
				return this.glasses;
			} else if ( _a==10 ) {
				return this.gloves;
			} else if ( _a==11 ) {
				return this.head;
			} else if ( _a==12 ) {
				return this.shoes;
			} else if ( _a==13 ) {
				return this.wear_suit;
			} else if ( _a==14 ) {
				return this.w_uniform;
			} else if ( _a==15 ) {
				return this.l_store;
			} else if ( _a==16 ) {
				return this.r_store;
			} else if ( _a==17 ) {
				return this.s_store;
			}
			return null;
		}

		// Function from file: inventory.dm
		public override bool put_in_hand_check( dynamic I = null, bool? this_hand = null ) {
			
			if ( !this.can_use_hand( this_hand ) ) {
				return false;
			}
			return base.put_in_hand_check( (object)(I), this_hand );
		}

		// Function from file: inventory.dm
		public override ByTable get_clothing_items( ByTable filter = null ) {
			
			if ( !( filter != null ) || !( filter is ByTable ) ) {
				filter = this.get_all_slots();
			}
			filter.Remove( new ByTable(new object [] { this.back, this.handcuffed, this.legcuffed, this.belt, this.wear_id, this.l_hand, this.r_hand, this.l_store, this.r_store, this.s_store }) );
			return filter;
		}

		// Function from file: inventory.dm
		public override ByTable get_all_slots(  ) {
			ByTable _default = null;

			_default = this.get_head_slots() | this.get_body_slots();
			return _default;
		}

		// Function from file: human_movement.dm
		public override int CheckSlip(  ) {
			int _default = 0;

			_default = base.CheckSlip();

			if ( _default != 0 && Lang13.Bool( this.shoes ) && Lang13.Bool( this.shoes.flags & 1024 ) ) {
				_default = ( this.shoes is Obj_Item_Clothing_Shoes_Magboots ? -1 : 0 );
			}
			return _default;
		}

		// Function from file: human_movement.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;
			step_x = step_x ?? 0;
			step_y = step_y ?? 0;

			bool _default = false;

			int old_z = 0;
			dynamic S = null;
			Obj_Item_Weapon_Bomberman dispenser = null;
			dynamic R = null;

			old_z = this.z;
			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( _default ) {
				
				if ( old_z != this.z ) {
					GlobalVars.crewmonitor.queueUpdate( old_z );
				}
				GlobalVars.crewmonitor.queueUpdate( this.z );

				if ( Lang13.Bool( this.shoes ) && this.shoes is Obj_Item_Clothing_Shoes ) {
					S = this.shoes;
					((Obj_Item_Clothing_Shoes)S).step_action();
				}

				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Bomberman) )) {
					dispenser = _a;
					

					if ( dispenser.spam_bomb ) {
						dispenser.attack_self( this );
					}
				}
				R = this.get_active_hand();

				if ( Lang13.Bool( R ) && R is Obj_Item_Weapon_Rcl && Lang13.Bool( R.active ) ) {
					((Obj_Item_Weapon_Rcl)R).trigger( this );
				}
			}
			return _default;
		}

		// Function from file: human_movement.dm
		public override double? Process_Spaceslipping( double? prob_slip = null ) {
			prob_slip = prob_slip ?? 5;

			
			if ( Lang13.Bool( this.stat ) ) {
				prob_slip = 0;
			}

			if ( this.CheckSlip() < 0 ) {
				prob_slip = 0;
			}

			if ( !Lang13.Bool( this.l_hand ) ) {
				prob_slip -= 2;
			} else if ( Convert.ToDouble( this.l_hand.w_class ) <= 2 ) {
				prob_slip -= 1;
			}

			if ( !Lang13.Bool( this.r_hand ) ) {
				prob_slip -= 2;
			} else if ( Convert.ToDouble( this.r_hand.w_class ) <= 2 ) {
				prob_slip -= 1;
			}
			prob_slip = Num13.Floor( prob_slip ??0 );
			return prob_slip;
		}

		// Function from file: human_movement.dm
		public override int Process_Spacemove( bool? check_drift = null, bool? ignore_slip = null ) {
			check_drift = check_drift ?? false;

			dynamic J = null;

			
			if ( this.restrained() ) {
				return 0;
			}

			if ( this.flying ) {
				this.inertia_dir = 0;
				return 1;
			}

			if ( this.back is Obj_Item_Weapon_Tank_Jetpack ) {
				J = this.back;

				if ( ( !( check_drift == true ) || check_drift == true && J.stabilization_on ) && !( this.lying == true ) && ((Obj_Item_Weapon_Tank_Jetpack)J).allow_thrust( 0.01, this ) ) {
					this.inertia_dir = 0;
					return 1;
				}
			}

			if ( base.Process_Spacemove( check_drift, ignore_slip ) != 0 ) {
				return 1;
			}
			return 0;
		}

		// Function from file: human_movement.dm
		public override dynamic movement_delay(  ) {
			double tally = 0;
			Ent_Static T = null;
			double health_deficiency = 0;
			double hungry = 0;
			dynamic organ_name = null;
			dynamic E = null;
			int skate_bonus = 0;
			int disease_slow = 0;
			Obj_Item_Weapon_Bomberman dispenser = null;

			tally = 0;

			if ( Lang13.Bool( this.species ) && this.species.move_speed_mod != 0 ) {
				tally += this.species.move_speed_mod;
			}

			if ( this.loc is Tile_Space ) {
				return -1;
			}

			if ( this.flying ) {
				return -1;
			}

			if ( ((Reagents)this.reagents).has_reagent( "hyperzine" ) ) {
				
				if ( this.dna.mutantrace == "slime" ) {
					tally *= 2;
				} else {
					tally -= 10;
				}
			}

			if ( ((Reagents)this.reagents).has_reagent( "nuka_cola" ) ) {
				tally -= 10;
			}

			if ( this.mutations.Contains( 103 ) ) {
				tally -= 10;
			}

			if ( this.loc is Tile_Space ) {
				return -1;
			}

			if ( this.loc is Tile_Simulated_Floor ) {
				T = this.loc;

				if ( ((dynamic)T).material == "phazon" ) {
					return -1;
				}
			}
			health_deficiency = 100 - Convert.ToDouble( this.health ) - this.halloss;

			if ( health_deficiency >= 40 ) {
				tally += health_deficiency / 25;
			}
			hungry = ( 500 - this.nutrition ) / 5;

			if ( hungry >= 70 ) {
				tally += hungry / 50;
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				tally += this.wear_suit.slowdown;
			}

			if ( Lang13.Bool( this.shoes ) ) {
				tally += this.shoes.slowdown;
			}

			if ( this.l_hand is Obj_Item_Offhand ) {
				tally += this.r_hand.slowdown;
			}

			if ( this.r_hand is Obj_Item_Offhand ) {
				tally += this.l_hand.slowdown;
			}

			if ( ((Reagents)this.reagents).has_reagent( "frostoil" ) && this.dna.mutantrace == "slime" ) {
				tally *= 5;
			}

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { "l_foot", "r_foot", "l_leg", "r_leg" }) )) {
				organ_name = _a;
				
				E = this.get_organ( organ_name );

				if ( !Lang13.Bool( E ) || Lang13.Bool( E.status & 64 ) ) {
					tally += 4;
				}

				if ( Lang13.Bool( E.status & 256 ) ) {
					tally += 0.5;
				} else if ( Lang13.Bool( E.status & 32 ) ) {
					tally += 1.5;
				}
			}

			if ( this.shock_stage >= 50 ) {
				tally += 3;
			}

			if ( this.mutations.Contains( 6 ) ) {
				tally += 1.5;
			}

			if ( this.dna.mutantrace == "slime" ) {
				
				if ( Convert.ToDouble( this.bodytemperature ) >= 330.2300109863281 ) {
					return -1;
				}

				if ( Convert.ToDouble( this.bodytemperature ) < 183.222 ) {
					tally += ( 283.22198486328125 - Convert.ToDouble( this.bodytemperature ) ) / 10 * 1.75;
				}
			} else if ( this.undergoing_hypothermia() != 0 ) {
				tally += this.undergoing_hypothermia() * 2;
			}
			skate_bonus = 0;
			disease_slow = 0;

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Bomberman) )) {
				dispenser = _b;
				
				disease_slow = Num13.MaxInt( disease_slow, dispenser.slow ?1:0 );
				skate_bonus = Num13.MaxInt( skate_bonus, dispenser.speed_bonus );
			}
			tally = tally - skate_bonus + disease_slow * 6;
			return Num13.MaxInt( ((int)( tally + Convert.ToDouble( GlobalVars.config.human_delay ) )), -1 );
		}

		// Function from file: human.dm
		public override bool blob_act( dynamic severity = null ) {
			string dam_zone = null;
			string affecting = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return false;
			}
			this.show_message( "<span class='warning'>The blob attacks you!</span>" );
			dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });
			affecting = this.get_organ( GlobalFuncs.ran_zone( dam_zone ) );
			this.apply_damage( Rand13.Int( 30, 40 ), "brute", affecting, this.run_armor_check( affecting, "melee" ) );
			return false;
		}

		// Function from file: human_defense.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			child = child ?? GlobalVars.FALSE;

			bool shielded = false;
			dynamic b_loss = null;
			dynamic f_loss = null;
			dynamic target = null;
			int gotarmor = 0;
			int update = 0;
			dynamic take_blast = null;
			string weapon_message = null;
			Organ_External temp = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.blinded ) && !Lang13.Bool( child ) ) {
				Icon13.Flick( "flash", this.flash );
			}
			shielded = false;
			b_loss = null;
			f_loss = null;

			switch ((int?)( severity )) {
				case 1:
					b_loss += 500;

					if ( !Rand13.PercentChance( ((int)( this.getarmor( null, "bomb" ) )) ) ) {
						this.gib();
						return false;
					} else {
						target = GlobalFuncs.get_edge_target_turf( this, Map13.GetDistance( this, Map13.GetStepAway( this, this, null ) ) );
						this.throw_at( target, 200, 4 );
					}
					break;
				case 2:
					
					if ( this.stat == 2 && this.client != null ) {
						this.gib();
						return false;
					} else if ( this.stat == 2 && !( this.client != null ) ) {
						GlobalFuncs.gibs( this.loc, this.viruses );
						GlobalFuncs.qdel( this );
						return false;
					}

					if ( !shielded ) {
						b_loss += 60;
					}
					f_loss += 60;

					if ( Rand13.PercentChance( ((int)( this.getarmor( null, "bomb" ) )) ) ) {
						b_loss = b_loss / 1.5;
						f_loss = f_loss / 1.5;
					}

					if ( !this.earprot() ) {
						this.ear_damage += 30;
						this.ear_deaf += 120;
					}

					if ( Rand13.PercentChance( 70 ) && !shielded ) {
						this.Paralyse( 10 );
					}
					break;
				case 3:
					b_loss += 30;
					gotarmor = Num13.MinInt( 100, Num13.MaxInt( 0, ((int)( this.getarmor( null, "bomb" ) )) ) );

					if ( Rand13.PercentChance( gotarmor ) ) {
						b_loss = b_loss * ( gotarmor - 100 ) * -1 / 100;
					}

					if ( !this.earprot() ) {
						this.ear_damage += 15;
						this.ear_deaf += 60;
					}

					if ( Rand13.PercentChance( 50 ) && !shielded ) {
						
						if ( !Rand13.PercentChance( ( gotarmor - 100 ) * -1 ) ) {
							this.Paralyse( 10 );
						}
					}
					break;
			}
			update = 0;
			take_blast = Rand13.PickFromTable( this.organs );
			update |= Convert.ToInt32( new ByTable().Set( 1, b_loss * 081 ).Set( 2, f_loss * 081 ).Set( "used_weapon", "Explosive blast" ).Apply( Lang13.BindFunc( take_blast, "take_damage" ) ) );
			b_loss *= 0.1;
			f_loss *= 0.1;
			weapon_message = "Explosive Blast";

			foreach (dynamic _c in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				temp = _c;
				

				switch ((string)( temp.name )) {
					case "head":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.2 ), Lang13.DoubleNullable( f_loss * 0.2 ), null, null, weapon_message ) ?1:0;
						break;
					case "chest":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.4 ), Lang13.DoubleNullable( f_loss * 0.4 ), null, null, weapon_message ) ?1:0;
						break;
					case "l_arm":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.05 ), Lang13.DoubleNullable( f_loss * 0.05 ), null, null, weapon_message ) ?1:0;
						break;
					case "r_arm":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.05 ), Lang13.DoubleNullable( f_loss * 0.05 ), null, null, weapon_message ) ?1:0;
						break;
					case "l_leg":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.05 ), Lang13.DoubleNullable( f_loss * 0.05 ), null, null, weapon_message ) ?1:0;
						break;
					case "r_leg":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.05 ), Lang13.DoubleNullable( f_loss * 0.05 ), null, null, weapon_message ) ?1:0;
						break;
					case "r_foot":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.05 ), Lang13.DoubleNullable( f_loss * 0.05 ), null, null, weapon_message ) ?1:0;
						break;
					case "l_foot":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.05 ), Lang13.DoubleNullable( f_loss * 0.05 ), null, null, weapon_message ) ?1:0;
						break;
					case "r_arm":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.05 ), Lang13.DoubleNullable( f_loss * 0.05 ), null, null, weapon_message ) ?1:0;
						break;
					case "l_arm":
						update |= temp.take_damage( Lang13.DoubleNullable( b_loss * 0.05 ), Lang13.DoubleNullable( f_loss * 0.05 ), null, null, weapon_message ) ?1:0;
						break;
				}
			}

			if ( update != 0 ) {
				this.UpdateDamageIcon();
			}
			return false;
		}

		// Function from file: human_defense.dm
		public override dynamic emp_act( int severity = 0 ) {
			Obj_Item_Stickybomb B = null;
			Obj O = null;
			Organ_External O2 = null;
			Organ_Internal I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Stickybomb) )) {
				B = _a;
				

				if ( Lang13.Bool( B.stuck_to ) ) {
					this.visible_message( new Txt( "<span class='warning'>" ).the( B ).item().str( " stuck on " ).the( this ).item().str( " suddenly deactivates itself and falls to the ground.</span>" ).ToString() );
					B.deactivate();
					B.unstick();
				}
			}

			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _b;
				

				if ( !( O != null ) ) {
					continue;
				}
				O.emp_act( severity );
			}

			foreach (dynamic _d in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				O2 = _d;
				

				if ( ( O2.status & 64 ) != 0 ) {
					continue;
				}
				O2.emp_act( severity );

				foreach (dynamic _c in Lang13.Enumerate( O2.internal_organs, typeof(Organ_Internal) )) {
					I = _c;
					

					if ( I.robotic == 0 ) {
						continue;
					}
					I.emp_act( severity );
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: human_defense.dm
		public override double getarmor( dynamic def_zone = null, string type = null ) {
			double armorval = 0;
			int organnum = 0;
			dynamic affecting = null;
			Organ_External organ = null;

			armorval = 0;
			organnum = 0;

			if ( Lang13.Bool( def_zone ) ) {
				
				if ( def_zone is Organ_External ) {
					return this.checkarmor( def_zone, type );
				}
				affecting = this.get_organ( GlobalFuncs.ran_zone( def_zone ) );
				return this.checkarmor( affecting, type );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				organ = _a;
				
				armorval += this.checkarmor( organ, type );
				organnum++;
			}
			return armorval / Num13.MaxInt( organnum, 1 );
		}

		// Function from file: human_defense.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			double reflectchance = 0;

			
			if ( Lang13.Bool( this.wear_suit ) && this.wear_suit is Obj_Item_Clothing_Suit_Armor_Laserproof ) {
				
				if ( Proj is Obj_Item_Projectile_Energy || Proj is Obj_Item_Projectile_Beam || Proj is Obj_Item_Projectile_Forcebolt || Proj is Obj_Item_Projectile_Change ) {
					reflectchance = 60 - Num13.Floor( Convert.ToDouble( Proj.damage / 3 ) );

					if ( !new ByTable(new object [] { "chest", "groin" }).Contains( def_zone ) ) {
						reflectchance /= 2;
					}

					if ( Rand13.PercentChance( ((int)( reflectchance )) ) ) {
						this.visible_message( "<span class='danger'>The " + Proj.name + " gets reflected by " + this + "'s " + this.wear_suit.name + "!</span>" );
						Proj.reflected = true;
						((Obj_Item_Projectile)Proj).rebound( this );
						return -1;
					}
				}
			}

			if ( this.check_shields( Proj.damage, "the " + Proj.name ) ) {
				((Obj_Item_Projectile)Proj).on_hit( this, 2 );
				return 2;
			}
			return base.bullet_act( (object)(Proj), (object)(def_zone) );
		}

		// Function from file: human_damage.dm
		public override bool apply_damage( dynamic damage = null, dynamic damagetype = null, dynamic def_zone = null, dynamic blocked = null, dynamic sharp = null, dynamic edge = null, dynamic used_weapon = null ) {
			damage = damage ?? 0;
			damagetype = damagetype ?? "brute";
			blocked = blocked ?? 0;
			sharp = sharp ?? 0;
			edge = edge ?? 0;

			dynamic organ = null;
			dynamic P = null;
			Obj_Item_Weapon_Shard_Shrapnel S = null;
			dynamic F = null;
			Obj_Item_Device_Flashlight_Flare FS = null;

			
			if ( damagetype != "brute" && damagetype != "fire" ) {
				base.apply_damage( (object)(damage), (object)(damagetype), (object)(def_zone), (object)(blocked), (object)(sharp), (object)(edge), (object)(used_weapon) );
				return true;
			}

			if ( Convert.ToDouble( blocked ) >= 2 ) {
				return false;
			}
			organ = null;

			if ( def_zone is Organ_External ) {
				organ = def_zone;
			} else {
				
				if ( !Lang13.Bool( def_zone ) ) {
					def_zone = GlobalFuncs.ran_zone( def_zone );
				}
				organ = this.get_organ( GlobalFuncs.check_zone( def_zone ) );
			}

			if ( !Lang13.Bool( organ ) ) {
				return false;
			}

			if ( Lang13.Bool( blocked ) ) {
				damage = damage / ( blocked + 1 );
			}

			dynamic _a = damagetype; // Was a switch-case, sorry for the mess.
			if ( _a=="brute" ) {
				this.damageoverlaytemp = 20;

				if ( Lang13.Bool( this.species ) && this.species.brute_mod != 0 ) {
					damage = damage * this.species.brute_mod;
				}

				if ( Lang13.Bool( organ.take_damage( damage, 0, sharp, edge, used_weapon ) ) ) {
					this.UpdateDamageIcon( true );
				}
			} else if ( _a=="fire" ) {
				this.damageoverlaytemp = 20;

				if ( Lang13.Bool( this.species ) && this.species.burn_mod != 0 ) {
					damage = damage * this.species.burn_mod;
				}

				if ( Lang13.Bool( organ.take_damage( 0, damage, sharp, edge, used_weapon ) ) ) {
					this.UpdateDamageIcon( true );
				}
			}
			this.updatehealth();
			this.hud_updateflag |= 2;

			if ( !Lang13.Bool( organ ) ) {
				return false;
			}

			if ( used_weapon is Obj_Item_Projectile_Bullet ) {
				P = used_weapon;

				if ( Rand13.PercentChance( 75 ) && damagetype == "brute" && Lang13.Bool( P.embed ) ) {
					S = new Obj_Item_Weapon_Shard_Shrapnel();
					S.name = "" + P.name + " shrapnel";
					S.desc = "" + S.desc + " It looks like it was fired from " + P.shot_from + ".";
					S.loc = this;
					organ.implants.Add( S );
					this.visible_message( "<span class='danger'>The projectile sticks in the wound!</span>" );
					S.add_blood( this );
				}
			}

			if ( used_weapon is Obj_Item_Projectile_Flare ) {
				F = used_weapon;

				if ( damagetype == "fire" && Lang13.Bool( F.embed ) && ( F.shot_from is Obj_Item_Weapon_Gun_Projectile_Flare_Syndicate || F.shot_from is Obj_Item_Weapon_Gun_Lawgiver ) && Rand13.PercentChance( 75 ) ) {
					FS = new Obj_Item_Device_Flashlight_Flare();
					FS.name = "shot " + FS.name;
					FS.desc = "" + FS.desc + ". It looks like it was fired from " + F.shot_from + ".";
					FS.loc = this;
					organ.implants.Add( FS );
					this.visible_message( "<span class='danger'>The flare sticks in the wound!</span>" );
					FS.add_blood( this );
					FS.luminosity = 4;
					FS.Light( this );

					if ( Rand13.PercentChance( 80 ) ) {
						this.visible_message( "<span class='danger'><b>" + this.name + "</b> bursts into flames!</span>", "<span class='danger'>You burst into flames!</span>" );
						this.on_fire = true;
						this.adjust_fire_stacks( 0.5 );
						this.v_update_icon = true;
					}
					GlobalFuncs.qdel( F );
				}
			}
			return true;
		}

		// Function from file: human_damage.dm
		public override void restore_all_organs(  ) {
			Organ_External current_organ = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				current_organ = _a;
				
				current_organ.rejuvenate();
			}
			return;
		}

		// Function from file: human_damage.dm
		public override bool take_overall_damage( dynamic brute = null, dynamic burn = null, dynamic sharp = null, bool? edge = null, dynamic used_weapon = null ) {
			sharp = sharp ?? 0;
			edge = edge ?? false;

			ByTable parts = null;
			int update = 0;
			dynamic picked = null;
			double brute_was = 0;
			double burn_was = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			parts = this.get_damageable_organs();
			update = 0;

			while (parts.len != 0 && ( Convert.ToDouble( brute ) > 0 || Convert.ToDouble( burn ) > 0 )) {
				picked = Rand13.PickFromTable( parts );
				brute_was = picked.brute_dam;
				burn_was = picked.burn_dam;
				update |= Convert.ToInt32( picked.take_damage( brute, burn, sharp, edge, used_weapon ) );
				brute -= picked.brute_dam - brute_was;
				burn -= picked.burn_dam - burn_was;
				parts.Remove( picked );
			}
			this.updatehealth();
			this.hud_updateflag |= 2;

			if ( update != 0 ) {
				this.UpdateDamageIcon();
			}
			return false;
		}

		// Function from file: human_damage.dm
		public override void heal_overall_damage( dynamic brute = null, dynamic burn = null ) {
			ByTable parts = null;
			int update = 0;
			dynamic picked = null;
			double brute_was = 0;
			double burn_was = 0;

			parts = this.get_damaged_organs( brute, burn );
			update = 0;

			while (parts.len != 0 && ( Convert.ToDouble( brute ) > 0 || Convert.ToDouble( burn ) > 0 )) {
				picked = Rand13.PickFromTable( parts );
				brute_was = picked.brute_dam;
				burn_was = picked.burn_dam;
				update |= Convert.ToInt32( picked.heal_damage( brute, burn ) );
				brute -= brute_was - picked.brute_dam;
				burn -= burn_was - picked.burn_dam;
				parts.Remove( picked );
			}
			this.updatehealth();
			this.hud_updateflag |= 2;

			if ( update != 0 ) {
				this.UpdateDamageIcon();
			}
			return;
		}

		// Function from file: human_damage.dm
		public override bool take_organ_damage( dynamic brute = null, dynamic burn = null, bool? sharp = null, bool? edge = null ) {
			sharp = sharp ?? false;
			edge = edge ?? false;

			ByTable parts = null;
			dynamic picked = null;

			parts = this.get_damageable_organs();

			if ( !( parts.len != 0 ) ) {
				return false;
			}
			picked = Rand13.PickFromTable( parts );

			if ( Lang13.Bool( picked.take_damage( brute, burn, sharp, edge ) ) ) {
				this.UpdateDamageIcon();
				this.hud_updateflag |= 2;
			}
			this.updatehealth();
			return false;
		}

		// Function from file: human_damage.dm
		public override void heal_organ_damage( double brute = 0, double burn = 0 ) {
			ByTable parts = null;
			dynamic picked = null;

			parts = this.get_damaged_organs( brute, burn );

			if ( !( parts.len != 0 ) ) {
				return;
			}
			picked = Rand13.PickFromTable( parts );

			if ( Lang13.Bool( picked.heal_damage( brute, burn ) ) ) {
				this.UpdateDamageIcon();
				this.hud_updateflag |= 2;
			}
			this.updatehealth();
			return;
		}

		// Function from file: human_damage.dm
		public override bool adjustCloneLoss( dynamic amount = null ) {
			int heal_prob = 0;
			int mut_prob = 0;
			ByTable candidates = null;
			Organ_External O = null;
			dynamic O2 = null;
			Organ_External O3 = null;
			Organ_External O4 = null;

			base.adjustCloneLoss( (object)(amount) );

			if ( Lang13.Bool( this.species.flags & 16384 ) ) {
				return false;
			}
			heal_prob = Num13.MaxInt( 0, 80 - this.getCloneLoss() );
			mut_prob = Num13.MinInt( 80, this.getCloneLoss() + 10 );

			if ( Convert.ToDouble( amount ) > 0 ) {
				
				if ( Rand13.PercentChance( mut_prob ) ) {
					candidates = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
						O = _a;
						

						if ( !( ( O.status & 2048 ) != 0 ) ) {
							candidates.Or( O );
						}
					}

					if ( candidates.len != 0 ) {
						O2 = Rand13.PickFromTable( candidates );
						O2.mutate();
						GlobalFuncs.to_chat( this, "<span class = 'notice'>Something is not right with your " + O2.display_name + "...</span>" );
						return false;
					}
				}
			} else if ( Rand13.PercentChance( heal_prob ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
					O3 = _b;
					

					if ( ( O3.status & 2048 ) != 0 ) {
						O3.unmutate();
						GlobalFuncs.to_chat( this, "<span class = 'notice'>Your " + O3.display_name + " is shaped normally again.</span>" );
						return false;
					}
				}
			}

			if ( this.getCloneLoss() < 1 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
					O4 = _c;
					

					if ( ( O4.status & 2048 ) != 0 ) {
						O4.unmutate();
						GlobalFuncs.to_chat( this, "<span class = 'notice'>Your " + O4.display_name + " is shaped normally again.</span>" );
					}
				}
			}
			this.hud_updateflag |= 2;
			return false;
		}

		// Function from file: human_damage.dm
		public override void Paralyse( dynamic amount = null ) {
			
			if ( this.mutations.Contains( 4 ) ) {
				return;
			}
			base.Paralyse( (object)(amount) );
			return;
		}

		// Function from file: human_damage.dm
		public override void Weaken( dynamic amount = null ) {
			
			if ( this.mutations.Contains( 4 ) ) {
				return;
			}
			base.Weaken( (object)(amount) );
			return;
		}

		// Function from file: human_damage.dm
		public override void Stun( dynamic amount = null ) {
			
			if ( this.mutations.Contains( 4 ) ) {
				return;
			}
			base.Stun( (object)(amount) );
			return;
		}

		// Function from file: human_damage.dm
		public override bool adjustFireLoss( dynamic amount = null ) {
			
			if ( Lang13.Bool( this.species ) && this.species.burn_mod != 0 ) {
				amount = amount * this.species.burn_mod;
			}

			if ( Convert.ToDouble( amount ) > 0 ) {
				this.take_overall_damage( 0, amount );
			} else {
				this.heal_overall_damage( 0, -amount );
			}
			this.hud_updateflag |= 2;
			return false;
		}

		// Function from file: human_damage.dm
		public override bool adjustBruteLoss( dynamic amount = null, string damage_type = null ) {
			
			if ( Lang13.Bool( this.species ) && this.species.brute_mod != 0 ) {
				amount = amount * this.species.brute_mod;
			}

			if ( Convert.ToDouble( amount ) > 0 ) {
				this.take_overall_damage( amount, 0 );
			} else {
				this.heal_overall_damage( -amount, 0 );
			}
			this.hud_updateflag |= 2;
			return false;
		}

		// Function from file: human_damage.dm
		public override double getFireLoss(  ) {
			double amount = 0;
			Organ_External O = null;

			amount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				O = _a;
				
				amount += O.burn_dam;
			}
			return amount;
		}

		// Function from file: human_damage.dm
		public override double getBruteLoss(  ) {
			double amount = 0;
			Organ_External O = null;

			amount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				O = _a;
				
				amount += O.brute_dam;
			}
			return amount;
		}

		// Function from file: human_damage.dm
		public override int getBrainLoss(  ) {
			int res = 0;
			Organ_Internal sponge = null;

			res = this.brainloss;

			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.has_organ["brain"] ) ) {
				sponge = this.internal_organs_by_name["brain"];

				if ( !( sponge != null ) ) {
					res += 200;
				} else {
					
					if ( sponge.is_bruised() ) {
						res += 20;
					}

					if ( sponge.is_broken() ) {
						res += 50;
					}
				}
				res = Num13.MinInt( res, Convert.ToInt32( this.maxHealth * 2 ) );
				return res;
			}
			return 0;
		}

		// Function from file: human_damage.dm
		public override void updatehealth(  ) {
			double total_burn = 0;
			double total_brute = 0;
			Organ_External O = null;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				this.health = this.maxHealth;
				this.stat = 0;
				return;
			}
			total_burn = 0;
			total_brute = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				O = _a;
				
				total_brute += O.brute_dam;
				total_burn += O.burn_dam;
			}
			this.health = this.maxHealth - this.getOxyLoss() - this.getToxLoss() - this.getCloneLoss() - total_burn - total_brute;

			if ( Convert.ToDouble( this.maxHealth - total_burn ) < Convert.ToDouble( GlobalVars.config.health_threshold_dead ) && this.stat == 2 ) {
				this.ChangeToHusk();
			}
			return;
		}

		// Function from file: human_attackpaw.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			dynamic O = null;
			double? damage = null;
			dynamic dam_zone = null;
			string affecting = null;
			Disease D = null;
			Mob_Living_Carbon_Human H = null;

			base.attack_paw( a, (object)(b), (object)(c) );

			if ( a.a_intent == "help" ) {
				this.help_shake_act( a );
			} else {
				
				if ( this.wear_mask is Obj_Item_Clothing_Mask_Muzzle ) {
					return null;
				}

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					
					O.show_message( "<span class='danger'>" + a.name + " has bit " + this + "!</span>", 1 );
				}
				damage = Rand13.Int( 1, 3 );
				dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });
				affecting = this.get_organ( GlobalFuncs.ran_zone( dam_zone ) );
				this.apply_damage( damage, "brute", affecting, this.run_armor_check( affecting, "melee" ) );

				foreach (dynamic _b in Lang13.Enumerate( a.viruses, typeof(Disease) )) {
					D = _b;
					

					if ( D is Disease_JungleFever ) {
						H = this;
						Task13.Source = null;
						Task13.Source = H.monkeyize();
						this.contract_disease( D, true, false );
					}
				}
			}
			return null;
		}

		// Function from file: human_attackhand.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Organ_External temp = null;
			dynamic G = null;
			int? armorblock = null;
			double? damage = null;
			string affecting = null;
			int? armor_block = null;
			Obj_Effect_EquipE_Human O = null;
			Game_Data G2 = null;
			bool can_bite = false;
			Disease D = null;
			int damage2 = 0;
			Disease D2 = null;
			double? damage3 = null;
			string affecting2 = null;
			int? armor_block2 = null;
			double? knockout = null;
			dynamic G3 = null;
			dynamic T = null;
			dynamic target = null;
			dynamic H = null;
			double chance = 0;
			string affecting3 = null;
			dynamic W = null;
			int chance2 = 0;
			ByTable turfs = null;
			dynamic T2 = null;
			dynamic target2 = null;
			int randn = 0;
			bool talked = false;
			dynamic lgrab = null;
			dynamic rgrab = null;

			
			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				GlobalFuncs.to_chat( a, "No attacking people at spawn, you jackass." );
				return null;
			}
			temp = a.organs_by_name["r_hand"];

			if ( a.hand == true ) {
				temp = a.organs_by_name["l_hand"];
			}

			if ( temp != null && !temp.is_usable() ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>You can't use your " + temp.display_name + ".</span>" );
				return null;
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( a != this && this.check_shields( 0, a.name ) ) {
				this.visible_message( "<span class='danger'>" + a + " attempted to touch " + this + "!</span>" );
				return 0;
			}

			if ( Lang13.Bool( a.gloves ) && a.gloves is Obj_Item_Clothing_Gloves ) {
				G = a.gloves;

				if ( Lang13.Bool( G.cell ) ) {
					
					if ( a.a_intent == "hurt" ) {
						
						if ( Convert.ToDouble( G.cell.charge ) >= 2500 ) {
							G.cell.use( 2500 );
							this.visible_message( "<span class='danger'>" + this + " has been touched with the stun gloves by " + a + "!</span>" );
							a.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Stungloved " + this.name + " (" + this.ckey + ")</font>" );
							this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been stungloved by " + a.name + " (" + a.ckey + ")</font>" );

							if ( !( a is Mob_Living_Carbon ) ) {
								this.LAssailant = null;
							} else {
								this.LAssailant = a;
							}
							GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + a.name + " (" + a.ckey + ") stungloved " + this.name + " (" + this.ckey + ")</font>" ) ) );
							armorblock = this.run_armor_check( ((dynamic)a.zone_sel).selecting, "energy" );
							this.apply_effects( 5, 5, false, 0, 5, 0, false, armorblock );
							return 1;
						} else {
							GlobalFuncs.to_chat( a, "<span class='warning'>Not enough charge! </span>" );
							this.visible_message( "<span class='danger'>" + this + " has been touched with the stun gloves by " + a + "!</span>" );
						}
						return null;
					}
				}

				if ( a.gloves is Obj_Item_Clothing_Gloves_Boxing_Hologlove ) {
					damage = Rand13.Int( 0, 9 );

					if ( !Lang13.Bool( damage ) ) {
						GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
						this.visible_message( "<span class='danger'>" + a + " has attempted to punch " + this + "!</span>" );
						return 0;
					}
					affecting = this.get_organ( GlobalFuncs.ran_zone( ((dynamic)a.zone_sel).selecting ) );
					armor_block = this.run_armor_check( affecting, "melee" );

					if ( Lang13.Bool( a.mutations.Contains( 4 ) ) ) {
						damage += 5;
					}
					GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
					this.visible_message( "<span class='danger'>" + a + " has punched " + this + "!</span>" );
					this.apply_damage( damage, "halloss", affecting, armor_block );

					if ( ( damage ??0) >= 9 ) {
						this.visible_message( "<span class='danger'>" + a + " has weakened " + this + "!</span>" );
						this.apply_effect( 4, "weaken", armor_block );
					}
					return null;
				}
			} else if ( a is Mob_Living_Carbon ) {
				((Mob_Living_Carbon)a).spread_disease_to( this, "Contact" );
			}

			dynamic _d = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _d=="help" ) {
				
				if ( Convert.ToDouble( this.health ) >= Convert.ToDouble( GlobalVars.config.health_threshold_crit ) ) {
					this.help_shake_act( a );
					return 1;
				}

				if ( ((Mob_Living_Carbon_Human)a).check_body_part_coverage( 4096 ) ) {
					GlobalFuncs.to_chat( a, "<span class='notice'><B>Remove your " + ((Mob_Living_Carbon_Human)a).get_body_part_coverage( 4096 ) + "!</B></span>" );
					return 0;
				}

				if ( this.check_body_part_coverage( 4096 ) ) {
					GlobalFuncs.to_chat( a, "<span class='notice'><B>Remove his " + this.get_body_part_coverage( 4096 ) + "!</B></span>" );
					return 0;
				}
				O = new Obj_Effect_EquipE_Human();
				O.source = a;
				O.target = this;
				O.s_loc = a.loc;
				O.t_loc = this.loc;
				O.place = "CPR";
				this.requests.Add( O );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					O.process();
					return;
				}));
				return 1;
			} else if ( _d=="grab" ) {
				
				if ( a == this || Lang13.Bool( this.anchored ) ) {
					return 0;
				}

				if ( Lang13.Bool( this.w_uniform ) ) {
					((Ent_Static)this.w_uniform).add_fingerprint( a );
				}
				G2 = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), a, this );

				if ( Lang13.Bool( this.locked_to ) ) {
					GlobalFuncs.to_chat( a, new Txt( "<span class='notice'>You cannot grab " ).item( this ).str( ", " ).he_she_it_they().str( " is buckled in!</span>" ).ToString() );
				}

				if ( !( G2 != null ) ) {
					return null;
				}
				((Mob)a).put_in_active_hand( G2 );
				this.grabbed_by.Add( G2 );
				((dynamic)G2).synch();
				this.LAssailant = a;
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
				this.visible_message( "<span class='warning'>" + a + " has grabbed " + this + " passively!</span>" );
				return 1;
			} else if ( _d=="hurt" ) {
				
				if ( a.zone_sel != null && ((dynamic)a.zone_sel).selecting == "head" && this != a ) {
					
					if ( Lang13.Bool( a.mind ) && a.mind.vampire != null && GlobalVars.ticker.mode.vampires.Contains( a.mind ) && !( a.mind.vampire.draining != null ) ) {
						
						if ( this.check_body_part_coverage( 4096 ) ) {
							GlobalFuncs.to_chat( a, "<span class='warning'>Remove their mask!</span>" );
							return 0;
						}

						if ( ((Mob_Living_Carbon_Human)a).check_body_part_coverage( 4096 ) ) {
							
							if ( a.species.breath_type == "oxygen" ) {
								GlobalFuncs.to_chat( a, "<span class='warning'>Remove your mask!</span>" );
								return 0;
							} else {
								GlobalFuncs.to_chat( a, "<span class='notice'>With practiced ease, you shift aside your mask for each gulp of blood.</span>" );
							}
						}

						if ( this.mind != null && this.mind.vampire != null && GlobalVars.ticker.mode.vampires.Contains( this.mind ) ) {
							GlobalFuncs.to_chat( a, "<span class='warning'>Your fangs fail to pierce " + this.name + "'s cold flesh.</span>" );
							return 0;
						}
						((Mob)a).handle_bloodsucking( this );
						return null;
					}
				}
				can_bite = false;

				foreach (dynamic _a in Lang13.Enumerate( a.viruses, typeof(Disease) )) {
					D = _a;
					

					if ( D.spread == "Bite" ) {
						can_bite = true;
						break;
					}
				}

				if ( can_bite ) {
					
					if ( Rand13.PercentChance( 75 ) && Convert.ToDouble( this.health ) > 0 ) {
						GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );
						this.visible_message( "<span class='danger'>" + a.name + " has bit " + this.name + "!</span>" );
						damage2 = Rand13.Int( 1, 5 );
						this.adjustBruteLoss( damage2 );
						this.health = 100 - Convert.ToDouble( this.getOxyLoss() ) - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss();

						foreach (dynamic _b in Lang13.Enumerate( a.viruses, typeof(Disease) )) {
							D2 = _b;
							

							if ( D2.spread == "Bite" ) {
								this.contract_disease( D2, true, false );
							}
						}
						a.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>bitten by " + this.name + " (" + this.ckey + ")</font>" );
						this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been bitten by " + a.name + " (" + a.ckey + ")</font>" );

						if ( !( a is Mob_Living_Carbon ) ) {
							this.LAssailant = null;
						} else {
							this.LAssailant = a;
						}
						GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "" + a.name + " (" + a.ckey + ") bitten by " + this.name + " (" + this.ckey + ")" ) ) );
						return null;
					}
				}
				a.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>" + a.species.attack_verb + "ed " + this.name + " (" + this.ckey + ")</font>" );
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been " + a.species.attack_verb + "ed by " + a.name + " (" + a.ckey + ")</font>" );

				if ( !( a is Mob_Living_Carbon ) ) {
					this.LAssailant = null;
				} else {
					this.LAssailant = a;
				}
				GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "" + a.name + " (" + a.ckey + ") " + a.species.attack_verb + "ed " + this.name + " (" + this.ckey + ")" ) ) );
				damage3 = Rand13.Int( 0, ((int)( a.species.max_hurt_damage ??0 )) );

				if ( !Lang13.Bool( damage3 ) ) {
					
					if ( a.species.attack_verb == "punch" ) {
						GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					} else {
						GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );
					}
					this.visible_message( "<span class='danger'>" + a + " has attempted to " + a.species.attack_verb + " " + this + "!</span>" );
					return 0;
				}
				affecting2 = this.get_organ( GlobalFuncs.ran_zone( ((dynamic)a.zone_sel).selecting ) );
				armor_block2 = this.run_armor_check( affecting2, "melee" );

				if ( Lang13.Bool( a.mutations.Contains( 4 ) ) ) {
					damage3 += 5;
				}
				knockout = damage3;

				if ( Lang13.Bool( a.mutations.Contains( 10 ) ) && !( a.gloves is Obj_Item ) ) {
					damage3 += 3;
				}

				if ( a.gloves is Obj_Item ) {
					G3 = a.gloves;
					damage3 += G3.damage_added;
					knockout += G3.bonus_knockout;
				}

				if ( a.species.attack_verb == "punch" ) {
					GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slice.ogg", 25, 1, -1 );
				}
				this.visible_message( "<span class='danger'>" + a + " has " + a.species.attack_verb + "ed " + this + "!</span>" );

				if ( ( knockout ??0) >= ( a.species.max_hurt_damage ??0) && Rand13.PercentChance( 50 ) ) {
					this.visible_message( "<span class='danger'>" + a + " has weakened " + this + "!</span>" );
					this.apply_effect( 2, "weaken", armor_block2 );
				}

				if ( a.species.punch_damage != 0 ) {
					damage3 += a.species.punch_damage;
				}
				this.apply_damage( damage3, "brute", affecting2, armor_block2 );

				if ( a.species.punch_throw_range != 0 && Rand13.PercentChance( 25 ) ) {
					this.visible_message( "<span class='danger'>" + this + " is thrown by the force of the assault!</span>" );
					T = GlobalFuncs.get_turf( this );
					target = null;

					if ( T is Tile_Space ) {
						target = GlobalFuncs.get_edge_target_turf( T, Lang13.IntNullable( a.dir ) );
					} else {
						target = GlobalFuncs.get_ranged_target_turf( T, a.dir, a.species.punch_throw_range );
					}
					this.throw_at( target, 100, a.species.punch_throw_speed );
				}

				if ( a is Mob_Living_Carbon_Human ) {
					H = a;

					if ( H.zone_sel != null && ((dynamic)H.zone_sel).selecting == "mouth" ) {
						chance = ( damage3 ??0) * 0.5;

						if ( Lang13.Bool( H.mutations.Contains( 4 ) ) ) {
							chance += 50;
						}

						if ( Rand13.PercentChance( ((int)( chance )) ) ) {
							this.knock_out_teeth( H );
						}
					}
				}
			} else if ( _d=="disarm" ) {
				a.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Disarmed " + this.name + " (" + this.ckey + ")</font>" );
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been disarmed by " + a.name + " (" + a.ckey + ")</font>" );
				GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "" + a.name + " (" + a.ckey + ") disarmed " + this.name + " (" + this.ckey + ")" ) ) );

				if ( Lang13.Bool( this.w_uniform ) ) {
					((Ent_Static)this.w_uniform).add_fingerprint( a );
				}
				affecting3 = this.get_organ( GlobalFuncs.ran_zone( ((dynamic)a.zone_sel).selecting ) );

				if ( this.r_hand is Obj_Item_Weapon_Gun || this.l_hand is Obj_Item_Weapon_Gun ) {
					W = null;
					chance2 = 0;

					if ( this.l_hand is Obj_Item_Weapon_Gun ) {
						W = this.l_hand;
						chance2 = ( this.hand == true ? 40 : 20 );
					}

					if ( this.r_hand is Obj_Item_Weapon_Gun ) {
						W = this.r_hand;
						chance2 = ( !( this.hand == true ) ? 40 : 20 );
					}

					if ( Rand13.PercentChance( chance2 ) ) {
						this.visible_message( "<spawn class=danger>" + W + ", held by " + this + ", goes off during struggle!" );
						turfs = new ByTable();

						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
							T2 = _c;
							
							turfs.Add( T2 );
						}
						target2 = Rand13.PickFromTable( turfs );
						return new ByTable().Set( 1, target2 ).Set( 2, this ).Set( "struggle", 1 ).Apply( Lang13.BindFunc( W, "afterattack" ) );
					}
				}
				randn = Rand13.Int( 1, 100 );

				if ( randn <= 25 ) {
					this.apply_effect( 4, "weaken", this.run_armor_check( affecting3, "melee" ) );
					GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
					this.visible_message( "<span class='danger'>" + a + " has pushed " + this + "!</span>" );
					a.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Pushed " + this.name + " (" + this.ckey + ")</font>" );
					this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been pushed by " + a.name + " (" + a.ckey + ")</font>" );

					if ( !( a is Mob_Living_Carbon ) ) {
						this.LAssailant = null;
					} else {
						this.LAssailant = a;
					}
					GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "" + a.name + " (" + a.ckey + ") pushed " + this.name + " (" + this.ckey + ")" ) ) );
					return null;
				}
				talked = false;

				if ( randn <= 60 ) {
					
					if ( this.pulling != null ) {
						this.visible_message( "<span class='danger'>" + a + " has broken " + this + "'s grip on " + this.pulling + "!</span>" );
						talked = true;
						this.stop_pulling();
					}

					if ( this.l_hand is Obj_Item_Weapon_Grab ) {
						lgrab = this.l_hand;

						if ( Lang13.Bool( lgrab.affecting ) ) {
							this.visible_message( "<span class='danger'>" + a + " has broken " + this + "'s grip on " + lgrab.affecting + "!</span>" );
							talked = true;
						}
						Task13.Schedule( 1, (Task13.Closure)(() => {
							GlobalFuncs.qdel( lgrab );
							lgrab = null;
							return;
						}));
					}

					if ( this.r_hand is Obj_Item_Weapon_Grab ) {
						rgrab = this.r_hand;

						if ( Lang13.Bool( rgrab.affecting ) ) {
							this.visible_message( "<span class='danger'>" + a + " has broken " + this + "'s grip on " + rgrab.affecting + "!</span>" );
							talked = true;
						}
						Task13.Schedule( 1, (Task13.Closure)(() => {
							GlobalFuncs.qdel( rgrab );
							rgrab = null;
							return;
						}));
					}

					if ( !talked ) {
						this.drop_item();
						this.visible_message( "<span class='danger'>" + a + " has disarmed " + this + "!</span>" );
					}
					GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
					return null;
				}
				GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
				this.visible_message( "<span class='danger'>" + a + " attempted to disarm " + this + "!</span>" );
			}
			return null;
		}

		// Function from file: vgstation13.dme
		public override dynamic attack_alien( Mob user = null ) {
			Game_Data G = null;
			double? damage = null;
			string affecting = null;
			int? armor_block = null;
			dynamic O = null;

			
			if ( this.check_shields( 0, user.name ) ) {
				this.visible_message( "<span class='danger'>" + user + " attempted to touch " + this + "!</span>" );
				return 0;
			}

			dynamic _b = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _b=="help" ) {
				this.visible_message( "<span class='notice'>" + user + " caresses " + this + " with its scythe like arm.</span>" );
			} else if ( _b=="grab" ) {
				
				if ( user == this || Lang13.Bool( this.anchored ) ) {
					return null;
				}

				if ( Lang13.Bool( this.w_uniform ) ) {
					((Ent_Static)this.w_uniform).add_fingerprint( user );
				}
				G = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), user, this );
				user.put_in_active_hand( G );
				this.grabbed_by.Add( G );
				((dynamic)G).synch();
				this.LAssailant = user;
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
				this.visible_message( "<span class='warning'>" + user + " has grabbed " + this + " passively!</span>" );
			} else if ( _b=="hurt" ) {
				
				if ( Lang13.Bool( this.w_uniform ) ) {
					((Ent_Static)this.w_uniform).add_fingerprint( user );
				}
				damage = Rand13.Int( 15, 30 );

				if ( !Lang13.Bool( damage ) ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 50, 1, -1 );
					this.visible_message( "<span class='danger'>" + user + " has lunged at " + this + "!</span>" );
					return 0;
				}
				affecting = this.get_organ( GlobalFuncs.ran_zone( ((dynamic)user.zone_sel).selecting ) );
				armor_block = this.run_armor_check( affecting, "melee" );
				GlobalFuncs.playsound( this.loc, "sound/weapons/slice.ogg", 25, 1, -1 );
				this.visible_message( "<span class='danger'>" + user + " has slashed at " + this + "!</span>" );
				this.apply_damage( damage, "brute", affecting, armor_block );

				if ( ( damage ??0) >= 25 ) {
					this.visible_message( "<span class='danger'>" + user + " has wounded " + this + "!</span>" );
					this.apply_effect( Rand13.Int( ((int)( 0.5 )), 3 ), "weaken", armor_block );
				}
				this.updatehealth();
			} else if ( _b=="disarm" ) {
				
				if ( Rand13.PercentChance( 80 ) ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/pierce.ogg", 25, 1, -1 );
					this.Weaken( Rand13.Int( 3, 4 ) );

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _a;
						

						if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
							O.show_message( "<span class='danger'>" + user + " has tackled down " + this + "!</span>", 1 );
						}
					}

					if ( Rand13.PercentChance( 25 ) ) {
						user.Weaken( Rand13.Int( 4, 5 ) );
					}
				} else if ( Rand13.PercentChance( 80 ) ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 25, 1, -1 );
					this.drop_item();
					this.visible_message( "<span class='danger'>" + user + " disarmed " + this + "!</span>" );
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 50, 1, -1 );
					this.visible_message( "<span class='danger'>" + user + " has tried to disarm " + this + "!</span>" );
				}
			}
			return null;
		}

		// Function from file: human.dm
		public override bool spook(  ) {
			
			if ( !( this.client != null ) ) {
				return false;
			}

			if ( !this.hallucinating() ) {
				GlobalFuncs.to_chat( this, "<i>" + Rand13.PickFromTable( GlobalVars.boo_phrases ) + "</i>" );
			} else {
				GlobalFuncs.to_chat( this, "<b><font color='" + Rand13.Pick(new object [] { "red", "orange", "yellow", "green", "blue" }) + "'>" + Rand13.PickFromTable( GlobalVars.boo_phrases_drugs ) + "</font></b>" );
			}
			return false;
		}

		// Function from file: human.dm
		public override dynamic dexterity_check(  ) {
			dynamic G = null;

			
			if ( this.stat != 0 ) {
				return 0;
			}

			if ( ((Reagents)this.reagents).has_reagent( "methylin" ) ) {
				return 1;
			}

			if ( this.getBrainLoss() >= 60 ) {
				return 0;
			}

			if ( Lang13.Bool( this.gloves ) && this.gloves is Obj_Item_Clothing_Gloves ) {
				G = this.gloves;
				return G.dexterity_check();
			}
			return 1;
		}

		// Function from file: human.dm
		public override Language get_default_language(  ) {
			Language _default = null;

			_default = base.get_default_language();

			if ( _default != null ) {
				return _default;
			}

			if ( !Lang13.Bool( this.species ) ) {
				return null;
			}
			return ( Lang13.Bool( this.species.default_language ) ? GlobalVars.all_languages[this.species.default_language] : null );
		}

		// Function from file: human.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			radiations = radiations ?? 3;

			ByTable handlist = null;
			Obj_Item hand = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( ( current_size ??0) >= 5 ) {
				handlist = new ByTable(new object [] { this.l_hand, this.r_hand });

				foreach (dynamic _a in Lang13.Enumerate( handlist, typeof(Obj_Item) )) {
					hand = _a;
					

					if ( Rand13.PercentChance( ((int)( ( current_size ??0) * 5 )) ) && Convert.ToDouble( hand.w_class ) >= ( 11 - ( current_size ??0) ) / 2 && this.u_equip( hand, true ) ) {
						Map13.StepTowardsSimple( hand, this );
						GlobalFuncs.to_chat( this, new Txt( "<span class = 'warning'>" ).The( S ).item().str( " pulls " ).the( hand ).item().str( " from your grip!</span>" ).ToString() );
					}
				}
			}

			if ( Lang13.Bool( radiations ) ) {
				this.apply_effect( ( current_size ??0) * ( radiations ??0), "irradiate" );
			}

			if ( Lang13.Bool( this.shoes ) ) {
				
				if ( Lang13.Bool( this.shoes.flags & 1024 ) ) {
					return false;
				}
			}
			base.singularity_pull( S, current_size, radiations );
			return false;
		}

		// Function from file: human.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			int gain = 0;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return 0;
			}
			gain = 20;

			if ( this.mind != null ) {
				
				if ( this.mind.assigned_role == "Station Engineer" || this.mind.assigned_role == "Chief Engineer" ) {
					gain = 100;
				}

				if ( this.mind.assigned_role == "Clown" ) {
					gain = Rand13.Int( -300, 300 );
				}
			}
			this.investigation_log( "singulo", "has been consumed by a singularity" );
			this.gib();
			return gain;
		}

		// Function from file: human.dm
		public override bool has_eyes(  ) {
			dynamic eyes = null;

			
			if ( Lang13.Bool( this.internal_organs_by_name["eyes"] ) ) {
				eyes = this.internal_organs_by_name["eyes"];

				if ( Lang13.Bool( eyes ) && eyes is Organ_Internal && ( ( !Lang13.Bool( eyes.status ) ?1:0) & 1 ) != 0 ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: human.dm
		public override bool has_brain(  ) {
			dynamic brain = null;

			
			if ( Lang13.Bool( this.internal_organs_by_name["brain"] ) ) {
				brain = this.internal_organs_by_name["brain"];

				if ( Lang13.Bool( brain ) && brain is Organ_Internal ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: human.dm
		public override int assess_threat( Obj_Machinery_Bot judgebot = null, string lasercolor = null ) {
			int threatcount = 0;
			dynamic idcard = null;
			dynamic perpname = null;
			Data_Record R = null;

			
			if ( judgebot.emagged == 2 ) {
				return 10;
			}
			threatcount = 0;

			if ( Lang13.Bool( lasercolor ) ) {
				
				if ( lasercolor == "b" ) {
					
					if ( this.wear_suit is Obj_Item_Clothing_Suit_Redtag ) {
						threatcount += 4;
					}

					if ( this.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag || this.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) {
						threatcount += 4;
					}

					if ( this.belt is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) {
						threatcount += 2;
					}
				}

				if ( lasercolor == "r" ) {
					
					if ( this.wear_suit is Obj_Item_Clothing_Suit_Bluetag ) {
						threatcount += 4;
					}

					if ( this.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag || this.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag ) {
						threatcount += 4;
					}

					if ( this.belt is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag ) {
						threatcount += 2;
					}
				}
				return threatcount;
			}
			idcard = this.get_id_card();

			if ( Lang13.Bool( ((dynamic)judgebot).idcheck ) && !Lang13.Bool( idcard ) ) {
				threatcount += 4;
			}

			if ( Lang13.Bool( ((dynamic)judgebot).weaponscheck ) ) {
				
				if ( !Lang13.Bool( idcard ) || !Lang13.Bool( idcard.access.Contains( GlobalVars.access_weapons ) ) ) {
					
					if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.l_hand ) ) ) {
						threatcount += 4;
					}

					if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.r_hand ) ) ) {
						threatcount += 4;
					}

					if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.belt ) ) ) {
						threatcount += 2;
					}
				}
			}

			if ( Lang13.Bool( ((dynamic)judgebot).check_records ) ) {
				perpname = this.get_face_name(  );
				R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.security );

				if ( R != null && Lang13.Bool( R.fields["criminal"] ) ) {
					
					dynamic _a = R.fields["criminal"]; // Was a switch-case, sorry for the mess.
					if ( _a=="*Arrest*" ) {
						threatcount += 5;
					} else if ( _a=="Incarcerated" ) {
						threatcount += 2;
					} else if ( _a=="Parolled" ) {
						threatcount += 2;
					}
				}
			}

			if ( this.head is Obj_Item_Clothing_Head_Wizard || this.head is Obj_Item_Clothing_Head_Helmet_Space_Rig_Wizard ) {
				threatcount += 2;
			}

			if ( GlobalFuncs.isloyal( this ) ) {
				threatcount -= 1;
			}

			if ( this.dna != null && Lang13.Bool( this.dna.mutantrace ) && this.dna.mutantrace != "none" ) {
				threatcount += 2;
			}

			if ( idcard is Obj_Item_Weapon_Card_Id_Syndicate ) {
				threatcount -= 2;
			}
			return 0;
		}

		// Function from file: human.dm
		public override ByTable GetAccess(  ) {
			ByTable ACL = null;
			dynamic I = null;

			ACL = new ByTable();
			I = this.get_active_hand();

			if ( I is Obj_Item ) {
				ACL.Or( I.GetAccess() );
			}

			if ( Lang13.Bool( this.wear_id ) ) {
				ACL.Or( this.wear_id.GetAccess() );
			}
			return ACL;
		}

		// Function from file: human.dm
		public override bool canSingulothPull( Obj_Machinery_Singularity singulo = null ) {
			dynamic M = null;

			
			if ( !base.canSingulothPull( singulo ) ) {
				return false;
			}

			if ( this.shoes is Obj_Item_Clothing_Shoes_Magboots ) {
				M = this.shoes;

				if ( M.magpulse ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: human.dm
		public override bool can_inject( Mob user = null, dynamic error_msg = null, string target_zone = null ) {
			bool _default = false;

			_default = true;

			if ( !( user != null ) ) {
				target_zone = Rand13.Pick(new object [] { "chest", "chest", "chest", "left leg", "right leg", "left arm", "right arm", "head" });
			} else if ( !Lang13.Bool( target_zone ) ) {
				target_zone = ((dynamic)user.zone_sel).selecting;
			}

			if ( !_default && Lang13.Bool( error_msg ) && user != null ) {
				GlobalFuncs.to_chat( user, "<span class='alert'>There is no exposed flesh or thin material " + ( target_zone == "head" ? "on their head" : "on their body" ) + " to inject into.</span>" );
			}
			return _default;
		}

		// Function from file: human.dm
		public override string generate_name(  ) {
			this.name = ((Species)this.species).makeName( this.gender, this );
			this.real_name = this.name;
			return this.name;
		}

		// Function from file: human.dm
		[VerbInfo( name: "Yank out object", desc: "Remove an embedded item at the cost of bleeding and pain.", group: "Object", access: VerbAccess.InView, range: 1 )]
		public override bool yank_out_object(  ) {
			ByTable valid_objects = null;
			Organ_External affected = null;
			Mob_Living_Carbon_Human S = null;
			Mob U = null;
			bool? self = null;
			dynamic selection = null;
			Organ_External organ = null;
			Obj_Item_Weapon O = null;
			Obj_Item_Weapon O2 = null;
			Wound_InternalBleeding I = null;

			
			if ( !( Task13.User is Mob_Living ) || Task13.User.client != null && Task13.User.client.move_delayer.blocked() ) {
				return false;
			}
			Task13.User.delayNextMove( 20 );

			if ( Task13.User.isUnconscious() ) {
				GlobalFuncs.to_chat( Task13.User, "You are unconcious and cannot do that!" );
				return false;
			}

			if ( Task13.User.restrained() ) {
				GlobalFuncs.to_chat( Task13.User, "You are restrained and cannot do that!" );
				return false;
			}
			valid_objects = new ByTable();
			affected = null;
			S = this;
			U = Task13.User;
			self = null;

			if ( S == U ) {
				self = true;
			}
			valid_objects = this.get_visible_implants( true );

			if ( !( valid_objects.len != 0 ) ) {
				
				if ( self == true ) {
					GlobalFuncs.to_chat( this, "You have nothing stuck in your wounds that is large enough to remove without surgery." );
				} else {
					GlobalFuncs.to_chat( U, "" + this + " has nothing stuck in their wounds that is large enough to remove without surgery." );
				}
				return false;
			}
			selection = Interface13.Input( "What do you want to yank out?", "Embedded objects", null, null, valid_objects, InputType.Any );

			foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				organ = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( organ.implants, typeof(Obj_Item_Weapon) )) {
					O = _a;
					

					if ( O == selection ) {
						affected = organ;
					}
				}
			}

			if ( self == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You attempt to get a good grip on the " + selection + " in your " + affected.display_name + " with bloody fingers.</span>" );
			} else {
				GlobalFuncs.to_chat( U, "<span class='warning'>You attempt to get a good grip on the " + selection + " in " + S + "'s " + affected.display_name + " with bloody fingers.</span>" );
			}

			if ( U is Mob_Living_Carbon_Human ) {
				((Mob_Living_Carbon_Human)U).f_bloody_hands( S );
			}

			if ( !GlobalFuncs.do_after( U, this, 80 ) ) {
				return false;
			}

			if ( !Lang13.Bool( selection ) || !( affected != null ) || !( S != null ) || !( U != null ) ) {
				return false;
			}

			if ( self == true ) {
				this.visible_message( "<span class='danger'><b>" + this + " rips " + selection + " out of their " + affected.display_name + " in a welter of blood.</b></span>", "<span class='warning'>You rip " + selection + " out of your " + affected + " in a welter of blood.</span>" );
			} else {
				this.visible_message( "<span class='danger'><b>" + Task13.User + " rips " + selection + " out of " + this + "'s " + affected.display_name + " in a welter of blood.</b></span>", "<span class='warning'>" + Task13.User + " rips " + selection + " out of your " + affected + " in a welter of blood.</span>" );
			}
			selection.loc = GlobalFuncs.get_turf( this );
			affected.implants.Remove( selection );
			this.shock_stage += 10;

			foreach (dynamic _c in Lang13.Enumerate( this.pinned, typeof(Obj_Item_Weapon) )) {
				O2 = _c;
				

				if ( O2 == selection ) {
					this.pinned.Remove( O2 );
				}

				if ( !( this.pinned.len != 0 ) ) {
					this.anchored = 0;
				}
			}

			if ( Rand13.PercentChance( 10 ) ) {
				I = new Wound_InternalBleeding( 15 );
				affected.wounds.Add( I );
				this.custom_pain( "Something tears wetly in your " + affected + " as " + selection + " is pulled free!", true );
			}
			return true;
		}

		// Function from file: human.dm
		public override bool clean_blood( dynamic clean_feet = null ) {
			bool _default = false;

			_default = base.clean_blood( (object)(clean_feet) );

			if ( Lang13.Bool( clean_feet ) && !Lang13.Bool( this.shoes ) && this.feet_blood_DNA is ByTable && this.feet_blood_DNA.len != 0 ) {
				this.feet_blood_color = null;
				this.feet_blood_DNA.len = 0;
				this.update_inv_shoes( true );
				return true;
			}
			return _default;
		}

		// Function from file: human.dm
		public override bool add_blood( dynamic M = null ) {
			
			if ( !base.add_blood( (object)(M) ) ) {
				return false;
			}

			if ( !Lang13.Bool( M ) ) {
				return false;
			}

			if ( Lang13.Bool( this.blood_DNA[M.dna.unique_enzymes] ) ) {
				return false;
			}
			this.blood_DNA[M.dna.unique_enzymes] = M.dna.b_type;
			this.hand_blood_color = this.blood_color;
			this.update_inv_gloves();
			this.verbs.Add( typeof(Mob_Living_Carbon_Human).GetMethod( "bloody_doodle" ) );
			return true;
		}

		// Function from file: human.dm
		public override void revive( bool? animation = null ) {
			Organ_External O = null;
			Organ_External_Head h = null;
			Obj_Item_Weapon_Organ_Head H = null;
			Organ_Internal I = null;
			Disease virus = null;
			dynamic ID = null;
			dynamic V = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				O = _a;
				
				O.status &= 65503;
				O.status &= 65527;
				O.status &= 65279;
				O.status &= 65534;
				O.status &= 65531;

				if ( !O.amputated ) {
					O.status &= 65471;
					O.destspawn = false;
				}
				O.wounds.len = 0;
				O.heal_damage( 1000, 1000, true, true );
			}
			h = this.organs_by_name["head"];
			h.disfigured = false;

			if ( Lang13.Bool( this.species ) && !Lang13.Bool( this.species.flags & 1 ) ) {
				this.vessel.add_reagent( "blood", 560 - ( this.vessel.total_volume ??0) );
				this.fixblood();
			}

			foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Weapon_Organ_Head) )) {
				H = _b;
				

				if ( H.brainmob != null ) {
					
					if ( H.brainmob.real_name == this.real_name ) {
						
						if ( H.brainmob.mind != null ) {
							H.brainmob.mind.transfer_to( this );
							GlobalFuncs.qdel( H );
							H = null;
						}

						if ( H.borer != null ) {
							H.borer.perform_infestation( this );
							H.borer = null;
						}
					}
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.internal_organs, typeof(Organ_Internal) )) {
				I = _c;
				
				I.damage = 0;
			}

			foreach (dynamic _d in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				virus = _d;
				
				virus.f_cure();
			}

			foreach (dynamic _e in Lang13.Enumerate( this.virus2 )) {
				ID = _e;
				
				V = this.virus2[ID];
				V.cure( this );
			}
			base.revive( animation );
			return;
		}

		// Function from file: human.dm
		public override string get_species(  ) {
			
			if ( !Lang13.Bool( this.species ) ) {
				this.set_species();
			}

			if ( this.dna != null && this.dna.mutantrace == "golem" ) {
				return "Animated Construct";
			}
			return this.species.name;
		}

		// Function from file: human.dm
		public override bool abiotic( bool? full_body = null ) {
			full_body = full_body ?? false;

			
			if ( full_body == true && ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.v_abstract ) || Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.v_abstract ) || Lang13.Bool( this.back ) || Lang13.Bool( this.wear_mask ) || Lang13.Bool( this.head ) || Lang13.Bool( this.shoes ) || Lang13.Bool( this.w_uniform ) || Lang13.Bool( this.wear_suit ) || Lang13.Bool( this.glasses ) || Lang13.Bool( this.ears ) || Lang13.Bool( this.gloves ) ) ) {
				return true;
			}

			if ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.v_abstract ) || Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.v_abstract ) ) {
				return true;
			}
			return false;
		}

		// Function from file: human.dm
		public override dynamic IsAdvancedToolUser(  ) {
			return 1;
		}

		// Function from file: human.dm
		public override int eyecheck(  ) {
			int _default = 0;

			dynamic headwear = null;
			dynamic eyewear = null;

			_default = 0;
			headwear = this.head;
			eyewear = this.glasses;

			if ( headwear is Obj_Item_Clothing_Head ) {
				_default += headwear.eyeprot;
			}

			if ( eyewear is Obj_Item_Clothing_Glasses ) {
				_default += eyewear.eyeprot;
			}
			return ( _default <= -1 ? -1 : ( _default >= 2 ? 2 : _default ) );
		}

		// Function from file: human.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			bool pickpocket = false;
			bool able = false;
			dynamic slot = null;
			dynamic place_item = null;
			dynamic id_item = null;
			ByTable obscured_slots = null;
			dynamic obscured_slot_num = null;
			string slot_name = null;
			Obj_Effect_EquipE_Human O = null;
			dynamic G = null;
			string pocket_side = null;
			int pocket_id = 0;
			dynamic pocket_item = null;
			dynamic place_item2 = null;
			dynamic G2 = null;
			string t1 = null;
			string perpname = null;
			bool? modified = null;
			dynamic I = null;
			Data_Record E = null;
			Data_Record R = null;
			dynamic setcriminal = null;
			Mob U = null;
			Mob U2 = null;
			string perpname2 = null;
			bool read = false;
			dynamic tempPda = null;
			Data_Record E2 = null;
			Data_Record R2 = null;
			string perpname3 = null;
			bool read2 = false;
			dynamic tempPda2 = null;
			Data_Record E3 = null;
			Data_Record R3 = null;
			int counter = 0;
			string perpname4 = null;
			dynamic tempPda3 = null;
			Data_Record E4 = null;
			Data_Record R4 = null;
			string t12 = null;
			int counter2 = 0;
			Mob U3 = null;
			Mob U4 = null;
			string perpname5 = null;
			bool modified2 = false;
			dynamic tempPda4 = null;
			Data_Record E5 = null;
			Data_Record R5 = null;
			dynamic setmedical = null;
			Mob U5 = null;
			Mob U6 = null;
			string perpname6 = null;
			bool read3 = false;
			dynamic tempPda5 = null;
			Data_Record E6 = null;
			Data_Record R6 = null;
			string perpname7 = null;
			bool read4 = false;
			dynamic tempPda6 = null;
			Data_Record E7 = null;
			Data_Record R7 = null;
			int counter3 = 0;
			string perpname8 = null;
			dynamic tempPda7 = null;
			Data_Record E8 = null;
			Data_Record R8 = null;
			string t13 = null;
			int counter4 = 0;
			Mob U7 = null;
			Mob U8 = null;
			dynamic I2 = null;
			dynamic M = null;

			pickpocket = false;
			able = !Task13.User.incapacitated() && GlobalFuncs.in_range( this, Task13.User ) && this.Adjacent( Task13.User );

			if ( Lang13.Bool( href_list["item"] ) ) {
				
				if ( !able ) {
					return null;
				}
				slot = href_list["item"];
				place_item = Task13.User.get_active_hand();
				id_item = this.wear_id;
				obscured_slots = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.check_obscured_slots() )) {
					obscured_slot_num = _a;
					
					slot_name = this.num2slotname( obscured_slot_num );

					if ( slot_name != "" ) {
						obscured_slots.Add( slot_name );
					}
				}

				if ( obscured_slots.Contains( slot ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't reach that. Something is covering it.</span>" );
					return null;
				} else {
					
					if ( Task13.User is Mob_Living_SimpleAnimal ) {
						return null;
					}
					O = new Obj_Effect_EquipE_Human();

					if ( Task13.User is Mob_Living_Carbon_Human && Lang13.Bool( ((dynamic)Task13.User).gloves ) ) {
						G = ((dynamic)Task13.User).gloves;
						pickpocket = Lang13.Bool( G.pickpocket );
					}
					O.source = Task13.User;
					O.target = this;
					O.item = Task13.User.get_active_hand();
					O.s_loc = Task13.User.loc;
					O.t_loc = this.loc;
					O.place = href_list["item"];
					O.pickpocket = pickpocket;
					this.requests.Add( O );

					if ( O.place == "id" ) {
						
						if ( Lang13.Bool( id_item ) ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You try to take " + this + "'s ID.</span>" );
						} else if ( Lang13.Bool( place_item ) && ((Obj_Item)place_item).mob_can_equip( this, 7, true ) != 0 ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You try to place " + place_item + " on " + this + ".</span>" );
						}

						if ( GlobalFuncs.do_mob( Task13.User, this, 40 ) ) {
							
							if ( Lang13.Bool( id_item ) ) {
								this.u_equip( id_item, false );

								if ( pickpocket ) {
									Task13.User.put_in_hands( id_item );
								}
							} else if ( Lang13.Bool( place_item ) ) {
								Task13.User.u_equip( place_item, true );
								this.equip_to_slot_if_possible( place_item, 7, 0, true );
							}

							if ( GlobalFuncs.in_range( this, Task13.User ) ) {
								this.show_inv( Task13.User );
							}
						} else if ( !pickpocket ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>You feel your ID being fumbled with!</span>" );
						}
					} else {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							O.process();
							Task13.Schedule( 40, (Task13.Closure)(() => {
								
								if ( GlobalFuncs.in_range( this, Task13.User ) ) {
									this.show_inv( Task13.User );
								}
								return;
							}));
							return;
							return;
						}));
					}
				}
			} else if ( Lang13.Bool( href_list["pockets"] ) ) {
				
				if ( !able ) {
					return null;
				}
				pocket_side = href_list["pockets"];
				pocket_id = ( pocket_side == "right" ? 16 : 15 );
				pocket_item = ( pocket_id == 16 ? this.r_store : this.l_store );
				place_item2 = Task13.User.get_active_hand();

				if ( Task13.User is Mob_Living_SimpleAnimal ) {
					return null;
				}

				if ( Task13.User is Mob_Living_Carbon_Human && Lang13.Bool( ((dynamic)Task13.User).gloves ) ) {
					G2 = ((dynamic)Task13.User).gloves;
					pickpocket = Lang13.Bool( G2.pickpocket );
				}

				if ( Lang13.Bool( pocket_item ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You try to empty " + this + "'s " + pocket_side + " pocket.</span>" );
				} else if ( Lang13.Bool( place_item2 ) && ((Obj_Item)place_item2).mob_can_equip( this, pocket_id, true ) != 0 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You try to place " + place_item2 + " into " + this + "'s " + pocket_side + " pocket.</span>" );
				} else {
					return null;
				}

				if ( GlobalFuncs.do_mob( Task13.User, this, 40 ) ) {
					
					if ( Lang13.Bool( pocket_item ) ) {
						this.u_equip( pocket_item, true );
						((Obj_Item)pocket_item).stripped( this, Task13.User );

						if ( pickpocket ) {
							Task13.User.put_in_hands( pocket_item );
						}
					} else if ( Lang13.Bool( place_item2 ) ) {
						Task13.User.u_equip( place_item2, true );
						this.equip_to_slot_if_possible( place_item2, pocket_id, 0, true );
					}

					if ( GlobalFuncs.in_range( this, Task13.User ) ) {
						this.show_inv( Task13.User );
					}
				} else if ( !pickpocket ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You feel your " + pocket_side + " pocket being fumbled with!</span>" );
				}
			} else if ( Lang13.Bool( href_list["refresh"] ) ) {
				
				if ( Lang13.Bool( this.machine ) && GlobalFuncs.in_range( this, Task13.User ) ) {
					this.show_inv( this.machine );
				}
			} else if ( Lang13.Bool( href_list["mach_close"] ) ) {
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
			} else if ( Lang13.Bool( href_list["criminal"] ) ) {
				
				if ( GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
					perpname = "wot";
					modified = null;

					if ( Lang13.Bool( this.wear_id ) ) {
						I = ((Obj_Item)this.wear_id).GetID();

						if ( Lang13.Bool( I ) ) {
							perpname = I.registered_name;
						} else {
							perpname = this.name;
						}
					} else {
						perpname = this.name;
					}

					if ( Lang13.Bool( perpname ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
							E = _c;
							

							if ( E.fields["name"] == perpname ) {
								
								foreach (dynamic _b in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
									R = _b;
									

									if ( R.fields["id"] == E.fields["id"] ) {
										setcriminal = Interface13.Input( Task13.User, "Specify a new criminal status for this person.", "Security HUD", R.fields["criminal"], new ByTable(new object [] { "None", "*Arrest*", "Incarcerated", "Parolled", "Released", "Cancel" }), InputType.Any );

										if ( GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
											
											if ( setcriminal != "Cancel" ) {
												R.fields["criminal"] = setcriminal;
												modified = true;
												Task13.Schedule( 0, (Task13.Closure)(() => {
													this.hud_updateflag |= 16;

													if ( Task13.User is Mob_Living_Carbon_Human ) {
														U = Task13.User;
														((dynamic)U).handle_regular_hud_updates();
													}

													if ( Task13.User is Mob_Living_Silicon_Robot ) {
														U2 = Task13.User;
														((dynamic)U2).handle_regular_hud_updates();
													}
													return;
												}));
											}
										}
									}
								}
							}
						}
					}

					if ( !( modified == true ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to locate a data core entry for this person.</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["secrecord"] ) ) {
				
				if ( GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
					perpname2 = "wot";
					read = false;

					if ( Lang13.Bool( this.wear_id ) ) {
						
						if ( this.wear_id is Obj_Item_Weapon_Card_Id ) {
							perpname2 = this.wear_id.registered_name;
						} else if ( this.wear_id is Obj_Item_Device_Pda ) {
							tempPda = this.wear_id;
							perpname2 = tempPda.owner;
						}
					} else {
						perpname2 = this.name;
					}

					foreach (dynamic _e in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E2 = _e;
						

						if ( E2.fields["name"] == perpname2 ) {
							
							foreach (dynamic _d in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
								R2 = _d;
								

								if ( R2.fields["id"] == E2.fields["id"] ) {
									
									if ( GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
										GlobalFuncs.to_chat( Task13.User, "<b>Name:</b> " + R2.fields["name"] + "	<b>Criminal Status:</b> " + R2.fields["criminal"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Minor Crimes:</b> " + R2.fields["mi_crim"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Details:</b> " + R2.fields["mi_crim_d"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Major Crimes:</b> " + R2.fields["ma_crim"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Details:</b> " + R2.fields["ma_crim_d"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Notes:</b> " + R2.fields["notes"] );
										GlobalFuncs.to_chat( Task13.User, new Txt( "<a href='?src=" ).Ref( this ).str( ";secrecordComment=`'>[View Comment Log]</a>" ).ToString() );
										read = true;
									}
								}
							}
						}
					}

					if ( !read ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to locate a data core entry for this person.</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["secrecordComment"] ) ) {
				
				if ( GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
					perpname3 = "wot";
					read2 = false;

					if ( Lang13.Bool( this.wear_id ) ) {
						
						if ( this.wear_id is Obj_Item_Weapon_Card_Id ) {
							perpname3 = this.wear_id.registered_name;
						} else if ( this.wear_id is Obj_Item_Device_Pda ) {
							tempPda2 = this.wear_id;
							perpname3 = tempPda2.owner;
						}
					} else {
						perpname3 = this.name;
					}

					foreach (dynamic _g in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E3 = _g;
						

						if ( E3.fields["name"] == perpname3 ) {
							
							foreach (dynamic _f in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
								R3 = _f;
								

								if ( R3.fields["id"] == E3.fields["id"] ) {
									
									if ( GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
										read2 = true;
										counter = 1;

										while (Lang13.Bool( R3.fields["com_" + counter] )) {
											GlobalFuncs.to_chat( Task13.User, "" + R3.fields["com_" + counter] );
											counter++;
										}

										if ( counter == 1 ) {
											GlobalFuncs.to_chat( Task13.User, "No comment found" );
										}
										GlobalFuncs.to_chat( Task13.User, new Txt( "<a href='?src=" ).Ref( this ).str( ";secrecordadd=`'>[Add comment]</a>" ).ToString() );
									}
								}
							}
						}
					}

					if ( !read2 ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to locate a data core entry for this person.</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["secrecordadd"] ) ) {
				
				if ( GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
					perpname4 = "wot";

					if ( Lang13.Bool( this.wear_id ) ) {
						
						if ( this.wear_id is Obj_Item_Weapon_Card_Id ) {
							perpname4 = this.wear_id.registered_name;
						} else if ( this.wear_id is Obj_Item_Device_Pda ) {
							tempPda3 = this.wear_id;
							perpname4 = tempPda3.owner;
						}
					} else {
						perpname4 = this.name;
					}

					foreach (dynamic _i in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E4 = _i;
						

						if ( E4.fields["name"] == perpname4 ) {
							
							foreach (dynamic _h in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
								R4 = _h;
								

								if ( R4.fields["id"] == E4.fields["id"] ) {
									
									if ( GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
										t12 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Add Comment:", "Sec. records", null, null, null, InputType.StrMultiline ) ), 1, 1024 );

										if ( !Lang13.Bool( t12 ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.hasHUD( Task13.User, "security" ) ) {
											return null;
										}
										counter2 = 1;

										while (Lang13.Bool( R4.fields["com_" + counter2] )) {
											counter2++;
										}

										if ( Task13.User is Mob_Living_Carbon_Human ) {
											U3 = Task13.User;
											R4.fields["com_" + counter2] = "Made by " + ((dynamic)U3).get_authentification_name() + " (" + ((dynamic)U3).get_assignment() + ") on " + String13.FormatTime( Game13.realtime, "DDD MMM DD hh:mm:ss" ) + ", " + GlobalVars.game_year + "<BR>" + t12;
										}

										if ( Task13.User is Mob_Living_Silicon_Robot ) {
											U4 = Task13.User;
											R4.fields["com_" + counter2] = "Made by " + U4.name + " (" + ((dynamic)U4).modtype + " " + ((dynamic)U4).braintype + ") on " + String13.FormatTime( Game13.realtime, "DDD MMM DD hh:mm:ss" ) + ", " + GlobalVars.game_year + "<BR>" + t12;
										}
									}
								}
							}
						}
					}
				}
			} else if ( Lang13.Bool( href_list["medical"] ) ) {
				
				if ( GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
					perpname5 = "wot";
					modified2 = false;

					if ( Lang13.Bool( this.wear_id ) ) {
						
						if ( this.wear_id is Obj_Item_Weapon_Card_Id ) {
							perpname5 = this.wear_id.registered_name;
						} else if ( this.wear_id is Obj_Item_Device_Pda ) {
							tempPda4 = this.wear_id;
							perpname5 = tempPda4.owner;
						}
					} else {
						perpname5 = this.name;
					}

					foreach (dynamic _k in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E5 = _k;
						

						if ( E5.fields["name"] == perpname5 ) {
							
							foreach (dynamic _j in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
								R5 = _j;
								

								if ( R5.fields["id"] == E5.fields["id"] ) {
									setmedical = Interface13.Input( Task13.User, "Specify a new medical status for this person.", "Medical HUD", R5.fields["p_stat"], new ByTable(new object [] { "*SSD*", "*Deceased*", "Physically Unfit", "Active", "Disabled", "Cancel" }), InputType.Any );

									if ( GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
										
										if ( setmedical != "Cancel" ) {
											R5.fields["p_stat"] = setmedical;
											modified2 = true;

											if ( GlobalVars.PDA_Manifest.len != 0 ) {
												GlobalVars.PDA_Manifest.len = 0;
											}
											Task13.Schedule( 0, (Task13.Closure)(() => {
												
												if ( Task13.User is Mob_Living_Carbon_Human ) {
													U5 = Task13.User;
													((dynamic)U5).handle_regular_hud_updates();
												}

												if ( Task13.User is Mob_Living_Silicon_Robot ) {
													U6 = Task13.User;
													((dynamic)U6).handle_regular_hud_updates();
												}
												return;
											}));
										}
									}
								}
							}
						}
					}

					if ( !modified2 ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to locate a data core entry for this person.</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["medrecord"] ) ) {
				
				if ( GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
					perpname6 = "wot";
					read3 = false;

					if ( Lang13.Bool( this.wear_id ) ) {
						
						if ( this.wear_id is Obj_Item_Weapon_Card_Id ) {
							perpname6 = this.wear_id.registered_name;
						} else if ( this.wear_id is Obj_Item_Device_Pda ) {
							tempPda5 = this.wear_id;
							perpname6 = tempPda5.owner;
						}
					} else {
						perpname6 = this.name;
					}

					foreach (dynamic _m in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E6 = _m;
						

						if ( E6.fields["name"] == perpname6 ) {
							
							foreach (dynamic _l in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
								R6 = _l;
								

								if ( R6.fields["id"] == E6.fields["id"] ) {
									
									if ( GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
										GlobalFuncs.to_chat( Task13.User, "<b>Name:</b> " + R6.fields["name"] + "	<b>Blood Type:</b> " + R6.fields["b_type"] );
										GlobalFuncs.to_chat( Task13.User, "<b>DNA:</b> " + R6.fields["b_dna"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Minor Disabilities:</b> " + R6.fields["mi_dis"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Details:</b> " + R6.fields["mi_dis_d"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Major Disabilities:</b> " + R6.fields["ma_dis"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Details:</b> " + R6.fields["ma_dis_d"] );
										GlobalFuncs.to_chat( Task13.User, "<b>Notes:</b> " + R6.fields["notes"] );
										GlobalFuncs.to_chat( Task13.User, new Txt( "<a href='?src=" ).Ref( this ).str( ";medrecordComment=`'>[View Comment Log]</a>" ).ToString() );
										read3 = true;
									}
								}
							}
						}
					}

					if ( !read3 ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to locate a data core entry for this person.</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["medrecordComment"] ) ) {
				
				if ( GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
					perpname7 = "wot";
					read4 = false;

					if ( Lang13.Bool( this.wear_id ) ) {
						
						if ( this.wear_id is Obj_Item_Weapon_Card_Id ) {
							perpname7 = this.wear_id.registered_name;
						} else if ( this.wear_id is Obj_Item_Device_Pda ) {
							tempPda6 = this.wear_id;
							perpname7 = tempPda6.owner;
						}
					} else {
						perpname7 = this.name;
					}

					foreach (dynamic _o in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E7 = _o;
						

						if ( E7.fields["name"] == perpname7 ) {
							
							foreach (dynamic _n in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
								R7 = _n;
								

								if ( R7.fields["id"] == E7.fields["id"] ) {
									
									if ( GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
										read4 = true;
										counter3 = 1;

										while (Lang13.Bool( R7.fields["com_" + counter3] )) {
											GlobalFuncs.to_chat( Task13.User, "" + R7.fields["com_" + counter3] );
											counter3++;
										}

										if ( counter3 == 1 ) {
											GlobalFuncs.to_chat( Task13.User, "No comment found" );
										}
										GlobalFuncs.to_chat( Task13.User, new Txt( "<a href='?src=" ).Ref( this ).str( ";medrecordadd=`'>[Add comment]</a>" ).ToString() );
									}
								}
							}
						}
					}

					if ( !read4 ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to locate a data core entry for this person.</span>" );
					}
				}
			} else if ( Lang13.Bool( href_list["medrecordadd"] ) ) {
				
				if ( GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
					perpname8 = "wot";

					if ( Lang13.Bool( this.wear_id ) ) {
						
						if ( this.wear_id is Obj_Item_Weapon_Card_Id ) {
							perpname8 = this.wear_id.registered_name;
						} else if ( this.wear_id is Obj_Item_Device_Pda ) {
							tempPda7 = this.wear_id;
							perpname8 = tempPda7.owner;
						}
					} else {
						perpname8 = this.name;
					}

					foreach (dynamic _q in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E8 = _q;
						

						if ( E8.fields["name"] == perpname8 ) {
							
							foreach (dynamic _p in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
								R8 = _p;
								

								if ( R8.fields["id"] == E8.fields["id"] ) {
									
									if ( GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
										t13 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Add Comment:", "Med. records", null, null, null, InputType.StrMultiline ) ), 1, 1024 );

										if ( !Lang13.Bool( t13 ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.hasHUD( Task13.User, "medical" ) ) {
											return null;
										}
										counter4 = 1;

										while (Lang13.Bool( R8.fields["com_" + counter4] )) {
											counter4++;
										}

										if ( Task13.User is Mob_Living_Carbon_Human ) {
											U7 = Task13.User;
											R8.fields["com_" + counter4] = "Made by " + ((dynamic)U7).get_authentification_name() + " (" + ((dynamic)U7).get_assignment() + ") on " + String13.FormatTime( Game13.realtime, "DDD MMM DD hh:mm:ss" ) + ", " + GlobalVars.game_year + "<BR>" + t13;
										}

										if ( Task13.User is Mob_Living_Silicon_Robot ) {
											U8 = Task13.User;
											R8.fields["com_" + counter4] = "Made by " + U8.name + " (" + ((dynamic)U8).modtype + " " + ((dynamic)U8).braintype + ") on " + String13.FormatTime( Game13.realtime, "DDD MMM DD hh:mm:ss" ) + ", " + GlobalVars.game_year + "<BR>" + t13;
										}
									}
								}
							}
						}
					}
				}
			} else if ( Lang13.Bool( href_list["lookitem"] ) ) {
				I2 = Lang13.FindObj( href_list["lookitem"] );
				Task13.User.__CallVerb("Examine", I2 );
			} else if ( Lang13.Bool( href_list["lookmob"] ) ) {
				M = Lang13.FindObj( href_list["lookmob"] );
				Task13.User.__CallVerb("Examine", M );
			} else {
				base.Topic( href, href_list, (object)(hclient) );
			}
			return null;
		}

		// Function from file: human.dm
		public override dynamic hear_radio_only(  ) {
			
			if ( !Lang13.Bool( this.ears ) ) {
				return 0;
			}
			return this.is_on_ears( typeof(Obj_Item_Device_Radio_Headset_HeadsetEarmuffs) );
		}

		// Function from file: human.dm
		public override dynamic electrocute_act( dynamic shock_damage = null, dynamic source = null, double? base_siemens_coeff = null, bool? def_zone = null ) {
			base_siemens_coeff = base_siemens_coeff ?? 1;

			Organ_External affected_organ = null;
			double? siemens_coeff = null;

			
			if ( this.mutations.Contains( ( this.status_flags & 4096 ) != 0 || 109 != 0 ) ) {
				return 0;
			}

			if ( !( def_zone == true ) ) {
				def_zone = Lang13.BoolNullable( Rand13.Pick(new object [] { "l_hand", "r_hand" }) );
			}
			affected_organ = this.get_organ( GlobalFuncs.check_zone( def_zone ) );
			siemens_coeff = ( base_siemens_coeff ??0) * this.get_siemens_coefficient_organ( affected_organ );
			return base.electrocute_act( (object)(shock_damage), (object)(source), siemens_coeff, def_zone );
		}

		// Function from file: human.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic MB = null;
			Ent_Dynamic WC = null;
			Game_Data B = null;

			
			if ( O is Obj_Machinery_Bot_Mulebot ) {
				MB = O;
				((Obj_Machinery_Bot_Mulebot)MB).RunOverCreature( this, this.species.blood_color );
			} else if ( O is Obj_Structure_Bed_Chair_Vehicle_Wheelchair_Motorized_Syndicate ) {
				WC = O;
				((Obj_Structure_Bed_Chair_Vehicle_Wheelchair_Motorized_Syndicate)WC).crush( this, this.species.blood_color );
			} else {
				return null;
			}
			B = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood), GlobalFuncs.get_turf( this ) );
			((dynamic)B).New( ((dynamic)B).loc );
			((dynamic)B).blood_DNA = new ByTable();
			((dynamic)B).blood_DNA[this.dna.unique_enzymes] = this.dna.b_type;
			return null;
		}

		// Function from file: human.dm
		public override void show_inv( dynamic user = null ) {
			bool has_breathable_mask = false;
			ByTable obscured = null;
			string TAB = null;
			string dat = null;
			Browser popup = null;

			((Mob)user).set_machine( this );
			has_breathable_mask = this.wear_mask is Obj_Item_Clothing_Mask;
			obscured = this.check_obscured_slots();
			TAB = "&nbsp;&nbsp;&nbsp;&nbsp;";
			dat = new Txt( "\n	<B>Left Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=l_hand'>		" ).item( ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.v_abstract ) ? this.l_hand : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A><BR>\n	<B>Right Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=r_hand'>		" ).item( ( Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.v_abstract ) ? this.r_hand : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A><BR>\n	" ).ToString();
			dat += new Txt( "<BR><B>Back:</B> <A href='?src=" ).Ref( this ).str( ";item=back'> " ).item( ( Lang13.Bool( this.back ) && !Lang13.Bool( this.back.v_abstract ) ? this.back : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

			if ( has_breathable_mask && this.back is Obj_Item_Weapon_Tank ) {
				dat += new Txt( "<BR>" ).item( TAB ).str( "&#8627;<A href='?src=" ).Ref( this ).str( ";item=internal'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
			}
			dat += "<BR>";
			dat += new Txt( "<BR><B>Head:</B> <A href='?src=" ).Ref( this ).str( ";item=head'>				" ).item( ( Lang13.Bool( this.head ) && !Lang13.Bool( this.head.v_abstract ) ? this.head : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

			if ( obscured.Contains( 2 ) ) {
				dat += "<BR><font color=grey><B>Mask:</B> Obscured by " + this.head + "</font>";
			} else {
				dat += new Txt( "<BR><B>Mask:</B> <A href='?src=" ).Ref( this ).str( ";item=mask'>		" ).item( ( Lang13.Bool( this.wear_mask ) && !Lang13.Bool( this.wear_mask.v_abstract ) ? this.wear_mask : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();
			}

			if ( obscured.Contains( 9 ) ) {
				dat += "<BR><font color=grey><B>Eyes:</B> Obscured by " + this.head + "</font>";
			} else {
				dat += new Txt( "<BR><B>Eyes:</B> <A href='?src=" ).Ref( this ).str( ";item=eyes'>			" ).item( ( Lang13.Bool( this.glasses ) && !Lang13.Bool( this.glasses.v_abstract ) ? this.glasses : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();
			}

			if ( obscured.Contains( 8 ) ) {
				dat += "<BR><font color=grey><B>Ears:</B> Obscured by " + this.head + "</font>";
			} else {
				dat += new Txt( "<BR><B>Ears:</B> <A href='?src=" ).Ref( this ).str( ";item=ears'>				" ).item( ( Lang13.Bool( this.ears ) && !Lang13.Bool( this.ears.v_abstract ) ? this.ears : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();
			}
			dat += "<BR>";
			dat += new Txt( "<BR><B>Exosuit:</B> <A href='?src=" ).Ref( this ).str( ";item=suit'> " ).item( ( Lang13.Bool( this.wear_suit ) && !Lang13.Bool( this.wear_suit.v_abstract ) ? this.wear_suit : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

			if ( Lang13.Bool( this.wear_suit ) ) {
				dat += new Txt( "<BR>" ).item( TAB ).str( "&#8627;<B>Suit Storage:</B> <A href='?src=" ).Ref( this ).str( ";item=s_store'>" ).item( ( Lang13.Bool( this.s_store ) && !Lang13.Bool( this.s_store.v_abstract ) ? this.s_store : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

				if ( has_breathable_mask && this.s_store is Obj_Item_Weapon_Tank ) {
					dat += new Txt( "<BR>" ).item( TAB ).item( TAB ).str( "&#8627;<A href='?src=" ).Ref( this ).str( ";item=internal2'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
				}
			}

			if ( obscured.Contains( 12 ) ) {
				dat += "<BR><font color=grey><B>Shoes:</B> Obscured by " + this.wear_suit + "</font>";
			} else {
				dat += new Txt( "<BR><B>Shoes:</B> <A href='?src=" ).Ref( this ).str( ";item=shoes'>			" ).item( ( Lang13.Bool( this.shoes ) && !Lang13.Bool( this.shoes.v_abstract ) ? this.shoes : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();
			}

			if ( obscured.Contains( 10 ) ) {
				dat += "<BR><font color=grey><B>Gloves:</B> Obscured by " + this.wear_suit + "</font>";
			} else {
				dat += new Txt( "<BR><B>Gloves:</B> <A href='?src=" ).Ref( this ).str( ";item=gloves'>			" ).item( ( Lang13.Bool( this.gloves ) && !Lang13.Bool( this.gloves.v_abstract ) ? this.gloves : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();
			}

			if ( obscured.Contains( 14 ) ) {
				dat += "<BR><font color=grey><B>Uniform:</B> Obscured by " + this.wear_suit + "</font>";
			} else {
				dat += new Txt( "<BR><B>Uniform:</B> <A href='?src=" ).Ref( this ).str( ";item=uniform'>	 " ).item( ( Lang13.Bool( this.w_uniform ) && !Lang13.Bool( this.w_uniform.v_abstract ) ? this.w_uniform : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				dat += new Txt( "<BR>" ).item( TAB ).str( "&#8627;<B>Belt:</B> <A href='?src=" ).Ref( this ).str( ";item=belt'> " ).item( ( Lang13.Bool( this.belt ) && !Lang13.Bool( this.belt.v_abstract ) ? this.belt : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

				if ( has_breathable_mask && this.belt is Obj_Item_Weapon_Tank ) {
					dat += new Txt( "<BR>" ).item( TAB ).item( TAB ).str( "&#8627;<A href='?src=" ).Ref( this ).str( ";item=internal1'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
				}

				if ( user is Mob_Living_Carbon_Human && user.gloves is Obj_Item_Clothing_Gloves_Black_Thief ) {
					dat += new Txt( "<BR>" ).item( TAB ).str( "&#8627;<B>Pockets:</B> <A href='?src=" ).Ref( this ).str( ";pockets=left'>" ).item( ( Lang13.Bool( this.l_store ) && !Lang13.Bool( this.l_store.v_abstract ) ? this.l_store : ((dynamic)( "<font color=grey>Left (Empty)</font>" )) ) ).str( "</A>" ).ToString();
					dat += new Txt( " <A href='?src=" ).Ref( this ).str( ";pockets=right'>" ).item( ( Lang13.Bool( this.r_store ) && !Lang13.Bool( this.r_store.v_abstract ) ? this.r_store : ((dynamic)( "<font color=grey>Right (Empty)</font>" )) ) ).str( "</A>" ).ToString();
				} else {
					dat += new Txt( "<BR>" ).item( TAB ).str( "&#8627;<B>Pockets:</B> <A href='?src=" ).Ref( this ).str( ";pockets=left'>" ).item( ( Lang13.Bool( this.l_store ) && !Lang13.Bool( this.l_store.v_abstract ) ? "Left (Full)" : "<font color=grey>Left (Empty)</font>" ) ).str( "</A>" ).ToString();
					dat += new Txt( " <A href='?src=" ).Ref( this ).str( ";pockets=right'>" ).item( ( Lang13.Bool( this.r_store ) && !Lang13.Bool( this.r_store.v_abstract ) ? "Right (Full)" : "<font color=grey>Right (Empty)</font>" ) ).str( "</A>" ).ToString();
				}
				dat += new Txt( "<BR>" ).item( TAB ).str( "&#8627;<B>ID:</B> <A href='?src=" ).Ref( this ).str( ";item=id'>" ).item( ( Lang13.Bool( this.wear_id ) && !Lang13.Bool( this.wear_id.v_abstract ) ? this.wear_id : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();
			}
			dat += "<BR>";

			if ( Lang13.Bool( this.handcuffed ) ) {
				dat += new Txt( "<BR><B>Handcuffed:</B> <A href='?src=" ).Ref( this ).str( ";item=handcuff'>Remove</A>" ).ToString();
			}

			if ( Lang13.Bool( this.legcuffed ) ) {
				dat += new Txt( "<BR><B>Legcuffed:</B> <A href='?src=" ).Ref( this ).str( ";item=legcuff'>Remove</A>" ).ToString();
			}
			dat += new Txt( "\n	<BR>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).Ref( this ).str( "'>Close</A>\n	" ).ToString();
			popup = new Browser( user, new Txt( "mob" ).Ref( this ).ToString(), "" + this, 340, 500 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: human.dm
		public override bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				return true;
			}

			if ( this.wear_suit is Obj_Item_Clothing_Suit_StraightJacket ) {
				return true;
			}
			return false;
		}

		// Function from file: human.dm
		public override void attack_slime( Mob_Living_Carbon_Slime user = null ) {
			dynamic O = null;
			double? damage = null;
			dynamic dam_zone = null;
			string affecting = null;
			int? armor_block = null;
			int stunprob = 0;
			double power = 0;
			dynamic O2 = null;
			Effect_Effect_System_SparkSpread s = null;

			
			if ( Lang13.Bool( user.Victim ) ) {
				return;
			}

			if ( Convert.ToDouble( this.health ) > -100 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						O.show_message( "<span class='danger'>The " + user.name + " glomps " + this + "!</span>", 1 );
					}
				}
				damage = Rand13.Int( 1, 3 );

				if ( user is Mob_Living_Carbon_Slime_Adult ) {
					damage = Rand13.Int( 10, 35 );
				} else {
					damage = Rand13.Int( 5, 25 );
				}
				dam_zone = Rand13.Pick(new object [] { "head", "chest", "l_arm", "r_arm", "l_leg", "r_leg", "groin" });
				affecting = this.get_organ( GlobalFuncs.ran_zone( dam_zone ) );
				armor_block = this.run_armor_check( affecting, "melee" );
				this.apply_damage( damage, "brute", affecting, armor_block );

				if ( user.powerlevel > 0 ) {
					stunprob = 10;
					power = user.powerlevel + Rand13.Int( 0, 3 );

					dynamic _b = user.powerlevel; // Was a switch-case, sorry for the mess.
					if ( 1<=_b&&_b<=2 ) {
						stunprob = 20;
					} else if ( 3<=_b&&_b<=4 ) {
						stunprob = 30;
					} else if ( 5<=_b&&_b<=6 ) {
						stunprob = 40;
					} else if ( 7<=_b&&_b<=8 ) {
						stunprob = 60;
					} else if ( _b==9 ) {
						stunprob = 70;
					} else if ( _b==10 ) {
						stunprob = 95;
					}

					if ( Rand13.PercentChance( stunprob ) ) {
						user.powerlevel -= 3;

						if ( user.powerlevel < 0 ) {
							user.powerlevel = 0;
						}

						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
							O2 = _c;
							

							if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
								O2.show_message( "<span class='danger'>The " + user.name + " has shocked " + this + "!</span>", 1 );
							}
						}
						this.Weaken( power );

						if ( Convert.ToDouble( this.stuttering ) < power ) {
							this.stuttering = power;
						}
						this.Stun( power );
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();

						if ( Rand13.PercentChance( stunprob ) && user.powerlevel >= 8 ) {
							this.adjustFireLoss( user.powerlevel * Rand13.Int( 6, 10 ) );
						}
					}
				}
				this.updatehealth();
			}
			return;
		}

		// Function from file: human.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			double? damage = null;
			dynamic dam_zone = null;
			string affecting = null;
			int? armor = null;

			
			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				user.emote( "" + ((dynamic)user).friendly + " " + this );
			} else {
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>" + ((dynamic)user).attacktext + " " + this.name + " (" + this.ckey + ")</font>" );
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been " + ((dynamic)user).attacktext + " by " + user.name + " (" + user.ckey + ")</font>" );

				if ( !( user is Mob_Living_Carbon ) ) {
					this.LAssailant = null;
				} else {
					this.LAssailant = user;
				}

				if ( Lang13.Bool( ((dynamic)user).attack_sound ) ) {
					GlobalFuncs.playsound( this.loc, ((dynamic)user).attack_sound, 50, 1, 1 );
				}
				GlobalFuncs.add_logs( user, this, "attacked", false );
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );
				dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });

				if ( user.zone_sel != null && Lang13.Bool( ((dynamic)user.zone_sel).selecting ) ) {
					dam_zone = ((dynamic)user.zone_sel).selecting;
				}
				affecting = this.get_organ( GlobalFuncs.ran_zone( dam_zone ) );
				armor = this.run_armor_check( affecting, "melee" );
				this.apply_damage( damage, ((dynamic)user).melee_damage_type, affecting, armor );
				this.visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " " ).item( ((dynamic)user).attacktext ).str( " " ).item( this ).str( " in " ).the( ((dynamic)affecting).display_name ).item().str( "!</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: human.dm
		public override dynamic Stat(  ) {
			double timeleft = 0;
			Ent_Static S = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( null, "Intent: " + this.a_intent );
				Interface13.Stat( null, "Move Mode: " + this.m_intent );

				if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode.name == "AI malfunction" ) {
					
					if ( GlobalVars.ticker.mode.malf_mode_declared ) {
						Interface13.Stat( null, "Time left: " + Num13.MaxInt( ((int)( GlobalVars.ticker.mode.AI_win_timeleft / ( GlobalVars.ticker.mode.apcs / 3 ) )), 0 ) );
					}
				}

				if ( GlobalVars.emergency_shuttle != null ) {
					
					if ( GlobalVars.emergency_shuttle.online && GlobalVars.emergency_shuttle.location < 2 ) {
						timeleft = GlobalVars.emergency_shuttle.timeleft();

						if ( timeleft != 0 ) {
							Interface13.Stat( null, "ETA-" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) );
						}
					}
				}

				if ( Lang13.Bool( this.v_internal ) ) {
					
					if ( !Lang13.Bool( this.v_internal.air_contents ) ) {
						GlobalFuncs.qdel( this.v_internal );
						this.v_internal = null;
					} else {
						Interface13.Stat( "Internal Atmosphere Info", this.v_internal.name );
						Interface13.Stat( "Tank Pressure", this.v_internal.air_contents.return_pressure() );
						Interface13.Stat( "Distribution Pressure", this.v_internal.distribute_pressure );
					}
				}

				if ( this.mind != null ) {
					
					if ( this.mind.changeling != null ) {
						Interface13.Stat( "Chemical Storage", this.mind.changeling.chem_charges );
						Interface13.Stat( "Genetic Damage Time", this.mind.changeling.geneticdamage );
					}
				}

				if ( this.loc is Obj_Spacepod ) {
					S = this.loc;
					Interface13.Stat( "Spacepod Charge", "" + ( ((dynamic)S).battery is Obj_Item_Weapon_Cell ? "" + ((dynamic)S).battery.charge / ((dynamic)S).battery.maxcharge * 100 : "No cell detected" ) );
					Interface13.Stat( "Spacepod Integrity", "" + ( !Lang13.Bool( ((dynamic)S).health ) ? "0" : "" + ((dynamic)S).health / Lang13.Initial( S, "health" ) * 100 ) + "%" );
				}
			}
			return null;
		}

		// Function from file: human.dm
		public override string player_panel_controls( Mob user = null ) {
			string html = null;
			dynamic B = null;

			html = "";
			B = this.has_brain_worms();

			if ( Lang13.Bool( B ) ) {
				html += "<h2>Cortical Borer:</h2> " + B + " (";

				if ( B.controlling ) {
					html += new Txt( "<a style='color:red;font-weight:bold;' href='?src=" ).Ref( B ).str( "&act=release'>Controlling</a>" ).ToString();
				} else if ( Lang13.Bool( B.host_brain.ckey ) ) {
					html += new Txt( "<a style='color:red;font-weight:bold;' href='?src=" ).Ref( B ).str( "&act=release'>!HOST BRAIN BUGGED!</a>" ).ToString();
				} else {
					html += "Not Controlling";
				}
				html += new Txt( " | <a href='?src=" ).Ref( B ).str( "&act=detach'>Detach</a>" ).ToString();
				html += new Txt( " | <a href='?_src_=holder;adminmoreinfo=" ).Ref( B ).str( "'>?</a> | <a href='?_src_=vars;mob_player_panel=" ).Ref( B ).str( "'>PP</a>" ).ToString();
				html += ")";
			}
			return html;
		}

		// Function from file: human.dm
		public override void generate_static_overlay(  ) {
			Image static_overlay = null;

			
			if ( !( this.static_overlays is ByTable ) ) {
				this.static_overlays = new ByTable();
			}
			this.static_overlays.Add( new ByTable(new object [] { "static", "blank", "letter" }) );
			static_overlay = new Image( new Icon( "icons/effects/effects.dmi", "static" ), this );
			static_overlay.v_override = true;
			this.static_overlays["static"] = static_overlay;
			static_overlay = new Image( new Icon( "icons/effects/effects.dmi", "blank_human" ), this );
			static_overlay.v_override = true;
			this.static_overlays["blank"] = static_overlay;
			static_overlay = GlobalFuncs.getLetterImage( this, "H", 1 );
			static_overlay.v_override = true;
			this.static_overlays["letter"] = static_overlay;
			return;
		}

		// Function from file: examine.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			ByTable obscured = null;
			bool skipgloves = false;
			bool skipjumpsuit = false;
			bool skipshoes = false;
			bool skipmask = false;
			int skipface = 0;
			string t_He = null;
			string t_his = null;
			string t_him = null;
			string t_has = null;
			string t_is = null;
			string msg = null;
			int distance = 0;
			dynamic tie_msg = null;
			dynamic U = null;
			Obj_Item_Clothing_Accessory accessory = null;
			dynamic organ = null;
			dynamic o = null;
			ByTable wound_flavor_text = null;
			ByTable is_destroyed = null;
			ByTable is_bleeding = null;
			Organ_External temp = null;
			ByTable wound_descriptors = null;
			Wound W = null;
			string this_wound_desc = null;
			ByTable flavor_text = null;
			ByTable no_exclude = null;
			dynamic wound = null;
			string flavor_text_string = null;
			int? text = null;
			bool display_chest = false;
			bool display_shoes = false;
			bool display_gloves = false;
			dynamic implant = null;
			string butchery = null;
			ButcheringProduct B = null;
			string perpname = null;
			string criminal = null;
			dynamic I = null;
			Data_Record E = null;
			Data_Record R = null;
			string perpname2 = null;
			string medical = null;
			dynamic tempPda = null;
			Data_Record E2 = null;
			Data_Record R2 = null;

			obscured = this.check_obscured_slots();
			skipgloves = false;
			skipjumpsuit = false;
			skipshoes = false;
			skipmask = false;
			skipface = 0;

			if ( Lang13.Bool( this.wear_mask ) ) {
				skipface |= this.check_hidden_head_flags( 38912 ) ?1:0;
			}
			t_He = "It";
			t_his = "its";
			t_him = "it";
			t_has = "has";
			t_is = "is";
			msg = "<span class='info'>*---------*\nThis is ";

			if ( Lang13.Bool( ((dynamic)( obscured != null && skipface != 0 )).Contains( 14 ) ) ) {
				t_He = "They";
				t_his = "their";
				t_him = "them";
				t_has = "have";
				t_is = "are";
			} else {
				
				if ( Lang13.Bool( this.icon ) ) {
					msg += new Txt().icon( this ).str( " " ).ToString();
				}

				switch ((string)( this.gender )) {
					case "male":
						t_He = "He";
						t_his = "his";
						t_him = "him";
						break;
					case "female":
						t_He = "She";
						t_his = "her";
						t_him = "her";
						break;
				}
			}
			distance = Map13.GetDistance( user, this );

			if ( user is Mob_Dead_Observer || Convert.ToInt32( user.stat ) == 2 ) {
				distance = 1;
			}
			msg += "<EM>" + this.name + "</EM>!\n";

			if ( Lang13.Bool( this.w_uniform ) && !obscured.Contains( 14 ) ) {
				tie_msg = null;

				if ( this.w_uniform is Obj_Item_Clothing_Under ) {
					U = this.w_uniform;

					foreach (dynamic _b in Lang13.Enumerate( U.accessories, typeof(Obj_Item_Clothing_Accessory) )) {
						accessory = _b;
						
						tie_msg += new Txt( " with " ).icon( accessory ).str( " " ).a( accessory ).item().ToString();
					}
				}

				if ( this.w_uniform.blood_DNA != null && this.w_uniform.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.w_uniform ).str( " " ).item( ( this.w_uniform.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.w_uniform.name ).item( tie_msg ).str( "!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.w_uniform ).str( " " ).a( this.w_uniform ).item().item( tie_msg ).str( ".\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.head ) ) {
				
				if ( this.head.blood_DNA != null && this.head.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.head ).str( " " ).item( ( this.head.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.head.name ).str( " on " ).item( t_his ).str( " head!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.head ).str( " " ).a( this.head ).item().str( " on " ).item( t_his ).str( " head.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( this.wear_suit.blood_DNA != null && this.wear_suit.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.wear_suit ).str( " " ).item( ( this.wear_suit.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.wear_suit.name ).str( "!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.wear_suit ).str( " " ).a( this.wear_suit ).item().str( ".\n" ).ToString();
				}

				if ( Lang13.Bool( this.s_store ) ) {
					
					if ( this.s_store.blood_DNA != null && this.s_store.blood_DNA.len != 0 ) {
						msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " carrying " ).icon( this.s_store ).str( " " ).item( ( this.s_store.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.s_store.name ).str( " on " ).item( t_his ).str( " " ).item( this.wear_suit.name ).str( "!</span>\n" ).ToString();
					} else {
						msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " carrying " ).icon( this.s_store ).str( " " ).a( this.s_store ).item().str( " on " ).item( t_his ).str( " " ).item( this.wear_suit.name ).str( ".\n" ).ToString();
					}
				}
			}

			if ( Lang13.Bool( this.back ) ) {
				
				if ( this.back.blood_DNA != null && this.back.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.back ).str( " " ).item( ( this.back.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.back ).str( " on " ).item( t_his ).str( " back.</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.back ).str( " " ).a( this.back ).item().str( " on " ).item( t_his ).str( " back.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.l_hand ) ) {
				
				if ( this.l_hand.blood_DNA != null && this.l_hand.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " holding " ).icon( this.l_hand ).str( " " ).item( ( this.l_hand.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.l_hand.name ).str( " in " ).item( t_his ).str( " left hand!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " holding " ).icon( this.l_hand ).str( " " ).a( this.l_hand ).item().str( " in " ).item( t_his ).str( " left hand.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.r_hand ) ) {
				
				if ( this.r_hand.blood_DNA != null && this.r_hand.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " holding " ).icon( this.r_hand ).str( " " ).item( ( this.r_hand.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.r_hand.name ).str( " in " ).item( t_his ).str( " right hand!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " holding " ).icon( this.r_hand ).str( " " ).a( this.r_hand ).item().str( " in " ).item( t_his ).str( " right hand.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.gloves ) && !obscured.Contains( 10 ) ) {
				
				if ( this.gloves.blood_DNA != null && this.gloves.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.gloves ).str( " " ).item( ( this.gloves.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.gloves.name ).str( " on " ).item( t_his ).str( " hands!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.gloves ).str( " " ).a( this.gloves ).item().str( " on " ).item( t_his ).str( " hands.\n" ).ToString();
				}
			} else if ( this.blood_DNA != null && this.blood_DNA.len != 0 && !obscured.Contains( 10 ) ) {
				msg += "<span class='warning'>" + t_He + " " + t_has + " blood-stained hands!</span>\n";
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				
				if ( this.handcuffed is Obj_Item_Weapon_Handcuffs_Cable ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " " ).icon( this.handcuffed ).str( " restrained with cable!</span>\n" ).ToString();
				} else {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " " ).icon( this.handcuffed ).str( " handcuffed!</span>\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.belt ) ) {
				
				if ( this.belt.blood_DNA != null && this.belt.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.belt ).str( " " ).item( ( this.belt.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.belt.name ).str( " about " ).item( t_his ).str( " waist!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.belt ).str( " " ).a( this.belt ).item().str( " about " ).item( t_his ).str( " waist.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.shoes ) && !obscured.Contains( 12 ) ) {
				
				if ( this.shoes.blood_DNA != null && this.shoes.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.shoes ).str( " " ).item( ( this.shoes.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.shoes.name ).str( " on " ).item( t_his ).str( " feet!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.shoes ).str( " " ).a( this.shoes ).item().str( " on " ).item( t_his ).str( " feet.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.wear_mask ) && !obscured.Contains( 2 ) ) {
				
				if ( this.wear_mask.blood_DNA != null && this.wear_mask.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.wear_mask ).str( " " ).item( ( this.wear_mask.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.wear_mask.name ).str( " on " ).item( t_his ).str( " face!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.wear_mask ).str( " " ).a( this.wear_mask ).item().str( " on " ).item( t_his ).str( " face.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.glasses ) && !obscured.Contains( 9 ) ) {
				
				if ( this.glasses.blood_DNA != null && this.glasses.blood_DNA.len != 0 ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.glasses ).str( " " ).item( ( this.glasses.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.glasses ).str( " covering " ).item( t_his ).str( " eyes!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.glasses ).str( " " ).a( this.glasses ).item().str( " covering " ).item( t_his ).str( " eyes.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.ears ) && !obscured.Contains( 8 ) ) {
				msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.ears ).str( " " ).a( this.ears ).item().str( " on " ).item( t_his ).str( " ears.\n" ).ToString();
			}

			if ( Lang13.Bool( this.wear_id ) ) {
				msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.wear_id ).str( " " ).a( this.wear_id ).item().str( ".\n" ).ToString();
			}

			dynamic _c = this.jitteriness; // Was a switch-case, sorry for the mess.
			if ( 300<=_c&&_c<=Double.PositiveInfinity ) {
				msg += "<span class='danger'>" + t_He + " " + t_is + " convulsing violently!</span>\n";
			} else if ( 100<=_c&&_c<=300 ) {
				msg += "<span class='warning'>" + t_He + " " + t_is + " extremely jittery.</span>\n";
			} else if ( 1<=_c&&_c<=100 ) {
				msg += "<span class='warning'>" + t_He + " " + t_is + " twitching ever so slightly.</span>\n";
			}

			foreach (dynamic _d in Lang13.Enumerate( new ByTable(new object [] { "l_leg", "r_leg", "l_arm", "r_arm" }) )) {
				organ = _d;
				
				o = this.get_organ( organ );

				if ( Lang13.Bool( o ) && Lang13.Bool( o.status & 256 ) ) {
					msg += "<span class='warning'>" + t_He + " " + t_has + " a splint on " + t_his + " " + o.display_name + "!</span>\n";
				}
			}

			if ( this.suiciding == true ) {
				msg += "<span class='warning'>" + t_He + " appears to have committed suicide... there is no hope of recovery.</span>\n";
			}

			if ( this.mutations.Contains( 110 ) ) {
				msg += "" + t_He + " " + t_is + " a short, sturdy creature fond of drink and industry.\n";
			}

			if ( this.isUnconscious() ) {
				msg += "<span class='warning'>" + t_He + " " + t_is + "n't responding to anything around " + t_him + " and seems to be asleep.</span>\n";

				if ( ( this.isDead() || Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_crit ) ) && distance <= 3 ) {
					msg += "<span class='warning'>" + t_He + " does not appear to be breathing.</span>\n";
				}

				if ( user is Mob_Living_Carbon_Human && !this.isUnconscious(  ) && distance <= 1 ) {
					((Ent_Static)user).visible_message( "<span class='info'>" + user + " checks " + this + "'s pulse." );
					Task13.Schedule( 15, (Task13.Closure)(() => {
						
						if ( Lang13.Bool( user ) && distance <= 1 && !this.isUnconscious(  ) ) {
							
							if ( this.pulse == 0 || ( this.status_flags & 8192 ) != 0 ) {
								GlobalFuncs.to_chat( user, "<span class='deadsay'>" + t_He + " has no pulse" + ( this.client != null ? "" : " and " + t_his + " soul has departed" ) + "...</span>" );
							} else {
								GlobalFuncs.to_chat( user, "<span class='deadsay'>" + t_He + " has a pulse!</span>" );
							}
						}
						return;
					}));
				}
			}
			msg += "<span class='warning'>";

			if ( this.nutrition < 100 ) {
				
				if ( GlobalVars.hardcore_mode && Lang13.Bool( this.ckey ) && this.client != null ) {
					msg += "<span class='danger'>" + t_He + " " + t_is + " severely malnourished.</span>\n";
				} else {
					msg += "" + t_He + " " + t_is + " severely malnourished.\n";
				}
			} else if ( this.nutrition >= 500 ) {
				
				if ( user.nutrition < 100 ) {
					msg += "" + t_He + " " + t_is + " plump and delicious looking - Like a fat little piggy. A tasty piggy.\n";
				} else {
					msg += "" + t_He + " " + t_is + " quite chubby.\n";
				}
			}
			msg += "</span>";

			if ( this.has_brain() && this.stat != 2 ) {
				
				if ( !Lang13.Bool( this.key ) ) {
					msg += "<span class='deadsay'>" + t_He + " " + t_is + " totally catatonic. The stresses of life in deep space must have been too much for " + t_him + ". Any recovery is unlikely.</span>\n";
				} else if ( !( this.client != null ) ) {
					msg += "" + t_He + " " + t_has + " a vacant, braindead stare...\n";
				}
			}
			wound_flavor_text = new ByTable();
			is_destroyed = new ByTable();
			is_bleeding = new ByTable();

			foreach (dynamic _l in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				temp = _l;
				

				if ( temp != null ) {
					
					if ( ( temp.status & 64 ) != 0 ) {
						is_destroyed["" + temp.display_name] = 1;
						wound_flavor_text["" + temp.display_name] = "<span class='danger'>" + t_He + " is missing " + t_his + " " + temp.display_name + ".</span>\n";
						continue;
					}

					if ( ( temp.status & 4096 ) != 0 ) {
						
						if ( !( temp.brute_dam + temp.burn_dam != 0 ) ) {
							wound_flavor_text["" + temp.display_name] = "<span class='warning'>" + t_He + " has a peg " + temp.display_name + "!</span>\n";
							continue;
						} else {
							wound_flavor_text["" + temp.display_name] = "<span class='warning'>" + t_He + " has a peg " + temp.display_name + ", it has";
						}

						if ( temp.brute_dam != 0 ) {
							
							dynamic _e = temp.brute_dam; // Was a switch-case, sorry for the mess.
							if ( 0<=_e&&_e<=20 ) {
								wound_flavor_text["" + temp.display_name] += " some marks";
							} else if ( 21<=_e&&_e<=Double.PositiveInfinity ) {
								wound_flavor_text["" + temp.display_name] += Rand13.Pick(new object [] { " a lot of damage", " severe cracks and splintering" });
							}
						}

						if ( temp.brute_dam != 0 && temp.burn_dam != 0 ) {
							wound_flavor_text["" + temp.display_name] += " and";
						}

						if ( temp.burn_dam != 0 ) {
							
							dynamic _f = temp.burn_dam; // Was a switch-case, sorry for the mess.
							if ( 0<=_f&&_f<=20 ) {
								wound_flavor_text["" + temp.display_name] += " some burns";
							} else if ( 21<=_f&&_f<=Double.PositiveInfinity ) {
								wound_flavor_text["" + temp.display_name] += Rand13.Pick(new object [] { " a lot of burns", " severe charring" });
							}
						}
						wound_flavor_text["" + temp.display_name] += "!</span>\n";
					} else if ( ( temp.status & 128 ) != 0 ) {
						
						if ( !( temp.brute_dam + temp.burn_dam != 0 ) ) {
							wound_flavor_text["" + temp.display_name] = "<span class='warning'>" + t_He + " has a robot " + temp.display_name + "!</span>\n";
							continue;
						} else {
							wound_flavor_text["" + temp.display_name] = "<span class='warning'>" + t_He + " has a robot " + temp.display_name + ", it has";
						}

						if ( temp.brute_dam != 0 ) {
							
							dynamic _g = temp.brute_dam; // Was a switch-case, sorry for the mess.
							if ( 0<=_g&&_g<=20 ) {
								wound_flavor_text["" + temp.display_name] += " some dents";
							} else if ( 21<=_g&&_g<=Double.PositiveInfinity ) {
								wound_flavor_text["" + temp.display_name] += Rand13.Pick(new object [] { " a lot of dents", " severe denting" });
							}
						}

						if ( temp.brute_dam != 0 && temp.burn_dam != 0 ) {
							wound_flavor_text["" + temp.display_name] += " and";
						}

						if ( temp.burn_dam != 0 ) {
							
							dynamic _h = temp.burn_dam; // Was a switch-case, sorry for the mess.
							if ( 0<=_h&&_h<=20 ) {
								wound_flavor_text["" + temp.display_name] += " some burns";
							} else if ( 21<=_h&&_h<=Double.PositiveInfinity ) {
								wound_flavor_text["" + temp.display_name] += Rand13.Pick(new object [] { " a lot of burns", " severe melting" });
							}
						}
						wound_flavor_text["" + temp.display_name] += "!</span>\n";
					} else if ( temp.wounds.len > 0 ) {
						wound_descriptors = new ByTable();

						foreach (dynamic _i in Lang13.Enumerate( temp.wounds, typeof(Wound) )) {
							W = _i;
							

							if ( W.v_internal && !( temp.open != 0 ) ) {
								continue;
							}
							this_wound_desc = W.desc;

							if ( W.bleeding() ) {
								this_wound_desc = "bleeding " + this_wound_desc;
							} else if ( W.bandaged ) {
								this_wound_desc = "bandaged " + this_wound_desc;
							}

							if ( W.germ_level > 600 ) {
								this_wound_desc = "badly infected " + this_wound_desc;
							} else if ( W.germ_level > 330 ) {
								this_wound_desc = "lightly infected " + this_wound_desc;
							}

							if ( wound_descriptors.Contains( this_wound_desc ) ) {
								wound_descriptors[this_wound_desc] += W.amount;
								continue;
							}
							wound_descriptors[this_wound_desc] = W.amount;
						}

						if ( wound_descriptors.len != 0 ) {
							flavor_text = new ByTable();
							no_exclude = new ByTable(new object [] { "gaping wound", "big gaping wound", "massive wound", "large bruise", "huge bruise", "massive bruise", "severe burn", "large burn", "deep burn", "carbonised area" });

							foreach (dynamic _k in Lang13.Enumerate( wound_descriptors )) {
								wound = _k;
								

								dynamic _j = wound_descriptors[wound]; // Was a switch-case, sorry for the mess.
								if ( 3<=_j&&_j<=5 ) {
									
									if ( !( flavor_text.len != 0 ) ) {
										flavor_text.Add( "<span class='warning'>" + t_He + " has several " + wound + "s" );
									} else {
										flavor_text.Add( " several " + wound + "s" );
									}
								} else if ( 6<=_j&&_j<=Double.PositiveInfinity ) {
									
									if ( !( flavor_text.len != 0 ) ) {
										flavor_text.Add( "<span class='warning'>" + t_He + " has a bunch of " + wound + "s" );
									} else {
										flavor_text.Add( new Txt( " a ton of " ).item( wound ).s().ToString() );
									}
								} else if ( _j==1 ) {
									
									if ( !( flavor_text.len != 0 ) ) {
										flavor_text.Add( "<span class='warning'>" + t_He + " has" + ( Rand13.PercentChance( 10 ) && !no_exclude.Contains( wound ) ? " what might be" : "" ) + " a " + wound );
									} else {
										flavor_text.Add( "" + ( Rand13.PercentChance( 10 ) && !no_exclude.Contains( wound ) ? " what might be" : "" ) + " a " + wound );
									}
								} else if ( _j==2 ) {
									
									if ( !( flavor_text.len != 0 ) ) {
										flavor_text.Add( "<span class='warning'>" + t_He + " has" + ( Rand13.PercentChance( 10 ) && !no_exclude.Contains( wound ) ? " what might be" : "" ) + " a pair of " + wound + "s" );
									} else {
										flavor_text.Add( "" + ( Rand13.PercentChance( 10 ) && !no_exclude.Contains( wound ) ? " what might be" : "" ) + " a pair of " + wound + "s" );
									}
								}
							}
							flavor_text_string = "";
							text = null;
							text = 1;

							while (( text ??0) <= flavor_text.len) {
								
								if ( text == flavor_text.len && flavor_text.len > 1 ) {
									flavor_text_string += ", and";
								} else if ( flavor_text.len > 1 && ( text ??0) > 1 ) {
									flavor_text_string += ",";
								}
								flavor_text_string += flavor_text[text];
								text++;
							}
							flavor_text_string += " on " + t_his + " " + temp.display_name + ".</span><br>";
							wound_flavor_text["" + temp.display_name] = flavor_text_string;
						} else {
							wound_flavor_text["" + temp.display_name] = "";
						}

						if ( ( temp.status & 8 ) != 0 ) {
							is_bleeding["" + temp.display_name] = 1;
						}
					} else {
						wound_flavor_text["" + temp.display_name] = "";
					}
				}
			}
			display_chest = false;
			display_shoes = false;
			display_gloves = false;

			if ( Lang13.Bool( wound_flavor_text["head"] ) && ( Lang13.Bool( is_destroyed["head"] ) || !skipmask && !( Lang13.Bool( this.wear_mask ) && this.wear_mask is Obj_Item_Clothing_Mask_Gas ) ) ) {
				msg += wound_flavor_text["head"];
			} else if ( Lang13.Bool( is_bleeding["head"] ) ) {
				msg += "<span class='warning'>" + this + " has blood running down " + t_his + " face!</span>\n";
			}

			if ( Lang13.Bool( wound_flavor_text["chest"] ) && !Lang13.Bool( this.w_uniform ) && !skipjumpsuit ) {
				msg += wound_flavor_text["chest"];
			} else if ( Lang13.Bool( is_bleeding["chest"] ) ) {
				display_chest = true;
			}

			if ( Lang13.Bool( wound_flavor_text["left arm"] ) && ( Lang13.Bool( is_destroyed["left arm"] ) || !Lang13.Bool( this.w_uniform ) && !skipjumpsuit ) ) {
				msg += wound_flavor_text["left arm"];
			} else if ( Lang13.Bool( is_bleeding["left arm"] ) ) {
				display_chest = true;
			}

			if ( Lang13.Bool( wound_flavor_text["left hand"] ) && ( Lang13.Bool( is_destroyed["left hand"] ) || !Lang13.Bool( this.gloves ) && !skipgloves ) ) {
				msg += wound_flavor_text["left hand"];
			} else if ( Lang13.Bool( is_bleeding["left hand"] ) ) {
				display_gloves = true;
			}

			if ( Lang13.Bool( wound_flavor_text["right arm"] ) && ( Lang13.Bool( is_destroyed["right arm"] ) || !Lang13.Bool( this.w_uniform ) && !skipjumpsuit ) ) {
				msg += wound_flavor_text["right arm"];
			} else if ( Lang13.Bool( is_bleeding["right arm"] ) ) {
				display_chest = true;
			}

			if ( Lang13.Bool( wound_flavor_text["right hand"] ) && ( Lang13.Bool( is_destroyed["right hand"] ) || !Lang13.Bool( this.gloves ) && !skipgloves ) ) {
				msg += wound_flavor_text["right hand"];
			} else if ( Lang13.Bool( is_bleeding["right hand"] ) ) {
				display_gloves = true;
			}

			if ( Lang13.Bool( wound_flavor_text["groin"] ) && ( Lang13.Bool( is_destroyed["groin"] ) || !Lang13.Bool( this.w_uniform ) && !skipjumpsuit ) ) {
				msg += wound_flavor_text["groin"];
			} else if ( Lang13.Bool( is_bleeding["groin"] ) ) {
				display_chest = true;
			}

			if ( Lang13.Bool( wound_flavor_text["left leg"] ) && ( Lang13.Bool( is_destroyed["left leg"] ) || !Lang13.Bool( this.w_uniform ) && !skipjumpsuit ) ) {
				msg += wound_flavor_text["left leg"];
			} else if ( Lang13.Bool( is_bleeding["left leg"] ) ) {
				display_chest = true;
			}

			if ( Lang13.Bool( wound_flavor_text["left foot"] ) && ( Lang13.Bool( is_destroyed["left foot"] ) || !Lang13.Bool( this.shoes ) && !skipshoes ) ) {
				msg += wound_flavor_text["left foot"];
			} else if ( Lang13.Bool( is_bleeding["left foot"] ) ) {
				display_shoes = true;
			}

			if ( Lang13.Bool( wound_flavor_text["right leg"] ) && ( Lang13.Bool( is_destroyed["right leg"] ) || !Lang13.Bool( this.w_uniform ) && !skipjumpsuit ) ) {
				msg += wound_flavor_text["right leg"];
			} else if ( Lang13.Bool( is_bleeding["right leg"] ) ) {
				display_chest = true;
			}

			if ( Lang13.Bool( wound_flavor_text["right foot"] ) && ( Lang13.Bool( is_destroyed["right foot"] ) || !Lang13.Bool( this.shoes ) && !skipshoes ) ) {
				msg += wound_flavor_text["right foot"];
			} else if ( Lang13.Bool( is_bleeding["right foot"] ) ) {
				display_shoes = true;
			}

			if ( display_chest ) {
				msg += "<span class='danger'>" + this + " has blood soaking through from under " + t_his + " clothing!</span>\n";
			}

			if ( display_shoes ) {
				msg += "<span class='danger'>" + this + " has blood running from " + t_his + " shoes!</span>\n";
			}

			if ( display_gloves ) {
				msg += "<span class='danger'>" + this + " has blood running from under " + t_his + " gloves!</span>\n";
			}

			foreach (dynamic _m in Lang13.Enumerate( this.get_visible_implants( true ) )) {
				implant = _m;
				
				msg += new Txt( "<span class='warning'><b>" ).item( this ).str( " has " ).a( implant ).item().str( " sticking out of " ).item( t_his ).str( " flesh!</span>\n" ).ToString();
			}

			if ( this.digitalcamo ) {
				msg += "" + t_He + " " + t_is + " repulsively uncanny!\n";
			}

			if ( !Lang13.Bool( is_destroyed["head"] ) ) {
				
				if ( this.getBrainLoss() >= 60 ) {
					msg += "" + t_He + " " + t_has + " a stupid expression on " + t_his + " face.\n";
				}

				if ( distance <= 3 ) {
					
					if ( !this.has_brain() ) {
						msg += "<font color='blue'><b>" + t_He + " has had " + t_his + " brain removed.</b></font>\n";
					}
				}
			}
			butchery = "";

			if ( this.butchering_drops != null && this.butchering_drops.len != 0 ) {
				
				foreach (dynamic _n in Lang13.Enumerate( this.butchering_drops, typeof(ButcheringProduct) )) {
					B = _n;
					
					butchery = "" + butchery + B.desc_modifier( this, user );
				}
			}

			if ( Lang13.Bool( butchery ) ) {
				msg += "<span class='warning'>" + butchery + "</span>\n";
			}

			if ( GlobalFuncs.hasHUD( user, "security" ) ) {
				perpname = "wot";
				criminal = "None";

				if ( Lang13.Bool( this.wear_id ) ) {
					I = ((Obj_Item)this.wear_id).GetID();

					if ( Lang13.Bool( I ) ) {
						perpname = I.registered_name;
					} else {
						perpname = this.name;
					}
				} else {
					perpname = this.name;
				}

				if ( Lang13.Bool( perpname ) ) {
					
					foreach (dynamic _p in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
						E = _p;
						

						if ( E.fields["name"] == perpname ) {
							
							foreach (dynamic _o in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
								R = _o;
								

								if ( R.fields["id"] == E.fields["id"] ) {
									criminal = R.fields["criminal"];
								}
							}
						}
					}
					msg += new Txt( "<span class = 'deptradio'>Criminal status:</span> <a href='?src=" ).Ref( this ).str( ";criminal=1'>[" ).item( criminal ).str( "]</a>\n<span class = 'deptradio'>Security records:</span> <a href='?src=" ).Ref( this ).str( ";secrecord=`'>[View]</a>  <a href='?src=" ).Ref( this ).str( ";secrecordadd=`'>[Add comment]</a>\n" ).ToString();
				}
			}

			if ( GlobalFuncs.hasHUD( user, "medical" ) ) {
				perpname2 = "wot";
				medical = "None";

				if ( Lang13.Bool( this.wear_id ) ) {
					
					if ( this.wear_id is Obj_Item_Weapon_Card_Id ) {
						perpname2 = this.wear_id.registered_name;
					} else if ( this.wear_id is Obj_Item_Device_Pda ) {
						tempPda = this.wear_id;
						perpname2 = tempPda.owner;
					}
				} else {
					perpname2 = this.name;
				}

				foreach (dynamic _r in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
					E2 = _r;
					

					if ( E2.fields["name"] == perpname2 ) {
						
						foreach (dynamic _q in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
							R2 = _q;
							

							if ( R2.fields["id"] == E2.fields["id"] ) {
								medical = R2.fields["p_stat"];
							}
						}
					}
				}
				msg += new Txt( "<span class = 'deptradio'>Physical status:</span> <a href='?src=" ).Ref( this ).str( ";medical=1'>[" ).item( medical ).str( "]</a>\n\n			<span class = 'deptradio'>Medical records:</span> <a href='?src=" ).Ref( this ).str( ";medrecord=`'>[View]</a> <a href='?src=" ).Ref( this ).str( ";medrecordadd=`'>[Add comment]</a>\n" ).ToString();
			}

			if ( Lang13.Bool( this.print_flavor_text() ) ) {
				msg += "" + this.print_flavor_text() + "\n";
			}
			msg += "*---------*</span>";

			if ( Lang13.Bool( this.pose ) ) {
				
				if ( String13.FindIgnoreCase( this.pose, ".", Lang13.Length( this.pose ), 0 ) == 0 && String13.FindIgnoreCase( this.pose, "!", Lang13.Length( this.pose ), 0 ) == 0 && String13.FindIgnoreCase( this.pose, "?", Lang13.Length( this.pose ), 0 ) == 0 ) {
					this.pose = String13.Concat( this.pose, "." );
				}
				msg += "\n" + t_He + " is " + this.pose;
			}
			GlobalFuncs.to_chat( user, msg );
			return null;
		}

		// Function from file: emote.dm
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			type = type ?? 1;

			string param = null;
			int t1 = 0;
			bool muzzled = false;
			Obj_Item_Weapon_Implant I = null;
			Spell_AoeTurf_Conjure_Forcewall_Mime spell = null;
			dynamic M = null;
			dynamic A = null;
			string input = null;
			dynamic input2 = null;
			dynamic M2 = null;
			dynamic A2 = null;
			dynamic wings = null;
			dynamic wings2 = null;
			dynamic M3 = null;
			dynamic A3 = null;
			dynamic M4 = null;
			dynamic A4 = null;
			dynamic M5 = null;
			dynamic A5 = null;
			string M6 = null;
			dynamic object_pointed = null;
			dynamic visible_object = null;
			int t12 = 0;
			dynamic M7 = null;
			dynamic A6 = null;
			dynamic M8 = null;
			dynamic A7 = null;
			dynamic M9 = null;
			dynamic A8 = null;
			ByTable screamSound = null;
			dynamic scream = null;
			Mob_Living M10 = null;
			ByTable farts = null;
			dynamic fart = null;
			dynamic location = null;
			int? aoe_range = null;
			bool wearing_suit = false;
			bool wearing_mask = false;
			Mob_Living M11 = null;
			Mob_Living V = null;
			dynamic B = null;
			dynamic F = null;
			dynamic M12 = null;
			dynamic O = null;
			dynamic O2 = null;

			param = null;

			if ( this.timestopped ) {
				return;
			}

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( String13.FindIgnoreCase( act, "s", -1, 0 ) != 0 && !( String13.FindIgnoreCase( act, "_", -2, 0 ) != 0 ) ) {
				act = String13.SubStr( act, 1, Lang13.Length( act ) );
			}
			muzzled = this.wear_mask is Obj_Item_Clothing_Mask_Muzzle;

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Implant) )) {
				I = _a;
				

				if ( I.implanted ) {
					I.trigger( act, this );
				}
			}

			if ( this.stat == 2 && act != "deathgasp" ) {
				return;
			}

			if ( act == "oath" && this.miming ) {
				this.miming = false;

				foreach (dynamic _b in Lang13.Enumerate( this.spell_list, typeof(Spell_AoeTurf_Conjure_Forcewall_Mime) )) {
					spell = _b;
					
					this.remove_spell( spell );
					GlobalFuncs.qdel( spell );
				}
				GlobalFuncs.message_admins( new Txt().item( this.name ).str( " (" ).item( this.ckey ).str( ") has broken their oath of silence. (<A HREF='?_src_=holder;adminplayerobservejump=" ).Ref( this ).str( "'>JMP</a>)" ).ToString() );
				GlobalFuncs.to_chat( this, "<span class = 'notice'>An unsettling feeling surrounds you...</span>" );
				return;
			}

			dynamic _o = act; // Was a switch-case, sorry for the mess.
			if ( _o=="airguitar" ) {
				
				if ( !this.restrained() ) {
					message = "<B>" + this + "</B> is strumming the air and headbanging like a safari chimp.";
					type = 1;
				}
			} else if ( _o=="blink" ) {
				message = "<B>" + this + "</B> blinks.";
				type = 1;
			} else if ( _o=="blink_r" ) {
				message = "<B>" + this + "</B> blinks rapidly.";
				type = 1;
			} else if ( _o=="bow" ) {
				
				if ( !Lang13.Bool( this.locked_to ) ) {
					M = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
							A = _c;
							

							if ( param == A.name ) {
								M = A;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> bows to " + param + ".";
					} else {
						message = "<B>" + this + "</B> bows.";
					}
				}
				type = 1;
			} else if ( _o=="custom" ) {
				input = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Choose an emote to display.", null, null, null, null, InputType.Str | InputType.Null ) ), 1, 1024 );

				if ( !Lang13.Bool( input ) ) {
					return;
				}
				input2 = Interface13.Input( "Is this a visible or hearable emote?", null, null, null, new ByTable(new object [] { "Visible", "Hearable" }), InputType.Any );

				if ( input2 == "Visible" ) {
					type = 1;
				} else if ( input2 == "Hearable" ) {
					
					if ( this.miming ) {
						return;
					}
					type = 2;
				} else {
					Interface13.Alert( "Unable to use this emote, must be either hearable or visible." );
					return;
				}
				this.custom_emote( type, message ); return;
			} else if ( _o=="me" ) {
				
				if ( this.silent != 0 ) {
					return;
				}

				if ( this.client != null ) {
					
					if ( ( this.client.prefs.muted & 1 ) != 0 ) {
						GlobalFuncs.to_chat( this, "<span class = 'warning'>You cannot send IC messages (muted).</span>" );
						return;
					}

					if ( this.client.handle_spam_prevention( message, 1 ) ) {
						return;
					}
				}

				if ( Lang13.Bool( this.stat ) ) {
					return;
				}

				if ( !Lang13.Bool( message ) ) {
					return;
				}
				this.custom_emote( type, message ); return;
			} else if ( _o=="salute" ) {
				
				if ( !Lang13.Bool( this.locked_to ) ) {
					M2 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
							A2 = _d;
							

							if ( param == A2.name ) {
								M2 = A2;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M2 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> salutes to " + param + ".";
					} else {
						message = "<B>" + this + "</b> salutes.";
					}
				}
				type = 1;
			} else if ( _o=="choke" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> clutches his throat desperately!";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> chokes!";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a strong noise.";
					type = 2;
				}
			} else if ( _o=="clap" ) {
				
				if ( !this.restrained() ) {
					message = "<B>" + this + "</B> claps.";
					type = 2;

					if ( this.miming ) {
						type = 1;
					}
				}
			} else if ( _o=="flap" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " wings." ).ToString();
					type = 2;

					if ( this.miming ) {
						type = 1;
					}

					if ( Lang13.Bool( this.wear_suit ) && this.wear_suit is Obj_Item_Clothing_Suit_Clownpiece ) {
						wings = this.wear_suit;
						wings.icon_state = "clownpiece-fly";
						this.update_inv_wear_suit( true );
						Task13.Schedule( 5, (Task13.Closure)(() => {
							wings.icon_state = Lang13.Initial( wings, "icon_state" );
							this.update_inv_wear_suit( true );
							return;
						}));
					}
				}
			} else if ( _o=="aflap" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " wings ANGRILY!" ).ToString();
					type = 2;

					if ( this.miming ) {
						type = 1;
					}

					if ( Lang13.Bool( this.wear_suit ) && this.wear_suit is Obj_Item_Clothing_Suit_Clownpiece ) {
						wings2 = this.wear_suit;
						wings2.icon_state = "clownpiece-fly";
						this.update_inv_wear_suit( true );
						Task13.Schedule( 5, (Task13.Closure)(() => {
							wings2.icon_state = Lang13.Initial( wings2, "icon_state" );
							this.update_inv_wear_suit( true );
							return;
						}));
					}
				}
			} else if ( _o=="drool" ) {
				message = "<B>" + this + "</B> drools.";
				type = 1;
			} else if ( _o=="eyebrow" ) {
				message = "<B>" + this + "</B> raises an eyebrow.";
				type = 1;
			} else if ( _o=="chuckle" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> appears to chuckle.";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> chuckles.";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a noise.";
					type = 2;
				}
			} else if ( _o=="twitch" ) {
				message = "<B>" + this + "</B> twitches violently.";
				type = 1;
			} else if ( _o=="twitch_s" ) {
				message = "<B>" + this + "</B> twitches.";
				type = 1;
			} else if ( _o=="faint" ) {
				message = "<B>" + this + "</B> faints.";

				if ( this.sleeping != 0 ) {
					return;
				}
				this.sleeping += 10;
				type = 1;
			} else if ( _o=="cough" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> appears to cough!";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> coughs!";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a strong noise.";
					type = 2;
				}
			} else if ( _o=="frown" ) {
				message = "<B>" + this + "</B> frowns.";
				type = 1;
			} else if ( _o=="nod" ) {
				message = "<B>" + this + "</B> nods.";
				type = 1;
			} else if ( _o=="blush" ) {
				message = "<B>" + this + "</B> blushes.";
				type = 1;
			} else if ( _o=="wave" ) {
				message = "<B>" + this + "</B> waves.";
				type = 1;
			} else if ( _o=="gasp" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> appears to be gasping!";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> gasps!";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a weak noise.";
					type = 2;
				}
			} else if ( _o=="deathgasp" ) {
				
				if ( this.mutations.Contains( 207 ) ) {
					this.emote( "fart" );
					message = "<B>" + this + "</B> has left the building...";
				}

				if ( this.mutations.Contains( 300 ) ) {
					message = "<B>" + this + "</B> whispers with his final breath, <i>'i told u i was hardcore..'</i>";
				} else {
					message = new Txt( "<B>" ).item( this ).str( "</B> seizes up and falls limp, " ).his_her_its_their().str( " eyes dead and lifeless..." ).ToString();
				}
				type = 1;
			} else if ( _o=="giggle" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> giggles silently!";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> giggles.";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a noise.";
					type = 2;
				}
			} else if ( _o=="glare" ) {
				M3 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A3 = _e;
						

						if ( param == A3.name ) {
							M3 = A3;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M3 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> glares at " + param + ".";
				} else {
					message = "<B>" + this + "</B> glares.";
				}
			} else if ( _o=="stare" ) {
				M4 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _f in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A4 = _f;
						

						if ( param == A4.name ) {
							M4 = A4;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M4 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> stares at " + param + ".";
				} else {
					message = "<B>" + this + "</B> stares.";
				}
			} else if ( _o=="look" ) {
				M5 = null;

				if ( Lang13.Bool( param ) ) {
					
					foreach (dynamic _g in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
						A5 = _g;
						

						if ( param == A5.name ) {
							M5 = A5;
							break;
						}
					}
				}

				if ( !Lang13.Bool( M5 ) ) {
					param = null;
				}

				if ( Lang13.Bool( param ) ) {
					message = "<B>" + this + "</B> looks at " + param + ".";
				} else {
					message = "<B>" + this + "</B> looks.";
				}
				type = 1;
			} else if ( _o=="grin" ) {
				message = "<B>" + this + "</B> grins.";
				type = 1;
			} else if ( _o=="cry" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> cries.";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> cries.";
					type = 2;
				} else {
					message = new Txt( "<B>" ).item( this ).str( "</B> makes a weak noise. " ).He_She_It_They().str( " frowns." ).ToString();
					type = 2;
				}
			} else if ( _o=="sigh" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> sighs.";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> sighs.";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a weak noise.";
					type = 2;
				}
			} else if ( _o=="laugh" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> acts out a laugh.";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> laughs.";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a noise.";
					type = 2;
				}
			} else if ( _o=="mumble" ) {
				message = "<B>" + this + "</B> mumbles!";
				type = 2;

				if ( this.miming ) {
					type = 1;
				}
			} else if ( _o=="grumble" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> grumbles!";
					type = 1;
				}

				if ( !muzzled ) {
					message = "<B>" + this + "</B> grumbles!";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a noise.";
					type = 2;
				}
			} else if ( _o=="groan" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> appears to groan!";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> groans!";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a loud noise.";
					type = 2;
				}
			} else if ( _o=="moan" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> appears to moan!";
					type = 1;
				} else {
					message = "<B>" + this + "</B> moans!";
					type = 2;
				}
			} else if ( _o=="johnny" ) {
				M6 = null;

				if ( Lang13.Bool( param ) ) {
					M6 = param;
				}

				if ( !Lang13.Bool( M6 ) ) {
					param = null;
				} else if ( this.miming ) {
					message = "<B>" + this + "</B> takes a drag from a cigarette and blows \"" + M6 + "\" out in smoke.";
					type = 1;
				} else {
					message = "<B>" + this + "</B> says, \"" + M6 + ", please. He had a family.\" " + this.name + " takes a drag from a cigarette and blows his name out in smoke.";
					type = 2;
				}
			} else if ( _o=="point" ) {
				
				if ( !this.restrained() ) {
					object_pointed = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _h in Lang13.Enumerate( Map13.FetchInView( null, null ) )) { // THERE IS A SMALL CHANCE THIS LOOP IS BROKEN! TYPECODE = 35
							visible_object = _h;
							

							if ( param == visible_object.name ) {
								object_pointed = visible_object;
								break;
							}
						}
					}

					if ( object_pointed == null ) {
						message = "<B>" + this + "</B> points.";
					} else {
						this.__CallVerb("Point To", object_pointed );
					}
				}
				type = 1;
			} else if ( _o=="raise" ) {
				
				if ( !this.restrained() ) {
					message = "<B>" + this + "</B> raises a hand.";
				}
				type = 1;
			} else if ( _o=="shake" ) {
				message = new Txt( "<B>" ).item( this ).str( "</B> shakes " ).his_her_its_their().str( " head." ).ToString();
				type = 1;
			} else if ( _o=="shrug" ) {
				message = "<B>" + this + "</B> shrugs.";
				type = 1;
			} else if ( _o=="signal" ) {
				
				if ( !this.restrained() ) {
					t12 = Num13.Floor( String13.ParseNumber( param ) ??0 );

					if ( Lang13.Bool( Lang13.IsNumber( t12 ) ) ) {
						
						if ( t12 <= 5 && ( !Lang13.Bool( this.r_hand ) || !Lang13.Bool( this.l_hand ) ) ) {
							message = new Txt( "<B>" ).item( this ).str( "</B> raises " ).item( t12 ).str( " finger" ).s().str( "." ).ToString();
						} else if ( t12 <= 10 && !Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.l_hand ) ) {
							message = new Txt( "<B>" ).item( this ).str( "</B> raises " ).item( t12 ).str( " finger" ).s().str( "." ).ToString();
						}
					}
				}
				type = 1;
			} else if ( _o=="smile" ) {
				message = "<B>" + this + "</B> smiles.";
				type = 1;
			} else if ( _o=="shiver" ) {
				message = "<B>" + this + "</B> shivers.";
				type = 2;

				if ( this.miming ) {
					type = 1;
				}
			} else if ( _o=="pale" ) {
				message = "<B>" + this + "</B> goes pale for a second.";
				type = 1;
			} else if ( _o=="tremble" ) {
				message = "<B>" + this + "</B> trembles in fear!";
				type = 1;
			} else if ( _o=="sneeze" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> sneezes.";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> sneezes.";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a strange noise.";
					type = 2;
				}
			} else if ( _o=="sniff" ) {
				message = "<B>" + this + "</B> sniffs.";
				type = 2;

				if ( this.miming ) {
					type = 1;
				}
			} else if ( _o=="snore" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> sleeps soundly.";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> snores.";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a noise.";
					type = 2;
				}
			} else if ( _o=="whimper" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> appears hurt.";
					type = 1;
				} else if ( !muzzled ) {
					message = "<B>" + this + "</B> whimpers.";
					type = 2;
				} else {
					message = "<B>" + this + "</B> makes a weak noise.";
					type = 2;
				}
			} else if ( _o=="wink" ) {
				message = "<B>" + this + "</B> winks.";
				type = 1;
			} else if ( _o=="spin" ) {
				message = "<B>" + this + "</B> spins out of control!";
				type = 1;
			} else if ( _o=="yawn" ) {
				
				if ( !muzzled ) {
					message = "<B>" + this + "</B> yawns.";
					type = 2;

					if ( this.miming ) {
						type = 1;
					}
				}
			} else if ( _o=="collapse" ) {
				this.Paralyse( 2 );
				message = "<B>" + this + "</B> collapses!";
				type = 2;

				if ( this.miming ) {
					type = 1;
				}
			} else if ( _o=="hug" ) {
				type = 1;

				if ( !this.restrained() ) {
					M7 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _i in Lang13.Enumerate( Map13.FetchInView( null, 1 ) )) {
							A6 = _i;
							

							if ( param == A6.name ) {
								M7 = A6;
								break;
							}
						}
					}

					if ( M7 == this ) {
						M7 = null;
					}

					if ( Lang13.Bool( M7 ) ) {
						message = "<B>" + this + "</B> hugs " + M7 + ".";
					} else {
						message = new Txt( "<B>" ).item( this ).str( "</B> hugs " ).himself_herself_itself_themself().str( "." ).ToString();
					}
				}
			} else if ( _o=="handshake" ) {
				type = 1;

				if ( !this.restrained() && !Lang13.Bool( this.r_hand ) ) {
					M8 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _j in Lang13.Enumerate( Map13.FetchInView( null, 1 ) )) {
							A7 = _j;
							

							if ( param == A7.name ) {
								M8 = A7;
								break;
							}
						}
					}

					if ( M8 == this ) {
						M8 = null;
					}

					if ( Lang13.Bool( M8 ) ) {
						
						if ( M8.canmove && !Lang13.Bool( M8.r_hand ) && !((Mob)M8).restrained() ) {
							message = "<B>" + this + "</B> shakes hands with " + M8 + ".";
						} else {
							message = new Txt( "<B>" ).item( this ).str( "</B> holds out " ).his_her_its_their().str( " hand to " ).item( M8 ).str( "." ).ToString();
						}
					}
				}
			} else if ( _o=="dap" ) {
				type = 1;

				if ( !this.restrained() ) {
					M9 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _k in Lang13.Enumerate( Map13.FetchInView( null, 1 ) )) {
							A8 = _k;
							

							if ( param == A8.name ) {
								M9 = A8;
								break;
							}
						}
					}

					if ( Lang13.Bool( M9 ) ) {
						message = "<B>" + this + "</B> gives daps to " + M9 + ".";
					} else {
						message = new Txt( "<B>" ).item( this ).str( "</B> sadly can't find anybody to give daps to, and daps " ).himself_herself_itself_themself().str( ". Shameful." ).ToString();
					}
				}
			} else if ( _o=="scream" ) {
				
				if ( this.miming ) {
					message = "<B>" + this + "</B> acts out a scream!";
					type = 1;
				} else if ( !Lang13.Bool( this.stat ) ) {
					
					if ( !muzzled ) {
						
						if ( auto == true ) {
							
							if ( Game13.time - this.lastScream >= 30 ) {
								message = "<B>" + this + "</B> screams in agony!";
								screamSound = new ByTable(new object [] { 
									"sound/misc/malescream1.ogg", 
									"sound/misc/malescream2.ogg", 
									"sound/misc/malescream3.ogg", 
									"sound/misc/malescream4.ogg", 
									"sound/misc/malescream5.ogg", 
									"sound/misc/wilhelm.ogg", 
									"sound/misc/goofy.ogg"
								 });

								if ( this.gender == GlobalVars.FEMALE ) {
									screamSound = new ByTable(new object [] { "sound/misc/femalescream1.ogg", "sound/misc/femalescream2.ogg", "sound/misc/femalescream3.ogg", "sound/misc/femalescream4.ogg", "sound/misc/femalescream5.ogg" });
								}
								scream = Rand13.PickFromTable( screamSound );
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), scream, 50, 0 );
								type = 2;
								this.lastScream = Game13.time;
							}
						} else {
							message = "<B>" + this + "</B> screams!";
							type = 2;
						}
					} else {
						message = "<B>" + this + "</B> makes a very loud noise.";
						type = 2;
					}
				}
			} else if ( _o=="fart" ) {
				
				if ( this.op_stage.butt != 4 ) {
					
					if ( Game13.time - this.lastFart >= 400 ) {
						
						foreach (dynamic _l in Lang13.Enumerate( Map13.FetchInView( null, 0 ), typeof(Mob_Living) )) {
							M10 = _l;
							

							if ( M10 != this && M10.loc == this.loc ) {
								
								if ( !this.miming ) {
									this.visible_message( "<span class = 'warning'><b>" + this + "</b> farts in <b>" + M10 + "</b>'s face!</span>" );
								} else {
									this.visible_message( "<span class = 'warning'><b>" + this + "</b> silently farts in <b>" + M10 + "</b>'s face!</span>" );
								}
							} else {
								continue;
							}
						}
						farts = new ByTable(new object [] { "farts", "passes wind", "toots", "farts " + Rand13.Pick(new object [] { "lightly", "tenderly", "softly", "with care" }) });

						if ( this.miming ) {
							farts = new ByTable(new object [] { "silently farts.", "acts out a fart.", "lets out a silent fart." });
						}
						fart = Rand13.PickFromTable( farts );

						if ( !this.miming ) {
							message = "<b>" + this + "</b> " + fart + ".";

							if ( this.mind != null && this.mind.assigned_role == "Clown" ) {
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), Rand13.Pick(new object [] { "sound/items/bikehorn.ogg", "sound/items/AirHorn.ogg" }), 50, 1 );
							} else {
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/misc/fart.ogg", 50, 1 );
							}
						} else {
							message = "<b>" + this + "</b> " + fart;
						}
						type = 2;
						location = GlobalFuncs.get_turf( this );
						aoe_range = 2;

						if ( this.mutations.Contains( 205 ) ) {
							aoe_range += 3;
						}
						wearing_suit = false;
						wearing_mask = false;

						if ( Lang13.Bool( this.wear_suit ) && Lang13.Bool( this.wear_suit.body_parts_covered & 4 ) ) {
							wearing_suit = true;

							if ( this.v_internal != null && Lang13.Bool( this.wear_mask ) && Lang13.Bool( this.wear_mask.flags & 8 ) ) {
								wearing_mask = true;
							}
						}

						if ( this.mutations.Contains( 201 ) ) {
							message = "";
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/superfart.ogg", 50, 1 );

							if ( wearing_suit ) {
								
								if ( !wearing_mask ) {
									GlobalFuncs.to_chat( this, "<span class = 'warning'>You gas yourself!</span>" );
									((Reagents)this.reagents).add_reagent( "space_drugs", Rand13.Int( 10, 50 ) );
								}
							} else {
								
								foreach (dynamic _m in Lang13.Enumerate( Map13.FetchInView( aoe_range, location ), typeof(Mob_Living) )) {
									M11 = _m;
									

									if ( M11.v_internal != null && Lang13.Bool( M11.wear_mask ) && Lang13.Bool( M11.wear_mask.flags & 8 ) ) {
										continue;
									}

									if ( !GlobalFuncs.airborne_can_reach( location, GlobalFuncs.get_turf( M11 ), aoe_range ) ) {
										continue;
									}

									if ( Lang13.Bool( M11.reagents ) ) {
										((Reagents)M11.reagents).add_reagent( "space_drugs", Rand13.Int( 1, 50 ) );
									}
								}
							}
						}

						if ( this.mutations.Contains( 205 ) ) {
							message = "";
							GlobalFuncs.playsound( location, "sound/effects/smoke.ogg", 50, 1, -3 );
							this.visible_message( "<span class = 'warning'><b>" + this.name + "</b> hunches down and grits their teeth!</span>" );

							if ( GlobalFuncs.do_after( Task13.User, Task13.User, 30 ) ) {
								this.visible_message( "<span class = 'warning'><b>" + this.name + "</b> unleashes a " + Rand13.Pick(new object [] { "tremendous", "gigantic", "colossal" }) + " fart!</span>", "<span class = 'warning'>You hear a " + Rand13.Pick(new object [] { "tremendous", "gigantic", "colossal" }) + " fart.</span>" );
								GlobalFuncs.playsound( location, "sound/effects/superfart.ogg", 50, 0 );

								if ( !wearing_suit ) {
									
									foreach (dynamic _n in Lang13.Enumerate( Map13.FetchInView( aoe_range, this ), typeof(Mob_Living) )) {
										V = _n;
										

										if ( !GlobalFuncs.airborne_can_reach( location, GlobalFuncs.get_turf( V ), aoe_range ) ) {
											continue;
										}
										GlobalFuncs.shake_camera( V, 10, 5 );

										if ( V == this ) {
											continue;
										}
										GlobalFuncs.to_chat( V, "<span class = 'danger'>You're sent flying!</span>" );
										V.Weaken( 5 );
										Map13.StepAway( V, location, 15 );
										Map13.StepAway( V, location, 15 );
										Map13.StepAway( V, location, 15 );
									}
								}
							} else {
								GlobalFuncs.to_chat( Task13.User, "<span class = 'notice'>You were interrupted and couldn't fart! Rude!</span>" );
							}
						}
						this.lastFart = Game13.time;
						B = Lang13.FindIn( typeof(Obj_Item_Weapon_Storage_Bible), this.loc );

						if ( Lang13.Bool( B ) ) {
							
							if ( Lang13.Bool( GlobalVars.ticker.mode.cult.Contains( this.mind ) ) ) {
								GlobalFuncs.to_chat( this, "<span class='sinister'>Nar-Sie shields you from " + B.deity_name + "'s wrath!</span>" );
							} else {
								
								if ( this.head is Obj_Item_Clothing_Head_Fedora ) {
									GlobalFuncs.to_chat( this, "<span class='notice'>You feel incredibly enlightened after farting on " + B + "!</span>" );
									F = this.head;
									F.__CallVerb("Tip Fedora" );
								} else {
									GlobalFuncs.to_chat( this, "<span class='danger'>You feel incredibly guilty for farting on " + B + "!</span>" );
								}

								if ( Rand13.PercentChance( 80 ) ) {
									Task13.Schedule( Rand13.Int( 10, 30 ), (Task13.Closure)(() => {
										
										if ( this != null && Lang13.Bool( B ) ) {
											this.show_message( "<span class='game say'><span class='name'>" + B.deity_name + "</span> says, \"Thou hast angered me, mortal!\"", 2 );
											Task13.Sleep( 10 );

											if ( this != null && Lang13.Bool( B ) ) {
												GlobalFuncs.to_chat( this, "<span class='danger'>You were disintegrated by " + B.deity_name + "'s bolt of lightning.</span>" );
												this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Farted on a bible and suffered " + B.deity_name + "'s wrath.</font>" );
												GlobalFuncs.explosion( GlobalFuncs.get_turf( this ), -1, -1, 1, 5 );
												this.dust();
											}
										}
										return;
									}));
								}
							}
						}
					} else {
						message = "<b>" + this + "</b> strains, and nothing happens.";
						type = 1;
					}
				} else {
					message = new Txt( "<b>" ).item( this ).str( "</b> lets out a " ).item( Rand13.Pick(new object [] { "disgusting", "revolting", "horrible", "strangled", "god awful" }) ).str( " noise out of " ).his_her_its_their().str( " mutilated asshole." ).ToString();
					type = 2;
				}
			} else if ( _o=="help" ) {
				GlobalFuncs.to_chat( this, @"blink, blink_r, blush, bow-(none)/mob, burp, choke, chuckle, clap, collapse, cough,
cry, custom, deathgasp, drool, eyebrow, frown, gasp, giggle, groan, grumble, handshake, hug-(none)/mob, glare-(none)/mob,
grin, laugh, look-(none)/mob, moan, mumble, nod, pale, point-atom, raise, salute, shake, shiver, shrug,
sigh, signal-#1-10, smile, sneeze, sniff, snore, stare-(none)/mob, tremble, twitch, twitch_s, whimper,
wink, yawn" );
			} else {
				GlobalFuncs.to_chat( this, "<span class = 'notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
			}

			if ( Lang13.Bool( message ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]EMOTE: " + ( "" + this.name + "/" + this.key + " (@" + this.x + "," + this.y + "," + this.z + "): " + message ) ) );

				foreach (dynamic _p in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
					M12 = _p;
					

					if ( !Lang13.Bool( M12.client ) || M12 is Mob_NewPlayer ) {
						continue;
					}

					if ( Convert.ToInt32( M12.stat ) == 2 && Lang13.Bool( M12.client ) && Lang13.Bool( M12.client.prefs.toggles & 128 ) && !Map13.FetchViewers( null, this ).Contains( M12 ) ) {
						M12.show_message( message );
					}
				}

				if ( this.on_emote is _Event ) {
					this.on_emote.Invoke( new ByTable().Set( "mob", this ).Set( "message", message ).Set( "m_type", type ) );
				}

				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					foreach (dynamic _q in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _q;
						
						O.show_message( message, type );
					}
				} else if ( ( ( type ??0) & 2 ) != 0 ) {
					
					foreach (dynamic _r in Lang13.Enumerate( Map13.FetchHearers( null, this.loc ) )) {
						O2 = _r;
						
						O2.show_message( message, type );
					}
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			dynamic B = null;
			dynamic H = null;

			
			if ( this.stat == 2 ) {
				return null;
			}

			if ( this.healths != null ) {
				((dynamic)this.healths).icon_state = "health7";
			}
			this.stat = 2;
			this.dizziness = 0;
			this.jitteriness = 0;
			B = this.has_brain_worms();

			if ( Lang13.Bool( B ) && B.controlling ) {
				GlobalFuncs.to_chat( this, "<span class='danger'>Your host has died.  You reluctantly release control.</span>" );
				GlobalFuncs.to_chat( B.host_brain, "<span class='danger'>Just before your body passes, you feel a brief return of sensation.  You are now in control...  And dead.</span>" );
				this.do_release_control( false );
			}

			if ( Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode is GameMode_Heist ) {
				GlobalVars.vox_kills++;
			}

			if ( this.LAssailant is Mob_Living_Carbon_Human ) {
				H = this.LAssailant;

				if ( Lang13.Bool( H.mind ) ) {
					H.mind.kills += "" + this.name + " (" + this.ckey + ")";
				}
			}

			if ( !( gibbed == true ) ) {
				this.emote( "deathgasp" );
				this.update_canmove();

				if ( this.client != null ) {
					((dynamic)this.blind).layer = 0;
				}
			}
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );

				if ( !( this.suiciding == true ) ) {
					GlobalVars.score["deadcrew"]++;
				}
			}

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				GlobalFuncs.sql_report_death( this );
				((GameMode)GlobalVars.ticker.mode).check_win();
			}
			return base.death( gibbed );
		}

		// Function from file: death.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.mind != null && Lang13.Bool( this.species ) && this.species.name == "Manifested" && Lang13.Bool( GlobalVars.ticker.mode.cult.Contains( this.mind ) ) ) {
				((GameMode)GlobalVars.ticker.mode).update_cult_icons_removed( this.mind );
				GlobalVars.ticker.mode.cult -= this.mind;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: death.dm
		public override void dust(  ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.dropBorers( true );

			if ( this is Mob_Living_Carbon_Human_Manifested ) {
				GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "dust-hm", 15 );
			} else {
				GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "dust-h", 15 );
			}
			new Obj_Effect_Decal_Remains_Human( this.loc );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			Organ_External E = null;

			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				E = _a;
				

				if ( E is Organ_External_Chest || E is Organ_External_Groin ) {
					continue;
				}

				if ( Rand13.PercentChance( 100 - E.get_damage() ) ) {
					E.droplimb( 1, true );
				}
			}
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "gibbed-h", 15 );
			GlobalFuncs.hgibs( this.loc, this.viruses, this.dna, this.species.flesh_color, this.species.blood_color );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: handle_hypothermia.dm
		public override int undergoing_hypothermia(  ) {
			int _default = 0;

			_default = base.undergoing_hypothermia();

			if ( _default != 0 ) {
				
				if ( Lang13.Bool( this.species ) && !this.species.can_be_hypothermic ) {
					return 0;
				} else {
					return _default;
				}
			}
			return _default;
		}

		// Function from file: transform_procs.dm
		public override dynamic Animalize(  ) {
			dynamic mobtypes = null;
			dynamic mobpath = null;
			Obj_Item W = null;
			dynamic t = null;
			dynamic new_mob = null;

			mobtypes = Lang13.GetTypes( typeof(Mob_Living_SimpleAnimal) );
			mobpath = Interface13.Input( "Which type of mob should " + this + " turn into?", "Choose a type", null, null, mobtypes, InputType.Any );

			if ( !this.safe_animal( mobpath ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Sorry but this mob type is currently unavailable.</span>" );
				return null;
			}

			if ( this.monkeyizing ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.drop_from_inventory( W );
			}
			this.dropBorers();
			this.regenerate_icons();
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.delayNextAttack( 50 );

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			new_mob = Lang13.Call( mobpath, GlobalFuncs.get_turf( this ) );
			new_mob.key = this.key;
			new_mob.a_intent = "hurt";
			GlobalFuncs.to_chat( new_mob, "You suddenly feel more... animalistic." );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return new_mob;
		}

		// Function from file: transform_procs.dm
		public override Mob_Living_Silicon_Ai AIize(  ) {
			dynamic t = null;

			
			if ( this.monkeyizing ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.organs )) {
				t = _a;
				
				GlobalFuncs.qdel( t );
			}
			return base.AIize();
		}

		// Function from file: wizard.dm
		public override bool wearing_wiz_garb(  ) {
			
			if ( !GlobalFuncs.is_wiz_garb( this.wear_suit ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>I don't feel strong enough without my robe.</span>" );
				return false;
			}

			if ( !GlobalFuncs.is_wiz_garb( this.shoes ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>I don't feel strong enough without my sandals.</span>" );
				return false;
			}

			if ( !GlobalFuncs.is_wiz_garb( this.head ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>I don't feel strong enough without my hat.</span>" );
				return false;
			}
			return true;
		}

		// Function from file: Plasma.dm
		public void suit_contamination(  ) {
			
			if ( Lang13.Bool( this.w_uniform ) ) {
				((Obj_Item)this.w_uniform).contaminate();
			}

			if ( Lang13.Bool( this.shoes ) ) {
				((Obj_Item)this.shoes).contaminate();
			}

			if ( Lang13.Bool( this.gloves ) ) {
				((Obj_Item)this.gloves).contaminate();
			}
			return;
		}

		// Function from file: Plasma.dm
		public bool pl_suit_protected(  ) {
			
			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_PLASMAGUARDONLY) ) ) ) {
					
					if ( Lang13.Bool( this.wear_suit.flags & 16384 ) ) {
						return true;
					}
				} else if ( GlobalFuncs.is_slot_hidden( this.wear_suit.body_parts_covered, 414 ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: Plasma.dm
		public bool pl_head_protected(  ) {
			
			if ( Lang13.Bool( this.head ) ) {
				
				if ( Lang13.Bool( GlobalVars.zas_settings.Get( typeof(ZASSetting_PLASMAGUARDONLY) ) ) ) {
					
					if ( Lang13.Bool( this.head.flags & 16384 ) ) {
						return true;
					}
				} else if ( this.check_body_part_coverage( 2048 ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: Plasma.dm
		public void burn_eyes(  ) {
			dynamic E = null;

			
			if ( !Lang13.Bool( this.species.has_organ["eyes"] ) ) {
				return;
			}
			E = this.internal_organs_by_name["eyes"];

			if ( Lang13.Bool( E ) ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Your eyes burn!</span>" );
				}
				E.damage += 2.5;
				this.eye_blurry = Num13.MinInt( Convert.ToInt32( this.eye_blurry + 1.5 ), 50 );

				if ( Rand13.PercentChance( Num13.MaxInt( 0, Convert.ToInt32( E.damage - 15 ) ) + 1 ) && !( this.eye_blind != 0 ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You are blinded!</span>" );
					this.eye_blind += 20;
				}
			}
			return;
		}

		// Function from file: MedicalSideEffects.dm
		public void handle_medical_side_effects(  ) {
			double strength_percent = 0;
			MedicalEffect M = null;

			
			if ( ((Reagents)this.reagents).has_reagent( "cryoxadone" ) || ( ((Reagents)this.reagents).get_reagent_amount( "bicaridine" ) ?1:0) >= 15 || ( ((Reagents)this.reagents).get_reagent_amount( "tricordrazine" ) ?1:0) >= 15 ) {
				this.add_side_effect( "Headache" );
			}

			if ( ( ((Reagents)this.reagents).get_reagent_amount( "kelotane" ) ?1:0) >= 30 || ( ((Reagents)this.reagents).get_reagent_amount( "dermaline" ) ?1:0) >= 15 ) {
				this.add_side_effect( "Bad Stomach" );
			}

			if ( ( ((Reagents)this.reagents).get_reagent_amount( "tramadol" ) ?1:0) >= 16 || ( ((Reagents)this.reagents).get_reagent_amount( "anti_toxin" ) ?1:0) >= 30 ) {
				this.add_side_effect( "Cramps" );
			}

			if ( ( ((Reagents)this.reagents).get_reagent_amount( "space_drugs" ) ?1:0) >= 10 ) {
				this.add_side_effect( "Itch" );
			}
			strength_percent = Math.Sin( this.life_tick / 2 );

			if ( strength_percent >= 0.4 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.side_effects, typeof(MedicalEffect) )) {
					M = _a;
					

					if ( M.cure( this ) || M.strength > 60 ) {
						this.side_effects.Remove( M );
						Lang13.Delete( M );
						M = null;
					} else {
						
						if ( this.life_tick % 45 == 0 ) {
							M.on_life( this, strength_percent * M.strength );
						}
						M.strength += 0.71;
					}
				}
			}
			return;
		}

		// Function from file: pain.dm
		public void handle_pain(  ) {
			int maxdam = 0;
			Organ_External damaged_organ = null;
			Organ_External E = null;
			int dam = 0;
			Organ_Internal I = null;
			dynamic parent = null;
			string toxDamageMessage = null;
			int toxMessageProb = 0;

			
			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 8 ) ) {
				return;
			}

			if ( ( this.stat ??0) >= 2 ) {
				return;
			}

			if ( ((Reagents)this.reagents).has_reagent( "tramadol" ) ) {
				return;
			}

			if ( ((Reagents)this.reagents).has_reagent( "oxycodone" ) ) {
				return;
			}

			if ( this.analgesic != 0 ) {
				return;
			}
			maxdam = 0;
			damaged_organ = null;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				E = _a;
				

				if ( E.amputated ) {
					continue;
				}

				if ( ( E.status & 1024 ) != 0 ) {
					continue;
				}
				dam = E.get_damage();

				if ( dam > maxdam && ( maxdam == 0 || Rand13.PercentChance( 70 ) ) ) {
					damaged_organ = E;
					maxdam = dam;
				}
			}

			if ( damaged_organ != null ) {
				this.f_pain( damaged_organ.display_name, maxdam, false );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.internal_organs, typeof(Organ_Internal) )) {
				I = _b;
				

				if ( I.damage > 2 ) {
					
					if ( Rand13.PercentChance( 2 ) ) {
						parent = this.get_organ( I.parent_organ );
						this.custom_pain( "You feel a sharp pain in your " + parent.display_name, true );
					}
				}
			}
			toxDamageMessage = null;
			toxMessageProb = 1;

			dynamic _c = this.getToxLoss(); // Was a switch-case, sorry for the mess.
			if ( 1<=_c&&_c<=5 ) {
				toxMessageProb = 1;
				toxDamageMessage = "Your body stings slightly.";
			} else if ( 6<=_c&&_c<=10 ) {
				toxMessageProb = 2;
				toxDamageMessage = "Your whole body hurts a little.";
			} else if ( 11<=_c&&_c<=15 ) {
				toxMessageProb = 2;
				toxDamageMessage = "Your whole body hurts.";
			} else if ( 15<=_c&&_c<=25 ) {
				toxMessageProb = 3;
				toxDamageMessage = "Your whole body hurts badly.";
			} else if ( 26<=_c&&_c<=Double.PositiveInfinity ) {
				toxMessageProb = 5;
				toxDamageMessage = "Your body aches all over, it's driving you mad.";
			}

			if ( Lang13.Bool( toxDamageMessage ) && Rand13.PercentChance( toxMessageProb ) ) {
				this.custom_pain( toxDamageMessage, Convert.ToDouble( this.getToxLoss() ) >= 15 );
			}
			return;
		}

		// Function from file: pain.dm
		public void custom_pain( string message = null, bool? flash_strength = null ) {
			string msg = null;

			
			if ( ( this.stat ??0) >= 1 ) {
				return;
			}

			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 8 ) ) {
				return;
			}

			if ( ((Reagents)this.reagents).has_reagent( "tramadol" ) ) {
				return;
			}

			if ( ((Reagents)this.reagents).has_reagent( "oxycodone" ) ) {
				return;
			}

			if ( this.analgesic != 0 ) {
				return;
			}
			msg = "<span class='danger'>" + message + "</span>";

			if ( ( flash_strength == true ?1:0) >= 1 ) {
				msg = "<span class='danger'><font size=3>" + message + "</font></span>";
			}

			if ( Lang13.Bool( msg ) && ( msg != this.last_pain_message || Game13.time >= this.next_pain_time ) ) {
				this.last_pain_message = msg;
				GlobalFuncs.to_chat( this, msg );
			}
			this.next_pain_time = Game13.time + 100;
			return;
		}

		// Function from file: organ.dm
		public void handle_organs(  ) {
			bool stand_broken = false;
			bool force_process = false;
			double damage_this_tick = 0;
			Organ_External Ex = null;
			Organ_Internal I = null;
			dynamic liver = null;
			dynamic kidney = null;
			Organ_External E = null;
			dynamic I2 = null;
			dynamic c_hand = null;
			bool canstand_l = false;
			bool canstand_r = false;
			int legispeg_l = 0;
			int legispeg_r = 0;
			bool hasleg_l = false;
			bool hasleg_r = false;
			bool hasarm_l = false;
			bool hasarm_r = false;
			Organ_External E2 = null;

			this.number_wounds = 0;
			stand_broken = false;
			force_process = false;
			damage_this_tick = this.getBruteLoss() + this.getFireLoss() + Convert.ToDouble( this.getToxLoss() );

			if ( damage_this_tick > this.last_dam ) {
				force_process = true;
			}
			this.last_dam = damage_this_tick;

			if ( force_process ) {
				this.bad_external_organs.len = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
					Ex = _a;
					
					this.bad_external_organs.Add( Ex );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.internal_organs, typeof(Organ_Internal) )) {
				I = _b;
				
				I.process();
			}

			if ( Lang13.Bool( this.species.has_organ["liver"] ) ) {
				liver = this.internal_organs_by_name["liver"];

				if ( !Lang13.Bool( liver ) || Lang13.Bool( liver.status & 1 ) ) {
					((Reagents)this.reagents).add_reagent( "toxin", Rand13.Int( 1, 3 ) );
				}
			}

			if ( Lang13.Bool( this.species.has_organ["kidneys"] ) ) {
				kidney = this.internal_organs_by_name["kidneys"];

				if ( !Lang13.Bool( kidney ) || Lang13.Bool( kidney.status & 1 ) ) {
					((Reagents)this.reagents).add_reagent( "toxin", Rand13.Int( 1, 3 ) );
				}
			}

			if ( !force_process && !( this.bad_external_organs.len != 0 ) ) {
				return;
			}

			foreach (dynamic _c in Lang13.Enumerate( this.bad_external_organs, typeof(Organ_External) )) {
				E = _c;
				

				if ( !( E != null ) ) {
					continue;
				}

				if ( !E.need_process() ) {
					this.bad_external_organs.Remove( E );
					continue;
				} else {
					E.process();
					this.number_wounds += E.number_wounds;

					if ( E.is_broken() && Lang13.Bool( E.internal_organs ) && Rand13.PercentChance( 15 ) ) {
						
						if ( !( this.lying == true ) && Game13.timeofday - this.l_move_time < 15 ) {
							I2 = Rand13.PickFromTable( E.internal_organs );
							this.custom_pain( "You feel broken bones moving in your " + E.display_name + "!", true );
							I2.take_damage( Rand13.Int( 3, 5 ) );
						}
					}

					if ( Lang13.Bool( ((dynamic)( E.is_broken() || E.is_malfunctioning() )).Contains( E.name ) ) ) {
						c_hand = null;

						if ( E.name == "l_hand" || E.name == "l_arm" ) {
							c_hand = this.l_hand;
						}

						if ( E.name == "r_hand" || E.name == "r_arm" ) {
							c_hand = this.r_hand;
						}
						E.process_grasp( c_hand, E.name );
					} else if ( Lang13.Bool( ((dynamic)!( this.lying == true )).Contains( E.name ) ) ) {
						
						if ( E.is_malfunctioning() || E.is_broken() ) {
							stand_broken = true;
						}
					}
				}
			}

			if ( stand_broken && !( this.paralysis != 0 ) && !( this.lying == true || this.resting != 0 ) && Rand13.PercentChance( 5 ) ) {
				
				if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 8 ) ) {
					this.emote( "scream", null, null, true );
				}
				this.emote( "collapse" );
				this.Paralyse( 10 );
			}
			canstand_l = true;
			canstand_r = true;
			legispeg_l = 0;
			legispeg_r = 0;
			hasleg_l = true;
			hasleg_r = true;
			hasarm_l = true;
			hasarm_r = true;
			E2 = null;
			E2 = this.organs_by_name["l_leg"];

			if ( !E2.is_usable() ) {
				canstand_l = false;
				hasleg_l = false;
			}
			legispeg_l = E2.is_peg();
			E2 = this.organs_by_name["r_leg"];

			if ( !E2.is_usable() ) {
				canstand_r = false;
				hasleg_r = false;
			}
			legispeg_r = E2.is_peg();
			E2 = this.organs_by_name["l_foot"];

			if ( !E2.is_usable() && !( legispeg_l != 0 ) ) {
				canstand_l = false;
			}
			E2 = this.organs_by_name["r_foot"];

			if ( !E2.is_usable() && !( legispeg_r != 0 ) ) {
				canstand_r = false;
			}
			E2 = this.organs_by_name["l_arm"];

			if ( !E2.is_usable() ) {
				hasarm_l = false;
			}
			E2 = this.organs_by_name["r_arm"];

			if ( !E2.is_usable() ) {
				hasarm_r = false;
			}
			this.can_stand = canstand_l && canstand_r;
			this.has_limbs = hasleg_l || hasleg_r || hasarm_l || hasarm_r;
			return;
		}

		// Function from file: organ.dm
		public bool can_use_hand( bool? this_hand = null ) {
			this_hand = this_hand ?? this.hand;

			Organ_External temp = null;

			
			if ( GlobalFuncs.hasorgans( this ) ) {
				temp = this.organs_by_name[( this_hand == true ? "l_hand" : "r_hand" )];

				if ( temp != null && !temp.is_usable() ) {
					return false;
				} else if ( !( temp != null ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: organ.dm
		public void handle_trace_chems(  ) {
			Reagent A = null;
			dynamic O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
				A = _a;
				
				O = Rand13.PickFromTable( this.organs );
				O.trace_chemicals[A.name] = 100;
			}
			return;
		}

		// Function from file: blood.dm
		public void drip( double amt = 0 ) {
			
			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 1 ) ) {
				return;
			}

			if ( !( amt != 0 ) ) {
				return;
			}
			this.vessel.remove_reagent( "blood", amt );
			GlobalFuncs.blood_splatter( this, this );
			GlobalVars.stat_collection.blood_spilled += amt;
			return;
		}

		// Function from file: blood.dm
		public void handle_blood(  ) {
			double blood_volume = 0;
			dynamic B = null;
			Reagent_Blood D = null;
			Organ_Internal heart = null;
			dynamic word = null;
			dynamic word2 = null;
			dynamic word3 = null;
			dynamic word4 = null;
			dynamic word5 = null;
			double blood_max = 0;
			Organ_External temp = null;
			Wound W = null;

			
			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 1 ) ) {
				return;
			}

			if ( this.stat != 2 && Convert.ToDouble( this.bodytemperature ) >= 170 ) {
				blood_volume = Num13.Floor( this.vessel.get_reagent_amount( "blood" ) ?1:0 );

				if ( blood_volume < GlobalVars.BLOOD_VOLUME_MAX && blood_volume != 0 ) {
					B = Lang13.FindIn( typeof(Reagent_Blood), this.vessel.reagent_list );

					if ( Lang13.Bool( B ) ) {
						
						if ( B.data["donor"] != this ) {
							
							foreach (dynamic _a in Lang13.Enumerate( this.vessel.reagent_list, typeof(Reagent_Blood) )) {
								D = _a;
								

								if ( D.data["donor"] == this ) {
									B = D;
									break;
								}
							}
						}
						B.volume += 0.1;

						if ( ((Reagents)this.reagents).has_reagent( "nutriment" ) ) {
							B.volume += 0.6;
							((Reagents)this.reagents).remove_reagent( "nutriment", 0.5 );
						}

						if ( ((Reagents)this.reagents).has_reagent( "iron" ) ) {
							B.volume += 1.2;
							((Reagents)this.reagents).remove_reagent( "iron", 0.5 );
						}
					}
				}

				if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.has_organ["heart"] ) ) {
					heart = this.internal_organs_by_name["heart"];

					if ( !( heart != null ) ) {
						blood_volume = 0;
					} else if ( heart.damage > 1 && heart.damage < heart.min_bruised_damage ) {
						blood_volume *= 0.8;
					} else if ( heart.damage >= heart.min_bruised_damage && heart.damage < heart.min_broken_damage ) {
						blood_volume *= 0.6;
					}
				}
				this.vessel.update_total();

				dynamic _b = blood_volume; // Was a switch-case, sorry for the mess.
				if ( 501<=_b&&_b<=10000 ) {
					
					if ( this.pale ) {
						this.pale = false;
					}
				} else if ( 336<=_b&&_b<=501 ) {
					
					if ( !this.pale ) {
						this.pale = true;
						word = Rand13.Pick(new object [] { "dizzy", "woosey", "faint" });
						GlobalFuncs.to_chat( this, "<span class='danger'>You feel " + word + ".</span>" );
					}

					if ( blood_volume > GlobalVars.BLOOD_VOLUME_WARN ) {
						
						if ( Rand13.PercentChance( 1 ) ) {
							word2 = Rand13.Pick(new object [] { "dizzy", "woosey", "faint" });
							GlobalFuncs.to_chat( this, "<span class='danger'>You feel " + word2 + ".</span>" );
						}
					} else if ( Rand13.PercentChance( 3 ) ) {
						word3 = Rand13.Pick(new object [] { "dizzy", "woosey", "faint" });
						GlobalFuncs.to_chat( this, "<span class='danger'>You very " + word3 + ".</span>" );
					}

					if ( Convert.ToDouble( this.oxyloss ) < 20 ) {
						this.oxyloss += 2;
					}
				} else if ( 224<=_b&&_b<=336 ) {
					
					if ( !this.pale ) {
						this.pale = true;
					}
					this.eye_blurry = Num13.MaxInt( Convert.ToInt32( this.eye_blurry ), 2 );

					if ( Convert.ToDouble( this.oxyloss ) < 40 ) {
						this.oxyloss += 3;
					}
					this.oxyloss += 3;

					if ( Rand13.PercentChance( 15 ) ) {
						this.Paralyse( 1 );
						word4 = Rand13.Pick(new object [] { "dizzy", "woosey", "faint" });
						GlobalFuncs.to_chat( this, "<span class='danger'>You feel extremely " + word4 + ".</span>" );
					}
				} else if ( 122<=_b&&_b<=224 ) {
					
					if ( !this.pale ) {
						this.pale = true;
					}
					this.eye_blurry = Num13.MaxInt( Convert.ToInt32( this.eye_blurry ), 4 );

					if ( Convert.ToDouble( this.oxyloss ) < 60 ) {
						this.oxyloss += 5;
					}
					this.oxyloss += 5;
					this.toxloss += 1;

					if ( Rand13.PercentChance( 15 ) ) {
						this.Paralyse( Rand13.Int( 1, 3 ) );
						word5 = Rand13.Pick(new object [] { "dizzy", "woosey", "faint" });
						GlobalFuncs.to_chat( this, "<span class='danger'>You feel deathly " + word5 + ".</span>" );
					}
				} else if ( 0<=_b&&_b<=122 ) {
					
					if ( !this.pale ) {
						this.pale = true;
					}
					this.oxyloss += 8;
					this.toxloss += 2;
					this.Paralyse( 5 );
				}
				blood_max = 0;

				foreach (dynamic _d in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
					temp = _d;
					

					if ( !( ( temp.status & 8 ) != 0 ) || ( temp.status & 4224 ) != 0 ) {
						continue;
					}

					foreach (dynamic _c in Lang13.Enumerate( temp.wounds, typeof(Wound) )) {
						W = _c;
						

						if ( W.bleeding() ) {
							blood_max += W.damage / 4;
						}
					}

					if ( ( temp.status & 64 ) != 0 && !( ( temp.status & 2 ) != 0 ) && !temp.amputated ) {
						blood_max += 20;
					}

					if ( temp.open != 0 ) {
						blood_max += 2;
					}
					blood_max = blood_max * 0.75;

					if ( this.lying == true ) {
						blood_max = blood_max * 061;
					}
				}
				this.drip( blood_max );
			}
			return;
		}

		// Function from file: blood.dm
		public void fixblood(  ) {
			Reagent_Blood B = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.vessel.reagent_list, typeof(Reagent_Blood) )) {
				B = _a;
				

				if ( B.id == "blood" ) {
					B.data = new ByTable()
						.Set( "donor", this )
						.Set( "viruses", null )
						.Set( "blood_DNA", this.dna.unique_enzymes )
						.Set( "blood_colour", this.species.blood_color )
						.Set( "blood_type", this.dna.b_type )
						.Set( "resistances", null )
						.Set( "trace_chem", null )
						.Set( "virus2", null )
						.Set( "antibodies", null )
					;
					B.color = B.data["blood_color"];
				}
			}
			return;
		}

		// Function from file: blood.dm
		public void make_blood(  ) {
			
			if ( this.vessel != null ) {
				return;
			}
			this.vessel = new Reagents( 600 );
			this.vessel.my_atom = this;

			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 1 ) ) {
				return;
			}
			this.vessel.add_reagent( "blood", 560 );
			Task13.Schedule( 1, (Task13.Closure)(() => {
				this.fixblood();
				return;
			}));
			return;
		}

		// Function from file: life_helpers.dm
		public bool has_reagent_in_blood( string reagent_name = null ) {
			
			if ( !Lang13.Bool( this.reagents ) ) {
				return false;
			}
			return ((Reagents)this.reagents).has_reagent( reagent_name );
		}

		// Function from file: life_helpers.dm
		public bool earprot(  ) {
			bool detect = false;

			detect = false;

			if ( Lang13.Bool( this.is_on_ears( typeof(Obj_Item_Clothing_Ears_Earmuffs) ) ) || Lang13.Bool( this.is_on_ears( typeof(Obj_Item_Device_Radio_Headset_HeadsetEarmuffs) ) ) ) {
				detect = true;
			}
			return detect;
		}

		// Function from file: life_helpers.dm
		public dynamic randorgan(  ) {
			dynamic randorgan = null;

			randorgan = Rand13.Pick(new object [] { "head", "chest", "l_arm", "r_arm", "l_hand", "r_hand", "groin", "l_leg", "r_leg", "l_foot", "r_foot" });
			return randorgan;
		}

		// Function from file: life_helpers.dm
		public int get_covered_bodyparts(  ) {
			int covered = 0;

			covered = 0;

			if ( Lang13.Bool( this.head ) ) {
				covered |= Convert.ToInt32( this.head.body_parts_covered );
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				covered |= Convert.ToInt32( this.wear_suit.body_parts_covered );
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				covered |= Convert.ToInt32( this.w_uniform.body_parts_covered );
			}

			if ( Lang13.Bool( this.shoes ) ) {
				covered |= Convert.ToInt32( this.shoes.body_parts_covered );
			}

			if ( Lang13.Bool( this.gloves ) ) {
				covered |= Convert.ToInt32( this.gloves.body_parts_covered );
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				covered |= Convert.ToInt32( this.wear_mask.body_parts_covered );
			}
			return covered;
		}

		// Function from file: handle_virus_updates.dm
		public bool handle_virus_updates(  ) {
			Disease D = null;
			dynamic ID = null;
			dynamic V = null;
			dynamic ID2 = null;
			Disease2_Disease V2 = null;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( Convert.ToDouble( this.bodytemperature ) > 406 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
					D = _a;
					
					D.f_cure();
				}

				foreach (dynamic _b in Lang13.Enumerate( this.virus2 )) {
					ID = _b;
					
					V = this.virus2[ID];
					V.cure( this );
				}
			}
			this.findAirborneVirii();

			foreach (dynamic _c in Lang13.Enumerate( this.virus2 )) {
				ID2 = _c;
				
				V2 = this.virus2[ID2];

				if ( V2 == null ) {
					Task13.Crash( "virus2 nulled before calling activate()" );
				} else {
					V2.activate( this );
				}

				if ( !( V2 != null ) ) {
					continue;
				}

				if ( ( ((int)( V2.antigen ??0 )) & ((int)( this.antibodies ??0 )) ) != 0 ) {
					V2.dead = true;
				}
			}
			return false;
		}

		// Function from file: handle_stomach.dm
		public void handle_stomach(  ) {
			Mob_Living M = null;
			ByTable hunger_phrases = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( this.stomach_contents, typeof(Mob_Living) )) {
					M = _a;
					

					if ( M.loc != this ) {
						this.stomach_contents.Remove( M );
						continue;
					}

					if ( M is Mob_Living_Carbon && this.stat != 2 ) {
						
						if ( M.stat == 2 ) {
							M.death( true );
							this.stomach_contents.Remove( M );
							GlobalFuncs.qdel( M );
							M = null;
							continue;
						}

						if ( GlobalVars.air_master.current_cycle % 3 == 1 ) {
							
							if ( !( ( M.status_flags & 4096 ) != 0 ) ) {
								M.adjustBruteLoss( 5 );
							}
							this.nutrition += 10;
						}
					}
				}
				return;
			}));

			if ( !GlobalVars.hardcore_mode ) {
				return;
			}

			if ( !( Lang13.Bool( this.ckey ) && this.client != null ) ) {
				return;
			}

			if ( this.isDead() ) {
				return;
			}

			if ( this.nutrition < 100 ) {
				hunger_phrases = new ByTable(new object [] { 
					"You feel weak and malnourished. You must find something to eat now!", 
					"You haven't eaten in ages, and your body feels weak! It's time to eat something.", 
					"You can barely remember the last time you had a proper, nutritional meal. Your body will shut down soon if you don't eat something!", 
					"Your body is running out of essential nutrients! You have to eat something soon.", 
					"If you don't eat something very soon, you're going to starve to death."
				 });

				dynamic _b = this.nutrition; // Was a switch-case, sorry for the mess.
				if ( 45<=_b&&_b<=60 ) {
					
					if ( this.sleeping != 0 ) {
						return;
					}

					if ( Rand13.PercentChance( 2 ) ) {
						GlobalFuncs.to_chat( this, "<span class='notice'>" + Rand13.Pick(new object [] { "You're very hungry.", "You really could use a meal right now." }) + "</span>" );
					}
				} else if ( 20<=_b&&_b<=45 ) {
					
					if ( this.sleeping != 0 ) {
						return;
					}

					if ( Rand13.PercentChance( 3 ) ) {
						this.adjustOxyLoss( Rand13.Int( 1, 10 ) );
						GlobalFuncs.to_chat( this, "<span class='danger'>" + Rand13.PickFromTable( hunger_phrases ) + "</span>" );
					} else if ( Rand13.PercentChance( 5 ) ) {
						this.eye_blurry += 10;
						this.Weaken( 10 );
						this.adjustOxyLoss( Rand13.Int( 1, 15 ) );
						GlobalFuncs.to_chat( this, "<span class='danger'>You're starving! The lack of strength makes you black out for a few moments...</span>" );
					}
				} else if ( 5<=_b&&_b<=20 ) {
					
					if ( this.sleeping != 0 ) {
						return;
					}

					if ( Rand13.PercentChance( 5 ) ) {
						this.adjustOxyLoss( Rand13.Int( 1, 20 ) );
						GlobalFuncs.to_chat( this, "<span class='danger'>You're starving. You feel your life force slowly leaving your body...</span>" );
						this.eye_blurry += 20;

						if ( this.weakened < 1 ) {
							this.Weaken( 20 );
						}
					} else if ( this.paralysis < 1 && Rand13.PercentChance( 5 ) ) {
						this.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " starts having a seizure!</span>" ).ToString(), "<span class='warning'>You have a seizure!</span>" );
						this.Paralyse( 5 );
						this.Jitter( 500 );
						this.adjustOxyLoss( Rand13.Int( 1, 25 ) );
						this.eye_blurry += 20;
					}
				} else if ( Double.NegativeInfinity<=_b&&_b<=5 ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>You are dying from starvation!</span>" );
					this.adjustToxLoss( 2.5 );
					this.adjustOxyLoss( 2.5 );
					this.adjustBrainLoss( 2.5 );

					if ( Rand13.PercentChance( 10 ) ) {
						this.Weaken( 15 );
					}
				}
			}
			return;
		}

		// Function from file: handle_statis_bag.dm
		public void handle_stasis_bag(  ) {
			
			if ( this.in_stasis ) {
				this.adjustBrainLoss( 0.1 );
				this.adjustCloneLoss( 0.1 );
			}
			return;
		}

		// Function from file: handle_regular_status_updates.dm
		public bool handle_regular_status_updates(  ) {
			int sober_str = 0;
			Ent_Static a = null;
			dynamic O = null;
			bool wasdizzy = false;
			Client C = null;
			double pixel_x_diff = 0;
			double pixel_y_diff = 0;
			double? temp = null;
			int saved_dizz = 0;
			Mob_Living_Carbon_Human oldsrc = null;
			double amplitude = 0;
			int amplitude2 = 0;
			int pixel_x_diff2 = 0;
			int pixel_y_diff2 = 0;

			
			if ( this.stat == 2 ) {
				this.blinded = 1;
				this.silent = 0;
			} else {
				sober_str = ( !this.mutations.Contains( 203 ) ? 1 : 4 );
				this.updatehealth();

				if ( !this.in_stasis ) {
					this.handle_organs();
					this.handle_blood();
				}

				if ( Convert.ToDouble( this.health ) <= Convert.ToDouble( GlobalVars.config.health_threshold_dead ) || !this.has_brain() ) {
					this.death();
					this.blinded = 1;
					this.silent = 0;
					return true;
				}
				this.analgesic = Num13.MaxInt( 0, this.analgesic - 1 );

				if ( Convert.ToDouble( this.getOxyLoss() ) > 50 || Convert.ToDouble( GlobalVars.config.health_threshold_crit ) > Convert.ToDouble( this.health ) ) {
					this.Paralyse( 3 );
				}

				if ( this.hallucination != 0 ) {
					
					if ( this.hallucination >= 20 ) {
						
						if ( Rand13.PercentChance( 3 ) ) {
							GlobalFuncs.fake_attack( this );
						}

						if ( !this.handling_hal ) {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								this.handle_hallucinations();
								return;
							}));
						}
					}

					if ( this.hallucination <= 2 ) {
						this.hallucination = 0;
						this.halloss = 0;
					} else {
						this.hallucination -= 2;
					}
				} else {
					
					foreach (dynamic _a in Lang13.Enumerate( this.hallucinations, typeof(Ent_Static) )) {
						a = _a;
						
						GlobalFuncs.qdel( a );
					}

					if ( this.halloss > 100 ) {
						GlobalFuncs.to_chat( this, "<span class='notice'>You're in too much pain to keep going...</span>" );

						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewersExcludeThis( null, this ) )) {
							O = _b;
							
							O.show_message( "<B>" + this + "</B> slumps to the ground, too weak to continue fighting.", 1 );
						}
						this.Paralyse( 10 );
						this.setHalLoss( 99 );
					}
				}

				if ( this.paralysis != 0 ) {
					this.AdjustParalysis( -1 );
					this.blinded = 1;
					this.stat = 1;

					if ( this.halloss > 0 ) {
						this.adjustHalLoss( -3 );
					}
				} else if ( this.sleeping != 0 ) {
					this.handle_dreams();
					this.adjustHalLoss( -3 );
					this.sleeping = Num13.MaxInt( this.sleeping - 1, 0 );
					this.blinded = 1;
					this.stat = 1;

					if ( Rand13.PercentChance( 2 ) && Lang13.Bool( this.health ) && !this.hal_crit ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.emote( "snore" );
							return;
						}));
					}
				} else if ( this.resting != 0 ) {
					
					if ( this.halloss > 0 ) {
						this.adjustHalLoss( -3 );
					}
				} else if ( this.undergoing_hypothermia() >= 3 ) {
					this.blinded = 1;
					this.stat = 1;
				} else {
					this.stat = 0;

					if ( this.halloss > 0 ) {
						this.adjustHalLoss( -1 );
					}
				}

				if ( !Lang13.Bool( this.species.has_organ["eyes"] ) ) {
					this.eye_blind = 0;
					this.blinded = 0;
					this.eye_blurry = 0;
				} else if ( !this.has_eyes() ) {
					this.eye_blind = 1;
					this.blinded = 1;
					this.eye_blurry = 1;
				} else if ( ( this.sdisabilities & 1 ) != 0 ) {
					this.blinded = 1;
				} else if ( this.eye_blind != 0 ) {
					this.eye_blind = Num13.MaxInt( this.eye_blind - 1, 0 );
					this.blinded = 1;
				} else if ( this.glasses is Obj_Item_Clothing_Glasses_Sunglasses_Blindfold ) {
					this.eye_blurry = Num13.MaxInt( Convert.ToInt32( this.eye_blurry - 3 ), 0 );
					this.blinded = 1;
				} else if ( Lang13.Bool( this.eye_blurry ) ) {
					this.eye_blurry = Num13.MaxInt( Convert.ToInt32( this.eye_blurry - 1 ), 0 );
				}

				if ( ( this.sdisabilities & 4 ) != 0 ) {
					this.ear_deaf = Num13.MaxInt( this.ear_deaf, 1 );
				} else if ( this.earprot() ) {
					this.ear_damage = Num13.MaxInt( ((int)( this.ear_damage - 0.15 )), 0 );
					this.ear_deaf = Num13.MaxInt( this.ear_deaf, 1 );
				} else if ( this.ear_deaf != 0 ) {
					this.ear_deaf = Num13.MaxInt( this.ear_deaf - 1, 0 );
				} else if ( this.ear_damage < 25 ) {
					this.ear_damage = Num13.MaxInt( ((int)( this.ear_damage - 0.05 )), 0 );
				}

				if ( this.dizziness != 0 || this.undergoing_hypothermia() == 2 ) {
					wasdizzy = true;

					if ( this.undergoing_hypothermia() == 2 && !( this.dizziness != 0 ) && Rand13.PercentChance( 50 ) ) {
						this.dizziness = 120;
						wasdizzy = false;
					}
					C = this.client;
					pixel_x_diff = 0;
					pixel_y_diff = 0;
					temp = null;
					saved_dizz = this.dizziness;
					this.dizziness = Num13.MaxInt( this.dizziness - 1, 0 );

					if ( C != null ) {
						oldsrc = this;
						amplitude = this.dizziness * ( Math.Sin( this.dizziness * Game13.time * 0.031 ) + 1 ) / 70;
						Task13.Source = null;
						Task13.Schedule( 0, (Task13.Closure)(() => {
							
							if ( C != null ) {
								temp = amplitude * Math.Sin( saved_dizz * Game13.time * 0.008 );
								pixel_x_diff += temp ??0;
								C.pixel_x += ((int)( temp ??0 ));
								temp = amplitude * Math.Cos( saved_dizz * Game13.time * 0.008 );
								pixel_y_diff += temp ??0;
								C.pixel_y += ((int)( temp ??0 ));
								Task13.Sleep( 3 );

								if ( C != null ) {
									temp = amplitude * Math.Sin( saved_dizz * Game13.time * 0.008 );
									pixel_x_diff += temp ??0;
									C.pixel_x += ((int)( temp ??0 ));
									temp = amplitude * Math.Cos( saved_dizz * Game13.time * 0.008 );
									pixel_y_diff += temp ??0;
									C.pixel_y += ((int)( temp ??0 ));
								}
								Task13.Sleep( 3 );

								if ( C != null ) {
									C.pixel_x -= ((int)( pixel_x_diff ));
									C.pixel_y -= ((int)( pixel_y_diff ));
								}
							}
							return;
						}));
						Task13.Source = oldsrc;
					}

					if ( !wasdizzy ) {
						this.dizziness = 0;
					}
				}

				if ( this.jitteriness != 0 ) {
					amplitude2 = Num13.MinInt( 8, ((int)( this.jitteriness / 70 + 1 )) );
					pixel_x_diff2 = Rand13.Int( -amplitude2, amplitude2 );
					pixel_y_diff2 = Rand13.Int( -amplitude2, amplitude2 );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff2 ).Set( "pixel_y", this.pixel_y + pixel_y_diff2 ).Set( "time", 1 ).Set( "loop", -1 ) );
						Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff2 ).Set( "pixel_y", this.pixel_y - pixel_y_diff2 ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
						pixel_x_diff2 = Rand13.Int( -amplitude2, amplitude2 );
						pixel_y_diff2 = Rand13.Int( -amplitude2, amplitude2 );
						Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff2 ).Set( "pixel_y", this.pixel_y + pixel_y_diff2 ).Set( "time", 1 ).Set( "loop", -1 ) );
						Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff2 ).Set( "pixel_y", this.pixel_y - pixel_y_diff2 ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
						pixel_x_diff2 = Rand13.Int( -amplitude2, amplitude2 );
						pixel_y_diff2 = Rand13.Int( -amplitude2, amplitude2 );
						Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff2 ).Set( "pixel_y", this.pixel_y + pixel_y_diff2 ).Set( "time", 1 ).Set( "loop", -1 ) );
						Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - pixel_x_diff2 ).Set( "pixel_y", this.pixel_y - pixel_y_diff2 ).Set( "time", 1 ).Set( "loop", -1 ).Set( "easing", 4 ) );
						return;
					}));
				}

				if ( this.flying ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_y", this.pixel_y + 5 ).Set( "time", 10 ).Set( "loop", 1 ).Set( "easing", 1 ) );
						return;
					}));
					Task13.Schedule( 10, (Task13.Closure)(() => {
						
						if ( this.flying ) {
							Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_y", this.pixel_y - 5 ).Set( "time", 10 ).Set( "loop", 1 ).Set( "easing", 1 ) );
						}
						return;
					}));
				}

				if ( this.stunned != 0 ) {
					this.AdjustStunned( -1 );
				}

				if ( this.weakened != 0 ) {
					this.weakened = Num13.MaxInt( ((int)( this.weakened - 1 )), 0 );
				}

				if ( Lang13.Bool( this.stuttering ) ) {
					this.stuttering = Num13.MaxInt( Convert.ToInt32( this.stuttering - 1 ), 0 );
				}

				if ( this.slurring != 0 ) {
					this.slurring = Num13.MaxInt( ((int)( this.slurring - sober_str )), 0 );
				}

				if ( this.silent != 0 ) {
					this.silent = Num13.MaxInt( this.silent - 1, 0 );
				}

				if ( this.druggy != 0 ) {
					this.druggy = Num13.MaxInt( this.druggy - 1, 0 );

					if ( !( this.druggy != 0 ) ) {
						GlobalFuncs.to_chat( this, "It looks like you are back in Kansas." );
					}
				}
			}
			return true;
		}

		// Function from file: handle_regular_hud_updates.dm
		public bool handle_regular_hud_updates(  ) {
			double hurtdamage = 0;
			dynamic R = null;
			dynamic G = null;
			dynamic O = null;
			dynamic O2 = null;
			bool ruptured = false;
			int? i = null;
			Organ_External e = null;
			double total_damage = 0;
			dynamic G2 = null;
			bool masked = false;
			dynamic O3 = null;
			dynamic O4 = null;
			dynamic C = null;
			bool isRemoteObserve = false;
			dynamic temp_turf = null;

			
			if ( !( this.client != null ) ) {
				return false;
			}
			this.sight &= 65534;
			this.regular_hud_updates();
			this.client.screen.Remove( GlobalVars.global_hud.blurry, GlobalVars.global_hud.druggy, GlobalVars.global_hud.vimpaired, GlobalVars.global_hud.darkMask );
			this.update_action_buttons();

			if ( Lang13.Bool( ((dynamic)this.damageoverlay).overlays ) ) {
				((dynamic)this.damageoverlay).overlays = new ByTable();
			}

			if ( this.stat == 1 ) {
				
				if ( Convert.ToDouble( this.health ) <= 0 ) {
					
					dynamic _a = this.health; // Was a switch-case, sorry for the mess.
					if ( -20<=_a&&_a<=-10 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["1"];
					} else if ( -30<=_a&&_a<=-20 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["2"];
					} else if ( -40<=_a&&_a<=-30 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["3"];
					} else if ( -50<=_a&&_a<=-40 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["4"];
					} else if ( -60<=_a&&_a<=-50 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["5"];
					} else if ( -70<=_a&&_a<=-60 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["6"];
					} else if ( -80<=_a&&_a<=-70 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["7"];
					} else if ( -90<=_a&&_a<=-80 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["8"];
					} else if ( -95<=_a&&_a<=-90 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["9"];
					} else if ( Double.NegativeInfinity<=_a&&_a<=-95 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.unconscious_overlays["10"];
					}
				}
			} else {
				
				if ( Lang13.Bool( this.oxyloss ) ) {
					
					dynamic _b = this.oxyloss; // Was a switch-case, sorry for the mess.
					if ( 10<=_b&&_b<=20 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.oxyloss_overlays["1"];
					} else if ( 20<=_b&&_b<=25 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.oxyloss_overlays["2"];
					} else if ( 25<=_b&&_b<=30 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.oxyloss_overlays["3"];
					} else if ( 30<=_b&&_b<=35 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.oxyloss_overlays["4"];
					} else if ( 35<=_b&&_b<=40 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.oxyloss_overlays["5"];
					} else if ( 40<=_b&&_b<=45 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.oxyloss_overlays["6"];
					} else if ( 45<=_b&&_b<=Double.PositiveInfinity ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.oxyloss_overlays["7"];
					}
				}
				hurtdamage = this.getBruteLoss() + this.getFireLoss() + this.damageoverlaytemp;
				this.damageoverlaytemp = 0;

				if ( hurtdamage != 0 ) {
					
					dynamic _c = hurtdamage; // Was a switch-case, sorry for the mess.
					if ( 10<=_c&&_c<=25 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.brutefireloss_overlays["1"];
					} else if ( 25<=_c&&_c<=40 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.brutefireloss_overlays["2"];
					} else if ( 40<=_c&&_c<=55 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.brutefireloss_overlays["3"];
					} else if ( 55<=_c&&_c<=70 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.brutefireloss_overlays["4"];
					} else if ( 70<=_c&&_c<=85 ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.brutefireloss_overlays["5"];
					} else if ( 85<=_c&&_c<=Double.PositiveInfinity ) {
						((dynamic)this.damageoverlay).overlays += GlobalVars.brutefireloss_overlays["6"];
					}
				}
			}

			if ( this.stat == 2 ) {
				this.sight |= 28;
				this.see_in_dark = 8;

				if ( !( this.druggy != 0 ) ) {
					this.see_invisible = 45;
				}

				if ( this.healths != null ) {
					((dynamic)this.healths).icon_state = "health7";
				}
			} else {
				this.sight &= 65507;
				this.see_in_dark = this.species.darksight;
				this.see_invisible = ( this.see_in_dark > 2 ? 35 : 25 );

				if ( this.dna != null ) {
					
					switch ((string)( this.dna.mutantrace )) {
						case "slime":
							this.see_in_dark = 3;
							this.see_invisible = 35;
							break;
						case "shadow":
							this.see_in_dark = 8;
							this.see_invisible = 35;
							break;
					}
				}

				if ( this.mutations.Contains( 3 ) ) {
					this.sight |= 28;
					this.see_in_dark = 8;

					if ( !( this.druggy != 0 ) ) {
						this.see_invisible = 45;
					}
				}

				if ( this.seer ) {
					R = Lang13.FindIn( typeof(Obj_Effect_Rune), this.loc );

					if ( Lang13.Bool( R ) && R.word1 == GlobalVars.cultwords["see"] && R.word2 == GlobalVars.cultwords["hell"] && R.word3 == GlobalVars.cultwords["join"] ) {
						this.see_invisible = 60;
					} else {
						this.see_invisible = 25;
						this.seer = false;
					}
				}

				if ( Lang13.Bool( this.glasses ) ) {
					G = this.glasses;

					if ( G is Obj_Item_Clothing_Glasses ) {
						
						if ( Lang13.Bool( G.see_in_dark ) ) {
							this.see_in_dark = Convert.ToInt32( G.see_in_dark );
						}
						this.see_in_dark += G.darkness_view;

						if ( G.vision_flags != 0 ) {
							this.sight |= G.vision_flags;

							if ( !( this.druggy != 0 ) ) {
								this.see_invisible = 5;
							}
						}

						if ( Lang13.Bool( G.see_invisible ) ) {
							this.see_invisible = Convert.ToInt32( G.see_invisible );
						}
					}

					if ( this.glasses is Obj_Item_Clothing_Glasses_Sunglasses_Sechud ) {
						O = this.glasses;

						if ( Lang13.Bool( O.hud ) ) {
							((Obj_Item_Clothing_Glasses_Hud)O.hud).process_hud( this );
						}

						if ( !( this.druggy != 0 ) ) {
							this.see_invisible = 25;
						}
					} else if ( this.glasses is Obj_Item_Clothing_Glasses_Hud ) {
						O2 = this.glasses;
						((Obj_Item_Clothing_Glasses_Hud)O2).process_hud( this );

						if ( !( this.druggy != 0 ) ) {
							this.see_invisible = 25;
						}
					}
				} else if ( !this.seer ) {
					this.see_invisible = 25;
				}

				if ( this.healths != null ) {
					((dynamic)this.healths).overlays.len = 0;

					if ( this.analgesic != 0 ) {
						((dynamic)this.healths).icon_state = "health_health_numb";
					} else {
						ruptured = this.is_lung_ruptured();

						if ( this.hal_screwyhud != 0 ) {
							i = null;
							i = 1;

							while (( i ??0) <= 3) {
								((dynamic)this.healths).overlays.Add( Rand13.PickFromTable( GlobalVars.organ_damage_overlays ) );
								i++;
							}
						} else {
							
							foreach (dynamic _f in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
								e = _f;
								

								if ( e is Organ_External_Chest ) {
									
									if ( ruptured ) {
										((dynamic)this.healths).overlays.Add( GlobalVars.organ_damage_overlays["" + e.name + "_max"] );
										continue;
									}
								}
								total_damage = e.brute_dam + e.burn_dam;

								if ( ( e.status & 32 ) != 0 ) {
									((dynamic)this.healths).overlays.Add( GlobalVars.organ_damage_overlays["" + e.name + "_gone"] );
								} else {
									
									dynamic _e = total_damage; // Was a switch-case, sorry for the mess.
									if ( 30<=_e&&_e<=Double.PositiveInfinity ) {
										((dynamic)this.healths).overlays.Add( GlobalVars.organ_damage_overlays["" + e.name + "_max"] );
									} else if ( 15<=_e&&_e<=30 ) {
										((dynamic)this.healths).overlays.Add( GlobalVars.organ_damage_overlays["" + e.name + "_mid"] );
									} else if ( 5<=_e&&_e<=15 ) {
										((dynamic)this.healths).overlays.Add( GlobalVars.organ_damage_overlays["" + e.name + "_min"] );
									}
								}
							}
						}

						switch ((int)( this.hal_screwyhud )) {
							case 1:
								((dynamic)this.healths).icon_state = "health6";
								break;
							case 2:
								((dynamic)this.healths).icon_state = "health7";
								break;
							default:
								
								dynamic _g = this.health - this.halloss; // Was a switch-case, sorry for the mess.
								if ( 100<=_g&&_g<=Double.PositiveInfinity ) {
									((dynamic)this.healths).icon_state = "health0";
								} else if ( 80<=_g&&_g<=100 ) {
									((dynamic)this.healths).icon_state = "health1";
								} else if ( 60<=_g&&_g<=80 ) {
									((dynamic)this.healths).icon_state = "health2";
								} else if ( 40<=_g&&_g<=60 ) {
									((dynamic)this.healths).icon_state = "health3";
								} else if ( 20<=_g&&_g<=40 ) {
									((dynamic)this.healths).icon_state = "health4";
								} else if ( 0<=_g&&_g<=20 ) {
									((dynamic)this.healths).icon_state = "health5";
								} else {
									((dynamic)this.healths).icon_state = "health6";
								}
								break;
						}
					}
				}

				if ( this.nutrition_icon != null ) {
					
					dynamic _i = this.nutrition; // Was a switch-case, sorry for the mess.
					if ( 450<=_i&&_i<=Double.PositiveInfinity ) {
						((dynamic)this.nutrition_icon).icon_state = "nutrition0";
					} else if ( 350<=_i&&_i<=450 ) {
						((dynamic)this.nutrition_icon).icon_state = "nutrition1";
					} else if ( 250<=_i&&_i<=350 ) {
						((dynamic)this.nutrition_icon).icon_state = "nutrition2";
					} else if ( 150<=_i&&_i<=250 ) {
						((dynamic)this.nutrition_icon).icon_state = "nutrition3";
					} else {
						((dynamic)this.nutrition_icon).icon_state = "nutrition4";
					}

					if ( GlobalVars.ticker != null && GlobalVars.ticker.hardcore_mode ) {
						
						if ( this.nutrition < 60 ) {
							((dynamic)this.nutrition_icon).icon_state = "nutrition5";
						}
					}
				}

				if ( this.pressure != null ) {
					((dynamic)this.pressure).icon_state = "pressure" + this.pressure_alert;
				}

				if ( this.pullin != null ) {
					
					if ( this.pulling != null ) {
						((dynamic)this.pullin).icon_state = "pull1";
					} else {
						((dynamic)this.pullin).icon_state = "pull0";
					}
				}

				if ( this.toxin != null ) {
					
					if ( this.hal_screwyhud == 4 || this.toxins_alert != 0 ) {
						((dynamic)this.toxin).icon_state = "tox1";
					} else {
						((dynamic)this.toxin).icon_state = "tox0";
					}
				}

				if ( this.oxygen != null ) {
					
					if ( this.hal_screwyhud == 3 || this.oxygen_alert != 0 ) {
						((dynamic)this.oxygen).icon_state = "oxy1";
					} else {
						((dynamic)this.oxygen).icon_state = "oxy0";
					}
				}

				if ( this.fire != null ) {
					
					if ( this.fire_alert != 0 ) {
						((dynamic)this.fire).icon_state = "fire" + this.fire_alert;
					} else {
						((dynamic)this.fire).icon_state = "fire0";
					}
				}

				if ( this.bodytemp != null ) {
					
					if ( this.has_reagent_in_blood( "capsaicin" ) ) {
						((dynamic)this.bodytemp).icon_state = "temp4";
					} else if ( this.has_reagent_in_blood( "frostoil" ) ) {
						((dynamic)this.bodytemp).icon_state = "temp-4";
					} else if ( !( this.get_thermal_loss( this.loc.return_air() ) > 0.1 ) || Convert.ToDouble( this.bodytemperature ) > 323.41 ) {
						
						dynamic _j = this.bodytemperature; // Was a switch-case, sorry for the mess.
						if ( 370<=_j&&_j<=Double.PositiveInfinity ) {
							((dynamic)this.bodytemp).icon_state = "temp4";
						} else if ( 350<=_j&&_j<=370 ) {
							((dynamic)this.bodytemp).icon_state = "temp3";
						} else if ( 335<=_j&&_j<=350 ) {
							((dynamic)this.bodytemp).icon_state = "temp2";
						} else if ( 320<=_j&&_j<=335 ) {
							((dynamic)this.bodytemp).icon_state = "temp1";
						} else if ( 305<=_j&&_j<=320 ) {
							((dynamic)this.bodytemp).icon_state = "temp0";
						} else if ( 303<=_j&&_j<=305 ) {
							((dynamic)this.bodytemp).icon_state = "temp-1";
						} else if ( 300<=_j&&_j<=303 ) {
							((dynamic)this.bodytemp).icon_state = "temp-2";
						} else if ( 290<=_j&&_j<=295 ) {
							((dynamic)this.bodytemp).icon_state = "temp-3";
						} else if ( 0<=_j&&_j<=290 ) {
							((dynamic)this.bodytemp).icon_state = "temp-4";
						}
					} else if ( this.is_vessel_dilated() && this.undergoing_hypothermia() == 2 ) {
						((dynamic)this.bodytemp).icon_state = "temp4";
					} else {
						
						dynamic _k = this.get_thermal_loss( this.loc.return_air() ); // Was a switch-case, sorry for the mess.
						if ( 0.1<=_k&&_k<=0.15 ) {
							((dynamic)this.bodytemp).icon_state = "temp-1";
						} else if ( 0.15<=_k&&_k<=0.2 ) {
							((dynamic)this.bodytemp).icon_state = "temp-2";
						} else if ( 0.2<=_k&&_k<=0.4 ) {
							((dynamic)this.bodytemp).icon_state = "temp-3";
						} else if ( 0.4<=_k&&_k<=Double.PositiveInfinity ) {
							((dynamic)this.bodytemp).icon_state = "temp-4";
						}
					}
				}

				if ( this.blind != null ) {
					
					if ( Lang13.Bool( this.blinded ) ) {
						((dynamic)this.blind).layer = 18;
					} else {
						((dynamic)this.blind).layer = 0;
					}
				}

				if ( ( this.disabilities & 1 ) != 0 ) {
					
					if ( Lang13.Bool( this.glasses ) ) {
						G2 = this.glasses;

						if ( !G2.prescription ) {
							this.client.screen.Add( GlobalVars.global_hud.vimpaired );
						}
					} else {
						this.client.screen.Add( GlobalVars.global_hud.vimpaired );
					}
				}

				if ( Lang13.Bool( this.eye_blurry ) ) {
					
					if ( !( GlobalVars.global_hud.blurry is Obj_Screen ) ) {
						GlobalVars.global_hud.blurry = GlobalFuncs.getFromPool( typeof(Obj_Screen) );
						((dynamic)GlobalVars.global_hud.blurry).screen_loc = "WEST,SOUTH to EAST,NORTH";
						((dynamic)GlobalVars.global_hud.blurry).icon_state = "blurry";
						((dynamic)GlobalVars.global_hud.blurry).layer = 17;
						((dynamic)GlobalVars.global_hud.blurry).mouse_opacity = 0;
					}
					this.client.screen.Add( GlobalVars.global_hud.blurry );
				}

				if ( this.druggy != 0 ) {
					
					if ( !( GlobalVars.global_hud.druggy is Obj_Screen ) ) {
						GlobalVars.global_hud.druggy = GlobalFuncs.getFromPool( typeof(Obj_Screen) );
						((dynamic)GlobalVars.global_hud.druggy).screen_loc = "WEST,SOUTH to EAST,NORTH";
						((dynamic)GlobalVars.global_hud.druggy).icon_state = "druggy";
						((dynamic)GlobalVars.global_hud.druggy).layer = 17;
						((dynamic)GlobalVars.global_hud.druggy).mouse_opacity = 0;
					}
					this.client.screen.Add( GlobalVars.global_hud.druggy );
				}
				masked = false;

				if ( this.head is Obj_Item_Clothing_Head_Welding || this.head is Obj_Item_Clothing_Head_Helmet_Space_Unathi ) {
					O3 = this.head;

					if ( !Lang13.Bool( O3.up ) && GlobalVars.tinted_weldhelh ) {
						this.client.screen.Add( GlobalVars.global_hud.darkMask );
						masked = true;
					}
				}

				if ( !masked && this.glasses is Obj_Item_Clothing_Glasses_Welding && !( this.glasses is Obj_Item_Clothing_Glasses_Welding_Superior ) ) {
					O4 = this.glasses;

					if ( !Lang13.Bool( O4.up ) && GlobalVars.tinted_weldhelh ) {
						this.client.screen.Add( GlobalVars.global_hud.darkMask );
					}
				}

				if ( Lang13.Bool( this.machine ) ) {
					
					if ( !( ((Ent_Static)this.machine).check_eye( this ) == true ) ) {
						this.reset_view( null );
					}

					if ( this.client.eye is Obj_Machinery_Camera ) {
						C = this.client.eye;
						this.sight = 0;

						if ( Lang13.Bool( ((Obj_Machinery_Camera)C).isXRay() ) ) {
							this.sight |= 28;
						}
					}
				} else {
					isRemoteObserve = false;

					if ( this.mutations.Contains( 101 ) && Lang13.Bool( this.remoteview_target ) ) {
						isRemoteObserve = true;

						if ( Lang13.Bool( this.remoteview_target.stat ) != false ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>Your psy-connection grows too faint to maintain!</span>" );
							isRemoteObserve = false;
						}

						if ( Lang13.Bool( this.remoteview_target.mutations.Contains( 204 ) ) ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>Your mind is shut out!</span>" );
							isRemoteObserve = false;
						}
						temp_turf = GlobalFuncs.get_turf( this.remoteview_target );

						if ( Lang13.Bool( temp_turf ) && Lang13.Bool( temp_turf.z ) != true && Convert.ToInt32( temp_turf.z ) != 5 || Lang13.Bool( this.remoteview_target.stat ) != false ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>Your psy-connection grows too faint to maintain!</span>" );
							isRemoteObserve = false;
						}
					}

					if ( !isRemoteObserve && this.client != null && !this.client.adminobs && !this.isTeleViewing( this.client.eye ) ) {
						this.remoteview_target = null;
						this.reset_view( null );
					}
				}
			}
			return true;
		}

		// Function from file: handle_random_events.dm
		public bool findAirborneVirii(  ) {
			Obj_Effect_Decal_Cleanable_Blood B = null;
			dynamic ID = null;
			Disease2_Disease V = null;
			Obj_Effect_Decal_Cleanable_Mucus M = null;
			dynamic ID2 = null;
			Disease2_Disease V2 = null;

			
			if ( GlobalVars.blood_virus_spreading_disabled ) {
				return false;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Obj_Effect_Decal_Cleanable_Blood) )) {
				B = _b;
				

				if ( B.virus2 is ByTable && B.virus2.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( B.virus2 )) {
						ID = _a;
						
						V = B.virus2[ID];

						if ( GlobalFuncs.infect_virus2( this, V, null, "(Airborne from blood)" ) ) {
							return true;
						}
					}
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Obj_Effect_Decal_Cleanable_Mucus) )) {
				M = _d;
				

				if ( M.virus2 is ByTable && M.virus2.len != 0 ) {
					
					foreach (dynamic _c in Lang13.Enumerate( M.virus2 )) {
						ID2 = _c;
						
						V2 = M.virus2[ID2];

						if ( GlobalFuncs.infect_virus2( this, V2, null, "(Airborne from mucus)" ) ) {
							return true;
						}
					}
				}
			}
			return false;
		}

		// Function from file: handle_random_events.dm
		public void handle_random_events(  ) {
			dynamic T = null;

			
			if ( !Lang13.Bool( this.stat ) ) {
				
				if ( Convert.ToDouble( this.getToxLoss() ) >= 45 && this.nutrition > 20 ) {
					this.vomit();
				}

				if ( this.radiation >= 50 ) {
					this.h_style = "Bald";
					this.f_style = "Shaved";
					this.update_hair();
				}
			}

			if ( this.loc is Tile && Rand13.Int( 1, 1000 ) == 1 ) {
				T = GlobalFuncs.get_turf( this );

				if ( !( ((Tile)T).get_lumcount() != 0 ) ) {
					this.playsound_local( this, Rand13.PickFromTable( GlobalVars.scarySounds ), 50, 1, -1 );
				}
			}
			return;
		}

		// Function from file: handle_pulse.dm
		public int handle_pulse(  ) {
			int temp = 0;
			Reagent R = null;

			
			if ( this.life_tick % 5 != 0 ) {
				return this.pulse;
			}

			if ( this.undergoing_hypothermia() == 3 ) {
				return 1;
			}

			if ( this.undergoing_hypothermia() == 4 ) {
				return 0;
			}

			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 1 ) ) {
				return 0;
			}

			if ( this.stat == 2 ) {
				return 0;
			}
			temp = 3;

			if ( Num13.Floor( this.vessel.get_reagent_amount( "blood" ) ?1:0 ) <= GlobalVars.BLOOD_VOLUME_BAD ) {
				temp = 6;
			}

			if ( ( this.status_flags & 8192 ) != 0 ) {
				temp = 0;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
				R = _a;
				

				if ( GlobalVars.bradycardics.Contains( R.id ) ) {
					
					if ( temp <= 6 && temp >= 3 ) {
						temp--;
					}
				}

				if ( GlobalVars.tachycardics.Contains( R.id ) ) {
					
					if ( temp <= 4 && temp >= 0 ) {
						temp++;
					}
				}

				if ( GlobalVars.heartstopper.Contains( R.id ) ) {
					temp = 0;
				}

				if ( GlobalVars.cheartstopper.Contains( R.id ) ) {
					
					if ( ( R.volume ??0) >= ( R.overdose ??0) ) {
						temp = 0;
					}
				}
			}
			return temp;
		}

		// Function from file: handle_mutations_and_radiation.dm
		public void handle_mutations_and_radiation(  ) {
			dynamic gene_type = null;
			dynamic gene = null;
			double rads = 0;
			double damage = 0;
			dynamic O = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( this.getFireLoss() != 0 ) {
				
				if ( this.mutations.Contains( 106 ) ) {
					this.heal_organ_damage( 0, 1 );
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( this.active_genes )) {
				gene_type = _a;
				
				gene = GlobalVars.dna_genes[gene_type];

				if ( !Lang13.Bool( gene.block ) ) {
					continue;
				}
				gene.OnMobLife( this );
			}

			if ( this.radiation != 0 ) {
				
				if ( this.radiation > 100 ) {
					this.radiation = 100;
					this.Weaken( 10 );
					GlobalFuncs.to_chat( this, "<span class='warning'>You feel weak.</span>" );
					this.emote( "collapse" );
				}

				if ( this.radiation < 0 ) {
					this.radiation = 0;
				} else {
					
					if ( Lang13.Bool( this.species.flags & 2048 ) ) {
						rads = this.radiation / 25;
						this.radiation -= rads;
						this.nutrition += rads;
						this.adjustBruteLoss( -rads );
						this.adjustOxyLoss( -rads );
						this.adjustToxLoss( -rads );
						this.updatehealth();
						return;
					}
					damage = 0;

					dynamic _b = this.radiation; // Was a switch-case, sorry for the mess.
					if ( 1<=_b&&_b<=49 ) {
						this.radiation--;

						if ( !( this.radiation % 5 != 0 ) ) {
							this.adjustToxLoss( 1 );
							damage = 1;
							this.updatehealth();
						}
					} else if ( 50<=_b&&_b<=74 ) {
						this.radiation -= 2;
						damage = 1;
						this.adjustToxLoss( 1 );

						if ( Rand13.PercentChance( 5 ) ) {
							this.radiation -= 5;
							this.Weaken( 3 );
							GlobalFuncs.to_chat( this, "<span class='warning'>You feel weak.</span>" );
							this.emote( "collapse" );
						}
						this.updatehealth();
					} else if ( 75<=_b&&_b<=100 ) {
						this.radiation -= 3;
						this.adjustToxLoss( 3 );
						damage = 1;
						this.updatehealth();
					}

					if ( damage != 0 && this.organs.len != 0 ) {
						O = Rand13.PickFromTable( this.organs );

						if ( O is Organ_External ) {
							((Organ)O).add_autopsy_data( "Radiation Poisoning", damage );
						}
					}
				}
			}
			return;
		}

		// Function from file: handle_hud_list.dm
		public void handle_hud_list(  ) {
			dynamic holder = null;
			int foundVirus = 0;
			Disease D = null;
			dynamic ID = null;
			dynamic holder2 = null;
			dynamic holder22 = null;
			dynamic B = null;
			dynamic holder3 = null;
			dynamic I = null;
			dynamic holder4 = null;
			string perpname = null;
			dynamic I2 = null;
			Data_Record E = null;
			Data_Record R = null;
			dynamic holder1 = null;
			dynamic holder23 = null;
			dynamic holder32 = null;
			Obj_Item_Weapon_Implant I3 = null;
			dynamic holder5 = null;

			
			if ( ( this.hud_updateflag & 2 ) != 0 ) {
				holder = this.hud_list[1];

				if ( this.stat == 2 ) {
					holder.icon_state = "hudhealth-100";
				} else {
					holder.icon_state = "hud" + GlobalFuncs.RoundHealth( this.health );
				}
				this.hud_list[1] = holder;
			}

			if ( ( this.hud_updateflag & 4 ) != 0 ) {
				foundVirus = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
					D = _a;
					

					if ( !Lang13.Bool( D.hidden[1] ) ) {
						foundVirus++;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( this.virus2 )) {
					ID = _b;
					

					if ( GlobalVars.virusDB.Contains( ID ) ) {
						foundVirus = 1;
						break;
					}
				}
				holder2 = this.hud_list[2];
				holder22 = this.hud_list[9];

				if ( this.stat == 2 ) {
					holder2.icon_state = "huddead";
					holder22.icon_state = "huddead";
				} else if ( ( this.status_flags & 32768 ) != 0 ) {
					holder2.icon_state = "hudxeno";
					holder22.icon_state = "hudxeno";
				} else if ( foundVirus != 0 ) {
					holder2.icon_state = "hudill";
				} else if ( Lang13.Bool( this.has_brain_worms() ) ) {
					B = this.has_brain_worms();

					if ( B.controlling ) {
						holder2.icon_state = "hudbrainworm";
					} else {
						holder2.icon_state = "hudhealthy";
					}
					holder22.icon_state = "hudbrainworm";
				} else {
					holder2.icon_state = "hudhealthy";

					if ( this.virus2.len != 0 ) {
						holder22.icon_state = "hudill";
					} else {
						holder22.icon_state = "hudhealthy";
					}
				}
				this.hud_list[2] = holder2;
				this.hud_list[9] = holder22;
			}

			if ( ( this.hud_updateflag & 8 ) != 0 ) {
				holder3 = this.hud_list[3];

				if ( Lang13.Bool( this.wear_id ) ) {
					I = ((Obj_Item)this.wear_id).GetID();

					if ( Lang13.Bool( I ) ) {
						holder3.icon_state = "hud" + String13.CKey( ((Obj_Item_Weapon_Card_Id)I).GetJobName() );
					} else {
						holder3.icon_state = "hudunknown";
					}
				} else {
					holder3.icon_state = "hudunknown";
				}
				this.hud_list[3] = holder3;
			}

			if ( ( this.hud_updateflag & 16 ) != 0 ) {
				holder4 = this.hud_list[4];
				holder4.icon_state = "hudblank";
				perpname = this.name;

				if ( Lang13.Bool( this.wear_id ) ) {
					I2 = ((Obj_Item)this.wear_id).GetID();

					if ( Lang13.Bool( I2 ) ) {
						perpname = I2.registered_name;
					}
				}

				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
					E = _d;
					

					if ( E.fields["name"] == perpname ) {
						
						foreach (dynamic _c in Lang13.Enumerate( GlobalVars.data_core.security, typeof(Data_Record) )) {
							R = _c;
							

							if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "*Arrest*" ) {
								holder4.icon_state = "hudwanted";
								break;
							} else if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "Incarcerated" ) {
								holder4.icon_state = "hudprisoner";
								break;
							} else if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "Parolled" ) {
								holder4.icon_state = "hudparolled";
								break;
							} else if ( R.fields["id"] == E.fields["id"] && R.fields["criminal"] == "Released" ) {
								holder4.icon_state = "hudreleased";
								break;
							}
						}
					}
				}
				this.hud_list[4] = holder4;
			}

			if ( ( this.hud_updateflag & 32 ) != 0 || ( this.hud_updateflag & 64 ) != 0 || ( this.hud_updateflag & 128 ) != 0 ) {
				holder1 = this.hud_list[7];
				holder23 = this.hud_list[5];
				holder32 = this.hud_list[6];
				holder1.icon_state = "hudblank";
				holder23.icon_state = "hudblank";
				holder32.icon_state = "hudblank";

				foreach (dynamic _e in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Implant) )) {
					I3 = _e;
					

					if ( I3.implanted ) {
						
						if ( I3 is Obj_Item_Weapon_Implant_Tracking ) {
							holder1.icon_state = "hud_imp_tracking";
						}

						if ( I3 is Obj_Item_Weapon_Implant_Loyalty ) {
							holder23.icon_state = "hud_imp_loyal";
						}

						if ( I3 is Obj_Item_Weapon_Implant_Chem ) {
							holder32.icon_state = "hud_imp_chem";
						}
					}
				}
				this.hud_list[7] = holder1;
				this.hud_list[5] = holder23;
				this.hud_list[6] = holder32;
			}

			if ( ( this.hud_updateflag & 256 ) != 0 ) {
				holder5 = this.hud_list[8];
				holder5.icon_state = "hudblank";

				if ( this.mind != null ) {
					
					switch ((string)( this.mind.special_role )) {
						case "traitor":
						case "Syndicate":
							holder5.icon_state = "hudsyndicate";
							break;
						case "Revolutionary":
							holder5.icon_state = "hudrevolutionary";
							break;
						case "Head Revolutionary":
							holder5.icon_state = "hudheadrevolutionary";
							break;
						case "Cultist":
							holder5.icon_state = "hudcultist";
							break;
						case "Changeling":
							holder5.icon_state = "hudchangeling";
							break;
						case "Wizard":
						case "Fake Wizard":
							holder5.icon_state = "hudwizard";
							break;
						case "Death Commando":
							holder5.icon_state = "huddeathsquad";
							break;
						case "Vampire":
							holder5.icon_state = "hudvampire";
							break;
					}
					this.hud_list[8] = holder5;
				}
			}
			this.hud_updateflag = 0;
			return;
		}

		// Function from file: handle_equipment.dm
		public void handle_equipment(  ) {
			dynamic B = null;
			Ent_Dynamic O = null;

			
			if ( Lang13.Bool( this.head ) ) {
				
				if ( this.head is Obj_Item_Weapon_ReagentContainers_Glass_Bucket ) {
					B = this.head;

					if ( Lang13.Bool( B.reagents.total_volume ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Ent_Dynamic) )) {
							O = _a;
							
							((Reagents)B.reagents).reaction( O, GlobalVars.TOUCH );
						}
						((Reagents)B.reagents).reaction( this.loc, GlobalVars.TOUCH );
						this.visible_message( "<span class='warning'>The bucket's content spills on " + this + "</span>" );
						Task13.Schedule( 5, (Task13.Closure)(() => {
							((Reagents)B.reagents).clear_reagents();
							return;
						}));
					}
				}
			}
			return;
		}

		// Function from file: handle_environment.dm
		public double get_body_temperature_damage( dynamic temperature = null ) {
			
			if ( Convert.ToDouble( temperature ) < this.species.cold_level_3 ) {
				return 3;
			} else if ( Convert.ToDouble( temperature ) < this.species.cold_level_2 ) {
				return 1.5;
			} else if ( Convert.ToDouble( temperature ) < this.species.cold_level_1 ) {
				return 0.5;
			} else if ( Convert.ToDouble( temperature ) >= this.species.heat_level_1 ) {
				return 2;
			} else if ( Convert.ToDouble( temperature ) >= this.species.heat_level_2 ) {
				return 4;
			} else if ( Convert.ToDouble( temperature ) >= this.species.heat_level_3 ) {
				return 8;
			} else {
				return 0;
			}
			return 0;
		}

		// Function from file: handle_environment.dm
		public void handle_environment( GasMixture environment = null ) {
			dynamic loc_temp = null;
			double thermal_loss = 0;
			int thermal_protection = 0;
			int temp_alert = 0;
			double? temp_damage = null;
			string temp_weapon = null;
			dynamic pressure = null;
			dynamic adjusted_pressure = null;

			
			if ( !( environment != null ) || Lang13.Bool( this.flags & 128 ) ) {
				return;
			}
			loc_temp = this.get_loc_temp( environment );

			if ( this.stat != 2 ) {
				this.handle_body_temperature();
			}

			if ( !this.on_fire ) {
				
				if ( Convert.ToDouble( loc_temp ) < Convert.ToDouble( this.get_skin_temperature() ) ) {
					thermal_loss = this.get_thermal_loss( environment );
					this.bodytemperature -= thermal_loss;
				} else {
					thermal_protection = this.get_heat_protection( this.get_heat_protection_flags( loc_temp ) );

					if ( thermal_protection < 1 ) {
						this.bodytemperature += Num13.MinInt( ((int)( ( 1 - thermal_protection ) * Convert.ToDouble( ( loc_temp - this.get_skin_temperature() ) / 80 ) )), 10 );
					}
				}
			}

			if ( ( this.status_flags & 4096 ) != 0 ) {
				this.fire_alert = 0;
				this.pressure_alert = 0;
				return;
			}

			if ( Convert.ToDouble( this.bodytemperature ) < 220.41 || Convert.ToDouble( this.bodytemperature ) > 360.41 && this.dna.mutantrace != "slime" ) {
				temp_alert = ( Convert.ToDouble( this.bodytemperature ) < 220.41 ? 1 : 2 );
				this.fire_alert = Num13.MaxInt( this.fire_alert, temp_alert );

				if ( !( this.loc is Obj_Machinery_Atmospherics_Unary_CryoCell ) ) {
					
					if ( this.dna.mutantrace != "slime" ) {
						temp_damage = this.get_body_temperature_damage( this.bodytemperature );
						temp_weapon = ( Convert.ToDouble( this.bodytemperature ) < 220.41 ? "Low Body Temperature" : "High Body Temperature" );
						this.apply_damage( temp_damage, "fire", null, null, null, null, temp_weapon );
					} else {
						this.adjustToxLoss( Num13.Floor( 360.41 - Convert.ToDouble( this.bodytemperature ) ) );
					}
				}
			} else {
				this.fire_alert = 0;
			}
			pressure = environment.return_pressure();
			adjusted_pressure = this.calculate_affecting_pressure( pressure );

			if ( Convert.ToDouble( adjusted_pressure ) >= this.species.hazard_high_pressure ) {
				this.adjustBruteLoss( Num13.MinInt( Convert.ToInt32( ( adjusted_pressure / this.species.hazard_high_pressure - 1 ) * 4 ), 4 ) );
				this.pressure_alert = 2;
			} else if ( Convert.ToDouble( adjusted_pressure ) >= this.species.warning_high_pressure ) {
				this.pressure_alert = 1;
			} else if ( Convert.ToDouble( adjusted_pressure ) >= this.species.warning_low_pressure ) {
				this.pressure_alert = 0;
			} else if ( Convert.ToDouble( adjusted_pressure ) >= this.species.hazard_low_pressure ) {
				this.pressure_alert = -1;
			} else if ( !this.mutations.Contains( 2 ) ) {
				this.adjustBruteLoss( 2 );

				if ( this.loc is Tile_Space ) {
					this.adjustBruteLoss( 2 );
				}
				this.pressure_alert = -2;
			} else {
				this.pressure_alert = -1;
			}

			if ( Convert.ToDouble( environment.toxins ) > 061 ) {
				this.pl_effects();
			}
			return;
		}

		// Function from file: handle_disabilities.dm
		public void handle_disabilities(  ) {
			int x_offset_change = 0;
			int y_offset_change = 0;
			int rn = 0;

			
			if ( ( this.disabilities & 2 ) != 0 ) {
				
				if ( Rand13.PercentChance( 1 ) && this.paralysis < 1 ) {
					this.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " starts having a seizure!</span>" ).ToString(), "<span class='warning'>You have a seizure!</span>" );
					this.Paralyse( 10 );
					this.Jitter( 1000 );
				}
			}

			if ( this.dna.GetSEState( GlobalVars.HALLUCINATIONBLOCK ) ) {
				
				if ( Rand13.PercentChance( 1 ) && this.hallucination < 1 ) {
					this.hallucination += 20;
				}
			}

			if ( ( this.disabilities & 4 ) != 0 ) {
				
				if ( Rand13.PercentChance( 5 ) && this.paralysis <= 1 ) {
					this.drop_item();
					this.emote( "cough" );
				}
			}

			if ( ( this.disabilities & 8 ) != 0 ) {
				
				if ( Rand13.PercentChance( 10 ) && this.paralysis <= 1 ) {
					
					dynamic _a = Rand13.Int( 1, 3 ); // Was a switch-case, sorry for the mess.
					if ( 2<=_a&&_a<=3 ) {
						this.say( "" + ( Rand13.PercentChance( 50 ) ? ";" : "" ) + Rand13.Pick(new object [] { "SHIT", "PISS", "FUCK", "CUNT", "COCKSUCKER", "MOTHERFUCKER", "TITS" }) );
					} else if ( _a==1 ) {
						this.emote( "twitch" );
					}
					x_offset_change = Rand13.Int( -2, 2 );
					y_offset_change = Rand13.Int( -1, 1 );
					Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + x_offset_change ).Set( "pixel_y", this.pixel_y + y_offset_change ).Set( "time", 1 ) );
					Icon13.Animate( new ByTable().Set( "pixel_x", this.pixel_x - x_offset_change ).Set( "pixel_y", this.pixel_y - y_offset_change ).Set( "time", 1 ) );
				}
			}

			if ( this.getBrainLoss() >= 60 && this.stat != 2 ) {
				
				if ( Rand13.PercentChance( 3 ) ) {
					
					dynamic _b = Rand13.Pick(new object [] { 1, 2, 3 }); // Was a switch-case, sorry for the mess.
					if ( _b==1 ) {
						this.say( Rand13.Pick(new object [] { "IM A PONY NEEEEEEIIIIIIIIIGH", "without oxigen blob don't evoluate?", "CAPTAINS A COMDOM", "" + Rand13.Pick(new object [] { "", "that faggot traitor" }) + " " + Rand13.Pick(new object [] { "joerge", "george", "gorge", "gdoruge" }) + " " + Rand13.Pick(new object [] { "mellens", "melons", "mwrlins" }) + " is grifing me HAL;P!!!", "can u give me " + Rand13.Pick(new object [] { "telikesis", "halk", "eppilapse" }) + "?", "THe saiyans screwed", "Bi is THE BEST OF BOTH WORLDS>", "I WANNA PET TEH monkeyS", "stop grifing me!!!!", "SOTP IT#" }) );
					} else if ( _b==2 ) {
						this.say( Rand13.Pick(new object [] { "FUS RO DAH", "fucking 4rries!", "stat me", ">my face", "roll it easy!", "waaaaaagh!!!", "red wonz go fasta", "FOR TEH EMPRAH", "lol2cat", "dem dwarfs man, dem dwarfs", "SPESS MAHREENS", "hwee did eet fhor khayosss", "lifelike texture ;_;", "luv can bloooom", "PACKETS!!!", "SARAH HALE DID IT!!!", "Don't tell Chase", "not so tough now huh", "WERE NOT BAY!!", "BLAME HOSHI!!!", "ARRPEE IZ DED!!!", "THERE ALL JUS MEATAFRIENDS!", "SOTP MESING WITH THE ROUNS SHITMAN!!!", "SKELINGTON IS 4 SHITERS!", "MOMMSI R THE WURST SCUM!!", "OMG I SED LAW 2 U FAG MOMIM LAW 2!!!" }) );
					} else if ( _b==3 ) {
						this.emote( "drool" );
					}
				}
			}

			if ( this.species.name == "Tajaran" ) {
				
				if ( Rand13.PercentChance( 1 ) ) {
					this.vomit( true );
				}
			}

			if ( this.stat != 2 ) {
				rn = Rand13.Int( 0, 200 );

				if ( this.getBrainLoss() >= 5 ) {
					
					if ( 0 <= rn && rn <= 3 ) {
						this.custom_pain( "Your head feels numb and painful." );
					}
				}

				if ( this.getBrainLoss() >= 15 ) {
					
					if ( 4 <= rn && rn <= 6 ) {
						
						if ( Convert.ToDouble( this.eye_blurry ) <= 0 ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>It becomes hard to see for some reason.</span>" );
							this.eye_blurry = 10;
						}
					}
				}

				if ( this.getBrainLoss() >= 35 ) {
					
					if ( 7 <= rn && rn <= 9 ) {
						
						if ( this.hand == true && Lang13.Bool( this.get_active_hand() ) ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>Your hand won't respond properly, you drop what you're holding.</span>" );
							this.drop_item();
						}
					}
				}

				if ( this.getBrainLoss() >= 50 ) {
					
					if ( 10 <= rn && rn <= 12 ) {
						
						if ( this.canmove ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>Your legs won't respond properly, you fall down.</span>" );
							this.emote( "collapse" );
						}
					}
				}
			}
			return;
		}

		// Function from file: handle_chemicals_in_body.dm
		public bool handle_chemicals_in_body(  ) {
			int jittery_time = 0;
			int? alien = null;
			double total_plasmaloss = 0;
			Obj_Item I = null;
			dynamic light_amount = null;
			Ent_Static T = null;
			dynamic light_amount2 = null;
			Ent_Static T2 = null;
			double reduce_nutrition_by = 0;
			dynamic liver = null;
			dynamic eyes = null;

			jittery_time = this.jitteriness;

			if ( Lang13.Bool( this.reagents ) ) {
				alien = 0;

				if ( Lang13.Bool( this.species ) ) {
					
					dynamic _a = this.species.type; // Was a switch-case, sorry for the mess.
					if ( _a==typeof(Species_Diona) ) {
						alien = 1;
					} else if ( _a==typeof(Species_Vox) ) {
						alien = 2;
					} else if ( _a==typeof(Species_Plasmaman) ) {
						alien = 3;
					}
				}
				((Reagents)this.reagents).metabolize( this, alien );
			}
			total_plasmaloss = 0;

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				I = _b;
				

				if ( I.contaminated ) {
					total_plasmaloss += Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_CONTAMINATIONLOSS) ) );
				}
				I.OnMobLife( this );
			}

			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( this.species.name == "Plasmaman" ) {
				return false;
			}
			this.adjustToxLoss( total_plasmaloss );

			if ( Lang13.Bool( this.species.flags & 4096 ) ) {
				light_amount = 0;

				if ( this.loc is Tile ) {
					T = this.loc;
					light_amount = ((dynamic)T).get_lumcount( 0.5 ) * 10;
				}
				this.nutrition += Convert.ToDouble( light_amount );
				this.traumatic_shock -= light_amount;

				if ( Lang13.Bool( this.species.flags & 512 ) ) {
					
					if ( this.nutrition > 500 ) {
						this.nutrition = 500;
					}

					if ( Convert.ToDouble( light_amount ) >= 3 ) {
						this.adjustBruteLoss( -light_amount );
						this.adjustToxLoss( -light_amount );
						this.adjustOxyLoss( -light_amount );
					}
				}
			}

			if ( this.dna != null && this.dna.mutantrace == "shadow" ) {
				light_amount2 = 0;

				if ( this.loc is Tile ) {
					T2 = this.loc;

					if ( Lang13.Bool( ((dynamic)T2).dynamic_lighting ) ) {
						light_amount2 = ((dynamic)T2).get_lumcount() * 10;
					} else {
						light_amount2 = 10;
					}
				}

				if ( Convert.ToDouble( light_amount2 ) > 2 ) {
					this.take_overall_damage( 1, 1 );
				} else if ( Convert.ToDouble( light_amount2 ) < 2 ) {
					this.heal_overall_damage( 1, 1 );
				}
			}

			if ( Lang13.Bool( this.species.flags & 8192 ) ) {
				
				if ( this.mutations.Contains( 6 ) ) {
					
					if ( this.overeatduration < 100 ) {
						GlobalFuncs.to_chat( this, "<span class='notice'>You feel fit again!</span>" );
						this.mutations.Remove( 6 );
						this.update_mutantrace( false );
						this.update_mutations( false );
						this.update_inv_w_uniform( false );
						this.update_inv_wear_suit();
					}
				} else if ( this.overeatduration > 500 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You suddenly feel blubbery!</span>" );
					this.mutations.Add( 6 );
					this.update_mutantrace( false );
					this.update_mutations( false );
					this.update_inv_w_uniform( false );
					this.update_inv_wear_suit();
				}
			}

			if ( this.stat != 2 ) {
				reduce_nutrition_by = 0.15;

				if ( this.sleeping != 0 ) {
					reduce_nutrition_by *= 0.75;
				}
				this.burn_calories( reduce_nutrition_by, true );
			}

			if ( this.nutrition > 450 ) {
				
				if ( this.overeatduration < 600 ) {
					this.overeatduration++;
				}
			} else if ( this.overeatduration > 1 ) {
				
				if ( this.mutations.Contains( 200 ) ) {
					this.overeatduration -= 1;
				} else {
					this.overeatduration -= 2;
				}
			}

			if ( Lang13.Bool( this.species.flags & 4096 ) ) {
				
				if ( this.nutrition < 200 ) {
					this.take_overall_damage( 2, 0 );
					this.traumatic_shock++;
				}
			}

			if ( Lang13.Bool( this.drowsyness ) ) {
				this.drowsyness--;
				this.eye_blurry = Num13.MaxInt( 2, Convert.ToInt32( this.eye_blurry ) );

				if ( Rand13.PercentChance( 5 ) ) {
					this.sleeping += 1;
					this.Paralyse( 5 );
				}
			}
			this.confused = Num13.MaxInt( 0, this.confused - 1 );

			if ( this.resting != 0 ) {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 15 );
				this.jitteriness = Num13.MaxInt( 0, this.jitteriness - 15 );
			} else {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 3 );
				this.jitteriness = Num13.MaxInt( 0, this.jitteriness - 3 );
			}

			if ( jittery_time != 0 && !( this.jitteriness != 0 ) ) {
				Icon13.Animate( this );
			}
			this.handle_trace_chems();
			liver = this.internal_organs_by_name["liver"];

			if ( Lang13.Bool( liver ) ) {
				liver.process();
			}
			eyes = this.internal_organs_by_name["eyes"];

			if ( Lang13.Bool( eyes ) ) {
				eyes.process();
			}
			this.updatehealth();
			return false;
		}

		// Function from file: handle_changeling.dm
		public void handle_changeling(  ) {
			
			if ( this.mind != null && this.mind.changeling != null ) {
				this.mind.changeling.regenerate();
				this.updateChangelingHUD();
			}
			return;
		}

		// Function from file: handle_breath.dm
		public bool handle_breath( dynamic breath = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 || Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( breath ) || ((GasMixture)breath).f_total_moles() == 0 || this.suiciding == true ) {
				
				if ( ((Reagents)this.reagents).has_reagent( "inaprovaline" ) ) {
					return false;
				}

				if ( this.suiciding == true ) {
					this.adjustOxyLoss( 2 );
					this.failed_last_breath = true;
					this.oxygen_alert = Num13.MaxInt( this.oxygen_alert, 1 );
					return false;
				}

				if ( Convert.ToDouble( this.health ) > Convert.ToDouble( GlobalVars.config.health_threshold_crit ) ) {
					this.adjustOxyLoss( 1 );
					this.failed_last_breath = true;
				} else {
					this.adjustOxyLoss( GlobalVars.tickerProcess.getLastTickerTimeDuration() / 3 );
					this.failed_last_breath = true;
				}
				this.oxygen_alert = Num13.MaxInt( this.oxygen_alert, 1 );
				return false;
			}
			return ((Species)this.species).handle_breath( breath, this );
		}

		// Function from file: handle_breath.dm
		public dynamic get_breath_from_internal( double volume_needed = 0 ) {
			
			if ( Lang13.Bool( this.v_internal ) ) {
				
				if ( !( this.contents.Find( this.v_internal ) != 0 ) ) {
					this.v_internal = null;
				}

				if ( !Lang13.Bool( this.wear_mask ) || !Lang13.Bool( this.wear_mask.flags & 8 ) ) {
					this.v_internal = null;
				}

				if ( Lang13.Bool( this.v_internal ) ) {
					return ((Obj_Item_Weapon_Tank)this.v_internal).remove_air_volume( volume_needed );
				} else if ( this.internals != null ) {
					((dynamic)this.internals).icon_state = "internal0";
				}
			}
			return null;
		}

		// Function from file: handle_breath.dm
		public void breathe(  ) {
			dynamic L = null;
			GasMixture environment = null;
			dynamic breath = null;
			Ent_Static location_as_object = null;
			Ent_Static location_as_object2 = null;
			dynamic breath_moles = null;
			bool block = false;
			Obj_Effect_Effect_Smoke_Chem smoke = null;
			Ent_Static location_as_object3 = null;
			dynamic PS = null;
			Mob_Living_Carbon M = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( ((Reagents)this.reagents).has_reagent( "lexorin" ) ) {
				return;
			}

			if ( this.undergoing_hypothermia() == 4 ) {
				return;
			}

			if ( this.mutations.Contains( 100 ) ) {
				return;
			}

			if ( this.loc is Obj_Machinery_Atmospherics_Unary_CryoCell ) {
				return;
			}

			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 2 ) ) {
				return;
			}
			L = this.internal_organs_by_name["lungs"];

			if ( Lang13.Bool( L ) ) {
				L.process();
			}
			environment = this.loc.return_air();

			if ( Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_crit ) ) {
				this.losebreath++;
			}

			if ( this.losebreath > 0 ) {
				this.losebreath--;

				if ( Rand13.PercentChance( 10 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "gasp" );
						return;
					}));
				}

				if ( this.loc is Obj ) {
					location_as_object = this.loc;
					((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
				}
			} else {
				breath = this.get_breath_from_internal( 0.5 );

				if ( !Lang13.Bool( breath ) ) {
					
					if ( Lang13.Bool( this.head ) && Lang13.Bool( this.head.flags & 32768 ) ) {
						
					} else if ( Lang13.Bool( this.wear_mask ) && Lang13.Bool( this.wear_mask.flags & 32768 ) ) {
						
					} else if ( this.loc is Obj ) {
						location_as_object2 = this.loc;
						breath = ((dynamic)location_as_object2).handle_internal_lifeform( this, 0.02078675478696823 );
					} else if ( this.loc is Tile ) {
						breath_moles = 0;
						breath_moles = environment.f_total_moles() * 0.5 / 2500;
						breath = this.loc.remove_air( breath_moles );

						if ( !this.is_lung_ruptured() ) {
							
							if ( !Lang13.Bool( breath ) || Convert.ToDouble( breath.total_moles ) < 0.004157350864261389 || Convert.ToDouble( breath.total_moles ) > 0.10393377393484116 ) {
								
								if ( Rand13.PercentChance( 5 ) ) {
									this.rupture_lung();
								}
							}
						}
						block = false;

						if ( Lang13.Bool( this.wear_mask ) ) {
							
							if ( Lang13.Bool( this.wear_mask.flags & 8192 ) ) {
								block = true;
							}
						}

						if ( Lang13.Bool( this.glasses ) ) {
							
							if ( Lang13.Bool( this.glasses.flags & 8192 ) ) {
								block = true;
							}
						}

						if ( Lang13.Bool( this.head ) ) {
							
							if ( Lang13.Bool( this.head.flags & 8192 ) ) {
								block = true;
							}
						}

						if ( !block ) {
							
							foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Obj_Effect_Effect_Smoke_Chem) )) {
								smoke = _a;
								

								if ( Lang13.Bool( smoke.reagents.total_volume ) ) {
									((Reagents)smoke.reagents).reaction( this, GlobalVars.INGEST );
									Task13.Schedule( 5, (Task13.Closure)(() => {
										
										if ( smoke != null ) {
											smoke.reagents.copy_to( this, 10 );
										}
										return;
									}));
									break;
								}
							}
						}
					}
				} else if ( this.loc is Obj ) {
					location_as_object3 = this.loc;
					((dynamic)location_as_object3).handle_internal_lifeform( this, 0 );
				}
			}
			this.handle_breath( breath );

			if ( this.species.name == "Plasmaman" ) {
				
				if ( !( this.wear_suit is Obj_Item_Clothing_Suit_Space_Plasmaman || this.wear_suit is Obj_Item_Clothing_Suit_Space_Bomberman ) || !( this.head is Obj_Item_Clothing_Head_Helmet_Space_Plasmaman || this.head is Obj_Item_Clothing_Head_Helmet_Space_Bomberman ) ) {
					
					if ( environment != null ) {
						
						if ( Lang13.Bool( environment.oxygen ) && Lang13.Bool( environment.f_total_moles() ) && Convert.ToDouble( environment.oxygen / environment.f_total_moles() ) >= 0.01 ) {
							
							if ( !this.on_fire ) {
								GlobalFuncs.to_chat( this, "<span class='warning'>Your body reacts with the atmosphere and bursts into flame!</span>" );
							}
							this.adjust_fire_stacks( 0.5 );
							this.IgniteMob();
						}
					}
				} else if ( this.fire_stacks > 0 ) {
					PS = this.wear_suit;
					PS.Extinguish( this );
				}
			}

			if ( Lang13.Bool( breath ) ) {
				this.loc.assume_air( breath );

				if ( this.virus2 != null && this.virus2.len > 0 ) {
					
					if ( Rand13.PercentChance( 10 ) && GlobalFuncs.get_infection_chance( this ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Mob_Living_Carbon) )) {
							M = _b;
							
							this.spread_disease_to( M );
						}
					}
				}
			}
			return;
		}

		// Function from file: update_icons.dm
		public void update_hidden_item_icons( dynamic W = null ) {
			
			if ( !Lang13.Bool( W ) ) {
				return;
			}

			if ( GlobalFuncs.is_slot_hidden( W.body_parts_covered, 8193 ) || GlobalFuncs.is_slot_hidden( W.body_parts_covered, 32768 ) ) {
				this.update_hair();
			}

			if ( GlobalFuncs.is_slot_hidden( W.body_parts_covered, 38912 ) ) {
				this.update_inv_wear_mask();
			}

			if ( GlobalFuncs.is_slot_hidden( W.body_parts_covered, 1536 ) ) {
				this.update_inv_gloves();
			}

			if ( GlobalFuncs.is_slot_hidden( W.body_parts_covered, 96 ) ) {
				this.update_inv_shoes();
			}

			if ( GlobalFuncs.is_slot_hidden( W.body_parts_covered, 414 ) ) {
				this.update_inv_w_uniform();
			}

			if ( GlobalFuncs.is_slot_hidden( W.body_parts_covered, 2048 ) ) {
				this.update_inv_glasses();
			}

			if ( GlobalFuncs.is_slot_hidden( W.body_parts_covered, 8192 ) ) {
				this.update_inv_ears();
			}
			return;
		}

		// Function from file: update_icons.dm
		public Image generate_head_icon(  ) {
			Icon face_lying = null;
			dynamic facial_hair_style = null;
			Icon facial_l = null;
			dynamic hair_style = null;
			Icon hair_l = null;
			Icon eyes_l = null;
			Image face_lying_image = null;

			face_lying = new Icon( "icons/mob/human_face.dmi", "bald_l" );

			if ( Lang13.Bool( this.f_style ) ) {
				facial_hair_style = GlobalVars.facial_hair_styles_list[this.f_style];

				if ( Lang13.Bool( facial_hair_style ) ) {
					facial_l = new Icon( facial_hair_style.icon, "" + facial_hair_style.icon_state + "_l" );
					facial_l.Blend( String13.ColorCode( ((int)( this.r_facial ??0 )), ((int)( this.g_facial ??0 )), ((int)( this.b_facial ??0 )) ), 0 );
					face_lying.Blend( facial_l, 3 );
				}
			}

			if ( Lang13.Bool( this.h_style ) ) {
				hair_style = GlobalVars.hair_styles_list[this.h_style];

				if ( Lang13.Bool( hair_style ) ) {
					hair_l = new Icon( hair_style.icon, "" + hair_style.icon_state + "_l" );
					hair_l.Blend( String13.ColorCode( ((int)( this.r_hair ??0 )), ((int)( this.g_hair ??0 )), ((int)( this.b_hair ??0 )) ), 0 );
					face_lying.Blend( hair_l, 3 );
				}
			}
			eyes_l = new Icon( "icons/mob/human_face.dmi", "eyes_l" );
			eyes_l.Blend( String13.ColorCode( ((int)( this.r_eyes ??0 )), ((int)( this.g_eyes ??0 )), ((int)( this.b_eyes ??0 )) ), 0 );
			face_lying.Blend( eyes_l, 3 );

			if ( Lang13.Bool( this.lip_style ) ) {
				face_lying.Blend( new Icon( "icons/mob/human_face.dmi", "lips_" + this.lip_style + "_l" ), 3 );
			}
			face_lying_image = new Image( face_lying );
			return face_lying_image;
		}

		// Function from file: update_icons.dm
		public void update_tail_showing( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic O = null;

			this.overlays.Remove( this.obj_overlays[23] );

			if ( Lang13.Bool( this.species.tail ) && Lang13.Bool( this.species.flags & 128 ) ) {
				
				if ( !Lang13.Bool( this.wear_suit ) || !GlobalFuncs.is_slot_hidden( this.wear_suit.body_parts_covered, 414 ) ) {
					O = this.obj_overlays[23];
					O.icon = "icons/effects/species.dmi";
					O.icon_state = "" + this.species.tail + "_s";
					this.overlays.Add( O );
					this.obj_overlays[23] = O;
				}
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public void update_mutantrace( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			string fat = null;
			bool skeleton = false;
			dynamic O = null;

			
			if ( this.mutations.Contains( 6 ) ) {
				fat = "fat";
			}
			skeleton = this.mutations.Contains( 29 );

			if ( skeleton ) {
				this.race_icon = "icons/mob/human_races/r_skeleton.dmi";
			} else {
				this.race_icon = this.species.icobase;
				this.deform_icon = this.species.deform;
			}
			this.overlays.Remove( this.obj_overlays[2] );

			if ( this.dna != null ) {
				
				switch ((string)( this.dna.mutantrace )) {
					case "golem":
					case "slime":
					case "shadow":
					case "adamantine":
					case "coalgolem":
						
						if ( Lang13.Bool( this.species ) && !Lang13.Bool( this.species.override_icon ) && this.species.has_mutant_race ) {
							O = this.obj_overlays[2];
							O.icon = "icons/effects/genetics.dmi";
							O.icon_state = "" + this.dna.mutantrace + fat + "_" + this.gender + "_s";
							this.overlays.Add( O );
							this.obj_overlays[2] = O;
						}
						break;
				}
			}

			if ( !( this.dna != null ) || !new ByTable(new object [] { "golem", "metroid" }).Contains( this.dna.mutantrace ) ) {
				this.update_body( false );
			}
			this.update_hair( false );

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public void update_hair( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic head_organ = null;
			Icon face_standing = null;
			SpriteAccessory facial_hair_style = null;
			Icon facial_s = null;
			SpriteAccessory hair_style = null;
			Icon hair_s = null;
			Image I = null;
			dynamic O = null;

			this.overlays.Remove( this.obj_overlays[15] );
			head_organ = this.get_organ( "head" );

			if ( !Lang13.Bool( head_organ ) || Lang13.Bool( head_organ.status & 64 ) ) {
				
				if ( update_icons == true ) {
					this.update_icons();
				}
				return;
			}

			if ( this.check_hidden_head_flags( 8193 ) && this.check_hidden_head_flags( 32768 ) ) {
				
				if ( update_icons == true ) {
					this.update_icons();
				}
				return;
			}
			face_standing = new Icon( "icons/mob/human_face.dmi", "bald_s" );

			if ( Lang13.Bool( this.f_style ) && !this.check_hidden_head_flags( 32768 ) ) {
				facial_hair_style = GlobalVars.facial_hair_styles_list[this.f_style];

				if ( facial_hair_style != null && facial_hair_style.species_allowed.Contains( this.species.name ) ) {
					facial_s = new Icon( facial_hair_style.icon, "" + facial_hair_style.icon_state + "_s" );

					if ( facial_hair_style.do_colouration ) {
						facial_s.Blend( String13.ColorCode( ((int)( this.r_facial ??0 )), ((int)( this.g_facial ??0 )), ((int)( this.b_facial ??0 )) ), 0 );
					}
					face_standing.Blend( facial_s, 3 );
				} else {
					Game13.log.WriteMsg( "## WARNING: " + ( "Invalid f_style for " + this.species.name + ": " + this.f_style ) );
				}
			}

			if ( Lang13.Bool( this.h_style ) && !this.check_hidden_head_flags( 8193 ) ) {
				hair_style = GlobalVars.hair_styles_list[this.h_style];

				if ( hair_style != null && hair_style.species_allowed.Contains( this.species.name ) ) {
					hair_s = new Icon( hair_style.icon, "" + hair_style.icon_state + "_s" );

					if ( hair_style.do_colouration ) {
						hair_s.Blend( String13.ColorCode( ((int)( this.r_hair ??0 )), ((int)( this.g_hair ??0 )), ((int)( this.b_hair ??0 )) ), 0 );
					}

					if ( hair_style.additional_accessories ) {
						hair_s.Blend( new Icon( hair_style.icon, "" + hair_style.icon_state + "_acc" ), 3 );
					}
					face_standing.Blend( hair_s, 3 );
				} else {
					Game13.log.WriteMsg( "## WARNING: " + ( "Invalid h_style for " + this.species.name + ": " + this.h_style ) );
				}
			}
			I = new Image( face_standing );
			O = this.obj_overlays[15];
			O.icon = I;
			O.icon_state = I.icon_state;
			this.overlays.Add( O );
			this.obj_overlays[15] = O;

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public void update_body( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			string husk_color_mod = null;
			string hulk_color_mod = null;
			string necrosis_color_mod = null;
			bool husk = false;
			bool? fat = null;
			bool hulk = false;
			bool skeleton = false;
			string g = null;
			Organ chest = null;
			ByTable TONE = null;
			dynamic head = null;
			bool has_head = false;
			Organ_External part = null;
			Icon temp = null;
			ByTable TONE2 = null;
			Icon temp2 = null;
			Icon mask = null;
			Icon husk_over = null;
			Icon eyes = null;

			husk_color_mod = "#605850";
			hulk_color_mod = "#30e028";
			necrosis_color_mod = "#0a3200";
			husk = this.mutations.Contains( 7 );
			fat = this.mutations.Contains( 6 ) && Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 8192 );
			hulk = this.mutations.Contains( 4 ) && this.species.name == "Horror";
			skeleton = this.mutations.Contains( 29 );
			g = "m";

			if ( this.gender == GlobalVars.FEMALE ) {
				g = "f";
			}
			chest = this.get_organ( "chest" );
			this.stand_icon = chest.get_icon( g, fat );

			if ( !skeleton ) {
				
				if ( husk ) {
					this.stand_icon.ColorTone( husk_color_mod );
				} else if ( hulk ) {
					TONE = GlobalFuncs.ReadRGB( hulk_color_mod );
					this.stand_icon.MapColors( String13.ColorCode( Convert.ToInt32( TONE[1] ), 0, 0 ), String13.ColorCode( 0, Convert.ToInt32( TONE[2] ), 0 ), String13.ColorCode( 0, 0, Convert.ToInt32( TONE[3] ) ) );
				}
			}
			head = this.get_organ( "head" );
			has_head = false;

			if ( Lang13.Bool( head ) && !Lang13.Bool( head.status & 64 ) ) {
				has_head = true;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				part = _a;
				

				if ( !( part is Organ_External_Chest ) && !( ( part.status & 64 ) != 0 ) ) {
					temp = null;

					if ( part is Organ_External_Groin || part is Organ_External_Head ) {
						temp = part.get_icon( g, fat );
					} else {
						temp = part.get_icon();
					}

					if ( ( part.status & 1024 ) != 0 ) {
						temp.ColorTone( necrosis_color_mod );
						temp.SetIntensity( 061 );
					} else if ( !skeleton ) {
						
						if ( husk ) {
							temp.ColorTone( husk_color_mod );
						} else if ( hulk ) {
							TONE2 = GlobalFuncs.ReadRGB( hulk_color_mod );
							temp.MapColors( String13.ColorCode( Convert.ToInt32( TONE2[1] ), 0, 0 ), String13.ColorCode( 0, Convert.ToInt32( TONE2[2] ), 0 ), String13.ColorCode( 0, 0, Convert.ToInt32( TONE2[3] ) ) );
						}
					}

					if ( ( part.icon_position & 3 ) != 0 ) {
						temp2 = new Icon( "icons/mob/human.dmi", "blank" );
						temp2.Insert( new Icon( temp, null, GlobalVars.NORTH ), null, GlobalVars.NORTH );
						temp2.Insert( new Icon( temp, null, GlobalVars.SOUTH ), null, GlobalVars.SOUTH );

						if ( !( ( part.icon_position & 1 ) != 0 ) ) {
							temp2.Insert( new Icon( temp, null, GlobalVars.EAST ), null, GlobalVars.EAST );
						}

						if ( !( ( part.icon_position & 2 ) != 0 ) ) {
							temp2.Insert( new Icon( temp, null, GlobalVars.WEST ), null, GlobalVars.WEST );
						}
						this.stand_icon.Blend( temp2, 3 );
						temp2 = new Icon( "icons/mob/human.dmi", "blank" );

						if ( ( part.icon_position & 1 ) != 0 ) {
							temp2.Insert( new Icon( temp, null, GlobalVars.EAST ), null, GlobalVars.EAST );
						}

						if ( ( part.icon_position & 2 ) != 0 ) {
							temp2.Insert( new Icon( temp, null, GlobalVars.WEST ), null, GlobalVars.WEST );
						}
						this.stand_icon.Blend( temp2, 6 );
					} else {
						this.stand_icon.Blend( temp, 3 );
					}
				}
			}

			if ( !skeleton && !husk && !hulk && Lang13.Bool( this.species.flags & 16 ) ) {
				
				if ( ( this.s_tone ??0) >= 0 ) {
					this.stand_icon.Blend( String13.ColorCode( ((int)( this.s_tone ??0 )), ((int)( this.s_tone ??0 )), ((int)( this.s_tone ??0 )) ), 0 );
				} else {
					this.stand_icon.Blend( String13.ColorCode( ((int)( -( this.s_tone ??0) )), ((int)( -( this.s_tone ??0) )), ((int)( -( this.s_tone ??0) )) ), 1 );
				}
			}

			if ( husk ) {
				mask = new Icon( this.stand_icon );
				husk_over = new Icon( this.race_icon, "overlay_husk" );
				mask.MapColors( 0, 0, 0, 1, 0, 0, 0, 1, 0, false, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0 );
				husk_over.Blend( mask, 0 );
				this.stand_icon.Blend( husk_over, 3 );
			}

			if ( has_head ) {
				
				if ( !skeleton ) {
					eyes = new Icon( "icons/mob/human_face.dmi", this.species.eyes );
					eyes.Blend( String13.ColorCode( ((int)( this.r_eyes ??0 )), ((int)( this.g_eyes ??0 )), ((int)( this.b_eyes ??0 )) ), 0 );
					this.stand_icon.Blend( eyes, 3 );
				}

				if ( Lang13.Bool( this.lip_style ) && Lang13.Bool( this.species ) && Lang13.Bool( this.species.flags & 32 ) ) {
					this.stand_icon.Blend( new Icon( "icons/mob/human_face.dmi", "lips_" + this.lip_style + "_s" ), 3 );
				}
			}

			if ( ( this.underwear ??0) > 0 && ( this.underwear ??0) < 12 && Lang13.Bool( this.species.flags & 64 ) ) {
				
				if ( !( fat == true ) && !skeleton ) {
					this.stand_icon.Blend( new Icon( "icons/mob/human.dmi", "underwear" + this.underwear + "_" + g + "_s" ), 3 );
				}
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			this.update_tail_showing( false );
			return;
		}

		// Function from file: update_icons.dm
		public Icon get_damage_icon_part( string damage_state = null, string body_part = null, string species_blood = null ) {
			species_blood = species_blood ?? "";

			dynamic I = null;
			Icon DI = null;

			I = GlobalVars.damage_icon_parts["" + damage_state + "/" + body_part + "/" + species_blood];

			if ( !Lang13.Bool( I ) ) {
				DI = new Icon( "icons/mob/dam_human.dmi", damage_state );
				DI.Blend( new Icon( "icons/mob/dam_mask.dmi", body_part ), 2 );

				if ( Lang13.Bool( species_blood ) ) {
					DI.Blend( species_blood, 2 );
				}
				GlobalVars.damage_icon_parts["" + damage_state + "/" + body_part + "/" + species_blood] = DI;
				return DI;
			} else {
				return I;
			}
		}

		// Function from file: update_icons.dm
		public void generate_overlays_icon(  ) {
			this.icon = this.stand_icon;
			return;
		}

		// Function from file: update_icons.dm
		public void species_override_icon(  ) {
			this.icon = this.species.override_icon;
			this.icon_state = "" + String13.ToLower( this.species.name ) + "_" + this.gender + ( Lang13.Bool( this.species.flags & 8192 ) ? ( ( this.mutations & 6 ) != null ? "_fat" : "" ) : "" );
			this.overlays.Remove( this.obj_overlays[2] );
			return;
		}

		// Function from file: update_icons.dm
		public void update_overlays_standing(  ) {
			
			if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.override_icon ) ) {
				this.species_override_icon();
			} else {
				this.generate_overlays_icon();
			}
			return;
		}

		// Function from file: update_icons.dm
		public void QueueUpdateDamageIcon( bool? forced = null ) {
			forced = forced ?? false;

			
			if ( forced == true ) {
				this.UpdateDamageIcon( true );
				this.update_overlays = false;
				return;
			}
			this.update_overlays = true;
			return;
		}

		// Function from file: say.dm
		public void forcesay( ByTable append = null ) {
			bool virgin = false;
			string temp = null;
			string trimmed = null;

			
			if ( this.stat == 0 ) {
				
				if ( this.client != null ) {
					virgin = true;
					temp = Interface13.WindowGet( this.client, "input", "text" );

					if ( String13.Find( temp, "Say \"", 1, 7 ) != 0 && Lang13.Length( temp ) > 5 ) {
						temp = GlobalFuncs.replacetext( temp, ";", "" );

						if ( String13.FindIgnoreCase( GlobalFuncs.trim_left( temp ), ":", 6, 7 ) != 0 ) {
							temp = String13.SubStr( GlobalFuncs.trim_left( temp ), 8, 0 );
							virgin = false;
						}

						if ( virgin ) {
							temp = String13.SubStr( GlobalFuncs.trim_left( temp ), 6, 0 );
							virgin = false;
						}

						while (String13.FindIgnoreCase( GlobalFuncs.trim_left( temp ), ":", 1, 2 ) != 0) {
							temp = String13.SubStr( GlobalFuncs.trim_left( temp ), 3, 0 );
						}

						if ( String13.FindIgnoreCase( temp, "*", 1, 2 ) != 0 ) {
							return;
						}
						trimmed = GlobalFuncs.trim_left( temp );

						if ( Lang13.Length( trimmed ) != 0 ) {
							
							if ( append != null ) {
								temp += Rand13.PickFromTable( append );
							}
							this.say( temp );
						}
						Interface13.WindowSet( this.client, "input", "text=" + null );
					}
				}
			}
			return;
		}

		// Function from file: say.dm
		public string GetSpecialVoice(  ) {
			return this.special_voice;
		}

		// Function from file: say.dm
		public void UnsetSpecialVoice(  ) {
			this.special_voice = "";
			return;
		}

		// Function from file: say.dm
		public void SetSpecialVoice( string new_voice = null ) {
			
			if ( Lang13.Bool( new_voice ) ) {
				this.special_voice = new_voice;
			}
			return;
		}

		// Function from file: life.dm
		public void profile_life_end( dynamic procname = null ) {
			return;
		}

		// Function from file: life.dm
		public void profile_life_start(  ) {
			return;
		}

		// Function from file: life.dm
		public void debug_life( dynamic stage = null, dynamic chat_message = null ) {
			return;
		}

		// Function from file: life.dm
		public void DeferredSpeciesSetup(  ) {
			bool mut_update = false;
			Species globalspecies = null;
			dynamic mutation = null;
			dynamic block = null;

			mut_update = false;
			globalspecies = GlobalVars.all_species[this.species.name];

			if ( globalspecies.default_mutations.len > 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( globalspecies.default_mutations )) {
					mutation = _a;
					

					if ( !this.mutations.Contains( mutation ) ) {
						this.mutations.Add( mutation );
						mut_update = true;
					}
				}
			}

			if ( globalspecies.default_blocks.len > 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( globalspecies.default_blocks )) {
					block = _b;
					

					if ( !this.dna.GetSEState( block ) ) {
						this.dna.SetSEState( block, true );
						mut_update = true;
					}
				}
			}

			if ( mut_update ) {
				GlobalFuncs.domutcheck( this, null, true );
				this.update_mutations();
			}
			return;
		}

		// Function from file: inventory.dm
		public bool has_organ_for_slot( dynamic slot = null ) {
			
			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return this.has_organ( "chest" );
			} else if ( _a==2 ) {
				return this.has_organ( "head" );
			} else if ( _a==3 ) {
				return this.has_organ( "l_hand" ) && this.has_organ( "r_hand" );
			} else if ( _a==19 ) {
				return this.has_organ( "l_leg" ) && this.has_organ( "r_leg" );
			} else if ( _a==4 ) {
				return this.has_organ( "l_hand" );
			} else if ( _a==5 ) {
				return this.has_organ( "r_hand" );
			} else if ( _a==6 ) {
				return this.has_organ( "chest" );
			} else if ( _a==7 ) {
				return true;
			} else if ( _a==8 ) {
				return this.has_organ( "head" );
			} else if ( _a==9 ) {
				return this.has_organ( "head" );
			} else if ( _a==10 ) {
				return this.has_organ( "l_hand" ) && this.has_organ( "r_hand" );
			} else if ( _a==11 ) {
				return this.has_organ( "head" );
			} else if ( _a==12 ) {
				return this.has_organ( "r_foot" ) && this.has_organ( "l_foot" );
			} else if ( _a==13 ) {
				return this.has_organ( "chest" );
			} else if ( _a==14 ) {
				return this.has_organ( "chest" );
			} else if ( _a==15 ) {
				return this.has_organ( "chest" );
			} else if ( _a==16 ) {
				return this.has_organ( "chest" );
			} else if ( _a==17 ) {
				return this.has_organ( "chest" );
			} else if ( _a==18 ) {
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public bool has_organ( string name = null ) {
			dynamic O = null;

			O = this.organs_by_name[name];
			return Lang13.Bool( O ) && !Lang13.Bool( O.status & 64 );
		}

		// Function from file: inventory.dm
		public dynamic is_in_hands( Type typepath = null ) {
			
			if ( Lang13.Bool( ((dynamic)typepath).IsInstanceOfType( this.l_hand ) ) ) {
				return this.l_hand;
			}

			if ( Lang13.Bool( ((dynamic)typepath).IsInstanceOfType( this.r_hand ) ) ) {
				return this.r_hand;
			}
			return 0;
		}

		// Function from file: inventory.dm
		public dynamic is_on_ears( Type typepath = null ) {
			return ((dynamic)typepath).IsInstanceOfType( this.ears );
		}

		// Function from file: inventory.dm
		public dynamic equip_in_one_of_slots( Obj_Item W = null, ByTable slots = null, int? act_on_fail = null ) {
			act_on_fail = act_on_fail ?? 1;

			dynamic slot = null;

			
			foreach (dynamic _a in Lang13.Enumerate( slots )) {
				slot = _a;
				

				if ( this.equip_to_slot_if_possible( W, slots[slot], 0 ) ) {
					return slot;
				}
			}

			switch ((int?)( act_on_fail )) {
				case 1:
					GlobalFuncs.qdel( W );
					W = null;
					break;
				case 2:
					W.loc = GlobalFuncs.get_turf( this );
					break;
			}
			return null;
		}

		// Function from file: inventory.dm
		public bool check_hidden_flags( ByTable items = null, int? hidden_flags = null ) {
			hidden_flags = hidden_flags ?? 0;

			int? ignore_slot = null;
			Obj_Item equipped = null;

			
			if ( !( items != null ) || !( items is ByTable ) ) {
				items = this.get_clothing_items();
			}
			items.Remove( new ByTable(new object [] { this.gloves, this.shoes, this.w_uniform, this.glasses, this.ears }) );

			if ( !Lang13.Bool( hidden_flags ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( items, typeof(Obj_Item) )) {
				equipped = _a;
				
				ignore_slot = ( equipped == this.wear_mask ? 4096 : 0 );

				if ( !( equipped != null ) ) {
					continue;
				} else if ( GlobalFuncs.is_slot_hidden( equipped.body_parts_covered, hidden_flags, ignore_slot ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: inventory.dm
		public bool check_hidden_body_flags( int? hidden_flags = null ) {
			hidden_flags = hidden_flags ?? 0;

			return this.check_hidden_flags( this.get_clothing_items( this.get_body_slots() ), hidden_flags );
		}

		// Function from file: inventory.dm
		public bool check_hidden_head_flags( int? hidden_flags = null ) {
			hidden_flags = hidden_flags ?? 0;

			return this.check_hidden_flags( this.get_clothing_items( this.get_head_slots() ), hidden_flags );
		}

		// Function from file: inventory.dm
		public ByTable check_obscured_slots(  ) {
			ByTable obscured = null;

			obscured = new ByTable();

			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( GlobalFuncs.is_slot_hidden( this.wear_suit.body_parts_covered, 1536 ) ) {
					obscured.Or( 10 );
				}

				if ( GlobalFuncs.is_slot_hidden( this.wear_suit.body_parts_covered, 414 ) ) {
					obscured.Or( 14 );
				}

				if ( GlobalFuncs.is_slot_hidden( this.wear_suit.body_parts_covered, 96 ) ) {
					obscured.Or( 12 );
				}
			}

			if ( Lang13.Bool( this.head ) ) {
				
				if ( GlobalFuncs.is_slot_hidden( this.head.body_parts_covered, 38912 ) ) {
					obscured.Or( 2 );
				}

				if ( GlobalFuncs.is_slot_hidden( this.head.body_parts_covered, 2048 ) ) {
					obscured.Or( 9 );
				}

				if ( GlobalFuncs.is_slot_hidden( this.head.body_parts_covered, 8192 ) ) {
					obscured.Or( 8 );
				}
			}

			if ( obscured.len > 0 ) {
				return obscured;
			} else {
				return null;
			}
		}

		// Function from file: inventory.dm
		public ByTable get_head_slots(  ) {
			return new ByTable(new object [] { this.head, this.wear_mask, this.glasses, this.ears });
		}

		// Function from file: inventory.dm
		public ByTable get_body_slots(  ) {
			return new ByTable(new object [] { 
				this.l_hand, 
				this.r_hand, 
				this.back, 
				this.s_store, 
				this.handcuffed, 
				this.legcuffed, 
				this.wear_suit, 
				this.gloves, 
				this.shoes, 
				this.belt, 
				this.wear_id, 
				this.l_store, 
				this.r_store, 
				this.w_uniform
			 });
		}

		// Function from file: human_defense.dm
		public void bloody_body( dynamic source = null, bool? update = null ) {
			update = update ?? false;

			
			if ( Lang13.Bool( this.wear_suit ) ) {
				((Ent_Static)this.wear_suit).add_blood( source );
				this.update_inv_wear_suit( update );
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				((Ent_Static)this.w_uniform).add_blood( source );
				this.update_inv_w_uniform( update );
			}
			return;
		}

		// Function from file: human_defense.dm
		[VerbInfo( name: "bloody hands" )]
		[VerbArg( 1, InputType.Mob )]
		public void f_bloody_hands( dynamic source = null, int? amount = null ) {
			amount = amount ?? 2;

			
			if ( Lang13.Bool( this.gloves ) ) {
				((Ent_Static)this.gloves).add_blood( source );
				this.gloves.transfer_blood = amount;
				this.gloves.bloody_hands_mob = source;
			} else {
				this.add_blood( source );
				this.bloody_hands = amount;
				this.bloody_hands_mob = source;
			}
			this.update_inv_gloves();
			return;
		}

		// Function from file: human_defense.dm
		public void knock_out_teeth( dynamic user = null ) {
			dynamic L = null;
			dynamic T = null;
			int amount = 0;
			dynamic teeth = null;
			Tile throw_to = null;

			L = user;
			T = Lang13.FindIn( typeof(ButcheringProduct_Teeth), this.butchering_drops );

			if ( !( T is ButcheringProduct_Teeth ) || Lang13.Bool( T.amount ) == false ) {
				return;
			}
			amount = Rand13.Int( 1, 3 );

			if ( Lang13.Bool( L.mutations.Contains( Lang13.Bool( L ) && 4 != 0 ) ) ) {
				amount += 8;
			}
			teeth = T.spawn_result( GlobalFuncs.get_turf( this ), this, amount );
			throw_to = Map13.GetStep( GlobalFuncs.get_turf( this ), this.dir );
			((Ent_Dynamic)teeth).throw_at( throw_to, 2, 2 );

			if ( Lang13.Bool( user ) ) {
				this.visible_message( "<span class='danger'>" + user + " knocks " + ( amount < 3 ? "some" : "a bunch" ) + " of " + this + "'s teeth out!</span>", "<span class='danger'>" + user + " knocks " + ( amount < 3 ? "some" : "a bunch" ) + " of your teeth out!</span>", null, "<span class='info'>" + user + " starts brushing " + this + "'s teeth.</span>", "<span class='info'>" + user + " has removed some of your wisdom teeth.</span>" );
			} else {
				this.visible_message( "<span class='danger'>" + ( amount < 3 ? "Some" : "A bunch" ) + " of " + this + "'s teeth fall out!</span>", "<span class='danger'>" + ( amount < 3 ? "Some" : "A bunch" ) + " of your teeth fall out!</span>", null, "<span class='info'>The tooth fairy takes some of " + this + "'s teeth out!</span>", "<span class='info'>The tooth fairy takes some of your teeth out, and gives you a dollar.</span>" );
			}
			return;
		}

		// Function from file: human_defense.dm
		public bool attacked_by( Obj_Item I = null, dynamic user = null, string def_zone = null ) {
			bool _default = false;

			dynamic target_zone = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Human newmeat = null;
			string affecting = null;
			dynamic hit_area = null;
			int? armor = null;
			dynamic T = null;
			int chance = 0;
			bool bloody = false;
			Ent_Static location = null;
			dynamic H = null;

			_default = true;

			if ( !( I != null ) || !Lang13.Bool( user ) ) {
				return false;
			}
			target_zone = GlobalFuncs.get_zone_with_miss_chance( ((dynamic)user.zone_sel).selecting, this );

			if ( user == this ) {
				target_zone = ((dynamic)user.zone_sel).selecting;
			}

			if ( !Lang13.Bool( target_zone ) && !Lang13.Bool( this.stat ) ) {
				this.visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " misses " ).item( this ).str( " with " ).the( I ).item().str( "!</span>" ).ToString() );
				return _default;
			}

			if ( I is Obj_Item_Weapon_Kitchen_Utensil_Knife_Large_Butch_Meatcleaver && this.stat == 2 && user.a_intent == "hurt" ) {
				newmeat = new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Human( GlobalFuncs.get_turf( this.loc ) );
				newmeat.name = this.real_name + newmeat.name;
				newmeat.subjectname = this.real_name;
				newmeat.subjectjob = this.job;
				((Reagents)newmeat.reagents).add_reagent( "nutriment", this.nutrition / 15 / 3 );
				((Reagents)this.reagents).trans_to( newmeat, Num13.Round( ( this.reagents.total_volume ??0) / 3, 1 ) );
				this.loc.add_blood( this );
				this.meatleft--;
				GlobalFuncs.to_chat( user, "<span class='warning'>You hack off a chunk of meat from " + this.name + "</span>" );

				if ( !( this.meatleft != 0 ) ) {
					this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] Was chopped up into meat by <b>" + user + "/" + user.ckey + "</b>" );
					user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] Chopped up <b>" + this + "/" + this.ckey + "</b> into meat</b>" );
					GlobalFuncs.msg_admin_attack( "" + user.name + " (" + user.ckey + ") chopped up " + this + " (" + this.ckey + ") into meat (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + user.x + ";Y=" + user.y + ";Z=" + user.z + "'>JMP</a>)" );

					if ( !( user is Mob_Living_Carbon ) ) {
						this.LAssailant = null;
					} else {
						this.LAssailant = user;
					}
					GlobalFuncs.qdel( this );
					return _default;
				}
			}
			affecting = this.get_organ( target_zone );

			if ( !Lang13.Bool( affecting ) ) {
				return _default;
			}

			if ( Lang13.Bool( ((dynamic)affecting).status & 64 ) ) {
				GlobalFuncs.to_chat( user, "What " + ((dynamic)affecting).display_name + "?" );
				return _default;
			}
			hit_area = ((dynamic)affecting).display_name;

			if ( user != this && this.check_shields( I.force, "the " + I.name ) ) {
				return false;
			}

			if ( I is Obj_Item_Weapon_Card_Emag ) {
				
				if ( !Lang13.Bool( ((dynamic)affecting).status & 128 ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>That limb isn't robotic.</span>" );
					return false;
				}

				if ( Lang13.Bool( ((dynamic)affecting).sabotaged ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>" + this + "'s " + ((dynamic)affecting).display_name + " is already sabotaged!</span>" );
				} else {
					GlobalFuncs.to_chat( user, "<span class='warning'>You sneakily slide " + I + " into the dataport on " + this + "'s " + ((dynamic)affecting).display_name + " and short out the safeties.</span>" );
					((dynamic)affecting).sabotaged = 1;
				}
				return false;
			}

			if ( I.attack_verb is ByTable && I.attack_verb.len != 0 ) {
				this.visible_message( "<span class='danger'>" + this + " has been " + Rand13.PickFromTable( I.attack_verb ) + " in the " + hit_area + " with " + I.name + " by " + user + "!</span>", "<span class='userdanger'>You have been " + Rand13.PickFromTable( I.attack_verb ) + " in the " + hit_area + " with " + I.name + " by " + user + "!</span>" );
			} else {
				this.visible_message( "<span class='danger'>" + this + " has been attacked in the " + hit_area + " with " + I.name + " by " + user + "!</span>", "<span class='userdanger'>You have been attacked in the " + hit_area + " with " + I.name + " by " + user + "!</span>" );
			}
			armor = this.run_armor_check( affecting, "melee", "Your armor has protected your " + hit_area + ".", "Your armor has softened hit to your " + hit_area + "." );

			if ( ( armor ??0) >= 2 ) {
				return true;
			}

			if ( !Lang13.Bool( I.force ) ) {
				return true;
			}

			if ( ((dynamic)user.zone_sel).selecting == "mouth" && target_zone == "head" ) {
				
				if ( !Lang13.Bool( armor ) && ( Convert.ToDouble( I.force ) >= 8 || Convert.ToDouble( I.w_class ) >= 2 ) && Convert.ToDouble( I.is_sharp() ) < 1 ) {
					T = Lang13.FindIn( typeof(ButcheringProduct_Teeth), this.butchering_drops );

					if ( Lang13.Bool( T ) && Convert.ToDouble( T.amount ) > 0 ) {
						chance = Num13.MinInt( Convert.ToInt32( I.force * I.w_class ), 40 );

						if ( Rand13.PercentChance( chance ) ) {
							this.knock_out_teeth( user );
						}
					}
				}
			}
			this.apply_damage( I.force, I.damtype, affecting, armor, I.is_sharp(), I );
			bloody = false;

			if ( ( I.damtype == "brute" || I.damtype == "halloss" ) && Rand13.PercentChance( Convert.ToInt32( I.force * 2 + 25 ) ) ) {
				I.add_blood( this );

				if ( Rand13.PercentChance( 33 ) ) {
					bloody = true;
					location = this.loc;

					if ( location is Tile_Simulated ) {
						location.add_blood( this );
					}

					if ( user is Mob_Living_Carbon_Human ) {
						H = user;

						if ( Map13.GetDistance( H, this ) <= 1 ) {
							((Mob_Living_Carbon_Human)H).bloody_body( this );
							((Mob_Living_Carbon_Human)H).f_bloody_hands( this );
						}
					}
				}

				dynamic _a = hit_area; // Was a switch-case, sorry for the mess.
				if ( _a=="head" ) {
					
					if ( Rand13.PercentChance( Convert.ToInt32( I.force ) ) ) {
						this.apply_effect( 20, "paralize", armor );
						this.visible_message( "<span class='danger'>" + this + " has been knocked unconscious!</span>" );

						if ( this != user && I.damtype == "brute" ) {
							((GameMode)GlobalVars.ticker.mode).remove_revolutionary( this.mind );
						}
					}

					if ( bloody ) {
						
						if ( Lang13.Bool( this.wear_mask ) ) {
							((Ent_Static)this.wear_mask).add_blood( this );
							this.update_inv_wear_mask( false );
						}

						if ( Lang13.Bool( this.head ) ) {
							((Ent_Static)this.head).add_blood( this );
							this.update_inv_head( false );
						}

						if ( Lang13.Bool( this.glasses ) && Rand13.PercentChance( 33 ) ) {
							((Ent_Static)this.glasses).add_blood( this );
							this.update_inv_glasses( false );
						}
					}
				} else if ( _a=="chest" ) {
					
					if ( Rand13.PercentChance( Convert.ToInt32( I.force + 10 ) ) ) {
						this.apply_effect( 5, "weaken", armor );
						this.visible_message( "<span class='danger'>" + this + " has been knocked down!</span>" );
					}

					if ( bloody ) {
						this.bloody_body( this );
					}
				}
			}
			return _default;
		}

		// Function from file: human_defense.dm
		public bool check_shields( dynamic damage = null, string attack_text = null ) {
			damage = damage ?? 0;
			attack_text = attack_text ?? "the attack";

			dynamic I = null;
			dynamic I2 = null;
			dynamic I3 = null;

			
			if ( Lang13.Bool( this.l_hand ) && this.l_hand is Obj_Item_Weapon ) {
				I = this.l_hand;

				if ( ((Obj_Item)I).IsShield() && ((Obj_Item)I).on_block( damage, attack_text ) ) {
					return true;
				}
			}

			if ( Lang13.Bool( this.r_hand ) && this.r_hand is Obj_Item_Weapon ) {
				I2 = this.r_hand;

				if ( ((Obj_Item)I2).IsShield() && ((Obj_Item)I2).on_block( damage, attack_text ) ) {
					return true;
				}
			}

			if ( Lang13.Bool( this.wear_suit ) && this.wear_suit is Obj_Item ) {
				I3 = this.wear_suit;

				if ( ((Obj_Item)I3).IsShield() && ((Obj_Item)I3).on_block( damage, attack_text ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: human_defense.dm
		public int get_exposed_body_parts(  ) {
			int body_coverage = 0;
			Obj_Item_Clothing C = null;

			body_coverage = 16383;

			foreach (dynamic _a in Lang13.Enumerate( this.get_clothing_items(), typeof(Obj_Item_Clothing) )) {
				C = _a;
				

				if ( !( C != null ) ) {
					continue;
				}
				body_coverage &= Convert.ToInt32( ~C.body_parts_covered );
			}
			return body_coverage;
		}

		// Function from file: human_defense.dm
		public Obj_Item_Clothing get_body_part_coverage( int? body_part_flags = null ) {
			body_part_flags = body_part_flags ?? 0;

			Obj_Item_Clothing C = null;

			
			if ( !Lang13.Bool( body_part_flags ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.get_clothing_items(), typeof(Obj_Item_Clothing) )) {
				C = _a;
				

				if ( !( C != null ) ) {
					continue;
				}

				if ( ( C.body_parts_covered & body_part_flags ) == body_part_flags ) {
					return C;
				}
			}
			return null;
		}

		// Function from file: human_defense.dm
		public bool check_body_part_coverage( int? body_part_flags = null ) {
			body_part_flags = body_part_flags ?? 0;

			Obj_Item_Clothing C = null;

			
			if ( !Lang13.Bool( body_part_flags ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.get_clothing_items(), typeof(Obj_Item_Clothing) )) {
				C = _a;
				

				if ( !( C != null ) ) {
					continue;
				}

				if ( Lang13.Bool( C.body_parts_covered & body_part_flags ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: human_defense.dm
		public double checkarmor( dynamic def_zone = null, string type = null ) {
			double protection = 0;
			ByTable body_parts = null;
			dynamic bp = null;
			dynamic C = null;

			
			if ( !Lang13.Bool( type ) ) {
				return 0;
			}
			protection = 0;
			body_parts = new ByTable(new object [] { this.head, this.wear_mask, this.wear_suit, this.w_uniform, this.gloves, this.shoes });

			foreach (dynamic _a in Lang13.Enumerate( body_parts )) {
				bp = _a;
				

				if ( !Lang13.Bool( bp ) ) {
					continue;
				}

				if ( Lang13.Bool( bp ) && bp is Obj_Item_Clothing ) {
					C = bp;

					if ( Lang13.Bool( C.body_parts_covered & def_zone.body_part ) ) {
						protection += Convert.ToDouble( C.armor[type] );
					}
				}
			}
			return protection;
		}

		// Function from file: human_defense.dm
		public double get_siemens_coefficient_organ( Organ_External def_zone = null ) {
			double siemens_coefficient = 0;
			ByTable clothing_items = null;
			Obj_Item_Clothing C = null;

			
			if ( !( def_zone != null ) ) {
				return 1;
			}
			siemens_coefficient = 1;
			clothing_items = new ByTable(new object [] { this.head, this.wear_mask, this.wear_suit, this.w_uniform, this.gloves, this.shoes });

			foreach (dynamic _a in Lang13.Enumerate( clothing_items, typeof(Obj_Item_Clothing) )) {
				C = _a;
				

				if ( C is Obj_Item_Clothing && Lang13.Bool( C.body_parts_covered & def_zone.body_part ) ) {
					siemens_coefficient *= Convert.ToDouble( C.siemens_coefficient );
				}
			}
			return siemens_coefficient;
		}

		// Function from file: human_damage.dm
		public dynamic get_organ( dynamic zone = null ) {
			
			if ( !Lang13.Bool( zone ) ) {
				zone = "chest";
			}

			if ( new ByTable(new object [] { "eyes", "mouth" }).Contains( zone ) ) {
				zone = "head";
			}
			return this.organs_by_name[zone];
		}

		// Function from file: human_damage.dm
		public bool HealDamage( dynamic zone = null, dynamic brute = null, dynamic burn = null ) {
			dynamic E = null;

			E = this.get_organ( zone );

			if ( E is Organ_External ) {
				
				if ( Lang13.Bool( E.heal_damage( brute, burn ) ) ) {
					this.UpdateDamageIcon();
					this.hud_updateflag |= 2;
				}
			} else {
				return false;
			}
			return false;
		}

		// Function from file: human_damage.dm
		public void restore_blood(  ) {
			bool blood_volume = false;

			
			if ( ( ( !Lang13.Bool( this.species.flags ) ?1:0) & 1 ) != 0 ) {
				blood_volume = this.vessel.get_reagent_amount( "blood" );
				this.vessel.add_reagent( "blood", 560 - ( blood_volume ?1:0) );
			}
			return;
		}

		// Function from file: human_damage.dm
		public ByTable get_damageable_organs(  ) {
			ByTable parts = null;
			Organ_External O = null;

			parts = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				O = _a;
				

				if ( O.brute_dam + O.burn_dam < O.max_damage ) {
					parts.Add( O );
				}
			}
			return parts;
		}

		// Function from file: human_damage.dm
		public ByTable get_damaged_organs( dynamic brute = null, dynamic burn = null ) {
			ByTable parts = null;
			Organ_External O = null;

			parts = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				O = _a;
				

				if ( Lang13.Bool( brute ) && O.brute_dam != 0 || Lang13.Bool( burn ) && O.burn_dam != 0 ) {
					parts.Add( O );
				}
			}
			return parts;
		}

		// Function from file: human_damage.dm
		public void adjustFireLossByPart( double amount = 0, dynamic organ_name = null, dynamic damage_source = null ) {
			dynamic O = null;

			
			if ( Lang13.Bool( this.species ) && this.species.burn_mod != 0 ) {
				amount = amount * this.species.burn_mod;
			}

			if ( this.organs_by_name.Contains( organ_name ) ) {
				O = this.get_organ( organ_name );

				if ( amount > 0 ) {
					new ByTable().Set( 1, 0 ).Set( 2, amount ).Set( "sharp", ((Obj)damage_source).is_sharp() ).Set( "edge", GlobalFuncs.has_edge( damage_source ) ).Set( "used_weapon", damage_source ).Apply( Lang13.BindFunc( O, "take_damage" ) );
				} else {
					new ByTable().Set( 1, 0 ).Set( 2, -amount ).Set( "internal", 0 ).Set( "robo_repair", O.status & 128 ).Apply( Lang13.BindFunc( O, "heal_damage" ) );
				}
			}
			this.hud_updateflag |= 2;
			return;
		}

		// Function from file: human_damage.dm
		public void adjustBruteLossByPart( int amount = 0, dynamic organ_name = null, dynamic damage_source = null ) {
			dynamic O = null;

			
			if ( Lang13.Bool( this.species ) && this.species.brute_mod != 0 ) {
				amount = amount * this.species.brute_mod;
			}

			if ( this.organs_by_name.Contains( organ_name ) ) {
				O = this.get_organ( organ_name );

				if ( amount > 0 ) {
					new ByTable().Set( 1, amount ).Set( 2, 0 ).Set( "sharp", ((Obj)damage_source).is_sharp() ).Set( "edge", GlobalFuncs.has_edge( damage_source ) ).Set( "used_weapon", damage_source ).Apply( Lang13.BindFunc( O, "take_damage" ) );
				} else {
					new ByTable().Set( 1, -amount ).Set( 2, 0 ).Set( "internal", 0 ).Set( "robo_repair", O.status & 128 ).Apply( Lang13.BindFunc( O, "heal_damage" ) );
				}
			}
			this.hud_updateflag |= 2;
			return;
		}

		// Function from file: human_attackhand.dm
		public void afterattack( dynamic target = null, dynamic user = null, dynamic inrange = null, dynamic _params = null ) {
			return;
		}

		// Function from file: human.dm
		[VerbInfo( name: "Write in blood", desc: "Use blood on your hands to write a short message on the floor or a wall, murder mystery style.", group: "IC" )]
		public bool bloody_doodle(  ) {
			Ent_Static T = null;
			dynamic direction = null;
			int num_doodles = 0;
			Obj_Effect_Decal_Cleanable_Blood_Writing W = null;
			int max_length = 0;
			dynamic message = null;
			double used_blood_amount = 0;
			Game_Data W2 = null;

			
			if ( Lang13.Bool( this.stat ) ) {
				return false;
			}

			if ( Task13.User != this ) {
				return false;
			}

			if ( !Lang13.Bool( this.bloody_hands ) ) {
				this.verbs.Remove( typeof(Mob_Living_Carbon_Human).GetMethod( "bloody_doodle" ) );
			}

			if ( Lang13.Bool( this.gloves ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>Your " + this.gloves + " are getting in the way.</span>" );
				return false;
			}
			T = this.loc;

			if ( !( T is Tile_Simulated ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot reach the floor.</span>" );
				return false;
			}
			direction = Interface13.Input( this, "Which way?", "Tile selection", null, new ByTable(new object [] { "Here", "North", "South", "East", "West" }), InputType.Any );

			if ( direction != "Here" ) {
				T = Map13.GetStep( T, GlobalFuncs.text2dir( direction ) );
			}

			if ( !( T is Tile_Simulated ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot doodle there.</span>" );
				return false;
			}
			num_doodles = 0;

			foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Effect_Decal_Cleanable_Blood_Writing) )) {
				W = _a;
				
				num_doodles++;
			}

			if ( num_doodles > 4 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>There is no space to write on!</span>" );
				return false;
			}
			max_length = ( this.bloody_hands ??0) * 30;
			message = GlobalFuncs.stripped_input( this, "Write a message. It cannot be longer than " + max_length + " characters.", "Blood writing", "" );

			if ( Lang13.Bool( message ) ) {
				used_blood_amount = Num13.Round( Lang13.Length( message ) / 30, 1 );
				this.bloody_hands = Num13.MaxInt( 0, ((int)( ( this.bloody_hands ??0) - used_blood_amount )) );

				if ( Lang13.Length( message ) > max_length ) {
					message += "-";
					GlobalFuncs.to_chat( this, "<span class='warning'>You ran out of blood to write with!</span>" );
				}
				W2 = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood_Writing), T );
				((dynamic)W2).New( T );
				((dynamic)W2).basecolor = ( Lang13.Bool( this.hand_blood_color ) ? this.hand_blood_color : "#A10808" );
				((dynamic)W2).update_icon();
				((dynamic)W2).message = message;
				((dynamic)W2).add_fingerprint( this );
			}
			return false;
		}

		// Function from file: human.dm
		public bool set_species( dynamic new_species_name = null, bool? force_organs = null, dynamic default_colour = null ) {
			Base_Data S = null;

			
			if ( Lang13.Bool( new_species_name ) ) {
				
				if ( Lang13.Bool( this.species ) && Lang13.Bool( this.species.name ) && this.species.name == new_species_name ) {
					return false;
				}
			} else if ( this.dna != null ) {
				new_species_name = this.dna.species;
			} else {
				new_species_name = "Human";
			}

			if ( Lang13.Bool( this.species ) ) {
				
				if ( Lang13.Bool( this.species.abilities ) ) {
					this.verbs.Remove( this.species.abilities );
				}

				if ( Lang13.Bool( this.species.language ) ) {
					this.remove_language( this.species.language );
				}
			}
			S = GlobalVars.all_species[new_species_name];
			this.species = Lang13.Call( S.type );

			if ( Lang13.Bool( this.species.language ) ) {
				this.add_language( this.species.language );
			}

			if ( Lang13.Bool( this.species.default_language ) ) {
				this.add_language( this.species.default_language );
			}

			if ( Lang13.Bool( this.species.abilities ) ) {
				
				if ( Lang13.Bool( this.species.abilities ) ) {
					this.verbs.Or( this.species.abilities );
				}
			}

			if ( force_organs == true || !( this.organs != null ) || !( this.organs.len != 0 ) ) {
				((Species)this.species).create_organs( this );
			}
			this.see_in_dark = this.species.darksight;

			if ( this.see_in_dark > 2 ) {
				this.see_invisible = 35;
			} else {
				this.see_invisible = 25;
			}

			if ( this.species.default_mutations.len > 0 || this.species.default_blocks.len > 0 ) {
				this.do_deferred_species_setup = true;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.dna.species = new_species_name;
				this.update_icons();
				return;
			}));
			((Species)this.species).handle_post_spawn( this );
			return true;
		}

		// Function from file: human.dm
		public void handle_embedded_objects(  ) {
			Organ_External organ = null;
			Obj_Item_Weapon O = null;
			string msg = null;

			
			foreach (dynamic _c in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				organ = _c;
				

				if ( ( organ.status & 256 ) != 0 ) {
					continue;
				}

				foreach (dynamic _b in Lang13.Enumerate( organ.implants, typeof(Obj_Item_Weapon) )) {
					O = _b;
					

					if ( !( O is Obj_Item_Weapon_Implant ) && Rand13.PercentChance( 5 ) ) {
						msg = null;

						switch ((int)( Rand13.Int( 1, 3 ) )) {
							case 1:
								msg = "<span class='warning'>A spike of pain jolts your " + organ.display_name + " as you bump " + O + " inside.</span>";
								break;
							case 2:
								msg = "<span class='warning'>Your movement jostles " + O + " in your " + organ.display_name + " painfully.</span>";
								break;
							case 3:
								msg = "<span class='warning'>" + O + " in your " + organ.display_name + " twists painfully as you move.</span>";
								break;
						}
						GlobalFuncs.to_chat( this, msg );
						organ.take_damage( Rand13.Int( 1, 3 ), 0, false );

						if ( !( ( organ.status & 4224 ) != 0 ) ) {
							organ.status |= 8;
							this.adjustToxLoss( Rand13.Int( 1, 3 ) );
						}
					}
				}
			}
			return;
		}

		// Function from file: human.dm
		public ByTable get_visible_implants( bool? _class = null ) {
			_class = _class ?? false;

			ByTable visible_implants = null;
			Organ_External organ = null;
			Obj_Item_Weapon O = null;

			visible_implants = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Organ_External) )) {
				organ = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( organ.implants, typeof(Obj_Item_Weapon) )) {
					O = _a;
					

					if ( !( O is Obj_Item_Weapon_Implant ) && Convert.ToDouble( O.w_class ) > ( _class == true ?1:0) && !( O is Obj_Item_Weapon_Shard_Shrapnel ) ) {
						visible_implants.Add( O );
					}
				}
			}
			return visible_implants;
		}

		// Function from file: human.dm
		public void rupture_lung(  ) {
			Organ_Internal L = null;

			L = this.internal_organs_by_name["lungs"];

			if ( L != null && !L.is_bruised() ) {
				this.custom_pain( "You feel a stabbing pain in your chest!", true );
				L.damage = L.min_bruised_damage;
			}
			return;
		}

		// Function from file: human.dm
		public bool is_lung_ruptured(  ) {
			Organ_Internal L = null;

			L = this.internal_organs_by_name["lungs"];
			return L != null && L.is_bruised();
		}

		// Function from file: human.dm
		public void increase_germ_level( dynamic n = null ) {
			
			if ( Lang13.Bool( this.gloves ) ) {
				this.gloves.germ_level += n;
			} else {
				this.germ_level += Convert.ToDouble( n );
			}
			return;
		}

		// Function from file: human.dm
		public string get_visible_gender(  ) {
			
			if ( Lang13.Bool( this.wear_suit ) && GlobalFuncs.is_slot_hidden( this.wear_suit.body_parts_covered, 414 ) && ( GlobalFuncs.is_slot_hidden( this.head.body_parts_covered, 38912 ) || GlobalFuncs.is_slot_hidden( this.wear_mask.body_parts_covered, 38912 ) ) ) {
				return GlobalVars.NEUTER;
			}
			return this.gender;
		}

		// Function from file: human.dm
		public bool can_mind_interact( Mob_Living M = null ) {
			dynamic temp_turf = null;
			dynamic our_turf = null;
			Mob_Living H = null;

			
			if ( !( M is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			temp_turf = GlobalFuncs.get_turf( M );
			our_turf = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( temp_turf ) ) {
				return false;
			}

			if ( temp_turf.z != our_turf.z || M.stat != 0 ) {
				
				if ( Convert.ToInt32( temp_turf.z ) != 2 ) {
					GlobalFuncs.to_chat( this, "The mind of " + M + " is too faint..." );
				}
				return false;
			}

			if ( M.mutations.Contains( 204 ) ) {
				GlobalFuncs.to_chat( this, "The mind of " + M + " is resisting!" );
				return false;
			}
			H = M;

			if ( Lang13.Bool( ((dynamic)H).head ) && ((dynamic)H).head is Obj_Item_Clothing_Head_Tinfoil ) {
				GlobalFuncs.to_chat( this, "Interference is disrupting the connection with the mind of " + M + "." );
				return false;
			}
			return true;
		}

		// Function from file: human.dm
		[VerbInfo( name: "Morph", group: "Mutant Abilities" )]
		public void morph(  ) {
			dynamic new_facial = null;
			dynamic new_hair = null;
			dynamic new_eyes = null;
			dynamic new_tone = null;
			dynamic all_hairs = null;
			ByTable hairs = null;
			dynamic x = null;
			dynamic H = null;
			dynamic new_style = null;
			dynamic all_fhairs = null;
			ByTable fhairs = null;
			dynamic x2 = null;
			dynamic H2 = null;
			string new_gender = null;

			
			if ( this.stat != 0 ) {
				this.reset_view( 0 );
				this.remoteview_target = null;
				return;
			}

			if ( !this.mutations.Contains( 105 ) ) {
				this.verbs.Remove( typeof(Mob_Living_Carbon_Human).GetMethod( "morph" ) );
				return;
			}
			new_facial = Interface13.Input( "Please select facial hair color.", "Character Generation", String13.ColorCode( ((int)( this.r_facial ??0 )), ((int)( this.g_facial ??0 )), ((int)( this.b_facial ??0 )) ), null, null, InputType.Color );

			if ( Lang13.Bool( new_facial ) ) {
				this.r_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 2, 4 ) );
				this.g_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 4, 6 ) );
				this.b_facial = GlobalFuncs.hex2num( String13.SubStr( new_facial, 6, 8 ) );
			}
			new_hair = Interface13.Input( "Please select hair color.", "Character Generation", String13.ColorCode( ((int)( this.r_hair ??0 )), ((int)( this.g_hair ??0 )), ((int)( this.b_hair ??0 )) ), null, null, InputType.Color );

			if ( Lang13.Bool( new_facial ) ) {
				this.r_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 2, 4 ) );
				this.g_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 4, 6 ) );
				this.b_hair = GlobalFuncs.hex2num( String13.SubStr( new_hair, 6, 8 ) );
			}
			new_eyes = Interface13.Input( "Please select eye color.", "Character Generation", String13.ColorCode( ((int)( this.r_eyes ??0 )), ((int)( this.g_eyes ??0 )), ((int)( this.b_eyes ??0 )) ), null, null, InputType.Color );

			if ( Lang13.Bool( new_eyes ) ) {
				this.r_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 2, 4 ) );
				this.g_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 4, 6 ) );
				this.b_eyes = GlobalFuncs.hex2num( String13.SubStr( new_eyes, 6, 8 ) );
			}
			new_tone = Interface13.Input( "Please select skin tone level: 1-220 (1=albino, 35=caucasian, 150=black, 220='very' black)", "Character Generation", "" + ( 35 - ( this.s_tone ??0) ), null, null, InputType.Str );

			if ( !Lang13.Bool( new_tone ) ) {
				new_tone = 35;
			}
			this.s_tone = Num13.MaxInt( Num13.MinInt( Num13.Floor( String13.ParseNumber( new_tone ) ??0 ), 220 ), 1 );
			this.s_tone = -( this.s_tone ??0) + 35;
			all_hairs = Lang13.GetTypes( typeof(SpriteAccessory_Hair) ) - typeof(SpriteAccessory_Hair);
			hairs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( all_hairs )) {
				x = _a;
				
				H = Lang13.Call( x );
				hairs.Add( H.name );
				GlobalFuncs.qdel( H );
				H = null;
			}
			new_style = Interface13.Input( "Please select hair style", "Character Generation", this.h_style, null, hairs, InputType.Null | InputType.Any );

			if ( Lang13.Bool( new_style ) ) {
				this.h_style = new_style;
			}
			all_fhairs = Lang13.GetTypes( typeof(SpriteAccessory_FacialHair) ) - typeof(SpriteAccessory_FacialHair);
			fhairs = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( all_fhairs )) {
				x2 = _b;
				
				H2 = Lang13.Call( x2 );
				fhairs.Add( H2.name );
				GlobalFuncs.qdel( H2 );
				H2 = null;
			}
			new_style = Interface13.Input( "Please select facial style", "Character Generation", this.f_style, null, fhairs, InputType.Null | InputType.Any );

			if ( Lang13.Bool( new_style ) ) {
				this.f_style = new_style;
			}
			new_gender = Interface13.Alert( Task13.User, "Please select gender.", "Character Generation", "Male", "Female" );

			if ( Lang13.Bool( new_gender ) ) {
				
				if ( new_gender == "Male" ) {
					this.setGender( GlobalVars.MALE );
				} else {
					this.setGender( GlobalVars.FEMALE );
				}
			}
			this.regenerate_icons();
			this.check_dna();
			this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " morphs and changes " ).item( ( this.get_visible_gender() == GlobalVars.MALE ? "his" : ( this.get_visible_gender() == GlobalVars.FEMALE ? "her" : "their" ) ) ).str( " appearance!</span>" ).ToString(), "<span class='notice'>You change your appearance!</span>", "<span class='warning'>Oh, god!  What the hell was that?  It sounded like flesh getting squished and bone ground into a different shape!</span>" );
			return;
		}

		// Function from file: human.dm
		public void vomit( bool? hairball = null ) {
			hairball = hairball ?? false;

			Ent_Static location = null;

			
			if ( !this.lastpuke ) {
				this.lastpuke = true;
				GlobalFuncs.to_chat( this, "<spawn class='warning'>You feel nauseous...</span>" );
				Task13.Schedule( 150, (Task13.Closure)(() => {
					GlobalFuncs.to_chat( this, "<spawn class='danger'>You feel like you are about to throw up!</span>" );
					Task13.Schedule( 100, (Task13.Closure)(() => {
						this.Stun( 5 );

						if ( hairball == true ) {
							this.visible_message( "<span class='warning'>" + this + " hacks up a hairball!</span>", "<span class='danger'>You hack up a hairball!</span>" );
						} else {
							this.visible_message( "<span class='warning'>" + this + " throws up!</span>", "<span class='danger'>You throw up!</span>" );
						}
						GlobalFuncs.playsound( this.loc, "sound/effects/splat.ogg", 50, 1 );
						location = this.loc;

						if ( location is Tile_Simulated ) {
							location.add_vomit_floor( this, true );
						}

						if ( !( hairball == true ) ) {
							this.nutrition = Num13.MaxInt( ((int)( this.nutrition - 40 )), 0 );
							this.adjustToxLoss( -3 );
						}
						Task13.Schedule( 350, (Task13.Closure)(() => {
							this.lastpuke = false;
							return;
						}));
						return;
					}));
					return;
				}));
			}
			return;
		}

		// Function from file: human.dm
		public void play_xylophone(  ) {
			dynamic song = null;

			
			if ( !this.xylophone ) {
				this.visible_message( "<span class='warning'>" + this + " begins playing his ribcage like a xylophone. It's quite spooky.</span>", "<span class='notice'>You begin to play a spooky refrain on your ribcage.</span>", "<span class='notice'>You hear a spooky xylophone melody.</span>" );
				song = Rand13.Pick(new object [] { "sound/effects/xylophone1.ogg", "sound/effects/xylophone2.ogg", "sound/effects/xylophone3.ogg" });
				GlobalFuncs.playsound( this.loc, song, 50, 1, -1 );
				this.xylophone = true;
				Task13.Schedule( 1200, (Task13.Closure)(() => {
					this.xylophone = false;
					return;
				}));
			}
			return;
		}

		// Function from file: human.dm
		public void check_dna(  ) {
			this.dna.check_integrity( this );
			return;
		}

		// Function from file: human.dm
		public string num2slotname( dynamic slot_id = null ) {
			
			dynamic _a = slot_id; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return "back";
			} else if ( _a==2 ) {
				return "mask";
			} else if ( _a==3 ) {
				return "handcuffed";
			} else if ( _a==4 ) {
				return "l_hand";
			} else if ( _a==5 ) {
				return "r_hand";
			} else if ( _a==6 ) {
				return "belt";
			} else if ( _a==7 ) {
				return "id";
			} else if ( _a==8 ) {
				return "ears";
			} else if ( _a==9 ) {
				return "eyes";
			} else if ( _a==10 ) {
				return "gloves";
			} else if ( _a==11 ) {
				return "head";
			} else if ( _a==12 ) {
				return "shoes";
			} else if ( _a==13 ) {
				return "suit";
			} else if ( _a==14 ) {
				return "uniform";
			} else if ( _a==15 ) {
				return "l_store";
			} else if ( _a==16 ) {
				return "r_store";
			} else if ( _a==17 ) {
				return "s_store";
			} else if ( _a==18 ) {
				return "in_backpack";
			} else if ( _a==19 ) {
				return "h_store";
			} else {
				return "";
			}
			return null;
		}

		// Function from file: human.dm
		public string get_id_name( string if_no_id = null ) {
			if_no_id = if_no_id ?? "Unknown";

			string _default = null;

			dynamic pda = null;
			dynamic id = null;

			pda = this.wear_id;
			id = this.wear_id;

			if ( pda is Obj_Item_Device_Pda ) {
				_default = pda.owner;
			} else if ( id is Obj_Item_Weapon_Card_Id ) {
				_default = id.registered_name;
			}

			if ( !Lang13.Bool( _default ) ) {
				_default = if_no_id;
			}
			return _default;
		}

		// Function from file: human.dm
		public dynamic get_face_name(  ) {
			Organ_External_Head head = null;

			head = this.get_organ( "head" );

			if ( !( head != null ) || head.disfigured || ( head.status & 64 ) != 0 || !Lang13.Bool( this.real_name ) || this.mutations.Contains( 7 ) ) {
				return "Unknown";
			}
			return this.real_name;
		}

		// Function from file: human.dm
		public dynamic get_visible_name(  ) {
			dynamic face_name = null;
			string id_name = null;

			
			if ( Lang13.Bool( this.wear_mask ) && GlobalFuncs.is_slot_hidden( this.wear_mask.body_parts_covered, 38912 ) && !( this.wear_mask is Obj_Item_Clothing_Mask_Gas_Golem ) ) {
				return this.get_id_name( "Unknown" );
			}

			if ( Lang13.Bool( this.head ) && GlobalFuncs.is_slot_hidden( this.head.body_parts_covered, 38912 ) ) {
				return this.get_id_name( "Unknown" );
			}

			if ( this.mind != null && this.mind.vampire != null && this.mind.vampire.powers.Contains( 14 ) && this.mind.vampire.ismenacing ) {
				return this.get_id_name( "Unknown" );
			}
			face_name = this.get_face_name();
			id_name = this.get_id_name( "" );

			if ( Lang13.Bool( id_name ) && id_name != face_name ) {
				return "" + face_name + " (as " + id_name + ")";
			}
			return face_name;
		}

		// Function from file: human.dm
		public string get_authentification_name( string if_no_id = null ) {
			if_no_id = if_no_id ?? "Unknown";

			string _default = null;

			dynamic pda = null;
			dynamic id = null;

			pda = this.wear_id;
			id = this.wear_id;

			if ( pda is Obj_Item_Device_Pda ) {
				
				if ( Lang13.Bool( pda.id ) ) {
					_default = pda.id.registered_name;
				} else {
					_default = pda.owner;
				}
			} else if ( id is Obj_Item_Weapon_Card_Id ) {
				_default = id.registered_name;
			} else {
				return if_no_id;
			}
			return _default;
		}

		// Function from file: human.dm
		public dynamic get_assignment( string if_no_id = null, string if_no_job = null ) {
			if_no_id = if_no_id ?? "No id";
			if_no_job = if_no_job ?? "No job";

			dynamic _default = null;

			dynamic pda = null;
			dynamic id = null;

			pda = this.wear_id;
			id = this.wear_id;

			if ( pda is Obj_Item_Device_Pda ) {
				
				if ( Lang13.Bool( pda.id ) && pda.id is Obj_Item_Weapon_Card_Id ) {
					_default = pda.id.assignment;
				} else {
					_default = pda.ownjob;
				}
			} else if ( id is Obj_Item_Weapon_Card_Id ) {
				_default = id.assignment;
			} else {
				return if_no_id;
			}

			if ( !Lang13.Bool( _default ) ) {
				_default = if_no_job;
			}
			return _default;
		}

		// Function from file: human.dm
		public bool is_loyalty_implanted( Mob_Living_Carbon_Human M = null ) {
			dynamic L = null;
			Organ_External O = null;

			
			foreach (dynamic _b in Lang13.Enumerate( M.contents )) {
				L = _b;
				

				if ( L is Obj_Item_Weapon_Implant_Loyalty ) {
					
					foreach (dynamic _a in Lang13.Enumerate( M.organs, typeof(Organ_External) )) {
						O = _a;
						

						if ( O.implants.Contains( L ) ) {
							return true;
						}
					}
				}
			}
			return false;
		}

		// Function from file: death.dm
		public void Drain(  ) {
			this.ChangeToHusk();
			this.mutations.Or( 8 );
			return;
		}

		// Function from file: death.dm
		public void ChangeToHusk(  ) {
			
			if ( this.mutations.Contains( 7 ) ) {
				return;
			}

			if ( Lang13.Bool( this.f_style ) ) {
				this.f_style = "Shaved";
			}

			if ( Lang13.Bool( this.h_style ) ) {
				this.h_style = "Bald";
			}
			this.update_hair( false );
			this.mutations.Add( 7 );
			this.status_flags |= 16384;
			this.update_body( false );
			this.update_mutantrace();
			this.vessel.remove_reagent( "blood", this.vessel.get_reagent_amount( "blood" ) );
			return;
		}

		// Function from file: death.dm
		public void makeSkeleton(  ) {
			
			if ( this.mutations.Contains( 29 ) ) {
				return;
			}

			if ( Lang13.Bool( this.f_style ) ) {
				this.f_style = "Shaved";
			}

			if ( Lang13.Bool( this.h_style ) ) {
				this.h_style = "Bald";
			}
			this.update_hair( false );
			this.mutations.Add( 29 );
			this.status_flags |= 16384;
			this.update_body( false );
			this.update_mutantrace();
			return;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_SimpleAnimal_Corgi corgize(  ) {
			Obj_Item W = null;
			dynamic t = null;
			Mob_Living_SimpleAnimal_Corgi new_corgi = null;

			
			if ( this.monkeyizing ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.drop_from_inventory( W );
			}
			this.dropBorers();
			this.regenerate_icons();
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.delayNextAttack( 50 );

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			new_corgi = new Mob_Living_SimpleAnimal_Corgi( GlobalFuncs.get_turf( this ) );
			new_corgi.a_intent = "hurt";
			new_corgi.key = this.key;
			GlobalFuncs.to_chat( new_corgi, "<B>You are now a Corgi. Yap Yap!</B>" );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return new_corgi;
		}

		// Function from file: transform_procs.dm
		public dynamic slimeize( dynamic adult = null, dynamic reproduce = null ) {
			Obj_Item W = null;
			dynamic t = null;
			dynamic new_slime = null;
			int? number = null;
			ByTable babies = null;
			int? i = null;
			Mob_Living_Carbon_Slime M = null;

			
			if ( this.monkeyizing ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.drop_from_inventory( W );
			}
			this.dropBorers();
			this.regenerate_icons();
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.delayNextAttack( 50 );

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			new_slime = null;

			if ( Lang13.Bool( reproduce ) ) {
				number = Lang13.IntNullable( Rand13.PickWeighted(new object [] { 4287, 2, 34910, 3, 65535, 4 }) );
				babies = new ByTable();
				i = null;
				i = 1;

				while (( i ??0) <= ( number ??0)) {
					M = new Mob_Living_Carbon_Slime( GlobalFuncs.get_turf( this ) );
					M.nutrition = Num13.Floor( this.nutrition / ( number ??0) );
					Map13.StepAway( M, this, null );
					babies.Add( M );
					i++;
				}
				new_slime = Rand13.PickFromTable( babies );
			} else if ( Lang13.Bool( adult ) ) {
				new_slime = new Mob_Living_Carbon_Slime_Adult( GlobalFuncs.get_turf( this ) );
			} else {
				new_slime = new Mob_Living_Carbon_Slime( GlobalFuncs.get_turf( this ) );
			}
			new_slime.a_intent = "hurt";
			new_slime.key = this.key;
			GlobalFuncs.to_chat( new_slime, "<B>You are now a slime. Skreee!</B>" );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return new_slime;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_Carbon_Alien_Humanoid Alienize(  ) {
			Obj_Item W = null;
			dynamic t = null;
			dynamic alien_caste = null;
			Mob_Living_Carbon_Alien_Humanoid new_xeno = null;

			
			if ( this.monkeyizing ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.drop_from_inventory( W );
			}
			this.dropBorers();
			this.regenerate_icons();
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.delayNextAttack( 50 );

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			alien_caste = Rand13.Pick(new object [] { "Hunter", "Sentinel", "Drone" });
			new_xeno = null;

			dynamic _c = alien_caste; // Was a switch-case, sorry for the mess.
			if ( _c=="Hunter" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Hunter( GlobalFuncs.get_turf( this ) );
			} else if ( _c=="Sentinel" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Sentinel( GlobalFuncs.get_turf( this ) );
			} else if ( _c=="Drone" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Drone( GlobalFuncs.get_turf( this ) );
			}
			new_xeno.a_intent = "hurt";
			new_xeno.key = this.key;
			GlobalFuncs.to_chat( new_xeno, "<B>You are now an alien.</B>" );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return new_xeno;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_Silicon_Robot_Mommi MoMMIfy( bool? round_start = null ) {
			round_start = round_start ?? false;

			Mob_Living_Silicon_Robot_Mommi _default = null;

			Obj_Item W = null;
			dynamic t = null;
			Mob_Living_Silicon_Robot_Mommi O = null;

			
			if ( this.monkeyizing ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.drop_from_inventory( W );
			}
			this.dropBorers();
			this.regenerate_icons();
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.delayNextAttack( 50 );

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			O = new Mob_Living_Silicon_Robot_Mommi( GlobalFuncs.get_turf( this ) );
			_default = O;
			O.cell = new Obj_Item_Weapon_Cell( O );
			O.cell.maxcharge = ( round_start == true ? 10000 : 15000 );
			O.cell.charge = ( round_start == true ? 10000 : 15000 );
			O.setGender( this.gender );
			O.invisibility = 0;

			if ( this.mind != null ) {
				this.mind.transfer_to( O );

				if ( O.mind.assigned_role == "Cyborg" ) {
					O.mind.original = O;
				} else if ( this.mind != null && Lang13.Bool( this.mind.special_role ) ) {
					O.mind.store_memory( "In case you look at this after being borged, the objectives are only here until I find a way to make them not show up for you, as I can't simply delete them without screwing up round-end reporting. --NeoFite" );
				}
			} else {
				O.key = this.key;
			}
			O.loc = this.loc;
			O.job = "Cyborg";
			O.mmi = new Obj_Item_Device_Mmi( O );
			((Obj_Item_Device_Mmi)O.mmi).transfer_identity( this );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				O.__CallVerb("Namepick" );
				return;
			}));
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return _default;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_Silicon_Robot Robotize( bool? delete_items = null ) {
			delete_items = delete_items ?? false;

			Mob_Living_Silicon_Robot _default = null;

			Obj_Item W = null;
			dynamic t = null;
			Mob_Living_Silicon_Robot O = null;

			
			if ( this.monkeyizing ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				

				if ( delete_items == true ) {
					GlobalFuncs.qdel( W );
				} else {
					this.drop_from_inventory( W );
				}
			}
			this.dropBorers();
			this.regenerate_icons();
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.delayNextAttack( 50 );

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			O = new Mob_Living_Silicon_Robot( GlobalFuncs.get_turf( this ) );
			_default = O;
			O.cell = new Obj_Item_Weapon_Cell( O );
			O.cell.maxcharge = 7500;
			O.cell.charge = 7500;
			O.setGender( this.gender );
			O.invisibility = 0;

			if ( this.mind != null ) {
				this.mind.transfer_to( O );

				if ( O.mind.assigned_role == "Cyborg" ) {
					O.mind.original = O;
				} else if ( this.mind != null && Lang13.Bool( this.mind.special_role ) ) {
					O.mind.store_memory( "In case you look at this after being borged, the objectives are only here until I find a way to make them not show up for you, as I can't simply delete them without screwing up round-end reporting. --NeoFite" );
				}
			} else {
				O.key = this.key;
			}
			O.loc = this.loc;
			O.job = "Cyborg";
			O.mmi = new Obj_Item_Device_Mmi( O );
			((Obj_Item_Device_Mmi)O.mmi).transfer_identity( this );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				O.__CallVerb("Namepick" );
				return;
			}));
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return _default;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_SimpleAnimal_Hostile_Retaliate_Cluwne Cluwneize(  ) {
			Obj_Item W = null;
			dynamic t = null;
			Mob_Living_SimpleAnimal_Hostile_Retaliate_Cluwne new_mob = null;

			
			if ( this.monkeyizing ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.drop_from_inventory( W );
			}
			this.regenerate_icons();
			this.dropBorers();
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.delayNextAttack( 50 );

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			new_mob = new Mob_Living_SimpleAnimal_Hostile_Retaliate_Cluwne( GlobalFuncs.get_turf( this ) );
			new_mob.setGender( this.gender );
			new_mob.name = Rand13.PickFromTable( GlobalVars.clown_names );
			new_mob.real_name = new_mob.name;
			new_mob.mutations.Add( 5 );
			new_mob.mutations.Add( 6 );
			new_mob.setBrainLoss( 100 );
			new_mob.a_intent = "hurt";
			new_mob.key = this.key;
			GlobalFuncs.to_chat( new_mob, "<span class='sinister'>Instantly, what was your clothes fall off, and are replaced with a mockery of all that is clowning; Disgusting-looking garb that the foulest of creatures would be afraid of wearing. Your very face begins to shape, mold, into something truely disgusting. A mask made of flesh. Your body is feeling the worst pain it has ever felt. As you think it cannot get any worse, one of your arms turns into a horrific meld of flesh and plastic, making a limb made entirely of bike horns.</span>" );
			GlobalFuncs.to_chat( new_mob, "<span class='sinister'>Your very soul is being torn apart. What was organs, blood, flesh, is now darkness. And inside the infernal void that was once a living being, something sinister takes root. As what you were goes away, you try to let out a frantic plea of 'Help me! Please god help me!' but your god has abandoned you, and all that leaves your horrible mouth is a strangled 'HONK!'.</span>" );
			new_mob.say( "HONK!" );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return new_mob;
		}

		// Function from file: transform_procs.dm
		public dynamic monkeyize(  ) {
			Obj_Item W = null;
			dynamic t = null;
			dynamic O = null;
			Disease D = null;

			
			if ( this.monkeyizing ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				

				if ( W == this.w_uniform ) {
					continue;
				}
				this.drop_from_inventory( W );
			}
			this.regenerate_icons();
			this.dropBorers();
			this.monkeyizing = true;
			this.canmove = false;
			this.delayNextAttack( 50 );
			this.icon = null;
			this.invisibility = 101;

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, "h2monkey", 15 );
			Task13.Sleep( 33 );

			if ( !( this.species.primitive != null ) ) {
				this.gib();
				return null;
			}
			O = null;
			O = Lang13.Call( this.species.primitive, GlobalFuncs.get_turf( this ) );
			O.dna = this.dna.Clone();
			((Dna)O.dna).SetSEState( GlobalVars.MONKEYBLOCK, true );
			((Dna)O.dna).SetSEValueRange( GlobalVars.MONKEYBLOCK, 3500, 4095 );
			O.loc = this.loc;
			O.viruses = this.viruses;
			this.viruses = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( O.viruses, typeof(Disease) )) {
				D = _c;
				
				D.affected_mob = O;
			}

			if ( this.client != null ) {
				this.client.mob = O;
			}

			if ( this.mind != null ) {
				this.mind.transfer_to( O );
			}
			GlobalFuncs.to_chat( O, "<B>You are now " + O + ". </B>" );
			GlobalFuncs.qdel( this );
			return O;
		}

		// Function from file: mob.dm
		public void equip_or_collect( dynamic W = null, int? slot = null ) {
			dynamic B = null;

			
			if ( !this.equip_to_slot_or_drop( W, slot ) ) {
				B = this.back;

				if ( !Lang13.Bool( B ) ) {
					B = this.is_in_hands( typeof(Obj_Item_Weapon_Storage_Bag_Plasticbag) );
				}

				if ( !Lang13.Bool( B ) ) {
					B = new Obj_Item_Weapon_Storage_Bag_Plasticbag( null );

					if ( !this.put_in_hands( B ) ) {
						return;
					}
				}
				((Obj_Item_Weapon_Storage)B).handle_item_insertion( W, true );
			}
			return;
		}

		// Function from file: inventory.dm
		public bool equip_if_possible( dynamic W = null, int slot = 0, bool? act_on_fail = null ) {
			act_on_fail = act_on_fail ?? true;

			bool equipped = false;
			dynamic B = null;

			equipped = false;

			switch ((int)( slot )) {
				case 1:
					
					if ( !Lang13.Bool( this.back ) ) {
						this.back = W;
						equipped = true;
					}
					break;
				case 2:
					
					if ( !Lang13.Bool( this.wear_mask ) ) {
						this.wear_mask = W;
						equipped = true;
					}
					break;
				case 3:
					
					if ( !Lang13.Bool( this.handcuffed ) ) {
						this.handcuffed = W;
						equipped = true;
					}
					break;
				case 4:
					
					if ( !Lang13.Bool( this.l_hand ) ) {
						this.l_hand = W;
						equipped = true;
					}
					break;
				case 5:
					
					if ( !Lang13.Bool( this.r_hand ) ) {
						this.r_hand = W;
						equipped = true;
					}
					break;
				case 6:
					
					if ( !Lang13.Bool( this.belt ) && Lang13.Bool( this.w_uniform ) ) {
						this.belt = W;
						equipped = true;
					}
					break;
				case 7:
					
					if ( !Lang13.Bool( this.wear_id ) && Lang13.Bool( this.w_uniform ) ) {
						this.wear_id = W;
						equipped = true;
					}
					break;
				case 8:
					
					if ( !Lang13.Bool( this.ears ) ) {
						this.ears = W;
						equipped = true;
					}
					break;
				case 9:
					
					if ( !Lang13.Bool( this.glasses ) ) {
						this.glasses = W;
						equipped = true;
					}
					break;
				case 10:
					
					if ( !Lang13.Bool( this.gloves ) ) {
						this.gloves = W;
						equipped = true;
					}
					break;
				case 11:
					
					if ( !Lang13.Bool( this.head ) ) {
						this.head = W;
						equipped = true;
					}
					break;
				case 12:
					
					if ( !Lang13.Bool( this.shoes ) ) {
						this.shoes = W;
						equipped = true;
					}
					break;
				case 13:
					
					if ( !Lang13.Bool( this.wear_suit ) ) {
						this.wear_suit = W;
						equipped = true;
					}
					break;
				case 14:
					
					if ( !Lang13.Bool( this.w_uniform ) ) {
						this.w_uniform = W;
						equipped = true;
					}
					break;
				case 15:
					
					if ( !Lang13.Bool( this.l_store ) && Lang13.Bool( this.w_uniform ) ) {
						this.l_store = W;
						equipped = true;
					}
					break;
				case 16:
					
					if ( !Lang13.Bool( this.r_store ) && Lang13.Bool( this.w_uniform ) ) {
						this.r_store = W;
						equipped = true;
					}
					break;
				case 17:
					
					if ( !Lang13.Bool( this.s_store ) && Lang13.Bool( this.wear_suit ) ) {
						this.s_store = W;
						equipped = true;
					}
					break;
				case 18:
					
					if ( Lang13.Bool( this.back ) && this.back is Obj_Item_Weapon_Storage_Backpack ) {
						B = this.back;

						if ( B.contents.len < Convert.ToDouble( B.storage_slots ) && Convert.ToDouble( W.w_class ) <= Convert.ToDouble( B.max_w_class ) ) {
							W.loc = B;
							equipped = true;
						}
					}
					break;
			}

			if ( equipped ) {
				W.layer = 20;

				if ( Lang13.Bool( this.back ) && W.loc != this.back ) {
					W.loc = this;
				}
			} else {
				
				switch ((bool?)( act_on_fail )) {
					case true:
						GlobalFuncs.qdel( W );
						W = null;
						break;
					case 2 != 0:
						W.loc = GlobalFuncs.get_turf( this );
						break;
				}
			}
			return equipped;
		}

		// Function from file: crew.dm
		public bool monitor_check(  ) {
			bool _default = false;

			dynamic T = null;

			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}

			if ( Convert.ToInt32( T.z ) == 2 ) {
				return false;
			}

			if ( Convert.ToDouble( T.z ) >= GlobalVars.map.zLevels.len ) {
				return false;
			}
			_default = true;
			return _default;
		}

		// Function from file: vox_raiders.dm
		public bool equip_vox_raider(  ) {
			Obj_Item_Device_Radio_Headset_Syndicate R = null;
			Obj_Item_Weapon_Crossbow W = null;
			Obj_Item_Stack_Rods A = null;
			Obj_Item_Weapon_Card_Id_Syndicate C = null;
			Obj_Item_Weapon_Storage_Wallet W2 = null;

			R = new Obj_Item_Device_Radio_Headset_Syndicate(  );
			R.set_frequency( GlobalVars.SYND_FREQ );
			this.equip_to_slot_or_del( R, 8 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Vox_VoxRobes( this ), 14 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Magboots_Vox( this ), 12 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Yellow_Vox( this ), 10 );

			switch ((int)( GlobalVars.vox_tick )) {
				case 1:
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Vox_Carapace( this ), 13 );
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Vox_Carapace( this ), 11 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Telebaton( this ), 6 );
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal_Monocle( this ), 9 );
					this.equip_to_slot_or_del( new Obj_Item_Device_Chameleon( this ), 15 );
					W = new Obj_Item_Weapon_Crossbow( this );
					W.cell = new Obj_Item_Weapon_Cell_Crap( W );
					W.cell.charge = 500;
					this.equip_to_slot_or_del( W, 5 );
					A = new Obj_Item_Stack_Rods( this );
					A.amount = 20;
					this.equip_to_slot_or_del( A, 4 );
					break;
				case 2:
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Vox_Pressure( this ), 13 );
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Vox_Pressure( this ), 11 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Utility_Full( this ), 6 );
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Meson( this ), 9 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box_Emps( this ), 5 );
					this.equip_to_slot_or_del( new Obj_Item_Device_Multitool( this ), 4 );
					break;
				case 3:
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Vox_Carapace( this ), 13 );
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Vox_Carapace( this ), 11 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Utility_Full( this ), 6 );
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal_Monocle( this ), 9 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_Card_Emag( this ), 15 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Dartgun_Vox_Raider( this ), 5 );
					this.equip_to_slot_or_del( new Obj_Item_Device_Multitool( this ), 4 );
					break;
				case 4:
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Vox_Pressure( this ), 13 );
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Vox_Pressure( this ), 11 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Utility_Full( this ), 6 );
					this.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Hud_Health( this ), 9 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_CircularSaw( this ), 15 );
					this.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Dartgun_Vox_Medical(), 5 );
					break;
			}
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Breath_Vox( this ), 2 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Tank_Nitrogen( this ), 1 );
			this.equip_to_slot_or_del( new Obj_Item_Device_Flashlight( this ), 16 );
			C = new Obj_Item_Weapon_Card_Id_Syndicate( this );
			C.name = "" + this.real_name + "'s Legitimate Human ID Card";
			C.icon_state = "id";
			C.access = new ByTable(new object [] { GlobalVars.access_syndicate });
			C.assignment = "Trader";
			C.registered_name = this.real_name;
			W2 = new Obj_Item_Weapon_Storage_Wallet( this );
			W2.handle_item_insertion( C );
			this.equip_to_slot_or_del( W2, 7 );
			GlobalVars.vox_tick++;

			if ( GlobalVars.vox_tick > 4 ) {
				GlobalVars.vox_tick = 1;
			}
			return true;
		}

		// Function from file: striketeam_syndicate.dm
		public bool equip_syndicate_commando( bool? syndicate_leader_selected = null ) {
			syndicate_leader_selected = syndicate_leader_selected ?? false;

			Obj_Item_Device_Radio_Headset_Syndicate R = null;
			Obj_Item_Weapon_Card_Id_Syndicate W = null;

			R = new Obj_Item_Device_Radio_Headset_Syndicate(  );
			R.set_frequency( GlobalVars.SYND_FREQ );
			this.equip_to_slot_or_del( R, 8 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Syndicate( this ), 14 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Swat( this ), 12 );

			if ( !( syndicate_leader_selected == true ) ) {
				this.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Syndicate_Black( this ), 13 );
			} else {
				this.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Syndicate_Black_Red( this ), 13 );
			}
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Swat( this ), 10 );

			if ( !( syndicate_leader_selected == true ) ) {
				this.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Syndicate_Black( this ), 11 );
			} else {
				this.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Syndicate_Black_Red( this ), 11 );
			}
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_Syndicate( this ), 2 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal( this ), 9 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Security( this ), 1 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_AmmoStorage_Box_C45( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Firstaid_Regular( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Plastique( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_Device_Flashlight( this ), 18 );

			if ( !( syndicate_leader_selected == true ) ) {
				this.equip_to_slot_or_del( new Obj_Item_Weapon_Plastique( this ), 18 );
			} else {
				this.equip_to_slot_or_del( new Obj_Item_Weapon_Pinpointer( this ), 18 );
				this.equip_to_slot_or_del( new Obj_Item_Weapon_Disk_Nuclear( this ), 18 );
			}
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Energy_Sword( this ), 15 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Grenade_Empgrenade( this ), 16 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Tank_EmergencyOxygen( this ), 17 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Projectile_Silenced( this ), 6 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_PulseRifle( this ), 5 );
			W = new Obj_Item_Weapon_Card_Id_Syndicate( this );
			W.name = "" + this.real_name + "'s ID Card";
			W.icon_state = "id";
			W.access = GlobalFuncs.get_all_accesses();
			W.access += new ByTable(new object [] { GlobalVars.access_cent_general, GlobalVars.access_cent_specops, GlobalVars.access_cent_living, GlobalVars.access_cent_storage, GlobalVars.access_syndicate });
			W.assignment = "Syndicate Commando";
			W.registered_name = this.real_name;
			this.equip_to_slot_or_del( W, 7 );
			return true;
		}

		// Function from file: striketeam.dm
		public bool equip_death_commando( bool? leader_selected = null ) {
			leader_selected = leader_selected ?? false;

			Obj_Item_Weapon_Implant_Loyalty L = null;
			Obj_Item_Weapon_Card_Id W = null;

			this.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Deathsquad(  ), 8 );

			if ( leader_selected == false ) {
				this.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Green( this ), 14 );
			} else {
				this.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Rank_CentcomOfficer( this ), 14 );
			}
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Magboots_Deathsquad( this ), 12 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Rig_Deathsquad( this ), 13 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Combat( this ), 10 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Rig_Deathsquad( this ), 11 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_Swat( this ), 2 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Thermal( this ), 9 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Security( this ), 1 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_AmmoStorage_Box_A357( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Firstaid_Regular( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Pinpointer( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Shield_Energy( this ), 18 );

			if ( !( leader_selected == true ) ) {
				this.equip_to_slot_or_del( new Obj_Item_Weapon_Plastique( this ), 18 );
			} else {
				this.equip_to_slot_or_del( new Obj_Item_Weapon_Disk_Nuclear( this ), 18 );
			}
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Melee_Energy_Sword( this ), 15 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Tank_EmergencyOxygen_Double( this ), 17 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Projectile_Mateba( this ), 6 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_PulseRifle( this ), 5 );
			L = new Obj_Item_Weapon_Implant_Loyalty( this );
			L.imp_in = this;
			L.implanted = true;
			W = new Obj_Item_Weapon_Card_Id( this );
			W.name = "" + this.real_name + "'s ID Card";
			W.icon_state = "centcom";
			W.access = GlobalFuncs.get_centcom_access( "Death Commando" );
			W.icon_state = "deathsquad";
			W.assignment = "Death Commando";
			W.registered_name = this.real_name;
			this.equip_to_slot_or_del( W, 7 );
			return true;
		}

		// Function from file: vampire.dm
		public void handle_vampire(  ) {
			
			if ( this.hud_used != null ) {
				
				if ( !( this.hud_used.vampire_blood_display != null ) ) {
					this.hud_used.vampire_hud();
				}
				((dynamic)this.hud_used.vampire_blood_display).maptext_width = 64;
				((dynamic)this.hud_used.vampire_blood_display).maptext_height = 32;
				((dynamic)this.hud_used.vampire_blood_display).maptext = "<div align='left' valign='top' style='position:relative; top:0px; left:6px'> U:<font color='#33FF33' size='1'>" + this.mind.vampire.bloodusable + "</font><br> T:<font color='#FFFF00' size='1'>" + this.mind.vampire.bloodtotal + "</font></div>";
			}
			this.handle_vampire_cloak();
			this.handle_vampire_menace();
			this.handle_vampire_smite();

			if ( this.loc is Tile_Space ) {
				this.check_sun();
			}

			if ( this.loc is Obj_Structure_Closet_Coffin ) {
				this.adjustBruteLoss( -4 );
				this.adjustFireLoss( -4 );
				this.adjustToxLoss( -4 );
				this.mind.vampire.smitecounter = 0;
				this.mind.vampire.nullified -= 5;
			}
			this.mind.vampire.nullified = Num13.MaxInt( 0, this.mind.vampire.nullified - 1 );
			return;
		}

		// Function from file: vampire.dm
		public void handle_vampire_smite(  ) {
			int smitetemp = 0;
			bool vampcoat = false;
			dynamic T = null;

			smitetemp = 0;
			vampcoat = this.wear_suit is Obj_Item_Clothing_Suit_Storage_Draculacoat;

			if ( GlobalFuncs.check_holy( this ) ) {
				smitetemp += ( vampcoat ? 1 : 5 );

				if ( Rand13.PercentChance( 35 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>This ground is blessed. Get away, or splatter it with blood to make it safe for you.</span>" );
				}
			}

			if ( !this.mind.vampire.powers.Contains( 13 ) && GlobalFuncs.get_area( this ) == typeof(Zone_Chapel) ) {
				this.mind.vampire.nullified = Num13.MaxInt( 5, this.mind.vampire.nullified + 2 );

				if ( Rand13.PercentChance( 35 ) ) {
					GlobalFuncs.to_chat( this, "<span class='sinister'>You feel yourself growing weaker.</span>" );
				}
			}

			if ( !( this.mind.vampire.nullified != 0 ) ) {
				
				if ( this.mind.vampire.powers.Contains( 13 ) ) {
					smitetemp -= 1;
				}

				if ( this.mind.vampire.powers.Contains( 14 ) ) {
					T = GlobalFuncs.get_turf( this );

					if ( ((Tile)T).get_lumcount() * 10 < 2 ) {
						smitetemp -= 1;
					}
				}

				if ( this.mind.vampire.powers.Contains( 16 ) ) {
					smitetemp -= 1;
				}
			}

			if ( smitetemp <= 0 ) {
				smitetemp = -1;
			}
			this.mind.vampire.smitecounter = Num13.MaxInt( 0, ((int)( this.mind.vampire.smitecounter + smitetemp )) );

			dynamic _a = this.mind.vampire.smitecounter; // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=30 ) {
				this.dizziness = Num13.MaxInt( 5, this.dizziness );

				if ( Rand13.PercentChance( 35 ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You feel sick.</span>" );
				}
			} else if ( 30<=_a&&_a<=60 ) {
				this.dizziness = Num13.MaxInt( 5, this.dizziness + 1 );
				this.remove_vampire_blood( 1 );

				if ( Rand13.PercentChance( 35 ) ) {
					this.confused = Num13.MaxInt( 5, this.confused );
					GlobalFuncs.to_chat( this, "<span class='warning'>You feel very sick.</span>" );
				}
			} else if ( 60<=_a&&_a<=90 ) {
				this.dizziness = Num13.MaxInt( 10, this.dizziness + 3 );
				this.mind.vampire.nullified = Num13.MaxInt( 20, this.mind.vampire.nullified );
				this.remove_vampire_blood( 2 );

				if ( Rand13.PercentChance( 8 ) ) {
					this.vomit();
				}

				if ( Rand13.PercentChance( 35 ) ) {
					this.confused = Num13.MaxInt( 5, this.confused );
					GlobalFuncs.to_chat( this, "<span class='warning'>You feel extremely sick. Get to a coffin as soon as you can.</span>" );
				}
			} else if ( 90<=_a&&_a<=100 ) {
				this.dizziness = Num13.MaxInt( 10, this.dizziness + 6 );
				this.mind.vampire.nullified = Num13.MaxInt( 20, this.mind.vampire.nullified + 1 );
				this.remove_vampire_blood( 5 );
				this.confused = Num13.MaxInt( 10, this.confused );
				this.adjustFireLoss( 1 );

				if ( Rand13.PercentChance( 35 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>Your skin sizzles!</span>" );
					this.visible_message( "<span class='danger'>" + this + "'s skin sizzles!</span>" );
				}
			} else if ( 100<=_a&&_a<=Double.PositiveInfinity ) {
				this.dizziness = Num13.MaxInt( 50, this.dizziness + 8 );
				this.mind.vampire.nullified = Num13.MaxInt( 50, this.mind.vampire.nullified + 10 );
				this.remove_vampire_blood( 10 );
				this.confused = Num13.MaxInt( 10, this.confused );

				if ( !this.on_fire ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>Your skin catches fire!</span>" );
				} else if ( Rand13.PercentChance( 35 ) ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>The holy flames continue to burn your flesh!</span>" );
				}
				this.fire_stacks += 5;
				this.IgniteMob();
			}
			return;
		}

		// Function from file: vampire.dm
		public void check_sun(  ) {
			double ax = 0;
			double ay = 0;
			double i = 0;
			Tile T = null;

			ax = this.x;
			ay = this.y;

			foreach (dynamic _a in Lang13.IterateRange( 1, 20 )) {
				i = _a;
				
				ax += GlobalVars.sun.dx;
				ay += GlobalVars.sun.dy;
				T = Map13.GetTile( ((int)( Num13.Round( ax, 0.5 ) )), ((int)( Num13.Round( ay, 0.5 ) )), this.z );

				if ( T.x == 1 || T.x == Game13.map_size_x || T.y == 1 || T.y == Game13.map_size_y ) {
					break;
				}

				if ( T.density ) {
					return;
				}
			}

			if ( Rand13.PercentChance( 45 ) ) {
				
				dynamic _b = this.health; // Was a switch-case, sorry for the mess.
				if ( 80<=_b&&_b<=100 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Your skin flakes away...</span>" );
					this.adjustFireLoss( 1 );
				} else if ( 60<=_b&&_b<=80 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Your skin sizzles!</span>" );
					this.adjustFireLoss( 1 );
				} else if ( Double.NegativeInfinity<=_b&&_b<=60 ) {
					
					if ( !this.on_fire ) {
						GlobalFuncs.to_chat( this, "<span class='danger'>Your skin catches fire!</span>" );
					} else {
						GlobalFuncs.to_chat( this, "<span class='danger'>You continue to burn!</span>" );
					}
					this.fire_stacks += 5;
					this.IgniteMob();
				}
				this.emote( "scream", null, null, true );
			} else {
				
				dynamic _c = this.health; // Was a switch-case, sorry for the mess.
				if ( Double.NegativeInfinity<=_c&&_c<=60 ) {
					this.fire_stacks++;
					this.IgniteMob();
				}
			}
			this.adjustFireLoss( 3 );
			return;
		}

		// Function from file: response_team.dm
		public bool equip_strike_team( bool? leader_selected = null ) {
			leader_selected = leader_selected ?? false;

			Obj_Machinery_Camera camera = null;
			Obj_Item_Weapon_Card_Id W = null;

			this.equip_to_slot_or_del( new Obj_Item_Device_Radio_Headset_Ert(  ), 8 );
			camera = new Obj_Machinery_Camera( this );
			camera.network = "CREED";
			camera.c_tag = this.real_name;
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Syndicate_Tacticool( this ), 14 );
			this.equip_to_slot_or_del( new Obj_Item_Device_Flashlight( this ), 15 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Clipboard( this ), 16 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Gun_Energy_Gun( this ), 6 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_Swat( this ), 2 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Sunglasses_Sechud( this ), 9 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Swat( this ), 12 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_Swat( this ), 10 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Backpack_Security( this ), 1 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Box_Engineer( this ), 18 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Firstaid_Regular( this ), 18 );
			W = new Obj_Item_Weapon_Card_Id( this );
			W.assignment = "Emergency Responder" + ( leader_selected == true ? " Leader" : "" );
			W.registered_name = this.real_name;
			W.name = "" + this.real_name + "'s ID Card (" + W.assignment + ")";

			if ( !( leader_selected == true ) ) {
				W.access = GlobalFuncs.get_centcom_access( "Emergency Responder" );
				W.icon_state = "ERT_empty";
			} else {
				W.access = GlobalFuncs.get_centcom_access( "Emergency Responders Leader" );
				W.icon_state = "ERT_leader";
			}
			this.equip_to_slot_or_del( W, 7 );
			return true;
		}

		// Function from file: atoms.dm
		public override void setGender( string gend = null ) {
			gend = gend ?? GlobalVars.FEMALE;

			string old_gender = null;

			
			if ( gend == GlobalVars.PLURAL || gend == GlobalVars.NEUTER || gend != GlobalVars.FEMALE && gend != GlobalVars.MALE ) {
				Task13.Crash( "SOMEBODY SET A BAD GENDER ON " + this + " " + gend );
			}
			old_gender = this.gender;
			this.gender = gend;
			Game13.log.WriteMsg( "## TESTING: " + ( "Set " + this + "'s gender to " + gend + ", old gender " + old_gender + " previous gender " + this.prev_gender ) );
			return;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();

			if ( !Lang13.Bool( this.mind.assigned_role ) ) {
				this.mind.assigned_role = "Assistant";
			}
			return;
		}

		// Function from file: human.dm
		public override void update_action_buttons(  ) {
			int num = 0;
			ByTable used = null;
			Obj_Screen_ItemAction actionitem = null;
			Obj_Item I = null;
			Game_Data newactionitem = null;

			num = 1;

			if ( !( this.hud_used != null ) ) {
				return;
			}

			if ( !( this.client != null ) ) {
				return;
			}
			used = new ByTable();

			if ( !this.hud_used.hud_shown ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.hud_used.item_action_list, typeof(Obj_Screen_ItemAction) )) {
				actionitem = _b;
				

				if ( actionitem.owner != null && actionitem.owner.loc == this ) {
					actionitem.overlay.appearance = actionitem.owner.appearance;
					((dynamic)actionitem.overlay).dir = GlobalVars.SOUTH;

					switch ((int)( num )) {
						case 1:
							actionitem.screen_loc = "WEST:6,NORTH-1:26";
							break;
						case 2:
							actionitem.screen_loc = "WEST+1:8,NORTH-1:26";
							break;
						case 3:
							actionitem.screen_loc = "WEST+2:10,NORTH-1:26";
							break;
						case 4:
							actionitem.screen_loc = "WEST+3:12,NORTH-1:26";
							break;
						case 5:
							actionitem.screen_loc = "WEST+4:14,NORTH-1:26";
							break;
					}
					used.Add( actionitem.owner );
					num++;
				} else {
					this.client.screen.Remove( actionitem );
					this.client.images.Remove( actionitem.overlay );
					this.hud_used.item_action_list.Remove( actionitem );
					GlobalFuncs.returnToPool( actionitem );
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( this.contents - used, typeof(Obj_Item) )) {
				I = _d;
				

				if ( Lang13.Bool( I.action_button_name ) && num < 6 ) {
					newactionitem = GlobalFuncs.getFromPool( typeof(Obj_Screen_ItemAction), null, I );
					((dynamic)newactionitem).icon = GlobalFuncs.ui_style2icon( this.client.prefs.UI_style );
					this.hud_used.item_action_list.Add( newactionitem );
					this.client.screen.Add( newactionitem );
					this.client.images.Add( ((dynamic)newactionitem).overlay );

					switch ((int)( num )) {
						case 1:
							((dynamic)newactionitem).screen_loc = "WEST:6,NORTH-1:26";
							break;
						case 2:
							((dynamic)newactionitem).screen_loc = "WEST+1:8,NORTH-1:26";
							break;
						case 3:
							((dynamic)newactionitem).screen_loc = "WEST+2:10,NORTH-1:26";
							break;
						case 4:
							((dynamic)newactionitem).screen_loc = "WEST+3:12,NORTH-1:26";
							break;
						case 5:
							((dynamic)newactionitem).screen_loc = "WEST+4:14,NORTH-1:26";
							break;
					}
					num++;
				}
			}
			return;
		}

		// Function from file: ventcrawl.dm
		public override bool ventcrawl_carry(  ) {
			dynamic C = null;

			
			if ( this.w_uniform is Obj_Item_Clothing_Under_Contortionist ) {
				C = this.w_uniform;
				return ((Obj_Item_Clothing_Under_Contortionist)C).check_clothing( this );
			}
			return true;
		}

		// Function from file: ventcrawl.dm
		public override bool can_ventcrawl(  ) {
			return this.w_uniform is Obj_Item_Clothing_Under_Contortionist;
		}

		// Function from file: other_mobs.dm
		public override void RangedAttack( Ent_Static A = null, string _params = null ) {
			dynamic G = null;

			
			if ( !Lang13.Bool( this.gloves ) && !( this.mutations.len != 0 ) ) {
				return;
			}

			if ( Lang13.Bool( this.gloves ) ) {
				G = this.gloves;

				if ( G is Obj_Item_Clothing_Gloves && ((Obj_Item_Clothing_Gloves)G).Touch( A, this, false ) ) {
					return;
				}
			}

			if ( this.mutations.len != 0 ) {
				
				if ( this.mutations.Contains( 9 ) && this.a_intent == "hurt" ) {
					this.LaserEyes( A );
				} else if ( this.mutations.Contains( 1 ) ) {
					A.attack_tk( this );
				}
			}
			return;
		}

		// Function from file: other_mobs.dm
		public override void RestrainedClickOn( Ent_Static A = null ) {
			return;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool proximity_flag = false, string _params = null ) {
			dynamic G = null;

			G = this.gloves;

			if ( A is Mob ) {
				this.delayNextAttack( 10 );
			}

			if ( proximity_flag && G is Obj_Item_Clothing_Gloves && ((Obj_Item_Clothing_Gloves)G).Touch( A, this, true ) ) {
				return;
			}

			if ( this.can_use_hand() ) {
				A.attack_hand( this, _params );
			} else {
				A.attack_stump( this, _params );
			}
			return;
		}

		// Function from file: click.dm
		public override void LaserEyes( Ent_Static A = null ) {
			
			if ( this.burn_calories( 0.5 ) ) {
				this.nutrition = Num13.MaxInt( 0, ((int)( this.nutrition - 2 )) );
				base.LaserEyes( A );
				this.handle_regular_hud_updates();
			} else {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're out of energy!  You need food!</span>" );
			}
			return;
		}

		// Function from file: whisper.dm
		[Verb]
		[VerbInfo( name: "Whisper", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public override void whisper( dynamic message = null ) {
			Game_Data speech = null;
			dynamic n = null;
			string whispers = null;
			bool critical = false;
			int health_diff = 0;
			int message_len = 0;
			ByTable listeners = null;
			ByTable eavesdroppers = null;
			ByTable watchers = null;
			string rendered = null;
			Ent_Dynamic listener = null;
			Ent_Dynamic eavesdropper = null;
			dynamic watcher = null;

			
			if ( !this.IsVocal() ) {
				return;
			}

			if ( GlobalVars.say_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( this.isDead() ) {
				return;
			}
			speech = this.create_speech( message );
			((dynamic)speech).language = this.parse_language( ((dynamic)speech).message );
			((dynamic)speech).mode = 2;
			((dynamic)speech).message_classes.Add( "whisper" );

			if ( ((dynamic)speech).language is Language ) {
				((dynamic)speech).message = String13.SubStr( ((dynamic)speech).message, Lang13.Length( ((dynamic)speech).language.key ) + 2, 0 );
			} else {
				
				if ( !( ((dynamic)speech).language == null ) ) {
					n = ((dynamic)speech).language;
					((dynamic)speech).message = String13.SubStr( ((dynamic)speech).message, Lang13.Length( n ) + 1, 0 );
					((dynamic)speech).language = null;
				}
				((dynamic)speech).language = this.get_default_language();
			}
			((dynamic)speech).message = GlobalFuncs.trim( ((dynamic)speech).message );

			if ( !this.can_speak( message ) ) {
				return;
			}
			((dynamic)speech).message = "" + message;

			if ( this.client != null ) {
				
				if ( ( this.client.prefs.muted & 1 ) != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>You cannot whisper (muted).</span>" );
					return;
				}
			}
			whispers = "whispers";
			critical = this.InCritical();

			if ( this.stat == 1 && ( !critical || Lang13.Bool( this.said_last_words ) ) ) {
				return;
			}
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]WHISPER: " + ( "" + GlobalFuncs.key_name( this ) + " (" + GlobalFuncs.formatLocation( this ) + "): " + message ) ) );

			if ( critical && !Lang13.Bool( this.said_last_words ) ) {
				health_diff = Num13.Floor( Convert.ToDouble( -GlobalVars.config.health_threshold_dead + this.health ) );
				message_len = Lang13.Length( ((dynamic)speech).message );
				((dynamic)speech).message = String13.SubStr( ((dynamic)speech).message, 1, health_diff ) + ( "" + ( message_len > health_diff ? "-.." : "..." ) );
				((dynamic)speech).message = GlobalFuncs.Ellipsis( ((dynamic)speech).message, 10 );
				((dynamic)speech).mode = 3;
				whispers = "whispers with their final breath";
				this.said_last_words = this.stat;
			}
			this.treat_speech( speech );
			listeners = GlobalFuncs.get_hearers_in_view( 1, this ) | GlobalVars.observers;
			eavesdroppers = GlobalFuncs.get_hearers_in_view( 2, this ) - listeners;
			watchers = Map13.FetchHearers( this, 5 ) - listeners - eavesdroppers;
			rendered = this.render_speech( speech );

			foreach (dynamic _a in Lang13.Enumerate( listeners, typeof(Ent_Dynamic) )) {
				listener = _a;
				

				if ( listener != null ) {
					listener.Hear( speech, rendered );
				}
			}
			listeners = null;
			((dynamic)speech).message = GlobalFuncs.stars( ((dynamic)speech).message );
			rendered = this.render_speech( speech );

			foreach (dynamic _b in Lang13.Enumerate( eavesdroppers, typeof(Ent_Dynamic) )) {
				eavesdropper = _b;
				

				if ( eavesdropper != null ) {
					eavesdropper.Hear( speech, rendered );
				}
			}
			eavesdroppers = null;
			rendered = "<span class='game say'><span class='name'>" + this.name + "</span> " + whispers + " something.</span>";

			foreach (dynamic _c in Lang13.Enumerate( watchers )) {
				watcher = _c;
				

				if ( Lang13.Bool( watcher ) ) {
					watcher.show_message( rendered, 2 );
				}
			}
			watchers = null;

			if ( Lang13.Bool( this.said_last_words ) ) {
				this.succumb(  );
			}
			GlobalFuncs.returnToPool( speech );
			return;
		}

		// Function from file: inventory.dm
		[Verb]
		[VerbInfo( name: "quick-equip", hidden: true )]
		public void quick_equip(  ) {
			Mob_Living_Carbon_Human H = null;
			dynamic I = null;

			
			if ( this is Mob_Living_Carbon_Human ) {
				H = this;
				I = H.get_active_hand();

				if ( !Lang13.Bool( I ) ) {
					GlobalFuncs.to_chat( H, "<span class='notice'>You are not holding anything to equip.</span>" );
					return;
				}

				if ( H.equip_to_appropriate_slot( I ) ) {
					
					if ( this.hand == true ) {
						this.update_inv_l_hand( false );
					} else {
						this.update_inv_r_hand( false );
					}
				} else {
					GlobalFuncs.to_chat( H, "<span class='warning'>You are unable to equip that.</span>" );
				}
			}
			return;
		}

		// Function from file: human.dm
		[Verb]
		[VerbInfo( name: "Check pulse", desc: "Approximately count somebody's pulse. Requires you to stand still at least 6 seconds.", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void check_pulse(  ) {
			bool self = false;

			self = false;

			if ( Task13.User.isUnconscious() || Task13.User.restrained() || !( Task13.User is Mob_Living ) || Task13.User is Mob_Living_SimpleAnimal || Task13.User is Mob_Living_Silicon_Ai ) {
				return;
			}

			if ( Task13.User == this ) {
				self = true;
			}

			if ( !self ) {
				Task13.User.visible_message( new Txt( "<span class='notice'>" ).item( Task13.User ).str( " kneels down, puts " ).his_her_its_their().str( " hand on " ).item( this ).str( "'s wrist and begins counting their pulse.</span>" ).ToString(), "<span class='info'>You begin counting " + this + "'s pulse.</span>" );
			} else {
				Task13.User.visible_message( "<span class='notice'>" + Task13.User + " begins counting their pulse.</span>", "<span class='info'>You begin counting your pulse.</span>" );
			}

			if ( this.pulse != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>" + ( self ? "You have a" : "" + this + " has a" ) + " pulse! Counting...</span>" );
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>" + ( self ? "You have" : "" + this + " has" ) + " no pulse!</span>" );
				return;
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='info'>Don't move until counting is finished.</span>" );

			if ( GlobalFuncs.do_mob( Task13.User, this, 60 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>" + ( self ? "Your" : "" + this + "'s" ) + " pulse is " + this.get_pulse( false ) + ".</span>" );
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='info'>You moved while counting. Try again.</span>" );
			}
			return;
		}

		// Function from file: emote.dm
		[Verb]
		[VerbInfo( name: "Set Flavour Text", desc: "Sets an extended description of your character's features.", group: "IC" )]
		public void set_flavor(  ) {
			
			if ( Lang13.Bool( GlobalFuncs.appearance_isbanned( Task13.User ) ) ) {
				GlobalFuncs.to_chat( this, "<span class = 'notice'>You are appearance banned!</span>" );
				this.flavor_text = null;
				return;
			} else {
				this.flavor_text = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Please enter your new flavour text.", "Flavour text", null, null, InputType.Str ) ), 1, 0 );
			}
			return;
		}

		// Function from file: emote.dm
		[Verb]
		[VerbInfo( name: "Set Pose", desc: "Sets a description which will be shown when someone examines you.", group: "IC" )]
		public void f_pose(  ) {
			this.pose = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( Task13.User, new Txt( "This is " ).item( this ).str( ". " ).He_She_It_They().str( " is..." ).ToString(), "Pose", null, null, InputType.Str ) ), 1, 1024 );
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			dynamic B = null;
			bool permitted = false;
			ByTable allowed = null;
			dynamic T = null;
			string confirm = null;
			dynamic held_item = null;
			dynamic damagetype = null;
			int damage_mod = 0;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You can't commit suicide before the game starts!</span>" );
				return;
			}

			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already dead!</span>" );
				return;
			}

			if ( this.wear_mask is Obj_Item_Clothing_Mask_Happy ) {
				GlobalFuncs.to_chat( this, "<span class='sinister'>BUT WHY? I'M SO HAPPY!</span>" );
				return;
			}
			B = this.has_brain_worms();

			if ( Lang13.Bool( B ) && B.controlling ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You cannot commit suicide, your host is clinging to life enough to resist it.</span>" );
				return;
			}
			permitted = true;
			allowed = new ByTable(new object [] { "Syndicate", "traitor", "Wizard", "Head Revolutionary", "Cultist", "Changeling" });

			foreach (dynamic _a in Lang13.Enumerate( allowed )) {
				T = _a;
				

				if ( this.mind.special_role == T ) {
					permitted = true;
					break;
				}
			}

			if ( !permitted ) {
				GlobalFuncs.message_admins( "<span class='danger'>" + this.ckey + " has tried to suicide, but they were not permitted to due to being an antagonist.</span>" );
				GlobalFuncs.to_chat( this, "<span class='warning'>Your masters and the gods won't let you do that without a proper reason.</span>" );
				return;
			}

			if ( this.suiciding == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already committing suicide! Be patient!</span>" );
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( confirm == "Yes" ) {
				
				if ( !this.canmove || this.restrained() ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You can't commit suicide whilst restrained!</span>" );
					return;
				}
				this.suiciding = true;
				held_item = this.get_active_hand();

				if ( Lang13.Bool( held_item ) ) {
					damagetype = ((Obj_Item)held_item).suicide_act( this );

					if ( Lang13.Bool( damagetype ) ) {
						damage_mod = 1;

						dynamic _b = damagetype; // Was a switch-case, sorry for the mess.
						if ( _b==15 ) {
							damage_mod = 4;
						} else if ( _b==6 || _b==11 || _b==13 || _b==14 ) {
							damage_mod = 3;
						} else if ( _b==3 || _b==5 || _b==7 || _b==9 || _b==10 || _b==12 ) {
							damage_mod = 2;
						} else if ( _b==1 || _b==2 || _b==4 || _b==8 ) {
							damage_mod = 1;
						} else {
							damage_mod = 1;
						}

						if ( Lang13.Bool( damagetype & 1 ) ) {
							this.adjustBruteLoss( 175 / damage_mod );
						}

						if ( Lang13.Bool( damagetype & 2 ) ) {
							this.adjustFireLoss( 175 / damage_mod );
						}

						if ( Lang13.Bool( damagetype & 4 ) ) {
							this.adjustToxLoss( 175 / damage_mod );
						}

						if ( Lang13.Bool( damagetype & 8 ) ) {
							this.adjustOxyLoss( 175 / damage_mod );
						}

						if ( !Lang13.Bool( damagetype | 1 ) && !Lang13.Bool( damagetype | 2 ) && !Lang13.Bool( damagetype | 4 ) && !Lang13.Bool( damagetype | 8 ) ) {
							this.adjustOxyLoss( Num13.MaxInt( ((int)( 175 - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss() - Convert.ToDouble( this.getOxyLoss() ) )), 0 ) );
						}
						this.updatehealth();
						return;
					}
				}
				this.visible_message( Rand13.Pick(new object [] { new Txt( "<span class='danger'>" ).item( this ).str( " is attempting to bite " ).his_her_its_their().str( " tongue off! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), new Txt( "<span class='danger'>" ).item( this ).str( " is jamming " ).his_her_its_their().str( " thumbs into " ).his_her_its_their().str( " eye sockets! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), new Txt( "<span class='danger'>" ).item( this ).str( " is twisting " ).his_her_its_their().str( " own neck! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString(), new Txt( "<span class='danger'>" ).item( this ).str( " is holding " ).his_her_its_their().str( " breath! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() }) );
				this.adjustOxyLoss( Num13.MaxInt( ((int)( 175 - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss() - Convert.ToDouble( this.getOxyLoss() ) )), 0 ) );
				this.updatehealth();
			}
			return;
		}

		// Function from file: human.dm
		[Verb]
		[VerbInfo( name: "Toggle hotkey buttons", desc: "This disables or enables the user interface buttons which can be used with hotkeys.", group: "OOC" )]
		public void toggle_hotkey_verbs(  ) {
			
			if ( this.hud_used.hotkey_ui_hidden ) {
				this.client.screen.Add( this.hud_used.hotkeybuttons );
				this.hud_used.hotkey_ui_hidden = false;
			} else {
				this.client.screen.Remove( this.hud_used.hotkeybuttons );
				this.hud_used.hotkey_ui_hidden = true;
			}
			return;
		}

	}

}