// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Human : Mob_Living_Carbon {

		public Reagents vessel = null;
		public bool pale = false;
		public dynamic hair_color = "000";
		public string hair_style = "Bald";
		public dynamic facial_hair_color = "000";
		public string facial_hair_style = "Shaved";
		public dynamic eye_color = "000";
		public string skin_tone = "caucasian1";
		public string lip_style = null;
		public dynamic lip_color = "white";
		public int age = 30;
		public string underwear = "Nude";
		public string undershirt = "Nude";
		public string socks = "Nude";
		public bool backbag = true;
		public dynamic wear_suit = null;
		public dynamic w_uniform = null;
		public dynamic shoes = null;
		public dynamic belt = null;
		public dynamic gloves = null;
		public dynamic glasses = null;
		public dynamic ears = null;
		public dynamic wear_id = null;
		public dynamic r_store = null;
		public dynamic l_store = null;
		public dynamic s_store = null;
		public dynamic base_icon_state = "caucasian1_m";
		public dynamic special_voice = "";
		public bool gender_ambiguous = false;
		public double blood_max = 0;
		public bool bleedsuppress = false;
		public ByTable organs = new ByTable();
		public MartialArt martial_art = null;
		public dynamic name_override = null;
		public bool heart_attack = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "Unknown";
			this.voice_name = "Unknown";
			this.hud_possible = new ByTable(new object [] { "1", "2", "3", "4", "5", "6", "7", "12" });
			this.icon = "icons/mob/human.dmi";
			this.icon_state = "caucasian1_m_s";
		}

		// Function from file: human.dm
		public Mob_Living_Carbon_Human ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_Organ_Limb O = null;
			Obj_Item_Organ_Internal I = null;

			this.verbs.Add( typeof(Mob_Living).GetMethod( "mob_sleep" ) );
			this.verbs.Add( typeof(Mob_Living).GetMethod( "lay_down" ) );
			this.create_dna(  );
			GlobalFuncs.randomize_human( this );
			this.dna.initialize_dna();
			this.organs = new ByTable(new object [] { 
				new Obj_Item_Organ_Limb_Chest(), 
				new Obj_Item_Organ_Limb_Head(), 
				new Obj_Item_Organ_Limb_LArm(), 
				new Obj_Item_Organ_Limb_RArm(), 
				new Obj_Item_Organ_Limb_RLeg(), 
				new Obj_Item_Organ_Limb_LLeg()
			 });

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				O = _a;
				
				O.owner = this;
			}
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Appendix() );
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Heart() );
			this.internal_organs.Add( new Obj_Item_Organ_Internal_Brain() );

			foreach (dynamic _b in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal) )) {
				I = _b;
				
				I.Insert( this );
			}
			this.make_blood();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: default.dm
		public override int default_can_use_topic( Game_Data src_object = null ) {
			int _default = 0;

			_default = this.shared_ui_interaction( src_object );

			if ( _default > -1 ) {
				_default = Num13.MinInt( _default, this.shared_living_ui_distance( src_object ) );

				if ( Rand13.PercentChance( this.getBrainLoss() ) ) {
					return 1;
				}
			}
			return _default;
		}

		// Function from file: states.dm
		public override int shared_living_ui_distance( Game_Data src_object = null ) {
			
			if ( this.dna.check_mutation( "Telekinesis" ) != 0 && GlobalFuncs.tkMaxRangeCheck( this, src_object ) ) {
				return 2;
			}
			return base.shared_living_ui_distance( src_object );
		}

		// Function from file: helpers.dm
		public override dynamic getlimb( Type typepath = null ) {
			return Lang13.FindIn( typepath, this.organs );
		}

		// Function from file: update_icons.dm
		public override void update_hud_back( dynamic I = null ) {
			
			if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
				I.screen_loc = "CENTER-2:14,SOUTH:5";
				this.client.screen.Add( I );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hud_wear_mask( dynamic I = null ) {
			
			if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
				
				if ( this.hud_used.inventory_shown ) {
					I.screen_loc = "WEST+1:8,SOUTH+2:9";
				}
				this.client.screen.Add( I );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hud_head( dynamic I = null ) {
			
			if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
				
				if ( this.hud_used.inventory_shown ) {
					I.screen_loc = "WEST+1:8,SOUTH+3:11";
				}
				this.client.screen.Add( I );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_legcuffed(  ) {
			this.remove_overlay( 5 );
			this.clear_alert( "legcuffed" );

			if ( Lang13.Bool( this.legcuffed ) ) {
				this.overlays_standing[5] = new Image( "icons/mob/mob.dmi", null, "legcuff1", -5 );
				this.apply_overlay( 5 );
				this.throw_alert( "legcuffed", typeof(Obj_Screen_Alert_Restrained_Legcuffed), null, this.legcuffed );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_handcuffed(  ) {
			this.remove_overlay( 6 );

			if ( Lang13.Bool( this.handcuffed ) ) {
				this.overlays_standing[6] = new Image( "icons/mob/mob.dmi", null, "handcuff1", -6 );
				this.apply_overlay( 6 );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_mask(  ) {
			base.update_inv_wear_mask();
			this.update_mutant_bodyparts();
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_pockets(  ) {
			
			if ( Lang13.Bool( this.l_store ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					this.client.screen.Add( this.l_store );
					this.l_store.screen_loc = "CENTER+1:18,SOUTH:5";
				}
			}

			if ( Lang13.Bool( this.r_store ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					this.client.screen.Add( this.r_store );
					this.r_store.screen_loc = "CENTER+2:20,SOUTH:5";
				}
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_suit(  ) {
			Image standing = null;

			this.remove_overlay( 14 );

			if ( this.wear_suit is Obj_Item_Clothing_Suit ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					
					if ( this.hud_used.inventory_shown ) {
						this.wear_suit.screen_loc = "WEST+1:8,SOUTH+1:7";
					}
					this.client.screen.Add( this.wear_suit );
				}
				standing = ((Obj_Item)this.wear_suit).build_worn_icon( this.wear_suit.icon_state, 14, "icons/mob/suit.dmi" );
				this.overlays_standing[14] = standing;

				if ( this.wear_suit is Obj_Item_Clothing_Suit_StraightJacket ) {
					this.drop_l_hand();
					this.drop_r_hand();
				}
			}
			this.update_hair();
			this.update_mutant_bodyparts();
			this.apply_overlay( 14 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_belt(  ) {
			dynamic t_state = null;
			Image standing = null;

			this.remove_overlay( 12 );

			if ( Lang13.Bool( this.belt ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					this.client.screen.Add( this.belt );
					this.belt.screen_loc = "CENTER-3:14,SOUTH:5";
				}
				t_state = this.belt.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.belt.icon_state;
				}
				standing = ((Obj_Item)this.belt).build_worn_icon( t_state, 12, "icons/mob/belt.dmi" );
				this.overlays_standing[12] = standing;
			}
			this.apply_overlay( 12 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_head(  ) {
			base.update_inv_head();
			this.update_mutant_bodyparts();
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_s_store(  ) {
			dynamic t_state = null;

			this.remove_overlay( 11 );

			if ( Lang13.Bool( this.s_store ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					this.s_store.screen_loc = "CENTER-5:10,SOUTH:5";
					this.client.screen.Add( this.s_store );
				}
				t_state = this.s_store.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.s_store.icon_state;
				}
				this.overlays_standing[11] = new Image( "icons/mob/belt_mirror.dmi", null, "" + t_state, -11 );
			}
			this.apply_overlay( 11 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_shoes(  ) {
			Image standing = null;

			this.remove_overlay( 17 );

			if ( Lang13.Bool( this.shoes ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					
					if ( this.hud_used.inventory_shown ) {
						this.shoes.screen_loc = "WEST+1:8,SOUTH:5";
					}
					this.client.screen.Add( this.shoes );
				}
				standing = ((Obj_Item)this.shoes).build_worn_icon( this.shoes.icon_state, 17, "icons/mob/feet.dmi" );
				this.overlays_standing[17] = standing;
			}
			this.apply_overlay( 17 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_ears(  ) {
			Image standing = null;

			this.remove_overlay( 15 );

			if ( Lang13.Bool( this.ears ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					
					if ( this.hud_used.inventory_shown ) {
						this.ears.screen_loc = "WEST+2:10,SOUTH+2:9";
					}
					this.client.screen.Add( this.ears );
				}
				standing = ((Obj_Item)this.ears).build_worn_icon( this.ears.icon_state, 15, "icons/mob/ears.dmi" );
				this.overlays_standing[15] = standing;
			}
			this.apply_overlay( 15 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_glasses(  ) {
			Image standing = null;

			this.remove_overlay( 13 );

			if ( Lang13.Bool( this.glasses ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					
					if ( this.hud_used.inventory_shown ) {
						this.glasses.screen_loc = "WEST:6,SOUTH+2:9";
					}
					this.client.screen.Add( this.glasses );
				}

				if ( !( Lang13.Bool( this.head ) && ( ( this.head.flags_inv ??0) & 4 ) != 0 ) ) {
					standing = ((Obj_Item)this.glasses).build_worn_icon( this.glasses.icon_state, 13, "icons/mob/eyes.dmi" );
					this.overlays_standing[13] = standing;
				}
			}
			this.apply_overlay( 13 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_gloves(  ) {
			dynamic t_state = null;
			Image standing = null;

			this.remove_overlay( 16 );

			if ( Lang13.Bool( this.gloves ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					
					if ( this.hud_used.inventory_shown ) {
						this.gloves.screen_loc = "WEST+2:10,SOUTH+1:7";
					}
					this.client.screen.Add( this.gloves );
				}
				t_state = this.gloves.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.gloves.icon_state;
				}
				standing = ((Obj_Item)this.gloves).build_worn_icon( t_state, 16, "icons/mob/hands.dmi" );
				this.overlays_standing[16] = standing;
			} else if ( this.blood_DNA != null ) {
				this.overlays_standing[16] = new Image( "icons/effects/blood.dmi", null, "bloodyhands", -16 );
			}
			this.apply_overlay( 16 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_id(  ) {
			Image standing = null;

			this.remove_overlay( 18 );

			if ( Lang13.Bool( this.wear_id ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					this.wear_id.screen_loc = "CENTER-4:12,SOUTH:5";
					this.client.screen.Add( this.wear_id );
				}
				standing = ((Obj_Item)this.wear_id).build_worn_icon( this.wear_id.item_state, 18, "icons/mob/mob.dmi" );
				this.overlays_standing[18] = standing;
			}
			this.apply_overlay( 18 );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_w_uniform(  ) {
			dynamic U = null;
			dynamic t_color = null;
			Image standing = null;
			string G = null;
			Obj_Item thing = null;

			this.remove_overlay( 19 );

			if ( this.w_uniform is Obj_Item_Clothing_Under ) {
				U = this.w_uniform;

				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					
					if ( this.hud_used.inventory_shown ) {
						this.w_uniform.screen_loc = "WEST:6,SOUTH+1:7";
					}
					this.client.screen.Add( this.w_uniform );
				}

				if ( Lang13.Bool( this.wear_suit ) && ( ( this.wear_suit.flags_inv ??0) & 4 ) != 0 ) {
					return;
				}
				t_color = this.w_uniform.item_color;

				if ( !Lang13.Bool( t_color ) ) {
					t_color = this.w_uniform.icon_state;
				}

				if ( this.dna != null && this.dna.species.sexes ) {
					G = ( this.gender == GlobalVars.FEMALE ? "f" : "m" );

					if ( G == "f" && U.fitted != 0 ) {
						standing = ((Obj_Item)U).build_worn_icon( "" + t_color + "_s", 19, "icons/mob/uniform.dmi", GlobalVars.FALSE, U.fitted );
					}
				}

				if ( !( standing != null ) ) {
					standing = ((Obj_Item)U).build_worn_icon( "" + t_color + "_s", 19, "icons/mob/uniform.dmi", GlobalVars.FALSE );
				}
				this.overlays_standing[19] = standing;
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { this.r_store, this.l_store, this.wear_id, this.belt }), typeof(Obj_Item) )) {
					thing = _a;
					
					this.unEquip( thing );
				}
			}
			this.apply_overlay( 19 );
			return;
		}

		// Function from file: update_icons.dm
		public override bool regenerate_icons(  ) {
			
			if ( !base.regenerate_icons() ) {
				this.update_body();
				this.update_hair();
				this.update_inv_w_uniform();
				this.update_inv_wear_id();
				this.update_inv_gloves();
				this.update_inv_glasses();
				this.update_inv_ears();
				this.update_inv_shoes();
				this.update_inv_s_store();
				this.update_inv_wear_mask();
				this.update_inv_head();
				this.update_inv_belt();
				this.update_inv_back();
				this.update_inv_wear_suit();
				this.update_inv_pockets();
				this.update_transform();
				this.update_mutcolor();
				this.update_mutations_overlay();
			}
			return false;
		}

		// Function from file: update_icons.dm
		public override void update_fire( string fire_icon = null ) {
			base.update_fire( "Standing" );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hair(  ) {
			this.remove_overlay( 9 );

			if ( Lang13.Bool( this.disabilities & 64 ) || Lang13.Bool( this.head ) && Lang13.Bool( this.head.flags & 32768 ) || Lang13.Bool( this.wear_mask ) && Lang13.Bool( this.wear_mask.flags & 32768 ) ) {
				return;
			}

			if ( Lang13.Bool( this.wear_suit ) && this.wear_suit.hooded && this.wear_suit.suittoggled ) {
				return;
			}
			((Species)this.dna.species).handle_hair( this );
			return;
		}

		// Function from file: update_icons.dm
		public override void update_damage_overlays(  ) {
			Image standing = null;
			Obj_Item_Organ_Limb O = null;

			this.remove_overlay( 20 );
			standing = new Image( "icons/mob/dam_human.dmi", null, "blank", -20 );
			this.overlays_standing[20] = standing;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				O = _a;
				

				if ( O.brutestate != 0 ) {
					standing.overlays.Add( "" + O.icon_state + "_" + O.brutestate + "0" );
				}

				if ( O.burnstate != 0 ) {
					standing.overlays.Add( "" + O.icon_state + "_0" + O.burnstate );
				}
			}
			this.apply_overlay( 20 );
			return;
		}

		// Function from file: say.dm
		public override string get_alt_name(  ) {
			
			if ( this.name != this.GetVoice() ) {
				return " (as " + this.get_id_name( "Unknown" ) + ")";
			}
			return null;
		}

		// Function from file: say.dm
		public override int radio( dynamic message = null, string message_mode = null, ByTable spans = null ) {
			int _default = 0;

			_default = base.radio( (object)(message), message_mode, spans );

			if ( _default != 0 ) {
				return _default;
			}

			switch ((string)( message_mode )) {
				case "headset":
					
					if ( Lang13.Bool( this.ears ) ) {
						((Obj_Item)this.ears).talk_into( this, message, null, spans );
					}
					return 3;
					break;
				case "department":
					
					if ( Lang13.Bool( this.ears ) ) {
						((Obj_Item)this.ears).talk_into( this, message, message_mode, spans );
					}
					return 3;
					break;
			}

			if ( GlobalVars.radiochannels.Contains( message_mode ) ) {
				
				if ( Lang13.Bool( this.ears ) ) {
					((Obj_Item)this.ears).talk_into( this, message, message_mode, spans );
					return 3;
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public override bool binarycheck(  ) {
			dynamic dongle = null;

			
			if ( Lang13.Bool( this.ears ) ) {
				dongle = this.ears;

				if ( !( dongle is Obj_Item_Device_Radio_Headset ) ) {
					return false;
				}

				if ( Lang13.Bool( dongle.translate_binary ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: say.dm
		public override bool IsVocal(  ) {
			
			if ( this.mind != null ) {
				return !this.mind.miming;
			}
			return true;
		}

		// Function from file: say.dm
		public override dynamic GetVoice(  ) {
			dynamic V = null;
			dynamic idcard = null;

			
			if ( this.wear_mask is Obj_Item_Clothing_Mask_Gas_Voice ) {
				V = this.wear_mask;

				if ( V.vchange && Lang13.Bool( this.wear_id ) ) {
					idcard = ((Obj_Item)this.wear_id).GetID();

					if ( idcard is Obj_Item_Weapon_Card_Id ) {
						return idcard.registered_name;
					} else {
						return this.real_name;
					}
				} else {
					return this.real_name;
				}
			}

			if ( this.mind != null && this.mind.changeling != null && Lang13.Bool( this.mind.changeling.mimicing ) ) {
				return this.mind.changeling.mimicing;
			}

			if ( Lang13.Bool( this.GetSpecialVoice() ) ) {
				return this.GetSpecialVoice();
			}
			return this.real_name;
		}

		// Function from file: say.dm
		public override ByTable get_spans(  ) {
			return base.get_spans() | this.dna.mutations_get_spans() | this.dna.species_get_spans();
		}

		// Function from file: say.dm
		public override dynamic treat_message( dynamic message = null ) {
			Disease_PierrotThroat D = null;
			ByTable temp_message = null;
			ByTable pick_list = null;
			int? i = null;
			int? i2 = null;
			dynamic H = null;

			message = this.dna.species.handle_speech( message, this );

			if ( this.viruses.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease_PierrotThroat) )) {
					D = _a;
					
					temp_message = GlobalFuncs.splittext( message, " " );
					pick_list = new ByTable();
					i = null;
					i = 1;

					while (( i ??0) <= temp_message.len) {
						pick_list.Add( i );
						i++;
					}
					i2 = null;
					i2 = 1;

					while (( i2 ??0) <= ( D.stage ??0) && ( i2 ??0) <= temp_message.len) {
						
						if ( Rand13.PercentChance( ( D.stage ??0) * 3 ) ) {
							H = Rand13.PickFromTable( pick_list );

							if ( String13.FindIgnoreCase( temp_message[H], "*", 1, 0 ) != 0 || String13.FindIgnoreCase( temp_message[H], ";", 1, 0 ) != 0 || String13.FindIgnoreCase( temp_message[H], ":", 1, 0 ) != 0 ) {
								i2++;
								continue;
							}
							temp_message[H] = "HONK";
							pick_list.Remove( H );
						}
						message = GlobalFuncs.jointext( temp_message, " " );
						i2++;
					}
				}
			}
			message = base.treat_message( (object)(message) );
			message = this.dna.mutations_say_mods( message );
			return message;
		}

		// Function from file: say.dm
		public override string say_quote( dynamic input = null, dynamic spans = null ) {
			
			if ( !Lang13.Bool( input ) ) {
				return "says, \"...\"";
			}
			this.verb_say = this.dna.species.say_mod;

			if ( this.slurring != 0 ) {
				input = GlobalFuncs.attach_spans( input, spans );
				return "slurs, \"" + input + "\"";
			}
			return base.say_quote( (object)(input), (object)(spans) );
		}

		// Function from file: life.dm
		public override bool has_smoke_protection(  ) {
			bool _default = false;

			
			if ( Lang13.Bool( this.wear_mask ) ) {
				
				if ( Lang13.Bool( this.wear_mask.flags & 8192 ) ) {
					_default = true;
				}
			}

			if ( Lang13.Bool( this.glasses ) ) {
				
				if ( Lang13.Bool( this.glasses.flags & 8192 ) ) {
					_default = true;
				}
			}

			if ( Lang13.Bool( this.head ) ) {
				
				if ( Lang13.Bool( this.head.flags & 8192 ) ) {
					_default = true;
				}
			}

			if ( this.dna.species.specflags.Contains( 256 ) ) {
				_default = true;
			}
			return _default;
		}

		// Function from file: life.dm
		public override void handle_random_events(  ) {
			Ent_Static location = null;

			
			if ( !( this.stat != 0 ) ) {
				
				if ( Convert.ToDouble( this.getToxLoss() ) >= 45 && this.nutrition > 20 ) {
					this.lastpuke++;

					if ( this.lastpuke >= 25 ) {
						this.Stun( 5 );
						this.visible_message( "<span class='danger'>" + this + " throws up!</span>", "<span class='userdanger'>" + this + " throws up!</span>" );
						GlobalFuncs.playsound( this.loc, "sound/effects/splat.ogg", 50, 1 );
						location = this.loc;

						if ( location is Tile_Simulated ) {
							location.add_vomit_floor( this, true );
						}
						this.nutrition -= 20;
						this.adjustToxLoss( -3 );
						this.lastpuke = 0;
					}
				}
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_chemicals_in_body(  ) {
			
			if ( this.reagents != null ) {
				this.reagents.metabolize( this, true );
			}
			this.dna.species.handle_chemicals_in_body( this );
			return;
		}

		// Function from file: life.dm
		public override void ExtinguishMob(  ) {
			
			if ( !( this.dna != null ) || !Lang13.Bool( this.dna.species.ExtinguishMob( this ) ) ) {
				base.ExtinguishMob();
			}
			return;
		}

		// Function from file: life.dm
		public override void IgniteMob(  ) {
			
			if ( !( this.dna != null ) || !Lang13.Bool( this.dna.species.IgniteMob( this ) ) ) {
				base.IgniteMob();
			}
			return;
		}

		// Function from file: life.dm
		public override bool handle_fire(  ) {
			double thermal_protection = 0;

			
			if ( !( this.dna != null ) || !Lang13.Bool( this.dna.species.handle_fire( this ) ) ) {
				base.handle_fire();
			}

			if ( this.on_fire ) {
				thermal_protection = this.get_thermal_protection();

				if ( thermal_protection >= 35000 ) {
					return false;
				}

				if ( thermal_protection >= 30000 ) {
					this.bodytemperature += 11;
				} else {
					this.bodytemperature += this.fire_stacks * 12 + 30;
				}
			}
			return false;
		}

		// Function from file: life.dm
		public override void handle_environment( GasMixture environment = null ) {
			this.dna.species.handle_environment( environment, this );
			return;
		}

		// Function from file: life.dm
		public override bool check_breath( dynamic breath = null ) {
			this.dna.species.check_breath( breath, this );
			return false;
		}

		// Function from file: life.dm
		public override void breathe(  ) {
			
			if ( !Lang13.Bool( this.dna.species.breathe( this ) ) ) {
				base.breathe();
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_mutations_and_radiation(  ) {
			
			if ( !( this.dna != null ) || !Lang13.Bool( this.dna.species.handle_mutations_and_radiation( this ) ) ) {
				base.handle_mutations_and_radiation();
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_disabilities(  ) {
			
			if ( this.eye_blind != 0 ) {
				
				if ( this.tinttotal >= 3 ) {
					this.adjust_blindness( -3 );
				} else {
					this.adjust_blindness( -1 );
				}
			} else if ( this.eye_blurry != 0 ) {
				this.adjust_blurriness( -1 );
			}

			if ( Lang13.Bool( this.disabilities & 4 ) ) {
				this.setEarDamage( -1, Num13.MaxInt( ((int)( this.ear_deaf ??0 )), 1 ) );
			} else {
				
				if ( this.ears is Obj_Item_Clothing_Ears_Earmuffs ) {
					this.setEarDamage( Num13.MaxInt( ((int)( this.ear_damage - 0.1 )), 0 ), Num13.MaxInt( ((int)( ( this.ear_deaf ??0) - 1 )), 1 ) );
				}

				if ( this.ear_damage < 100 ) {
					this.adjustEarDamage( -0.05, -1 );
				}
			}

			if ( this.getBrainLoss() >= 60 && this.stat != 2 ) {
				
				if ( Rand13.PercentChance( 3 ) ) {
					
					dynamic _a = Rand13.Pick(new object [] { 1, 2, 3, 4, 5 }); // Was a switch-case, sorry for the mess.
					if ( _a==1 ) {
						this.say( Rand13.Pick(new object [] { "IM A PONY NEEEEEEIIIIIIIIIGH", "without oxigen blob don't evoluate?", "CAPTAINS A COMDOM", "" + Rand13.Pick(new object [] { "", "that faggot traitor" }) + " " + Rand13.Pick(new object [] { "joerge", "george", "gorge", "gdoruge" }) + " " + Rand13.Pick(new object [] { "mellens", "melons", "mwrlins" }) + " is grifing me HAL;P!!!", "can u give me " + Rand13.Pick(new object [] { "telikesis", "halk", "eppilapse", "kamelien", "eksrey", "glowey skin" }) + "?", "THe saiyans screwed", "Bi is THE BEST OF BOTH WORLDS>", "I WANNA PET TEH monkeyS", "stop grifing me!!!!", "SOTP IT#", "shiggey diggey!!", "A PIRATE APPEAR" }) );
					} else if ( _a==2 ) {
						this.say( Rand13.Pick(new object [] { "FUS RO DAH", "fucking 4rries!", "stat me", ">my face", "roll it easy!", "waaaaaagh!!!", "red wonz go fasta", "FOR TEH EMPRAH", "lol2cat", "dem dwarfs man, dem dwarfs", "SPESS MAHREENS", "hwee did eet fhor khayosss", "lifelike texture ;_;", "luv can bloooom", "PACKETS!!!", "port ba" + Rand13.Pick(new object [] { "y", "i", "e" }) + " med!!!!", "REVIRT GON CHEM!!!!!!!!", "youed call her a toeugh bithc", "closd for merbegging", "pray can u " + Rand13.Pick(new object [] { "spawn", "MAke me", "creat" }) + " " + Rand13.Pick(new object [] { "zenomorfs", "ayleins", "treaitors", "sheadow linkgs", "ubdoocters" }) + "???" }) );
					} else if ( _a==3 ) {
						this.say( Rand13.Pick(new object [] { "GEY AWAY FROM ME U GREIFING PRICK!!!!", "ur a fuckeing autist!", ";HELP SHITECIRTY MURDERIN  MEE!!!", "hwat dose tha " + Rand13.Pick(new object [] { "g", "squid", "r" }) + " mean?????", "CAL; TEH SHUTTLE!!!!!", "wearnig siNGUARLTY IS .... FIne xDDDDDDDDD", "AI laW 22 Open door", "this SI mY stATIon......", "who the HELL do u thenk u r?!!!!", "geT THE FUCK OUTTTT", "H U G B O X", ";;CRAGING THIS STTAYTION WITH NIO SURVIVROS", "" + Rand13.Pick(new object [] { "bager", "syebl" }) + " is down11!!!!!!!!!!!!!!!!!", "PSHOOOM" }) );
					} else if ( _a==4 ) {
						this.emote( "drool" );
					} else if ( _a==5 ) {
						this.say( Rand13.Pick(new object [] { "REMOVE SINGULARITY", "INSTLL TEG", "TURBIN IS BEST ENGIENE", "SOLIRS CAN POWER THE HOLE STATION ANEWAY", "parasteng was best", "Tajaran has warrrres, if you have coin" }) );
					}
				}
			}
			return;
		}

		// Function from file: life.dm
		public override dynamic calculate_affecting_pressure( dynamic pressure = null ) {
			
			if ( Lang13.Bool( this.wear_suit ) && Lang13.Bool( this.wear_suit.flags & 1 ) && Lang13.Bool( this.head ) && Lang13.Bool( this.head.flags & 1 ) ) {
				return 101.32499694824219;
			} else {
				return pressure;
			}
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			Mutation_Human HM = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return false;
			}

			if ( base.Life() ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.dna.mutations, typeof(Mutation_Human) )) {
					HM = _a;
					
					HM.on_life( this );
				}
				this.handle_heart();
				this.handle_embedded_objects();
			}
			this.name = this.get_visible_name();
			((Species)this.dna.species).spec_life( this );
			return false;
		}

		// Function from file: inventory.dm
		public override void head_update( dynamic I = null, bool? forced = null ) {
			
			if ( Lang13.Bool( I.flags & 32768 ) || forced == true ) {
				this.update_hair();
			}

			if ( ( ( I.flags_inv ??0) & 4 ) != 0 || forced == true ) {
				this.update_inv_glasses();
			}

			if ( ( ( I.flags_inv ??0) & 2 ) != 0 || forced == true ) {
				this.update_body();
			}
			this.sec_hud_set_security_status();
			base.head_update( (object)(I), forced );
			return;
		}

		// Function from file: inventory.dm
		public override void wear_mask_update( dynamic C = null, bool? unequip = null ) {
			unequip = unequip ?? true;

			
			if ( Lang13.Bool( C.flags & 32768 ) ) {
				this.update_hair();
			}

			if ( unequip == true && Lang13.Bool( this.v_internal ) ) {
				this.update_internals_hud_icon( false );
				this.v_internal = null;
			}
			this.sec_hud_set_security_status();
			base.wear_mask_update( (object)(C), unequip );
			return;
		}

		// Function from file: inventory.dm
		public override bool unEquip( dynamic I = null, int? force = null ) {
			bool _default = false;

			dynamic G = null;

			_default = base.unEquip( (object)(I), force );

			if ( !_default || !Lang13.Bool( I ) ) {
				return _default;
			}

			if ( I == this.wear_suit ) {
				
				if ( Lang13.Bool( this.s_store ) ) {
					this.unEquip( this.s_store, 1 );
				}
				this.wear_suit = null;

				if ( ( ( I.flags_inv ??0) & 4 ) != 0 ) {
					this.update_inv_w_uniform();
				}
				this.update_inv_wear_suit();
			} else if ( I == this.w_uniform ) {
				
				if ( Lang13.Bool( this.r_store ) ) {
					this.unEquip( this.r_store, 1 );
				}

				if ( Lang13.Bool( this.l_store ) ) {
					this.unEquip( this.l_store, 1 );
				}

				if ( Lang13.Bool( this.wear_id ) ) {
					this.unEquip( this.wear_id );
				}

				if ( Lang13.Bool( this.belt ) ) {
					this.unEquip( this.belt );
				}
				this.w_uniform = null;
				this.update_suit_sensors();
				this.update_inv_w_uniform();
			} else if ( I == this.gloves ) {
				this.gloves = null;
				this.update_inv_gloves();
			} else if ( I == this.glasses ) {
				this.glasses = null;
				G = I;

				if ( G.tint != 0 ) {
					this.update_tint();
				}

				if ( G.vision_correction ) {
					
					if ( Lang13.Bool( this.disabilities & 8 ) ) {
						this.overlay_fullscreen( "nearsighted", typeof(Obj_Screen_Fullscreen_Impaired), 1 );
					}
				}

				if ( G.vision_flags != 0 || Lang13.Bool( G.darkness_view ) || G.invis_override || G.invis_view != 0 ) {
					this.update_sight();
				}
				this.update_inv_glasses();
			} else if ( I == this.ears ) {
				this.ears = null;
				this.update_inv_ears();
			} else if ( I == this.shoes ) {
				this.shoes = null;
				this.update_inv_shoes();
			} else if ( I == this.belt ) {
				this.belt = null;
				this.update_inv_belt();
			} else if ( I == this.wear_id ) {
				this.wear_id = null;
				this.sec_hud_set_ID();
				this.update_inv_wear_id();
			} else if ( I == this.r_store ) {
				this.r_store = null;
				this.update_inv_pockets();
			} else if ( I == this.l_store ) {
				this.l_store = null;
				this.update_inv_pockets();
			} else if ( I == this.s_store ) {
				this.s_store = null;
				this.update_inv_s_store();
			}
			return _default;
		}

		// Function from file: inventory.dm
		public override bool equip_to_slot( dynamic W = null, dynamic slot = null ) {
			dynamic G = null;

			
			if ( !base.equip_to_slot( (object)(W), (object)(slot) ) ) {
				return false;
			}

			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==6 ) {
				this.belt = W;
				this.update_inv_belt();
			} else if ( _a==7 ) {
				this.wear_id = W;
				this.sec_hud_set_ID();
				this.update_inv_wear_id();
			} else if ( _a==8 ) {
				this.ears = W;
				this.update_inv_ears();
			} else if ( _a==9 ) {
				this.glasses = W;
				G = W;

				if ( G.tint != 0 ) {
					this.update_tint();
				}

				if ( G.vision_correction ) {
					this.clear_fullscreen( "nearsighted" );
				}

				if ( G.vision_flags != 0 || Lang13.Bool( G.darkness_view ) || G.invis_override || G.invis_view != 0 ) {
					this.update_sight();
				}
				this.update_inv_glasses();
			} else if ( _a==10 ) {
				this.gloves = W;
				this.update_inv_gloves();
			} else if ( _a==12 ) {
				this.shoes = W;
				this.update_inv_shoes();
			} else if ( _a==13 ) {
				this.wear_suit = W;

				if ( ( ( W.flags_inv ??0) & 4 ) != 0 ) {
					this.update_inv_w_uniform();
				}
				this.update_inv_wear_suit();
			} else if ( _a==14 ) {
				this.w_uniform = W;
				this.update_suit_sensors();
				this.update_inv_w_uniform();
			} else if ( _a==15 ) {
				this.l_store = W;
				this.update_inv_pockets();
			} else if ( _a==16 ) {
				this.r_store = W;
				this.update_inv_pockets();
			} else if ( _a==17 ) {
				this.s_store = W;
				this.update_inv_s_store();
			} else {
				this.WriteMsg( "<span class='danger'>You are trying to equip this item to an unsupported inventory slot. Report this to a coder!</span>" );
			}
			return false;
		}

		// Function from file: inventory.dm
		public override dynamic get_item_by_slot( dynamic slot_id = null ) {
			
			dynamic _a = slot_id; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				return this.back;
			} else if ( _a==2 ) {
				return this.wear_mask;
			} else if ( _a==3 ) {
				return this.handcuffed;
			} else if ( _a==19 ) {
				return this.legcuffed;
			} else if ( _a==4 ) {
				return this.l_hand;
			} else if ( _a==5 ) {
				return this.r_hand;
			} else if ( _a==6 ) {
				return this.belt;
			} else if ( _a==7 ) {
				return this.wear_id;
			} else if ( _a==8 ) {
				return this.ears;
			} else if ( _a==9 ) {
				return this.glasses;
			} else if ( _a==10 ) {
				return this.gloves;
			} else if ( _a==11 ) {
				return this.head;
			} else if ( _a==12 ) {
				return this.shoes;
			} else if ( _a==13 ) {
				return this.wear_suit;
			} else if ( _a==14 ) {
				return this.w_uniform;
			} else if ( _a==15 ) {
				return this.l_store;
			} else if ( _a==16 ) {
				return this.r_store;
			} else if ( _a==17 ) {
				return this.s_store;
			}
			return null;
		}

		// Function from file: inventory.dm
		public override bool can_equip( Obj_Item I = null, dynamic slot = null, bool? disable_warning = null ) {
			disable_warning = disable_warning ?? false;

			return ((Species)this.dna.species).can_equip( I, slot, disable_warning, this );
		}

		// Function from file: crew.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			int old_z = 0;

			
			if ( Lang13.Bool( this.w_uniform ) ) {
				old_z = this.z;
				_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

				if ( old_z != this.z ) {
					GlobalVars.crewmonitor.queueUpdate( old_z );
				}
				GlobalVars.crewmonitor.queueUpdate( this.z );
			} else {
				return base.Move( (object)(NewLoc), Dir, step_x, step_y );
			}
			return _default;
		}

		// Function from file: human_movement.dm
		public override int? mob_negates_gravity(  ) {
			return Lang13.Bool( this.shoes ) && Lang13.Bool( ((Obj_Item)this.shoes).negates_gravity() ) ?1:0;
		}

		// Function from file: human_movement.dm
		public override bool mob_has_gravity( Ent_Static T = null ) {
			bool _default = false;

			_default = base.mob_has_gravity( T );

			if ( !_default ) {
				
				if ( Lang13.Bool( this.mob_negates_gravity() ) ) {
					_default = true;
				}
			}
			return _default;
		}

		// Function from file: human_movement.dm
		public override bool experience_pressure_difference( dynamic pressure_difference = null, int direction = 0 ) {
			GlobalFuncs.playsound( this, "sound/effects/space_wind.ogg", 50, 1 );

			if ( Lang13.Bool( this.shoes ) && Lang13.Bool( this.shoes.flags & 1024 ) ) {
				return false;
			}
			return base.experience_pressure_difference( (object)(pressure_difference), direction );
		}

		// Function from file: human_movement.dm
		public override bool slip( int s_amount = 0, int w_amount = 0, dynamic O = null, dynamic lube = null ) {
			
			if ( this.shoes is Obj && Lang13.Bool( this.shoes.flags & 1024 ) && !Lang13.Bool( lube & 4 ) ) {
				return false;
			}
			return base.slip( s_amount, w_amount, (object)(O), (object)(lube) );
		}

		// Function from file: human_movement.dm
		public override int Process_Spacemove( dynamic movement_dir = null ) {
			movement_dir = movement_dir ?? 0;

			dynamic J = null;
			dynamic C = null;

			
			if ( base.Process_Spacemove( (object)(movement_dir) ) != 0 ) {
				return 1;
			}

			if ( !( this.loc is Tile ) ) {
				return 0;
			}
			J = this.back;

			if ( !( J is Obj_Item_Weapon_Tank_Jetpack ) ) {
				C = this.wear_suit;
				J = C.jetpack;
			}

			if ( J is Obj_Item_Weapon_Tank_Jetpack && ((Obj_Item_Weapon_Tank_Jetpack)J).allow_thrust( 0.01, this ) ) {
				return 1;
			}
			return 0;
		}

		// Function from file: human_movement.dm
		public override dynamic movement_delay(  ) {
			dynamic _default = null;

			_default += ((Species)this.dna.species).movement_delay( this );
			_default += base.movement_delay();
			_default += GlobalVars.config.human_delay;
			return _default;
		}

		// Function from file: human_helpers.dm
		public override bool can_use_guns( Obj_Item_Weapon_Gun G = null ) {
			bool _default = false;

			_default = base.can_use_guns( G );

			if ( G.trigger_guard ) {
				
				if ( this.dna.check_mutation( "Hulk" ) != 0 ) {
					this.WriteMsg( "<span class='warning'>Your meaty finger is much too large for the trigger guard!</span>" );
					return false;
				}

				if ( this.dna.species.specflags.Contains( 512 ) ) {
					this.WriteMsg( "<span class='warning'>Your fingers don't fit in the trigger guard!</span>" );
					return false;
				}
			}

			if ( this.martial_art != null && this.martial_art.name == "The Sleeping Carp" ) {
				this.WriteMsg( "<span class='warning'>Use of ranged weaponry would bring dishonor to the clan.</span>" );
				return false;
			}
			return _default;
		}

		// Function from file: human_helpers.dm
		public override double get_permeability_protection(  ) {
			ByTable prot = null;
			Obj_Item I = null;
			dynamic protection = null;

			prot = new ByTable().Set( "hands", 0 ).Set( "chest", 0 ).Set( "groin", 0 ).Set( "legs", 0 ).Set( "feet", 0 ).Set( "arms", 0 ).Set( "head", 0 );

			foreach (dynamic _a in Lang13.Enumerate( this.get_equipped_items(), typeof(Obj_Item) )) {
				I = _a;
				

				if ( ( ( I.body_parts_covered ??0) & 1536 ) != 0 ) {
					prot["hands"] = Num13.MaxInt( ((int)( 1 - Convert.ToDouble( I.permeability_coefficient ) )), Convert.ToInt32( prot["hands"] ) );
				}

				if ( ( ( I.body_parts_covered ??0) & 2 ) != 0 ) {
					prot["chest"] = Num13.MaxInt( ((int)( 1 - Convert.ToDouble( I.permeability_coefficient ) )), Convert.ToInt32( prot["chest"] ) );
				}

				if ( ( ( I.body_parts_covered ??0) & 4 ) != 0 ) {
					prot["groin"] = Num13.MaxInt( ((int)( 1 - Convert.ToDouble( I.permeability_coefficient ) )), Convert.ToInt32( prot["groin"] ) );
				}

				if ( ( ( I.body_parts_covered ??0) & 24 ) != 0 ) {
					prot["legs"] = Num13.MaxInt( ((int)( 1 - Convert.ToDouble( I.permeability_coefficient ) )), Convert.ToInt32( prot["legs"] ) );
				}

				if ( ( ( I.body_parts_covered ??0) & 96 ) != 0 ) {
					prot["feet"] = Num13.MaxInt( ((int)( 1 - Convert.ToDouble( I.permeability_coefficient ) )), Convert.ToInt32( prot["feet"] ) );
				}

				if ( ( ( I.body_parts_covered ??0) & 384 ) != 0 ) {
					prot["arms"] = Num13.MaxInt( ((int)( 1 - Convert.ToDouble( I.permeability_coefficient ) )), Convert.ToInt32( prot["arms"] ) );
				}

				if ( ( ( I.body_parts_covered ??0) & 1 ) != 0 ) {
					prot["head"] = Num13.MaxInt( ((int)( 1 - Convert.ToDouble( I.permeability_coefficient ) )), Convert.ToInt32( prot["head"] ) );
				}
			}
			protection = ( prot["head"] + prot["arms"] + prot["feet"] + prot["legs"] + prot["groin"] + prot["chest"] + prot["hands"] ) / 7;
			return Convert.ToDouble( protection );
		}

		// Function from file: human_helpers.dm
		public override bool can_track( Mob user = null ) {
			dynamic hat = null;

			
			if ( Lang13.Bool( this.wear_id ) && ((Obj_Item)this.wear_id).GetID() is Obj_Item_Weapon_Card_Id_Syndicate ) {
				return false;
			}

			if ( this.head is Obj_Item_Clothing_Head ) {
				hat = this.head;

				if ( hat.blockTracking ) {
					return false;
				}
			}
			return base.can_track( user );
		}

		// Function from file: human_helpers.dm
		public override bool reagent_check( dynamic R = null ) {
			return ((Species)this.dna.species).handle_chemicals( R, this );
		}

		// Function from file: human_helpers.dm
		public override bool InCritical(  ) {
			return Convert.ToDouble( this.health ) <= ( GlobalVars.config.health_threshold_crit ??0) && this.stat == 1;
		}

		// Function from file: human_helpers.dm
		public override bool IsAdvancedToolUser(  ) {
			return true;
		}

		// Function from file: human_helpers.dm
		public override bool abiotic( bool? full_body = null ) {
			full_body = full_body ?? false;

			
			if ( full_body == true && ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.flags & 128 ) || Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.flags & 128 ) || Lang13.Bool( this.back ) && !Lang13.Bool( this.back.flags & 128 ) || Lang13.Bool( this.wear_mask ) && !Lang13.Bool( this.wear_mask.flags & 128 ) || Lang13.Bool( this.head ) && !Lang13.Bool( this.head.flags & 128 ) || Lang13.Bool( this.shoes ) && !Lang13.Bool( this.shoes.flags & 128 ) || Lang13.Bool( this.w_uniform ) && !Lang13.Bool( this.w_uniform.flags & 128 ) || Lang13.Bool( this.wear_suit ) && !Lang13.Bool( this.wear_suit.flags & 128 ) || Lang13.Bool( this.glasses ) && !Lang13.Bool( this.glasses.flags & 128 ) || Lang13.Bool( this.ears ) && !Lang13.Bool( this.ears.flags & 128 ) || Lang13.Bool( this.gloves ) && !Lang13.Bool( this.gloves.flags & 128 ) ) ) {
				return true;
			}

			if ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.flags & 128 ) || Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.flags & 128 ) ) {
				return true;
			}
			return false;
		}

		// Function from file: human_helpers.dm
		public override bool check_ear_prot(  ) {
			
			if ( Lang13.Bool( this.ears ) && Lang13.Bool( this.ears.flags & 1024 ) || Lang13.Bool( this.head ) && Lang13.Bool( this.head.flags & 4096 ) ) {
				return true;
			}
			return false;
		}

		// Function from file: human_helpers.dm
		public override double check_eye_prot(  ) {
			double number = 0;
			dynamic HFP = null;
			dynamic GFP = null;
			dynamic MFP = null;

			number = base.check_eye_prot();

			if ( this.head is Obj_Item_Clothing_Head ) {
				HFP = this.head;
				number += Convert.ToDouble( HFP.flash_protect );
			}

			if ( this.glasses is Obj_Item_Clothing_Glasses ) {
				GFP = this.glasses;
				number += Convert.ToDouble( GFP.flash_protect );
			}

			if ( this.wear_mask is Obj_Item_Clothing_Mask ) {
				MFP = this.wear_mask;
				number += Convert.ToDouble( MFP.flash_protect );
			}
			return number;
		}

		// Function from file: human_helpers.dm
		public override dynamic get_visible_name(  ) {
			dynamic face_name = null;
			string id_name = null;

			face_name = this.get_face_name( "" );
			id_name = this.get_id_name( "" );

			if ( Lang13.Bool( this.name_override ) ) {
				return this.name_override;
			}

			if ( Lang13.Bool( face_name ) ) {
				
				if ( Lang13.Bool( id_name ) && id_name != face_name ) {
					return "" + face_name + " (as " + id_name + ")";
				}
				return face_name;
			}

			if ( Lang13.Bool( id_name ) ) {
				return id_name;
			}
			return "Unknown";
		}

		// Function from file: human_helpers.dm
		public override bool canBeHandcuffed(  ) {
			return true;
		}

		// Function from file: human_helpers.dm
		public override bool restrained(  ) {
			
			if ( Lang13.Bool( this.handcuffed ) ) {
				return true;
			}

			if ( Lang13.Bool( this.wear_suit ) && this.wear_suit.breakouttime != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: human_defense.dm
		public override bool hitby( Ent_Dynamic AM = null, bool? skipcatch = null, bool? hitpush = null, bool? blocked = null ) {
			skipcatch = skipcatch ?? false;
			hitpush = hitpush ?? true;
			blocked = blocked ?? false;

			Ent_Dynamic I = null;
			dynamic throwpower = null;
			dynamic L = null;

			throwpower = 30;

			if ( AM is Obj_Item ) {
				I = AM;
				throwpower = ((dynamic)I).throwforce;
			}

			if ( ((dynamic)I).thrownby != this && this.check_shields( throwpower, new Txt().the( AM.name ).item().ToString(), AM, 4 ) ) {
				hitpush = false;
				skipcatch = true;
				blocked = true;
			} else if ( I != null ) {
				
				if ( Convert.ToDouble( I.throw_speed ) >= 4 ) {
					
					if ( GlobalFuncs.can_embed( I ) ) {
						
						if ( Rand13.PercentChance( Convert.ToInt32( ((dynamic)I).embed_chance ) ) && !( this.dna != null && this.dna.species.specflags.Contains( 8192 ) ) ) {
							this.throw_alert( "embeddedobject", typeof(Obj_Screen_Alert_Embeddedobject) );
							L = Rand13.PickFromTable( this.organs );
							L.embedded_objects.Or( I );
							I.add_blood( this );
							I.loc = this;
							((Obj_Item_Organ_Limb)L).take_damage( ((dynamic)I).w_class * ((dynamic)I).embedded_impact_pain_multiplier );
							this.visible_message( new Txt( "<span class='danger'>" ).the( I.name ).item().str( " embeds itself in " ).item( this ).str( "'s " ).item( ((Obj_Item_Organ_Limb)L).getDisplayName() ).str( "!</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).the( I.name ).item().str( " embeds itself in your " ).item( ((Obj_Item_Organ_Limb)L).getDisplayName() ).str( "!</span>" ).ToString() );
							hitpush = false;
							skipcatch = true;
						}
					}
				}
			}
			return base.hitby( AM, skipcatch, hitpush, blocked );
		}

		// Function from file: human_defense.dm
		public override bool mech_melee_attack( Obj_Mecha M = null ) {
			Obj_Item_Organ_Limb temp = null;
			int update = 0;

			
			if ( ((dynamic)M.occupant).a_intent == "harm" ) {
				
				if ( M.damtype == "brute" ) {
					Map13.StepAway( this, M, 15 );
				}
				temp = this.get_organ( Rand13.Pick(new object [] { "chest", "chest", "chest", "head" }) );

				if ( temp != null ) {
					update = 0;

					dynamic _a = M.damtype; // Was a switch-case, sorry for the mess.
					if ( _a=="brute" ) {
						
						if ( Convert.ToDouble( M.force ) > 20 ) {
							this.Paralyse( 1 );
						}
						update |= temp.take_damage( Rand13.Int( Convert.ToInt32( M.force / 2 ), Convert.ToInt32( M.force ) ), 0 ) ?1:0;
						GlobalFuncs.playsound( this, "sound/weapons/punch4.ogg", 50, 1 );
					} else if ( _a=="fire" ) {
						update |= temp.take_damage( 0, Rand13.Int( Convert.ToInt32( M.force / 2 ), Convert.ToInt32( M.force ) ) ) ?1:0;
						GlobalFuncs.playsound( this, "sound/items/welder.ogg", 50, 1 );
					} else if ( _a=="tox" ) {
						M.mech_toxin_damage( this );
					} else {
						return false;
					}

					if ( update != 0 ) {
						this.update_damage_overlays(  );
					}
					this.updatehealth();
				}
				this.visible_message( "<span class='danger'>" + M.name + " has hit " + this + "!</span>", "<span class='userdanger'>" + M.name + " has hit " + this + "!</span>" );
				GlobalFuncs.add_logs( M.occupant, this, "attacked", M, "(INTENT: " + String13.ToUpper( ((dynamic)M.occupant).a_intent ) + ") (DAMTYPE: " + String13.ToUpper( M.damtype ) + ")" );
			} else {
				base.mech_melee_attack( M );
			}
			return false;
		}

		// Function from file: human_defense.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			double? damage = null;
			string dam_zone = null;
			dynamic affecting = null;
			double armor_block = 0;

			
			if ( base.attack_slime( user ) ) {
				damage = Rand13.Int( 5, 25 );

				if ( user.is_adult ) {
					damage = Rand13.Int( 10, 35 );
				}

				if ( this.check_shields( damage, "the " + user.name ) ) {
					return false;
				}
				dam_zone = Rand13.Pick(new object [] { "head", "chest", "l_arm", "r_arm", "l_leg", "r_leg", "groin" });
				affecting = this.get_organ( GlobalFuncs.ran_zone( dam_zone ) );
				armor_block = this.run_armor_check( affecting, "melee" );
				this.apply_damage( damage, "brute", affecting, armor_block );
			}
			return false;
		}

		// Function from file: human_defense.dm
		public override bool attack_larva( Mob_Living_Carbon_Alien_Larva user = null ) {
			double? damage = null;
			dynamic affecting = null;
			double armor_block = 0;

			
			if ( base.attack_larva( user ) ) {
				damage = Rand13.Int( 1, 3 );

				if ( this.check_shields( damage, "the " + user.name ) ) {
					return false;
				}

				if ( this.stat != 2 ) {
					user.amount_grown = Num13.MinInt( ((int)( user.amount_grown + ( damage ??0) )), user.max_grown );
					affecting = this.get_organ( GlobalFuncs.ran_zone( user.zone_selected ) );
					armor_block = this.run_armor_check( affecting, "melee" );
					this.apply_damage( damage, "brute", affecting, armor_block );
					this.updatehealth();
				}
			}
			return false;
		}

		// Function from file: human_defense.dm
		public override bool attack_animal( Mob_Living user = null ) {
			double? damage = null;
			string dam_zone = null;
			dynamic affecting = null;
			double armor = 0;

			
			if ( base.attack_animal( user ) ) {
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );

				if ( this.check_shields( damage, "the " + user.name, null, 1, Lang13.IntNullable( ((dynamic)user).armour_penetration ) ) ) {
					return false;
				}
				dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });
				affecting = this.get_organ( GlobalFuncs.ran_zone( dam_zone ) );
				armor = this.run_armor_check( affecting, "melee" );
				this.apply_damage( damage, ((dynamic)user).melee_damage_type, affecting, armor );
				this.updatehealth();
			}
			return false;
		}

		// Function from file: human_defense.dm
		public override bool grabbedby( dynamic user = null, bool? supress_message = null ) {
			
			if ( Lang13.Bool( this.w_uniform ) ) {
				((Ent_Static)this.w_uniform).add_fingerprint( user );
			}
			base.grabbedby( (object)(user), supress_message );
			return false;
		}

		// Function from file: human_defense.dm
		public override dynamic acid_act( int acidpwr = 0, double? toxpwr = null, double? acid_volume = null ) {
			dynamic _default = null;

			ByTable damaged = null;
			ByTable inventory_items_to_kill = null;
			int acidity = 0;
			double? acid_volume_left = null;
			double acid_decay = 0;
			dynamic head_clothes = null;
			dynamic chest_clothes = null;
			dynamic arm_clothes = null;
			dynamic leg_clothes = null;
			Obj_Item_Organ_Limb affecting = null;
			Obj_Item I = null;

			damaged = new ByTable();
			inventory_items_to_kill = new ByTable();
			acidity = Num13.MinInt( ((int)( acidpwr * ( acid_volume ??0) / 200 )), ((int)( toxpwr ??0 )) );
			acid_volume_left = acid_volume;
			acid_decay = 100 / acidpwr;
			head_clothes = null;

			if ( Lang13.Bool( this.glasses ) ) {
				head_clothes = this.glasses;
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				head_clothes = this.wear_mask;
			}

			if ( Lang13.Bool( this.head ) ) {
				head_clothes = this.head;
			}

			if ( Lang13.Bool( head_clothes ) ) {
				
				if ( !head_clothes.unacidable ) {
					((Ent_Static)head_clothes).acid_act( acidpwr, acid_volume_left );
					acid_volume_left = Num13.MaxInt( ((int)( ( acid_volume_left ??0) - acid_decay )), 0 );
					this.update_inv_glasses();
					this.update_inv_wear_mask();
					this.update_inv_head();
				} else {
					this.WriteMsg( "<span class='notice'>Your " + head_clothes.name + " protects your head and face from the acid!</span>" );
				}
			} else {
				_default = this.get_organ( "head" );

				if ( Lang13.Bool( _default ) ) {
					damaged.Add( _default );
				}

				if ( Lang13.Bool( this.ears ) ) {
					inventory_items_to_kill.Add( this.ears );
				}
			}
			chest_clothes = null;

			if ( Lang13.Bool( this.w_uniform ) ) {
				chest_clothes = this.w_uniform;
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				chest_clothes = this.wear_suit;
			}

			if ( Lang13.Bool( chest_clothes ) ) {
				
				if ( !chest_clothes.unacidable ) {
					((Ent_Static)chest_clothes).acid_act( acidpwr, acid_volume_left );
					acid_volume_left = Num13.MaxInt( ((int)( ( acid_volume_left ??0) - acid_decay )), 0 );
					this.update_inv_w_uniform();
					this.update_inv_wear_suit();
				} else {
					this.WriteMsg( "<span class='notice'>Your " + chest_clothes.name + " protects your body from the acid!</span>" );
				}
			} else {
				_default = this.get_organ( "chest" );

				if ( Lang13.Bool( _default ) ) {
					damaged.Add( _default );
				}

				if ( Lang13.Bool( this.wear_id ) ) {
					inventory_items_to_kill.Add( this.wear_id );
				}

				if ( Lang13.Bool( this.r_store ) ) {
					inventory_items_to_kill.Add( this.r_store );
				}

				if ( Lang13.Bool( this.l_store ) ) {
					inventory_items_to_kill.Add( this.l_store );
				}

				if ( Lang13.Bool( this.s_store ) ) {
					inventory_items_to_kill.Add( this.s_store );
				}
			}
			arm_clothes = null;

			if ( Lang13.Bool( this.gloves ) ) {
				arm_clothes = this.gloves;
			}

			if ( Lang13.Bool( this.w_uniform ) && ( ( this.w_uniform.body_parts_covered ??0) & 1536 ) != 0 || Lang13.Bool( this.w_uniform ) && ( ( this.w_uniform.body_parts_covered ??0) & 384 ) != 0 ) {
				arm_clothes = this.w_uniform;
			}

			if ( Lang13.Bool( this.wear_suit ) && ( ( this.wear_suit.body_parts_covered ??0) & 1536 ) != 0 || Lang13.Bool( this.wear_suit ) && ( ( this.wear_suit.body_parts_covered ??0) & 384 ) != 0 ) {
				arm_clothes = this.wear_suit;
			}

			if ( Lang13.Bool( arm_clothes ) ) {
				
				if ( !arm_clothes.unacidable ) {
					((Ent_Static)arm_clothes).acid_act( acidpwr, acid_volume_left );
					acid_volume_left = Num13.MaxInt( ((int)( ( acid_volume_left ??0) - acid_decay )), 0 );
					this.update_inv_gloves();
					this.update_inv_w_uniform();
					this.update_inv_wear_suit();
				} else {
					this.WriteMsg( "<span class='notice'>Your " + arm_clothes.name + " protects your arms and hands from the acid!</span>" );
				}
			} else {
				_default = this.get_organ( "r_arm" );

				if ( Lang13.Bool( _default ) ) {
					damaged.Add( _default );
				}
				_default = this.get_organ( "l_arm" );

				if ( Lang13.Bool( _default ) ) {
					damaged.Add( _default );
				}
			}
			leg_clothes = null;

			if ( Lang13.Bool( this.shoes ) ) {
				leg_clothes = this.shoes;
			}

			if ( Lang13.Bool( this.w_uniform ) && ( ( this.w_uniform.body_parts_covered ??0) & 96 ) != 0 || Lang13.Bool( this.w_uniform ) && ( ( this.w_uniform.body_parts_covered ??0) & 24 ) != 0 ) {
				leg_clothes = this.w_uniform;
			}

			if ( Lang13.Bool( this.wear_suit ) && ( ( this.wear_suit.body_parts_covered ??0) & 96 ) != 0 || Lang13.Bool( this.wear_suit ) && ( ( this.wear_suit.body_parts_covered ??0) & 24 ) != 0 ) {
				leg_clothes = this.wear_suit;
			}

			if ( Lang13.Bool( leg_clothes ) ) {
				
				if ( !leg_clothes.unacidable ) {
					((Ent_Static)leg_clothes).acid_act( acidpwr, acid_volume_left );
					acid_volume_left = Num13.MaxInt( ((int)( ( acid_volume_left ??0) - acid_decay )), 0 );
					this.update_inv_shoes();
					this.update_inv_w_uniform();
					this.update_inv_wear_suit();
				} else {
					this.WriteMsg( "<span class='notice'>Your " + leg_clothes.name + " protects your legs and feet from the acid!</span>" );
				}
			} else {
				_default = this.get_organ( "r_leg" );

				if ( Lang13.Bool( _default ) ) {
					damaged.Add( _default );
				}
				_default = this.get_organ( "l_leg" );

				if ( Lang13.Bool( _default ) ) {
					damaged.Add( _default );
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( damaged, typeof(Obj_Item_Organ_Limb) )) {
				affecting = _a;
				
				affecting.take_damage( acidity, acidity * 2 );

				if ( affecting.name == "head" ) {
					
					if ( Rand13.PercentChance( Num13.MinInt( ((int)( acidpwr * ( acid_volume ??0) / 10 )), 90 ) ) ) {
						affecting.take_damage( acidity, acidity * 2 );
						this.emote( "scream" );
						this.facial_hair_style = "Shaved";
						this.hair_style = "Bald";
						this.update_hair();
						this.status_flags |= 16384;
					}
				}
				this.update_damage_overlays();
			}

			if ( Lang13.Bool( this.back ) ) {
				inventory_items_to_kill.Add( this.back );
			}

			if ( Lang13.Bool( this.belt ) ) {
				inventory_items_to_kill.Add( this.belt );
			}

			if ( Lang13.Bool( this.r_hand ) ) {
				inventory_items_to_kill.Add( this.r_hand );
			}

			if ( Lang13.Bool( this.l_hand ) ) {
				inventory_items_to_kill.Add( this.l_hand );
			}

			foreach (dynamic _b in Lang13.Enumerate( inventory_items_to_kill, typeof(Obj_Item) )) {
				I = _b;
				
				I.acid_act( acidpwr, acid_volume_left );
				acid_volume_left = Num13.MaxInt( ((int)( ( acid_volume_left ??0) - acid_decay )), 0 );
			}
			return _default;
		}

		// Function from file: human_defense.dm
		public override double emp_act( int severity = 0 ) {
			bool informed = false;
			Obj_Item_Organ_Limb L = null;

			informed = false;

			foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				L = _b;
				

				if ( L.status == 2 ) {
					
					if ( !informed ) {
						this.WriteMsg( "<span class='userdanger'>You feel a sharp pain as your robotic limbs overload.</span>" );
						informed = true;
					}

					switch ((int)( severity )) {
						case 1:
							L.take_damage( 0, 10 );
							this.Stun( 10 );
							break;
						case 2:
							L.take_damage( 0, 5 );
							this.Stun( 5 );
							break;
					}
				}
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: human_defense.dm
		public override bool attacked_by( Obj_Item I = null, dynamic user = null, bool? def_zone = null ) {
			Obj_Item_Organ_Limb target_limb = null;
			dynamic affecting = null;
			dynamic hit_area = null;
			dynamic target_area = null;

			
			if ( !( I != null ) || !Lang13.Bool( user ) ) {
				return false;
			}
			target_limb = this.get_organ( GlobalFuncs.check_zone( user.zone_selected ) );
			affecting = this.get_organ( GlobalFuncs.ran_zone( user.zone_selected ) );
			hit_area = GlobalFuncs.parse_zone( affecting.name );
			target_area = GlobalFuncs.parse_zone( target_limb.name );
			GlobalFuncs.feedback_add_details( "item_used_for_combat", "" + I.type + "|" + I.force );
			GlobalFuncs.feedback_add_details( "zone_targeted", "" + target_area );
			return ((Species)this.dna.species).spec_attacked_by( I, user, def_zone, affecting, hit_area, this.a_intent, target_limb, target_area, this );
		}

		// Function from file: human.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( this.martial_art != null && this.martial_art.deflection_chance != 0 ) {
				
				if ( !Rand13.PercentChance( this.martial_art.deflection_chance ) ) {
					return base.bullet_act( (object)(P), (object)(def_zone) );
				}

				if ( !Lang13.Bool( this.lying ) && this.dna != null && !( this.dna.check_mutation( "Hulk" ) != 0 ) ) {
					this.visible_message( "<span class='warning'>" + this + " deflects the projectile!</span>", "<span class='userdanger'>You deflect the projectile!</span>" );
					return 0;
				}
			}
			base.bullet_act( (object)(P), (object)(def_zone) );
			return null;
		}

		// Function from file: human_defense.dm
		public override void on_hit( dynamic proj_type = null ) {
			this.dna.species.on_hit( proj_type, this );
			return;
		}

		// Function from file: human_defense.dm
		public override double getarmor( dynamic def_zone = null, string type = null ) {
			double armorval = 0;
			int organnum = 0;
			Obj_Item_Organ_Limb affecting = null;
			Obj_Item_Organ_Limb organ = null;

			armorval = 0;
			organnum = 0;

			if ( Lang13.Bool( def_zone ) ) {
				
				if ( def_zone is Obj_Item_Organ_Limb ) {
					return this.checkarmor( def_zone, type );
				}
				affecting = this.get_organ( GlobalFuncs.ran_zone( def_zone ) );
				return this.checkarmor( affecting, type );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				organ = _a;
				
				armorval += this.checkarmor( organ, type );
				organnum++;
			}
			return armorval / Num13.MaxInt( organnum, 1 );
		}

		// Function from file: human_damage.dm
		public override dynamic apply_damage( dynamic damage = null, dynamic damagetype = null, dynamic def_zone = null, dynamic blocked = null ) {
			damage = damage ?? 0;
			damagetype = damagetype ?? "brute";
			blocked = blocked ?? 0;

			return this.dna.species.apply_damage( damage, damagetype, def_zone, blocked, this );
		}

		// Function from file: human_damage.dm
		public override void take_overall_damage( dynamic brute = null, dynamic burn = null, bool? updating_health = null ) {
			ByTable parts = null;
			int update = 0;
			dynamic picked = null;
			dynamic brute_per_part = null;
			dynamic burn_per_part = null;
			double brute_was = 0;
			double burn_was = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}
			parts = this.get_damageable_organs();
			update = 0;

			while (parts.len != 0 && ( Convert.ToDouble( brute ) > 0 || Convert.ToDouble( burn ) > 0 )) {
				picked = Rand13.PickFromTable( parts );
				brute_per_part = brute / parts.len;
				burn_per_part = burn / parts.len;
				brute_was = picked.brute_dam;
				burn_was = picked.burn_dam;
				update |= ((Obj_Item_Organ_Limb)picked).take_damage( brute_per_part, burn_per_part ) ?1:0;
				brute -= picked.brute_dam - brute_was;
				burn -= picked.burn_dam - burn_was;
				parts.Remove( picked );
			}
			this.updatehealth();

			if ( update != 0 ) {
				this.update_damage_overlays(  );
			}
			return;
		}

		// Function from file: human_damage.dm
		public override void heal_overall_damage( dynamic brute = null, dynamic burn = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			ByTable parts = null;
			int update = 0;
			dynamic picked = null;
			double brute_was = 0;
			double burn_was = 0;

			parts = this.get_damaged_organs( brute, burn );
			update = 0;

			while (parts.len != 0 && ( Convert.ToDouble( brute ) > 0 || Convert.ToDouble( burn ) > 0 )) {
				picked = Rand13.PickFromTable( parts );
				brute_was = picked.brute_dam;
				burn_was = picked.burn_dam;
				update |= ((Obj_Item_Organ_Limb)picked).heal_damage( brute, burn, false ) ?1:0;
				brute -= brute_was - picked.brute_dam;
				burn -= burn_was - picked.burn_dam;
				parts.Remove( picked );
			}

			if ( updating_health == true ) {
				this.updatehealth();

				if ( update != 0 ) {
					this.update_damage_overlays(  );
				}
			}
			return;
		}

		// Function from file: human_damage.dm
		public override void take_organ_damage( dynamic brute = null, dynamic burn = null, bool? updating_health = null ) {
			ByTable parts = null;
			dynamic picked = null;

			parts = this.get_damageable_organs();

			if ( !( parts.len != 0 ) ) {
				return;
			}
			picked = Rand13.PickFromTable( parts );

			if ( ((Obj_Item_Organ_Limb)picked).take_damage( brute, burn ) ) {
				this.update_damage_overlays(  );
			}
			this.updatehealth();
			return;
		}

		// Function from file: human_damage.dm
		public override void heal_organ_damage( double brute = 0, double burn = 0, bool? updating_health = null ) {
			ByTable parts = null;
			dynamic picked = null;

			parts = this.get_damaged_organs( brute, burn );

			if ( !( parts.len != 0 ) ) {
				return;
			}
			picked = Rand13.PickFromTable( parts );

			if ( ((Obj_Item_Organ_Limb)picked).heal_damage( brute, burn, false ) ) {
				this.update_damage_overlays(  );
			}
			this.updatehealth();
			return;
		}

		// Function from file: human_damage.dm
		public override dynamic adjustFireLoss( dynamic amount = null, bool? updating_health = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return 0;
			}

			if ( Convert.ToDouble( amount ) > 0 ) {
				this.take_overall_damage( 0, amount );
			} else {
				this.heal_overall_damage( 0, -amount );
			}
			return null;
		}

		// Function from file: human_damage.dm
		public override dynamic adjustBruteLoss( dynamic amount = null, bool? updating_health = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return 0;
			}

			if ( Convert.ToDouble( amount ) > 0 ) {
				this.take_overall_damage( amount, 0 );
			} else {
				this.heal_overall_damage( -amount, 0 );
			}
			return null;
		}

		// Function from file: human_damage.dm
		public override double getFireLoss(  ) {
			double amount = 0;
			Obj_Item_Organ_Limb O = null;

			amount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				O = _a;
				
				amount += O.burn_dam;
			}
			return amount;
		}

		// Function from file: human_damage.dm
		public override double getBruteLoss(  ) {
			double amount = 0;
			Obj_Item_Organ_Limb O = null;

			amount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				O = _a;
				
				amount += O.brute_dam;
			}
			return amount;
		}

		// Function from file: human_damage.dm
		public override void updatehealth(  ) {
			double total_burn = 0;
			double total_brute = 0;
			Obj_Item_Organ_Limb O = null;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}
			total_burn = 0;
			total_brute = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				O = _a;
				
				total_brute += O.brute_dam;
				total_burn += O.burn_dam;
			}
			this.health = this.maxHealth - this.getOxyLoss() - this.getToxLoss() - this.getCloneLoss() - total_burn - total_brute;
			this.update_stat();

			if ( Convert.ToDouble( this.maxHealth - total_burn ) < ( GlobalVars.config.health_threshold_dead ??0) && this.stat == 2 ) {
				this.ChangeToHusk();

				if ( this.on_fire ) {
					this.shred_clothing();
				}
			}
			this.med_hud_set_health();
			this.med_hud_set_status();
			return;
		}

		// Function from file: human_attackpaw.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dam_zone = null;
			dynamic affecting = null;
			double? damage = null;

			dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });
			affecting = this.get_organ( GlobalFuncs.ran_zone( dam_zone ) );

			if ( a.a_intent == "help" ) {
				base.attack_paw( (object)(a), (object)(b), (object)(c) );
				return 0;
			}

			if ( this.can_inject( a, true, affecting ) ) {
				
				if ( Lang13.Bool( base.attack_paw( (object)(a), (object)(b), (object)(c) ) ) ) {
					damage = Rand13.Int( 1, 3 );

					if ( this.stat != 2 ) {
						this.apply_damage( damage, "brute", affecting, this.run_armor_check( affecting, "melee" ) );
						this.updatehealth();
					}
				}
				return 1;
			}
			return null;
		}

		// Function from file: human_attackhand.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			((Species)this.dna.species).spec_attack_hand( a, this );
			return null;
		}

		// Function from file: human_attackhand.dm
		public override bool attack_hulk( Mob_Living_Carbon_Human hulk = null, bool? do_attack_animation = null ) {
			dynamic hulk_verb = null;

			
			if ( hulk.a_intent == "harm" ) {
				base.attack_hulk( hulk, true );
				GlobalFuncs.playsound( this.loc, hulk.dna.species.attack_sound, 25, 1, -1 );
				hulk_verb = Rand13.Pick(new object [] { "smash", "pummel" });
				this.visible_message( "<span class='danger'>" + hulk + " has " + hulk_verb + "ed " + this + "!</span>", "<span class='userdanger'>" + hulk + " has " + hulk_verb + "ed " + this + "!</span>" );
				this.adjustBruteLoss( 15 );
				return true;
			}
			return false;
		}

		// Function from file: human_attackalien.dm
		public override bool attack_alien( dynamic user = null ) {
			double? damage = null;
			dynamic affecting = null;
			double? armor_block = null;
			int randn = 0;

			
			if ( this.check_shields( 0, user.name ) ) {
				this.visible_message( "<span class='danger'>" + user + " attempted to touch " + this + "!</span>" );
				return false;
			}

			if ( base.attack_alien( (object)(user) ) ) {
				
				if ( user.a_intent == "harm" ) {
					
					if ( Lang13.Bool( this.w_uniform ) ) {
						((Ent_Static)this.w_uniform).add_fingerprint( user );
					}
					damage = ( Rand13.PercentChance( 90 ) ? 20 : 0 );

					if ( !Lang13.Bool( damage ) ) {
						GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 50, 1, -1 );
						this.visible_message( "<span class='danger'>" + user + " has lunged at " + this + "!</span>", "<span class='userdanger'>" + user + " has lunged at " + this + "!</span>" );
						return false;
					}
					affecting = this.get_organ( GlobalFuncs.ran_zone( user.zone_selected ) );
					armor_block = this.run_armor_check( affecting, "melee", "", "", 10 );
					GlobalFuncs.playsound( this.loc, "sound/weapons/slice.ogg", 25, 1, -1 );
					this.visible_message( "<span class='danger'>" + user + " has slashed at " + this + "!</span>", "<span class='userdanger'>" + user + " has slashed at " + this + "!</span>" );
					this.apply_damage( damage, "brute", affecting, armor_block );

					if ( Rand13.PercentChance( 30 ) ) {
						this.visible_message( "<span class='danger'>" + user + " has wounded " + this + "!</span>", "<span class='userdanger'>" + user + " has wounded " + this + "!</span>" );
						this.apply_effect( 4, "weaken", armor_block );
						GlobalFuncs.add_logs( user, this, "attacked" );
					}
					this.updatehealth();
				}

				if ( user.a_intent == "disarm" ) {
					randn = Rand13.Int( 1, 100 );

					if ( randn <= 80 ) {
						GlobalFuncs.playsound( this.loc, "sound/weapons/pierce.ogg", 25, 1, -1 );
						this.Weaken( 5 );
						GlobalFuncs.add_logs( user, this, "tackled" );
						this.visible_message( "<span class='danger'>" + user + " has tackled down " + this + "!</span>", "<span class='userdanger'>" + user + " has tackled down " + this + "!</span>" );
					} else if ( randn <= 99 ) {
						GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 25, 1, -1 );
						this.drop_item();
						this.visible_message( "<span class='danger'>" + user + " disarmed " + this + "!</span>", "<span class='userdanger'>" + user + " disarmed " + this + "!</span>" );
					} else {
						GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 50, 1, -1 );
						this.visible_message( "<span class='danger'>" + user + " has tried to disarm " + this + "!</span>", "<span class='userdanger'>" + user + " has tried to disarm " + this + "!</span>" );
					}
				}
			}
			return false;
		}

		// Function from file: human.dm
		public override bool update_health_hud( dynamic shown_health_amount = null ) {
			dynamic health_amount = null;
			Obj_Item_Organ_Limb L = null;
			double damage = 0;
			double comparison = 0;
			int icon_num = 0;

			
			if ( !( this.client != null ) || !( this.hud_used != null ) ) {
				return false;
			}

			if ( Lang13.Bool( this.dna.species.update_health_hud() ) ) {
				return false;
			} else {
				
				if ( this.hud_used.healths != null ) {
					health_amount = this.health - this.staminaloss;

					if ( base.update_health_hud( (object)(health_amount) ) ) {
						
						switch ((int)( this.hal_screwyhud )) {
							case 1:
								this.hud_used.healths.icon_state = "health6";
								break;
							case 2:
								this.hud_used.healths.icon_state = "health7";
								break;
							case 5:
								this.hud_used.healths.icon_state = "health0";
								break;
						}
					}
				}

				if ( this.hud_used.healthdoll != null ) {
					this.hud_used.healthdoll.overlays.Cut();

					if ( this.stat != 2 ) {
						this.hud_used.healthdoll.icon_state = "healthdoll_OVERLAY";

						foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
							L = _b;
							
							damage = L.burn_dam + L.brute_dam;
							comparison = L.max_damage / 5;
							icon_num = 0;

							if ( damage != 0 ) {
								icon_num = 1;
							}

							if ( damage > comparison ) {
								icon_num = 2;
							}

							if ( damage > comparison * 2 ) {
								icon_num = 3;
							}

							if ( damage > comparison * 3 ) {
								icon_num = 4;
							}

							if ( damage > comparison * 4 ) {
								icon_num = 5;
							}

							if ( this.hal_screwyhud == 5 ) {
								icon_num = 0;
							}

							if ( icon_num != 0 ) {
								this.hud_used.healthdoll.overlays.Add( new Image( "icons/mob/screen_gen.dmi", "" + L.name + icon_num ) );
							}
						}
					} else {
						this.hud_used.healthdoll.icon_state = "healthdoll_DEAD";
					}
				}
			}
			return false;
		}

		// Function from file: human.dm
		public override double get_total_tint(  ) {
			double _default = 0;

			_default = base.get_total_tint();

			if ( Lang13.Bool( this.glasses ) ) {
				_default += this.glasses.tint;
			}
			return _default;
		}

		// Function from file: human.dm
		public override void update_sight(  ) {
			
			if ( !( this.client != null ) ) {
				return;
			}

			if ( this.stat == 2 ) {
				this.sight = 28;
				this.see_in_dark = 8;
				this.see_invisible = 60;
				return;
			}
			((Species)this.dna.species).update_sight( this );
			return;
		}

		// Function from file: human.dm
		public override void replace_records_name( dynamic oldname = null, dynamic newname = null ) {
			ByTable L = null;
			Data_Record R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.data_core.general, GlobalVars.data_core.medical, GlobalVars.data_core.security, GlobalVars.data_core.locked }), typeof(ByTable) )) {
				L = _a;
				
				R = GlobalFuncs.find_record( "name", oldname, L );

				if ( R != null ) {
					R.fields["name"] = newname;
				}
			}
			return;
		}

		// Function from file: human.dm
		public override void resist_restraints(  ) {
			
			if ( Lang13.Bool( this.wear_suit ) && this.wear_suit.breakouttime != 0 ) {
				this.changeNext_move( 100 );
				this.last_special = Game13.time + 100;
				this.cuff_resist( this.wear_suit );
			} else {
				base.resist_restraints();
			}
			return;
		}

		// Function from file: human.dm
		public override bool canUseTopic( dynamic M = null, bool? be_close = null, bool? no_dextery = null ) {
			be_close = be_close ?? false;

			
			if ( this.incapacitated() || Lang13.Bool( this.lying ) ) {
				return false;
			}

			if ( !this.Adjacent( M ) && M.loc != this ) {
				
				if ( be_close == false && this.dna.check_mutation( "Telekinesis" ) != 0 ) {
					
					if ( GlobalFuncs.tkMaxRangeCheck( this, M ) ) {
						return true;
					}
				}
				return false;
			}
			return true;
		}

		// Function from file: human.dm
		public override bool clean_blood(  ) {
			Mob_Living_Carbon_Human H = null;

			H = this;

			if ( Lang13.Bool( H.gloves ) ) {
				
				if ( ((Ent_Static)H.gloves).clean_blood() ) {
					H.update_inv_gloves();
				}
			} else {
				base.clean_blood();

				if ( H.bloody_hands != 0 ) {
					H.bloody_hands = 0;
					H.bloody_hands_mob = null;
					H.update_inv_gloves();
				}
			}
			this.update_icons();
			return false;
		}

		// Function from file: human.dm
		public override bool cuff_resist( dynamic I = null, double? breakouttime = null, bool? cuff_break = null ) {
			
			if ( this.dna != null && this.dna.check_mutation( "Hulk" ) != 0 ) {
				this.say( Rand13.Pick(new object [] { ";RAAAAAAAARGH!", ";HNNNNNNNNNGGGGGGH!", ";GWAAAAAAAARRRHHH!", "NNNNNNNNGGGGGGGGHH!", ";AAAAAAARRRGH!" }) );

				if ( base.cuff_resist( (object)(I), (double?)(null), true ) ) {
					this.unEquip( I );
				}
			} else if ( base.cuff_resist( (object)(I), breakouttime, cuff_break ) ) {
				this.unEquip( I );
			}
			return false;
		}

		// Function from file: human.dm
		public override void generateStaticOverlay(  ) {
			Image staticOverlay = null;

			staticOverlay = new Image( new Icon( "icons/effects/effects.dmi", "static" ), this );
			staticOverlay.v_override = true;
			this.staticOverlays["static"] = staticOverlay;
			staticOverlay = new Image( new Icon( "icons/effects/effects.dmi", "blank" ), this );
			staticOverlay.v_override = true;
			this.staticOverlays["blank"] = staticOverlay;
			staticOverlay = GlobalFuncs.getLetterImage( this, "H", 1 );
			staticOverlay.v_override = true;
			this.staticOverlays["letter"] = staticOverlay;
			return;
		}

		// Function from file: human.dm
		public override void help_shake_act( dynamic M = null ) {
			Obj_Item_Organ_Limb org = null;
			string status = null;
			double brutedamage = 0;
			double burndamage = 0;
			Obj_Item I = null;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return;
			}

			if ( Convert.ToDouble( this.health ) >= 0 ) {
				
				if ( this == M ) {
					this.visible_message( new Txt().item( this ).str( " examines " ).himself_herself_itself_themself().str( "." ).ToString(), "<span class='notice'>You check yourself for injuries.</span>" );

					foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
						org = _b;
						
						status = "";
						brutedamage = org.brute_dam;
						burndamage = org.burn_dam;

						if ( this.hallucination != 0 ) {
							
							if ( Rand13.PercentChance( 30 ) ) {
								brutedamage += Rand13.Int( 30, 40 );
							}

							if ( Rand13.PercentChance( 30 ) ) {
								burndamage += Rand13.Int( 30, 40 );
							}
						}

						if ( brutedamage > 0 ) {
							status = "bruised";
						}

						if ( brutedamage > 20 ) {
							status = "battered";
						}

						if ( brutedamage > 40 ) {
							status = "mangled";
						}

						if ( brutedamage > 0 && burndamage > 0 ) {
							status += " and ";
						}

						if ( burndamage > 40 ) {
							status += "peeling away";
						} else if ( burndamage > 10 ) {
							status += "blistered";
						} else if ( burndamage > 0 ) {
							status += "numb";
						}

						if ( status == "" ) {
							status = "OK";
						}
						this.WriteMsg( "	 " + ( status == "OK" ? "ÿ!" : "ÿ" ) + " Your " + org.getDisplayName() + " is " + status + "." );

						foreach (dynamic _a in Lang13.Enumerate( org.embedded_objects, typeof(Obj_Item) )) {
							I = _a;
							
							this.WriteMsg( new Txt( "	 <a href='byond://?src=" ).Ref( this ).str( ";embedded_object=" ).Ref( I ).str( ";embedded_limb=" ).Ref( org ).str( "'>" ).red().str( "There is " ).a( I ).item().str( " embedded in your " ).item( org.getDisplayName() ).str( "!</a>" ).ToString() );
						}
					}

					if ( this.blood_max != 0 ) {
						this.WriteMsg( "<span class='danger'>You are bleeding!</span>" );
					}

					if ( Lang13.Bool( this.staminaloss ) ) {
						
						if ( Convert.ToDouble( this.staminaloss ) > 30 ) {
							this.WriteMsg( "<span class='info'>You're completely exhausted.</span>" );
						} else {
							this.WriteMsg( "<span class='info'>You feel fatigued.</span>" );
						}
					}
				} else {
					
					if ( Lang13.Bool( this.wear_suit ) ) {
						((Ent_Static)this.wear_suit).add_fingerprint( M );
					} else if ( Lang13.Bool( this.w_uniform ) ) {
						((Ent_Static)this.w_uniform).add_fingerprint( M );
					}
					base.help_shake_act( (object)(M) );
				}
			}
			return;
		}

		// Function from file: human.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			ByTable handlist = null;
			Obj_Item hand = null;

			
			if ( ( current_size ??0) >= 5 ) {
				handlist = new ByTable(new object [] { this.l_hand, this.r_hand });

				foreach (dynamic _a in Lang13.Enumerate( handlist, typeof(Obj_Item) )) {
					hand = _a;
					

					if ( Rand13.PercentChance( ( current_size ??0) * 5 ) && Convert.ToDouble( hand.w_class ) >= ( 11 - ( current_size ??0) ) / 2 && this.unEquip( hand ) ) {
						Map13.StepTowardsSimple( hand, this );
						this.WriteMsg( new Txt( "<span class='warning'>" ).The( S ).item().str( " pulls " ).the( hand ).item().str( " from your grip!</span>" ).ToString() );
					}
				}
			}
			this.rad_act( ( current_size ??0) * 3 );

			if ( Lang13.Bool( this.mob_negates_gravity() ) ) {
				return;
			}
			base.singularity_pull( S, current_size );
			return;
		}

		// Function from file: human.dm
		public override double singularity_act( int? current_size = null, Obj_Singularity S = null ) {
			int gain = 0;

			gain = 20;

			if ( this.mind != null ) {
				
				if ( this.mind.assigned_role == "Station Engineer" || this.mind.assigned_role == "Chief Engineer" ) {
					gain = 100;
				}

				if ( this.mind.assigned_role == "Clown" ) {
					gain = Rand13.Int( -300, 300 );
				}
			}
			this.investigate_log( "(" + GlobalFuncs.key_name( this ) + ") has been consumed by the singularity.", "singulo" );
			this.gib();
			return gain;
		}

		// Function from file: human.dm
		public override int assess_threat( Mob_Living_SimpleAnimal_Bot judgebot = null, string lasercolor = null ) {
			int threatcount = 0;
			dynamic idcard = null;
			dynamic perpname = null;
			Data_Record R = null;

			
			if ( judgebot.emagged == 2 ) {
				return 10;
			}
			threatcount = 0;

			if ( Lang13.Bool( lasercolor ) ) {
				
				if ( lasercolor == "b" ) {
					
					if ( this.wear_suit is Obj_Item_Clothing_Suit_Redtag ) {
						threatcount += 4;
					}

					if ( this.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag || this.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) {
						threatcount += 4;
					}

					if ( this.belt is Obj_Item_Weapon_Gun_Energy_Laser_Redtag ) {
						threatcount += 2;
					}
				}

				if ( lasercolor == "r" ) {
					
					if ( this.wear_suit is Obj_Item_Clothing_Suit_Bluetag ) {
						threatcount += 4;
					}

					if ( this.r_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag || this.l_hand is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag ) {
						threatcount += 4;
					}

					if ( this.belt is Obj_Item_Weapon_Gun_Energy_Laser_Bluetag ) {
						threatcount += 2;
					}
				}
				return threatcount;
			}
			idcard = this.get_idcard();

			if ( Lang13.Bool( ((dynamic)judgebot).idcheck ) && !Lang13.Bool( idcard ) && this.name == "Unknown" ) {
				threatcount += 4;
			}

			if ( Lang13.Bool( ((dynamic)judgebot).weaponscheck ) ) {
				
				if ( !Lang13.Bool( idcard ) || !Lang13.Bool( idcard.access.Contains( GlobalVars.access_weapons ) ) ) {
					
					if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.l_hand ) ) ) {
						threatcount += 4;
					}

					if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.r_hand ) ) ) {
						threatcount += 4;
					}

					if ( Lang13.Bool( ((dynamic)judgebot).check_for_weapons( this.belt ) ) ) {
						threatcount += 2;
					}
				}
			}

			if ( Lang13.Bool( ((dynamic)judgebot).check_records ) ) {
				perpname = this.get_face_name( this.get_id_name() );
				R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.security );

				if ( R != null && Lang13.Bool( R.fields["criminal"] ) ) {
					
					dynamic _a = R.fields["criminal"]; // Was a switch-case, sorry for the mess.
					if ( _a=="*Arrest*" ) {
						threatcount += 5;
					} else if ( _a=="Incarcerated" ) {
						threatcount += 2;
					} else if ( _a=="Parolled" ) {
						threatcount += 2;
					}
				}
			}

			if ( this.head is Obj_Item_Clothing_Head_Wizard || this.head is Obj_Item_Clothing_Head_Helmet_Space_Hardsuit_Wizard ) {
				threatcount += 2;
			}

			if ( this.dna != null && Lang13.Bool( this.dna.species.id ) && this.dna.species.id != "human" ) {
				threatcount += 1;
			}

			if ( GlobalFuncs.isloyal( this ) ) {
				threatcount -= 1;
			}

			if ( idcard is Obj_Item_Weapon_Card_Id_Syndicate ) {
				threatcount -= 5;
			}
			return threatcount;
		}

		// Function from file: human.dm
		public override bool can_inject( dynamic user = null, bool error_msg = false, dynamic target_zone = null, bool? penetrate_thick = null ) {
			penetrate_thick = penetrate_thick ?? false;

			bool _default = false;

			_default = true;

			if ( Lang13.Bool( user ) && !Lang13.Bool( target_zone ) ) {
				target_zone = user.zone_selected;
			}

			if ( this.dna.species.specflags.Contains( this.dna != null && 8192 != 0 ) ) {
				_default = false;
			}

			if ( GlobalFuncs.above_neck( target_zone ) ) {
				
				if ( Lang13.Bool( this.head ) && Lang13.Bool( this.head.flags & 8192 ) && !( penetrate_thick == true ) ) {
					_default = false;
				}
			} else if ( Lang13.Bool( this.wear_suit ) && Lang13.Bool( this.wear_suit.flags & 8192 ) && !( penetrate_thick == true ) ) {
				_default = false;
			}

			if ( !_default && error_msg && Lang13.Bool( user ) ) {
				user.WriteMsg( "<span class='alert'>There is no exposed flesh or thin material " + ( GlobalFuncs.above_neck( target_zone ) ? "on their head" : "on their body" ) + ".</span>" );
			}
			return _default;
		}

		// Function from file: human.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic I = null;
			dynamic L = null;
			double time_taken = 0;
			double? slot = null;
			string pocket_side = null;
			int pocket_id = 0;
			dynamic pocket_item = null;
			dynamic place_item = null;
			int delay_denominator = 0;
			Mob H = null;
			dynamic perpname = null;
			Data_Record R = null;
			dynamic P = null;
			dynamic health = null;
			dynamic health2 = null;
			string span = null;
			string status = null;
			Obj_Item_Organ_Limb org = null;
			double brutedamage = 0;
			Obj_Item_Organ_Limb org2 = null;
			double burndamage = 0;
			dynamic allowed_access = null;
			dynamic G = null;
			dynamic access = null;
			dynamic setcriminal = null;
			Data_Crime c = null;
			Data_Crime c2 = null;
			string t1 = null;
			string t2 = null;
			Data_Crime crime = null;
			string t12 = null;
			string t22 = null;
			Data_Crime crime2 = null;
			int counter = 0;
			string t13 = null;
			int counter2 = 0;

			
			if ( Task13.User.canUseTopic( this, true, true ) ) {
				
				if ( Lang13.Bool( href_list["embedded_object"] ) ) {
					I = Lang13.FindObj( href_list["embedded_object"] );
					L = Lang13.FindObj( href_list["embedded_limb"] );

					if ( !Lang13.Bool( I ) || !Lang13.Bool( L ) || I.loc != this || !L.embedded_objects.Contains( I ) ) {
						return null;
					}
					time_taken = I.embedded_unsafe_removal_time * Convert.ToDouble( I.w_class );
					Task13.User.visible_message( "<span class='warning'>" + Task13.User + " attempts to remove " + I + " from their " + ((Obj_Item_Organ_Limb)L).getDisplayName() + ".</span>", "<span class='notice'>You attempt to remove " + I + " from your " + ((Obj_Item_Organ_Limb)L).getDisplayName() + "... (It will take " + time_taken / 10 + " seconds.)</span>" );

					if ( GlobalFuncs.do_after( Task13.User, time_taken, true, this ) ) {
						
						if ( !Lang13.Bool( I ) || !Lang13.Bool( L ) || I.loc != this || !L.embedded_objects.Contains( I ) ) {
							return null;
						}
						L.embedded_objects.Remove( I );
						L.take_damage( I.embedded_unsafe_removal_pain_multiplier * Convert.ToDouble( I.w_class ) );
						I.loc = GlobalFuncs.get_turf( this );
						Task13.User.put_in_hands( I );
						Task13.User.emote( "scream" );
						Task13.User.visible_message( "" + Task13.User + " successfully rips " + I + " out of their " + ((Obj_Item_Organ_Limb)L).getDisplayName() + "!", "<span class='notice'>You successfully remove " + I + " from your " + ((Obj_Item_Organ_Limb)L).getDisplayName() + ".</span>" );

						if ( !this.has_embedded_objects() ) {
							this.clear_alert( "embeddedobject" );
						}
					}
					return null;
				}

				if ( Lang13.Bool( href_list["item"] ) ) {
					slot = String13.ParseNumber( href_list["item"] );

					if ( this.check_obscured_slots().Contains( slot ) ) {
						Task13.User.WriteMsg( "<span class='warning'>You can't reach that! Something is covering it.</span>" );
						return null;
					}
				}

				if ( Lang13.Bool( href_list["pockets"] ) ) {
					pocket_side = href_list["pockets"];
					pocket_id = ( pocket_side == "right" ? 16 : 15 );
					pocket_item = ( pocket_id == 16 ? this.r_store : this.l_store );
					place_item = Task13.User.get_active_hand();
					delay_denominator = 1;

					if ( Lang13.Bool( pocket_item ) && !Lang13.Bool( pocket_item.flags & 128 ) ) {
						
						if ( Lang13.Bool( pocket_item.flags & 2 ) ) {
							Task13.User.WriteMsg( "<span class='warning'>You try to empty " + this + "'s " + pocket_side + " pocket, it seems to be stuck!</span>" );
						}
						Task13.User.WriteMsg( "<span class='notice'>You try to empty " + this + "'s " + pocket_side + " pocket.</span>" );
					} else if ( Lang13.Bool( place_item ) && Lang13.Bool( ((Obj_Item)place_item).mob_can_equip( this, pocket_id, true ) ) && !Lang13.Bool( place_item.flags & 128 ) ) {
						Task13.User.WriteMsg( "<span class='notice'>You try to place " + place_item + " into " + this + "'s " + pocket_side + " pocket.</span>" );
						delay_denominator = 4;
					} else {
						return null;
					}

					if ( GlobalFuncs.do_mob( Task13.User, this, 40 / delay_denominator ) ) {
						
						if ( Lang13.Bool( pocket_item ) ) {
							
							if ( pocket_item == ( pocket_id == 16 ? this.r_store : this.l_store ) ) {
								this.unEquip( pocket_item );
							}
						} else if ( Lang13.Bool( place_item ) ) {
							Task13.User.unEquip( place_item );
							this.equip_to_slot_if_possible( place_item, pocket_id, false, true );
						}

						if ( Task13.User.machine == this && Map13.GetDistance( this, Task13.User ) <= 1 ) {
							this.show_inv( Task13.User );
						}
					} else {
						this.WriteMsg( "<span class='warning'>You feel your " + pocket_side + " pocket being fumbled with!</span>" );
					}
				}
				base.Topic( href, href_list, (object)(hsrc) );
			}

			if ( Lang13.Bool( href_list["hud"] ) ) {
				
				if ( Task13.User is Mob_Living_Carbon_Human ) {
					H = Task13.User;
					perpname = this.get_face_name( this.get_id_name( "" ) );

					if ( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud ) {
						R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.general );

						if ( Lang13.Bool( href_list["photo_front"] ) || Lang13.Bool( href_list["photo_side"] ) ) {
							
							if ( R != null ) {
								
								if ( !Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
									return null;
								} else if ( !( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud ) ) {
									return null;
								}
								P = null;

								if ( Lang13.Bool( href_list["photo_front"] ) ) {
									P = R.fields["photo_front"];
								} else if ( Lang13.Bool( href_list["photo_side"] ) ) {
									P = R.fields["photo_side"];
								}

								if ( Lang13.Bool( P ) ) {
									P.show( H );
								}
							}
						}

						if ( href_list["hud"] == "m" ) {
							
							if ( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Health ) {
								
								if ( Lang13.Bool( href_list["p_stat"] ) ) {
									health = Interface13.Input( Task13.User, "Specify a new physical status for this person.", "Medical HUD", R.fields["p_stat"], new ByTable(new object [] { "Active", "Physically Unfit", "*Unconscious*", "*Deceased*", "Cancel" }), InputType.Any );

									if ( R != null ) {
										
										if ( !Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
											return null;
										} else if ( !( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Health ) ) {
											return null;
										}

										if ( Lang13.Bool( health ) && health != "Cancel" ) {
											R.fields["p_stat"] = health;
										}
									}
									return null;
								}

								if ( Lang13.Bool( href_list["m_stat"] ) ) {
									health2 = Interface13.Input( Task13.User, "Specify a new mental status for this person.", "Medical HUD", R.fields["m_stat"], new ByTable(new object [] { "Stable", "*Watch*", "*Unstable*", "*Insane*", "Cancel" }), InputType.Any );

									if ( R != null ) {
										
										if ( !Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
											return null;
										} else if ( !( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Health ) ) {
											return null;
										}

										if ( Lang13.Bool( health2 ) && health2 != "Cancel" ) {
											R.fields["m_stat"] = health2;
										}
									}
									return null;
								}

								if ( Lang13.Bool( href_list["evaluation"] ) ) {
									
									if ( !( this.getBruteLoss() != 0 ) && !( this.getFireLoss() != 0 ) && !Lang13.Bool( this.getOxyLoss() ) && Convert.ToDouble( this.getToxLoss() ) < 20 ) {
										Task13.User.WriteMsg( "<span class='notice'>No external injuries detected.</span><br>" );
										return null;
									}
									span = "notice";
									status = "";

									if ( this.getBruteLoss() != 0 ) {
										Task13.User.WriteMsg( "<b>Physical trauma analysis:</b>" );

										foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
											org = _a;
											
											brutedamage = org.brute_dam;

											if ( brutedamage > 0 ) {
												status = "received minor physical injuries.";
												span = "notice";
											}

											if ( brutedamage > 20 ) {
												status = "been seriously damaged.";
												span = "danger";
											}

											if ( brutedamage > 40 ) {
												status = "sustained major trauma!";
												span = "userdanger";
											}

											if ( brutedamage != 0 ) {
												Task13.User.WriteMsg( "<span class='" + span + "'>The " + org.getDisplayName() + " appears to have " + status + "</span>" );
											}
										}
									}

									if ( this.getFireLoss() != 0 ) {
										Task13.User.WriteMsg( "<b>Analysis of skin burns:</b>" );

										foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
											org2 = _b;
											
											burndamage = org2.burn_dam;

											if ( burndamage > 0 ) {
												status = "signs of minor burns.";
												span = "notice";
											}

											if ( burndamage > 20 ) {
												status = "serious burns.";
												span = "danger";
											}

											if ( burndamage > 40 ) {
												status = "major burns!";
												span = "userdanger";
											}

											if ( burndamage != 0 ) {
												Task13.User.WriteMsg( "<span class='" + span + "'>The " + org2.getDisplayName() + " appears to have " + status + "</span>" );
											}
										}
									}

									if ( Lang13.Bool( this.getOxyLoss() ) ) {
										Task13.User.WriteMsg( "<span class='danger'>Patient has signs of suffocation, emergency treatment may be required!</span>" );
									}

									if ( Convert.ToDouble( this.getToxLoss() ) > 20 ) {
										Task13.User.WriteMsg( "<span class='danger'>Gathered data is inconsistent with the analysis, possible cause: poisoning.</span>" );
									}
								}
							}
						}

						if ( href_list["hud"] == "s" ) {
							
							if ( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Security ) {
								
								if ( Task13.User.stat != 0 || Task13.User == this ) {
									return null;
								}
								allowed_access = null;
								G = ((dynamic)H).glasses;

								if ( !Lang13.Bool( G.emagged ) ) {
									
									if ( Lang13.Bool( ((dynamic)H).wear_id ) ) {
										access = ((Obj_Item)((dynamic)H).wear_id).GetAccess();

										if ( Lang13.Bool( access.Contains( GlobalVars.access_sec_doors ) ) ) {
											allowed_access = ((dynamic)H).get_authentification_name();
										}
									}
								} else {
									allowed_access = "@%&ERROR_%$*";
								}

								if ( !Lang13.Bool( allowed_access ) ) {
									H.WriteMsg( "<span class='warning'>ERROR: Invalid Access</span>" );
									return null;
								}

								if ( Lang13.Bool( perpname ) ) {
									R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.security );

									if ( R != null ) {
										
										if ( Lang13.Bool( href_list["status"] ) ) {
											setcriminal = Interface13.Input( Task13.User, "Specify a new criminal status for this person.", "Security HUD", R.fields["criminal"], new ByTable(new object [] { "None", "*Arrest*", "Incarcerated", "Parolled", "Discharged", "Cancel" }), InputType.Any );

											if ( setcriminal != "Cancel" ) {
												
												if ( R != null ) {
													
													if ( Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
														
														if ( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Security ) {
															this.investigate_log( "" + this.key + " has been set from " + R.fields["criminal"] + " to " + setcriminal + " by " + Task13.User.name + " (" + Task13.User.key + ").", "records" );
															R.fields["criminal"] = setcriminal;
															this.sec_hud_set_security_status();
														}
													}
												}
											}
											return null;
										}

										if ( Lang13.Bool( href_list["view"] ) ) {
											
											if ( R != null ) {
												
												if ( !Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
													return null;
												} else if ( !( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Security ) ) {
													return null;
												}
												Task13.User.WriteMsg( "<b>Name:</b> " + R.fields["name"] + "	<b>Criminal Status:</b> " + R.fields["criminal"] );
												Task13.User.WriteMsg( "<b>Minor Crimes:</b>" );

												foreach (dynamic _c in Lang13.Enumerate( R.fields["mi_crim"], typeof(Data_Crime) )) {
													c = _c;
													
													Task13.User.WriteMsg( "<b>Crime:</b> " + c.crimeName );
													Task13.User.WriteMsg( "<b>Details:</b> " + c.crimeDetails );
													Task13.User.WriteMsg( "Added by " + c.author + " at " + c.time );
													Task13.User.WriteMsg( "----------" );
												}
												Task13.User.WriteMsg( "<b>Major Crimes:</b>" );

												foreach (dynamic _d in Lang13.Enumerate( R.fields["ma_crim"], typeof(Data_Crime) )) {
													c2 = _d;
													
													Task13.User.WriteMsg( "<b>Crime:</b> " + c2.crimeName );
													Task13.User.WriteMsg( "<b>Details:</b> " + c2.crimeDetails );
													Task13.User.WriteMsg( "Added by " + c2.author + " at " + c2.time );
													Task13.User.WriteMsg( "----------" );
												}
												Task13.User.WriteMsg( "<b>Notes:</b> " + R.fields["notes"] );
											}
											return null;
										}

										if ( Lang13.Bool( href_list["add_crime"] ) ) {
											
											switch ((string)( Interface13.Alert( "What crime would you like to add?", "Security HUD", "Minor Crime", "Major Crime", "Cancel" ) )) {
												case "Minor Crime":
													
													if ( R != null ) {
														t1 = GlobalFuncs.stripped_input( "Please input minor crime names:", "Security HUD", "", null );
														t2 = GlobalFuncs.stripped_multiline_input( "Please input minor crime details:", "Security HUD", "", null );

														if ( R != null ) {
															
															if ( !Lang13.Bool( t1 ) || !Lang13.Bool( t2 ) || !Lang13.Bool( allowed_access ) ) {
																return null;
															} else if ( !Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
																return null;
															} else if ( !( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Security ) ) {
																return null;
															}
															crime = GlobalVars.data_core.createCrimeEntry( t1, t2, allowed_access, GlobalFuncs.worldtime2text() );
															GlobalVars.data_core.addMinorCrime( R.fields["id"], crime );
															Task13.User.WriteMsg( "<span class='notice'>Successfully added a minor crime.</span>" );
															return null;
														}
													}
													break;
												case "Major Crime":
													
													if ( R != null ) {
														t12 = GlobalFuncs.stripped_input( "Please input major crime names:", "Security HUD", "", null );
														t22 = GlobalFuncs.stripped_multiline_input( "Please input major crime details:", "Security HUD", "", null );

														if ( R != null ) {
															
															if ( !Lang13.Bool( t12 ) || !Lang13.Bool( t22 ) || !Lang13.Bool( allowed_access ) ) {
																return null;
															} else if ( !Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
																return null;
															} else if ( !( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Security ) ) {
																return null;
															}
															crime2 = GlobalVars.data_core.createCrimeEntry( t12, t22, allowed_access, GlobalFuncs.worldtime2text() );
															GlobalVars.data_core.addMajorCrime( R.fields["id"], crime2 );
															Task13.User.WriteMsg( "<span class='notice'>Successfully added a major crime.</span>" );
														}
													}
													break;
											}
											return null;
										}

										if ( Lang13.Bool( href_list["view_comment"] ) ) {
											
											if ( R != null ) {
												
												if ( !Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
													return null;
												} else if ( !( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Security ) ) {
													return null;
												}
												Task13.User.WriteMsg( "<b>Comments/Log:</b>" );
												counter = 1;

												while (Lang13.Bool( R.fields["com_" + counter] )) {
													Task13.User.WriteMsg( R.fields["com_" + counter] );
													Task13.User.WriteMsg( "----------" );
													counter++;
												}
												return null;
											}
										}

										if ( Lang13.Bool( href_list["add_comment"] ) ) {
											
											if ( R != null ) {
												t13 = GlobalFuncs.stripped_multiline_input( "Add Comment:", "Secure. records", null, null );

												if ( R != null ) {
													
													if ( !Lang13.Bool( t13 ) || !Lang13.Bool( allowed_access ) ) {
														return null;
													} else if ( !Lang13.Bool( ((dynamic)H).canUseHUD() ) ) {
														return null;
													} else if ( !( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Hud_Security ) ) {
														return null;
													}
													counter2 = 1;

													while (Lang13.Bool( R.fields["com_" + counter2] )) {
														counter2++;
													}
													R.fields["com_" + counter2] = "Made by " + allowed_access + " on " + GlobalFuncs.worldtime2text() + " " + String13.FormatTime( Game13.realtime, "MMM DD" ) + ", " + ( GlobalVars.year_integer + 540 ) + "<BR>" + t13;
													Task13.User.WriteMsg( "<span class='notice'>Successfully added comment.</span>" );
													return null;
												}
											}
										}
									}
									Task13.User.WriteMsg( "<span class='warning'>Unable to locate a data core entry for this person.</span>" );
								}
							}
						}
					}
				}
			}
			return null;
		}

		// Function from file: human.dm
		public override dynamic electrocute_act( dynamic shock_damage = null, dynamic source = null, double? siemens_coeff = null, bool? safety = null, bool? _override = null, bool? tesla_shock = null ) {
			siemens_coeff = siemens_coeff ?? 1;
			safety = safety ?? false;
			_override = _override ?? false;
			tesla_shock = tesla_shock ?? false;

			dynamic _default = null;

			double total_coeff = 0;
			dynamic G = null;
			dynamic S = null;
			double gloves_siemens_coeff = 0;
			bool species_siemens_coeff = false;
			dynamic G2 = null;

			
			if ( tesla_shock == true ) {
				total_coeff = 1;

				if ( Lang13.Bool( this.gloves ) ) {
					G = this.gloves;

					if ( G.siemens_coefficient <= 0 ) {
						total_coeff -= 0.5;
					}
				}

				if ( Lang13.Bool( this.wear_suit ) ) {
					S = this.wear_suit;

					if ( S.siemens_coefficient <= 0 ) {
						total_coeff -= 0.41;
					}
				}
				siemens_coeff = total_coeff;
			} else if ( !( safety == true ) ) {
				gloves_siemens_coeff = 1;
				species_siemens_coeff = true;

				if ( Lang13.Bool( this.gloves ) ) {
					G2 = this.gloves;
					gloves_siemens_coeff = G2.siemens_coefficient;
				}

				if ( this.dna != null && Lang13.Bool( this.dna.species ) ) {
					species_siemens_coeff = this.dna.species.siemens_coeff;
				}
				siemens_coeff = gloves_siemens_coeff * ( species_siemens_coeff ?1:0);
			}

			if ( this.heart_attack ) {
				
				if ( Convert.ToDouble( shock_damage * siemens_coeff ) >= 1 && Rand13.PercentChance( 25 ) ) {
					this.heart_attack = false;

					if ( this.stat == 0 ) {
						this.WriteMsg( "<span class='notice'>You feel your heart beating again!</span>" );
					}
				}
			}
			_default = base.electrocute_act( (object)(shock_damage), (object)(source), siemens_coeff, safety, _override, tesla_shock );

			if ( Lang13.Bool( _default ) ) {
				this.electrocution_animation( 40 );
			}
			return _default;
		}

		// Function from file: human.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic MB = null;

			MB = O;

			if ( MB is Mob_Living_SimpleAnimal_Bot_Mulebot ) {
				((Mob_Living_SimpleAnimal_Bot_Mulebot)MB).RunOver( this );
			}
			this.spreadFire( O );
			return null;
		}

		// Function from file: human.dm
		public override void show_inv( Obj user = null ) {
			bool has_breathable_mask = false;
			ByTable obscured = null;
			string dat = null;
			Browser popup = null;

			((dynamic)user).set_machine( this );
			has_breathable_mask = this.wear_mask is Obj_Item_Clothing_Mask;
			obscured = this.check_obscured_slots();
			dat = new Txt( "<table>\n	<tr><td><B>Left Hand:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 4 ).str( "'>" ).item( ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.flags & 128 ) ? this.l_hand : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>\n	<tr><td><B>Right Hand:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 5 ).str( "'>" ).item( ( Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.flags & 128 ) ? this.r_hand : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>\n	<tr><td>&nbsp;</td></tr>" ).ToString();
			dat += new Txt( "<tr><td><B>Back:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 1 ).str( "'>" ).item( ( Lang13.Bool( this.back ) && !Lang13.Bool( this.back.flags & 128 ) ? this.back : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

			if ( has_breathable_mask && this.back is Obj_Item_Weapon_Tank ) {
				dat += new Txt( "&nbsp;<A href='?src=" ).Ref( this ).str( ";internal=" ).item( 1 ).str( "'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
			}
			dat += "</td></tr><tr><td>&nbsp;</td></tr>";
			dat += new Txt( "<tr><td><B>Head:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 11 ).str( "'>" ).item( ( Lang13.Bool( this.head ) && !Lang13.Bool( this.head.flags & 128 ) ? this.head : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();

			if ( obscured.Contains( 2 ) ) {
				dat += "<tr><td><font color=grey><B>Mask:</B></font></td><td><font color=grey>Obscured</font></td></tr>";
			} else {
				dat += new Txt( "<tr><td><B>Mask:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 2 ).str( "'>" ).item( ( Lang13.Bool( this.wear_mask ) && !Lang13.Bool( this.wear_mask.flags & 128 ) ? this.wear_mask : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();
			}

			if ( obscured.Contains( 9 ) ) {
				dat += "<tr><td><font color=grey><B>Eyes:</B></font></td><td><font color=grey>Obscured</font></td></tr>";
			} else {
				dat += new Txt( "<tr><td><B>Eyes:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 9 ).str( "'>" ).item( ( Lang13.Bool( this.glasses ) && !Lang13.Bool( this.glasses.flags & 128 ) ? this.glasses : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();
			}

			if ( obscured.Contains( 8 ) ) {
				dat += "<tr><td><font color=grey><B>Ears:</B></font></td><td><font color=grey>Obscured</font></td></tr>";
			} else {
				dat += new Txt( "<tr><td><B>Ears:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 8 ).str( "'>" ).item( ( Lang13.Bool( this.ears ) && !Lang13.Bool( this.ears.flags & 128 ) ? this.ears : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();
			}
			dat += "<tr><td>&nbsp;</td></tr>";
			dat += new Txt( "<tr><td><B>Exosuit:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 13 ).str( "'>" ).item( ( Lang13.Bool( this.wear_suit ) && !Lang13.Bool( this.wear_suit.flags & 128 ) ? this.wear_suit : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();

			if ( Lang13.Bool( this.wear_suit ) ) {
				dat += new Txt( "<tr><td>&nbsp;&#8627;<B>Suit Storage:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 17 ).str( "'>" ).item( ( Lang13.Bool( this.s_store ) && !Lang13.Bool( this.s_store.flags & 128 ) ? this.s_store : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

				if ( has_breathable_mask && this.s_store is Obj_Item_Weapon_Tank ) {
					dat += new Txt( "&nbsp;<A href='?src=" ).Ref( this ).str( ";internal=" ).item( 17 ).str( "'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
				}
				dat += "</td></tr>";
			} else {
				dat += "<tr><td><font color=grey>&nbsp;&#8627;<B>Suit Storage:</B></font></td></tr>";
			}

			if ( obscured.Contains( 12 ) ) {
				dat += "<tr><td><font color=grey><B>Shoes:</B></font></td><td><font color=grey>Obscured</font></td></tr>";
			} else {
				dat += new Txt( "<tr><td><B>Shoes:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 12 ).str( "'>" ).item( ( Lang13.Bool( this.shoes ) && !Lang13.Bool( this.shoes.flags & 128 ) ? this.shoes : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();
			}

			if ( obscured.Contains( 10 ) ) {
				dat += "<tr><td><font color=grey><B>Gloves:</B></font></td><td><font color=grey>Obscured</font></td></tr>";
			} else {
				dat += new Txt( "<tr><td><B>Gloves:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 10 ).str( "'>" ).item( ( Lang13.Bool( this.gloves ) && !Lang13.Bool( this.gloves.flags & 128 ) ? this.gloves : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();
			}

			if ( obscured.Contains( 14 ) ) {
				dat += "<tr><td><font color=grey><B>Uniform:</B></font></td><td><font color=grey>Obscured</font></td></tr>";
			} else {
				dat += new Txt( "<tr><td><B>Uniform:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 14 ).str( "'>" ).item( ( Lang13.Bool( this.w_uniform ) && !Lang13.Bool( this.w_uniform.flags & 128 ) ? this.w_uniform : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();
			}

			if ( this.w_uniform == null && !( this.dna != null && Lang13.Bool( this.dna.species.nojumpsuit ) ) || obscured.Contains( 14 ) ) {
				dat += "<tr><td><font color=grey>&nbsp;&#8627;<B>Pockets:</B></font></td></tr>";
				dat += "<tr><td><font color=grey>&nbsp;&#8627;<B>ID:</B></font></td></tr>";
				dat += "<tr><td><font color=grey>&nbsp;&#8627;<B>Belt:</B></font></td></tr>";
			} else {
				dat += new Txt( "<tr><td>&nbsp;&#8627;<B>Belt:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 6 ).str( "'>" ).item( ( Lang13.Bool( this.belt ) && !Lang13.Bool( this.belt.flags & 128 ) ? this.belt : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A>" ).ToString();

				if ( has_breathable_mask && this.belt is Obj_Item_Weapon_Tank ) {
					dat += new Txt( "&nbsp;<A href='?src=" ).Ref( this ).str( ";internal=" ).item( 6 ).str( "'>" ).item( ( Lang13.Bool( this.v_internal ) ? "Disable Internals" : "Set Internals" ) ).str( "</A>" ).ToString();
				}
				dat += "</td></tr>";
				dat += new Txt( "<tr><td>&nbsp;&#8627;<B>Pockets:</B></td><td><A href='?src=" ).Ref( this ).str( ";pockets=left'>" ).item( ( Lang13.Bool( this.l_store ) && !Lang13.Bool( this.l_store.flags & 128 ) ? "Left (Full)" : "<font color=grey>Left (Empty)</font>" ) ).str( "</A>" ).ToString();
				dat += new Txt( "&nbsp;<A href='?src=" ).Ref( this ).str( ";pockets=right'>" ).item( ( Lang13.Bool( this.r_store ) && !Lang13.Bool( this.r_store.flags & 128 ) ? "Right (Full)" : "<font color=grey>Right (Empty)</font>" ) ).str( "</A></td></tr>" ).ToString();
				dat += new Txt( "<tr><td>&nbsp;&#8627;<B>ID:</B></td><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 7 ).str( "'>" ).item( ( Lang13.Bool( this.wear_id ) && !Lang13.Bool( this.wear_id.flags & 128 ) ? this.wear_id : ((dynamic)( "<font color=grey>Empty</font>" )) ) ).str( "</A></td></tr>" ).ToString();
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				dat += new Txt( "<tr><td><B>Handcuffed:</B> <A href='?src=" ).Ref( this ).str( ";item=" ).item( 3 ).str( "'>Remove</A></td></tr>" ).ToString();
			}

			if ( Lang13.Bool( this.legcuffed ) ) {
				dat += new Txt( "<tr><td><A href='?src=" ).Ref( this ).str( ";item=" ).item( 19 ).str( "'>Legcuffed</A></td></tr>" ).ToString();
			}
			dat += new Txt( "</table>\n	<A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).Ref( this ).str( "'>Close</A>\n	" ).ToString();
			popup = new Browser( user, new Txt( "mob" ).Ref( this ).ToString(), "" + this, 440, 510 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: human.dm
		public override bool blob_act( dynamic severity = null ) {
			string dam_zone = null;
			dynamic affecting = null;

			
			if ( this.stat == 2 ) {
				return false;
			}
			this.show_message( "<span class='userdanger'>The blob attacks you!</span>" );
			dam_zone = Rand13.Pick(new object [] { "chest", "l_hand", "r_hand", "l_leg", "r_leg" });
			affecting = this.get_organ( GlobalFuncs.ran_zone( dam_zone ) );
			this.apply_damage( 5, "brute", affecting, this.run_armor_check( affecting, "melee" ) );
			return false;
		}

		// Function from file: human.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			dynamic b_loss = null;
			dynamic f_loss = null;
			dynamic target2 = null;

			b_loss = null;
			f_loss = null;

			switch ((int?)( severity )) {
				case 1:
					b_loss += 500;

					if ( Rand13.PercentChance( ((int)( this.getarmor( null, "bomb" ) )) ) ) {
						this.shred_clothing( true, 150 );
						target2 = GlobalFuncs.get_edge_target_turf( this, Map13.GetDistance( this, Map13.GetStepAway( this, this, null ) ) );
						this.throw_at( target2, 200, 4 );
					} else {
						this.gib();
						return false;
					}
					break;
				case 2:
					b_loss += 60;
					f_loss += 60;

					if ( Rand13.PercentChance( ((int)( this.getarmor( null, "bomb" ) )) ) ) {
						b_loss = b_loss / 1.5;
						f_loss = f_loss / 1.5;
						this.shred_clothing( true, 25 );
					} else {
						this.shred_clothing( true, 50 );
					}

					if ( !( this.ears is Obj_Item_Clothing_Ears_Earmuffs ) ) {
						this.adjustEarDamage( 30, 120 );
					}

					if ( Rand13.PercentChance( 70 ) ) {
						this.Paralyse( 10 );
					}
					break;
				case 3:
					b_loss += 30;

					if ( Rand13.PercentChance( ((int)( this.getarmor( null, "bomb" ) )) ) ) {
						b_loss = b_loss / 2;
					}

					if ( !( this.ears is Obj_Item_Clothing_Ears_Earmuffs ) ) {
						this.adjustEarDamage( 15, 60 );
					}

					if ( Rand13.PercentChance( 50 ) ) {
						this.Paralyse( 10 );
					}
					break;
			}
			this.take_overall_damage( b_loss, f_loss );
			base.ex_act( severity, (object)(target) );
			return false;
		}

		// Function from file: human.dm
		public override dynamic Stat(  ) {
			dynamic SN = null;
			Disease D = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				Interface13.Stat( null, "Intent: " + this.a_intent );
				Interface13.Stat( null, "Move Mode: " + this.m_intent );

				if ( Lang13.Bool( this.v_internal ) ) {
					
					if ( !Lang13.Bool( this.v_internal.air_contents ) ) {
						GlobalFuncs.qdel( this.v_internal );
					} else {
						Interface13.Stat( "Internal Atmosphere Info", this.v_internal.name );
						Interface13.Stat( "Tank Pressure", this.v_internal.air_contents.return_pressure() );
						Interface13.Stat( "Distribution Pressure", this.v_internal.distribute_pressure );
					}
				}

				if ( this.mind != null ) {
					
					if ( this.mind.changeling != null ) {
						Interface13.Stat( "Chemical Storage", "" + this.mind.changeling.chem_charges + "/" + this.mind.changeling.chem_storage );
						Interface13.Stat( "Absorbed DNA", this.mind.changeling.absorbedcount );
					}
				}
			}

			if ( this.wear_suit is Obj_Item_Clothing_Suit_Space_SpaceNinja ) {
				SN = this.wear_suit;

				if ( Interface13.IsStatPanelActive( "SpiderOS" ) ) {
					Interface13.Stat( "SpiderOS Status:", "" + ( SN.s_initialized ? "Initialized" : "Disabled" ) );
					Interface13.Stat( "Current Time:", "" + GlobalFuncs.worldtime2text() );

					if ( SN.s_initialized ) {
						Interface13.Stat( "Energy Charge:", "" + Num13.Floor( Convert.ToDouble( SN.cell.charge / 100 ) ) + "%" );
						Interface13.Stat( "Smoke Bombs:", new Txt( " " ).Roman( SN.s_bombs ).ToString() );
						Interface13.Stat( "Fingerprints:", "" + Num13.Md5( this.dna.uni_identity ) );
						Interface13.Stat( "Unique Identity:", "" + this.dna.unique_enzymes );
						Interface13.Stat( "Overall Status:", "" + ( this.stat > 1 ? "dead" : "" + this.health + "% healthy" ) );
						Interface13.Stat( "Nutrition Status:", "" + this.nutrition );
						Interface13.Stat( "Oxygen Loss:", "" + this.getOxyLoss() );
						Interface13.Stat( "Toxin Levels:", "" + this.getToxLoss() );
						Interface13.Stat( "Burn Severity:", "" + this.getFireLoss() );
						Interface13.Stat( "Brute Trauma:", "" + this.getBruteLoss() );
						Interface13.Stat( "Radiation Levels:", "" + this.radiation + " rad" );
						Interface13.Stat( "Body Temperature:", "" + ( this.bodytemperature - 273.41 ) + " degrees C (" + ( this.bodytemperature * 171 - 459.6700134277344 ) + " degrees F)" );

						if ( this.viruses.len != 0 ) {
							Interface13.Stat( "Viruses:", null );

							foreach (dynamic _a in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
								D = _a;
								
								Interface13.Stat( "*", "" + D.name + ", Type: " + D.spread_text + ", Stage: " + D.stage + "/" + D.max_stages + ", Possible Cure: " + D.cure_text );
							}
						}
					}
				}
			}
			return null;
		}

		// Function from file: human.dm
		public override dynamic Destroy(  ) {
			Ent_Dynamic organelle = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Ent_Dynamic) )) {
				organelle = _a;
				
				GlobalFuncs.qdel( organelle );
			}
			this.organs = new ByTable();
			return base.Destroy();
		}

		// Function from file: human.dm
		public override void prepare_data_huds(  ) {
			base.prepare_data_huds();
			this.sec_hud_set_ID();
			this.sec_hud_set_implants();
			this.sec_hud_set_security_status();
			this.add_to_all_human_data_huds();
			return;
		}

		// Function from file: examine.dm
		public override double examine( dynamic user = null ) {
			ByTable obscured = null;
			bool skipface = false;
			string t_He = null;
			string t_his = null;
			string t_him = null;
			string t_has = null;
			string t_is = null;
			string msg = null;
			dynamic tie_msg = null;
			dynamic U = null;
			bool appears_dead = false;
			bool foundghost = false;
			Mob_Dead_Observer G = null;
			double temp = 0;
			Obj_Item_Organ_Limb L = null;
			Obj_Item I = null;
			dynamic H = null;
			dynamic CIH = null;
			dynamic perpname = null;
			Data_Record R = null;
			dynamic implant_detect = null;
			Obj_Item_Organ_Internal_Cyberimp CI = null;
			dynamic health = null;
			string criminal = null;

			obscured = this.check_obscured_slots();
			skipface = Lang13.Bool( this.wear_mask ) && ( ( this.wear_mask.flags_inv ??0) & 8 ) != 0 || Lang13.Bool( this.head ) && ( ( this.head.flags_inv ??0) & 8 ) != 0;
			t_He = "It";
			t_his = "its";
			t_him = "it";
			t_has = "has";
			t_is = "is";
			msg = "<span class='info'>*---------*\nThis is ";

			if ( obscured.Contains( 14 ) && skipface ) {
				t_He = "They";
				t_his = "their";
				t_him = "them";
				t_has = "have";
				t_is = "are";
			} else {
				
				switch ((string)( this.gender )) {
					case "male":
						t_He = "He";
						t_his = "his";
						t_him = "him";
						break;
					case "female":
						t_He = "She";
						t_his = "her";
						t_him = "her";
						break;
				}
			}
			msg += "<EM>" + this.name + "</EM>!\n";

			if ( Lang13.Bool( this.w_uniform ) && !obscured.Contains( 14 ) ) {
				tie_msg = null;

				if ( this.w_uniform is Obj_Item_Clothing_Under ) {
					U = this.w_uniform;

					if ( Lang13.Bool( U.hastie ) ) {
						tie_msg += new Txt( " with " ).icon( U.hastie ).str( " " ).a( U.hastie ).item().ToString();
					}
				}

				if ( this.w_uniform.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.w_uniform ).str( " " ).item( ( this.w_uniform.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.w_uniform.name ).item( tie_msg ).str( "!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.w_uniform ).str( " " ).a( this.w_uniform ).item().item( tie_msg ).str( ".\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.head ) ) {
				
				if ( this.head.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.head ).str( " " ).item( ( this.head.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.head.name ).str( " on " ).item( t_his ).str( " head!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.head ).str( " " ).a( this.head ).item().str( " on " ).item( t_his ).str( " head.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( this.wear_suit.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.wear_suit ).str( " " ).item( ( this.wear_suit.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.wear_suit.name ).str( "!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.wear_suit ).str( " " ).a( this.wear_suit ).item().str( ".\n" ).ToString();
				}

				if ( Lang13.Bool( this.s_store ) ) {
					
					if ( this.s_store.blood_DNA != null ) {
						msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " carrying " ).icon( this.s_store ).str( " " ).item( ( this.s_store.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.s_store.name ).str( " on " ).item( t_his ).str( " " ).item( this.wear_suit.name ).str( "!</span>\n" ).ToString();
					} else {
						msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " carrying " ).icon( this.s_store ).str( " " ).a( this.s_store ).item().str( " on " ).item( t_his ).str( " " ).item( this.wear_suit.name ).str( ".\n" ).ToString();
					}
				}
			}

			if ( Lang13.Bool( this.back ) ) {
				
				if ( this.back.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.back ).str( " " ).item( ( this.back.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.back ).str( " on " ).item( t_his ).str( " back.</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.back ).str( " " ).a( this.back ).item().str( " on " ).item( t_his ).str( " back.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.flags & 128 ) ) {
				
				if ( this.l_hand.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " holding " ).icon( this.l_hand ).str( " " ).item( ( this.l_hand.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.l_hand.name ).str( " in " ).item( t_his ).str( " left hand!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " holding " ).icon( this.l_hand ).str( " " ).a( this.l_hand ).item().str( " in " ).item( t_his ).str( " left hand.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.flags & 128 ) ) {
				
				if ( this.r_hand.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " holding " ).icon( this.r_hand ).str( " " ).item( ( this.r_hand.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.r_hand.name ).str( " in " ).item( t_his ).str( " right hand!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " holding " ).icon( this.r_hand ).str( " " ).a( this.r_hand ).item().str( " in " ).item( t_his ).str( " right hand.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.gloves ) && !obscured.Contains( 10 ) ) {
				
				if ( this.gloves.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.gloves ).str( " " ).item( ( this.gloves.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.gloves.name ).str( " on " ).item( t_his ).str( " hands!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.gloves ).str( " " ).a( this.gloves ).item().str( " on " ).item( t_his ).str( " hands.\n" ).ToString();
				}
			} else if ( this.blood_DNA != null ) {
				msg += "<span class='warning'>" + t_He + " " + t_has + " blood-stained hands!</span>\n";
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				
				if ( this.handcuffed is Obj_Item_Weapon_Restraints_Handcuffs_Cable ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " " ).icon( this.handcuffed ).str( " restrained with cable!</span>\n" ).ToString();
				} else {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " " ).icon( this.handcuffed ).str( " handcuffed!</span>\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.belt ) ) {
				
				if ( this.belt.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.belt ).str( " " ).item( ( this.belt.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.belt.name ).str( " about " ).item( t_his ).str( " waist!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.belt ).str( " " ).a( this.belt ).item().str( " about " ).item( t_his ).str( " waist.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.shoes ) && !obscured.Contains( 12 ) ) {
				
				if ( this.shoes.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.shoes ).str( " " ).item( ( this.shoes.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.shoes.name ).str( " on " ).item( t_his ).str( " feet!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.shoes ).str( " " ).a( this.shoes ).item().str( " on " ).item( t_his ).str( " feet.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.wear_mask ) && !obscured.Contains( 2 ) ) {
				
				if ( this.wear_mask.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.wear_mask ).str( " " ).item( ( this.wear_mask.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.wear_mask.name ).str( " on " ).item( t_his ).str( " face!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.wear_mask ).str( " " ).a( this.wear_mask ).item().str( " on " ).item( t_his ).str( " face.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.glasses ) && !obscured.Contains( 9 ) ) {
				
				if ( this.glasses.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.glasses ).str( " " ).item( ( this.glasses.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.glasses ).str( " covering " ).item( t_his ).str( " eyes!</span>\n" ).ToString();
				} else {
					msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.glasses ).str( " " ).a( this.glasses ).item().str( " covering " ).item( t_his ).str( " eyes.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.ears ) && !obscured.Contains( 8 ) ) {
				msg += new Txt().item( t_He ).str( " " ).item( t_has ).str( " " ).icon( this.ears ).str( " " ).a( this.ears ).item().str( " on " ).item( t_his ).str( " ears.\n" ).ToString();
			}

			if ( Lang13.Bool( this.wear_id ) ) {
				msg += new Txt().item( t_He ).str( " " ).item( t_is ).str( " wearing " ).icon( this.wear_id ).str( " " ).a( this.wear_id ).item().str( ".\n" ).ToString();
			}

			dynamic _b = this.jitteriness; // Was a switch-case, sorry for the mess.
			if ( 300<=_b&&_b<=Double.PositiveInfinity ) {
				msg += "<span class='warning'><B>" + t_He + " " + t_is + " convulsing violently!</B></span>\n";
			} else if ( 200<=_b&&_b<=300 ) {
				msg += "<span class='warning'>" + t_He + " " + t_is + " extremely jittery.</span>\n";
			} else if ( 100<=_b&&_b<=200 ) {
				msg += "<span class='warning'>" + t_He + " " + t_is + " twitching ever so slightly.</span>\n";
			}

			if ( this.gender_ambiguous ) {
				
				if ( this.gender == GlobalVars.MALE ) {
					msg += "" + t_He + " has a strange feminine quality to " + t_him + ".\n";
				} else {
					msg += "" + t_He + " has a strange masculine quality to " + t_him + ".\n";
				}
			}
			appears_dead = false;

			if ( this.stat == 2 || ( this.status_flags & 8192 ) != 0 ) {
				appears_dead = true;

				if ( Lang13.Bool( this.getorgan( typeof(Obj_Item_Organ_Internal_Brain) ) ) ) {
					
					if ( Lang13.Bool( this.suiciding ) ) {
						msg += "<span class='warning'>" + t_He + " appears to have commited suicide... there is no hope of recovery.</span>\n";
					}
					msg += "<span class='deadsay'>" + t_He + " " + t_is + " limp and unresponsive; there are no signs of life";

					if ( !Lang13.Bool( this.key ) ) {
						foundghost = false;

						if ( this.mind != null ) {
							
							foreach (dynamic _c in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Dead_Observer) )) {
								G = _c;
								

								if ( G.mind == this.mind ) {
									foundghost = true;

									if ( G.can_reenter_corpse == false ) {
										foundghost = false;
									}
									break;
								}
							}
						}

						if ( !foundghost ) {
							msg += " and " + t_his + " soul has departed";
						}
					}
					msg += "...</span>\n";
				} else {
					msg += "<span class='deadsay'>It appears that " + t_his + " brain is missing...</span>\n";
				}
			}
			temp = this.getBruteLoss();
			msg += "<span class='warning'>";

			if ( temp != 0 ) {
				
				if ( temp < 30 ) {
					msg += "" + t_He + " " + t_has + " minor bruising.\n";
				} else {
					msg += "<B>" + t_He + " " + t_has + " severe bruising!</B>\n";
				}
			}
			temp = this.getFireLoss();

			if ( temp != 0 ) {
				
				if ( temp < 30 ) {
					msg += "" + t_He + " " + t_has + " minor burns.\n";
				} else {
					msg += "<B>" + t_He + " " + t_has + " severe burns!</B>\n";
				}
			}
			temp = this.getCloneLoss();

			if ( temp != 0 ) {
				
				if ( temp < 30 ) {
					msg += "" + t_He + " " + t_has + " minor cellular damage.\n";
				} else {
					msg += "<B>" + t_He + " " + t_has + " severe cellular damage.</B>\n";
				}
			}

			foreach (dynamic _e in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				L = _e;
				

				foreach (dynamic _d in Lang13.Enumerate( L.embedded_objects, typeof(Obj_Item) )) {
					I = _d;
					
					msg += new Txt( "<B>" ).item( t_He ).str( " " ).item( t_has ).str( " " ).a( I ).item().str( " " ).icon( I ).str( " embedded in " ).item( t_his ).str( " " ).item( L.getDisplayName() ).str( "!</B>\n" ).ToString();
				}
			}

			if ( this.fire_stacks > 0 ) {
				msg += "" + t_He + " " + t_is + " covered in something flammable.\n";
			}

			if ( this.fire_stacks < 0 ) {
				msg += "" + t_He + " looks a little soaked.\n";
			}

			if ( this.nutrition < 100 ) {
				msg += "" + t_He + " " + t_is + " severely malnourished.\n";
			} else if ( this.nutrition >= 600 ) {
				
				if ( user.nutrition < 100 ) {
					msg += "" + t_He + " " + t_is + " plump and delicious looking - Like a fat little piggy. A tasty piggy.\n";
				} else {
					msg += "" + t_He + " " + t_is + " quite chubby.\n";
				}
			}

			if ( this.pale ) {
				msg += "" + t_He + " " + t_has + " pale skin.\n";
			}

			if ( this.bleedsuppress ) {
				msg += "" + t_He + " " + t_is + " bandaged with something.\n";
			}

			if ( this.blood_max != 0 ) {
				
				if ( Lang13.Bool( this.reagents.has_reagent( "heparin" ) ) ) {
					msg += "<b>" + t_He + " " + t_is + " bleeding uncontrollably!</b>\n";
				} else {
					msg += "<B>" + t_He + " " + t_is + " bleeding!</B>\n";
				}
			}

			if ( Lang13.Bool( this.reagents.has_reagent( "teslium" ) ) ) {
				msg += "" + t_He + " is emitting a gentle blue glow!\n";
			}
			msg += "</span>";

			if ( !appears_dead ) {
				
				if ( this.stat == 1 ) {
					msg += "" + t_He + " " + t_is + "n't responding to anything around " + t_him + " and seems to be asleep.\n";
				} else if ( this.getBrainLoss() >= 60 ) {
					msg += "" + t_He + " " + t_has + " a stupid expression on " + t_his + " face.\n";
				}

				if ( Lang13.Bool( this.getorgan( typeof(Obj_Item_Organ_Internal_Brain) ) ) ) {
					
					if ( this is Mob_Living_Carbon_Human_Interactive ) {
						msg += "<span class='deadsay'>" + t_He + " " + t_is + " appears to be some sort of sick automaton, " + t_his + " eyes are glazed over and " + t_his + " mouth is slightly agape.</span>\n";
					} else if ( !Lang13.Bool( this.key ) ) {
						msg += "<span class='deadsay'>" + t_He + " " + t_is + " totally catatonic. The stresses of life in deep-space must have been too much for " + t_him + ". Any recovery is unlikely.</span>\n";
					} else if ( !( this.client != null ) ) {
						msg += "" + t_He + " " + t_has + " a vacant, braindead stare...\n";
					}
				}

				if ( this.digitalcamo ) {
					msg += "" + t_He + " " + t_is + " moving " + t_his + " body in an unnatural and blatantly inhuman manner.\n";
				}
			}

			if ( !skipface && GlobalFuncs.is_thrall( this ) && Map13.GetDistance( user, this ) <= 1 ) {
				msg += "Their features seem unnaturally tight and drawn.\n";
			}

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;
				CIH = ((Mob)H).getorgan( typeof(Obj_Item_Organ_Internal_Cyberimp_Eyes_Hud) );

				if ( H.glasses is Obj_Item_Clothing_Glasses_Hud || Lang13.Bool( CIH ) ) {
					perpname = this.get_face_name( this.get_id_name( "" ) );

					if ( Lang13.Bool( perpname ) ) {
						R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.general );

						if ( R != null ) {
							msg += "<span class='deptradio'>Rank:</span> " + R.fields["rank"] + "<br>";
							msg += new Txt( "<a href='?src=" ).Ref( this ).str( ";hud=1;photo_front=1'>[Front photo]</a> " ).ToString();
							msg += new Txt( "<a href='?src=" ).Ref( this ).str( ";hud=1;photo_side=1'>[Side photo]</a><br>" ).ToString();
						}

						if ( H.glasses is Obj_Item_Clothing_Glasses_Hud_Health || CIH is Obj_Item_Organ_Internal_Cyberimp_Eyes_Hud_Medical ) {
							implant_detect = null;

							foreach (dynamic _f in Lang13.Enumerate( this.internal_organs, typeof(Obj_Item_Organ_Internal_Cyberimp) )) {
								CI = _f;
								

								if ( CI.status == 2 ) {
									implant_detect += "" + this.name + " is modified with a " + CI.name + ".<br>";
								}
							}

							if ( Lang13.Bool( implant_detect ) ) {
								msg += "Detected cybernetic modifications:<br>";
								msg += implant_detect;
							}

							if ( R != null ) {
								health = R.fields["p_stat"];
								msg += new Txt( "<a href='?src=" ).Ref( this ).str( ";hud=m;p_stat=1'>[" ).item( health ).str( "]</a>" ).ToString();
								health = R.fields["m_stat"];
								msg += new Txt( "<a href='?src=" ).Ref( this ).str( ";hud=m;m_stat=1'>[" ).item( health ).str( "]</a><br>" ).ToString();
							}
							R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.medical );

							if ( R != null ) {
								msg += new Txt( "<a href='?src=" ).Ref( this ).str( ";hud=m;evaluation=1'>[Medical evaluation]</a><br>" ).ToString();
							}
						}

						if ( H.glasses is Obj_Item_Clothing_Glasses_Hud_Security || CIH is Obj_Item_Organ_Internal_Cyberimp_Eyes_Hud_Security ) {
							
							if ( !Lang13.Bool( user.stat ) && user != this ) {
								criminal = "None";
								R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.security );

								if ( R != null ) {
									criminal = R.fields["criminal"];
								}
								msg += new Txt( "<span class='deptradio'>Criminal status:</span> <a href='?src=" ).Ref( this ).str( ";hud=s;status=1'>[" ).item( criminal ).str( "]</a>\n" ).ToString();
								msg += new Txt( "<span class='deptradio'>Security record:</span> <a href='?src=" ).Ref( this ).str( ";hud=s;view=1'>[View]</a> " ).ToString();
								msg += new Txt( "<a href='?src=" ).Ref( this ).str( ";hud=s;add_crime=1'>[Add crime]</a> " ).ToString();
								msg += new Txt( "<a href='?src=" ).Ref( this ).str( ";hud=s;view_comment=1'>[View comment log]</a> " ).ToString();
								msg += new Txt( "<a href='?src=" ).Ref( this ).str( ";hud=s;add_comment=1'>[Add comment]</a>\n" ).ToString();
							}
						}
					}
				}
			}
			msg += "*---------*</span>";
			user.WriteMsg( msg );
			return 0;
		}

		// Function from file: emote.dm
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			string param = null;
			int t1 = 0;
			bool muzzled = false;
			Obj_Item_Weapon_Implant I = null;
			bool miming = false;
			string input = null;
			dynamic input2 = null;
			dynamic M = null;
			dynamic A = null;
			dynamic M2 = null;
			dynamic A2 = null;
			dynamic M3 = null;
			dynamic A3 = null;
			dynamic M4 = null;
			dynamic A4 = null;
			int t12 = 0;
			dynamic M5 = null;

			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}
			muzzled = this.is_muzzled();

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Implant) )) {
				I = _a;
				

				if ( Lang13.Bool( I.implanted ) ) {
					I.trigger( act, this );
				}
			}
			miming = false;

			if ( this.mind != null ) {
				miming = this.mind.miming;
			}

			if ( this.stat == 2 && act != "deathgasp" ) {
				return;
			}

			switch ((string)( act )) {
				case "aflap":
					
					if ( !this.restrained() ) {
						message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " wings ANGRILY!" ).ToString();
						m_type = 2;
					}
					break;
				case "choke":
				case "chokes":
					
					if ( miming ) {
						message = new Txt( "<B>" ).item( this ).str( "</B> clutches " ).his_her_its_their().str( " throat desperately!" ).ToString();
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "chuckle":
				case "chuckles":
					
					if ( miming ) {
						message = "<B>" + this + "</B> appears to chuckle.";
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "clap":
				case "claps":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> claps.";
						m_type = 2;
					}
					break;
				case "collapse":
				case "collapses":
					this.Paralyse( 2 );
					this.adjustStaminaLoss( 100 );
					message = "<B>" + this + "</B> collapses!";
					m_type = 2;
					break;
				case "cough":
				case "coughs":
					
					if ( miming ) {
						message = "<B>" + this + "</B> appears to cough!";
					} else if ( !muzzled ) {
						message = "<B>" + this + "</B> coughs!";
						m_type = 2;
					} else {
						message = "<B>" + this + "</B> makes a strong noise.";
						m_type = 2;
					}
					break;
				case "cry":
				case "crys":
				case "cries":
					
					if ( miming ) {
						message = "<B>" + this + "</B> cries.";
					} else if ( !muzzled ) {
						message = "<B>" + this + "</B> cries.";
						m_type = 2;
					} else {
						message = new Txt( "<B>" ).item( this ).str( "</B> makes a weak noise. " ).He_She_It_They().str( " frowns." ).ToString();
						m_type = 2;
					}
					break;
				case "custom":
					
					if ( GlobalFuncs.jobban_isbanned( this, "emote" ) ) {
						this.WriteMsg( "You cannot send custom emotes (banned)" );
						return;
					}

					if ( this.client != null ) {
						
						if ( ( this.client.prefs.muted & 1 ) != 0 ) {
							this.WriteMsg( "You cannot send IC messages (muted)." );
							return;
						}
					}
					input = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Choose an emote to display.", null, null, null, null, InputType.Str | InputType.Null ) ), 1, 1024 );

					if ( !Lang13.Bool( input ) ) {
						return;
					}

					if ( String13.SubStr( input, 1, 5 ) == "says" ) {
						this.WriteMsg( "<span class='danger'>Invalid emote.</span>" );
						return;
					} else if ( String13.SubStr( input, 1, 9 ) == "exclaims" ) {
						this.WriteMsg( "<span class='danger'>Invalid emote.</span>" );
						return;
					} else if ( String13.SubStr( input, 1, 6 ) == "yells" ) {
						this.WriteMsg( "<span class='danger'>Invalid emote.</span>" );
						return;
					} else if ( String13.SubStr( input, 1, 5 ) == "asks" ) {
						this.WriteMsg( "<span class='danger'>Invalid emote.</span>" );
						return;
					} else {
						input2 = Interface13.Input( "Is this a visible or hearable emote?", null, null, null, new ByTable(new object [] { "Visible", "Hearable" }), InputType.Any );

						if ( input2 == "Visible" ) {
							m_type = 1;
						} else if ( input2 == "Hearable" ) {
							
							if ( miming ) {
								return;
							}
							m_type = 2;
						} else {
							Interface13.Alert( "Unable to use this emote, must be either hearable or visible." );
							return;
						}
						message = "<B>" + this + "</B> " + input;
					}
					break;
				case "dap":
				case "daps":
					m_type = 1;

					if ( !this.restrained() ) {
						M = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
								A = _b;
								

								if ( param == A.name ) {
									M = A;
									break;
								}
							}
						}

						if ( Lang13.Bool( M ) ) {
							message = "<B>" + this + "</B> gives daps to " + M + ".";
						} else {
							message = new Txt( "<B>" ).item( this ).str( "</B> sadly can't find anybody to give daps to, and daps " ).himself_herself_itself_themself().str( ". Shameful." ).ToString();
						}
					}
					break;
				case "eyebrow":
					message = "<B>" + this + "</B> raises an eyebrow.";
					m_type = 1;
					break;
				case "flap":
				case "flaps":
					
					if ( !this.restrained() ) {
						message = new Txt( "<B>" ).item( this ).str( "</B> flaps " ).his_her_its_their().str( " wings." ).ToString();
						m_type = 2;
					}
					break;
				case "gasp":
				case "gasps":
					
					if ( miming ) {
						message = "<B>" + this + "</B> appears to be gasping!";
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "giggle":
				case "giggles":
					
					if ( miming ) {
						message = "<B>" + this + "</B> giggles silently!";
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "groan":
				case "groans":
					
					if ( miming ) {
						message = "<B>" + this + "</B> appears to groan!";
					} else if ( !muzzled ) {
						message = "<B>" + this + "</B> groans!";
						m_type = 2;
					} else {
						message = "<B>" + this + "</B> makes a loud noise.";
						m_type = 2;
					}
					break;
				case "grumble":
				case "grumbles":
					
					if ( !muzzled ) {
						message = "<B>" + this + "</B> grumbles!";
					} else {
						message = "<B>" + this + "</B> makes a noise.";
						m_type = 2;
					}
					break;
				case "handshake":
					m_type = 1;

					if ( !this.restrained() && !Lang13.Bool( this.r_hand ) ) {
						M2 = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
								A2 = _c;
								

								if ( param == A2.name ) {
									M2 = A2;
									break;
								}
							}
						}

						if ( M2 == this ) {
							M2 = null;
						}

						if ( Lang13.Bool( M2 ) ) {
							
							if ( Lang13.Bool( M2.canmove ) && !Lang13.Bool( M2.r_hand ) && !((Mob)M2).restrained() ) {
								message = "<B>" + this + "</B> shakes hands with " + M2 + ".";
							} else {
								message = new Txt( "<B>" ).item( this ).str( "</B> holds out " ).his_her_its_their().str( " hand to " ).item( M2 ).str( "." ).ToString();
							}
						}
					}
					break;
				case "hug":
				case "hugs":
					m_type = 1;

					if ( !this.restrained() ) {
						M3 = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
								A3 = _d;
								

								if ( param == A3.name ) {
									M3 = A3;
									break;
								}
							}
						}

						if ( M3 == this ) {
							M3 = null;
						}

						if ( Lang13.Bool( M3 ) ) {
							message = "<B>" + this + "</B> hugs " + M3 + ".";
						} else {
							message = new Txt( "<B>" ).item( this ).str( "</B> hugs " ).himself_herself_itself_themself().str( "." ).ToString();
						}
					}
					break;
				case "me":
					
					if ( this.silent != 0 ) {
						return;
					}

					if ( GlobalFuncs.jobban_isbanned( this, "emote" ) ) {
						this.WriteMsg( "You cannot send custom emotes (banned)" );
						return;
					}

					if ( this.client != null ) {
						
						if ( ( this.client.prefs.muted & 1 ) != 0 ) {
							this.WriteMsg( "<span class='danger'>You cannot send IC messages (muted).</span>" );
							return;
						}

						if ( this.client.handle_spam_prevention( message, 1 ) ) {
							return;
						}
					}

					if ( this.stat != 0 ) {
						return;
					}

					if ( !Lang13.Bool( message ) ) {
						return;
					}

					if ( String13.SubStr( message, 1, 5 ) == "says" ) {
						this.WriteMsg( "<span class='danger'>Invalid emote.</span>" );
						return;
					} else if ( String13.SubStr( message, 1, 9 ) == "exclaims" ) {
						this.WriteMsg( "<span class='danger'>Invalid emote.</span>" );
						return;
					} else if ( String13.SubStr( message, 1, 6 ) == "yells" ) {
						this.WriteMsg( "<span class='danger'>Invalid emote.</span>" );
						return;
					} else if ( String13.SubStr( message, 1, 5 ) == "asks" ) {
						this.WriteMsg( "<span class='danger'>Invalid emote.</span>" );
						return;
					} else {
						message = "<B>" + this + "</B> " + message;
					}
					break;
				case "moan":
				case "moans":
					
					if ( miming ) {
						message = "<B>" + this + "</B> appears to moan!";
					} else {
						message = "<B>" + this + "</B> moans!";
						m_type = 2;
					}
					break;
				case "mumble":
				case "mumbles":
					message = "<B>" + this + "</B> mumbles!";
					m_type = 2;
					break;
				case "pale":
					message = "<B>" + this + "</B> goes pale for a second.";
					m_type = 1;
					break;
				case "raise":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> raises a hand.";
					}
					m_type = 1;
					break;
				case "salute":
				case "salutes":
					
					if ( !( this.buckled != null ) ) {
						M4 = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
								A4 = _e;
								

								if ( param == A4.name ) {
									M4 = A4;
									break;
								}
							}
						}

						if ( !Lang13.Bool( M4 ) ) {
							param = null;
						}

						if ( Lang13.Bool( param ) ) {
							message = "<B>" + this + "</B> salutes to " + param + ".";
						} else {
							message = "<B>" + this + "</b> salutes.";
						}
					}
					m_type = 1;
					break;
				case "scream":
				case "screams":
					
					if ( miming ) {
						message = "<B>" + this + "</B> acts out a scream!";
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "shiver":
				case "shivers":
					message = "<B>" + this + "</B> shivers.";
					m_type = 1;
					break;
				case "shrug":
				case "shrugs":
					message = "<B>" + this + "</B> shrugs.";
					m_type = 1;
					break;
				case "sigh":
				case "sighs":
					
					if ( miming ) {
						message = "<B>" + this + "</B> sighs.";
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "signal":
				case "signals":
					
					if ( !this.restrained() ) {
						t12 = Num13.Floor( String13.ParseNumber( param ) ??0 );

						if ( Lang13.Bool( Lang13.IsNumber( t12 ) ) ) {
							
							if ( t12 <= 5 && ( !Lang13.Bool( this.r_hand ) || !Lang13.Bool( this.l_hand ) ) ) {
								message = new Txt( "<B>" ).item( this ).str( "</B> raises " ).item( t12 ).str( " finger" ).s().str( "." ).ToString();
							} else if ( t12 <= 10 && !Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.l_hand ) ) {
								message = new Txt( "<B>" ).item( this ).str( "</B> raises " ).item( t12 ).str( " finger" ).s().str( "." ).ToString();
							}
						}
					}
					m_type = 1;
					break;
				case "sneeze":
				case "sneezes":
					
					if ( miming ) {
						message = "<B>" + this + "</B> sneezes.";
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "sniff":
				case "sniffs":
					message = "<B>" + this + "</B> sniffs.";
					m_type = 2;
					break;
				case "snore":
				case "snores":
					
					if ( miming ) {
						message = "<B>" + this + "</B> sleeps soundly.";
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "whimper":
				case "whimpers":
					
					if ( miming ) {
						message = "<B>" + this + "</B> appears hurt.";
					} else {
						base.emote( act, m_type, (object)(message) );
					}
					break;
				case "yawn":
				case "yawns":
					
					if ( !muzzled ) {
						message = "<B>" + this + "</B> yawns.";
						m_type = 2;
					}
					break;
				case "wag":
				case "wags":
					
					if ( this.dna != null && Lang13.Bool( this.dna.species ) && ( this.dna.species.mutant_bodyparts.Contains( "tail_lizard" ) || this.dna.features["tail_human"] != "None" && !this.dna.species.mutant_bodyparts.Contains( "waggingtail_human" ) ) ) {
						message = new Txt( "<B>" ).item( this ).str( "</B> wags " ).his_her_its_their().str( " tail." ).ToString();
						this.startTailWag();
					} else if ( this.dna != null && Lang13.Bool( this.dna.species ) && ( this.dna.species.mutant_bodyparts.Contains( "waggingtail_lizard" ) || this.dna.species.mutant_bodyparts.Contains( "waggingtail_human" ) ) ) {
						this.endTailWag();
					} else {
						this.WriteMsg( "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
					}
					break;
				case "help":
					this.WriteMsg( "Help for human emotes. You can use these emotes with say \"*emote\":\n\naflap, airguitar, blink, blink_r, blush, bow-(none)/mob, burp, choke, chuckle, clap, collapse, cough, cry, custom, dance, dap, deathgasp, drool, eyebrow, faint, flap, frown, gasp, giggle, glare-(none)/mob, grin, groan, grumble, handshake, hug-(none)/mob, jump, laugh, look-(none)/mob, me, moan, mumble, nod, pale, point-(atom), raise, salute, scream, shake, shiver, shrug, sigh, signal-#1-10, sit, smile, sneeze, sniff, snore, stare-(none)/mob, sulk, sway, tremble, twitch, twitch_s, wave, whimper, wink, wag, yawn" );
					break;
				default:
					base.emote( act, m_type, (object)(message) );
					break;
			}

			if ( miming ) {
				m_type = 1;
			}

			if ( Lang13.Bool( message ) ) {
				GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message );

				foreach (dynamic _g in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
					M5 = _g;
					

					if ( !Lang13.Bool( M5.client ) || M5 is Mob_NewPlayer ) {
						continue;
					}

					if ( Convert.ToInt32( M5.stat ) == 2 && Lang13.Bool( M5.client ) && ( M5.client.prefs.chat_toggles & 8 ) != 0 && !Map13.FetchViewers( null, this ).Contains( M5 ) ) {
						M5.show_message( message );
					}
				}

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else if ( ( ( m_type ??0) & 2 ) != 0 ) {
					this.audible_message( message );
				}
			}
			return;
		}

		// Function from file: death.dm
		public override bool ChangeToHusk(  ) {
			bool _default = false;

			_default = base.ChangeToHusk();

			if ( _default ) {
				this.update_hair();
				this.update_body();
			}
			return _default;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			Ent_Static M = null;

			
			if ( this.stat == 2 ) {
				return false;
			}
			this.stat = 2;
			this.dizziness = 0;
			this.jitteriness = 0;
			this.heart_attack = false;

			if ( this.loc is Obj_Mecha ) {
				M = this.loc;

				if ( ((dynamic)M).occupant == this ) {
					((Obj_Mecha)M).go_out();
				}
			}

			if ( !( gibbed == true ) ) {
				this.emote( "deathgasp" );
			}
			((Species)this.dna.species).spec_death( gibbed, this );

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				GlobalFuncs.sql_report_death( this );
				((GameMode)GlobalVars.ticker.mode).check_win();
			}
			return base.death( gibbed, toast );
		}

		// Function from file: death.dm
		public override void spawn_dust(  ) {
			new Obj_Effect_Decal_Remains_Human( this.loc );
			return;
		}

		// Function from file: death.dm
		public override void spawn_gibs(  ) {
			GlobalFuncs.hgibs( this.loc, this.viruses, this.dna );
			return;
		}

		// Function from file: death.dm
		public override void dust( dynamic animation = null ) {
			animation = animation ?? 1;

			base.dust( (object)(animation) );
			return;
		}

		// Function from file: death.dm
		public override void dust_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			base.dust_animation( animate, "dust-h" );
			return;
		}

		// Function from file: death.dm
		public override void gib_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			base.gib_animation( animate, "gibbed-h" );
			return;
		}

		// Function from file: blood.dm
		public override void inject_blood( dynamic container = null, dynamic amount = null ) {
			dynamic injected = null;
			dynamic our = null;

			injected = this.get_blood( container.reagents );

			if ( this.dna.species.specflags.Contains( 1024 ) ) {
				this.reagents.add_reagent( "blood", amount, injected.data );
				this.reagents.update_total();
				return;
			}
			our = this.get_blood( this.vessel );

			if ( !Lang13.Bool( injected ) || !Lang13.Bool( our ) ) {
				return;
			}

			if ( GlobalFuncs.blood_incompatible( injected.data["blood_type"], our.data["blood_type"], injected.data["species"], our.data["species"] ) ) {
				this.reagents.add_reagent( "toxin", amount * 0.5 );
				((Reagent)our).on_merge( injected.data );
				this.reagents.update_total();
			} else {
				this.vessel.add_reagent( "blood", amount, injected.data );
				this.vessel.update_total();
			}
			base.inject_blood( (object)(container), (object)(amount) );
			return;
		}

		// Function from file: blood.dm
		public override dynamic take_blood( dynamic container = null, dynamic amount = null ) {
			dynamic _default = null;

			
			if ( this.dna.species.specflags.Contains( 1024 ) ) {
				return null;
			}

			if ( ( this.vessel.get_reagent_amount( "blood" ) ?1:0) < Convert.ToDouble( amount ) ) {
				return null;
			}
			_default = base.take_blood( (object)(container), (object)(amount) );
			this.vessel.remove_reagent( "blood", amount );
			return _default;
		}

		// Function from file: blood.dm
		public override void handle_blood(  ) {
			double? blood_volume = null;
			dynamic B = null;
			Reagent_Blood D = null;
			dynamic word = null;
			dynamic word2 = null;
			dynamic word3 = null;
			Obj_Item_Organ_Limb org = null;
			double brutedamage = 0;

			
			if ( this.dna.species.specflags.Contains( 1024 ) ) {
				this.blood_max = 0;
				return;
			}

			if ( this.stat != 2 && Convert.ToDouble( this.bodytemperature ) >= 225 ) {
				blood_volume = Num13.Floor( this.vessel.get_reagent_amount( "blood" ) ?1:0 );

				if ( ( blood_volume ??0) < GlobalVars.BLOOD_VOLUME_NORMAL ) {
					B = Lang13.FindIn( typeof(Reagent_Blood), this.vessel.reagent_list );

					if ( Lang13.Bool( B ) ) {
						
						if ( B.data["donor"] != this ) {
							
							foreach (dynamic _a in Lang13.Enumerate( this.vessel.reagent_list, typeof(Reagent_Blood) )) {
								D = _a;
								

								if ( D.data["donor"] == this ) {
									B = D;
									break;
								}
							}
						}
						B.volume += 0.1;

						if ( Lang13.Bool( this.reagents.has_reagent( "nutriment" ) ) ) {
							B.volume += 0.4;
							this.reagents.remove_reagent( "nutriment", 0.1 );
						}

						if ( Lang13.Bool( this.reagents.has_reagent( "iron" ) ) ) {
							B.volume += 0.4;
							this.reagents.remove_reagent( "iron", 0.1 );
						}
					}
				}

				dynamic _b = blood_volume; // Was a switch-case, sorry for the mess.
				if ( 501<=_b&&_b<=10000 ) {
					
					if ( this.pale ) {
						this.pale = false;
						this.update_body();
					}
				} else if ( 336<=_b&&_b<=501 ) {
					
					if ( !this.pale ) {
						this.pale = true;
						this.update_body();
						word = Rand13.Pick(new object [] { "dizzy", "woozy", "faint" });
						this.WriteMsg( "<span class='warning'>You feel " + word + ".</span>" );
					}
					this.adjustOxyLoss( ( GlobalVars.BLOOD_VOLUME_NORMAL - ( blood_volume ??0) ) / 100 );
				} else if ( 224<=_b&&_b<=336 ) {
					
					if ( !this.pale ) {
						this.pale = true;
						this.update_body();
					}
					this.adjustOxyLoss( ( GlobalVars.BLOOD_VOLUME_NORMAL - ( blood_volume ??0) ) / 50 );

					if ( Rand13.PercentChance( 5 ) ) {
						this.blur_eyes( 6 );
						word2 = Rand13.Pick(new object [] { "dizzy", "woozy", "faint" });
						this.WriteMsg( "<span class='warning'>You feel very " + word2 + ".</span>" );
					}
				} else if ( 122<=_b&&_b<=224 ) {
					this.oxyloss += 5;

					if ( Rand13.PercentChance( 15 ) ) {
						this.Paralyse( Rand13.Int( 1, 3 ) );
						word3 = Rand13.Pick(new object [] { "dizzy", "woozy", "faint" });
						this.WriteMsg( "<span class='warning'>You feel extremely " + word3 + ".</span>" );
					}
				} else if ( 0<=_b&&_b<=122 ) {
					this.death();
				}
				this.blood_max = 0;

				foreach (dynamic _c in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
					org = _c;
					
					brutedamage = org.brute_dam;
					GlobalFuncs.listclearnulls( org.embedded_objects );
					this.blood_max += org.embedded_objects.len * 0.5;

					if ( brutedamage > 30 ) {
						this.blood_max += 0.5;
					}

					if ( brutedamage > 50 ) {
						this.blood_max += 1;
					}

					if ( brutedamage > 70 ) {
						this.blood_max += 2;
					}
				}

				if ( this.bleedsuppress ) {
					this.blood_max = 0;
				}

				if ( Lang13.Bool( this.reagents.has_reagent( "heparin" ) ) && this.getBruteLoss() != 0 ) {
					this.blood_max += 3;
				}
				this.drip( this.blood_max );
			}
			return;
		}

		// Function from file: living.dm
		public override void update_stamina(  ) {
			dynamic total_health = null;

			
			if ( Lang13.Bool( this.staminaloss ) ) {
				total_health = this.health - this.staminaloss;

				if ( Convert.ToDouble( total_health ) <= ( GlobalVars.config.health_threshold_crit ??0) && !( this.stat != 0 ) ) {
					this.WriteMsg( "<span class='notice'>You're too exhausted to keep going...</span>" );
					this.Weaken( 5 );
					this.setStaminaLoss( this.health - 2 );
				}
			}
			this.update_health_hud();
			return;
		}

		// Function from file: transform_procs.dm
		public override dynamic Animalize(  ) {
			dynamic _default = null;

			dynamic mobtypes = null;
			dynamic mobpath = null;
			Obj_Item W = null;
			dynamic t = null;
			dynamic new_mob = null;

			mobtypes = Lang13.GetTypes( typeof(Mob_Living_SimpleAnimal) );
			mobpath = Interface13.Input( "Which type of mob should " + this + " turn into?", "Choose a type", null, null, mobtypes, InputType.Any );

			if ( !this.safe_animal( mobpath ) ) {
				Task13.User.WriteMsg( "<span class='danger'>Sorry but this mob type is currently unavailable.</span>" );
				return _default;
			}

			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.unEquip( W );
			}
			this.regenerate_icons();
			this.notransform = 1;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			new_mob = Lang13.Call( mobpath, this.loc );
			new_mob.key = this.key;
			new_mob.a_intent = "harm";
			new_mob.WriteMsg( "You suddenly feel more... animalistic." );
			_default = new_mob;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: transform_procs.dm
		public override Mob_Living_Silicon_Ai AIize(  ) {
			dynamic t = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.organs )) {
				t = _a;
				
				GlobalFuncs.qdel( t );
			}
			return base.AIize();
		}

		// Function from file: dna.dm
		public override void updateappearance( bool? icon_update = null, bool? mutcolor_update = null, bool? mutations_overlay_update = null ) {
			icon_update = icon_update ?? true;
			mutcolor_update = mutcolor_update ?? false;
			mutations_overlay_update = mutations_overlay_update ?? false;

			dynamic structure = null;

			base.updateappearance( icon_update, mutcolor_update, mutations_overlay_update );
			structure = this.dna.uni_identity;
			this.hair_color = GlobalFuncs.sanitize_hexcolor( GlobalFuncs.getblock( structure, 1 ) );
			this.facial_hair_color = GlobalFuncs.sanitize_hexcolor( GlobalFuncs.getblock( structure, 2 ) );
			this.skin_tone = GlobalVars.skin_tones[GlobalFuncs.deconstruct_block( GlobalFuncs.getblock( structure, 3 ), GlobalVars.skin_tones.len )];
			this.eye_color = GlobalFuncs.sanitize_hexcolor( GlobalFuncs.getblock( structure, 4 ) );
			this.facial_hair_style = GlobalVars.facial_hair_styles_list[GlobalFuncs.deconstruct_block( GlobalFuncs.getblock( structure, 6 ), GlobalVars.facial_hair_styles_list.len )];
			this.hair_style = GlobalVars.hair_styles_list[GlobalFuncs.deconstruct_block( GlobalFuncs.getblock( structure, 7 ), GlobalVars.hair_styles_list.len )];

			if ( icon_update == true ) {
				this.update_body();
				this.update_hair();

				if ( mutcolor_update == true ) {
					this.update_mutcolor();
				}

				if ( mutations_overlay_update == true ) {
					this.update_mutations_overlay();
				}
			}
			return;
		}

		// Function from file: dna.dm
		public override void set_species( dynamic mrace = null, bool? icon_update = null ) {
			icon_update = icon_update ?? true;

			base.set_species( (object)(mrace), icon_update );

			if ( icon_update == true ) {
				this.update_body();
				this.update_hair();
				this.update_mutcolor();
				this.update_mutations_overlay();
			}
			return;
		}

		// Function from file: atoms.dm
		public override bool add_blood( dynamic M = null ) {
			
			if ( !base.add_blood( (object)(M) ) ) {
				return false;
			}
			this.add_blood_list( M );
			this.bloody_hands = Rand13.Int( 2, 4 );
			this.bloody_hands_mob = M;
			this.update_inv_gloves();
			return true;
		}

		// Function from file: _MobProcs.dm
		public override bool CanContractDisease( dynamic D = null ) {
			
			if ( this.dna.species.specflags.Contains( this.dna != null && 4096 != 0 ) ) {
				return false;
			}
			return base.CanContractDisease( (object)(D) );
		}

		// Function from file: mutations.dm
		public override void update_mutations_overlay(  ) {
			Mutation_Human CM = null;
			ByTable mut_overlay = null;
			dynamic V = null;
			Image I = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.dna.mutations, typeof(Mutation_Human) )) {
				CM = _b;
				

				if ( CM.species_allowed.len != 0 && !( CM.species_allowed.Find( this.dna.species.id ) != 0 ) ) {
					CM.force_lose( this );
					continue;
				}

				if ( CM.visual_indicators.len != 0 ) {
					mut_overlay = new ByTable();

					if ( Lang13.Bool( this.overlays_standing[CM.layer_used] ) ) {
						mut_overlay = this.overlays_standing[CM.layer_used];
					}
					V = CM.get_visual_indicator( this );

					if ( !( mut_overlay.Find( V ) != 0 ) ) {
						this.remove_overlay( CM.layer_used );

						foreach (dynamic _a in Lang13.Enumerate( CM.visual_indicators, typeof(Image) )) {
							I = _a;
							
							mut_overlay.Remove( I );
						}
						mut_overlay.Or( V );
						this.overlays_standing[CM.layer_used] = mut_overlay;
						this.apply_overlay( CM.layer_used );
					}
				}
			}
			return;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();

			if ( !Lang13.Bool( this.mind.assigned_role ) ) {
				this.mind.assigned_role = "Assistant";
			}
			return;
		}

		// Function from file: organ_external.dm
		public bool has_embedded_objects(  ) {
			bool _default = false;

			Obj_Item_Organ_Limb L = null;
			Obj_Item I = null;

			_default = false;

			foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				L = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( L.embedded_objects, typeof(Obj_Item) )) {
					I = _a;
					
					return true;
				}
			}
			return _default;
		}

		// Function from file: organ_external.dm
		public void remove_all_embedded_objects(  ) {
			dynamic T = null;
			Obj_Item_Organ_Limb L = null;
			Obj_Item I = null;

			T = GlobalFuncs.get_turf( this );

			foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				L = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( L.embedded_objects, typeof(Obj_Item) )) {
					I = _a;
					
					L.embedded_objects.Remove( I );
					I.loc = T;
				}
			}
			this.clear_alert( "embeddedobject" );
			return;
		}

		// Function from file: ninja_event.dm
		public bool equip_space_ninja( bool? safety = null ) {
			safety = safety ?? false;

			Obj_Item_Device_Radio_Headset R = null;
			Obj_Item_Clothing_Suit_Space_SpaceNinja theSuit = null;
			Obj_Item_Weapon_Katana_Energy EK = null;
			Obj_Item_Weapon_Implant_Explosive E = null;

			
			if ( safety == true ) {
				GlobalFuncs.qdel( this.w_uniform );
				GlobalFuncs.qdel( this.wear_suit );
				GlobalFuncs.qdel( this.wear_mask );
				GlobalFuncs.qdel( this.head );
				GlobalFuncs.qdel( this.shoes );
				GlobalFuncs.qdel( this.gloves );
			}
			R = new Obj_Item_Device_Radio_Headset( this );
			theSuit = new Obj_Item_Clothing_Suit_Space_SpaceNinja( this );
			EK = new Obj_Item_Weapon_Katana_Energy( this );
			theSuit.energyKatana = EK;
			this.equip_to_slot_or_del( R, 8 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Black( this ), 14 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_SpaceNinja( this ), 12 );
			this.equip_to_slot_or_del( theSuit, 13 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Gloves_SpaceNinja( this ), 10 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_SpaceNinja( this ), 11 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Mask_Gas_Voice_SpaceNinja( this ), 2 );
			this.equip_to_slot_or_del( new Obj_Item_Clothing_Glasses_Night( this ), 9 );
			this.equip_to_slot_or_del( EK, 6 );
			this.equip_to_slot_or_del( new Obj_Item_Device_Flashlight( this ), 16 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_C4( this ), 15 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Tank_Internals_EmergencyOxygen( this ), 17 );
			this.equip_to_slot_or_del( new Obj_Item_Weapon_Tank_Jetpack_Carbondioxide( this ), 1 );
			E = new Obj_Item_Weapon_Implant_Explosive( this );
			E.implant( this );
			return true;
		}

		// Function from file: update_icons.dm
		public ByTable get_overlays_copy( ByTable unwantedLayers = null ) {
			ByTable _out = null;
			int? i = null;

			_out = new ByTable();
			i = null;
			i = 1;

			while (( i ??0) <= 27) {
				
				if ( Lang13.Bool( this.overlays_standing[i] ) ) {
					
					if ( unwantedLayers.Contains( i ) ) {
						
					} else {
						_out.Add( this.overlays_standing[i] );
					}
				}
				i++;
			}
			return _out;
		}

		// Function from file: update_icons.dm
		public void update_augments(  ) {
			ByTable standing = null;
			string g = null;

			this.remove_overlay( 22 );
			standing = new ByTable();
			g = ( this.gender == GlobalVars.FEMALE ? "f" : "m" );

			if ( Lang13.Bool( this.getlimb( typeof(Obj_Item_Organ_Limb_Robot_RArm) ) ) ) {
				standing.Add( new Image( "icons/mob/augments.dmi", null, "r_arm_s", -22 ) );
			}

			if ( Lang13.Bool( this.getlimb( typeof(Obj_Item_Organ_Limb_Robot_LArm) ) ) ) {
				standing.Add( new Image( "icons/mob/augments.dmi", null, "l_arm_s", -22 ) );
			}

			if ( Lang13.Bool( this.getlimb( typeof(Obj_Item_Organ_Limb_Robot_RLeg) ) ) ) {
				standing.Add( new Image( "icons/mob/augments.dmi", null, "r_leg_s", -22 ) );
			}

			if ( Lang13.Bool( this.getlimb( typeof(Obj_Item_Organ_Limb_Robot_LLeg) ) ) ) {
				standing.Add( new Image( "icons/mob/augments.dmi", null, "l_leg_s", -22 ) );
			}

			if ( Lang13.Bool( this.getlimb( typeof(Obj_Item_Organ_Limb_Robot_Chest) ) ) ) {
				standing.Add( new Image( "icons/mob/augments.dmi", null, "chest_" + g + "_s", -22 ) );
			}

			if ( Lang13.Bool( this.getlimb( typeof(Obj_Item_Organ_Limb_Robot_Head) ) ) ) {
				standing.Add( new Image( "icons/mob/augments.dmi", null, "head_s", -22 ) );
			}

			if ( standing.len != 0 ) {
				this.overlays_standing[22] = standing;
			}
			this.apply_overlay( 22 );
			return;
		}

		// Function from file: update_icons.dm
		public void update_body(  ) {
			this.remove_overlay( 24 );
			this.update_base_icon_state();
			((Species)this.dna.species).handle_body( this );
			return;
		}

		// Function from file: update_icons.dm
		public void update_mutant_bodyparts(  ) {
			((Species)this.dna.species).handle_mutant_bodyparts( this );
			return;
		}

		// Function from file: update_icons.dm
		public void update_mutcolor(  ) {
			
			if ( !Lang13.Bool( this.disabilities & 64 ) ) {
				((Species)this.dna.species).update_color( this );
			}
			return;
		}

		// Function from file: update_icons.dm
		public void update_base_icon_state(  ) {
			this.base_icon_state = this.dna.species.update_base_icon_state( this );
			this.icon_state = "" + this.base_icon_state + "_s";
			return;
		}

		// Function from file: say.dm
		public void forcesay( ByTable append = null ) {
			bool virgin = false;
			dynamic temp = null;
			string trimmed = null;

			
			if ( this.stat == 0 ) {
				
				if ( this.client != null ) {
					virgin = true;
					temp = Interface13.WindowGet( this.client, "input", "text" );

					if ( String13.Find( temp, "Say \"", 1, 7 ) != 0 && Lang13.Length( temp ) > 5 ) {
						temp = GlobalFuncs.replacetext( temp, ";", "" );

						if ( String13.FindIgnoreCase( GlobalFuncs.trim_left( temp ), ":", 6, 7 ) != 0 ) {
							temp = String13.SubStr( GlobalFuncs.trim_left( temp ), 8, 0 );
							virgin = false;
						}

						if ( virgin ) {
							temp = String13.SubStr( GlobalFuncs.trim_left( temp ), 6, 0 );
							virgin = false;
						}

						while (String13.FindIgnoreCase( GlobalFuncs.trim_left( temp ), ":", 1, 2 ) != 0) {
							temp = String13.SubStr( GlobalFuncs.trim_left( temp ), 3, 0 );
						}

						if ( String13.FindIgnoreCase( temp, "*", 1, 2 ) != 0 ) {
							return;
						}
						trimmed = GlobalFuncs.trim_left( temp );

						if ( Lang13.Length( trimmed ) != 0 ) {
							
							if ( append != null ) {
								temp += Rand13.PickFromTable( append );
							}
							this.say( temp );
						}
						Interface13.WindowSet( this.client, "input", "text=" + null );
					}
				}
			}
			return;
		}

		// Function from file: say.dm
		public dynamic GetSpecialVoice(  ) {
			return this.special_voice;
		}

		// Function from file: say.dm
		public void UnsetSpecialVoice(  ) {
			this.special_voice = "";
			return;
		}

		// Function from file: say.dm
		public void SetSpecialVoice( dynamic new_voice = null ) {
			
			if ( Lang13.Bool( new_voice ) ) {
				this.special_voice = new_voice;
			}
			return;
		}

		// Function from file: life.dm
		public void handle_heart(  ) {
			
			if ( !this.heart_attack ) {
				return;
			} else {
				
				if ( this.losebreath < 3 ) {
					this.losebreath += 2;
				}
				this.adjustOxyLoss( 5 );
				this.adjustBruteLoss( 1 );
			}
			return;
		}

		// Function from file: life.dm
		public void handle_embedded_objects(  ) {
			Obj_Item_Organ_Limb L = null;
			Obj_Item I = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				L = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( L.embedded_objects, typeof(Obj_Item) )) {
					I = _a;
					

					if ( Rand13.PercentChance( I.embedded_pain_chance ) ) {
						L.take_damage( I.w_class * I.embedded_pain_multiplier );
						this.WriteMsg( new Txt( "<span class='userdanger'>" ).the( I ).item().str( " embedded in your " ).item( L.getDisplayName() ).str( " hurts!</span>" ).ToString() );
					}

					if ( Rand13.PercentChance( I.embedded_fall_chance ) ) {
						L.take_damage( I.w_class * I.embedded_fall_pain_multiplier );
						L.embedded_objects.Remove( I );
						I.loc = GlobalFuncs.get_turf( this );
						this.visible_message( new Txt( "<span class='danger'>" ).the( I ).item().str( " falls out of " ).item( this.name ).str( "'s " ).item( L.getDisplayName() ).str( "!</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).the( I ).item().str( " falls out of your " ).item( L.getDisplayName() ).str( "!</span>" ).ToString() );

						if ( !this.has_embedded_objects() ) {
							this.clear_alert( "embeddedobject" );
						}
					}
				}
			}
			return;
		}

		// Function from file: life.dm
		public int get_cold_protection( dynamic temperature = null ) {
			int thermal_protection_flags = 0;
			double thermal_protection = 0;

			
			if ( this.dna.check_mutation( "Cold Resistance" ) != 0 ) {
				return 1;
			}

			if ( this.dna.species.specflags.Contains( this.dna != null && Lang13.Bool( "Cold Resistance" ) ) ) {
				return 1;
			}
			temperature = Num13.MaxInt( Convert.ToInt32( temperature ), ((int)( 2.7 )) );
			thermal_protection_flags = this.get_cold_protection_flags( temperature );
			thermal_protection = 0;

			if ( thermal_protection_flags != 0 ) {
				
				if ( ( thermal_protection_flags & 1 ) != 0 ) {
					thermal_protection += 0.3;
				}

				if ( ( thermal_protection_flags & 2 ) != 0 ) {
					thermal_protection += 0.15;
				}

				if ( ( thermal_protection_flags & 4 ) != 0 ) {
					thermal_protection += 0.15;
				}

				if ( ( thermal_protection_flags & 8 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 16 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 32 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 64 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 128 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 256 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 512 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 1024 ) != 0 ) {
					thermal_protection += 0.025;
				}
			}
			return Num13.MinInt( 1, ((int)( thermal_protection )) );
		}

		// Function from file: life.dm
		public int get_cold_protection_flags( dynamic temperature = null ) {
			int thermal_protection_flags = 0;

			thermal_protection_flags = 0;

			if ( Lang13.Bool( this.head ) ) {
				
				if ( this.head.min_cold_protection_temperature != 0 && this.head.min_cold_protection_temperature <= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= this.head.cold_protection;
				}
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( this.wear_suit.min_cold_protection_temperature != 0 && this.wear_suit.min_cold_protection_temperature <= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= this.wear_suit.cold_protection;
				}
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				
				if ( this.w_uniform.min_cold_protection_temperature != 0 && this.w_uniform.min_cold_protection_temperature <= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= this.w_uniform.cold_protection;
				}
			}

			if ( Lang13.Bool( this.shoes ) ) {
				
				if ( this.shoes.min_cold_protection_temperature != 0 && this.shoes.min_cold_protection_temperature <= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= this.shoes.cold_protection;
				}
			}

			if ( Lang13.Bool( this.gloves ) ) {
				
				if ( this.gloves.min_cold_protection_temperature != 0 && this.gloves.min_cold_protection_temperature <= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= this.gloves.cold_protection;
				}
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				
				if ( this.wear_mask.min_cold_protection_temperature != 0 && this.wear_mask.min_cold_protection_temperature <= Convert.ToDouble( temperature ) ) {
					thermal_protection_flags |= this.wear_mask.cold_protection;
				}
			}
			return thermal_protection_flags;
		}

		// Function from file: life.dm
		public int get_heat_protection( int? temperature = null ) {
			int thermal_protection_flags = 0;
			double thermal_protection = 0;

			thermal_protection_flags = this.get_heat_protection_flags( temperature );
			thermal_protection = 0;

			if ( thermal_protection_flags != 0 ) {
				
				if ( ( thermal_protection_flags & 1 ) != 0 ) {
					thermal_protection += 0.3;
				}

				if ( ( thermal_protection_flags & 2 ) != 0 ) {
					thermal_protection += 0.15;
				}

				if ( ( thermal_protection_flags & 4 ) != 0 ) {
					thermal_protection += 0.15;
				}

				if ( ( thermal_protection_flags & 8 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 16 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 32 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 64 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 128 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 256 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 512 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 1024 ) != 0 ) {
					thermal_protection += 0.025;
				}
			}
			return Num13.MinInt( 1, ((int)( thermal_protection )) );
		}

		// Function from file: life.dm
		public int get_heat_protection_flags( int? temperature = null ) {
			int thermal_protection_flags = 0;

			thermal_protection_flags = 0;

			if ( Lang13.Bool( this.head ) ) {
				
				if ( Lang13.Bool( this.head.max_heat_protection_temperature ) && ( this.head.max_heat_protection_temperature ??0) >= ( temperature ??0) ) {
					thermal_protection_flags |= Convert.ToInt32( this.head.heat_protection );
				}
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( Lang13.Bool( this.wear_suit.max_heat_protection_temperature ) && ( this.wear_suit.max_heat_protection_temperature ??0) >= ( temperature ??0) ) {
					thermal_protection_flags |= Convert.ToInt32( this.wear_suit.heat_protection );
				}
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				
				if ( Lang13.Bool( this.w_uniform.max_heat_protection_temperature ) && ( this.w_uniform.max_heat_protection_temperature ??0) >= ( temperature ??0) ) {
					thermal_protection_flags |= Convert.ToInt32( this.w_uniform.heat_protection );
				}
			}

			if ( Lang13.Bool( this.shoes ) ) {
				
				if ( Lang13.Bool( this.shoes.max_heat_protection_temperature ) && ( this.shoes.max_heat_protection_temperature ??0) >= ( temperature ??0) ) {
					thermal_protection_flags |= Convert.ToInt32( this.shoes.heat_protection );
				}
			}

			if ( Lang13.Bool( this.gloves ) ) {
				
				if ( Lang13.Bool( this.gloves.max_heat_protection_temperature ) && ( this.gloves.max_heat_protection_temperature ??0) >= ( temperature ??0) ) {
					thermal_protection_flags |= Convert.ToInt32( this.gloves.heat_protection );
				}
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				
				if ( Lang13.Bool( this.wear_mask.max_heat_protection_temperature ) && ( this.wear_mask.max_heat_protection_temperature ??0) >= ( temperature ??0) ) {
					thermal_protection_flags |= Convert.ToInt32( this.wear_mask.heat_protection );
				}
			}
			return thermal_protection_flags;
		}

		// Function from file: life.dm
		public double get_thermal_protection(  ) {
			double thermal_protection = 0;

			thermal_protection = 0;

			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( ( this.wear_suit.max_heat_protection_temperature ??0) >= 30000 ) {
					thermal_protection += ( this.wear_suit.max_heat_protection_temperature ??0) * 061;
				}
			}

			if ( Lang13.Bool( this.head ) ) {
				
				if ( ( this.head.max_heat_protection_temperature ??0) >= 30000 ) {
					thermal_protection += ( this.head.max_heat_protection_temperature ??0) * 0.3;
				}
			}
			thermal_protection = Num13.Floor( thermal_protection );
			return thermal_protection;
		}

		// Function from file: inventory.dm
		public dynamic equipOutfit( dynamic outfit = null, int? visualsOnly = null ) {
			visualsOnly = visualsOnly ?? GlobalVars.FALSE;

			dynamic O = null;

			O = null;

			if ( outfit is Type ) {
				O = Lang13.Call( outfit );
			} else {
				O = outfit;

				if ( !( O is Outfit ) ) {
					return 0;
				}
			}

			if ( !Lang13.Bool( O ) ) {
				return 0;
			}
			return O.equip( this, visualsOnly );
		}

		// Function from file: inventory.dm
		public void shred_clothing( bool? bomb = null, double? shock = null ) {
			int covered_parts = 0;
			dynamic head_absorbed = null;
			int suit_absorbed = 0;
			dynamic absorbed = null;
			int mask_absorbed = 0;
			dynamic absorbed2 = null;
			dynamic absorbed3 = null;
			int absorbed4 = 0;
			int absorbed5 = 0;
			int absorbed6 = 0;

			covered_parts = 0;
			head_absorbed = 0;
			suit_absorbed = 0;

			if ( Lang13.Bool( this.back ) ) {
				((Obj_Item)this.back).shred( bomb, ( shock ??0) - 20, this );
			}

			if ( Lang13.Bool( this.head ) ) {
				covered_parts |= this.head.flags_inv ??0;
				head_absorbed = ((Obj_Item)this.head).shred( bomb, shock, this );
			}

			if ( Lang13.Bool( this.wear_mask ) ) {
				absorbed = ( ( covered_parts & 1 ) != 0 ? head_absorbed : ((dynamic)( 0 )) );

				if ( Convert.ToDouble( absorbed ) >= 0 ) {
					mask_absorbed = ((Obj_Item)this.wear_mask).shred( bomb, ( shock ??0) - Convert.ToDouble( absorbed ), this );

					if ( ( ( this.wear_mask.flags_inv ??0) & 8 ) != 0 ) {
						covered_parts |= this.wear_mask.flags_inv ??0;

						if ( mask_absorbed < 0 ) {
							head_absorbed = -1;
						} else {
							head_absorbed += mask_absorbed;
						}
					}
				}
			}

			if ( Lang13.Bool( this.ears ) ) {
				absorbed2 = ( ( covered_parts & 2 ) != 0 ? head_absorbed : ((dynamic)( 0 )) );

				if ( Convert.ToDouble( absorbed2 ) >= 0 ) {
					((Obj_Item)this.ears).shred( bomb, ( shock ??0) - Convert.ToDouble( absorbed2 ), this );
				}
			}

			if ( Lang13.Bool( this.glasses ) ) {
				absorbed3 = ( ( covered_parts & 4 ) != 0 ? head_absorbed : ((dynamic)( 0 )) );

				if ( Convert.ToDouble( absorbed3 ) >= 0 ) {
					((Obj_Item)this.glasses).shred( bomb, ( shock ??0) - Convert.ToDouble( absorbed3 ), this );
				}
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				covered_parts |= this.wear_suit.flags_inv ??0;
				suit_absorbed = ((Obj_Item)this.wear_suit).shred( bomb, shock, this );
			}

			if ( Lang13.Bool( this.gloves ) ) {
				absorbed4 = ( ( covered_parts & 1 ) != 0 ? suit_absorbed : 0 );

				if ( absorbed4 >= 0 ) {
					((Obj_Item)this.gloves).shred( bomb, ( shock ??0) - absorbed4, this );
				}
			}

			if ( Lang13.Bool( this.shoes ) ) {
				absorbed5 = ( ( covered_parts & 8 ) != 0 ? suit_absorbed : 0 );

				if ( absorbed5 >= 0 ) {
					((Obj_Item)this.shoes).shred( bomb, ( shock ??0) - absorbed5, this );
				}
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				absorbed6 = ( ( covered_parts & 4 ) != 0 ? suit_absorbed : 0 );

				if ( absorbed6 >= 0 ) {
					((Obj_Item)this.w_uniform).shred( bomb, ( shock ??0) - 20 - absorbed6, this );
				}
			}
			return;
		}

		// Function from file: inventory.dm
		public dynamic equip_in_one_of_slots( dynamic I = null, ByTable slots = null, bool? qdel_on_fail = null ) {
			qdel_on_fail = qdel_on_fail ?? true;

			dynamic slot = null;

			
			foreach (dynamic _a in Lang13.Enumerate( slots )) {
				slot = _a;
				

				if ( this.equip_to_slot_if_possible( I, slots[slot], false ) ) {
					return slot;
				}
			}

			if ( qdel_on_fail == true ) {
				GlobalFuncs.qdel( I );
			}
			return null;
		}

		// Function from file: human_helpers.dm
		public dynamic get_idcard(  ) {
			
			if ( Lang13.Bool( this.wear_id ) ) {
				return ((Obj_Item)this.wear_id).GetID();
			}
			return null;
		}

		// Function from file: human_helpers.dm
		public string get_id_name( string if_no_id = null ) {
			if_no_id = if_no_id ?? "Unknown";

			string _default = null;

			dynamic wallet = null;
			dynamic pda = null;
			dynamic id = null;

			wallet = this.wear_id;
			pda = this.wear_id;
			id = this.wear_id;

			if ( wallet is Obj_Item_Weapon_Storage_Wallet ) {
				id = wallet.front_id;
			}

			if ( id is Obj_Item_Weapon_Card_Id ) {
				_default = id.registered_name;
			} else if ( pda is Obj_Item_Device_Pda ) {
				_default = pda.owner;
			}

			if ( !Lang13.Bool( _default ) ) {
				_default = if_no_id;
			}
			return _default;
		}

		// Function from file: human_helpers.dm
		public dynamic get_face_name( string if_no_face = null ) {
			if_no_face = if_no_face ?? "Unknown";

			Obj_Item_Organ_Limb O = null;

			
			if ( Lang13.Bool( this.wear_mask ) && ( ( this.wear_mask.flags_inv ??0) & 8 ) != 0 ) {
				return if_no_face;
			}

			if ( Lang13.Bool( this.head ) && ( ( this.head.flags_inv ??0) & 8 ) != 0 ) {
				return if_no_face;
			}
			O = this.get_organ( "head" );

			if ( !( O != null ) || ( this.status_flags & 16384 ) != 0 || O.brutestate + O.burnstate > 2 || this.cloneloss > 50 || !Lang13.Bool( this.real_name ) ) {
				return if_no_face;
			}
			return this.real_name;
		}

		// Function from file: human_helpers.dm
		public dynamic get_authentification_name( string if_no_id = null ) {
			if_no_id = if_no_id ?? "Unknown";

			dynamic id = null;
			dynamic pda = null;

			id = this.get_idcard();

			if ( Lang13.Bool( id ) ) {
				return id.registered_name;
			}
			pda = this.wear_id;

			if ( pda is Obj_Item_Device_Pda ) {
				return pda.owner;
			}
			return if_no_id;
		}

		// Function from file: human_helpers.dm
		public dynamic get_assignment( string if_no_id = null, string if_no_job = null ) {
			if_no_id = if_no_id ?? "No id";
			if_no_job = if_no_job ?? "No job";

			dynamic _default = null;

			dynamic id = null;
			dynamic pda = null;

			id = this.get_idcard();

			if ( Lang13.Bool( id ) ) {
				_default = id.assignment;
			} else {
				pda = this.wear_id;

				if ( pda is Obj_Item_Device_Pda ) {
					_default = pda.ownjob;
				} else {
					return if_no_id;
				}
			}

			if ( !Lang13.Bool( _default ) ) {
				return if_no_job;
			}
			return _default;
		}

		// Function from file: human_defense.dm
		public bool check_shields( dynamic damage = null, string attack_text = null, Ent_Dynamic AM = null, int? attack_type = null, int? armour_penetration = null ) {
			damage = damage ?? 0;
			attack_text = attack_text ?? "the attack";
			attack_type = attack_type ?? 1;
			armour_penetration = armour_penetration ?? 0;

			int block_chance_modifier = 0;
			int? final_block_chance = null;
			int? final_block_chance2 = null;
			int? final_block_chance3 = null;
			int? final_block_chance4 = null;

			block_chance_modifier = Num13.Floor( Convert.ToDouble( damage / -3 ) );

			if ( Lang13.Bool( this.l_hand ) && !( this.l_hand is Obj_Item_Clothing ) ) {
				final_block_chance = this.l_hand.block_chance - Num13.MaxInt( 0, Num13.MinInt( ((int)( ( ( armour_penetration ??0) - Convert.ToDouble( this.l_hand.armour_penetration ) ) / 2 )), 100 ) ) + block_chance_modifier;

				if ( ((Obj_Item)this.l_hand).hit_reaction( this, attack_text, final_block_chance, damage, attack_type ) ) {
					return true;
				}
			}

			if ( Lang13.Bool( this.r_hand ) && !( this.r_hand is Obj_Item_Clothing ) ) {
				final_block_chance2 = this.r_hand.block_chance - Num13.MaxInt( 0, Num13.MinInt( ((int)( ( ( armour_penetration ??0) - Convert.ToDouble( this.r_hand.armour_penetration ) ) / 2 )), 100 ) ) + block_chance_modifier;

				if ( ((Obj_Item)this.r_hand).hit_reaction( this, attack_text, final_block_chance2, damage, attack_type ) ) {
					return true;
				}
			}

			if ( Lang13.Bool( this.wear_suit ) ) {
				final_block_chance3 = this.wear_suit.block_chance - Num13.MaxInt( 0, Num13.MinInt( ((int)( ( ( armour_penetration ??0) - Convert.ToDouble( this.wear_suit.armour_penetration ) ) / 2 )), 100 ) ) + block_chance_modifier;

				if ( ((Obj_Item)this.wear_suit).hit_reaction( this, attack_text, final_block_chance3, damage, attack_type ) ) {
					return true;
				}
			}

			if ( Lang13.Bool( this.w_uniform ) ) {
				final_block_chance4 = this.w_uniform.block_chance - Num13.MaxInt( 0, Num13.MinInt( ((int)( ( ( armour_penetration ??0) - Convert.ToDouble( this.w_uniform.armour_penetration ) ) / 2 )), 100 ) ) + block_chance_modifier;

				if ( ((Obj_Item)this.w_uniform).hit_reaction( this, attack_text, final_block_chance4, damage, attack_type ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: human_defense.dm
		public bool check_reflect( dynamic def_zone = null ) {
			
			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( ((Obj_Item)this.wear_suit).IsReflect( def_zone ) ) {
					return true;
				}
			}

			if ( Lang13.Bool( this.l_hand ) ) {
				
				if ( ((Obj_Item)this.l_hand).IsReflect( def_zone ) ) {
					return true;
				}
			}

			if ( Lang13.Bool( this.r_hand ) ) {
				
				if ( ((Obj_Item)this.r_hand).IsReflect( def_zone ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: human_defense.dm
		public double checkarmor( dynamic def_zone = null, string type = null ) {
			double protection = 0;
			ByTable body_parts = null;
			dynamic bp = null;
			dynamic C = null;

			
			if ( !Lang13.Bool( type ) ) {
				return 0;
			}
			protection = 0;
			body_parts = new ByTable(new object [] { this.head, this.wear_mask, this.wear_suit, this.w_uniform, this.back, this.gloves, this.shoes, this.belt, this.s_store, this.glasses, this.ears, this.wear_id });

			foreach (dynamic _a in Lang13.Enumerate( body_parts )) {
				bp = _a;
				

				if ( !Lang13.Bool( bp ) ) {
					continue;
				}

				if ( Lang13.Bool( bp ) && bp is Obj_Item_Clothing ) {
					C = bp;

					if ( ( ( C.body_parts_covered ??0) & def_zone.body_part ) != 0 ) {
						protection += Convert.ToDouble( C.armor[type] );
					}
				}
			}
			return protection;
		}

		// Function from file: human_damage.dm
		public Obj_Item_Organ_Limb get_organ( dynamic zone = null ) {
			Obj_Item_Organ_Limb O = null;

			
			if ( !Lang13.Bool( zone ) ) {
				zone = "chest";
			}

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				O = _a;
				

				if ( O.name == zone ) {
					return O;
				}
			}
			return null;
		}

		// Function from file: human_damage.dm
		public void restore_blood(  ) {
			bool blood_volume = false;

			
			if ( !this.dna.species.specflags.Contains( 1024 ) ) {
				blood_volume = this.vessel.get_reagent_amount( "blood" );
				this.vessel.add_reagent( "blood", 560 - ( blood_volume ?1:0) );
			}
			return;
		}

		// Function from file: human_damage.dm
		public ByTable get_damageable_organs(  ) {
			ByTable parts = null;
			Obj_Item_Organ_Limb O = null;

			parts = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				O = _a;
				

				if ( O.brute_dam + O.burn_dam < O.max_damage ) {
					parts.Add( O );
				}
			}
			return parts;
		}

		// Function from file: human_damage.dm
		public ByTable get_damaged_organs( dynamic brute = null, dynamic burn = null ) {
			ByTable parts = null;
			Obj_Item_Organ_Limb O = null;

			parts = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.organs, typeof(Obj_Item_Organ_Limb) )) {
				O = _a;
				

				if ( Lang13.Bool( brute ) && O.brute_dam != 0 || Lang13.Bool( burn ) && O.burn_dam != 0 ) {
					parts.Add( O );
				}
			}
			return parts;
		}

		// Function from file: human_damage.dm
		public int hat_fall_prob(  ) {
			int multiplier = 0;
			dynamic H = null;
			int loose = 0;

			multiplier = 1;
			H = this.head;
			loose = 40;

			if ( this.stat != 0 || ( this.status_flags & 8192 ) != 0 ) {
				multiplier = 2;
			}

			if ( Lang13.Bool( H.flags_cover & 20 ) || ( ( H.flags_inv ??0) & 12 ) != 0 ) {
				loose = 0;
			}
			return loose * multiplier;
		}

		// Function from file: human_attackhand.dm
		public void afterattack( dynamic target = null, dynamic user = null, dynamic inrange = null, dynamic _params = null ) {
			return;
		}

		// Function from file: human.dm
		public void electrocution_animation( int anim_duration = 0 ) {
			ByTable viewing = null;
			dynamic M = null;

			
			if ( this.dna != null && Lang13.Bool( this.dna.species ) ) {
				((Species)this.dna.species).handle_mutant_bodyparts( this, "black" );
				((Species)this.dna.species).handle_hair( this, "black" );
				((Species)this.dna.species).update_color( this, "black" );
				this.overlays.Add( "electrocuted_base" );
				Task13.Schedule( anim_duration, (Task13.Closure)(() => {
					
					if ( this != null ) {
						
						if ( this.dna != null && Lang13.Bool( this.dna.species ) ) {
							((Species)this.dna.species).handle_mutant_bodyparts( this );
							((Species)this.dna.species).handle_hair( this );
							((Species)this.dna.species).update_color( this );
						}
						this.overlays.Remove( "electrocuted_base" );
					}
					return;
				}));
			} else {
				viewing = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) ) {
						viewing.Add( M.client );
					}
				}
				GlobalFuncs.flick_overlay( new Image( this.icon, this, "electrocuted_generic", 5 ), viewing, anim_duration );
			}
			return;
		}

		// Function from file: human.dm
		public bool do_cpr( Mob_Living_Carbon C = null ) {
			int suff = 0;

			
			if ( C.stat == 2 ) {
				this.WriteMsg( "<span class='warning'>" + C.name + " is dead!</span>" );
				return false;
			}

			if ( this.is_mouth_covered() ) {
				this.WriteMsg( "<span class='warning'>Remove your mask first!</span>" );
				return false;
			}

			if ( C.is_mouth_covered() ) {
				this.WriteMsg( "<span class='warning'>Remove their mask first!</span>" );
				return false;
			}

			if ( C.cpr_time < Game13.time + 30 ) {
				this.visible_message( "<span class='notice'>" + this + " is trying to perform CPR on " + C.name + "!</span>", "<span class='notice'>You try to perform CPR on " + C.name + "... Hold still!</span>" );

				if ( !GlobalFuncs.do_mob( this, C ) ) {
					this.WriteMsg( "<span class='warning'>You fail to perform CPR on " + C + "!</span>" );
					return false;
				}

				if ( Convert.ToDouble( C.health ) <= ( GlobalVars.config.health_threshold_crit ??0) ) {
					C.cpr_time = Game13.time;
					suff = Num13.MinInt( Convert.ToInt32( C.getOxyLoss() ), 7 );
					C.adjustOxyLoss( -suff );
					C.updatehealth();
					this.visible_message( "" + this + " performs CPR on " + C.name + "!", "<span class='notice'>You perform CPR on " + C.name + ".</span>" );
					C.WriteMsg( "<span class='unconscious'>You feel a breath of fresh air enter your lungs... It feels good...</span>" );
				}
				GlobalFuncs.add_logs( this, C, "CPRed" );
			}
			return false;
		}

		// Function from file: human.dm
		public void set_cloned_appearance(  ) {
			
			if ( this.gender == GlobalVars.MALE ) {
				this.facial_hair_style = "Full Beard";
			} else {
				this.facial_hair_style = "Shaved";
			}
			this.hair_style = Rand13.Pick(new object [] { "Bedhead", "Bedhead 2", "Bedhead 3" });
			this.underwear = "Nude";
			this.update_body();
			this.update_hair();
			return;
		}

		// Function from file: human.dm
		public ByTable check_obscured_slots(  ) {
			ByTable obscured = null;

			obscured = new ByTable();

			if ( Lang13.Bool( this.wear_suit ) ) {
				
				if ( ( ( this.wear_suit.flags_inv ??0) & 1 ) != 0 ) {
					obscured.Or( 10 );
				}

				if ( ( ( this.wear_suit.flags_inv ??0) & 4 ) != 0 ) {
					obscured.Or( 14 );
				}

				if ( ( ( this.wear_suit.flags_inv ??0) & 8 ) != 0 ) {
					obscured.Or( 12 );
				}
			}

			if ( Lang13.Bool( this.head ) ) {
				
				if ( ( ( this.head.flags_inv ??0) & 1 ) != 0 ) {
					obscured.Or( 2 );
				}

				if ( ( ( this.head.flags_inv ??0) & 4 ) != 0 ) {
					obscured.Or( 9 );
				}

				if ( ( ( this.head.flags_inv ??0) & 2 ) != 0 ) {
					obscured.Or( 8 );
				}
			}

			if ( obscured.len > 0 ) {
				return obscured;
			} else {
				return null;
			}
		}

		// Function from file: human.dm
		public bool canUseHUD(  ) {
			return !( this.stat != 0 || this.weakened != 0 || this.stunned != 0 || this.restrained() );
		}

		// Function from file: emote.dm
		public void endTailWag(  ) {
			
			if ( !( this.dna != null ) || !Lang13.Bool( this.dna.species ) ) {
				return;
			}

			if ( this.dna.species.mutant_bodyparts.Contains( "waggingtail_lizard" ) ) {
				this.dna.species.mutant_bodyparts.Remove( "waggingtail_lizard" );
				this.dna.species.mutant_bodyparts.Remove( "waggingspines" );
				this.dna.species.mutant_bodyparts.Or( "tail_lizard" );
				this.dna.species.mutant_bodyparts.Or( "spines" );
			}

			if ( this.dna.species.mutant_bodyparts.Contains( "waggingtail_human" ) ) {
				this.dna.species.mutant_bodyparts.Remove( "waggingtail_human" );
				this.dna.species.mutant_bodyparts.Or( "tail_human" );
			}
			this.update_body();
			return;
		}

		// Function from file: emote.dm
		public void startTailWag(  ) {
			
			if ( !( this.dna != null ) || !Lang13.Bool( this.dna.species ) ) {
				return;
			}

			if ( this.dna.species.mutant_bodyparts.Contains( "tail_lizard" ) ) {
				this.dna.species.mutant_bodyparts.Remove( "tail_lizard" );
				this.dna.species.mutant_bodyparts.Remove( "spines" );
				this.dna.species.mutant_bodyparts.Or( "waggingtail_lizard" );
				this.dna.species.mutant_bodyparts.Or( "waggingspines" );
			}

			if ( this.dna.species.mutant_bodyparts.Contains( "tail_human" ) ) {
				this.dna.species.mutant_bodyparts.Remove( "tail_human" );
				this.dna.species.mutant_bodyparts.Or( "waggingtail_human" );
			}
			this.update_body();
			return;
		}

		// Function from file: death.dm
		public bool makeSkeleton(  ) {
			this.status_flags |= 16384;
			this.set_species( typeof(Species_Skeleton) );
			return true;
		}

		// Function from file: blood.dm
		public void drip( double amt = 0 ) {
			
			if ( !( amt != 0 ) ) {
				return;
			}
			this.vessel.remove_reagent( "blood", amt );

			if ( this.loc is Tile ) {
				GlobalFuncs.blood_splatter( this, this );
			}
			return;
		}

		// Function from file: blood.dm
		public void suppress_bloodloss( int amount = 0 ) {
			
			if ( this.bleedsuppress ) {
				return;
			} else {
				this.bleedsuppress = true;
				Task13.Schedule( amount, (Task13.Closure)(() => {
					this.bleedsuppress = false;

					if ( this.stat != 2 && this.blood_max != 0 ) {
						this.WriteMsg( "<span class='warning'>The blood soaks through your bandage.</span>" );
					}
					return;
				}));
			}
			return;
		}

		// Function from file: blood.dm
		public void make_blood(  ) {
			Reagent_Blood B = null;

			
			if ( this.vessel != null ) {
				return;
			}
			this.vessel = new Reagents( 600 );
			this.vessel.my_atom = this;

			if ( this.dna.species.specflags.Contains( 1024 ) ) {
				return;
			}
			this.vessel.add_reagent( "blood", GlobalVars.BLOOD_VOLUME_NORMAL );

			foreach (dynamic _a in Lang13.Enumerate( this.vessel.reagent_list, typeof(Reagent_Blood) )) {
				B = _a;
				

				if ( B.id == "blood" ) {
					B.data = new ByTable()
						.Set( "donor", this )
						.Set( "viruses", null )
						.Set( "blood_DNA", this.dna.unique_enzymes )
						.Set( "blood_type", this.dna.blood_type )
						.Set( "resistances", null )
						.Set( "trace_chem", null )
						.Set( "mind", null )
						.Set( "ckey", null )
						.Set( "gender", null )
						.Set( "real_name", null )
						.Set( "cloneable", null )
						.Set( "features", null )
						.Set( "factions", null )
					;
				}
			}
			return;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_SimpleAnimal_Pet_Dog_Corgi corgize(  ) {
			Mob_Living_SimpleAnimal_Pet_Dog_Corgi _default = null;

			Obj_Item W = null;
			dynamic t = null;
			Mob_Living_SimpleAnimal_Pet_Dog_Corgi new_corgi = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.unEquip( W );
			}
			this.regenerate_icons();
			this.notransform = 1;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			new_corgi = new Mob_Living_SimpleAnimal_Pet_Dog_Corgi( this.loc );
			new_corgi.a_intent = "harm";
			new_corgi.key = this.key;
			new_corgi.WriteMsg( "<B>You are now a Corgi. Yap Yap!</B>" );
			_default = new_corgi;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: transform_procs.dm
		public void Blobize(  ) {
			
			if ( Lang13.Bool( this.notransform ) ) {
				return;
			}

			if ( !( this.client != null ) ) {
				new Obj_Effect_Blob_Core( this.loc );
			} else {
				new Obj_Effect_Blob_Core( this.loc, null, this.client );
			}
			this.gib( this );
			return;
		}

		// Function from file: transform_procs.dm
		public dynamic slimeize( dynamic reproduce = null ) {
			dynamic _default = null;

			Obj_Item W = null;
			dynamic t = null;
			dynamic new_slime = null;
			int? number = null;
			ByTable babies = null;
			int? i = null;
			Mob_Living_SimpleAnimal_Slime M = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.unEquip( W );
			}
			this.regenerate_icons();
			this.notransform = 1;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			new_slime = null;

			if ( Lang13.Bool( reproduce ) ) {
				number = Lang13.IntNullable( Rand13.PickWeighted(new object [] { 4287, 2, 34910, 3, 65535, 4 }) );
				babies = new ByTable();
				i = null;
				i = 1;

				while (( i ??0) <= ( number ??0)) {
					M = new Mob_Living_SimpleAnimal_Slime( this.loc );
					M.nutrition = Num13.Floor( this.nutrition / ( number ??0) );
					Map13.StepAway( M, this, null );
					babies.Add( M );
					i++;
				}
				new_slime = Rand13.PickFromTable( babies );
			} else {
				new_slime = new Mob_Living_SimpleAnimal_Slime( this.loc );
			}
			new_slime.a_intent = "harm";
			new_slime.key = this.key;
			new_slime.WriteMsg( "<B>You are now a slime. Skreee!</B>" );
			_default = new_slime;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_Carbon_Alien_Humanoid Alienize(  ) {
			Mob_Living_Carbon_Alien_Humanoid _default = null;

			Obj_Item W = null;
			dynamic t = null;
			dynamic alien_caste = null;
			Mob_Living_Carbon_Alien_Humanoid new_xeno = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				
				this.unEquip( W );
			}
			this.regenerate_icons();
			this.notransform = 1;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			alien_caste = Rand13.Pick(new object [] { "Hunter", "Sentinel", "Drone" });
			new_xeno = null;

			dynamic _c = alien_caste; // Was a switch-case, sorry for the mess.
			if ( _c=="Hunter" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Hunter( this.loc );
			} else if ( _c=="Sentinel" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Sentinel( this.loc );
			} else if ( _c=="Drone" ) {
				new_xeno = new Mob_Living_Carbon_Alien_Humanoid_Drone( this.loc );
			}
			new_xeno.a_intent = "harm";
			new_xeno.key = this.key;
			new_xeno.WriteMsg( "<B>You are now an alien.</B>" );
			_default = new_xeno;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: transform_procs.dm
		public Mob_Living_Silicon_Robot Robotize( bool? delete_items = null ) {
			delete_items = delete_items ?? false;

			Mob_Living_Silicon_Robot _default = null;

			Obj_Item W = null;
			dynamic t = null;
			Mob_Living_Silicon_Robot R = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				W = _a;
				

				if ( delete_items == true ) {
					GlobalFuncs.qdel( W );
				} else {
					this.unEquip( W );
				}
			}
			this.regenerate_icons();
			this.notransform = 1;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;

			foreach (dynamic _b in Lang13.Enumerate( this.organs )) {
				t = _b;
				
				GlobalFuncs.qdel( t );
			}
			R = new Mob_Living_Silicon_Robot( this.loc );
			R.cell = new Obj_Item_Weapon_StockParts_Cell( R );
			R.cell.maxcharge = 7500;
			R.cell.charge = 7500;
			R.gender = this.gender;
			R.invisibility = 0;

			if ( this.mind != null ) {
				this.mind.transfer_to( R );

				if ( Lang13.Bool( this.mind.special_role ) ) {
					R.mind.store_memory( "In case you look at this after being borged, the objectives are only here until I find a way to make them not show up for you, as I can't simply delete them without screwing up round-end reporting. --NeoFite" );
				}
			} else {
				R.key = this.key;
			}

			if ( GlobalVars.config.rename_cyborg ) {
				R.rename_self( "cyborg" );
			}

			if ( Lang13.Bool( R.mmi ) ) {
				R.mmi.name = "Man-Machine Interface: " + this.real_name;

				if ( Lang13.Bool( R.mmi.brain ) ) {
					R.mmi.brain.name = "" + this.real_name + "'s brain";
				}

				if ( Lang13.Bool( R.mmi.brainmob ) ) {
					R.mmi.brainmob.real_name = this.real_name;
					R.mmi.brainmob.name = this.real_name;
				}
			}
			R.loc = this.loc;
			R.job = "Cyborg";
			R.notify_ai( 1 );
			_default = R;
			GlobalFuncs.qdel( this );
			return _default;
		}

		// Function from file: dna.dm
		public void hardset_dna( dynamic ui = null, dynamic se = null, dynamic newreal_name = null, dynamic newblood_type = null, Type mrace = null, ByTable newfeatures = null ) {
			
			if ( newfeatures != null ) {
				this.dna.features = newfeatures;
			}

			if ( mrace != null ) {
				this.set_species( mrace, false );
			}

			if ( Lang13.Bool( newreal_name ) ) {
				this.real_name = newreal_name;
				this.dna.generate_unique_enzymes();
			}

			if ( Lang13.Bool( newblood_type ) ) {
				this.dna.blood_type = newblood_type;
			}

			if ( Lang13.Bool( ui ) ) {
				this.dna.uni_identity = ui;
				this.updateappearance( false );
			}

			if ( Lang13.Bool( se ) ) {
				this.dna.struc_enzymes = se;
				this.domutcheck();
			}

			if ( mrace != null || newfeatures != null || Lang13.Bool( ui ) ) {
				this.update_body();
				this.update_hair();
				this.update_mutcolor();
				this.update_mutations_overlay();
			}
			return;
		}

		// Function from file: data_huds.dm
		public void sec_hud_set_security_status(  ) {
			dynamic holder = null;
			dynamic perpname = null;
			Data_Record R = null;

			holder = this.hud_list["4"];
			perpname = this.get_face_name( this.get_id_name( "" ) );

			if ( Lang13.Bool( perpname ) ) {
				R = GlobalFuncs.find_record( "name", perpname, GlobalVars.data_core.security );

				if ( R != null ) {
					
					dynamic _a = R.fields["criminal"]; // Was a switch-case, sorry for the mess.
					if ( _a=="*Arrest*" ) {
						holder.icon_state = "hudwanted";
						return;
					} else if ( _a=="Incarcerated" ) {
						holder.icon_state = "hudincarcerated";
						return;
					} else if ( _a=="Parolled" ) {
						holder.icon_state = "hudparolled";
						return;
					} else if ( _a=="Discharged" ) {
						holder.icon_state = "huddischarged";
						return;
					}
				}
			}
			holder.icon_state = null;
			return;
		}

		// Function from file: data_huds.dm
		public void sec_hud_set_implants(  ) {
			dynamic holder = null;
			dynamic i = null;
			Obj_Item_Weapon_Implant I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { "7", "5", "6" }) )) {
				i = _a;
				
				holder = this.hud_list[i];
				holder.icon_state = null;
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Implant) )) {
				I = _b;
				

				if ( Lang13.Bool( I.implanted ) ) {
					
					if ( I is Obj_Item_Weapon_Implant_Tracking ) {
						holder = this.hud_list["7"];
						holder.icon_state = "hud_imp_tracking";
					} else if ( I is Obj_Item_Weapon_Implant_Loyalty ) {
						holder = this.hud_list["5"];
						holder.icon_state = "hud_imp_loyal";
					} else if ( I is Obj_Item_Weapon_Implant_Chem ) {
						holder = this.hud_list["6"];
						holder.icon_state = "hud_imp_chem";
					}
				}
			}
			return;
		}

		// Function from file: data_huds.dm
		public void sec_hud_set_ID(  ) {
			dynamic holder = null;
			dynamic T = null;

			holder = this.hud_list["3"];
			holder.icon_state = "hudno_id";

			if ( Lang13.Bool( this.wear_id ) ) {
				holder.icon_state = "hud" + String13.CKey( ((Obj_Item)this.wear_id).GetJobName() );
			}
			this.sec_hud_set_security_status();
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				GlobalVars.crewmonitor.queueUpdate( Convert.ToInt32( T.z ) );
			}
			return;
		}

		// Function from file: martial.dm
		[VerbInfo( name: "Recall Teachings", desc: "Remember the martial techniques of the Sleeping Carp clan.", group: "Sleeping Carp" )]
		public void sleeping_carp_help(  ) {
			Task13.User.WriteMsg( "<b><i>You retreat inward and recall the teachings of the Sleeping Carp...</i></b>" );
			Task13.User.WriteMsg( "<span class='notice'>Wrist Wrench</span>: Disarm Disarm. Forces opponent to drop item in hand." );
			Task13.User.WriteMsg( "<span class='notice'>Back Kick</span>: Harm Grab. Opponent must be facing away. Knocks down." );
			Task13.User.WriteMsg( "<span class='notice'>Stomach Knee</span>: Grab Harm. Knocks the wind out of opponent and stuns." );
			Task13.User.WriteMsg( "<span class='notice'>Head Kick</span>: Disarm Harm Harm. Decent damage, forces opponent to drop item in hand." );
			Task13.User.WriteMsg( "<span class='notice'>Elbow Drop</span>: Harm Disarm Harm Disarm Harm. Opponent must be on the ground. Deals huge damage, instantly kills anyone in critical condition." );
			return;
		}

		// Function from file: martial.dm
		[VerbInfo( name: "Recall Teachings", desc: "Remember the martial techniques of the Plasma Fist.", group: "Plasma Fist" )]
		public void plasma_fist_help(  ) {
			Task13.User.WriteMsg( "<b><i>You clench your fists and have a flashback of knowledge...</i></b>" );
			Task13.User.WriteMsg( "<span class='notice'>Tornado Sweep</span>: Harm Harm Disarm. Repulses target and everyone back." );
			Task13.User.WriteMsg( "<span class='notice'>Throwback</span>: Disarm Harm Disarm. Throws the target and an item at them." );
			Task13.User.WriteMsg( "<span class='notice'>The Plasma Fist</span>: Harm Disarm Disarm Disarm Harm. Knocks the brain out of the opponent and gibs their body." );
			return;
		}

		// Function from file: martial.dm
		[VerbInfo( name: "Recall Teachings", desc: "Remember how to wrestle.", group: "Wrestling" )]
		public void wrestling_help(  ) {
			Task13.User.WriteMsg( "<b><i>You flex your muscles and have a revelation...</i></b>" );
			Task13.User.WriteMsg( "<span class='notice'>Clinch</span>: Grab. Passively gives you a chance to immediately aggressively grab someone. Not always successful." );
			Task13.User.WriteMsg( "<span class='notice'>Suplex</span>: Disarm someone you are grabbing. Suplexes your target to the floor. Greatly injures them and leaves both you and your target on the floor." );
			Task13.User.WriteMsg( "<span class='notice'>Advanced grab</span>: Grab. Passively causes stamina damage when grabbing someone." );
			return;
		}

		// Function from file: human.dm
		public override void create_mob_hud(  ) {
			
			if ( this.client != null && !( this.hud_used != null ) ) {
				this.hud_used = new Hud_Human( this, GlobalFuncs.ui_style2icon( this.client.prefs.UI_style ) );
			}
			return;
		}

		// Function from file: other_mobs.dm
		public override void RangedAttack( Ent_Static A = null, string _params = null ) {
			dynamic G = null;
			Mutation_Human HM = null;
			Ent_Static T = null;

			
			if ( Lang13.Bool( this.gloves ) ) {
				G = this.gloves;

				if ( G is Obj_Item_Clothing_Gloves && Lang13.Bool( ((Obj_Item_Clothing_Gloves)G).Touch( A, false ) ) ) {
					return;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( this.dna.mutations, typeof(Mutation_Human) )) {
				HM = _a;
				
				HM.on_ranged_attack( this, A );
			}
			T = A;

			if ( T is Tile && Map13.GetDistance( this, T ) <= 1 ) {
				this.Move_Pulled( T );
			}
			return;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			dynamic G = null;
			double _override = 0;
			Mutation_Human HM = null;

			G = this.gloves;

			if ( proximity_flag == true && G is Obj_Item_Clothing_Gloves && Lang13.Bool( ((Obj_Item_Clothing_Gloves)G).Touch( A, true ) ) ) {
				return;
			}
			_override = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.dna.mutations, typeof(Mutation_Human) )) {
				HM = _a;
				
				_override += HM.on_attack_hand( this, A ) ?1:0;
			}

			if ( _override != 0 ) {
				return;
			}
			A.attack_hand( this );
			return;
		}

		// Function from file: whisper.dm
		[Verb]
		[VerbInfo( name: "Whisper", group: "IC" )]
		[VerbArg( 1, InputType.Str )]
		public override void whisper( dynamic message = null ) {
			string alt_name = null;
			string whispers = null;
			bool critical = false;
			int health_diff = 0;
			int message_len = 0;
			ByTable listening_dead = null;
			dynamic M = null;
			ByTable listening = null;
			ByTable eavesdropping = null;
			ByTable watching = null;
			string rendered = null;
			dynamic M2 = null;
			ByTable spans = null;
			Ent_Dynamic AM = null;
			Ent_Dynamic AM2 = null;

			
			if ( !this.IsVocal() ) {
				return;
			}

			if ( !Lang13.Bool( message ) ) {
				return;
			}

			if ( GlobalVars.say_disabled ) {
				Task13.User.WriteMsg( "<span class='danger'>Speech is currently admin-disabled.</span>" );
				return;
			}

			if ( this.stat == 2 ) {
				return;
			}
			message = GlobalFuncs.trim( String13.HtmlEncode( message ) );

			if ( !this.can_speak( message ) ) {
				return;
			}
			message = "" + message;
			GlobalFuncs.log_whisper( "" + this.name + "/" + this.key + " : " + message );

			if ( this.client != null ) {
				
				if ( ( this.client.prefs.muted & 1 ) != 0 ) {
					this.WriteMsg( "<span class='danger'>You cannot whisper (muted).</span>" );
					return;
				}
			}
			GlobalFuncs.log_whisper( "" + this.name + "/" + this.key + " : " + message );
			alt_name = this.get_alt_name();
			whispers = "whispers";
			critical = this.InCritical();

			if ( this.stat == 1 && !critical ) {
				return;
			}

			if ( critical ) {
				health_diff = Num13.Floor( -( GlobalVars.config.health_threshold_dead ??0) + Convert.ToDouble( this.health ) );
				message_len = Lang13.Length( message );
				message = String13.SubStr( message, 1, health_diff ) + ( "" + ( message_len > health_diff ? "-.." : "..." ) );
				message = GlobalFuncs.Ellipsis( message, 10, true );
				whispers = "whispers in their final breath";
			}
			message = this.treat_message( message );
			listening_dead = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client ) && ( ( M.client.prefs.chat_toggles & 128 ) != 0 || Map13.GetDistance( M, this ) <= 7 ) ) {
					listening_dead.Or( M );
				}
			}
			listening = GlobalFuncs.get_hearers_in_view( 1, this );
			listening.Or( listening_dead );
			eavesdropping = GlobalFuncs.get_hearers_in_view( 2, this );
			eavesdropping.Remove( listening );
			watching = Map13.FetchHearers( this, 5 );
			watching.Remove( listening );
			watching.Remove( eavesdropping );
			rendered = null;
			rendered = "<span class='game say'><span class='name'>" + this.name + "</span> " + whispers + " something.</span>";

			foreach (dynamic _b in Lang13.Enumerate( watching )) {
				M2 = _b;
				
				M2.show_message( rendered, 2 );
			}
			spans = new ByTable(new object [] { "italics" });
			rendered = "<span class='game say'><span class='name'>" + this.GetVoice() + "</span>" + alt_name + " " + whispers + ", <span class='message'>\"" + GlobalFuncs.attach_spans( message, spans ) + "\"</span></span>";

			foreach (dynamic _c in Lang13.Enumerate( listening, typeof(Ent_Dynamic) )) {
				AM = _c;
				

				if ( AM is Obj_Item_Device_Radio ) {
					continue;
				}
				AM.Hear( rendered, this, this.languages, message, null, spans );
			}
			message = GlobalFuncs.stars( message );
			rendered = "<span class='game say'><span class='name'>" + this.GetVoice() + "</span>" + alt_name + " " + whispers + ", <span class='message'>\"" + GlobalFuncs.attach_spans( message, spans ) + "\"</span></span>";

			foreach (dynamic _d in Lang13.Enumerate( eavesdropping, typeof(Ent_Dynamic) )) {
				AM2 = _d;
				

				if ( AM2 is Obj_Item_Device_Radio ) {
					continue;
				}
				AM2.Hear( rendered, this, this.languages, message, null, spans );
			}

			if ( critical ) {
				this.succumb( true );
			}
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;
			dynamic held_item = null;
			int damagetype = 0;
			int damage_mod = 0;
			dynamic T = null;
			dynamic suicide_message = null;

			
			if ( !this.canSuicide() ) {
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( !this.canSuicide() ) {
				return;
			}

			if ( confirm == "Yes" ) {
				this.suiciding = 1;
				held_item = this.get_active_hand();

				if ( Lang13.Bool( held_item ) ) {
					damagetype = ((Obj_Item)held_item).suicide_act( this );

					if ( damagetype != 0 ) {
						
						if ( ( damagetype & 16 ) != 0 ) {
							this.adjustStaminaLoss( 200 );
							this.suiciding = 0;
							return;
						}
						damage_mod = 0;

						foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { 1, 2, 4, 8 }) )) {
							T = _a;
							
							damage_mod += ( Lang13.Bool( T & damagetype ) ? true : false ) ?1:0;
						}
						damage_mod = Num13.MaxInt( 1, damage_mod );

						if ( ( damagetype & 1 ) != 0 ) {
							this.adjustBruteLoss( 200 / damage_mod );
						}

						if ( ( damagetype & 2 ) != 0 ) {
							this.adjustFireLoss( 200 / damage_mod );
						}

						if ( ( damagetype & 4 ) != 0 ) {
							this.adjustToxLoss( 200 / damage_mod );
						}

						if ( ( damagetype & 8 ) != 0 ) {
							this.adjustOxyLoss( 200 / damage_mod );
						}

						if ( !( ( damagetype & 15 ) != 0 ) ) {
							this.adjustOxyLoss( Num13.MaxInt( ((int)( 200 - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss() - Convert.ToDouble( this.getOxyLoss() ) )), 0 ) );
						}
						this.death( false );
						return;
					}
				}
				suicide_message = Rand13.Pick(new object [] { new Txt().item( this ).str( " is attempting to bite " ).his_her_its_their().str( " tongue off! It looks like " ).he_she_it_they().str( "'s trying to commit suicide." ).ToString(), new Txt().item( this ).str( " is jamming " ).his_her_its_their().str( " thumbs into " ).his_her_its_their().str( " eye sockets! It looks like " ).he_she_it_they().str( "'s trying to commit suicide." ).ToString(), new Txt().item( this ).str( " is twisting " ).his_her_its_their().str( " own neck! It looks like " ).he_she_it_they().str( "'s trying to commit suicide." ).ToString(), new Txt().item( this ).str( " is holding " ).his_her_its_their().str( " breath! It looks like " ).he_she_it_they().str( "'s trying to commit suicide." ).ToString() });
				this.visible_message( "<span class='danger'>" + suicide_message + "</span>", "<span class='userdanger'>" + suicide_message + "</span>" );
				this.adjustOxyLoss( Num13.MaxInt( ((int)( 200 - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss() - Convert.ToDouble( this.getOxyLoss() ) )), 0 ) );
				this.death( false );
			}
			return;
		}

		// Function from file: human.dm
		[Verb]
		[VerbInfo( name: "Toggle hotkey buttons", desc: "This disables or enables the user interface buttons which can be used with hotkeys.", group: "OOC" )]
		public void toggle_hotkey_verbs(  ) {
			
			if ( this.hud_used.hotkey_ui_hidden ) {
				this.client.screen.Add( this.hud_used.hotkeybuttons );
				this.hud_used.hotkey_ui_hidden = false;
			} else {
				this.client.screen.Remove( this.hud_used.hotkeybuttons );
				this.hud_used.hotkey_ui_hidden = true;
			}
			return;
		}

	}

}