// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon : Mob_Living {

		public bool syndicate = false;
		public dynamic laws = null;
		public ByTable alarms_to_show = new ByTable();
		public ByTable alarms_to_clear = new ByTable();
		public Obj_Item_Device_Radio_Borg v_radio = null;
		public ByTable speech_synthesizer_langs = new ByTable();
		public int sensor_mode = 0;
		public dynamic vision_types_list = null;
		public ByTable alarm_types_show = new ByTable().Set( "Motion", 0 ).Set( "Fire", 0 ).Set( "Atmosphere", 0 ).Set( "Power", 0 ).Set( "Camera", 0 );
		public ByTable alarm_types_clear = new ByTable().Set( "Motion", 0 ).Set( "Fire", 0 ).Set( "Atmosphere", 0 ).Set( "Power", 0 ).Set( "Camera", 0 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.voice_name = "synthesized voice";
			this.can_butcher = false;
			this.immune_to_ssd = true;
		}

		public Mob_Living_Silicon ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: Airflow.dm
		public override bool check_airflow_movable( double n = 0 ) {
			return false;
		}

		// Function from file: Airflow.dm
		public override bool airflow_stun(  ) {
			return false;
		}

		// Function from file: silicon.dm
		public override bool spook(  ) {
			GlobalFuncs.to_chat( this, "<i>" + Rand13.PickFromTable( GlobalVars.boo_phrases_silicon ) + "</i>" );
			return false;
		}

		// Function from file: silicon.dm
		public override bool html_mob_check( Type typepath = null ) {
			Ent_Dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.html_machines, typeof(Ent_Dynamic) )) {
				AM = _a;
				

				if ( typepath == AM.type ) {
					
					if ( Num13.MaxInt( ((int)( Math.Abs( AM.x - this.x ) )), ((int)( Math.Abs( AM.y - this.y ) )) ) <= this.client.view ) {
						return true;
					}
				}
			}
			return false;
		}

		// Function from file: silicon.dm
		public override dynamic dexterity_check(  ) {
			return 1;
		}

		// Function from file: silicon.dm
		public override dynamic remove_language( dynamic rem_language = null ) {
			Language L = null;

			base.remove_language( (object)(rem_language) );

			foreach (dynamic _a in Lang13.Enumerate( this.speech_synthesizer_langs, typeof(Language) )) {
				L = _a;
				

				if ( L.name == rem_language ) {
					this.speech_synthesizer_langs.Remove( L );
				}
			}
			return null;
		}

		// Function from file: silicon.dm
		public override bool add_language( dynamic language = null, bool? can_speak = null ) {
			can_speak = can_speak ?? true;

			
			if ( base.add_language( (object)(language), can_speak ) && can_speak == true ) {
				this.speech_synthesizer_langs.Or( GlobalVars.all_languages[language] );
				return true;
			}
			return false;
		}

		// Function from file: silicon.dm
		public override bool? can_speak_lang( dynamic speaking = null ) {
			return this.universal_speak || false;
		}

		// Function from file: silicon.dm
		public override bool put_in_hand_check( dynamic I = null, bool? this_hand = null ) {
			return false;
		}

		// Function from file: silicon.dm
		public override int assess_threat( Obj_Machinery_Bot judgebot = null, string lasercolor = null ) {
			return -10;
		}

		// Function from file: silicon.dm
		public override dynamic electrocute_act( dynamic shock_damage = null, dynamic source = null, double? base_siemens_coeff = null, bool? def_zone = null ) {
			base_siemens_coeff = base_siemens_coeff ?? 1;

			dynamic damage = null;
			Effect_Effect_System_SparkSpread SparkSpread = null;

			
			if ( source is Obj_Machinery_ContainmentField ) {
				damage = shock_damage * base_siemens_coeff * 0.75;

				if ( Convert.ToDouble( damage ) <= 0 ) {
					damage = 0;
				}

				if ( !this.take_overall_damage( 0, damage, "" + source ) ) {
					return 0;
				}
				this.visible_message( "<span class='warning'>" + this + " was shocked by the " + source + "!</span>", "<span class='danger'>Energy pulse detected, system damaged!</span>", "<span class='warning'>You hear a heavy electrical crack.</span>" );

				if ( Rand13.PercentChance( 20 ) ) {
					this.Stun( 2 );
				}
				SparkSpread = new Effect_Effect_System_SparkSpread();
				SparkSpread.set_up( 5, 1, this.loc );
				SparkSpread.start();
				return damage;
			}
			return 0;
		}

		// Function from file: silicon.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				this.show_station_time();
				this.show_emergency_shuttle_eta();
				this.show_system_integrity();
				this.show_malf_ai();
			}
			return null;
		}

		// Function from file: silicon.dm
		public override dynamic apply_effect( dynamic effect = null, dynamic effecttype = null, int? blocked = null ) {
			effect = effect ?? 0;
			effecttype = effecttype ?? "stun";
			blocked = blocked ?? 0;

			return 0;
		}

		// Function from file: silicon.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( !Proj.nodamage ) {
				this.adjustBruteLoss( Proj.damage );
			}
			((Obj_Item_Projectile)Proj).on_hit( this, 2 );
			return 2;
		}

		// Function from file: silicon.dm
		public override dynamic IsAdvancedToolUser(  ) {
			return 1;
		}

		// Function from file: silicon.dm
		public override dynamic emp_act( int severity = 0 ) {
			Obj_Item_Stickybomb B = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Stickybomb) )) {
				B = _a;
				

				if ( Lang13.Bool( B.stuck_to ) ) {
					this.visible_message( new Txt( "<span class='warning'>" ).the( B ).item().str( " stuck on " ).the( this ).item().str( " suddenly deactivates itself and falls to the ground.</span>" ).ToString() );
					B.deactivate();
					B.unstick();
				}
			}

			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}

			switch ((int)( severity )) {
				case 1:
					this.take_organ_damage( 20 );
					this.Stun( Rand13.Int( 5, 10 ) );
					break;
				case 2:
					this.take_organ_damage( 10 );
					this.Stun( Rand13.Int( 1, 5 ) );
					break;
			}
			Icon13.Flick( "noise", this.flash );
			GlobalFuncs.to_chat( this, "<span class='danger'>*BZZZT*</span>" );
			GlobalFuncs.to_chat( this, "<span class='warning'>Warning: Electromagnetic pulse detected.</span>" );
			base.emp_act( severity );
			return null;
		}

		// Function from file: silicon.dm
		public override void generate_static_overlay(  ) {
			return;
		}

		// Function from file: silicon.dm
		public override bool drop_item( dynamic to_drop = null, dynamic Target = null, bool? force_drop = null ) {
			force_drop = force_drop ?? false;

			return true;
		}

		// Function from file: silicon.dm
		public void show_station_manifest(  ) {
			dynamic dat = null;

			dat += "<h4>Crew Manifest</h4>";

			if ( GlobalVars.data_core != null ) {
				dat += GlobalVars.data_core.get_manifest( true );
			}
			dat += "<br>";
			Interface13.Browse( this, dat, "window=airoster" );
			GlobalFuncs.onclose( this, "airoster" );
			return;
		}

		// Function from file: silicon.dm
		public void show_emergency_shuttle_eta(  ) {
			double timeleft = 0;

			
			if ( GlobalVars.emergency_shuttle.online && GlobalVars.emergency_shuttle.location < 2 ) {
				timeleft = GlobalVars.emergency_shuttle.timeleft();

				if ( timeleft != 0 ) {
					Interface13.Stat( null, "ETA-" + timeleft / 60 % 60 + ":" + GlobalFuncs.add_zero( String13.NumberToString( timeleft % 60 ), 2 ) );
				}
			}
			return;
		}

		// Function from file: silicon.dm
		public void show_station_time(  ) {
			Interface13.Stat( null, "Station Time: " + GlobalFuncs.worldtime2text() );
			return;
		}

		// Function from file: silicon.dm
		public virtual bool show_malf_ai(  ) {
			return false;
		}

		// Function from file: silicon.dm
		public void show_system_integrity(  ) {
			
			if ( this.stat == 0 ) {
				Interface13.Stat( null, "System integrity: " + this.system_integrity() + "%" );
			} else {
				Interface13.Stat( null, "Systems nonfunctional" );
			}
			return;
		}

		// Function from file: silicon.dm
		public virtual dynamic system_integrity(  ) {
			return Num13.Floor( Convert.ToDouble( this.health / this.maxHealth * 100 ) );
		}

		// Function from file: silicon.dm
		public void damage_mob( bool? brute = null, bool? fire = null, bool? tox = null ) {
			brute = brute ?? false;
			fire = fire ?? false;
			tox = tox ?? false;

			return;
		}

		// Function from file: silicon.dm
		public void queueAlarm( string message = null, string type = null, bool? incoming = null ) {
			incoming = incoming ?? true;

			bool in_cooldown = false;
			dynamic msg = null;
			string msg2 = null;
			dynamic msg3 = null;
			string msg4 = null;
			int? i = null;
			int? i2 = null;

			in_cooldown = this.alarms_to_show.len > 0 || this.alarms_to_clear.len > 0;

			if ( incoming == true ) {
				this.alarms_to_show.Add( message );
				this.alarm_types_show[type] += 1;
			} else {
				this.alarms_to_clear.Add( message );
				this.alarm_types_clear[type] += 1;
			}

			if ( !in_cooldown ) {
				Task13.Schedule( 100, (Task13.Closure)(() => {
					
					if ( this.alarms_to_show.len < 5 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( this.alarms_to_show )) {
							msg = _a;
							
							GlobalFuncs.to_chat( this, msg );
						}
					} else if ( this.alarms_to_show.len != 0 ) {
						msg2 = "--- ";

						if ( Lang13.Bool( this.alarm_types_show["Motion"] ) ) {
							msg2 += "MOTION: " + this.alarm_types_show["Motion"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Fire"] ) ) {
							msg2 += "FIRE: " + this.alarm_types_show["Fire"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Atmosphere"] ) ) {
							msg2 += "ATMOSPHERE: " + this.alarm_types_show["Atmosphere"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Power"] ) ) {
							msg2 += "POWER: " + this.alarm_types_show["Power"] + " alarms detected. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Camera"] ) ) {
							msg2 += "CAMERA: " + this.alarm_types_show["Power"] + " alarms detected. - ";
						}
						msg2 += new Txt( "<A href=?src=" ).Ref( this ).str( ";showalerts=1'>[Show Alerts]</a>" ).ToString();
						GlobalFuncs.to_chat( this, msg2 );
					}

					if ( this.alarms_to_clear.len < 3 ) {
						
						foreach (dynamic _b in Lang13.Enumerate( this.alarms_to_clear )) {
							msg3 = _b;
							
							GlobalFuncs.to_chat( this, msg3 );
						}
					} else if ( this.alarms_to_clear.len != 0 ) {
						msg4 = "--- ";

						if ( Lang13.Bool( this.alarm_types_clear["Motion"] ) ) {
							msg4 += "MOTION: " + this.alarm_types_clear["Motion"] + " alarms cleared. - ";
						}

						if ( Lang13.Bool( this.alarm_types_clear["Fire"] ) ) {
							msg4 += "FIRE: " + this.alarm_types_clear["Fire"] + " alarms cleared. - ";
						}

						if ( Lang13.Bool( this.alarm_types_clear["Atmosphere"] ) ) {
							msg4 += "ATMOSPHERE: " + this.alarm_types_clear["Atmosphere"] + " alarms cleared. - ";
						}

						if ( Lang13.Bool( this.alarm_types_clear["Power"] ) ) {
							msg4 += "POWER: " + this.alarm_types_clear["Power"] + " alarms cleared. - ";
						}

						if ( Lang13.Bool( this.alarm_types_show["Camera"] ) ) {
							msg4 += "CAMERA: " + this.alarm_types_show["Power"] + " alarms detected. - ";
						}
						msg4 += new Txt( "<A href=?src=" ).Ref( this ).str( ";showalerts=1'>[Show Alerts]</a>" ).ToString();
						GlobalFuncs.to_chat( this, msg4 );
					}
					this.alarms_to_show = new ByTable();
					this.alarms_to_clear = new ByTable();
					i = null;
					i = 1;

					while (( i ??0) < this.alarm_types_show.len) {
						this.alarm_types_show[i] = 0;
						i++;
					}
					i2 = null;
					i2 = 1;

					while (( i2 ??0) < this.alarm_types_clear.len) {
						this.alarm_types_clear[i2] = 0;
						i2++;
					}
					return;
				}));
			}
			return;
		}

		// Function from file: silicon.dm
		public dynamic write_laws(  ) {
			dynamic text = null;

			
			if ( Lang13.Bool( this.laws ) ) {
				text = this.laws.write_laws();
				return text;
			}
			return null;
		}

		// Function from file: silicon.dm
		public virtual void show_laws( bool? everyone = null ) {
			return;
		}

		// Function from file: silicon.dm
		public virtual bool triggerAlarm( string _class = null, dynamic A = null, dynamic O = null, Ent_Static alarmsource = null ) {
			return false;
		}

		// Function from file: silicon.dm
		public virtual bool cancelAlarm( string _class = null, dynamic A = null, Ent_Static origin = null ) {
			return false;
		}

		// Function from file: silicon.dm
		public override ByTable GetAccess(  ) {
			return GlobalFuncs.get_all_accesses();
		}

		// Function from file: silicon.dm
		public override bool hasFullAccess(  ) {
			return true;
		}

		// Function from file: say.dm
		public override bool say_understands( Ent_Dynamic other = null, Language speaking = null ) {
			
			if ( !( speaking != null ) ) {
				
				if ( other != null ) {
					other = other.GetSource();
				}

				if ( other is Mob_Living_Carbon ) {
					return true;
				}

				if ( other is Mob_Living_Silicon ) {
					return true;
				}

				if ( other is Mob_Living_Carbon_Brain ) {
					return true;
				}

				if ( other is Mob_Living_SimpleAnimal ) {
					return true;
				}
			}
			return base.say_understands( other, speaking );
		}

		// Function from file: say.dm
		public override void treat_speech( Game_Data speech = null, bool? genesay = null ) {
			genesay = genesay ?? false;

			base.treat_speech( speech, genesay );
			((dynamic)speech).message_classes.Add( "siliconsay" );
			return;
		}

		// Function from file: say.dm
		public override bool handle_inherent_channels( Game_Data speech = null, string message_mode = null ) {
			bool _default = false;

			_default = base.handle_inherent_channels( speech, message_mode );

			if ( _default ) {
				return _default;
			}

			if ( message_mode == "binary" ) {
				
				if ( this.binarycheck() ) {
					this.robot_talk( ((dynamic)speech).message );
					return true;
				}
			}
			return false;
		}

		// Function from file: say.dm
		public override string get_message_mode( dynamic message = null ) {
			string _default = null;

			_default = base.get_message_mode( (object)(message) );

			if ( base.get_message_mode( (object)(message) ) == "headset" ) {
				return "robot";
			} else {
				return _default;
			}
		}

		// Function from file: say.dm
		public override int radio( Game_Data speech = null, string message_mode = null ) {
			int _default = 0;

			_default = base.radio( speech, message_mode );

			if ( _default != 0 ) {
				return _default;
			}

			if ( message_mode == "robot" ) {
				
				if ( this.v_radio != null ) {
					this.v_radio.talk_into( speech );
				}
				return 2;
			} else {
				Interface13.Stat( null, GlobalVars.radiochannels.Contains( message_mode ) );

				if ( message_mode == "robot" ) {
					
					if ( this.v_radio != null ) {
						this.v_radio.talk_into( speech, message_mode );
						return 3;
					}
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public override bool lingcheck(  ) {
			return false;
		}

		// Function from file: say.dm
		public override bool binarycheck(  ) {
			return true;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			return base.say( (object)(message), "R", radio );
		}

		// Function from file: say.dm
		public override string say_quote( dynamic text = null ) {
			string ending = null;

			ending = String13.SubStr( text, Lang13.Length( text ), 0 );

			if ( ending == "?" ) {
				return "queries, " + text;
			} else if ( ending == "!" ) {
				return "declares, " + text;
			}
			return "states, " + text;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			
			if ( this.mind != null && GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				((GameMode)GlobalVars.ticker.mode).remove_cultist( this.mind, true );
				((GameMode)GlobalVars.ticker.mode).remove_revolutionary( this.mind, true );
			}
			base.Login();
			return null;
		}

		// Function from file: death.dm
		public override void dust(  ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			new Obj_Effect_Decal_Remains_Robot( this.loc );
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalFuncs.robogibs( this.loc, this.viruses );
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: handle_hypothermia.dm
		public override int undergoing_hypothermia(  ) {
			return 0;
		}

		// Function from file: silicon.dm
		[Verb]
		[VerbInfo( name: "Check Known Languages", group: "IC", access: VerbAccess.IsUser )]
		public override void check_languages(  ) {
			string dat = null;
			Language L = null;
			string default_str = null;
			bool synth = false;

			dat = "<b><font size = 5>Known Languages</font></b><br/><br/>";

			if ( this.default_language != null ) {
				dat += new Txt( "Current default language: " ).item( this.default_language ).str( " - <a href='byond://?src=" ).Ref( this ).str( ";default_lang=reset'>reset</a><br/><br/>" ).ToString();
			}

			foreach (dynamic _a in Lang13.Enumerate( this.languages, typeof(Language) )) {
				L = _a;
				
				default_str = null;

				if ( L == this.default_language ) {
					default_str = new Txt( " - default - <a href='byond://?src=" ).Ref( this ).str( ";default_lang=reset'>reset</a>" ).ToString();
				} else {
					default_str = new Txt( " - <a href='byond://?src=" ).Ref( this ).str( ";default_lang=" ).item( L ).str( "'>set default</a>" ).ToString();
				}
				Interface13.Stat( null, this.speech_synthesizer_langs.Contains( L ) );
				synth = L == this.default_language;
				dat += "<b>" + L.name + " (:" + L.key + ")</b>" + ( synth ? default_str : null ) + "<br/>Speech Synthesizer: <i>" + ( synth ? "YES" : "NOT SUPPORTED" ) + "</i><br/>" + L.desc + "<br/><br/>";
			}
			Interface13.Browse( this, dat, "window=checklanguage" );
			return;
		}

		// Function from file: default_language.dm
		[Verb]
		[VerbInfo( name: "Set Default Language", group: "IC" )]
		[VerbArg( 1, InputType.Null | InputType.Any, VerbArgFilter.FromMemberVar, "speech_synthesizer_langs" )]
		public override void set_default_language( dynamic language = null ) {
			base.set_default_language( (object)(language) );
			return;
		}

	}

}