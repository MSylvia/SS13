// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider : Mob_Living_SimpleAnimal_Hostile_Poison {

		public int busy = 0;
		public int? playable_spider = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "guard";
			this.icon_dead = "guard_dead";
			this.speak_emote = new ByTable(new object [] { "chitters" });
			this.emote_hear = new ByTable(new object [] { "chitters" });
			this.speak_chance = 5;
			this.turns_per_move = 5;
			this.butcher_results = new ByTable().Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Spider), 2 ).Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Spiderleg), 8 );
			this.response_help = "pets";
			this.response_disarm = "gently pushes aside";
			this.maxHealth = 200;
			this.health = 200;
			this.melee_damage_lower = 15;
			this.melee_damage_upper = 20;
			this.faction = new ByTable(new object [] { "spiders" });
			this.pass_flags = 1;
			this.move_to_delay = 6;
			this.ventcrawler = 2;
			this.attacktext = "bites";
			this.attack_sound = "sound/weapons/bite.ogg";
			this.unique_name = true;
			this.gold_core_spawnable = 1;
			this.icon_state = "guard";
			this.see_in_dark = 4;
			this.see_invisible = 5;
		}

		public Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: giant_spider.dm
		public override void handle_temperature_damage(  ) {
			
			if ( Convert.ToDouble( this.bodytemperature ) < this.minbodytemp ) {
				this.adjustBruteLoss( 20 );
			} else if ( Convert.ToDouble( this.bodytemperature ) > this.maxbodytemp ) {
				this.adjustBruteLoss( 20 );
			}
			return;
		}

		// Function from file: giant_spider.dm
		public override bool handle_automated_action(  ) {
			
			if ( !base.handle_automated_action() ) {
				return false;
			}

			if ( this.AIStatus == 2 ) {
				
				if ( !( this.busy != 0 ) && Rand13.PercentChance( 1 ) ) {
					this.stop_automated_movement = true;
					this.Goto( Rand13.PickFromTable( GlobalFuncs.ultra_range( 20, this, true ) ), this.move_to_delay );
					Task13.Schedule( 50, (Task13.Closure)(() => {
						this.stop_automated_movement = false;
						Map13.Walk( this, 0, 0 );
						return;
					}));
				}
				return true;
			}
			return false;
		}

		// Function from file: giant_spider.dm
		public void humanize_spider( Mob user = null ) {
			string spider_ask = null;

			
			if ( Lang13.Bool( this.key ) || !Lang13.Bool( this.playable_spider ) ) {
				return;
			}
			spider_ask = Interface13.Alert( "Become a spider?", "Are you australian?", "Yes", "No" );

			if ( spider_ask == "No" || !( this != null ) || Lang13.Bool( GlobalFuncs.qdeleted( this ) ) ) {
				return;
			}

			if ( Lang13.Bool( this.key ) ) {
				user.WriteMsg( "<span class='notice'>Someone else already took this spider.</span>" );
				return;
			}
			this.key = user.key;
			return;
		}

		// Function from file: giant_spider.dm
		public override void attack_ghost( Mob user = null ) {
			this.humanize_spider( user );
			return;
		}

		// Function from file: giant_spider.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Mob ghost = null;

			
			if ( Lang13.Bool( href_list["activate"] ) ) {
				ghost = Task13.User;

				if ( ghost is Mob_Dead_Observer && Lang13.Bool( this.playable_spider ) ) {
					this.humanize_spider( ghost );
				}
			}
			return null;
		}

		// Function from file: giant_spider.dm
		[Verb]
		[VerbInfo( name: "Lay Web", desc: "Spread a sticky web to slow down prey.", group: "Spider" )]
		public void Web(  ) {
			Ent_Static T = null;

			T = this.loc;

			if ( this.stat == 2 ) {
				return;
			}

			if ( this.busy != 1 ) {
				this.busy = 1;
				this.visible_message( new Txt( "<span class='notice'>" ).the( this ).item().str( " begins to secrete a sticky substance.</span>" ).ToString() );
				this.stop_automated_movement = true;

				if ( GlobalFuncs.do_after( this, 40, null, T ) ) {
					
					if ( this.busy == 1 && this.loc == T ) {
						new Obj_Effect_Spider_Stickyweb( T );
					}
				}
				this.busy = 0;
				this.stop_automated_movement = false;
			}
			return;
		}

	}

}