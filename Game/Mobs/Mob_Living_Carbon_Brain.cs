// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Brain : Mob_Living_Carbon {

		public dynamic container = null;
		public int timeofhostdeath = 0;
		public double emp_damage = 0;
		public bool alert = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_butcher = false;
			this.immune_to_ssd = true;
			this.use_me = false;
			this.hasmouth = false;
			this.universal_speak = true;
			this.universal_understand = true;
			this.icon = "icons/obj/surgery.dmi";
			this.icon_state = "brain1";
		}

		// Function from file: brain.dm
		public Mob_Living_Carbon_Brain ( dynamic loc = null ) : base( (object)(loc) ) {
			Reagents R = null;

			R = new Reagents( 1000 );
			this.reagents = R;
			R.my_atom = this;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: say.dm
		public override bool lingcheck(  ) {
			return false;
		}

		// Function from file: say.dm
		public override int radio( Game_Data speech = null, string message_mode = null ) {
			dynamic R = null;

			
			if ( Lang13.Bool( message_mode ) && this.container is Obj_Item_Device_Mmi_RadioEnabled ) {
				R = this.container;

				if ( Lang13.Bool( R.radio ) ) {
					((Obj_Item)R.radio).talk_into( speech );
					return 3;
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			
			if ( !( Lang13.Bool( this.container ) && ( this.container is Obj_Item_Device_Mmi || this.container is Obj_Item_Device_Mmi_Posibrain ) ) ) {
				return false;
			} else if ( Rand13.PercentChance( ((int)( this.emp_damage * 4 )) ) ) {
				
				if ( Rand13.PercentChance( 10 ) ) {
					return false;
				} else {
					message = GlobalFuncs.Gibberish( message, this.emp_damage * 6 );
				}
			}
			return base.say( (object)(message), speaking, radio );
		}

		// Function from file: life.dm
		public bool handle_regular_hud_updates(  ) {
			
			if ( this.stat == 2 || false ) {
				this.sight |= GlobalVars.SEE_TURFS;
				this.sight |= GlobalVars.SEE_MOBS;
				this.sight |= GlobalVars.SEE_OBJS;
				this.see_in_dark = 8;
				this.see_invisible = 45;
			} else if ( this.stat != 2 ) {
				this.sight &= 65519;
				this.sight &= 65531;
				this.sight &= 65527;
				this.see_in_dark = 2;
				this.see_invisible = 25;
			}

			if ( this.healths != null ) {
				
				if ( this.stat != 2 ) {
					
					dynamic _a = this.health; // Was a switch-case, sorry for the mess.
					if ( 100<=_a&&_a<=Double.PositiveInfinity ) {
						((dynamic)this.healths).icon_state = "health0";
					} else if ( 80<=_a&&_a<=100 ) {
						((dynamic)this.healths).icon_state = "health1";
					} else if ( 60<=_a&&_a<=80 ) {
						((dynamic)this.healths).icon_state = "health2";
					} else if ( 40<=_a&&_a<=60 ) {
						((dynamic)this.healths).icon_state = "health3";
					} else if ( 20<=_a&&_a<=40 ) {
						((dynamic)this.healths).icon_state = "health4";
					} else if ( 0<=_a&&_a<=20 ) {
						((dynamic)this.healths).icon_state = "health5";
					} else {
						((dynamic)this.healths).icon_state = "health6";
					}
				} else {
					((dynamic)this.healths).icon_state = "health7";
				}
			}

			if ( this.pullin != null ) {
				((dynamic)this.pullin).icon_state = "pull" + ( this.pulling != null ? true : false );
			}

			if ( this.client != null ) {
				this.client.screen.Remove( GlobalVars.global_hud.blurry, GlobalVars.global_hud.druggy, GlobalVars.global_hud.vimpaired );
			}

			if ( this.blind != null && this.stat != 2 ) {
				
				if ( Lang13.Bool( this.blinded ) ) {
					((dynamic)this.blind).layer = 18;
				} else {
					((dynamic)this.blind).layer = 0;

					if ( ( this.disabilities & 1 ) != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.vimpaired );
					}

					if ( Lang13.Bool( this.eye_blurry ) ) {
						this.client.screen.Add( GlobalVars.global_hud.blurry );
					}

					if ( this.druggy != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.druggy );
					}
				}
			}

			if ( this.stat != 2 ) {
				
				if ( Lang13.Bool( this.machine ) ) {
					
					if ( !( ((Ent_Static)this.machine).check_eye( this ) == true ) ) {
						this.reset_view( null );
					}
				} else if ( this.client != null && !this.client.adminobs ) {
					this.reset_view( null );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public bool handle_regular_status_updates(  ) {
			this.updatehealth();

			if ( this.stat == 2 ) {
				this.blinded = 1;
				this.silent = 0;
			} else {
				
				if ( !Lang13.Bool( this.container ) && ( Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_dead ) || Game13.time - this.timeofhostdeath > Convert.ToDouble( GlobalVars.config.revival_brain_life ) ) ) {
					this.death();
					this.blinded = 1;
					this.silent = 0;
					return true;
				}

				if ( this.emp_damage != 0 ) {
					
					if ( !( Lang13.Bool( this.container ) && this.container is Obj_Item_Device_Mmi ) ) {
						this.emp_damage = 0;
					} else {
						this.emp_damage = Num13.Round( this.emp_damage, 1 );
					}

					dynamic _a = this.emp_damage; // Was a switch-case, sorry for the mess.
					if ( 31<=_a&&_a<=Double.PositiveInfinity ) {
						this.emp_damage = 30;
					} else if ( 21<=_a&&_a<=30 ) {
						this.eye_blind = 1;
						this.blinded = 1;
						this.ear_deaf = 1;
						this.silent = 1;

						if ( !this.alert ) {
							this.emote( "alarm" );
							GlobalFuncs.to_chat( this, "<span class='warning'>Major electrical distruption detected: System rebooting.</span>" );
							this.alert = true;
						}

						if ( Rand13.PercentChance( 75 ) ) {
							this.emp_damage -= 1;
						}
					} else if ( 11<=_a&&_a<=19 ) {
						this.eye_blurry = 1;
						this.ear_damage = 1;

						if ( !this.alert ) {
							this.emote( "alert" );
							GlobalFuncs.to_chat( this, "<span class='warning'>Primary systems are now online.</span>" );
							this.alert = true;
						}

						if ( Rand13.PercentChance( 50 ) ) {
							this.emp_damage -= 1;
						}
					} else if ( 2<=_a&&_a<=9 ) {
						
						if ( !this.alert ) {
							this.emote( "notice" );
							GlobalFuncs.to_chat( this, "<span class='warning'>System reboot nearly complete.</span>" );
							this.alert = true;
						}

						if ( Rand13.PercentChance( 25 ) ) {
							this.emp_damage -= 1;
						}
					} else if ( _a==20 ) {
						this.alert = false;
						this.blinded = 0;
						this.eye_blind = 0;
						this.ear_deaf = 0;
						this.silent = 0;
						this.emp_damage -= 1;
					} else if ( _a==10 ) {
						this.alert = false;
						this.eye_blurry = 0;
						this.ear_damage = 0;
						this.emp_damage -= 1;
					} else if ( _a==1 ) {
						this.alert = false;
						GlobalFuncs.to_chat( this, "<span class='warning'>All systems restored.</span>" );
						this.emp_damage -= 1;
					}
				}

				if ( this.stunned != 0 ) {
					this.AdjustStunned( -1 );
				}

				if ( this.weakened != 0 ) {
					this.weakened = Num13.MaxInt( ((int)( this.weakened - 1 )), 0 );
				}

				if ( Lang13.Bool( this.stuttering ) ) {
					this.stuttering = Num13.MaxInt( Convert.ToInt32( this.stuttering - 1 ), 0 );
				}

				if ( this.silent != 0 ) {
					this.silent = Num13.MaxInt( this.silent - 1, 0 );
				}

				if ( this.druggy != 0 ) {
					this.druggy = Num13.MaxInt( this.druggy - 1, 0 );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public void handle_chemicals_in_body(  ) {
			
			if ( Lang13.Bool( this.reagents ) ) {
				((Reagents)this.reagents).metabolize( this );
			}
			this.confused = Num13.MaxInt( 0, this.confused - 1 );

			if ( this.resting != 0 ) {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 5 );
			} else {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 1 );
			}
			this.updatehealth();
			return;
		}

		// Function from file: life.dm
		public void handle_temperature_damage( bool body_part = false, double? exposed_temperature = null, double exposed_intensity = 0 ) {
			int discomfort = 0;
			int discomfort2 = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}

			if ( ( exposed_temperature ??0) > Convert.ToDouble( this.bodytemperature ) ) {
				discomfort = Num13.MinInt( ((int)( Math.Abs( ( exposed_temperature ??0) - Convert.ToDouble( this.bodytemperature ) ) * exposed_intensity / 2000000 )), 1 );
				this.adjustFireLoss( discomfort * 20 );
			} else {
				discomfort2 = Num13.MinInt( ((int)( Math.Abs( ( exposed_temperature ??0) - Convert.ToDouble( this.bodytemperature ) ) * exposed_intensity / 2000000 )), 1 );
				this.adjustFireLoss( discomfort2 * 5 );
			}
			return;
		}

		// Function from file: life.dm
		public void handle_environment( GasMixture environment = null ) {
			double environment_heat_capacity = 0;
			dynamic heat_turf = null;
			bool transfer_coefficient = false;

			
			if ( !( environment != null ) || Lang13.Bool( this.flags & 128 ) ) {
				return;
			}
			environment_heat_capacity = environment.heat_capacity();

			if ( GlobalFuncs.get_turf( this ) is Tile_Space ) {
				heat_turf = GlobalFuncs.get_turf( this );
				environment_heat_capacity = heat_turf.heat_capacity;
			}

			if ( ( environment.temperature ??0) > 323.41 || ( environment.temperature ??0) < 283.41 ) {
				transfer_coefficient = true;
				this.handle_temperature_damage( true, environment.temperature, environment_heat_capacity * ( transfer_coefficient ?1:0) );
			}

			if ( this.stat == 2 ) {
				this.bodytemperature += ( ( environment.temperature ??0) - Convert.ToDouble( this.bodytemperature ) ) * environment_heat_capacity * 0.1 / ( environment_heat_capacity + 270000 );
			}
			return;
		}

		// Function from file: life.dm
		public void handle_mutations_and_radiation(  ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( this.radiation != 0 ) {
				
				if ( this.radiation > 100 ) {
					this.radiation = 100;

					if ( !Lang13.Bool( this.container ) ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>You feel weak.</span>" );
					} else {
						GlobalFuncs.to_chat( this, "<span class='warning'>STATUS: CRITICAL AMOUNTS OF RADIATION DETECTED.</span>" );
					}
				}

				dynamic _a = this.radiation; // Was a switch-case, sorry for the mess.
				if ( 1<=_a&&_a<=49 ) {
					this.radiation--;

					if ( Rand13.PercentChance( 25 ) ) {
						this.adjustToxLoss( 1 );
						this.updatehealth();
					}
				} else if ( 50<=_a&&_a<=74 ) {
					this.radiation -= 2;
					this.adjustToxLoss( 1 );

					if ( Rand13.PercentChance( 5 ) ) {
						this.radiation -= 5;

						if ( !Lang13.Bool( this.container ) ) {
							GlobalFuncs.to_chat( this, "<span class='warning'>You feel weak.</span>" );
						} else {
							GlobalFuncs.to_chat( this, "<span class='warning'>STATUS: DANGEROUS LEVELS OF RADIATION DETECTED.</span>" );
						}
					}
					this.updatehealth();
				} else if ( 75<=_a&&_a<=100 ) {
					this.radiation -= 3;
					this.adjustToxLoss( 3 );
					this.updatehealth();
				}
			}
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			GasMixture environment = null;

			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();

			if ( this.stat != 2 ) {
				this.handle_mutations_and_radiation();
				this.handle_chemicals_in_body();
			}

			if ( this.loc != null ) {
				environment = this.loc.return_air();
			}
			this.blinded = null;

			if ( environment != null ) {
				this.handle_environment( environment );
			}
			this.handle_regular_status_updates();
			this.update_canmove();

			if ( this.client != null ) {
				this.handle_regular_hud_updates();
			}
			return false;
		}

		// Function from file: emote.dm
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			type = type ?? 1;

			int t1 = 0;
			dynamic M = null;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( !( Lang13.Bool( this.container ) && this.container is Obj_Item_Device_Mmi ) ) {
				return;
			}

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( String13.FindIgnoreCase( act, "s", -1, 0 ) != 0 && !( String13.FindIgnoreCase( act, "_", -2, 0 ) != 0 ) ) {
				act = String13.SubStr( act, 1, Lang13.Length( act ) );
			}

			if ( this.stat == 2 ) {
				return;
			}

			dynamic _a = act; // Was a switch-case, sorry for the mess.
			if ( _a=="me" ) {
				
				if ( this.silent != 0 ) {
					return;
				}

				if ( this.client != null ) {
					
					if ( ( this.client.prefs.muted & 1 ) != 0 ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>You cannot send IC messages (muted).</span>" );
						return;
					}

					if ( this.client.handle_spam_prevention( message, 1 ) ) {
						return;
					}
				}

				if ( Lang13.Bool( this.stat ) ) {
					return;
				}

				if ( !Lang13.Bool( message ) ) {
					return;
				}
				this.custom_emote( type, message ); return;
			} else if ( _a=="custom" ) {
				this.custom_emote( type, message ); return;
			} else if ( _a=="alarm" ) {
				GlobalFuncs.to_chat( this, "You sound an alarm." );
				message = "<B>" + this + "</B> sounds an alarm.";
				type = 2;
			} else if ( _a=="alert" ) {
				GlobalFuncs.to_chat( this, "You let out a distressed noise." );
				message = "<B>" + this + "</B> lets out a distressed noise.";
				type = 2;
			} else if ( _a=="notice" ) {
				GlobalFuncs.to_chat( this, "You play a loud tone." );
				message = "<B>" + this + "</B> plays a loud tone.";
				type = 2;
			} else if ( _a=="flash" ) {
				message = "The lights on <B>" + this + "</B> flash quickly.";
				type = 1;
			} else if ( _a=="blink" ) {
				message = "<B>" + this + "</B> blinks.";
				type = 1;
			} else if ( _a=="whistle" ) {
				GlobalFuncs.to_chat( this, "You whistle." );
				message = "<B>" + this + "</B> whistles.";
				type = 2;
			} else if ( _a=="beep" ) {
				GlobalFuncs.to_chat( this, "You beep." );
				message = "<B>" + this + "</B> beeps.";
				type = 2;
			} else if ( _a=="boop" ) {
				GlobalFuncs.to_chat( this, "You boop." );
				message = "<B>" + this + "</B> boops.";
				type = 2;
			} else if ( _a=="help" ) {
				GlobalFuncs.to_chat( this, "alarm,alert,notice,flash,blink,whistle,beep,boop" );
			} else {
				GlobalFuncs.to_chat( this, "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
			}

			if ( Lang13.Bool( message ) ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]EMOTE: " + ( "" + this.name + "/" + this.key + " (@" + this.x + "," + this.y + "," + this.z + "): " + message ) ) );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
					M = _b;
					

					if ( !Lang13.Bool( M.client ) || M is Mob_NewPlayer ) {
						continue;
					}

					if ( Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client.prefs.toggles & 128 ) && !false ) {
						M.show_message( message );
					}
				}

				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _c;
						
						O.show_message( message, type );
					}
				} else if ( ( ( type ??0) & 2 ) != 0 ) {
					
					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchHearers( null, this.loc ) )) {
						O2 = _d;
						
						O2.show_message( message, type );
					}
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;

			if ( Lang13.Bool( this.container ) && this.container is Obj_Item_Device_Mmi ) {
				GlobalFuncs.qdel( this.container );
			}

			if ( this.loc != null ) {
				
				if ( this.loc is Obj_Item_Organ_Brain ) {
					GlobalFuncs.qdel( this.loc );
				}
			}
			GlobalFuncs.anim( null, this, "icons/mob/mob.dmi", null, null, 15 );
			GlobalFuncs.gibs( this.loc, this.viruses, this.dna );
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			
			if ( this.stat == 2 ) {
				return null;
			}

			if ( !( gibbed == true ) && Lang13.Bool( this.container ) && this.container is Obj_Item_Device_Mmi ) {
				this.container.OnMobDeath( this );
			}
			this.stat = 2;

			if ( this.blind != null ) {
				((dynamic)this.blind).layer = 0;
			}
			this.sight |= 28;
			this.see_in_dark = 8;
			this.see_invisible = 45;
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );
			}
			return base.death( gibbed );
		}

		// Function from file: brain.dm
		public override void teleport_to( dynamic A = null ) {
			((Ent_Dynamic)this.container).forceMove( GlobalFuncs.get_turf( A ) );
			return;
		}

		// Function from file: brain.dm
		public override bool say_understands( Ent_Dynamic other = null, Language speaking = null ) {
			
			if ( other != null ) {
				other = other.GetSource();
			}

			if ( other is Mob_Living_Silicon_Ai ) {
				
				if ( !( Lang13.Bool( this.container ) && this.container is Obj_Item_Device_Mmi ) ) {
					return false;
				} else {
					return true;
				}
			}

			if ( other is Mob_Living_Silicon_Decoy ) {
				
				if ( !( Lang13.Bool( this.container ) && this.container is Obj_Item_Device_Mmi ) ) {
					return false;
				} else {
					return true;
				}
			}

			if ( other is Mob_Living_Silicon_Pai ) {
				
				if ( !( Lang13.Bool( this.container ) && this.container is Obj_Item_Device_Mmi ) ) {
					return false;
				} else {
					return true;
				}
			}

			if ( other is Mob_Living_Silicon_Robot ) {
				
				if ( !( Lang13.Bool( this.container ) && this.container is Obj_Item_Device_Mmi ) ) {
					return false;
				} else {
					return true;
				}
			}

			if ( other is Mob_Living_Carbon_Human ) {
				return true;
			}

			if ( other is Mob_Living_Carbon_Slime ) {
				return true;
			}
			return base.say_understands( other, speaking );
		}

		// Function from file: brain.dm
		public override bool update_canmove(  ) {
			
			if ( this.in_contents_of( typeof(Obj_Mecha) ) ) {
				this.canmove = true;
				this.use_me = true;
			} else {
				this.canmove = false;
			}
			return this.canmove;
		}

		// Function from file: brain.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( Lang13.Bool( this.key ) ) {
				
				if ( this.stat != 2 ) {
					this.death( true );
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You can't commit suicide before the game starts!</span>" );
				return;
			}

			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already dead!</span>" );
				return;
			}

			if ( this.suiciding == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already committing suicide! Be patient!</span>" );
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( confirm == "Yes" ) {
				this.suiciding = true;

				if ( !Lang13.Bool( this.container ) ) {
					this.visible_message( "<span class='danger'>" + this + "'s brain is growing dull and lifeless. It looks like it has lost the will to live.</span>" );
				}
				Task13.Schedule( 50, (Task13.Closure)(() => {
					this.death( false );
					this.suiciding = false;
					return;
				}));
			}
			return;
		}

	}

}