// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Brain : Mob_Living_Carbon {

		public Obj_Item_Device_Mmi container = null;
		public int timeofhostdeath = 0;
		public int emp_damage = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.stat = 2;
		}

		// Function from file: brain.dm
		public Mob_Living_Carbon_Brain ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_Organ_Internal_Brain OB = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( loc is Tile ) {
				OB = new Obj_Item_Organ_Internal_Brain( loc );
				this.loc = OB;
				OB.brainmob = this;
			}
			return;
		}

		// Function from file: say.dm
		public override int lingcheck(  ) {
			return 0;
		}

		// Function from file: say.dm
		public override int radio( dynamic message = null, string message_mode = null, ByTable spans = null ) {
			Obj_Item_Device_Mmi R = null;

			
			if ( Lang13.Bool( message_mode ) && this.container is Obj_Item_Device_Mmi ) {
				R = this.container;

				if ( R.radio != null ) {
					R.radio.talk_into( this, message, null, spans );
					return 3;
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			
			if ( !( this.container != null && this.container is Obj_Item_Device_Mmi ) ) {
				return false;
			} else {
				
				if ( Rand13.PercentChance( this.emp_damage * 4 ) ) {
					
					if ( Rand13.PercentChance( 10 ) ) {
						return false;
					} else {
						message = GlobalFuncs.Gibberish( message, this.emp_damage * 6 );
					}
				}
				base.say( (object)(message), bubble_type );
			}
			return false;
		}

		// Function from file: life.dm
		public override void handle_changeling(  ) {
			return;
		}

		// Function from file: life.dm
		public override bool become_blind(  ) {
			return false;
		}

		// Function from file: life.dm
		public override void set_blurriness( int amount = 0 ) {
			return;
		}

		// Function from file: life.dm
		public override void set_blindness( int amount = 0 ) {
			return;
		}

		// Function from file: life.dm
		public override void adjust_blurriness( dynamic amount = null ) {
			return;
		}

		// Function from file: life.dm
		public override void adjust_blindness( int amount = 0 ) {
			return;
		}

		// Function from file: life.dm
		public override void blur_eyes( dynamic amount = null ) {
			return;
		}

		// Function from file: life.dm
		public override void blind_eyes( double amount = 0 ) {
			return;
		}

		// Function from file: life.dm
		public override void adjustEarDamage( double damage = 0, int deaf = 0 ) {
			return;
		}

		// Function from file: life.dm
		public override void setEarDamage( int damage = 0, double? deaf = null ) {
			return;
		}

		// Function from file: life.dm
		public override void handle_disabilities(  ) {
			return;
		}

		// Function from file: life.dm
		public override void handle_status_effects(  ) {
			return;
		}

		// Function from file: life.dm
		public void handle_emp_damage(  ) {
			
			if ( this.emp_damage != 0 ) {
				
				if ( this.stat == 2 ) {
					this.emp_damage = 0;
				} else {
					this.emp_damage = Num13.MaxInt( this.emp_damage - 1, 0 );
				}
			}
			return;
		}

		// Function from file: life.dm
		public override void update_stat(  ) {
			dynamic BR = null;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}

			if ( Convert.ToDouble( this.health ) <= ( GlobalVars.config.health_threshold_dead ??0) ) {
				
				if ( this.stat != 2 ) {
					this.death();
				}

				if ( this.container != null && Lang13.Bool( this.container.brain ) ) {
					BR = this.container.brain;
				} else if ( this.loc is Obj_Item_Organ_Internal_Brain ) {
					BR = this.loc;
				}

				if ( Lang13.Bool( BR ) ) {
					BR.damaged_brain = true;
				}
			}
			return;
		}

		// Function from file: life.dm
		public override void handle_environment( GasMixture environment = null ) {
			return;
		}

		// Function from file: life.dm
		public override void handle_mutations_and_radiation(  ) {
			return;
		}

		// Function from file: life.dm
		public override void handle_breathing(  ) {
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			bool _default = false;

			
			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}

			if ( !( this.loc != null ) ) {
				return _default;
			}
			_default = base.Life();
			this.handle_emp_damage();
			return _default;
		}

		// Function from file: emote.dm
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			int t1 = 0;
			dynamic M = null;

			
			if ( !( this.container != null && this.container is Obj_Item_Device_Mmi ) ) {
				return;
			}

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( this.stat == 2 ) {
				return;
			}

			switch ((string)( act )) {
				case "alarm":
					this.WriteMsg( "You sound an alarm." );
					message = "<B>" + this + "</B> sounds an alarm.";
					m_type = 2;
					break;
				case "alert":
					this.WriteMsg( "You let out a distressed noise." );
					message = "<B>" + this + "</B> lets out a distressed noise.";
					m_type = 2;
					break;
				case "beep":
				case "beeps":
					this.WriteMsg( "You beep." );
					message = "<B>" + this + "</B> beeps.";
					m_type = 2;
					break;
				case "blink":
				case "blinks":
					message = "<B>" + this + "</B> blinks.";
					m_type = 1;
					break;
				case "boop":
				case "boops":
					this.WriteMsg( "You boop." );
					message = "<B>" + this + "</B> boops.";
					m_type = 2;
					break;
				case "flash":
					message = "The lights on <B>" + this + "</B> flash quickly.";
					m_type = 1;
					break;
				case "notice":
					this.WriteMsg( "You play a loud tone." );
					message = "<B>" + this + "</B> plays a loud tone.";
					m_type = 2;
					break;
				case "whistle":
				case "whistles":
					this.WriteMsg( "You whistle." );
					message = "<B>" + this + "</B> whistles.";
					m_type = 2;
					break;
				case "help":
					this.WriteMsg( "Help for MMI emotes. You can use these emotes with say \"*emote\":\nalarm, alert, beep, blink, boop, flash, notice, whistle" );
					break;
				default:
					this.WriteMsg( "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
					return;
					break;
			}

			if ( Lang13.Bool( message ) ) {
				GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message );

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
					M = _b;
					

					if ( !Lang13.Bool( M.client ) || M is Mob_NewPlayer ) {
						continue;
					}

					if ( Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client ) && ( M.client.prefs.chat_toggles & 8 ) != 0 && !Map13.FetchViewers( null, this ).Contains( M ) ) {
						M.show_message( message );
					}
				}

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else if ( ( ( m_type ??0) & 2 ) != 0 ) {
					this.audible_message( message );
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( dynamic animation = null ) {
			animation = animation ?? 0;

			
			if ( this.container != null ) {
				GlobalFuncs.qdel( this.container );
			}

			if ( this.loc != null ) {
				
				if ( this.loc is Obj_Item_Organ_Internal_Brain ) {
					GlobalFuncs.qdel( this.loc );
				}
			}
			base.gib( (object)(animation) );
			return null;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			Obj_Item_Device_Mmi mmi = null;

			
			if ( this.stat == 2 ) {
				return false;
			}
			this.stat = 2;

			if ( !( gibbed == true ) && this.container != null ) {
				mmi = this.container;
				mmi.visible_message( "<span class='warning'>" + this + "'s MMI flatlines!</span>", "<span class='italics'>You hear something flatline.</span>" );
				mmi.update_icon();
			}
			return base.death( gibbed, toast );
		}

		// Function from file: brain.dm
		public override void update_damage_hud(  ) {
			return;
		}

		// Function from file: brain.dm
		public override bool flash_eyes( double? intensity = null, bool? override_blindness_check = null, bool? affect_silicon = null, bool? visual = null, Type type = null ) {
			intensity = intensity ?? 1;
			override_blindness_check = override_blindness_check ?? false;
			affect_silicon = affect_silicon ?? false;

			return false;
		}

		// Function from file: brain.dm
		public override bool check_ear_prot(  ) {
			return true;
		}

		// Function from file: brain.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			return;
		}

		// Function from file: brain.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: brain.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			return false;
		}

		// Function from file: brain.dm
		public override void toggle_throw_mode(  ) {
			return;
		}

		// Function from file: brain.dm
		public override bool update_canmove(  ) {
			
			if ( this.in_contents_of( typeof(Obj_Mecha) ) ) {
				this.canmove = true;
			} else {
				this.canmove = false;
			}
			return this.canmove;
		}

		// Function from file: brain.dm
		public override dynamic Destroy(  ) {
			
			if ( Lang13.Bool( this.key ) ) {
				
				if ( this.stat != 2 ) {
					this.death( true );
				}
				this.ghostize();
			}
			this.container = null;
			return base.Destroy();
		}

		// Function from file: atoms_movable.dm
		public override bool forceMove( dynamic destination = null ) {
			
			if ( this.container != null ) {
				this.container.forceMove( destination );
			} else {
				Task13.Crash( "Brainmob without container." );
			}
			return false;
		}

		// Function from file: other_mobs.dm
		public override void create_mob_hud(  ) {
			
			if ( this.client != null && !( this.hud_used != null ) ) {
				this.hud_used = new Hud_Brain( this );
			}
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( !this.canSuicide() ) {
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( !this.canSuicide() ) {
				return;
			}

			if ( confirm == "Yes" ) {
				this.suiciding = 1;
				this.visible_message( "<span class='danger'>" + this + "'s brain is growing dull and lifeless. It looks like it's lost the will to live.</span>", "<span class='userdanger'>" + this + "'s brain is growing dull and lifeless. It looks like it's lost the will to live.</span>" );
				Task13.Schedule( 50, (Task13.Closure)(() => {
					this.death( false );
					return;
				}));
			}
			return;
		}

	}

}