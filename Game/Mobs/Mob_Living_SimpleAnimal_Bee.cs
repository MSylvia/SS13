// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Bee : Mob_Living_SimpleAnimal {

		public double strength = 1;
		public int feral = 0;
		public int mut = 0;
		public int toxic = 0;
		public dynamic target_turf = null;
		public dynamic target = null;
		public Obj_Machinery_Apiary parent = null;
		public Ent_Static my_hydrotray = null;
		public int max_hive_dist = 5;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_dead = "bees1";
			this.size = 1;
			this.can_butcher = false;
			this.pass_flags = 1;
			this.turns_per_move = 6;
			this.minbodytemp = 0;
			this.maxbodytemp = 360;
			this.flying = true;
			this.meat_type = 0;
			this.icon = "icons/obj/apiary_bees_etc.dmi";
			this.icon_state = "bees1";
		}

		// Function from file: bees.dm
		public Mob_Living_SimpleAnimal_Bee ( dynamic loc = null, dynamic new_parent = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.parent = new_parent;
			return;
		}

		// Function from file: bees.dm
		public override bool Life(  ) {
			bool calming = false;
			ByTable calmers = null;
			dynamic this_type = null;
			dynamic check_effect = null;
			int oldferal = 0;
			dynamic M = null;
			int sting_prob = 0;
			Obj_Item worn_suit = null;
			Obj_Item worn_helmet = null;
			dynamic T = null;
			Game_Data B = null;
			Mob_Living_SimpleAnimal_Bee B2 = null;
			double total_bees = 0;
			dynamic T2 = null;
			int tdir = 0;
			Tile move_to = null;
			dynamic my_hydrotray = null;

			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();

			if ( this.stat != 2 ) {
				calming = false;
				calmers = new ByTable(new object [] { 
					typeof(Obj_Effect_Decal_ChemicalPuff), 
					typeof(Obj_Effect_Effect_Smoke_Chem), 
					typeof(Obj_Effect_Effect_Water), 
					typeof(Obj_Effect_Effect_Foam), 
					typeof(Obj_Effect_Effect_Steam), 
					typeof(Obj_Effect_Mist)
				 });

				foreach (dynamic _a in Lang13.Enumerate( calmers )) {
					this_type = _a;
					
					check_effect = Lang13.FindIn( this_type, this.loc );

					if ( Lang13.Bool( check_effect ) && ( ((Reagents)check_effect.reagents).has_reagent( "water" ) || ((Reagents)check_effect.reagents).has_reagent( "holywater" ) ) ) {
						calming = true;
						break;
					}
				}

				if ( calming ) {
					oldferal = this.feral;
					this.feral = -10;

					if ( oldferal > 0 && this.feral <= 0 ) {
						this.visible_message( "<span class='notice'>The bees calm down!</span>" );
						this.target = null;
						this.target_turf = null;
						this.wander = true;
					}
				}
			}

			if ( this.stat == 0 ) {
				M = this.target;
				sting_prob = 100;
				Interface13.Stat( null, Map13.FetchInView( 1, this ).Contains( M ) );

				if ( false ) {
					
					if ( Rand13.PercentChance( Num13.MaxInt( this.feral * 10, 0 ) ) ) {
						
						if ( M is Mob_Living_Carbon_Human ) {
							worn_suit = M.wear_suit;
							worn_helmet = M.head;

							if ( worn_suit != null ) {
								sting_prob -= Num13.MinInt( Convert.ToInt32( worn_suit.armor["bio"] ), 70 );
							}

							if ( worn_helmet != null ) {
								sting_prob -= Num13.MinInt( Convert.ToInt32( worn_helmet.armor["bio"] ), 30 );
							}
						}

						if ( Rand13.PercentChance( sting_prob ) && ( Lang13.Bool( M.stat ) == false || Lang13.Bool( M.stat ) == true && Rand13.PercentChance( 25 ) ) ) {
							((Mob_Living)M).apply_damage( Num13.MinInt( ((int)( this.strength )), 2 ) + this.mut, "brute" );
							((Mob_Living)M).apply_damage( Num13.Round( this.feral / 5, 1 ) * Num13.MaxInt( ((int)( Num13.Round( this.strength / 10, 1 ) )), 1 ) + this.toxic, "tox" );
							GlobalFuncs.to_chat( M, "<span class='warning'>You have been stung!</span>" );
							((Mob)M).flash_pain();
						}
					}
				}

				if ( Lang13.Bool( this.target ) && Rand13.PercentChance( 10 ) ) {
					this.feral++;
				}

				if ( this.feral > 0 ) {
					
					if ( Rand13.PercentChance( this.feral * 10 ) ) {
						this.feral -= 1;
					}
				} else {
					
					if ( this.feral < 0 ) {
						this.feral += 1;
					}

					if ( Lang13.Bool( this.target ) ) {
						this.target = null;
						this.target_turf = null;
					}

					if ( this.strength > 5 ) {
						T = GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInRangeExcludeThis( 1, this ) ) );
						B = GlobalFuncs.getFromPool( typeof(Mob_Living_SimpleAnimal_Bee), T );
						((dynamic)B).strength = Rand13.Int( 1, 5 );
						this.strength -= Convert.ToDouble( ((dynamic)B).strength );

						if ( this.strength <= 5 ) {
							this.icon_state = "bees" + this.strength;
						}
						((dynamic)B).icon_state = "bees" + ((dynamic)B).strength;

						if ( this.parent != null ) {
							((dynamic)B).parent = this.parent;
							this.parent.owned_bee_swarms.Add( B );
						}
					}
				}

				if ( Rand13.PercentChance( 1 ) ) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.visible_message( "<span class='notice'>" + Rand13.Pick(new object [] { "Buzzzz.", "Hmmmmm.", "Bzzz." }) + "</span>" );
					}
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/bees.ogg", Num13.MinInt( ((int)( this.strength * 20 )), 100 ), 1 );
				}

				foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Mob_Living_SimpleAnimal_Bee) )) {
					B2 = _b;
					

					if ( B2 == this ) {
						continue;
					}

					if ( this.feral > 0 ) {
						this.strength += B2.strength;
						GlobalFuncs.returnToPool( B2 );
						this.icon_state = "bees" + this.strength;

						if ( this.strength > 5 ) {
							this.icon_state = "bees_swarm";
						}
					} else if ( Rand13.PercentChance( 10 ) ) {
						total_bees = B2.strength + this.strength;

						if ( total_bees < 10 ) {
							B2.strength = Num13.MinInt( 5, ((int)( total_bees )) );
							this.strength = total_bees - B2.strength;
							B2.icon_state = "bees" + B2.strength;

							if ( this.strength <= 0 ) {
								GlobalFuncs.returnToPool( B2 );
								return false;
							}
							this.icon_state = "bees" + B2.strength;
							T2 = GlobalFuncs.get_turf( Map13.GetStep( this, Convert.ToInt32( Rand13.Pick(new object [] { 1, 2, 4, 8 }) ) ) );

							if ( ((Base_Static)T2).Enter( this, GlobalFuncs.get_turf( this ) ) ) {
								this.loc = T2;
							}
						}
						break;
					}
				}

				if ( Lang13.Bool( this.target ) ) {
					Interface13.Stat( null, Map13.FetchInView( 7, this ).Contains( this.target ) );

					if ( false ) {
						this.target_turf = GlobalFuncs.get_turf( this.target );
						this.wander = false;
					} else {
						this.newTarget();
					}
				}

				if ( Lang13.Bool( this.target_turf ) ) {
					tdir = Map13.GetDistance( this, this.target_turf );
					move_to = Map13.GetStep( this, tdir );
					Map13.WalkTowards( this, move_to, 0, 0 );

					if ( Rand13.PercentChance( 1 ) ) {
						this.visible_message( "<span class='notice'>The bees swarm after " + this.target + "!</span>" );
					}

					if ( this.loc == this.target_turf ) {
						this.target_turf = null;
						this.wander = true;
					}
				} else if ( this.feral > 0 ) {
					this.turns_per_move = Rand13.Int( 1, 3 );
				} else if ( this.feral < 0 ) {
					this.turns_since_move = 0;
				} else if ( !( this.my_hydrotray != null ) || this.my_hydrotray.loc != this.loc || Lang13.Bool( ((dynamic)this.my_hydrotray).dead ) || !Lang13.Bool( ((dynamic)this.my_hydrotray).seed ) ) {
					my_hydrotray = Lang13.FindIn( typeof(Obj_Machinery_PortableAtmospherics_Hydroponics), this.loc );

					if ( Lang13.Bool( my_hydrotray ) ) {
						
						if ( !Lang13.Bool( my_hydrotray.dead ) && Lang13.Bool( my_hydrotray.seed ) ) {
							this.turns_per_move = Rand13.Int( 20, 50 );
						} else {
							my_hydrotray = null;
						}
					}
				}
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", Rand13.Int( -12, 12 ) ).Set( "pixel_y", Rand13.Int( -12, 12 ) ).Set( "time", 10 ).Set( "easing", 1 ) );
			}

			if ( this.feral > 0 ) {
				
				if ( this.strength <= 5 ) {
					this.icon_state = "bees" + Num13.MaxInt( ((int)( this.strength )), 1 ) + "-feral";
				} else {
					this.icon_state = "bees_swarm-feral";
				}
			}
			return false;
		}

		// Function from file: bees.dm
		public override void wander_move( Tile dest = null ) {
			bool goodmove = false;
			dynamic hiveturf = null;
			int current_dist = 0;
			int new_dist = 0;

			goodmove = false;

			if ( !( this.my_hydrotray != null ) || this.my_hydrotray.loc != this.loc || Lang13.Bool( ((dynamic)this.my_hydrotray).dead ) || !Lang13.Bool( ((dynamic)this.my_hydrotray).seed ) ) {
				goodmove = true;
			} else {
				hiveturf = GlobalFuncs.get_turf( this.my_hydrotray );
				current_dist = Map13.GetDistance( this, hiveturf );
				new_dist = Map13.GetDistance( dest, hiveturf );

				if ( current_dist > this.max_hive_dist && !( this.feral != 0 ) ) {
					
					if ( new_dist <= current_dist ) {
						goodmove = true;
					}
				} else {
					goodmove = true;
				}
			}

			if ( goodmove ) {
				this.Move( dest );
			}
			return;
		}

		// Function from file: bees.dm
		public void newTarget(  ) {
			ByTable neabyMobs = null;
			Mob_Living G = null;

			neabyMobs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( 7, this ), typeof(Mob_Living) )) {
				G = _a;
				
				neabyMobs.Add( G );
			}
			this.target = Rand13.PickFromTable( neabyMobs );
			return;
		}

		// Function from file: bees.dm
		public void panic_attack( dynamic damagesource = null ) {
			Mob_Living_SimpleAnimal_Bee B = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( 3, this ), typeof(Mob_Living_SimpleAnimal_Bee) )) {
				B = _a;
				
				B.feral = 15;
				B.target = damagesource;
			}
			return;
		}

		// Function from file: bees.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( a.a_intent == "hurt" || a.a_intent == "disarm" ) {
				this.panic_attack( a );
			}
			return null;
		}

		// Function from file: bees.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			base.bullet_act( (object)(Proj), (object)(def_zone) );

			if ( Lang13.Bool( Proj ) && Lang13.Bool( Proj.firer ) ) {
				this.panic_attack( Proj.firer );
			}
			return null;
		}

		// Function from file: bees.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic damage = null;

			((Mob)b).delayNextAttack( 8 );

			if ( Lang13.Bool( a.force ) ) {
				damage = a.force;

				if ( a.damtype == "halloss" ) {
					damage = 0;
				}
				this.adjustBruteLoss( damage );
				((Ent_Static)b).visible_message( "<span class='danger'>" + this + " has been attacked with " + a + " by " + b + ". </span>" );
				this.panic_attack( b );
			}
			return null;
		}

		// Function from file: bees.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			return true;
		}

		// Function from file: bees.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: bees.dm
		public override void Die( bool? gore = null ) {
			GlobalFuncs.returnToPool( this );
			return;
		}

		// Function from file: bees.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );

			if ( this.parent != null ) {
				this.parent.owned_bee_swarms.Remove( this );
			}
			return null;
		}

	}

}