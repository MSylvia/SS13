// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Cockroach : Mob_Living_SimpleAnimal {

		public int last_laid_eggs = 0;
		public int egg_laying_cooldown = 300;
		public int egg_laying_chance = 75;
		public int max_unhatchable_eggs_in_world = 30;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.size = 1;
			this.icon_living = "cockroach";
			this.icon_dead = "cockroach_dead";
			this.emote_hear = new ByTable(new object [] { "hisses" });
			this.pass_flags = 21;
			this.speak_chance = 1;
			this.maxHealth = 4;
			this.health = 4;
			this.response_help = "pets";
			this.response_disarm = "pokes";
			this.response_harm = "stomps on";
			this.minbodytemp = 273.41;
			this.maxbodytemp = Double.PositiveInfinity;
			this.min_oxy = 0;
			this.max_tox = false;
			this.max_co2 = 0;
			this.treadmill_speed = 0;
			this.turns_per_move = 2;
			this.stop_automated_movement_when_pulled = false;
			this.meat_type = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Roach);
			this.icon_state = "cockroach";
			this.layer = 2.01;
		}

		// Function from file: roach.dm
		public Mob_Living_SimpleAnimal_Cockroach ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pixel_x = Rand13.Int( -20, 20 );
			this.pixel_y = Rand13.Int( -20, 20 );
			this.maxHealth = Rand13.Int( 1, 6 );
			this.health = this.maxHealth;
			return;
		}

		// Function from file: roach.dm
		public override dynamic reagent_act( string id = null, int? method = null, double volume = 0 ) {
			dynamic _default = null;

			
			if ( this.isDead() ) {
				return _default;
			}
			_default = base.reagent_act( id, method, volume );

			switch ((string)( id )) {
				case "toxin":
					this.Die( false );
					break;
			}
			return _default;
		}

		// Function from file: roach.dm
		public override void nuke_act(  ) {
			return;
		}

		// Function from file: roach.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			this.start_flying();
			Task13.Schedule( 100, (Task13.Closure)(() => {
				this.stop_flying();
				return;
			}));
			return false;
		}

		// Function from file: roach.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Newspaper ) {
				((Ent_Static)b).visible_message( new Txt( "<span class='danger'>" ).item( b ).str( " swats " ).the( this ).item().str( " with " ).the( a ).item().str( "!</span>" ).ToString(), new Txt( "<span class='danger'>You swat " ).the( this ).item().str( " with " ).the( a ).item().str( ".</span>" ).ToString() );
				a.desc = "" + Lang13.Initial( a, "desc" ) + " <span class='notice'>There is a splattered " + this + " on the back.</span>";
				this.adjustBruteLoss( 5 );
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: roach.dm
		public void lay_eggs(  ) {
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_RoachEggs E = null;

			
			if ( GlobalVars.cockroach_egg_amount >= GlobalVars.max_unhatchable_eggs_in_world && Convert.ToDouble( GlobalVars.animal_count[this.type] ) >= GlobalVars.ANIMAL_CHILD_CAP ) {
				this.last_laid_eggs = Game13.time;
				return;
			}
			E = new Obj_Item_Weapon_ReagentContainers_Food_Snacks_RoachEggs( GlobalFuncs.get_turf( this ) );
			E.layer = this.layer;
			E.pixel_x = this.pixel_x;
			E.pixel_y = this.pixel_y;

			if ( Convert.ToDouble( GlobalVars.animal_count[this.type] ) < GlobalVars.ANIMAL_CHILD_CAP ) {
				this.last_laid_eggs = Game13.time;
				E.fertilize();
			} else {
				this.last_laid_eggs = Game13.time - 600;
			}
			return;
		}

		// Function from file: roach.dm
		public void stop_flying( bool? anim = null ) {
			anim = anim ?? true;

			this.speed = Lang13.Initial( this, "speed" );
			this.icon_state = this.icon_living;
			this.flying = false;
			this.speak_chance = Lang13.Initial( this, "speak_chance" );
			this.turns_per_move = Lang13.Initial( this, "turns_per_move" );
			this.response_help = Lang13.Initial( this, "response_help" );
			this.response_disarm = Lang13.Initial( this, "response_disarm" );
			this.response_harm = Lang13.Initial( this, "response_harm" );
			this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) );

			if ( anim == true ) {
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_y", this.pixel_y - 8 ).Set( 3, 5 ).Set( 4, 1 ).Set( 5, 5 ) );
			}
			return;
		}

		// Function from file: roach.dm
		public void start_flying( bool? anim = null ) {
			anim = anim ?? true;

			
			if ( this.isUnconscious() ) {
				return;
			}
			this.speed = -4;
			this.turns_since_move = 5;
			this.icon_state = "cockroach_fly";
			this.flying = true;
			this.speak_chance = 5;
			this.turns_per_move = 1;
			this.response_help = "attempts to pet";
			this.response_disarm = "tries to catch";
			this.response_harm = "swats";
			this.layer = 4;

			if ( anim == true ) {
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_y", this.pixel_y + 8 ).Set( 3, 10 ).Set( 4, 1 ).Set( 5, 5 ) );
			}
			return;
		}

		// Function from file: roach.dm
		public override bool adjustBruteLoss( dynamic amount = null, string damage_type = null ) {
			Mob user = null;
			Tile new_location = null;

			base.adjustBruteLoss( (object)(amount), damage_type );

			if ( Convert.ToDouble( this.health ) > 0 ) {
				
				if ( !this.flying ) {
					this.start_flying();
				}

				if ( Task13.User != null ) {
					user = Task13.User;
					new_location = Map13.GetStep( this, Num13.Rotate( Map13.GetDistance( this, user ), 180 ) );
					this.wander_move( new_location );
				}
				Task13.Schedule( Rand13.Int( 4, 10 ) * 10, (Task13.Closure)(() => {
					this.stop_flying();
					return;
				}));
			}
			return false;
		}

		// Function from file: roach.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( !this.flying ) {
				this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) );
			}
			return false;
		}

		// Function from file: roach.dm
		public override void wander_move( Tile dest = null ) {
			Obj_Item_Weapon_ReagentContainers_Food F = null;
			Obj_Item_Trash T = null;
			Tile T2 = null;
			int check_dir = 0;
			double new_px = 0;
			double new_py = 0;

			base.wander_move( dest );

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Item_Weapon_ReagentContainers_Food) )) {
				F = _a;
				
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", F.pixel_x + Rand13.Int( -4, 4 ) ).Set( "pixel_y", F.pixel_y + Rand13.Int( -4, 4 ) ).Set( 4, Rand13.Int( 10, 20 ) ).Set( 5, 1 ) );
				this.layer = F.layer + 0.01;

				if ( this.flying ) {
					this.stop_flying( false );
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.turns_since_move -= Rand13.Int( 5, 20 );

					if ( this.last_laid_eggs + 300 < Game13.time && Rand13.PercentChance( GlobalVars.egg_laying_chance ) ) {
						Task13.Sleep( Rand13.Int( 1, 5 ) * 10 );

						if ( F != null && Lang13.Bool( F.reagents ) ) {
							((Reagents)F.reagents).add_reagent( "toxin", Rand13.Int( ((int)( 0.2 )), ((int)( 0.6 )) ) );
							this.lay_eggs();
						}
					}
					return;
				}));
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Obj_Item_Trash) )) {
				T = _b;
				
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", T.pixel_x ).Set( "pixel_y", T.pixel_y ).Set( 4, Rand13.Int( 10, 30 ) ).Set( 5, 1 ) );
				this.layer = T.layer - 0.01;

				if ( this.flying ) {
					this.stop_flying( false );
				}
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.turns_since_move -= Rand13.Int( 5, 20 );

					if ( this.last_laid_eggs + 300 < Game13.time && Rand13.PercentChance( ((int)( 18.75 )) ) ) {
						Task13.Sleep( Rand13.Int( 1, 5 ) * 10 );
						this.lay_eggs();
					}
					return;
				}));
				return;
			}
			T2 = dest;

			if ( T2 is Tile_Simulated_Wall ) {
				check_dir = Map13.GetDistance( this, dest );
				new_px = Rand13.Int( -8, 8 ) + Math.Cos( GlobalFuncs.dir2angle( check_dir ) ??0 ) * 32;
				new_py = Rand13.Int( -8, 8 ) + Math.Sin( GlobalFuncs.dir2angle( check_dir ) ??0 ) * 32;
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", new_px ).Set( 3, Rand13.Int( 5, 15 ) ).Set( 4, 1 ).Set( 5, 5 ) );
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_y", new_py ).Set( 3, Rand13.Int( 5, 15 ) ).Set( 4, 1 ).Set( 5, 5 ) );
				return;
			}
			Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", Rand13.Int( -20, 20 ) ).Set( "pixel_y", Rand13.Int( -20, 20 ) ).Set( 4, ( this.flying ? 5 : 15 ) ).Set( 5, 1 ) );
			return;
		}

		// Function from file: roach.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			
			if ( !( O is Mob_Living ) ) {
				return null;
			}

			if ( Convert.ToDouble( this.size ) > Convert.ToDouble( ((dynamic)O).size - 2 ) ) {
				return null;
			}

			if ( this.flying ) {
				return null;
			}

			if ( ((dynamic)O).a_intent == "help" ) {
				return null;
			}

			if ( Lang13.Bool( ((dynamic)O).isUnconscious() ) ) {
				return null;
			}

			if ( Rand13.PercentChance( 15 ) ) {
				this.Die( true );
			}
			return null;
		}

		// Function from file: roach.dm
		public override void Die( bool? gore = null ) {
			gore = gore ?? true;

			Obj_Effect_Decal_Cleanable_CockroachRemains remains = null;

			
			if ( gore == true ) {
				remains = new Obj_Effect_Decal_Cleanable_CockroachRemains( this.loc );
				remains.dir = this.dir;
				remains.pixel_x = this.pixel_x;
				remains.pixel_y = this.pixel_y;

				if ( this.flying ) {
					Icon13.Animate( new ByTable().Set( 1, remains ).Set( "pixel_y", this.pixel_y - 8 ).Set( 3, 5 ).Set( 4, 1 ) );
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), Rand13.Pick(new object [] { "sound/effects/gib1.ogg", "sound/effects/gib2.ogg", "sound/effects/gib3.ogg" }), 40, 1 );
				base.Die( gore );
				GlobalFuncs.qdel( this );
			} else {
				base.Die( gore ); return;
			}
			return;
		}

	}

}