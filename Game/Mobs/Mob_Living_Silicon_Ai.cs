// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Silicon_Ai : Mob_Living_Silicon {

		public dynamic network = new ByTable(new object [] { "SS13" });
		public dynamic current = null;
		public ByTable connected_robots = new ByTable();
		public int aiRestorePowerRoutine = 0;
		public ByTable alarms = new ByTable().Set( "Motion", new ByTable() ).Set( "Fire", new ByTable() ).Set( "Atmosphere", new ByTable() ).Set( "Power", new ByTable() ).Set( "Camera", new ByTable() );
		public bool viewalerts = false;
		public ByTable lawcheck = new ByTable( 1 );
		public ByTable ioncheck = new ByTable( 1 );
		public Icon holo_icon = null;
		public Game_Data aiPDA = null;
		public Obj_Item_Device_Multitool aiMulti = null;
		public bool custom_sprite = false;
		public Obj_Item_Device_Camera_AiCamera aicamera = null;
		public ModulePicker malf_picker = null;
		public int processing_time = 100;
		public ByTable current_modules = new ByTable();
		public int ai_flags = 0;
		public bool control_disabled = false;
		public bool malfhacking = false;
		public dynamic malfhack = null;
		public bool explosive = false;
		public Mob parent = null;
		public bool camera_light_on = false;
		public ByTable lit_cameras = new ByTable();
		public Trackable track = new Trackable();
		public dynamic last_paper_seen = null;
		public bool can_shunt = true;
		public dynamic last_announcement = "";
		public Mob_Camera_AiEye eyeobj = new Mob_Camera_AiEye();
		public int sprint = 10;
		public bool cooldown = false;
		public bool acceleration = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.status_flags = 5;
			this.force_compose = true;
			this.size = 4;
			this.icon = "icons/mob/AI.dmi";
			this.icon_state = "ai";
		}

		// Function from file: ai.dm
		public Mob_Living_Silicon_Ai ( dynamic loc = null, dynamic L = null, dynamic B = null, bool? safety = null ) : base( (object)(loc) ) {
			safety = safety ?? false;

			ByTable possibleNames = null;
			dynamic pickedName = null;
			Mob_Living_Silicon_Ai A = null;

			possibleNames = GlobalVars.ai_names;
			pickedName = null;

			while (!Lang13.Bool( pickedName )) {
				pickedName = Rand13.PickFromTable( GlobalVars.ai_names );

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon_Ai) )) {
					A = _a;
					

					if ( A.real_name == pickedName && possibleNames.len > 1 ) {
						possibleNames.Remove( pickedName );
						pickedName = null;
					}
				}
			}
			this.add_language( "Galactic Common", true );
			this.add_language( "Sinta'unathi", true );
			this.add_language( "Siik'tajr", true );
			this.add_language( "Skrellian", true );
			this.add_language( "Rootspeak", true );
			this.add_language( "Gutter", true );
			this.add_language( "Clatter", true );
			this.add_language( "Grey", true );
			this.add_language( "Monkey", true );
			this.add_language( "Vox-pidgin", true );
			this.add_language( "Tradeband", true );
			this.add_language( "Mouse", true );
			this.add_language( "Sol Common", true );
			this.default_language = GlobalVars.all_languages["Galactic Common"];
			this.real_name = pickedName;
			this.name = this.real_name;
			this.anchored = 1;
			this.canmove = false;
			this.density = true;
			loc = loc;
			this.v_radio = new Obj_Item_Device_Radio_Borg_Ai(  );
			this.v_radio.recalculateChannels();
			this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo1" ) );
			this.proc_holder_list = new ByTable();

			if ( Lang13.Bool( L ) && L is AiLaws ) {
				this.laws = L;
			} else {
				this.laws = GlobalFuncs.getLawset( this );
			}
			this.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "show_laws_verb" ) );
			this.aiPDA = new Obj_Item_Device_Pda_Ai( this );
			((dynamic)this.aiPDA).owner = this.name;
			((dynamic)this.aiPDA).ownjob = "AI";
			((dynamic)this.aiPDA).name = this.name + " (" + ((dynamic)this.aiPDA).ownjob + ")";
			this.aiMulti = new Obj_Item_Device_Multitool( this );
			this.aicamera = new Obj_Item_Device_Camera_AiCamera( this );

			if ( loc is Tile ) {
				this.verbs.Add( typeof(Mob_Living_Silicon_Ai).GetMethod( "ai_network_change" ), typeof(Mob_Living_Silicon_Ai).GetMethod( "ai_statuschange" ), typeof(Mob_Living_Silicon_Ai).GetMethod( "ai_hologram_change" ) );
			}

			if ( !( safety == true ) ) {
				
				if ( !Lang13.Bool( B ) ) {
					new Obj_Structure_AIcore_Deactivated( loc );
					GlobalFuncs.qdel( this );
					return;
				} else {
					
					if ( Lang13.Bool( B.brainmob.mind ) ) {
						((Mind)B.brainmob.mind).transfer_to( this );
					}
					GlobalFuncs.to_chat( this, "<B>You are playing the station's AI. The AI cannot move, but can interact with many objects while viewing them (through cameras).</B>" );
					GlobalFuncs.to_chat( this, "<B>To look at other parts of the station, click on yourself to get a camera menu.</B>" );
					GlobalFuncs.to_chat( this, "<B>While observing through a camera, you can use most (networked) devices which you can see, such as computers, APCs, intercoms, doors, etc.</B>" );
					GlobalFuncs.to_chat( this, "To use something, simply click on it." );
					GlobalFuncs.to_chat( this, "Use say :b to speak to your cyborgs through binary." );

					if ( !( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode.malf_ai.Contains( this.mind ) ) ) {
						this.show_laws();
						GlobalFuncs.to_chat( this, "<b>These laws may be changed by other players, or by you being the traitor.</b>" );
					}
					this.job = "AI";
				}
			}
			GlobalVars.ai_list.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: eye.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.eyeobj.ai = null;
			GlobalFuncs.qdel( this.eyeobj );
			this.eyeobj = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: say.dm
		public override bool handle_inherent_channels( Game_Data speech = null, string message_mode = null ) {
			
			if ( base.handle_inherent_channels( speech, message_mode ) ) {
				return true;
			}

			if ( message_mode == "holopad" ) {
				this.holopad_talk( speech );
				return true;
			}
			return false;
		}

		// Function from file: say.dm
		public override string get_message_mode( dynamic message = null ) {
			
			if ( GlobalVars.department_radio_keys[String13.SubStr( message, 1, 3 )] == "department" ) {
				return "holopad";
			} else {
				return base.get_message_mode( (object)(message) );
			}
		}

		// Function from file: say.dm
		public override bool IsVocal(  ) {
			return !GlobalVars.config.silent_ai;
		}

		// Function from file: say.dm
		public override string say_quote( dynamic text = null ) {
			string ending = null;

			ending = String13.SubStr( text, Lang13.Length( text ), 0 );

			if ( ending == "?" ) {
				return "queries, " + text;
			} else if ( ending == "!" ) {
				return "declares, " + text;
			}
			return "states, " + text;
		}

		// Function from file: say.dm
		public override string render_speaker_track_end( dynamic speech = null ) {
			Ent_Dynamic M = null;
			Mob_Living_Silicon_Ai virt_speaker = null;

			M = speech.speaker.GetSource();
			virt_speaker = speech.radio;

			if ( !( virt_speaker != null ) || !( virt_speaker is Obj_Item_Device_Radio ) ) {
				virt_speaker = this;
			}

			if ( speech.speaker != this && M != this ) {
				
				if ( M != null ) {
					return "</a>";
				}
			}
			return "";
		}

		// Function from file: say.dm
		public override string render_speaker_track_start( dynamic speech = null ) {
			Ent_Dynamic M = null;
			Mob_Living_Silicon_Ai virt_speaker = null;
			string faketrack = null;

			M = speech.speaker.GetSource();
			virt_speaker = speech.radio;

			if ( !( virt_speaker != null ) || !( virt_speaker is Obj_Item_Device_Radio ) ) {
				virt_speaker = this;
			}

			if ( speech.speaker != this && M != this ) {
				
				if ( M != null ) {
					faketrack = new Txt( "byond://?src=" ).Ref( virt_speaker ).str( ";track2=" ).Ref( this ).str( ";track=" ).Ref( M ).ToString();

					if ( Lang13.Bool( speech.speaker.GetTrack() ) ) {
						faketrack = new Txt( "byond://?src=" ).Ref( virt_speaker ).str( ";track2=" ).Ref( this ).str( ";faketrack=" ).Ref( M ).ToString();
					}
					return new Txt( "<a href='byond://?src=" ).Ref( virt_speaker ).str( ";open2=" ).Ref( this ).str( ";open=" ).Ref( M ).str( "'>[OPEN]</a> <a href='" ).item( faketrack ).str( "'>" ).ToString();
				}
			}
			return "";
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			
			if ( this.parent != null && this.parent is Mob_Living_Silicon_Ai && this.parent.stat != 2 ) {
				this.parent.say( message );
				return false;
			}
			base.say( (object)(message), speaking, radio );
			return false;
		}

		// Function from file: vgstation13.dme
		public override bool Logout(  ) {
			Obj_Machinery_AiStatusDisplay O = null;

			base.Logout();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_AiStatusDisplay) )) {
				O = _a;
				
				O.mode = 0;
			}

			if ( !( this.loc is Tile ) ) {
				
				if ( this.client != null ) {
					this.client.eye = this.loc;
					this.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
				}
			}
			this.view_core();
			return false;
		}

		// Function from file: vgstation13.dme
		public override dynamic Login(  ) {
			Obj_Effect_Rune rune = null;
			Obj_Machinery_AiStatusDisplay O = null;

			base.Login();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.rune_list, typeof(Obj_Effect_Rune) )) {
				rune = _a;
				
				this.client.images.Add( rune.blood_image );
			}
			this.regenerate_icons();

			if ( this.stat != 2 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_AiStatusDisplay) )) {
					O = _b;
					
					O.mode = 1;
					O.emotion = "Neutral";
				}
			}
			this.view_core();
			return null;
		}

		// Function from file: life.dm
		public override void updatehealth(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				this.health = this.maxHealth;
				this.stat = 0;
			} else if ( ( this.ai_flags & 1 ) != 0 ) {
				this.health = this.maxHealth - this.getOxyLoss() - this.getToxLoss() - this.getBruteLoss();
			} else {
				this.health = this.maxHealth - this.getOxyLoss() - this.getToxLoss() - this.getFireLoss() - this.getBruteLoss();
			}
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			dynamic T = null;
			bool blind = false;
			Ent_Static loc = null;
			dynamic home = null;
			Obj_Machinery_Power_Apc theAPC = null;
			int PRP = 0;
			dynamic AIarea = null;
			Obj_Machinery_Power_Apc APC = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return false;
			} else {
				T = GlobalFuncs.get_turf( this );

				if ( this.stat != 0 ) {
					this.cameraFollow = null;
					this.reset_view( null );
					this.unset_machine();
				}
				this.updatehealth();

				if ( Lang13.Bool( this.malfhack ) ) {
					
					if ( Lang13.Bool( this.malfhack.aidisabled ) ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>ERROR: APC access disabled, hack attempt canceled.</span>" );
						this.malfhacking = false;
						this.malfhack = null;
					}
				}

				if ( Convert.ToDouble( this.health ) <= Convert.ToDouble( GlobalVars.config.health_threshold_dead ) ) {
					this.death();
					return false;
				}

				if ( this.client != null ) {
					
					if ( Lang13.Bool( this.machine ) ) {
						
						if ( !( ((Ent_Static)this.machine).check_eye( this ) == true ) ) {
							this.reset_view( null );
						}
					} else if ( !this.isTeleViewing( this.client.eye ) ) {
						this.reset_view( null );
					}
				}

				if ( this.aiRestorePowerRoutine != 0 ) {
					this.adjustOxyLoss( 1 );
				} else {
					this.adjustOxyLoss( -1 );
				}
				blind = false;
				loc = null;

				if ( T is Tile ) {
					loc = T.loc;

					if ( loc is Zone ) {
						
						if ( !Lang13.Bool( ((dynamic)loc).power_equip ) && !( this.loc is Obj_Item ) ) {
							blind = true;
						}
					}
				}

				if ( !blind ) {
					
					if ( this.client != null && this.client.eye == this.eyeobj ) {
						this.sight |= GlobalVars.SEE_TURFS;
						this.sight |= GlobalVars.SEE_MOBS;
						this.sight |= GlobalVars.SEE_OBJS;
						this.see_in_dark = 8;
						this.see_invisible = 45;
					}
					home = GlobalFuncs.get_area( this );

					if ( Lang13.Bool( home ) && Lang13.Bool( home.powered( 1 ) ) ) {
						home.use_power( 1000, 1 );
					}

					if ( this.aiRestorePowerRoutine == 2 ) {
						GlobalFuncs.to_chat( this, "Alert cancelled. Power has been restored without our assistance." );
						this.aiRestorePowerRoutine = 0;

						if ( this.blind != null ) {
							((dynamic)this.blind).layer = 0;
						}
						return false;
					} else if ( this.aiRestorePowerRoutine == 3 ) {
						GlobalFuncs.to_chat( this, "Alert cancelled. Power has been restored." );
						this.aiRestorePowerRoutine = 0;

						if ( this.blind != null ) {
							((dynamic)this.blind).layer = 0;
						}
						return false;
					} else if ( this.aiRestorePowerRoutine == -1 ) {
						GlobalFuncs.to_chat( this, "Alert cancelled. External power source detected." );
						this.aiRestorePowerRoutine = 0;

						if ( this.blind != null ) {
							((dynamic)this.blind).layer = 0;
						}
						return false;
					}
				} else {
					
					if ( this.client != null ) {
						
						if ( this.blind != null ) {
							((dynamic)this.blind).screen_loc = "1,1 to 15,15";

							if ( Convert.ToInt32( ((dynamic)this.blind).layer ) != 18 ) {
								((dynamic)this.blind).layer = 18;
							}
						}
						this.sight = this.sight & 65519;
						this.sight = this.sight & 65531;
						this.sight = this.sight & 65527;
						this.see_in_dark = 0;
					}
					this.see_invisible = 25;

					if ( ( !Lang13.Bool( ((dynamic)loc).power_equip ) || T is Tile_Space ) && !( this.loc is Obj_Item ) ) {
						
						if ( this.aiRestorePowerRoutine == 0 ) {
							this.aiRestorePowerRoutine = 1;
							GlobalFuncs.to_chat( this, "You've lost power!" );

							if ( !( GlobalFuncs.is_special_character( this ) != 0 ) ) {
								this.set_zeroth_law( "" );
							}
							Task13.Schedule( 20, (Task13.Closure)(() => {
								
								if ( !( this.aiRestorePowerRoutine != 0 ) ) {
									blind = false;
									return;
								}
								GlobalFuncs.to_chat( this, "Backup battery online. Scanners, camera, and radio interface offline. Beginning fault-detection." );
								Task13.Sleep( 50 );

								if ( !( this.aiRestorePowerRoutine != 0 ) ) {
									blind = false;
									return;
								}

								if ( Lang13.Bool( ((dynamic)loc).power_equip ) ) {
									
									if ( !( T is Tile_Space ) ) {
										GlobalFuncs.to_chat( this, "Alert cancelled. Power has been restored without our assistance." );
										this.aiRestorePowerRoutine = 0;

										if ( this.blind != null ) {
											((dynamic)this.blind).layer = 0;
										}
										return;
									}
								}
								GlobalFuncs.to_chat( this, "Fault confirmed: missing external power. Shutting down main control system to save power." );
								Task13.Sleep( 20 );

								if ( !( this.aiRestorePowerRoutine != 0 ) ) {
									blind = false;
									return;
								}
								GlobalFuncs.to_chat( this, "Emergency control system online. Verifying connection to power network." );
								Task13.Sleep( 50 );

								if ( !( this.aiRestorePowerRoutine != 0 ) ) {
									blind = false;
									return;
								}

								if ( T is Tile_Space ) {
									GlobalFuncs.to_chat( this, "Unable to verify! No power connection detected!" );
									this.aiRestorePowerRoutine = 2;
									return;
								}
								GlobalFuncs.to_chat( this, "Connection verified. Searching for APC in power network." );
								Task13.Sleep( 50 );

								if ( !( this.aiRestorePowerRoutine != 0 ) ) {
									blind = false;
									return;
								}
								theAPC = null;
								PRP = 1;

								while (PRP <= 4) {
									
									if ( !( this.aiRestorePowerRoutine != 0 ) ) {
										blind = false;
										return;
									}
									AIarea = GlobalFuncs.get_area( this );

									foreach (dynamic _a in Lang13.Enumerate( AIarea, typeof(Obj_Machinery_Power_Apc) )) {
										APC = _a;
										

										if ( !( ( APC.stat & 1 ) != 0 ) ) {
											theAPC = APC;
											break;
										}
									}

									if ( !( theAPC != null ) ) {
										
										switch ((int)( PRP )) {
											case 1:
												GlobalFuncs.to_chat( this, "Unable to locate APC!" );
												break;
											default:
												GlobalFuncs.to_chat( this, "Lost connection with the APC!" );
												break;
										}
										this.aiRestorePowerRoutine = 2;
										return;
									}

									if ( Lang13.Bool( ((dynamic)loc).power_equip ) ) {
										
										if ( !( T is Tile_Space ) ) {
											GlobalFuncs.to_chat( this, "Alert cancelled. Power has been restored without our assistance." );
											this.aiRestorePowerRoutine = 0;

											if ( this.blind != null ) {
												((dynamic)this.blind).layer = 0;
											}
											return;
										}
									}

									switch ((int)( PRP )) {
										case 1:
											GlobalFuncs.to_chat( this, "APC located. Optimizing route to APC to avoid needless power waste." );
											break;
										case 2:
											GlobalFuncs.to_chat( this, "Best route identified. Hacking offline APC power port." );
											break;
										case 3:
											GlobalFuncs.to_chat( this, "Power port upload access confirmed. Loading control program into APC power port software." );
											break;
										case 4:
											GlobalFuncs.to_chat( this, "Transfer complete. Forcing APC to execute program." );
											Task13.Sleep( 50 );

											if ( !( this.aiRestorePowerRoutine != 0 ) ) {
												theAPC = null;
												blind = false;
												return;
											}
											GlobalFuncs.to_chat( this, "Receiving control information from APC." );
											Task13.Sleep( 2 );

											if ( !( this.aiRestorePowerRoutine != 0 ) ) {
												theAPC = null;
												blind = false;
												return;
											}
											theAPC.attack_ai( this );
											this.aiRestorePowerRoutine = 3;
											GlobalFuncs.to_chat( this, "Here are your current laws:" );
											this.show_laws();
											break;
									}
									Task13.Sleep( 50 );
									theAPC = null;
									PRP++;
								}
								return;
							}));
						}
					}
				}
			}
			return false;
		}

		// Function from file: laws.dm
		public override void show_laws( bool? everyone = null ) {
			everyone = everyone ?? false;

			dynamic who = null;

			
			if ( everyone == true ) {
				who = typeof(Game13);
			} else {
				who = this;
				GlobalFuncs.to_chat( who, "<b>Obey these laws:</b>" );
			}
			this.laws_sanity_check();
			this.laws.show_laws( who );
			return;
		}

		// Function from file: examine.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string msg = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " <EM>" ).item( this ).str( "</EM>!\n" ).ToString();

			if ( this.stat == 2 ) {
				msg += "<span class='deadsay'>It appears to be powered-down.</span>\n";
			} else {
				msg += "<span class='warning'>";

				if ( this.getBruteLoss() != 0 ) {
					
					if ( this.getBruteLoss() < 30 ) {
						msg += "It looks slightly dented.\n";
					} else {
						msg += "<B>It looks severely dented!</B>\n";
					}
				}

				if ( this.getFireLoss() != 0 ) {
					
					if ( this.getFireLoss() < 30 ) {
						msg += "It looks slightly charred.\n";
					} else {
						msg += "<B>Its casing is melted and heat-warped!</B>\n";
					}
				}

				if ( this.stat == 1 ) {
					msg += "It is non-responsive and displaying the text: \"RUNTIME: Sensory Overload, stack 26/3\".\n";
				}
				msg += "</span>";
			}
			msg += "*---------*</span>";
			GlobalFuncs.to_chat( user, msg );
			return null;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			int callshuttle = 0;
			Obj_Machinery_Computer_Communications commconsole = null;
			Obj_Item_Weapon_Circuitboard_Communications commboard = null;
			Mob_Living_Silicon_Ai shuttlecaller = null;
			Obj_Machinery_AiStatusDisplay O = null;

			
			if ( this.stat == 2 ) {
				return null;
			}
			this.stat = 2;

			if ( this.custom_sprite ) {
				this.icon_state = "" + this.ckey + "-ai-crash";
			} else {
				this.icon_state = "ai-crash";
			}
			this.update_canmove();

			if ( this.eyeobj != null ) {
				this.eyeobj.forceMove( GlobalFuncs.get_turf( this ) );
			}

			if ( this.blind != null ) {
				((dynamic)this.blind).layer = 0;
			}
			this.sight |= 28;
			this.see_in_dark = 8;
			this.see_invisible = 45;
			callshuttle = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Computer_Communications) )) {
				commconsole = _a;
				

				if ( commconsole.z == 2 ) {
					continue;
				}

				if ( commconsole.loc is Tile ) {
					break;
				}
				callshuttle++;
			}

			foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Weapon_Circuitboard_Communications) )) {
				commboard = _b;
				

				if ( commboard.z == 2 ) {
					continue;
				}

				if ( commboard.loc is Tile || commboard.loc is Obj_Item_Weapon_Storage ) {
					break;
				}
				callshuttle++;
			}

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
				shuttlecaller = _c;
				

				if ( shuttlecaller.z == 2 ) {
					continue;
				}

				if ( !Lang13.Bool( shuttlecaller.stat ) && shuttlecaller.client != null && shuttlecaller.loc is Tile ) {
					break;
				}
				callshuttle++;
			}

			if ( GlobalVars.ticker.mode.name == "revolution" || GlobalVars.ticker.mode.name == "AI malfunction" || GlobalVars.sent_strike_team ) {
				callshuttle = 0;
			}

			if ( callshuttle == 3 ) {
				GlobalVars.emergency_shuttle.incall( 2 );
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "All the AIs, comm consoles and boards are destroyed. Shuttle called." ) );
				GlobalFuncs.message_admins( "All the AIs, comm consoles and boards are destroyed. Shuttle called." );
				GlobalFuncs.captain_announce( "The emergency shuttle has been called. It will arrive in " + Num13.Floor( GlobalVars.emergency_shuttle.timeleft() / 60 ) + " minutes." );
				GlobalFuncs.to_chat( typeof(Game13), new Sound( "sound/AI/shuttlecalled.ogg" ) );
			}

			if ( this.explosive ) {
				Task13.Schedule( 10, (Task13.Closure)(() => {
					GlobalFuncs.explosion( this.loc, 3, 6, 12, 15 );
					return;
				}));
			}

			foreach (dynamic _d in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_AiStatusDisplay) )) {
				O = _d;
				
				Task13.Schedule( 0, (Task13.Closure)(() => {
					O.mode = 2;
					return;
				}));

				if ( this.loc is Obj_Item_Device_Aicard ) {
					this.loc.icon_state = "aicard-404";
				}
			}
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );

				if ( !( this.suiciding == true ) ) {
					GlobalVars.score["deadaipenalty"] += 1;
				}
			}
			return base.death( gibbed );
		}

		// Function from file: ai.dm
		public override bool isTeleViewing( dynamic client_eye = null ) {
			return true;
		}

		// Function from file: ai.dm
		public override bool html_mob_check( Type typepath = null ) {
			return true;
		}

		// Function from file: ai.dm
		public override dynamic system_integrity(  ) {
			return ( this.health - GlobalVars.config.health_threshold_dead ) / 2;
		}

		// Function from file: ai.dm
		public override dynamic get_multitool( bool? if_active = null ) {
			if_active = if_active ?? false;

			return this.aiMulti;
		}

		// Function from file: ai.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Wrench ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).The( b ).item().str( " starts to unbolt " ).the( this ).item().str( " from the plating...</span>" ).ToString() );

					if ( !GlobalFuncs.do_after( b, this, 40 ) ) {
						((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).The( b ).item().str( " decides not to unbolt " ).the( this ).item().str( ".</span>" ).ToString() );
						return null;
					}
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).The( b ).item().str( " finishes unfastening " ).the( this ).item().str( "!</span>" ).ToString() );
					this.anchored = 0;
					return null;
				} else {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).The( b ).item().str( " starts to bolt " ).the( this ).item().str( " to the plating...</span>" ).ToString() );

					if ( !GlobalFuncs.do_after( b, this, 40 ) ) {
						((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).The( b ).item().str( " decides not to bolt " ).the( this ).item().str( ".</span>" ).ToString() );
						return null;
					}
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).The( b ).item().str( " finishes fastening down " ).the( this ).item().str( "!</span>" ).ToString() );
					this.anchored = 1;
					return null;
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: ai.dm
		public override bool cancelAlarm( string _class = null, dynamic A = null, Ent_Static origin = null ) {
			dynamic L = null;
			bool cleared = false;
			dynamic I = null;
			dynamic alarm = null;
			ByTable srcs = null;

			L = this.alarms[_class];
			cleared = false;

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					srcs = alarm[3];

					if ( srcs.Contains( origin ) ) {
						srcs.Remove( origin );
					}

					if ( srcs.len == 0 ) {
						cleared = true;
						L -= I;
					}
				}
			}

			if ( cleared ) {
				this.queueAlarm( "--- " + _class + " alarm in " + A.name + " has been cleared.", _class, false );

				if ( this.viewalerts ) {
					this.ai_alerts();
				}
			}
			return !cleared;
		}

		// Function from file: ai.dm
		public override bool triggerAlarm( string _class = null, dynamic A = null, dynamic O = null, Ent_Static alarmsource = null ) {
			dynamic L = null;
			dynamic I = null;
			dynamic alarm = null;
			dynamic sources = null;
			dynamic C = null;
			dynamic CL = null;
			bool foo = false;
			string dat2 = null;
			Obj_Machinery_Camera I2 = null;

			
			if ( this.stat == 2 ) {
				return true;
			}
			L = this.alarms[_class];

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					sources = alarm[3];

					if ( !Lang13.Bool( sources.Contains( alarmsource ) ) ) {
						sources += alarmsource;
					}
					return true;
				}
			}
			C = null;
			CL = null;

			if ( Lang13.Bool( O ) && O is ByTable ) {
				CL = O;

				if ( CL.len == 1 ) {
					C = CL[1];
				}
			} else if ( Lang13.Bool( O ) && O is Obj_Machinery_Camera ) {
				C = O;
			}
			L[A.name] = new ByTable(new object [] { A, ( Lang13.Bool( C ) ? C : O ), new ByTable(new object [] { alarmsource }) });

			if ( Lang13.Bool( O ) ) {
				
				if ( Lang13.Bool( C ) && ((Obj_Machinery_Camera)C).can_use() ) {
					this.queueAlarm( new Txt( "--- " ).item( _class ).str( " alarm detected in " ).item( A.name ).str( "! (<A HREF=?src=" ).Ref( this ).str( ";switchcamera=" ).Ref( C ).str( ">" ).item( C.c_tag ).str( "</A>)" ).ToString(), _class );
				} else if ( Lang13.Bool( CL ) && CL.len != 0 ) {
					foo = false;
					dat2 = "";

					foreach (dynamic _b in Lang13.Enumerate( CL, typeof(Obj_Machinery_Camera) )) {
						I2 = _b;
						
						dat2 += new Txt().item( ( !foo ? "" : " | " ) ).str( "<A HREF=?src=" ).Ref( this ).str( ";switchcamera=" ).Ref( I2 ).str( ">" ).item( I2.c_tag ).str( "</A>" ).ToString();
						foo = true;
					}
					this.queueAlarm( "--- " + _class + " alarm detected in " + A.name + "! (" + dat2 + ")", _class );
				} else {
					this.queueAlarm( "--- " + _class + " alarm detected in " + A.name + "! (No Camera)", _class );
				}
			} else {
				this.queueAlarm( "--- " + _class + " alarm detected in " + A.name + "! (No Camera)", _class );
			}

			if ( this.viewalerts ) {
				this.ai_alerts();
			}
			return true;
		}

		// Function from file: ai.dm
		public override void reset_view( dynamic A = null ) {
			
			if ( this.camera_light_on ) {
				this.light_cameras();
			}

			if ( A is Obj_Machinery_Camera ) {
				this.current = A;
			}
			base.reset_view( (object)(A) );
			return;
		}

		// Function from file: ai.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			dynamic O = null;
			int damage = 0;

			
			if ( !( user is Mob_Living_SimpleAnimal ) ) {
				return null;
			}

			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				user.emote( "" + ((dynamic)user).friendly + " " + this );
			} else {
				
				if ( Lang13.Bool( ((dynamic)user).attack_sound ) ) {
					GlobalFuncs.playsound( this.loc, ((dynamic)user).attack_sound, 50, 1, 1 );
				}

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					
					O.show_message( "<span class='warning'><B>" + user + "</B> " + ((dynamic)user).attacktext + " " + this + "!</span>", 1 );
				}
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>attacked " + this.name + " (" + this.ckey + ")</font>" );
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>was attacked by " + user.name + " (" + user.ckey + ")</font>" );
				damage = Rand13.Int( Convert.ToInt32( ((dynamic)user).melee_damage_lower ), Convert.ToInt32( ((dynamic)user).melee_damage_upper ) );
				this.adjustBruteLoss( damage );
				this.updatehealth();
			}
			return null;
		}

		// Function from file: ai.dm
		public override dynamic attack_alien( Mob user = null ) {
			dynamic O = null;
			int damage = 0;
			dynamic O2 = null;
			dynamic O3 = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "You cannot attack people before the game has started." );
				return null;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				GlobalFuncs.to_chat( user, "No attacking people at spawn, you jackass." );
				return null;
			}

			dynamic _d = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _d=="help" ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					

					if ( Lang13.Bool( O.client ) && !Lang13.Bool( O.blinded ) ) {
						O.show_message( "<span class='notice'>" + user + " caresses " + this + "'s plating with its scythe like arm.</span>", 1 );
					}
				}
			} else {
				damage = Rand13.Int( 10, 20 );

				if ( Rand13.PercentChance( 90 ) ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slash.ogg", 25, 1, -1 );

					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O2 = _b;
						

						if ( Lang13.Bool( O2.client ) && !Lang13.Bool( O2.blinded ) ) {
							O2.show_message( "<span class='danger'>" + user + " has slashed at " + this + "!</span>", 1 );
						}
					}

					if ( Rand13.PercentChance( 8 ) ) {
						Icon13.Flick( "noise", this.flash );
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/slashmiss.ogg", 25, 1, -1 );

					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O3 = _c;
						

						if ( Lang13.Bool( O3.client ) && !Lang13.Bool( O3.blinded ) ) {
							O3.show_message( "<span class='danger'>" + user + " took a swipe at " + this + "!</span>", 1 );
						}
					}
				}
			}
			return null;
		}

		// Function from file: ai.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			this.updatehealth();
			return 2;
		}

		// Function from file: ai.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string t1 = null;
			dynamic H = null;
			double? L = null;
			double? L2 = null;
			dynamic target = null;
			dynamic A = null;
			dynamic target2 = null;
			dynamic A2 = null;
			dynamic target3 = null;
			dynamic A3 = null;

			
			if ( Task13.User != this ) {
				return null;
			}
			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["mach_close"] ) ) {
				
				if ( href_list["mach_close"] == "aialerts" ) {
					this.viewalerts = false;
				}
				t1 = "window=" + href_list["mach_close"];
				this.unset_machine();
				Interface13.Browse( this, null, t1 );
			}

			if ( Lang13.Bool( href_list["switchcamera"] ) ) {
				
			}

			if ( Lang13.Bool( href_list["showalerts"] ) ) {
				this.ai_alerts();
			}

			if ( Lang13.Bool( href_list["show_paper"] ) ) {
				
				if ( Lang13.Bool( this.last_paper_seen ) ) {
					Interface13.Browse( this, this.last_paper_seen, "window=show_paper" );
				}
			}

			if ( Lang13.Bool( href_list["jumptoholopad"] ) ) {
				H = Lang13.FindObj( href_list["jumptoholopad"] );

				if ( this.stat == 0 ) {
					
					if ( Lang13.Bool( H ) ) {
						((Ent_Static)H).attack_ai( this );
					} else {
						GlobalFuncs.to_chat( this, "<span class='notice'>Unable to locate the holopad.</span>" );
					}
				}
			}

			if ( Lang13.Bool( href_list["say_word"] ) ) {
				GlobalFuncs.play_vox_word( href_list["say_word"], null, this );
				return null;
			}

			if ( Lang13.Bool( href_list["lawc"] ) ) {
				L = String13.ParseNumber( href_list["lawc"] );

				dynamic _a = this.lawcheck[( L ??0) + 1]; // Was a switch-case, sorry for the mess.
				if ( _a=="Yes" ) {
					this.lawcheck[( L ??0) + 1] = "No";
				} else if ( _a=="No" ) {
					this.lawcheck[( L ??0) + 1] = "Yes";
				}
				this.__CallVerb("State Laws" );
			}

			if ( Lang13.Bool( href_list["lawi"] ) ) {
				L2 = String13.ParseNumber( href_list["lawi"] );

				dynamic _b = this.ioncheck[L2]; // Was a switch-case, sorry for the mess.
				if ( _b=="Yes" ) {
					this.ioncheck[L2] = "No";
				} else if ( _b=="No" ) {
					this.ioncheck[L2] = "Yes";
				}
				this.__CallVerb("State Laws" );
			}

			if ( Lang13.Bool( href_list["laws"] ) ) {
				this.statelaws();
			}

			if ( Lang13.Bool( href_list["track"] ) ) {
				target = Lang13.FindIn( href_list["track"], GlobalVars.mob_list );
				A = Lang13.FindIn( href_list["track2"], GlobalVars.mob_list );

				if ( Lang13.Bool( A ) && Lang13.Bool( target ) ) {
					((Mob_Living_Silicon_Ai)A).ai_actual_track( target );
				}
				return null;
			} else if ( Lang13.Bool( href_list["faketrack"] ) ) {
				target2 = Lang13.FindIn( href_list["track"], GlobalVars.mob_list );
				A2 = Lang13.FindIn( href_list["track2"], GlobalVars.mob_list );

				if ( Lang13.Bool( A2 ) && Lang13.Bool( target2 ) ) {
					A2.cameraFollow = target2;
					GlobalFuncs.to_chat( A2, "Now tracking " + target2.name + " on camera." );

					if ( Task13.User.machine == null ) {
						Task13.User.machine = Task13.User;
					}

					while (this.cameraFollow == target2) {
						GlobalFuncs.to_chat( Task13.User, "Target is not on or near any active cameras on the station. We'll check again in 5 seconds (unless you use the cancel-camera verb)." );
						Task13.Sleep( 40 );
						continue;
					}
				}
				return null;
			}

			if ( Lang13.Bool( href_list["open"] ) ) {
				target3 = Lang13.FindObj( href_list["open"] );
				A3 = Lang13.FindObj( href_list["open2"] );

				if ( Lang13.Bool( A3 ) && Lang13.Bool( target3 ) ) {
					((Mob_Living_Silicon_Ai)A3).open_nearest_door( target3 );
				}
				return null;
			}
			return null;
		}

		// Function from file: ai.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.blinded ) ) {
				Icon13.Flick( "flash", this.flash );
			}

			switch ((int?)( severity )) {
				case 1:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 100 );
						this.adjustFireLoss( 100 );
					}
					break;
				case 2:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 60 );
						this.adjustFireLoss( 60 );
					}
					break;
				case 3:
					
					if ( this.stat != 2 ) {
						this.adjustBruteLoss( 30 );
					}
					break;
			}
			this.updatehealth();
			return false;
		}

		// Function from file: ai.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}

			if ( Rand13.PercentChance( 30 ) ) {
				
				dynamic _a = Rand13.Pick(new object [] { 1, 2 }); // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					this.view_core();
				} else if ( _a==2 ) {
					this.ai_call_shuttle();
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: ai.dm
		public override bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}
			return false;
		}

		// Function from file: ai.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat != 2 ) {
				this.adjustBruteLoss( 60 );
				this.updatehealth();
				return true;
			}
			return false;
		}

		// Function from file: ai.dm
		public override bool? check_eye( Mob user = null ) {
			
			if ( !Lang13.Bool( this.current ) ) {
				return null;
			}
			user.reset_view( this.current );
			return true;
		}

		// Function from file: ai.dm
		public override bool show_malf_ai(  ) {
			dynamic malf = null;
			Mind malfai = null;

			
			if ( GlobalVars.ticker.mode.name == "AI malfunction" ) {
				malf = GlobalVars.ticker.mode;

				foreach (dynamic _a in Lang13.Enumerate( malf.malf_ai, typeof(Mind) )) {
					malfai = _a;
					

					if ( this.mind == malfai ) {
						
						if ( malf.apcs >= 3 ) {
							Interface13.Stat( null, "Time until station control secured: " + Num13.MaxInt( ((int)( malf.AI_win_timeleft / ( malf.apcs / 3 ) )), 0 ) + " seconds" );
						}
					}
				}
			}
			return false;
		}

		// Function from file: tracking.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.ai_camera_list();
			return null;
		}

		// Function from file: eye.dm
		public void view_core(  ) {
			Camerachunk c = null;

			this.current = null;
			this.cameraFollow = null;
			this.unset_machine();

			if ( this.eyeobj != null && this.loc != null ) {
				this.eyeobj.forceMove( this.loc );
			} else {
				GlobalFuncs.to_chat( this, "ERROR: Eyeobj not found. Creating new eye..." );
				this.eyeobj = new Mob_Camera_AiEye( this.loc );
				this.eyeobj.ai = this;
				this.eyeobj.name = "" + this.name + " (AI Eye)";
				this.eyeobj.forceMove( this.loc );
			}

			if ( this.client != null && Lang13.Bool( this.client.eye ) ) {
				this.client.eye = this;
				this.sight &= 65507;
				this.see_in_dark = 0;
				this.see_invisible = 25;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.eyeobj.visibleCameraChunks, typeof(Camerachunk) )) {
				c = _a;
				
				c.remove( this.eyeobj );
			}
			return;
		}

		// Function from file: say.dm
		public void holopad_talk( Game_Data speech = null ) {
			dynamic turf = null;
			dynamic T = null;

			turf = GlobalFuncs.get_turf( this );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( this ) + " (@" + turf.x + "," + turf.y + "," + turf.z + ") Holopad: " + ((dynamic)speech).message ) ) );
			((dynamic)speech).message = GlobalFuncs.trim( ((dynamic)speech).message );

			if ( !Lang13.Bool( ((dynamic)speech).message ) ) {
				return;
			}
			T = this.current;

			if ( T is Obj_Machinery_Hologram_Holopad && T.hologram != null && T.master == this ) {
				((Ent_Dynamic)T).send_speech( speech, 7, "R" );
				GlobalFuncs.to_chat( this, "<i><span class='" + ((dynamic)speech).render_wrapper_classes() + "'>Holopad transmitted, <span class='name'>" + this.real_name + "</span> " + ((dynamic)speech).render_message() + "</span></i>" );
			} else {
				GlobalFuncs.to_chat( this, "No holopad connected." );
			}
			return;
		}

		// Function from file: laws.dm
		public void statelaws(  ) {
			int number = 0;
			int? index = null;
			dynamic law = null;
			string num = null;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			this.say( "Current Active Laws:" );
			number = 1;
			Task13.Sleep( 10 );

			if ( Lang13.Bool( this.laws.zeroth ) ) {
				
				if ( this.lawcheck[1] == "Yes" ) {
					this.say( "0. " + this.laws.zeroth );
					Task13.Sleep( 10 );
				}
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.laws.ion.len) {
				law = this.laws.ion[index];
				num = GlobalFuncs.ionnum();

				if ( Lang13.Length( law ) > 0 ) {
					
					if ( this.ioncheck[index] == "Yes" ) {
						this.say( "" + num + ". " + law );
						Task13.Sleep( 10 );
					}
				}
				index++;
			}
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.laws.inherent.len) {
				law2 = this.laws.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					
					if ( this.lawcheck[( index2 ??0) + 1] == "Yes" ) {
						this.say( "" + number + ". " + law2 );
						Task13.Sleep( 10 );
					}
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.laws.supplied.len) {
				law3 = this.laws.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					
					if ( this.lawcheck.len >= number + 1 ) {
						
						if ( this.lawcheck[number + 1] == "Yes" ) {
							this.say( "" + number + ". " + law3 );
							Task13.Sleep( 10 );
						}
						number++;
					}
				}
				index3++;
			}
			return;
		}

		// Function from file: laws.dm
		public void clear_supplied_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_supplied_laws();
			return;
		}

		// Function from file: laws.dm
		public void add_supplied_law( dynamic number = null, dynamic law = null ) {
			this.laws_sanity_check();
			this.laws.add_supplied_law( number, law );
			return;
		}

		// Function from file: laws.dm
		public void clear_ion_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_ion_laws();
			return;
		}

		// Function from file: laws.dm
		public void notify_slaved( bool? force_sync = null ) {
			force_sync = force_sync ?? false;

			Mob_Living_Silicon_Robot R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon_Robot) )) {
				R = _a;
				

				if ( force_sync == true ) {
					R.lawsync();
				}

				if ( R.lawupdate && R.connected_ai == this ) {
					GlobalFuncs.to_chat( R, "<span class='danger'>...LAWS UPDATED</span>" );
				}
			}
			return;
		}

		// Function from file: laws.dm
		public void add_ion_law( dynamic law = null ) {
			this.laws_sanity_check();
			this.laws.add_ion_law( law );
			this.notify_slaved();
			return;
		}

		// Function from file: laws.dm
		public void clear_inherent_laws(  ) {
			this.laws_sanity_check();
			this.laws.clear_inherent_laws();
			return;
		}

		// Function from file: laws.dm
		public void add_inherent_law( dynamic law = null ) {
			this.laws_sanity_check();
			this.laws.add_inherent_law( law );
			return;
		}

		// Function from file: laws.dm
		public void set_zeroth_law( string law = null, string law_borg = null ) {
			this.laws_sanity_check();
			this.laws.set_zeroth_law( law, law_borg );
			return;
		}

		// Function from file: laws.dm
		public void laws_sanity_check(  ) {
			
			if ( !Lang13.Bool( this.laws ) ) {
				this.laws = Lang13.Call( GlobalVars.base_law_type );
			}
			return;
		}

		// Function from file: laws.dm
		[VerbInfo( name: "Show Laws", group: "AI Commands" )]
		public void show_laws_verb(  ) {
			this.show_laws();
			return;
		}

		// Function from file: ai.dm
		public void light_cameras(  ) {
			ByTable add = null;
			ByTable remove = null;
			ByTable visible = null;
			Camerachunk CC = null;
			Obj_Machinery_Camera C = null;
			Obj_Machinery_Camera C2 = null;
			Obj_Machinery_Camera C3 = null;

			add = new ByTable();
			remove = new ByTable();
			visible = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.eyeobj.visibleCameraChunks, typeof(Camerachunk) )) {
				CC = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( CC.cameras, typeof(Obj_Machinery_Camera) )) {
					C = _a;
					

					if ( !C.can_use() || C.light_disabled || Map13.GetDistance( C, this.eyeobj ) > 7 ) {
						continue;
					}
					visible.Or( C );
				}
			}
			add = visible - this.lit_cameras;
			remove = this.lit_cameras - visible;

			foreach (dynamic _c in Lang13.Enumerate( remove, typeof(Obj_Machinery_Camera) )) {
				C2 = _c;
				
				C2.set_light( 0 );
				this.lit_cameras.Remove( C2 );
			}

			foreach (dynamic _d in Lang13.Enumerate( add, typeof(Obj_Machinery_Camera) )) {
				C3 = _d;
				
				C3.set_light( 5 );
				this.lit_cameras.Or( C3 );
			}
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Return to Main Core", group: "Malfunction" )]
		public void corereturn(  ) {
			Ent_Static apc = null;

			apc = this.loc;

			if ( !( apc is Obj_Machinery_Power_Apc ) ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>You are already in your Main Core.</span>" );
				return;
			}
			((Obj_Machinery_Power_Apc)apc).malfvacate();
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Change Hologram", desc: "Change the default hologram available to AI to something else.", group: "AI Commands" )]
		public void ai_hologram_change(  ) {
			dynamic input = null;
			ByTable personnel_list = null;
			Data_Record t = null;
			dynamic character_icon = null;
			ByTable icon_list = null;

			
			if ( Interface13.Alert( "Would you like to select a hologram based on a crew member or switch to unique avatar?", null, "Crew Member", "Unique" ) == "Crew Member" ) {
				personnel_list = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.data_core.locked, typeof(Data_Record) )) {
					t = _a;
					
					personnel_list["" + t.fields["name"] + ": " + t.fields["rank"]] = t.fields["image"];
				}

				if ( personnel_list.len != 0 ) {
					input = Interface13.Input( "Select a crew member:", null, null, null, personnel_list, InputType.Null | InputType.Any );
					character_icon = personnel_list[input];

					if ( Lang13.Bool( character_icon ) ) {
						GlobalFuncs.qdel( this.holo_icon );
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( character_icon ) );
					}
				} else {
					Interface13.Alert( "No suitable records found. Aborting." );
				}
			} else {
				icon_list = new ByTable(new object [] { "Default", "Floating face", "Cortano", "Spoopy", "343", "Auto", "Four-Leaf", "Yotsuba", "Girl", "Boy", "SHODAN" });
				input = Interface13.Input( "Please select a hologram:", null, null, null, icon_list, InputType.Null | InputType.Any );

				if ( Lang13.Bool( input ) ) {
					GlobalFuncs.qdel( this.holo_icon );
					this.holo_icon = null;

					dynamic _b = input; // Was a switch-case, sorry for the mess.
					if ( _b=="Default" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo1" ) );
					} else if ( _b=="Floating face" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo2" ) );
					} else if ( _b=="Cortano" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo3" ) );
					} else if ( _b=="Spoopy" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo4" ) );
					} else if ( _b=="343" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo5" ) );
					} else if ( _b=="Auto" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo6" ) );
					} else if ( _b=="Four-Leaf" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo7" ) );
					} else if ( _b=="Yotsuba" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo8" ) );
					} else if ( _b=="Girl" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo9" ) );
					} else if ( _b=="Boy" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo10" ) );
					} else if ( _b=="SHODAN" ) {
						this.holo_icon = GlobalFuncs.getHologramIcon( new Icon( "icons/mob/AI.dmi", "holo11" ) );
					}
				}
			}
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "AI Status", group: "AI Commands" )]
		public void ai_statuschange(  ) {
			dynamic emote = null;
			Obj_Machinery M = null;
			Obj_Machinery AISD = null;
			Obj_Machinery SD = null;

			
			if ( Task13.User.isDead() ) {
				GlobalFuncs.to_chat( Task13.User, "You cannot change your emotional status because you are dead!" );
				return;
			}
			emote = Interface13.Input( "Please, select a status!", "AI Status", null, null, GlobalVars.ai_emotions, InputType.Any );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.status_displays, typeof(Obj_Machinery) )) {
				M = _a;
				

				if ( M is Obj_Machinery_AiStatusDisplay ) {
					AISD = M;
					((dynamic)AISD).emotion = emote;
				} else if ( M is Obj_Machinery_StatusDisplay ) {
					SD = M;

					if ( emote == "Friend Computer" ) {
						((dynamic)SD).friendc = 1;
					} else {
						((dynamic)SD).friendc = 0;
					}
				}
			}
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Choose Module", group: "Malfunction" )]
		public void choose_modules(  ) {
			this.malf_picker.use( this );
			return;
		}

		// Function from file: ai.dm
		[VerbInfo( name: "Jump To Network", group: "AI Commands" )]
		public void ai_network_change(  ) {
			ByTable cameralist = null;
			Mob U = null;
			Obj_Machinery_Camera C = null;
			dynamic tempnetwork = null;
			dynamic i = null;
			dynamic old_network = null;
			Obj_Machinery_Camera C2 = null;

			this.unset_machine();
			this.cameraFollow = null;
			cameralist = new ByTable( 0 );

			if ( Task13.User.isDead() ) {
				GlobalFuncs.to_chat( Task13.User, "You can't change your camera network because you are dead!" );
				return;
			}
			U = Task13.User;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _b;
				

				if ( !C.can_use() ) {
					continue;
				}
				tempnetwork = GlobalFuncs.difflist( C.network, GlobalVars.RESTRICTED_CAMERA_NETWORKS, true );

				if ( tempnetwork.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( tempnetwork )) {
						i = _a;
						
						cameralist[i] = i;
					}
				}
			}
			old_network = this.network;
			this.network = Interface13.Input( U, "Which network would you like to view?", null, null, cameralist, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( ((dynamic)U).eyeobj ) ) {
				((Mob_Living_Silicon_Ai)U).view_core();
				return;
			}

			if ( this.network == null ) {
				this.network = old_network;
			} else {
				
				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
					C2 = _c;
					

					if ( !C2.can_use() ) {
						continue;
					}

					if ( Lang13.Bool( C2.network.Contains( this.network ) ) ) {
						((Ent_Dynamic)((dynamic)U).eyeobj).forceMove( GlobalFuncs.get_turf( C2 ) );
						break;
					}
				}
				GlobalFuncs.to_chat( this, "<span class='notice'>Switched to " + this.network + " camera network.</span>" );
			}
			return;
		}

		// Function from file: ai.dm
		public bool switchCamera( dynamic C = null ) {
			this.cameraFollow = null;

			if ( !Lang13.Bool( C ) || this.stat == 2 ) {
				return false;
			}

			if ( !( this.eyeobj != null ) ) {
				this.view_core();
				return false;
			}
			this.eyeobj.forceMove( GlobalFuncs.get_turf( C ) );
			return true;
		}

		// Function from file: ai.dm
		[VerbInfo( group: "AI Commands" )]
		public void ai_cancel_call(  ) {
			Mob_Living_Silicon_Ai AI = null;

			
			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "You can't send the shuttle back because you are dead!" );
				return;
			}

			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				AI = this;

				if ( AI.control_disabled ) {
					GlobalFuncs.to_chat( this, "Wireless control is disabled!" );
					return;
				}
			}
			GlobalFuncs.recall_shuttle( this );
			return;
		}

		// Function from file: ai.dm
		public void ai_call_shuttle(  ) {
			Mob_Living_Silicon_Ai AI = null;
			string confirm = null;
			dynamic justification = null;
			dynamic C = null;

			
			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "You can't call the shuttle because you are dead!" );
				return;
			}

			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				AI = this;

				if ( AI.control_disabled ) {
					GlobalFuncs.to_chat( Task13.User, "Wireless control is disabled!" );
					return;
				}
			}
			confirm = Interface13.Alert( "Are you sure you want to call the shuttle?", "Confirm Shuttle Call", "Yes", "No" );

			if ( confirm == "Yes" ) {
				justification = GlobalFuncs.stripped_input( Task13.User, "Please input a concise justification for the shuttle call. Note that failure to properly justify a shuttle call may lead to recall or termination", "Nanotrasen Anti-Comdom Systems" );
				GlobalFuncs.call_shuttle_proc( this, justification );
			}

			if ( GlobalVars.emergency_shuttle.online ) {
				C = Lang13.FindIn( typeof(Obj_Machinery_Computer_Communications), GlobalVars.machines );

				if ( Lang13.Bool( C ) ) {
					((Obj_Machinery_Computer_Communications)C).post_status( "shuttle" );
				}
			}
			return;
		}

		// Function from file: ai.dm
		public void ai_roster(  ) {
			this.show_station_manifest();
			return;
		}

		// Function from file: ai.dm
		public void ai_alerts(  ) {
			string dat = null;
			dynamic cat = null;
			ByTable L = null;
			dynamic alarm = null;
			dynamic alm = null;
			dynamic A = null;
			dynamic C = null;
			ByTable sources = null;
			string dat2 = null;
			Obj_Machinery_Camera I = null;
			dynamic Ctmp = null;

			dat = new Txt( "<HEAD><TITLE>Current Station Alerts</TITLE><META HTTP-EQUIV='Refresh' CONTENT='10'></HEAD><BODY>\n\n<A HREF='?src=" ).Ref( this ).str( ";mach_close=aialerts'>Close</A><BR><BR>" ).ToString();

			foreach (dynamic _c in Lang13.Enumerate( this.alarms )) {
				cat = _c;
				
				dat += "<B>" + cat + "</B><BR>\n";
				L = this.alarms[cat];

				if ( L.len != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( L )) {
						alarm = _b;
						
						alm = L[alarm];
						A = alm[1];
						C = alm[2];
						sources = alm[3];
						dat += "<NOBR>";

						if ( Lang13.Bool( C ) && C is ByTable ) {
							dat2 = "";

							foreach (dynamic _a in Lang13.Enumerate( C, typeof(Obj_Machinery_Camera) )) {
								I = _a;
								
								dat2 += new Txt().item( ( dat2 == "" ? "" : " | " ) ).str( "<A HREF=?src=" ).Ref( this ).str( ";switchcamera=" ).Ref( I ).str( ">" ).item( I.c_tag ).str( "</A>" ).ToString();
							}
							dat += "-- " + A.name + " (" + ( dat2 != "" ? dat2 : "No Camera" ) + ")";
						} else if ( Lang13.Bool( C ) && C is Obj_Machinery_Camera ) {
							Ctmp = C;
							dat += new Txt( "-- " ).item( A.name ).str( " (<A HREF=?src=" ).Ref( this ).str( ";switchcamera=" ).Ref( C ).str( ">" ).item( Ctmp.c_tag ).str( "</A>)" ).ToString();
						} else {
							dat += "-- " + A.name + " (No Camera)";
						}

						if ( sources.len > 1 ) {
							dat += "- " + sources.len + " sources";
						}
						dat += "</NOBR><BR>\n";
					}
				} else {
					dat += "-- All Systems Nominal<BR>\n";
				}
				dat += "<BR>\n";
			}
			this.viewalerts = true;
			Interface13.Browse( this, dat, "window=aialerts&can_close=0" );
			return;
		}

		// Function from file: PDA.dm
		public void cmd_show_message_log(  ) {
			string HTML = null;

			
			if ( Task13.User.isDead() ) {
				GlobalFuncs.to_chat( Task13.User, "You can't do that because you are dead!" );
				return;
			}

			if ( !( this.aiPDA == null ) ) {
				HTML = "<html><head><title>AI PDA Message Log</title></head><body>" + ((dynamic)this.aiPDA).tnote + "</body></html>";
				Interface13.Browse( Task13.User, HTML, "window=log;size=400x444;border=1;can_resize=1;can_close=1;can_minimize=0" );
			} else {
				GlobalFuncs.to_chat( Task13.User, "You do not have a PDA. You should make an issue report about this." );
			}
			return;
		}

		// Function from file: PDA.dm
		public void cmd_send_pdamesg(  ) {
			ByTable names = null;
			ByTable plist = null;
			ByTable namecounts = null;
			Obj P = null;
			string name = null;
			dynamic c = null;
			dynamic selected = null;

			names = new ByTable();
			plist = new ByTable();
			namecounts = new ByTable();

			if ( Task13.User.stat == 2 ) {
				GlobalFuncs.to_chat( Task13.User, "You can't send PDA messages because you are dead!" );
				return;
			}

			if ( Lang13.Bool( ((dynamic)this.aiPDA).toff ) ) {
				GlobalFuncs.to_chat( Task13.User, "Turn on your receiver in order to send messages." );
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_viewable_pdas(), typeof(Obj_Item_Device_Pda) )) {
				P = _a;
				

				if ( P == this ) {
					continue;
				} else if ( P == this.aiPDA ) {
					continue;
				}
				name = ((dynamic)P).owner;

				if ( names.Contains( name ) ) {
					namecounts[name]++;
					name = "" + name + " (" + namecounts[name] + ")";
				} else {
					names.Add( name );
					namecounts[name] = 1;
				}
				plist["" + name] = P;
			}
			c = Interface13.Input( Task13.User, "Please select a PDA", null, null, GlobalFuncs.sortList( plist ), InputType.Null | InputType.Any );

			if ( !Lang13.Bool( c ) ) {
				return;
			}
			selected = plist[c];
			((dynamic)this.aiPDA).create_message( this, selected );
			return;
		}

		// Function from file: tracking.dm
		public void ai_actual_track( dynamic target = null ) {
			Mob U = null;
			dynamic H = null;

			
			if ( !( target is Mob_Living ) ) {
				return;
			}
			U = Task13.User;
			((dynamic)U).cameraFollow = target;
			GlobalFuncs.to_chat( U, "Now tracking " + target.name + " on camera." );
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (((dynamic)U).cameraFollow == target) {
					
					if ( ((dynamic)U).cameraFollow == null ) {
						return;
					}

					if ( target is Mob_Living_Carbon_Human ) {
						H = target;

						if ( Lang13.Bool( H.wear_id ) && ((Obj_Item)H.wear_id).GetID() is Obj_Item_Weapon_Card_Id_Syndicate ) {
							GlobalFuncs.to_chat( U, "Follow camera mode terminated." );
							((dynamic)U).cameraFollow = null;
							return;
						}

						if ( H.digitalcamo ) {
							GlobalFuncs.to_chat( U, "Follow camera mode terminated." );
							((dynamic)U).cameraFollow = null;
							return;
						}
					}

					if ( target.loc is Obj_Effect_Dummy ) {
						GlobalFuncs.to_chat( U, "Follow camera mode ended." );
						((dynamic)U).cameraFollow = null;
						return;
					}

					if ( !GlobalFuncs.near_camera( target ) ) {
						GlobalFuncs.to_chat( U, "Target is not near any active cameras." );
						Task13.Sleep( 100 );
						continue;
					}

					if ( Lang13.Bool( ((dynamic)U).eyeobj ) ) {
						((Ent_Dynamic)((dynamic)U).eyeobj).forceMove( GlobalFuncs.get_turf( target ) );
					} else {
						this.view_core();
						return;
					}
					Task13.Sleep( 10 );
				}
				return;
			}));
			return;
		}

		// Function from file: tracking.dm
		public void open_nearest_door( dynamic target = null ) {
			dynamic H = null;
			Obj_Machinery_Door_Airlock tobeopened = null;
			int dist = 0;
			Obj_Machinery_Door_Airlock D = null;
			string nhref = null;

			
			if ( !( target is Mob_Living ) ) {
				return;
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( target is Mob_Living_Carbon_Human ) {
					H = target;

					if ( Lang13.Bool( H.wear_id ) && ((Obj_Item)H.wear_id).GetID() is Obj_Item_Weapon_Card_Id_Syndicate ) {
						GlobalFuncs.to_chat( this, "Unable to locate an airlock" );
						return;
					}

					if ( H.digitalcamo ) {
						GlobalFuncs.to_chat( this, "Unable to locate an airlock" );
						return;
					}
				}

				if ( !GlobalFuncs.near_camera( target ) ) {
					GlobalFuncs.to_chat( this, "Target is not near any active cameras." );
					return;
				}
				dist = -1;

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( target, 3 ), typeof(Obj_Machinery_Door_Airlock) )) {
					D = _a;
					

					if ( !D.density ) {
						continue;
					}

					if ( dist < 0 ) {
						dist = Map13.GetDistance( D, target );
						tobeopened = D;
					} else if ( dist > Map13.GetDistance( D, target ) ) {
						dist = Map13.GetDistance( D, target );
						tobeopened = D;
					}
				}

				if ( tobeopened != null ) {
					
					switch ((string)( Interface13.Alert( this, new Txt( "Do you want to open " ).the( tobeopened ).item().str( " for " ).item( target ).str( "?" ).ToString(), "Doorknob_v2a.exe", "Yes", "No" ) )) {
						case "Yes":
							nhref = new Txt( "src=" ).Ref( tobeopened ).str( ";aiEnable=7" ).ToString();
							tobeopened.Topic( nhref, String13.ParseUrlParams( nhref ), tobeopened );
							GlobalFuncs.to_chat( this, new Txt( "<span class='notice'>You've opened " ).the( tobeopened ).item().str( " for " ).item( target ).str( ".</span>" ).ToString() );
							break;
						case "No":
							GlobalFuncs.to_chat( this, "<span class='warning'>You deny the request.</span>" );
							break;
					}
				} else {
					GlobalFuncs.to_chat( this, "<span class='warning'>You've failed to open an airlock for " + target + "</span>" );
				}
				return;
				return;
			}));
			return;
		}

		// Function from file: tracking.dm
		public dynamic trackable_mobs(  ) {
			Mob_Living M = null;
			dynamic T = null;
			bool human = false;
			Mob_Living H = null;
			string name = null;
			dynamic targets = null;

			this.track.names.len = 0;
			this.track.namecounts.len = 0;
			this.track.humans.len = 0;
			this.track.others.len = 0;

			if ( Task13.User.stat == 2 ) {
				return new ByTable();
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living) )) {
				M = _a;
				
				T = GlobalFuncs.get_turf( M );

				if ( !Lang13.Bool( T ) ) {
					continue;
				}

				if ( Convert.ToInt32( T.z ) == 2 ) {
					continue;
				}

				if ( Convert.ToDouble( T.z ) > 6 ) {
					continue;
				}

				if ( M == Task13.User ) {
					continue;
				}

				if ( M.invisibility != 0 ) {
					continue;
				}

				if ( M.digitalcamo ) {
					continue;
				}
				human = false;

				if ( M is Mob_Living_Carbon_Human ) {
					human = true;
					H = M;

					if ( Lang13.Bool( ((dynamic)H).wear_id ) && ((Obj_Item)((dynamic)H).wear_id).GetID() is Obj_Item_Weapon_Card_Id_Syndicate ) {
						continue;
					}
				}

				if ( M is Mob_Living_Carbon_Alien ) {
					continue;
				}

				if ( !GlobalFuncs.near_camera( M ) ) {
					continue;
				}
				name = M.name;

				if ( this.track.names.Contains( name ) ) {
					this.track.namecounts[name]++;
					name = "" + name + " (" + this.track.namecounts[name] + ")";
				} else {
					this.track.names.Add( name );
					this.track.namecounts[name] = 1;
				}

				if ( human ) {
					this.track.humans[name] = M;
				} else {
					this.track.others[name] = M;
				}
			}
			targets = GlobalFuncs.sortList( this.track.humans ) + GlobalFuncs.sortList( this.track.others );
			return targets;
		}

		// Function from file: tracking.dm
		public bool ai_camera_list( dynamic camera = null ) {
			dynamic C = null;

			
			if ( !Lang13.Bool( camera ) ) {
				return false;
			}
			C = this.track.cameras[camera];
			this.eyeobj.forceMove( C );
			return false;
		}

		// Function from file: tracking.dm
		public ByTable get_camera_list(  ) {
			ByTable L = null;
			Obj_Machinery_Camera C = null;
			ByTable T = null;
			Obj_Machinery_Camera C2 = null;
			dynamic tempnetwork = null;

			this.track.cameras.len = 0;

			if ( this.stat == 2 ) {
				return null;
			}
			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
				C = _a;
				
				L.Add( C );
			}
			GlobalFuncs.camera_sort( L );
			T = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( L, typeof(Obj_Machinery_Camera) )) {
				C2 = _b;
				
				tempnetwork = C2.network & this.network;

				if ( tempnetwork.len != 0 ) {
					T["" + C2.c_tag + ( C2.can_use() ? null : " (Deactivated)" )] = C2;
				}
			}
			this.track.cameras = T;
			return T;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Upgrade Camera", group: "Malfunction" )]
		[VerbArg( 1, InputType.Obj, VerbArgFilter.FromGlobalVarMemberVar, "cameranet", "cameras" )]
		public void upgrade_camera( Obj_Machinery_Camera C = null ) {
			dynamic UC = null;
			bool upgraded = false;

			
			if ( C is Obj_Machinery_Camera ) {
				UC = Lang13.FindIn( typeof(AIModule_Small_UpgradeCamera), this.current_modules );

				if ( Lang13.Bool( UC ) ) {
					
					if ( Convert.ToDouble( UC.uses ) > 0 ) {
						
						if ( C.assembly != null ) {
							upgraded = false;

							if ( !Lang13.Bool( C.isXRay() ) ) {
								C.upgradeXRay();
								GlobalVars.cameranet.updateVisibility( C, false );
								upgraded = true;
							}

							if ( !Lang13.Bool( C.isEmpProof() ) ) {
								C.upgradeEmpProof();
								upgraded = true;
							}

							if ( !Lang13.Bool( C.isMotion() ) ) {
								C.upgradeMotion();
								upgraded = true;
								GlobalVars.machines.Or( C );
							}

							if ( upgraded ) {
								UC.uses--;
								C.visible_message( new Txt( "<span class='notice'>" ).icon( C ).str( " *beep*</span>" ).ToString() );
								GlobalFuncs.to_chat( this, "Camera successully upgraded!" );
							} else {
								GlobalFuncs.to_chat( this, "This camera is already upgraded!" );
							}
						}
					} else {
						GlobalFuncs.to_chat( this, "Out of uses." );
					}
				}
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Reactivate Camera", group: "Malfunction" )]
		[VerbArg( 1, InputType.Obj, VerbArgFilter.FromGlobalVarMemberVar, "cameranet", "cameras" )]
		public void reactivate_camera( Obj_Machinery_Camera C = null ) {
			AIModule_Small_ReactivateCamera camera = null;

			
			if ( C is Obj_Machinery_Camera ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.current_modules, typeof(AIModule_Small_ReactivateCamera) )) {
					camera = _a;
					

					if ( camera.uses > 0 ) {
						
						if ( !C.status ) {
							C.deactivate( this );
							camera.uses--;
						} else {
							GlobalFuncs.to_chat( this, "This camera is either active, or not repairable." );
						}
					} else {
						GlobalFuncs.to_chat( this, "Out of uses." );
					}
				}
			} else {
				GlobalFuncs.to_chat( this, "That's not a camera." );
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Hack intercept", group: "Malfunction" )]
		public void interhack(  ) {
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "interhack" ) );
			((GameMode_Malfunction)GlobalVars.ticker.mode).hack_intercept();
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Blackout", group: "Malfunction" )]
		public void blackout(  ) {
			AIModule_Small_Blackout blackout = null;
			Obj_Machinery_Power_Apc apc = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.current_modules, typeof(AIModule_Small_Blackout) )) {
				blackout = _b;
				

				if ( blackout.uses > 0 ) {
					blackout.uses--;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.power_machines, typeof(Obj_Machinery_Power_Apc) )) {
						apc = _a;
						

						if ( Rand13.PercentChance( apc.overload * 30 ) ) {
							apc.overload_lighting();
						} else {
							apc.overload++;
						}
					}
				} else {
					GlobalFuncs.to_chat( this, "Out of uses." );
				}
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "High Res Cams", group: "Malfunction" )]
		public void highrescameras(  ) {
			this.ai_flags |= 2;
			this.eyeobj.addHear();
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "highrescameras" ) );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Place Robotic Factory", group: "Malfunction" )]
		public void place_transformer(  ) {
			dynamic PCT = null;
			string sure = null;
			dynamic middle = null;
			ByTable turfs = null;
			string alert_msg = null;
			Camerachunk C = null;
			Tile_Simulated_Floor T = null;
			Tile_Simulated_Floor F = null;
			Ent_Dynamic AM = null;

			
			if ( !( this.eyeobj != null ) ) {
				return;
			}

			if ( !( this.loc is Tile ) ) {
				return;
			}
			PCT = Lang13.FindIn( typeof(AIModule_Large_PlaceCyborgTransformer), this.current_modules );

			if ( !Lang13.Bool( PCT ) ) {
				return;
			}

			if ( Convert.ToDouble( PCT.uses ) < 1 ) {
				GlobalFuncs.to_chat( this, "Out of uses." );
				return;
			}
			sure = Interface13.Alert( this, "Make sure the room it is in is big enough, there is camera vision and that there is a 1x3 area for the machine. Are you sure you want to place the machine here?", "Are you sure?", "Yes", "No" );

			if ( sure != "Yes" ) {
				return;
			}
			middle = GlobalFuncs.get_turf( this.eyeobj.loc );
			turfs = new ByTable(new object [] { 
				middle, 
				Map13.GetTile( Convert.ToInt32( middle.x - 1 ), Convert.ToInt32( middle.y ), Convert.ToInt32( middle.z ) ), 
				Map13.GetTile( Convert.ToInt32( middle.x + 1 ), Convert.ToInt32( middle.y ), Convert.ToInt32( middle.z ) )
			 });
			alert_msg = "There isn't enough room. Make sure you are placing the machine in a clear area and on a floor.";
			C = GlobalVars.cameranet.getCameraChunk( Lang13.IntNullable( middle.x ), Lang13.IntNullable( middle.y ), Convert.ToInt32( middle.z ) );

			if ( !Lang13.Bool( C.visibleTurfs[middle] ) ) {
				Interface13.Alert( this, "We cannot get camera vision of this location." );
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( turfs, typeof(Tile_Simulated_Floor) )) {
				T = _b;
				
				F = T;

				foreach (dynamic _a in Lang13.Enumerate( F.contents, typeof(Ent_Dynamic) )) {
					AM = _a;
					

					if ( AM.density ) {
						Interface13.Alert( this, alert_msg );
						return;
					}
				}
			}
			new Obj_Machinery_Transformer_Conveyor( middle );
			GlobalFuncs.playsound( middle, "sound/effects/phasein.ogg", 100, 1 );
			this.can_shunt = false;
			PCT.uses -= 1;
			GlobalFuncs.to_chat( this, "You cannot shunt anymore." );
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Overload Machine", group: "Malfunction" )]
		[VerbArg( 1, InputType.Obj, VerbArgFilter.FromGlobalVar, "machines" )]
		public void overload_machine( dynamic M = null ) {
			AIModule_Small_OverloadMachine overload = null;
			dynamic V = null;

			
			if ( M is Obj_Machinery ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.current_modules, typeof(AIModule_Small_OverloadMachine) )) {
					overload = _b;
					

					if ( overload.uses > 0 ) {
						overload.uses--;

						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( null, M ) )) {
							V = _a;
							
							V.show_message( "<span class='notice'>You hear a loud electrical buzzing sound!</span>", 2 );
						}
						Task13.Schedule( 50, (Task13.Closure)(() => {
							GlobalFuncs.explosion( GlobalFuncs.get_turf( M ), -1, 1, 2, 3 );
							GlobalFuncs.qdel( M );
							return;
						}));
					} else {
						GlobalFuncs.to_chat( this, "Out of uses." );
					}
				}
			} else {
				GlobalFuncs.to_chat( this, "That's not a machine." );
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Disable RCDs", group: "Malfunction" )]
		public void disable_rcd(  ) {
			AIModule_Large_DisableRcd rcdmod = null;
			Obj_Item_Device_Rcd_Matter_Engineering rcd = null;
			Obj_Item_MechaParts_MechaEquipment_Tool_Rcd rcd2 = null;

			
			foreach (dynamic _c in Lang13.Enumerate( this.current_modules, typeof(AIModule_Large_DisableRcd) )) {
				rcdmod = _c;
				

				if ( rcdmod.uses > 0 ) {
					rcdmod.uses--;

					foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_Rcd_Matter_Engineering) )) {
						rcd = _a;
						
						rcd.disabled = true;
					}

					foreach (dynamic _b in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_MechaParts_MechaEquipment_Tool_Rcd) )) {
						rcd2 = _b;
						
						rcd2.disabled = true;
					}
					GlobalFuncs.to_chat( this, "RCD-disabling pulse emitted." );
				} else {
					GlobalFuncs.to_chat( this, "Out of uses." );
				}
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Upgrade Turrets", group: "Malfunction" )]
		public void upgrade_turrets(  ) {
			Obj_Machinery_Turret turret = null;

			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "upgrade_turrets" ) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Turret) )) {
				turret = _a;
				
				turret.health += 30;
				turret.shot_delay = 20;
			}
			return;
		}

		// Function from file: Malf_Modules.dm
		[VerbInfo( name: "Fireproof Core", group: "Malfunction" )]
		public void fireproof_core(  ) {
			this.ai_flags |= 1;
			this.verbs.Remove( typeof(Mob_Living_Silicon_Ai).GetMethod( "fireproof_core" ) );
			GlobalFuncs.to_chat( this, "<span class='warning'>Core fireproofed.</span>" );
			return;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.assigned_role = "AI";
			return;
		}

		// Function from file: ai.dm
		public override bool AltClickOn( Ent_Static A = null ) {
			A.AIAltClick( this );
			return false;
		}

		// Function from file: ai.dm
		public override void CtrlClickOn( Ent_Static A = null ) {
			A.AICtrlClick(  );
			return;
		}

		// Function from file: ai.dm
		public override void ShiftClickOn( Ent_Static A = null ) {
			A.AIShiftClick(  );
			return;
		}

		// Function from file: ai.dm
		public override void RangedAttack( Ent_Static A = null, string _params = null ) {
			A.attack_ai( this );
			return;
		}

		// Function from file: ai.dm
		public override void UnarmedAttack( Ent_Static A = null, bool proximity_flag = false, string _params = null ) {
			A.attack_ai( this );
			return;
		}

		// Function from file: ai.dm
		public override bool ClickOn( Ent_Static A = null, string _params = null ) {
			ByTable modifiers = null;

			
			if ( this.click_delayer.blocked() ) {
				return false;
			}
			this.click_delayer.setDelay( 1 );

			if ( this.client.buildmode != 0 ) {
				GlobalFuncs.build_click( this, this.client.buildmode, _params, A );
				return false;
			}

			if ( this.control_disabled || Lang13.Bool( this.stat ) ) {
				return false;
			}
			modifiers = String13.ParseUrlParams( _params );

			if ( Lang13.Bool( modifiers["middle"] ) ) {
				this.MiddleClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["shift"] ) ) {
				this.ShiftClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["alt"] ) ) {
				this.AltClickOn( A );
				return false;
			}

			if ( Lang13.Bool( modifiers["ctrl"] ) ) {
				this.CtrlClickOn( A );
				return false;
			}

			if ( this.attack_delayer.blocked() ) {
				return false;
			}

			if ( this.aicamera.in_camera_mode ) {
				this.aicamera.camera_mode_off();
				this.aicamera.captureimage( A, Task13.User );
				return false;
			}
			A.add_hiddenprint( this );
			A.attack_ai( this );
			return false;
		}

		// Function from file: ai.dm
		public override void DblClickOn( Ent_Static A = null, string _params = null ) {
			
			if ( this.client.buildmode != 0 ) {
				GlobalFuncs.build_click( this, this.client.buildmode, _params, A );
				return;
			}

			if ( this.control_disabled || Lang13.Bool( this.stat ) ) {
				return;
			}

			if ( A is Mob ) {
				this.ai_actual_track( A );
			} else {
				A.move_camera_by_click();
			}
			return;
		}

		// Function from file: ai.dm
		[Verb]
		[VerbInfo( name: "Cancel Camera View", group: "OOC" )]
		public override void cancel_camera(  ) {
			this.view_core();
			return;
		}

		// Function from file: eye.dm
		[Verb]
		[VerbInfo( name: "Toggle Camera Acceleration", group: "AI Commands" )]
		public void toggle_acceleration(  ) {
			this.acceleration = !this.acceleration;
			GlobalFuncs.to_chat( Task13.User, "Camera acceleration has been toggled " + ( this.acceleration ? "on" : "off" ) + "." );
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Announcement", desc: "Send an announcement to the crew", group: "AI Commands" )]
		public void announcement(  ) {
			Mob AI = null;
			dynamic message = null;
			ByTable words = null;
			ByTable incorrect_words = null;
			int total_word_len = 0;
			dynamic word = null;
			bool wordlen = false;
			dynamic word2 = null;

			
			if ( this.parent != null && this.parent is Mob_Living_Silicon_Ai && Lang13.Bool( this.parent.stat ) ) {
				return;
			}

			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				AI = Task13.User;

				if ( Lang13.Bool( ((dynamic)AI).control_disabled ) ) {
					GlobalFuncs.to_chat( Task13.User, "Wireless control is disabled!" );
					return;
				}
			}

			if ( GlobalVars.announcing_vox > Game13.time ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>Please wait " + Num13.Floor( ( GlobalVars.announcing_vox - Game13.time ) / 10 ) + " seconds.</span>" );
				return;
			}
			message = Interface13.Input( this, "WARNING: Misuse of this verb can result in you being job banned. More help is available in 'Announcement Help'", "Announcement", this.last_announcement, null, InputType.Str );
			this.last_announcement = message;

			if ( !Lang13.Bool( message ) || GlobalVars.announcing_vox > Game13.time ) {
				return;
			}
			words = GlobalFuncs.text2list( GlobalFuncs.trim( message ), " " );
			incorrect_words = new ByTable();

			if ( words.len > 30 ) {
				words.len = 30;
			}
			total_word_len = 0;

			foreach (dynamic _a in Lang13.Enumerate( words )) {
				word = _a;
				
				word = String13.ToLower( GlobalFuncs.trim( word ) );

				if ( !Lang13.Bool( word ) ) {
					words.Remove( word );
					continue;
				}

				if ( !Lang13.Bool( GlobalVars.vox_sounds[word] ) ) {
					incorrect_words.Add( word );
				}
				wordlen = true;

				if ( GlobalVars.vox_wordlen.Contains( word ) ) {
					wordlen = Lang13.Bool( GlobalVars.vox_wordlen[word] );
				}

				if ( total_word_len + ( wordlen ?1:0) > 50 ) {
					GlobalFuncs.to_chat( this, "<span class='notice'>There are too many words in this announcement.</span>" );
					return;
				}
				total_word_len += wordlen ?1:0;
			}

			if ( incorrect_words.len != 0 ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>These words are not available on the announcement system: " + GlobalFuncs.english_list( incorrect_words ) + ".</span>" );
				return;
			}
			GlobalVars.announcing_vox = Game13.time + 600;
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name_admin( this ) + " made a vocal announcement with the following message: " + message + "." ) ) );

			foreach (dynamic _b in Lang13.Enumerate( words )) {
				word2 = _b;
				
				GlobalFuncs.play_vox_word( word2, this.z, null );
			}
			return;
		}

		// Function from file: say.dm
		[Verb]
		[VerbInfo( name: "Announcement Help", desc: "Display a list of vocal words to announce to the crew.", group: "AI Commands" )]
		public void announcement_help(  ) {
			dynamic dat = null;
			int index = 0;
			dynamic word = null;
			Browser popup = null;

			dat = new ByTable(new object [] { 
				"Here is a list of words you can type into the 'Announcement' button to create sentences to vocally announce to everyone on the same level at you.<BR> <UL><LI>You can also click on the word to preview it.</LI><LI>You can only say 30 words for every announcement.</LI><LI>Do not use punctuation as you would normally, if you want a pause you can use the full stop and comma characters by separating them with spaces, like so: 'Alpha . Test , Bravo'.</LI></UL><font class='bad'>WARNING:</font><BR>Misuse of the announcement system will get you job banned.<HR>"
			 });
			index = 0;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.vox_sounds )) {
				word = _a;
				
				index++;
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";say_word=" ).item( word ).str( "'>" ).item( GlobalFuncs.capitalize( word ) ).str( "</A>" ).ToString();

				if ( index != GlobalVars.vox_sounds.len ) {
					dat += " / ";
				}
			}
			dat = GlobalFuncs.list2text( dat );
			popup = new Browser( this, "announce_help", "Announcement Help", 500, 400 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: laws.dm
		[Verb]
		[VerbInfo( name: "State Laws", desc: "State your law(s) to the crew", group: "AI Commands" )]
		public void checklaws(  ) {
			string list = null;
			int? index = null;
			dynamic law = null;
			int number = 0;
			int? index2 = null;
			dynamic law2 = null;
			int? index3 = null;
			dynamic law3 = null;

			list = "<b>Which laws do you want to include when stating them for the crew?</b><br><br>";

			if ( Lang13.Bool( this.laws.zeroth ) ) {
				
				if ( !Lang13.Bool( this.lawcheck[1] ) ) {
					this.lawcheck[1] = "No";
				}
				list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=0'>" ).item( this.lawcheck[1] ).str( " 0:</A> " ).item( this.laws.zeroth ).str( "<BR>" ).ToString();
			}
			index = null;
			index = 1;

			while (( index ??0) <= this.laws.ion.len) {
				law = this.laws.ion[index];

				if ( Lang13.Length( law ) > 0 ) {
					
					if ( !Lang13.Bool( this.ioncheck[index] ) ) {
						this.ioncheck[index] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawi=" ).item( index ).str( "'>" ).item( this.ioncheck[index] ).str( " " ).item( GlobalFuncs.ionnum() ).str( ":</A> " ).item( law ).str( "<BR>" ).ToString();
					this.ioncheck.len += 1;
				}
				index++;
			}
			number = 1;
			index2 = null;
			index2 = 1;

			while (( index2 ??0) <= this.laws.inherent.len) {
				law2 = this.laws.inherent[index2];

				if ( Lang13.Length( law2 ) > 0 ) {
					this.lawcheck.len += 1;

					if ( !Lang13.Bool( this.lawcheck[number + 1] ) ) {
						this.lawcheck[number + 1] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=" ).item( number ).str( "'>" ).item( this.lawcheck[number + 1] ).str( " " ).item( number ).str( ":</A> " ).item( law2 ).str( "<BR>" ).ToString();
					number++;
				}
				index2++;
			}
			index3 = null;
			index3 = 1;

			while (( index3 ??0) <= this.laws.supplied.len) {
				law3 = this.laws.supplied[index3];

				if ( Lang13.Length( law3 ) > 0 ) {
					this.lawcheck.len += 1;

					if ( !Lang13.Bool( this.lawcheck[number + 1] ) ) {
						this.lawcheck[number + 1] = "Yes";
					}
					list += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";lawc=" ).item( number ).str( "'>" ).item( this.lawcheck[number + 1] ).str( " " ).item( number ).str( ":</A> " ).item( law3 ).str( "<BR>" ).ToString();
					number++;
				}
				index3++;
			}
			list += new Txt( "<br><br><A href='byond://?src=" ).Ref( this ).str( ";laws=1'>State Laws</A>" ).ToString();
			Interface13.Browse( Task13.User, list, "window=laws" );
			return;
		}

		// Function from file: ai.dm
		[Verb]
		[VerbInfo( name: "Toggle Camera Light", desc: "Toggle internal infrared camera light", group: "AI Commands" )]
		public void toggle_camera_light(  ) {
			Obj_Machinery_Camera C = null;

			
			if ( this.stat != 0 ) {
				return;
			}
			this.camera_light_on = !this.camera_light_on;

			if ( !this.camera_light_on ) {
				GlobalFuncs.to_chat( this, "Camera lights deactivated." );

				foreach (dynamic _a in Lang13.Enumerate( this.lit_cameras, typeof(Obj_Machinery_Camera) )) {
					C = _a;
					
					C.set_light( 0 );
					this.lit_cameras = new ByTable();
				}
				return;
			}
			this.light_cameras();
			GlobalFuncs.to_chat( this, "Camera lights activated." );
			return;
		}

		// Function from file: ai.dm
		[Verb]
		[VerbInfo( name: "Set AI Core Display", group: "AI Commands" )]
		public void pick_icon(  ) {
			dynamic icontype = null;

			
			if ( Lang13.Bool( this.stat ) || this.aiRestorePowerRoutine != 0 ) {
				return;
			}
			icontype = "";

			if ( this.custom_sprite ) {
				icontype = "Custom";
			} else {
				icontype = Interface13.Input( "Select an icon!", "AI", null, null, new ByTable(new object [] { 
					"Monochrome", 
					"Blue", 
					"Inverted", 
					"Text", 
					"Smiley", 
					"Angry", 
					"Dorf", 
					"Matrix", 
					"Bliss", 
					"Firewall", 
					"Green", 
					"Red", 
					"Broken Output", 
					"Triumvirate", 
					"Triumvirate Static", 
					"Searif", 
					"Ravensdale", 
					"Serithi", 
					"Static", 
					"Wasp", 
					"Robert House", 
					"Red October", 
					"Fabulous", 
					"Girl", 
					"Girl Malf", 
					"Boy", 
					"Boy Malf", 
					"Four-Leaf", 
					"Yes Man", 
					"Hourglass", 
					"Patriot", 
					"Pirate", 
					"Royal"
				 }), InputType.Null | InputType.Any );
			}

			dynamic _a = icontype; // Was a switch-case, sorry for the mess.
			if ( _a=="Custom" ) {
				this.icon_state = "" + this.ckey + "-ai";
			} else if ( _a=="Clown" ) {
				this.icon_state = "ai-clown2";
			} else if ( _a=="Monochrome" ) {
				this.icon_state = "ai-mono";
			} else if ( _a=="Inverted" ) {
				this.icon_state = "ai-u";
			} else if ( _a=="Firewall" ) {
				this.icon_state = "ai-magma";
			} else if ( _a=="Green" ) {
				this.icon_state = "ai-wierd";
			} else if ( _a=="Red" ) {
				this.icon_state = "ai-malf";
			} else if ( _a=="Broken Output" ) {
				this.icon_state = "ai-static";
			} else if ( _a=="Text" ) {
				this.icon_state = "ai-text";
			} else if ( _a=="Smiley" ) {
				this.icon_state = "ai-smiley";
			} else if ( _a=="Matrix" ) {
				this.icon_state = "ai-matrix";
			} else if ( _a=="Angry" ) {
				this.icon_state = "ai-angryface";
			} else if ( _a=="Dorf" ) {
				this.icon_state = "ai-dorf";
			} else if ( _a=="Bliss" ) {
				this.icon_state = "ai-bliss";
			} else if ( _a=="Triumvirate" ) {
				this.icon_state = "ai-triumvirate";
			} else if ( _a=="Triumvirate Static" ) {
				this.icon_state = "ai-triumvirate-malf";
			} else if ( _a=="Searif" ) {
				this.icon_state = "ai-searif";
			} else if ( _a=="Ravensdale" ) {
				this.icon_state = "ai-ravensdale";
			} else if ( _a=="Serithi" ) {
				this.icon_state = "ai-serithi";
			} else if ( _a=="Static" ) {
				this.icon_state = "ai-fuzz";
			} else if ( _a=="Wasp" ) {
				this.icon_state = "ai-wasp";
			} else if ( _a=="Robert House" ) {
				this.icon_state = "ai-president";
			} else if ( _a=="Red October" ) {
				this.icon_state = "ai-soviet";
			} else if ( _a=="Girl" ) {
				this.icon_state = "ai-girl";
			} else if ( _a=="Girl Malf" ) {
				this.icon_state = "ai-girl-malf";
			} else if ( _a=="Boy" ) {
				this.icon_state = "ai-boy";
			} else if ( _a=="Boy Malf" ) {
				this.icon_state = "ai-boy-malf";
			} else if ( _a=="Fabulous" ) {
				this.icon_state = "ai-fabulous";
			} else if ( _a=="Four-Leaf" ) {
				this.icon_state = "ai-4chan";
			} else if ( _a=="Yes Man" ) {
				this.icon_state = "yes-man";
			} else if ( _a=="Hourglass" ) {
				this.icon_state = "ai-hourglass";
			} else if ( _a=="Patriot" ) {
				this.icon_state = "ai-patriot";
			} else if ( _a=="Pirate" ) {
				this.icon_state = "ai-pirate";
			} else if ( _a=="Royal" ) {
				this.icon_state = "ai-royal";
			} else {
				this.icon_state = "ai";
			}
			return;
		}

		// Function from file: ai.dm
		[Verb]
		[VerbInfo( name: "Modify Photo Files", group: "AI Commands" )]
		public void rename_photo(  ) {
			ByTable nametemp = null;
			dynamic find = null;
			Picture selection = null;
			Picture t = null;
			Picture q = null;
			dynamic choice = null;
			string new_name = null;

			
			if ( Lang13.Bool( this.stat ) || this.aiRestorePowerRoutine != 0 ) {
				return;
			}
			nametemp = new ByTable();

			if ( this.aicamera.aipictures.len == 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<font color=red><B>No images saved<B></font>" );
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.aicamera.aipictures, typeof(Picture) )) {
				t = _a;
				
				nametemp.Add( t.fields["name"] );
			}
			find = Interface13.Input( "Select image to delete or rename.", "Photo Modification", null, null, nametemp, InputType.Any );

			foreach (dynamic _b in Lang13.Enumerate( this.aicamera.aipictures, typeof(Picture) )) {
				q = _b;
				

				if ( q.fields["name"] == find ) {
					selection = q;
					break;
				}
			}

			if ( !( selection != null ) ) {
				return;
			}
			choice = Interface13.Input( Task13.User, "Would you like to rename or delete " + selection.fields["name"] + "?", "Photo Modification", null, new ByTable(new object [] { "Rename", "Delete", "Cancel" }), InputType.Any );

			dynamic _c = choice; // Was a switch-case, sorry for the mess.
			if ( _c=="Cancel" ) {
				return;
			} else if ( _c=="Delete" ) {
				this.aicamera.aipictures.Remove( selection );
				GlobalFuncs.qdel( selection );
			} else if ( _c=="Rename" ) {
				new_name = GlobalFuncs.sanitize( Interface13.Input( Task13.User, "Write a new name for " + selection.fields["name"] + ":", "Photo Modification", null, null, InputType.Any ) );

				if ( Lang13.Length( new_name ) > 0 ) {
					selection.fields["name"] = new_name;
				} else {
					GlobalFuncs.to_chat( Task13.User, "You must write a name." );
				}
			}
			return;
		}

		// Function from file: ai.dm
		[Verb]
		[VerbInfo( name: "Radio Configuration", group: "AI Commands" )]
		public void radio_interact(  ) {
			
			if ( Lang13.Bool( this.stat ) || this.aiRestorePowerRoutine != 0 ) {
				return;
			}
			this.v_radio.recalculateChannels();
			this.v_radio.attack_self( Task13.User );
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already dead!</span>" );
				return;
			}

			if ( this.suiciding == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already committing suicide! Be patient!</span>" );
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( confirm == "Yes" ) {
				this.suiciding = true;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " is powering down. It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.adjustOxyLoss( Num13.MaxInt( Convert.ToInt32( this.maxHealth * 2 - this.getToxLoss() - this.getFireLoss() - this.getBruteLoss() - this.getOxyLoss() ), 0 ) );
				this.updatehealth();
			}
			return;
		}

		// Function from file: tracking.dm
		[Verb]
		[VerbInfo( name: "track", hidden: true )]
		[VerbArg( 1, InputType.Null | InputType.Any, VerbArgFilter.FromMemberFunc, "mob/living/silicon/ai/proc/trackable_mobs" )]
		public void ai_camera_track( dynamic target_name = null ) {
			dynamic target = null;

			
			if ( !Lang13.Bool( target_name ) ) {
				return;
			}
			target = ( this.track.humans[target_name] == null ? this.track.others[target_name] : this.track.humans[target_name] );
			this.ai_actual_track( target );
			return;
		}

	}

}