// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Construct_Builder : Mob_Living_SimpleAnimal_Hostile_Construct {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "Artificer";
			this.icon_living = "artificer";
			this.maxHealth = 50;
			this.health = 50;
			this.response_harm = "viciously beats";
			this.harm_intent_damage = 5;
			this.melee_damage_lower = 5;
			this.melee_damage_upper = 5;
			this.retreat_distance = 10;
			this.minimum_distance = 10;
			this.attacktext = "rams";
			this.environment_smash = 2;
			this.attack_sound = "sound/weapons/punch2.ogg";
			this.construct_spells = new ByTable(new object [] { 
				typeof(Obj_Effect_ProcHolder_Spell_AoeTurf_Conjure_Wall), 
				typeof(Obj_Effect_ProcHolder_Spell_AoeTurf_Conjure_Floor), 
				typeof(Obj_Effect_ProcHolder_Spell_AoeTurf_Conjure_Soulstone), 
				typeof(Obj_Effect_ProcHolder_Spell_AoeTurf_Conjure_Construct_Lesser), 
				typeof(Obj_Effect_ProcHolder_Spell_Targeted_Projectile_MagicMissile_Lesser)
			 });
			this.playstyle_string = "<b>You are an Artificer. You are incredibly weak and fragile, but you are able to construct fortifications, use magic missile, repair allied constructs (by clicking on them), <i>and, most important of all,</i> create new constructs by producing soulstones to capture souls, and shells to place those soulstones into.</b>";
			this.icon_state = "artificer";
		}

		public Mob_Living_SimpleAnimal_Hostile_Construct_Builder ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: constructs.dm
		public override void LoseAggro(  ) {
			base.LoseAggro();
			this.retreat_distance = Lang13.Initial( this, "retreat_distance" );
			this.minimum_distance = Lang13.Initial( this, "minimum_distance" );
			return;
		}

		// Function from file: constructs.dm
		public override void Aggro(  ) {
			base.Aggro();

			if ( this.target is Mob_Living_SimpleAnimal_Hostile_Construct ) {
				this.retreat_distance = null;
				this.minimum_distance = 1;
			}
			return;
		}

		// Function from file: constructs.dm
		public override bool MoveToTarget( ByTable possible_targets = null ) {
			dynamic L = null;

			base.MoveToTarget( possible_targets );

			if ( this.target is Mob_Living ) {
				L = this.target;

				if ( L is Mob_Living_SimpleAnimal_Hostile_Construct && Convert.ToDouble( L.health ) >= Convert.ToDouble( L.maxHealth ) ) {
					this.LoseTarget();
					return false;
				}

				if ( Convert.ToDouble( L.health ) <= Convert.ToDouble( this.melee_damage_lower + this.melee_damage_upper ) ) {
					this.retreat_distance = null;
					this.minimum_distance = 1;
				}
			}
			return false;
		}

		// Function from file: constructs.dm
		public override bool CanAttack( dynamic the_target = null ) {
			
			if ( this.see_invisible < Convert.ToDouble( the_target.invisibility ) ) {
				return false;
			}

			if ( Lang13.Bool( this.Found( the_target ) ) || base.CanAttack( (object)(the_target) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: constructs.dm
		public override dynamic Found( dynamic A = null ) {
			dynamic C = null;

			
			if ( A is Mob_Living_SimpleAnimal_Hostile_Construct ) {
				C = A;

				if ( Convert.ToDouble( C.health ) < Convert.ToDouble( C.maxHealth ) ) {
					return 1;
				} else {
					return 0;
				}
			} else {
				return 0;
			}
			return null;
		}

	}

}