// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Camera_God : Mob_Camera {

		public int? faith = 100;
		public dynamic max_faith = 100;
		public string side = "neutral";
		public Obj_Structure_Divine_Nexus god_nexus = null;
		public int? nexus_required = 0;
		public bool followers_required = false;
		public int alive_followers = 0;
		public ByTable structures = new ByTable();
		public ByTable conduits = new ByTable();
		public int prophets_sacrificed_in_name = 0;
		public Image ghostimage = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 60;
			this.real_name = "deity";
			this.languages = 127;
			this.hud_possible = new ByTable(new object [] { "12" });
			this.icon = "icons/mob/mob.dmi";
			this.icon_state = "marker";
			this.see_in_dark = 0;
		}

		// Function from file: god.dm
		public Mob_Camera_God ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icons();
			GlobalFuncs.build_hog_construction_lists();

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode.name == "hand of god" ) {
				GlobalFuncs.addtimer( this, "forceplacenexus", 1200, GlobalVars.FALSE );
			}
			return;
		}

		// Function from file: god.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			Type construct_type = null;
			Obj_Structure_Divine_ConstructionHolder CH = null;
			Type trap_type = null;

			
			if ( Lang13.Bool( href_list["create_structure"] ) ) {
				
				if ( !this.ability_cost( 75, true, true ) ) {
					return null;
				}
				construct_type = Lang13.FindClass( href_list["create_structure"] );

				if ( !( construct_type != null ) ) {
					return null;
				}
				this.add_faith( -75 );
				CH = new Obj_Structure_Divine_ConstructionHolder( GlobalFuncs.get_turf( this ) );
				CH.assign_deity( this );
				CH.setup_construction( construct_type );
				CH.visible_message( "<span class='notice'>" + this + " has created a transparent, unfinished " + Lang13.Initial( construct_type, "name" ) + ". It can be finished by adding materials.</span>" );
				this.WriteMsg( "<span class='boldnotice'>You may click a construction site to cancel it, but only faith is refunded.</span>" );
				this.structure_construction_ui( this );
				return null;
			}

			if ( Lang13.Bool( href_list["place_trap"] ) ) {
				
				if ( !this.ability_cost( 20, true, true ) ) {
					return null;
				}
				trap_type = Lang13.FindClass( href_list["place_trap"] );

				if ( !( trap_type != null ) ) {
					return null;
				}
				this.WriteMsg( new Txt( "You lay " ).a( Lang13.Initial( trap_type, "name" ) ).item().ToString() );
				this.add_faith( -20 );
				Lang13.Call( trap_type, GlobalFuncs.get_turf( this ) );
				return null;
			}
			base.Topic( href, href_list, (object)(hsrc) );
			return null;
		}

		// Function from file: god.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;

			this.loc = NewLoc;
			return false;
		}

		// Function from file: god.dm
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			return;
		}

		// Function from file: god.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			
			if ( !Lang13.Bool( message ) ) {
				return false;
			}

			if ( this.client != null ) {
				
				if ( ( this.client.prefs.muted & 1 ) != 0 ) {
					this.WriteMsg( "You cannot send IC messages (muted)." );
					return false;
				}

				if ( this.client.handle_spam_prevention( message, 1 ) ) {
					return false;
				}
			}

			if ( this.stat != 0 ) {
				return false;
			}
			this.god_speak( message );
			return false;
		}

		// Function from file: god.dm
		public override bool update_health_hud( dynamic shown_health_amount = null ) {
			
			if ( this.god_nexus != null && this.hud_used != null && this.hud_used.healths != null ) {
				this.hud_used.healths.maptext = "<div align='center' valign='middle' style='position:relative; top:0px; left:6px'> <font color='lime'>" + this.god_nexus.health + "   </font></div>";
			}
			return false;
		}

		// Function from file: god.dm
		public override dynamic Login(  ) {
			base.Login();
			this.sync_mind();
			this.WriteMsg( "<span class='notice'>You are a deity!</span>" );
			this.WriteMsg( "You are a deity and are worshipped by a cult!  You are rather weak right now, but that will change as you gain more followers." );
			this.WriteMsg( "You will need to place an anchor to this world, a <b>Nexus</b>, in two minutes.  If you don't, one will be placed immediately below you." );
			this.WriteMsg( "Your <b>Follower</b> count determines how many people believe in you and are a part of your cult." );
			this.WriteMsg( "Your <b>Nexus Integrity</b> tells you the condition of your nexus.  If your nexus is destroyed, you will die. Place your Nexus on a safe, isolated place, that is still accessible to your followers." );
			this.WriteMsg( "Your <b>Faith</b> is used to interact with the world.  This will regenerate on its own, and it goes faster when you have more followers and power pylons." );
			this.WriteMsg( "The first thing you should do after placing your nexus is to <b>appoint a prophet</b>.  Only prophets can hear you talk, unless you use an expensive power." );
			this.update_health_hud();
			return null;
		}

		// Function from file: god.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				
				if ( this.god_nexus != null ) {
					Interface13.Stat( "Nexus health: ", this.god_nexus.health );
				}
				Interface13.Stat( "Followers: ", this.alive_followers );
				Interface13.Stat( "Faith: ", "" + this.faith + "/" + this.max_faith );
			}
			return null;
		}

		// Function from file: god.dm
		public override void update_icons(  ) {
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-" + this.side;

			if ( this.ghostimage != null ) {
				GlobalVars.ghost_darkness_images.Remove( this.ghostimage );
			}
			this.ghostimage = new Image( this.icon, this, this.icon_state );
			GlobalVars.ghost_darkness_images.Or( this.ghostimage );
			GlobalFuncs.updateallghostimages();
			return;
		}

		// Function from file: god.dm
		public override dynamic Destroy(  ) {
			ByTable followers = null;
			Mind F = null;

			followers = this.get_my_followers();

			foreach (dynamic _a in Lang13.Enumerate( followers, typeof(Mind) )) {
				F = _a;
				

				if ( Lang13.Bool( F.current ) ) {
					F.current.WriteMsg( "<span class='danger'>Your god is DEAD!</span>" );
				}
			}
			GlobalVars.ghost_darkness_images.Remove( this.ghostimage );
			GlobalFuncs.updateallghostimages();
			return base.Destroy();
		}

		// Function from file: powers.dm
		public bool ability_cost( int? cost = null, bool? structures = null, bool? requires_conduit = null, bool? can_place_near_enemy_nexus = null ) {
			cost = cost ?? 0;
			structures = structures ?? false;
			requires_conduit = requires_conduit ?? false;
			can_place_near_enemy_nexus = can_place_near_enemy_nexus ?? false;

			dynamic T = null;
			Ent_Dynamic AM = null;
			int valid = 0;
			Obj_Structure_Divine_Conduit C = null;
			dynamic enemy = null;
			Mob_Camera_God enemy_god = null;

			
			if ( ( this.faith ??0) < ( cost ??0) ) {
				this.WriteMsg( "<span class='danger'>You lack the faith!</span>" );
				return false;
			}

			if ( structures == true ) {
				
				if ( !( this.loc is Tile ) || this.loc is Tile_Space ) {
					this.WriteMsg( "<span class='danger'>Your structure would just float away, you need stable ground!</span>" );
					return false;
				}
				T = GlobalFuncs.get_turf( this );

				if ( Lang13.Bool( T ) ) {
					
					if ( T.density ) {
						this.WriteMsg( "<span class='danger'>There is something blocking your structure!</span>" );
						return false;
					}

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Ent_Dynamic) )) {
						AM = _a;
						

						if ( AM == this ) {
							continue;
						}

						if ( AM.density ) {
							this.WriteMsg( "<span class='danger'>There is something blocking your structure!</span>" );
							return false;
						}
					}
				}
			}

			if ( requires_conduit == true ) {
				valid = 0;

				foreach (dynamic _b in Lang13.Enumerate( this.conduits, typeof(Obj_Structure_Divine_Conduit) )) {
					C = _b;
					

					if ( Map13.GetDistance( this, C ) <= 15 ) {
						valid++;
						break;
					}
				}

				if ( !( valid != 0 ) ) {
					
					if ( Map13.GetDistance( this, this.god_nexus ) <= 15 ) {
						valid++;
					}
				}

				if ( !( valid != 0 ) ) {
					this.WriteMsg( "<span class='danger'>You must be near your Nexus or a Conduit to do this!</span>" );
					return false;
				}
			}

			if ( !( can_place_near_enemy_nexus == true ) ) {
				enemy = null;

				switch ((string)( this.side )) {
					case "red":
						enemy = GlobalVars.ticker.mode.blue_deities[1];
						break;
					case "blue":
						enemy = GlobalVars.ticker.mode.red_deities[1];
						break;
				}

				if ( Lang13.Bool( enemy ) && GlobalFuncs.is_handofgod_god( enemy.current ) ) {
					enemy_god = enemy.current;

					if ( enemy_god.god_nexus != null && Map13.GetDistance( this, enemy_god.god_nexus ) <= 30 ) {
						this.WriteMsg( "<span class='danger'>You are too close to the other god's stronghold!</span>" );
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: god.dm
		public void trap_construction_ui( Mob_Camera_God user = null ) {
			string dat = null;
			dynamic t = null;
			dynamic T = null;
			Icon I = null;
			string img_component = null;
			Browser popup = null;

			dat = "";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.global_handofgod_traptypes )) {
				t = _a;
				

				if ( Lang13.Bool( GlobalVars.global_handofgod_traptypes[t] ) ) {
					T = GlobalVars.global_handofgod_traptypes[t];
					dat += "<center><B>" + GlobalFuncs.capitalize( t ) + "</B></center><BR>";
					I = new Icon( "icons/obj/hand_of_god_structures.dmi", "" + Lang13.Initial( T, "icon_state" ) );
					img_component = String13.ToLower( t );
					Interface13.CacheBrowseResource( user, I, "hog_trap-" + img_component + ".png" );
					dat += "<center><img src='hog_trap-" + img_component + ".png' height=64 width=64></center>";
					dat += "Description: " + Lang13.Initial( T, "desc" ) + "<BR>";
					dat += new Txt( "<center><a href='?src=" ).Ref( this ).str( ";place_trap=" ).item( T ).str( "'>Place " ).item( GlobalFuncs.capitalize( t ) ).str( "</a></center><BR><BR>" ).ToString();
				}
			}
			popup = new Browser( this, "traps", "Place Trap", 350, 500 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: god.dm
		public void structure_construction_ui( Mob_Camera_God user = null ) {
			string dat = null;
			dynamic t = null;
			dynamic apath = null;
			string imgstate = null;
			Icon I = null;
			string img_component = null;
			Browser popup = null;

			dat = "";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.global_handofgod_structuretypes )) {
				t = _a;
				

				if ( Lang13.Bool( GlobalVars.global_handofgod_structuretypes[t] ) ) {
					apath = GlobalVars.global_handofgod_structuretypes[t];
					dat += "<center><B>" + GlobalFuncs.capitalize( t ) + "</B></center><BR>";
					imgstate = ( Lang13.Bool( Lang13.Initial( apath, "autocolours" ) ) ? "" + Lang13.Initial( apath, "icon_state" ) + "-" + this.side : "" + Lang13.Initial( apath, "icon_state" ) );
					I = new Icon( "icons/obj/hand_of_god_structures.dmi", imgstate );
					img_component = String13.ToLower( t );
					Interface13.CacheBrowseResource( user, I, "hog_structure-" + img_component + ".png" );
					dat += "<center><img src='hog_structure-" + img_component + ".png' height=64 width=64></center>";
					dat += "Description: " + Lang13.Initial( apath, "desc" ) + "<BR>";
					dat += new Txt( "<center><a href='?src=" ).Ref( this ).str( ";create_structure=" ).item( apath ).str( "'>Construct " ).item( GlobalFuncs.capitalize( t ) ).str( "</a></center><BR><BR>" ).ToString();
				}
			}
			popup = new Browser( this, "structures", "Construct Structure", 350, 500 );
			popup.set_content( dat );
			popup.open();
			return;
		}

		// Function from file: god.dm
		public void god_speak( dynamic msg = null ) {
			string rendered = null;
			dynamic M = null;

			GlobalFuncs.log_say( "Hand of God: " + GlobalFuncs.capitalize( this.side ) + " God/" + GlobalFuncs.key_name( this ) + " : " + msg );
			msg = GlobalFuncs.trim( String13.SubStr( GlobalFuncs.sanitize( msg ), 1, 1024 ) );

			if ( !Lang13.Bool( msg ) ) {
				return;
			}
			msg = this.say_quote( msg, this.get_spans() );
			rendered = "<font color='#045FB4'><i><span class='game say'>Divine Telepathy, <span class='name'>" + this.name + "</span> <span class='message'>" + msg + "</span></span></i></font>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( this.is_handofgod_myprophet( M ) || M is Mob_Dead_Observer ) {
					M.show_message( rendered, 2 );
				}
			}
			this.WriteMsg( rendered );
			return;
		}

		// Function from file: god.dm
		public void check_death(  ) {
			
			if ( !( this.alive_followers != 0 ) ) {
				this.WriteMsg( "<span class='userdanger'>You no longer have any followers. You shudder as you feel your existence cease...</span>" );

				if ( this.god_nexus != null && !Lang13.Bool( GlobalFuncs.qdeleted( this.god_nexus ) ) ) {
					this.god_nexus.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " suddenly disappears!</span>" ).ToString() );
					GlobalFuncs.qdel( this.god_nexus );
				}
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: god.dm
		public void update_followers(  ) {
			ByTable all_followers = null;
			Mind F = null;

			this.alive_followers = 0;
			all_followers = this.get_my_followers();

			foreach (dynamic _a in Lang13.Enumerate( all_followers, typeof(Mind) )) {
				F = _a;
				

				if ( Lang13.Bool( F.current ) && Convert.ToInt32( F.current.stat ) != 2 ) {
					this.alive_followers++;
				}
			}

			if ( this.hud_used != null && this.hud_used.deity_follower_display != null ) {
				this.hud_used.deity_follower_display.maptext = "<div align='center' valign='middle' style='position:relative; top:0px; left:6px'> <font color='red'>" + this.alive_followers + "     </font></div>";
			}
			return;
		}

		// Function from file: god.dm
		public bool place_nexus(  ) {
			Obj_Structure_Divine_Nexus N = null;
			dynamic A = null;
			string areaname = null;
			ByTable followers = null;
			Mind F = null;

			
			if ( this.god_nexus != null || this.z != 1 ) {
				return false;
			}
			N = new Obj_Structure_Divine_Nexus( GlobalFuncs.get_turf( this ) );
			N.assign_deity( this );
			this.god_nexus = N;
			this.nexus_required = GlobalVars.TRUE;
			this.verbs.Remove( typeof(Mob_Camera_God).GetMethod( "constructnexus" ) );
			this.update_health_hud();
			A = GlobalFuncs.get_area( this );

			if ( Lang13.Bool( A ) ) {
				areaname = A.name;
				followers = this.get_my_followers();

				foreach (dynamic _a in Lang13.Enumerate( followers, typeof(Mind) )) {
					F = _a;
					

					if ( Lang13.Bool( F.current ) ) {
						F.current.WriteMsg( new Txt( "<span class='boldnotice'>Your god's nexus is in " ).the( areaname ).item().str( "</span>" ).ToString() );
					}
				}
			}
			return false;
		}

		// Function from file: god.dm
		public void add_faith( double faith_amt = 0 ) {
			
			if ( faith_amt != 0 ) {
				this.faith = Num13.Floor( Num13.MaxInt( 0, Num13.MinInt( ((int)( ( this.faith ??0) + faith_amt )), Convert.ToInt32( this.max_faith ) ) ) );

				if ( this.hud_used != null && this.hud_used.deity_power_display != null ) {
					this.hud_used.deity_power_display.maptext = "<div align='center' valign='middle' style='position:relative; top:0px; left:6px'> <font color='cyan'>" + this.faith + "  </font></div>";
				}
			}
			return;
		}

		// Function from file: god.dm
		public void forceplacenexus(  ) {
			
			if ( this.god_nexus != null ) {
				return;
			}

			if ( this.ability_cost( 0, true, false ) ) {
				this.place_nexus();
			} else {
				
				if ( GlobalVars.blobstart.len != 0 ) {
					this.loc = Rand13.PickFromTable( GlobalVars.blobstart );
				}
				this.place_nexus();
			}
			this.WriteMsg( "<span class='danger'>You failed to place your nexus, and it has been placed for you!</span>" );
			return;
		}

		// Function from file: god.dm
		public ByTable get_my_followers(  ) {
			ByTable _default = null;

			
			switch ((string)( this.side )) {
				case "red":
					_default = GlobalVars.ticker.mode.red_deity_followers | GlobalVars.ticker.mode.red_deity_prophets;
					break;
				case "blue":
					_default = GlobalVars.ticker.mode.blue_deity_followers | GlobalVars.ticker.mode.blue_deity_prophets;
					break;
				default:
					_default = new ByTable();
					break;
			}
			return _default;
		}

		// Function from file: _handofgod.dm
		public bool is_handofgod_myprophet( dynamic A = null ) {
			dynamic H = null;

			
			if ( !( A is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			H = A;

			if ( !Lang13.Bool( H.mind ) ) {
				return false;
			}

			if ( this.side == "red" ) {
				
				if ( GlobalVars.ticker.mode.red_deity_prophets.Contains( H.mind ) ) {
					return true;
				}
			} else if ( this.side == "blue" ) {
				
				if ( GlobalVars.ticker.mode.blue_deity_prophets.Contains( H.mind ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: other_mobs.dm
		public override void create_mob_hud(  ) {
			
			if ( this.client != null && !( this.hud_used != null ) ) {
				this.hud_used = new Hud_HogGod( this );
			}
			return;
		}

		// Function from file: god.dm
		public override void RangedAttack( Ent_Static A = null, string _params = null ) {
			A.attack_god( this );
			return;
		}

		// Function from file: god.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			A.attack_god( this );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Construct Items (20)", desc: "Construct some items for your followers", group: "Deity" )]
		public void construct_items(  ) {
			ByTable item_types = null;
			dynamic item = null;
			dynamic itemtype = null;

			
			if ( !this.ability_cost( 20, true, true ) ) {
				return;
			}
			item_types = new ByTable().Set( "claymore sword", typeof(Obj_Item_Weapon_Claymore_Hog) );

			if ( this.side == "red" ) {
				item_types["red banner"] = typeof(Obj_Item_Weapon_Banner_Red);
				item_types["red bannerbackpack"] = typeof(Obj_Item_Weapon_Storage_Backpack_Bannerpack_Red);
				item_types["red armour"] = typeof(Obj_Item_Weapon_Storage_Box_Itemset_Crusader_Red);
			} else if ( this.side == "blue" ) {
				item_types["blue banner"] = typeof(Obj_Item_Weapon_Banner_Blue);
				item_types["blue bannerbackpack"] = typeof(Obj_Item_Weapon_Storage_Backpack_Bannerpack_Blue);
				item_types["blue armour"] = typeof(Obj_Item_Weapon_Storage_Box_Itemset_Crusader_Blue);
			}
			item = Interface13.Input( "Choose what you wish to create.", "Divine Items", null, null, item_types, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( item ) || !Lang13.Bool( item_types[item] ) || !this.ability_cost( 20, true, true ) ) {
				return;
			}
			this.WriteMsg( new Txt( "You produce " ).a( item ).item().ToString() );
			this.add_faith( -20 );
			itemtype = item_types[item];
			Lang13.Call( itemtype, GlobalFuncs.get_turf( this ) );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Construct Trap (20)", desc: "Creates a ward or trap.", group: "Deity" )]
		public void construct_traps(  ) {
			
			if ( !this.ability_cost( 20, true, true ) ) {
				return;
			}
			this.trap_construction_ui( this );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Construct Structure (75)", desc: "Create the foundation of a divine object.", group: "Deity" )]
		public void construct_structures(  ) {
			
			if ( !this.ability_cost( 75, true, true ) ) {
				return;
			}
			this.structure_construction_ui( this );
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Construct Nexus", desc: "Instantly creates your nexus, You can only do this once, make sure you're happy with it!", group: "Deity" )]
		public void constructnexus(  ) {
			
			if ( !this.ability_cost( 0, true, false ) ) {
				return;
			}
			this.place_nexus();
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Invoke Disaster (300)", desc: "Tug at the fibres of reality itself and bend it to your whims!", group: "Deity" )]
		public void disaster(  ) {
			dynamic _event = null;

			
			if ( !this.ability_cost( 300, false, true ) ) {
				return;
			}
			_event = Rand13.Pick(new object [] { typeof(RoundEvent_MeteorWave), typeof(RoundEvent_CommunicationsBlackout), typeof(RoundEvent_RadiationStorm), typeof(RoundEvent_CarpMigration), typeof(RoundEvent_Spacevine), typeof(RoundEvent_VentClog), typeof(RoundEvent_Wormholes) });

			if ( Lang13.Bool( _event ) ) {
				Lang13.Call( _event );
				this.add_faith( -300 );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Smite (40)", desc: "Hits anything under you with a moderate amount of damage.", group: "Deity" )]
		public void smite(  ) {
			bool has_smitten = false;
			Mob_Living L = null;

			
			if ( !this.ability_cost( 40, false, true ) ) {
				return;
			}

			if ( !( Map13.FetchInRange( this.god_nexus, 7 ) != null ) ) {
				this.WriteMsg( "You lack the strength to smite this far from your nexus." );
				return;
			}
			has_smitten = false;

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Mob_Living) )) {
				L = _a;
				
				L.adjustFireLoss( 20 );
				L.adjustBruteLoss( 20 );
				L.WriteMsg( "<span class='danger'><B>You feel the wrath of " + this.name + "!<B></span>" );
				has_smitten = true;
			}

			if ( has_smitten ) {
				this.add_faith( -40 );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Talk to Anyone (20)", desc: "Allows you to send a message to anyone, regardless of their faith.", group: "Deity" )]
		[VerbArg( 1, InputType.Str )]
		public void talk( string msg = null ) {
			dynamic choice = null;
			string original = null;

			
			if ( !this.ability_cost( 20 ) ) {
				return;
			}
			choice = Interface13.Input( "Choose who you wish to talk to", "Talk to ANYONE", null, null, GlobalVars.mob_list, InputType.Null | InputType.Any );

			if ( Lang13.Bool( choice ) ) {
				original = msg;
				msg = "<B>You hear a voice coming from everywhere and nowhere... <i>" + msg + "</i></B>";
				choice.WriteMsg( msg );
				this.WriteMsg( "You say the following to " + choice + ", " + original );
				this.add_faith( -20 );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Appoint Prophet (100)", desc: "Appoint one of your followers as your Prophet, who can hear your words", group: "Deity" )]
		public void newprophet(  ) {
			ByTable following = null;
			dynamic old_proph = null;
			dynamic old_proph2 = null;
			dynamic choice = null;
			Mob H = null;
			Type popehat = null;
			Type popestick = null;
			dynamic P = null;
			dynamic G = null;
			string success = null;

			following = new ByTable();

			if ( !this.ability_cost( 100 ) ) {
				return;
			}

			if ( this.side == "red" ) {
				old_proph = Lang13.FindIn( typeof(Mind), GlobalVars.ticker.mode.red_deity_prophets );

				if ( Lang13.Bool( old_proph ) && Lang13.Bool( old_proph.current ) && Convert.ToInt32( old_proph.current.stat ) != 2 ) {
					this.WriteMsg( "You can only have one prophet alive at a time." );
					return;
				} else {
					following = GlobalVars.ticker.mode.red_deity_followers;
				}
			} else if ( this.side == "blue" ) {
				old_proph2 = Lang13.FindIn( typeof(Mind), GlobalVars.ticker.mode.blue_deity_prophets );

				if ( Lang13.Bool( old_proph2 ) && Lang13.Bool( old_proph2.current ) && Convert.ToInt32( old_proph2.current.stat ) != 2 ) {
					this.WriteMsg( "You can only have one prophet alive at a time." );
					return;
				} else {
					following = GlobalVars.ticker.mode.blue_deity_followers;
				}
			} else {
				this.WriteMsg( "You are unalligned, and thus do not have prophets" );
				return;
			}
			choice = Interface13.Input( "Choose a follower to make into your prophet", "Prophet Uplifting", null, null, following, InputType.Null | InputType.Any );

			if ( Lang13.Bool( choice ) && Lang13.Bool( choice.current ) && Convert.ToInt32( choice.current.stat ) != 2 ) {
				this.WriteMsg( "You choose " + choice.current + " as your prophet." );
				((Mind)choice).make_Handofgod_prophet( this.side );
				H = choice.current;
				popehat = null;
				popestick = null;

				switch ((string)( this.side )) {
					case "red":
						popehat = typeof(Obj_Item_Clothing_Head_Helmet_Plate_Crusader_Prophet_Red);
						popestick = typeof(Obj_Item_Weapon_Godstaff_Red);
						break;
					case "blue":
						popehat = typeof(Obj_Item_Clothing_Head_Helmet_Plate_Crusader_Prophet_Blue);
						popestick = typeof(Obj_Item_Weapon_Godstaff_Blue);
						break;
				}

				if ( popehat != null ) {
					P = Lang13.Call( popehat );
					((Obj_Item_Clothing_Head_Helmet_Plate_Crusader_Prophet)P).assign_deity( this );
					H.unEquip( ((dynamic)H).head );
					H.WriteMsg( "<span class='boldnotice'>A powerful hat has been bestowed upon your head, you will need to wear this to speak with your god...</span>" );
					H.equip_to_slot_or_del( P, 11 );
				}

				if ( popestick != null ) {
					G = Lang13.Call( popestick );
					G.god = this;
					success = "";

					if ( !H.put_in_hands( G ) ) {
						
						if ( !H.equip_to_slot_if_possible( G, 18, false, true, true ) ) {
							G.loc = GlobalFuncs.get_turf( H );
							success = "It is on the floor...";
						} else {
							success = "It is in your backpack...";
						}
					} else {
						success = "It is in your hands...";
					}

					if ( Lang13.Bool( success ) ) {
						H.WriteMsg( "<span class='boldnotice'>A powerful staff has been bestowed upon you, you can use this to convert the false god's structures!</span>" );
						H.WriteMsg( "<span class='boldnotice'>" + success + "</span>" );
					}
				}
				this.add_faith( -100 );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Jump to Follower", desc: "Teleports you to one of your followers.", group: "Deity" )]
		public void jumptofollower(  ) {
			ByTable following = null;
			dynamic choice = null;

			following = new ByTable();

			if ( this.side == "red" ) {
				following = GlobalVars.ticker.mode.red_deity_followers | GlobalVars.ticker.mode.red_deity_prophets;
			} else if ( this.side == "blue" ) {
				following = GlobalVars.ticker.mode.blue_deity_followers | GlobalVars.ticker.mode.blue_deity_prophets;
			} else {
				this.WriteMsg( "You are unaligned, and thus do not have followers" );
				return;
			}
			choice = Interface13.Input( "Choose a follower", "Jump to Follower", null, null, following, InputType.Null | InputType.Any );

			if ( Lang13.Bool( choice ) && Lang13.Bool( choice.current ) ) {
				this.Move( GlobalFuncs.get_turf( choice.current ) );
			}
			return;
		}

		// Function from file: powers.dm
		[Verb]
		[VerbInfo( name: "Goto Nexus", desc: "Teleports you to your next instantly.", group: "Deity" )]
		public void returntonexus(  ) {
			
			if ( this.god_nexus != null ) {
				this.Move( GlobalFuncs.get_turf( this.god_nexus ) );
			} else {
				this.WriteMsg( "You don't even have a Nexus, construct one." );
			}
			return;
		}

		// Function from file: god.dm
		[Verb]
		[VerbInfo( name: "Free Turret (0)", desc: "Place a single turret, for 0 faith.", group: "Deity" )]
		public void freeturret(  ) {
			Obj_Structure_Divine_Defensepylon DP = null;

			
			if ( !this.ability_cost( 0, true, true ) ) {
				return;
			}
			DP = new Obj_Structure_Divine_Defensepylon( GlobalFuncs.get_turf( this ) );
			DP.assign_deity( this );
			this.verbs.Remove( typeof(Mob_Camera_God).GetMethod( "freeturret" ) );
			return;
		}

	}

}