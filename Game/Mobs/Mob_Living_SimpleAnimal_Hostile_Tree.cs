// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Tree : Mob_Living_SimpleAnimal_Hostile {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pixel_x = -16;
			this.icon_living = "pine_1";
			this.icon_dead = "pine_1";
			this.icon_gib = "pine_1";
			this.turns_per_move = 5;
			this.response_help = "brushes";
			this.response_disarm = "pushes";
			this.maxHealth = 250;
			this.health = 250;
			this.mob_size = 3;
			this.harm_intent_damage = 5;
			this.melee_damage_lower = 8;
			this.melee_damage_upper = 12;
			this.attacktext = "bites";
			this.attack_sound = "sound/weapons/bite.ogg";
			this.speak_emote = new ByTable(new object [] { "pines" });
			this.emote_taunt = new ByTable(new object [] { "growls" });
			this.taunt_chance = 20;
			this.atmos_requirements = new ByTable().Set( "min_oxy", 2 ).Set( "max_oxy", 0 ).Set( "min_tox", 0 ).Set( "max_tox", 0 ).Set( "min_co2", 0 ).Set( "max_co2", 0 ).Set( "min_n2", 0 ).Set( "max_n2", 0 );
			this.unsuitable_atmos_damage = 5;
			this.minbodytemp = 0;
			this.maxbodytemp = 1200;
			this.faction = new ByTable(new object [] { "hostile" });
			this.loot = new ByTable(new object [] { typeof(Obj_Item_Stack_Sheet_Mineral_Wood) });
			this.gold_core_spawnable = 1;
			this.del_on_death = true;
			this.icon = "icons/obj/flora/pinetrees.dmi";
			this.icon_state = "pine_1";
		}

		// Function from file: tree.dm
		public Mob_Living_SimpleAnimal_Hostile_Tree ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.deathmessage = "" + this + " is hacked into pieces!";
			return;
		}

		// Function from file: tree.dm
		public override bool AttackingTarget(  ) {
			dynamic C = null;

			base.AttackingTarget();

			if ( this.target is Mob_Living_Carbon ) {
				C = this.target;

				if ( Rand13.PercentChance( 15 ) ) {
					((Mob)C).Weaken( 3 );
					((Ent_Static)C).visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " knocks down " ).the( C ).item().str( "!</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).The( this ).item().str( " knocks you down!</span>" ).ToString() );
				}
			}
			return false;
		}

		// Function from file: tree.dm
		public override bool Life(  ) {
			Ent_Static T = null;
			bool co2 = false;
			int amt = 0;

			base.Life();

			if ( this.loc is Tile_Simulated ) {
				T = this.loc;

				if ( Lang13.Bool( ((dynamic)T).air ) && Lang13.Bool( ((dynamic)T).air.gases["co2"] ) ) {
					co2 = Lang13.Bool( ((dynamic)T).air.gases["co2"][1] );

					if ( ( co2 ?1:0) > 0 ) {
						
						if ( Rand13.PercentChance( 25 ) ) {
							amt = Num13.MinInt( co2 ?1:0, 9 );
							((dynamic)T).air.gases["co2"][1] -= amt;
							((dynamic)T).atmos_spawn_air( GlobalVars.SPAWN_OXYGEN, amt );
						}
					}
				}
			}
			return false;
		}

	}

}