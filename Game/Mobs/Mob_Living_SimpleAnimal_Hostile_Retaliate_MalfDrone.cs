// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Retaliate_MalfDrone : Mob_Living_SimpleAnimal_Hostile_Retaliate {

		public Effect_Effect_System_Trail ion_trail = null;
		public int hostile_time = 0;
		public dynamic patrol_target = null;
		public double explode_chance = 1;
		public int disabled = 0;
		public bool exploding = false;
		public bool has_loot = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "drone3";
			this.icon_dead = "drone_dead";
			this.ranged = true;
			this.rapid = true;
			this.speak_chance = 5;
			this.turns_per_move = 3;
			this.response_help = "pokes the";
			this.response_disarm = "gently pushes aside the";
			this.response_harm = "hits the";
			this.speak = new ByTable(new object [] { "ALERT.", "Hostile-ile-ile entities dee-twhoooo-wected.", "Threat parameterszzzz- szzet.", "Bring sub-sub-sub-systems uuuup to combat alert alpha-a-a." });
			this.emote_see = new ByTable(new object [] { "beeps menacingly", "whirrs threateningly", "scans its immediate vicinity" });
			this.a_intent = "hurt";
			this.health = 300;
			this.maxHealth = 300;
			this.speed = 8;
			this.projectiletype = typeof(Obj_Item_Projectile_Beam_Drone);
			this.projectilesound = "sound/weapons/laser3.ogg";
			this.environment_smash = 2;
			this.minimum_distance = 3;
			this.retreat_distance = 2;
			this.can_butcher = false;
			this.flying = true;
			this.min_oxy = 0;
			this.max_tox = false;
			this.max_co2 = 0;
			this.minbodytemp = 0;
			this.faction = "malf_drone";
			this.icon_state = "drone3";
		}

		// Function from file: drone.dm
		public Mob_Living_SimpleAnimal_Hostile_Retaliate_MalfDrone ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Rand13.PercentChance( 5 ) ) {
				this.projectiletype = typeof(Obj_Item_Projectile_Beam_Pulse_Drone);
				this.projectilesound = "sound/weapons/pulse2.ogg";
			}
			this.ion_trail = new Effect_Effect_System_Trail();
			this.ion_trail.set_up( this );
			this.ion_trail.start();
			return;
		}

		// Function from file: drone.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Effect_Effect_System_SparkSpread s = null;
			Game_Data O = null;
			Obj_Item_Weapon_Circuitboard C = null;
			int spawnees = 0;
			int? num_boards = null;
			ByTable options = null;
			int? i = null;
			dynamic chosen = null;

			
			if ( this.has_loot ) {
				s = new Effect_Effect_System_SparkSpread();
				s.set_up( 3, 1, this );
				s.start();
				O = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard), this.loc );
				Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );

				if ( Rand13.PercentChance( 75 ) ) {
					O = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard), this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}

				if ( Rand13.PercentChance( 50 ) ) {
					O = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard), this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}

				if ( Rand13.PercentChance( 25 ) ) {
					O = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard), this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}
				O = new Obj_Item_Stack_Rods( this.loc );
				Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );

				if ( Rand13.PercentChance( 75 ) ) {
					O = new Obj_Item_Stack_Rods( this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}

				if ( Rand13.PercentChance( 50 ) ) {
					O = new Obj_Item_Stack_Rods( this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}

				if ( Rand13.PercentChance( 25 ) ) {
					O = new Obj_Item_Stack_Rods( this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}
				O = new Obj_Item_Stack_Sheet_Plasteel( this.loc );
				Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );

				if ( Rand13.PercentChance( 75 ) ) {
					O = new Obj_Item_Stack_Sheet_Plasteel( this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}

				if ( Rand13.PercentChance( 50 ) ) {
					O = new Obj_Item_Stack_Sheet_Plasteel( this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}

				if ( Rand13.PercentChance( 25 ) ) {
					O = new Obj_Item_Stack_Sheet_Plasteel( this.loc );
					Map13.StepTowards( (Ent_Dynamic)(O), GlobalFuncs.get_turf( Rand13.PickFromTable( Map13.FetchInView( this, 7 ) ) ), 0 );
				}
				spawnees = 0;
				num_boards = Rand13.Int( 1, 4 );
				options = new ByTable(new object [] { 1, 2, 4, 8, 16, 32, 64, 128, 256, 512 });
				i = null;
				i = 0;

				while (( i ??0) < ( num_boards ??0)) {
					chosen = Rand13.PickFromTable( options );
					options.Remove( options.Find( chosen ) );
					spawnees |= Convert.ToInt32( chosen );
					i++;
				}

				if ( ( spawnees & 1 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone CPU motherboard";
					C.origin_tech = "programming=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 2 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone neural interface";
					C.origin_tech = "biotech=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 4 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone suspension processor";
					C.origin_tech = "magnets=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 8 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone shielding controller";
					C.origin_tech = "bluespace=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 16 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone power capacitor";
					C.origin_tech = "powerstorage=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 32 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone hull reinforcer";
					C.origin_tech = "materials=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 64 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone auto-repair system";
					C.origin_tech = "engineering=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 128 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone plasma overcharge counter";
					C.origin_tech = "plasmatech=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 256 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Drone targetting circuitboard";
					C.origin_tech = "combat=" + Rand13.Int( 3, 6 );
				}

				if ( ( spawnees & 512 ) != 0 ) {
					C = new Obj_Item_Weapon_Circuitboard( this.loc );
					C.name = "Corrupted drone morality core";
					C.origin_tech = "illegal=" + Rand13.Int( 3, 6 );
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: drone.dm
		public override void Die( bool? gore = null ) {
			this.visible_message( new Txt( "<span class='notice'> " ).icon( this ).str( " " ).item( this ).str( " suddenly breaks apart.</span>" ).ToString() );
			base.Die( gore );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: drone.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}
			this.health -= Rand13.Int( 3, 15 ) * ( severity + 1 );
			this.disabled = Rand13.Int( 5, 20 );
			this.hostile = false;
			this.hostile_time = 0;
			Map13.Walk( this, 0, 0 );
			return null;
		}

		// Function from file: drone.dm
		public override bool Life(  ) {
			Effect_Effect_System_SparkSpread s = null;
			Effect_Effect_System_SparkSpread s2 = null;
			Effect_Effect_System_SparkSpread s3 = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.disabled > 0 ) {
				this.stat = 1;
				this.icon_state = "drone_dead";
				this.disabled--;
				this.wander = false;
				this.speak_chance = 0;
				this.LoseTarget();
			} else {
				this.stat = 0;
				this.icon_state = "drone0";
				this.wander = true;
				this.speak_chance = 5;
			}

			if ( this.health != this.maxHealth && Rand13.PercentChance( 3 ) ) {
				this.visible_message( new Txt( "<span class='warning'>  " ).icon( this ).str( " " ).item( this ).str( " shudders and shakes as some of it's damaged systems come back online.</span>" ).ToString() );
				s = new Effect_Effect_System_SparkSpread();
				s.set_up( 3, 1, this );
				s.start();
				this.health += Rand13.Int( 25, 100 );
			}

			if ( Rand13.PercentChance( 5 ) ) {
				s2 = new Effect_Effect_System_SparkSpread();
				s2.set_up( 3, 1, this );
				s2.start();
			}

			if ( Rand13.PercentChance( ( this.disabled != 0 ? false : true ) ?1:0 ) && !this.hostile ) {
				this.visible_message( new Txt( "<span class='warning'> " ).icon( this ).str( " " ).item( this ).str( " suddenly lights up, and additional targeting vanes slide into place.</span>" ).ToString() );
				this.hostile = true;
				this.hostile_time = Rand13.Int( 20, 35 );
			} else if ( this.hostile ) {
				this.hostile_time--;

				if ( this.hostile_time == 0 ) {
					this.hostile = false;
					this.visible_message( new Txt( "<span class='notice'> " ).icon( this ).str( " " ).item( this ).str( " retracts several targeting vanes, and dulls it's running lights.</span>" ).ToString() );
					this.LoseTarget();
				}
			}

			if ( Convert.ToDouble( this.health / this.maxHealth ) > 081 ) {
				this.icon_state = "drone3";
				this.explode_chance = 0;
			} else if ( Convert.ToDouble( this.health / this.maxHealth ) > 061 ) {
				this.icon_state = "drone2";
				this.explode_chance = 0;
			} else if ( Convert.ToDouble( this.health / this.maxHealth ) > 0.5 ) {
				this.icon_state = "drone1";
				this.explode_chance = 0.5;
			} else if ( Convert.ToDouble( this.health / this.maxHealth ) > 0.3 ) {
				this.icon_state = "drone0";
				this.explode_chance = 5;
			} else if ( Convert.ToDouble( this.health ) > 0 ) {
				this.icon_state = "drone_dead";
				this.exploding = false;

				if ( !( this.disabled != 0 ) && Rand13.PercentChance( 30 ) ) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.visible_message( new Txt( "<span class='notice'> " ).icon( this ).str( " " ).item( this ).str( " suddenly shuts down!</span>" ).ToString() );
					} else {
						this.visible_message( new Txt( "<span class='warning'> " ).icon( this ).str( " " ).item( this ).str( " suddenly lies still and quiet." ).ToString() );
					}
					this.disabled = Rand13.Int( 20, 40 );
					Map13.Walk( this, 0, 0 );
				}
			}

			if ( this.exploding && Rand13.PercentChance( 20 ) ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					this.visible_message( new Txt( "<span class='warning'> " ).icon( this ).str( " " ).item( this ).str( " begins to spark and shake violenty!</span>" ).ToString() );
				} else {
					this.visible_message( new Txt( "<span class='warning'> " ).icon( this ).str( " " ).item( this ).str( " sparks and shakes like it's about to explode!</span>" ).ToString() );
				}
				s3 = new Effect_Effect_System_SparkSpread();
				s3.set_up( 3, 1, this );
				s3.start();
			}

			if ( !this.exploding && !( this.disabled != 0 ) && Rand13.PercentChance( ((int)( this.explode_chance )) ) ) {
				this.exploding = true;
				this.stat = 1;
				this.wander = true;
				Map13.Walk( this, 0, 0 );
				Task13.Schedule( Rand13.Int( 50, 80 ), (Task13.Closure)(() => {
					
					if ( !( this.disabled != 0 ) && this.exploding ) {
						GlobalFuncs.explosion( GlobalFuncs.get_turf( this ), 0, 1, 4, 7 );
					}
					return;
				}));
			}
			return base.Life();
		}

		// Function from file: drone.dm
		public override int Process_Spacemove( bool? check_drift = null, bool? ignore_slip = null ) {
			check_drift = check_drift ?? false;

			return 1;
		}

	}

}