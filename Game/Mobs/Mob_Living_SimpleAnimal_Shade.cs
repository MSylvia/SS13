// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Shade : Mob_Living_SimpleAnimal {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "Shade";
			this.icon_living = "shade";
			this.icon_dead = "shade_dead";
			this.maxHealth = 50;
			this.health = 50;
			this.speak_emote = new ByTable(new object [] { "hisses" });
			this.emote_hear = new ByTable(new object [] { "wails", "screeches" });
			this.response_help = "puts their hand through";
			this.response_disarm = "flails at";
			this.response_harm = "punches";
			this.melee_damage_lower = 5;
			this.melee_damage_upper = 15;
			this.attacktext = "drains the life from";
			this.minbodytemp = 0;
			this.maxbodytemp = 4000;
			this.min_oxy = 0;
			this.max_co2 = 0;
			this.max_tox = false;
			this.speed = -1;
			this.stop_automated_movement = true;
			this.status_flags = 8;
			this.faction = "cult";
			this.supernatural = true;
			this.flying = true;
			this.meat_type = typeof(Obj_Item_Weapon_Ectoplasm);
			this.icon = "icons/mob/mob.dmi";
			this.icon_state = "shade";
		}

		public Mob_Living_SimpleAnimal_Shade ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: shade.dm
		public override bool Life(  ) {
			int? i = null;
			dynamic M = null;

			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();

			if ( this.stat == 2 ) {
				i = null;
				i = 0;

				while (( i ??0) < 3) {
					new Obj_Item_Weapon_Ectoplasm( this.loc );
					i++;
				}

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) && !Lang13.Bool( M.blinded ) ) {
						M.show_message( "<span class='warning'> " + this + " lets out a contented sigh as their form unwinds.</span>" );
						this.ghostize();
					}
				}
				GlobalFuncs.qdel( this );
				return false;
			}
			return false;
		}

		// Function from file: shade.dm
		public override bool shuttle_act( Shuttle S = null ) {
			
			if ( !Lang13.Bool( this.flags & 128 ) ) {
				this.health -= Rand13.Int( 5, 45 );
			}
			return false;
		}

		// Function from file: shade.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic damage = null;
			dynamic M = null;
			dynamic M2 = null;

			((Mob)b).delayNextAttack( 8 );

			if ( a is Obj_Item_Device_Soulstone ) {
				((Obj_Item)a).transfer_soul( "SHADE", this, b );
			} else if ( Lang13.Bool( a.force ) ) {
				damage = a.force;

				if ( a.damtype == "halloss" ) {
					damage = 0;
				}

				if ( a is Obj_Item_Weapon_Nullrod ) {
					damage *= 2;
					this.purge = 3;
				}
				this.health -= damage;

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) && !Lang13.Bool( M.blinded ) ) {
						M.show_message( "<span class='warning'> <B>" + this + " has been attacked with " + a + " by " + b + ".</span></B>" );
					}
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'> This weapon is ineffective, it does no damage.</span>" );

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					M2 = _b;
					

					if ( Lang13.Bool( M2.client ) && !Lang13.Bool( M2.blinded ) ) {
						M2.show_message( "<span class='warning'> " + b + " gently taps " + this + " with " + a + ".</span>" );
					}
				}
			}
			return null;
		}

		// Function from file: shade.dm
		public override dynamic cultify(  ) {
			return null;
		}

		// Function from file: shade.dm
		public override dynamic gib( bool? animation = null, bool? meat = null ) {
			this.death( true );
			this.monkeyizing = true;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			GlobalVars.dead_mob_list.Remove( this );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: mind.dm
		public override void mind_initialize(  ) {
			base.mind_initialize();
			this.mind.assigned_role = "Shade";
			return;
		}

	}

}