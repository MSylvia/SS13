// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Retaliate_Cluwne : Mob_Living_SimpleAnimal_Hostile_Retaliate {

		public int footstep = 0;
		public bool brain_op_stage = false;
		public SpeechFilter filter = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "cluwne";
			this.icon_dead = "cluwne_dead";
			this.icon_gib = "clown_gib";
			this.speak_chance = 1;
			this.turns_per_move = 5;
			this.response_help = "pokes the";
			this.response_disarm = "gently pushes aside the";
			this.response_harm = "hits the";
			this.speak = new ByTable(new object [] { "HONK", "Honk!", "PLEASE KILL ME" });
			this.speak_emote = new ByTable(new object [] { "squeals", "cries", "sobs" });
			this.emote_see = new ByTable(new object [] { "honks sadly" });
			this.maxHealth = 30;
			this.health = 30;
			this.speed = 10;
			this.harm_intent_damage = 1;
			this.melee_damage_upper = 0.1;
			this.attacktext = "honks at";
			this.attack_sound = "sound/items/bikehorn.ogg";
			this.minbodytemp = 270;
			this.maxbodytemp = 370;
			this.heat_damage_per_tick = 15;
			this.cold_damage_per_tick = 10;
			this.unsuitable_atoms_damage = 10;
			this.disabilities = 6;
			this.mutations = new ByTable(new object [] { 5 });
			this.icon_state = "cluwne";
		}

		// Function from file: cluwne.dm
		public Mob_Living_SimpleAnimal_Hostile_Retaliate_Cluwne ( dynamic loc = null ) : base( (object)(loc) ) {
			string tickle_prefixes = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.filter = new SpeechFilter();
			this.filter.addPickReplacement( "ÿ(asshole|comdom|shitter|shitler|retard|dipshit|dipshit|greyshirt|nigger|security|shitcurity)", new ByTable(new object [] { "honker", "fun police", "unfun" }) );
			tickle_prefixes = "ÿ(kill+|murder|beat|wound|hurt|harm)";
			this.filter.addReplacement( "" + tickle_prefixes + "ing", "tickling" );
			this.filter.addReplacement( "" + tickle_prefixes + "ed", "tickled" );
			this.filter.addReplacement( tickle_prefixes, "tickle" );
			this.filter.addReplacement( "^h[aei]lp.*", "END THE SHOW" );
			this.filter.addReplacement( "h[aei]lp\\s+me", "end my show" );
			this.filter.addReplacement( "h[aei]lp\\s+him", "end his show" );
			this.filter.addReplacement( "h[aei]lp\\s+her", "end her show" );
			this.filter.addReplacement( "h[aei]lp\\s+them", "end their show" );
			this.filter.addReplacement( "h[aei]lp\\s+([^\\s]+)", "end $1's show" );
			return;
		}

		// Function from file: cluwne.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;

			bool _default = false;

			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( _default ) {
				
				if ( this.m_intent == "run" ) {
					
					if ( this.footstep > 1 ) {
						this.footstep = 0;
						GlobalFuncs.playsound( this, "clownstep", 50, 1 );
					} else {
						this.footstep++;
					}
				} else {
					GlobalFuncs.playsound( this, "clownstep", 20, 1 );
				}
			}
			return _default;
		}

		// Function from file: cluwne.dm
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			string message2 = null;

			
			if ( this.timestopped ) {
				return;
			}
			message2 = Rand13.Pick(new object [] { "quietly sobs into a dirty handkerchief", "cries into " + ( this.gender == GlobalVars.MALE ? "his" : "her" ) + " hands", "bawls like a cow" });
			message2 = "<B>" + this + "</B> " + message2;
			base.emote( message2, type, (object)(message), auto ); return;
		}

		// Function from file: cluwne.dm
		public void handle_disabilities(  ) {
			
			if ( Rand13.PercentChance( 5 ) && this.paralysis < 10 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You have a seizure!</span>" );
				this.Paralyse( 10 );
			}
			return;
		}

		// Function from file: cluwne.dm
		public override void Die( bool? gore = null ) {
			base.Die( gore );
			Map13.Walk( this, 0, 0 );
			return;
		}

		// Function from file: cluwne.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			ByTable temp_message = null;
			int? i = null;

			message = this.filter.FilterSpeech( String13.ToLower( message ) );
			temp_message = GlobalFuncs.text2list( message, " " );
			i = null;
			i = 1;

			while (( i ??0) <= temp_message.len) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					temp_message[i] = "HONK";
				}
				i++;
			}
			message = String13.ToUpper( GlobalFuncs.list2text( temp_message, " " ) );
			return base.say( (object)(message), speaking, radio );
		}

		// Function from file: cluwne.dm
		public override dynamic Bump(Ent_Static Obstacle = null, dynamic yes = null) {
			Mob M = null;

			
			if ( !Lang13.Bool( yes ) || this.now_pushing ) {
				return null;
			}

			if ( Obstacle is Mob ) {
				M = (Mob)Obstacle;
				GlobalFuncs.to_chat( this, new Txt( "<span class='danger'>You are too depressed to push " ).item( M ).str( " out of " ).the( null ).str( "way.</span>" ).ToString() );
				((dynamic)M).LAssailant = this;
				return null;
			}
			base.Bump( Obstacle );
			return null;
		}

		// Function from file: cluwne.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Book ) {
				this.gib();
				return null;
			}
			return null;
		}

		// Function from file: cluwne.dm
		public override dynamic AttackingTarget(  ) {
			dynamic L = null;

			
			if ( this.target is Mob_Living ) {
				L = this.target;

				if ( Rand13.PercentChance( 10 ) ) {
					((Mob)L).Weaken( 5 );
					((Ent_Static)L).visible_message( new Txt( "<span class='danger'>" ).The( this.name ).item().str( " slips " ).the( L.name ).item().str( "!</span>" ).ToString() );
					return null;
				}
			}
			return base.AttackingTarget();
		}

	}

}