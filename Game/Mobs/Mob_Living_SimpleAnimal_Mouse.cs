// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Mouse : Mob_Living_SimpleAnimal {

		public dynamic _color = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.real_name = "mouse";
			this.icon_living = "mouse_gray";
			this.icon_dead = "mouse_gray_dead";
			this.speak = new ByTable(new object [] { "Squeek!", "SQUEEK!", "Squeek?" });
			this.speak_emote = new ByTable(new object [] { "squeeks", "squeeks", "squiks" });
			this.emote_hear = new ByTable(new object [] { "squeeks", "squeaks", "squiks" });
			this.emote_see = new ByTable(new object [] { "runs in a circle", "shakes", "scritches at something" });
			this.pass_flags = 1;
			this.speak_chance = 1;
			this.turns_per_move = 5;
			this.maxHealth = 5;
			this.health = 5;
			this.response_help = "pets the";
			this.response_disarm = "gently pushes aside the";
			this.response_harm = "stamps on the";
			this.min_oxy = 16;
			this.minbodytemp = 223;
			this.maxbodytemp = 323;
			this.treadmill_speed = 0.2;
			this.size = 1;
			this.holder_type = typeof(Obj_Item_Weapon_Holder_Animal_Mouse);
			this.icon_state = "mouse_gray";
			this.see_in_dark = 6;
		}

		// Function from file: mouse.dm
		public Mob_Living_SimpleAnimal_Mouse ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.config != null && GlobalVars.config.uneducated_mice ) {
				this.universal_understand = false;
			}

			if ( this.name == Lang13.Initial( this, "name" ) ) {
				this.name = "" + this.name + " (" + Rand13.Int( 1, 1000 ) + ")";
			}
			this.real_name = this.name;

			if ( !Lang13.Bool( this._color ) ) {
				this._color = Rand13.PickFromTable( new ByTable(new object [] { "brown", "gray", "white" }) );
			}
			this.icon_state = "mouse_" + this._color;
			this.icon_living = "mouse_" + this._color;
			this.icon_dead = "mouse_" + this._color + "_dead";
			this.desc = "It's a small " + this._color + " rodent, often seen hiding in maintenance areas and making a nuisance of itself.";
			this.add_language( "Mouse" );
			this.default_language = GlobalVars.all_languages["Mouse"];
			return;
		}

		// Function from file: mouse.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			
			if ( !Lang13.Bool( this.flags & 128 ) ) {
				this.investigation_log( "singulo", "has been consumed by a singularity" );
				this.gib();
				return 0;
			}
			return 0;
		}

		// Function from file: mouse.dm
		public override string say_quote( dynamic text = null ) {
			
			if ( !Lang13.Bool( text ) ) {
				return "squeaks, \"...\"";
			}
			return "squeaks, " + text;
		}

		// Function from file: mouse.dm
		public override void Die( bool? gore = null ) {
			
			if ( this.client != null ) {
				this.client.time_died_as_mouse = Game13.time;
			}
			base.Die( gore );
			return;
		}

		// Function from file: mouse.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			Ent_Dynamic M = null;

			
			if ( O is Mob_Living_Carbon_Human ) {
				
				if ( !Lang13.Bool( this.stat ) ) {
					M = O;
					GlobalFuncs.to_chat( M, new Txt( "<span class='notice'>" ).icon( this ).str( " Squeek!</span>" ).ToString() );
					GlobalFuncs.to_chat( M, "sound/effects/mousesqueek.ogg" );
				}
			}
			base.Crossed( O, (object)(X) );
			return null;
		}

		// Function from file: mouse.dm
		public override void start_pulling( Ent_Static AM = null ) {
			GlobalFuncs.to_chat( this, "<span class='warning'>You are too small to pull anything.</span>" );
			return;
		}

		// Function from file: mouse.dm
		public void splat(  ) {
			this.health = 0;
			this.stat = 2;
			this.icon_dead = "mouse_" + this._color + "_splat";
			this.icon_state = "mouse_" + this._color + "_splat";

			if ( this.client != null ) {
				this.client.time_died_as_mouse = Game13.time;
			}
			return;
		}

		// Function from file: mouse.dm
		public override bool Life(  ) {
			dynamic M = null;

			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();

			if ( !Lang13.Bool( this.stat ) && Rand13.PercentChance( Convert.ToInt32( this.speak_chance ) ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, null ) )) {
					M = _a;
					
					GlobalFuncs.to_chat( M, "sound/effects/mousesqueek.ogg" );
				}
			}

			if ( !Lang13.Bool( this.ckey ) && this.stat == 0 && Rand13.PercentChance( ((int)( 0.5 )) ) ) {
				this.stat = 1;
				this.icon_state = "mouse_" + this._color + "_sleep";
				this.wander = false;
				this.speak_chance = 0;
			} else if ( this.stat == 1 ) {
				
				if ( Lang13.Bool( this.ckey ) || Rand13.PercentChance( 1 ) ) {
					this.stat = 0;
					this.icon_state = "mouse_" + this._color;
					this.wander = true;
				} else if ( Rand13.PercentChance( 5 ) ) {
					this.emote( "snuffles" );
				}
			}
			return false;
		}

		// Function from file: ventcrawl.dm
		public override bool can_ventcrawl(  ) {
			return true;
		}

		// Function from file: mouse.dm
		[Verb]
		[VerbInfo( name: "Hide", desc: "Allows to hide beneath tables or certain items. Toggled on or off.", group: "Object" )]
		public void f_hide(  ) {
			
			if ( this.layer != 2.2 ) {
				this.layer = 2.2;
				GlobalFuncs.to_chat( this, "<span class='notice'>You are now hiding.</span>" );
			} else {
				this.layer = GlobalVars.MOB_LAYER;
				GlobalFuncs.to_chat( this, "<span class='notice'>You have stopped hiding.</span>" );
			}
			return;
		}

		// Function from file: mouse.dm
		[Verb]
		[VerbInfo( name: "Crawl through Vent", desc: "Enter an air vent and crawl through the pipe system.", group: "Object" )]
		public void ventcrawl(  ) {
			dynamic pipe = null;

			pipe = this.start_ventcrawl();

			if ( Lang13.Bool( pipe ) ) {
				this.handle_ventcrawl( pipe );
			}
			return;
		}

	}

}