// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_Carbon_Alien_Humanoid : Mob_Living_Carbon_Alien {

		public Obj_Item wear_suit = null;
		public dynamic co2overloadtime = null;
		public double temperature_resistance = 348.41;
		public Obj_Item head = null;
		public dynamic r_store = null;
		public dynamic l_store = null;
		public string caste = "";
		public bool temperature_alert = false;
		public ByTable overlays_lying = new ByTable( 6 );
		public ByTable overlays_standing = new ByTable( 6 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.species_type = typeof(Mob_Living_Carbon_Alien_Humanoid);
			this.icon_state = "alien_s";
		}

		// Function from file: humanoid.dm
		public Mob_Living_Carbon_Alien_Humanoid ( dynamic loc = null ) : base( (object)(loc) ) {
			Reagents R = null;

			R = new Reagents( 100 );
			this.reagents = R;
			R.my_atom = this;

			if ( this.name == "alien" ) {
				this.name = "alien (" + Rand13.Int( 1, 1000 ) + ")";
			}
			this.real_name = this.name;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: update_icons.dm
		public override void update_fire( bool? update_icons = null ) {
			this.overlays.Remove( this.overlays_lying[5] );
			this.overlays.Remove( this.overlays_standing[5] );

			if ( this.on_fire ) {
				this.overlays_lying[5] = new Image( "icons/mob/OnFire.dmi", null, "Lying", -5 );
				this.overlays_standing[5] = new Image( "icons/mob/OnFire.dmi", null, "Standing", -5 );

				if ( this.lying == true ) {
					this.overlays.Add( this.overlays_lying[5] );
				} else {
					this.overlays.Add( this.overlays_standing[5] );
				}
				return;
			} else {
				this.overlays_lying[5] = null;
				this.overlays_standing[5] = null;
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_targeted( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			
			if ( this.targeted_by != null && this.target_locked != null ) {
				this.overlays_lying[6] = this.target_locked;
				this.overlays_standing[6] = this.target_locked;
			} else if ( !( this.targeted_by != null ) && this.target_locked != null ) {
				Lang13.Delete( this.target_locked );
				this.target_locked = null;
			}

			if ( !( this.targeted_by != null ) ) {
				this.overlays_lying[6] = null;
				this.overlays_standing[6] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_l_hand( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			dynamic t_inhand_state = null;

			this.overlays.Remove( this.overlays_standing[3] );

			if ( Lang13.Bool( this.l_hand ) ) {
				t_state = this.l_hand.item_state;
				t_inhand_state = this.l_hand.inhand_states["left_hand"];

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.l_hand.icon_state;
				}
				this.l_hand.screen_loc = "CENTER:16,SOUTH:5";
				this.overlays_standing[3] = new Image( t_inhand_state, null, t_state );
			} else {
				this.overlays_standing[3] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_r_hand( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			dynamic t_inhand_state = null;

			this.overlays.Remove( this.overlays_standing[4] );

			if ( Lang13.Bool( this.r_hand ) ) {
				t_state = this.r_hand.item_state;
				t_inhand_state = this.r_hand.inhand_states["right_hand"];

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.r_hand.icon_state;
				}
				this.r_hand.screen_loc = "CENTER-1:16,SOUTH:5";
				this.overlays_standing[4] = new Image( t_inhand_state, null, t_state );
			} else {
				this.overlays_standing[4] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_pockets( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			
			if ( Lang13.Bool( this.l_store ) ) {
				this.l_store.screen_loc = "CENTER+1:18,SOUTH:5";
			}

			if ( Lang13.Bool( this.r_store ) ) {
				this.r_store.screen_loc = "CENTER+2:20,SOUTH:5";
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_head( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			Image lying = null;
			Image standing = null;

			
			if ( this.head != null ) {
				t_state = this.head.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.head.icon_state;
				}
				lying = new Image( "icons/mob/mob.dmi", null, "" + t_state + "2" );
				standing = new Image( "icons/mob/mob.dmi", null, "" + t_state );

				if ( this.head.blood_DNA != null && this.head.blood_DNA.len != 0 ) {
					lying.overlays.Add( new Image( "icons/effects/blood.dmi", null, "helmetblood2" ) );
					standing.overlays.Add( new Image( "icons/effects/blood.dmi", null, "helmetblood" ) );
				}
				this.head.screen_loc = "WEST+3:12,SOUTH:5";
				this.overlays_lying[1] = lying;
				this.overlays_standing[1] = standing;
			} else {
				this.overlays_lying[1] = null;
				this.overlays_standing[1] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_inv_wear_suit( bool? update_icons = null ) {
			update_icons = update_icons ?? true;

			dynamic t_state = null;
			Image lying = null;
			Image standing = null;
			string t_suit = null;

			
			if ( this.wear_suit != null ) {
				t_state = this.wear_suit.item_state;

				if ( !Lang13.Bool( t_state ) ) {
					t_state = this.wear_suit.icon_state;
				}
				lying = new Image( "icons/mob/mob.dmi", null, "" + t_state + "2" );
				standing = new Image( "icons/mob/mob.dmi", null, "" + t_state );

				if ( this.wear_suit.blood_DNA != null && this.wear_suit.blood_DNA.len != 0 ) {
					t_suit = "suit";

					if ( this.wear_suit is Obj_Item_Clothing_Suit_Armor ) {
						t_suit = "armor";
					}
					lying.overlays.Add( new Image( "icons/effects/blood.dmi", null, "" + t_suit + "blood2" ) );
					standing.overlays.Add( new Image( "icons/effects/blood.dmi", null, "" + t_suit + "blood" ) );
				}
				this.wear_suit.screen_loc = "WEST+4:14,SOUTH:5";

				if ( this.wear_suit is Obj_Item_Clothing_Suit_StraightJacket ) {
					this.drop_from_inventory( this.handcuffed );
					this.drop_hands();
				}
				this.overlays_lying[2] = lying;
				this.overlays_standing[2] = standing;
			} else {
				this.overlays_lying[2] = null;
				this.overlays_standing[2] = null;
			}

			if ( update_icons == true ) {
				this.update_icons();
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void update_hud(  ) {
			
			if ( this.client != null ) {
				this.client.screen.Or( this.contents );
			}
			return;
		}

		// Function from file: update_icons.dm
		public override void regenerate_icons(  ) {
			base.regenerate_icons();

			if ( this.monkeyizing ) {
				return;
			}
			this.update_inv_head( false );
			this.update_inv_wear_suit( false );
			this.update_inv_r_hand( false );
			this.update_inv_l_hand( false );
			this.update_inv_pockets( false );
			this.update_hud();
			this.update_icons();
			this.update_fire();
			return;
		}

		// Function from file: update_icons.dm
		public override dynamic update_icons(  ) {
			Image I = null;
			Image I2 = null;
			Image I3 = null;

			this.lying_prev = this.lying;
			this.update_hud();
			this.overlays.len = 0;

			if ( this.stat == 2 ) {
				
				if ( this.fireloss > 125 ) {
					this.icon_state = "alien" + this.caste + "_husked";
				} else {
					this.icon_state = "alien" + this.caste + "_dead";
				}

				foreach (dynamic _a in Lang13.Enumerate( this.overlays_lying, typeof(Image) )) {
					I = _a;
					
					this.overlays.Add( I );
				}
			} else if ( this.lying == true ) {
				
				if ( this.resting != 0 ) {
					this.icon_state = "alien" + this.caste + "_sleep";
				} else if ( this.stat == 1 ) {
					this.icon_state = "alien" + this.caste + "_unconscious";
				} else {
					this.icon_state = "alien" + this.caste + "_l";
				}

				foreach (dynamic _b in Lang13.Enumerate( this.overlays_lying, typeof(Image) )) {
					I2 = _b;
					
					this.overlays.Add( I2 );
				}
			} else {
				
				if ( this.m_intent == "run" ) {
					this.icon_state = "alien" + this.caste + "_running";
				} else {
					this.icon_state = "alien" + this.caste + "_s";
				}

				foreach (dynamic _c in Lang13.Enumerate( this.overlays_standing, typeof(Image) )) {
					I3 = _c;
					
					this.overlays.Add( I3 );
				}
			}
			return null;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.AddInfectionImages();
			return null;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			GasMixture environment = null;
			Ent_Static location_as_object = null;
			Obj_Item_Weapon_Grab G = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.monkeyizing ) {
				return false;
			}
			base.Life();
			environment = this.loc.return_air();

			if ( this.stat != 2 ) {
				
				if ( GlobalVars.air_master.current_cycle % 4 == 2 ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.breathe();
						return;
					}));
				} else if ( this.loc is Obj ) {
					location_as_object = this.loc;
					((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
				}
				this.handle_mutations_and_radiation();
				this.handle_chemicals_in_body();
				this.handle_disabilities();
			}
			this.blinded = null;
			this.handle_environment( environment );
			this.handle_stomach();
			this.handle_regular_status_updates();
			this.update_canmove();

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Grab) )) {
				G = _a;
				
				G.process();
			}

			if ( this.client != null ) {
				this.handle_regular_hud_updates();
			}
			return false;
		}

		// Function from file: inventory.dm
		public override dynamic attack_ui( dynamic slot = null ) {
			dynamic W = null;

			W = this.get_active_hand();

			if ( Lang13.Bool( W ) ) {
				
				if ( !( W is Obj_Item ) ) {
					return null;
				}

				dynamic _a = slot; // Was a switch-case, sorry for the mess.
				if ( _a==15 ) {
					
					if ( Lang13.Bool( this.l_store ) ) {
						return null;
					}

					if ( Convert.ToDouble( W.w_class ) > 3 ) {
						return null;
					}
					this.u_equip( W, false );
					this.l_store = W;
					this.update_inv_pockets();
				} else if ( _a==16 ) {
					
					if ( Lang13.Bool( this.r_store ) ) {
						return null;
					}

					if ( Convert.ToDouble( W.w_class ) > 3 ) {
						return null;
					}
					this.u_equip( W, false );
					this.r_store = W;
					this.update_inv_pockets();
				}
			} else {
				
				dynamic _b = slot; // Was a switch-case, sorry for the mess.
				if ( _b==13 ) {
					
					if ( this.wear_suit != null ) {
						this.wear_suit.attack_alien( this );
					}
				} else if ( _b==11 ) {
					
					if ( this.head != null ) {
						this.head.attack_alien( this );
					}
				} else if ( _b==15 ) {
					
					if ( Lang13.Bool( this.l_store ) ) {
						((Ent_Static)this.l_store).attack_alien( this );
					}
				} else if ( _b==16 ) {
					
					if ( Lang13.Bool( this.r_store ) ) {
						((Ent_Static)this.r_store).attack_alien( this );
					}
				}
			}
			return null;
		}

		// Function from file: inventory.dm
		public override bool u_equip( dynamic W = null, bool? dropped = null ) {
			dropped = dropped ?? true;

			bool success = false;

			
			if ( !Lang13.Bool( W ) ) {
				return false;
			}
			success = false;

			if ( W == this.wear_suit ) {
				this.wear_suit = null;
				success = true;
				this.update_inv_wear_suit( false );
			} else if ( W == this.head ) {
				this.head = null;
				success = true;
				this.update_inv_head( false );
			} else if ( W == this.r_store ) {
				this.r_store = null;
				success = true;
				this.update_inv_pockets( false );
			} else if ( W == this.l_store ) {
				this.l_store = null;
				success = true;
				this.update_inv_pockets( false );
			} else if ( W == this.r_hand ) {
				this.r_hand = null;
				success = true;
				this.update_inv_r_hand( false );
			} else if ( W == this.l_hand ) {
				this.l_hand = null;
				success = true;
				this.update_inv_l_hand( false );
			} else {
				return false;
			}

			if ( success ) {
				
				if ( this.client != null ) {
					this.client.screen.Remove( W );
				}

				if ( dropped == true ) {
					W.loc = this.loc;
					((Obj_Item)W).dropped( this );
				}

				if ( Lang13.Bool( W ) ) {
					W.layer = Lang13.Initial( W, "layer" );
				}
			}
			return true;
		}

		// Function from file: humanoid.dm
		public override void show_inv( dynamic user = null ) {
			string dat = null;

			((Mob)user).set_machine( this );
			dat = new Txt( "\n	<B><HR><FONT size=3>" ).item( this.name ).str( "</FONT></B>\n	<BR><HR>\n	<BR><B>Left Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=l_hand'>" ).item( ( Lang13.Bool( this.l_hand ) ? "" + this.l_hand : "Nothing" ) ).str( "</A>\n	<BR><B>Right Hand:</B> <A href='?src=" ).Ref( this ).str( ";item=r_hand'>" ).item( ( Lang13.Bool( this.r_hand ) ? "" + this.r_hand : "Nothing" ) ).str( "</A>\n	<BR><B>Head:</B> <A href='?src=" ).Ref( this ).str( ";item=head'>" ).item( ( this.head != null ? "" + this.head : "Nothing" ) ).str( "</A>\n	<BR><B>(Exo)Suit:</B> <A href='?src=" ).Ref( this ).str( ";item=suit'>" ).item( ( this.wear_suit != null ? "" + this.wear_suit : "Nothing" ) ).str( "</A>\n	<BR><A href='?src=" ).Ref( this ).str( ";item=pockets'>Empty Pouches</A>\n	<BR><A href='?src=" ).Ref( user ).str( ";mach_close=mob" ).Ref( this ).str( "'>Close</A>\n	<BR>" ).ToString();
			Interface13.Browse( user, dat, new Txt( "window=mob" ).Ref( this ).str( ";size=340x480" ).ToString() );
			GlobalFuncs.onclose( user, new Txt( "mob" ).Ref( this ).ToString() );
			return;
		}

		// Function from file: humanoid.dm
		public override bool restrained(  ) {
			
			if ( this.timestopped ) {
				return true;
			}

			if ( Lang13.Bool( this.handcuffed ) ) {
				return true;
			}
			return false;
		}

		// Function from file: humanoid.dm
		public override dynamic attack_alien( Mob user = null ) {
			int damage = 0;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You cannot attack people before the game has started.</span>" );
				return null;
			}
			base.attack_alien( user );

			dynamic _a = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.sleeping = Num13.MaxInt( 0, this.sleeping - 5 );
				this.resting = 0;
				this.AdjustParalysis( -3 );
				this.AdjustStunned( -3 );
				this.AdjustWeakened( -3 );
				this.visible_message( "<span class='notice'>" + user + " nuzzles " + this + " trying to wake it up !</span>" );
			} else {
				
				if ( Convert.ToDouble( this.health ) > 0 ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );
					damage = Rand13.Int( 1, 3 );
					this.visible_message( new Txt( "<span class='danger'>" ).The( user ).item().str( " has bit " ).item( this ).str( "!</span>" ).ToString() );
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.to_chat( user, "<span class='alien'>" + this.name + " is too injured for that.</span>" );
				}
			}
			return null;
		}

		// Function from file: humanoid.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic G = null;
			Obj_Effect_EquipE_Human O = null;
			Game_Data G2 = null;
			int damage = 0;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>You cannot attack people before the game has started.</span>" );
				return null;
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( a.gloves ) && a.gloves is Obj_Item_Clothing_Gloves ) {
				G = a.gloves;

				if ( Lang13.Bool( G.cell ) ) {
					
					if ( a.a_intent == "hurt" ) {
						
						if ( Convert.ToDouble( G.cell.charge ) >= 2500 ) {
							G.cell.charge -= 2500;
							this.Weaken( 5 );

							if ( Convert.ToDouble( this.stuttering ) < 5 ) {
								this.stuttering = 5;
							}
							this.Stun( 5 );
							this.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " has been touched with the stun gloves by " ).item( a ).str( " !</span>" ).ToString() );
							return null;
						} else {
							GlobalFuncs.to_chat( a, "<span class='warning'>Not enough charge !</span>" );
							return null;
						}
					}
				}
			}

			dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				
				if ( Convert.ToDouble( this.health ) > 0 ) {
					this.help_shake_act( a );
				} else if ( Convert.ToDouble( a.health ) >= -75 ) {
					
					if ( Lang13.Bool( a.head ) && Lang13.Bool( a.head.flags & 4 ) || Lang13.Bool( a.wear_mask ) && !Lang13.Bool( a.wear_mask.flags & 32 ) || this.head != null && Lang13.Bool( this.head.flags & 4 ) || Lang13.Bool( this.wear_mask ) && !Lang13.Bool( this.wear_mask.flags & 32 ) ) {
						GlobalFuncs.to_chat( a, "<span class='notice'>Remove that mask!</span>" );
						return null;
					}
					O = new Obj_Effect_EquipE_Human();
					O.source = a;
					O.target = this;
					O.s_loc = a.loc;
					O.t_loc = this.loc;
					O.place = "CPR";
					this.requests.Add( O );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						O.process();
						return;
						return;
					}));
				}
			} else if ( _a=="grab" ) {
				
				if ( a == this ) {
					return null;
				}
				G2 = GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Grab), a, this );
				((Mob)a).put_in_active_hand( G2 );
				this.grabbed_by.Add( G2 );
				((dynamic)G2).synch();
				this.LAssailant = a;
				GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
				this.visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " has grabbed " ).the( this ).item().str( " passively!</span>" ).ToString() );
			} else if ( _a=="hurt" ) {
				damage = Rand13.Int( 1, 9 );

				if ( Rand13.PercentChance( 90 ) ) {
					Interface13.Stat( null, a.mutations.Contains( 4 ) );

					if ( false ) {
						damage += 14;
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.Weaken( damage );
							Map13.StepAway( this, a, 15 );
							Task13.Sleep( 3 );
							Map13.StepAway( this, a, 15 );
							return;
						}));
					}
					GlobalFuncs.playsound( this.loc, "punch", 25, 1, -1 );
					this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has punched " ).the( this ).item().str( " !</span>" ).ToString() );

					if ( damage > 9 || Rand13.PercentChance( 5 ) ) {
						this.Weaken( 1 );
						this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has weakened " ).the( this ).item().str( " !</span>" ).ToString() );
					}
					this.adjustBruteLoss( damage );
					this.updatehealth();
				} else {
					GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
					this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has attempted to punch " ).the( this ).item().str( " !</span>" ).ToString() );
				}
			} else if ( _a=="disarm" ) {
				
				if ( !( this.lying == true ) ) {
					
					if ( Rand13.PercentChance( 5 ) ) {
						this.Weaken( 2 );
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has pushed down " ).the( this ).item().str( " !</span>" ).ToString() );
					} else if ( Rand13.PercentChance( 50 ) ) {
						this.drop_item();
						GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );
						this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has disarmed " ).the( this ).item().str( " !</span>" ).ToString() );
					} else {
						GlobalFuncs.playsound( this.loc, "sound/weapons/punchmiss.ogg", 25, 1, -1 );
						this.visible_message( new Txt( "<span class='danger'>" ).item( a ).str( " has attempted to disarm " ).the( this ).item().str( " !</span>" ).ToString() );
					}
				}
			}
			return null;
		}

		// Function from file: humanoid.dm
		public override void attack_slime( Mob_Living_Carbon_Slime user = null ) {
			int damage = 0;
			int stunprob = 0;
			double power = 0;
			Effect_Effect_System_SparkSpread s = null;

			
			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You cannot attack people before the game has started.</span>" );
				return;
			}

			if ( Lang13.Bool( user.Victim ) ) {
				return;
			}

			if ( Convert.ToDouble( this.health ) > -100 ) {
				this.visible_message( new Txt( "<span class='danger'>" ).The( user ).item().str( " glomps " ).item( this ).str( "!</span>" ).ToString() );
				damage = Rand13.Int( 1, 3 );

				if ( user is Mob_Living_Carbon_Slime_Adult ) {
					damage = Rand13.Int( 10, 40 );
				} else {
					damage = Rand13.Int( 5, 35 );
				}
				this.adjustBruteLoss( damage );

				if ( user.powerlevel > 0 ) {
					stunprob = 10;
					power = user.powerlevel + Rand13.Int( 0, 3 );

					dynamic _a = user.powerlevel; // Was a switch-case, sorry for the mess.
					if ( 1<=_a&&_a<=2 ) {
						stunprob = 20;
					} else if ( 3<=_a&&_a<=4 ) {
						stunprob = 30;
					} else if ( 5<=_a&&_a<=6 ) {
						stunprob = 40;
					} else if ( 7<=_a&&_a<=8 ) {
						stunprob = 60;
					} else if ( _a==9 ) {
						stunprob = 70;
					} else if ( _a==10 ) {
						stunprob = 95;
					}

					if ( Rand13.PercentChance( stunprob ) ) {
						user.powerlevel -= 3;

						if ( user.powerlevel < 0 ) {
							user.powerlevel = 0;
						}
						this.visible_message( new Txt( "<span class='danger'>" ).The( user ).item().str( " has shocked " ).item( this ).str( "!</span>" ).ToString() );
						this.Weaken( power );

						if ( Convert.ToDouble( this.stuttering ) < power ) {
							this.stuttering = power;
						}
						this.Stun( power );
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();

						if ( Rand13.PercentChance( stunprob ) && user.powerlevel >= 8 ) {
							this.adjustFireLoss( user.powerlevel * Rand13.Int( 6, 10 ) );
						}
					}
				}
				this.updatehealth();
			}
			return;
		}

		// Function from file: humanoid.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Mob_Living_Carbon_Monkey ) ) {
				return null;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>You cannot attack people before the game has started.</span>" );
				return null;
			}
			base.attack_paw( a, (object)(b), (object)(c) );

			dynamic _a = a.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.help_shake_act( a );
			} else {
				
				if ( this.wear_mask is Obj_Item_Clothing_Mask_Muzzle ) {
					return null;
				}

				if ( Convert.ToDouble( this.health ) > 0 ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );
					this.visible_message( new Txt( "<span class='danger'>" ).The( a ).item().str( " has bit " ).the( this ).item().str( "!</span>" ).ToString() );
					this.adjustBruteLoss( Rand13.Int( 1, 3 ) );
					this.updatehealth();
				}
			}
			return null;
		}

		// Function from file: humanoid.dm
		public override bool blob_act( dynamic severity = null ) {
			bool shielded = false;
			double? damage = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( this.stat == 2 ) {
				return false;
			}
			shielded = false;
			damage = null;

			if ( this.stat != 2 ) {
				damage = Rand13.Int( 30, 40 );
			}

			if ( shielded ) {
				damage /= 4;
			}
			GlobalFuncs.to_chat( this, "<span class='warning'>The blob attacks you!</span>" );
			this.adjustFireLoss( damage );
			return false;
		}

		// Function from file: humanoid.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			bool shielded = false;
			dynamic b_loss = null;
			dynamic f_loss = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.blinded ) ) {
				Icon13.Flick( "flash", this.flash );
			}
			shielded = false;
			b_loss = null;
			f_loss = null;

			switch ((int?)(severity)) {
				case 1:
					b_loss += 500;
					this.gib();
					return false;
					break;
				case 2:
					
					if ( !shielded ) {
						b_loss += 60;
					}
					f_loss += 60;
					this.ear_damage += 30;
					this.ear_deaf += 120;
					break;
				case 3:
					b_loss += 30;

					if ( Rand13.PercentChance( 50 ) && !shielded ) {
						this.Paralyse( 1 );
					}
					this.ear_damage += 15;
					this.ear_deaf += 60;
					break;
			}
			this.adjustBruteLoss( b_loss );
			this.adjustFireLoss( f_loss );
			this.updatehealth();
			return false;
		}

		// Function from file: humanoid.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}

			if ( this.wear_suit != null ) {
				this.wear_suit.emp_act( severity );
			}

			if ( this.head != null ) {
				this.head.emp_act( severity );
			}

			if ( Lang13.Bool( this.r_store ) ) {
				this.r_store.emp_act( severity );
			}

			if ( Lang13.Bool( this.l_store ) ) {
				this.l_store.emp_act( severity );
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: vgstation13.dme
		public override void emote( dynamic act = null, int? type = null, dynamic message = null, bool? auto = null ) {
			type = type ?? 1;

			string param = null;
			int t1 = 0;
			bool muzzled = false;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( this.timestopped ) {
				return;
			}
			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}

			if ( String13.FindIgnoreCase( act, "s", -1, 0 ) != 0 && !( String13.FindIgnoreCase( act, "_", -2, 0 ) != 0 ) ) {
				act = String13.SubStr( act, 1, Lang13.Length( act ) );
			}
			muzzled = this.wear_mask is Obj_Item_Clothing_Mask_Muzzle;

			dynamic _a = act; // Was a switch-case, sorry for the mess.
			if ( _a=="me" ) {
				
				if ( this.silent != 0 ) {
					return;
				}

				if ( this.client != null ) {
					
					if ( ( this.client.prefs.muted & 1 ) != 0 ) {
						GlobalFuncs.to_chat( this, "<span class='warning>You cannot send IC messages (muted).</span>" );
						return;
					}

					if ( this.client.handle_spam_prevention( message, 1 ) ) {
						return;
					}
				}

				if ( Lang13.Bool( this.stat ) ) {
					return;
				}

				if ( !Lang13.Bool( message ) ) {
					return;
				}
				this.custom_emote( type, message ); return;
			} else if ( _a=="custom" ) {
				this.custom_emote( type, message ); return;
			} else if ( _a=="sign" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> signs" ).item( ( Lang13.Bool( String13.ParseNumber( param ) ) ? " the number " + String13.ParseNumber( param ) : null ) ).str( "." ).ToString();
					type = 1;
				}
			} else if ( _a=="burp" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> burps." ).ToString();
					type = 2;
				}
			} else if ( _a=="deathgasp" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> lets out a waning guttural screech, green blood bubbling from its maw..." ).ToString();
				type = 2;
			} else if ( _a=="scratch" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> scratches." ).ToString();
					type = 1;
				}
			} else if ( _a=="whimper" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> whimpers." ).ToString();
					type = 2;
				}
			} else if ( _a=="roar" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> roars." ).ToString();
					type = 2;
				}
			} else if ( _a=="hiss" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> hisses." ).ToString();
					type = 2;
				}
			} else if ( _a=="tail" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> waves its tail." ).ToString();
				type = 1;
			} else if ( _a=="gasp" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> gasps." ).ToString();
				type = 2;
			} else if ( _a=="shiver" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> shivers." ).ToString();
				type = 2;
			} else if ( _a=="drool" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> drools." ).ToString();
				type = 1;
			} else if ( _a=="scretch" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> scretches." ).ToString();
					type = 2;
				}
			} else if ( _a=="choke" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> chokes." ).ToString();
				type = 2;
			} else if ( _a=="moan" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> moans!" ).ToString();
				type = 2;
			} else if ( _a=="nod" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> nods its head." ).ToString();
				type = 1;
			} else if ( _a=="sit" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> sits down." ).ToString();
				type = 1;
			} else if ( _a=="sway" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> sways around dizzily." ).ToString();
				type = 1;
			} else if ( _a=="sulk" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> sulks down sadly." ).ToString();
				type = 1;
			} else if ( _a=="twitch" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> twitches violently." ).ToString();
				type = 1;
			} else if ( _a=="dance" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> dances around happily." ).ToString();
					type = 1;
				}
			} else if ( _a=="roll" ) {
				
				if ( !this.restrained() ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> rolls." ).ToString();
					type = 1;
				}
			} else if ( _a=="shake" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> shakes its head." ).ToString();
				type = 1;
			} else if ( _a=="gnarl" ) {
				
				if ( !muzzled ) {
					message = new Txt( "<B>" ).The( this ).item().str( "</B> gnarls and shows its teeth.." ).ToString();
					type = 2;
				}
			} else if ( _a=="jump" ) {
				message = new Txt( "<B>" ).The( this ).item().str( "</B> jumps!" ).ToString();
				type = 1;
			} else if ( _a=="collapse" ) {
				this.Paralyse( 2 );
				message = new Txt( "<B>" ).The( this ).item().str( "</B> collapses!" ).ToString();
				type = 2;
			} else if ( _a=="help" ) {
				GlobalFuncs.to_chat( this, "burp, deathgasp, choke, collapse, dance, drool, gasp, shiver, gnarl, jump, moan, nod, roar, roll, scratch,\nscretch, shake, sign-#, sit, sulk, sway, tail, twitch, whimper" );
			}

			if ( Lang13.Bool( message ) && this.stat == 0 ) {
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]EMOTE: " + ( "" + this.name + "/" + this.key + " (@" + this.x + "," + this.y + "," + this.z + "): " + message ) ) );

				if ( act == "roar" ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/voice/hiss5.ogg", 40, 1, 1 );
				}

				if ( act == "deathgasp" ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/voice/hiss6.ogg", 80, 1, 1 );
				}

				if ( ( ( type ??0) & 1 ) != 0 ) {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						O = _b;
						
						O.show_message( message, type );
					}
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						O2 = _c;
						
						O2.show_message( message, type );
					}
				}
			}
			return;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			dynamic O = null;

			
			if ( this.stat == 2 ) {
				return null;
			}

			if ( this.healths != null ) {
				((dynamic)this.healths).icon_state = "health6";
			}
			this.stat = 2;

			if ( !( gibbed == true ) ) {
				GlobalFuncs.playsound( this.loc, "sound/voice/hiss6.ogg", 80, 1, 1 );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					
					O.show_message( "<B>" + this + "</B> lets out a waning guttural screech, green blood bubbling from its maw...", 1 );
				}
				this.update_canmove();

				if ( this.client != null ) {
					((dynamic)this.blind).layer = 0;
				}
				this.update_icons();
			}
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );
			}
			return base.death( gibbed );
		}

		// Function from file: life.dm
		public void handle_stomach(  ) {
			Mob_Living M = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( this.stomach_contents, typeof(Mob_Living) )) {
					M = _a;
					

					if ( M.loc != this ) {
						this.stomach_contents.Remove( M );
						continue;
					}

					if ( M is Mob_Living_Carbon && this.stat != 2 ) {
						
						if ( M.stat == 2 ) {
							M.death( true );
							this.stomach_contents.Remove( M );
							GlobalFuncs.qdel( M );
							M = null;
							continue;
						}

						if ( GlobalVars.air_master.current_cycle % 3 == 1 ) {
							
							if ( !( ( this.status_flags & 4096 ) != 0 ) ) {
								M.adjustBruteLoss( 5 );
							}
							this.nutrition += 10;
						}
					}
				}
				return;
			}));
			return;
		}

		// Function from file: life.dm
		public virtual bool handle_regular_hud_updates(  ) {
			
			if ( this.stat == 2 || false ) {
				this.sight |= GlobalVars.SEE_TURFS;
				this.sight |= GlobalVars.SEE_MOBS;
				this.sight |= GlobalVars.SEE_OBJS;
				this.see_in_dark = 8;
				this.see_invisible = 5;
			} else if ( this.stat != 2 ) {
				this.sight |= GlobalVars.SEE_MOBS;
				this.sight &= 65519;
				this.sight &= 65527;
				this.see_in_dark = 4;
				this.see_invisible = 5;
			}

			if ( this.healths != null ) {
				
				if ( this.stat != 2 ) {
					
					dynamic _a = this.health; // Was a switch-case, sorry for the mess.
					if ( 100<=_a&&_a<=Double.PositiveInfinity ) {
						((dynamic)this.healths).icon_state = "health0";
					} else if ( 75<=_a&&_a<=100 ) {
						((dynamic)this.healths).icon_state = "health1";
					} else if ( 50<=_a&&_a<=75 ) {
						((dynamic)this.healths).icon_state = "health2";
					} else if ( 25<=_a&&_a<=50 ) {
						((dynamic)this.healths).icon_state = "health3";
					} else if ( 0<=_a&&_a<=25 ) {
						((dynamic)this.healths).icon_state = "health4";
					} else {
						((dynamic)this.healths).icon_state = "health5";
					}
				} else {
					((dynamic)this.healths).icon_state = "health6";
				}
			}

			if ( this.pullin != null ) {
				((dynamic)this.pullin).icon_state = "pull" + ( this.pulling != null ? true : false );
			}

			if ( this.toxin != null ) {
				((dynamic)this.toxin).icon_state = "tox" + ( this.toxins_alert != 0 ? true : false );
			}

			if ( this.oxygen != null ) {
				((dynamic)this.oxygen).icon_state = "oxy" + ( this.oxygen_alert ? true : false );
			}

			if ( this.fire != null ) {
				((dynamic)this.fire).icon_state = "fire" + ( this.fire_alert != 0 ? true : false );
			}

			if ( this.client != null ) {
				this.client.screen.Remove( GlobalVars.global_hud.blurry, GlobalVars.global_hud.druggy, GlobalVars.global_hud.vimpaired );
			}

			if ( this.blind != null && this.stat != 2 ) {
				
				if ( Lang13.Bool( this.blinded ) ) {
					((dynamic)this.blind).layer = 18;
				} else {
					((dynamic)this.blind).layer = 0;

					if ( ( this.disabilities & 1 ) != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.vimpaired );
					}

					if ( Lang13.Bool( this.eye_blurry ) ) {
						this.client.screen.Add( GlobalVars.global_hud.blurry );
					}

					if ( this.druggy != 0 ) {
						this.client.screen.Add( GlobalVars.global_hud.druggy );
					}
				}
			}

			if ( this.stat != 2 ) {
				
				if ( Lang13.Bool( this.machine ) ) {
					
					if ( !( ((Ent_Static)this.machine).check_eye( this ) == true ) ) {
						this.reset_view( null );
					}
				} else if ( this.client != null && !this.client.adminobs && !this.isTeleViewing( this.client.eye ) ) {
					this.reset_view( null );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public bool handle_regular_status_updates(  ) {
			this.updatehealth();

			if ( this.stat == 2 ) {
				this.blinded = 1;
				this.silent = 0;
			} else {
				
				if ( Convert.ToDouble( this.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_dead ) || !this.has_brain() ) {
					this.death();
					this.blinded = 1;
					this.stat = 2;
					this.silent = 0;
					return true;
				}

				if ( Convert.ToDouble( this.getOxyLoss() ) > 50 || Convert.ToDouble( GlobalVars.config.health_threshold_crit ) > Convert.ToDouble( this.health ) ) {
					
					if ( Convert.ToDouble( this.health ) <= 20 && Rand13.PercentChance( 1 ) ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.emote( "gasp" );
							return;
						}));
					}

					if ( !((Reagents)this.reagents).has_reagent( "inaprovaline" ) ) {
						this.adjustOxyLoss( 1 );
					}
					this.Paralyse( 3 );
				}

				if ( this.paralysis != 0 ) {
					this.AdjustParalysis( -1 );
					this.blinded = 1;
					this.stat = 1;
				} else if ( this.sleeping != 0 ) {
					this.sleeping = Num13.MaxInt( this.sleeping - 1, 0 );
					this.blinded = 1;
					this.stat = 1;

					if ( Rand13.PercentChance( 10 ) && Lang13.Bool( this.health ) ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.emote( "hiss" );
							return;
						}));
					}
				} else {
					this.stat = 0;
				}

				if ( this.move_delay_add > 0 ) {
					this.move_delay_add = Num13.MaxInt( 0, this.move_delay_add - Rand13.Int( 1, 2 ) );
				}

				if ( ( this.sdisabilities & 1 ) != 0 ) {
					this.blinded = 1;
				} else if ( this.eye_blind != 0 ) {
					this.eye_blind = Num13.MaxInt( this.eye_blind - 1, 0 );
					this.blinded = 1;
				} else if ( Lang13.Bool( this.eye_blurry ) ) {
					this.eye_blurry = Num13.MaxInt( Convert.ToInt32( this.eye_blurry - 1 ), 0 );
				}

				if ( ( this.sdisabilities & 4 ) != 0 ) {
					this.ear_deaf = Num13.MaxInt( this.ear_deaf, 1 );
				} else if ( this.ear_deaf != 0 ) {
					this.ear_deaf = Num13.MaxInt( this.ear_deaf - 1, 0 );
				} else if ( this.ear_damage < 25 ) {
					this.ear_damage = Num13.MaxInt( ((int)( this.ear_damage - 0.05 )), 0 );
				}

				if ( this.stunned != 0 ) {
					this.AdjustStunned( -1 );

					if ( !( this.stunned != 0 ) ) {
						this.update_icons();
					}
				}

				if ( this.weakened != 0 ) {
					this.weakened = Num13.MaxInt( ((int)( this.weakened - 1 )), 0 );
				}

				if ( Lang13.Bool( this.stuttering ) ) {
					this.stuttering = Num13.MaxInt( Convert.ToInt32( this.stuttering - 1 ), 0 );
				}

				if ( this.silent != 0 ) {
					this.silent = Num13.MaxInt( this.silent - 1, 0 );
				}

				if ( this.druggy != 0 ) {
					this.druggy = Num13.MaxInt( this.druggy - 1, 0 );
				}
			}
			return true;
		}

		// Function from file: life.dm
		public void handle_chemicals_in_body(  ) {
			
			if ( Lang13.Bool( this.reagents ) ) {
				((Reagents)this.reagents).metabolize( this );
			}
			Interface13.Stat( null, this.mutations.Contains( 6 ) );

			if ( Lang13.Bool( this.reagents ) ) {
				
				if ( this.nutrition < 100 ) {
					
					if ( Rand13.PercentChance( Num13.Floor( ( 50 - this.nutrition ) / 100 ) ) ) {
						GlobalFuncs.to_chat( this, "<span class='notice'>You feel fit again!</span>" );
						this.mutations.Remove( 6 );
					}
				}
			} else if ( this.nutrition > 500 ) {
				
				if ( Rand13.PercentChance( Num13.Floor( ( this.nutrition - 200 ) / 2 ) + 5 ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You suddenly feel blubbery!</span>" );
					this.mutations.Add( 6 );
				}
			}

			if ( this.nutrition > 0 ) {
				this.nutrition -= 0.15;
			}

			if ( Lang13.Bool( this.drowsyness ) ) {
				this.drowsyness--;
				this.eye_blurry = Num13.MaxInt( 2, Convert.ToInt32( this.eye_blurry ) );

				if ( Rand13.PercentChance( 5 ) ) {
					this.sleeping += 1;
					this.Paralyse( 5 );
				}
			}
			this.confused = Num13.MaxInt( 0, this.confused - 1 );

			if ( this.resting != 0 ) {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 5 );
				this.jitteriness = Num13.MaxInt( 0, this.jitteriness - 5 );
			} else {
				this.dizziness = Num13.MaxInt( 0, this.dizziness - 1 );
				this.jitteriness = Num13.MaxInt( 0, this.jitteriness - 1 );
			}
			this.updatehealth();
			return;
		}

		// Function from file: life.dm
		public double adjust_body_temperature( dynamic current = null, dynamic loc_temp = null, dynamic boost = null ) {
			int temperature = 0;
			double difference = 0;
			double increments = 0;
			double change = 0;
			double temp_change = 0;

			temperature = Convert.ToInt32( current );
			difference = Math.Abs( Convert.ToDouble( current - loc_temp ) );

			if ( difference > 50 ) {
				increments = difference / 5;
			} else {
				increments = difference / 10;
			}
			change = increments * Convert.ToDouble( boost );

			if ( Convert.ToDouble( current ) < Convert.ToDouble( loc_temp ) ) {
				temperature = Num13.MinInt( Convert.ToInt32( loc_temp ), ((int)( temperature + change )) );
			} else if ( Convert.ToDouble( current ) > Convert.ToDouble( loc_temp ) ) {
				temperature = Num13.MaxInt( Convert.ToInt32( loc_temp ), ((int)( temperature - change )) );
			}
			temp_change = temperature - Convert.ToDouble( current );
			return temp_change;
		}

		// Function from file: life.dm
		public bool handle_breath( dynamic breath = null ) {
			dynamic toxins_used = null;
			dynamic breath_pressure = null;
			dynamic Toxins_pp = null;

			
			if ( ( this.status_flags & 4096 ) != 0 || Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			if ( !Lang13.Bool( breath ) || breath.total_moles == 0 ) {
				return false;
			}
			toxins_used = 0;
			breath_pressure = ((GasMixture)breath).f_total_moles() * breath.temperature * 8.314 / 0.5;
			Toxins_pp = breath.toxins / ((GasMixture)breath).f_total_moles() * breath_pressure;

			if ( Lang13.Bool( Toxins_pp ) ) {
				this.adjustToxLoss( breath.toxins * 250 );
				this.toxins_alert = Num13.MaxInt( this.toxins_alert, 1 );
				toxins_used = breath.toxins;
			} else {
				this.toxins_alert = 0;
			}
			breath.toxins -= toxins_used;
			breath.oxygen += toxins_used;

			if ( Convert.ToDouble( breath.temperature ) > 339.41 && !false ) {
				
				if ( Rand13.PercentChance( 20 ) ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You feel a searing heat in your lungs !</span>" );
				}
				this.fire_alert = Num13.MaxInt( this.fire_alert, 1 );
			} else {
				this.fire_alert = 0;
			}
			return true;
		}

		// Function from file: life.dm
		public dynamic get_breath_from_internal( double volume_needed = 0 ) {
			
			if ( Lang13.Bool( this.v_internal ) ) {
				
				if ( !( this.contents.Find( this.v_internal ) != 0 ) ) {
					this.v_internal = null;
				}

				if ( !Lang13.Bool( this.wear_mask ) || !Lang13.Bool( this.wear_mask.flags & 8 ) ) {
					this.v_internal = null;
				}

				if ( Lang13.Bool( this.v_internal ) ) {
					
					if ( this.internals != null ) {
						((dynamic)this.internals).icon_state = "internal1";
					}
					return ((Obj_Item_Weapon_Tank)this.v_internal).remove_air_volume( volume_needed );
				} else if ( this.internals != null ) {
					((dynamic)this.internals).icon_state = "internal0";
				}
			}
			return null;
		}

		// Function from file: life.dm
		public void breathe(  ) {
			GasMixture environment = null;
			dynamic breath = null;
			Ent_Static location_as_object = null;
			Ent_Static location_as_object2 = null;
			dynamic breath_moles = null;
			Obj_Effect_Effect_Smoke_Chem smoke = null;
			Ent_Static location_as_object3 = null;

			
			if ( Lang13.Bool( this.reagents ) ) {
				
				if ( ((Reagents)this.reagents).has_reagent( "lexorin" ) ) {
					return;
				}
			}

			if ( this.loc is Obj_Machinery_Atmospherics_Unary_CryoCell ) {
				return;
			}
			environment = this.loc.return_air();

			if ( Convert.ToDouble( this.health ) < 0 ) {
				this.losebreath++;
			}

			if ( this.losebreath > 0 ) {
				this.losebreath--;

				if ( Rand13.PercentChance( 75 ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "gasp" );
						return;
					}));
				}

				if ( this.loc is Obj ) {
					location_as_object = this.loc;
					((dynamic)location_as_object).handle_internal_lifeform( this, 0 );
				}
			} else {
				breath = this.get_breath_from_internal( 0.5 );

				if ( !Lang13.Bool( breath ) ) {
					
					if ( this.loc is Obj ) {
						location_as_object2 = this.loc;
						breath = ((dynamic)location_as_object2).handle_internal_lifeform( this, 0.5 );
					} else if ( this.loc is Tile ) {
						breath_moles = 0;
						breath_moles = environment.f_total_moles() * 0.5 / 2500;
						breath = this.loc.remove_air( breath_moles );

						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Obj_Effect_Effect_Smoke_Chem) )) {
							smoke = _a;
							

							if ( Lang13.Bool( smoke.reagents.total_volume ) ) {
								((Reagents)smoke.reagents).reaction( this, GlobalVars.INGEST );
								Task13.Schedule( 5, (Task13.Closure)(() => {
									
									if ( smoke != null ) {
										smoke.reagents.copy_to( this, 10 );
									}
									return;
								}));
								break;
							}
						}
					}
				} else if ( this.loc is Obj ) {
					location_as_object3 = this.loc;
					((dynamic)location_as_object3).handle_internal_lifeform( this, 0 );
				}
			}
			this.handle_breath( breath );

			if ( Lang13.Bool( breath ) ) {
				this.loc.assume_air( breath );
			}
			return;
		}

		// Function from file: life.dm
		public void handle_disabilities(  ) {
			
			if ( ( this.disabilities & 2 ) != 0 ) {
				
				if ( Rand13.PercentChance( 1 ) && this.paralysis < 10 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You have a seizure !</span>" );
					this.Paralyse( 10 );
				}
			}

			if ( ( this.disabilities & 4 ) != 0 ) {
				
				if ( Rand13.PercentChance( 5 ) && this.paralysis <= 1 ) {
					this.drop_item();
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "cough" );
						return;
						return;
					}));
				}
			}

			if ( ( this.disabilities & 8 ) != 0 ) {
				
				if ( Rand13.PercentChance( 10 ) && this.paralysis <= 1 ) {
					this.Stun( 10 );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.emote( "twitch" );
						return;
						return;
					}));
				}
			}

			if ( ( this.disabilities & 16 ) != 0 ) {
				
				if ( Rand13.PercentChance( 10 ) ) {
					this.stuttering = Num13.MaxInt( 10, Convert.ToInt32( this.stuttering ) );
				}
			}
			return;
		}

		// Function from file: alien_powers.dm
		[VerbInfo( name: "Secrete Resin (75)", desc: "Secrete tough malleable resin.", group: "Alien" )]
		public void resin(  ) {
			dynamic choice = null;

			
			if ( this.powerc( 75 ) ) {
				choice = Interface13.Input( "Choose what you wish to shape.", "Resin building", null, null, new ByTable(new object [] { "resin door", "resin wall", "resin membrane", "resin nest" }), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( choice ) || !this.powerc( 75 ) ) {
					return;
				}
				this.adjustToxLoss( -75 );
				this.visible_message( new Txt( "<span class='alien'>" ).The( this ).item().str( " vomits up a thick purple substance and shapes it into some form of resin structure!</span>" ).ToString(), "<span class='alien'>You shape a " + choice + "</span>" );

				dynamic _a = choice; // Was a switch-case, sorry for the mess.
				if ( _a=="resin door" ) {
					new Obj_Machinery_Door_Mineral_Resin( this.loc );
				} else if ( _a=="resin wall" ) {
					new Obj_Effect_Alien_Resin_Wall( this.loc );
				} else if ( _a=="resin membrane" ) {
					new Obj_Effect_Alien_Resin_Membrane( this.loc );
				} else if ( _a=="resin nest" ) {
					new Obj_Structure_Bed_Nest( this.loc );
				}
			}
			return;
		}

		// Function from file: alien_powers.dm
		[VerbInfo( name: "Spit Neurotoxin (50)", desc: "Spits neurotoxin at someone, paralyzing them for a short time if they are not wearing protective gear.", group: "Alien" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.InViewExcludeThis )]
		public void neurotoxin( dynamic target = null ) {
			dynamic T = null;
			dynamic U = null;
			Obj_Item_Projectile_Energy_Neurotoxin A = null;

			
			if ( this.powerc( 50 ) ) {
				
				if ( target is Mob_Living_Carbon_Alien ) {
					GlobalFuncs.to_chat( this, "<span class='alien'>Your allies are not valid targets.</span>" );
					return;
				}
				this.adjustToxLoss( -50 );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/pierce.ogg", 30, 1 );
				this.visible_message( new Txt( "<span class='alien'>" ).The( this ).item().str( " spits neurotoxin at " ).item( target ).str( " !</span>" ).ToString(), "<span class='alien'>You spit neurotoxin at " + target + " !</span>" );
				T = GlobalFuncs.get_turf( this );
				U = GlobalFuncs.get_turf( target );

				if ( !Lang13.Bool( U ) || !Lang13.Bool( T ) ) {
					return;
				}

				while (Lang13.Bool( U ) && !( U is Tile )) {
					U = U.loc;
				}

				if ( !( T is Tile ) ) {
					return;
				}

				if ( U == T ) {
					Task13.User.bullet_act( new Obj_Item_Projectile_Energy_Neurotoxin( Task13.User.loc ), this.get_organ_target() );
					return;
				}

				if ( !( U is Tile ) ) {
					return;
				}
				A = new Obj_Item_Projectile_Energy_Neurotoxin( Task13.User.loc );
				A.original = target;
				A.target = U;
				A.current = T;
				A.starting = T;
				A.yo = Convert.ToDouble( U.y - T.y );
				A.xo = Convert.ToDouble( U.x - T.x );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					A.OnFired();
					A.process();
					return;
				}));
			}
			return;
		}

		// Function from file: alien_powers.dm
		[VerbInfo( name: "Corrossive Acid (200)", desc: "Drench an object in acid, destroying it over time.", group: "Alien" )]
		[VerbArg( 1, InputType.Obj | InputType.Tile, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void corrosive_acid( dynamic O = null ) {
			dynamic I = null;
			dynamic T = null;

			
			if ( this.powerc( 200 ) ) {
				Interface13.Stat( null, Map13.FetchInViewExcludeThis( null, 1 ).Contains( O ) );

				if ( false ) {
					
					if ( O is Obj ) {
						I = O;

						if ( Lang13.Bool( I.unacidable ) ) {
							GlobalFuncs.to_chat( this, "<span class='alien'>You cannot dissolve this object.</span>" );
							return;
						}
					} else if ( O is Tile_Simulated ) {
						T = O;

						if ( T is Tile_Simulated_Wall_RWall ) {
							GlobalFuncs.to_chat( this, "<span class='alien'>You cannot dissolve this object.</span>" );
							return;
						}

						if ( T is Tile_Simulated_Floor_Engine ) {
							GlobalFuncs.to_chat( this, "<span class='alien'>You cannot dissolve this object.</span>" );
							return;
						}
					} else {
						return;
					}
					this.adjustToxLoss( -200 );
					new Obj_Effect_Alien_Acid( GlobalFuncs.get_turf( O ), O );
					this.visible_message( new Txt( "<span class='alien'>" ).The( this ).item().str( " vomits globs of vile stuff all over " ).item( O ).str( ". It begins to sizzle and melt under the bubbling mess of acid!</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( this, "<span class='alien'>Target is too far away.</span>" );
				}
			}
			return;
		}

		// Function from file: logout.dm
		public override bool Logout(  ) {
			base.Logout();
			this.RemoveInfectionImages();
			return false;
		}

		// Function from file: alien_powers.dm
		[Verb]
		[VerbInfo( name: "Regurgitate", desc: "Empties the contents of your stomach", group: "Alien" )]
		public void regurgitate(  ) {
			dynamic M = null;

			
			if ( this.powerc() ) {
				
				if ( this.stomach_contents.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this )) {
						M = _a;
						
						Interface13.Stat( null, this.stomach_contents.Contains( M ) );

						if ( false ) {
							this.stomach_contents.Remove( M );
							M.loc = this.loc;
						}
					}
					this.visible_message( new Txt( "<span class='alien'>" ).The( this ).item().str( " hurls out the contents of their stomach!</span>" ).ToString() );
				}
			}
			return;
		}

		// Function from file: alien_powers.dm
		[Verb]
		[VerbInfo( name: "Transfer Plasma", desc: "Transfer Plasma to another alien", group: "Alien" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.InViewExcludeThis )]
		public void transfer_plasma( Mob_Living M = null ) {
			dynamic amount = null;

			
			if ( M is Mob_Living_Carbon_Alien ) {
				amount = Interface13.Input( "Amount:", "Transfer Plasma to " + M, null, null, null, InputType.Num );

				if ( Lang13.Bool( amount ) ) {
					amount = Math.Abs( Num13.Floor( Convert.ToDouble( amount ) ) );

					if ( this.powerc( amount ) ) {
						
						if ( Map13.GetDistance( this, M ) <= 1 ) {
							M.adjustToxLoss( amount );
							this.adjustToxLoss( -amount );
							GlobalFuncs.to_chat( M, new Txt( "<span class='alien'>" ).The( this ).item().str( " has transfered " ).item( amount ).str( " plasma to you.</span>" ).ToString() );
							GlobalFuncs.to_chat( this, "<span class='alien'>You have trasferred " + amount + " plasma to " + M + "</span>" );
						} else {
							GlobalFuncs.to_chat( this, "<span class='alien'>You need to be closer.</span>" );
						}
					}
				}
			}
			return;
		}

		// Function from file: alien_powers.dm
		[Verb]
		[VerbInfo( name: "Whisper (10)", desc: "Whisper to someone", group: "Alien" )]
		[VerbArg( 1, InputType.Mob, VerbArgFilter.InViewExcludeThis )]
		public void whisp( dynamic M = null ) {
			string msg = null;
			dynamic T = null;

			
			if ( this.powerc( 10 ) ) {
				this.adjustToxLoss( -10 );
				msg = GlobalFuncs.sanitize( Interface13.Input( "Message:", "Alien Whisper", null, null, null, InputType.Str | InputType.Null ) );

				if ( Lang13.Bool( msg ) ) {
					T = GlobalFuncs.get_turf( this );
					GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( this ) + " (@" + T.x + "," + T.y + "," + T.z + ") Alien Whisper: " + msg ) ) );
					GlobalFuncs.to_chat( M, "<span class='alien'>You hear a strange, alien voice in your head... <em>" + msg + "</span></em>" );
					GlobalFuncs.to_chat( this, "<span class='alien'>You said: " + msg + " to " + M + "</span>" );
				}
			}
			return;
		}

		// Function from file: alien_powers.dm
		[Verb]
		[VerbInfo( name: "Plant Weeds (50)", desc: "Plants some alien weeds", group: "Alien" )]
		public void plant(  ) {
			
			if ( this.powerc( 50, true ) ) {
				this.adjustToxLoss( -50 );
				this.visible_message( "<span class='alien'>" + this + " has planted some alien weeds!</span>" );
				new Obj_Effect_Alien_Weeds_Node(  );
			}
			return;
		}

		// Function from file: suicide.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void suicide(  ) {
			string confirm = null;

			
			if ( this.stat == 2 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already dead!</span>" );
				return;
			}

			if ( this.suiciding == true ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You're already committing suicide! Be patient!</span>" );
				return;
			}
			confirm = Interface13.Alert( "Are you sure you want to commit suicide?", "Confirm Suicide", "Yes", "No" );

			if ( confirm == "Yes" ) {
				this.suiciding = true;
				this.visible_message( new Txt( "<span class='danger'>" ).item( this ).str( " is thrashing around wildly! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
				this.adjustOxyLoss( Num13.MaxInt( ((int)( 175 - this.getFireLoss() - this.getBruteLoss() - Convert.ToDouble( this.getOxyLoss() ) )), 0 ) );
				this.updatehealth();
			}
			return;
		}

	}

}