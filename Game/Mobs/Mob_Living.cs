// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living : Mob {

		public string canEnterVentWith = "/obj/item/weapon/implant=0&/obj/item/clothing/mask/facehugger=0&/obj/item/device/radio/borg=0&/obj/machinery/camera=0&/mob/living/simple_animal/borer=0";
		public int ventcrawl_layer = 3;
		public dynamic traumatic_shock = 0;
		public Language default_language = null;
		public _Event on_resist = null;
		public dynamic maxHealth = 100;
		public dynamic health = 100;
		public int hud_updateflag = 0;
		public int bruteloss = 0;
		public dynamic oxyloss = 0;
		public dynamic toxloss = 0;
		public int fireloss = 0;
		public int cloneloss = 0;
		public int brainloss = 0;
		public double halloss = 0;
		public int hallucination = 0;
		public ByTable hallucinations = new ByTable();
		public bool can_butcher = true;
		public int meat_taken = 0;
		public dynamic meat_type = typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat);
		public bool being_butchered = false;
		public ByTable butchering_drops = null;
		public ByTable static_overlays = null;
		public dynamic t_plasma = null;
		public dynamic t_oxygen = null;
		public dynamic t_sl_gas = null;
		public dynamic t_n2 = null;
		public bool now_pushing = false;
		public int mob_bump_flag = 0;
		public int mob_swap_flags = 0;
		public int mob_push_flags = 0;
		public dynamic cameraFollow = null;
		public string tod = null;
		public bool update_slimes = true;
		public double fire_stacks = 0;
		public bool specialsauce = false;
		public bool implanting = false;
		public int silent = 0;
		public int locked_to_z = 0;
		public ByTable pipes_shown = new ByTable();
		public int last_played_vent = 0;
		public bool is_ventcrawling = false;
		public Type species_type = null;
		public Type holder_type = typeof(Obj_Item_Weapon_Holder_Animal);
		public ByTable callOnLife = new ByTable();
		public Game_Data schematics_background = null;
		public bool shown_schematics_background = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.see_invisible = 25;
		}

		// Function from file: living.dm
		public Mob_Living ( dynamic loc = null ) : base( (object)(loc) ) {
			Mob_Living_Silicon_Robot_Mommi MoMMI = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.generate_static_overlay();

			if ( this.static_overlays is ByTable && this.static_overlays.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Robot_Mommi) )) {
					MoMMI = _a;
					

					if ( MoMMI.can_see_static() ) {
						
						if ( this.static_overlays.Contains( MoMMI.static_choice ) ) {
							MoMMI.static_overlays.Add( this.static_overlays[MoMMI.static_choice] );
							MoMMI.client.images.Add( this.static_overlays[MoMMI.static_choice] );
						} else {
							MoMMI.static_overlays.Add( this.static_overlays["static"] );
							MoMMI.client.images.Add( this.static_overlays["static"] );
						}
					}
				}
			}

			if ( !( this.species_type != null ) ) {
				this.species_type = this.type;
			}
			return;
		}

		// Function from file: eye.dm
		public override bool DblClick( dynamic _object = null, string location = null, string control = null, dynamic _params = null ) {
			Mob A = null;

			
			if ( Task13.User is Mob_Living_Silicon_Ai && Task13.User != this ) {
				A = Task13.User;
				((Mob_Living_Silicon_Ai)A).ai_actual_track( this );
				return false;
			}
			base.DblClick( (object)(_object), location, control );
			return false;
		}

		// Function from file: eye.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			
			if ( Task13.User is Mob_Living_Silicon_Ai ) {
				return false;
			}
			base.Click( (object)(loc), control, _params );
			return false;
		}

		// Function from file: say.dm
		public override string say_quote( dynamic text = null ) {
			
			if ( Lang13.Bool( this.stuttering ) ) {
				return "stammers, " + this.text;
			}

			if ( this.getBrainLoss() >= 60 ) {
				return "gibbers, " + this.text;
			}
			return base.say_quote( (object)(text) );
		}

		// Function from file: say.dm
		public override bool construct_chat_check( int? setting = null ) {
			setting = setting ?? 0;

			
			if ( !( this.mind != null ) ) {
				return false;
			}

			if ( setting == 0 ) {
				return false;
			}

			if ( setting == 1 ) {
				
				if ( Lang13.Bool( ((dynamic)( Lang13.Bool( GlobalVars.ticker.mode.cult ) && GlobalVars.universal_cult_chat )).Contains( this.mind ) ) ) {
					return true;
				}
			}

			if ( setting == 2 ) {
				
				if ( Lang13.Bool( GlobalVars.ticker.mode.cult.Contains( this.mind ) ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: say.dm
		public override bool lingcheck(  ) {
			
			if ( this.mind != null && this.mind.changeling != null && !( this is Mob_Living_Silicon ) ) {
				return true;
			}
			return false;
		}

		// Function from file: say.dm
		public override bool can_speak( dynamic message = null ) {
			
			if ( this.can_speak_basic( message ) && this.can_speak_vocal( message ) ) {
				return true;
			}
			return false;
		}

		// Function from file: say.dm
		public override void send_speech( Game_Data speech = null, dynamic message_range = null, string bubble_type = null ) {
			message_range = message_range ?? 7;
			message_range = message_range ?? 7;

			ByTable listeners = null;
			string rendered = null;
			Ent_Dynamic listener = null;

			listeners = GlobalFuncs.get_hearers_in_view( message_range, ((dynamic)speech).speaker ) | GlobalVars.observers;
			rendered = this.render_speech( speech );

			foreach (dynamic _a in Lang13.Enumerate( listeners, typeof(Ent_Dynamic) )) {
				listener = _a;
				
				listener.Hear( speech, rendered );
			}
			this.send_speech_bubble( speech, bubble_type, listeners );
			return;
		}

		// Function from file: say.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			string deaf_message = null;
			int? deaf_type = null;
			int? type = null;
			Ent_Dynamic AM = null;

			
			if ( _args[2] == null ) {
				_args[2] = null;
			}

			if ( !Lang13.Bool( _args[2] ) ) {
				_args[2] = _args[1].message;
			}

			if ( !( this.client != null ) ) {
				return null;
			}
			type = 2;

			if ( _args[1].speaker != this ) {
				
				if ( !Lang13.Bool( _args[1].frequency ) ) {
					deaf_message = "<span class='name'>" + _args[1].speaker + "</span> talks but you cannot hear them.";
					deaf_type = 1;
				} else if ( Lang13.Bool( this.hear_radio_only() ) ) {
					type = null;
				}
			} else {
				deaf_message = "<span class='notice'>You can't hear yourself!</span>";
				deaf_type = 2;
			}
			AM = _args[1].speaker.GetSource();

			if ( !this.say_understands( ( AM is Ent_Dynamic ? AM : _args[1].speaker ), _args[1].language ) || this.force_compose ) {
				_args[2] = this.render_speech( _args[1] );
			}
			this.show_message( _args[2], type, deaf_message, deaf_type );
			return _args[2];
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string speaking = null, Ent_Dynamic radio = null ) {
			string message_mode = null;
			Game_Data speech = null;
			dynamic n = null;
			int message_range = 0;
			int radio_return = 0;
			dynamic T = null;

			
			if ( this.timestopped ) {
				return false;
			}
			message = GlobalFuncs.trim( String13.SubStr( message, 1, 1024 ) );
			message = GlobalFuncs.capitalize( message );

			if ( !Lang13.Bool( message ) ) {
				return false;
			}

			if ( this.silent != 0 ) {
				GlobalFuncs.to_chat( this, "<span class='warning'>You can't speak while silenced.</span>" );
				return false;
			}

			if ( ( this.status_flags & 8192 ) != 0 && !Lang13.Bool( this.stat ) ) {
				GlobalFuncs.to_chat( this, "<span class='danger'>Talking right now would give us away!</span>" );
				return false;
			}
			message_mode = this.get_message_mode( message );

			if ( this.stat == 2 ) {
				this.say_dead( message );
				return false;
			}

			if ( Lang13.Bool( this.stat ) ) {
				
				if ( message_mode == "whisper" ) {
					this.__CallVerb("Whisper", String13.SubStr( message, 3, 0 ) );
				}
				return false;
			}

			if ( this.check_emote( message ) ) {
				return false;
			}

			if ( !this.can_speak_basic( message ) ) {
				return false;
			}

			if ( message_mode == "headset" || message_mode == "robot" ) {
				message = String13.SubStr( message, 2, 0 );
			} else if ( Lang13.Bool( message_mode ) ) {
				message = String13.SubStr( message, 3, 0 );
			}
			speech = this.create_speech( message );

			if ( !Lang13.Bool( ((dynamic)speech).language ) ) {
				((dynamic)speech).language = this.parse_language( ((dynamic)speech).message );
			}

			if ( ((dynamic)speech).language is Language ) {
				((dynamic)speech).message = String13.SubStr( ((dynamic)speech).message, Lang13.Length( ((dynamic)speech).language.key ) + 2, 0 );
			} else {
				
				if ( !( ((dynamic)speech).language == null ) ) {
					n = ((dynamic)speech).language;
					message = String13.SubStr( message, Lang13.Length( n ) + 1, 0 );
					((dynamic)speech).language = null;
				}
				((dynamic)speech).language = this.get_default_language();
			}
			((dynamic)speech).message = GlobalFuncs.trim_left( ((dynamic)speech).message );

			if ( this.handle_inherent_channels( speech, message_mode ) ) {
				GlobalFuncs.returnToPool( speech );
				return false;
			}

			if ( !this.can_speak_vocal( ((dynamic)speech).message ) ) {
				GlobalFuncs.returnToPool( speech );
				return false;
			}
			message_range = 7;
			this.treat_speech( speech );
			radio_return = this.radio( speech, message_mode );

			if ( ( radio_return & 4 ) != 0 ) {
				GlobalFuncs.returnToPool( speech );
				return false;
			}

			if ( ( radio_return & 1 ) != 0 ) {
				((dynamic)speech).message_classes.Add( "italics" );
			}

			if ( ( radio_return & 2 ) != 0 ) {
				message_range = 1;
			}

			if ( String13.SubStr( this.text, Lang13.Length( this.text ), 0 ) == "!" ) {
				message_range++;
			}
			this.send_speech( speech, message_range, speaking );
			T = GlobalFuncs.get_turf( this );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + this.name + "/" + this.key + " " + ( Lang13.Bool( T ) ? "(@" + T.x + "," + T.y + "," + T.z + ")" : "(@" + this.x + "," + this.y + "," + this.z + ")" ) + " " + ( Lang13.Bool( ((dynamic)speech).language ) ? "As " + ((dynamic)speech).language.name + " " : "" ) + ": " + message ) ) );
			GlobalFuncs.returnToPool( speech );
			return true;
		}

		// Function from file: say.dm
		public override bool hivecheck(  ) {
			Mob_Living H = null;
			dynamic dongle = null;

			
			if ( this is Mob_Living_Carbon_Alien ) {
				return true;
			}

			if ( !( this is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			H = this;

			if ( Lang13.Bool( ((dynamic)H).ears ) ) {
				
				if ( ((dynamic)H).ears is Obj_Item_Device_Radio_Headset ) {
					dongle = ((dynamic)H).ears;
				}

				if ( !( dongle is Obj_Item_Device_Radio_Headset ) ) {
					return false;
				}

				if ( Lang13.Bool( dongle.translate_hive ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: logout.dm
		public override bool Logout(  ) {
			base.Logout();

			if ( this.mind != null ) {
				
				if ( !Lang13.Bool( this.key ) ) {
					this.mind.active = false;
				}
			}
			return false;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			dynamic _default = null;

			string _ref = null;

			base.Login();
			this.mind_initialize();
			this.mind.active = true;

			if ( this.is_ventcrawling && this.loc is Obj_Machinery_Atmospherics ) {
				this.remove_ventcrawl();
				this.add_ventcrawl( this.loc );
			}

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				
				dynamic _a = GlobalVars.ticker.mode.name; // Was a switch-case, sorry for the mess.
				if ( _a=="sandbox" ) {
					this.CanBuild();
				}

				if ( GlobalVars.ticker.mode.revolutionaries.Contains( this.mind ) || GlobalVars.ticker.mode.head_revolutionaries.Contains( this.mind ) ) {
					((GameMode)GlobalVars.ticker.mode).update_rev_icons_added( this.mind );
				}

				if ( Lang13.Bool( GlobalVars.ticker.mode.cult.Contains( this.mind ) ) ) {
					((GameMode)GlobalVars.ticker.mode).update_cult_icons_added( this.mind );
				}

				if ( GlobalVars.ticker.mode.syndicates.Contains( this.mind ) ) {
					((GameMode)GlobalVars.ticker.mode).update_all_synd_icons();
				}

				if ( GlobalVars.ticker.mode.wizards.Contains( this.mind ) ) {
					((GameMode)GlobalVars.ticker.mode).update_all_wizard_icons();
				}
				_ref = new Txt().Ref( this.mind ).ToString();

				if ( GlobalVars.ticker.mode.implanter.Contains( _ref ) ) {
					((GameMode)GlobalVars.ticker.mode).update_traitor_icons_added( this.mind );
				}

				if ( Lang13.Bool( GlobalVars.ticker.mode.implanted.Contains( this.mind ) ) ) {
					((GameMode)GlobalVars.ticker.mode).update_traitor_icons_added( this.mind );
				}

				if ( GlobalVars.ticker.mode.thralls.Contains( _ref ) || GlobalVars.ticker.mode.enthralled.Contains( this.mind ) ) {
					((GameMode)GlobalVars.ticker.mode).update_vampire_icons_added( this.mind );
				}
				return _default;
			}
			return _default;
		}

		// Function from file: living_defense.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			this.adjust_fire_stacks( 0.5 );
			this.IgniteMob();
			return false;
		}

		// Function from file: living_defense.dm
		public override void hitby( Ent_Static AM = null, dynamic speed = null, int? dir = null ) {
			speed = speed ?? 5;

			Ent_Static O = null;
			dynamic zone = null;
			string dtype = null;
			Ent_Static W = null;
			dynamic zone_normal_name = null;
			int? armor = null;
			dynamic assailant = null;
			Mob M = null;
			Ent_Static W2 = null;
			dynamic momentum = null;
			dynamic T = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return;
			}

			if ( AM is Obj ) {
				O = AM;
				zone = GlobalFuncs.ran_zone( "chest", 75 );
				dtype = "brute";

				if ( O is Obj_Item_Weapon ) {
					W = O;
					dtype = ((dynamic)W).damtype;
				}
				this.visible_message( "<span class='warning'>" + this + " has been hit by " + O + ".</span>" );

				dynamic _a = zone; // Was a switch-case, sorry for the mess.
				if ( _a=="l_arm" ) {
					zone_normal_name = "left arm";
				} else if ( _a=="r_arm" ) {
					zone_normal_name = "right arm";
				} else if ( _a=="l_leg" ) {
					zone_normal_name = "left leg";
				} else if ( _a=="r_leg" ) {
					zone_normal_name = "right leg";
				} else {
					zone_normal_name = zone;
				}
				armor = this.run_armor_check( zone, "melee", "Your armor has protected your " + zone_normal_name + ".", "Your armor has softened hit to your " + zone_normal_name + "." );

				if ( ( armor ??0) < 2 ) {
					this.apply_damage( ((dynamic)O).throwforce * ( speed / 5 ), dtype, zone, armor, ((Obj)O).is_sharp(), O );
				}
				assailant = GlobalVars.directory[String13.CKey( O.fingerprintslast )];
				M = null;

				if ( Lang13.Bool( assailant ) && Lang13.Bool( assailant.mob ) && assailant.mob is Mob ) {
					M = assailant.mob;
				}

				if ( Convert.ToDouble( speed ) >= 20 ) {
					W2 = O;
					momentum = speed / 2;
					this.visible_message( "<span class='warning'>" + this + " staggers under the impact!</span>", "<span class='warning'>You stagger under the impact!</span>" );
					this.throw_at( GlobalFuncs.get_edge_target_turf( this, dir ), 1, momentum );

					if ( W2.loc is Mob_Living && Lang13.Bool( ((Obj)W2).is_sharp() ) ) {
						
						if ( !( this is Mob_Living_Carbon_Human ) ) {
							O.loc = this;
							this.embedded.Add( O );
						}
						T = this.near_wall( dir, 2 );

						if ( Lang13.Bool( T ) ) {
							this.loc = T;
							this.visible_message( "<span class='warning'>" + this + " is pinned to the wall by " + O + "!</span>", "<span class='warning'>You are pinned to the wall by " + O + "!</span>" );
							this.anchored = 1;
							this.pinned.Add( O );
						}
					}
				}

				if ( !Lang13.Bool( O.fingerprintslast ) ) {
					return;
				}
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been hit with a thrown " + O + ", last touched by " + M.name + " (" + assailant.ckey + ") (speed: " + speed + ")</font>" );
				M.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Hit " + this.name + " (" + this.ckey + ") with a thrown " + O + " (speed: " + speed + ")</font>" );
				GlobalFuncs.msg_admin_attack( "" + this.name + " (" + this.ckey + ") was hit by a thrown " + O + ", last touched by " + M.name + " (" + assailant.ckey + ") (speed: " + speed + ") (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)" );

				if ( !( M is Mob_Living_Carbon ) ) {
					this.LAssailant = null;
				} else {
					this.LAssailant = M;
				}
			}
			return;
		}

		// Function from file: living_defense.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			dynamic C = null;
			dynamic signaler = null;
			int? absorb = null;

			C = Lang13.FindObj( ((dynamic)this).Contains( typeof(Obj_Item_Weapon_CloakingDevice) ) );

			if ( Lang13.Bool( C ) && Lang13.Bool( C.active ) ) {
				((Obj_Item)C).attack_self( this );
				this.update_icons();
				GlobalFuncs.to_chat( this, "<span class='notice'>Your " + C.name + " was disrupted!</span>" );
				this.Stun( 2 );
			}
			this.flash_weak_pain();

			if ( this.get_active_hand() is Obj_Item_Device_Assembly_Signaler ) {
				signaler = this.get_active_hand();

				if ( signaler.deadman && Rand13.PercentChance( 80 ) ) {
					this.visible_message( "<span class='warning'>" + this + " triggers their deadman's switch!</span>" );
					((Obj_Item_Device_Assembly_Signaler)signaler).signal();
				}
			}
			absorb = this.run_armor_check( def_zone, Proj.flag );

			if ( ( absorb ??0) >= 2 ) {
				((Obj_Item_Projectile)Proj).on_hit( this, 2 );
				return 2;
			}

			if ( !Proj.nodamage ) {
				this.apply_damage( Proj.damage / ( ( absorb ??0) + 1 ), Proj.damage_type, def_zone, absorb, 0, null, Proj );
				this.regenerate_icons();
			}
			((Obj_Item_Projectile)Proj).on_hit( this, absorb );

			if ( Proj is Obj_Item_Projectile_Beam_Lightning ) {
				
				if ( Convert.ToDouble( Proj.damage ) >= 200 ) {
					this.dust();
				}
			}
			return absorb;
		}

		// Function from file: living.dm
		public override void nuke_act(  ) {
			this.health = 0;
			this.stat = 2;
			return;
		}

		// Function from file: living.dm
		public override dynamic is_open_container(  ) {
			return 1;
		}

		// Function from file: living.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			Obj tmob = null;
			Mob_Living M = null;
			bool dense = false;
			Ent_Dynamic A = null;
			Ent_Static oldloc = null;
			Mob_Living_Carbon_Slime slime = null;
			int t = 0;
			Obj_Structure_Window win = null;

			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( !Lang13.Bool( yes ) || this.now_pushing || !( this.loc != null ) ) {
					return;
				}
				this.now_pushing = true;

				if ( Obstacle is Mob_Living ) {
					tmob = Obstacle;

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( 1, tmob ), typeof(Mob_Living) )) {
						M = _a;
						

						if ( ((dynamic)tmob).pinned.len != 0 || M.pulling == tmob && Lang13.Bool( ((dynamic)tmob).restrained() ) && !M.restrained() && M.stat == 0 || Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), ((dynamic)tmob).grabbed_by.len ) ) ) {
							
							if ( !( Game13.time % 5 != 0 ) ) {
								GlobalFuncs.to_chat( this, "<span class='warning'>" + tmob + " is restrained, you cannot push past</span>" );
							}
							this.now_pushing = false;
							return;
						}

						if ( ((dynamic)tmob).pulling == M && M.restrained() && !Lang13.Bool( ((dynamic)tmob).restrained() ) && Lang13.Bool( ((dynamic)tmob).stat ) == false ) {
							
							if ( !( Game13.time % 5 != 0 ) ) {
								GlobalFuncs.to_chat( this, "<span class='warning'>" + tmob + " is restraining " + M + ", you cannot push past</span>" );
							}
							this.now_pushing = false;
							return;
						}
					}
					dense = false;

					if ( this.loc.density ) {
						dense = true;
					}

					foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Ent_Dynamic) )) {
						A = _b;
						

						if ( A == this ) {
							continue;
						}

						if ( A.density ) {
							
							if ( Lang13.Bool( A.flags & 512 ) ) {
								dense = !A.CanPass( this, this.loc );
							} else {
								dense = true;
							}
						}

						if ( dense ) {
							break;
						}
					}

					if ( ( ((dynamic)tmob).a_intent == "help" || Lang13.Bool( ((dynamic)tmob).restrained() ) ) && ( this.a_intent == "help" || this.restrained() ) && Lang13.Bool( ((dynamic)tmob).canmove ) && this.canmove && !dense && this.can_move_mob( tmob, true, false ) ) {
						oldloc = this.loc;
						this.forceMove( tmob.loc );
						tmob.forceMove( oldloc );
						this.now_pushing = false;

						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( tmob, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
							slime = _c;
							

							if ( slime.Victim == tmob ) {
								slime.UpdateFeed();
							}
						}
						return;
					}

					if ( !this.can_move_mob( tmob, false, false ) ) {
						this.now_pushing = false;
						return;
					}

					if ( tmob is Mob_Living_Carbon_Human && Lang13.Bool( ((dynamic)tmob).mutations.Contains( 6 ) ) ) {
						
						if ( Rand13.PercentChance( 40 ) && !this.mutations.Contains( 6 ) ) {
							GlobalFuncs.to_chat( this, "<span class='danger'>You fail to push " + tmob + "'s fat ass out of the way.</span>" );
							this.now_pushing = false;
							return;
						}
					}

					if ( Lang13.Bool( ((dynamic)tmob).r_hand ) && ((dynamic)tmob).r_hand is Obj_Item_Weapon_Shield_Riot ) {
						
						if ( Rand13.PercentChance( 99 ) ) {
							this.now_pushing = false;
							return;
						}
					}

					if ( Lang13.Bool( ((dynamic)tmob).l_hand ) && ((dynamic)tmob).l_hand is Obj_Item_Weapon_Shield_Riot ) {
						
						if ( Rand13.PercentChance( 99 ) ) {
							this.now_pushing = false;
							return;
						}
					}

					if ( !Lang13.Bool( ((dynamic)tmob).status_flags & 8 ) ) {
						this.now_pushing = false;
						return;
					}
					((dynamic)tmob).LAssailant = this;
				}
				this.now_pushing = false;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					base.Bump( Obstacle );

					if ( !( Obstacle is Ent_Dynamic ) ) {
						return;
					}

					if ( !this.now_pushing ) {
						this.now_pushing = true;

						if ( !Lang13.Bool( ((Ent_Dynamic)Obstacle).anchored ) ) {
							t = Map13.GetDistance( this, Obstacle );

							if ( Lang13.Bool( Obstacle.flags & 512 ) && !( t != 0 ) ) {
								t = Obstacle.dir;
							}

							if ( Obstacle is Obj_Structure_Window_Full ) {
								
								foreach (dynamic _d in Lang13.Enumerate( Map13.GetStep( Obstacle, t ), typeof(Obj_Structure_Window) )) {
									win = _d;
									
									this.now_pushing = false;
									return;
								}
							}
							Map13.Step( (Ent_Dynamic)Obstacle, t );
						}
						this.now_pushing = false;
					}
					return;
					return;
				}));
				return;
			}));
			return null;
		}

		// Function from file: living.dm
		public override bool shuttle_act( Shuttle S = null ) {
			
			if ( !Lang13.Bool( this.flags & 128 ) ) {
				this.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] was gibbed by a shuttle (" + S.name + ", " + S.type + ")!" );
				this.gib();
			}
			return false;
		}

		// Function from file: living.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			
			if ( !Lang13.Bool( this.flags & 128 ) ) {
				Map13.StepTowardsSimple( this, S );
			}
			return false;
		}

		// Function from file: living.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			int gain = 0;

			
			if ( !Lang13.Bool( this.flags & 128 ) ) {
				gain = 20;
				this.investigation_log( "singulo", "has been consumed by a singularity" );
				this.gib();
				return gain;
			}
			return 0;
		}

		// Function from file: living.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			Mob_Living_Silicon_Robot_Mommi MoMMI = null;
			Image I = null;
			ButcheringProduct B = null;

			
			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Robot_Mommi) )) {
				MoMMI = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.static_overlays, typeof(Image) )) {
					I = _a;
					
					MoMMI.static_overlays.Remove( I );
					MoMMI.client.images.Remove( I );
					GlobalFuncs.qdel( I );
					I = null;
				}
			}

			if ( this.static_overlays != null ) {
				this.static_overlays = null;
			}

			if ( this.butchering_drops != null ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.butchering_drops, typeof(ButcheringProduct) )) {
					B = _c;
					
					this.butchering_drops.Remove( B );
					GlobalFuncs.qdel( B );
					B = null;
				}
			}
			_default = base.Destroy( (object)(brokenup) );
			return _default;
		}

		// Function from file: living.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			Ent_Static T = null;
			bool? t7 = null;
			Mob_Living M = null;
			Ent_Static M2 = null;
			int? diag = null;
			bool ok = false;
			dynamic G = null;
			Mob t = null;
			Mob_Living_Carbon_Slime M3 = null;
			Obj_Item_Weapon_Gun G2 = null;
			Ent_Static M4 = null;
			Obj_Item_Weapon_Gun G3 = null;
			Mob_Living M5 = null;

			
			if ( Lang13.Bool( this.locked_to ) && this.locked_to.loc != NewLoc ) {
				
				if ( !Lang13.Bool( this.locked_to.anchored ) ) {
					return Lang13.Bool( this.locked_to.Move( NewLoc, Dir ) );
				} else {
					return false;
				}
			}

			if ( this.restrained() ) {
				this.stop_pulling();
			}
			T = this.loc;
			t7 = true;

			if ( this.restrained() ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( 1, this ), typeof(Mob_Living) )) {
					M = _a;
					

					if ( M.pulling == this && M.stat == 0 && !M.restrained() ) {
						t7 = null;
					}
				}
			}

			if ( t7 == true && this.pulling != null && ( this.Adjacent( this.pulling ) || this.pulling.loc == this.loc ) ) {
				_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

				if ( this.pulling != null && this.pulling.loc != null ) {
					
					if ( !( this.pulling.loc is Tile ) ) {
						this.stop_pulling();
						return _default;
					} else if ( GlobalVars.Debug ) {
						GlobalVars.diary.WriteMsg( "pulling disappeared? at " + 611 + " in mob.dm - pulling = " + this.pulling );
						GlobalVars.diary.WriteMsg( "REPORT THIS" );
					}
				}

				if ( this.pulling != null && Lang13.Bool( ((dynamic)this.pulling).anchored ) ) {
					this.stop_pulling();
					return _default;
				}
				M2 = this.pulling;

				if ( !this.restrained() ) {
					diag = Map13.GetDistance( this, this.pulling );

					if ( ( ( diag ??0) - 1 & ( diag ??0) ) != 0 ) {
						
					} else {
						diag = null;
					}

					if ( Map13.GetDistance( this, this.pulling ) > 1 || Lang13.Bool( diag ) ) {
						
						if ( !( this.pulling is Ent_Dynamic ) || !( this.pulling != null ) ) {
							Game13.log.WriteMsg( "##WARNING: " + ( "Pulling disappeared! pulling = " + this.pulling + " old pulling = " + M2 ) + " in " + "code/modules/mob/living/living.dm" + " at line " + 627 + " src: " + this + " usr: " + Task13.User + "." );
						} else if ( this.pulling.loc is Tile ) {
							
							if ( this.pulling is Mob_Living ) {
								M2 = this.pulling;
								ok = true;

								if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), ((dynamic)M2).grabbed_by ) ) ) {
									
									if ( Rand13.PercentChance( 75 ) ) {
										G = Rand13.PickFromTable( ((dynamic)M2).grabbed_by );

										if ( G is Obj_Item_Weapon_Grab ) {
											this.visible_message( "<span class='danger'>" + this + " has pulled " + G.affecting + " from " + G.assailant + "'s grip.</span>", null, null, "<span class='danger'>" + this + " has pulled " + G.affecting + " from " + G.assailant + "'s hug.</span>" );
											GlobalFuncs.qdel( G );
										}
									} else {
										ok = false;
									}

									if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), ((dynamic)M2).grabbed_by.len ) ) ) {
										ok = false;
									}
								}

								if ( ok ) {
									t = ((dynamic)M2).pulling;
									((Mob)M2).stop_pulling();
									((dynamic)this.pulling).Move( T, Map13.GetDistance( this.pulling, T ) );

									if ( M2 != null ) {
										((dynamic)M2).start_pulling( t );
									}
								}
							} else if ( this.pulling != null ) {
								((dynamic)this.pulling).Move( T, Map13.GetDistance( this.pulling, T ) );
							}
						} else {
							this.stop_pulling();
						}
					}
				}
			} else {
				this.stop_pulling();
				_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );
			}

			if ( this.s_active != null && GlobalFuncs.find_holder( this.s_active ) != this ) {
				((dynamic)this.s_active).close( this );
			}

			if ( this.update_slimes ) {
				
				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
					M3 = _b;
					
					M3.UpdateFeed( this );
				}
			}

			if ( T != this.loc ) {
				this.handle_hookchain( Dir );
			}

			if ( _default ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.targeted_by, typeof(Obj_Item_Weapon_Gun) )) {
					G2 = _c;
					
					M4 = G2.loc;

					if ( !Map13.FetchInView( null, this ).Contains( M4 ) ) {
						this.NotTargeted( G2 );
					}
				}

				foreach (dynamic _e in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Gun) )) {
					G3 = _e;
					

					if ( G3.target != null ) {
						
						foreach (dynamic _d in Lang13.Enumerate( G3.target, typeof(Mob_Living) )) {
							M5 = _d;
							

							if ( M5 != null && !Map13.FetchInView( null, this ).Contains( M5 ) ) {
								M5.NotTargeted( G3 );
							}
						}
					}
				}
			}

			if ( this.on_moved is _Event ) {
				this.on_moved.Invoke( new ByTable().Set( "loc", this.loc ) );
			}
			return _default;
		}

		// Function from file: living.dm
		public override dynamic emp_act( int severity = 0 ) {
			Obj_Item_Stickybomb B = null;
			ByTable L = null;
			Obj O = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Stickybomb) )) {
				B = _a;
				

				if ( Lang13.Bool( B.stuck_to ) ) {
					this.visible_message( new Txt( "<span class='warning'>" ).the( B ).item().str( " stuck on " ).the( this ).item().str( " suddenly deactivates itself and falls to the ground.</span>" ).ToString() );
					B.deactivate();
					B.unstick();
				}
			}

			if ( Lang13.Bool( this.flags & 128 ) ) {
				return null;
			}
			L = this.get_contents();

			foreach (dynamic _b in Lang13.Enumerate( L, typeof(Obj) )) {
				O = _b;
				
				O.emp_act( severity );
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: living.dm
		public override ByTable get_contents( Obj_Item Storage = null ) {
			ByTable L = null;
			Obj_Item_Weapon_Gift G = null;
			Obj_Item_Delivery D = null;
			Obj_Item_Weapon_Storage S = null;
			Obj_Item_Clothing_Suit_Storage S2 = null;
			Obj_Item_Clothing_Accessory_Storage S3 = null;
			Obj_Item_Weapon_Gift G2 = null;
			Obj_Item_Delivery D2 = null;

			L = new ByTable();

			if ( Storage != null ) {
				L.Add( ((Obj_Item_Weapon_Storage)Storage).return_inv() );

				foreach (dynamic _a in Lang13.Enumerate( ((Obj_Item_Weapon_Storage)Storage).return_inv(), typeof(Obj_Item_Weapon_Gift) )) {
					G = _a;
					
					L.Add( G.gift );

					if ( G.gift is Obj_Item_Weapon_Storage ) {
						L.Add( this.get_contents( G.gift ) );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( ((Obj_Item_Weapon_Storage)Storage).return_inv(), typeof(Obj_Item_Delivery) )) {
					D = _b;
					
					L.Add( D.wrapped );

					if ( D.wrapped is Obj_Item_Weapon_Storage ) {
						L.Add( this.get_contents( D.wrapped ) );
					}
				}
				return L;
			} else {
				L.Add( this.contents );

				foreach (dynamic _c in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Storage) )) {
					S = _c;
					
					L.Add( this.get_contents( S ) );
				}

				foreach (dynamic _d in Lang13.Enumerate( this.contents, typeof(Obj_Item_Clothing_Suit_Storage) )) {
					S2 = _d;
					
					L.Add( this.get_contents( S2 ) );
				}

				foreach (dynamic _e in Lang13.Enumerate( this.contents, typeof(Obj_Item_Clothing_Accessory_Storage) )) {
					S3 = _e;
					
					L.Add( this.get_contents( S3 ) );
				}

				foreach (dynamic _f in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Gift) )) {
					G2 = _f;
					
					L.Add( G2.gift );

					if ( G2.gift is Obj_Item_Weapon_Storage ) {
						L.Add( this.get_contents( G2.gift ) );
					}
				}

				foreach (dynamic _g in Lang13.Enumerate( this.contents, typeof(Obj_Item_Delivery) )) {
					D2 = _g;
					
					L.Add( D2.wrapped );

					if ( D2.wrapped is Obj_Item_Weapon_Storage ) {
						L.Add( this.get_contents( D2.wrapped ) );
					}
				}
				return L;
			}
		}

		// Function from file: living.dm
		public override bool apply_beam_damage( Obj_Effect_Beam B = null ) {
			dynamic lastcheck = null;
			double damage = 0;

			lastcheck = this.last_beamchecks[new Txt().Ref( B ).ToString()];
			damage = ( Game13.time - Convert.ToDouble( lastcheck ) ) / 10 * B.get_damage();
			this.apply_damage( damage, B.damage_type, B.def_zone );
			this.last_beamchecks[new Txt().Ref( B ).ToString()] = Game13.time;
			return false;
		}

		// Function from file: living.dm
		public override dynamic cultify(  ) {
			Mob_Living_SimpleAnimal_Construct_Harvester C = null;
			Mob_Dead_Observer G = null;
			dynamic H = null;
			dynamic mode_ticker = null;

			
			if ( GlobalFuncs.iscultist( this ) && this.client != null ) {
				C = new Mob_Living_SimpleAnimal_Construct_Harvester( GlobalFuncs.get_turf( this ) );
				this.mind.transfer_to( C );
				GlobalFuncs.to_chat( C, "<span class='sinister'>The Geometer of Blood is overjoyed to be reunited with its followers, and accepts your body in sacrifice. As reward, you have been gifted with the shell of an Harvester.<br>Your tendrils can use and draw runes without need for a tome, your eyes can see beings through walls, and your mind can open any door. Use these assets to serve Nar-Sie and bring him any remaining living human in the world.<br>You can teleport yourself back to Nar-Sie along with any being under yourself at any time using your \"Harvest\" spell.</span>" );
				this.dust();
			} else if ( this.client != null ) {
				G = this.ghostize();
				G.icon = "icons/mob/mob.dmi";
				G.icon_state = "ghost-narsie";
				G.overlays = 0;

				if ( G.mind.current is Mob_Living_Carbon_Human ) {
					H = G.mind.current;
					G.overlays.Add( H.obj_overlays[14] );
					G.overlays.Add( H.obj_overlays[9] );
					G.overlays.Add( H.obj_overlays[6] );
					G.overlays.Add( H.obj_overlays[10] );
					G.overlays.Add( H.obj_overlays[16] );
					G.overlays.Add( H.obj_overlays[11] );
					G.overlays.Add( H.obj_overlays[13] );
					G.overlays.Add( H.obj_overlays[18] );
					G.overlays.Add( H.obj_overlays[19] );
				}
				G.invisibility = 0;
				GlobalFuncs.to_chat( G, "<span class='sinister'>You feel relieved as what's left of your soul finally escapes its prison of flesh.</span>" );

				if ( GlobalVars.ticker.mode.name == "cult" ) {
					mode_ticker = GlobalVars.ticker.mode;
					mode_ticker.harvested++;
				}
			} else {
				this.dust();
			}
			return null;
		}

		// Function from file: living.dm
		public override bool handle_beams(  ) {
			Obj_Effect_Beam B = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.beams, typeof(Obj_Effect_Beam) )) {
				B = _a;
				
				this.apply_beam_damage( B );
			}
			return false;
		}

		// Function from file: living.dm
		public override void beam_disconnect( Obj_Effect_Beam B = null ) {
			base.beam_disconnect( B );
			this.apply_beam_damage( B );
			this.last_beamchecks.Remove( new Txt().Ref( B ).ToString() );
			return;
		}

		// Function from file: living.dm
		public override bool beam_connect( Obj_Effect_Beam B = null ) {
			base.beam_connect( B );
			this.last_beamchecks[new Txt().Ref( B ).ToString()] = Game13.time;
			return false;
		}

		// Function from file: living.dm
		public override bool Life(  ) {
			dynamic toCall = null;
			dynamic head = null;

			
			if ( this.timestopped ) {
				return false;
			}
			base.Life();

			if ( Lang13.Bool( this.flags & 128 ) ) {
				this.bodytemperature = Lang13.Initial( this, "bodytemperature" );
			}

			if ( this.monkeyizing ) {
				return false;
			}

			if ( !( this.loc != null ) ) {
				return false;
			}

			if ( Lang13.Bool( this.reagents ) && ((Reagents)this.reagents).has_reagent( "bustanut" ) ) {
				
				if ( !this.mutations.Contains( 300 ) ) {
					this.mutations.Add( 300 );
					GlobalFuncs.to_chat( this, "<span class='notice'>You feel like you're the best around.  Nothing's going to get you down.</span>" );
				}
			} else if ( this.mutations.Contains( 300 ) ) {
				this.mutations.Remove( 300 );
				GlobalFuncs.to_chat( this, "<span class='notice'>You feel like a pleb.</span>" );
			}
			this.handle_beams();

			foreach (dynamic _a in Lang13.Enumerate( this.callOnLife )) {
				toCall = _a;
				

				if ( Lang13.Bool( Lang13.FindObj( toCall ) ) && Lang13.Bool( this.callOnLife[toCall] ) ) {
					Lang13.Call( Lang13.GetLibFunc( Lang13.FindObj( toCall ), this.callOnLife[toCall] ) );
				} else {
					this.callOnLife.Remove( toCall );
				}
			}

			if ( this.mind != null ) {
				
				if ( Lang13.Bool( GlobalVars.ticker.mode.implanted.Contains( this.mind ) ) ) {
					
					if ( this.implanting ) {
						return false;
					}
					head = GlobalVars.ticker.mode.implanted[this.mind];

					if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Implant_Traitor), this.contents ) ) ) {
						((GameMode)GlobalVars.ticker.mode).remove_traitor_mind( this.mind, head );
					}
				}
			}
			return false;
		}

		// Function from file: living.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string size2 = null;
			string pronoun = null;
			string butchery = null;
			ButcheringProduct B = null;

			
			dynamic _a = this.size; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				size2 = "tiny";
			} else if ( _a==2 ) {
				size2 = "small";
			} else if ( _a==3 ) {
				size2 = "average in size";
			} else if ( _a==4 ) {
				size2 = "big";
			} else if ( _a==5 ) {
				size2 = "huge";
			}
			pronoun = "it is";

			if ( this.gender == GlobalVars.FEMALE ) {
				pronoun = "she is";
			} else if ( this.gender == GlobalVars.MALE ) {
				pronoun = "he is";
			} else if ( this.gender == GlobalVars.PLURAL ) {
				pronoun = "they are";
			}
			base.examine( (object)(user), " " + GlobalFuncs.capitalize( pronoun ) + " " + size2 + "." );

			if ( this.meat_taken > 0 ) {
				GlobalFuncs.to_chat( user, "<span class='info'>" + GlobalFuncs.capitalize( pronoun ) + " partially butchered.</span>" );
			}
			butchery = "";

			if ( this.butchering_drops != null && this.butchering_drops.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.butchering_drops, typeof(ButcheringProduct) )) {
					B = _b;
					
					butchery = "" + butchery + B.desc_modifier( this );
				}
			}

			if ( Lang13.Bool( butchery ) ) {
				GlobalFuncs.to_chat( user, "<span class='info'>" + butchery + "</span>" );
			}
			return null;
		}

		// Function from file: death.dm
		public override dynamic death( bool? gibbed = null ) {
			
			if ( !( gibbed == true ) && this.can_butcher ) {
				this.verbs.Add( typeof(Mob_Living).GetMethod( "butcher" ) );
			}
			this.init_butchering_list();
			base.death( gibbed );
			return null;
		}

		// Function from file: damage_procs.dm
		public override void ashify(  ) {
			return;
		}

		// Function from file: language.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic L = null;

			
			if ( Lang13.Bool( href_list["default_lang"] ) ) {
				
				if ( href_list["default_lang"] == "reset" ) {
					this.set_default_language( null );
				} else {
					L = GlobalVars.all_languages[href_list["default_lang"]];

					if ( Lang13.Bool( L ) ) {
						this.set_default_language( L );
					}
				}
				this.check_languages();
				return 1;
			} else {
				return base.Topic( href, href_list, (object)(hclient) );
			}
		}

		// Function from file: language.dm
		public override bool remove_language( dynamic rem_language = null ) {
			Language L = null;

			L = GlobalVars.all_languages[rem_language];

			if ( this.default_language == L ) {
				
				if ( GlobalVars.all_languages.len != 0 ) {
					this.default_language = GlobalVars.all_languages[1];
				} else {
					this.default_language = null;
				}
			}
			return base.remove_language( (object)(rem_language) );
		}

		// Function from file: ventcrawl.dm
		public override bool AltClickOn( Ent_Static A = null ) {
			
			if ( GlobalFuncs.is_type_in_list( A, GlobalVars.ventcrawl_machinery ) && this.can_ventcrawl() ) {
				this.handle_ventcrawl( A );
				return true;
			}
			return base.AltClickOn( A );
		}

		// Function from file: Fire.dm
		public virtual void FireBurn( double firelevel = 0, double? last_temperature = null, dynamic pressure = null ) {
			double mx = 0;

			mx = firelevel * 5 / Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireFirelevelMultiplier) ) ) * Num13.MinInt( Convert.ToInt32( pressure / 101.32499694824219 ), 1 );
			this.apply_damage( mx * 2.5, "fire" );
			return;
		}

		// Function from file: targeting.dm
		public bool set_m_intent( string intent = null ) {
			
			if ( intent != "walk" && intent != "run" ) {
				return false;
			}
			this.m_intent = intent;

			if ( this.hud_used != null ) {
				
				if ( this.hud_used.move_intent != null ) {
					((dynamic)this.hud_used.move_intent).icon_state = ( intent == "walk" ? "walking" : "running" );
				}
			}
			return false;
		}

		// Function from file: targeting.dm
		public void NotTargeted( Obj_Item_Weapon_Gun I = null ) {
			Mob_Living M = null;
			Ent_Static T = null;

			
			if ( !Lang13.Bool( I.silenced ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ), typeof(Mob_Living) )) {
					M = _a;
					
					GlobalFuncs.to_chat( M, "sound/weapons/TargetOff.ogg" );
				}
			}
			this.targeted_by.Remove( I );
			I.target.Remove( this );

			if ( !( I.target.len != 0 ) ) {
				I.target = null;
			}
			T = I.loc;

			if ( T != null && T is Mob && !( I.target != null ) ) {
				((Client)((dynamic)T).client).remove_gun_icons();
			}

			if ( !( this.targeted_by.len != 0 ) ) {
				Lang13.Delete( this.target_locked );
				this.target_locked = null;
				this.targeted_by = null;
			}
			Task13.Schedule( 1, (Task13.Closure)(() => {
				this.update_targeted();
				return;
			}));
			return;
		}

		// Function from file: targeting.dm
		public void Targeted( Obj_Item_Weapon_Gun I = null ) {
			Mob_Living K = null;
			Ent_Static T = null;

			
			if ( !( I.target != null ) ) {
				I.target = new ByTable(new object [] { this });
			} else if ( I.automatic && I.target.len < 5 ) {
				I.target.Add( this );
			} else if ( I.target.len >= 5 ) {
				
				if ( I.loc is Mob ) {
					GlobalFuncs.to_chat( I.loc, "You can only target 5 people at once!" );
				}
				return;
			} else {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, Task13.User ), typeof(Mob_Living) )) {
				K = _a;
				
				GlobalFuncs.to_chat( K, "sound/weapons/TargetOn.ogg" );
			}

			if ( !( this.targeted_by != null ) ) {
				this.targeted_by = new ByTable();
			}
			this.targeted_by.Add( I );
			I.lock_time = Game13.time + 20;
			GlobalFuncs.to_chat( this, "((<span class='danger'>Your character is being targeted. They have 2 seconds to stop any click or move actions. </span>While targeted, they may drag and drop items in or into the map, speak, and click on interface buttons. Clicking on the map objects (floors and walls are fine), their items (other than a weapon to de-target), or moving will result in being fired upon. <span class='warning'>The aggressor may also fire manually, </span>so try not to get on their bad side.ÿ\"))" );

			if ( this.targeted_by.len == 1 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.target_locked = new Image( "icons/effects/Targeted.dmi", null, "locking" );
					this.update_targeted();
					Task13.Schedule( 0, (Task13.Closure)(() => {
						Task13.Sleep( 20 );

						if ( this.target_locked != null ) {
							this.target_locked = new Image( "icons/effects/Targeted.dmi", null, "locked" );
							this.update_targeted();
						}
						return;
					}));
					return;
				}));
			}
			T = I.loc;

			if ( T != null ) {
				
				if ( Lang13.Bool( ((dynamic)T).client ) ) {
					((Client)((dynamic)T).client).add_gun_icons();
				} else {
					I.lower_aim();
					return;
				}

				if ( this.m_intent == "run" && ((dynamic)T).client.target_can_move && !((dynamic)T).client.target_can_run && T is Mob_Living_Carbon_Human ) {
					GlobalFuncs.to_chat( this, "<spanclass='warning'>Your captive is allowing you to walk. Make sure to change your move intent to walk before trying to move, or you will be fired upon.</span>" );
				}

				while (this.targeted_by != null && Lang13.Bool( ((dynamic)T).client )) {
					
					if ( this.last_move_intent > I.lock_time + 10 && !((dynamic)T).client.target_can_move ) {
						I.TargetActed( this );

						if ( I.last_moved_mob == this ) {
							I.lock_time = Game13.time + 5;
						}
						I.lock_time = Game13.time + 5;
						I.last_moved_mob = this;
					} else if ( this.last_move_intent > I.lock_time + 10 && !((dynamic)T).client.target_can_run && this.m_intent == "run" ) {
						I.TargetActed( this );

						if ( I.last_moved_mob == this ) {
							I.lock_time = Game13.time + 5;
						}
						I.lock_time = Game13.time + 5;
						I.last_moved_mob = this;
					}

					if ( this.last_target_click > I.lock_time + 10 && !((dynamic)T).client.target_can_click ) {
						I.TargetActed( this );

						if ( I.last_moved_mob == this ) {
							I.lock_time = Game13.time + 5;
						}
						I.lock_time = Game13.time + 5;
						I.last_moved_mob = this;
					}
					Task13.Sleep( 1 );
				}
			}
			return;
		}

		// Function from file: say.dm
		public void robot_talk( string message = null ) {
			dynamic T = null;
			string message_a = null;
			string rendered = null;
			dynamic S = null;
			string renderedAI = null;

			T = GlobalFuncs.get_turf( this );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( this ) + " (@" + T.x + "," + T.y + "," + T.z + " Binary: " + message ) ) );
			message_a = this.say_quote( "\"" + String13.HtmlEncode( message ) + "\"" );
			rendered = "<i><span class='game say'>Robotic Talk, <span class='name'>" + this.name + "</span> <span class='message'>" + message_a + "</span></span></i>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				S = _a;
				

				if ( S is Mob_Living_Silicon_Ai ) {
					renderedAI = new Txt( "<i><span class='game say'>Robotic Talk, <a href='byond://?src=" ).Ref( S ).str( ";track2=" ).Ref( S ).str( ";track=" ).Ref( this ).str( "'><span class='name'>" ).item( this.name ).str( "</span></a> <span class='message'>" ).item( message_a ).str( "</span></span></i>" ).ToString();
					GlobalFuncs.to_chat( S, renderedAI );
				} else if ( ((Mob)S).binarycheck() || GlobalVars.dead_mob_list.Contains( S ) && !( S is Mob_NewPlayer ) ) {
					GlobalFuncs.handle_render( S, rendered, this );
				}
			}
			return;
		}

		// Function from file: say.dm
		public void alien_talk( string message = null ) {
			dynamic T = null;
			string message_a = null;
			string rendered = null;
			dynamic S = null;

			T = GlobalFuncs.get_turf( this );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( this ) + " (@" + T.x + "," + T.y + "," + T.z + ") Alien Hivemind: " + message ) ) );
			message = GlobalFuncs.trim( message );

			if ( !Lang13.Bool( message ) ) {
				return;
			}
			message_a = this.say_quote( "\"" + String13.HtmlEncode( message ) + "\"" );
			rendered = "<i><span class='game say'>Hivemind, <span class='name'>" + this.name + "</span> <span class='message'>" + message_a + "</span></span></i>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				S = _a;
				

				if ( !Lang13.Bool( S.stat ) && ((Mob)S).hivecheck() || GlobalVars.dead_mob_list.Contains( S ) && !( S is Mob_NewPlayer ) ) {
					GlobalFuncs.handle_render( S, rendered, this );
				}
			}
			return;
		}

		// Function from file: say.dm
		public void send_speech_bubble( Game_Data message = null, string bubble_type = null, ByTable hearers = null ) {
			ByTable speech_bubble_recipients = null;
			dynamic M = null;
			Image speech_bubble = null;

			speech_bubble_recipients = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( hearers )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					speech_bubble_recipients.Add( M.client );
				}
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				speech_bubble = new Image( "icons/mob/talk.dmi", GlobalFuncs.find_holder( this ), "h" + bubble_type + this.say_test( message ), 5 );
				speech_bubble.appearance_flags = 2;
				GlobalFuncs.flick_overlay( speech_bubble, speech_bubble_recipients, 30 );
				return;
			}));
			return;
		}

		// Function from file: say.dm
		public virtual int radio( Game_Data speech = null, string message_mode = null ) {
			Obj_Item_Device_Radio_Intercom I = null;

			
			switch ((string)( message_mode )) {
				case "right hand":
					
					if ( Lang13.Bool( this.r_hand ) ) {
						((Obj_Item)this.r_hand).talk_into( speech );
					}
					return 3;
					break;
				case "left hand":
					
					if ( Lang13.Bool( this.l_hand ) ) {
						((Obj_Item)this.l_hand).talk_into( speech );
					}
					return 3;
					break;
				case "intercom":
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, 1 ), typeof(Obj_Item_Device_Radio_Intercom) )) {
						I = _a;
						
						I.talk_into( speech );
					}
					return 3;
					break;
				case "binary":
					
					if ( this.binarycheck() ) {
						this.robot_talk( ((dynamic)speech).message );
					}
					return 3;
					break;
				case "whisper":
					this.__CallVerb("Whisper", ((dynamic)speech).message, ((dynamic)speech).language );
					return 4;
					break;
			}
			return 0;
		}

		// Function from file: say.dm
		public virtual void treat_speech( Game_Data speech = null, bool? genesay = null ) {
			genesay = genesay ?? false;

			
			if ( this.getBrainLoss() >= 60 ) {
				((dynamic)speech).message = GlobalFuncs.derpspeech( ((dynamic)speech).message, this.stuttering );
			}

			if ( Lang13.Bool( this.stuttering ) || this.undergoing_hypothermia() == 2 && Rand13.PercentChance( 25 ) ) {
				((dynamic)speech).message = GlobalFuncs.stutter( ((dynamic)speech).message );
			}
			return;
		}

		// Function from file: say.dm
		public virtual bool handle_inherent_channels( Game_Data speech = null, string message_mode = null ) {
			dynamic T = null;
			string themessage = null;
			dynamic M = null;
			dynamic T2 = null;
			string themessage2 = null;
			dynamic M2 = null;
			ByTable stone = null;
			Obj_Item_Commstone commstone = null;
			ByTable stones = null;
			string themessage3 = null;
			dynamic T3 = null;
			dynamic thestone = null;
			dynamic M3 = null;
			Mob_NewPlayer M4 = null;

			
			switch ((string)( message_mode )) {
				case "changeling":
					
					if ( this.lingcheck() ) {
						T = GlobalFuncs.get_turf( this );
						GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + this.mind.changeling.changelingID + "/" + GlobalFuncs.key_name( this ) + " (@" + T.x + "," + T.y + "," + T.z + ") Changeling Hivemind: " + String13.HtmlEncode( ((dynamic)speech).message ) ) ) );
						themessage = "<i><font color=#800080><b>" + this.mind.changeling.changelingID + ":</b> " + String13.HtmlEncode( ((dynamic)speech).message ) + "</font></i>";

						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
							M = _a;
							

							if ( ((Mob)M).lingcheck() || GlobalVars.dead_mob_list.Contains( M ) && !( M is Mob_NewPlayer ) ) {
								GlobalFuncs.handle_render( M, themessage, this );
							}
						}
						return true;
					}
					break;
				case "cultchat":
					
					if ( this.construct_chat_check( 1 ) ) {
						T2 = GlobalFuncs.get_turf( this );
						GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( this ) + " (@" + T2.x + "," + T2.y + "," + T2.z + ") Cult channel: " + String13.HtmlEncode( ((dynamic)speech).message ) ) ) );
						themessage2 = "<span class='sinister'><b>" + this.name + ":</b> " + String13.HtmlEncode( ((dynamic)speech).message ) + "</span>";

						foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list )) {
							M2 = _b;
							

							if ( ((Mob)M2).construct_chat_check( 2 ) || GlobalVars.dead_mob_list.Contains( M2 ) && !( M2 is Mob_NewPlayer ) ) {
								GlobalFuncs.handle_render( M2, themessage2, this );
							}
						}
						return true;
					}
					break;
				case "ancientchat":
					
					if ( this is Mob_Living_Silicon_Robot_Mommi ) {
						return false;
					}
					stone = this.search_contents_for( typeof(Obj_Item_Commstone) );

					if ( stone.len != 0 ) {
						commstone = stone[1];

						if ( commstone.commdevice != null ) {
							stones = commstone.commdevice.get_active_stones();
							themessage3 = "<span class='ancient'>Ancient communication, <b>" + this.name + ":</b> " + String13.HtmlEncode( ((dynamic)speech).message ) + "</span>";
							T3 = GlobalFuncs.get_turf( this );
							GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]SAY: " + ( "" + GlobalFuncs.key_name( this ) + " (@" + T3.x + "," + T3.y + "," + T3.z + ") Ancient chat: " + String13.HtmlEncode( ((dynamic)speech).message ) ) ) );

							foreach (dynamic _c in Lang13.Enumerate( stones )) {
								thestone = _c;
								
								M3 = GlobalFuncs.find_holder_of_type( thestone, typeof(Mob) );
								GlobalFuncs.handle_render( M3, themessage3, this );
							}

							foreach (dynamic _d in Lang13.Enumerate( GlobalVars.dead_mob_list, typeof(Mob_NewPlayer) )) {
								M4 = _d;
								
							}
							return true;
						}
					}
					break;
			}
			return false;
		}

		// Function from file: say.dm
		public virtual string get_message_mode( dynamic message = null ) {
			
			if ( String13.SubStr( message, 1, 2 ) == ";" ) {
				return "headset";
			} else if ( Lang13.Length( message ) > 2 ) {
				return GlobalVars.department_radio_keys[String13.SubStr( message, 1, 3 )];
			}
			return null;
		}

		// Function from file: say.dm
		public bool check_emote( dynamic message = null ) {
			
			if ( String13.SubStr( message, 1, 2 ) == "*" ) {
				this.emote( String13.SubStr( message, 2, 0 ) );
				return true;
			}
			return false;
		}

		// Function from file: say.dm
		public bool can_speak_vocal( dynamic message = null ) {
			
			if ( !Lang13.Bool( message ) ) {
				return false;
			}

			if ( ( this.sdisabilities & 2 ) != 0 ) {
				return false;
			}

			if ( this.is_muzzled() ) {
				return false;
			}

			if ( !this.IsVocal() ) {
				return false;
			}
			return true;
		}

		// Function from file: say.dm
		public bool can_speak_basic( dynamic message = null ) {
			
			if ( !Lang13.Bool( message ) || message == "" ) {
				return false;
			}

			if ( this.client != null ) {
				
				if ( ( this.client.prefs.muted & 1 ) != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='danger'>You cannot speak in IC (muted).</span>" );
					return false;
				}

				if ( this.client.handle_spam_prevention( message, 1 ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: say.dm
		public string say_test( dynamic text = null ) {
			string ending = null;

			ending = String13.SubStr( text, Lang13.Length( text ), 0 );

			if ( ending == "?" ) {
				return "1";
			} else if ( ending == "!" ) {
				return "2";
			}
			return "0";
		}

		// Function from file: say.dm
		public virtual dynamic hear_radio_only(  ) {
			return 0;
		}

		// Function from file: say.dm
		public virtual Language get_default_language(  ) {
			
			if ( !( this.default_language != null ) ) {
				
				if ( this.languages != null && this.languages.len != 0 ) {
					this.default_language = this.languages[1];
				}
			}
			return this.default_language;
		}

		// Function from file: living_defines.dm
		public void unsubLife( GameMode sub = null ) {
			
			while (this.callOnLife.Contains( new Txt().Ref( sub ).ToString() )) {
				this.callOnLife.Remove( new Txt().Ref( sub ).ToString() );
			}
			return;
		}

		// Function from file: living_defense.dm
		public virtual bool handle_fire(  ) {
			dynamic oxy = null;
			Ent_Static T = null;
			GasMixture G = null;
			dynamic location = null;
			Mob_Living H = null;

			
			if ( Lang13.Bool( this.flags & 128 ) && this.on_fire ) {
				this.extinguish();
			}

			if ( this.fire_stacks < 0 ) {
				this.fire_stacks++;
				this.fire_stacks = Num13.MinInt( 0, ((int)( this.fire_stacks )) );
			}

			if ( !this.on_fire ) {
				return true;
			}
			oxy = 0;
			T = this.loc;

			if ( T is Tile ) {
				G = this.loc.return_air();

				if ( G != null ) {
					oxy = G.oxygen;
				}
			}

			if ( Convert.ToDouble( oxy ) < 1 || this.fire_stacks <= 0 ) {
				this.ExtinguishMob();
				return true;
			}
			location = GlobalFuncs.get_turf( this );
			((Tile)location).hotspot_expose( 700, 50, true, true );

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				if ( H.mind != null && H.mind.vampire != null && H.stat == 2 ) {
					this.dust();
				}
			}
			return false;
		}

		// Function from file: living_defense.dm
		public void adjust_fire_stacks( double add_fire_stacks = 0 ) {
			this.fire_stacks = ( this.fire_stacks + add_fire_stacks <= -20 ? -20 : ( this.fire_stacks + add_fire_stacks >= 20 ? 20 : this.fire_stacks + add_fire_stacks ) );
			return;
		}

		// Function from file: living_defense.dm
		public virtual void update_fire( bool? update_icons = null ) {
			return;
		}

		// Function from file: living_defense.dm
		public virtual void ExtinguishMob(  ) {
			
			if ( this.on_fire ) {
				this.on_fire = false;
				this.fire_stacks = 0;
				this.set_light( this.light_range - 3 );
				this.update_fire();
			}
			return;
		}

		// Function from file: living_defense.dm
		public virtual bool IgniteMob(  ) {
			
			if ( this.fire_stacks > 0 && !this.on_fire ) {
				this.on_fire = true;
				this.set_light( this.light_range + 3 );
				this.update_fire();
				return true;
			} else {
				return false;
			}
		}

		// Function from file: living_defense.dm
		public dynamic near_wall( int? direction = null, int? distance = null ) {
			distance = distance ?? 1;

			Tile T = null;
			Ent_Static last_turf = null;
			int? i = null;

			T = Map13.GetStep( GlobalFuncs.get_turf( this ), direction ??0 );
			last_turf = this.loc;
			i = 1;

			while (( i ??0) > 0 && ( i ??0) <= ( distance ??0)) {
				
				if ( T.density ) {
					return last_turf;
				}
				i++;
				last_turf = T;
				T = Map13.GetStep( T, direction ??0 );
			}
			return 0;
		}

		// Function from file: living_defense.dm
		public virtual double getarmor( dynamic def_zone = null, string type = null ) {
			return 0;
		}

		// Function from file: living_defense.dm
		public int run_armor_check( dynamic def_zone = null, string attack_flag = null, string absorb_text = null, string soften_text = null ) {
			attack_flag = attack_flag ?? "melee";

			double armor = 0;
			int absorb = 0;

			armor = this.getarmor( def_zone, attack_flag );
			absorb = 0;

			if ( Rand13.PercentChance( ((int)( armor )) ) ) {
				absorb += 1;
			}

			if ( Rand13.PercentChance( ((int)( armor )) ) ) {
				absorb += 1;
			}

			if ( absorb >= 2 ) {
				
				if ( Lang13.Bool( absorb_text ) ) {
					this.show_message( "" + absorb_text );
				} else {
					this.show_message( "<span class='warning'>Your armor absorbs the blow!</span>" );
				}
				return 2;
			}

			if ( absorb == 1 ) {
				
				if ( Lang13.Bool( absorb_text ) ) {
					this.show_message( "" + soften_text, 4 );
				} else {
					this.show_message( "<span class='warning'>Your armor softens the blow!</span>" );
				}
				return 1;
			}
			return 0;
		}

		// Function from file: living.dm
		public void scoop_up( dynamic M = null ) {
			Game_Data D = null;

			
			if ( !( this.holder_type != null ) ) {
				return;
			}
			D = GlobalFuncs.getFromPool( this.holder_type, this.loc, this );

			if ( ((Mob)M).put_in_active_hand( D ) ) {
				GlobalFuncs.to_chat( M, "You scoop up " + this + "." );
				GlobalFuncs.to_chat( this, "" + M + " scoops you up." );
				this.loc = D;
			} else {
				GlobalFuncs.returnToPool( D );
			}
			return;
		}

		// Function from file: living.dm
		public int get_strength(  ) {
			int _default = 0;

			int strength = 0;

			strength = 1;
			strength += this.mutations.Contains( 4 ) ?1:0;
			strength += this.mutations.Contains( 202 ) ?1:0;
			_default = strength;
			return _default;
		}

		// Function from file: living.dm
		[VerbInfo( name: "Butcher", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool butcher(  ) {
			Mob user = null;
			dynamic tool = null;
			dynamic speed_mod = null;
			dynamic butchering_time = null;
			Mob H = null;
			dynamic M = null;
			ByTable actions = null;
			ButcheringProduct B = null;
			dynamic choice = null;
			ButcheringProduct our_product = null;

			user = Task13.User;

			if ( !( user is Mob_Living ) ) {
				return false;
			}

			if ( user.isUnconscious() || user.restrained() ) {
				return false;
			}

			if ( this.being_butchered ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>" + this + " is already being butchered.</span>" );
				return false;
			}

			if ( !this.can_butcher ) {
				
				if ( this.meat_taken != 0 ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>" + this + " has already been butchered.</span>" );
					return false;
				} else {
					GlobalFuncs.to_chat( user, "<span class='notice'>You can't butcher " + this + "!" );
					return false;
				}
				return false;
			}
			tool = null;
			speed_mod = 1;
			butchering_time = this.size * 20;

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;
				tool = H.get_active_hand();

				if ( Lang13.Bool( tool ) ) {
					speed_mod = ((Obj)tool).is_sharp();

					if ( !Lang13.Bool( speed_mod ) ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You can't butcher " ).the( this ).item().str( " with this!</span>" ).ToString() );
						return false;
					}
				} else {
					speed_mod = 0;
				}

				if ( H.mutations.Contains( 10 ) ) {
					
					if ( !( ((dynamic)H).gloves is Obj_Item ) ) {
						speed_mod += 0.25;
					}
				}

				if ( H.mutations.Contains( 11 ) ) {
					
					if ( H.wear_mask is Obj_Item_Clothing_Mask ) {
						M = H.wear_mask;

						if ( !Lang13.Bool( M.body_parts_covered & 4096 ) ) {
							speed_mod += 0.25;
						}
					} else {
						speed_mod += 0.25;
					}
				}
			} else {
				speed_mod = 0.5;
			}

			if ( !Lang13.Bool( speed_mod ) ) {
				return false;
			}

			if ( this.butchering_drops != null && this.butchering_drops.len != 0 ) {
				actions = new ByTable();
				actions.Add( "Butcher" );

				foreach (dynamic _a in Lang13.Enumerate( this.butchering_drops, typeof(ButcheringProduct) )) {
					B = _a;
					

					if ( B.amount <= 0 ) {
						continue;
					}
					actions.Or( GlobalFuncs.capitalize( B.verb_name ) );
					actions[GlobalFuncs.capitalize( B.verb_name )] = B;
				}
				actions.Add( "Cancel" );
				choice = Interface13.Input( user, new Txt( "What would you like to do with " ).the( this ).item().str( "?" ).ToString(), "Butchering", null, actions, InputType.Any );

				if ( !this.Adjacent( user ) || !( Task13.User.get_active_hand() == tool ) ) {
					return false;
				}

				if ( choice == "Cancel" ) {
					return false;
				} else if ( choice != "Butcher" ) {
					our_product = actions[choice];

					if ( !( our_product is ButcheringProduct ) ) {
						return false;
					}
					user.visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " starts " ).item( our_product.verb_gerund ).str( " " ).the( this ).item().item( ( Lang13.Bool( tool ) ? new Txt( "with " ).the( tool ).item().ToString() : "" ) ).str( ".</span>" ).ToString(), new Txt( "<span class='info'>You start " ).item( our_product.verb_gerund ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );
					this.being_butchered = true;

					if ( !GlobalFuncs.do_after( user, this, butchering_time / speed_mod ) ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>Your attempt to " ).item( our_product.verb_name ).str( " " ).the( this ).item().str( " has been interrupted.</span>" ).ToString() );
						this.being_butchered = false;
					} else {
						GlobalFuncs.to_chat( user, new Txt( "<span class='info'>You finish " ).item( our_product.verb_gerund ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );
						this.being_butchered = false;
						this.update_icons();
						our_product.spawn_result( GlobalFuncs.get_turf( this ), this );
					}
					return false;
				}
			}
			user.visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " starts butchering " ).the( this ).item().item( ( Lang13.Bool( tool ) ? new Txt( " with " ).the( tool ).item().ToString() : "" ) ).str( ".</span>" ).ToString(), new Txt( "<span class='info'>You start butchering " ).the( this ).item().str( ".</span>" ).ToString() );
			this.being_butchered = true;

			if ( !GlobalFuncs.do_after( user, this, butchering_time / speed_mod ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>Your attempt to butcher " ).the( this ).item().str( " was interrupted.</span>" ).ToString() );
				this.being_butchered = false;
				return false;
			}
			this.drop_meat( GlobalFuncs.get_turf( this ) );
			this.meat_taken++;
			this.being_butchered = false;

			if ( this.meat_taken < Convert.ToDouble( this.size ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>You cut a chunk of meat out of " ).the( this ).item().str( ".</span>" ).ToString() );
				return false;
			}
			GlobalFuncs.to_chat( user, new Txt( "<span class='info'>You butcher " ).the( this ).item().str( ".</span>" ).ToString() );
			this.can_butcher = false;

			if ( this is Mob_Living_SimpleAnimal ) {
				
				if ( Convert.ToDouble( this.size ) > 1 ) {
					this.gib( null, false );
				} else {
					GlobalFuncs.qdel( this );
				}
			}
			return false;
		}

		// Function from file: living.dm
		public dynamic drop_meat( dynamic location = null ) {
			dynamic M = null;
			dynamic A = null;
			Mob_Living source_animal = null;
			Type specimen = null;

			
			if ( !Lang13.Bool( this.meat_type ) ) {
				return 0;
			}
			M = Lang13.Call( this.meat_type, location );
			A = M;

			if ( A is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Animal ) {
				source_animal = this;

				if ( source_animal is Mob_Living_SimpleAnimal && source_animal.species_type != null ) {
					specimen = source_animal.species_type;
					A.name = "" + Lang13.Initial( specimen, "name" ) + " meat";
					A.animal_name = Lang13.Initial( specimen, "name" );
				} else {
					A.name = "" + Lang13.Initial( this, "name" ) + " meat";
					A.animal_name = Lang13.Initial( this, "name" );
				}
			}
			return M;
		}

		// Function from file: living.dm
		public bool can_move_mob( Obj swapped = null, bool? swapping = null, bool? passive = null ) {
			swapping = swapping ?? false;
			passive = passive ?? false;

			int context_flags = 0;

			
			if ( !( swapped != null ) ) {
				return true;
			}

			if ( !( passive == true ) ) {
				return ((Mob_Living)swapped).can_move_mob( this, swapping, true );
			} else {
				context_flags = 0;

				if ( swapping == true ) {
					context_flags = Convert.ToInt32( ((dynamic)swapped).mob_swap_flags );
				} else {
					context_flags = Convert.ToInt32( ((dynamic)swapped).mob_push_flags );
				}

				if ( !( this.mob_bump_flag != 0 ) ) {
					return true;
				}

				if ( ( this.mob_bump_flag & context_flags ) != 0 ) {
					return true;
				}
				return false;
			}
		}

		// Function from file: living.dm
		public virtual void generate_static_overlay(  ) {
			Image static_overlay = null;

			
			if ( !( this.static_overlays is ByTable ) ) {
				this.static_overlays = new ByTable();
			}
			this.static_overlays.Add( new ByTable(new object [] { "static", "blank", "letter" }) );
			static_overlay = new Image( GlobalFuncs.getStaticIcon( new Icon( this.icon, this.icon_state ) ), this );
			static_overlay.v_override = true;
			this.static_overlays["static"] = static_overlay;
			static_overlay = new Image( GlobalFuncs.getBlankIcon( new Icon( this.icon, this.icon_state ) ), this );
			static_overlay.v_override = true;
			this.static_overlays["blank"] = static_overlay;
			static_overlay = GlobalFuncs.getLetterImage( this );
			static_overlay.v_override = true;
			this.static_overlays["letter"] = static_overlay;
			return;
		}

		// Function from file: living.dm
		public bool InCritical(  ) {
			return Convert.ToDouble( this.health ) < 0 && Convert.ToDouble( this.health ) > -95 && this.stat == 1;
		}

		// Function from file: living.dm
		public virtual bool has_eyes(  ) {
			return true;
		}

		// Function from file: living.dm
		public virtual bool has_brain(  ) {
			return true;
		}

		// Function from file: living.dm
		public void handle_hookchain( double? direct = null ) {
			Obj_Item_Weapon_Gun_Hookshot hookshot = null;
			int? i = null;
			Ent_Static HC = null;
			Obj_Item_Projectile_Hookshot hook = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Weapon_Gun_Hookshot) )) {
				hookshot = _a;
				

				if ( hookshot.clockwerk ) {
					continue;
				}
				i = null;
				i = 1;

				while (( i ??0) < ( hookshot.maxlength ??0)) {
					HC = hookshot.links["" + i];

					if ( HC.loc != hookshot ) {
						((dynamic)HC).Move( Map13.GetStep( HC, ((int)( direct ??0 )) ), direct );
					}
					i++;
				}

				if ( hookshot.hook != null ) {
					hook = hookshot.hook;
					hook.Move( Map13.GetStep( hook, ((int)( direct ??0 )) ), ((int?)( direct )) );

					if ( ( ((int)( direct ??0 )) & 1 ) != 0 ) {
						hook.override_starting_Y++;
						hook.override_target_Y++;
					}

					if ( ( ((int)( direct ??0 )) & 2 ) != 0 ) {
						hook.override_starting_Y--;
						hook.override_target_Y--;
					}

					if ( ( ((int)( direct ??0 )) & 4 ) != 0 ) {
						hook.override_starting_X++;
						hook.override_target_X++;
					}

					if ( ( ((int)( direct ??0 )) & 8 ) != 0 ) {
						hook.override_starting_X--;
						hook.override_target_X--;
					}
				}
			}
			return;
		}

		// Function from file: living.dm
		[VerbInfo( name: "Examine Meta-Info (OOC)", group: "OOC", access: VerbAccess.InView, range: 125 )]
		public void Examine_OOC(  ) {
			
			if ( GlobalVars.config.allow_Metadata ) {
				
				if ( this.client != null ) {
					GlobalFuncs.to_chat( Task13.User, "" + this + "'s Metainfo:<br>" + this.client.prefs.metadata );
				} else {
					GlobalFuncs.to_chat( Task13.User, "" + this + " does not have any stored infomation!" );
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, "OOC Metadata is not supported by this server!" );
			}
			return;
		}

		// Function from file: living.dm
		public virtual void UpdateDamageIcon( bool? update_icons = null ) {
			return;
		}

		// Function from file: living.dm
		public virtual bool rejuvenate( bool? animation = null ) {
			animation = animation ?? false;

			dynamic T = null;
			Mob_Living H = null;
			dynamic organ_name = null;
			Organ_External O = null;
			Obj_Item_Weapon_Shard_Shrapnel s = null;
			dynamic organ_name2 = null;
			Organ IO = null;
			Mob_Living C = null;
			Disease D = null;

			T = GlobalFuncs.get_turf( this );

			if ( animation == true ) {
				((Tile)T).turf_animation( "icons/effects/64x64.dmi", "rejuvinate", -16, 0, 5, "sound/effects/rejuvinate.ogg" );
			}
			this.toxloss = 0;
			this.oxyloss = 0;
			this.cloneloss = 0;
			this.bruteloss = 0;
			this.fireloss = 0;
			this.brainloss = 0;
			this.halloss = 0;
			this.paralysis = 0;
			this.stunned = 0;
			this.weakened = 0;
			this.jitteriness = 0;
			this.germ_level = 0;
			this.next_pain_time = 0;
			this.traumatic_shock = 0;
			this.radiation = 0;
			this.nutrition = 400;
			this.bodytemperature = 310;
			this.sdisabilities = 0;
			this.disabilities = 0;
			this.blinded = 0;
			this.eye_blind = 0;
			this.eye_blurry = 0;
			this.ear_deaf = 0;
			this.ear_damage = 0;

			if ( !Lang13.Bool( this.reagents ) ) {
				this.create_reagents( 1000 );
			} else {
				((Reagents)this.reagents).clear_reagents();
			}
			this.heal_overall_damage( 1000, 1000 );
			this.ExtinguishMob();
			this.fire_stacks = 0;

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;
				H.timeofdeath = 0;
				((dynamic)H).vessel.reagent_list = new ByTable();
				((Reagents)((dynamic)H).vessel).add_reagent( "blood", 560 );
				((dynamic)H).shock_stage = 0;
				Task13.Schedule( 1, (Task13.Closure)(() => {
					((dynamic)H).fixblood();
					return;
				}));

				foreach (dynamic _b in Lang13.Enumerate( ((dynamic)H).organs_by_name )) {
					organ_name = _b;
					
					O = ((dynamic)H).organs_by_name[organ_name];

					foreach (dynamic _a in Lang13.Enumerate( O.implants, typeof(Obj_Item_Weapon_Shard_Shrapnel) )) {
						s = _a;
						

						if ( s is Obj_Item_Weapon_Shard_Shrapnel ) {
							O.implants.Remove( s );
							H.contents.Remove( s );
							GlobalFuncs.qdel( s );
							s = null;
						}
					}
					O.amputated = false;
					O.brute_dam = 0;
					O.burn_dam = 0;
					O.damage_state = "00";
					O.germ_level = 0;
					O.hidden = null;
					O.number_wounds = 0;
					O.open = 0;
					O.perma_injury = 0;
					O.stage = false;
					O.status = 0;
					O.trace_chemicals = new ByTable();
					O.wounds = new ByTable();
					O.wound_update_accuracy = 1;
				}

				foreach (dynamic _c in Lang13.Enumerate( ((dynamic)H).internal_organs_by_name )) {
					organ_name2 = _c;
					
					IO = ((dynamic)H).internal_organs_by_name[organ_name2];
					((dynamic)IO).damage = 0;
					IO.trace_chemicals.len = 0;
					IO.germ_level = 0;
					IO.status = 0;
					((dynamic)IO).robotic = 0;
				}
				H.updatehealth();
			}

			if ( this is Mob_Living_Carbon ) {
				C = this;
				((dynamic)C).handcuffed = Lang13.Initial( C, "handcuffed" );
			}

			foreach (dynamic _d in Lang13.Enumerate( this.viruses, typeof(Disease) )) {
				D = _d;
				
				D.f_cure( false );
			}

			if ( this.stat == 2 ) {
				this.resurrect();
				this.tod = null;
			}
			this.stat = 0;
			this.status_flags &= 57343;
			this.regenerate_icons();
			this.update_canmove();
			Lang13.SuperCall( animation );
			this.hud_updateflag |= 2;
			this.hud_updateflag |= 4;
			return false;
		}

		// Function from file: living.dm
		public virtual void revive( bool? animation = null ) {
			animation = animation ?? false;

			Mob_Living C = null;

			this.rejuvenate( animation );

			if ( this is Mob_Living_Carbon ) {
				C = this;

				if ( Lang13.Bool( ((dynamic)C).handcuffed ) && !Lang13.Bool( Lang13.Initial( C, "handcuffed" ) ) ) {
					C.drop_from_inventory( ((dynamic)C).handcuffed );
				}
				((dynamic)C).handcuffed = Lang13.Initial( C, "handcuffed" );

				if ( Lang13.Bool( ((dynamic)C).legcuffed ) && !Lang13.Bool( Lang13.Initial( C, "legcuffed" ) ) ) {
					C.drop_from_inventory( ((dynamic)C).legcuffed );
				}
				((dynamic)C).legcuffed = Lang13.Initial( C, "legcuffed" );
			}
			this.hud_updateflag |= 2;
			this.hud_updateflag |= 4;
			return;
		}

		// Function from file: living.dm
		public virtual void restore_all_organs(  ) {
			return;
		}

		// Function from file: living.dm
		public virtual bool take_overall_damage( dynamic brute = null, dynamic burn = null, dynamic sharp = null, bool? edge = null, dynamic used_weapon = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}
			this.adjustBruteLoss( brute );
			this.adjustFireLoss( burn );
			this.updatehealth();
			return false;
		}

		// Function from file: living.dm
		public virtual void heal_overall_damage( dynamic brute = null, dynamic burn = null ) {
			this.adjustBruteLoss( -brute );
			this.adjustFireLoss( -burn );
			this.updatehealth();
			return;
		}

		// Function from file: living.dm
		public virtual bool take_organ_damage( dynamic brute = null, dynamic burn = null, bool? sharp = null, bool? edge = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}

			if ( Lang13.Bool( this.flags & 128 ) ) {
				return false;
			}
			this.adjustBruteLoss( brute );
			this.adjustFireLoss( burn );
			this.updatehealth();
			return false;
		}

		// Function from file: living.dm
		public virtual void heal_organ_damage( double brute = 0, double burn = 0 ) {
			this.adjustBruteLoss( -brute );
			this.adjustFireLoss( -burn );
			this.updatehealth();
			return;
		}

		// Function from file: living.dm
		public dynamic get_organ_target(  ) {
			string t = null;
			dynamic def_zone = null;

			t = ((dynamic)this.zone_sel).selecting;

			if ( new ByTable(new object [] { "eyes", "mouth" }).Contains( t ) ) {
				t = "head";
			}
			def_zone = GlobalFuncs.ran_zone( t );
			return def_zone;
		}

		// Function from file: living.dm
		public virtual dynamic electrocute_act( dynamic shock_damage = null, dynamic source = null, double? base_siemens_coeff = null, bool? def_zone = null ) {
			base_siemens_coeff = base_siemens_coeff ?? 1;

			return 0;
		}

		// Function from file: living.dm
		public virtual bool can_inject( Mob user = null, dynamic error_msg = null, string target_zone = null ) {
			return true;
		}

		// Function from file: living.dm
		public void setMaxHealth( dynamic newMaxHealth = null ) {
			this.maxHealth = newMaxHealth;
			return;
		}

		// Function from file: living.dm
		public dynamic getMaxHealth(  ) {
			return this.maxHealth;
		}

		// Function from file: living.dm
		public bool setHalLoss( int amount = 0 ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.halloss = amount;
			return false;
		}

		// Function from file: living.dm
		public bool adjustHalLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.halloss = Num13.MinInt( Num13.MaxInt( ((int)( this.halloss + Convert.ToDouble( amount ) )), 0 ), Convert.ToInt32( this.maxHealth * 2 ) );
			return false;
		}

		// Function from file: living.dm
		public double getHalLoss(  ) {
			return this.halloss;
		}

		// Function from file: living.dm
		public bool setBrainLoss( int amount = 0 ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.brainloss = amount;
			return false;
		}

		// Function from file: living.dm
		public bool adjustBrainLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.brainloss = Num13.MinInt( Num13.MaxInt( ((int)( this.brainloss + Convert.ToDouble( amount ) )), 0 ), Convert.ToInt32( this.maxHealth * 2 ) );
			return false;
		}

		// Function from file: living.dm
		public virtual int getBrainLoss(  ) {
			return this.brainloss;
		}

		// Function from file: living.dm
		public bool setCloneLoss( int amount = 0 ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.cloneloss = amount;
			return false;
		}

		// Function from file: living.dm
		public virtual bool adjustCloneLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.cloneloss = Num13.MinInt( Num13.MaxInt( ((int)( this.cloneloss + Convert.ToDouble( amount ) )), 0 ), Convert.ToInt32( this.maxHealth * 2 ) );
			return false;
		}

		// Function from file: living.dm
		public int getCloneLoss(  ) {
			return this.cloneloss;
		}

		// Function from file: living.dm
		public virtual bool adjustFireLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.fireloss = Num13.MinInt( Num13.MaxInt( ((int)( this.fireloss + Convert.ToDouble( amount ) )), 0 ), Convert.ToInt32( this.maxHealth * 2 ) );
			return false;
		}

		// Function from file: living.dm
		public virtual double getFireLoss(  ) {
			return this.fireloss;
		}

		// Function from file: living.dm
		public bool setToxLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.toxloss = amount;
			return false;
		}

		// Function from file: living.dm
		public virtual bool adjustToxLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.toxloss = Num13.MinInt( Num13.MaxInt( Convert.ToInt32( this.toxloss + amount ), 0 ), Convert.ToInt32( this.maxHealth * 2 ) );
			return false;
		}

		// Function from file: living.dm
		public dynamic getToxLoss(  ) {
			return this.toxloss;
		}

		// Function from file: living.dm
		public bool setOxyLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.oxyloss = amount;
			return false;
		}

		// Function from file: living.dm
		public bool adjustOxyLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.oxyloss = Num13.MinInt( Num13.MaxInt( Convert.ToInt32( this.oxyloss + amount ), 0 ), Convert.ToInt32( this.maxHealth * 2 ) );
			return false;
		}

		// Function from file: living.dm
		public dynamic getOxyLoss(  ) {
			return this.oxyloss;
		}

		// Function from file: living.dm
		public virtual bool adjustBruteLoss( dynamic amount = null, string damage_type = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.bruteloss = Num13.MinInt( Num13.MaxInt( ((int)( this.bruteloss + Convert.ToDouble( amount ) )), 0 ), Convert.ToInt32( this.maxHealth * 2 ) );
			return false;
		}

		// Function from file: living.dm
		public virtual double getBruteLoss(  ) {
			return this.bruteloss;
		}

		// Function from file: living.dm
		public dynamic adjustBodyTemp( dynamic actual = null, dynamic desired = null, dynamic incrementboost = null ) {
			dynamic temperature = null;
			double difference = 0;
			double increments = 0;
			double change = 0;

			temperature = actual;
			difference = Math.Abs( Convert.ToDouble( actual - desired ) );
			increments = difference / 10;
			change = increments * Convert.ToDouble( incrementboost );

			if ( Convert.ToDouble( actual ) < Convert.ToDouble( desired ) ) {
				temperature += change;

				if ( Convert.ToDouble( actual ) > Convert.ToDouble( desired ) ) {
					temperature = desired;
				}
			}

			if ( Convert.ToDouble( actual ) > Convert.ToDouble( desired ) ) {
				temperature -= change;

				if ( Convert.ToDouble( actual ) < Convert.ToDouble( desired ) ) {
					temperature = desired;
				}
			}
			return temperature;
		}

		// Function from file: living.dm
		public bool burn_skin( double burn_amount = 0 ) {
			Mob_Living H = null;
			double divided_damage = 0;
			bool extradam = false;
			Organ_External affecting = null;
			Mob_Living M = null;

			
			if ( this is Mob_Living_Carbon_Human ) {
				
				if ( this.mutations.Contains( 109 ) ) {
					return false;
				}

				if ( this.mutations.Contains( 106 ) ) {
					return false;
				}
				H = this;
				divided_damage = burn_amount / ((dynamic)H).organs.len;
				extradam = false;

				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)H).organs, typeof(Organ_External) )) {
					affecting = _a;
					

					if ( !( affecting != null ) ) {
						continue;
					}

					if ( affecting.take_damage( 0, divided_damage + ( extradam ?1:0) ) ) {
						H.UpdateDamageIcon();
					}
				}
				H.updatehealth();
				return true;
			} else if ( this is Mob_Living_Carbon_Monkey ) {
				
				if ( this.mutations.Contains( 106 ) ) {
					return false;
				}
				M = this;
				M.adjustFireLoss( burn_amount );
				M.updatehealth();
				return true;
			} else if ( this is Mob_Living_Silicon_Ai ) {
				return false;
			}
			return false;
		}

		// Function from file: living.dm
		public virtual dynamic calculate_affecting_pressure( dynamic pressure = null ) {
			return 0;
		}

		// Function from file: living.dm
		public virtual void updatehealth(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				this.health = this.maxHealth;
				this.stat = 0;
			} else if ( !Lang13.Bool( this.flags & 128 ) ) {
				this.health = this.maxHealth - this.getOxyLoss() - this.getToxLoss() - this.getFireLoss() - this.getBruteLoss() - this.getCloneLoss() - this.halloss;
			}
			return;
		}

		// Function from file: handle_hypothermia.dm
		public void handle_hypothermia(  ) {
			
			switch ((int)( this.undergoing_hypothermia() )) {
				case 1:
					
					if ( Rand13.PercentChance( 15 ) && !this.is_vessel_dilated() ) {
						
						if ( Rand13.PercentChance( 75 ) ) {
							GlobalFuncs.to_chat( this, "<b>" + Rand13.PickFromTable( GlobalVars.coldwarning_light ) + "</b>" );
						} else {
							GlobalFuncs.to_chat( this, "<span class='danger'>" + Rand13.PickFromTable( GlobalVars.coldwarning_hard ) + "</span>" );
						}
					}

					if ( Rand13.PercentChance( 25 ) ) {
						this.jitteriness = Num13.MinInt( this.jitteriness + 15, 30 );
					}
					break;
				case 2:
					
					if ( Rand13.PercentChance( 15 ) && !this.is_vessel_dilated() ) {
						
						if ( Rand13.PercentChance( 25 ) ) {
							GlobalFuncs.to_chat( this, "<b>" + Rand13.PickFromTable( GlobalVars.coldwarning_light ) + "</b>" );
						} else {
							GlobalFuncs.to_chat( this, "<span class='danger'>" + Rand13.PickFromTable( GlobalVars.coldwarning_hard ) + "</span>" );
						}
					}
					this.burn_calories( 0.2 );

					if ( Rand13.PercentChance( 2 ) && Lang13.Bool( this.get_active_hand() ) ) {
						GlobalFuncs.to_chat( this, new Txt( "<span class='warning'>You lose your grip of " ).the( this.get_active_hand() ).item().str( ", and it slides out of your hand!</span>" ).ToString() );
						this.drop_item();
					}

					if ( Rand13.PercentChance( 1 ) ) {
						GlobalFuncs.to_chat( this, "<span class='warning'>Your legs buckle underneath you, and you collapse!</span>" );
						this.emote( "collapse" );
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.adjustOxyLoss( 5 );
					}
					break;
				case 4:
					
					if ( Rand13.PercentChance( 25 ) ) {
						this.adjustOxyLoss( 5 );
					}
					break;
			}
			return;
		}

		// Function from file: handle_hypothermia.dm
		public dynamic get_skin_temperature(  ) {
			dynamic skin_temperature = null;
			double modifier = 0;

			skin_temperature = this.bodytemperature - 273.41;
			modifier = 081;

			if ( !this.is_vessel_dilated() ) {
				modifier -= this.undergoing_hypothermia() * 0.2;
			}
			skin_temperature *= modifier;
			skin_temperature += 273.41;
			return skin_temperature;
		}

		// Function from file: handle_hypothermia.dm
		public bool is_vessel_dilated(  ) {
			dynamic blood = null;
			Reagent chem = null;

			
			if ( !Lang13.Bool( this.reagents ) ) {
				return false;
			}
			blood = this.reagents;

			if ( Lang13.Bool( blood.reagent_list ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( blood.reagent_list, typeof(Reagent) )) {
					chem = _a;
					

					if ( chem is Reagent_Ethanol ) {
						return true;
					}

					if ( chem is Reagent_Capsaicin ) {
						return true;
					}
				}
			}

			if ( this.undergoing_hypothermia() == 2 && Convert.ToDouble( this.bodytemperature ) < 29 ) {
				return true;
			}
			return false;
		}

		// Function from file: handle_hypothermia.dm
		public virtual int undergoing_hypothermia(  ) {
			dynamic body_temp_celcius = null;

			
			if ( ( this.status_flags & 4096 ) != 0 || Lang13.Bool( this.flags & 128 ) || this.loc is Obj_Machinery_Atmospherics_Unary_CryoCell ) {
				return 0;
			}
			body_temp_celcius = this.bodytemperature - 273.41;

			dynamic _a = body_temp_celcius; // Was a switch-case, sorry for the mess.
			if ( 32<=_a&&_a<=35 ) {
				return 1;
			} else if ( 28<=_a&&_a<=32 ) {
				return 2;
			} else if ( 24<=_a&&_a<=28 ) {
				return 3;
			} else if ( -273.41<=_a&&_a<=24 ) {
				return 4;
			}
			return 0;
		}

		// Function from file: death.dm
		public void init_butchering_list(  ) {
			dynamic L = null;
			dynamic butchering_type = null;

			
			if ( this.species_type != null && ( !( this.butchering_drops != null ) || !( this.butchering_drops.len != 0 ) ) ) {
				
				if ( Lang13.Bool( GlobalVars.animal_butchering_products[this.species_type] ) ) {
					L = GlobalVars.animal_butchering_products[this.species_type];
					this.butchering_drops = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( L )) {
						butchering_type = _a;
						
						this.butchering_drops.Add( Lang13.Call( butchering_type ) );
					}
				}
			}
			return;
		}

		// Function from file: damage_procs.dm
		public bool apply_effects( int? stun = null, int? weaken = null, bool? paralyze = null, int? irradiate = null, int? stutter = null, int? eyeblur = null, bool? drowsy = null, int? agony = null, int? blocked = null ) {
			stun = stun ?? 0;
			weaken = weaken ?? 0;
			paralyze = paralyze ?? false;
			irradiate = irradiate ?? 0;
			stutter = stutter ?? 0;
			eyeblur = eyeblur ?? 0;
			drowsy = drowsy ?? false;
			agony = agony ?? 0;
			blocked = blocked ?? 0;

			
			if ( ( blocked ??0) >= 2 ) {
				return false;
			}

			if ( Lang13.Bool( stun ) ) {
				this.apply_effect( stun, "stun", blocked );
			}

			if ( Lang13.Bool( weaken ) ) {
				this.apply_effect( weaken, "weaken", blocked );
			}

			if ( paralyze == true ) {
				this.apply_effect( paralyze, "paralize", blocked );
			}

			if ( Lang13.Bool( irradiate ) ) {
				this.apply_effect( irradiate, "irradiate", blocked );
			}

			if ( Lang13.Bool( stutter ) ) {
				this.apply_effect( stutter, "stutter", blocked );
			}

			if ( Lang13.Bool( eyeblur ) ) {
				this.apply_effect( eyeblur, "eye_blur", blocked );
			}

			if ( drowsy == true ) {
				this.apply_effect( drowsy, "drowsy", blocked );
			}

			if ( Lang13.Bool( agony ) ) {
				this.apply_effect( agony, "agony", blocked );
			}
			return true;
		}

		// Function from file: damage_procs.dm
		public virtual dynamic apply_effect( dynamic effect = null, dynamic effecttype = null, int? blocked = null ) {
			effect = effect ?? 0;
			effecttype = effecttype ?? "stun";
			blocked = blocked ?? 0;

			dynamic altered = null;

			
			if ( !Lang13.Bool( effect ) || ( blocked ??0) >= 2 ) {
				return 0;
			}
			altered = 0;

			dynamic _a = effecttype; // Was a switch-case, sorry for the mess.
			if ( _a=="stun" ) {
				altered = effect / ( ( blocked ??0) + 1 );
				this.Stun( altered );
			} else if ( _a=="weaken" ) {
				altered = effect / ( ( blocked ??0) + 1 );
				this.Weaken( altered );
			} else if ( _a=="paralize" ) {
				altered = effect / ( ( blocked ??0) + 1 );
				this.Paralyse( altered );
			} else if ( _a=="agony" ) {
				altered = effect;
				this.halloss += Convert.ToDouble( altered );
			} else if ( _a=="irradiate" ) {
				altered = Num13.MaxInt( Convert.ToInt32( ( effect - effect * ( this.getarmor( null, "rad" ) / 100 ) ) / ( ( blocked ??0) + 1 ) ), 0 );
				this.radiation += Convert.ToDouble( altered );
			} else if ( _a=="stutter" ) {
				
				if ( ( this.status_flags & 1 ) != 0 ) {
					altered = Num13.MaxInt( Convert.ToInt32( this.stuttering ), Convert.ToInt32( effect / ( ( blocked ??0) + 1 ) ) );
					this.stuttering = altered;
				}
			} else if ( _a=="eye_blur" ) {
				altered = Num13.MaxInt( Convert.ToInt32( this.eye_blurry ), Convert.ToInt32( effect / ( ( blocked ??0) + 1 ) ) );
				this.eye_blurry = altered;
			} else if ( _a=="drowsy" ) {
				altered = Num13.MaxInt( Convert.ToInt32( this.drowsyness ), Convert.ToInt32( effect / ( ( blocked ??0) + 1 ) ) );
				this.drowsyness = altered;
			}
			this.updatehealth();
			return altered;
		}

		// Function from file: damage_procs.dm
		public bool apply_damages( int? brute = null, int? burn = null, int? tox = null, int? oxy = null, bool? clone = null, bool? halloss = null, dynamic def_zone = null, int? blocked = null ) {
			brute = brute ?? 0;
			burn = burn ?? 0;
			tox = tox ?? 0;
			oxy = oxy ?? 0;
			clone = clone ?? false;
			halloss = halloss ?? false;
			blocked = blocked ?? 0;

			
			if ( ( blocked ??0) >= 2 ) {
				return false;
			}

			if ( Lang13.Bool( brute ) ) {
				this.apply_damage( brute, "brute", def_zone, blocked );
			}

			if ( Lang13.Bool( burn ) ) {
				this.apply_damage( burn, "fire", def_zone, blocked );
			}

			if ( Lang13.Bool( tox ) ) {
				this.apply_damage( tox, "tox", def_zone, blocked );
			}

			if ( Lang13.Bool( oxy ) ) {
				this.apply_damage( oxy, "oxy", def_zone, blocked );
			}

			if ( clone == true ) {
				this.apply_damage( clone, "clone", def_zone, blocked );
			}

			if ( halloss == true ) {
				this.apply_damage( halloss, "halloss", def_zone, blocked );
			}
			return true;
		}

		// Function from file: damage_procs.dm
		public virtual bool apply_damage( dynamic damage = null, dynamic damagetype = null, dynamic def_zone = null, dynamic blocked = null, dynamic sharp = null, dynamic edge = null, dynamic used_weapon = null ) {
			damage = damage ?? 0;
			damagetype = damagetype ?? "brute";
			blocked = blocked ?? 0;

			
			if ( !Lang13.Bool( damage ) || Convert.ToDouble( blocked ) >= 2 ) {
				return false;
			}

			dynamic _a = damagetype; // Was a switch-case, sorry for the mess.
			if ( _a=="brute" ) {
				this.adjustBruteLoss( damage / ( blocked + 1 ) );
			} else if ( _a=="fire" ) {
				
				if ( this.mutations.Contains( 106 ) ) {
					damage = 0;
				}
				this.adjustFireLoss( damage / ( blocked + 1 ) );
			} else if ( _a=="tox" ) {
				this.adjustToxLoss( damage / ( blocked + 1 ) );
			} else if ( _a=="oxy" ) {
				this.adjustOxyLoss( damage / ( blocked + 1 ) );
			} else if ( _a=="clone" ) {
				this.adjustCloneLoss( damage / ( blocked + 1 ) );
			} else if ( _a=="halloss" ) {
				this.adjustHalLoss( damage / ( blocked + 1 ) );
			}
			this.updatehealth();
			return true;
		}

		// Function from file: thermoregulation.dm
		public dynamic get_loc_temp( GasMixture environment = null ) {
			dynamic loc_temp = null;
			Ent_Static M = null;
			Ent_Static S = null;
			Ent_Static CC = null;

			
			if ( !( environment != null ) ) {
				environment = this.loc.return_air();
			}
			loc_temp = 273.41;

			if ( this.loc is Obj_Mecha ) {
				M = this.loc;
				loc_temp = ((dynamic)M).return_temperature();
			}

			if ( this.loc is Obj_Spacepod ) {
				S = this.loc;
				loc_temp = ((dynamic)S).return_temperature();
			} else if ( this.loc is Obj_Machinery_Atmospherics_Unary_CryoCell ) {
				CC = this.loc;
				loc_temp = ((dynamic)CC).air_contents.temperature;
			} else {
				loc_temp = environment.temperature;
			}
			return loc_temp;
		}

		// Function from file: thermoregulation.dm
		public virtual int get_cold_protection( dynamic thermal_protection_flags = null ) {
			return 0;
		}

		// Function from file: thermoregulation.dm
		public virtual int get_heat_protection_flags( dynamic temperature = null ) {
			return 0;
		}

		// Function from file: thermoregulation.dm
		public virtual int get_heat_protection( int thermal_protection_flags = 0 ) {
			return 0;
		}

		// Function from file: thermoregulation.dm
		public int get_thermal_protection( int thermal_protection_flags = 0 ) {
			double thermal_protection = 0;

			thermal_protection = 0;

			if ( thermal_protection_flags != 0 ) {
				
				if ( ( thermal_protection_flags & 1 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 2048 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 4096 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 2 ) != 0 ) {
					thermal_protection += 0.15;
				}

				if ( ( thermal_protection_flags & 4 ) != 0 ) {
					thermal_protection += 0.15;
				}

				if ( ( thermal_protection_flags & 8 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 16 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 32 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 64 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 128 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 256 ) != 0 ) {
					thermal_protection += 0.075;
				}

				if ( ( thermal_protection_flags & 512 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 1024 ) != 0 ) {
					thermal_protection += 0.025;
				}

				if ( ( thermal_protection_flags & 8192 ) != 0 ) {
					thermal_protection += 0.075;
				}
			}
			return Num13.MinInt( 1, ((int)( thermal_protection )) );
		}

		// Function from file: thermoregulation.dm
		public virtual int get_thermal_protection_flags(  ) {
			return 0;
		}

		// Function from file: thermoregulation.dm
		public double get_thermal_loss( GasMixture environment = null ) {
			dynamic loc_temp = null;
			double thermal_loss = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 || Lang13.Bool( this.flags & 128 ) ) {
				return 0;
			}

			if ( !( environment != null ) ) {
				environment = this.loc.return_air();
			}
			loc_temp = this.get_loc_temp( environment );

			if ( Convert.ToDouble( loc_temp ) < Convert.ToDouble( this.bodytemperature ) ) {
				thermal_loss = 1 - this.get_cold_protection();

				if ( Convert.ToDouble( environment.total_moles ) > 103.93377685546875 || false ) {
					thermal_loss *= Convert.ToDouble( environment.total_moles / 103.93377685546875 );
				}
				thermal_loss *= Convert.ToDouble( this.get_skin_temperature() - loc_temp );
				thermal_loss /= 150;
				return thermal_loss;
			}
			return 0;
		}

		// Function from file: thermoregulation.dm
		public bool sweat( int amount = 0, bool? forcesweat = null ) {
			forcesweat = forcesweat ?? false;

			Mob_Living H = null;
			double sustenance = 0;
			int heatmodifier = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 || Lang13.Bool( this.flags & 128 ) ) {
				return true;
			}

			if ( this is Mob_Living_Carbon_Human ) {
				H = this;

				if ( !((dynamic)H).species.has_sweat_glands ) {
					return true;
				}
			}

			if ( forcesweat == true && GlobalVars.ticker != null && GlobalVars.ticker.hardcore_mode ) {
				forcesweat = false;
			}
			sustenance = amount / 50;

			if ( this.nutrition - sustenance > 0 || forcesweat == true ) {
				heatmodifier = 1;
				this.nutrition = Num13.MaxInt( ((int)( this.nutrition - sustenance )), 0 );

				if ( this.mutations.Contains( 6 ) ) {
					heatmodifier = heatmodifier * 2;
				}
				this.bodytemperature -= amount * heatmodifier;
				return true;
			} else {
				return false;
			}
		}

		// Function from file: thermoregulation.dm
		public bool burn_calories( double amount = 0, bool? forceburn = null ) {
			forceburn = forceburn ?? false;

			double heatmodifier = 0;

			
			if ( ( this.status_flags & 4096 ) != 0 || Lang13.Bool( this.flags & 128 ) ) {
				return true;
			}

			if ( forceburn == true && GlobalVars.ticker != null && GlobalVars.ticker.hardcore_mode ) {
				forceburn = false;
			}

			if ( this.nutrition - amount > 0 || forceburn == true ) {
				heatmodifier = 061;
				this.nutrition = Num13.MaxInt( ((int)( this.nutrition - amount )), 0 );

				if ( this.mutations.Contains( 6 ) ) {
					heatmodifier = heatmodifier * 2;
				}
				this.bodytemperature += amount * heatmodifier;
				return true;
			} else {
				return false;
			}
		}

		// Function from file: thermoregulation.dm
		public void handle_body_temperature(  ) {
			double body_temperature_difference = 0;
			int recovery_amt = 0;

			body_temperature_difference = Math.Abs( 310.41 - Convert.ToDouble( this.bodytemperature ) );

			if ( body_temperature_difference < 0.5 ) {
				return;
			}

			if ( this.undergoing_hypothermia() != 0 ) {
				this.handle_hypothermia();
			}

			if ( Convert.ToDouble( this.bodytemperature ) > 310.41 ) {
				recovery_amt = Num13.MinInt( ((int)( body_temperature_difference / 4 )), ((int)( 0.25 )) );
				this.sweat( recovery_amt, true );
			}
			return;
		}

		// Function from file: vampire.dm
		public void make_vampire(  ) {
			int? i = null;
			dynamic n = null;

			
			if ( !( this.mind != null ) ) {
				return;
			}

			if ( !( this.mind.vampire != null ) ) {
				this.mind.vampire = new Vampire( this.gender );
				this.mind.vampire.owner = this;
			}
			this.callOnLife.Add( new ByTable().Set( new Txt().Ref( this.mind.vampire ).ToString(), "OnLife" ) );
			this.verbs.Add( typeof(Client).GetMethod( "vampire_rejuvinate" ) );
			this.verbs.Add( typeof(Client).GetMethod( "vampire_hypnotise" ) );
			this.verbs.Add( typeof(Client).GetMethod( "vampire_glare" ) );
			i = null;
			i = 1;

			while (( i ??0) <= 3) {
				
				if ( !this.mind.vampire.powers.Contains( i ) ) {
					this.mind.vampire.powers.Add( i );
				}
				i++;
			}

			foreach (dynamic _b in Lang13.Enumerate( this.mind.vampire.powers )) {
				n = _b;
				

				dynamic _a = n; // Was a switch-case, sorry for the mess.
				if ( _a==4 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_shapeshift" ) );
				} else if ( _a==5 ) {
					continue;
				} else if ( _a==6 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_disease" ) );
				} else if ( _a==7 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_cloak" ) );
				} else if ( _a==8 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_bats" ) );
				} else if ( _a==9 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_screech" ) );
				} else if ( _a==10 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_jaunt" ) );
				} else if ( _a==12 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_shadowstep" ) );
				} else if ( _a==11 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_enthrall" ) );
				} else if ( _a==13 ) {
					continue;
				} else if ( _a==14 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_shadowmenace" ) );
				} else if ( _a==15 ) {
					continue;
				} else if ( _a==16 ) {
					this.verbs.Add( typeof(Client).GetMethod( "vampire_undeath" ) );
					this.verbs.Add( typeof(Client).GetMethod( "vampire_spawncape" ) );
				}
			}
			return;
		}

		// Function from file: ventcrawl.dm
		public void remove_ventcrawl(  ) {
			Image current_image = null;

			this.is_ventcrawling = false;
			this.candrop = true;

			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.pipes_shown, typeof(Image) )) {
					current_image = _a;
					
					this.client.images.Remove( current_image );
				}
				this.client.eye = this;
			}
			this.pipes_shown.len = 0;
			return;
		}

		// Function from file: ventcrawl.dm
		public void add_ventcrawl( dynamic starting_machine = null ) {
			dynamic network = null;
			Pipeline pipeline = null;
			Obj_Machinery_Atmospherics A = null;

			this.is_ventcrawling = true;
			this.candrop = false;
			network = starting_machine.return_network( starting_machine );

			if ( !Lang13.Bool( network ) ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( network.line_members, typeof(Pipeline) )) {
				pipeline = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( pipeline.members != null || pipeline.edges != null, typeof(Obj_Machinery_Atmospherics) )) {
					A = _a;
					

					if ( !( A.pipe_image != null ) ) {
						A.pipe_image = new Image( A, A.loc, null, 20, A.dir );
					}
					this.pipes_shown.Add( A.pipe_image );
					this.client.images.Add( A.pipe_image );
				}
			}
			return;
		}

		// Function from file: ventcrawl.dm
		public void handle_ventcrawl( dynamic clicked_on = null ) {
			dynamic vent_found = null;
			Obj_Machinery_Atmospherics machine = null;

			GlobalVars.diary.WriteMsg( "" + this + " is ventcrawling." );

			if ( !Lang13.Bool( this.stat ) ) {
				
				if ( !( this.lying == true ) ) {
					
					if ( Lang13.Bool( clicked_on ) && this.Adjacent( clicked_on ) ) {
						vent_found = clicked_on;

						if ( !( vent_found is Obj_Machinery_Atmospherics_Unary ) || !((Obj_Machinery_Atmospherics)vent_found).can_crawl_through() ) {
							vent_found = null;
						}
					}

					if ( !Lang13.Bool( vent_found ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 1 ), typeof(Obj_Machinery_Atmospherics) )) {
							machine = _a;
							

							if ( GlobalFuncs.is_type_in_list( machine, GlobalVars.ventcrawl_machinery ) ) {
								vent_found = machine;
							}

							if ( !((Obj_Machinery_Atmospherics)vent_found).can_crawl_through() ) {
								vent_found = null;
							}

							if ( Lang13.Bool( vent_found ) ) {
								break;
							}
						}
					}

					if ( Lang13.Bool( vent_found ) ) {
						
						if ( Lang13.Bool( vent_found.network ) && ( vent_found.network.normal_members.len != 0 || vent_found.network.line_members.len != 0 ) ) {
							GlobalFuncs.to_chat( this, "You begin climbing into the ventilation system..." );

							if ( Lang13.Bool( vent_found.air_contents ) && !( this is Mob_Living_Silicon ) ) {
								
								dynamic _b = vent_found.air_contents.temperature; // Was a switch-case, sorry for the mess.
								if ( 0<=_b&&_b<=220.41 ) {
									GlobalFuncs.to_chat( this, "<span class='danger'>You feel a painful freeze coming from the vent!</span>" );
								} else if ( 220.41<=_b&&_b<=273.41 ) {
									GlobalFuncs.to_chat( this, "<span class='warning'>You feel an icy chill coming from the vent.</span>" );
								} else if ( 313.41<=_b&&_b<=360.41 ) {
									GlobalFuncs.to_chat( this, "<span class='warning'>You feel a hot wash coming from the vent.</span>" );
								} else if ( 360.41<=_b&&_b<=Double.PositiveInfinity ) {
									GlobalFuncs.to_chat( this, "<span class='danger'>You feel a searing heat coming from the vent!</span>" );
								}

								dynamic _c = vent_found.air_contents.pressure; // Was a switch-case, sorry for the mess.
								if ( 0<=_c&&_c<=20 ) {
									GlobalFuncs.to_chat( this, "<span class='danger'>You feel a rushing draw pulling you into the vent!</span>" );
								} else if ( 20<=_c&&_c<=50 ) {
									GlobalFuncs.to_chat( this, "<span class='warning'>You feel a strong drag pulling you into the vent.</span>" );
								} else if ( 325<=_c&&_c<=550 ) {
									GlobalFuncs.to_chat( this, "<span class='warning'>You feel a strong current pushing you away from the vent.</span>" );
								} else if ( 550<=_c&&_c<=Double.PositiveInfinity ) {
									GlobalFuncs.to_chat( this, "<span class='danger'>You feel a roaring wind pushing you away from the vent!</span>" );
								}
							}

							if ( !GlobalFuncs.do_after( this, vent_found, 45, null, false ) ) {
								return;
							}

							if ( !( this.client != null ) ) {
								return;
							}

							if ( !this.ventcrawl_carry() ) {
								return;
							}
							this.visible_message( "<B>" + this + " scrambles into the ventilation ducts!</B>", "You climb into the ventilation system." );
							this.forceMove( vent_found );
							this.add_ventcrawl( vent_found );
						} else {
							GlobalFuncs.to_chat( this, "This vent is not connected to anything." );
						}
					} else {
						GlobalFuncs.to_chat( this, "You must be standing on or beside an air vent to enter it." );
					}
				} else {
					GlobalFuncs.to_chat( this, "You can't vent crawl while you're stunned!" );
				}
			} else {
				GlobalFuncs.to_chat( this, "You must be conscious to do this!" );
			}
			return;
		}

		// Function from file: ventcrawl.dm
		public virtual bool ventcrawl_carry(  ) {
			Ent_Static A = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Static) )) {
				A = _a;
				

				if ( !GlobalFuncs.isInTypes( A, this.canEnterVentWith ) ) {
					GlobalFuncs.to_chat( this, "<SPAN CLASS='warning'>You can't be carrying items or have items equipped when vent crawling!</SPAN>" );
					return false;
				}
			}
			return true;
		}

		// Function from file: ventcrawl.dm
		public virtual bool can_ventcrawl(  ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public override void RestrainedClickOn( Ent_Static A = null ) {
			return;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool proximity_flag = false, string _params = null ) {
			
			if ( A is Mob ) {
				this.delayNextAttack( 10 );
			}
			A.attack_animal( this );
			return;
		}

		// Function from file: item_attack.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			((Mob)b).delayNextAttack( 10 );

			if ( a is Obj_Item && b is Mob ) {
				((Obj_Item)a).attack( this, b );
			}
			return null;
		}

		// Function from file: click.dm
		public override void LaserEyes( Ent_Static A = null ) {
			dynamic T = null;
			dynamic U = null;
			Game_Data LE = null;

			this.delayNextAttack( 4 );
			T = GlobalFuncs.get_turf( this );
			U = GlobalFuncs.get_turf( A );
			LE = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Beam), this.loc );
			((dynamic)LE).icon = "icons/effects/genetics.dmi";
			((dynamic)LE).icon_state = "eyelasers";
			GlobalFuncs.playsound( Task13.User.loc, "sound/weapons/taser2.ogg", 75, 1 );
			((dynamic)LE).firer = this;
			((dynamic)LE).def_zone = this.get_organ_target();
			((dynamic)LE).original = A;
			((dynamic)LE).current = T;
			((dynamic)LE).yo = U.y - T.y;
			((dynamic)LE).xo = U.x - T.x;
			((dynamic)LE).starting = T;
			((dynamic)LE).original = A;
			((dynamic)LE).target = U;
			Task13.Schedule( 1, (Task13.Closure)(() => {
				((Obj_Item_Projectile)LE).OnFired();
				((Obj)LE).process();
				return;
			}));
			return;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( name: "Point To", group: "Object" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public override bool pointed( dynamic A = null ) {
			
			if ( this.incapacitated() ) {
				return false;
			}

			if ( !base.pointed( (object)(A) ) ) {
				return false;
			}
			Task13.User.visible_message( "<b>" + this + "</b> points to " + A );
			return true;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( name: "Pull", group: "Object" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void pulled( Ent_Static AM = null ) {
			
			if ( AM.Adjacent( this ) ) {
				this.start_pulling( AM );
			}
			return;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( name: "Rest", group: "IC" )]
		public void lay_down(  ) {
			this.resting = !( this.resting != 0 ) ?1:0;
			this.update_canmove();
			GlobalFuncs.to_chat( this, "<span class='notice'>You are now " + ( this.resting != 0 ? "resting" : "getting up" ) + "</span>" );
			return;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( name: "Resist", group: "IC" )]
		public void resist(  ) {
			Mob L = null;
			Ent_Static H = null;
			Ent_Static Location = null;
			Mob CM = null;
			Chain tether_datum = null;
			Obj_Item_Stickybomb B = null;
			Ent_Static B2 = null;
			Mob_Living H2 = null;
			Mob_Living_Carbon C = null;
			int resisting = 0;
			Obj O = null;
			Obj_Item_Weapon_Grab G = null;
			dynamic B3 = null;
			Mob C2 = null;
			int breakout_time = 0;
			Ent_Static C3 = null;
			Ent_Static SC = null;
			Ent_Static SC2 = null;
			Ent_Static SC3 = null;
			Ent_Static BD = null;
			Ent_Static BD2 = null;
			Mob CM2 = null;
			dynamic HC = null;
			int breakouttime = 0;
			dynamic HC2 = null;
			int breakouttime2 = 0;

			
			if ( !( Task13.User is Mob_Living ) || Task13.User.special_delayer.blocked() ) {
				return;
			}

			if ( this.on_resist is _Event ) {
				this.on_resist.Invoke( new ByTable() );
			}
			this.delayNext( 7, 20 );
			L = Task13.User;

			if ( this.loc is Obj_Item_Weapon_Holder ) {
				H = this.loc;
				this.loc = GlobalFuncs.get_turf( this.loc );

				if ( H.loc is Mob_Living ) {
					Location = H.loc;
					((dynamic)Location).drop_from_inventory( H );
				}
				GlobalFuncs.qdel( H );
				H = null;
				return;
			}

			if ( L.tether != null ) {
				CM = L;

				if ( !( CM is Mob_Living_Carbon ) || !Lang13.Bool( ((dynamic)CM).handcuffed ) ) {
					tether_datum = ((dynamic)L.tether).chain_datum;

					if ( tether_datum.extremity_B == this ) {
						L.visible_message( new Txt( "<span class='danger'>" ).the( L ).item().str( " quickly grabs and removes " ).the( L.tether ).item().str( " tethered to his body!</span>" ).ToString(), new Txt( "<span class='warning'>You quickly grab and remove " ).the( L.tether ).item().str( " tethered to your body.</span>" ).ToString() );
						L.tether = null;
						tether_datum.extremity_B = null;
						tether_datum.rewind_chain();
					}
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( L, typeof(Obj_Item_Stickybomb) )) {
				B = _a;
				

				if ( Lang13.Bool( B.stuck_to ) ) {
					L.visible_message( new Txt( "<span class='danger'>" ).the( L ).item().str( " is trying to reach and pull off " ).the( B ).item().str( " stuck on his body!</span>" ).ToString(), new Txt( "<span class='warning'>You reach for " ).the( B ).item().str( " stuck on your body and start pulling.</span>" ).ToString() );

					if ( GlobalFuncs.do_after( L, this, 30, 10, GlobalVars.FALSE ) ) {
						L.visible_message( new Txt( "<span class='danger'>After struggling for an instant, " ).the( L ).item().str( " manages unstick " ).the( B ).item().str( " from his body!</span>" ).ToString(), "<span class='warning'>It came off!</span>" );
						L.put_in_hands( B );
						B.unstick( false );
					} else {
						GlobalFuncs.to_chat( L, new Txt( "<span class='warning'>You need to stop moving around while you try to get a hold of " ).the( B ).item().str( "!</span>" ).ToString() );
					}
					return;
				} else {
					continue;
				}
			}

			if ( this.loc is Mob_Living_SimpleAnimal_Borer ) {
				B2 = this.loc;
				H2 = this;
				H2.simple_message( "<span class='danger'>You begin doggedly resisting the parasite's control (this will take approximately sixty seconds).</span>", "<span class='danger'>You attempt to remember who you are and how the heck did you get here (this will probably take a while).</span>" );
				GlobalFuncs.to_chat( ((dynamic)B2).host, "<span class='danger'>You feel the captive mind of " + this + " begin to resist your control.</span>" );
				Task13.Schedule( Rand13.Int( 350, 450 ) + ((dynamic)B2).host.brainloss, (Task13.Closure)(() => {
					
					if ( !( B2 != null ) || !Lang13.Bool( ((dynamic)B2).controlling ) ) {
						return;
					}
					((Mob_Living)((dynamic)B2).host).adjustBrainLoss( Rand13.Int( 5, 10 ) );
					H2.simple_message( "<span class='danger'>With an immense exertion of will, you regain control of your body!</span>" );
					GlobalFuncs.to_chat( ((dynamic)B2).host, "<span class='danger'>You feel control of the host brain ripped from your grasp, and retract your probosci before the wild neural impulses can damage you.</span>" );
					C = ((dynamic)B2).host;
					C.do_release_control( false );
					return;
					return;
				}));
			}

			if ( !Lang13.Bool( L.stat ) && L.canmove && !L.restrained() ) {
				resisting = 0;

				foreach (dynamic _b in Lang13.Enumerate( L.requests, typeof(Obj) )) {
					O = _b;
					
					L.requests.Remove( O );
					GlobalFuncs.qdel( O );
					O = null;
					resisting++;
				}

				foreach (dynamic _c in Lang13.Enumerate( Task13.User.grabbed_by, typeof(Obj_Item_Weapon_Grab) )) {
					G = _c;
					
					resisting++;

					if ( G.state == 1 ) {
						GlobalFuncs.returnToPool( G );
					} else if ( G.state == 2 ) {
						
						if ( Rand13.PercentChance( 25 ) ) {
							L.visible_message( "<span class='danger'>" + L + " has broken free of " + G.assailant + "'s grip!</span>", null, null, "<span class='danger'>" + L + " has broken free of " + G.assailant + "'s hug!</span>" );
							GlobalFuncs.returnToPool( G );
						}
					} else if ( G.state == 3 ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							L.visible_message( "<span class='danger'>" + L + " has broken free of " + G.assailant + "'s headlock!</span>", null, null, "<span class='danger'>" + L + " has broken free of " + G.assailant + "'s passionate hug!</span>" );
							GlobalFuncs.returnToPool( G );
						}
					}
				}

				if ( resisting != 0 ) {
					L.visible_message( "<span class='danger'>" + L + " resists!</span>" );
				}
			}

			if ( Lang13.Bool( L.locked_to ) && L.special_delayer.blocked() ) {
				
				if ( L.locked_to is Obj_Structure_Bed ) {
					B3 = L.locked_to;

					if ( L is Mob_Living_Carbon ) {
						C2 = L;

						if ( Lang13.Bool( ((dynamic)C2).handcuffed ) ) {
							C2.delayNextAttack( 100 );
							C2.delayNextSpecial( 100 );
							C2.visible_message( "<span class='warning'>" + C2 + " attempts to unbuckle themself!</span>", "<span class='warning'>You attempt to unbuckle yourself (this will take around two minutes, and you need to stay still).</span>", null, null, "<span class='warning'>You attempt to regain control of your legs (this will take a while).</span>" );
							Task13.Schedule( 0, (Task13.Closure)(() => {
								
								if ( GlobalFuncs.do_after( Task13.User, Task13.User, 1200 ) ) {
									
									if ( !Lang13.Bool( C2.locked_to ) ) {
										return;
									}
									C2.visible_message( "<span class='danger'>" + C2 + " manages to unbuckle themself!</span>", "<span class='notice'>You successfully unbuckle yourself.</span>", null, null, "<span class='notice'>You successfully regain control of your legs and stand up.</span>" );
									B3.manual_unbuckle( C2 );
								} else {
									C2.simple_message( "<span class='warning'>Your unbuckling attempt was interrupted.</span>", "<span class='warning'>Your attempt to regain control of your legs was interrupted. Damn it!</span>" );
								}
								return;
							}));
						}
					} else {
						B3.manual_unbuckle( L );
					}
				}
			}

			if ( this.loc != null && this.loc is Obj_Structure_Closet ) {
				breakout_time = 2;
				C3 = L.loc;

				if ( Lang13.Bool( ((dynamic)C3).opened ) ) {
					return;
				}

				if ( L.loc is Obj_Structure_Closet_SecureCloset ) {
					SC = L.loc;

					if ( !Lang13.Bool( ((dynamic)SC).locked ) && !Lang13.Bool( ((dynamic)SC).welded ) ) {
						return;
					}
				} else if ( !Lang13.Bool( ((dynamic)C3).welded ) ) {
					return;
				}
				L.delayNext( 7, 100 );
				L.visible_message( "<span class='danger'>The " + C3 + " begins to shake violenty!</span>", "<span class='warning'>You lean on the back of " + C3 + " and start pushing the door open (this will take about " + breakout_time + " minutes).</span>" );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( GlobalFuncs.do_after( Task13.User, this, breakout_time * 600 ) ) {
						
						if ( !( C3 != null ) || !( L != null ) || L.stat != 0 || L.loc != C3 || Lang13.Bool( ((dynamic)C3).opened ) ) {
							return;
						}

						if ( L.loc is Obj_Structure_Closet_SecureCloset ) {
							SC2 = L.loc;

							if ( !Lang13.Bool( ((dynamic)SC2).locked ) && !Lang13.Bool( ((dynamic)SC2).welded ) ) {
								return;
							}
						} else if ( !Lang13.Bool( ((dynamic)C3).welded ) ) {
							return;
						}

						if ( Task13.User.loc is Obj_Structure_Closet_SecureCloset ) {
							SC3 = L.loc;
							SC3.desc = "It appears to be broken.";
							SC3.icon_state = ((dynamic)SC3).icon_off;
							Icon13.Flick( ((dynamic)SC3).icon_broken, SC3 );
							Task13.Sleep( 10 );
							Icon13.Flick( ((dynamic)SC3).icon_broken, SC3 );
							Task13.Sleep( 10 );
							((dynamic)SC3).broken = ((dynamic)SC3).locked;
							((dynamic)SC3).locked = 0;
							((dynamic)SC3).welded = 0;
							L.visible_message( "<span class='danger'>" + L + " successfully breaks out of " + SC3 + "!</span>", "<span class='notice'>You successfully break out!</span>" );

							if ( SC3.loc is Obj_Item_Delivery_Large ) {
								BD = SC3.loc;
								BD.attack_hand( Task13.User );
							}
							((dynamic)SC3).open();
						} else {
							((dynamic)C3).welded = 0;
							L.visible_message( "<span class='danger'>" + L + " successful breaks out of " + C3 + "!</span>", "<span class='notice'>You successfully break out!</span>" );

							if ( C3.loc is Obj_Item_Delivery_Large ) {
								BD2 = C3.loc;
								BD2.attack_hand( Task13.User );
							}
							((dynamic)C3).open();
						}
					}
					return;
				}));
			} else if ( L is Mob_Living_Carbon ) {
				CM2 = L;

				if ( CM2.on_fire && CM2.canmove ) {
					((dynamic)CM2).fire_stacks -= 5;
					CM2.weakened = 5;
					CM2.visible_message( "<span class='danger'>" + CM2 + " rolls on the floor, trying to put themselves out!</span>", "<span class='warning'>You stop, drop, and roll!</span>" );

					if ( this.fire_stacks <= 0 ) {
						CM2.visible_message( "<span class='danger'>" + CM2 + " has successfully extinguished themselves!</span>", "<span class='notice'>You extinguish yourself.</span>" );
						this.ExtinguishMob();
					}
					return;
				}

				if ( Lang13.Bool( ((dynamic)CM2).handcuffed ) && CM2.canmove && CM2.special_delayer.blocked() ) {
					CM2.delayNext( 7, 100 );

					if ( CM2 is Mob_Living_Carbon_Alien_Humanoid || Task13.User.mutations.Contains( 4 ) ) {
						CM2.visible_message( "<span class='danger'>" + CM2 + " is trying to break the handcuffs!</span>", "<span class='warning'>You attempt to break your handcuffs. (This will take around five seconds and you will need to stand still).</span>" );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							
							if ( GlobalFuncs.do_after( CM2, CM2, 50 ) ) {
								
								if ( !Lang13.Bool( ((dynamic)CM2).handcuffed ) || Lang13.Bool( CM2.locked_to ) ) {
									return;
								}
								CM2.visible_message( "<span class='danger'>" + CM2 + " manages to break the handcuffs!</span>", "<span class='notice'>You successfuly break your handcuffs.</span>" );
								CM2.say( Rand13.Pick(new object [] { ";RAAAAAAAARGH!", ";HNNNNNNNNNGGGGGGH!", ";GWAAAAAAAARRRHHH!", "NNNNNNNNGGGGGGGGHH!", ";AAAAAAARRRGH!" }) );
								GlobalFuncs.qdel( ((dynamic)CM2).handcuffed );
								((dynamic)CM2).handcuffed = null;
								CM2.update_inv_handcuffed();
							} else {
								GlobalFuncs.to_chat( CM2, "<span class='warning'>Your cuff breaking attempt was interrupted.</span>" );
							}
							return;
						}));
					} else {
						HC = ((dynamic)CM2).handcuffed;
						breakouttime = Convert.ToInt32( HC.breakouttime );

						if ( !( breakouttime != 0 ) ) {
							breakouttime = 1200;
						}
						CM2.visible_message( "<span class='danger'>" + CM2 + " attempts to remove " + HC + "!</span>", "<span class='warning'>You attempt to remove " + HC + " (this will take around " + breakouttime / 600 + " minutes and you need to stand still).</span>", null, null, "<span class='warning'>You attempt to regain control of your hands (this will take a while).</span>" );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							
							if ( GlobalFuncs.do_after( CM2, CM2, breakouttime ) ) {
								
								if ( !Lang13.Bool( ((dynamic)CM2).handcuffed ) || Lang13.Bool( CM2.locked_to ) ) {
									return;
								}
								CM2.visible_message( "<span class='danger'>" + CM2 + " manages to remove " + HC + "!</span>", "<span class='notice'>You successfuly remove " + HC + ".</span>", null, null, "<span class='notice'>You successfully regain control of your hands.</span>" );
								((dynamic)CM2).handcuffed.loc = Task13.User.loc;
								((dynamic)CM2).handcuffed = null;
								CM2.update_inv_handcuffed();
							} else {
								CM2.simple_message( "<span class='warning'>Your uncuffing attempt was interrupted.</span>", "<span class='warning'>Your attempt to regain control of your hands was interrupted. Damn it!</span>" );
							}
							return;
						}));
					}
				} else if ( Lang13.Bool( ((dynamic)CM2).legcuffed ) && CM2.canmove && CM2.special_delayer.blocked() ) {
					CM2.delayNext( 7, 100 );

					if ( CM2 is Mob_Living_Carbon_Alien_Humanoid || Task13.User.mutations.Contains( 4 ) ) {
						CM2.visible_message( "<span class='danger'>" + CM2 + " is trying to break the legcuffs!</span>", "<span class='warning'>You attempt to break your legcuffs. (This will take around five seconds and you need to stand still).</span>" );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							
							if ( GlobalFuncs.do_after( CM2, CM2, 50 ) ) {
								
								if ( !Lang13.Bool( ((dynamic)CM2).legcuffed ) || Lang13.Bool( CM2.locked_to ) ) {
									return;
								}
								CM2.visible_message( "<span class='danger'>" + CM2 + " manages to break the legcuffs!</span>", "<span class='notice'>You successfully break your legcuffs.</span>" );
								CM2.say( Rand13.Pick(new object [] { ";RAAAAAAAARGH!", ";HNNNNNNNNNGGGGGGH!", ";GWAAAAAAAARRRHHH!", "NNNNNNNNGGGGGGGGHH!", ";AAAAAAARRRGH!" }) );
								GlobalFuncs.qdel( ((dynamic)CM2).legcuffed );
								((dynamic)CM2).legcuffed = null;
								CM2.update_inv_legcuffed();
							} else {
								GlobalFuncs.to_chat( CM2, "<span class='warning'>Your legcuffing breaking attempt was interrupted.</span>" );
							}
							return;
						}));
					} else {
						HC2 = ((dynamic)CM2).legcuffed;
						breakouttime2 = Convert.ToInt32( HC2.breakouttime );

						if ( !( breakouttime2 != 0 ) ) {
							breakouttime2 = 1200;
						}
						CM2.visible_message( "<span class='danger'>" + CM2 + " attempts to remove " + HC2 + "!</span>", "<span class='warning'>You attempt to remove " + HC2 + ". (This will take around " + breakouttime2 / 600 + " minutes and you need to stand still).</span>" );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							
							if ( GlobalFuncs.do_after( CM2, CM2, breakouttime2 ) ) {
								
								if ( !Lang13.Bool( ((dynamic)CM2).legcuffed ) || Lang13.Bool( CM2.locked_to ) ) {
									return;
								}
								CM2.visible_message( "<span class='danger'>" + CM2 + " manages to remove " + HC2 + "!</span>", "<span class='notice'>You successfully remove " + HC2 + ".</span>" );
								((dynamic)CM2).legcuffed.loc = Task13.User.loc;
								((dynamic)CM2).legcuffed = null;
								CM2.update_inv_legcuffed();
							} else {
								GlobalFuncs.to_chat( CM2, "<span class='warning'>Your unlegcuffing attempt was interrupted.</span>" );
							}
							return;
						}));
					}
				}
			}
			return;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( hidden: true )]
		public void succumb(  ) {
			
			if ( Convert.ToDouble( this.health ) < 0 && Convert.ToDouble( this.health ) > -95 ) {
				this.attack_log.Add( "" + this + " has succumbed to death with " + this.health + " points of health!" );
				this.apply_damage( this.maxHealth + this.health + 5, "oxy" );
				this.health = 100 - Convert.ToDouble( this.getOxyLoss() ) - Convert.ToDouble( this.getToxLoss() ) - this.getFireLoss() - this.getBruteLoss();
				GlobalFuncs.to_chat( this, "<span class='info'>You have given up life and succumbed to death.</span>" );
			}
			return;
		}

		// Function from file: default_language.dm
		[Verb]
		[VerbInfo( name: "Check Default Language", group: "IC" )]
		public void check_default_language(  ) {
			
			if ( this.default_language != null ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>You are currently speaking " + this.default_language + " by default.</span>" );
			} else {
				GlobalFuncs.to_chat( this, "<span class='notice'>Your current default language is your species or mob type default.</span>" );
			}
			return;
		}

		// Function from file: default_language.dm
		[Verb]
		[VerbInfo( name: "Set Default Language", group: "IC" )]
		[VerbArg( 1, InputType.Null | InputType.Any, VerbArgFilter.FromMemberVar, "languages" )]
		public virtual void set_default_language( dynamic language = null ) {
			
			if ( Lang13.Bool( language ) ) {
				GlobalFuncs.to_chat( this, "<span class='notice'>You will now speak " + language + " if you do not specify a language when speaking.</span>" );
			} else {
				GlobalFuncs.to_chat( this, "<span class='notice'>You will now speak whatever your standard default language is if you do not specify one when speaking.</span>" );
			}
			this.default_language = language;
			return;
		}

		// Function from file: observer.dm
		[Verb]
		[VerbInfo( name: "Ghost", desc: "Relinquish your life and enter the land of the dead.", group: "OOC" )]
		public void ghost(  ) {
			string response = null;
			Mob_Dead_Observer ghost = null;

			
			if ( this.stat == 2 ) {
				this.ghostize( true );
			} else {
				response = Interface13.Alert( this, "Are you -sure- you want to ghost?\n(You are alive. If you ghost, you won't be able to play this round for another 30 minutes! You can't change your mind so choose wisely!)", "Are you sure you want to ghost?", "Ghost", "Stay in body" );

				if ( response != "Ghost" ) {
					return;
				}
				this.resting = 1;

				if ( this.client != null && Lang13.Bool( this.key ) ) {
					ghost = this.ghostize( false );
					ghost.timeofdeath = Game13.time;

					if ( ghost.client != null ) {
						ghost.client.time_died_as_mouse = Game13.time;
					}
				}
			}
			return;
		}

		// Function from file: mob.dm
		[Verb]
		[VerbInfo( name: "Pick up", group: "Object" )]
		[VerbArg( 1, InputType.Obj, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public virtual dynamic f_verb_pickup( Ent_Static I = null ) {
			this.face_atom( I );
			((dynamic)I).verb_pickup( this );
			return null;
		}

		// Function from file: language.dm
		[Verb]
		[VerbInfo( name: "Check Known Languages", group: "IC", access: VerbAccess.IsUser )]
		public override void check_languages(  ) {
			string dat = null;
			Language L = null;

			dat = "<b><font size = 5>Known Languages</font></b><br/><br/>";

			if ( this.default_language != null ) {
				dat += new Txt( "Current default language: " ).item( this.default_language ).str( " - <a href='byond://?src=" ).Ref( this ).str( ";default_lang=reset'>reset</a><br/><br/>" ).ToString();
			}

			foreach (dynamic _a in Lang13.Enumerate( this.languages, typeof(Language) )) {
				L = _a;
				

				if ( L == this.default_language ) {
					dat += new Txt( "<b>" ).item( L.name ).str( " (:" ).item( L.key ).str( ")</b> - default - <a href='byond://?src=" ).Ref( this ).str( ";default_lang=reset'>reset</a><br/>" ).item( L.desc ).str( "<br/><br/>" ).ToString();
				} else {
					dat += new Txt( "<b>" ).item( L.name ).str( " (:" ).item( L.key ).str( ")</b> - <a href='byond://?src=" ).Ref( this ).str( ";default_lang=" ).item( L ).str( "'>set default</a><br/>" ).item( L.desc ).str( "<br/><br/>" ).ToString();
				}
			}
			Interface13.Browse( this, dat, "window=checklanguage" );
			return;
		}

	}

}