// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living : Mob {

		public dynamic maxHealth = 100;
		public dynamic health = 100;
		public int bruteloss = 0;
		public dynamic oxyloss = 0;
		public dynamic toxloss = 0;
		public int fireloss = 0;
		public double cloneloss = 0;
		public int brainloss = 0;
		public dynamic staminaloss = 0;
		public double hallucination = 0;
		public int last_special = 0;
		public int incorporeal_move = 0;
		public ByTable surgeries = new ByTable();
		public bool now_pushing = false;
		public Obj_Item_Device_Multitool_AiDetect cameraFollow = null;
		public string tod = null;
		public bool on_fire = false;
		public double fire_stacks = 0;
		public int bloodcrawl = 0;
		public dynamic holder = null;
		public dynamic ventcrawler = 0;
		public bool floating = false;
		public int mob_size = 2;
		public double metabolism_efficiency = 1;
		public ByTable staticOverlays = new ByTable();
		public bool has_limbs = false;
		public ByTable pipes_shown = new ByTable();
		public dynamic last_played_vent = null;
		public int smoke_delay = 0;
		public ByTable say_log = new ByTable();
		public string bubble_icon = "default";
		public int last_bumped = 0;
		public bool unique_name = false;
		public ByTable butcher_results = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.see_invisible = 25;
		}

		// Function from file: living.dm
		public Mob_Living ( dynamic loc = null ) : base( (object)(loc) ) {
			Mob_Living_SimpleAnimal_Drone D = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.generateStaticOverlay();

			if ( this.staticOverlays.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_SimpleAnimal_Drone) )) {
					D = _a;
					

					if ( D != null && Lang13.Bool( D.seeStatic ) ) {
						
						if ( this.staticOverlays.Contains( D.staticChoice ) ) {
							D.staticOverlays.Or( this.staticOverlays[D.staticChoice] );
							D.client.images.Or( this.staticOverlays[D.staticChoice] );
						} else {
							D.staticOverlays.Or( this.staticOverlays["static"] );
							D.client.images.Or( this.staticOverlays["static"] );
						}
					}
				}
			}

			if ( this.unique_name ) {
				this.name = "" + this.name + " (" + Rand13.Int( 1, 1000 ) + ")";
				this.real_name = this.name;
			}
			this.faction |= new Txt().Ref( this ).ToString();
			return;
		}

		// Function from file: physical.dm
		public override int physical_can_use_topic( Game_Data src_object = null ) {
			return this.shared_living_ui_distance( src_object );
		}

		// Function from file: notcontained.dm
		public override int notcontained_can_use_topic( Game_Data src_object = null ) {
			
			if ( Lang13.Bool( ((dynamic)src_object).contains( this ) ) ) {
				return -1;
			}
			return this.default_can_use_topic( src_object );
		}

		// Function from file: hands.dm
		public override int hands_can_use_topic( Game_Data src_object = null ) {
			
			if ( GlobalFuncs.get_both_hands( this ).Contains( src_object ) ) {
				return 2;
			}
			return -1;
		}

		// Function from file: default.dm
		public override int default_can_use_topic( Game_Data src_object = null ) {
			int _default = 0;

			_default = this.shared_ui_interaction( src_object );

			if ( _default > -1 && this.loc != null ) {
				_default = Num13.MinInt( _default, this.loc.contents_ui_distance( src_object, this ) );
			}

			if ( _default == 2 ) {
				return 1;
			}
			return _default;
		}

		// Function from file: ventcrawling.dm
		public override Ent_Static update_pipe_vision( Obj_Machinery_Atmospherics new_loc = null ) {
			Ent_Static _default = null;

			_default = this.loc;

			if ( new_loc != null ) {
				_default = new_loc;
			}
			this.remove_ventcrawl();
			this.add_ventcrawl( _default );
			return _default;
		}

		// Function from file: say.dm
		public override string say_quote( dynamic input = null, dynamic spans = null ) {
			string tempinput = null;

			tempinput = GlobalFuncs.attach_spans( input, spans );

			if ( this.stuttering != 0 ) {
				return "stammers, \"" + tempinput + "\"";
			}

			if ( this.getBrainLoss() >= 60 ) {
				return "gibbers, \"" + tempinput + "\"";
			}
			return base.say_quote( (object)(input), (object)(spans) );
		}

		// Function from file: say.dm
		public override int lingcheck(  ) {
			
			if ( this.mind != null && this.mind.changeling != null ) {
				
				if ( this.mind.changeling.changeling_speak ) {
					return 2;
				}
				return 1;
			}
			return 0;
		}

		// Function from file: say.dm
		public override bool can_speak( dynamic message = null ) {
			
			if ( this.can_speak_basic( message ) && this.can_speak_vocal( message ) ) {
				return true;
			}
			return false;
		}

		// Function from file: say.dm
		public override void send_speech( dynamic message = null, double? range = null, dynamic source = null, string bubble_type = null, ByTable spans = null ) {
			range = range ?? 7;
			source = source ?? this;
			bubble_type = bubble_type ?? this.bubble_icon;

			ByTable listening = null;
			dynamic M = null;
			string rendered = null;
			Ent_Dynamic AM = null;
			ByTable speech_bubble_recipients = null;
			dynamic M2 = null;
			Image I = null;

			listening = GlobalFuncs.get_hearers_in_view( range, source );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( Convert.ToInt32( M.stat ) == 2 && Lang13.Bool( M.client ) && ( ( M.client.prefs.chat_toggles & 4 ) != 0 || Map13.GetDistance( M, this ) <= 7 ) && this.client != null ) {
					listening.Or( M );
				}
			}
			rendered = this.compose_message( this, this.languages, message, null, spans );

			foreach (dynamic _b in Lang13.Enumerate( listening, typeof(Ent_Dynamic) )) {
				AM = _b;
				
				AM.Hear( rendered, this, this.languages, message, null, spans );
			}
			speech_bubble_recipients = new ByTable();

			foreach (dynamic _c in Lang13.Enumerate( listening )) {
				M2 = _c;
				

				if ( Lang13.Bool( M2.client ) ) {
					speech_bubble_recipients.Add( M2.client );
				}
			}
			I = new Image( "icons/mob/talk.dmi", this, "" + bubble_type + GlobalFuncs.say_test( message ), 5 );
			I.appearance_flags = 30;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				GlobalFuncs.flick_overlay( I, speech_bubble_recipients, 30 );
				return;
			}));
			return;
		}

		// Function from file: say.dm
		public override string Hear( string message = null, dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null, ByTable spans = null ) {
			string deaf_message = null;
			int? deaf_type = null;

			
			if ( !( this.client != null ) ) {
				return null;
			}

			if ( speaker != this ) {
				
				if ( !Lang13.Bool( radio_freq ) ) {
					deaf_message = "<span class='name'>" + speaker + "</span> " + speaker.verb_say + " something but you cannot hear them.";
					deaf_type = 1;
				}
			} else {
				deaf_message = "<span class='notice'>You can't hear yourself!</span>";
				deaf_type = 2;
			}

			if ( !( ( message_langs & this.languages ) != 0 ) || this.force_compose ) {
				message = this.compose_message( speaker, message_langs, raw_message, radio_freq, spans );
			}
			this.show_message( message, 2, deaf_message, deaf_type );
			return message;
		}

		// Function from file: say.dm
		public override bool say( dynamic message = null, string bubble_type = null ) {
			string message_mode = null;
			ByTable spans = null;
			double? message_range = null;
			int radio_return = 0;
			dynamic T = null;
			GasMixture environment = null;
			double pressure = 0;

			message = GlobalFuncs.trim( String13.SubStr( GlobalFuncs.sanitize( message ), 1, 1024 ) );

			if ( this.stat == 2 ) {
				this.say_dead( message );
				return false;
			}

			if ( this.check_emote( message ) ) {
				return false;
			}

			if ( !this.can_speak_basic( message ) ) {
				return false;
			}
			message_mode = this.get_message_mode( message );

			if ( this.stat != 0 && !GlobalVars.crit_allowed_modes.Contains( message_mode ) ) {
				return false;
			}

			if ( message_mode == "headset" || message_mode == "robot" ) {
				message = String13.SubStr( message, 2, 0 );
			} else if ( Lang13.Bool( message_mode ) ) {
				message = String13.SubStr( message, 3, 0 );
			}

			if ( String13.FindIgnoreCase( message, " ", 1, 2 ) != 0 ) {
				message = String13.SubStr( message, 2, 0 );
			}

			if ( this.handle_inherent_channels( message, message_mode ) != 0 ) {
				return false;
			}

			if ( !this.can_speak_vocal( message ) ) {
				this.WriteMsg( "<span class='warning'>You find yourself unable to speak!</span>" );
				return false;
			}

			if ( message_mode != "whisper" ) {
				message = this.treat_message( message );
			}
			spans = new ByTable();
			spans.Add( this.get_spans() );

			if ( !Lang13.Bool( message ) ) {
				return false;
			}
			this.say_log.Add( message );
			message_range = 7;
			radio_return = this.radio( message, message_mode, spans );

			if ( ( radio_return & 4 ) != 0 ) {
				return false;
			}

			if ( ( radio_return & 1 ) != 0 ) {
				spans.Or( "italics" );
			}

			if ( ( radio_return & 2 ) != 0 ) {
				message_range = 1;
			}
			T = GlobalFuncs.get_turf( this );
			environment = ((Ent_Static)T).return_air();
			pressure = ( environment != null ? environment.return_pressure() : 0 );

			if ( pressure < 10 ) {
				message_range = 1;
			}

			if ( pressure < 40.21 ) {
				spans.Or( "italics" );
			}
			this.send_speech( message, message_range, this, bubble_type, spans );
			GlobalFuncs.log_say( "" + this.name + "/" + this.key + " : " + message );
			return true;
		}

		// Function from file: logout.dm
		public override bool Logout(  ) {
			base.Logout();

			if ( !Lang13.Bool( this.key ) && this.mind != null ) {
				this.mind.active = false;
			}
			return false;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			base.Login();
			this.sync_mind();
			this.mind.show_memory( this, false );

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				
				dynamic _a = GlobalVars.ticker.mode.name; // Was a switch-case, sorry for the mess.
				if ( _a=="sandbox" ) {
					this.CanBuild();
				}
			}
			this.update_damage_hud();
			this.update_health_hud();

			if ( Lang13.Bool( this.ventcrawler ) ) {
				this.WriteMsg( "<span class='notice'>You can ventcrawl! Use alt+click on vents to quickly travel about the station.</span>" );
			}
			return null;
		}

		// Function from file: living_defense.dm
		public override bool incapacitated(  ) {
			
			if ( this.stat != 0 || this.paralysis != 0 || this.stunned != 0 || this.weakened != 0 || this.restrained() ) {
				return true;
			}
			return false;
		}

		// Function from file: living_defense.dm
		public override bool attack_alien( dynamic user = null ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				user.WriteMsg( "You cannot attack people before the game has started." );
				return false;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				user.WriteMsg( "No attacking people at spawn, you jackass." );
				return false;
			}

			dynamic _a = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.visible_message( "<span class='notice'>" + user + " caresses " + this + " with its scythe like arm.</span>" );
				return false;
			} else if ( _a=="grab" ) {
				this.grabbedby( user );
				return false;
			} else {
				((Ent_Dynamic)user).do_attack_animation( this );
				return true;
			}
			return false;
		}

		// Function from file: living_defense.dm
		public override bool attack_larva( Mob_Living_Carbon_Alien_Larva user = null ) {
			
			dynamic _a = user.a_intent; // Was a switch-case, sorry for the mess.
			if ( _a=="help" ) {
				this.visible_message( "<span class='notice'>" + user.name + " rubs its head against " + this + ".</span>" );
				return false;
			} else {
				user.do_attack_animation( this );

				if ( Rand13.PercentChance( 90 ) ) {
					GlobalFuncs.add_logs( user, this, "attacked" );
					this.visible_message( "<span class='danger'>" + user.name + " bites " + this + "!</span>", "<span class='userdanger'>" + user.name + " bites " + this + "!</span>" );
					GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );
					return true;
				} else {
					this.visible_message( "<span class='danger'>" + user.name + " has attempted to bite " + this + "!</span>", "<span class='userdanger'>" + user.name + " has attempted to bite " + this + "!</span>" );
				}
			}
			return false;
		}

		// Function from file: living_defense.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				a.WriteMsg( "You cannot attack people before the game has started." );
				return 0;
			}

			if ( this.loc is Tile && this.loc.loc is Zone_Start ) {
				a.WriteMsg( "No attacking people at spawn, you jackass." );
				return 0;
			}

			if ( a.a_intent == "harm" ) {
				
				if ( ((Mob)a).is_muzzled() || Lang13.Bool( a.wear_mask ) && Lang13.Bool( a.wear_mask.flags_cover & 8 ) ) {
					a.WriteMsg( "<span class='warning'>You can't bite with your mouth covered!</span>" );
					return 0;
				}
				((Ent_Dynamic)a).do_attack_animation( this );

				if ( Rand13.PercentChance( 75 ) ) {
					GlobalFuncs.add_logs( a, this, "attacked" );
					GlobalFuncs.playsound( this.loc, "sound/weapons/bite.ogg", 50, 1, -1 );
					this.visible_message( "<span class='danger'>" + a.name + " bites " + this + "!</span>", "<span class='userdanger'>" + a.name + " bites " + this + "!</span>" );
					return 1;
				} else {
					this.visible_message( "<span class='danger'>" + a.name + " has attempted to bite " + this + "!</span>", "<span class='userdanger'>" + a.name + " has attempted to bite " + this + "!</span>" );
				}
			}
			return 0;
		}

		// Function from file: living_defense.dm
		public override bool attack_animal( Mob_Living user = null ) {
			
			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				user.visible_message( new Txt( "<span class='notice'>" ).The( user ).item().str( " " ).item( ((dynamic)user).friendly ).str( " " ).item( this ).str( "!</span>" ).ToString() );
				return false;
			} else {
				
				if ( Lang13.Bool( ((dynamic)user).attack_sound ) ) {
					GlobalFuncs.playsound( this.loc, ((dynamic)user).attack_sound, 50, 1, 1 );
				}
				user.do_attack_animation( this );
				this.visible_message( new Txt( "<span class='danger'>" ).The( user ).item().str( " " ).item( ((dynamic)user).attacktext ).str( " " ).item( this ).str( "!</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).The( user ).item().str( " " ).item( ((dynamic)user).attacktext ).str( " " ).item( this ).str( "!</span>" ).ToString() );
				GlobalFuncs.add_logs( user, this, "attacked" );
				return true;
			}
		}

		// Function from file: living_defense.dm
		public override bool attack_slime( Mob_Living_SimpleAnimal_Slime user = null ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				user.WriteMsg( "You cannot attack people before the game has started." );
				return false;
			}

			if ( user.buckled != null ) {
				
				if ( user == this.buckled_mob ) {
					user.Feedstop();
				}
				return false;
			}

			if ( this.stat != 2 ) {
				GlobalFuncs.add_logs( user, this, "attacked" );
				user.do_attack_animation( this );
				this.visible_message( "<span class='danger'>The " + user.name + " glomps " + this + "!</span>", "<span class='userdanger'>The " + user.name + " glomps " + this + "!</span>" );
				return true;
			}
			return false;
		}

		// Function from file: living_defense.dm
		public override dynamic acid_act( int acidpwr = 0, double? toxpwr = null, double? acid_volume = null ) {
			this.take_organ_damage( Num13.MinInt( ((int)( ( toxpwr ??0) * 10 )), ((int)( ( acid_volume ??0) * ( toxpwr ??0) )) ) );
			return null;
		}

		// Function from file: living_defense.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			this.adjust_fire_stacks( 3 );
			this.IgniteMob();
			return false;
		}

		// Function from file: living_defense.dm
		public override bool mech_melee_attack( Obj_Mecha M = null ) {
			
			if ( ((dynamic)M.occupant).a_intent == "harm" ) {
				
				if ( M.damtype == "brute" ) {
					Map13.StepAway( this, M, 15 );
				}

				dynamic _a = M.damtype; // Was a switch-case, sorry for the mess.
				if ( _a=="brute" ) {
					this.Paralyse( 1 );
					this.take_overall_damage( Rand13.Int( Convert.ToInt32( M.force / 2 ), Convert.ToInt32( M.force ) ) );
					GlobalFuncs.playsound( this, "sound/weapons/punch4.ogg", 50, 1 );
				} else if ( _a=="fire" ) {
					this.take_overall_damage( 0, Rand13.Int( Convert.ToInt32( M.force / 2 ), Convert.ToInt32( M.force ) ) );
					GlobalFuncs.playsound( this, "sound/items/welder.ogg", 50, 1 );
				} else if ( _a=="tox" ) {
					M.mech_toxin_damage( this );
				} else {
					return false;
				}
				this.updatehealth();
				this.visible_message( "<span class='danger'>" + M.name + " has hit " + this + "!</span>", "<span class='userdanger'>" + M.name + " has hit " + this + "!</span>" );
				GlobalFuncs.add_logs( M.occupant, this, "attacked", M, "(INTENT: " + String13.ToUpper( ((dynamic)M.occupant).a_intent ) + ") (DAMTYPE: " + String13.ToUpper( M.damtype ) + ")" );
			} else {
				Map13.StepAway( this, M, null );
				GlobalFuncs.add_logs( M.occupant, this, "pushed", M );
				this.visible_message( "<span class='warning'>" + M + " pushes " + this + " out of the way.</span>" );
				return false;
			}
			return false;
		}

		// Function from file: living_defense.dm
		public override bool hitby( Ent_Dynamic AM = null, bool? skipcatch = null, bool? hitpush = null, bool? blocked = null ) {
			hitpush = hitpush ?? true;
			blocked = blocked ?? false;

			Ent_Dynamic I = null;
			dynamic zone = null;
			dynamic dtype = null;
			int? volume = null;
			Ent_Dynamic W = null;
			double? armor = null;

			
			if ( AM is Obj_Item ) {
				I = AM;
				zone = GlobalFuncs.ran_zone( "chest", 65 );
				dtype = "brute";
				volume = GlobalFuncs.vol_by_throwforce_and_or_w_class( I );

				if ( I is Obj_Item_Weapon ) {
					W = I;
					dtype = ((dynamic)W).damtype;

					if ( Convert.ToDouble( ((dynamic)W).throwforce ) > 0 ) {
						
						if ( Lang13.Bool( ((dynamic)W).throwhitsound ) ) {
							GlobalFuncs.playsound( this.loc, ((dynamic)W).throwhitsound, volume, 1, -1 );
						} else if ( Lang13.Bool( ((dynamic)W).hitsound ) ) {
							GlobalFuncs.playsound( this.loc, ((dynamic)W).hitsound, volume, 1, -1 );
						} else if ( !Lang13.Bool( ((dynamic)W).throwhitsound ) ) {
							GlobalFuncs.playsound( this.loc, "sound/weapons/genhit.ogg", volume, 1, -1 );
						}
					}
				} else if ( !Lang13.Bool( ((dynamic)I).throwhitsound ) && Convert.ToDouble( ((dynamic)I).throwforce ) > 0 ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/genhit.ogg", volume, 1, -1 );
				}

				if ( !Lang13.Bool( ((dynamic)I).throwforce ) ) {
					GlobalFuncs.playsound( this.loc, "sound/weapons/throwtap.ogg", 1, volume, -1 );
				}

				if ( !( blocked == true ) ) {
					this.visible_message( "<span class='danger'>" + this + " has been hit by " + I + ".</span>", "<span class='userdanger'>" + this + " has been hit by " + I + ".</span>" );
					armor = this.run_armor_check( zone, "melee", "Your armor has protected your " + GlobalFuncs.parse_zone( zone ) + ".", "Your armor has softened hit to your " + GlobalFuncs.parse_zone( zone ) + ".", Lang13.IntNullable( ((dynamic)I).armour_penetration ) );
					this.apply_damage( ((dynamic)I).throwforce, dtype, zone, armor );

					if ( Lang13.Bool( ((dynamic)I).thrownby ) ) {
						GlobalFuncs.add_logs( ((dynamic)I).thrownby, this, "hit", I );
					}
				}
			} else {
				GlobalFuncs.playsound( this.loc, "sound/weapons/genhit.ogg", 50, 1, -1 );
			}
			base.hitby( AM, skipcatch, hitpush, blocked );
			return false;
		}

		// Function from file: living_defense.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			double? armor = null;

			armor = this.run_armor_check( def_zone, P.flag, "", "", Lang13.IntNullable( P.armour_penetration ) );

			if ( !P.nodamage ) {
				this.apply_damage( P.damage, P.damage_type, def_zone, armor );
			}
			return ((Obj_Item_Projectile)P).on_hit( this, armor, def_zone );
		}

		// Function from file: living.dm
		public override bool canUseTopic( dynamic M = null, bool? be_close = null, bool? no_dextery = null ) {
			be_close = be_close ?? false;
			no_dextery = no_dextery ?? false;

			
			if ( this.incapacitated() ) {
				return false;
			}

			if ( no_dextery == true ) {
				
				if ( be_close == true && Map13.GetDistance( M, this ) <= 1 ) {
					return true;
				}
			} else {
				this.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
			}
			return false;
		}

		// Function from file: living.dm
		public override dynamic Stat(  ) {
			Gang G = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) ) {
				
				if ( GlobalVars.ticker != null ) {
					
					if ( Lang13.Bool( GlobalVars.ticker.mode ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.ticker.mode.gangs, typeof(Gang) )) {
							G = _a;
							

							if ( Lang13.Bool( Lang13.IsNumber( G.dom_timer ) ) ) {
								Interface13.Stat( null, "" + G.name + " Gang Takeover: " + Num13.MaxInt( Convert.ToInt32( G.dom_timer ), 0 ) );
							}
						}
					}
				}
			}
			return null;
		}

		// Function from file: living.dm
		public override void do_attack_animation( dynamic A = null, dynamic end_pixel_y = null ) {
			dynamic final_pixel_y = null;
			Image I = null;
			ByTable viewing = null;
			dynamic M = null;
			int direction = 0;

			final_pixel_y = this.get_standard_pixel_y_offset( this.lying );
			base.do_attack_animation( (object)(A), (object)(final_pixel_y) );
			this.floating = false;

			if ( this.hand && Lang13.Bool( this.l_hand ) ) {
				I = new Image( this.l_hand.icon, A, this.l_hand.icon_state, A.layer + 1 );
			} else if ( !this.hand && Lang13.Bool( this.r_hand ) ) {
				I = new Image( this.r_hand.icon, A, this.r_hand.icon_state, A.layer + 1 );
			} else {
				return;
			}
			viewing = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, A ) )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					viewing.Or( M.client );
				}
			}
			GlobalFuncs.flick_overlay( I, viewing, 5 );
			I.transform *= 0.75;
			I.appearance_flags = 30;
			direction = Map13.GetDistance( this, A );

			if ( ( direction & 1 ) != 0 ) {
				I.pixel_y = -16;
			} else if ( ( direction & 2 ) != 0 ) {
				I.pixel_y = 16;
			}

			if ( ( direction & 4 ) != 0 ) {
				I.pixel_x = -16;
			} else if ( ( direction & 8 ) != 0 ) {
				I.pixel_x = 16;
			}

			if ( !( direction != 0 ) ) {
				I.pixel_z = 16;
			}
			Icon13.Animate( new ByTable().Set( 1, I ).Set( "alpha", 175 ).Set( "pixel_x", 0 ).Set( "pixel_y", 0 ).Set( "pixel_z", 0 ).Set( "time", 3 ) );
			return;
		}

		// Function from file: living.dm
		public override void narsie_act(  ) {
			
			if ( this.client != null ) {
				GlobalFuncs.makeNewConstruct( typeof(Mob_Living_SimpleAnimal_Hostile_Construct_Harvester), this, null, false );
			}
			this.spawn_dust();
			this.gib();
			return;
		}

		// Function from file: living.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			
			if ( ( current_size ??0) >= 11 ) {
				this.throw_at_fast( S, 14, 3, null, true );
			} else {
				Map13.StepTowardsSimple( this, S );
			}
			return;
		}

		// Function from file: living.dm
		public override double singularity_act( int? current_size = null, Obj_Singularity S = null ) {
			int gain = 0;

			gain = 20;
			this.investigate_log( "(" + GlobalFuncs.key_name( this ) + ") has been consumed by the singularity.", "singulo" );
			this.gib();
			return gain;
		}

		// Function from file: living.dm
		public override bool stripPanelEquip( dynamic what = null, Mob who = null, double? where = null, bool? child_override = null ) {
			what = this.get_active_hand();

			if ( Lang13.Bool( what ) && Lang13.Bool( what.flags & 2 ) ) {
				this.WriteMsg( new Txt( "<span class='warning'>You can't put " ).the( what.name ).item().str( " on " ).item( who ).str( ", it's stuck to your hand!</span>" ).ToString() );
				return false;
			}

			if ( Lang13.Bool( what ) ) {
				
				if ( !Lang13.Bool( ((Obj_Item)what).mob_can_equip( who, where, true ) ) ) {
					this.WriteMsg( new Txt( "<span class='warning'>" ).The( what.name ).item().str( " doesn't fit in that place!</span>" ).ToString() );
					return false;
				}
				this.visible_message( "<span class='notice'>" + this + " tries to put " + what + " on " + who + ".</span>" );

				if ( GlobalFuncs.do_mob( this, who, what.put_on_delay ) ) {
					
					if ( Lang13.Bool( what ) && this.Adjacent( who ) ) {
						this.unEquip( what );
						who.equip_to_slot_if_possible( what, where, false, true );
						GlobalFuncs.add_logs( this, who, "equipped", what );
					}
				}
			}
			return false;
		}

		// Function from file: living.dm
		public override void stripPanelUnequip( dynamic what = null, Mob who = null, double? where = null, bool? child_override = null ) {
			
			if ( Lang13.Bool( what.flags & 2 ) ) {
				this.WriteMsg( new Txt( "<span class='warning'>You can't remove " ).the( what.name ).item().str( ", it appears to be stuck!</span>" ).ToString() );
				return;
			}
			who.visible_message( "<span class='danger'>" + this + " tries to remove " + who + "'s " + what.name + ".</span>", "<span class='userdanger'>" + this + " tries to remove " + who + "'s " + what.name + ".</span>" );
			((Ent_Static)what).add_fingerprint( this );

			if ( GlobalFuncs.do_mob( this, who, what.strip_delay ) ) {
				
				if ( Lang13.Bool( what ) && what == who.get_item_by_slot( where ) && this.Adjacent( who ) ) {
					who.unEquip( what );
					GlobalFuncs.add_logs( this, who, "stripped", null, "of " + what );
				}
			}
			return;
		}

		// Function from file: living.dm
		public override void update_gravity( bool has_gravity = false ) {
			
			if ( !( GlobalVars.ticker != null ) || !Lang13.Bool( GlobalVars.ticker.mode ) ) {
				return;
			}

			if ( has_gravity ) {
				this.clear_alert( "weightless" );
			} else {
				this.throw_alert( "weightless", typeof(Obj_Screen_Alert_Weightless) );
			}
			this.f_float( !has_gravity );
			return;
		}

		// Function from file: living.dm
		public override dynamic movement_delay(  ) {
			dynamic _default = null;

			Ent_Static T = null;

			_default = base.movement_delay();

			if ( this.loc is Tile ) {
				T = this.loc;
				_default += ((dynamic)T).slowdown;
			}

			switch ((string)( this.m_intent )) {
				case "run":
					
					if ( this.drowsyness > 0 ) {
						_default += 6;
					}
					_default += GlobalVars.config.run_speed;
					break;
				case "walk":
					_default += GlobalVars.config.walk_speed;
					break;
			}
			return _default;
		}

		// Function from file: living.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			bool cuff_dragged = false;
			Mob_Living M = null;
			Ent_Static T = null;
			int? diag = null;
			dynamic M2 = null;
			bool ok = false;
			dynamic G = null;
			Mob_Living t = null;

			
			if ( this.buckled != null && this.buckled.loc != NewLoc ) {
				
				if ( !Lang13.Bool( this.buckled.anchored ) ) {
					return this.buckled.Move( NewLoc, Dir );
				} else {
					return false;
				}
			}

			if ( this.restrained() ) {
				this.__CallVerb("Stop Pulling" );
			}
			cuff_dragged = false;

			if ( this.restrained() ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 1 ), typeof(Mob_Living) )) {
					M = _a;
					

					if ( M.pulling == this && !M.incapacitated() ) {
						cuff_dragged = true;
					}
				}
			}

			if ( !cuff_dragged && Lang13.Bool( this.pulling ) && !this.throwing && ( Map13.GetDistance( this, this.pulling ) <= 1 || this.pulling.loc == this.loc ) ) {
				T = this.loc;
				_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

				if ( Lang13.Bool( this.pulling ) && this.pulling.loc != null ) {
					
					if ( !( this.pulling.loc is Tile ) ) {
						this.__CallVerb("Stop Pulling" );
						return _default;
					} else if ( GlobalVars.Debug ) {
						GlobalVars.diary.WriteMsg( "pulling disappeared? at " + 536 + " in mob.dm - pulling = " + this.pulling );
						GlobalVars.diary.WriteMsg( "REPORT THIS" );
					}
				}

				if ( Lang13.Bool( this.pulling ) && Lang13.Bool( this.pulling.anchored ) ) {
					this.__CallVerb("Stop Pulling" );
					return _default;
				}

				if ( !this.restrained() ) {
					diag = Map13.GetDistance( this, this.pulling );

					if ( ( ( diag ??0) - 1 & ( diag ??0) ) != 0 ) {
						
					} else {
						diag = null;
					}

					if ( Map13.GetDistance( this, this.pulling ) > 1 || Lang13.Bool( diag ) ) {
						
						if ( this.pulling is Mob_Living ) {
							M2 = this.pulling;
							ok = true;

							if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), M2.grabbed_by ) ) ) {
								
								if ( Rand13.PercentChance( 75 ) ) {
									G = Rand13.PickFromTable( M2.grabbed_by );

									if ( G is Obj_Item_Weapon_Grab ) {
										this.visible_message( "<span class='danger'>" + this + " has pulled " + G.affecting + " from " + G.assailant + "'s grip.</span>" );
										GlobalFuncs.qdel( G );
									}
								} else {
									ok = false;
								}

								if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), M2.grabbed_by.len ) ) ) {
									ok = false;
								}
							}

							if ( ok ) {
								t = M2.pulling;
								M2.__CallVerb("Stop Pulling" );

								if ( Lang13.Bool( M2.lying ) && !( M2.buckled != null ) && Rand13.PercentChance( ((int)( ((Mob_Living)M2).getBruteLoss() / 2 )) ) ) {
									this.makeTrail( T, M2 );
								}
								this.pulling.Move( T, Map13.GetDistance( this.pulling, T ) );

								if ( Lang13.Bool( M2 ) ) {
									((Mob)M2).start_pulling( t );
								}
							}
						} else if ( Lang13.Bool( this.pulling ) ) {
							this.pulling.Move( T, Map13.GetDistance( this.pulling, T ) );
						}
					}
				}
			} else {
				this.__CallVerb("Stop Pulling" );
				_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );
			}

			if ( this.s_active != null && !this.contents.Contains( this.s_active ) && !this.contents.Contains( this.s_active.loc ) ) {
				this.s_active.close( this );
			}
			return _default;
		}

		// Function from file: living.dm
		public override void setEarDamage( int damage = 0, double? deaf = null ) {
			
			if ( damage >= 0 ) {
				this.ear_damage = damage;
			}

			if ( ( deaf ??0) >= 0 ) {
				this.ear_deaf = deaf;
			}
			return;
		}

		// Function from file: living.dm
		public override void adjustEarDamage( double damage = 0, int deaf = 0 ) {
			this.ear_damage = Num13.MaxInt( 0, ((int)( this.ear_damage + damage )) );
			this.ear_deaf = Num13.MaxInt( 0, ((int)( ( this.ear_deaf ??0) + deaf )) );
			return;
		}

		// Function from file: living.dm
		public override double emp_act( int severity = 0 ) {
			ByTable L = null;
			Obj O = null;

			L = this.get_contents();

			foreach (dynamic _a in Lang13.Enumerate( L, typeof(Obj) )) {
				O = _a;
				
				O.emp_act( severity );
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: living.dm
		public override ByTable get_contents( Obj_Item_Weapon_Storage Storage = null ) {
			ByTable L = null;
			Obj_Item_Weapon_Storage S = null;
			Obj_Item_Clothing_Under U = null;
			Obj_Item_Weapon_Folder F = null;

			L = new ByTable();

			if ( Storage != null ) {
				L.Add( Storage.return_inv() );
				return L;
			} else {
				L.Add( this.contents );

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Storage) )) {
					S = _a;
					
					L.Add( this.get_contents( S ) );
				}

				foreach (dynamic _b in Lang13.Enumerate( this.contents, typeof(Obj_Item_Clothing_Under) )) {
					U = _b;
					
					L.Add( U.contents );
				}

				foreach (dynamic _c in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Folder) )) {
					F = _c;
					
					L.Add( F.contents );
				}
				return L;
			}
		}

		// Function from file: living.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );
			this.flash_eyes();
			return false;
		}

		// Function from file: living.dm
		public override bool Bumped( dynamic AM = null ) {
			base.Bumped( (object)(AM) );
			this.last_bumped = Game13.time;
			return false;
		}

		// Function from file: living.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			Ent_Static M = null;
			Ent_Static O = null;
			Ent_Static AM = null;

			
			if ( Lang13.Bool( base.Bump( Obstacle, (object)(yes) ) ) ) {
				return null;
			}

			if ( this.buckled != null || !Lang13.Bool( yes ) || this.now_pushing ) {
				return null;
			}

			if ( Obstacle is Mob ) {
				M = Obstacle;

				if ( this.MobBump( M ) ) {
					return null;
				}
			}

			if ( Obstacle is Obj ) {
				O = Obstacle;

				if ( Lang13.Bool( this.ObjBump( O ) ) ) {
					return null;
				}
			}

			if ( Obstacle is Ent_Dynamic ) {
				AM = Obstacle;

				if ( this.PushAM( AM ) ) {
					return null;
				}
			}
			return null;
		}

		// Function from file: living.dm
		public override dynamic Destroy(  ) {
			Mob_Living_SimpleAnimal_Drone D = null;
			Image I = null;

			base.Destroy();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_SimpleAnimal_Drone) )) {
				D = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.staticOverlays, typeof(Image) )) {
					I = _a;
					
					D.staticOverlays.Remove( I );
					D.client.images.Remove( I );
					GlobalFuncs.qdel( I );
				}
			}
			this.staticOverlays.len = 0;
			return 4;
		}

		// Function from file: life.dm
		public override void update_action_buttons(  ) {
			Action A = null;
			int button_number = 0;
			Action A2 = null;
			Obj_Screen_Movable_ActionButton N = null;
			Obj_Screen_Movable_ActionButton B = null;

			
			if ( !( this.hud_used != null ) ) {
				return;
			}

			if ( !( this.client != null ) ) {
				return;
			}

			if ( !this.hud_used.hud_shown ) {
				return;
			}
			this.client.screen.Remove( this.hud_used.hide_actions_toggle );

			foreach (dynamic _a in Lang13.Enumerate( this.actions, typeof(Action) )) {
				A = _a;
				

				if ( A.button != null ) {
					this.client.screen.Remove( A.button );
				}
			}

			if ( this.hud_used.action_buttons_hidden ) {
				
				if ( !( this.hud_used.hide_actions_toggle != null ) ) {
					this.hud_used.hide_actions_toggle = new Obj_Screen_Movable_ActionButton_HideToggle( this.hud_used );
					this.hud_used.hide_actions_toggle.UpdateIcon();
				}

				if ( !Lang13.Bool( this.hud_used.hide_actions_toggle.moved ) ) {
					this.hud_used.hide_actions_toggle.screen_loc = this.hud_used.ButtonNumberToScreenCoords( 1 );
				}
				this.client.screen.Add( this.hud_used.hide_actions_toggle );
				return;
			}
			button_number = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.actions, typeof(Action) )) {
				A2 = _b;
				
				button_number++;

				if ( A2.button == null ) {
					N = new Obj_Screen_Movable_ActionButton( this.hud_used );
					N.owner = A2;
					A2.button = N;
				}
				B = A2.button;
				B.UpdateIcon();
				B.name = A2.UpdateName();
				this.client.screen.Add( B );

				if ( !Lang13.Bool( B.moved ) ) {
					B.screen_loc = this.hud_used.ButtonNumberToScreenCoords( button_number );
				}
			}

			if ( button_number > 0 ) {
				
				if ( !( this.hud_used.hide_actions_toggle != null ) ) {
					this.hud_used.hide_actions_toggle = new Obj_Screen_Movable_ActionButton_HideToggle( this.hud_used );
					this.hud_used.hide_actions_toggle.InitialiseIcon( this );
				}

				if ( !Lang13.Bool( this.hud_used.hide_actions_toggle.moved ) ) {
					this.hud_used.hide_actions_toggle.screen_loc = this.hud_used.ButtonNumberToScreenCoords( button_number + 1 );
				}
				this.client.screen.Add( this.hud_used.hide_actions_toggle );
			}
			return;
		}

		// Function from file: life.dm
		public override bool Life(  ) {
			bool _default = false;

			GasMixture environment = null;

			
			if ( this.digitalinvis ) {
				this.handle_diginvis();
			}

			if ( Lang13.Bool( this.notransform ) ) {
				return _default;
			}

			if ( !( this.loc != null ) ) {
				return _default;
			}
			environment = this.loc.return_air();

			if ( this.stat != 2 ) {
				this.handle_breathing();
				this.handle_mutations_and_radiation();
				this.handle_chemicals_in_body();
				this.handle_blood();
				this.handle_random_events();
				_default = true;
			}

			if ( environment != null ) {
				this.handle_environment( environment );
			}
			this.handle_fire();
			this.handle_stomach();
			this.update_gravity( this.mob_has_gravity() );

			if ( this.machine != null ) {
				this.machine.check_eye( this );
			}

			if ( this.stat != 2 ) {
				this.handle_disabilities();
				this.handle_status_effects();
			}
			this.handle_actions();
			this.handle_regular_hud_updates();
			return _default;
		}

		// Function from file: emote.dm
		public override void emote( string act = null, int? m_type = null, dynamic message = null ) {
			m_type = m_type ?? 1;

			string param = null;
			int t1 = 0;
			dynamic M = null;
			dynamic A = null;
			dynamic M2 = null;
			dynamic A2 = null;
			dynamic M3 = null;
			dynamic A3 = null;
			dynamic M4 = null;
			dynamic A4 = null;
			dynamic M5 = null;
			dynamic A5 = null;
			dynamic M6 = null;
			dynamic T = null;

			
			if ( this.stat != 0 ) {
				return;
			}
			param = null;

			if ( String13.FindIgnoreCase( act, "-", 1, 0 ) != 0 ) {
				t1 = String13.FindIgnoreCase( act, "-", 1, 0 );
				param = String13.SubStr( act, t1 + 1, Lang13.Length( act ) + 1 );
				act = String13.SubStr( act, 1, t1 );
			}

			switch ((string)( act )) {
				case "aflap":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> flaps its wings ANGRILY!";
						m_type = 2;
					}
					break;
				case "blush":
				case "blushes":
					message = "<B>" + this + "</B> blushes.";
					m_type = 1;
					break;
				case "bow":
				case "bows":
					
					if ( !( this.buckled != null ) ) {
						M = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
								A = _a;
								

								if ( param == A.name ) {
									M = A;
									break;
								}
							}
						}

						if ( !Lang13.Bool( M ) ) {
							param = null;
						}

						if ( Lang13.Bool( param ) ) {
							message = "<B>" + this + "</B> bows to " + param + ".";
						} else {
							message = "<B>" + this + "</B> bows.";
						}
					}
					m_type = 1;
					break;
				case "burp":
				case "burps":
					message = "<B>" + this + "</B> burps.";
					m_type = 2;
					break;
				case "choke":
				case "chokes":
					message = "<B>" + this + "</B> chokes!";
					m_type = 2;
					break;
				case "chuckle":
				case "chuckles":
					message = "<B>" + this + "</B> chuckles.";
					m_type = 2;
					break;
				case "collapse":
				case "collapses":
					this.Paralyse( 2 );
					message = "<B>" + this + "</B> collapses!";
					m_type = 2;
					break;
				case "cough":
				case "coughs":
					message = "<B>" + this + "</B> coughs!";
					m_type = 2;
					break;
				case "dance":
				case "dances":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> dances around happily.";
						m_type = 1;
					}
					break;
				case "deathgasp":
				case "deathgasps":
					message = "<B>" + this + "</B> seizes up and falls limp, its eyes dead and lifeless...";
					m_type = 1;
					break;
				case "drool":
				case "drools":
					message = "<B>" + this + "</B> drools.";
					m_type = 1;
					break;
				case "faint":
				case "faints":
					message = "<B>" + this + "</B> faints.";

					if ( this.sleeping != 0 ) {
						return;
					}
					this.SetSleeping( 10 );
					m_type = 1;
					break;
				case "flap":
				case "flaps":
					
					if ( !this.restrained() ) {
						message = "<B>" + this + "</B> flaps its wings.";
						m_type = 2;
					}
					break;
				case "flip":
				case "flips":
					
					if ( !this.restrained() || !( this.resting != 0 ) || !( this.sleeping != 0 ) ) {
						this.SpinAnimation( 7, 1 );
						m_type = 2;
					}
					break;
				case "frown":
				case "frowns":
					message = "<B>" + this + "</B> frowns.";
					m_type = 1;
					break;
				case "gasp":
				case "gasps":
					message = "<B>" + this + "</B> gasps!";
					m_type = 2;
					break;
				case "giggle":
				case "giggles":
					message = "<B>" + this + "</B> giggles.";
					m_type = 2;
					break;
				case "glare":
				case "glares":
					M2 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A2 = _b;
							

							if ( param == A2.name ) {
								M2 = A2;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M2 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> glares at " + param + ".";
					} else {
						message = "<B>" + this + "</B> glares.";
					}
					break;
				case "grin":
				case "grins":
					message = "<B>" + this + "</B> grins.";
					m_type = 1;
					break;
				case "jump":
				case "jumps":
					message = "<B>" + this + "</B> jumps!";
					m_type = 1;
					break;
				case "laugh":
				case "laughs":
					message = "<B>" + this + "</B> laughs.";
					m_type = 2;
					break;
				case "look":
				case "looks":
					M3 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A3 = _c;
							

							if ( param == A3.name ) {
								M3 = A3;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M3 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> looks at " + param + ".";
					} else {
						message = "<B>" + this + "</B> looks.";
					}
					m_type = 1;
					break;
				case "me":
					
					if ( GlobalFuncs.jobban_isbanned( this, "emote" ) ) {
						this.WriteMsg( "You cannot send custom emotes (banned)" );
						return;
					}

					if ( this.client != null ) {
						
						if ( ( this.client.prefs.muted & 1 ) != 0 ) {
							this.WriteMsg( "You cannot send IC messages (muted)." );
							return;
						}

						if ( this.client.handle_spam_prevention( message, 1 ) ) {
							return;
						}
					}

					if ( !Lang13.Bool( message ) ) {
						return;
					} else {
						message = "<B>" + this + "</B> " + message;
					}
					break;
				case "nod":
				case "nods":
					message = "<B>" + this + "</B> nods.";
					m_type = 1;
					break;
				case "point":
				case "points":
					
					if ( !this.restrained() ) {
						M4 = null;

						if ( Lang13.Bool( param ) ) {
							
							foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInView( null, null ) )) { // THERE IS A SMALL CHANCE THIS LOOP IS BROKEN! TYPECODE = 35
								A4 = _d;
								

								if ( param == A4.name ) {
									M4 = A4;
									break;
								}
							}
						}

						if ( !Lang13.Bool( M4 ) ) {
							message = "<B>" + this + "</B> points.";
						} else {
							this.pointed( M4 );
						}
					}
					m_type = 1;
					break;
				case "scream":
				case "screams":
					message = "<B>" + this + "</B> screams!";
					m_type = 2;
					break;
				case "shake":
				case "shakes":
					message = "<B>" + this + "</B> shakes its head.";
					m_type = 1;
					break;
				case "sigh":
				case "sighs":
					message = "<B>" + this + "</B> sighs.";
					m_type = 2;
					break;
				case "sit":
				case "sits":
					message = "<B>" + this + "</B> sits down.";
					m_type = 1;
					break;
				case "smile":
				case "smiles":
					message = "<B>" + this + "</B> smiles.";
					m_type = 1;
					break;
				case "sneeze":
				case "sneezes":
					message = "<B>" + this + "</B> sneezes.";
					m_type = 2;
					break;
				case "sniff":
				case "sniffs":
					message = "<B>" + this + "</B> sniffs.";
					m_type = 2;
					break;
				case "snore":
				case "snores":
					message = "<B>" + this + "</B> snores.";
					m_type = 2;
					break;
				case "stare":
				case "stares":
					M5 = null;

					if ( Lang13.Bool( param ) ) {
						
						foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInView( this, 1 ) )) {
							A5 = _e;
							

							if ( param == A5.name ) {
								M5 = A5;
								break;
							}
						}
					}

					if ( !Lang13.Bool( M5 ) ) {
						param = null;
					}

					if ( Lang13.Bool( param ) ) {
						message = "<B>" + this + "</B> stares at " + param + ".";
					} else {
						message = "<B>" + this + "</B> stares.";
					}
					break;
				case "sulk":
				case "sulks":
					message = "<B>" + this + "</B> sulks down sadly.";
					m_type = 1;
					break;
				case "sway":
				case "sways":
					message = "<B>" + this + "</B> sways around dizzily.";
					m_type = 1;
					break;
				case "tremble":
				case "trembles":
					message = "<B>" + this + "</B> trembles in fear!";
					m_type = 1;
					break;
				case "twitch":
				case "twitches":
					message = "<B>" + this + "</B> twitches violently.";
					m_type = 1;
					break;
				case "twitch_s":
					message = "<B>" + this + "</B> twitches.";
					m_type = 1;
					break;
				case "wave":
				case "waves":
					message = "<B>" + this + "</B> waves.";
					m_type = 1;
					break;
				case "whimper":
				case "whimpers":
					message = "<B>" + this + "</B> whimpers.";
					m_type = 2;
					break;
				case "yawn":
				case "yawns":
					message = "<B>" + this + "</B> yawns.";
					m_type = 2;
					break;
				case "help":
					this.WriteMsg( "Help for emotes. You can use these emotes with say \"*emote\":\n\naflap, blush, bow-(none)/mob, burp, choke, chuckle, clap, collapse, cough, dance, deathgasp, drool, flap, frown, gasp, giggle, glare-(none)/mob, grin, jump, laugh, look, me, nod, point-atom, scream, shake, sigh, sit, smile, sneeze, sniff, snore, stare-(none)/mob, sulk, sway, tremble, twitch, twitch_s, wave, whimper, yawn" );
					break;
				default:
					this.WriteMsg( "<span class='notice'>Unusable emote '" + act + "'. Say *help for a list.</span>" );
					break;
			}

			if ( Lang13.Bool( message ) ) {
				GlobalFuncs.log_emote( "" + this.name + "/" + this.key + " : " + message );

				foreach (dynamic _g in Lang13.Enumerate( GlobalVars.dead_mob_list )) {
					M6 = _g;
					

					if ( !Lang13.Bool( M6.client ) || M6 is Mob_NewPlayer ) {
						continue;
					}
					T = GlobalFuncs.get_turf( this );

					if ( Convert.ToInt32( M6.stat ) == 2 && Lang13.Bool( M6.client ) && ( M6.client.prefs.chat_toggles & 8 ) != 0 && !Map13.FetchViewers( null, T ).Contains( M6 ) ) {
						M6.show_message( message );
					}
				}

				if ( ( ( m_type ??0) & 1 ) != 0 ) {
					this.visible_message( message );
				} else if ( ( ( m_type ??0) & 2 ) != 0 ) {
					this.audible_message( message );
				}
			}
			return;
		}

		// Function from file: death.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			this.unset_machine();
			this.timeofdeath = Game13.time;
			this.tod = GlobalFuncs.worldtime2text();

			if ( this.mind != null ) {
				this.mind.store_memory( "Time of death: " + this.tod );
			}
			GlobalVars.living_mob_list.Remove( this );

			if ( !( gibbed == true ) ) {
				GlobalVars.dead_mob_list.Add( this );
			} else if ( this.buckled != null ) {
				this.buckled.unbuckle_mob();
			}
			this.paralysis = 0;
			this.stunned = 0;
			this.weakened = 0;
			this.sleeping = 0;
			this.blind_eyes( 1 );
			this.reset_perspective( null );
			this.hide_fullscreens();
			this.update_damage_hud();
			this.update_health_hud();
			this.update_canmove();
			return false;
		}

		// Function from file: death.dm
		public override void dust( dynamic animation = null ) {
			animation = animation ?? 0;

			Dynamic_Overlay animate = null;

			this.death( true );
			animate = this.setup_animation( animation, 0 );

			if ( animate != null ) {
				this.dust_animation( animate );
			}
			this.spawn_dust();
			this.end_animation( animate );
			return;
		}

		// Function from file: death.dm
		public override dynamic gib( dynamic animation = null ) {
			animation = animation ?? 1;

			int? prev_lying = null;
			Dynamic_Overlay animate = null;

			prev_lying = this.lying;
			this.death( true );

			if ( this.buckled != null ) {
				this.buckled.unbuckle_mob();
			}
			animate = this.setup_animation( animation, prev_lying );

			if ( animate != null ) {
				this.gib_animation( animate );
			}
			this.spawn_gibs();
			this.end_animation( animate );
			return null;
		}

		// Function from file: mob.dm
		public override void on_varedit( dynamic modified_var = null ) {
			
			dynamic _a = modified_var; // Was a switch-case, sorry for the mess.
			if ( _a=="weakened" ) {
				this.SetWeakened( this.weakened );
			} else if ( _a=="stunned" ) {
				this.SetStunned( this.stunned );
			} else if ( _a=="paralysis" ) {
				this.SetParalysis( this.paralysis );
			} else if ( _a=="sleeping" ) {
				this.SetSleeping( this.sleeping );
			} else if ( _a=="eye_blind" ) {
				this.set_blindness( this.eye_blind );
			} else if ( _a=="eye_damage" ) {
				this.set_eye_damage( this.eye_damage );
			} else if ( _a=="eye_blurry" ) {
				this.set_blurriness( this.eye_blurry );
			} else if ( _a=="ear_deaf" ) {
				this.setEarDamage( -1, this.ear_deaf );
			} else if ( _a=="ear_damage" ) {
				this.setEarDamage( this.ear_damage, -1 );
			} else if ( _a=="maxHealth" ) {
				this.updatehealth();
			}
			return;
		}

		// Function from file: mob.dm
		public override bool reset_perspective( dynamic A = null ) {
			dynamic AT = null;

			
			if ( base.reset_perspective( (object)(A) ) ) {
				this.update_sight();

				if ( this.client.eye != this ) {
					AT = this.client.eye;
					((Ent_Static)AT).get_remote_view_fullscreens( this );
				} else {
					this.clear_fullscreen( "remote_view", 0 );
				}
				this.update_pipe_vision();
			}
			return false;
		}

		// Function from file: radiation.dm
		public override bool rad_act( double severity = 0 ) {
			double? blocked = null;
			Obj I = null;

			
			if ( severity != 0 ) {
				blocked = this.run_armor_check( null, "rad", "Your clothes feel warm.", "Your clothes feel warm." );
				this.apply_effect( severity, "irradiate", blocked );

				foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
					I = _a;
					
					I.rad_act( severity );
				}
			}
			return false;
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.DisperseTarget( this );
			return;
		}

		// Function from file: atoms_movable.dm
		public override bool forceMove( dynamic destination = null ) {
			bool _default = false;

			this.stop_pulling();

			if ( this.pulledby != null ) {
				this.pulledby.stop_pulling();
			}

			if ( this.buckled != null ) {
				this.buckled.unbuckle_mob();
			}

			if ( Lang13.Bool( this.buckled_mob ) ) {
				this.unbuckle_mob( true );
			}
			_default = base.forceMove( (object)(destination) );

			if ( this.client != null ) {
				this.reset_perspective( destination );
			}
			this.update_canmove();
			return _default;
		}

		// Function from file: other_mobs.dm
		public override bool RestrainedClickOn( Ent_Static A = null ) {
			return false;
		}

		// Function from file: other_mobs.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			A.attack_animal( this );
			return;
		}

		// Function from file: states.dm
		public virtual int shared_living_ui_distance( Game_Data src_object = null ) {
			int dist = 0;

			
			if ( !Map13.FetchInView( null, this ).Contains( src_object ) ) {
				return -1;
			}
			dist = Map13.GetDistance( src_object, this );

			if ( dist <= 1 ) {
				return 2;
			} else if ( dist <= 2 ) {
				return 1;
			} else if ( dist <= 5 ) {
				return 0;
			}
			return -1;
		}

		// Function from file: guardian.dm
		[VerbInfo( name: "Reset Guardian Player (One Use)", desc: "Re-rolls which ghost will control your Guardian. One use.", group: "Guardian" )]
		public void guardian_reset(  ) {
			Mob_Living_SimpleAnimal_Hostile_Guardian G = null;
			ByTable candidates = null;
			dynamic new_stand = null;

			this.verbs.Remove( typeof(Mob_Living).GetMethod( "guardian_reset" ) );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_SimpleAnimal_Hostile_Guardian) )) {
				G = _a;
				

				if ( G.summoner == this ) {
					candidates = GlobalFuncs.pollCandidates( "Do you want to play as " + G.real_name + "?", "pAI", null, GlobalVars.FALSE, 100 );
					new_stand = null;

					if ( candidates.len != 0 ) {
						new_stand = Rand13.PickFromTable( candidates );
						G.WriteMsg( "Your user reset you, and your body was taken over by a ghost. Looks like they weren't happy with your performance." );
						this.WriteMsg( "Your guardian has been successfully reset." );
						GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( new_stand ) + " has taken control of (" + GlobalFuncs.key_name_admin( G ) + ")" );
						G.ghostize( false );
						G.key = new_stand.key;
					} else {
						this.WriteMsg( "There were no ghosts willing to take control. Looks like you're stuck with your Guardian for now." );
						this.verbs.Add( typeof(Mob_Living).GetMethod( "guardian_reset" ) );
					}
				}
			}
			return;
		}

		// Function from file: guardian.dm
		[VerbInfo( name: "Recall Guardian", desc: "Forcibly recall your guardian.", group: "Guardian" )]
		public void guardian_recall(  ) {
			Mob_Living_SimpleAnimal_Hostile_Guardian G = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_SimpleAnimal_Hostile_Guardian) )) {
				G = _a;
				

				if ( G.summoner == this ) {
					G.Recall();
				}
			}
			return;
		}

		// Function from file: guardian.dm
		[VerbInfo( name: "Communicate", desc: "Communicate telepathically with your guardian.", group: "Guardian" )]
		public void guardian_comm(  ) {
			string input = null;
			string my_message = null;
			dynamic M = null;
			dynamic G = null;

			input = GlobalFuncs.stripped_input( this, "Please enter a message to tell your guardian.", "Message", "" );

			if ( !Lang13.Bool( input ) ) {
				return;
			}
			my_message = "<span class='boldannounce'><i>" + this + ":</i> " + input + "</span>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				M = _a;
				

				if ( M is Mob_Living_SimpleAnimal_Hostile_Guardian ) {
					G = M;

					if ( G.summoner == this ) {
						G.WriteMsg( "" + my_message );
					}
				} else if ( GlobalVars.dead_mob_list.Contains( M ) ) {
					M.WriteMsg( new Txt( "<a href='?src=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( "'>(F)</a> " ).item( my_message ).ToString() );
				}
			}
			this.WriteMsg( "<span class='boldannounce'><i>" + this + ":</i> " + input + "</span>" );
			GlobalFuncs.log_say( "" + this.real_name + "/" + this.key + " : " + this.text );
			return;
		}

		// Function from file: say.dm
		public void robot_talk( dynamic message = null ) {
			string desig = null;
			Mob_Living S = null;
			string message_a = null;
			string rendered = null;
			dynamic M = null;
			string renderedAI = null;

			GlobalFuncs.log_say( "" + GlobalFuncs.key_name( this ) + " : " + message );
			desig = "Default Cyborg";

			if ( this is Mob_Living_Silicon ) {
				S = this;
				desig = GlobalFuncs.trim_left( ((dynamic)S).designation + " " + S.job );
			}
			message_a = this.say_quote( message, this.get_spans() );
			rendered = "<i><span class='game say'>Robotic Talk, <span class='name'>" + this.name + "</span> <span class='message'>" + message_a + "</span></span></i>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				M = _a;
				

				if ( ((Mob)M).binarycheck() ) {
					
					if ( M is Mob_Living_Silicon_Ai ) {
						renderedAI = new Txt( "<i><span class='game say'>Robotic Talk, <a href='?src=" ).Ref( M ).str( ";track=" ).item( String13.HtmlEncode( this.name ) ).str( "'><span class='name'>" ).item( this.name ).str( " (" ).item( desig ).str( ")</span></a> <span class='message'>" ).item( message_a ).str( "</span></span></i>" ).ToString();
						M.WriteMsg( renderedAI );
					} else {
						M.WriteMsg( rendered );
					}
				}

				if ( GlobalVars.dead_mob_list.Contains( M ) ) {
					M.WriteMsg( new Txt( "<a href='?src=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( "'>(F)</a> " ).item( rendered ).ToString() );
				}
			}
			return;
		}

		// Function from file: say.dm
		public virtual void alien_talk( dynamic message = null, string shown_name = null ) {
			shown_name = shown_name ?? this.name;

			string message_a = null;
			string rendered = null;
			dynamic S = null;

			GlobalFuncs.log_say( "" + GlobalFuncs.key_name( this ) + " : " + message );
			message = GlobalFuncs.trim( message );

			if ( !Lang13.Bool( message ) ) {
				return;
			}
			message_a = this.say_quote( message, this.get_spans() );
			rendered = "<i><span class='alien'>Hivemind, <span class='name'>" + shown_name + "</span> <span class='message'>" + message_a + "</span></span></i>";

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
				S = _a;
				

				if ( !Lang13.Bool( S.stat ) && Lang13.Bool( ((Mob)S).hivecheck() ) ) {
					S.WriteMsg( rendered );
				}

				if ( GlobalVars.dead_mob_list.Contains( S ) ) {
					S.WriteMsg( new Txt( "<a href='?src=" ).Ref( S ).str( ";follow=" ).Ref( this ).str( "'>(F)</a> " ).item( rendered ).ToString() );
				}
			}
			return;
		}

		// Function from file: ventcrawling.dm
		public void remove_ventcrawl(  ) {
			Image current_image = null;

			
			if ( this.client != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.pipes_shown, typeof(Image) )) {
					current_image = _a;
					
					this.client.images.Remove( current_image );
				}
			}
			this.pipes_shown.len = 0;
			return;
		}

		// Function from file: ventcrawling.dm
		public void add_ventcrawl( Ent_Static starting_machine = null ) {
			ByTable totalMembers = null;
			Pipeline P = null;
			dynamic X = null;
			dynamic A = null;

			
			if ( !( starting_machine is Obj_Machinery_Atmospherics ) || !Lang13.Bool( ((dynamic)starting_machine).can_see_pipes() ) ) {
				return;
			}
			totalMembers = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)starting_machine).returnPipenets(), typeof(Pipeline) )) {
				P = _a;
				
				totalMembers.Add( P.members );
				totalMembers.Add( P.other_atmosmch );
			}

			if ( !( totalMembers.len != 0 ) ) {
				return;
			}

			foreach (dynamic _b in Lang13.Enumerate( totalMembers )) {
				X = _b;
				
				A = X;

				if ( !( A.pipe_vision_img != null ) ) {
					A.pipe_vision_img = new Image( A, A.loc, null, 20, A.dir );
				}
				this.pipes_shown.Add( A.pipe_vision_img );

				if ( this.client != null ) {
					this.client.images.Add( A.pipe_vision_img );
				}
			}
			return;
		}

		// Function from file: ventcrawling.dm
		public virtual void handle_ventcrawl( Obj_Machinery_Atmospherics A = null ) {
			Obj_Machinery_Atmospherics vent_found = null;
			Obj_Machinery_Atmospherics machine = null;
			Pipeline vent_found_parent = null;
			Obj_Item I = null;
			int failed = 0;

			
			if ( !Lang13.Bool( this.ventcrawler ) || !this.Adjacent( A ) ) {
				return;
			}

			if ( this.stat != 0 ) {
				this.WriteMsg( "You must be conscious to do this!" );
				return;
			}

			if ( Lang13.Bool( this.lying ) ) {
				this.WriteMsg( "You can't vent crawl while you're stunned!" );
				return;
			}

			if ( this.restrained() ) {
				this.WriteMsg( "You can't vent crawl while you're restrained!" );
				return;
			}

			if ( Lang13.Bool( this.buckled_mob ) ) {
				this.WriteMsg( "You can't vent crawl with " + this.buckled_mob + " on you!" );
				return;
			}

			if ( this.buckled != null ) {
				this.WriteMsg( "You can't vent crawl while buckled!" );
				return;
			}

			if ( A != null ) {
				vent_found = A;

				if ( !( vent_found is Obj_Machinery_Atmospherics_Components_Unary ) || !vent_found.can_crawl_through() ) {
					vent_found = null;
				}
			}

			if ( !( vent_found != null ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 1 ), typeof(Obj_Machinery_Atmospherics) )) {
					machine = _a;
					

					if ( GlobalFuncs.is_type_in_list( machine, GlobalVars.ventcrawl_machinery ) ) {
						vent_found = machine;
					}

					if ( !vent_found.can_crawl_through() ) {
						vent_found = null;
					}

					if ( vent_found != null ) {
						break;
					}
				}
			}

			if ( vent_found != null ) {
				vent_found_parent = ((dynamic)vent_found).parents[1];

				if ( vent_found_parent != null && ( vent_found_parent.members.len != 0 || vent_found_parent.other_atmosmch != null ) ) {
					this.visible_message( "<span class='notice'>" + this + " begins climbing into the ventilation system...</span>", "<span class='notice'>You begin climbing into the ventilation system...</span>" );

					if ( !GlobalFuncs.do_after( this, 25, null, vent_found ) ) {
						return;
					}

					if ( !( this.client != null ) ) {
						return;
					}

					if ( this is Mob_Living_Carbon && this.contents.len != 0 && Convert.ToDouble( this.ventcrawler ) < 2 ) {
						
						foreach (dynamic _b in Lang13.Enumerate( this.contents, typeof(Obj_Item) )) {
							I = _b;
							
							failed = 0;

							if ( I is Obj_Item_Weapon_Implant ) {
								continue;
							} else {
								failed++;
							}

							if ( failed != 0 ) {
								this.WriteMsg( "<span class='warning'>You can't crawl around in the ventilation ducts with items!</span>" );
								return;
							}
						}
					}
					this.visible_message( "<span class='notice'>" + this + " scrambles into the ventilation ducts!</span>", "<span class='notice'>You climb into the ventilation ducts.</span>" );
					this.forceMove( vent_found );
				}
			} else {
				this.WriteMsg( "<span class='warning'>This ventilation duct is not connected to anything!</span>" );
			}
			return;
		}

		// Function from file: say.dm
		public virtual int radio( dynamic message = null, string message_mode = null, ByTable spans = null ) {
			Obj_Item_Device_Radio_Intercom I = null;

			
			switch ((string)( message_mode )) {
				case "right hand":
					
					if ( Lang13.Bool( this.r_hand ) ) {
						((Obj_Item)this.r_hand).talk_into( this, message, null, spans );
					}
					return 3;
					break;
				case "left hand":
					
					if ( Lang13.Bool( this.l_hand ) ) {
						((Obj_Item)this.l_hand).talk_into( this, message, null, spans );
					}
					return 3;
					break;
				case "intercom":
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, 1 ), typeof(Obj_Item_Device_Radio_Intercom) )) {
						I = _a;
						
						I.talk_into( this, message, null, spans );
					}
					return 3;
					break;
				case "binary":
					
					if ( this.binarycheck() ) {
						this.robot_talk( message );
					}
					return 3;
					break;
				case "whisper":
					this.__CallVerb("Whisper", message );
					return 4;
					break;
			}
			return 0;
		}

		// Function from file: say.dm
		public virtual dynamic treat_message( dynamic message = null ) {
			
			if ( this.getBrainLoss() >= 60 ) {
				message = GlobalFuncs.derpspeech( message, this.stuttering );
			}

			if ( this.stuttering != 0 ) {
				message = GlobalFuncs.stutter( message );
			}

			if ( this.slurring != 0 ) {
				message = GlobalFuncs.slur( message );
			}
			message = GlobalFuncs.capitalize( message );
			return message;
		}

		// Function from file: say.dm
		public virtual int handle_inherent_channels( dynamic message = null, string message_mode = null ) {
			string msg = null;
			dynamic M = null;

			
			if ( message_mode == "changeling" ) {
				
				switch ((int)( this.lingcheck() )) {
					case 2:
						msg = "<i><font color=#800080><b>" + this.mind.changeling.changelingID + ":</b> " + message + "</font></i>";
						GlobalFuncs.log_say( "" + this.mind.changeling.changelingID + "/" + this.key + " : " + message );

						foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list )) {
							M = _b;
							

							if ( GlobalVars.dead_mob_list.Contains( M ) ) {
								M.WriteMsg( new Txt( "<a href='?src=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( "'>(F)</a> " ).item( msg ).ToString() );
							} else {
								
								switch ((int)( ((Mob)M).lingcheck() )) {
									case 2:
										M.WriteMsg( msg );
										break;
									case 1:
										
										if ( Rand13.PercentChance( 40 ) ) {
											M.WriteMsg( "<i><font color=#800080>We can faintly sense another of our kind trying to communicate through the hivemind...</font></i>" );
										}
										break;
								}
							}
						}
						return 1;
						break;
					case 1:
						this.WriteMsg( "<i><font color=#800080>Our senses have not evolved enough to be able to communicate this way...</font></i>" );
						return 1;
						break;
				}
			}

			if ( message_mode == "alientalk" ) {
				
				if ( Lang13.Bool( this.hivecheck() ) ) {
					this.alien_talk( message );
					return 1;
				}
			}
			return 0;
		}

		// Function from file: say.dm
		public virtual string get_message_mode( dynamic message = null ) {
			
			if ( String13.SubStr( message, 1, 2 ) == ";" ) {
				return "headset";
			} else if ( Lang13.Length( message ) > 2 ) {
				return GlobalVars.department_radio_keys[String13.SubStr( message, 1, 3 )];
			}
			return null;
		}

		// Function from file: say.dm
		public bool check_emote( dynamic message = null ) {
			
			if ( String13.SubStr( message, 1, 2 ) == "*" ) {
				this.emote( String13.SubStr( message, 2, 0 ) );
				return true;
			}
			return false;
		}

		// Function from file: say.dm
		public virtual bool can_speak_vocal( dynamic message = null ) {
			
			if ( Lang13.Bool( this.disabilities & 2 ) ) {
				return false;
			}

			if ( this.is_muzzled() ) {
				return false;
			}

			if ( !this.IsVocal() ) {
				return false;
			}
			return true;
		}

		// Function from file: say.dm
		public bool can_speak_basic( dynamic message = null ) {
			
			if ( this.client != null ) {
				
				if ( ( this.client.prefs.muted & 1 ) != 0 ) {
					this.WriteMsg( "<span class='danger'>You cannot speak in IC (muted).</span>" );
					return false;
				}

				if ( this.client.handle_spam_prevention( message, 1 ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: living_defense.dm
		public virtual bool grabbedby( dynamic user = null, bool? supress_message = null ) {
			supress_message = supress_message ?? false;

			Obj_Item_Weapon_Grab G = null;

			
			if ( user == this || Lang13.Bool( this.anchored ) ) {
				return false;
			}

			if ( !( ( this.status_flags & 8 ) != 0 ) ) {
				return false;
			}
			GlobalFuncs.add_logs( user, this, "grabbed", null, "passively" );

			if ( Lang13.Bool( this.anchored ) || !this.Adjacent( user ) ) {
				return false;
			}

			if ( this.buckled != null ) {
				user.WriteMsg( new Txt( "<span class='warning'>You cannot grab " ).item( this ).str( ", " ).he_she_it_they().str( " is buckled in!</span>" ).ToString() );
				return false;
			}
			G = new Obj_Item_Weapon_Grab( user, this );

			if ( !((Mob)user).put_in_active_hand( G ) ) {
				GlobalFuncs.qdel( G );
			}
			G.synch();
			this.LAssailant = user;
			GlobalFuncs.playsound( this.loc, "sound/weapons/thudswoosh.ogg", 50, 1, -1 );

			if ( !( supress_message == true ) ) {
				this.visible_message( "<span class='warning'>" + user + " has grabbed " + this + " passively!</span>" );
			}
			return false;
		}

		// Function from file: living_defense.dm
		public void spreadFire( Ent_Static L = null ) {
			dynamic L_old_on_fire = null;

			
			if ( !( L is Mob_Living ) ) {
				return;
			}
			L_old_on_fire = ((dynamic)L).on_fire;

			if ( this.on_fire ) {
				this.fire_stacks /= 2;
				((dynamic)L).fire_stacks += this.fire_stacks;
				((dynamic)L).IgniteMob();
			}

			if ( Lang13.Bool( L_old_on_fire ) ) {
				((dynamic)L).fire_stacks /= 2;
				this.fire_stacks += Convert.ToDouble( ((dynamic)L).fire_stacks );
				this.IgniteMob();
			}
			return;
		}

		// Function from file: living_defense.dm
		public virtual bool handle_fire(  ) {
			GasMixture G = null;
			dynamic location = null;

			
			if ( this.fire_stacks < 0 ) {
				this.fire_stacks = Num13.MinInt( 0, ((int)( this.fire_stacks + 1 )) );
			}

			if ( !this.on_fire ) {
				return true;
			}

			if ( this.fire_stacks > 0 ) {
				this.adjust_fire_stacks( -0.1 );
			} else {
				this.ExtinguishMob();
				return false;
			}
			G = this.loc.return_air();

			if ( !Lang13.Bool( G.gases["o2"] ) || Convert.ToDouble( G.gases["o2"][1] ) < 1 ) {
				this.ExtinguishMob();
				return false;
			}
			location = GlobalFuncs.get_turf( this );
			((Tile)location).hotspot_expose( 700, 50, true );
			return false;
		}

		// Function from file: living_defense.dm
		public void adjust_fire_stacks( double add_fire_stacks = 0 ) {
			this.fire_stacks = Num13.MaxInt( -20, Num13.MinInt( ((int)( this.fire_stacks + add_fire_stacks )), 20 ) );

			if ( this.on_fire && this.fire_stacks <= 0 ) {
				this.ExtinguishMob();
			}
			return;
		}

		// Function from file: living_defense.dm
		public virtual void update_fire( string fire_icon = null ) {
			return;
		}

		// Function from file: living_defense.dm
		public virtual void ExtinguishMob(  ) {
			
			if ( this.on_fire ) {
				this.on_fire = false;
				this.fire_stacks = 0;
				this.AddLuminosity( -3 );
				this.clear_alert( "fire" );
				this.update_fire();
			}
			return;
		}

		// Function from file: living_defense.dm
		public virtual void IgniteMob(  ) {
			
			if ( this.fire_stacks > 0 && !this.on_fire ) {
				this.on_fire = true;
				this.visible_message( "<span class='warning'>" + this + " catches fire!</span>", "<span class='userdanger'>You're set on fire!</span>" );
				this.AddLuminosity( 3 );
				this.throw_alert( "fire", typeof(Obj_Screen_Alert_Fire) );
				this.update_fire();
			}
			return;
		}

		// Function from file: living_defense.dm
		public virtual void on_hit( dynamic proj_type = null ) {
			return;
		}

		// Function from file: living_defense.dm
		public virtual double getarmor( dynamic def_zone = null, string type = null ) {
			return 0;
		}

		// Function from file: living_defense.dm
		public double run_armor_check( dynamic def_zone = null, string attack_flag = null, string absorb_text = null, string soften_text = null, int? armour_penetration = null, dynamic penetrated_text = null ) {
			attack_flag = attack_flag ?? "melee";

			double armor = 0;

			armor = this.getarmor( def_zone, attack_flag );

			if ( armor != 0 && Lang13.Bool( armour_penetration ) ) {
				armor = Num13.MaxInt( 0, ((int)( armor - ( armour_penetration ??0) )) );

				if ( Lang13.Bool( penetrated_text ) ) {
					this.WriteMsg( "<span class='userdanger'>" + penetrated_text + "</span>" );
				} else {
					this.WriteMsg( "<span class='userdanger'>Your armor was penetrated!</span>" );
				}
			}

			if ( armor >= 100 ) {
				
				if ( Lang13.Bool( absorb_text ) ) {
					this.WriteMsg( "<span class='userdanger'>" + absorb_text + "</span>" );
				} else {
					this.WriteMsg( "<span class='userdanger'>Your armor absorbs the blow!</span>" );
				}
			} else if ( armor > 0 ) {
				
				if ( Lang13.Bool( soften_text ) ) {
					this.WriteMsg( "<span class='userdanger'>" + soften_text + "</span>" );
				} else {
					this.WriteMsg( "<span class='userdanger'>Your armor softens the blow!</span>" );
				}
			}
			return armor;
		}

		// Function from file: living.dm
		public virtual bool can_use_guns( Obj_Item_Weapon_Gun G = null ) {
			
			if ( !this.IsAdvancedToolUser() ) {
				this.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return false;
			}
			return true;
		}

		// Function from file: living.dm
		public virtual void harvest( dynamic user = null ) {
			dynamic path = null;
			int? i = null;

			
			if ( Lang13.Bool( GlobalFuncs.qdeleted( this ) ) ) {
				return;
			}

			if ( this.butcher_results != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.butcher_results )) {
					path = _a;
					
					i = null;
					i = 1;

					while (( i ??0) <= Convert.ToDouble( this.butcher_results[path] )) {
						Lang13.Call( path, this.loc );
						i++;
					}
					this.butcher_results.Remove( path );
				}
			}
			this.visible_message( "<span class='notice'>" + user + " butchers " + this + ".</span>" );
			this.gib();
			return;
		}

		// Function from file: living.dm
		public virtual double get_permeability_protection(  ) {
			return 0;
		}

		// Function from file: living.dm
		public virtual bool can_track( Mob user = null ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( this );

			if ( !Lang13.Bool( T ) ) {
				return false;
			}

			if ( Convert.ToInt32( T.z ) == 2 ) {
				return false;
			}

			if ( Convert.ToDouble( T.z ) >= 7 ) {
				return false;
			}

			if ( user != null && this == user ) {
				return false;
			}

			if ( this.invisibility != 0 || this.alpha == 0 ) {
				return false;
			}

			if ( this.digitalcamo || this.digitalinvis ) {
				return false;
			}

			if ( !GlobalFuncs.near_camera( this ) ) {
				return false;
			}
			return true;
		}

		// Function from file: living.dm
		public virtual dynamic get_standard_pixel_y_offset( int? lying = null ) {
			lying = lying ?? 0;

			return Lang13.Initial( this, "pixel_y" );
		}

		// Function from file: living.dm
		public virtual dynamic get_standard_pixel_x_offset( int? lying = null ) {
			lying = lying ?? 0;

			return Lang13.Initial( this, "pixel_x" );
		}

		// Function from file: living.dm
		public dynamic get_temperature( GasMixture environment = null ) {
			dynamic loc_temp = null;
			Ent_Static M = null;
			dynamic heat_turf = null;
			Ent_Static C = null;
			GasMixture G = null;

			loc_temp = 273.41;

			if ( this.loc is Obj_Mecha ) {
				M = this.loc;
				loc_temp = ((dynamic)M).return_temperature();
			} else if ( this.loc is Obj_Structure_TransitTubePod ) {
				loc_temp = environment.temperature;
			} else if ( GlobalFuncs.get_turf( this ) is Tile_Space ) {
				heat_turf = GlobalFuncs.get_turf( this );
				loc_temp = heat_turf.temperature;
			} else if ( this.loc is Obj_Machinery_Atmospherics_Components_Unary_CryoCell ) {
				C = this.loc;
				G = ((dynamic)C).airs[1];

				if ( G.total_moles() < 10 ) {
					loc_temp = environment.temperature;
				} else {
					loc_temp = G.temperature;
				}
			} else {
				loc_temp = environment.temperature;
			}
			return loc_temp;
		}

		// Function from file: living.dm
		public void do_jitter_animation( int jitteriness = 0 ) {
			int amplitude = 0;
			int pixel_x_diff = 0;
			int pixel_y_diff = 0;
			dynamic final_pixel_x = null;
			dynamic final_pixel_y = null;

			amplitude = Num13.MinInt( 4, ((int)( jitteriness / 100 + 1 )) );
			pixel_x_diff = Rand13.Int( -amplitude, amplitude );
			pixel_y_diff = Rand13.Int( ((int)( -amplitude / 3 )), ((int)( amplitude / 3 )) );
			final_pixel_x = this.get_standard_pixel_x_offset( this.lying );
			final_pixel_y = this.get_standard_pixel_y_offset( this.lying );
			Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_x", this.pixel_x + pixel_x_diff ).Set( "pixel_y", this.pixel_y + pixel_y_diff ).Set( "time", 2 ).Set( "loop", 6 ) );
			Icon13.Animate( new ByTable().Set( "pixel_x", final_pixel_x ).Set( "pixel_y", final_pixel_y ).Set( "time", 2 ) );
			this.floating = false;
			return;
		}

		// Function from file: living.dm
		public virtual bool check_ear_prot(  ) {
			return false;
		}

		// Function from file: living.dm
		public virtual double check_eye_prot(  ) {
			return 0;
		}

		// Function from file: living.dm
		public virtual bool flash_eyes( double? intensity = null, bool? override_blindness_check = null, bool? affect_silicon = null, bool? visual = null, Type type = null ) {
			intensity = intensity ?? 1;
			override_blindness_check = override_blindness_check ?? false;
			affect_silicon = affect_silicon ?? false;
			visual = visual ?? false;
			type = type ?? typeof(Obj_Screen_Fullscreen_Flash);

			
			if ( this.check_eye_prot() < ( intensity ??0) && ( override_blindness_check == true || !Lang13.Bool( this.disabilities & 1 ) ) ) {
				this.overlay_fullscreen( "flash", type );
				GlobalFuncs.addtimer( this, "clear_fullscreen", 25, GlobalVars.FALSE, "flash", 25 );
				return true;
			}
			return false;
		}

		// Function from file: living.dm
		[VerbInfo( name: "float" )]
		public virtual void f_float( bool on = false ) {
			bool _fixed = false;
			dynamic final_pixel_y = null;

			
			if ( this.throwing ) {
				return;
			}
			_fixed = false;

			if ( Lang13.Bool( this.anchored ) || this.buckled != null && Lang13.Bool( this.buckled.anchored ) ) {
				_fixed = true;
			}

			if ( on && !this.floating && !_fixed ) {
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_y", this.pixel_y + 2 ).Set( "time", 10 ).Set( "loop", -1 ) );
				this.floating = true;
			} else if ( ( !on || _fixed ) && this.floating ) {
				final_pixel_y = this.get_standard_pixel_y_offset( this.lying );
				Icon13.Animate( new ByTable().Set( 1, this ).Set( "pixel_y", final_pixel_y ).Set( "time", 10 ) );
				this.floating = false;
			}
			return;
		}

		// Function from file: living.dm
		public virtual dynamic get_visible_name(  ) {
			return this.name;
		}

		// Function from file: living.dm
		public virtual void resist_restraints(  ) {
			return;
		}

		// Function from file: living.dm
		public virtual void resist_fire(  ) {
			return;
		}

		// Function from file: living.dm
		public virtual void resist_buckle(  ) {
			this.buckled.user_unbuckle_mob( this );
			return;
		}

		// Function from file: living.dm
		public virtual dynamic getTrail(  ) {
			return null;
		}

		// Function from file: living.dm
		public void makeTrail( Ent_Static T = null, dynamic M = null ) {
			dynamic H = null;
			bool blood_exists = false;
			dynamic trail_type = null;
			Obj_Effect_Decal_Cleanable_TrailHolder C = null;
			double? newdir = null;
			Obj_Effect_Decal_Cleanable_TrailHolder H2 = null;
			dynamic DNA_helper = null;

			
			if ( !GlobalFuncs.has_gravity( M ) ) {
				return;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( H.dna.species.specflags.Contains( 1024 ) || !( H.blood_max != 0 ) || H.bleedsuppress ) {
					return;
				}
			}
			blood_exists = false;
			trail_type = ((Mob_Living)M).getTrail();

			foreach (dynamic _a in Lang13.Enumerate( M.loc, typeof(Obj_Effect_Decal_Cleanable_TrailHolder) )) {
				C = _a;
				
				blood_exists = true;
			}

			if ( M.loc is Tile_Simulated && trail_type != null ) {
				newdir = Map13.GetDistance( T, M.loc );

				if ( newdir != Lang13.DoubleNullable( M.dir ) ) {
					newdir = ((int)( newdir ??0 )) | Convert.ToInt32( M.dir );

					if ( newdir == 3 ) {
						newdir = GlobalVars.NORTH;
					} else if ( newdir == 12 ) {
						newdir = GlobalVars.EAST;
					}
				}

				if ( new ByTable(new object [] { 1, 2, 4, 8 }).Contains( newdir ) && Rand13.PercentChance( 50 ) ) {
					newdir = Num13.Rotate( Map13.GetDistance( T, M.loc ), 180 );
				}

				if ( !blood_exists ) {
					new Obj_Effect_Decal_Cleanable_TrailHolder( M.loc );
				}

				foreach (dynamic _b in Lang13.Enumerate( M.loc, typeof(Obj_Effect_Decal_Cleanable_TrailHolder) )) {
					H2 = _b;
					

					if ( ( !H2.existing_dirs.Contains( newdir ) || trail_type == "trails_1" || trail_type == "trails_2" ) && H2.existing_dirs.len <= 16 ) {
						H2.existing_dirs.Add( newdir );
						H2.overlays.Add( new Image( "icons/effects/blood.dmi", trail_type, null, null, newdir ) );

						if ( Lang13.Bool( M.has_dna() ) ) {
							DNA_helper = M;
							H2.blood_DNA[DNA_helper.dna.unique_enzymes] = DNA_helper.dna.blood_type;
						}
					}
				}
			}
			return;
		}

		// Function from file: living.dm
		[VerbInfo( name: "Examine Meta-Info (OOC)", group: "OOC", access: VerbAccess.InView, range: 125 )]
		public void Examine_OOC(  ) {
			
			if ( GlobalVars.config.allow_Metadata ) {
				
				if ( this.client != null ) {
					this.WriteMsg( "" + this + "'s Metainfo:<br>" + this.client.prefs.metadata );
				} else {
					this.WriteMsg( "" + this + " does not have any stored infomation!" );
				}
			} else {
				this.WriteMsg( "OOC Metadata is not supported by this server!" );
			}
			return;
		}

		// Function from file: living.dm
		public virtual void update_damage_overlays(  ) {
			return;
		}

		// Function from file: living.dm
		public virtual void revive(  ) {
			this.setToxLoss( 0 );
			this.setOxyLoss( 0 );
			this.setCloneLoss( false );
			this.setBrainLoss( 0 );
			this.setStaminaLoss( 0 );
			this.SetParalysis( 0 );
			this.SetStunned( 0 );
			this.SetWeakened( 0 );
			this.SetSleeping( 0 );
			this.radiation = 0;
			this.nutrition = 400;
			this.bodytemperature = 310;
			this.disabilities = 0;
			this.ear_deaf = 0;
			this.ear_damage = 0;
			this.hallucination = 0;
			this.heal_overall_damage( 1000, 1000 );
			this.ExtinguishMob();
			this.fire_stacks = 0;
			this.suiciding = 0;

			if ( this.stat == 2 ) {
				GlobalVars.dead_mob_list.Remove( this );
				GlobalVars.living_mob_list.Add( this );
			}
			this.stat = 0;
			this.set_blindness( 0 );
			this.set_blurriness( 0 );
			this.set_eye_damage( 0 );
			this.updatehealth();
			this.update_fire();
			this.regenerate_icons();
			this.reload_fullscreen();
			return;
		}

		// Function from file: living.dm
		public virtual void take_overall_damage( dynamic brute = null, dynamic burn = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			this.adjustBruteLoss( brute, updating_health );
			this.adjustFireLoss( burn, updating_health );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return;
		}

		// Function from file: living.dm
		public virtual void heal_overall_damage( dynamic brute = null, dynamic burn = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			this.adjustBruteLoss( -brute, updating_health );
			this.adjustFireLoss( -burn, updating_health );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return;
		}

		// Function from file: living.dm
		public virtual void take_organ_damage( dynamic brute = null, dynamic burn = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			this.adjustBruteLoss( brute );
			this.adjustFireLoss( burn );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return;
		}

		// Function from file: living.dm
		public virtual void heal_organ_damage( double brute = 0, double burn = 0, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			this.adjustBruteLoss( -brute, updating_health );
			this.adjustFireLoss( -burn, updating_health );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return;
		}

		// Function from file: living.dm
		public dynamic get_organ_target(  ) {
			Mob_Living shooter = null;
			string t = null;
			dynamic def_zone = null;

			shooter = this;
			t = shooter.zone_selected;

			if ( new ByTable(new object [] { "eyes", "mouth" }).Contains( t ) ) {
				t = "head";
			}
			def_zone = GlobalFuncs.ran_zone( t );
			return def_zone;
		}

		// Function from file: living.dm
		public virtual bool can_inject( dynamic user = null, bool error_msg = false, dynamic target_zone = null, bool? penetrate_thick = null ) {
			return true;
		}

		// Function from file: living.dm
		public virtual dynamic electrocute_act( dynamic shock_damage = null, dynamic source = null, double? siemens_coeff = null, bool? safety = null, bool? _override = null, bool? tesla_shock = null ) {
			siemens_coeff = siemens_coeff ?? 1;
			safety = safety ?? false;
			_override = _override ?? false;

			return 0;
		}

		// Function from file: living.dm
		public bool check_contents_for( Type A = null ) {
			ByTable L = null;
			Obj B = null;

			L = this.get_contents();

			foreach (dynamic _a in Lang13.Enumerate( L, typeof(Obj) )) {
				B = _a;
				

				if ( B.type == A ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: living.dm
		[VerbInfo( name: "Rest", group: "IC" )]
		public void lay_down(  ) {
			this.resting = !( this.resting != 0 ) ?1:0;
			this.WriteMsg( "<span class='notice'>You are now " + ( this.resting != 0 ? "resting" : "getting up" ) + ".</span>" );
			this.update_canmove();
			return;
		}

		// Function from file: living.dm
		[VerbInfo( name: "Sleep", group: "IC" )]
		public void mob_sleep(  ) {
			
			if ( this.sleeping != 0 ) {
				this.WriteMsg( "<span class='notice'>You are already sleeping.</span>" );
				return;
			} else if ( Interface13.Alert( this, "You sure you want to sleep for a while?", "Sleep", "Yes", "No" ) == "Yes" ) {
				this.SetSleeping( 20 );
			}
			this.update_canmove();
			return;
		}

		// Function from file: living.dm
		public void setMaxHealth( dynamic newMaxHealth = null ) {
			this.maxHealth = newMaxHealth;
			return;
		}

		// Function from file: living.dm
		public dynamic getMaxHealth(  ) {
			return this.maxHealth;
		}

		// Function from file: living.dm
		public virtual bool setStaminaLoss( dynamic amount = null ) {
			return false;
		}

		// Function from file: living.dm
		public virtual bool adjustStaminaLoss( dynamic amount = null ) {
			return false;
		}

		// Function from file: living.dm
		public dynamic getStaminaLoss(  ) {
			return this.staminaloss;
		}

		// Function from file: living.dm
		public bool setBrainLoss( int amount = 0 ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.brainloss = amount;
			return false;
		}

		// Function from file: living.dm
		public bool adjustBrainLoss( dynamic amount = null ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.brainloss = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.brainloss + Convert.ToDouble( amount ) )), Convert.ToInt32( this.maxHealth * 2 ) ) );
			return false;
		}

		// Function from file: living.dm
		public int getBrainLoss(  ) {
			return this.brainloss;
		}

		// Function from file: living.dm
		public bool setCloneLoss( bool amount = false, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.cloneloss = amount ?1:0;

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return false;
		}

		// Function from file: living.dm
		public virtual dynamic adjustCloneLoss( dynamic amount = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return 0;
			}
			this.cloneloss = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.cloneloss + Convert.ToDouble( amount ) )), Convert.ToInt32( this.maxHealth * 2 ) ) );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return null;
		}

		// Function from file: living.dm
		public double getCloneLoss(  ) {
			return this.cloneloss;
		}

		// Function from file: living.dm
		public virtual dynamic adjustFireLoss( dynamic amount = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return 0;
			}
			this.fireloss = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.fireloss + Convert.ToDouble( amount ) )), Convert.ToInt32( this.maxHealth * 2 ) ) );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return null;
		}

		// Function from file: living.dm
		public virtual double getFireLoss(  ) {
			return this.fireloss;
		}

		// Function from file: living.dm
		public bool setToxLoss( dynamic amount = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.toxloss = amount;

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return false;
		}

		// Function from file: living.dm
		public virtual dynamic adjustToxLoss( dynamic amount = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return 0;
			}
			this.toxloss = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( this.toxloss + amount ), Convert.ToInt32( this.maxHealth * 2 ) ) );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return null;
		}

		// Function from file: living.dm
		public virtual dynamic getToxLoss(  ) {
			return this.toxloss;
		}

		// Function from file: living.dm
		public bool setOxyLoss( dynamic amount = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return false;
			}
			this.oxyloss = amount;

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return false;
		}

		// Function from file: living.dm
		public virtual dynamic adjustOxyLoss( dynamic amount = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return 0;
			}
			this.oxyloss = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( this.oxyloss + amount ), Convert.ToInt32( this.maxHealth * 2 ) ) );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return null;
		}

		// Function from file: living.dm
		public dynamic getOxyLoss(  ) {
			return this.oxyloss;
		}

		// Function from file: living.dm
		public virtual dynamic adjustBruteLoss( dynamic amount = null, bool? updating_health = null ) {
			updating_health = updating_health ?? true;

			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return 0;
			}
			this.bruteloss = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.bruteloss + Convert.ToDouble( amount ) )), Convert.ToInt32( this.maxHealth * 2 ) ) );

			if ( updating_health == true ) {
				this.updatehealth();
			}
			return null;
		}

		// Function from file: living.dm
		public virtual double getBruteLoss(  ) {
			return this.bruteloss;
		}

		// Function from file: living.dm
		public dynamic adjustBodyTemp( dynamic actual = null, dynamic desired = null, dynamic incrementboost = null ) {
			dynamic temperature = null;
			double difference = 0;
			double increments = 0;
			double change = 0;

			temperature = actual;
			difference = Math.Abs( Convert.ToDouble( actual - desired ) );
			increments = difference / 10;
			change = increments * Convert.ToDouble( incrementboost );

			if ( Convert.ToDouble( actual ) < Convert.ToDouble( desired ) ) {
				temperature += change;

				if ( Convert.ToDouble( actual ) > Convert.ToDouble( desired ) ) {
					temperature = desired;
				}
			}

			if ( Convert.ToDouble( actual ) > Convert.ToDouble( desired ) ) {
				temperature -= change;

				if ( Convert.ToDouble( actual ) < Convert.ToDouble( desired ) ) {
					temperature = desired;
				}
			}
			return temperature;
		}

		// Function from file: living.dm
		public virtual dynamic calculate_affecting_pressure( dynamic pressure = null ) {
			return pressure;
		}

		// Function from file: living.dm
		public virtual void updatehealth(  ) {
			
			if ( ( this.status_flags & 4096 ) != 0 ) {
				return;
			}
			this.health = this.maxHealth - this.getOxyLoss() - this.getToxLoss() - this.getFireLoss() - this.getBruteLoss() - this.getCloneLoss();
			this.update_stat();
			return;
		}

		// Function from file: living.dm
		public virtual bool InCritical(  ) {
			return Convert.ToDouble( this.health ) < 0 && Convert.ToDouble( this.health ) > -95 && this.stat == 1;
		}

		// Function from file: living.dm
		public bool PushAM( Ent_Static AM = null ) {
			int t = 0;
			Ent_Static W = null;
			Obj_Structure_Window win = null;

			
			if ( this.now_pushing ) {
				return true;
			}

			if ( !Lang13.Bool( ((dynamic)AM).anchored ) ) {
				this.now_pushing = true;
				t = Map13.GetDistance( this, AM );

				if ( AM is Obj_Structure_Window ) {
					W = AM;

					if ( Lang13.Bool( ((dynamic)W).fulltile ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( W, t ), typeof(Obj_Structure_Window) )) {
							win = _a;
							
							this.now_pushing = false;
							return false;
						}
					}
				}

				if ( this.pulling == AM ) {
					this.stop_pulling();
				}
				Map13.Step( (Ent_Dynamic)(AM), t );
				this.now_pushing = false;
			}
			return false;
		}

		// Function from file: living.dm
		public virtual dynamic ObjBump( Ent_Static O = null ) {
			return null;
		}

		// Function from file: living.dm
		public bool MobBump( Ent_Static M = null ) {
			dynamic MM = null;
			Ent_Static oldloc = null;
			Ent_Static oldMloc = null;
			dynamic M_passmob = null;
			int src_passmob = 0;

			this.spreadFire( M );

			if ( this.now_pushing ) {
				return true;
			}

			if ( M is Mob_Living ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( M, 1 ) )) {
					MM = _a;
					

					if ( MM.pulling == M && Lang13.Bool( ((dynamic)M).restrained() ) && !((Mob)MM).restrained() && Lang13.Bool( MM.stat ) == false || Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Grab), ((dynamic)M).grabbed_by.len ) ) ) {
						
						if ( !( Game13.time % 5 != 0 ) ) {
							this.WriteMsg( "<span class='warning'>" + M + " is restrained, you cannot push past.</span>" );
						}
						return true;
					}

					if ( ((dynamic)M).pulling == MM && ((Mob)MM).restrained() && !Lang13.Bool( ((dynamic)M).restrained() ) && Lang13.Bool( ((dynamic)M).stat ) == false ) {
						
						if ( !( Game13.time % 5 != 0 ) ) {
							this.WriteMsg( "<span class='warning'>" + M + " is restraining " + MM + ", you cannot push past.</span>" );
						}
						return true;
					}
				}
			}

			if ( ( ((dynamic)M).a_intent == "help" || Lang13.Bool( ((dynamic)M).restrained() ) ) && ( this.a_intent == "help" || this.restrained() ) && Lang13.Bool( ((dynamic)M).canmove ) && this.canmove && !Lang13.Bool( ((dynamic)M).buckled ) && !Lang13.Bool( ((dynamic)M).buckled_mob ) ) {
				
				if ( this.loc != null && !this.loc.Adjacent( M.loc ) ) {
					return true;
				}
				this.now_pushing = true;
				oldloc = this.loc;
				oldMloc = M.loc;
				M_passmob = ((dynamic)M).pass_flags & 16;
				src_passmob = this.pass_flags & 16;
				((dynamic)M).pass_flags |= 16;
				this.pass_flags |= 16;
				((dynamic)M).Move( oldloc );
				this.Move( oldMloc );

				if ( !( src_passmob != 0 ) ) {
					this.pass_flags &= 65519;
				}

				if ( !Lang13.Bool( M_passmob ) ) {
					((dynamic)M).pass_flags &= 65519;
				}
				this.now_pushing = false;
				return true;
			}

			if ( !Lang13.Bool( ((dynamic)M).status_flags & 8 ) ) {
				return true;
			}

			if ( Lang13.Bool( ((dynamic)M).r_hand ) && ((dynamic)M).r_hand is Obj_Item_Weapon_Shield_Riot ) {
				return true;
			}

			if ( Lang13.Bool( ((dynamic)M).l_hand ) && ((dynamic)M).l_hand is Obj_Item_Weapon_Shield_Riot ) {
				return true;
			}
			return false;
		}

		// Function from file: living.dm
		public virtual void generateStaticOverlay(  ) {
			Image staticOverlay = null;

			this.staticOverlays.Add( new ByTable(new object [] { "static", "blank", "letter" }) );
			staticOverlay = new Image( GlobalFuncs.getStaticIcon( new Icon( this.icon, this.icon_state ) ), this );
			staticOverlay.v_override = true;
			this.staticOverlays["static"] = staticOverlay;
			staticOverlay = new Image( GlobalFuncs.getBlankIcon( new Icon( this.icon, this.icon_state ) ), this );
			staticOverlay.v_override = true;
			this.staticOverlays["blank"] = staticOverlay;
			staticOverlay = GlobalFuncs.getLetterImage( this );
			staticOverlay.v_override = true;
			this.staticOverlays["letter"] = staticOverlay;
			return;
		}

		// Function from file: life.dm
		public virtual bool handle_regular_hud_updates(  ) {
			
			if ( !( this.client != null ) ) {
				return false;
			}
			this.update_action_buttons();
			return true;
		}

		// Function from file: life.dm
		public virtual void update_damage_hud(  ) {
			return;
		}

		// Function from file: life.dm
		public void give_action_button( Obj_Item I = null, int? recursive = null ) {
			recursive = recursive ?? 0;

			Obj_Item T = null;

			
			if ( Lang13.Bool( I.action_button_name ) ) {
				
				if ( !( I.action != null ) ) {
					
					if ( I is Obj_Item_Organ_Internal ) {
						I.action = new Action_ItemAction_OrganAction();
					} else if ( I.action_button_is_hands_free ) {
						I.action = new Action_ItemAction_HandsFree();
					} else {
						I.action = new Action_ItemAction();
					}
					I.action.name = I.action_button_name;
					I.action.target = I;
				}
				I.action.Grant( this );
			}

			if ( Lang13.Bool( recursive ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( I, typeof(Obj_Item) )) {
					T = _a;
					
					this.give_action_button( T, ( recursive ??0) - 1 );
				}
			}
			return;
		}

		// Function from file: life.dm
		public virtual void handle_actions(  ) {
			Action A = null;
			Obj_Item I = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.actions, typeof(Action) )) {
				A = _a;
				

				if ( A.CheckRemoval( this ) ) {
					A.Remove( this );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				I = _b;
				
				this.give_action_button( I, 1 );
			}
			return;
		}

		// Function from file: life.dm
		public virtual void handle_disabilities(  ) {
			
			if ( this.eye_blind != 0 ) {
				
				if ( !( this.stat != 0 ) && !Lang13.Bool( this.disabilities & 1 ) ) {
					this.eye_blind = Num13.MaxInt( this.eye_blind - 1, 0 );

					if ( this.client != null && !( this.eye_blind != 0 ) ) {
						this.clear_alert( "blind" );
						this.clear_fullscreen( "blind" );
					}
				} else {
					this.eye_blind = Num13.MaxInt( this.eye_blind - 1, 1 );
				}
			} else if ( this.eye_blurry != 0 ) {
				this.eye_blurry = Num13.MaxInt( this.eye_blurry - 1, 0 );

				if ( this.client != null && !( this.eye_blurry != 0 ) ) {
					this.clear_fullscreen( "blurry" );
				}
			}

			if ( Lang13.Bool( this.disabilities & 4 ) ) {
				this.setEarDamage( -1, Num13.MaxInt( ((int)( this.ear_deaf ??0 )), 1 ) );
			} else if ( this.ear_damage < 100 ) {
				this.adjustEarDamage( -0.05, -1 );
			}
			return;
		}

		// Function from file: life.dm
		public virtual void handle_status_effects(  ) {
			
			if ( this.paralysis != 0 ) {
				this.AdjustParalysis( -1 );
			}

			if ( this.stunned != 0 ) {
				this.AdjustStunned( -1 );
			}

			if ( this.weakened != 0 ) {
				this.AdjustWeakened( -1, true );
			}
			return;
		}

		// Function from file: life.dm
		public virtual void handle_stomach(  ) {
			return;
		}

		// Function from file: life.dm
		public virtual void handle_environment( GasMixture environment = null ) {
			return;
		}

		// Function from file: life.dm
		public virtual void handle_random_events(  ) {
			return;
		}

		// Function from file: life.dm
		public virtual void handle_blood(  ) {
			return;
		}

		// Function from file: life.dm
		public void handle_diginvis(  ) {
			Mob_Living_Silicon_Ai AI = null;

			
			if ( !( this.digitaldisguise != null ) ) {
				this.digitaldisguise = new Image( null, this );
			}
			this.digitaldisguise.v_override = true;

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_Living_Silicon_Ai) )) {
				AI = _a;
				
				AI.client.images.Or( this.digitaldisguise );
			}
			return;
		}

		// Function from file: life.dm
		public virtual void handle_chemicals_in_body(  ) {
			return;
		}

		// Function from file: life.dm
		public virtual void handle_mutations_and_radiation(  ) {
			this.radiation = 0;
			return;
		}

		// Function from file: life.dm
		public virtual void handle_breathing(  ) {
			return;
		}

		// Function from file: death.dm
		public void end_animation( Dynamic_Overlay animate = null ) {
			
			if ( !( animate != null ) ) {
				GlobalFuncs.qdel( this );
			} else {
				Task13.Schedule( 15, (Task13.Closure)(() => {
					
					if ( animate != null ) {
						GlobalFuncs.qdel( animate );
					}

					if ( this != null ) {
						GlobalFuncs.qdel( this );
					}
					return;
				}));
			}
			return;
		}

		// Function from file: death.dm
		public Dynamic_Overlay setup_animation( dynamic animation = null, int? prev_lying = null ) {
			Dynamic_Overlay animate = null;

			animate = null;
			this.notransform = 1;
			this.canmove = false;
			this.icon = null;
			this.invisibility = 101;
			this.alpha = 0;

			if ( !Lang13.Bool( prev_lying ) && Lang13.Bool( animation ) ) {
				animate = new Dynamic_Overlay( this.loc );
				animate.icon_state = "blank";
				animate.icon = "icons/mob/mob.dmi";
				animate.master = this;
			}
			return animate;
		}

		// Function from file: death.dm
		public virtual void dust_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			flick_name = flick_name ?? "";

			Icon13.Flick( flick_name, animate );
			return;
		}

		// Function from file: death.dm
		public virtual void spawn_dust(  ) {
			new Obj_Effect_Decal_Cleanable_Ash( this.loc );
			return;
		}

		// Function from file: death.dm
		public virtual void gib_animation( Dynamic_Overlay animate = null, string flick_name = null ) {
			flick_name = flick_name ?? "gibbed";

			Icon13.Flick( flick_name, animate );
			return;
		}

		// Function from file: death.dm
		public virtual void spawn_gibs(  ) {
			GlobalFuncs.gibs( this.loc, this.viruses );
			return;
		}

		// Function from file: damage_procs.dm
		public bool apply_effects( bool? stun = null, bool? weaken = null, bool? paralyze = null, bool? irradiate = null, bool? slur = null, bool? stutter = null, bool? eyeblur = null, bool? drowsy = null, double? blocked = null, bool? stamina = null, bool? jitter = null ) {
			stun = stun ?? false;
			weaken = weaken ?? false;
			paralyze = paralyze ?? false;
			irradiate = irradiate ?? false;
			slur = slur ?? false;
			stutter = stutter ?? false;
			eyeblur = eyeblur ?? false;
			drowsy = drowsy ?? false;
			blocked = blocked ?? 0;
			stamina = stamina ?? false;
			jitter = jitter ?? false;

			
			if ( ( blocked ??0) >= 100 ) {
				return false;
			}

			if ( stun == true ) {
				this.apply_effect( stun, "stun", blocked );
			}

			if ( weaken == true ) {
				this.apply_effect( weaken, "weaken", blocked );
			}

			if ( paralyze == true ) {
				this.apply_effect( paralyze, "paralize", blocked );
			}

			if ( irradiate == true ) {
				this.apply_effect( irradiate, "irradiate", blocked );
			}

			if ( slur == true ) {
				this.apply_effect( slur, "slur", blocked );
			}

			if ( stutter == true ) {
				this.apply_effect( stutter, "stutter", blocked );
			}

			if ( eyeblur == true ) {
				this.apply_effect( eyeblur, "eye_blur", blocked );
			}

			if ( drowsy == true ) {
				this.apply_effect( drowsy, "drowsy", blocked );
			}

			if ( stamina == true ) {
				this.apply_damage( stamina, "stamina", null, blocked );
			}

			if ( jitter == true ) {
				this.apply_effect( jitter, "jitter", blocked );
			}
			return true;
		}

		// Function from file: damage_procs.dm
		public virtual bool apply_effect( dynamic effect = null, dynamic effecttype = null, dynamic blocked = null ) {
			effect = effect ?? 0;
			effecttype = effecttype ?? "stun";
			blocked = blocked ?? 0;

			blocked = ( 100 - Convert.ToDouble( blocked ) ) / 100;

			if ( !Lang13.Bool( effect ) || Convert.ToDouble( blocked ) <= 0 ) {
				return false;
			}

			dynamic _a = effecttype; // Was a switch-case, sorry for the mess.
			if ( _a=="stun" ) {
				this.Stun( effect * blocked );
			} else if ( _a=="weaken" ) {
				this.Weaken( effect * blocked );
			} else if ( _a=="paralize" ) {
				this.Paralyse( effect * blocked );
			} else if ( _a=="irradiate" ) {
				this.radiation += Num13.MaxInt( Convert.ToInt32( effect * blocked ), 0 );
			} else if ( _a=="slur" ) {
				this.slurring = Num13.MaxInt( ((int)( this.slurring )), Convert.ToInt32( effect * blocked ) );
			} else if ( _a=="stutter" ) {
				
				if ( ( this.status_flags & 1 ) != 0 ) {
					this.stuttering = Num13.MaxInt( ((int)( this.stuttering )), Convert.ToInt32( effect * blocked ) );
				}
			} else if ( _a=="eye_blur" ) {
				this.blur_eyes( effect * blocked );
			} else if ( _a=="drowsy" ) {
				this.drowsyness = Num13.MaxInt( this.drowsyness, Convert.ToInt32( effect * blocked ) );
			} else if ( _a=="jitter" ) {
				
				if ( ( this.status_flags & 1 ) != 0 ) {
					this.jitteriness = Num13.MaxInt( this.jitteriness, Convert.ToInt32( effect * blocked ) );
				}
			}
			this.updatehealth();
			return true;
		}

		// Function from file: damage_procs.dm
		public bool apply_damages( bool? brute = null, bool? burn = null, bool? tox = null, bool? oxy = null, bool? clone = null, dynamic def_zone = null, double? blocked = null, bool? stamina = null ) {
			brute = brute ?? false;
			burn = burn ?? false;
			tox = tox ?? false;
			oxy = oxy ?? false;
			clone = clone ?? false;
			blocked = blocked ?? 0;
			stamina = stamina ?? false;

			
			if ( ( blocked ??0) >= 100 ) {
				return false;
			}

			if ( brute == true ) {
				this.apply_damage( brute, "brute", def_zone, blocked );
			}

			if ( burn == true ) {
				this.apply_damage( burn, "fire", def_zone, blocked );
			}

			if ( tox == true ) {
				this.apply_damage( tox, "tox", def_zone, blocked );
			}

			if ( oxy == true ) {
				this.apply_damage( oxy, "oxy", def_zone, blocked );
			}

			if ( clone == true ) {
				this.apply_damage( clone, "clone", def_zone, blocked );
			}

			if ( stamina == true ) {
				this.apply_damage( stamina, "stamina", def_zone, blocked );
			}
			return true;
		}

		// Function from file: damage_procs.dm
		public virtual dynamic apply_damage( dynamic damage = null, dynamic damagetype = null, dynamic def_zone = null, dynamic blocked = null ) {
			damage = damage ?? 0;
			damagetype = damagetype ?? "brute";
			blocked = blocked ?? 0;

			blocked = ( 100 - Convert.ToDouble( blocked ) ) / 100;

			if ( !Lang13.Bool( damage ) || Convert.ToDouble( blocked ) <= 0 ) {
				return 0;
			}

			dynamic _a = damagetype; // Was a switch-case, sorry for the mess.
			if ( _a=="brute" ) {
				this.adjustBruteLoss( damage * blocked );
			} else if ( _a=="fire" ) {
				this.adjustFireLoss( damage * blocked );
			} else if ( _a=="tox" ) {
				this.adjustToxLoss( damage * blocked );
			} else if ( _a=="oxy" ) {
				this.adjustOxyLoss( damage * blocked );
			} else if ( _a=="clone" ) {
				this.adjustCloneLoss( damage * blocked );
			} else if ( _a=="stamina" ) {
				this.adjustStaminaLoss( damage * blocked );
			}
			this.updatehealth();
			return 1;
		}

		// Function from file: bloodcrawl.dm
		public virtual bool phasein( dynamic B = null ) {
			Mob_Living C = null;
			Obj_Item_Weapon_Bloodcrawl BC = null;
			string oldcolor = null;

			
			if ( Lang13.Bool( this.notransform ) ) {
				this.WriteMsg( "<span class='warning'>Finish eating first!</span>" );
				return false;
			}
			((Ent_Static)B).visible_message( "<span class='warning'>" + B + " starts to bubble...</span>" );

			if ( !GlobalFuncs.do_after( this, 20, null, B ) ) {
				return false;
			}

			if ( !Lang13.Bool( B ) ) {
				return false;
			}
			this.loc = B.loc;
			this.client.eye = this;
			this.visible_message( "<span class='warning'><B>" + this + " rises out of the pool of blood!</B>" );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/magic/exit_blood.ogg", 100, 1, -1 );

			if ( this is Mob_Living_Carbon ) {
				C = this;

				foreach (dynamic _a in Lang13.Enumerate( C, typeof(Obj_Item_Weapon_Bloodcrawl) )) {
					BC = _a;
					
					BC.flags = null;
					C.unEquip( BC );
					GlobalFuncs.qdel( BC );
				}
			}
			oldcolor = this.color;

			if ( B is Obj_Effect_Decal_Cleanable_Xenoblood ) {
				this.color = "#2bba00";
			} else {
				this.color = "#950a0a";
			}
			GlobalFuncs.qdel( this.holder );
			this.holder = null;
			Task13.Schedule( 30, (Task13.Closure)(() => {
				this.color = oldcolor;
				return;
			}));
			return true;
		}

		// Function from file: bloodcrawl.dm
		public bool phaseout( dynamic B = null ) {
			Mob_Living C = null;
			Obj_Item_Weapon_Bloodcrawl B1 = null;
			Obj_Item_Weapon_Bloodcrawl B2 = null;
			dynamic kidnapped = null;
			dynamic mobloc = null;
			dynamic holder = null;
			dynamic victim = null;
			int? i = null;

			
			if ( this is Mob_Living_Carbon ) {
				C = this;

				if ( Lang13.Bool( C.l_hand ) || Lang13.Bool( C.r_hand ) ) {
					C.WriteMsg( "<span class='warning'>You may not hold items while blood crawling!</span>" );
					return false;
				}
				B1 = new Obj_Item_Weapon_Bloodcrawl( C );
				B2 = new Obj_Item_Weapon_Bloodcrawl( C );
				B1.icon_state = "bloodhand_left";
				B2.icon_state = "bloodhand_right";
				C.put_in_hands( B1 );
				C.put_in_hands( B2 );
				C.regenerate_icons();
			}
			kidnapped = null;
			mobloc = GlobalFuncs.get_turf( this.loc );
			this.notransform = GlobalVars.TRUE;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.visible_message( "<span class='warning'>" + this + " sinks into the pool of blood!</span>" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/magic/enter_blood.ogg", 100, 1, -1 );
				holder = GlobalFuncs.PoolOrNew( typeof(Obj_Effect_Dummy_Slaughter), mobloc );
				this.ExtinguishMob();

				if ( this.buckled != null ) {
					this.buckled.unbuckle_mob( true );
				}

				if ( Lang13.Bool( this.buckled_mob ) ) {
					this.unbuckle_mob( true );
				}

				if ( this.pulledby != null ) {
					this.pulledby.__CallVerb("Stop Pulling" );
				}

				if ( Lang13.Bool( this.pulling ) && this.bloodcrawl == 2 ) {
					
					if ( this.pulling is Mob_Living ) {
						victim = this.pulling;

						if ( Lang13.Bool( victim.stat ) == false ) {
							this.visible_message( "<span class='warning'>" + victim + " kicks free of the blood pool just before entering it!</span>" );
						} else {
							victim.loc = holder;
							((Mob)victim).emote( "scream" );
							this.visible_message( "<span class='warning'><b>" + this + " drags " + victim + " into the pool of blood!</b></span>" );
							kidnapped = victim;
						}
					}
				}
				this.loc = holder;
				this.holder = holder;

				if ( Lang13.Bool( kidnapped ) ) {
					this.WriteMsg( "<span class='danger'>You begin to feast on " + kidnapped + ". You can not move while you are doing this.</span>" );
					i = null;
					i = 3;

					while (( i ??0) > 0) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/magic/Demon_consume.ogg", 100, 1 );
						Task13.Sleep( 30 );
						i--;
					}

					if ( Lang13.Bool( kidnapped ) ) {
						this.WriteMsg( "<span class='danger'>You devour " + kidnapped + ". Your health is fully restored.</span>" );
						this.adjustBruteLoss( -1000 );
						this.adjustFireLoss( -1000 );
						this.adjustOxyLoss( -1000 );
						this.adjustToxLoss( -1000 );
						((Mob)kidnapped).ghostize();
						GlobalFuncs.qdel( kidnapped );
					} else {
						this.WriteMsg( "<span class='danger'>You happily devour... nothing? Your meal vanished at some point!</span>" );
					}
				}
				this.notransform = 0;
				return;
			}));
			return true;
		}

		// Function from file: suicide.dm
		public virtual bool canSuicide(  ) {
			
			if ( this.stat == 0 ) {
				return true;
			} else if ( this.stat == 2 ) {
				this.WriteMsg( "You're already dead!" );
			} else if ( this.stat == 1 ) {
				this.WriteMsg( "You need to be conscious to suicide!" );
			}
			return false;
		}

		// Function from file: cardboardbox.dm
		public void do_alert_animation( Mob_Living A = null ) {
			Image I = null;
			ByTable viewing = null;
			dynamic M = null;

			I = new Image( "icons/obj/closet.dmi", A, "cardboard_special", A.layer + 1 );
			viewing = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, A ) )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) ) {
					viewing.Or( M.client );
				}
			}
			GlobalFuncs.flick_overlay( I, viewing, 8 );
			I.alpha = 0;
			Icon13.Animate( new ByTable().Set( 1, I ).Set( "pixel_z", 32 ).Set( "alpha", 255 ).Set( "time", 5 ).Set( "easing", 5 ) );
			return;
		}

		// Function from file: ritual.dm
		[VerbInfo( name: "Communion", group: "Cultist" )]
		public void cult_innate_comm(  ) {
			string input = null;

			
			if ( !GlobalFuncs.iscultist( Task13.User ) || Task13.User.incapacitated() ) {
				return;
			}
			input = GlobalFuncs.stripped_input( Task13.User, "Please choose a message to tell to the other acolytes.", "Voice of Blood", "" );

			if ( !Lang13.Bool( input ) ) {
				return;
			}

			if ( !GlobalFuncs.iscultist( Task13.User ) || Task13.User.incapacitated() ) {
				return;
			}
			GlobalFuncs.cultist_commune( Task13.User, false, input );
			return;
		}

		// Function from file: item_attack.dm
		public virtual bool attacked_by( Obj_Item I = null, dynamic user = null, bool? def_zone = null ) {
			Ent_Static location = null;
			string message_verb = null;
			string attack_message = null;

			this.apply_damage( I.force, I.damtype, def_zone );

			if ( I.damtype == "brute" ) {
				
				if ( Rand13.PercentChance( 33 ) && Lang13.Bool( I.force ) ) {
					location = this.loc;

					if ( location is Tile_Simulated ) {
						location.add_blood_floor( this );
					}
				}
			}
			message_verb = "";

			if ( I.attack_verb != null && I.attack_verb.len != 0 ) {
				message_verb = "" + Rand13.PickFromTable( I.attack_verb );
			} else if ( Lang13.Bool( I.force ) ) {
				message_verb = "attacked";
			}
			attack_message = "" + this + " has been " + message_verb + " with " + I + ".";

			if ( Lang13.Bool( user ) ) {
				((Ent_Dynamic)user).do_attack_animation( this );

				if ( Map13.FetchViewers( null, this ).Contains( user ) ) {
					attack_message = "" + user + " has " + message_verb + " " + this + " with " + I + "!";
				}
			}

			if ( Lang13.Bool( message_verb ) ) {
				this.visible_message( "<span class='danger'>" + attack_message + "</span>", "<span class='userdanger'>" + attack_message + "</span>" );
			}
			return false;
		}

		// Function from file: item_attack.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			int sharpness = 0;

			((Mob)user).changeNext_move( 8 );

			if ( user.a_intent == "harm" && this.stat == 2 && this.butcher_results != null ) {
				sharpness = ((Obj_Item)A).is_sharp();

				if ( sharpness != 0 ) {
					user.WriteMsg( "<span class='notice'>You begin to butcher " + this + "...</span>" );
					GlobalFuncs.playsound( this.loc, "sound/weapons/slice.ogg", 50, 1, -1 );

					if ( GlobalFuncs.do_mob( user, this, 80 / sharpness ) ) {
						this.harvest( user );
					}
					return null;
				}
			}
			((Obj_Item)A).attack( this, user );
			return null;
		}

		// Function from file: click.dm
		public override void LaserEyes( Ent_Static A = null ) {
			dynamic T = null;
			dynamic U = null;
			Obj_Item_Projectile_Beam LE = null;

			this.changeNext_move( 4 );
			T = GlobalFuncs.get_turf( this );
			U = GlobalFuncs.get_turf( A );
			LE = new Obj_Item_Projectile_Beam( this.loc );
			LE.icon = "icons/effects/genetics.dmi";
			LE.icon_state = "eyelasers";
			GlobalFuncs.playsound( Task13.User.loc, "sound/weapons/taser2.ogg", 75, 1 );
			LE.firer = this;
			LE.def_zone = this.get_organ_target();
			LE.original = A;
			LE.current = T;
			LE.yo = Convert.ToDouble( U.y - T.y );
			LE.xo = Convert.ToDouble( U.x - T.x );
			LE.fire();
			return;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( name: "Cancel Camera View", group: "OOC" )]
		public override void cancel_camera(  ) {
			base.cancel_camera();
			this.cameraFollow = null;
			return;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( name: "Point To", group: "Object" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj | InputType.Tile )]
		public override bool pointed( dynamic A = null ) {
			
			if ( this.stat != 0 || !this.canmove || this.restrained() ) {
				return false;
			}

			if ( ( this.status_flags & 8192 ) != 0 ) {
				return false;
			}

			if ( !base.pointed( (object)(A) ) ) {
				return false;
			}
			this.visible_message( "<b>" + this + "</b> points to " + A );
			return true;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( name: "Resist", group: "IC" )]
		public virtual void resist(  ) {
			int resisting = 0;
			Obj O = null;
			Obj_Item_Weapon_Grab G = null;
			Ent_Static C = null;

			
			if ( !( this is Mob_Living ) || this.next_move > Game13.time ) {
				return;
			}
			this.changeNext_move( 20 );

			if ( !( this.stat != 0 ) && this.canmove && !this.restrained() ) {
				resisting = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.requests, typeof(Obj) )) {
					O = _a;
					
					GlobalFuncs.qdel( O );
					resisting++;
				}

				foreach (dynamic _b in Lang13.Enumerate( this.grabbed_by, typeof(Obj_Item_Weapon_Grab) )) {
					G = _b;
					
					resisting++;

					if ( G.state == 1 ) {
						GlobalFuncs.qdel( G );
					} else if ( G.state == 2 ) {
						
						if ( Rand13.PercentChance( 25 ) ) {
							this.visible_message( "<span class='warning'>" + this + " has broken free of " + G.assailant + "'s grip!</span>" );
							GlobalFuncs.qdel( G );
						}
					} else if ( G.state == 3 ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							this.visible_message( "<span class='warning'>" + this + " has broken free of " + G.assailant + "'s headlock!</span>" );
							GlobalFuncs.qdel( G );
						}
					}
				}

				if ( resisting != 0 ) {
					this.visible_message( "<span class='warning'>" + this + " resists!</span>" );
					return;
				}
			}

			if ( this.buckled != null && this.last_special <= Game13.time ) {
				this.resist_buckle();
			} else if ( this.loc != null && this.loc is Obj && !( this.loc is Tile ) ) {
				
				if ( this.stat == 0 && !( this.stunned != 0 ) && !( this.weakened != 0 ) && !( this.paralysis != 0 ) ) {
					C = this.loc;
					((dynamic)C).container_resist( this );
				}
			} else if ( this.canmove ) {
				
				if ( this.on_fire ) {
					this.resist_fire();
				} else if ( this.last_special <= Game13.time ) {
					this.resist_restraints();
				}
			}
			return;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( hidden: true )]
		[VerbArg( 1, InputType.Null )]
		public void succumb( bool? whispered = null ) {
			
			if ( this.InCritical() ) {
				this.attack_log.Add( "" + this + " has " + ( whispered == true ? "whispered his final words" : "succumbed to death" ) + " with " + Num13.Round( Convert.ToDouble( this.health ), 0.1 ) + " points of health!" );
				this.adjustOxyLoss( this.health - GlobalVars.config.health_threshold_dead );
				this.updatehealth();

				if ( !( whispered == true ) ) {
					this.WriteMsg( "<span class='notice'>You have given up life and succumbed to death.</span>" );
				}
				this.death();
			}
			return;
		}

		// Function from file: living.dm
		[Verb]
		[VerbInfo( name: "Pull", group: "Object" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj, VerbArgFilter.FromGlobalVar, "mob_list" )]
		public void pulled( Ent_Static AM = null ) {
			
			if ( AM is Ent_Dynamic && AM.Adjacent( this ) ) {
				this.start_pulling( AM );
			} else {
				this.stop_pulling();
			}
			return;
		}

		// Function from file: observer.dm
		[Verb]
		[VerbInfo( name: "Ghost", desc: "Relinquish your life and enter the land of the dead.", group: "OOC" )]
		public virtual void ghost(  ) {
			string response = null;

			
			if ( this.stat != 2 ) {
				this.succumb();
			}

			if ( this.stat == 2 ) {
				this.ghostize( true );
			} else {
				response = Interface13.Alert( this, "Are you -sure- you want to ghost?\n(You are alive. If you ghost whilst still alive you may not play again this round! You can't change your mind so choose wisely!!)", "Are you sure you want to ghost?", "Ghost", "Stay in body" );

				if ( response != "Ghost" ) {
					return;
				}
				this.ghostize( false );
			}
			return;
		}

	}

}