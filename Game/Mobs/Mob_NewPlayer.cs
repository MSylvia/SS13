// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_NewPlayer : Mob {

		public bool ready = false;
		public bool spawning = false;
		public int totalPlayers = 0;
		public int totalPlayersReady = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 101;
			this.flags = 0;
			this.stat = 2;
			this.canmove = false;
			this.anchored = 1;
		}

		public Mob_NewPlayer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: new_player.dm
		public override bool singuloCanEat(  ) {
			return false;
		}

		// Function from file: new_player.dm
		public override dynamic cultify(  ) {
			return null;
		}

		// Function from file: new_player.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			Dir = Dir ?? 0;
			step_x = step_x ?? 0;
			step_y = step_y ?? 0;

			return false;
		}

		// Function from file: new_player.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob_Dead_Observer observer = null;
			dynamic O = null;
			bool voted = false;
			DBQuery query = null;
			string option = null;
			string sql = null;
			DBQuery query_insert = null;
			dynamic pollid = null;
			double? pollid2 = null;
			dynamic votetype = null;
			double? optionid = null;
			string replytext = null;
			double? id_min = null;
			double? id_max = null;
			double? optionid2 = null;
			double? rating = null;
			double? id_min2 = null;
			double? id_max2 = null;
			double? optionid3 = null;

			
			if ( Task13.User != this ) {
				return 0;
			}

			if ( !( this.client != null ) ) {
				return 0;
			}

			if ( Lang13.Bool( href_list["show_preferences"] ) ) {
				this.client.prefs.ShowChoices( this );
				return 1;
			}

			if ( Lang13.Bool( href_list["ready"] ) ) {
				
				switch ((int?)( String13.ParseNumber( href_list["ready"] ) )) {
					case 1:
						this.ready = true;
						break;
					case 2:
						this.ready = false;
						break;
				}
				GlobalFuncs.to_chat( Task13.User, "<span class='recruit'>You " + ( this.ready ? "have declared ready" : "have unreadied" ) + ".</span>" );
				this.new_player_panel_proc();
				return 1;
			}

			if ( Lang13.Bool( href_list["refresh"] ) ) {
				Interface13.Browse( this, null, "window=playersetup" );
				this.new_player_panel_proc();
			}

			if ( Lang13.Bool( href_list["observe"] ) ) {
				
				if ( Interface13.Alert( this, "Are you sure you wish to observe? You will not be able to play this round!", "Player Setup", "Yes", "No" ) == "Yes" ) {
					
					if ( !( this.client != null ) ) {
						return 1;
					}
					observer = new Mob_Dead_Observer();
					this.spawning = true;
					GlobalFuncs.to_chat( this, new Sound( null, false, false, 1, 85 ) );
					observer.started_as_observer = 1;
					this.close_spawn_windows();
					O = Lang13.FindObj( "landmark*Observer-Start" );
					GlobalFuncs.to_chat( this, "<span class='notice'>Now teleporting.</span>" );
					observer.loc = O.loc;
					observer.timeofdeath = Game13.time;
					this.client.prefs.update_preview_icon( true );
					observer.icon = this.client.prefs.preview_icon;
					observer.alpha = 127;

					if ( Lang13.Bool( this.client.prefs.be_random_name ) ) {
						this.client.prefs.real_name = GlobalFuncs.random_name( this.client.prefs.gender, this.client.prefs.species );
					}
					observer.real_name = this.client.prefs.real_name;
					observer.name = observer.real_name;

					if ( !( this.client.holder != null ) && !GlobalVars.config.antag_hud_allowed ) {
						observer.verbs.Remove( typeof(Mob_Dead_Observer).GetMethod( "toggle_antagHUD" ) );
					}
					observer.key = this.key;
					GlobalVars.mob_list.Remove( this );
					GlobalFuncs.qdel( this );
					return 1;
				}
			}

			if ( Lang13.Bool( href_list["late_join"] ) ) {
				
				if ( !( GlobalVars.ticker != null ) || GlobalVars.ticker.current_state != 3 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The round is either not ready, or has already finished...</span>" );
					return null;
				}

				if ( this.client.prefs.species != "Human" ) {
					
					if ( !GlobalFuncs.is_alien_whitelisted( this, this.client.prefs.species ) && GlobalVars.config.usealienwhitelist ) {
						GlobalFuncs.to_chat( this, Interface13.Alert( "You are currently not whitelisted to play " + this.client.prefs.species + "." ) );
						return 0;
					}
				}
				this.LateChoices();
			}

			if ( Lang13.Bool( href_list["manifest"] ) ) {
				this.ViewManifest();
			}

			if ( Lang13.Bool( href_list["SelectedJob"] ) ) {
				
				if ( !GlobalVars.enter_allowed ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>There is an administrative lock on entering the game!</span>" );
					return null;
				}

				if ( !GlobalFuncs.is_alien_whitelisted( this, this.client.prefs.species ) && GlobalVars.config.usealienwhitelist ) {
					GlobalFuncs.to_chat( this, Interface13.Alert( "You are currently not whitelisted to play " + this.client.prefs.species + "." ) );
					return 0;
				}
				this.AttemptLateSpawn( href_list["SelectedJob"] );
				return null;
			}

			if ( Lang13.Bool( href_list["privacy_poll"] ) ) {
				GlobalFuncs.establish_db_connection();

				if ( !GlobalVars.dbcon.IsConnected() ) {
					return null;
				}
				voted = false;
				query = GlobalVars.dbcon.NewQuery( "SELECT * FROM erro_privacy WHERE ckey='" + this.ckey + "'" );
				query.Execute();

				while (query.NextRow()) {
					voted = true;
					break;
				}
				option = "UNKNOWN";

				dynamic _b = href_list["privacy_poll"]; // Was a switch-case, sorry for the mess.
				if ( _b=="signed" ) {
					option = "SIGNED";
				} else if ( _b=="anonymous" ) {
					option = "ANONYMOUS";
				} else if ( _b=="nostats" ) {
					option = "NOSTATS";
				} else if ( _b=="later" ) {
					Interface13.Browse( Task13.User, null, "window=privacypoll" );
					return null;
				} else if ( _b=="abstain" ) {
					option = "ABSTAIN";
				}

				if ( option == "UNKNOWN" ) {
					return null;
				}

				if ( !voted ) {
					sql = "INSERT INTO erro_privacy VALUES (null, Now(), '" + this.ckey + "', '" + option + "')";
					query_insert = GlobalVars.dbcon.NewQuery( sql );
					query_insert.Execute();
					GlobalFuncs.to_chat( Task13.User, "<b>Thank you for your vote!</b>" );
					Interface13.Browse( Task13.User, null, "window=privacypoll" );
				}
			}

			if ( !this.ready && Lang13.Bool( href_list["preference"] ) ) {
				
				if ( this.client != null ) {
					this.client.prefs.process_link( this, href_list );
				}
			} else if ( !Lang13.Bool( href_list["late_join"] ) ) {
				this.__CallVerb("new player panel" );
			}

			if ( Lang13.Bool( href_list["showpoll"] ) ) {
				this.handle_player_polling();
				return null;
			}

			if ( Lang13.Bool( href_list["pollid"] ) ) {
				pollid = href_list["pollid"];

				if ( pollid is string ) {
					pollid = String13.ParseNumber( pollid );
				}

				if ( Lang13.Bool( Lang13.IsNumber( pollid ) ) ) {
					this.poll_player( pollid );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["votepollid"] ) && Lang13.Bool( href_list["votetype"] ) ) {
				pollid2 = String13.ParseNumber( href_list["votepollid"] );
				votetype = href_list["votetype"];

				dynamic _c = votetype; // Was a switch-case, sorry for the mess.
				if ( _c=="OPTION" ) {
					optionid = String13.ParseNumber( href_list["voteoptionid"] );
					this.vote_on_poll( pollid2, optionid );
				} else if ( _c=="TEXT" ) {
					replytext = href_list["replytext"];
					this.log_text_poll_reply( pollid2, replytext );
				} else if ( _c=="NUMVAL" ) {
					id_min = String13.ParseNumber( href_list["minid"] );
					id_max = String13.ParseNumber( href_list["maxid"] );

					if ( ( id_max ??0) - ( id_min ??0) > 100 ) {
						GlobalFuncs.to_chat( Task13.User, "The option ID difference is too big. Please contact administration or the database admin." );
						return null;
					}
					optionid2 = null;
					optionid2 = id_min;

					while (( optionid2 ??0) <= ( id_max ??0)) {
						
						if ( !( href_list["o" + optionid2] == null ) ) {
							rating = null;

							if ( href_list["o" + optionid2] == "abstain" ) {
								rating = null;
							} else {
								rating = String13.ParseNumber( href_list["o" + optionid2] );

								if ( !Lang13.Bool( Lang13.IsNumber( rating ) ) ) {
									return null;
								}
							}
							this.vote_on_numval_poll( pollid2, optionid2, rating );
						}
						optionid2++;
					}
				} else if ( _c=="MULTICHOICE" ) {
					id_min2 = String13.ParseNumber( href_list["minoptionid"] );
					id_max2 = String13.ParseNumber( href_list["maxoptionid"] );

					if ( ( id_max2 ??0) - ( id_min2 ??0) > 100 ) {
						GlobalFuncs.to_chat( Task13.User, "The option ID difference is too big. Please contact administration or the database admin." );
						return null;
					}
					optionid3 = null;
					optionid3 = id_min2;

					while (( optionid3 ??0) <= ( id_max2 ??0)) {
						
						if ( !( href_list["option_" + optionid3] == null ) ) {
							this.vote_on_poll( pollid2, optionid3, true );
						}
						optionid3++;
					}
				}
			}
			return null;
		}

		// Function from file: new_player.dm
		public override dynamic Stat(  ) {
			Mob_NewPlayer player = null;

			base.Stat();

			if ( Interface13.IsStatPanelActive( "Status" ) && GlobalVars.ticker != null ) {
				
				if ( GlobalVars.ticker.current_state != 1 ) {
					Interface13.Stat( null, "Station Time: " + GlobalFuncs.worldtime2text() );
				}
			}

			if ( Interface13.IsStatPanelActive( "Lobby" ) && GlobalVars.ticker != null ) {
				
				if ( GlobalVars.ticker.hide_mode ) {
					Interface13.Stat( "Game Mode:", "Secret" );
				} else {
					Interface13.Stat( "Game Mode:", "" + GlobalVars.master_mode );
				}

				if ( GlobalVars.master_controller.initialized ) {
					
					if ( GlobalVars.ticker.current_state == 1 && GlobalVars.going != 0 ) {
						Interface13.Stat( "Time To Start:", Num13.Floor( GlobalVars.ticker.pregame_timeleft - Game13.timeofday ) / 10 );
					}

					if ( GlobalVars.ticker.current_state == 1 && !( GlobalVars.going != 0 ) ) {
						Interface13.Stat( "Time To Start:", "DELAYED" );
					}
				} else {
					Interface13.Stat( "Time To Start:", "LOADING..." );
				}

				if ( GlobalVars.master_controller.initialized && GlobalVars.ticker.current_state == 1 ) {
					Interface13.Stat( "Players: " + this.totalPlayers, "Players Ready: " + this.totalPlayersReady );
					this.totalPlayers = 0;
					this.totalPlayersReady = 0;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list, typeof(Mob_NewPlayer) )) {
						player = _a;
						
						Interface13.Stat( "" + player.key, ( player.ready ? "(Playing)" : null ) );
						this.totalPlayers++;

						if ( player.ready ) {
							this.totalPlayersReady++;
						}
					}
				}
			}
			return null;
		}

		// Function from file: poll.dm
		public void vote_on_numval_poll( double? pollid = null, double? optionid = null, double? rating = null ) {
			pollid = pollid ?? -1;
			optionid = optionid ?? -1;

			DBQuery select_query = null;
			bool validpoll = false;
			DBQuery select_query2 = null;
			bool validoption = false;
			bool alreadyvoted = false;
			DBQuery voted_query = null;
			dynamic adminrank = null;
			DBQuery insert_query = null;

			
			if ( pollid == -1 || optionid == -1 ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( pollid ) ) || !Lang13.Bool( Lang13.IsNumber( optionid ) ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				select_query = GlobalVars.dbcon.NewQuery( "SELECT starttime, endtime, question, polltype FROM erro_poll_question WHERE id = " + pollid + " AND Now() BETWEEN starttime AND endtime" );
				select_query.Execute();
				validpoll = false;

				while (select_query.NextRow()) {
					
					if ( select_query.item[4] != "NUMVAL" ) {
						return;
					}
					validpoll = true;
					break;
				}

				if ( !validpoll ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Poll is not valid.</span>" );
					return;
				}
				select_query2 = GlobalVars.dbcon.NewQuery( "SELECT id FROM erro_poll_option WHERE id = " + optionid + " AND pollid = " + pollid );
				select_query2.Execute();
				validoption = false;

				while (select_query2.NextRow()) {
					validoption = true;
					break;
				}

				if ( !validoption ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Poll option is not valid.</span>" );
					return;
				}
				alreadyvoted = false;
				voted_query = GlobalVars.dbcon.NewQuery( "SELECT id FROM erro_poll_vote WHERE optionid = " + optionid + " AND ckey = '" + Task13.User.ckey + "'" );
				voted_query.Execute();

				while (voted_query.NextRow()) {
					alreadyvoted = true;
					break;
				}

				if ( alreadyvoted ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You already voted in this poll.</span>" );
					return;
				}
				adminrank = "Player";

				if ( Task13.User != null && Task13.User.client != null && Task13.User.client.holder != null ) {
					adminrank = Task13.User.client.holder.rank;
				}
				insert_query = GlobalVars.dbcon.NewQuery( "INSERT INTO erro_poll_vote (id ,datetime ,pollid ,optionid ,ckey ,ip ,adminrank, rating) VALUES (null, Now(), " + pollid + ", " + optionid + ", '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', '" + adminrank + "', " + ( rating == null ? ((dynamic)( "null" )) : ((dynamic)( rating )) ) + ")" );
				insert_query.Execute();
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Vote successful.</span>" );
				Interface13.Browse( Task13.User, null, "window=playerpoll" );
			}
			return;
		}

		// Function from file: poll.dm
		public void log_text_poll_reply( double? pollid = null, string replytext = null ) {
			pollid = pollid ?? -1;
			replytext = replytext ?? "";

			DBQuery select_query = null;
			bool validpoll = false;
			bool alreadyvoted = false;
			DBQuery voted_query = null;
			dynamic adminrank = null;
			dynamic text_pass = null;
			DBQuery insert_query = null;

			
			if ( pollid == -1 || replytext == "" ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( pollid ) ) || !( replytext is string ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				select_query = GlobalVars.dbcon.NewQuery( "SELECT starttime, endtime, question, polltype FROM erro_poll_question WHERE id = " + pollid + " AND Now() BETWEEN starttime AND endtime" );
				select_query.Execute();
				validpoll = false;

				while (select_query.NextRow()) {
					
					if ( select_query.item[4] != "TEXT" ) {
						return;
					}
					validpoll = true;
					break;
				}

				if ( !validpoll ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Poll is not valid.</span>" );
					return;
				}
				alreadyvoted = false;
				voted_query = GlobalVars.dbcon.NewQuery( "SELECT id FROM erro_poll_textreply WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
				voted_query.Execute();

				while (voted_query.NextRow()) {
					alreadyvoted = true;
					break;
				}

				if ( alreadyvoted ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You already sent your feedback for this poll.</span>" );
					return;
				}
				adminrank = "Player";

				if ( Task13.User != null && Task13.User.client != null && Task13.User.client.holder != null ) {
					adminrank = Task13.User.client.holder.rank;
				}
				replytext = GlobalFuncs.replacetext( replytext, "%BR%", "" );
				replytext = GlobalFuncs.replacetext( replytext, "\n", "%BR%" );
				text_pass = GlobalFuncs.reject_bad_text( replytext, 8000 );
				replytext = GlobalFuncs.replacetext( replytext, "%BR%", "<BR>" );

				if ( !Lang13.Bool( text_pass ) ) {
					GlobalFuncs.to_chat( Task13.User, "The text you entered was blank, contained illegal characters or was too long. Please correct the text and submit again." );
					return;
				}
				insert_query = GlobalVars.dbcon.NewQuery( "INSERT INTO erro_poll_textreply (id ,datetime ,pollid ,ckey ,ip ,replytext ,adminrank) VALUES (null, Now(), " + pollid + ", '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', '" + replytext + "', '" + adminrank + "')" );
				insert_query.Execute();
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Feedback logging successful.</span>" );
				Interface13.Browse( Task13.User, null, "window=playerpoll" );
			}
			return;
		}

		// Function from file: poll.dm
		public void vote_on_poll( double? pollid = null, double? optionid = null, bool? multichoice = null ) {
			pollid = pollid ?? -1;
			optionid = optionid ?? -1;
			multichoice = multichoice ?? false;

			DBQuery select_query = null;
			bool validpoll = false;
			double? multiplechoiceoptions = null;
			DBQuery select_query2 = null;
			bool validoption = false;
			double? alreadyvoted = null;
			DBQuery voted_query = null;
			dynamic adminrank = null;
			DBQuery insert_query = null;

			
			if ( pollid == -1 || optionid == -1 ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( pollid ) ) || !Lang13.Bool( Lang13.IsNumber( optionid ) ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				select_query = GlobalVars.dbcon.NewQuery( "SELECT starttime, endtime, question, polltype, multiplechoiceoptions FROM erro_poll_question WHERE id = " + pollid + " AND Now() BETWEEN starttime AND endtime" );
				select_query.Execute();
				validpoll = false;
				multiplechoiceoptions = 0;

				while (select_query.NextRow()) {
					
					if ( select_query.item[4] != "OPTION" && select_query.item[4] != "MULTICHOICE" ) {
						return;
					}
					validpoll = true;

					if ( Lang13.Bool( select_query.item[5] ) ) {
						multiplechoiceoptions = String13.ParseNumber( select_query.item[5] );
					}
					break;
				}

				if ( !validpoll ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Poll is not valid.</span>" );
					return;
				}
				select_query2 = GlobalVars.dbcon.NewQuery( "SELECT id FROM erro_poll_option WHERE id = " + optionid + " AND pollid = " + pollid );
				select_query2.Execute();
				validoption = false;

				while (select_query2.NextRow()) {
					validoption = true;
					break;
				}

				if ( !validoption ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Poll option is not valid.</span>" );
					return;
				}
				alreadyvoted = 0;
				voted_query = GlobalVars.dbcon.NewQuery( "SELECT id FROM erro_poll_vote WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
				voted_query.Execute();

				while (voted_query.NextRow()) {
					alreadyvoted += 1;

					if ( !( multichoice == true ) ) {
						break;
					}
				}

				if ( !( multichoice == true ) && Lang13.Bool( alreadyvoted ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You already voted in this poll.</span>" );
					return;
				}

				if ( multichoice == true && ( alreadyvoted ??0) >= ( multiplechoiceoptions ??0) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You already have more than " + multiplechoiceoptions + " logged votes on this poll. Enough is enough. Contact the database admin if this is an error.</span>" );
					return;
				}
				adminrank = "Player";

				if ( Task13.User != null && Task13.User.client != null && Task13.User.client.holder != null ) {
					adminrank = Task13.User.client.holder.rank;
				}
				insert_query = GlobalVars.dbcon.NewQuery( "INSERT INTO erro_poll_vote (id ,datetime ,pollid ,optionid ,ckey ,ip ,adminrank) VALUES (null, Now(), " + pollid + ", " + optionid + ", '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', '" + adminrank + "')" );
				insert_query.Execute();
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Vote successful.</span>" );
				Interface13.Browse( Task13.User, null, "window=playerpoll" );
			}
			return;
		}

		// Function from file: poll.dm
		public void poll_player( dynamic pollid = null ) {
			pollid = pollid ?? -1;

			DBQuery select_query = null;
			string pollstarttime = null;
			string pollendtime = null;
			string pollquestion = null;
			string polltype = null;
			bool found = false;
			double? multiplechoiceoptions = null;
			DBQuery voted_query = null;
			bool voted = false;
			double? votedoptionid = null;
			ByTable options = null;
			DBQuery options_query = null;
			Polloption PO = null;
			string output = null;
			Polloption O = null;
			DBQuery voted_query2 = null;
			bool voted2 = false;
			string vote_text = null;
			string output2 = null;
			DBQuery voted_query3 = null;
			string output3 = null;
			bool voted3 = false;
			dynamic optiontext = null;
			dynamic rating = null;
			double? minid = null;
			double? maxid = null;
			DBQuery option_query = null;
			double? optionid = null;
			dynamic optiontext2 = null;
			double? minvalue = null;
			double? maxvalue = null;
			dynamic descmin = null;
			dynamic descmid = null;
			dynamic descmax = null;
			double? midvalue = null;
			double? j = null;
			DBQuery voted_query4 = null;
			ByTable votedfor = null;
			bool voted4 = false;
			ByTable options2 = null;
			double? maxoptionid = null;
			double? minoptionid = null;
			DBQuery options_query2 = null;
			Polloption PO2 = null;
			string output4 = null;
			Polloption O2 = null;

			
			if ( pollid == -1 ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				select_query = GlobalVars.dbcon.NewQuery( "SELECT starttime, endtime, question, polltype, multiplechoiceoptions FROM erro_poll_question WHERE id = " + pollid );
				select_query.Execute();
				pollstarttime = "";
				pollendtime = "";
				pollquestion = "";
				polltype = "";
				found = false;
				multiplechoiceoptions = 0;

				while (select_query.NextRow()) {
					pollstarttime = select_query.item[1];
					pollendtime = select_query.item[2];
					pollquestion = select_query.item[3];
					polltype = select_query.item[4];
					found = true;
					break;
				}

				if ( !found ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Poll question details not found.</span>" );
					return;
				}

				switch ((string)( polltype )) {
					case "OPTION":
						voted_query = GlobalVars.dbcon.NewQuery( "SELECT optionid FROM erro_poll_vote WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
						voted_query.Execute();
						voted = false;
						votedoptionid = 0;

						while (voted_query.NextRow()) {
							votedoptionid = String13.ParseNumber( voted_query.item[1] );
							voted = true;
							break;
						}
						options = new ByTable();
						options_query = GlobalVars.dbcon.NewQuery( "SELECT id, text FROM erro_poll_option WHERE pollid = " + pollid );
						options_query.Execute();

						while (options_query.NextRow()) {
							PO = new Polloption();
							PO.optionid = String13.ParseNumber( options_query.item[1] );
							PO.optiontext = options_query.item[2];
							options.Add( PO );
						}
						output = "<div align='center'><B>Player poll</B>";
						output += "<hr>\n					<b>Question: " + pollquestion + "</b><br>\n					<font size='2'>Poll runs from <b>" + pollstarttime + "</b> until <b>" + pollendtime + "</b></font><p>";

						if ( !voted ) {
							output += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>\n						<input type='hidden' name='src' value='" ).Ref( this ).str( "'>\n						<input type='hidden' name='votepollid' value='" ).item( pollid ).str( "'>\n						<input type='hidden' name='votetype' value='OPTION'>" ).ToString();
						}
						output += "<table><tr><td>";

						foreach (dynamic _a in Lang13.Enumerate( options, typeof(Polloption) )) {
							O = _a;
							

							if ( Lang13.Bool( O.optionid ) && Lang13.Bool( O.optiontext ) ) {
								
								if ( voted ) {
									
									if ( votedoptionid == O.optionid ) {
										output += "<b>" + O.optiontext + "</b><br>";
									} else {
										output += "" + O.optiontext + "<br>";
									}
								} else {
									output += "<input type='radio' name='voteoptionid' value='" + O.optionid + "'> " + O.optiontext + "<br>";
								}
							}
						}
						output += "</td></tr></table>";

						if ( !voted ) {
							output += "<p><input type='submit' value='Vote'>\n						</form>";
						}
						output += "</div>";
						Interface13.Browse( this, output, "window=playerpoll;size=500x250" );
						break;
					case "TEXT":
						voted_query2 = GlobalVars.dbcon.NewQuery( "SELECT replytext FROM erro_poll_textreply WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
						voted_query2.Execute();
						voted2 = false;
						vote_text = "";

						while (voted_query2.NextRow()) {
							vote_text = voted_query2.item[1];
							voted2 = true;
							break;
						}
						output2 = "<div align='center'><B>Player poll</B>";
						output2 += "<hr>\n					<b>Question: " + pollquestion + "</b><br>\n					<font size='2'>Feedback gathering runs from <b>" + pollstarttime + "</b> until <b>" + pollendtime + "</b></font><p>";

						if ( !voted2 ) {
							output2 += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>\n						<input type='hidden' name='src' value='" ).Ref( this ).str( "'>\n						<input type='hidden' name='votepollid' value='" ).item( pollid ).str( @"'>
						<input type='hidden' name='votetype' value='TEXT'>
						<font size='2'>Please provide feedback below. You can use any letters of the English alphabet, numbers and the symbols: . , ! ? : ; -</font><br>
						<textarea name='replytext' cols='50' rows='14'></textarea>
						<p><input type='submit' value='Submit'>
						</form>
						<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>\n						<input type='hidden' name='src' value='" ).Ref( this ).str( "'>\n						<input type='hidden' name='votepollid' value='" ).item( pollid ).str( @"'>
						<input type='hidden' name='votetype' value='TEXT'>
						<input type='hidden' name='replytext' value='ABSTAIN'>
						<input type='submit' value='Abstain'>
						</form>" ).ToString();
						} else {
							output2 += "" + vote_text;
						}
						Interface13.Browse( this, output2, "window=playerpoll;size=500x500" );
						break;
					case "NUMVAL":
						voted_query3 = GlobalVars.dbcon.NewQuery( "SELECT o.text, v.rating FROM erro_poll_option o, erro_poll_vote v WHERE o.pollid = " + pollid + " AND v.ckey = '" + Task13.User.ckey + "' AND o.id = v.optionid" );
						voted_query3.Execute();
						output3 = "<div align='center'><B>Player poll</B>";
						output3 += "<hr>\n					<b>Question: " + pollquestion + "</b><br>\n					<font size='2'>Poll runs from <b>" + pollstarttime + "</b> until <b>" + pollendtime + "</b></font><p>";
						voted3 = false;

						while (voted_query3.NextRow()) {
							voted3 = true;
							optiontext = voted_query3.item[1];
							rating = voted_query3.item[2];
							output3 += "<br><b>" + optiontext + " - " + rating + "</b>";
						}

						if ( !voted3 ) {
							output3 += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>\n						<input type='hidden' name='src' value='" ).Ref( this ).str( "'>\n						<input type='hidden' name='votepollid' value='" ).item( pollid ).str( "'>\n						<input type='hidden' name='votetype' value='NUMVAL'>" ).ToString();
							minid = 999999;
							maxid = 0;
							option_query = GlobalVars.dbcon.NewQuery( "SELECT id, text, minval, maxval, descmin, descmid, descmax FROM erro_poll_option WHERE pollid = " + pollid );
							option_query.Execute();

							while (option_query.NextRow()) {
								optionid = String13.ParseNumber( option_query.item[1] );
								optiontext2 = option_query.item[2];
								minvalue = String13.ParseNumber( option_query.item[3] );
								maxvalue = String13.ParseNumber( option_query.item[4] );
								descmin = option_query.item[5];
								descmid = option_query.item[6];
								descmax = option_query.item[7];

								if ( ( optionid ??0) < ( minid ??0) ) {
									minid = optionid;
								}

								if ( ( optionid ??0) > ( maxid ??0) ) {
									maxid = optionid;
								}
								midvalue = Num13.Floor( ( ( maxvalue ??0) + ( minvalue ??0) ) / 2 );

								if ( minvalue == null || maxvalue == null || minvalue == maxvalue ) {
									continue;
								}
								output3 += "<br>" + optiontext2 + ": <select name='o" + optionid + "'>\n							<option value='abstain'>abstain</option>";
								j = null;
								j = minvalue;

								while (( j ??0) <= ( maxvalue ??0)) {
									
									if ( j == minvalue && Lang13.Bool( descmin ) ) {
										output3 += "<option value='" + j + "'>" + j + " (" + descmin + ")</option>";
									} else if ( j == midvalue && Lang13.Bool( descmid ) ) {
										output3 += "<option value='" + j + "'>" + j + " (" + descmid + ")</option>";
									} else if ( j == maxvalue && Lang13.Bool( descmax ) ) {
										output3 += "<option value='" + j + "'>" + j + " (" + descmax + ")</option>";
									} else {
										output3 += "<option value='" + j + "'>" + j + "</option>";
									}
									j++;
								}
								output3 += "</select>";
							}
							output3 += "<input type='hidden' name='minid' value='" + minid + "'>\n						<input type='hidden' name='maxid' value='" + maxid + "'>\n						<p><input type='submit' value='Submit'>\n						</form>";
						}
						Interface13.Browse( this, output3, "window=playerpoll;size=500x500" );
						break;
					case "MULTICHOICE":
						voted_query4 = GlobalVars.dbcon.NewQuery( "SELECT optionid FROM erro_poll_vote WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
						voted_query4.Execute();
						votedfor = new ByTable();
						voted4 = false;

						while (voted_query4.NextRow()) {
							votedfor.Add( String13.ParseNumber( voted_query4.item[1] ) );
							voted4 = true;
						}
						options2 = new ByTable();
						maxoptionid = 0;
						minoptionid = 0;
						options_query2 = GlobalVars.dbcon.NewQuery( "SELECT id, text FROM erro_poll_option WHERE pollid = " + pollid );
						options_query2.Execute();

						while (options_query2.NextRow()) {
							PO2 = new Polloption();
							PO2.optionid = String13.ParseNumber( options_query2.item[1] );
							PO2.optiontext = options_query2.item[2];

							if ( ( PO2.optionid ??0) > ( maxoptionid ??0) ) {
								maxoptionid = PO2.optionid;
							}

							if ( ( PO2.optionid ??0) < ( minoptionid ??0) || !Lang13.Bool( minoptionid ) ) {
								minoptionid = PO2.optionid;
							}
							options2.Add( PO2 );
						}

						if ( Lang13.Bool( select_query.item[5] ) ) {
							multiplechoiceoptions = String13.ParseNumber( select_query.item[5] );
						}
						output4 = "<div align='center'><B>Player poll</B>";
						output4 += "<hr>\n					<b>Question: " + pollquestion + "</b><br>You can select up to " + multiplechoiceoptions + " options. If you select more, the first " + multiplechoiceoptions + " will be saved.<br>\n					<font size='2'>Poll runs from <b>" + pollstarttime + "</b> until <b>" + pollendtime + "</b></font><p>";

						if ( !voted4 ) {
							output4 += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>\n						<input type='hidden' name='src' value='" ).Ref( this ).str( "'>\n						<input type='hidden' name='votepollid' value='" ).item( pollid ).str( "'>\n						<input type='hidden' name='votetype' value='MULTICHOICE'>\n						<input type='hidden' name='maxoptionid' value='" ).item( maxoptionid ).str( "'>\n						<input type='hidden' name='minoptionid' value='" ).item( minoptionid ).str( "'>" ).ToString();
						}
						output4 += "<table><tr><td>";

						foreach (dynamic _b in Lang13.Enumerate( options2, typeof(Polloption) )) {
							O2 = _b;
							

							if ( Lang13.Bool( O2.optionid ) && Lang13.Bool( O2.optiontext ) ) {
								
								if ( voted4 ) {
									
									if ( votedfor.Contains( O2.optionid ) ) {
										output4 += "<b>" + O2.optiontext + "</b><br>";
									} else {
										output4 += "" + O2.optiontext + "<br>";
									}
								} else {
									output4 += "<input type='checkbox' name='option_" + O2.optionid + "' value='" + O2.optionid + "'> " + O2.optiontext + "<br>";
								}
							}
						}
						output4 += "</td></tr></table>";

						if ( !voted4 ) {
							output4 += "<p><input type='submit' value='Vote'>\n						</form>";
						}
						output4 += "</div>";
						Interface13.Browse( this, output4, "window=playerpoll;size=500x250" );
						break;
				}
				return;
			}
			return;
		}

		// Function from file: poll.dm
		public void handle_player_polling(  ) {
			bool isadmin = false;
			DBQuery select_query = null;
			string output = null;
			dynamic pollid = null;
			dynamic pollquestion = null;
			string color1 = null;
			string color2 = null;
			int i = 0;

			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				isadmin = false;

				if ( this.client != null && this.client.holder != null ) {
					isadmin = true;
				}
				select_query = GlobalVars.dbcon.NewQuery( "SELECT id, question FROM erro_poll_question WHERE " + ( isadmin ? "" : "adminonly = false AND" ) + " Now() BETWEEN starttime AND endtime" );
				select_query.Execute();
				output = "<div align='center'><B>Player polls</B>\n<hr>";
				output += "<table>";
				color1 = "#ececec";
				color2 = "#e2e2e2";
				i = 0;

				while (select_query.NextRow()) {
					pollid = select_query.item[1];
					pollquestion = select_query.item[2];
					output += new Txt( "<tr bgcolor='" ).item( ( i % 2 == 1 ? color1 : color2 ) ).str( "'><td><a href=\"byond://?src=" ).Ref( this ).str( ";pollid=" ).item( pollid ).str( "\"><b>" ).item( pollquestion ).str( "</b></a> | <a href=\"byond://?src=" ).Ref( this ).str( ";pollid=" ).item( pollid ).str( ";results=1\">Results</a></td></tr>" ).ToString();
					i++;
				}
				output += "</table>";
				Interface13.Browse( this, output, "window=playerpolllist;size=500x300" );
			}
			return;
		}

		// Function from file: poll.dm
		public void privacy_poll(  ) {
			string output = null;

			output = "<div align='center'><B>Player poll</B>";
			output += new Txt( @"<hr>
		<b>We would like to expand our stats gathering.</b>
		<br>This however involves gathering data about player behavior, play styles, unique player numbers, play times, etc. Data like that cannot be gathered fully anonymously, which is why we're asking you how you'd feel if player-specific data was gathered. Prior to any of this actually happening, a privacy policy will be discussed, but before that can begin, we'd preliminarily like to know how you feel about the concept.
		<hr>
		How do you feel about the game gathering player-specific statistics? This includes statistics about individual players as well as in-game polling/opinion requests.
		<p><a href='byond://?src=" ).Ref( this ).str( ";privacy_poll=signed'>Signed stats gathering</A>\n		<br>Pick this option if you think usernames should be logged with stats. This allows us to have personalized stats as well as polls.\n		<p><a href='byond://?src=" ).Ref( this ).str( ";privacy_poll=anonymous'>Anonymous stats gathering</A>\n		<br>Pick this option if you think only hashed (indecipherable) usernames should be logged with stats. This doesn't allow us to have personalized stats, as we can't tell who is who (hashed values aren't readable), we can however have ingame polls.\n		<p><a href='byond://?src=" ).Ref( this ).str( ";privacy_poll=nostats'>No stats gathering</A>\n		<br>Pick this option if you don't want player-specific stats gathered. This does not allow us to have player-specific stats or polls.\n		<p><a href='byond://?src=" ).Ref( this ).str( ";privacy_poll=later'>Ask again later</A>\n		<br>This poll will be brought up again next round.\n		<p><a href='byond://?src=" ).Ref( this ).str( ";privacy_poll=abstain'>Don't ask again</A>\n		<br>Only pick this if you are fine with whatever option wins.\n		</div>" ).ToString();
			Interface13.Browse( this, output, "window=privacypoll;size=600x500" );
			return;
		}

		// Function from file: poll.dm
		public void handle_privacy_poll(  ) {
			bool voted = false;
			DBQuery query = null;

			GlobalFuncs.establish_db_connection();

			if ( !GlobalVars.dbcon.IsConnected() ) {
				return;
			}
			voted = false;
			query = GlobalVars.dbcon.NewQuery( "SELECT * FROM erro_privacy WHERE ckey='" + this.ckey + "'" );
			query.Execute();

			while (query.NextRow()) {
				voted = true;
				break;
			}

			if ( !voted ) {
				this.privacy_poll();
			}
			return;
		}

		// Function from file: new_player.dm
		public void close_spawn_windows(  ) {
			Interface13.Browse( this, null, "window=latechoices" );
			Interface13.Browse( this, null, "window=playersetup" );
			return;
		}

		// Function from file: new_player.dm
		public void ViewManifest(  ) {
			string dat = null;

			dat = "<html><body>\n<h4>Crew Manifest</h4>";
			dat += GlobalVars.data_core.get_manifest( null, true );
			Interface13.Browse( this, dat, "window=manifest;size=370x420;can_close=1" );
			return;
		}

		// Function from file: new_player.dm
		public Mob_Living_Carbon_Human create_character(  ) {
			Mob_Living_Carbon_Human new_character = null;
			dynamic chosen_species = null;
			dynamic chosen_language = null;

			this.spawning = true;
			this.close_spawn_windows();
			new_character = new Mob_Living_Carbon_Human( this.loc );

			if ( Lang13.Bool( this.client.prefs.species ) ) {
				chosen_species = GlobalVars.all_species[this.client.prefs.species];
			}

			if ( Lang13.Bool( chosen_species ) ) {
				
				if ( GlobalFuncs.is_alien_whitelisted( this, this.client.prefs.species ) || !GlobalVars.config.usealienwhitelist || !Lang13.Bool( chosen_species.flags & 1 ) || this.client != null && this.client.holder != null && Lang13.Bool( this.client.holder.rights & 2 ) ) {
					new_character.set_species( this.client.prefs.species );
				}
			}

			if ( Lang13.Bool( this.client.prefs.language ) ) {
				chosen_language = GlobalVars.all_languages["" + this.client.prefs.language];
			}

			if ( Lang13.Bool( chosen_language ) ) {
				
				if ( GlobalFuncs.is_alien_whitelisted( this, this.client.prefs.language ) || !GlobalVars.config.usealienwhitelist || !Lang13.Bool( chosen_language.flags & 1 ) ) {
					new_character.add_language( "" + this.client.prefs.language );
				}
			}

			if ( GlobalVars.ticker.random_players || Lang13.Bool( GlobalFuncs.appearance_isbanned( this ) ) ) {
				new_character.setGender( Rand13.Pick(new object [] { GlobalVars.MALE, GlobalVars.FEMALE }) );
				this.client.prefs.real_name = GlobalFuncs.random_name( new_character.gender );
				this.client.prefs.randomize_appearance_for( new_character );
				this.client.prefs.flavor_text = "";
			} else {
				this.client.prefs.copy_to( new_character );
			}
			GlobalFuncs.to_chat( this, new Sound( null, false, false, 1, 85 ) );

			if ( this.mind != null ) {
				this.mind.active = false;
				this.mind.original = new_character;
				this.mind.transfer_to( new_character );
			}
			new_character.name = this.real_name;
			new_character.dna.ready_dna( new_character );
			new_character.dna.b_type = this.client.prefs.b_type;

			if ( ( ((int)( this.client.prefs.disabilities ??0 )) & 1 ) != 0 ) {
				new_character.dna.SetSEState( GlobalVars.GLASSESBLOCK, true, true );
				new_character.disabilities |= 1;
			}
			chosen_species = GlobalVars.all_species[this.client.prefs.species];

			if ( ( ((int)( this.client.prefs.disabilities ??0 )) & 2 ) != 0 && Lang13.Bool( chosen_species.flags & 8192 ) ) {
				new_character.mutations.Add( 6 );
				new_character.mutations.Add( 200 );
				new_character.overeatduration = 600;
			}

			if ( ( ((int)( this.client.prefs.disabilities ??0 )) & 4 ) != 0 ) {
				new_character.dna.SetSEState( GlobalVars.EPILEPSYBLOCK, true, true );
				new_character.disabilities |= 2;
			}

			if ( ( ((int)( this.client.prefs.disabilities ??0 )) & 8 ) != 0 ) {
				new_character.dna.SetSEState( GlobalVars.DEAFBLOCK, true, true );
				new_character.sdisabilities |= 4;
			}
			new_character.dna.UpdateSE();
			new_character.key = this.key;
			return new_character;
		}

		// Function from file: new_player.dm
		public void LateChoices(  ) {
			int mills = 0;
			double mins = 0;
			double hours = 0;
			string dat = null;
			Job job = null;
			int active = 0;
			dynamic M = null;

			mills = Game13.time;
			mins = mills % 36000 / 600;
			hours = mills / 36000;
			dat = "<html><body><center>\nRound Duration: " + Num13.Floor( hours ) + "h " + Num13.Floor( mins ) + "m<br>";

			if ( GlobalVars.emergency_shuttle != null ) {
				
				if ( GlobalVars.emergency_shuttle.direction == 2 ) {
					dat += "<font color='red'><b>The station has been evacuated.</b></font><br>";
				}

				if ( GlobalVars.emergency_shuttle.direction == 1 && GlobalVars.emergency_shuttle.timeleft() < 300 && !GlobalVars.emergency_shuttle.alert ) {
					dat += "<font color='red'>The station is currently undergoing evacuation procedures.</font><br>";
				}

				if ( GlobalVars.emergency_shuttle.direction == 1 && GlobalVars.emergency_shuttle.alert ) {
					dat += "<font color='red'>The station is currently undergoing crew transfer procedures.</font><br>";
				}
			}
			dat += "Choose from the following open positions:<br>";

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.job_master.occupations, typeof(Job) )) {
				job = _b;
				

				if ( job != null && this.IsJobAvailable( job.title ) ) {
					active = 0;

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
						M = _a;
						

						if ( Lang13.Bool( M.mind ) && Lang13.Bool( M.client ) && M.mind.assigned_role == job.title && M.client.inactivity <= 6000 ) {
							active++;
						}
					}
					dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";SelectedJob=" ).item( job.title ).str( "'>" ).item( job.title ).str( " (" ).item( job.current_positions ).str( ") (Active: " ).item( active ).str( ")</a><br>" ).ToString();
				}
			}
			dat += "</center>";
			Interface13.Browse( this, dat, "window=latechoices;size=300x640;can_close=1" );
			return;
		}

		// Function from file: new_player.dm
		public bool AttemptLateSpawn( string rank = null ) {
			Mob_Living_Carbon_Human character = null;
			dynamic left_leg = null;
			dynamic right_leg = null;
			Obj_Structure_Bed_Chair_Vehicle_Wheelchair W = null;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( this != Task13.User ) {
				return false;
			}

			if ( !( GlobalVars.ticker != null ) || GlobalVars.ticker.current_state != 3 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The round is either not ready, or has already finished...</span>" );
				return false;
			}

			if ( !GlobalVars.enter_allowed ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>There is an administrative lock on entering the game!</span>" );
				return false;
			}

			if ( !this.IsJobAvailable( rank ) ) {
				GlobalFuncs.to_chat( this, Interface13.Alert( "" + rank + " is not available. Please try another." ) );
				return false;
			}
			GlobalVars.job_master.AssignRole( this, rank, true );
			character = this.create_character();

			if ( Lang13.Bool( character.client.prefs.randomslot ) ) {
				character.client.prefs.random_character_sqlite( character, character.ckey );
			}
			GlobalVars.job_master.EquipRank( character, rank, true );
			GlobalFuncs.EquipCustomItems( character );
			character.loc = Rand13.PickFromTable( ( GlobalVars.assistant_latejoin.len > 0 && rank == "Assistant" ? GlobalVars.assistant_latejoin : GlobalVars.latejoin ) );
			left_leg = character.get_organ( "l_foot" );
			right_leg = character.get_organ( "r_foot" );

			if ( ( !Lang13.Bool( left_leg ) || Lang13.Bool( left_leg.status & 64 ) ) && ( !Lang13.Bool( right_leg ) || Lang13.Bool( right_leg.status & 64 ) ) ) {
				W = new Obj_Structure_Bed_Chair_Vehicle_Wheelchair( character.loc );
				W.buckle_mob( character, character );
			}
			character.store_position();

			if ( GlobalVars.bomberman_mode ) {
				GlobalFuncs.to_chat( character.client, new Sound( "sound/bomberman/start.ogg" ) );

				if ( Lang13.Bool( character.wear_suit ) ) {
					O = character.wear_suit;
					character.u_equip( O, true );
					O.loc = character.loc;
				}

				if ( Lang13.Bool( character.head ) ) {
					O2 = character.head;
					character.u_equip( O2, true );
					O2.loc = character.loc;
				}
				character.equip_to_slot_or_del( new Obj_Item_Clothing_Head_Helmet_Space_Bomberman( character ), 11 );
				character.equip_to_slot_or_del( new Obj_Item_Clothing_Suit_Space_Bomberman( character ), 13 );
				character.equip_to_slot_or_del( new Obj_Item_Weapon_Bomberman( character ), 17 );
				character.update_icons();
				GlobalFuncs.to_chat( character, "<span class='notice'>Tip: Use the BBD in your suit's pocket to place bombs.</span>" );
				GlobalFuncs.to_chat( character, "<span class='notice'>Try to keep your BBD and escape this hell hole alive!</span>" );
			}
			((GameMode)GlobalVars.ticker.mode).latespawn( character );

			if ( character.mind.assigned_role != "Cyborg" ) {
				GlobalVars.data_core.manifest_inject( character );
				GlobalVars.ticker.minds.Add( character.mind );
				GlobalFuncs.AnnounceArrival( character, rank );
				this.FuckUpGenes( character );
			} else {
				character.Robotize();
			}
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: new_player.dm
		public void FuckUpGenes( Mob_Living_Carbon_Human H = null ) {
			
			if ( Rand13.PercentChance( 20 ) ) {
				H.dna.GiveRandomSE( 2, null, 0 );

				if ( Rand13.PercentChance( 10 ) ) {
					H.dna.GiveRandomSE( 2, null, 1 );
				}
			}
			return;
		}

		// Function from file: new_player.dm
		public bool IsJobAvailable( string rank = null ) {
			bool _default = false;

			Job job = null;
			double count = 0;
			Job officer = null;
			Job warden = null;
			Job hos = null;
			Job officer2 = null;

			job = GlobalVars.job_master.GetJob( rank );

			if ( !( job != null ) ) {
				return false;
			}

			if ( ( job.current_positions ??0) >= ( job.total_positions ??0) && job.total_positions != -1 ) {
				return false;
			}

			if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( this, rank ) ) ) {
				return false;
			}

			if ( !job.player_old_enough( this.client ) ) {
				return false;
			}

			if ( GlobalVars.config.assistantlimit ) {
				
				if ( job.title == "Assistant" ) {
					count = 0;
					officer = GlobalVars.job_master.GetJob( "Security Officer" );
					warden = GlobalVars.job_master.GetJob( "Warden" );
					hos = GlobalVars.job_master.GetJob( "Head of Security" );
					count += ( officer.current_positions ??0) + ( warden.current_positions ??0) + ( hos.current_positions ??0);

					if ( ( job.current_positions ??0) > ( GlobalVars.config.assistantratio ??0) * count ) {
						
						if ( count >= 5 ) {
							_default = true;
						} else {
							return false;
						}
					}
				}
			}

			if ( job.title == "Assistant" && ( job.current_positions ??0) > 5 ) {
				officer2 = GlobalVars.job_master.GetJob( "Security Officer" );

				if ( ( officer2.current_positions ??0) >= ( officer2.total_positions ??0) ) {
					officer2.total_positions++;
				}
			}
			_default = true;
			return _default;
		}

		// Function from file: new_player.dm
		public void new_player_panel_proc(  ) {
			string output = null;
			bool isadmin = false;
			DBQuery query = null;
			bool newpoll = false;

			output = "<div align='center'><B>New Player Options</B>";
			output += new Txt( "<hr>\n		<p><a href='byond://?src=" ).Ref( this ).str( ";show_preferences=1'>Setup Character</A></p>" ).ToString();

			if ( !( GlobalVars.ticker != null ) || GlobalVars.ticker.current_state <= 1 ) {
				
				if ( !this.ready ) {
					output += new Txt( "<p><a href='byond://?src=" ).Ref( this ).str( ";ready=1'>Declare Ready</A></p>" ).ToString();
				} else {
					output += new Txt( "<p><b>You are ready</b> (<a href='byond://?src=" ).Ref( this ).str( ";ready=2'>Cancel</A>)</p>" ).ToString();
				}
			} else {
				this.ready = false;
				output += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";manifest=1'>View the Crew Manifest</A><br><br>\n			<p><a href='byond://?src=" ).Ref( this ).str( ";late_join=1'>Join Game!</A></p>" ).ToString();
			}
			output += new Txt( "<p><a href='byond://?src=" ).Ref( this ).str( ";observe=1'>Observe</A></p>" ).ToString();

			if ( !GlobalFuncs.IsGuestKey( this.key ) ) {
				GlobalFuncs.establish_db_connection();

				if ( GlobalVars.dbcon.IsConnected() ) {
					isadmin = false;

					if ( this.client != null && this.client.holder != null ) {
						isadmin = true;
					}
					query = GlobalVars.dbcon.NewQuery( "SELECT id FROM erro_poll_question WHERE " + ( isadmin ? "" : "adminonly = false AND" ) + " Now() BETWEEN starttime AND endtime AND id NOT IN (SELECT pollid FROM erro_poll_vote WHERE ckey = \"" + this.ckey + "\") AND id NOT IN (SELECT pollid FROM erro_poll_textreply WHERE ckey = \"" + this.ckey + "\")" );
					query.Execute();
					newpoll = false;

					while (query.NextRow()) {
						newpoll = true;
						break;
					}

					if ( newpoll ) {
						output += new Txt( "<p><b><a href='byond://?src=" ).Ref( this ).str( ";showpoll=1'>Show Player Polls</A> (NEW!)</b></p>" ).ToString();
					} else {
						output += new Txt( "<p><a href='byond://?src=" ).Ref( this ).str( ";showpoll=1'>Show Player Polls</A></p>" ).ToString();
					}
				}
			}
			output += "</div>";
			Interface13.Browse( this, output, "window=playersetup;size=210x240;can_close=0" );
			return;
		}

		// Function from file: vgstation13.dme
		public override bool Logout(  ) {
			this.ready = false;
			base.Logout();

			if ( !this.spawning ) {
				this.key = null;
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			this.update_Login_details();

			if ( Lang13.Bool( GlobalVars.join_motd ) ) {
				GlobalFuncs.to_chat( this, "<div class=\"motd\">" + GlobalVars.join_motd + "</div>" );
			}

			if ( !( this.mind != null ) ) {
				this.mind = new Mind( this.key );
				this.mind.active = true;
				this.mind.current = this;
			}

			if ( Lang13.Length( GlobalVars.newplayer_start ) != 0 ) {
				this.loc = Rand13.PickFromTable( GlobalVars.newplayer_start );
			} else {
				this.loc = Map13.GetTile( 1, 1, 1 );
			}
			this.sight |= GlobalVars.SEE_TURFS;
			GlobalVars.player_list.Or( this );
			this.new_player_panel();

			if ( GlobalVars.deadmins.Contains( this.ckey ) ) {
				this.client.verbs.Add( typeof(Client).GetMethod( "readmin" ) );
			}
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( this.client != null ) {
					
					if ( this.client.prefs.lastchangelog != GlobalVars.changelog_hash ) {
						this.client.getFiles( "html/postcardsmall.jpg", "html/somerights20.png", "html/88x31.png", "html/bug-minus.png", "html/cross-circle.png", "html/hard-hat-exclamation.png", "html/image-minus.png", "html/image-plus.png", "html/music-minus.png", "html/music-plus.png", "html/tick-circle.png", "html/wrench-screwdriver.png", "html/spell-check.png", "html/burn-exclamation.png", "html/chevron.png", "html/chevron-expand.png", "html/changelog.css", "html/changelog.js", "html/changelog.html" );
						Interface13.Browse( this, "html/changelog.html", "window=changes;size=675x650" );
						this.client.prefs.lastchangelog = GlobalVars.changelog_hash;
						this.client.prefs.save_preferences();
						Interface13.WindowSet( this.client, "rpane.changelog", "background-color=none;font-style=;" );
					}
					this.handle_privacy_poll();
					this.client.playtitlemusic();
				}
				return;
			}));
			return null;
		}

		// Function from file: transform_procs.dm
		public override Mob_Living_Silicon_Ai AIize(  ) {
			this.spawning = true;
			return base.AIize();
		}

		// Function from file: other_mobs.dm
		public override bool ClickOn( Ent_Static A = null, string _params = null ) {
			return false;
		}

		// Function from file: new_player.dm
		[Verb]
		[VerbInfo( access: VerbAccess.IsUser )]
		public void new_player_panel(  ) {
			this.new_player_panel_proc();
			return;
		}

	}

}