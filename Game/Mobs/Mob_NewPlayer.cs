// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_NewPlayer : Mob {

		public double? ready = 0;
		public bool spawning = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 101;
			this.stat = 2;
			this.canmove = false;
			this.anchored = 1;
		}

		// Function from file: new_player.dm
		public Mob_NewPlayer ( dynamic loc = null ) : base( (object)(loc) ) {
			this.tag = "mob_" + GlobalVars.next_mob_id++;
			GlobalVars.mob_list.Add( this );

			if ( Lang13.Length( GlobalVars.newplayer_start ) != 0 ) {
				this.loc = Rand13.PickFromTable( GlobalVars.newplayer_start );
			} else {
				this.loc = Map13.GetTile( 1, 1, 1 );
			}
			return;
		}

		// Function from file: new_player.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			return false;
		}

		// Function from file: new_player.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			int relevant_cap = 0;
			Mob_Dead_Observer observer = null;
			dynamic O = null;
			int queue_position = 0;
			dynamic pollid = null;
			double? pollid2 = null;
			dynamic votetype = null;
			double? optionid = null;
			dynamic replytext = null;
			double? id_min = null;
			double? id_max = null;
			double? optionid2 = null;
			double? rating = null;
			double? id_min2 = null;
			double? id_max2 = null;
			double? optionid3 = null;

			
			if ( this != Task13.User ) {
				return 0;
			}

			if ( !( this.client != null ) ) {
				return 0;
			}

			if ( Lang13.Bool( GlobalVars.config.hard_popcap ) && Lang13.Bool( GlobalVars.config.extreme_popcap ) ) {
				relevant_cap = Num13.MinInt( ((int)( GlobalVars.config.hard_popcap ??0 )), ((int)( GlobalVars.config.extreme_popcap ??0 )) );
			} else {
				relevant_cap = Num13.MaxInt( ((int)( GlobalVars.config.hard_popcap ??0 )), ((int)( GlobalVars.config.extreme_popcap ??0 )) );
			}

			if ( Lang13.Bool( href_list["show_preferences"] ) ) {
				this.client.prefs.ShowChoices( this );
				return 1;
			}

			if ( Lang13.Bool( href_list["ready"] ) ) {
				
				if ( !( GlobalVars.ticker != null ) || GlobalVars.ticker.current_state <= 1 ) {
					this.ready = String13.ParseNumber( href_list["ready"] );
				} else {
					this.ready = 0;
				}
			}

			if ( Lang13.Bool( href_list["refresh"] ) ) {
				Interface13.Browse( this, null, "window=playersetup" );
				this.new_player_panel();
			}

			if ( Lang13.Bool( href_list["observe"] ) ) {
				
				if ( Interface13.Alert( this, "Are you sure you wish to observe? You will not be able to play this round!", "Player Setup", "Yes", "No" ) == "Yes" ) {
					
					if ( !( this.client != null ) ) {
						return 1;
					}
					observer = new Mob_Dead_Observer();
					this.spawning = true;
					observer.started_as_observer = true;
					this.close_spawn_windows();
					O = Lang13.FindObj( "landmark*Observer-Start" );
					this.WriteMsg( "<span class='notice'>Now teleporting.</span>" );

					if ( Lang13.Bool( O ) ) {
						observer.loc = O.loc;
					} else {
						this.WriteMsg( "<span class='notice'>Teleporting failed. You should be able to use ghost verbs to teleport somewhere useful</span>" );
					}

					if ( Lang13.Bool( this.client.prefs.be_random_name ) ) {
						this.client.prefs.real_name = GlobalFuncs.random_unique_name( this.gender );
					}

					if ( Lang13.Bool( this.client.prefs.be_random_body ) ) {
						this.client.prefs.random_character( this.gender );
					}
					observer.real_name = this.client.prefs.real_name;
					observer.name = observer.real_name;
					observer.key = this.key;
					observer.stopLobbySound();
					GlobalFuncs.qdel( this.mind );
					GlobalFuncs.qdel( this );
					return 1;
				}
			}

			if ( Lang13.Bool( href_list["late_join"] ) ) {
				
				if ( !( GlobalVars.ticker != null ) || GlobalVars.ticker.current_state != 3 ) {
					Task13.User.WriteMsg( "<span class='danger'>The round is either not ready, or has already finished...</span>" );
					return null;
				}

				if ( href_list["late_join"] == "override" ) {
					this.LateChoices();
					return null;
				}

				if ( GlobalVars.ticker.queued_players.len != 0 || relevant_cap != 0 && GlobalFuncs.living_player_count() >= relevant_cap && !GlobalVars.admin_datums.Contains( String13.CKey( this.key ) ) ) {
					Task13.User.WriteMsg( "<span class='danger'>" + GlobalVars.config.hard_popcap_message + "</span>" );
					queue_position = GlobalVars.ticker.queued_players.Find( Task13.User );

					if ( queue_position == 1 ) {
						Task13.User.WriteMsg( "<span class='notice'>You are next in line to join the game. You will be notified when a slot opens up.</span>" );
					} else if ( queue_position != 0 ) {
						Task13.User.WriteMsg( "<span class='notice'>There are " + ( queue_position - 1 ) + " players in front of you in the queue to join the game.</span>" );
					} else {
						GlobalVars.ticker.queued_players.Add( Task13.User );
						Task13.User.WriteMsg( "<span class='notice'>You have been added to the queue to join the game. Your position in queue is " + GlobalVars.ticker.queued_players.len + ".</span>" );
					}
					return null;
				}
				this.LateChoices();
			}

			if ( Lang13.Bool( href_list["manifest"] ) ) {
				this.ViewManifest();
			}

			if ( Lang13.Bool( href_list["SelectedJob"] ) ) {
				
				if ( !GlobalVars.enter_allowed ) {
					Task13.User.WriteMsg( "<span class='notice'>There is an administrative lock on entering the game!</span>" );
					return null;
				}

				if ( GlobalVars.ticker.queued_players.len != 0 && !GlobalVars.admin_datums.Contains( String13.CKey( this.key ) ) ) {
					
					if ( GlobalFuncs.living_player_count() >= relevant_cap || this != GlobalVars.ticker.queued_players[1] ) {
						Task13.User.WriteMsg( "<span class='warning'>Server is full.</span>" );
						return null;
					}
				}
				this.AttemptLateSpawn( href_list["SelectedJob"] );
				return null;
			}

			if ( !Lang13.Bool( this.ready ) && Lang13.Bool( href_list["preference"] ) ) {
				
				if ( this.client != null ) {
					this.client.prefs.process_link( this, href_list );
				}
			} else if ( !Lang13.Bool( href_list["late_join"] ) ) {
				this.new_player_panel();
			}

			if ( Lang13.Bool( href_list["showpoll"] ) ) {
				this.handle_player_polling();
				return null;
			}

			if ( Lang13.Bool( href_list["pollid"] ) ) {
				pollid = href_list["pollid"];

				if ( pollid is string ) {
					pollid = String13.ParseNumber( pollid );
				}

				if ( Lang13.Bool( Lang13.IsNumber( pollid ) ) ) {
					this.poll_player( pollid );
				}
				return null;
			}

			if ( Lang13.Bool( href_list["votepollid"] ) && Lang13.Bool( href_list["votetype"] ) ) {
				pollid2 = String13.ParseNumber( href_list["votepollid"] );
				votetype = href_list["votetype"];

				dynamic _a = votetype; // Was a switch-case, sorry for the mess.
				if ( _a=="OPTION" ) {
					optionid = String13.ParseNumber( href_list["voteoptionid"] );
					this.vote_on_poll( pollid2, optionid );
				} else if ( _a=="TEXT" ) {
					replytext = href_list["replytext"];
					this.log_text_poll_reply( pollid2, replytext );
				} else if ( _a=="NUMVAL" ) {
					id_min = String13.ParseNumber( href_list["minid"] );
					id_max = String13.ParseNumber( href_list["maxid"] );

					if ( ( id_max ??0) - ( id_min ??0) > 100 ) {
						Task13.User.WriteMsg( "The option ID difference is too big. Please contact administration or the database admin." );
						return null;
					}
					optionid2 = null;
					optionid2 = id_min;

					while (( optionid2 ??0) <= ( id_max ??0)) {
						
						if ( !( href_list["o" + optionid2] == null ) ) {
							rating = null;

							if ( href_list["o" + optionid2] == "abstain" ) {
								rating = null;
							} else {
								rating = String13.ParseNumber( href_list["o" + optionid2] );

								if ( !Lang13.Bool( Lang13.IsNumber( rating ) ) ) {
									return null;
								}
							}
							this.vote_on_numval_poll( pollid2, optionid2, rating );
						}
						optionid2++;
					}
				} else if ( _a=="MULTICHOICE" ) {
					id_min2 = String13.ParseNumber( href_list["minoptionid"] );
					id_max2 = String13.ParseNumber( href_list["maxoptionid"] );

					if ( ( id_max2 ??0) - ( id_min2 ??0) > 100 ) {
						Task13.User.WriteMsg( "The option ID difference is too big. Please contact administration or the database admin." );
						return null;
					}
					optionid3 = null;
					optionid3 = id_min2;

					while (( optionid3 ??0) <= ( id_max2 ??0)) {
						
						if ( !( href_list["option_" + optionid3] == null ) ) {
							this.vote_on_poll( pollid2, optionid3, true );
						}
						optionid3++;
					}
				}
			}
			return null;
		}

		// Function from file: new_player.dm
		public override dynamic Stat(  ) {
			base.Stat();

			if ( Interface13.IsStatPanelActive( "Lobby" ) ) {
				Interface13.Stat( "Game Mode:", ( GlobalVars.ticker.hide_mode ? "Secret" : "" + GlobalVars.master_mode ) );
				Interface13.Stat( "Map:", "Box Station" );

				if ( GlobalVars.ticker.current_state == 1 ) {
					Interface13.Stat( "Time To Start:", ( Convert.ToDouble( GlobalVars.ticker.timeLeft ) >= 0 ? "" + Num13.Floor( Convert.ToDouble( GlobalVars.ticker.timeLeft / 10 ) ) + "s" : "DELAYED" ) );
					Interface13.Stat( "Players:", "" + GlobalVars.ticker.totalPlayers );

					if ( this.client.holder != null ) {
						Interface13.Stat( "Players Ready:", "" + GlobalVars.ticker.totalPlayersReady );
					}
				}
			}
			return null;
		}

		// Function from file: poll.dm
		public void vote_on_numval_poll( double? pollid = null, double? optionid = null, double? rating = null ) {
			pollid = pollid ?? -1;
			optionid = optionid ?? -1;

			DBQuery select_query = null;
			bool validpoll = false;
			DBQuery select_query2 = null;
			bool validoption = false;
			bool alreadyvoted = false;
			DBQuery voted_query = null;
			dynamic adminrank = null;
			DBQuery insert_query = null;

			
			if ( pollid == -1 || optionid == -1 ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( pollid ) ) || !Lang13.Bool( Lang13.IsNumber( optionid ) ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				select_query = GlobalVars.dbcon.NewQuery( "SELECT starttime, endtime, question, polltype FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE id = " + pollid + " AND Now() BETWEEN starttime AND endtime" );
				select_query.Execute();
				validpoll = false;

				while (select_query.NextRow()) {
					
					if ( select_query.item[4] != "NUMVAL" ) {
						return;
					}
					validpoll = true;
					break;
				}

				if ( !validpoll ) {
					Task13.User.WriteMsg( "<span class='danger'>Poll is not valid.</span>" );
					return;
				}
				select_query2 = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "poll_option" ) + " WHERE id = " + optionid + " AND pollid = " + pollid );
				select_query2.Execute();
				validoption = false;

				while (select_query2.NextRow()) {
					validoption = true;
					break;
				}

				if ( !validoption ) {
					Task13.User.WriteMsg( "<span class='danger'>Poll option is not valid.</span>" );
					return;
				}
				alreadyvoted = false;
				voted_query = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "poll_vote" ) + " WHERE optionid = " + optionid + " AND ckey = '" + Task13.User.ckey + "'" );
				voted_query.Execute();

				while (voted_query.NextRow()) {
					alreadyvoted = true;
					break;
				}

				if ( alreadyvoted ) {
					Task13.User.WriteMsg( "<span class='danger'>You already voted in this poll.</span>" );
					return;
				}
				adminrank = "Player";

				if ( Task13.User != null && Task13.User.client != null && Task13.User.client.holder != null ) {
					adminrank = Task13.User.client.holder.rank;
				}
				insert_query = GlobalVars.dbcon.NewQuery( "INSERT INTO " + GlobalFuncs.format_table_name( "poll_vote" ) + " (id ,datetime ,pollid ,optionid ,ckey ,ip ,adminrank, rating) VALUES (null, Now(), " + pollid + ", " + optionid + ", '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', '" + adminrank + "', " + ( rating == null ? ((dynamic)( "null" )) : ((dynamic)( rating )) ) + ")" );
				insert_query.Execute();
				Task13.User.WriteMsg( "<span class='notice'>Vote successful.</span>" );
				Interface13.Browse( Task13.User, null, "window=playerpoll" );
			}
			return;
		}

		// Function from file: poll.dm
		public void log_text_poll_reply( double? pollid = null, dynamic replytext = null ) {
			pollid = pollid ?? -1;
			replytext = replytext ?? "";

			DBQuery select_query = null;
			bool validpoll = false;
			bool alreadyvoted = false;
			DBQuery voted_query = null;
			dynamic adminrank = null;
			dynamic text_pass = null;
			DBQuery insert_query = null;

			
			if ( pollid == -1 || replytext == "" ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( pollid ) ) || !( replytext is string ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				select_query = GlobalVars.dbcon.NewQuery( "SELECT starttime, endtime, question, polltype FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE id = " + pollid + " AND Now() BETWEEN starttime AND endtime" );
				select_query.Execute();
				validpoll = false;

				while (select_query.NextRow()) {
					
					if ( select_query.item[4] != "TEXT" ) {
						return;
					}
					validpoll = true;
					break;
				}

				if ( !validpoll ) {
					Task13.User.WriteMsg( "<span class='danger'>Poll is not valid.</span>" );
					return;
				}
				alreadyvoted = false;
				voted_query = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "poll_textreply" ) + " WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
				voted_query.Execute();

				while (voted_query.NextRow()) {
					alreadyvoted = true;
					break;
				}

				if ( alreadyvoted ) {
					Task13.User.WriteMsg( "<span class='danger'>You already sent your feedback for this poll.</span>" );
					return;
				}
				adminrank = "Player";

				if ( Task13.User != null && Task13.User.client != null && Task13.User.client.holder != null ) {
					adminrank = Task13.User.client.holder.rank;
				}
				replytext = GlobalFuncs.replacetext( replytext, "%BR%", "" );
				replytext = GlobalFuncs.replacetext( replytext, "\n", "%BR%" );
				text_pass = GlobalFuncs.reject_bad_text( replytext, 8000 );
				replytext = GlobalFuncs.replacetext( replytext, "%BR%", "<BR>" );

				if ( !Lang13.Bool( text_pass ) ) {
					Task13.User.WriteMsg( "The text you entered was blank, contained illegal characters or was too long. Please correct the text and submit again." );
					return;
				}
				insert_query = GlobalVars.dbcon.NewQuery( "INSERT INTO " + GlobalFuncs.format_table_name( "poll_textreply" ) + " (id ,datetime ,pollid ,ckey ,ip ,replytext ,adminrank) VALUES (null, Now(), " + pollid + ", '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', '" + replytext + "', '" + adminrank + "')" );
				insert_query.Execute();
				Task13.User.WriteMsg( "<span class='notice'>Feedback logging successful.</span>" );
				Interface13.Browse( Task13.User, null, "window=playerpoll" );
			}
			return;
		}

		// Function from file: poll.dm
		public void vote_on_poll( double? pollid = null, double? optionid = null, bool? multichoice = null ) {
			pollid = pollid ?? -1;
			optionid = optionid ?? -1;
			multichoice = multichoice ?? false;

			DBQuery select_query = null;
			bool validpoll = false;
			double? multiplechoiceoptions = null;
			DBQuery select_query2 = null;
			bool validoption = false;
			double? alreadyvoted = null;
			DBQuery voted_query = null;
			dynamic adminrank = null;
			DBQuery insert_query = null;

			
			if ( pollid == -1 || optionid == -1 ) {
				return;
			}

			if ( !Lang13.Bool( Lang13.IsNumber( pollid ) ) || !Lang13.Bool( Lang13.IsNumber( optionid ) ) ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				select_query = GlobalVars.dbcon.NewQuery( "SELECT starttime, endtime, question, polltype, multiplechoiceoptions FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE id = " + pollid + " AND Now() BETWEEN starttime AND endtime" );
				select_query.Execute();
				validpoll = false;
				multiplechoiceoptions = 0;

				while (select_query.NextRow()) {
					
					if ( select_query.item[4] != "OPTION" && select_query.item[4] != "MULTICHOICE" ) {
						return;
					}
					validpoll = true;

					if ( Lang13.Bool( select_query.item[5] ) ) {
						multiplechoiceoptions = String13.ParseNumber( select_query.item[5] );
					}
					break;
				}

				if ( !validpoll ) {
					Task13.User.WriteMsg( "<span class='danger'>Poll is not valid.</span>" );
					return;
				}
				select_query2 = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "poll_option" ) + " WHERE id = " + optionid + " AND pollid = " + pollid );
				select_query2.Execute();
				validoption = false;

				while (select_query2.NextRow()) {
					validoption = true;
					break;
				}

				if ( !validoption ) {
					Task13.User.WriteMsg( "<span class='danger'>Poll option is not valid.</span>" );
					return;
				}
				alreadyvoted = 0;
				voted_query = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "poll_vote" ) + " WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
				voted_query.Execute();

				while (voted_query.NextRow()) {
					alreadyvoted += 1;

					if ( !( multichoice == true ) ) {
						break;
					}
				}

				if ( !( multichoice == true ) && Lang13.Bool( alreadyvoted ) ) {
					Task13.User.WriteMsg( "<span class='danger'>You already voted in this poll.</span>" );
					return;
				}

				if ( multichoice == true && ( alreadyvoted ??0) >= ( multiplechoiceoptions ??0) ) {
					Task13.User.WriteMsg( "<span class='danger'>You already have more than " + multiplechoiceoptions + " logged votes on this poll. Enough is enough. Contact the database admin if this is an error.</span>" );
					return;
				}
				adminrank = "Player";

				if ( Task13.User != null && Task13.User.client != null && Task13.User.client.holder != null ) {
					adminrank = Task13.User.client.holder.rank;
				}
				insert_query = GlobalVars.dbcon.NewQuery( "INSERT INTO " + GlobalFuncs.format_table_name( "poll_vote" ) + " (id ,datetime ,pollid ,optionid ,ckey ,ip ,adminrank) VALUES (null, Now(), " + pollid + ", " + optionid + ", '" + Task13.User.ckey + "', '" + Task13.User.client.address + "', '" + adminrank + "')" );
				insert_query.Execute();
				Task13.User.WriteMsg( "<span class='notice'>Vote successful.</span>" );
				Interface13.Browse( Task13.User, null, "window=playerpoll" );
			}
			return;
		}

		// Function from file: poll.dm
		public void poll_player( dynamic pollid = null ) {
			pollid = pollid ?? -1;

			DBQuery select_query = null;
			string pollstarttime = null;
			string pollendtime = null;
			string pollquestion = null;
			string polltype = null;
			bool found = false;
			double? multiplechoiceoptions = null;
			DBQuery voted_query = null;
			bool voted = false;
			double? votedoptionid = null;
			ByTable options = null;
			DBQuery options_query = null;
			Polloption PO = null;
			string output = null;
			Polloption O = null;
			DBQuery voted_query2 = null;
			bool voted2 = false;
			string vote_text = null;
			string output2 = null;
			DBQuery voted_query3 = null;
			string output3 = null;
			bool voted3 = false;
			dynamic optiontext = null;
			dynamic rating = null;
			double? minid = null;
			double? maxid = null;
			DBQuery option_query = null;
			double? optionid = null;
			dynamic optiontext2 = null;
			double? minvalue = null;
			double? maxvalue = null;
			dynamic descmin = null;
			dynamic descmid = null;
			dynamic descmax = null;
			double? midvalue = null;
			double? j = null;
			DBQuery voted_query4 = null;
			ByTable votedfor = null;
			bool voted4 = false;
			ByTable options2 = null;
			double? maxoptionid = null;
			double? minoptionid = null;
			DBQuery options_query2 = null;
			Polloption PO2 = null;
			string output4 = null;
			Polloption O2 = null;

			
			if ( pollid == -1 ) {
				return;
			}
			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				select_query = GlobalVars.dbcon.NewQuery( "SELECT starttime, endtime, question, polltype, multiplechoiceoptions FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE id = " + pollid );
				select_query.Execute();
				pollstarttime = "";
				pollendtime = "";
				pollquestion = "";
				polltype = "";
				found = false;
				multiplechoiceoptions = 0;

				while (select_query.NextRow()) {
					pollstarttime = select_query.item[1];
					pollendtime = select_query.item[2];
					pollquestion = select_query.item[3];
					polltype = select_query.item[4];
					found = true;
					break;
				}

				if ( !found ) {
					Task13.User.WriteMsg( "<span class='danger'>Poll question details not found.</span>" );
					return;
				}

				switch ((string)( polltype )) {
					case "OPTION":
						voted_query = GlobalVars.dbcon.NewQuery( "SELECT optionid FROM " + GlobalFuncs.format_table_name( "poll_vote" ) + " WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
						voted_query.Execute();
						voted = false;
						votedoptionid = 0;

						while (voted_query.NextRow()) {
							votedoptionid = String13.ParseNumber( voted_query.item[1] );
							voted = true;
							break;
						}
						options = new ByTable();
						options_query = GlobalVars.dbcon.NewQuery( "SELECT id, text FROM " + GlobalFuncs.format_table_name( "poll_option" ) + " WHERE pollid = " + pollid );
						options_query.Execute();

						while (options_query.NextRow()) {
							PO = new Polloption();
							PO.optionid = String13.ParseNumber( options_query.item[1] );
							PO.optiontext = options_query.item[2];
							options.Add( PO );
						}
						output = "<div align='center'><B>Player poll</B>";
						output += "<hr>";
						output += "<b>Question: " + pollquestion + "</b><br>";
						output += "<font size='2'>Poll runs from <b>" + pollstarttime + "</b> until <b>" + pollendtime + "</b></font><p>";

						if ( !voted ) {
							output += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>" ).ToString();
							output += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
							output += "<input type='hidden' name='votepollid' value='" + pollid + "'>";
							output += "<input type='hidden' name='votetype' value=" + "OPTION" + ">";
						}
						output += "<table><tr><td>";

						foreach (dynamic _a in Lang13.Enumerate( options, typeof(Polloption) )) {
							O = _a;
							

							if ( Lang13.Bool( O.optionid ) && Lang13.Bool( O.optiontext ) ) {
								
								if ( voted ) {
									
									if ( votedoptionid == O.optionid ) {
										output += "<b>" + O.optiontext + "</b><br>";
									} else {
										output += "" + O.optiontext + "<br>";
									}
								} else {
									output += "<input type='radio' name='voteoptionid' value='" + O.optionid + "'>" + O.optiontext + "<br>";
								}
							}
						}
						output += "</td></tr></table>";

						if ( !voted ) {
							output += "<p><input type='submit' value='Vote'>";
							output += "</form>";
						}
						output += "</div>";
						Interface13.Browse( this, output, "window=playerpoll;size=500x250" );
						break;
					case "TEXT":
						voted_query2 = GlobalVars.dbcon.NewQuery( "SELECT replytext FROM " + GlobalFuncs.format_table_name( "poll_textreply" ) + " WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
						voted_query2.Execute();
						voted2 = false;
						vote_text = "";

						while (voted_query2.NextRow()) {
							vote_text = voted_query2.item[1];
							voted2 = true;
							break;
						}
						output2 = "<div align='center'><B>Player poll</B>";
						output2 += "<hr>";
						output2 += "<b>Question: " + pollquestion + "</b><br>";
						output2 += "<font size='2'>Feedback gathering runs from <b>" + pollstarttime + "</b> until <b>" + pollendtime + "</b></font><p>";

						if ( !voted2 ) {
							output2 += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>" ).ToString();
							output2 += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
							output2 += "<input type='hidden' name='votepollid' value='" + pollid + "'>";
							output2 += "<input type='hidden' name='votetype' value=" + "TEXT" + ">";
							output2 += "<font size='2'>Please provide feedback below. You can use any letters of the English alphabet, numbers and the symbols: . , ! ? : ; -</font><br>";
							output2 += "<textarea name='replytext' cols='50' rows='14'></textarea>";
							output2 += "<p><input type='submit' value='Submit'>";
							output2 += "</form>";
							output2 += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>" ).ToString();
							output2 += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
							output2 += "<input type='hidden' name='votepollid' value='" + pollid + "'>";
							output2 += "<input type='hidden' name='votetype' value=" + "TEXT" + ">";
							output2 += "<input type='hidden' name='replytext' value='ABSTAIN'>";
							output2 += "<input type='submit' value='Abstain'>";
							output2 += "</form>";
						} else {
							output2 += "" + vote_text;
						}
						Interface13.Browse( this, output2, "window=playerpoll;size=500x500" );
						break;
					case "NUMVAL":
						voted_query3 = GlobalVars.dbcon.NewQuery( "SELECT o.text, v.rating FROM " + GlobalFuncs.format_table_name( "poll_option" ) + " o, " + GlobalFuncs.format_table_name( "poll_vote" ) + " v WHERE o.pollid = " + pollid + " AND v.ckey = '" + Task13.User.ckey + "' AND o.id = v.optionid" );
						voted_query3.Execute();
						output3 = "<div align='center'><B>Player poll</B>";
						output3 += "<hr>";
						output3 += "<b>Question: " + pollquestion + "</b><br>";
						output3 += "<font size='2'>Poll runs from <b>" + pollstarttime + "</b> until <b>" + pollendtime + "</b></font><p>";
						voted3 = false;

						while (voted_query3.NextRow()) {
							voted3 = true;
							optiontext = voted_query3.item[1];
							rating = voted_query3.item[2];
							output3 += "<br><b>" + optiontext + " - " + rating + "</b>";
						}

						if ( !voted3 ) {
							output3 += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>" ).ToString();
							output3 += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
							output3 += "<input type='hidden' name='votepollid' value='" + pollid + "'>";
							output3 += "<input type='hidden' name='votetype' value=" + "NUMVAL" + ">";
							minid = 999999;
							maxid = 0;
							option_query = GlobalVars.dbcon.NewQuery( "SELECT id, text, minval, maxval, descmin, descmid, descmax FROM " + GlobalFuncs.format_table_name( "poll_option" ) + " WHERE pollid = " + pollid );
							option_query.Execute();

							while (option_query.NextRow()) {
								optionid = String13.ParseNumber( option_query.item[1] );
								optiontext2 = option_query.item[2];
								minvalue = String13.ParseNumber( option_query.item[3] );
								maxvalue = String13.ParseNumber( option_query.item[4] );
								descmin = option_query.item[5];
								descmid = option_query.item[6];
								descmax = option_query.item[7];

								if ( ( optionid ??0) < ( minid ??0) ) {
									minid = optionid;
								}

								if ( ( optionid ??0) > ( maxid ??0) ) {
									maxid = optionid;
								}
								midvalue = Num13.Floor( ( ( maxvalue ??0) + ( minvalue ??0) ) / 2 );

								if ( minvalue == null || maxvalue == null || minvalue == maxvalue ) {
									continue;
								}
								output3 += "<br>" + optiontext2 + ": <select name='o" + optionid + "'>";
								output3 += "<option value='abstain'>abstain</option>";
								j = null;
								j = minvalue;

								while (( j ??0) <= ( maxvalue ??0)) {
									
									if ( j == minvalue && Lang13.Bool( descmin ) ) {
										output3 += "<option value='" + j + "'>" + j + " (" + descmin + ")</option>";
									} else if ( j == midvalue && Lang13.Bool( descmid ) ) {
										output3 += "<option value='" + j + "'>" + j + " (" + descmid + ")</option>";
									} else if ( j == maxvalue && Lang13.Bool( descmax ) ) {
										output3 += "<option value='" + j + "'>" + j + " (" + descmax + ")</option>";
									} else {
										output3 += "<option value='" + j + "'>" + j + "</option>";
									}
									j++;
								}
								output3 += "</select>";
							}
							output3 += "<input type='hidden' name='minid' value='" + minid + "'>";
							output3 += "<input type='hidden' name='maxid' value='" + maxid + "'>";
							output3 += "<p><input type='submit' value='Submit'>";
							output3 += "</form>";
						}
						Interface13.Browse( this, output3, "window=playerpoll;size=500x500" );
						break;
					case "MULTICHOICE":
						voted_query4 = GlobalVars.dbcon.NewQuery( "SELECT optionid FROM " + GlobalFuncs.format_table_name( "poll_vote" ) + " WHERE pollid = " + pollid + " AND ckey = '" + Task13.User.ckey + "'" );
						voted_query4.Execute();
						votedfor = new ByTable();
						voted4 = false;

						while (voted_query4.NextRow()) {
							votedfor.Add( String13.ParseNumber( voted_query4.item[1] ) );
							voted4 = true;
						}
						options2 = new ByTable();
						maxoptionid = 0;
						minoptionid = 0;
						options_query2 = GlobalVars.dbcon.NewQuery( "SELECT id, text FROM " + GlobalFuncs.format_table_name( "poll_option" ) + " WHERE pollid = " + pollid );
						options_query2.Execute();

						while (options_query2.NextRow()) {
							PO2 = new Polloption();
							PO2.optionid = String13.ParseNumber( options_query2.item[1] );
							PO2.optiontext = options_query2.item[2];

							if ( ( PO2.optionid ??0) > ( maxoptionid ??0) ) {
								maxoptionid = PO2.optionid;
							}

							if ( ( PO2.optionid ??0) < ( minoptionid ??0) || !Lang13.Bool( minoptionid ) ) {
								minoptionid = PO2.optionid;
							}
							options2.Add( PO2 );
						}

						if ( Lang13.Bool( select_query.item[5] ) ) {
							multiplechoiceoptions = String13.ParseNumber( select_query.item[5] );
						}
						output4 = "<div align='center'><B>Player poll</B>";
						output4 += "<hr>";
						output4 += "<b>Question: " + pollquestion + "</b><br>You can select up to " + multiplechoiceoptions + " options. If you select more, the first " + multiplechoiceoptions + " will be saved.<br>";
						output4 += "<font size='2'>Poll runs from <b>" + pollstarttime + "</b> until <b>" + pollendtime + "</b></font><p>";

						if ( !voted4 ) {
							output4 += new Txt( "<form name='cardcomp' action='?src=" ).Ref( this ).str( "' method='get'>" ).ToString();
							output4 += new Txt( "<input type='hidden' name='src' value='" ).Ref( this ).str( "'>" ).ToString();
							output4 += "<input type='hidden' name='votepollid' value='" + pollid + "'>";
							output4 += "<input type='hidden' name='votetype' value=" + "MULTICHOICE" + ">";
							output4 += "<input type='hidden' name='maxoptionid' value='" + maxoptionid + "'>";
							output4 += "<input type='hidden' name='minoptionid' value='" + minoptionid + "'>";
						}
						output4 += "<table><tr><td>";

						foreach (dynamic _b in Lang13.Enumerate( options2, typeof(Polloption) )) {
							O2 = _b;
							

							if ( Lang13.Bool( O2.optionid ) && Lang13.Bool( O2.optiontext ) ) {
								
								if ( voted4 ) {
									
									if ( votedfor.Contains( O2.optionid ) ) {
										output4 += "<b>" + O2.optiontext + "</b><br>";
									} else {
										output4 += "" + O2.optiontext + "<br>";
									}
								} else {
									output4 += "<input type='checkbox' name='option_" + O2.optionid + "' value='" + O2.optionid + "'>" + O2.optiontext + "<br>";
								}
							}
						}
						output4 += "</td></tr></table>";

						if ( !voted4 ) {
							output4 += "<p><input type='submit' value='Vote'>";
							output4 += "</form>";
						}
						output4 += "</div>";
						Interface13.Browse( this, output4, "window=playerpoll;size=500x250" );
						break;
				}
				return;
			}
			return;
		}

		// Function from file: poll.dm
		public void handle_player_polling(  ) {
			bool isadmin = false;
			DBQuery select_query = null;
			string output = null;
			dynamic pollid = null;
			dynamic pollquestion = null;
			string color1 = null;
			string color2 = null;
			int i = 0;

			GlobalFuncs.establish_db_connection();

			if ( GlobalVars.dbcon.IsConnected() ) {
				isadmin = false;

				if ( this.client != null && this.client.holder != null ) {
					isadmin = true;
				}
				select_query = GlobalVars.dbcon.NewQuery( "SELECT id, question FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE " + ( isadmin ? "" : "adminonly = false AND" ) + " Now() BETWEEN starttime AND endtime" );
				select_query.Execute();
				output = "<div align='center'><B>Player polls</B>";
				output += "<hr>";
				output += "<table>";
				color1 = "#ececec";
				color2 = "#e2e2e2";
				i = 0;

				while (select_query.NextRow()) {
					pollid = select_query.item[1];
					pollquestion = select_query.item[2];
					output += new Txt( "<tr bgcolor='" ).item( ( i % 2 == 1 ? color1 : color2 ) ).str( "'><td><a href=\"byond://?src=" ).Ref( this ).str( ";pollid=" ).item( pollid ).str( "\"><b>" ).item( pollquestion ).str( "</b></a></td></tr>" ).ToString();
					i++;
				}
				output += "</table>";
				Interface13.Browse( this, output, "window=playerpolllist;size=500x300" );
			}
			return;
		}

		// Function from file: new_player.dm
		public void close_spawn_windows(  ) {
			Interface13.Browse( this, null, "window=latechoices" );
			Interface13.Browse( this, null, "window=playersetup" );
			Interface13.Browse( this, null, "window=preferences" );
			Interface13.Browse( this, null, "window=mob_occupation" );
			Interface13.Browse( this, null, "window=latechoices" );
			return;
		}

		// Function from file: new_player.dm
		public void ViewManifest(  ) {
			string dat = null;

			dat = "<html><body>";
			dat += "<h4>Crew Manifest</h4>";
			dat += GlobalVars.data_core.get_manifest( null, true );
			Interface13.Browse( this, dat, "window=manifest;size=387x420;can_close=1" );
			return;
		}

		// Function from file: new_player.dm
		public Mob_Living_Carbon_Human create_character(  ) {
			Mob_Living_Carbon_Human new_character = null;

			this.spawning = true;
			this.close_spawn_windows();
			new_character = new Mob_Living_Carbon_Human( this.loc );

			if ( GlobalVars.config.force_random_names || Lang13.Bool( GlobalFuncs.appearance_isbanned( this ) ) ) {
				this.client.prefs.random_character();
				this.client.prefs.real_name = ((Species)this.client.prefs.pref_species).random_name( this.gender, true );
			}
			this.client.prefs.copy_to( new_character );
			new_character.dna.update_dna_identity();

			if ( this.mind != null ) {
				this.mind.active = false;
				this.mind.transfer_to( new_character );
			}
			new_character.name = this.real_name;
			new_character.key = this.key;
			new_character.stopLobbySound();
			return new_character;
		}

		// Function from file: new_player.dm
		public void LateChoices(  ) {
			int mills = 0;
			double mins = 0;
			double hours = 0;
			string dat = null;
			int available_job_count = 0;
			Job job = null;
			int job_count = 0;
			Job job2 = null;
			string position_class = null;
			Job job3 = null;
			Browser popup = null;

			mills = Game13.time;
			mins = mills % 36000 / 600;
			hours = mills / 36000;
			dat = "<div class='notice'>Round Duration: " + Num13.Floor( hours ) + "h " + Num13.Floor( mins ) + "m</div>";

			switch ((int)( GlobalVars.SSshuttle.emergency.mode )) {
				case 5:
					dat += "<div class='notice red'>The station has been evacuated.</div><br>";
					break;
				case 2:
					
					if ( !GlobalVars.SSshuttle.canRecall() ) {
						dat += "<div class='notice red'>The station is currently undergoing evacuation procedures.</div><br>";
					}
					break;
			}
			available_job_count = 0;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
				job = _b;
				

				if ( job != null && this.IsJobAvailable( job.title ) ) {
					available_job_count++;
				}
			}
			dat += "<div class='clearBoth'>Choose from the following open positions:</div><br>";
			dat += "<div class='jobs'><div class='jobsColumn'>";
			job_count = 0;

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
				job2 = _c;
				

				if ( job2 != null && this.IsJobAvailable( job2.title ) ) {
					job_count++;

					if ( job_count > Num13.Floor( available_job_count / 2 ) ) {
						dat += "</div><div class='jobsColumn'>";
					}
					position_class = "otherPosition";

					if ( GlobalVars.command_positions.Contains( job2.title ) ) {
						position_class = "commandPosition";
					}
					dat += new Txt( "<a class='" ).item( position_class ).str( "' href='byond://?src=" ).Ref( this ).str( ";SelectedJob=" ).item( job2.title ).str( "'>" ).item( job2.title ).str( " (" ).item( job2.current_positions ).str( ")</a><br>" ).ToString();
				}
			}

			if ( !( job_count != 0 ) ) {
				
				foreach (dynamic _d in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
					job3 = _d;
					

					if ( job3.title != "Assistant" ) {
						continue;
					}
					dat += new Txt( "<a class='otherPosition' href='byond://?src=" ).Ref( this ).str( ";SelectedJob=" ).item( job3.title ).str( "'>" ).item( job3.title ).str( " (" ).item( job3.current_positions ).str( ")</a><br>" ).ToString();
					break;
				}
			}
			dat += "</div></div>";
			popup = new Browser( this, "latechoices", "Choose Profession", 440, 500 );
			popup.add_stylesheet( "playeroptions", "html/browser/playeroptions.css" );
			popup.set_content( dat );
			popup.open( false );
			return;
		}

		// Function from file: new_player.dm
		public void AnnounceArrival( Mob_Living_Carbon_Human character = null, string rank = null ) {
			dynamic announcer = null;

			
			if ( GlobalVars.ticker.current_state == 3 ) {
				
				if ( GlobalVars.announcement_systems.len != 0 ) {
					
					if ( character.mind != null ) {
						
						if ( character.mind.assigned_role != "Cyborg" && character.mind.assigned_role != character.mind.special_role ) {
							announcer = Rand13.PickFromTable( GlobalVars.announcement_systems );
							((Obj_Machinery_AnnouncementSystem)announcer).announce( "ARRIVAL", character.real_name, rank, new ByTable() );
						}
					}
				}
			}
			return;
		}

		// Function from file: new_player.dm
		public bool AttemptLateSpawn( string rank = null ) {
			Mob_Living_Carbon_Human character = null;
			dynamic D = null;
			dynamic T = null;
			bool clear = false;
			Obj O = null;

			
			if ( !this.IsJobAvailable( rank ) ) {
				this.WriteMsg( Interface13.Alert( "" + rank + " is not available. Please try another." ) );
				return false;
			}
			GlobalVars.ticker.queued_players.Remove( this );
			GlobalVars.ticker.queue_delay = 4;
			GlobalVars.SSjob.AssignRole( this, rank, true );
			character = this.create_character();
			GlobalVars.SSjob.EquipRank( character, rank, true );
			D = Rand13.PickFromTable( GlobalVars.latejoin );

			if ( !Lang13.Bool( D ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_area_turfs( typeof(Zone_Shuttle_Arrival) ) )) {
					T = _b;
					

					if ( !T.density ) {
						clear = true;

						foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj) )) {
							O = _a;
							

							if ( O.density ) {
								clear = false;
								break;
							}
						}

						if ( clear ) {
							D = T;
							continue;
						}
					}
				}
			}
			character.loc = D;

			if ( character.mind.assigned_role != "Cyborg" ) {
				GlobalVars.data_core.manifest_inject( character );
				GlobalVars.ticker.minds.Add( character.mind );
				this.AnnounceArrival( character, rank );
			} else {
				character.Robotize();
			}
			GlobalVars.joined_player_list.Add( character.ckey );

			if ( GlobalVars.config.allow_latejoin_antagonists ) {
				
				switch ((int)( GlobalVars.SSshuttle.emergency.mode )) {
					case 1:
					case 0:
						((GameMode)GlobalVars.ticker.mode).make_antag_chance( character );
						break;
					case 2:
						
						if ( GlobalVars.SSshuttle.emergency.timeLeft( 1 ) > Convert.ToDouble( Lang13.Initial( GlobalVars.SSshuttle, "emergencyCallTime" ) * 0.5 ) ) {
							((GameMode)GlobalVars.ticker.mode).make_antag_chance( character );
						}
						break;
				}
			}
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: new_player.dm
		public bool IsJobAvailable( string rank = null ) {
			Job job = null;
			Job J = null;

			job = GlobalVars.SSjob.GetJob( rank );

			if ( !( job != null ) ) {
				return false;
			}

			if ( ( job.current_positions ??0) >= Convert.ToDouble( job.total_positions ) && job.total_positions != -1 ) {
				
				if ( job.title == "Assistant" ) {
					
					if ( Lang13.Bool( Lang13.IsNumber( this.client.player_age ) ) && Convert.ToDouble( this.client.player_age ) <= 14 ) {
						return true;
					}

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.SSjob.occupations, typeof(Job) )) {
						J = _a;
						

						if ( J != null && ( J.current_positions ??0) < Convert.ToDouble( J.total_positions ) && J.title != job.title ) {
							return false;
						}
					}
				} else {
					return false;
				}
			}

			if ( GlobalFuncs.jobban_isbanned( this, rank ) ) {
				return false;
			}

			if ( !job.player_old_enough( this.client ) ) {
				return false;
			}

			if ( GlobalVars.config.enforce_human_authority && !((Species)this.client.prefs.pref_species).qualifies_for_rank( rank, this.client.prefs.features ) ) {
				return false;
			}
			return true;
		}

		// Function from file: new_player.dm
		public void new_player_panel(  ) {
			string output = null;
			bool isadmin = false;
			DBQuery query = null;
			bool newpoll = false;
			Browser popup = null;

			output = new Txt( "<center><p><a href='byond://?src=" ).Ref( this ).str( ";show_preferences=1'>Setup Character</A></p>" ).ToString();

			if ( !( GlobalVars.ticker != null ) || GlobalVars.ticker.current_state <= 1 ) {
				
				if ( Lang13.Bool( this.ready ) ) {
					output += new Txt( "<p>[ <b>Ready</b> | <a href='byond://?src=" ).Ref( this ).str( ";ready=0'>Not Ready</a> ]</p>" ).ToString();
				} else {
					output += new Txt( "<p>[ <a href='byond://?src=" ).Ref( this ).str( ";ready=1'>Ready</a> | <b>Not Ready</b> ]</p>" ).ToString();
				}
			} else {
				output += new Txt( "<p><a href='byond://?src=" ).Ref( this ).str( ";manifest=1'>View the Crew Manifest</A></p>" ).ToString();
				output += new Txt( "<p><a href='byond://?src=" ).Ref( this ).str( ";late_join=1'>Join Game!</A></p>" ).ToString();
			}
			output += new Txt( "<p><a href='byond://?src=" ).Ref( this ).str( ";observe=1'>Observe</A></p>" ).ToString();

			if ( !GlobalFuncs.IsGuestKey( this.key ) ) {
				GlobalFuncs.establish_db_connection();

				if ( GlobalVars.dbcon.IsConnected() ) {
					isadmin = false;

					if ( this.client != null && this.client.holder != null ) {
						isadmin = true;
					}
					query = GlobalVars.dbcon.NewQuery( "SELECT id FROM " + GlobalFuncs.format_table_name( "poll_question" ) + " WHERE " + ( isadmin ? "" : "adminonly = false AND" ) + " Now() BETWEEN starttime AND endtime AND id NOT IN (SELECT pollid FROM " + GlobalFuncs.format_table_name( "poll_vote" ) + " WHERE ckey = \"" + this.ckey + "\") AND id NOT IN (SELECT pollid FROM " + GlobalFuncs.format_table_name( "poll_textreply" ) + " WHERE ckey = \"" + this.ckey + "\")" );
					query.Execute();
					newpoll = false;

					while (query.NextRow()) {
						newpoll = true;
						break;
					}

					if ( newpoll ) {
						output += new Txt( "<p><b><a href='byond://?src=" ).Ref( this ).str( ";showpoll=1'>Show Player Polls</A> (NEW!)</b></p>" ).ToString();
					} else {
						output += new Txt( "<p><a href='byond://?src=" ).Ref( this ).str( ";showpoll=1'>Show Player Polls</A></p>" ).ToString();
					}
				}
			}
			output += "</center>";
			popup = new Browser( this, "playersetup", "<div align='center'>New Player Options</div>", 220, 265 );
			popup.set_window_options( "can_close=0" );
			popup.set_content( output );
			popup.open( false );
			return;
		}

		// Function from file: tgstation.dme
		public override bool Logout(  ) {
			this.ready = 0;
			base.Logout();

			if ( !this.spawning ) {
				this.key = null;
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: login.dm
		public override dynamic Login(  ) {
			
			if ( !( this.mind != null ) ) {
				this.mind = new Mind( this.key );
				this.mind.active = true;
				this.mind.current = this;
			}
			base.Login();

			if ( Lang13.Bool( GlobalVars.join_motd ) ) {
				this.WriteMsg( "<div class=\"motd\">" + GlobalVars.join_motd + "</div>" );
			}

			if ( Lang13.Bool( GlobalVars.admin_notice ) ) {
				this.WriteMsg( "<span class='notice'><b>Admin Notice:</b>\n 	 " + GlobalVars.admin_notice + "</span>" );
			}

			if ( Lang13.Bool( GlobalVars.config.soft_popcap ) && GlobalFuncs.living_player_count() >= ( GlobalVars.config.soft_popcap ??0) ) {
				this.WriteMsg( "<span class='notice'><b>Server Notice:</b>\n 	 " + GlobalVars.config.soft_popcap_message + "</span>" );
			}
			this.sight |= GlobalVars.SEE_TURFS;
			this.new_player_panel();
			Task13.Schedule( 40, (Task13.Closure)(() => {
				
				if ( this.client != null ) {
					this.client.playtitlemusic();
				}
				return;
			}));
			return null;
		}

		// Function from file: transform_procs.dm
		public override Mob_Living_Silicon_Ai AIize(  ) {
			this.spawning = true;
			return base.AIize();
		}

		// Function from file: mind.dm
		public override void sync_mind(  ) {
			return;
		}

		// Function from file: hud.dm
		public override void add_click_catcher(  ) {
			return;
		}

		// Function from file: hud.dm
		public override void reload_huds(  ) {
			return;
		}

		// Function from file: other_mobs.dm
		public override void ClickOn( Ent_Static A = null, string _params = null ) {
			return;
		}

	}

}