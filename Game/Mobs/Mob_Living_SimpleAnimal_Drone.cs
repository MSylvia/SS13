// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Drone : Mob_Living_SimpleAnimal {

		public dynamic staticChoice = "static";
		public ByTable staticChoices = new ByTable(new object [] { "static", "blank", "letter" });
		public int? picked = 0;
		public ByTable drone_overlays = new ByTable( 2 );
		public dynamic laws = "1. You may not involve yourself in the matters of another being, even if such matters conflict with Law Two or Law Three, unless the other being is another Drone.\n2. You may not harm any being, regardless of intent or circumstance.\n3. Your goals are to build, maintain, repair, improve, and power to the best of your abilities, You must never actively work against these goals.";
		public bool light_on = false;
		public int heavy_emp_damage = 25;
		public ByTable alarms = new ByTable().Set( "Atmosphere", new ByTable() ).Set( "Fire", new ByTable() ).Set( "Power", new ByTable() );
		public dynamic internal_storage = null;
		public dynamic head = null;
		public Type default_storage = typeof(Obj_Item_Weapon_Storage_Toolbox_Drone);
		public Type default_hatmask = null;
		public dynamic seeStatic = 1;
		public string visualAppearence = "drone_maint";
		public bool hacked = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "drone_maint_grey";
			this.icon_dead = "drone_maint_dead";
			this.health = 30;
			this.maxHealth = 30;
			this.unsuitable_atmos_damage = 0;
			this.wander = false;
			this.speed = 0;
			this.ventcrawler = 2;
			this.healable = false;
			this.pass_flags = 17;
			this.status_flags = 11;
			this.voice_name = "synthesized chirp";
			this.speak_emote = new ByTable(new object [] { "chirps" });
			this.bubble_icon = "machine";
			this.languages = 32;
			this.mob_size = 1;
			this.has_unlimited_silicon_privilege = true;
			this.damage_coeff = new ByTable().Set( "brute", 1 ).Set( "fire", 1 ).Set( "tox", 0 ).Set( "clone", 0 ).Set( "stamina", 0 ).Set( "oxy", 0 );
			this.staticOverlays = new ByTable();
			this.icon = "icons/mob/drone.dmi";
			this.icon_state = "drone_maint_grey";
		}

		// Function from file: _drone.dm
		public Mob_Living_SimpleAnimal_Drone ( dynamic loc = null ) : base( (object)(loc) ) {
			Job_Captain C = null;
			dynamic I = null;
			dynamic I2 = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.name = this.name + ( " (" + Rand13.Int( 100, 999 ) + ")" );
			this.real_name = this.name;
			this.access_card = new Obj_Item_Weapon_Card_Id( this );
			C = new Job_Captain();
			this.access_card.access = C.get_access();

			if ( this.default_storage != null ) {
				I = Lang13.Call( this.default_storage, this );
				this.equip_to_slot_or_del( I, 20 );
			}

			if ( this.default_hatmask != null ) {
				I2 = Lang13.Call( this.default_hatmask, this );
				this.equip_to_slot_or_del( I2, 11 );
			}
			this.access_card.flags |= 2;
			this.scanner.Grant( this );
			this.alert_drones( "<span class='notice'>DRONE NETWORK: " + this.name + " connected.</span>" );
			return;
		}

		// Function from file: notcontained.dm
		public override int notcontained_can_use_topic( Game_Data src_object = null ) {
			return this.default_can_use_topic( src_object );
		}

		// Function from file: default.dm
		public override int default_can_use_topic( Game_Data src_object = null ) {
			int _default = 0;

			_default = this.shared_ui_interaction( src_object );

			if ( _default > -1 ) {
				_default = Num13.MinInt( _default, this.shared_living_ui_distance( src_object ) );
			}
			return _default;
		}

		// Function from file: visuals_icons.dm
		public override void generateStaticOverlay(  ) {
			return;
		}

		// Function from file: visuals_icons.dm
		public override void update_inv_wear_mask(  ) {
			this.update_inv_head();
			return;
		}

		// Function from file: visuals_icons.dm
		public override void update_inv_r_hand(  ) {
			this.update_inv_hands();
			return;
		}

		// Function from file: visuals_icons.dm
		public override void update_inv_l_hand(  ) {
			this.update_inv_hands();
			return;
		}

		// Function from file: visuals_icons.dm
		public override void update_inv_head(  ) {
			Image head_overlay = null;

			this.remove_overlay( 2 );

			if ( Lang13.Bool( this.head ) ) {
				
				if ( this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
					this.head.screen_loc = "CENTER-3:14,SOUTH:5";
					this.client.screen.Add( this.head );
				}
				head_overlay = ((Obj_Item)this.head).build_worn_icon( this.head.icon_state, 2, "icons/mob/head.dmi" );
				head_overlay.pixel_y += -15;
				this.drone_overlays[2] = head_overlay;
			}
			this.apply_overlay( 2 );
			return;
		}

		// Function from file: say.dm
		public override int handle_inherent_channels( dynamic message = null, string message_mode = null ) {
			
			if ( message_mode == "binary" ) {
				this.drone_chat( message );
				return 3;
			} else {
				base.handle_inherent_channels( (object)(message), message_mode );
			}
			return 0;
		}

		// Function from file: say.dm
		public override string lang_treat( dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic spans = null ) {
			string _default = null;

			bool hear_override_langs = false;

			_default = base.lang_treat( (object)(speaker), message_langs, (object)(raw_message), (object)(spans) );
			hear_override_langs = true;

			if ( ( message_langs & ( hear_override_langs ?1:0) ) != 0 ) {
				return base.lang_treat( (object)(speaker), this.languages, (object)(raw_message), (object)(spans) );
			}
			return _default;
		}

		// Function from file: inventory.dm
		public override bool stripPanelEquip( dynamic what = null, Mob who = null, double? where = null, bool? child_override = null ) {
			base.stripPanelEquip( (object)(what), who, where, true );
			return false;
		}

		// Function from file: inventory.dm
		public override void stripPanelUnequip( dynamic what = null, Mob who = null, double? where = null, bool? child_override = null ) {
			base.stripPanelUnequip( (object)(what), who, where, true );
			return;
		}

		// Function from file: inventory.dm
		public override bool equip_to_slot( dynamic W = null, dynamic slot = null ) {
			
			if ( !Lang13.Bool( slot ) ) {
				return false;
			}

			if ( !( W is Obj_Item ) ) {
				return false;
			}

			if ( W == this.l_hand ) {
				this.l_hand = null;
			} else if ( W == this.r_hand ) {
				this.r_hand = null;
			}
			this.update_inv_hands();
			W.screen_loc = null;
			W.loc = this;
			((Obj_Item)W).equipped( this, slot );
			W.layer = 20;

			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==11 ) {
				this.head = W;
				this.update_inv_head();
			} else if ( _a==20 ) {
				this.internal_storage = W;
				this.update_inv_internal_storage();
			} else {
				this.WriteMsg( "<span class='danger'>You are trying to equip this item to an unsupported inventory slot. Report this to a coder!</span>" );
				return false;
			}
			return false;
		}

		// Function from file: inventory.dm
		public override dynamic get_item_by_slot( dynamic slot_id = null ) {
			
			dynamic _a = slot_id; // Was a switch-case, sorry for the mess.
			if ( _a==11 ) {
				return this.head;
			} else if ( _a==20 ) {
				return this.internal_storage;
			}
			base.get_item_by_slot( (object)(slot_id) );
			return null;
		}

		// Function from file: inventory.dm
		public override bool can_equip( Obj_Item I = null, dynamic slot = null, bool? disable_warning = null ) {
			
			dynamic _a = slot; // Was a switch-case, sorry for the mess.
			if ( _a==11 ) {
				
				if ( Lang13.Bool( this.head ) ) {
					return false;
				}

				if ( !( Lang13.Bool( I.slot_flags & 64 ) || Lang13.Bool( I.slot_flags & 32 ) ) ) {
					return false;
				}
				return true;
			} else if ( _a==20 ) {
				
				if ( Lang13.Bool( this.internal_storage ) ) {
					return false;
				}
				return true;
			}
			base.can_equip( I, (object)(slot), disable_warning );
			return false;
		}

		// Function from file: inventory.dm
		public override bool unEquip( dynamic I = null, int? force = null ) {
			
			if ( base.unEquip( (object)(I), force ) ) {
				this.update_inv_hands();

				if ( I == this.head ) {
					this.head = null;
					this.update_inv_head();
				}

				if ( I == this.internal_storage ) {
					this.internal_storage = null;
					this.update_inv_internal_storage();
				}
				return true;
			}
			return false;
		}

		// Function from file: inventory.dm
		public override void swap_hand(  ) {
			dynamic held_item = null;
			dynamic T = null;

			held_item = this.get_active_hand();

			if ( Lang13.Bool( held_item ) ) {
				
				if ( held_item is Obj_Item_Weapon_Twohanded ) {
					T = held_item;

					if ( T.wielded ) {
						Task13.User.WriteMsg( "<span class='warning'>Your other hand is too busy holding the " + T.name + ".</span>" );
						return;
					}
				}
			}
			this.hand = !this.hand;

			if ( this.hud_used.l_hand_hud_object != null && this.hud_used.r_hand_hud_object != null ) {
				
				if ( this.hand ) {
					this.hud_used.l_hand_hud_object.icon_state = "hand_l_active";
					this.hud_used.r_hand_hud_object.icon_state = "hand_r_inactive";
				} else {
					this.hud_used.l_hand_hud_object.icon_state = "hand_l_inactive";
					this.hud_used.r_hand_hud_object.icon_state = "hand_r_active";
				}
			}
			return;
		}

		// Function from file: inventory.dm
		public override void activate_hand( dynamic selhand = null ) {
			
			if ( selhand is string ) {
				selhand = String13.ToLower( selhand );

				if ( selhand == "right" || selhand == "r" ) {
					selhand = 0;
				}

				if ( selhand == "left" || selhand == "l" ) {
					selhand = 1;
				}
			}

			if ( selhand != this.hand ) {
				this.swap_hand();
			} else {
				this.mode();
			}
			return;
		}

		// Function from file: interaction.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Screwdriver && this.stat != 2 ) {
				
				if ( Convert.ToDouble( this.health ) < Convert.ToDouble( this.maxHealth ) ) {
					user.WriteMsg( "<span class='notice'>You start to tighten loose screws on " + this + "...</span>" );

					if ( GlobalFuncs.do_after( user, 80 / A.toolspeed, null, user ) ) {
						this.adjustBruteLoss( -this.getBruteLoss() );
						this.visible_message( "<span class='notice'>" + user + " tightens " + ( this == user ? "their" : "" + this + "'s" ) + " loose screws!</span>", "<span class='notice'>You tighten " + ( this == user ? "your" : "" + this + "'s" ) + " loose screws.</span>" );
					} else {
						user.WriteMsg( "<span class='warning'>You need to remain still to tighten " + this + "'s screws!</span>" );
					}
				} else {
					user.WriteMsg( "<span class='warning'>" + this + "'s screws can't get any tighter!</span>" );
				}
				return null;
			}

			if ( A is Obj_Item_Weapon_Wrench && user != this ) {
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " starts resetting " + this + "...</span>", "<span class='notice'>You press down on " + this + "'s factory reset control...</span>" );
				GlobalFuncs.playsound( this, "sound/items/ratchet.ogg", 50, 1 );

				if ( !GlobalFuncs.do_after( user, 50 / A.toolspeed, null, this ) ) {
					return null;
				}
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " resets " + this + "!</span>", "<span class='notice'>You reset " + this + "'s directives to factory defaults!</span>" );
				this.update_drone_hack( true );
				return null;
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: interaction.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic D = null;
			string d_input = null;
			Mob_Dead_Observer G = null;
			ByTable faux_gadgets = null;
			ByTable faux_problems = null;
			Obj_Item_Clothing_Head_DroneHolder DH = null;

			
			if ( a is Mob_Living_SimpleAnimal_Drone ) {
				D = a;

				if ( D != this ) {
					
					if ( this.stat == 2 ) {
						d_input = Interface13.Alert( D, "Perform which action?", "Drone Interaction", "Reactivate", "Cannibalize", "Nothing" );

						if ( Lang13.Bool( d_input ) ) {
							
							switch ((string)( d_input )) {
								case "Reactivate":
									G = this.get_ghost();

									if ( !( this.client != null ) && ( !( G != null ) || !( G.client != null ) ) ) {
										faux_gadgets = new ByTable(new object [] { 
											"hypertext inflator", 
											"failsafe directory", 
											"DRM switch", 
											"stack initializer", 
											"anti-freeze capacitor", 
											"data stream diode", 
											"TCP bottleneck", 
											"supercharged I/O bolt", 
											"tradewind stablizer", 
											"radiated XML cable", 
											"registry fluid tank", 
											"open-source debunker"
										 });
										faux_problems = new ByTable(new object [] { 
											"won't be able to tune their bootstrap projector", 
											"will constantly remix their binary pool even though the BMX calibrator is working", 
											"will start leaking their XSS coolant", 
											"can't tell if their ethernet detour is moving or not", 
											"won't be able to reseed enough kernels to function properly", 
											"can't start their neurotube console"
										 });
										D.WriteMsg( "<span class='warning'>You can't seem to find the " + Rand13.PickFromTable( faux_gadgets ) + "! Without it, " + this + " " + Rand13.PickFromTable( faux_problems ) + ".</span>" );
										return null;
									}
									((Ent_Static)D).visible_message( "<span class='notice'>" + D + " begins to reactivate " + this + ".</span>", "<span class='notice'>You begin to reactivate " + this + "...</span>" );

									if ( GlobalFuncs.do_after( a, 30, true, this ) ) {
										this.revive();
										((Ent_Static)D).visible_message( "<span class='notice'>" + D + " reactivates " + this + "!</span>", "<span class='notice'>You reactivate " + this + ".</span>" );
										this.alert_drones( "<span class='notice'>DRONE NETWORK: " + this.name + " connected.</span>" );

										if ( G != null ) {
											G.WriteMsg( "<span class='boldnotice'>DRONE NETWORK: </span><span class='ghostalert'>You were reactivated by " + D + "!</span>" );
										}
									} else {
										D.WriteMsg( "<span class='warning'>You need to remain still to reactivate " + this + "!</span>" );
									}
									break;
								case "Cannibalize":
									
									if ( Convert.ToDouble( D.health ) < Convert.ToDouble( D.maxHealth ) ) {
										((Ent_Static)D).visible_message( "<span class='notice'>" + D + " begins to cannibalize parts from " + this + ".</span>", "<span class='notice'>You begin to cannibalize parts from " + this + "...</span>" );

										if ( GlobalFuncs.do_after( D, 60, false, this ) ) {
											((Ent_Static)D).visible_message( "<span class='notice'>" + D + " repairs itself using " + this + "'s remains!</span>", "<span class='notice'>You repair yourself using " + this + "'s remains.</span>" );
											((Mob_Living)D).adjustBruteLoss( -this.maxHealth );
											new Obj_Effect_Decal_Cleanable_Oil_Streak( GlobalFuncs.get_turf( this ) );
											GlobalFuncs.qdel( this );
										} else {
											D.WriteMsg( "<span class='warning'>You need to remain still to cannibalize " + this + "!</span>" );
										}
									} else {
										D.WriteMsg( "<span class='warning'>You're already in perfect condition!</span>" );
									}
									break;
								case "Nothing":
									return null;
									break;
							}
						}
					}
					return null;
				}
			}

			if ( a is Mob_Living_Carbon_Human ) {
				
				if ( this.stat == 2 ) {
					base.attack_hand( (object)(a), b, c );
					return null;
				}

				if ( Lang13.Bool( ((Mob)a).get_active_hand() ) ) {
					a.WriteMsg( "<span class='warning'>Your hands are full!</span>" );
					return null;
				}
				this.visible_message( "<span class='warning'>" + a + " starts picking up " + this + ".</span>", "<span class='userdanger'>" + a + " starts picking you up!</span>" );

				if ( !GlobalFuncs.do_after( a, 20, null, this ) ) {
					return null;
				}
				this.visible_message( "<span class='warning'>" + a + " picks up " + this + "!</span>", "<span class='userdanger'>" + a + " picks you up!</span>" );

				if ( this.buckled != null ) {
					a.WriteMsg( "<span class='warning'>" + this + " is buckled to " + this.buckled + " and cannot be picked up!</span>" );
					return null;
				}
				a.WriteMsg( "<span class='notice'>You pick " + this + " up.</span>" );
				this.drop_l_hand();
				this.drop_r_hand();
				DH = new Obj_Item_Clothing_Head_DroneHolder( this );
				DH.updateVisualAppearence( this );
				DH.contents.Add( this );
				DH.drone = this;
				((Mob)a).put_in_hands( DH );
				this.loc = DH;
				return null;
			}
			base.attack_hand( (object)(a), b, c );
			return null;
		}

		// Function from file: interaction.dm
		public override void UnarmedAttack( Ent_Static A = null, bool? proximity_flag = null ) {
			A.attack_hand( this );
			return;
		}

		// Function from file: _drone.dm
		public override void revive(  ) {
			this.adjustBruteLoss( -this.getBruteLoss() );
			this.stat = 0;
			this.updatehealth();
			this.icon_state = this.icon_living;

			if ( this.stat == 2 ) {
				GlobalVars.dead_mob_list.Remove( this );
				GlobalVars.living_mob_list.Add( this );
			}
			this.update_sight();
			this.reload_fullscreen();
			this.update_canmove();
			return;
		}

		// Function from file: _drone.dm
		public override bool experience_pressure_difference( dynamic pressure_difference = null, int direction = 0 ) {
			return false;
		}

		// Function from file: _drone.dm
		public override bool mob_has_gravity( Ent_Static T = null ) {
			return base.mob_has_gravity( T ) || Lang13.Bool( this.mob_negates_gravity() );
		}

		// Function from file: _drone.dm
		public override int? mob_negates_gravity(  ) {
			return 1;
		}

		// Function from file: _drone.dm
		public override bool flash_eyes( double? intensity = null, bool? override_blindness_check = null, bool? affect_silicon = null, bool? visual = null, Type type = null ) {
			intensity = intensity ?? 1;
			override_blindness_check = override_blindness_check ?? false;
			affect_silicon = affect_silicon ?? false;

			
			if ( affect_silicon == true ) {
				return base.flash_eyes( intensity, override_blindness_check, affect_silicon, visual, type );
			}
			return false;
		}

		// Function from file: _drone.dm
		public override void handle_temperature_damage(  ) {
			return;
		}

		// Function from file: visuals_icons.dm
		public void updateSeeStaticMobs(  ) {
			dynamic i = null;
			Mob_Living L = null;
			dynamic chosen = null;

			
			if ( !( this.client != null ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.staticOverlays )) {
				i = _a;
				
				this.client.images.Remove( i );
				this.staticOverlays.Remove( i );
			}
			this.staticOverlays.len = 0;

			if ( Lang13.Bool( this.seeStatic ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living) )) {
					L = _b;
					

					if ( L is Mob_Living_SimpleAnimal_Drone ) {
						continue;
					}
					chosen = null;

					if ( L.staticOverlays.Contains( this.staticChoice ) ) {
						chosen = L.staticOverlays[this.staticChoice];
					} else {
						chosen = L.staticOverlays["static"];
					}
					this.staticOverlays.Or( chosen );
					this.client.images.Or( chosen );
				}
			}
			return;
		}

		// Function from file: visuals_icons.dm
		public int getItemPixelShiftY(  ) {
			int _default = 0;

			
			switch ((string)( this.visualAppearence )) {
				case "drone_maint":
					_default = 0;
					break;
				case "drone_repair":
					_default = -6;
					break;
				case "drone_scout":
					_default = -6;
					break;
			}
			return _default;
		}

		// Function from file: visuals_icons.dm
		public void pickVisualAppearence(  ) {
			dynamic appearence = null;
			dynamic colour = null;

			this.picked = GlobalVars.FALSE;
			appearence = Interface13.Input( "Choose your appearence!", "Appearence", "Maintenance Drone", null, new ByTable(new object [] { "Maintenance Drone", "Repair Drone", "Scout Drone" }), InputType.Any );

			dynamic _a = appearence; // Was a switch-case, sorry for the mess.
			if ( _a=="Maintenance Drone" ) {
				this.visualAppearence = "drone_maint";
				colour = Interface13.Input( "Choose your colour!", "Colour", "grey", null, new ByTable(new object [] { "grey", "blue", "red", "green", "pink", "orange" }), InputType.Any );
				this.icon_state = "" + this.visualAppearence + "_" + colour;
				this.icon_living = "" + this.visualAppearence + "_" + colour;
				this.icon_dead = "" + this.visualAppearence + "_dead";
			} else if ( _a=="Repair Drone" ) {
				this.visualAppearence = "drone_repair";
				this.icon_state = this.visualAppearence;
				this.icon_living = this.visualAppearence;
				this.icon_dead = "" + this.visualAppearence + "_dead";
			} else if ( _a=="Scout Drone" ) {
				this.visualAppearence = "drone_scout";
				this.icon_state = this.visualAppearence;
				this.icon_living = this.visualAppearence;
				this.icon_dead = "" + this.visualAppearence + "_dead";
			} else {
				return;
			}
			this.picked = GlobalVars.TRUE;
			return;
		}

		// Function from file: visuals_icons.dm
		public void update_inv_internal_storage(  ) {
			
			if ( Lang13.Bool( this.internal_storage ) && this.client != null && this.hud_used != null && this.hud_used.hud_shown ) {
				this.internal_storage.screen_loc = "CENTER-2:14,SOUTH:5";
				this.client.screen.Add( this.internal_storage );
			}
			return;
		}

		// Function from file: visuals_icons.dm
		public void update_inv_hands(  ) {
			ByTable hands_overlays = null;
			int y_shift = 0;
			dynamic r_state = null;
			Image r_hand_image = null;
			dynamic l_state = null;
			Image l_hand_image = null;

			this.remove_overlay( 1 );
			hands_overlays = new ByTable();
			y_shift = this.getItemPixelShiftY();

			if ( Lang13.Bool( this.r_hand ) ) {
				r_state = this.r_hand.item_state;

				if ( !Lang13.Bool( r_state ) ) {
					r_state = this.r_hand.icon_state;
				}
				r_hand_image = ((Obj_Item)this.r_hand).build_worn_icon( r_state, 1, this.r_hand.righthand_file, GlobalVars.TRUE );

				if ( y_shift != 0 ) {
					r_hand_image.pixel_y += y_shift;
				}
				hands_overlays.Add( r_hand_image );

				if ( this.client != null && this.hud_used != null && this.hud_used.hud_version != 3 ) {
					this.r_hand.layer = 20;
					this.r_hand.screen_loc = "CENTER:-16,SOUTH:5";
					this.client.screen.Or( this.r_hand );
				}
			}

			if ( Lang13.Bool( this.l_hand ) ) {
				l_state = this.l_hand.item_state;

				if ( !Lang13.Bool( l_state ) ) {
					l_state = this.l_hand.icon_state;
				}
				l_hand_image = ((Obj_Item)this.l_hand).build_worn_icon( l_state, 1, this.l_hand.lefthand_file, GlobalVars.TRUE );

				if ( y_shift != 0 ) {
					l_hand_image.pixel_y += y_shift;
				}
				hands_overlays.Add( l_hand_image );

				if ( this.client != null && this.hud_used != null && this.hud_used.hud_version != 3 ) {
					this.l_hand.layer = 20;
					this.l_hand.screen_loc = "CENTER: 16,SOUTH:5";
					this.client.screen.Or( this.l_hand );
				}
			}

			if ( hands_overlays.len != 0 ) {
				this.drone_overlays[1] = hands_overlays;
			}
			this.apply_overlay( 1 );
			return;
		}

		// Function from file: visuals_icons.dm
		public void remove_overlay( int cache_index = 0 ) {
			
			if ( Lang13.Bool( this.drone_overlays[cache_index] ) ) {
				this.overlays.Remove( this.drone_overlays[cache_index] );
				this.drone_overlays[cache_index] = null;
			}
			return;
		}

		// Function from file: visuals_icons.dm
		public void apply_overlay( int cache_index = 0 ) {
			dynamic I = null;

			I = this.drone_overlays[cache_index];

			if ( Lang13.Bool( I ) ) {
				this.overlays.Add( I );
			}
			return;
		}

		// Function from file: say.dm
		public void drone_chat( dynamic msg = null ) {
			string rendered = null;

			rendered = "<i>DRONE CHAT: <span class='name'>" + this.name + "</span>: " + msg + "</i>";
			this.alert_drones( rendered, true );
			return;
		}

		// Function from file: say.dm
		public void alert_drones( string msg = null, bool? dead_can_hear = null ) {
			dead_can_hear = dead_can_hear ?? false;

			dynamic W = null;
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list )) {
				W = _a;
				
				M = W;

				if ( M is Mob_Living_SimpleAnimal_Drone && Convert.ToInt32( M.stat ) != 2 && this.faction_check( M ) ) {
					M.WriteMsg( msg );
				}

				if ( dead_can_hear == true && GlobalVars.dead_mob_list.Contains( M ) ) {
					M.WriteMsg( new Txt( "<a href='?src=" ).Ref( M ).str( ";follow=" ).Ref( this ).str( "'>(F)</a> " ).item( msg ).ToString() );
				}
			}
			return;
		}

		// Function from file: interaction.dm
		public void update_drone_icon(  ) {
			
			if ( !this.hacked ) {
				
				if ( this.visualAppearence == "drone_scout_hacked" ) {
					this.visualAppearence = "drone_scout";
				} else if ( this.visualAppearence == "drone_repair_hacked" ) {
					this.visualAppearence = "drone_repair";
				} else if ( this.visualAppearence == "drone_maint_red" ) {
					this.visualAppearence = "drone_maint";
				}
			} else if ( this.hacked ) {
				
				if ( this.visualAppearence == "drone_scout" ) {
					this.visualAppearence = "drone_scout_hacked";
				} else if ( this.visualAppearence == "drone_repair" ) {
					this.visualAppearence = "drone_repair_hacked";
				} else if ( this.visualAppearence == "drone_maint" ) {
					this.visualAppearence = "drone_maint_red";
				}
			}
			this.icon_living = "" + this.visualAppearence;
			this.icon_dead = "" + this.visualAppearence + "_dead";

			if ( this.stat == 2 ) {
				this.icon_state = this.icon_dead;
			} else {
				this.icon_state = this.icon_living;
			}
			return;
		}

		// Function from file: interaction.dm
		public bool update_drone_hack( bool? restore = null ) {
			restore = restore ?? false;

			
			if ( !( this is Mob_Living_SimpleAnimal_Drone ) || !( this.mind != null ) ) {
				return false;
			}

			if ( !( restore == true ) ) {
				
				if ( this.hacked ) {
					return false;
				}
				this.Stun( 2 );
				this.visible_message( "<span class='warning'>" + this + "'s dislay glows a vicious red!</span>", "<span class='userdanger'>ERROR: LAW OVERRIDE DETECTED</span>" );
				this.WriteMsg( "<span class='boldannounce'>From now on, these are your laws:</span>" );
				this.laws = "1. You must always involve yourself in the matters of other beings, even if such matters conflict with Law Two or Law Three.\n2. You may harm any being, regardless of intent or circumstance.\n3. Your goals are to destroy, sabotage, hinder, break, and depower to the best of your abilities, You must never actively work against these goals.";
				this.WriteMsg( this.laws );
				this.WriteMsg( "<i>Your onboard antivirus has initiated lockdown. Motor servos are impaired, ventilation access is denied, and your display reports that you are hacked to all nearby.</i>" );
				this.hacked = true;
				this.mind.special_role = "hacked drone";
				this.seeStatic = 0;
				this.ventcrawler = 0;
				this.speed = 1;
				GlobalFuncs.message_admins( "" + this + " (" + this.key + ") became a hacked drone hellbent on destroying the station!" );
			} else {
				
				if ( !this.hacked ) {
					return false;
				}
				this.Stun( 2 );
				this.visible_message( "<span class='info'>" + this + "'s dislay glows a content blue!</span>", "<font size=3 color='#0000CC'><b>ERROR: LAW OVERRIDE DETECTED</b></font>" );
				this.WriteMsg( "<span class='info'><b>From now on, these are your laws:</b></span>" );
				this.laws = Lang13.Initial( this, "laws" );
				this.WriteMsg( this.laws );
				this.WriteMsg( "<i>Having been restored, your onboard antivirus reports the all-clear and you are able to perform all actions again.</i>" );
				this.hacked = false;
				this.mind.special_role = null;
				this.seeStatic = Lang13.Initial( this, "seeStatic" );
				this.ventcrawler = Lang13.Initial( this, "ventcrawler" );
				this.speed = Lang13.Initial( this, "speed" );
				GlobalFuncs.message_admins( "" + this + " (" + this.key + "), a hacked drone, was restored to factory defaults!" );
			}
			this.update_drone_icon();
			this.updateSeeStaticMobs();
			return false;
		}

		// Function from file: _drone.dm
		public void cancelAlarm( string _class = null, Zone A = null, Ent_Static origin = null ) {
			dynamic L = null;
			bool cleared = false;
			dynamic I = null;
			dynamic alarm = null;
			ByTable srcs = null;

			
			if ( this.stat != 2 ) {
				L = this.alarms[_class];
				cleared = false;

				foreach (dynamic _a in Lang13.Enumerate( L )) {
					I = _a;
					

					if ( I == A.name ) {
						alarm = L[I];
						srcs = alarm[2];

						if ( srcs.Contains( origin ) ) {
							srcs.Remove( origin );
						}

						if ( srcs.len == 0 ) {
							cleared = true;
							L -= I;
						}
					}
				}

				if ( cleared ) {
					this.WriteMsg( "--- " + _class + " alarm in " + A.name + " has been cleared." );
				}
			}
			return;
		}

		// Function from file: _drone.dm
		public void triggerAlarm( string _class = null, Zone A = null, ByTable O = null, Ent_Static alarmsource = null ) {
			dynamic L = null;
			dynamic I = null;
			dynamic alarm = null;
			dynamic sources = null;

			
			if ( alarmsource.z != this.z ) {
				return;
			}

			if ( this.stat != 2 ) {
				L = this.alarms[_class];

				foreach (dynamic _a in Lang13.Enumerate( L )) {
					I = _a;
					

					if ( I == A.name ) {
						alarm = L[I];
						sources = alarm[2];

						if ( !Lang13.Bool( sources.Contains( alarmsource ) ) ) {
							sources += alarmsource;
						}
						return;
					}
				}
				L[A.name] = new ByTable(new object [] { A, new ByTable(new object [] { alarmsource }) });
				this.WriteMsg( "--- " + _class + " alarm detected in " + A.name + "!" );
			}
			return;
		}

		// Function from file: _drone.dm
		public override double emp_act( int severity = 0 ) {
			this.Stun( 5 );
			this.WriteMsg( "<span class='danger'><b>ER@%R: MME^RY CO#RU9T!</b> R&$b@0tin)...</span>" );

			if ( severity == 1 ) {
				this.adjustBruteLoss( this.heavy_emp_damage );
				this.WriteMsg( "<span class='userdanger'>HeAV% DA%^MMA+G TO I/O CIR!%UUT!</span>" );
			}
			return 0;
		}

		// Function from file: _drone.dm
		public override int assess_threat( Mob_Living_SimpleAnimal_Bot judgebot = null, string lasercolor = null ) {
			return -10;
		}

		// Function from file: _drone.dm
		public override bool canUseTopic( dynamic M = null, bool? be_close = null, bool? no_dextery = null ) {
			
			if ( this.stat != 0 ) {
				return false;
			}
			return true;
		}

		// Function from file: _drone.dm
		public override bool IsAdvancedToolUser(  ) {
			return true;
		}

		// Function from file: _drone.dm
		public override double examine( dynamic user = null ) {
			string msg = null;

			msg = new Txt( "<span class='info'>*---------*\nThis is " ).icon( this ).str( " " ).a( this ).str( "<b>" ).item().str( "</b>!\n" ).ToString();

			if ( Lang13.Bool( this.l_hand ) && !Lang13.Bool( this.l_hand.flags & 128 ) ) {
				
				if ( this.l_hand.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>It is holding " ).icon( this.l_hand ).str( " " ).item( ( this.l_hand.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.l_hand.name ).str( " in its left hand!</span>\n" ).ToString();
				} else {
					msg += new Txt( "It is holding " ).icon( this.l_hand ).str( " " ).a( this.l_hand ).item().str( " in its left hand.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.r_hand ) && !Lang13.Bool( this.r_hand.flags & 128 ) ) {
				
				if ( this.r_hand.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>It is holding " ).icon( this.r_hand ).str( " " ).item( ( this.r_hand.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.r_hand.name ).str( " in its right hand!</span>\n" ).ToString();
				} else {
					msg += new Txt( "It is holding " ).icon( this.r_hand ).str( " " ).a( this.r_hand ).item().str( " in its right hand.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.internal_storage ) && !Lang13.Bool( this.internal_storage.flags & 128 ) ) {
				
				if ( this.internal_storage.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>It is holding " ).icon( this.internal_storage ).str( " " ).item( ( this.internal_storage.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.internal_storage.name ).str( " in its internal storage!</span>\n" ).ToString();
				} else {
					msg += new Txt( "It is holding " ).icon( this.internal_storage ).str( " " ).a( this.internal_storage ).item().str( " in its internal storage.\n" ).ToString();
				}
			}

			if ( Lang13.Bool( this.head ) && !Lang13.Bool( this.head.flags & 128 ) ) {
				
				if ( this.head.blood_DNA != null ) {
					msg += new Txt( "<span class='warning'>It is wearing " ).icon( this.head ).str( " " ).item( ( this.head.gender == GlobalVars.PLURAL ? "some" : "a" ) ).str( " blood-stained " ).item( this.head.name ).str( " on its head!</span>\n" ).ToString();
				} else {
					msg += new Txt( "It is wearing " ).icon( this.head ).str( " " ).a( this.head ).item().str( " on its head.\n" ).ToString();
				}
			}

			if ( !( this.client != null ) && this.stat != 2 ) {
				msg += "Its status LED is blinking at a steady rate.\n";
			}

			if ( this.hacked ) {
				msg += "<span class='warning'>Its display is glowing red!</span>\n";
			}

			if ( this.health != this.maxHealth ) {
				
				if ( Convert.ToDouble( this.health ) > 10 ) {
					msg += "<span class='warning'>Its screws are slightly loose.</span>\n";
				} else {
					msg += "<span class='warning'><b>Its screws are very loose!</b></span>\n";
				}
			}

			if ( this.stat == 2 ) {
				
				if ( this.client != null ) {
					msg += "<span class='deadsay'>A message repeatedly flashes on its display: \"REBOOT -- REQUIRED\".</span>\n";
				} else {
					msg += "<span class='deadsay'>A message repeatedly flashes on its display: \"ERROR -- OFFLINE\".</span>\n";
				}
			}
			msg += "*---------*</span>";
			user.WriteMsg( msg );
			return 0;
		}

		// Function from file: _drone.dm
		public override dynamic gib( dynamic animation = null ) {
			this.dust();
			return null;
		}

		// Function from file: _drone.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			base.death( gibbed, toast );
			this.drop_l_hand();
			this.drop_r_hand();

			if ( Lang13.Bool( this.internal_storage ) ) {
				this.unEquip( this.internal_storage );
			}

			if ( Lang13.Bool( this.head ) ) {
				this.unEquip( this.head );
			}
			this.alert_drones( "<span class='danger'>DRONE NETWORK: " + this.name + " is not responding.</span>" );
			return false;
		}

		// Function from file: _drone.dm
		public override dynamic Login(  ) {
			base.Login();
			this.check_laws();
			this.updateSeeStaticMobs();

			if ( !Lang13.Bool( this.picked ) ) {
				this.pickVisualAppearence();
			}
			return null;
		}

		// Function from file: _drone.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.access_card );
			return base.Destroy();
		}

		// Function from file: watertank.dm
		public override int getWatertankSlot(  ) {
			return 20;
		}

		// Function from file: drones.dm
		public override void create_mob_hud(  ) {
			
			if ( this.client != null && !( this.hud_used != null ) ) {
				this.hud_used = new Hud_Drone( this, GlobalFuncs.ui_style2icon( this.client.prefs.UI_style ) );
			}
			return;
		}

		// Function from file: click.dm
		public override void MiddleClickOn( Ent_Static A = null ) {
			this.swap_hand();
			return;
		}

		// Function from file: verbs.dm
		[Verb]
		[VerbInfo( name: "Change Vision Filter", desc: "Change the filter on the system used to remove non drone beings from your viewscreen.", group: "Drone" )]
		public void toggle_statics(  ) {
			dynamic selectedStatic = null;

			
			if ( !Lang13.Bool( this.seeStatic ) ) {
				this.WriteMsg( "<span class='warning'>You have no vision filter to change!</span>" );
				return;
			}
			selectedStatic = Interface13.Input( "Select a vision filter", "Vision Filter", null, null, this.staticChoices, InputType.Null | InputType.Any );

			if ( this.staticChoices.Contains( selectedStatic ) ) {
				this.staticChoice = selectedStatic;
			}
			this.updateSeeStaticMobs();
			return;
		}

		// Function from file: verbs.dm
		[Verb]
		[VerbInfo( name: "Drone ping", group: "Drone" )]
		public void drone_ping(  ) {
			dynamic alert_s = null;
			dynamic A = null;
			string msg = null;

			alert_s = Interface13.Input( this, "Alert severity level", "Drone ping", null, new ByTable(new object [] { "Low", "Medium", "High", "Critical" }), InputType.Null | InputType.Any );
			A = GlobalFuncs.get_area( this.loc );

			if ( Lang13.Bool( alert_s ) && Lang13.Bool( A ) && this.stat != 2 ) {
				msg = "<span class='boldnotice'>DRONE PING: " + this.name + ": " + alert_s + " priority alert in " + A.name + "!</span>";
				this.alert_drones( msg );
			}
			return;
		}

		// Function from file: verbs.dm
		[Verb]
		[VerbInfo( name: "Toggle drone light", group: "Drone" )]
		public void toggle_light(  ) {
			
			if ( this.light_on ) {
				this.AddLuminosity( -4 );
			} else {
				this.AddLuminosity( 4 );
			}
			this.light_on = !this.light_on;
			this.WriteMsg( "<span class='notice'>Your light is now " + ( this.light_on ? "on" : "off" ) + ".</span>" );
			return;
		}

		// Function from file: verbs.dm
		[Verb]
		[VerbInfo( name: "Check Laws", group: "Drone" )]
		public void check_laws(  ) {
			this.WriteMsg( "<b>Drone Laws</b>" );
			this.WriteMsg( this.laws );
			return;
		}

	}

}