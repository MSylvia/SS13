// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider_Nurse : Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider {

		public dynamic cocoon_target = null;
		public int fed = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "nurse";
			this.icon_dead = "nurse_dead";
			this.butcher_results = new ByTable()
				.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat_Slab_Spider), 2 )
				.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Spiderleg), 8 )
				.Set( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Spidereggs), 4 )
			;
			this.maxHealth = 40;
			this.health = 40;
			this.melee_damage_lower = 5;
			this.melee_damage_upper = 10;
			this.poison_per_bite = 10;
			this.poison_type = "morphine";
			this.icon_state = "nurse";
		}

		public Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider_Nurse ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: giant_spider.dm
		public override bool handle_automated_action(  ) {
			ByTable can_see = null;
			Mob_Living C = null;
			dynamic W = null;
			Obj O = null;

			
			if ( base.handle_automated_action() ) {
				can_see = Map13.FetchInView( 10, this );

				if ( !( this.busy != 0 ) && Rand13.PercentChance( 30 ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( can_see, typeof(Mob_Living) )) {
						C = _a;
						

						if ( C.stat != 0 && !( C is Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider ) ) {
							this.cocoon_target = C;
							this.busy = 3;
							this.Goto( C, this.move_to_delay );
							this.GiveUp( C );
							return false;
						}
					}
					W = Lang13.FindIn( typeof(Obj_Effect_Spider_Stickyweb), GlobalFuncs.get_turf( this ) );

					if ( !Lang13.Bool( W ) ) {
						this.Web();
					} else if ( this.fed != 0 ) {
						this.LayEggs();
					} else {
						
						foreach (dynamic _b in Lang13.Enumerate( can_see, typeof(Obj) )) {
							O = _b;
							

							if ( Lang13.Bool( O.anchored ) ) {
								continue;
							}

							if ( O is Obj_Item || O is Obj_Structure || O is Obj_Machinery ) {
								this.cocoon_target = O;
								this.busy = 3;
								this.stop_automated_movement = true;
								this.Goto( O, this.move_to_delay );
								this.GiveUp( O );
							}
						}
					}
				} else if ( this.busy == 3 && Lang13.Bool( this.cocoon_target ) ) {
					
					if ( Map13.GetDistance( this, this.cocoon_target ) <= 1 ) {
						this.Wrap();
					}
				}
			} else {
				this.busy = 0;
				this.stop_automated_movement = false;
			}
			return false;
		}

		// Function from file: giant_spider.dm
		public void GiveUp( Obj C = null ) {
			Task13.Schedule( 100, (Task13.Closure)(() => {
				
				if ( this.busy == 3 ) {
					
					if ( this.cocoon_target == C && Map13.GetDistance( this, this.cocoon_target ) > 1 ) {
						this.cocoon_target = null;
					}
					this.busy = 0;
					this.stop_automated_movement = false;
				}
				return;
			}));
			return;
		}

		// Function from file: giant_spider.dm
		[Verb]
		[VerbInfo( name: "Lay Eggs", desc: "Lay a clutch of eggs, but you must wrap a creature for feeding first.", group: "Spider" )]
		public void LayEggs(  ) {
			dynamic E = null;
			Obj_Effect_Spider_Eggcluster C = null;

			E = Lang13.FindIn( typeof(Obj_Effect_Spider_Eggcluster), GlobalFuncs.get_turf( this ) );

			if ( this.stat == 2 ) {
				return;
			}

			if ( Lang13.Bool( E ) ) {
				this.WriteMsg( "<span class='warning'>There is already a cluster of eggs here!</span>" );
			} else if ( !( this.fed != 0 ) ) {
				this.WriteMsg( "<span class='warning'>You are too hungry to do this!</span>" );
			} else if ( this.busy != 2 ) {
				this.busy = 2;
				this.visible_message( new Txt( "<span class='notice'>" ).the( this ).item().str( " begins to lay a cluster of eggs.</span>" ).ToString() );
				this.stop_automated_movement = true;

				if ( GlobalFuncs.do_after( this, 50, null, this.loc ) ) {
					
					if ( this.busy == 2 ) {
						E = Lang13.FindIn( typeof(Obj_Effect_Spider_Eggcluster), GlobalFuncs.get_turf( this ) );

						if ( !Lang13.Bool( E ) ) {
							C = new Obj_Effect_Spider_Eggcluster( this.loc );

							if ( Lang13.Bool( this.ckey ) ) {
								C.player_spiders = true;
							}
							C.poison_type = this.poison_type;
							C.poison_per_bite = this.poison_per_bite;
							C.faction = this.faction.Copy();
							this.fed--;
						}
					}
				}
				this.busy = 0;
				this.stop_automated_movement = false;
			}
			return;
		}

		// Function from file: giant_spider.dm
		[Verb]
		[VerbInfo( desc: "Wrap up prey to feast upon and objects for safe keeping.", group: "Spider" )]
		public void Wrap(  ) {
			ByTable choices = null;
			Mob_Living L = null;
			Obj O = null;
			Obj_Effect_Spider_Cocoon C = null;
			bool large_cocoon = false;
			Obj_Item I = null;
			Obj_Structure S = null;
			Obj_Machinery M = null;
			Mob_Living L2 = null;

			
			if ( this.stat == 2 ) {
				return;
			}

			if ( !Lang13.Bool( this.cocoon_target ) ) {
				choices = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this, 1 ), typeof(Mob_Living) )) {
					L = _a;
					

					if ( L == this ) {
						continue;
					}

					if ( this.Adjacent( L ) ) {
						choices.Add( L );
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Obj) )) {
					O = _b;
					

					if ( this.Adjacent( O ) ) {
						choices.Add( O );
					}
				}
				this.cocoon_target = Interface13.Input( this, "What do you wish to cocoon?", null, null, null | choices, InputType.Any );
			}

			if ( Lang13.Bool( this.cocoon_target ) && this.busy != 4 ) {
				this.busy = 4;
				this.visible_message( new Txt( "<span class='notice'>" ).the( this ).item().str( " begins to secrete a sticky substance around " ).the( this.cocoon_target ).item().str( ".</span>" ).ToString() );
				this.stop_automated_movement = true;
				Map13.Walk( this, 0, 0 );

				if ( GlobalFuncs.do_after( this, 50, null, this ) ) {
					
					if ( this.busy == 4 ) {
						
						if ( Lang13.Bool( this.cocoon_target ) && this.cocoon_target.loc is Tile && Map13.GetDistance( this, this.cocoon_target ) <= 1 ) {
							C = new Obj_Effect_Spider_Cocoon( this.cocoon_target.loc );
							large_cocoon = false;
							C.pixel_x = Convert.ToInt32( this.cocoon_target.pixel_x );
							C.pixel_y = Convert.ToInt32( this.cocoon_target.pixel_y );

							foreach (dynamic _c in Lang13.Enumerate( C.loc, typeof(Obj_Item) )) {
								I = _c;
								
								I.loc = C;
							}

							foreach (dynamic _d in Lang13.Enumerate( C.loc, typeof(Obj_Structure) )) {
								S = _d;
								

								if ( !Lang13.Bool( S.anchored ) ) {
									S.loc = C;
									large_cocoon = true;
								}
							}

							foreach (dynamic _e in Lang13.Enumerate( C.loc, typeof(Obj_Machinery) )) {
								M = _e;
								

								if ( !Lang13.Bool( M.anchored ) ) {
									M.loc = C;
									large_cocoon = true;
								}
							}

							foreach (dynamic _f in Lang13.Enumerate( C.loc, typeof(Mob_Living) )) {
								L2 = _f;
								

								if ( L2 is Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider ) {
									continue;
								}
								large_cocoon = true;
								L2.loc = C;
								C.pixel_x = L2.pixel_x;
								C.pixel_y = L2.pixel_y;
								this.fed++;
								this.visible_message( new Txt( "<span class='danger'>" ).the( this ).item().str( " sticks a proboscis into " ).the( L2 ).item().str( " and sucks a viscous substance out.</span>" ).ToString() );
								break;
							}

							if ( large_cocoon ) {
								C.icon_state = Rand13.Pick(new object [] { "cocoon_large1", "cocoon_large2", "cocoon_large3" });
							}
						}
					}
				}
				this.cocoon_target = null;
				this.busy = 0;
				this.stop_automated_movement = false;
			}
			return;
		}

	}

}