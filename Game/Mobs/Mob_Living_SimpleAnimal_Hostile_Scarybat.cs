// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_Scarybat : Mob_Living_SimpleAnimal_Hostile {

		public dynamic owner = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "bat";
			this.icon_dead = "bat_dead";
			this.icon_gib = "bat_dead";
			this.turns_per_move = 3;
			this.response_help = "pets the";
			this.response_disarm = "gently pushes aside the";
			this.response_harm = "hits the";
			this.speed = 4;
			this.flying = true;
			this.harm_intent_damage = 8;
			this.melee_damage_lower = 10;
			this.melee_damage_upper = 10;
			this.attacktext = "bites";
			this.attack_sound = "sound/weapons/bite.ogg";
			this.min_oxy = 0;
			this.max_tox = false;
			this.max_co2 = 0;
			this.minbodytemp = 0;
			this.size = 1;
			this.faction = "scarybat";
			this.icon = "icons/mob/bats.dmi";
			this.icon_state = "bat";
		}

		// Function from file: bat.dm
		public Mob_Living_SimpleAnimal_Hostile_Scarybat ( dynamic loc = null, dynamic L = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( L is Mob_Living ) {
				this.owner = L;
			}
			return;
		}

		// Function from file: bat.dm
		public override dynamic AttackingTarget(  ) {
			dynamic _default = null;

			Mob L = null;

			_default = base.AttackingTarget();
			L = _default;

			if ( L is Mob_Living ) {
				
				if ( Rand13.PercentChance( 15 ) ) {
					L.Stun( 1 );
					L.visible_message( new Txt( "<span class='danger'>" ).the( this ).item().str( " scares " ).the( L ).item().str( "!</span>" ).ToString() );
				}
			}
			return _default;
		}

		// Function from file: bat.dm
		public override dynamic Found( Ent_Static A = null ) {
			
			if ( A is Ent_Static && A == this.owner ) {
				return 0;
			}
			return base.Found( A );
		}

		// Function from file: bat.dm
		public override dynamic FindTarget(  ) {
			dynamic _default = null;

			_default = base.FindTarget();

			if ( Lang13.Bool( _default ) ) {
				this.emote( "flutters towards " + _default );
			}
			return _default;
		}

		// Function from file: bat.dm
		public override bool CanAttack( dynamic target = null ) {
			
			if ( target == this.owner ) {
				return false;
			}
			return base.CanAttack( (object)(target) );
		}

		// Function from file: bat.dm
		public override int Process_Spacemove( bool? check_drift = null, bool? ignore_slip = null ) {
			check_drift = check_drift ?? false;

			return base.Process_Spacemove( check_drift, ignore_slip );
		}

	}

}