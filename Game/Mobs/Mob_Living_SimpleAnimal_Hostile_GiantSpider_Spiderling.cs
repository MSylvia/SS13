// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Hostile_GiantSpider_Spiderling : Mob_Living_SimpleAnimal_Hostile_GiantSpider {

		public double amount_grown = 0;
		public dynamic entry_vent = null;
		public bool travelling_in_vent = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_living = "spiderling";
			this.vision_range = 3;
			this.idle_vision_range = 3;
			this.move_to_delay = 3;
			this.friendly = "harmlessly skitters into";
			this.maxHealth = 12;
			this.health = 12;
			this.harm_intent_damage = 5;
			this.attacktext = "barrels into";
			this.size = 1;
			this.wanted_objects = new ByTable(new object [] { typeof(Obj_Machinery_Atmospherics_Unary_VentPump) });
			this.icon = "icons/effects/effects.dmi";
			this.icon_state = "spiderling";
			this.layer = 2.7;
		}

		// Function from file: spiderling.dm
		public Mob_Living_SimpleAnimal_Hostile_GiantSpider_Spiderling ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pixel_x = Rand13.Int( 6, -6 );
			this.pixel_y = Rand13.Int( 6, -6 );

			if ( Rand13.PercentChance( 75 ) ) {
				this.amount_grown = 1;
			}
			return;
		}

		// Function from file: spiderling.dm
		public void ventcrawl( dynamic v = null ) {
			
			if ( !Lang13.Bool( v.welded ) ) {
				this.entry_vent = v;
				this.Goto( GlobalFuncs.get_turf( v ), this.move_to_delay );
			}
			return;
		}

		// Function from file: spiderling.dm
		public override dynamic AttackingTarget(  ) {
			
			if ( this.target is Obj_Machinery_Atmospherics_Unary_VentPump ) {
				this.ventcrawl( this.target );
			}
			return null;
		}

		// Function from file: spiderling.dm
		public override void GiveTarget( dynamic new_target = null ) {
			
			if ( this.target is Mob_Living && ( this.target is Mob_Living_Carbon_Human || this.target is Mob_Living_Silicon_Robot ) && !( this.target is Mob_Living_Silicon_Robot_Mommi ) ) {
				this.target = new_target;
				this.Aggro();
				this.visible_message( "<span class='danger'>The " + this.name + " tries to flee from " + this.target.name + "!</span>" );
			}
			return;
		}

		// Function from file: spiderling.dm
		public override bool Life(  ) {
			ByTable vents = null;
			Obj_Machinery_Atmospherics_Unary_VentPump temp_vent = null;
			dynamic exit_vent = null;
			int travel_time = 0;
			dynamic new_area = null;
			dynamic spawn_type = null;

			
			if ( this.timestopped ) {
				return false;
			}

			if ( this.travelling_in_vent ) {
				
				if ( this.loc is Tile ) {
					this.travelling_in_vent = false;
					this.entry_vent = null;
				}
			} else if ( Lang13.Bool( this.entry_vent ) ) {
				
				if ( Map13.GetDistance( this, this.entry_vent ) <= 1 ) {
					
					if ( Lang13.Bool( this.entry_vent.network ) && this.entry_vent.network.normal_members.len != 0 ) {
						vents = new ByTable();

						foreach (dynamic _a in Lang13.Enumerate( this.entry_vent.network.normal_members, typeof(Obj_Machinery_Atmospherics_Unary_VentPump) )) {
							temp_vent = _a;
							
							vents.Add( temp_vent );
						}

						if ( !( vents.len != 0 ) ) {
							this.entry_vent = null;
							return false;
						}
						exit_vent = Rand13.PickFromTable( vents );
						this.LoseAggro();
						Task13.Schedule( Rand13.Int( 20, 60 ), (Task13.Closure)(() => {
							this.loc = exit_vent;
							travel_time = Num13.Floor( Map13.GetDistance( this.loc, exit_vent.loc ) / 2 );
							Task13.Schedule( travel_time, (Task13.Closure)(() => {
								
								if ( !Lang13.Bool( exit_vent ) || Lang13.Bool( exit_vent.welded ) ) {
									this.loc = this.entry_vent;
									this.entry_vent = null;
									return;
								}

								if ( Rand13.PercentChance( 50 ) ) {
									this.visible_message( "<span class='notice'>You hear something squeezing through the ventilation ducts.</span>", 2 );
								}
								Task13.Sleep( travel_time );

								if ( !Lang13.Bool( exit_vent ) || Lang13.Bool( exit_vent.welded ) ) {
									this.loc = this.entry_vent;
									this.entry_vent = null;
									return;
								}
								this.loc = exit_vent.loc;
								this.entry_vent = null;
								new_area = GlobalFuncs.get_area( this.loc );

								if ( Lang13.Bool( new_area ) ) {
									((Base_Static)new_area).Entered( this );
								}
								return;
							}));
							return;
						}));
					} else {
						this.entry_vent = null;
					}
				}
			}

			if ( this.loc is Tile && this.amount_grown > 0 ) {
				this.amount_grown += Rand13.Int( 0, 2 );

				if ( this.amount_grown >= 100 ) {
					spawn_type = Rand13.PickFromTable( GlobalVars.spider_types );
					Lang13.Call( spawn_type, this.loc );
					GlobalFuncs.qdel( this );
					return false;
				}
			}
			base.Life();
			return false;
		}

		// Function from file: spiderling.dm
		public override void LoseAggro(  ) {
			base.LoseAggro();
			this.retreat_distance = 0;
			this.minimum_distance = 0;
			this.search_objects = 0;
			this.stance = 1;
			return;
		}

		// Function from file: spiderling.dm
		public override void Aggro(  ) {
			base.Aggro();
			this.stance = 3;
			this.retreat_distance = 10;
			this.minimum_distance = 10;
			this.search_objects = 1;
			return;
		}

		// Function from file: spiderling.dm
		public override void Die( bool? gore = null ) {
			this.visible_message( "<span class='alert'>" + this + " dies!</span>" );
			new Obj_Effect_Decal_Cleanable_SpiderlingRemains( this.loc );
			base.Die( gore );
			GlobalFuncs.qdel( this );
			return;
		}

	}

}