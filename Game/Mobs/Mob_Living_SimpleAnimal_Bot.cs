// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Mob_Living_SimpleAnimal_Bot : Mob_Living_SimpleAnimal {

		public dynamic bot_core = null;
		public Type bot_core_type = typeof(Obj_Machinery_BotCore);
		public ByTable users = new ByTable();
		public string window_id = "bot_control";
		public string window_name = "Protobot 1.0";
		public bool window_width = false;
		public bool window_height = false;
		public dynamic paicard = null;
		public bool allow_pai = true;
		public string bot_name = null;
		public ByTable player_access = new ByTable();
		public int emagged = 0;
		public dynamic prev_access = new ByTable();
		public int? on = 1;
		public bool open = false;
		public bool locked = true;
		public bool hacked = false;
		public string text_hack = "";
		public string text_dehack = "";
		public string text_dehack_fail = "";
		public string declare_message = "";
		public int frustration = 0;
		public int base_speed = 2;
		public dynamic ai_waypoint = null;
		public dynamic path = new ByTable();
		public bool pathset = false;
		public ByTable ignore_list = new ByTable();
		public int v_mode = 0;
		public int tries = 0;
		public bool remote_disabled = false;
		public Mob_Living_Silicon_Ai calling_ai = null;
		public Obj_Item_Device_Radio Radio = null;
		public Type radio_key = null;
		public string radio_channel = "Common";
		public bool auto_patrol = false;
		public Ent_Static patrol_target = null;
		public dynamic summon_target = null;
		public dynamic new_destination = null;
		public dynamic destination = null;
		public string next_destination = null;
		public int blockcount = 0;
		public bool awaiting_beacon = false;
		public string nearest_beacon = null;
		public Ent_Static nearest_beacon_loc = null;
		public int beacon_freq = 1445;
		public string model = "";
		public int bot_type = 0;
		public ByTable mode_name = new ByTable(new object [] { 
											"In Pursuit", 
											"Preparing to Arrest", 
											"Arresting", 
											"Beginning Patrol", 
											"Patrolling", 
											"Summoned by PDA", 
											"Cleaning", 
											"Repairing", 
											"Proceeding to work site", 
											"Healing", 
											"Proceeding to AI waypoint", 
											"Navigating to Delivery Location", 
											"Navigating to Home", 
											"Waiting for clear path", 
											"Calculating navigation path", 
											"Pinging beacon network", 
											"Unable to reach destination"
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 3;
			this.stop_automated_movement = true;
			this.wander = false;
			this.healable = false;
			this.damage_coeff = new ByTable().Set( "brute", 1 ).Set( "fire", 1 ).Set( "tox", 0 ).Set( "clone", 0 ).Set( "stamina", 0 ).Set( "oxy", 0 );
			this.atmos_requirements = new ByTable().Set( "min_oxy", 0 ).Set( "max_oxy", 0 ).Set( "min_tox", 0 ).Set( "max_tox", 0 ).Set( "min_co2", 0 ).Set( "max_co2", 0 ).Set( "min_n2", 0 ).Set( "max_n2", 0 );
			this.minbodytemp = 0;
			this.has_unlimited_silicon_privilege = true;
			this.sentience_type = 2;
			this.status_flags = 0;
			this.speak_emote = new ByTable(new object [] { "states" });
			this.bubble_icon = "machine";
			this.faction = new ByTable(new object [] { "neutral", "silicon" });
			this.hud_possible = new ByTable(new object [] { "8", "12", "9" });
			this.icon = "icons/obj/aibots.dmi";
		}

		// Function from file: bot.dm
		public Mob_Living_SimpleAnimal_Bot ( dynamic loc = null ) : base( (object)(loc) ) {
			AtomHud diag_hud = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.access_card = new Obj_Item_Weapon_Card_Id( this );
			this.access_card.access += GlobalVars.access_robotics;
			this.set_custom_texts();
			this.Radio = new Obj_Item_Device_Radio( this );

			if ( this.radio_key != null ) {
				this.Radio.keyslot = Lang13.Call( this.radio_key );
			}
			this.Radio.subspace_transmission = true;
			this.Radio.canhear_range = 0;
			this.Radio.recalculateChannels();
			this.bot_core = Lang13.Call( this.bot_core_type, this );
			this.prepare_huds();
			diag_hud = GlobalVars.huds[5];
			diag_hud.add_to_hud( this );
			this.diag_hud_set_bothealth();
			this.diag_hud_set_botstat();
			this.diag_hud_set_botmode();
			return;
		}

		// Function from file: bot.dm
		public override void sentience_act(  ) {
			this.faction -= "silicon";
			return;
		}

		// Function from file: bot.dm
		public override void revive(  ) {
			base.revive();
			this.update_icon();
			return;
		}

		// Function from file: bot.dm
		public override bool Logout(  ) {
			bool _default = false;

			_default = base.Logout();
			this.bot_reset();
			return _default;
		}

		// Function from file: bot.dm
		public override dynamic Login(  ) {
			dynamic _default = null;

			_default = base.Login();
			this.access_card.access += this.player_access;
			this.diag_hud_set_botmode();
			return _default;
		}

		// Function from file: bot.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( this.users.Contains( Task13.User ) ) {
					this.users.Remove( Task13.User );
				}
				return 1;
			}

			if ( this.topic_denied( Task13.User ) ) {
				Task13.User.WriteMsg( "<span class='warning'>" + this + "'s interface is not responding!</span>" );
				return 1;
			}
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["power"] ) && ( ((Obj)this.bot_core).allowed( Task13.User ) || !this.locked ) ) {
				
				if ( Lang13.Bool( this.on ) ) {
					this.turn_off();
				} else {
					this.turn_on();
				}
			}

			dynamic _a = href_list["operation"]; // Was a switch-case, sorry for the mess.
			if ( _a=="patrol" ) {
				this.auto_patrol = !this.auto_patrol;
				this.bot_reset();
			} else if ( _a=="remote" ) {
				this.remote_disabled = !this.remote_disabled;
			} else if ( _a=="hack" ) {
				
				if ( this.emagged != 2 ) {
					this.emagged = 2;
					this.hacked = true;
					this.locked = true;
					Task13.User.WriteMsg( "<span class='warning'>" + this.text_hack + "</span>" );
					this.bot_reset();
				} else if ( !this.hacked ) {
					Task13.User.WriteMsg( "<span class='boldannounce'>" + this.text_dehack_fail + "</span>" );
				} else {
					this.emagged = 0;
					this.hacked = false;
					Task13.User.WriteMsg( "<span class='notice'>" + this.text_dehack + "</span>" );
					this.bot_reset();
				}
			} else if ( _a=="ejectpai" ) {
				
				if ( Lang13.Bool( this.paicard ) && ( !this.locked || Task13.User is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( Task13.User ) ) ) ) {
					Task13.User.WriteMsg( "<span class='notice'>You eject " + this.paicard + " from " + this.bot_name + "</span>" );
					this.ejectpai( Task13.User );
				}
			}
			this.update_controls();
			return null;
		}

		// Function from file: bot.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			dynamic _default = null;

			Ent_Static D = null;

			_default = base.Bump( Obstacle, (object)(yes) );

			if ( ( Obstacle is Obj_Machinery_Door_Airlock || Obstacle is Obj_Machinery_Door_Window ) && !( this.access_card == null ) ) {
				D = Obstacle;

				if ( Lang13.Bool( ((dynamic)D).check_access( this.access_card ) ) ) {
					((dynamic)D).open();
					this.frustration = 0;
				}
			}
			return _default;
		}

		// Function from file: bot.dm
		public override int radio( dynamic message = null, string message_mode = null, ByTable spans = null ) {
			int _default = 0;

			_default = base.radio( (object)(message), message_mode, spans );

			if ( _default != 0 ) {
				return _default;
			}

			switch ((string)( message_mode )) {
				case "headset":
					this.Radio.talk_into( this, message, null, spans );
					return 2;
					break;
				case "department":
					this.Radio.talk_into( this, message, message_mode, spans );
					return 2;
					break;
			}

			if ( GlobalVars.radiochannels.Contains( message_mode ) ) {
				this.Radio.talk_into( this, message, message_mode, spans );
				return 2;
			}
			return 0;
		}

		// Function from file: bot.dm
		public override ByTable get_spans(  ) {
			return base.get_spans() | "robot";
		}

		// Function from file: bot.dm
		public override double emp_act( int severity = 0 ) {
			int? was_on = null;

			was_on = this.on;
			this.stat |= 16;
			GlobalFuncs.PoolOrNew( typeof(Obj_Effect_Overlay_Temp_Emp), this.loc );

			if ( Lang13.Bool( this.paicard ) ) {
				((Ent_Static)this.paicard).emp_act( severity );
				this.visible_message( "" + this.paicard + " is flies out of " + this.bot_name + "!", "<span class='warning'>You are forcefully ejected from " + this.bot_name + "!</span>" );
				this.ejectpai( 0 );
			}

			if ( Lang13.Bool( this.on ) ) {
				this.turn_off();
			}
			Task13.Schedule( severity * 300, (Task13.Closure)(() => {
				this.stat &= 65519;

				if ( Lang13.Bool( was_on ) ) {
					this.turn_on();
				}
				return;
			}));
			return 0;
		}

		// Function from file: bot.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			EffectSystem_SparkSpread s = null;

			
			if ( Lang13.Bool( P ) && ( P.damage_type == "brute" || P.damage_type == "fire" ) ) {
				
				if ( Rand13.PercentChance( 75 ) && Convert.ToDouble( P.damage ) > 0 ) {
					s = new EffectSystem_SparkSpread();
					s.set_up( 5, 1, this );
					s.start();
				}
			}
			return base.bullet_act( (object)(P), (object)(def_zone) );
		}

		// Function from file: bot.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic card = null;
			dynamic WT = null;
			EffectSystem_SparkSpread s = null;

			
			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( !this.locked ) {
					this.open = !this.open;
					user.WriteMsg( "<span class='notice'>The maintenance panel is now " + ( this.open ? "opened" : "closed" ) + ".</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>The maintenance panel is locked.</span>" );
				}
			} else if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
				
				if ( ((Obj)this.bot_core).allowed( user ) && !this.open && !( this.emagged != 0 ) ) {
					this.locked = !this.locked;
					user.WriteMsg( "Controls are now " + ( this.locked ? "locked." : "unlocked." ) );
				} else {
					
					if ( this.emagged != 0 ) {
						user.WriteMsg( "<span class='danger'>ERROR</span>" );
					}

					if ( this.open ) {
						user.WriteMsg( "<span class='warning'>Please close the access panel before locking it.</span>" );
					} else {
						user.WriteMsg( "<span class='warning'>Access denied.</span>" );
					}
				}
			} else if ( A is Obj_Item_Device_Paicard ) {
				
				if ( Lang13.Bool( this.paicard ) ) {
					user.WriteMsg( "<span class='warning'>A " + this.paicard + " is already inserted!</span>" );
				} else if ( this.allow_pai && !Lang13.Bool( this.key ) ) {
					
					if ( !this.locked && !this.open ) {
						card = A;

						if ( Lang13.Bool( card.pai ) && Lang13.Bool( card.pai.mind ) ) {
							
							if ( !Lang13.Bool( user.drop_item() ) ) {
								return null;
							}
							((Ent_Dynamic)A).forceMove( this );
							this.paicard = card;
							((Ent_Static)user).visible_message( "" + user + " inserts " + A + " into " + this + "!", "<span class='notice'>You insert " + A + " into " + this + ".</span>" );
							((Mind)this.paicard.pai.mind).transfer_to( this );
							this.WriteMsg( "<span class='notice'>You sense your form change as you are uploaded into " + this + ".</span>" );
							this.bot_name = this.name;
							this.name = this.paicard.pai.name;
							this.faction = user.faction;
							GlobalFuncs.add_logs( user, this.paicard.pai, "uploaded to " + this.bot_name + "," );
						} else {
							user.WriteMsg( "<span class='warning'>" + A + " is inactive.</span>" );
						}
					} else {
						user.WriteMsg( "<span class='warning'>The personality slot is locked.</span>" );
					}
				} else {
					user.WriteMsg( "<span class='warning'>" + this + " is not compatible with " + A + "</span>" );
				}
			} else if ( A is Obj_Item_Weapon_Hemostat && Lang13.Bool( this.paicard ) ) {
				
				if ( this.open ) {
					user.WriteMsg( "<span class='warning'>Close the access panel before manipulating the personality slot!</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>You attempt to pull " + this.paicard + " free...</span>" );

					if ( GlobalFuncs.do_after( user, 30, null, this ) ) {
						
						if ( Lang13.Bool( this.paicard ) ) {
							((Ent_Static)user).visible_message( "<span class='notice'>" + user + " uses " + A + " to pull " + this.paicard + " out of " + this.bot_name + "!</span>", "<span class='notice'>You pull " + this.paicard + " out of " + this.bot_name + " with " + A + ".</span>" );
							this.ejectpai( user );
						}
					}
				}
			} else {
				((Mob)user).changeNext_move( 8 );

				if ( A is Obj_Item_Weapon_Weldingtool && user.a_intent != "harm" ) {
					
					if ( Convert.ToDouble( this.health ) >= Convert.ToDouble( this.maxHealth ) ) {
						user.WriteMsg( "<span class='warning'>" + this + " does not need a repair!</span>" );
						return null;
					}

					if ( !this.open ) {
						user.WriteMsg( "<span class='warning'>Unable to repair with the maintenance panel closed!</span>" );
						return null;
					}
					WT = A;

					if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
						this.adjustHealth( -10 );
						((Ent_Static)user).visible_message( "" + user + " repairs " + this + "!", "<span class='notice'>You repair " + this + ".</span>" );
					} else {
						user.WriteMsg( "<span class='warning'>The welder must be on for this task!</span>" );
					}
				} else {
					
					if ( Lang13.Bool( A.force ) ) {
						s = new EffectSystem_SparkSpread();
						s.set_up( 5, 1, this );
						s.start();
					}
					base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
				}
			}
			return null;
		}

		// Function from file: bot.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.show_controls( user );
			return null;
		}

		// Function from file: bot.dm
		public override dynamic attack_ai( dynamic user = null ) {
			
			if ( !this.topic_denied( user ) ) {
				this.interact( user );
			} else {
				user.WriteMsg( "<span class='warning'>" + this + "'s interface is not responding!</span>" );
			}
			return null;
		}

		// Function from file: bot.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( a.a_intent == "help" ) {
				this.interact( a );
			} else {
				return base.attack_hand( (object)(a), b, c );
			}
			return null;
		}

		// Function from file: bot.dm
		public override bool handle_automated_action(  ) {
			this.diag_hud_set_botmode();

			if ( !Lang13.Bool( this.on ) || this.client != null ) {
				return false;
			}

			switch ((int)( this.v_mode )) {
				case 11:
					this.call_mode();
					return false;
					break;
				case 6:
					this.bot_summon();
					return false;
					break;
			}
			return true;
		}

		// Function from file: bot.dm
		public override void updatehealth(  ) {
			base.updatehealth();
			this.diag_hud_set_bothealth();
			return;
		}

		// Function from file: bot.dm
		public override dynamic adjustHealth( dynamic amount = null ) {
			dynamic _default = null;

			
			if ( Convert.ToDouble( amount ) > 0 && Rand13.PercentChance( 10 ) ) {
				new Obj_Effect_Decal_Cleanable_Oil( this.loc );
			}
			_default = base.adjustHealth( (object)(amount) );
			return _default;
		}

		// Function from file: bot.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( Convert.ToDouble( this.health ) < Convert.ToDouble( this.maxHealth ) ) {
				
				if ( Convert.ToDouble( this.health ) > Convert.ToDouble( this.maxHealth / 3 ) ) {
					user.WriteMsg( "" + this + "'s parts look loose." );
				} else {
					user.WriteMsg( "" + this + "'s parts look very loose!" );
				}
			} else {
				user.WriteMsg( "" + this + " is in pristine condition." );
			}
			return 0;
		}

		// Function from file: bot.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( this.locked ) {
				this.locked = false;
				this.emagged = 1;
				user.WriteMsg( "<span class='notice'>You bypass " + this + "'s controls.</span>" );
				return false;
			}

			if ( !this.locked && this.open ) {
				this.emagged = 2;
				this.remote_disabled = true;
				this.locked = true;
				this.bot_reset();
				this.turn_on();
				this.WriteMsg( "<span class='userdanger'>(#$*#$^^( OVERRIDE DETECTED</span>" );
				GlobalFuncs.add_logs( user, this, "emagged" );
				return false;
			} else {
				user.WriteMsg( "<span class='warning'>You need to open maintenance panel first!</span>" );
			}
			return false;
		}

		// Function from file: bot.dm
		public override bool death( bool? gibbed = null, bool? toast = null ) {
			this.explode();
			base.death( gibbed, toast );
			return false;
		}

		// Function from file: bot.dm
		public override dynamic Destroy(  ) {
			
			if ( Lang13.Bool( this.paicard ) ) {
				this.ejectpai();
			}
			GlobalFuncs.qdel( this.Radio );
			GlobalFuncs.qdel( this.access_card );
			GlobalFuncs.qdel( this.bot_core );
			return base.Destroy();
		}

		// Function from file: bot.dm
		public override bool update_canmove(  ) {
			bool _default = false;

			_default = base.update_canmove();

			if ( !Lang13.Bool( this.on ) ) {
				_default = false;
			}
			this.canmove = _default;
			return _default;
		}

		// Function from file: bot.dm
		public void ejectpairemote( Mob user = null ) {
			
			if ( ((Obj)this.bot_core).allowed( user ) && Lang13.Bool( this.paicard ) ) {
				this.f_speak( "Ejecting personality chip.", this.radio_channel );
				this.ejectpai( user );
			}
			return;
		}

		// Function from file: bot.dm
		public void ejectpai( dynamic user = null, bool? announce = null ) {
			announce = announce ?? true;

			
			if ( Lang13.Bool( this.paicard ) ) {
				
				if ( this.mind != null && Lang13.Bool( this.paicard.pai ) ) {
					this.mind.transfer_to( this.paicard.pai );
				} else if ( Lang13.Bool( this.paicard.pai ) ) {
					this.paicard.pai.key = this.key;
				} else {
					this.ghostize( false );
				}
				this.key = null;
				((Ent_Dynamic)this.paicard).forceMove( this.loc );

				if ( Lang13.Bool( user ) ) {
					GlobalFuncs.add_logs( user, this.paicard.pai, "ejected from " + this.bot_name + "," );
				} else {
					GlobalFuncs.add_logs( this, this.paicard.pai, "ejected" );
				}

				if ( announce == true ) {
					this.paicard.pai.WriteMsg( "<span class='notice'>You feel your control fade as " + this.paicard + " ejects from " + this.bot_name + ".</span>" );
				}
				this.paicard = null;
				this.name = this.bot_name;
				this.faction = Lang13.Initial( this, "faction" );
			}
			return;
		}

		// Function from file: bot.dm
		public string showpai( dynamic user = null ) {
			string eject = null;

			eject = "";

			if ( !this.locked || Task13.User is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( Task13.User ) ) ) {
				
				if ( Lang13.Bool( this.paicard ) || this.allow_pai ) {
					eject += "Personality card status: ";

					if ( Lang13.Bool( this.paicard ) ) {
						
						if ( this.client != null ) {
							eject += new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=ejectpai'>Active</A>" ).ToString();
						} else {
							eject += new Txt( "<A href='?src=" ).Ref( this ).str( ";operation=ejectpai'>Inactive</A>" ).ToString();
						}
					} else if ( !this.allow_pai || Lang13.Bool( this.key ) ) {
						eject += "Unavailable";
					} else {
						eject += "Not inserted";
					}
					eject += "<BR>";
				}
				eject += "<BR>";
			}
			return eject;
		}

		// Function from file: bot.dm
		public dynamic hack( dynamic user = null ) {
			dynamic hack = null;

			
			if ( user is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( user ) ) ) {
				hack += "" + ( this.emagged == 2 ? "Software compromised! Unit may exhibit dangerous or erratic behavior." : "Unit operating normally. Release safety lock?" ) + "<BR>";
				hack += new Txt( "Harm Prevention Safety System: <A href='?src=" ).Ref( this ).str( ";operation=hack'>" ).item( ( this.emagged != 0 ? "<span class='bad'>DANGER</span>" : "Engaged" ) ).str( "</A><BR>" ).ToString();
			} else if ( !this.locked ) {
				hack += new Txt( "Remote network control radio: <A href='?src=" ).Ref( this ).str( ";operation=remote'>" ).item( ( this.remote_disabled ? "Disconnected" : "Connected" ) ).str( "</A><BR>" ).ToString();
			}
			return hack;
		}

		// Function from file: bot.dm
		public bool topic_denied( dynamic user = null ) {
			
			if ( !((Mob)user).canUseTopic( this ) ) {
				return true;
			}

			if ( this.emagged == 2 ) {
				
				if ( !this.hacked ) {
					return true;
				} else if ( !( user is Mob_Living_Silicon ) && !Lang13.Bool( GlobalFuncs.IsAdminGhost( user ) ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: bot.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + this.on;
			return false;
		}

		// Function from file: bot.dm
		public virtual string get_controls( dynamic M = null ) {
			return "PROTOBOT - NOT FOR USE";
		}

		// Function from file: bot.dm
		public void update_controls(  ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.users )) {
				M = _a;
				
				this.show_controls( M );
			}
			return;
		}

		// Function from file: bot.dm
		public void show_controls( dynamic M = null ) {
			string dat = null;
			Browser popup = null;

			this.users.Or( M );
			dat = "";
			dat = this.get_controls( M );
			popup = new Browser( M, this.window_id, this.window_name, 350, 600 );
			popup.set_content( dat );
			popup.open();
			GlobalFuncs.onclose( M, this.window_id, this );
			return;
		}

		// Function from file: bot.dm
		public void summon_step(  ) {
			Ent_Static next = null;
			bool moved = false;

			
			if ( this.client != null ) {
				return;
			}

			if ( this.loc == this.summon_target ) {
				this.bot_reset();
				return;
			} else if ( this.path.len > 0 && Lang13.Bool( this.summon_target ) ) {
				next = this.path[1];

				if ( next == this.loc ) {
					this.path -= next;
					return;
				}
				moved = this.bot_move( this.summon_target, 3 );

				if ( moved ) {
					this.blockcount = 0;
				} else {
					this.blockcount++;

					if ( this.blockcount > 5 ) {
						Task13.Schedule( 2, (Task13.Closure)(() => {
							this.calc_summon_path( next );
							this.tries++;
							return;
							return;
						}));
						return;
					}
				}
			} else {
				this.calc_summon_path();
			}
			return;
		}

		// Function from file: bot.dm
		public void calc_summon_path( Ent_Static avoid = null ) {
			this.check_bot_access();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.path = GlobalFuncs.get_path_to( this, this.summon_target, typeof(Tile).GetMethod( "Distance_cardinal" ), false, 150, null, null, this.access_card, avoid );

				if ( !( this.path.len != 0 ) || this.tries >= 5 ) {
					this.f_speak( "Summon command failed, destination unreachable.", this.radio_channel );
					this.bot_reset();
				}
				return;
			}));
			return;
		}

		// Function from file: bot.dm
		public virtual void calc_path( Ent_Static avoid = null ) {
			this.check_bot_access();
			this.path = GlobalFuncs.get_path_to( this, this.patrol_target, typeof(Tile).GetMethod( "Distance_cardinal" ), false, 120, null, null, this.access_card, avoid );
			return;
		}

		// Function from file: bot.dm
		public void bot_summon(  ) {
			this.summon_step();
			return;
		}

		// Function from file: bot.dm
		public void bot_control_message( string command = null, Mob user = null, dynamic user_turf = null, dynamic user_access = null ) {
			dynamic a = null;

			
			switch ((string)( command )) {
				case "patroloff":
					this.WriteMsg( "<span class='warning big'>STOP PATROL</span>" );
					break;
				case "patrolon":
					this.WriteMsg( "<span class='warning big'>START PATROL</span>" );
					break;
				case "summon":
					a = GlobalFuncs.get_area( user_turf );
					this.WriteMsg( "<span class='warning big'>PRIORITY ALERT:" + user + " in " + a.name + "!</span>" );
					break;
				case "stop":
					this.WriteMsg( "<span class='warning big'>STOP!</span>" );
					break;
				case "go":
					this.WriteMsg( "<span class='warning big'>GO!</span>" );
					break;
				case "home":
					this.WriteMsg( "<span class='warning big'>RETURN HOME!</span>" );
					break;
				case "ejectpai":
					return;
					break;
				default:
					this.WriteMsg( "<span class='warning'>Unidentified control sequence recieved:" + command + "</span>" );
					break;
			}
			return;
		}

		// Function from file: bot.dm
		public virtual bool bot_control( string command = null, Mob user = null, dynamic user_turf = null, dynamic user_access = null ) {
			user_access = user_access ?? new ByTable();

			
			if ( !Lang13.Bool( this.on ) || this.emagged == 2 || this.remote_disabled ) {
				return true;
			}

			if ( this.client != null ) {
				this.bot_control_message( command, user, user_turf, user_access );
			}

			switch ((string)( command )) {
				case "patroloff":
					this.bot_reset();
					this.auto_patrol = false;
					break;
				case "patrolon":
					this.auto_patrol = true;
					break;
				case "summon":
					this.bot_reset();
					this.summon_target = user_turf;

					if ( user_access.len != 0 ) {
						this.access_card.access = user_access + this.prev_access;
					}
					this.v_mode = 6;
					this.f_speak( "Responding.", this.radio_channel );
					this.calc_summon_path();
					break;
				case "ejectpai":
					this.ejectpairemote( user );
					break;
			}
			return false;
		}

		// Function from file: bot.dm
		public void find_nearest_beacon(  ) {
			Obj_Machinery_Navbeacon NB = null;
			int dist = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.navbeacons, typeof(Obj_Machinery_Navbeacon) )) {
				NB = _a;
				
				dist = Map13.GetDistance( this, NB );

				if ( Lang13.Bool( this.nearest_beacon ) ) {
					
					if ( dist > 1 && dist < Map13.GetDistance( this, this.nearest_beacon_loc ) ) {
						this.nearest_beacon = NB.location;
						this.nearest_beacon_loc = NB.loc;
						this.next_destination = NB.codes["next_patrol"];
					} else {
						continue;
					}
				} else if ( dist > 1 ) {
					this.nearest_beacon = NB.location;
					this.nearest_beacon_loc = NB.loc;
				}
			}
			this.patrol_target = this.nearest_beacon_loc;
			this.destination = this.nearest_beacon;
			return;
		}

		// Function from file: bot.dm
		public bool get_next_patrol_target(  ) {
			Obj_Machinery_Navbeacon NB = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.navbeacons, typeof(Obj_Machinery_Navbeacon) )) {
				NB = _a;
				

				if ( NB.location == this.next_destination ) {
					this.destination = this.new_destination;
					this.patrol_target = NB.loc;
					this.next_destination = NB.codes["next_patrol"];
					return true;
				}
			}
			return false;
		}

		// Function from file: bot.dm
		public void find_patrol_target(  ) {
			this.nearest_beacon = null;
			this.new_destination = null;
			this.find_nearest_beacon();

			if ( Lang13.Bool( this.nearest_beacon ) ) {
				this.patrol_target = this.nearest_beacon_loc;
				this.destination = this.next_destination;
			} else {
				this.auto_patrol = false;
				this.v_mode = 0;
				this.f_speak( "Disengaging patrol mode." );
			}
			return;
		}

		// Function from file: bot.dm
		public void patrol_step(  ) {
			Ent_Static next = null;
			bool moved = false;

			
			if ( this.client != null ) {
				return;
			}

			if ( this.loc == this.patrol_target ) {
				
				if ( !this.get_next_patrol_target() ) {
					this.find_patrol_target();
				}
				return;
			} else if ( this.path.len > 0 && this.patrol_target != null ) {
				next = this.path[1];

				if ( next == this.loc ) {
					this.path -= next;
					return;
				}
				moved = this.bot_move( this.patrol_target );

				if ( moved ) {
					this.blockcount = 0;
				} else {
					this.blockcount++;

					if ( this.blockcount > 5 ) {
						Task13.Schedule( 2, (Task13.Closure)(() => {
							this.calc_path( next );

							if ( this.path.len == 0 ) {
								this.find_patrol_target();
								this.tries++;
							} else {
								this.blockcount = 0;
								this.tries = 0;
							}
							return;
						}));
						return;
					}
					return;
				}
			} else {
				this.v_mode = 4;
			}
			return;
		}

		// Function from file: bot.dm
		public void start_patrol(  ) {
			
			if ( this.tries >= 4 ) {
				this.auto_patrol = false;
				this.tries = 0;
				this.f_speak( "Unable to start patrol." );
				return;
			}

			if ( !this.auto_patrol ) {
				this.v_mode = 0;
				return;
			}

			if ( this.patrol_target != null ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.calc_path();

					if ( this.path.len == 0 ) {
						this.patrol_target = null;
						return;
					}
					this.v_mode = 5;
					return;
				}));
			} else {
				this.f_speak( "Engaging patrol mode." );
				this.find_patrol_target();
				this.tries++;
			}
			return;
		}

		// Function from file: bot.dm
		public void bot_patrol(  ) {
			this.patrol_step();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				if ( this.v_mode == 5 ) {
					this.patrol_step();
				}
				return;
			}));
			return;
		}

		// Function from file: bot.dm
		public virtual void bot_reset(  ) {
			
			if ( this.calling_ai != null ) {
				this.calling_ai.WriteMsg( "<span class='danger'>Call command to a bot has been reset.</span>" );
				this.calling_ai = null;
			}
			this.path = new ByTable();
			this.summon_target = null;
			this.pathset = false;
			this.access_card.access = this.prev_access;
			this.tries = 0;
			this.v_mode = 0;
			this.diag_hud_set_botstat();
			this.diag_hud_set_botmode();
			return;
		}

		// Function from file: bot.dm
		public void call_mode(  ) {
			bool success = false;

			success = this.bot_move( this.ai_waypoint, 3 );

			if ( !success ) {
				
				if ( this.calling_ai != null ) {
					this.calling_ai.WriteMsg( new Txt().icon( this ).str( " " ).item( ( GlobalFuncs.get_turf( this ) == this.ai_waypoint ? "<span class='notice'>" + this + " successfully arrived to waypoint.</span>" : "<span class='danger'>" + this + " failed to reach waypoint.</span>" ) ).ToString() );
					this.calling_ai = null;
				}
				this.bot_reset();
			}
			return;
		}

		// Function from file: bot.dm
		public virtual void call_bot( Mob_Living_Silicon_Ai caller = null, dynamic waypoint = null, int? message = null ) {
			message = message ?? GlobalVars.TRUE;

			dynamic end_area = null;
			Obj_Item_Weapon_Card_Id all_access = null;
			Job_Captain All = null;

			this.bot_reset();
			end_area = GlobalFuncs.get_area( waypoint );
			all_access = new Obj_Item_Weapon_Card_Id();
			All = new Job_Captain();
			all_access.access = All.get_access();
			this.path = GlobalFuncs.get_path_to( this, waypoint, typeof(Tile).GetMethod( "Distance_cardinal" ), false, 200, null, null, all_access );
			this.calling_ai = caller;
			this.ai_waypoint = waypoint;

			if ( Lang13.Bool( this.path ) && this.path.len != 0 ) {
				
				if ( !Lang13.Bool( this.on ) ) {
					this.turn_on();
				}
				this.access_card = all_access;

				if ( Lang13.Bool( message ) ) {
					this.calling_ai.WriteMsg( new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this.name ).str( " called to " ).item( end_area.name ).str( ". " ).item( this.path.len - 1 ).str( " meters to destination.</span>" ).ToString() );
				}
				this.pathset = true;
				this.v_mode = 11;
				this.tries = 0;
			} else {
				
				if ( Lang13.Bool( message ) ) {
					this.calling_ai.WriteMsg( "<span class='danger'>Failed to calculate a valid route. Ensure destination is clear of obstructions and within range.</span>" );
				}
				this.calling_ai = null;
				this.path = new ByTable();
			}
			return;
		}

		// Function from file: bot.dm
		public void check_bot_access(  ) {
			
			if ( this.v_mode != 6 && this.v_mode != 11 ) {
				this.access_card.access = this.prev_access;
			}
			return;
		}

		// Function from file: bot.dm
		public bool bot_step( dynamic dest = null ) {
			
			if ( !Lang13.Bool( this.path ) ) {
				return false;
			}

			if ( this.path.len > 1 ) {
				Map13.StepTowardsSimple( this, this.path[1] );

				if ( GlobalFuncs.get_turf( this ) == this.path[1] ) {
					this.path -= this.path[1];
				} else {
					this.tries++;
					return false;
				}
			} else if ( this.path.len == 1 ) {
				Map13.StepTowards( this, dest, 0 );
				this.path = new ByTable();
			}
			return true;
		}

		// Function from file: bot.dm
		public bool bot_move( dynamic dest = null, int? move_speed = null ) {
			dynamic last_node = null;
			int? step_count = null;
			int? step_number = null;

			
			if ( !Lang13.Bool( dest ) || !Lang13.Bool( this.path ) || this.path.len == 0 ) {
				this.path = new ByTable();
				return false;
			}
			dest = GlobalFuncs.get_turf( dest );
			last_node = GlobalFuncs.get_turf( this.path[this.path.len] );

			if ( GlobalFuncs.get_turf( this ) == dest ) {
				return true;
			} else if ( dest != last_node ) {
				this.path = new ByTable();
				return false;
			}
			step_count = ( Lang13.Bool( move_speed ) ? move_speed : this.base_speed );

			if ( ( step_count ??0) >= 1 && this.tries < 4 ) {
				step_number = null;
				step_number = 0;

				while (( step_number ??0) < ( step_count ??0)) {
					Task13.Schedule( ( step_number ??0) * 4, (Task13.Closure)(() => {
						this.bot_step( dest );
						return;
					}));
					step_number++;
				}
			} else {
				return false;
			}
			return true;
		}

		// Function from file: bot.dm
		public void add_to_ignore( dynamic subject = null ) {
			
			if ( this.ignore_list.len < 50 ) {
				this.ignore_list.Or( subject );
			} else if ( this.ignore_list.len >= Convert.ToDouble( subject ) ) {
				this.ignore_list.Remove( this.ignore_list[1] );
				this.ignore_list.Or( subject );
			}
			return;
		}

		// Function from file: bot.dm
		public virtual dynamic process_scan( dynamic scan_target = null ) {
			return scan_target;
		}

		// Function from file: bot.dm
		public dynamic scan( Type scan_type = null, dynamic old_target = null, int? scan_range = null ) {
			scan_range = scan_range ?? 7;

			dynamic final_result = null;
			dynamic scan = null;
			dynamic scan_result = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.shuffle( Map13.FetchInView( this, scan_range ) ) )) {
				scan = _a;
				

				if ( !Lang13.Bool( ((dynamic)scan_type).IsInstanceOfType( scan ) ) ) {
					continue;
				}

				if ( this.ignore_list.Contains( scan ) || scan == old_target ) {
					continue;
				}
				scan_result = this.process_scan( scan );

				if ( Lang13.Bool( scan_result ) ) {
					final_result = scan_result;
				} else {
					continue;
				}
				return final_result;
			}
			return null;
		}

		// Function from file: bot.dm
		[VerbInfo( name: "speak" )]
		public void f_speak( string message = null, string channel = null ) {
			
			if ( !Lang13.Bool( this.on ) || !Lang13.Bool( message ) ) {
				return;
			}

			if ( Lang13.Bool( channel ) && Lang13.Bool( this.Radio.channels[channel] ) ) {
				this.Radio.talk_into( this, message, channel );
			} else {
				this.say( message );
			}
			return;
		}

		// Function from file: bot.dm
		public virtual void set_custom_texts(  ) {
			this.text_hack = "You hack " + this.name + ".";
			this.text_dehack = "You reset " + this.name + ".";
			this.text_dehack_fail = "You fail to reset " + this.name + ".";
			return;
		}

		// Function from file: bot.dm
		public virtual void explode(  ) {
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: bot.dm
		public virtual void turn_off(  ) {
			this.on = 0;
			this.SetLuminosity( 0 );
			this.bot_reset();
			this.update_icon();
			return;
		}

		// Function from file: bot.dm
		public virtual bool turn_on(  ) {
			
			if ( this.stat != 0 ) {
				return false;
			}
			this.on = 1;
			this.SetLuminosity( Lang13.Initial( this, "luminosity" ) );
			this.update_icon();
			this.diag_hud_set_botstat();
			return true;
		}

		// Function from file: bot.dm
		public string get_mode(  ) {
			
			if ( this.client != null ) {
				
				if ( Lang13.Bool( this.paicard ) ) {
					return "<b>pAI Controlled</b>";
				} else {
					return "<b>Autonomous</b>";
				}
			} else if ( !Lang13.Bool( this.on ) ) {
				return "<span class='bad'>Inactive</span>";
			} else if ( !( this.v_mode != 0 ) ) {
				return "<span class='good'>Idle</span>";
			} else {
				return "<span class='average'>" + this.mode_name[this.v_mode] + "</span>";
			}
			return null;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_botmode(  ) {
			dynamic holder = null;

			holder = this.hud_list["12"];

			if ( this.client != null ) {
				holder.icon_state = "hudsentient";
				return;
			}

			switch ((int)( this.v_mode )) {
				case 6:
				case 11:
					holder.icon_state = "hudcalled";
					break;
				case 7:
				case 8:
				case 10:
					holder.icon_state = "hudworking";
					break;
				case 5:
				case 4:
					holder.icon_state = "hudpatrol";
					break;
				case 2:
				case 3:
				case 1:
					holder.icon_state = "hudalert";
					break;
				case 9:
				case 12:
				case 13:
				case 15:
					holder.icon_state = "hudmove";
					break;
				default:
					holder.icon_state = "";
					break;
			}
			return;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_botstat(  ) {
			dynamic holder = null;

			holder = this.hud_list["8"];

			if ( Lang13.Bool( this.on ) ) {
				holder.icon_state = "hudstat";
			} else if ( this.stat != 0 ) {
				holder.icon_state = "hudoffline";
			} else {
				holder.icon_state = "huddead2";
			}
			return;
		}

		// Function from file: data_huds.dm
		public void diag_hud_set_bothealth(  ) {
			dynamic holder = null;

			holder = this.hud_list["9"];
			holder.icon_state = "huddiag" + GlobalFuncs.RoundDiagBar( this.health / this.maxHealth );
			return;
		}

		// Function from file: bot.dm
		[Verb]
		[VerbInfo( name: "Ghost", desc: "Relinquish your life and enter the land of the dead.", group: "OOC" )]
		public override void ghost(  ) {
			
			if ( this.stat != 2 ) {
				Lang13.SuperCall();
			}

			if ( Lang13.Bool( this.paicard ) && ( !( this.client != null ) || this.stat == 2 ) ) {
				this.ejectpai( 0 );
			}
			return;
		}

	}

}