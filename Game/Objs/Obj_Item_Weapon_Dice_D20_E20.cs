// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Dice_D20_E20 : Obj_Item_Weapon_Dice_D20 {

		public bool triggered = false;

		public Obj_Item_Weapon_Dice_D20_E20 ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: dice.dm
		public override bool diceroll( dynamic user = null, bool thrown = false ) {
			bool? cap = null;
			double uncapped = 0;
			dynamic epicenter = null;
			Obj_Machinery_Computer_Bhangmeter bhangmeter = null;

			
			if ( !( user is Mob ) ) {
				return false;
			}

			if ( this.triggered ) {
				return false;
			}
			base.diceroll( (object)(user), thrown );
			GlobalFuncs.message_admins( "" + GlobalFuncs.key_name( user ) + " has " + ( thrown ? "used" : "thrown" ) + " an explosive dice and rolled a " + this.result );
			GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "" + GlobalFuncs.key_name( user ) + " has " + ( thrown ? "used" : "thrown" ) + " an explosive dice and rolled a " + this.result ) ) );

			if ( this.result == 1 ) {
				GlobalFuncs.to_chat( user, "<span class='danger'>Rocks fall, you die.</span>" );
				((Mob)user).gib();
				user.drop_item( this, null, 1 );
			} else {
				this.triggered = true;
				this.visible_message( "<span class='notice'>You hear a quiet click.</span>" );
				Task13.Schedule( 40, (Task13.Closure)(() => {
					cap = false;
					uncapped = this.result;

					if ( this.result > Convert.ToDouble( GlobalVars.MAX_EXPLOSION_RANGE ) && this.result != 20 ) {
						cap = true;
						this.result = Num13.MinInt( ((int)( this.result )), Convert.ToInt32( GlobalVars.MAX_EXPLOSION_RANGE ) );

						if ( this.result > 14 ) {
							Task13.Sleep( 20 );
						}
					} else if ( this.result == 20 ) {
						this.result = 24;
						Task13.Sleep( 40 );
					}
					epicenter = GlobalFuncs.get_turf( this );
					GlobalFuncs.explosion( epicenter, Num13.Floor( this.result * 0.25 ), Num13.Floor( this.result * 0.5 ), Num13.Floor( this.result ), Num13.Floor( this.result * 1.5 ), 1, cap );

					if ( cap == true ) {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.doppler_arrays, typeof(Obj_Machinery_Computer_Bhangmeter) )) {
							bhangmeter = _a;
							

							if ( bhangmeter != null ) {
								bhangmeter.sense_explosion( Convert.ToInt32( epicenter.x ), Convert.ToInt32( epicenter.y ), Convert.ToInt32( epicenter.z ), Num13.Floor( uncapped * 0.25 ), Num13.Floor( uncapped * 0.5 ), Num13.Floor( uncapped ), "???", cap );
							}
						}
					}
					return;
				}));
			}
			return false;
		}

	}

}