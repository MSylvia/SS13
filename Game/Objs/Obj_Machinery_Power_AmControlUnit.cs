// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_AmControlUnit : Obj_Machinery_Power {

		public string icon_mod = "on";
		public string old_icon_mod = "on";
		public ByTable linked_shielding = null;
		public ByTable linked_cores = null;
		public dynamic fueljar = null;
		public int update_shield_icons = 0;
		public double stability = 100;
		public bool exploding = false;
		public bool exploded = false;
		public bool active = false;
		public dynamic fuel_injection = 2;
		public bool shield_icon_delay = false;
		public double reported_core_efficiency = 0;
		public int power_cycle = 0;
		public int power_cycle_delay = 4;
		public double stored_core_stability = 0;
		public bool stored_core_stability_delay = false;
		public dynamic stored_power = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 100;
			this.active_power_usage = 1000;
			this.icon = "icons/obj/machines/new_ame.dmi";
			this.icon_state = "control";
		}

		// Function from file: control.dm
		public Obj_Machinery_Power_AmControlUnit ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.linked_shielding = new ByTable();
			this.linked_cores = new ByTable();
			return;
		}

		// Function from file: control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic newval = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				Task13.User.unset_machine();
				Interface13.Browse( Task13.User, null, "window=AMcontrol" );
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=AMcontrol" );
				Task13.User.unset_machine();
				return null;
			}

			if ( Lang13.Bool( href_list["togglestatus"] ) ) {
				this.toggle_power();
				GlobalFuncs.message_admins( "AME toggled " + ( this.active ? "on" : "off" ) + " by " + Task13.User.real_name + " (" + Task13.User.key + ") at (" + this.x + "," + this.y + "," + this.z + " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)" );
				return 1;
			}

			if ( Lang13.Bool( href_list["refreshicons"] ) ) {
				this.update_shield_icons = 2;
				return 1;
			}

			if ( Lang13.Bool( href_list["ejectjar"] ) ) {
				
				if ( Lang13.Bool( this.fueljar ) ) {
					GlobalFuncs.message_admins( "AME fuel jar ejected by " + Task13.User.real_name + " (" + Task13.User.key + ") at (" + this.x + "," + this.y + "," + this.z + " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)" );
					this.fueljar.loc = this.loc;
					this.fueljar = null;
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["set_strength"] ) ) {
				newval = Interface13.Input( "Enter new injection strength", null, null, null, null, InputType.Num | InputType.Null );

				if ( newval == null ) {
					return null;
				}
				this.fuel_injection = newval;
				this.fuel_injection = Num13.MaxInt( 1, Convert.ToInt32( this.fuel_injection ) );
				GlobalFuncs.message_admins( "AME injection strength set to " + this.fuel_injection + " by " + Task13.User.real_name + " (" + Task13.User.key + ") at (" + this.x + "," + this.y + "," + this.z + " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)" );
				return 1;
			}

			if ( Lang13.Bool( href_list["refreshstability"] ) ) {
				this.check_core_stability();
				return 1;
			}
			this.updateDialog();
			return 1;
		}

		// Function from file: control.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable fueljar_data = null;
			ByTable data = null;
			Nanoui ui2 = null;

			
			if ( !Lang13.Bool( user ) ) {
				return;
			}
			fueljar_data = null;

			if ( Lang13.Bool( this.fueljar ) ) {
				fueljar_data = new ByTable().Set( "fuel", this.fueljar.fuel ).Set( "fuel_max", this.fueljar.fuel_max ).Set( "injecting", this.fuel_injection );
			}
			data = new ByTable()
				.Set( "active", this.active )
				.Set( "linked_shields", this.linked_shielding.len )
				.Set( "linked_cores", this.linked_cores.len )
				.Set( "efficiency", this.reported_core_efficiency )
				.Set( "stability", this.stored_core_stability )
				.Set( "stored_power", this.stored_power )
				.Set( "fueljar", fueljar_data )
				.Set( "siliconUser", user is Mob_Living_Silicon )
			;
			ui2 = GlobalVars.nanomanager.get_open_ui( user, this, ui_key );

			if ( !( ui2 != null ) ) {
				ui2 = new Nanoui( user, this, ui_key, "ame.tmpl", "Antimatter Control Unit", 500, ( Lang13.Bool( data["siliconUser"] ) ? 465 : 390 ) );
				ui2.set_initial_data( data );
				ui2.open();
				ui2.set_auto_update( true );
			} else {
				ui2.push_data( data );
				return;
			}
			return;
		}

		// Function from file: control.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( Map13.GetDistance( this, user ) > 1 || ( this.stat & 3 ) != 0 ) {
				
				if ( !( user is Mob_Living_Silicon_Ai ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=AMcontrol" );
					return null;
				}
			}
			this.ui_interact( user ); return null;
		}

		// Function from file: control.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( this.anchored ) ) {
				this.interact( a );
			}
			return null;
		}

		// Function from file: control.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Obj_Item ) || !Lang13.Bool( b ) ) {
				return null;
			}

			if ( a is Obj_Item_Weapon_Wrench ) {
				
				if ( !Lang13.Bool( this.anchored ) ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 75, 1 );
					((Ent_Static)b).visible_message( "" + b.name + " secures the " + this.name + " to the floor.", "You secure the anchor bolts to the floor.", "You hear a ratchet" );
					this.anchored = 1;
					this.connect_to_network();
				} else if ( ( !( this.linked_shielding.len != 0 ) ?1:0) > 0 ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 75, 1 );
					((Ent_Static)b).visible_message( "" + b.name + " unsecures the " + this.name + ".", "You remove the anchor bolts.", "You hear a ratchet" );
					this.anchored = 0;
					this.disconnect_from_network();
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Once bolted and linked to a shielding unit it the " + this.name + " is unable to be moved!</span>" );
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_AmContainment ) {
				
				if ( Lang13.Bool( this.fueljar ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>There is already a " + this.fueljar + " inside!</span>" );
					return null;
				}
				this.fueljar = a;

				if ( Lang13.Bool( b.client ) ) {
					b.client.screen -= a;
				}
				((Mob)b).u_equip( a, true );
				a.loc = this;
				b.update_icons();
				GlobalFuncs.message_admins( "AME loaded with fuel by " + b.real_name + " (" + b.key + ") at (" + this.x + "," + this.y + "," + this.z + " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)" );
				((Ent_Static)b).visible_message( "" + b.name + " loads an " + a.name + " into the " + this.name + ".", "You load an " + a.name + ".", "You hear a thunk." );
				return null;
			}

			if ( Convert.ToDouble( a.force ) >= 20 ) {
				this.stability -= Convert.ToDouble( a.force / 2 );
				this.check_stability();
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: control.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.active ) {
				this.icon_state = "control_" + this.icon_mod;
			} else {
				this.icon_state = "control";
			}
			return null;
		}

		// Function from file: control.dm
		public override dynamic power_change(  ) {
			base.power_change();

			if ( ( this.stat & 2 ) != 0 && this.active ) {
				this.toggle_power();
			}
			return null;
		}

		// Function from file: control.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Proj.flag != "bullet" ) {
				this.stability -= Convert.ToDouble( Proj.force );
			}
			return 0;
		}

		// Function from file: control.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					this.stability -= 60;
					break;
				case 2:
					this.stability -= 40;
					break;
				case 3:
					this.stability -= 20;
					break;
			}
			this.check_stability();
			return false;
		}

		// Function from file: control.dm
		public override bool blob_act( dynamic severity = null ) {
			Obj_Machinery_AmShielding AMS = null;

			this.stability -= 20;

			if ( Rand13.PercentChance( ((int)( 100 - this.stability )) ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.linked_shielding, typeof(Obj_Machinery_AmShielding) )) {
					AMS = _a;
					
					AMS.blob_act();
				}
				GlobalFuncs.qdel( this );
				return false;
			}
			this.check_stability();
			return false;
		}

		// Function from file: control.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			switch ((int)( severity )) {
				case 1:
					
					if ( this.active ) {
						this.toggle_power();
					}
					this.stability -= Rand13.Int( 15, 30 );
					break;
				case 2:
					
					if ( this.active ) {
						this.toggle_power();
					}
					this.stability -= Rand13.Int( 10, 20 );
					break;
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: control.dm
		public void check_core_stability(  ) {
			Obj_Machinery_AmShielding AMS = null;

			
			if ( this.linked_cores.len <= 0 ) {
				return;
			}
			this.stored_core_stability = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.linked_cores, typeof(Obj_Machinery_AmShielding) )) {
				AMS = _a;
				
				this.stored_core_stability += AMS.stability;
			}
			this.stored_core_stability /= this.linked_cores.len;

			dynamic _b = this.stored_core_stability; // Was a switch-case, sorry for the mess.
			if ( 0<=_b&&_b<=24 ) {
				this.icon_mod = "fuck";
			} else if ( 25<=_b&&_b<=49 ) {
				this.icon_mod = "critical";
			} else if ( 50<=_b&&_b<=Double.PositiveInfinity ) {
				this.icon_mod = "on";
			}

			if ( this.icon_mod != this.old_icon_mod ) {
				this.old_icon_mod = this.icon_mod;
				this.update_icon();
			}
			return;
		}

		// Function from file: control.dm
		public void check_shield_icons(  ) {
			Obj_Machinery_AmShielding AMS = null;
			Obj_Machinery_AmShielding AMS2 = null;

			
			if ( this.shield_icon_delay ) {
				return;
			}
			this.shield_icon_delay = true;

			if ( this.update_shield_icons == 2 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.linked_shielding, typeof(Obj_Machinery_AmShielding) )) {
					AMS = _a;
					

					if ( AMS.processing ) {
						AMS.shutdown_core();
					}
					AMS.control_unit = null;
					Task13.Schedule( 10, (Task13.Closure)(() => {
						AMS.controllerscan();
						return;
					}));
				}
				this.linked_shielding = new ByTable();
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( this.linked_shielding, typeof(Obj_Machinery_AmShielding) )) {
					AMS2 = _b;
					
					AMS2.update_icon();
				}
			}
			Task13.Sleep( 20 );
			this.shield_icon_delay = false;
			return;
		}

		// Function from file: control.dm
		public void toggle_power(  ) {
			Obj_Machinery_AmShielding AMS = null;

			this.active = !this.active;

			if ( this.active ) {
				this.use_power = 2;
				this.visible_message( "The " + this.name + " starts up." );
			} else {
				this.use_power = 1;
				this.visible_message( "The " + this.name + " shuts down." );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.linked_cores, typeof(Obj_Machinery_AmShielding) )) {
				AMS = _a;
				
				AMS.update_icon();
			}
			this.update_icon();
			return;
		}

		// Function from file: control.dm
		public void check_stability(  ) {
			
			if ( this.stability <= 0 ) {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: control.dm
		public bool remove_shielding( Obj_Machinery_AmShielding AMS = null ) {
			
			if ( !( AMS is Obj_Machinery_AmShielding ) ) {
				return false;
			}
			this.linked_shielding.Remove( AMS );
			this.update_shield_icons = 2;

			if ( this.active ) {
				this.toggle_power();
			}
			return true;
		}

		// Function from file: control.dm
		public bool add_shielding( Obj_Machinery_AmShielding AMS = null, bool? AMS_linking = null ) {
			AMS_linking = AMS_linking ?? false;

			
			if ( !( AMS is Obj_Machinery_AmShielding ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.anchored ) ) {
				return false;
			}

			if ( !( AMS_linking == true ) && !AMS.link_control( this ) ) {
				return false;
			}
			this.linked_shielding.Add( AMS );
			this.update_shield_icons = 1;
			return true;
		}

		// Function from file: control.dm
		public bool produce_power(  ) {
			double core_power = 0;
			int core_damage = 0;
			dynamic fuel = null;
			Obj_Machinery_AmShielding AMS = null;

			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/bang.ogg", 25, 1 );
			core_power = this.reported_core_efficiency;

			if ( core_power <= 0 ) {
				return false;
			}
			core_damage = 0;
			fuel = ((Obj_Item_Weapon_AmContainment)this.fueljar).usefuel( this.fuel_injection );
			this.stored_power = fuel / core_power * fuel * 20000;

			if ( Convert.ToDouble( fuel ) > core_power * 2 ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					core_damage = 1;
				}

				if ( Convert.ToDouble( fuel - core_power ) > 5 ) {
					core_damage = 5;
				}

				if ( Convert.ToDouble( fuel - core_power ) > 10 ) {
					core_damage = 20;
				}

				if ( core_damage == 0 ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.linked_cores, typeof(Obj_Machinery_AmShielding) )) {
					AMS = _a;
					
					AMS.stability -= core_damage;
					AMS.check_stability( true );
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/bang.ogg", 50, 1 );
			}
			return false;
		}

		// Function from file: control.dm
		public override dynamic process(  ) {
			
			if ( this.exploding && !this.exploded ) {
				GlobalFuncs.message_admins( "AME explosion at (" + this.x + "," + this.y + "," + this.z + " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>) - Last touched by " + this.fingerprintslast );
				this.exploded = true;
				GlobalFuncs.explosion( GlobalFuncs.get_turf( this ), 8, 10, 12, 15 );

				if ( this != null ) {
					GlobalFuncs.qdel( this );
				}
			}

			if ( this.update_shield_icons != 0 && !this.shield_icon_delay ) {
				this.check_shield_icons();
				this.update_shield_icons = 0;
			}

			if ( ( this.stat & 3 ) != 0 || !this.active ) {
				return null;
			}

			if ( !Lang13.Bool( this.fueljar ) ) {
				this.toggle_power();
				return null;
			}
			this.check_core_stability();
			this.add_avail( this.stored_power );
			this.power_cycle++;

			if ( this.power_cycle >= this.power_cycle_delay ) {
				this.produce_power();
				this.power_cycle = 0;
			}
			return null;
		}

		// Function from file: control.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Machinery_AmShielding AMS = null;
			Obj_Machinery_AmShielding AMS2 = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.linked_shielding, typeof(Obj_Machinery_AmShielding) )) {
				AMS = _a;
				
				AMS.control_unit = null;
				GlobalFuncs.qdel( AMS );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.linked_cores, typeof(Obj_Machinery_AmShielding) )) {
				AMS2 = _b;
				
				AMS2.control_unit = null;
				GlobalFuncs.qdel( AMS2 );
			}
			GlobalFuncs.qdel( this.fueljar );
			this.fueljar = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}