// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_AmControlUnit : Obj_Machinery_Power {

		public ByTable linked_shielding = null;
		public ByTable linked_cores = null;
		public dynamic fueljar = null;
		public int update_shield_icons = 0;
		public double stability = 100;
		public bool exploding = false;
		public bool active = false;
		public int fuel_injection = 2;
		public bool shield_icon_delay = false;
		public double reported_core_efficiency = 0;
		public int power_cycle = 0;
		public int power_cycle_delay = 4;
		public double stored_core_stability = 0;
		public bool stored_core_stability_delay = false;
		public double stored_power = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 100;
			this.active_power_usage = 1000;
			this.icon = "icons/obj/machines/antimatter.dmi";
			this.icon_state = "control";
		}

		// Function from file: control.dm
		public Obj_Machinery_Power_AmControlUnit ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.linked_shielding = new ByTable();
			this.linked_cores = new ByTable();
			return;
		}

		// Function from file: tgstation.dme
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=AMcontrol" );
				Task13.User.unset_machine();
				return null;
			}

			if ( Lang13.Bool( href_list["togglestatus"] ) ) {
				this.toggle_power();
			}

			if ( Lang13.Bool( href_list["refreshicons"] ) ) {
				this.update_shield_icons = 1;
			}

			if ( Lang13.Bool( href_list["ejectjar"] ) ) {
				
				if ( Lang13.Bool( this.fueljar ) ) {
					this.fueljar.loc = this.loc;
					this.fueljar = null;
				}
			}

			if ( Lang13.Bool( href_list["strengthup"] ) ) {
				this.fuel_injection++;
			}

			if ( Lang13.Bool( href_list["strengthdown"] ) ) {
				this.fuel_injection--;

				if ( this.fuel_injection < 0 ) {
					this.fuel_injection = 0;
				}
			}

			if ( Lang13.Bool( href_list["refreshstability"] ) ) {
				this.check_core_stability();
			}
			this.updateDialog();
			return null;
		}

		// Function from file: control.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			
			if ( Map13.GetDistance( this, user ) > 1 || ( this.stat & 3 ) != 0 ) {
				
				if ( !( user is Mob_Living_Silicon_Ai ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=AMcontrol" );
					return null;
				}
			}
			((Mob)user).set_machine( this );
			dat = "";
			dat += "AntiMatter Control Panel<BR>";
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";close=1'>Close</A><BR>" ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A><BR>" ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";refreshicons=1'>Force Shielding Update</A><BR><BR>" ).ToString();
			dat += "Status: " + ( this.active ? "Injecting" : "Standby" ) + " <BR>";
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";togglestatus=1'>Toggle Status</A><BR>" ).ToString();
			dat += "Stability: " + this.stability + "%<BR>";
			dat += "Reactor parts: " + this.linked_shielding.len + "<BR>";
			dat += "Cores: " + this.linked_cores.len + "<BR><BR>";
			dat += "-Current Efficiency: " + this.reported_core_efficiency + "<BR>";
			dat += new Txt( "-Average Stability: " ).item( this.stored_core_stability ).str( " <A href='?src=" ).Ref( this ).str( ";refreshstability=1'>(update)</A><BR>" ).ToString();
			dat += "Last Produced: " + this.stored_power + "<BR>";
			dat += "Fuel: ";

			if ( !Lang13.Bool( this.fueljar ) ) {
				dat += "<BR>No fuel receptacle detected.";
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ejectjar=1'>Eject</A><BR>" ).ToString();
				dat += "- " + this.fueljar.fuel + "/" + this.fueljar.fuel_max + " Units<BR>";
				dat += "- Injecting: " + this.fuel_injection + " units<BR>";
				dat += new Txt( "- <A href='?src=" ).Ref( this ).str( ";strengthdown=1'>--</A>|<A href='?src=" ).Ref( this ).str( ";strengthup=1'>++</A><BR><BR>" ).ToString();
			}
			Interface13.Browse( user, dat, "window=AMcontrol;size=420x500" );
			GlobalFuncs.onclose( user, "AMcontrol" );
			return null;
		}

		// Function from file: control.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( this.anchored ) ) {
				this.interact( a );
			}
			return null;
		}

		// Function from file: control.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Wrench ) {
				
				if ( !Lang13.Bool( this.anchored ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
					((Ent_Static)user).visible_message( "" + user.name + " secures the " + this.name + " to the floor.", "<span class='notice'>You secure the anchor bolts to the floor.</span>", "<span class='italics'>You hear a ratchet.</span>" );
					this.anchored = 1;
					this.connect_to_network();
				} else if ( ( !( this.linked_shielding.len != 0 ) ?1:0) > 0 ) {
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 75, 1 );
					((Ent_Static)user).visible_message( "" + user.name + " unsecures the " + this.name + ".", "Y<span class='notice'>You remove the anchor bolts.</span>", "<span class='italics'>You hear a ratchet.</span>" );
					this.anchored = 0;
					this.disconnect_from_network();
				} else {
					user.WriteMsg( "<span class='warning'>Once bolted and linked to a shielding unit it the " + this.name + " is unable to be moved!</span>" );
				}
				return null;
			}

			if ( A is Obj_Item_Weapon_AmContainment ) {
				
				if ( Lang13.Bool( this.fueljar ) ) {
					user.WriteMsg( "<span class='warning'>There is already a " + this.fueljar + " inside!</span>" );
					return null;
				}
				this.fueljar = A;
				A.loc = this;

				if ( Lang13.Bool( user.client ) ) {
					user.client.screen -= A;
				}
				((Mob)user).unEquip( A );
				user.update_icons();
				((Ent_Static)user).visible_message( "" + user.name + " loads an " + A.name + " into the " + this.name + ".", "<span class='notice'>You load an " + A.name + ".</span>", "<span class='italics'>You hear a thunk.</span>" );
				return null;
			}

			if ( Convert.ToDouble( A.force ) >= 20 ) {
				this.stability -= Convert.ToDouble( A.force / 2 );
				this.check_stability();
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: control.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( this.active ) {
				this.icon_state = "control_on";
			} else {
				this.icon_state = "control";
			}
			return false;
		}

		// Function from file: control.dm
		public override void power_change(  ) {
			base.power_change();

			if ( ( this.stat & 2 ) != 0 && this.active ) {
				this.toggle_power();
			}
			return;
		}

		// Function from file: control.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( P.flag != "bullet" ) {
				this.stability -= Convert.ToDouble( P.force );
			}
			return 0;
		}

		// Function from file: control.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			this.stability -= 80 - ( severity ??0) * 20;
			this.check_stability();
			return false;
		}

		// Function from file: control.dm
		public override bool blob_act( dynamic severity = null ) {
			Obj_Machinery_AmShielding AMS = null;

			this.stability -= 20;

			if ( Rand13.PercentChance( ((int)( 100 - this.stability )) ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.linked_shielding, typeof(Obj_Machinery_AmShielding) )) {
					AMS = _a;
					
					AMS.blob_act();
				}
				GlobalFuncs.qdel( this );
				return false;
			}
			this.check_stability();
			return false;
		}

		// Function from file: control.dm
		public override double emp_act( int severity = 0 ) {
			
			switch ((int)( severity )) {
				case 1:
					
					if ( this.active ) {
						this.toggle_power();
					}
					this.stability -= Rand13.Int( 15, 30 );
					break;
				case 2:
					
					if ( this.active ) {
						this.toggle_power();
					}
					this.stability -= Rand13.Int( 10, 20 );
					break;
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: control.dm
		public void check_core_stability(  ) {
			Obj_Machinery_AmShielding AMS = null;

			
			if ( this.stored_core_stability_delay || this.linked_cores.len <= 0 ) {
				return;
			}
			this.stored_core_stability_delay = true;
			this.stored_core_stability = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.linked_cores, typeof(Obj_Machinery_AmShielding) )) {
				AMS = _a;
				
				this.stored_core_stability += AMS.stability;
			}
			this.stored_core_stability /= this.linked_cores.len;
			Task13.Schedule( 40, (Task13.Closure)(() => {
				this.stored_core_stability_delay = false;
				return;
			}));
			return;
		}

		// Function from file: control.dm
		public void check_shield_icons(  ) {
			Obj_Machinery_AmShielding AMS = null;
			Obj_Machinery_AmShielding AMS2 = null;

			
			if ( this.shield_icon_delay ) {
				return;
			}
			this.shield_icon_delay = true;

			if ( this.update_shield_icons == 2 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.linked_shielding, typeof(Obj_Machinery_AmShielding) )) {
					AMS = _a;
					

					if ( AMS.processing ) {
						AMS.shutdown_core();
					}
					AMS.control_unit = null;
					Task13.Schedule( 10, (Task13.Closure)(() => {
						AMS.controllerscan();
						return;
					}));
				}
				this.linked_shielding = new ByTable();
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( this.linked_shielding, typeof(Obj_Machinery_AmShielding) )) {
					AMS2 = _b;
					
					AMS2.update_icon();
				}
			}
			Task13.Schedule( 20, (Task13.Closure)(() => {
				this.shield_icon_delay = false;
				return;
			}));
			return;
		}

		// Function from file: control.dm
		public void toggle_power(  ) {
			this.active = !this.active;

			if ( this.active ) {
				this.use_power = 2;
				this.visible_message( "The " + this.name + " starts up." );
			} else {
				this.use_power = 1;
				this.visible_message( "The " + this.name + " shuts down." );
			}
			this.update_icon();
			return;
		}

		// Function from file: control.dm
		public void check_stability(  ) {
			
			if ( this.stability <= 0 ) {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: control.dm
		public bool remove_shielding( Obj_Machinery_AmShielding AMS = null ) {
			
			if ( !( AMS is Obj_Machinery_AmShielding ) ) {
				return false;
			}
			this.linked_shielding.Remove( AMS );
			this.update_shield_icons = 2;

			if ( this.active ) {
				this.toggle_power();
			}
			return true;
		}

		// Function from file: control.dm
		public bool add_shielding( Obj_Machinery_AmShielding AMS = null, bool? AMS_linking = null ) {
			AMS_linking = AMS_linking ?? false;

			
			if ( !( AMS is Obj_Machinery_AmShielding ) ) {
				return false;
			}

			if ( !Lang13.Bool( this.anchored ) ) {
				return false;
			}

			if ( !( AMS_linking == true ) && !AMS.link_control( this ) ) {
				return false;
			}
			this.linked_shielding.Add( AMS );
			this.update_shield_icons = 1;
			return true;
		}

		// Function from file: control.dm
		public bool produce_power(  ) {
			double core_power = 0;
			int core_damage = 0;
			double fuel = 0;
			Obj_Machinery_AmShielding AMS = null;

			GlobalFuncs.playsound( this.loc, "sound/effects/bang.ogg", 25, 1 );
			core_power = this.reported_core_efficiency;

			if ( core_power <= 0 ) {
				return false;
			}
			core_damage = 0;
			fuel = ((Obj_Item_Weapon_AmContainment)this.fueljar).usefuel( this.fuel_injection );
			this.stored_power = fuel / core_power * fuel * 200000;

			if ( fuel > core_power * 2 ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					core_damage = 1;
				}

				if ( fuel - core_power > 5 ) {
					core_damage = 5;
				}

				if ( fuel - core_power > 10 ) {
					core_damage = 20;
				}

				if ( core_damage == 0 ) {
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.linked_cores, typeof(Obj_Machinery_AmShielding) )) {
					AMS = _a;
					
					AMS.stability -= core_damage;
					AMS.check_stability( true );
				}
				GlobalFuncs.playsound( this.loc, "sound/effects/bang.ogg", 50, 1 );
			}
			return false;
		}

		// Function from file: control.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( this.exploding ) {
				GlobalFuncs.explosion( GlobalFuncs.get_turf( this ), 8, 12, 18, 12 );

				if ( this != null ) {
					GlobalFuncs.qdel( this );
				}
			}

			if ( this.update_shield_icons != 0 && !this.shield_icon_delay ) {
				this.check_shield_icons();
				this.update_shield_icons = 0;
			}

			if ( ( this.stat & 3 ) != 0 || !this.active ) {
				return null;
			}

			if ( !Lang13.Bool( this.fueljar ) ) {
				this.toggle_power();
				return null;
			}
			this.add_avail( this.stored_power );
			this.power_cycle++;

			if ( this.power_cycle >= this.power_cycle_delay ) {
				this.produce_power();
				this.power_cycle = 0;
			}
			return null;
		}

		// Function from file: control.dm
		public override dynamic Destroy(  ) {
			Obj_Machinery_AmShielding AMS = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.linked_shielding, typeof(Obj_Machinery_AmShielding) )) {
				AMS = _a;
				
				GlobalFuncs.qdel( AMS );
			}
			return base.Destroy();
		}

	}

}