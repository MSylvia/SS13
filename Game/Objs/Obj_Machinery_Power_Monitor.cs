// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Monitor : Obj_Machinery_Power {

		public Type circuit = typeof(Obj_Item_Weapon_Circuitboard_Powermonitor);
		public HtmlInterface_Nanotrasen v_interface = null;
		public int next_process = 0;
		public ByTable demand_hist = new ByTable( 0 );
		public ByTable supply_hist = new ByTable( 0 );
		public ByTable load_hist = new ByTable( 0 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.use_auto_lights = true;
			this.light_range_on = 3;
			this.light_power_on = 1;
			this.light_color = "#E1E17D";
			this.idle_power_usage = 300;
			this.active_power_usage = 300;
			this.icon = "icons/obj/computer.dmi";
			this.icon_state = "power";
		}

		// Function from file: monitor.dm
		public Obj_Machinery_Power_Monitor ( dynamic loc = null ) : base( (object)(loc) ) {
			double i = 0;
			string head = null;
			dynamic attached = null;
			Ent_Static T = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			foreach (dynamic _a in Lang13.IterateRange( 1, 15 )) {
				i = _a;
				
				this.demand_hist.Add( new ByTable(new object [] { 0 }) );
				this.supply_hist.Add( new ByTable(new object [] { 0 }) );
				this.load_hist.Add( new ByTable(new object [] { 0 }) );
			}
			head = @"
		<style type=""text/css"">
			span.area
			{
				display: block;
				white-space: nowrap;
				text-overflow: ellipsis;
				overflow: hidden;
				width: auto;
			}
		</style>
		<script src=""Chart.js""></script>
		<script>var chartSize = " + 15 + ";</script>\n		<script src=\"powerChart.js\"></script>\n	";
			this.v_interface = new HtmlInterface_Nanotrasen( this, "Power Monitoring", 420, 600, head );
			attached = null;
			T = this.loc;

			if ( T is Tile ) {
				attached = Lang13.FindIn( typeof(Obj_Structure_Cable), T );
			}

			if ( Lang13.Bool( attached ) ) {
				this.powernet = attached.get_powernet();
			}
			GlobalVars.html_machines.Add( this );
			this.init_ui();
			return;
		}

		// Function from file: monitor.dm
		public override dynamic process(  ) {
			dynamic tbl = null;
			ByTable S = null;
			ByTable chg = null;
			Obj_Machinery_Power_Terminal term = null;
			Ent_Static A = null;
			string _class = null;

			
			if ( ( this.stat & 3 ) != 0 || !Lang13.Bool( this.powernet ) ) {
				this.v_interface.executeJavaScript( "setDisabled()" );
				return null;
			} else {
				this.v_interface.executeJavaScript( "setEnabled()" );
			}
			this.demand_hist.Add( this.load() );
			this.supply_hist.Add( this.avail() );
			this.load_hist.Add( this.powernet.viewload );

			if ( this.demand_hist.len > 15 ) {
				this.demand_hist.Cut( 1, 2 );
				this.supply_hist.Cut( 1, 2 );
				this.load_hist.Cut( 1, 2 );
			}
			this.v_interface.callJavaScript( "pushPowerData", new ByTable(new object [] { this.load(), this.avail(), this.powernet.viewload }) );

			if ( ( !( this.next_process != 0 ) || this.v_interface.isUsed() == true ) && Game13.time >= this.next_process ) {
				this.next_process = Game13.time + 30;
				this.v_interface.updateContent( "totPower", "" + this.avail() + " W" );
				this.v_interface.updateContent( "totLoad", "" + String13.NumberToString( this.powernet.viewload, 10 ) + " W" );
				this.v_interface.updateContent( "totDemand", "" + this.load() + " W" );
				tbl = new ByTable();
				S = new ByTable(new object [] { " <span class='bad'>Off", "<span class='bad'>AOff", "  <span class='good'>On", " <span class='good'>AOn" });
				chg = new ByTable(new object [] { " <span class='bad'>N", "<span class='average'>C", "<span class='good'>F" });

				foreach (dynamic _b in Lang13.Enumerate( this.powernet.nodes, typeof(Obj_Machinery_Power_Terminal) )) {
					term = _b;
					

					if ( term.master is Obj_Machinery_Power_Apc ) {
						A = term.master;
						tbl += "<tr>";
						tbl += "<td><span class=\"area\">" + new Txt().The( ((dynamic)A).areaMaster ).item().ToString() + "</span></td>";
						tbl += "<td>" + S[((dynamic)A).equipment + 1] + "</span></td><td>" + S[((dynamic)A).lighting + 1] + "</span></td><td>" + S[((dynamic)A).environ + 1] + "</span></td>";
						tbl += "<td align=\"right\">" + ((dynamic)A).lastused_total + "</td>";

						if ( Lang13.Bool( ((dynamic)A).cell ) ) {
							_class = "good";

							dynamic _a = ((Obj_Item_Weapon_Cell)((dynamic)A).cell).percent(); // Was a switch-case, sorry for the mess.
							if ( 49<=_a&&_a<=15 ) {
								_class = "average";
							} else if ( 15<=_a&&_a<=Double.NegativeInfinity ) {
								_class = "bad";
							}
							tbl += "<td align='right' class='" + _class + "'>" + Num13.Floor( ((Obj_Item_Weapon_Cell)((dynamic)A).cell).percent() ) + "%</td><td align='right'>" + chg[((dynamic)A).charging + 1] + "</span>";
						} else {
							tbl += "<td colspan='2' align='right'>N/C</td>";
						}
						tbl += "</tr>";
					}
				}
				tbl = GlobalFuncs.list2text( tbl );
				this.v_interface.updateContent( "APCTable", tbl );
			}
			return null;
		}

		// Function from file: monitor.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Structure_Computerframe A = null;
			dynamic M = null;
			Obj C = null;

			
			if ( a is Obj_Item_Weapon_Screwdriver && this.circuit != null ) {
				GlobalFuncs.playsound( this.loc, "sound/items/Screwdriver.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 20 ) ) {
					A = new Obj_Structure_Computerframe( this.loc );
					M = Lang13.Call( this.circuit, A );
					A.circuit = M;
					A.anchored = 1;

					foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
						C = _a;
						
						C.loc = this.loc;
					}

					if ( ( this.stat & 1 ) != 0 ) {
						b.show_message( "<span class=\"info\">The broken glass falls out.</span>" );
						new Obj_Item_Weapon_Shard( this.loc );
						A.state = 3;
						A.icon_state = "3";
					} else {
						b.show_message( "<span class=\"info\">You disconnect the monitor.</span>" );
						A.state = 4;
						A.icon_state = "4";
					}
					GlobalFuncs.qdel( this );
				}
			} else {
				this.attack_hand( b );
			}
			return null;
		}

		// Function from file: monitor.dm
		public override dynamic power_change(  ) {
			base.power_change();

			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "broken";
			} else if ( ( this.stat & 2 ) != 0 ) {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.icon_state = "c_unpowered";
					return;
				}));
			} else {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			}
			return null;
		}

		// Function from file: monitor.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			int delay = 0;
			double i = 0;

			delay = 0;
			delay += GlobalFuncs.send_asset( user.client, "Chart.js" ) ?1:0;
			delay += GlobalFuncs.send_asset( user.client, "powerChart.js" ) ?1:0;
			Task13.Schedule( delay, (Task13.Closure)(() => {
				this.v_interface.show( user );
				this.v_interface.executeJavaScript( "makeChart()", user );

				foreach (dynamic _a in Lang13.IterateRange( 1, 15 )) {
					i = _a;
					
					this.v_interface.callJavaScript( "pushPowerData", new ByTable(new object [] { this.demand_hist[i], this.supply_hist[i], this.load_hist[i] }), user );
				}
				return;
			}));
			return null;
		}

		// Function from file: monitor.dm
		public override bool? hiIsValidClient( dynamic hclient = null, dynamic hi = null ) {
			return ((Mob)hclient.client.mob).html_mob_check( this.type );
		}

		// Function from file: monitor.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				this.v_interface.hide( a );
				return _default;
			}
			this.interact( a );
			return _default;
		}

		// Function from file: monitor.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			GlobalVars.html_machines.Remove( this );
			GlobalFuncs.qdel( this.v_interface );
			this.v_interface = null;
			return null;
		}

		// Function from file: monitor.dm
		public override dynamic attack_ai( dynamic user = null ) {
			dynamic _default = null;

			_default = this.attack_hand( user );
			return _default;
		}

		// Function from file: monitor.dm
		public void init_ui(  ) {
			string dat = null;

			dat = @"
		<div id=""operatable"">
			<canvas id=""powerChart"" style=""width: 261px;""><!--261px is as much as possible.-->

			</canvas>
			<div id=""legend"" style=""float: right;""></div>
			<table class=""table"" width=""100%; table-layout: fixed;"">
				<colgroup><col style=""width: 180px;""/><col/></colgroup>
				<tr><td><strong>Total power:</strong></td><td id=""totPower"">X W</td></tr>
				<tr><td><strong>Total load:</strong></td><td id=""totLoad"">X W</td></tr>
				<tr><td><strong>Total demand:</strong></td><td id=""totDemand"">X W</td></tr>
			</table>

		<table class=""table"" width=""100%; table-layout: fixed;"">
			<colgroup><col/><col style=""width: 60px;""/><col style=""width: 60px;""/><col style=""width: 60px;""/><col style=""width: 80px;""/><col style=""width: 80px;""/><col style=""width: 20px;""/></colgroup>
			<thead><tr><th>Area</th><th>Eqp.</th><th>Lgt.</th><th>Env.</th><th align=""right"">Load</th><th align=""right"">Cell</th><th></th></tr></thead>
			<tbody id=""APCTable"">

			</tbody>
		</table>
		</div>
		<div id=""n_operatable"" style=""display: none;"">
			<span class=""error"">No connection.</span>
		</div>
	";
			this.v_interface.updateContent( "content", dat );
			return;
		}

	}

}