// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Tool_Drill : Obj_Item_MechaParts_MechaEquipment_Tool {

		public bool dig_walls = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.equip_cooldown = 45;
			this.energy_drain = 10;
			this.force = 15;
			this.icon_state = "mecha_drill";
		}

		public Obj_Item_MechaParts_MechaEquipment_Tool_Drill ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( M is Obj_Mecha_Working || M is Obj_Mecha_Combat ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: tools.dm
		public override bool action( dynamic target = null ) {
			dynamic target_obj = null;
			Ent_Static C = null;
			Ent_Static T = null;
			double? delay = null;
			Tile_Unsimulated_Mineral M = null;
			Obj_Mecha R = null;
			int count = 0;
			Obj_Item_Weapon_Ore ore = null;
			int count2 = 0;
			dynamic ore_box = null;
			dynamic hydraulic_clamp = null;
			Obj_Mecha R2 = null;
			Tile_Unsimulated_Floor_Asteroid M2 = null;
			Obj_Item_Weapon_Ore_Glass sandore = null;
			dynamic M3 = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}

			if ( target is Obj ) {
				target_obj = target;

				if ( !( target_obj.vars.Find( "unacidable" ) != 0 ) || Lang13.Bool( target_obj.unacidable ) ) {
					return false;
				}
			}
			this.set_ready_state( false );
			this.chassis.visible_message( "<font color='red'><b>" + this.chassis + " starts to drill " + target + "!</b></font>", "You hear a drill." );
			this.occupant_message( "<font color='red'><b>You start to drill " + target + "!</b></font>" );
			C = this.chassis.loc;
			T = target.loc;

			if ( target is Tile_Simulated_Wall_Invulnerable ) {
				this.occupant_message( "<font color='red'>" + target + " is too durable to drill through.</font>" );
			} else if ( target is Tile_Simulated_Wall ) {
				
				if ( this.dig_walls ) {
					delay = ( target is Tile_Simulated_Wall_RWall ? 10 : 2 );

					if ( this.do_after_cooldown( target, delay ) && C == this.chassis.loc && this == this.chassis.selected ) {
						this.log_message( "Drilled through " + target );
						this.occupant_message( new Txt( "<font color='red'><b>Your powerful drill screeches as it tears through the last of " ).the( target ).item().str( ", leaving nothing but a girder!</b></font>" ).ToString() );
						this.chassis.visible_message( new Txt( "<font color='red'><b>" ).item( this.chassis ).str( " drills through " ).the( target ).item().str( "!</b></font>" ).ToString(), "You hear a drill tearing through plating." );
						((Ent_Static)target).mech_drill_act( 3 );
					}
				} else if ( this.do_after_cooldown( target, 1 ) && C == this.chassis.loc && this == this.chassis.selected ) {
					this.occupant_message( "<font color='red'>" + target + " is too durable to drill through.</font>" );
				}
			} else if ( target is Obj_Structure_Girder ) {
				
				if ( this.do_after_cooldown( target ) && C == this.chassis.loc && this == this.chassis.selected ) {
					this.log_message( "Drilled through " + target );
					this.occupant_message( new Txt( "<font color='red'><b>Your drill destroys " ).the( target ).item().str( "!</b></font>" ).ToString() );
					this.chassis.visible_message( new Txt( "<font color='red'><b>" ).item( this.chassis ).str( " destroys " ).the( target ).item().str( "!</b></font>" ).ToString(), "You hear a drill breaking something." );
					((Ent_Static)target).mech_drill_act( 2 );
				}
			} else if ( target is Tile_Unsimulated_Mineral ) {
				
				if ( this.do_after_cooldown( target, 0.3333333432674408 ) && C == this.chassis.loc && this == this.chassis.selected ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( 1, this.chassis ), typeof(Tile_Unsimulated_Mineral) )) {
						M = _a;
						

						if ( ( Map13.GetDistance( this.chassis, M ) & this.chassis.dir ) != 0 ) {
							M.GetDrilled();
						}
					}
					this.log_message( "Drilled through " + target );

					if ( this.chassis is Obj_Mecha_Working_Ripley ) {
						R = this.chassis;

						if ( Lang13.Bool( ((dynamic)R).hydraulic_clamp ) && Lang13.Bool( ((dynamic)R).ore_box ) ) {
							count = 0;

							foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( 1, this.chassis ), typeof(Obj_Item_Weapon_Ore) )) {
								ore = _b;
								

								if ( ( Map13.GetDistance( this.chassis, ore ) & this.chassis.dir ) != 0 && Lang13.Bool( ore.material ) ) {
									((Materials)((dynamic)R).ore_box.materials).addAmount( ore.material, 1 );
									GlobalFuncs.returnToPool( ore );
									count++;
								}
							}

							if ( count != 0 ) {
								this.occupant_message( "<font color='blue'>" + count + " ore successfully loaded into cargo compartment.</font>" );
							}
						}
					}
				}
			} else if ( target is Tile_Unsimulated_Floor_Asteroid ) {
				
				if ( this.do_after_cooldown( target, 0.5 ) && C == this.chassis.loc && this == this.chassis.selected ) {
					count2 = 0;
					ore_box = null;
					hydraulic_clamp = null;

					if ( this.chassis is Obj_Mecha_Working_Ripley ) {
						R2 = this.chassis;
						ore_box = ((dynamic)R2).ore_box;
						hydraulic_clamp = ((dynamic)R2).hydraulic_clamp;
					}

					foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInRange( 1, this.chassis ), typeof(Tile_Unsimulated_Floor_Asteroid) )) {
						M2 = _d;
						

						if ( ( Map13.GetDistance( this.chassis, M2 ) & this.chassis.dir ) != 0 || this is Obj_Item_MechaParts_MechaEquipment_Tool_Drill_Diamonddrill ) {
							M2.gets_dug();

							if ( Lang13.Bool( hydraulic_clamp ) && Lang13.Bool( ore_box ) ) {
								
								foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.get_turf( M2 ), typeof(Obj_Item_Weapon_Ore_Glass) )) {
									sandore = _c;
									
									((Materials)ore_box.materials).addAmount( sandore.material, 1 );
									GlobalFuncs.returnToPool( sandore );
									count2++;
								}
							}
						}
					}
					this.log_message( "Drilled through " + target );

					if ( count2 != 0 ) {
						this.occupant_message( "<font color='blue'>" + count2 + " sand successfully loaded into cargo compartment.</font>" );
					}
				}
			} else if ( this.do_after_cooldown( target, 1 ) && C == this.chassis.loc && this == this.chassis.selected && target.loc == T ) {
				
				if ( target is Mob_Living ) {
					M3 = target;
					M3.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='orange'> Mech Drilled by " + this.chassis.occupant.name + " (" + ((dynamic)this.chassis.occupant).ckey + ") with " + this.name + "</font>" );
					((dynamic)this.chassis.occupant).attack_log += "[" + GlobalFuncs.time_stamp() + "]<font color='red'> Mech Drilled " + M3.name + " (" + M3.ckey + ") with " + this.name + "</font>";
					GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + this.chassis.occupant.name + " (" + ((dynamic)this.chassis.occupant).ckey + ") mech drilled " + M3.name + " (" + M3.ckey + ") with " + this.name + "</font>" ) ) );

					if ( !( this.chassis.occupant is Mob_Living_Carbon ) ) {
						M3.LAssailant = null;
					} else {
						M3.LAssailant = this.chassis.occupant;
					}
				}
				this.log_message( "Drilled through " + target );
				this.occupant_message( new Txt( "<font color='red'><b>You drill into " ).the( target ).item().str( ".</b></font>" ).ToString() );
				this.chassis.visible_message( new Txt( "<font color='red'><b>" ).item( this.chassis ).str( " drills into " ).the( target ).item().str( "!</b></font>" ).ToString(), "You hear a drill breaking something." );
				((Ent_Static)target).mech_drill_act( 2 );
			}
			this.chassis.use_power( this.energy_drain );
			return true;
		}

	}

}