// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Fire : Obj {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.blend_mode = 2;
			this.anchored = 1;
			this.light_color = "#FAA019";
			this.icon = "icons/effects/fire.dmi";
			this.icon_state = "1";
			this.layer = 2.1;
		}

		// Function from file: Fire.dm
		public Obj_Fire ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.dir = Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) );
			this.set_light( 3 );
			GlobalVars.air_master.active_hotspots.Add( this );
			return;
		}

		// Function from file: Fire.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.air_master.active_hotspots.Remove( this );
			this.set_light( 0 );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: Fire.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			dynamic S = null;
			GasMixture air_contents = null;
			dynamic fuel = null;
			double firelevel = 0;
			Mob_Living_Carbon_Human M = null;
			Ent_Static A = null;
			dynamic direction = null;
			Tile enemy_tile = null;
			GasMixture acs = null;
			dynamic W = null;
			GasMixture flow = null;

			
			if ( this.timestopped ) {
				return 0;
			}
			_default = 1;
			S = GlobalFuncs.get_turf( this.loc );

			if ( !( S is Tile_Simulated ) ) {
				this.Extinguish();
				return _default;
			}

			if ( S.zone == null ) {
				this.Extinguish();
				return _default;
			}
			air_contents = ((Ent_Static)S).return_air();
			fuel = Lang13.FindIn( typeof(Gas_VolatileFuel), air_contents.trace_gases );

			if ( Convert.ToDouble( air_contents.oxygen ) < 0.1 ) {
				air_contents.oxygen = 0;
			}

			if ( Convert.ToDouble( air_contents.toxins ) < 0.1 ) {
				air_contents.toxins = 0;
			}

			if ( Lang13.Bool( fuel ) ) {
				
				if ( ( fuel.moles ??0) < 0.1 ) {
					air_contents.trace_gases.Remove( fuel );
				}
			}

			if ( !air_contents.check_recombustability( S ) ) {
				this.Extinguish();
				return _default;
			}
			firelevel = air_contents.calculate_firelevel( S );

			if ( firelevel > 6 ) {
				this.icon_state = "3";
				this.set_light( 7, 3 );
			} else if ( firelevel > 2.5 ) {
				this.icon_state = "2";
				this.set_light( 5, 2 );
			} else {
				this.icon_state = "1";
				this.set_light( 3, 1 );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Mob_Living_Carbon_Human) )) {
				M = _a;
				
				M.FireBurn( firelevel, air_contents.temperature, air_contents.return_pressure() );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Ent_Static) )) {
				A = _b;
				
				A.fire_act( air_contents, air_contents.temperature, air_contents.return_volume() );
			}
			((Ent_Static)S).fire_act( air_contents, air_contents.temperature, air_contents.return_volume() );

			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _c;
				

				if ( ( S.open_directions & Convert.ToInt32( direction ) ) != 0 ) {
					enemy_tile = Map13.GetStep( S, Convert.ToInt32( direction ) );

					if ( enemy_tile is Tile_Simulated ) {
						acs = enemy_tile.return_air();

						if ( !( acs != null ) ) {
							continue;
						}

						if ( !acs.check_recombustability( enemy_tile ) ) {
							continue;
						}
						W = Lang13.FindIn( typeof(Obj_Effect_Effect_Foam_Fire), enemy_tile );

						if ( W is Obj_Effect_Effect_Foam_Fire ) {
							firelevel -= 3;
							continue;
						}

						if ( Convert.ToDouble( ((dynamic)enemy_tile).fire_protection ) > Game13.time - 30 ) {
							firelevel -= 1.5;
							continue;
						}

						if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Fire), enemy_tile ) ) ) {
							
							if ( Rand13.PercentChance( ((int)( firelevel / Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireFirelevelMultiplier) ) ) * 50 + 50 )) ) && ((Ent_Static)S).CanPass( null, enemy_tile, 0, false ) && enemy_tile.CanPass( null, S, 0, false ) ) {
								new Obj_Fire( enemy_tile );
							}
						}
					}
				}
			}
			flow = air_contents.remove_ratio( Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_FireConsumptionRate) ) ) );

			if ( flow != null ) {
				flow.zburn( S, true );
				((Ent_Static)S).assume_air( flow );
			}
			return _default;
		}

		// Function from file: Fire.dm
		public void Extinguish(  ) {
			Ent_Static S = null;
			Ent_Static A = null;

			S = this.loc;

			if ( S is Tile_Simulated ) {
				S.extinguish();
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Ent_Static) )) {
				A = _a;
				
				A.extinguish();
			}
			GlobalFuncs.qdel( this );
			return;
		}

	}

}