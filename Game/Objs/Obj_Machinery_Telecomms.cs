// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Telecomms : Obj_Machinery {

		public string temp = "";
		public int construct_op = 0;
		public ByTable links = new ByTable();
		public int traffic = 0;
		public int netspeed = 5;
		public ByTable autolinkers = new ByTable();
		public string id = "NULL";
		public dynamic network = "NULL";
		public ByTable freq_listening = new ByTable();
		public int machinetype = 0;
		public bool toggled = true;
		public bool on = true;
		public int integrity = 100;
		public int heatgen = 20;
		public dynamic delay = 10;
		public int heating_power = 40000;
		public bool long_range_link = false;
		public string circuitboard = null;
		public bool v_hide = false;
		public int listening_level = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 128;
		}

		// Function from file: telecomunications.dm
		public Obj_Machinery_Telecomms ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic position = null;

			
			if ( GlobalVars.ticker != null ) {
				this.construct_op = 3;
				this.stat |= 1;
			}
			GlobalVars.telecomms_list.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !( this.listening_level != 0 ) ) {
				position = GlobalFuncs.get_turf( this );
				this.listening_level = Convert.ToInt32( position.z );
			}
			return;
		}

		// Function from file: telecomunications.dm
		public override dynamic emp_act( int severity = 0 ) {
			double duration = 0;

			
			if ( Rand13.PercentChance( ((int)( 100 / severity )) ) ) {
				
				if ( !( ( this.stat & 16 ) != 0 ) ) {
					this.stat |= 16;
					duration = 3000 / severity;
					Task13.Schedule( Rand13.Int( ((int)( duration - 20 )), ((int)( duration + 20 )) ), (Task13.Closure)(() => {
						this.stat &= 65519;
						return;
					}));
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: telecomunications.dm
		public override dynamic process(  ) {
			this.update_power();
			this.checkheat();
			this.update_icon();

			if ( this.traffic > 0 ) {
				this.traffic -= this.netspeed;
			}
			return null;
		}

		// Function from file: telecomunications.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.on ) {
				this.icon_state = Lang13.Initial( this, "icon_state" );
			} else {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_off";
			}
			return null;
		}

		// Function from file: telecomunications.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.telecomms_list.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: telecomunications.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			Obj_Machinery_Telecomms T = null;
			Obj_Machinery_Telecomms T2 = null;

			
			if ( this.autolinkers.len != 0 ) {
				
				if ( !this.long_range_link ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this, 20 ), typeof(Obj_Machinery_Telecomms) )) {
						T = _a;
						
						this.add_link( T );
					}
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.telecomms_list, typeof(Obj_Machinery_Telecomms) )) {
						T2 = _b;
						
						this.add_link( T2 );
					}
				}
			}
			return false;
		}

		// Function from file: machine_interactions.dm
		public override bool linkWith( Mob user = null, Base_Data buffer = null, ByTable context = null ) {
			Base_Data T = null;

			
			if ( buffer != null && buffer != this && buffer is Obj_Machinery_Telecomms ) {
				T = buffer;

				if ( !Lang13.Bool( ((dynamic)T).links.Contains( this ) ) ) {
					((dynamic)T).links.Add( this );
				}

				if ( !this.links.Contains( T ) ) {
					this.links.Add( T );
				}
				this.temp = new Txt( "<font color = #666633>-% Successfully linked with " ).Ref( buffer ).str( " " ).item( ((dynamic)buffer).name ).str( " %-</font color>" ).ToString();
				return true;
			} else if ( buffer == this ) {
				this.temp = "<font color = #666633>-% This machine can't be linked with itself %-</font color>";
				return false;
			} else {
				this.temp = "<font color = #666633>-% Unable to acquire buffer %-</font color>";
				return false;
			}
			return false;
		}

		// Function from file: machine_interactions.dm
		public override bool unlinkFrom( Mob user = null, Base_Data buffer = null ) {
			Base_Data T = null;

			
			if ( this.links.Contains( buffer != null && buffer != null ) ) {
				T = buffer;

				if ( Lang13.Bool( ((dynamic)T).links ) ) {
					((dynamic)T).links.Remove( this );
				}
				this.links.Remove( buffer );
				this.temp = new Txt( "<font color = #666633>-% Removed " ).Ref( T ).str( " " ).item( ((dynamic)T).name ).str( " from linked entities. %-</font color>" ).ToString();
				return true;
			} else {
				this.temp = "<font color = #666633>-% Unable to locate machine to unlink from, try again. %-</font color>";
				return false;
			}
		}

		// Function from file: machine_interactions.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic P = null;
			string newid = null;
			dynamic newnet = null;
			Obj_Machinery_Telecomms T = null;
			dynamic newfreq = null;
			double? x = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( !( Task13.User is Mob_Living_Silicon ) ) {
				
				if ( !( Task13.User.get_active_hand() is Obj_Item_Device_Multitool ) ) {
					return null;
				}
			}
			P = GlobalFuncs.get_multitool( Task13.User );

			if ( !( P is Obj_Item_Device_Multitool ) ) {
				Game13.log.WriteMsg( "## TESTING: " + ( "get_multitool returned " + P + "." ) );
				return null;
			}

			if ( Lang13.Bool( href_list["input"] ) ) {
				
				dynamic _b = href_list["input"]; // Was a switch-case, sorry for the mess.
				if ( _b=="toggle" ) {
					this.toggled = !this.toggled;
					this.temp = "<font color = #666633>-% " + this + " has been " + ( this.toggled ? "activated" : "deactivated" ) + ".</font color>";
					this.update_power();
				} else if ( _b=="id" ) {
					newid = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( Task13.User, "Specify the new ID for this machine", this, this.id, null, InputType.Str | InputType.Null ) ), 1, 1024 );

					if ( Lang13.Bool( newid ) && this.canAccess( Task13.User ) ) {
						this.id = newid;
						this.temp = "<font color = #666633>-% New ID assigned: \"" + this.id + "\" %-</font color>";
					}
				} else if ( _b=="network" ) {
					newnet = Interface13.Input( Task13.User, "Specify the new network for this machine. This will break all current links.", this, this.network, null, InputType.Str | InputType.Null );

					if ( Lang13.Bool( newnet ) && this.canAccess( Task13.User ) ) {
						
						if ( Lang13.Length( newnet ) > 15 ) {
							this.temp = "<font color = #666633>-% Too many characters in new network tag %-</font color>";
						} else {
							
							foreach (dynamic _a in Lang13.Enumerate( this.links, typeof(Obj_Machinery_Telecomms) )) {
								T = _a;
								
								T.links.Remove( this );
							}
							this.network = newnet;
							this.links = new ByTable();
							this.temp = "<font color = #666633>-% New network tag assigned: \"" + this.network + "\" %-</font color>";
						}
					}
				} else if ( _b=="freq" ) {
					newfreq = Interface13.Input( Task13.User, "Specify a new frequency to filter (GHz). Decimals assigned automatically.", this, this.network, null, InputType.Num | InputType.Null );

					if ( Lang13.Bool( newfreq ) && this.canAccess( Task13.User ) ) {
						
						if ( String13.FindIgnoreCase( String13.NumberToString( Convert.ToDouble( newfreq ) ), ".", 1, 0 ) != 0 ) {
							newfreq *= 10;
						}

						if ( !this.freq_listening.Contains( newfreq ) && Convert.ToDouble( newfreq ) < 10000 ) {
							this.freq_listening.Add( newfreq );
							this.temp = "<font color = #666633>-% New frequency filter assigned: \"" + newfreq + " GHz\" %-</font color>";
						}
					}
				}
			}

			if ( Lang13.Bool( href_list["delete"] ) ) {
				x = String13.ParseNumber( href_list["delete"] );
				this.temp = "<font color = #666633>-% Removed frequency filter " + x + " %-</font color>";
				this.freq_listening.Remove( x );
			}
			this.Options_Topic( href, href_list );
			Task13.User.set_machine( this );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: machine_interactions.dm
		public override Base_Data getLink( double? idx = null ) {
			return ( ( idx ??0) >= 1 && ( idx ??0) <= this.links.len ? this.links[idx] : null );
		}

		// Function from file: machine_interactions.dm
		public override bool isLinkedWith( Base_Data O = null ) {
			return this.links.Contains( O != null && O != null );
		}

		// Function from file: machine_interactions.dm
		public override bool canLink( Base_Data O = null, ByTable context = null ) {
			return O is Obj_Machinery_Telecomms;
		}

		// Function from file: machine_interactions.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			string dat = null;
			int i = 0;
			Obj_Machinery_Telecomms T = null;
			dynamic x = null;

			
			if ( !( user is Mob_Living_Silicon ) ) {
				
				if ( !( ((Mob)user).get_active_hand() is Obj_Item_Device_Multitool ) ) {
					return null;
				}
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			dat = new Txt( "\n		<p>" ).item( this.temp ).str( "</p>\n		<p><b>Power Status:</b> <a href='?src=" ).Ref( this ).str( ";input=toggle'>" ).item( ( this.toggled ? "On" : "Off" ) ).str( "</a></p>" ).ToString();

			if ( this.on && this.toggled ) {
				dat += "\n			<p>" + this.formatInput( "Identification String", "id", "id" ) + "</p>\n			<p>" + this.formatInput( "Network", "network", "network" ) + "</p>\n			<p><b>Prefabrication:</b> " + ( this.autolinkers.len != 0 ? "TRUE" : "FALSE" ) + "</p>\n		";

				if ( this.v_hide ) {
					dat += "<p>Shadow Link: ACTIVE</p>";
				}
				dat += this.Options_Menu();
				dat += "<h2>Linked Network Entities:</h2> <ol>";
				i = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.links, typeof(Obj_Machinery_Telecomms) )) {
					T = _a;
					
					i++;

					if ( T.v_hide && !this.v_hide ) {
						continue;
					}
					dat += new Txt( "<li>" ).Ref( T ).str( " " ).item( T.name ).str( " (" ).item( T.id ).str( ")  <a href='?src=" ).Ref( this ).str( ";unlink=" ).item( i ).str( "'>[X]</a></li>" ).ToString();
				}
				dat += "</ol>\n			<h2>Filtering Frequencies:</h2>";
				i = 0;

				if ( Lang13.Length( this.freq_listening ) != 0 ) {
					dat += "<ul>";

					foreach (dynamic _b in Lang13.Enumerate( this.freq_listening )) {
						x = _b;
						
						dat += new Txt( "<li>" ).item( GlobalFuncs.format_frequency( x ) ).str( " GHz<a href='?src=" ).Ref( this ).str( ";delete=" ).item( x ).str( "'>[X]</a></li>" ).ToString();
					}
					dat += "</ul>";
				} else {
					dat += "<li>NONE</li>";
				}
				dat += new Txt( "<p><a href='?src=" ).Ref( this ).str( ";input=freq'>[Add Filter]</a></p>\n			<hr />" ).ToString();
			}
			return dat;
		}

		// Function from file: telecomunications.dm
		public void produce_heat( int heat_amt = 0 ) {
			Ent_Static L = null;
			GasMixture env = null;
			dynamic transfer_moles = null;
			GasMixture removed = null;
			int? heat_capacity = null;

			
			if ( this.heatgen == 0 ) {
				return;
			}

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				L = this.loc;

				if ( L is Tile_Simulated ) {
					env = L.return_air();

					if ( ( env.temperature ??0) < heat_amt + 273.41 ) {
						transfer_moles = env.f_total_moles() * 0.25;
						removed = env.remove( transfer_moles );

						if ( removed != null ) {
							heat_capacity = removed.heat_capacity();

							if ( heat_capacity == 0 || heat_capacity == null ) {
								heat_capacity = 1;
							}
							removed.temperature = Num13.MinInt( ((int)( ( ( removed.temperature ??0) * ( heat_capacity ??0) + this.heating_power ) / ( heat_capacity ??0) )), 1000 );
						}
						env.merge( removed );
					}
				}
			}
			return;
		}

		// Function from file: telecomunications.dm
		public void checkheat(  ) {
			GasMixture environment = null;

			environment = this.loc.return_air();

			dynamic _a = environment.temperature; // Was a switch-case, sorry for the mess.
			if ( 273.41<=_a&&_a<=313.41 ) {
				this.integrity = ( this.integrity <= 0 ? 0 : ( this.integrity >= 100 ? 100 : this.integrity ) );
			} else if ( 313.41<=_a&&_a<=343.41 ) {
				this.integrity = Num13.MaxInt( 0, this.integrity - 1 );
			}

			if ( Lang13.Bool( this.delay ) ) {
				this.delay--;
			} else if ( this.on && this.traffic > 0 ) {
				this.produce_heat( this.heatgen );
				this.delay = Lang13.Initial( this, "delay" );
			}
			return;
		}

		// Function from file: telecomunications.dm
		public void update_power(  ) {
			
			if ( this.toggled ) {
				
				if ( ( this.stat & 19 ) != 0 || this.integrity <= 0 ) {
					this.on = false;
				} else {
					this.on = true;
				}
			} else {
				this.on = false;
			}
			return;
		}

		// Function from file: telecomunications.dm
		public void add_link( Obj_Machinery_Telecomms T = null ) {
			dynamic position = null;
			dynamic T_position = null;
			dynamic x = null;

			position = GlobalFuncs.get_turf( this );
			T_position = GlobalFuncs.get_turf( T );

			if ( position.z == T_position.z || this.long_range_link && T.long_range_link ) {
				
				if ( this != T ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.autolinkers )) {
						x = _a;
						

						if ( T.autolinkers.Contains( x ) ) {
							this.links.Or( T );
							break;
						}
					}
				}
			}
			return;
		}

		// Function from file: telecomunications.dm
		public bool is_freq_listening( Game_Data signal = null ) {
			
			if ( !( signal != null ) ) {
				return false;
			}

			if ( this.freq_listening.Contains( ((dynamic)signal).frequency ) || !( this.freq_listening.len != 0 ) ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: telecomunications.dm
		public virtual void receive_information( Game_Data signal = null, Obj_Machinery_Telecomms machine_from = null ) {
			Lang13.SuperCall( signal, machine_from );
			return;
		}

		// Function from file: telecomunications.dm
		public void relay_direct_information( Game_Data signal = null, Obj_Machinery_Telecomms machine = null ) {
			machine.receive_information( signal, this );
			return;
		}

		// Function from file: telecomunications.dm
		public int? relay_information( Game_Data signal = null, dynamic filter = null, bool? copysig = null, int? amount = null ) {
			amount = amount ?? 20;

			int? send_count = null;
			int netlag = 0;
			Obj_Machinery_Telecomms machine = null;
			Game_Data copy = null;

			
			if ( !this.on ) {
				return null;
			}
			send_count = 0;
			((dynamic)signal).data["slow"] += Rand13.Int( 0, Num13.Floor( 100 - this.integrity ) );
			netlag = Num13.Floor( this.traffic / 50 );

			if ( netlag > Convert.ToDouble( ((dynamic)signal).data["slow"] ) ) {
				((dynamic)signal).data["slow"] = netlag;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.links, typeof(Obj_Machinery_Telecomms) )) {
				machine = _a;
				

				if ( !( machine.loc != null ) ) {
					Game13.log.WriteMsg( "DEBUG: telecomms machine has null loc: " + machine.name );
					continue;
				}

				if ( Lang13.Bool( filter ) && !Lang13.Bool( ((dynamic)Lang13.FindClass( filter )).IsInstanceOfType( machine ) ) ) {
					continue;
				}

				if ( !machine.on ) {
					continue;
				}

				if ( Lang13.Bool( amount ) && ( send_count ??0) >= ( amount ??0) ) {
					break;
				}

				if ( machine.loc.z != this.listening_level ) {
					
					if ( !this.long_range_link && !machine.long_range_link ) {
						continue;
					}
				}
				copy = GlobalFuncs.getFromPool( typeof(Signal) );

				if ( copysig == true ) {
					((dynamic)copy).transmission_method = 2;
					((dynamic)copy).frequency = ((dynamic)signal).frequency;
					((dynamic)copy).data = new ByTable()
						.Set( "mob", ((dynamic)signal).data["mob"] )
						.Set( "language", ((dynamic)signal).data["language"] )
						.Set( "mobtype", ((dynamic)signal).data["mobtype"] )
						.Set( "realname", ((dynamic)signal).data["realname"] )
						.Set( "name", ((dynamic)signal).data["name"] )
						.Set( "job", ((dynamic)signal).data["job"] )
						.Set( "key", ((dynamic)signal).data["key"] )
						.Set( "vmask", ((dynamic)signal).data["vmask"] )
						.Set( "compression", ((dynamic)signal).data["compression"] )
						.Set( "message", ((dynamic)signal).data["message"] )
						.Set( "radio", ((dynamic)signal).data["radio"] )
						.Set( "slow", ((dynamic)signal).data["slow"] )
						.Set( "traffic", ((dynamic)signal).data["traffic"] )
						.Set( "type", ((dynamic)signal).data["type"] )
						.Set( "server", ((dynamic)signal).data["server"] )
						.Set( "reject", ((dynamic)signal).data["reject"] )
						.Set( "level", ((dynamic)signal).data["level"] )
						.Set( "lquote", ((dynamic)signal).data["lquote"] )
						.Set( "rquote", ((dynamic)signal).data["rquote"] )
						.Set( "message_classes", ((dynamic)signal).data["message_classes"] )
						.Set( "wrapper_classes", ((dynamic)signal).data["wrapper_classes"] )
					;

					if ( !Lang13.Bool( ((dynamic)signal).data["original"] ) ) {
						((dynamic)copy).data["original"] = signal;
					} else {
						((dynamic)copy).data["original"] = ((dynamic)signal).data["original"];
					}
				} else {
					copy = null;
				}
				send_count++;

				if ( machine.is_freq_listening( signal ) ) {
					machine.traffic++;
				}

				if ( copysig == true && copy != null ) {
					machine.receive_information( copy, this );
				} else {
					machine.receive_information( signal, this );
				}
			}

			if ( ( send_count ??0) > 0 && this.is_freq_listening( signal ) ) {
				this.traffic++;
			}
			return send_count;
		}

		// Function from file: machine_interactions.dm
		public bool canAccess( Mob user = null ) {
			
			if ( user is Mob_Living_Silicon || GlobalFuncs.in_range( this, user ) ) {
				return true;
			}
			return false;
		}

		// Function from file: machine_interactions.dm
		public virtual void Options_Topic( string href = null, ByTable href_list = null ) {
			return;
		}

		// Function from file: machine_interactions.dm
		public virtual string Options_Menu(  ) {
			return "";
		}

		// Function from file: machine_interactions.dm
		public string formatInput( string label = null, string varname = null, string input = null ) {
			string value = null;

			value = this.vars[varname];

			if ( !Lang13.Bool( value ) || value == "" ) {
				value = "-----";
			}
			return new Txt( "<b>" ).item( label ).str( ":</b> <a href=\"?src=" ).Ref( this ).str( ";input=" ).item( varname ).str( "\">" ).item( value ).str( "</a>" ).ToString();
		}

		// Function from file: machine_interactions.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.update_multitool_menu( a );
			return null;
		}

		// Function from file: machine_interactions.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			this.attack_hand( user );
			return null;
		}

		// Function from file: machine_interactions.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			Obj_Item_Stack_CableCoil A = null;
			dynamic A2 = null;
			Obj x = null;
			Type newpath = null;
			dynamic C = null;
			dynamic I = null;
			int? i = null;
			dynamic s = null;
			dynamic A3 = null;
			Obj_Machinery_ConstructableFrame_MachineFrame F = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			switch ((int)( this.construct_op )) {
				case 0:
					
					if ( a is Obj_Item_Weapon_Screwdriver ) {
						GlobalFuncs.to_chat( b, "You unfasten the bolts." );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
						this.construct_op++;
					}
					break;
				case 1:
					
					if ( a is Obj_Item_Weapon_Screwdriver ) {
						GlobalFuncs.to_chat( b, "You fasten the bolts." );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
						this.construct_op--;
					}

					if ( a is Obj_Item_Weapon_Wrench ) {
						GlobalFuncs.to_chat( b, "You dislodge the external plating." );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 75, 1 );
						this.construct_op++;
					}
					break;
				case 2:
					
					if ( a is Obj_Item_Weapon_Wrench ) {
						GlobalFuncs.to_chat( b, "You secure the external plating." );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 75, 1 );
						this.construct_op--;
					}

					if ( a is Obj_Item_Weapon_Wirecutters ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Wirecutter.ogg", 50, 1 );
						GlobalFuncs.to_chat( b, "You remove the cables." );
						this.construct_op++;
						A = new Obj_Item_Stack_CableCoil( b.loc );
						A.amount = 5;
						this.stat |= 1;
					}
					break;
				case 3:
					
					if ( a is Obj_Item_Stack_CableCoil ) {
						A2 = a;

						if ( Convert.ToDouble( A2.amount ) >= 5 ) {
							GlobalFuncs.to_chat( b, "You insert the cables." );
							A2.amount -= 5;

							if ( Convert.ToDouble( A2.amount ) <= 0 ) {
								new ByTable().Set( 1, A2 ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( b, "drop_item" ) );
								GlobalFuncs.returnToPool( A2 );
							}
							this.construct_op--;
							this.stat &= 65534;
						} else {
							GlobalFuncs.to_chat( b, "You need more cable" );
						}
					}

					if ( a is Obj_Item_Weapon_Crowbar ) {
						GlobalFuncs.to_chat( b, "You begin prying out the circuit board and components..." );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Crowbar.ogg", 50, 1 );

						if ( GlobalFuncs.do_after( b, this, 60 ) ) {
							GlobalFuncs.to_chat( b, "You finish prying out the components." );

							if ( this.contents.len > 0 ) {
								
								foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
									x = _a;
									
									x.loc = b.loc;
								}
							} else {
								newpath = Lang13.FindClass( this.circuitboard );
								C = Lang13.Call( newpath );

								foreach (dynamic _b in Lang13.Enumerate( C.req_components )) {
									I = _b;
									
									i = null;
									i = 1;

									while (( i ??0) <= Convert.ToDouble( C.req_components[I] )) {
										newpath = Lang13.FindClass( I );
										s = Lang13.Call( newpath );
										s.loc = b.loc;

										if ( s is Obj_Item_Stack_CableCoil ) {
											A3 = s;
											A3.amount = 1;
										}
										i++;
									}
								}
								C.loc = b.loc;
							}
							F = new Obj_Machinery_ConstructableFrame_MachineFrame();
							F.set_build_state( 2 );
							F.loc = this.loc;
							GlobalFuncs.qdel( this );
						}
					}
					break;
			}
			return _default;
		}

	}

}