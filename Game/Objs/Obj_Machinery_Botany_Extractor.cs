// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Botany_Extractor : Obj_Machinery_Botany {

		public Seed genetics = null;
		public int degradation = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "traitcopier";
		}

		// Function from file: seed_machines.dm
		public Obj_Machinery_Botany_Extractor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_BotanyCentrifuge(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen(), 
				new Obj_Item_Weapon_StockParts_MatterBin()
			 });
			return;
		}

		// Function from file: seed_machines.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic P = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["scan_genome"] ) ) {
				
				if ( !Lang13.Bool( this.loaded_seed ) ) {
					return null;
				}
				this.last_action = Game13.time;
				this.active = true;

				if ( Lang13.Bool( this.loaded_seed ) && Lang13.Bool( this.loaded_seed.seed ) ) {
					this.genetics = this.loaded_seed.seed;
					this.degradation = 0;
				}
				GlobalFuncs.qdel( this.loaded_seed );
				this.loaded_seed = null;
			}

			if ( Lang13.Bool( href_list["get_gene"] ) ) {
				
				if ( !( this.genetics != null ) || !Lang13.Bool( this.loaded_disk ) ) {
					return null;
				}
				this.last_action = Game13.time;
				this.active = true;
				P = this.genetics.get_gene( href_list["get_gene"] );

				if ( !Lang13.Bool( P ) ) {
					return null;
				}
				this.loaded_disk.genes.Add( P );
				this.loaded_disk.genesource = "" + this.genetics.display_name;

				if ( !this.genetics.roundstart ) {
					this.loaded_disk.genesource += " (variety #" + this.genetics.uid + ")";
				}
				this.loaded_disk.name += " (" + GlobalVars.plant_controller.gene_tag_masks[href_list["get_gene"]] + ", #" + this.genetics.uid + ")";
				this.loaded_disk.desc += " The label reads 'gene " + GlobalVars.plant_controller.gene_tag_masks[href_list["get_gene"]] + ", sampled from " + this.genetics.display_name + "'.";
				this.eject_disk = true;
				this.degradation += Rand13.Int( 20, 60 );

				if ( this.degradation >= 100 ) {
					this.failed_task = true;
					this.genetics = null;
					this.degradation = 0;
				}
			}

			if ( Lang13.Bool( href_list["clear_buffer"] ) ) {
				
				if ( !( this.genetics != null ) ) {
					return null;
				}
				this.genetics = null;
				this.degradation = 0;
			}
			return 1;
		}

		// Function from file: seed_machines.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? true;

			ByTable data = null;
			ByTable geneMasks = null;
			dynamic gene_tag = null;

			
			if ( !Lang13.Bool( user ) ) {
				return;
			}
			data = new ByTable();
			geneMasks = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.plant_controller.gene_tag_masks )) {
				gene_tag = _a;
				
				geneMasks.Add( new ByTable(new object [] { new ByTable().Set( "tag", gene_tag ).Set( "mask", GlobalVars.plant_controller.gene_tag_masks[gene_tag] ) }) );
			}
			data["geneMasks"] = geneMasks;
			data["activity"] = this.active;
			data["degradation"] = this.degradation;

			if ( Lang13.Bool( this.loaded_disk ) ) {
				data["disk"] = 1;
			} else {
				data["disk"] = 0;
			}

			if ( Lang13.Bool( this.loaded_seed ) ) {
				data["loaded"] = "" + this.loaded_seed.name;
			} else {
				data["loaded"] = 0;
			}

			if ( this.genetics != null ) {
				data["hasGenetics"] = 1;
				data["sourceName"] = this.genetics.display_name;

				if ( !this.genetics.roundstart ) {
					data["sourceName"] += " (variety #" + this.genetics.uid + ")";
				}
			} else {
				data["hasGenetics"] = 0;
				data["sourceName"] = 0;
			}
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data, force_open );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "botany_isolator.tmpl", "Lysis-isolation Centrifuge UI", 470, 450 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

	}

}