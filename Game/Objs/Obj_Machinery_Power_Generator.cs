// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Generator : Obj_Machinery_Power {

		public dynamic cold_circ = null;
		public dynamic hot_circ = null;
		public int cold_dir = 8;
		public int hot_dir = 4;
		public double lastgen = 0;
		public int lastgenlev = -1;
		public string lastcirc = "00";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "teg";
		}

		public Obj_Machinery_Power_Generator ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: generator.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: generator.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=teg" );
				Task13.User.unset_machine();
				return 0;
			}
			return 1;
		}

		// Function from file: generator.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			Browser popup = null;

			((Mob)user).set_machine( this );
			popup = new Browser( user, "teg", "Thermo-Electric Generator", 460, 300 );
			popup.set_content( this.get_menu() );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return 1;
		}

		// Function from file: generator.dm
		public string get_menu( bool? include_link = null ) {
			include_link = include_link ?? true;

			string t = null;
			dynamic cold_circ_air1 = null;
			dynamic cold_circ_air2 = null;
			dynamic hot_circ_air1 = null;
			dynamic hot_circ_air2 = null;

			t = "";

			if ( !Lang13.Bool( this.powernet ) ) {
				t += "<span class='bad'>Unable to connect to the power network!</span>";
			} else if ( Lang13.Bool( this.cold_circ ) && Lang13.Bool( this.hot_circ ) ) {
				cold_circ_air1 = this.cold_circ.airs[1];
				cold_circ_air2 = this.cold_circ.airs[2];
				hot_circ_air1 = this.hot_circ.airs[1];
				hot_circ_air2 = this.hot_circ.airs[2];
				t += "<div class='statusDisplay'>";
				t += "Output: " + Num13.Floor( this.lastgen ) + " W";
				t += "<BR>";
				t += "<B><font color='blue'>Cold loop</font></B><BR>";
				t += "Temperature Inlet: " + Num13.Round( Convert.ToDouble( cold_circ_air2.temperature ), 0.1 ) + " K / Outlet: " + Num13.Round( Convert.ToDouble( cold_circ_air1.temperature ), 0.1 ) + " K<BR>";
				t += "Pressure Inlet: " + Num13.Round( Convert.ToDouble( cold_circ_air2.return_pressure() ), 0.1 ) + " kPa /  Outlet: " + Num13.Round( Convert.ToDouble( cold_circ_air1.return_pressure() ), 0.1 ) + " kPa<BR>";
				t += "<B><font color='red'>Hot loop</font></B><BR>";
				t += "Temperature Inlet: " + Num13.Round( Convert.ToDouble( hot_circ_air2.temperature ), 0.1 ) + " K / Outlet: " + Num13.Round( Convert.ToDouble( hot_circ_air1.temperature ), 0.1 ) + " K<BR>";
				t += "Pressure Inlet: " + Num13.Round( Convert.ToDouble( hot_circ_air2.return_pressure() ), 0.1 ) + " kPa / Outlet: " + Num13.Round( Convert.ToDouble( hot_circ_air1.return_pressure() ), 0.1 ) + " kPa<BR>";
				t += "</div>";
			} else {
				t += "<span class='bad'>Unable to locate all parts!</span>";
			}

			if ( include_link == true ) {
				t += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";close=1'>Close</A>" ).ToString();
			}
			return t;
		}

		// Function from file: generator.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				Interface13.Browse( a, null, "window=teg" );
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: generator.dm
		public override int? process( dynamic seconds = null ) {
			dynamic cold_air = null;
			dynamic hot_air = null;
			double cold_air_heat_capacity = 0;
			double hot_air_heat_capacity = 0;
			bool delta_temperature = false;
			double efficiency = 0;
			double energy_transfer = 0;
			double heat = 0;
			dynamic hot_circ_air1 = null;
			dynamic cold_circ_air1 = null;
			int genlev = 0;
			string circ = null;

			
			if ( !Lang13.Bool( this.cold_circ ) || !Lang13.Bool( this.hot_circ ) ) {
				return null;
			}
			this.lastgen = 0;

			if ( Lang13.Bool( this.powernet ) ) {
				cold_air = ((Obj_Machinery_Atmospherics_Components_Binary_Circulator)this.cold_circ).return_transfer_air();
				hot_air = ((Obj_Machinery_Atmospherics_Components_Binary_Circulator)this.hot_circ).return_transfer_air();

				if ( Lang13.Bool( cold_air ) && Lang13.Bool( hot_air ) ) {
					cold_air_heat_capacity = ((GasMixture)cold_air).heat_capacity();
					hot_air_heat_capacity = ((GasMixture)hot_air).heat_capacity();
					delta_temperature = Lang13.Bool( hot_air.temperature - cold_air.temperature );

					if ( ( delta_temperature ?1:0) > 0 && cold_air_heat_capacity > 0 && hot_air_heat_capacity > 0 ) {
						efficiency = 0.41;
						energy_transfer = ( delta_temperature ?1:0) * hot_air_heat_capacity * cold_air_heat_capacity / ( hot_air_heat_capacity + cold_air_heat_capacity );
						heat = energy_transfer * ( 1 - efficiency );
						this.lastgen = energy_transfer * efficiency;
						hot_air.temperature = hot_air.temperature - energy_transfer / hot_air_heat_capacity;
						cold_air.temperature = cold_air.temperature + heat / cold_air_heat_capacity;
						this.add_avail( this.lastgen );
					}
				}

				if ( Lang13.Bool( hot_air ) ) {
					hot_circ_air1 = this.hot_circ.airs[1];
					hot_circ_air1.merge( hot_air );
				}

				if ( Lang13.Bool( cold_air ) ) {
					cold_circ_air1 = this.cold_circ.airs[1];
					cold_circ_air1.merge( cold_air );
				}
			}
			genlev = Num13.MaxInt( 0, Num13.MinInt( Num13.Floor( this.lastgen * 11 / 100000 ), 11 ) );
			circ = "" + ( Lang13.Bool( this.cold_circ ) && Convert.ToDouble( this.cold_circ.last_pressure_delta ) > 0 ? "1" : "0" ) + ( Lang13.Bool( this.hot_circ ) && Convert.ToDouble( this.hot_circ.last_pressure_delta ) > 0 ? "1" : "0" );

			if ( genlev != this.lastgenlev || circ != this.lastcirc ) {
				this.lastgenlev = genlev;
				this.lastcirc = circ;
				this.update_icon();
			}
			this.updateDialog();
			return null;
		}

		// Function from file: generator.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				this.overlays.Cut();
			} else {
				this.overlays.Cut();

				if ( this.lastgenlev != 0 ) {
					this.overlays.Add( new Image( "icons/obj/power.dmi", "teg-op" + this.lastgenlev ) );
				}
				this.overlays.Add( new Image( "icons/obj/power.dmi", "teg-oc" + this.lastcirc ) );
			}
			return false;
		}

		// Function from file: generator.dm
		public override void initialize(  ) {
			Type circpath = null;

			circpath = typeof(Obj_Machinery_Atmospherics_Components_Binary_Circulator);
			this.cold_circ = Lang13.FindIn( circpath, Map13.GetStep( this, this.cold_dir ) );
			this.hot_circ = Lang13.FindIn( circpath, Map13.GetStep( this, this.hot_dir ) );
			this.connect_to_network();

			if ( Lang13.Bool( this.cold_circ ) ) {
				
				switch ((int)( this.cold_dir )) {
					case 4:
						this.cold_circ.side = GlobalVars.CIRC_RIGHT;
						break;
					case 8:
						this.cold_circ.side = GlobalVars.CIRC_LEFT;
						break;
				}
				this.cold_circ.update_icon();
			}

			if ( Lang13.Bool( this.hot_circ ) ) {
				
				switch ((int)( this.hot_dir )) {
					case 4:
						this.hot_circ.side = GlobalVars.CIRC_RIGHT;
						break;
					case 8:
						this.hot_circ.side = GlobalVars.CIRC_LEFT;
						break;
				}
				this.hot_circ.update_icon();
			}

			if ( !Lang13.Bool( this.cold_circ ) || !Lang13.Bool( this.hot_circ ) ) {
				this.stat |= 1;
			}
			this.update_icon();
			return;
		}

	}

}