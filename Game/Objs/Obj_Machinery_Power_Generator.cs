// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Generator : Obj_Machinery_Power {

		public double thermal_efficiency = 0.41;
		public dynamic circ1 = null;
		public dynamic circ2 = null;
		public double last_circ1_gen = 0;
		public double last_circ2_gen = 0;
		public double last_thermal_gen = 0;
		public double stored_energy = 0;
		public double lastgen1 = 0;
		public double lastgen2 = 0;
		public double effective_gen = 0;
		public int lastgenlev = 0;
		public int max_power = 500000;
		public HtmlInterface_Nanotrasen v_interface = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 100;
			this.machine_flags = 24;
			this.icon_state = "teg";
		}

		// Function from file: generator.dm
		public Obj_Machinery_Power_Generator ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 1, (Task13.Closure)(() => {
				this.reconnect();
				return;
			}));
			this.v_interface = new HtmlInterface_Nanotrasen( this, this.name, 450, 410, GlobalVars.head );
			GlobalVars.html_machines.Add( this );
			this.init_ui();
			return;
		}

		// Function from file: generator.dm
		public override dynamic power_change(  ) {
			base.power_change();
			this.update_icon();
			return null;
		}

		// Function from file: generator.dm
		public override bool? hiIsValidClient( dynamic hclient = null, dynamic hi = null ) {
			return ((Mob)hclient.client.mob).html_mob_check( this.type );
		}

		// Function from file: generator.dm
		public override void updateUsrDialog(  ) {
			bool vertical = false;

			
			if ( this.operable() ) {
				this.v_interface.executeJavaScript( "setEnabled()" );
			} else {
				this.v_interface.executeJavaScript( "setDisabled()" );
			}
			vertical = false;

			if ( ( this.dir & 3 ) != 0 ) {
				vertical = true;
			}
			this.v_interface.updateContent( "circ1", "Primary circulator (" + ( vertical ? "top" : "right" ) + ")" );
			this.v_interface.updateContent( "circ2", "Primary circulator (" + ( vertical ? "bottom" : "left" ) + ")" );
			this.v_interface.updateContent( "total_out", GlobalFuncs.format_watts( this.effective_gen ) );
			this.v_interface.updateContent( "thermal_out", GlobalFuncs.format_watts( this.last_thermal_gen ) );

			if ( !Lang13.Bool( this.circ1 ) || !Lang13.Bool( this.circ2 ) ) {
				return;
			}
			this.v_interface.updateContent( "circ1_turbine", GlobalFuncs.format_watts( this.last_circ1_gen ) );
			this.v_interface.updateContent( "circ1_flow_cap", "" + Num13.Floor( this.circ1.volume_capacity_used * 100 ) + " %" );
			this.v_interface.updateContent( "circ1_in_pressure", "" + Num13.Round( Convert.ToDouble( this.circ1.air1.return_pressure() ), 0.1 ) + " kPa" );
			this.v_interface.updateContent( "circ1_in_temp", "" + Num13.Round( Convert.ToDouble( this.circ1.air1.temperature ), 0.1 ) + " K" );
			this.v_interface.updateContent( "circ1_out_pressure", "" + Num13.Round( Convert.ToDouble( this.circ1.air2.return_pressure() ), 0.1 ) + " kPa" );
			this.v_interface.updateContent( "circ1_out_temp", "" + Num13.Round( Convert.ToDouble( this.circ1.air2.temperature ), 0.1 ) + " K" );
			this.v_interface.updateContent( "circ2_turbine", GlobalFuncs.format_watts( this.last_circ2_gen ) );
			this.v_interface.updateContent( "circ2_flow_cap", "" + Num13.Floor( this.circ2.volume_capacity_used * 100 ) + " %" );
			this.v_interface.updateContent( "circ2_in_pressure", "" + Num13.Round( Convert.ToDouble( this.circ2.air1.return_pressure() ), 0.1 ) + " kPa" );
			this.v_interface.updateContent( "circ2_in_temp", "" + Num13.Round( Convert.ToDouble( this.circ2.air1.temperature ), 0.1 ) + " K" );
			this.v_interface.updateContent( "circ2_out_pressure", "" + Num13.Round( Convert.ToDouble( this.circ2.air2.return_pressure() ), 0.1 ) + " kPa" );
			this.v_interface.updateContent( "circ2_out_temp", "" + Num13.Round( Convert.ToDouble( this.circ2.air2.temperature ), 0.1 ) + " K" );
			return;
		}

		// Function from file: generator.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}
			this.v_interface.show( a );
			this.updateUsrDialog();
			return _default;
		}

		// Function from file: generator.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: generator.dm
		public override dynamic process(  ) {
			dynamic air1 = null;
			dynamic air2 = null;
			int air1_heat_capacity = 0;
			int air2_heat_capacity = 0;
			double delta_temperature = 0;
			double energy_transfer = 0;
			double heat = 0;
			int genlev = 0;

			
			if ( !this.operable() ) {
				this.stored_energy = 0;
				return null;
			}
			this.lastgen2 = this.lastgen1;
			this.lastgen1 = 0;
			this.last_thermal_gen = 0;
			this.last_circ1_gen = 0;
			this.last_circ2_gen = 0;
			air1 = ((Obj_Machinery_Atmospherics_Binary_Circulator)this.circ1).return_transfer_air();
			air2 = ((Obj_Machinery_Atmospherics_Binary_Circulator)this.circ2).return_transfer_air();

			if ( Lang13.Bool( air1 ) && Lang13.Bool( air2 ) ) {
				air1_heat_capacity = ((GasMixture)air1).heat_capacity();
				air2_heat_capacity = ((GasMixture)air2).heat_capacity();
				delta_temperature = Math.Abs( Convert.ToDouble( air2.temperature - air1.temperature ) );

				if ( delta_temperature > 0 && air1_heat_capacity > 0 && air2_heat_capacity > 0 ) {
					energy_transfer = delta_temperature * air2_heat_capacity * air1_heat_capacity / ( air2_heat_capacity + air1_heat_capacity );
					heat = energy_transfer * ( 1 - this.thermal_efficiency );
					this.last_thermal_gen = energy_transfer * this.thermal_efficiency;

					if ( Convert.ToDouble( air2.temperature ) > Convert.ToDouble( air1.temperature ) ) {
						air2.temperature = air2.temperature - energy_transfer / air2_heat_capacity;
						air1.temperature = air1.temperature + heat / air1_heat_capacity;
					} else {
						air2.temperature = air2.temperature + heat / air2_heat_capacity;
						air1.temperature = air1.temperature - energy_transfer / air1_heat_capacity;
					}
				}
			}
			this.circ1.air2.merge( air1 );
			this.circ2.air2.merge( air2 );

			if ( Lang13.Bool( this.circ1.network2 ) ) {
				this.circ1.network2.update = 1;
			}

			if ( Lang13.Bool( this.circ2.network2 ) ) {
				this.circ2.network2.update = 1;
			}
			this.last_circ1_gen = ((Obj_Machinery_Atmospherics_Binary_Circulator)this.circ1).return_stored_energy();
			this.last_circ2_gen = ((Obj_Machinery_Atmospherics_Binary_Circulator)this.circ2).return_stored_energy();
			this.stored_energy += this.last_thermal_gen + this.last_circ1_gen + this.last_circ2_gen;
			this.lastgen1 = this.stored_energy * 0.4;
			this.stored_energy -= this.lastgen1;
			this.effective_gen = ( this.lastgen1 + this.lastgen2 ) / 2;
			genlev = ( Num13.Floor( this.effective_gen * 11 / this.max_power ) <= 0 ? 0 : ( Num13.Floor( this.effective_gen * 11 / this.max_power ) >= 11 ? 11 : Num13.Floor( this.effective_gen * 11 / this.max_power ) ) );

			if ( this.effective_gen > 100 && genlev == 0 ) {
				genlev = 1;
			}

			if ( genlev != this.lastgenlev ) {
				this.lastgenlev = genlev;
				this.update_icon();
			}
			this.add_avail( this.effective_gen );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: generator.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays = 0;

			if ( !this.operable() ) {
				return null;
			}
			this.overlays.Add( "teg_mid" );

			if ( this.lastgenlev != 0 ) {
				this.overlays.Add( "teg-op" + this.lastgenlev );
			}
			return null;
		}

		// Function from file: generator.dm
		public override int wrenchAnchor( dynamic user = null ) {
			int _default = 0;

			_default = base.wrenchAnchor( (object)(user) );
			this.reconnect();
			return _default;
		}

		// Function from file: generator.dm
		public bool operable(  ) {
			return Lang13.Bool( this.circ1 ) && Lang13.Bool( this.circ2 ) && Lang13.Bool( this.anchored ) && !( ( this.stat & 3 ) != 0 );
		}

		// Function from file: generator.dm
		public void reconnect(  ) {
			
			if ( Lang13.Bool( this.circ1 ) ) {
				this.circ1.linked_generator = null;
				this.circ1 = null;
			}

			if ( Lang13.Bool( this.circ2 ) ) {
				this.circ2.linked_generator = null;
				this.circ2 = null;
			}

			if ( !( this.loc != null ) || !Lang13.Bool( this.anchored ) ) {
				return;
			}

			if ( ( this.dir & 12 ) != 0 ) {
				this.circ1 = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Binary_Circulator), Map13.GetStep( this, ((int)( GlobalVars.EAST )) ) );

				if ( Lang13.Bool( this.circ1 ) && !Lang13.Bool( this.circ1.anchored ) ) {
					this.circ1 = null;
				}
				this.circ2 = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Binary_Circulator), Map13.GetStep( this, ((int)( GlobalVars.WEST )) ) );

				if ( Lang13.Bool( this.circ2 ) && !Lang13.Bool( this.circ2.anchored ) ) {
					this.circ2 = null;
				}

				if ( Lang13.Bool( this.circ1 ) && Lang13.Bool( this.circ2 ) ) {
					
					if ( Convert.ToDouble( this.circ1.dir ) != GlobalVars.SOUTH || Convert.ToDouble( this.circ2.dir ) != GlobalVars.NORTH ) {
						this.circ1 = null;
						this.circ2 = null;
					}
				}
			} else if ( ( this.dir & 3 ) != 0 ) {
				this.circ1 = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Binary_Circulator), Map13.GetStep( this, ((int)( GlobalVars.NORTH )) ) );
				this.circ2 = Lang13.FindIn( typeof(Obj_Machinery_Atmospherics_Binary_Circulator), Map13.GetStep( this, ((int)( GlobalVars.SOUTH )) ) );

				if ( Lang13.Bool( this.circ1 ) && Lang13.Bool( this.circ2 ) && ( Convert.ToDouble( this.circ1.dir ) != GlobalVars.EAST || Convert.ToDouble( this.circ2.dir ) != GlobalVars.WEST ) ) {
					this.circ1 = null;
					this.circ2 = null;
				}
			}

			if ( Lang13.Bool( this.circ1 ) ) {
				this.circ1.linked_generator = this;
			}

			if ( Lang13.Bool( this.circ2 ) ) {
				this.circ2.linked_generator = this;
			}
			this.update_icon();
			this.updateUsrDialog();
			return;
		}

		// Function from file: generator.dm
		public void init_ui(  ) {
			this.v_interface.updateLayout( @"
	<div class=""item"">
		<div class=""itemLabel"">
			Total output:
		</div>
		<div class=""itemContent"" id=""total_out"">
			X
		</div>
	</div>
	<div class=""item"">
		<div class=""itemLabel"">
			Thermal output:
		</div>
		<div class=""itemContent"" id=""thermal_out"">
			X
		</div>
	</div>
	<div id=""operatable"">
	<table style=""width: 100%; font-size: 12px;"">
		<tr>
			<td>
				<div class=""statusDisplay"">
					<h1 id=""circ1"">
						Primary Circulator (right)
					</h1>
					<div class=""item"">
						<div class=""itemLabel"">
							Turbine Output:
						</div>
						<div class=""itemContent"" id=""circ1_turbine"">
							X
						</div>
					</div>
					<div class=""item"">
						<div class=""itemLabel"">
							Flow Capacity:
						</div>
						<div class=""itemContent"" id=""circ1_flow_cap"">
							X
						</div>
					</div>
					<br>
					<br>
					<div class=""item"">
						<div class=""itemLabel"">
							Inlet Pressure:
						</div>
						<div class=""itemContent"" id=""circ1_in_pressure"">
							X
						</div>
					</div>
					<div class=""item"">
						<div class=""itemLabel"">
							Inlet Temperature:
						</div>
						<div class=""itemContent"" id=""circ1_in_temp"">
							X
						</div>
					</div>
					<br>
					<br>
					<div class=""item"">
						<div class=""itemLabel"">
							Outlet Pressure:
						</div>
						<div class=""itemContent"" id=""circ1_out_pressure"">
							X
						</div>
					</div>
					<div class=""item"">
						<div class=""itemLabel"">
							Outlet Temperature:
						</div>
						<div class=""itemContent"" id=""circ1_out_temp"">
							X
						</div>
					</div><br><br>
				</div>
			</td>
			<td>
				<div class=""statusDisplay"">
					<h1 id=""circ2"">
						Secondary Circulator (left)
					</h1>
					<div class=""item"">
						<div class=""itemLabel"">
							Turbine Output:
						</div>
						<div class=""itemContent"" id=""circ2_turbine"">
							X
						</div>
					</div>
					<div class=""item"">
						<div class=""itemLabel"">
							Flow Capacity:
						</div>
						<div class=""itemContent"" id=""circ2_flow_cap"">
							X
						</div>
					</div>
					<br>
					<br>
					<div class=""item"">
						<div class=""itemLabel"">
							Inlet Pressure:
						</div>
						<div class=""itemContent"" id=""circ2_in_pressure"">
							X
						</div>
					</div>
					<div class=""item"">
						<div class=""itemLabel"">
							Inlet Temperature:
						</div>
						<div class=""itemContent"" id=""circ2_in_temp"">
							X
						</div>
					</div>
					<br>
					<br>
					<div class=""item"">
						<div class=""itemLabel"">
							Outlet Pressure:
						</div>
						<div class=""itemContent"" id=""circ2_out_pressure"">
							X
						</div>
					</div>
					<div class=""item"">
						<div class=""itemLabel"">
							Outlet Temperature:
						</div>
						<div class=""itemContent"" id=""circ2_out_temp"">
							X
						</div>
					</div><br><br>
				</div>
			</td>
		</tr>
	</table>
	</div>
	<div id=""n_operatable"" class=""notice"" style=""display: none;"">
		Unable to connect to circulators. <br>
		Ensure both are in position and wrenched into place.
	</div>
	" );
			return;
		}

		// Function from file: generator.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			_default = base.Destroy( (object)(brokenup) );

			if ( Lang13.Bool( this.circ1 ) ) {
				this.circ1.linked_generator = null;
				this.circ1 = null;
			}

			if ( Lang13.Bool( this.circ2 ) ) {
				this.circ2.linked_generator = null;
				this.circ2 = null;
			}
			GlobalFuncs.qdel( this.v_interface );
			this.v_interface = null;
			GlobalVars.html_machines.Remove( this );
			return _default;
		}

		// Function from file: generator.dm
		[Verb]
		[VerbInfo( name: "Rotate Generator (Counterclockwise)", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_anticlock(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() || Lang13.Bool( this.anchored ) ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, -90 );
			return;
		}

		// Function from file: generator.dm
		[Verb]
		[VerbInfo( name: "Rotate Generator (Clockwise)", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_clock(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() || Lang13.Bool( this.anchored ) ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return;
		}

	}

}