// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Storage_Lockbox_Vials : Obj_Item_Weapon_Storage_Lockbox {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_hold = new ByTable(new object [] { "/obj/item/weapon/reagent_containers/glass/beaker/vial" });
			this.storage_slots = 6;
			this.req_access = new ByTable(new object [] { 39 });
			this.icon = "icons/obj/vialbox.dmi";
			this.icon_state = "vialbox0";
		}

		// Function from file: fancy.dm
		public Obj_Item_Weapon_Storage_Lockbox_Vials ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: fancy.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );
			this.update_icon();
			return _default;
		}

		// Function from file: fancy.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			location = location ?? 0;

			double total_contents = 0;

			total_contents = this.contents.len - Convert.ToDouble( location );
			this.icon_state = "vialbox" + total_contents;
			this.overlays.len = 0;

			if ( !this.broken ) {
				this.overlays.Add( new Image( this.icon, this, "led" + this.locked ) );

				if ( this.locked ) {
					this.overlays.Add( new Image( this.icon, this, "cover" ) );
				}
			} else {
				this.overlays.Add( new Image( this.icon, this, "ledb" ) );
			}
			return null;
		}

	}

}