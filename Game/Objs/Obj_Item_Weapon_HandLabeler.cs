// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_HandLabeler : Obj_Item_Weapon {

		public string label = null;
		public int? chars_left = 250;
		public bool mode = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "labeler0";
			this.origin_tech = "materials=1";
			this.icon = "icons/obj/bureaucracy.dmi";
			this.icon_state = "labeler0";
		}

		public Obj_Item_Weapon_HandLabeler ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: handlabeler.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( Lang13.Bool( this.chars_left ) ) {
				GlobalFuncs.to_chat( user, "<span class='info'>There " + ( ( this.chars_left ??0) > 1 ? "are " + this.chars_left + " letters" : "is one letter" ) + " worth of label on the roll.</span>" );
			} else {
				GlobalFuncs.to_chat( user, "<span class='info'>The label roll is all used up.</span>" );
			}
			return null;
		}

		// Function from file: handlabeler.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Item_Device_LabelRoll LR = null;

			
			if ( !this.mode && ((Mob)a).get_inactive_hand() == this ) {
				LR = new Obj_Item_Device_LabelRoll( a, this.chars_left );
				((Mob)a).put_in_hands( LR );
				GlobalFuncs.to_chat( a, "<span class='notice'>You remove the label roll.</span>" );
				this.chars_left = 0;
				this.icon_state = "labeler_e";
			} else {
				base.attack_hand( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: handlabeler.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic LR = null;
			int? holder = null;

			
			if ( a is Obj_Item_Device_LabelRoll ) {
				
				if ( this.mode ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>Turn it off first.</span>" );
					return null;
				}
				LR = a;
				holder = this.chars_left;
				this.chars_left = Lang13.IntNullable( LR.left );

				if ( Lang13.Bool( holder ) ) {
					LR.left = holder;
					GlobalFuncs.to_chat( b, "<span class='notice'>You switch the label rolls.</span>" );
				} else {
					GlobalFuncs.qdel( LR );
					LR = null;
					GlobalFuncs.to_chat( b, "<span class='notice'>You replace the label roll.</span>" );
					this.icon_state = "labeler0";
				}
			}
			return null;
		}

		// Function from file: handlabeler.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string str = null;

			
			if ( !Lang13.Bool( this.chars_left ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>It's empty.</span>" );
				return null;
			}
			this.mode = !this.mode;
			this.icon_state = "labeler" + this.mode;

			if ( this.mode ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You turn on " ).the( this ).item().str( ".</span>" ).ToString() );
				str = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( user, "Label text?", "Set label", "", null, InputType.Any ) ), 1, Num13.MinInt( 26, this.chars_left ??0 ) );

				if ( !Lang13.Bool( str ) || !( Lang13.Length( str ) != 0 ) ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>Invalid text.</span>" );
					return null;
				}
				this.label = str;
				GlobalFuncs.to_chat( user, "<span class='notice'>You set the text to '" + str + "'.</span>" );
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You turn off " ).the( this ).item().str( ".</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: handlabeler.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			
			if ( !( flag == true ) ) {
				return false;
			}

			if ( !this.mode ) {
				return false;
			}

			if ( A == this.loc ) {
				return false;
			}

			if ( !Lang13.Bool( this.chars_left ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Out of label.</span>" );
				return false;
			}

			if ( !Lang13.Bool( this.label ) || !( Lang13.Length( this.label ) != 0 ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>No text set.</span>" );
				return false;
			}

			if ( Lang13.Length( A.name ) + Num13.MinInt( Lang13.Length( this.label ) + 2, this.chars_left ??0 ) > 64 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Label too big.</span>" );
				return false;
			}

			if ( A is Mob_Living_Carbon_Human ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You can't label humans.</span>" );
				return false;
			}

			if ( A is Mob_Living_Silicon ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You can't label cyborgs.</span>" );
				return false;
			}

			if ( A is Obj_Item_Weapon_ReagentContainers_Glass ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>The label can't stick to the " + A.name + ".  (Try using a pen)</span>" );
				return false;
			}

			if ( Lang13.Bool( A.labeled ) ) {
				((Ent_Static)A).remove_label();
			}
			A.labeled = " (" + this.label + ")";
			A.name = "" + A.name + " (" + this.label + ")";
			Lang13.Call( typeof(Ent_Static).GetMethod( "remove_label" ), A );

			if ( user.a_intent == "hurt" && A.min_harm_label != 0 ) {
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " labels " + A + " as " + this.label + "... with malicious intent!</span>", "<span class='warning'>You label " + A + " as " + this.label + "... with malicious intent!</span>" );
				A.harm_labeled = Num13.MinInt( Lang13.Length( this.label ) + 2, this.chars_left ??0 );
				((Ent_Static)A).harm_label_update();
			} else {
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " labels " + A + " as " + this.label + ".</span>", "<span class='notice'>You label " + A + " as " + this.label + ".</span>" );
			}
			this.chars_left = Num13.MaxInt( ( this.chars_left ??0) - ( Lang13.Length( this.label ) + 2 ), 0 );

			if ( !Lang13.Bool( this.chars_left ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>The labeler is empty.</span>" );
				this.mode = false;
				this.icon_state = "labeler_e";
				return false;
			}

			if ( ( this.chars_left ??0) < Lang13.Length( this.label ) + 2 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>The labeler is almost empty.</span>" );
				this.label = String13.SubStr( this.label, 1, Num13.MinInt( this.chars_left ??0, Lang13.Length( this.label ) + 1 ) );
			}
			return false;
		}

	}

}