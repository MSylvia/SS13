// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Trinary_Filter : Obj_Machinery_Atmospherics_Components_Trinary {

		public bool on = false;
		public double target_pressure = 101.32499694824219;
		public string filter_type = "";
		public double frequency = 0;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_unwrench = true;
			this.icon_state = "filter_off";
		}

		public Obj_Machinery_Atmospherics_Components_Trinary_Filter ( dynamic loc = null, int? process = null ) : base( (object)(loc), process ) {
			
		}

		// Function from file: filter.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic pressure = null;
			string filter_name = null;
			dynamic gas = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "power":
					this.on = !this.on;
					this.investigate_log( "was turned " + ( this.on ? "on" : "off" ) + " by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
					_default = GlobalVars.TRUE;
					break;
				case "pressure":
					pressure = _params["pressure"];

					if ( pressure == "max" ) {
						pressure = 4500;
						_default = GlobalVars.TRUE;
					} else if ( pressure == "input" ) {
						pressure = Interface13.Input( "New output pressure (0-" + 4500 + " kPa):", this.name, this.target_pressure, null, null, InputType.Num | InputType.Null );

						if ( !( pressure == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
							_default = GlobalVars.TRUE;
						}
					} else if ( String13.ParseNumber( pressure ) != null ) {
						pressure = String13.ParseNumber( pressure );
						_default = GlobalVars.TRUE;
					}

					if ( Lang13.Bool( _default ) ) {
						this.target_pressure = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( pressure ), 4500 ) );
						this.investigate_log( "was set to " + this.target_pressure + " kPa by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
					}
					break;
				case "filter":
					this.filter_type = "";
					filter_name = "nothing";
					gas = _params["mode"];

					if ( GlobalVars.meta_gas_info.Contains( gas ) ) {
						this.filter_type = gas;
						filter_name = GlobalVars.meta_gas_info[gas][2];
					}
					this.investigate_log( "was set to filter " + filter_name + " by " + GlobalFuncs.key_name( Task13.User ), "atmos" );
					_default = GlobalVars.TRUE;
					break;
			}
			this.update_icon();
			return _default;
		}

		// Function from file: filter.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable();
			data["on"] = this.on;
			data["pressure"] = Num13.Floor( this.target_pressure );
			data["max_pressure"] = Num13.Floor( 4500 );
			data["filter_type"] = this.filter_type;
			return data;
		}

		// Function from file: filter.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "atmos_filter", this.name, 470, 140, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: filter.dm
		public override void atmosinit( ByTable node_connects = null ) {
			this.set_frequency( this.frequency );
			base.atmosinit( node_connects ); return;
		}

		// Function from file: filter.dm
		public override int? process_atmos(  ) {
			dynamic air1 = null;
			dynamic air2 = null;
			dynamic air3 = null;
			dynamic output_starting_pressure = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			dynamic removed = null;
			GasMixture filtered_out = null;

			base.process_atmos();

			if ( !this.on ) {
				return 0;
			}

			if ( !( Lang13.Bool( this.nodes[1] ) && Lang13.Bool( this.nodes[2] ) && Lang13.Bool( this.nodes[3] ) ) ) {
				return 0;
			}
			air1 = this.airs[1];
			air2 = this.airs[2];
			air3 = this.airs[3];
			output_starting_pressure = air3.return_pressure();

			if ( Convert.ToDouble( output_starting_pressure ) >= this.target_pressure ) {
				return 1;
			}
			pressure_delta = this.target_pressure - Convert.ToDouble( output_starting_pressure );

			if ( Convert.ToDouble( air1.temperature ) > 0 ) {
				transfer_moles = pressure_delta * Convert.ToDouble( air3.volume ) / Convert.ToDouble( air1.temperature * 8.31 );
			}

			if ( transfer_moles > 0 ) {
				removed = air1.remove( transfer_moles );

				if ( !Lang13.Bool( removed ) ) {
					return null;
				}
				filtered_out = new GasMixture();
				filtered_out.temperature = removed.temperature;

				if ( Lang13.Bool( this.filter_type ) && Lang13.Bool( removed.gases[this.filter_type] ) ) {
					filtered_out.assert_gas( this.filter_type );
					filtered_out.gases[this.filter_type][1] = removed.gases[this.filter_type][1];
					removed.gases[this.filter_type][1] = 0;
					removed.garbage_collect();
				} else {
					filtered_out = null;
				}
				air2.merge( filtered_out );
				air3.merge( removed );
			}
			this.update_parents();
			return 1;
		}

		// Function from file: filter.dm
		public override void power_change(  ) {
			int old_stat = 0;

			old_stat = this.stat;
			base.power_change();

			if ( ( this.stat & 2 ) != 0 ) {
				this.on = false;
			}

			if ( old_stat != this.stat ) {
				this.update_icon();
			}
			return;
		}

		// Function from file: filter.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			
			if ( !( ( this.stat & 2 ) != 0 ) && this.on && Lang13.Bool( this.nodes[1] ) && Lang13.Bool( this.nodes[2] ) && Lang13.Bool( this.nodes[3] ) ) {
				this.icon_state = "filter_on" + ( this.flipped ? "_f" : "" );
				return;
			}
			this.icon_state = "filter_off" + ( this.flipped ? "_f" : "" );
			return;
		}

		// Function from file: filter.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			dynamic direction = null;
			Obj_Machinery_Atmospherics node = null;

			this.overlays.Cut();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _a;
				

				if ( Lang13.Bool( direction & this.initialize_directions ) ) {
					node = this.findConnecting( direction );

					if ( node != null ) {
						this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/trinary_devices.dmi", "cap", direction, node.pipe_color ) );
						continue;
					}
					this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/trinary_devices.dmi", "cap", direction ) );
				}
			}
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
			return false;
		}

		// Function from file: filter.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			return base.Destroy();
		}

		// Function from file: filter.dm
		public void set_frequency( double new_frequency = 0 ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency != 0 ) {
				this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			}
			return;
		}

	}

}