// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Turret : Obj_Machinery {

		public bool raised = false;
		public bool enabled = true;
		public bool lasers = false;
		public bool lasertype = true;
		public double health = 80;
		public Obj_Machinery_Turretcover cover = null;
		public int popping = 0;
		public bool wasvalid = false;
		public bool lastfired = false;
		public int shot_delay = 30;
		public Effect_Effect_System_SparkSpread spark_system = null;
		public dynamic cur_target = null;
		public bool targeting_active = false;
		public dynamic protected_area = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 45;
			this.anchored = 1;
			this.idle_power_usage = 50;
			this.active_power_usage = 300;
			this.icon = "icons/obj/turrets.dmi";
			this.icon_state = "grey_target_prism";
		}

		// Function from file: turrets.dm
		public Obj_Machinery_Turret ( dynamic loc = null ) : base( (object)(loc) ) {
			this.spark_system = new Effect_Effect_System_SparkSpread();
			this.spark_system.set_up( 5, 0, this );
			this.spark_system.attach( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: turrets.dm
		public override dynamic attack_alien( Mob user = null ) {
			
			if ( !( ( this.stat & 1 ) != 0 ) ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/slash.ogg", 25, 1, -1 );
				this.visible_message( "<span class='danger'>ÿ has slashed at ÿ!</span>", user, this );
				this.health -= 15;

				if ( this.health <= 0 ) {
					this.die();
				}
			} else {
				GlobalFuncs.to_chat( user, "<span class='good'>That object is useless to you.</span>" );
			}
			return null;
		}

		// Function from file: turrets.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			
			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				return null;
			}

			if ( !( ( this.stat & 1 ) != 0 ) ) {
				this.visible_message( "<span class='danger'>" + user + " " + ((dynamic)user).attacktext + " " + this + "!</span>" );
				user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>attacked " + this.name + "</font>" );
				this.health -= Convert.ToDouble( ((dynamic)user).melee_damage_upper );

				if ( this.health <= 0 ) {
					this.die();
				}
			} else {
				GlobalFuncs.to_chat( user, "<span class='warning'>That object is useless to you.</span>" );
			}
			return null;
		}

		// Function from file: turrets.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			if ( ( severity ??0) < 3 ) {
				this.die();
			}
			return false;
		}

		// Function from file: turrets.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			switch ((int)( severity )) {
				case 1:
					this.enabled = false;
					this.lasers = false;
					this.power_change();
					break;
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: turrets.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			((Mob)b).delayNextAttack( 10 );

			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/smash.ogg", 60, 1 );
			this.spark_system.start();
			this.health -= Convert.ToDouble( a.force * 0.5 );

			if ( this.health <= 0 ) {
				this.die();
			}
			return null;
		}

		// Function from file: turrets.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			this.health -= Convert.ToDouble( Proj.damage );
			base.bullet_act( (object)(Proj), (object)(def_zone) );

			if ( Rand13.PercentChance( 45 ) && Convert.ToDouble( Proj.damage ) > 0 ) {
				this.spark_system.start();
			}

			if ( this.health <= 0 ) {
				this.die();
			}
			return null;
		}

		// Function from file: turrets.dm
		public override dynamic process(  ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.cover == null ) {
				this.cover = new Obj_Machinery_Turretcover( this.loc );
				this.cover.host = this;
			}
			this.protected_area = this.get_protected_area();

			if ( !this.enabled || !Lang13.Bool( this.protected_area ) || this.protected_area.turretTargets.len <= 0 ) {
				
				if ( !this.isDown() && !this.isPopping() ) {
					this.popDown();
				}
				return null;
			}

			if ( !this.check_target( this.cur_target ) ) {
				this.cur_target = this.get_new_target();
			}

			if ( Lang13.Bool( this.cur_target ) ) {
				
				if ( !this.isPopping() ) {
					
					if ( this.isDown() ) {
						this.popUp();
						this.use_power = 2;
					} else {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							
							if ( !this.targeting_active ) {
								this.targeting_active = true;
								this.target();
								this.targeting_active = false;
							}
							return;
						}));
					}
				}

				if ( Rand13.PercentChance( 15 ) ) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/move1.wav", 60, 1 );
					} else {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/move2.wav", 60, 1 );
					}
				}
			} else if ( !this.isPopping() ) {
				
				if ( !this.isDown() ) {
					this.popDown();
					this.use_power = 1;
				}
			}
			return null;
		}

		// Function from file: turrets.dm
		public override dynamic power_change(  ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "grey_target_prism";
			} else if ( Lang13.Bool( this.powered() ) ) {
				
				if ( this.enabled ) {
					
					if ( this.lasers ) {
						this.icon_state = "orange_target_prism";
					} else {
						this.icon_state = "target_prism";
					}
				} else {
					this.icon_state = "grey_target_prism";
				}
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.icon_state = "grey_target_prism";
					this.stat |= 2;
					return;
				}));
			}
			return null;
		}

		// Function from file: turrets.dm
		public void die(  ) {
			this.health = 0;
			this.density = false;
			this.stat |= 1;
			this.icon_state = "destroyed_target_prism";

			if ( this.cover != null ) {
				GlobalFuncs.qdel( this.cover );
				this.cover = null;
			}
			Task13.Sleep( 3 );
			Icon13.Flick( "explosion", this );
			Task13.Schedule( 13, (Task13.Closure)(() => {
				GlobalFuncs.qdel( this );
				return;
			}));
			return;
		}

		// Function from file: turrets.dm
		public void popDown(  ) {
			
			if ( !this.isPopping() || this.popping == 1 ) {
				this.popping = -1;
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/open.wav", 60, 1 );

				if ( this.cover != null ) {
					Icon13.Flick( "popdown", this.cover );
					this.cover.icon_state = "turretCover";
				}
				Task13.Schedule( 10, (Task13.Closure)(() => {
					
					if ( this.popping == -1 ) {
						this.invisibility = 45;
						this.popping = 0;
					}
					return;
				}));
			}
			return;
		}

		// Function from file: turrets.dm
		public void popUp(  ) {
			
			if ( !this.isPopping() || this.popping == -1 ) {
				this.invisibility = 0;
				this.popping = 1;
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/turret/open.wav", 60, 1 );

				if ( this.cover != null ) {
					Icon13.Flick( "popup", this.cover );
					this.cover.icon_state = "openTurretCover";
				}
				Task13.Schedule( 10, (Task13.Closure)(() => {
					
					if ( this.popping == 1 ) {
						this.popping = 0;
					}
					return;
				}));
			}
			return;
		}

		// Function from file: turrets.dm
		public bool isDown(  ) {
			return this.invisibility != 0;
		}

		// Function from file: turrets.dm
		public void shootAt( dynamic target = null ) {
			dynamic T = null;
			dynamic U = null;
			string fire_sound = null;
			Game_Data A = null;

			T = GlobalFuncs.get_turf( this );
			U = GlobalFuncs.get_turf( target );
			fire_sound = "sound/weapons/laser.ogg";

			if ( !Lang13.Bool( T ) || !Lang13.Bool( U ) ) {
				return;
			}

			if ( this.lasers ) {
				
				switch ((bool)( this.lasertype )) {
					case 1:
						A = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Beam), this.loc );
						break;
					case 2:
						A = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Beam_Heavylaser), this.loc );
						fire_sound = "sound/weapons/lasercannonfire.ogg";
						break;
					case 3:
						A = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Beam_Pulse), this.loc );
						fire_sound = "sound/weapons/pulse.ogg";
						break;
					case 4:
						A = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Change), this.loc );
						fire_sound = "sound/weapons/radgun.ogg";
						break;
					case 5:
						A = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Beam_Lastertag_Blue), this.loc );
						break;
					case 6:
						A = GlobalFuncs.getFromPool( typeof(Obj_Item_Projectile_Beam_Lastertag_Red), this.loc );
						break;
				}
				this.f_use_power( 500 );
			} else {
				A = new Obj_Item_Projectile_Energy_Electrode( this.loc );
				fire_sound = "sound/weapons/Taser.ogg";
				this.f_use_power( 200 );
			}
			((dynamic)A).original = target;
			((dynamic)A).target = U;
			((dynamic)A).current = T;
			((dynamic)A).starting = T;
			((dynamic)A).yo = U.y - T.y;
			((dynamic)A).xo = U.x - T.x;
			GlobalFuncs.playsound( T, fire_sound, 50, 1 );
			((dynamic)A).OnFired();
			((Obj)A).process();
			return;
		}

		// Function from file: turrets.dm
		public void target(  ) {
			
			while (this != null && this.enabled && !( this.stat != 0 ) && this.check_target( this.cur_target )) {
				this.dir = Map13.GetDistance( this, this.cur_target );
				this.shootAt( this.cur_target );
				Task13.Sleep( this.shot_delay );
			}
			return;
		}

		// Function from file: turrets.dm
		public dynamic get_new_target(  ) {
			ByTable new_targets = null;
			dynamic new_target = null;
			Mob_Living_Carbon M = null;
			Obj_Mecha M2 = null;
			Obj_Structure_Bed_Chair_Vehicle V = null;
			Mob_Living_SimpleAnimal M3 = null;

			new_targets = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.protected_area.turretTargets, typeof(Mob_Living_Carbon) )) {
				M = _a;
				

				if ( !Lang13.Bool( M.stat ) && !Lang13.Bool( M.flags & 128 ) ) {
					
					if ( !( M.lying == true ) || this.lasers ) {
						new_targets.Add( M );
					}
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.protected_area.turretTargets, typeof(Obj_Mecha) )) {
				M2 = _b;
				

				if ( M2.occupant != null ) {
					new_targets.Add( M2 );
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.protected_area.turretTargets, typeof(Obj_Structure_Bed_Chair_Vehicle) )) {
				V = _c;
				

				if ( V.locked_atoms.len != 0 ) {
					new_targets.Add( V );
				}
			}

			foreach (dynamic _d in Lang13.Enumerate( this.protected_area.turretTargets, typeof(Mob_Living_SimpleAnimal) )) {
				M3 = _d;
				

				if ( !Lang13.Bool( M3.stat ) && !Lang13.Bool( M3.flags & 128 ) ) {
					new_targets.Add( M3 );
				}
			}

			if ( new_targets.len != 0 ) {
				new_target = Rand13.PickFromTable( new_targets );
			}
			return new_target;
		}

		// Function from file: turrets.dm
		public bool check_target( dynamic T = null ) {
			dynamic area_T = null;
			dynamic M = null;
			dynamic MC = null;
			dynamic ME = null;
			dynamic V = null;
			dynamic A = null;

			Interface13.Stat( null, this.protected_area.turretTargets.Contains( Lang13.Bool( T ) && Lang13.Bool( T ) ) );

			if ( false ) {
				area_T = GlobalFuncs.get_area( T );

				if ( !Lang13.Bool( area_T ) || area_T.type != this.protected_area.type ) {
					((Base_Static)this.protected_area).Exited( T );
					return false;
				}

				if ( T is Mob ) {
					M = T;

					if ( Lang13.Bool( M.flags & 128 ) ) {
						return false;
					}
				}

				if ( T is Mob_Living_Carbon ) {
					MC = T;

					if ( !Lang13.Bool( MC.stat ) ) {
						
						if ( !( MC.lying == true ) || this.lasers ) {
							return true;
						}
					}
				} else if ( T is Obj_Mecha ) {
					ME = T;

					if ( Lang13.Bool( ME.occupant ) ) {
						return true;
					}
				} else if ( T is Obj_Structure_Bed_Chair_Vehicle ) {
					V = T;

					if ( V.locked_atoms.len != 0 ) {
						return true;
					}
				} else if ( T is Mob_Living_SimpleAnimal ) {
					A = T;

					if ( !Lang13.Bool( A.stat ) ) {
						
						if ( this.lasers || A is Mob_Living_SimpleAnimal_Mouse ) {
							return true;
						}
					}
				}
			}
			return false;
		}

		// Function from file: turrets.dm
		public dynamic get_protected_area(  ) {
			dynamic TP = null;

			TP = GlobalFuncs.get_area( this );

			if ( TP is Zone_TurretProtected ) {
				return TP;
			}
			return null;
		}

		// Function from file: turrets.dm
		public void setState( bool enabled = false, bool lethal = false ) {
			this.enabled = enabled;
			this.lasers = lethal;
			this.power_change();
			return;
		}

		// Function from file: turrets.dm
		public bool isPopping(  ) {
			return this.popping != 0;
		}

	}

}