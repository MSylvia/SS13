// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Nuclearbomb : Obj_Machinery {

		public bool deployable = false;
		public bool extended = false;
		public double timeleft = 60;
		public int timing = 0;
		public string r_code = "ADMIN";
		public string code = "";
		public bool yes_code = false;
		public bool safety = true;
		public dynamic auth = null;
		public int removal_stage = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.use_power = 0;
			this.icon_state = "nuclearbomb0";
		}

		// Function from file: nuclearbomb.dm
		public Obj_Machinery_Nuclearbomb ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.r_code = "" + Rand13.Int( 10000, 99999 );
			return;
		}

		// Function from file: nuclearbomb.dm
		public void explode(  ) {
			int off_station = 0;
			dynamic bomb_location = null;
			dynamic GM = null;
			dynamic syndie_location = null;
			dynamic GM2 = null;

			
			if ( this.safety ) {
				this.timing = 0;
				return;
			}
			this.timing = -1;
			this.yes_code = false;
			this.safety = true;
			this.icon_state = "nuclearbomb3";
			GlobalFuncs.playsound( this, "sound/machines/Alarm.ogg", 100, 0, 5 );

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) ) {
				GlobalVars.ticker.mode.explosion_in_progress = true;
			}
			Task13.Sleep( 100 );
			GlobalVars.enter_allowed = false;
			off_station = 0;
			bomb_location = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( bomb_location ) && Lang13.Bool( bomb_location.z ) == true ) {
				
				if ( Convert.ToDouble( bomb_location.x ) < 48 || Convert.ToDouble( bomb_location.x ) > 208 || Convert.ToDouble( bomb_location.y ) < 48 || Convert.ToDouble( bomb_location.y ) > 208 ) {
					off_station = 1;
				}
			} else {
				off_station = 2;
			}

			if ( GlobalVars.ticker != null ) {
				
				if ( Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode.name == "nuclear emergency" ) {
					GM = GlobalVars.ticker.mode;
					syndie_location = Lang13.FindObj( typeof(Obj_Machinery_Computer_ShuttleControl_Syndicate) );

					if ( Lang13.Bool( syndie_location ) ) {
						GM.syndies_didnt_escape = ( Convert.ToDouble( syndie_location.z ) > 1 ? false : true );
					}
					GM.nuke_off_station = off_station;
				}
				GlobalVars.ticker.station_explosion_cinematic( off_station, null );

				if ( Lang13.Bool( GlobalVars.ticker.mode ) ) {
					GlobalVars.ticker.mode.explosion_in_progress = false;

					if ( GlobalVars.ticker.mode.name == "nuclear emergency" ) {
						GM2 = GlobalVars.ticker.mode;
						GM2.nukes_left--;
					} else {
						GlobalFuncs.to_chat( typeof(Game13), "<B>The station was destoyed by the nuclear blast!</B>" );
					}
					GlobalVars.ticker.mode.station_was_nuked = off_station < 2;
					GlobalVars.stat_collection.nuked++;

					if ( !Lang13.Bool( GlobalVars.ticker.mode.check_finished() ) ) {
						GlobalFuncs.to_chat( typeof(Game13), "<B>Resetting in 30 seconds!</B>" );
						GlobalFuncs.feedback_set_details( "end_error", "nuke - unhandled ending" );

						if ( GlobalVars.blackbox != null ) {
							GlobalVars.blackbox.save_all_data_to_sql();
						}
						GlobalFuncs.CallHook( "Reboot", new ByTable() );

						if ( GlobalVars.watchdog.waiting ) {
							GlobalFuncs.to_chat( typeof(Game13), "<span class='notice'><B>Server will shut down for an automatic update in a few seconds.</B></span>" );
							GlobalVars.watchdog.signal_ready();
							return;
						}
						Task13.Sleep( 300 );
						GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + "Rebooting due to nuclear detonation" ) );
						Game13.Reboot();
						return;
					}
				}
			}
			return;
		}

		// Function from file: nuclearbomb.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( this.timing == -1 ) {
				return false;
			} else {
				return base.blob_act( (object)(severity) );
			}
		}

		// Function from file: nuclearbomb.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: nuclearbomb.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic I = null;
			double? time = null;
			dynamic M = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( !Task13.User.canmove || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() ) {
				return null;
			}

			if ( !Lang13.Bool( Task13.User.dexterity_check() ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return 1;
			}

			if ( this.loc is Tile ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["auth"] ) ) {
					
					if ( Lang13.Bool( this.auth ) ) {
						this.auth.loc = this.loc;
						this.yes_code = false;
						this.auth = null;
					} else {
						I = Task13.User.get_active_hand();

						if ( I is Obj_Item_Weapon_Disk_Nuclear ) {
							Task13.User.drop_item( I, this, true );
							this.auth = I;
						}
					}
				}

				if ( Lang13.Bool( this.auth ) ) {
					
					if ( Lang13.Bool( href_list["type"] ) ) {
						
						if ( href_list["type"] == "E" ) {
							
							if ( this.code == this.r_code ) {
								this.yes_code = true;
								this.code = null;
							} else {
								this.code = "ERROR";
							}
						} else if ( href_list["type"] == "R" ) {
							this.yes_code = false;
							this.code = null;
						} else {
							this.code += "" + href_list["type"];

							if ( Lang13.Length( this.code ) > 5 ) {
								this.code = "ERROR";
							}
						}
					}

					if ( this.yes_code ) {
						
						if ( Lang13.Bool( href_list["time"] ) ) {
							time = String13.ParseNumber( href_list["time"] );
							this.timeleft += time ??0;
							this.timeleft = Num13.MinInt( Num13.MaxInt( Num13.Floor( this.timeleft ), 60 ), 600 );
						}

						if ( Lang13.Bool( href_list["timer"] ) ) {
							
							if ( this.timing == -1 ) {
								return null;
							}

							if ( this.safety ) {
								GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The safety is still on.</span>" );
								return null;
							}
							this.timing = !( this.timing != 0 ) ?1:0;

							if ( this.timing != 0 ) {
								this.icon_state = "nuclearbomb2";

								if ( !this.safety ) {
									GlobalVars.bomb_set = true;
								} else {
									GlobalVars.bomb_set = false;
								}
							} else {
								this.icon_state = "nuclearbomb1";
								GlobalVars.bomb_set = false;
							}
						}

						if ( Lang13.Bool( href_list["safety"] ) ) {
							this.safety = !this.safety;

							if ( this.safety ) {
								this.timing = 0;
								GlobalVars.bomb_set = false;
							}
						}

						if ( Lang13.Bool( href_list["anchor"] ) ) {
							
							if ( this.removal_stage == 5 ) {
								this.anchored = 0;
								this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " makes a highly unpleasant crunching noise. It looks like the anchoring bolts have been cut.</span>" ).ToString() );
								return null;
							}
							this.anchored = !Lang13.Bool( this.anchored );

							if ( Lang13.Bool( this.anchored ) ) {
								this.visible_message( "<span class='warning'>With a steely snap, bolts slide out of " + this + " and anchor it to the flooring.</span>" );
								GlobalFuncs.playsound( this, "sound/effects/bolt.ogg", 70, 1 );
							} else {
								this.visible_message( "<span class='warning'>The anchoring bolts slide back into the depths of " + this + ".</span>" );
							}
						}
					}
				}
				this.add_fingerprint( Task13.User );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( this, 1 ) )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) && M.machine == this ) {
						this.attack_hand( M );
					}
				}
			} else {
				Interface13.Browse( Task13.User, null, "window=nuclearbomb" );
				return null;
			}
			return null;
		}

		// Function from file: nuclearbomb.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			string message = null;

			
			if ( this.extended ) {
				((Mob)a).set_machine( this );
				dat = new Txt( "<TT><B>Nuclear Fission Explosive</B><BR>\nAuth. Disk: <A href='?src=" ).Ref( this ).str( ";auth=1'>" ).item( ( Lang13.Bool( this.auth ) ? "++++++++++" : "----------" ) ).str( "</A><HR>" ).ToString();

				if ( Lang13.Bool( this.auth ) ) {
					
					if ( this.yes_code ) {
						dat += new Txt( "\n<B>Status</B>: " ).item( ( this.timing != 0 ? "Func/Set" : "Functional" ) ).str( "-" ).item( ( this.safety ? "Safe" : "Engaged" ) ).str( "<BR>\n<B>Timer</B>: " ).item( this.timeleft ).str( "<BR>\n<BR>\nTimer: " ).item( ( this.timing != 0 ? "On" : "Off" ) ).str( " <A href='?src=" ).Ref( this ).str( ";timer=1'>Toggle</A><BR>\nTime: <A href='?src=" ).Ref( this ).str( ";time=-10'>-</A> <A href='?src=" ).Ref( this ).str( ";time=-1'>-</A> " ).item( this.timeleft ).str( " <A href='?src=" ).Ref( this ).str( ";time=1'>+</A> <A href='?src=" ).Ref( this ).str( ";time=10'>+</A><BR>\n<BR>\nSafety: " ).item( ( this.safety ? "On" : "Off" ) ).str( " <A href='?src=" ).Ref( this ).str( ";safety=1'>Toggle</A><BR>\nAnchor: " ).item( ( Lang13.Bool( this.anchored ) ? "Engaged" : "Off" ) ).str( " <A href='?src=" ).Ref( this ).str( ";anchor=1'>Toggle</A><BR>\n" ).ToString();
					} else {
						dat += "\n<B>Status</B>: Auth. S2-" + ( this.safety ? "Safe" : "Engaged" ) + "<BR>\n<B>Timer</B>: " + this.timeleft + "<BR>\n<BR>\nTimer: " + ( this.timing != 0 ? "On" : "Off" ) + " Toggle<BR>\nTime: - - " + this.timeleft + " + +<BR>\n<BR>\n" + ( this.safety ? "On" : "Off" ) + " Safety: Toggle<BR>\nAnchor: " + ( Lang13.Bool( this.anchored ) ? "Engaged" : "Off" ) + " Toggle<BR>\n";
					}
				} else if ( this.timing != 0 ) {
					dat += "\n<B>Status</B>: Set-" + ( this.safety ? "Safe" : "Engaged" ) + "<BR>\n<B>Timer</B>: " + this.timeleft + "<BR>\n<BR>\nTimer: " + ( this.timing != 0 ? "On" : "Off" ) + " Toggle<BR>\nTime: - - " + this.timeleft + " + +<BR>\n<BR>\nSafety: " + ( this.safety ? "On" : "Off" ) + " Toggle<BR>\nAnchor: " + ( Lang13.Bool( this.anchored ) ? "Engaged" : "Off" ) + " Toggle<BR>\n";
				} else {
					dat += "\n<B>Status</B>: Auth. S1-" + ( this.safety ? "Safe" : "Engaged" ) + "<BR>\n<B>Timer</B>: " + this.timeleft + "<BR>\n<BR>\nTimer: " + ( this.timing != 0 ? "On" : "Off" ) + " Toggle<BR>\nTime: - - " + this.timeleft + " + +<BR>\n<BR>\nSafety: " + ( this.safety ? "On" : "Off" ) + " Toggle<BR>\nAnchor: " + ( Lang13.Bool( this.anchored ) ? "Engaged" : "Off" ) + " Toggle<BR>\n";
				}
				message = "AUTH";

				if ( Lang13.Bool( this.auth ) ) {
					message = "" + this.code;

					if ( this.yes_code ) {
						message = "*****";
					}
				}
				dat += new Txt( "<HR>\n>" ).item( message ).str( "<BR>\n<A href='?src=" ).Ref( this ).str( ";type=1'>1</A>-<A href='?src=" ).Ref( this ).str( ";type=2'>2</A>-<A href='?src=" ).Ref( this ).str( ";type=3'>3</A><BR>\n<A href='?src=" ).Ref( this ).str( ";type=4'>4</A>-<A href='?src=" ).Ref( this ).str( ";type=5'>5</A>-<A href='?src=" ).Ref( this ).str( ";type=6'>6</A><BR>\n<A href='?src=" ).Ref( this ).str( ";type=7'>7</A>-<A href='?src=" ).Ref( this ).str( ";type=8'>8</A>-<A href='?src=" ).Ref( this ).str( ";type=9'>9</A><BR>\n<A href='?src=" ).Ref( this ).str( ";type=R'>R</A>-<A href='?src=" ).Ref( this ).str( ";type=0'>0</A>-<A href='?src=" ).Ref( this ).str( ";type=E'>E</A><BR>\n</TT>" ).ToString();
				Interface13.Browse( a, dat, "window=nuclearbomb;size=300x400" );
				GlobalFuncs.onclose( a, "nuclearbomb" );
			} else if ( this.deployable ) {
				
				if ( this.removal_stage < 5 ) {
					this.anchored = 1;
					this.visible_message( "<span class='notice'>With a steely snap, bolts slide out of " + this + " and anchor it to the flooring!</span>" );
				} else {
					this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " makes a highly unpleasant crunching noise. It looks like the anchoring bolts have been cut.</span>" ).ToString() );
				}
				Icon13.Flick( "nuclearbombc", this );
				this.icon_state = "nuclearbomb1";
				this.extended = true;
			}
			return null;
		}

		// Function from file: nuclearbomb.dm
		public override dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			
			if ( this.extended ) {
				return this.attack_hand( user );
			}
			return 0;
		}

		// Function from file: nuclearbomb.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: nuclearbomb.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;
			dynamic WT2 = null;

			
			if ( this.extended ) {
				
				if ( a is Obj_Item_Weapon_Disk_Nuclear ) {
					Task13.User.drop_item( a, this, true );
					this.auth = a;
					this.add_fingerprint( b );
					return null;
				}
			}

			if ( Lang13.Bool( this.anchored ) ) {
				
				switch ((int)( this.removal_stage )) {
					case 0:
						
						if ( a is Obj_Item_Weapon_Weldingtool ) {
							WT = a;

							if ( !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
								return null;
							}

							if ( ( ((Obj_Item_Weapon_Weldingtool)WT).get_fuel() ?1:0) < 5 ) {
								GlobalFuncs.to_chat( b, "<span class='warning'>You need more fuel to complete this task.</span>" );
								return null;
							}
							((Ent_Static)b).visible_message( "" + b + " starts cutting loose the anchoring bolt covers on " + this + ".", "You start cutting loose the anchoring bolt covers with " + a + "..." );

							if ( GlobalFuncs.do_after( b, this, 40 ) ) {
								
								if ( !( this != null ) || !Lang13.Bool( b ) || !Lang13.Bool( WT.remove_fuel( 5, b ) ) ) {
									return null;
								}
								((Ent_Static)b).visible_message( "" + b + " cuts through the bolt covers on " + this + ".", "You cut through the bolt cover." );
								this.removal_stage = 1;
							}
						}
						return null;
						break;
					case 1:
						
						if ( a is Obj_Item_Weapon_Crowbar ) {
							((Ent_Static)b).visible_message( "" + b + " starts forcing open the bolt covers on " + this + ".", "You start forcing open the anchoring bolt covers with " + a + "..." );

							if ( GlobalFuncs.do_after( b, this, 15 ) ) {
								
								if ( !( this != null ) || !Lang13.Bool( b ) ) {
									return null;
								}
								((Ent_Static)b).visible_message( "" + b + " forces open the bolt covers on " + this + ".", "You force open the bolt covers." );
								this.removal_stage = 2;
							}
						}
						return null;
						break;
					case 2:
						
						if ( a is Obj_Item_Weapon_Weldingtool ) {
							WT2 = a;

							if ( !((Obj_Item_Weapon_Weldingtool)WT2).isOn() ) {
								return null;
							}

							if ( ( ((Obj_Item_Weapon_Weldingtool)WT2).get_fuel() ?1:0) < 5 ) {
								GlobalFuncs.to_chat( b, "<span class='notice'>You need more fuel to complete this task.</span>" );
								return null;
							}
							((Ent_Static)b).visible_message( "" + b + " starts cutting apart the anchoring system sealant on " + this + ".", "You start cutting apart the anchoring system's sealant with " + a + "..." );

							if ( GlobalFuncs.do_after( b, this, 40 ) ) {
								
								if ( !( this != null ) || !Lang13.Bool( b ) || !Lang13.Bool( WT2.remove_fuel( 5, b ) ) ) {
									return null;
								}
								((Ent_Static)b).visible_message( "" + b + " cuts apart the anchoring system sealant on " + this + ".", "You cut apart the anchoring system's sealant." );
								this.removal_stage = 3;
							}
						}
						return null;
						break;
					case 3:
						
						if ( a is Obj_Item_Weapon_Wrench ) {
							((Ent_Static)b).visible_message( "" + b + " begins unwrenching the anchoring bolts on " + this + ".", "You begin unwrenching the anchoring bolts..." );

							if ( GlobalFuncs.do_after( b, this, 50 ) ) {
								
								if ( !( this != null ) || !Lang13.Bool( b ) ) {
									return null;
								}
								((Ent_Static)b).visible_message( "" + b + " unwrenches the anchoring bolts on " + this + ".", "You unwrench the anchoring bolts." );
								this.removal_stage = 4;
							}
						}
						return null;
						break;
					case 4:
						
						if ( a is Obj_Item_Weapon_Crowbar ) {
							((Ent_Static)b).visible_message( "" + b + " begins lifting " + this + " off of the anchors.", "You begin lifting the device off the anchors..." );

							if ( GlobalFuncs.do_after( b, this, 80 ) ) {
								
								if ( !( this != null ) || !Lang13.Bool( b ) ) {
									return null;
								}
								((Ent_Static)b).visible_message( "" + b + " crowbars " + this + " off of the anchors. It can now be moved.", "You jam the crowbar under the nuclear device and lift it off its anchors. You can now move it!" );
								this.anchored = 0;
								this.removal_stage = 5;
							}
						}
						return null;
						break;
				}
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: nuclearbomb.dm
		public override dynamic process(  ) {
			dynamic M = null;

			
			if ( this.timing != 0 ) {
				GlobalVars.bomb_set = true;
				this.timeleft--;

				if ( this.timeleft <= 0 ) {
					this.explode();
				}

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( this, 1 ) )) {
					M = _a;
					

					if ( Lang13.Bool( M.client ) && M.machine == this ) {
						this.attack_hand( M );
					}
				}
			}
			return null;
		}

		// Function from file: nuclearbomb.dm
		[Verb]
		[VerbInfo( name: "Make Deployable", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void make_deployable(  ) {
			
			if ( !( Task13.User != null ) || Task13.User.lying == true || Task13.User.isUnconscious() ) {
				return;
			}

			if ( !Lang13.Bool( Task13.User.dexterity_check() ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return;
			}

			if ( this.deployable ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You close several panels to make " + this + " undeployable.</span>" );
				this.deployable = false;
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You adjust some panels to make " + this + " deployable.</span>" );
				this.deployable = true;
			}
			return;
		}

	}

}