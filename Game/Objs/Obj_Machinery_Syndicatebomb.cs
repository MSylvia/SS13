// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Syndicatebomb : Obj_Machinery {

		public dynamic timer = 60;
		public bool open_panel = false;
		public bool active = false;
		public bool defused = false;
		public dynamic payload = typeof(Obj_Item_Weapon_Bombcore);
		public string beepsound = "sound/items/timer.ogg";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.unacidable = true;
			this.icon = "icons/obj/assemblies.dmi";
			this.icon_state = "syndicate-bomb";
			this.layer = 3.8;
		}

		// Function from file: syndicatebomb.dm
		public Obj_Machinery_Syndicatebomb ( dynamic loc = null ) : base( (object)(loc) ) {
			this.wires = new Wires_Syndicatebomb( this );
			this.payload = Lang13.Call( this.payload, this );
			this.update_icon();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: syndicatebomb.dm
		public void settings( dynamic user = null ) {
			dynamic newtime = null;
			dynamic bombturf = null;
			dynamic A = null;

			newtime = Interface13.Input( user, "Please set the timer.", "Timer", "" + this.timer, null, InputType.Num );
			newtime = Num13.MaxInt( 60, Num13.MinInt( Convert.ToInt32( newtime ), 60000 ) );

			if ( Map13.GetDistance( this, user ) <= 1 && user is Mob_Living ) {
				this.timer = newtime;
				this.loc.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " timer set for " ).item( this.timer ).str( " seconds.</span>" ).ToString() );
			}

			if ( Interface13.Alert( user, "Would you like to start the countdown now?", null, "Yes", "No" ) == "Yes" && Map13.GetDistance( this, user ) <= 1 && user is Mob_Living ) {
				
				if ( this.defused || this.active ) {
					
					if ( this.defused ) {
						this.loc.visible_message( new Txt( "<span class='warning'>" ).icon( this ).str( " Device error: User intervention required.</span>" ).ToString() );
					}
					return;
				} else {
					this.loc.visible_message( new Txt( "<span class='danger'>" ).icon( this ).str( " " ).item( this.timer ).str( " seconds until detonation, please clear the area.</span>" ).ToString() );
					GlobalFuncs.playsound( this.loc, "sound/machines/click.ogg", 30, 1 );
					this.active = true;
					this.update_icon();
					this.add_fingerprint( user );
					bombturf = GlobalFuncs.get_turf( this );
					A = GlobalFuncs.get_area( bombturf );

					if ( Lang13.Bool( this.payload ) && !( this.payload is Obj_Item_Weapon_Bombcore_Training ) ) {
						GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( user ) ).str( "<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( user ).str( "'>?</A> (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( user ).str( "'>FLW</A>) has primed a " ).item( this.name ).str( " (" ).item( this.payload ).str( ") for detonation at <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( bombturf.x ).str( ";Y=" ).item( bombturf.y ).str( ";Z=" ).item( bombturf.z ).str( "'>" ).item( A.name ).str( " (JMP)</a>." ).ToString() );
						GlobalFuncs.log_game( "" + GlobalFuncs.key_name( user ) + " has primed a " + this.name + " (" + this.payload + ") for detonation at " + A.name + "(" + bombturf.x + "," + bombturf.y + "," + bombturf.z + ")" );
						this.payload.adminlog = "The " + this.name + " that " + GlobalFuncs.key_name( user ) + " had primed detonated!";
					}
				}
			}
			return;
		}

		// Function from file: syndicatebomb.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.wires.interact( user );

			if ( !this.open_panel ) {
				
				if ( !this.active ) {
					this.settings( user );
					return null;
				} else if ( Lang13.Bool( this.anchored ) ) {
					user.WriteMsg( "<span class='warning'>The bomb is bolted to the floor!</span>" );
					return null;
				}
			}
			return null;
		}

		// Function from file: syndicatebomb.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return null;
		}

		// Function from file: syndicatebomb.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			this.interact( a );
			return null;
		}

		// Function from file: syndicatebomb.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Wrench ) {
				
				if ( !Lang13.Bool( this.anchored ) ) {
					
					if ( !( this.loc is Tile ) || this.loc is Tile_Space ) {
						user.WriteMsg( "<span class='notice'>The bomb must be placed on solid ground to attach it.</span>" );
					} else {
						user.WriteMsg( "<span class='notice'>You firmly wrench the bomb to the floor.</span>" );
						GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
						this.anchored = 1;

						if ( this.active ) {
							user.WriteMsg( "<span class='notice'>The bolts lock in place.</span>" );
						}
					}
				} else if ( !this.active ) {
					user.WriteMsg( "<span class='notice'>You wrench the bomb from the floor.</span>" );
					GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
					this.anchored = 0;
				} else {
					user.WriteMsg( "<span class='warning'>The bolts are locked down!</span>" );
				}
			} else if ( A is Obj_Item_Weapon_Screwdriver ) {
				this.open_panel = !this.open_panel;
				this.update_icon();
				user.WriteMsg( "<span class='notice'>You " + ( this.open_panel ? "open" : "close" ) + " the wire panel.</span>" );
			} else if ( Lang13.Bool( GlobalFuncs.is_wire_tool( A ) ) && this.open_panel ) {
				this.wires.interact( user );
			} else if ( A is Obj_Item_Weapon_Crowbar ) {
				
				if ( this.open_panel && Lang13.Bool( ((Wires)this.wires).is_all_cut() ) ) {
					
					if ( Lang13.Bool( this.payload ) ) {
						user.WriteMsg( "<span class='notice'>You carefully pry out " + this.payload + ".</span>" );
						this.payload.loc = user.loc;
						this.payload = null;
					} else {
						user.WriteMsg( "<span class='warning'>There isn't anything in here to remove!</span>" );
					}
				} else if ( this.open_panel ) {
					user.WriteMsg( "<span class='warning'>The wires connecting the shell to the explosives are holding it down!</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>The cover is screwed on, it won't pry off!</span>" );
				}
			} else if ( A is Obj_Item_Weapon_Bombcore ) {
				
				if ( !Lang13.Bool( this.payload ) ) {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					this.payload = A;
					user.WriteMsg( "<span class='notice'>You place " + this.payload + " into " + this + ".</span>" );
					this.payload.loc = this;
				} else {
					user.WriteMsg( "<span class='warning'>" + this.payload + " is already loaded into " + this + "! You'll have to remove it first.</span>" );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: syndicatebomb.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + ( this.active ? "-active" : "-inactive" ) + ( this.open_panel ? "-wires" : "" );
			return false;
		}

		// Function from file: syndicatebomb.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( "A digital display on it reads \"" + this.timer + "\"." );
			return 0;
		}

		// Function from file: syndicatebomb.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.wires );
			this.wires = null;
			return base.Destroy();
		}

		// Function from file: syndicatebomb.dm
		public override int? process( dynamic seconds = null ) {
			int? volume = null;

			
			if ( this.active && !this.defused && Convert.ToDouble( this.timer ) > 0 ) {
				volume = ( Convert.ToDouble( this.timer ) <= 10 ? 40 : 10 );
				GlobalFuncs.playsound( this.loc, this.beepsound, volume, 0 );
				this.timer--;
			}

			if ( this.active && !this.defused && Convert.ToDouble( this.timer ) <= 0 ) {
				this.active = false;
				this.timer = 60;
				this.update_icon();

				if ( Lang13.Bool( this.contents.Contains( this.payload ) ) ) {
					this.payload.detonate();
				}
				return null;
			}

			if ( !this.active || this.defused ) {
				
				if ( Lang13.Bool(this.defused && this.contents.Contains( this.payload ) ) ) {
					this.payload.defuse();
				}
				return null;
			}
			return null;
		}

	}

}