// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_MessageMonitor : Obj_Machinery_Computer {

		public string hack_icon = "comm_logsc";
		public string normal_icon = "comm_logs";
		public dynamic linkedServer = null;
		public Effect_Effect_System_SparkSpread spark_system = new Effect_Effect_System_SparkSpread();
		public string noserver = "<span class='alert'>ALERT: No server detected.</span>";
		public string incorrectkey = "<span class='warning'>ALERT: Incorrect decryption key!</span>";
		public string defaultmsg = "<span class='notice'>Welcome. Please select an option.</span>";
		public string rebootmsg = "<span class='warning'>%$&(ï¿½: Critical %$$@ Error // !RestArting! <lOadiNg backUp iNput ouTput> - ?pLeaSe wAit!</span>";
		public int screen = 0;
		public bool hacking = false;
		public string message = "<span class='notice'>System bootup complete. Please select an option.</span>";
		public bool auth = false;
		public int? optioncount = 7;
		public dynamic customsender = "System Administrator";
		public dynamic customrecepient = null;
		public dynamic customjob = "Admin";
		public dynamic custommessage = "This is a test, please ignore.";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/message_monitor";
			this.light_color = "#64C864";
			this.icon_state = "comm_logs";
		}

		public Obj_Machinery_Computer_MessageMonitor ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: message.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string dkey = null;
			string dkey2 = null;
			string newkey = null;
			ByTable sendPDAs = null;
			Obj_Item_Device_Pda P = null;
			Obj_Item_Device_Pda PDARec = null;
			Obj_Item_Device_Pda P2 = null;
			dynamic O = null;
			Ent_Static H = null;
			dynamic O2 = null;
			Ent_Static H2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			} else {
				
				if ( Lang13.Bool( href_list["auth"] ) ) {
					
					if ( this.auth ) {
						this.auth = false;
						this.screen = 0;
					} else {
						dkey = GlobalFuncs.trim( Interface13.Input( Task13.User, "Please enter the decryption key.", null, null, null, InputType.Str | InputType.Null ) );

						if ( Lang13.Bool( dkey ) && dkey != "" ) {
							
							if ( this.linkedServer.decryptkey == dkey ) {
								this.auth = true;
							} else {
								this.message = this.incorrectkey;
							}
						}
					}
				}

				if ( Lang13.Bool( href_list["active"] ) ) {
					
					if ( this.auth ) {
						this.linkedServer.active = !Lang13.Bool( this.linkedServer.active );
					}
				}

				if ( Lang13.Bool( href_list["find"] ) ) {
					
					if ( GlobalVars.message_servers != null && GlobalVars.message_servers.len > 1 ) {
						this.linkedServer = Interface13.Input( Task13.User, "Please select a server.", "Select a server.", null, GlobalVars.message_servers, InputType.Null | InputType.Any );
						this.message = "<span class='alert'>NOTICE: Server selected.</span>";
					} else if ( GlobalVars.message_servers != null && GlobalVars.message_servers.len > 0 ) {
						this.linkedServer = GlobalVars.message_servers[1];
						this.message = "<span class='notice'>NOTICE: Only Single Server Detected - Server selected.</span>";
					} else {
						this.message = this.noserver;
					}
				}

				if ( Lang13.Bool( href_list["view"] ) ) {
					
					if ( this.linkedServer == null || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
						this.message = this.noserver;
					} else if ( this.auth ) {
						this.screen = 1;
					}
				}

				if ( Lang13.Bool( href_list["clear"] ) ) {
					
					if ( !Lang13.Bool( this.linkedServer ) || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
						this.message = this.noserver;
					} else if ( this.auth ) {
						this.linkedServer.pda_msgs = new ByTable();
						this.message = "<span class='notice'>NOTICE: Logs cleared.</span>";
					}
				}

				if ( Lang13.Bool( href_list["clearr"] ) ) {
					
					if ( !Lang13.Bool( this.linkedServer ) || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
						this.message = this.noserver;
					} else if ( this.auth ) {
						this.linkedServer.rc_msgs = new ByTable();
						this.message = "<span class='notice'>NOTICE: Logs cleared.</span>";
					}
				}

				if ( Lang13.Bool( href_list["pass"] ) ) {
					
					if ( !Lang13.Bool( this.linkedServer ) || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
						this.message = this.noserver;
					} else if ( this.auth ) {
						dkey2 = GlobalFuncs.trim( Interface13.Input( Task13.User, "Please enter the decryption key.", null, null, null, InputType.Str | InputType.Null ) );

						if ( Lang13.Bool( dkey2 ) && dkey2 != "" ) {
							
							if ( this.linkedServer.decryptkey == dkey2 ) {
								newkey = GlobalFuncs.trim( Interface13.Input( Task13.User, "Please enter the new key (3 - 16 characters max):", null, null, null, InputType.Any ) );

								if ( Lang13.Length( newkey ) <= 3 ) {
									this.message = "<span class='notice'>NOTICE: Decryption key too short!</span>";
								} else if ( Lang13.Length( newkey ) > 16 ) {
									this.message = "<span class='notice'>NOTICE: Decryption key too long!</span>";
								} else if ( Lang13.Bool( newkey ) && newkey != "" ) {
									this.linkedServer.decryptkey = newkey;
								}
								this.message = "<span class='notice'>NOTICE: Decryption key set.</span>";
							} else {
								this.message = this.incorrectkey;
							}
						}
					}
				}

				if ( Lang13.Bool( href_list["hack"] ) ) {
					
					if ( ( Task13.User is Mob_Living_Silicon_Ai || Task13.User is Mob_Living_Silicon_Robot ) && Lang13.Bool( Task13.User.mind.special_role ) && Task13.User.mind.original == Task13.User ) {
						this.hacking = true;
						this.screen = 2;
						this.icon_state = this.hack_icon;
						Task13.Schedule( Lang13.Length( this.linkedServer.decryptkey ) * 100, (Task13.Closure)(() => {
							
							if ( this != null && Lang13.Bool( this.linkedServer ) && Task13.User != null ) {
								this.BruteForce( Task13.User );
							}
							return;
						}));
					}
				}

				if ( Lang13.Bool( href_list["delete"] ) ) {
					
					if ( this.screen == 1 ) {
						
						if ( !Lang13.Bool( this.linkedServer ) || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
							this.message = this.noserver;
						} else {
							this.linkedServer.pda_msgs.Remove( Lang13.FindObj( href_list["delete"] ) );
							this.message = "<span class='notice'>NOTICE: Log Deleted!</span>";
						}
					}
				}

				if ( Lang13.Bool( href_list["deleter"] ) ) {
					
					if ( this.screen == 4 ) {
						
						if ( !Lang13.Bool( this.linkedServer ) || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
							this.message = this.noserver;
						} else {
							this.linkedServer.rc_msgs.Remove( Lang13.FindObj( href_list["deleter"] ) );
							this.message = "<span class='notice'>NOTICE: Log Deleted!</span>";
						}
					}
				}

				if ( Lang13.Bool( href_list["msg"] ) ) {
					
					if ( this.linkedServer == null || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
						this.message = this.noserver;
					} else if ( this.auth ) {
						this.screen = 3;
					}
				}

				if ( Lang13.Bool( href_list["select"] ) ) {
					
					if ( this.linkedServer == null || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
						this.message = this.noserver;
						this.screen = 0;
					} else {
						
						dynamic _e = href_list["select"]; // Was a switch-case, sorry for the mess.
						if ( _e=="Reset" ) {
							this.ResetMessage();
						} else if ( _e=="Sender" ) {
							this.customsender = Interface13.Input( Task13.User, "Please enter the sender's name.", null, null, null, InputType.Str | InputType.Null );
						} else if ( _e=="Recepient" ) {
							sendPDAs = new ByTable();

							foreach (dynamic _a in Lang13.Enumerate( GlobalVars.PDAs, typeof(Obj_Item_Device_Pda) )) {
								P = _a;
								

								if ( !Lang13.Bool( P.owner ) || P.toff || P.hidden ) {
									continue;
								}
								sendPDAs.Add( P );
							}

							if ( GlobalVars.PDAs != null && GlobalVars.PDAs.len > 0 ) {
								this.customrecepient = Interface13.Input( Task13.User, "Select a PDA from the list.", null, null, GlobalFuncs.sortNames( sendPDAs ), InputType.Null | InputType.Any );
							} else {
								this.customrecepient = null;
							}
						} else if ( _e=="RecJob" ) {
							this.customjob = Interface13.Input( Task13.User, "Please enter the sender's job.", null, null, null, InputType.Str | InputType.Null );
						} else if ( _e=="Message" ) {
							this.custommessage = Interface13.Input( Task13.User, "Please enter your message.", null, null, null, InputType.Str | InputType.Null );
							this.custommessage = String13.SubStr( GlobalFuncs.sanitize( this.custommessage ), 1, 1024 );
						} else if ( _e=="Send" ) {
							
							if ( this.customsender == null || this.customsender == "" ) {
								this.customsender = "UNKNOWN";
							}

							if ( this.customrecepient == null ) {
								this.message = "<span class='notice'>NOTICE: No recepient selected!</span>";
								return this.attack_hand( Task13.User );
							}

							if ( this.custommessage == null || this.custommessage == "" ) {
								this.message = "<span class='notice'>NOTICE: No message entered!</span>";
								return this.attack_hand( Task13.User );
							}
							PDARec = null;

							foreach (dynamic _b in Lang13.Enumerate( GlobalVars.PDAs, typeof(Obj_Item_Device_Pda) )) {
								P2 = _b;
								

								if ( !Lang13.Bool( P2.owner ) || P2.toff || P2.hidden ) {
									continue;
								}

								if ( P2.owner == this.customsender ) {
									PDARec = P2;
								}
							}

							if ( PDARec == null ) {
								((Obj_Machinery_MessageServer)this.linkedServer).send_pda_message( "" + this.customrecepient.owner, "" + this.customsender, "" + this.custommessage );
								this.customrecepient.tnote += new Txt( "<i><b>&larr; From <a href='byond://?src=" ).Ref( this.customrecepient ).str( ";choice=Message;target=" ).Ref( this ).str( "'>" ).item( this.customsender ).str( "</a> (" ).item( this.customjob ).str( "):</b></i><br>" ).item( this.custommessage ).str( "<br>" ).ToString();

								if ( !Lang13.Bool( this.customrecepient.silent ) ) {
									GlobalFuncs.playsound( this.customrecepient.loc, "sound/machines/twobeep.ogg", 50, 1 );

									foreach (dynamic _c in Lang13.Enumerate( Map13.FetchHearers( this.customrecepient.loc, 3 ) )) {
										O = _c;
										
										O.show_message( new Txt().icon( this.customrecepient ).str( " *" ).item( this.customrecepient.ttone ).str( "*" ).ToString() );
									}

									if ( this.customrecepient.loc != null && this.customrecepient.loc is Mob_Living_Carbon_Human ) {
										H = this.customrecepient.loc;
										GlobalFuncs.to_chat( H, new Txt().icon( this.customrecepient ).str( " <b>Message from " ).item( this.customsender ).str( " (" ).item( this.customjob ).str( "), </b>\"" ).item( this.custommessage ).str( "\" (<a href='byond://?src=" ).Ref( this ).str( ";choice=Message;skiprefresh=1;target=" ).Ref( this ).str( "'>Reply</a>)" ).ToString() );
									}
									GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]PDA: " + ( "" + Task13.User + " (PDA: " + this.customsender + ") sent \"" + this.custommessage + "\" to " + this.customrecepient.owner ) ) );
									this.customrecepient.overlays.len = 0;
									this.customrecepient.overlays += new Image( "icons/obj/pda.dmi", "pda-r" );
								}
							} else {
								((Obj_Machinery_MessageServer)this.linkedServer).send_pda_message( "" + this.customrecepient.owner, "" + PDARec.owner, "" + this.custommessage );
								this.customrecepient.tnote += new Txt( "<i><b>&larr; From <a href='byond://?src=" ).Ref( this.customrecepient ).str( ";choice=Message;target=" ).Ref( PDARec ).str( "'>" ).item( PDARec.owner ).str( "</a> (" ).item( this.customjob ).str( "):</b></i><br>" ).item( this.custommessage ).str( "<br>" ).ToString();

								if ( !Lang13.Bool( this.customrecepient.silent ) ) {
									GlobalFuncs.playsound( this.customrecepient.loc, "sound/machines/twobeep.ogg", 50, 1 );

									foreach (dynamic _d in Lang13.Enumerate( Map13.FetchHearers( this.customrecepient.loc, 3 ) )) {
										O2 = _d;
										
										O2.show_message( new Txt().icon( this.customrecepient ).str( " *" ).item( this.customrecepient.ttone ).str( "*" ).ToString() );
									}

									if ( this.customrecepient.loc != null && this.customrecepient.loc is Mob_Living_Carbon_Human ) {
										H2 = this.customrecepient.loc;
										GlobalFuncs.to_chat( H2, new Txt().icon( this.customrecepient ).str( " <b>Message from " ).item( PDARec.owner ).str( " (" ).item( this.customjob ).str( "), </b>\"" ).item( this.custommessage ).str( "\" (<a href='byond://?src=" ).Ref( this.customrecepient ).str( ";choice=Message;skiprefresh=1;target=" ).Ref( PDARec ).str( "'>Reply</a>)" ).ToString() );
									}
									GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]PDA: " + ( "" + Task13.User + " (PDA: " + PDARec.owner + ") sent \"" + this.custommessage + "\" to " + this.customrecepient.owner ) ) );
									this.customrecepient.overlays.len = 0;
									this.customrecepient.overlays += new Image( "icons/obj/pda.dmi", "pda-r" );
								}
							}
							this.ResetMessage();
						}
					}
				}

				if ( Lang13.Bool( href_list["viewr"] ) ) {
					
					if ( this.linkedServer == null || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
						this.message = this.noserver;
					} else if ( this.auth ) {
						this.screen = 4;
					}
				}

				if ( Lang13.Bool( href_list["back"] ) ) {
					this.screen = 0;
				}
			}
			return this.attack_hand( Task13.User );
		}

		// Function from file: message.dm
		public void ResetMessage(  ) {
			this.customsender = "System Administrator";
			this.customrecepient = null;
			this.custommessage = "This is a test, please ignore.";
			this.customjob = "Admin";
			return;
		}

		// Function from file: message.dm
		public void UnmagConsole(  ) {
			this.icon_state = this.normal_icon;
			this.emagged = 0;
			return;
		}

		// Function from file: message.dm
		public void BruteForce( Mob user = null ) {
			string currentKey = null;

			
			if ( this.linkedServer == null ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Could not complete brute-force: Linked Server Disconnected!</span>" );
			} else {
				currentKey = this.linkedServer.decryptkey;
				GlobalFuncs.to_chat( user, "<span class='warning'>Brute-force completed! The key is '" + currentKey + "'.</span>" );
			}
			this.hacking = false;
			this.icon_state = this.normal_icon;
			this.screen = 0;
			return;
		}

		// Function from file: message.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: message.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			int i = 0;
			int? n = null;
			int index = 0;
			DataPdaMsg pda = null;
			int index2 = 0;
			DataRcMsg rc = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !( a is Mob_Living ) ) {
				return null;
			}

			if ( this.hacking || this.emagged != 0 ) {
				this.message = this.rebootmsg;
			}
			dat = "<head><title>Message Monitor Console</title></head><body>";
			dat += "<center><h2>Message Monitor Console</h2></center><hr>\n		<center><h4><font color='blue'" + this.message + "</h5></center>";

			if ( this.auth ) {
				dat += new Txt( "<h4><dd><A href='?src=" ).Ref( this ).str( ";auth=1'>&#09;<font color='green'>[Authenticated]</font></a>&#09;/\n			Server Power: <A href='?src=" ).Ref( this ).str( ";active=1'>" ).item( ( Lang13.Bool( this.linkedServer ) && Lang13.Bool( this.linkedServer.active ) ? "<font color='green'>[On]</font>" : "<font color='red'>[Off]</font>" ) ).str( "</a></h4>" ).ToString();
			} else {
				dat += new Txt( "<h4><dd><A href='?src=" ).Ref( this ).str( ";auth=1'>&#09;<font color='red'>[Unauthenticated]</font></a>&#09;/\n			Server Power: <u>" ).item( ( Lang13.Bool( this.linkedServer ) && Lang13.Bool( this.linkedServer.active ) ? "<font color='green'>[On]</font>" : "<font color='red'>[Off]</font>" ) ).str( "</u></h4>" ).ToString();
			}

			if ( this.hacking || this.emagged != 0 ) {
				this.screen = 2;
			} else if ( !this.auth || !Lang13.Bool( this.linkedServer ) || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
				
				if ( !Lang13.Bool( this.linkedServer ) || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
					this.message = this.noserver;
				}
				this.screen = 0;
			}

			switch ((int)( this.screen )) {
				case 0:
					i = 0;
					dat += new Txt( "<dd><A href='?src=" ).Ref( this ).str( ";find=1'>&#09;" ).item( ++i ).str( ". Link To A Server</a></dd>" ).ToString();

					if ( this.auth ) {
						
						if ( !Lang13.Bool( this.linkedServer ) || Lang13.Bool( this.linkedServer.stat & 3 ) ) {
							dat += "<dd><A>&#09;ERROR: Server not found!</A><br></dd>";
						} else {
							dat += new Txt( "<dd><A href='?src=" ).Ref( this ).str( ";view=1'>&#09;" ).item( ++i ).str( ". View Message Logs </a><br></dd>\n						<dd><A href='?src=" ).Ref( this ).str( ";viewr=1'>&#09;" ).item( ++i ).str( ". View Request Console Logs </a></br></dd>\n						<dd><A href='?src=" ).Ref( this ).str( ";clear=1'>&#09;" ).item( ++i ).str( ". Clear Message Logs</a><br></dd>\n						<dd><A href='?src=" ).Ref( this ).str( ";clearr=1'>&#09;" ).item( ++i ).str( ". Clear Request Console Logs</a><br></dd>\n						<dd><A href='?src=" ).Ref( this ).str( ";pass=1'>&#09;" ).item( ++i ).str( ". Set Custom Key</a><br></dd>\n						<dd><A href='?src=" ).Ref( this ).str( ";msg=1'>&#09;" ).item( ++i ).str( ". Send Admin Message</a><br></dd>" ).ToString();
						}
					} else {
						n = null;
						n = ++i;

						while (( n ??0) <= ( this.optioncount ??0)) {
							dat += "<dd><font color='blue'>&#09;" + n + ". ---------------</font><br></dd>";
							n++;
						}
					}

					if ( ( a is Mob_Living_Silicon_Ai || a is Mob_Living_Silicon_Robot ) && Lang13.Bool( a.mind.special_role ) && a.mind.original == a ) {
						dat += new Txt( "<dd><A href='?src=" ).Ref( this ).str( ";hack=1'><i><font color='Red'>*&@#. Bruteforce Key</font></i></font></a><br></dd>" ).ToString();
					} else {
						dat += "<br>";
					}

					if ( !this.auth ) {
						dat += "<br><hr><dd><span class='notice'>Please authenticate with the server in order to show additional options.</span>";
					} else {
						dat += "<br><hr><dd><span class='warning'>Reg, #514 forbids sending messages to a Head of Staff containing Erotic Rendering properties.</span>";
					}
					break;
				case 1:
					index = 0;
					dat += new Txt( "<center><A href='?src=" ).Ref( this ).str( ";back=1'>Back</a> - <A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</center><hr>\n				<table border='1' width='100%'><tr><th width = '5%'>X</th><th width='15%'>Sender</th><th width='15%'>Recipient</th><th width='300px' word-wrap: break-word>Message</th></tr>" ).ToString();

					foreach (dynamic _a in Lang13.Enumerate( this.linkedServer.pda_msgs, typeof(DataPdaMsg) )) {
						pda = _a;
						
						index++;

						if ( index > 3000 ) {
							break;
						}
						dat += new Txt( "<tr><td width = '5%'><center><A href='?src=" ).Ref( this ).str( ";delete=" ).Ref( pda ).str( "' style='color: rgb(255,0,0)'>X</a></center></td><td width='15%'>" ).item( pda.sender ).str( "</td><td width='15%'>" ).item( pda.recipient ).str( "</td><td width='300px'>" ).item( pda.message ).str( "</td></tr>" ).ToString();
					}
					dat += "</table>";
					break;
				case 2:
					
					if ( a is Mob_Living_Silicon_Ai || a is Mob_Living_Silicon_Robot ) {
						dat += "Brute-forcing for server key.<br> It will take 20 seconds for every character that the password has.\n					In the meantime, this console can reveal your true intentions if you let someone access it. Make sure no humans enter the room during that time.";
					} else {
						dat += @"01000010011100100111010101110100011001010010110<br>
				10110011001101111011100100110001101101001011011100110011<br>
				10010000001100110011011110111001000100000011100110110010<br>
				10111001001110110011001010111001000100000011010110110010<br>
				10111100100101110001000000100100101110100001000000111011<br>
				10110100101101100011011000010000001110100011000010110101<br>
				10110010100100000001100100011000000100000011100110110010<br>
				10110001101101111011011100110010001110011001000000110011<br>
				00110111101110010001000000110010101110110011001010111001<br>
				00111100100100000011000110110100001100001011100100110000<br>
				10110001101110100011001010111001000100000011101000110100<br>
				00110000101110100001000000111010001101000011001010010000<br>
				00111000001100001011100110111001101110111011011110111001<br>
				00110010000100000011010000110000101110011001011100010000<br>
				00100100101101110001000000111010001101000011001010010000<br>
				00110110101100101011000010110111001110100011010010110110<br>
				10110010100101100001000000111010001101000011010010111001<br>
				10010000001100011011011110110111001110011011011110110110<br>
				00110010100100000011000110110000101101110001000000111001<br>
				00110010101110110011001010110000101101100001000000111100<br>
				10110111101110101011100100010000001110100011100100111010<br>
				10110010100100000011010010110111001110100011001010110111<br>
				00111010001101001011011110110111001110011001000000110100<br>
				10110011000100000011110010110111101110101001000000110110<br>
				00110010101110100001000000111001101101111011011010110010<br>
				10110111101101110011001010010000001100001011000110110001<br>
				10110010101110011011100110010000001101001011101000010111<br>
				00010000001001101011000010110101101100101001000000111001<br>
				10111010101110010011001010010000001101110011011110010000<br>
				00110100001110101011011010110000101101110011100110010000<br>
				00110010101101110011101000110010101110010001000000111010<br>
				00110100001100101001000000111001001101111011011110110110<br>
				10010000001100100011101010111001001101001011011100110011<br>
				10010000001110100011010000110000101110100001000000111010<br>
				001101001011011010110010100101110";
					}
					break;
				case 3:
					dat += new Txt( "<center><A href='?src=" ).Ref( this ).str( ";back=1'>Back</a> - <A href='?src=" ).Ref( this ).str( ";Reset=1'>Reset</a></center><hr>" ).ToString();
					dat += new Txt( "<table border='1' width='100%'>\n					<tr><td width='20%'><A href='?src=" ).Ref( this ).str( ";select=Sender'>Sender</a></td>\n					<td width='20%'><A href='?src=" ).Ref( this ).str( ";select=RecJob'>Sender's Job</a></td>\n					<td width='20%'><A href='?src=" ).Ref( this ).str( ";select=Recepient'>Recipient</a></td>\n					<td width='300px' word-wrap: break-word><A href='?src=" ).Ref( this ).str( ";select=Message'>Message</a></td></tr>" ).ToString();
					dat += "<tr><td width='20%'>" + this.customsender + "</td>\n			<td width='20%'>" + this.customjob + "</td>\n			<td width='20%'>" + ( Lang13.Bool( this.customrecepient ) ? this.customrecepient.owner : "NONE" ) + "</td>\n			<td width='300px'>" + this.custommessage + "</td></tr>";
					dat += new Txt( "</table><br><center><A href='?src=" ).Ref( this ).str( ";select=Send'>Send</a>" ).ToString();
					break;
				case 4:
					index2 = 0;
					dat += new Txt( "<center><A href='?src=" ).Ref( this ).str( ";back=1'>Back</a> - <A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</center><hr>" ).ToString();
					dat += "<table border='1' width='100%'><tr><th width = '5%'>X</th><th width='15%'>Sending Dep.</th><th width='15%'>Receiving Dep.</th>\n			<th width='300px' word-wrap: break-word>Message</th><th width='15%'>Stamp</th><th width='15%'>ID Auth.</th><th width='15%'>Priority.</th></tr>";

					foreach (dynamic _b in Lang13.Enumerate( this.linkedServer.rc_msgs, typeof(DataRcMsg) )) {
						rc = _b;
						
						index2++;

						if ( index2 > 3000 ) {
							break;
						}
						dat += new Txt( "<tr><td width = '5%'><center><A href='?src=" ).Ref( this ).str( ";deleter=" ).Ref( rc ).str( "' style='color: rgb(255,0,0)'>X</a></center></td><td width='15%'>" ).item( rc.send_dpt ).str( "</td>\n				<td width='15%'>" ).item( rc.rec_dpt ).str( "</td><td width='300px'>" ).item( rc.message ).str( "</td><td width='15%'>" ).item( rc.stamp ).str( "</td><td width='15%'>" ).item( rc.id_auth ).str( "</td><td width='15%'>" ).item( rc.priority ).str( "</td></tr>" ).ToString();
					}
					dat += "</table>";
					break;
			}
			dat += "</body>";
			this.message = this.defaultmsg;
			Interface13.Browse( a, dat, "window=message;size=700x700" );
			GlobalFuncs.onclose( a, "message" );
			return null;
		}

		// Function from file: message.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			
			if ( !Lang13.Bool( this.linkedServer ) ) {
				
				if ( GlobalVars.message_servers != null && GlobalVars.message_servers.len > 0 ) {
					this.linkedServer = GlobalVars.message_servers[1];
				}
			}
			return false;
		}

		// Function from file: message.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.emagged != 0 || this.hacking ) {
				this.icon_state = this.hack_icon;
			} else {
				this.icon_state = this.normal_icon;
			}
			return null;
		}

		// Function from file: message.dm
		public override int emag( dynamic user = null ) {
			Obj_Item_Weapon_Paper_Monitorkey MK = null;

			
			if ( !( this.emagged != 0 ) ) {
				
				if ( !( this.linkedServer == null ) ) {
					this.icon_state = this.hack_icon;
					this.emagged = 1;
					this.screen = 2;
					this.spark_system.set_up( 5, 0, this );
					this.spark_system.start();
					MK = new Obj_Item_Weapon_Paper_Monitorkey();
					MK.loc = this.loc;
					MK.info += "<br><br><font color='red'>ï¿½%@%(*$%&(ï¿½&?*(%&ï¿½/{}</font>";
					Task13.Schedule( Lang13.Length( this.linkedServer.decryptkey ) * 100, (Task13.Closure)(() => {
						this.UnmagConsole();
						return;
					}));
					this.message = this.rebootmsg;
				} else {
					GlobalFuncs.to_chat( user, "<span class='notice'>A 'no server' error appears on the screen.</span>" );
				}
			}
			return 0;
		}

		// Function from file: message.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( b is Mob_Living ) ) {
				return null;
			}

			if ( a is Obj_Item_Weapon_Screwdriver && this.emagged != 0 ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>It is too hot to mess with!</span>" );
				return null;
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

	}

}