// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Bikehorn : Obj_Item_Weapon {

		public bool spam_flag = false;
		public string honksound = "sound/items/bikehorn.ogg";
		public int cooldowntime = 20;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "bike_horn";
			this.w_class = 1;
			this.throw_speed = 3;
			this.attack_verb = new ByTable(new object [] { "HONKED" });
			this.icon_state = "bike_horn";
		}

		public Obj_Item_Weapon_Bikehorn ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: clown_items.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			
			if ( O is Mob_Living ) {
				GlobalFuncs.playsound( this.loc, this.honksound, 50, 1, -1 );
			}
			base.Crossed( O, (object)(X) );
			return null;
		}

		// Function from file: clown_items.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !this.spam_flag ) {
				this.spam_flag = true;
				GlobalFuncs.playsound( this.loc, this.honksound, 50, 1 );
				this.add_fingerprint( user );
				Task13.Schedule( this.cooldowntime, (Task13.Closure)(() => {
					this.spam_flag = false;
					return;
				}));
			}
			return null;
		}

		// Function from file: clown_items.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( !this.spam_flag ) {
				GlobalFuncs.playsound( this.loc, this.honksound, 50, 1, -1 );
			}
			return base.attack( (object)(M), (object)(user), def_zone );
		}

		// Function from file: clown_items.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " solemnly points the horn at " ).his_her_its_their().str( " temple! It looks like " ).he_she_it_they().str( "'s trying to commit suicide..</span>" ).ToString() );
			GlobalFuncs.playsound( this.loc, this.honksound, 50, 1 );
			return 1;
		}

	}

}