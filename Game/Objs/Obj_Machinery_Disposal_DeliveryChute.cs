// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Disposal_DeliveryChute : Obj_Machinery_Disposal {

		public bool c_mode = false;
		public int doFlushIn = 0;
		public int num_contents = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "intake";
		}

		// Function from file: sortingmachinery.dm
		public Obj_Machinery_Disposal_DeliveryChute ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.processing_objects.Remove( this );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.trunk = Lang13.FindIn( typeof(Obj_Structure_Disposalpipe_Trunk), this.loc );

				if ( Lang13.Bool( this.trunk ) ) {
					this.trunk.linked = this;
				}
				return;
			}));
			return;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic process(  ) {
			
			if ( this.doFlushIn > 0 ) {
				
				if ( this.doFlushIn == 1 || this.num_contents >= 50 ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.f_flush();
						return;
					}));
				}
				this.doFlushIn--;
			}
			return null;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic W = null;
			Obj_Structure_Disposalconstruct C = null;

			
			if ( !Lang13.Bool( a ) || !Lang13.Bool( b ) ) {
				return null;
			}

			if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( !this.c_mode ) {
					this.c_mode = true;
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
					GlobalFuncs.to_chat( b, "You remove the screws around the power connection." );
					return null;
				} else if ( this.c_mode ) {
					this.c_mode = false;
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
					GlobalFuncs.to_chat( b, "You attach the screws around the power connection." );
					return null;
				}
			} else if ( a is Obj_Item_Weapon_Weldingtool && this.c_mode ) {
				W = a;

				if ( Lang13.Bool( W.remove_fuel( 0, b ) ) ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder2.ogg", 100, 1 );
					GlobalFuncs.to_chat( b, "You start slicing the floorweld off the delivery chute." );

					if ( GlobalFuncs.do_after( b, this, 20 ) ) {
						
						if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)W).isOn() ) {
							return null;
						}
						GlobalFuncs.to_chat( b, "You sliced the floorweld off the delivery chute." );
						C = new Obj_Structure_Disposalconstruct( this.loc );
						C.ptype = 8;
						C.update();
						C.anchored = 1;
						C.density = true;
						GlobalFuncs.qdel( this );
					}
					return null;
				} else {
					GlobalFuncs.to_chat( b, "You need more welding fuel to complete this task." );
					return null;
				}
			}
			return null;
		}

		// Function from file: sortingmachinery.dm
		[VerbInfo( name: "flush" )]
		public override void f_flush(  ) {
			bool deliveryCheck = false;
			Obj_Structure_Disposalholder H = null;
			Obj_Item_Delivery_Large O = null;
			Obj_Item_Delivery O2 = null;

			this.flushing = true;
			Icon13.Flick( "intake-closing", this );
			deliveryCheck = false;
			H = new Obj_Structure_Disposalholder();

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Delivery_Large) )) {
				O = _a;
				
				deliveryCheck = true;

				if ( O.sortTag == 0 ) {
					O.sortTag = "DISPOSALS";
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj_Item_Delivery) )) {
				O2 = _b;
				
				deliveryCheck = true;

				if ( O2.sortTag == 0 ) {
					O2.sortTag = "DISPOSALS";
				}
			}

			if ( !deliveryCheck ) {
				H.destinationTag = "DISPOSALS";
			}
			this.air_contents = new GasMixture();
			Task13.Sleep( 10 );
			GlobalFuncs.playsound( this, "sound/machines/disposalflush.ogg", 50, 0, 0 );
			Task13.Sleep( 5 );
			H.init( this );
			this.num_contents = 0;
			this.doFlushIn = 0;
			H.start( this );
			this.flushing = false;
			this.flush = 0;

			if ( this.mode == 2 ) {
				this.mode = 1;
			}
			this.update_icon();
			return;
		}

		// Function from file: sortingmachinery.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			Ent_Static O = null;
			Ent_Static M = null;

			
			if ( AM is Obj_Item_Projectile || AM is Obj_Item_Weapon_Dummy ) {
				return false;
			}

			if ( this.dir != Map13.GetDistance( this, AM ) ) {
				return false;
			}

			if ( AM is Obj ) {
				O = AM;
				O.loc = this;
			} else if ( AM is Mob ) {
				M = AM;
				M.loc = this;
			}
			this.doFlushIn = 5;
			this.num_contents++;
			return false;
		}

		// Function from file: sortingmachinery.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			return null;
		}

		// Function from file: sortingmachinery.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			return null;
		}

	}

}