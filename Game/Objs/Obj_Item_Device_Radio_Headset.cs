// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Radio_Headset : Obj_Item_Device_Radio {

		public dynamic keyslot2 = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "headset";
			this.materials = new ByTable().Set( "$metal", 75 );
			this.subspace_transmission = true;
			this.canhear_range = 0;
			this.slot_flags = 16;
			this.icon_state = "headset";
		}

		// Function from file: headset.dm
		public Obj_Item_Device_Radio_Headset ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.recalculateChannels();
			return;
		}

		// Function from file: headset.dm
		public override void recalculateChannels(  ) {
			dynamic ch_name = null;
			dynamic ch_name2 = null;

			base.recalculateChannels();

			if ( Lang13.Bool( this.keyslot2 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.keyslot2.channels )) {
					ch_name = _a;
					

					if ( this.channels.Contains( ch_name ) ) {
						continue;
					}
					this.channels.Add( ch_name );
					this.channels[ch_name] = this.keyslot2.channels[ch_name];
				}

				if ( Lang13.Bool( this.keyslot2.translate_binary ) ) {
					this.translate_binary = true;
				}

				if ( Lang13.Bool( this.keyslot2.translate_hive ) ) {
					this.translate_hive = true;
				}

				if ( Lang13.Bool( this.keyslot2.syndie ) ) {
					this.syndie = true;
				}

				if ( Lang13.Bool( this.keyslot2.centcom ) ) {
					this.centcom = true;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.channels )) {
				ch_name2 = _b;
				
				this.secure_radio_connections[ch_name2] = GlobalFuncs.add_radio( this, Lang13.DoubleNullable( GlobalVars.radiochannels[ch_name2] ) );
			}
			return;
		}

		// Function from file: headset.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic ch_name = null;
			dynamic T = null;
			dynamic T2 = null;

			((Mob)user).set_machine( this );

			if ( !( A is Obj_Item_Weapon_Screwdriver || A is Obj_Item_Device_Encryptionkey ) ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( Lang13.Bool( this.keyslot ) || Lang13.Bool( this.keyslot2 ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
						ch_name = _a;
						
						GlobalVars.SSradio.remove_object( this, Convert.ToDouble( GlobalVars.radiochannels[ch_name] ) );
						this.secure_radio_connections[ch_name] = null;
					}

					if ( Lang13.Bool( this.keyslot ) ) {
						T = GlobalFuncs.get_turf( user );

						if ( Lang13.Bool( T ) ) {
							this.keyslot.loc = T;
							this.keyslot = null;
						}
					}

					if ( Lang13.Bool( this.keyslot2 ) ) {
						T2 = GlobalFuncs.get_turf( user );

						if ( Lang13.Bool( T2 ) ) {
							this.keyslot2.loc = T2;
							this.keyslot2 = null;
						}
					}
					this.recalculateChannels();
					user.WriteMsg( "<span class='notice'>You pop out the encryption keys in the headset.</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>This headset doesn't have any unique encryption keys!  How useless...</span>" );
				}
			}

			if ( A is Obj_Item_Device_Encryptionkey ) {
				
				if ( Lang13.Bool( this.keyslot ) && Lang13.Bool( this.keyslot2 ) ) {
					user.WriteMsg( "<span class='warning'>The headset can't hold another key!</span>" );
					return null;
				}

				if ( !Lang13.Bool( this.keyslot ) ) {
					
					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}
					A.loc = this;
					this.keyslot = A;
				} else {
					
					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}
					A.loc = this;
					this.keyslot2 = A;
				}
				this.recalculateChannels();
			}
			return null;
		}

		// Function from file: headset.dm
		public override double? receive_range( dynamic freq = null, dynamic level = null, bool? AIuser = null ) {
			Ent_Static H = null;

			
			if ( this.loc is Mob_Living_Carbon_Human ) {
				H = this.loc;

				if ( ((dynamic)H).ears == this ) {
					return base.receive_range( (object)(freq), (object)(level), AIuser );
				}
			} else if ( AIuser == true ) {
				return base.receive_range( (object)(freq), (object)(level), AIuser );
			}
			return -1;
		}

		// Function from file: headset.dm
		public override void talk_into( dynamic M = null, dynamic input = null, dynamic channel = null, ByTable spans = null ) {
			
			if ( !this.listening ) {
				return;
			}
			base.talk_into( (object)(M), (object)(input), (object)(channel), spans );
			return;
		}

		// Function from file: headset.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.keyslot );
			GlobalFuncs.qdel( this.keyslot2 );
			this.keyslot = null;
			this.keyslot2 = null;
			return base.Destroy();
		}

	}

}