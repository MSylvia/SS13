// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Gps : Obj_Item_Device {

		public dynamic gpstag = "COM0";
		public bool emped = false;
		public Tile locked_location = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 2;
			this.slot_flags = 512;
			this.origin_tech = "programming=2;engineering=2";
			this.icon = "icons/obj/telescience.dmi";
			this.icon_state = "gps-c";
		}

		// Function from file: gps.dm
		public Obj_Item_Device_Gps ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.GPS_list.Add( this );
			this.name = "global positioning system (" + this.gpstag + ")";
			this.overlays.Add( "working" );
			return;
		}

		// Function from file: gps.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic a = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Lang13.Bool( href_list["tag"] ) ) {
				a = Interface13.Input( "Please enter desired tag.", this.name, this.gpstag, null, null, InputType.Str );
				a = String13.ToUpper( String13.SubStr( GlobalFuncs.sanitize( a ), 1, 5 ) );

				if ( this.loc == Task13.User ) {
					this.gpstag = a;
					this.name = "global positioning system (" + this.gpstag + ")";
					this.attack_self( Task13.User );
				}
			}
			return null;
		}

		// Function from file: gps.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string t = null;
			int gps_window_height = 0;
			Obj_Item_Device_Gps G = null;
			dynamic pos = null;
			dynamic gps_area = null;
			dynamic tracked_gpstag = null;
			Browser popup = null;

			t = "";
			gps_window_height = GlobalVars.GPS_list.len * 20 + 110;

			if ( this.emped ) {
				t += "ERROR";
			} else {
				t += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";tag=1'>Set Tag</A> " ).ToString();
				t += "<BR>Tag: " + this.gpstag;

				if ( this.locked_location != null && this.locked_location.loc != null ) {
					t += "<BR>Bluespace coordinates saved: " + this.locked_location.loc;
					gps_window_height += 20;
				}

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.GPS_list, typeof(Obj_Item_Device_Gps) )) {
					G = _a;
					
					pos = GlobalFuncs.get_turf( G );
					gps_area = GlobalFuncs.get_area( G );
					tracked_gpstag = G.gpstag;

					if ( G.emped ) {
						t += "<BR>" + tracked_gpstag + ": ERROR";
					} else {
						t += "<BR>" + tracked_gpstag + ": " + GlobalFuncs.format_text( gps_area.name ) + " (" + pos.x + ", " + pos.y + ", " + pos.z + ")";
					}
				}
			}
			popup = new Browser( user, "GPS", this.name, 360, Num13.MinInt( gps_window_height, 800 ) );
			popup.set_content( t );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: gps.dm
		public override double emp_act( int severity = 0 ) {
			this.emped = true;
			this.overlays.Remove( "working" );
			this.overlays.Add( "emp" );
			Task13.Schedule( 300, (Task13.Closure)(() => {
				this.emped = false;
				this.overlays.Remove( "emp" );
				this.overlays.Add( "working" );
				return;
			}));
			return 0;
		}

		// Function from file: gps.dm
		public override dynamic Destroy(  ) {
			GlobalVars.GPS_list.Remove( this );
			return base.Destroy();
		}

	}

}