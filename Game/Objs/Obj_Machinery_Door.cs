// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door : Obj_Machinery {

		public double base_layer = 2.7;
		public int secondsElectrified = 0;
		public bool visible = true;
		public int operating = 0;
		public bool autoclose = false;
		public bool glass = false;
		public bool normalspeed = true;
		public bool heat_proof = false;
		public bool air_properties_vary_with_direction = false;
		public int width = 1;
		public dynamic jammed = null;
		public string prefix = null;
		public int animation_delay = 12;
		public int animation_delay_2 = 0;
		public dynamic c_animation = null;
		public string soundeffect = "sound/machines/airlock.ogg";
		public int explosion_block = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.penetration_dampening = 10;
			this.machine_flags = 2;
			this.forceinvertredraw = true;
			this.icon = "icons/obj/doors/door.dmi";
			this.icon_state = "door_closed";
			this.layer = 2.7;
			this.dir = 4;
		}

		// Function from file: door.dm
		public Obj_Machinery_Door ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.all_doors.Add( this );

			if ( this.density ) {
				this.layer = this.base_layer + 0.3;
				this.explosion_resistance = Lang13.Initial( this, "explosion_resistance" );
			} else {
				this.layer = this.base_layer;
				this.explosion_resistance = 0;
			}

			if ( this.width > 1 ) {
				Interface13.Stat( null, new ByTable(new object [] { GlobalVars.EAST, GlobalVars.WEST }).Contains( this.dir ) );

				if ( false ) {
					this.bound_width = this.width * Game13.icon_size;
					this.bound_height = Game13.icon_size;
				} else {
					this.bound_width = Game13.icon_size;
					this.bound_height = this.width * Game13.icon_size;
				}
			}
			this.update_nearby_tiles();
			return;
		}

		// Function from file: splash_simulation.dm
		public override bool liquid_pass(  ) {
			return !this.density;
		}

		// Function from file: door.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			this.update_nearby_tiles();
			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( this.width > 1 ) {
				Interface13.Stat( null, new ByTable(new object [] { GlobalVars.EAST, GlobalVars.WEST }).Contains( this.dir ) );

				if ( false ) {
					this.bound_width = this.width * Game13.icon_size;
					this.bound_height = Game13.icon_size;
				} else {
					this.bound_width = Game13.icon_size;
					this.bound_height = this.width * Game13.icon_size;
				}
			}
			this.update_nearby_tiles();
			return _default;
		}

		// Function from file: door.dm
		public override void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			base.change_area( (object)(oldarea), (object)(newarea) );
			this.name = GlobalFuncs.replacetext( this.name, oldarea, newarea );
			return;
		}

		// Function from file: door.dm
		public override bool forceMove( dynamic destination = null, int? no_tp = null ) {
			Ent_Static T = null;

			T = this.loc;
			base.forceMove( (object)(destination), no_tp );
			this.update_nearby_tiles( T );
			this.update_nearby_tiles();
			return false;
		}

		// Function from file: door.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			Effect_Effect_System_SparkSpread s = null;

			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 25 ) ) {
						GlobalFuncs.qdel( this );
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 80 ) ) {
						s = new Effect_Effect_System_SparkSpread();
						s.set_up( 2, 1, this );
						s.start();
					}
					break;
			}
			return false;
		}

		// Function from file: door.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( Rand13.PercentChance( ((int)( 20 / severity )) ) && ( this is Obj_Machinery_Door_Airlock || this is Obj_Machinery_Door_Window ) ) {
				this.open( 6 );
			}

			if ( Rand13.PercentChance( ((int)( 40 / severity )) ) ) {
				
				if ( this.secondsElectrified == 0 ) {
					this.secondsElectrified = -1;
					Task13.Schedule( 300, (Task13.Closure)(() => {
						this.secondsElectrified = 0;
						return;
					}));
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: door.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true ) {
				return false;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 2 ) != 0 ) {
				return !this.opacity;
			}
			return !this.density;
		}

		// Function from file: door.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.update_nearby_tiles();
			GlobalVars.all_doors.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: door.dm
		public override dynamic cultify(  ) {
			
			if ( this.invisibility != 100 ) {
				this.invisibility = 100;
				this.density = false;
				GlobalFuncs.anim( null, this, "icons/effects/effects.dmi", "breakdoor", null, 10 );
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: door.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( !this.density ) {
				this.icon_state = "" + this.prefix + "door_open";
			} else {
				this.icon_state = "" + this.prefix + "door_closed";
			}
			Task13.Sleep( this.animation_delay_2 );
			return null;
		}

		// Function from file: door.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 40 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: door.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( a is Obj_Item_Device_DetectiveScanner ) {
				return null;
			}

			if ( b is Mob_Living_Silicon_Robot ) {
				return null;
			}

			if ( !this.requiresID() ) {
				b = null;
			}

			if ( this.allowed( b ) ) {
				
				if ( !this.density ) {
					return this.close();
				} else {
					return this.open();
				}
			}
			GlobalFuncs.playsound( this.loc, "sound/machines/denied.ogg", 50, 1 );

			if ( this.density ) {
				this.door_animate( "deny" );
			}
			return null;
		}

		// Function from file: door.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic H = null;
			dynamic O = null;

			
			if ( Rand13.PercentChance( 40 ) && this.density && a is Mob_Living_Carbon_Human ) {
				H = a;

				if ( ((Mob_Living)H).getBrainLoss() >= 60 ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/bang.ogg", 25, 1 );

					if ( !( H.head is Obj_Item_Clothing_Head_Helmet ) ) {
						this.visible_message( "<span class='warning'>" + a + " headbutts the airlock.</span>" );
						((Mob)H).Stun( 8 );
						((Mob)H).Weaken( 5 );
						O = ((Mob_Living_Carbon_Human)H).get_organ( "head" );

						if ( Lang13.Bool( O.take_damage( 10, 0 ) ) ) {
							((Mob_Living)H).UpdateDamageIcon();
							O = null;
						}
					} else {
						this.visible_message( "<span class='warning'>" + a + " headbutts the airlock. Good thing they're wearing a helmet.</span>" );
					}
					H = null;
					return null;
				}
				H = null;
			}
			this.add_fingerprint( a );
			this.attackby( null, a );
			return null;
		}

		// Function from file: door.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			this.attack_hand( a );
			return null;
		}

		// Function from file: door.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			this.attack_hand( user );
			return null;
		}

		// Function from file: airlock.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			
			if ( this.panel_open ) {
				return false;
			}
			base.Bumped( AM, (object)(yes) );
			return false;
		}

		// Function from file: door.dm
		public override int projectile_check(  ) {
			
			if ( this.opacity ) {
				return 1;
			} else {
				return 2;
			}
		}

		// Function from file: update_triggers.dm
		public void update_freelok_sight(  ) {
			
			if ( !this.glass && GlobalVars.cameranet != null ) {
				GlobalVars.cameranet.updateVisibility( this, false );
			}
			return;
		}

		// Function from file: door.dm
		public void update_heat_protection( dynamic source = null ) {
			
			if ( source is Tile_Simulated ) {
				
				if ( this.density && ( this.opacity || this.heat_proof ) ) {
					source.thermal_conductivity = 0;
				} else {
					source.thermal_conductivity = Lang13.Initial( source, "thermal_conductivity" );
				}
			}
			return;
		}

		// Function from file: door.dm
		public bool update_nearby_tiles( dynamic T = null ) {
			
			if ( !( GlobalVars.air_master != null ) ) {
				return false;
			}

			if ( !Lang13.Bool( T ) ) {
				T = GlobalFuncs.get_turf( this );
			}
			this.update_heat_protection( T );
			GlobalVars.air_master.mark_for_update( T );
			this.update_freelok_sight();
			return true;
		}

		// Function from file: door.dm
		public virtual bool requiresID(  ) {
			return true;
		}

		// Function from file: door.dm
		public virtual bool CanAStarPass( Ent_Dynamic ID = null, int to_dir = 0 ) {
			return !this.density || this.check_access( ID );
		}

		// Function from file: door.dm
		public virtual bool close( bool? surpress_send = null ) {
			dynamic B = null;
			dynamic F = null;

			
			if ( this.density || this.operating != 0 || Lang13.Bool( this.jammed ) ) {
				return false;
			}
			this.operating = 1;
			this.door_animate( "closing" );
			this.layer = this.base_layer + 0.3;
			this.density = true;
			this.update_icon();

			if ( !this.glass ) {
				this.set_opacity( 1 );
				B = Lang13.FindIn( typeof(Obj_Effect_Beam), this.loc );

				if ( Lang13.Bool( B ) ) {
					GlobalFuncs.qdel( B );
				}
			}
			F = Lang13.FindIn( typeof(Obj_Fire), this.loc );

			if ( Lang13.Bool( F ) ) {
				GlobalFuncs.qdel( F );
			}
			this.update_nearby_tiles();
			this.operating = 0;
			return false;
		}

		// Function from file: door.dm
		[VerbInfo( name: "autoclose" )]
		public void f_autoclose(  ) {
			Obj_Machinery_Door A = null;

			A = this;

			if ( !A.density && !( A.operating != 0 ) && !Lang13.Bool( ((dynamic)A).locked ) && !Lang13.Bool( ((dynamic)A).welded ) && A.autoclose && !Lang13.Bool( A.jammed ) ) {
				this.close();
			}
			return;
		}

		// Function from file: door.dm
		public virtual bool open( int? surpress_send = null ) {
			
			if ( !this.density ) {
				return true;
			}

			if ( this.operating > 0 ) {
				return false;
			}

			if ( !( GlobalVars.ticker != null ) ) {
				return false;
			}

			if ( !( this.operating != 0 ) ) {
				this.operating = 1;
			}
			this.door_animate( "opening" );
			this.set_opacity( 0 );
			Task13.Sleep( 10 );
			this.layer = this.base_layer;
			this.density = false;
			this.explosion_resistance = 0;
			this.update_icon();
			this.set_opacity( 0 );
			this.update_nearby_tiles();

			if ( this.operating == 1 ) {
				this.operating = 0;
			}
			return true;
		}

		// Function from file: door.dm
		public virtual void door_animate( string animation = null ) {
			
			switch ((string)( animation )) {
				case "opening":
					Icon13.Flick( "" + this.prefix + "door_opening", this );
					break;
				case "closing":
					Icon13.Flick( "" + this.prefix + "door_closing", this );
					break;
			}
			Task13.Sleep( this.animation_delay );
			return;
		}

		// Function from file: door.dm
		public virtual void bump_open( Mob_Living user = null ) {
			
			if ( user.last_airflow > Game13.time - Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowDelay) ) ) ) {
				return;
			}
			this.add_fingerprint( user );

			if ( !this.requiresID() ) {
				user = null;
			}

			if ( this.allowed( user ) ) {
				this.open();
			} else if ( !( this.operating != 0 ) ) {
				GlobalFuncs.playsound( this.loc, "sound/machines/denied.ogg", 50, 1 );
				this.door_animate( "deny" );
			}
			return;
		}

		// Function from file: checkForMultipleDoors.dm
		public bool checkForMultipleDoors(  ) {
			Obj_Machinery_Door D = null;

			
			if ( !( this.loc != null ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Machinery_Door) )) {
				D = _a;
				

				if ( !( D is Obj_Machinery_Door_Window ) && D.density ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: adjacent.dm
		public override bool Adjacent( dynamic neighbor = null, dynamic recurse = null ) {
			bool _default = false;

			ByTable disable_throwpass = null;
			Obj_Machinery_Door D = null;
			Obj_Machinery_Door D2 = null;

			disable_throwpass = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.loc.contents - this, typeof(Obj_Machinery_Door) )) {
				D = _a;
				

				if ( Lang13.Bool( D.flags & 512 ) ) {
					D.throwpass = true;
					disable_throwpass.Add( D );
				}
			}
			_default = base.Adjacent( (object)(neighbor), (object)(recurse) );

			foreach (dynamic _b in Lang13.Enumerate( disable_throwpass, typeof(Obj_Machinery_Door) )) {
				D2 = _b;
				
				D2.throwpass = false;
			}
			return _default;
		}

	}

}