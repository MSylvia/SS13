// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe_LayerManifold : Obj_Machinery_Atmospherics_Pipe {

		public ByTable layer_nodes = new ByTable();
		public Obj_Machinery_Atmospherics other_node = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.baseicon = "manifoldlayer";
			this.initialize_directions = 3;
			this.volume = 260;
			this.pipe_flags = 2;
			this.icon = "icons/obj/atmospherics/pipe_manifold.dmi";
			this.icon_state = "manifoldlayer";
		}

		// Function from file: pipes.dm
		public Obj_Machinery_Atmospherics_Pipe_LayerManifold ( dynamic loc = null ) : base( (object)(loc) ) {
			int? pipelayer = null;

			pipelayer = null;
			pipelayer = 1;

			while (( pipelayer ??0) <= 5) {
				this.layer_nodes.Add( null );
				pipelayer += 1;
			}

			switch ((int)( this.dir )) {
				case 1:
				case 2:
					this.initialize_directions = 3;
					break;
				case 4:
				case 8:
					this.initialize_directions = 12;
					break;
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: pipes.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			int layer_mod = 0;

			
			if ( !( ( ((int)( direction ??0 )) & ((int)( this.initialize_directions ??0 )) ) != 0 ) ) {
				layer_mod = 0;

				if ( ( this.dir & 3 ) != 0 ) {
					
					if ( direction == GlobalVars.EAST ) {
						layer_mod = 1;
					} else {
						layer_mod = -1;
					}
				} else if ( direction == GlobalVars.SOUTH ) {
					layer_mod = 1;
				} else {
					layer_mod = -1;
				}
				((dynamic)M).ventcrawl_layer = ( Convert.ToDouble( ((dynamic)M).ventcrawl_layer + layer_mod ) <= 1 ? 1 : ( Convert.ToDouble( ((dynamic)M).ventcrawl_layer + layer_mod ) >= 5 ? 5 : Convert.ToInt32( ((dynamic)M).ventcrawl_layer + layer_mod ) ) );
				GlobalFuncs.to_chat( M, new Txt( "You align yourself with the " ).st_nd_rd( ((dynamic)M).ventcrawl_layer ).str( " output." ).ToString() );
				return 1;
			} else {
				
				if ( direction != this.dir && Convert.ToInt32( ((dynamic)M).ventcrawl_layer ) != 3 ) {
					((dynamic)M).ventcrawl_layer = 3;
					GlobalFuncs.to_chat( M, new Txt( "You are redirected into the " ).st_nd_rd( ((dynamic)M).ventcrawl_layer ).str( " piping layer." ).ToString() );
				}
				return base.relaymove( M, direction );
			}
		}

		// Function from file: pipes.dm
		public override dynamic Entered( Ent_Dynamic Obj = null, Ent_Static oldloc = null ) {
			return null;
		}

		// Function from file: pipes.dm
		public override bool getNodeType( dynamic node_id = null ) {
			return false;
		}

		// Function from file: pipes.dm
		public override bool isConnectable( Obj_Machinery_Atmospherics target = null, dynamic direction = null, int? given_layer = null ) {
			
			if ( direction == Num13.Rotate( this.dir, 180 ) ) {
				return given_layer == 3;
			}
			return base.isConnectable( target, (object)(direction), given_layer );
		}

		// Function from file: pipes.dm
		public override void findAllConnections( double? connect_dirs = null ) {
			dynamic direction = null;
			int? i = null;
			Obj_Machinery_Atmospherics found = null;
			bool node_type = false;
			Obj_Machinery_Atmospherics found2 = null;
			bool node_type2 = false;

			
			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _c;
				

				if ( ( ((int)( connect_dirs ??0 )) & Convert.ToInt32( direction ) ) != 0 ) {
					
					if ( direction == this.dir ) {
						i = null;
						i = 1;

						while (( i ??0) <= 5) {
							found = null;
							node_type = this.getNodeType( i );

							switch ( node_type ) {
								case false:
									found = this.findConnecting( direction, i );
									break;
								case true:
									found = this.findConnectingHE( direction, i );
									break;
								default:
									GlobalFuncs.error( "UNKNOWN RESPONSE FROM " + this.type + "/getNodeType(" + i + "): " + node_type );
									return;
									break;
							}

							if ( !( found != null ) ) {
								
							} else {
								this.layer_nodes[i] = found;
							}
							i += 1;
						}
					} else {
						found2 = null;
						node_type2 = this.getNodeType( direction );

						switch ((bool)( node_type2 )) {
							case 0:
								found2 = this.findConnecting( direction );
								break;
							case 1:
								found2 = this.findConnectingHE( direction );
								break;
							default:
								GlobalFuncs.error( "UNKNOWN RESPONSE FROM " + this.type + "/getNodeType(" + direction + "): " + node_type2 );
								break;
						}

						if ( !( found2 != null ) ) {
							continue;
						}
						this.other_node = found2;
					}
				}
			}
			return;
		}

		// Function from file: pipes.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			suppress_icon_check = suppress_icon_check ?? false;

			Ent_Static T = null;

			this.findAllConnections( this.initialize_directions );
			T = this.loc;
			this.hide( Lang13.BoolNullable( ((dynamic)T).intact ) );

			if ( !( suppress_icon_check == true ) ) {
				this.update_icon();
			}
			return false;
		}

		// Function from file: pipes.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			Icon con = null;
			int? pipelayer = null;
			int layer_diff = 0;
			Image con2 = null;

			this.overlays.len = 0;
			this.alpha = ( this.invisibility != 0 ? 128 : 255 );
			this.icon_state = this.baseicon;

			if ( this.other_node != null ) {
				con = new Icon( this.icon, "manifoldl_other_con" );
				this.overlays.Add( new Image( con, null, null, null, Num13.Rotate( this.dir, 180 ) ) );
			}
			pipelayer = null;
			pipelayer = 1;

			while (( pipelayer ??0) <= 5) {
				
				if ( Lang13.Bool( this.layer_nodes[pipelayer] ) ) {
					layer_diff = ( pipelayer ??0) - 3;
					con2 = new Image( new Icon( this.icon, "manifoldl_con", this.dir ) );
					con2.pixel_x = layer_diff * 5;
					con2.pixel_y = layer_diff * -5;
					this.overlays.Add( con2 );
				}
				pipelayer += 1;
			}

			if ( !( this.other_node != null ) && !Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Atmospherics), this.layer_nodes ) ) ) {
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic disconnect( Obj_Machinery_Atmospherics reference = null ) {
			int? pipelayer = null;

			
			if ( reference == this.other_node ) {
				
				if ( this.other_node is Obj_Machinery_Atmospherics_Pipe && !( this.parent == null ) ) {
					GlobalFuncs.returnToPool( this.parent );
				}
				this.other_node = null;
			} else {
				pipelayer = null;
				pipelayer = 1;

				while (( pipelayer ??0) <= 5) {
					
					if ( reference == this.layer_nodes[pipelayer] ) {
						
						if ( this.layer_nodes[pipelayer] is Obj_Machinery_Atmospherics_Pipe && !( this.parent == null ) ) {
							GlobalFuncs.returnToPool( this.parent );
						}
						this.layer_nodes[pipelayer] = null;
					}
					pipelayer += 1;
				}
			}
			this.update_icon();
			base.disconnect( reference );
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Machinery_Atmospherics node = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.layer_nodes, typeof(Obj_Machinery_Atmospherics) )) {
				node = _a;
				
				node.disconnect( this );
			}

			if ( this.other_node != null ) {
				this.other_node.disconnect( this );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			
			if ( !( this.parent != null ) ) {
				_default = base.process();
			}
			GlobalVars.atmos_machines.Remove( this );
			return _default;
		}

		// Function from file: pipes.dm
		public override ByTable pipeline_expansion(  ) {
			return this.layer_nodes + this.other_node;
		}

		// Function from file: pipes.dm
		public override void hide( bool? h = null ) {
			
			if ( this.level == 1 && this.loc is Tile_Simulated ) {
				this.invisibility = ( h == true ? 101 : 0 );
			}
			this.update_icon();
			return;
		}

		// Function from file: pipes.dm
		public override bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			Ent_Static T = null;
			Obj_Machinery_Atmospherics node = null;

			this.dir = pipe.dir;
			this.initialize_directions = pipe.get_pipe_dir();
			T = this.loc;
			this.level = ( Lang13.Bool( ((dynamic)T).intact ) ? 2 : 1 );
			this.initialize( true );

			if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Atmospherics), this.layer_nodes ) ) && !( this.other_node != null ) ) {
				GlobalFuncs.to_chat( usr, "<span class='warning'>There's nothing to connect this manifold to! A pipe segment must be connected to at least one other object!</span>" );
				return false;
			}
			this.update_icon();
			this.build_network();

			foreach (dynamic _a in Lang13.Enumerate( this.layer_nodes, typeof(Obj_Machinery_Atmospherics) )) {
				node = _a;
				
				node.initialize();
				node.build_network();
			}

			if ( this.other_node != null ) {
				this.other_node.initialize();
				this.other_node.build_network();
			}
			return true;
		}

		// Function from file: pipes.dm
		public override void setPipingLayer( int? new_layer = null ) {
			new_layer = new_layer ?? 3;

			this.piping_layer = 3;
			return;
		}

	}

}