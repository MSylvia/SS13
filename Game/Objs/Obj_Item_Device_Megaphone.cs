// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Megaphone : Obj_Item_Device {

		public bool spamcheck = false;
		public bool emagged = false;
		public int insults = 0;
		public ByTable insultmsg = new ByTable(new object [] { "FUCK EVERYONE!", "I'M A TATER!", "ALL SECURITY TO SHOOT ME ON SIGHT!", "I HAVE A BOMB!", "CAPTAIN IS A COMDOM!", "FOR THE SYNDICATE!" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "radio";
			this.w_class = 1;
			this.icon_state = "megaphone";
		}

		public Obj_Item_Device_Megaphone ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: megaphone.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Card_Emag && !this.emagged ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>You overload " ).the( this ).item().str( "'s voice synthesizer.</span>" ).ToString() );
				this.emagged = true;
				this.insults = Rand13.Int( 1, 3 );
				return null;
			}
			return null;
		}

		// Function from file: megaphone.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic H = null;
			string message = null;
			dynamic O = null;
			dynamic O2 = null;

			
			if ( Lang13.Bool( user.client ) ) {
				
				if ( ( user.client.prefs.muted & 1 ) != 0 ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>You cannot speak in IC (muted).</span>" );
					return null;
				}
			}

			if ( !( user is Mob_Living_Carbon_Human ) && ( !( user is Mob_Living_Silicon_Robot ) || user is Mob_Living_Silicon_Robot_Mommi ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You don't know how to use this!</span>" );
				return null;
			}
			H = user;

			if ( H is Mob_Living_Carbon_Human && ( H.miming || Lang13.Bool( H.silent ) ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You find yourself unable to speak at all.</span>" );
				return null;
			}

			if ( this.spamcheck ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " needs to recharge!</span>" ).ToString() );
				return null;
			}
			message = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( user, "Shout a message?", "Megaphone", null, null, InputType.Str ) ), 1, 1024 );

			if ( !Lang13.Bool( message ) ) {
				return null;
			}
			message = GlobalFuncs.capitalize( message );

			if ( this.loc == user && Task13.User.stat == 0 ) {
				
				if ( this.emagged ) {
					
					if ( this.insults != 0 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, user ) )) {
							O = _a;
							
							O.show_message( "<B>" + user + "</B> broadcasts, <FONT size=3>\"" + Rand13.PickFromTable( this.insultmsg ) + "\"</FONT>", 2 );
						}
						this.insults--;
					} else {
						GlobalFuncs.to_chat( user, "<span class='warning'>*BZZZZzzzzzt*</span>" );
					}
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, user ) )) {
						O2 = _b;
						
						O2.show_message( "<B>" + user + "</B> broadcasts, <FONT size=3>\"" + message + "\"</FONT>", 2 );
					}
				}
				this.spamcheck = true;
				Task13.Schedule( 20, (Task13.Closure)(() => {
					this.spamcheck = false;
					return;
				}));
				return null;
			}
			return null;
		}

	}

}