// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_CTransitTube : Obj_Structure {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/atmospherics/pipes/transit_tube.dmi";
			this.icon_state = "E-W";
			this.layer = 3.1;
		}

		public Obj_Structure_CTransitTube ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: transit_tube_construction.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Structure_TransitTube R = null;

			
			if ( A is Obj_Item_Weapon_Wrench ) {
				user.WriteMsg( "<span class='notice'>You start attaching the " + this.name + "...</span>" );
				this.add_fingerprint( user );

				if ( GlobalFuncs.do_after( user, 40 / A.toolspeed, null, this ) ) {
					
					if ( !( this != null ) ) {
						return null;
					}
					user.WriteMsg( "<span class='notice'>You attach the " + this.name + ".</span>" );
					R = this.buildtube();
					this.transfer_fingerprints_to( R );
					GlobalFuncs.qdel( this );
					return null;
				}
			}
			return null;
		}

		// Function from file: transit_tube_construction.dm
		public override bool AltClick( Mob user = null ) {
			base.AltClick( user );

			if ( user.incapacitated() ) {
				user.WriteMsg( "<span class='warning'>You can't do that right now!</span>" );
				return false;
			}

			if ( !( Map13.GetDistance( this, user ) <= 1 ) ) {
				return false;
			} else {
				this.__CallVerb("Rotate Tube CW" );
			}
			return false;
		}

		// Function from file: transit_tube_construction.dm
		public virtual Obj_Structure_TransitTube buildtube(  ) {
			Obj_Structure_TransitTube R = null;

			R = new Obj_Structure_TransitTube( this.loc );
			R.icon_state = this.icon_state;
			R.init_dirs();
			R.generate_automatic_corners( R.tube_dirs );
			return R;
		}

		// Function from file: transit_tube_construction.dm
		public virtual void tube_flip(  ) {
			ByTable split_text = null;

			split_text = GlobalFuncs.splittext( this.icon_state, "-" );

			if ( Lang13.Length( split_text[2] ) < 2 ) {
				return;
			}

			if ( split_text.len == 3 && split_text[3] != "Pass" ) {
				split_text.Swap( 2, 3 );
			} else if ( Lang13.Length( split_text[1] ) == 2 && Lang13.Length( split_text[2] ) == 2 ) {
				split_text[1] = String13.SubStr( split_text[1], 1, 2 ) + String13.SubStr( split_text[2], 2, 3 );
				split_text[2] = String13.SubStr( split_text[2], 1, 2 ) + ( String13.SubStr( split_text[2], 2, 3 ) == "E" ? "W" : "E" );
			} else if ( split_text[1] == "N" || split_text[1] == "S" ) {
				split_text[2] = String13.SubStr( split_text[2], 1, 2 ) + ( String13.SubStr( split_text[2], 2, 3 ) == "E" ? "W" : "E" );
			} else {
				split_text[2] = ( String13.SubStr( split_text[2], 1, 2 ) == "N" ? "S" : "N" ) + String13.SubStr( split_text[2], 2, 3 );
			}
			this.icon_state = GlobalFuncs.jointext( split_text, "-" );
			return;
		}

		// Function from file: transit_tube_construction.dm
		public virtual void tube_turn( double angle = 0 ) {
			ByTable badtubes = null;
			ByTable split_text = null;
			int? i = null;
			int curdir = 0;
			string newdir = null;

			badtubes = new ByTable(new object [] { "W-E", "W-E-Pass", "S-N", "S-N-Pass", "SW-NE", "SE-NW" });
			split_text = GlobalFuncs.splittext( this.icon_state, "-" );
			i = null;
			i = 1;

			while (( i ??0) <= split_text.len) {
				curdir = GlobalFuncs.text2dir_extended( split_text[i] );

				if ( curdir != 0 ) {
					split_text[i] = GlobalFuncs.dir2text_short( Num13.Rotate( curdir, angle ) );
				}
				i++;
			}
			newdir = GlobalFuncs.jointext( split_text, "-" );

			if ( badtubes.Find( newdir ) != 0 ) {
				split_text.Swap( 1, 2 );
				newdir = GlobalFuncs.jointext( split_text, "-" );
			}
			this.icon_state = newdir;
			return;
		}

		// Function from file: transit_tube_construction.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( "<span class='notice'>Alt-click to rotate it clockwise.</span>" );
			return 0;
		}

		// Function from file: transit_tube_construction.dm
		[Verb]
		[VerbInfo( name: "Flip", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void flip(  ) {
			
			if ( Task13.User.incapacitated() ) {
				return;
			}
			this.tube_flip();
			return;
		}

		// Function from file: transit_tube_construction.dm
		[Verb]
		[VerbInfo( name: "Rotate Tube CCW", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_ccw(  ) {
			
			if ( Task13.User.incapacitated() ) {
				return;
			}
			this.tube_turn( 90 );
			return;
		}

		// Function from file: transit_tube_construction.dm
		[Verb]
		[VerbInfo( name: "Rotate Tube CW", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate(  ) {
			
			if ( Task13.User.incapacitated() ) {
				return;
			}
			this.tube_turn( -90 );
			return;
		}

	}

}