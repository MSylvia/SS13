// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Spider_Spiderling : Obj_Effect_Spider {

		public int amount_grown = 0;
		public dynamic grow_as = null;
		public Obj_Machinery_Atmospherics_Components_Unary_VentPump entry_vent = null;
		public bool travelling_in_vent = false;
		public bool player_spiders = false;
		public string poison_type = "toxin";
		public dynamic poison_per_bite = 5;
		public dynamic faction = new ByTable(new object [] { "spiders" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 3;
			this.icon_state = "spiderling";
			this.layer = 2.75;
		}

		// Function from file: spiders.dm
		public Obj_Effect_Spider_Spiderling ( dynamic loc = null ) : base( (object)(loc) ) {
			this.pixel_x = Rand13.Int( 6, -6 );
			this.pixel_y = Rand13.Int( 6, -6 );
			GlobalVars.SSobj.processing.Or( this );
			return;
		}

		// Function from file: spiders.dm
		public override int? process( dynamic seconds = null ) {
			ByTable vents = null;
			Pipeline entry_vent_parent = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump temp_vent = null;
			dynamic exit_vent = null;
			int travel_time = 0;
			dynamic new_area = null;
			ByTable nearby = null;
			dynamic target_atom = null;
			Obj_Machinery_Atmospherics_Components_Unary_VentPump v = null;
			dynamic S = null;

			
			if ( this.travelling_in_vent ) {
				
				if ( this.loc is Tile ) {
					this.travelling_in_vent = false;
					this.entry_vent = null;
				}
			} else if ( this.entry_vent != null ) {
				
				if ( Map13.GetDistance( this, this.entry_vent ) <= 1 ) {
					vents = new ByTable();
					entry_vent_parent = this.entry_vent.parents[1];

					foreach (dynamic _a in Lang13.Enumerate( entry_vent_parent.other_atmosmch, typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
						temp_vent = _a;
						
						vents.Add( temp_vent );
					}

					if ( !( vents.len != 0 ) ) {
						this.entry_vent = null;
						return null;
					}
					exit_vent = Rand13.PickFromTable( vents );

					if ( Rand13.PercentChance( 50 ) ) {
						this.visible_message( "<B>" + this + " scrambles into the ventillation ducts!</B>", "<span class='italics'>You hear something scampering through the ventilation ducts.</span>" );
					}
					Task13.Schedule( Rand13.Int( 20, 60 ), (Task13.Closure)(() => {
						this.loc = exit_vent;
						travel_time = Num13.Floor( Map13.GetDistance( this.loc, exit_vent.loc ) / 2 );
						Task13.Schedule( travel_time, (Task13.Closure)(() => {
							
							if ( !Lang13.Bool( exit_vent ) || Lang13.Bool( exit_vent.welded ) ) {
								this.loc = this.entry_vent;
								this.entry_vent = null;
								return;
							}

							if ( Rand13.PercentChance( 50 ) ) {
								this.audible_message( "<span class='italics'>You hear something scampering through the ventilation ducts.</span>" );
							}
							Task13.Sleep( travel_time );

							if ( !Lang13.Bool( exit_vent ) || Lang13.Bool( exit_vent.welded ) ) {
								this.loc = this.entry_vent;
								this.entry_vent = null;
								return;
							}
							this.loc = exit_vent.loc;
							this.entry_vent = null;
							new_area = GlobalFuncs.get_area( this.loc );

							if ( Lang13.Bool( new_area ) ) {
								((Base_Static)new_area).Entered( this, null );
							}
							return;
						}));
						return;
					}));
				}
			} else if ( Rand13.PercentChance( 33 ) ) {
				nearby = Map13.FetchInViewExcludeThis( this, 10 );

				if ( nearby.len != 0 ) {
					target_atom = Rand13.PickFromTable( nearby );
					Map13.WalkTowards( this, target_atom, 0, 0 );

					if ( Rand13.PercentChance( 40 ) ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " skitters" ).item( Rand13.Pick(new object [] { " away", " around", "" }) ).str( ".</span>" ).ToString() );
					}
				}
			} else if ( Rand13.PercentChance( 10 ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInView( this, 7 ), typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump) )) {
					v = _b;
					

					if ( !( v.welded == true ) ) {
						this.entry_vent = v;
						Map13.WalkTowards( this, this.entry_vent, 1, 0 );
						break;
					}
				}
			}

			if ( this.loc is Tile ) {
				this.amount_grown += Rand13.Int( 0, 2 );

				if ( this.amount_grown >= 100 ) {
					
					if ( !Lang13.Bool( this.grow_as ) ) {
						this.grow_as = Rand13.PickFromTable( Lang13.GetTypes( typeof(Mob_Living_SimpleAnimal_Hostile_Poison_GiantSpider) ) );
					}
					S = Lang13.Call( this.grow_as, this.loc );
					S.poison_per_bite = this.poison_per_bite;
					S.poison_type = this.poison_type;
					S.faction = this.faction.Copy();

					if ( this.player_spiders ) {
						S.playable_spider = GlobalVars.TRUE;
						GlobalFuncs.notify_ghosts( "Spider " + S.name + " can be controlled", null, new Txt( "<a href=?src=" ).Ref( S ).str( ";activate=1>(Click to play)</a>" ).ToString(), S, null, true );
					}
					GlobalFuncs.qdel( this );
				}
			}
			return null;
		}

		// Function from file: spiders.dm
		public override void healthcheck(  ) {
			
			if ( this.health <= 0 ) {
				this.die();
			}
			return;
		}

		// Function from file: spiders.dm
		public void die(  ) {
			this.visible_message( "<span class='alert'>" + this + " dies!</span>" );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: spiders.dm
		public override dynamic Bump( Ent_Static Obstacle = null, dynamic yes = null ) {
			
			if ( Obstacle is Obj_Structure_Table ) {
				this.loc = Obstacle.loc;
			} else {
				base.Bump( Obstacle, (object)(yes) );
			}
			return null;
		}

	}

}