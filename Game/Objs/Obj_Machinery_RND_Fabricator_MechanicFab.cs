// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RND_Fabricator_MechanicFab : Obj_Machinery_RND_Fabricator {

		public dynamic design_types = 183;
		public bool removable_designs = true;
		public bool plastic_added = true;
		public bool one_part_set_only = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.max_material_storage = 225000;
			this.nano_file = "genfab.tmpl";
			this.research_flags = 526;
			this.part_sets = new ByTable().Set( "Generic", new ByTable() );
			this.icon = "icons/obj/machines/mechanic.dmi";
			this.icon_state = "genfab";
		}

		// Function from file: mechanic_fabs.dm
		public Obj_Machinery_RND_Fabricator_MechanicFab ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Generalfab(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: mechanic_fabs.dm
		public bool AddMechanicDesign( Design design = null ) {
			
			if ( design is Design ) {
				
				if ( !( design.materials.len != 0 ) ) {
					return false;
				}

				if ( this.add_part_to_set( ( this.one_part_set_only ? "Generic" : design.category ), design ) ) {
					return true;
				} else {
					return false;
				}
			}
			return false;
		}

		// Function from file: mechanic_fabs.dm
		public bool AddBlueprint( dynamic blueprint = null, dynamic user = null ) {
			Design BPdesign = null;
			dynamic list = null;
			Design MD = null;

			
			if ( !( blueprint is Obj_Item_ResearchBlueprint ) || !Lang13.Bool( user ) ) {
				return false;
			}
			BPdesign = blueprint.stored_design;

			foreach (dynamic _b in Lang13.Enumerate( this.part_sets )) {
				list = _b;
				

				foreach (dynamic _a in Lang13.Enumerate( this.part_sets[list], typeof(Design) )) {
					MD = _a;
					

					if ( MD == BPdesign ) {
						GlobalFuncs.to_chat( user, "You can't add that design, as it's already loaded into the machine!" );
						return false;
					}
				}
			}
			return true;
		}

		// Function from file: mechanic_fabs.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			bool part = false;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["remove_design"] ) && this.removable_designs ) {
				part = this.getTopicDesign( href_list["remove_design"] );
				this.remove_part_from_set( String13.SubStr( href_list["remove_design"], 2, 0 ), part );
				return 1;
			}
			return null;
		}

		// Function from file: mechanic_fabs.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;
			ByTable queue_list = null;
			int? i = null;
			Design part = null;
			ByTable materials_list = null;
			dynamic matID = null;
			dynamic material = null;
			ByTable parts_list = null;
			dynamic set_name = null;
			dynamic parts = null;
			ByTable set_name_list = null;
			int i2 = 0;
			Design part2 = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			if ( Lang13.Bool( user.stat ) && !( user is Mob_Dead_Observer ) || ((Mob)user).restrained() || !this.allowed( user ) ) {
				return;
			}
			data = new ByTable( 0 );
			queue_list = new ByTable( 0 );
			i = null;
			i = 1;

			while (( i ??0) <= this.queue.len) {
				part = this.queue[i];
				queue_list.Add( new ByTable(new object [] { new ByTable().Set( "name", part.name ).Set( "cost", this.output_part_cost( part ) ).Set( "commands", new ByTable().Set( "remove_from_queue", i ) ) }) );
				i++;
			}
			data["queue"] = queue_list;
			data["screen"] = this.screen;
			data["hacked"] = this.hacked;
			materials_list = null;
			materials_list = new ByTable( 0 );

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
				matID = _a;
				
				material = ((dynamic)this.materials).getMaterial( matID );

				if ( Lang13.Bool( material ) && Convert.ToDouble( ((dynamic)this.materials).storage[matID] ) > 0 ) {
					materials_list.Add( new ByTable(new object [] { new ByTable().Set( "name", material.processed_name ).Set( "storage", ((dynamic)this.materials).storage[matID] ).Set( "commands", new ByTable().Set( "eject", matID ) ) }) );
				}
			}
			data["materials"] = materials_list;
			data["removableDesigns"] = this.removable_designs;
			parts_list = null;
			parts_list = new ByTable( 0 );

			foreach (dynamic _c in Lang13.Enumerate( this.part_sets )) {
				set_name = _c;
				
				parts = this.part_sets[set_name];
				set_name_list = new ByTable();
				i2 = 0;

				foreach (dynamic _b in Lang13.Enumerate( parts, typeof(Design) )) {
					part2 = _b;
					
					i2++;
					set_name_list.Add( new ByTable(new object [] { 
						new ByTable()
							.Set( "name", part2.name )
							.Set( "cost", this.output_part_cost( part2 ) )
							.Set( "time", this.get_construction_time_w_coeff( part2 ) / 10 )
							.Set( "command1", new ByTable().Set( "add_to_queue", "" + i2 + set_name ) )
							.Set( "command2", new ByTable().Set( "build", "" + i2 + set_name ) )
							.Set( "command3", new ByTable().Set( "remove_design", "" + i2 + set_name ) )
						
					 }) );
				}
				parts_list[set_name] = set_name_list;
			}
			data["parts"] = parts_list;
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, this.nano_file, this.name, 850, 500 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

		// Function from file: mechanic_fabs.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic RB = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( a is Obj_Item_ResearchBlueprint ) {
				RB = a;

				if ( !Lang13.Bool( this.design_types & RB.build_type ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>This isn't the right machine for that kind of blueprint!</span>" );
					return 0;
				} else if ( RB.stored_design != null ) {
					
					if ( this.AddBlueprint( RB, b ) ) {
						
						if ( this.AddMechanicDesign( RB.stored_design ) ) {
							this.overlays.Add( "" + this.base_state + "-bp" );
							GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You successfully load " ).the( RB.name ).item().str( " into " ).the( this ).item().str( ".</span>" ).ToString() );

							if ( RB.delete_on_use ) {
								GlobalFuncs.qdel( RB );
							}
							Task13.Schedule( 10, (Task13.Closure)(() => {
								this.overlays.Remove( "" + this.base_state + "-bp" );
								return;
							}));
						}
					}
				}
				return 1;
			}
			return null;
		}

		// Function from file: mechanic_fabs.dm
		public override bool remove_materials( dynamic part = null ) {
			
			if ( this.plastic_added ) {
				
				if ( !Lang13.Bool( part.materials.Contains( "$plastic" ) ) && !( ( this.research_flags & 256 ) != 0 ) ) {
					
					if ( Convert.ToDouble( ((dynamic)this.materials).getAmount( "$plastic" ) ) < this.get_resource_cost_w_coeff( part, "$plastic" ) ) {
						return false;
					}
				}
			}

			if ( base.remove_materials( (object)(part) ) ) {
				
				if ( this.plastic_added ) {
					
					if ( !Lang13.Bool( part.materials.Contains( "$plastic" ) ) && !( ( this.research_flags & 256 ) != 0 ) ) {
						((dynamic)this.materials).removeAmount( "$plastic", this.get_resource_cost_w_coeff( part, "$plastic" ) );
					}
				}
				return true;
			}
			return false;
		}

		// Function from file: mechanic_fabs.dm
		public override double get_resource_cost_w_coeff( dynamic part = null, dynamic resource = null, double? roundto = null ) {
			roundto = roundto ?? 1;

			
			if ( resource == "$plastic" && !Lang13.Bool( part.materials.Contains( "$plastic" ) ) ) {
				return Num13.Round( ((Design)part).MatTotal() * ( this.resource_coeff ??0) * 0.1, roundto ??0 );
			}
			return Num13.Round( Convert.ToDouble( part.materials[resource] * this.resource_coeff ), roundto ??0 );
		}

		// Function from file: mechanic_fabs.dm
		public override string output_part_cost( Design part = null ) {
			string output = null;

			output = base.output_part_cost( part );

			if ( this.plastic_added ) {
				output += " | " + this.get_resource_cost_w_coeff( part, "$plastic" ) + " Plastic";
			}
			return output;
		}

		// Function from file: mechanic_fabs.dm
		public override int setup_part_sets(  ) {
			dynamic name_set = null;
			ByTable part_set = null;
			int? i = null;
			Obj_Item_Stack I = null;
			dynamic name_set2 = null;
			dynamic part_set2 = null;
			Design element = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.part_sets )) {
				name_set = _a;
				
				part_set = this.part_sets[name_set];

				if ( !( part_set is ByTable ) || !( part_set.len != 0 ) ) {
					continue;
				}
				i = null;
				i = 1;

				while (( i ??0) <= part_set.len) {
					I = part_set[i];
					part_set[i] = GlobalFuncs.getScanDesign( I );
					i++;
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( this.part_sets )) {
				name_set2 = _c;
				
				part_set2 = this.part_sets[name_set2];

				foreach (dynamic _b in Lang13.Enumerate( part_set2, typeof(Design) )) {
					element = _b;
					
				}
			}
			return 0;
		}

	}

}