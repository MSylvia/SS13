// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Glass_Beaker : Obj_Item_Weapon_ReagentContainers_Glass {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "beaker";
			this.materials = new ByTable().Set( "$glass", 500 );
			this.icon_state = "beaker";
		}

		// Function from file: glass.dm
		public Obj_Item_Weapon_ReagentContainers_Glass_Beaker ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: glass.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			Image filling = null;
			int percent = 0;

			this.overlays.Cut();

			if ( Lang13.Bool( this.reagents.total_volume ) ) {
				filling = new Image( "icons/obj/reagentfillings.dmi", this, "" + this.icon_state + "10" );
				percent = Num13.Floor( ( this.reagents.total_volume ??0) / ( this.volume ??0) * 100 );

				dynamic _a = percent; // Was a switch-case, sorry for the mess.
				if ( 0<=_a&&_a<=9 ) {
					filling.icon_state = "" + this.icon_state + "-10";
				} else if ( 10<=_a&&_a<=24 ) {
					filling.icon_state = "" + this.icon_state + "10";
				} else if ( 25<=_a&&_a<=49 ) {
					filling.icon_state = "" + this.icon_state + "25";
				} else if ( 50<=_a&&_a<=74 ) {
					filling.icon_state = "" + this.icon_state + "50";
				} else if ( 75<=_a&&_a<=79 ) {
					filling.icon_state = "" + this.icon_state + "75";
				} else if ( 80<=_a&&_a<=90 ) {
					filling.icon_state = "" + this.icon_state + "80";
				} else if ( 91<=_a&&_a<=Double.PositiveInfinity ) {
					filling.icon_state = "" + this.icon_state + "100";
				}
				filling.color = GlobalFuncs.mix_color_from_reagents( this.reagents.reagent_list );
				this.overlays.Add( filling );
			}
			return false;
		}

		// Function from file: glass.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			base.attack_hand( (object)(a), b, c );
			this.update_icon();
			return null;
		}

		// Function from file: glass.dm
		public override bool dropped( dynamic user = null ) {
			base.dropped( (object)(user) );
			this.update_icon();
			return false;
		}

		// Function from file: glass.dm
		public override bool pickup( dynamic user = null ) {
			base.pickup( (object)(user) );
			this.update_icon();
			return false;
		}

		// Function from file: glass.dm
		public override void on_reagent_change(  ) {
			this.update_icon();
			return;
		}

	}

}