// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_GeigerCounter : Obj_Item_Device {

		public bool scanning = false;
		public double radiation_count = 0;
		public bool emagged = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "multitool";
			this.w_class = 2;
			this.slot_flags = 512;
			this.materials = new ByTable().Set( "$metal", 150 ).Set( "$glass", 150 );
			this.icon_state = "geiger_off";
		}

		// Function from file: geiger_counter.dm
		public Obj_Item_Device_GeigerCounter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSobj.processing.Or( this );
			return;
		}

		// Function from file: geiger_counter.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !this.emagged ) {
				
				if ( this.scanning ) {
					user.WriteMsg( "<span class='warning'>Turn off " + this + " before you perform this action!</span>" );
					return false;
				}
				user.WriteMsg( "<span class='warning'>You override " + this + "'s radiation storing protocols. It will now generate small doses of radiation, and stored rads are now projected into creatures you scan.</span>" );
				this.emagged = true;
			}
			return false;
		}

		// Function from file: geiger_counter.dm
		public override bool AltClick( Mob user = null ) {
			base.AltClick( user );

			if ( !this.scanning ) {
				Task13.User.WriteMsg( "<span class='warning'>" + this + " must be on to reset its radiation level!</span>" );
				return false;
			}
			this.radiation_count = 0;
			Task13.User.WriteMsg( "<span class='notice'>You flush " + this + "'s radiation counts, resetting it to normal.</span>" );
			this.update_icon();
			return false;
		}

		// Function from file: geiger_counter.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Screwdriver && this.emagged ) {
				
				if ( this.scanning ) {
					user.WriteMsg( "<span class='warning'>Turn off " + this + " before you perform this action!</span>" );
					return 0;
				}
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " unscrews " + this + "'s maintenance panel and begins fiddling with its innards...</span>", "<span class='notice'>You begin resetting " + this + "...</span>" );
				GlobalFuncs.playsound( user, "sound/items/Screwdriver.ogg", 50, 1 );

				if ( !GlobalFuncs.do_after( user, 40 / A.toolspeed, null, user ) ) {
					return 0;
				}
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " refastens " + this + "'s maintenance panel!</span>", "<span class='notice'>You reset " + this + " to its factory settings!</span>" );
				GlobalFuncs.playsound( user, "sound/items/Screwdriver2.ogg", 50, 1 );
				this.emagged = false;
				this.radiation_count = 0;
				this.update_icon();
				return 1;
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: geiger_counter.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( user.a_intent == "help" ) {
				
				if ( !this.emagged ) {
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " scans " + M + " with " + this + ".</span>", "<span class='notice'>You scan " + M + "'s radiation levels with " + this + "...</span>" );

					if ( !( M.radiation != 0 ) ) {
						user.WriteMsg( new Txt( "<span class='notice'>" ).icon( this ).str( " Radiation levels within normal boundaries.</span>" ).ToString() );
						return true;
					} else {
						user.WriteMsg( new Txt( "<span class='boldannounce'>" ).icon( this ).str( " Subject is irradiated. Radiation levels: " ).item( M.radiation ).str( ".</span>" ).ToString() );
						return true;
					}
				} else {
					((Ent_Static)user).visible_message( "<span class='notice'>" + user + " scans " + M + " with " + this + ".</span>", "<span class='danger'>You project " + this + "'s stored radiation into " + M + "'s body!</span>" );
					((Ent_Static)M).rad_act( this.radiation_count );
					this.radiation_count = 0;
				}
				return true;
			}
			base.attack( (object)(M), (object)(user), def_zone );
			return false;
		}

		// Function from file: geiger_counter.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.scanning = !this.scanning;
			this.update_icon();
			user.WriteMsg( new Txt( "<span class='notice'>" ).icon( this ).str( " You switch " ).item( ( this.scanning ? "on" : "off" ) ).str( " " ).item( this ).str( ".</span>" ).ToString() );
			return null;
		}

		// Function from file: geiger_counter.dm
		public override bool rad_act( double severity = 0 ) {
			Ent_Static M = null;

			
			if ( !( severity != 0 ) && this.scanning ) {
				return false;
			}

			if ( this.emagged ) {
				severity = Num13.MaxInt( 0, Num13.MinInt( ((int)( severity )), 25 ) );
			}
			this.radiation_count += severity;

			if ( this.loc is Mob_Living ) {
				M = this.loc;

				if ( !this.emagged ) {
					((dynamic)M).WriteMsg( new Txt( "<span class='boldannounce'>" ).icon( this ).str( " RADIATION PULSE DETECTED.</span>" ).ToString() );
					((dynamic)M).WriteMsg( new Txt( "<span class='boldannounce'>" ).icon( this ).str( " Severity: " ).item( severity ).str( "</span>" ).ToString() );
				} else {
					((dynamic)M).WriteMsg( new Txt( "<span class='boldannounce'>" ).icon( this ).str( " !@%$AT!(N P!LS! D/TEC?ED.</span>" ).ToString() );
					((dynamic)M).WriteMsg( new Txt( "<span class='boldannounce'>" ).icon( this ).str( " &!F2rity: <=" ).item( severity ).str( "#1</span>" ).ToString() );
				}
			}
			this.update_icon();
			return false;
		}

		// Function from file: geiger_counter.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( !this.scanning ) {
				this.icon_state = "geiger_off";
				return true;
			}

			if ( this.emagged ) {
				this.icon_state = "geiger_on_emag";
				return true;
			}

			dynamic _a = this.radiation_count; // Was a switch-case, sorry for the mess.
			if ( Double.NegativeInfinity<=_a&&_a<=10 ) {
				this.icon_state = "geiger_on_1";
			} else if ( 11<=_a&&_a<=30 ) {
				this.icon_state = "geiger_on_2";
			} else if ( 31<=_a&&_a<=75 ) {
				this.icon_state = "geiger_on_3";
			} else if ( 76<=_a&&_a<=125 ) {
				this.icon_state = "geiger_on_4";
			} else if ( 126<=_a&&_a<=200 ) {
				this.icon_state = "geiger_on_4";
			} else if ( 201<=_a&&_a<=Double.PositiveInfinity ) {
				this.icon_state = "geiger_on_5";
			}
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
			return false;
		}

		// Function from file: geiger_counter.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( !this.scanning ) {
				return 1;
			}
			user.WriteMsg( "<span class='info'>Alt-click it to clear stored radiation levels.</span>" );

			if ( this.emagged ) {
				user.WriteMsg( "<span class='warning'>The display seems to be incomprehensible.</span>" );
				return 1;
			}

			dynamic _a = this.radiation_count; // Was a switch-case, sorry for the mess.
			if ( Double.NegativeInfinity<=_a&&_a<=10 ) {
				user.WriteMsg( "<span class='notice'>Ambient radiation level count reports that all is well.</span>" );
			} else if ( 11<=_a&&_a<=30 ) {
				user.WriteMsg( "<span class='disarm'>Ambient radiation levels slightly above average.</span>" );
			} else if ( 31<=_a&&_a<=75 ) {
				user.WriteMsg( "<span class='warning'>Ambient radiation levels above average.</span>" );
			} else if ( 76<=_a&&_a<=125 ) {
				user.WriteMsg( "<span class='danger'>Ambient radiation levels highly above average.</span>" );
			} else if ( 126<=_a&&_a<=200 ) {
				user.WriteMsg( "<span class='suicide'>Ambient radiation levels nearing critical level.</span>" );
			} else if ( 201<=_a&&_a<=Double.PositiveInfinity ) {
				user.WriteMsg( "<span class='boldannounce'>Ambient radiation levels above critical level!</span>" );
			}
			return 0;
		}

		// Function from file: geiger_counter.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( this.emagged ) {
				
				if ( this.radiation_count < 20 ) {
					this.radiation_count++;
				}
				return 0;
			}

			if ( this.radiation_count > 0 ) {
				this.radiation_count--;
				this.update_icon();
			}
			return null;
		}

		// Function from file: geiger_counter.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSobj.processing.Remove( this );
			base.Destroy();
			return null;
		}

	}

}