// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RND_Fabricator_MechanicFab_Autolathe : Obj_Machinery_RND_Fabricator_MechanicFab {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state_open = "autolathe_t";
			this.nano_file = "autolathe.tmpl";
			this.design_types = new ByTable();
			this.start_end_anims = true;
			this.idle_power_usage = 50;
			this.active_power_usage = 500;
			this.build_time = 0.5;
			this.removable_designs = false;
			this.plastic_added = false;
			this.allowed_materials = new ByTable(new object [] { "$iron", "$glass" });
			this.machine_flags = 31;
			this.research_flags = 1566;
			this.light_color = "#7DE1E1";
			this.one_part_set_only = false;
			this.part_sets = new ByTable()
				.Set( "Tools", new ByTable(new object [] { 
					new Obj_Item_Device_Multitool(), 
					new Obj_Item_Weapon_Weldingtool_Empty(), 
					new Obj_Item_Weapon_Crowbar(), 
					new Obj_Item_Weapon_Screwdriver(), 
					new Obj_Item_Weapon_Wirecutters(), 
					new Obj_Item_Weapon_Wrench(), 
					new Obj_Item_Weapon_Solder(), 
					new Obj_Item_Device_Analyzer(), 
					new Obj_Item_Device_TScanner(), 
					new Obj_Item_Weapon_Pickaxe_Shovel_Spade(), 
					new Obj_Item_Device_SilicateSprayer_Empty()
				 }) )
				.Set( "Containers", new ByTable(new object [] { 
					new Obj_Item_Weapon_ReagentContainers_Glass_Beaker(), 
					new Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Large(), 
					new Obj_Item_Weapon_ReagentContainers_Glass_Bucket(), 
					new Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Vial(), 
					new Obj_Item_Weapon_ReagentContainers_Food_Drinks_Mug()
				 }) )
				.Set( "Assemblies", new ByTable(new object [] { 
					new Obj_Item_Device_Assembly_Igniter(), 
					new Obj_Item_Device_Assembly_Signaler(), 
					new Obj_Item_Device_Assembly_Timer(), 
					new Obj_Item_Device_Assembly_Voice(), 
					new Obj_Item_Device_Assembly_ProxSensor(), 
					new Obj_Item_Device_Assembly_Speaker(), 
					new Obj_Item_Device_Assembly_Addition(), 
					new Obj_Item_Device_Assembly_Comparison(), 
					new Obj_Item_Device_Assembly_Randomizer(), 
					new Obj_Item_Device_Assembly_ReadWrite(), 
					new Obj_Item_Device_Assembly_Math()
				 }) )
				.Set( "Stock_Parts", new ByTable(new object [] { 
					new Obj_Item_Weapon_StockParts_ConsoleScreen(), 
					new Obj_Item_Weapon_StockParts_Capacitor(), 
					new Obj_Item_Weapon_StockParts_ScanningModule(), 
					new Obj_Item_Weapon_StockParts_Manipulator(), 
					new Obj_Item_Weapon_StockParts_MicroLaser(), 
					new Obj_Item_Weapon_StockParts_MatterBin()
				 }) )
				.Set( "Medical", new ByTable(new object [] { 
					new Obj_Item_Weapon_Storage_PillBottle(), 
					new Obj_Item_Weapon_ReagentContainers_Syringe(), 
					new Obj_Item_Weapon_Scalpel(), 
					new Obj_Item_Weapon_CircularSaw(), 
					new Obj_Item_Weapon_Surgicaldrill(), 
					new Obj_Item_Weapon_Retractor(), 
					new Obj_Item_Weapon_Cautery(), 
					new Obj_Item_Weapon_Hemostat()
				 }) )
				.Set( "Ammunition", new ByTable(new object [] { 
					new Obj_Item_AmmoCasing_Shotgun_Blank(), 
					new Obj_Item_AmmoCasing_Shotgun_Beanbag(), 
					new Obj_Item_AmmoCasing_Shotgun_Flare(), 
					new Obj_Item_AmmoStorage_Speedloader_C38_Empty(), 
					new Obj_Item_AmmoStorage_Box_C38()
				 }) )
				.Set( "Misc_Tools", new ByTable(new object [] { 
					new Obj_Item_Device_Flashlight(), 
					new Obj_Item_Weapon_Extinguisher(), 
					new Obj_Item_Device_Radio_Headset(), 
					new Obj_Item_Device_Radio_Off(), 
					new Obj_Item_Weapon_Kitchen_Utensil_Knife_Large(), 
					new Obj_Item_Clothing_Head_Welding(), 
					new Obj_Item_Device_Taperecorder(), 
					new Obj_Item_Weapon_Chisel(), 
					new Obj_Item_Device_Rcd_TilePainter()
				 }) )
				.Set( "Misc_Other", new ByTable(new object [] { 
					new Obj_Item_Weapon_RcdAmmo(), 
					new Obj_Item_Weapon_Light_Tube(), 
					new Obj_Item_Weapon_Light_Bulb(), 
					new Obj_Item_Ashtray_Glass(), 
					new Obj_Item_Weapon_Storage_PillBottle_Dice(), 
					new Obj_Item_Weapon_CameraAssembly(), 
					new Obj_Item_Stack_Sheet_Glass_Rglass(), 
					new Obj_Item_Stack_Rods()
				 }) )
				.Set( "Hidden_Items", new ByTable(new object [] { 
					new Obj_Item_Weapon_Flamethrower_Full(), 
					new Obj_Item_AmmoStorage_Box_Flare(), 
					new Obj_Item_Device_Rcd_Matter_Engineering(), 
					new Obj_Item_Device_Rcd_Rpd(), 
					new Obj_Item_Device_Rcd_Matter_Rsf(), 
					new Obj_Item_Device_Radio_Electropack(), 
					new Obj_Item_Weapon_Weldingtool_Largetank_Empty(), 
					new Obj_Item_Weapon_Handcuffs(), 
					new Obj_Item_AmmoStorage_Box_A357(), 
					new Obj_Item_AmmoCasing_Shotgun(), 
					new Obj_Item_AmmoCasing_Shotgun_Dart()
				 }) )
			;
			this.icon_state = "autolathe";
		}

		// Function from file: autolathe.dm
		public Obj_Machinery_RND_Fabricator_MechanicFab_Autolathe ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Autolathe(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: autolathe.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic M = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			} else if ( Lang13.Bool( a.materials ) ) {
				
				if ( ((Materials)a.materials).getVolume() + Convert.ToDouble( ((dynamic)this.materials).getVolume() ) > Convert.ToDouble( this.max_material_storage ) ) {
					GlobalFuncs.to_chat( b, new Txt().The( this ).item().str( "'s material bin is too full to recycle " ).the( a ).item().str( "." ).ToString() );
					return 1;
				} else if ( ( ((Materials)a.materials).getAmount( "$iron" ) ?1:0) + ( ((Materials)a.materials).getAmount( "$glass" ) ?1:0) < ((Materials)a.materials).getVolume() ) {
					GlobalFuncs.to_chat( b, new Txt().The( this ).item().str( " can only accept objects made out of metal and glass." ).ToString() );
					return 1;
				} else if ( b is Mob_Living_Silicon_Robot ) {
					
					if ( b is Mob_Living_Silicon_Robot_Mommi ) {
						M = b;

						if ( Lang13.Bool( ((Mob_Living_Silicon_Robot_Mommi)M).is_in_modules( a ) ) ) {
							GlobalFuncs.to_chat( b, "You cannot recycle your built in tools." );
							return 1;
						}
					} else {
						GlobalFuncs.to_chat( b, "You cannot recycle your built in tools." );
						return 1;
					}
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					((dynamic)this.materials).removeFrom( a.materials );
					((Ent_Static)b).visible_message( new Txt().item( b ).str( " puts " ).the( a ).item().str( " into " ).the( this ).item().str( "'s recycling unit." ).ToString(), new Txt( "You put " ).the( a ).item().str( " in " ).the( this ).item().str( "'s reycling unit." ).ToString() );
					GlobalFuncs.qdel( a );
				}
				return 1;
			}
			return null;
		}

		// Function from file: autolathe.dm
		public override void update_hacked(  ) {
			
			if ( this.screen == 51 ) {
				this.screen = 11;
			}
			return;
		}

		// Function from file: autolathe.dm
		public override bool is_contraband( dynamic part = null ) {
			
			if ( Lang13.Bool( this.part_sets["Hidden_Items"].Contains( part ) ) ) {
				return true;
			}
			return false;
		}

		// Function from file: autolathe.dm
		public override double get_construction_time_w_coeff( dynamic part = null, double? roundto = null ) {
			return Num13.MinInt( ((int)( base.get_construction_time_w_coeff( (object)(part), roundto ) )), ((int)( ( this.time_coeff ??0) * 50 )) );
		}

	}

}