// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Compressor : Obj_Machinery_Power {

		public dynamic turbine = null;
		public GasMixture gas_contained = null;
		public Tile inturf = null;
		public bool starter = false;
		public double rpm = 0;
		public dynamic rpmtarget = 0;
		public int capacity = 1000000;
		public bool comp_id = false;
		public double efficiency = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/atmospherics/pipes/simple.dmi";
			this.icon_state = "compressor";
		}

		// Function from file: turbine.dm
		public Obj_Machinery_Power_Compressor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_PowerCompressor( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 5 ) );
			this.RefreshParts();
			this.gas_contained = new GasMixture();
			this.inturf = Map13.GetStep( this, this.dir );
			return;
		}

		// Function from file: turbine.dm
		public override int? process( dynamic seconds = null ) {
			GasMixture environment = null;
			double transfer_moles = 0;
			dynamic removed = null;

			
			if ( !Lang13.Bool( this.turbine ) ) {
				this.stat = 1;
			}

			if ( ( this.stat & 1 ) != 0 || Lang13.Bool( this.panel_open ) ) {
				return null;
			}

			if ( !this.starter ) {
				return null;
			}
			this.overlays.Cut();
			this.rpm = this.rpm * 081 + Convert.ToDouble( this.rpmtarget * 0.1 );
			environment = this.inturf.return_air();
			transfer_moles = environment.total_moles() / 10;
			removed = this.inturf.remove_air( transfer_moles );
			this.gas_contained.merge( removed );
			this.rpm = Num13.MaxInt( 0, ((int)( this.rpm - this.rpm * this.rpm / ( 500000 / this.efficiency ) )) );

			if ( this.starter && !( ( this.stat & 2 ) != 0 ) ) {
				this.f_use_power( 2800 );

				if ( this.rpm < 1000 ) {
					this.rpmtarget = 1000;
				}
			} else if ( this.rpm < 1000 ) {
				this.rpmtarget = 0;
			}

			if ( this.rpm > 50000 ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/simple.dmi", "comp-o4", GlobalVars.FLY_LAYER ) );
			} else if ( this.rpm > 10000 ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/simple.dmi", "comp-o3", GlobalVars.FLY_LAYER ) );
			} else if ( this.rpm > 2000 ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/simple.dmi", "comp-o2", GlobalVars.FLY_LAYER ) );
			} else if ( this.rpm > 500 ) {
				this.overlays.Add( new Image( "icons/obj/atmospherics/pipes/simple.dmi", "comp-o1", GlobalVars.FLY_LAYER ) );
			}
			return null;
		}

		// Function from file: turbine.dm
		public override bool CanAtmosPass( dynamic T = null ) {
			return !this.density;
		}

		// Function from file: turbine.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( this.default_deconstruction_screwdriver( user, Lang13.Initial( this, "icon_state" ), Lang13.Initial( this, "icon_state" ), A ) ) {
				return null;
			}

			if ( this.default_change_direction_wrench( user, A ) ) {
				this.turbine = null;
				this.inturf = Map13.GetStep( this, this.dir );
				this.locate_machinery();

				if ( Lang13.Bool( this.turbine ) ) {
					user.WriteMsg( "<span class='notice'>Turbine connected.</span>" );
					this.stat &= 65534;
				} else {
					user.WriteMsg( "<span class='alert'>Turbine not connected.</span>" );
					this.stat |= 1;
				}
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );
			return null;
		}

		// Function from file: turbine.dm
		public override void RefreshParts(  ) {
			double E = 0;
			Obj_Item_Weapon_StockParts_Manipulator M = null;

			E = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M = _a;
				
				E += Convert.ToDouble( M.rating );
			}
			this.efficiency = E / 6;
			return;
		}

		// Function from file: turbine.dm
		public override void locate_machinery(  ) {
			
			if ( Lang13.Bool( this.turbine ) ) {
				return;
			}
			this.turbine = Lang13.FindIn( typeof(Obj_Machinery_Power_Turbine), Map13.GetStep( this, Map13.GetDistance( this.inturf, this ) ) );

			if ( Lang13.Bool( this.turbine ) ) {
				((Obj_Machinery)this.turbine).locate_machinery();
			}
			return;
		}

		// Function from file: turbine.dm
		public override void initialize(  ) {
			base.initialize();
			this.locate_machinery();

			if ( !Lang13.Bool( this.turbine ) ) {
				this.stat |= 1;
			}
			return;
		}

	}

}