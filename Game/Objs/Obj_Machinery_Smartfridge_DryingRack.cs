// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Smartfridge_DryingRack : Obj_Machinery_Smartfridge {

		public bool drying = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.active_power_usage = 200;
			this.icon_on = "drying_rack_on";
			this.icon_off = "drying_rack";
			this.icon = "icons/obj/hydroponics/equipment.dmi";
			this.icon_state = "drying_rack_on";
		}

		public Obj_Machinery_Smartfridge_DryingRack ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: smartfridge.dm
		public override double emp_act( int severity = 0 ) {
			base.emp_act( severity );
			this.atmos_spawn_air( GlobalVars.SPAWN_HEAT, 75 );
			return 0;
		}

		// Function from file: smartfridge.dm
		public bool rack_dry(  ) {
			Obj_Item_Weapon_ReagentContainers_Food_Snacks S = null;
			dynamic dried = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks) )) {
				S = _a;
				

				if ( S.dried_type == S.type ) {
					S.color = "#ad7257";
					S.dry = true;
					S.loc = GlobalFuncs.get_turf( this );
				} else {
					dried = S.dried_type;
					Lang13.Call( dried, this.loc );
					GlobalFuncs.qdel( S );
				}
				return true;
			}
			return false;
		}

		// Function from file: smartfridge.dm
		public void toggle_drying( bool? forceoff = null ) {
			forceoff = forceoff ?? false;

			
			if ( this.drying || forceoff == true ) {
				this.drying = false;
				this.use_power = 1;
			} else {
				this.drying = true;
				this.use_power = 2;
			}
			this.update_icon();
			return;
		}

		// Function from file: smartfridge.dm
		public override bool accept_check( dynamic O = null ) {
			dynamic S = null;

			
			if ( O is Obj_Item_Weapon_ReagentContainers_Food_Snacks ) {
				S = O;

				if ( Lang13.Bool( S.dried_type ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: smartfridge.dm
		public override int? process( dynamic seconds = null ) {
			base.process( (object)(seconds) );

			if ( this.drying ) {
				
				if ( this.rack_dry() ) {
					this.update_icon();
				}
			}
			return null;
		}

		// Function from file: smartfridge.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );
			this.overlays = 0;

			if ( this.drying ) {
				this.overlays.Add( "drying_rack_drying" );
			}

			if ( this.contents.len != 0 ) {
				this.overlays.Add( "drying_rack_filled" );
			}
			return false;
		}

		// Function from file: smartfridge.dm
		public override void load( dynamic O = null ) {
			base.load( (object)(O) );
			this.update_icon();
			return;
		}

		// Function from file: smartfridge.dm
		public override void power_change(  ) {
			
			if ( Lang13.Bool( this.powered() ) && Lang13.Bool( this.anchored ) ) {
				this.stat &= 65533;
			} else {
				this.stat |= 2;
				this.toggle_drying( true );
			}
			this.update_icon();
			return;
		}

		// Function from file: smartfridge.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			base.Topic( href, href_list, (object)(hsrc) );

			if ( Lang13.Bool( href_list["dry"] ) ) {
				this.toggle_drying();
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: smartfridge.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic dat = null;

			dat = base.interact( (object)(user), flag1 );

			if ( Lang13.Bool( dat ) ) {
				dat += "<br>";
				dat += new Txt( "<a href='byond://?src=" ).Ref( this ).str( ";dry=1'>Toggle Drying</A> " ).ToString();
				Interface13.Browse( user, "<HEAD><TITLE>" + this + " supplies</TITLE></HEAD><TT>" + dat + "</TT>", "window=smartfridge" );
			}
			GlobalFuncs.onclose( user, "smartfridge" );
			return null;
		}

	}

}