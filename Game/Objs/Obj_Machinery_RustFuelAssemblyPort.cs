// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RustFuelAssemblyPort : Obj_Machinery {

		public dynamic cur_assembly = null;
		public bool busy = false;
		public bool opened = true;
		public int has_electronics = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "code/WorkInProgress/Cael_Aislinn/Rust/rust.dmi";
			this.icon_state = "port2";
		}

		// Function from file: fuel_assembly_port_construction.dm
		public Obj_Machinery_RustFuelAssemblyPort ( dynamic loc = null, int ndir = 0, bool? building = null ) : base( (object)(loc) ) {
			building = building ?? false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( building == true ) {
				this.dir = ndir;
			} else {
				this.has_electronics = 3;
				this.opened = false;
				this.icon_state = "port0";
			}
			this.pixel_x = ( ( this.dir & 3 ) != 0 ? 0 : ( this.dir == 4 ? 32 : -32 ) );
			this.pixel_y = ( ( this.dir & 3 ) != 0 ? ( this.dir == 1 ? 32 : -32 ) : 0 );
			return;
		}

		// Function from file: fuel_assembly_port.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_FuelAssembly && !this.opened ) {
				
				if ( Lang13.Bool( this.cur_assembly ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>There is already a fuel rod assembly in there!</span>" );
				} else if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.cur_assembly = a;
					this.icon_state = "port1";
					GlobalFuncs.to_chat( b, "<span class='notice'>You insert " + a + " into " + this + ". Touch the panel again to insert " + a + " into the injector.</span>" );
				}
			}
			return null;
		}

		// Function from file: fuel_assembly_port.dm
		public bool try_draw_assembly(  ) {
			bool success = false;
			Tile check_turf = null;
			Obj_Machinery_Power_RustFuelInjector I = null;

			success = false;

			if ( !Lang13.Bool( this.cur_assembly ) ) {
				check_turf = Map13.GetStep( GlobalFuncs.get_turf( this ), this.dir );
				check_turf = Map13.GetStep( check_turf, this.dir );

				foreach (dynamic _a in Lang13.Enumerate( check_turf, typeof(Obj_Machinery_Power_RustFuelInjector) )) {
					I = _a;
					

					if ( ( I.stat & 3 ) != 0 ) {
						break;
					}

					if ( !Lang13.Bool( I.cur_assembly ) ) {
						break;
					}

					if ( I.injecting ) {
						break;
					}

					if ( I.state != 2 ) {
						break;
					}
					this.cur_assembly = I.cur_assembly;
					this.cur_assembly.loc = this;
					I.cur_assembly = null;
					this.icon_state = "port1";
					success = true;
					break;
				}
			}
			return success;
		}

		// Function from file: fuel_assembly_port.dm
		public bool eject_assembly(  ) {
			
			if ( Lang13.Bool( this.cur_assembly ) ) {
				this.cur_assembly.loc = this.loc;
				this.cur_assembly = null;
				this.icon_state = "port0";
				return true;
			}
			return false;
		}

		// Function from file: fuel_assembly_port.dm
		public bool try_insert_assembly(  ) {
			bool success = false;
			Tile check_turf = null;
			Obj_Machinery_Power_RustFuelInjector I = null;

			success = false;

			if ( Lang13.Bool( this.cur_assembly ) ) {
				check_turf = Map13.GetStep( GlobalFuncs.get_turf( this ), this.dir );
				check_turf = Map13.GetStep( check_turf, this.dir );

				foreach (dynamic _a in Lang13.Enumerate( check_turf, typeof(Obj_Machinery_Power_RustFuelInjector) )) {
					I = _a;
					

					if ( ( I.stat & 3 ) != 0 ) {
						break;
					}

					if ( Lang13.Bool( I.cur_assembly ) ) {
						break;
					}

					if ( I.state != 2 ) {
						break;
					}
					I.cur_assembly = this.cur_assembly;
					this.cur_assembly.loc = I;
					this.cur_assembly = null;
					this.icon_state = "port0";
					success = true;
				}
			}
			return success;
		}

		// Function from file: fuel_assembly_port.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );

			if ( ( this.stat & 3 ) != 0 || this.opened ) {
				return null;
			}

			if ( Lang13.Bool( this.cur_assembly ) ) {
				
				if ( this.try_insert_assembly() ) {
					GlobalFuncs.to_chat( a, new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).str( " inserts it's fuel rod assembly into an injector.</span>" ).ToString() );
				} else if ( this.eject_assembly() ) {
					GlobalFuncs.to_chat( a, new Txt( "<span class='warning'>" ).icon( this ).str( " " ).item( this ).str( " ejects it's fuel assembly. Check the fuel injector status.</span>" ).ToString() );
				} else if ( this.try_draw_assembly() ) {
					GlobalFuncs.to_chat( a, new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).str( " draws a fuel rod assembly from an injector.</span>" ).ToString() );
				}
			} else if ( this.try_draw_assembly() ) {
				GlobalFuncs.to_chat( a, new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).str( " draws a fuel rod assembly from an injector.</span>" ).ToString() );
			} else {
				GlobalFuncs.to_chat( a, new Txt( "<span class='warning'>" ).icon( this ).str( " " ).item( this ).str( " was unable to draw a fuel rod assembly from an injector.</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: fuel_assembly_port.dm
		[Verb]
		[VerbInfo( name: "Eject assembly from port", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void eject_assembly_verb(  ) {
			this.eject_assembly();
			return;
		}

	}

}