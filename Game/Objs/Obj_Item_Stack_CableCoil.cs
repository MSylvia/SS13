// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Stack_CableCoil : Obj_Item_Stack {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.amount = 30;
			this.singular_name = "cable piece";
			this.max_amount = 30;
			this._color = "red";
			this.throwforce = 10;
			this.w_class = 2;
			this.throw_range = 5;
			this.starting_materials = new ByTable().Set( "$iron", 3750 );
			this.w_type = 4;
			this.siemens_coefficient = 1.5;
			this.slot_flags = 512;
			this.item_state = "coil_red";
			this.attack_verb = new ByTable(new object [] { "whipped", "lashed", "disciplined", "flogged" });
			this.icon = "icons/obj/power.dmi";
			this.icon_state = "coil_red";
		}

		// Function from file: cable.dm
		public Obj_Item_Stack_CableCoil ( dynamic loc = null, int? length = null, string param_color = null, int? amount = null ) : base( (object)(loc), length ) {
			length = length ?? 30;
			amount = amount ?? length;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.recipes = GlobalVars.cable_recipes;
			this.amount = amount;

			if ( Lang13.Bool( param_color ) ) {
				this._color = param_color;
			}
			this.pixel_x = Rand13.Int( -2, 2 );
			this.pixel_y = Rand13.Int( -2, 2 );
			this.update_icon();
			return;
		}

		// Function from file: cable.dm
		public void cable_join( Game_Data C = null, dynamic user = null ) {
			Ent_Static U = null;
			Ent_Static T = null;
			double? dirn = null;
			double? nd1 = null;
			double? nd2 = null;
			Obj_Structure_Cable LC = null;

			U = user.loc;

			if ( !( U is Tile ) ) {
				return;
			}
			T = ((dynamic)C).loc;

			if ( !( T is Tile ) || Lang13.Bool( ((dynamic)T).intact ) ) {
				return;
			}

			if ( Map13.GetDistance( C, user ) > 1 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You can't lay cable that far away.</span>" );
				return;
			}

			if ( U == T ) {
				this.turf_place( T, user );
				return;
			}
			dirn = Map13.GetDistance( C, user );

			if ( Lang13.DoubleNullable( ((dynamic)C).d1 ) == dirn || Lang13.DoubleNullable( ((dynamic)C).d2 ) == dirn ) {
				
				if ( Lang13.Bool( ((dynamic)U).intact ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You can't lay cable there until the floor is removed.</span>" );
					return;
				} else {
					this.turf_place( user.loc, user, Num13.Rotate( dirn, 180 ) );
				}
			} else if ( Lang13.Bool( ((dynamic)C).d1 ) == false ) {
				nd1 = Lang13.DoubleNullable( ((dynamic)C).d2 );
				nd2 = dirn;

				if ( ( nd1 ??0) > ( nd2 ??0) ) {
					nd1 = dirn;
					nd2 = Lang13.DoubleNullable( ((dynamic)C).d2 );
				}

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Structure_Cable) )) {
					LC = _a;
					

					if ( LC == C ) {
						continue;
					}

					if ( LC.d1 == nd1 && LC.d2 == nd2 || LC.d1 == nd2 && LC.d2 == nd1 ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>There's already a cable at that position.</span>" );
						return;
					}
				}
				((dynamic)C).cableColor( this._color );
				((dynamic)C).d1 = nd1;
				((dynamic)C).d2 = nd2;
				((dynamic)C).add_fingerprint();
				((dynamic)C).update_icon();
				((Obj_Structure_Cable)C).mergeConnectedNetworks( Lang13.DoubleNullable( ((dynamic)C).d1 ) );
				((Obj_Structure_Cable)C).mergeConnectedNetworks( Lang13.DoubleNullable( ((dynamic)C).d2 ) );
				((Obj_Structure_Cable)C).mergeConnectedNetworksOnTurf();

				if ( Lang13.Bool( ((dynamic)C).d1 & ((dynamic)C).d1 - 1 ) ) {
					((Obj_Structure_Cable)C).mergeDiagonalsNetworks( Lang13.DoubleNullable( ((dynamic)C).d1 ) );
				}

				if ( Lang13.Bool( ((dynamic)C).d2 & ((dynamic)C).d2 - 1 ) ) {
					((Obj_Structure_Cable)C).mergeDiagonalsNetworks( Lang13.DoubleNullable( ((dynamic)C).d2 ) );
				}
				this.use( 1 );

				if ( ((Obj_Structure_Cable)C).shock( user, 50 ) ) {
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_CableCoil), ((dynamic)C).loc, 1, ((dynamic)C).light_color );
						GlobalFuncs.returnToPool( C );
						return;
					}
				}
				((Obj_Structure_Cable)C).denode();
			}
			return;
		}

		// Function from file: cable.dm
		public Game_Data turf_place( dynamic F = null, dynamic user = null, int? dirnew = null ) {
			double? dirn = null;
			Obj_Structure_Cable LC = null;
			Game_Data C = null;
			Game_Data PN = null;

			
			if ( !( user.loc is Tile ) ) {
				return null;
			}

			if ( !((Ent_Static)user).Adjacent( F ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You can't lay cable that far away.</span>" );
				return null;
			}

			if ( F.intact == true ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You can't lay cable there until the floor is removed.</span>" );
				return null;
			}
			dirn = null;

			if ( !Lang13.Bool( dirnew ) ) {
				
				if ( user.loc == F ) {
					dirn = Lang13.DoubleNullable( user.dir );
				} else {
					dirn = Map13.GetDistance( F, user );
				}
			} else {
				dirn = dirnew;
			}

			foreach (dynamic _a in Lang13.Enumerate( F, typeof(Obj_Structure_Cable) )) {
				LC = _a;
				

				if ( LC.d2 == dirn && LC.d1 == 0 ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>There already is a cable at that position.</span>" );
					return null;
				}
			}
			C = GlobalFuncs.getFromPool( typeof(Obj_Structure_Cable), F );
			((dynamic)C).cableColor( this._color );
			((dynamic)C).d1 = 0;
			((dynamic)C).d2 = dirn;
			((dynamic)C).add_fingerprint( user );
			((dynamic)C).update_icon();
			PN = GlobalFuncs.getFromPool( typeof(Powernet) );
			((dynamic)PN).add_cable( C );
			((Obj_Structure_Cable)C).mergeConnectedNetworks( Lang13.DoubleNullable( ((dynamic)C).d2 ) );
			((Obj_Structure_Cable)C).mergeConnectedNetworksOnTurf();

			if ( Lang13.Bool( ((dynamic)C).d2 & ((dynamic)C).d2 - 1 ) ) {
				((Obj_Structure_Cable)C).mergeDiagonalsNetworks( Lang13.DoubleNullable( ((dynamic)C).d2 ) );
			}
			this.use( 1 );

			if ( ((Obj_Structure_Cable)C).shock( user, 50 ) ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_CableCoil), ((dynamic)C).loc, 1 );
					GlobalFuncs.returnToPool( C );
				}
			}
			return C;
		}

		// Function from file: cable.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Wirecutters && ( this.amount ??0) > 1 ) {
				this.use( 1 );
				GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_CableCoil), b.loc, 1, this._color );
				GlobalFuncs.to_chat( b, "<span class='notice'>You cut a piece off the cable coil.</span>" );
				this.update_icon();
				return null;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: cable.dm
		[VerbInfo( access: VerbAccess.InView, range: 1 )]
		public override dynamic examine( dynamic user = null, string size = null ) {
			
			if ( this.amount == 1 ) {
				GlobalFuncs.to_chat( Task13.User, "A short piece of power cable." );
			} else if ( this.amount == 2 ) {
				GlobalFuncs.to_chat( Task13.User, "A piece of power cable." );
			} else {
				GlobalFuncs.to_chat( Task13.User, "A coil of power cable. There are " + this.amount + " lengths of cable in the coil." );
			}
			return null;
		}

		// Function from file: cable.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( !Lang13.Bool( this._color ) ) {
				this._color = Rand13.Pick(new object [] { "red", "yellow", "blue", "green" });
			}

			if ( this.amount == 1 ) {
				this.icon_state = "coil_" + this._color + "1";
				this.name = "cable piece";
			} else if ( this.amount == 2 ) {
				this.icon_state = "coil_" + this._color + "2";
				this.name = "cable piece";
			} else {
				this.icon_state = "coil_" + this._color;
				this.name = "cable coil";
			}
			return null;
		}

		// Function from file: cable.dm
		public override bool can_stack_with( dynamic other_stack = null ) {
			return other_stack is Obj_Item_Stack_CableCoil && !( other_stack is Obj_Item_Stack_CableCoil_Heavyduty );
		}

		// Function from file: cable.dm
		public override bool use( double? amount = null ) {
			bool _default = false;

			_default = base.use( amount );
			this.update_icon();
			return _default;
		}

		// Function from file: cable.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			dynamic H = null;
			dynamic S = null;

			
			if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				S = ((Mob_Living_Carbon_Human)H).get_organ( ((dynamic)user.zone_sel).selecting );

				if ( !( ((Organ_External)S).is_robotic() != 0 ) || user.a_intent != "help" ) {
					return base.attack( (object)(M), (object)(user), def_zone, eat_override );
				}

				if ( S.burn_dam > 0 && this.use( 1 ) ) {
					S.heal_damage( 0, 15, 0, 1 );

					if ( user != H ) {
						((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).The( user ).item().str( " repairs some burn damage on their " ).item( S.display_name ).str( " with " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='warning'>You repair some burn damage on your " + S.display_name + ".</span>", "<span class='warning'>You hear wires being cut.</span>" );
					} else {
						((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).The( user ).item().str( " repairs some burn damage on their " ).item( S.display_name ).str( " with " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='warning'>You repair some burn damage on your " + S.display_name + ".</span>", "<span class='warning'>You hear wires being cut.</span>" );
					}
				} else {
					GlobalFuncs.to_chat( user, "<span class='warning'>There's nothing to fix on this limb!</span>" );
				}
			} else {
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
			return null;
		}

		// Function from file: cable.dm
		public override dynamic suicide_act( Mob_Living_Carbon_Human user = null ) {
			GlobalFuncs.to_chat( Map13.FetchViewers( null, user ), new Txt( "<span class='danger'>" ).item( user ).str( " is strangling " ).himself_herself_itself_themself().str( " with the " ).item( this.name ).str( "! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
			return 8;
		}

	}

}