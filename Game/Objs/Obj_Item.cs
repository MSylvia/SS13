// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item : Obj {

		public dynamic blood_overlay = null;
		public bool v_abstract = false;
		public dynamic item_state = null;
		public ByTable inhand_states = new ByTable().Set( "left_hand", "icons/mob/in-hand/left/items_lefthand.dmi" ).Set( "right_hand", "icons/mob/in-hand/right/items_righthand.dmi" );
		public bool r_speed = true;
		public double health = 0;
		public string hitsound = null;
		public dynamic w_class = 3;
		public int? slot_flags = 0;
		public dynamic wielded = null;
		public dynamic master = null;
		public double? max_heat_protection_temperature = null;
		public double heat_conductivity = 0.5;
		public dynamic action_button_name = null;
		public dynamic _color = null;
		public dynamic body_parts_covered = 0;
		public dynamic gas_transfer_coefficient = 1;
		public dynamic permeability_coefficient = 1;
		public double slowdown = 0;
		public bool canremove = true;
		public int cant_drop = 0;
		public ByTable armor = new ByTable().Set( "melee", 0 ).Set( "bullet", 0 ).Set( "laser", 0 ).Set( "energy", 0 ).Set( "bomb", 0 ).Set( "bio", 0 ).Set( "rad", 0 );
		public ByTable v_allowed = null;
		public Obj_Item_Device_Uplink_Hidden hidden_uplink = null;
		public string icon_override = null;
		public ByTable species_fit = null;
		public double surgery_speed = 1;
		public dynamic nonplant_seed_type = null;
		public ByTable attack_verb = null;
		public string vending_cat = null;
		public ByTable dynamic_overlay = new ByTable( 0 );
		public bool contaminated = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.mouse_drag_pointer = 1;
			this.pass_flags = 1;
			this.pressure_resistance = 5;
			this.siemens_coefficient = 1;
			this.icon = "icons/obj/items.dmi";
		}

		public Obj_Item ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: Airflow.dm
		public override dynamic airflow_hit( dynamic A = null ) {
			this.airflow_speed = 0;
			this.airflow_dest = null;
			return null;
		}

		// Function from file: Airflow.dm
		public override bool check_airflow_movable( double n = 0 ) {
			bool _default = false;

			_default = base.check_airflow_movable( n );

			dynamic _a = this.w_class; // Was a switch-case, sorry for the mess.
			if ( _a==2 ) {
				
				if ( n < Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowLightestPressure) ) ) ) {
					return false;
				}
			} else if ( _a==3 ) {
				
				if ( n < Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowLightPressure) ) ) ) {
					return false;
				}
			} else if ( _a==4 || _a==5 ) {
				
				if ( n < Convert.ToDouble( GlobalVars.zas_settings.Get( typeof(ZASSetting_AirflowMediumPressure) ) ) ) {
					return false;
				}
			}
			return _default;
		}

		// Function from file: lighting_atom.dm
		public virtual dynamic dropped( dynamic user = null ) {
			dynamic _default = null;

			_default = this._internal_dropped( user );
			this.update_light();
			return _default;
		}

		// Function from file: lighting_atom.dm
		public virtual bool pickup( Mob user = null ) {
			bool _default = false;

			_default = this._internal_pickup( user ) != null;
			this.update_light();
			return _default;
		}

		// Function from file: lighting_atom.dm
		public virtual dynamic equipped( dynamic user = null, dynamic slot = null ) {
			dynamic _default = null;

			_default = this._internal_equipped( user, slot );
			this.update_light();
			return _default;
		}

		// Function from file: items.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( ( current_size ??0) >= 7 ) {
					Map13.StepTowardsSimple( this, S );
					Task13.Sleep( 1 );
					Map13.StepTowardsSimple( this, S );
				} else if ( ( current_size ??0) > 1 ) {
					Map13.StepTowardsSimple( this, S );
				} else {
					base.singularity_pull( S, current_size, radiations );
				}
				return;
			}));
			return false;
		}

		// Function from file: items.dm
		public override bool add_blood( dynamic M = null ) {
			
			if ( !base.add_blood( (object)(M) ) ) {
				return false;
			}

			if ( this is Obj_Item_Weapon_Melee_Energy ) {
				return false;
			}

			if ( !Lang13.Bool( GlobalVars.blood_overlays[this.type] ) ) {
				this.generate_blood_overlay();
			}

			if ( !Lang13.Bool( this.blood_overlay ) ) {
				this.blood_overlay = GlobalVars.blood_overlays[this.type];
			} else {
				this.overlays.Remove( this.blood_overlay );
			}
			this.blood_overlay.color = this.blood_color;
			this.overlays.Add( this.blood_overlay );

			if ( !Lang13.Bool( M ) ) {
				return false;
			}

			if ( Lang13.Bool( this.blood_DNA[M.dna.unique_enzymes] ) ) {
				return false;
			}
			this.blood_DNA[M.dna.unique_enzymes] = M.dna.b_type;
			return true;
		}

		// Function from file: items.dm
		public override bool clean_blood( dynamic clean_feet = null ) {
			bool _default = false;

			Obj_Item G = null;

			_default = base.clean_blood( (object)(clean_feet) );

			if ( Lang13.Bool( this.blood_overlay ) ) {
				this.overlays.Remove( this.blood_overlay );
			}

			if ( this is Obj_Item_Clothing_Gloves ) {
				G = this;
				((dynamic)G).transfer_blood = 0;
			}
			return _default;
		}

		// Function from file: items.dm
		public override bool verb_pickup( Mob user = null ) {
			Mob h_user = null;

			
			if ( !this.can_pickup( user ) ) {
				return false;
			}

			if ( !( user.hand == true ) && Lang13.Bool( user.r_hand ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Your right hand is full.</span>" );
				return false;
			}

			if ( user.hand == true && Lang13.Bool( user.l_hand ) && !( user is Mob_Living_Silicon_Robot_Mommi ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Your left hand is full.</span>" );
				return false;
			}

			if ( user is Mob_Living_Silicon_Robot_Mommi ) {
				
				if ( this is Obj_Item_Weapon_AiModule ) {
					GlobalFuncs.to_chat( this, "<span class='warning'>Your firmware prevents you from picking up " + this + "!</span>" );
					return false;
				}

				if ( user.get_active_hand() == null ) {
					user.put_in_hands( this );
				}
			}

			if ( user is Mob_Living_Carbon_Human ) {
				h_user = user;

				if ( Lang13.Bool( ((dynamic)h_user).can_use_hand() ) ) {
					this.attack_hand( h_user );
				} else {
					this.attack_stump( h_user );
				}
			}

			if ( user is Mob_Living_Carbon_Alien ) {
				this.attack_alien( user );
			}

			if ( user is Mob_Living_Carbon_Monkey ) {
				this.attack_paw( user );
			}
			return false;
		}

		// Function from file: items.dm
		public override bool can_pickup( Mob user = null ) {
			
			if ( !( user != null ) || !( user is Mob_Living ) ) {
				return false;
			}

			if ( user.incapacitated() || !this.Adjacent( user ) ) {
				return false;
			}

			if ( !( user is Mob_Living_Carbon ) && !( user is Mob_Living_Silicon_Robot_Mommi ) || user is Mob_Living_Carbon_Brain ) {
				GlobalFuncs.to_chat( user, "You can't pick things up!" );
			}

			if ( Lang13.Bool( this.anchored ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You can't pick that up!</span>" );
				return false;
			}

			if ( !( this.loc is Tile ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You can't pick that up!</span>" );
				return false;
			}
			return true;
		}

		// Function from file: items.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return null;
		}

		// Function from file: items.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			Mob A = null;
			dynamic M = null;

			
			if ( a is Mob_Living_Carbon_Alien ) {
				A = a;

				if ( !Lang13.Bool( ((dynamic)A).has_fine_manipulation ) || Convert.ToDouble( this.w_class ) >= 4 ) {
					
					if ( A.contents.Contains( this ) ) {
						A.drop_from_inventory( this );
					}
					GlobalFuncs.to_chat( a, "Your claws aren't capable of such fine manipulation." );
					return null;
				}
			}

			if ( this.loc is Obj_Item_Weapon_Storage ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this.loc, 1 ) )) {
					M = _a;
					

					if ( M.s_active == this.loc ) {
						
						if ( Lang13.Bool( M.client ) ) {
							M.client.screen -= this;
						}
					}
				}
			}
			this.throwing = 0;

			if ( this.loc == a ) {
				
				if ( this is Obj_Item_Clothing && !this.canremove ) {
					return null;
				} else {
					a.u_equip( this, false );
				}
			} else if ( this.loc is Mob_Living ) {
				return null;
			}
			a.put_in_active_hand( this );
			return null;
		}

		// Function from file: items.dm
		public override bool requires_dexterity( Mob user = null ) {
			return true;
		}

		// Function from file: items.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Ent_Static S = null;

			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}

			if ( this.loc is Obj_Item_Weapon_Storage ) {
				S = this.loc;
				((dynamic)S).remove_from_storage( this, a );
			}
			this.throwing = 0;

			if ( this.loc == a ) {
				
				if ( this == ((Mob)a).get_inactive_hand() ) {
					
					if ( Lang13.Bool( this.flags & 32 ) ) {
						return this.wield( a );
					}
				}

				if ( !this.canremove ) {
					return null;
				} else {
					((Mob)a).u_equip( this, false );
				}
			} else if ( this.loc is Mob_Living ) {
				return null;
			}
			this.add_fingerprint( a );
			((Mob)a).put_in_active_hand( this );
			return null;
		}

		// Function from file: items.dm
		public override dynamic attack_ai( dynamic user = null ) {
			bool in_range = false;
			dynamic R = null;

			base.attack_ai( (object)(user) );

			if ( user is Mob_Living_Silicon_Robot_Mommi ) {
				in_range = GlobalFuncs.in_range( this, user ) || this.loc == user;

				if ( in_range ) {
					
					if ( this == user.tool_state ) {
						return 0;
					}
					this.attack_hand( user );
				}
			} else if ( user is Mob_Living_Silicon_Robot ) {
				
				if ( !( this.loc is Obj_Item_Weapon_RobotModule ) ) {
					return null;
				}
				R = user;
				((Mob_Living_Silicon_Robot)R).activate_module( this );
				R.hud_used.update_robot_modules_display();
			}
			return null;
		}

		// Function from file: items.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string size2 = null;
			string pronoun = null;

			
			dynamic _a = this.w_class; // Was a switch-case, sorry for the mess.
			if ( 5<=_a&&_a<=Double.PositiveInfinity ) {
				size2 = "huge";
			} else if ( _a==1 ) {
				size2 = "tiny";
			} else if ( _a==2 ) {
				size2 = "small";
			} else if ( _a==3 ) {
				size2 = "normal-sized";
			} else if ( _a==4 ) {
				size2 = "bulky";
			}
			pronoun = null;

			if ( this.gender == GlobalVars.PLURAL ) {
				pronoun = "They are";
			} else {
				pronoun = "It is";
			}
			base.examine( (object)(user), " " + pronoun + " a " + size2 + " item." );

			if ( this.cant_drop > 0 && ( this == user.l_hand || this == user.r_hand ) ) {
				user.WriteMsg( "<span class='danger'>It's stuck to your hands!</span>" );
			}
			return null;
		}

		// Function from file: items.dm
		public override int projectile_check(  ) {
			return 4;
		}

		// Function from file: items.dm
		public override bool blob_act( dynamic severity = null ) {
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: items.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 5 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: items.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Ent_Static H = null;

			
			if ( this.loc is Mob ) {
				H = this.loc;
				((dynamic)H).drop_from_inventory( this );
			}

			if ( GlobalFuncs.hasvar( this, "holder" ) ) {
				((dynamic)this).holder = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: telekinesis.dm
		public override void attack_tk( Mob user = null ) {
			Obj_Item_TkGrab O = null;

			
			if ( Lang13.Bool( user.stat ) || !( this.loc is Tile ) ) {
				return;
			}

			if ( user.mutations.Contains( 1 ) && !Lang13.Bool( user.get_active_hand() ) ) {
				O = new Obj_Item_TkGrab( this );
				user.put_in_active_hand( O );
				O.host = user;
				O.focus_object( this );
			} else {
				Game13.log.WriteMsg( "## WARNING: " + ( "Strange attack_tk(): TK(" + user.mutations.Contains( 1 ) + ") empty hand(" + !Lang13.Bool( user.get_active_hand() ) + ")" ) );
			}
			return;
		}

		// Function from file: Plasma.dm
		public void decontaminate(  ) {
			this.contaminated = false;
			this.overlays.Remove( GlobalVars.contamination_overlay );
			return;
		}

		// Function from file: Plasma.dm
		public void contaminate(  ) {
			
			if ( !this.contaminated ) {
				this.contaminated = true;
				this.overlays.Add( GlobalVars.contamination_overlay );
			}
			return;
		}

		// Function from file: Plasma.dm
		public virtual bool can_contaminate(  ) {
			
			if ( Lang13.Bool( this.flags & 16384 ) ) {
				return false;
			} else if ( this is Obj_Item_Weapon_Storage_Backpack ) {
				return false;
			} else if ( this is Obj_Item_Clothing ) {
				return true;
			}
			return false;
		}

		// Function from file: paper.dm
		public void ashify_item( dynamic user = null ) {
			bool prot = false;
			dynamic H = null;
			dynamic G = null;

			prot = false;

			if ( user is Mob_Living_Carbon_Human ) {
				H = user;

				if ( Lang13.Bool( H.mutations.Contains( 106 ) ) ) {
					prot = true;
				} else if ( Lang13.Bool( H.gloves ) ) {
					G = H.gloves;

					if ( Lang13.Bool( G.max_heat_protection_temperature ) ) {
						prot = ( G.max_heat_protection_temperature ??0) > ( this.autoignition_temperature ??0);
					}
				}

				if ( !prot && Lang13.Bool( H.mutations.Contains( 5 ) ) && Rand13.PercentChance( 50 ) ) {
					((Mob_Living)H).apply_damage( 10, "fire", Rand13.Pick(new object [] { "l_hand", "r_hand" }) );
					((Mob)user).drop_hands();
					((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " tries to burn the " ).item( this.name ).str( ", but burns " ).his_her_its_their().str( " hand trying!</span>" ).ToString(), "<span class='warning'>You try to burn the " + this.name + ", but burn your hand trying!</span>" );
					return;
				}
			}

			if ( prot ) {
				((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " holds up the " ).item( this.name ).str( " and sets it on fire, holding it in " ).his_her_its_their().str( " hand as it burns down to ashes. Damn, " ).he_she_it_they().str( "'s cold.</span>" ).ToString(), "<span class='warning'>You hold up the " + this.name + " and set it on fire, holding it in your hand as it burns down to ashes. Damn, you're cold.</span>" );
			} else {
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " holds up the " + this.name + " and sets it on fire, reducing it to a heap of ashes.</span>", "<span class='warning'>You hold up the " + this.name + " and set it on fire, reducing it to a heap of ashes.</span>" );
			}
			Lang13.Call( this.ashtype, GlobalFuncs.get_turf( this ) );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: mob.dm
		public int mob_check_equip( Mob M = null, dynamic slot = null, bool? disable_warning = null ) {
			disable_warning = disable_warning ?? false;

			Mob H = null;
			dynamic B = null;

			
			if ( !( M != null ) ) {
				return 0;
			}

			if ( !Lang13.Bool( slot ) ) {
				return 0;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				dynamic _a = slot; // Was a switch-case, sorry for the mess.
				if ( _a==4 ) {
					
					if ( Lang13.Bool( H.l_hand ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==5 ) {
					
					if ( Lang13.Bool( H.r_hand ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==2 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 32 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.wear_mask ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==1 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 1024 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.back ) ) {
						
						if ( H.back.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==13 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 1 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).wear_suit ) ) {
						
						if ( ((dynamic)H).wear_suit.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==10 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 4 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).gloves ) ) {
						
						if ( ((dynamic)H).gloves.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==12 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 128 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).shoes ) ) {
						
						if ( ((dynamic)H).shoes.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==6 ) {
					
					if ( !Lang13.Bool( ((dynamic)H).w_uniform ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a jumpsuit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( !( ( ( this.slot_flags ??0) & 512 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).belt ) ) {
						
						if ( ((dynamic)H).belt.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==9 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 8 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).glasses ) ) {
						
						if ( ((dynamic)H).glasses.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==11 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 64 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).head ) ) {
						
						if ( ((dynamic)H).head.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==8 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 8 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).ears ) ) {
						
						if ( ((dynamic)H).ears.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==14 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 2 ) != 0 ) ) {
						return 0;
					}

					if ( H.mutations.Contains( 6 ) && Lang13.Bool( ((dynamic)H).species ) && Lang13.Bool( ((dynamic)H).species.flags & 8192 ) && !Lang13.Bool( this.flags & 8192 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).w_uniform ) ) {
						
						if ( ((dynamic)H).w_uniform.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==7 ) {
					
					if ( !Lang13.Bool( ((dynamic)H).w_uniform ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a jumpsuit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( !( ( ( this.slot_flags ??0) & 256 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( ((dynamic)H).wear_id ) ) {
						
						if ( ((dynamic)H).wear_id.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==15 ) {
					
					if ( Lang13.Bool( ((dynamic)H).l_store ) ) {
						return 0;
					}

					if ( !Lang13.Bool( ((dynamic)H).w_uniform ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a jumpsuit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( ( ( this.slot_flags ??0) & 4096 ) != 0 ) {
						return 0;
					}

					if ( Convert.ToDouble( this.w_class ) <= 2 || ( ( this.slot_flags ??0) & 2048 ) != 0 ) {
						return 1;
					}
				} else if ( _a==16 ) {
					
					if ( Lang13.Bool( ((dynamic)H).r_store ) ) {
						return 0;
					}

					if ( !Lang13.Bool( ((dynamic)H).w_uniform ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a jumpsuit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( ( ( this.slot_flags ??0) & 4096 ) != 0 ) {
						return 0;
					}

					if ( Convert.ToDouble( this.w_class ) <= 2 || ( ( this.slot_flags ??0) & 2048 ) != 0 ) {
						return 1;
					}
					return 0;
				} else if ( _a==17 ) {
					
					if ( !Lang13.Bool( ((dynamic)H).wear_suit ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a suit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( !( ((dynamic)H).wear_suit.v_allowed != null ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( Task13.User, "You somehow have a suit with no defined allowed items for suit storage, stop that." );
						}
						return 0;
					}

					if ( Convert.ToDouble( this.w_class ) > 3 ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( Task13.User, "The " + this.name + " is too big to attach." );
						}
						return 0;
					}

					if ( this is Obj_Item_Device_Pda || this is Obj_Item_Weapon_Pen || GlobalFuncs.is_type_in_list( this, ((dynamic)H).wear_suit.v_allowed ) ) {
						
						if ( Lang13.Bool( ((dynamic)H).s_store ) ) {
							
							if ( ((dynamic)H).s_store.canremove ) {
								return 2;
							} else {
								return 0;
							}
						} else {
							return 1;
						}
					}
					return 0;
				} else if ( _a==3 ) {
					
					if ( Lang13.Bool( ((dynamic)H).handcuffed ) ) {
						return 0;
					}

					if ( !( this is Obj_Item_Weapon_Handcuffs ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==19 ) {
					
					if ( Lang13.Bool( ((dynamic)H).legcuffed ) ) {
						return 0;
					}

					if ( !( this is Obj_Item_Weapon_Legcuffs ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==18 ) {
					
					if ( Lang13.Bool( H.back ) && H.back is Obj_Item_Weapon_Storage_Backpack ) {
						B = H.back;

						if ( B.contents.len < Convert.ToDouble( B.storage_slots ) && Convert.ToDouble( this.w_class ) <= Convert.ToDouble( B.max_w_class ) ) {
							return 1;
						}
					}
					return 0;
				}
				return 0;
			}
			return 0;
		}

		// Function from file: uplinks.dm
		public bool active_uplink_check( dynamic user = null ) {
			
			if ( this.hidden_uplink != null ) {
				
				if ( this.hidden_uplink.active ) {
					this.hidden_uplink.trigger( user );
					return true;
				}
			}
			return false;
		}

		// Function from file: objs.dm
		public void updateSelfDialog(  ) {
			Ent_Static M = null;

			M = this.loc;

			if ( M is Mob && Lang13.Bool( ((dynamic)M).client ) && ((dynamic)M).machine == this ) {
				this.attack_self( M );
			}
			return;
		}

		// Function from file: objs.dm
		public virtual bool is_used_on( dynamic O = null, dynamic user = null ) {
			return false;
		}

		// Function from file: items.dm
		public virtual dynamic get_rating(  ) {
			return 0;
		}

		// Function from file: items.dm
		public virtual void OnMobDeath( Mob holder = null ) {
			return;
		}

		// Function from file: items.dm
		public virtual void OnMobLife( Mob_Living_Carbon_Human holder = null ) {
			return;
		}

		// Function from file: items.dm
		public void showoff( Mob_Living_Carbon user = null ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( null, user ) )) {
				M = _a;
				
				M.show_message( new Txt().item( user ).str( " holds up " ).item( this ).str( ". <a HREF='?src=" ).Ref( M ).str( ";lookitem=" ).Ref( this ).str( "'>Take a closer look.</a>" ).ToString(), 1 );
			}
			return;
		}

		// Function from file: items.dm
		public virtual void generate_blood_overlay(  ) {
			Icon I = null;

			
			if ( Lang13.Bool( GlobalVars.blood_overlays[this.type] ) ) {
				return;
			}
			I = new Icon( this.icon, this.icon_state );
			I.Blend( new Icon( "icons/effects/blood.dmi", "#ffffff" ), 0 );
			I.Blend( new Icon( "icons/effects/blood.dmi", "itemblood" ), 2 );
			GlobalVars.blood_overlays[this.type] = new Image( I );
			return;
		}

		// Function from file: items.dm
		public void eyestab( dynamic M = null, dynamic user = null ) {
			dynamic H = null;
			dynamic eye_protection = null;
			dynamic Mo = null;
			Organ_Internal eyes = null;
			dynamic O = null;
			dynamic affecting = null;

			H = M;

			if ( H is Mob_Living_Carbon_Human ) {
				eye_protection = ((Mob_Living_Carbon_Human)H).get_body_part_coverage( 2048 );

				if ( Lang13.Bool( eye_protection ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You're going to need to remove that " + eye_protection + " first.</span>" );
					return;
				}
			}
			Mo = M;

			if ( Mo is Mob_Living_Carbon_Monkey && Lang13.Bool( Mo.wear_mask ) && Lang13.Bool( Mo.wear_mask.body_parts_covered & 2048 ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You're going to need to remove that mask first.</span>" );
				return;
			}

			if ( !((Mob_Living)M).has_eyes() ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You cannot locate any eyes on " + M + "!</span>" );
				return;
			}
			user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='red'> Attacked " + M.name + " (" + M.ckey + ") with " + this.name + " (INTENT: " + String13.ToUpper( user.a_intent ) + ")</font>" );
			M.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='orange'> Attacked by " + user.name + " (" + user.ckey + ") with " + this.name + " (INTENT: " + String13.ToUpper( user.a_intent ) + ")</font>" );
			GlobalFuncs.msg_admin_attack( "ATTACK: " + user.name + " (" + user.ckey + ") attacked " + M.name + " (" + M.ckey + ") with " + this.name + " (INTENT: " + String13.ToUpper( user.a_intent ) + ")" );
			GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'> " + user.name + " (" + user.ckey + ") attacked " + M.name + " (" + M.ckey + ") with " + this.name + " (INTENT: " + String13.ToUpper( user.a_intent ) + ")</font>" ) ) );

			if ( !( user is Mob_Living_Carbon ) ) {
				M.LAssailant = null;
			} else {
				M.LAssailant = user;
			}
			this.add_fingerprint( user );

			if ( M is Mob_Living_Carbon_Human ) {
				eyes = H.internal_organs_by_name["eyes"];

				if ( M != user ) {
					
					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, M ) - user - M )) {
						O = _a;
						
						O.show_message( "<span class='danger'>" + M + " has been stabbed in the eye with " + this + " by " + user + ".</span>", 1 );
					}
					GlobalFuncs.to_chat( M, "<span class='userdanger'>" + user + " stabs you in the eye with " + this + "!</span>" );
					GlobalFuncs.to_chat( user, "<span class='attack'>You stab " + M + " in the eye with " + this + "!</span>" );
				} else {
					((Ent_Static)user).visible_message( "<span class='attack'>" + user + " has stabbed themself with " + this + "!</span>", "<span class='userdanger'>You stab yourself in the eyes with " + this + "!</span>" );
				}
				eyes.damage += Rand13.Int( 3, 4 );

				if ( eyes.damage >= eyes.min_bruised_damage ) {
					
					if ( Convert.ToInt32( M.stat ) != 2 ) {
						
						if ( eyes.robotic <= 1 ) {
							GlobalFuncs.to_chat( M, "<span class='warning'>Your eyes start to bleed profusely!</span>" );
						}
					}

					if ( Rand13.PercentChance( 50 ) ) {
						
						if ( Convert.ToInt32( M.stat ) != 2 ) {
							GlobalFuncs.to_chat( M, "<span class='warning'>You drop what you're holding and clutch at your eyes!</span>" );
							M.drop_item();
						}
						M.eye_blurry += 10;
						((Mob)M).Paralyse( 1 );
						((Mob)M).Weaken( 4 );
					}

					if ( eyes.damage >= eyes.min_broken_damage ) {
						
						if ( Convert.ToInt32( M.stat ) != 2 ) {
							GlobalFuncs.to_chat( M, "<span class='warning'>You go blind!</span>" );
						}
					}
				}
				affecting = ((Mob_Living_Carbon_Human)M).get_organ( "head" );

				if ( Lang13.Bool( affecting.take_damage( 7 ) ) ) {
					((Mob_Living)M).UpdateDamageIcon( true );
				}
			} else {
				((Mob_Living)M).take_organ_damage( 7 );
			}
			M.eye_blurry += Rand13.Int( 3, 4 );
			return;
		}

		// Function from file: items.dm
		public virtual bool on_block( dynamic damage = null, string attack_text = null ) {
			attack_text = attack_text ?? "the attack";

			
			if ( this.loc is Mob ) {
				
				if ( Rand13.PercentChance( 50 - Num13.Floor( Convert.ToDouble( damage / 3 ) ) ) ) {
					this.visible_message( new Txt( "<span class='danger'>" ).item( this.loc ).str( " blocks " ).item( attack_text ).str( " with " ).the( this ).item().str( "!</span>" ).ToString() );
					return true;
				}
			}
			return false;
		}

		// Function from file: items.dm
		public virtual bool IsShield(  ) {
			return false;
		}

		// Function from file: items.dm
		public virtual void update_wield( dynamic user = null ) {
			return;
		}

		// Function from file: items.dm
		public virtual dynamic unwield( dynamic user = null ) {
			
			if ( Lang13.Bool( user.Contains( Lang13.Bool( this.flags & 64 ) && this != null ) ) ) {
				((Mob)user).drop_from_inventory( this );
			}

			if ( this.wielded is Obj_Item_Offhand ) {
				((Mob)user).u_equip( this.wielded, true );

				if ( Lang13.Bool( this.wielded ) ) {
					this.wielded.wielding = null;
					GlobalFuncs.returnToPool( this.wielded );
					this.wielded = null;
				}
			}
			this.update_wield( user );
			return null;
		}

		// Function from file: items.dm
		public bool wield( dynamic user = null, bool? inactive = null ) {
			inactive = inactive ?? false;

			
			if ( !( user is Mob_Living_Carbon_Human ) ) {
				user.show_message( new Txt( "You can't wield " ).the( this ).item().str( " as it's too heavy." ).ToString() );
				return false;
			}

			if ( !Lang13.Bool( this.wielded ) ) {
				this.wielded = GlobalFuncs.getFromPool( typeof(Obj_Item_Offhand) );

				if ( new ByTable(new object [] { null, this }).Contains( ((Mob)user).get_active_hand() ) && ((Mob)user).put_in_inactive_hand( this.wielded ) || !( inactive == true ) && new ByTable(new object [] { null, this }).Contains( ((Mob)user).get_inactive_hand() ) && ((Mob)user).put_in_active_hand( this.wielded ) ) {
					((Obj_Item_Offhand)this.wielded).attach_to( this );
					this.update_wield( user );
					return true;
				}
				this.unwield( user );
				return false;
			}
			return false;
		}

		// Function from file: items.dm
		public virtual void ui_action_click(  ) {
			
			if ( Lang13.Bool( ((dynamic)Task13.User).Contains( this ) ) ) {
				this.attack_self( Task13.User );
			}
			return;
		}

		// Function from file: items.dm
		public virtual int mob_can_equip( dynamic M = null, dynamic slot = null, bool? disable_warning = null, bool? automatic = null ) {
			disable_warning = disable_warning ?? false;
			automatic = automatic ?? false;

			dynamic H = null;
			dynamic B = null;
			dynamic MO = null;

			
			if ( !Lang13.Bool( slot ) ) {
				return 0;
			}

			if ( !Lang13.Bool( M ) ) {
				return 0;
			}

			if ( Lang13.Bool( this.wielded ) ) {
				
				if ( Lang13.Bool( this.flags & 64 ) ) {
					M.show_message( new Txt().The( this ).item().str( " is too cumbersome to carry in anything other than your hands." ).ToString() );
				} else {
					M.show_message( new Txt( "You have to unwield " ).the( this.wielded.wielding ).item().str( " first." ).ToString() );
				}
				return 0;
			}

			if ( this.cant_drop > 0 ) {
				M.WriteMsg( "<span class='danger'>It's stuck to your hands!</span>" );
				return 0;
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;

				if ( this is Obj_Item_Clothing_Under || this is Obj_Item_Clothing_Suit ) {
					
					if ( Lang13.Bool( H.mutations.Contains( 6 ) ) ) {
						Game13.log.WriteMsg( "## TESTING: " + ( "" + M + " TOO FAT TO WEAR " + this + "!" ) );

						if ( !Lang13.Bool( this.flags & 8192 ) ) {
							
							if ( !( disable_warning == true ) ) {
								GlobalFuncs.to_chat( H, "<span class='warning'>You're too fat to wear the " + this.name + ".</span>" );
							}
							return 0;
						}
					}
				}

				dynamic _a = slot; // Was a switch-case, sorry for the mess.
				if ( _a==4 ) {
					
					if ( Lang13.Bool( H.l_hand ) || Lang13.Bool( H.handcuffed ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==5 ) {
					
					if ( Lang13.Bool( H.r_hand ) || Lang13.Bool( H.handcuffed ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==2 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 32 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.wear_mask ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.wear_mask.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==1 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 1024 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.back ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.back.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==13 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 1 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.wear_suit ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.wear_suit.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==10 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 4 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.gloves ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.gloves.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==12 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 128 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.shoes ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.shoes.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==6 ) {
					
					if ( !Lang13.Bool( H.w_uniform ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a jumpsuit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( !( ( ( this.slot_flags ??0) & 512 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.belt ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.belt.canremove && !( H.belt is Obj_Item_Weapon_Storage_Belt ) ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==9 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 8 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.glasses ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.glasses.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==11 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 64 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.head ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.head.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==8 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 16 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.ears ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.ears.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==14 ) {
					
					if ( !( ( ( this.slot_flags ??0) & 2 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.w_uniform ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.w_uniform.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==7 ) {
					
					if ( !Lang13.Bool( H.w_uniform ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a jumpsuit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( !( ( ( this.slot_flags ??0) & 256 ) != 0 ) ) {
						return 0;
					}

					if ( Lang13.Bool( H.wear_id ) ) {
						
						if ( automatic == true ) {
							
							if ( ((Mob)H).check_for_open_slot( this ) ) {
								return 0;
							}
						}

						if ( H.wear_id.canremove ) {
							return 2;
						} else {
							return 0;
						}
					}
					return 1;
				} else if ( _a==15 ) {
					
					if ( !Lang13.Bool( H.w_uniform ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a jumpsuit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( ( ( this.slot_flags ??0) & 4096 ) != 0 ) {
						return 0;
					}

					if ( automatic == true ) {
						
						if ( Lang13.Bool( H.l_store ) ) {
							return 0;
						} else if ( Convert.ToDouble( this.w_class ) <= 2 || ( ( this.slot_flags ??0) & 2048 ) != 0 ) {
							return 1;
						}
					} else if ( Convert.ToDouble( this.w_class ) <= 2 || ( ( this.slot_flags ??0) & 2048 ) != 0 ) {
						
						if ( Lang13.Bool( H.l_store ) ) {
							return 2;
						} else {
							return 1;
						}
					}
				} else if ( _a==16 ) {
					
					if ( !Lang13.Bool( H.w_uniform ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a jumpsuit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( ( ( this.slot_flags ??0) & 4096 ) != 0 ) {
						return 0;
					}

					if ( automatic == true ) {
						
						if ( Lang13.Bool( H.r_store ) ) {
							return 0;
						} else if ( Convert.ToDouble( this.w_class ) <= 2 || ( ( this.slot_flags ??0) & 2048 ) != 0 ) {
							return 1;
						}
					} else if ( Convert.ToDouble( this.w_class ) <= 2 || ( ( this.slot_flags ??0) & 2048 ) != 0 ) {
						
						if ( Lang13.Bool( H.r_store ) ) {
							return 2;
						} else {
							return 1;
						}
					}
				} else if ( _a==17 ) {
					
					if ( !Lang13.Bool( H.wear_suit ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( H, "<span class='warning'>You need a suit before you can attach this " + this.name + ".</span>" );
						}
						return 0;
					}

					if ( !( H.wear_suit.v_allowed != null ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( Task13.User, "You somehow have a suit with no defined allowed items for suit storage, stop that." );
						}
						return 0;
					}

					if ( Convert.ToDouble( this.w_class ) > 3 && !( H.wear_suit.v_allowed.len != 0 ) ) {
						
						if ( !( disable_warning == true ) ) {
							GlobalFuncs.to_chat( Task13.User, "The " + this.name + " is too big to attach." );
						}
						return 0;
					}

					if ( this is Obj_Item_Device_Pda || this is Obj_Item_Weapon_Pen || GlobalFuncs.is_type_in_list( this, H.wear_suit.v_allowed ) ) {
						
						if ( Lang13.Bool( H.s_store ) ) {
							
							if ( automatic == true ) {
								
								if ( ((Mob)H).check_for_open_slot( this ) ) {
									return 0;
								}
							}

							if ( H.s_store.canremove ) {
								return 2;
							} else {
								return 0;
							}
						} else {
							return 1;
						}
					}
					return 0;
				} else if ( _a==3 ) {
					
					if ( Lang13.Bool( H.handcuffed ) ) {
						return 0;
					}

					if ( !( this is Obj_Item_Weapon_Handcuffs ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==19 ) {
					
					if ( Lang13.Bool( H.legcuffed ) ) {
						return 0;
					}

					if ( !( this is Obj_Item_Weapon_Legcuffs ) ) {
						return 0;
					}
					return 1;
				} else if ( _a==18 ) {
					
					if ( Lang13.Bool( H.back ) && H.back is Obj_Item_Weapon_Storage_Backpack ) {
						B = H.back;

						if ( B.contents.len < Convert.ToDouble( B.storage_slots ) && Convert.ToDouble( this.w_class ) <= Convert.ToDouble( B.max_w_class ) ) {
							return 1;
						}
					}
					return 0;
				}
				return 0;
			} else if ( M is Mob_Living_Carbon_Monkey ) {
				MO = M;

				dynamic _b = slot; // Was a switch-case, sorry for the mess.
				if ( _b==4 ) {
					
					if ( Lang13.Bool( MO.l_hand ) ) {
						return 0;
					}
					return 1;
				} else if ( _b==5 ) {
					
					if ( Lang13.Bool( MO.r_hand ) ) {
						return 0;
					}
					return 1;
				} else if ( _b==2 ) {
					
					if ( Lang13.Bool( MO.wear_mask ) ) {
						return 0;
					}

					if ( !( ( ( this.slot_flags ??0) & 32 ) != 0 ) ) {
						return 0;
					}
					return 1;
				} else if ( _b==1 ) {
					
					if ( Lang13.Bool( MO.back ) ) {
						return 0;
					}

					if ( !( ( ( this.slot_flags ??0) & 1024 ) != 0 ) ) {
						return 0;
					}
					return 1;
				}
				return 0;
			}
			return 0;
		}

		// Function from file: items.dm
		public void unequipped( dynamic user = null ) {
			return;
		}

		// Function from file: items.dm
		[VerbInfo( name: "equipped" )]
		[VerbArg( 1, InputType.Mob )]
		public void _internal_equipped( dynamic user = null, dynamic slot = null ) {
			
			if ( this.cant_drop != 0 ) {
				
				if ( new ByTable(new object [] { 5, 4 }).Contains( slot ) ) {
					user.WriteMsg( new Txt( "<span class='notice'>" ).The( this ).item().str( " sticks to your hand!</span>" ).ToString() );
				}
			}
			return;
		}

		// Function from file: items.dm
		public virtual bool on_found( dynamic finder = null ) {
			return false;
		}

		// Function from file: items.dm
		public void on_enter_storage( Obj_Item_Weapon_Storage S = null ) {
			return;
		}

		// Function from file: items.dm
		public void on_exit_storage( Obj_Item_Weapon_Storage S = null ) {
			return;
		}

		// Function from file: items.dm
		[VerbInfo( name: "pickup" )]
		[VerbArg( 1, InputType.Mob )]
		public void _internal_pickup( Mob user = null ) {
			return;
		}

		// Function from file: items.dm
		public virtual dynamic prepickup( Mob user = null ) {
			return null;
		}

		// Function from file: items.dm
		public virtual dynamic stripped( dynamic wearer = null, dynamic stripper = null ) {
			this.unequipped( wearer ); return null;
		}

		// Function from file: items.dm
		[VerbInfo( name: "dropped" )]
		[VerbArg( 1, InputType.Mob )]
		public void _internal_dropped( dynamic user = null ) {
			this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) );

			if ( Lang13.Bool( this.wielded ) ) {
				this.unwield( user );
			}
			return;
		}

		// Function from file: items.dm
		public void moved( dynamic user = null, dynamic old_loc = null ) {
			return;
		}

		// Function from file: items.dm
		public virtual void talk_into( Game_Data speech = null, dynamic channel = null ) {
			return;
		}

		// Function from file: items.dm
		public virtual dynamic suicide_act( Mob_Living_Carbon_Human user = null ) {
			return null;
		}

		// Function from file: items.dm
		public double return_thermal_protection(  ) {
			return GlobalFuncs.return_cover_protection( this.body_parts_covered ) * ( 1 - this.heat_conductivity );
		}

		// Function from file: ai_core.dm
		public void transfer_ai( string choice = null, string interaction = null, dynamic target = null, dynamic U = null ) {
			dynamic T = null;
			Obj_Item C = null;
			dynamic malf = null;
			Mind malfai = null;
			dynamic T2 = null;
			Obj_Item C2 = null;
			dynamic A = null;
			dynamic T3 = null;
			Obj_Item C3 = null;
			Mob_Living_Silicon_Ai A2 = null;

			
			if ( !Lang13.Bool( ((dynamic)this).flush ) ) {
				
				switch ((string)( choice )) {
					case "AICORE":
						T = target;

						switch ((string)( interaction )) {
							case "AICARD":
								C = this;

								if ( C.contents.len != 0 ) {
									GlobalFuncs.to_chat( U, "<span class='danger'>Transfer failed:</span> Existing AI found on this terminal. Remove existing AI to install a new one." );
								} else {
									
									if ( GlobalVars.ticker.mode.name == "AI malfunction" ) {
										malf = GlobalVars.ticker.mode;

										foreach (dynamic _a in Lang13.Enumerate( malf.malf_ai, typeof(Mind) )) {
											malfai = _a;
											

											if ( T.mind == malfai ) {
												GlobalFuncs.to_chat( U, "<span class='danger'>ERROR:</span> Remote transfer interface disabled." );
												return;
											}
										}
									}
									new Obj_Structure_AIcore_Deactivated( T.loc );
									T.control_disabled = true;
									T.loc = C;
									C.name = "inteliCard - " + T.name;

									if ( Convert.ToInt32( T.stat ) == 2 ) {
										C.icon_state = "aicard-404";
									} else {
										C.icon_state = "aicard-full";
									}
									T.__CallVerb("Cancel Camera View" );
									GlobalFuncs.to_chat( T, "You have been downloaded to a mobile storage device. Remote device connection severed." );
									GlobalFuncs.to_chat( U, "<span class='notice'><b>Transfer successful</b>:</span> " + T.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) removed from host terminal and stored within local memory." );

									if ( T.aiRestorePowerRoutine != 0 ) {
										T.aiRestorePowerRoutine = -1;
										((dynamic)T.blind).layer = 0;
									}
								}
								break;
						}
						break;
					case "INACTIVE":
						T2 = target;

						switch ((string)( interaction )) {
							case "AICARD":
								C2 = this;
								A = Lang13.FindIn( typeof(Mob_Living_Silicon_Ai), C2 );

								if ( Lang13.Bool( A ) ) {
									A.control_disabled = false;
									A.loc = T2.loc;
									C2.icon_state = "aicard";
									C2.name = "inteliCard";
									C2.overlays.len = 0;
									A.__CallVerb("Cancel Camera View" );
									GlobalFuncs.to_chat( A, "You have been uploaded to a stationary terminal. Remote device connection restored." );
									GlobalFuncs.to_chat( U, "<span class='notice'><b>Transfer successful</b>:</span> " + A.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) installed and executed succesfully. Local copy has been removed." );
									GlobalFuncs.qdel( T2 );
									T2 = null;
								}
								break;
						}
						break;
					case "AIFIXER":
						T3 = target;

						switch ((string)( interaction )) {
							case "AICARD":
								C3 = this;

								if ( !( T3.contents.len != 0 ) ) {
									
									if ( !( C3.contents.len != 0 ) ) {
										GlobalFuncs.to_chat( U, "No AI to copy over!" );
									} else {
										
										foreach (dynamic _d in Lang13.Enumerate( C3, typeof(Mob_Living_Silicon_Ai) )) {
											A2 = _d;
											
											C3.icon_state = "aicard";
											C3.name = "inteliCard";
											C3.overlays.len = 0;
											A2.loc = T3;
											T3.occupant = A2;
											A2.control_disabled = true;

											if ( A2.stat == 2 ) {
												T3.overlays += new Image( "icons/obj/computer.dmi", "ai-fixer-404" );
											} else {
												T3.overlays += new Image( "icons/obj/computer.dmi", "ai-fixer-full" );
											}
											T3.overlays -= new Image( "icons/obj/computer.dmi", "ai-fixer-empty" );
											A2.__CallVerb("Cancel Camera View" );
											GlobalFuncs.to_chat( A2, "You have been uploaded to a stationary terminal. Sadly, there is no remote access from here." );
											GlobalFuncs.to_chat( U, "<span class='notice'><b>Transfer successful</b>:</span> " + A2.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) installed and executed succesfully. Local copy has been removed." );
										}
									}
								} else if ( !( C3.contents.len != 0 ) && Lang13.Bool( T3.occupant ) && !Lang13.Bool( T3.active ) ) {
									C3.name = "inteliCard - " + T3.occupant.name;
									T3.overlays += new Image( "icons/obj/computer.dmi", "ai-fixer-empty" );

									if ( Convert.ToInt32( T3.occupant.stat ) == 2 ) {
										C3.icon_state = "aicard-404";
										T3.overlays -= new Image( "icons/obj/computer.dmi", "ai-fixer-404" );
									} else {
										C3.icon_state = "aicard-full";
										T3.overlays -= new Image( "icons/obj/computer.dmi", "ai-fixer-full" );
									}
									GlobalFuncs.to_chat( T3.occupant, "You have been downloaded to a mobile storage device. Still no remote access." );
									GlobalFuncs.to_chat( U, "<span class='notice'><b>Transfer succesful</b>:</span> " + T3.occupant.name + " (" + Rand13.Int( 1000, 9999 ) + ".exe) removed from host terminal and stored within local memory." );
									T3.occupant.loc = C3;
									T3.occupant.__CallVerb("Cancel Camera View" );
									T3.occupant = null;
								} else if ( C3.contents.len != 0 ) {
									GlobalFuncs.to_chat( U, "<span class='danger'>ERROR:</span> Artificial intelligence detected on terminal." );
								} else if ( Lang13.Bool( T3.active ) ) {
									GlobalFuncs.to_chat( U, "<span class='danger'>ERROR:</span> Reconstruction in progress." );
								} else if ( !Lang13.Bool( T3.occupant ) ) {
									GlobalFuncs.to_chat( U, "<span class='danger'>ERROR:</span> Unable to locate artificial intelligence." );
								}
								break;
						}
						break;
				}
			} else {
				GlobalFuncs.to_chat( U, "<span class='danger'>ERROR:</span> AI flush is in progress, cannot execute transfer protocol." );
			}
			return;
		}

		// Function from file: access.dm
		public virtual dynamic GetID(  ) {
			return null;
		}

		// Function from file: access.dm
		public virtual dynamic GetAccess(  ) {
			return new ByTable();
		}

		// Function from file: soulstone.dm
		public void transfer_soul( string choice = null, dynamic target = null, dynamic U = null ) {
			bool deleteafter = false;
			dynamic T = null;
			Obj_Item C = null;
			dynamic mode_ticker = null;
			Obj_Item W = null;
			Dynamic_Overlay animation = null;
			Mob_Living_SimpleAnimal_Shade S = null;
			string _ref = null;
			dynamic necromancers = null;
			dynamic T2 = null;
			Obj_Item C2 = null;
			dynamic T3 = null;
			Obj_Item C3 = null;
			dynamic A = null;
			Mob_Living_SimpleAnimal_Construct Z = null;
			string construct_class = null;
			string _ref2 = null;
			dynamic necromancers2 = null;
			Ent_Static A2 = null;

			deleteafter = false;

			switch ((string)( choice )) {
				case "VICTIM":
					T = target;
					C = this;

					if ( GlobalVars.ticker.mode is GameMode_Cult ) {
						mode_ticker = GlobalVars.ticker.mode;

						if ( Lang13.Bool( T.mind ) && mode_ticker.sacrifice_target == T.mind ) {
							GlobalFuncs.to_chat( U, "<span class='warning'>The soul stone is unable to rip this soul. Such a powerful soul, it must be coveted by some powerful being.</span>" );
							return;
						}
					}

					if ( ((dynamic)C).imprinted != "empty" ) {
						GlobalFuncs.to_chat( U, "<span class='danger'>Capture failed!: </span>The soul stone has already been imprinted with " + ((dynamic)C).imprinted + "'s mind!" );
					} else if ( Lang13.Bool( T.stat ) == false ) {
						GlobalFuncs.to_chat( U, "<span class='danger'>Capture failed!: </span>Kill or maim the victim first!" );
					} else if ( ((Mob_Living_Carbon)T).isInCrit() || Convert.ToInt32( T.stat ) == 2 ) {
						
						if ( T.client == null ) {
							GlobalFuncs.to_chat( U, "<span class='danger'>Capture failed!: </span>The soul has already fled it's mortal frame." );
						} else if ( C.contents.len != 0 ) {
							GlobalFuncs.to_chat( U, "<span class='danger'>Capture failed!: </span>The soul stone is full! Use or free an existing soul to make room." );
						} else {
							
							foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Item) )) {
								W = _a;
								
								((Mob)T).drop_from_inventory( W );
							}
							new Obj_Effect_Decal_Remains_Human( T.loc );
							T.invisibility = 101;
							animation = new Dynamic_Overlay( T.loc );
							animation.icon_state = "blank";
							animation.icon = "icons/mob/mob.dmi";
							animation.master = T;
							Icon13.Flick( "dust-h", animation );
							animation.master = null;
							GlobalFuncs.qdel( animation );
							S = new Mob_Living_SimpleAnimal_Shade( T.loc );
							S.loc = C;
							S.status_flags |= 4096;
							S.canmove = false;
							S.name = "Shade of " + T.real_name;
							S.real_name = "Shade of " + T.real_name;

							if ( Lang13.Bool( T.client ) ) {
								T.client.mob = S;
							}
							S.__CallVerb("Cancel Camera View" );
							C.icon_state = "soulstone2";
							C.name = "Soul Stone: " + S.real_name;
							GlobalFuncs.to_chat( S, "Your soul has been captured! You are now bound to " + U.name + "'s will, help them suceed in their goals at all costs." );
							GlobalFuncs.to_chat( U, "<span class='notice'><b>Capture successful!</b>: </span>" + T.real_name + "'s soul has been ripped from their body and stored within the soul stone." );
							GlobalFuncs.to_chat( U, "The soulstone has been imprinted with " + S.real_name + "'s mind, it will no longer react to other souls." );
							((dynamic)C).imprinted = "" + S.name;
							_ref = new Txt().Ref( U.mind ).ToString();
							necromancers = null;

							if ( !GlobalVars.ticker.mode.necromancer.Contains( U.mind ) ) {
								GlobalVars.ticker.mode.necromancer[_ref] = new ByTable();
							}
							necromancers = GlobalVars.ticker.mode.necromancer[_ref];
							necromancers.Add( S.mind );
							GlobalVars.ticker.mode.necromancer[_ref] = necromancers;
							((GameMode)GlobalVars.ticker.mode).update_necro_icons_added( U.mind );
							((GameMode)GlobalVars.ticker.mode).update_necro_icons_added( S.mind );
							GlobalVars.ticker.mode.risen.Add( S.mind );
							GlobalFuncs.qdel( T );
							T = null;
						}
					}
					break;
				case "SHADE":
					T2 = target;
					C2 = this;

					if ( Convert.ToInt32( T2.stat ) == 2 ) {
						GlobalFuncs.to_chat( U, "<span class='danger'>Capture failed!: </span>The shade has already been banished!" );
					} else if ( C2.contents.len != 0 ) {
						GlobalFuncs.to_chat( U, "<span class='danger'>Capture failed!: </span>The soul stone is full! Use or free an existing soul to make room." );
					} else if ( T2.name != ((dynamic)C2).imprinted ) {
						GlobalFuncs.to_chat( U, "<span class='danger'>Capture failed!: </span>The soul stone has already been imprinted with " + ((dynamic)C2).imprinted + "'s mind!" );
					} else {
						T2.loc = C2;
						T2.status_flags |= 4096;
						T2.canmove = false;
						T2.health = T2.maxHealth;
						C2.icon_state = "soulstone2";
						GlobalFuncs.to_chat( T2, "Your soul has been recaptured by the soul stone, its arcane energies are reknitting your ethereal form" );
						GlobalFuncs.to_chat( U, "<span class='notice'><b>Capture successful!</b>: </span>" + T2.name + "'s has been recaptured and stored within the soul stone." );
					}
					break;
				case "CONSTRUCT":
					T3 = target;
					C3 = this;
					A = Lang13.FindIn( typeof(Mob_Living_SimpleAnimal_Shade), C3 );
					Z = null;

					if ( Lang13.Bool( A ) ) {
						construct_class = Interface13.Alert( U, "Please choose which type of construct you wish to create.", null, "Juggernaut", "Wraith", "Artificer" );
						((GameMode)GlobalVars.ticker.mode).update_necro_icons_removed( A.mind );

						switch ((string)( construct_class )) {
							case "Juggernaut":
								Z = new Mob_Living_SimpleAnimal_Construct_Armoured( GlobalFuncs.get_turf( T3.loc ) );
								Z.key = A.key;

								if ( GlobalFuncs.iscultist( U ) ) {
									
									if ( GlobalVars.ticker.mode.name == "cult" ) {
										((GameMode)GlobalVars.ticker.mode).add_cultist( Z.mind );
									} else {
										GlobalVars.ticker.mode.cult += Z.mind;
									}
									((GameMode)GlobalVars.ticker.mode).update_cult_icons_added( Z.mind );
								}
								GlobalFuncs.qdel( T3 );
								GlobalFuncs.to_chat( Z, "<B>You are a Juggernaut. Though slow, your shell can withstand extreme punishment, create shield walls and even deflect energy weapons, and rip apart enemies and walls alike.</B>" );
								GlobalFuncs.to_chat( Z, "<B>You are still bound to serve your creator, follow their orders and help them complete their goals at all costs.</B>" );
								Z.__CallVerb("Cancel Camera View" );
								deleteafter = true;
								break;
							case "Wraith":
								Z = new Mob_Living_SimpleAnimal_Construct_Wraith( GlobalFuncs.get_turf( T3.loc ) );
								Z.key = A.key;

								if ( GlobalFuncs.iscultist( U ) ) {
									
									if ( GlobalVars.ticker.mode.name == "cult" ) {
										((GameMode)GlobalVars.ticker.mode).add_cultist( Z.mind );
									} else {
										GlobalVars.ticker.mode.cult += Z.mind;
									}
									((GameMode)GlobalVars.ticker.mode).update_cult_icons_added( Z.mind );
								}
								GlobalFuncs.qdel( T3 );
								GlobalFuncs.to_chat( Z, "<B>You are a Wraith. Though relatively fragile, you are fast, deadly, and even able to phase through walls.</B>" );
								GlobalFuncs.to_chat( Z, "<B>You are still bound to serve your creator, follow their orders and help them complete their goals at all costs.</B>" );
								Z.__CallVerb("Cancel Camera View" );
								deleteafter = true;
								break;
							case "Artificer":
								Z = new Mob_Living_SimpleAnimal_Construct_Builder( GlobalFuncs.get_turf( T3.loc ) );
								Z.key = A.key;

								if ( GlobalFuncs.iscultist( U ) ) {
									
									if ( GlobalVars.ticker.mode.name == "cult" ) {
										((GameMode)GlobalVars.ticker.mode).add_cultist( Z.mind );
									} else {
										GlobalVars.ticker.mode.cult += Z.mind;
									}
									((GameMode)GlobalVars.ticker.mode).update_cult_icons_added( Z.mind );
								}
								GlobalFuncs.qdel( T3 );
								GlobalFuncs.to_chat( Z, "<B>You are an Artificer. You are incredibly weak and fragile, but you are able to construct fortifications, use magic missile, repair allied constructs (by clicking on them), </B><I>and most important of all create new constructs</I><B> (Use your Artificer spell to summon a new construct shell and Summon Soulstone to create a new soulstone).</B>" );
								GlobalFuncs.to_chat( Z, "<B>You are still bound to serve your creator, follow their orders and help them complete their goals at all costs.</B>" );
								Z.__CallVerb("Cancel Camera View" );
								deleteafter = true;
								break;
						}

						if ( Z != null && Z.mind != null && !GlobalFuncs.iscultist( Z ) ) {
							_ref2 = new Txt().Ref( U.mind ).ToString();
							necromancers2 = null;

							if ( !GlobalVars.ticker.mode.necromancer.Contains( U.mind ) ) {
								GlobalVars.ticker.mode.necromancer[_ref2] = new ByTable();
							}
							necromancers2 = GlobalVars.ticker.mode.necromancer[_ref2];
							necromancers2.Add( Z.mind );
							GlobalVars.ticker.mode.necromancer[_ref2] = necromancers2;
							((GameMode)GlobalVars.ticker.mode).update_necro_icons_added( U.mind );
							((GameMode)GlobalVars.ticker.mode).update_necro_icons_added( Z.mind );
							GlobalVars.ticker.mode.risen.Add( Z.mind );
						}
					} else {
						GlobalFuncs.to_chat( U, "<span class='warning'><b>Creation failed!</b>: The soul stone is empty! Go kill someone!</span>" );
					}
					break;
			}
			((GameMode)GlobalVars.ticker.mode).update_all_necro_icons();

			if ( deleteafter ) {
				
				foreach (dynamic _d in Lang13.Enumerate( this, typeof(Ent_Static) )) {
					A2 = _d;
					
					GlobalFuncs.qdel( A2 );
				}
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: item_attack.dm
		public bool handle_attack( Obj_Item I = null, dynamic M = null, dynamic user = null, string def_zone = null ) {
			bool _default = false;

			dynamic power = null;
			dynamic slime = null;
			string showname = null;
			dynamic H = null;
			dynamic K = null;
			Ent_Static location = null;
			dynamic K2 = null;

			_default = true;

			if ( !( M is Mob_Living ) ) {
				return false;
			}

			if ( GlobalFuncs.can_operate( M ) ) {
				
				if ( GlobalFuncs.do_surgery( M, user, I ) ) {
					return true;
				}
			}

			if ( Lang13.Bool( this.hitsound ) ) {
				GlobalFuncs.playsound( I.loc, I.hitsound, 50, 1, -1 );
			}
			user.lastattacked = M;
			M.lastattacker = user;
			GlobalFuncs.add_logs( user, M, "attacked", null, I.name, "(INTENT: " + String13.ToUpper( user.a_intent ) + ") (DAMTYE: " + String13.ToUpper( I.damtype ) + ")" );
			power = I.force;

			if ( Lang13.Bool( user.mutations.Contains( 4 ) ) ) {
				power *= 2;
			}

			if ( !( M is Mob_Living_Carbon_Human ) ) {
				
				if ( M is Mob_Living_Carbon_Slime ) {
					slime = M;

					if ( Rand13.PercentChance( 25 ) ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>" + I + " passes right through " + M + "!</span>" );
						return false;
					}

					if ( Convert.ToDouble( power ) > 0 ) {
						slime.attacked += 10;
					}

					if ( slime.Discipline != 0 && Rand13.PercentChance( 50 ) ) {
						slime.Discipline = 0;
					}

					if ( Convert.ToDouble( power ) >= 3 ) {
						
						if ( slime is Mob_Living_Carbon_Slime_Adult ) {
							
							if ( Rand13.PercentChance( Num13.Floor( Convert.ToDouble( power / 2 ) ) + 5 ) ) {
								
								if ( Lang13.Bool( slime.Victim ) ) {
									
									if ( Rand13.PercentChance( 80 ) && !Lang13.Bool( slime.client ) ) {
										slime.Discipline++;
									}
								}
								slime.Victim = null;
								slime.anchored = 0;
								Task13.Schedule( 0, (Task13.Closure)(() => {
									
									if ( Lang13.Bool( slime ) ) {
										slime.SStun = true;
										Task13.Sleep( Rand13.Int( 5, 20 ) );

										if ( Lang13.Bool( slime ) ) {
											slime.SStun = false;
										}
									}
									return;
								}));
								Task13.Schedule( 0, (Task13.Closure)(() => {
									
									if ( Lang13.Bool( slime ) ) {
										slime.canmove = false;
										Map13.StepAway( slime, user, null );

										if ( Rand13.PercentChance( Convert.ToInt32( power + 25 ) ) ) {
											Task13.Sleep( 2 );

											if ( Lang13.Bool( slime ) && Lang13.Bool( user ) ) {
												Map13.StepAway( slime, user, null );
											}
										}
										slime.canmove = true;
									}
									return;
								}));
							}
						} else if ( Rand13.PercentChance( Convert.ToInt32( power * 2 + 10 ) ) ) {
							
							if ( Lang13.Bool( slime ) ) {
								
								if ( Lang13.Bool( slime.Victim ) ) {
									
									if ( Rand13.PercentChance( 80 ) && !Lang13.Bool( slime.client ) ) {
										slime.Discipline++;

										if ( slime.Discipline == 1 ) {
											slime.attacked = 0;
										}
									}
									Task13.Schedule( 0, (Task13.Closure)(() => {
										
										if ( Lang13.Bool( slime ) ) {
											slime.SStun = true;
											Task13.Sleep( Rand13.Int( 5, 20 ) );

											if ( Lang13.Bool( slime ) ) {
												slime.SStun = false;
											}
										}
										return;
									}));
								}
								slime.Victim = null;
								slime.anchored = 0;
							}
							Task13.Schedule( 0, (Task13.Closure)(() => {
								
								if ( Lang13.Bool( slime ) && Lang13.Bool( user ) ) {
									Map13.StepAway( slime, user, null );
									slime.canmove = false;

									if ( Rand13.PercentChance( Convert.ToInt32( power * 4 + 25 ) ) ) {
										Task13.Sleep( 2 );

										if ( Lang13.Bool( slime ) && Lang13.Bool( user ) ) {
											Map13.StepAway( slime, user, null );
										}
									}
									slime.canmove = true;
								}
								return;
							}));
						}
					}
				}
				showname = ".";

				if ( Lang13.Bool( user ) ) {
					showname = " by " + user + "!";
				}

				if ( !Map13.FetchViewers( null, M ).Contains( user ) ) {
					showname = ".";
				}

				if ( I.attack_verb is ByTable && I.attack_verb.len != 0 ) {
					((Ent_Static)M).visible_message( "<span class='danger'>" + M + " has been " + Rand13.PickFromTable( I.attack_verb ) + " with " + I + showname + "</span>", "<span class='userdanger'>You have been " + Rand13.PickFromTable( this.attack_verb ) + " with " + I + showname + "</span>" );
				} else if ( I.force == 0 ) {
					((Ent_Static)M).visible_message( "<span class='danger'>" + M + " has been " + Rand13.Pick(new object [] { "tapped", "patted" }) + " with " + I + showname + "</span>", "<span class='userdanger'>You have been " + Rand13.Pick(new object [] { "tapped", "patted" }) + " with " + I + showname + "</span>" );
				} else {
					((Ent_Static)M).visible_message( "<span class='danger'>" + M + " has been attacked with " + I + showname + "</span>", "<span class='userdanger'>You have been attacked with " + I + showname + "</span>" );
				}

				if ( !Lang13.Bool( showname ) && Lang13.Bool( user ) ) {
					
					if ( Lang13.Bool( user.client ) ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>You attack " + M + " with " + I + "!</span>" );
					}
				}
			}

			if ( M is Mob_Living_Carbon_Human ) {
				H = M;
				_default = ((Mob_Living_Carbon_Human)H).attacked_by( I, user, def_zone );
			} else {
				
				dynamic _a = I.damtype; // Was a switch-case, sorry for the mess.
				if ( _a=="brute" ) {
					
					if ( this is Mob_Living_Carbon_Slime ) {
						((Mob_Living)M).adjustBrainLoss( power );
					} else {
						
						if ( M is Mob_Living_Carbon_Monkey ) {
							K = M;
							power = ((Mob_Living_Carbon_Monkey)K).defense( power, def_zone );
						}
						((Mob_Living)M).take_organ_damage( power );

						if ( Rand13.PercentChance( 33 ) && Lang13.Bool( I.force ) ) {
							location = M.loc;

							if ( location is Tile_Simulated ) {
								((dynamic)location).add_blood_floor( M );
							}
						}
					}
				} else if ( _a=="fire" ) {
					
					if ( !Lang13.Bool( M.mutations.Contains( 2 ) ) ) {
						
						if ( M is Mob_Living_Carbon_Monkey ) {
							K2 = M;
							power = ((Mob_Living_Carbon_Monkey)K2).defense( power, def_zone );
						}
						((Mob_Living)M).take_organ_damage( 0, power );
						GlobalFuncs.to_chat( M, "Aargh it burns!" );
					}
				}
				((Mob_Living)M).updatehealth();
			}
			I.add_fingerprint( user );
			return _default;
		}

		// Function from file: item_attack.dm
		public virtual bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			return this.handle_attack( this, M, user, def_zone );
		}

		// Function from file: item_attack.dm
		public dynamic get_clamped_volume(  ) {
			
			if ( Lang13.Bool( this.force ) && Lang13.Bool( this.w_class ) ) {
				return ( Convert.ToDouble( ( this.force + this.w_class ) * 4 ) <= 30 ? ((dynamic)( 30 )) : ( Convert.ToDouble( ( this.force + this.w_class ) * 4 ) >= 100 ? ((dynamic)( 100 )) : ( this.force + this.w_class ) * 4 ) );
			} else if ( !Lang13.Bool( this.force ) && Lang13.Bool( this.w_class ) ) {
				return ( Convert.ToDouble( this.w_class * 6 ) <= 10 ? ((dynamic)( 10 )) : ( Convert.ToDouble( this.w_class * 6 ) >= 100 ? ((dynamic)( 100 )) : this.w_class * 6 ) );
			}
			return null;
		}

		// Function from file: item_attack.dm
		public virtual bool preattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, dynamic click_parameters = null ) {
			return false;
		}

		// Function from file: item_attack.dm
		public virtual bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			return false;
		}

		// Function from file: item_attack.dm
		public virtual dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic _default = null;

			
			if ( Lang13.Bool( this.flags & 32 ) ) {
				
				if ( !Lang13.Bool( this.flags & 64 ) ) {
					
					if ( Lang13.Bool( this.wielded ) ) {
						_default = this.unwield( user );
					} else {
						_default = this.wield( user );
					}
				}
			}
			return _default;
		}

		// Function from file: adjacent.dm
		public override bool Adjacent( dynamic neighbor = null, dynamic recurse = null ) {
			recurse = recurse ?? 1;

			
			if ( neighbor == this.loc ) {
				return true;
			}

			if ( this.loc is Obj_Item ) {
				
				if ( Convert.ToDouble( recurse ) > 0 ) {
					return this.loc.Adjacent( neighbor, recurse - 1 );
				}
				return false;
			}
			return base.Adjacent( (object)(neighbor), (object)(recurse) );
		}

		// Function from file: items.dm
		[Verb]
		[VerbInfo( name: "Move To Top", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_to_top(  ) {
			Ent_Static T = null;

			
			if ( !( this.loc is Tile ) || Task13.User.isUnconscious() || Task13.User.restrained() ) {
				return;
			}
			T = this.loc;
			this.loc = null;
			this.loc = T;
			return;
		}

	}

}