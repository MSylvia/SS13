// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item : Obj {

		public dynamic item_state = null;
		public string lefthand_file = "icons/mob/inhands/items_lefthand.dmi";
		public string righthand_file = "icons/mob/inhands/items_righthand.dmi";
		public int worn_x_dimension = 32;
		public int worn_y_dimension = 32;
		public int inhand_x_dimension = 32;
		public int inhand_y_dimension = 32;
		public string alternate_worn_icon = null;
		public int alternate_worn_layer = 0;
		public dynamic hitsound = null;
		public string throwhitsound = null;
		public dynamic w_class = 3;
		public dynamic slot_flags = 0;
		public dynamic master = null;
		public int? heat_protection = 0;
		public int cold_protection = 0;
		public int? max_heat_protection_temperature = null;
		public double min_cold_protection_temperature = 0;
		public string action_button_name = null;
		public bool action_button_is_hands_free = false;
		public bool action_button_internal = false;
		public Action_ItemAction action = null;
		public int? flags_inv = null;
		public dynamic item_color = null;
		public int? body_parts_covered = 0;
		public dynamic gas_transfer_coefficient = 1;
		public dynamic permeability_coefficient = 1;
		public double siemens_coefficient = 1;
		public double slowdown = 0;
		public ByTable armor = new ByTable().Set( "melee", 0 ).Set( "bullet", 0 ).Set( "laser", 0 ).Set( "energy", 0 ).Set( "bomb", 0 ).Set( "bio", 0 ).Set( "rad", 0 );
		public int? armour_penetration = 0;
		public ByTable v_allowed = null;
		public Obj_Item_Device_Uplink hidden_uplink = null;
		public double? strip_delay = 40;
		public double? put_on_delay = 20;
		public int breakouttime = 0;
		public ByTable materials = new ByTable();
		public double reliability = 100;
		public dynamic origin_tech = null;
		public bool needs_permit = false;
		public ByTable attack_verb = new ByTable();
		public ByTable species_exception = new ByTable();
		public bool suittoggled = false;
		public bool hooded = false;
		public dynamic thrownby = null;
		public dynamic embed_chance = 45;
		public int embedded_fall_chance = 5;
		public int embedded_pain_chance = 15;
		public int embedded_pain_multiplier = 2;
		public int embedded_fall_pain_multiplier = 5;
		public int embedded_impact_pain_multiplier = 4;
		public int embedded_unsafe_removal_pain_multiplier = 8;
		public int embedded_unsafe_removal_time = 30;
		public ByTable can_be_placed_into = new ByTable(new object [] { 
											typeof(Obj_Structure_Table), 
											typeof(Obj_Structure_Rack), 
											typeof(Obj_Structure_Closet), 
											typeof(Obj_Item_Weapon_Storage), 
											typeof(Obj_Structure_Safe), 
											typeof(Obj_Machinery_Disposal), 
											typeof(Obj_Machinery_RND_DestructiveAnalyzer), 
											typeof(Obj_Machinery_RND_Experimentor), 
											typeof(Obj_Machinery_Autolathe)
										 });
		public dynamic flags_cover = 0;
		public int heat = 0;
		public int sharpness = 0;
		public int toolspeed = 1;
		public int block_chance = 0;
		public int hit_reaction_chance = 0;
		public ByTable slot_equipment_priority = new ByTable(new object [] { 1, 7, 14, 13, 2, 11, 12, 10, 8, 9, 6, 17, 15, 16, 20 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.mouse_drag_pointer = 1;
			this.pass_flags = 1;
			this.pressure_resistance = 3;
			this.icon = "icons/obj/items.dmi";
		}

		public Obj_Item ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: items.dm
		public override bool throw_at( dynamic target = null, double? range = null, dynamic speed = null, dynamic thrower = null, bool? spin = null, bool? diagonals_first = null ) {
			spin = spin ?? true;

			bool _default = false;

			this.thrownby = thrower;
			_default = base.throw_at( (object)(target), range, (object)(speed), (object)(thrower), spin, diagonals_first );
			this.throw_speed = Lang13.Initial( this, "throw_speed" );
			return _default;
		}

		// Function from file: items.dm
		public override bool throw_impact( dynamic target = null, Mob_Living_Carbon thrower = null ) {
			bool? itempush = null;

			itempush = true;

			if ( Convert.ToDouble( this.w_class ) < 4 ) {
				itempush = false;
			}
			return ((Ent_Static)target).hitby( this, false, itempush );
		}

		// Function from file: items.dm
		public override dynamic acid_act( int acidpwr = 0, double? toxpwr = null, double? acid_volume = null ) {
			dynamic _default = null;

			double meltingpwr = 0;
			double melting_threshold = 0;
			dynamic V = null;
			dynamic T = null;
			Obj_Effect_Decal_Cleanable_MoltenItem I = null;
			Obj_Item S = null;
			dynamic armour_value = null;

			_default = 1;

			if ( this.unacidable ) {
				return _default;
			}
			meltingpwr = ( toxpwr ??0) * acidpwr;
			melting_threshold = 100;

			if ( meltingpwr <= melting_threshold ) {
				return _default;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.armor )) {
				V = _a;
				

				if ( Convert.ToDouble( this.armor[V] ) > 0 ) {
					_default--;
					break;
				}
			}

			if ( Lang13.Bool( _default ) && Rand13.PercentChance( Num13.MinInt( ((int)( meltingpwr / 10 )), 90 ) ) ) {
				T = GlobalFuncs.get_turf( this );

				if ( Lang13.Bool( T ) ) {
					I = new Obj_Effect_Decal_Cleanable_MoltenItem( T );
					I.pixel_x = Rand13.Int( -16, 16 );
					I.pixel_y = Rand13.Int( -16, 16 );
					I.desc = new Txt( "Looks like this was " ).a( this ).item().str( " some time ago." ).ToString();
				}

				if ( this is Obj_Item_Weapon_Storage ) {
					S = this;
					((dynamic)S).do_quick_empty();
				}
				GlobalFuncs.qdel( this );
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( this.armor )) {
					armour_value = _b;
					
					this.armor[armour_value] = Num13.MaxInt( Convert.ToInt32( this.armor[armour_value] - Num13.MinInt( acidpwr, ((int)( meltingpwr / 10 )) ) ), 0 );
				}

				if ( !( String13.FindIgnoreCase( this.desc, "it looks slightly melted...", 1, 0 ) != 0 ) ) {
					this.desc += " it looks slightly melted...";
				}
			}
			return _default;
		}

		// Function from file: items.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			
			if ( ( current_size ??0) >= 7 ) {
				this.throw_at_fast( S, 14, 3, null, false );
			} else {
				base.singularity_pull( S, current_size );
			}
			return;
		}

		// Function from file: items.dm
		public override bool clean_blood(  ) {
			bool _default = false;

			string index = null;
			dynamic blood_splatter_icon = null;

			_default = base.clean_blood();

			if ( _default ) {
				
				if ( Lang13.Bool( Lang13.Initial( this, "icon" ) ) && Lang13.Bool( Lang13.Initial( this, "icon_state" ) ) ) {
					index = this.blood_splatter_index();
					blood_splatter_icon = GlobalVars.blood_splatter_icons[index];

					if ( Lang13.Bool( blood_splatter_icon ) ) {
						this.overlays.Remove( blood_splatter_icon );
					}
				}
			}
			return _default;
		}

		// Function from file: items.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic S = null;
			ByTable rejections = null;
			bool success = false;
			bool failure = false;
			Obj_Item I = null;

			
			if ( A is Obj_Item_Weapon_Storage ) {
				S = A;

				if ( S.use_to_pickup ) {
					
					if ( S.collection_mode != 0 ) {
						
						if ( this.loc is Tile ) {
							rejections = new ByTable();
							success = false;
							failure = false;

							foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Item) )) {
								I = _a;
								

								if ( S.collection_mode == 2 && !Lang13.Bool( ((dynamic)this.type).IsInstanceOfType( I ) ) ) {
									failure = true;
									continue;
								}

								if ( rejections.Contains( I.type ) ) {
									continue;
								}

								if ( !((Obj_Item_Weapon_Storage)S).can_be_inserted( I ) ) {
									rejections.Add( I.type );
									failure = true;
									continue;
								}
								success = true;
								((Obj_Item_Weapon_Storage)S).handle_item_insertion( I, true );
							}

							if ( success && !failure ) {
								user.WriteMsg( "<span class='notice'>You put everything " + S.preposition + " " + S + ".</span>" );
							} else if ( success ) {
								user.WriteMsg( "<span class='notice'>You put some things " + S.preposition + " " + S + ".</span>" );
							} else {
								user.WriteMsg( "<span class='warning'>You fail to pick anything up with " + S + "!</span>" );
							}
						}
					} else if ( ((Obj_Item_Weapon_Storage)S).can_be_inserted( this ) ) {
						((Obj_Item_Weapon_Storage)S).handle_item_insertion( this );
					}
				}
			}
			return null;
		}

		// Function from file: items.dm
		public override dynamic attack_ai( dynamic user = null ) {
			dynamic R = null;

			
			if ( this.loc is Obj_Item_Weapon_RobotModule ) {
				
				if ( !( user is Mob_Living_Silicon_Robot ) ) {
					return null;
				}
				R = user;

				if ( !R.low_power_mode ) {
					((Mob_Living_Silicon_Robot)R).activate_module( this );
					R.hud_used.update_robot_modules_display();
				}
			}
			return null;
		}

		// Function from file: items.dm
		public override bool attack_alien( dynamic user = null ) {
			dynamic A = null;

			A = user;

			if ( !A.has_fine_manipulation ) {
				
				if ( A.contents.Contains( this ) ) {
					((Mob)A).unEquip( this );
				}
				user.WriteMsg( "<span class='warning'>Your claws aren't capable of such fine manipulation!</span>" );
				return false;
			}
			this.attack_paw( A );
			return false;
		}

		// Function from file: items.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Ent_Static S = null;

			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				return null;
			}

			if ( this.loc is Obj_Item_Weapon_Storage ) {
				S = this.loc;
				((dynamic)S).remove_from_storage( this, a.loc );
			}
			this.throwing = false;

			if ( this.loc == a ) {
				
				if ( !((Mob)a).unEquip( this ) ) {
					return null;
				}
			}
			this.pickup( a );
			this.add_fingerprint( a );

			if ( !((Mob)a).put_in_active_hand( this ) ) {
				this.dropped( a );
			}
			return null;
		}

		// Function from file: items.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic H = null;
			Obj_Item_Organ_Limb affecting = null;
			Ent_Static S = null;

			
			if ( !Lang13.Bool( a ) ) {
				return null;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				return null;
			}

			if ( this.burn_state == 1 ) {
				H = a;

				if ( H is Mob_Living_Carbon_Human ) {
					
					if ( Lang13.Bool( H.gloves ) && ( H.gloves.max_heat_protection_temperature ??0) > 360 ) {
						this.extinguish();
						a.WriteMsg( "<span class='notice'>You put out the fire on " + this + ".</span>" );
					} else {
						a.WriteMsg( "<span class='warning'>You burn your hand on " + this + "!</span>" );
						affecting = ((Mob_Living_Carbon_Human)H).get_organ( "" + ( a.hand ? "l" : "r" ) + "_arm" );

						if ( affecting.take_damage( 0, 5 ) ) {
							((Mob_Living)H).update_damage_overlays(  );
						}
						((Mob_Living)H).updatehealth();
						return null;
					}
				} else {
					this.extinguish();
				}
			}

			if ( this.loc is Obj_Item_Weapon_Storage ) {
				S = this.loc;
				((dynamic)S).remove_from_storage( this, a.loc );
			}
			this.throwing = false;

			if ( this.loc == a ) {
				
				if ( !((Mob)a).unEquip( this ) ) {
					return null;
				}
			}
			this.pickup( a );
			this.add_fingerprint( a );

			if ( !((Mob)a).put_in_active_hand( this ) ) {
				this.dropped( a );
			}
			return null;
		}

		// Function from file: items.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			this.add_fingerprint( Task13.User );
			return base.ui_act( action, _params, ui, state );
		}

		// Function from file: items.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			this.add_fingerprint( user );

			if ( this.hidden_uplink != null && Lang13.Bool( this.hidden_uplink.active ) ) {
				this.hidden_uplink.interact( user );
				return 1;
			}
			this.ui_interact( user );
			return null;
		}

		// Function from file: items.dm
		public virtual dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.interact( user );
			return null;
		}

		// Function from file: items.dm
		public override double examine( dynamic user = null ) {
			string size = null;
			string pronoun = null;
			string msg = null;
			ByTable techlvls = null;
			dynamic T = null;
			dynamic mat = null;

			base.examine( (object)(user) );

			dynamic _a = this.w_class; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				size = "tiny";
			} else if ( _a==2 ) {
				size = "small";
			} else if ( _a==3 ) {
				size = "normal-sized";
			} else if ( _a==4 ) {
				size = "bulky";
			} else if ( _a==5 ) {
				size = "huge";
			} else if ( _a==6 ) {
				size = "gigantic";
			}
			pronoun = null;

			if ( this.gender == GlobalVars.PLURAL ) {
				pronoun = "They are";
			} else {
				pronoun = "It is";
			}
			user.WriteMsg( "" + pronoun + " a " + size + " item." );

			if ( user.research_scanner ) {
				msg = "*--------* <BR>";

				if ( Lang13.Bool( this.origin_tech ) ) {
					msg += "<span class='notice'>Testing potentials:</span><BR>";
					techlvls = String13.ParseUrlParams( this.origin_tech );

					foreach (dynamic _b in Lang13.Enumerate( techlvls )) {
						T = _b;
						
						msg += "Tech: " + GlobalFuncs.CallTechName( T ) + " | magnitude: " + techlvls[T] + " <BR>";
					}
					msg += "Research reliability: " + this.reliability + "% <BR>";

					if ( this.crit_fail ) {
						msg += "<span class='danger'>Critical failure detected in subject!</span><BR>";
					}
				} else {
					msg += "<span class='danger'>No tech origins detected.</span><BR>";
				}

				if ( this.materials.len != 0 ) {
					msg += "<span class='notice'>Extractable materials:<BR>";

					foreach (dynamic _c in Lang13.Enumerate( this.materials )) {
						mat = _c;
						
						msg += "" + GlobalFuncs.CallMaterialName( mat ) + "<BR>";
					}
				} else {
					msg += "<span class='danger'>No extractable materials detected.</span><BR>";
				}
				msg += "*--------*";
				user.WriteMsg( msg );
			}
			return 0;
		}

		// Function from file: items.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			if ( severity == 1 || target == this ) {
				GlobalFuncs.qdel( this );
			}

			if ( !Lang13.Bool( this.gc_destroyed ) ) {
				this.contents_explosion( severity, target );
			}
			return false;
		}

		// Function from file: items.dm
		public override bool blob_act( dynamic severity = null ) {
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: items.dm
		public override dynamic Destroy(  ) {
			Ent_Static m = null;

			
			if ( this.loc is Mob ) {
				m = this.loc;
				((Mob)m).unEquip( this, 1 );
			}
			return base.Destroy();
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.Integrate( this );
			return;
		}

		// Function from file: atoms.dm
		public override bool add_blood( dynamic M = null ) {
			int blood_count = 0;
			string index = null;
			dynamic blood_splatter_icon = null;

			blood_count = ( !( this.blood_DNA != null ) ? 0 : this.blood_DNA.len );

			if ( !base.add_blood( (object)(M) ) ) {
				return false;
			}

			if ( !( blood_count != 0 ) && Lang13.Bool( Lang13.Initial( this, "icon" ) ) && Lang13.Bool( Lang13.Initial( this, "icon_state" ) ) ) {
				index = this.blood_splatter_index();
				blood_splatter_icon = GlobalVars.blood_splatter_icons[index];

				if ( !Lang13.Bool( blood_splatter_icon ) ) {
					blood_splatter_icon = new Icon( Lang13.Initial( this, "icon" ), Lang13.Initial( this, "icon_state" ), null, 1 );
					((Icon)blood_splatter_icon).Blend( "#fff", 0 );
					((Icon)blood_splatter_icon).Blend( new Icon( "icons/effects/blood.dmi", "itemblood" ), 2 );
					blood_splatter_icon = File13.Cache( blood_splatter_icon );
					GlobalVars.blood_splatter_icons[index] = blood_splatter_icon;
				}
				this.overlays.Add( blood_splatter_icon );
			}
			return true;
		}

		// Function from file: telekinesis.dm
		public override void attack_tk( Mob_Living_Carbon_Human user = null ) {
			Obj_Item_TkGrab O = null;

			
			if ( user.stat != 0 ) {
				return;
			}
			O = new Obj_Item_TkGrab( this );
			user.put_in_active_hand( O );
			O.host = user;
			O.focus_object( this );
			return;
		}

		// Function from file: telekinesis.dm
		public override dynamic attack_self_tk( dynamic user = null ) {
			this.attack_self( user );
			return null;
		}

		// Function from file: update_icons.dm
		public Image build_worn_icon( dynamic state = null, int? default_layer = null, string default_icon_file = null, int? isinhands = null, dynamic femaleuniform = null ) {
			state = state ?? "";
			default_layer = default_layer ?? 0;
			isinhands = isinhands ?? GlobalVars.FALSE;
			femaleuniform = femaleuniform ?? 0;

			string file2use = null;
			int? layer2use = null;
			Image standing = null;
			ByTable worn_overlays = null;

			
			if ( !Lang13.Bool( isinhands ) && Lang13.Bool( this.alternate_worn_icon ) ) {
				file2use = this.alternate_worn_icon;
			}

			if ( !Lang13.Bool( file2use ) ) {
				file2use = default_icon_file;
			}

			if ( this.alternate_worn_layer != 0 ) {
				layer2use = this.alternate_worn_layer;
			}

			if ( !Lang13.Bool( layer2use ) ) {
				layer2use = default_layer;
			}

			if ( Lang13.Bool( femaleuniform ) ) {
				standing = GlobalFuncs.wear_female_version( state, file2use, layer2use, femaleuniform );
			}

			if ( !( standing != null ) ) {
				standing = new Image( file2use, null, state, -( layer2use ??0) );
			}
			worn_overlays = this.worn_overlays( isinhands );

			if ( worn_overlays != null && worn_overlays.len != 0 ) {
				standing.overlays.Add( worn_overlays );
			}
			standing = GlobalFuncs.center_image( standing, ( Lang13.Bool( isinhands ) ? this.inhand_x_dimension : this.worn_x_dimension ), ( Lang13.Bool( isinhands ) ? this.inhand_y_dimension : this.worn_y_dimension ) );
			standing.alpha = this.alpha;
			standing.color = this.color;
			return standing;
		}

		// Function from file: inventory.dm
		public int shred( bool? bomb = null, double? shock = null, Mob_Living_Carbon_Human Human = null ) {
			int shredded = 0;
			Obj_Effect_Decal_Cleanable_Shreds Shreds = null;

			
			if ( Lang13.Bool( this.flags & 128 ) ) {
				return -1;
			}

			if ( !( bomb == true ) ) {
				
				if ( this.burn_state != -1 ) {
					shredded = 1;
				} else {
					shredded = -1;
				}
			} else if ( ( shock ??0) > 0 ) {
				
				if ( Rand13.PercentChance( Num13.MaxInt( ((int)( ( shock ??0) - Convert.ToDouble( this.armor["bomb"] ) )), 0 ) ) ) {
					shredded = Convert.ToInt32( this.armor["bomb"] + 10 );
				} else {
					shredded = -1;
				}
			}

			if ( shredded > 0 ) {
				
				if ( Human != null ) {
					Human.unEquip( this );
				}

				if ( bomb == true ) {
					this.empty_object_contents();
					Task13.Schedule( 1, (Task13.Closure)(() => {
						Shreds = new Obj_Effect_Decal_Cleanable_Shreds( this.loc );
						Shreds.desc = "The sad remains of what used to be " + this.name + ".";
						GlobalFuncs.qdel( this );
						return;
					}));
				} else {
					this.burn();
				}
			}
			return shredded;
		}

		// Function from file: update_icons.dm
		public virtual ByTable worn_overlays( int? isinhands = null ) {
			isinhands = isinhands ?? GlobalVars.FALSE;

			ByTable _default = null;

			_default = new ByTable();
			return _default;
		}

		// Function from file: inventory.dm
		public virtual bool equip_to_best_slot( Mob M = null ) {
			dynamic S = null;

			
			if ( this != M.get_active_hand() ) {
				M.WriteMsg( "<span class='warning'>You are not holding anything to equip!</span>" );
				return false;
			}

			if ( M.equip_to_appropriate_slot( this ) ) {
				
				if ( M.hand ) {
					M.update_inv_l_hand();
				} else {
					M.update_inv_r_hand();
				}
				return true;
			}

			if ( M.s_active != null && M.s_active.can_be_inserted( this, true ) ) {
				M.s_active.handle_item_insertion( this );
				return true;
			}
			S = M.get_inactive_hand();

			if ( S is Obj_Item_Weapon_Storage && ((Obj_Item_Weapon_Storage)S).can_be_inserted( this, true ) ) {
				((Obj_Item_Weapon_Storage)S).handle_item_insertion( this );
				return true;
			}
			S = M.get_item_by_slot( 6 );

			if ( S is Obj_Item_Weapon_Storage && ((Obj_Item_Weapon_Storage)S).can_be_inserted( this, true ) ) {
				((Obj_Item_Weapon_Storage)S).handle_item_insertion( this );
				return true;
			}
			S = M.get_item_by_slot( 20 );

			if ( S is Obj_Item_Weapon_Storage && ((Obj_Item_Weapon_Storage)S).can_be_inserted( this, true ) ) {
				((Obj_Item_Weapon_Storage)S).handle_item_insertion( this );
			}
			S = M.get_item_by_slot( 1 );

			if ( S is Obj_Item_Weapon_Storage && ((Obj_Item_Weapon_Storage)S).can_be_inserted( this, true ) ) {
				((Obj_Item_Weapon_Storage)S).handle_item_insertion( this );
				GlobalFuncs.playsound( this.loc, "rustle", 50, 1, -5 );
				return true;
			}
			M.WriteMsg( "<span class='warning'>You are unable to equip that!</span>" );
			return false;
		}

		// Function from file: access.dm
		public dynamic GetJobName(  ) {
			dynamic I = null;
			dynamic jobName = null;

			I = this.GetID();

			if ( !Lang13.Bool( I ) ) {
				return null;
			}
			jobName = I.assignment;

			if ( GlobalFuncs.get_all_job_icons().Contains( jobName ) ) {
				return jobName;
			}

			if ( GlobalFuncs.get_all_centcom_jobs().Contains( jobName ) ) {
				return "Centcom";
			}
			return "Unknown";
		}

		// Function from file: access.dm
		public virtual dynamic GetID(  ) {
			return null;
		}

		// Function from file: access.dm
		public virtual dynamic GetAccess(  ) {
			return new ByTable();
		}

		// Function from file: clothing.dm
		public virtual dynamic negates_gravity(  ) {
			return 0;
		}

		// Function from file: cigs_lighters.dm
		public dynamic help_light_cig( dynamic M = null, dynamic user = null ) {
			dynamic cig = null;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return null;
			}

			if ( M.wear_mask is Obj_Item_Clothing_Mask_Cigarette ) {
				cig = M.wear_mask;
				return cig;
			}
			return null;
		}

		// Function from file: objs.dm
		public void updateSelfDialog(  ) {
			Ent_Static M = null;

			M = this.loc;

			if ( M is Mob && Lang13.Bool( ((dynamic)M).client ) && ((dynamic)M).machine == this ) {
				this.attack_self( M );
			}
			return;
		}

		// Function from file: items.dm
		public virtual int is_sharp(  ) {
			return this.sharpness;
		}

		// Function from file: items.dm
		public virtual int is_hot(  ) {
			return this.heat;
		}

		// Function from file: items.dm
		public bool remove_item_from_storage( dynamic newLoc = null ) {
			Ent_Static S = null;

			
			if ( !Lang13.Bool( newLoc ) ) {
				return false;
			}

			if ( this.loc is Obj_Item_Weapon_Storage ) {
				S = this.loc;
				((Obj_Item_Weapon_Storage)S).remove_from_storage( this, newLoc );
				return true;
			}
			return false;
		}

		// Function from file: items.dm
		public void eyestab( dynamic M = null, dynamic user = null ) {
			bool is_human_victim = false;
			dynamic H = null;
			dynamic Mo = null;
			dynamic U = null;
			dynamic affecting = null;

			is_human_victim = false;

			if ( M is Mob_Living_Carbon_Human ) {
				is_human_victim = true;
				H = M;

				if ( Lang13.Bool( H.head ) && Lang13.Bool( H.head.flags_cover & 4 ) || Lang13.Bool( H.wear_mask ) && Lang13.Bool( H.wear_mask.flags_cover & 2 ) || Lang13.Bool( H.glasses ) && Lang13.Bool( H.glasses.flags_cover & 1 ) ) {
					user.WriteMsg( "<span class='danger'>You're going to need to remove that mask/helmet/glasses first!</span>" );
					return;
				}
			}

			if ( M is Mob_Living_Carbon_Monkey ) {
				Mo = M;

				if ( Lang13.Bool( Mo.wear_mask ) && Lang13.Bool( Mo.wear_mask.flags_cover & 2 ) ) {
					user.WriteMsg( "<span class='danger'>You're going to need to remove that mask/helmet/glasses first!</span>" );
					return;
				}
			}

			if ( M is Mob_Living_Carbon_Alien ) {
				user.WriteMsg( "<span class='warning'>You cannot locate any eyes on this creature!</span>" );
				return;
			}

			if ( M is Mob_Living_Carbon_Brain ) {
				user.WriteMsg( "<span class='danger'>You cannot locate any organic eyes on this brain!</span>" );
				return;
			}
			this.add_fingerprint( user );
			GlobalFuncs.playsound( this.loc, this.hitsound, 30, 1, -1 );

			if ( M != user ) {
				((Ent_Static)M).visible_message( "<span class='danger'>" + user + " has stabbed " + M + " in the eye with " + this + "!</span>", "<span class='userdanger'>" + user + " stabs you in the eye with " + this + "!</span>" );
				((Ent_Dynamic)user).do_attack_animation( M );
			} else {
				((Ent_Static)user).visible_message( "<span class='danger'>" + user + " has stabbed themself in the eyes with " + this + "!</span>", "<span class='userdanger'>You stab yourself in the eyes with " + this + "!</span>" );
			}

			if ( is_human_victim ) {
				U = M;
				affecting = ((Mob_Living_Carbon_Human)U).get_organ( "head" );

				if ( ((Obj_Item_Organ_Limb)affecting).take_damage( 7 ) ) {
					((Mob_Living)U).update_damage_overlays(  );
				}
			} else {
				((Mob_Living)M).take_organ_damage( 7 );
			}
			GlobalFuncs.add_logs( user, M, "attacked", "" + this.name, "(INTENT: " + String13.ToUpper( user.a_intent ) + ")" );
			((Mob)M).adjust_blurriness( 3 );
			((Mob)M).adjust_eye_damage( Rand13.Int( 2, 4 ) );

			if ( M.eye_damage >= 10 ) {
				((Mob)M).adjust_blurriness( 15 );

				if ( Convert.ToInt32( M.stat ) != 2 ) {
					M.WriteMsg( "<span class='danger'>Your eyes start to bleed profusely!</span>" );
				}

				if ( !Lang13.Bool( M.disabilities & 9 ) ) {
					
					if ( ((Mob)M).become_nearsighted() ) {
						M.WriteMsg( "<span class='danger'>You become nearsighted!</span>" );
					}
				}

				if ( Rand13.PercentChance( 50 ) ) {
					
					if ( Convert.ToInt32( M.stat ) != 2 ) {
						
						if ( Lang13.Bool( M.drop_item() ) ) {
							M.WriteMsg( "<span class='danger'>You drop what you're holding and clutch at your eyes!</span>" );
						}
					}
					((Mob)M).adjust_blurriness( 10 );
					((Mob)M).Paralyse( 1 );
					((Mob)M).Weaken( 2 );
				}

				if ( Rand13.PercentChance( M.eye_damage - 10 + 1 ) ) {
					
					if ( ((Mob)M).become_blind() ) {
						M.WriteMsg( "<span class='danger'>You go blind!</span>" );
					}
				}
			}
			return;
		}

		// Function from file: items.dm
		public virtual bool IsReflect( dynamic def_zone = null ) {
			return false;
		}

		// Function from file: items.dm
		public virtual void ui_action_click(  ) {
			this.attack_self( Task13.User );
			return;
		}

		// Function from file: items.dm
		public virtual dynamic mob_can_equip( Mob M = null, dynamic slot = null, bool? disable_warning = null ) {
			disable_warning = disable_warning ?? false;

			
			if ( !( M != null ) ) {
				return 0;
			}
			return M.can_equip( this, slot, disable_warning );
		}

		// Function from file: items.dm
		public virtual void equipped( Mob user = null, dynamic slot = null ) {
			return;
		}

		// Function from file: items.dm
		public virtual bool on_found( dynamic finder = null ) {
			return false;
		}

		// Function from file: items.dm
		public void on_enter_storage( Obj_Item_Weapon_Storage S = null ) {
			return;
		}

		// Function from file: items.dm
		public void on_exit_storage( Obj_Item_Weapon_Storage S = null ) {
			return;
		}

		// Function from file: items.dm
		public virtual bool pickup( dynamic user = null ) {
			return false;
		}

		// Function from file: items.dm
		public virtual bool dropped( dynamic user = null ) {
			return false;
		}

		// Function from file: items.dm
		public virtual void talk_into( dynamic M = null, dynamic input = null, dynamic channel = null, ByTable spans = null ) {
			return;
		}

		// Function from file: items.dm
		public virtual bool hit_reaction( Mob_Living_Carbon owner = null, string attack_text = null, int? final_block_chance = null, dynamic damage = null, int? attack_type = null ) {
			attack_text = attack_text ?? "the attack";
			final_block_chance = final_block_chance ?? 0;
			damage = damage ?? 0;
			attack_type = attack_type ?? 1;

			
			if ( Rand13.PercentChance( final_block_chance ??0 ) ) {
				owner.visible_message( "<span class='danger'>" + owner + " blocks " + attack_text + " with " + this + "!</span>" );
				return true;
			}
			return false;
		}

		// Function from file: items.dm
		public virtual int suicide_act( Mob_Living_Carbon_Human user = null ) {
			return 0;
		}

		// Function from file: items.dm
		public bool check_allowed_items( dynamic target = null, bool? not_inside = null, bool? target_self = null ) {
			
			if ( Lang13.Bool( target.Contains( this ) ) && !( target_self == true ) || !( target.loc is Tile ) && !( target is Tile ) && not_inside == true || GlobalFuncs.is_type_in_list( target, this.can_be_placed_into ) ) {
				return false;
			} else {
				return true;
			}
		}

		// Function from file: autolathe.dm
		public void autolathe_crafted( Obj_Machinery_Autolathe A = null ) {
			return;
		}

		// Function from file: item_attack.dm
		public virtual bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( !( M is Mob_Living ) ) {
				return false;
			}

			if ( Lang13.Bool( this.hitsound ) && Convert.ToDouble( this.force ) > 0 ) {
				GlobalFuncs.playsound( this.loc, this.hitsound, this.get_clamped_volume(), 1, -1 );
			} else if ( this.force == 0 ) {
				GlobalFuncs.playsound( this.loc, "sound/weapons/tap.ogg", this.get_clamped_volume(), 1, -1 );
			}
			user.lastattacked = M;
			M.lastattacker = user;
			((Mob_Living)M).attacked_by( this, user, def_zone );
			GlobalFuncs.add_logs( user, M, "attacked", this.name, "(INTENT: " + String13.ToUpper( user.a_intent ) + ") (DAMTYPE: " + String13.ToUpper( this.damtype ) + ")" );
			this.add_fingerprint( user );
			return true;
		}

		// Function from file: item_attack.dm
		public int get_clamped_volume(  ) {
			
			if ( Lang13.Bool( this.force ) && Lang13.Bool( this.w_class ) ) {
				return Num13.MaxInt( 30, Num13.MinInt( Convert.ToInt32( ( this.force + this.w_class ) * 4 ), 100 ) );
			} else if ( !Lang13.Bool( this.force ) && Lang13.Bool( this.w_class ) ) {
				return Num13.MaxInt( 10, Num13.MinInt( Convert.ToInt32( this.w_class * 6 ), 100 ) );
			}
			return 0;
		}

		// Function from file: item_attack.dm
		public virtual bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			return false;
		}

		// Function from file: item_attack.dm
		[VerbInfo( name: "attack self" )]
		[VerbArg( 1, InputType.Mob )]
		public void _internal_attack_self( dynamic user = null ) {
			return;
		}

		// Function from file: adjacent.dm
		public override bool Adjacent( dynamic neighbor = null, dynamic recurse = null ) {
			recurse = recurse ?? 1;

			
			if ( neighbor == this.loc ) {
				return true;
			}

			if ( this.loc is Obj_Item ) {
				
				if ( Convert.ToDouble( recurse ) > 0 ) {
					return this.loc.Adjacent( neighbor, recurse - 1 );
				}
				return false;
			}
			return base.Adjacent( (object)(neighbor), (object)(recurse) );
		}

		// Function from file: items.dm
		[Verb]
		[VerbInfo( name: "Pick up", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void verb_pickup(  ) {
			
			if ( Task13.User.stat != 0 || Task13.User.restrained() || !this.Adjacent( Task13.User ) || Task13.User.stunned != 0 || Task13.User.weakened != 0 || Lang13.Bool( Task13.User.lying ) ) {
				return;
			}

			if ( Task13.User.get_active_hand() == null ) {
				Task13.User.UnarmedAttack( this );
			}
			return;
		}

		// Function from file: items.dm
		[Verb]
		[VerbInfo( name: "Move To Top", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_to_top(  ) {
			Ent_Static T = null;

			
			if ( !( this.loc is Tile ) || Task13.User.stat != 0 || Task13.User.restrained() || !Task13.User.canmove ) {
				return;
			}
			T = this.loc;
			this.loc = null;
			this.loc = T;
			return;
		}

	}

}