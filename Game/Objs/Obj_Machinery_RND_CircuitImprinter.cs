// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RND_CircuitImprinter : Obj_Machinery_RND {

		public int g_amount = 0;
		public int gold_amount = 0;
		public int diamond_amount = 0;
		public double max_material_amount = 75000;
		public double efficiency_coeff = 0;
		public ByTable categories = new ByTable(new object [] { 
											"AI Modules", 
											"Computer Boards", 
											"Teleportation Machinery", 
											"Medical Machinery", 
											"Engineering Machinery", 
											"Exosuit Modules", 
											"Hydroponics Machinery", 
											"Subspace Telecomms", 
											"Research Machinery", 
											"Misc. Machinery"
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 4096;
			this.reagents = new Reagents( 0 );
			this.icon_state = "circuit_imprinter";
		}

		// Function from file: circuitprinter.dm
		public Obj_Machinery_RND_CircuitImprinter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_CircuitImprinter( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_ReagentContainers_Glass_Beaker( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_ReagentContainers_Glass_Beaker( this ) );
			this.RefreshParts();
			this.reagents.my_atom = this;
			return;
		}

		// Function from file: circuitprinter.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Item_Weapon_ReagentContainers_Glass G = null;
			Obj_Item_Stack_Sheet_Glass G2 = null;
			Obj_Item_Stack_Sheet_Mineral_Gold G3 = null;
			Obj_Item_Stack_Sheet_Mineral_Diamond G4 = null;
			dynamic stack = null;
			int amount = 0;

			
			if ( this.shocked ) {
				this.shock( user, 50 );
			}

			if ( this.default_deconstruction_screwdriver( user, "circuit_imprinter_t", "circuit_imprinter", A ) ) {
				
				if ( Lang13.Bool( this.linked_console ) ) {
					this.linked_console.linked_imprinter = null;
					this.linked_console = null;
				}
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( Lang13.Bool( this.panel_open ) ) {
				
				if ( A is Obj_Item_Weapon_Crowbar ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_ReagentContainers_Glass) )) {
						G = _a;
						
						this.reagents.trans_to( G, G.reagents.maximum_volume );
					}

					if ( this.g_amount >= 2000 ) {
						G2 = new Obj_Item_Stack_Sheet_Glass( this.loc );
						G2.amount = Num13.Floor( this.g_amount / 2000 );
					}

					if ( this.gold_amount >= 2000 ) {
						G3 = new Obj_Item_Stack_Sheet_Mineral_Gold( this.loc );
						G3.amount = Num13.Floor( this.gold_amount / 2000 );
					}

					if ( this.diamond_amount >= 2000 ) {
						G4 = new Obj_Item_Stack_Sheet_Mineral_Diamond( this.loc );
						G4.amount = Num13.Floor( this.diamond_amount / 2000 );
					}
					this.default_deconstruction_crowbar( A );
					return null;
				} else {
					user.WriteMsg( "<span class='warning'>You can't load the " + this.name + " while it's opened!</span>" );
					return null;
				}
			}

			if ( this.disabled ) {
				return null;
			}

			if ( !Lang13.Bool( this.linked_console ) ) {
				user.WriteMsg( "<span class='warning'>The " + this.name + " must be linked to an R&D console first!</span>" );
				return 1;
			}

			if ( Lang13.Bool( ((Ent_Static)A).is_open_container() ) ) {
				return null;
			}

			if ( !( A is Obj_Item_Stack_Sheet_Glass ) && !( A is Obj_Item_Stack_Sheet_Mineral_Gold ) && !( A is Obj_Item_Stack_Sheet_Mineral_Diamond ) ) {
				user.WriteMsg( "<span class='warning'>You cannot insert this item into the " + this.name + "!</span>" );
				return null;
			}

			if ( this.stat != 0 ) {
				return null;
			}

			if ( this.busy ) {
				user.WriteMsg( "<span class='warning'>The " + this.name + " is busy! Please wait for completion of previous operation.</span>" );
				return null;
			}
			stack = A;

			if ( this.TotalMaterials() + stack.perunit > this.max_material_amount ) {
				user.WriteMsg( "<span class='warning'>The " + this.name + " is full! Please remove glass from the protolathe in order to insert more.</span>" );
				return null;
			}
			amount = Num13.Floor( Convert.ToDouble( Interface13.Input( "How many sheets do you want to add?", null, null, null, null, InputType.Num ) ) );

			if ( amount <= 0 || Convert.ToDouble( stack.amount ) <= 0 ) {
				return null;
			}

			if ( amount > Convert.ToDouble( stack.amount ) ) {
				amount = Num13.MinInt( Convert.ToInt32( stack.amount ), Num13.Floor( ( this.max_material_amount - this.TotalMaterials() ) / stack.perunit ) );
			}
			this.busy = true;
			this.f_use_power( Num13.MaxInt( 1000, ((int)( amount * 2000 / 10 )) ) );
			user.WriteMsg( "<span class='notice'>You add " + amount + " sheets to the " + this.name + ".</span>" );

			if ( stack is Obj_Item_Stack_Sheet_Glass ) {
				this.g_amount += amount * 2000;
			} else if ( stack is Obj_Item_Stack_Sheet_Mineral_Gold ) {
				this.gold_amount += amount * 2000;
			} else if ( stack is Obj_Item_Stack_Sheet_Mineral_Diamond ) {
				this.diamond_amount += amount * 2000;
			}
			stack.use( amount );
			this.busy = false;
			this.updateUsrDialog();
			return null;
		}

		// Function from file: circuitprinter.dm
		public int TotalMaterials(  ) {
			return this.g_amount + this.gold_amount + this.diamond_amount;
		}

		// Function from file: circuitprinter.dm
		public bool check_mat( Design being_built = null, dynamic M = null ) {
			
			dynamic _a = M; // Was a switch-case, sorry for the mess.
			if ( _a=="$glass" ) {
				return this.g_amount - Convert.ToDouble( being_built.materials[M] / this.efficiency_coeff ) >= 0;
			} else if ( _a=="$gold" ) {
				return this.gold_amount - Convert.ToDouble( being_built.materials[M] / this.efficiency_coeff ) >= 0;
			} else if ( _a=="$diamond" ) {
				return this.diamond_amount - Convert.ToDouble( being_built.materials[M] / this.efficiency_coeff ) >= 0;
			} else {
				return this.reagents.has_reagent( M, Lang13.DoubleNullable( being_built.materials[M] / this.efficiency_coeff ) ) != 0;
			}
			return false;
		}

		// Function from file: circuitprinter.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: circuitprinter.dm
		public override void RefreshParts(  ) {
			double T = 0;
			Obj_Item_Weapon_ReagentContainers_Glass G = null;
			Obj_Item_Weapon_StockParts_MatterBin M = null;
			Obj_Item_Weapon_StockParts_Manipulator M2 = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_ReagentContainers_Glass) )) {
				G = _a;
				
				this.reagents.maximum_volume += G.volume;
				G.reagents.trans_to( this, G.reagents.total_volume );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _b;
				
				T += Convert.ToDouble( M.rating );
			}
			this.max_material_amount = T * 75000;
			T = 0;

			foreach (dynamic _c in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M2 = _c;
				
				T += Convert.ToDouble( M2.rating );
			}
			this.efficiency_coeff = Math.Pow( 2, T - 1 );
			return;
		}

	}

}