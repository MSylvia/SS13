// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet_SecureCloset_Guncabinet : Obj_Structure_Closet_SecureCloset {

		public Icon cabinet_door = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 3 });
			this.icon_off = "base";
			this.icon_broken = "base";
			this.icon_locked = "base";
			this.icon_closed = "base";
			this.icon_opened = "base";
			this.icon = "icons/obj/guncabinet.dmi";
			this.icon_state = "base";
		}

		// Function from file: guncabinet.dm
		public Obj_Structure_Closet_SecureCloset_Guncabinet ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.cabinet_door = new Icon( this.icon, "door_locked" );
			this.update_icon();
			return;
		}

		// Function from file: guncabinet.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			location = location ?? 0;

			int lazors = 0;
			int shottas = 0;
			Obj_Item_Weapon_Gun G = null;
			int overlay_num = 0;
			double i = 0;
			string gun_state = null;
			Image gun = null;

			this.overlays.Remove( this.cabinet_door );
			this.overlays.Remove( "welded" );

			if ( this.opened ) {
				this.cabinet_door = new Icon( this.icon, "door_open" );
			} else if ( this.broken ) {
				this.cabinet_door = new Icon( this.icon, "door_broken" );
			} else if ( this.locked ) {
				this.cabinet_door = new Icon( this.icon, "door_locked" );
			} else {
				this.cabinet_door = new Icon( this.icon, "door" );
			}

			if ( Lang13.Bool( location ) ) {
				this.overlays.len = 0;
				lazors = 0;
				shottas = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_Gun) )) {
					G = _a;
					

					if ( G is Obj_Item_Weapon_Gun_Energy ) {
						lazors++;
					}

					if ( G is Obj_Item_Weapon_Gun_Projectile ) {
						shottas++;
					}
				}

				if ( lazors != 0 || shottas != 0 ) {
					overlay_num = Num13.MinInt( lazors + shottas, 7 );

					foreach (dynamic _b in Lang13.IterateRange( 1, overlay_num )) {
						i = _b;
						
						gun_state = "";

						if ( lazors > 0 && ( shottas <= 0 || Rand13.PercentChance( 50 ) ) ) {
							lazors--;
							gun_state = "laser";
						} else if ( shottas > 0 ) {
							shottas--;
							gun_state = "projectile";
						}
						gun = new Image( new Icon( this.icon, gun_state ) );
						gun.pixel_x = ((int)( ( i - 2 ) * 2 ));
						this.overlays.Add( gun );
					}
				}
			}
			this.overlays.Add( this.cabinet_door );

			if ( this.welded ) {
				this.overlays.Add( "welded" );
			}
			return null;
		}

		// Function from file: guncabinet.dm
		public override dynamic togglelock( dynamic user = null, string given_name = null ) {
			dynamic _default = null;

			_default = base.togglelock( (object)(user), given_name );
			this.update_icon();
			return _default;
		}

		// Function from file: guncabinet.dm
		public override bool toggle(  ) {
			bool _default = false;

			bool old_open = false;

			old_open = this.opened;
			_default = base.toggle();
			this.update_icon( old_open != this.opened );
			return _default;
		}

	}

}