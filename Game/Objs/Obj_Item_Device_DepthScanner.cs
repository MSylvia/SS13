// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_DepthScanner : Obj_Item_Device {

		public ByTable positive_locations = new ByTable();
		public DepthScan current = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "analyzer";
			this.w_class = 1;
			this.slot_flags = 512;
			this.icon = "icons/obj/pda.dmi";
			this.icon_state = "crap";
		}

		public Obj_Item_Device_DepthScanner ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tools_depthscanner.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? index = null;
			double? index2 = null;
			dynamic D = null;

			base.Topic( href, href_list, (object)(hclient) );
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["select"] ) ) {
				index = String13.ParseNumber( href_list["select"] );

				if ( Lang13.Bool( index ) && ( index ??0) <= this.positive_locations.len ) {
					this.current = this.positive_locations[index];
				}
			} else if ( Lang13.Bool( href_list["clear"] ) ) {
				index2 = String13.ParseNumber( href_list["clear"] );

				if ( Lang13.Bool( index2 ) ) {
					
					if ( ( index2 ??0) <= this.positive_locations.len ) {
						D = this.positive_locations[index2];
						this.positive_locations.Remove( D );
						GlobalFuncs.qdel( D );
						D = null;
					}
				} else {
					this.positive_locations = new ByTable();
					GlobalFuncs.qdel( this.current );
					this.current = null;
				}
			} else if ( Lang13.Bool( href_list["close"] ) ) {
				Task13.User.unset_machine();
				Interface13.Browse( Task13.User, null, "window=depth_scanner" );
			}
			this.updateSelfDialog();
			return null;
		}

		// Function from file: tools_depthscanner.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			int index = 0;
			int? index2 = null;
			DepthScan D = null;

			dat = "<b>Co-ordinates with positive matches</b><br>";
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";clear=0'>== Clear all ==</a><br>" ).ToString();

			if ( this.current != null ) {
				dat += "Time: " + this.current.time + "<br>";
				dat += "Coords: " + this.current.coords + "<br>";
				dat += "Anomaly depth: " + this.current.depth + " cm<br>";
				dat += "Clearance above anomaly depth: " + this.current.clearance + " cm<br>";
				dat += "Dissonance spread: " + this.current.dissonance_spread + "<br>";
				index = GlobalVars.responsive_carriers.Find( this.current.material );

				if ( index > 0 && index <= GlobalVars.finds_as_strings.len ) {
					dat += "Anomaly material: " + GlobalVars.finds_as_strings[index] + "<br>";
				} else {
					dat += "Anomaly material: Unknown<br>";
				}
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";clear=" ).item( this.current.record_index ).str( "'>clear entry</a><br>" ).ToString();
			} else {
				dat += "Select an entry from the list<br>";
				dat += "<br>";
				dat += "<br>";
				dat += "<br>";
				dat += "<br>";
			}
			dat += "<hr>";

			if ( this.positive_locations.len != 0 ) {
				index2 = null;
				index2 = 1;

				while (( index2 ??0) <= this.positive_locations.len) {
					D = this.positive_locations[index2];
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";select=" ).item( index2 ).str( "'>" ).item( D.time ).str( ", coords: " ).item( D.coords ).str( "</a><br>" ).ToString();
					index2++;
				}
			} else {
				dat += "No entries recorded.";
			}
			dat += "<hr>";
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</a><br>" ).ToString();
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";close=1'>Close</a><br>" ).ToString();
			Interface13.Browse( user, dat, "window=depth_scanner;size=300x500" );
			GlobalFuncs.onclose( user, "depth_scanner" );
			return null;
		}

		// Function from file: tools_depthscanner.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			return this.interact( user );
		}

		// Function from file: tools_depthscanner.dm
		public void scan_atom( dynamic user = null, Ent_Static A = null ) {
			Ent_Static M = null;
			DepthScan D = null;
			Find F = null;
			dynamic L = null;
			Ent_Static B = null;
			DepthScan D2 = null;
			dynamic L2 = null;

			((Ent_Static)user).visible_message( "<span class='notice'>" + user + " scans " + A + ", the air around them humming gently.</span>" );

			if ( A is Tile_Unsimulated_Mineral ) {
				M = A;

				if ( ((dynamic)M).finds.len != 0 || Lang13.Bool( ((dynamic)M).artifact_find ) ) {
					D = new DepthScan();
					D.coords = "" + ( M.x - Convert.ToDouble( GlobalVars.WORLD_X_OFFSET[M.z] ) ) + "." + Rand13.Int( 0, 9 ) + ":" + ( M.y - Convert.ToDouble( GlobalVars.WORLD_Y_OFFSET[M.z] ) ) + "." + Rand13.Int( 0, 9 ) + ":" + M.z * 10 + "." + Rand13.Int( 0, 9 );
					D.time = GlobalFuncs.worldtime2text();
					D.record_index = this.positive_locations.len + 1;
					D.material = ( Lang13.Bool( ((dynamic)M).mineral ) ? ((dynamic)M).mineral.display_name : "Rock" );

					if ( ((dynamic)M).finds.len != 0 ) {
						F = ((dynamic)M).finds[1];
						D.depth = F.excavation_required * 2;
						D.clearance = F.clearance_range * 2;
						D.material = GlobalFuncs.get_responsive_reagent( F.find_type );
					}
					this.positive_locations.Add( D );

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( 1, this ) )) {
						L = _a;
						
						GlobalFuncs.to_chat( L, new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).str( " pings.</span>" ).ToString() );
					}
				}
			} else if ( A is Obj_Structure_Boulder ) {
				B = A;

				if ( Lang13.Bool( ((dynamic)B).artifact_find ) ) {
					D2 = new DepthScan();
					D2.coords = "" + ( B.x - Convert.ToDouble( GlobalVars.WORLD_X_OFFSET[B.z] ) ) * 10 + "." + Rand13.Int( 0, 9 ) + ":" + ( B.y - Convert.ToDouble( GlobalVars.WORLD_Y_OFFSET[B.z] ) ) * 10 + "." + Rand13.Int( 0, 9 ) + ":" + B.z * 10 + "." + Rand13.Int( 0, 9 );
					D2.time = GlobalFuncs.worldtime2text();
					D2.record_index = this.positive_locations.len + 1;
					D2.depth = Rand13.Int( 75, 100 );
					D2.clearance = Rand13.Int( 5, 25 );
					D2.dissonance_spread = Rand13.Int( 750, 2500 ) / 100;
					this.positive_locations.Add( D2 );

					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( 1, this ) )) {
						L2 = _b;
						
						GlobalFuncs.to_chat( L2, new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).str( " pings " ).item( Rand13.Pick(new object [] { "madly", "wildly", "excitedly", "crazily" }) ).str( "!.</span>" ).ToString() );
					}
				}
			}
			return;
		}

	}

}