// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Food_Snacks : Obj_Item_Weapon_ReagentContainers_Food {

		public int food_flags = 0;
		public double? bitesize = 1;
		public int bitecount = 0;
		public dynamic trash = null;
		public Type slice_path = null;
		public int slices_num = 0;
		public dynamic eatverb = null;
		public bool wrapped = false;
		public dynamic dried_type = null;
		public bool deepfried = false;
		public string filling_color = "#FFFFFF";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 100;
			this.icon = "icons/obj/food.dmi";
		}

		// Function from file: snacks.dm
		public Obj_Item_Weapon_ReagentContainers_Food_Snacks ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: snacks.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			Mob_Living C = null;
			Mob_Living N = null;

			
			if ( user is Mob_Living_SimpleAnimal ) {
				
				if ( user is Mob_Living_SimpleAnimal_Corgi ) {
					user.delayNextAttack( 10 );

					if ( this.bitecount >= 4 ) {
						user.visible_message( "" + user + " " + Rand13.Pick(new object [] { "burps from enjoyment", "yaps for more", "woofs twice", new Txt( "looks at the area where " ).the( this ).item().str( " was" ).ToString() }) + ".", new Txt( "<span class='notice'>You swallow up the last of " ).the( this ).item().str( "." ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/items/eatfood.ogg", Rand13.Int( 10, 50 ), 1 );
						C = user;

						if ( Convert.ToDouble( C.health ) <= Convert.ToDouble( C.maxHealth + 5 ) ) {
							C.health += 5;
						} else {
							C.health = C.maxHealth;
						}
						GlobalFuncs.qdel( this );
					} else {
						user.visible_message( new Txt().item( user ).str( " takes a bite of " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You take a bite of " ).the( this ).item().str( ".</span>" ).ToString() );
						GlobalFuncs.playsound( this.loc, "sound/items/eatfood.ogg", Rand13.Int( 10, 50 ), 1 );
						this.bitecount++;
					}
				} else if ( user is Mob_Living_SimpleAnimal_Mouse ) {
					user.delayNextAttack( 10 );
					N = user;

					if ( Rand13.PercentChance( 25 ) ) {
						N.visible_message( new Txt().item( N ).str( " nibbles away at " ).the( this ).item().str( "." ).ToString(), new Txt( "You nibble away at " ).the( this ).item().ToString() );
					} else {
						GlobalFuncs.to_chat( N, new Txt( "<span class='notice'>You nibble away at " ).the( this ).item().str( ".</span>" ).ToString() );
					}
					N.health = Num13.MinInt( Convert.ToInt32( N.health + 1 ), Convert.ToInt32( N.maxHealth ) );
				}
			}
			return null;
		}

		// Function from file: snacks.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Ent_Dynamic surprise = null;

			
			if ( this.contents != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
					surprise = _a;
					
					surprise.loc = GlobalFuncs.get_turf( this );
				}
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: snacks.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string n_name = null;
			dynamic fork = null;
			int slices_lost = 0;
			double? reagents_per_slice = null;
			double i = 0;
			dynamic slice = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks C = null;
			dynamic S = null;

			
			if ( a is Obj_Item_Weapon_Pen ) {
				n_name = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( b, "What would you like to name this dish?", "Food Renaming", null, null, InputType.Str | InputType.Null ) ), 1, 78 );

				if ( Lang13.Bool( n_name ) && this.Adjacent( b ) && !Lang13.Bool( b.stat ) ) {
					this.name = "" + n_name;
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_Kitchen_Utensil_Fork ) {
				fork = a;

				if ( this.slices_num != 0 || this.slice_path != null ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You can't take the whole " + this + " at once!.</span>" );
					return null;
				} else {
					return ((Obj_Item_Weapon_Kitchen_Utensil_Fork)fork).load_food( this, b );
				}
			}

			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( this.slices_num <= 0 || !( this.slices_num != 0 ) || !( this.slice_path != null ) || a is Obj_Item_Weapon_ReagentContainers_Syringe ) {
				return 0;
			}

			if ( Convert.ToDouble( a.w_class ) <= 2 && Convert.ToDouble( ((Obj)a).is_sharp() ) < 0.8 && !( a is Obj_Item_Device_Analyzer_PlantAnalyzer ) ) {
				
				if ( !( b is Mob_Living_Carbon ) ) {
					return 0;
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You slip " ).the( a ).item().str( " inside " ).item( this ).str( ".</span>" ).ToString() );
				}
				this.add_fingerprint( b );
				this.contents.Add( a );
				return 1;
			}

			if ( Convert.ToDouble( ((Obj)a).is_sharp() ) < 0.8 ) {
				return 0;
			}

			if ( !( this.loc is Tile ) || !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Table), this.loc ) ) && !Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Tray), this.loc ) ) ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You cannot slice " ).the( this ).item().str( " here! You need a table or at least a tray.</span>" ).ToString() );
				return 1;
			}
			slices_lost = 0;

			if ( Convert.ToDouble( ((Obj)a).is_sharp() ) >= 1.2 ) {
				((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " slices " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You slice " ).the( this ).item().str( ".</span>" ).ToString() );
			} else {
				((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " inaccurately slices " ).the( this ).item().str( " with " ).the( a ).item().str( "!</span>" ).ToString(), new Txt( "<span class='notice'>You inaccurately slice " ).the( this ).item().str( " with " ).the( a ).item().str( "!</span>" ).ToString() );
				slices_lost = Rand13.Int( 1, Num13.MinInt( 1, Num13.Floor( this.slices_num / 2 ) ) );
			}
			reagents_per_slice = ( this.reagents.total_volume ??0) / this.slices_num;

			foreach (dynamic _a in Lang13.IterateRange( 1, this.slices_num - slices_lost )) {
				i = _a;
				
				slice = Lang13.Call( this.slice_path, this.loc );

				if ( this is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Customizable ) {
					C = this;
					S = slice;
					S.name = "" + C.name + S.name;
					S.filling.color = ((dynamic)C).filling.color;
					S.overlays += S.filling;
				}
				((Reagents)this.reagents).trans_to( slice, reagents_per_slice );
			}
			GlobalFuncs.qdel( this );
			return 1;
		}

		// Function from file: snacks.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.bitecount != 0 ) {
				
				if ( this.bitecount == 1 ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='info'>" ).The( this ).item().str( " was bitten by someone!</span>" ).ToString() );
				} else if ( this.bitecount > 1 && this.bitecount <= 3 ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='info'>" ).The( this ).item().str( " was bitten " ).item( this.bitecount ).str( " times!</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='info'>" ).The( this ).item().str( " was bitten multiple times!</span>" ).ToString() );
				}
			}
			return null;
		}

		// Function from file: snacks.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			eat_override = eat_override ?? false;

			dynamic target = null;
			double fullness = 0;
			dynamic H = null;
			double fullness2 = 0;
			dynamic H2 = null;
			dynamic reagentreference = null;

			
			if ( !Lang13.Bool( this.eatverb ) ) {
				this.eatverb = Rand13.Pick(new object [] { "bite", "chew", "nibble", "gnaw", "gobble", "chomp" });
			}

			if ( !Lang13.Bool( this.reagents.total_volume ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>There's nothing left of " ).the( this ).item().str( "!</span>" ).ToString() );
				((Mob)M).drop_from_inventory( this );
				GlobalFuncs.qdel( this );
				return false;
			}

			if ( M is Mob_Living_Carbon ) {
				target = M;

				if ( target == user ) {
					
					if ( !target.hasmouth ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>You have no mouth to eat with</span>" );
						return false;
					}
					fullness = target.nutrition + ( ((Reagents)target.reagents).get_reagent_amount( "nutriment" ) ?1:0) * 25;

					if ( this.wrapped ) {
						GlobalFuncs.to_chat( target, "<span class='warning'>You can't eat wrapped food!</span>" );
						return false;
					}

					if ( !( eat_override == true ) && M is Mob_Living_Carbon_Human ) {
						H = M;

						if ( ( H.species.chem_flags & 2 ) != 0 ) {
							((Mob)user).drop_from_inventory( this );
							this.forceMove( GlobalFuncs.get_turf( H ) );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( H ), "sound/items/eatfood.ogg", Rand13.Int( 10, 50 ), 1 );
							((Ent_Static)H).visible_message( new Txt( "<span class='warning'>As " ).item( M ).str( " attempts to eat " ).the( this ).item().str( " it falls through and onto the ground as if untouched.</span>" ).ToString(), new Txt( "<span class='notice'>As you attempt to eat " ).the( this ).item().str( " it falls through your body and onto the ground as if untouched.</span>" ).ToString() );
							return false;
						}
					}

					if ( fullness <= 50 ) {
						((Ent_Static)target).visible_message( new Txt( "<span class='notice'>" ).item( target ).str( " hungrily " ).item( this.eatverb ).str( "s some of " ).the( this ).item().str( " and gobbles it down!</span>" ).ToString(), new Txt( "<span class='notice'>You hungrily " ).item( this.eatverb ).str( " some of " ).the( this ).item().str( " and gobble it down!</span>" ).ToString() );
					} else if ( fullness > 50 && fullness < 150 ) {
						((Ent_Static)target).visible_message( new Txt( "<span class='notice'>" ).item( target ).str( " hungrily " ).item( this.eatverb ).str( "s " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You hungrily " ).item( this.eatverb ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );
					} else if ( fullness > 150 && fullness < 350 ) {
						((Ent_Static)target).visible_message( new Txt( "<span class='notice'>" ).item( target ).str( " " ).item( this.eatverb ).str( "s " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You " ).item( this.eatverb ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );
					} else if ( fullness > 350 && fullness < 550 ) {
						((Ent_Static)target).visible_message( new Txt( "<span class='notice'>" ).item( target ).str( " unwillingly " ).item( this.eatverb ).str( "s some of " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You unwillingly " ).item( this.eatverb ).str( " some of " ).the( this ).item().str( ".</span>" ).ToString() );
					} else if ( fullness > ( M.overeatduration / 2000 + 1 ) * 550 ) {
						GlobalFuncs.to_chat( target, new Txt( "<span class='notice'>You cannot force any more of " ).the( this ).item().str( " to go down your throat.</span>" ).ToString() );
						return false;
					}
				} else if ( target.hasmouth ) {
					fullness2 = target.nutrition + ( ((Reagents)target.reagents).get_reagent_amount( "nutriment" ) ?1:0) * 25;

					if ( this.wrapped ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>The food is wrapped, you can't feed it to " + target + " like that!</span>" );
						return false;
					}

					if ( fullness2 <= ( M.overeatduration / 1000 + 1 ) * 550 ) {
						((Ent_Static)target).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " attempts to feed " ).item( target ).str( " " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).item( user ).str( " attempts to feed you " ).the( this ).item().str( ".</span>" ).ToString() );
					} else {
						((Ent_Static)target).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " cannot force anymore of " ).the( this ).item().str( " down " ).item( target ).str( "'s throat!</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).item( user ).str( " cannot force anymore of " ).the( this ).item().str( " down your throat!</span>" ).ToString() );
						return false;
					}

					if ( !GlobalFuncs.do_mob( user, target ) ) {
						return null;
					}

					if ( M is Mob_Living_Carbon_Human ) {
						H2 = M;

						if ( ( H2.species.chem_flags & 2 ) != 0 ) {
							((Mob)user).drop_from_inventory( this );
							this.forceMove( GlobalFuncs.get_turf( H2 ) );
							((Ent_Static)H2).visible_message( new Txt( "<span class='warning'>As " ).item( user ).str( " attempts to feed " ).item( M ).str( " " ).the( this ).item().str( " it falls through and onto the ground as if untouched.</span>" ).ToString(), new Txt( "<span class='notice'>As " ).item( user ).str( " attempts to feed you " ).the( this ).item().str( " it falls through your body and onto the ground as if untouched.</span>" ).ToString() );
							return false;
						}
					}
					GlobalFuncs.add_logs( user, target, "fed", null, "" + this.reagentlist( this ) );
					((Ent_Static)target).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " feeds " ).item( target ).str( " " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='userdanger'>" ).item( user ).str( " feeds you " ).the( this ).item().str( ".</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( user, "<span class='warning'>" + target + " doesn't seem to have a mouth. Awkward!</span>" );
					return null;
				}
				reagentreference = this.reagents;

				if ( Lang13.Bool( reagentreference ) ) {
					GlobalFuncs.playsound( target.loc, "sound/items/eatfood.ogg", Rand13.Int( 10, 50 ), 1 );

					if ( Lang13.Bool( reagentreference.total_volume ) ) {
						((Reagents)reagentreference).reaction( target, GlobalVars.INGEST );
						Task13.Schedule( 0, (Task13.Closure)(() => {
							
							if ( Lang13.Bool( this.gcDestroyed ) ) {
								return;
							}

							if ( ( reagentreference.total_volume ??0) > ( this.bitesize ??0) ) {
								((Reagents)reagentreference).trans_to( target, this.bitesize );
							} else {
								((Reagents)reagentreference).trans_to( target, reagentreference.total_volume );
							}
							this.bitecount++;
							this.On_Consume( target, reagentreference );
							return;
						}));
					}
					return true;
				}
			}
			return false;
		}

		// Function from file: snacks.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.attack( user, user );
			return null;
		}

		// Function from file: snacks.dm
		public virtual void On_Consume( dynamic user = null, dynamic reagentreference = null ) {
			Ent_Static holder = null;
			dynamic TrashItem = null;

			
			if ( !Lang13.Bool( user ) ) {
				return;
			}

			if ( Lang13.Bool( this.reagents ) ) {
				reagentreference = this.reagents;
			}

			if ( !Lang13.Bool( reagentreference ) || !Lang13.Bool( reagentreference.total_volume ) ) {
				((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " finishes eating " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You finish eating " ).the( this ).item().str( ".</span>" ).ToString() );
				GlobalVars.score["foodeaten"]++;

				if ( this.loc == user ) {
					((Mob)user).drop_from_inventory( this );
				} else if ( this.loc is Mob ) {
					holder = this.loc;
					((dynamic)holder).drop_from_inventory( this );
				}

				if ( Lang13.Bool( this.trash ) ) {
					
					if ( Lang13.Bool( this.trash.IsSubclassOf( typeof(Obj_Item) ) ) ) {
						TrashItem = Lang13.Call( this.trash, user );
						((Mob)user).put_in_hands( TrashItem );
					} else if ( this.trash is Obj_Item ) {
						((Mob)user).put_in_hands( this.trash );
					}
				}
				GlobalFuncs.qdel( this );
			}
			return;
		}

	}

}