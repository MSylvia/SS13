// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Food_Snacks : Obj_Item_Weapon_ReagentContainers_Food {

		public dynamic bitesize = 2;
		public int bitecount = 0;
		public Type trash = null;
		public Type slice_path = null;
		public int slices_num = 0;
		public dynamic eatverb = null;
		public bool wrapped = false;
		public dynamic dried_type = null;
		public double? potency = null;
		public bool dry = false;
		public Type cooked_type = null;
		public string filling_color = "#FFFFFF";
		public Type custom_food_type = null;
		public int junkiness = 0;
		public ByTable bonus_reagents = new ByTable();
		public bool customfoodfilling = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/food/food.dmi";
		}

		public Obj_Item_Weapon_ReagentContainers_Food_Snacks ( dynamic location = null, int? vol = null ) : base( (object)(location), vol ) {
			
		}

		// Function from file: snacks.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			dynamic T = null;
			dynamic TB = null;

			T = GlobalFuncs.get_turf( this );
			TB = Lang13.FindIn( typeof(Obj_Structure_Table), T );

			if ( Lang13.Bool( TB ) ) {
				((Ent_Static)TB).MouseDrop( over );
			} else {
				base.MouseDrop( (object)(over), (object)(src_location), (object)(over_location), src_control, (object)(over_control), _params );
			}
			return null;
		}

		// Function from file: snacks.dm
		public override bool attack_animal( Mob_Living user = null ) {
			dynamic sattisfaction_text = null;

			
			if ( user is Mob_Living_SimpleAnimal ) {
				
				if ( user is Mob_Living_SimpleAnimal_Pet_Dog_Corgi ) {
					
					if ( this.bitecount == 0 || Rand13.PercentChance( 50 ) ) {
						user.emote( "me", 1, new Txt( "nibbles away at " ).the( this ).item().ToString() );
					}
					this.bitecount++;

					if ( this.bitecount >= 5 ) {
						sattisfaction_text = Rand13.Pick(new object [] { "burps from enjoyment", "yaps for more", "woofs twice", new Txt( "looks at the area where " ).the( this ).item().str( " was" ).ToString() });

						if ( Lang13.Bool( sattisfaction_text ) ) {
							user.emote( "me", 1, "" + sattisfaction_text );
						}
						GlobalFuncs.qdel( this );
					}
				}
			}
			return false;
		}

		// Function from file: snacks.dm
		public override dynamic Destroy(  ) {
			Ent_Dynamic something = null;

			
			if ( this.contents != null ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
					something = _a;
					
					something.loc = GlobalFuncs.get_turf( this );
				}
			}
			return base.Destroy();
		}

		// Function from file: snacks.dm
		public override void CheckParts( Game_Data holder = null ) {
			dynamic r_id = null;
			double? amount = null;

			
			if ( this.bonus_reagents.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.bonus_reagents )) {
					r_id = _a;
					
					amount = Lang13.DoubleNullable( this.bonus_reagents[r_id] );
					this.reagents.add_reagent( r_id, amount );
				}
			}
			return;
		}

		// Function from file: snacks.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic S = null;
			dynamic C = null;
			int sharp = 0;

			
			if ( A is Obj_Item_Weapon_Storage ) {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
				return 0;
			}

			if ( A is Obj_Item_Weapon_ReagentContainers_Food_Snacks ) {
				S = A;

				if ( this.custom_food_type != null && this.custom_food_type is Type ) {
					
					if ( Convert.ToDouble( S.w_class ) > 2 ) {
						user.WriteMsg( "<span class='warning'>" + S + " is too big for " + this + "!</span>" );
						return 0;
					}

					if ( !S.customfoodfilling ) {
						user.WriteMsg( "<span class='warning'>" + this + " can't be filled with " + S + "!</span>" );
						return 0;
					}

					if ( this.contents.len >= 20 ) {
						user.WriteMsg( "<span class='warning'>You can't add more ingredients to " + this + "!</span>" );
						return 0;
					}
					C = Lang13.Call( this.custom_food_type, GlobalFuncs.get_turf( this ) );
					((Obj_Item_Weapon_ReagentContainers_Food_Snacks_Customizable)C).initialize_custom_food( this, S, user );
					return 0;
				}
			}
			sharp = ((Obj_Item)A).is_sharp();

			if ( sharp != 0 ) {
				
				if ( this.slice( sharp, A, user ) ) {
					return 1;
				}
			}
			return null;
		}

		// Function from file: snacks.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.bitecount == 0 ) {
				return 0;
			} else if ( this.bitecount == 1 ) {
				user.WriteMsg( "" + this + " was bitten by someone!" );
			} else if ( this.bitecount <= 3 ) {
				user.WriteMsg( "" + this + " was bitten " + this.bitecount + " times!" );
			} else {
				user.WriteMsg( "" + this + " was bitten multiple times!" );
			}
			return 0;
		}

		// Function from file: snacks.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			return false;
		}

		// Function from file: snacks.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			double fullness = 0;
			Reagent_Consumable C = null;
			double? fraction = null;

			
			if ( !Lang13.Bool( this.eatverb ) ) {
				this.eatverb = Rand13.Pick(new object [] { "bite", "chew", "nibble", "gnaw", "gobble", "chomp" });
			}

			if ( !Lang13.Bool( this.reagents.total_volume ) ) {
				user.WriteMsg( "<span class='notice'>None of " + this + " left, oh no!</span>" );
				((Mob)M).unEquip( this );
				GlobalFuncs.qdel( this );
				return false;
			}

			if ( M is Mob_Living_Carbon ) {
				
				if ( !this.canconsume( M, user ) ) {
					return false;
				}
				fullness = M.nutrition + 10;

				foreach (dynamic _a in Lang13.Enumerate( M.reagents.reagent_list, typeof(Reagent_Consumable) )) {
					C = _a;
					
					fullness += C.nutriment_factor * C.volume / C.metabolization_rate;
				}

				if ( M == user ) {
					
					if ( this.junkiness != 0 && M.satiety < -150 && M.nutrition > 200 ) {
						M.WriteMsg( "<span class='notice'>You don't feel like eating any more junk food at the moment.</span>" );
						return false;
					}

					if ( this.wrapped ) {
						M.WriteMsg( "<span class='warning'>You can't eat wrapped food!</span>" );
						return false;
					} else if ( fullness <= 50 ) {
						M.WriteMsg( new Txt( "<span class='notice'>You hungrily " ).item( this.eatverb ).str( " some of " ).the( this ).item().str( " and gobble it down!</span>" ).ToString() );
					} else if ( fullness > 50 && fullness < 150 ) {
						M.WriteMsg( new Txt( "<span class='notice'>You hungrily begin to " ).item( this.eatverb ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );
					} else if ( fullness > 150 && fullness < 500 ) {
						M.WriteMsg( new Txt( "<span class='notice'>You " ).item( this.eatverb ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );
					} else if ( fullness > 500 && fullness < 600 ) {
						M.WriteMsg( new Txt( "<span class='notice'>You unwillingly " ).item( this.eatverb ).str( " a bit of " ).the( this ).item().str( ".</span>" ).ToString() );
					} else if ( fullness > ( M.overeatduration / 2000 + 1 ) * 600 ) {
						M.WriteMsg( new Txt( "<span class='warning'>You cannot force any more of " ).the( this ).item().str( " to go down your throat!</span>" ).ToString() );
						return false;
					}
				} else if ( !( M is Mob_Living_Carbon_Brain ) ) {
					
					if ( this.wrapped ) {
						return false;
					}

					if ( fullness <= ( M.overeatduration / 1000 + 1 ) * 600 ) {
						((Ent_Static)M).visible_message( "<span class='danger'>" + user + " attempts to feed " + M + " " + this + ".</span>", "<span class='userdanger'>" + user + " attempts to feed " + M + " " + this + ".</span>" );
					} else {
						((Ent_Static)M).visible_message( "<span class='warning'>" + user + " cannot force anymore of " + this + " down " + M + "'s throat!</span>", "<span class='warning'>" + user + " cannot force anymore of " + this + " down " + M + "'s throat!</span>" );
						return false;
					}

					if ( !GlobalFuncs.do_mob( user, M ) ) {
						return false;
					}
					GlobalFuncs.add_logs( user, M, "fed", this.reagentlist( this ) );
					((Ent_Static)M).visible_message( "<span class='danger'>" + user + " forces " + M + " to eat " + this + ".</span>", "<span class='userdanger'>" + user + " feeds " + M + " to eat " + this + ".</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>" + M + " doesn't seem to have a mouth!</span>" );
					return false;
				}

				if ( this.reagents != null ) {
					
					if ( M.satiety > -200 ) {
						M.satiety -= this.junkiness;
					}
					GlobalFuncs.playsound( M.loc, "sound/items/eatfood.ogg", Rand13.Int( 10, 50 ), 1 );

					if ( Lang13.Bool( this.reagents.total_volume ) ) {
						fraction = Num13.MinInt( Convert.ToInt32( this.bitesize / this.reagents.total_volume ), 1 );
						this.reagents.reaction( M, GlobalVars.INGEST, fraction );
						this.reagents.trans_to( M, this.bitesize );
						this.bitecount++;
						this.On_Consume();
					}
					return true;
				}
			}
			return false;
		}

		// Function from file: snacks.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			return null;
		}

		// Function from file: snacks.dm
		public virtual void initialize_cooked_food( dynamic S = null, bool? cooking_efficiency = null ) {
			cooking_efficiency = cooking_efficiency ?? true;

			dynamic r_id = null;
			double? amount = null;

			((Ent_Static)S).create_reagents( S.volume );

			if ( this.reagents != null ) {
				this.reagents.trans_to( S, this.reagents.total_volume );
			}

			if ( S.bonus_reagents.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( S.bonus_reagents )) {
					r_id = _a;
					
					amount = Lang13.DoubleNullable( S.bonus_reagents[r_id] * cooking_efficiency );
					S.reagents.add_reagent( r_id, amount );
				}
			}
			return;
		}

		// Function from file: snacks.dm
		public virtual void update_overlays( dynamic S = null ) {
			Image I = null;

			this.overlays.Cut();
			I = new Image( this.icon, "" + Lang13.Initial( this, "icon_state" ) + "_filling" );

			if ( S.filling_color == "#FFFFFF" ) {
				I.color = Rand13.Pick(new object [] { "#FF0000", "#0000FF", "#008000", "#FFFF00" });
			} else {
				I.color = S.filling_color;
			}
			this.overlays.Add( I );
			return;
		}

		// Function from file: snacks.dm
		public virtual void initialize_slice( dynamic slice = null, double reagents_per_slice = 0 ) {
			((Ent_Static)slice).create_reagents( slice.volume );
			this.reagents.trans_to( slice, reagents_per_slice );
			return;
		}

		// Function from file: snacks.dm
		public bool slice( int accuracy = 0, dynamic W = null, dynamic user = null ) {
			int slices_lost = 0;
			double reagents_per_slice = 0;
			double i = 0;
			dynamic slice = null;

			
			if ( this.slices_num <= 0 || !( this.slices_num != 0 ) || !( this.slice_path != null ) ) {
				return false;
			}

			if ( !( this.loc is Tile ) || !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Table), this.loc ) ) && !Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Table_Optable), this.loc ) ) && !Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Storage_Bag_Tray), this.loc ) ) ) {
				user.WriteMsg( "<span class='warning'>You cannot slice " + this + " here! You need a table or at least a tray.</span>" );
				return true;
			}
			slices_lost = 0;

			if ( accuracy >= 2 ) {
				((Ent_Static)user).visible_message( "" + user + " slices " + this + ".", "<span class='notice'>You slice " + this + ".</span>" );
			} else {
				((Ent_Static)user).visible_message( "" + user + " inaccurately slices " + this + " with " + W + "!", "<span class='notice'>You inaccurately slice " + this + " with your " + W + "!</span>" );
				slices_lost = Rand13.Int( 1, Num13.MinInt( 1, Num13.Floor( this.slices_num / 2 ) ) );
			}
			reagents_per_slice = ( this.reagents.total_volume ??0) / this.slices_num;

			foreach (dynamic _a in Lang13.IterateRange( 1, this.slices_num - slices_lost )) {
				i = _a;
				
				slice = Lang13.Call( this.slice_path, this.loc );
				this.initialize_slice( slice, reagents_per_slice );
			}
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: snacks.dm
		public virtual void On_Consume(  ) {
			dynamic TrashItem = null;
			dynamic TrashItem2 = null;

			
			if ( !( Task13.User != null ) ) {
				return;
			}

			if ( !Lang13.Bool( this.reagents.total_volume ) ) {
				Task13.User.unEquip( this );

				if ( this.trash != null ) {
					
					if ( Lang13.Bool( ((dynamic)this.trash).IsSubclassOf( typeof(Obj_Item_Weapon_Grown) ) ) ) {
						TrashItem = Lang13.Call( this.trash, Task13.User, this.potency );
						Task13.User.put_in_hands( TrashItem );
					} else if ( Lang13.Bool( ((dynamic)this.trash).IsSubclassOf( typeof(Obj_Item) ) ) ) {
						TrashItem2 = Lang13.Call( this.trash, Task13.User );
						Task13.User.put_in_hands( TrashItem2 );
					} else if ( this.trash is Obj_Item ) {
						Task13.User.put_in_hands( this.trash );
					}
				}
				GlobalFuncs.qdel( this );
			}
			return;
		}

	}

}