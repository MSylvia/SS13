// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Match : Obj_Item_Weapon {

		public int lit = 0;
		public int smoketime = 10;
		public bool brightness_on = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "cig";
			this.heat_production = 1000;
			this.w_class = 1;
			this.origin_tech = "materials=1";
			this.attack_verb = new ByTable(new object [] { "burnt", "singed" });
			this.light_color = "#FAA019";
			this.icon = "icons/obj/cigarettes.dmi";
			this.icon_state = "match";
		}

		// Function from file: cigs_lighters.dm
		public Obj_Item_Weapon_Match ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_brightness();
			return;
		}

		// Function from file: cigs_lighters.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			dynamic cig = null;

			
			if ( M.wear_mask is Obj_Item_Clothing_Mask_Cigarette && ((dynamic)user.zone_sel).selecting == "mouth" && this.lit == 1 ) {
				cig = M.wear_mask;

				if ( M == user ) {
					((Ent_Static)cig).attackby( this, user );
				} else {
					cig.light( new Txt( "<span class='notice'>" ).item( user ).str( " holds " ).the( this.name ).item().str( " out for " ).item( M ).str( ", and lights " ).his_her_its_their().str( " " ).item( cig.name ).str( ".</span>" ).ToString() );
				}
			} else {
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
			return null;
		}

		// Function from file: candle.dm
		public override double? is_hot(  ) {
			
			if ( this.lit != 0 ) {
				return this.heat_production;
			}
			return 0;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic process(  ) {
			dynamic location = null;

			location = GlobalFuncs.get_turf( this );
			this.smoketime--;

			if ( this.smoketime <= 0 ) {
				this.lit = -1;
				this.update_brightness();
				return null;
			}

			if ( Lang13.Bool( location ) ) {
				((Tile)location).hotspot_expose( this.heat_production, 5, null, this.loc is Tile );
				return null;
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public void update_brightness(  ) {
			
			if ( this.lit == 1 ) {
				GlobalVars.processing_objects.Add( this );
				this.set_light( this.brightness_on );
			} else {
				GlobalVars.processing_objects.Remove( this );
				this.set_light( 0 );
			}
			this.update_icon();
			return;
		}

		// Function from file: cigs_lighters.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			switch ((int)( this.lit )) {
				case 1:
					this.name = "lit " + Lang13.Initial( this, "name" );
					this.item_state = "" + Lang13.Initial( this, "item_state" ) + "on";
					this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_lit";
					this.damtype = "fire";
					break;
				case 0:
					this.name = "" + Lang13.Initial( this, "name" );
					this.item_state = "" + Lang13.Initial( this, "item_state" ) + "off";
					this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_unlit";
					this.damtype = "brute";
					break;
				case -1:
					this.name = "burnt " + Lang13.Initial( this, "name" );
					this.item_state = "" + Lang13.Initial( this, "item_state" ) + "off";
					this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_burnt";
					this.damtype = "brute";
					break;
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			switch ((int)( this.lit )) {
				case 1:
					GlobalFuncs.to_chat( user, "The match is lit." );
					break;
				case 0:
					GlobalFuncs.to_chat( user, "The match is unlit and ready to be used." );
					break;
				case -1:
					GlobalFuncs.to_chat( user, "The match is burnt." );
					break;
			}
			return null;
		}

	}

}