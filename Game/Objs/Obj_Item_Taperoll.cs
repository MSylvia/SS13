// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Taperoll : Obj_Item {

		public dynamic start = null;
		public dynamic end = null;
		public Type tape_type = typeof(Obj_Item_Tape);
		public string icon_base = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.icon = "icons/policetape.dmi";
			this.icon_state = "rollstart";
		}

		public Obj_Item_Taperoll ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: policetape.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic turf = null;
			dynamic tape = null;

			
			if ( flag == false ) {
				return false;
			}

			if ( A is Obj_Machinery_Door_Airlock || A is Obj_Machinery_Door_Firedoor ) {
				turf = GlobalFuncs.get_turf( A );

				if ( Lang13.Bool( Lang13.FindIn( this.tape_type, turf ) ) ) {
					return false;
				}
				GlobalFuncs.to_chat( user, "<span class='notice'>You start placing " + this + ".</span>" );

				if ( !GlobalFuncs.do_mob( user, A, 30 ) ) {
					return false;
				}
				tape = Lang13.Call( this.tape_type, turf );
				tape.icon_state = "" + this.icon_base + "_door";
				tape.layer = 3.2;
				GlobalFuncs.to_chat( user, "<span class='notice'>You placed " + this + ".</span>" );
			}
			return false;
		}

		// Function from file: policetape.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic cur = null;
			string dir = null;
			double d = 0;
			double d2 = 0;
			bool can_place = false;
			Obj O = null;
			bool tapetest = false;
			Obj_Item_Tape Ptest = null;
			dynamic P = null;

			
			if ( this.icon_state == "" + this.icon_base + "_start" ) {
				this.start = GlobalFuncs.get_turf( this );

				if ( this.start is Tile_Space ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't place " + this + " in space</span>" );
					return null;
				}
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You place the first end of " + this + ".</span>" );
				this.icon_state = "" + this.icon_base + "_stop";
			} else {
				this.icon_state = "" + this.icon_base + "_start";
				this.end = GlobalFuncs.get_turf( this );

				if ( this.end is Tile_Space ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't place " + this + " in space</span>" );
					return null;
				}

				if ( this.start.y != this.end.y && this.start.x != this.end.x || this.start.z != this.end.z ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>" + this + " can only be laid in a straight line.</span>" );
					return null;
				}
				cur = this.start;

				if ( this.start.x == this.end.x ) {
					d = Convert.ToDouble( this.end.y - this.start.y );

					if ( d != 0 ) {
						d = d / Math.Abs( d );
					}
					this.end = GlobalFuncs.get_turf( Map13.GetTile( Convert.ToInt32( this.end.x ), Convert.ToInt32( this.end.y + d ), Convert.ToInt32( this.end.z ) ) );
					dir = "v";
				} else {
					d2 = Convert.ToDouble( this.end.x - this.start.x );

					if ( d2 != 0 ) {
						d2 = d2 / Math.Abs( d2 );
					}
					this.end = GlobalFuncs.get_turf( Map13.GetTile( Convert.ToInt32( this.end.x + d2 ), Convert.ToInt32( this.end.y ), Convert.ToInt32( this.end.z ) ) );
					dir = "h";
				}
				can_place = true;

				while (cur != this.end && can_place) {
					
					if ( cur.density ) {
						can_place = false;
					} else {
						
						foreach (dynamic _a in Lang13.Enumerate( cur, typeof(Obj) )) {
							O = _a;
							

							if ( !( O is Obj_Item_Tape ) && O.density ) {
								can_place = false;
								break;
							}
						}
					}
					cur = Map13.GetStepTowardsSimple( cur, this.end );
				}

				if ( !can_place ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't run " + this + " through that!</span>" );
					return null;
				}
				cur = this.start;
				tapetest = false;

				while (cur != this.end) {
					
					foreach (dynamic _b in Lang13.Enumerate( cur, typeof(Obj_Item_Tape) )) {
						Ptest = _b;
						

						if ( Ptest.icon_state == "" + Ptest.icon_base + "_" + dir ) {
							tapetest = true;
						}
					}

					if ( !tapetest ) {
						P = Lang13.Call( this.tape_type, cur );
						P.icon_state = "" + P.icon_base + "_" + dir;
					}
					cur = Map13.GetStepTowardsSimple( cur, this.end );
				}
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You finish placing " + this + ".</span>" );
				((Ent_Static)user).visible_message( "<span class='warning'>" + user + " finishes placing " + this + ".</span>" );
			}
			return null;
		}

	}

}