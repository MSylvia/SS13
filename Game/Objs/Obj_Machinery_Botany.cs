// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Botany : Obj_Machinery {

		public dynamic loaded_seed = null;
		public dynamic loaded_disk = null;
		public bool open = false;
		public bool active = false;
		public int action_time = 50;
		public int last_action = 0;
		public bool eject_disk = false;
		public bool failed_task = false;
		public bool disk_needs_genes = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 62;
			this.icon = "icons/obj/hydroponics.dmi";
			this.icon_state = "hydrotray3";
		}

		public Obj_Machinery_Botany ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: seed_machines.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
			}

			if ( Lang13.Bool( href_list["eject_packet"] ) ) {
				
				if ( !Lang13.Bool( this.loaded_seed ) ) {
					return null;
				}
				((Ent_Dynamic)this.loaded_seed).forceMove( GlobalFuncs.get_turf( this ) );

				if ( this.loaded_seed.seed.name == "new line" || GlobalVars.plant_controller.seeds[this.loaded_seed.seed.name] == null ) {
					this.loaded_seed.seed.uid = GlobalVars.plant_controller.seeds.len + 1;
					this.loaded_seed.seed.name = "" + this.loaded_seed.seed.uid;
					GlobalVars.plant_controller.seeds[this.loaded_seed.seed.name] = this.loaded_seed.seed;
				}
				((Obj_Item_Seeds)this.loaded_seed).update_seed();
				this.visible_message( new Txt().icon( this ).str( " " ).item( this ).str( " beeps and spits out " ).item( this.loaded_seed ).str( "." ).ToString() );
				this.loaded_seed = null;
			}

			if ( Lang13.Bool( href_list["eject_disk"] ) ) {
				
				if ( !Lang13.Bool( this.loaded_disk ) ) {
					return null;
				}
				((Ent_Dynamic)this.loaded_disk).forceMove( GlobalFuncs.get_turf( this ) );
				this.visible_message( new Txt().icon( this ).str( " " ).item( this ).str( " beeps and spits out " ).item( this.loaded_disk ).str( "." ).ToString() );
				this.loaded_disk = null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: seed_machines.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic S = null;
			dynamic B = null;

			
			if ( a is Obj_Item_Seeds ) {
				
				if ( Lang13.Bool( this.loaded_seed ) ) {
					GlobalFuncs.to_chat( b, "There is already a seed loaded." );
					return null;
				}
				S = a;

				if ( Lang13.Bool( S.seed ) && S.seed.immutable > 0 ) {
					GlobalFuncs.to_chat( b, "That seed is not compatible with our genetics technology." );
				} else {
					new ByTable().Set( 1, S ).Set( 2, this ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( b, "drop_item" ) );
					this.loaded_seed = a;
					GlobalFuncs.to_chat( b, "You load " + a + " into " + this + "." );
					GlobalVars.nanomanager.update_uis( this );
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_Disk_Botany ) {
				
				if ( Lang13.Bool( this.loaded_disk ) ) {
					GlobalFuncs.to_chat( b, "There is already a data disk loaded." );
					return null;
				} else {
					B = a;

					if ( B.genes != null && B.genes.len != 0 ) {
						
						if ( !this.disk_needs_genes ) {
							GlobalFuncs.to_chat( b, "That disk already has gene data loaded." );
							return null;
						}
					} else if ( this.disk_needs_genes ) {
						GlobalFuncs.to_chat( b, "That disk does not have any gene data loaded." );
						return null;
					}

					if ( !Lang13.Bool( b.drop_item( a, this ) ) ) {
						return null;
					}
					this.loaded_disk = a;
					GlobalFuncs.to_chat( b, "You load " + a + " into " + this + "." );
					GlobalVars.nanomanager.update_uis( this );
				}
				return null;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: seed_machines.dm
		public void finished_task(  ) {
			this.active = false;

			if ( this.failed_task ) {
				this.failed_task = false;
				this.visible_message( new Txt().icon( this ).str( " " ).item( this ).str( " pings unhappily, flashing a red warning light." ).ToString() );
			} else {
				this.visible_message( new Txt().icon( this ).str( " " ).item( this ).str( " pings happily." ).ToString() );
			}

			if ( this.eject_disk ) {
				this.eject_disk = false;

				if ( Lang13.Bool( this.loaded_disk ) ) {
					((Ent_Dynamic)this.loaded_disk).forceMove( GlobalFuncs.get_turf( this ) );
					this.visible_message( new Txt().icon( this ).str( " " ).item( this ).str( " beeps and spits out " ).item( this.loaded_disk ).str( "." ).ToString() );
					this.loaded_disk = null;
				}
			}
			GlobalVars.nanomanager.update_uis( this );
			return;
		}

		// Function from file: seed_machines.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.ui_interact( a );
			return null;
		}

		// Function from file: seed_machines.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: seed_machines.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: seed_machines.dm
		public override dynamic process(  ) {
			base.process();

			if ( !this.active ) {
				return null;
			}

			if ( Game13.time > this.last_action + this.action_time ) {
				this.finished_task();
			}
			return null;
		}

	}

}