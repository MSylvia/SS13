// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_CameraBug : Obj_Item_Device {

		public dynamic current = null;
		public bool last_net_update = false;
		public ByTable bugged_cameras = new ByTable();
		public double? track_mode = 0;
		public int last_tracked = 0;
		public int refresh_interval = 50;
		public string tracked_name = null;
		public dynamic tracking = null;
		public dynamic last_found = null;
		public int last_seen = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.item_state = "camera_bug";
			this.throw_speed = 4;
			this.throw_range = 20;
			this.origin_tech = "syndicate=3;engineering=1";
			this.icon_state = "camera_bug";
		}

		// Function from file: camera_bug.dm
		public Obj_Item_Device_CameraBug ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSobj.processing.Add( this );
			return;
		}

		// Function from file: camera_bug.dm
		public override int? process( dynamic seconds = null ) {
			dynamic M = null;
			ByTable tracking_cams = null;
			ByTable b_cams = null;
			dynamic entry = null;
			ByTable target_region = null;
			Obj_Machinery_Camera C = null;

			
			if ( this.track_mode == 0 || Game13.time < this.last_tracked + this.refresh_interval ) {
				return null;
			}
			this.last_tracked = Game13.time;

			if ( this.track_mode == 2 ) {
				
				if ( !Lang13.Bool( this.tracking ) ) {
					this.updateSelfDialog();
					return null;
				}

				if ( this.tracking.name != this.tracked_name ) {
					M = this.tracking;

					if ( M is Mob ) {
						
						if ( !( this.tracked_name == "Unknown" && String13.FindIgnoreCase( this.tracking.name, "Unknown", 1, 0 ) != 0 ) ) {
							
							if ( !( this.tracked_name == M.real_name && String13.FindIgnoreCase( this.tracking.name, M.real_name, 1, 0 ) != 0 ) ) {
								this.updateSelfDialog();
								return null;
							}
						}
					} else {
						this.updateSelfDialog();
						return null;
					}
				}
				tracking_cams = new ByTable();
				b_cams = this.get_cameras();

				foreach (dynamic _a in Lang13.Enumerate( b_cams )) {
					entry = _a;
					
					tracking_cams.Add( b_cams[entry] );
				}
				target_region = Map13.FetchInView( null, this.tracking );

				foreach (dynamic _b in Lang13.Enumerate( target_region & tracking_cams, typeof(Obj_Machinery_Camera) )) {
					C = _b;
					

					if ( !GlobalFuncs.can_see( C, this.tracking ) ) {
						continue;
					}

					if ( C.can_use() ) {
						this.last_found = C.c_tag;
						this.last_seen = Game13.time;
						break;
					}
				}
			}
			this.updateSelfDialog();
			return null;
		}

		// Function from file: camera_bug.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic C = null;
			dynamic A = null;
			dynamic C2 = null;
			dynamic C3 = null;
			dynamic T = null;

			
			if ( Task13.User != this.loc ) {
				Task13.User.unset_machine();
				Interface13.Browse( Task13.User, null, "window=camerabug" );
				return null;
			}
			Task13.User.set_machine( this );

			if ( href_list.Contains( "mode" ) ) {
				this.track_mode = String13.ParseNumber( href_list["mode"] );
			}

			if ( href_list.Contains( "monitor" ) ) {
				C = Lang13.FindObj( href_list["monitor"] );

				if ( Lang13.Bool( C ) ) {
					this.track_mode = 1;
					this.current = C;
					Task13.User.reset_perspective( null );
					this.interact();
				}
			}

			if ( href_list.Contains( "track" ) ) {
				A = Lang13.FindObj( href_list["track"] );

				if ( Lang13.Bool( A ) ) {
					this.tracking = A;
					this.tracked_name = A.name;
					this.last_found = this.current.c_tag;
					this.last_seen = Game13.time;
					this.track_mode = 2;
				}
			}

			if ( href_list.Contains( "emp" ) ) {
				C2 = Lang13.FindObj( href_list["emp"] );

				if ( C2 is Obj_Machinery_Camera && C2.bug == this ) {
					((Ent_Static)C2).emp_act( 1 );
					C2.bug = null;
					this.bugged_cameras.Remove( C2.c_tag );
				}
				this.interact();
				return null;
			}

			if ( href_list.Contains( "close" ) ) {
				Task13.User.unset_machine();
				this.current = null;
				return null;
			}

			if ( href_list.Contains( "view" ) ) {
				C3 = Lang13.FindObj( href_list["view"] );

				if ( C3 is Obj_Machinery_Camera ) {
					
					if ( !((Obj_Machinery_Camera)C3).can_use() ) {
						Task13.User.WriteMsg( "<span class='warning'>Something's wrong with that camera!  You can't get a feed.</span>" );
						return null;
					}
					T = GlobalFuncs.get_turf( this.loc );

					if ( !Lang13.Bool( T ) || C3.z != T.z ) {
						Task13.User.WriteMsg( "<span class='warning'>You can't get a signal!</span>" );
						return null;
					}
					this.current = C3;
					Task13.Schedule( 6, (Task13.Closure)(() => {
						
						if ( Lang13.Bool( this.check_eye( Task13.User ) ) ) {
							Task13.User.reset_perspective( C3 );
							this.interact();
						} else {
							Task13.User.unset_machine();
							Interface13.Browse( Task13.User, null, "window=camerabug" );
						}
						return;
					}));
					return null;
				} else {
					Task13.User.unset_machine();
				}
			}
			this.interact();
			return null;
		}

		// Function from file: camera_bug.dm
		public string camera_report(  ) {
			string dat = null;
			ByTable seen = null;
			ByTable names = null;
			Obj_Singularity S = null;
			int stage = 0;
			Obj_Mecha M = null;
			Mob_Living M2 = null;

			dat = "";

			if ( Lang13.Bool( this.current ) && ((Obj_Machinery_Camera)this.current).can_use() ) {
				seen = ((Obj_Machinery_Camera)this.current).can_see();
				names = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( seen, typeof(Obj_Singularity) )) {
					S = _a;
					

					if ( names.Contains( S.name ) ) {
						names[S.name]++;
						dat += "" + S.name + " (" + names[S.name] + ")";
					} else {
						names[S.name] = 1;
						dat += "" + S.name;
					}
					stage = Num13.Floor( ( S.current_size ??0) / 2 ) + 1;
					dat += " (Stage " + stage + ")";
					dat += new Txt( " <a href='?" ).Ref( this ).str( ";track=" ).Ref( S ).str( "'>[Track]</a><br>" ).ToString();
				}

				foreach (dynamic _b in Lang13.Enumerate( seen, typeof(Obj_Mecha) )) {
					M = _b;
					

					if ( names.Contains( M.name ) ) {
						names[M.name]++;
						dat += "" + M.name + " (" + names[M.name] + ")";
					} else {
						names[M.name] = 1;
						dat += "" + M.name;
					}
					dat += new Txt( " <a href='?" ).Ref( this ).str( ";track=" ).Ref( M ).str( "'>[Track]</a><br>" ).ToString();
				}

				foreach (dynamic _c in Lang13.Enumerate( seen, typeof(Mob_Living) )) {
					M2 = _c;
					

					if ( names.Contains( M2.name ) ) {
						names[M2.name]++;
						dat += "" + M2.name + " (" + names[M2.name] + ")";
					} else {
						names[M2.name] = 1;
						dat += "" + M2.name;
					}

					if ( M2.buckled != null && !Lang13.Bool( M2.lying ) ) {
						dat += " (Sitting)";
					}

					if ( Lang13.Bool( M2.lying ) ) {
						dat += " (Laying down)";
					}
					dat += new Txt( " <a href='?" ).Ref( this ).str( ";track=" ).Ref( M2 ).str( "'>[Track]</a><br>" ).ToString();
				}

				if ( Lang13.Length( dat ) == 0 ) {
					dat += "No motion detected.";
				}
				return dat;
			} else {
				return "Camera Offline<br>";
			}
		}

		// Function from file: camera_bug.dm
		public string menu( ByTable cameras = null ) {
			string html = null;
			dynamic entry = null;
			Obj_Machinery_Camera C = null;
			string functions = null;
			int time_diff = 0;
			Obj_Machinery_Camera C2 = null;
			dynamic outstring = null;
			int m = 0;
			dynamic s = null;

			
			if ( !( cameras != null ) || !( cameras.len != 0 ) ) {
				return "No bugged cameras found.";
			}

			switch ((int?)( this.track_mode )) {
				case 0:
					html = new Txt( "<h3>Select a camera:</h3> <a href='?src=" ).Ref( this ).str( ";view'>[Cancel camera view]</a><hr><table>" ).ToString();

					foreach (dynamic _a in Lang13.Enumerate( cameras )) {
						entry = _a;
						
						C = cameras[entry];
						functions = "";

						if ( C.bug == this ) {
							functions = new Txt( " - <a href='?src=" ).Ref( this ).str( ";monitor=" ).Ref( C ).str( "'>[Monitor]</a> <a href='?src=" ).Ref( this ).str( ";emp=" ).Ref( C ).str( "'>[Disable]</a>" ).ToString();
						} else {
							functions = new Txt( " - <a href='?src=" ).Ref( this ).str( ";monitor=" ).Ref( C ).str( "'>[Monitor]</a>" ).ToString();
						}
						html += new Txt( "<tr><td><a href='?src=" ).Ref( this ).str( ";view=" ).Ref( C ).str( "'>" ).item( entry ).str( "</a></td><td>" ).item( functions ).str( "</td></tr>" ).ToString();
					}
					break;
				case 1:
					
					if ( Lang13.Bool( this.current ) ) {
						html = new Txt( "Analyzing Camera '" ).item( this.current.c_tag ).str( "' <a href='?" ).Ref( this ).str( ";mode=0'>[Select Camera]</a><br>" ).ToString();
						html += this.camera_report();
					} else {
						this.track_mode = 0;
						return this.menu( cameras );
					}
					break;
				case 2:
					
					if ( Lang13.Bool( this.tracking ) ) {
						html = new Txt( "Tracking '" ).item( this.tracked_name ).str( "'  <a href='?" ).Ref( this ).str( ";mode=0'>[Cancel Tracking]</a>  <a href='?src=" ).Ref( this ).str( ";view'>[Cancel camera view]</a><br>" ).ToString();

						if ( Lang13.Bool( this.last_found ) ) {
							time_diff = Num13.Floor( ( Game13.time - this.last_seen ) / 150 );
							C2 = this.bugged_cameras[this.last_found];
							outstring = null;

							if ( C2 != null ) {
								outstring = new Txt( "<a href='?" ).Ref( this ).str( ";view=" ).Ref( C2 ).str( "'>" ).item( this.last_found ).str( "</a>" ).ToString();
							} else {
								outstring = this.last_found;
							}

							if ( !( time_diff != 0 ) ) {
								html += "Last seen near " + outstring + " (now)<br>";
							} else {
								m = Num13.Floor( time_diff / 4 );
								s = ( time_diff - m * 4 ) * 15;

								if ( !Lang13.Bool( s ) ) {
									s = "00";
								}
								html += new Txt( "Last seen near " ).item( outstring ).str( " (" ).item( m ).str( ":" ).item( s ).str( " minute" ).s().str( " ago)<br>" ).ToString();
							}

							if ( C2 != null && C2.bug == this ) {
								html += new Txt( "<a href='?src=" ).Ref( this ).str( ";emp=" ).Ref( C2 ).str( "'>[Disable]</a>" ).ToString();
							}
						} else {
							html += "Not yet seen.";
						}
					} else {
						this.track_mode = 0;
						return this.menu( cameras );
					}
					break;
			}
			return html;
		}

		// Function from file: camera_bug.dm
		public ByTable get_cameras(  ) {
			Obj_Machinery_Camera camera = null;

			
			if ( Game13.time > ( this.last_net_update ?1:0) + 100 ) {
				this.bugged_cameras = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cameranet.cameras, typeof(Obj_Machinery_Camera) )) {
					camera = _a;
					

					if ( camera.stat != 0 || !camera.can_use() ) {
						continue;
					}

					if ( Lang13.Length( new ByTable(new object [] { "SS13", "MINE" }) & camera.network ) != 0 ) {
						this.bugged_cameras[camera.c_tag] = camera;
					}
				}
			}
			GlobalFuncs.sortList( this.bugged_cameras );
			return this.bugged_cameras;
		}

		// Function from file: camera_bug.dm
		public override void on_unset_machine( Mob user = null ) {
			user.reset_perspective( null );
			return;
		}

		// Function from file: camera_bug.dm
		public override dynamic check_eye( Mob user = null ) {
			dynamic T = null;

			
			if ( this.loc != user || user.incapacitated() || user.eye_blind != 0 || !Lang13.Bool( this.current ) ) {
				user.unset_machine();
				return null;
			}
			T = GlobalFuncs.get_turf( user.loc );

			if ( T.z != this.current.z || !((Obj_Machinery_Camera)this.current).can_use() ) {
				user.WriteMsg( "<span class='danger'>" + this + " has lost the signal.</span>" );
				this.current = null;
				user.unset_machine();
			}
			return null;
		}

		// Function from file: camera_bug.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			((Mob)user).set_machine( this );
			this.interact( user );
			return null;
		}

		// Function from file: camera_bug.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			user = user ?? Task13.User;

			Browser popup = null;

			popup = new Browser( user, "camerabug", "Camera Bug", null, null, this );
			popup.set_content( this.menu( this.get_cameras() ) );
			popup.open();
			return null;
		}

		// Function from file: camera_bug.dm
		public override dynamic Destroy(  ) {
			dynamic cam_tag = null;
			Obj_Machinery_Camera camera = null;

			this.get_cameras();

			foreach (dynamic _a in Lang13.Enumerate( this.bugged_cameras )) {
				cam_tag = _a;
				
				camera = this.bugged_cameras[cam_tag];

				if ( camera.bug == this ) {
					camera.bug = null;
				}
			}
			this.bugged_cameras = new ByTable();

			if ( Lang13.Bool( this.tracking ) ) {
				this.tracking = null;
			}
			return base.Destroy();
		}

	}

}