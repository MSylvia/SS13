// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_CameraBug : Obj_Item_Device {

		public string c_tag = "";
		public bool active = false;
		public string network = "";
		public ByTable excludes = new ByTable(new object [] { typeof(Tile_Simulated_Floor), typeof(Tile_Space), typeof(Tile_Simulated_Shuttle), typeof(Mob_Living_Carbon), typeof(Obj_Item_Weapon_Storage) });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.item_state = "";
			this.throw_speed = 4;
			this.throw_range = 20;
			this.flags = 260;
			this.icon_state = "implant_evil";
		}

		public Obj_Item_Device_CameraBug ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: camera_bug.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.camera_bugs.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: camera_bug.dm
		public void removed( dynamic user = null, string message = null, bool? catastrophic = null ) {
			message = message ?? new Txt().item( user ).str( " pries " ).the( this ).item().str( " away from " ).the( this.loc ).item().ToString();
			catastrophic = catastrophic ?? false;

			this.active = false;
			GlobalVars.camera_bugs.Remove( this );
			this.loc = GlobalFuncs.get_turf( this );
			this.visible_message( message );

			if ( catastrophic == true ) {
				Task13.Schedule( 5, (Task13.Closure)(() => {
					GlobalFuncs.explosion( this.loc, 0, Rand13.PercentChance( 15 ), 2, 0 );
					return;
				}));
			}
			return;
		}

		// Function from file: camera_bug.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			switch ((int)( severity )) {
				case 3:
					
					if ( Rand13.PercentChance( 10 ) ) {
						this.removed( null, new Txt( "<span class='notice'>" ).The( this ).item().str( " deactivates and falls off!</span>" ).ToString(), Rand13.PercentChance( 1 ) );
					}
					break;
				case 2:
					
					if ( Rand13.PercentChance( 40 ) ) {
						this.removed( null, new Txt( "<span class='notice'>" ).The( this ).item().str( " deactivates and falls off!</span>" ).ToString() );
					}
					break;
				case 1:
					this.removed( null, new Txt( "<span class='notice'>" ).The( this ).item().str( " deactivates and falls off!</span>" ).ToString() );
					break;
			}
			return null;
		}

		// Function from file: camera_bug.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic I = null;

			
			if ( !Lang13.Bool( this.c_tag ) || this.c_tag == "" ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>Set the tag first dumbass</span>" );
				return false;
			}

			if ( GlobalFuncs.is_type_in_list( this.excludes ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " won't stick!</span>" ).ToString() );
				return false;
			}

			if ( A is Obj_Item ) {
				I = A;

				if ( Convert.ToDouble( I.w_class ) < 3 ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( I ).item().str( " is too small for " ).the( this ).item().str( "</span>" ).ToString() );
					return false;
				}
			}

			if ( Lang13.Bool( user.drop_item( this, A ) ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You stealthily place " ).the( this ).item().str( " onto " ).the( A ).item().str( "</span>" ).ToString() );
				this.active = true;
				GlobalVars.camera_bugs.Add( this );
				return true;
			}
			return false;
		}

		// Function from file: camera_bug.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string newtag = null;

			newtag = GlobalFuncs.sanitize( Interface13.Input( "Set camera tag", null, null, null, null, InputType.Str | InputType.Null ) );

			if ( Lang13.Bool( newtag ) ) {
				this.c_tag = newtag;

				if ( Lang13.Bool( user.mind ) ) {
					this.network = new Txt().Ref( user.mind ).ToString();
				}
			}
			return null;
		}

	}

}