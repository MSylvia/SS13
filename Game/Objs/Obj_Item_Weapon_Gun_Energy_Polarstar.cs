// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Energy_Polarstar : Obj_Item_Weapon_Gun_Energy {

		public int firelevel = 4;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.fire_delay = 1;
			this.origin_tech = "materials=4;powerstorage=3;combat=3";
			this.projectile_type = "/obj/item/projectile/spur/polarstar";
			this.inhand_states = new ByTable().Set( "left_hand", "icons/mob/in-hand/left/guns_experimental.dmi" ).Set( "right_hand", "icons/mob/in-hand/right/guns_experimental.dmi" );
			this.recoil = 1;
			this.icon = "icons/obj/gun_experimental.dmi";
			this.icon_state = "polarstar";
		}

		// Function from file: special.dm
		public Obj_Item_Weapon_Gun_Energy_Polarstar ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/spur_spawn.ogg", 50, 0, null, GlobalVars.FALLOFF_SOUNDS, false );
			return;
		}

		// Function from file: special.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			return null;
		}

		// Function from file: special.dm
		public void set_firesound(  ) {
			
			switch ((int)( this.firelevel )) {
				case 3:
				case 4:
					this.fire_sound = "sound/weapons/spur_high.ogg";
					this.recoil = 1;
					break;
				case 2:
					this.fire_sound = "sound/weapons/spur_medium.ogg";
					this.recoil = 0;
					break;
				case 1:
				case 0:
					this.fire_sound = "sound/weapons/spur_low.ogg";
					this.recoil = 0;
					break;
			}
			return;
		}

		// Function from file: special.dm
		public void levelChange(  ) {
			double maxlevel = 0;
			double level = 0;
			int newlevel = 0;
			string levelupsound = null;
			dynamic M = null;

			maxlevel = Convert.ToDouble( this.power_supply.maxcharge );
			level = Convert.ToDouble( this.power_supply.charge );
			newlevel = 0;

			if ( level == maxlevel ) {
				newlevel = 4;
			} else if ( level >= maxlevel / 3 * 2 ) {
				newlevel = 3;
			} else if ( level >= maxlevel / 3 ) {
				newlevel = 2;
			} else if ( level >= Convert.ToDouble( this.charge_cost ) ) {
				newlevel = 1;
			} else {
				newlevel = 0;
			}

			if ( this.firelevel >= newlevel ) {
				this.firelevel = newlevel;
				this.set_firesound();
				return;
			}
			this.firelevel = newlevel;
			this.set_firesound();
			levelupsound = null;

			switch ((int)( this.firelevel )) {
				case 1:
					levelupsound = "sound/weapons/spur_chargelow.ogg";
					break;
				case 2:
					levelupsound = "sound/weapons/spur_chargemed.ogg";
					break;
				case 3:
					levelupsound = "sound/weapons/spur_chargehigh.ogg";
					break;
				case 4:
					levelupsound = "sound/weapons/spur_chargefull.ogg";
					break;
			}

			if ( Lang13.Bool( levelupsound ) ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_turf( this ) )) {
					M = _b;
					
					((Mob)M).playsound_local( M, levelupsound, 100, 0, null, GlobalVars.FALLOFF_SOUNDS, false );
					Task13.Schedule( 1, (Task13.Closure)(() => {
						((Mob)M).playsound_local( M, levelupsound, 75, 0, null, GlobalVars.FALLOFF_SOUNDS, false );
						return;
					}));
				}
			}
			return;
		}

		// Function from file: special.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			struggle = struggle ?? false;

			this.levelChange();
			base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );
			return false;
		}

	}

}