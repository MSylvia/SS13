// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Decal_Cleanable_LiquidFuel : Obj_Effect_Decal_Cleanable {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.amount = 1;
			this.volatility = 0.11;
			this.icon = "icons/effects/effects.dmi";
			this.icon_state = "fuel";
			this.layer = 2.2;
		}

		// Function from file: fuel.dm
		public Obj_Effect_Decal_Cleanable_LiquidFuel ( dynamic newLoc = null, bool? amt = null ) : base( (object)(newLoc) ) {
			amt = amt ?? true;

			Obj_Effect_Decal_Cleanable_LiquidFuel other = null;

			this.amount = Lang13.DoubleNullable( amt );

			foreach (dynamic _a in Lang13.Enumerate( newLoc, typeof(Obj_Effect_Decal_Cleanable_LiquidFuel) )) {
				other = _a;
				

				if ( other != this ) {
					other.amount += this.amount ??0;
					Task13.Schedule( 0, (Task13.Closure)(() => {
						other.Spread();
						return;
					}));
					GlobalFuncs.returnToPool( this );
					return;
					//_default; return;
				}
			}
			this.Spread();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: fuel.dm
		public virtual void Spread(  ) {
			dynamic origin = null;
			dynamic d = null;
			Tile target = null;

			
			if ( ( this.amount ??0) < 0.5 ) {
				return;
			}
			origin = GlobalFuncs.get_turf( this );

			if ( !( origin is Tile_Simulated ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				d = _a;
				

				if ( Rand13.Int( 25 ) != 0 ) {
					target = Map13.GetStep( this, Convert.ToInt32( d ) );

					if ( !( target is Tile_Simulated ) ) {
						continue;
					}

					if ( ((Ent_Static)origin).CanPass( null, target, 0, false ) && target.CanPass( null, origin, 0, false ) ) {
						
						if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Effect_Decal_Cleanable_LiquidFuel), target ) ) ) {
							GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_LiquidFuel), target, ( this.amount ??0) * 0.25 );
							this.amount *= 0.75;
						}
					}
				}
			}
			return;
		}

		// Function from file: fuel.dm
		public override void burnFireFuel( double used_fuel_ratio = 0, double used_reactants_ratio = 0 ) {
			this.amount -= ( this.amount ??0) * used_fuel_ratio * used_reactants_ratio * 5;

			if ( ( this.amount ??0) < 0.1 ) {
				GlobalFuncs.returnToPool( this );
			}
			return;
		}

		// Function from file: fuel.dm
		public override double? getFireFuel(  ) {
			return this.amount;
		}

	}

}