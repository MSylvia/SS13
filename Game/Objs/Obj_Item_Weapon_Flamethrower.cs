// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Flamethrower : Obj_Item_Weapon {

		public bool status = false;
		public double throw_amount = 100;
		public bool lit = false;
		public bool operating = false;
		public dynamic weldtool = null;
		public dynamic igniter = null;
		public dynamic ptank = null;
		public bool warned_admins = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "flamethrower_0";
			this.flags = 64;
			this.force = 3;
			this.throwforce = 10;
			this.throw_speed = 1;
			this.throw_range = 5;
			this.materials = new ByTable().Set( "$metal", 500 );
			this.origin_tech = "combat=1;plasmatech=1";
			this.icon = "icons/obj/flamethrower.dmi";
			this.icon_state = "flamethrowerbase";
		}

		public Obj_Item_Weapon_Flamethrower ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: flamethrower.dm
		public override bool hit_reaction( Mob_Living_Carbon owner = null, string attack_text = null, int? final_block_chance = null, dynamic damage = null, int? attack_type = null ) {
			dynamic target_turf = null;

			
			if ( Lang13.Bool( this.ptank ) && Lang13.Bool( damage ) && attack_type == 3 && Rand13.PercentChance( 15 ) ) {
				owner.visible_message( "<span class='danger'>" + attack_text + " hits the fueltank on " + owner + "'s " + this + ", rupturing it! What a shot!</span>" );
				target_turf = GlobalFuncs.get_turf( owner );
				this.ignite_turf( target_turf, 100 );
				GlobalFuncs.qdel( this.ptank );
				return true;
			}
			return false;
		}

		// Function from file: flamethrower.dm
		public void ignite_turf( dynamic target = null, double? release_amount = null ) {
			release_amount = release_amount ?? 0.05;

			GasMixture air_transfer = null;

			air_transfer = ((GasMixture)this.ptank.air_contents).remove_ratio( release_amount );

			if ( Lang13.Bool( air_transfer.gases["plasma"] ) ) {
				air_transfer.gases["plasma"][1] *= 5;
			}
			((Ent_Static)target).assume_air( air_transfer );
			((Tile)target).hotspot_expose( this.ptank.air_contents.temperature * 2 + 380, 500 );
			GlobalVars.SSair.add_to_active( target, false );
			return;
		}

		// Function from file: flamethrower.dm
		public void flame_turf( ByTable turflist = null ) {
			dynamic previousturf = null;
			Tile_Simulated T = null;
			dynamic M = null;

			
			if ( !this.lit || this.operating ) {
				return;
			}
			this.operating = true;
			previousturf = GlobalFuncs.get_turf( this );

			foreach (dynamic _a in Lang13.Enumerate( turflist, typeof(Tile_Simulated) )) {
				T = _a;
				

				if ( !( T.air != null ) ) {
					break;
				}

				if ( T == previousturf ) {
					continue;
				}

				if ( !T.CanAtmosPass( previousturf ) ) {
					break;
				}
				this.ignite_turf( T );
				Task13.Sleep( 1 );
				previousturf = T;
			}
			this.operating = false;

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( this.loc, 1 ) )) {
				M = _b;
				

				if ( Lang13.Bool( M.client ) && M.machine == this ) {
					this.attack_self( M );
				}
			}
			return;
		}

		// Function from file: flamethrower.dm
		public override void CheckParts( Game_Data holder = null ) {
			this.weldtool = Lang13.FindIn( typeof(Obj_Item_Weapon_Weldingtool), this.contents );
			this.igniter = Lang13.FindIn( typeof(Obj_Item_Device_Assembly_Igniter), this.contents );
			this.weldtool.status = 0;
			this.igniter.secured = false;
			this.status = true;
			this.update_icon();
			return;
		}

		// Function from file: flamethrower.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic M = null;

			
			if ( Lang13.Bool( href_list["close"] ) ) {
				Task13.User.unset_machine();
				Interface13.Browse( Task13.User, null, "window=flamethrower" );
				return null;
			}

			if ( Task13.User.stat != 0 || Task13.User.restrained() || Lang13.Bool( Task13.User.lying ) ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["light"] ) ) {
				
				if ( !Lang13.Bool( this.ptank ) ) {
					return null;
				}

				if ( !this.status ) {
					return null;
				}
				this.lit = !this.lit;

				if ( this.lit ) {
					GlobalVars.SSobj.processing.Or( this );

					if ( !this.warned_admins ) {
						GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( Task13.User ) ).str( "<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( Task13.User ).str( "'>?</A> (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( Task13.User ).str( "'>FLW</A>) has lit a flamethrower." ).ToString() );
						this.warned_admins = true;
					}
				}
			}

			if ( Lang13.Bool( href_list["amount"] ) ) {
				this.throw_amount = this.throw_amount + ( String13.ParseNumber( href_list["amount"] ) ??0);
				this.throw_amount = Num13.MaxInt( 50, Num13.MinInt( 5000, ((int)( this.throw_amount )) ) );
			}

			if ( Lang13.Bool( href_list["remove"] ) ) {
				
				if ( !Lang13.Bool( this.ptank ) ) {
					return null;
				}
				Task13.User.put_in_hands( this.ptank );
				this.ptank = null;
				this.lit = false;
				Task13.User.unset_machine();
				Interface13.Browse( Task13.User, null, "window=flamethrower" );
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( this.loc, 1 ) )) {
				M = _a;
				

				if ( Lang13.Bool( M.client ) && M.machine == this ) {
					this.attack_self( M );
				}
			}
			this.update_icon();
			return null;
		}

		// Function from file: flamethrower.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;

			
			if ( Lang13.Bool( user.stat ) || ((Mob)user).restrained() || Lang13.Bool( user.lying ) ) {
				return null;
			}
			((Mob)user).set_machine( this );

			if ( !Lang13.Bool( this.ptank ) ) {
				user.WriteMsg( "<span class='notice'>Attach a plasma tank first!</span>" );
				return null;
			}
			dat = new Txt( "<TT><B>Flamethrower (<A HREF='?src=" ).Ref( this ).str( ";light=1'>" ).item( ( this.lit ? "<font color='red'>Lit</font>" : "Unlit" ) ).str( "</a>)</B><BR>\n Tank Pressure: " ).item( this.ptank.air_contents.return_pressure() ).str( "<BR>\nAmount to throw: <A HREF='?src=" ).Ref( this ).str( ";amount=-100'>-</A> <A HREF='?src=" ).Ref( this ).str( ";amount=-10'>-</A> <A HREF='?src=" ).Ref( this ).str( ";amount=-1'>-</A> " ).item( this.throw_amount ).str( " <A HREF='?src=" ).Ref( this ).str( ";amount=1'>+</A> <A HREF='?src=" ).Ref( this ).str( ";amount=10'>+</A> <A HREF='?src=" ).Ref( this ).str( ";amount=100'>+</A><BR>\n<A HREF='?src=" ).Ref( this ).str( ";remove=1'>Remove plasmatank</A> - <A HREF='?src=" ).Ref( this ).str( ";close=1'>Close</A></TT>" ).ToString();
			Interface13.Browse( user, dat, "window=flamethrower;size=600x300" );
			GlobalFuncs.onclose( user, "flamethrower" );
			return null;
		}

		// Function from file: flamethrower.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic T = null;
			dynamic I = null;

			
			if ( Lang13.Bool( user.stat ) || ((Mob)user).restrained() || Lang13.Bool( user.lying ) ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Wrench && !this.status ) {
				T = GlobalFuncs.get_turf( this );

				if ( Lang13.Bool( this.weldtool ) ) {
					this.weldtool.loc = T;
					this.weldtool = null;
				}

				if ( Lang13.Bool( this.igniter ) ) {
					this.igniter.loc = T;
					this.igniter = null;
				}

				if ( Lang13.Bool( this.ptank ) ) {
					this.ptank.loc = T;
					this.ptank = null;
				}
				new Obj_Item_Stack_Rods( T );
				GlobalFuncs.qdel( this );
				return null;
			}

			if ( A is Obj_Item_Weapon_Screwdriver && Lang13.Bool( this.igniter ) && !this.lit ) {
				this.status = !this.status;
				user.WriteMsg( "<span class='notice'>" + this.igniter + " is now " + ( this.status ? "secured" : "unsecured" ) + "!</span>" );
				this.update_icon();
				return null;
			}

			if ( A is Obj_Item_Device_Assembly_Igniter ) {
				I = A;

				if ( I.secured ) {
					return null;
				}

				if ( Lang13.Bool( this.igniter ) ) {
					return null;
				}

				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				I.loc = this;
				this.igniter = I;
				this.update_icon();
				return null;
			}

			if ( A is Obj_Item_Weapon_Tank_Internals_Plasma ) {
				
				if ( Lang13.Bool( this.ptank ) ) {
					user.WriteMsg( "<span class='notice'>There appears to already be a plasma tank loaded in " + this + "!</span>" );
					return null;
				}

				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				this.ptank = A;
				A.loc = this;
				this.update_icon();
				return null;
			}

			if ( A is Obj_Item_Device_Analyzer && Lang13.Bool( this.ptank ) ) {
				this.atmosanalyzer_scan( this.ptank.air_contents, user );
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: flamethrower.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic target_turf = null;
			ByTable turflist = null;

			
			if ( proximity_flag == true ) {
				return false;
			}

			if ( Lang13.Bool( user ) && ((Mob)user).get_active_hand() == this ) {
				target_turf = GlobalFuncs.get_turf( target );

				if ( Lang13.Bool( target_turf ) ) {
					turflist = GlobalFuncs.getline( user, target_turf );
					GlobalFuncs.add_logs( user, target, "flamethrowered", this, "at " + target.x + "," + target.y + "," + target.z );
					this.flame_turf( turflist );
				}
			}
			return false;
		}

		// Function from file: flamethrower.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( Lang13.Bool( this.igniter ) ) {
				this.overlays.Add( "+igniter" + this.status );
			}

			if ( Lang13.Bool( this.ptank ) ) {
				this.overlays.Add( "+ptank" );
			}

			if ( this.lit ) {
				this.overlays.Add( "+lit" );
				this.item_state = "flamethrower_1";
			} else {
				this.item_state = "flamethrower_0";
			}
			return false;
		}

		// Function from file: flamethrower.dm
		public override int? process( dynamic seconds = null ) {
			Ent_Static location = null;
			Ent_Static M = null;

			
			if ( !this.lit ) {
				GlobalVars.SSobj.processing.Remove( this );
				return null;
			}
			location = this.loc;

			if ( location is Mob ) {
				M = location;

				if ( ((dynamic)M).l_hand == this || ((dynamic)M).r_hand == this ) {
					location = M.loc;
				}
			}

			if ( location is Tile ) {
				((dynamic)location).hotspot_expose( 700, 2 );
			}
			return null;
		}

		// Function from file: flamethrower.dm
		public override dynamic Destroy(  ) {
			
			if ( Lang13.Bool( this.weldtool ) ) {
				GlobalFuncs.qdel( this.weldtool );
			}

			if ( Lang13.Bool( this.igniter ) ) {
				GlobalFuncs.qdel( this.igniter );
			}

			if ( Lang13.Bool( this.ptank ) ) {
				GlobalFuncs.qdel( this.ptank );
			}
			return base.Destroy();
		}

	}

}