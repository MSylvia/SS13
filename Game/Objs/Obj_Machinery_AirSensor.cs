// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_AirSensor : Obj_Machinery {

		public dynamic id_tag = null;
		public int frequency = 1439;
		public bool on = true;
		public int output = 3;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 136;
			this.icon_state = "gsensor1";
		}

		// Function from file: atmo_control.dm
		public Obj_Machinery_AirSensor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( GlobalVars.radio_controller != null ) {
				this.set_frequency( this.frequency );
			}
			return;
		}

		// Function from file: atmo_control.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			this.set_frequency( this.frequency );
			return false;
		}

		// Function from file: atmo_control.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			return;
		}

		// Function from file: atmo_control.dm
		public override dynamic process(  ) {
			Game_Data signal = null;
			GasMixture air_sample = null;
			dynamic total_moles = null;

			
			if ( this.on ) {
				signal = GlobalFuncs.getFromPool( typeof(Signal) );
				((dynamic)signal).transmission_method = 1;
				((dynamic)signal).data["tag"] = this.id_tag;
				((dynamic)signal).data["timestamp"] = Game13.time;
				air_sample = this.return_air();

				if ( ( this.output & 1 ) != 0 ) {
					((dynamic)signal).data["pressure"] = Num13.Round( Convert.ToDouble( air_sample.return_pressure() ), 0.1 );
				}

				if ( ( this.output & 2 ) != 0 ) {
					((dynamic)signal).data["temperature"] = Num13.Round( air_sample.temperature ??0, 0.1 );
				}

				if ( this.output > 4 ) {
					total_moles = air_sample.f_total_moles();

					if ( Convert.ToDouble( total_moles ) > 0 ) {
						
						if ( ( this.output & 4 ) != 0 ) {
							((dynamic)signal).data["oxygen"] = Num13.Round( Convert.ToDouble( air_sample.oxygen * 100 / total_moles ), 0.1 );
						}

						if ( ( this.output & 8 ) != 0 ) {
							((dynamic)signal).data["toxins"] = Num13.Round( Convert.ToDouble( air_sample.toxins * 100 / total_moles ), 0.1 );
						}

						if ( ( this.output & 16 ) != 0 ) {
							((dynamic)signal).data["nitrogen"] = Num13.Round( Convert.ToDouble( air_sample.nitrogen * 100 / total_moles ), 0.1 );
						}

						if ( ( this.output & 32 ) != 0 ) {
							((dynamic)signal).data["carbon_dioxide"] = Num13.Round( Convert.ToDouble( air_sample.carbon_dioxide * 100 / total_moles ), 0.1 );
						}
					} else {
						((dynamic)signal).data["oxygen"] = 0;
						((dynamic)signal).data["toxins"] = 0;
						((dynamic)signal).data["nitrogen"] = 0;
						((dynamic)signal).data["carbon_dioxide"] = 0;
					}
				}
				((dynamic)signal).data["sigtype"] = "status";
				this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			}
			return null;
		}

		// Function from file: atmo_control.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: atmo_control.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			int _default = 0;

			double? bitflag_value = null;

			_default = base.multitool_topic( user, href_list, (object)(O) );

			if ( _default != 0 ) {
				return _default;
			}
			Interface13.Stat( null, href_list.Contains( "toggle_out_flag" ) );

			if ( _default != 0 ) {
				bitflag_value = String13.ParseNumber( href_list["toggle_out_flag"] );

				if ( !GlobalFuncs.test_bitflag( bitflag_value ) && ( bitflag_value ??0) <= 32 ) {
					return 0;
				}

				if ( ( this.output & ((int)( bitflag_value ??0 )) ) != 0 ) {
					this.output &= ~((int)( bitflag_value ??0 ));
				} else {
					this.output |= ((int)( bitflag_value ??0 ));
				}
				return 1;
			}
			return _default;
		}

		// Function from file: atmo_control.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<b>Main</b>\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( Lang13.Initial( this, "frequency" ) ).str( "\">Reset</a>)</li>\n		<li>" ).item( this.format_tag( "ID Tag", "id_tag" ) ).str( "</li>\n		<li>Monitor Pressure: <a href=\"?src=" ).Ref( this ).str( ";toggle_out_flag=1\">" ).item( ( ( this.output & 1 ) != 0 ? "Yes" : "No" ) ).str( "</a>\n		<li>Monitor Temperature: <a href=\"?src=" ).Ref( this ).str( ";toggle_out_flag=2\">" ).item( ( ( this.output & 2 ) != 0 ? "Yes" : "No" ) ).str( "</a>\n		<li>Monitor Oxygen Concentration: <a href=\"?src=" ).Ref( this ).str( ";toggle_out_flag=4\">" ).item( ( ( this.output & 4 ) != 0 ? "Yes" : "No" ) ).str( "</a>\n		<li>Monitor Plasma Concentration: <a href=\"?src=" ).Ref( this ).str( ";toggle_out_flag=8\">" ).item( ( ( this.output & 8 ) != 0 ? "Yes" : "No" ) ).str( "</a>\n		<li>Monitor Nitrogen Concentration: <a href=\"?src=" ).Ref( this ).str( ";toggle_out_flag=16\">" ).item( ( ( this.output & 16 ) != 0 ? "Yes" : "No" ) ).str( "</a>\n		<li>Monitor Carbon Dioxide Concentration: <a href=\"?src=" ).Ref( this ).str( ";toggle_out_flag=32\">" ).item( ( ( this.output & 32 ) != 0 ? "Yes" : "No" ) ).str( "</a>\n	</ul>" ).ToString();
		}

		// Function from file: atmo_control.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = "gsensor" + this.on;
			return null;
		}

	}

}