// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_PdaTerminal : Obj_Machinery_Computer {

		public dynamic pda_device = null;
		public string machine_id = "";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/pda_terminal";
			this.light_color = "#FA9632";
			this.machine_flags = 411;
			this.icon_state = "pdaterm";
		}

		// Function from file: pda_terminal.dm
		public Obj_Machinery_Computer_PdaTerminal ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.machine_id = "" + GlobalFuncs.station_name() + " PDA Terminal #" + GlobalFuncs.multinum_display( GlobalVars.num_pda_terminals, 4 );
			GlobalVars.num_pda_terminals++;

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: pda_terminal.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );
			this.overlays = 0;

			if ( Lang13.Bool( this.pda_device ) ) {
				this.overlays.Add( "pdaterm-full" );

				if ( this.stat == 0 ) {
					this.overlays.Add( "pdaterm-light" );
				}
			}
			return null;
		}

		// Function from file: pda_terminal.dm
		public override bool scan_card( dynamic user = null, dynamic C = null, dynamic appdatum = null ) {
			dynamic D = null;
			string using_account = null;
			double? transaction_amount = null;
			Transaction T = null;

			
			if ( C is Obj_Item_Weapon_Card_Id ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='info'>" ).the( this ).item().str( " detects and scans the following ID: " ).item( C ).str( ".</span>" ).ToString() );

				if ( this.linked_account != null ) {
					D = C.virtual_wallet;
					using_account = "Virtual Wallet";

					if ( !Lang13.Bool( D ) ) {
						((Obj_Item_Weapon_Card_Id)C).update_virtual_wallet();
						D = C.virtual_wallet;
					}
					transaction_amount = ( Lang13.Bool( appdatum ) ? Convert.ToInt32( appdatum.price ) : 100 );

					if ( ( D.money ??0) < ( transaction_amount ??0) ) {
						D = this.linked_db.attempt_account_access( C.associated_account_number, 0, 2, false );
						using_account = "Bank Account";

						if ( !Lang13.Bool( D ) ) {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have that much money on your virtual wallet!</span>" ).ToString() );
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>Unable to access your bank account.</span>" ).ToString() );
							return false;
						} else if ( ( D.security_level ??0) > 0 ) {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have that much money on your virtual wallet!</span>" ).ToString() );
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>Lower your bank account's security settings if you wish to pay directly from it.</span>" ).ToString() );
							return false;
						} else if ( ( D.money ??0) < ( transaction_amount ??0) ) {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>You don't have that much money on your bank account!</span>" ).ToString() );
							return false;
						}
					}
					D.money -= transaction_amount ??0;
					this.linked_account.money += transaction_amount ??0;
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='notice'>Remaining balance (" ).item( using_account ).str( "): " ).item( D.money ).str( "$</span>" ).ToString() );
					T = new Transaction();
					T.target_name = "" + this.linked_account.owner_name + " (via " + this.name + ")";
					T.purpose = "Purchase of " + ( Lang13.Bool( appdatum ) ? "" + appdatum.name : "a new PDA" );
					T.amount = "-" + transaction_amount;
					T.source_terminal = this.machine_id;
					T.date = GlobalVars.current_date_string;
					T.time = GlobalFuncs.worldtime2text();
					D.transaction_log.Add( T );
					T = new Transaction();
					T.target_name = D.owner_name;
					T.purpose = "Purchase of " + ( Lang13.Bool( appdatum ) ? "" + appdatum.name : "a new PDA" );
					T.amount = "" + transaction_amount;
					T.source_terminal = this.machine_id;
					T.date = GlobalVars.current_date_string;
					T.time = GlobalFuncs.worldtime2text();
					this.linked_account.transaction_log.Add( T );
					return true;
				} else {
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>EFTPOS is not connected to an account.</span>" ).ToString() );
					return false;
				}
			}
			return false;
		}

		// Function from file: pda_terminal.dm
		public override bool connect_account( Mob user = null, dynamic W = null, dynamic appdatum = null ) {
			
			if ( W is Obj_Item_Weapon_Card ) {
				
				if ( !( this.linked_db != null ) ) {
					this.reconnect_database();
				}

				if ( this.linked_db != null ) {
					
					if ( this.linked_account != null ) {
						return this.scan_card( user, W, appdatum );
					} else {
						GlobalFuncs.to_chat( user, new Txt().icon( this ).str( "<span class='warning'>Unable to connect to linked account.</span>" ).ToString() );
					}
				} else {
					GlobalFuncs.to_chat( user, new Txt().icon( this ).str( "<span class='warning'>Unable to connect to accounts database.</span>" ).ToString() );
				}
			}
			return false;
		}

		// Function from file: pda_terminal.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic I = null;
			dynamic app_name = null;
			dynamic appdatum = null;
			dynamic app = null;
			dynamic A = null;
			dynamic card = null;
			dynamic card2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}

			dynamic _b = href_list["choice"]; // Was a switch-case, sorry for the mess.
			if ( _b=="pda_device" ) {
				
				if ( Lang13.Bool( this.pda_device ) ) {
					
					if ( Task13.User is Mob_Living_Carbon_Human ) {
						this.pda_device.loc = Task13.User.loc;

						if ( !Lang13.Bool( Task13.User.get_active_hand() ) ) {
							Task13.User.put_in_hands( this.pda_device );
						}
						this.pda_device = null;
					} else {
						this.pda_device.loc = this.loc;
						this.pda_device = null;
					}
				} else {
					I = Task13.User.get_active_hand();

					if ( I is Obj_Item_Device_Pda ) {
						
						if ( Task13.User.drop_item( I, this ) ) {
							this.pda_device = I;
						}
					}
				}
				this.update_icon();
			} else if ( _b=="purchase" ) {
				
				if ( Lang13.Bool( this.pda_device ) ) {
					app_name = href_list["chosen_app"];
					appdatum = null;

					foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(PdaApp) ) )) {
						app = _a;
						
						A = Lang13.Call( app );

						if ( A.name == app_name ) {
							appdatum = A;
							break;
						}
					}

					if ( !Lang13.Bool( appdatum ) ) {
						GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>An error occured while trying to download: \"" ).item( app_name ).str( "\"</span>" ).ToString() );
						Icon13.Flick( "pdaterm-problem", this );
						return null;
					}

					if ( Task13.User is Mob_Living ) {
						card = Task13.User.get_id_card();

						if ( !Lang13.Bool( card ) && Lang13.Bool( this.pda_device ) ) {
							card = this.pda_device.id;
						}

						if ( Lang13.Bool( card ) ) {
							
							if ( this.connect_account( Task13.User, card, appdatum ) ) {
								((PdaApp)appdatum).onInstall( this.pda_device );
								GlobalFuncs.to_chat( Task13.User, new Txt().icon( this.pda_device ).str( "<span class='notice'>Application successfully downloaded!</span>" ).ToString() );
								Icon13.Flick( "pdaterm-purchase", this );
							} else {
								Icon13.Flick( "pdaterm-problem", this );
							}
						} else {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>No ID detected. Cannot proceed with the purchase.</span>" ).ToString() );
							Icon13.Flick( "pdaterm-problem", this );
						}
					}
				}
			} else if ( _b=="new_pda" ) {
				
				if ( Task13.User is Mob_Living ) {
					card2 = Task13.User.get_id_card();

					if ( !Lang13.Bool( card2 ) && Lang13.Bool( this.pda_device ) ) {
						card2 = this.pda_device.id;
					}

					if ( Lang13.Bool( card2 ) ) {
						
						if ( this.connect_account( Task13.User, card2, 0 ) ) {
							GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='notice'>Enjoy your new PDA!</span>" ).ToString() );
							Icon13.Flick( "pdaterm-purchase", this );

							if ( Rand13.PercentChance( 10 ) ) {
								new Obj_Item_Device_Pda_Clear( this.loc );
							} else {
								new Obj_Item_Device_Pda( this.loc );
							}
						} else {
							Icon13.Flick( "pdaterm-problem", this );
						}
					} else {
						GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>No ID detected. Cannot proceed with the purchase.</span>" ).ToString() );
						Icon13.Flick( "pdaterm-problem", this );
					}
				}
			}
			return 1;
		}

		// Function from file: pda_terminal.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;

			((Mob)user).set_machine( this );
			data = new ByTable( 0 );
			data["src"] = new Txt().Ref( this ).ToString();
			data["pda_name"] = ( Lang13.Bool( this.pda_device ) ? this.pda_device.name : "-----" );
			data["pda_owner"] = ( Lang13.Bool( this.pda_device ) && Lang13.Bool( this.pda_device.owner ) ? this.pda_device.owner : "Unknown" );
			data["has_pda_device"] = !( !Lang13.Bool( this.pda_device ) );
			data["pda_apps"] = this.format_apps( this.pda_device );
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "pda_terminal.tmpl", this.name, 800, 700 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

		// Function from file: pda_terminal.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( this.stat != 0 ) {
				
				if ( Lang13.Bool( this.pda_device ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "You remove " ).the( this.pda_device ).item().str( " from " ).the( this ).item().str( "." ).ToString() );
					this.pda_device.loc = GlobalFuncs.get_turf( this );

					if ( !Lang13.Bool( Task13.User.get_active_hand() ) ) {
						Task13.User.put_in_hands( this.pda_device );
					}
					this.pda_device = null;
					this.update_icon();
				} else {
					GlobalFuncs.to_chat( Task13.User, "There is nothing to remove from the console." );
				}
				return null;
			}
			this.ui_interact( a );
			return null;
		}

		// Function from file: pda_terminal.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: pda_terminal.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: pda_terminal.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !( a is Obj_Item_Device_Pda ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}

			if ( !Lang13.Bool( this.pda_device ) ) {
				
				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.pda_device = a;
					this.update_icon();
				}
			}
			GlobalVars.nanomanager.update_uis( this );
			this.attack_hand( b );
			return null;
		}

		// Function from file: pda_terminal.dm
		public string get_display_desc( dynamic app = null ) {
			return "" + app.desc;
		}

		// Function from file: pda_terminal.dm
		public string get_display_name( dynamic app = null ) {
			return "" + app.name + " (" + ( !Lang13.Bool( app.price ) ? "free" : "" + app.price + "$" ) + ")";
		}

		// Function from file: pda_terminal.dm
		public string get_app_name( dynamic app = null ) {
			return "" + app.name;
		}

		// Function from file: pda_terminal.dm
		public ByTable format_apps( dynamic pda_hardware = null ) {
			ByTable formatted = null;
			ByTable notinstalled = null;
			dynamic app = null;
			dynamic app2 = null;
			dynamic appli = null;

			
			if ( !( pda_hardware is Obj_Item_Device_Pda ) ) {
				return new ByTable();
			}
			formatted = new ByTable();
			notinstalled = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(PdaApp) ) - typeof(PdaApp) )) {
				app = _a;
				

				if ( !Lang13.Bool( Lang13.FindIn( app, pda_hardware.applications ) ) ) {
					notinstalled.Add( app );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( notinstalled )) {
				app2 = _b;
				
				appli = Lang13.Call( app2 );
				formatted.Add( new ByTable(new object [] { new ByTable().Set( "app", this.get_app_name( appli ) ).Set( "app_name", this.get_display_name( appli ) ).Set( "app_desc", this.get_display_desc( appli ) ) }) );
			}
			return formatted;
		}

	}

}