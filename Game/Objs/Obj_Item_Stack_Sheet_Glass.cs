// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Stack_Sheet_Glass : Obj_Item_Stack_Sheet {

		public Type created_window = typeof(Obj_Structure_Window);
		public Type full_window = typeof(Obj_Structure_Window_Full);
		public Type windoor = null;
		public bool reinforced = false;
		public dynamic rglass = 0;
		public double glass_quality = 0.5;
		public int shealth = 5;
		public string sname = "glass";
		public Type shard_type = typeof(Obj_Item_Weapon_Shard);

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_type = 2;
			this.melt_temperature = 1773.1500244140625;
		}

		public Obj_Item_Stack_Sheet_Glass ( dynamic newloc = null, int? amount = null ) : base( (object)(newloc), amount ) {
			
		}

		// Function from file: glass.dm
		public bool construct_window( dynamic user = null ) {
			string title = null;
			ByTable directions = null;
			int i = 0;
			Obj_Structure_Window win = null;
			dynamic dir_to_set = null;
			dynamic direction = null;
			bool found = false;
			Obj_Structure_Window WT = null;
			dynamic W = null;
			dynamic W2 = null;
			dynamic WD = null;
			ByTable directions2 = null;
			int i2 = 0;
			Obj_Structure_Window win2 = null;
			dynamic dir_to_set2 = null;
			dynamic direction2 = null;
			bool found2 = false;
			Obj_Structure_Window WT2 = null;
			dynamic W3 = null;
			dynamic W4 = null;

			
			if ( !Lang13.Bool( user ) || !( this != null ) ) {
				return false;
			}

			if ( !( user.loc is Tile ) ) {
				return false;
			}

			if ( !Lang13.Bool( ((Mob)user).IsAdvancedToolUser() ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return false;
			}
			title = "" + this.name + " Sheets";
			title += new Txt( " (" ).item( this.amount ).str( " sheet" ).s().str( " left)" ).ToString();

			if ( this.windoor != null ) {
				
				dynamic _e = Interface13.Input( title, "Would you like full tile glass a one direction glass pane or a windoor?", null, null, new ByTable(new object [] { "One Direction", "Full Window", "Windoor", "Cancel" }), InputType.Any ); // Was a switch-case, sorry for the mess.
				if ( _e=="One Direction" ) {
					
					if ( !( this != null ) ) {
						return true;
					}

					if ( this.loc != user ) {
						return true;
					}
					directions = new ByTable( GlobalVars.cardinal );
					i = 0;

					foreach (dynamic _a in Lang13.Enumerate( user.loc, typeof(Obj_Structure_Window) )) {
						win = _a;
						
						i++;

						if ( i >= 4 ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>There are too many windows in this location.</span>" );
							return true;
						}
						directions.Remove( win.dir );

						if ( win.is_fulltile() ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>Can't let you do that.</span>" );
							return true;
						}
					}
					dir_to_set = 2;

					foreach (dynamic _c in Lang13.Enumerate( new ByTable(new object [] { user.dir, Num13.Rotate( user.dir, 90 ), Num13.Rotate( user.dir, 180 ), Num13.Rotate( user.dir, 270 ) }) )) {
						direction = _c;
						
						found = false;

						foreach (dynamic _b in Lang13.Enumerate( user.loc, typeof(Obj_Structure_Window) )) {
							WT = _b;
							

							if ( WT.dir == direction ) {
								found = true;
							}
						}

						if ( !found ) {
							dir_to_set = direction;
							break;
						}
					}
					W = Lang13.Call( this.created_window, user.loc, 0 );
					W.d_state = 0;
					W.dir = dir_to_set;
					W.ini_dir = W.dir;
					W.anchored = 0;
					this.use( 1 );
				} else if ( _e=="Full Window" ) {
					
					if ( !( this != null ) ) {
						return true;
					}

					if ( this.loc != user ) {
						return true;
					}

					if ( ( this.amount ??0) < 2 ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>You need more glass to do that.</span>" );
						return true;
					}

					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Window_Full), user.loc ) ) ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>There is a window in the way.</span>" );
						return true;
					}
					W2 = Lang13.Call( this.full_window, user.loc, 0 );
					W2.d_state = 0;
					W2.dir = GlobalVars.SOUTHWEST;
					W2.ini_dir = GlobalVars.SOUTHWEST;
					W2.anchored = 0;
					this.use( 2 );
				} else if ( _e=="Windoor" ) {
					
					if ( !( this != null ) || this.loc != user ) {
						return true;
					}

					if ( user.loc is Tile && Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_WindoorAssembly), user.loc ) ) ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>There is already a windoor assembly in that location.</span>" );
						return true;
					}

					if ( user.loc is Tile && Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Door_Window), user.loc ) ) ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>There is already a windoor in that location.</span>" );
						return true;
					}

					if ( ( this.amount ??0) < 5 ) {
						GlobalFuncs.to_chat( user, "<span class='warning'>You need more glass to do that.</span>" );
						return true;
					}
					WD = Lang13.Call( this.windoor, user.loc, 0 );
					WD.state = "01";
					WD.anchored = 0;
					WD.dir = user.dir;
					WD.ini_dir = WD.dir;
					this.use( 5 );

					dynamic _d = user.dir; // Was a switch-case, sorry for the mess.
					if ( _d==2 ) {
						WD.dir = GlobalVars.SOUTH;
						WD.ini_dir = GlobalVars.SOUTH;
					} else if ( _d==4 ) {
						WD.dir = GlobalVars.EAST;
						WD.ini_dir = GlobalVars.EAST;
					} else if ( _d==8 ) {
						WD.dir = GlobalVars.WEST;
						WD.ini_dir = GlobalVars.WEST;
					} else {
						WD.dir = GlobalVars.NORTH;
						WD.ini_dir = GlobalVars.NORTH;
					}
				} else {
					return true;
				}
			} else {
				
				switch ((string)( Interface13.Alert( title, "Would you like full tile glass or one direction?", "One Direction", "Full Window", "Cancel" ) )) {
					case "One Direction":
						
						if ( !( this != null ) ) {
							return true;
						}

						if ( this.loc != user ) {
							return true;
						}
						directions2 = new ByTable( GlobalVars.cardinal );
						i2 = 0;

						foreach (dynamic _f in Lang13.Enumerate( user.loc, typeof(Obj_Structure_Window) )) {
							win2 = _f;
							
							i2++;

							if ( i2 >= 4 ) {
								GlobalFuncs.to_chat( user, "<span class='warning'>There are too many windows in this location.</span>" );
								return true;
							}
							directions2.Remove( win2.dir );

							if ( win2.is_fulltile() ) {
								GlobalFuncs.to_chat( user, "<span class='warning'>Can't let you do that.</span>" );
								return true;
							}
						}
						dir_to_set2 = 2;

						foreach (dynamic _h in Lang13.Enumerate( new ByTable(new object [] { user.dir, Num13.Rotate( user.dir, 90 ), Num13.Rotate( user.dir, 180 ), Num13.Rotate( user.dir, 270 ) }) )) {
							direction2 = _h;
							
							found2 = false;

							foreach (dynamic _g in Lang13.Enumerate( user.loc, typeof(Obj_Structure_Window) )) {
								WT2 = _g;
								

								if ( WT2.dir == direction2 ) {
									found2 = true;
								}
							}

							if ( !found2 ) {
								dir_to_set2 = direction2;
								break;
							}
						}
						W3 = Lang13.Call( this.created_window, user.loc, 0 );
						W3.d_state = 0;
						W3.dir = dir_to_set2;
						W3.ini_dir = W3.dir;
						W3.anchored = 0;
						this.use( 1 );
						break;
					case "Full Window":
						
						if ( !( this != null ) ) {
							return true;
						}

						if ( this.loc != user ) {
							return true;
						}

						if ( ( this.amount ??0) < 2 ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>You need more glass to do that.</span>" );
							return true;
						}

						if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Structure_Window_Full), user.loc ) ) ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>There is a window in the way.</span>" );
							return true;
						}
						W4 = Lang13.Call( this.full_window, user.loc, 0 );
						W4.d_state = 0;
						W4.dir = GlobalVars.SOUTHWEST;
						W4.ini_dir = GlobalVars.SOUTHWEST;
						W4.anchored = 0;
						this.use( 2 );
						break;
				}
			}
			return false;
		}

		// Function from file: glass.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic V = null;
			dynamic RG = null;
			Obj_Item_Stack_Sheet_Glass G = null;
			bool replace = false;

			
			if ( a is Obj_Item_Weapon_Solder ) {
				this.use( 1 );
				new Obj_Item_Weapon_Circuitboard_Blank( b.loc );
				GlobalFuncs.to_chat( b, "<span class='notice'>You fashion a blank circuitboard out of the glass.</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 35, 1 );
			}

			if ( a is Obj_Item_Stack_Rods && !this.reinforced ) {
				V = a;
				RG = Lang13.Call( this.rglass, b.loc );
				((Ent_Static)RG).add_fingerprint( b );
				((Obj_Item_Stack)RG).add_to_stacks( b );
				((Obj_Item_Stack)V).use( 1 );
				G = this;
				Task13.Source = null;
				replace = ((Mob)b).get_inactive_hand() == G;
				G.use( 1 );

				if ( !( G != null ) && !Lang13.Bool( RG ) && replace ) {
					
					if ( b is Mob_Living_Silicon_Robot_Mommi ) {
						RG.loc = GlobalFuncs.get_turf( b );
					} else {
						((Mob)b).put_in_hands( RG );
					}
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: glass.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.construct_window( user );
			return null;
		}

	}

}