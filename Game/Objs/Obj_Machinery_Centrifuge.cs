// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Centrifuge : Obj_Machinery {

		public string base_state = "centrifuge";
		public dynamic curing = null;
		public dynamic isolating = null;
		public dynamic sample = null;
		public dynamic virus2 = null;
		public dynamic general_process_time = 40;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 10;
			this.active_power_usage = 500;
			this.machine_flags = 6;
			this.icon = "icons/obj/virology.dmi";
			this.icon_state = "centrifuge";
		}

		// Function from file: centrifuge.dm
		public Obj_Machinery_Centrifuge ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { new Obj_Item_Weapon_Circuitboard_Centrifuge(), new Obj_Item_Weapon_StockParts_Manipulator(), new Obj_Item_Weapon_StockParts_Manipulator() });
			this.RefreshParts();
			return;
		}

		// Function from file: centrifuge.dm
		public void isolate(  ) {
			Obj_Item_Weapon_Virusdish dish = null;

			dish = new Obj_Item_Weapon_Virusdish( this.loc );
			dish.virus2 = this.virus2;
			this.alert_noise( "ping" );
			return;
		}

		// Function from file: centrifuge.dm
		public void cure(  ) {
			dynamic B = null;
			ByTable data = null;
			bool amt = false;

			B = Lang13.FindIn( typeof(Reagent_Blood), this.sample.reagents.reagent_list );

			if ( !Lang13.Bool( B ) ) {
				return;
			}
			data = new ByTable().Set( "antibodies", B.data["antibodies"] );
			amt = ((Reagents)this.sample.reagents).get_reagent_amount( "blood" );
			((Reagents)this.sample.reagents).remove_reagent( "blood", amt );
			((Reagents)this.sample.reagents).add_reagent( "antibodies", amt, data );
			this.alert_noise( "ping" );
			return;
		}

		// Function from file: centrifuge.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic delay = null;
			dynamic B = null;
			dynamic B2 = null;
			ByTable virus = null;
			dynamic choice = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Task13.User != null ) {
				Task13.User.set_machine( this );
			}

			dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
			if ( _a=="antibody" ) {
				delay = this.general_process_time;
				B = Lang13.FindIn( typeof(Reagent_Blood), this.sample.reagents.reagent_list );

				if ( !Lang13.Bool( B ) ) {
					this.say( "No antibody carrier detected." );
				} else if ( ((Reagents)this.sample.reagents).has_reagent( "toxins" ) ) {
					this.say( "Pathogen purging speed above nominal." );
					delay *= 0.5;
				} else {
					this.curing = delay;
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/juicer.ogg", 50, 1 );
					this.update_icon();
				}
			} else if ( _a=="isolate" ) {
				B2 = Lang13.FindIn( typeof(Reagent_Blood), this.sample.reagents.reagent_list );

				if ( Lang13.Bool( B2 ) ) {
					virus = GlobalFuncs.virus_copylist( B2.data["virus2"] );
					choice = href_list["isolate"];

					if ( virus.Contains( choice ) ) {
						this.virus2 = virus[choice];
						this.isolating = this.general_process_time * 2;
						this.update_icon();
					} else {
						this.say( "No such pathogen detected." );
					}
				}
			} else if ( _a=="sample" ) {
				
				if ( Lang13.Bool( this.sample ) ) {
					((Ent_Dynamic)this.sample).forceMove( this.loc );
					this.sample = null;
				}
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			this.attack_hand( Task13.User );
			return null;
		}

		// Function from file: centrifuge.dm
		public override dynamic process(  ) {
			base.process();

			if ( ( this.stat & 3 ) != 0 ) {
				this.update_icon();
				return null;
			}

			if ( Lang13.Bool( this.curing ) ) {
				this.use_power = 2;
				this.curing--;

				if ( !Lang13.Bool( this.curing ) ) {
					
					if ( Lang13.Bool( this.sample ) ) {
						this.cure();
					}
				}
			}

			if ( Lang13.Bool( this.isolating ) ) {
				this.use_power = 2;
				this.isolating--;

				if ( !Lang13.Bool( this.isolating ) ) {
					
					if ( Lang13.Bool( this.sample ) ) {
						this.isolate();
					}
				}
			} else {
				this.use_power = 1;
			}
			this.update_icon();
			this.updateUsrDialog();
			return null;
		}

		// Function from file: centrifuge.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic dat = null;
			dynamic B = null;
			dynamic virus = null;
			dynamic ID = null;
			Disease2_Disease V = null;
			Browser popup = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = new ByTable();

			if ( Lang13.Bool( this.curing ) ) {
				dat += "Antibody isolation in progress";
			} else if ( Lang13.Bool( this.isolating ) ) {
				dat += "Pathogen isolation in progress";
			} else {
				dat += "<BR>Blood sample:";
				dat += "<br><table cellpadding='10'><tr><td>";

				if ( Lang13.Bool( this.sample ) ) {
					B = Lang13.FindIn( typeof(Reagent_Blood), this.sample.reagents.reagent_list );

					if ( Lang13.Bool( B ) ) {
						dat += "Sample inserted.";

						if ( Lang13.Bool( B.data["antibodies"] ) ) {
							dat += "</td></tr><tr><td>";
							dat += "Antibodies: " + GlobalFuncs.antigens2string( Lang13.DoubleNullable( B.data["antibodies"] ) );
							dat += new Txt( "</td><td><A href='?src=" ).Ref( this ).str( ";action=antibody'>Isolate</a>" ).ToString();
						}
						virus = B.data["virus2"];

						foreach (dynamic _a in Lang13.Enumerate( virus )) {
							ID = _a;
							
							V = virus[ID];
							dat += " </td></tr><tr><td> pathogen " + V.name();
							dat += new Txt( "</td><td><A href='?src=" ).Ref( this ).str( ";action=isolate;isolate=" ).item( V.uniqueID ).str( "'>Isolate</a>" ).ToString();
						}
					} else {
						dat += "Please check container contents.";
					}
					dat += new Txt( "</td></tr><tr><td><A href='?src=" ).Ref( this ).str( ";action=sample'>Eject container</a>" ).ToString();
				} else {
					dat += "Please insert a container.";
				}
				dat += "</td></tr></table><br>";
				dat += "<hr>";
			}
			dat = GlobalFuncs.list2text( dat );
			popup = new Browser( a, "iso_centrifuge", "Isolation Centrifuge", 400, 300, this );
			popup.set_content( dat );
			popup.open();
			GlobalFuncs.onclose( a, "iso_centrifuge" );
			return null;
		}

		// Function from file: centrifuge.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "" + this.base_state + "b";
				this.set_light( 0 );
			} else if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "" + this.base_state + "0";
				this.set_light( 0 );
			} else if ( Lang13.Bool( this.isolating ) || Lang13.Bool( this.curing ) ) {
				this.set_light( 2, 2, "#7DE1E1" );
				this.icon_state = "" + this.base_state + "_moving";
			} else {
				this.icon_state = "" + this.base_state;
				this.set_light( 0 );
			}
			return null;
		}

		// Function from file: centrifuge.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic C = null;

			
			if ( !( a is Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Vial ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			C = b;

			if ( !Lang13.Bool( this.sample ) ) {
				
				if ( !Lang13.Bool( C.drop_item( a, this ) ) ) {
					return 1;
				}
				this.sample = a;
			}
			this.attack_hand( b );
			return null;
		}

		// Function from file: centrifuge.dm
		public override dynamic RefreshParts(  ) {
			int manipcount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			manipcount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_Manipulator ) {
					manipcount += SP.rating;
				}
			}
			this.general_process_time = Lang13.Initial( this, "general_process_time" ) / manipcount;
			return null;
		}

	}

}