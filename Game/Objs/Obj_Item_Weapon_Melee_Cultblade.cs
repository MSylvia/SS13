// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Melee_Cultblade : Obj_Item_Weapon_Melee {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "cultblade";
			this.w_class = 4;
			this.force = 30;
			this.throwforce = 10;
			this.sharpness = 1.35;
			this.attack_verb = new ByTable(new object [] { "attacked", "slashed", "stabbed", "sliced", "torn", "ripped", "diced", "cut" });
			this.icon_state = "cultblade";
		}

		public Obj_Item_Weapon_Melee_Cultblade ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: cult_items.dm
		public override bool pickup( Mob user = null ) {
			
			if ( !GlobalFuncs.iscultist( user ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>An overwhelming feeling of dread comes over you as you pick up the cultist's sword. It would be wise to be rid of this blade quickly.</span>" );
				user.Dizzy( 120 );
			}
			return false;
		}

		// Function from file: cult_items.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			string organ = null;
			dynamic affecting = null;

			
			if ( GlobalFuncs.iscultist( user ) ) {
				GlobalFuncs.playsound( this.loc, "sound/weapons/bladeslice.ogg", 50, 1, -1 );
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			} else {
				((Mob)user).Paralyse( 5 );
				GlobalFuncs.to_chat( user, "<span class='warning'>An unexplicable force powerfully repels the sword from " + M + "!</span>" );
				organ = ( user.hand == true ? "l_" : "r_" ) + "arm";
				affecting = ((Mob_Living_Carbon_Human)user).get_organ( organ );

				if ( Lang13.Bool( affecting.take_damage( Rand13.Int( Convert.ToInt32( this.force / 2 ), Convert.ToInt32( this.force ) ) ) ) ) {
					((Mob_Living)user).UpdateDamageIcon();
				}
			}
			return null;
		}

		// Function from file: cult_items.dm
		public override dynamic cultify(  ) {
			return null;
		}

	}

}