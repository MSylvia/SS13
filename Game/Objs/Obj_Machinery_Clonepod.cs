// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Clonepod : Obj_Machinery {

		public double heal_level = 90;
		public bool locked = false;
		public Obj connected = null;
		public bool mess = false;
		public bool attempting = false;
		public bool eject_wait = false;
		public double speed_coeff = 0;
		public double efficiency = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.req_access = new ByTable(new object [] { 9 });
			this.icon = "icons/obj/cloning.dmi";
			this.icon_state = "pod_0";
		}

		// Function from file: cloning.dm
		public Obj_Machinery_Clonepod ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Clonepod( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ScanningModule( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ScanningModule( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			this.RefreshParts();
			return;
		}

		// Function from file: cloning.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			base.ex_act( severity, (object)(target) );

			if ( !Lang13.Bool( this.gc_destroyed ) ) {
				this.go_out();
			}
			return false;
		}

		// Function from file: cloning.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( Rand13.PercentChance( ((int)( 100 / ( severity * this.efficiency ) )) ) ) {
				this.malfunction();
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: cloning.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			
			if ( user.stat != 0 ) {
				return false;
			}
			this.go_out();
			return false;
		}

		// Function from file: cloning.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( this.occupant == null ) {
				return false;
			}
			user.WriteMsg( "<span class='notice'>You force an emergency ejection.</span>" );
			this.locked = false;
			this.go_out();
			return false;
		}

		// Function from file: cloning.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( !( Lang13.Bool( this.occupant ) || this.mess || this.locked ) ) {
				
				if ( this.default_deconstruction_screwdriver( user, "" + this.icon_state + "_maintenance", "" + Lang13.Initial( this, "icon_state" ), A ) ) {
					return null;
				}
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}
			this.default_deconstruction_crowbar( A );

			if ( A is Obj_Item_Weapon_Card_Id || A is Obj_Item_Device_Pda ) {
				
				if ( !this.check_access( A ) ) {
					user.WriteMsg( "<span class='danger'>Access Denied.</span>" );
					return null;
				}

				if ( !this.locked || this.occupant == null ) {
					return null;
				}

				if ( Convert.ToDouble( this.occupant.health ) < -20 && Convert.ToInt32( this.occupant.stat ) != 2 ) {
					user.WriteMsg( "<span class='danger'>Access Refused.</span>" );
					return null;
				} else {
					this.locked = false;
					user.WriteMsg( "System unlocked." );
				}
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: cloning.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( !this.is_operational() ) {
				
				if ( Lang13.Bool( this.occupant ) ) {
					this.locked = false;
					this.go_out();
				}
				return null;
			}

			if ( Lang13.Bool( this.occupant ) && this.occupant.loc == this ) {
				
				if ( Convert.ToInt32( this.occupant.stat ) == 2 || Lang13.Bool( this.occupant.suiciding ) || !Lang13.Bool( this.occupant.key ) ) {
					this.locked = false;
					this.go_out();
					this.connected_message( "Clone Rejected: Deceased." );
					return null;
				} else if ( this.occupant.cloneloss > 100 - this.heal_level ) {
					((Mob)this.occupant).Paralyse( 4 );
					((Mob_Living)this.occupant).adjustCloneLoss( -( this.speed_coeff / 2 ) );
					((Mob_Living)this.occupant).adjustBrainLoss( -( this.speed_coeff / 2 ) );

					if ( ( ((Reagents)this.occupant.reagents).get_reagent_amount( "salbutamol" ) ?1:0) < 30 ) {
						this.occupant.reagents.add_reagent( "salbutamol", 60 );
					}
					this.f_use_power( 7500 );
					return null;
				} else if ( this.occupant.cloneloss <= 100 - this.heal_level && !this.eject_wait ) {
					this.connected_message( "Cloning Process Complete." );
					this.locked = false;
					this.go_out();
					return null;
				}
			} else if ( !Lang13.Bool( this.occupant ) || this.occupant.loc != this ) {
				this.occupant = null;

				if ( this.locked ) {
					this.locked = false;
				}

				if ( !this.mess && !Lang13.Bool( this.panel_open ) ) {
					this.icon_state = "pod_0";
				}
				this.f_use_power( 200 );
				return null;
			}
			return null;
		}

		// Function from file: cloning.dm
		public void malfunction(  ) {
			
			if ( Lang13.Bool( this.occupant ) ) {
				this.connected_message( "Critical Error!" );
				this.mess = true;
				this.icon_state = "pod_g";
				((Mob)this.occupant).ghostize();
				Task13.Schedule( 5, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this.occupant );
					return;
				}));
			}
			return;
		}

		// Function from file: cloning.dm
		public void go_out(  ) {
			dynamic T = null;

			
			if ( this.locked ) {
				return;
			}

			if ( this.mess ) {
				this.mess = false;
				GlobalFuncs.gibs( this.loc );
				this.icon_state = "pod_0";
				return;
			}

			if ( !Lang13.Bool( this.occupant ) ) {
				return;
			}
			T = GlobalFuncs.get_turf( this );
			((Ent_Dynamic)this.occupant).forceMove( T );
			this.icon_state = "pod_0";
			this.eject_wait = false;
			((Mob)this.occupant).domutcheck();
			this.occupant = null;
			return;
		}

		// Function from file: cloning.dm
		public bool connected_message( string message = null ) {
			
			if ( this.connected == null || !( this.connected is Obj_Machinery_Computer_Cloning ) ) {
				return false;
			}

			if ( !Lang13.Bool( message ) ) {
				return false;
			}
			((dynamic)this.connected).temp = message;
			this.connected.updateUsrDialog();
			return true;
		}

		// Function from file: cloning.dm
		public bool growclone( string ckey = null, string clonename = null, dynamic ui = null, dynamic se = null, dynamic mindref = null, Type mrace = null, ByTable features = null, dynamic factions = null ) {
			dynamic clonemind = null;
			dynamic M = null;
			dynamic G = null;
			dynamic H = null;
			dynamic A = null;
			dynamic M2 = null;

			
			if ( Lang13.Bool( this.panel_open ) ) {
				return false;
			}

			if ( this.mess || this.attempting ) {
				return false;
			}
			clonemind = Lang13.FindObj( mindref );

			if ( !( clonemind is Mind ) ) {
				return false;
			}

			if ( Lang13.Bool( clonemind.current ) && Convert.ToInt32( clonemind.current.stat ) != 2 ) {
				return false;
			}

			if ( Lang13.Bool( clonemind.active ) ) {
				
				if ( String13.CKey( clonemind.key ) != ckey ) {
					return false;
				}
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.player_list )) {
					M = _a;
					

					if ( M.ckey == ckey ) {
						
						if ( M is Mob_Dead_Observer ) {
							G = M;

							if ( G.can_reenter_corpse == true ) {
								break;
							}
						}
						return false;
					}
				}
			}
			this.attempting = true;
			this.locked = true;
			this.eject_wait = true;
			Task13.Schedule( 30, (Task13.Closure)(() => {
				this.eject_wait = false;
				return;
			}));
			H = new Mob_Living_Carbon_Human( this );

			if ( this.efficiency > 2 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.bad_se_blocks )) {
					A = _b;
					
					GlobalFuncs.setblock( H.dna.struc_enzymes, A, GlobalFuncs.construct_block( 0, 2 ) );
				}
			}

			if ( this.efficiency > 5 && Rand13.PercentChance( 20 ) ) {
				GlobalFuncs.randmutg( H );
			}

			if ( this.efficiency < 3 && Rand13.PercentChance( 50 ) ) {
				M2 = GlobalFuncs.randmutb( H );

				if ( M2 is Mob ) {
					H = M2;
				}
			}
			H.silent = 20;
			this.occupant = H;

			if ( !Lang13.Bool( clonename ) ) {
				clonename = "clone (" + Rand13.Int( 0, 999 ) + ")";
			}
			H.real_name = clonename;
			this.icon_state = "pod_1";
			((Mob_Living)H).adjustCloneLoss( 190 );
			((Mob_Living)H).adjustBrainLoss( 190 );
			((Mob)H).Paralyse( 4 );
			((Mind)clonemind).transfer_to( H );
			H.ckey = ckey;
			H.WriteMsg( "<span class='notice'><b>Consciousness slowly creeps over you as your body regenerates.</b><br><i>So this is what cloning feels like?</i></span>" );
			((Mob_Living_Carbon_Human)H).hardset_dna( ui, se, H.real_name, null, mrace, features );

			if ( Lang13.Bool( H ) ) {
				H.faction |= factions;
				((Mob_Living_Carbon_Human)H).set_cloned_appearance();
				H.suiciding = 0;
			}
			this.attempting = false;
			return true;
		}

		// Function from file: cloning.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.examine( user );
		}

		// Function from file: cloning.dm
		public override double examine( dynamic user = null ) {
			double completion = 0;

			base.examine( (object)(user) );

			if ( this.occupant == null || !this.is_operational() ) {
				return 0;
			}

			if ( !( this.occupant == null ) && Convert.ToInt32( this.occupant.stat ) != 2 ) {
				completion = Convert.ToDouble( ( this.occupant.health + 100 ) / ( this.heal_level + 100 ) * 100 );
				user.WriteMsg( "Current clone cycle is " + Num13.Floor( completion ) + "% complete." );
			}
			return 0;
		}

		// Function from file: cloning.dm
		public override void RefreshParts(  ) {
			Obj_Item_Weapon_StockParts_ScanningModule S = null;
			Obj_Item_Weapon_StockParts_Manipulator P = null;

			this.speed_coeff = 0;
			this.efficiency = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_ScanningModule) )) {
				S = _a;
				
				this.efficiency += Convert.ToDouble( S.rating );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				P = _b;
				
				this.speed_coeff += Convert.ToDouble( P.rating );
			}
			this.heal_level = this.efficiency * 15 + 10;

			if ( this.heal_level > 100 ) {
				this.heal_level = 100;
			}
			return;
		}

		// Function from file: cloning.dm
		[Verb]
		[VerbInfo( name: "Eject Cloner", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void eject(  ) {
			
			if ( !( Task13.User != null ) ) {
				return;
			}

			if ( Task13.User.stat != 0 || !Task13.User.canmove || Task13.User.restrained() ) {
				return;
			}
			this.go_out();
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}