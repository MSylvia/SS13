// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_TransitTube_Station : Obj_Structure_TransitTube {

		public bool pod_moving = false;
		public int automatic_launch_time = 100;
		public int OPEN_DURATION = 6;
		public int CLOSE_DURATION = 6;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.enter_delay = 3;
			this.icon = "icons/obj/pipes/transit_tube_station.dmi";
			this.icon_state = "closed";
		}

		// Function from file: transit_tubes.dm
		public Obj_Structure_TransitTube_Station ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: transit_tubes.dm
		public override void init_dirs(  ) {
			this.tube_dirs = new ByTable(new object [] { Num13.Rotate( this.dir, 90 ), Num13.Rotate( this.dir, -90 ) });
			return;
		}

		// Function from file: transit_tubes.dm
		public override void pod_stopped( Obj_Structure_TransitTubePod pod = null, int from_dir = 0 ) {
			int i = 0;

			this.pod_moving = true;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.open_animation();
				Task13.Sleep( 8 );
				this.pod_moving = false;
				pod.mix_air();

				if ( this.automatic_launch_time != 0 ) {
					i = 0;

					while (i < this.automatic_launch_time) {
						Task13.Sleep( GlobalVars.wait_step );
						i += GlobalVars.wait_step;

						if ( this.pod_moving || this.icon_state != "open" ) {
							return;
						}
					}
					this.launch_pod();
				}
				return;
			}));
			return;
		}

		// Function from file: transit_tubes.dm
		public override bool should_stop_pod( Obj_Structure_TransitTubePod pod = null, dynamic from_dir = null ) {
			return true;
		}

		// Function from file: transit_tubes.dm
		public void launch_pod(  ) {
			Obj_Structure_TransitTubePod pod = null;
			Tile next_loc = null;
			Obj_Structure_TransitTube nexttube = null;
			Obj_Structure_TransitTube tube = null;

			
			foreach (dynamic _b in Lang13.Enumerate( this.loc, typeof(Obj_Structure_TransitTubePod) )) {
				pod = _b;
				

				if ( this.directions().Contains( !pod.moving && pod.dir != 0 ) ) {
					Task13.Schedule( 5, (Task13.Closure)(() => {
						this.pod_moving = true;
						this.close_animation();
						Task13.Sleep( 8 );
						next_loc = Map13.GetStep( this.loc, pod.dir );
						nexttube = null;

						foreach (dynamic _a in Lang13.Enumerate( next_loc, typeof(Obj_Structure_TransitTube) )) {
							tube = _a;
							

							if ( tube.has_entrance( pod.dir ) ) {
								nexttube = tube;
								break;
							}
						}

						if ( !( nexttube != null ) ) {
							pod.dir = Num13.Rotate( pod.dir, 180 );
						}

						if ( this.icon_state == "closed" && pod != null ) {
							pod.follow_tube();
						}
						this.pod_moving = false;
						return;
					}));
					return;
				}
			}
			return;
		}

		// Function from file: transit_tubes.dm
		public void close_animation(  ) {
			
			if ( this.icon_state == "open" ) {
				this.icon_state = "closing";
				Task13.Schedule( GlobalVars.CLOSE_DURATION, (Task13.Closure)(() => {
					
					if ( this.icon_state == "closing" ) {
						this.icon_state = "closed";
					}
					return;
				}));
			}
			return;
		}

		// Function from file: transit_tubes.dm
		public void open_animation(  ) {
			
			if ( this.icon_state == "closed" ) {
				this.icon_state = "opening";
				Task13.Schedule( GlobalVars.OPEN_DURATION, (Task13.Closure)(() => {
					
					if ( this.icon_state == "opening" ) {
						this.icon_state = "open";
					}
					return;
				}));
			}
			return;
		}

		// Function from file: transit_tubes.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Structure_TransitTubePod pod = null;

			
			if ( !this.pod_moving ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_TransitTubePod) )) {
					pod = _a;
					

					if ( this.directions().Contains( !pod.moving && pod.dir != 0 ) ) {
						
						if ( this.icon_state == "closed" ) {
							this.open_animation();
						} else if ( this.icon_state == "open" ) {
							this.close_animation();
						}
					}
				}
			}
			return null;
		}

		// Function from file: transit_tubes.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			Obj_Structure_TransitTubePod pod = null;

			
			if ( !this.pod_moving && this.icon_state == "open" && AM is Mob ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_TransitTubePod) )) {
					pod = _a;
					

					if ( this.directions().Contains( !pod.moving && pod.dir != 0 ) ) {
						AM.loc = pod;
						return false;
					}
				}
			}
			return false;
		}

	}

}