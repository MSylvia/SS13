// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Storage_Secure_Briefcase : Obj_Item_Weapon_Storage_Secure {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "sec-case";
			this.force = 8;
			this.hitsound = "swing_hit";
			this.throw_range = 4;
			this.w_class = 4;
			this.max_w_class = 3;
			this.max_combined_w_class = 21;
			this.attack_verb = new ByTable(new object [] { "bashed", "battered", "bludgeoned", "thrashed", "whacked" });
			this.icon_state = "secure";
		}

		// Function from file: secure.dm
		public Obj_Item_Weapon_Storage_Secure_Briefcase ( dynamic loc = null ) : base( (object)(loc) ) {
			new Obj_Item_Weapon_Paper( this );
			new Obj_Item_Weapon_Pen( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: secure.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic M = null;

			
			if ( this.loc == a && this.locked ) {
				Task13.User.WriteMsg( "<span class='warning'>" + this + " is locked and cannot be opened!</span>" );
			} else if ( this.loc == a && !this.locked ) {
				GlobalFuncs.playsound( this.loc, "rustle", 50, 1, -5 );

				if ( Lang13.Bool( a.s_active ) ) {
					((Obj_Item_Weapon_Storage)a.s_active).close( a );
				}
				this.show_to( a );
			} else {
				base.attack_hand( (object)(a), b, c );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( null, 1 ) )) {
					M = _a;
					

					if ( M.s_active == this ) {
						this.close( M );
					}
				}
				this.orient2hud( a );
			}
			this.add_fingerprint( a );
			return null;
		}

	}

}