// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RND_Blueprinter : Obj_Machinery_RND {

		public int paper_loaded = 0;
		public int nano_loaded = 0;
		public int max_paper = 10;
		public int max_nano = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.research_flags = 2;
			this.icon = "icons/obj/machines/mechanic.dmi";
			this.icon_state = "blueprinter";
		}

		// Function from file: blueprinter.dm
		public Obj_Machinery_RND_Blueprinter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Blueprinter(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_ScanningModule()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: blueprinter.dm
		public bool PrintDesign( dynamic design = null, bool? use_nano = null ) {
			use_nano = use_nano ?? false;

			
			if ( !( design is Design ) ) {
				return false;
			}

			if ( use_nano == true && this.nano_loaded == 0 || !( use_nano == true ) && this.paper_loaded == 0 ) {
				this.visible_message( new Txt( " " ).icon( this ).str( "<span class='notice'> " ).The( this ).item().str( " beeps: 'Out of " ).item( ( use_nano == true ? "nanopaper" : "paper" ) ).str( "!'</span>" ).ToString() );
				return false;
			}
			this.busy = true;
			this.overlays.Add( "" + this.base_state + "_ani" );
			Task13.Sleep( 30 );
			this.busy = false;

			if ( use_nano == true ) {
				new Obj_Item_ResearchBlueprint_Nano( this.get_output(), design );
				this.nano_loaded -= 1;
			} else {
				new Obj_Item_ResearchBlueprint( this.get_output(), design );
				this.paper_loaded -= 1;
			}
			this.visible_message( new Txt( " " ).icon( this ).str( "<span class='notice'>" ).The( this ).item().str( " beeps: 'Successfully printed the " ).item( design.name ).str( " design'.</span>" ).ToString() );
			Task13.Schedule( 20, (Task13.Closure)(() => {
				this.overlays.Remove( "" + this.base_state + "_ani" );
				return;
			}));
			return true;
		}

		// Function from file: blueprinter.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic P = null;
			dynamic PP = null;
			int? usingamount = null;
			string load_overlay = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( a is Obj_Item_Weapon_Paper ) {
				P = a;

				if ( P is Obj_Item_Weapon_Paper_Nano ) {
					
					if ( this.max_nano > this.nano_loaded ) {
						this.nano_loaded++;
						GlobalFuncs.qdel( P );
					} else {
						GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " is full.</span>" ).ToString() );
					}
				} else if ( this.max_paper > this.paper_loaded ) {
					this.paper_loaded++;
					GlobalFuncs.qdel( P );
				} else {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " is full.</span>" ).ToString() );
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_PaperPack ) {
				PP = a;
				usingamount = 0;

				if ( !Lang13.Bool( PP.amount ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You have to have paper to load the " + this + "!</span>" );
				} else {
					load_overlay = "" + this.base_state + ( Lang13.Bool( PP.pptype ) ? "nano" : "regular" );

					if ( PP.pptype == "nano" ) {
						usingamount = Num13.MinInt( this.max_nano - this.nano_loaded, Convert.ToInt32( PP.amount ) );
						this.nano_loaded += usingamount ??0;
					} else {
						usingamount = Num13.MinInt( this.max_paper - this.paper_loaded, Convert.ToInt32( PP.amount ) );
						this.paper_loaded += usingamount ??0;
					}
					this.overlays.Add( load_overlay );
					((Obj_Item_Weapon_PaperPack)PP).usepaper( usingamount );
					GlobalFuncs.to_chat( b, "<span class='notice'>You successfully load " + usingamount + " sheets into the " + this + ".</span>" );
					Task13.Schedule( 30, (Task13.Closure)(() => {
						this.overlays.Remove( load_overlay );
						return;
					}));
				}
				return null;
			}
			return null;
		}

		// Function from file: blueprinter.dm
		public override dynamic RefreshParts(  ) {
			ByTable bins = null;
			Obj_Item_Weapon_StockParts_MatterBin MB = null;

			bins = new ByTable();

			if ( !Lang13.Bool( this.component_parts ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				MB = _a;
				

				if ( MB is Obj_Item_Weapon_StockParts_MatterBin ) {
					bins.Add( MB.rating );
				}
			}
			this.max_paper = Convert.ToInt32( bins[1] * 10 );
			this.max_nano = Convert.ToInt32( bins[2] * 10 );
			return null;
		}

	}

}