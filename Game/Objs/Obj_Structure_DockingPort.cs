// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_DockingPort : Obj_Structure {

		public dynamic areaname = "space";
		public dynamic docked_with = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 60;
			this.flags = 128;
			this.anchored = 1;
			this.icon_state = "docking_shuttle";
			this.dir = 1;
		}

		// Function from file: docking_port.dm
		public Obj_Structure_DockingPort ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.all_docking_ports.Or( this );
			return;
		}

		// Function from file: docking_port.dm
		public Tile get_docking_turf(  ) {
			return Map13.GetStep( GlobalFuncs.get_turf( this ), this.dir );
		}

		// Function from file: docking_port.dm
		public void dock( dynamic D = null ) {
			this.undock();
			D.docked_with = this;
			this.docked_with = D;
			return;
		}

		// Function from file: docking_port.dm
		public bool undock(  ) {
			
			if ( Lang13.Bool( this.docked_with ) ) {
				
				if ( this.docked_with.docked_with == this ) {
					this.docked_with.docked_with = null;
				}
				this.docked_with = null;
				return true;
			}
			return false;
		}

		// Function from file: docking_port.dm
		public virtual dynamic unlink_from_shuttle( dynamic S = null ) {
			return null;
		}

		// Function from file: docking_port.dm
		public virtual dynamic link_to_shuttle( dynamic S = null ) {
			return null;
		}

		// Function from file: docking_port.dm
		public override bool shuttle_act( Shuttle S = null ) {
			Obj_Structure_DockingPort D = null;

			
			if ( this is Obj_Structure_DockingPort_Shuttle ) {
				D = this;
				GlobalFuncs.message_admins( "<span class='notice'>WARNING: A shuttle docking port linked to " + ( Lang13.Bool( ((dynamic)D).linked_shuttle ) ? "" + ((dynamic)D).linked_shuttle.name + " (" + ((dynamic)D).linked_shuttle.type + ")" : "nothing" ) + " has been destroyed by " + S.name + " (" + S.type + "). The linked shuttle will be broken! " + GlobalFuncs.formatJumpTo( GlobalFuncs.get_turf( this ) ) + "</span>" );
			}
			return base.shuttle_act( S );
		}

		// Function from file: docking_port.dm
		public override dynamic cultify(  ) {
			return null;
		}

		// Function from file: docking_port.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: docking_port.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			return 0;
		}

		// Function from file: docking_port.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			return false;
		}

		// Function from file: docking_port.dm
		public override bool singuloCanEat(  ) {
			return false;
		}

		// Function from file: docking_port.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			Shuttle S = null;

			_default = base.Destroy( (object)(brokenup) );
			GlobalVars.all_docking_ports.Remove( this );
			this.undock();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.shuttles, typeof(Shuttle) )) {
				S = _a;
				

				if ( this == S.current_port ) {
					S.current_port = null;
				}

				if ( this == S.transit_port ) {
					S.transit_port = null;
				}

				if ( this == S.destination_port ) {
					S.destination_port = null;
				}
			}
			return _default;
		}

	}

}