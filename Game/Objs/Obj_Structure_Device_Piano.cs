// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Device_Piano : Obj_Structure_Device {

		public Song song = null;
		public bool playing = false;
		public double help = 0;
		public double edit = 1;
		public int repeat = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/musician.dmi";
			this.icon_state = "minimoog";
		}

		// Function from file: musician.dm
		public Obj_Structure_Device_Piano ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Rand13.PercentChance( 50 ) ) {
				this.name = "space minimoog";
				this.desc = "This is a minimoog, like a space piano, but more spacey!";
				this.icon_state = "minimoog";
			} else {
				this.name = "space piano";
				this.desc = "This is a space piano, like a regular piano, but always in tune! Even if the musician isn't.";
				this.icon_state = "piano";
			}
			return;
		}

		// Function from file: musician.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Wrench ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You begin to loosen " ).the( this ).item().str( "'s casters...</span>" ).ToString() );

					if ( GlobalFuncs.do_after( b, this, 40 ) ) {
						((Ent_Static)b).visible_message( new Txt().item( b ).str( " loosens " ).the( this ).item().str( "'s casters." ).ToString(), new Txt( "<span class='notice'>You have loosened " ).the( this ).item().str( ". Now it can be pulled somewhere else.</span>" ).ToString(), "You hear ratchet." );
						this.anchored = 0;
					}
				} else {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You begin to tighten " ).the( this ).item().str( " to the floor...</span>" ).ToString() );

					if ( GlobalFuncs.do_after( b, this, 20 ) ) {
						((Ent_Static)b).visible_message( new Txt().item( b ).str( " tightens " ).the( this ).item().str( "'s casters." ).ToString(), new Txt( "<span class='notice'>You have tightened " ).the( this ).item().str( "'s casters. Now it can be played again.</span>" ).ToString(), "You hear ratchet." );
						this.anchored = 1;
					}
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: musician.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic tempnum = null;
			string newline = null;
			int? num = null;
			double num2 = 0;
			string content = null;
			string t = null;
			dynamic cont = null;
			ByTable lines = null;
			double tempo = 0;
			int linenum = 0;
			dynamic l = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Task13.User is Mob_Living_Silicon || !Lang13.Bool( this.anchored ) || !Task13.User.canmove ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["newsong"] ) ) {
				this.song = new Song();
			} else if ( this.song != null ) {
				
				if ( Lang13.Bool( href_list["repeat"] ) ) {
					
					if ( this.playing ) {
						return null;
					}
					tempnum = Interface13.Input( "How many times do you want to repeat this piece? (max:10)", null, null, null, null, InputType.Num | InputType.Null );

					if ( Convert.ToDouble( tempnum ) > 10 ) {
						tempnum = 10;
					}

					if ( Convert.ToDouble( tempnum ) < 0 ) {
						tempnum = 0;
					}
					this.repeat = Num13.Floor( Convert.ToDouble( tempnum ) );
				} else if ( Lang13.Bool( href_list["tempo"] ) ) {
					this.song.tempo += Num13.Floor( String13.ParseNumber( href_list["tempo"] ) ??0 );

					if ( this.song.tempo < 1 ) {
						this.song.tempo = 1;
					}
				} else if ( Lang13.Bool( href_list["play"] ) ) {
					
					if ( this.song != null ) {
						this.playing = true;
						Task13.Schedule( 0, (Task13.Closure)(() => {
							this.playsong();
							return;
						}));
					}
				} else if ( Lang13.Bool( href_list["newline"] ) ) {
					newline = String13.HtmlEncode( Interface13.Input( "Enter your line: ", "Piano", null, null, null, InputType.Str | InputType.Null ) );

					if ( !Lang13.Bool( newline ) ) {
						return null;
					}

					if ( this.song.lines.len > 50 ) {
						return null;
					}

					if ( Lang13.Length( newline ) > 50 ) {
						newline = String13.SubStr( newline, 1, 50 );
					}
					this.song.lines.Add( newline );
				} else if ( Lang13.Bool( href_list["deleteline"] ) ) {
					num = Num13.Floor( String13.ParseNumber( href_list["deleteline"] ) ??0 );

					if ( ( num ??0) > this.song.lines.len || ( num ??0) < 1 ) {
						return null;
					}
					this.song.lines.Cut( num, ( num ??0) + 1 );
				} else if ( Lang13.Bool( href_list["modifyline"] ) ) {
					num2 = Num13.Round( String13.ParseNumber( href_list["modifyline"] ) ??0, 1 );
					content = String13.HtmlEncode( Interface13.Input( "Enter your line: ", "Piano", this.song.lines[num2], null, null, InputType.Str | InputType.Null ) );

					if ( !Lang13.Bool( content ) ) {
						return null;
					}

					if ( Lang13.Length( content ) > 50 ) {
						content = String13.SubStr( content, 1, 50 );
					}

					if ( num2 > this.song.lines.len || num2 < 1 ) {
						return null;
					}
					this.song.lines[num2] = content;
				} else if ( Lang13.Bool( href_list["stop"] ) ) {
					this.playing = false;
				} else if ( Lang13.Bool( href_list["help"] ) ) {
					this.help = ( String13.ParseNumber( href_list["help"] ) ??0) - 1;
				} else if ( Lang13.Bool( href_list["edit"] ) ) {
					this.edit = ( String13.ParseNumber( href_list["edit"] ) ??0) - 1;
				} else if ( Lang13.Bool( href_list["import"] ) ) {
					t = "";

					do {
						t = String13.HtmlEncode( Interface13.Input( Task13.User, "Please paste the entire song, formatted:", "" + this.name, t, null, InputType.StrMultiline ) );

						if ( !GlobalFuncs.in_range( this, Task13.User ) ) {
							return null;
						}

						if ( Lang13.Length( t ) >= 3072 ) {
							cont = Interface13.Input( Task13.User, "Your message is too long! Would you like to continue editing it?", "", "yes", new ByTable(new object [] { "yes", "no" }), InputType.Any );

							if ( cont == "no" ) {
								break;
							}
						}
					} while ( Lang13.Length( t ) > 3072 );
					Task13.Schedule( 0, (Task13.Closure)(() => {
						lines = GlobalFuncs.text2list( t, "\n" );
						tempo = 5;

						if ( String13.SubStr( lines[1], 1, 6 ) == "BPM: " ) {
							tempo = 600 / ( String13.ParseNumber( String13.SubStr( lines[1], 6, 0 ) ) ??0);
							lines.Cut( 1, 2 );
						}

						if ( lines.len > 50 ) {
							GlobalFuncs.to_chat( Task13.User, "Too many lines!" );
							lines.Cut( 51 );
						}
						linenum = 1;

						foreach (dynamic _a in Lang13.Enumerate( lines )) {
							l = _a;
							

							if ( Lang13.Length( l ) > 50 ) {
								GlobalFuncs.to_chat( Task13.User, "Line " + linenum + " too long!" );
								lines.Remove( l );
							} else {
								linenum++;
							}
						}
						this.song = new Song();
						this.song.lines = lines;
						this.song.tempo = tempo;
						this.updateUsrDialog();
						return;
					}));
				}
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: musician.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			double calctempo = 0;
			int linecount = 0;
			dynamic line = null;

			
			if ( !Lang13.Bool( this.anchored ) ) {
				return null;
			}
			Task13.User.machine = this;
			dat = "<HEAD><TITLE>Piano</TITLE></HEAD><BODY>";

			if ( this.song != null ) {
				
				if ( this.song.lines.len > 0 && !this.playing ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";play=1'>Play Song</A><BR><BR>\n				<A href='?src=" ).Ref( this ).str( ";repeat=1'>Repeat Song: " ).item( this.repeat ).str( " times.</A><BR><BR>" ).ToString();
				}

				if ( this.playing ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";stop=1'>Stop Playing</A><BR>\n				Repeats left: " ).item( this.repeat ).str( ".<BR><BR>" ).ToString();
				}
			}

			if ( !( this.edit != 0 ) ) {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";edit=2'>Show Editor</A><BR><BR>" ).ToString();
			} else {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";edit=1'>Hide Editor</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";newsong=1'>Start a New Song</A><BR>\n			<A href='?src=" ).Ref( this ).str( ";import=1'>Import a Song</A><BR><BR>" ).ToString();

				if ( this.song != null ) {
					calctempo = 10 / this.song.tempo * 60;
					dat += new Txt( "Tempo : <A href='?src=" ).Ref( this ).str( ";tempo=10'>-</A><A href='?src=" ).Ref( this ).str( ";tempo=1'>-</A> " ).item( calctempo ).str( " BPM <A href='?src=" ).Ref( this ).str( ";tempo=-1'>+</A><A href='?src=" ).Ref( this ).str( ";tempo=-10'>+</A><BR><BR>" ).ToString();
					linecount = 0;

					foreach (dynamic _a in Lang13.Enumerate( this.song.lines )) {
						line = _a;
						
						linecount += 1;
						dat += new Txt( "Line " ).item( linecount ).str( ": " ).item( line ).str( " <A href='?src=" ).Ref( this ).str( ";deleteline=" ).item( linecount ).str( "'>Delete Line</A> <A href='?src=" ).Ref( this ).str( ";modifyline=" ).item( linecount ).str( "'>Modify Line</A><BR>" ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";newline=1'>Add Line</A><BR><BR>" ).ToString();
				}

				if ( this.help != 0 ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";help=1'>Hide Help</A><BR>" ).ToString();
					dat += @"
					Lines are a series of chords, separated by commas (,), each with notes seperated by hyphens (-).<br>
					Every note in a chord will play together, with chord timed by the tempo.<br>
					<br>
					Notes are played by the names of the note, and optionally, the accidental, and/or the octave number.<br>
					By default, every note is natural and in octave 3. Defining otherwise is remembered for each note.<br>
					Example: <i>C,D,E,F,G,A,B</i> will play a C major scale.<br>
					After a note has an accidental placed, it will be remembered: <i>C,C4,C,C3</i> is C3,C4,C4,C3</i><br>
					Chords can be played simply by seperating each note with a hyphon: <i>A-C#,Cn-E,E-G#,Gn-B</i><br>
					A pause may be denoted by an empty chord: <i>C,E,,C,G</i><br>
					To make a chord be a different time, end it with /x, where the chord length will be length<br>
					defined by tempo / x: <i>C,G/2,E/4</i><br>
					Combined, an example is: <i>E-E4/4,/2,G#/8,B/8,E3-E4/4</i>
					<br>
					Lines may be up to 50 characters.<br>
					A song may only contain up to 50 lines.<br>
					";
				} else {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";help=2'>Show Help</A><BR>" ).ToString();
				}
			}
			dat += "</BODY></HTML>";
			Interface13.Browse( a, dat, "window=piano;size=700x300" );
			GlobalFuncs.onclose( a, "piano" );
			return null;
		}

		// Function from file: musician.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !Lang13.Bool( a.dexterity_check() ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return null;
			}
			this.attack_hand( a );
			return null;
		}

		// Function from file: musician.dm
		public void playsong(  ) {
			ByTable cur_oct = null;
			ByTable cur_acc = null;
			double i = 0;
			dynamic line = null;
			dynamic beat = null;
			ByTable notes = null;
			dynamic note = null;
			int cur_note = 0;
			double i2 = 0;
			string ni = null;

			
			do {
				cur_oct = null;
				cur_oct = new ByTable( 7 );
				cur_acc = null;
				cur_acc = new ByTable( 7 );

				foreach (dynamic _a in Lang13.IterateRange( 1, 7 )) {
					i = _a;
					
					cur_oct[i] = "3";
					cur_acc[i] = "n";
				}

				foreach (dynamic _e in Lang13.Enumerate( this.song.lines )) {
					line = _e;
					

					foreach (dynamic _d in Lang13.Enumerate( GlobalFuncs.text2list( String13.ToLower( line ), "," ) )) {
						beat = _d;
						
						notes = GlobalFuncs.text2list( beat, "/" );

						foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.text2list( notes[1], "-" ) )) {
							note = _c;
							

							if ( !this.playing || !Lang13.Bool( this.anchored ) ) {
								this.playing = false;
								return;
							}

							if ( Lang13.Length( note ) == 0 ) {
								continue;
							}
							cur_note = String13.GetCharCode( note, null ) - 96;

							if ( cur_note < 1 || cur_note > 7 ) {
								continue;
							}

							foreach (dynamic _b in Lang13.IterateRange( 2, Lang13.Length( note ) )) {
								i2 = _b;
								
								ni = String13.SubStr( note, ((int)( i2 )), ((int)( i2 + 1 )) );

								if ( !Lang13.Bool( String13.ParseNumber( ni ) ) ) {
									
									if ( ni == "#" || ni == "b" || ni == "n" ) {
										cur_acc[cur_note] = ni;
									} else if ( ni == "s" ) {
										cur_acc[cur_note] = "#";
									}
								} else {
									cur_oct[cur_note] = ni;
								}
							}
							this.playnote( String13.ToUpper( String13.SubStr( note, 1, 2 ) ) + cur_acc[cur_note] + cur_oct[cur_note] );
						}

						if ( notes.len >= 2 && Lang13.Bool( String13.ParseNumber( notes[2] ) ) ) {
							Task13.Sleep( ((int)( this.song.tempo / ( String13.ParseNumber( notes[2] ) ??0) )) );
						} else {
							Task13.Sleep( ((int)( this.song.tempo )) );
						}
					}
				}

				if ( this.repeat > 0 ) {
					this.repeat--;
				}
			} while ( this.repeat > 0 );
			this.playing = false;
			this.updateUsrDialog();
			return;
		}

		// Function from file: musician.dm
		public void playnote( string note = null ) {
			string soundfile = null;
			dynamic source = null;
			dynamic M = null;

			
			switch ((string)( note )) {
				case "Cn1":
					soundfile = "sound/piano/Cn1.ogg";
					break;
				case "C#1":
					soundfile = "sound/piano/C#1.ogg";
					break;
				case "Db1":
					soundfile = "sound/piano/Db1.ogg";
					break;
				case "Dn1":
					soundfile = "sound/piano/Dn1.ogg";
					break;
				case "D#1":
					soundfile = "sound/piano/D#1.ogg";
					break;
				case "Eb1":
					soundfile = "sound/piano/Eb1.ogg";
					break;
				case "En1":
					soundfile = "sound/piano/Fb1.ogg";
					break;
				case "E#1":
					soundfile = "sound/piano/E#1.ogg";
					break;
				case "Fb1":
					soundfile = "sound/piano/Fb1.ogg";
					break;
				case "Fn1":
					soundfile = "sound/piano/Fn1.ogg";
					break;
				case "F#1":
					soundfile = "sound/piano/F#1.ogg";
					break;
				case "Gb1":
					soundfile = "sound/piano/Gb1.ogg";
					break;
				case "Gn1":
					soundfile = "sound/piano/Gn1.ogg";
					break;
				case "G#1":
					soundfile = "sound/piano/G#1.ogg";
					break;
				case "Ab1":
					soundfile = "sound/piano/Ab1.ogg";
					break;
				case "An1":
					soundfile = "sound/piano/An1.ogg";
					break;
				case "A#1":
					soundfile = "sound/piano/A#1.ogg";
					break;
				case "Bb1":
					soundfile = "sound/piano/Bb1.ogg";
					break;
				case "Bn1":
					soundfile = "sound/piano/Bn1.ogg";
					break;
				case "B#1":
					soundfile = "sound/piano/B#1.ogg";
					break;
				case "Cb2":
					soundfile = "sound/piano/Cb2.ogg";
					break;
				case "Cn2":
					soundfile = "sound/piano/Cn2.ogg";
					break;
				case "C#2":
					soundfile = "sound/piano/C#2.ogg";
					break;
				case "Db2":
					soundfile = "sound/piano/Db2.ogg";
					break;
				case "Dn2":
					soundfile = "sound/piano/Dn2.ogg";
					break;
				case "D#2":
					soundfile = "sound/piano/D#2.ogg";
					break;
				case "Eb2":
					soundfile = "sound/piano/Eb2.ogg";
					break;
				case "En2":
					soundfile = "sound/piano/En2.ogg";
					break;
				case "E#2":
					soundfile = "sound/piano/E#2.ogg";
					break;
				case "Fb2":
					soundfile = "sound/piano/Fb2.ogg";
					break;
				case "Fn2":
					soundfile = "sound/piano/Fn2.ogg";
					break;
				case "F#2":
					soundfile = "sound/piano/F#2.ogg";
					break;
				case "Gb2":
					soundfile = "sound/piano/Gb2.ogg";
					break;
				case "Gn2":
					soundfile = "sound/piano/Gn2.ogg";
					break;
				case "G#2":
					soundfile = "sound/piano/G#2.ogg";
					break;
				case "Ab2":
					soundfile = "sound/piano/Ab2.ogg";
					break;
				case "An2":
					soundfile = "sound/piano/An2.ogg";
					break;
				case "A#2":
					soundfile = "sound/piano/A#2.ogg";
					break;
				case "Bb2":
					soundfile = "sound/piano/Bb2.ogg";
					break;
				case "Bn2":
					soundfile = "sound/piano/Bn2.ogg";
					break;
				case "B#2":
					soundfile = "sound/piano/B#2.ogg";
					break;
				case "Cb3":
					soundfile = "sound/piano/Cb3.ogg";
					break;
				case "Cn3":
					soundfile = "sound/piano/Cn3.ogg";
					break;
				case "C#3":
					soundfile = "sound/piano/C#3.ogg";
					break;
				case "Db3":
					soundfile = "sound/piano/Db3.ogg";
					break;
				case "Dn3":
					soundfile = "sound/piano/Dn3.ogg";
					break;
				case "D#3":
					soundfile = "sound/piano/D#3.ogg";
					break;
				case "Eb3":
					soundfile = "sound/piano/Eb3.ogg";
					break;
				case "En3":
					soundfile = "sound/piano/En3.ogg";
					break;
				case "E#3":
					soundfile = "sound/piano/E#3.ogg";
					break;
				case "Fb3":
					soundfile = "sound/piano/Fb3.ogg";
					break;
				case "Fn3":
					soundfile = "sound/piano/Fn3.ogg";
					break;
				case "F#3":
					soundfile = "sound/piano/Gb3.ogg";
					break;
				case "Gb3":
					soundfile = "sound/piano/Gb3.ogg";
					break;
				case "Gn3":
					soundfile = "sound/piano/Gn3.ogg";
					break;
				case "G#3":
					soundfile = "sound/piano/G#3.ogg";
					break;
				case "Ab3":
					soundfile = "sound/piano/Ab3.ogg";
					break;
				case "An3":
					soundfile = "sound/piano/An3.ogg";
					break;
				case "A#3":
					soundfile = "sound/piano/A#3.ogg";
					break;
				case "Bb3":
					soundfile = "sound/piano/Bb3.ogg";
					break;
				case "Bn3":
					soundfile = "sound/piano/Bn3.ogg";
					break;
				case "B#3":
					soundfile = "sound/piano/B#3.ogg";
					break;
				case "Cb4":
					soundfile = "sound/piano/Cb4.ogg";
					break;
				case "Cn4":
					soundfile = "sound/piano/Cn4.ogg";
					break;
				case "C#4":
					soundfile = "sound/piano/C#4.ogg";
					break;
				case "Db4":
					soundfile = "sound/piano/Db4.ogg";
					break;
				case "Dn4":
					soundfile = "sound/piano/Dn4.ogg";
					break;
				case "D#4":
					soundfile = "sound/piano/D#4.ogg";
					break;
				case "Eb4":
					soundfile = "sound/piano/Eb4.ogg";
					break;
				case "En4":
					soundfile = "sound/piano/En4.ogg";
					break;
				case "E#4":
					soundfile = "sound/piano/E#4.ogg";
					break;
				case "Fb4":
					soundfile = "sound/piano/Fb4.ogg";
					break;
				case "Fn4":
					soundfile = "sound/piano/Fn4.ogg";
					break;
				case "F#4":
					soundfile = "sound/piano/F#4.ogg";
					break;
				case "Gb4":
					soundfile = "sound/piano/Gb4.ogg";
					break;
				case "Gn4":
					soundfile = "sound/piano/Gn4.ogg";
					break;
				case "G#4":
					soundfile = "sound/piano/G#4.ogg";
					break;
				case "Ab4":
					soundfile = "sound/piano/Ab4.ogg";
					break;
				case "An4":
					soundfile = "sound/piano/An4.ogg";
					break;
				case "A#4":
					soundfile = "sound/piano/A#4.ogg";
					break;
				case "Bb4":
					soundfile = "sound/piano/Bb4.ogg";
					break;
				case "Bn4":
					soundfile = "sound/piano/Bn4.ogg";
					break;
				case "B#4":
					soundfile = "sound/piano/B#4.ogg";
					break;
				case "Cb5":
					soundfile = "sound/piano/Cb5.ogg";
					break;
				case "Cn5":
					soundfile = "sound/piano/Cn5.ogg";
					break;
				case "C#5":
					soundfile = "sound/piano/C#5.ogg";
					break;
				case "Db5":
					soundfile = "sound/piano/Db5.ogg";
					break;
				case "Dn5":
					soundfile = "sound/piano/Dn5.ogg";
					break;
				case "D#5":
					soundfile = "sound/piano/D#5.ogg";
					break;
				case "Eb5":
					soundfile = "sound/piano/Eb5.ogg";
					break;
				case "En5":
					soundfile = "sound/piano/En5.ogg";
					break;
				case "E#5":
					soundfile = "sound/piano/E#5.ogg";
					break;
				case "Fb5":
					soundfile = "sound/piano/Fb5.ogg";
					break;
				case "Fn5":
					soundfile = "sound/piano/Fn5.ogg";
					break;
				case "F#5":
					soundfile = "sound/piano/F#5.ogg";
					break;
				case "Gb5":
					soundfile = "sound/piano/Gb5.ogg";
					break;
				case "Gn5":
					soundfile = "sound/piano/Gn5.ogg";
					break;
				case "G#5":
					soundfile = "sound/piano/G#5.ogg";
					break;
				case "Ab5":
					soundfile = "sound/piano/Ab5.ogg";
					break;
				case "An5":
					soundfile = "sound/piano/An5.ogg";
					break;
				case "A#5":
					soundfile = "sound/piano/A#5.ogg";
					break;
				case "Bb5":
					soundfile = "sound/piano/Bb5.ogg";
					break;
				case "Bn5":
					soundfile = "sound/piano/Bn5.ogg";
					break;
				case "B#5":
					soundfile = "sound/piano/B#5.ogg";
					break;
				case "Cb6":
					soundfile = "sound/piano/Cb6.ogg";
					break;
				case "Cn6":
					soundfile = "sound/piano/Cn6.ogg";
					break;
				case "C#6":
					soundfile = "sound/piano/C#6.ogg";
					break;
				case "Db6":
					soundfile = "sound/piano/Db6.ogg";
					break;
				case "Dn6":
					soundfile = "sound/piano/Dn6.ogg";
					break;
				case "D#6":
					soundfile = "sound/piano/D#6.ogg";
					break;
				case "Eb6":
					soundfile = "sound/piano/Eb6.ogg";
					break;
				case "En6":
					soundfile = "sound/piano/En6.ogg";
					break;
				case "E#6":
					soundfile = "sound/piano/E#6.ogg";
					break;
				case "Fb6":
					soundfile = "sound/piano/Fb6.ogg";
					break;
				case "Fn6":
					soundfile = "sound/piano/Fn6.ogg";
					break;
				case "F#6":
					soundfile = "sound/piano/F#6.ogg";
					break;
				case "Gb6":
					soundfile = "sound/piano/Gb6.ogg";
					break;
				case "Gn6":
					soundfile = "sound/piano/Gn6.ogg";
					break;
				case "G#6":
					soundfile = "sound/piano/G#6.ogg";
					break;
				case "Ab6":
					soundfile = "sound/piano/Ab6.ogg";
					break;
				case "An6":
					soundfile = "sound/piano/An6.ogg";
					break;
				case "A#6":
					soundfile = "sound/piano/A#6.ogg";
					break;
				case "Bb6":
					soundfile = "sound/piano/Bb6.ogg";
					break;
				case "Bn6":
					soundfile = "sound/piano/Bn6.ogg";
					break;
				case "B#6":
					soundfile = "sound/piano/B#6.ogg";
					break;
				case "Cb7":
					soundfile = "sound/piano/Cb7.ogg";
					break;
				case "Cn7":
					soundfile = "sound/piano/Cn7.ogg";
					break;
				case "C#7":
					soundfile = "sound/piano/C#7.ogg";
					break;
				case "Db7":
					soundfile = "sound/piano/Db7.ogg";
					break;
				case "Dn7":
					soundfile = "sound/piano/Dn7.ogg";
					break;
				case "D#7":
					soundfile = "sound/piano/D#7.ogg";
					break;
				case "Eb7":
					soundfile = "sound/piano/Eb7.ogg";
					break;
				case "En7":
					soundfile = "sound/piano/En7.ogg";
					break;
				case "E#7":
					soundfile = "sound/piano/E#7.ogg";
					break;
				case "Fb7":
					soundfile = "sound/piano/Fb7.ogg";
					break;
				case "Fn7":
					soundfile = "sound/piano/Fn7.ogg";
					break;
				case "F#7":
					soundfile = "sound/piano/F#7.ogg";
					break;
				case "Gb7":
					soundfile = "sound/piano/Gb7.ogg";
					break;
				case "Gn7":
					soundfile = "sound/piano/Gn7.ogg";
					break;
				case "G#7":
					soundfile = "sound/piano/G#7.ogg";
					break;
				case "Ab7":
					soundfile = "sound/piano/Ab7.ogg";
					break;
				case "An7":
					soundfile = "sound/piano/An7.ogg";
					break;
				case "A#7":
					soundfile = "sound/piano/A#7.ogg";
					break;
				case "Bb7":
					soundfile = "sound/piano/Bb7.ogg";
					break;
				case "Bn7":
					soundfile = "sound/piano/Bn7.ogg";
					break;
				case "B#7":
					soundfile = "sound/piano/B#7.ogg";
					break;
				case "Cb8":
					soundfile = "sound/piano/Cb8.ogg";
					break;
				case "Cn8":
					soundfile = "sound/piano/Cn8.ogg";
					break;
				case "C#8":
					soundfile = "sound/piano/C#8.ogg";
					break;
				case "Db8":
					soundfile = "sound/piano/Db8.ogg";
					break;
				case "Dn8":
					soundfile = "sound/piano/Dn8.ogg";
					break;
				case "D#8":
					soundfile = "sound/piano/D#8.ogg";
					break;
				case "Eb8":
					soundfile = "sound/piano/Eb8.ogg";
					break;
				case "En8":
					soundfile = "sound/piano/En8.ogg";
					break;
				case "E#8":
					soundfile = "sound/piano/E#8.ogg";
					break;
				case "Fb8":
					soundfile = "sound/piano/Fb8.ogg";
					break;
				case "Fn8":
					soundfile = "sound/piano/Fn8.ogg";
					break;
				case "F#8":
					soundfile = "sound/piano/F#8.ogg";
					break;
				case "Gb8":
					soundfile = "sound/piano/Gb8.ogg";
					break;
				case "Gn8":
					soundfile = "sound/piano/Gn8.ogg";
					break;
				case "G#8":
					soundfile = "sound/piano/G#8.ogg";
					break;
				case "Ab8":
					soundfile = "sound/piano/Ab8.ogg";
					break;
				case "An8":
					soundfile = "sound/piano/An8.ogg";
					break;
				case "A#8":
					soundfile = "sound/piano/A#8.ogg";
					break;
				case "Bb8":
					soundfile = "sound/piano/Bb8.ogg";
					break;
				case "Bn8":
					soundfile = "sound/piano/Bn8.ogg";
					break;
				case "B#8":
					soundfile = "sound/piano/B#8.ogg";
					break;
				case "Cb9":
					soundfile = "sound/piano/Cb9.ogg";
					break;
				case "Cn9":
					soundfile = "sound/piano/Cn9.ogg";
					break;
				default:
					return;
					break;
			}
			source = GlobalFuncs.get_turf( this );

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchHearers( source, 15 ) )) {
				M = _b;
				
				((Mob)M).playsound_local( source, new File( soundfile ), 100, null, null, 5 );
			}
			return;
		}

	}

}