// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Assembly_Math : Obj_Item_Device_Assembly {

		public ByTable values = new ByTable();
		public dynamic operation = "ADD";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.starting_materials = new ByTable().Set( "$iron", 200 ).Set( "$glass", 75 );
			this.origin_tech = "programming=2";
			this.connection_text = "connected to";
			this.accessible_values = new ByTable().Set( "Result", "null;number" ).Set( "Operation", "operation;text" );
			this.icon_state = "circuit_math";
		}

		public Obj_Item_Device_Assembly_Math ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: math.dm
		public override void disconnected( dynamic A = null, bool? in_frame = null ) {
			base.disconnected( (object)(A), in_frame );
			this.values.Remove( A );
			return;
		}

		// Function from file: math.dm
		public override void connected( dynamic A = null, bool? in_frame = null ) {
			dynamic M = null;
			dynamic test_value = null;
			string parameters = null;
			ByTable L = null;

			base.connected( (object)(A), in_frame );

			if ( A is Obj_Item_Device_Assembly_Math ) {
				M = A;
				Interface13.Stat( null, M.values.Contains( this ) );

				if ( false ) {
					return;
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( A.accessible_values )) {
				test_value = _a;
				
				parameters = A.accessible_values[test_value];

				if ( Lang13.Bool( parameters ) ) {
					L = String13.ParseUrlParams( parameters );

					if ( L[2] == "number" ) {
						this.values[A] = test_value;
						return;
					}
				}
			}
			return;
		}

		// Function from file: math.dm
		public override void write_to_value( dynamic value = null, dynamic new_value = null ) {
			
			if ( value == "Result" ) {
				return;
			} else if ( value == "Operation" ) {
				new_value = String13.ToUpper( new_value );

				if ( !( GlobalVars.math_circuit_operations_list.Find( new_value ) != 0 ) ) {
					new_value = "ADD";
				}
			}
			base.write_to_value( (object)(value), (object)(new_value) ); return;
		}

		// Function from file: math.dm
		public override dynamic get_value( dynamic value = null ) {
			dynamic _default = null;

			dynamic a = null;
			dynamic number = null;
			dynamic a2 = null;
			ByTable L = null;
			dynamic number2 = null;
			dynamic a3 = null;
			ByTable L2 = null;
			dynamic number3 = null;
			dynamic a4 = null;
			dynamic a5 = null;
			dynamic a6 = null;
			dynamic a7 = null;
			dynamic a8 = null;
			dynamic a9 = null;
			dynamic a10 = null;
			dynamic a11 = null;
			double i = 0;
			dynamic number4 = null;
			dynamic A = null;

			
			if ( !( this.values.len != 0 ) ) {
				return 0;
			}

			if ( value != "Result" ) {
				return base.get_value( (object)(value) );
			}

			if ( this.values.len == 1 ) {
				a = this.values[1];
				return ( Lang13.Bool( Lang13.IsNumber( a ) ) ? a : a.get_value( this.values[a] ) );
			}

			dynamic _f = this.operation; // Was a switch-case, sorry for the mess.
			if ( _f=="AVERAGE" ) {
				_default = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.values )) {
					number = _a;
					
					a2 = number;
					_default += ( Lang13.Bool( Lang13.IsNumber( a2 ) ) ? a2 : a2.get_value( this.values[a2] ) );
				}
				_default = _default / this.values.len;
			} else if ( _f=="MIN" ) {
				L = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( this.values )) {
					number2 = _b;
					
					a3 = number2;
					L.Add( ( Lang13.Bool( Lang13.IsNumber( a3 ) ) ? a3 : a3.get_value( this.values[a3] ) ) );
				}
				_default = Num13.Min( L );
			} else if ( _f=="MAX" ) {
				L2 = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( this.values )) {
					number3 = _c;
					
					a4 = number3;
					L2.Add( ( Lang13.Bool( Lang13.IsNumber( a4 ) ) ? a4 : a4.get_value( this.values[a4] ) ) );
				}
				_default = Num13.Max( L2 );
			} else if ( _f=="COS" ) {
				a5 = this.values[1];
				_default = Math.Cos( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a5 ) ) ? a5 : a5.get_value( this.values[a5] ) ) ) );
			} else if ( _f=="SIN" ) {
				a6 = this.values[1];
				_default = Math.Sin( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a6 ) ) ? a6 : a6.get_value( this.values[a6] ) ) ) );
			} else if ( _f=="TG" ) {
				a7 = this.values[1];

				if ( Math.Cos( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a7 ) ) ? a7 : a7.get_value( this.values[a7] ) ) ) ) == 0 ) {
					return 0;
				}
				_default = Math.Sin( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a7 ) ) ? a7 : a7.get_value( this.values[a7] ) ) ) ) / Math.Cos( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a7 ) ) ? a7 : a7.get_value( this.values[a7] ) ) ) );
			} else if ( _f=="COTG" ) {
				a8 = this.values[1];

				if ( Math.Sin( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a8 ) ) ? a8 : a8.get_value( this.values[a8] ) ) ) ) == 0 ) {
					return 0;
				}
				_default = Math.Cos( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a8 ) ) ? a8 : a8.get_value( this.values[a8] ) ) ) ) / Math.Sin( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a8 ) ) ? a8 : a8.get_value( this.values[a8] ) ) ) );
			} else if ( _f=="ACOS" ) {
				a9 = this.values[1];
				_default = Math.Acos( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a9 ) ) ? a9 : a9.get_value( this.values[a9] ) ) ) );
			} else if ( _f=="ASIN" ) {
				a10 = this.values[1];
				_default = Math.Asin( Convert.ToDouble( ( Lang13.Bool( Lang13.IsNumber( a10 ) ) ? a10 : a10.get_value( this.values[a10] ) ) ) );
			} else {
				a11 = this.values[1];
				_default = ( Lang13.Bool( Lang13.IsNumber( a11 ) ) ? a11 : a11.get_value( this.values[a11] ) );

				foreach (dynamic _e in Lang13.IterateRange( 2, this.values.len )) {
					i = _e;
					
					number4 = this.values[i];

					if ( number4 is Obj_Item_Device_Assembly ) {
						A = number4;
						number4 = A.get_value( this.values[A] );
					}

					dynamic _d = this.operation; // Was a switch-case, sorry for the mess.
					if ( _d=="ADD" ) {
						_default += number4;
					} else if ( _d=="SUBTRACT" ) {
						_default -= number4;
					} else if ( _d=="MULTIPLY" ) {
						_default *= number4;
					} else if ( _d=="DIVIDE" ) {
						
						if ( number4 == 0 ) {
							return 0;
						}
						_default /= number4;
					} else if ( _d=="POWER" ) {
						
						if ( Convert.ToDouble( _default ) < 0 ) {
							
							if ( number4 != Num13.Floor( Convert.ToDouble( number4 ) ) ) {
								return 0;
							}
						}
						_default = Math.Pow( Convert.ToDouble( _default ), Convert.ToDouble( number4 ) );
					} else if ( _d=="MOD" ) {
						_default %= number4;
					}
				}
			}
			_default = Num13.Round( Convert.ToDouble( _default ), 0.0 );
			return _default;
		}

		// Function from file: math.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic choice = null;
			dynamic choice2 = null;
			double? id = null;
			dynamic changed_value = null;
			dynamic choice3 = null;
			Obj_Item_Device_Assembly AS = null;
			dynamic choice4 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["output_value"] ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='info'>Result: " + this.get_value( "Result" ) + "</span>" );
				return null;
			}

			if ( Lang13.Bool( href_list["add_const"] ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					choice = Interface13.Input( Task13.User, "Please enter the constant's value:", new Txt().The( this ).item().ToString(), null, null, InputType.Num | InputType.Null );

					if ( choice == null ) {
						return;
					}

					if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
						return;
					}
					this.values.Add( choice );
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>Added new constant value <b>" ).item( choice ).str( "</b> to " ).the( this ).item().str( ".</span>" ).ToString() );
					this.attack_self( Task13.User );
					return;
				}));
				return null;
			}

			if ( Lang13.Bool( href_list["change_operation"] ) ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					choice2 = Interface13.Input( Task13.User, "Current operation is " + this.operation + ". Please select a new operation:", new Txt().The( this ).item().ToString(), null, GlobalVars.math_circuit_operations_list, InputType.Null | InputType.Any );

					if ( choice2 == null ) {
						return;
					}

					if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
						return;
					}
					GlobalFuncs.to_chat( Task13.User, "<span class='info'>Changed operation from " + this.operation + " to " + choice2 + ".</span>" );
					this.operation = choice2;
					this.attack_self( Task13.User );
					return;
				}));
				return null;
			}

			if ( Lang13.Bool( href_list["change_value"] ) ) {
				id = String13.ParseNumber( href_list["change_value"] );

				if ( ( id ??0) > this.values.len ) {
					return null;
				}
				changed_value = this.values[id];

				if ( Lang13.Bool( Lang13.IsNumber( changed_value ) ) ) {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						choice3 = Interface13.Input( Task13.User, new Txt( "Please enter the constant (" ).item( changed_value ).str( ")'s new value. Leave blank to delete the constant from " ).the( this ).item().str( "'s memory." ).ToString(), new Txt().The( this ).item().ToString(), changed_value, null, InputType.Num | InputType.Null );

						if ( ( id ??0) > this.values.len ) {
							return;
						}

						if ( this.values[id] != changed_value ) {
							return;
						}

						if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
							return;
						}

						if ( choice3 == null ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='info'>Removed the constant " + this.values[id] + "." );
							this.values.Remove( changed_value );
						} else {
							GlobalFuncs.to_chat( Task13.User, "<span class='info'>Changed the constant " + this.values[id] + " to " + choice3 + ".</span>" );
							this.values[id] = choice3;
						}
						this.attack_self( Task13.User );
						return;
					}));
				} else {
					Task13.Schedule( 0, (Task13.Closure)(() => {
						AS = changed_value;
						choice4 = Interface13.Input( Task13.User, new Txt( "Please select which of " ).the( changed_value ).item().str( "'s values is used in calculations (current: " ).item( this.values[changed_value] ).str( ")." ).ToString(), new Txt().The( this ).item().ToString(), null, AS.accessible_values, InputType.Null | InputType.Any );

						if ( choice4 == null ) {
							return;
						}

						if ( !( this.values.Find( changed_value ) != 0 ) ) {
							return;
						}

						if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
							return;
						}
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='info'>Changed " ).the( changed_value ).item().str( "'s used value to " ).item( choice4 ).str( ".</span>" ).ToString() );
						this.values[changed_value] = choice4;
						this.attack_self( Task13.User );
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: math.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			string operation_sign = null;
			double last_written_value = 0;
			double i = 0;
			dynamic A = null;
			Browser popup = null;

			dat = "";
			dat += new Txt( "<tt>Math circuit</tt> <small>[<a href='?src=" ).Ref( this ).str( ";help=1'>?</a>]</small><BR><BR>" ).ToString();
			dat += "<b>VALUE</b> = ";
			operation_sign = ",";
			last_written_value = this.values.len;

			dynamic _a = this.operation; // Was a switch-case, sorry for the mess.
			if ( _a=="AVERAGE" ) {
				dat += "AVERAGE of ";
			} else if ( _a=="MIN" ) {
				dat += "SMALLEST VALUE from ";
			} else if ( _a=="MAX" ) {
				dat += "LARGEST VALUE from ";
			} else if ( _a=="SIN" ) {
				dat += "SIN of ";
			} else if ( _a=="COS" ) {
				dat += "COS of ";
			} else if ( _a=="ASIN" ) {
				dat += "ARCSIN of ";
			} else if ( _a=="ACOS" ) {
				dat += "ARCCOS of ";
			} else if ( _a=="TG" ) {
				dat += "TANGENT of ";
			} else if ( _a=="COTG" ) {
				dat += "COTANGENT of ";
			} else if ( _a=="ADD" ) {
				operation_sign = "+";
			} else if ( _a=="SUBTRACT" ) {
				operation_sign = "-";
			} else if ( _a=="MULTIPLY" ) {
				operation_sign = "*";
			} else if ( _a=="DIVIDE" ) {
				operation_sign = "/";
			} else if ( _a=="POWER" ) {
				operation_sign = "^";
			} else if ( _a=="MOD" ) {
				operation_sign = "MOD";
			}
			Interface13.Stat( null, new ByTable(new object [] { "SIN", "COS", "ASIN", "ACOS", "TG", "COTG" }).Contains( this.operation ) );

			if ( false ) {
				last_written_value = 1;
			}

			if ( this.values.len != 0 ) {
				
				foreach (dynamic _b in Lang13.IterateRange( 1, last_written_value )) {
					i = _b;
					
					A = this.values[i];
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";change_value=" ).item( i ).str( "'><b>" ).item( A ).ToString();

					if ( !Lang13.Bool( Lang13.IsNumber( A ) ) ) {
						dat += " (" + this.values[A] + ")";
					}
					dat += "</b></a>";

					if ( i < last_written_value ) {
						dat += operation_sign;
					}
				}
			}
			dat += "<BR>";
			dat += new Txt( "<p><a href='?src=" ).Ref( this ).str( ";add_const=1'>Add constant</a></p>" ).ToString();
			dat += new Txt( "<p>Operation: <a href='?src=" ).Ref( this ).str( ";change_operation=1'>" ).item( this.operation ).str( "</a></p>" ).ToString();
			dat += new Txt( "<p><a href='?src=" ).Ref( this ).str( ";output_value=1'>Output value</a></p><BR>" ).ToString();
			dat += "All operations are done left-to-right. All trigonometric functions use degrees.";
			popup = new Browser( user, "circuit3", "" + this, 500, 300, this );
			popup.set_content( dat );
			popup.open();
			GlobalFuncs.onclose( user, "circuit3" );
			return null;
		}

	}

}