// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Window_Barricade_Snow : Obj_Structure_Window_Barricade {

		public double maxhealth = 50;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 50;
			this.icon_state = "snowbarricade";
		}

		public Obj_Structure_Window_Barricade_Snow ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: snow.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 1 ) != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: snow.dm
		public override bool blob_act( dynamic severity = null ) {
			this.health -= 25;

			if ( this.health <= 0 ) {
				this.visible_message( new Txt( "<span class='danger'>The blob eats through " ).the( this ).item().str( "!</span>" ).ToString() );
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: snow.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					this.visible_message( new Txt( "<span class='danger'>" ).the( this ).item().str( " is blown apart!</span>" ).ToString() );
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					this.health -= 25;

					if ( this.health <= 0 ) {
						this.visible_message( new Txt( "<span class='danger'>" ).the( this ).item().str( " is blown apart!</span>" ).ToString() );
						new Obj_Item_Stack_Sheet_Snow( GlobalFuncs.get_turf( this ), 1 );
						new Obj_Item_Stack_Sheet_Snow( GlobalFuncs.get_turf( this ), 1 );
						new Obj_Item_Stack_Sheet_Snow( GlobalFuncs.get_turf( this ), 1 );
						GlobalFuncs.qdel( this );
					}
					return false;
					break;
			}
			return false;
		}

		// Function from file: snow.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Stack_Sheet_Snow ) {
				
				if ( this.health < this.maxhealth ) {
					this.visible_message( "<span class='warning'>" + b + " begins to repair the " + this + "!</span>" );

					if ( GlobalFuncs.do_after( b, this, 20 ) ) {
						this.health = this.maxhealth;
						a.use( 1 );
						this.visible_message( "<span class='warning'>" + b + " repairs the " + this + "</span>" );
						return null;
					}
				} else {
					return null;
				}
				return null;
			} else {
				
				dynamic _a = a.damtype; // Was a switch-case, sorry for the mess.
				if ( _a=="fire" ) {
					this.health -= Convert.ToDouble( a.force );
				} else if ( _a=="brute" ) {
					this.health -= Convert.ToDouble( a.force * 0.75 );
				}

				if ( this.health <= 0 ) {
					this.visible_message( new Txt( "<span class='danger'>" ).the( this ).item().str( " is smashed apart!</span>" ).ToString() );
					new Obj_Item_Stack_Sheet_Snow( GlobalFuncs.get_turf( this ), 1 );
					new Obj_Item_Stack_Sheet_Snow( GlobalFuncs.get_turf( this ), 1 );
					new Obj_Item_Stack_Sheet_Snow( GlobalFuncs.get_turf( this ), 1 );
					GlobalFuncs.qdel( this );
					return null;
				}
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

	}

}