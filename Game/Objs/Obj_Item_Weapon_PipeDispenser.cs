// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_PipeDispenser : Obj_Item_Weapon {

		public EffectSystem_SparkSpread spark_system = null;
		public bool working = false;
		public dynamic p_type = 0;
		public double? p_conntype = 0;
		public double? p_dir = 1;
		public double? p_flipped = 0;
		public int p_class = 0;
		public bool p_disposal = false;
		public ByTable paint_colors = new ByTable().Set( "grey", "#ffffff" ).Set( "red", "#ff0000" ).Set( "blue", "#0000ff" ).Set( "cyan", "#00fff9" ).Set( "green", "#1eff00" ).Set( "yellow", "#ffc600" ).Set( "purple", "#822bff" );
		public string paint_color = "grey";
		public double? screen = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 64;
			this.force = 10;
			this.throwforce = 10;
			this.throw_speed = 1;
			this.throw_range = 5;
			this.materials = new ByTable().Set( "$metal", 75000 ).Set( "$glass", 37500 );
			this.origin_tech = "engineering=4;materials=2";
			this.icon_state = "rpd";
		}

		// Function from file: RPD.dm
		public Obj_Item_Weapon_PipeDispenser ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.spark_system = new EffectSystem_SparkSpread();
			this.spark_system.set_up( 5, 0, this );
			this.spark_system.attach( this );
			return;
		}

		// Function from file: RPD.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic queued_p_type = null;
			double? queued_p_dir = null;
			double? queued_p_flipped = null;
			dynamic P = null;
			Obj_Item_Pipe P2 = null;
			Obj_Structure_Disposalconstruct C = null;

			
			if ( !( Map13.GetDistance( target, user ) <= 1 ) || this.loc != user ) {
				return false;
			}

			if ( !((Mob)user).IsAdvancedToolUser() ) {
				user.WriteMsg( "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return false;
			}

			if ( target is Zone_Shuttle || target is Tile_Space_Transit ) {
				return false;
			}
			queued_p_type = this.p_type;
			queued_p_dir = this.p_dir;
			queued_p_flipped = this.p_flipped;

			switch ((int)( this.p_class )) {
				case -2:
					
					if ( !( target is Obj_Machinery_Atmospherics_Pipe ) ) {
						user.WriteMsg( new Txt( "<span class='warning'>" ).The( this ).item().str( "'s error light flickers!  Perhaps you need to only use it on pipes and pipe meters?</span>" ).ToString() );
						return false;
					}
					P = target;
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 50, 1 );
					P.color = this.paint_colors[this.paint_color];
					P.pipe_color = this.paint_colors[this.paint_color];
					P.stored.color = this.paint_colors[this.paint_color];
					((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " paints " ).the( P ).item().str( " " ).item( this.paint_color ).str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You paint " ).the( P ).item().str( " " ).item( this.paint_color ).str( ".</span>" ).ToString() );
					((Obj_Machinery_Atmospherics_Pipe)P).update_node_icon();
					return true;
					break;
				case -1:
					
					if ( target is Obj_Item_Pipe || target is Obj_Item_PipeMeter || target is Obj_Structure_Disposalconstruct ) {
						user.WriteMsg( "<span class='notice'>You start destroying pipe...</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 50, 1 );

						if ( GlobalFuncs.do_after( user, 2, null, target ) ) {
							this.activate();
							GlobalFuncs.qdel( target );
							return true;
						}
						return false;
					}
					user.WriteMsg( "<span class='warning'>The " + this + "'s error light flickers!  Perhaps you need to only use it on pipes and pipe meters?</span>" );
					return false;
					break;
				case 0:
					
					if ( !( target is Tile ) ) {
						user.WriteMsg( "<span class='warning'>The " + this + "'s error light flickers!</span>" );
						return false;
					}
					user.WriteMsg( "<span class='notice'>You start building pipes...</span>" );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 50, 1 );

					if ( GlobalFuncs.do_after( user, 2, null, target ) ) {
						this.activate();
						P2 = new Obj_Item_Pipe( target, queued_p_type, queued_p_dir );
						P2.flipped = queued_p_flipped;
						P2.update();
						P2.add_fingerprint( Task13.User );
						return true;
					}
					return false;
					break;
				case 1:
					
					if ( !( target is Tile ) ) {
						user.WriteMsg( "<span class='warning'>The " + this + "'s error light flickers!</span>" );
						return false;
					}
					user.WriteMsg( "<span class='notice'>You start building meter...</span>" );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 50, 1 );

					if ( GlobalFuncs.do_after( user, 2, null, target ) ) {
						this.activate();
						new Obj_Item_PipeMeter( target );
						return true;
					}
					return false;
					break;
				case 2:
					
					if ( !( target is Tile ) || GlobalFuncs.is_anchored_dense_turf( target ) ) {
						user.WriteMsg( "<span class='warning'>The " + this + "'s error light flickers!</span>" );
						return false;
					}
					user.WriteMsg( "<span class='notice'>You start building pipes...</span>" );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 50, 1 );

					if ( GlobalFuncs.do_after( user, 20, null, target ) ) {
						C = new Obj_Structure_Disposalconstruct( target, queued_p_type, queued_p_dir );

						if ( !C.can_place() ) {
							user.WriteMsg( "<span class='warning'>There's not enough room to build that here!</span>" );
							GlobalFuncs.qdel( C );
							return false;
						}
						this.activate();
						C.add_fingerprint( Task13.User );
						C.update();
						return true;
					}
					return false;
					break;
				default:
					base.afterattack( (object)(target), (object)(user), proximity_flag, click_parameters );
					return false;
					break;
			}
			return false;
		}

		// Function from file: RPD.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( !Task13.User.canUseTopic( this ) ) {
				Interface13.Browse( Task13.User, null, "window=pipedispenser" );
				return null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["screen"] ) ) {
				this.screen = String13.ParseNumber( href_list["screen"] );
				this.show_menu( Task13.User );
			}

			if ( Lang13.Bool( href_list["setdir"] ) ) {
				this.p_dir = String13.ParseNumber( href_list["setdir"] );
				this.p_flipped = String13.ParseNumber( href_list["flipped"] );
				this.show_menu( Task13.User );
			}

			if ( Lang13.Bool( href_list["eatpipes"] ) ) {
				this.p_class = -1;
				this.p_conntype = -1;
				this.p_dir = 1;
				this.spark_system.start();
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/pop.ogg", 50, 0 );
				this.show_menu( Task13.User );
			}

			if ( Lang13.Bool( href_list["paintpipes"] ) ) {
				this.p_class = -2;
				this.p_conntype = -1;
				this.p_dir = 1;
				this.spark_system.start();
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/pop.ogg", 50, 0 );
				this.show_menu( Task13.User );
			}

			if ( Lang13.Bool( href_list["set_color"] ) ) {
				this.paint_color = href_list["set_color"];
				this.spark_system.start();
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/pop.ogg", 50, 0 );
				this.show_menu( Task13.User );
			}

			if ( Lang13.Bool( href_list["makepipe"] ) ) {
				this.p_type = Lang13.FindClass( href_list["makepipe"] );
				this.p_dir = String13.ParseNumber( href_list["dir"] );
				this.p_conntype = String13.ParseNumber( href_list["type"] );
				this.p_class = 0;
				this.spark_system.start();
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/pop.ogg", 50, 0 );
				this.show_menu( Task13.User );
			}

			if ( Lang13.Bool( href_list["makemeter"] ) ) {
				this.p_class = 1;
				this.p_conntype = -1;
				this.p_dir = 1;
				this.spark_system.start();
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/pop.ogg", 50, 0 );
				this.show_menu( Task13.User );
			}

			if ( Lang13.Bool( href_list["dmake"] ) ) {
				this.p_type = String13.ParseNumber( href_list["dmake"] );
				this.p_conntype = String13.ParseNumber( href_list["type"] );
				this.p_dir = 1;
				this.p_class = 2;
				this.spark_system.start();
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/pop.ogg", 50, 0 );
				this.show_menu( Task13.User );
			}
			return null;
		}

		// Function from file: RPD.dm
		public void activate(  ) {
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
			return;
		}

		// Function from file: RPD.dm
		public bool show_menu( dynamic user = null ) {
			string dat = null;
			Icon preview = null;
			string datbuild = null;
			dynamic category = null;
			dynamic cat = null;
			dynamic label = null;
			Base_Data I = null;
			bool found = false;
			string color_css = null;
			string color_picker = null;
			dynamic color_name = null;
			dynamic color = null;
			string selected = null;
			string dirsel = null;
			string datsytle = null;
			Browser popup = null;

			
			if ( !Lang13.Bool( user ) || !( this != null ) ) {
				return false;
			}
			dat = "<h2>Type</h2>\n<b>Utilities:</b>\n<ul>";

			if ( this.p_class != -1 ) {
				dat += new Txt( "<li><a href='?src=" ).Ref( this ).str( ";eatpipes=1;type=-1'>Eat Pipes</a></li>" ).ToString();
			} else {
				dat += "<li><span class='linkOn'>Eat Pipes</span></li>";
			}

			if ( this.p_class != -2 ) {
				dat += new Txt( "<li><a href='?src=" ).Ref( this ).str( ";paintpipes=1;type=-1'>Paint Pipes</a></li>" ).ToString();
			} else {
				dat += "<li><span class='linkOn'>Paint Pipes</span></li>";
			}
			dat += "</ul>";
			dat += "<b>Category:</b><ul>";

			if ( this.screen == 0 ) {
				dat += new Txt( "<span class='linkOn'>Atmospherics</span> <A href='?src=" ).Ref( this ).str( ";screen=" ).item( 1 ).str( ";dmake=0;type=0'>Disposals</A><BR>" ).ToString();
			} else if ( this.screen == 1 ) {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";screen=" ).item( 0 ).str( ";makepipe=0;dir=1;type=0'>Atmospherics</A> <span class='linkOn'>Disposals</span><BR>" ).ToString();
			}
			dat += "</ul>";
			preview = null;
			datbuild = "";

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.RPD_recipes )) {
				category = _b;
				
				cat = GlobalVars.RPD_recipes[category];

				foreach (dynamic _a in Lang13.Enumerate( cat )) {
					label = _a;
					
					I = cat[label];
					found = false;

					if ( ((dynamic)I).id == this.p_type ) {
						
						if ( ( this.p_class == 0 || this.p_class == 1 ) && ( I.type == typeof(PipeInfo) || I.type == typeof(PipeInfo_Meter) ) ) {
							found = true;
						} else if ( this.p_class == 2 && I.type == typeof(PipeInfo_Disposal) ) {
							found = true;
						}
					}

					if ( found ) {
						preview = new Icon( ((dynamic)I).icon, ((dynamic)I).icon_state );
					}

					if ( this.screen == Lang13.DoubleNullable( ((dynamic)I).categoryId ) ) {
						
						if ( ((dynamic)I).id == this.p_type && this.p_class >= 0 ) {
							datbuild += "<span class='linkOn'>" + label + "</span>";
						} else {
							datbuild += ((dynamic)I).Render( this, label );
						}
					}
				}

				if ( Lang13.Length( datbuild ) > 0 ) {
					dat += "<b>" + category + ":</b><ul>";
					dat += datbuild;
					datbuild = "";
				}
				dat += "</ul>";
			}
			color_css = "";
			color_picker = "";

			foreach (dynamic _c in Lang13.Enumerate( this.paint_colors )) {
				color_name = _c;
				
				color = this.paint_colors[color_name];
				color_css += "\n			a.color." + color_name + " {\n				color: " + color + ";\n			}\n			a.color." + color_name + ":hover {\n				border:1px solid " + color + ";\n			}\n			a.color." + color_name + ".selected {\n				background-color: " + color + ";\n			}\n		";
				selected = "";

				if ( color_name == this.paint_color ) {
					selected = " selected";
				}
				color_picker += new Txt( "<a class=\"color " ).item( color_name ).item( selected ).str( "\" href=\"?src=" ).Ref( this ).str( ";set_color=" ).item( color_name ).str( "\">&bull;</a>" ).ToString();
			}
			dirsel = "<h2>Direction</h2>";

			switch ((int?)( this.p_conntype )) {
				case -1:
					
					if ( this.p_class == -2 ) {
						dirsel = "<h2>Color</h2>" + color_picker;
					} else {
						dirsel = "";
					}
					break;
				case 0:
					
					if ( preview != null ) {
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTH ), "vertical.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.EAST ), "horizontal.png" );
						dirsel += "<p>";
						dirsel += this.render_dir_img( 1, "vertical.png", "Vertical" );
						dirsel += this.render_dir_img( 4, "horizontal.png", "Horizontal" );
						dirsel += "</p>";
					} else {
						dirsel += new Txt( "\n		<p>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=1; flipped=0\" title=\"vertical\">&#8597;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=4; flipped=0\" title=\"horizontal\">&harr;</a>\n		</p>\n				" ).ToString();
					}
					break;
				case 1:
					
					if ( preview != null ) {
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTH ), "vertical.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.EAST ), "horizontal.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTHWEST ), "nw.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTHEAST ), "ne.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.SOUTHWEST ), "sw.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.SOUTHEAST ), "se.png" );
						dirsel += "<p>";
						dirsel += this.render_dir_img( 1, "vertical.png", "Vertical" );
						dirsel += this.render_dir_img( 4, "horizontal.png", "Horizontal" );
						dirsel += "<br />";
						dirsel += this.render_dir_img( 9, "nw.png", "West to North" );
						dirsel += this.render_dir_img( 5, "ne.png", "North to East" );
						dirsel += "<br />";
						dirsel += this.render_dir_img( 10, "sw.png", "South to West" );
						dirsel += this.render_dir_img( 6, "se.png", "East to South" );
						dirsel += "</p>";
					} else {
						dirsel += new Txt( "\n		<p>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=1; flipped=0\" title=\"vertical\">&#8597;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=4; flipped=0\" title=\"horizontal\">&harr;</a>\n			<br />\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=9; flipped=0\" title=\"West to North\">&#9565;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=5; flipped=0\" title=\"North to East\">&#9562;</a>\n			<br />\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=10; flipped=0\" title=\"South to West\">&#9559;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=6; flipped=0\" title=\"East to South\">&#9556;</a>\n		</p>\n				" ).ToString();
					}
					break;
				case 2:
					
					if ( preview != null ) {
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTH ), "s.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.EAST ), "w.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.SOUTH ), "n.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.WEST ), "e.png" );
						dirsel += "<p>";
						dirsel += this.render_dir_img( 1, "s.png", "West South East" );
						dirsel += this.render_dir_img( 4, "w.png", "North West South" );
						dirsel += "<br />";
						dirsel += this.render_dir_img( 2, "n.png", "East North West" );
						dirsel += this.render_dir_img( 8, "e.png", "South East North" );
						dirsel += "</p>";
					} else {
						dirsel += new Txt( "\n		<p>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=1; flipped=0\" title=\"West, South, East\">&#9574;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=4; flipped=0\" title=\"North, West, South\">&#9571;</a>\n			<br />\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=2; flipped=0\" title=\"East, North, West\">&#9577;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=8; flipped=0\" title=\"South, East, North\">&#9568;</a>\n		</p>\n				" ).ToString();
					}
					break;
				case 3:
					
					if ( preview != null ) {
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTH ), "s.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.EAST ), "w.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.SOUTH ), "n.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.WEST ), "e.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.SOUTHEAST ), "sm.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTHEAST ), "wm.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTHWEST ), "nm.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.SOUTHWEST ), "em.png" );
						dirsel += "<p>";
						dirsel += this.render_dir_img( 1, "s.png", "West South East" );
						dirsel += this.render_dir_img( 4, "w.png", "North West South" );
						dirsel += "<br />";
						dirsel += this.render_dir_img( 2, "n.png", "East North West" );
						dirsel += this.render_dir_img( 8, "e.png", "South East North" );
						dirsel += "<br />";
						dirsel += this.render_dir_img( 6, "sm.png", "West South East", true );
						dirsel += this.render_dir_img( 5, "wm.png", "North West South", true );
						dirsel += "<br />";
						dirsel += this.render_dir_img( 9, "nm.png", "East North West", true );
						dirsel += this.render_dir_img( 10, "em.png", "South East North", true );
						dirsel += "</p>";
					} else {
						dirsel += new Txt( "\n		<p>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=1; flipped=0\" title=\"West, South, East\">&#9574;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=4; flipped=0\" title=\"North, West, South\">&#9571;</a>\n			<br />\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=2; flipped=0\" title=\"East, North, West\">&#9577;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=8; flipped=0\" title=\"South, East, North\">&#9568;</a>\n			<br />\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=6; flipped=1\" title=\"West, South, East\">&#9574;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=5; flipped=1\" title=\"North, West, South\">&#9571;</a>\n			<br />\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=9; flipped=1\" title=\"East, North, West\">&#9577;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=10; flipped=1\" title=\"South, East, North\">&#9568;</a>\n		</p>\n				" ).ToString();
					}
					break;
				case 4:
					
					if ( preview != null ) {
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.NORTH ), "n.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.EAST ), "e.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.SOUTH ), "s.png" );
						Interface13.CacheBrowseResource( user, new Icon( preview, null, GlobalVars.WEST ), "w.png" );
						dirsel += "<p>";
						dirsel += this.render_dir_img( GlobalVars.NORTH, "n.png", "North" );
						dirsel += this.render_dir_img( GlobalVars.EAST, "e.png", "East" );
						dirsel += this.render_dir_img( GlobalVars.SOUTH, "s.png", "South" );
						dirsel += this.render_dir_img( GlobalVars.WEST, "w.png", "West" );
						dirsel += "</p>";
					} else {
						dirsel += new Txt( "\n		<p>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.NORTH ).str( "; flipped=0\" title=\"North\">&uarr;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.EAST ).str( "; flipped=0\" title=\"East\">&rarr;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.SOUTH ).str( "; flipped=0\" title=\"South\">&darr;</a>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( GlobalVars.WEST ).str( "; flipped=0\" title=\"West\">&larr;</a>\n		</p>\n					" ).ToString();
					}
					break;
				case 5:
					
					if ( preview != null ) {
						Interface13.CacheBrowseResource( user, new Icon( preview ), "pipe.png" );
						dirsel += "<p>";
						dirsel += this.render_dir_img( 1, "pipe.png", "Pipe" );
						dirsel += "</p>";
					} else {
						dirsel += new Txt( "\n		<p>\n			<a href=\"?src=" ).Ref( this ).str( ";setdir=1; flipped=0\" title=\"Pipe\">&#8597;</a>\n		</p>\n				" ).ToString();
					}
					break;
			}
			datsytle = @"
<style type=""text/css"">
	a.imglink {
		padding: none;
		text-decoration:none;
		border-style:none;
		background:none;
		margin: 1px;
	}

	a.imglink:hover {
		background:none;
		color:none;
	}

	a.imglink.selected img {
		border: 1px solid #24722e;
		background: #2f943c;
	}

	a img {
		border: 1px solid #161616;
		background: #40628a;
	}

	a.color {
		padding: 5px 10px;
		font-size: large;
		font-weight: bold;
		border: 1px solid #161616;
	}

	a.selected img,
		a:hover {
			background: #0066cc;
			color: #ffffff;
		}
		" + color_css + "\n</style>";
			dat = datsytle + dirsel + dat;
			popup = new Browser( user, "pipedispenser", this.name, 300, 550 );
			popup.set_content( dat );
			popup.open();
			return false;
		}

		// Function from file: RPD.dm
		public string render_dir_img( double? _dir = null, string pic = null, string title = null, bool? flipped = null ) {
			flipped = flipped ?? false;

			string selected = null;

			selected = " class=\"imglink\"";

			if ( _dir == this.p_dir ) {
				selected = " class=\"imglink selected\"";
			}
			return new Txt( "<a href=\"?src=" ).Ref( this ).str( ";setdir=" ).item( _dir ).str( ";flipped=" ).item( flipped ).str( "\" title=\"" ).item( title ).str( "\"" ).item( selected ).str( "\"><img src=\"" ).item( pic ).str( "\" /></a>" ).ToString();
		}

		// Function from file: RPD.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " points the end of the RPD down " ).his_her_its_their().str( " throat and presses a button! It looks like " ).he_she_it_they().str( "'s trying to commit suicide...</span>" ).ToString() );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( user ), "sound/machines/click.ogg", 50, 1 );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( user ), "sound/items/Deconstruct.ogg", 50, 1 );
			return 1;
		}

		// Function from file: RPD.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.show_menu( user );
			return null;
		}

		// Function from file: RPD.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.spark_system );
			this.spark_system = null;
			return base.Destroy();
		}

	}

}