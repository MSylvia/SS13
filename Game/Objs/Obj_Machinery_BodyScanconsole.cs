// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_BodyScanconsole : Obj_Machinery {

		public dynamic connected = null;
		public ByTable known_implants = new ByTable(new object [] { typeof(Obj_Item_Weapon_Implant_Chem), typeof(Obj_Item_Weapon_Implant_DeathAlarm), typeof(Obj_Item_Weapon_Implant_Loyalty), typeof(Obj_Item_Weapon_Implant_Tracking) });
		public dynamic delete = null;
		public dynamic temphtml = null;
		public string orient = "LEFT";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/Cryogenic2.dmi";
			this.icon_state = "body_scannerconsole";
		}

		// Function from file: adv_med.dm
		public Obj_Machinery_BodyScanconsole ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				if ( this.orient == "RIGHT" ) {
					this.icon_state = "body_scannerconsole-r";
					this.connected = Lang13.FindIn( typeof(Obj_Machinery_Bodyscanner), Map13.GetStep( this, ((int)( GlobalVars.EAST )) ) );
				} else {
					this.connected = Lang13.FindIn( typeof(Obj_Machinery_Bodyscanner), Map13.GetStep( this, ((int)( GlobalVars.WEST )) ) );
				}
				return;
			}));
			return;
		}

		// Function from file: adv_med.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			Obj_Item_Weapon_Paper R = null;

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}

			if ( !Lang13.Bool( this.connected ) || Convert.ToDouble( this.connected.scanning ) < 3 ) {
				return null;
			}

			if ( Lang13.Bool( ((dynamic)( Map13.FetchInRange( 3, this ) != null && String13.FindIgnoreCase( _args[1].message, "scanner, print", 1, 0 ) != 0 )).Contains( _args[1].speaker != null && _args[1].speaker != null ) ) ) {
				
				if ( !Lang13.Bool( this.connected.occupant ) || !( this.connected.occupant is Mob_Living_Carbon_Human ) ) {
					return null;
				}
				R = new Obj_Item_Weapon_Paper( this.loc );
				R.name = "paper - 'body scan report'";
				R.info = this.format_occupant_data( ((Obj_Machinery_Bodyscanner)this.connected).get_occupant_data() );
			}
			return null;
		}

		// Function from file: adv_med.dm
		public string format_occupant_data( ByTable occ = null ) {
			string dat = null;
			string aux = null;
			Reagent R = null;
			Disease D = null;
			Organ_External e = null;
			string AN = null;
			string open = null;
			string infected = null;
			string imp = null;
			string bled = null;
			string robot = null;
			string splint = null;
			string internal_bleeding = null;
			string lung_ruptured = null;
			Wound W = null;
			int unknown_body = 0;
			dynamic I = null;
			Organ_Internal i = null;
			string mech = null;
			string infection = null;

			dat = "<font color='blue'><b>Scan performed at " + occ["stationtime"] + "</b></font><br>";
			dat += "<font color='blue'><b>Occupant Statistics:</b></font><br>";

			dynamic _a = occ["stat"]; // Was a switch-case, sorry for the mess.
			if ( _a==0 ) {
				aux = "Conscious";
			} else if ( _a==1 ) {
				aux = "Unconscious";
			} else {
				aux = "Dead";
			}
			dat += "" + ( Convert.ToDouble( occ["health"] ) > 50 ? "<font color='blue'>" : "<font color='red'>" ) + "	Health %: " + occ["health"] + " (" + aux + ")</font><br>";

			if ( Lang13.Bool( occ["virus_present"] ) ) {
				dat += "<font color='red'>Viral pathogen detected in blood stream.</font><br>";
			}
			dat += "" + ( Convert.ToDouble( occ["bruteloss"] ) < 60 ? "<font color='blue'>" : "<font color='red'>" ) + "	-Brute Damage %: " + occ["bruteloss"] + "</font><br>";
			dat += "" + ( Convert.ToDouble( occ["oxyloss"] ) < 60 ? "<font color='blue'>" : "<font color='red'>" ) + "	-Respiratory Damage %: " + occ["oxyloss"] + "</font><br>";
			dat += "" + ( Convert.ToDouble( occ["toxloss"] ) < 60 ? "<font color='blue'>" : "<font color='red'>" ) + "	-Toxin Content %: " + occ["toxloss"] + "</font><br>";
			dat += "" + ( Convert.ToDouble( occ["fireloss"] ) < 60 ? "<font color='blue'>" : "<font color='red'>" ) + "	-Burn Severity %: " + occ["fireloss"] + "</font><br><br>";
			dat += "" + ( Convert.ToDouble( occ["rads"] ) < 10 ? "<font color='blue'>" : "<font color='red'>" ) + "	Radiation Level %: " + occ["rads"] + "</font><br>";
			dat += "" + ( Convert.ToDouble( occ["cloneloss"] ) < 1 ? "<font color='blue'>" : "<font color='red'>" ) + "	Genetic Tissue Damage %: " + occ["cloneloss"] + "</font><br>";
			dat += "" + ( Convert.ToDouble( occ["brainloss"] ) < 1 ? "<font color='blue'>" : "<font color='red'>" ) + "	Approx. Brain Damage %: " + occ["brainloss"] + "</font><br>";
			dat += "Paralysis Summary %: " + occ["paralysis"] + " (" + Num13.Floor( Convert.ToDouble( occ["paralysis"] / 4 ) ) + " seconds left!)<br>";
			dat += "Body Temperature: " + ( occ["bodytemp"] - 273.41 ) + "&deg;C (" + ( occ["bodytemp"] * 171 - 459.6700134277344 ) + "&deg;F)<br><HR>";

			if ( Lang13.Bool( occ["borer_present"] ) ) {
				dat += "Large growth detected in frontal lobe, possibly cancerous. Surgical removal is recommended.<br>";
			}
			dat += "" + ( Convert.ToDouble( occ["blood_amount"] ) > 448 ? "<font color='blue'>" : "<font color='red'>" ) + "	Blood Level %: " + occ["blood_amount"] * 100 / 560 + " (" + occ["blood_amount"] + " units)</FONT><BR>";

			if ( Convert.ToDouble( this.connected.scanning ) >= 2 ) {
				dat += "<font color='blue'>	Blood Type: " + occ["btype"] + "</FONT><BR>";
			}
			dat += "Inaprovaline: " + occ["inaprovaline_amount"] + " units<BR>";
			dat += "Soporific: " + occ["stoxin_amount"] + " units<BR>";
			dat += "" + ( Convert.ToDouble( occ["dermaline_amount"] ) < 30 ? "<font color='black'>" : "<font color='red'>" ) + "	Dermaline: " + occ["dermaline_amount"] + " units</FONT><BR>";
			dat += "" + ( Convert.ToDouble( occ["bicaridine_amount"] ) < 30 ? "<font color='black'>" : "<font color='red'>" ) + "	Bicaridine: " + occ["bicaridine_amount"] + " units<BR>";
			dat += "" + ( Convert.ToDouble( occ["dexalin_amount"] ) < 30 ? "<font color='black'>" : "<font color='red'>" ) + "	Dexalin: " + occ["dexalin_amount"] + " units<BR>";

			if ( Convert.ToDouble( this.connected.scanning ) > 2 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( occ["all_chems"], typeof(Reagent) )) {
					R = _b;
					

					if ( R.id == "blood" || R.id == "inaprovaline" || R.id == "stoxin" || R.id == "dermaline" || R.id == "bicaridine" || R.id == "dexalin" ) {
						continue;
					} else {
						dat += "<font color='black'>Detected</font> <font color='blue'>" + R.volume + "</font> <font color='black'>units of</font> <font color='blue'>" + R.name + "</font><BR>";
					}
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( occ["tg_diseases_list"], typeof(Disease) )) {
				D = _c;
				

				if ( !Lang13.Bool( D.hidden[1] ) ) {
					dat += "<BR><font color='red'><B>Warning: " + D.form + " Detected</B>\nName: " + D.name + ".\nType: " + D.spread + ".\nStage: " + D.stage + "/" + D.max_stages + ".\nPossible Cure: " + D.cure + "</FONT><BR>";
				}
			}
			dat += "<HR><table border='1'>";
			dat += "<tr>";
			dat += "<th>Organ</th>";
			dat += "<th>Burn Damage</th>";
			dat += "<th>Brute Damage</th>";
			dat += "<th>Other Wounds</th>";
			dat += "</tr>";

			foreach (dynamic _g in Lang13.Enumerate( occ["external_organs"], typeof(Organ_External) )) {
				e = _g;
				
				AN = "";
				open = "";
				infected = "";
				imp = "";
				bled = "";
				robot = "";
				splint = "";
				internal_bleeding = "";
				lung_ruptured = "";
				dat += "<tr>";

				foreach (dynamic _d in Lang13.Enumerate( e.wounds, typeof(Wound) )) {
					W = _d;
					

					if ( W.v_internal ) {
						internal_bleeding = "<br>Internal bleeding";
						break;
					}
				}

				if ( e is Organ_External_Chest && Lang13.Bool( occ["lung_ruptured"] ) ) {
					lung_ruptured = "Lung ruptured:";
				}

				if ( ( e.status & 256 ) != 0 ) {
					splint = "Splinted:";
				}

				if ( ( e.status & 8 ) != 0 ) {
					bled = "Bleeding:";
				}

				if ( ( e.status & 32 ) != 0 ) {
					AN = "" + e.broken_description + ":";
				}

				if ( ( e.status & 128 ) != 0 ) {
					robot = "Prosthetic:";
				}

				if ( e.open != 0 ) {
					open = "Open:";
				}

				dynamic _e = e.germ_level; // Was a switch-case, sorry for the mess.
				if ( 100<=_e&&_e<=300 ) {
					infected = "Mild Infection:";
				} else if ( 300<=_e&&_e<=400 ) {
					infected = "Mild Infection+:";
				} else if ( 400<=_e&&_e<=500 ) {
					infected = "Mild Infection++:";
				} else if ( 500<=_e&&_e<=700 ) {
					infected = "Acute Infection:";
				} else if ( 700<=_e&&_e<=800 ) {
					infected = "Acute Infection+:";
				} else if ( 800<=_e&&_e<=900 ) {
					infected = "Acute Infection++:";
				} else if ( 1000<=_e&&_e<=Double.PositiveInfinity ) {
					infected = "Septic:";
				}

				if ( e.implants.len != 0 ) {
					unknown_body = 0;

					foreach (dynamic _f in Lang13.Enumerate( e.implants )) {
						I = _f;
						

						if ( GlobalFuncs.is_type_in_list( I, this.known_implants ) ) {
							imp += "" + I + " implanted:";
						} else {
							unknown_body++;
						}
					}

					if ( unknown_body != 0 || e.hidden != null ) {
						imp += "Unknown body present:";
					}
				}

				if ( !Lang13.Bool( AN ) && !Lang13.Bool( open ) && ( ( !Lang13.Bool( infected ) ?1:0) & ( !Lang13.Bool( imp ) ?1:0) ) != 0 ) {
					AN = "None:";
				}

				if ( !( ( e.status & 64 ) != 0 ) ) {
					dat += "<td>" + e.display_name + "</td><td>" + e.burn_dam + "</td><td>" + e.brute_dam + "</td><td>" + robot + bled + AN + splint + open + infected + imp + internal_bleeding + lung_ruptured + "</td>";
				} else {
					dat += "<td>" + e.display_name + "</td><td>-</td><td>-</td><td>Not Found</td>";
				}
				dat += "</tr>";
			}

			foreach (dynamic _i in Lang13.Enumerate( occ["internal_organs"], typeof(Organ_Internal) )) {
				i = _i;
				
				mech = "";

				if ( i.robotic == 1 ) {
					mech = "Assisted:";
				}

				if ( i.robotic == 2 ) {
					mech = "Mechanical:";
				}
				infection = "None";

				dynamic _h = i.germ_level; // Was a switch-case, sorry for the mess.
				if ( 1<=_h&&_h<=300 ) {
					infection = "Mild Infection:";
				} else if ( 300<=_h&&_h<=400 ) {
					infection = "Mild Infection+:";
				} else if ( 400<=_h&&_h<=500 ) {
					infection = "Mild Infection++:";
				} else if ( 500<=_h&&_h<=700 ) {
					infection = "Acute Infection:";
				} else if ( 700<=_h&&_h<=800 ) {
					infection = "Acute Infection+:";
				} else if ( 800<=_h&&_h<=Double.PositiveInfinity ) {
					infection = "Acute Infection++:";
				}
				dat += "<tr>";
				dat += "<td>" + i.name + "</td><td>N/A</td><td>" + i.damage + "</td><td>" + infection + ":" + mech + "</td><td></td>";
				dat += "</tr>";
			}
			dat += "</table>";

			if ( Lang13.Bool( occ["sdisabilities"] & 1 ) ) {
				dat += "<font color='red'>Cataracts detected.</font><BR>";
			}

			if ( Lang13.Bool( occ["sdisabilities"] & 1 ) ) {
				dat += "<font color='red'>Retinal misalignment detected.</font><BR>";
			}
			return dat;
		}

		// Function from file: adv_med.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic occupant = null;
			Obj_Item_Weapon_Paper R = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["print"] ) ) {
				
				if ( !Lang13.Bool( this.connected ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>Error: No body scanner connected.</span>" ).ToString() );
					return null;
				}
				occupant = this.connected.occupant;

				if ( !Lang13.Bool( this.connected.occupant ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>" ).The( this.connected ).item().str( " is empty.</span>" ).ToString() );
					return null;
				}

				if ( !( occupant is Mob_Living_Carbon_Human ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt().icon( this ).str( "<span class='warning'>" ).The( this.connected ).item().str( " cannot scan that lifeform.</span>" ).ToString() );
					return null;
				}
				R = new Obj_Item_Weapon_Paper( this.loc );
				R.name = "paper - 'body scan report'";
				R.info = this.format_occupant_data( ((Obj_Machinery_Bodyscanner)this.connected).get_occupant_data() );
			}
			return null;
		}

		// Function from file: adv_med.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !Lang13.Bool( this.connected ) || Lang13.Bool( this.connected.stat & 3 ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>This console is not connected to a functioning body scanner.</span>" );
				return null;
			}

			if ( !( this.connected.occupant is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>This device can only scan compatible lifeforms.</span>" );
				return null;
			}

			if ( Lang13.Bool( this.delete ) && Lang13.Bool( this.temphtml ) ) {
				this.delete = this.delete;
			} else if ( !Lang13.Bool( this.delete ) && Lang13.Bool( this.temphtml ) ) {
				dat = new Txt().item( this.temphtml ).str( "<BR><BR><A href='?src=" ).Ref( this ).str( ";clear=1'>Main Menu</A>" ).ToString();
			} else if ( Lang13.Bool( this.connected ) ) {
				dat = this.format_occupant_data( ((Obj_Machinery_Bodyscanner)this.connected).get_occupant_data() );
				dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";print=1'>Print</A><BR>" ).ToString();
			} else {
				dat = "<font color='red'>Error: No Body Scanner connected.</font>";
			}
			dat += new Txt( "<BR><A href='?src=" ).Ref( a ).str( ";mach_close=scanconsole'>Close</A>" ).ToString();
			Interface13.Browse( a, dat, "window=scanconsole;size=430x600" );
			return null;
		}

		// Function from file: adv_med.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: adv_med.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: adv_med.dm
		public override dynamic process(  ) {
			
			if ( ( this.stat & 27 ) != 0 ) {
				this.use_power = 0;
				return null;
			}

			if ( Lang13.Bool( this.connected ) && Lang13.Bool( this.connected.occupant ) ) {
				this.use_power = 2;
			} else {
				this.use_power = 1;
			}
			return null;
		}

		// Function from file: adv_med.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered() ) ) {
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.stat |= 2;
					return;
				}));
			}
			this.update_icon();
			return null;
		}

		// Function from file: adv_med.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: adv_med.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: adv_med.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = "body_scannerconsole" + ( ( this.stat & 2 ) != 0 ? "-p" : null ) + ( this.orient == "LEFT" ? null : "-r" );
			return null;
		}

	}

}