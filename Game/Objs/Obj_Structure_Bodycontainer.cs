// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Bodycontainer : Obj_Structure {

		public Obj_Structure_Tray connected = null;
		public bool locked = false;
		public int opendir = 2;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/stationobjs.dmi";
			this.icon_state = "morgue1";
		}

		// Function from file: morgue.dm
		public Obj_Structure_Bodycontainer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: morgue.dm
		public override void get_remote_view_fullscreens( Mob_Living user = null ) {
			
			if ( user.stat == 2 || !( ( user.sight & 12 ) != 0 ) ) {
				user.overlay_fullscreen( "remote_view", typeof(Obj_Screen_Fullscreen_Impaired), 2 );
			}
			return;
		}

		// Function from file: morgue.dm
		public void close(  ) {
			Ent_Dynamic AM = null;

			GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );

			foreach (dynamic _a in Lang13.Enumerate( this.connected.loc, typeof(Ent_Dynamic) )) {
				AM = _a;
				

				if ( !Lang13.Bool( AM.anchored ) || AM == this.connected ) {
					AM.forceMove( this );
				}
			}
			this.update_icon();
			return;
		}

		// Function from file: morgue.dm
		public void open(  ) {
			Tile T = null;
			Ent_Dynamic AM = null;

			GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );
			T = Map13.GetStep( this, this.opendir );

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				AM = _a;
				
				AM.forceMove( T );
			}
			this.update_icon();
			return;
		}

		// Function from file: morgue.dm
		public override void container_resist( Mob user = null ) {
			this.open();
			return;
		}

		// Function from file: morgue.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			string t = null;

			
			if ( A is Obj_Item_Weapon_Pen ) {
				t = GlobalFuncs.stripped_input( user, "What would you like the label to be?", "" + this.name, null );

				if ( ((Mob)user).get_active_hand() != A ) {
					return null;
				}

				if ( !( Map13.GetDistance( this, Task13.User ) <= 1 ) && this.loc != user ) {
					return null;
				}

				if ( Lang13.Bool( t ) ) {
					this.name = "" + Lang13.Initial( this, "name" ) + "- '" + t + "'";
				} else {
					this.name = Lang13.Initial( this, "name" );
				}
			}
			this.add_fingerprint( user );
			return null;
		}

		// Function from file: morgue.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( this.locked ) {
				a.WriteMsg( "<span class='danger'>It's locked.</span>" );
				return null;
			}

			if ( !( this.connected != null ) ) {
				a.WriteMsg( "That doesn't appear to have a tray." );
				return null;
			}

			if ( this.connected.loc == this ) {
				this.open();
			} else {
				this.close();
			}
			this.add_fingerprint( a );
			return null;
		}

		// Function from file: morgue.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: morgue.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			
			if ( user.stat != 0 || !( this.loc is Tile ) ) {
				return false;
			}
			this.open();
			return false;
		}

		// Function from file: morgue.dm
		public override dynamic alter_health(  ) {
			return this.loc;
		}

		// Function from file: morgue.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			return false;
		}

		// Function from file: morgue.dm
		public override void on_log(  ) {
			this.update_icon();
			return;
		}

		// Function from file: morgue.dm
		public override dynamic Destroy(  ) {
			this.open();

			if ( this.connected != null ) {
				GlobalFuncs.qdel( this.connected );
				this.connected = null;
			}
			return base.Destroy();
		}

	}

}