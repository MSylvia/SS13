// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_MaterialSynth : Obj_Item_Device {

		public bool mode = true;
		public bool emagged = false;
		public Type active_material = typeof(Obj_Item_Stack_Sheet_Metal);
		public ByTable materials_scanned = new ByTable()
											.Set( "metal", typeof(Obj_Item_Stack_Sheet_Metal) )
											.Set( "glass", typeof(Obj_Item_Stack_Sheet_Glass_Glass) )
											.Set( "reinforced glass", typeof(Obj_Item_Stack_Sheet_Glass_Rglass) )
											.Set( "plasteel", typeof(Obj_Item_Stack_Sheet_Plasteel) )
										;
		public int matter = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "engineering=4;materials=5;powerstorage=3";
			this.icon_state = "mat_synthoff";
		}

		public Obj_Item_Device_MaterialSynth ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: mat_synth.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic selection = null;

			
			if ( this.materials_scanned.len != 0 ) {
				selection = this.materials_scanned[Interface13.Input( "Select the material you'd like to synthesize", "Change Material Type", null, null, this.materials_scanned, InputType.Null | InputType.Any )];

				if ( Lang13.Bool( selection ) ) {
					this.active_material = selection;
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You switch " ).the( this ).item().str( " to synthesize " ).item( Lang13.Initial( this.active_material, "name" ) ).str( "</span>" ).ToString() );
				} else {
					this.active_material = null;
					return null;
				}
			} else {
				GlobalFuncs.to_chat( user, "<span class='warning'>ERROR: NO MATERIAL DATA FOUND</span>" );
				return 0;
			}
			this.create_material( user, this.active_material );
			return null;
		}

		// Function from file: mat_synth.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic RA = null;
			int matter_rng = 0;
			dynamic spawn_item = null;

			
			if ( a is Obj_Item_Weapon_RcdAmmo ) {
				RA = a;

				if ( this.matter + 10 > 60 ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " can't take any more material right now.</span>" ).ToString() );
					return null;
				} else {
					this.matter += 10;
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 20, 1 );
					GlobalFuncs.qdel( RA );
					GlobalFuncs.to_chat( b, "<span class='notice'>The material synthetizer now holds " + this.matter + "/" + 60 + " matter-units.</span>" );
				}
			}

			if ( a is Obj_Item_Weapon_Card_Emag ) {
				
				if ( !this.emagged ) {
					this.emagged = true;
					matter_rng = Rand13.Int( 5, 25 );

					if ( this.matter >= matter_rng ) {
						spawn_item = Rand13.PickFromTable( GlobalFuncs.existing_typesof( typeof(Obj_Item_Device) ) );
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " in " ).item( b ).str( "'s hands appears to be trying to synthesize... " ).a( Lang13.Initial( spawn_item, "name" ) ).item().str( "?</span>" ).ToString(), new Txt( "<span class='warning'>" ).The( this ).item().str( " pops and fizzles in your hands, before creating... " ).a( Lang13.Initial( spawn_item, "name" ) ).item().str( "?</span>" ).ToString(), "<span class='warning'>You hear a loud popping noise.</span>" );
						Task13.Sleep( 10 );
						Lang13.Call( spawn_item, GlobalFuncs.get_turf( this ) );
						this.matter -= matter_rng;
						return 1;
					} else {
						GlobalFuncs.to_chat( b, new Txt( "<span class='danger'>The lack of matter in " ).the( this ).item().str( " shorts out the device!</span>" ).ToString() );
						GlobalFuncs.explosion( this.loc, 0, 0, 1, 2 );
						GlobalFuncs.qdel( this );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>You don't think you can do that again.</span>" );
					return null;
				}
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: mat_synth.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this is Obj_Item_Device_MaterialSynth_Robot ) {
				GlobalFuncs.to_chat( user, "It's been set to draw power from a power cell." );
			} else {
				GlobalFuncs.to_chat( user, "It currently holds " + this.matter + "/" + 60 + " matter-units." );
			}
			return null;
		}

		// Function from file: mat_synth.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic matID = null;

			
			if ( !( flag == true ) ) {
				return false;
			}

			if ( A is Obj_Item_Stack_Sheet ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.materials_scanned )) {
					matID = _a;
					

					if ( this.materials_scanned[matID] == A.type ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You have already scanned " ).the( A ).item().str( ".</span>" ).ToString() );
						return false;
					}
				}
				this.materials_scanned["" + Lang13.Initial( A, "name" )] = A.type;
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You successfully scan " ).the( A ).item().str( " into " ).the( this ).item().str( "'s material banks.</span>" ).ToString() );
				return true;
			}
			return base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );
		}

		// Function from file: mat_synth.dm
		public virtual dynamic TakeCost( dynamic spawned = null, int modifier = 0, dynamic user = null ) {
			
			if ( Lang13.Bool( spawned ) ) {
				this.matter -= Num13.Floor( Convert.ToDouble( spawned * modifier ) );
			}
			return null;
		}

		// Function from file: mat_synth.dm
		public bool create_material( dynamic user = null, Type material = null ) {
			Type material_type = null;
			dynamic R = null;
			int modifier = 0;
			dynamic amount = null;
			dynamic inside_sheet = null;
			dynamic created_sheet = null;
			int transfer_amount = 0;
			dynamic dropped_sheet = null;
			int transfer_amount2 = 0;
			dynamic dropped_sheet2 = null;
			int modifier2 = 0;
			int unit_can_produce = 0;
			dynamic tospawn = null;
			dynamic per_unit = null;
			dynamic spawned_sheet = null;

			material_type = material;

			if ( user is Mob_Living_Silicon_Robot ) {
				R = user;

				if ( Lang13.Bool( R ) && Lang13.Bool( R.cell ) && Lang13.Bool( R.cell.charge ) && material_type != null ) {
					modifier = 1;

					if ( Convert.ToDouble( Lang13.Initial( this.active_material, "perunit" ) ) < 3750 ) {
						modifier = 5;
					}

					if ( Convert.ToDouble( Lang13.Initial( this.active_material, "perunit" ) ) < 2000 ) {
						modifier = 15;
					}
					amount = Interface13.Input( user, "How many sheets of " + Lang13.Initial( material_type, "name" ) + " do you want to synthesize", "Material Synthesizer", null, null, InputType.Num );
					amount = ( Num13.Round( Convert.ToDouble( amount ), 1 ) <= 0 ? 0 : ( Num13.Round( Convert.ToDouble( amount ), 1 ) >= 50 ? 50 : Num13.Round( Convert.ToDouble( amount ), 1 ) ) );

					if ( Lang13.Bool( amount ) ) {
						
						if ( Lang13.Bool( this.TakeCost( amount, modifier, R ) ) ) {
							inside_sheet = Lang13.FindIn( material_type, R.module.modules );

							if ( !Lang13.Bool( inside_sheet ) ) {
								created_sheet = Lang13.Call( material_type, R.module );
								R.module.modules.Add( created_sheet );

								if ( Convert.ToDouble( amount ) <= Convert.ToDouble( created_sheet.max_amount ) ) {
									created_sheet.amount += amount - created_sheet.amount;
									GlobalFuncs.to_chat( R, "<span class='notice'>Added " + amount + " of " + Lang13.Initial( material_type, "name" ) + " to the stack.</span>" );
								} else {
									
									if ( Convert.ToDouble( created_sheet.amount ) <= Convert.ToDouble( created_sheet.max_amount ) ) {
										transfer_amount = Num13.MinInt( Convert.ToInt32( created_sheet.max_amount - created_sheet.amount ), Convert.ToInt32( amount ) );
										created_sheet.amount += transfer_amount - 1;
										amount -= transfer_amount;
									}

									if ( Convert.ToDouble( amount ) >= 1 && Convert.ToDouble( created_sheet.amount ) >= Convert.ToDouble( created_sheet.max_amount ) ) {
										GlobalFuncs.to_chat( R, "<span class='warning'>Dropping " + amount + ", you cannot hold anymore of " + Lang13.Initial( material_type, "name" ) + ".</span>" );
										dropped_sheet = Lang13.Call( material_type, GlobalFuncs.get_turf( this ) );
										dropped_sheet.amount = amount - 1;
									}
								}
							} else if ( Convert.ToDouble( inside_sheet.amount + amount ) <= Convert.ToDouble( inside_sheet.max_amount ) ) {
								inside_sheet.amount += amount;
								GlobalFuncs.to_chat( R, "<span class='notice'>Added " + amount + " of " + Lang13.Initial( material_type, "name" ) + " to the stack.</span>" );
								return false;
							} else {
								
								if ( Convert.ToDouble( inside_sheet.amount ) <= Convert.ToDouble( inside_sheet.max_amount ) ) {
									transfer_amount2 = Num13.MinInt( Convert.ToInt32( inside_sheet.max_amount - inside_sheet.amount ), Convert.ToInt32( amount ) );
									inside_sheet.amount += transfer_amount2;
									amount -= transfer_amount2;
								}

								if ( Convert.ToDouble( amount ) >= 1 && Convert.ToDouble( inside_sheet.amount ) >= Convert.ToDouble( inside_sheet.max_amount ) ) {
									GlobalFuncs.to_chat( R, "<span class='warning'>Dropping " + amount + ", you cannot hold anymore of " + Lang13.Initial( material_type, "name" ) + ".</span>" );
									dropped_sheet2 = Lang13.Call( material_type, GlobalFuncs.get_turf( this ) );
									dropped_sheet2.amount = amount;
								}
							}
							R.module.rebuild();
							R.hud_used.update_robot_modules_display();
							return false;
						} else {
							GlobalFuncs.to_chat( R, "<span class='warning'>You can't make that much " + Lang13.Initial( material_type, "name" ) + " without shutting down!</span>" );
							return false;
						}
						return false;
					}
				} else if ( Lang13.Bool( R.cell.charge ) ) {
					GlobalFuncs.to_chat( R, "<span class='warning'>You need to select a sheet type first!</span>" );
					return false;
				}
			} else if ( material_type != null && this.matter >= 1 ) {
				per_unit = Lang13.Initial( this.active_material, "perunit" );

				if ( Convert.ToDouble( per_unit ) < 2000 ) {
					modifier2 = 15;
				} else if ( Convert.ToDouble( per_unit ) < 3750 ) {
					modifier2 = 5;
				} else {
					modifier2 = 1;
				}
				unit_can_produce = Num13.Floor( this.matter / modifier2 );

				if ( unit_can_produce >= 1 ) {
					tospawn = Interface13.Input( user, "How many sheets of " + Lang13.Initial( material_type, "name" ) + " do you want to synthesize? (0 - " + unit_can_produce + ")", "Material Synthesizer", null, null, InputType.Num );
					tospawn = ( Num13.Floor( Convert.ToDouble( tospawn ) ) <= 0 ? 0 : ( Num13.Floor( Convert.ToDouble( tospawn ) ) >= unit_can_produce ? unit_can_produce : Num13.Floor( Convert.ToDouble( tospawn ) ) ) );

					if ( Convert.ToDouble( tospawn ) >= 1 ) {
						spawned_sheet = Lang13.Call( material_type, GlobalFuncs.get_turf( this ) );
						spawned_sheet.amount = tospawn;
						this.TakeCost( tospawn, modifier2, user );
					}
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " matter is not enough to create the selected material!</span>" ).ToString() );
					return false;
				}
			} else if ( this.matter >= 1 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You must select a sheet type first!</span>" );
				return false;
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is empty!</span>" ).ToString() );
			}
			return true;
		}

		// Function from file: mat_synth.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = "mat_synth" + ( this.mode ? "on" : "off" );
			return null;
		}

	}

}