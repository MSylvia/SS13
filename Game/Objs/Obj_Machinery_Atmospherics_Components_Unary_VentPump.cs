// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_VentPump : Obj_Machinery_Atmospherics_Components_Unary {

		public string id_tag = null;
		public double? on = 0;
		public double? pump_direction = 1;
		public double? pressure_checks = 1;
		public double external_pressure_bound = 101.32499694824219;
		public int internal_pressure_bound = 0;
		public double frequency = 1439;
		public RadioFrequency radio_connection = null;
		public string radio_filter_out = null;
		public string radio_filter_in = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.can_unwrench = true;
			this.level = 1;
			this.icon_state = "vent_map";
		}

		// Function from file: vent_pump.dm
		public Obj_Machinery_Atmospherics_Components_Unary_VentPump ( dynamic loc = null, int? process = null ) : base( (object)(loc), process ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !Lang13.Bool( this.id_tag ) ) {
				this.assign_uid();
				this.id_tag = String13.NumberToString( this.uid );
			}
			return;
		}

		// Function from file: vent_pump.dm
		public override bool can_crawl_through(  ) {
			return !( this.welded == true );
		}

		// Function from file: vent_pump.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon_nopipes();
			return;
		}

		// Function from file: vent_pump.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( this.welded == true ) {
				user.WriteMsg( "It seems welded shut." );
			}
			return 0;
		}

		// Function from file: vent_pump.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic WT = null;

			
			if ( A is Obj_Item_Weapon_Wrench && !( ( this.stat & 2 ) != 0 ) && Lang13.Bool( this.on ) ) {
				user.WriteMsg( "<span class='warning'>You cannot unwrench this " + this + ", turn it off first!</span>" );
				return 1;
			}

			if ( A is Obj_Item_Weapon_Weldingtool ) {
				WT = A;

				if ( ((Obj_Item_Weapon_Weldingtool)WT).remove_fuel( 0, user ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/welder.ogg", 40, 1 );
					user.WriteMsg( "<span class='notice'>You begin welding the vent...</span>" );

					if ( GlobalFuncs.do_after( user, 20 / A.toolspeed, null, this ) ) {
						
						if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
							return null;
						}
						GlobalFuncs.playsound( this.loc, "sound/items/welder2.ogg", 50, 1 );

						if ( !( this.welded == true ) ) {
							((Ent_Static)user).visible_message( "" + user + " welds the vent shut.", "<span class='notice'>You weld the vent shut.</span>", "<span class='italics'>You hear welding.</span>" );
							this.welded = true;
						} else {
							((Ent_Static)user).visible_message( "" + user + " unwelds the vent.", "<span class='notice'>You unweld the vent.</span>", "<span class='italics'>You hear welding.</span>" );
							this.welded = false;
						}
						this.update_icon();
						this.pipe_vision_img = new Image( this, this.loc, null, 20, this.dir );
					}
					return 0;
				}
			} else {
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: vent_pump.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( signal.data["tag"] ) || signal.data["tag"] != this.id_tag || signal.data["sigtype"] != "command" ) {
				return false;
			}

			if ( signal.data.Contains( "purge" ) ) {
				this.pressure_checks = ((int)( this.pressure_checks )) & ( 65534 );
				this.pump_direction = 0;
			}

			if ( signal.data.Contains( "stabalize" ) ) {
				this.pressure_checks = ((int)( this.pressure_checks )) | ( 1 );
				this.pump_direction = 1;
			}

			if ( signal.data.Contains( "power" ) ) {
				this.on = String13.ParseNumber( signal.data["power"] );
			}

			if ( signal.data.Contains( "power_toggle" ) ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
			}

			if ( signal.data.Contains( "checks" ) ) {
				this.pressure_checks = String13.ParseNumber( signal.data["checks"] );
			}

			if ( signal.data.Contains( "checks_toggle" ) ) {
				this.pressure_checks = ( Lang13.Bool( this.pressure_checks ) ? 0 : 3 );
			}

			if ( signal.data.Contains( "direction" ) ) {
				this.pump_direction = String13.ParseNumber( signal.data["direction"] );
			}

			if ( signal.data.Contains( "set_internal_pressure" ) ) {
				this.internal_pressure_bound = Num13.MaxInt( 0, Num13.MinInt( ((int)( String13.ParseNumber( signal.data["set_internal_pressure"] ) ??0 )), ((int)( 5066.25 )) ) );
			}

			if ( signal.data.Contains( "set_external_pressure" ) ) {
				this.external_pressure_bound = Num13.MaxInt( 0, Num13.MinInt( ((int)( String13.ParseNumber( signal.data["set_external_pressure"] ) ??0 )), ((int)( 5066.25 )) ) );
			}

			if ( signal.data.Contains( "reset_external_pressure" ) ) {
				this.external_pressure_bound = 101.32499694824219;
			}

			if ( signal.data.Contains( "adjust_internal_pressure" ) ) {
				this.internal_pressure_bound = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.internal_pressure_bound + ( String13.ParseNumber( signal.data["adjust_internal_pressure"] ) ??0) )), ((int)( 5066.25 )) ) );
			}

			if ( signal.data.Contains( "adjust_external_pressure" ) ) {
				this.external_pressure_bound = Num13.MaxInt( 0, Num13.MinInt( ((int)( this.external_pressure_bound + ( String13.ParseNumber( signal.data["adjust_external_pressure"] ) ??0) )), ((int)( 5066.25 )) ) );
			}

			if ( signal.data.Contains( "init" ) ) {
				this.name = signal.data["init"];
				return false;
			}

			if ( signal.data.Contains( "status" ) ) {
				this.broadcast_status();
				return false;
			}
			this.broadcast_status();
			this.update_icon();
			return false;
		}

		// Function from file: vent_pump.dm
		public override void atmosinit( ByTable node_connects = null ) {
			this.radio_filter_in = ( this.frequency == 1439 ? GlobalVars.RADIO_FROM_AIRALARM : null );
			this.radio_filter_out = ( this.frequency == 1439 ? GlobalVars.RADIO_TO_AIRALARM : null );

			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			this.broadcast_status();
			base.atmosinit( node_connects );
			return;
		}

		// Function from file: vent_pump.dm
		public bool broadcast_status(  ) {
			Signal signal = null;
			dynamic A = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = new Signal();
			signal.transmission_method = 1;
			signal.source = this;
			signal.data = new ByTable()
				.Set( "tag", this.id_tag )
				.Set( "frequency", this.frequency )
				.Set( "device", "VP" )
				.Set( "timestamp", Game13.time )
				.Set( "power", this.on )
				.Set( "direction", ( Lang13.Bool( this.pump_direction ) ? "release" : "siphon" ) )
				.Set( "checks", this.pressure_checks )
				.Set( "internal", this.internal_pressure_bound )
				.Set( "external", this.external_pressure_bound )
				.Set( "sigtype", "status" )
			;
			A = GlobalFuncs.get_area_master( this );

			if ( !Lang13.Bool( A.air_vent_names[this.id_tag] ) ) {
				this.name = new Txt().improper().item( A.name ).str( " vent pump #" ).item( A.air_vent_names.len + 1 ).ToString();
				A.air_vent_names[this.id_tag] = this.name;
			}
			A.air_vent_info[this.id_tag] = signal.data;
			this.radio_connection.post_signal( this, signal, this.radio_filter_out );
			return true;
		}

		// Function from file: vent_pump.dm
		public void set_frequency( double new_frequency = 0 ) {
			GlobalVars.SSradio.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency != 0 ) {
				this.radio_connection = GlobalVars.SSradio.add_object( this, this.frequency, this.radio_filter_in );
			}
			return;
		}

		// Function from file: vent_pump.dm
		public override int? process_atmos(  ) {
			dynamic air_contents = null;
			GasMixture environment = null;
			double environment_pressure = 0;
			int pressure_delta = 0;
			double transfer_moles = 0;
			dynamic removed = null;
			int pressure_delta2 = 0;
			double transfer_moles2 = 0;
			dynamic removed2 = null;

			base.process_atmos();

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( !Lang13.Bool( this.nodes[1] ) ) {
				this.on = 0;
			}

			if ( !Lang13.Bool( this.on ) || this.welded == true ) {
				return 0;
			}
			air_contents = this.airs[1];
			environment = this.loc.return_air();
			environment_pressure = environment.return_pressure();

			if ( ( ((int)( this.pump_direction ??0 )) & 1 ) != 0 ) {
				pressure_delta = 10000;

				if ( ( ((int)( this.pressure_checks ??0 )) & 1 ) != 0 ) {
					pressure_delta = Num13.MinInt( pressure_delta, ((int)( this.external_pressure_bound - environment_pressure )) );
				}

				if ( ( ((int)( this.pressure_checks ??0 )) & 2 ) != 0 ) {
					pressure_delta = Num13.MinInt( pressure_delta, Convert.ToInt32( air_contents.return_pressure() - this.internal_pressure_bound ) );
				}

				if ( pressure_delta > 0 ) {
					
					if ( Convert.ToDouble( air_contents.temperature ) > 0 ) {
						transfer_moles = pressure_delta * ( environment.volume ??0) / Convert.ToDouble( air_contents.temperature * 8.31 );
						removed = air_contents.remove( transfer_moles );
						this.loc.assume_air( removed );
						this.air_update_turf();
					}
				}
			} else {
				pressure_delta2 = 10000;

				if ( ( ((int)( this.pressure_checks ??0 )) & 1 ) != 0 ) {
					pressure_delta2 = Num13.MinInt( pressure_delta2, ((int)( environment_pressure - this.external_pressure_bound )) );
				}

				if ( ( ((int)( this.pressure_checks ??0 )) & 2 ) != 0 ) {
					pressure_delta2 = Num13.MinInt( pressure_delta2, ((int)( this.internal_pressure_bound - Convert.ToDouble( air_contents.return_pressure() ) )) );
				}

				if ( pressure_delta2 > 0 ) {
					
					if ( Convert.ToDouble( environment.temperature ) > 0 ) {
						transfer_moles2 = pressure_delta2 * Convert.ToDouble( air_contents.volume ) / Convert.ToDouble( environment.temperature * 8.31 );
						removed2 = this.loc.remove_air( transfer_moles2 );

						if ( removed2 == null ) {
							return null;
						}
						air_contents.merge( removed2 );
						this.air_update_turf();
					}
				}
			}
			this.update_parents();
			return 1;
		}

		// Function from file: vent_pump.dm
		public override void update_icon_nopipes( bool? animation = null ) {
			this.overlays.Cut();

			if ( this.showpipe ) {
				this.overlays.Add( this.getpipeimage( "icons/obj/atmospherics/components/unary_devices.dmi", "vent_cap", this.initialize_directions ) );
			}

			if ( this.welded == true ) {
				this.icon_state = "vent_welded";
				return;
			}

			if ( !Lang13.Bool( this.nodes[1] ) || !Lang13.Bool( this.on ) || ( this.stat & 3 ) != 0 ) {
				this.icon_state = "vent_off";
				return;
			}

			if ( ( ((int)( this.pump_direction ??0 )) & 1 ) != 0 ) {
				this.icon_state = "vent_out";
			} else {
				this.icon_state = "vent_in";
			}
			return;
		}

		// Function from file: vent_pump.dm
		public override dynamic Destroy(  ) {
			dynamic A = null;

			A = GlobalFuncs.get_area_master( this );
			A.air_vent_names.Remove( this.id_tag );
			A.air_vent_info.Remove( this.id_tag );

			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.frequency );
			}
			this.radio_connection = null;
			return base.Destroy();
		}

	}

}