// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_TurbineComputer : Obj_Machinery_Computer {

		public dynamic compressor = null;
		public bool id = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "turbinecomp";
			this.icon_keyboard = "tech_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_TurbineComputer);
		}

		public Obj_Machinery_Computer_TurbineComputer ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: turbine.dm
		public override int? process( dynamic seconds = null ) {
			this.updateDialog();
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			} else if ( Lang13.Bool( href_list["str"] ) ) {
				
				if ( Lang13.Bool( this.compressor ) && Lang13.Bool( this.compressor.turbine ) ) {
					this.compressor.starter = !this.compressor.starter;
				}
			} else if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=turbinecomputer" );
				Task13.User.unset_machine(  );
				return null;
			} else if ( Lang13.Bool( href_list["search"] ) ) {
				this.locate_machinery();
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			dynamic dat = null;
			Browser popup = null;

			
			if ( Lang13.Bool( this.compressor ) && Lang13.Bool( this.compressor.turbine ) ) {
				dat += "<BR><B>Gas turbine remote control system</B><HR>";

				if ( Lang13.Bool( this.compressor.stat ) || Lang13.Bool( this.compressor.turbine.stat ) ) {
					dat += "" + ( Lang13.Bool( this.compressor.stat ) ? "<B>Compressor is inoperable</B><BR>" : "<B>Turbine is inoperable</B>" );
				} else {
					dat += new Txt( "Turbine status: " ).item( ( this.compressor.starter ? new Txt( "<A href='?src=" ).Ref( this ).str( ";str=1'>Off</A> <B>On</B>" ).ToString() : new Txt( "<B>Off</B> <A href='?src=" ).Ref( this ).str( ";str=1'>On</A>" ).ToString() ) ).str( @"
			
<BR>
			
Turbine speed: " ).item( this.compressor.rpm ).str( "rpm<BR>\n			\nPower currently being generated: " ).item( this.compressor.turbine.lastgen ).str( "W<BR>\n			\nInternal gas temperature: " ).item( this.compressor.gas_contained.temperature ).str( "K<BR>\n			\n</PRE><HR><A href='?src=" ).Ref( this ).str( @";close=1'>Close</A>
			
<BR>
			
" ).ToString();
				}
			} else {
				dat += "<B>There is " + ( !Lang13.Bool( this.compressor ) ? "no compressor" : " compressor" + ( !Lang13.Bool( this.compressor.turbine ) ? " but no turbine" : "" ) ) + ".</B><BR>";

				if ( !Lang13.Bool( this.compressor ) ) {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";search=1'>Search for compressor</A>" ).ToString();
				}
			}
			popup = new Browser( user, "turbinecomputer", this.name );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: turbine.dm
		public override void locate_machinery(  ) {
			this.compressor = Lang13.FindIn( typeof(Obj_Machinery_Power_Compressor), Map13.FetchInRange( this, 5 ) );
			return;
		}

		// Function from file: turbine.dm
		public override void initialize(  ) {
			base.initialize();
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.locate_machinery();
				return;
			}));
			return;
		}

	}

}