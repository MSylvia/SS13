// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_TurbineComputer : Obj_Machinery_Computer {

		public Obj_Machinery_Compressor compressor = null;
		public ByTable doors = null;
		public bool id_tag = false;
		public bool door_status = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.light_color = "#6496FA";
			this.icon_state = "airtunnel0e";
		}

		// Function from file: turbine.dm
		public Obj_Machinery_Computer_TurbineComputer ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Machinery_Compressor C = null;
			Obj_Machinery_Door_Poddoor P = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Compressor) )) {
					C = _a;
					

					if ( this.id_tag == C.comp_id ) {
						this.compressor = C;
					}
				}
				this.doors = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.poddoors, typeof(Obj_Machinery_Door_Poddoor) )) {
					P = _b;
					

					if ( P.id_tag == this.id_tag ) {
						this.doors.Add( P );
					}
				}
				return;
			}));
			return;
		}

		// Function from file: turbine.dm
		public override dynamic process(  ) {
			this.updateDialog();
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Obj_Machinery_Door_Poddoor D = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Task13.User.contents.Find( this ) != 0 || GlobalFuncs.in_range( this, Task13.User ) && this.loc is Tile || Task13.User is Mob_Living_Silicon ) {
				Task13.User.machine = this;

				if ( Lang13.Bool( href_list["view"] ) ) {
					Task13.User.client.eye = this.compressor;
				} else if ( Lang13.Bool( href_list["str"] ) ) {
					this.compressor.starter = !this.compressor.starter;
				} else if ( Lang13.Bool( href_list["doors"] ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.doors, typeof(Obj_Machinery_Door_Poddoor) )) {
						D = _a;
						

						if ( !this.door_status ) {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								D.open();
								this.door_status = true;
								return;
							}));
						} else {
							Task13.Schedule( 0, (Task13.Closure)(() => {
								D.close();
								this.door_status = false;
								return;
							}));
						}
					}
				} else if ( Lang13.Bool( href_list["close"] ) ) {
					Interface13.Browse( Task13.User, null, "window=computer" );
					Task13.User.machine = null;
					return null;
				}
				this.add_fingerprint( Task13.User );
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic dat = null;

			a.machine = this;

			if ( this.compressor != null ) {
				dat += new Txt( "<BR><B>Gas turbine remote control system</B><HR>\n		\nTurbine status: " ).item( ( this.compressor.starter ? new Txt( "<A href='?src=" ).Ref( this ).str( ";str=1'>Off</A> <B>On</B>" ).ToString() : new Txt( "<B>Off</B> <A href='?src=" ).Ref( this ).str( ";str=1'>On</A>" ).ToString() ) ).str( @"
		
<BR>
		
Turbine speed: " ).item( this.compressor.rpm ).str( "rpm<BR>\n		\nPower currently being generated: " ).item( this.compressor.turbine.lastgen ).str( "W<BR>\n		\nInternal gas temperature: " ).item( this.compressor.gas_contained.temperature ).str( "K<BR>\n		\nVent doors: " ).item( ( this.door_status ? new Txt( "<A href='?src=" ).Ref( this ).str( ";doors=1'>Closed</A> <B>Open</B>" ).ToString() : new Txt( "<B>Closed</B> <A href='?src=" ).Ref( this ).str( ";doors=1'>Open</A>" ).ToString() ) ).str( "\n		\n</PRE><HR><A href='?src=" ).Ref( this ).str( ";view=1'>View</A>\n		\n</PRE><HR><A href='?src=" ).Ref( this ).str( @";close=1'>Close</A>
		
<BR>
		
" ).ToString();
			} else {
				dat += "<span class='warning'><B>No compatible attached compressor found.</span>";
			}
			Interface13.Browse( a, dat, "window=computer;size=400x500" );
			GlobalFuncs.onclose( a, "computer" );
			return null;
		}

		// Function from file: turbine.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Structure_Computerframe A = null;
			Obj_Item_Weapon_Circuitboard_TurbineControl M = null;
			Obj C = null;
			Obj_Structure_Computerframe A2 = null;
			Obj_Item_Weapon_Circuitboard_TurbineControl M2 = null;
			Obj C2 = null;

			
			if ( a is Obj_Item_Weapon_Screwdriver ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 20 ) ) {
					
					if ( ( this.stat & 1 ) != 0 ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>The broken glass falls out.</span>" );
						A = new Obj_Structure_Computerframe( this.loc );
						GlobalFuncs.getFromPool( typeof(Obj_Item_Weapon_Shard), this.loc );
						M = new Obj_Item_Weapon_Circuitboard_TurbineControl( A );

						foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
							C = _a;
							
							C.loc = this.loc;
						}
						M.id_tag = this.id_tag;
						A.circuit = M;
						A.state = 3;
						A.icon_state = "3";
						A.anchored = 1;
						GlobalFuncs.qdel( this );
					} else {
						GlobalFuncs.to_chat( b, "<span class='notice'>You disconnect the monitor.</span>" );
						A2 = new Obj_Structure_Computerframe( this.loc );
						M2 = new Obj_Item_Weapon_Circuitboard_TurbineControl( A2 );

						foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
							C2 = _b;
							
							C2.loc = this.loc;
						}
						M2.id_tag = this.id_tag;
						A2.circuit = M2;
						A2.state = 4;
						A2.icon_state = "4";
						A2.anchored = 1;
						GlobalFuncs.qdel( this );
					}
				}
			} else {
				this.attack_hand( b );
			}
			return null;
		}

	}

}