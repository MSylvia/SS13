// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Taperecorder : Obj_Item_Device {

		public bool emagged = false;
		public bool recording = false;
		public bool playing = false;
		public int timerecorded = 0;
		public int playsleepseconds = 0;
		public ByTable storedinfo = new ByTable();
		public ByTable timestamp = new ByTable();
		public bool canprint = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "analyzer";
			this.origin_tech = "magnets=1;programming=1";
			this.w_class = 1;
			this.starting_materials = new ByTable().Set( "$iron", 60 ).Set( "$glass", 30 );
			this.w_type = 5;
			this.melt_temperature = 453.41;
			this.flags = 272;
			this.throwforce = 2;
			this.throw_speed = 4;
			this.throw_range = 20;
			this.icon_state = "taperecorderidle";
		}

		public Obj_Item_Device_Taperecorder ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: taperecorder.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !this.recording && !this.playing ) {
				
				if ( Lang13.Bool( Task13.User.stat ) ) {
					return null;
				}

				if ( this.emagged ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The tape recorder makes a scratchy noise.</span>" );
					return null;
				}
				this.icon_state = "taperecorderrecording";

				if ( this.timerecorded < 3600 && !this.playing ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Recording started.</span>" );
					this.recording = true;
					this.timestamp.Add( this.timerecorded );
					this.storedinfo.Add( "[" + String13.FormatTime( this.timerecorded * 10, "mm:ss" ) + "] Recording started." );

					while (this.timerecorded < 3600) {
						
						if ( !this.recording ) {
							break;
						}
						this.timerecorded++;
						Task13.Sleep( 10 );
					}
					this.recording = false;
					this.icon_state = "taperecorderidle";
					return null;
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Either your tape recorder's memory is full, or it is currently playing back its memory.</span>" );
				}
			} else {
				
				if ( Lang13.Bool( Task13.User.stat ) ) {
					GlobalFuncs.to_chat( Task13.User, "Not when you're incapacitated." );
					return null;
				}

				if ( this.recording ) {
					this.recording = false;
					this.timestamp.Add( this.timerecorded );
					this.storedinfo.Add( "[" + String13.FormatTime( this.timerecorded * 10, "mm:ss" ) + "] Recording stopped." );
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Recording stopped.</span>" );
					this.icon_state = "taperecorderidle";
					return null;
				} else if ( this.playing ) {
					this.playing = false;
					this.recorder_message( "Playback stopped" );
					this.icon_state = "taperecorderidle";
					return null;
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Stop what?</span>" );
					return null;
				}
			}
			return null;
		}

		// Function from file: taperecorder.dm
		public void recorder_message( string msg = null ) {
			this.visible_message( "<font color=Maroon><B>Tape Recorder</B>: " + msg + "</font>" );
			return;
		}

		// Function from file: taperecorder.dm
		public void explode(  ) {
			dynamic T = null;
			Ent_Static M = null;

			T = GlobalFuncs.get_turf( this.loc );

			if ( this.loc is Mob ) {
				M = this.loc;
				GlobalFuncs.to_chat( M, new Txt( "<span class='danger'>" ).The( this ).item().str( " explodes!</span>" ).ToString() );
			}

			if ( Lang13.Bool( T ) ) {
				((Tile)T).hotspot_expose( 700, 125, null, this.loc is Tile );
				GlobalFuncs.explosion( T, -1, -1, 0, 4 );
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: taperecorder.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Weapon_Card_Emag ) {
				
				if ( !this.emagged ) {
					this.emagged = true;
					this.recording = false;
					GlobalFuncs.to_chat( b, "<span class='warning'>PZZTTPFFFT</span>" );
					this.icon_state = "taperecorderidle";
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>It is already emagged!</span>" );
				}
			}
			return null;
		}

		// Function from file: taperecorder.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}

			if ( this.recording ) {
				this.timestamp.Add( this.timerecorded );
				this.storedinfo.Add( "[" + String13.FormatTime( this.timerecorded * 10, "mm:ss" ) + "] \"" + String13.HtmlEncode( _args[1].message ) + "\"" );
			}
			return null;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Print Transcript", group: "Object" )]
		public void print_transcript(  ) {
			Obj_Item_Weapon_Paper P = null;
			string t1 = null;
			int? i = null;

			
			if ( Task13.User.isUnconscious() ) {
				return;
			}

			if ( this.emagged ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The tape recorder makes a scratchy noise.</span>" );
				return;
			}

			if ( !this.canprint ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The recorder can't print that fast!</span>" );
				return;
			}

			if ( this.recording || this.playing ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You can't print the transcript while playing or recording!</span>" );
				return;
			}
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Transcript printed.</span>" );
			P = new Obj_Item_Weapon_Paper( GlobalFuncs.get_turf( this ) );
			t1 = "<B>Transcript:</B><BR><BR>";
			i = null;
			i = 1;

			while (this.storedinfo.len >= ( i ??0)) {
				t1 += "" + this.storedinfo[i] + "<BR>";
				i++;
			}
			P.info = t1;
			P.name = "paper- 'Transcript'";
			this.canprint = false;
			Task13.Sleep( 300 );
			this.canprint = true;
			return;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Playback Memory", group: "Object" )]
		public void playback_memory(  ) {
			int? i = null;

			
			if ( Task13.User.isUnconscious() ) {
				return;
			}

			if ( this.emagged ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The tape recorder makes a scratchy noise.</span>" );
				return;
			}

			if ( this.recording ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You can't playback when recording!</span>" );
				return;
			}

			if ( this.playing ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You're already playing!</span>" );
				return;
			}
			this.playing = true;
			this.icon_state = "taperecorderplaying";
			GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Playing started.</span>" );
			i = null;
			i = 1;

			while (this.timerecorded < 3600) {
				
				if ( !this.playing ) {
					break;
				}

				if ( this.storedinfo.len < ( i ??0) ) {
					break;
				}
				this.recorder_message( "" + this.storedinfo[i] );

				if ( this.storedinfo.len < ( i ??0) + 1 ) {
					this.playsleepseconds = 1;
					Task13.Sleep( 10 );
					this.recorder_message( "End of recording." );
				} else {
					this.playsleepseconds = Convert.ToInt32( this.timestamp[( i ??0) + 1] - this.timestamp[i] );
				}

				if ( this.playsleepseconds > 14 ) {
					Task13.Sleep( 10 );
					this.recorder_message( "Skipping " + this.playsleepseconds + " seconds of silence" );
					this.playsleepseconds = 1;
				}
				i++;
				Task13.Sleep( this.playsleepseconds * 10 );
			}
			this.icon_state = "taperecorderidle";
			this.playing = false;

			if ( this.emagged ) {
				this.recorder_message( "This tape recorder will self-destruct in... Five." );
				Task13.Sleep( 10 );
				this.recorder_message( "Four." );
				Task13.Sleep( 10 );
				this.recorder_message( "Three." );
				Task13.Sleep( 10 );
				this.recorder_message( "Two." );
				Task13.Sleep( 10 );
				this.recorder_message( "One." );
				Task13.Sleep( 10 );
				this.explode();
			}
			return;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Clear Memory", group: "Object" )]
		public void clear_memory(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}

			if ( this.emagged ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The tape recorder makes a scratchy noise.</span>" );
				return;
			}

			if ( this.recording || this.playing ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>You can't clear the memory while playing or recording!</span>" );
				return;
			} else {
				
				if ( this.storedinfo != null ) {
					this.storedinfo.Cut();
				}

				if ( this.timestamp != null ) {
					this.timestamp.Cut();
				}
				this.timerecorded = 0;
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Memory cleared.</span>" );
				return;
			}
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Stop", group: "Object" )]
		public void stop(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}

			if ( this.emagged ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The tape recorder makes a scratchy noise.</span>" );
				return;
			}

			if ( this.recording ) {
				this.recording = false;
				this.timestamp.Add( this.timerecorded );
				this.storedinfo.Add( "[" + String13.FormatTime( this.timerecorded * 10, "mm:ss" ) + "] Recording stopped." );
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Recording stopped.</span>" );
				this.icon_state = "taperecorderidle";
				return;
			} else if ( this.playing ) {
				this.playing = false;
				this.recorder_message( "Playback stopped." );
				this.icon_state = "taperecorderidle";
				return;
			}
			return;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Start Recording", group: "Object" )]
		public void record(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}

			if ( this.emagged ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The tape recorder makes a scratchy noise.</span>" );
				return;
			}
			this.icon_state = "taperecorderrecording";

			if ( this.timerecorded < 3600 && !this.playing ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Recording started.</span>" );
				this.recording = true;
				this.timestamp.Add( this.timerecorded );
				this.storedinfo.Add( "[" + String13.FormatTime( this.timerecorded * 10, "mm:ss" ) + "] Recording started." );

				while (this.timerecorded < 3600) {
					
					if ( !this.recording ) {
						break;
					}
					this.timerecorded++;
					Task13.Sleep( 10 );
				}
				this.recording = false;
				this.icon_state = "taperecorderidle";
				return;
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>Either your tape recorder's memory is full, or it is currently playing back its memory.</span>" );
			}
			return;
		}

	}

}