// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Taperecorder : Obj_Item_Device {

		public bool recording = false;
		public bool playing = false;
		public int playsleepseconds = 0;
		public dynamic mytape = null;
		public bool open_panel = false;
		public bool canprint = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "analyzer";
			this.w_class = 2;
			this.flags = 16;
			this.slot_flags = 512;
			this.languages = 65535;
			this.materials = new ByTable().Set( "$metal", 60 ).Set( "$glass", 30 );
			this.force = 2;
			this.icon_state = "taperecorder_empty";
		}

		// Function from file: taperecorder.dm
		public Obj_Item_Device_Taperecorder ( dynamic loc = null ) : base( (object)(loc) ) {
			this.mytape = new Obj_Item_Device_Tape_Random( this );
			this.update_icon();
			return;
		}

		// Function from file: taperecorder.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !Lang13.Bool( this.mytape ) || Lang13.Bool( this.mytape.ruined ) ) {
				return null;
			}

			if ( this.recording ) {
				this.__CallVerb("Stop" );
			} else {
				this.__CallVerb("Start Recording" );
			}
			return null;
		}

		// Function from file: taperecorder.dm
		public override string Hear( string message = null, dynamic speaker = null, int message_langs = 0, dynamic raw_message = null, dynamic radio_freq = null, ByTable spans = null ) {
			
			if ( Lang13.Bool( this.mytape ) && this.recording ) {
				this.mytape.timestamp.Add( this.mytape.used_capacity );
				this.mytape.storedinfo.Add( "[" + String13.FormatTime( this.mytape.used_capacity * 10, "mm:ss" ) + "] " + message );
			}
			return null;
		}

		// Function from file: taperecorder.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( !Lang13.Bool( this.mytape ) ) {
				this.icon_state = "taperecorder_empty";
			} else if ( this.recording ) {
				this.icon_state = "taperecorder_recording";
			} else if ( this.playing ) {
				this.icon_state = "taperecorder_playing";
			} else {
				this.icon_state = "taperecorder_idle";
			}
			return false;
		}

		// Function from file: taperecorder.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( this.loc == a ) {
				
				if ( Lang13.Bool( this.mytape ) ) {
					
					if ( a.l_hand != this && a.r_hand != this ) {
						base.attack_hand( (object)(a), b, c );
						return null;
					}
					this.eject( a );
					return null;
				}
			}
			base.attack_hand( (object)(a), b, c );
			return null;
		}

		// Function from file: taperecorder.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			((Obj_Item_Device_Tape)this.mytape).ruin();
			return false;
		}

		// Function from file: taperecorder.dm
		public bool can_use( Mob user = null ) {
			
			if ( user != null && user is Mob ) {
				
				if ( !user.incapacitated() ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: taperecorder.dm
		public void eject( dynamic user = null ) {
			
			if ( Lang13.Bool( this.mytape ) ) {
				user.WriteMsg( "<span class='notice'>You remove " + this.mytape + " from " + this + ".</span>" );
				this.stop();
				((Mob)user).put_in_hands( this.mytape );
				this.mytape = null;
				this.update_icon();
			}
			return;
		}

		// Function from file: taperecorder.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( !Lang13.Bool( this.mytape ) && A is Obj_Item_Device_Tape ) {
				
				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				A.loc = this;
				this.mytape = A;
				user.WriteMsg( "<span class='notice'>You insert " + A + " into " + this + ".</span>" );
				this.update_icon();
			}
			return null;
		}

		// Function from file: taperecorder.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( "The wire panel is " + ( this.open_panel ? "opened" : "closed" ) + "." );
			return 0;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Print Transcript", group: "Object" )]
		public void print_transcript(  ) {
			Obj_Item_Weapon_Paper P = null;
			string t1 = null;
			int? i = null;

			
			if ( !this.can_use( Task13.User ) ) {
				return;
			}

			if ( !Lang13.Bool( this.mytape ) ) {
				return;
			}

			if ( !this.canprint ) {
				Task13.User.WriteMsg( "<span class='notice'>The recorder can't print that fast!</span>" );
				return;
			}

			if ( this.recording || this.playing ) {
				return;
			}
			Task13.User.WriteMsg( "<span class='notice'>Transcript printed.</span>" );
			P = new Obj_Item_Weapon_Paper( GlobalFuncs.get_turf( this ) );
			t1 = "<B>Transcript:</B><BR><BR>";
			i = null;
			i = 1;

			while (this.mytape.storedinfo.len >= ( i ??0)) {
				t1 += "" + this.mytape.storedinfo[i] + "<BR>";
				i++;
			}
			P.info = t1;
			P.name = "paper- 'Transcript'";
			Task13.User.put_in_hands( P );
			this.canprint = false;
			Task13.Sleep( 300 );
			this.canprint = true;
			return;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Play Tape", group: "Object" )]
		public void play(  ) {
			int used = 0;
			int max = 0;
			int? i = null;

			
			if ( !this.can_use( Task13.User ) ) {
				return;
			}

			if ( !Lang13.Bool( this.mytape ) || Lang13.Bool( this.mytape.ruined ) ) {
				return;
			}

			if ( this.recording ) {
				return;
			}

			if ( this.playing ) {
				return;
			}
			this.playing = true;
			this.update_icon();
			Task13.User.WriteMsg( "<span class='notice'>Playing started.</span>" );
			used = this.mytape.used_capacity;
			max = this.mytape.max_capacity;
			i = null;
			i = 1;

			while (used < max) {
				
				if ( !Lang13.Bool( this.mytape ) ) {
					break;
				}

				if ( !this.playing ) {
					break;
				}

				if ( this.mytape.storedinfo.len < ( i ??0) ) {
					break;
				}
				this.say( this.mytape.storedinfo[i] );

				if ( this.mytape.storedinfo.len < ( i ??0) + 1 ) {
					this.playsleepseconds = 1;
					Task13.Sleep( 10 );
					this.say( "End of recording." );
				} else {
					this.playsleepseconds = Convert.ToInt32( this.mytape.timestamp[( i ??0) + 1] - this.mytape.timestamp[i] );
				}

				if ( this.playsleepseconds > 14 ) {
					Task13.Sleep( 10 );
					this.say( "Skipping " + this.playsleepseconds + " seconds of silence" );
					this.playsleepseconds = 1;
				}
				i++;
				Task13.Sleep( this.playsleepseconds * 10 );
			}
			this.playing = false;
			this.update_icon();
			return;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Stop", group: "Object" )]
		public void stop(  ) {
			dynamic T = null;

			
			if ( !this.can_use( Task13.User ) ) {
				return;
			}

			if ( this.recording ) {
				this.recording = false;
				this.mytape.timestamp.Add( this.mytape.used_capacity );
				this.mytape.storedinfo.Add( "[" + String13.FormatTime( this.mytape.used_capacity * 10, "mm:ss" ) + "] Recording stopped." );
				Task13.User.WriteMsg( "<span class='notice'>Recording stopped.</span>" );
				return;
			} else if ( this.playing ) {
				this.playing = false;
				T = GlobalFuncs.get_turf( this );
				((Ent_Static)T).visible_message( "<font color=Maroon><B>Tape Recorder</B>: Playback stopped.</font>" );
			}
			this.update_icon();
			return;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Start Recording", group: "Object" )]
		public void record(  ) {
			int used = 0;
			int max = 0;

			
			if ( !this.can_use( Task13.User ) ) {
				return;
			}

			if ( !Lang13.Bool( this.mytape ) || Lang13.Bool( this.mytape.ruined ) ) {
				return;
			}

			if ( this.recording ) {
				return;
			}

			if ( this.playing ) {
				return;
			}

			if ( this.mytape.used_capacity < this.mytape.max_capacity ) {
				Task13.User.WriteMsg( "<span class='notice'>Recording started.</span>" );
				this.recording = true;
				this.update_icon();
				this.mytape.timestamp.Add( this.mytape.used_capacity );
				this.mytape.storedinfo.Add( "[" + String13.FormatTime( this.mytape.used_capacity * 10, "mm:ss" ) + "] Recording started." );
				used = this.mytape.used_capacity;
				max = this.mytape.max_capacity;

				while (used < max) {
					
					if ( !this.recording ) {
						break;
					}
					this.mytape.used_capacity++;
					used++;
					Task13.Sleep( 10 );
				}
				this.recording = false;
				this.update_icon();
			} else {
				Task13.User.WriteMsg( "<span class='notice'>The tape is full.</span>" );
			}
			return;
		}

		// Function from file: taperecorder.dm
		[Verb]
		[VerbInfo( name: "Eject Tape", group: "Object" )]
		public void ejectverb(  ) {
			
			if ( !this.can_use( Task13.User ) ) {
				return;
			}

			if ( !Lang13.Bool( this.mytape ) ) {
				return;
			}
			this.eject( Task13.User );
			return;
		}

	}

}