// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Pipedispenser_Disposal : Obj_Machinery_Pipedispenser {

		public Obj_Machinery_Pipedispenser_Disposal ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pipe_dispenser.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			double? p_type = null;
			Obj_Structure_Disposalconstruct C = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return 1;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["dmake"] ) ) {
				
				if ( !this.wait ) {
					p_type = String13.ParseNumber( href_list["dmake"] );
					C = new Obj_Structure_Disposalconstruct( this.loc, p_type );

					if ( !C.can_place() ) {
						Task13.User.WriteMsg( "<span class='warning'>There's not enough room to build that here!</span>" );
						GlobalFuncs.qdel( C );
						return null;
					}
					C.add_fingerprint( Task13.User );
					C.update();
					this.wait = true;
					Task13.Schedule( 15, (Task13.Closure)(() => {
						this.wait = false;
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: pipe_dispenser.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string dat = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return 1;
			}
			dat = new Txt( "<b>Disposal Pipes</b><br><br>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 0 ).str( "'>Pipe</A><BR>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 1 ).str( "'>Bent Pipe</A><BR>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 2 ).str( "'>Junction</A><BR>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 4 ).str( "'>Y-Junction</A><BR>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 5 ).str( "'>Trunk</A><BR>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 6 ).str( "'>Bin</A><BR>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 7 ).str( "'>Outlet</A><BR>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 8 ).str( "'>Chute</A><BR>\n<A href='?src=" ).Ref( this ).str( ";dmake=" ).item( 9 ).str( "'>Sort Junction</A><BR>\n" ).ToString();
			Interface13.Browse( a, "<HEAD><TITLE>" + this + "</TITLE></HEAD><TT>" + dat + "</TT>", "window=pipedispenser" );
			return null;
		}

		// Function from file: pipe_dispenser.dm
		public override bool MouseDrop_T( Ent_Static dropping = null, Mob user = null ) {
			
			if ( !user.canmove || user.stat != 0 || user.restrained() ) {
				return false;
			}

			if ( !( dropping is Obj_Structure_Disposalconstruct ) && !( dropping is Obj_Structure_CTransitTube ) && !( dropping is Obj_Structure_CTransitTubePod ) ) {
				return false;
			}

			if ( Map13.GetDistance( user, this ) > 1 || Map13.GetDistance( this, dropping ) > 1 ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)dropping).anchored ) ) {
				return false;
			}
			GlobalFuncs.qdel( dropping );
			return false;
		}

	}

}