// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Airlock_Plasma : Obj_Machinery_Door_Airlock {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.mineral = "plasma";
			this.autoignition_temperature = 300;
			this.fire_fuel = 10;
			this.icon = "icons/obj/doors/Doorplasma.dmi";
		}

		public Obj_Machinery_Door_Airlock_Plasma ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: airlock.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			double? heat = null;

			heat = ((Obj)a).is_hot();

			if ( ( heat ??0) > 300 ) {
				this.ignite( heat );
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: airlock.dm
		public void PlasmaBurn( double? temperature = null ) {
			Tile_Simulated_Floor target_tile = null;
			GasMixture napalm = null;
			int toxinsToDeduce = 0;
			Obj_Structure_Falsewall_Plasma F = null;
			dynamic T = null;
			Tile_Simulated_Wall_Mineral_Plasma W = null;
			Obj_Machinery_Door_Airlock_Plasma D = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this.loc, 2 ), typeof(Tile_Simulated_Floor) )) {
				target_tile = _a;
				
				napalm = new GasMixture();
				toxinsToDeduce = 35;
				napalm.toxins = toxinsToDeduce;
				napalm.temperature = 673.1500244140625;
				target_tile.assume_air( napalm );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					target_tile.hotspot_expose( temperature, 400, null, true );
					return;
				}));
			}

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this, 3 ), typeof(Obj_Structure_Falsewall_Plasma) )) {
				F = _b;
				
				T = GlobalFuncs.get_turf( F );
				((Tile)T).ChangeTurf( typeof(Tile_Simulated_Wall_Mineral_Plasma) );
				GlobalFuncs.qdel( F );
				F = null;
			}

			foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInRange( this, 3 ), typeof(Tile_Simulated_Wall_Mineral_Plasma) )) {
				W = _c;
				
				W.ignite( ( temperature ??0) / 4 );
			}

			foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInRange( this, 3 ), typeof(Obj_Machinery_Door_Airlock_Plasma) )) {
				D = _d;
				
				D.ignite( ( temperature ??0) / 4 );
			}
			new Obj_Structure_DoorAssembly( this.loc );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: airlock.dm
		public override void ignite( double? temperature = null ) {
			this.PlasmaBurn( temperature );
			return;
		}

	}

}