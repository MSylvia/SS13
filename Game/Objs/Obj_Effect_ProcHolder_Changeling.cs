// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_ProcHolder_Changeling : Obj_Effect_ProcHolder {

		public string helptext = "";
		public double chemical_cost = 0;
		public int dna_cost = -1;
		public int req_dna = 0;
		public bool req_human = false;
		public int req_stat = 0;
		public int genetic_damage = 0;
		public int max_genetic_damage = 100;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.panel = "Changeling";
		}

		public Obj_Effect_ProcHolder_Changeling ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: changeling_power.dm
		public override bool Click( dynamic loc = null, string control = null, string _params = null ) {
			Mob user = null;

			user = Task13.User;

			if ( !( user != null ) || !( user.mind != null ) || !( user.mind.changeling != null ) ) {
				return false;
			}
			this.try_to_sting( user );
			return false;
		}

		// Function from file: changeling_power.dm
		public virtual bool can_be_used_by( Mob user = null ) {
			
			if ( !( user is Mob_Living_Carbon_Human ) && !( user is Mob_Living_Carbon_Monkey ) ) {
				return false;
			}

			if ( this.req_human && !( user is Mob_Living_Carbon_Human ) ) {
				return false;
			}
			return true;
		}

		// Function from file: changeling_power.dm
		public virtual bool can_sting( Mob user = null, Ent_Static target = null ) {
			Changeling c = null;

			
			if ( !( user is Mob_Living_Carbon_Human ) && !( user is Mob_Living_Carbon_Monkey ) ) {
				return false;
			}

			if ( this.req_human && !( user is Mob_Living_Carbon_Human ) ) {
				user.WriteMsg( "<span class='warning'>We cannot do that in this form!</span>" );
				return false;
			}
			c = user.mind.changeling;

			if ( c.chem_charges < this.chemical_cost ) {
				user.WriteMsg( new Txt( "<span class='warning'>We require at least " ).item( this.chemical_cost ).str( " unit" ).s().str( " of chemicals to do that!</span>" ).ToString() );
				return false;
			}

			if ( c.absorbedcount < this.req_dna ) {
				user.WriteMsg( new Txt( "<span class='warning'>We require at least " ).item( this.req_dna ).str( " sample" ).s().str( " of compatible DNA.</span>" ).ToString() );
				return false;
			}

			if ( this.req_stat < user.stat ) {
				user.WriteMsg( "<span class='warning'>We are incapacitated.</span>" );
				return false;
			}

			if ( ( user.status_flags & 8192 ) != 0 && this.name != "Regenerate" ) {
				user.WriteMsg( "<span class='warning'>We are incapacitated.</span>" );
				return false;
			}

			if ( c.geneticdamage > this.max_genetic_damage ) {
				user.WriteMsg( "<span class='warning'>Our genomes are still reassembling. We need time to recover first.</span>" );
				return false;
			}
			return true;
		}

		// Function from file: changeling_power.dm
		public void take_chemical_cost( Changeling changeling = null ) {
			changeling.chem_charges -= this.chemical_cost;
			changeling.geneticdamage += this.genetic_damage;
			return;
		}

		// Function from file: changeling_power.dm
		public virtual bool sting_feedback( Mob user = null, Ent_Static target = null ) {
			return false;
		}

		// Function from file: changeling_power.dm
		public virtual dynamic sting_action( Mob user = null, Ent_Static target = null ) {
			return 0;
		}

		// Function from file: changeling_power.dm
		public virtual void try_to_sting( Mob user = null, Ent_Static target = null ) {
			Changeling c = null;

			
			if ( !this.can_sting( user, target ) ) {
				return;
			}
			c = user.mind.changeling;

			if ( Lang13.Bool( this.sting_action( user, target ) ) ) {
				this.sting_feedback( user, target );
				this.take_chemical_cost( c );
			}
			return;
		}

		// Function from file: changeling_power.dm
		public virtual void on_refund( Mob user = null ) {
			return;
		}

		// Function from file: changeling_power.dm
		public virtual void on_purchase( Mob user = null ) {
			return;
		}

	}

}