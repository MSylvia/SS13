// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Components_Unary_CryoCell : Obj_Machinery_Atmospherics_Components_Unary {

		public int? on = 0;
		public bool autoeject = false;
		public int? volume = 100;
		public dynamic efficiency = 1;
		public dynamic sleep_factor = 750;
		public dynamic paralyze_factor = 1000;
		public dynamic heat_capacity = 50000;
		public dynamic conduction_coefficient = 0.01;
		public dynamic beaker = null;
		public int reagent_transfer = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/cryogenics.dmi";
			this.icon_state = "cell-off";
		}

		// Function from file: cryo.dm
		public Obj_Machinery_Atmospherics_Components_Unary_CryoCell ( dynamic loc = null, int? process = null ) : base( (object)(loc), process ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.initialize_directions = this.dir;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_CryoTube( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.component_parts.Add( new Obj_Item_Stack_CableCoil( null, 1 ) );
			return;
		}

		// Function from file: cryo.dm
		public override bool can_see_pipes(  ) {
			return false;
		}

		// Function from file: cryo.dm
		public override bool can_crawl_through(  ) {
			return false;
		}

		// Function from file: cryo.dm
		public override void get_remote_view_fullscreens( Mob_Living user = null ) {
			user.overlay_fullscreen( "remote_view", typeof(Obj_Screen_Fullscreen_Impaired), 1 );
			return;
		}

		// Function from file: cryo.dm
		public override bool update_remote_sight( Mob user = null ) {
			return false;
		}

		// Function from file: cryo.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "power":
					
					if ( Lang13.Bool( this.on ) ) {
						this.on = GlobalVars.FALSE;
					} else if ( !Lang13.Bool( this.state_open ) ) {
						this.on = GlobalVars.TRUE;
					}
					_default = GlobalVars.TRUE;
					break;
				case "door":
					
					if ( Lang13.Bool( this.state_open ) ) {
						this.close_machine();
					} else {
						this.open_machine();
					}
					_default = GlobalVars.TRUE;
					break;
				case "autoeject":
					this.autoeject = !this.autoeject;
					_default = GlobalVars.TRUE;
					break;
				case "ejectbeaker":
					
					if ( Lang13.Bool( this.beaker ) ) {
						this.beaker.loc = this.loc;
						this.beaker = null;
						_default = GlobalVars.TRUE;
					}
					break;
			}
			this.update_icon();
			return _default;
		}

		// Function from file: cryo.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			ByTable occupantData = null;
			dynamic air1 = null;
			ByTable beakerContents = null;
			Reagent R = null;

			data = new ByTable();
			data["isOperating"] = this.on;
			data["hasOccupant"] = ( Lang13.Bool( this.occupant ) ? true : false );
			data["isOpen"] = this.state_open;
			data["autoEject"] = this.autoeject;
			occupantData = new ByTable();

			if ( Lang13.Bool( this.occupant ) ) {
				occupantData["name"] = this.occupant.name;
				occupantData["stat"] = this.occupant.stat;
				occupantData["health"] = this.occupant.health;
				occupantData["maxHealth"] = this.occupant.maxHealth;
				occupantData["minHealth"] = GlobalVars.config.health_threshold_dead;
				occupantData["bruteLoss"] = ((Mob_Living)this.occupant).getBruteLoss();
				occupantData["oxyLoss"] = ((Mob_Living)this.occupant).getOxyLoss();
				occupantData["toxLoss"] = ((Mob_Living)this.occupant).getToxLoss();
				occupantData["fireLoss"] = ((Mob_Living)this.occupant).getFireLoss();
				occupantData["bodyTemperature"] = this.occupant.bodytemperature;
			}
			data["occupant"] = occupantData;
			air1 = this.airs[1];
			data["cellTemperature"] = Num13.Floor( Convert.ToDouble( air1.temperature ) );
			data["isBeakerLoaded"] = ( Lang13.Bool( this.beaker ) ? true : false );
			beakerContents = new ByTable();

			if ( Lang13.Bool( this.beaker ) && Lang13.Bool( this.beaker.reagents ) && this.beaker.reagents.reagent_list.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.beaker.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					beakerContents.Add( new ByTable(new object [] { new ByTable().Set( "name", R.name ).Set( "volume", R.volume ) }) );
				}
			}
			data["beakerContents"] = beakerContents;
			return data;
		}

		// Function from file: cryo.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.notcontained_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "cryo", this.name, 400, 550, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: cryo.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_ReagentContainers_Glass ) {
				
				if ( user is Mob_Living_Silicon_Robot ) {
					return null;
				}

				if ( Lang13.Bool( this.beaker ) ) {
					user.WriteMsg( "<span class='warning'>A beaker is already loaded into " + this + "!</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				this.beaker = A;
				A.loc = this;
				((Ent_Static)user).visible_message( "" + user + " places " + A + " in " + this + ".", "<span class='notice'>You place " + A + " in " + this + ".</span>" );
			}

			if ( !Lang13.Bool( this.on ) && !Lang13.Bool( this.occupant ) && !Lang13.Bool( this.state_open ) ) {
				
				if ( this.default_deconstruction_screwdriver( user, "cell-o", "cell-off", A ) ) {
					return null;
				}

				if ( this.exchange_parts( user, A ) ) {
					return null;
				}
			}

			if ( this.default_change_direction_wrench( user, A ) ) {
				return null;
			}

			if ( this.default_pry_open( A ) ) {
				return null;
			}

			if ( this.default_deconstruction_crowbar( A ) ) {
				return null;
			}
			return null;
		}

		// Function from file: cryo.dm
		public override bool MouseDrop_T( Ent_Static dropping = null, Mob user = null ) {
			
			if ( user.stat != 0 || Lang13.Bool( user.lying ) || !this.Adjacent( user ) || !user.Adjacent( dropping ) || !( dropping is Mob_Living_Carbon ) ) {
				return false;
			}
			this.close_machine( dropping );
			return false;
		}

		// Function from file: cryo.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( Lang13.Bool( this.occupant ) ) {
				
				if ( Lang13.Bool( this.on ) ) {
					user.WriteMsg( "Someone's inside " + this + "!" );
				} else {
					user.WriteMsg( "You can barely make out a form floating in " + this + "." );
				}
			} else {
				user.WriteMsg( "" + this + " seems empty." );
			}
			return 0;
		}

		// Function from file: cryo.dm
		public override void container_resist( Mob user = null ) {
			user.WriteMsg( "<span class='notice'>You struggle inside the cryotube, kicking the release with your foot... (This will take around 30 seconds.)</span>" );
			this.audible_message( "<span class='notice'>You hear a thump from " + this + ".</span>" );

			if ( GlobalFuncs.do_after( user, 300 ) ) {
				
				if ( this.occupant == user ) {
					this.open_machine();
				}
			}
			return;
		}

		// Function from file: cryo.dm
		public override dynamic close_machine( Ent_Static target = null ) {
			
			if ( ( target == null || target is Mob_Living_Carbon ) && Lang13.Bool( this.state_open ) && !Lang13.Bool( this.panel_open ) ) {
				base.close_machine( target );
				return this.occupant;
			}
			return null;
		}

		// Function from file: cryo.dm
		public override bool open_machine( int? dump = null ) {
			
			if ( !Lang13.Bool( this.state_open ) && !Lang13.Bool( this.panel_open ) ) {
				this.on = GlobalVars.FALSE;
				base.open_machine( dump );

				if ( Lang13.Bool( this.beaker ) ) {
					this.beaker.loc = this;
				}
			}
			return false;
		}

		// Function from file: cryo.dm
		public override bool relaymove( Mob user = null, int? direction = null ) {
			this.container_resist( user );
			return false;
		}

		// Function from file: cryo.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: cryo.dm
		public override int? process_atmos(  ) {
			GasMixture air1 = null;
			dynamic cold_protection = null;
			dynamic H = null;
			dynamic temperature_delta = null;
			double air_heat_capacity = 0;
			double heat = 0;

			base.process_atmos();

			if ( !Lang13.Bool( this.on ) ) {
				return null;
			}
			air1 = this.airs[1];

			if ( !Lang13.Bool( this.nodes[1] ) || !Lang13.Bool( this.airs[1] ) || Convert.ToDouble( air1.gases["o2"][1] ) < 5 ) {
				this.on = GlobalVars.FALSE;
				this.update_icon();
				return null;
			}

			if ( Lang13.Bool( this.occupant ) ) {
				cold_protection = 0;
				H = this.occupant;

				if ( H is Mob_Living_Carbon_Human ) {
					cold_protection = ((Mob_Living_Carbon_Human)H).get_cold_protection( air1.temperature );
				}
				temperature_delta = air1.temperature - this.occupant.bodytemperature;

				if ( Math.Abs( Convert.ToDouble( temperature_delta ) ) > 1 ) {
					air_heat_capacity = air1.heat_capacity();
					heat = ( ( 1 - Convert.ToDouble( cold_protection ) ) / 10 + Convert.ToDouble( this.conduction_coefficient ) ) * Convert.ToDouble( temperature_delta ) * ( air_heat_capacity * Convert.ToDouble( this.heat_capacity ) / ( air_heat_capacity + Convert.ToDouble( this.heat_capacity ) ) );
					air1.temperature = Num13.MaxInt( Convert.ToInt32( air1.temperature - heat / air_heat_capacity ), ((int)( 2.7 )) );
					this.occupant.bodytemperature = Num13.MaxInt( Convert.ToInt32( this.occupant.bodytemperature + heat / Convert.ToDouble( this.heat_capacity ) ), ((int)( 2.7 )) );
				}
				air1.gases["o2"][1] -= 0.5 / Convert.ToDouble( this.efficiency );
			}
			return null;
		}

		// Function from file: cryo.dm
		public override int? process( dynamic seconds = null ) {
			GasMixture air1 = null;

			base.process( (object)(seconds) );

			if ( !Lang13.Bool( this.on ) ) {
				return null;
			}

			if ( !this.is_operational() ) {
				this.on = GlobalVars.FALSE;
				this.update_icon();
				return null;
			}
			air1 = this.airs[1];

			if ( Lang13.Bool( this.occupant ) ) {
				
				if ( Convert.ToDouble( this.occupant.health ) >= 100 ) {
					this.on = GlobalVars.FALSE;
					this.update_icon();
					GlobalFuncs.playsound( this.loc, "sound/machines/ding.ogg", this.volume, 1 );

					if ( this.autoeject ) {
						this.open_machine();
					}
					return null;
				} else if ( Convert.ToInt32( this.occupant.stat ) == 2 ) {
					return null;
				}

				if ( Convert.ToDouble( this.occupant.bodytemperature ) < 273.41 ) {
					((Mob)this.occupant).Sleeping( this.occupant.bodytemperature / this.sleep_factor * 100 );
					((Mob)this.occupant).Paralyse( this.occupant.bodytemperature / this.paralyze_factor * 100 );
				}

				if ( Lang13.Bool( this.beaker ) ) {
					
					if ( this.reagent_transfer == 0 ) {
						((Reagents)this.beaker.reagents).trans_to( this.occupant, 1, this.efficiency * 10 );
						((Reagents)this.beaker.reagents).reaction( this.occupant, GlobalVars.VAPOR );
						air1.gases["o2"][1] -= 2 / Convert.ToDouble( this.efficiency );
					}

					if ( ++this.reagent_transfer >= Convert.ToDouble( this.efficiency * 10 ) ) {
						this.reagent_transfer = 0;
					}
				}
			}
			return 1;
		}

		// Function from file: cryo.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( Lang13.Bool( this.panel_open ) ) {
				this.icon_state = "cell-o";
			} else if ( Lang13.Bool( this.state_open ) ) {
				this.icon_state = "cell-open";
			} else if ( Lang13.Bool( this.on ) && this.is_operational() ) {
				
				if ( Lang13.Bool( this.occupant ) ) {
					this.icon_state = "cell-occupied";
				} else {
					this.icon_state = "cell-on";
				}
			} else {
				this.icon_state = "cell-off";
			}
			return false;
		}

		// Function from file: cryo.dm
		public override dynamic Destroy(  ) {
			this.beaker = null;
			return base.Destroy();
		}

		// Function from file: cryo.dm
		public override void RefreshParts(  ) {
			dynamic C = null;
			Obj_Item_Weapon_StockParts_MatterBin M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _a;
				
				C += M.rating;
			}
			this.efficiency = Lang13.Initial( this, "efficiency" ) * C;
			this.sleep_factor = Lang13.Initial( this, "sleep_factor" ) * C;
			this.paralyze_factor = Lang13.Initial( this, "paralyze_factor" ) * C;
			this.heat_capacity = Lang13.Initial( this, "heat_capacity" ) / C;
			this.conduction_coefficient = Lang13.Initial( this, "conduction_coefficient" ) * C;
			return;
		}

		// Function from file: cryo.dm
		public override void construction( dynamic pipe_type = null, dynamic obj_color = null ) {
			base.construction( this.dir, this.dir );
			return;
		}

	}

}