// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Analyzer_PlantAnalyzer : Obj_Item_Device_Analyzer {

		public string form_title = null;
		public dynamic last_data = null;
		public int last_print = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "hydro";
		}

		public Obj_Item_Device_Analyzer_PlantAnalyzer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: hydro_tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["print"] ) ) {
				this.print_report( Task13.User );
			}

			if ( Lang13.Bool( href_list["clear"] ) ) {
				this.last_data = "";
				Interface13.Browse( Task13.User, null, "window=plant_analyzer" );
			}
			return null;
		}

		// Function from file: hydro_tools.dm
		public void print_report( Mob user = null ) {
			Obj_Item_Weapon_Paper P = null;

			
			if ( !Lang13.Bool( this.last_data ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).icon( this ).str( " There is no plant scan data to print.</span>" ).ToString() );
				return;
			}

			if ( Game13.time < this.last_print + 40 ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).icon( this ).str( " " ).The( this ).item().str( " is not yet ready to print again.</span>" ).ToString() );
				return;
			}
			this.last_print = Game13.time;
			P = new Obj_Item_Weapon_Paper( GlobalFuncs.get_turf( this ) );
			P.name = "paper - " + this.form_title;
			P.info = "" + this.last_data;

			if ( user is Mob_Living_Carbon_Human ) {
				user.put_in_hands( P );
			}
			user.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " spits out a piece of paper.</span>" ).ToString() );
			return;
		}

		// Function from file: hydro_tools.dm
		[VerbInfo( name: "Print Plant Report", group: "Object", access: VerbAccess.InUserContents, range: 127 )]
		public void print_report_verb(  ) {
			
			if ( !( Task13.User != null ) || Task13.User.isUnconscious() || Task13.User.restrained() || !this.Adjacent( Task13.User ) ) {
				return;
			}
			this.print_report( Task13.User );
			return;
		}

		// Function from file: hydro_tools.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( Lang13.Bool( this.last_data ) ) {
				Interface13.Browse( user, this.last_data, new Txt( "window=plant_analyzer_" ).Ref( this ).str( ";size=400x500" ).ToString() );
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).icon( this ).str( " No plant scan data in memory.</span>" ).ToString() );
			}
			return 0;
		}

		// Function from file: hydro_tools.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			Seed grown_seed = null;
			dynamic grown_reagents = null;
			dynamic G = null;
			dynamic G2 = null;
			dynamic S = null;
			dynamic H = null;
			dynamic K = null;
			dynamic dat = null;
			Reagent R = null;
			dynamic gas = null;
			dynamic gas2 = null;

			
			if ( !( flag == true ) ) {
				return false;
			}

			if ( A is Obj_Structure_Rack || A is Obj_Structure_Table ) {
				return base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );
			} else if ( A is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown ) {
				G = A;
				grown_seed = GlobalVars.plant_controller.seeds[G.plantname];
				grown_reagents = G.reagents;
			} else if ( A is Obj_Item_Weapon_Grown ) {
				G2 = A;
				grown_seed = GlobalVars.plant_controller.seeds[G2.plantname];
				grown_reagents = G2.reagents;
			} else if ( A is Obj_Item_Seeds ) {
				S = A;
				grown_seed = S.seed;
			} else if ( A is Obj_Machinery_PortableAtmospherics_Hydroponics ) {
				H = A;
				grown_seed = H.seed;
				grown_reagents = H.reagents;
			} else if ( A is Obj_Effect_Plantsegment ) {
				K = A;
				grown_seed = K.seed;
			}

			if ( !( grown_seed != null ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).icon( this ).str( " " ).item( this ).str( " can tell you nothing about " ).item( A ).str( ".</span>" ).ToString() );
				return false;
			}
			this.form_title = "" + grown_seed.seed_name + " (#" + grown_seed.uid + ")";
			((Ent_Static)user).visible_message( "<span class='notice'>" + user + " runs the scanner over " + A + ".</span>" );
			dat = new ByTable();
			dat += "<h3>Plant data for " + this.form_title + "</h3>";
			dat += "<h2>General Data</h2>";
			dat += "<table>";
			dat += "<tr><td><b>Endurance</b></td><td>" + grown_seed.endurance + "</td></tr>";
			dat += "<tr><td><b>Yield</b></td><td>" + grown_seed.yield + "</td></tr>";
			dat += "<tr><td><b>Lifespan</b></td><td>" + grown_seed.lifespan + "</td></tr>";
			dat += "<tr><td><b>Maturation time</b></td><td>" + grown_seed.maturation + "</td></tr>";
			dat += "<tr><td><b>Production time</b></td><td>" + grown_seed.production + "</td></tr>";
			dat += "<tr><td><b>Potency</b></td><td>" + grown_seed.potency + "</td></tr>";
			dat += "</table>";

			if ( Lang13.Bool( grown_reagents ) && Lang13.Bool( grown_reagents.reagent_list ) && grown_reagents.reagent_list.len != 0 ) {
				dat += "<h2>Reagent Data</h2>";
				dat += "<br>This sample contains: ";

				foreach (dynamic _a in Lang13.Enumerate( grown_reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					dat += "<br>- " + R.id + ", " + ((Reagents)grown_reagents).get_reagent_amount( R.id ) + " unit(s)";
				}
			}
			dat += "<h2>Other Data</h2>";

			if ( grown_seed.harvest_repeat != 0 ) {
				dat += "This plant can be harvested repeatedly.<br>";
			}

			if ( grown_seed.immutable == -1 ) {
				dat += "This plant is highly mutable.<br>";
			} else if ( grown_seed.immutable > 0 ) {
				dat += "This plant does not possess genetics that are alterable.<br>";
			}

			if ( grown_seed.mutants != null && grown_seed.mutants.len != 0 ) {
				dat += "It exhibits a high degree of potential subspecies mutations.<br>";
			}

			if ( grown_seed.products != null && grown_seed.products.len != 0 ) {
				dat += "The mature plant will produce " + ( grown_seed.products.len == 1 ? "fruit" : "" + grown_seed.products.len + " varieties of fruit" ) + ".<br>";
			}

			if ( grown_seed.nutrient_consumption == 0 ) {
				dat += "It does not require nutrient fluid to subsist.<br>";
			} else if ( grown_seed.nutrient_consumption < 0.15 ) {
				dat += "It consumes a small amount of nutrient fluid.<br>";
			} else if ( grown_seed.nutrient_consumption > 0.25 ) {
				dat += "It requires a heavy supply of nutrient fluid.<br>";
			} else {
				dat += "It requires a moderate supply of nutrient fluid.<br>";
			}

			if ( grown_seed.water_consumption == 0 ) {
				dat += "It does not require water to subsist.<br>";
			} else if ( grown_seed.water_consumption < 1 ) {
				dat += "It requires very little water.<br>";
			} else if ( grown_seed.water_consumption > 5 ) {
				dat += "It requires a large amount of water.<br>";
			} else {
				dat += "It requires a stable supply of water.<br>";
			}
			dat += "It thrives in a temperature of " + grown_seed.ideal_heat + " Kelvin.";

			if ( Convert.ToDouble( grown_seed.lowkpa_tolerance ) < 20 ) {
				dat += "<br>It is well adapted to low pressure levels.";
			}

			if ( Convert.ToDouble( grown_seed.highkpa_tolerance ) > 220 ) {
				dat += "<br>It is well adapted to high pressure levels.";
			}

			if ( Convert.ToDouble( grown_seed.heat_tolerance ) > 50 ) {
				dat += "<br>It is well adapted to a range of temperatures.";
			} else if ( Convert.ToDouble( grown_seed.heat_tolerance ) < 10 ) {
				dat += "<br>It is very sensitive to temperature shifts.";
			}
			dat += "<br>It thrives in a light level of " + grown_seed.ideal_light + " lumen" + ( grown_seed.ideal_light == 1 ? "" : "s" ) + ".";

			if ( grown_seed.consume_gasses != null ) {
				
				foreach (dynamic _b in Lang13.Enumerate( grown_seed.consume_gasses )) {
					gas = _b;
					
					dat += "<br>It will consume " + gas + " from the environment.";
				}
			}

			if ( grown_seed.exude_gasses != null ) {
				
				foreach (dynamic _c in Lang13.Enumerate( grown_seed.exude_gasses )) {
					gas2 = _c;
					
					dat += "<br>It will exude " + gas2 + " into the environment.";
				}
			}

			if ( Convert.ToDouble( grown_seed.light_tolerance ) > 7 ) {
				dat += "<br>It is well adapted to a range of light levels.";
			} else if ( Convert.ToDouble( grown_seed.light_tolerance ) < 3 ) {
				dat += "<br>It is very sensitive to light level shifts.";
			}

			if ( grown_seed.toxins_tolerance < 3 ) {
				dat += "<br>It is highly sensitive to toxins.";
			} else if ( grown_seed.toxins_tolerance > 7 ) {
				dat += "<br>It is remarkably resistant to toxins.";
			}

			if ( grown_seed.pest_tolerance < 3 ) {
				dat += "<br>It is highly sensitive to pests.";
			} else if ( grown_seed.pest_tolerance > 7 ) {
				dat += "<br>It is remarkably resistant to pests.";
			}

			if ( grown_seed.weed_tolerance < 3 ) {
				dat += "<br>It is highly sensitive to weeds.";
			} else if ( grown_seed.weed_tolerance > 7 ) {
				dat += "<br>It is remarkably resistant to weeds.";
			}

			switch ((int)( grown_seed.spread )) {
				case 1:
					dat += "<br>It is capable of growing beyond the confines of a tray.";
					break;
				case 2:
					dat += "<br>It is a robust and vigorous vine that will spread rapidly.";
					break;
			}

			if ( Lang13.Bool( grown_seed.hematophage ) ) {
				dat += "<br>It is a highly specialized hematophage that will only draw nutrients from blood.";
			}

			switch ((int)( grown_seed.carnivorous )) {
				case 1:
					dat += "<br>It is carnivorous and will eat tray pests for sustenance.";
					break;
				case 2:
					dat += "<br>It is carnivorous and poses a significant threat to living things around it.";
					break;
			}

			if ( grown_seed.parasite != 0 ) {
				dat += "<br>It is capable of parisitizing and gaining sustenance from tray weeds.";
			}

			if ( grown_seed.alter_temp != 0 ) {
				dat += "<br>It will gradually alter the local room temperature to match it's ideal habitat.";
			}

			if ( grown_seed.ligneous != 0 ) {
				dat += "<br>It is a ligneous plant with strong and robust stems.";
			}

			if ( grown_seed.thorny != 0 ) {
				dat += "<br>It posesses a cover of sharp thorns.";
			}

			if ( grown_seed.stinging != 0 ) {
				dat += "<br>It posesses a cover of fine stingers capable of releasing chemicals on touch.";
			}

			if ( grown_seed.teleporting != 0 ) {
				dat += "<br>It posesses a high degree of temporal/spatial instability and may cause spontaneous bluespace disruptions.";
			}

			switch ((int)( grown_seed.juicy )) {
				case 1:
					dat += "<br>It's fruit is soft-skinned and abudantly juicy.";
					break;
				case 2:
					dat += "<br>It's fruit is excesively soft and juicy.";
					break;
			}

			if ( grown_seed.biolum != 0 ) {
				dat += "<br>It is " + ( Lang13.Bool( grown_seed.biolum_colour ) ? "<font color='" + grown_seed.biolum_colour + "'>bio-luminescent</font>" : "bio-luminescent" ) + ".";
			}

			if ( Lang13.Bool( dat ) ) {
				dat = GlobalFuncs.list2text( dat );
				this.last_data = dat;
				dat += new Txt( "<br><br>[<a href='?src=" ).Ref( this ).str( ";print=1'>print report</a>] [<a href='?src=" ).Ref( this ).str( ";clear=1'>clear</a>]" ).ToString();
				Interface13.Browse( user, dat, new Txt( "window=plant_analyzer_" ).Ref( this ).str( ";size=400x500" ).ToString() );
			}
			return false;
		}

	}

}