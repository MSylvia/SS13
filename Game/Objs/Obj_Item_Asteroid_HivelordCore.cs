// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Asteroid_HivelordCore : Obj_Item_Asteroid {

		public bool inert = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/food.dmi";
			this.icon_state = "boiledrorocore";
		}

		// Function from file: mining_mobs.dm
		public Obj_Item_Asteroid_HivelordCore ( dynamic loc = null ) : base( (object)(loc) ) {
			Task13.Schedule( 1200, (Task13.Closure)(() => {
				this.inert = true;
				this.desc = "The remains of a hivelord that have become useless, having been left alone too long after being harvested.";
				return;
			}));
			return;
		}

		// Function from file: mining_mobs.dm
		public bool? consume( dynamic user = null, dynamic target = null ) {
			
			if ( this.inert ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>" + this + " have become inert, its healing properties are no more.</span>" );
				return GlobalVars.TRUE;
			}

			if ( Convert.ToInt32( target.stat ) == 2 ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>" + this + " are useless on the dead.</span>" );
				return null;
			}

			if ( target.suiciding == true ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>It's dead, Jim.</span>" );
				return null;
			}

			if ( !target.hasmouth ) {
				
				if ( target != user ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You attempt to feed " ).the( this ).item().str( " to " ).item( target ).str( ", but you realize they don't have a mouth. How dumb!</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You don't have a mouth to eat " ).the( this ).item().str( " with.</span>" ).ToString() );
				}
				return null;
			}

			if ( target != user ) {
				((Ent_Static)user).visible_message( new Txt( "<span class='danger'>" ).item( user ).str( " attempts to feed " ).item( target ).str( " " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='danger'>You attempt to feed " ).item( target ).str( " " ).the( this ).item().str( ".</span>" ).ToString() );

				if ( !GlobalFuncs.do_mob( user, target ) ) {
					return null;
				}
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " feeds " + target + " the " + this + "... They look better!</span>" );
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You chomp into " ).the( this ).item().str( ", barely managing to hold it down, but feel amazingly refreshed in mere moments.</span>" ).ToString() );
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/eatfood.ogg", Rand13.Int( 10, 50 ), 1 );
			((Mob_Living)target).revive();
			((Mob)user).drop_from_inventory( this );
			GlobalFuncs.qdel( this );
			return GlobalVars.TRUE;
		}

		// Function from file: mining_mobs.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( user is Mob_Living_Carbon ) {
				return this.consume( user, user );
			}
			return null;
		}

		// Function from file: mining_mobs.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			
			if ( M is Mob_Living_Carbon && user.a_intent != "hurt" ) {
				return this.consume( user, M );
			} else {
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
		}

	}

}