// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_PipePainter : Obj_Item_Device {

		public ByTable modes = new ByTable(new object [] { "grey", "red", "blue", "cyan", "green", "yellow", "purple" });
		public dynamic mode = "grey";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "flight";
			this.icon = "icons/obj/bureaucracy.dmi";
			this.icon_state = "labeler1";
		}

		public Obj_Item_Device_PipePainter ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pipe_painter.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, "<span class='info'>It is in " + this.mode + " mode.</span>" );
			return null;
		}

		// Function from file: pipe_painter.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.mode = Interface13.Input( "Which colour do you want to use?", "Pipe painter", null, null, this.modes, InputType.Any );
			return null;
		}

		// Function from file: pipe_painter.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic P = null;

			
			if ( !( A is Obj_Machinery_Atmospherics_Pipe ) || A is Obj_Machinery_Atmospherics_Unary_Tank || A is Obj_Machinery_Atmospherics_Unary_Vent || A is Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging || A is Obj_Machinery_Atmospherics_Pipe_Simple_Insulated ) {
				return false;
			}
			P = A;
			P.color = this.mode;
			((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " paints " ).the( P ).item().str( " " ).item( this.mode ).str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You paint " ).the( P ).item().str( " " ).item( this.mode ).str( ".</span>" ).ToString() );
			P.update_icon();
			return false;
		}

	}

}