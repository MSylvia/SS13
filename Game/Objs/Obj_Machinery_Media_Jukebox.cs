// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Media_Jukebox : Obj_Machinery_Media {

		public int loop_mode = 1;
		public ByTable allowed_modes = null;
		public ByTable playlists = new ByTable();
		public string playlist_id = "";
		public dynamic playlist = null;
		public double? current_song = 0;
		public double? next_song = 0;
		public double? selected_song = 0;
		public bool autoplay = false;
		public int last_reload = 0;
		public double? last_song = 0;
		public double? screen = 1;
		public double? credits_held = 0;
		public double? credits_needed = 0;
		public double? change_cost = 10;
		public ByTable change_access = new ByTable();
		public string department = null;
		public string state_base = "jukebox2";
		public Wires_Jukebox wires = null;
		public bool pick_allowed = true;
		public bool access_unlocked = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 4;
			this.anchored = 1;
			this.custom_aghost_alerts = true;
			this.machine_flags = 1179;
			this.mech_flags = 1;
			this.emag_cost = 0;
			this.icon = "icons/obj/jukebox.dmi";
			this.icon_state = "jukebox2";
		}

		// Function from file: jukebox.dm
		public Obj_Machinery_Media_Jukebox ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.allowed_modes = GlobalVars.loopModeNames.Copy();
			this.wires = new Wires_Jukebox( this );

			if ( Lang13.Bool( this.department ) ) {
				this.linked_account = GlobalVars.department_accounts[this.department];
			} else {
				this.linked_account = GlobalVars.station_account;
			}
			return;
		}

		// Function from file: jukebox.dm
		public override int wrenchAnchor( dynamic user = null ) {
			
			if ( base.wrenchAnchor( (object)(user) ) != 0 ) {
				this.playing = this.emagged;
				this.update_music();
				this.update_icon();
			}
			return 0;
		}

		// Function from file: jukebox.dm
		public override void update_music(  ) {
			dynamic song = null;

			
			if ( !Lang13.Bool( this.playlist ) ) {
				this.process();

				if ( !Lang13.Bool( this.playlist ) || !( this.playlist.len != 0 ) ) {
					return;
				}
			}

			if ( ( this.current_song ??0) > this.playlist.len ) {
				this.current_song = 0;
			}

			if ( Lang13.Bool( this.current_song ) && this.playing != 0 ) {
				song = this.playlist[this.current_song];
				this.media_url = song.url;
				this.last_song = this.current_song;
				this.media_start_time = Game13.time;
				this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " " ).The( this ).item().str( " begins to play " ).item( song.display() ).str( ".</span>" ).ToString(), "<em>You hear music.</em>" );
			} else {
				this.media_url = "";
				this.media_start_time = 0;
			}
			base.update_music();
			return;
		}

		// Function from file: jukebox.dm
		public override dynamic process(  ) {
			dynamic song = null;

			
			if ( !Lang13.Bool( this.playlist ) ) {
				
				if ( !this.retrieve_playlist() ) {
					return null;
				}
			}

			if ( this.playing != 0 ) {
				
				if ( Lang13.Bool( this.current_song ) && this.playlist.len != 0 ) {
					song = this.playlist[this.current_song];
				}

				if ( !Lang13.Bool( this.current_song ) || Lang13.Bool( song ) && Game13.time >= ( this.media_start_time ??0) + Convert.ToDouble( song.length ) ) {
					this.current_song = 1;

					if ( Lang13.Bool( this.next_song ) ) {
						this.current_song = this.next_song;
						this.next_song = 0;
					} else {
						
						switch ((int)( this.loop_mode )) {
							case 1:
								
								while (true) {
									this.current_song = Rand13.Int( 1, this.playlist.len );

									if ( this.current_song != this.last_song || this.playlist.len < 4 ) {
										break;
									}
								}
								break;
							case 2:
								this.current_song = this.current_song;
								break;
							case 3:
								this.playing = 0;
								this.update_icon();
								return null;
								break;
						}
					}
					this.update_music();
				}
			}
			return null;
		}

		// Function from file: jukebox.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			MoneyAccount new_linked_account = null;
			dynamic song = null;

			
			if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.isAdminGhost( Task13.User ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't push buttons when your fingers go right through them, dummy.</span>" );
				return null;
			}

			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( this.emagged != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You touch the bluescreened menu. Nothing happens. You feel dumber.</span>" );
				return null;
			}

			if ( Lang13.Bool( href_list["power"] ) ) {
				this.playing = !( this.playing != 0 ) ?1:0;
				this.update_music();
				this.update_icon();
			}

			if ( href_list.Contains( "screen" ) ) {
				
				if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "" ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
					return null;
				}
				this.screen = String13.ParseNumber( href_list["screen"] );
			}

			if ( href_list.Contains( "act" ) ) {
				
				dynamic _a = href_list["act"]; // Was a switch-case, sorry for the mess.
				if ( _a=="Save Settings" ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "saved settings for" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					new_linked_account = GlobalFuncs.get_money_account( String13.ParseNumber( href_list["payableto"] ), this.z );

					if ( !( new_linked_account != null ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Unable to link new account. Aborting.</span>" );
						return null;
					}
					this.change_cost = Num13.MaxInt( 0, ((int)( String13.ParseNumber( href_list["set_change_cost"] ) ??0 )) );
					this.linked_account = new_linked_account;

					if ( Lang13.Bool( ((dynamic)( href_list != null && href_list["lock"] != "" )).Contains( "lock" ) ) ) {
						this.change_access = new ByTable(new object [] { String13.ParseNumber( href_list["lock"] ) });
					} else {
						this.change_access = new ByTable();
					}
					this.screen = 6;
				}
			}

			if ( Lang13.Bool( href_list["playlist"] ) ) {
				
				if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "" ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
					return null;
				}

				if ( !this.check_reload() ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You must wait 60 seconds between playlist reloads.</span>" );
					return null;
				}
				this.playlist_id = href_list["playlist"];

				if ( GlobalFuncs.isAdminGhost( Task13.User ) ) {
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " changed " + this + " playlist to " + this.playlist_id + " at " + GlobalFuncs.formatJumpTo( this ) );
				}
				this.last_reload = Game13.time;
				this.playlist = null;
				this.current_song = 0;
				this.next_song = 0;
				this.selected_song = 0;
				this.update_music();
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["song"] ) ) {
				
				if ( this.wires.IsIndexCut( GlobalVars.JUKE_CAPITAL ) != 0 ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You select a song, but " + this + " is unresponsive...</span>" );
					return null;
				}

				if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "" ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
					return null;
				}
				this.selected_song = ( ( String13.ParseNumber( href_list["song"] ) ??0) <= 1 ? 1 : ( ( String13.ParseNumber( href_list["song"] ) ??0) >= this.playlist.len ? this.playlist.len : String13.ParseNumber( href_list["song"] ) ) );

				if ( GlobalFuncs.isAdminGhost( Task13.User ) ) {
					song = this.playlist[this.selected_song];
					GlobalFuncs.log_adminghost( "" + GlobalFuncs.key_name_admin( Task13.User ) + " changed " + this + " next song to #" + this.selected_song + " (" + song.display() + ") at " + GlobalFuncs.formatJumpTo( this ) );
				}

				if ( !Lang13.Bool( this.change_cost ) || GlobalFuncs.isAdminGhost( Task13.User ) ) {
					this.next_song = this.selected_song;
					this.selected_song = 0;

					if ( !Lang13.Bool( this.current_song ) ) {
						this.update_music();
						this.update_icon();
					}
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Swipe card or insert $" + GlobalFuncs.num2septext( this.change_cost ) + " to set this song.</span>" );
					this.screen = 2;
					this.credits_needed = this.change_cost;
				}
			}

			if ( Lang13.Bool( href_list["cancelbuy"] ) ) {
				this.selected_song = 0;
				this.screen = 1;
			}

			if ( Lang13.Bool( href_list["mode"] ) ) {
				this.loop_mode = this.loop_mode % 3 + 1;
			}
			return this.attack_hand( Task13.User );
		}

		// Function from file: jukebox.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				((Ent_Static)user).visible_message( "<span class='warning'>" + user.name + " slides something into the " + this.name + "'s card-reader.</span>", "<span class='warning'>You short out the " + this.name + ".</span>" );
				this.wires.CutWireIndex( GlobalVars.JUKE_CONFIG );
				this.f_short();
			}
			return 0;
		}

		// Function from file: jukebox.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			dynamic I = null;
			MoneyAccount acct = null;
			dynamic C = null;
			Obj_Item_Weapon_Storage_Box B = null;

			_default = base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( a is Obj_Item_Device_Multitool || a is Obj_Item_Weapon_Wirecutters ) {
				
				if ( this.panel_open ) {
					this.wires.Interact( b );
				}
				return _default;
			}

			if ( a is Obj_Item_Weapon_Card_Id ) {
				
				if ( !Lang13.Bool( this.selected_song ) || this.screen != 2 ) {
					this.visible_message( "<span class='notice'>The machine buzzes.</span>", "<span class='warning'>You hear a buzz.</span>" );
					return _default;
				}
				I = a;

				if ( !( this.linked_account != null ) ) {
					this.visible_message( "<span class='warning'>The machine buzzes, and flashes \"NO LINKED ACCOUNT\" on the screen.</span>", "You hear a buzz." );
					return _default;
				}
				acct = this.get_card_account( I );

				if ( !( acct != null ) ) {
					this.visible_message( "<span class='warning'>The machine buzzes, and flashes \"NO ACCOUNT\" on the screen.</span>", "You hear a buzz." );
					return _default;
				}

				if ( ( this.credits_needed ??0) > ( acct.money ??0) ) {
					this.visible_message( "<span class='warning'>The machine buzzes, and flashes \"NOT ENOUGH FUNDS\" on the screen.</span>", "You hear a buzz." );
					return _default;
				}
				this.visible_message( "<span class='notice'>The machine beeps happily.</span>", "You hear a beep." );
				acct.charge( this.credits_needed, this.linked_account, "Song selection at " + this.areaMaster.name + "'s " + this.name + "." );
				this.credits_needed = 0;
				this.successful_purchase();
				this.attack_hand( b );
			} else if ( a is Obj_Item_Weapon_Spacecash ) {
				
				if ( !Lang13.Bool( this.selected_song ) || this.screen != 2 ) {
					this.visible_message( "<span class='notice'>The machine buzzes.</span>", "<span class='warning'>You hear a buzz.</span>" );
					return _default;
				}

				if ( !( this.linked_account != null ) ) {
					this.visible_message( "<span class='warning'>The machine buzzes, and flashes \"NO LINKED ACCOUNT\" on the screen.</span>", "You hear a buzz." );
					return _default;
				}
				C = a;
				this.credits_held += Convert.ToDouble( C.worth * C.amount );

				if ( ( this.credits_held ??0) >= ( this.credits_needed ??0) ) {
					this.visible_message( "<span class='notice'>The machine beeps happily.</span>", "You hear a beep." );
					this.credits_held -= this.credits_needed ??0;
					this.credits_needed = 0;
					this.screen = 1;

					if ( Lang13.Bool( this.credits_held ) ) {
						B = new Obj_Item_Weapon_Storage_Box( this.loc );
						GlobalFuncs.dispense_cash( this.credits_held, B );
						B.name = "change";
						B.desc = "A box of change.";
					}
					this.credits_held = 0;
					this.successful_purchase();
				}
				this.attack_hand( b );
			}
			return _default;
		}

		// Function from file: jukebox.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string t = null;
			Browser popup = null;

			
			if ( ( this.stat & 2 ) != 0 || this.any_power_cut() ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You don't see anything to mess with.</span>" );
				return null;
			}

			if ( ( this.stat & 1 ) != 0 && this.playlist != null ) {
				((Ent_Static)a).visible_message( new Txt( "<span class='danger'>" ).item( a.name ).str( " smacks the side of " ).the( this.name ).item().str( ".</span>" ).ToString(), new Txt( "<span class='warning'>You hammer the side of " ).the( this.name ).item().str( ".</span>" ).ToString() );
				this.stat &= 65534;
				this.playlist = null;
				this.playing = this.emagged;
				this.update_icon();
				return null;
			}

			if ( this.panel_open ) {
				this.wires.Interact( a );
			}
			t = "<div class=\"navbar\">";
			t += new Txt( "<a href=\"?src=" ).Ref( this ).str( ";screen=" ).item( 1 ).str( "\">Main</a>" ).ToString();

			if ( this.allowed( a ) || this.access_unlocked ) {
				t += new Txt( " | <a href=\"?src=" ).Ref( this ).str( ";screen=" ).item( 3 ).str( "\">Settings</a>" ).ToString();
			}
			t += "</div>";

			switch ((int?)( this.screen )) {
				case 1:
					t += this.ScreenMain( a );
					break;
				case 2:
					t += this.ScreenPayment( a );
					break;
				case 3:
					t += this.ScreenSettings( a );
					break;
			}
			((Mob)a).set_machine( this );
			popup = new Browser( a, "jukebox", this.name, 420, 700 );
			popup.set_content( t );
			//popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: jukebox.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays = 0;

			if ( ( this.stat & 3 ) != 0 || !Lang13.Bool( this.anchored ) || this.any_power_cut() ) {
				
				if ( ( this.stat & 1 ) != 0 ) {
					this.icon_state = "" + this.state_base + "-broken";
				} else {
					this.icon_state = "" + this.state_base + "-nopower";
				}
				this.stop_playing();
				return null;
			}
			this.icon_state = this.state_base;

			if ( this.playing != 0 ) {
				
				if ( this.emagged != 0 ) {
					this.overlays.Add( "" + this.state_base + "-emagged" );
				} else {
					this.overlays.Add( "" + this.state_base + "-running" );
				}
			}
			return null;
		}

		// Function from file: jukebox.dm
		public override dynamic power_change(  ) {
			base.power_change();

			if ( this.emagged != 0 && !( ( this.stat & 3 ) != 0 ) && !this.any_power_cut() ) {
				this.playing = 1;

				if ( Lang13.Bool( this.current_song ) ) {
					this.update_music();
				}
			}
			this.update_icon();
			return null;
		}

		// Function from file: jukebox.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !Lang13.Bool( a.dexterity_check() ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>You don't have the dexterity to do this!</span>" );
				return null;
			}
			this.attack_hand( a );
			return null;
		}

		// Function from file: jukebox.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.attack_hand( user );
			return null;
		}

		// Function from file: jukebox.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.wires != null ) {
				GlobalFuncs.qdel( this.wires );
				this.wires = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: jukebox.dm
		public void stop_playing(  ) {
			this.playing = 0;
			this.update_music();
			return;
		}

		// Function from file: jukebox.dm
		public void rad_pulse(  ) {
			Mob_Living_Carbon M = null;
			double rads = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( 3, this ), typeof(Mob_Living_Carbon) )) {
				M = _a;
				
				rads = Math.Sqrt( 1 / ( Map13.GetDistance( M, this ) + 1 ) ) * 50;

				if ( M is Mob_Living_Carbon_Human ) {
					M.apply_effect( rads * 2, "irradiate" );
				} else {
					M.radiation += rads;
				}
			}
			return;
		}

		// Function from file: jukebox.dm
		public void successful_purchase(  ) {
			this.next_song = this.selected_song;
			this.selected_song = 0;
			this.screen = 1;
			return;
		}

		// Function from file: jukebox.dm
		[VerbInfo( name: "short" )]
		public void f_short(  ) {
			this.emagged = !( this.emagged != 0 ) ?1:0;
			this.current_song = 0;
			this.playing = 1;

			if ( !( this.wires.IsIndexCut( GlobalVars.JUKE_SHUFFLE ) != 0 ) ) {
				this.loop_mode = 1;
			}

			if ( this.emagged != 0 ) {
				this.playlist_id = "emagged";
			} else {
				this.playlist_id = this.playlists[1];
			}
			this.last_reload = Game13.time;
			this.playlist = null;
			this.update_icon();
			this.update_music();
			return;
		}

		// Function from file: jukebox.dm
		public string ScreenSettings( dynamic user = null ) {
			string dat = null;

			
			if ( !( this.linked_account != null ) ) {
				this.linked_account = GlobalVars.station_account;
			}
			dat = new Txt( "<h1>Settings</h1>\n		<form action=\"?src=" ).Ref( this ).str( "\" method=\"get\">\n		<input type=\"hidden\" name=\"src\" value=\"" ).Ref( this ).str( @""" />
		<fieldset>
			<legend>Banking</legend>
			<div>
				<b>Payable Account:</b> <input type=""textbox"" name=""payableto"" value=""" ).item( this.linked_account.account_number ).str( @""" />
			</div>
		</fieldset>
		<fieldset>
			<legend>Pricing</legend>
			<div>
				<b>Change Song:</b> $<input type=""textbox"" name=""set_change_cost"" value=""" ).item( this.change_cost ).str( @""" />
			</div>
		</fieldset>
		<fieldset>
			<legend>Access</legend>
			<p>Permissions required to change song:</p>
			<div>
				<input type=""radio"" name=""lock"" id=""lock_none"" value=""""" ).item( ( this.change_access == new ByTable() ? " checked='selected'" : "" ) ).str( " /> <label for=\"lock_none\">None</label>\n			</div>\n			<div>\n				<input type=\"radio\" name=\"lock\" id=\"lock_bar\" value=\"" ).item( GlobalVars.access_bar ).str( "\"" ).item( ( this.change_access == new ByTable(new object [] { GlobalVars.access_bar }) ? " checked='selected'" : "" ) ).str( " /> <label for=\"lock_bar\">Bar</label>\n			</div>\n			<div>\n				<input type=\"radio\" name=\"lock\" id=\"lock_head\" value=\"" ).item( GlobalVars.access_heads ).str( "\"" ).item( ( this.change_access == new ByTable(new object [] { GlobalVars.access_heads }) ? " checked='selected'" : "" ) ).str( " /> <label for=\"lock_head\">Any Head</label>\n			</div>\n			<div>\n				<input type=\"radio\" name=\"lock\" id=\"lock_cap\" value=\"" ).item( GlobalVars.access_captain ).str( "\"" ).item( ( this.change_access == new ByTable(new object [] { GlobalVars.access_captain }) ? " checked='selected'" : "" ) ).str( @" /> <label for=""lock_cap"">Captain</label>
			</div>
		</fieldset>
		<input type=""submit"" name=""act"" value=""Save Settings"" />
		</form>" ).ToString();
			return dat;
		}

		// Function from file: jukebox.dm
		public string ScreenPayment( dynamic user = null ) {
			string t = null;
			SongInfo song = null;

			t = "<h1>Pay for Song</h1>";
			song = this.playlist[this.selected_song];
			t += new Txt( "\n	<center>\n		<p>You've selected <b>" ).item( song.displaytitle() ).str( "</b>.</p>\n		<p><b>Swipe ID card</b> or <b>insert cash</b> to play this song next! ($" ).item( GlobalFuncs.num2septext( this.change_cost ) ).str( ")</p>\n		[ <a href='?src=" ).Ref( this ).str( ";cancelbuy=1'>Cancel</a> ]\n	</center>" ).ToString();
			return t;
		}

		// Function from file: jukebox.dm
		public dynamic ScreenMain( dynamic user = null ) {
			dynamic t = null;
			dynamic plid = null;
			SongInfo song = null;
			SongInfo song2 = null;
			int? i = null;
			bool can_change = false;
			SongInfo song3 = null;

			t = new ByTable();
			t += "<h1>Jukebox Interface</h1>";
			t += new Txt( "<b>Power:</b> <a href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( this.playing != 0 ? "On" : "Off" ) ).str( "</a><br />" ).ToString();
			t += new Txt( "<b>Play Mode:</b> <a href='?src=" ).Ref( this ).str( ";mode=1'>" ).item( this.allowed_modes[this.loop_mode] ).str( "</a><br />" ).ToString();

			if ( this.playlist == null ) {
				t += "[DOWNLOADING PLAYLIST, PLEASE WAIT]";
			} else {
				
				if ( this.req_access.len == 0 || this.allowed( user ) || this.access_unlocked ) {
					
					if ( this.check_reload() ) {
						t += "<b>Playlist:</b> ";

						foreach (dynamic _a in Lang13.Enumerate( this.playlists )) {
							plid = _a;
							
							t += new Txt( "<a href='?src=" ).Ref( this ).str( ";playlist=" ).item( plid ).str( "'>" ).item( this.playlists[plid] ).str( "</a>" ).ToString();
						}
					} else {
						t += "<i>Please wait before changing playlists.</i>";
					}
				} else {
					t += "<i>You cannot change the playlist.</i>";
				}
				t += "<br />";

				if ( Lang13.Bool( this.current_song ) ) {
					
					if ( !( this.playlist.len != 0 ) ) {
						this.playlist = null;
						this.process();

						if ( !Lang13.Bool( this.playlist ) || !( this.playlist.len != 0 ) ) {
							return null;
						}
					} else if ( ( this.current_song ??0) > this.playlist.len ) {
						this.current_song = this.playlist.len;
					}
					song = this.playlist[this.current_song];
					t += "<b>Current song:</b> " + song.artist + " - " + song.title + "<br />";
				}

				if ( Lang13.Bool( this.next_song ) ) {
					song2 = this.playlist[this.next_song];
					t += "<b>Up next:</b> " + song2.artist + " - " + song2.title + "<br />";
				}
				t += "<table class='prettytable'><tr><th colspan='2'>Artist - Title</th><th>Album</th></tr>";
				i = null;
				can_change = !Lang13.Bool( this.next_song );

				if ( this.change_access.len > 0 ) {
					
					if ( GlobalFuncs.can_access( user.GetAccess(), this.change_access ) ) {
						can_change = true;
					}
				}
				i = 1;

				while (( i ??0) <= this.playlist.len) {
					song3 = this.playlist[i];
					t += "<tr><th>#" + i + "</th><td>";

					if ( can_change ) {
						t += new Txt( "<A href='?src=" ).Ref( this ).str( ";song=" ).item( i ).str( "' class='nobg'>" ).ToString();
					}
					t += song3.displaytitle();

					if ( can_change ) {
						t += "</A>";
					}
					t += "</td><td>" + song3.album + "</td></tr>";
					i++;
				}
				t += "</table>";
			}
			t = GlobalFuncs.list2text( t );
			return t;
		}

		// Function from file: jukebox.dm
		public bool check_reload(  ) {
			return Game13.time > this.last_reload + 600;
		}

		// Function from file: jukebox.dm
		public bool any_power_cut(  ) {
			bool total = false;

			total = this.wires.IsIndexCut( GlobalVars.JUKE_POWER_ONE ) != 0 || this.wires.IsIndexCut( GlobalVars.JUKE_POWER_TWO ) != 0 || this.wires.IsIndexCut( GlobalVars.JUKE_POWER_THREE ) != 0;
			return total;
		}

		// Function from file: jukebox.dm
		public bool retrieve_playlist( string playlistid = null ) {
			playlistid = playlistid ?? this.playlist_id;

			dynamic temp = null;
			string url = null;
			dynamic response = null;
			string json = null;
			JsonReader reader = null;
			dynamic songdata = null;
			ByTable record = null;

			this.playlist_id = playlistid;

			if ( Lang13.Bool( GlobalVars.global_playlists["" + playlistid] ) ) {
				temp = GlobalVars.global_playlists["" + playlistid];
				this.playlist = temp.Copy();
			} else {
				url = "" + GlobalVars.config.media_base_url + "/index.php?playlist=" + this.playlist_id;
				Game13.log.WriteMsg( "## TESTING: " + ( "" + this + " - Updating playlist from " + url + "..." ) );

				if ( GlobalVars.config.media_secret_key != "" ) {
					url += "&key=" + GlobalVars.config.media_secret_key;
				}
				response = Game13.Export( url );
				this.playlist = new ByTable();

				if ( Lang13.Bool( response ) ) {
					json = File13.Read( response["CONTENT"] );

					if ( Lang13.Bool( ((dynamic)json).Contains( "/>" ) ) ) {
						this.visible_message( new Txt( "<span class='warning'>" ).icon( this ).str( " " ).The( this ).item().str( " buzzes, unable to update its playlist.</span>" ).ToString(), "<em>You hear a buzz.</em>" );
						this.stat &= 1;
						this.update_icon();
						return false;
					}
					reader = new JsonReader();
					reader.tokens = reader.ScanJson( json );
					reader.i = 1;
					songdata = reader.read_value();

					foreach (dynamic _a in Lang13.Enumerate( songdata, typeof(ByTable) )) {
						record = _a;
						
						this.playlist += new SongInfo( record );
					}

					if ( this.playlist.len == 0 ) {
						this.visible_message( new Txt( "<span class='warning'>" ).icon( this ).str( " " ).The( this ).item().str( " buzzes, unable to update its playlist.</span>" ).ToString(), "<em>You hear a buzz.</em>" );
						this.stat &= 1;
						this.update_icon();
						return false;
					}
					this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " " ).The( this ).item().str( " beeps, and the menu on its front fills with " ).item( this.playlist.len ).str( " items.</span>" ).ToString(), "<em>You hear a beep.</em>" );
				} else {
					Game13.log.WriteMsg( "## TESTING: " + ( "" + this + " failed to update playlist: Response null." ) );
					this.stat &= 1;
					this.update_icon();
					return false;
				}
				GlobalVars.global_playlists["" + playlistid] = this.playlist.Copy();
			}

			if ( this.autoplay ) {
				this.playing = 1;
				this.autoplay = false;
			}
			return true;
		}

	}

}