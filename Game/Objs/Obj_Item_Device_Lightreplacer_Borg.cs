// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Lightreplacer_Borg : Obj_Item_Device_Lightreplacer {

		public double recycle_eff_broken = 0.5;
		public double recycle_eff_burned = 081;
		public bool recycle_eff_ok = true;
		public double glass_per_charge = 500;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.glass_stor_max = 37500;
			this.prod_quality = 0;
			this.prod_eff = 5;
			this.cardboard_stor_max = 0;
		}

		// Function from file: lightreplacer.dm
		public Obj_Item_Device_Lightreplacer_Borg ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.supply = new Obj_Item_Weapon_Storage_Box_Lights_Mixed( this );
			this.waste = new Obj_Item_Weapon_Storage_Box_Lights( this );
			this.add_glass( this.glass_stor_max, 2 );
			return;
		}

		// Function from file: lightreplacer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double recycledglass = 0;
			Obj_Item_Weapon_Light L = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["recycle"] ) ) {
				
				if ( Lang13.Bool( this.waste ) ) {
					recycledglass = 0;

					foreach (dynamic _b in Lang13.Enumerate( this.waste, typeof(Obj_Item_Weapon_Light) )) {
						L = _b;
						

						if ( L is Obj_Item_Weapon_Light ) {
							
							switch ((int)( L.status )) {
								case 0:
									recycledglass += Convert.ToDouble( ((dynamic)L.materials).storage["$glass"] * this.recycle_eff_ok );
									break;
								case 2:
									recycledglass += Convert.ToDouble( ((dynamic)L.materials).storage["$glass"] * this.recycle_eff_broken );
									break;
								case 3:
									recycledglass += Convert.ToDouble( ((dynamic)L.materials).storage["$glass"] * this.recycle_eff_burned );
									break;
							}
							GlobalFuncs.qdel( L );
							L = null;
						}
					}
					this.add_glass( recycledglass, 2 );

					if ( Task13.User != null ) {
						this.attack_self( Task13.User );
					}
					return 1;
				}
			}
			return null;
		}

		// Function from file: lightreplacer.dm
		public void Charge( dynamic user = null ) {
			this.add_glass( this.glass_per_charge, 2 );
			return;
		}

		// Function from file: lightreplacer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;
			ByTable light_types = null;
			string lightname = null;
			Obj_Item_Weapon_Light L = null;
			ByTable light_type_cur = null;
			ByTable to_dump_5 = null;
			ByTable to_dump_all = null;
			dynamic T = null;
			dynamic light_to_ref = null;
			Browser popup = null;

			dat = "<TITLE>Light Replacer Interface</TITLE>\n\n	Glass storage: " + this.glass_stor + "/" + this.glass_stor_max + "<br>";

			if ( Lang13.Bool( this.supply ) ) {
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";build=tube'>Fabricate Tube</a>\n		<a href='?src=" ).Ref( this ).str( ";build=bulb'>Fabricate Bulb</a>\n		<a href='?src=" ).Ref( this ).str( ";build=tube/he'>Fabricate High Efficiency Tube</a>\n		<a href='?src=" ).Ref( this ).str( @";build=bulb/he'>Fabricate High Efficiency Bulb</a>



		<h3>Supply Container:</h3>" ).ToString();
				light_types = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.supply, typeof(Obj_Item_Weapon_Light) )) {
					L = _a;
					
					lightname = "";

					if ( L.status == 2 ) {
						lightname += "broken ";
					} else if ( L.status == 3 ) {
						lightname += "burned-out ";
					}
					lightname += L.name;

					if ( !Lang13.Bool( light_types[lightname] ) ) {
						light_types[lightname] = new ByTable();
					}
					light_types[lightname] += L;
				}
				light_type_cur = null;
				to_dump_5 = null;
				to_dump_all = null;

				foreach (dynamic _c in Lang13.Enumerate( light_types )) {
					T = _c;
					
					to_dump_5 = new ByTable();
					to_dump_all = new ByTable();
					light_type_cur = light_types[T];

					foreach (dynamic _b in Lang13.Enumerate( light_type_cur )) {
						light_to_ref = _b;
						
						to_dump_all.Add( new Txt().Ref( light_to_ref ).ToString() );
					}
					to_dump_5 = to_dump_all.Copy( 1, Num13.MinInt( 6, to_dump_all.len + 1 ) );
					dat += new Txt( "<br><b>" ).item( T ).str( ": </b>" ).item( light_type_cur.len ).str( " | Dump to Waste: <a href='?src=" ).Ref( this ).str( ";dump=" ).Ref( light_type_cur[1] ).str( "'>1</a><a href='?src=" ).Ref( this ).str( ";dump=" ).item( GlobalFuncs.list2text( to_dump_5, ", " ) ).str( "'>5</a><a href='?src=" ).Ref( this ).str( ";dump=" ).item( GlobalFuncs.list2text( to_dump_all, ", " ) ).str( "'>All</a>" ).ToString();
				}
			} else {
				dat += "<h3>No supply container inserted. This should be impossible. Please ahelp this.</h3>";
			}

			if ( Lang13.Bool( this.supply ) || Lang13.Bool( this.waste ) ) {
				dat += new Txt( "<br><br><a href='?src=" ).Ref( this ).str( ";swap=1'>Swap Supply and Waste Containers</a>" ).ToString();
			}

			if ( Lang13.Bool( this.waste ) ) {
				dat += new Txt( "<br><br><br><h3>Waste Container:</h3>\n\n		<b>Filled: </b>" ).item( this.waste.contents.len ).str( "/" ).item( this.waste.storage_slots ).str( "<br>\n		<b><a href='?src=" ).Ref( this ).str( ";recycle=1'>Recycle Contents</a></b>\n		" ).ToString();
			} else {
				dat += "<br><br><br><h3>No waste container inserted. This should be impossible. Please ahelp this.</h3>";
			}
			popup = new Browser( user, "lightreplacer", "", null, null, this );
			popup.set_content( dat );
			popup.open();
			return null;
		}

	}

}