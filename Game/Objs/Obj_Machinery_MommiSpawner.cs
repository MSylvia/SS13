// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_MommiSpawner : Obj_Machinery {

		public bool building = false;
		public int metal = 0;
		public int metalPerMoMMI = 10;
		public bool metalPerTick = true;
		public int recharge_time = 600;
		public bool locked_to_zlevel = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 20;
			this.active_power_usage = 5000;
			this.icon = "icons/obj/robotics.dmi";
			this.icon_state = "mommispawner-idle";
		}

		public Obj_Machinery_MommiSpawner ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: mommi_spawner.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "mommispawner-nopower";
			} else if ( this.metal < GlobalVars.metalPerMoMMI ) {
				this.icon_state = "mommispawner-recharging";
			} else if ( this.building ) {
				this.icon_state = "mommispawner-building";
			} else {
				this.icon_state = "mommispawner-idle";
			}
			return null;
		}

		// Function from file: mommi_spawner.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic mmi = null;

			
			if ( !Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				
				if ( a is Obj_Item_Device_Mmi ) {
					mmi = a;

					if ( this.building ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " is busy building something already.</span>" ).ToString() );
						return 1;
					}

					if ( !Lang13.Bool( mmi.brainmob ) ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( mmi ).item().str( " appears to be devoid of any soul.</span>" ).ToString() );
						return 1;
					}

					if ( !Lang13.Bool( mmi.brainmob.key ) ) {
						
						if ( !( GlobalFuncs.mind_can_reenter( mmi.brainmob.mind ) == true ) ) {
							GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " indicates that their mind is completely unresponsive; there's no point.</span>" ).ToString() );
							return GlobalVars.TRUE;
						}
					}

					if ( Convert.ToInt32( mmi.brainmob.stat ) == 2 ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>Yeah, good idea. Give something deader than the pizza in your fridge legs.  Mom would be so proud.</span>" );
						return GlobalVars.TRUE;
					}
					Interface13.Stat( null, GlobalVars.ticker.mode.head_revolutionaries.Contains( mmi.brainmob.mind ) );

					if ( Convert.ToInt32( mmi.brainmob.stat ) == 2 ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( "'s firmware lets out a shrill sound, and flashes 'Abnormal Memory Engram'. It refuses to accept " ).the( mmi ).item().str( ".</span>" ).ToString() );
						return GlobalVars.TRUE;
					}

					if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( mmi.brainmob, "Mobile MMI" ) ) ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " lets out an annoyed buzz and rejects " ).the( mmi ).item().str( ".</span>" ).ToString() );
						return GlobalVars.TRUE;
					}

					if ( this.metal < GlobalVars.metalPerMoMMI ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " doesn't have enough metal to complete this task.</span>" ).ToString() );
						return GlobalVars.TRUE;
					}

					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.building = true;
						this.update_icon();
						mmi.icon = null;
						mmi.invisibility = 101;
						Task13.Schedule( 50, (Task13.Closure)(() => {
							this.makeMoMMI( mmi.brainmob );
							return;
						}));
						return GlobalVars.TRUE;
					}
				}
			}
			return null;
		}

		// Function from file: mommi_spawner.dm
		public override dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			double timedifference = 0;
			string timedifference_text = null;

			
			if ( this.building ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is busy building something already.</span>" ).ToString() );
				return 1;
			}
			timedifference = Game13.time - user.client.time_died_as_mouse;

			if ( user.client.time_died_as_mouse != 0 && timedifference <= 3000 ) {
				timedifference_text = String13.FormatTime( 3000 - timedifference, "mm:ss" );
				GlobalFuncs.to_chat( user, "<span class='warning'>You may only spawn again as a mouse or MoMMI more than " + 5 + " minutes after your death. You have " + timedifference_text + " left.</span>" );
				return null;
			}

			if ( Lang13.Bool( GlobalFuncs.jobban_isbanned( user, "Mobile MMI" ) ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " lets out an annoyed buzz.</span>" ).ToString() );
				return GlobalVars.TRUE;
			}

			if ( this.metal < GlobalVars.metalPerMoMMI ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " doesn't have enough metal to complete this task.</span>" ).ToString() );
				return 1;
			}

			if ( Interface13.Alert( user, "Do you wish to be turned into a MoMMI at this position?", "Confirm", "Yes", "No" ) != "Yes" ) {
				return null;
			}
			this.building = true;
			this.update_icon();
			Task13.Schedule( 50, (Task13.Closure)(() => {
				
				if ( !( user != null ) || !( user is Mob_Dead_Observer ) ) {
					this.building = false;
					this.update_icon();
					return;
				}
				this.makeMoMMI( user );
				return;
			}));
			return null;
		}

		// Function from file: mommi_spawner.dm
		public override dynamic process(  ) {
			
			if ( ( this.stat & 2 ) != 0 || this.building || this.metal >= GlobalVars.metalPerMoMMI ) {
				return null;
			}
			this.metal += GlobalVars.metalPerTick ?1:0;

			if ( this.metal >= GlobalVars.metalPerMoMMI ) {
				this.update_icon();
			}
			return null;
		}

		// Function from file: mommi_spawner.dm
		public void makeMoMMI( Mob_Dead_Observer user = null ) {
			dynamic T = null;
			Mob_Living_Silicon_Robot_Mommi M = null;

			
			if ( !( user.client != null ) ) {
				return;
			}
			T = GlobalFuncs.get_turf( this );
			M = new Mob_Living_Silicon_Robot_Mommi( T );

			if ( !( M != null ) ) {
				return;
			}
			M.invisibility = 0;

			if ( this.locked_to_zlevel ) {
				M.add_ion_law( "You belong to the station where you were created; do not leave it." );
				M.locked_to_z = Convert.ToInt32( T.z );
			}

			if ( user.mind != null ) {
				user.mind.transfer_to( M );

				if ( M.mind.assigned_role == "MoMMI" ) {
					M.mind.original = M;
				} else if ( Lang13.Bool( user.mind.special_role ) ) {
					M.mind.store_memory( "In case you look at this after being borged, the objectives are only here until I find a way to make them not show up for you, as I can't simply delete them without screwing up round-end reporting. --NeoFite" );
				}
			}
			M.key = user.key;
			M.job = "Mobile MMI";
			user.loc = M;
			M.mmi = new Obj_Item_Device_Mmi( M );
			M.mmi.transfer_identity( user );
			M.__CallVerb("Namepick" );
			M.updatename();
			GlobalFuncs.qdel( user );
			this.metal = 0;
			this.building = false;
			this.update_icon();
			M.cell.maxcharge = 15000;
			M.cell.charge = 15000;
			return;
		}

		// Function from file: mommi_spawner.dm
		public bool canSpawn(  ) {
			return !( ( this.stat & 2 ) != 0 ) && !this.building && this.metal >= GlobalVars.metalPerMoMMI;
		}

		// Function from file: mommi_spawner.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered() ) ) {
				this.stat &= 65533;
			} else {
				this.stat |= 2;
			}
			this.update_icon();
			return null;
		}

	}

}