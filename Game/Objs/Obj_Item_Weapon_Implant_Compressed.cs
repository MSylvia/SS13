// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implant_Compressed : Obj_Item_Weapon_Implant {

		public dynamic activation_emote = "sigh";
		public Ent_Static scanned = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "implant_evil";
		}

		public Obj_Item_Weapon_Implant_Compressed ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: implant.dm
		public override bool islegal(  ) {
			return false;
		}

		// Function from file: implant.dm
		[VerbInfo( name: "implanted" )]
		[VerbArg( 1, InputType.Mob )]
		public override bool f_implanted( dynamic M = null, dynamic user = null ) {
			this.activation_emote = Interface13.Input( "Choose activation emote:", null, null, null, new ByTable(new object [] { "blink", "blink_r", "eyebrow", "chuckle", "twitch_s", "frown", "nod", "blush", "giggle", "grin", "groan", "shrug", "smile", "pale", "sniff", "whimper", "wink" }), InputType.Any );

			if ( Lang13.Bool( M.mind ) ) {
				M.mind.store_memory( "Compressed matter implant can be activated by using the " + this.activation_emote + " emote, <B>say *" + this.activation_emote + "</B> to attempt to activate.", 0, 0 );
			}
			GlobalFuncs.to_chat( M, "The implanted compressed matter implant can be activated by using the " + this.activation_emote + " emote, <B>say *" + this.activation_emote + "</B> to attempt to activate." );
			return true;
		}

		// Function from file: implant.dm
		public override bool activate( dynamic cause = null ) {
			dynamic t = null;

			t = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( this.imp_in ) ) {
				((Mob)this.imp_in).put_in_hands( this.scanned );
			} else {
				this.scanned.loc = t;
			}
			GlobalFuncs.qdel( this );
			return false;
		}

		// Function from file: implant.dm
		public override bool trigger( dynamic emote = null, Mob_Living_Carbon_Human source = null ) {
			
			if ( this.scanned == null ) {
				return false;
			}

			if ( emote == this.activation_emote ) {
				GlobalFuncs.to_chat( source, new Txt( "The air glows as " ).the( this.scanned.name ).item().str( " uncompresses." ).ToString() );
				this.activate();
			}
			return false;
		}

		// Function from file: implant.dm
		public override string get_data(  ) {
			string dat = null;

			dat = @"
<b>Implant Specifications:</b><BR>
<b>Name:</b> Nanotrasen ""Profit Margin"" Class Employee Lifesign Sensor<BR>
<b>Life:</b> Activates upon death.<BR>
<b>Important Notes:</b> Alerts crew to crewmember death.<BR>
<HR>
<b>Implant Details:</b><BR>
<b>Function:</b> Contains a compact radio signaler that triggers when the host's lifesigns cease.<BR>
<b>Special Features:</b> Alerts crew to crewmember death.<BR>
<b>Integrity:</b> Implant will occasionally be degraded by the body's immune system and thus will occasionally malfunction.";
			return dat;
		}

	}

}