// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Locator : Obj_Item_Weapon {

		public string temp = null;
		public double? frequency = 1451;
		public dynamic broadcasting = null;
		public bool listening = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 64;
			this.w_class = 2;
			this.item_state = "electronic";
			this.throw_speed = 3;
			this.materials = new ByTable().Set( "$metal", 400 );
			this.origin_tech = "magnets=1";
			this.icon = "icons/obj/device.dmi";
			this.icon_state = "locator";
		}

		public Obj_Item_Weapon_Locator ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: teleportation.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic current_location = null;
			dynamic sr = null;
			Obj_Item_Device_Radio_Beacon W = null;
			dynamic tr = null;
			dynamic direct = null;
			Obj_Item_Weapon_Implant_Tracking W2 = null;
			Ent_Static M = null;
			dynamic tr2 = null;
			dynamic direct2 = null;
			dynamic M2 = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.stat != 0 || Task13.User.restrained() ) {
				return null;
			}
			current_location = GlobalFuncs.get_turf( Task13.User );

			if ( !Lang13.Bool( current_location ) || Convert.ToInt32( current_location.z ) == 2 ) {
				Task13.User.WriteMsg( "The " + this + " is malfunctioning." );
				return null;
			}

			if ( Task13.User.contents.Find( this ) != 0 || Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["refresh"] ) ) {
					this.temp = "<B>Persistent Signal Locator</B><HR>";
					sr = GlobalFuncs.get_turf( this );

					if ( Lang13.Bool( sr ) ) {
						this.temp += "<B>Located Beacons:</B><BR>";

						foreach (dynamic _a in Lang13.Enumerate( typeof(Game13), typeof(Obj_Item_Device_Radio_Beacon) )) {
							W = _a;
							

							if ( W.frequency == this.frequency ) {
								tr = GlobalFuncs.get_turf( W );

								if ( tr.z == sr.z && Lang13.Bool( tr ) ) {
									direct = Num13.MaxInt( ((int)( Math.Abs( Convert.ToDouble( tr.x - sr.x ) ) )), ((int)( Math.Abs( Convert.ToDouble( tr.y - sr.y ) ) )) );

									if ( Convert.ToDouble( direct ) < 5 ) {
										direct = "very strong";
									} else if ( Convert.ToDouble( direct ) < 10 ) {
										direct = "strong";
									} else if ( Convert.ToDouble( direct ) < 20 ) {
										direct = "weak";
									} else {
										direct = "very weak";
									}
									this.temp += "" + W.code + "-" + GlobalFuncs.dir2text( Map13.GetDistance( sr, tr ) ) + "-" + direct + "<BR>";
								}
							}
						}
						this.temp += "<B>Extranneous Signals:</B><BR>";

						foreach (dynamic _b in Lang13.Enumerate( GlobalVars.tracked_implants, typeof(Obj_Item_Weapon_Implant_Tracking) )) {
							W2 = _b;
							

							if ( !Lang13.Bool( W2.implanted ) || !( W2.loc is Mob ) ) {
								continue;
							} else {
								M = W2.loc;

								if ( Convert.ToInt32( ((dynamic)M).stat ) == 2 ) {
									
									if ( Convert.ToDouble( ((dynamic)M).timeofdeath + 6000 ) < Game13.time ) {
										continue;
									}
								}
							}
							tr2 = GlobalFuncs.get_turf( W2 );

							if ( tr2.z == sr.z && Lang13.Bool( tr2 ) ) {
								direct2 = Num13.MaxInt( ((int)( Math.Abs( Convert.ToDouble( tr2.x - sr.x ) ) )), ((int)( Math.Abs( Convert.ToDouble( tr2.y - sr.y ) ) )) );

								if ( Convert.ToDouble( direct2 ) < 20 ) {
									
									if ( Convert.ToDouble( direct2 ) < 5 ) {
										direct2 = "very strong";
									} else if ( Convert.ToDouble( direct2 ) < 10 ) {
										direct2 = "strong";
									} else {
										direct2 = "weak";
									}
									this.temp += "" + W2.imp_in.name + "-" + GlobalFuncs.dir2text( Map13.GetDistance( sr, tr2 ) ) + "-" + direct2 + "<BR>";
								}
							}
						}
						this.temp += new Txt( "<B>You are at [" ).item( sr.x ).str( "," ).item( sr.y ).str( "," ).item( sr.z ).str( "]</B> in orbital coordinates.<BR><BR><A href='byond://?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A><BR>" ).ToString();
					} else {
						this.temp += "<B><FONT color='red'>Processing Error:</FONT></B> Unable to locate orbital position.<BR>";
					}
				} else if ( Lang13.Bool( href_list["freq"] ) ) {
					this.frequency += String13.ParseNumber( href_list["freq"] ) ??0;
					this.frequency = GlobalFuncs.sanitize_frequency( this.frequency );
				} else if ( Lang13.Bool( href_list["temp"] ) ) {
					this.temp = null;
				}

				if ( this.loc is Mob ) {
					this.attack_self( this.loc );
				} else {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( this, 1 ) )) {
						M2 = _c;
						

						if ( Lang13.Bool( M2.client ) ) {
							this.attack_self( M2 );
						}
					}
				}
			}
			return null;
		}

		// Function from file: teleportation.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;

			((Mob)user).set_machine( this );

			if ( Lang13.Bool( this.temp ) ) {
				dat = new Txt().item( this.temp ).str( "<BR><BR><A href='byond://?src=" ).Ref( this ).str( ";temp=1'>Clear</A>" ).ToString();
			} else {
				dat = new Txt( "\n<B>Persistent Signal Locator</B><HR>\nFrequency:\n<A href='byond://?src=" ).Ref( this ).str( ";freq=-10'>-</A>\n<A href='byond://?src=" ).Ref( this ).str( ";freq=-2'>-</A> " ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "\n<A href='byond://?src=" ).Ref( this ).str( ";freq=2'>+</A>\n<A href='byond://?src=" ).Ref( this ).str( ";freq=10'>+</A><BR>\n\n<A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>" ).ToString();
			}
			Interface13.Browse( user, dat, "window=radio" );
			GlobalFuncs.onclose( user, "radio" );
			return null;
		}

	}

}