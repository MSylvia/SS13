// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_ShuttleControl : Obj_Machinery_Computer {

		public Base_Data shuttle = null;
		public dynamic selected_port = null;
		public bool allow_selecting_all = false;
		public bool allow_silicons = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/shuttle_control";
			this.machine_flags = 3;
			this.light_color = "#6496FA";
			this.icon_state = "shuttle";
		}

		// Function from file: shuttle_computers.dm
		public Obj_Machinery_Computer_ShuttleControl ( dynamic loc = null ) : base( (object)(loc) ) {
			
			if ( this.shuttle != null ) {
				this.name = "" + ((dynamic)this.shuttle).name + " console";
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: shuttle_computers.dm
		public override int emag( dynamic user = null ) {
			base.emag( (object)(user) );
			this.req_access = new ByTable();
			GlobalFuncs.to_chat( Task13.User, "You disable the console's access requirement." );
			return 0;
		}

		// Function from file: shuttle_computers.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			this.visible_message( "" + Proj + " ricochets off " + this + "!" );
			return null;
		}

		// Function from file: shuttle_computers.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			ByTable ports = null;
			Obj_Structure_DockingPort_Shuttle S = null;
			string name = null;
			dynamic choice = null;
			Obj_Structure_DockingPort S2 = null;
			dynamic A = null;
			ByTable L = null;
			Shuttle S3 = null;
			dynamic name2 = null;
			dynamic choice2 = null;
			Shuttle S4 = null;
			dynamic password_attempt = null;
			ByTable L2 = null;
			Shuttle S5 = null;
			dynamic name3 = null;
			dynamic choice3 = null;
			dynamic choice4 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Task13.User is Mob_Living_Silicon && !this.allow_silicons ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>There seems to be a firewall preventing you from accessing this device.</span>" );
				return null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["move"] ) ) {
				
				if ( !( this.shuttle != null ) ) {
					return null;
				}

				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Access denied.</font>" );
					return null;
				}

				if ( !Lang13.Bool( this.selected_port ) && ((dynamic)this.shuttle).docking_ports.len >= 2 ) {
					this.selected_port = Rand13.PickFromTable( ((dynamic)this.shuttle).docking_ports - ((dynamic)this.shuttle).current_port );
				}

				if ( !this.allow_selecting_all && !Lang13.Bool( ((dynamic)this.shuttle).docking_ports.Contains( this.selected_port ) ) ) {
					return null;
				}

				if ( Lang13.Bool( this.selected_port.docked_with ) ) {
					return null;
				}
				((dynamic)this.shuttle).travel_to( this.selected_port, this, Task13.User );
				this.selected_port = null;
				this.updateUsrDialog();
			}

			if ( Lang13.Bool( href_list["link_to_port"] ) ) {
				
				if ( !( this.shuttle != null ) ) {
					return null;
				}

				if ( !Lang13.Bool( ((dynamic)this.shuttle).linked_area ) ) {
					return null;
				}

				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Access denied.</font>" );
					return null;
				}
				ports = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.shuttle).linked_area, typeof(Obj_Structure_DockingPort_Shuttle) )) {
					S = _a;
					
					name = GlobalFuncs.capitalize( S.areaname );
					ports.Add( name );
					ports[name] = S;
				}
				choice = Interface13.Input( "Select a docking port to link this shuttle to", "Shuttle maintenance", null, null, ports, InputType.Any );

				if ( !this.Adjacent( Task13.User ) && !GlobalFuncs.isAdminGhost( Task13.User ) && !( Task13.User is Mob_Living_Silicon_Ai ) ) {
					return null;
				}
				S2 = ports[choice];

				if ( S2 != null ) {
					S2.link_to_shuttle( this.shuttle );
					GlobalFuncs.to_chat( Task13.User, "Successfully linked " + GlobalFuncs.capitalize( ((dynamic)this.shuttle).name ) + " to the port." );
					this.updateUsrDialog(); return null;
				}
				GlobalFuncs.to_chat( Task13.User, "No docking ports found." );
			}

			if ( Lang13.Bool( href_list["select"] ) ) {
				
				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Access denied.</font>" );
					return null;
				}
				A = Lang13.FindIn( href_list["select"], GlobalVars.all_docking_ports );

				if ( !Lang13.Bool( A ) ) {
					return null;
				}
				this.selected_port = A;
				this.updateUsrDialog();
			}

			if ( Lang13.Bool( href_list["link_to_shuttle"] ) ) {
				
				if ( !this.allowed( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "<font color='red'>Access denied.</font>" );
					return null;
				}
				L = new ByTable();

				foreach (dynamic _c in Lang13.Enumerate( GlobalVars.shuttles, typeof(Shuttle) )) {
					S3 = _c;
					
					name2 = S3.name;

					switch ((int)( S3.can_link_to_computer )) {
						case 1:
							name2 = "" + name2 + " (requires password)";
							break;
						case 2:
							continue;
							break;
					}
					L.Add( name2 );
					L[name2] = S3;
				}
				choice2 = Interface13.Input( Task13.User, "Select a shuttle to link this computer to", "Shuttle control console", null, L, InputType.Any );

				if ( !this.Adjacent( Task13.User ) && !GlobalFuncs.isAdminGhost( Task13.User ) && !( Task13.User is Mob_Living_Silicon_Ai ) ) {
					return null;
				}

				if ( Lang13.Bool( L[choice2] ) && L[choice2] is Shuttle ) {
					S4 = L[choice2];

					if ( S4.can_link_to_computer == 1 ) {
						password_attempt = Interface13.Input( Task13.User, "Please input " + GlobalFuncs.capitalize( S4.name ) + "'s interface password:", "Shuttle control console", 0, null, InputType.Num );

						if ( !this.Adjacent( Task13.User ) && !GlobalFuncs.isAdminGhost( Task13.User ) && !( Task13.User is Mob_Living_Silicon_Ai ) ) {
							return null;
						}

						if ( S4.password == password_attempt ) {
							this.shuttle = L[choice2];
						} else {
							return null;
						}
					} else if ( S4.can_link_to_computer == 2 ) {
						return null;
					} else {
						this.link_to( L[choice2] );
					}
					GlobalFuncs.to_chat( Task13.User, "Successfully linked " + this + " to " + GlobalFuncs.capitalize( S4.name ) + "!" );
					this.updateUsrDialog();
				}
			}

			if ( Lang13.Bool( href_list["admin_link_to_shuttle"] ) ) {
				
				if ( !GlobalFuncs.isAdminGhost( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "You must be an admin for this" );
					return null;
				}
				L2 = new ByTable();

				foreach (dynamic _e in Lang13.Enumerate( GlobalVars.shuttles, typeof(Shuttle) )) {
					S5 = _e;
					
					name3 = S5.name;

					switch ((int)( S5.can_link_to_computer )) {
						case 1:
							name3 = "" + name3 + " (password)";
							break;
						case 2:
							name3 = "" + name3 + " (private)";
							break;
					}
					L2.Add( name3 );
					L2[name3] = S5;
				}
				choice3 = Interface13.Input( Task13.User, "Select a shuttle to link this computer to", "Admin abuse", null, L2, InputType.Any );

				if ( Lang13.Bool( L2[choice3] ) && L2[choice3] is Shuttle ) {
					this.shuttle = L2[choice3];
				}
			}

			if ( Lang13.Bool( href_list["admin_unlink_shuttle"] ) ) {
				
				if ( !GlobalFuncs.isAdminGhost( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "You must be an admin for this" );
					return null;
				}
				this.shuttle = null;
			}

			if ( Lang13.Bool( href_list["admin_toggle_lockdown"] ) ) {
				
				if ( !GlobalFuncs.isAdminGhost( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "You must be an admin for this" );
					return null;
				}

				if ( !Lang13.Bool( ((dynamic)this.shuttle).lockdown ) ) {
					choice4 = Interface13.Input( Task13.User, "Would you like to specify a reason?", "Admin abuse", null, new ByTable(new object [] { "Yes", "No", "Cancel" }), InputType.Any );

					if ( choice4 == "Cancel" ) {
						return null;
					}
					((dynamic)this.shuttle).lockdown = 1;

					if ( choice4 == "Yes" ) {
						((dynamic)this.shuttle).lockdown = Interface13.Input( Task13.User, "Please write a reason for locking the " + GlobalFuncs.capitalize( ((dynamic)this.shuttle).name ) + " down.", "Admin abuse", null, null, InputType.Any );
					}
				} else {
					((dynamic)this.shuttle).lockdown = 0;
				}
				this.updateUsrDialog();
			}

			if ( Lang13.Bool( href_list["admin_toggle_select_all"] ) ) {
				
				if ( !GlobalFuncs.isAdminGhost( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "You must be an admin for this" );
					return null;
				}

				if ( this.allow_selecting_all ) {
					this.allow_selecting_all = false;
					GlobalFuncs.to_chat( Task13.User, "Now selecting from shuttle's docking ports." );
				} else {
					this.allow_selecting_all = true;
					GlobalFuncs.to_chat( Task13.User, "Now selecting from all existing docking ports." );
				}
				this.updateUsrDialog();
			}

			if ( Lang13.Bool( href_list["admin_reset"] ) ) {
				
				if ( !GlobalFuncs.isAdminGhost( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "You must be an admin for this" );
					return null;
				}
				((dynamic)this.shuttle).initialize();
				GlobalFuncs.to_chat( Task13.User, "Shuttle's list of travel destinations has been reset" );
			}

			if ( Lang13.Bool( href_list["admin_toggle_silicon_use"] ) ) {
				
				if ( !GlobalFuncs.isAdminGhost( Task13.User ) ) {
					GlobalFuncs.to_chat( Task13.User, "You must be an admin for this" );
					return null;
				}

				if ( this.allow_silicons ) {
					this.allow_silicons = false;
					GlobalFuncs.to_chat( Task13.User, "Silicons can no longer use " + this + "." );
				} else {
					this.allow_silicons = true;
					GlobalFuncs.to_chat( Task13.User, "Silicons may now use " + this + " again." );
				}
				this.updateUsrDialog();
			}
			return null;
		}

		// Function from file: shuttle_computers.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic shuttle_name = null;
			string dat = null;
			string text = null;
			Obj_Structure_DockingPort_Destination D = null;
			Obj_Structure_DockingPort_Destination D2 = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			((Mob)a).set_machine( this );
			this.add_fingerprint( Task13.User );
			shuttle_name = "Unknown shuttle";

			if ( this.shuttle != null ) {
				shuttle_name = ((dynamic)this.shuttle).name;

				if ( Lang13.Bool( ((dynamic)this.shuttle).lockdown ) ) {
					dat += "<h2><font color='red'>THIS SHUTTLE IS LOCKED DOWN</font></h2><br>";

					if ( ((dynamic)this.shuttle).lockdown is string ) {
						dat += ((dynamic)this.shuttle).lockdown;
					} else {
						dat += "Additional information has not been provided.";
					}
				} else if ( !Lang13.Bool( ((dynamic)this.shuttle).linked_area ) ) {
					dat = "<h2><font color='red'>UNABLE TO FIND " + String13.ToUpper( ((dynamic)this.shuttle).name ) + "</font></h2>";
				} else if ( !Lang13.Bool( ((dynamic)this.shuttle).linked_port ) ) {
					dat += new Txt( "<h2><font color='red'>This shuttle has no docking port specified.</font></h2><br>\n				<a href='?src=" ).Ref( this ).str( ";link_to_port=1'>Scan for docking ports</a>" ).ToString();
				} else if ( Lang13.Bool( ((dynamic)this.shuttle).moving ) ) {
					dat += "<center><h3>Currently moving " + ( Lang13.Bool( ((dynamic)this.shuttle).destination_port.areaname ) ? "to " + ((dynamic)this.shuttle).destination_port.areaname : "" ) + "</h3></center>";
				} else {
					
					if ( Lang13.Bool( ((dynamic)this.shuttle).current_port ) ) {
						dat += "Location: <b>" + ((dynamic)this.shuttle).current_port.areaname + "</b><br>";
					} else {
						dat += "Location: <font color='red'><b>unknown</b></font><br>";
					}
					dat += "Ready to move" + ( Num13.MaxInt( Convert.ToInt32( ((dynamic)this.shuttle).last_moved + ((dynamic)this.shuttle).cooldown - Game13.time ), 0 ) != 0 ? " in " + Num13.MaxInt( Num13.Floor( Convert.ToDouble( ( ((dynamic)this.shuttle).last_moved + ((dynamic)this.shuttle).cooldown - Game13.time ) * 0.1 ) ), 0 ) + " seconds" : ": now" ) + "<br>";

					if ( this.allow_selecting_all ) {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.all_docking_ports, typeof(Obj_Structure_DockingPort_Destination) )) {
							D = _a;
							

							if ( Lang13.Bool( D.docked_with ) ) {
								continue;
							} else {
								text = this.get_doc_href( D );
							}
							dat += " | " + text + " | ";
						}
					} else {
						
						foreach (dynamic _b in Lang13.Enumerate( ((dynamic)this.shuttle).docking_ports, typeof(Obj_Structure_DockingPort_Destination) )) {
							D2 = _b;
							

							if ( Lang13.Bool( D2.docked_with ) ) {
								continue;
							} else {
								text = this.get_doc_href( D2 );
							}
							dat += " | " + text + " | ";
						}
					}
					dat += " |<BR>";
					dat += new Txt( "<center>" ).item( shuttle_name ).str( ":<br> <b><A href='?src=" ).Ref( this ).str( ";move=" ).item( 1 ).str( "'>Send" ).item( ( Lang13.Bool( this.selected_port ) ? " to " + this.selected_port.areaname : "" ) ).str( "</A></b></center><BR>" ).ToString();
				}
			} else {
				dat = "<h1>NO SHUTTLE LINKED</h1><br>";
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";link_to_shuttle=1'>Link to a shuttle</a>" ).ToString();
			}

			if ( GlobalFuncs.isAdminGhost( a ) ) {
				dat += "<br><hr><br>";
				dat += "<b><font color='red'>SPECIAL OPTIONS</font></h1></b>";
				dat += "<i>These are only available to administrators. Abuse may result in fun.</i><br><br>";
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";admin_link_to_shuttle=1'>Link to a shuttle</a><br><i>This allows you to link this computer to any existing shuttle, even if it's normally impossible to do so.</i><br>" ).ToString();

				if ( this.shuttle != null ) {
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";admin_unlink_shuttle=1'>Unlink current shuttle</a><br><i>Unlink this computer from " ).item( ((dynamic)this.shuttle).name ).str( "</i><br>\n			<a href='?src=" ).Ref( this ).str( ";admin_toggle_lockdown=1'>" ).item( ( Lang13.Bool( ((dynamic)this.shuttle).lockdown ) ? "Lift lockdown" : "Lock down" ) ).str( "</a><br>\n			<a href='?src=" ).Ref( this ).str( ";admin_toggle_select_all=1'>" ).item( ( this.allow_selecting_all ? "Select only from ports linked to " + ((dynamic)this.shuttle).name : "Select from ALL ports" ) ).str( "</a><br>\n			<a href='?src=" ).Ref( this ).str( ";admin_toggle_silicon_use=1'>" ).item( ( this.allow_silicons ? "Forbid silicons from using this computer" : "Allow silicons to use this computer" ) ).str( "</a><br>\n			<a href='?src=" ).Ref( this ).str( ";admin_reset=1'>Reset shuttle</a><br><i>Revert the shuttle's areas to initial state</i><br>" ).ToString();
				}
			}
			Interface13.Browse( a, "" + dat, "window=shuttle_control;size=575x450" );
			GlobalFuncs.onclose( a, "shuttle_control" );
			return null;
		}

		// Function from file: shuttle_computers.dm
		public void link_to( Base_Data S = null, bool? add_to_list = null ) {
			add_to_list = add_to_list ?? true;

			
			if ( this.shuttle != null ) {
				
				if ( Lang13.Bool( ((dynamic)this.shuttle).control_consoles.Contains( this ) ) ) {
					((dynamic)this.shuttle).control_consoles -= this;
				}
			}
			this.shuttle = S;

			if ( add_to_list == true ) {
				((dynamic)this.shuttle).control_consoles |= this;
			}
			this.req_access = ((dynamic)this.shuttle).req_access;
			this.updateUsrDialog();
			return;
		}

		// Function from file: shuttle_computers.dm
		public string get_doc_href( Obj_Structure_DockingPort_Destination D = null, dynamic bonus_parameters = null ) {
			string name = null;
			string span_s = null;
			string span_e = null;

			
			if ( !( D != null ) ) {
				return "ERROR";
			}
			name = GlobalFuncs.capitalize( D.areaname );
			span_s = new Txt( "<a href='?src=" ).Ref( this ).str( ";select=" ).Ref( D ).item( bonus_parameters ).str( "'>" ).ToString();
			span_e = "</a>";

			if ( D == this.selected_port ) {
				span_s += "<font color='blue'>";
				span_e += "</font>";
			} else {
				span_s += "<font color='green'>";
				span_e += "</font>";
			}

			if ( Lang13.Bool( D.docked_with ) ) {
				span_s = "<i>";
				span_e = "</i>";
			}

			if ( this.shuttle != null && !Lang13.Bool( ((dynamic)this.shuttle).linked_port ) ) {
				span_s = "";
				span_e = "";
			}
			return "" + span_s + name + span_e;
		}

		// Function from file: shuttle_computers.dm
		public bool announce( string message = null ) {
			return this.say( message );
		}

	}

}