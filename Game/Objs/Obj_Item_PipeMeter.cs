// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_PipeMeter : Obj_Item {

		public int? layer_to_make = 3;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "buildpipe";
			this.w_class = 4;
			this.icon = "icons/obj/pipe-item.dmi";
			this.icon_state = "meter";
		}

		public Obj_Item_PipeMeter ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: construction.dm
		public void setAttachLayer( int? new_layer = null ) {
			new_layer = new_layer ?? 3;

			this.layer_to_make = new_layer;
			this.pixel_x = ( ( new_layer ??0) - 3 ) * 5;
			this.pixel_y = ( ( new_layer ??0) - 3 ) * -5;
			return;
		}

		// Function from file: construction.dm
		public override dynamic dropped( dynamic user = null ) {
			base.dropped( (object)(user) );

			if ( this.loc != null ) {
				this.setAttachLayer( this.layer_to_make );
			}
			return null;
		}

		// Function from file: construction.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Obj_Machinery_Atmospherics_Pipe pipe = null;
			Obj_Machinery_Atmospherics_Pipe P = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( !( a is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Machinery_Atmospherics_Pipe) )) {
				P = _a;
				

				if ( P.piping_layer == this.layer_to_make ) {
					pipe = P;
					break;
				}
			}

			if ( !( pipe != null ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You need to fasten it to a pipe.</span>" );
				return 1;
			}
			new Obj_Machinery_Meter( this.loc, pipe );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
			GlobalFuncs.to_chat( b, "<span class='notice'>You have fastened the meter to the pipe.</span>" );
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}