// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_RemoteButton : Obj_Item_Device {

		public string base_state = "";
		public ContextClick_RemoteControl controller = null;
		public Obj_Item holder = null;
		public Image button_icon = null;
		public int depression_time = 5;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.icon = "icons/obj/remote_buttons.dmi";
		}

		// Function from file: remote_buttons.dm
		public Obj_Item_Device_RemoteButton ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.base_state = this.icon_state;
			this.button_icon = new Image( this.icon );
			return;
		}

		// Function from file: remote_buttons.dm
		public virtual void on_press( dynamic user = null ) {
			return;
		}

		// Function from file: remote_buttons.dm
		public void on_remote_remove(  ) {
			this.update_icon();
			this.controller = null;
			this.holder = null;
			return;
		}

		// Function from file: remote_buttons.dm
		public void on_remote_attach( Obj_Item new_holder = null, ContextClick_RemoteControl new_controller = null, dynamic button_id = null ) {
			this.controller = new_controller;
			this.holder = new_holder;
			this.loc = new_holder;
			this.update_icon( button_id );
			return;
		}

		// Function from file: remote_buttons.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			location = location ?? 0;

			string icon_type = null;
			ByTable pixel_dis = null;

			
			if ( this.holder != null ) {
				this.holder.overlays.Remove( this.button_icon );
			}

			if ( this.holder != null && this.loc == this.holder && Lang13.Bool( location ) ) {
				icon_type = this.controller.get_icon_type( location );
				pixel_dis = this.controller.get_pixel_displacement( location );
				this.button_icon.icon_state = "" + this.base_state + icon_type;
				this.button_icon.pixel_x = Convert.ToInt32( pixel_dis["pixel_x"] );
				this.button_icon.pixel_y = Convert.ToInt32( pixel_dis["pixel_y"] );
				this.holder.overlays.Add( this.button_icon );
			} else {
				this.button_icon.icon_state = this.base_state;
				this.button_icon.pixel_x = 0;
				this.button_icon.pixel_y = 0;
			}
			return null;
		}

	}

}