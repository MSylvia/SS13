// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RustFuelCompressor : Obj_Machinery {

		public ByTable new_assembly_quantities = new ByTable().Set( "Deuterium", 150 ).Set( "Tritium", 150 ).Set( "Rodinium-6", 0 ).Set( "Stravium-7", 0 ).Set( "Pergium", 0 ).Set( "Dilithium", 0 );
		public double compressed_matter = 0;
		public bool opened = true;
		public bool locked = false;
		public int has_electronics = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "code/WorkInProgress/Cael_Aislinn/Rust/rust.dmi";
			this.icon_state = "fuel_compressor1";
			this.layer = 2.9;
		}

		// Function from file: fuel_compressor_construction.dm
		public Obj_Machinery_RustFuelCompressor ( dynamic loc = null, int ndir = 0, bool? building = null ) : base( (object)(loc) ) {
			building = building ?? false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( building == true ) {
				this.dir = ndir;
			} else {
				this.has_electronics = 3;
				this.opened = false;
				this.locked = false;
				this.icon_state = "fuel_compressor1";
			}
			this.pixel_x = ( ( this.dir & 3 ) != 0 ? 0 : ( this.dir == 4 ? 32 : -32 ) );
			this.pixel_y = ( ( this.dir & 3 ) != 0 ? ( this.dir == 1 ? 32 : -32 ) : 0 );
			return;
		}

		// Function from file: fuel_compressor.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_RcdAmmo ) {
				this.compressed_matter += 10;
				Lang13.Delete( a );
				a = null;
				return null;
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: fuel_compressor.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			bool ejected = false;
			Obj_Item_Weapon_FuelAssembly F = null;
			bool fail = false;
			double old_matter = 0;
			dynamic reagent = null;
			double req_matter = 0;
			dynamic cur_reagent = null;
			double avail_rods = 0;
			dynamic rod = null;
			int new_amount = 0;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=fuelcomp" );
				Task13.User.machine = null;
			}

			if ( Lang13.Bool( href_list["eject_matter"] ) ) {
				ejected = false;

				while (this.compressed_matter > 10) {
					new Obj_Item_Weapon_RcdAmmo( Map13.GetStep( GlobalFuncs.get_turf( this ), this.dir ) );
					this.compressed_matter -= 10;
					ejected = true;
				}

				if ( ejected ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).icon( this ).str( " " ).item( this ).str( " ejects some compressed matter units.</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).icon( this ).str( " there are no more compressed matter units in " ).item( this ).str( ".</span>" ).ToString() );
				}
			}

			if ( Lang13.Bool( href_list["activate"] ) ) {
				F = new Obj_Item_Weapon_FuelAssembly( this );
				fail = false;
				old_matter = this.compressed_matter;

				foreach (dynamic _a in Lang13.Enumerate( this.new_assembly_quantities )) {
					reagent = _a;
					
					req_matter = Num13.Floor( Convert.ToDouble( this.new_assembly_quantities[reagent] / 30 ) );

					if ( req_matter <= this.compressed_matter ) {
						F.rod_quantities[reagent] = this.new_assembly_quantities[reagent];
						this.compressed_matter -= req_matter;

						if ( this.compressed_matter < 1 ) {
							this.compressed_matter = 0;
						}
					} else {
						fail = true;
						break;
					}
				}

				if ( fail ) {
					Lang13.Delete( F );
					F = null;
					this.compressed_matter = old_matter;
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).icon( this ).str( " " ).item( this ).str( " flashes red: 'Out of matter.'</span>" ).ToString() );
				} else {
					F.loc = this.loc;
					F.percent_depleted = 0;

					if ( this.compressed_matter < 0.034 ) {
						this.compressed_matter = 0;
					}
				}
			}

			if ( Lang13.Bool( href_list["change_reagent"] ) ) {
				cur_reagent = href_list["change_reagent"];
				avail_rods = 300;

				foreach (dynamic _b in Lang13.Enumerate( this.new_assembly_quantities )) {
					rod = _b;
					
					avail_rods -= Convert.ToDouble( this.new_assembly_quantities[rod] );
				}
				avail_rods += Convert.ToDouble( this.new_assembly_quantities[cur_reagent] );
				avail_rods = Num13.MaxInt( ((int)( avail_rods )), 0 );
				new_amount = Num13.MinInt( Convert.ToInt32( Interface13.Input( "Enter new " + cur_reagent + " rod amount (max " + avail_rods + ")", "Fuel Assembly Rod Composition (" + cur_reagent + ")", null, null, null, InputType.Num ) ), ((int)( avail_rods )) );
				this.new_assembly_quantities[cur_reagent] = new_amount;
			}
			this.updateDialog();
			return null;
		}

		// Function from file: fuel_compressor.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string t = null;
			dynamic reagent = null;

			
			if ( Map13.GetDistance( this, user ) > 1 || ( this.stat & 3 ) != 0 ) {
				
				if ( !( user is Mob_Living_Silicon ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=fuelcomp" );
					return null;
				}
			}
			t = new Txt( "<B>Reactor Fuel Rod Compressor / Assembler</B><BR>\n<A href='?src=" ).Ref( this ).str( ";close=1'>Close</A><BR>" ).ToString();

			if ( this.locked ) {
				t += "Swipe your ID to unlock this console.";
			} else {
				t += new Txt( "Compressed matter in storage: " ).item( this.compressed_matter ).str( " <A href='?src=" ).Ref( this ).str( ";eject_matter=1'>[Eject all]</a><br>\n			<A href='?src=" ).Ref( this ).str( ";activate=1'><b>Activate Fuel Synthesis</b></A><BR> (fuel assemblies require no more than " ).item( GlobalVars.max_assembly_amount ).str( " rods).<br>\n			<hr>\n			- New fuel assembly constituents:- <br>" ).ToString();

				foreach (dynamic _a in Lang13.Enumerate( this.new_assembly_quantities )) {
					reagent = _a;
					
					t += new Txt( "	" ).item( reagent ).str( " rods: " ).item( this.new_assembly_quantities[reagent] ).str( " [<A href='?src=" ).Ref( this ).str( ";change_reagent=" ).item( reagent ).str( "'>Modify</A>]<br>" ).ToString();
				}
			}
			t += new Txt( "<hr>\n		<A href='?src=" ).Ref( this ).str( ";close=1'>Close</A><BR>" ).ToString();
			Interface13.Browse( user, t, "window=fuelcomp;size=500x300" );
			((Mob)user).set_machine( this );
			return null;
		}

		// Function from file: fuel_compressor.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );
			this.interact( a );
			return null;
		}

		// Function from file: fuel_compressor.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.attack_hand( user );
			return null;
		}

	}

}