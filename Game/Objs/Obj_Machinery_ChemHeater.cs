// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ChemHeater : Obj_Machinery {

		public dynamic beaker = null;
		public double? target_temperature = 300;
		public double heater_coefficient = 0.1;
		public int? on = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 40;
			this.icon = "icons/obj/chemical.dmi";
			this.icon_state = "mixer0b";
		}

		// Function from file: chem_heater.dm
		public Obj_Machinery_ChemHeater ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_ChemHeater( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MicroLaser( null ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_ConsoleScreen( null ) );
			this.RefreshParts();
			return;
		}

		// Function from file: chem_heater.dm
		public void eject_beaker(  ) {
			
			if ( Lang13.Bool( this.beaker ) ) {
				this.beaker.loc = GlobalFuncs.get_turf( this );
				((Reagents)this.beaker.reagents).handle_reactions();
				this.beaker = null;
				this.icon_state = "mixer0b";
			}
			return;
		}

		// Function from file: chem_heater.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic target = null;
			double? adjust = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "power":
					this.on = !Lang13.Bool( this.on ) ?1:0;
					_default = GlobalVars.TRUE;
					break;
				case "temperature":
					target = _params["target"];
					adjust = String13.ParseNumber( _params["adjust"] );

					if ( target == "input" ) {
						target = Interface13.Input( "New target temperature:", this.name, this.target_temperature, null, null, InputType.Num | InputType.Null );

						if ( !( target == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
							_default = GlobalVars.TRUE;
						}
					} else if ( Lang13.Bool( adjust ) ) {
						target = ( this.target_temperature ??0) + ( adjust ??0);
					} else if ( String13.ParseNumber( target ) != null ) {
						target = String13.ParseNumber( target );
						_default = GlobalVars.TRUE;
					}

					if ( Lang13.Bool( _default ) ) {
						this.target_temperature = Num13.MaxInt( 0, Num13.MinInt( Convert.ToInt32( target ), 1000 ) );
					}
					break;
				case "eject":
					this.on = GlobalVars.FALSE;
					this.eject_beaker();
					_default = GlobalVars.TRUE;
					break;
			}
			return _default;
		}

		// Function from file: chem_heater.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			ByTable beakerContents = null;
			Reagent R = null;

			data = new ByTable();
			data["targetTemp"] = this.target_temperature;
			data["isActive"] = this.on;
			data["isBeakerLoaded"] = ( Lang13.Bool( this.beaker ) ? true : false );
			data["currentTemp"] = ( Lang13.Bool( this.beaker ) ? this.beaker.reagents.chem_temp : null );
			data["beakerCurrentVolume"] = ( Lang13.Bool( this.beaker ) ? this.beaker.reagents.total_volume : null );
			data["beakerMaxVolume"] = ( Lang13.Bool( this.beaker ) ? this.beaker.volume : null );
			beakerContents = new ByTable( 0 );

			if ( Lang13.Bool( this.beaker ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.beaker.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					
					beakerContents.Add( new ByTable(new object [] { new ByTable().Set( "name", R.name ).Set( "volume", R.volume ) }) );
				}
			}
			data["beakerContents"] = beakerContents;
			return data;
		}

		// Function from file: chem_heater.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "chem_heater", this.name, 275, 400, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: chem_heater.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( user is Mob_Living_Silicon_Robot ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_ReagentContainers && Lang13.Bool( A.flags & 4096 ) ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					user.WriteMsg( "<span class='warning'>A beaker is already loaded into the machine!</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				this.beaker = A;
				A.loc = this;
				user.WriteMsg( "<span class='notice'>You add the beaker to the machine.</span>" );
				this.icon_state = "mixer1b";
			}

			if ( this.default_deconstruction_screwdriver( user, "mixer0b", "mixer0b", A ) ) {
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( Lang13.Bool( this.panel_open ) ) {
				
				if ( A is Obj_Item_Weapon_Crowbar ) {
					this.eject_beaker();
					this.default_deconstruction_crowbar( A );
					return 1;
				}
			}
			return null;
		}

		// Function from file: chem_heater.dm
		public override int? process( dynamic seconds = null ) {
			base.process( (object)(seconds) );

			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}

			if ( Lang13.Bool( this.on ) ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					
					if ( Convert.ToDouble( this.beaker.reagents.chem_temp ) > ( this.target_temperature ??0) ) {
						this.beaker.reagents.chem_temp += Num13.MinInt( -1, ((int)( ( ( this.target_temperature ??0) - Convert.ToDouble( this.beaker.reagents.chem_temp ) ) * this.heater_coefficient )) );
					}

					if ( Convert.ToDouble( this.beaker.reagents.chem_temp ) < ( this.target_temperature ??0) ) {
						this.beaker.reagents.chem_temp += Num13.MaxInt( 1, ((int)( ( ( this.target_temperature ??0) - Convert.ToDouble( this.beaker.reagents.chem_temp ) ) * this.heater_coefficient )) );
					}
					this.beaker.reagents.chem_temp = Num13.Floor( Convert.ToDouble( this.beaker.reagents.chem_temp ) );
					((Reagents)this.beaker.reagents).handle_reactions();
				}
			}
			return null;
		}

		// Function from file: chem_heater.dm
		public override void RefreshParts(  ) {
			Obj_Item_Weapon_StockParts_MicroLaser M = null;

			this.heater_coefficient = 0.1;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				M = _a;
				
				this.heater_coefficient *= Convert.ToDouble( M.rating );
			}
			return;
		}

	}

}