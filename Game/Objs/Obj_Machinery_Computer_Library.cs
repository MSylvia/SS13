// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Library : Obj_Machinery_Computer {

		public int screenstate = 0;
		public double? page_num = 0;
		public double? num_pages = 0;
		public double? num_results = 0;
		public LibraryQuery query = new LibraryQuery();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/library.dmi";
			this.icon_state = "computer";
		}

		public Obj_Machinery_Computer_Library ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: base.dm
		public override dynamic cultify(  ) {
			new Obj_Structure_Cult_Tome( this.loc );
			base.cultify();
			return null;
		}

		// Function from file: base.dm
		public dynamic getBookByID( string id = null ) {
			return GlobalVars.library_catalog.getBookByID( id );
		}

		// Function from file: base.dm
		public string get_pagelist(  ) {
			string pagelist = null;
			int start = 0;
			double? end = null;
			double? i = null;
			string dat = null;

			pagelist = "<div class='pages'>";
			start = Num13.MaxInt( 0, ((int)( ( this.page_num ??0) - 3 )) );
			end = Num13.MinInt( ((int)( this.num_pages ??0 )), ((int)( ( this.page_num ??0) + 3 )) );
			i = null;
			i = start;

			while (( i ??0) <= ( end ??0)) {
				dat = new Txt( "<a href='?src=" ).Ref( this ).str( ";page=" ).item( i ).str( "'>" ).item( i ).str( "</a>" ).ToString();

				if ( i == this.page_num ) {
					dat = "<font size=3><b>" + dat + "</b></font>";
				}

				if ( i != end ) {
					dat += " ";
				}
				pagelist += dat;
				i++;
			}
			pagelist += "</div>";
			return pagelist;
		}

		// Function from file: base.dm
		public double? get_num_results(  ) {
			string sql = null;
			DBQuery _query = null;

			sql = "SELECT COUNT(*) FROM library";
			_query = GlobalVars.dbcon_old.NewQuery( sql );
			_query.Execute();

			while (_query.NextRow()) {
				return String13.ParseNumber( _query.item[1] );
			}
			return 0;
		}

		// Function from file: base.dm
		public ByTable get_page( double? page_num = null ) {
			string searchquery = null;
			bool where = false;
			string sql = null;
			DBQuery _query = null;
			ByTable results = null;
			Cachedbook CB = null;

			searchquery = "";

			if ( this.query != null ) {
				where = false;

				if ( Lang13.Bool( this.query.title ) && this.query.title != "" ) {
					searchquery += " WHERE title LIKE '%" + this.query.title + "%'";
					where = true;
				}

				if ( Lang13.Bool( this.query.author ) && this.query.author != "" ) {
					searchquery += " " + ( !where ? "WHERE" : "AND" ) + " author LIKE '%" + this.query.author + "%'";
					where = true;
				}

				if ( Lang13.Bool( this.query.category ) && this.query.category != "" ) {
					searchquery += " " + ( !where ? "WHERE" : "AND" ) + " category LIKE '%" + this.query.category + "%'";

					if ( this.query.category == "Fiction" ) {
						searchquery += " AND category NOT LIKE '%Non-Fiction%'";
					}
					where = true;
				}
			}
			sql = "SELECT id, author, title, category, ckey FROM library " + searchquery + " LIMIT " + ( page_num ??0) * 25 + ", " + 25;
			_query = GlobalVars.dbcon_old.NewQuery( sql );
			_query.Execute();

			if ( Lang13.Bool( _query.ErrorMsg() ) ) {
				Game13.log.WriteMsg( _query.ErrorMsg() );
			}
			results = new ByTable();

			while (_query.NextRow()) {
				CB = new Cachedbook();
				CB.LoadFromRow( new ByTable().Set( "id", _query.item[1] ).Set( "author", _query.item[2] ).Set( "title", _query.item[3] ).Set( "category", _query.item[4] ).Set( "ckey", _query.item[5] ) );
				results.Add( CB );
			}
			return results;
		}

		// Function from file: base.dm
		public bool? interact_check( dynamic user = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return GlobalVars.TRUE;
			}

			if ( Map13.GetDistance( this, user ) > 1 ) {
				
				if ( !( user is Mob_Living_Silicon ) && !( user is Mob_Dead_Observer ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=library" );
					return GlobalVars.TRUE;
				}
			}
			((Mob)user).set_machine( this );
			return GlobalVars.FALSE;
		}

	}

}