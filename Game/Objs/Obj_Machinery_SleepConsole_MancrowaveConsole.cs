// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_SleepConsole_MancrowaveConsole : Obj_Machinery_SleepConsole {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "manconsole_open";
		}

		public Obj_Machinery_SleepConsole_MancrowaveConsole ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: Sleeper.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			((Ent_Static)this.connected).attackby( a, b );
			return null;
		}

		// Function from file: Sleeper.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			((Ent_Static)this.connected).MouseDrop_T( O, user );
			return false;
		}

		// Function from file: Sleeper.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			this.connected.MouseDrop( over_object, src_location, over_location, src_control, over_control, _params );
			return null;
		}

		// Function from file: Sleeper.dm
		public override dynamic process(  ) {
			dynamic targettemperature = null;
			int emaggedbonus = 0;
			dynamic timefraction = null;
			double tempdifference = 0;
			int? i = null;
			int? i2 = null;
			Obj_Effect_Decal_Cleanable_Ash ashed = null;

			base.process();

			if ( !Lang13.Bool( this.connected ) ) {
				return null;
			}

			if ( Lang13.Bool( this.connected.automatic ) && Lang13.Bool( this.connected.occupant ) && !Lang13.Bool( this.connected.on ) ) {
				this.connected.cook( "Thermoregulate" );
			}

			if ( !Lang13.Bool( this.connected.on ) ) {
				
			} else if ( !( this != null ) || !Lang13.Bool( this.connected ) || !Lang13.Bool( this.connected.occupant ) || this.connected.occupant.loc != this.connected ) {
				this.connected.occupant = null;
				this.connected.on = 0;
				this.connected.update_icon();
				return null;
			}

			if ( !( this.connected.occupant is Mob_Living_Carbon ) ) {
				this.connected.go_out();
				return null;
			}

			if ( !( Game13.time >= Convert.ToDouble( this.connected.target_time ) && Lang13.Bool( this.connected.on ) ) ) {
				targettemperature = this.connected.available_options["" + this.connected.setting] / 10 + 305.41;
				emaggedbonus = ( Lang13.Bool( this.connected.emagged ) ? 10 : 1 );
				timefraction = this.connected.available_options["" + this.connected.setting] / 250 * emaggedbonus;
				tempdifference = Math.Abs( Convert.ToDouble( targettemperature - this.connected.occupant.bodytemperature ) );

				if ( Convert.ToDouble( this.connected.occupant.bodytemperature ) < Convert.ToDouble( targettemperature ) ) {
					this.connected.occupant.bodytemperature = Num13.MinInt( Convert.ToInt32( this.connected.occupant.bodytemperature + tempdifference * Convert.ToDouble( timefraction ) ), Convert.ToInt32( targettemperature ) );
				} else {
					this.connected.occupant.bodytemperature = Num13.MaxInt( Convert.ToInt32( this.connected.occupant.bodytemperature - tempdifference * Convert.ToDouble( timefraction ) ), Convert.ToInt32( targettemperature ) );
				}
			} else {
				
				dynamic _a = this.connected.setting; // Was a switch-case, sorry for the mess.
				if ( _a=="Thermoregulate" ) {
					this.connected.occupant.bodytemperature = 310.41;
					this.connected.occupant.sleeping = 0;
					this.connected.occupant.paralysis = 0;
					this.connected.go_out();
				} else if ( _a=="Rare" ) {
					GlobalFuncs.qdel( this.connected.occupant );
					this.connected.occupant = null;
					i = null;
					i = 1;

					while (( i ??0) < 5) {
						new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Soylentgreen( this.connected.loc );
						i++;
					}
				} else if ( _a=="Medium" ) {
					GlobalFuncs.qdel( this.connected.occupant );
					this.connected.occupant = null;
					i2 = null;
					i2 = 1;

					while (( i2 ??0) < 5) {
						new Obj_Item_Weapon_ReagentContainers_Food_Snacks_Badrecipe( this.connected.loc );
						i2++;
					}
				} else if ( _a=="Well Done" ) {
					GlobalFuncs.qdel( this.connected.occupant );
					this.connected.occupant = null;
					ashed = new Obj_Effect_Decal_Cleanable_Ash( this.connected.loc );
					ashed.layer = this.layer + 0.01;
				}
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/ding.ogg", 50, 1 );
				this.connected.on = 0;

				if ( Lang13.Bool( this.connected.occupant ) ) {
					this.connected.go_out();
				}
				this.connected.update_icon();
			}
			return null;
		}

		// Function from file: Sleeper.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["cook"] ) ) {
				
				if ( Lang13.Bool( this.connected ) ) {
					
					if ( Lang13.Bool( this.connected.on ) ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='danger'>" ).The( this ).item().str( " is already turned on!</span>" ).ToString() );
					} else if ( Lang13.Bool( this.connected.occupant ) ) {
						
						if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Disk_Nuclear), GlobalFuncs.get_contents_in_object( this.connected.occupant ) ) ) && href_list["cook"] != "Thermoregulate" ) {
							GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='danger'>Even with the safety features turned off, " ).the( this ).item().str( " refuses to cook something inside of it!</span>" ).ToString() );
						} else {
							this.connected.cook( href_list["cook"] );
						}
					}
				}
			}

			if ( Lang13.Bool( href_list["refresh"] ) ) {
				this.updateUsrDialog();
			}

			if ( Lang13.Bool( href_list["auto"] ) ) {
				this.connected.automatic = !Lang13.Bool( this.connected.automatic );
			}

			if ( Lang13.Bool( href_list["turnoff"] ) ) {
				this.connected.on = 0;
				((Obj_Machinery_Sleeper)this.connected).go_out();
				this.connected.update_icon();
			}

			if ( Lang13.Bool( href_list["security"] ) ) {
				
				if ( Lang13.Bool( this.connected ) && Lang13.Bool( this.connected.on ) ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='danger'>The security features of " ).the( this ).item().str( " cannot be re-enabled when it is on!</span>" ).ToString() );
					return null;
				}
				this.connected.emagged = 0;
				this.emagged = 0;
				this.name = "thermal homeostasis regulator";
				this.connected.name = "thermal homeostasis regulator";
				this.connected.available_options = new ByTable().Set( "Thermoregulate", 50 );
				this.connected.update_icon();
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: Sleeper.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic occupant = null;
			string dat = null;
			string t1 = null;
			Mob_Living_Carbon C = null;
			dynamic cook_setting = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( this.connected ) ) {
				occupant = this.connected.occupant;
				dat = "<font color='blue'><B>Occupant Statistics:</B></FONT><BR>";

				if ( Lang13.Bool( occupant ) ) {
					
					dynamic _a = occupant.stat; // Was a switch-case, sorry for the mess.
					if ( _a==0 ) {
						t1 = "Conscious";
					} else if ( _a==1 ) {
						t1 = "<font color='blue'>Unconscious</font>";
					} else if ( _a==2 ) {
						t1 = "<font color='red'>*dead*</font>";
					}
					dat += "" + ( Convert.ToDouble( occupant.health ) > 50 ? "<font color='blue'>" : "<font color='red'>" ) + "	Health %: " + occupant.health + " (" + t1 + ")</FONT><BR>";

					if ( occupant is Mob_Living_Carbon ) {
						C = occupant;
						dat += "" + ( C.pulse == 0 || C.pulse == 1 || C.pulse == 6 ? "<font color='red'>" : "<font color='blue'>" ) + "	-Pulse, bpm: " + C.get_pulse( true ) + "</FONT><BR>";
						dat += "" + ( C.undergoing_hypothermia() != 0 ? "<font color='red'>" : "<font color='blue'>" ) + "	 -Core Temperature: " + ( C.bodytemperature - 273.41 ) + "&deg;C </FONT><BR></span>";
					}
					dat += "<HR><b>Cook settings:</b><BR>";

					foreach (dynamic _b in Lang13.Enumerate( this.connected.available_options )) {
						cook_setting = _b;
						
						dat += new Txt( "<a href ='?src=" ).Ref( this ).str( ";cook=" ).item( cook_setting ).str( "'>" ).item( cook_setting ).str( " - " ).item( this.connected.available_options[cook_setting] / 10 ).str( " seconds</a>" ).ToString();
						dat += "<br>";
					}
				} else {
					dat += new Txt().The( this ).item().str( " is empty." ).ToString();
				}
				dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh meter readings each second</A><BR>" ).ToString();
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";auto=1'>Turn " ).item( ( Lang13.Bool( this.connected.automatic ) ? "off" : "on" ) ).str( " Automatic Thermoregulation.</A><BR>" ).ToString();
				dat += "" + ( Lang13.Bool( this.connected.emagged ) ? new Txt( "<A href='?src=" ).Ref( this ).str( ";security=1'>Re-enable Security Features.</A><BR>" ).ToString() : "" );
				dat += "" + ( Lang13.Bool( this.connected.on ) ? new Txt( "<A href='?src=" ).Ref( this ).str( ";turnoff=1'>[EMERGENCY STOP]</A> <i>: cancels the current job.</i><BR>" ).ToString() : "" );
				dat += new Txt( "<BR><BR><A href='?src=" ).Ref( a ).str( ";mach_close=sleeper'>Close</A>" ).ToString();
				Interface13.Browse( a, dat, "window=sleeper;size=400x500" );
				GlobalFuncs.onclose( a, "sleeper" );
			}
			return null;
		}

		// Function from file: Sleeper.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			_default = base.Destroy( (object)(brokenup) );

			if ( Lang13.Bool( this.connected ) ) {
				this.connected.connected = null;
				((Obj_Machinery_Sleeper)this.connected).go_out();
				GlobalFuncs.qdel( this.connected );
				this.connected = null;
			}
			return _default;
		}

		// Function from file: Sleeper.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( Lang13.Bool( this.connected ) ) {
				
				if ( !Lang13.Bool( this.connected.occupant ) ) {
					this.icon_state = "manconsole_open";
				} else if ( this.connected.setting != "Thermoregulate" && Lang13.Bool( this.connected.on ) ) {
					this.icon_state = "manconsole_2";
				} else {
					this.icon_state = "manconsole_" + this.connected.on;
				}

				if ( Lang13.Bool( this.connected.emagged ) ) {
					this.icon_state += "emag";
				}
			}
			return null;
		}

	}

}