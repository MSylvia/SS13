// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Binary_PassiveGate : Obj_Machinery_Atmospherics_Binary {

		public double? on = 0;
		public double? target_pressure = 101.32499694824219;
		public bool frequency = false;
		public dynamic id_tag = null;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/atmospherics/passive_gate.dmi";
			this.icon_state = "intact_off";
		}

		public Obj_Machinery_Atmospherics_Binary_PassiveGate ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: passive_gate.dm
		public override dynamic power_change(  ) {
			base.power_change();
			this.update_icon();
			return null;
		}

		// Function from file: passive_gate.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic new_pressure = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["power"] ) ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
				this.investigation_log( "atmos", "was turned " + ( Lang13.Bool( this.on ) ? "on" : "off" ) + " by " + GlobalFuncs.key_name( Task13.User ) );
			}

			if ( Lang13.Bool( href_list["set_press"] ) ) {
				new_pressure = Interface13.Input( Task13.User, "Enter new output pressure (0-4500kPa)", "Pressure control", this.target_pressure, null, InputType.Num );
				this.target_pressure = Num13.MaxInt( 0, Num13.MinInt( 4500, Convert.ToInt32( new_pressure ) ) );
				this.investigation_log( "atmos", "was set to " + this.target_pressure + " kPa by " + GlobalFuncs.key_name( Task13.User ) );
			}
			Task13.User.set_machine( this );
			this.update_icon();
			this.updateUsrDialog();
			return null;
		}

		// Function from file: passive_gate.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			this.add_fingerprint( Task13.User );

			if ( !this.allowed( a ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>Access denied.</span>" );
				return null;
			}
			Task13.User.set_machine( this );
			this.interact( a );
			return null;
		}

		// Function from file: passive_gate.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			double? old_on = null;

			
			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" ) {
				return false;
			}
			old_on = this.on;
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "power" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" ) {
				this.on = String13.ParseNumber( ((dynamic)signal).data["power"] );
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "power_toggle" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "set_output_pressure" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" ) {
				this.target_pressure = ( ( String13.ParseNumber( ((dynamic)signal).data["set_output_pressure"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( ((dynamic)signal).data["set_output_pressure"] ) ??0) >= 5066.25 ? 5066.25 : String13.ParseNumber( ((dynamic)signal).data["set_output_pressure"] ) ) );
			}
			Interface13.Stat( null, ((dynamic)signal).data.Contains( "status" ) );

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					this.broadcast_status();
					return;
				}));
				return false;
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.broadcast_status();
				return;
			}));
			this.update_icon();

			if ( old_on != this.on ) {
				this.investigation_log( "atmos", "was powered " + ( Lang13.Bool( this.on ) ? "on" : "off" ) + " by a remote signal" );
			}
			return false;
		}

		// Function from file: passive_gate.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );

			if ( this.frequency ) {
				this.set_frequency( this.frequency );
			}
			return false;
		}

		// Function from file: passive_gate.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			dat = new Txt( "<b>Power: </b><a href='?src=" ).Ref( this ).str( ";power=1'>" ).item( ( Lang13.Bool( this.on ) ? "On" : "Off" ) ).str( "</a><br>\n				<b>Desirable output pressure: </b>\n				" ).item( Num13.Round( this.target_pressure ??0, 0.1 ) ).str( "kPa | <a href='?src=" ).Ref( this ).str( ";set_press=1'>Change</a>\n				" ).ToString();
			Interface13.Browse( user, "<HEAD><TITLE>" + this.name + " control</TITLE></HEAD><TT>" + dat + "</TT>", "window=atmo_pump" );
			GlobalFuncs.onclose( user, "atmo_pump" );
			return null;
		}

		// Function from file: passive_gate.dm
		public bool broadcast_status(  ) {
			Game_Data signal = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).source = this;
			((dynamic)signal).data = new ByTable().Set( "tag", this.id_tag ).Set( "device", "AGP" ).Set( "power", this.on ).Set( "target_output", this.target_pressure ).Set( "sigtype", "status" );
			this.radio_connection.post_signal( this, signal, GlobalVars.RADIO_ATMOSIA );
			return true;
		}

		// Function from file: passive_gate.dm
		public void set_frequency( bool new_frequency = false ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency ) {
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, GlobalVars.RADIO_ATMOSIA );
			}
			return;
		}

		// Function from file: passive_gate.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			dynamic output_starting_pressure = null;
			dynamic input_starting_pressure = null;
			int pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;

			_default = base.process();

			if ( !Lang13.Bool( this.on ) ) {
				return _default;
			}
			output_starting_pressure = this.air2.return_pressure();
			input_starting_pressure = this.air1.return_pressure();

			if ( Convert.ToDouble( output_starting_pressure ) >= Num13.MinInt( ((int)( this.target_pressure ??0 )), Convert.ToInt32( input_starting_pressure - 10 ) ) ) {
				return _default;
			}

			if ( Convert.ToDouble( this.air1.f_total_moles() ) > 0 && ( this.air1.temperature ??0) > 0 ) {
				pressure_delta = Num13.MinInt( ((int)( ( this.target_pressure ??0) - Convert.ToDouble( output_starting_pressure ) )), Convert.ToInt32( ( input_starting_pressure - output_starting_pressure ) / 2 ) );
				transfer_moles = pressure_delta * ( this.air2.volume ??0) / ( ( this.air1.temperature ??0) * 8.314 );
				removed = this.air1.remove( transfer_moles );
				this.air2.merge( removed );

				if ( this.network1 != null ) {
					((dynamic)this.network1).update = 1;
				}

				if ( this.network2 != null ) {
					((dynamic)this.network2).update = 1;
				}
			}
			return 1;
		}

		// Function from file: passive_gate.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "intact_off";
			} else if ( this.node1 != null && this.node2 != null ) {
				this.icon_state = "intact_" + ( Lang13.Bool( this.on ) ? "on" : "off" );
			}
			base.update_icon( (object)(location), (object)(target) );
			return null;
		}

	}

}