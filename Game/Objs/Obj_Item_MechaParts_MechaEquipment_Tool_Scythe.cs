// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Tool_Scythe : Obj_Item_MechaParts_MechaEquipment_Tool {

		public int dam_force = 20;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.equip_cooldown = 20;
			this.energy_drain = 15;
			this.icon_state = "mecha_extremelylazyscythecopypaste";
		}

		public Obj_Item_MechaParts_MechaEquipment_Tool_Scythe ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tools.dm
		public override bool action( dynamic target = null ) {
			dynamic tray = null;
			int olddir = 0;
			int eradicated = 0;
			double i = 0;
			Obj_Effect E = null;
			Obj_Effect K = null;
			dynamic M = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}

			if ( target is Obj_Machinery_PortableAtmospherics_Hydroponics ) {
				this.set_ready_state( false );

				if ( this.do_after_cooldown( target, 0.5 ) ) {
					this.chassis.visible_message( new Txt( "<font color='red'><b>" ).item( this.chassis ).str( " smashes apart " ).the( target ).item().str( "!</b></font>" ).ToString(), "You hear a pneumatic screeching and something being smashed apart." );
					this.occupant_message( new Txt( "<font color='red'><b>You smash apart " ).the( target ).item().str( "!</b></font>" ).ToString() );
					this.log_message( "Destroyed " + target + "." );
					tray = target;
					GlobalFuncs.playsound( target, "sound/mecha/mechsmash.ogg", 50, 1 );
					((Obj_Machinery)tray).smashDestroy( 50 );
				}
			} else if ( target is Obj_Effect_Plantsegment || target is Obj_Effect_Alien_Weeds || target is Obj_Effect_Biomass || target is Tile_Simulated_Floor ) {
				this.set_ready_state( false );
				olddir = this.chassis.dir;
				eradicated = 0;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					foreach (dynamic _b in Lang13.IterateRange( 1, 4 )) {
						i = _b;
						
						this.chassis.mechturn( Num13.Rotate( olddir, i * 90 ) );

						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( ( i == 4 ? 2 : 1 ), this.chassis ), typeof(Obj_Effect) )) {
							E = _a;
							

							if ( ( Map13.GetDistance( this.chassis, E ) & this.chassis.dir ) != 0 || E.loc == GlobalFuncs.get_turf( this.chassis ) ) {
								
								if ( E is Obj_Effect_Plantsegment ) {
									K = E;
									((Obj_Effect_Plantsegment)K).die_off();
									eradicated++;
								} else if ( E is Obj_Effect_Alien_Weeds || E is Obj_Effect_Biomass ) {
									GlobalFuncs.qdel( E );
									eradicated++;
								}
							}
						}
						Task13.Sleep( 3 );
					}
					return;
				}));

				if ( eradicated != 0 ) {
					this.occupant_message( "<font color='blue'>" + eradicated + " weeds successfully eradicated.</font>" );
					this.log_message( "Culled " + eradicated + " weeds." );
				}
				this.set_ready_state( true );
			} else if ( target is Mob_Living ) {
				M = target;

				if ( Convert.ToInt32( M.stat ) == 2 ) {
					return false;
				}

				if ( ((dynamic)this.chassis.occupant).a_intent == "hurt" ) {
					this.set_ready_state( false );
					((Mob_Living)M).apply_damage( this.dam_force, "brute" );
					this.occupant_message( "<span class='danger'>You slash " + target + " with " + this.name + ".</span>" );
					this.chassis.visible_message( "<span class='danger'>" + this.chassis + " slashes at " + target + " with " + this.name + "!</span>" );
					M.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "]<font color='orange'> Mech Scythed by " + this.chassis.occupant.name + " (" + ((dynamic)this.chassis.occupant).ckey + ") with " + this.name + "</font>" );
					((dynamic)this.chassis.occupant).attack_log += "[" + GlobalFuncs.time_stamp() + "]<font color='red'> Slashed " + M.name + " (" + M.ckey + ") with " + this.name + "</font>";
					GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + this.chassis.occupant.name + " (" + ((dynamic)this.chassis.occupant).ckey + ") mech scythed " + M.name + " (" + M.ckey + ") with " + this.name + "</font>" ) ) );
					this.log_message( "Slashed at " + target + " with " + this.name + "." );
					this.do_after_cooldown();
				}
			} else {
				return false;
			}
			this.chassis.use_power( this.energy_drain );
			return true;
		}

		// Function from file: tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( M is Obj_Mecha_Working_Ripley ) {
					return true;
				}
			}
			return false;
		}

	}

}