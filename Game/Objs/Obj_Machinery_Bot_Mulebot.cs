// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Bot_Mulebot : Obj_Machinery_Bot {

		public dynamic load = null;
		public int beacon_freq = 1400;
		public int control_freq = 1447;
		public Ent_Static target = null;
		public double? loaddir = 0;
		public dynamic new_destination = "";
		public dynamic destination = "";
		public dynamic home_destination = "";
		public dynamic path = new ByTable();
		public int mode = 0;
		public int blockcount = 0;
		public bool reached_target = true;
		public bool refresh = true;
		public double? auto_return = 1;
		public double? auto_pickup = 1;
		public dynamic cell = null;
		public Wires_Mulebot wires = null;
		public ByTable can_load = new ByTable();
		public int bloodiness = 0;
		public string currentBloodColor = "#A10808";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.health = 150;
			this.maxhealth = 150;
			this.fire_dam_coeff = 061;
			this.brute_dam_coeff = 0.5;
			this.req_access = new ByTable(new object [] { 31 });
			this.icon_state = "mulebot0";
		}

		// Function from file: mulebot.dm
		public Obj_Machinery_Bot_Mulebot ( dynamic loc = null ) : base( (object)(loc) ) {
			Job_CargoTech J = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.wires = new Wires_Mulebot( this );
			this.botcard = new Obj_Item_Weapon_Card_Id( this );
			J = new Job_CargoTech();
			this.botcard.access = J.get_access();
			this.cell = new Obj_Item_Weapon_Cell( this );
			this.cell.charge = 2000;
			this.cell.maxcharge = 2000;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				if ( GlobalVars.radio_controller != null ) {
					GlobalVars.radio_controller.add_object( this, this.control_freq, GlobalVars.RADIO_MULEBOT );
					GlobalVars.radio_controller.add_object( this, this.beacon_freq, GlobalVars.RADIO_NAVBEACONS );
				}
				GlobalVars.mulebot_count += 1;

				if ( !Lang13.Bool( this.suffix ) ) {
					this.suffix = "#" + GlobalVars.mulebot_count;
				}
				this.name = new Txt().improper().str( "Mulebot (" ).item( this.suffix ).str( ")" ).ToString();
				return;
			}));
			this.can_load = new ByTable(new object [] { typeof(Obj_Structure_Closet_Crate), typeof(Obj_Structure_Vendomatpack), typeof(Obj_Structure_Stackopacks), typeof(Obj_Item_Weapon_Gift) });
			return;
		}

		// Function from file: mulebot.dm
		public override void explode(  ) {
			dynamic Tsec = null;
			Effect_Effect_System_SparkSpread s = null;
			Game_Data O = null;

			this.visible_message( "<span class='danger'>" + this + " blows apart!</span>", 1 );
			Tsec = GlobalFuncs.get_turf( this );
			new Obj_Item_Device_Assembly_ProxSensor( Tsec );
			new Obj_Item_Stack_Rods( Tsec );
			new Obj_Item_Stack_Rods( Tsec );
			new Obj_Item_Stack_CableCoil_Cut( Tsec );

			if ( Lang13.Bool( this.cell ) ) {
				this.cell.loc = Tsec;
				this.cell.update_icon();
				this.cell = null;
			}
			s = new Effect_Effect_System_SparkSpread();
			s.set_up( 3, 1, this );
			s.start();
			O = GlobalFuncs.getFromPool( typeof(Obj_Effect_Decal_Cleanable_Blood_Oil), this.loc );
			((dynamic)O).New( ((dynamic)O).loc );
			this.unload( 0 );
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: mulebot.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( Lang13.Bool( this.cell ) ) {
				this.cell.emp_act( severity );
			}

			if ( Lang13.Bool( this.load ) ) {
				this.load.emp_act( severity );
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: mulebot.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			string recv = null;
			string direction = null;

			
			if ( !this.on || !( this.wires != null ) ) {
				return false;
			}
			recv = ((dynamic)signal).data["command"];

			if ( recv == "bot_status" && this.wires.RemoteRX() ) {
				this.send_status();
			}
			recv = ((dynamic)signal).data["command " + this.suffix];

			if ( this.wires.RemoteRX() ) {
				
				switch ((string)( recv )) {
					case "stop":
						this.mode = 0;
						return false;
						break;
					case "go":
						this.start();
						return false;
						break;
					case "target":
						this.set_destination( ((dynamic)signal).data["destination"] );
						return false;
						break;
					case "unload":
						
						if ( this.loc == this.target ) {
							this.unload( this.loaddir );
						} else {
							this.unload( 0 );
						}
						return false;
						break;
					case "home":
						this.start_home();
						return false;
						break;
					case "bot_status":
						this.send_status();
						return false;
						break;
					case "autoret":
						this.auto_return = String13.ParseNumber( ((dynamic)signal).data["value"] );
						return false;
						break;
					case "autopick":
						this.auto_pickup = String13.ParseNumber( ((dynamic)signal).data["value"] );
						return false;
						break;
				}
			}
			recv = ((dynamic)signal).data["beacon"];

			if ( this.wires.BeaconRX() ) {
				
				if ( recv == this.new_destination ) {
					this.destination = this.new_destination;
					this.target = ((dynamic)signal).source.loc;
					direction = ((dynamic)signal).data["dir"];

					if ( Lang13.Bool( direction ) ) {
						this.loaddir = String13.ParseNumber( direction );
					} else {
						this.loaddir = 0;
					}
					this.icon_state = "mulebot" + ( this.wires.MobAvoid() != false );
					this.calc_path();
					this.updateDialog();
				}
			}
			return false;
		}

		// Function from file: mulebot.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			
			if ( Lang13.Bool( M.stat ) ) {
				return null;
			}

			if ( this.load == M ) {
				this.unload( 0 );
			}
			return null;
		}

		// Function from file: mulebot.dm
		public override dynamic alter_health( Mob_Living M = null ) {
			return GlobalFuncs.get_turf( this );
		}

		// Function from file: mulebot.dm
		public override dynamic Bump( Obj Obstacle = null, dynamic yes = null ) {
			Obj M = null;

			
			if ( !this.wires.MobAvoid() ) {
				M = Obstacle;

				if ( M is Mob ) {
					
					if ( M is Mob_Living_Silicon_Robot ) {
						this.visible_message( "<span class='warning'>" + this + " bumps into " + M + "!</span>" );
					} else {
						this.visible_message( "<span class='warning'>" + this + " knocks over " + M + "!</span>" );
						((Mob)M).stop_pulling();
						((dynamic)M).Stun( 8 );
						((dynamic)M).Weaken( 5 );
						((dynamic)M).lying = 1;
					}
				}
			}
			base.Bump( Obstacle );
			return null;
		}

		// Function from file: mulebot.dm
		public override dynamic process(  ) {
			int speed = 0;

			
			if ( !this.has_power() ) {
				this.on = false;
				return null;
			}

			if ( this.on ) {
				speed = ( ( this.wires.Motor1() ? true : false ) ?1:0) + ( this.wires.Motor2() ? 2 : 0 );

				switch ((int)( speed )) {
					case 0:
						
						break;
					case 1:
						this.process_bot();
						Task13.Schedule( 2, (Task13.Closure)(() => {
							this.process_bot();
							Task13.Sleep( 2 );
							this.process_bot();
							Task13.Sleep( 2 );
							this.process_bot();
							Task13.Sleep( 2 );
							this.process_bot();
							return;
						}));
						break;
					case 2:
						this.process_bot();
						Task13.Schedule( 4, (Task13.Closure)(() => {
							this.process_bot();
							return;
						}));
						break;
					case 3:
						this.process_bot();
						break;
				}
			}

			if ( this.refresh ) {
				this.updateDialog();
			}
			return null;
		}

		// Function from file: mulebot.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			
			if ( Lang13.Bool( user.stat ) ) {
				return false;
			}

			if ( !this.on || !( O is Ent_Dynamic ) || Lang13.Bool( ((dynamic)O).anchored ) || Map13.GetDistance( user, this ) > 1 || Map13.GetDistance( this, O ) > 1 ) {
				return false;
			}

			if ( Lang13.Bool( this.load ) ) {
				return false;
			}
			this.f_load( O );
			return false;
		}

		// Function from file: mulebot.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic C = null;
			dynamic new_dest = null;
			string new_id = null;
			dynamic new_home = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( Task13.User.stat ) ) {
				return null;
			}

			if ( GlobalFuncs.in_range( this, Task13.User ) && this.loc is Tile || Task13.User is Mob_Living_Silicon ) {
				Task13.User.set_machine( this );

				dynamic _a = href_list["op"]; // Was a switch-case, sorry for the mess.
				if ( _a=="lock" || _a=="unlock" ) {
					this.toggle_lock( Task13.User );
				} else if ( _a=="power" ) {
					
					if ( this.on ) {
						this.turn_off();
					} else if ( Lang13.Bool( this.cell ) && !this.open ) {
						
						if ( !this.turn_on() ) {
							GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't switch on " + this + ".</span>" );
							return null;
						}
					} else {
						return null;
					}
					this.visible_message( "" + Task13.User + " switches " + ( this.on ? "on" : "off" ) + " " + this + "." );
					this.updateDialog();
				} else if ( _a=="cellremove" ) {
					
					if ( this.open && Lang13.Bool( this.cell ) && !Lang13.Bool( Task13.User.get_active_hand() ) ) {
						this.cell.updateicon();
						Task13.User.put_in_active_hand( this.cell );
						((Ent_Static)this.cell).add_fingerprint( Task13.User );
						this.cell = null;
						Task13.User.visible_message( "<span class='notice'>" + Task13.User + " removes the power cell from " + this + ".</span>", "<span class='notice'>You remove the power cell from " + this + ".</span>" );
						this.updateDialog();
					}
				} else if ( _a=="cellinsert" ) {
					
					if ( this.open && !Lang13.Bool( this.cell ) ) {
						C = Task13.User.get_active_hand();

						if ( C is Obj_Item_Weapon_Cell ) {
							
							if ( Task13.User.drop_item( C, this ) ) {
								this.cell = C;
								((Ent_Static)C).add_fingerprint( Task13.User );
								Task13.User.visible_message( "<span class='notice'>" + Task13.User + " inserts a power cell into " + this + ".</span>", "<span class='notice'>You insert the power cell into " + this + ".</span>" );
								this.updateDialog();
							}
						}
					}
				} else if ( _a=="stop" ) {
					
					if ( this.mode >= 2 ) {
						this.mode = 0;
						this.updateDialog();
					}
				} else if ( _a=="go" ) {
					
					if ( this.mode == 0 ) {
						this.start();
						this.updateDialog();
					}
				} else if ( _a=="home" ) {
					
					if ( this.mode == 0 || this.mode == 2 ) {
						this.start_home();
						this.updateDialog();
					}
				} else if ( _a=="destination" ) {
					this.refresh = false;
					new_dest = Interface13.Input( "Enter new destination tag", "Mulebot " + ( Lang13.Bool( this.suffix ) ? "(" + this.suffix + ")" : "" ), this.destination, null, null, InputType.Str | InputType.Null );
					this.refresh = true;

					if ( Lang13.Bool( new_dest ) && this.Adjacent( Task13.User ) && !Lang13.Bool( Task13.User.stat ) ) {
						this.set_destination( new_dest );
					}
				} else if ( _a=="setid" ) {
					this.refresh = false;
					new_id = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Enter new bot ID", "Mulebot " + ( Lang13.Bool( this.suffix ) ? "(" + this.suffix + ")" : "" ), this.suffix, null, null, InputType.Str | InputType.Null ) ), 1, 26 );
					this.refresh = true;

					if ( Lang13.Bool( new_id ) && this.Adjacent( Task13.User ) && !Lang13.Bool( Task13.User.stat ) ) {
						this.suffix = new_id;
						this.name = new Txt().improper().str( "Mulebot (" ).item( this.suffix ).str( ")" ).ToString();
						this.updateDialog();
					}
				} else if ( _a=="sethome" ) {
					this.refresh = false;
					new_home = Interface13.Input( "Enter new home tag", "Mulebot " + ( Lang13.Bool( this.suffix ) ? "(" + this.suffix + ")" : "" ), this.home_destination, null, null, InputType.Str | InputType.Null );
					this.refresh = true;

					if ( Lang13.Bool( new_home ) && this.Adjacent( Task13.User ) && !Lang13.Bool( Task13.User.stat ) ) {
						this.home_destination = new_home;
						this.updateDialog();
					}
				} else if ( _a=="unload" ) {
					
					if ( Lang13.Bool( this.load ) && this.mode != 1 ) {
						
						if ( this.loc == this.target ) {
							this.unload( this.loaddir );
						} else {
							this.unload( 0 );
						}
					}
				} else if ( _a=="autoret" ) {
					this.auto_return = !Lang13.Bool( this.auto_return ) ?1:0;
				} else if ( _a=="autopick" ) {
					this.auto_pickup = !Lang13.Bool( this.auto_pickup ) ?1:0;
				} else if ( _a=="close" ) {
					Task13.User.unset_machine();
					Interface13.Browse( Task13.User, null, "window=mulebot" );
				}
				this.updateDialog();
			} else {
				Interface13.Browse( Task13.User, null, "window=mulebot" );
				Task13.User.unset_machine();
			}
			return null;
		}

		// Function from file: mulebot.dm
		public void send_status(  ) {
			ByTable kv = null;

			kv = new ByTable()
				.Set( "type", "mulebot" )
				.Set( "name", this.suffix )
				.Set( "loca", ( this.loc != null ? ((dynamic)( this.loc.loc )) : ((dynamic)( "Unknown" )) ) )
				.Set( "mode", this.mode )
				.Set( "powr", ( Lang13.Bool( this.cell ) ? ((Obj_Item_Weapon_Cell)this.cell).percent() : 0 ) )
				.Set( "dest", this.destination )
				.Set( "home", this.home_destination )
				.Set( "load", this.load )
				.Set( "retn", this.auto_return )
				.Set( "pick", this.auto_pickup )
			;
			this.post_signal_multiple( this.control_freq, kv );
			return;
		}

		// Function from file: mulebot.dm
		public void post_signal_multiple( int freq = 0, ByTable keyval = null ) {
			dynamic frequency = null;
			Game_Data signal = null;

			
			if ( freq == this.beacon_freq && !this.wires.BeaconRX() ) {
				return;
			}

			if ( freq == this.control_freq && !this.wires.RemoteTX() ) {
				return;
			}
			frequency = GlobalVars.radio_controller.return_frequency( freq );

			if ( !Lang13.Bool( frequency ) ) {
				return;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).source = this;
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).data = keyval;

			if ( Lang13.Bool( ((dynamic)signal).data["findbeacon"] ) ) {
				new ByTable().Set( 1, this ).Set( 2, signal ).Set( "filter", GlobalVars.RADIO_NAVBEACONS ).Apply( Lang13.BindFunc( frequency, "post_signal" ) );
			} else if ( ((dynamic)signal).data["type"] == "mulebot" ) {
				new ByTable().Set( 1, this ).Set( 2, signal ).Set( "filter", GlobalVars.RADIO_MULEBOT ).Apply( Lang13.BindFunc( frequency, "post_signal" ) );
			} else {
				frequency.post_signal( this, signal );
			}
			return;
		}

		// Function from file: mulebot.dm
		public void post_signal( int freq = 0, string key = null, string value = null ) {
			this.post_signal_multiple( freq, new ByTable().Set( "" + key, value ) );
			return;
		}

		// Function from file: mulebot.dm
		public void RunOverCreature( Mob_Living_Carbon H = null, string bloodcolor = null ) {
			int damage = 0;

			this.visible_message( "<span class='warning'>" + this + " drives over " + H + "!</span>" );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/splat.ogg", 50, 1 );
			damage = Rand13.Int( 5, 15 );
			H.apply_damage( damage * 2, "brute", "head" );
			H.apply_damage( damage * 2, "brute", "chest" );
			H.apply_damage( damage * 0.5, "brute", "l_leg" );
			H.apply_damage( damage * 0.5, "brute", "r_leg" );
			H.apply_damage( damage * 0.5, "brute", "l_arm" );
			H.apply_damage( damage * 0.5, "brute", "r_arm" );
			this.bloodiness += 4;
			this.currentBloodColor = bloodcolor;
			return;
		}

		// Function from file: mulebot.dm
		public void at_target(  ) {
			dynamic AM = null;
			Ent_Dynamic A = null;
			int? i = null;
			dynamic loadin_type = null;

			
			if ( !this.reached_target ) {
				this.visible_message( "" + this + " makes a chiming sound!", "You hear a chime." );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/chime.ogg", 50, 0 );
				this.reached_target = true;

				if ( Lang13.Bool( this.load ) ) {
					this.unload( this.loaddir );
				} else if ( Lang13.Bool( this.auto_pickup ) ) {
					
					if ( !this.wires.LoadCheck() ) {
						
						foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( this.loc, ((int)( this.loaddir ??0 )) ), typeof(Ent_Dynamic) )) {
							A = _a;
							

							if ( !Lang13.Bool( A.anchored ) ) {
								AM = A;
								break;
							}
						}
					} else {
						i = null;
						i = 1;

						while (( i ??0) <= this.can_load.len) {
							loadin_type = this.can_load[i];
							AM = Lang13.FindIn( loadin_type, Map13.GetStep( this.loc, ((int)( this.loaddir ??0 )) ) );

							if ( Lang13.Bool( AM ) ) {
								this.f_load( AM );
								break;
							}
							i++;
						}
					}
				}

				if ( Lang13.Bool( this.auto_return ) && this.destination != this.home_destination ) {
					this.start_home();
					this.mode = 4;
				} else {
					this.mode = 0;
				}
			}
			this.send_status();
			return;
		}

		// Function from file: mulebot.dm
		public void start_home(  ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.set_destination( this.home_destination );
				this.mode = 4;
				return;
			}));
			this.icon_state = "mulebot" + this.wires.MobAvoid();
			return;
		}

		// Function from file: mulebot.dm
		public void start(  ) {
			
			if ( this.destination == this.home_destination ) {
				this.mode = 3;
			} else {
				this.mode = 2;
			}
			this.icon_state = "mulebot" + this.wires.MobAvoid();
			return;
		}

		// Function from file: mulebot.dm
		public void set_destination( dynamic new_dest = null ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.new_destination = new_dest;
				this.post_signal( this.beacon_freq, "findbeacon", "delivery" );
				this.updateDialog();
				return;
			}));
			return;
		}

		// Function from file: mulebot.dm
		public void calc_path( Ent_Static avoid = null ) {
			this.path = GlobalFuncs.AStar( this.loc, this.target, typeof(Tile).GetMethod( "CardinalTurfsWithAccess" ), typeof(Tile).GetMethod( "Distance_cardinal" ), 0, 250, null, null, this.botcard, avoid );

			if ( !Lang13.Bool( this.path ) ) {
				this.path = new ByTable();
			}
			return;
		}

		// Function from file: mulebot.dm
		public void process_bot(  ) {
			Ent_Static next = null;
			Ent_Static T = null;
			int goingdir = 0;
			int newdir = 0;
			int moved = 0;

			
			switch ((int)( this.mode )) {
				case 0:
					this.icon_state = "mulebot0";
					return;
					break;
				case 1:
					return;
					break;
				case 2:
				case 3:
				case 4:
					
					if ( this.loc == this.target ) {
						this.at_target();
						return;
					} else if ( this.path.len > 0 && this.target != null ) {
						next = this.path[1];
						this.reached_target = false;

						if ( next == this.loc ) {
							this.path -= next;
							return;
						}

						if ( next is Tile_Simulated ) {
							
							if ( this.bloodiness != 0 ) {
								T = this.loc;

								if ( T is Tile_Simulated ) {
									goingdir = 0;
									newdir = Map13.GetDistance( next, this.loc );

									if ( newdir == this.dir ) {
										goingdir = newdir;
									} else {
										newdir = newdir | this.dir;

										if ( newdir == 3 ) {
											newdir = 1;
										} else if ( newdir == 12 ) {
											newdir = 4;
										}
										goingdir = newdir;
									}
									((dynamic)T).AddTracks( typeof(Obj_Effect_Decal_Cleanable_Blood_Tracks_Wheels), new ByTable(), 0, goingdir, this.currentBloodColor );
								}
								this.bloodiness--;
							}
							Map13.StepTowardsSimple( this, next );
							moved = this.bloodiness;

							if ( Lang13.Bool( this.cell ) ) {
								this.cell.use( 1 );
							}

							if ( moved != 0 ) {
								this.blockcount = 0;
								this.path -= this.loc;

								if ( this.mode == 4 ) {
									Task13.Schedule( 1, (Task13.Closure)(() => {
										this.send_status();
										return;
									}));
								}

								if ( this.destination == this.home_destination ) {
									this.mode = 3;
								} else {
									this.mode = 2;
								}
							} else {
								this.blockcount++;
								this.mode = 4;

								if ( this.blockcount == 3 ) {
									this.visible_message( "" + this + " makes an annoyed buzzing sound.", "You hear an electronic buzzing sound." );
									GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/buzz-two.ogg", 50, 0 );
								}

								if ( this.blockcount > 5 ) {
									this.visible_message( "" + this + " makes a sighing buzz.", "You hear an electronic buzzing sound." );
									GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/buzz-sigh.ogg", 50, 0 );
									Task13.Schedule( 2, (Task13.Closure)(() => {
										this.calc_path( next );

										if ( this.path.len > 0 ) {
											this.visible_message( "" + this + " makes a delighted ping!", "You hear a ping." );
											GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/Ping.ogg", 50, 0 );
										}
										this.mode = 4;
										return;
									}));
									this.mode = 6;
									return;
								}
								return;
							}
						} else {
							this.visible_message( "" + this + " makes an annoyed buzzing sound.", "You hear an electronic buzzing sound." );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/buzz-two.ogg", 50, 0 );
							this.mode = 5;
							return;
						}
					} else {
						this.mode = 5;
						return;
					}
					break;
				case 5:
					this.mode = 6;
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.calc_path();

						if ( this.path.len > 0 ) {
							this.blockcount = 0;
							this.mode = 4;
							this.visible_message( "" + this + " makes a delighted ping!", "You hear a ping." );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/Ping.ogg", 50, 0 );
						} else {
							this.visible_message( "" + this + " makes a sighing buzz.", "You hear an electronic buzzing sound." );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/buzz-sigh.ogg", 50, 0 );
							this.mode = 7;
						}
						return;
					}));
					break;
			}
			return;
		}

		// Function from file: mulebot.dm
		public void unload( double? dirn = null ) {
			dirn = dirn ?? 0;

			dynamic M = null;
			Ent_Static T = null;
			Ent_Dynamic AM = null;
			Ent_Dynamic M2 = null;

			
			if ( !Lang13.Bool( this.load ) ) {
				return;
			}
			this.mode = 1;
			this.overlays.len = 0;
			this.load.loc = this.loc;
			this.load.pixel_y -= 9;
			this.load.layer = Lang13.Initial( this.load, "layer" );

			if ( this.load is Mob ) {
				M = this.load;

				if ( Lang13.Bool( M.client ) ) {
					M.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
					M.client.eye = this;
				}
			}

			if ( Lang13.Bool( dirn ) ) {
				T = this.loc;
				T = Map13.GetStep( T, ((int)( dirn ??0 )) );

				if ( this.CanPass( this.load, T ) ) {
					Map13.Step( this.load, ((int)( dirn ??0 )) );
				} else {
					this.load.loc = this.loc;
				}
			}
			this.load = null;

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				AM = _a;
				

				if ( AM == this.cell || AM == this.botcard ) {
					continue;
				}
				AM.loc = this.loc;
				AM.layer = Convert.ToDouble( Lang13.Initial( AM, "layer" ) );
				AM.pixel_y = Convert.ToInt32( Lang13.Initial( AM, "pixel_y" ) );

				if ( AM is Mob ) {
					M2 = AM;

					if ( Lang13.Bool( ((dynamic)M2).client ) ) {
						((dynamic)M2).client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
						((dynamic)M2).client.eye = this;
					}
				}
			}
			this.mode = 0;
			return;
		}

		// Function from file: mulebot.dm
		[VerbInfo( name: "load" )]
		[VerbArg( 1, InputType.Mob | InputType.Obj )]
		public void f_load( dynamic C = null ) {
			Obj_Structure_Plasticflaps P = null;
			dynamic crate = null;
			dynamic M = null;

			
			if ( this.wires.LoadCheck() && !GlobalFuncs.is_type_in_list( C, this.can_load ) ) {
				this.visible_message( "" + this + " makes a sighing buzz.", "You hear an electronic buzzing sound." );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/buzz-sigh.ogg", 50, 0 );
				return;
			}

			if ( !( C is Obj_Item ) && !( C is Obj_Machinery ) && !( C is Obj_Structure ) && !( C is Mob ) ) {
				return;
			}

			if ( !( C.loc is Tile ) ) {
				return;
			}

			if ( Map13.GetDistance( C, this ) > 1 || Lang13.Bool( this.load ) || !this.on ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_Plasticflaps) )) {
				P = _a;
				

				if ( !this.CanPass( C, P ) ) {
					return;
				}
			}
			this.mode = 1;
			crate = C;

			if ( crate is Obj_Structure_Closet_Crate ) {
				((Obj_Structure_Closet)crate).close();
			}
			C.loc = this.loc;
			Task13.Sleep( 2 );

			if ( C.loc != this.loc ) {
				return;
			}
			C.loc = this;
			this.load = C;
			C.pixel_y += 9;

			if ( Convert.ToDouble( C.layer ) < this.layer ) {
				C.layer = this.layer + 0.1;
			}
			this.overlays.Add( C );

			if ( C is Mob ) {
				M = C;

				if ( Lang13.Bool( M.client ) ) {
					M.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
					M.client.eye = this;
				}
			}
			this.mode = 0;
			this.send_status();
			return;
		}

		// Function from file: mulebot.dm
		public bool toggle_lock( dynamic user = null ) {
			
			if ( this.allowed( user ) ) {
				this.locked = !this.locked;
				this.updateDialog();
				return true;
			} else {
				GlobalFuncs.to_chat( user, "<span class='warning'>Access denied.</span>" );
				return false;
			}
		}

		// Function from file: mulebot.dm
		public bool has_power(  ) {
			return !this.open && Lang13.Bool( this.cell ) && Convert.ToDouble( this.cell.charge ) > 0 && this.wires.HasPower();
		}

		// Function from file: mulebot.dm
		[VerbInfo( name: "wires" )]
		public string f_wires(  ) {
			return this.wires.GetInteractWindow();
		}

		// Function from file: mulebot.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			flag1 = flag1 ?? false;

			dynamic dat = null;

			dat += "<TT><B>Multiple Utility Load Effector Mk. III</B></TT><BR><BR>";
			dat += "ID: " + this.suffix + "<BR>";
			dat += "Power: " + ( this.on ? "On" : "Off" ) + "<BR>";

			if ( !this.open ) {
				dat += "Status: ";

				switch ((int)( this.mode )) {
					case 0:
						dat += "Ready";
						break;
					case 1:
						dat += "Loading/Unloading";
						break;
					case 2:
						dat += "Navigating to Delivery Location";
						break;
					case 3:
						dat += "Navigating to Home";
						break;
					case 4:
						dat += "Waiting for clear path";
						break;
					case 5:
					case 6:
						dat += "Calculating navigation path";
						break;
					case 7:
						dat += "Unable to reach destination";
						break;
				}
				dat += "<BR>Current Load: " + ( Lang13.Bool( this.load ) ? this.load.name : "<i>none</i>" ) + "<BR>";
				dat += "Destination: " + ( !Lang13.Bool( this.destination ) ? ((dynamic)( "<i>none</i>" )) : this.destination ) + "<BR>";
				dat += "Power level: " + ( Lang13.Bool( this.cell ) ? ((Obj_Item_Weapon_Cell)this.cell).percent() : 0 ) + "%<BR>";

				if ( this.locked && !( flag1 == true ) ) {
					dat += new Txt( "<HR>Controls are locked <A href='byond://?src=" ).Ref( this ).str( ";op=unlock'><I>(unlock)</I></A>" ).ToString();
				} else {
					dat += new Txt( "<HR>Controls are unlocked <A href='byond://?src=" ).Ref( this ).str( ";op=lock'><I>(lock)</I></A><BR><BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=power'>Toggle Power</A><BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=stop'>Stop</A><BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=go'>Proceed</A><BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=home'>Return to Home</A><BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=destination'>Set Destination</A><BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=setid'>Set Bot ID</A><BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=sethome'>Set Home</A><BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=autoret'>Toggle Auto Return Home</A> (" ).item( ( Lang13.Bool( this.auto_return ) ? "On" : "Off" ) ).str( ")<BR>" ).ToString();
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=autopick'>Toggle Auto Pickup Crate</A> (" ).item( ( Lang13.Bool( this.auto_pickup ) ? "On" : "Off" ) ).str( ")<BR>" ).ToString();

					if ( Lang13.Bool( this.load ) ) {
						dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=unload'>Unload Now</A><BR>" ).ToString();
					}
					dat += "<HR>The maintenance hatch is closed.<BR>";
				}
			} else if ( !( flag1 == true ) ) {
				dat += "The maintenance hatch is open.<BR><BR>";
				dat += "Power cell: ";

				if ( Lang13.Bool( this.cell ) ) {
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=cellremove'>Installed</A><BR>" ).ToString();
				} else {
					dat += new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";op=cellinsert'>Removed</A><BR>" ).ToString();
				}
				dat += this.f_wires();
			} else {
				dat += "The bot is in maintenance mode and cannot be controlled.<BR>";
			}
			Interface13.Browse( user, "<HEAD><TITLE>Mulebot " + ( Lang13.Bool( this.suffix ) ? "(" + this.suffix + ")" : "" ) + "</TITLE></HEAD>" + dat, "window=mulebot;size=350x500" );
			GlobalFuncs.onclose( user, "mulebot" );
			return null;
		}

		// Function from file: mulebot.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}
			((Mob)a).set_machine( this );
			this.interact( a, false );
			return _default;
		}

		// Function from file: mulebot.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			((Mob)user).set_machine( this );
			this.interact( user, true );
			return null;
		}

		// Function from file: mulebot.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Rand13.PercentChance( 50 ) && !( this.load == null ) ) {
				this.unload( 0 );
			}

			if ( Rand13.PercentChance( 25 ) ) {
				this.visible_message( "<span class='warning'>Something shorts out inside " + this + "!</span>" );
				this.wires.RandomCut();
			}
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return null;
		}

		// Function from file: mulebot.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			int? i = null;

			this.unload( 0 );

			switch ((double?)( severity )) {
				case 2:
					i = null;
					i = 1;

					while (( i ??0) < 3) {
						this.wires.RandomCut();
						i++;
					}
					break;
				case 3:
					this.wires.RandomCut();
					break;
			}
			base.ex_act( severity, (object)(child) );
			return false;
		}

		// Function from file: mulebot.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic C = null;

			
			if ( a is Obj_Item_Weapon_Card_Emag ) {
				this.locked = !this.locked;
				GlobalFuncs.to_chat( b, "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the mulebot's controls!</span>" );
				Icon13.Flick( "mulebot-emagged", this );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/sparks1.ogg", 100, 0 );
			} else if ( a is Obj_Item_Weapon_Card_Id ) {
				
				if ( this.toggle_lock( b ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>Controls " + ( this.locked ? "locked" : "unlocked" ) + ".</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Cell && this.open && !Lang13.Bool( this.cell ) ) {
				C = a;

				if ( Lang13.Bool( b.drop_item( C, this ) ) ) {
					this.cell = C;
					this.updateDialog();
				}
			} else if ( a is Obj_Item_Weapon_Wirecutters || a is Obj_Item_Device_Multitool ) {
				this.attack_hand( b );
			} else if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( this.locked ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>The maintenance hatch cannot be opened or closed while the controls are locked.</span>" );
					return null;
				}
				this.open = !this.open;

				if ( this.open ) {
					this.visible_message( "" + b + " opens the maintenance hatch of " + this, "<span class='notice'>You open " + this + "'s maintenance hatch.</span>" );
					this.on = false;
					this.icon_state = "mulebot-hatch";
				} else {
					this.visible_message( "" + b + " closes the maintenance hatch of " + this, "<span class='notice'>You close " + this + "'s maintenance hatch.</span>" );
					this.icon_state = "mulebot0";
				}
				this.updateDialog();
			} else if ( a is Obj_Item_Weapon_Wrench ) {
				
				if ( this.health < this.maxhealth ) {
					this.health = Num13.MinInt( ((int)( this.maxhealth )), ((int)( this.health + 25 )) );
					((Ent_Static)b).visible_message( "<span class='warning'>" + b + " repairs " + this + "!</span>", "<span class='notice'>You repair " + this + "!</span>" );
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>" + this + " does not need a repair!</span>" );
				}
			} else if ( Lang13.Bool( this.load ) && this.load is Mob ) {
				
				if ( Rand13.PercentChance( Convert.ToInt32( a.force * 2 + 1 ) ) ) {
					this.unload( 0 );
					((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " knocks " ).item( this.load ).str( " off " ).item( this ).str( " with " ).the( a ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>You knock " ).item( this.load ).str( " off " ).item( this ).str( " with " ).the( a ).item().str( "!</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( b, new Txt( "You hit " ).item( this ).str( " with " ).the( a ).item().str( " but to no effect." ).ToString() );
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: mulebot.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( GlobalVars.radio_controller != null ) {
				GlobalVars.radio_controller.remove_object( this, this.control_freq );
				GlobalVars.radio_controller.remove_object( this, this.beacon_freq );
			}

			if ( this.wires != null ) {
				GlobalFuncs.qdel( this.wires );
				this.wires = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}