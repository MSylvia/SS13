// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Mask_Cigarette : Obj_Item_Clothing_Mask {

		public bool lit = false;
		public string icon_on = "cigon";
		public string icon_off = "cigoff";
		public Type type_butt = typeof(Obj_Item_Weapon_Cigbutt);
		public dynamic lastHolder = null;
		public int smoketime = 300;
		public double? chem_volume = 30;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throw_speed = 0.5;
			this.item_state = "cigoff";
			this.w_class = 1;
			this.heat = 1000;
			this.icon_state = "cigoff";
		}

		// Function from file: cigs_lighters.dm
		public Obj_Item_Clothing_Mask_Cigarette ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.flags |= 16384;
			this.create_reagents( this.chem_volume );
			this.reagents.add_reagent( "nicotine", 15 );
			return;
		}

		// Function from file: cigs_lighters.dm
		public override int is_hot(  ) {
			return ( this.lit ?1:0) * this.heat;
		}

		// Function from file: cigs_lighters.dm
		public override bool fire_act( bool? air = null, dynamic exposed_temperature = null, double? exposed_volume = null ) {
			this.f_light();
			return false;
		}

		// Function from file: cigs_lighters.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			dynamic cig = null;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return base.attack( (object)(M), (object)(user), def_zone );
			}
			cig = this.help_light_cig( M, user );

			if ( this.lit && Lang13.Bool( cig ) && user.a_intent == "help" ) {
				
				if ( Lang13.Bool( cig.lit ) ) {
					user.WriteMsg( "<span class='notice'>The " + cig.name + " is already lit.</span>" );
				}

				if ( M == user ) {
					((Ent_Static)cig).attackby( this, user );
				} else {
					cig.light( "<span class='notice'>" + user + " holds the " + this.name + " out for " + M + ", and lights the " + cig.name + ".</span>" );
				}
			} else {
				return base.attack( (object)(M), (object)(user), def_zone );
			}
			return false;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.lit ) {
				((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " calmly drops and treads on " ).the( this ).item().str( ", putting it out instantly.</span>" ).ToString() );
				Lang13.Call( this.type_butt, user.loc );
				new Obj_Effect_Decal_Cleanable_Ash( user.loc );
				GlobalVars.SSobj.processing.Remove( this );
				GlobalFuncs.qdel( this );
			}
			return base.attack_self( (object)(user), (object)(flag), emp );
		}

		// Function from file: cigs_lighters.dm
		public override int? process( dynamic seconds = null ) {
			dynamic location = null;
			Ent_Static M = null;

			location = GlobalFuncs.get_turf( this );
			M = this.loc;

			if ( this.loc is Mob_Living ) {
				((dynamic)M).IgniteMob();
			}
			this.smoketime--;

			if ( this.smoketime < 1 ) {
				Lang13.Call( this.type_butt, location );
				GlobalVars.SSobj.processing.Remove( this );

				if ( this.loc is Mob ) {
					((dynamic)M).WriteMsg( "<span class='notice'>Your " + this.name + " goes out.</span>" );
					((Mob)M).unEquip( this, 1 );
				}
				GlobalFuncs.qdel( this );
				return null;
			}

			if ( Lang13.Bool( location ) ) {
				((Tile)location).hotspot_expose( 700, 5 );
			}

			if ( this.reagents != null && Lang13.Bool( this.reagents.total_volume ) ) {
				this.handle_reagents();
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public void handle_reagents(  ) {
			Ent_Static C = null;
			double? fraction = null;

			
			if ( Lang13.Bool( this.reagents.total_volume ) ) {
				
				if ( this.loc is Mob_Living_Carbon ) {
					C = this.loc;

					if ( this == ((dynamic)C).wear_mask ) {
						
						if ( Rand13.PercentChance( 15 ) ) {
							fraction = Num13.MinInt( ((int)( 0.4 / ( this.reagents.total_volume ??0) )), 1 );
							this.reagents.reaction( C, GlobalVars.INGEST, fraction );
						}
						this.reagents.trans_to( C, 0.4 );
						return;
					}
				}
				this.reagents.remove_any( 0.4 );
			}
			return;
		}

		// Function from file: cigs_lighters.dm
		[VerbInfo( name: "light" )]
		public void f_light( string flavor_text = null ) {
			EffectSystem_ReagentsExplosion e = null;
			Ent_Static M = null;
			EffectSystem_ReagentsExplosion e2 = null;
			Ent_Static M2 = null;
			dynamic T = null;
			Ent_Static M3 = null;

			
			if ( !this.lit ) {
				this.lit = true;
				this.name = "lit " + this.name;
				this.attack_verb = new ByTable(new object [] { "burnt", "singed" });
				this.hitsound = "sound/items/welder.ogg";
				this.damtype = "fire";
				this.force = 4;

				if ( this.reagents.get_reagent_amount( "plasma" ) ) {
					e = new EffectSystem_ReagentsExplosion();
					e.set_up( Num13.Round( ( this.reagents.get_reagent_amount( "plasma" ) ?1:0) / 2.5, 1 ), GlobalFuncs.get_turf( this ), 0, 0 );
					e.start();

					if ( this.loc is Mob ) {
						M = this.loc;
						((Mob)M).unEquip( this, 1 );
					}
					GlobalFuncs.qdel( this );
					return;
				}

				if ( this.reagents.get_reagent_amount( "welding_fuel" ) ) {
					e2 = new EffectSystem_ReagentsExplosion();
					e2.set_up( Num13.Round( ( this.reagents.get_reagent_amount( "welding_fuel" ) ?1:0) / 5, 1 ), GlobalFuncs.get_turf( this ), 0, 0 );
					e2.start();

					if ( this.loc is Mob ) {
						M2 = this.loc;
						((Mob)M2).unEquip( this, 1 );
					}
					GlobalFuncs.qdel( this );
					return;
				}
				this.flags &= 49151;
				this.reagents.handle_reactions();
				this.icon_state = this.icon_on;
				this.item_state = this.icon_on;

				if ( Lang13.Bool( flavor_text ) ) {
					T = GlobalFuncs.get_turf( this );
					((Ent_Static)T).visible_message( flavor_text );
				}
				GlobalVars.SSobj.processing.Or( this );

				if ( this.loc is Mob ) {
					M3 = this.loc;
					((dynamic)M3).update_inv_wear_mask();
					((dynamic)M3).update_inv_l_hand();
					((dynamic)M3).update_inv_r_hand();
				}
			}
			return;
		}

		// Function from file: cigs_lighters.dm
		public string is_lighter( dynamic O = null, dynamic user = null ) {
			string lighting_text = null;

			lighting_text = null;

			if ( O is Obj_Item_Weapon_Weldingtool ) {
				lighting_text = "<span class='notice'>" + user + " casually lights the " + this.name + " with " + O + ", what a badass.</span>";
			} else if ( O is Obj_Item_Weapon_Lighter_Greyscale ) {
				lighting_text = "<span class='notice'>After some fiddling, " + user + " manages to light their " + this.name + " with " + O + ".</span>";
			} else if ( O is Obj_Item_Weapon_Lighter ) {
				lighting_text = "<span class='rose'>With a single flick of their wrist, " + user + " smoothly lights their " + this.name + " with " + O + ". Damn they're cool.</span>";
			} else if ( O is Obj_Item_Weapon_Melee_Energy ) {
				lighting_text = "<span class='warning'>" + user + " swings their " + O + ", barely missing their nose. They light their " + this.name + " in the process.</span>";
			} else if ( O is Obj_Item_Device_Assembly_Igniter ) {
				lighting_text = "<span class='notice'>" + user + " fiddles with " + O + ", and manages to light their " + this.name + ".</span>";
			} else if ( O is Obj_Item_Device_Flashlight_Flare ) {
				lighting_text = "<span class='notice'>" + user + " lights their " + this.name + " with " + O + " like a real badass.</span>";
			} else if ( ((Obj_Item)O).is_hot() != 0 ) {
				lighting_text = "<span class='notice'>" + user + " lights their " + this.name + " with " + O + ".</span>";
			}
			return lighting_text;
		}

		// Function from file: cigs_lighters.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			dynamic transfered = null;

			
			if ( !( proximity_flag == true ) || this.lit ) {
				return false;
			}

			if ( target is Obj_Item_Weapon_ReagentContainers_Glass ) {
				transfered = ((Reagents)target.reagents).trans_to( this, this.chem_volume );

				if ( Lang13.Bool( transfered ) ) {
					user.WriteMsg( new Txt( "<span class='notice'>You dip " ).the( this ).item().str( " into " ).the( target ).item().str( ".</span>" ).ToString() );
				} else if ( !Lang13.Bool( target.reagents.total_volume ) ) {
					user.WriteMsg( "<span class='notice'>" + target + " is empty.</span>" );
				} else {
					user.WriteMsg( "<span class='notice'>" + this + " is full.</span>" );
				}
			}
			return false;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			string lighting_text = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( !this.lit && this.smoketime > 0 && ((Obj_Item)A).is_hot() != 0 ) {
				lighting_text = this.is_lighter( A, user );

				if ( Lang13.Bool( lighting_text ) ) {
					this.f_light( lighting_text );
					return null;
				}
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " is huffing the " ).item( this.name ).str( " as quickly as they can! It looks like " ).he_she_it_they().str( "'s trying to give " ).himself_herself_itself_themself().str( " cancer.</span>" ).ToString() );
			return 12;
		}

	}

}