// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Mask_Cigarette : Obj_Item_Clothing_Mask {

		public bool lit = false;
		public string overlay_on = "ciglit";
		public Type type_butt = typeof(Obj_Item_Weapon_Cigbutt);
		public dynamic lastHolder = null;
		public bool brightness_on = true;
		public dynamic smoketime = 300;
		public double? chem_volume = 15;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "cig";
			this.w_class = 1;
			this.attack_verb = new ByTable(new object [] { "burnt", "singed" });
			this.heat_production = 1000;
			this.light_color = "#FAA019";
			this.icon_state = "cig";
		}

		// Function from file: cigs_lighters.dm
		public Obj_Item_Clothing_Mask_Cigarette ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.flags |= 16384;
			this.create_reagents( this.chem_volume );
			this.update_brightness();
			return;
		}

		// Function from file: cigs_lighters.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			dynamic cig = null;

			
			if ( !( M is Mob_Living_Carbon ) ) {
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}

			if ( !this.lit && M.on_fire ) {
				
				if ( M == user ) {
					this.f_light( new Txt( "<span class='notice'>" ).item( user ).str( " uses " ).his_her_its_their().str( " burning body to light " ).the( this ).item().str( ". Smooth.</span>" ).ToString() );
					return null;
				} else {
					this.f_light( new Txt( "<span class='notice'>" ).item( user ).str( " uses the flames on " ).item( M ).str( " to light " ).the( this ).item().str( ". How rude.</span>" ).ToString() );
					return null;
				}
			}

			if ( M.wear_mask is Obj_Item_Clothing_Mask_Cigarette && user.zone_sel != null && ((dynamic)user.zone_sel).selecting == "mouth" && this.lit ) {
				cig = M.wear_mask;

				if ( M == user ) {
					((Ent_Static)cig).attackby( this, user );
				} else {
					cig.light( new Txt( "<span class='notice'>" ).item( user ).str( " holds " ).his_her_its_their().str( " " ).item( this.name ).str( " out for " ).item( M ).str( ", and lights " ).the( cig ).item().str( ".</span>" ).ToString() );
				}
			} else {
				return base.attack( (object)(M), (object)(user), def_zone, eat_override );
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic T = null;

			
			if ( this.lit ) {
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " calmly drops and treads on the lit " + this.name + ", putting it out.</span>" );
				T = GlobalFuncs.get_turf( this );
				Lang13.Call( this.type_butt, T );
				this.lit = false;
				this.update_brightness();
				GlobalFuncs.qdel( this );
			}
			return base.attack_self( (object)(user), (object)(flag), emp );
		}

		// Function from file: cigs_lighters.dm
		public override dynamic process(  ) {
			dynamic location = null;
			Ent_Static M = null;

			location = GlobalFuncs.get_turf( this );
			M = this.loc;

			if ( this.loc is Mob_Living ) {
				((dynamic)M).IgniteMob();
			}
			this.smoketime--;

			if ( Convert.ToDouble( this.smoketime ) <= 0 ) {
				Lang13.Call( this.type_butt, location );
				this.lit = false;
				this.update_brightness();

				if ( this.loc is Mob ) {
					GlobalFuncs.to_chat( M, "<span class='notice'>Your " + this.name + " goes out.</span>" );
					((dynamic)M).u_equip( this, 0 );
				}
				GlobalFuncs.qdel( this );
				return null;
			}

			if ( Lang13.Bool( location ) ) {
				((Tile)location).hotspot_expose( 700, 5, null, this.loc is Tile );
			}

			if ( Lang13.Bool( this.reagents ) && Lang13.Bool( this.reagents.total_volume ) ) {
				
				if ( M is Mob_Living_Carbon && this == ((dynamic)M).wear_mask ) {
					Interface13.Stat( null, ((dynamic)( Lang13.Bool( ((dynamic)M).mutations ) || M.loc is Obj_Machinery_Atmospherics_Unary_CryoCell )).Contains( ((Reagents)M.reagents).has_reagent( "lexorin" ) || 100 != 0 ) );

					if ( false ) {
						((Reagents)this.reagents).remove_any( 0.2 );
					} else {
						
						if ( Rand13.PercentChance( 25 ) ) {
							((Reagents)this.reagents).reaction( M, GlobalVars.INGEST );
						}
						((Reagents)this.reagents).trans_to( M, 1 );
					}
				} else {
					((Reagents)this.reagents).remove_any( 0.2 );
				}
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic transfered = null;

			base.afterattack( (object)(A), (object)(user), flag, (object)(_params), struggle );

			if ( A is Obj_Item_Weapon_ReagentContainers_Glass ) {
				
				if ( ((Reagents)A.reagents).has_reagent( "sacid" ) || ((Reagents)A.reagents).has_reagent( "pacid" ) ) {
					Lang13.Call( this.type_butt, GlobalFuncs.get_turf( A ) );
					GlobalVars.processing_objects.Remove( this );
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>Half of " ).the( this ).item().str( " dissolves with a nasty fizzle as you dip it into " ).the( A ).item().str( ".</span>" ).ToString() );
					user.drop_item( this, null, 1 );
					GlobalFuncs.qdel( this );
					return false;
				}

				if ( ((Reagents)A.reagents).has_reagent( "water" ) && this.lit ) {
					Lang13.Call( this.type_butt, GlobalFuncs.get_turf( A ) );
					GlobalVars.processing_objects.Remove( this );
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " fizzles as you dip it into " ).the( A ).item().str( ".</span>" ).ToString() );
					user.drop_item( this, null, 1 );
					GlobalFuncs.qdel( this );
					return false;
				}
				transfered = ((Reagents)A.reagents).trans_to( this, this.chem_volume );

				if ( Lang13.Bool( transfered ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You dip " ).the( this ).item().str( " into " ).the( A ).item().str( ".</span>" ).ToString() );
				} else if ( !Lang13.Bool( A.reagents.total_volume ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( A ).item().str( " is empty.</span>" ).ToString() );
					return false;
				}
			}
			return false;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;
			dynamic Z = null;
			dynamic L = null;
			dynamic S = null;
			dynamic I = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( this.lit ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " is already lit.</span>" ).ToString() );
				return null;
			}

			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( Lang13.Bool( ((Obj)WT).is_hot() ) ) {
					this.f_light( new Txt( "<span class='notice'>" ).item( b ).str( " casually lights " ).his_her_its_their().str( " " ).item( this.name ).str( " with " ).the( a ).item().str( ", what a badass.</span>" ).ToString() );
				}
			} else if ( a is Obj_Item_Weapon_Lighter_Zippo ) {
				Z = a;

				if ( Lang13.Bool( ((Obj)Z).is_hot() ) ) {
					this.f_light( new Txt( "<span class='rose'>With a single flick of their wrist, " ).item( b ).str( " smoothly lights " ).his_her_its_their().str( " " ).item( this.name ).str( " with " ).the( a ).item().str( ". Damn, that's cool.</span>" ).ToString() );
				}
			} else if ( a is Obj_Item_Weapon_Lighter ) {
				L = a;

				if ( Lang13.Bool( ((Obj)L).is_hot() ) ) {
					this.f_light( new Txt( "<span class='notice'>After some fiddling, " ).item( b ).str( " manages to light " ).his_her_its_their().str( " " ).item( this.name ).str( " with " ).the( a ).item().str( ".</span>" ).ToString() );
				}
			} else if ( a is Obj_Item_Weapon_Melee_Energy_Sword ) {
				S = a;

				if ( Lang13.Bool( ((Obj)S).is_hot() ) ) {
					this.f_light( new Txt( "<span class='warning'>" ).item( b ).str( " raises " ).his_her_its_their().str( " " ).item( a.name ).str( ", lighting " ).the( this ).item().str( ". Holy fucking shit.</span>" ).ToString() );
				}
			} else if ( a is Obj_Item_Device_Assembly_Igniter ) {
				I = a;

				if ( Lang13.Bool( ((Obj)I).is_hot() ) ) {
					this.f_light( new Txt( "<span class='notice'>" ).item( b ).str( " fiddles with " ).his_her_its_their().str( " " ).item( a.name ).str( ", and manages to light their " ).item( this.name ).str( ".</span>" ).ToString() );
				}
			} else if ( Lang13.Bool( ((Obj)a).is_hot() ) ) {
				this.f_light( new Txt( "<span class='notice'>" ).item( b ).str( " lights " ).his_her_its_their().str( " " ).item( this.name ).str( " with " ).the( a ).item().str( ".</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override double? is_hot(  ) {
			
			if ( this.lit ) {
				return this.heat_production;
			}
			return 0;
		}

		// Function from file: cigs_lighters.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( this.lit ) {
				return false;
			}
			this.f_light( new Txt( "<span class='danger'>The raging fire sets " ).the( this ).item().str( " alight.</span>" ).ToString() );
			return false;
		}

		// Function from file: cigs_lighters.dm
		[VerbInfo( name: "light" )]
		public virtual void f_light( string flavor_text = null ) {
			flavor_text = flavor_text ?? new Txt().item( Task13.User ).str( " lights " ).the( this ).item().str( "." ).ToString();

			Effect_Effect_System_ReagentsExplosion e = null;
			Ent_Static M = null;
			Effect_Effect_System_ReagentsExplosion e2 = null;
			Ent_Static M2 = null;
			dynamic T = null;
			Ent_Static M3 = null;

			
			if ( this.lit ) {
				return;
			}

			if ( ((Reagents)this.reagents).get_reagent_amount( "water" ) ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>You fail to light " ).the( this ).item().str( ". It appears to be wet.</span>" ).ToString() );
				return;
			}

			if ( ((Reagents)this.reagents).get_reagent_amount( "plasma" ) ) {
				e = new Effect_Effect_System_ReagentsExplosion();
				e.set_up( Num13.Round( ( ((Reagents)this.reagents).get_reagent_amount( "plasma" ) ?1:0) / 2.5, 1 ), GlobalFuncs.get_turf( this ), 0, 0 );
				e.start();

				if ( this.loc is Mob ) {
					M = this.loc;
					((dynamic)M).drop_from_inventory( this );
				}
				GlobalFuncs.qdel( this );
				return;
			}

			if ( ((Reagents)this.reagents).get_reagent_amount( "fuel" ) ) {
				e2 = new Effect_Effect_System_ReagentsExplosion();
				e2.set_up( Num13.Round( ( ((Reagents)this.reagents).get_reagent_amount( "fuel" ) ?1:0) / 5, 1 ), GlobalFuncs.get_turf( this ), 0, 0 );
				e2.start();

				if ( this.loc is Mob ) {
					M2 = this.loc;
					((dynamic)M2).drop_from_inventory( this );
				}
				GlobalFuncs.qdel( this );
				return;
			}
			this.lit = true;
			this.flags &= 49151;
			this.flags |= 8200;
			((Reagents)this.reagents).handle_reactions();
			T = GlobalFuncs.get_turf( this );
			((Ent_Static)T).visible_message( flavor_text );
			this.update_brightness();

			if ( this.loc is Mob ) {
				M3 = this.loc;
				((dynamic)M3).update_inv_wear_mask( 0 );
				((dynamic)M3).update_inv_l_hand( 0 );
				((dynamic)M3).update_inv_r_hand( 1 );
			}
			return;
		}

		// Function from file: cigs_lighters.dm
		public void update_brightness(  ) {
			
			if ( this.lit ) {
				GlobalVars.processing_objects.Add( this );
				this.set_light( this.brightness_on );
			} else {
				GlobalVars.processing_objects.Remove( this );
				this.set_light( 0 );
			}
			this.update_icon();
			return;
		}

		// Function from file: cigs_lighters.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			switch ((bool)( this.lit )) {
				case 1:
					this.name = "lit " + Lang13.Initial( this, "name" );
					this.item_state = "" + Lang13.Initial( this, "item_state" ) + "on";
					this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "on";
					this.damtype = "fire";
					break;
				case 0:
					this.name = "" + Lang13.Initial( this, "name" );
					this.item_state = "" + Lang13.Initial( this, "item_state" ) + "off";
					this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "off";
					this.damtype = "brute";
					break;
			}
			return null;
		}

		// Function from file: cigs_lighters.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, new Txt().The( this ).item().str( " is " ).item( ( this.lit ? "" : "un" ) ).str( "lit." ).ToString() );
			return null;
		}

	}

}