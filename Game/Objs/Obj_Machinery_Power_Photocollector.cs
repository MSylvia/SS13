// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Photocollector : Obj_Machinery_Power {

		public double last_power = 0;
		public int production_ratio = 290;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.ghost_read = false;
			this.machine_flags = 24;
			this.icon = "icons/obj/machines/optical/lasergenerator.dmi";
			this.icon_state = "lasergen";
		}

		// Function from file: photocollector.dm
		public Obj_Machinery_Power_Photocollector ( dynamic loc = null ) : base( (object)(loc) ) {
			GlobalVars.photocollector_list.Add( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: photocollector.dm
		public void update_icons(  ) {
			this.overlays.len = 0;

			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}

			if ( Lang13.Bool( this.anchored ) && this.beams.len > 0 ) {
				this.overlays.Add( "lasergen-on" );
			}
			return;
		}

		// Function from file: photocollector.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			} else if ( a is Obj_Item_Device_Analyzer || a is Obj_Item_Device_Multitool ) {
				
				if ( this.last_power != 0 ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( a ).item().str( " registers that " ).item( GlobalFuncs.format_watts( this.last_power ) ).str( " is being produced every cycle.</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( a ).item().str( " registers that the unit is currently not producing power.</span>" ).ToString() );
				}
				return 1;
			}
			return null;
		}

		// Function from file: photocollector.dm
		public override int wrenchAnchor( dynamic user = null ) {
			
			if ( base.wrenchAnchor( (object)(user) ) == 1 ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					this.connect_to_network();
				} else {
					this.disconnect_from_network();
				}
				return 1;
			}
			return -1;
		}

		// Function from file: photocollector.dm
		public override dynamic process(  ) {
			int avail_energy = 0;
			Obj_Effect_Beam_Emitter EB = null;
			int power_produced = 0;

			this.last_power = 0;

			if ( !Lang13.Bool( this.anchored ) || this.beams.len == 0 ) {
				return null;
			}
			avail_energy = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.beams, typeof(Obj_Effect_Beam_Emitter) )) {
				EB = _a;
				

				if ( EB != null ) {
					avail_energy += EB.power ??0;
				}
			}

			if ( avail_energy >= 1 ) {
				power_produced = avail_energy * this.production_ratio;
				this.add_avail( power_produced );
				this.last_power = power_produced;
			}
			return null;
		}

		// Function from file: photocollector.dm
		public override void beam_disconnect( Obj_Effect_Beam B = null ) {
			base.beam_disconnect( B );
			this.update_icons();
			return;
		}

		// Function from file: photocollector.dm
		public override bool beam_connect( Obj_Effect_Beam B = null ) {
			base.beam_connect( B );
			this.update_icons();
			return false;
		}

		// Function from file: photocollector.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.photocollector_list.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}