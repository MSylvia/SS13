// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Hydroponics : Obj_Machinery_PortableAtmospherics {

		public bool draw_warnings = true;
		public bool update_icon_after_process = false;
		public double waterlevel = 100;
		public double nutrilevel = 100;
		public double pestlevel = 0;
		public double weedlevel = 0;
		public double toxins = 0;
		public bool improper_light = false;
		public bool improper_kpa = false;
		public bool improper_heat = false;
		public int missing_gas = 0;
		public bool dead = false;
		public bool harvest = false;
		public double age = 0;
		public bool sampled = false;
		public double? yield_mod = 1;
		public double mutation_mod = 1;
		public double mutation_level = 0;
		public bool is_somatoraying = false;
		public double health = 0;
		public double lastproduce = 0;
		public int lastcycle = 0;
		public int cycledelay = 150;
		public bool closed_system = false;
		public bool force_update = false;
		public int skip_aging = 0;
		public bool bees = false;
		public double weed_coefficient = 1;
		public int internal_light = 1;
		public bool light_on = false;
		public Seed seed = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.flags = 4097;
			this.volume = 100;
			this.machine_flags = 30;
			this.icon = "icons/obj/hydroponics.dmi";
			this.icon_state = "hydrotray3";
		}

		// Function from file: hydro_tray.dm
		public Obj_Machinery_PortableAtmospherics_Hydroponics ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( 200 );
			this.connect();
			this.update_icon();
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Hydroponics(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				new Obj_Item_Weapon_ReagentContainers_Glass_Beaker(), 
				new Obj_Item_Weapon_ReagentContainers_Glass_Beaker(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();

			if ( this.closed_system ) {
				this.flags &= 61439;
			}
			return;
		}

		// Function from file: hydro_tray_process.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int t_growthstate = 0;

			this.update_icon_after_process = false;
			this.overlays.len = 0;
			this.update_name();

			if ( !( this.seed == null ) ) {
				
				if ( this.draw_warnings && this.health <= this.seed.endurance / 2 ) {
					this.overlays.Add( new Image( this.seed.plant_dmi, "over_lowhealth3" ) );
				}

				if ( this.dead ) {
					this.overlays.Add( new Image( this.seed.plant_dmi, "" + this.seed.plant_icon + "-dead" ) );
				} else if ( this.harvest ) {
					this.overlays.Add( new Image( this.seed.plant_dmi, "" + this.seed.plant_icon + "-harvest" ) );
				} else if ( this.age < this.seed.maturation ) {
					t_growthstate = Num13.MaxInt( 1, Num13.Floor( this.age * this.seed.growth_stages / this.seed.maturation ) );
					this.overlays.Add( new Image( this.seed.plant_dmi, "" + this.seed.plant_icon + "-grow" + t_growthstate ) );
					this.lastproduce = this.age;
				} else {
					this.overlays.Add( new Image( this.seed.plant_dmi, "" + this.seed.plant_icon + "-grow" + this.seed.growth_stages ) );
				}
			}

			if ( this.closed_system ) {
				this.overlays.Add( "hydrocover" );
			}

			if ( this.draw_warnings ) {
				
				if ( this.waterlevel <= 10 ) {
					this.overlays.Add( "over_lowwater3" );
				}

				if ( this.nutrilevel <= 2 ) {
					this.overlays.Add( "over_lownutri3" );
				}

				if ( this.weedlevel >= 5 || this.pestlevel >= 5 || this.toxins >= 40 || this.improper_heat || this.improper_light || this.improper_kpa || this.missing_gas != 0 ) {
					this.overlays.Add( "over_alert3" );
				}

				if ( this.harvest ) {
					this.overlays.Add( "over_harvest3" );
				}
			}
			this.calculate_light();
			return null;
		}

		// Function from file: hydro_tray_process.dm
		public override dynamic process(  ) {
			dynamic BEE = null;
			int healthmod = 0;
			Ent_Static T = null;
			GasMixture environment = null;
			dynamic gas = null;
			dynamic pressure = null;
			dynamic gas2 = null;
			dynamic room = null;
			dynamic light_available = null;
			int toxin_uptake = 0;
			dynamic A = null;

			this.process_reagents();

			if ( this.force_update ) {
				this.force_update = false;
			} else if ( Game13.time < this.lastcycle + this.cycledelay ) {
				
				if ( this.update_icon_after_process ) {
					this.update_icon();
				}
				return null;
			}
			this.lastcycle = Game13.time;
			BEE = Lang13.FindIn( typeof(Mob_Living_SimpleAnimal_Bee), this.loc );

			if ( Lang13.Bool( BEE ) && BEE.feral < 1 ) {
				this.bees = true;
			} else {
				this.bees = false;
			}

			if ( this.waterlevel > 10 && this.nutrilevel > 2 && Rand13.PercentChance( ((int)( ( this.seed == null ? 5 : 1 / ( ( this.bees ?1:0) + 1 ) ) )) ) ) {
				this.weedlevel += this.weed_coefficient;

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}

			if ( this.weedlevel >= 10 && Rand13.PercentChance( 10 ) ) {
				
				if ( !( this.seed != null ) || this.weedlevel >= this.seed.weed_tolerance + 2 ) {
					this.weed_invasion();
				}
			}

			if ( !( this.seed != null ) || this.dead ) {
				
				if ( this.update_icon_after_process ) {
					this.update_icon();
				}
				return null;
			}

			if ( Rand13.PercentChance( ((int)( 1 / ( ( this.bees ?1:0) + 1 ) )) ) ) {
				this.pestlevel += 0.5;

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}

			if ( this.bees && this.age >= this.seed.maturation && Rand13.PercentChance( 50 ) ) {
				
				if ( this.harvest ) {
					this.skip_aging++;
				} else {
					this.lastproduce--;
				}
			}

			if ( this.skip_aging != 0 ) {
				this.skip_aging--;
			} else {
				
				if ( Rand13.PercentChance( 80 ) ) {
					this.age += 1;
				}
				this.update_icon_after_process = true;
			}

			if ( this.seed.immutable == -1 ) {
				
				if ( Rand13.PercentChance( 5 ) ) {
					this.mutate( Rand13.Int( 5, 15 ) );
				}
			}

			if ( this.seed.nutrient_consumption > 0 && this.nutrilevel > 0 && Rand13.PercentChance( 25 ) ) {
				this.nutrilevel -= Num13.MaxInt( 0, ((int)( this.seed.nutrient_consumption )) );

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}

			if ( this.seed.water_consumption > 0 && this.waterlevel > 0 && Rand13.PercentChance( 25 ) ) {
				this.waterlevel -= Num13.MaxInt( 0, ((int)( this.seed.water_consumption )) );

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}
			healthmod = Rand13.Int( 1, 3 );

			if ( Rand13.PercentChance( 35 ) ) {
				
				if ( this.nutrilevel > 2 ) {
					this.health += healthmod;
				} else {
					this.affect_growth( -1 );
					this.health -= healthmod;
				}

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}

			if ( Rand13.PercentChance( 35 ) ) {
				
				if ( this.waterlevel < 10 ) {
					this.health += healthmod;
				} else {
					this.affect_growth( -1 );
					this.health -= healthmod;
				}

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}
			T = this.loc;

			if ( this.closed_system && ( Lang13.Bool( this.connected_port ) || Lang13.Bool( this.holding ) ) ) {
				environment = this.air_contents;
			}

			if ( !( environment != null ) ) {
				
				if ( T is Tile ) {
					environment = T.return_air();
				}
			}

			if ( !( environment != null ) ) {
				
				if ( T is Tile_Space ) {
					environment = GlobalVars.space_gas;
				} else {
					return null;
				}
			}

			if ( this.seed.consume_gasses != null && this.seed.consume_gasses.len != 0 ) {
				this.missing_gas = 0;

				foreach (dynamic _b in Lang13.Enumerate( this.seed.consume_gasses )) {
					gas = _b;
					

					if ( environment != null ) {
						
						dynamic _a = gas; // Was a switch-case, sorry for the mess.
						if ( _a=="oxygen" ) {
							
							if ( Convert.ToDouble( environment.oxygen ) < Convert.ToDouble( this.seed.consume_gasses[gas] ) ) {
								this.missing_gas++;
								continue;
							}
							environment.adjust_gas( gas, -Num13.MinInt( Convert.ToInt32( this.seed.consume_gasses[gas] ), Convert.ToInt32( environment.oxygen ) ), true );
						} else if ( _a=="plasma" ) {
							
							if ( Convert.ToDouble( environment.toxins ) < Convert.ToDouble( this.seed.consume_gasses[gas] ) ) {
								this.missing_gas++;
								continue;
							}
							environment.adjust_gas( gas, -Num13.MinInt( Convert.ToInt32( this.seed.consume_gasses[gas] ), Convert.ToInt32( environment.toxins ) ), true );
						} else if ( _a=="nitrogen" ) {
							
							if ( Convert.ToDouble( environment.nitrogen ) < Convert.ToDouble( this.seed.consume_gasses[gas] ) ) {
								this.missing_gas++;
								continue;
							}
							environment.adjust_gas( gas, -Num13.MinInt( Convert.ToInt32( this.seed.consume_gasses[gas] ), Convert.ToInt32( environment.nitrogen ) ), true );
						} else if ( _a=="carbon_dioxide" ) {
							
							if ( Convert.ToDouble( environment.carbon_dioxide ) < Convert.ToDouble( this.seed.consume_gasses[gas] ) ) {
								this.missing_gas++;
								continue;
							}
							environment.adjust_gas( gas, -Num13.MinInt( Convert.ToInt32( this.seed.consume_gasses[gas] ), Convert.ToInt32( environment.carbon_dioxide ) ), true );
						}
					} else {
						this.missing_gas++;
					}
				}

				if ( this.missing_gas > 0 ) {
					this.health -= this.missing_gas;

					if ( this.draw_warnings ) {
						this.update_icon_after_process = true;
					}
				}
			}
			pressure = environment.return_pressure();

			if ( Convert.ToDouble( pressure ) < Convert.ToDouble( this.seed.lowkpa_tolerance ) || Convert.ToDouble( pressure ) > Convert.ToDouble( this.seed.highkpa_tolerance ) ) {
				this.health -= healthmod;
				this.improper_kpa = true;

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			} else {
				this.improper_kpa = false;
			}

			if ( Math.Abs( ( environment.temperature ??0) - Convert.ToDouble( this.seed.ideal_heat ) ) > Convert.ToDouble( this.seed.heat_tolerance ) ) {
				this.health -= healthmod;
				this.improper_heat = true;

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			} else {
				this.improper_heat = false;
			}

			if ( this.seed.exude_gasses != null && this.seed.exude_gasses.len != 0 ) {
				
				foreach (dynamic _c in Lang13.Enumerate( this.seed.exude_gasses )) {
					gas2 = _c;
					
					environment.adjust_gas( gas2, Num13.MaxInt( 1, Num13.Floor( Convert.ToDouble( this.seed.exude_gasses[gas2] * Num13.Floor( this.seed.potency ) / this.seed.exude_gasses.len ) ) ) );
				}
			}

			if ( this.seed.alter_temp != 0 ) {
				
				if ( T is Tile_Simulated ) {
					room = T.remove_air( environment.total_moles );

					if ( Convert.ToDouble( room.temperature ) < Convert.ToDouble( this.seed.ideal_heat - this.seed.heat_tolerance ) ) {
						room.temperature += this.seed.potency * 3;
					} else if ( Convert.ToDouble( room.temperature ) > Convert.ToDouble( this.seed.ideal_heat + this.seed.heat_tolerance ) ) {
						room.temperature -= this.seed.potency * 3;
					}
					room.react();
					T.assume_air( room );
				}
			}
			light_available = 5;

			if ( Lang13.Bool( ((dynamic)T).dynamic_lighting ) ) {
				light_available = ((dynamic)T).get_lumcount() * 10;
			}

			if ( !( this.seed.biolum != 0 ) && Math.Abs( Convert.ToDouble( light_available - this.seed.ideal_light ) ) > Convert.ToDouble( this.seed.light_tolerance ) ) {
				this.health -= healthmod;

				if ( Rand13.PercentChance( 35 ) ) {
					this.affect_growth( -1 );
				}
				this.improper_light = true;

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			} else {
				this.improper_light = false;
			}

			if ( this.toxins > 0 ) {
				toxin_uptake = Num13.MaxInt( 1, Num13.Floor( this.toxins / 10 ) );

				if ( this.toxins > this.seed.toxins_tolerance ) {
					this.health -= toxin_uptake;
				}
				this.toxins -= toxin_uptake * ( ( this.bees ?1:0) + 1 );

				if ( Lang13.Bool( BEE ) && Lang13.Bool( BEE.parent ) ) {
					A = BEE.parent;
					A.toxic = ( Convert.ToDouble( A.toxic + toxin_uptake / 2 ) <= 0 ? 0 : ( Convert.ToDouble( A.toxic + toxin_uptake / 2 ) >= 25 ? 25 : Convert.ToInt32( A.toxic + toxin_uptake / 2 ) ) );
				}

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}

			if ( this.pestlevel > 0 ) {
				
				if ( this.seed.carnivorous != 0 ) {
					this.health += 1;
					this.pestlevel -= 1;
				} else if ( this.pestlevel >= this.seed.pest_tolerance ) {
					this.health -= 1;
				}

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}

			if ( this.weedlevel > 0 ) {
				
				if ( this.seed.parasite != 0 ) {
					this.health += 1;
					this.weedlevel -= 1;
				} else if ( this.weedlevel >= this.seed.weed_tolerance ) {
					this.health -= 1;
				}

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			}

			if ( this.age > this.seed.lifespan ) {
				this.health -= Rand13.Int( 3, 5 ) / ( ( this.bees ?1:0) + 1 );

				if ( this.draw_warnings ) {
					this.update_icon_after_process = true;
				}
			} else if ( this.age < 0 ) {
				this.seed.spawn_seed_packet( GlobalFuncs.get_turf( this ) );
				this.remove_plant();
				this.force_update = true;
				this.process();
			}
			this.check_health();

			if ( !this.dead && this.seed.products != null && this.seed.products.len != 0 ) {
				
				if ( this.age > this.seed.production ) {
					
					if ( this.age - this.lastproduce > this.seed.production && !this.harvest ) {
						this.harvest = true;
						this.lastproduce = this.age;
					}
				} else if ( this.harvest ) {
					this.harvest = false;
					this.lastproduce = this.age;
				}
			}

			if ( this.seed.spread != 0 && !this.closed_system && this.age >= this.seed.maturation && Rand13.PercentChance( Num13.MaxInt( 10, ((int)( this.seed.potency )) ) * 2 ) ) {
				
				if ( this.nutrilevel < 8 && this.waterlevel < 80 || Lang13.Bool( this.seed.hematophage ) || this.seed.carnivorous != 0 ) {
					
					if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Effect_Plantsegment), T ) ) ) {
						new Obj_Effect_Plantsegment( T, this.seed );

						switch ((int)( this.seed.spread )) {
							case 1:
								GlobalFuncs.msg_admin_attack( "limited growth creeper vines (" + this.seed.display_name + ") have spread out of a tray. <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + T.x + ";Y=" + T.y + ";Z=" + T.z + "'>(JMP)</a>" );
								break;
							case 2:
								GlobalFuncs.msg_admin_attack( "space vines (" + this.seed.display_name + ") have spread out of a tray. <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + T.x + ";Y=" + T.y + ";Z=" + T.z + "'>(JMP)</a>" );
								break;
						}
					}
				}
			}
			this.check_level_sanity();

			if ( this.update_icon_after_process ) {
				this.update_icon();
			}
			return null;
		}

		// Function from file: hydro_tray.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			dynamic P = null;
			int? sev = null;

			
			if ( this.seed != null && this.seed.immutable > 0 ) {
				return null;
			}

			if ( !this.is_somatoraying && Proj is Obj_Item_Projectile_Energy_Floramut ) {
				P = Proj;
				sev = Lang13.IntNullable( P.mutstrength );
				this.is_somatoraying = true;
				Task13.Schedule( ( sev ??0) * 4, (Task13.Closure)(() => {
					this.is_somatoraying = false;

					if ( this != null && this.seed != null && !( this.seed.immutable != 0 ) && !this.dead ) {
						this.mutate( sev );

						if ( Rand13.PercentChance( 30 ) && this.seed.yield != -1 ) {
							this.apply_mut( "plusstat_yield", sev );
						}
						return;
					}
					return;
				}));
			} else if ( Proj is Obj_Item_Projectile_Energy_Florayield ) {
				
				if ( this.seed != null && !this.dead ) {
					this.yield_mod = ( ( this.yield_mod ??0) + Rand13.Int( 3, 5 ) / 10 <= 1 ? 1 : ( ( this.yield_mod ??0) + Rand13.Int( 3, 5 ) / 10 >= 2 ? 2 : ( this.yield_mod ??0) + Rand13.Int( 3, 5 ) / 10 ) );

					if ( ( this.yield_mod ??0) >= 2 ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " looks lush and healthy.</span>" ).ToString() );
					}
					return null;
				}
			}
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return null;
		}

		// Function from file: hydro_tray.dm
		public override bool HasProximity( dynamic AM = null ) {
			
			if ( this.seed != null && !this.dead && this.seed.carnivorous == 2 && this.age > this.seed.maturation ) {
				
				if ( AM is Mob_Living_SimpleAnimal_Mouse || AM is Mob_Living_SimpleAnimal_Lizard && !Lang13.Bool( AM.locked_to ) && !Lang13.Bool( AM.anchored ) ) {
					Task13.Schedule( 10, (Task13.Closure)(() => {
						
						if ( !Lang13.Bool( AM ) || !this.Adjacent( AM ) || Lang13.Bool( AM.locked_to ) || Lang13.Bool( AM.anchored ) ) {
							return;
						}
						this.visible_message( new Txt( "<span class='warning'>" ).The( this.seed.display_name ).item().str( " hungrily lashes a vine at " ).the( AM ).item().str( "!</span>" ).ToString() );

						if ( Convert.ToDouble( AM.health ) > 0 ) {
							AM.Die();
						}
						((Ent_Dynamic)AM).forceMove( this.loc );
						this.lock_atom( AM );
						Task13.Schedule( 30, (Task13.Closure)(() => {
							
							if ( Lang13.Bool( AM ) && AM.loc == GlobalFuncs.get_turf( this ) ) {
								this.unlock_atom( AM );
								((Mob)AM).gib( null, false );
								this.nutrilevel += 6;
								this.check_level_sanity();
								this.update_icon();
							}
							return;
						}));
						return;
					}));
				}
			}
			return false;
		}

		// Function from file: hydro_tray.dm
		[VerbInfo( name: "Remove label", group: "Object", access: VerbAccess.InView, range: 1 )]
		public override void remove_label(  ) {
			base.remove_label();
			this.update_name();
			return;
		}

		// Function from file: hydro_tray.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			this.view_contents( user );
			return null;
		}

		// Function from file: hydro_tray.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Mob_Dead_Observer ) {
				
				if ( !Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
					return 0;
				}
			}

			if ( this.harvest ) {
				this.f_harvest( a );
			} else if ( this.dead ) {
				this.remove_dead( a );
			} else {
				this.examine( a );
			}
			return null;
		}

		// Function from file: hydro_tray.dm
		public override dynamic attack_robot( Mob_Living_Silicon_Robot user = null ) {
			
			if ( user is Mob_Living_Silicon_Robot_Mommi && this.Adjacent( user ) ) {
				return this.attack_hand( user );
			}
			return null;
		}

		// Function from file: hydro_tray.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return null;
		}

		// Function from file: hydro_tray.dm
		public override void attack_tk( Mob user = null ) {
			
			if ( this.harvest ) {
				this.f_harvest( user );
			} else if ( this.dead ) {
				this.remove_dead( user );
			}
			return;
		}

		// Function from file: hydro_tray.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic S = null;
			dynamic T = null;
			dynamic T2 = null;
			dynamic C = null;
			Obj_Structure_Claypot S2 = null;
			int t_growthstate = 0;
			dynamic S3 = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown G = null;
			dynamic spray = null;
			Obj_Machinery_Apiary A = null;

			
			if ( Lang13.Bool( ((Ent_Static)a).is_open_container() ) ) {
				return 0;
			}

			if ( a is Obj_Item_Seeds ) {
				
				if ( !( this.seed != null ) ) {
					S = a;
					b.drop_item( S );

					if ( !Lang13.Bool( S.seed ) ) {
						GlobalFuncs.to_chat( b, "The packet seems to be empty. You throw it away." );
						GlobalFuncs.qdel( a );
						return null;
					}
					GlobalFuncs.to_chat( b, "You plant the " + S.seed.seed_name + " " + S.seed.seed_noun + "." );

					dynamic _a = S.seed.spread; // Was a switch-case, sorry for the mess.
					if ( _a==1 ) {
						T = GlobalFuncs.get_turf( this );
						GlobalFuncs.msg_admin_attack( "" + GlobalFuncs.key_name( b ) + " has planted a creeper packet. <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + T.x + ";Y=" + T.y + ";Z=" + T.z + "'>(JMP)</a>" );
					} else if ( _a==2 ) {
						T2 = GlobalFuncs.get_turf( this );
						GlobalFuncs.msg_admin_attack( "" + GlobalFuncs.key_name( b ) + " has planted a spreading vine packet. <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + T2.x + ";Y=" + T2.y + ";Z=" + T2.z + "'>(JMP)</a>" );
					}
					this.seed = S.seed;
					this.dead = false;
					this.age = 1;

					if ( Lang13.Bool( this.seed.hematophage ) ) {
						this.nutrilevel = 1;
					}
					this.health = ( S is Obj_Item_Seeds_Cutting ? Num13.Floor( this.seed.endurance / Rand13.Int( 2, 5 ) ) : this.seed.endurance );
					this.lastcycle = Game13.time;
					GlobalFuncs.qdel( a );
					this.check_level_sanity();
					this.update_icon();
				} else {
					GlobalFuncs.to_chat( b, new Txt( "<span class='alert'>" ).The( this ).item().str( " already has seeds in it!</span>" ).ToString() );
				}
			} else if ( Lang13.Bool( a.force ) && this.seed != null && b.a_intent == "hurt" ) {
				this.visible_message( new Txt( "<span class='danger'>" ).The( this.seed.display_name ).item().str( " has been attacked by " ).item( b ).str( " with " ).the( a ).item().str( "!</span>" ).ToString() );

				if ( !this.dead ) {
					this.health -= Convert.ToDouble( a.force );
					this.check_health();
				}
				((Mob)b).delayNextAttack( 5 );
			} else if ( a is Obj_Item_Claypot ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>You must place the pot on the ground and use a spade on " ).the( this ).item().str( " to make a transplant.</span>" ).ToString() );
				return null;
			} else if ( this.seed != null && a is Obj_Item_Weapon_Pickaxe_Shovel ) {
				C = Lang13.FindIn( typeof(Obj_Item_Claypot), Map13.FetchInRange( 1, b ) );

				if ( !Lang13.Bool( C ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You need an empty clay pot next to you.</span>" );
					return null;
				}
				GlobalFuncs.playsound( this.loc, "sound/items/shovel.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 50 ) ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " transplants " ).the( this.seed.display_name ).item().str( " into " ).the( C ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>" ).icon( this ).str( " You transplant " ).the( this.seed.display_name ).item().str( " into " ).the( C ).item().str( ".</span>" ).ToString(), "<span class='notice'>You hear a ratchet.</span>" );
					S2 = new Obj_Structure_Claypot( GlobalFuncs.get_turf( C ) );
					GlobalFuncs.transfer_fingerprints( C, S2 );
					GlobalFuncs.qdel( C );

					if ( this.seed.large ) {
						S2.icon_state += "-large";
					}

					if ( this.dead ) {
						S2.overlays.Add( new Image( this.seed.plant_dmi, "" + this.seed.plant_icon + "-dead" ) );
					} else if ( this.harvest ) {
						S2.overlays.Add( new Image( this.seed.plant_dmi, "" + this.seed.plant_icon + "-harvest" ) );
					} else if ( this.age < this.seed.maturation ) {
						t_growthstate = Num13.MaxInt( 1, Num13.Floor( this.age * this.seed.growth_stages / this.seed.maturation ) );
						S2.overlays.Add( new Image( this.seed.plant_dmi, "" + this.seed.plant_icon + "-grow" + t_growthstate ) );
					} else {
						S2.overlays.Add( new Image( this.seed.plant_dmi, "" + this.seed.plant_icon + "-grow" + this.seed.growth_stages ) );
					}
					S2.plant_name = this.seed.display_name;

					if ( this.seed.biolum != 0 ) {
						S2.set_light( Num13.Floor( this.seed.potency / 10 ) );

						if ( Lang13.Bool( this.seed.biolum_colour ) ) {
							S2.light_color = this.seed.biolum_colour;
						}
					}
					this.remove_plant();
					this.check_level_sanity();
					this.update_icon();
				}
				return null;
			} else if ( GlobalFuncs.is_type_in_list( a, new ByTable(new object [] { typeof(Obj_Item_Weapon_Wirecutters), typeof(Obj_Item_Weapon_Scalpel) }) ) ) {
				
				if ( !( this.seed != null ) ) {
					GlobalFuncs.to_chat( b, new Txt( "There is nothing to take a sample from in " ).the( this ).item().str( "." ).ToString() );
					return null;
				}

				if ( this.sampled ) {
					GlobalFuncs.to_chat( b, "You have already sampled from this plant." );
					return null;
				}

				if ( this.dead ) {
					GlobalFuncs.to_chat( b, "The plant is dead." );
					return null;
				}
				this.seed.spawn_seed_packet( GlobalFuncs.get_turf( b ) );
				GlobalFuncs.to_chat( b, "You take a sample from the " + this.seed.display_name + "." );
				this.health -= Rand13.Int( 3, 5 ) * 10;

				if ( Rand13.PercentChance( 30 ) ) {
					this.sampled = true;
				}
				this.check_level_sanity();
				this.force_update = true;
				this.process();
				return null;
			} else if ( a is Obj_Item_Weapon_Minihoe ) {
				
				if ( this.weedlevel > 0 ) {
					((Ent_Static)b).visible_message( "<span class='alert'>" + b + " starts uprooting the weeds.</span>", "<span class='alert'>You remove the weeds from the " + this + ".</span>" );
					this.weedlevel = 0;
					this.update_icon();
				} else {
					GlobalFuncs.to_chat( b, "<span class='alert'>This plot is completely devoid of weeds. It doesn't need uprooting.</span>" );
				}
			} else if ( a is Obj_Item_Weapon_Storage_Bag_Plants ) {
				this.attack_hand( b );
				S3 = a;

				foreach (dynamic _b in Lang13.Enumerate( Map13.GetTile( Convert.ToInt32( b.x ), Convert.ToInt32( b.y ), Convert.ToInt32( b.z ) ), typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) )) {
					G = _b;
					

					if ( !((Obj_Item_Weapon_Storage)S3).can_be_inserted( G ) ) {
						return null;
					}
					((Obj_Item_Weapon_Storage)S3).handle_item_insertion( G, true );
				}
			} else if ( a is Obj_Item_Weapon_Plantspray ) {
				spray = a;
				new ByTable().Set( 1, spray ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( b, "drop_item" ) );
				this.toxins += Convert.ToDouble( spray.toxicity );
				this.pestlevel -= spray.pest_kill_str;
				this.weedlevel -= Convert.ToDouble( spray.weed_kill_str );
				GlobalFuncs.to_chat( b, "You spray " + this + " with " + a + "." );
				GlobalFuncs.playsound( this.loc, "sound/effects/spray3.ogg", 50, 1, -6 );
				GlobalFuncs.qdel( a );
				this.check_level_sanity();
				this.update_icon();
			} else if ( a is Obj_Item_Weapon_Tank ) {
				return null;
			} else if ( a is Obj_Item_Weapon_Wrench && this is Obj_Machinery_PortableAtmospherics_Hydroponics_Soil ) {
				return null;
			} else if ( a is Obj_Item_Apiary ) {
				
				if ( this.seed != null ) {
					GlobalFuncs.to_chat( b, "<span class='alert'>" + this + " is already occupied!</span>" );
				} else {
					new ByTable().Set( 1, a ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( b, "drop_item" ) );
					GlobalFuncs.qdel( a );
					A = new Obj_Machinery_Apiary( this.loc );
					A.icon = this.icon;
					A.icon_state = this.icon_state;
					A.hydrotray_type = this.type;
					A.component_parts = this.component_parts.Copy();
					A.contents = this.contents.Copy();
					this.contents.len = 0;
					this.component_parts.len = 0;
					GlobalFuncs.qdel( this );
				}
			} else if ( Lang13.Bool( ((Obj)a).is_sharp() ) && this.harvest ) {
				this.attack_hand( b );
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: hydroponics_reagents.dm
		public void process_reagents(  ) {
			Reagent A = null;

			
			if ( ( this.reagents.total_volume ??0) <= 0 || this.mutation_level >= 25 ) {
				
				if ( this.mutation_level != 0 ) {
					this.mutate( Num13.MinInt( ((int)( this.mutation_level )), 25 ) );
					this.mutation_level = 0;
					return;
				}
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
					A = _a;
					
					A.on_plant_life( this );
					((Reagents)this.reagents).update_total();
				}
				this.check_level_sanity();
				this.update_icon_after_process = true;
			}
			return;
		}

		// Function from file: hydroponics_reagents.dm
		public void adjust_water( double amount = 0 ) {
			this.waterlevel += amount;

			if ( amount > 0 ) {
				this.toxins -= amount * 4;
			}
			return;
		}

		// Function from file: hydroponics_reagents.dm
		public void adjust_nutrient( double amount = 0, int? bloody = null ) {
			bloody = bloody ?? 0;

			
			if ( this.seed != null ) {
				
				if ( this.seed.hematophage != bloody ) {
					return;
				}
			} else if ( Lang13.Bool( bloody ) ) {
				return;
			}
			this.nutrilevel += amount;
			return;
		}

		// Function from file: hydroponics_mutations.dm
		public void mutate_species(  ) {
			string previous_plant = null;
			dynamic newseed = null;

			previous_plant = this.seed.display_name;
			newseed = this.seed.get_mutant_variant();

			if ( !( GlobalVars.plant_controller.seeds.Find( newseed ) != 0 ) ) {
				return;
			}
			this.seed = GlobalVars.plant_controller.seeds[newseed];
			this.dead = false;
			this.age = 1;
			this.health = this.seed.endurance;
			this.lastcycle = Game13.time;
			this.harvest = false;
			this.weedlevel = 0;
			this.sampled = false;
			this.update_icon();
			this.visible_message( "<span class='alert'>The</span> <span class='info'>" + previous_plant + "</span> <span class='alert'>has suddenly mutated into</span> <span class='info'>" + this.seed.display_name + "!</span>" );
			return;
		}

		// Function from file: hydroponics_mutations.dm
		public void apply_mut( string mutation_type = null, int? severity = null ) {
			ByTable softcap_values = null;
			ByTable hardcap_values = null;
			int i = 0;
			double lerp_factor = 0;
			int softcap = 0;
			int hardcap = 0;
			double? cap_ratio = null;
			double deviation = 0;
			ByTable softcap_values2 = null;
			ByTable hardcap_values2 = null;
			double deviation2 = 0;
			ByTable softcap_values3 = null;
			ByTable hardcap_values3 = null;
			double deviation3 = 0;
			ByTable softcap_values4 = null;
			ByTable hardcap_values4 = null;
			double deviation4 = 0;
			ByTable softcap_values5 = null;
			ByTable hardcap_values5 = null;
			double deviation5 = 0;
			ByTable softcap_values6 = null;
			ByTable hardcap_values6 = null;
			double deviation6 = 0;
			ByTable softcap_values7 = null;
			ByTable hardcap_values7 = null;
			double deviation7 = 0;
			ByTable softcap_values8 = null;
			ByTable hardcap_values8 = null;
			double deviation8 = 0;
			ByTable softcap_values9 = null;
			ByTable hardcap_values9 = null;
			double deviation9 = 0;
			dynamic gas = null;
			dynamic gas2 = null;
			int deviation10 = 0;
			Seed newseed = null;
			dynamic T = null;
			Seed newseed2 = null;
			dynamic T2 = null;

			
			if ( this.seed.immutable > 0 ) {
				return;
			}
			this.check_for_divergence();

			switch ((string)( mutation_type )) {
				case "code_explanation":
					softcap_values = new ByTable(new object [] { 5, 20, 50, 100, 150, 180 });
					hardcap_values = new ByTable(new object [] { 35, 45, 100, 180, 250, 300 });
					i = Num13.MinInt( GlobalFuncs.Ceiling( ( severity ??0) / 5 ), 5 );
					lerp_factor = ( severity ??0) % 5 / 5;
					softcap = Convert.ToInt32( GlobalFuncs.mix( softcap_values[i], softcap_values[i + 1], lerp_factor ) );
					hardcap = Convert.ToInt32( GlobalFuncs.mix( hardcap_values[i], hardcap_values[i + 1], lerp_factor ) );
					cap_ratio = GlobalFuncs.unmix( this.seed.potency, softcap, hardcap );
					deviation = ( severity ??0) * ( Rand13.Int( 50, 125 ) / 100 ) * ( cap_ratio ??0);
					this.seed.potency = ( this.seed.potency + deviation <= 0 ? 0 : ( this.seed.potency + deviation >= 200 ? 200 : this.seed.potency + deviation ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "plusstat_potency":
					softcap_values2 = new ByTable(new object [] { 5, 20, 50, 100, 150, 180 });
					hardcap_values2 = new ByTable(new object [] { 35, 45, 100, 180, 250, 300 });
					deviation2 = ( severity ??0) * ( Rand13.Int( 50, 125 ) / 100 ) * ( this.get_ratio( severity, softcap_values2, hardcap_values2, this.seed.potency ) ??0);
					this.seed.potency = ( this.seed.potency + deviation2 <= 0 ? 0 : ( this.seed.potency + deviation2 >= 200 ? 200 : this.seed.potency + deviation2 ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "plusstat_yield":
					
					if ( this.seed.yield == -1 ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " twitches for a second, but nothing seems to happen...</span>" ).ToString() );
						return;
					}
					softcap_values3 = new ByTable(new object [] { 2, 3, 6, 9, 12, 12 });
					hardcap_values3 = new ByTable(new object [] { 4, 5, 10, 15, 17, 20 });
					deviation3 = ( severity ??0) * ( Rand13.Int( 6, 12 ) / 100 ) * ( this.get_ratio( severity, softcap_values3, hardcap_values3, this.seed.yield ) ??0);
					this.seed.yield = ( this.seed.yield + deviation3 <= 0 ? 0 : ( this.seed.yield + deviation3 >= 16 ? 16 : this.seed.yield + deviation3 ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "plusstat_weed&toxins_tolerance":
					softcap_values4 = new ByTable(new object [] { 2, 3, 6, 9, 11, 11 });
					hardcap_values4 = new ByTable(new object [] { 4, 5, 10, 12, 12, 12 });
					deviation4 = ( severity ??0) * ( Rand13.Int( 6, 12 ) / 100 ) * ( this.get_ratio( severity, softcap_values4, hardcap_values4, this.seed.weed_tolerance ) ??0);
					this.seed.weed_tolerance = ( this.seed.weed_tolerance + deviation4 <= 0 ? 0 : ( this.seed.weed_tolerance + deviation4 >= 11 ? 11 : this.seed.weed_tolerance + deviation4 ) );
					softcap_values4 = new ByTable(new object [] { 2, 3, 6, 9, 11, 11 });
					hardcap_values4 = new ByTable(new object [] { 4, 5, 10, 12, 12, 12 });
					deviation4 = ( severity ??0) * ( Rand13.Int( 6, 12 ) / 100 ) * ( this.get_ratio( severity, softcap_values4, hardcap_values4, this.seed.toxins_tolerance ) ??0);
					this.seed.toxins_tolerance = ( this.seed.toxins_tolerance + deviation4 <= 0 ? 0 : ( this.seed.toxins_tolerance + deviation4 >= 11 ? 11 : this.seed.toxins_tolerance + deviation4 ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "plusstat_lifespan&endurance":
					softcap_values5 = new ByTable(new object [] { 2, 65, 80, 95, 110, 125 });
					hardcap_values5 = new ByTable(new object [] { 4, 75, 100, 125, 150, 150 });
					deviation5 = ( severity ??0) * ( Rand13.Int( 50, 80 ) / 100 ) * ( this.get_ratio( severity, softcap_values5, hardcap_values5, this.seed.lifespan ) ??0);
					this.seed.lifespan = ( this.seed.lifespan + deviation5 <= 10 ? 10 : ( this.seed.lifespan + deviation5 >= 125 ? 125 : this.seed.lifespan + deviation5 ) );
					softcap_values5 = new ByTable(new object [] { 2, 65, 80, 95, 110, 125 });
					hardcap_values5 = new ByTable(new object [] { 4, 75, 100, 125, 150, 150 });
					deviation5 = ( severity ??0) * ( Rand13.Int( 30, 50 ) / 100 ) * ( this.get_ratio( severity, softcap_values5, hardcap_values5, this.seed.endurance ) ??0);
					this.seed.endurance = ( this.seed.endurance + deviation5 <= 10 ? 10 : ( this.seed.endurance + deviation5 >= 125 ? 125 : this.seed.endurance + deviation5 ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "plusstat_production&maturation":
					softcap_values6 = new ByTable(new object [] { 10, 7.5, 5, 2.5, 2, 1 });
					hardcap_values6 = new ByTable(new object [] { 5, 3.5, 2, 1, 0.75, 0 });
					deviation6 = ( severity ??0) * ( Rand13.Int( 4, 8 ) / 100 ) * ( this.get_ratio( severity, softcap_values6, hardcap_values6, this.seed.production ) ??0);
					this.seed.production = ( this.seed.production - deviation6 <= 1 ? 1 : ( this.seed.production - deviation6 >= 10 ? 10 : this.seed.production - deviation6 ) );
					softcap_values6 = new ByTable(new object [] { 10, 7.5, 5, 2.5, 2, 1 });
					hardcap_values6 = new ByTable(new object [] { 5, 3.5, 2, 1, 0.75, 0 });
					deviation6 = ( severity ??0) * ( Rand13.Int( 8, 12 ) / 100 ) * ( this.get_ratio( severity, softcap_values6, hardcap_values6, this.seed.maturation ) ??0);
					this.seed.maturation = ( this.seed.maturation - deviation6 <= 1 ? 1 : ( this.seed.maturation - deviation6 >= 30 ? 30 : this.seed.maturation - deviation6 ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "plusstat_heat&pressure_tolerance":
					softcap_values7 = new ByTable(new object [] { 100, 150, 300, 450, 600, 900 });
					hardcap_values7 = new ByTable(new object [] { 200, 300, 600, 900, 1200, 1200 });
					deviation7 = ( severity ??0) * ( Rand13.Int( 100, 250 ) / 100 ) * ( this.get_ratio( severity, softcap_values7, hardcap_values7, this.seed.heat_tolerance ) ??0);
					this.seed.heat_tolerance = ( Convert.ToDouble( this.seed.heat_tolerance + deviation7 ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( this.seed.heat_tolerance + deviation7 ) >= 800 ? ((dynamic)( 800 )) : this.seed.heat_tolerance + deviation7 ) );
					softcap_values7 = new ByTable(new object [] { 20, 12.5, 5, 0, 0, 0 });
					hardcap_values7 = new ByTable(new object [] { 15, 5, 0, 0, 0, 0 });
					deviation7 = ( severity ??0) * ( Rand13.Int( 20, 50 ) / 100 ) * ( this.get_ratio( severity, softcap_values7, hardcap_values7, this.seed.lowkpa_tolerance ) ??0);
					this.seed.lowkpa_tolerance = ( Convert.ToDouble( this.seed.lowkpa_tolerance - deviation7 ) <= 0 ? ((dynamic)( 0 )) : ( Convert.ToDouble( this.seed.lowkpa_tolerance - deviation7 ) >= 80 ? ((dynamic)( 80 )) : this.seed.lowkpa_tolerance - deviation7 ) );
					softcap_values7 = new ByTable(new object [] { 20, 275, 350, 450, 500, 500 });
					hardcap_values7 = new ByTable(new object [] { 15, 325, 450, 575, 575, 575 });
					deviation7 = ( severity ??0) * ( Rand13.Int( 200, 300 ) / 100 ) * ( this.get_ratio( severity, softcap_values7, hardcap_values7, this.seed.highkpa_tolerance ) ??0);
					this.seed.highkpa_tolerance = ( Convert.ToDouble( this.seed.highkpa_tolerance + deviation7 ) <= 110 ? ((dynamic)( 110 )) : ( Convert.ToDouble( this.seed.highkpa_tolerance + deviation7 ) >= 500 ? ((dynamic)( 500 )) : this.seed.highkpa_tolerance + deviation7 ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "plusstat_light_tolerance":
					softcap_values8 = new ByTable(new object [] { 2, 5, 8, 9, 11, 11 });
					hardcap_values8 = new ByTable(new object [] { 4, 7, 10, 12, 12, 12 });
					deviation8 = ( severity ??0) * ( Rand13.Int( 6, 12 ) / 100 ) * ( this.get_ratio( severity, softcap_values8, hardcap_values8, this.seed.light_tolerance ) ??0);
					this.seed.light_tolerance = ( Convert.ToDouble( this.seed.light_tolerance + deviation8 ) <= 0 ? ((dynamic)( 0 )) : ( Convert.ToDouble( this.seed.light_tolerance + deviation8 ) >= 10 ? ((dynamic)( 10 )) : this.seed.light_tolerance + deviation8 ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "plusstat_nutrient&water_consumption":
					softcap_values9 = new ByTable(new object [] { 0.3, 0.25, 0.15, 0.05, 0, 0 });
					hardcap_values9 = new ByTable(new object [] { 0.15, 0.1, 0.05, 0, 0, 0 });
					deviation9 = ( severity ??0) * ( Rand13.Int( 3, 7 ) / 1000 ) * ( this.get_ratio( severity, softcap_values9, hardcap_values9, this.seed.nutrient_consumption ) ??0);
					this.seed.nutrient_consumption = ( this.seed.nutrient_consumption - deviation9 <= 0 ? 0 : ( this.seed.nutrient_consumption - deviation9 >= 1 ? 1 : this.seed.nutrient_consumption - deviation9 ) );
					softcap_values9 = new ByTable(new object [] { 4, 3, 1.5, 0.5, 0, 0 });
					hardcap_values9 = new ByTable(new object [] { 2, 1.5, 0.5, 0, 0, 0 });
					deviation9 = ( severity ??0) * ( Rand13.Int( 6, 12 ) / 100 ) * ( this.get_ratio( severity, softcap_values9, hardcap_values9, this.seed.water_consumption ) ??0);
					this.seed.water_consumption = ( this.seed.water_consumption - deviation9 <= 0 ? 0 : ( this.seed.water_consumption - deviation9 >= 10 ? 10 : this.seed.water_consumption - deviation9 ) );
					this.generic_mutation_message( "quivers!" );
					break;
				case "tox_increase":
					this.toxins += Rand13.Int( 50, 80 );
					this.generic_mutation_message( "shudders!" );
					break;
				case "weed_increase":
					this.weedlevel = Num13.MaxInt( 4, ((int)( this.weedlevel * 2 )) );
					this.generic_mutation_message( "shudders!" );
					break;
				case "pest_increase":
					this.pestlevel = Num13.MaxInt( 4, ((int)( this.pestlevel * 2 )) );
					this.generic_mutation_message( "shudders!" );
					break;
				case "stunt_growth":
					this.affect_growth( -Rand13.Int( 2, 4 ) );
					this.generic_mutation_message( "droops idly..." );
					break;
				case "randomize_light":
					this.seed.ideal_light = Rand13.Int( 2, 10 );
					this.generic_mutation_message( "shakes!" );
					break;
				case "randomize_temperature":
					this.seed.ideal_heat = Rand13.Int( 253, 343 );
					this.generic_mutation_message( "shakes!" );
					break;
				case "breathe_aliengas":
					gas = Rand13.Pick(new object [] { "oxygen", "nitrogen", "plasma", "carbon_dioxide" });
					this.seed.consume_gasses[gas] = Rand13.Int( 3, 9 );
					this.generic_mutation_message( "shakes!" );
					break;
				case "exude_dangerousgas":
					gas2 = Rand13.Pick(new object [] { "nitrogen", "plasma", "carbon_dioxide" });
					this.seed.exude_gasses[gas2] = Rand13.Int( 3, 9 );
					this.generic_mutation_message( "shakes!" );
					break;
				case "change_roomtemp":
					
					if ( !( this.seed.alter_temp != 0 ) ) {
						this.seed.alter_temp = 1;
						deviation10 = Rand13.Int( ((int)( ( severity ??0) * 0.5 )), severity ??0 ) * ( Rand13.PercentChance( 50 ) ? 3 : -3 );
						this.seed.heat_tolerance = ( Convert.ToDouble( this.seed.heat_tolerance + deviation10 * 0.8 ) <= 1 ? ((dynamic)( 1 )) : ( Convert.ToDouble( this.seed.heat_tolerance + deviation10 * 0.8 ) >= 800 ? ((dynamic)( 800 )) : this.seed.heat_tolerance + deviation10 * 0.8 ) );
						this.seed.ideal_heat += deviation10;
					} else {
						this.seed.alter_temp = 0;
					}
					this.generic_mutation_message( "shakes!" );
					break;
				case "toggle_repeatharvest":
					this.seed.harvest_repeat = !( this.seed.harvest_repeat != 0 ) ?1:0;

					if ( this.seed.harvest_repeat != 0 ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " roots deep and sprouts a bevy of new stalks!</span>" ).ToString() );
					} else {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " wilts away some of it's roots...</span>" ).ToString() );
					}
					break;
				case "trait_biolum":
					this.seed.biolum = !( this.seed.biolum != 0 ) ?1:0;

					if ( this.seed.biolum != 0 ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " begins to glow!</span>" ).ToString() );

						if ( !Lang13.Bool( this.seed.biolum_colour ) ) {
							this.seed.biolum_colour = "#" + GlobalFuncs.get_random_colour( true );
						}
					} else {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( "'s glow dims...</span>" ).ToString() );
					}
					this.update_icon();
					break;
				case "biolum_changecolor":
					this.seed.biolum_colour = "#" + GlobalFuncs.get_random_colour( false, 75, 190 );
					this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( "'s glow <font color='" ).item( this.seed.biolum_colour ).str( "'>changes colour</font>!</span>" ).ToString() );
					this.update_icon();
					break;
				case "spontaneous_creeper":
					this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " spasms visibly, shifting in the tray!</span>" ).ToString() );
					Task13.Schedule( 20, (Task13.Closure)(() => {
						
						if ( this != null && this.seed != null ) {
							newseed = this.seed.diverge();
							newseed.spread = 1;
							T = GlobalFuncs.get_turf( this );
							new Obj_Effect_Plantsegment( T, newseed );
							GlobalFuncs.msg_admin_attack( "a random chance hydroponics mutation has spawned limited growth creeper vines (" + newseed.display_name + "). <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + T.x + ";Y=" + T.y + ";Z=" + T.z + "'>(JMP)</a>" );
						}
						return;
					}));
					break;
				case "spontaneous_kudzu":
					this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " thrashes about, growing out of control!</span>" ).ToString() );
					Task13.Schedule( 20, (Task13.Closure)(() => {
						
						if ( this != null && this.seed != null ) {
							newseed2 = this.seed.diverge();
							newseed2.spread = 2;
							T2 = GlobalFuncs.get_turf( this );
							new Obj_Effect_Plantsegment( T2, newseed2 );
							GlobalFuncs.msg_admin_attack( "a random chance hydroponics mutation has space vines (" + newseed2.display_name + "). <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + T2.x + ";Y=" + T2.y + ";Z=" + T2.z + "'>(JMP)</a>" );
						}
						return;
					}));
					break;
				case "change_appearance":
					this.seed.randomize_icon( false );
					this.update_icon();
					this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " suddenly looks a little different.</span>" ).ToString() );
					break;
				case "fruit_exotic":
					this.seed.products.Add( Rand13.PickFromTable( Lang13.GetTypes( typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) ) - typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) ) );
					this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " seems to be growing something weird.</span>" ).ToString() );
					break;
				case "chemical_exotic":
					this.seed.add_random_chemical( severity );
					this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " develops a strange-looking gland...</span>" ).ToString() );
					break;
				case "trait_hematophage":
					this.seed.hematophage = !Lang13.Bool( this.seed.hematophage ) ?1:0;

					if ( Lang13.Bool( this.seed.hematophage ) ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " shudders thirstily, turning red at the roots!</span>" ).ToString() );
						this.nutrilevel = 1;
					} else {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( "'s red roots slowly wash their color out...</span>" ).ToString() );
					}
					break;
				case "trait_teleporting":
					this.seed.teleporting = !( this.seed.teleporting != 0 ) ?1:0;

					if ( this.seed.teleporting != 0 ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " wobbles unstably, glowing blue for a moment!</span>" ).ToString() );
					} else {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " slowly becomes spatial-temporally stable again.</span>" ).ToString() );
					}
					break;
				case "trait_ligneous":
					this.seed.ligneous = !( this.seed.ligneous != 0 ) ?1:0;

					if ( Lang13.Bool( this.seed.hematophage ) ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " seems to grow a cover of robust bark.</span>" ).ToString() );
					} else {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( "'s bark slowly sheds away...</span>" ).ToString() );
					}
					break;
				case "trait_juicy":
					this.seed.juicy = ( this.seed.juicy != 0 ? false : true ) ?1:0;
					this.generic_mutation_message( "wobbles!" );
					break;
				case "trait_slippery":
					
					dynamic _a = this.seed.juicy; // Was a switch-case, sorry for the mess.
					if ( 0<=_a&&_a<=1 ) {
						this.seed.juicy = 2;
					} else if ( _a==2 ) {
						this.seed.juicy = 0;
					}
					this.generic_mutation_message( "wobbles!" );
					break;
				case "trait_thorny":
					this.seed.thorny = !( this.seed.thorny != 0 ) ?1:0;

					if ( this.seed.thorny != 0 ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " spontaneously develops mean-looking thorns!</span>" ).ToString() );
					} else {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " sheds it's thorns away...</span>" ).ToString() );
					}
					break;
				case "trait_stinging":
					this.seed.stinging = !( this.seed.stinging != 0 ) ?1:0;

					if ( this.seed.stinging != 0 ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " sprouts a coat of chemical stingers!</span>" ).ToString() );
					} else {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( "'s stingers dry off and break...</span>" ).ToString() );
					}
					break;
				case "trait_carnivorous":
					this.seed.carnivorous = ( this.seed.carnivorous != 0 ? false : true ) ?1:0;

					if ( this.seed.stinging != 0 ) {
						this.generic_mutation_message( "shudders hungrily." );
					} else {
						this.generic_mutation_message( "seems to mellow down..." );
					}
					break;
				case "trait_carnivorous2":
					
					dynamic _b = this.seed.carnivorous; // Was a switch-case, sorry for the mess.
					if ( 0<=_b&&_b<=1 ) {
						this.seed.carnivorous = 2;
						this.generic_mutation_message( "shudders hungrily." );
					} else if ( _b==2 ) {
						this.seed.carnivorous = 0;
						this.generic_mutation_message( "seems to mellow down..." );
					}
					break;
				default:
					GlobalFuncs.error( "Tried to apply a Hydroponics mutation, \"" + mutation_type + "\", which doesn't exist." );
					break;
			}
			return;
		}

		// Function from file: hydroponics_mutations.dm
		public double? get_ratio( int? severity = null, ByTable softcaps = null, ByTable hardcaps = null, dynamic input = null ) {
			int i = 0;
			double lerp_factor = 0;
			int softcap = 0;
			int hardcap = 0;

			i = Num13.MinInt( GlobalFuncs.Ceiling( ( severity ??0) / 5 ), 5 );
			lerp_factor = ( severity ??0) % 5 / 5;
			softcap = Convert.ToInt32( GlobalFuncs.mix( softcaps[i], softcaps[i + 1], lerp_factor ) );
			hardcap = Convert.ToInt32( GlobalFuncs.mix( hardcaps[i], hardcaps[i + 1], lerp_factor ) );
			return GlobalFuncs.unmix( input, softcap, hardcap );
		}

		// Function from file: hydroponics_mutations.dm
		public void check_for_divergence( int? modified = null ) {
			modified = modified ?? 0;

			
			if ( !( GlobalVars.plant_controller.seeds[this.seed.name] == null ) ) {
				this.seed = this.seed.diverge( modified );
			}
			return;
		}

		// Function from file: hydroponics_mutations.dm
		public void generic_mutation_message( string text = null ) {
			text = text ?? "quivers!";

			this.visible_message( new Txt( "<span class='notice'>" ).The( this.seed.display_name ).item().str( " " ).item( text ).str( "</span>" ).ToString() );
			return;
		}

		// Function from file: hydroponics_mutations.dm
		public dynamic pick_mut( int? severity = null, string mutation_category = null ) {
			mutation_category = mutation_category ?? "";

			Seed S = null;
			dynamic mutation_type = null;

			S = this.seed;

			if ( !( S != null ) ) {
				return null;
			}

			if ( !Lang13.Bool( mutation_category ) ) {
				mutation_category = Rand13.PickWeightedDynamic(new object [] { 15, "SomethingGood", ( ( severity ??0) * 0.4 <= 0 ? 0 : ( ( severity ??0) * 0.4 >= 7 ? 7 : ( severity ??0) * 0.4 ) ), "SomethingBad", ( ( ( severity ??0) - 5 ) * 061 <= 0 ? 0 : ( ( ( severity ??0) - 5 ) * 061 >= 8 ? 8 : ( ( severity ??0) - 5 ) * 061 ) ), "SomethingWeird", ( ( severity ??0) - 12 <= 0 ? 0 : ( ( severity ??0) - 12 >= 7 ? 7 : ( severity ??0) - 12 ) ), "SomethingBizarre", ( ( severity ??0) - 12 <= 0 ? 0 : ( ( severity ??0) - 12 >= 14 ? 14 : ( severity ??0) - 12 ) ), "SomethingAwful", }, "SomethingDangerous" );
			}
			mutation_type = null;

			switch ((string)( mutation_category )) {
				case "SomethingGood":
					mutation_type = Rand13.PickWeightedDynamic(new object [] { 10, "plusstat_potency", ( S.yield == -1 ? 0 : 6 ), "plusstat_yield", 3, "plusstat_weed&toxins_tolerance", 5, "plusstat_lifespan&endurance", 5, "plusstat_production&maturation", 3, "plusstat_heat&pressure_tolerance", 3, "plusstat_light_tolerance", 3, "plusstat_nutrient&water_consumption", }, "toggle_repeatharvest" );
					break;
				case "SomethingWeird":
					mutation_type = Rand13.PickWeightedDynamic(new object [] { ( S.biolum != 0 ? 10 : 0 ), "biolum_changecolor", ( S.biolum != 0 ? 1 : 10 ), "trait_biolum", ( S.juicy != 0 ? 0.5 : 5 ), "trait_juicy", ( S.juicy == 1 ? 10 : 2 ), "trait_slippery", ( S.thorny != 0 ? 0.2 : 5 ), "trait_thorns", ( S.parasite != 0 ? 0.2 : 5 ), "trait_parasitic", ( S.carnivorous != 0 ? 0.1 : 5 ), "trait_carnivorous", ( S.carnivorous == 1 ? 8 : 2 ), "trait_carnivorous2", }, "trait_ligneous" );
					break;
				case "SomethingBizarre":
					mutation_type = Rand13.PickWeightedDynamic(new object [] { 4, "chemical_exotic", 6, "fruit_exotic", 2, "change_appearance", }, "trait_creepspread" );
					break;
				case "SomethingBad":
					mutation_type = Rand13.PickWeighted(new object [] { 16383, "tox_increase", 27305, "weed_increase", 38227, "pest_increase", 65535, "stunt_growth" });
					break;
				case "SomethingAwful":
					mutation_type = Rand13.PickWeightedDynamic(new object [] { ( Lang13.Bool( S.hematophage ) ? 0.2 : 5 ), "trait_hematophage", 5, "randomize_light", 5, "randomize_temperature", 2, "breathe_aliengas", }, "toggle_repeatharvest" );
					break;
				case "SomethingDangerous":
					mutation_type = Rand13.PickWeightedDynamic(new object [] { 4, "spontaneous_creeper", 1, "spontaneous_kudzu", ( S.spread == 1 ? 5 : 1 ), "trait_vinespread", ( S.stinging != 0 ? 0.2 : 4 ), "trait_stinging", 1, "exude_dangerousgas", }, "change_roomtemp" );
					break;
			}
			return mutation_type;
		}

		// Function from file: hydroponics_mutations.dm
		public void mutate( int? severity = null ) {
			string mutation_type = null;
			string mutation_type2 = null;

			
			if ( !Lang13.Bool( severity ) ) {
				return;
			}

			if ( !( this.seed != null ) ) {
				return;
			}

			if ( this.seed.immutable != 0 ) {
				return;
			}

			if ( this.age < 3 ) {
				
				if ( this.seed.mutants != null && this.seed.mutants.len != 0 ) {
					
					if ( Rand13.PercentChance( 30 ) ) {
						this.mutate_species();
						return;
					}
				}
				mutation_type = this.pick_mut( severity, "SomethingBad" );
				this.apply_mut( mutation_type, severity );
				return;
			}
			mutation_type2 = this.pick_mut( severity );
			this.apply_mut( mutation_type2, severity );
			return;
		}

		// Function from file: hydro_tray_process.dm
		public void check_level_sanity(  ) {
			
			if ( this.seed != null ) {
				this.health = ( this.health <= 0 ? 0 : ( this.health >= this.seed.endurance ? this.seed.endurance : this.health ) );
			} else {
				this.health = 0;
				this.dead = false;
			}
			this.mutation_level = ( this.mutation_level <= 0 ? 0 : ( this.mutation_level >= 100 ? 100 : this.mutation_level ) );
			this.nutrilevel = ( this.nutrilevel <= 0 ? 0 : ( this.nutrilevel >= 10 ? 10 : this.nutrilevel ) );
			this.waterlevel = ( this.waterlevel <= 0 ? 0 : ( this.waterlevel >= 100 ? 100 : this.waterlevel ) );
			this.pestlevel = ( this.pestlevel <= 0 ? 0 : ( this.pestlevel >= 10 ? 10 : this.pestlevel ) );
			this.weedlevel = ( this.weedlevel <= 0 ? 0 : ( this.weedlevel >= 10 ? 10 : this.weedlevel ) );
			this.toxins = ( this.toxins <= 0 ? 0 : ( this.toxins >= 100 ? 100 : this.toxins ) );
			this.yield_mod = ( ( this.yield_mod ??0) <= 0 ? 0 : ( ( this.yield_mod ??0) >= 2 ? 2 : this.yield_mod ) );
			this.mutation_mod = ( this.mutation_mod <= 0 ? 0 : ( this.mutation_mod >= 3 ? 3 : this.mutation_mod ) );
			return;
		}

		// Function from file: hydro_tray_process.dm
		public void calculate_light(  ) {
			int light_out = 0;

			light_out = 0;

			if ( this.light_on ) {
				light_out += this.internal_light;
			}

			if ( this.seed != null && this.seed.biolum != 0 ) {
				light_out += GlobalFuncs.Ceiling( this.seed.potency / 10 ) + 1;

				if ( Lang13.Bool( this.seed.biolum_colour ) ) {
					this.light_color = this.seed.biolum_colour;
				} else {
					this.light_color = null;
				}
			}
			this.set_light( light_out );
			return;
		}

		// Function from file: hydro_tray_process.dm
		public void update_name(  ) {
			
			if ( this.seed != null ) {
				this.name = "" + this.seed.display_name;
			} else {
				this.name = Lang13.Initial( this, "name" );
			}

			if ( Lang13.Bool( this.labeled ) ) {
				this.name += " (" + this.labeled + ")";
			}
			return;
		}

		// Function from file: hydro_tray_process.dm
		public void affect_growth( int amount = 0 ) {
			
			if ( amount > 0 ) {
				
				if ( this.age < this.seed.maturation ) {
					this.age += amount;
				} else if ( !this.harvest && this.seed.yield != -1 ) {
					this.lastproduce -= amount;
				}
			} else if ( this.age < this.seed.maturation ) {
				this.skip_aging++;
			} else if ( !this.harvest && this.seed.yield != -1 ) {
				this.lastproduce += amount;
			}
			return;
		}

		// Function from file: hydro_tray_process.dm
		public void check_health(  ) {
			
			if ( this.health <= 0 ) {
				this.die();
			}
			return;
		}

		// Function from file: hydro_tray.dm
		public void view_contents( dynamic user = null ) {
			Ent_Static T = null;
			GasMixture environment = null;
			dynamic light_available = null;

			
			if ( this.seed != null && !this.dead ) {
				GlobalFuncs.to_chat( user, "<span class='info'>" + this.seed.display_name + "</span> is growing here." );

				if ( this.health <= this.seed.endurance / 2 ) {
					GlobalFuncs.to_chat( user, "The plant looks <span class='alert'>" + ( this.age > this.seed.lifespan ? "old and wilting" : "unhealthy" ) + ".</span>" );
				}
			} else if ( this.seed != null && this.dead ) {
				GlobalFuncs.to_chat( user, "" + this + " is full of dead plant matter." );
			} else {
				GlobalFuncs.to_chat( user, "" + this + " has nothing planted." );
			}

			if ( this.Adjacent( user ) || user is Mob_Dead_Observer || user is Mob_Living_Silicon ) {
				GlobalFuncs.to_chat( user, "Water: " + Num13.Round( this.waterlevel, 0.1 ) + "/100" );

				if ( this.seed != null && Lang13.Bool( this.seed.hematophage ) ) {
					GlobalFuncs.to_chat( user, "<span class='danger'>Blood:</span> " + Num13.Round( this.nutrilevel, 0.1 ) + "/10" );
				} else {
					GlobalFuncs.to_chat( user, "Nutrient: " + Num13.Round( this.nutrilevel, 0.1 ) + "/10" );
				}

				if ( this.weedlevel >= 5 ) {
					GlobalFuncs.to_chat( user, "" + this + " is <span class='alert'>filled with weeds!</span>" );
				}

				if ( this.pestlevel >= 5 ) {
					GlobalFuncs.to_chat( user, "" + this + " is <span class='alert'>filled with tiny worms!</span>" );
				}

				if ( this.draw_warnings ) {
					
					if ( this.toxins >= 40 ) {
						GlobalFuncs.to_chat( user, "The tray's <span class='alert'>toxicity level alert</span> is flashing red." );
					}

					if ( this.improper_light ) {
						GlobalFuncs.to_chat( user, "The tray's <span class='alert'>improper light level alert</span> is blinking." );
					}

					if ( this.improper_heat ) {
						GlobalFuncs.to_chat( user, "The tray's <span class='alert'>improper temperature alert</span> is blinking." );
					}

					if ( this.improper_kpa ) {
						GlobalFuncs.to_chat( user, "The tray's <span class='alert'>improper environment pressure alert</span> is blinking." );
					}

					if ( this.missing_gas != 0 ) {
						GlobalFuncs.to_chat( user, "The tray's <span class='alert'>improper gas environment alert</span> is blinking." );
					}
				}

				if ( !( this is Obj_Machinery_PortableAtmospherics_Hydroponics_Soil ) ) {
					T = this.loc;

					if ( this.closed_system && ( Lang13.Bool( this.connected_port ) || Lang13.Bool( this.holding ) ) ) {
						environment = this.air_contents;
					}

					if ( !( environment != null ) ) {
						
						if ( T is Tile ) {
							environment = T.return_air();
						}
					}

					if ( !( environment != null ) ) {
						
						if ( T is Tile_Space ) {
							environment = GlobalVars.space_gas;
						} else {
							return;
						}
					}
					light_available = 5;

					if ( Lang13.Bool( ((dynamic)T).dynamic_lighting ) ) {
						light_available = ((dynamic)T).get_lumcount() * 10;
					}
					GlobalFuncs.to_chat( user, "The tray's sensor suite is reporting a light level of " + Num13.Round( Convert.ToDouble( light_available ), 0.1 ) + " lumens and a temperature of " + environment.temperature + "K." );
				}
			}
			return;
		}

		// Function from file: hydro_tray.dm
		public void weed_invasion(  ) {
			
			if ( this.seed != null ) {
				this.remove_plant();
			}
			this.seed = GlobalVars.plant_controller.seeds[Rand13.PickFromTable( new ByTable(new object [] { "reishi", "nettles", "amanita", "mushrooms", "plumphelmet", "towercap", "harebells", "weeds" }) )];

			if ( !( this.seed != null ) ) {
				return;
			}
			this.health = this.seed.endurance;
			this.lastcycle = Game13.time;
			this.weedlevel = 0;
			this.update_icon();
			this.visible_message( "<span class='info'>" + Lang13.Initial( this, "name" ) + " has been overtaken by " + this.seed.display_name + "</span>." );
			return;
		}

		// Function from file: hydro_tray.dm
		public void remove_dead( dynamic user = null ) {
			
			if ( !Lang13.Bool( user ) || !this.dead ) {
				return;
			}

			if ( this.closed_system ) {
				GlobalFuncs.to_chat( user, "You can't remove the dead plant while the lid is shut." );
				return;
			}
			this.remove_plant();
			GlobalFuncs.to_chat( user, "You remove the dead plant from the " + this + "." );
			this.check_level_sanity();
			this.update_icon();
			return;
		}

		// Function from file: hydro_tray.dm
		[VerbInfo( name: "harvest" )]
		[VerbArg( 1, InputType.Mob )]
		public void f_harvest( dynamic user = null ) {
			
			if ( !( this.seed != null ) || !this.harvest || !Lang13.Bool( user ) ) {
				return;
			}

			if ( this.closed_system ) {
				GlobalFuncs.to_chat( user, "You can't harvest from the plant while the lid is shut." );
				return;
			}

			if ( !this.seed.check_harvest( user ) ) {
				return;
			}
			this.seed.harvest( user, this.yield_mod );
			this.harvest = false;
			this.lastproduce = this.age;

			if ( !( this.seed.harvest_repeat != 0 ) ) {
				this.remove_plant();
			}
			this.check_level_sanity();
			this.update_icon();
			return;
		}

		// Function from file: hydro_tray.dm
		public void remove_plant(  ) {
			this.yield_mod = 1;
			this.mutation_mod = 1;
			this.pestlevel = 0;
			this.seed = null;
			this.dead = false;
			this.age = 0;
			this.sampled = false;
			this.harvest = false;
			this.improper_light = false;
			this.improper_kpa = false;
			this.improper_heat = false;
			this.set_light( 0 );
			this.update_icon();
			return;
		}

		// Function from file: hydro_tray.dm
		public void die(  ) {
			this.dead = true;
			this.harvest = false;
			this.mutation_level = 0;
			this.yield_mod = 1;
			this.mutation_mod = 1;
			this.improper_light = false;
			this.improper_kpa = false;
			this.improper_heat = false;
			this.weedlevel += 1;
			this.pestlevel = 0;
			this.update_icon();
			return;
		}

		// Function from file: hydro_tray.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 0;
			air_group = air_group ?? false;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 1 ) != 0 ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: hydro_tray.dm
		public override dynamic RefreshParts(  ) {
			int capcount = 0;
			int mattercount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			capcount = 0;
			mattercount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_Capacitor ) {
					capcount += SP.rating;
				}

				if ( SP is Obj_Item_Weapon_StockParts_MatterBin ) {
					mattercount += SP.rating;
				}
			}
			this.weed_coefficient = 2 / mattercount;
			this.internal_light = capcount;
			return null;
		}

		// Function from file: hydro_tray.dm
		[Verb]
		[VerbInfo( name: "Set Tray Label", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void set_label(  ) {
			string n_label = null;

			
			if ( !( Task13.User != null ) || Task13.User.isUnconscious() || Task13.User.restrained() ) {
				return;
			}
			n_label = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( Task13.User, "What would you like to set the tray's label display to?", "Hydroponics Tray Labeling", null, null, InputType.Str ) ), 1, 26 );

			if ( !( Task13.User != null ) || !Lang13.Bool( n_label ) || !this.Adjacent( Task13.User ) || Task13.User.isUnconscious() || Task13.User.restrained() ) {
				return;
			}
			this.labeled = String13.SubStr( n_label, 1, 32 );
			this.update_name();
			Lang13.Call( typeof(Ent_Static).GetMethod( "remove_label" ), this );
			return;
		}

		// Function from file: hydro_tray.dm
		[Verb]
		[VerbInfo( name: "Toggle Light", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void light_toggle(  ) {
			
			if ( !( Task13.User != null ) || Task13.User.isUnconscious() || Task13.User.restrained() ) {
				return;
			}
			this.light_on = !this.light_on;
			this.calculate_light();
			return;
		}

		// Function from file: hydro_tray.dm
		[Verb]
		[VerbInfo( name: "Toggle Tray Lid", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void close_lid(  ) {
			
			if ( !( Task13.User != null ) || Task13.User.isUnconscious() || Task13.User.restrained() ) {
				return;
			}
			this.closed_system = !this.closed_system;
			GlobalFuncs.to_chat( Task13.User, "You " + ( this.closed_system ? "close" : "open" ) + " the tray's lid." );

			if ( this.closed_system ) {
				this.flags &= 61439;
			} else {
				this.flags |= 4096;
			}
			this.update_icon();
			return;
		}

	}

}