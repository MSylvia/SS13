// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_TeslaEnergyRelay : Obj_Item_MechaParts_MechaEquipment {

		public GlobalIterator_MechaEnergyRelay pr_energy_relay = null;
		public int coeff = 100;
		public ByTable use_channels = new ByTable(new object [] { 1, 3, 2 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "magnets=4;syndicate=2";
			this.equip_cooldown = 10;
			this.range = 0;
			this.icon_state = "tesla";
		}

		// Function from file: tools.dm
		public Obj_Item_MechaParts_MechaEquipment_TeslaEnergyRelay ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pr_energy_relay = new GlobalIterator_MechaEnergyRelay( new ByTable(new object [] { this }), false );
			this.pr_energy_relay.set_delay( this.equip_cooldown );
			return;
		}

		// Function from file: tools.dm
		public override string get_equip_info(  ) {
			
			if ( !( this.chassis != null ) ) {
				return null;
			}
			return new Txt( "<span style=\"color:" ).item( ( this.equip_ready ? "#0f0" : "#f00" ) ).str( ";\">*</span>&nbsp;" ).item( this.name ).str( " - <a href='?src=" ).Ref( this ).str( ";toggle_relay=1'>" ).item( ( this.pr_energy_relay.active() ? "Dea" : "A" ) ).str( "ctivate</a>" ).ToString();
		}

		// Function from file: tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["toggle_relay"] ) ) {
				
				if ( this.pr_energy_relay.toggle() ) {
					this.set_ready_state( false );
					this.log_message( "Activated." );
				} else {
					this.set_ready_state( true );
					this.log_message( "Deactivated." );
				}
			}
			return null;
		}

		// Function from file: tools.dm
		public dynamic get_power_channel( dynamic A = null ) {
			dynamic pow_chan = null;
			dynamic c = null;

			
			if ( Lang13.Bool( A ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.use_channels )) {
					c = _a;
					

					if ( ((Zone)A).powered( c ) ) {
						pow_chan = c;
						break;
					}
				}
			}
			return pow_chan;
		}

		// Function from file: tools.dm
		public int dyngetcharge(  ) {
			dynamic A = null;
			dynamic pow_chan = null;
			int charge = 0;

			
			if ( this.equip_ready ) {
				return this.chassis.dyngetcharge();
			}
			A = GlobalFuncs.get_area( this.chassis );
			pow_chan = this.get_power_channel( A );
			charge = 0;

			if ( Lang13.Bool( pow_chan ) ) {
				charge = 1000;
			} else {
				return this.chassis.dyngetcharge();
			}
			return charge;
		}

		// Function from file: tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( !Lang13.Bool( M.proc_res["dyngetcharge"] ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: tools.dm
		public override void attach( Obj_Mecha M = null ) {
			base.attach( M );
			this.chassis.proc_res["dyngetcharge"] = this;
			return;
		}

		// Function from file: tools.dm
		public override void detach( dynamic moveto = null ) {
			this.pr_energy_relay.stop();
			this.chassis.proc_res["dyngetcharge"] = null;
			base.detach( (object)(moveto) );
			return;
		}

	}

}