// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Energy_Gun_Nuclear : Obj_Item_Weapon_Gun_Energy_Gun {

		public bool lightfail = false;
		public int charge_tick = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "combat=3;materials=5;powerstorage=3";
			this.icon_state = "nucgun";
		}

		// Function from file: nuclear.dm
		public Obj_Item_Weapon_Gun_Energy_Gun_Nuclear ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.processing_objects.Add( this );
			return;
		}

		// Function from file: nuclear.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;
			this.update_charge();
			this.update_reactor();
			this.update_mode();
			return null;
		}

		// Function from file: nuclear.dm
		public override dynamic emp_act( int severity = 0 ) {
			base.emp_act( severity );
			this.reliability -= Num13.Floor( 15 / severity );
			return null;
		}

		// Function from file: nuclear.dm
		public void update_mode(  ) {
			
			if ( !this.mode ) {
				this.overlays.Add( "nucgun-stun" );
			} else if ( this.mode ) {
				this.overlays.Add( "nucgun-kill" );
			}
			return;
		}

		// Function from file: nuclear.dm
		public void update_reactor(  ) {
			
			if ( this.crit_fail ) {
				this.overlays.Add( "nucgun-crit" );
				return;
			}

			if ( this.lightfail ) {
				this.overlays.Add( "nucgun-medium" );
			} else if ( Convert.ToDouble( this.power_supply.charge / this.power_supply.maxcharge ) <= 0.5 ) {
				this.overlays.Add( "nucgun-light" );
			} else {
				this.overlays.Add( "nucgun-clean" );
			}
			return;
		}

		// Function from file: nuclear.dm
		public void update_charge(  ) {
			double ratio = 0;

			
			if ( this.crit_fail ) {
				this.overlays.Add( "nucgun-whee" );
				return;
			}
			ratio = Convert.ToDouble( this.power_supply.charge / this.power_supply.maxcharge );
			ratio = Num13.Round( ratio, 0.25 ) * 100;
			this.overlays.Add( "nucgun-" + ratio );
			return;
		}

		// Function from file: nuclear.dm
		public bool failcheck(  ) {
			Mob_Living M = null;
			Mob_Living M2 = null;

			this.lightfail = false;

			if ( Rand13.PercentChance( ((int)( this.reliability )) ) ) {
				return true;
			}

			if ( Rand13.PercentChance( ((int)( this.reliability )) ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 0 ), typeof(Mob_Living) )) {
					M = _a;
					

					if ( M.contents.Contains( this ) ) {
						GlobalFuncs.to_chat( M, "<span class='warning'>Your gun feels pleasantly warm for a moment.</span>" );
					} else {
						GlobalFuncs.to_chat( M, "<span class='warning'>You feel a warm sensation.</span>" );
					}
					M.apply_effect( Rand13.Int( 3, 120 ), "irradiate" );
				}
				this.lightfail = true;
			} else {
				
				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this, Rand13.Int( 1, 4 ) ), typeof(Mob_Living) )) {
					M2 = _b;
					

					if ( M2.contents.Contains( this ) ) {
						GlobalFuncs.to_chat( M2, "<span class='warning'>Your gun's reactor overloads!</span>" );
					}
					GlobalFuncs.to_chat( M2, "<span class='warning'>You feel a wave of heat wash over you.</span>" );
					M2.apply_effect( 300, "irradiate" );
				}
				this.crit_fail = true;
				GlobalVars.processing_objects.Remove( this );
				this.update_icon();
			}
			return false;
		}

		// Function from file: nuclear.dm
		public override dynamic process(  ) {
			this.charge_tick++;

			if ( this.charge_tick < 4 ) {
				return 0;
			}
			this.charge_tick = 0;

			if ( !Lang13.Bool( this.power_supply ) ) {
				return 0;
			}

			if ( Lang13.Bool( this.power_supply.charge / this.power_supply.maxcharge ) != true ) {
				
				if ( !this.failcheck() ) {
					return 0;
				}
				((Obj_Item_Weapon_Cell)this.power_supply).give( 100 );
				this.update_icon();
			}
			return 1;
		}

		// Function from file: nuclear.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.processing_objects.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}