// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Bioprinter : Obj_Machinery {

		public bool prints_prosthetics = false;
		public double stored_matter = 200;
		public dynamic loaded_dna = null;
		public ByTable products = new ByTable()
											.Set( "heart", new ByTable(new object [] { typeof(Obj_Item_Organ_Heart), 50 }) )
											.Set( "lungs", new ByTable(new object [] { typeof(Obj_Item_Organ_Lungs), 40 }) )
											.Set( "kidneys", new ByTable(new object [] { typeof(Obj_Item_Organ_Kidneys), 20 }) )
											.Set( "eyes", new ByTable(new object [] { typeof(Obj_Item_Organ_Eyes), 30 }) )
											.Set( "liver", new ByTable(new object [] { typeof(Obj_Item_Organ_Liver), 50 }) )
										;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 50;
			this.light_color = "#7DE1E1";
			this.light_range_on = 3;
			this.light_power_on = 2;
			this.use_auto_lights = true;
			this.icon = "icons/obj/surgery.dmi";
			this.icon_state = "bioprinter";
		}

		// Function from file: bioprinter.dm
		public Obj_Machinery_Bioprinter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Bioprinter(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: bioprinter.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic M = null;

			
			if ( !this.prints_prosthetics && a is Obj_Item_Weapon_ReagentContainers_Syringe ) {
				return null;
			} else if ( !this.prints_prosthetics && a is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Meat ) {
				
				if ( Lang13.Bool( b.drop_item( a ) ) ) {
					this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " processes " ).the( a ).item().str( ".</span>" ).ToString() );
					this.stored_matter += 50;
					GlobalFuncs.qdel( a );
					return null;
				}
			} else if ( this.prints_prosthetics && a is Obj_Item_Stack_Sheet_Metal ) {
				M = a;

				if ( Lang13.Bool( b.drop_item( M ) ) ) {
					this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " processes " ).the( a ).item().str( ".</span>" ).ToString() );
					this.stored_matter += Convert.ToDouble( M.amount * 10 );
					GlobalFuncs.returnToPool( M );
					return null;
				}
			} else if ( a is Obj_Item_Weapon_Wrench ) {
				((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " begins to " ).item( ( Lang13.Bool( this.anchored ) ? "unfasten" : "fasten" ) ).str( " " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You begin to " ).item( ( Lang13.Bool( this.anchored ) ? "unfasten" : "fasten" ) ).str( " " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='notice'>You hear a ratchet.</span>" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( b, this, 30 ) ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " begins to " ).item( ( Lang13.Bool( this.anchored ) ? "unfasten" : "fasten" ) ).str( " " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You " ).item( ( Lang13.Bool( this.anchored ) ? "unfasten" : "fasten" ) ).str( " " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='notice'>You hear a ratchet.</span>" );

					if ( Lang13.Bool( this.anchored ) ) {
						this.anchored = 0;
					} else {
						this.anchored = 1;
					}
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: bioprinter.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic choice = null;
			dynamic new_organ = null;
			dynamic O = null;

			
			if ( !( a is Mob_Living_Carbon_Human ) ) {
				return null;
			}
			choice = Interface13.Input( "What would you like to print?", null, null, null, this.products, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( choice ) ) {
				return null;
			}

			if ( this.stored_matter >= Convert.ToDouble( this.products[choice][2] ) ) {
				this.stored_matter -= Convert.ToDouble( this.products[choice][2] );
				new_organ = this.products[choice][1];
				O = Lang13.Call( new_organ, GlobalFuncs.get_turf( this ) );

				if ( this.prints_prosthetics ) {
					O.robotic = 2;
				}
				this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " spits out a brand new organ.</span>" ).ToString() );
			} else {
				this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( "'s error light flickers. It can't make new organs out of thin air, fill it up first.</span>" ).ToString() );
			}
			return null;
		}

	}

}