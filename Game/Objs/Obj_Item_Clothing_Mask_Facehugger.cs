// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Clothing_Mask_Facehugger : Obj_Item_Clothing_Mask {

		public bool real = true;
		public int stat = 0;
		public bool sterile = false;
		public double? strength = 5;
		public int attached = 0;
		public double target_time = 0.5;
		public bool walk_speed = true;
		public int nextwalk = 0;
		public Mob_Living_Carbon_Human target = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "facehugger";
			this.w_class = 1;
			this.flags = 265;
			this.throw_range = 5;
			this.health = 5;
			this.icon = "icons/mob/alien.dmi";
			this.icon_state = "facehugger";
		}

		// Function from file: facehugger.dm
		public Obj_Item_Clothing_Mask_Facehugger ( dynamic loc = null ) : base( (object)(loc) ) {
			
			if ( GlobalVars.aliens_allowed ) {
				base();

				if ( this.real ) {
					GlobalVars.processing_objects.Add( this );
				}
			} else {
				GlobalFuncs.qdel( this );
			}
			return;
		}

		// Function from file: facehugger.dm
		public override dynamic throw_impact( dynamic hit_atom = null, dynamic speed = null, Mob user = null ) {
			base.throw_impact( (object)(hit_atom), (object)(speed), user );

			if ( this.stat == 0 ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" );
				this.Attach( hit_atom );
			}
			return null;
		}

		// Function from file: facehugger.dm
		public override bool throw_at( dynamic target = null, double? range = null, dynamic speed = null, bool? _override = null ) {
			base.throw_at( (object)(target), range, (object)(speed), _override );

			if ( this.stat == 0 ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_thrown";
				Task13.Schedule( 15, (Task13.Closure)(() => {
					
					if ( this.icon_state == "" + Lang13.Initial( this, "icon_state" ) + "_thrown" ) {
						this.icon_state = "" + Lang13.Initial( this, "icon_state" );
					}
					return;
				}));
			}
			return false;
		}

		// Function from file: facehugger.dm
		public override bool HasProximity( dynamic AM = null ) {
			
			if ( GlobalFuncs.CanHug( AM ) ) {
				return this.Attach( AM );
			}
			return false;
		}

		// Function from file: facehugger.dm
		public override bool on_found( dynamic finder = null ) {
			
			if ( this.stat == 0 ) {
				return this.HasProximity( finder );
			}
			return false;
		}

		// Function from file: facehugger.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			this.HasProximity( O );
			return null;
		}

		// Function from file: facehugger.dm
		public override dynamic equipped( dynamic user = null, dynamic slot = null ) {
			this.Attach( user );
			return null;
		}

		// Function from file: facehugger.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( ( exposed_temperature ??0) > 300 ) {
				this.Die();
			}
			return false;
		}

		// Function from file: facehugger.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			this.health -= Convert.ToDouble( Proj.damage );
			return null;
		}

		// Function from file: facehugger.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.Die();
			return null;
		}

		// Function from file: facehugger.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( !this.real ) {
				return null;
			}

			switch ((int)( this.stat )) {
				case 2:
				case 1:
					GlobalFuncs.to_chat( user, new Txt( "<span class='deadsay'>" ).The( this ).item().str( " is not moving.</span>" ).ToString() );
					break;
				case 0:
					GlobalFuncs.to_chat( user, new Txt( "<span class='danger'>" ).The( this ).item().str( " seems active.</span>" ).ToString() );
					break;
			}

			if ( this.sterile ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='danger'>It looks like " ).the( this ).item().str( "'s proboscis has been removed.</span>" ).ToString() );
			}
			return null;
		}

		// Function from file: facehugger.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			base.attack( (object)(M), (object)(user), def_zone, eat_override );
			((Mob)user).drop_from_inventory( this );
			this.Attach( M );
			return null;
		}

		// Function from file: facehugger.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( this.stat == 0 && !this.sterile && !( a is Mob_Living_Carbon_Alien ) ) {
				this.Attach( a );
				return null;
			} else {
				base.attack_hand( (object)(a), (object)(b), (object)(c) );
				return null;
			}
		}

		// Function from file: facehugger.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Mob_Living_Carbon_Alien ) {
				this.attack_hand( a );
				return null;
			} else {
				base.attack_paw( a, (object)(b), (object)(c) );
				return null;
			}
		}

		// Function from file: facehugger.dm
		public virtual void Die(  ) {
			
			if ( this.stat == 2 ) {
				return;
			}
			this.target = null;
			GlobalVars.processing_objects.Remove( this );
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_dead";
			this.stat = 2;
			this.visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " curls up into a ball!</span>" ).ToString() );
			return;
		}

		// Function from file: facehugger.dm
		public void GoIdle( int delay = 0 ) {
			
			if ( this.stat == 2 || this.stat == 1 ) {
				return;
			}
			this.target = null;
			this.stat = 1;
			this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_inactive";

			if ( !( delay != 0 ) ) {
				delay = Rand13.Int( GlobalVars.MIN_ACTIVE_TIME, GlobalVars.MAX_ACTIVE_TIME );
			}
			Task13.Schedule( delay, (Task13.Closure)(() => {
				this.GoActive();
				return;
			}));
			return;
		}

		// Function from file: facehugger.dm
		public void GoActive(  ) {
			
			if ( this.stat == 2 || this.stat == 0 ) {
				return;
			}
			this.stat = 0;
			this.icon_state = "" + Lang13.Initial( this, "icon_state" );
			return;
		}

		// Function from file: facehugger.dm
		public void Impregnate( dynamic target = null ) {
			Obj_Item_AlienEmbryo E = null;
			dynamic T = null;
			dynamic affected = null;
			dynamic C = null;

			
			if ( !Lang13.Bool( target ) || target.wear_mask != this || Convert.ToInt32( target.stat ) == 2 ) {
				return;
			}

			if ( !this.sterile ) {
				E = new Obj_Item_AlienEmbryo( target );
				target.status_flags |= 32768;

				if ( target is Mob_Living_Carbon_Human ) {
					T = target;
					affected = ((Mob_Living_Carbon_Human)T).get_organ( "chest" );
					affected.implants.Add( E );
				}
				((Ent_Static)target).visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " falls limp after violating " ).item( target ).str( "'s face !</span>" ).ToString() );
				GlobalVars.stat_collection.xeno.faces_hugged++;
				this.Die();
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_impregnated";

				if ( target is Mob_Living_SimpleAnimal_Corgi ) {
					C = target;
					this.loc = GlobalFuncs.get_turf( C );
					C.facehugger = null;
				}
			} else {
				((Ent_Static)target).visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " violates " ).item( target ).str( "'s face !</span>" ).ToString() );
			}
			return;
		}

		// Function from file: facehugger.dm
		public bool Attach( dynamic M = null ) {
			int preggers = 0;
			dynamic L = null;
			dynamic H = null;
			dynamic mouth_protection = null;
			dynamic hugger = null;
			dynamic target = null;
			dynamic W = null;
			dynamic C = null;

			preggers = Rand13.Int( GlobalVars.MIN_IMPREGNATION_TIME, GlobalVars.MAX_IMPREGNATION_TIME );

			if ( !( M is Mob_Living_SimpleAnimal_Corgi ) && !( M is Mob_Living_Carbon ) || M is Mob_Living_Carbon_Alien ) {
				return false;
			}

			if ( M is Mob_Living_Carbon && ( M.status_flags & 32768 ) != 0 ) {
				this.visible_message( "<span class='danger'>An alien tries to place a facehugger on " + M + " but it refuses sloppy seconds!</span>" );
				return false;
			}

			if ( this.attached != 0 ) {
				return false;
			} else {
				this.attached++;
				Task13.Schedule( GlobalVars.MAX_IMPREGNATION_TIME, (Task13.Closure)(() => {
					this.attached = 0;
					return;
				}));
			}
			L = M;

			if ( this.loc == L ) {
				return false;
			}

			if ( this.stat != 0 ) {
				return false;
			}

			if ( !this.sterile ) {
				((Mob_Living)L).take_organ_damage( this.strength, 0 );
			}
			((Ent_Static)L).visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " leaps at " ).item( L ).str( "'s face!</span>" ).ToString() );

			if ( L is Mob_Living_Carbon_Human ) {
				H = L;
				mouth_protection = ((Mob_Living_Carbon_Human)H).get_body_part_coverage( 4096 );

				if ( !this.real && Lang13.Bool( mouth_protection ) ) {
					return false;
				}
				hugger = H.wear_mask;

				if ( hugger is Obj_Item_Clothing_Mask_Facehugger && !hugger.sterile && !this.sterile ) {
					return false;
				}

				if ( Lang13.Bool( mouth_protection ) && mouth_protection != H.wear_mask ) {
					GlobalVars.stat_collection.xeno.proper_head_protection++;

					if ( Rand13.PercentChance( 50 ) ) {
						((Ent_Static)H).visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " smashes against " ).item( H ).str( "'s " ).item( mouth_protection ).str( ", and rips it off in the process!</span>" ).ToString() );
						((Mob)H).drop_from_inventory( mouth_protection );
					} else {
						((Ent_Static)H).visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " bounces off of the " ).item( mouth_protection ).str( "!</span>" ).ToString() );

						if ( Rand13.PercentChance( 75 ) ) {
							this.Die();
						} else {
							this.GoIdle( 15 );
							return false;
						}
					}
				}
			}

			if ( M is Mob_Living_Carbon ) {
				target = L;

				if ( Lang13.Bool( target.wear_mask ) ) {
					
					if ( Rand13.PercentChance( 20 ) ) {
						return false;
					}
					W = target.wear_mask;

					if ( !W.canremove ) {
						return false;
					}
					((Mob)target).drop_from_inventory( W );
					((Ent_Static)target).visible_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " tears " ).the( W ).item().str( " off of " ).item( target ).str( "'s face!</span>" ).ToString() );
				}
				this.loc = target;
				((Mob)target).equip_to_slot( this, 2 );
				((Mob)target).update_inv_wear_mask();

				if ( !this.sterile ) {
					((Mob)L).Paralyse( preggers / 10 + 10 );
				}
			} else if ( M is Mob_Living_SimpleAnimal_Corgi ) {
				C = M;
				this.loc = C;
				C.facehugger = this;
				C.wear_mask = this;
			}
			this.GoIdle( 150 );
			Task13.Schedule( preggers, (Task13.Closure)(() => {
				this.Impregnate( L );
				return;
			}));
			return false;
		}

		// Function from file: facehugger.dm
		public void healthcheck(  ) {
			
			if ( this.health <= 0 ) {
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "_dead";
				this.Die();
			}
			return;
		}

		// Function from file: facehugger.dm
		public void followtarget(  ) {
			int dist = 0;
			dynamic mask = null;
			dynamic F = null;

			
			if ( !this.real ) {
				return;
			}

			if ( !( this.target != null ) || this.target.stat == 2 || this.target.stat == 1 || ( this.target.status_flags & 32768 ) != 0 ) {
				this.findtarget();
				return;
			}

			if ( this.loc != null && this.loc == GlobalFuncs.get_turf( this ) && this.attached == 0 && this.stat == 0 && this.nextwalk <= Game13.time ) {
				this.nextwalk = Game13.time + ( this.walk_speed ?1:0);
				dist = Map13.GetDistance( this.loc, this.target.loc );

				if ( dist > 4 ) {
					return;
				}
				mask = this.target.get_body_part_coverage( 4096 );

				if ( Lang13.Bool( mask ) && mask is Obj_Item_Clothing_Mask_Facehugger ) {
					F = mask;

					if ( F.sterile ) {
						this.findtarget();
						return;
					}
				} else {
					Map13.StepTowardsSimple( this, this.target, 0 );

					if ( dist <= 1 ) {
						
						if ( GlobalFuncs.CanHug( this.target ) ) {
							this.Attach( this.target );
							return;
						} else {
							this.target = null;
							Map13.Walk( this, 0, 0 );
							this.findtarget();
							return;
						}
					}
				}
			}
			return;
		}

		// Function from file: facehugger.dm
		public void findtarget(  ) {
			Mob_Living_Carbon_Human T = null;

			
			if ( !this.real ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( 4, this ), typeof(Mob_Living_Carbon_Human) )) {
				T = _a;
				

				if ( !GlobalFuncs.CanHug( T ) ) {
					continue;
				}

				if ( T != null && T.stat != 2 && T.stat != 1 ) {
					
					if ( Map13.GetDistance( this.loc, T.loc ) <= 4 ) {
						this.target = T;
					}
				}
			}
			return;
		}

		// Function from file: facehugger.dm
		public override dynamic process(  ) {
			this.healthcheck();
			this.followtarget();
			return null;
		}

		// Function from file: facehugger.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.processing_objects.Remove( this );
			this.target = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: facehugger.dm
		public override bool can_contaminate(  ) {
			return false;
		}

	}

}