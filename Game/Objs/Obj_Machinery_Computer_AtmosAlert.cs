// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_AtmosAlert : Obj_Machinery_Computer {

		public ByTable priority_alarms = new ByTable();
		public ByTable minor_alarms = new ByTable();
		public int receive_frequency = 1437;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/atmos_alert";
			this.light_color = "#7DE1E1";
			this.icon_state = "alert:0";
		}

		public Obj_Machinery_Computer_AtmosAlert ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: atmos_alert.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.radio_controller.remove_object( this, this.receive_frequency );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: atmos_alert.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			string removing_zone = null;
			dynamic zone = null;
			string removing_zone2 = null;
			dynamic zone2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["priority_clear"] ) ) {
				removing_zone = href_list["priority_clear"];

				foreach (dynamic _a in Lang13.Enumerate( this.priority_alarms )) {
					zone = _a;
					

					if ( String13.CKey( zone ) == removing_zone ) {
						this.priority_alarms.Remove( zone );
					}
				}
			}

			if ( Lang13.Bool( href_list["minor_clear"] ) ) {
				removing_zone2 = href_list["minor_clear"];

				foreach (dynamic _b in Lang13.Enumerate( this.minor_alarms )) {
					zone2 = _b;
					

					if ( String13.CKey( zone2 ) == removing_zone2 ) {
						this.minor_alarms.Remove( zone2 );
					}
				}
			}
			this.update_icon();
			return null;
		}

		// Function from file: atmos_alert.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.priority_alarms.len != 0 ) {
				this.icon_state = "alert:2";
			} else if ( this.minor_alarms.len != 0 ) {
				this.icon_state = "alert:1";
			} else {
				this.icon_state = "alert:0";
			}
			return null;
		}

		// Function from file: atmos_alert.dm
		public override dynamic process(  ) {
			
			if ( Lang13.Bool( base.process() ) ) {
				this.updateDialog();
			}
			return null;
		}

		// Function from file: atmos_alert.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			Interface13.Browse( a, this.return_text(), "window=computer" );
			((Mob)a).set_machine( this );
			GlobalFuncs.onclose( a, "computer" );
			return null;
		}

		// Function from file: atmos_alert.dm
		public string return_text(  ) {
			string priority_text = null;
			string minor_text = null;
			dynamic zone = null;
			dynamic zone2 = null;
			string output = null;

			
			if ( this.priority_alarms.len != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.priority_alarms )) {
					zone = _a;
					
					priority_text += new Txt( "<FONT color='red'><B>" ).item( zone ).str( "</B></FONT>  <A href='?src=" ).Ref( this ).str( ";priority_clear=" ).item( String13.CKey( zone ) ).str( "'>X</A><BR>" ).ToString();
				}
			} else {
				priority_text = "No priority alerts detected.<BR>";
			}

			if ( this.minor_alarms.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.minor_alarms )) {
					zone2 = _b;
					
					minor_text += new Txt( "<B>" ).item( zone2 ).str( "</B>  <A href='?src=" ).Ref( this ).str( ";minor_clear=" ).item( String13.CKey( zone2 ) ).str( "'>X</A><BR>" ).ToString();
				}
			} else {
				minor_text = "No minor alerts detected.<BR>";
			}
			output = "<B>" + this.name + "</B><HR>\n<B>Priority Alerts:</B><BR>\n" + priority_text + @"
<BR>
<HR>
<B>Minor Alerts:</B><BR>
" + minor_text + "\n<BR>";
			return output;
		}

		// Function from file: atmos_alert.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.receive_frequency );
			this.receive_frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.receive_frequency, GlobalVars.RADIO_ATMOSIA );
			return;
		}

		// Function from file: atmos_alert.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic zone = null;
			string severity = null;

			
			if ( !( signal != null ) || Lang13.Bool( ((dynamic)signal).encryption ) ) {
				return false;
			}
			zone = ((dynamic)signal).data["zone"];
			severity = ((dynamic)signal).data["alert"];

			if ( !Lang13.Bool( zone ) || !Lang13.Bool( severity ) ) {
				return false;
			}
			this.minor_alarms.Remove( zone );
			this.priority_alarms.Remove( zone );

			if ( severity == "severe" ) {
				this.priority_alarms.Add( zone );
			} else if ( severity == "minor" ) {
				this.minor_alarms.Add( zone );
			}
			this.update_icon();
			return false;
		}

		// Function from file: atmos_alert.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );
			this.set_frequency( this.receive_frequency );
			return false;
		}

	}

}