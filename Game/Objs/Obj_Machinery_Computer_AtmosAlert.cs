// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_AtmosAlert : Obj_Machinery_Computer {

		public ByTable priority_alarms = new ByTable();
		public ByTable minor_alarms = new ByTable();
		public double receive_frequency = 1437;
		public RadioFrequency radio_connection = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_AtmosAlert);
			this.icon_screen = "alert:0";
			this.icon_keyboard = "atmos_key";
		}

		public Obj_Machinery_Computer_AtmosAlert ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: atmos_alert.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );

			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( this.priority_alarms.len != 0 ) {
				this.overlays.Add( "alert:2" );
			} else if ( this.minor_alarms.len != 0 ) {
				this.overlays.Add( "alert:1" );
			}
			return false;
		}

		// Function from file: atmos_alert.dm
		public override bool receive_signal( Signal signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic zone = null;
			string severity = null;

			
			if ( !( signal != null ) || signal.encryption != 0 ) {
				return false;
			}
			zone = signal.data["zone"];
			severity = signal.data["alert"];

			if ( !Lang13.Bool( zone ) || !Lang13.Bool( severity ) ) {
				return false;
			}
			this.minor_alarms.Remove( zone );
			this.priority_alarms.Remove( zone );

			if ( severity == "severe" ) {
				this.priority_alarms.Add( zone );
			} else if ( severity == "minor" ) {
				this.minor_alarms.Add( zone );
			}
			this.update_icon();
			return false;
		}

		// Function from file: atmos_alert.dm
		public void set_frequency( double new_frequency = 0 ) {
			GlobalVars.SSradio.remove_object( this, this.receive_frequency );
			this.receive_frequency = new_frequency;
			this.radio_connection = GlobalVars.SSradio.add_object( this, this.receive_frequency, GlobalVars.RADIO_ATMOSIA );
			return;
		}

		// Function from file: atmos_alert.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic zone = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "clear":
					zone = _params["zone"];

					if ( this.priority_alarms.Contains( zone ) ) {
						Task13.User.WriteMsg( "Priority alarm for " + zone + " cleared." );
						this.priority_alarms.Remove( zone );
						_default = GlobalVars.TRUE;
					}

					if ( this.minor_alarms.Contains( zone ) ) {
						Task13.User.WriteMsg( "Minor alarm for " + zone + " cleared." );
						this.minor_alarms.Remove( zone );
						_default = GlobalVars.TRUE;
					}
					break;
			}
			this.update_icon();
			return _default;
		}

		// Function from file: atmos_alert.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			dynamic zone = null;
			dynamic zone2 = null;

			data = new ByTable();
			data["priority"] = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.priority_alarms )) {
				zone = _a;
				
				data["priority"] += zone;
			}
			data["minor"] = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.minor_alarms )) {
				zone2 = _b;
				
				data["minor"] += zone2;
			}
			return data;
		}

		// Function from file: atmos_alert.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "atmos_alert", this.name, 350, 300, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: atmos_alert.dm
		public override dynamic Destroy(  ) {
			
			if ( GlobalVars.SSradio != null ) {
				GlobalVars.SSradio.remove_object( this, this.receive_frequency );
			}
			return base.Destroy();
		}

		// Function from file: atmos_alert.dm
		public override void initialize(  ) {
			base.initialize();
			this.set_frequency( this.receive_frequency );
			return;
		}

	}

}