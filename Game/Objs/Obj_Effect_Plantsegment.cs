// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Plantsegment : Obj_Effect {

		public double health = 10;
		public double max_health = 100;
		public ByTable neighbors = new ByTable();
		public dynamic epicenter = null;
		public Seed seed = null;
		public bool sampled = false;
		public int spread_chance = 0;
		public int spread_distance = 0;
		public double mature_time = 0;
		public int last_tick = 0;
		public int last_special = 0;
		public bool harvest = false;
		public double age = 0;
		public bool limited_growth = false;
		public string plant_damage_noun = "Thorns";
		public dynamic on_resist_key = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.pass_flags = 5;
			this.icon = "icons/effects/spacevines.dmi";
			this.icon_state = "Light1";
			this.layer = 5;
		}

		// Function from file: spreading.dm
		public Obj_Effect_Plantsegment ( dynamic newloc = null, Seed newseed = null, dynamic newepicenter = null, bool? start_fully_mature = null ) : base( (object)(newloc) ) {
			start_fully_mature = start_fully_mature ?? false;

			dynamic T = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !Lang13.Bool( newepicenter ) ) {
				this.epicenter = GlobalFuncs.get_turf( this );
			} else {
				this.epicenter = newepicenter;
			}

			if ( !( GlobalVars.plant_controller != null ) ) {
				Task13.Sleep( 250 );
			}

			if ( !( GlobalVars.plant_controller != null ) ) {
				GlobalFuncs.error( "<span class='danger'>Plant controller does not exist and " + this + " requires it. Aborting.</span>" );
				GlobalFuncs.qdel( this );
				return;
			}

			if ( !( newseed is Seed ) ) {
				newseed = GlobalVars.plant_controller.seeds["glowshroom"];
			}
			this.seed = newseed;

			if ( !( this.seed != null ) ) {
				GlobalFuncs.qdel( this );
				return;
			}
			this.name = "" + this.seed.seed_name + " vines";
			this.max_health = Num13.Floor( this.seed.endurance / 2 );

			if ( this.seed.spread == 1 ) {
				this.limited_growth = true;
			}
			this.mature_time = GlobalFuncs.Ceiling( this.seed.maturation / 2 );
			this.spread_chance = Num13.Floor( GlobalFuncs.triangular_seq( this.seed.potency * 2, 30 ) + 40 );
			this.spread_distance = ( this.limited_growth ? 4 : Num13.Floor( this.spread_chance * 0.2 ) );
			this.update_icon();

			if ( start_fully_mature == true ) {
				this.health = this.max_health;
				this.mature_time = 0;
			}
			Task13.Schedule( 1, (Task13.Closure)(() => {
				GlobalVars.plant_controller.add_plant( this );

				if ( this.seed.chems != null && !( this.seed.chems["pacid"] == null ) ) {
					T = GlobalFuncs.get_turf( this );
					((Ent_Static)T).ex_act( ( Rand13.PercentChance( 80 ) ? 3 : 2 ) );
				}
				return;
			}));
			return;
		}

		// Function from file: spreading_response.dm
		public override bool unlock_atom( dynamic AM = null ) {
			bool _default = false;

			_default = base.unlock_atom( (object)(AM) );

			if ( !_default ) {
				return _default;
			}

			if ( !( AM is Mob_Living ) ) {
				return _default;
			}
			AM.on_resist.Remove( this.on_resist_key );
			this.on_resist_key = null;
			return _default;
		}

		// Function from file: spreading_response.dm
		public override bool lock_atom( dynamic AM = null ) {
			bool _default = false;

			_default = base.lock_atom( (object)(AM) );

			if ( !_default ) {
				return _default;
			}

			if ( !( AM is Mob_Living ) ) {
				return _default;
			}
			this.on_resist_key = AM.on_resist.Add( this, "manual_unbuckle" );
			this.last_special = Game13.time;
			return _default;
		}

		// Function from file: spreading_response.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			this.manual_unbuckle( a );
			return null;
		}

		// Function from file: spreading_response.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a.a_intent == "help" && !( this.locked_atoms.len != 0 ) && this.harvest ) {
				
				if ( this.seed.check_harvest( a ) ) {
					this.f_harvest( a );
				}
				return null;
			}
			this.manual_unbuckle( a );
			return null;
		}

		// Function from file: spreading_response.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			
			if ( !( O is Mob_Living ) || !this.is_mature() || !this.special_cooldown() ) {
				return null;
			}

			if ( Rand13.PercentChance( Num13.Floor( this.seed.potency / 6 ) ) ) {
				this.entangle_mob( O );
			}

			if ( O is Mob_Living_Carbon_Human ) {
				this.do_thorns( O, 25 );
				this.do_sting( O, 30 );
			}
			return null;
		}

		// Function from file: spreading_growth.dm
		public override dynamic process(  ) {
			dynamic T = null;
			GasMixture environment = null;
			Mob_Living_Carbon_Human V = null;
			dynamic victim = null;
			dynamic victim2 = null;
			int chance = 0;
			int max_spread = 0;
			double i = 0;
			dynamic target_turf = null;
			Obj_Effect_Plantsegment child = null;
			Obj_Effect_Plantsegment neighbor = null;

			
			if ( this.timestopped ) {
				return 0;
			}

			if ( !( this.seed != null ) ) {
				this.die_off();
				return 0;
			}
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) && T is Tile_Simulated ) {
				environment = ((Ent_Static)T).return_air();

				if ( environment != null ) {
					
					if ( Convert.ToDouble( environment.return_pressure() ) > Convert.ToDouble( this.seed.highkpa_tolerance ) ) {
						this.health -= Rand13.Int( 5, 10 );
					}

					if ( Math.Abs( ( environment.temperature ??0) - Convert.ToDouble( this.seed.ideal_heat ) ) > Convert.ToDouble( this.seed.heat_tolerance ) ) {
						this.health -= Rand13.Int( 5, 10 );
						return null;
					}
				}
			}

			if ( this.health < this.max_health ) {
				this.health = Num13.MinInt( ((int)( this.max_health )), ((int)( this.health + Rand13.Int( 3, 5 ) )) );
			}

			if ( Rand13.PercentChance( 80 ) ) {
				this.age++;
			}

			if ( !this.harvest && Rand13.PercentChance( 3 ) && this.age > this.mature_time + this.seed.production ) {
				this.harvest = true;
			}
			this.update_icon();

			if ( this.is_mature() && this.special_cooldown() ) {
				
				if ( this.locked_atoms != null && this.locked_atoms.len != 0 ) {
					V = this.locked_atoms[1];

					if ( V is Mob_Living_Carbon_Human ) {
						this.do_chem_inject( V );
						this.do_carnivorous_bite( V, this.seed.potency );
					}
				} else if ( this.seed.carnivorous == 2 ) {
					victim = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInRange( 1, this ) );

					if ( Lang13.Bool( victim ) ) {
						this.grab_mob( victim );
					}
				} else if ( Rand13.PercentChance( Num13.Floor( this.seed.potency / 2 ) ) ) {
					victim2 = Lang13.FindIn( typeof(Mob_Living), GlobalFuncs.get_turf( this ) );

					if ( Lang13.Bool( victim2 ) ) {
						this.grab_mob( victim2 );
					}
				}
			}

			if ( Game13.time >= this.last_tick + 100 ) {
				this.last_tick = Game13.time;
				this.update_neighbors();
			}

			if ( this.sampled ) {
				chance = Num13.MaxInt( 1, Num13.Floor( 30 / this.seed.production ) );

				if ( Rand13.PercentChance( chance ) ) {
					this.sampled = false;
				}
			}

			if ( this.is_mature() && this.neighbors.len != 0 && Rand13.PercentChance( this.spread_chance ) ) {
				max_spread = ( Num13.Floor( this.seed.yield * 3 / 14 ) <= 1 ? 1 : ( Num13.Floor( this.seed.yield * 3 / 14 ) >= 3 ? 3 : Num13.Floor( this.seed.yield * 3 / 14 ) ) );

				foreach (dynamic _b in Lang13.IterateRange( 1, max_spread )) {
					i = _b;
					

					if ( Rand13.PercentChance( this.spread_chance ) ) {
						Task13.Sleep( Rand13.Int( 3, 5 ) );

						if ( Lang13.Bool( this.gcDestroyed ) || !( this.neighbors.len != 0 ) ) {
							break;
						}
						target_turf = Rand13.PickFromTable( this.neighbors );
						child = new Obj_Effect_Plantsegment( GlobalFuncs.get_turf( this ), this.seed, this.epicenter );

						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( target_turf, 1 ), typeof(Obj_Effect_Plantsegment) )) {
							neighbor = _a;
							
							neighbor.neighbors.Remove( target_turf );
						}
						Task13.Schedule( 1, (Task13.Closure)(() => {
							child.loc = target_turf;
							child.update_icon();
							return;
						}));
					}
				}
			}
			this.check_health();

			if ( this.neighbors.len != 0 || this.health != this.max_health || !this.harvest || this.locked_atoms.len != 0 ) {
				GlobalVars.plant_controller.add_plant( this );
			}
			return null;
		}

		// Function from file: spreading.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			this.die_off();
			return false;
		}

		// Function from file: spreading.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					this.die_off();
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.die_off();
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 5 ) ) {
						this.die_off();
					}
					break;
				default:
					this.do_nothing();
					break;
			}
			return false;
		}

		// Function from file: spreading_response.dm
		public void grab_mob( dynamic victim = null ) {
			bool can_grab = false;
			dynamic H = null;

			
			if ( !Lang13.Bool( victim ) || !( this.locked_atoms != null ) || this.locked_atoms.len != 0 || Lang13.Bool( victim.locked_to ) || !( this.seed != null ) || this.seed.spread != 2 ) {
				return;
			}
			can_grab = true;

			if ( victim is Mob_Living_Carbon_Human ) {
				H = victim;

				if ( H.shoes is Obj_Item_Clothing_Shoes_Magboots && Lang13.Bool( H.shoes.flags & 1024 ) ) {
					can_grab = false;
				}
			}

			if ( can_grab ) {
				this.visible_message( new Txt( "<span class='danger'>Tendrils lash out from " ).the( this ).item().str( " and drag " ).the( victim ).item().str( " in!</span>" ).ToString() );
				((Ent_Dynamic)victim).forceMove( this.loc );
				this.lock_atom( victim );
			}
			return;
		}

		// Function from file: spreading_response.dm
		public void entangle_mob( Ent_Dynamic victim = null ) {
			
			if ( !( victim != null ) || !( this.locked_atoms != null ) || this.locked_atoms.len != 0 || Lang13.Bool( victim.locked_to ) || !( this.seed != null ) || this.seed.spread != 2 ) {
				return;
			}
			this.lock_atom( victim );

			if ( Convert.ToInt32( ((dynamic)victim).stat ) != 2 ) {
				GlobalFuncs.to_chat( victim, "<span class='danger'>The vines " + Rand13.Pick(new object [] { "wind", "tangle", "tighten" }) + " around you!</span>" );
			}
			return;
		}

		// Function from file: spreading_response.dm
		public void manual_unbuckle( dynamic user = null ) {
			Ent_Static M = null;
			dynamic text = null;

			
			if ( this.locked_atoms != null && this.locked_atoms.len != 0 ) {
				M = this.locked_atoms[1];

				if ( !Lang13.Bool( user ) || !( user is Mob ) ) {
					user = M;
				}

				if ( Rand13.PercentChance( ((int)( ( 140 - this.seed.potency <= 20 ? 20 : ( 140 - this.seed.potency >= 100 ? 100 : 140 - this.seed.potency ) ) )) ) ) {
					
					if ( M != user ) {
						M.visible_message( new Txt( "<span class='notice'>" ).item( user.name ).str( " frees " ).item( M.name ).str( " from " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='notice'>" + user.name + " frees you from " + this + ".</span>", "<span class='warning'>You hear shredding and ripping.</span>" );
					} else {
						M.visible_message( "<span class='notice'>" + M.name + " struggles free of " + this + ".</span>", "<span class='notice'>You untangle " + this + " from around yourself.</span>", "<span class='warning'>You hear shredding and ripping.</span>" );
					}
					this.unlock_atom( M );
				} else {
					text = Rand13.Pick(new object [] { "rip", "tear", "pull" });
					((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user.name ).str( " " ).item( text ).str( "s at " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You " ).item( text ).str( " at " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='warning'>You hear shredding and ripping.</span>" );
				}
				((Mob)user).delayNextAttack( 5 );
			}
			return;
		}

		// Function from file: spreading_response.dm
		public void do_chem_inject( Mob_Living_Carbon_Human victim = null, dynamic chance = null ) {
			dynamic rid = null;
			int injecting = 0;
			int drawing = 0;

			
			if ( this.seed.chems != null && this.seed.chems.len != 0 && victim is Mob_Living_Carbon_Human && victim.stat != 2 ) {
				GlobalFuncs.to_chat( victim, "<span class='danger'>You feel something seeping into your skin!</span>" );

				foreach (dynamic _a in Lang13.Enumerate( this.seed.chems )) {
					rid = _a;
					
					injecting = Num13.MinInt( 5, Num13.MaxInt( 1, ((int)( this.seed.potency / 5 )) ) );
					((Reagents)victim.reagents).add_reagent( rid, injecting );
				}
				this.last_special = Game13.time;
			}

			if ( Lang13.Bool( this.seed.hematophage ) ) {
				drawing = Num13.MinInt( 25, victim.vessel.get_reagent_amount( "blood" ) ?1:0 );

				if ( drawing != 0 ) {
					victim.vessel.remove_reagent( "blood", drawing );
					this.last_special = Game13.time;
				}
			}
			return;
		}

		// Function from file: spreading_response.dm
		public void do_carnivorous_bite( Mob_Living_Carbon_Human victim = null, double chance = 0 ) {
			double damage = 0;
			dynamic affecting = null;

			
			if ( !( this.seed != null ) || !( this.seed.carnivorous != 0 ) || !Rand13.PercentChance( ((int)( chance )) ) ) {
				return;
			}

			if ( victim.stat != 2 ) {
				GlobalFuncs.to_chat( victim, new Txt( "<span class='danger'>" ).The( this ).item().str( " horribly twist and mangle your body!</span>" ).ToString() );
			}
			damage = Num13.Floor( GlobalFuncs.triangular_seq( Rand13.Int( ((int)( this.seed.potency * 0.2 )), ((int)( this.seed.potency * 0.6 )) ), 15 ) );

			if ( !( victim is Mob_Living_Carbon_Human ) ) {
				victim.adjustBruteLoss( damage );
				return;
			} else {
				affecting = victim.get_organ( Rand13.Pick(new object [] { "l_foot", "r_foot", "l_leg", "r_leg", "l_hand", "r_hand", "l_arm", "r_arm", "head", "chest", "groin" }) );

				if ( Lang13.Bool( affecting ) && ((Organ_External)affecting).is_existing() && ((Organ_External)affecting).is_organic() ) {
					victim.apply_damage( damage, "brute", affecting );

					if ( Lang13.Bool( affecting.parent ) ) {
						((Organ)affecting.parent).add_autopsy_data( "" + this.plant_damage_noun, damage );
					}
				} else {
					victim.adjustBruteLoss( damage );
				}
			}
			victim.UpdateDamageIcon();
			victim.updatehealth();
			this.last_special = Game13.time;
			return;
		}

		// Function from file: spreading_response.dm
		public void do_sting( Ent_Dynamic victim = null, int chance = 0 ) {
			dynamic rid = null;

			
			if ( !( this.seed != null ) || !( this.seed.stinging != 0 ) || Convert.ToInt32( ((dynamic)victim).stat ) == 2 ) {
				return;
			}

			if ( !( victim is Mob_Living_Carbon_Human ) ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)victim).get_exposed_body_parts() ) && Rand13.PercentChance( chance ) ) {
				
				if ( this.seed.chems != null && this.seed.chems.len != 0 ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.seed.chems )) {
						rid = _a;
						
						((Reagents)victim.reagents).add_reagent( rid, ( 1 <= 5 ? 5 : ( 1 >= this.seed.potency / 10 ? this.seed.potency / 10 : 1 ) ) );
					}
					GlobalFuncs.to_chat( victim, new Txt( "<span class='danger'>You are stung by " ).the( this ).item().str( "!</span>" ).ToString() );
				}
			}
			this.last_special = Game13.time;
			return;
		}

		// Function from file: spreading_response.dm
		public void do_thorns( Ent_Dynamic victim = null, int chance = 0 ) {
			int cuts = 0;
			Organ_External Ex = null;
			double damage = 0;

			
			if ( !( this.seed != null ) || !( this.seed.thorny != 0 ) ) {
				return;
			}

			if ( !( victim is Mob_Living_Carbon_Human ) ) {
				return;
			}
			cuts = 0;

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)victim).organs, typeof(Organ_External) )) {
				Ex = _a;
				

				if ( Ex != null && Ex.is_existing() && Ex.is_organic() ) {
					
					if ( Convert.ToDouble( ((dynamic)victim).getarmor( Ex, "melee" ) ) < 5 && Rand13.PercentChance( ((int)( chance / ( cuts + 1 ) )) ) ) {
						damage = 7;
						((dynamic)victim).apply_damage( damage, "brute", Ex );

						if ( Ex.parent != null ) {
							Ex.parent.add_autopsy_data( "" + this.plant_damage_noun, damage );
						}

						if ( Convert.ToInt32( ((dynamic)victim).stat ) != 2 ) {
							GlobalFuncs.to_chat( victim, new Txt( "<span class='danger'>Your " ).item( Ex.display_name ).str( " is pierced by the thorns on " ).the( this ).item().str( "!</span>" ).ToString() );
						}
						cuts++;

						if ( cuts >= 3 ) {
							break;
						}
					}
				}
			}
			this.last_special = Game13.time;
			return;
		}

		// Function from file: spreading_response.dm
		[VerbInfo( name: "harvest" )]
		[VerbArg( 1, InputType.Mob )]
		public void f_harvest( dynamic user = null ) {
			this.seed.harvest( user, 0.5 );
			this.harvest = false;
			this.age = this.mature_time;
			this.update_icon();
			GlobalVars.plant_controller.add_plant( this );
			return;
		}

		// Function from file: spreading_response.dm
		public bool special_cooldown(  ) {
			return Game13.time >= this.last_special + Num13.MaxInt( 30, ((int)( 100 - this.seed.potency )) );
		}

		// Function from file: spreading_growth.dm
		public void die_off(  ) {
			Tile_Simulated check_turf = null;
			Obj_Effect_Plantsegment neighbor = null;

			
			if ( this.seed != null && this.harvest ) {
				
				if ( this.harvest && Rand13.PercentChance( 10 ) ) {
					this.seed.harvest( this );
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.get_cardinal_neighbors(), typeof(Tile_Simulated) )) {
				check_turf = _b;
				

				if ( !( check_turf is Tile_Simulated ) ) {
					continue;
				}

				foreach (dynamic _a in Lang13.Enumerate( check_turf.contents, typeof(Obj_Effect_Plantsegment) )) {
					neighbor = _a;
					
					neighbor.neighbors.Or( check_turf );
					GlobalVars.plant_controller.add_plant( neighbor );
				}
			}
			Task13.Schedule( 1, (Task13.Closure)(() => {
				
				if ( this != null ) {
					GlobalFuncs.qdel( this );
				}
				return;
			}));
			return;
		}

		// Function from file: spreading_growth.dm
		public void update_neighbors(  ) {
			Tile_Simulated floor = null;
			dynamic T = null;
			Obj_Effect_Plantsegment neighbor = null;

			this.neighbors = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.get_cardinal_neighbors(), typeof(Tile_Simulated) )) {
				floor = _a;
				

				if ( Map13.GetDistance( this.epicenter, floor ) > this.spread_distance ) {
					continue;
				}

				if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Effect_Plantsegment), floor.contents ) ) ) {
					continue;
				}

				if ( floor.density ) {
					
					if ( !( this.seed.chems["pacid"] == null ) ) {
						Task13.Schedule( Rand13.Int( 5, 25 ), (Task13.Closure)(() => {
							floor.ex_act( 3 );
							return;
						}));
					}
					continue;
				}

				if ( !this.Adjacent( floor ) || !floor.Enter( this ) ) {
					continue;
				}
				this.neighbors.Or( floor );
			}
			T = GlobalFuncs.get_turf( this );

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this, 1 ), typeof(Obj_Effect_Plantsegment) )) {
				neighbor = _b;
				
				neighbor.neighbors.Remove( T );
			}
			return;
		}

		// Function from file: spreading_growth.dm
		public ByTable get_cardinal_neighbors(  ) {
			ByTable cardinal_neighbors = null;
			dynamic check_dir = null;
			Tile T = null;

			cardinal_neighbors = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
				check_dir = _a;
				
				T = Map13.GetStep( GlobalFuncs.get_turf( this ), Convert.ToInt32( check_dir ) );

				if ( T is Tile_Simulated ) {
					cardinal_neighbors.Or( T );
				}
			}
			return cardinal_neighbors;
		}

		// Function from file: spreading.dm
		public bool is_mature(  ) {
			return this.health >= this.max_health / 2 && this.age > this.mature_time;
		}

		// Function from file: spreading.dm
		public void check_health(  ) {
			
			if ( this.health <= 0 ) {
				this.die_off();
			}
			return;
		}

		// Function from file: spreading.dm
		public string do_nothing(  ) {
			return "done";
		}

		// Function from file: spreading.dm
		public bool take_damage( dynamic W = null ) {
			dynamic dmg = null;

			
			if ( !Lang13.Bool( W.force ) ) {
				return false;
			}
			dmg = W.force;

			if ( Lang13.Bool( ((Obj)W).is_hot() ) || Lang13.Bool( ((Obj)W).is_sharp() ) && !( this.seed.ligneous != 0 ) ) {
				dmg = dmg * 4;
			}
			this.health -= Convert.ToDouble( dmg );
			this.check_health();
			this.update_icon();
			return false;
		}

		// Function from file: spreading.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic S = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown G = null;

			
			if ( b.a_intent == "help" && GlobalFuncs.is_type_in_list( a, new ByTable(new object [] { typeof(Obj_Item_Weapon_Wirecutters), typeof(Obj_Item_Weapon_Scalpel) }) ) ) {
				
				if ( this.sampled ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " has already been sampled recently.</span>" ).ToString() );
					return null;
				}

				if ( !this.is_mature() ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " is not mature enough to yield a sample yet.</span>" ).ToString() );
					return null;
				}

				if ( !( this.seed != null ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>There is nothing to take a sample from.</span>" );
					return null;
				}

				if ( this.sampled ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='danger'>You cannot take another sample from " ).the( this ).item().str( ".</span>" ).ToString() );
					return null;
				}

				if ( Rand13.PercentChance( 70 ) ) {
					this.sampled = true;
				}
				this.seed.spawn_seed_packet( GlobalFuncs.get_turf( b ) );
				this.health -= Rand13.Int( 3, 5 ) * 5;
				this.sampled = true;
				GlobalVars.plant_controller.add_plant( this );
			} else if ( a is Obj_Item_Weapon_Storage_Bag_Plants ) {
				this.attack_hand( b );
				S = a;

				foreach (dynamic _a in Lang13.Enumerate( Map13.GetTile( Convert.ToInt32( b.x ), Convert.ToInt32( b.y ), Convert.ToInt32( b.z ) ), typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) )) {
					G = _a;
					

					if ( !((Obj_Item_Weapon_Storage)S).can_be_inserted( G ) ) {
						return null;
					}
					((Obj_Item_Weapon_Storage)S).handle_item_insertion( G, true );
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
				this.take_damage( a );
				((Mob)b).delayNextAttack( 10 );
			}
			return null;
		}

		// Function from file: spreading.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int arbitrary_measurement_of_how_lush_I_am_right_now = 0;
			int at_fringe = 0;

			
			if ( this.harvest ) {
				arbitrary_measurement_of_how_lush_I_am_right_now = 3;
			} else if ( this.age > this.mature_time ) {
				arbitrary_measurement_of_how_lush_I_am_right_now = 2;
			} else {
				arbitrary_measurement_of_how_lush_I_am_right_now = 1;
			}
			at_fringe = Map13.GetDistance( this, this.epicenter );

			if ( at_fringe >= Num13.Floor( this.spread_distance * 081 ) ) {
				arbitrary_measurement_of_how_lush_I_am_right_now--;
			}

			if ( at_fringe >= Num13.Floor( this.spread_distance * 061 ) ) {
				arbitrary_measurement_of_how_lush_I_am_right_now--;
			}

			if ( this.health < this.max_health ) {
				arbitrary_measurement_of_how_lush_I_am_right_now -= Num13.Floor( -( this.health - this.max_health ) / ( this.max_health / 3 ) );
			}
			arbitrary_measurement_of_how_lush_I_am_right_now = Num13.MaxInt( 1, arbitrary_measurement_of_how_lush_I_am_right_now );

			switch ((int)( arbitrary_measurement_of_how_lush_I_am_right_now )) {
				case 1:
					this.icon_state = "Light" + Rand13.Int( 1, 3 );
					this.opacity = false;
					break;
				case 2:
					this.icon_state = "Med" + Rand13.Int( 1, 3 );
					this.opacity = false;
					break;
				case 3:
					this.icon_state = "Hvy" + Rand13.Int( 1, 3 );

					if ( !this.limited_growth ) {
						this.opacity = true;
					}
					break;
			}

			if ( this.seed.biolum != 0 && Lang13.Bool( this.seed.biolum_colour ) && this.is_mature() ) {
				this.set_light( Num13.Floor( this.seed.potency / 20 ) + 1, null, this.seed.biolum_colour );
				return null;
			} else {
				this.set_light( 0 );
			}
			return null;
		}

		// Function from file: spreading.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			string traits = null;

			base.examine( (object)(user), size );

			if ( !( this.seed != null ) ) {
				return null;
			}
			traits = "";

			if ( this.seed.carnivorous == 2 ) {
				traits += "<span class='alert'>It's quivering viciously.</span> ";
			}

			if ( this.seed.stinging != 0 ) {
				traits += "<span class='alert'>It's covered in tiny stingers.</span> ";
			}

			if ( this.seed.thorny != 0 ) {
				traits += "<span class='alert'>It's covered in sharp thorns.</span> ";
			}

			if ( this.seed.ligneous != 0 ) {
				traits += "It's a tough and hard vine that can't be easily cut. ";
			}

			if ( Lang13.Bool( this.seed.hematophage ) ) {
				traits += "It's roots are blood red... ";
			}

			if ( Lang13.Bool( traits ) ) {
				GlobalFuncs.to_chat( user, traits );
			}
			return null;
		}

		// Function from file: spreading.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			Obj_Effect_Plantsegment neighbor = null;

			
			if ( GlobalVars.plant_controller != null ) {
				GlobalVars.plant_controller.remove_plant( this );
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 1 ), typeof(Obj_Effect_Plantsegment) )) {
				neighbor = _a;
				
				GlobalVars.plant_controller.add_plant( neighbor );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}