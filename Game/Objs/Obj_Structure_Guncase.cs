// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Guncase : Obj_Structure {

		public string case_type = null;
		public Type gun_category = typeof(Obj_Item_Weapon_Gun);
		public bool open = true;
		public int capacity = 4;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/closet.dmi";
			this.icon_state = "shotguncase";
		}

		// Function from file: guncase.dm
		public Obj_Structure_Guncase ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: guncase.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic O = null;

			
			if ( Lang13.Bool( href_list["retrieve"] ) ) {
				O = Lang13.FindObj( href_list["retrieve"] );

				if ( !Task13.User.canUseTopic( this ) ) {
					return null;
				}

				if ( Task13.User is Mob_Living_Carbon_Human ) {
					
					if ( !Lang13.Bool( Task13.User.get_active_hand() ) ) {
						Task13.User.put_in_hands( O );
					} else {
						O.loc = GlobalFuncs.get_turf( this );
					}
					this.update_icon();
				}
			}
			return null;
		}

		// Function from file: guncase.dm
		public void ShowWindow( dynamic user = null ) {
			string dat = null;
			int? i = null;
			dynamic I = null;
			Browser popup = null;

			dat = "<div class='block'>\n				<h3>Stored Guns</h3>\n				<table align='center'>";
			i = null;
			i = this.contents.len;

			while (( i ??0) >= 1) {
				I = this.contents[i];
				dat += new Txt( "<tr><A href='?src=" ).Ref( this ).str( ";retrieve=" ).Ref( I ).str( "'>" ).item( I.name ).str( "</A><br>" ).ToString();
				i--;
			}
			dat += "</table></div>";
			popup = new Browser( user, "gunlocker", "<div align='center'>" + this.name + "</div>", 350, 300 );
			popup.set_content( dat );
			popup.open( false );
			return;
		}

		// Function from file: guncase.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( Task13.User is Mob_Living_Silicon_Robot || Task13.User is Mob_Living_Carbon_Alien ) {
				return null;
			}

			if ( this.contents.len != 0 && this.open ) {
				this.ShowWindow( a );
			} else {
				this.open = !this.open;
				this.update_icon();
			}
			return null;
		}

		// Function from file: guncase.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( user is Mob_Living_Silicon_Robot || user is Mob_Living_Carbon_Alien ) {
				return null;
			}

			if ( Lang13.Bool( ((dynamic)this.gun_category).IsInstanceOfType( A ) ) ) {
				
				if ( this.contents.len < this.capacity && this.open ) {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					this.contents.Add( A );
					user.WriteMsg( "<span class='notice'>You place " + A + " in " + this + ".</span>" );
					this.update_icon();
					return null;
				}
			}
			this.open = !this.open;
			this.update_icon();
			return null;
		}

		// Function from file: guncase.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			int? i = null;

			this.overlays.Cut();
			i = null;
			i = this.contents.len;

			while (( i ??0) >= 1) {
				this.overlays.Add( new Image( this.icon, null, "" + this.case_type, null, null, ( ( i ??0) - 1 ) * 4 ) );
				i--;
			}

			if ( this.open ) {
				this.overlays.Add( "" + this.icon_state + "_open" );
			} else {
				this.overlays.Add( "" + this.icon_state + "_door" );
			}
			return false;
		}

		// Function from file: guncase.dm
		public override void initialize(  ) {
			Obj_Item I = null;

			base.initialize();

			foreach (dynamic _a in Lang13.Enumerate( this.loc.contents, typeof(Obj_Item) )) {
				I = _a;
				

				if ( Lang13.Bool( ((dynamic)this.gun_category).IsInstanceOfType( I ) ) ) {
					I.loc = this;
				}

				if ( this.contents.len >= this.capacity ) {
					break;
				}
			}
			this.update_icon();
			return;
		}

	}

}