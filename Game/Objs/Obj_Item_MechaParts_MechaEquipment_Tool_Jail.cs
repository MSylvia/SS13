// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Tool_Jail : Obj_Item_MechaParts_MechaEquipment_Tool {

		public ByTable cells = new ByTable().Set( "cell1", new ByTable().Set( "mob", null ).Set( "timer", 0 ) ).Set( "cell2", new ByTable().Set( "mob", null ).Set( "timer", 0 ) );
		public GlobalIterator_MechJail pr_mech_jail = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "biotech=2;combat=4";
			this.energy_drain = 20;
			this.equip_cooldown = 50;
			this.salvageable = false;
			this.icon_state = "mecha_jail";
		}

		// Function from file: sec_tools.dm
		public Obj_Item_MechaParts_MechaEquipment_Tool_Jail ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pr_mech_jail = new GlobalIterator_MechJail( new ByTable(new object [] { this }), false );
			this.pr_mech_jail.set_delay( this.equip_cooldown );
			return;
		}

		// Function from file: sec_tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			TopicInput filter = null;
			dynamic cell = null;

			base.Topic( href, href_list, (object)(hclient) );
			filter = new TopicInput( href, href_list );

			foreach (dynamic _a in Lang13.Enumerate( this.cells )) {
				cell = _a;
				

				if ( Lang13.Bool( filter.get( "eject" + cell ) ) ) {
					this.go_out( this.cells[cell] );
				}
			}
			return null;
		}

		// Function from file: sec_tools.dm
		public override string get_equip_info(  ) {
			string output = null;
			string temp = null;
			dynamic cell = null;
			dynamic celldetails = null;
			dynamic occupant = null;
			dynamic timer = null;

			output = base.get_equip_info();

			if ( Lang13.Bool( output ) ) {
				temp = "";

				foreach (dynamic _a in Lang13.Enumerate( this.cells )) {
					cell = _a;
					
					celldetails = this.cells[cell];
					occupant = celldetails["mob"];
					timer = celldetails["timer"];
					temp += new Txt( "<br />[Occupant: " ).item( ( Lang13.Bool( occupant ) ? "" + occupant + " (Health: " + occupant.health + "%)" : "none" ) ).str( "]<br />|Time left: " ).item( timer * 3 ).str( "|<a href='?src=" ).Ref( this ).str( ";eject" ).item( cell ).str( "=1'>Eject</a>" ).ToString();
				}
				return "" + output + " " + temp;
			}
			return null;
		}

		// Function from file: sec_tools.dm
		public override void detach( dynamic moveto = null ) {
			
			if ( !this.AllFree() ) {
				this.occupant_message( "Unable to detach " + this + " - equipment occupied." );
				return;
			}
			this.pr_mech_jail.stop();
			base.detach( (object)(moveto) ); return;
		}

		// Function from file: sec_tools.dm
		public override bool action( dynamic target = null ) {
			Mob_Living_Carbon_Slime M = null;
			Ent_Static C = null;
			Ent_Static T = null;
			dynamic chosencell = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}

			if ( !( target is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( Lang13.Bool( target.locked_to ) ) {
				this.occupant_message( "" + target + " will not fit into the jail cell because they are buckled to " + target.locked_to + "." );
				return false;
			}

			if ( !Lang13.Bool( this.CellFree() ) ) {
				this.occupant_message( "The jail cells are already occupied" );
				return false;
			}

			if ( !( Lang13.Bool( target.handcuffed ) || Lang13.Bool( target.legcuffed ) ) ) {
				this.occupant_message( "" + target + " must be restrained before they can be properly placed in the holding cell." );
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( target, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == target ) {
					this.occupant_message( "" + target + " will not fit into the jail cell because they have a slime latched onto their head." );
					return false;
				}
			}
			this.occupant_message( "You start putting " + target + " into " + this + "." );
			this.chassis.visible_message( "" + this.chassis + " starts putting " + target + " into the " + this + "." );
			C = this.chassis.loc;
			T = target.loc;

			if ( this.do_after_cooldown( target ) ) {
				
				if ( this.chassis.loc != C || target.loc != T ) {
					return false;
				}

				if ( !Lang13.Bool( this.CellFree() ) ) {
					this.occupant_message( "<font color=\"red\"><B>The jail cells are already occupied!</B></font>" );
					return false;
				}
				((Ent_Dynamic)target).forceMove( this );
				chosencell = this.CellFree();
				chosencell["mob"] = target;
				chosencell["timer"] = 10;

				if ( !Lang13.Bool( this.CellFree() ) ) {
					this.set_ready_state( false );
				}
				target.reset_view( this );

				if ( Lang13.Bool( this.CellFree() ) ) {
					this.pr_mech_jail.start();
				}
				this.occupant_message( "<font color='blue'>" + target + " successfully loaded into " + this + "." );
				this.chassis.visible_message( "" + this.chassis + " loads " + target + " into " + this + "." );
				this.log_message( "" + target + " loaded." );
				return true;
			}
			return false;
		}

		// Function from file: sec_tools.dm
		public bool go_out( dynamic L = null ) {
			Ent_Dynamic ejected = null;

			ejected = L["mob"];

			if ( !( ejected != null ) ) {
				return false;
			}
			ejected.forceMove( GlobalFuncs.get_turf( this ) );
			this.occupant_message( "" + ejected + " ejected." );
			this.log_message( "" + ejected + " ejected." );
			L["timer"] = 0;
			((dynamic)ejected).reset_view();
			L["mob"] = null;
			ejected = null;

			if ( this.AllFree() ) {
				this.pr_mech_jail.stop();
				this.set_ready_state( true );
			}
			return true;
		}

		// Function from file: sec_tools.dm
		public bool AllFree(  ) {
			bool allfree = false;
			dynamic cell = null;
			dynamic celldetails = null;

			allfree = true;

			foreach (dynamic _a in Lang13.Enumerate( this.cells )) {
				cell = _a;
				
				celldetails = this.cells[cell];

				if ( Lang13.Bool( celldetails["mob"] ) ) {
					allfree = false;
					break;
				}
			}
			return allfree;
		}

		// Function from file: sec_tools.dm
		public dynamic CellFree(  ) {
			dynamic cell = null;
			dynamic celldetails = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.cells )) {
				cell = _a;
				
				celldetails = this.cells[cell];

				if ( !Lang13.Bool( celldetails["mob"] ) ) {
					return celldetails;
				}
			}
			return null;
		}

		// Function from file: sec_tools.dm
		public override bool Exit( Ent_Dynamic O = null, Ent_Static newloc = null ) {
			return false;
		}

		// Function from file: sec_tools.dm
		public override void destroy(  ) {
			Ent_Dynamic AM = null;
			ByTable cell = null;
			dynamic celldetails = null;
			Ent_Static occupant = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				AM = _a;
				
				AM.forceMove( GlobalFuncs.get_turf( this ) );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.cells, typeof(ByTable) )) {
				cell = _b;
				
				celldetails = this.cells[cell];

				if ( Lang13.Bool( celldetails["mob"] ) ) {
					occupant = celldetails["mob"];
					occupant.loc = GlobalFuncs.get_turf( this );
				}
			}
			base.destroy(); return;
		}

		// Function from file: sec_tools.dm
		public override bool allow_drop(  ) {
			return false;
		}

		// Function from file: sec_tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( M is Obj_Mecha_Combat_Gygax ) {
					return true;
				}
			}
			return false;
		}

	}

}