// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_SpacevineController : Obj_Effect {

		public ByTable vines = new ByTable();
		public ByTable growth_queue = new ByTable();
		public double spread_multiplier = 5;
		public double spread_cap = 30;
		public ByTable mutations_list = new ByTable();
		public double mutativness = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.invisibility = 101;
		}

		// Function from file: spacevine.dm
		public Obj_Effect_SpacevineController ( dynamic loc = null, ByTable muts = null, int? mttv = null, double? spreading = null ) : base( (object)(loc) ) {
			this.spawn_spacevine_piece( loc, null, muts );
			GlobalVars.SSobj.processing.Or( this );
			GlobalFuncs.init_subtypes( typeof(SpacevineMutation), this.mutations_list );

			if ( mttv != null ) {
				this.mutativness = ( mttv ??0) / 10;
			}

			if ( spreading != null ) {
				this.spread_cap *= ( spreading ??0) / 50;
				this.spread_multiplier /= ( spreading ??0) / 50;
			}
			return;
		}

		// Function from file: spacevine.dm
		public override int? process( dynamic seconds = null ) {
			int length = 0;
			int i = 0;
			ByTable queue_end = null;
			Obj_Effect_Spacevine SV = null;
			SpacevineMutation SM = null;

			
			if ( !( this.vines != null ) ) {
				GlobalFuncs.qdel( this );
				return null;
			}

			if ( !( this.growth_queue != null ) ) {
				GlobalFuncs.qdel( this );
				return null;
			}
			length = 0;
			length = Num13.MinInt( ((int)( this.spread_cap )), Num13.MaxInt( 1, ((int)( this.vines.len / this.spread_multiplier )) ) );
			i = 0;
			queue_end = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.growth_queue, typeof(Obj_Effect_Spacevine) )) {
				SV = _b;
				

				if ( Lang13.Bool( SV.gc_destroyed ) ) {
					continue;
				}
				i++;
				queue_end.Add( SV );
				this.growth_queue.Remove( SV );

				foreach (dynamic _a in Lang13.Enumerate( SV.mutations, typeof(SpacevineMutation) )) {
					SM = _a;
					
					SM.process_mutation( SV );
				}

				if ( SV.energy < 2 ) {
					
					if ( Rand13.PercentChance( 20 ) ) {
						SV.grow();
					}
				} else {
					SV.entangle_mob();
				}
				SV.spread();

				if ( i >= length ) {
					break;
				}
			}
			this.growth_queue = this.growth_queue + queue_end;
			return null;
		}

		// Function from file: spacevine.dm
		public void spawn_spacevine_piece( dynamic location = null, Obj_Effect_Spacevine parent = null, ByTable muts = null ) {
			Obj_Effect_Spacevine SV = null;
			dynamic randmut = null;
			SpacevineMutation M = null;
			SpacevineMutation SM = null;

			SV = new Obj_Effect_Spacevine( location );
			this.growth_queue.Add( SV );
			this.vines.Add( SV );
			SV.master = this;

			if ( muts != null && muts.len != 0 ) {
				SV.mutations.Or( muts );
			}

			if ( parent != null ) {
				SV.mutations.Or( parent.mutations );
				SV.color = parent.color;
				SV.desc = parent.desc;

				if ( Rand13.PercentChance( ((int)( this.mutativness )) ) ) {
					SV.mutations.Or( Rand13.PickFromTable( this.mutations_list ) );
					randmut = Rand13.PickFromTable( SV.mutations );
					SV.color = randmut.hue;
					SV.desc = "An extremely expansionistic species of vine. These are ";

					foreach (dynamic _a in Lang13.Enumerate( SV.mutations, typeof(SpacevineMutation) )) {
						M = _a;
						
						SV.desc += "" + M.name + " ";
					}
					SV.desc += "vines.";
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( SV.mutations, typeof(SpacevineMutation) )) {
				SM = _b;
				
				SM.on_birth( SV );
			}
			return;
		}

		// Function from file: spacevine.dm
		public override dynamic Destroy(  ) {
			GlobalVars.SSobj.processing.Remove( this );
			return base.Destroy();
		}

		// Function from file: spacevine.dm
		public override void singularity_pull( Obj_Singularity S = null, int? current_size = null ) {
			return;
		}

		// Function from file: spacevine.dm
		public override double singularity_act( int? current_size = null, Obj_Singularity S = null ) {
			return 0;
		}

		// Function from file: spacevine.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			return false;
		}

	}

}