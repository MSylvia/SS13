// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Effect_Foam_Fire : Obj_Effect_Effect_Foam {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "mfoam";
		}

		// Function from file: effect_system.dm
		public Obj_Effect_Effect_Foam_Fire ( dynamic loc = null, dynamic R = null ) : base( (object)(loc), (object)(R) ) {
			string ccolor = null;
			double? savedtemp = null;
			dynamic T = null;
			GasMixture old_air = null;
			dynamic lowertemp = null;
			dynamic T2 = null;
			GasMixture local_air = null;

			this.reagents = R;
			this.reagents.my_atom = this;
			ccolor = GlobalFuncs.mix_color_from_reagents( this.reagents.reagent_list );

			if ( Lang13.Bool( ccolor ) ) {
				this.icon += ccolor;
			}

			if ( ((Reagents)this.reagents).has_reagent( "water" ) ) {
				T = GlobalFuncs.get_turf( this );
				old_air = ((Ent_Static)T).return_air();
				savedtemp = old_air.temperature;

				if ( T is Tile_Simulated && ( savedtemp ??0) > ( this.lowest_temperature ??0) ) {
					lowertemp = ((Ent_Static)T).remove_air( ((GasMixture)T.air).f_total_moles() );
					lowertemp.temperature = Num13.MaxInt( Num13.MinInt( Convert.ToInt32( lowertemp.temperature - 500 ), Convert.ToInt32( lowertemp.temperature / 2 ) ), 0 );
					lowertemp.react();
					((Ent_Static)T).assume_air( lowertemp );
				}
			}
			Task13.Schedule( 3, (Task13.Closure)(() => {
				this.process();
				return;
			}));
			Task13.Schedule( 120, (Task13.Closure)(() => {
				GlobalVars.processing_objects.Remove( this );
				Task13.Sleep( 30 );
				T2 = GlobalFuncs.get_turf( this );
				local_air = ((Ent_Static)T2).return_air();
				Icon13.Flick( "" + this.icon_state + "-disolve", this );

				if ( ( local_air.temperature ??0) < ( this.lowest_temperature ??0) && ( savedtemp ??0) > ( this.lowest_temperature ??0) ) {
					local_air.temperature = this.lowest_temperature;
				} else if ( ( local_air.temperature ??0) < ( this.lowest_temperature ??0) && ( savedtemp ??0) < ( this.lowest_temperature ??0) && Lang13.Bool( savedtemp ) ) {
					local_air.temperature = savedtemp;
				}
				Task13.Sleep( 5 );
				GlobalFuncs.qdel( this );
				return;
			}));
			this.AddToProfiler();
			return;
		}

		// Function from file: effect_system.dm
		public override dynamic process(  ) {
			
			if ( --this.amount < 0 ) {
				return null;
			}
			return null;
		}

	}

}