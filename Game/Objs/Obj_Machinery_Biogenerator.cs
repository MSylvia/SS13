// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Biogenerator : Obj_Machinery {

		public double speed_coefficient = 15;
		public int biomass_coefficient = 9;
		public bool processing = false;
		public dynamic beaker = null;
		public double points = 0;
		public string menustat = "menu";
		public ByTable recipes = new ByTable( 0 );
		public ByTable recipe_categories = new ByTable( 0 );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 40;
			this.machine_flags = 30;
			this.light_color = "#7DE1E1";
			this.light_range_on = 3;
			this.light_power_on = 2;
			this.use_auto_lights = true;
			this.icon = "icons/obj/biogenerator.dmi";
			this.icon_state = "biogen-stand";
		}

		// Function from file: biogenerator.dm
		public Obj_Machinery_Biogenerator ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic biotype = null;
			dynamic recipe = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.create_reagents( 1000 );
			this.beaker = new Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Large( this );
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Biogenerator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(BiogenRecipe) ) )) {
				biotype = _a;
				
				recipe = Lang13.Call( biotype );

				if ( recipe.id == "" ) {
					continue;
				}

				if ( !this.recipe_categories.Contains( recipe.category ) ) {
					this.recipe_categories[recipe.category] = new ByTable();
				}
				this.recipe_categories[recipe.category] += recipe.id;
				this.recipes[recipe.id] = recipe;
			}
			return;
		}

		// Function from file: biogenerator.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}
			Task13.User.set_machine( this );

			dynamic _a = href_list["action"]; // Was a switch-case, sorry for the mess.
			if ( _a=="activate" ) {
				this.activate();
			} else if ( _a=="detach" ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					this.beaker.loc = this.loc;
					this.beaker = null;
					this.update_icon();
				}
			} else if ( _a=="create" ) {
				this.create_product( href_list["item"], String13.ParseNumber( href_list["num"] ) );
			} else if ( _a=="menu" ) {
				this.menustat = "menu";
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: biogenerator.dm
		public bool create_product( dynamic item = null, double? num = null ) {
			BiogenRecipe recipe = null;
			double? i = null;

			recipe = this.recipes[item];

			if ( !( recipe != null ) ) {
				return false;
			}

			if ( !( recipe.other_amounts + 1 ).Contains( num ) ) {
				return false;
			}

			if ( this.check_cost( recipe.cost * ( num ??0) ) ) {
				return false;
			}

			if ( Lang13.Bool( recipe.reagent ) ) {
				((Reagents)this.beaker.reagents).add_reagent( recipe.reagent, recipe.amount_per_unit * ( num ??0) );
			} else if ( Lang13.Bool( ((dynamic)recipe.result).IsSubclassOf( typeof(Obj_Item_Stack) ) ) ) {
				GlobalFuncs.drop_stack( recipe.result, this.loc, ( num ??0) * recipe.amount_per_unit, 1 );
			} else {
				i = null;
				i = 0;

				while (( i ??0) < ( num ??0)) {
					Lang13.Call( recipe.result, this.loc );
					i++;
				}
			}
			this.processing = false;
			this.menustat = "complete";
			this.update_icon();
			return true;
		}

		// Function from file: biogenerator.dm
		public bool check_cost( double cost = 0 ) {
			
			if ( cost > this.points ) {
				this.menustat = "nopoints";
				return true;
			} else {
				this.points -= cost;
				this.processing = true;
				this.update_icon();
				this.updateUsrDialog();
				Task13.Sleep( 30 );
			}
			return false;
		}

		// Function from file: biogenerator.dm
		public void activate(  ) {
			int S = 0;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown I = null;

			
			if ( Task13.User.stat != 0 ) {
				return;
			}

			if ( this.stat != 0 ) {
				return;
			}

			if ( this.processing ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The biogenerator is in the process of working.</span>" );
				return;
			}
			S = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) )) {
				I = _a;
				
				S += 5;

				if ( ( ((Reagents)I.reagents).get_reagent_amount( "nutriment" ) ?1:0) < 0.1 ) {
					this.points += 1;
				} else {
					this.points += ( ((Reagents)I.reagents).get_reagent_amount( "nutriment" ) ?1:0) * this.biomass_coefficient;
				}
				GlobalFuncs.qdel( I );
			}

			if ( S != 0 ) {
				this.processing = true;
				this.update_icon();
				this.updateUsrDialog();
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/blender.ogg", 50, 1 );
				this.f_use_power( S * 30 );
				Task13.Sleep( ((int)( this.speed_coefficient * ( S + 15 ) )) );
				this.processing = false;
				this.update_icon();
			} else {
				this.menustat = "void";
			}
			return;
		}

		// Function from file: biogenerator.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.interact( a );
			return null;
		}

		// Function from file: biogenerator.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			dynamic cat = null;
			dynamic rid = null;
			BiogenRecipe recipe = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			((Mob)user).set_machine( this );
			dat = "<TITLE>Biogenerator</TITLE>Biogenerator:<BR>";

			if ( this.processing ) {
				dat += "<FONT COLOR=red>Biogenerator is processing! Please wait...</FONT>";
			} else {
				dat += "Biomass: " + this.points + " points.<HR>";

				switch ((string)( this.menustat )) {
					case "menu":
						
						if ( Lang13.Bool( this.beaker ) ) {
							dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";action=activate'>Activate Biogenerator!</A><BR>\n						<A href='?src=" ).Ref( this ).str( ";action=detach'>Detach Container</A><BR><BR>" ).ToString();

							foreach (dynamic _b in Lang13.Enumerate( this.recipe_categories )) {
								cat = _b;
								
								dat += "<h2>" + cat + "</h2><ul>";

								foreach (dynamic _a in Lang13.Enumerate( this.recipe_categories[cat] )) {
									rid = _a;
									
									recipe = this.recipes[rid];
									dat += recipe.Render( this );
								}
								dat += "</ul>";
							}
						} else {
							dat += "<BR><FONT COLOR=red>No beaker inside. Please insert a beaker.</FONT><BR>";
						}
						break;
					case "nopoints":
						dat += new Txt( "You do not have biomass to create products.<BR>Please, put growns into reactor and activate it.<BR>\n					<A href='?src=" ).Ref( this ).str( ";action=menu'>Return to menu</A>" ).ToString();
						break;
					case "complete":
						dat += new Txt( "Operation complete.<BR>\n					<A href='?src=" ).Ref( this ).str( ";action=menu'>Return to menu</A>" ).ToString();
						break;
					case "void":
						dat += new Txt( "<FONT COLOR=red>Error: No growns inside.</FONT><BR>Please, put growns into reactor.<BR>\n					<A href='?src=" ).Ref( this ).str( ";action=menu'>Return to menu</A>" ).ToString();
						break;
				}
			}
			Interface13.Browse( user, dat, "window=biogenerator" );
			GlobalFuncs.onclose( user, "biogenerator" );
			return null;
		}

		// Function from file: biogenerator.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			
			if ( Lang13.Bool( this.beaker ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='rose'>You can't open " ).the( this ).item().str( "'s maintenance panel while a beaker is loaded.</span>" ).ToString() );
				return 0;
			}

			if ( base.togglePanelOpen( (object)(toggleitem), (object)(user), (object)(CC) ) != 0 ) {
				
				if ( this.panel_open ) {
					this.overlays.Add( "biogen-open" );
				} else {
					this.overlays.Remove( "biogen-open" );
				}
				this.update_icon();
				return 1;
			}
			return 0;
		}

		// Function from file: biogenerator.dm
		public override int crowbarDestroy( dynamic user = null ) {
			
			if ( Lang13.Bool( this.beaker ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>A beaker is loaded, you cannot deconstruct " ).the( this ).item().str( ".</span>" ).ToString() );
				return 0;
			}
			return base.crowbarDestroy( (object)(user) );
		}

		// Function from file: biogenerator.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			int i = 0;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown G = null;
			dynamic B = null;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown G2 = null;
			int i2 = 0;
			Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown G3 = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			} else if ( a is Obj_Item_Weapon_ReagentContainers_Glass ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The biogenerator already occuped.</span>" );
				} else if ( this.panel_open ) {
					GlobalFuncs.to_chat( b, "<span class='rose'>The biogenerator's maintenance panel must be closed first.</span>" );
				} else if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.beaker = a;
					this.updateUsrDialog();
				}
			} else if ( this.processing ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>The biogenerator is currently processing.</span>" );
			} else if ( a is Obj_Item_Weapon_Storage_Bag_Plants ) {
				i = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) )) {
					G = _a;
					
					i++;
				}

				if ( i >= 20 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The biogenerator is already full! Activate it.</span>" );
				} else {
					B = a;

					foreach (dynamic _b in Lang13.Enumerate( a.contents, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) )) {
						G2 = _b;
						
						((Obj_Item_Weapon_Storage)B).remove_from_storage( G2, this );
						i++;

						if ( i >= 20 ) {
							GlobalFuncs.to_chat( b, "<span class='notice'>You fill the biogenerator to its capacity.</span>" );
							break;
						}
					}

					if ( i < 20 ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You empty the plant bag into the biogenerator.</span>" );
					}
				}
			} else if ( !( a is Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You cannot put this in " + this.name + "</span>" );
			} else {
				i2 = 0;

				foreach (dynamic _c in Lang13.Enumerate( this.contents, typeof(Obj_Item_Weapon_ReagentContainers_Food_Snacks_Grown) )) {
					G3 = _c;
					
					i2++;
				}

				if ( i2 >= 20 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The biogenerator is full! Activate it.</span>" );
				} else if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>You put " + a.name + " in " + this.name + "</span>" );
				}
			}
			this.update_icon();
			return null;
		}

		// Function from file: biogenerator.dm
		public override dynamic RefreshParts(  ) {
			int manipcount = 0;
			int lasercount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			manipcount = 0;
			lasercount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_Manipulator ) {
					manipcount += SP.rating;
				}

				if ( SP is Obj_Item_Weapon_StockParts_MicroLaser ) {
					lasercount += SP.rating;
				}
			}
			this.speed_coefficient = 2 / manipcount;
			this.biomass_coefficient = lasercount * 3;
			return null;
		}

		// Function from file: biogenerator.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( !Lang13.Bool( this.beaker ) ) {
				this.icon_state = "biogen-empty";
			} else if ( !this.processing ) {
				this.icon_state = "biogen-stand";
			} else {
				this.icon_state = "biogen-work";
			}
			return null;
		}

		// Function from file: biogenerator.dm
		public override void on_reagent_change(  ) {
			this.update_icon();
			return;
		}

	}

}