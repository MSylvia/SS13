// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Coin : Obj_Item_Weapon {

		public bool? string_attached = null;
		public string material = "$iron";
		public double credits = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.throwforce = 0;
			this.w_class = 1;
			this.icon_state = "coin";
		}

		// Function from file: ores_coins.dm
		public Obj_Item_Weapon_Coin ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pixel_x = Rand13.Int( -8, 8 );
			this.pixel_y = Rand13.Int( -8, 0 );
			return;
		}

		// Function from file: ores_coins.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic CC = null;
			Obj_Item_Stack_CableCoil CC2 = null;

			
			if ( a is Obj_Item_Stack_CableCoil ) {
				CC = a;

				if ( this.string_attached == true ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>There already is a string attached to this coin.</span>" );
					return null;
				}

				if ( Convert.ToDouble( CC.amount ) <= 0 ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>This cable coil appears to be empty.</span>" );
					GlobalFuncs.qdel( CC );
					CC = null;
					return null;
				}
				this.overlays.Add( new Image( "icons/obj/items.dmi", "coin_string_overlay" ) );
				this.string_attached = true;
				GlobalFuncs.to_chat( b, "<span class='notice'>You attach a string to the coin.</span>" );
				((Obj_Item_Stack)CC).use( 1 );
			} else if ( a is Obj_Item_Weapon_Wirecutters ) {
				
				if ( !( this.string_attached == true ) ) {
					base.attackby( (object)(a), (object)(b), (object)(c) );
					return null;
				}
				CC2 = new Obj_Item_Stack_CableCoil( b.loc );
				CC2.amount = 1;
				CC2.update_icon();
				this.overlays = new ByTable();
				this.string_attached = null;
				GlobalFuncs.to_chat( b, "<span class='notice'>You detach the string from the coin.</span>" );
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: ores_coins.dm
		public override int recycle( Game_Data rec = null ) {
			
			if ( this.material == null ) {
				return 0;
			}
			((dynamic)rec).addAmount( this.material, 0.2 );
			return this.w_type;
		}

	}

}