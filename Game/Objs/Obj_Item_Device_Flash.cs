// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Flash : Obj_Item_Device {

		public double times_used = 0;
		public bool broken = false;
		public int last_used = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "flash";
			this.throwforce = 5;
			this.w_class = 1;
			this.throw_speed = 4;
			this.throw_range = 10;
			this.origin_tech = "magnets=2;combat=1";
			this.min_harm_label = 15;
			this.harm_label_examine = new ByTable(new object [] { "<span class='info'>A label is on the bulb, but doesn't cover it.</span>", "<span class='warning'>A label covers the bulb!</span>" });
			this.icon_state = "flash";
		}

		public Obj_Item_Device_Flash ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: flash.dm
		public override dynamic emp_act( int severity = 0 ) {
			Ent_Static M = null;
			dynamic safety = null;
			dynamic O = null;

			
			if ( this.broken ) {
				return null;
			}
			this.flash_recharge();

			dynamic _b = this.times_used; // Was a switch-case, sorry for the mess.
			if ( 0<=_b&&_b<=5 ) {
				
				if ( Rand13.PercentChance( ((int)( this.times_used * 2 )) ) ) {
					this.broken = true;
					this.icon_state = "flashburnt";
					return null;
				}
				this.times_used++;

				if ( this.loc is Mob_Living_Carbon && this.harm_labeled < this.min_harm_label ) {
					M = this.loc;
					safety = ((dynamic)M).eyecheck();

					if ( Convert.ToDouble( safety ) <= 0 ) {
						((dynamic)M).Weaken( 10 );
						Icon13.Flick( "e_flash", ((dynamic)M).flash );

						foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, M ) )) {
							O = _a;
							
							O.show_message( "<span class='disarm'>" + M + " is blinded by the flash!</span>" );
						}
					}
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: flash.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			flag = flag ?? 0;
			emp = emp ?? false;

			Dynamic_Overlay animation = null;
			Mob_Living_Carbon M = null;
			Obj_Item_Weapon_CloakingDevice S = null;
			int oldalpha = 0;
			int safety = 0;

			
			if ( !Lang13.Bool( user ) || !this.clown_check( user ) ) {
				return null;
			}

			if ( this.broken ) {
				user.show_message( "<span class='warning'>The " + this.name + " is broken</span>", 2 );
				return null;
			}
			this.flash_recharge();

			dynamic _a = this.times_used; // Was a switch-case, sorry for the mess.
			if ( 0<=_a&&_a<=5 ) {
				
				if ( Rand13.PercentChance( ((int)( this.times_used * 2 )) ) ) {
					this.broken = true;
					GlobalFuncs.to_chat( user, "<span class='warning'>The bulb has burnt out!</span>" );
					this.icon_state = "flashburnt";
					return null;
				}
				this.times_used++;
			} else {
				user.show_message( "<span class='warning'>*click* *click*</span>", 2 );
				return null;
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/flash.ogg", 100, 1 );

			if ( this.harm_labeled >= this.min_harm_label ) {
				return null;
			}
			Icon13.Flick( "flash2", this );

			if ( Lang13.Bool( user ) && user is Mob_Living_Silicon_Robot ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					animation = new Dynamic_Overlay( user.loc );
					animation.layer = Convert.ToDouble( user.layer + 1 );
					animation.icon_state = "blank";
					animation.icon = "icons/mob/mob.dmi";
					animation.master = user;
					Icon13.Flick( "blspell", animation );
					Task13.Sleep( 5 );
					GlobalFuncs.qdel( animation );
					animation = null;
					return;
				}));
			}

			foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewersExcludeThis( null, 3 ), typeof(Mob_Living_Carbon) )) {
				M = _c;
				

				if ( Rand13.PercentChance( 50 ) ) {
					
					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_CloakingDevice), M ) ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( M, typeof(Obj_Item_Weapon_CloakingDevice) )) {
							S = _b;
							
							S.active = false;
							S.icon_state = "shield0";
						}
					}
				}

				if ( M.alpha < 255 ) {
					oldalpha = M.alpha;

					if ( Rand13.PercentChance( 80 ) ) {
						M.alpha = 255;
						M.visible_message( "<span class='warning'>" + M + " suddenly becomes fully visible!</span>", "<span class='warning'>You see a bright flash of light and are suddenly fully visible again.</span>" );
						Task13.Schedule( 50, (Task13.Closure)(() => {
							M.alpha = oldalpha;
							return;
						}));
					}
				}
				safety = M.eyecheck();

				if ( !( safety != 0 ) ) {
					
					if ( !Lang13.Bool( M.blinded ) ) {
						Icon13.Flick( "flash", M.flash );
					}
				}
			}
			return null;
		}

		// Function from file: flash.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			bool? flashfail = null;
			dynamic Subject = null;
			dynamic safe = null;
			int result = 0;
			Dynamic_Overlay animation = null;

			
			if ( !Lang13.Bool( user ) || !Lang13.Bool( M ) ) {
				return null;
			}
			M.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has been flashed (attempt) with " + this.name + " by " + GlobalFuncs.key_name( user ) + "</font>" );
			user.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Used the " + this.name + " to flash " + GlobalFuncs.key_name( M ) + "</font>" );
			GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + GlobalFuncs.key_name( user ) + " Used the " + this.name + " to flash " + GlobalFuncs.key_name( M ) + "</font>" ) ) );

			if ( !( user is Mob_Living_Carbon ) ) {
				M.LAssailant = null;
			} else {
				M.LAssailant = user;
			}

			if ( !this.clown_check( user ) ) {
				return null;
			}

			if ( this.broken ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " is broken.</span>" ).ToString() );
				return null;
			}
			this.flash_recharge();

			dynamic _a = this.times_used; // Was a switch-case, sorry for the mess.
			if ( 0<=_a&&_a<=5 ) {
				this.last_used = Game13.time;

				if ( Rand13.PercentChance( ((int)( this.times_used )) ) ) {
					this.broken = true;
					GlobalFuncs.to_chat( user, "<span class='warning'>The bulb has burnt out!</span>" );
					this.icon_state = "flashburnt";
					return null;
				}
				this.times_used++;
			} else {
				GlobalFuncs.to_chat( user, "<span class='warning'>*click* *click*</span>" );
				return null;
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( user ), "sound/weapons/flash.ogg", 100, 1 );
			flashfail = this.harm_labeled >= this.min_harm_label;

			if ( M is Mob_Living_Carbon ) {
				Subject = M;
				safe = Subject.eyecheck();

				if ( Convert.ToDouble( safe ) <= 0 ) {
					((Mob)Subject).Weaken( 10 );
					Icon13.Flick( "e_flash", Subject.flash );

					if ( Lang13.Bool( user.mind ) && false ) {
						
						if ( Subject is Mob_Living_Carbon_Human ) {
							
							if ( Convert.ToInt32( Subject.stat ) != 2 ) {
								((Mob)Subject).mind_initialize();
								result = ((GameMode)GlobalVars.ticker.mode).add_revolutionary( Subject.mind );

								if ( result == 1 ) {
									GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( user ) + " has converted " + GlobalFuncs.key_name( Subject ) + " to the revolution at " + GlobalFuncs.formatLocation( Subject.loc ) );
									Subject.mind.has_been_rev = GlobalVars.TRUE;
								} else if ( result == -1 || Subject.mind.has_been_rev == true ) {
									GlobalFuncs.to_chat( user, "<span class=\"warning\">This mind seems resistant to the flash!</span>" );
								} else if ( result == -2 ) {
									GlobalFuncs.to_chat( user, "<span class=\"warning\">This mind seems resistant to the flash! (OOC INFO: REVOLUTIONARY JOBBANNED)</span>" );
								} else if ( result == -3 ) {
									GlobalFuncs.to_chat( user, "<span class=\"warning\">Something seems to be blocking the flash!</span>" );
								}
							} else {
								GlobalFuncs.to_chat( user, "<span class=\"warning\">This mind is so vacant that it is not susceptible to influence!</span>" );
							}
						}
					}
				} else {
					flashfail = GlobalVars.TRUE;
				}
			} else if ( M is Mob_Living_Silicon ) {
				((Mob)M).Weaken( Rand13.Int( 5, 10 ) );
			} else {
				flashfail = GlobalVars.TRUE;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					animation = new Dynamic_Overlay( GlobalFuncs.get_turf( user ) );
					animation.layer = Convert.ToDouble( user.layer + 1 );
					animation.icon_state = "blank";
					animation.icon = "icons/mob/mob.dmi";
					animation.master = user;
					Icon13.Flick( "blspell", animation );
					Task13.Sleep( 5 );
					GlobalFuncs.qdel( animation );
					return;
				}));
			}

			if ( !( flashfail == true ) ) {
				Icon13.Flick( "flash2", this );

				if ( !( M is Mob_Living_Silicon ) ) {
					((Ent_Static)user).visible_message( "<span class=\"disarm\">" + user + " blinds " + M + " with the flash!</span>" );
				} else {
					((Ent_Static)user).visible_message( "<span class=\"warning\">" + user + " overloads " + M + "'s sensors with the flash!</span>" );
				}
			} else {
				((Ent_Static)user).visible_message( "<span class=\"notice\">" + user + " fails to blind " + M + " with the flash!</span>" );
			}
			return null;
		}

		// Function from file: flash.dm
		public void flash_recharge(  ) {
			int? i = null;

			i = null;
			i = 0;

			while (( i ??0) < 3) {
				
				if ( this.last_used + 600 > Game13.time ) {
					break;
				}
				this.last_used += 600;
				this.times_used -= 2;
				i++;
			}
			this.last_used = Game13.time;
			this.times_used = Num13.MaxInt( 0, Num13.Floor( this.times_used ) );
			return;
		}

		// Function from file: flash.dm
		public bool clown_check( dynamic user = null ) {
			
			if ( Lang13.Bool( user ) && false && Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " slips out of your hand.</span>" ).ToString() );
				user.drop_item();
				return false;
			}
			return true;
		}

	}

}