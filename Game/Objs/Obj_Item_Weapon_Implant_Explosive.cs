// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implant_Explosive : Obj_Item_Weapon_Implant {

		public dynamic phrase = "supercalifragilisticexpialidocious";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state = "implant_evil";
		}

		public Obj_Item_Weapon_Implant_Explosive ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: implant.dm
		public void small_boom(  ) {
			
			if ( this.imp_in is Mob_Living_Carbon ) {
				((Ent_Static)this.imp_in).visible_message( "<span class='warning'>Something beeps inside " + this.imp_in + ( Lang13.Bool( this.part ) ? "'s " + this.part.display_name : "" ) + "!</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/countdown.ogg", 75, 1, -3 );
				Task13.Schedule( 25, (Task13.Closure)(() => {
					
					if ( this.imp_in is Mob_Living_Carbon_Human && Lang13.Bool( this.part ) ) {
						
						if ( this.part is Organ_External_Chest || this.part is Organ_External_Groin || this.part is Organ_External_Head ) {
							((Organ_External)this.part).createwound( "bruise", 60 );
						} else {
							((Organ_External)this.part).droplimb( 1 );
						}
					}
					GlobalFuncs.explosion( GlobalFuncs.get_turf( this.imp_in ), -1, -1, 2, 3, 3 );
					GlobalFuncs.qdel( this );
					return;
				}));
			}
			return;
		}

		// Function from file: implant.dm
		public override bool islegal(  ) {
			return false;
		}

		// Function from file: implant.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( this.malfunction != 0 ) {
				return null;
			}
			this.malfunction = 1;

			switch ((int)( severity )) {
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.small_boom();
					}
					break;
				case 1:
					
					if ( Rand13.PercentChance( 70 ) ) {
						
						if ( Rand13.PercentChance( 50 ) ) {
							this.small_boom();
						} else if ( Rand13.PercentChance( 50 ) ) {
							this.activate();
						} else {
							this.meltdown();
						}
					}
					break;
			}
			Task13.Schedule( 20, (Task13.Closure)(() => {
				this.malfunction--;
				return;
			}));
			return null;
		}

		// Function from file: implant.dm
		[VerbInfo( name: "implanted" )]
		[VerbArg( 1, InputType.Mob )]
		public override bool f_implanted( dynamic M = null, dynamic user = null ) {
			ByTable replacechars = null;

			this.phrase = Interface13.Input( "Choose activation phrase:", null, null, null, null, InputType.Str );
			replacechars = new ByTable().Set( "'", "" ).Set( "\"", "" ).Set( ">", "" ).Set( "<", "" ).Set( "(", "" ).Set( ")", "" );
			this.phrase = GlobalFuncs.sanitize_simple( this.phrase, replacechars );
			Task13.User.mind.store_memory( "Explosive implant in " + M + " can be activated by saying something containing the phrase ''" + this.phrase + "'', <B>say " + this.phrase + "</B> to attempt to activate." );
			GlobalFuncs.to_chat( Task13.User, "The implanted explosive implant in " + M + " can be activated by saying something containing the phrase ''" + this.phrase + "'', <B>say " + this.phrase + "</B> to attempt to activate." );
			this.addHear();
			return true;
		}

		// Function from file: implant.dm
		public override bool activate( dynamic cause = null ) {
			dynamic M = null;
			dynamic T = null;

			
			if ( this.malfunction == 2 ) {
				return false;
			}

			if ( this.imp_in is Mob_Living_Carbon ) {
				M = this.imp_in;
				GlobalFuncs.message_admins( "Explosive implant triggered in " + M + " (" + M.key + "). (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + M.x + ";Y=" + M.y + ";Z=" + M.z + "'>JMP</a>) " );
				GlobalVars.diary.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]GAME: " + ( "Explosive implant triggered in " + M + " (" + M.key + ")." ) ) );
				T = GlobalFuncs.get_turf( M );
				GlobalFuncs.explosion( T, 1, 3, 4, 6 );
				((Tile)T).hotspot_expose( 3500, 125, null, true );
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: implant.dm
		public override bool trigger( dynamic emote = null, Mob_Living_Carbon_Human source = null ) {
			
			if ( emote == "deathgasp" ) {
				this.activate();
			}
			return false;
		}

		// Function from file: implant.dm
		public override void hear( dynamic message = null, dynamic source = null ) {
			ByTable replacechars = null;

			replacechars = new ByTable().Set( "'", "" ).Set( "\"", "" ).Set( ">", "" ).Set( "<", "" ).Set( "(", "" ).Set( ")", "" );
			message = GlobalFuncs.sanitize_simple( message, replacechars );

			if ( String13.FindIgnoreCase( message, this.phrase, 1, 0 ) != 0 ) {
				this.activate();
			}
			return;
		}

		// Function from file: implant.dm
		public override dynamic Hear( dynamic speech = null, dynamic rendered_speech = null, params object[] _ ) {
			ByTable _args = new ByTable( new object[] { speech, rendered_speech } ).Extend(_);

			
			if ( _args[2] == null ) {
				_args[2] = "";
			}
			this.hear( _args[1].message );
			return null;
		}

		// Function from file: implant.dm
		public override string get_data(  ) {
			string dat = null;

			dat = @"
<b>Implant Specifications:</b><BR>
<b>Name:</b> Robust Corp RX-78 Intimidation Class Implant<BR>
<b>Life:</b> Activates upon codephrase or detected death.<BR>
<b>Important Notes:</b> Explodes<BR>
<HR>
<b>Implant Details:</b><BR>
<b>Function:</b> Contains a compact, electrically detonated explosive that detonates upon receiving a specially encoded signal or upon host death.<BR>
<b>Special Features:</b> Explodes<BR>
<b>Integrity:</b> Implant will occasionally be degraded by the body's immune system and thus will occasionally malfunction.";
			return dat;
		}

	}

}