// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Glue : Obj_Item_Weapon {

		public bool spent = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.icon_state = "glue0";
		}

		public Obj_Item_Weapon_Glue ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: clown_items.dm
		public void apply_glue( dynamic target = null ) {
			Task13.Source = null;
			target.cant_drop++;

			if ( -1 > 0 ) {
				Task13.Schedule( -1, (Task13.Closure)(() => {
					target.cant_drop--;
					return;
				}));
			}
			return;
		}

		// Function from file: clown_items.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			
			if ( !( flag == true ) ) {
				return false;
			}

			if ( this.spent ) {
				user.WriteMsg( "<span class='warning'>There's no glue left in the bottle.</span>" );
				return false;
			}

			if ( !( A is Obj_Item ) ) {
				user.WriteMsg( "<span class='warning'>That would be such a waste of glue.</span>" );
				return false;
			} else {
				
				if ( A is Obj_Item_Stack ) {
					user.WriteMsg( new Txt( "<span class='warning'>There's not enough glue in " ).the( this ).item().str( " to cover the whole " ).item( A ).str( "!</span>" ).ToString() );
					return false;
				}

				if ( Lang13.Bool( A.v_abstract ) ) {
					return false;
				}
			}
			user.WriteMsg( new Txt( "<span class='info'>You gently apply the whole " ).item( this ).str( " to " ).the( A ).item().str( ".</span>" ).ToString() );
			this.spent = true;
			this.update_icon();
			this.apply_glue( A );
			return false;
		}

		// Function from file: clown_items.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );
			this.icon_state = "glue" + this.spent;
			return null;
		}

		// Function from file: clown_items.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.Adjacent( user ) ) {
				user.show_message( "<span class='info'>The label reads:</span><br><span class='notice'>1) Apply glue to the surface of an object<br>2) Apply object to human flesh</span>", 1 );
			}
			return null;
		}

	}

}