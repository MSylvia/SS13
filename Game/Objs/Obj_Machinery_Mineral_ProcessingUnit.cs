// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_ProcessingUnit : Obj_Machinery_Mineral {

		public Ent_Dynamic mover = null;
		public int frequency = 1367;
		public dynamic id_tag = null;
		public RadioFrequency radio_connection = null;
		public Materials ore = null;
		public ByTable recipes = new ByTable( 0 );
		public bool on = false;
		public int in_dir = 1;
		public int out_dir = 2;
		public dynamic sheets_per_tick = 100;
		public double credits = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 50;
			this.active_power_usage = 500;
			this.machine_flags = 134;
			this.light_power_on = 2;
			this.light_range_on = 3;
			this.light_color = "#FA9632";
			this.icon = "icons/obj/machines/mining_machines.dmi";
			this.icon_state = "furnace_o";
		}

		// Function from file: machine_processing.dm
		public Obj_Machinery_Mineral_ProcessingUnit ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic recipe = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_ProcessingUnit(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MatterBin(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser()
			 });
			this.RefreshParts();
			this.mover = new Ent_Dynamic();
			this.ore = new Materials();

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(SmeltingRecipe) ) - typeof(SmeltingRecipe) )) {
				recipe = _a;
				
				this.recipes.Add( Lang13.Call( recipe ) );
			}

			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
				this.initialize();
				this.broadcast_status();
			}
			return;
		}

		// Function from file: machine_processing.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			double? changingdir = null;
			dynamic newdir = null;
			ByTable dirlist = null;
			dynamic olddir = null;
			int conflictingdir = 0;

			
			if ( href_list.Contains( "changedir" ) ) {
				changingdir = String13.ParseNumber( href_list["changedir"] );
				changingdir = ( ( changingdir ??0) <= 1 ? 1 : ( ( changingdir ??0) >= 2 ? 2 : changingdir ) );
				newdir = Interface13.Input( "Select the new direction", this.name, "North", null, new ByTable(new object [] { "North", "South", "East", "West" }), InputType.Null | InputType.Any );

				if ( !Lang13.Bool( newdir ) ) {
					return 1;
				}
				newdir = GlobalFuncs.text2dir( newdir );
				dirlist = new ByTable(new object [] { this.in_dir, this.out_dir });
				olddir = dirlist[changingdir];
				dirlist[changingdir] = -1;
				conflictingdir = dirlist.Find( newdir );

				if ( conflictingdir != 0 ) {
					dirlist[conflictingdir] = olddir;
				}
				dirlist[changingdir] = newdir;
				this.in_dir = Convert.ToInt32( dirlist[1] );
				this.out_dir = Convert.ToInt32( dirlist[2] );
				return 1;
			}
			return base.multitool_topic( user, href_list, (object)(O) );
		}

		// Function from file: machine_processing.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( 1439 ).str( "\">Reset</a>)</li>\n		<li>" ).item( this.format_tag( "ID Tag", "id_tag" ) ).str( "</li>\n		<li><b>Input: </b><a href='?src=" ).Ref( this ).str( ";changedir=1'>" ).item( GlobalFuncs.capitalize( GlobalFuncs.dir2text( this.in_dir ) ) ).str( "</a></li>\n		<li><b>Output: </b><a href='?src=" ).Ref( this ).str( ";changedir=2'>" ).item( GlobalFuncs.capitalize( GlobalFuncs.dir2text( this.out_dir ) ) ).str( "</a></li>\n	</ul>\n	" ).ToString();
		}

		// Function from file: machine_processing.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			dynamic acct = null;
			int idx = 0;
			int idx2 = 0;

			
			if ( ( this.stat & 3 ) != 0 || !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag ) {
				return false;
			}

			if ( ((dynamic)signal).data["sigtype"] == "status" ) {
				this.broadcast_status();
			}

			if ( Lang13.Bool( ((dynamic)signal).data["toggle_power"] ) ) {
				this.on = !this.on;
				this.update_icon();
			}

			if ( Lang13.Bool( ((dynamic)signal).data["claimcredits"] ) ) {
				
				if ( this.credits < 1 ) {
					return true;
				}
				acct = ((dynamic)signal).data["claimcredits"];

				if ( acct is MoneyAccount && Lang13.Bool( new ByTable().Set( 1, -this.credits ).Set( 2, null ).Set( 3, "Claimed mining credits." ).Set( 4, this.name ).Set( "dest_name", "Processing Machine" ).Apply( Lang13.BindFunc( acct, "charge" ) ) ) ) {
					this.credits = 0;
				}
			}

			if ( Lang13.Bool( ((dynamic)signal).data["inc_priority"] ) ) {
				idx = ( Convert.ToDouble( ((dynamic)signal).data["inc_priority"] ) <= 2 ? 2 : ( Convert.ToDouble( ((dynamic)signal).data["inc_priority"] ) >= this.recipes.len ? this.recipes.len : Convert.ToInt32( ((dynamic)signal).data["inc_priority"] ) ) );
				this.recipes.Swap( idx, idx - 1 );
			}

			if ( Lang13.Bool( ((dynamic)signal).data["dec_priority"] ) ) {
				idx2 = ( Convert.ToDouble( ((dynamic)signal).data["dec_priority"] ) <= 1 ? 1 : ( Convert.ToDouble( ((dynamic)signal).data["dec_priority"] ) >= this.recipes.len - 1 ? this.recipes.len - 1 : Convert.ToInt32( ((dynamic)signal).data["dec_priority"] ) ) );
				this.recipes.Swap( idx2, idx2 + 1 );
			}
			return false;
		}

		// Function from file: machine_processing.dm
		public override dynamic process(  ) {
			Tile in_T = null;
			Tile out_T = null;
			int sheets_this_tick = 0;
			SmeltingRecipe R = null;
			dynamic ore_id = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			in_T = Map13.GetStep( this, this.in_dir );
			out_T = Map13.GetStep( this, this.out_dir );

			if ( !in_T.CanPass( this.mover, in_T ) || !in_T.Enter( this.mover ) || !out_T.CanPass( this.mover, out_T ) || !out_T.Enter( this.mover ) ) {
				return null;
			}
			this.grab_ores();

			if ( !this.on ) {
				this.use_power = 1;
				this.broadcast_status();
				return null;
			}
			sheets_this_tick = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.recipes, typeof(SmeltingRecipe) )) {
				R = _b;
				

				while (R.checkIngredients( this )) {
					
					foreach (dynamic _a in Lang13.Enumerate( R.ingredients )) {
						ore_id = _a;
						
						this.ore.removeAmount( ore_id, 1 );
						GlobalVars.score["oremined"] += 1;
					}
					GlobalFuncs.getFromPool( R.yieldtype, out_T );
					sheets_this_tick++;

					if ( sheets_this_tick >= Convert.ToDouble( this.sheets_per_tick ) ) {
						break;
					}
				}

				if ( sheets_this_tick >= Convert.ToDouble( this.sheets_per_tick ) ) {
					break;
				}
			}

			if ( sheets_this_tick != 0 ) {
				this.use_power = 2;
			} else {
				this.use_power = 1;
			}
			this.broadcast_status();
			return null;
		}

		// Function from file: machine_processing.dm
		public virtual void grab_ores(  ) {
			Tile in_T = null;
			Tile out_T = null;
			int sheets_this_tick = 0;
			Ent_Dynamic A = null;
			Ent_Dynamic O = null;
			dynamic mat = null;

			in_T = Map13.GetStep( this, this.in_dir );
			out_T = Map13.GetStep( this, this.out_dir );
			sheets_this_tick = 0;

			foreach (dynamic _a in Lang13.Enumerate( in_T, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( Lang13.Bool( A.anchored ) ) {
					continue;
				}
				sheets_this_tick++;

				if ( sheets_this_tick >= Convert.ToDouble( this.sheets_per_tick ) ) {
					break;
				}

				if ( !( A is Obj_Item_Weapon_Ore ) ) {
					A.forceMove( out_T );
					continue;
				}
				O = A;

				if ( !Lang13.Bool( ((dynamic)O).material ) ) {
					continue;
				}
				this.ore.addAmount( ((dynamic)O).material, 1 );
				mat = this.ore.getMaterial( ((dynamic)O).material );

				if ( !Lang13.Bool( mat ) ) {
					continue;
				}
				this.credits += Convert.ToDouble( mat.value );
				GlobalFuncs.qdel( O );
			}
			return;
		}

		// Function from file: machine_processing.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;

			if ( this.frequency != 0 ) {
				this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency );
			}
			return;
		}

		// Function from file: machine_processing.dm
		public void send_signal( ByTable data = null ) {
			Game_Data signal = null;

			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).source = this;
			((dynamic)signal).data["tag"] = this.id_tag;
			((dynamic)signal).data += data;
			this.radio_connection.post_signal( this, signal );
			return;
		}

		// Function from file: machine_processing.dm
		public void broadcast_status(  ) {
			ByTable data = null;
			dynamic metal = null;
			dynamic M = null;

			data = new ByTable( 5 );
			data["recipes"] = this.recipes;
			data["on"] = this.on;
			data["ore"] = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.ore.storage )) {
				metal = _a;
				
				M = this.ore.getMaterial( metal );
				data["ore"][metal] = new ByTable().Set( "name", M.name ).Set( "amount", this.ore.getAmount( metal ) );
			}
			data["credits"] = this.credits;
			data["type"] = "smelter";
			this.send_signal( data );
			return;
		}

		// Function from file: machine_processing.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			this.set_frequency( this.frequency );
			return false;
		}

		// Function from file: machine_processing.dm
		public override dynamic RefreshParts(  ) {
			int i = 0;
			Obj_Item_Weapon_StockParts_MatterBin A = null;
			Obj_Item_Weapon_StockParts_MicroLaser A2 = null;

			i = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				A = _a;
				
				i += A.rating;
			}
			this.sheets_per_tick = Lang13.Initial( this, "sheets_per_tick" ) * ( i / 2 );
			i = 0;

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MicroLaser) )) {
				A2 = _b;
				
				i += A2.rating - 1;
			}
			this.idle_power_usage = Lang13.Initial( this, "idle_power_usage" ) - i * Convert.ToDouble( Lang13.Initial( this, "idle_power_usage" ) / 4 );
			this.active_power_usage = Lang13.Initial( this, "active_power_usage" ) - i * Convert.ToDouble( Lang13.Initial( this, "active_power_usage" ) / 4 );
			return null;
		}

		// Function from file: machine_processing.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( ( this.stat & 3 ) != 0 || !this.on ) {
				this.icon_state = "furnace_o";
				this.set_light( 0 );
			} else if ( this.on ) {
				this.icon_state = "furnace";
				this.set_light( this.light_range_on, this.light_power_on );
			}
			return null;
		}

		// Function from file: machine_processing.dm
		public override dynamic power_change(  ) {
			dynamic _default = null;

			_default = base.power_change();
			this.update_icon();
			return _default;
		}

		// Function from file: machine_processing.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			_default = base.Destroy( (object)(brokenup) );
			this.id_tag = null;
			GlobalFuncs.qdel( this.mover );
			this.mover = null;
			return _default;
		}

	}

}