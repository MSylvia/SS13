// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RND : Obj_Machinery {

		public bool busy = false;
		public bool hacked = false;
		public bool disabled = false;
		public int shocked = 0;
		public Obj_Machinery_Computer_Rdconsole linked_console = null;
		public dynamic output_dir = 0;
		public bool stopped = false;
		public string base_state = "";
		public double build_time = 0;
		public string nano_file = "";
		public dynamic max_material_storage = 0;
		public ByTable allowed_materials = new ByTable( 0 );
		public int research_flags = 0;
		public Wires_Rnd wires = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 30;
			this.icon = "icons/obj/machines/research.dmi";
		}

		// Function from file: rdmachines.dm
		public Obj_Machinery_RND ( dynamic loc = null ) : base( (object)(loc) ) {
			GlobalVars.rnd_machines.Or( this );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.wires = new Wires_Rnd( this );
			this.base_state = this.icon_state;
			this.icon_state_open = "" + this.base_state + "_t";

			if ( ( this.research_flags & 4 ) != 0 && !( this.materials != null ) ) {
				this.materials = GlobalFuncs.getFromPool( typeof(Materials), this );
			}

			if ( GlobalVars.ticker != null ) {
				this.initialize();
			}
			return;
		}

		// Function from file: rdmachines.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic result = null;
			dynamic found = null;
			dynamic matID = null;
			dynamic M = null;
			dynamic S = null;
			dynamic stack = null;
			int amount = 0;
			dynamic material = null;

			
			if ( this.shocked != 0 ) {
				this.shock( b, 50 );
			}

			if ( this.busy ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>The " + this.name + " is busy. Please wait for completion of previous operation.</span>" );
				return 1;
			}

			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( this.panel_open ) {
				this.wires.Interact( b );
				return 1;
			}

			if ( this.stat != 0 ) {
				return 1;
			}

			if ( this.disabled ) {
				return 1;
			}

			if ( a is Obj_Item_Device_Multitool ) {
				
				if ( !this.panel_open && ( this.research_flags & 2 ) != 0 ) {
					result = Interface13.Input( "Set your location as output?", null, null, null, new ByTable(new object [] { "Yes", "No", "Machine Location" }), InputType.Any );

					dynamic _a = result; // Was a switch-case, sorry for the mess.
					if ( _a=="Yes" ) {
						
						if ( !this.Adjacent( b ) ) {
							GlobalFuncs.to_chat( b, "<span class='warning'>Cannot set this as the output location; You're not adjacent to it!</span>" );
							return 1;
						}
						this.output_dir = Map13.GetDistance( this, b );
						GlobalFuncs.to_chat( b, "<span class='notice'>Output set.</span>" );
					} else if ( _a=="Machine Location" ) {
						this.output_dir = 0;
						GlobalFuncs.to_chat( b, "<span class='notice'>Output set.</span>" );
					}
					return 1;
				}
				return null;
			}

			if ( !( this.linked_console != null ) && !( this is Obj_Machinery_RND_Fabricator ) ) {
				GlobalFuncs.to_chat( b, new Txt().The( this ).item().str( " must be linked to an R&D console first!" ).ToString() );
				return 1;
			}

			if ( a is Obj_Item_Stack_Sheet && ( this.research_flags & 4 ) != 0 ) {
				this.busy = true;
				found = "";

				foreach (dynamic _b in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
					matID = _b;
					
					M = ((dynamic)this.materials).getMaterial( matID );

					if ( M.sheettype == a.type ) {
						found = matID;
					}
				}

				if ( !Lang13.Bool( found ) ) {
					
					if ( Lang13.Bool( a.materials ) && ( this.research_flags & 1024 ) != 0 ) {
						this.busy = false;
						return 0;
					}
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " rejects " ).the( a.name ).item().str( ".</span>" ).ToString() );
					this.busy = false;
					return 1;
				}

				if ( this.allowed_materials != null && this.allowed_materials.len != 0 ) {
					
					if ( !this.allowed_materials.Contains( found ) ) {
						
						if ( Lang13.Bool( a.materials ) && ( this.research_flags & 1024 ) != 0 ) {
							this.busy = false;
							return 0;
						}
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " rejects " ).the( a.name ).item().str( ".</span>" ).ToString() );
						this.busy = false;
						return 1;
					}
				}
				S = a;

				if ( Convert.ToDouble( this.TotalMaterials() + S.perunit ) > Convert.ToDouble( this.max_material_storage ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( "'s material bin is full. Please remove material before adding more.</span>" ).ToString() );
					this.busy = false;
					return 1;
				}
				stack = a;
				amount = Num13.Floor( Convert.ToDouble( Interface13.Input( "How many sheets do you want to add? (0 - " + stack.amount + ")", null, null, null, null, InputType.Num ) ) );

				if ( !Lang13.Bool( a ) || !( a.loc != null ) || a.loc != b ) {
					this.busy = false;
					return null;
				}

				if ( amount < 0 ) {
					amount = 0;
				}

				if ( amount == 0 ) {
					this.busy = false;
					return 1;
				}

				if ( amount > Convert.ToDouble( stack.amount ) ) {
					amount = Convert.ToInt32( stack.amount );
				}

				if ( Convert.ToDouble( this.max_material_storage - this.TotalMaterials() ) < amount * stack.perunit ) {
					amount = Num13.MinInt( Convert.ToInt32( stack.amount ), Num13.Floor( Convert.ToDouble( ( this.max_material_storage - this.TotalMaterials() ) / stack.perunit ) ) );
				}

				if ( ( this.research_flags & 16 ) != 0 ) {
					this.update_icon();
					this.overlays.Or( "" + this.base_state + "_" + stack.name );
					Task13.Schedule( 10, (Task13.Closure)(() => {
						this.overlays.Remove( "" + this.base_state + "_" + stack.name );
						return;
					}));
				}
				this.icon_state = "" + this.base_state;
				this.f_use_power( Num13.MaxInt( 1000, ((int)( amount * 3750 / 10 )) ) );
				stack.use( amount );
				GlobalFuncs.to_chat( b, "<span class='notice'>You add " + amount + " sheet" + ( amount > 1 ? "s" : "" ) + " to the " + this + ".</span>" );
				this.icon_state = "" + this.base_state;
				material = ((dynamic)this.materials).getMaterial( found );
				((dynamic)this.materials).addAmount( found, amount * material.cc_per_sheet );
				this.busy = false;
				return 1;
			}
			this.updateUsrDialog();
			return 0;
		}

		// Function from file: rdmachines.dm
		public override int crowbarDestroy( dynamic user = null ) {
			dynamic matID = null;
			dynamic M = null;
			dynamic sheet = null;
			int available_num_sheets = 0;

			
			if ( base.crowbarDestroy( (object)(user) ) == 1 ) {
				
				if ( this.materials != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
						matID = _a;
						
						M = ((dynamic)this.materials).getMaterial( matID );
						sheet = Lang13.Call( M.sheettype, this.loc );

						if ( Lang13.Bool( sheet ) ) {
							available_num_sheets = Num13.Floor( Convert.ToDouble( ((dynamic)this.materials).storage[matID] / sheet.perunit ) );

							if ( available_num_sheets > 0 ) {
								sheet.amount = available_num_sheets;
								((dynamic)this.materials).removeAmount( matID, sheet.amount * sheet.perunit );
							} else {
								GlobalFuncs.qdel( sheet );
							}
						}
					}
				}
				return 1;
			}
			return -1;
		}

		// Function from file: rdmachines.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			
			if ( base.togglePanelOpen( (object)(toggleitem), (object)(user), (object)(CC) ) != 0 ) {
				
				if ( this.panel_open && this.linked_console != null ) {
					this.linked_console.linked_machines.Remove( this );

					dynamic _a = this.type; // Was a switch-case, sorry for the mess.
					if ( _a==typeof(Obj_Machinery_RND_Fabricator_Protolathe) ) {
						this.linked_console.linked_lathe = null;
					} else if ( _a==typeof(Obj_Machinery_RND_DestructiveAnalyzer) ) {
						this.linked_console.linked_destroy = null;
					} else if ( _a==typeof(Obj_Machinery_RND_Fabricator_CircuitImprinter) ) {
						this.linked_console.linked_imprinter = null;
					}
					this.linked_console = null;
					this.overlays.Remove( "" + this.base_state + "_link" );
				}
				return 1;
			}
			return 0;
		}

		// Function from file: rdmachines.dm
		public dynamic get_output(  ) {
			dynamic _default = null;

			
			if ( !Lang13.Bool( this.output_dir ) ) {
				return GlobalFuncs.get_turf( this.loc );
			}
			_default = Map13.GetStep( GlobalFuncs.get_turf( this ), Convert.ToInt32( this.output_dir ) );

			if ( !Lang13.Bool( _default ) ) {
				return this.loc;
			}
			return _default;
		}

		// Function from file: rdmachines.dm
		public dynamic TotalMaterials(  ) {
			
			if ( this.materials != null ) {
				return ((dynamic)this.materials).getVolume();
			}
			return 0;
		}

		// Function from file: rdmachines.dm
		public virtual void update_hacked(  ) {
			return;
		}

		// Function from file: rdmachines.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: rdmachines.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( this.shocked != 0 ) {
				this.shock( a, 50 );
			}

			if ( this.panel_open ) {
				this.wires.Interact( a );
			} else if ( ( this.research_flags & 8 ) != 0 ) {
				this.ui_interact( a );
			}
			return null;
		}

		// Function from file: rdmachines.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 50 ) ) {
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: rdmachines.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;

			if ( this.linked_console != null ) {
				this.overlays.Add( "" + this.base_state + "_link" );
			}
			return null;
		}

		// Function from file: rdmachines.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 16 ) != 0 ) {
				return true;
			}
			return base.CanPass( (object)(mover), (object)(target), height, air_group );
		}

		// Function from file: rdmachines.dm
		public override dynamic process(  ) {
			base.process();

			if ( this.shocked > 0 ) {
				this.shocked--;
			}
			return null;
		}

		// Function from file: rdmachines.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.linked_console != null ) {
				this.linked_console.linked_machines.Remove( this );
				this.linked_console = null;
			}
			GlobalVars.rnd_machines.Remove( this );
			this.wires = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: rdmachines.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			dynamic direction = null;

			base.initialize( suppress_icon_check );

			if ( ( this.research_flags & 2 ) != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					direction = _a;
					

					if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Mineral_Output), Map13.GetStep( GlobalFuncs.get_turf( this ), Convert.ToInt32( direction ) ) ) ) ) {
						this.output_dir = direction;
						break;
					}
				}
			}
			return false;
		}

	}

}