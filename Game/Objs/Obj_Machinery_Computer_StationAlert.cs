// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_StationAlert : Obj_Machinery_Computer {

		public ByTable alarms = new ByTable().Set( "Fire", new ByTable() ).Set( "Atmosphere", new ByTable() ).Set( "Power", new ByTable() );

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_screen = "alert:0";
			this.icon_keyboard = "atmos_key";
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_Stationalert);
		}

		public Obj_Machinery_Computer_StationAlert ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			
		}

		// Function from file: station_alert.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			int? active_alarms = null;
			dynamic cat = null;
			ByTable L = null;

			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );

			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}
			active_alarms = GlobalVars.FALSE;

			foreach (dynamic _a in Lang13.Enumerate( this.alarms )) {
				cat = _a;
				
				L = this.alarms[cat];

				if ( L.len != 0 ) {
					active_alarms = GlobalVars.TRUE;
				}
			}

			if ( Lang13.Bool( active_alarms ) ) {
				this.overlays.Add( "alert:2" );
			}
			return false;
		}

		// Function from file: station_alert.dm
		public override int? process( dynamic seconds = null ) {
			base.process( (object)(seconds) );
			return null;
		}

		// Function from file: station_alert.dm
		public bool cancelAlarm( string _class = null, Zone A = null, Ent_Static origin = null ) {
			dynamic L = null;
			bool cleared = false;
			dynamic I = null;
			dynamic alarm = null;
			ByTable srcs = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return false;
			}
			L = this.alarms[_class];
			cleared = false;

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					srcs = alarm[3];

					if ( srcs.Contains( origin ) ) {
						srcs.Remove( origin );
					}

					if ( srcs.len == 0 ) {
						cleared = true;
						L -= I;
					}
				}
			}
			return !cleared;
		}

		// Function from file: station_alert.dm
		public bool triggerAlarm( string _class = null, Zone A = null, ByTable O = null, Obj source = null ) {
			dynamic L = null;
			dynamic I = null;
			dynamic alarm = null;
			dynamic sources = null;
			ByTable C = null;
			ByTable CL = null;

			
			if ( source.z != this.z ) {
				return false;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				return false;
			}
			L = this.alarms[_class];

			foreach (dynamic _a in Lang13.Enumerate( L )) {
				I = _a;
				

				if ( I == A.name ) {
					alarm = L[I];
					sources = alarm[3];

					if ( !Lang13.Bool( sources.Contains( source ) ) ) {
						sources += source;
					}
					return true;
				}
			}
			C = null;
			CL = null;

			if ( O != null && O is ByTable ) {
				CL = O;

				if ( CL.len == 1 ) {
					C = CL[1];
				}
			} else if ( O != null && O is Obj_Machinery_Camera ) {
				C = O;
			}
			L[A.name] = new ByTable(new object [] { A, ( C != null ? C : O ), new ByTable(new object [] { source }) });
			return true;
		}

		// Function from file: station_alert.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;
			dynamic _class = null;
			dynamic area = null;

			data = new ByTable();
			data["alarms"] = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( this.alarms )) {
				_class = _b;
				
				data["alarms"][_class] = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.alarms[_class] )) {
					area = _a;
					
					data["alarms"][_class] += area;
				}
			}
			return data;
		}

		// Function from file: station_alert.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.default_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "station_alert", this.name, 300, 500, master_ui, state );
				ui.open();
			}
			return 0;
		}

	}

}