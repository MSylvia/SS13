// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Abductor_GlandDispenser : Obj_Machinery_Abductor {

		public dynamic gland_types = null;
		public ByTable gland_colors = null;
		public ByTable amounts = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/abductor.dmi";
			this.icon_state = "dispenser";
		}

		// Function from file: dispenser.dm
		public Obj_Machinery_Abductor_GlandDispenser ( dynamic loc = null ) : base( (object)(loc) ) {
			int? i = null;

			this.gland_types = Lang13.GetTypes( typeof(Obj_Item_Organ_Internal_Gland) ) - typeof(Obj_Item_Organ_Internal_Gland);
			this.gland_types = GlobalFuncs.shuffle( this.gland_types );
			this.gland_colors = new ByTable( this.gland_types.len );
			this.amounts = new ByTable( this.gland_types.len );
			i = null;
			i = 1;

			while (( i ??0) <= this.gland_types.len) {
				this.gland_colors[i] = this.random_color();
				this.amounts[i] = Rand13.Int( 1, 5 );
				i++;
			}
			return;
		}

		// Function from file: dispenser.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["dispense"] ) ) {
				this.Dispense( String13.ParseNumber( href_list["dispense"] ) );
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: dispenser.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			int? i = null;

			
			if ( A is Obj_Item_Organ_Internal_Gland ) {
				
				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				A.loc = this;
				i = null;
				i = 1;

				while (( i ??0) <= this.gland_colors.len) {
					
					if ( this.gland_types[i] == A.type ) {
						this.amounts[i]++;
					}
					i++;
				}
			}
			return null;
		}

		// Function from file: dispenser.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			string box_css = null;
			string dat = null;
			int item_count = 0;
			int? i = null;
			dynamic g_color = null;
			dynamic amount = null;
			Browser popup = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), b, c ) ) ) {
				return null;
			}

			if ( !this.IsAbductor( a ) ) {
				return null;
			}
			((Mob)a).set_machine( this );
			box_css = @"
	<style>
	a.box.gland {
		float: left;
		width: 20px;
		height: 20px;
		margin: 5px;
		border-width: 1px;
		border-style: solid;
		border-color: rgba(0,0,0,.2);
		text-align: center;
		}
	</style>";
			dat = "";
			item_count = 0;
			i = null;
			i = 1;

			while (( i ??0) <= this.gland_colors.len) {
				item_count++;
				g_color = this.gland_colors[i];
				amount = this.amounts[i];
				dat += new Txt( "<a class='box gland' style='background-color:" ).item( g_color ).str( "' href='?src=" ).Ref( this ).str( ";dispense=" ).item( i ).str( "'>" ).item( amount ).str( "</a>" ).ToString();

				if ( item_count == 3 ) {
					dat += "</br></br>";
					item_count = 0;
				}
				i++;
			}
			popup = new Browser( a, "glands", "Gland Dispenser", 200, 200 );
			popup.add_head_content( box_css );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: dispenser.dm
		public void Dispense( double? count = null ) {
			dynamic T = null;

			
			if ( Convert.ToDouble( this.amounts[count] ) > 0 ) {
				this.amounts[count]--;
				T = this.gland_types[count];
				Lang13.Call( T, GlobalFuncs.get_turf( this ) );
			}
			return;
		}

		// Function from file: dispenser.dm
		public string random_color(  ) {
			return String13.ColorCode( Rand13.Int( 0, 255 ), Rand13.Int( 0, 255 ), Rand13.Int( 0, 255 ) );
		}

	}

}