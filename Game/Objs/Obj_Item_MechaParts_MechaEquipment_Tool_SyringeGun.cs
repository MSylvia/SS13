// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Tool_SyringeGun : Obj_Item_MechaParts_MechaEquipment_Tool {

		public ByTable syringes = null;
		public ByTable known_reagents = null;
		public ByTable processed_reagents = null;
		public int max_syringes = 10;
		public double? max_volume = 75;
		public int synth_speed = 5;
		public bool mode = false;
		public GlobalIterator_MechSynth synth = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.energy_drain = 10;
			this.range = 3;
			this.equip_cooldown = 10;
			this.origin_tech = "materials=3;biotech=4;magnets=4;programming=3";
			this.icon = "icons/obj/gun.dmi";
			this.icon_state = "syringegun";
		}

		// Function from file: medical_tools.dm
		public Obj_Item_MechaParts_MechaEquipment_Tool_SyringeGun ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.flags |= 16384;
			this.syringes = new ByTable();
			this.known_reagents = new ByTable().Set( "inaprovaline", "Inaprovaline" ).Set( "anti_toxin", "Anti-Toxin (Dylovene)" );
			this.processed_reagents = new ByTable();
			this.create_reagents( this.max_volume );
			this.synth = new GlobalIterator_MechSynth( new ByTable(new object [] { this }), false );
			return;
		}

		// Function from file: medical_tools.dm
		public override void on_reagent_change(  ) {
			base.on_reagent_change();
			this.update_equip_info();
			return;
		}

		// Function from file: medical_tools.dm
		public override bool update_equip_info(  ) {
			
			if ( base.update_equip_info() ) {
				GlobalFuncs.send_byjax( this.chassis.occupant, "msyringegun.browser", "reagents", this.get_current_reagents() );
				GlobalFuncs.send_byjax( this.chassis.occupant, "msyringegun.browser", "reagents_form", this.get_reagents_form() );
				return true;
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public bool add_known_reagent( string r_id = null, string r_name = null ) {
			this.set_ready_state( false );
			this.do_after_cooldown();

			if ( !this.known_reagents.Contains( r_id ) ) {
				this.known_reagents.Add( r_id );
				this.known_reagents[r_id] = r_name;
				return true;
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public bool analyze_reagents( dynamic A = null ) {
			Reagent R = null;

			
			if ( Map13.GetDistance( this, A ) >= 4 ) {
				this.occupant_message( "The object is too far away." );
				return false;
			}

			if ( !Lang13.Bool( A.reagents ) || A is Mob ) {
				this.occupant_message( "<span class=\"alert\">No reagent info gained from " + A + ".</span>" );
				return false;
			}
			this.occupant_message( "Analyzing reagents..." );

			foreach (dynamic _a in Lang13.Enumerate( A.reagents.reagent_list, typeof(Reagent) )) {
				R = _a;
				

				if ( R.reagent_state == 2 && this.add_known_reagent( R.id, R.name ) ) {
					this.occupant_message( "Reagent analyzed, identified as " + R.name + " and added to database." );
					GlobalFuncs.send_byjax( this.chassis.occupant, "msyringegun.browser", "reagents_form", this.get_reagents_form() );
				}
			}
			this.occupant_message( "Analyzis complete." );
			return true;
		}

		// Function from file: medical_tools.dm
		public bool load_syringe( dynamic S = null ) {
			Obj_Structure D = null;
			Obj_Machinery_Door D2 = null;

			
			if ( this.syringes.len < this.max_syringes ) {
				
				if ( Map13.GetDistance( this, S ) >= 2 ) {
					this.occupant_message( "The syringe is too far away." );
					return false;
				}

				foreach (dynamic _a in Lang13.Enumerate( S.loc, typeof(Obj_Structure) )) {
					D = _a;
					

					if ( !D.CanPass( S, this.loc ) ) {
						this.occupant_message( "Unable to load syringe." );
						return false;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( S.loc, typeof(Obj_Machinery_Door) )) {
					D2 = _b;
					

					if ( !D2.CanPass( S, this.loc ) ) {
						this.occupant_message( "Unable to load syringe." );
						return false;
					}
				}
				((Reagents)S.reagents).trans_to( this, S.reagents.total_volume );
				((Ent_Dynamic)S).forceMove( this );
				this.syringes.Add( S );
				this.occupant_message( "Syringe loaded." );
				this.update_equip_info();
				return true;
			}
			this.occupant_message( "The " + this + " syringe chamber is full." );
			return false;
		}

		// Function from file: medical_tools.dm
		public bool get_current_reagents(  ) {
			dynamic output = null;
			Reagent R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reagents.reagent_list, typeof(Reagent) )) {
				R = _a;
				

				if ( ( R.volume ??0) > 0 ) {
					output += new Txt().item( R ).str( ": " ).item( Num13.Round( R.volume ??0, 0.001 ) ).str( " - <a href=\"?src=" ).Ref( this ).str( ";purge_reagent=" ).item( R.id ).str( "\">Purge Reagent</a><br />" ).ToString();
				}
			}

			if ( Lang13.Bool( output ) ) {
				output += new Txt( "Total: " ).item( Num13.Round( this.reagents.total_volume ??0, 0.001 ) ).str( "/" ).item( this.reagents.maximum_volume ).str( " - <a href=\"?src=" ).Ref( this ).str( ";purge_all=1\">Purge All</a>" ).ToString();
			}
			return Lang13.Bool( output ) || Lang13.Bool( "None" );
		}

		// Function from file: medical_tools.dm
		public dynamic get_reagents_list(  ) {
			dynamic output = null;
			double i = 0;
			dynamic reagent_id = null;

			
			foreach (dynamic _a in Lang13.IterateRange( 1, this.known_reagents.len )) {
				i = _a;
				
				reagent_id = this.known_reagents[i];
				output += "<input type=\"checkbox\" value=\"" + reagent_id + "\" name=\"reagent_" + i + "\" " + ( this.processed_reagents.Contains( reagent_id ) ? "checked=\"1\"" : null ) + "> " + this.known_reagents[reagent_id] + "<br />";
			}
			return output;
		}

		// Function from file: medical_tools.dm
		public string get_reagents_form(  ) {
			dynamic r_list = null;
			dynamic inputs = null;
			string output = null;

			r_list = this.get_reagents_list();

			if ( Lang13.Bool( r_list ) ) {
				inputs += new Txt( "<input type=\"hidden\" name=\"src\" value=\"" ).Ref( this ).str( "\">\n			<input type=\"hidden\" name=\"select_reagents\" value=\"1\">\n			<input id=\"submit\" type=\"submit\" value=\"Apply settings\">" ).ToString();
			}
			output = "<form action=\"byond://\" method=\"get\">\n						" + ( Lang13.Bool( r_list ) || Lang13.Bool( "No known reagents" ) ) + "\n						" + inputs + "\n						</form>\n						" + ( Lang13.Bool( r_list ) ? new Txt( "<span style=\"font-size:80%;\">Only the first " ).item( this.synth_speed ).str( " selected reagent" ).s().str( " will be added to production</span>" ).ToString() : null ) + "\n						";
			return output;
		}

		// Function from file: medical_tools.dm
		public string get_reagents_page(  ) {
			string output = null;

			output = @"<html>
						<head>
						<title>Reagent Synthesizer</title>
						<script language='javascript' type='text/javascript'>
						" + GlobalVars.js_byjax + @"
						</script>
						<style>
						h3 {margin-bottom:2px;font-size:14px;}
						#reagents, #reagents_form {}
						form {width: 90%; margin:10px auto; border:1px dotted #999; padding:6px;}
						#submit {margin-top:5px;}
						</style>
						</head>
						<body>
						<h3>Current reagents:</h3>
						<div id=""reagents"">
						" + this.get_current_reagents() + @"
						</div>
						<h3>Reagents production:</h3>
						<div id=""reagents_form"">
						" + this.get_reagents_form() + @"
						</div>
						</body>
						</html>
						";
			return output;
		}

		// Function from file: medical_tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			TopicInput filter = null;
			int m = 0;
			string message = null;
			double i = 0;
			dynamic reagent = null;
			string reagent2 = null;

			base.Topic( href, href_list, (object)(hclient) );
			filter = new TopicInput( href, href_list );

			if ( Lang13.Bool( filter.get( "toggle_mode" ) ) ) {
				this.mode = !this.mode;
				this.update_equip_info();
				return null;
			}

			if ( Lang13.Bool( filter.get( "select_reagents" ) ) ) {
				this.processed_reagents.len = 0;
				m = 0;

				foreach (dynamic _a in Lang13.IterateRange( 1, this.known_reagents.len )) {
					i = _a;
					

					if ( m >= this.synth_speed ) {
						break;
					}
					reagent = filter.get( "reagent_" + i );

					if ( Lang13.Bool( reagent ) && this.known_reagents.Contains( reagent ) ) {
						message = "" + ( m != 0 ? ", " : null ) + this.known_reagents[reagent];
						this.processed_reagents.Add( reagent );
						m++;
					}
				}

				if ( this.processed_reagents.len != 0 ) {
					message += " added to production";
					this.synth.start();
					this.occupant_message( message );
					this.occupant_message( "Reagent processing started." );
					this.log_message( "Reagent processing started." );
				}
				return null;
			}

			if ( Lang13.Bool( filter.get( "show_reagents" ) ) ) {
				Interface13.Browse( this.chassis.occupant, this.get_reagents_page(), "window=msyringegun" );
			}

			if ( Lang13.Bool( filter.get( "purge_reagent" ) ) ) {
				reagent2 = filter.get( "purge_reagent" );

				if ( Lang13.Bool( reagent2 ) ) {
					((Reagents)this.reagents).del_reagent( reagent2 );
				}
				return null;
			}

			if ( Lang13.Bool( filter.get( "purge_all" ) ) ) {
				((Reagents)this.reagents).clear_reagents();
				return null;
			}
			return null;
		}

		// Function from file: medical_tools.dm
		public override bool action( dynamic target = null ) {
			Obj_Item_Weapon_ReagentContainers_Syringe S = null;
			dynamic trg = null;
			Ent_Dynamic S2 = null;
			int? i = null;
			ByTable mobs = null;
			Mob_Living_Carbon M = null;
			dynamic M2 = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}

			if ( target is Obj_Item_Weapon_ReagentContainers_Syringe ) {
				return this.load_syringe( target );
			}

			if ( target is Obj_Item_Weapon_Storage ) {
				
				foreach (dynamic _a in Lang13.Enumerate( target.contents, typeof(Obj_Item_Weapon_ReagentContainers_Syringe) )) {
					S = _a;
					
					this.load_syringe( S );
				}
				return false;
			}

			if ( this.mode ) {
				return this.analyze_reagents( target );
			}

			if ( !( this.syringes.len != 0 ) ) {
				this.occupant_message( "<span class=\"alert\">No syringes loaded.</span>" );
				return false;
			}

			if ( ( this.reagents.total_volume ??0) <= 0 ) {
				this.occupant_message( "<span class=\"alert\">No available reagents to load syringe with.</span>" );
				return false;
			}
			this.set_ready_state( false );
			this.chassis.use_power( this.energy_drain );
			trg = GlobalFuncs.get_turf( target );
			S2 = this.syringes[1];
			S2.forceMove( GlobalFuncs.get_turf( this.chassis ) );
			((Reagents)this.reagents).trans_to( S2, Num13.MinInt( Convert.ToInt32( ((dynamic)S2).volume ), ((int)( this.reagents.total_volume ??0 )) ) );
			this.syringes.Remove( S2 );
			S2.icon = "icons/obj/chemical.dmi";
			S2.icon_state = "syringeproj";
			GlobalFuncs.playsound( this.chassis, "sound/items/syringeproj.ogg", 50, 1 );
			this.log_message( "Launched " + S2 + " from " + this + ", targeting " + target + "." );
			Task13.Schedule( -1, (Task13.Closure)(() => {
				Task13.Source = null;
				i = null;
				i = 0;

				while (( i ??0) < 6) {
					
					if ( !( S2 != null ) ) {
						break;
					}
					Map13.StepTowardsSimple( S2, trg );

					if ( !( S2 != null ) ) {
						mobs = new ByTable();

						foreach (dynamic _b in Lang13.Enumerate( S2.loc, typeof(Mob_Living_Carbon) )) {
							M = _b;
							
							mobs.Add( M );
						}
						M2 = GlobalFuncs.safepick( mobs );

						if ( Lang13.Bool( M2 ) ) {
							S2.icon_state = Lang13.Initial( S2, "icon_state" );
							S2.icon = Lang13.Initial( S2, "icon" );
							((Reagents)S2.reagents).trans_to( M2, S2.reagents.total_volume );
							((Mob_Living)M2).take_organ_damage( 2 );
							S2.visible_message( "<span class=\"attack\"> " + M2 + " was hit by the syringe!</span>" );
							break;
						} else if ( S2.loc == trg ) {
							S2.icon_state = Lang13.Initial( S2, "icon_state" );
							S2.icon = Lang13.Initial( S2, "icon" );
							S2.update_icon();
							break;
						}
					} else {
						S2.icon_state = Lang13.Initial( S2, "icon_state" );
						S2.icon = Lang13.Initial( S2, "icon" );
						S2.update_icon();
						break;
					}
					Task13.Sleep( 1 );
					i++;
				}
				return;
			}));
			this.do_after_cooldown();
			return true;
		}

		// Function from file: medical_tools.dm
		public override string get_equip_info(  ) {
			string output = null;

			output = base.get_equip_info();

			if ( Lang13.Bool( output ) ) {
				return new Txt().item( output ).str( " [<a href=\"?src=" ).Ref( this ).str( ";toggle_mode=1\">" ).item( ( this.mode ? "Analyze" : "Launch" ) ).str( "</a>]<br />[Syringes: " ).item( this.syringes.len ).str( "/" ).item( this.max_syringes ).str( " | Reagents: " ).item( this.reagents.total_volume ).str( "/" ).item( this.reagents.maximum_volume ).str( "]<br /><a href='?src=" ).Ref( this ).str( ";show_reagents=1'>Reagents list</a>" ).ToString();
			}
			return null;
		}

		// Function from file: medical_tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( M is Obj_Mecha_Medical ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public override void critfail(  ) {
			base.critfail();
			this.flags &= 49151;
			return;
		}

		// Function from file: medical_tools.dm
		public override void detach( dynamic moveto = null ) {
			this.synth.stop();
			base.detach( (object)(moveto) ); return;
		}

	}

}