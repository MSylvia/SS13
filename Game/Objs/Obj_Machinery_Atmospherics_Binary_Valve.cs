// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Binary_Valve : Obj_Machinery_Atmospherics_Binary {

		public bool open = false;
		public bool openDuringInit = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/atmospherics/valve.dmi";
			this.icon_state = "hvalve0";
		}

		public Obj_Machinery_Atmospherics_Binary_Valve ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: valve.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			this.normalize_dir();
			this.findAllConnections( this.initialize_directions );
			this.build_network();

			if ( this.openDuringInit ) {
				this.close();
				this.f_open();
				this.openDuringInit = false;
			}
			return false;
		}

		// Function from file: valve.dm
		public override string investigation_log( string subject = null, string message = null ) {
			this.activity_log += base.investigation_log( subject, message );
			return null;
		}

		// Function from file: valve.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( a, this, "toggles" ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>Nope.</span>" );
				return null;
			}
			this.add_fingerprint( Task13.User );
			this.update_icon( 0, 1 );
			Task13.Sleep( 10 );

			if ( this.open ) {
				this.close();
			} else {
				this.f_open();
			}
			this.investigation_log( "atmos", "was " + ( this.open ? "opened" : "closed" ) + " by " + GlobalFuncs.key_name( Task13.User ) );
			return null;
		}

		// Function from file: valve.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: valve.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return null;
		}

		// Function from file: valve.dm
		public void normalize_dir(  ) {
			
			if ( this.dir == 3 ) {
				this.dir = 1;
			} else if ( this.dir == 12 ) {
				this.dir = 4;
			}
			return;
		}

		// Function from file: valve.dm
		public bool close(  ) {
			
			if ( !this.open ) {
				return false;
			}
			this.open = false;
			this.update_icon();

			if ( this.network1 != null ) {
				
				if ( this.network1 != null ) {
					GlobalFuncs.returnToPool( this.network1 );
				}
			}

			if ( this.network2 != null ) {
				
				if ( this.network1 != null ) {
					GlobalFuncs.returnToPool( this.network2 );
				}
			}
			this.build_network();
			return true;
		}

		// Function from file: valve.dm
		[VerbInfo( name: "open" )]
		public bool f_open(  ) {
			
			if ( this.open ) {
				return false;
			}
			this.open = true;
			this.update_icon();

			if ( this.network1 != null && this.network2 != null ) {
				((PipeNetwork)this.network1).merge( this.network2 );
				this.network2 = this.network1;
			}

			if ( this.network1 != null ) {
				((dynamic)this.network1).update = 1;
			} else if ( this.network2 != null ) {
				((dynamic)this.network2).update = 1;
			}
			return true;
		}

		// Function from file: valve.dm
		public override dynamic network_expand( PipeNetwork new_network = null, Obj_Machinery_Atmospherics reference = null ) {
			base.network_expand( new_network, reference );

			if ( this.open ) {
				
				if ( reference == this.node1 ) {
					
					if ( this.node2 != null ) {
						return this.node2.network_expand( new_network, this );
					}
				} else if ( reference == this.node2 ) {
					
					if ( this.node1 != null ) {
						return this.node1.network_expand( new_network, this );
					}
				}
			}
			return null;
		}

		// Function from file: valve.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( Lang13.Bool( target ) ) {
				Icon13.Flick( "hvalve" + this.open + !this.open, this );
			} else {
				this.icon_state = "hvalve" + this.open;
			}
			base.update_icon( (object)(location), (object)(target) );
			return null;
		}

	}

}