// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Gun_Energy_Staff : Obj_Item_Weapon_Gun_Energy {

		public int charge_tick = 0;
		public dynamic changetype = null;
		public int next_changetype = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "staffofchange";
			this.fire_sound = "sound/weapons/radgun.ogg";
			this.slot_flags = 1024;
			this.w_class = 4;
			this.charge_cost = 200;
			this.projectile_type = "/obj/item/projectile/change";
			this.clumsy_check = false;
			this.icon_state = "staffofchange";
		}

		// Function from file: special.dm
		public Obj_Item_Weapon_Gun_Energy_Staff ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.processing_objects.Add( this );
			return;
		}

		// Function from file: special.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			dynamic selected = null;

			
			if ( Game13.time < this.next_changetype ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>" + this + " is still recharging.</span>" );
				return null;
			}
			selected = Interface13.Input( "You squint at the dial conspicuously mounted on the side of your staff.", "Staff of Change", null, null, new ByTable(new object [] { "random" }) + GlobalVars.available_staff_transforms, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( selected ) ) {
				return null;
			}

			if ( selected == "furry" ) {
				GlobalFuncs.to_chat( user, "<span class='danger'>You monster.</span>" );
			} else {
				GlobalFuncs.to_chat( user, "<span class='info'>You have selected to make your next victim have a " + selected + " form.</span>" );
			}

			dynamic _a = selected; // Was a switch-case, sorry for the mess.
			if ( _a=="random" ) {
				this.changetype = null;
			} else {
				this.changetype = selected;
			}
			this.next_changetype = Game13.time + 1200;
			return null;
		}

		// Function from file: special.dm
		public override bool process_chambered(  ) {
			dynamic P = null;

			
			if ( !base.process_chambered() ) {
				return false;
			}
			P = this.in_chamber;

			if ( Lang13.Bool( P ) && P is Obj_Item_Projectile_Change ) {
				P.changetype = this.changetype;
			}
			return true;
		}

		// Function from file: special.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			return null;
		}

		// Function from file: special.dm
		public override dynamic process(  ) {
			this.charge_tick++;

			if ( this.charge_tick < 4 ) {
				return 0;
			}
			this.charge_tick = 0;

			if ( !Lang13.Bool( this.power_supply ) ) {
				return 0;
			}
			((Obj_Item_Weapon_Cell)this.power_supply).give( 200 );
			return 1;
		}

		// Function from file: special.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.processing_objects.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}