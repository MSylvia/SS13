// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Aiupload : Obj_Machinery_Computer {

		public dynamic current = null;
		public bool opened = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/aiupload";
			this.light_color = "#555555";
			this.icon_state = "command";
		}

		public Obj_Machinery_Computer_Aiupload ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: law.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Mob_Dead ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='rose'>Your ghostly hand goes right through!</span>" );
				return null;
			}

			if ( ( this.stat & 2 ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "The upload computer has no power!" );
				return null;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "The upload computer is broken!" );
				return null;
			}
			this.current = GlobalFuncs.select_active_ai( a );

			if ( !Lang13.Bool( this.current ) ) {
				GlobalFuncs.to_chat( Task13.User, "No active AIs detected." );
			} else {
				GlobalFuncs.to_chat( Task13.User, "" + this.current.name + " selected for law changes." );
			}
			return null;
		}

		// Function from file: law.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic frame = null;
			bool failed = false;
			int? i = null;
			dynamic M = null;

			
			if ( Convert.ToDouble( b.z ) > 6 ) {
				GlobalFuncs.to_chat( b, "<span class='danger'>Unable to establish a connection: </span>You're too far away from the station!" );
				return null;
			}

			if ( a is Obj_Item_Weapon_AiModule ) {
				
				if ( this.install_module( a, b ) ) {
					this.announce_law_changes( b );
				}
			} else if ( a is Obj_Item_Weapon_PlanningFrame ) {
				
				if ( ( this.stat & 2 ) != 0 ) {
					GlobalFuncs.to_chat( Task13.User, "The upload computer has no power!" );
					return null;
				}

				if ( ( this.stat & 1 ) != 0 ) {
					GlobalFuncs.to_chat( Task13.User, "The upload computer is broken!" );
					return null;
				}

				if ( !Lang13.Bool( this.current ) ) {
					GlobalFuncs.to_chat( Task13.User, "You haven't selected an AI to transmit laws to!" );
					return null;
				}

				if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode.name == "blob" ) {
					GlobalFuncs.to_chat( Task13.User, "Law uploads have been disabled by Nanotrasen!" );
					return null;
				}

				if ( Convert.ToInt32( this.current.stat ) == 2 || this.current.control_disabled ) {
					GlobalFuncs.to_chat( Task13.User, "Upload failed. No signal is being detected from the AI." );
				} else if ( Lang13.Bool( this.current.see_in_dark ) == false ) {
					GlobalFuncs.to_chat( Task13.User, "Upload failed. Only a faint signal is being detected from the AI, and it is not responding to our requests. It may be low on power." );
				} else {
					frame = a;

					if ( frame.modules.len > 0 ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You load " ).the( frame ).item().str( " into " ).the( this ).item().str( "...</span>" ).ToString() );

						if ( GlobalFuncs.do_after( b, this, 50 ) ) {
							failed = false;
							i = null;
							i = 1;

							while (( i ??0) <= frame.modules.len) {
								M = frame.modules[i];
								GlobalFuncs.to_chat( b, "<span class='notice'>Running " + M + "...</span>" );

								if ( !this.install_module( M, b ) ) {
									failed = true;
									break;
								}
								i++;
							}

							if ( !failed ) {
								this.announce_law_changes( b );
							}
						}
					} else {
						GlobalFuncs.to_chat( b, "<span class='warning'>It's empty, doofus.</span>" );
					}
				}
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: law.dm
		public void announce_law_changes( dynamic user = null ) {
			Mob_Living_Silicon_Robot R = null;

			GlobalFuncs.to_chat( this.current, "These are your laws now:" );
			this.current.show_laws();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Silicon_Robot) )) {
				R = _a;
				

				if ( R.lawupdate && R.connected_ai == this.current ) {
					GlobalFuncs.to_chat( R, "These are your laws now:" );
					R.show_laws();
				}
			}
			GlobalFuncs.to_chat( user, "<span class='notice'>Upload complete. The AI's laws have been modified.</span>" );
			return;
		}

		// Function from file: law.dm
		public bool install_module( dynamic O = null, dynamic user = null ) {
			dynamic M = null;

			
			if ( ( this.stat & 2 ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "The upload computer has no power!" );
				return false;
			}

			if ( ( this.stat & 1 ) != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "The upload computer is broken!" );
				return false;
			}

			if ( !Lang13.Bool( this.current ) ) {
				GlobalFuncs.to_chat( Task13.User, "You haven't selected an AI to transmit laws to!" );
				return false;
			}

			if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.mode ) && GlobalVars.ticker.mode.name == "blob" ) {
				GlobalFuncs.to_chat( Task13.User, "Law uploads have been disabled by Nanotrasen!" );
				return false;
			}

			if ( Convert.ToInt32( this.current.stat ) == 2 || this.current.control_disabled ) {
				GlobalFuncs.to_chat( Task13.User, "Upload failed. No signal is being detected from the AI." );
			} else if ( Lang13.Bool( this.current.see_in_dark ) == false ) {
				GlobalFuncs.to_chat( Task13.User, "Upload failed. Only a faint signal is being detected from the AI, and it is not responding to our requests. It may be low on power." );
			} else {
				M = O;

				if ( !Lang13.Bool( M.validate( this.current.laws, this.current, user ) ) ) {
					return false;
				}

				if ( !((Obj_Item_Weapon_AiModule)M).upload( this.current.laws, this.current, user ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: law.dm
		[Verb]
		[VerbInfo( name: "Access Computer's Internals", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void AccessInternals(  ) {
			
			if ( Map13.GetDistance( this, Task13.User ) > 1 || Task13.User.restrained() || Task13.User.lying == true || Task13.User.isUnconscious() || Task13.User is Mob_Living_Silicon ) {
				return;
			}
			this.opened = !this.opened;

			if ( this.opened ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The access panel is now open.</span>" );
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The access panel is now closed.</span>" );
			}
			return;
		}

	}

}