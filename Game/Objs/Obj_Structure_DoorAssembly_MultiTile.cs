// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_DoorAssembly_MultiTile : Obj_Structure_DoorAssembly {

		public bool width = true;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.base_icon_state = "g";
			this.airlock_type = "/multi_tile/glass";
			this.glass = -1;
			this.icon = "icons/obj/doors/door_assembly2x1.dmi";
			this.dir = 4;
		}

		// Function from file: door_assembly.dm
		public Obj_Structure_DoorAssembly_MultiTile ( dynamic loc = null ) : base( (object)(loc) ) {
			
			if ( new ByTable(new object [] { GlobalVars.EAST, GlobalVars.WEST }).Contains( this.dir ) ) {
				this.bound_width = ( this.width ?1:0) * Game13.icon_size;
				this.bound_height = Game13.icon_size;
			} else {
				this.bound_width = Game13.icon_size;
				this.bound_height = ( this.width ?1:0) * Game13.icon_size;
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: door_assembly.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			bool _default = false;

			_default = base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( new ByTable(new object [] { GlobalVars.EAST, GlobalVars.WEST }).Contains( this.dir ) ) {
				this.bound_width = ( this.width ?1:0) * Game13.icon_size;
				this.bound_height = Game13.icon_size;
			} else {
				this.bound_width = Game13.icon_size;
				this.bound_height = ( this.width ?1:0) * Game13.icon_size;
			}
			return _default;
		}

	}

}