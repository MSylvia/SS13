// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Botany_Editor : Obj_Machinery_Botany {

		public int mode = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.disk_needs_genes = true;
			this.icon_state = "traitgun";
		}

		// Function from file: seed_machines.dm
		public Obj_Machinery_Botany_Editor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_BotanyBioballistic(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			return;
		}

		// Function from file: seed_machines.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Plantgene gene = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["apply_gene"] ) ) {
				
				if ( !Lang13.Bool( this.loaded_disk ) || !Lang13.Bool( this.loaded_seed ) ) {
					return null;
				}
				this.last_action = Game13.time;
				this.active = true;

				if ( !( GlobalVars.plant_controller.seeds[this.loaded_seed.seed.name] == null ) ) {
					this.loaded_seed.seed = ((Seed)this.loaded_seed.seed).diverge( 1 );
					this.loaded_seed.seed_type = this.loaded_seed.seed.name;
					((Obj_Item_Seeds)this.loaded_seed).update_seed();
				}

				if ( Rand13.PercentChance( this.loaded_seed.modified ) ) {
					this.failed_task = true;
					this.loaded_seed.modified = 101;
				}

				foreach (dynamic _a in Lang13.Enumerate( this.loaded_disk.genes, typeof(Plantgene) )) {
					gene = _a;
					
					((Seed)this.loaded_seed.seed).apply_gene( gene, this.mode );
					this.loaded_seed.modified += Rand13.Int( 5, 10 );
				}
			} else if ( Lang13.Bool( href_list["toggle_mode"] ) ) {
				
				switch ((int)( this.mode )) {
					case 1:
						this.mode = 2;
						break;
					case 2:
						this.mode = 1;
						break;
				}
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );
			return 1;
		}

		// Function from file: seed_machines.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? true;

			ByTable data = null;
			Plantgene P = null;

			
			if ( !Lang13.Bool( user ) ) {
				return;
			}
			data = new ByTable();
			data["activity"] = this.active;
			data["mode"] = this.mode;

			if ( Lang13.Bool( this.loaded_seed ) ) {
				data["degradation"] = this.loaded_seed.modified;
			} else {
				data["degradation"] = 0;
			}

			if ( Lang13.Bool( this.loaded_disk ) && this.loaded_disk.genes.len != 0 ) {
				data["disk"] = 1;
				data["sourceName"] = this.loaded_disk.genesource;
				data["locus"] = "";

				foreach (dynamic _a in Lang13.Enumerate( this.loaded_disk.genes, typeof(Plantgene) )) {
					P = _a;
					

					if ( data["locus"] != "" ) {
						data["locus"] += ", ";
					}
					data["locus"] += "" + GlobalVars.plant_controller.gene_tag_masks[P.genetype];
				}
			} else {
				data["disk"] = 0;
				data["sourceName"] = 0;
				data["locus"] = 0;
			}

			if ( Lang13.Bool( this.loaded_seed ) ) {
				data["loaded"] = "" + this.loaded_seed.name;
			} else {
				data["loaded"] = 0;
			}
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data, force_open );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "botany_editor.tmpl", "Bioballistic Delivery UI", 470, 450 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

	}

}