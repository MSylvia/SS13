// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Folder : Obj_Item_Weapon {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 2;
			this.pressure_resistance = 2;
			this.burn_state = 0;
			this.icon = "icons/obj/bureaucracy.dmi";
			this.icon_state = "folder";
		}

		public Obj_Item_Weapon_Folder ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: folders.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic I = null;
			dynamic I2 = null;

			base.Topic( href, href_list, (object)(hsrc) );

			if ( Task13.User.stat != 0 || Task13.User.restrained() ) {
				return null;
			}

			if ( Task13.User.contents.Find( this ) != 0 ) {
				
				if ( Lang13.Bool( href_list["remove"] ) ) {
					I = Lang13.FindObj( href_list["remove"] );

					if ( I is Obj_Item && I.loc == this ) {
						I.loc = Task13.User.loc;
						Task13.User.put_in_hands( I );
					}
				}

				if ( Lang13.Bool( href_list["read"] ) ) {
					I2 = Lang13.FindObj( href_list["read"] );

					if ( I2 is Obj_Item && I2.loc == this ) {
						Task13.User.__CallVerb("Examine", I2 );
					}
				}
				this.attack_self( Task13.User );
				this.update_icon();
			}
			return null;
		}

		// Function from file: folders.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;
			Obj_Item I = null;

			dat = "<title>" + this.name + "</title>";

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item) )) {
				I = _a;
				
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";remove=" ).Ref( I ).str( "'>Remove</A> - <A href='?src=" ).Ref( this ).str( ";read=" ).Ref( I ).str( "'>" ).item( I.name ).str( "</A><BR>" ).ToString();
			}
			Interface13.Browse( user, dat, "window=folder" );
			GlobalFuncs.onclose( user, "folder" );
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: folders.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			string n_name = null;

			
			if ( A is Obj_Item_Weapon_Paper || A is Obj_Item_Weapon_Photo || A is Obj_Item_Documents ) {
				
				if ( !((Mob)user).unEquip( A ) ) {
					return null;
				}
				A.loc = this;
				user.WriteMsg( "<span class='notice'>You put " + A + " into " + this + ".</span>" );
				this.update_icon();
			} else if ( A is Obj_Item_Weapon_Pen ) {
				n_name = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( user, "What would you like to label the folder?", "Folder Labelling", null, null, InputType.Str ) ), 1, 26 );

				if ( Map13.GetDistance( this, user ) <= 1 && Lang13.Bool( user.stat ) == false ) {
					this.name = "folder" + ( Lang13.Bool( n_name ) ? "- '" + n_name + "'" : null );
				}
			}
			return null;
		}

		// Function from file: folders.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.overlays.Cut();

			if ( this.contents.len != 0 ) {
				this.overlays.Add( "folder_paper" );
			}
			return false;
		}

	}

}