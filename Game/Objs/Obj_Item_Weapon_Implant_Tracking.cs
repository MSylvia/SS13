// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implant_Tracking : Obj_Item_Weapon_Implant {

		public bool id = true;

		// Function from file: implant.dm
		public Obj_Item_Weapon_Implant_Tracking ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.tracking_implants.Add( this );
			return;
		}

		// Function from file: implant.dm
		public override dynamic emp_act( int severity = 0 ) {
			int delay = 0;

			
			if ( this.malfunction != 0 ) {
				return null;
			}
			this.malfunction = 1;
			delay = 20;

			switch ((int)( severity )) {
				case 1:
					
					if ( Rand13.PercentChance( 60 ) ) {
						this.meltdown();
					}
					break;
				case 2:
					delay = Rand13.Int( 3000, 9000 );
					break;
			}
			Task13.Schedule( delay, (Task13.Closure)(() => {
				this.malfunction--;
				return;
			}));
			return null;
		}

		// Function from file: implant.dm
		public override string get_data(  ) {
			string dat = null;

			dat = @"<b>Implant Specifications:</b><BR>
<b>Name:</b> Tracking Beacon<BR>
<b>Life:</b> 10 minutes after death of host<BR>
<b>Important Notes:</b> None<BR>
<HR>
<b>Implant Details:</b> <BR>
<b>Function:</b> Continuously transmits low power signal. Useful for tracking.<BR>
<b>Special Features:</b><BR>
<i>Neuro-Safe</i>- Specialized shell absorbs excess voltages self-destructing the chip if
a malfunction occurs thereby securing safety of subject. The implant will melt and
disintegrate into bio-safe elements.<BR>
<b>Integrity:</b> Gradient creates slight risk of being overcharged and frying the
circuitry. As a result neurotoxins can cause massive damage.<HR>
Implant Specifics:<BR>";
			return dat;
		}

		// Function from file: implant.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			GlobalVars.tracking_implants.Remove( this );
			return null;
		}

	}

}