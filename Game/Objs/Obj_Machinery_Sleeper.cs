// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Sleeper : Obj_Machinery {

		public string base_icon = "sleeper";
		public string orient = "LEFT";
		public Ent_Static occupant = null;
		public ByTable available_options = new ByTable().Set( "inaprovaline", "Inaprovaline" ).Set( "stoxin", "Soporific" ).Set( "dermaline", "Dermaline" ).Set( "bicaridine", "Bicaridine" ).Set( "dexalin", "Dexalin" );
		public ByTable amounts = new ByTable(new object [] { 5, 10 });
		public dynamic connected = null;
		public int sedativeblock = 0;
		public Type connected_type = typeof(Obj_Machinery_SleepConsole);
		public bool on = false;
		public double target_time = 0;
		public string setting = null;
		public bool automatic = false;
		public double? drag_delay = 20;
		public bool cools = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.machine_flags = 14;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Sleeper(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_Manipulator(), 
				new Obj_Item_Weapon_StockParts_Manipulator()
			 });
			this.light_color = "#7DE1E1";
			this.light_range_on = 3;
			this.light_power_on = 2;
			this.icon = "icons/obj/Cryogenic2.dmi";
			this.icon_state = "sleeper_0";
		}

		// Function from file: Sleeper.dm
		public Obj_Machinery_Sleeper ( dynamic loc = null ) : base( (object)(loc) ) {
			Tile t = null;
			dynamic c = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.RefreshParts();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				Game13.log.WriteMsg( "DEBUG: Beginning sleeper console checking/auto-generation for sleeper " + this + " at " + this.loc.x + "," + this.loc.y + "," + this.loc.z + "..." );

				if ( this.orient == "RIGHT" ) {
					this.update_icon();
					t = Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.WEST )) );
				} else {
					t = Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.EAST )) );
				}

				if ( !( t != null ) ) {
					Task13.Crash( "" + "code/game/machinery/Sleeper.dm" + ":" + 193 + ":Assertion Failed: " + "t" );
				}
				c = Lang13.FindIn( typeof(Obj_Machinery_SleepConsole), t.contents );

				if ( Lang13.Bool( c ) && Lang13.Bool( ((dynamic)this.connected_type).IsInstanceOfType( c ) ) ) {
					this.connected = c;
					c.connected = this;
				} else if ( !Lang13.Bool( this.connected ) ) {
					Game13.log.WriteMsg( "DEBUG: generating console at " + t.loc.x + "," + t.loc.y + "," + t.loc.z + " for sleeper at " + this.loc.x + "," + this.loc.y + "," + this.loc.z );
					this.generate_console( t );
				}
				return;
				return;
			}));
			return;
		}

		// Function from file: Sleeper.dm
		public override dynamic alter_health( Mob_Living M = null ) {
			int amount = 0;

			
			if ( Convert.ToDouble( M.health ) > 0 ) {
				
				if ( Convert.ToDouble( M.getOxyLoss() ) >= 10 ) {
					amount = Num13.MaxInt( ((int)( 0.15 )), 1 );
					M.adjustOxyLoss( -amount );
				} else {
					M.adjustOxyLoss( -12 );
				}
				M.updatehealth();
			}
			M.AdjustParalysis( -4 );
			M.AdjustWeakened( -4 );
			M.AdjustStunned( -4 );
			M.Paralyse( 1 );
			M.Weaken( 1 );
			M.Stun( 1 );

			if ( ( ((Reagents)M.reagents).get_reagent_amount( "inaprovaline" ) ?1:0) < 5 ) {
				((Reagents)M.reagents).add_reagent( "inaprovaline", 5 );
			}
			return null;
		}

		// Function from file: Sleeper.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return null;
			}

			if ( this.occupant != null ) {
				this.go_out();
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: Sleeper.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			dynamic A = null;
			dynamic A2 = null;
			dynamic A3 = null;

			
			switch ((double?)( severity )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( this )) {
						A = _a;
						
						A.loc = this.loc;
						this.ex_act( severity );
					}
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( this )) {
							A2 = _b;
							
							A2.loc = this.loc;
							this.ex_act( severity );
						}
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( this )) {
							A3 = _c;
							
							A3.loc = this.loc;
							this.ex_act( severity );
						}
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: Sleeper.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic G = null;
			Mob_Living_Carbon_Slime M = null;
			Ent_Dynamic M2 = null;
			Obj O = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( a is Obj_Item_Weapon_Wrench && !( this.occupant != null ) && ( ( this.machine_flags ??0) & 8 ) != 0 ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );

				if ( this.orient == "RIGHT" ) {
					this.orient = "LEFT";

					if ( this.generate_console( Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.EAST )) ) ) ) {
						this.update_icon();
					} else {
						this.orient = "RIGHT";
						GlobalFuncs.to_chat( b, "<span class='warning'>There is no space!</span>" );
					}
				} else {
					this.orient = "RIGHT";

					if ( this.generate_console( Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.WEST )) ) ) ) {
						this.update_icon();
					} else {
						this.orient = "LEFT";
						this.visible_message( "<span class='warning'>There is no space!</span>", "<span class='warning'>" + b + " wants to be hardcore, but his CMO won't let him.</span>" );
					}
				}
				return null;
			}

			if ( !( a is Obj_Item_Weapon_Grab ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			G = a;

			if ( !( G.affecting is Mob ) || Lang13.Bool( G.affecting.locked_to ) ) {
				return null;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( b, "<span class='notice'><B>The sleeper is already occupied!</B></span>" );
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( G.affecting, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == G.affecting ) {
					GlobalFuncs.to_chat( Task13.User, new Txt().item( G.affecting.name ).str( " will not fit into " ).the( this ).item().str( " because they have a slime latched onto their head." ).ToString() );
					return null;
				}
			}
			this.visible_message( new Txt().item( b ).str( " places " ).item( G.affecting.name ).str( " into " ).the( this ).item().str( "." ).ToString() );
			M2 = G.affecting;

			if ( !( M2 is Mob_Living ) || Lang13.Bool( M2.locked_to ) ) {
				return null;
			}
			M2.forceMove( this );
			((dynamic)M2).reset_view();
			this.occupant = M2;
			GlobalFuncs.to_chat( M2, "<span class='notice'><b>You feel an anaesthetising air surround you. You go numb as your senses turn inward.</b></span>" );
			((Obj)this.connected).process();

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _b;
				
				O.loc = this.loc;
			}
			this.add_fingerprint( b );
			GlobalFuncs.qdel( G );

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				this.set_light( this.light_range_on, this.light_power_on );
			}
			this.update_icon();
			this.sedativeblock = 1;
			Task13.Schedule( ((int)( this.drag_delay ??0 )), (Task13.Closure)(() => {
				this.sedativeblock = 0;
				return;
			}));
			return null;
		}

		// Function from file: Sleeper.dm
		public override int crowbarDestroy( dynamic user = null ) {
			
			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You cannot disassemble " ).the( this ).item().str( ", it's occupied.</span>" ).ToString() );
				return 0;
			}
			return base.crowbarDestroy( (object)(user) );
		}

		// Function from file: Sleeper.dm
		public override bool blob_act( dynamic severity = null ) {
			dynamic A = null;

			
			if ( Rand13.PercentChance( 75 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this )) {
					A = _a;
					
					A.loc = this.loc;
					((Ent_Static)A).blob_act();
				}
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: Sleeper.dm
		public override dynamic process(  ) {
			this.updateDialog();
			return null;
		}

		// Function from file: Sleeper.dm
		public override bool allow_drop(  ) {
			return false;
		}

		// Function from file: Sleeper.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			Mob robit = null;
			Ent_Dynamic A = null;

			
			if ( !( Task13.User is Mob_Living_Carbon_Human ) && !( Task13.User is Mob_Living_Silicon_Robot ) || Task13.User.incapacitated() || Task13.User.lying == true ) {
				return null;
			}

			if ( !( this.occupant != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The sleeper is unoccupied!</span>" );
				return null;
			}

			if ( Task13.User is Mob_Living_Silicon_Robot ) {
				robit = Task13.User;

				if ( robit is Mob_Living_Silicon_Robot && !( ((dynamic)robit).module is Obj_Item_Weapon_RobotModule_Medical ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You do not have the means to do this!</span>" );
					return null;
				}
			}

			if ( !( over_location is Tile ) || over_location.density ) {
				return null;
			}

			if ( !this.Adjacent( over_location ) ) {
				return null;
			}

			if ( !( this.occupant == Task13.User ) && ( !this.Adjacent( Task13.User ) || !Task13.User.Adjacent( over_location ) ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( over_location.contents, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( A.density ) {
					
					if ( A == this || A is Mob ) {
						continue;
					}
					return null;
				}
			}

			if ( this.occupant == Task13.User ) {
				this.visible_message( new Txt().item( Task13.User ).str( " climbs out of " ).the( this ).item().str( "." ).ToString() );
			} else {
				this.visible_message( new Txt().item( Task13.User ).str( " removes " ).item( this.occupant.name ).str( " from " ).the( this ).item().str( "." ).ToString() );
			}
			this.go_out( over_location );
			return null;
		}

		// Function from file: Sleeper.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			Mob robit = null;
			Ent_Static L = null;
			Mob_Living_Carbon_Slime M = null;
			Obj OO = null;

			
			if ( !( O is Mob ) ) {
				return false;
			}

			if ( O.loc == user || !( O.loc is Tile ) || !( user.loc is Tile ) ) {
				return false;
			}

			if ( ((Mob)user).incapacitated() || user.lying == true ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)O).anchored ) || !this.Adjacent( user ) || !((Ent_Static)user).Adjacent( this ) || Lang13.Bool( user.contents.Find( this ) ) ) {
				return false;
			}

			if ( O is Mob_Living_SimpleAnimal || O is Mob_Living_Silicon ) {
				return false;
			}

			if ( !( user is Mob_Living_Carbon_Human ) && !( user is Mob_Living_Silicon_Robot ) ) {
				return false;
			}

			if ( user.loc == null ) {
				return false;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " is already occupied!</span>" ).ToString() );
				return false;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				robit = Task13.User;

				if ( robit is Mob_Living_Silicon_Robot && !( ((dynamic)robit).module is Obj_Item_Weapon_RobotModule_Medical ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You do not have the means to do this!</span>" );
					return false;
				}
			}
			L = O;

			if ( !( L is Mob_Living ) || Lang13.Bool( ((dynamic)L).locked_to ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( L, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == L ) {
					GlobalFuncs.to_chat( Task13.User, "" + L.name + " will not fit into the sleeper because they have a slime latched onto their head." );
					return false;
				}
			}

			if ( L == user ) {
				this.visible_message( new Txt().item( user ).str( " climbs into " ).the( this ).item().str( "." ).ToString() );
			} else {
				this.visible_message( new Txt().item( user ).str( " places " ).item( L.name ).str( " into " ).the( this ).item().str( "." ).ToString() );
			}
			((dynamic)L).forceMove( this );
			((dynamic)L).reset_view();
			this.occupant = L;
			GlobalFuncs.to_chat( L, "<span class='notice'><b>You feel an anaesthetising air surround you. You go numb as your senses turn inward.</b></span>" );
			((Obj)this.connected).process();

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
				OO = _b;
				
				OO.loc = this.loc;
			}
			this.add_fingerprint( user );

			if ( user.pulling == L ) {
				((Mob)user).stop_pulling();
			}

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				this.set_light( this.light_range_on, this.light_power_on );
			}
			this.sedativeblock = 1;
			this.update_icon();
			Task13.Sleep( ((int)( this.drag_delay ??0 )) );
			this.sedativeblock = 0;
			return false;
		}

		// Function from file: Sleeper.dm
		public override dynamic RefreshParts(  ) {
			int T = 0;
			Obj_Item_Weapon_StockParts SP = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				
				T += SP.rating;
			}

			dynamic _b = T; // Was a switch-case, sorry for the mess.
			if ( 0<=_b&&_b<=5 ) {
				this.available_options = new ByTable().Set( "inaprovaline", "Inaprovaline" ).Set( "stoxin", "Soporific" ).Set( "dermaline", "Dermaline" ).Set( "bicaridine", "Bicaridine" ).Set( "dexalin", "Dexalin" );
			} else if ( 6<=_b&&_b<=8 ) {
				this.available_options = new ByTable()
					.Set( "inaprovaline", "Inaprovaline" )
					.Set( "stoxin", "Soporific" )
					.Set( "dermaline", "Dermaline" )
					.Set( "bicaridine", "Bicaridine" )
					.Set( "dexalin", "Dexalin" )
					.Set( "phalanximine", "Phalanximine" )
				;
			} else {
				this.available_options = new ByTable()
					.Set( "inaprovaline", "Inaprovaline" )
					.Set( "stoxin", "Soporific" )
					.Set( "dermaline", "Dermaline" )
					.Set( "bicaridine", "Bicaridine" )
					.Set( "dexalin", "Dexalin" )
					.Set( "phalanximine", "Phalanximine" )
					.Set( "spaceacillin", "Spaceacillin" )
				;
			}
			return null;
		}

		// Function from file: Sleeper.dm
		public void check( dynamic user = null ) {
			string t1 = null;

			
			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, "<span class='notice'><B>Occupant (" + this.occupant + ") Statistics:</B></span>" );

				dynamic _a = ((dynamic)this.occupant).stat; // Was a switch-case, sorry for the mess.
				if ( _a==0 ) {
					t1 = "Conscious";
				} else if ( _a==1 ) {
					t1 = "Unconscious";
				} else if ( _a==2 ) {
					t1 = "*dead*";
				}
				GlobalFuncs.to_chat( user, "" + ( Convert.ToDouble( ((dynamic)this.occupant).health ) > 50 ? "<span class='notice'>" : "<span class='warning'> " ) + "	 Health %: " + ((dynamic)this.occupant).health + " (" + t1 + ")</span>" );
				GlobalFuncs.to_chat( user, "" + ( Convert.ToDouble( ((dynamic)this.occupant).bodytemperature ) > 50 ? "<font color='blue'>" : "<font color='red'>" ) + "	 -Core Temperature: " + ( ((dynamic)this.occupant).bodytemperature - 273.41 ) + "&deg;C (" + ( ((dynamic)this.occupant).bodytemperature * 171 - 459.6700134277344 ) + "&deg;F)</FONT><BR></span>" );
				GlobalFuncs.to_chat( user, "" + ( Convert.ToDouble( ((dynamic)this.occupant).getBruteLoss() ) < 60 ? "<span class='notice'>" : "<span class='warning'> " ) + "	 -Brute Damage %: " + ((dynamic)this.occupant).getBruteLoss() + "</span>" );
				GlobalFuncs.to_chat( user, "" + ( Convert.ToDouble( ((dynamic)this.occupant).getOxyLoss() ) < 60 ? "<span class='notice'>" : "<span class='warning'> " ) + "	 -Respiratory Damage %: " + ((dynamic)this.occupant).getOxyLoss() + "</span>" );
				GlobalFuncs.to_chat( user, "" + ( Convert.ToDouble( ((dynamic)this.occupant).getToxLoss() ) < 60 ? "<span class='notice'>" : "<span class='warning'> " ) + "	 -Toxin Content %: " + ((dynamic)this.occupant).getToxLoss() + "</span>" );
				GlobalFuncs.to_chat( user, "" + ( Convert.ToDouble( ((dynamic)this.occupant).getFireLoss() ) < 60 ? "<span class='notice'>" : "<span class='warning'> " ) + "	 -Burn Severity %: " + ((dynamic)this.occupant).getFireLoss() + "</span>" );
				GlobalFuncs.to_chat( user, "<span class='notice'>Expected time till occupant can safely awake: (note: If health is below 20% these times are inaccurate)</span>" );
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>	 " ).item( ((dynamic)this.occupant).paralysis / 5 ).str( " second" ).s().str( " (if around 1 or 2 the sleeper is keeping them asleep.)</span>" ).ToString() );
			} else {
				GlobalFuncs.to_chat( user, "<span class='notice'>There is no one inside!</span>" );
			}
			return;
		}

		// Function from file: Sleeper.dm
		public void inject_chemical( Mob user = null, dynamic chemical = null, double? amount = null ) {
			
			if ( !( this.occupant != null ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>There's no occupant in the sleeper!</span>" );
				return;
			}

			if ( this.occupant.reagents == null ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>The occupant appears to somehow lack a bloodstream. Please consult a shrink.</span>" );
				return;
			}

			if ( ( ((Reagents)this.occupant.reagents).get_reagent_amount( chemical ) ?1:0) + ( amount ??0) > 20 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>Overdose Prevention System: The occupant already has enough " + this.available_options[chemical] + " in their system.</span>" );
				return;
			}
			((Reagents)this.occupant.reagents).add_reagent( chemical, amount );
			GlobalFuncs.to_chat( user, "<span class='notice'>Occupant now has " + ((Reagents)this.occupant.reagents).get_reagent_amount( chemical ) + " units of " + this.available_options[chemical] + " in their bloodstream.</span>" );
			return;
		}

		// Function from file: Sleeper.dm
		public virtual bool go_out( Ent_Static exit = null ) {
			exit = exit ?? this.loc;

			Ent_Dynamic x = null;

			
			if ( !( this.occupant != null ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
				x = _a;
				
				Interface13.Stat( null, this.component_parts.Contains( x ) );

				if ( x is Ent_Dynamic ) {
					continue;
				}
				x.forceMove( this.loc );
			}
			((dynamic)this.occupant).forceMove( exit );
			((dynamic)this.occupant).reset_view();
			this.occupant = null;
			this.update_icon();
			return true;
		}

		// Function from file: Sleeper.dm
		public void cook( dynamic cook_setting = null ) {
			dynamic cooktime = null;

			Interface13.Stat( null, this.available_options.Contains( cook_setting ) );

			if ( !false ) {
				return;
			}
			cooktime = this.available_options[cook_setting];
			this.target_time = Game13.time + Convert.ToDouble( cooktime );
			this.on = true;
			this.setting = cook_setting;
			this.update_icon();
			return;
		}

		// Function from file: Sleeper.dm
		public bool generate_console( Tile T = null ) {
			
			if ( Lang13.Bool( this.connected ) ) {
				this.connected.orient = this.orient;
				this.connected.update_icon();
				return true;
			}

			if ( !T.density ) {
				this.connected = Lang13.Call( this.connected_type, T );
				this.connected.orient = this.orient;
				this.connected.update_icon();
				return true;
			} else {
				return false;
			}
		}

		// Function from file: Sleeper.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = "" + this.base_icon + "_" + ( this.occupant != null ? "1" : "0" ) + ( this.orient == "LEFT" ? null : "-r" );
			return null;
		}

		// Function from file: Sleeper.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			this.go_out();
			_default = base.Destroy( (object)(brokenup) );

			if ( Lang13.Bool( this.connected ) ) {
				this.connected.connected = null;
				GlobalFuncs.qdel( this.connected );
				this.connected = null;
			}
			return _default;
		}

		// Function from file: Sleeper.dm
		public override dynamic power_change(  ) {
			base.power_change();

			if ( !( ( this.stat & 3 ) != 0 ) && this.occupant != null ) {
				this.set_light( this.light_range_on, this.light_power_on );
			} else {
				this.set_light( 0 );
			}
			return null;
		}

		// Function from file: Sleeper.dm
		[Verb]
		[VerbInfo( name: "Enter Sleeper", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_inside(  ) {
			Mob_Living_Carbon_Slime M = null;
			Obj O = null;

			
			if ( Task13.User.isUnconscious() || !( Task13.User is Mob_Living_Carbon_Human || Task13.User is Mob_Living_Carbon_Monkey ) ) {
				return;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'><B>" ).The( this ).item().str( " is already occupied!</B></span>" ).ToString() );
				return;
			}

			if ( Task13.User.incapacitated() || Task13.User.lying == true ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( Task13.User, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == Task13.User ) {
					GlobalFuncs.to_chat( Task13.User, "You're too busy getting your life sucked out of you." );
					return;
				}
			}

			if ( Lang13.Bool( Task13.User.locked_to ) ) {
				return;
			}
			this.visible_message( new Txt().item( Task13.User ).str( " starts climbing into " ).the( this ).item().str( "." ).ToString() );

			if ( GlobalFuncs.do_after( Task13.User, this, this.drag_delay ) ) {
				
				if ( this.occupant != null ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='notice'><B>The sleeper is already occupied!</B></span>" );
					return;
				}

				if ( Lang13.Bool( Task13.User.locked_to ) ) {
					return;
				}
				Task13.User.stop_pulling();
				Task13.User.loc = this;
				Task13.User.reset_view();
				this.occupant = Task13.User;
				((Obj)this.connected).process();

				foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
					O = _b;
					
					GlobalFuncs.qdel( O );
				}
				this.add_fingerprint( Task13.User );

				if ( !( ( this.stat & 3 ) != 0 ) ) {
					this.set_light( this.light_range_on, this.light_power_on );
				}
				this.update_icon();
				return;
			}
			return;
		}

		// Function from file: Sleeper.dm
		[Verb]
		[VerbInfo( name: "Eject Sleeper", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void eject(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}
			this.go_out();
			this.add_fingerprint( Task13.User );
			this.set_light( 0 );
			return;
		}

	}

}