// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Shower : Obj_Machinery {

		public bool on = false;
		public Game_Data mymist = null;
		public bool ismist = false;
		public string watertemp = "cool";
		public int mobpresent = 0;
		public Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Water watersource = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_state_open = "shower_t";
			this.anchored = 1;
			this.use_power = 0;
			this.machine_flags = 2;
			this.ghost_read = false;
			this.icon = "icons/obj/watercloset.dmi";
			this.icon_state = "shower";
		}

		// Function from file: watercloset.dm
		public Obj_Machinery_Shower ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.watersource = new Obj_Item_Weapon_ReagentContainers_Glass_Beaker_Water();
			return;
		}

		// Function from file: watercloset.dm
		public override dynamic process(  ) {
			Ent_Dynamic O = null;
			Ent_Dynamic C = null;
			Ent_Dynamic G = null;

			
			if ( !this.on ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Ent_Dynamic) )) {
				O = _a;
				

				if ( O is Mob_Living_Carbon ) {
					C = O;
					this.check_heat( C );
				}
				this.wash( O );
				O.clean_blood();
				((Reagents)this.watersource.reagents).reaction( O, GlobalVars.TOUCH );

				if ( O is Obj_Item_Weapon_ReagentContainers_Glass ) {
					G = O;
					((Reagents)G.reagents).add_reagent( "water", 5 );
				}
			}
			((Reagents)this.watersource.reagents).reaction( GlobalFuncs.get_turf( this ), GlobalVars.TOUCH );
			return null;
		}

		// Function from file: watercloset.dm
		public void check_heat( Ent_Dynamic C = null ) {
			
			if ( !this.on || this.watertemp == "cool" ) {
				return;
			}

			if ( this.watertemp == "freezing cold" ) {
				((dynamic)C).bodytemperature = Num13.MaxInt( ((int)( 263.41 )), Convert.ToInt32( ((dynamic)C).bodytemperature - 0.5 ) );
				return;
			}

			if ( this.watertemp == "searing hot" ) {
				((dynamic)C).bodytemperature = Num13.MinInt( ((int)( 573.1500244140625 )), Convert.ToInt32( ((dynamic)C).bodytemperature + 50 ) );
				return;
			}
			return;
		}

		// Function from file: watercloset.dm
		public void wash( Ent_Dynamic O = null ) {
			Ent_Dynamic M = null;
			Ent_Dynamic H = null;
			bool washgloves = false;
			bool washshoes = false;
			bool washmask = false;
			bool washears = false;
			bool washglasses = false;
			dynamic turf = null;
			Obj_Effect E = null;

			
			if ( !this.on ) {
				return;
			}

			if ( O is Mob_Living_Carbon ) {
				M = O;

				if ( Lang13.Bool( ((dynamic)M).r_hand ) ) {
					((Ent_Static)((dynamic)M).r_hand).clean_blood();
				}

				if ( Lang13.Bool( ((dynamic)M).l_hand ) ) {
					((Ent_Static)((dynamic)M).l_hand).clean_blood();
				}

				if ( Lang13.Bool( ((dynamic)M).back ) ) {
					
					if ( ((Ent_Static)((dynamic)M).back).clean_blood() ) {
						((dynamic)M).update_inv_back( 0 );
					}
				}

				if ( M is Mob_Living_Carbon_Human ) {
					H = M;
					washgloves = true;
					washshoes = true;
					washmask = true;
					washears = true;
					washglasses = true;

					if ( Lang13.Bool( ((dynamic)H).wear_suit ) ) {
						washgloves = !GlobalFuncs.is_slot_hidden( ((dynamic)H).wear_suit.body_parts_covered, 1536 );
						washshoes = !GlobalFuncs.is_slot_hidden( ((dynamic)H).wear_suit.body_parts_covered, 96 );
					}

					if ( Lang13.Bool( ((dynamic)H).head ) ) {
						washmask = !GlobalFuncs.is_slot_hidden( ((dynamic)H).head.body_parts_covered, 38912 );
						washglasses = !GlobalFuncs.is_slot_hidden( ((dynamic)H).head.body_parts_covered, 2048 );
						washears = !GlobalFuncs.is_slot_hidden( ((dynamic)H).head.body_parts_covered, 8192 );
					}

					if ( Lang13.Bool( ((dynamic)H).wear_mask ) ) {
						
						if ( washears ) {
							washears = !GlobalFuncs.is_slot_hidden( ((dynamic)H).wear_mask.body_parts_covered, 8192 );
						}

						if ( washglasses ) {
							washglasses = !GlobalFuncs.is_slot_hidden( ((dynamic)H).wear_mask.body_parts_covered, 2048 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).head ) ) {
						
						if ( ((Ent_Static)((dynamic)H).head).clean_blood() ) {
							((dynamic)H).update_inv_head( 0 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).wear_suit ) ) {
						
						if ( ((Ent_Static)((dynamic)H).wear_suit).clean_blood() ) {
							((dynamic)H).update_inv_wear_suit( 0 );
						}
					} else if ( Lang13.Bool( ((dynamic)H).w_uniform ) ) {
						
						if ( ((Ent_Static)((dynamic)H).w_uniform).clean_blood() ) {
							((dynamic)H).update_inv_w_uniform( 0 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).gloves ) && washgloves ) {
						
						if ( ((Ent_Static)((dynamic)H).gloves).clean_blood() ) {
							((dynamic)H).update_inv_gloves( 0 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).shoes ) && washshoes ) {
						
						if ( ((Ent_Static)((dynamic)H).shoes).clean_blood() ) {
							((dynamic)H).update_inv_shoes( 0 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).wear_mask ) && washmask ) {
						
						if ( ((Ent_Static)((dynamic)H).wear_mask).clean_blood() ) {
							((dynamic)H).update_inv_wear_mask( 0 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).glasses ) && washglasses ) {
						
						if ( ((Ent_Static)((dynamic)H).glasses).clean_blood() ) {
							((dynamic)H).update_inv_glasses( 0 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).ears ) && washears ) {
						
						if ( ((Ent_Static)((dynamic)H).ears).clean_blood() ) {
							((dynamic)H).update_inv_ears( 0 );
						}
					}

					if ( Lang13.Bool( ((dynamic)H).belt ) ) {
						
						if ( ((Ent_Static)((dynamic)H).belt).clean_blood() ) {
							((dynamic)H).update_inv_belt( 0 );
						}
					}
				} else if ( Lang13.Bool( ((dynamic)M).wear_mask ) ) {
					
					if ( ((Ent_Static)((dynamic)M).wear_mask).clean_blood() ) {
						((dynamic)M).update_inv_wear_mask( 0 );
					}
				}
			} else {
				O.clean_blood();
			}
			turf = GlobalFuncs.get_turf( this );
			((Ent_Static)turf).clean_blood();

			foreach (dynamic _a in Lang13.Enumerate( turf, typeof(Obj_Effect) )) {
				E = _a;
				

				if ( E is Obj_Effect_Rune || E is Obj_Effect_Decal_Cleanable || E is Obj_Effect_Overlay ) {
					GlobalFuncs.qdel( E );
				}
			}
			return;
		}

		// Function from file: watercloset.dm
		public override dynamic Uncrossed( Ent_Dynamic O = null ) {
			
			if ( O is Mob ) {
				this.mobpresent--;
			}
			base.Uncrossed( O );
			return null;
		}

		// Function from file: watercloset.dm
		public override dynamic Crossed( Ent_Dynamic O = null, dynamic X = null ) {
			base.Crossed( O, (object)(X) );
			this.wash( O );

			if ( O is Mob ) {
				this.mobpresent++;
			}
			return null;
		}

		// Function from file: watercloset.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;

			if ( this.mymist != null ) {
				GlobalFuncs.returnToPool( this.mymist );
			}

			if ( this.on ) {
				this.overlays.Add( new Image( "icons/obj/watercloset.dmi", this, "water", 5, this.dir ) );

				if ( this.watertemp == "freezing" ) {
					return null;
				}

				if ( !this.ismist ) {
					Task13.Schedule( 50, (Task13.Closure)(() => {
						
						if ( this != null && this.on ) {
							this.ismist = true;
							this.mymist = GlobalFuncs.getFromPool( typeof(Obj_Effect_Mist), GlobalFuncs.get_turf( this ) );
						}
						return;
					}));
				} else {
					this.ismist = true;
					this.mymist = GlobalFuncs.getFromPool( typeof(Obj_Effect_Mist), GlobalFuncs.get_turf( this ) );
				}
			} else if ( this.ismist ) {
				this.ismist = true;
				this.mymist = GlobalFuncs.getFromPool( typeof(Obj_Effect_Mist), GlobalFuncs.get_turf( this ) );
				Task13.Schedule( 250, (Task13.Closure)(() => {
					
					if ( this != null && !this.on ) {
						GlobalFuncs.returnToPool( this.mymist );
						this.ismist = false;
					}
					return;
				}));
			}
			return null;
		}

		// Function from file: watercloset.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a.type == typeof(Obj_Item_Device_Analyzer) ) {
				GlobalFuncs.to_chat( b, "<span class='notice'>The water's temperature seems to be " + this.watertemp + ".</span>" );
			}

			if ( this.panel_open ) {
				
				if ( a is Obj_Item_Weapon_Wrench ) {
					((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " starts wrenching " ).the( this ).item().str( " apart.</span>" ).ToString(), new Txt( "<span class='notice'>You start wrenching " ).the( this ).item().str( " apart.</span>" ).ToString() );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 100, 1 );

					if ( GlobalFuncs.do_after( b, this, 50 ) ) {
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " wrenches " ).the( this ).item().str( " apart.</span>" ).ToString(), new Txt( "<span class='notice'>You wrench " ).the( this ).item().str( " apart.</span>" ).ToString() );
						GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ), 2 );
						GlobalFuncs.qdel( this );
					}
				}
			} else if ( a is Obj_Item_Weapon_Wrench ) {
				((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " begins to adjust the " ).item( this ).str( "'s temperature valve with " ).a( a.name ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You begin to adjust the " ).item( this ).str( "'s temperature valve with " ).a( a.name ).item().str( ".</span>" ).ToString() );

				if ( GlobalFuncs.do_after( b, this, 50 ) ) {
					
					switch ((string)( this.watertemp )) {
						case "cool":
							this.watertemp = "freezing cold";
							break;
						case "freezing cold":
							this.watertemp = "searing hot";
							break;
						case "searing hot":
							this.watertemp = "cool";
							break;
					}
					((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " adjusts the " ).item( this ).str( "'s temperature with " ).a( a.name ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You adjust the " ).item( this ).str( "'s temperature with " ).a( a.name ).item().str( ", the water is now " ).item( this.watertemp ).str( ".</span>" ).ToString() );
					this.add_fingerprint( b );
				}
			}
			return null;
		}

		// Function from file: watercloset.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Ent_Dynamic G = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( this.panel_open ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>The shower's maintenance hatch needs to be closed first.</span>" );
				return null;
			}
			this.on = !this.on;
			((Ent_Static)a).visible_message( "<span class='notice'>" + a + " turns the shower " + ( this.on ? "on" : "off" ) + "</span>", "<span class='notice'>You turn the shower " + ( this.on ? "on" : "off" ) + "</span>" );
			this.update_icon();

			if ( this.on ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( this ), typeof(Ent_Dynamic) )) {
					G = _a;
					
					G.clean_blood();
				}
			}
			return null;
		}

		// Function from file: watercloset.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			
			if ( this.on ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You need to turn off " ).the( this ).item().str( " first.</span>" ).ToString() );
				return 0;
			}
			base.togglePanelOpen( (object)(toggleitem), (object)(user), (object)(CC) );
			return 0;
		}

	}

}