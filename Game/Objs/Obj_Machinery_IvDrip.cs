// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_IvDrip : Obj_Machinery {

		public Mob attached = null;
		public bool mode = true;
		public dynamic beaker = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/iv_drip.dmi";
		}

		public Obj_Machinery_IvDrip ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: iv_drip.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );
			GlobalFuncs.to_chat( user, "The " + this + " is " + ( this.mode ? "injecting" : "taking blood" ) + "." );

			if ( Lang13.Bool( this.beaker ) ) {
				
				if ( Lang13.Bool( this.beaker.reagents ) && this.beaker.reagents.reagent_list.len != 0 ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='info'>Attached is " ).a( this.beaker ).item().str( " with " ).item( this.beaker.reagents.total_volume ).str( " units of liquid.</span>" ).ToString() );
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='info'>Attached is " ).a( this.beaker ).str( "empty " ).item().str( ".</span>" ).ToString() );
				}
			} else {
				GlobalFuncs.to_chat( user, "<span class='info'>No chemicals are attached.</span>" );
			}
			GlobalFuncs.to_chat( user, "<span class='info'>It is attached to " + ( this.attached != null ? ((dynamic)( this.attached )) : ((dynamic)( "no one" )) ) + ".</span>" );
			return null;
		}

		// Function from file: iv_drip.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Task13.User is Mob_Dead_Observer || Lang13.Bool( a.stat ) ) {
				return null;
			}

			if ( this.attached != null ) {
				this.visible_message( new Txt().item( this.attached ).str( " is detached from " ).the( this ).item().str( "." ).ToString() );
				this.attached = null;
				this.update_icon();
			} else if ( Lang13.Bool( this.beaker ) ) {
				this.beaker.loc = GlobalFuncs.get_turf( this );
				this.beaker = null;
				this.update_icon();
			} else {
				return base.attack_hand( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: iv_drip.dm
		public override dynamic process(  ) {
			double? transfer_amount = null;
			dynamic amount = null;
			Mob T = null;
			dynamic B = null;

			
			if ( this.attached != null ) {
				
				if ( !( Map13.GetDistance( this, this.attached ) <= 1 && this.attached.loc is Tile ) ) {
					this.visible_message( "The needle is ripped out of " + this.attached + ", doesn't that hurt?" );
					((dynamic)this.attached).apply_damage( 3, "brute", Rand13.Pick(new object [] { "r_arm", "l_arm" }) );
					this.attached = null;
					this.update_icon();
					return null;
				}
			}

			if ( this.attached != null && Lang13.Bool( this.beaker ) ) {
				
				if ( this.mode ) {
					
					if ( Convert.ToDouble( this.beaker.volume ) > 0 ) {
						transfer_amount = 0.2;

						if ( this.beaker.reagents.reagent_list.len == 1 && ((Reagents)this.beaker.reagents).has_reagent( "blood" ) ) {
							transfer_amount = 4;
						}
						((Reagents)this.beaker.reagents).trans_to( this.attached, transfer_amount );
						this.update_icon();
					}
				} else {
					amount = this.beaker.reagents.maximum_volume - this.beaker.reagents.total_volume;
					amount = Num13.MinInt( Convert.ToInt32( amount ), 4 );

					if ( amount == 0 ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							this.visible_message( new Txt().The( this ).item().str( " pings." ).ToString() );
						}
						return null;
					}
					T = this.attached;

					if ( !( T is Mob_Living_Carbon_Human ) ) {
						return null;
					}

					if ( !( T.dna != null ) ) {
						return null;
					}

					if ( T.mutations.Contains( 8 ) ) {
						return null;
					}

					if ( ( ((Reagents)((dynamic)T).vessel).get_reagent_amount( "blood" ) ?1:0) < GlobalVars.BLOOD_VOLUME_SAFE ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							this.visible_message( new Txt().The( this ).item().str( " beeps loudly." ).ToString() );
						}
					}
					B = ((dynamic)T).take_blood( this.beaker, amount );

					if ( Lang13.Bool( B ) ) {
						this.beaker.reagents.reagent_list |= B;
						((Reagents)this.beaker.reagents).update_total();
						((Ent_Static)this.beaker).on_reagent_change();
						((Reagents)this.beaker.reagents).handle_reactions();
						this.update_icon();
					}
				}
			}
			return null;
		}

		// Function from file: iv_drip.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Game_Data M = null;

			
			if ( b is Mob_Dead_Observer ) {
				return null;
			}

			if ( Lang13.Bool( b.stat ) ) {
				return null;
			}

			if ( a is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
				M = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
				((dynamic)M).amount = 2;

				if ( Lang13.Bool( this.beaker ) ) {
					this.beaker.loc = GlobalFuncs.get_turf( this );
					this.beaker = null;
				}
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You dismantle " ).the( this.name ).item().str( ".</span>" ).ToString() );
				GlobalFuncs.qdel( this );
			}

			if ( a is Obj_Item_Weapon_ReagentContainers ) {
				
				if ( !( this.beaker == null ) ) {
					GlobalFuncs.to_chat( b, "There is already a reagent container loaded!" );
					return null;
				}

				if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.beaker = a;
					GlobalFuncs.to_chat( b, new Txt( "You attach " ).the( a ).item().str( " to " ).the( this ).item().str( "." ).ToString() );
					this.update_icon();
					return null;
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: iv_drip.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			Mob H = null;

			base.MouseDrop( over_object, (object)(src_location), over_location, (object)(src_control), (object)(over_control), _params );

			if ( Task13.User is Mob_Dead_Observer ) {
				return null;
			}

			if ( Task13.User.incapacitated() ) {
				return null;
			}

			if ( Task13.User is Mob_Living_SimpleAnimal ) {
				return null;
			}

			if ( this.attached != null ) {
				this.visible_message( new Txt().item( this.attached ).str( " is detached from " ).the( this ).item().ToString() );
				this.attached = null;
				this.update_icon();
				return null;
			}

			if ( GlobalFuncs.in_range( this, Task13.User ) && over_object is Mob_Living_Carbon_Human && Map13.GetDistance( over_object, this ) <= 1 ) {
				H = over_object;

				if ( Lang13.Bool( ((dynamic)H).species ) && ( ((dynamic)H).species.chem_flags & 8 ) != 0 ) {
					H.visible_message( "<span class='warning'>" + Task13.User + " struggles to place the IV into " + H + " but fails.</span>", "<span class='notice'>" + Task13.User + " tries to place the IV into your arm but is unable to.</span>" );
					return null;
				}
				this.visible_message( new Txt().item( Task13.User ).str( " attaches " ).the( this ).item().str( " to " ).the( over_object ).item().str( "." ).ToString() );
				this.attached = over_object;
				this.update_icon();
			}
			return null;
		}

		// Function from file: iv_drip.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			Reagents reagents = null;
			Image filling = null;
			int percent = 0;

			
			if ( this.attached != null ) {
				this.icon_state = "hooked";
			} else {
				this.icon_state = "";
			}
			this.overlays = null;

			if ( Lang13.Bool( this.beaker ) ) {
				reagents = this.beaker.reagents;

				if ( Lang13.Bool( reagents.total_volume ) ) {
					filling = new Image( "icons/obj/iv_drip.dmi", this, "reagent" );
					percent = Num13.Floor( ( reagents.total_volume ??0) / Convert.ToDouble( this.beaker.volume ) * 100 );

					dynamic _a = percent; // Was a switch-case, sorry for the mess.
					if ( 0<=_a&&_a<=9 ) {
						filling.icon_state = "reagent0";
					} else if ( 10<=_a&&_a<=24 ) {
						filling.icon_state = "reagent10";
					} else if ( 25<=_a&&_a<=49 ) {
						filling.icon_state = "reagent25";
					} else if ( 50<=_a&&_a<=74 ) {
						filling.icon_state = "reagent50";
					} else if ( 75<=_a&&_a<=79 ) {
						filling.icon_state = "reagent75";
					} else if ( 80<=_a&&_a<=90 ) {
						filling.icon_state = "reagent80";
					} else if ( 91<=_a&&_a<=Double.PositiveInfinity ) {
						filling.icon_state = "reagent100";
					}
					filling.icon += GlobalFuncs.mix_color_from_reagents( reagents.reagent_list );
					this.overlays.Add( filling );
				}
			}
			return null;
		}

		// Function from file: iv_drip.dm
		[Verb]
		[VerbInfo( name: "Toggle Mode", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void toggle_mode(  ) {
			
			if ( !( Task13.User is Mob_Living ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
				return;
			}

			if ( Task13.User.isUnconscious() ) {
				return;
			}
			this.mode = !this.mode;
			GlobalFuncs.to_chat( Task13.User, "The " + this + " is now " + ( this.mode ? "injecting" : "taking blood" ) + "." );
			return;
		}

	}

}