// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_IvDrip : Obj_Machinery {

		public dynamic attached = null;
		public bool mode = true;
		public dynamic beaker = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/iv_drip.dmi";
			this.icon_state = "iv_drip";
		}

		// Function from file: iv_drip.dm
		public Obj_Machinery_IvDrip ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: iv_drip.dm
		[VerbInfo( access: VerbAccess.InView, range: 125 )]
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );

			if ( !Map13.FetchInView( null, 2 ).Contains( Task13.User ) && Task13.User != this.loc ) {
				return 0;
			}
			Task13.User.WriteMsg( "The IV drip is " + ( this.mode ? "injecting" : "taking blood" ) + "." );

			if ( Lang13.Bool( this.beaker ) ) {
				
				if ( Lang13.Bool( this.beaker.reagents ) && this.beaker.reagents.reagent_list.len != 0 ) {
					Task13.User.WriteMsg( new Txt( "<span class='notice'>Attached is " ).a( this.beaker ).item().str( " with " ).item( this.beaker.reagents.total_volume ).str( " units of liquid.</span>" ).ToString() );
				} else {
					Task13.User.WriteMsg( "<span class='notice'>Attached is an empty " + this.beaker + ".</span>" );
				}
			} else {
				Task13.User.WriteMsg( "<span class='notice'>No chemicals are attached.</span>" );
			}
			Task13.User.WriteMsg( "<span class='notice'>" + ( Lang13.Bool( this.attached ) ? this.attached : ((dynamic)( "No one" )) ) + " is attached.</span>" );
			return 0;
		}

		// Function from file: iv_drip.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			
			if ( !( a is Mob_Living_Carbon_Human ) ) {
				return null;
			}

			if ( Lang13.Bool( this.attached ) ) {
				this.visible_message( new Txt().item( this.attached ).str( " is detached from " ).the( this ).item().ToString() );
				this.attached = null;
				this.update_icon();
				return null;
			} else if ( Lang13.Bool( this.beaker ) ) {
				this.eject_beaker( a );
			} else {
				this.__CallVerb("Toggle Mode" );
			}
			return null;
		}

		// Function from file: iv_drip.dm
		public override int? process( dynamic seconds = null ) {
			int transfer_amount = 0;
			double? fraction = null;
			dynamic amount = null;
			dynamic T = null;
			dynamic B = null;

			
			if ( !Lang13.Bool( this.attached ) ) {
				return 26;
			}

			if ( !( Map13.GetDistance( this, this.attached ) <= 1 && this.attached.loc is Tile ) ) {
				this.attached.WriteMsg( "<span class='userdanger'>The IV drip needle is ripped out of you!</span>" );
				this.attached.apply_damage( 3, "brute", Rand13.Pick(new object [] { "r_arm", "l_arm" }) );
				this.attached = null;
				this.update_icon();
				return 26;
			}

			if ( Lang13.Bool( this.beaker ) ) {
				
				if ( this.mode ) {
					
					if ( Convert.ToDouble( this.beaker.volume ) > 0 ) {
						transfer_amount = 5;

						if ( this.beaker is Obj_Item_Weapon_ReagentContainers_Blood ) {
							transfer_amount = 10;
						}
						fraction = Num13.MinInt( ((int)( transfer_amount / Convert.ToDouble( this.beaker.volume ) )), 1 );
						((Reagents)this.beaker.reagents).reaction( this.attached, GlobalVars.INJECT, fraction, false );
						((Reagents)this.beaker.reagents).trans_to( this.attached, transfer_amount );
						this.update_icon();
					}
				} else {
					amount = this.beaker.reagents.maximum_volume - this.beaker.reagents.total_volume;
					amount = Num13.MinInt( Convert.ToInt32( amount ), 4 );

					if ( amount == 0 ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							this.visible_message( new Txt().The( this ).item().str( " pings." ).ToString() );
						}
						return null;
					}
					T = this.attached;

					if ( !( T is Mob_Living_Carbon_Human ) ) {
						return null;
					}

					if ( Lang13.Bool( T.disabilities & 128 ) ) {
						return null;
					}

					if ( T.dna.species.specflags.Contains( 1024 ) ) {
						return null;
					}

					if ( ( T.vessel.get_reagent_amount( "blood" ) ?1:0) < GlobalVars.BLOOD_VOLUME_SAFE ) {
						
						if ( Rand13.PercentChance( 5 ) ) {
							this.visible_message( new Txt().The( this ).item().str( " beeps loudly." ).ToString() );
							GlobalFuncs.playsound( this.loc, "sound/machines/twobeep.ogg", 50, 1 );
						}
					}
					B = ((Mob_Living_Carbon)T).take_blood( this.beaker, amount );

					if ( Lang13.Bool( B ) ) {
						this.beaker.reagents.reagent_list |= B;
						((Reagents)this.beaker.reagents).update_total();
						((Ent_Static)this.beaker).on_reagent_change();
						((Reagents)this.beaker.reagents).handle_reactions();
						this.update_icon();
					}
				}
			}
			return null;
		}

		// Function from file: iv_drip.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_ReagentContainers ) {
				
				if ( !( this.beaker == null ) ) {
					user.WriteMsg( "<span class='warning'>There is already a reagent container loaded!</span>" );
					return null;
				}

				if ( !Lang13.Bool( user.drop_item() ) ) {
					return null;
				}
				A.loc = this;
				this.beaker = A;
				user.WriteMsg( new Txt( "<span class='notice'>You attach " ).the( A ).item().str( " to " ).the( this ).item().str( ".</span>" ).ToString() );
				this.update_icon();
				return null;
			} else {
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
		}

		// Function from file: iv_drip.dm
		public override dynamic MouseDrop( dynamic over = null, dynamic src_location = null, dynamic over_location = null, string src_control = null, dynamic over_control = null, string _params = null ) {
			
			if ( !( Task13.User is Mob_Living_Carbon_Human ) || !Task13.User.canUseTopic( this, true ) ) {
				return null;
			}

			if ( Lang13.Bool( this.attached ) ) {
				this.visible_message( new Txt( "<span class='warning'>" ).item( this.attached ).str( " is detached from " ).the( this ).item().str( ".</span>" ).ToString() );
				this.attached = null;
				this.update_icon();
				return null;
			}

			if ( !( over is Mob_Living_Carbon_Human ) ) {
				Task13.User.WriteMsg( "<span class='danger'>The drip beeps: Warning, human patients only!</span>" );
				return null;
			}

			if ( this.Adjacent( over ) && Task13.User.Adjacent( over ) ) {
				
				if ( Lang13.Bool( this.beaker ) ) {
					Task13.User.visible_message( new Txt( "<span class='warning'>" ).item( Task13.User ).str( " attaches " ).the( this ).item().str( " to " ).the( over ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You attach " ).the( this ).item().str( " to " ).the( over ).item().str( ".</span>" ).ToString() );
					this.attached = over;
					GlobalVars.SSmachine.processing.Add( this );
					this.update_icon();
				} else {
					Task13.User.WriteMsg( "<span class='warning'>There's nothing attached to the IV drip!</span>" );
				}
			}
			return null;
		}

		// Function from file: iv_drip.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			Image filling = null;
			int percent = 0;

			
			if ( Lang13.Bool( this.attached ) ) {
				
				if ( this.mode ) {
					this.icon_state = "injecting";
				} else {
					this.icon_state = "donating";
				}
			} else if ( this.mode ) {
				this.icon_state = "injectidle";
			} else {
				this.icon_state = "donateidle";
			}
			this.overlays.len = 0;

			if ( Lang13.Bool( this.beaker ) ) {
				
				if ( Lang13.Bool( this.attached ) ) {
					this.overlays.Add( "beakeractive" );
				} else {
					this.overlays.Add( "beakeridle" );
				}

				if ( Lang13.Bool( this.beaker.reagents.total_volume ) ) {
					filling = new Image( "icons/obj/iv_drip.dmi", this, "reagent" );
					percent = Num13.Floor( ( this.beaker.reagents.total_volume ??0) / Convert.ToDouble( this.beaker.volume ) * 100 );

					dynamic _a = percent; // Was a switch-case, sorry for the mess.
					if ( 0<=_a&&_a<=9 ) {
						filling.icon_state = "reagent0";
					} else if ( 10<=_a&&_a<=24 ) {
						filling.icon_state = "reagent10";
					} else if ( 25<=_a&&_a<=49 ) {
						filling.icon_state = "reagent25";
					} else if ( 50<=_a&&_a<=74 ) {
						filling.icon_state = "reagent50";
					} else if ( 75<=_a&&_a<=79 ) {
						filling.icon_state = "reagent75";
					} else if ( 80<=_a&&_a<=90 ) {
						filling.icon_state = "reagent80";
					} else if ( 91<=_a&&_a<=Double.PositiveInfinity ) {
						filling.icon_state = "reagent100";
					}
					filling.icon += GlobalFuncs.mix_color_from_reagents( this.beaker.reagents.reagent_list );
					this.overlays.Add( filling );
				}
			}
			return false;
		}

		// Function from file: iv_drip.dm
		[Verb]
		[VerbInfo( name: "Toggle Mode", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void toggle_mode(  ) {
			
			if ( !( Task13.User is Mob_Living ) ) {
				Task13.User.WriteMsg( "<span class='warning'>You can't do that!</span>" );
				return;
			}

			if ( Task13.User.stat != 0 ) {
				return;
			}
			this.mode = !this.mode;
			Task13.User.WriteMsg( "The IV drip is now " + ( this.mode ? "injecting" : "taking blood" ) + "." );
			this.update_icon();
			return;
		}

		// Function from file: iv_drip.dm
		[Verb]
		[VerbInfo( name: "Remove IV Container", group: "Object", access: VerbAccess.InView, range: 1 )]
		[VerbArg( 1, InputType.Mob )]
		public void eject_beaker( dynamic user = null ) {
			
			if ( !( Task13.User is Mob_Living ) ) {
				Task13.User.WriteMsg( "<span class='warning'>You can't do that!</span>" );
				return;
			}

			if ( Task13.User.stat != 0 ) {
				return;
			}

			if ( Lang13.Bool( this.beaker ) ) {
				this.beaker.loc = GlobalFuncs.get_turf( this );
				this.beaker = null;
				this.update_icon();
			}
			return;
		}

	}

}