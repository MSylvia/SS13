// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Bed_Chair_Vehicle_Adminbus : Obj_Structure_Bed_Chair_Vehicle {

		public bool can_move = true;
		public ByTable passengers = new ByTable();
		public bool unloading = false;
		public int? bumpers = 1;
		public bool? door_mode = false;
		public ByTable spawned_mobs = new ByTable();
		public bool hook = true;
		public ByTable hookshot = new ByTable();
		public Obj_Structure_SinguloChain chain_base = null;
		public ByTable chain = new ByTable();
		public dynamic singulo = null;
		public int? roadlights = 0;
		public Obj_Structure_Buslight lightsource = null;
		public ByTable spawnedbombs = new ByTable();
		public ByTable spawnedlasers = new ByTable();
		public Obj_Structure_Teleportwarp warp = null;
		public Obj_Machinery_Media_Jukebox_Superjuke_Adminbus busjuke = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.pixel_x = -32;
			this.pixel_y = -32;
			this.can_spacemove = true;
			this.icon = "icons/obj/bus.dmi";
			this.icon_state = "adminbus";
			this.layer = 6;
		}

		// Function from file: adminbus.dm
		public Obj_Structure_Bed_Chair_Vehicle_Adminbus ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic T = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			T = GlobalFuncs.get_turf( this );
			((Tile)T).turf_animation( "icons/effects/160x160.dmi", "busteleport", -64, -32, 5, "sound/effects/busteleport.ogg" );
			this.overlays.Add( new Image( this.icon, "underbus", 3 ) );
			this.overlays.Add( new Image( this.icon, "ad" ) );
			this.dir = ((int)( GlobalVars.EAST ));
			GlobalFuncs.playsound( this, "sound/misc/adminbus.ogg", 50, 0, 0 );
			this.lightsource = new Obj_Structure_Buslight( this.loc );
			this.update_lightsource();
			this.warp = new Obj_Structure_Teleportwarp( this.loc );
			this.busjuke = new Obj_Machinery_Media_Jukebox_Superjuke_Adminbus( this.loc );
			this.busjuke.dir = ((int)( GlobalVars.EAST ));
			this.layer = 6;
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.layer = 6;
				return;
			}));
			return;
		}

		// Function from file: adminbus.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			return false;
		}

		// Function from file: adminbus.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			return 0;
		}

		// Function from file: adminbus.dm
		public override bool singuloCanEat(  ) {
			return false;
		}

		// Function from file: adminbus.dm
		public override dynamic cultify(  ) {
			return null;
		}

		// Function from file: adminbus.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			this.visible_message( "<span class='warning'>The bus withstands the explosion with no damage.</span>" );
			return false;
		}

		// Function from file: adminbus.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			this.visible_message( "<span class='warning'>The projectile harmlessly bounces off the bus.</span>" );
			return null;
		}

		// Function from file: adminbus.dm
		public override dynamic emp_act( int severity = 0 ) {
			return null;
		}

		// Function from file: adminbus.dm
		public override bool unlock_atom( dynamic AM = null ) {
			bool _default = false;

			dynamic M = null;

			_default = base.unlock_atom( (object)(AM) );

			if ( !_default ) {
				return _default;
			}
			M = AM;
			this.remove_HUD( M );
			M.flags &= 65407;
			return _default;
		}

		// Function from file: adminbus.dm
		public override void manual_unbuckle( dynamic user = null ) {
			dynamic M = null;

			
			if ( Lang13.Bool( this.occupant ) && this.occupant == user ) {
				M = this.occupant;
				((Ent_Static)M).visible_message( new Txt( "<span class='notice'>" ).item( M.name ).str( " unbuckles " ).himself_herself_itself_themself().str( "!</span>" ).ToString(), new Txt( "You unbuckle yourself from " ).the( this ).item().str( "." ).ToString() );
				this.unlock_atom( M );
				this.add_fingerprint( user );
			} else if ( this.door_mode == true ) {
				
				if ( Lang13.Bool( Lang13.FindIn( user, this.passengers ) ) ) {
					this.freed( user );
					return;
				} else {
					this.capture_mob( user, true );
					return;
				}
			} else if ( user is Mob_Living_Carbon_Human_Dummy || user is Mob_Living_SimpleAnimal_Corgi_Ian ) {
				
				if ( Lang13.Bool( Lang13.FindIn( user, this.passengers ) ) ) {
					this.freed( user );
					return;
				} else {
					this.capture_mob( user, true );
					return;
				}
			} else if ( Lang13.Bool( Lang13.FindIn( user, this.passengers ) ) ) {
				GlobalFuncs.to_chat( user, "<span class='notice'>You may not leave the Adminbus at the current time.</span>" );
				return;
			} else {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You may not climb into " ).the( this ).item().str( " while its door is closed.</span>" ).ToString() );
				return;
			}
			return;
		}

		// Function from file: adminbus.dm
		public override bool lock_atom( dynamic AM = null ) {
			bool _default = false;

			dynamic M = null;

			_default = base.lock_atom( (object)(AM) );

			if ( !_default ) {
				return _default;
			}
			M = AM;
			M.flags |= 128;
			this.add_HUD( M );
			return _default;
		}

		// Function from file: adminbus.dm
		public override void buckle_mob( dynamic M = null, dynamic user = null ) {
			
			if ( M != user || !( M is Mob ) || Map13.GetDistance( this, user ) > 1 || ((Mob)user).restrained() || user.lying == true || Lang13.Bool( user.stat ) || Lang13.Bool( M.locked_to ) || user is Mob_Living_Silicon || this.destroyed ) {
				return;
			}

			if ( !( user is Mob_Living_Carbon_Human_Dummy || user is Mob_Living_SimpleAnimal_Corgi_Ian ) ) {
				
				if ( !Lang13.Bool( this.occupant ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Only the gods have the power to drive this monstrosity.</span>" );
					return;
				} else if ( this.door_mode == true ) {
					this.capture_mob( user, true );
					return;
				} else {
					GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You may not climb into " ).the( this ).item().str( " while its door is closed.</span>" ).ToString() );
				}
			} else if ( Lang13.Bool( this.occupant ) ) {
				this.capture_mob( M, true );
				return;
			} else {
				
				if ( !((Mob)user).check_rights( 16384 ) ) {
					GlobalFuncs.to_chat( user, "<span class='notice'>Oh you are a god alright, but you don't seem to have your Adminbus driver license!</span>" );
					return;
				}
				((Ent_Static)user).visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " climbs onto " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='notice'>You climb onto " ).the( this ).item().str( "!</span>" ).ToString() );
				this.lock_atom( user );
				this.add_fingerprint( user );
				GlobalFuncs.playsound( this, "sound/machines/hiss.ogg", 50, 0, 0 );
			}
			return;
		}

		// Function from file: adminbus.dm
		public override dynamic Bump(Ent_Static Obstacle = null, dynamic yes = null) {
			Obj H = null;

			
			if ( Obstacle is Obj_Machinery_Teleport_Hub ) {
				H = Obstacle;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					
					if ( Lang13.Bool( ((dynamic)H).engaged ) ) {
						((dynamic)H).teleport( this );
						((dynamic)H).use_power( 5000 );
						this.Move();
					}
					return;
				}));
			}

			if ( this.can_move ) {
				this.can_move = false;
				this.forceMove( Map13.GetStep( this, this.dir ) );
				Task13.Sleep( 1 );
				this.can_move = true;
			} else {
				return base.Bump( Obstacle );
			}
			return null;
		}

		// Function from file: adminbus.dm
		public override void HealthCheck(  ) {
			this.health = 9001;
			return;
		}

		// Function from file: antag_madness.dm
		public void antag_madness_adminbus( dynamic M = null ) {
			ByTable role_list = null;
			bool got_a_job = false;
			dynamic choice = null;
			dynamic T = null;

			
			if ( !Lang13.Bool( M.mind ) ) {
				return;
			}

			if ( !( M is Mob_Living_Carbon_Human ) && !( M is Mob_Living_Carbon_Monkey ) ) {
				return;
			}
			role_list = new ByTable(new object [] { "traitor", "changeling", "vampire", "cult", "rev", "nuke", "deathsquad", "wizard", "monkey" });
			got_a_job = false;

			if ( M is Mob_Living_Carbon_Monkey ) {
				role_list = new ByTable(new object [] { "cult", "monkey" });
			}

			while (role_list.len > 0) {
				choice = Rand13.PickFromTable( role_list );

				if ( GlobalFuncs.create_madness( M, choice ) ) {
					got_a_job = true;
					break;
				} else {
					role_list.Remove( choice );
				}
			}

			if ( !got_a_job ) {
				GlobalFuncs.to_chat( M, "<span class='notice'>\"Hm, I guess it was nothing. I did remember everything after all.\"</span>" );
				return;
			}
			T = GlobalFuncs.get_turf( M );
			((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
			GlobalFuncs.to_chat( M, "<span class='danger'>You get the feeling that you're not the only one who remembered his true origin. Will they be your allies or your foes? That is for you to decide.</span>" );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Adminbus_Deletion( Mob bususer = null ) {
			int? i = null;
			dynamic A = null;
			dynamic L = null;
			Ent_Dynamic B = null;
			Obj_Structure_SinguloChain N = null;
			Obj_Structure_Hookshot H = null;
			dynamic T = null;
			Mob M = null;

			
			if ( bususer != null ) {
				((dynamic)bususer.gui_icons.adminbus_delete).icon_state = "icon_delete-push";

				if ( Interface13.Alert( bususer, "This will free all passengers, remove any spawned mobs/laserguns/bombs, " + ( Lang13.Bool( this.singulo ) ? "free the captured singularity" : "" ) + ", and remove all the entities associated with the bus(chains, roadlights, jukebox,...) Are you sure?", "Adminbus Deletion", "Yes", "No" ) != "Yes" ) {
					((dynamic)bususer.gui_icons.adminbus_delete).icon_state = "icon_delete";
					return;
				}
			}
			i = null;
			i = this.passengers.len;

			while (( i ??0) > 0) {
				A = this.passengers[i];

				if ( A is Mob_Living ) {
					L = A;
					this.freed( L );
				} else if ( A is Obj_Machinery_Bot ) {
					B = A;

					switch ((int)( this.dir )) {
						case 2:
							B.x = this.x - 1;
							break;
						case 8:
							B.y = this.y + 1;
							break;
						case 1:
							B.x = this.x + 1;
							break;
						case 4:
							B.y = this.y - 1;
							break;
					}
					((dynamic)B).turn_on();
					B.flags &= 65407;
					B.anchored = 0;
					this.passengers.Remove( B );
				}
				i--;
			}
			this.delete_bombs();
			this.delete_lasers();
			this.remove_mobs();

			if ( Lang13.Bool( this.singulo ) ) {
				((Obj_Machinery_Singularity)this.singulo).on_release();
			}

			foreach (dynamic _b in Lang13.Enumerate( this.chain, typeof(Obj_Structure_SinguloChain) )) {
				N = _b;
				
				GlobalFuncs.qdel( N );
			}

			foreach (dynamic _c in Lang13.Enumerate( this.hookshot, typeof(Obj_Structure_Hookshot) )) {
				H = _c;
				
				GlobalFuncs.qdel( H );
			}
			this.busjuke.disconnect_media_source();
			GlobalFuncs.qdel( this.busjuke );
			GlobalFuncs.qdel( this.warp );
			GlobalFuncs.qdel( this.lightsource );
			T = GlobalFuncs.get_turf( this );
			((Tile)T).turf_animation( "icons/effects/160x160.dmi", "busteleport", -64, -32, 5, "sound/effects/busteleport.ogg" );

			if ( this.locked_atoms.len != 0 ) {
				M = this.locked_atoms[1];
				M.hud_used.remove_adminbus_hud();
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Mounted_Jukebox( Mob bususer = null ) {
			Icon13.Flick( "icon_jukebox-push", bususer.gui_icons.adminbus_juke );
			this.busjuke.attack_hand( bususer );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Delay_Antag( dynamic M = null, int? delay = null ) {
			delay = delay ?? 100;

			
			if ( !Lang13.Bool( M.mind ) ) {
				return;
			}

			if ( !( M is Mob_Living_Carbon_Human ) && !( M is Mob_Living_Carbon_Monkey ) ) {
				return;
			}
			GlobalFuncs.to_chat( M, "<span class='rose'>You feel like you forgot something important!</span>" );
			Task13.Sleep( ((int)( ( delay ??0) / 2 )) );
			GlobalFuncs.to_chat( M, "<span class='rose'>You're starting to remember...</span>" );
			Task13.Sleep( ((int)( ( delay ??0) / 2 )) );
			GlobalFuncs.to_chat( M, "<span class='danger'>OH THAT'S RIGHT!</span>" );
			Task13.Sleep( 20 );
			this.antag_madness_adminbus( M );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void antagify_passengers( int? delay = null ) {
			dynamic M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.passengers )) {
				M = _a;
				
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.Delay_Antag( M, delay );
					return;
				}));
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Make_Antag( Mob bususer = null ) {
			ByTable delays = null;
			dynamic delay = null;
			dynamic M = null;

			
			if ( this.passengers.len == 0 ) {
				Icon13.Flick( "icon_antag-flick", bususer.gui_icons.adminbus_antag );
				GlobalFuncs.to_chat( bususer, "<span class='warning'>There are no passengers to make antag.</span>" );
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_antag).icon_state = "icon_antag-push";
			delays = new ByTable(new object [] { "CANCEL", "No Delay", "10 seconds", "30 seconds", "1 minute", "5 minutes", "15 minutes" });
			delay = Interface13.Input( "How much delay before the transformation occurs?", "Antag Madness", null, null, delays, InputType.Any );

			dynamic _b = delay; // Was a switch-case, sorry for the mess.
			if ( _b=="CANCEL" ) {
				((dynamic)bususer.gui_icons.adminbus_antag).icon_state = "icon_antag";
				return;
			} else if ( _b=="No Delay" ) {
				((dynamic)bususer.gui_icons.adminbus_antag).icon_state = "icon_antag";

				foreach (dynamic _a in Lang13.Enumerate( this.passengers )) {
					M = _a;
					
					Task13.Schedule( 0, (Task13.Closure)(() => {
						GlobalFuncs.to_chat( M, "<span class='danger'>YOU JUST REMEMBERED SOMETHING IMPORTANT!</span>" );
						Task13.Sleep( 20 );
						this.antag_madness_adminbus( M );
						return;
					}));
				}
			} else if ( _b=="10 seconds" ) {
				this.antagify_passengers( 100 );
			} else if ( _b=="30 seconds" ) {
				this.antagify_passengers( 300 );
			} else if ( _b=="1 minute" ) {
				this.antagify_passengers( 600 );
			} else if ( _b=="5 minutes" ) {
				this.antagify_passengers( 3000 );
			} else if ( _b=="15 minutes" ) {
				this.antagify_passengers( 9000 );
			}
			((dynamic)bususer.gui_icons.adminbus_antag).icon_state = "icon_antag";
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Send_Home( Mob bususer = null ) {
			dynamic T1 = null;
			dynamic M = null;
			dynamic T2 = null;

			
			if ( this.passengers.len == 0 ) {
				Icon13.Flick( "icon_home-flick", bususer.gui_icons.adminbus_home );
				GlobalFuncs.to_chat( bususer, "<span class='warning'>There are no passengers to send.</span>" );
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_home).icon_state = "icon_home-push";

			if ( Interface13.Alert( bususer, "Send all mobs among the passengers back where they first appeared? (Risky: This sends them back where their \"object\" was created. If they were cloned they will teleport back at genetics, If they had their species changed they'll spawn back where it happenned, etc...)", "Adminbus", "Yes", "No" ) != "Yes" ) {
				((dynamic)bususer.gui_icons.adminbus_home).icon_state = "icon_home";
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_home).icon_state = "icon_home";
			T1 = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T1 ) ) {
				((Tile)T1).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
			}

			foreach (dynamic _a in Lang13.Enumerate( this.passengers )) {
				M = _a;
				
				this.freed( M );
				((Mob)M).send_back();
				T2 = GlobalFuncs.get_turf( M );

				if ( Lang13.Bool( T2 ) ) {
					((Tile)T2).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
				}
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void join_team( dynamic A = null, string team = null ) {
			Mob M = null;
			Obj_Item_Packobelongings pack = null;
			Obj_Item I = null;
			Obj_Item G = null;
			Obj_Item_Weapon_Card_Id_Thunderdome ident = null;
			Mob H = null;
			Mob K = null;
			Obj_Item_Clothing_Monkeyclothes_JumpsuitGreen JS = null;
			Ent_Static olduniform = null;
			Ent_Static oldhat = null;
			Mob H2 = null;
			Mob K2 = null;
			Obj_Item_Clothing_Monkeyclothes_JumpsuitRed JS2 = null;
			Ent_Static olduniform2 = null;
			Ent_Static oldhat2 = null;
			Ent_Dynamic B = null;
			dynamic T = null;

			
			if ( A is Mob_Living ) {
				M = A;
				this.freed( M );
				pack = null;

				switch ((string)( team )) {
					case "Green":
						pack = new Obj_Item_Packobelongings_Green( this.loc );
						pack.x = GlobalVars.map.tDomeX + 2;
						break;
					case "Red":
						pack = new Obj_Item_Packobelongings_Red( this.loc );
						pack.x = GlobalVars.map.tDomeX - 2;
						break;
				}
				pack.z = GlobalVars.map.tDomeZ;
				pack.y = GlobalVars.map.tDomeY;
				pack.name = "" + M.real_name + "'s belongings";

				foreach (dynamic _b in Lang13.Enumerate( M, typeof(Obj_Item) )) {
					I = _b;
					

					if ( I is Obj_Item_Clothing_Glasses ) {
						G = I;

						if ( Lang13.Bool( ((dynamic)G).prescription ) ) {
							continue;
						}
					}
					M.u_equip( I );

					if ( I != null ) {
						I.loc = M.loc;
						I.layer = Convert.ToDouble( Lang13.Initial( I, "layer" ) );
						I.dropped( M );
						I.loc = pack;
					}
				}
				ident = null;

				switch ((string)( team )) {
					case "Green":
						ident = new Obj_Item_Weapon_Card_Id_Thunderdome_Green( M );
						ident.name = "" + M.real_name + "'s Thunderdome Green ID";
						break;
					case "Red":
						ident = new Obj_Item_Weapon_Card_Id_Thunderdome_Red( M );
						ident.name = "" + M.real_name + "'s Thunderdome Red ID";
						break;
				}

				if ( !( M is Mob_Living_Carbon ) ) {
					GlobalFuncs.qdel( ident );
				}

				switch ((string)( team )) {
					case "Green":
						
						if ( M is Mob_Living_Carbon_Human ) {
							H = M;
							H.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Green( H ), 14 );
							H.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Brown( H ), 12 );
							H.equip_to_slot_or_del( ident, 7 );
							H.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Thunderdome_Green( H ), 6 );
							H.regenerate_icons();
						} else if ( M is Mob_Living_Carbon_Monkey ) {
							K = M;
							JS = new Obj_Item_Clothing_Monkeyclothes_JumpsuitGreen( K );
							olduniform = null;
							oldhat = null;

							if ( Lang13.Bool( ((dynamic)K).uniform ) ) {
								olduniform = ((dynamic)K).uniform;
								((dynamic)K).uniform = null;
								olduniform.loc = pack;
							}
							((dynamic)K).uniform = JS;
							((dynamic)K).uniform.loc = K;

							if ( Lang13.Bool( ((dynamic)K).hat ) ) {
								oldhat = ((dynamic)K).hat;
								((dynamic)K).hat = null;
								oldhat.loc = pack;
							}
							K.equip_to_slot_or_del( ident, 5 );
							K.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Thunderdome_Green( K ), 4 );
							K.regenerate_icons();
						}
						break;
					case "Red":
						
						if ( M is Mob_Living_Carbon_Human ) {
							H2 = M;
							H2.equip_to_slot_or_del( new Obj_Item_Clothing_Under_Color_Red( H2 ), 14 );
							H2.equip_to_slot_or_del( new Obj_Item_Clothing_Shoes_Brown( H2 ), 12 );
							H2.equip_to_slot_or_del( ident, 7 );
							H2.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Thunderdome_Red( H2 ), 6 );
							H2.regenerate_icons();
						} else if ( M is Mob_Living_Carbon_Monkey ) {
							K2 = M;
							JS2 = new Obj_Item_Clothing_Monkeyclothes_JumpsuitRed( K2 );
							olduniform2 = null;
							oldhat2 = null;

							if ( Lang13.Bool( ((dynamic)K2).uniform ) ) {
								olduniform2 = ((dynamic)K2).uniform;
								((dynamic)K2).uniform = null;
								olduniform2.loc = pack;
							}
							((dynamic)K2).uniform = JS2;
							((dynamic)K2).uniform.loc = K2;

							if ( Lang13.Bool( ((dynamic)K2).hat ) ) {
								oldhat2 = ((dynamic)K2).hat;
								((dynamic)K2).hat = null;
								oldhat2.loc = pack;
							}
							K2.equip_to_slot_or_del( ident, 5 );
							K2.equip_to_slot_or_del( new Obj_Item_Weapon_Storage_Belt_Thunderdome_Red( K2 ), 4 );
							K2.regenerate_icons();
						}
						break;
				}

				if ( pack.contents.len == 0 ) {
					GlobalFuncs.qdel( pack );
				}

				switch ((string)( team )) {
					case "Green":
						M.loc = Rand13.PickFromTable( GlobalVars.tdome1 );
						break;
					case "Red":
						M.loc = Rand13.PickFromTable( GlobalVars.tdome2 );
						break;
				}
				GlobalFuncs.to_chat( M, "<span class='danger'>You have been chosen to fight for the " + team + " Team. " + Rand13.Pick(new object [] { "The wheel of fate is turning!", "Heaven or Hell!", "Set Spell Card!", "Hologram Summer Again!", "Get ready for the next battle!", "Fight for your life!" }) + "</span>" );
			} else if ( A is Obj_Machinery_Bot ) {
				B = A;
				B.forceMove( Map13.GetStep( this, Num13.Rotate( this.dir, -90 ) ) );
				((dynamic)B).turn_on();
				B.flags &= 65407;
				B.anchored = 0;
				this.passengers.Remove( B );

				switch ((string)( team )) {
					case "Green":
						B.loc = Rand13.PickFromTable( GlobalVars.tdome1 );
						break;
					case "Red":
						B.loc = Rand13.PickFromTable( GlobalVars.tdome2 );
						break;
				}
			}
			T = GlobalFuncs.get_turf( A );

			if ( Lang13.Bool( T ) ) {
				((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg", "#00FF00" );
			}
			Task13.Sleep( 1 );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Sendto_Thunderdome_Arena_Red( Mob bususer = null ) {
			dynamic T = null;
			int? i = null;
			dynamic A = null;

			
			if ( this.passengers.len == 0 ) {
				Icon13.Flick( "icon_tdred-flick", bususer.gui_icons.adminbus_tdred );
				GlobalFuncs.to_chat( bususer, "<span class='warning'>There are no passengers to send.</span>" );
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tdred).icon_state = "icon_tdred-push";

			if ( Interface13.Alert( bususer, "Send all passengers to the thunderdome's Red Team?", "Adminbus", "Yes", "No" ) != "Yes" ) {
				((dynamic)bususer.gui_icons.adminbus_tdred).icon_state = "icon_tdred";
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tdred).icon_state = "icon_tdred";
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
			}
			i = null;
			i = this.passengers.len;

			while (( i ??0) > 0) {
				A = this.passengers[i];
				this.join_team( A, "Red" );
				i--;
			}
			GlobalFuncs.to_chat( bususer, "The passengers' belongings were stored inside the Thunderdome's admin lodge." );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Sendto_Thunderdome_Arena_Green( Mob bususer = null ) {
			dynamic T = null;
			int? i = null;
			dynamic A = null;

			
			if ( this.passengers.len == 0 ) {
				Icon13.Flick( "icon_tdgreen-flick", bususer.gui_icons.adminbus_tdgreen );
				GlobalFuncs.to_chat( bususer, "<span class='warning'>There are no passengers to send.</span>" );
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tdgreen).icon_state = "icon_tdgreen-push";

			if ( Interface13.Alert( bususer, "Send all passengers to the thunderdome's Green Team?", "Adminbus", "Yes", "No" ) != "Yes" ) {
				((dynamic)bususer.gui_icons.adminbus_tdgreen).icon_state = "icon_tdgreen";
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tdgreen).icon_state = "icon_tdgreen";
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
			}
			i = null;
			i = this.passengers.len;

			while (( i ??0) > 0) {
				A = this.passengers[i];
				this.join_team( A, "Green" );
				i--;
			}
			GlobalFuncs.to_chat( bususer, "The passengers' belongings were stored inside the Thunderdome's admin lodge." );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Sendto_Thunderdome_Arena( Mob bususer = null ) {
			dynamic T = null;
			bool alternate = false;
			int? i = null;
			dynamic A = null;

			
			if ( this.passengers.len == 0 ) {
				Icon13.Flick( "icon_tdarena-flick", bususer.gui_icons.adminbus_tdarena );
				GlobalFuncs.to_chat( bususer, "<span class='warning'>There are no passengers to send.</span>" );
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tdarena).icon_state = "icon_tdarena-push";

			if ( Interface13.Alert( bususer, "Split passengers between the two thunderdome teams?", "Adminbus", "Yes", "No" ) != "Yes" ) {
				((dynamic)bususer.gui_icons.adminbus_tdarena).icon_state = "icon_tdarena";
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tdarena).icon_state = "icon_tdarena";
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
			}
			alternate = true;
			i = null;
			i = this.passengers.len;

			while (( i ??0) > 0) {
				A = this.passengers[i];

				if ( alternate ) {
					this.join_team( A, "Red" );
					alternate = false;
				} else {
					this.join_team( A, "Green" );
					alternate = true;
				}
				i--;
			}
			GlobalFuncs.to_chat( bususer, "The passengers' belongings were stored inside the Thunderdome's admin lodge." );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Sendto_Thunderdome_Obs( Mob bususer = null ) {
			dynamic T = null;
			int? i = null;
			dynamic A = null;
			Ent_Dynamic M = null;
			Ent_Dynamic B = null;
			dynamic TD = null;

			
			if ( this.passengers.len == 0 ) {
				Icon13.Flick( "icon_tdobs-flick", bususer.gui_icons.adminbus_tdobs );
				GlobalFuncs.to_chat( bususer, "<span class='warning'>There are no passengers to send.</span>" );
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tdobs).icon_state = "icon_tdobs-push";

			if ( Interface13.Alert( bususer, "Send all passengers to the thunderdome's spectating area?", "Adminbus", "Yes", "No" ) != "Yes" ) {
				((dynamic)bususer.gui_icons.adminbus_tdobs).icon_state = "icon_tdobs";
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tdobs).icon_state = "icon_tdobs";
			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( T ) ) {
				((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
			}
			i = null;
			i = this.passengers.len;

			while (( i ??0) > 0) {
				A = this.passengers[i];

				if ( A is Mob_Living ) {
					M = A;
					this.freed( M );
					M.forceMove( Rand13.PickFromTable( GlobalVars.tdomeobserve ) );
					GlobalFuncs.to_chat( M, "<span class='notice'>You have been sent to the Thunderdome. Thank you for riding with us and enjoy your games.</span>" );
				} else if ( A is Obj_Machinery_Bot ) {
					B = A;
					B.forceMove( Map13.GetStep( this, Num13.Rotate( this.dir, -90 ) ) );
					((dynamic)B).turn_on();
					B.flags &= 65407;
					B.anchored = 0;
					this.passengers.Remove( B );
					B.forceMove( Rand13.PickFromTable( GlobalVars.tdomeobserve ) );
				}
				TD = GlobalFuncs.get_turf( A );

				if ( Lang13.Bool( TD ) ) {
					((Tile)TD).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg" );
				}
				Task13.Sleep( 1 );
				i--;
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Teleportation( Mob bususer = null ) {
			dynamic A = null;
			Base_Data thearea = null;
			ByTable L = null;
			dynamic T = null;
			dynamic T1 = null;
			dynamic T2 = null;

			
			if ( this.warp.icon_state == "warp_activated" ) {
				return;
			}
			((dynamic)bususer.gui_icons.adminbus_tele).icon_state = "icon_teleport-push";
			this.warp.icon_state = "warp_activated";
			A = Interface13.Input( bususer, "Area to jump to", "Teleportation Warp", A, GlobalVars.adminbusteleportlocs, InputType.Null | InputType.Any );
			thearea = GlobalVars.adminbusteleportlocs[A];

			if ( !( thearea != null ) ) {
				((dynamic)bususer.gui_icons.adminbus_tele).icon_state = "icon_teleport";
				this.warp.icon_state = "";
				return;
			}
			L = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_area_turfs( thearea.type ) )) {
				T = _a;
				
				L.Add( T );
			}

			if ( !( L != null ) || !( L.len != 0 ) ) {
				GlobalFuncs.to_chat( bususer, "No area available." );
				((dynamic)bususer.gui_icons.adminbus_tele).icon_state = "icon_teleport";
				this.warp.icon_state = "";
				return;
			}
			T1 = GlobalFuncs.get_turf( this );
			T2 = Rand13.PickFromTable( L );
			((dynamic)bususer.gui_icons.adminbus_tele).icon_state = "icon_teleport";
			this.warp.icon_state = "";
			this.forceMove( T2 );
			((Tile)T1).turf_animation( "icons/effects/160x160.dmi", "busteleport", -64, -32, 5, "sound/effects/busteleport.ogg" );
			((Tile)T2).turf_animation( "icons/effects/160x160.dmi", "busteleport", -64, -32, 5, "sound/effects/busteleport.ogg" );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void Mass_Repair( Mob bususer = null, Ent_Static centerloc = null, int? repair_range = null ) {
			repair_range = repair_range ?? 3;

			Obj_Machinery M = null;
			Obj_Machinery L = null;
			dynamic T = null;
			Obj_Item_Stack_Tile_Plasteel P = null;
			dynamic F = null;
			Obj_Structure_Cultgirder G = null;
			dynamic T2 = null;
			Obj_Structure_Girder G2 = null;
			dynamic T3 = null;
			Obj_Item_Weapon_Shard S = null;

			
			if ( bususer != null ) {
				Icon13.Flick( "icon_massrepair-push", bususer.gui_icons.adminbus_massrepair );
			}
			this.visible_message( "<span class='notice'>WE BUILD!</span>" );

			if ( !( centerloc != null ) ) {
				centerloc = this.loc;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( repair_range, centerloc ), typeof(Obj_Machinery) )) {
				M = _a;
				

				if ( M is Obj_Machinery_Door_Window ) {
					continue;
				}

				if ( M is Obj_Machinery_Light ) {
					L = M;
					((dynamic)L).fix();
					continue;
				}
				M.stat = 0;
				M.update_icon();
			}

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( repair_range, centerloc ) )) {
				T = _b;
				

				if ( T is Tile_Space ) {
					
					if ( T.loc.type == typeof(Zone) ) {
						continue;
					}
					P = new Obj_Item_Stack_Tile_Plasteel();
					P.build( T );
				} else if ( T is Tile_Simulated_Floor ) {
					F = T;

					if ( Lang13.Bool( F.broken ) || F.burnt ) {
						
						if ( ((Tile)F).is_plating() ) {
							F.icon_state = "plating";
							F.burnt = false;
							F.broken = 0;
						} else {
							((Tile_Simulated_Floor)F).make_plating();
						}
					}
				}
			}

			foreach (dynamic _c in Lang13.Enumerate( Map13.FetchInRange( repair_range, centerloc ), typeof(Obj_Structure_Cultgirder) )) {
				G = _c;
				
				T2 = GlobalFuncs.get_turf( G );
				((Tile)T2).ChangeTurf( typeof(Tile_Simulated_Wall_Cult) );
				GlobalFuncs.qdel( G );
			}

			foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInRange( repair_range, centerloc ), typeof(Obj_Structure_Girder) )) {
				G2 = _d;
				
				T3 = GlobalFuncs.get_turf( G2 );

				if ( G2 is Obj_Structure_Girder_Reinforced ) {
					((Tile)T3).ChangeTurf( typeof(Tile_Simulated_Wall_RWall) );
				} else {
					((Tile)T3).ChangeTurf( typeof(Tile_Simulated_Wall) );
				}
				GlobalFuncs.qdel( G2 );
			}

			foreach (dynamic _e in Lang13.Enumerate( Map13.FetchInRange( repair_range, centerloc ), typeof(Obj_Item_Weapon_Shard) )) {
				S = _e;
				

				if ( S is Obj_Item_Weapon_Shard_Plasma ) {
					new Obj_Item_Stack_Sheet_Glass_Plasmaglass( S.loc );
				} else {
					new Obj_Item_Stack_Sheet_Glass_Glass( S.loc );
				}
				GlobalFuncs.qdel( S );
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void delete_lasers( Mob bususer = null ) {
			int distributed = 0;
			int? i = null;
			Ent_Static L = null;
			Ent_Static C = null;

			Icon13.Flick( "icon_delgiven-push", bususer.gui_icons.adminbus_dellasers );

			if ( this.spawnedlasers.len == 0 ) {
				GlobalFuncs.to_chat( bususer, "No laser guns to delete.</span>" );
				return;
			}
			distributed = 0;
			i = null;
			i = this.spawnedlasers.len;

			while (( i ??0) > 0) {
				L = this.spawnedlasers[i];

				if ( L != null ) {
					
					if ( L.loc is Mob_Living_Carbon ) {
						C = L.loc;
						GlobalFuncs.qdel( L );
						((dynamic)C).regenerate_icons();
					} else {
						GlobalFuncs.qdel( L );
					}
					distributed++;
				}
				this.spawnedlasers.Remove( this.spawnedlasers[i] );
				i--;
			}
			this.update_rearview();
			GlobalFuncs.to_chat( bususer, "Deleted all " + distributed + " laser guns.</span>" );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void give_lasers( Mob bususer = null ) {
			int distributed = 0;
			Mob M = null;
			Obj_Item_Weapon_Gun_Energy_Laser_Admin L = null;
			Obj_Item_Weapon_Gun_Energy_Laser_Admin L2 = null;
			Mob_Living_Carbon C = null;
			Obj_Item_Weapon_Gun_Energy_Laser_Admin L3 = null;
			Obj_Item_Weapon_Gun_Energy_Laser_Admin L4 = null;

			Icon13.Flick( "icon_givelasers-push", bususer.gui_icons.adminbus_givelasers );
			distributed = 0;

			if ( this.locked_atoms.len != 0 ) {
				M = this.locked_atoms[1];

				if ( M is Mob_Living_Carbon ) {
					
					if ( !Lang13.Bool( M.r_hand ) ) {
						L = new Obj_Item_Weapon_Gun_Energy_Laser_Admin( M );
						this.spawnedlasers.Add( L );
						M.equip_to_slot_or_del( L, 5 );
						GlobalFuncs.to_chat( M, "<span class='warning'>Spray and /pray!</span>" );
						M.update_inv_r_hand();
					} else if ( !Lang13.Bool( M.l_hand ) ) {
						L2 = new Obj_Item_Weapon_Gun_Energy_Laser_Admin( M );
						this.spawnedlasers.Add( L2 );
						M.equip_to_slot_or_del( L2, 4 );
						GlobalFuncs.to_chat( M, "<span class='warning'>Spray and /pray!</span>" );
						M.update_inv_l_hand();
					}
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( this.passengers, typeof(Mob_Living_Carbon) )) {
				C = _a;
				

				if ( !Lang13.Bool( C.r_hand ) ) {
					L3 = new Obj_Item_Weapon_Gun_Energy_Laser_Admin( C );
					this.spawnedlasers.Add( L3 );
					C.equip_to_slot_or_del( L3, 5 );
					GlobalFuncs.to_chat( C, "<span class='warning'>Our benefactors have provided you with an infinite laser gun. Spray and /pray!</span>" );
					distributed++;
					C.update_inv_r_hand();
				} else if ( !Lang13.Bool( C.l_hand ) ) {
					L4 = new Obj_Item_Weapon_Gun_Energy_Laser_Admin( C );
					this.spawnedlasers.Add( L4 );
					C.equip_to_slot_or_del( L4, 4 );
					GlobalFuncs.to_chat( C, "<span class='warning'>Our benefactors have provided you with an infinite laser gun. Spray and /pray!</span>" );
					distributed++;
					C.update_inv_l_hand();
				}
			}
			this.update_rearview();
			GlobalFuncs.to_chat( bususer, "" + distributed + " infinite laser guns distributed to passengers.</span>" );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void delete_bombs( Mob bususer = null ) {
			int distributed = 0;
			int? i = null;
			Ent_Static B = null;
			Ent_Static C = null;

			Icon13.Flick( "icon_delgiven-push", bususer.gui_icons.adminbus_delbombs );

			if ( this.spawnedbombs.len == 0 ) {
				GlobalFuncs.to_chat( bususer, "No bombs to delete.</span>" );
				return;
			}
			distributed = 0;
			i = null;
			i = this.spawnedbombs.len;

			while (( i ??0) > 0) {
				B = this.spawnedbombs[i];

				if ( B != null ) {
					
					if ( B.loc is Mob_Living_Carbon ) {
						C = B.loc;
						GlobalFuncs.qdel( B );
						((dynamic)C).regenerate_icons();
					} else {
						GlobalFuncs.qdel( B );
					}
					distributed++;
				}
				this.spawnedbombs.Remove( this.spawnedbombs[i] );
				i--;
			}
			this.update_rearview();
			GlobalFuncs.to_chat( bususer, "Deleted all " + distributed + " bombs.</span>" );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void give_bombs( Mob bususer = null ) {
			int distributed = 0;
			Mob M = null;
			Obj_Item_Device_FuseBomb_Admin B = null;
			Obj_Item_Device_FuseBomb_Admin B2 = null;
			Mob_Living_Carbon C = null;
			Obj_Item_Device_FuseBomb_Admin B3 = null;
			Obj_Item_Device_FuseBomb_Admin B4 = null;

			Icon13.Flick( "icon_givebombs-push", bususer.gui_icons.adminbus_givebombs );
			distributed = 0;

			if ( this.locked_atoms.len != 0 ) {
				M = this.locked_atoms[1];

				if ( M is Mob_Living_Carbon ) {
					
					if ( !Lang13.Bool( M.r_hand ) ) {
						B = new Obj_Item_Device_FuseBomb_Admin( M );
						this.spawnedbombs.Add( B );
						M.equip_to_slot_or_del( B, 5 );
						GlobalFuncs.to_chat( M, "<span class='warning'>Lit and throw!</span>" );
						M.update_inv_r_hand();
					} else if ( !Lang13.Bool( M.l_hand ) ) {
						B2 = new Obj_Item_Device_FuseBomb_Admin( M );
						this.spawnedbombs.Add( B2 );
						M.equip_to_slot_or_del( B2, 4 );
						GlobalFuncs.to_chat( M, "<span class='warning'>Lit and throw!</span>" );
						M.update_inv_l_hand();
					}
				}
			}

			foreach (dynamic _a in Lang13.Enumerate( this.passengers, typeof(Mob_Living_Carbon) )) {
				C = _a;
				

				if ( !Lang13.Bool( C.r_hand ) ) {
					B3 = new Obj_Item_Device_FuseBomb_Admin( C );
					this.spawnedbombs.Add( B3 );
					C.equip_to_slot_or_del( B3, 5 );
					GlobalFuncs.to_chat( C, "<span class='warning'>Our benefactors have provided you with a bomb. Lit and throw!</span>" );
					distributed++;
					C.update_inv_r_hand();
				} else if ( !Lang13.Bool( C.l_hand ) ) {
					B4 = new Obj_Item_Device_FuseBomb_Admin( C );
					this.spawnedbombs.Add( B4 );
					C.equip_to_slot_or_del( B4, 4 );
					GlobalFuncs.to_chat( C, "<span class='warning'>Our benefactors have provided you with a bomb. Lit and throw!</span>" );
					distributed++;
					C.update_inv_l_hand();
				}
			}
			this.update_rearview();
			GlobalFuncs.to_chat( bususer, "" + distributed + " bombs distributed to passengers.</span>" );
			return;
		}

		// Function from file: adminbus_powers.dm
		public void loadsa_goodies( Mob bususer = null, int goodie_type = 0 ) {
			ByTable joy_sound = null;
			ByTable throwzone = null;
			int? i = null;
			dynamic T = null;
			Obj_Item_Weapon_Card_Id_CaptainsSpare S = null;
			dynamic fuckingmoney = null;
			dynamic C = null;

			
			switch ((int)( goodie_type )) {
				case 1:
					Icon13.Flick( "icon_loadsids-push", bususer.gui_icons.adminbus_loadsids );
					this.visible_message( "<span class='notice'>All Access for Everyone!</span>" );
					break;
				case 2:
					Icon13.Flick( "icon_loadsmone-push", bususer.gui_icons.adminbus_loadsmoney );
					this.visible_message( "<span class='notice'>Loads of Money!</span>" );
					break;
			}
			joy_sound = new ByTable(new object [] { "sound/voice/SC4Mayor1.ogg", "sound/voice/SC4Mayor2.ogg", "sound/voice/SC4Mayor3.ogg" });
			GlobalFuncs.playsound( this, Rand13.PickFromTable( joy_sound ), 50, 0, 0 );
			throwzone = new ByTable();
			i = null;
			i = 1;

			while (( i ??0) <= 5) {
				throwzone = new ByTable();

				foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( 5, this ) )) {
					T = _b;
					
					throwzone.Add( T );
				}

				switch ((int)( goodie_type )) {
					case 1:
						S = new Obj_Item_Weapon_Card_Id_CaptainsSpare( this.loc );
						S.throw_at( Rand13.PickFromTable( throwzone ), Rand13.Int( 2, 5 ), 0 );
						break;
					case 2:
						fuckingmoney = null;
						fuckingmoney = Rand13.PickWeighted(new object [] { 2520, typeof(Obj_Item_Weapon_Coin_Gold), 5040, typeof(Obj_Item_Weapon_Coin_Silver), 7560, typeof(Obj_Item_Weapon_Coin_Diamond), 9576, typeof(Obj_Item_Weapon_Coin_Iron), 12096, typeof(Obj_Item_Weapon_Coin_Plasma), 14112, typeof(Obj_Item_Weapon_Coin_Uranium), 14616, typeof(Obj_Item_Weapon_Coin_Clown), 17136, typeof(Obj_Item_Weapon_Coin_Phazon), 18648, typeof(Obj_Item_Weapon_Coin_Adamantine), 20160, typeof(Obj_Item_Weapon_Coin_Mythril), 30242, typeof(Obj_Item_Weapon_Spacecash), 40324, typeof(Obj_Item_Weapon_Spacecash_C10), 50406, typeof(Obj_Item_Weapon_Spacecash_C100), 65535, typeof(Obj_Item_Weapon_Spacecash_C1000) });
						C = Lang13.Call( fuckingmoney, this.loc );
						((Ent_Dynamic)C).throw_at( Rand13.PickFromTable( throwzone ), Rand13.Int( 2, 5 ), 0 );
						break;
				}
				i++;
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void toggle_door( Mob bususer = null, bool? doorstate = null ) {
			doorstate = doorstate ?? false;

			
			if ( doorstate == this.door_mode ) {
				return;
			}

			switch ((bool?)( doorstate )) {
				case false:
					((dynamic)bususer.gui_icons.adminbus_door_0).icon_state = "icon_door_0-on";
					((dynamic)bususer.gui_icons.adminbus_door_1).icon_state = "icon_door_1-off";
					this.door_mode = false;
					this.overlays.Remove( new Image( this.icon, "opendoor" ) );
					break;
				case true:
					((dynamic)bususer.gui_icons.adminbus_door_0).icon_state = "icon_door_0-off";
					((dynamic)bususer.gui_icons.adminbus_door_1).icon_state = "icon_door_1-on";
					this.door_mode = true;
					this.overlays.Add( new Image( this.icon, "opendoor" ) );
					break;
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void toggle_bumpers( Mob bususer = null, int? bumperpower = null ) {
			bumperpower = bumperpower ?? 1;

			
			if ( bumperpower == this.bumpers ) {
				return;
			}

			switch ((int?)( bumperpower )) {
				case 1:
					((dynamic)bususer.gui_icons.adminbus_bumpers_1).icon_state = "icon_bumpers_1-on";
					((dynamic)bususer.gui_icons.adminbus_bumpers_2).icon_state = "icon_bumpers_2-off";
					((dynamic)bususer.gui_icons.adminbus_bumpers_3).icon_state = "icon_bumpers_3-off";
					this.bumpers = 1;
					break;
				case 2:
					((dynamic)bususer.gui_icons.adminbus_bumpers_1).icon_state = "icon_bumpers_1-off";
					((dynamic)bususer.gui_icons.adminbus_bumpers_2).icon_state = "icon_bumpers_2-on";
					((dynamic)bususer.gui_icons.adminbus_bumpers_3).icon_state = "icon_bumpers_3-off";
					this.bumpers = 2;
					break;
				case 3:
					((dynamic)bususer.gui_icons.adminbus_bumpers_1).icon_state = "icon_bumpers_1-off";
					((dynamic)bususer.gui_icons.adminbus_bumpers_2).icon_state = "icon_bumpers_2-off";
					((dynamic)bususer.gui_icons.adminbus_bumpers_3).icon_state = "icon_bumpers_3-on";
					this.bumpers = 3;
					break;
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void toggle_lights( Mob bususer = null, int? lightpower = null ) {
			lightpower = lightpower ?? 0;

			
			if ( lightpower == this.roadlights ) {
				return;
			}

			switch ((int?)( lightpower )) {
				case 0:
					((dynamic)bususer.gui_icons.adminbus_roadlights_0).icon_state = "icon_lights_0-on";
					((dynamic)bususer.gui_icons.adminbus_roadlights_1).icon_state = "icon_lights_1-off";
					((dynamic)bususer.gui_icons.adminbus_roadlights_2).icon_state = "icon_lights_2-off";
					this.lightsource.set_light( 0 );

					if ( this.roadlights == 1 || this.roadlights == 2 ) {
						this.overlays.Remove( new Image( this.icon, "roadlights", 11 ) );
					}
					this.roadlights = 0;
					break;
				case 1:
					((dynamic)bususer.gui_icons.adminbus_roadlights_0).icon_state = "icon_lights_0-off";
					((dynamic)bususer.gui_icons.adminbus_roadlights_1).icon_state = "icon_lights_1-on";
					((dynamic)bususer.gui_icons.adminbus_roadlights_2).icon_state = "icon_lights_2-off";
					this.lightsource.set_light( 2 );

					if ( this.roadlights == 0 ) {
						this.overlays.Add( new Image( this.icon, "roadlights", 11 ) );
					}
					this.roadlights = 1;
					break;
				case 2:
					((dynamic)bususer.gui_icons.adminbus_roadlights_0).icon_state = "icon_lights_0-off";
					((dynamic)bususer.gui_icons.adminbus_roadlights_1).icon_state = "icon_lights_1-off";
					((dynamic)bususer.gui_icons.adminbus_roadlights_2).icon_state = "icon_lights_2-on";
					this.lightsource.set_light( 3 );

					if ( this.roadlights == 0 ) {
						this.overlays.Add( new Image( this.icon, "roadlights", 11 ) );
					}
					this.roadlights = 2;
					break;
			}
			this.update_lightsource();
			return;
		}

		// Function from file: adminbus_powers.dm
		public void mass_rejuvinate( Mob bususer = null ) {
			Mob_Living M = null;

			Icon13.Flick( "icon_massrejuv-push", bususer.gui_icons.adminbus_massrejuv );

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( 3, this ), typeof(Mob_Living) )) {
				M = _a;
				
				M.revive( true );
				M.suiciding = false;
				GlobalFuncs.to_chat( M, "<span class='notice'>THE ADMINBUS IS LOVE. THE ADMINBUS IS LIFE.</span>" );
				Task13.Sleep( 2 );
			}
			this.update_rearview();
			return;
		}

		// Function from file: adminbus_powers.dm
		public void throw_hookshot( Mob bususer = null ) {
			dynamic A = null;
			Obj_Structure_SinguloChain C = null;
			Obj_Structure_SinguloChain N = null;
			Obj_Structure_Hookshot_Claw C2 = null;
			dynamic S = null;
			Obj_Structure_Hookshot A2 = null;

			
			if ( !this.hook && !Lang13.Bool( this.singulo ) ) {
				return;
			}

			if ( Lang13.Bool( this.singulo ) ) {
				((dynamic)bususer.gui_icons.adminbus_hook).icon_state = "icon_hook-push";
				A = Lang13.FindIn( typeof(Obj_Structure_SinguloChain_Anchor), this.chain );

				if ( Lang13.Bool( A ) ) {
					GlobalFuncs.qdel( A );
				}
				((Obj_Machinery_Singularity)this.singulo).on_release();
				this.singulo = null;

				while (this.chain_base != null) {
					C = this.chain_base;
					C.move_child( GlobalFuncs.get_turf( this ) );
					this.chain_base = C.child;
					GlobalFuncs.qdel( C );
					Task13.Sleep( 2 );
				}

				foreach (dynamic _a in Lang13.Enumerate( this.chain, typeof(Obj_Structure_SinguloChain) )) {
					N = _a;
					
					GlobalFuncs.qdel( N );
				}
				this.chain.len = 0;

				if ( !Lang13.Bool( this.singulo ) ) {
					((dynamic)bususer.gui_icons.adminbus_hook).icon_state = "icon_hook";
					this.hook = true;
				}
			} else if ( this.hook ) {
				((dynamic)bususer.gui_icons.adminbus_hook).icon_state = "icon_hook-push";
				this.hook = false;
				C2 = new Obj_Structure_Hookshot_Claw( Map13.GetStep( this, this.dir ) );
				this.hookshot.Add( C2 );
				C2.abus = this;
				S = C2.hook_throw( this.dir );

				if ( Lang13.Bool( S ) ) {
					((dynamic)bususer.gui_icons.adminbus_hook).icon_state = "icon_singulo";
					this.capture_singulo( S );
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( this.hookshot, typeof(Obj_Structure_Hookshot) )) {
						A2 = _b;
						
						Task13.Schedule( 0, (Task13.Closure)(() => {
							A2.hook_back();
							return;
						}));
					}
				}
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void capture_singulo( dynamic S = null ) {
			Ent_Static A = null;
			Obj_Structure_SinguloChain parentchain = null;
			Obj_Structure_SinguloChain_Anchor A2 = null;
			Obj_Structure_SinguloChain C = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.hookshot, typeof(Ent_Static) )) {
				A = _a;
				
				GlobalFuncs.qdel( A );
			}
			this.hookshot.len = 0;
			this.singulo = S;
			((Obj_Machinery_Singularity)S).on_capture();
			parentchain = null;
			A2 = new Obj_Structure_SinguloChain_Anchor( this.loc );

			while (Map13.GetDistance( A2, S ) > 0) {
				A2.forceMove( Map13.GetStepTowardsSimple( A2, S ) );
				C = new Obj_Structure_SinguloChain( A2.loc );
				this.chain.Add( C );
				C.dir = Map13.GetDistance( this, S );

				if ( !( parentchain != null ) ) {
					this.chain_base = C;
				} else {
					parentchain.child = C;
				}
				parentchain = C;
			}

			if ( !( parentchain != null ) ) {
				this.chain_base = A2;
			} else {
				parentchain.child = A2;
			}
			this.chain.Add( A2 );
			A2.target = this.singulo;
			return;
		}

		// Function from file: adminbus_powers.dm
		public void remove_mobs( Mob bususer = null ) {
			dynamic M = null;
			int? xoffset = null;
			dynamic T = null;

			Icon13.Flick( "icon_delmobs-push", bususer.gui_icons.adminbus_delmobs );

			foreach (dynamic _a in Lang13.Enumerate( this.spawned_mobs )) {
				M = _a;
				
				xoffset = -32;

				if ( M is Mob_Living_SimpleAnimal_Hostile_Alien_Queen_Large ) {
					xoffset = -16;
				}
				T = GlobalFuncs.get_turf( M );

				if ( Lang13.Bool( T ) ) {
					((Tile)T).turf_animation( "icons/effects/96x96.dmi", "beamin", xoffset, 0, 5, "sound/weapons/emitter2.ogg" );
				}
				GlobalFuncs.qdel( M );
			}
			this.spawned_mobs.len = 0;
			return;
		}

		// Function from file: adminbus_powers.dm
		public void spawn_mob( Mob bususer = null, int mob_type = 0, int count = 0 ) {
			ByTable turflist = null;
			dynamic T = null;
			int? invocnum = null;
			int? i = null;
			dynamic T2 = null;
			Mob_Living_SimpleAnimal_Hostile_Retaliate_Clown M = null;
			Mob_Living_SimpleAnimal_Hostile_Carp M2 = null;
			Mob_Living_SimpleAnimal_Hostile_Humanoid_Russian M3 = null;
			Mob_Living_SimpleAnimal_Hostile_Bear M4 = null;
			Mob_Living_SimpleAnimal_Hostile_Tree M5 = null;
			Mob_Living_SimpleAnimal_Hostile_GiantSpider M6 = null;
			Mob_Living_SimpleAnimal_Hostile_Alien_Queen_Large M7 = null;

			
			switch ((int)( mob_type )) {
				case 1:
					Icon13.Flick( "icon_spclown-push", bususer.gui_icons.adminbus_spclowns );
					break;
				case 2:
					Icon13.Flick( "icon_spcarp-push", bususer.gui_icons.adminbus_spcarps );
					break;
				case 3:
					Icon13.Flick( "icon_spbear-push", bususer.gui_icons.adminbus_spbears );
					break;
				case 4:
					Icon13.Flick( "icon_sptree-push", bususer.gui_icons.adminbus_sptrees );
					break;
				case 5:
					Icon13.Flick( "icon_spspider-push", bususer.gui_icons.adminbus_spspiders );
					break;
				case 6:
					Icon13.Flick( "icon_spalien-push", bususer.gui_icons.adminbus_spalien );
					break;
			}
			turflist = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( 1, this ) )) {
				T = _b;
				

				if ( !T.density && T != this.loc ) {
					turflist.Add( T );
				}
			}
			invocnum = Num13.MinInt( count, turflist.len );
			i = null;
			i = 0;

			while (( i ??0) < ( invocnum ??0)) {
				T2 = Rand13.PickFromTable( turflist );
				turflist.Remove( T2 );

				switch ((int)( mob_type )) {
					case 1:
						M = new Mob_Living_SimpleAnimal_Hostile_Retaliate_Clown( T2 );
						M.faction = "adminbus mob";
						this.spawned_mobs.Add( M );
						((Tile)T2).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg", "#FFC0FF" );
						break;
					case 2:
						M2 = new Mob_Living_SimpleAnimal_Hostile_Carp( T2 );
						M2.faction = "adminbus mob";
						this.spawned_mobs.Add( M2 );
						((Tile)T2).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg", "#C70AF5" );
						break;
					case 3:
						
						if ( Rand13.PercentChance( 10 ) ) {
							M3 = new Mob_Living_SimpleAnimal_Hostile_Humanoid_Russian( T2 );
							M3.faction = "adminbus mob";
							this.spawned_mobs.Add( M3 );
						} else {
							M4 = new Mob_Living_SimpleAnimal_Hostile_Bear( T2 );
							M4.faction = "adminbus mob";
							this.spawned_mobs.Add( M4 );
						}
						((Tile)T2).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg", "#454545" );
						break;
					case 4:
						M5 = new Mob_Living_SimpleAnimal_Hostile_Tree( T2 );
						M5.faction = "adminbus mob";
						this.spawned_mobs.Add( M5 );
						((Tile)T2).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg", "#232B2C" );
						break;
					case 5:
						M6 = new Mob_Living_SimpleAnimal_Hostile_GiantSpider( T2 );
						M6.faction = "adminbus mob";
						this.spawned_mobs.Add( M6 );
						((Tile)T2).turf_animation( "icons/effects/96x96.dmi", "beamin", -32, 0, 5, "sound/weapons/emitter2.ogg", "#3B2D1C" );
						break;
					case 6:
						M7 = new Mob_Living_SimpleAnimal_Hostile_Alien_Queen_Large( T2 );
						M7.faction = "adminbus mob";
						this.spawned_mobs.Add( M7 );
						((Tile)T2).turf_animation( "icons/effects/96x96.dmi", "beamin", -16, 0, 5, "sound/weapons/emitter2.ogg", "#525288" );
						break;
				}
				Task13.Sleep( 5 );
				i++;
			}
			return;
		}

		// Function from file: adminbus_powers.dm
		public void freed( dynamic L = null ) {
			((Ent_Dynamic)L).forceMove( Map13.GetStep( this, Num13.Rotate( this.dir, -90 ) ) );
			L.anchored = 0;
			L.flags &= 65407;
			L.captured = false;
			L.pixel_x = 0;
			L.pixel_y = 0;
			((Mob)L).update_canmove();
			GlobalFuncs.to_chat( L, new Txt( "<span class='notice'>Thank you for riding with " ).the( this ).item().str( ", have a secure day.</span>" ).ToString() );
			this.passengers.Remove( L );
			this.update_rearview();
			return;
		}

		// Function from file: adminbus_powers.dm
		public void release_passengers( Mob bususer = null ) {
			int? i = null;
			dynamic A = null;
			dynamic L = null;
			Ent_Dynamic B = null;

			this.unloading = true;
			Icon13.Flick( "icon_free-push", bususer.gui_icons.adminbus_free );
			i = null;
			i = this.passengers.len;

			while (( i ??0) > 0) {
				A = this.passengers[i];

				if ( A is Mob_Living ) {
					L = A;
					this.freed( L );
				} else if ( A is Obj_Machinery_Bot ) {
					B = A;
					B.forceMove( Map13.GetStep( this, Num13.Rotate( this.dir, -90 ) ) );
					((dynamic)B).turn_on();
					B.flags &= 65407;
					B.anchored = 0;
					this.passengers.Remove( B );
					this.update_rearview();
				}
				Task13.Sleep( 3 );
				i--;
			}
			this.unloading = false;
			return;
		}

		// Function from file: adminbus.dm
		public void update_rearview(  ) {
			int? i = null;
			dynamic M = null;
			dynamic S = null;
			Icon passenger_img = null;
			dynamic A = null;

			
			if ( Lang13.Bool( this.occupant ) ) {
				i = null;
				i = 1;

				while (( i ??0) <= 16) {
					M = this.occupant;
					M.client.screen -= M.gui_icons.rearviews[i];
					S = M.gui_icons.rearviews[i];
					passenger_img = null;
					A = null;

					if ( ( i ??0) <= this.passengers.len ) {
						A = this.passengers[i];
					}

					if ( !Lang13.Bool( A ) ) {
						S.icon = "icons/adminbus/32x32.dmi";
						S.icon_state = "";
					} else {
						passenger_img = GlobalFuncs.getFlatIcon( A, GlobalVars.SOUTH, 0 );
						S.icon = passenger_img;
						M.gui_icons.rearviews[i] = S;
						M.client.screen += M.gui_icons.rearviews[i];
					}
					i++;
				}
			}
			return;
		}

		// Function from file: adminbus.dm
		public void remove_HUD( dynamic M = null ) {
			
			if ( !Lang13.Bool( M ) || !( M.hud_used != null ) ) {
				return;
			}
			M.hud_used.remove_adminbus_hud();
			return;
		}

		// Function from file: adminbus.dm
		public void add_HUD( dynamic M = null ) {
			
			if ( !Lang13.Bool( M ) || !( M.hud_used != null ) ) {
				return;
			}
			M.hud_used.adminbus_hud();
			this.update_rearview();
			return;
		}

		// Function from file: adminbus.dm
		public void capture_mob( dynamic A = null, bool? selfclimb = null ) {
			selfclimb = selfclimb ?? false;

			dynamic M = null;
			dynamic B = null;

			
			if ( this.passengers.len >= 16 ) {
				GlobalFuncs.to_chat( A, new Txt( "<span class='warning'>" ).the( this ).item().str( " is full!</span>" ).ToString() );
				return;
			}

			if ( this.unloading ) {
				return;
			}

			if ( A is Mob_Living ) {
				M = A;

				if ( M.faction == "adminbus mob" ) {
					return;
				}

				if ( Lang13.Bool( M.flags & 128 ) ) {
					return;
				}
				M.captured = true;
				M.flags |= 128;
				((Ent_Dynamic)M).forceMove( this.loc );
				((Ent_Dynamic)M).change_dir( this.dir );
				((Mob)M).update_canmove();
				this.passengers.Add( M );

				if ( !( selfclimb == true ) ) {
					GlobalFuncs.to_chat( M, new Txt( "<span class='warning'>" ).the( this ).item().str( " picks you up!</span>" ).ToString() );

					if ( Lang13.Bool( this.occupant ) ) {
						GlobalFuncs.to_chat( this.occupant, "" + M.name + " captured!" );
					}
				}
				GlobalFuncs.to_chat( M, new Txt( "<span class='notice'>Welcome aboard " ).the( this ).item().str( ". Please keep your hands and arms inside the bus at all times.</span>" ).ToString() );
				this.add_fingerprint( M );
			} else if ( A is Obj_Machinery_Bot ) {
				B = A;

				if ( Lang13.Bool( B.flags & 128 ) ) {
					return;
				}
				B.turn_off();
				B.flags |= 128;
				B.anchored = 1;
				((Ent_Dynamic)B).forceMove( this.loc );
				((Ent_Dynamic)B).change_dir( this.dir );
				this.passengers.Add( B );
			}
			this.update_mob();
			this.update_rearview();
			return;
		}

		// Function from file: adminbus.dm
		public void handle_mob_bumping(  ) {
			dynamic S = null;
			Mob_Living L = null;
			Obj_Machinery_Bot B = null;
			ByTable hit_sound = null;
			Mob_Living L2 = null;
			Mob_Living L3 = null;
			Obj_Machinery_Bot B2 = null;

			S = GlobalFuncs.get_turf( this );

			switch ((int?)( this.bumpers )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( S, typeof(Mob_Living) )) {
						L = _a;
						

						if ( Lang13.Bool( L.flags & 128 ) ) {
							continue;
						}

						if ( this.passengers.len < 16 ) {
							this.capture_mob( L );
						} else if ( Lang13.Bool( this.occupant ) ) {
							GlobalFuncs.to_chat( this.occupant, "<span class='warning'>There is no place in the bus for any additional passenger.</span>" );
						}
					}

					foreach (dynamic _b in Lang13.Enumerate( S, typeof(Obj_Machinery_Bot) )) {
						B = _b;
						

						if ( Lang13.Bool( B.flags & 128 ) ) {
							continue;
						}

						if ( this.passengers.len < 16 ) {
							this.capture_mob( B );
						}
					}
					break;
				case 2:
					hit_sound = new ByTable(new object [] { "sound/weapons/genhit1.ogg", "sound/weapons/genhit2.ogg", "sound/weapons/genhit3.ogg" });

					foreach (dynamic _c in Lang13.Enumerate( S, typeof(Mob_Living) )) {
						L2 = _c;
						

						if ( Lang13.Bool( L2.flags & 128 ) ) {
							continue;
						}
						L2.take_overall_damage( 5, 0 );

						if ( Lang13.Bool( L2.locked_to ) ) {
							L2.locked_to = 0;
						}
						L2.Stun( 5 );
						L2.Weaken( 5 );
						L2.apply_effect( "stutter", 5 );
						GlobalFuncs.playsound( this, Rand13.PickFromTable( hit_sound ), 50, 0, 0 );
					}
					break;
				case 3:
					
					foreach (dynamic _d in Lang13.Enumerate( S, typeof(Mob_Living) )) {
						L3 = _d;
						

						if ( Lang13.Bool( L3.flags & 128 ) ) {
							continue;
						}
						L3.gib();
						GlobalFuncs.playsound( this, "sound/weapons/bloodyslice.ogg", 50, 0, 0 );
					}

					foreach (dynamic _e in Lang13.Enumerate( S, typeof(Obj_Machinery_Bot) )) {
						B2 = _e;
						

						if ( Lang13.Bool( B2.flags & 128 ) ) {
							continue;
						}
						B2.explode();
					}
					break;
			}
			return;
		}

		// Function from file: adminbus.dm
		public void update_lightsource(  ) {
			Tile T = null;

			T = Map13.GetStep( this, this.dir );

			if ( T.opacity ) {
				this.lightsource.forceMove( T );

				switch ((int?)( this.roadlights )) {
					case 0:
						
						if ( this.lightsource.light_range != 0 ) {
							this.lightsource.set_light( 0 );
						}
						break;
					case 1:
					case 2:
						
						if ( this.lightsource.light_range != 1 ) {
							this.lightsource.set_light( 1 );
						}
						break;
				}
			} else {
				T = Map13.GetStep( T, this.dir );

				if ( T.opacity ) {
					this.lightsource.forceMove( Map13.GetStep( this, this.dir ) );

					switch ((int?)( this.roadlights )) {
						case 0:
							
							if ( this.lightsource.light_range != 0 ) {
								this.lightsource.set_light( 0 );
							}
							break;
						case 1:
							
							if ( this.lightsource.light_range != 1 ) {
								this.lightsource.set_light( 1 );
							}
							break;
						case 2:
							
							if ( this.lightsource.light_range != 2 ) {
								this.lightsource.set_light( 2 );
							}
							break;
					}
				} else {
					this.lightsource.forceMove( T );

					switch ((int?)( this.roadlights )) {
						case 0:
							
							if ( this.lightsource.light_range != 0 ) {
								this.lightsource.set_light( 0 );
							}
							break;
						case 1:
							
							if ( this.lightsource.light_range != 2 ) {
								this.lightsource.set_light( 2 );
							}
							break;
						case 2:
							
							if ( this.lightsource.light_range != 3 ) {
								this.lightsource.set_light( 3 );
							}
							break;
					}
				}
			}
			return;
		}

		// Function from file: adminbus.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			dynamic T = null;
			int? i = null;
			dynamic A = null;
			Ent_Dynamic M = null;
			Ent_Dynamic B = null;
			Obj_Structure_Hookshot H = null;

			T = GlobalFuncs.get_turf( this );
			base.Move( (object)(NewLoc), Dir, step_x, step_y );
			this.update_lightsource();
			this.handle_mob_bumping();

			if ( this.warp != null ) {
				this.warp.forceMove( this.loc );
			}

			if ( this.busjuke != null ) {
				this.busjuke.forceMove( this.loc );
				this.busjuke.change_dir( this.dir );

				if ( Lang13.Bool( this.busjuke.icon_state ) ) {
					this.busjuke.repack();
				}
			}

			if ( this.chain_base != null ) {
				this.chain_base.move_child( T );
			}
			i = null;
			i = 1;

			while (( i ??0) <= this.passengers.len) {
				A = this.passengers[i];

				if ( A is Mob_Living ) {
					M = A;
					M.forceMove( this.loc );
				} else if ( A is Obj_Machinery_Bot ) {
					B = A;
					B.forceMove( this.loc );
				}
				i++;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.hookshot, typeof(Obj_Structure_Hookshot) )) {
				H = _a;
				
				H.forceMove( Map13.GetStep( H, this.dir ) );
			}
			return false;
		}

		// Function from file: adminbus.dm
		public override void update_mob(  ) {
			int? i = null;
			dynamic A = null;
			dynamic L = null;

			
			if ( Lang13.Bool( this.occupant ) ) {
				
				if ( this.occupant is Mob_Living_SimpleAnimal_Corgi ) {
					
					switch ((int)( this.dir )) {
						case 2:
							this.occupant.pixel_x = 6;
							this.occupant.pixel_y = -4;
							break;
						case 8:
							this.occupant.pixel_x = -16;
							this.occupant.pixel_y = 9;
							break;
						case 1:
							this.occupant.pixel_x = 0;
							this.occupant.pixel_y = 0;
							break;
						case 4:
							this.occupant.pixel_x = 16;
							this.occupant.pixel_y = 9;
							break;
					}
				} else {
					
					switch ((int)( this.dir )) {
						case 2:
							this.occupant.pixel_x = 7;
							this.occupant.pixel_y = -12;
							break;
						case 8:
							this.occupant.pixel_x = -25;
							this.occupant.pixel_y = 1;
							break;
						case 1:
							this.occupant.pixel_x = 0;
							this.occupant.pixel_y = 0;
							break;
						case 4:
							this.occupant.pixel_x = 25;
							this.occupant.pixel_y = 1;
							break;
					}
				}
			}
			i = null;
			i = 1;

			while (( i ??0) <= this.passengers.len) {
				A = this.passengers[i];

				if ( A is Mob_Living ) {
					L = A;

					switch ((int?)( i )) {
						case 1:
						case 5:
						case 9:
						case 13:
							
							switch ((int)( this.dir )) {
								case 2:
									L.pixel_x = -6;
									L.pixel_y = 0;
									break;
								case 8:
									L.pixel_x = -13;
									L.pixel_y = 4;
									break;
								case 1:
									L.pixel_x = -6;
									L.pixel_y = 0;
									break;
								case 4:
									L.pixel_x = 12;
									L.pixel_y = 4;
									break;
							}
							break;
						case 2:
						case 6:
						case 10:
						case 14:
							
							switch ((int)( this.dir )) {
								case 2:
									L.pixel_x = 6;
									L.pixel_y = 0;
									break;
								case 8:
									L.pixel_x = -1;
									L.pixel_y = 4;
									break;
								case 1:
									L.pixel_x = 6;
									L.pixel_y = 0;
									break;
								case 4:
									L.pixel_x = 1;
									L.pixel_y = 4;
									break;
							}
							break;
						case 3:
						case 7:
						case 11:
						case 15:
							
							switch ((int)( this.dir )) {
								case 2:
									L.pixel_x = -3;
									L.pixel_y = 8;
									break;
								case 8:
									L.pixel_x = 11;
									L.pixel_y = 4;
									break;
								case 1:
									L.pixel_x = -3;
									L.pixel_y = 8;
									break;
								case 4:
									L.pixel_x = -11;
									L.pixel_y = 4;
									break;
							}
							break;
						case 4:
						case 8:
						case 12:
						case 16:
							
							switch ((int)( this.dir )) {
								case 2:
									L.pixel_x = 7;
									L.pixel_y = -12;
									break;
								case 8:
									L.pixel_x = 22;
									L.pixel_y = 4;
									break;
								case 1:
									L.pixel_x = -3;
									L.pixel_y = 8;
									break;
								case 4:
									L.pixel_x = -22;
									L.pixel_y = 4;
									break;
							}
							break;
					}
					L.dir = this.dir;
				}
				i++;
			}
			return;
		}

		// Function from file: adminbus.dm
		public override void handle_layer(  ) {
			return;
		}

	}

}