// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Operating : Obj_Machinery_Computer {

		public Mob_Living victim = null;
		public dynamic optable = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/operating";
			this.light_color = "#6496FA";
			this.icon_state = "operating";
		}

		// Function from file: Operating.dm
		public Obj_Machinery_Computer_Operating ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.updatemodules();
				return;
				return;
			}));
			return;
		}

		// Function from file: Operating.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				this.updatemodules();

				if ( !( this.optable == null ) && ((Obj_Machinery_Optable)this.optable).check_victim() ) {
					this.victim = this.optable.victim;

					if ( this.victim.stat == 2 ) {
						this.icon_state = "operating-dead";
					} else {
						this.icon_state = "operating-living";
					}
				}
			}
			return null;
		}

		// Function from file: Operating.dm
		public override dynamic process(  ) {
			
			if ( Lang13.Bool( base.process() ) ) {
				this.updateDialog();
			}
			this.update_icon();
			return null;
		}

		// Function from file: Operating.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			} else {
				Task13.User.set_machine( this );
			}
			return null;
		}

		// Function from file: Operating.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			this.add_fingerprint( a );

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			this.updatemodules();
			dat = "<HEAD><TITLE>Operating Computer</TITLE><META HTTP-EQUIV='Refresh' CONTENT='10'></HEAD><BODY>";

			if ( !( this.optable == null ) && ((Obj_Machinery_Optable)this.optable).check_victim() ) {
				this.victim = this.optable.victim;
				dat += new Txt( "\n<B>Patient Information:</B><BR>\n<BR>\n<B>Name:</B> " ).item( this.victim.real_name ).str( "<BR>\n<B>Age:</B> " ).item( ((dynamic)this.victim).age ).str( "<BR>\n<B>Blood Type:</B> " ).item( ((dynamic)this.victim).b_type ).str( "<BR>\n<BR>\n<B>Health:</B> " ).item( this.victim.health ).str( "<BR>\n<B>Brute Damage:</B> " ).item( this.victim.getBruteLoss() ).str( "<BR>\n<B>Toxins Damage:</B> " ).item( this.victim.getToxLoss() ).str( "<BR>\n<B>Fire Damage:</B> " ).item( this.victim.getFireLoss() ).str( "<BR>\n<B>Suffocation Damage:</B> " ).item( this.victim.getOxyLoss() ).str( "<BR>\n<B>Patient Status:</B> " ).item( ( Lang13.Bool( this.victim.stat ) ? "Non-Responsive" : "Stable" ) ).str( "<BR>\n<BR>\n<A HREF='?src=" ).Ref( a ).str( ";mach_close=op'>Close</A>" ).ToString();
			} else {
				this.victim = null;
				dat += new Txt( @"
<B>Patient Information:</B><BR>
<BR>
<B>No Patient Detected</B><BR>
<BR>
<A HREF='?src=" ).Ref( a ).str( ";mach_close=op'>Close</A>" ).ToString();
			}
			Interface13.Browse( a, dat, "window=op" );
			((Mob)a).set_machine( this );
			GlobalFuncs.onclose( a, "op" );
			return null;
		}

		// Function from file: Operating.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: Operating.dm
		public dynamic findoptable(  ) {
			dynamic optablef = null;

			optablef = null;

			foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { GlobalVars.NORTH, GlobalVars.EAST, GlobalVars.SOUTH, GlobalVars.WEST }) )) {
				this.dir = Convert.ToInt32( _a );
				
				optablef = Lang13.FindIn( typeof(Obj_Machinery_Optable), Map13.GetStep( this, this.dir ) );

				if ( !( optablef == null ) ) {
					break;
				}
			}
			return optablef;
		}

		// Function from file: Operating.dm
		public void updatemodules(  ) {
			this.optable = this.findoptable();
			return;
		}

	}

}