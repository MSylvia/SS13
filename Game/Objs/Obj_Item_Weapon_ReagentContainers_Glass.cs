// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_ReagentContainers_Glass : Obj_Item_Weapon_ReagentContainers {

		public string base_name = " ";
		public string label_text = "";
		public ByTable can_be_placed_into = new ByTable(new object [] { 
											typeof(Obj_Machinery_ChemMaster), 
											typeof(Obj_Machinery_ChemDispenser), 
											typeof(Obj_Machinery_Reagentgrinder), 
											typeof(Obj_Structure_Table), 
											typeof(Obj_Structure_Closet), 
											typeof(Obj_Structure_Sink), 
											typeof(Obj_Structure_Centrifuge), 
											typeof(Obj_Item_Weapon_Storage), 
											typeof(Obj_Item_Weapon_Solder), 
											typeof(Obj_Machinery_Atmospherics_Unary_CryoCell), 
											typeof(Obj_Machinery_DnaScannernew), 
											typeof(Obj_Item_Weapon_Grenade_ChemGrenade), 
											typeof(Obj_Item_Weapon_Electrolyzer), 
											typeof(Obj_Machinery_Bot_Medbot), 
											typeof(Obj_Machinery_Computer_Pandemic), 
											typeof(Obj_Item_Weapon_Storage_Secure_Safe), 
											typeof(Obj_Machinery_IvDrip), 
											typeof(Obj_Machinery_Disease2_Incubator), 
											typeof(Obj_Machinery_Disposal), 
											typeof(Obj_Machinery_Apiary), 
											typeof(Mob_Living_SimpleAnimal_Cow), 
											typeof(Mob_Living_SimpleAnimal_Hostile_Retaliate_Goat), 
											typeof(Obj_Machinery_Centrifuge), 
											typeof(Obj_Machinery_Cooking_Icemachine), 
											typeof(Obj_Machinery_Sleeper), 
											typeof(Obj_Machinery_Anomaly), 
											typeof(Obj_Machinery_BunsenBurner)
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "null";
			this.w_type = 2;
			this.amount_per_transfer_from_this = 10;
			this.possible_transfer_amounts = new ByTable(new object [] { 5, 10, 15, 25, 30, 50 });
			this.volume = 50;
			this.flags = 4352;
			this.icon_state = "null";
		}

		// Function from file: glass.dm
		public Obj_Item_Weapon_ReagentContainers_Glass ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.base_name = this.name;
			this.update_icon();
			return;
		}

		// Function from file: glass.dm
		public void update_name_label(  ) {
			
			if ( this.label_text == "" ) {
				this.name = this.base_name;
			} else {
				this.name = "" + this.base_name + " (" + this.label_text + ")";
			}
			return;
		}

		// Function from file: glass.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string tmp_label = null;

			
			if ( a is Obj_Item_Weapon_Pen || a is Obj_Item_Device_Flashlight_Pen ) {
				tmp_label = GlobalFuncs.sanitize( Interface13.Input( b, "Enter a label for " + this.name, "Label", this.label_text, null, InputType.Any ) );

				if ( !this.Adjacent( b ) || Lang13.Bool( b.stat ) ) {
					return null;
				}

				if ( Lang13.Length( tmp_label ) > 10 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The label can be at most 10 characters long.</span>" );
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>You set the label to \"" + tmp_label + "\".</span>" );
					this.label_text = tmp_label;
					this.update_name_label();
				}
			}
			return null;
		}

		// Function from file: glass.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic transfer_result = null;

			
			if ( !( flag == true ) ) {
				return false;
			}

			if ( GlobalFuncs.is_type_in_list( A, this.can_be_placed_into ) ) {
				return false;
			}
			transfer_result = this.transfer( A, user, null, null, -1 );

			if ( Convert.ToDouble( transfer_result ) > 10 && ( A is Tile || A is Obj_Machinery_PortableAtmospherics_Hydroponics ) ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( A ), "sound/effects/slosh.ogg", 25, 1 );
			}
			return false;
		}

		// Function from file: glass.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			base.attack_self( (object)(user), (object)(flag), emp );

			if ( Lang13.Bool( this.is_open_container() ) ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class = 'notice'>You put the lid on " ).the( this ).item().str( "." ).ToString() );
				this.flags ^= 4096;
			} else {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class = 'notice'>You take the lid off " ).the( this ).item().str( "." ).ToString() );
				this.flags |= 4096;
			}
			this.update_icon();
			return null;
		}

		// Function from file: glass.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( !Lang13.Bool( this.is_open_container() ) ) {
				GlobalFuncs.to_chat( user, "<span class='info'>An airtight lid seals it completely.</span>" );
			}
			return null;
		}

		// Function from file: glass.dm
		public override dynamic mop_act( Obj_Item_Weapon_Mop M = null, dynamic user = null ) {
			return this.is_open_container();
		}

		// Function from file: glass.dm
		public override dynamic get_rating(  ) {
			return this.volume / 50;
		}

	}

}