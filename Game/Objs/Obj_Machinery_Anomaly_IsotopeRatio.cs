// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Anomaly_IsotopeRatio : Obj_Machinery_Anomaly {

		// Function from file: analysis_isotope_ratio.dm
		public Obj_Machinery_Anomaly_IsotopeRatio ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Anom_Iso(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: analysis_isotope_ratio.dm
		public override string ScanResults(  ) {
			string results = null;
			dynamic scanned_sample = null;
			string carrier_name = null;
			int num_reagents = 0;
			Reagent A = null;
			Reagent R = null;
			double accuracy = 0;
			int displayed_age_thousands = 0;
			int displayed_age_millions = 0;
			int displayed_age_thousands2 = 0;
			int displayed_age_millions2 = 0;
			dynamic displayed_age = null;
			int displayed_age_thousands3 = 0;
			dynamic displayed_age2 = null;

			results = "The scan was inconclusive. Check sample integrity and carrier consistency.";
			num_reagents = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.held_container.reagents.reagent_list, typeof(Reagent) )) {
				A = _a;
				
				R = A;

				if ( R is Reagent_AnalysisSample ) {
					scanned_sample = R.data;
				} else {
					carrier_name = R.id;
				}
				num_reagents++;
			}

			if ( num_reagents == 2 && Lang13.Bool( scanned_sample ) && Lang13.Bool( carrier_name ) ) {
				accuracy = this.GetResultSpecifity( scanned_sample, carrier_name );
				accuracy += ( 1 - accuracy ) * 0.5 / scanned_sample.total_spread;

				if ( !( accuracy != 0 ) ) {
					accuracy = Rand13.Int( ((int)( 0.01 )), ((int)( 0.5 )) );
				}
				results = "Isotope decay analysis in carrier (" + carrier_name + ") indicates age (" + accuracy * 100 + "% accuracy): <br><br>";

				if ( scanned_sample.age_billion != 0 ) {
					displayed_age_thousands = Rand13.Int( 0, 999 );
					displayed_age_millions = Rand13.Int( 0, 999 );
					results += "" + ( displayed_age_millions + displayed_age_thousands / 1000 ) + " million years.<br>";
				} else if ( scanned_sample.age_million != 0 ) {
					displayed_age_thousands2 = scanned_sample.age_thousand + Num13.MaxInt( ((int)( scanned_sample.age_thousand * ( 1 - accuracy ) * ( Rand13.Float() * 2 - 1 ) )), 0 );
					displayed_age_millions2 = scanned_sample.age_million + Num13.MaxInt( ((int)( scanned_sample.age_million * ( 1 - accuracy ) * ( Rand13.Float() * 4 - 2 ) )), 0 );
					results += "" + ( displayed_age_millions2 + displayed_age_thousands2 / 1000 ) + " million years.<br>";
				} else if ( scanned_sample.age_thousand != 0 ) {
					displayed_age = scanned_sample.age + scanned_sample.age * ( 1 - accuracy ) * ( Rand13.Float() * 2 - 1 );
					displayed_age_thousands3 = scanned_sample.age_thousand + Num13.MaxInt( ((int)( scanned_sample.age_thousand * ( 1 - accuracy ) * ( Rand13.Float() * 2 - 1 ) )), 0 );
					results += "" + ( displayed_age_thousands3 + Convert.ToDouble( displayed_age / 1000 ) ) + " thousand years.<br>";
				} else {
					displayed_age2 = scanned_sample.age + Num13.MaxInt( Convert.ToInt32( scanned_sample.age * ( 1 - accuracy ) * ( Rand13.Float() * 2 - 1 ) ), 0 );
					results += "" + displayed_age2 + " years.<br>";
				}
				results += "<br>Warning, results only valid up to ages of one billion years.";
			}
			return results;
		}

	}

}