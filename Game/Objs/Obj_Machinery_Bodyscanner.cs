// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Bodyscanner : Obj_Machinery {

		public string orient = "LEFT";
		public int scanning = 1;
		public dynamic connected = null;
		public Ent_Static occupant = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 125;
			this.active_power_usage = 250;
			this.machine_flags = 6;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Fullbodyscanner(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule(), 
				new Obj_Item_Weapon_StockParts_ScanningModule()
			 });
			this.light_color = "#64C864";
			this.light_range_on = 3;
			this.light_power_on = 2;
			this.icon = "icons/obj/Cryogenic2.dmi";
			this.icon_state = "body_scanner_0";
		}

		// Function from file: adv_med.dm
		public Obj_Machinery_Bodyscanner ( dynamic loc = null ) : base( (object)(loc) ) {
			Tile t = null;
			dynamic c = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.RefreshParts();
			Task13.Schedule( 5, (Task13.Closure)(() => {
				Game13.log.WriteMsg( "DEBUG: Beginning body scanner console checking/auto-generation for scanner " + this + " at " + this.loc.x + "," + this.loc.y + "," + this.loc.z + "..." );

				if ( this.orient == "RIGHT" ) {
					this.update_icon();
					t = Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.WEST )) );
				} else {
					t = Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.EAST )) );
				}

				if ( !( t != null ) ) {
					Task13.Crash( "" + "code/game/machinery/adv_med.dm" + ":" + 41 + ":Assertion Failed: " + "t" );
				}
				c = Lang13.FindIn( typeof(Obj_Machinery_BodyScanconsole), t.contents );

				if ( Lang13.Bool( c ) ) {
					this.connected = c;
					c.connected = this;
				} else {
					Game13.log.WriteMsg( "DEBUG: generating console at " + t.loc.x + "," + t.loc.y + "," + t.loc.z + " for scanner at " + this.loc.x + "," + this.loc.y + "," + this.loc.z );
					this.generate_console( t );
				}
				return;
				return;
			}));
			return;
		}

		// Function from file: adv_med.dm
		public override bool blob_act( dynamic severity = null ) {
			dynamic A = null;

			
			if ( Rand13.PercentChance( 50 ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this )) {
					A = _a;
					
					A.loc = this.loc;
				}
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: adv_med.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			dynamic A = null;
			dynamic A2 = null;
			dynamic A3 = null;

			
			switch ((int?)( severity )) {
				case 1:
					
					foreach (dynamic _a in Lang13.Enumerate( this )) {
						A = _a;
						
						A.loc = this.loc;
						this.ex_act( severity );
					}
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 50 ) ) {
						
						foreach (dynamic _b in Lang13.Enumerate( this )) {
							A2 = _b;
							
							A2.loc = this.loc;
							this.ex_act( severity );
						}
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 25 ) ) {
						
						foreach (dynamic _c in Lang13.Enumerate( this )) {
							A3 = _c;
							
							A3.loc = this.loc;
							this.ex_act( severity );
						}
						GlobalFuncs.qdel( this );
						return false;
					}
					break;
			}
			return false;
		}

		// Function from file: adv_med.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic G = null;
			Ent_Static M = null;

			
			if ( a is Obj_Item_Weapon_Wrench && !( this.occupant != null ) ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );

				if ( this.orient == "RIGHT" ) {
					this.orient = "LEFT";

					if ( this.generate_console( Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.EAST )) ) ) ) {
						this.update_icon();
					} else {
						this.orient = "RIGHT";
						GlobalFuncs.to_chat( b, "<span class='warning'>There is no space!</span>" );
						this.generate_console( Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.WEST )) ) );
					}
				} else {
					this.orient = "RIGHT";

					if ( this.generate_console( Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.WEST )) ) ) ) {
						this.update_icon();
					} else {
						this.orient = "LEFT";
						this.visible_message( "<span class='warning'>There is no space!</span>", "<span class='warning'>" + b + " wants to be hardcore, but his CMO won't let him.</span>" );
						this.generate_console( Map13.GetStep( GlobalFuncs.get_turf( this ), ((int)( GlobalVars.EAST )) ) );
					}
				}
				return null;
			}

			if ( !( a is Obj_Item_Weapon_Grab ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			G = a;

			if ( !( G is Obj_Item_Weapon_Grab ) || !( G.affecting is Mob ) ) {
				return null;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " is already occupied!</span>" ).ToString() );
				return null;
			}
			((Ent_Dynamic)G.affecting).unlock_from();
			M = G.affecting;
			M.loc = this;
			((dynamic)M).reset_view();
			this.occupant = M;
			this.update_icon();
			this.add_fingerprint( b );
			GlobalFuncs.qdel( G );

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				this.set_light( this.light_range_on, this.light_power_on );
			}
			return null;
		}

		// Function from file: adv_med.dm
		public override int crowbarDestroy( dynamic user = null ) {
			
			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You cannot disassemble " ).the( this ).item().str( ", it's occupado.</span>" ).ToString() );
				return 0;
			}
			return base.crowbarDestroy( (object)(user) );
		}

		// Function from file: adv_med.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			
			if ( Lang13.Bool( M.stat ) ) {
				return null;
			}
			this.go_out();
			return null;
		}

		// Function from file: adv_med.dm
		public override dynamic MouseDrop( Mob over_object = null, dynamic src_location = null, Ent_Static over_location = null, dynamic src_control = null, dynamic over_control = null, string _params = null ) {
			Mob robit = null;
			Ent_Dynamic A = null;

			
			if ( !( Task13.User is Mob_Living_Carbon_Human ) && !( Task13.User is Mob_Living_Silicon_Robot ) || Task13.User.incapacitated() || Task13.User.lying == true ) {
				return null;
			}

			if ( !( this.occupant != null ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The scanner is unoccupied!</span>" );
				return null;
			}

			if ( Task13.User is Mob_Living_Silicon_Robot ) {
				robit = Task13.User;

				if ( robit is Mob_Living_Silicon_Robot && !( ((dynamic)robit).module is Obj_Item_Weapon_RobotModule_Medical ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You do not have the means to do this!</span>" );
					return null;
				}
			}

			if ( !( over_location is Tile ) || over_location.density ) {
				return null;
			}

			if ( !this.Adjacent( over_location ) ) {
				return null;
			}

			if ( !( this.occupant == Task13.User ) && ( !this.Adjacent( Task13.User ) || !Task13.User.Adjacent( over_location ) ) ) {
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( over_location.contents, typeof(Ent_Dynamic) )) {
				A = _a;
				

				if ( A.density ) {
					
					if ( A == this || A is Mob ) {
						continue;
					}
					return null;
				}
			}

			if ( this.occupant == Task13.User ) {
				this.visible_message( new Txt().item( Task13.User ).str( " climbs out of " ).the( this ).item().str( "." ).ToString() );
			} else {
				this.visible_message( new Txt().item( Task13.User ).str( " removes " ).item( this.occupant.name ).str( " from " ).the( this ).item().str( "." ).ToString() );
			}
			this.go_out( over_location );
			return null;
		}

		// Function from file: adv_med.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			Mob robit = null;
			Ent_Static L = null;
			Mob_Living_Carbon_Slime M = null;
			Obj OO = null;

			
			if ( !( O is Mob ) ) {
				return false;
			}

			if ( O.loc == user || !( O.loc is Tile ) || !( user.loc is Tile ) ) {
				return false;
			}

			if ( ((Mob)user).incapacitated() || user.lying == true ) {
				return false;
			}

			if ( Lang13.Bool( ((dynamic)O).anchored ) || !this.Adjacent( user ) || !((Ent_Static)user).Adjacent( this ) || Lang13.Bool( user.contents.Find( this ) ) ) {
				return false;
			}

			if ( O is Mob_Living_SimpleAnimal || O is Mob_Living_Silicon ) {
				return false;
			}

			if ( !( user is Mob_Living_Carbon_Human ) && !( user is Mob_Living_Silicon_Robot ) ) {
				return false;
			}

			if ( user.loc == null ) {
				return false;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " is already occupied!</span>" ).ToString() );
				return false;
			}

			if ( user is Mob_Living_Silicon_Robot ) {
				robit = Task13.User;

				if ( robit is Mob_Living_Silicon_Robot && !( ((dynamic)robit).module is Obj_Item_Weapon_RobotModule_Medical ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>You do not have the means to do this!</span>" );
					return false;
				}
			}
			L = O;

			if ( !( L is Mob_Living ) || Lang13.Bool( ((dynamic)L).locked_to ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( L, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == L ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).item( L ).str( " will not fit into " ).the( this ).item().str( " because they have a slime latched onto their head.</span>" ).ToString() );
					return false;
				}
			}

			if ( L == user ) {
				this.visible_message( new Txt().item( user ).str( " climbs into " ).the( this ).item().str( "." ).ToString() );
			} else {
				this.visible_message( new Txt().item( user ).str( " places " ).item( L ).str( " into " ).the( this ).item().str( "." ).ToString() );
			}
			L.loc = this;
			((dynamic)L).reset_view();
			this.occupant = L;
			this.update_icon();

			foreach (dynamic _b in Lang13.Enumerate( this, typeof(Obj) )) {
				OO = _b;
				
				OO.loc = this.loc;
			}
			this.add_fingerprint( user );

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				this.set_light( this.light_range_on, this.light_power_on );
			}
			return false;
		}

		// Function from file: adv_med.dm
		public override dynamic power_change(  ) {
			base.power_change();

			if ( !( ( this.stat & 3 ) != 0 ) && this.occupant != null ) {
				this.set_light( this.light_range_on, this.light_power_on );
			} else {
				this.set_light( 0 );
			}
			return null;
		}

		// Function from file: adv_med.dm
		public override dynamic RefreshParts(  ) {
			int T = 0;
			Obj_Item_Weapon_StockParts SP = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				
				T += SP.rating;
			}
			this.scanning = Num13.Floor( T / 3 );
			return null;
		}

		// Function from file: adv_med.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = "body_scanner_" + ( this.occupant != null ? "1" : "0" ) + ( this.orient == "LEFT" ? null : "-r" );
			return null;
		}

		// Function from file: adv_med.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			this.go_out();
			_default = base.Destroy( (object)(brokenup) );

			if ( Lang13.Bool( this.connected ) ) {
				this.connected.connected = null;
				GlobalFuncs.qdel( this.connected );
				this.connected = null;
			}
			return _default;
		}

		// Function from file: adv_med.dm
		public ByTable get_occupant_data(  ) {
			Ent_Static H = null;
			ByTable occupant_data = null;

			
			if ( !( this.occupant != null ) || !( this.occupant is Mob_Living_Carbon_Human ) ) {
				return null;
			}
			H = this.occupant;
			occupant_data = new ByTable()
				.Set( "stationtime", GlobalFuncs.worldtime2text() )
				.Set( "stat", ((dynamic)H).stat )
				.Set( "health", ((dynamic)H).health )
				.Set( "virus_present", ((dynamic)H).virus2.len )
				.Set( "bruteloss", ((dynamic)H).getBruteLoss() )
				.Set( "fireloss", ((dynamic)H).getFireLoss() )
				.Set( "oxyloss", ((dynamic)H).getOxyLoss() )
				.Set( "toxloss", ((dynamic)H).getToxLoss() )
				.Set( "rads", ((dynamic)H).radiation )
				.Set( "cloneloss", ((dynamic)H).getCloneLoss() )
				.Set( "brainloss", ((dynamic)H).getBrainLoss() )
				.Set( "paralysis", ((dynamic)H).paralysis )
				.Set( "bodytemp", ((dynamic)H).bodytemperature )
				.Set( "borer_present", ((dynamic)H).has_brain_worms() )
				.Set( "inaprovaline_amount", ((Reagents)H.reagents).get_reagent_amount( "inaprovaline" ) )
				.Set( "dexalin_amount", ((Reagents)H.reagents).get_reagent_amount( "dexalin" ) )
				.Set( "stoxin_amount", ((Reagents)H.reagents).get_reagent_amount( "stoxin" ) )
				.Set( "bicaridine_amount", ((Reagents)H.reagents).get_reagent_amount( "bicaridine" ) )
				.Set( "dermaline_amount", ((Reagents)H.reagents).get_reagent_amount( "dermaline" ) )
				.Set( "blood_amount", ((Reagents)((dynamic)H).vessel).get_reagent_amount( "blood" ) )
				.Set( "all_chems", H.reagents.reagent_list )
				.Set( "btype", ((dynamic)H).dna.b_type )
				.Set( "disabilities", ((dynamic)H).sdisabilities )
				.Set( "tg_diseases_list", ((dynamic)H).viruses )
				.Set( "lung_ruptured", ((dynamic)H).is_lung_ruptured() )
				.Set( "external_organs", ((dynamic)H).organs.Copy() )
				.Set( "internal_organs", ((dynamic)H).internal_organs.Copy() )
			;
			return occupant_data;
		}

		// Function from file: adv_med.dm
		public void go_out( Ent_Static exit = null ) {
			exit = exit ?? this.loc;

			Ent_Dynamic x = null;

			
			if ( !( this.occupant != null ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Ent_Dynamic) )) {
				x = _a;
				

				if ( Lang13.Bool( this.component_parts.Contains( x ) ) ) {
					continue;
				}
				x.forceMove( this.loc );
			}
			((dynamic)this.occupant).forceMove( exit );
			((dynamic)this.occupant).reset_view();
			this.occupant = null;
			this.update_icon();
			this.set_light( 0 );
			return;
		}

		// Function from file: adv_med.dm
		public bool generate_console( Tile T = null ) {
			
			if ( Lang13.Bool( this.connected ) ) {
				this.connected.orient = this.orient;
				this.connected.update_icon();
				return true;
			}

			if ( !T.density ) {
				this.connected = new Obj_Machinery_BodyScanconsole( T );
				this.connected.orient = this.orient;
				this.connected.update_icon();
				return true;
			} else {
				return false;
			}
		}

		// Function from file: adv_med.dm
		[Verb]
		[VerbInfo( name: "Enter Body Scanner", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void move_inside(  ) {
			Obj O = null;

			
			if ( Task13.User.isUnconscious() ) {
				return;
			}

			if ( this.occupant != null ) {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " is already occupied!</span>" ).ToString() );
				return;
			}

			if ( Lang13.Bool( Task13.User.locked_to ) ) {
				return;
			}
			Task13.User.pulling = null;
			Task13.User.loc = this;
			Task13.User.reset_view();
			this.occupant = Task13.User;
			this.update_icon();

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj) )) {
				O = _a;
				
				GlobalFuncs.qdel( O );
			}
			this.add_fingerprint( Task13.User );

			if ( !( ( this.stat & 3 ) != 0 ) ) {
				this.set_light( this.light_range_on, this.light_power_on );
			}
			return;
		}

		// Function from file: adv_med.dm
		[Verb]
		[VerbInfo( name: "Eject Body Scanner", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void eject(  ) {
			
			if ( Task13.User.isUnconscious() ) {
				return;
			}
			this.go_out();
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}