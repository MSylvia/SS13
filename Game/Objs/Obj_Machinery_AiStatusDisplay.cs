// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_AiStatusDisplay : Obj_Machinery {

		public int mode = 0;
		public string picture_state = null;
		public string emotion = "Neutral";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/status_display.dmi";
			this.icon_state = "frame";
		}

		public Obj_Machinery_AiStatusDisplay ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: status_display.dm
		public void set_picture( string state = null ) {
			this.picture_state = state;

			if ( this.overlays.len != 0 ) {
				this.overlays.Cut();
			}
			this.overlays.Add( new Image( "icons/obj/status_display.dmi", null, this.picture_state ) );
			return;
		}

		// Function from file: status_display.dm
		public void update(  ) {
			
			if ( this.mode == 0 ) {
				this.overlays.Cut();
				return;
			}

			if ( this.mode == 1 ) {
				
				switch ((string)( this.emotion )) {
					case "Very Happy":
						this.set_picture( "ai_veryhappy" );
						break;
					case "Happy":
						this.set_picture( "ai_happy" );
						break;
					case "Neutral":
						this.set_picture( "ai_neutral" );
						break;
					case "Unsure":
						this.set_picture( "ai_unsure" );
						break;
					case "Confused":
						this.set_picture( "ai_confused" );
						break;
					case "Sad":
						this.set_picture( "ai_sad" );
						break;
					case "BSOD":
						this.set_picture( "ai_bsod" );
						break;
					case "Blank":
						this.set_picture( "ai_off" );
						break;
					case "Problems?":
						this.set_picture( "ai_trollface" );
						break;
					case "Awesome":
						this.set_picture( "ai_awesome" );
						break;
					case "Dorfy":
						this.set_picture( "ai_urist" );
						break;
					case "Facepalm":
						this.set_picture( "ai_facepalm" );
						break;
					case "Friend Computer":
						this.set_picture( "ai_friend" );
						break;
					case "Blue Glow":
						this.set_picture( "ai_sal" );
						break;
					case "Red Glow":
						this.set_picture( "ai_hal" );
						break;
				}
				return;
			}

			if ( this.mode == 2 ) {
				this.set_picture( "ai_bsod" );
				return;
			}
			return;
		}

		// Function from file: status_display.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return 0;
			}
			this.set_picture( "ai_bsod" );
			base.emp_act( severity );
			return 0;
		}

		// Function from file: status_display.dm
		public override int? process( dynamic seconds = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				this.overlays.Cut();
				return null;
			}
			this.update();
			return null;
		}

	}

}