// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_AiStatusDisplay : Obj_Machinery {

		public bool spookymode = false;
		public int mode = 0;
		public string picture_state = null;
		public dynamic emotion = "Neutral";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/status_display.dmi";
			this.icon_state = "frame";
		}

		// Function from file: status_display.dm
		public Obj_Machinery_AiStatusDisplay ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.status_displays.Or( this );
			return;
		}

		// Function from file: status_display.dm
		public override bool spook(  ) {
			this.spookymode = true;
			return false;
		}

		// Function from file: status_display.dm
		public void set_picture( string state = null ) {
			this.picture_state = state;

			if ( this.overlays.len != 0 ) {
				this.overlays.len = 0;
			}
			this.overlays.Add( new Image( "icons/obj/status_display.dmi", null, this.picture_state ) );
			return;
		}

		// Function from file: status_display.dm
		public void update(  ) {
			
			switch ((int)( this.mode )) {
				case 0:
					this.overlays = new ByTable();
					break;
				case 1:
					
					if ( GlobalVars.status_display_images.Contains( this.emotion ) ) {
						this.set_picture( GlobalVars.status_display_images[this.emotion] );
					} else {
						this.set_picture( "ai_bsod" );
					}
					break;
				case 2:
					this.set_picture( "ai_bsod" );
					break;
			}
			return;
		}

		// Function from file: status_display.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return null;
			}
			this.set_picture( "ai_bsod" );
			base.emp_act( severity );
			return null;
		}

		// Function from file: status_display.dm
		public override dynamic process(  ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				this.overlays.len = 0;
				return null;
			}

			if ( this.spookymode ) {
				this.spookymode = false;
				this.overlays.len = 0;
				return null;
			}
			this.update();
			return null;
		}

		// Function from file: status_display.dm
		public override dynamic attack_ai( dynamic user = null ) {
			dynamic A = null;
			dynamic new_icon = null;

			
			if ( this.spookymode ) {
				return null;
			}

			if ( Lang13.Bool( user.stat ) ) {
				return null;
			}

			if ( user is Mob_Living_Silicon_Ai ) {
				A = user;

				if ( Lang13.Bool( user.stat ) ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Unable to connect to " + this + " (error #408)</span>" );
					return null;
				}

				if ( ( this.stat & 3 ) != 0 ) {
					GlobalFuncs.to_chat( user, "<span class='warning'>Unable to connect to " + this + " (error #" + ( ( this.stat & 1 ) != 0 ? "120" : "408" ) + ")</span>" );
					return null;
				}
				new_icon = Interface13.Input( A, "Load an image to be desplayed on " + this + ".", "AI status display", null, GlobalVars.status_display_images, InputType.Any );

				if ( Lang13.Bool( new_icon ) ) {
					this.mode = 1;
					this.emotion = new_icon;
					this.set_picture( GlobalVars.status_display_images[new_icon] );
				}
			}
			return null;
		}

		// Function from file: status_display.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic _default = null;

			_default = base.Destroy( (object)(brokenup) );
			GlobalVars.status_displays.Remove( this );
			return _default;
		}

	}

}