// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ArtifactHarvester : Obj_Machinery {

		public int harvesting = 0;
		public dynamic inserted_battery = null;
		public Obj_Machinery_Artifact cur_artifact = null;
		public dynamic owned_scanner = null;
		public double chargerate = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 50;
			this.active_power_usage = 750;
			this.icon = "icons/obj/virology.dmi";
			this.icon_state = "incubator";
		}

		// Function from file: artifact_harvester.dm
		public Obj_Machinery_ArtifactHarvester ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.owned_scanner = Lang13.FindIn( typeof(Obj_Machinery_ArtifactScanpad), Map13.GetStep( this, this.dir ) );

			if ( !Lang13.Bool( this.owned_scanner ) ) {
				this.owned_scanner = Lang13.FindIn( typeof(Obj_Machinery_ArtifactScanpad), Map13.FetchInRangeExcludeThis( this, 1 ) );
			}
			return;
		}

		// Function from file: artifact_harvester.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			int articount = 0;
			Obj_Machinery_Artifact analysed = null;
			Obj_Machinery_Artifact A = null;
			int mundane = 0;
			Obj O = null;
			dynamic O2 = null;
			string message = null;
			string message2 = null;
			bool matching_id = false;
			bool matching_effecttype = false;
			string message3 = null;
			Type effecttype = null;
			dynamic E = null;
			dynamic varname = null;
			string message4 = null;
			string message5 = null;
			string message6 = null;
			string message7 = null;
			string message8 = null;
			string message9 = null;
			string message10 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["harvest"] ) ) {
				this.cur_artifact = null;
				articount = 0;

				foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.get_turf( this.owned_scanner ), typeof(Obj_Machinery_Artifact) )) {
					A = _a;
					
					analysed = A;
					articount++;
				}
				mundane = 0;

				foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_turf( this.owned_scanner ), typeof(Obj) )) {
					O = _b;
					

					if ( O.invisibility != 0 ) {
						continue;
					}

					if ( !( O is Obj_Machinery_Artifact ) && !( O is Obj_Machinery_ArtifactScanpad ) ) {
						mundane++;
						break;
					}
				}

				foreach (dynamic _c in Lang13.Enumerate( GlobalFuncs.get_turf( this.owned_scanner ) )) {
					O2 = _c;
					

					if ( Lang13.Bool( O2.invisibility ) ) {
						continue;
					}
					mundane++;
					break;
				}

				if ( !( analysed != null ) ) {
					message = "<b>" + this + "</b> states, \"Cannot harvest, unable to analyse.\"";
					this.visible_message( message );
					return null;
				}

				if ( analysed.being_used ) {
					message2 = "<b>" + this + "</b> states, \"Cannot harvest. Too much interference.\"";
					this.visible_message( message2 );
				} else if ( articount == 1 && !( mundane != 0 ) ) {
					this.cur_artifact = analysed;

					if ( Lang13.Bool( this.inserted_battery ) ) {
						
						if ( Lang13.Bool( this.inserted_battery.battery_effect ) && Convert.ToDouble( this.inserted_battery.stored_charge ) <= 0 ) {
							GlobalFuncs.qdel( this.inserted_battery.battery_effect );
							this.inserted_battery.battery_effect = null;
						}
						matching_id = false;

						if ( Lang13.Bool( this.inserted_battery.battery_effect ) ) {
							matching_id = this.inserted_battery.battery_effect.artifact_id == this.cur_artifact.my_effect.artifact_id;
						}
						matching_effecttype = false;

						if ( Lang13.Bool( this.inserted_battery.battery_effect ) ) {
							matching_effecttype = this.inserted_battery.battery_effect.type == this.cur_artifact.my_effect.type;
						}

						if ( !Lang13.Bool( this.inserted_battery.battery_effect ) || matching_id && matching_effecttype ) {
							this.chargerate = this.cur_artifact.my_effect.chargelevelmax / this.cur_artifact.my_effect.effectrange;
							this.harvesting = 1;
							this.use_power = 2;
							this.cur_artifact.anchored = 1;
							this.cur_artifact.being_used = true;
							this.icon_state = "incubator_on";
							message3 = "<b>" + this + "</b> states, \"Beginning artifact energy harvesting.\"";
							this.visible_message( message3 );

							if ( !Lang13.Bool( this.inserted_battery.battery_effect ) ) {
								effecttype = this.cur_artifact.my_effect.type;
								E = Lang13.Call( effecttype, this.inserted_battery );

								foreach (dynamic _d in Lang13.Enumerate( new ByTable(new object [] { "chargelevelmax", "artifact_id", "effect", "effectrange", "trigger" }) )) {
									varname = _d;
									
									E.vars[varname] = this.cur_artifact.my_effect.vars[varname];
								}
								this.inserted_battery.battery_effect = E;
								this.inserted_battery.stored_charge = 0;
							}
						} else {
							message4 = "<b>" + this + "</b> states, \"Cannot harvest. Incompatible energy signatures detected.\"";
							this.visible_message( message4 );
						}
					} else if ( this.cur_artifact != null ) {
						message5 = "<b>" + this + "</b> states, \"Cannot harvest. No battery inserted.\"";
						this.visible_message( message5 );
					}
				} else if ( articount > 1 || mundane != 0 ) {
					message6 = "<b>" + this + "</b> states, \"Cannot harvest. Error isolating energy signature.\"";
					this.visible_message( message6 );
				} else if ( !( articount != 0 ) ) {
					message7 = "<b>" + this + "</b> states, \"Cannot harvest. No noteworthy energy signature isolated.\"";
					this.visible_message( message7 );
				}
			}

			if ( Lang13.Bool( href_list["stopharvest"] ) ) {
				
				if ( this.harvesting != 0 ) {
					
					if ( this.harvesting < 0 && Lang13.Bool( this.inserted_battery.battery_effect ) && Lang13.Bool( this.inserted_battery.battery_effect.activated ) ) {
						((ArtifactEffect)this.inserted_battery.battery_effect).ToggleActivate();
					}
					this.harvesting = 0;
					this.cur_artifact.anchored = 0;
					this.cur_artifact.being_used = false;
					this.visible_message( "<b>" + this.name + "</b> states, \"Activity interrupted.\"" );
					this.icon_state = "incubator";
				}
			}

			if ( Lang13.Bool( href_list["ejectbattery"] ) ) {
				this.inserted_battery.loc = this.loc;
				this.inserted_battery = null;
				this.cur_artifact.anchored = 0;
			}

			if ( Lang13.Bool( href_list["drainbattery"] ) ) {
				
				if ( Lang13.Bool( this.inserted_battery ) ) {
					
					if ( Lang13.Bool( this.inserted_battery.battery_effect ) && Convert.ToDouble( this.inserted_battery.stored_charge ) > 0 ) {
						
						if ( Lang13.Bool( Interface13.Alert( "This action will dump all charge, safety gear is recommended before proceeding", "Warning", "Continue", "Cancel" ) ) ) {
							
							if ( !Lang13.Bool( this.inserted_battery.battery_effect.activated ) ) {
								((ArtifactEffect)this.inserted_battery.battery_effect).ToggleActivate( false );
							}
							this.harvesting = -1;
							this.use_power = 2;
							this.cur_artifact.anchored = 0;
							this.icon_state = "incubator_on";
							message8 = "<b>" + this + "</b> states, \"Warning, battery charge dump commencing.\"";
							this.visible_message( message8 );
						}
					} else {
						message9 = "<b>" + this + "</b> states, \"Cannot dump energy. Battery is drained of charge already.\"";
						this.visible_message( message9 );
					}
				} else {
					message10 = "<b>" + this + "</b> states, \"Cannot dump energy. No battery inserted.\"";
					this.visible_message( message10 );
				}
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=artharvester" );
				Task13.User.unset_machine(  );
			}
			this.updateDialog();
			return null;
		}

		// Function from file: artifact_harvester.dm
		public override dynamic process(  ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.harvesting > 0 ) {
				this.inserted_battery.stored_charge += this.chargerate;

				if ( Convert.ToDouble( this.inserted_battery.stored_charge ) >= Convert.ToDouble( this.inserted_battery.capacity ) ) {
					this.inserted_battery.stored_charge = this.inserted_battery.capacity;
					this.use_power = 1;
					this.harvesting = 0;
					this.cur_artifact.anchored = 0;
					this.cur_artifact.being_used = false;
					this.visible_message( "<b>" + this.name + "</b> states, \"Battery is full.\"" );
					this.icon_state = "incubator";
				}
			} else if ( this.harvesting < 0 ) {
				this.inserted_battery.stored_charge -= 2;

				if ( Lang13.Bool( this.inserted_battery.battery_effect ) ) {
					this.inserted_battery.battery_effect.process();
				}

				if ( Convert.ToDouble( this.inserted_battery.stored_charge ) <= 0 ) {
					this.use_power = 1;
					this.inserted_battery.stored_charge = 0;
					this.harvesting = 0;
					this.cur_artifact.anchored = 0;

					if ( Lang13.Bool( this.inserted_battery.battery_effect ) && Lang13.Bool( this.inserted_battery.battery_effect.activated ) ) {
						((ArtifactEffect)this.inserted_battery.battery_effect).ToggleActivate();
					}
					this.visible_message( "<b>" + this.name + "</b> states, \"Battery dump completed.\"" );
					this.icon_state = "incubator";
				}
			}
			return null;
		}

		// Function from file: artifact_harvester.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			((Mob)user).set_machine( this );
			dat = "<B>Artifact Power Harvester</B><BR>";
			dat += "<HR><BR>";

			if ( Lang13.Bool( this.owned_scanner ) ) {
				
				if ( this.harvesting != 0 ) {
					
					if ( this.harvesting > 0 ) {
						dat += "Please wait. Harvesting in progress (" + this.inserted_battery.stored_charge / this.inserted_battery.capacity * 100 + "%).<br>";
					} else {
						dat += "Please wait. Energy dump in progress (" + this.inserted_battery.stored_charge / this.inserted_battery.capacity * 100 + "%).<br>";
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";stopharvest=1'>Halt early</A><BR>" ).ToString();
				} else if ( Lang13.Bool( this.inserted_battery ) ) {
					dat += "<b>" + this.inserted_battery.name + "</b> inserted, charge level: " + this.inserted_battery.stored_charge + "/" + this.inserted_battery.capacity + " (" + this.inserted_battery.stored_charge / this.inserted_battery.capacity * 100 + "%)<BR>";
					dat += "<b>Energy signature ID:</b>" + ( this.inserted_battery.battery_effect.artifact_id == "" ? "???" : "" + this.inserted_battery.battery_effect.artifact_id ) + "<BR>";
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";ejectbattery=1'>Eject battery</a><BR>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";drainbattery=1'>Drain battery of all charge</a><BR>" ).ToString();
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";harvest=1'>Begin harvesting</a><BR>" ).ToString();
				} else {
					dat += "No battery inserted.<BR>";
				}
			} else {
				dat += "<B><font color=red>Unable to locate analysis pad.</font><BR></b>";
			}
			dat += "<HR>";
			dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A> <A href='?src=" ).Ref( this ).str( ";close=1'>Close<BR>" ).ToString();
			Interface13.Browse( user, dat, "window=artharvester;size=450x500" );
			GlobalFuncs.onclose( user, "artharvester" );
			return null;
		}

		// Function from file: artifact_harvester.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );
			this.interact( a );
			return null;
		}

		// Function from file: artifact_harvester.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Anobattery ) {
				
				if ( !Lang13.Bool( this.inserted_battery ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You insert " + a + " into " + this + ".</span>" );
						this.inserted_battery = a;
						this.updateDialog();
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>There is already a battery in " + this + ".</span>" );
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

	}

}