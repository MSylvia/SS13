// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_ForensicScanning : Obj_Machinery_Computer {

		public dynamic scanning = null;
		public string temp = "";
		public bool canclear = true;
		public bool authenticated = false;
		public ByTable files = null;
		public ByTable misc = null;
		public dynamic card = null;
		public string scan_data = "";
		public string scan_name = "";
		public int scan_process = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/forensic_computer";
			this.light_color = "#FA8282";
			this.req_access = new ByTable(new object [] { 4 });
			this.icon_state = "forensic";
		}

		// Function from file: detective_work.dm
		public Obj_Machinery_Computer_ForensicScanning ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			new Obj_Item_Weapon_Book_Manual_Detective( GlobalFuncs.get_turf( this ) );
			return;
		}

		// Function from file: detective_work.dm
		public void delete_dossier( dynamic print = null ) {
			
			if ( this.files != null && this.files.len != 0 ) {
				this.files.Remove( print );
			}
			return;
		}

		// Function from file: detective_work.dm
		public void delete_record( dynamic atom_ref = null ) {
			
			if ( this.misc != null && this.misc.len != 0 ) {
				this.misc.Remove( atom_ref );
			}
			return;
		}

		// Function from file: detective_work.dm
		public void process_card(  ) {
			bool found = false;
			dynamic master_print = null;
			dynamic data_entry = null;

			
			if ( this.card.fingerprints != null && !( Convert.ToDouble( this.card.amount ) > 1 ) && GlobalFuncs.islist( this.card.fingerprints ) && this.files != null && this.files.len != 0 ) {
				GlobalFuncs.to_chat( Task13.User, "You insert the card, and it is destroyed by the machinery in the process of comparing prints." );
				found = false;

				foreach (dynamic _a in Lang13.Enumerate( this.card.fingerprints )) {
					master_print = _a;
					
					data_entry = this.files[master_print];

					if ( Lang13.Bool( data_entry ) ) {
						found = true;
						data_entry[1] = master_print;
					}
				}

				if ( found ) {
					GlobalFuncs.to_chat( Task13.User, "The machinery finds it can complete a match." );
				} else {
					GlobalFuncs.to_chat( Task13.User, "No match found." );
				}
				GlobalFuncs.qdel( this.card );
				this.card = null;
			} else {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>ERROR: No prints/too many cards.</span>" );

				if ( this.card.loc == this ) {
					this.card.loc = this.loc;
				}
				this.card = null;
				return;
			}
			return;
		}

		// Function from file: detective_work.dm
		public void update_fingerprints( dynamic ref_print = null, string new_print = null ) {
			dynamic master = null;

			master = this.files[ref_print];

			if ( Lang13.Bool( master ) ) {
				master[1] = GlobalFuncs.stringmerge( master[1], new_print );
			} else {
				Task13.Crash( "Fucking hell.  Something went wrong, and it tried to update a null print or something.  Tell SkyMarshal (and give him this call stack)" );
			}
			return;
		}

		// Function from file: detective_work.dm
		public bool add_data_master( dynamic atom_reference = null, ByTable atom_fingerprints = null, ByTable atom_suit_fibers = null, ByTable atom_blood_DNA = null, string atom_name = null ) {
			dynamic data_entry = null;
			ByTable fibers = null;
			dynamic fiber = null;
			ByTable blood = null;
			dynamic main_blood = null;
			ByTable prints = null;
			dynamic print = null;
			ByTable templist = null;
			dynamic main_print = null;
			dynamic internal_atom = null;
			dynamic internal_prints = null;
			dynamic print2 = null;
			string associated_print = null;
			string reference_print = null;
			ByTable fibers2 = null;
			dynamic fiber2 = null;
			ByTable blood2 = null;
			dynamic main_blood2 = null;
			ByTable data_point = null;
			ByTable data_point2 = null;
			ByTable new_file = null;

			
			if ( !( this.misc != null ) ) {
				this.misc = new ByTable();
			}
			data_entry = this.misc[atom_reference];

			if ( Lang13.Bool( data_entry ) ) {
				fibers = data_entry[1];

				if ( !( fibers != null ) ) {
					fibers = new ByTable();
				}

				if ( atom_suit_fibers != null ) {
					
					foreach (dynamic _a in Lang13.Enumerate( atom_suit_fibers )) {
						fiber = _a;
						

						if ( !( fibers.Find( fiber ) != 0 ) ) {
							fibers.Add( fiber );
						}
					}
				}
				blood = data_entry[2];

				if ( !( blood != null ) ) {
					blood = new ByTable();
				}

				if ( atom_blood_DNA != null ) {
					
					foreach (dynamic _b in Lang13.Enumerate( atom_blood_DNA )) {
						main_blood = _b;
						

						if ( !Lang13.Bool( blood[main_blood] ) ) {
							blood[main_blood] = atom_blood_DNA[blood];
						}
					}
				}
				prints = data_entry[4];

				if ( !( prints != null ) && atom_fingerprints != null ) {
					prints = new ByTable();
				}

				if ( atom_fingerprints != null ) {
					
					foreach (dynamic _c in Lang13.Enumerate( atom_fingerprints )) {
						print = _c;
						

						if ( !Lang13.Bool( prints[print] ) ) {
							prints[print] = atom_fingerprints[print];
						}
					}
				}
			} else {
				templist = null;
				templist = new ByTable( 4 );
				templist[1] = ( atom_suit_fibers != null ? atom_suit_fibers.Copy() : null );
				templist[2] = ( atom_blood_DNA != null ? atom_blood_DNA.Copy() : null );
				templist[3] = atom_name;
				templist[4] = ( atom_fingerprints != null ? atom_fingerprints.Copy() : null );
				this.misc[atom_reference] = templist;
			}

			if ( atom_fingerprints != null ) {
				
				if ( !( this.files != null ) ) {
					this.files = new ByTable();
				}

				foreach (dynamic _g in Lang13.Enumerate( atom_fingerprints )) {
					main_print = _g;
					
					data_entry = this.files[main_print];

					if ( Lang13.Bool( data_entry ) ) {
						internal_atom = data_entry[atom_reference];

						if ( Lang13.Bool( internal_atom ) ) {
							internal_prints = internal_atom[1];

							foreach (dynamic _d in Lang13.Enumerate( atom_fingerprints )) {
								print2 = _d;
								
								associated_print = internal_prints[print2];
								reference_print = atom_fingerprints[print2];

								if ( Lang13.Bool( associated_print ) && associated_print != reference_print ) {
									internal_prints[print2] = GlobalFuncs.stringmerge( associated_print, reference_print );
								} else if ( !Lang13.Bool( associated_print ) ) {
									internal_prints[print2] = reference_print;
								}

								if ( print2 == main_print && ( !Lang13.Bool( associated_print ) || Lang13.Bool( associated_print ) && associated_print != reference_print ) ) {
									this.update_fingerprints( main_print, internal_prints[print2] );
								}
							}
							fibers2 = internal_atom[2];

							if ( !( fibers2 != null ) ) {
								fibers2 = new ByTable();
							}

							if ( atom_suit_fibers != null ) {
								
								foreach (dynamic _e in Lang13.Enumerate( atom_suit_fibers )) {
									fiber2 = _e;
									

									if ( !( fibers2.Find( fiber2 ) != 0 ) ) {
										fibers2.Add( fiber2 );
									}
								}
							}
							blood2 = internal_atom[3];

							if ( !( blood2 != null ) ) {
								blood2 = new ByTable();
							}

							if ( atom_blood_DNA != null ) {
								
								foreach (dynamic _f in Lang13.Enumerate( atom_blood_DNA )) {
									main_blood2 = _f;
									

									if ( !Lang13.Bool( blood2[main_blood2] ) ) {
										blood2[main_blood2] = atom_blood_DNA[blood2];
									}
								}
							}
							continue;
						}
						this.update_fingerprints( main_print, atom_fingerprints[main_print] );
						data_point = null;
						data_point = new ByTable( 4 );
						data_point[1] = ( atom_fingerprints != null ? atom_fingerprints.Copy() : null );
						data_point[2] = ( atom_suit_fibers != null ? atom_suit_fibers.Copy() : null );
						data_point[3] = ( atom_blood_DNA != null ? atom_blood_DNA.Copy() : null );
						data_point[4] = atom_name;
						data_entry[atom_reference] = data_point;
						continue;
					}
					data_point2 = null;
					data_point2 = new ByTable( 4 );
					data_point2[1] = ( atom_fingerprints != null ? atom_fingerprints.Copy() : null );
					data_point2[2] = ( atom_suit_fibers != null ? atom_suit_fibers.Copy() : null );
					data_point2[3] = ( atom_blood_DNA != null ? atom_blood_DNA.Copy() : null );
					data_point2[4] = atom_name;
					new_file = null;
					new_file = new ByTable( 2 );
					new_file[1] = atom_fingerprints[main_print];
					new_file[2] = "Dossier " + ( this.files.len + 1 );
					new_file[atom_reference] = data_point2;
					this.files[main_print] = new_file;
				}
			}
			return true;
		}

		// Function from file: detective_work.dm
		public bool add_data( dynamic scanned_atom = null ) {
			return this.add_data_master( new Txt( " " ).Ref( scanned_atom ).ToString(), scanned_atom.fingerprints, scanned_atom.suit_fibers, scanned_atom.blood_DNA, "" + scanned_atom.name + " (Direct Scan)" );
		}

		// Function from file: detective_work.dm
		public void add_data_scanner( dynamic W = null ) {
			dynamic D = null;
			dynamic atom = null;
			dynamic data = null;
			dynamic atom2 = null;
			dynamic data2 = null;

			
			if ( W is Obj_Item_Device_DetectiveScanner ) {
				D = W;

				if ( Lang13.Bool( D.stored ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( D.stored )) {
						atom = _a;
						
						data = D.stored[atom];
						this.add_data_master( atom, data[1], data[2], data[3], data[4] );
					}
				}
				D.stored = new ByTable();
			} else if ( W is Obj_Item_Device_Pda && Lang13.Bool( W.cartridge ) && W.cartridge.access_security ) {
				
				if ( Lang13.Bool( W.cartridge.stored_data ) ) {
					
					foreach (dynamic _b in Lang13.Enumerate( W.cartridge.stored_data )) {
						atom2 = _b;
						
						data2 = W.cartridge.stored_data[atom2];
						this.add_data_master( atom2, data2[1], data2[2], data2[3], data2[4] );
					}
				}
				W.cartridge.stored_data = new ByTable();
			}
			return;
		}

		// Function from file: detective_work.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			return false;
		}

		// Function from file: detective_work.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			Mob M = null;
			Mob M2 = null;
			dynamic I = null;
			Mob M3 = null;
			dynamic I2 = null;
			dynamic print = null;
			dynamic file = null;
			dynamic atom = null;
			dynamic data_entry = null;
			dynamic dossier = null;
			string new_title = null;
			string print_string = null;
			dynamic _object = null;
			dynamic outputs = null;
			ByTable prints = null;
			int complete_prints = 0;
			dynamic print2 = null;
			ByTable fibers = null;
			int? j = null;
			ByTable blood = null;
			dynamic named = null;
			Obj_Item_Weapon_Paper P = null;
			dynamic dossier2 = null;
			string print_string2 = null;
			dynamic _object2 = null;
			dynamic outputs2 = null;
			ByTable prints2 = null;
			int complete_prints2 = 0;
			dynamic print3 = null;
			ByTable fibers2 = null;
			int? j2 = null;
			ByTable blood2 = null;
			dynamic named2 = null;
			dynamic outputs3 = null;
			ByTable prints3 = null;
			int complete_prints3 = 0;
			dynamic print4 = null;
			ByTable fibers3 = null;
			dynamic fiber = null;
			ByTable blood3 = null;
			dynamic named3 = null;
			Obj_Item_Weapon_Paper P2 = null;
			dynamic outputs4 = null;
			ByTable prints4 = null;
			int complete_prints4 = 0;
			dynamic print5 = null;
			ByTable fibers4 = null;
			dynamic fiber2 = null;
			ByTable blood4 = null;
			dynamic named4 = null;
			dynamic blood5 = null;
			dynamic data = null;
			Obj_Item_Weapon_Paper P3 = null;
			string new_title2 = null;
			dynamic file2 = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			dynamic _q = href_list["operation"]; // Was a switch-case, sorry for the mess.
			if ( _q=="login" ) {
				M = Task13.User;

				if ( M is Mob_Living_Silicon ) {
					this.authenticated = true;
					this.updateDialog();
					return _default;
				}

				if ( this.allowed( M ) ) {
					this.authenticated = true;
				}
			} else if ( _q=="logout" ) {
				this.authenticated = false;
			} else if ( _q=="clear" ) {
				
				if ( this.canclear ) {
					this.temp = null;
				}
			} else if ( _q=="eject" ) {
				
				if ( Lang13.Bool( this.scanning ) ) {
					this.scanning.loc = this.loc;
					this.scanning = null;
				} else {
					this.temp = "Eject Failed: No Object";
				}
			} else if ( _q=="insert" ) {
				M2 = Task13.User;
				I = M2.get_active_hand();

				if ( Lang13.Bool( I ) && I is Obj_Item ) {
					
					if ( I is Obj_Item_Weapon_Evidencebag ) {
						this.scanning = I.contents[1];
						this.scanning.loc = this;
						I.overlays -= this.scanning;
						I.icon_state = "evidenceobj";
					} else if ( M2.drop_item( I, this ) ) {
						this.scanning = I;
					}
				} else {
					GlobalFuncs.to_chat( Task13.User, "Invalid Object Rejected." );
				}
			} else if ( _q=="card" ) {
				M3 = Task13.User;
				I2 = M3.get_active_hand();

				if ( !( Lang13.Bool( I2 ) && I2 is Obj_Item_Weapon_FCard ) ) {
					I2 = this.card;
				}

				if ( Lang13.Bool( I2 ) && I2 is Obj_Item_Weapon_FCard ) {
					this.card = I2;

					if ( !( this.card.fingerprints != null ) ) {
						this.card.fingerprints = new ByTable();
					}

					if ( Convert.ToDouble( this.card.amount ) > 1 || !( this.card.fingerprints.len != 0 ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>ERROR: No prints/too many cards.</span>" );

						if ( this.card.loc == this ) {
							this.card.loc = this.loc;
						}
						this.card = null;
						return _default;
					}

					if ( M3.drop_item( I2, this ) ) {
						this.process_card();
					}
				} else {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>Invalid Object Rejected.</span>" );
				}
			} else if ( _q=="database" ) {
				this.canclear = true;

				if ( Lang13.Bool( href_list["delete_record"] ) ) {
					this.delete_dossier( href_list["delete_record"] );
				}

				if ( Lang13.Bool( href_list["delete_aux"] ) ) {
					this.delete_record( href_list["delete_aux"] );
				}

				if ( ( !( this.misc != null ) || !( this.misc.len != 0 ) ) && ( !( this.files != null ) || !( this.files.len != 0 ) ) ) {
					this.temp = "Database is empty.";
				} else {
					
					if ( this.files != null && this.files.len != 0 ) {
						this.temp = "<b>Criminal Evidence Database</b><br><br>\n						Consolidated data points:<br>";

						foreach (dynamic _a in Lang13.Enumerate( this.files )) {
							print = _a;
							
							file = this.files[print];
							this.temp += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=record;identifier=" ).item( print ).str( "'>{" ).item( file[2] ).str( "}</a><br>" ).ToString();
						}
						this.temp += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";operation=card'>{Insert Finger Print Card (To complete a Dossier)}</a><br><br><br>" ).ToString();
					} else {
						this.temp = "";
					}

					if ( this.misc != null && this.misc.len != 0 ) {
						this.temp += "<b>Auxiliary Evidence Database</b><br><br>\n						This is where anything without fingerprints goes.<br><br>";

						foreach (dynamic _b in Lang13.Enumerate( this.misc )) {
							atom = _b;
							
							data_entry = this.misc[atom];
							this.temp += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=auxiliary;identifier=" ).item( atom ).str( "'>{" ).item( data_entry[3] ).str( "}</a><br>" ).ToString();
						}
					}
				}
			} else if ( _q=="record" ) {
				this.canclear = false;

				if ( this.files != null ) {
					dossier = this.files[href_list["identifier"]];

					if ( Lang13.Bool( href_list["ren"] ) ) {
						new_title = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Rename to what?", "Dossier Editing", "Dossier " + this.files.Find( href_list["identifier"] ), null, null, InputType.Str | InputType.Null ) ), 1, 1024 );

						if ( Lang13.Bool( new_title ) ) {
							dossier[2] = new_title;
						} else {
							GlobalFuncs.to_chat( Task13.User, "Illegal or blank name." );
						}
					}
					this.temp = "<b>Criminal Evidence Database</b><br><br>\n					Consolidated data points: " + dossier[2] + "<br>";
					print_string = "Fingerprints: Print not complete!<br>";

					if ( GlobalFuncs.stringpercent( dossier[1] ) <= GlobalVars.FINGERPRINT_COMPLETE ) {
						print_string = "Fingerprints: (80% or higher completion reached)<br>" + dossier[1] + "<br>";
					}
					this.temp += print_string;

					foreach (dynamic _e in Lang13.Enumerate( dossier )) {
						_object = _e;
						

						if ( _object == dossier[1] || _object == dossier[2] ) {
							continue;
						}
						this.temp += "<hr>";
						outputs = dossier[_object];
						prints = outputs[1];
						this.temp += "<big><b>Object:</b> " + outputs[4] + "</big><br>\n						&nbsp<b>Fingerprints:</b><br>\n						&nbsp;&nbsp;&nbsp;&nbsp;" + prints.len + " Unique fingerprints found.<br>";
						complete_prints = 0;

						foreach (dynamic _c in Lang13.Enumerate( prints )) {
							print2 = _c;
							

							if ( GlobalFuncs.stringpercent( prints[print2] ) <= GlobalVars.FINGERPRINT_COMPLETE ) {
								complete_prints++;
								this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + prints[print2] + "<br>";
							}
						}

						if ( complete_prints != 0 ) {
							this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And " + ( prints.len - complete_prints ) + " unknown unique prints.<br>";
						} else {
							this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No prints of sufficient completeness.<br>";
						}
						fibers = outputs[2];

						if ( fibers != null && fibers.len != 0 ) {
							this.temp += "&nbsp<b>Fibers:</b><br>";
							j = null;
							j = 1;

							while (( j ??0) <= fibers.len) {
								this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + fibers[j] + "<br>";
								j++;
							}
						}
						blood = outputs[3];

						if ( blood != null && blood.len != 0 ) {
							this.temp += "&nbsp<b>Blood:</b><br>";

							foreach (dynamic _d in Lang13.Enumerate( blood )) {
								named = _d;
								
								this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: " + blood[named] + ", DNA: " + named + "<br>";
							}
						}
					}
					this.temp += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";operation=record;identifier=" ).item( href_list["identifier"] ).str( ";ren=true'>{Rename this Dossier}</a>\n					<br><a href='?src=" ).Ref( this ).str( ";operation=database;delete_record=" ).item( href_list["identifier"] ).str( "'>{Delete this Dossier}</a>\n					<br><a href='?src=" ).Ref( this ).str( ";operation=databaseprint;identifier=" ).item( href_list["identifier"] ).str( "'>{Print}</a>" ).ToString();
				} else {
					this.temp = "ERROR.  Database not found!<br>";
				}
				this.temp += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";operation=database'>{Return}</a>" ).ToString();
			} else if ( _q=="databaseprint" ) {
				
				if ( this.files != null ) {
					P = new Obj_Item_Weapon_Paper( this.loc );
					dossier2 = this.files[href_list["identifier"]];
					P.name = new Txt().improper().str( "Database File (" ).item( dossier2[2] ).str( ")" ).ToString();
					P.overlays.Add( "paper_words" );
					P.info = "<b>Criminal Evidence Database</b><br><br>\n					Consolidated data points: " + dossier2[2] + "<br>";
					print_string2 = "Fingerprints: Print not complete!<br>";

					if ( GlobalFuncs.stringpercent( dossier2[1] ) <= GlobalVars.FINGERPRINT_COMPLETE ) {
						print_string2 = "Fingerprints: (80% or higher completion reached)<br>" + dossier2[1] + "<br>";
					}
					P.info += print_string2;

					foreach (dynamic _h in Lang13.Enumerate( dossier2 )) {
						_object2 = _h;
						

						if ( _object2 == dossier2[1] || _object2 == dossier2[2] ) {
							continue;
						}
						P.info += "<hr>";
						outputs2 = dossier2[_object2];
						prints2 = outputs2[1];
						P.info += "<big><b>Object:</b> " + outputs2[4] + "</big><br>\n						&nbsp<b>Fingerprints:</b><br>\n						&nbsp;&nbsp;&nbsp;&nbsp;" + prints2.len + " Unique fingerprints found.<br>";
						complete_prints2 = 0;

						foreach (dynamic _f in Lang13.Enumerate( prints2 )) {
							print3 = _f;
							

							if ( GlobalFuncs.stringpercent( prints2[print3] ) <= GlobalVars.FINGERPRINT_COMPLETE ) {
								complete_prints2++;
								P.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + prints2[print3] + "<br>";
							}
						}

						if ( complete_prints2 != 0 ) {
							P.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And " + ( prints2.len - complete_prints2 ) + " unknown unique prints.<br>";
						} else {
							P.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No prints of sufficient completeness.<br>";
						}
						fibers2 = outputs2[2];

						if ( fibers2 != null && fibers2.len != 0 ) {
							P.info += "&nbsp<b>Fibers:</b><br>";
							j2 = null;
							j2 = 1;

							while (( j2 ??0) <= fibers2.len) {
								P.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + fibers2[j2] + "<br>";
								j2++;
							}
						}
						blood2 = outputs2[3];

						if ( blood2 != null && blood2.len != 0 ) {
							P.info += "&nbsp<b>Blood:</b><br>";

							foreach (dynamic _g in Lang13.Enumerate( blood2 )) {
								named2 = _g;
								
								P.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: " + blood2[named2] + ", DNA: " + named2 + "<br>";
							}
						}
					}
				} else {
					GlobalFuncs.to_chat( Task13.User, "ERROR.  Database not found!<br>" );
				}
			} else if ( _q=="auxiliary" ) {
				this.canclear = false;

				if ( this.misc != null ) {
					this.temp = "<b>Auxiliary Evidence Database</b><br><br>";
					outputs3 = this.misc[href_list["identifier"]];
					this.temp += "<big><b>Consolidated data points:</b> " + outputs3[3] + "</big><br>";
					prints3 = outputs3[4];

					if ( prints3 != null ) {
						this.temp += "&nbsp<b>Fingerprints:</b><br>\n						&nbsp;&nbsp;&nbsp;&nbsp;" + prints3.len + " Unique fingerprints found.<br>";
						complete_prints3 = 0;

						foreach (dynamic _i in Lang13.Enumerate( prints3 )) {
							print4 = _i;
							

							if ( GlobalFuncs.stringpercent( prints3[print4] ) <= GlobalVars.FINGERPRINT_COMPLETE ) {
								complete_prints3++;
								this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + prints3[print4] + "<br>";
							}
						}

						if ( complete_prints3 != 0 ) {
							this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And " + ( prints3.len - complete_prints3 ) + " unknown unique prints.<br>";
						} else {
							this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No prints of sufficient completeness.<br>";
						}
					}
					fibers3 = outputs3[1];

					if ( fibers3 != null && fibers3.len != 0 ) {
						this.temp += "&nbsp<b>Fibers:</b><br>";

						foreach (dynamic _j in Lang13.Enumerate( fibers3 )) {
							fiber = _j;
							
							this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + fiber + "<br>";
						}
					}
					blood3 = outputs3[2];

					if ( blood3 != null && blood3.len != 0 ) {
						this.temp += "&nbsp<b>Blood:</b><br>";

						foreach (dynamic _k in Lang13.Enumerate( blood3 )) {
							named3 = _k;
							
							this.temp += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: " + blood3[named3] + ", DNA: " + named3 + "<br>";
						}
					}
					this.temp += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";operation=database;delete_aux=" ).item( href_list["identifier"] ).str( "'>{Delete This Record}</a>\n					<br><a href='?src=" ).Ref( this ).str( ";operation=auxiliaryprint;identifier=" ).item( href_list["identifier"] ).str( "'>{Print}</a>" ).ToString();
				} else {
					this.temp = "ERROR.  Database not found!<br>";
				}
				this.temp += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";operation=database'>{Return}</a>" ).ToString();
			} else if ( _q=="auxiliaryprint" ) {
				
				if ( this.misc != null ) {
					P2 = new Obj_Item_Weapon_Paper( this.loc );
					outputs4 = this.misc[href_list["identifier"]];
					P2.name = new Txt().improper().str( "Auxiliary Database File (" ).item( outputs4[3] ).str( ")" ).ToString();
					P2.overlays.Add( "paper_words" );
					P2.info = "<b>Auxiliary Evidence Database</b><br><br>\n					<big><b>Consolidated data points:</b> " + outputs4[3] + "</big><br>";
					prints4 = outputs4[4];

					if ( prints4 != null ) {
						P2.info += "&nbsp<b>Fingerprints:</b><br>\n						&nbsp;&nbsp;&nbsp;&nbsp;" + prints4.len + " Unique fingerprints found.<br>";
						complete_prints4 = 0;

						foreach (dynamic _l in Lang13.Enumerate( prints4 )) {
							print5 = _l;
							

							if ( GlobalFuncs.stringpercent( prints4[print5] ) <= GlobalVars.FINGERPRINT_COMPLETE ) {
								complete_prints4++;
								P2.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + prints4[print5] + "<br>";
							}
						}

						if ( complete_prints4 != 0 ) {
							P2.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;And " + ( prints4.len - complete_prints4 ) + " unknown unique prints.<br>";
						} else {
							P2.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No prints of sufficient completeness.<br>";
						}
					}
					fibers4 = outputs4[1];

					if ( fibers4 != null && fibers4.len != 0 ) {
						P2.info += "&nbsp<b>Fibers:</b><br>";

						foreach (dynamic _m in Lang13.Enumerate( fibers4 )) {
							fiber2 = _m;
							
							P2.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + fiber2 + "<br>";
						}
					}
					blood4 = outputs4[2];

					if ( blood4 != null && blood4.len != 0 ) {
						P2.info += "&nbsp<b>Blood:</b><br>";

						foreach (dynamic _n in Lang13.Enumerate( blood4 )) {
							named4 = _n;
							
							P2.info += "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Type: " + blood4[named4] + ", DNA: " + named4 + "<br>";
						}
					}
				} else {
					GlobalFuncs.to_chat( Task13.User, "ERROR.  Database not found!<br>" );
				}
			} else if ( _q=="scan" ) {
				
				if ( this.scanning is Obj_Item_Weapon_FCard ) {
					this.card = this.scanning;
					this.scanning = Lang13.Initial( this, "scanning" );
					this.process_card();
				} else if ( Lang13.Bool( this.scanning ) ) {
					this.scan_process = 3;
					this.scan_data = "Scanning " + this.scanning + ": 25% complete";
					this.updateDialog();
					Task13.Sleep( 50 );

					if ( !( this.scan_process != 0 ) ) {
						this.scan_data = null;
						this.updateDialog();
						return _default;
					}
					this.scan_data = "Scanning " + this.scanning + ": 50% complete";
					this.updateDialog();
					this.scan_process = 2;
					Task13.Sleep( 50 );

					if ( !( this.scan_process != 0 ) ) {
						this.scan_data = null;
						this.updateDialog();
						return _default;
					}
					this.scan_data = "Scanning " + this.scanning + ": 75% complete";
					this.updateDialog();
					this.scan_process = 1;
					Task13.Sleep( 50 );

					if ( !( this.scan_process != 0 ) ) {
						this.scan_data = null;
						this.updateDialog();
						return _default;
					}

					if ( Lang13.Bool( this.scanning ) ) {
						this.scan_process = 0;
						this.scan_name = this.scanning.name;
						this.scan_data = "<u>" + this.scanning + "</u><br><br>";

						if ( this.scanning.blood_DNA != null ) {
							this.scan_data += "Blood Found:<br>";

							foreach (dynamic _o in Lang13.Enumerate( this.scanning.blood_DNA )) {
								blood5 = _o;
								
								this.scan_data += "Blood type: " + this.scanning.blood_DNA[blood5] + "\nDNA: " + blood5 + "<br><br>";
							}
						} else {
							this.scan_data += "No Blood Found<br><br>";
						}

						if ( !( this.scanning.fingerprints != null ) ) {
							this.scan_data += "No Fingerprints Found<br><br>";
						} else {
							this.scan_data += "Isolated " + this.scanning.fingerprints.len + " Fingerprints.  Loaded into database.<br>";
							this.add_data( this.scanning );
						}

						if ( !( this.scanning.suit_fibers != null ) ) {
							this.scan_data += "No Fibers/Materials Located<br>";
						} else {
							this.scan_data += "Fibers/Materials Found:<br>";

							foreach (dynamic _p in Lang13.Enumerate( this.scanning.suit_fibers )) {
								data = _p;
								
								this.scan_data += "- " + data + "<br>";
							}
						}

						if ( this.scanning is Obj_Item_Device_DetectiveScanner || this.scanning is Obj_Item_Device_Pda && Lang13.Bool( this.scanning.cartridge ) && this.scanning.cartridge.access_security ) {
							this.scan_data += new Txt( "<br><b>Data transfered from " ).the( this.scanning ).item().str( " to Database.</b><br>" ).ToString();
							this.add_data_scanner( this.scanning );
						} else if ( !( this.scanning.fingerprints != null ) ) {
							this.scan_data += new Txt( "<br><b><a href='?src=" ).Ref( this ).str( ";operation=add'>Add to Database?</a></b><br>" ).ToString();
						}
					}
				} else {
					this.temp = "Scan Failed: No Object";
				}
			} else if ( _q=="print" ) {
				
				if ( Lang13.Bool( this.scan_data ) ) {
					this.temp = "Scan Data Printed.";
					P3 = new Obj_Item_Weapon_Paper( this.loc );
					P3.name = new Txt().improper().str( "Scan Data (" ).item( this.scan_name ).str( ")" ).ToString();
					P3.info = "<tt>" + this.scan_data + "</tt>";
					P3.overlays.Add( "paper_words" );
				} else {
					this.temp = "Print Failed: No Data";
				}
			} else if ( _q=="erase" ) {
				this.scan_data = "";
			} else if ( _q=="cancel" ) {
				this.scan_process = 0;
			} else if ( _q=="add" ) {
				
				if ( Lang13.Bool( this.scanning ) ) {
					this.add_data( this.scanning );
				} else {
					this.temp = "Data Transfer Failed: No Object.";
				}
			} else if ( _q=="rename" ) {
				
				if ( !( this.files != null ) || !Lang13.Bool( this.files[href_list["identifier"]] ) ) {
					this.temp = "ERROR: Record/Database not found!";
				} else {
					new_title2 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Rename to what?", "Dossier Editing", "Dossier " + this.files.Find( href_list["identifier"] ), null, null, InputType.Str | InputType.Null ) ), 1, 1024 );

					if ( Lang13.Bool( new_title2 ) ) {
						file2 = this.files[href_list["identifier"]];
						file2[2] = new_title2;
					}
				}
			}
			this.updateUsrDialog();
			return _default;
		}

		// Function from file: detective_work.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			bool isai = false;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = "";
			isai = false;

			if ( Task13.User is Mob_Living_Silicon ) {
				isai = true;
			}

			if ( Lang13.Bool( this.temp ) ) {
				dat += "<tt>" + this.temp + "</tt><br><br>";

				if ( this.canclear ) {
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=clear'>{Clear Screen}</a>" ).ToString();
				}
			} else if ( !this.authenticated ) {
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=login'>{Log In}</a>" ).ToString();
			} else {
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=logout'>{Log Out}</a><br><hr><br>" ).ToString();

				if ( Lang13.Bool( this.scanning ) ) {
					
					if ( this.scan_process != 0 ) {
						dat += new Txt( "Scan Object: {" ).item( this.scanning.name ).str( "}<br>\n						<a href='?src=" ).Ref( this ).str( ";operation=cancel'>{Cancel Scan}</a> {Print}<br>" ).ToString();
					} else {
						
						if ( isai ) {
							dat += "Scan Object: {" + this.scanning.name + "}<br>";
						} else {
							dat += new Txt( "Scan Object: <a href='?src=" ).Ref( this ).str( ";operation=eject'>{" ).item( this.scanning.name ).str( "}</a><br>" ).ToString();
						}
						dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=scan'>{Scan}</a> <a href='?src=" ).Ref( this ).str( ";operation=print'>{Print}</a><br>" ).ToString();
					}
				} else {
					
					if ( isai ) {
						dat += "{No Object Inserted}<br>";
					} else {
						dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=insert'>{No Object Inserted}</a><br>" ).ToString();
					}
					dat += new Txt( "{Scan} <a href='?src=" ).Ref( this ).str( ";operation=print'>{Print}</a><br>" ).ToString();
				}
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=database'>{Access Database}</a><br><br>\n				<tt>" ).item( this.scan_data ).str( "</tt>" ).ToString();

				if ( Lang13.Bool( this.scan_data ) && !( this.scan_process != 0 ) ) {
					dat += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";operation=erase'>{Erase Data}</a>" ).ToString();
				}
			}
			Interface13.Browse( a, dat, "window=scanner" );
			GlobalFuncs.onclose( a, "scanner" );
			return null;
		}

		// Function from file: detective_work.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

	}

}