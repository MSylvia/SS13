// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implant_Freedom : Obj_Item_Weapon_Implant {

		public string activation_emote = "chuckle";
		public int uses = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this._color = "r";
		}

		// Function from file: implantfreedom.dm
		public Obj_Item_Weapon_Implant_Freedom ( dynamic loc = null ) : base( (object)(loc) ) {
			this.activation_emote = Rand13.Pick(new object [] { "blink", "blink_r", "eyebrow", "chuckle", "twitch_s", "frown", "nod", "blush", "giggle", "grin", "groan", "shrug", "smile", "pale", "sniff", "whimper", "wink" });
			this.uses = Rand13.Int( 1, 5 );
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: implantfreedom.dm
		public override string get_data(  ) {
			string dat = null;

			dat = @"
<b>Implant Specifications:</b><BR>
<b>Name:</b> Freedom Beacon<BR>
<b>Life:</b> optimum 5 uses<BR>
<b>Important Notes:</b> <font color='red'>Illegal</font><BR>
<HR>
<b>Implant Details:</b> <BR>
<b>Function:</b> Transmits a specialized cluster of signals to override handcuff locking
mechanisms<BR>
<b>Special Features:</b><BR>
<i>Neuro-Scan</i>- Analyzes certain shadow signals in the nervous system<BR>
<b>Integrity:</b> The battery is extremely weak and commonly after injection its
life can drive down to only 1 use.<HR>
No Implant Specifics";
			return dat;
		}

		// Function from file: implantfreedom.dm
		[VerbInfo( name: "implanted" )]
		[VerbArg( 1, InputType.Mob )]
		public override bool f_implanted( dynamic M = null, dynamic user = null ) {
			M.mind.store_memory( "Freedom implant can be activated by using the " + this.activation_emote + " emote, <B>say *" + this.activation_emote + "</B> to attempt to activate.", 0, 0 );
			GlobalFuncs.to_chat( M, "The implanted freedom implant can be activated by using the " + this.activation_emote + " emote, <B>say *" + this.activation_emote + "</B> to attempt to activate." );
			return true;
		}

		// Function from file: implantfreedom.dm
		public override bool trigger( dynamic emote = null, Mob_Living_Carbon_Human source = null ) {
			dynamic W = null;
			dynamic W2 = null;

			
			if ( this.uses < 1 ) {
				return false;
			}

			if ( emote == this.activation_emote ) {
				this.uses--;
				GlobalFuncs.to_chat( source, "You feel a faint click." );

				if ( Lang13.Bool( source.handcuffed ) ) {
					W = source.handcuffed;
					source.handcuffed = null;
					source.update_inv_handcuffed();

					if ( source.client != null ) {
						source.client.screen.Remove( W );
					}

					if ( Lang13.Bool( W ) ) {
						W.loc = source.loc;
						this.dropped( source );

						if ( Lang13.Bool( W ) ) {
							W.layer = Lang13.Initial( W, "layer" );
						}
					}
				}

				if ( Lang13.Bool( source.legcuffed ) ) {
					W2 = source.legcuffed;
					source.legcuffed = null;
					source.update_inv_legcuffed();

					if ( source.client != null ) {
						source.client.screen.Remove( W2 );
					}

					if ( Lang13.Bool( W2 ) ) {
						W2.loc = source.loc;
						this.dropped( source );

						if ( Lang13.Bool( W2 ) ) {
							W2.layer = Lang13.Initial( W2, "layer" );
						}
					}
				}
			}
			return false;
		}

	}

}