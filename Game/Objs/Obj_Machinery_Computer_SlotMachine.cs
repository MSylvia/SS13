// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_SlotMachine : Obj_Machinery_Computer {

		public int money = 3000;
		public int plays = 0;
		public bool working = false;
		public double balance = 0;
		public int jackpots = 0;
		public ByTable coinvalues = new ByTable();
		public ByTable reels = new ByTable()
											.Set( new ByTable(new object [] { "", "", "" }), 0 )
											.Set( new ByTable(new object [] { "", "", "" }), 0 )
											.Set( new ByTable(new object [] { "", "", "" }), 0 )
											.Set( new ByTable(new object [] { "", "", "" }), 0 )
											.Set( new ByTable(new object [] { "", "", "" }), 0 )
										;
		public ByTable symbols = new ByTable()
											.Set( "<font color='red'>7</font>", 1 )
											.Set( "<font color='orange'>&</font>", 2 )
											.Set( "<font color='yellow'>@</font>", 2 )
											.Set( "<font color='green'>$</font>", 2 )
											.Set( "<font color='blue'>?</font>", 2 )
											.Set( "<font color='grey'>#</font>", 2 )
											.Set( "<font color='white'>!</font>", 2 )
											.Set( "<font color='fuchsia'>%</font>", 2 )
										;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.idle_power_usage = 50;
			this.circuit = typeof(Obj_Item_Weapon_Circuitboard_SlotMachine);
			this.icon = "icons/obj/economy.dmi";
			this.icon_state = "slots1";
		}

		// Function from file: slotmachine.dm
		public Obj_Machinery_Computer_SlotMachine ( dynamic location = null, dynamic C = null ) : base( (object)(location), (object)(C) ) {
			ByTable reel = null;
			int? i = null;
			dynamic cointype = null;
			dynamic C_ = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.jackpots = Rand13.Int( 1, 4 );
			this.plays = Rand13.Int( 75, 200 );
			this.toggle_reel_spin( true );
			reel = this.reels[1];
			i = null;
			i = 0;

			while (( i ??0) < reel.len) {
				this.randomize_reels();
				i++;
			}
			this.toggle_reel_spin( false );

			foreach (dynamic _a in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item_Weapon_Coin) ) )) {
				cointype = _a;
				
				C_ = Lang13.Call( cointype, this );
				this.coinvalues["" + cointype] = C_.value;
				GlobalFuncs.qdel( C_ );
			}
			return;
		}

		// Function from file: slotmachine.dm
		public dynamic dispense( dynamic amount = null, Type cointype = null, dynamic target = null, bool? throwit = null ) {
			amount = amount ?? 0;
			cointype = cointype ?? typeof(Obj_Item_Weapon_Coin_Silver);
			throwit = throwit ?? false;

			int? value = null;
			dynamic C = null;

			value = Lang13.IntNullable( this.coinvalues["" + cointype] );

			while (Convert.ToDouble( amount ) >= ( value ??0)) {
				C = Lang13.Call( cointype, this.loc );
				amount -= value;

				if ( throwit == true && Lang13.Bool( target ) ) {
					((Ent_Dynamic)C).throw_at( target, 3, 10 );
				} else {
					GlobalFuncs.random_step( C, 2, 40 );
				}
			}
			return amount;
		}

		// Function from file: slotmachine.dm
		public dynamic give_coins( dynamic amount = null ) {
			Type cointype = null;
			dynamic target = null;

			cointype = ( Lang13.Bool( this.emagged ) ? typeof(Obj_Item_Weapon_Coin_Iron) : typeof(Obj_Item_Weapon_Coin_Silver) );

			if ( !Lang13.Bool( this.emagged ) ) {
				amount = this.dispense( amount, cointype, null, false );
			} else {
				target = Lang13.FindIn( typeof(Mob_Living), Map13.FetchInRange( this, 2 ) );
				amount = this.dispense( amount, cointype, target, true );
			}
			return amount;
		}

		// Function from file: slotmachine.dm
		public void give_money( int amount = 0 ) {
			int amount_to_give = 0;
			double surplus = 0;

			amount_to_give = ( this.money >= amount ? amount : this.money );
			surplus = amount_to_give - Convert.ToDouble( this.give_coins( amount_to_give ) );
			this.money = Num13.MaxInt( 0, this.money - amount );
			this.balance += surplus;
			return;
		}

		// Function from file: slotmachine.dm
		public int get_lines(  ) {
			int amountthesame = 0;
			int? i = null;
			string inputtext = null;
			dynamic symbol = null;
			int j = 0;
			dynamic symboltext = null;

			i = null;
			i = 1;

			while (( i ??0) <= 3) {
				inputtext = this.reels[1][i] + this.reels[2][i] + this.reels[3][i] + this.reels[4][i] + this.reels[5][i];

				foreach (dynamic _a in Lang13.Enumerate( this.symbols )) {
					symbol = _a;
					
					j = 3;
					symboltext = symbol + symbol + symbol;

					while (j <= 5) {
						
						if ( String13.FindIgnoreCase( inputtext, symboltext, 1, 0 ) != 0 ) {
							amountthesame = Num13.MaxInt( j, amountthesame );
						}
						j++;
						symboltext += symbol;
					}

					if ( amountthesame != 0 ) {
						break;
					}
				}
				i++;
			}
			return amountthesame;
		}

		// Function from file: slotmachine.dm
		public void give_prizes( dynamic usrname = null, Mob user = null ) {
			int linelength = 0;
			int? i = null;
			dynamic cointype = null;
			dynamic C = null;

			linelength = this.get_lines();

			if ( this.reels[1][2] + this.reels[2][2] + this.reels[3][2] + this.reels[4][2] + this.reels[5][2] == "" + "<font color='red'>7</font>" + "<font color='red'>7</font>" + "<font color='red'>7</font>" + "<font color='red'>7</font>" + "<font color='red'>7</font>" ) {
				this.visible_message( "<b>" + this + "</b> says, 'JACKPOT! You win " + this.money + " credits worth of coins!'" );
				GlobalFuncs.priority_announce( "Congratulations to " + ( user != null ? user.real_name : usrname ) + " for winning the jackpot at the slot machine in " + GlobalFuncs.get_area( this ) + "!" );
				this.jackpots += 1;
				this.balance += this.money - Convert.ToDouble( this.give_coins( 10000 ) );
				this.money = 0;
				i = null;
				i = 0;

				while (( i ??0) < 5) {
					cointype = Rand13.PickFromTable( Lang13.GetTypes( typeof(Obj_Item_Weapon_Coin) ) - typeof(Obj_Item_Weapon_Coin) );
					C = Lang13.Call( cointype, this.loc );
					GlobalFuncs.random_step( C, 2, 50 );
					i++;
				}
			} else if ( linelength == 5 ) {
				this.visible_message( "<b>" + this + "</b> says, 'Big Winner! You win a thousand credits worth of coins!'" );
				this.give_money( 1000 );
			} else if ( linelength == 4 ) {
				this.visible_message( "<b>" + this + "</b> says, 'Winner! You win four hundred credits worth of coins!'" );
				this.give_money( 400 );
			} else if ( linelength == 3 ) {
				user.WriteMsg( "<span class='notice'>You win three free games!</span>" );
				this.balance += 20;
				this.money = Num13.MaxInt( this.money - 20, this.money );
			} else {
				user.WriteMsg( "<span class='warning'>No luck!</span>" );
			}
			return;
		}

		// Function from file: slotmachine.dm
		public void randomize_reels(  ) {
			dynamic reel = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reels )) {
				reel = _a;
				

				if ( Lang13.Bool( this.reels[reel] ) ) {
					reel[3] = reel[2];
					reel[2] = reel[1];
					reel[1] = Rand13.PickFromTable( this.symbols );
				}
			}
			return;
		}

		// Function from file: slotmachine.dm
		public void toggle_reel_spin( bool value = false, int? delay = null ) {
			delay = delay ?? 0;

			ByTable reel = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.reels, typeof(ByTable) )) {
				reel = _a;
				
				this.reels[reel] = value;
				Task13.Sleep( delay ??0 );
			}
			return;
		}

		// Function from file: slotmachine.dm
		public bool can_spin( Mob user = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				user.WriteMsg( "<span class='warning'>The slot machine has no power!</span>" );
			}

			if ( ( this.stat & 1 ) != 0 ) {
				user.WriteMsg( "<span class='warning'>The slot machine is broken!</span>" );
			}

			if ( this.working ) {
				user.WriteMsg( "<span class='warning'>You need to wait until the machine stops spinning before you can play again!</span>" );
				return false;
			}

			if ( this.balance < 5 ) {
				user.WriteMsg( "<span class='warning'>Insufficient money to play!</span>" );
				return false;
			}
			return true;
		}

		// Function from file: slotmachine.dm
		public void spin( Mob user = null ) {
			dynamic the_name = null;

			
			if ( !this.can_spin( user ) ) {
				return;
			}

			if ( user != null ) {
				the_name = user.real_name;
				this.visible_message( "<span class='notice'>" + user + " pulls the lever and the slot machine starts spinning!</span>" );
			} else {
				the_name = "Exaybachay";
			}
			this.balance -= 5;
			this.money += 5;
			this.plays += 1;
			this.working = true;
			this.toggle_reel_spin( true );
			this.update_icon();
			this.updateDialog();
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				while (this.working) {
					this.randomize_reels();
					this.updateDialog();
					Task13.Sleep( 2 );
				}
				return;
			}));
			Task13.Schedule( 65 - this.reels.len * 7, (Task13.Closure)(() => {
				this.toggle_reel_spin( false, 7 );
				this.working = false;
				this.give_prizes( the_name, user );
				this.update_icon();
				this.updateDialog();
				return;
			}));
			return;
		}

		// Function from file: slotmachine.dm
		public override double emp_act( int severity = 0 ) {
			int severity_ascending = 0;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return 0;
			}

			if ( Rand13.PercentChance( severity * 15 ) ) {
				return 0;
			}

			if ( Rand13.PercentChance( 1 ) ) {
				this.emagged = 1;
			}
			severity_ascending = 4 - severity;
			this.money = Num13.MaxInt( Rand13.Int( this.money - severity_ascending * 200, this.money + severity_ascending * 200 ), 0 );
			this.balance = Num13.MaxInt( Rand13.Int( ((int)( this.balance - severity_ascending * 50 )), ((int)( this.balance + severity_ascending * 50 )) ), 0 );
			this.money -= Num13.MaxInt( 0, Convert.ToInt32( this.give_coins( Num13.Min( Rand13.Int( -50, severity_ascending * 100 ) ) ) ) );
			this.spin();
			return 0;
		}

		// Function from file: slotmachine.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic _default = null;

			_default = base.Topic( href, href_list, (object)(hsrc) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["spin"] ) ) {
				this.spin( Task13.User );
			} else if ( Lang13.Bool( href_list["refund"] ) ) {
				this.give_coins( this.balance );
				this.balance = 0;
			}
			return _default;
		}

		// Function from file: slotmachine.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string reeltext = null;
			string dat = null;
			Browser popup = null;

			reeltext = "<center><font face=\"courier new\">\n	/*****^*****^*****^*****^*****\\<BR>\n	| [" + this.reels[1][1] + "] | [" + this.reels[2][1] + "] | [" + this.reels[3][1] + "] | [" + this.reels[4][1] + "] | [" + this.reels[5][1] + "] |<BR>\n	| [" + this.reels[1][2] + "] | [" + this.reels[2][2] + "] | [" + this.reels[3][2] + "] | [" + this.reels[4][2] + "] | [" + this.reels[5][2] + "] |<BR>\n	| [" + this.reels[1][3] + "] | [" + this.reels[2][3] + "] | [" + this.reels[3][3] + "] | [" + this.reels[4][3] + "] | [" + this.reels[5][3] + "] |<BR>\n	\\*****v*****v*****v*****v*****/<BR>\n	</center></font>";

			if ( this.working ) {
				dat = reeltext;
			} else {
				dat = new Txt( "Five credits to play!<BR>\n		<B>Prize Money Available:</B> " ).item( this.money ).str( " (jackpot payout is ALWAYS 100%!)<BR>\n		<B>Credit Remaining:</B> " ).item( this.balance ).str( "<BR>\n		" ).item( this.plays ).str( " players have tried their luck today, and " ).item( this.jackpots ).str( " have won a jackpot!<BR>\n		<HR><BR>\n		<A href='?src=" ).Ref( this ).str( ";spin=1'>Play!</A><BR>\n		<BR>\n		" ).item( reeltext ).str( "\n		<BR>\n		<font size='1'><A href='?src=" ).Ref( this ).str( ";refund=1'>Refund balance</A><BR>" ).ToString();
			}
			popup = new Browser( user, "slotmachine", "Slot Machine" );
			popup.set_content( dat );
			popup.set_title_image( ((Mob)user).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: slotmachine.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic _default = null;

			_default = base.attack_hand( (object)(a), b, c );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}
			this.interact( a );
			return _default;
		}

		// Function from file: slotmachine.dm
		public override bool emag_act( dynamic user = null ) {
			EffectSystem_SparkSpread spark_system = null;

			
			if ( !Lang13.Bool( this.emagged ) ) {
				this.emagged = 1;
				spark_system = new EffectSystem_SparkSpread();
				spark_system.set_up( 4, 0, this.loc );
				spark_system.start();
				GlobalFuncs.playsound( this.loc, "sparks", 50, 1 );
			}
			return false;
		}

		// Function from file: slotmachine.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic C = null;

			
			if ( A is Obj_Item_Weapon_Coin ) {
				C = A;

				if ( Rand13.PercentChance( 2 ) ) {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					C.loc = this.loc;
					((Ent_Dynamic)C).throw_at( user, 3, 10 );

					if ( Rand13.PercentChance( 10 ) ) {
						this.balance = Num13.MaxInt( ((int)( this.balance - 5 )), 0 );
					}
					user.WriteMsg( "<span class='warning'>" + this + " spits your coin back out!</span>" );
				} else {
					
					if ( !Lang13.Bool( user.drop_item() ) ) {
						return null;
					}
					user.WriteMsg( "<span class='notice'>You insert a " + C.cmineral + " coin into " + this + "'s slot!</span>" );
					this.balance += Convert.ToDouble( C.value );
					GlobalFuncs.qdel( C );
				}
				return null;
			} else if ( !( this.balance != 0 ) ) {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: slotmachine.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: slotmachine.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "slots0";
			} else if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "slotsb";
			} else if ( this.working ) {
				this.icon_state = "slots2";
			} else {
				this.icon_state = "slots1";
			}
			return false;
		}

		// Function from file: slotmachine.dm
		public override int? process( dynamic seconds = null ) {
			int? _default = null;

			_default = base.process( (object)(seconds) );

			if ( !Lang13.Bool( _default ) ) {
				return _default;
			}
			this.money++;
			return _default;
		}

	}

}