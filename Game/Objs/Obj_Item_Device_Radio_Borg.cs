// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Radio_Borg : Obj_Item_Device_Radio {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.subspace_switchable = true;
		}

		public Obj_Item_Device_Radio_Borg ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: radio.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic ch_name = null;
			dynamic T = null;

			
			if ( !( A is Obj_Item_Weapon_Screwdriver || A is Obj_Item_Device_Encryptionkey ) ) {
				return null;
			}

			if ( A is Obj_Item_Weapon_Screwdriver ) {
				
				if ( Lang13.Bool( this.keyslot ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
						ch_name = _a;
						
						GlobalVars.SSradio.remove_object( this, Convert.ToDouble( GlobalVars.radiochannels[ch_name] ) );
						this.secure_radio_connections[ch_name] = null;
					}

					if ( Lang13.Bool( this.keyslot ) ) {
						T = GlobalFuncs.get_turf( user );

						if ( Lang13.Bool( T ) ) {
							this.keyslot.loc = T;
							this.keyslot = null;
						}
					}
					this.recalculateChannels();
					user.WriteMsg( "<span class='notice'>You pop out the encryption key in the radio.</span>" );
				} else {
					user.WriteMsg( "<span class='warning'>This radio doesn't have any encryption keys!</span>" );
				}
			}

			if ( A is Obj_Item_Device_Encryptionkey ) {
				
				if ( Lang13.Bool( this.keyslot ) ) {
					user.WriteMsg( "<span class='warning'>The radio can't hold another key!</span>" );
					return null;
				}

				if ( !Lang13.Bool( this.keyslot ) ) {
					
					if ( !((Mob)user).unEquip( A ) ) {
						return null;
					}
					A.loc = this;
					this.keyslot = A;
				}
				this.recalculateChannels();
			}
			return null;
		}

	}

}