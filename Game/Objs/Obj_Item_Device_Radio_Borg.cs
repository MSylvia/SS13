// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Radio_Borg : Obj_Item_Device_Radio {

		public dynamic keyslot = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.subspace_transmission = true;
		}

		// Function from file: cyborg.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			dynamic ch_name = null;

			
			if ( !Lang13.Bool( this.on ) ) {
				return null;
			}
			dat = "<html><head><title>" + this + "</title></head><body><TT>";
			dat += new Txt( "\n				Speaker: " ).item( ( Lang13.Bool( this.listening ) ? new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=0'>Engaged</A>" ).ToString() : new Txt( "<A href='byond://?src=" ).Ref( this ).str( ";listen=1'>Disengaged</A>" ).ToString() ) ).str( "<BR>\n				Frequency:\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=-10'>-</A>\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=-2'>-</A>\n				" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( "\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=2'>+</A>\n				<A href='byond://?src=" ).Ref( this ).str( ";freq=10'>+</A><BR>\n				<A href='byond://?src=" ).Ref( this ).str( ";mode=1'>Toggle Broadcast Mode</A><BR>\n				" ).ToString();

			if ( this.subspace_transmission ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
					ch_name = _a;
					
					dat += this.text_sec_channel( ch_name, this.channels[ch_name] );
				}
			}
			dat += "" + this.text_wires() + "</TT></body></html>";
			Interface13.Browse( user, dat, "window=radio" );
			GlobalFuncs.onclose( user, "radio" );
			return null;
		}

		// Function from file: cyborg.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( Task13.User.stat ) || !Lang13.Bool( this.on ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["mode"] ) ) {
				this.subspace_transmission = !this.subspace_transmission;

				if ( !this.subspace_transmission ) {
					this.channels = new ByTable();
				} else {
					this.recalculateChannels();
				}
				GlobalFuncs.to_chat( Task13.User, "Subspace Transmission is " + ( this.subspace_transmission ? "enabled" : "disabled" ) );
			}
			base.Topic( href, href_list, (object)(hclient) );
			return null;
		}

		// Function from file: cyborg.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic ch_name = null;
			dynamic T = null;

			((Mob)b).set_machine( this );

			if ( !( a is Obj_Item_Weapon_Screwdriver || a is Obj_Item_Device_Encryptionkey ) ) {
				return null;
			}

			if ( a is Obj_Item_Weapon_Screwdriver ) {
				
				if ( Lang13.Bool( this.keyslot ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.channels )) {
						ch_name = _a;
						
						GlobalVars.radio_controller.remove_object( this, GlobalVars.radiochannels[ch_name] );
						this.secure_radio_connections[ch_name] = null;
					}

					if ( Lang13.Bool( this.keyslot ) ) {
						T = GlobalFuncs.get_turf( b );

						if ( Lang13.Bool( T ) ) {
							this.keyslot.loc = T;
							this.keyslot = null;
						}
					}
					this.recalculateChannels();
					GlobalFuncs.to_chat( b, "You pop out the encryption key in the radio!" );
				} else {
					GlobalFuncs.to_chat( b, "This radio doesn't have any encryption keys!" );
				}
			}

			if ( a is Obj_Item_Device_Encryptionkey ) {
				
				if ( !( this.keyslot == null ) ) {
					GlobalFuncs.to_chat( b, "<SPAN CLASS='notice'>The radio can't hold another key!</SPAN>" );
				} else if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
					this.insert_key( a );
				}
			}
			return null;
		}

		// Function from file: cyborg.dm
		public void recalculateChannels(  ) {
			dynamic ch_name = null;
			dynamic ch_name2 = null;

			this.channels = new ByTable();
			this.syndie = false;

			if ( Lang13.Bool( this.keyslot ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.keyslot.channels )) {
					ch_name = _a;
					
					Interface13.Stat( null, this.channels.Contains( ch_name ) );

					if ( false ) {
						continue;
					}
					this.channels.Add( ch_name );
					this.channels[ch_name] = this.keyslot.channels[ch_name];
				}

				if ( Lang13.Bool( this.keyslot.syndie ) ) {
					this.syndie = true;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( this.channels )) {
				ch_name2 = _b;
				

				if ( !( GlobalVars.radio_controller != null ) ) {
					Task13.Sleep( 30 );
				}

				if ( !( GlobalVars.radio_controller != null ) ) {
					this.name = "broken radio";
					return;
				}
				this.secure_radio_connections[ch_name2] = GlobalFuncs.add_radio( this, GlobalVars.radiochannels[ch_name2] );
			}
			return;
		}

		// Function from file: cyborg.dm
		public void insert_key( dynamic key = null ) {
			this.keyslot = key;
			this.recalculateChannels();
			return;
		}

	}

}