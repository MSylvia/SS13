// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Card_Id_Syndicate : Obj_Item_Weapon_Card_Id {

		public dynamic registered_user = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.access = new ByTable(new object [] { 12, 150, 13 });
			this.origin_tech = "syndicate=3";
		}

		public Obj_Item_Weapon_Card_Id_Syndicate ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: human_resources.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic DE = null;

			
			if ( a is Obj_Item_DemoteChip ) {
				DE = a;

				if ( this.registered_name != DE.target_name ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>Failed to apply, names do not match.</span>" );
				} else if ( this.bans != null ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>This card already has a microchip applied</span>" );
				} else {
					this.icon_state = "centcom_old";
					this.bans = "9";
					Lang13.Delete( DE );
					DE = null;
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: cards_ids.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string t = null;
			string u = null;
			string new_name = null;
			ByTable appearances = null;
			dynamic choice = null;
			string new_job = null;
			dynamic new_account = null;
			string __default = null;
			dynamic H = null;
			string new_blood_type = null;
			string __default2 = null;
			dynamic H2 = null;
			string new_dna_hash = null;
			string __default3 = null;
			dynamic H3 = null;
			string new_fingerprint_hash = null;

			
			if ( !Lang13.Bool( this.registered_name ) ) {
				t = GlobalFuncs.reject_bad_name( Interface13.Input( user, "What name would you like to put on this card?", "Agent card name", ( user is Mob_Living_Carbon_Human ? user.real_name : user.name ), null, InputType.Any ) );

				if ( !Lang13.Bool( t ) ) {
					Interface13.Alert( "Invalid name." );
					return null;
				}
				this.registered_name = t;
				u = GlobalFuncs.sanitize( GlobalFuncs.stripped_input( user, "What occupation would you like to put on this card?\nNote: This will not grant any access levels other than Maintenance.", "Agent card job assignment", "Agent", 1024 ) );

				if ( !Lang13.Bool( u ) ) {
					Interface13.Alert( "Invalid assignment." );
					this.registered_name = "";
					return null;
				}
				this.assignment = u;
				this.name = "" + this.registered_name + "'s ID Card (" + this.assignment + ")";
				GlobalFuncs.to_chat( user, "<span class='notice'>You successfully forge the ID card.</span>" );
				this.registered_user = user;
			} else if ( !Lang13.Bool( this.registered_user ) || this.registered_user == user ) {
				
				if ( !Lang13.Bool( this.registered_user ) ) {
					this.registered_user = user;
				}

				switch ((string)( Interface13.Alert( user, new Txt( "Would you like to display " ).the( this ).item().str( " or edit it?" ).ToString(), "Choose.", "Show", "Edit" ) )) {
					case "Show":
						return base.attack_self( (object)(user), (object)(flag), emp );
						break;
					case "Edit":
						
						dynamic _a = Interface13.Input( user, new Txt( "What would you like to edit on " ).the( this ).item().str( "?" ).ToString(), null, null, new ByTable(new object [] { "Name", "Appearance", "Occupation", "Money account", "Blood type", "DNA hash", "Fingerprint hash", "Reset card" }), InputType.Any ); // Was a switch-case, sorry for the mess.
						if ( _a=="Name" ) {
							new_name = GlobalFuncs.reject_bad_name( Interface13.Input( user, "What name would you like to put on this card?", "Agent card name", ( user is Mob_Living_Carbon_Human ? user.real_name : user.name ), null, InputType.Any ) );

							if ( !this.Adjacent( user ) ) {
								return null;
							}
							this.registered_name = new_name;
							this.UpdateName();
							GlobalFuncs.to_chat( user, "Name changed to " + new_name + "." );
						} else if ( _a=="Appearance" ) {
							appearances = new ByTable(new object [] { 
								"data", 
								"id", 
								"gold", 
								"silver", 
								"centcom_old", 
								"centcom", 
								"security", 
								"medical", 
								"HoS", 
								"research", 
								"engineering", 
								"CMO", 
								"RD", 
								"CE", 
								"clown", 
								"mime", 
								"syndie", 
								"deathsquad", 
								"creed", 
								"ERT_leader", 
								"ERT_security", 
								"ERT_engineering", 
								"ERT_medical"
							 });
							choice = Interface13.Input( user, "Select the appearance for this card.", "Choose.", null, appearances, InputType.Any );

							if ( !this.Adjacent( user ) ) {
								return null;
							}

							if ( !Lang13.Bool( choice ) ) {
								return null;
							}
							this.icon_state = choice;
							GlobalFuncs.to_chat( Task13.User, "Appearance changed to " + choice + "." );
						} else if ( _a=="Occupation" ) {
							new_job = GlobalFuncs.sanitize( GlobalFuncs.stripped_input( user, "What job would you like to put on this card?\nChanging occupation will not grant or remove any access levels.", "Agent card occupation", "Assistant", 1024 ) );

							if ( !this.Adjacent( user ) ) {
								return null;
							}
							this.assignment = new_job;
							GlobalFuncs.to_chat( user, "Occupation changed to " + new_job + "." );
							this.UpdateName();
						} else if ( _a=="Money account" ) {
							new_account = Interface13.Input( user, "What money account would you like to link to this card?", "Agent card account", 11111, null, InputType.Num );

							if ( !this.Adjacent( user ) ) {
								return null;
							}
							this.associated_account_number = new_account;
							GlobalFuncs.to_chat( user, "Linked money account changed to " + new_account + "." );
						} else if ( _a=="Blood type" ) {
							__default = "[UNSET]";

							if ( user is Mob_Living_Carbon_Human ) {
								H = user;

								if ( Lang13.Bool( H.dna ) ) {
									__default = H.dna.b_type;
								}
							}
							new_blood_type = GlobalFuncs.sanitize( Interface13.Input( user, "What blood type would you like to be written on this card?", "Agent card blood type", __default, null, InputType.Str ) );

							if ( !this.Adjacent( user ) ) {
								return null;
							}
							this.blood_type = new_blood_type;
							GlobalFuncs.to_chat( user, "Blood type changed to " + new_blood_type + "." );
						} else if ( _a=="DNA hash" ) {
							__default2 = "[UNSET]";

							if ( user is Mob_Living_Carbon_Human ) {
								H2 = user;

								if ( Lang13.Bool( H2.dna ) ) {
									__default2 = H2.dna.unique_enzymes;
								}
							}
							new_dna_hash = GlobalFuncs.sanitize( Interface13.Input( user, "What DNA hash would you like to be written on this card?", "Agent card DNA hash", __default2, null, InputType.Str ) );

							if ( !this.Adjacent( user ) ) {
								return null;
							}
							this.dna_hash = new_dna_hash;
							GlobalFuncs.to_chat( user, "DNA hash changed to " + new_dna_hash + "." );
						} else if ( _a=="Fingerprint hash" ) {
							__default3 = "[UNSET]";

							if ( user is Mob_Living_Carbon_Human ) {
								H3 = user;

								if ( Lang13.Bool( H3.dna ) ) {
									__default3 = Num13.Md5( H3.dna.uni_identity );
								}
							}
							new_fingerprint_hash = GlobalFuncs.sanitize( Interface13.Input( user, "What fingerprint hash would you like to be written on this card?", "Agent card fingerprint hash", __default3, null, InputType.Str ) );

							if ( !this.Adjacent( user ) ) {
								return null;
							}
							this.fingerprint_hash = new_fingerprint_hash;
							GlobalFuncs.to_chat( user, "Fingerprint hash changed to " + new_fingerprint_hash + "." );
						} else if ( _a=="Reset card" ) {
							this.name = Lang13.Initial( this, "name" );
							this.registered_name = Lang13.Initial( this, "registered_name" );
							this.icon_state = Lang13.Initial( this, "icon_state" );
							this.assignment = Lang13.Initial( this, "assignment" );
							this.associated_account_number = Lang13.Initial( this, "associated_account_number" );
							this.blood_type = Lang13.Initial( this, "blood_type" );
							this.dna_hash = Lang13.Initial( this, "dna_hash" );
							this.fingerprint_hash = Lang13.Initial( this, "fingerprint_hash" );
							this.access = Lang13.Initial( this, "access" );
							this.registered_user = null;
							GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>All information has been deleted from " ).the( this ).item().str( ".</span>" ).ToString() );
						}
						break;
				}
			} else {
				base.attack_self( (object)(user), (object)(flag), emp );
			}
			return null;
		}

		// Function from file: cards_ids.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			dynamic I = null;

			
			if ( A is Obj_Item_Weapon_Card_Id ) {
				I = A;
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>The " ).item( this ).str( "'s microscanners activate as you pass it over " ).the( I ).item().str( ", copying its access.</span>" ).ToString() );
				this.access |= I.access;
			}
			return false;
		}

	}

}