// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_ColdSink_Freezer : Obj_Machinery_Atmospherics_Unary_ColdSink {

		public dynamic temp_offset = 0;
		public ByTable rotate_verbs = new ByTable(new object [] { typeof(Obj_Machinery_Atmospherics_Unary_ColdSink_Freezer).GetMethod( "rotate" ), typeof(Obj_Machinery_Atmospherics_Unary_ColdSink_Freezer).GetMethod( "rotate_ccw" ) });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.default_colour = "#0000b7";
			this.current_heat_capacity = 1000;
			this.machine_flags = 30;
			this.icon = "icons/obj/Cryogenic2.dmi";
			this.icon_state = "freezer_0";
		}

		// Function from file: Freezer.dm
		public Obj_Machinery_Atmospherics_Unary_ColdSink_Freezer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_Freezer(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();

			if ( Lang13.Bool( this.anchored ) ) {
				this.verbs.Remove( this.rotate_verbs );
			}
			this.initialize_directions = this.dir;
			return;
		}

		// Function from file: Freezer.dm
		public override dynamic process(  ) {
			base.process();
			this.updateUsrDialog();
			return null;
		}

		// Function from file: Freezer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? amount = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			} else {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["start"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "turned " + ( this.on ? "off" : "on" ) ) ) {
						return null;
					}
					this.on = !this.on;
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["temp"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "set temperature of" ) ) {
						return null;
					}
					amount = String13.ParseNumber( href_list["temp"] );

					if ( ( amount ??0) > 0 ) {
						this.current_temperature = Num13.MinInt( ((int)( 293.41 )), ((int)( ( this.current_temperature ??0) + ( amount ??0) )) );
					} else {
						this.current_temperature = Num13.MaxInt( Convert.ToInt32( this.temp_offset + 73.41 ), ((int)( ( this.current_temperature ??0) + ( amount ??0) )) );
					}
				}
			}
			this.updateUsrDialog();
			this.add_fingerprint( Task13.User );
			return null;
		}

		// Function from file: Freezer.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string temp_text = null;
			string dat = null;

			((Mob)a).set_machine( this );
			temp_text = "";

			if ( ( this.air_contents.temperature ??0) > 253.41 ) {
				temp_text = "<FONT color=red>" + this.air_contents.temperature + "</FONT>";
			} else if ( ( this.air_contents.temperature ??0) < 253.41 && ( this.air_contents.temperature ??0) > 173.41 ) {
				temp_text = "<FONT color=black>" + this.air_contents.temperature + "</FONT>";
			} else {
				temp_text = "<FONT color=blue>" + this.air_contents.temperature + "</FONT>";
			}
			dat = new Txt( "<B>Cryo gas cooling system</B><BR>\n	Current status: " ).item( ( this.on ? new Txt( "<A href='?src=" ).Ref( this ).str( ";start=1'>Off</A> <B>On</B>" ).ToString() : new Txt( "<B>Off</B> <A href='?src=" ).Ref( this ).str( ";start=1'>On</A>" ).ToString() ) ).str( "<BR>\n	Current gas temperature: " ).item( temp_text ).str( "<BR>\n	Current air pressure: " ).item( this.air_contents.return_pressure() ).str( "<BR>\n	Target gas temperature: <A href='?src=" ).Ref( this ).str( ";temp=-100'>-</A> <A href='?src=" ).Ref( this ).str( ";temp=-10'>-</A> <A href='?src=" ).Ref( this ).str( ";temp=-1'>-</A> " ).item( this.current_temperature ).str( " <A href='?src=" ).Ref( this ).str( ";temp=1'>+</A> <A href='?src=" ).Ref( this ).str( ";temp=10'>+</A> <A href='?src=" ).Ref( this ).str( ";temp=100'>+</A><BR>\n	" ).ToString();
			Interface13.Browse( a, dat, "window=freezer;size=400x500" );
			GlobalFuncs.onclose( a, "freezer" );
			return null;
		}

		// Function from file: Freezer.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: Freezer.dm
		public override int wrenchAnchor( dynamic user = null ) {
			
			if ( this.on ) {
				GlobalFuncs.to_chat( user, "You have to turn off the " + this + " first!" );
				return 0;
			}
			base.wrenchAnchor( (object)(user) );

			if ( !Lang13.Bool( this.anchored ) ) {
				this.verbs.Add( this.rotate_verbs );

				if ( this.node != null ) {
					this.node.disconnect( this );
					GlobalFuncs.qdel( this.network );
					this.network = null;
					this.node = null;
				}
			} else if ( Lang13.Bool( this.anchored ) ) {
				this.verbs.Remove( this.rotate_verbs );
				this.initialize_directions = this.dir;
				this.initialize();
				this.build_network();

				if ( this.node != null ) {
					this.node.initialize();
					this.node.build_network();
				}
			}
			return 0;
		}

		// Function from file: Freezer.dm
		public override int togglePanelOpen( dynamic toggleitem = null, dynamic user = null, dynamic CC = null ) {
			
			if ( Lang13.Bool( this.anchored ) ) {
				GlobalFuncs.to_chat( user, "You have to unanchor the " + this + " first!" );
				return 0;
			}

			if ( this.on ) {
				GlobalFuncs.to_chat( user, "You have to turn off the " + this + "!" );
				return 0;
			}
			return base.togglePanelOpen( (object)(toggleitem), (object)(user), (object)(CC) );
		}

		// Function from file: Freezer.dm
		public override int crowbarDestroy( dynamic user = null ) {
			
			if ( this.on || Lang13.Bool( this.anchored ) ) {
				return 0;
			}
			return base.crowbarDestroy( (object)(user) );
		}

		// Function from file: Freezer.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: Freezer.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: Freezer.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.node != null ) {
				
				if ( this.on ) {
					this.icon_state = "freezer_1";
				} else {
					this.icon_state = "freezer";
				}
			} else {
				this.icon_state = "freezer_0";
			}
			base.update_icon( (object)(location), (object)(target) );
			return null;
		}

		// Function from file: Freezer.dm
		public override dynamic RefreshParts(  ) {
			int lasercount = 0;
			Obj_Item_Weapon_StockParts SP = null;

			lasercount = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts) )) {
				SP = _a;
				

				if ( SP is Obj_Item_Weapon_StockParts_MicroLaser ) {
					lasercount += SP.rating - 1;
				}
			}
			this.temp_offset = Lang13.Initial( this, "temp_offset" ) - lasercount * 5;
			return null;
		}

		// Function from file: Freezer.dm
		[Verb]
		[VerbInfo( name: "Rotate Counter Clockwise", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotate_ccw(  ) {
			
			if ( Lang13.Bool( this.anchored ) || Lang13.Bool( Task13.User.stat ) ) {
				GlobalFuncs.to_chat( Task13.User, "It is fastened to the floor!" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return true;
		}

		// Function from file: Freezer.dm
		[Verb]
		[VerbInfo( name: "Rotate Clockwise", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public bool rotate(  ) {
			
			if ( Lang13.Bool( this.anchored ) || Lang13.Bool( Task13.User.stat ) ) {
				GlobalFuncs.to_chat( Task13.User, "It is fastened to the floor!" );
				return false;
			}
			this.dir = Num13.Rotate( this.dir, 270 );
			return true;
		}

	}

}