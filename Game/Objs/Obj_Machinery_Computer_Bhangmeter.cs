// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Bhangmeter : Obj_Machinery_Computer {

		public ByTable bangs = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/bhangmeter";
			this.icon_state = "forensic";
		}

		// Function from file: doppler_array.dm
		public Obj_Machinery_Computer_Bhangmeter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.doppler_arrays.Add( this );
			return;
		}

		// Function from file: doppler_array.dm
		public void sense_explosion( int x0 = 0, int y0 = 0, int z0 = 0, dynamic devastation_range = null, dynamic heavy_impact_range = null, dynamic light_impact_range = null, dynamic took = null, bool? cap = null, bool? verbose = null ) {
			cap = cap ?? false;
			verbose = verbose ?? true;

			string message = null;
			ByTable bang = null;

			
			if ( ( this.stat & 2 ) != 0 ) {
				return;
			}

			if ( this.z != z0 ) {
				return;
			}
			message = new Txt( "Explosive disturbance detected - Epicenter at: grid (" ).item( x0 - Convert.ToDouble( GlobalVars.WORLD_X_OFFSET[z0] ) ).str( "," ).item( y0 - Convert.ToDouble( GlobalVars.WORLD_Y_OFFSET[z0] ) ).str( ", " ).item( z0 ).str( "). " ).item( ( cap == true ? "[Theoretical Results] " : "" ) ).str( "Epicenter radius: " ).item( devastation_range ).str( ". Outer radius: " ).item( heavy_impact_range ).str( ". Shockwave radius: " ).item( light_impact_range ).str( ". Temporal displacement of tachyons: " ).item( took ).str( " second" ).s().str( ".  Data logged." ).ToString();

			if ( verbose == true ) {
				this.say( message );
			}
			bang = new ByTable();
			bang["x"] = x0;
			bang["y"] = y0;
			bang["z"] = z0;
			bang["time"] = GlobalFuncs.worldtime2text();
			bang["cap"] = cap;
			bang["dev"] = devastation_range;
			bang["heavy"] = heavy_impact_range;
			bang["light"] = light_impact_range;
			bang["took"] = took;
			bang["area"] = GlobalFuncs.get_area( Map13.GetTile( x0, y0, z0 ) );
			this.bangs.Add( new ByTable(new object [] { bang }) );
			GlobalVars.nanomanager.update_uis( this );
			return;
		}

		// Function from file: doppler_array.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string listing = null;
			dynamic item = null;

			listing = @"
<html>
	<head>
		<title>Nanotrasen Bhangmeter Mk. V</title>
	</head>
	<body>
		<h1>Recent Explosions</h1>
		<table>
			<tr>
				<th>Grid</th>
				<th>Power</th>
				<th>Temporal Displacement</th>
			</tr>
";

			foreach (dynamic _a in Lang13.Enumerate( this.bangs )) {
				item = _a;
				
				listing += item;
			}
			listing += "\n		</table>\n	</body>\n</html>";
			Interface13.Browse( user, listing, "window=bhangmeter" );
			GlobalFuncs.onclose( user, "bhangmeter" );
			return null;
		}

		// Function from file: doppler_array.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;
			ByTable explosions = null;
			ByTable bangarangs = null;
			ByTable bang_data = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return;
			}
			data = new ByTable( 0 );
			explosions = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.bangs, typeof(ByTable) )) {
				bangarangs = _a;
				
				bang_data = new ByTable();
				bang_data["x"] = bangarangs["x"];
				bang_data["y"] = bangarangs["y"];
				bang_data["z"] = bangarangs["z"];
				bang_data["area"] = bangarangs["area"];
				bang_data["time"] = bangarangs["time"];
				bang_data["cap"] = bangarangs["cap"];
				bang_data["dev"] = bangarangs["dev"];
				bang_data["heavy"] = bangarangs["heavy"];
				bang_data["light"] = bangarangs["light"];
				bang_data["took"] = bangarangs["took"];
				bang_data["xoffset"] = bang_data["x"] - GlobalVars.WORLD_X_OFFSET[this.z];
				bang_data["yoffset"] = bang_data["y"] - GlobalVars.WORLD_Y_OFFSET[this.z];
				explosions.Add( new ByTable(new object [] { bang_data }) );
			}
			data["explosions"] = explosions;
			data["explosion_cap"] = GlobalVars.MAX_EXPLOSION_RANGE;

			if ( !( ui != null ) ) {
				ui = GlobalVars.nanomanager.get_open_ui( user, this, ui_key );
			}

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "bhangmeter.tmpl", this.name, 900, 800 );
				ui.add_template( "mapContent", "bhangmeter_map_content.tmpl" );
				ui.add_template( "mapHeader", "bhangmeter_map_header.tmpl" );
				ui.set_show_map( 1 );
				ui.set_initial_data( data );
				ui.open();
				ui.set_auto_update( true );
			} else {
				ui.push_data( data );
				return;
			}
			return;
		}

		// Function from file: doppler_array.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.ui_interact( a );
			return null;
		}

		// Function from file: doppler_array.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: doppler_array.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: doppler_array.dm
		public override dynamic process(  ) {
			return 26;
		}

		// Function from file: doppler_array.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.doppler_arrays.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}