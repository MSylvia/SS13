// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_Tank : Obj_Machinery_Atmospherics_Unary {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.starting_volume = 2000;
			this.default_colour = "#b77900";
			this.icon = "icons/obj/atmospherics/pipe_tank.dmi";
			this.icon_state = "co2";
		}

		public Obj_Machinery_Atmospherics_Unary_Tank ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: tank.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic analyzer = null;

			
			if ( a is Obj_Item_Device_Rcd_Rpd || a is Obj_Item_Device_PipePainter ) {
				return null;
			}

			if ( a is Obj_Item_Device_Analyzer && Map13.GetDistance( b, this ) <= 1 ) {
				((Ent_Static)b).visible_message( new Txt( "<span class='attack'>" ).item( b ).str( " has used " ).item( a ).str( " on " ).icon( this.icon ).str( " " ).item( this ).str( "</span>" ).ToString(), new Txt( "<span class='attack'>You use " ).the( a ).item().str( " on " ).icon( this.icon ).str( " " ).item( this ).str( "</span>" ).ToString() );
				analyzer = a;
				b.show_message( ((Obj_Item_Device_Analyzer)analyzer).output_gas_scan( this.air_contents, this, false ), 1 );
			}
			return null;
		}

		// Function from file: tank.dm
		public override dynamic disconnect( Obj_Machinery_Atmospherics reference = null ) {
			base.disconnect( reference );
			this.update_icon();
			return null;
		}

		// Function from file: tank.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );
			return null;
		}

		// Function from file: tank.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			
			if ( !( this.network != null ) ) {
				_default = base.process();
			}
			GlobalVars.atmos_machines.Remove( this );
			return _default;
		}

	}

}