// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_Mint : Obj_Machinery_Mineral {

		public dynamic input = null;
		public dynamic output = null;
		public int newCoins = 0;
		public bool processing = false;
		public string chosen = "iron";
		public double coinsToProduce = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.starting_materials = new ByTable();
			this.icon_state = "coinpress0";
		}

		// Function from file: mint.dm
		public Obj_Machinery_Mineral_Mint ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic dir = null;
			dynamic dir2 = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.cardinal )) {
					dir = _a;
					
					this.input = Lang13.FindIn( typeof(Obj_Machinery_Mineral_Input), Map13.GetStep( this, Convert.ToInt32( dir ) ) );

					if ( Lang13.Bool( this.input ) ) {
						break;
					}
				}

				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					dir2 = _b;
					
					this.output = Lang13.FindIn( typeof(Obj_Machinery_Mineral_Output), Map13.GetStep( this, Convert.ToInt32( dir2 ) ) );

					if ( Lang13.Bool( this.output ) ) {
						break;
					}
				}
				return;
				return;
			}));
			return;
		}

		// Function from file: vgstation13.dme
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double temp_coins = 0;
			dynamic M = null;
			dynamic po = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( this.processing ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The machine is processing.</span>" );
				return null;
			}

			if ( Lang13.Bool( href_list["choose"] ) ) {
				this.chosen = href_list["choose"];
			}

			if ( Lang13.Bool( href_list["chooseAmt"] ) ) {
				this.coinsToProduce = ( this.coinsToProduce + ( String13.ParseNumber( href_list["chooseAmt"] ) ??0) <= 0 ? 0 : ( this.coinsToProduce + ( String13.ParseNumber( href_list["chooseAmt"] ) ??0) >= 1000 ? 1000 : this.coinsToProduce + ( String13.ParseNumber( href_list["chooseAmt"] ) ??0) ) );
			}

			if ( Lang13.Bool( href_list["makeCoins"] ) ) {
				temp_coins = this.coinsToProduce;

				if ( Lang13.Bool( this.output ) ) {
					this.processing = true;
					this.icon_state = "coinpress1";
					po = ((dynamic)this.materials).getMaterial( this.chosen );

					if ( !Lang13.Bool( po ) ) {
						this.chosen = null;
						this.processing = false;
						return null;
					}

					while (Convert.ToDouble( ((dynamic)this.materials).storage[this.chosen] ) > 0 && this.coinsToProduce > 0) {
						
						if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Storage_Bag_Money), this.output.loc ) ) ) {
							M = Lang13.FindIn( typeof(Obj_Item_Weapon_Storage_Bag_Money), this.output.loc );
						} else {
							M = new Obj_Item_Weapon_Storage_Bag_Money( this.output.loc );
						}
						Lang13.Call( po.cointype, M );
						((dynamic)this.materials).removeAmount( this.chosen, 1 );
						this.coinsToProduce--;
						this.newCoins++;
						this.updateUsrDialog();
						Task13.Sleep( 5 );
					}
					this.icon_state = "coinpress0";
					this.processing = false;
					this.coinsToProduce = temp_coins;
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: mint.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string html = null;
			int nloaded = 0;
			dynamic ore_id = null;
			dynamic ore_info = null;

			html = new Txt( @"<html>
	<head>
		<title>Mint</title>
		<style type=""text/css"">
html,body {
	font-family:sans-serif,verdana;
	font-size:smaller;
	color:#666;
}
h1 {
	border-bottom:1px solid maroon;
}
table {
	border-spacing: 0;
	border-collapse: collapse;
}
td, th {
	margin: 0;
	font-size: small;
	border-bottom: 1px solid #ccc;
	padding: 3px;
}

tr:nth-child(even) {
	background: #efefef;
}

a.smelting {
	color:white;
	font-weight:bold;
	text-decoration:none;
	background-color:green;
}

a.notsmelting {
	color:white;
	font-weight:bold;
	text-decoration:none;
	background-color:maroon;
}
		</style>
	</head>
	<body>
		<h1>Mint</h1>
		<p><b>Current Status:</b> (<a href='?src=" ).Ref( a ).str( ";mach_close=recyk_furnace'>Close</a>)</p>" ).ToString();

			if ( !Lang13.Bool( this.input ) ) {
				html += "<p style='color:red;font-weight:bold;'>INPUT NOT SET</p>";
			}

			if ( !Lang13.Bool( this.output ) ) {
				html += "<p style='color:red;font-weight:bold;'>OUTPUT NOT SET</p>";
			}
			html += @"
		<table>
			<tr>
				<th>Material</th>
				<th># Coins</th>
				<th>Controls</th>
			</tr>";
			nloaded = 0;

			foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
				ore_id = _a;
				
				ore_info = ((dynamic)this.materials).getMaterial( ore_id );

				if ( Lang13.Bool( ((dynamic)this.materials).storage[ore_id] ) && ore_info.cointype != null ) {
					html += new Txt( "\n			<tr>\n				<td class=\"clmName\">" ).item( ore_info.processed_name ).str( "</td>\n				<td>" ).item( ((dynamic)this.materials).storage[ore_id] ).str( "</td>\n				<td>\n					<a href=\"?src=" ).Ref( this ).str( ";choose=" ).item( ore_id ).str( "\" " ).ToString();

					if ( this.chosen == ore_id ) {
						html += "class=\"smelting\">Selected";
					} else {
						html += "class=\"notsmelting\">Select";
					}
					html += "</a></td></tr>";
					nloaded++;
				} else if ( this.chosen == ore_id ) {
					this.chosen = null;
				}
			}

			if ( nloaded != 0 ) {
				html += "\n			</table>";
			} else {
				html += "<tr><td colspan=\"3\"><em>No Materials Loaded</em></td></tr></table>";
			}
			html += "<p>Will produce " + this.coinsToProduce + " " + this.chosen + " coins if enough materials are available.</p>";
			html += new Txt( "\n		<p>\n			[\n				<A href='?src=" ).Ref( this ).str( ";chooseAmt=-10'>-10</A>\n				<A href='?src=" ).Ref( this ).str( ";chooseAmt=-5'>-5</A>\n				<A href='?src=" ).Ref( this ).str( ";chooseAmt=-1'>-1</A>\n				<A href='?src=" ).Ref( this ).str( ";chooseAmt=1'>+1</A>\n				<A href='?src=" ).Ref( this ).str( ";chooseAmt=5'>+5</A>\n				<A href='?src=" ).Ref( this ).str( ";chooseAmt=10'>+10</A>\n			]\n		</p>\n		<p>In total, this machine produced <font color='green'><b>" ).item( this.newCoins ).str( "</b></font> coins.</p>\n		<p><A href=\"?src=" ).Ref( this ).str( ";makeCoins=" ).item( 1 ).str( "\">Make coins</A></p>\n	</body>\n</html>\n	" ).ToString();
			Interface13.Browse( a, html, "window=mint" );
			GlobalFuncs.onclose( a, "mint" );
			return null;
		}

		// Function from file: mint.dm
		public override dynamic process(  ) {
			dynamic O = null;
			dynamic ore_id = null;
			dynamic po = null;

			
			if ( Lang13.Bool( this.input ) ) {
				O = Lang13.FindIn( typeof(Obj_Item_Stack_Sheet), this.input.loc );

				if ( Lang13.Bool( O ) ) {
					
					foreach (dynamic _a in Lang13.Enumerate( ((dynamic)this.materials).storage )) {
						ore_id = _a;
						
						po = ((dynamic)this.materials).getMaterial( ore_id );

						if ( po.cointype != null && Lang13.Bool( po.sheettype.IsInstanceOfType( O ) ) ) {
							((dynamic)this.materials).addAmount( ore_id, O.amount * 5 );
							GlobalFuncs.qdel( O );
							break;
						}
					}
				}
			}
			return null;
		}

	}

}