// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Library_Checkout : Obj_Machinery_Computer_Library {

		public bool arcanecheckout = false;
		public string buffer_book = null;
		public string buffer_mob = null;
		public dynamic upload_category = "Fiction";
		public ByTable checkouts = new ByTable();
		public ByTable inventory = new ByTable();
		public int checkoutperiod = 5;
		public Obj_Machinery_Libraryscanner scanner = null;
		public bool bibledelay = false;
		public dynamic booklist = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.machine_flags = 1;
		}

		public Obj_Machinery_Computer_Library_Checkout ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: checkout.dm
		public void make_external_book( dynamic newbook = null ) {
			dynamic B = null;
			dynamic _http = null;
			string http = null;

			
			if ( !Lang13.Bool( newbook ) || !Lang13.Bool( newbook.id ) ) {
				return;
			}
			B = Lang13.Call( newbook.path, this.loc );

			if ( !newbook.programmatic ) {
				_http = Game13.Export( "http://ss13.pomf.se/index.php/book?id=" + newbook.id );

				if ( !Lang13.Bool( _http ) || !Lang13.Bool( _http["CONTENT"] ) ) {
					return;
				}
				http = File13.Read( _http["CONTENT"] );

				if ( !Lang13.Bool( http ) ) {
					return;
				}
				B.name = "Book: " + newbook.title;
				B.title = newbook.title;
				B.author = newbook.author;
				B.dat = http;
				B.icon_state = "book" + Rand13.Int( 1, 9 );
			}
			this.visible_message( "" + this + "'s printer hums as it produces a completely bound book. How did it do that?" );
			return;
		}

		// Function from file: checkout.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? pn = null;
			dynamic newtitle = null;
			dynamic newcategory = null;
			dynamic newauthor = null;
			dynamic target = null;
			string ans = null;
			DBQuery query = null;
			bool response = false;
			string tckey = null;
			string ans2 = null;
			DBQuery query2 = null;
			bool response2 = false;
			int affected = 0;
			Obj_Item_Weapon_Storage_Bible B = null;
			Borrowbook b = null;
			dynamic b2 = null;
			dynamic b3 = null;
			string newauthor2 = null;
			dynamic newcategory2 = null;
			dynamic choice = null;
			string sqltitle = null;
			string sqlauthor = null;
			string sqlcontent = null;
			string sqlcategory = null;
			DBQuery query3 = null;
			bool response3 = false;
			dynamic newbook = null;
			dynamic V = null;
			dynamic bookid = null;
			dynamic newbook2 = null;
			dynamic V2 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				Interface13.Browse( Task13.User, null, "window=library" );
				GlobalFuncs.onclose( Task13.User, "library" );
				return 1;
			}

			if ( Lang13.Bool( href_list["pagenum"] ) ) {
				
				if ( !Lang13.Bool( this.num_pages ) ) {
					this.page_num = 0;
				} else {
					pn = String13.ParseNumber( href_list["pagenum"] );

					if ( !( pn == null ) ) {
						this.page_num = ( ( pn ??0) <= 0 ? 0 : ( ( pn ??0) >= ( this.num_pages ??0) ? this.num_pages : pn ) );
					}
				}
			}

			if ( Lang13.Bool( href_list["page"] ) ) {
				
				if ( this.num_pages == 0 ) {
					this.page_num = 0;
				} else {
					this.page_num = ( ( String13.ParseNumber( href_list["page"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( href_list["page"] ) ??0) >= ( this.num_pages ??0) ? this.num_pages : String13.ParseNumber( href_list["page"] ) ) );
				}
			}

			if ( Lang13.Bool( href_list["settitle"] ) ) {
				newtitle = Interface13.Input( "Enter a title to search for:", null, null, null, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( newtitle ) ) {
					this.query.title = GlobalFuncs.sanitize( newtitle );
				} else {
					this.query.title = null;
				}
			}

			if ( Lang13.Bool( href_list["setcategory"] ) ) {
				newcategory = Interface13.Input( "Choose a category to search for:", null, null, null, new ByTable(new object [] { "Any" }) + GlobalVars.library_section_names, InputType.Any );

				if ( Lang13.Bool( newcategory ) ) {
					this.query.category = GlobalFuncs.sanitize( newcategory );
				} else if ( newcategory == "Any" ) {
					this.query.category = null;
				}
			}

			if ( Lang13.Bool( href_list["setauthor"] ) ) {
				newauthor = Interface13.Input( "Enter an author to search for:", null, null, null, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( newauthor ) ) {
					this.query.author = GlobalFuncs.sanitize( newauthor );
				} else {
					this.query.author = null;
				}
			}

			if ( Lang13.Bool( href_list["search"] ) ) {
				this.num_results = this.get_num_results();
				this.num_pages = GlobalFuncs.Ceiling( ( this.num_results ??0) / 25 );
				this.page_num = 0;
				this.screenstate = 4;
			}

			if ( Lang13.Bool( href_list["del"] ) ) {
				
				if ( !Task13.User.check_rights( 2 ) ) {
					GlobalFuncs.to_chat( Task13.User, "You aren't an admin, piss off." );
					return null;
				}
				target = this.getBookByID( href_list["del"] );
				ans = Interface13.Alert( Task13.User, "Are you sure you wish to delete \"" + target.title + "\", by " + target.author + "? This cannot be undone.", "Library System", "Yes", "No" );

				if ( ans == "Yes" ) {
					query = GlobalVars.dbcon_old.NewQuery( "DELETE FROM library WHERE id=" + target.id );
					response = query.Execute();

					if ( !response ) {
						GlobalFuncs.to_chat( Task13.User, query.ErrorMsg() );
						return null;
					}
					GlobalFuncs.log_admin( "LIBRARY: " + Task13.User.name + "/" + Task13.User.key + " has deleted \"" + target.title + "\", by " + target.author + " (" + target.ckey + ")!" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has deleted \"" + target.title + "\", by " + target.author + " (" + target.ckey + ")!" );
					this.updateUsrDialog();
					return null;
				}
			}

			if ( Lang13.Bool( href_list["delbyckey"] ) ) {
				
				if ( !Task13.User.check_rights( 2 ) ) {
					GlobalFuncs.to_chat( Task13.User, "You aren't an admin, piss off." );
					return null;
				}
				tckey = String13.CKey( href_list["delbyckey"] );
				ans2 = Interface13.Alert( Task13.User, "Are you sure you wish to delete all books by " + tckey + "? This cannot be undone.", "Library System", "Yes", "No" );

				if ( ans2 == "Yes" ) {
					query2 = GlobalVars.dbcon_old.NewQuery( "DELETE FROM library WHERE ckey='" + GlobalFuncs.sanitizeSQL( tckey ) + "'" );
					response2 = query2.Execute();

					if ( !response2 ) {
						GlobalFuncs.to_chat( Task13.User, query2.ErrorMsg() );
						return null;
					}
					affected = query2.RowsAffected();

					if ( affected == 0 ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='danger'>Unable to find any matching rows.</span>" );
						return null;
					}
					GlobalFuncs.log_admin( "LIBRARY: " + Task13.User.name + "/" + Task13.User.key + " has deleted " + affected + " books written by " + tckey + "!" );
					GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has deleted " + affected + " books written by " + tckey + "!" );
					this.updateUsrDialog();
					return null;
				}
			}

			if ( Lang13.Bool( href_list["switchscreen"] ) ) {
				
				dynamic _a = href_list["switchscreen"]; // Was a switch-case, sorry for the mess.
				if ( _a=="0" ) {
					this.screenstate = 0;
				} else if ( _a=="1" ) {
					this.screenstate = 1;
				} else if ( _a=="2" ) {
					this.screenstate = 2;
				} else if ( _a=="3" ) {
					this.screenstate = 3;
				} else if ( _a=="4" ) {
					this.screenstate = 4;
				} else if ( _a=="5" ) {
					this.screenstate = 5;
				} else if ( _a=="6" ) {
					
					if ( !this.bibledelay ) {
						B = new Obj_Item_Weapon_Storage_Bible( this.loc );

						if ( GlobalVars.ticker != null && Lang13.Bool( GlobalVars.ticker.Bible_icon_state ) && Lang13.Bool( GlobalVars.ticker.Bible_item_state ) ) {
							B.icon_state = GlobalVars.ticker.Bible_icon_state;
							B.item_state = GlobalVars.ticker.Bible_item_state;
							B.name = GlobalVars.ticker.Bible_name;
							B.deity_name = GlobalVars.ticker.Bible_deity_name;
						}
						this.bibledelay = true;
						Task13.Schedule( 60, (Task13.Closure)(() => {
							this.bibledelay = false;
							return;
						}));
					} else {
						this.visible_message( "<b>" + this + "</b>'s monitor flashes, \"Bible printer currently unavailable, please wait a moment.\"" );
					}
				} else if ( _a=="7" ) {
					this.screenstate = 7;
				} else if ( _a=="8" ) {
					this.screenstate = 8;
				}
			}

			if ( Lang13.Bool( href_list["arccheckout"] ) ) {
				
				if ( this.emagged != 0 ) {
					this.arcanecheckout = true;
				}
				this.screenstate = 0;
			}

			if ( Lang13.Bool( href_list["increasetime"] ) ) {
				this.checkoutperiod += 1;
			}

			if ( Lang13.Bool( href_list["decreasetime"] ) ) {
				this.checkoutperiod -= 1;

				if ( this.checkoutperiod < 1 ) {
					this.checkoutperiod = 1;
				}
			}

			if ( Lang13.Bool( href_list["editbook"] ) ) {
				this.buffer_book = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Enter the book's title:", null, null, null, null, InputType.Str | InputType.Null ) ), 1, 1024 );
			}

			if ( Lang13.Bool( href_list["editmob"] ) ) {
				this.buffer_mob = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Enter the recipient's name:", null, null, null, null, InputType.Str | InputType.Null ) ), 1, 26 );
			}

			if ( Lang13.Bool( href_list["checkout"] ) ) {
				b = new Borrowbook();
				b.bookname = GlobalFuncs.sanitize( this.buffer_book );
				b.mobname = GlobalFuncs.sanitize( this.buffer_mob );
				b.getdate = Game13.time;
				b.duedate = Game13.time + this.checkoutperiod * 600;
				this.checkouts.Add( b );
			}

			if ( Lang13.Bool( href_list["checkin"] ) ) {
				b2 = Lang13.FindObj( href_list["checkin"] );
				this.checkouts.Remove( b2 );
			}

			if ( Lang13.Bool( href_list["delbook"] ) ) {
				b3 = Lang13.FindObj( href_list["delbook"] );
				this.inventory.Remove( b3 );
			}

			if ( Lang13.Bool( href_list["setauthor"] ) ) {
				newauthor2 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Enter the author's name: ", null, null, null, null, InputType.Str | InputType.Null ) ), 1, 1024 );

				if ( Lang13.Bool( newauthor2 ) && this.scanner != null ) {
					this.scanner.cache.author = newauthor2;
				}
			}

			if ( Lang13.Bool( href_list["setcategory"] ) ) {
				newcategory2 = Interface13.Input( "Choose a category: ", null, null, null, new ByTable(new object [] { "Fiction", "Non-Fiction", "Adult", "Reference", "Religion" }), InputType.Any );

				if ( Lang13.Bool( newcategory2 ) ) {
					this.upload_category = newcategory2;
				}
			}

			if ( Lang13.Bool( href_list["upload"] ) ) {
				
				if ( this.scanner != null ) {
					
					if ( this.scanner.cache != null ) {
						choice = Interface13.Input( "Are you certain you wish to upload this title to the Archive?", null, null, null, new ByTable(new object [] { "Confirm", "Abort" }), InputType.Any );

						if ( choice == "Confirm" ) {
							GlobalFuncs.establish_old_db_connection();

							if ( !GlobalVars.dbcon_old.IsConnected() ) {
								Interface13.Alert( "Connection to Archive has been severed. Aborting." );
							} else {
								sqltitle = GlobalFuncs.sanitizeSQL( this.scanner.cache.name );
								sqlauthor = GlobalFuncs.sanitizeSQL( this.scanner.cache.author );
								sqlcontent = GlobalFuncs.sanitizeSQL( this.scanner.cache.dat );
								sqlcategory = GlobalFuncs.sanitizeSQL( this.upload_category );
								query3 = GlobalVars.dbcon_old.NewQuery( "INSERT INTO library (author, title, content, category, ckey) VALUES ('" + sqlauthor + "', '" + sqltitle + "', '" + sqlcontent + "', '" + sqlcategory + "', '" + String13.CKey( Task13.User.key ) + "')" );
								response3 = query3.Execute();

								if ( !response3 ) {
									GlobalFuncs.to_chat( Task13.User, query3.ErrorMsg() );
								} else {
									Game13.log.WriteMsg( response3 );
									GlobalFuncs.log_admin( "" + Task13.User.name + "/" + Task13.User.key + " has uploaded the book titled " + this.scanner.cache.name + ", " + Lang13.Length( this.scanner.cache.dat ) + " characters in length" );
									GlobalFuncs.message_admins( "" + GlobalFuncs.key_name_admin( Task13.User ) + " has uploaded the book titled " + this.scanner.cache.name + ", " + Lang13.Length( this.scanner.cache.dat ) + " characters in length" );
								}
							}
						}
					}
				}
			}

			if ( Lang13.Bool( href_list["id"] ) ) {
				
				if ( href_list["id"] == "-1" ) {
					href_list["id"] = Interface13.Input( "Enter your order:", null, null, null, null, InputType.Num | InputType.Null );

					if ( !Lang13.Bool( href_list["id"] ) ) {
						return null;
					}
				}

				if ( !GlobalVars.dbcon_old.IsConnected() ) {
					Interface13.Alert( "Connection to Archive has been severed. Aborting." );
					return null;
				}
				newbook = this.getBookByID( href_list["id"] );

				if ( !Lang13.Bool( newbook ) ) {
					Interface13.Alert( "No book found" );
					return null;
				}

				if ( Convert.ToInt32( newbook.forbidden ) == 2 && !( this.emagged != 0 ) || Lang13.Bool( newbook.forbidden ) == true ) {
					Interface13.Alert( "This book is forbidden and cannot be printed." );
					return null;
				}

				if ( this.bibledelay ) {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						V = _b;
						
						V.show_message( "<b>" + this + "</b>'s monitor flashes, \"Printer unavailable. Please allow a short time before attempting to print.\"" );
					}
				} else {
					this.bibledelay = true;
					Task13.Schedule( 60, (Task13.Closure)(() => {
						this.bibledelay = false;
						return;
					}));
					this.make_external_book( newbook );
				}
			}

			if ( Lang13.Bool( href_list["manual"] ) ) {
				
				if ( !Lang13.Bool( href_list["manual"] ) ) {
					return null;
				}
				bookid = href_list["manual"];

				if ( !GlobalVars.dbcon_old.IsConnected() ) {
					Interface13.Alert( "Connection to Archive has been severed. Aborting." );
					return null;
				}
				newbook2 = this.getBookByID( "M" + bookid );

				if ( !Lang13.Bool( newbook2 ) ) {
					Interface13.Alert( "No book found" );
					return null;
				}

				if ( Convert.ToInt32( newbook2.forbidden ) == 2 && !( this.emagged != 0 ) || Lang13.Bool( newbook2.forbidden ) == true ) {
					Interface13.Alert( "This book is forbidden and cannot be printed." );
					return null;
				}

				if ( this.bibledelay ) {
					
					foreach (dynamic _c in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
						V2 = _c;
						
						V2.show_message( "<b>" + this + "</b>'s monitor flashes, \"Printer unavailable. Please allow a short time before attempting to print.\"" );
					}
				} else {
					this.bibledelay = true;
					Task13.Schedule( 60, (Task13.Closure)(() => {
						this.bibledelay = false;
						return;
					}));
					this.make_external_book( newbook2 );
				}
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: checkout.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic scanner = null;
			dynamic V = null;

			
			if ( a is Obj_Item_Weapon_Barcodescanner ) {
				scanner = a;
				scanner.computer = this;
				GlobalFuncs.to_chat( b, "" + scanner + "'s associated machine has been set to " + this + "." );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
					V = _a;
					
					V.show_message( "" + this + " lets out a low, short blip.", 2 );
				}
			} else {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: checkout.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				this.emagged = 1;
				GlobalFuncs.to_chat( user, "<span class='notice'>You override the library computer's printing restrictions.</span>" );
				return 1;
			}
			return 0;
		}

		// Function from file: checkout.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			Obj_Item_Weapon_Book b = null;
			Borrowbook b2 = null;
			double timetaken = 0;
			dynamic timedue = null;
			string pagelist = null;
			Cachedbook CB = null;
			dynamic author = null;
			string controls = null;
			Obj_Machinery_Libraryscanner S = null;
			ByTable forbidden = null;
			int manualcount = 0;
			dynamic M = null;
			dynamic manual_type = null;
			Browser_Clean B = null;

			
			if ( this.interact_check( user ) == true ) {
				return null;
			}
			dat = "";

			switch ((int)( this.screenstate )) {
				case 0:
					dat += new Txt( "<ol>\n				<li><A href='?src=" ).Ref( this ).str( ";switchscreen=1'>View General Inventory</A></li>\n				<li><A href='?src=" ).Ref( this ).str( ";switchscreen=2'>View Checked Out Inventory</A></li>\n				<li><A href='?src=" ).Ref( this ).str( ";switchscreen=3'>Check out a Book</A></li>\n				<li><A href='?src=" ).Ref( this ).str( ";switchscreen=4'>Connect to External Archive</A></li>\n				<li><A href='?src=" ).Ref( this ).str( ";switchscreen=5'>Upload New Title to Archive</A></li>\n				<li><A href='?src=" ).Ref( this ).str( ";switchscreen=6'>Print a Bible</A></li>\n				<li><A href='?src=" ).Ref( this ).str( ";switchscreen=7'>Print a Manual</A></li>" ).ToString();

					if ( this.emagged != 0 ) {
						dat += new Txt( "<li><A href='?src=" ).Ref( this ).str( ";switchscreen=8'>Access the Forbidden Lore Vault</A></li>" ).ToString();
					}
					dat += "</ol>";

					if ( this.arcanecheckout ) {
						new Obj_Item_Weapon_Tome( this.loc );
						GlobalFuncs.to_chat( user, "<span class='warning'>Your sanity barely endures the seconds spent in the vault's browsing window. The only thing to remind you of this when you stop browsing is a dusty old tome sitting on the desk. You don't really remember printing it.</span>" );
						((Ent_Static)user).visible_message( "" + user + " stares at the blank screen for a few moments, his expression frozen in fear. When he finally awakens from it, he looks a lot older.", 2 );
						this.arcanecheckout = false;
					}
					break;
				case 1:
					dat += "<h3>Inventory</h3>";

					foreach (dynamic _a in Lang13.Enumerate( this.inventory, typeof(Obj_Item_Weapon_Book) )) {
						b = _a;
						
						dat += new Txt().item( b.name ).str( " <A href='?src=" ).Ref( this ).str( ";delbook=" ).Ref( b ).str( "'>(Delete)</A><BR>" ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";switchscreen=0'>(Return to main menu)</A><BR>" ).ToString();
					break;
				case 2:
					dat += "<h3>Checked Out Books</h3><BR>";

					foreach (dynamic _b in Lang13.Enumerate( this.checkouts, typeof(Borrowbook) )) {
						b2 = _b;
						
						timetaken = Game13.time - b2.getdate;
						timetaken /= 600;
						timetaken = Num13.Floor( timetaken );
						timedue = b2.duedate - Game13.time;
						timedue /= 600;

						if ( Convert.ToDouble( timedue ) <= 0 ) {
							timedue = "<font color=red><b>(OVERDUE)</b> " + timedue + "</font>";
						} else {
							timedue = Num13.Floor( Convert.ToDouble( timedue ) );
						}
						dat += new Txt( "\"" ).item( b2.bookname ).str( "\", Checked out to: " ).item( b2.mobname ).str( "<BR>--- Taken: " ).item( timetaken ).str( " minutes ago, Due: in " ).item( timedue ).str( " minutes<BR>\n					<A href='?src=" ).Ref( this ).str( ";checkin=" ).Ref( b2 ).str( "'>(Check In)</A><BR><BR>" ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";switchscreen=0'>(Return to main menu)</A><BR>" ).ToString();
					break;
				case 3:
					dat += new Txt( "<h3>Check Out a Book</h3><BR>\n				Book: " ).item( this.buffer_book ).str( "\n				<A href='?src=" ).Ref( this ).str( ";editbook=1'>[Edit]</A><BR>\n				Recipient: " ).item( this.buffer_mob ).str( "\n				<A href='?src=" ).Ref( this ).str( ";editmob=1'>[Edit]</A><BR>\n				Checkout Date : " ).item( Game13.time / 600 ).str( "<BR>\n				Due Date: " ).item( ( Game13.time + this.checkoutperiod ) / 600 ).str( "<BR>\n				(Checkout Period: " ).item( this.checkoutperiod ).str( " minutes) (<A href='?src=" ).Ref( this ).str( ";increasetime=1'>+</A>/<A href='?src=" ).Ref( this ).str( ";decreasetime=1'>-</A>)\n				<A href='?src=" ).Ref( this ).str( ";checkout=1'>(Commit Entry)</A><BR>\n				<A href='?src=" ).Ref( this ).str( ";switchscreen=0'>(Return to main menu)</A><BR>" ).ToString();
					break;
				case 4:
					dat += "<h3>External Archive</h3>";

					if ( !GlobalVars.dbcon_old.IsConnected() ) {
						dat += "<font color=red><b>ERROR</b>: Unable to contact External Archive. Please contact your system administrator for assistance.</font>";
					} else {
						this.num_results = this.get_num_results();
						this.num_pages = GlobalFuncs.Ceiling( ( this.num_results ??0) / 25 );
						dat += new Txt( "<ul>\n					<li><A href='?src=" ).Ref( this ).str( ";id=-1'>(Order book by SS<sup>13</sup>BN)</A></li>\n				</ul>" ).ToString();
						pagelist = this.get_pagelist();
						dat += new Txt( "<h2>Search Settings</h2><br />\n					<A href='?src=" ).Ref( this ).str( ";settitle=1'>Filter by Title: " ).item( this.query.title ).str( "</A><br />\n					<A href='?src=" ).Ref( this ).str( ";setcategory=1'>Filter by Category: " ).item( this.query.category ).str( "</A><br />\n					<A href='?src=" ).Ref( this ).str( ";setauthor=1'>Filter by Author: " ).item( this.query.author ).str( "</A><br />\n					<A href='?src=" ).Ref( this ).str( ";search=1'>[Start Search]</A><br />" ).ToString();
						dat += pagelist;
						dat += new Txt( "<form name='pagenum' action='?src=" ).Ref( this ).str( "' method='get'>\n										<input type='hidden' name='src' value='" ).Ref( this ).str( "'>\n										<input type='text' name='pagenum' value='" ).item( this.page_num ).str( "' maxlength=\"5\" size=\"5\">\n										<input type='submit' value='Jump To Page'>\n							</form>" ).ToString();
						dat += @"<table border=""0"">
					<tr>
						<td>Author</td>
						<td>Title</td>
						<td>Category</td>
						<td>Controls</td>
					</tr>";

						foreach (dynamic _c in Lang13.Enumerate( this.get_page( this.page_num ), typeof(Cachedbook) )) {
							CB = _c;
							
							author = CB.author;
							controls = new Txt( "<A href='?src=" ).Ref( this ).str( ";id=" ).item( CB.id ).str( "'>[Order]</A>" ).ToString();

							if ( ((Mob)user).check_rights( 2 ) ) {
								controls += new Txt( " <A style='color:red' href='?src=" ).Ref( this ).str( ";del=" ).item( CB.id ).str( "'>[Delete]</A>" ).ToString();
								author += new Txt( " (<A style='color:red' href='?src=" ).Ref( this ).str( ";delbyckey=" ).item( String13.CKey( CB.ckey ) ).str( "'>" ).item( String13.CKey( CB.ckey ) ).str( ")</A>)" ).ToString();
							}
							dat += "<tr>\n						<td>" + author + "</td>\n						<td>" + CB.title + "</td>\n						<td>" + CB.category + "</td>\n						<td>\n							" + controls + "\n						</td>\n					</tr>";
						}
						dat += "</table><br />" + pagelist;
					}
					dat += new Txt( "<br /><A href='?src=" ).Ref( this ).str( ";switchscreen=0'>(Return to main menu)</A><BR>" ).ToString();
					break;
				case 5:
					dat += "<h3>Upload a New Title</h3>";

					if ( !( this.scanner != null ) ) {
						
						foreach (dynamic _d in Lang13.Enumerate( Map13.FetchInRange( null, 9 ), typeof(Obj_Machinery_Libraryscanner) )) {
							S = _d;
							
							this.scanner = S;
							break;
						}
					}

					if ( !( this.scanner != null ) ) {
						dat += "<FONT color=red>No scanner found within wireless network range.</FONT><BR>";
					} else if ( !( this.scanner.cache != null ) ) {
						dat += "<FONT color=red>No data found in scanner memory.</FONT><BR>";
					} else {
						dat += "<TT>Data marked for upload...</TT><BR>\n					<TT>Title: </TT>" + this.scanner.cache.name + "<BR>";

						if ( !Lang13.Bool( this.scanner.cache.author ) ) {
							this.scanner.cache.author = "Anonymous";
						}
						dat += new Txt( "<TT>Author: </TT><A href='?src=" ).Ref( this ).str( ";setauthor=1'>" ).item( this.scanner.cache.author ).str( "</A><BR>\n					<TT>Category: </TT><A href='?src=" ).Ref( this ).str( ";setcategory=1'>" ).item( this.upload_category ).str( "</A><BR>\n					<A href='?src=" ).Ref( this ).str( ";upload=1'>[Upload]</A><BR>" ).ToString();
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";switchscreen=0'>(Return to main menu)</A><BR>" ).ToString();
					break;
				case 7:
					dat += "<H3>Print a Manual</H3>";
					dat += "<table>";
					forbidden = new ByTable(new object [] { typeof(Obj_Item_Weapon_Book_Manual) });

					if ( !( this.emagged != 0 ) ) {
						forbidden.Or( typeof(Obj_Item_Weapon_Book_Manual_Nuclear) );
					}
					manualcount = 1;
					M = null;

					foreach (dynamic _e in Lang13.Enumerate( Lang13.GetTypes( typeof(Obj_Item_Weapon_Book_Manual) ) - forbidden )) {
						manual_type = _e;
						
						M = Lang13.Call( manual_type );
						dat += new Txt( "<tr><td><A href='?src=" ).Ref( this ).str( ";manual=" ).item( manualcount ).str( "'>" ).item( M.title ).str( "</A></td></tr>" ).ToString();
						manualcount++;
						GlobalFuncs.qdel( M );
						M = null;
					}
					dat += "</table>";
					dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";switchscreen=0'>(Return to main menu)</A><BR>" ).ToString();
					break;
				case 8:
					dat += new Txt( "<h3>Accessing Forbidden Lore Vault v 1.3</h3>\n				Are you absolutely sure you want to proceed? EldritchTomes Inc. takes no responsibilities for loss of sanity resulting from this action.<p>\n				<A href='?src=" ).Ref( this ).str( ";arccheckout=1'>Yes.</A><BR>\n				<A href='?src=" ).Ref( this ).str( ";switchscreen=0'>No.</A><BR>" ).ToString();
					break;
			}
			B = new Browser_Clean( user, "library", "Book Inventory Management" );
			B.set_content( dat );
			B.open();
			return null;
		}

		// Function from file: checkout.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

	}

}