// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Pipe_LayerAdapter : Obj_Machinery_Atmospherics_Pipe {

		public Obj_Machinery_Atmospherics layer_node = null;
		public Obj_Machinery_Atmospherics mid_node = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.color = "#B4B4B4";
			this.baseicon = "adapter";
			this.initialize_directions = 3;
			this.volume = 260;
			this.pipe_flags = 2;
			this.icon = "icons/obj/atmospherics/pipe_adapter.dmi";
			this.icon_state = "adapter_1";
		}

		// Function from file: pipes.dm
		public Obj_Machinery_Atmospherics_Pipe_LayerAdapter ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			switch ((int)( this.dir )) {
				case 1:
				case 2:
					this.initialize_directions = 3;
					break;
				case 4:
				case 8:
					this.initialize_directions = 12;
					break;
			}
			return;
		}

		// Function from file: pipes.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			
			if ( ( ((int)( direction ??0 )) & ((int)( this.initialize_directions ??0 )) ) != 0 ) {
				((dynamic)M).ventcrawl_layer = ( direction == this.dir ? 3 : this.piping_layer );
				GlobalFuncs.to_chat( M, new Txt( "You are redirected into the " ).st_nd_rd( ((dynamic)M).ventcrawl_layer ).str( " piping layer." ).ToString() );
				return base.relaymove( M, direction );
			}
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic Entered( Ent_Dynamic Obj = null, Ent_Static oldloc = null ) {
			return null;
		}

		// Function from file: pipes.dm
		public override bool getNodeType( dynamic node_id = null ) {
			return false;
		}

		// Function from file: pipes.dm
		public override bool isConnectable( Obj_Machinery_Atmospherics target = null, dynamic direction = null, int? given_layer = null ) {
			
			if ( direction == this.dir ) {
				return given_layer == 3;
			}
			return base.isConnectable( target, (object)(direction), given_layer );
		}

		// Function from file: pipes.dm
		public override void findAllConnections( double? connect_dirs = null ) {
			dynamic direction = null;
			Obj_Machinery_Atmospherics found = null;
			bool node_type = false;
			Obj_Machinery_Atmospherics found2 = null;
			bool node_type2 = false;

			
			foreach (dynamic _c in Lang13.Enumerate( GlobalVars.cardinal )) {
				direction = _c;
				

				if ( ( ((int)( connect_dirs ??0 )) & Convert.ToInt32( direction ) ) != 0 ) {
					
					if ( direction == this.dir ) {
						found = null;
						node_type = this.getNodeType( direction );

						switch ((bool)( node_type )) {
							case false:
								found = this.findConnecting( direction, 3 );
								break;
							case true:
								found = this.findConnectingHE( direction, 3 );
								break;
							default:
								GlobalFuncs.error( "UNKNOWN RESPONSE FROM " + this.type + "/getNodeType(" + direction + "): " + node_type );
								break;
						}

						if ( !( found != null ) ) {
							continue;
						}
						this.mid_node = found;
					} else {
						found2 = null;
						node_type2 = this.getNodeType( direction );

						switch ((bool)( node_type2 )) {
							case false:
								found2 = this.findConnecting( direction, this.piping_layer );
								break;
							case true:
								found2 = this.findConnectingHE( direction, this.piping_layer );
								break;
							default:
								GlobalFuncs.error( "UNKNOWN RESPONSE FROM " + this.type + "/getNodeType(" + this.piping_layer + "): " + node_type2 );
								return;
								break;
						}

						if ( !( found2 != null ) ) {
							continue;
						}
						this.layer_node = found2;
					}
				}
			}
			return;
		}

		// Function from file: pipes.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			suppress_icon_check = suppress_icon_check ?? false;

			Ent_Static T = null;

			this.findAllConnections( this.initialize_directions );
			T = this.loc;
			this.hide( Lang13.BoolNullable( ((dynamic)T).intact ) );

			if ( !( suppress_icon_check == true ) ) {
				this.update_icon();
			}
			return false;
		}

		// Function from file: pipes.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			int layer_diff = 0;
			Image con = null;

			this.overlays.len = 0;
			this.alpha = ( this.invisibility != 0 ? 128 : 255 );
			this.icon_state = "" + this.baseicon + "_" + this.piping_layer;

			if ( this.layer_node != null ) {
				layer_diff = ( this.piping_layer ??0) - 3;
				con = new Image( new Icon( this.icon, "layer_con", Num13.Rotate( this.dir, 180 ) ) );
				con.pixel_x = layer_diff * 5;
				con.pixel_y = layer_diff * -5;
				this.overlays.Add( con );
			}

			if ( !( this.mid_node != null ) && !( this.layer_node != null ) ) {
				GlobalFuncs.qdel( this );
			}
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic disconnect( Obj_Machinery_Atmospherics reference = null ) {
			
			if ( reference == this.mid_node ) {
				
				if ( this.mid_node is Obj_Machinery_Atmospherics_Pipe && !( this.parent == null ) ) {
					GlobalFuncs.returnToPool( this.parent );
				}
				this.mid_node = null;
			}

			if ( reference == this.layer_node ) {
				
				if ( this.layer_node is Obj_Machinery_Atmospherics_Pipe && !( this.parent == null ) ) {
					GlobalFuncs.returnToPool( this.parent );
				}
				this.layer_node = null;
			}
			this.update_icon();
			base.disconnect( reference );
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.mid_node != null ) {
				this.mid_node.disconnect( this );
			}

			if ( this.layer_node != null ) {
				this.layer_node.disconnect( this );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: pipes.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			
			if ( !( this.parent != null ) ) {
				_default = base.process();
			}
			GlobalVars.atmos_machines.Remove( this );
			return _default;
		}

		// Function from file: pipes.dm
		public override ByTable pipeline_expansion(  ) {
			return new ByTable(new object [] { this.layer_node, this.mid_node });
		}

		// Function from file: pipes.dm
		public override void hide( bool? h = null ) {
			
			if ( this.level == 1 && this.loc is Tile_Simulated ) {
				this.invisibility = ( h == true ? 101 : 0 );
			}
			this.update_icon();
			return;
		}

		// Function from file: pipes.dm
		public override bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			Ent_Static T = null;

			this.dir = pipe.dir;
			this.initialize_directions = pipe.get_pipe_dir();
			T = this.loc;
			this.level = ( Lang13.Bool( ((dynamic)T).intact ) ? 2 : 1 );
			this.initialize( true );

			if ( !( this.mid_node != null ) && !( this.layer_node != null ) ) {
				GlobalFuncs.to_chat( usr, "<span class='warning'>There's nothing to connect this adapter to! A pipe segment must be connected to at least one other object!</span>" );
				return false;
			}
			this.update_icon();
			this.build_network();

			if ( this.mid_node != null ) {
				this.mid_node.initialize();
				this.mid_node.build_network();
			}

			if ( this.layer_node != null ) {
				this.layer_node.initialize();
				this.layer_node.build_network();
			}
			return true;
		}

		// Function from file: pipes.dm
		public override void setPipingLayer( int? new_layer = null ) {
			new_layer = new_layer ?? 3;

			this.piping_layer = new_layer;
			return;
		}

	}

}