// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_PicketSign : Obj_Item_Weapon {

		public string label = "";
		public int last_wave = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 5;
			this.w_class = 4;
			this.attack_verb = new ByTable(new object [] { "bashed", "smacked" });
			this.burn_state = 0;
			this.icon_state = "picket";
		}

		public Obj_Item_Weapon_PicketSign ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: signs.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.last_wave + 20 < Game13.time ) {
				this.last_wave = Game13.time;

				if ( Lang13.Bool( this.label ) ) {
					((Ent_Static)user).visible_message( new Txt( "<span class='warning'>" ).item( user ).str( " waves around " ).the( this.label ).str( "\"" ).item().str( "\" sign.</span>" ).ToString() );
				} else {
					((Ent_Static)user).visible_message( "<span class='warning'>" + user + " waves around blank sign.</span>" );
				}
				((Mob)user).changeNext_move( 8 );
			}
			return null;
		}

		// Function from file: signs.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			string txt = null;

			
			if ( A is Obj_Item_Weapon_Pen || A is Obj_Item_Toy_Crayon ) {
				txt = GlobalFuncs.stripped_input( user, "What would you like to write on the sign?", "Sign Label", null, 30 );

				if ( Lang13.Bool( txt ) ) {
					this.label = txt;
					this.name = "" + this.label + " sign";
					this.desc = "It reads: " + this.label;
				}
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

	}

}