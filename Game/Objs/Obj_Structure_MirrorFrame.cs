// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_MirrorFrame : Obj_Structure {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon = "icons/obj/machines/optical/beamsplitter.dmi";
			this.icon_state = "base";
		}

		public Obj_Structure_MirrorFrame ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: frame.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;
			Game_Data M = null;
			dynamic stack = null;
			Obj_Machinery_Mirror_Beamsplitter BS = null;
			dynamic stack2 = null;
			Obj_Machinery_Mirror mirror = null;

			
			if ( a is Obj_Item_Weapon_Wrench ) {
				GlobalFuncs.to_chat( b, new Txt( "<span class='info'>You begin to unfasten " ).the( this ).item().str( "'s bolts.</span>" ).ToString() );

				if ( GlobalFuncs.do_after( b, this, 20 ) ) {
					this.anchored = !Lang13.Bool( this.anchored );
					((Ent_Static)b).visible_message( new Txt( "<span class='info'>You unfasten " ).the( this ).item().str( "'s bolts.</span>" ).ToString(), "" + b + " unfastens the " + this + "'s bolts.", "You hear a ratchet." );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
				}
			}

			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					GlobalFuncs.to_chat( b, "Now welding the " + this + "..." );

					if ( GlobalFuncs.do_after( b, this, 20 ) ) {
						
						if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
							return null;
						}
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder2.ogg", 50, 1 );
						((Ent_Static)b).visible_message( "<span class='warning'>" + b + " cuts the " + this + " apart.</span>", "<span class='warning'>You cut the " + this + " apart.</span>", "You hear welding." );
						M = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
						((dynamic)M).amount = 5;
						GlobalFuncs.qdel( this );
						return null;
					} else {
						GlobalFuncs.to_chat( b, "<span class='notice'>The welding tool needs to be on to start this task.</span>" );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>You need more welding fuel to complete this task.</span>" );
				}
			}

			if ( a is Obj_Item_Stack_Sheet_Glass_Plasmarglass ) {
				stack = a;

				if ( Convert.ToDouble( stack.amount ) < 5 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You need at least 5 " + stack + " to build a beamsplitter.</span>" );
					return null;
				}

				if ( GlobalFuncs.do_after( b, this, 10 ) ) {
					
					if ( Convert.ToDouble( stack.amount ) < 5 ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>You need at least 5 " + stack + " to build a beamsplitter.</span>" );
						return null;
					}
					stack.use( 5 );
					BS = new Obj_Machinery_Mirror_Beamsplitter( GlobalFuncs.get_turf( this ) );
					((Ent_Static)b).visible_message( "" + b + " completes the " + BS + ".", "<span class='info'>You successfully build the " + BS + "!</span>", "You hear a click." );
					GlobalFuncs.qdel( this );
				}
				return null;
			}

			if ( a is Obj_Item_Stack_Sheet_Glass_Rglass ) {
				stack2 = a;

				if ( Convert.ToDouble( stack2.amount ) < 5 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>You need at least 5 " + stack2 + " to build a beamsplitter.</span>" );
					return null;
				}

				if ( GlobalFuncs.do_after( b, this, 10 ) ) {
					
					if ( Convert.ToDouble( stack2.amount ) < 5 ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>You need at least 5 " + stack2 + " to build a beamsplitter.</span>" );
						return null;
					}
					stack2.use( 5 );
					mirror = new Obj_Machinery_Mirror( GlobalFuncs.get_turf( this ) );
					((Ent_Static)b).visible_message( "" + b + " completes the " + mirror + ".", "<span class='info'>You successfully build the " + mirror + "!</span>", "You hear a click." );
					GlobalFuncs.qdel( this );
					return null;
				}
			}
			return null;
		}

	}

}