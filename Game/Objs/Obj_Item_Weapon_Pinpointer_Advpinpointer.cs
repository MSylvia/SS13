// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Pinpointer_Advpinpointer : Obj_Item_Weapon_Pinpointer {

		public int mode = 0;
		public Tile location = null;
		public dynamic target = null;

		public Obj_Item_Weapon_Pinpointer_Advpinpointer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pinpointer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( !this.active ) {
				this.active = true;

				if ( this.mode == 0 ) {
					this.workdisk();
				}

				if ( this.mode == 1 ) {
					this.point_at( this.location );
				}

				if ( this.mode == 2 ) {
					this.point_at( this.target );
				}
				Task13.User.WriteMsg( "<span class='notice'>You activate the pinpointer.</span>" );
			} else {
				this.active = false;
				this.icon_state = "pinoff";
				Task13.User.WriteMsg( "<span class='notice'>You deactivate the pinpointer.</span>" );
			}
			return null;
		}

		// Function from file: pinpointer.dm
		[Verb]
		[VerbInfo( name: "Toggle Pinpointer Mode", group: "Object", access: VerbAccess.InView, range: 1 )]
		public dynamic toggle_mode(  ) {
			dynamic locationx = null;
			dynamic locationy = null;
			dynamic Z = null;
			dynamic targetitem = null;
			dynamic DNAstring = null;
			Mob_Living_Carbon C = null;

			
			if ( Task13.User.stat != 0 || Task13.User.restrained() || !Task13.User.canmove ) {
				return null;
			}
			this.active = false;
			this.icon_state = "pinoff";
			this.target = null;
			this.location = null;

			switch ((string)( Interface13.Alert( "Please select the mode you want to put the pinpointer in.", "Pinpointer Mode Select", "Location", "Disk Recovery", "Other Signature" ) )) {
				case "Location":
					this.mode = 1;
					locationx = Interface13.Input( Task13.User, "Please input the x coordinate to search for.", "Location?", "", null, InputType.Num );

					if ( !Lang13.Bool( locationx ) || !Map13.FetchInView( this, 1 ).Contains( Task13.User ) ) {
						return null;
					}
					locationy = Interface13.Input( Task13.User, "Please input the y coordinate to search for.", "Location?", "", null, InputType.Num );

					if ( !Lang13.Bool( locationy ) || !Map13.FetchInView( this, 1 ).Contains( Task13.User ) ) {
						return null;
					}
					Z = GlobalFuncs.get_turf( this );
					this.location = Map13.GetTile( Convert.ToInt32( locationx ), Convert.ToInt32( locationy ), Convert.ToInt32( Z.z ) );
					Task13.User.WriteMsg( "<span class='notice'>You set the pinpointer to locate " + locationx + "," + locationy + "</span>" );
					return this.attack_self();
					break;
				case "Disk Recovery":
					this.mode = 0;
					return this.attack_self();
					break;
				case "Other Signature":
					this.mode = 2;

					switch ((string)( Interface13.Alert( "Search for item signature or DNA fragment?", "Signature Mode Select", "", "Item", "DNA" ) )) {
						case "Item":
							targetitem = Interface13.Input( "Select item to search for.", "Item Mode Select", "", null, GlobalVars.possible_items, InputType.Null | InputType.Any );

							if ( !Lang13.Bool( targetitem ) ) {
								return null;
							}
							this.target = Lang13.FindObj( GlobalVars.possible_items[targetitem] );

							if ( !Lang13.Bool( this.target ) ) {
								Task13.User.WriteMsg( "<span class='warning'>Failed to locate " + targetitem + "!</span>" );
								return null;
							}
							Task13.User.WriteMsg( "<span class='notice'>You set the pinpointer to locate " + targetitem + ".</span>" );
							break;
						case "DNA":
							DNAstring = Interface13.Input( "Input DNA string to search for.", "Please Enter String.", "", null, null, InputType.Any );

							if ( !Lang13.Bool( DNAstring ) ) {
								return null;
							}

							foreach (dynamic _a in Lang13.Enumerate( GlobalVars.mob_list, typeof(Mob_Living_Carbon) )) {
								C = _a;
								

								if ( !( C.dna != null ) ) {
									continue;
								}

								if ( C.dna.unique_enzymes == DNAstring ) {
									this.target = C;
									break;
								}
							}
							break;
					}
					return this.attack_self();
					break;
			}
			return null;
		}

	}

}