// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Pinpointer_Nukeop : Obj_Item_Weapon_Pinpointer {

		public bool mode = false;
		public Obj_DockingPort_Mobile home = null;

		public Obj_Item_Weapon_Pinpointer_Nukeop ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pinpointer.dm
		public void worklocation(  ) {
			
			if ( !this.active ) {
				return;
			}

			if ( !this.mode ) {
				this.workdisk();
				return;
			}

			if ( !GlobalVars.bomb_set ) {
				this.mode = false;
				this.workdisk();
				GlobalFuncs.playsound( this.loc, "sound/machines/twobeep.ogg", 50, 1 );
				this.visible_message( "<span class='notice'>Authentication Disk Locator mode actived.</span>" );
				return;
			}

			if ( !( this.home != null ) ) {
				this.home = GlobalVars.SSshuttle.getShuttle( "syndicate" );

				if ( !( this.home != null ) ) {
					this.icon_state = "pinonnull";
					return;
				}
			}

			if ( this.loc.z != this.home.z ) {
				this.icon_state = "pinonnull";
			} else {
				this.dir = Map13.GetDistance( this, this.home );

				dynamic _a = Map13.GetDistance( this, this.home ); // Was a switch-case, sorry for the mess.
				if ( 1<=_a&&_a<=8 ) {
					this.icon_state = "pinonclose";
				} else if ( 9<=_a&&_a<=16 ) {
					this.icon_state = "pinonmedium";
				} else if ( 16<=_a&&_a<=Double.PositiveInfinity ) {
					this.icon_state = "pinonfar";
				} else if ( _a==0 ) {
					this.icon_state = "pinondirect";
				}
			}
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.worklocation();
				return;
			}));
			return;
		}

		// Function from file: pinpointer.dm
		public override void workdisk(  ) {
			
			if ( !this.active ) {
				return;
			}

			if ( this.mode ) {
				this.worklocation();
				return;
			}

			if ( GlobalVars.bomb_set ) {
				this.mode = true;
				this.worklocation();
				GlobalFuncs.playsound( this.loc, "sound/machines/twobeep.ogg", 50, 1 );
				this.visible_message( "Shuttle Locator mode actived." );
				return;
			}
			this.scandisk();

			if ( !Lang13.Bool( this.the_disk ) ) {
				this.icon_state = "pinonnull";
				return;
			}
			this.dir = Map13.GetDistance( this, this.the_disk );

			dynamic _a = Map13.GetDistance( this, this.the_disk ); // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=8 ) {
				this.icon_state = "pinonclose";
			} else if ( 9<=_a&&_a<=16 ) {
				this.icon_state = "pinonmedium";
			} else if ( 16<=_a&&_a<=Double.PositiveInfinity ) {
				this.icon_state = "pinonfar";
			} else if ( _a==0 ) {
				this.icon_state = "pinondirect";
			}
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.workdisk();
				return;
			}));
			return;
		}

		// Function from file: pinpointer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string mode_text = null;

			
			if ( !this.active ) {
				this.active = true;
				mode_text = "Authentication Disk Locator mode";

				if ( !this.mode ) {
					this.workdisk();
				} else {
					mode_text = "Shuttle Locator mode";
					this.worklocation();
				}
				user.WriteMsg( "<span class='notice'>You activate the pinpointer(" + mode_text + ").</span>" );
			} else {
				this.active = false;
				this.icon_state = "pinoff";
				user.WriteMsg( "<span class='notice'>You deactivate the pinpointer.</span>" );
			}
			return null;
		}

	}

}