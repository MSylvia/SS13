// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Lightreplacer : Obj_Item_Device {

		public dynamic supply = null;
		public dynamic waste = null;
		public double glass_stor = 0;
		public double glass_stor_max = 18750;
		public int prod_quality = 30;
		public int prod_eff = 10;
		public int cardboard_stor = 0;
		public int cardboard_stor_max = 5;
		public bool emagged = false;
		public ByTable light_types_glass = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "electronic";
			this.slot_flags = 512;
			this.origin_tech = "magnets=3;materials=2";
			this.icon = "icons/obj/janitor.dmi";
			this.icon_state = "lightreplacer0";
		}

		public Obj_Item_Device_Lightreplacer ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: lightreplacer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic light_type = null;
			Type light_path = null;
			dynamic L = null;
			ByTable dumplist = null;
			dynamic lightref = null;
			dynamic L2 = null;
			dynamic swapholder = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["eject"] ) ) {
				
				dynamic _a = href_list["eject"]; // Was a switch-case, sorry for the mess.
				if ( _a=="supply" ) {
					
					if ( Task13.User != null ) {
						Task13.User.put_in_hands( this.supply );
						Task13.User.visible_message( new Txt().item( Task13.User ).str( " removes " ).the( this.supply ).item().str( " from " ).the( this ).item().str( "." ).ToString(), new Txt( "You remove " ).the( this ).item().str( "'s supply container, " ).the( this.supply ).item().str( "." ).ToString() );
					} else {
						this.supply.loc = GlobalFuncs.get_turf( this );
					}
					this.supply = null;

					if ( Task13.User != null ) {
						this.attack_self( Task13.User );
					}
					return 1;
				} else if ( _a=="waste" ) {
					
					if ( Task13.User != null ) {
						Task13.User.put_in_hands( this.waste );
						Task13.User.visible_message( new Txt().item( Task13.User ).str( " removes " ).the( this.waste ).item().str( " from " ).the( this ).item().str( "." ).ToString(), new Txt( "You remove " ).the( this ).item().str( "'s waste container, " ).the( this.waste ).item().str( "." ).ToString() );
					} else {
						this.waste.loc = GlobalFuncs.get_turf( this );
					}
					this.waste = null;

					if ( Task13.User != null ) {
						this.attack_self( Task13.User );
					}
					return 1;
				}
			}

			if ( Lang13.Bool( href_list["build"] ) ) {
				light_type = href_list["build"];
				light_path = Lang13.FindClass( "/obj/item/weapon/light/" + light_type );
				L = null;

				if ( !Lang13.Bool( this.light_types_glass[light_type] ) ) {
					L = Lang13.Call( light_path );
					this.light_types_glass[light_type] = L.starting_materials["$glass"];
				}

				if ( !this.use_glass( Convert.ToDouble( this.light_types_glass[light_type] * this.prod_eff ) ) ) {
					
					if ( Task13.User != null ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this ).item().str( " doesn't have enough glass to make that!</span>" ).ToString() );
					}

					if ( Lang13.Bool( L ) ) {
						GlobalFuncs.qdel( L );
						L = null;
					}
					return 1;
				}

				if ( !Lang13.Bool( L ) ) {
					L = Lang13.Call( light_path );
				}
				L.switchcount = this.prod_quality;

				if ( !this.insert_if_possible( L ) ) {
					L.loc = GlobalFuncs.get_turf( this );

					if ( Task13.User != null ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " successfully fabricates " ).a( L ).item().str( ", but it drops it on the floor.</span>" ).ToString() );
					}
				} else if ( Task13.User != null ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " successfully fabricates " ).a( L ).item().str( ".</span>" ).ToString() );
				}

				if ( Task13.User != null ) {
					this.attack_self( Task13.User );
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["dump"] ) ) {
				
				if ( !Lang13.Bool( this.supply ) ) {
					
					if ( Task13.User != null ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this ).item().str( " doesn't have a supply container!</span>" ).ToString() );
					}
					return 1;
				}

				if ( !Lang13.Bool( this.waste ) ) {
					
					if ( Task13.User != null ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this ).item().str( " doesn't have a waste container!</span>" ).ToString() );
					}
					return 1;
				}
				dumplist = GlobalFuncs.text2list( href_list["dump"], ", " );

				foreach (dynamic _b in Lang13.Enumerate( dumplist )) {
					lightref = _b;
					
					L2 = Lang13.FindObj( lightref );

					if ( L2.loc == this.supply ) {
						((Obj_Item_Weapon_Storage)this.supply).remove_from_storage( L2, this.waste );
					}
				}

				if ( Task13.User != null ) {
					this.attack_self( Task13.User );
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["swap"] ) ) {
				swapholder = this.waste;
				this.waste = this.supply;
				this.supply = swapholder;

				if ( Task13.User != null ) {
					this.attack_self( Task13.User );
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["fold"] ) ) {
				
				if ( this.cardboard_stor <= 0 ) {
					
					if ( Task13.User != null ) {
						GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this ).item().str( " is out of cardboard!</span>" ).ToString() );
					}
					return 1;
				}

				dynamic _c = href_list["fold"]; // Was a switch-case, sorry for the mess.
				if ( _c=="supply" ) {
					
					if ( !Lang13.Bool( this.supply ) ) {
						this.supply = new Obj_Item_Weapon_Storage_Box_Lights( this );
						this.cardboard_stor--;

						if ( Task13.User != null ) {
							GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " constructs a new supply container.</span>" ).ToString() );
							this.attack_self( Task13.User );
						}
						return 1;
					}
				} else if ( _c=="waste" ) {
					
					if ( !Lang13.Bool( this.waste ) ) {
						this.waste = new Obj_Item_Weapon_Storage_Box_Lights( this );
						this.cardboard_stor--;

						if ( Task13.User != null ) {
							GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " constructs a new waste container.</span>" ).ToString() );
							this.attack_self( Task13.User );
						}
						return 1;
					}
				}
			}
			return null;
		}

		// Function from file: lightreplacer.dm
		public bool use_glass( double amt = 0 ) {
			
			if ( amt > this.glass_stor ) {
				return false;
			}
			this.glass_stor -= amt;
			return true;
		}

		// Function from file: lightreplacer.dm
		public bool add_glass( double amt = 0, int? force_fill = null ) {
			force_fill = force_fill ?? 0;

			
			if ( !Lang13.Bool( force_fill ) ) {
				
				if ( this.glass_stor + amt > this.glass_stor_max ) {
					return false;
				}
			} else if ( force_fill == 1 ) {
				
				if ( this.glass_stor >= this.glass_stor_max ) {
					return false;
				}
			}
			this.glass_stor = Num13.MinInt( ((int)( this.glass_stor_max )), ((int)( this.glass_stor + amt )) );
			return true;
		}

		// Function from file: lightreplacer.dm
		public bool CanUse( dynamic user = null ) {
			this.add_fingerprint( user );
			return true;
		}

		// Function from file: lightreplacer.dm
		public bool is_light_better( dynamic tested = null, Obj_Machinery_Light comparison = null ) {
			
			if ( !( tested is Obj_Item_Weapon_Light || tested is Obj_Machinery_Light ) || !( comparison is Obj_Item_Weapon_Light || comparison is Obj_Machinery_Light ) ) {
				return false;
			}

			if ( Convert.ToDouble( tested.status ) >= 2 ) {
				return false;
			}

			if ( Convert.ToDouble( tested.status ) < comparison.status ) {
				return true;
			}

			if ( Lang13.Bool( tested.status ) ) {
				return false;
			}

			if ( String13.Find( tested.base_state, "he", 1, 3 ) != 0 && !( String13.Find( comparison.base_state, "he", 1, 3 ) != 0 ) ) {
				return true;
			} else {
				return false;
			}
		}

		// Function from file: lightreplacer.dm
		public dynamic get_best_light( Obj_Machinery_Light target = null ) {
			dynamic best_light = null;

			
			if ( !( this.supply is Obj_Item_Weapon_Storage_Box_Lights ) ) {
				return 0;
			}

			switch ((string)( target.fitting )) {
				case "bulb":
					best_light = Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Light_Bulb_He), this.supply ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Light_Bulb), this.supply ) );
					break;
				case "tube":
					best_light = Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Light_Tube_He), this.supply ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Item_Weapon_Light_Tube), this.supply ) );
					break;
				case "large tube":
					best_light = Lang13.FindIn( typeof(Obj_Item_Weapon_Light_Tube_Large), this.supply );
					break;
			}
			return best_light;
		}

		// Function from file: lightreplacer.dm
		public bool insert_if_possible( dynamic L = null ) {
			Ent_Static lsource = null;
			Ent_Static lsource2 = null;

			
			if ( !( L is Obj_Item_Weapon_Light ) ) {
				return false;
			}

			if ( Lang13.Bool( L.status ) == false ) {
				
				if ( Lang13.Bool( this.supply ) && ((Obj_Item_Weapon_Storage)this.supply).can_be_inserted( L, GlobalVars.TRUE ) ) {
					
					if ( L.loc is Obj_Item_Weapon_Storage ) {
						lsource = L.loc;
						((Obj_Item_Weapon_Storage)lsource).remove_from_storage( L, this.supply );
					} else {
						((Obj_Item_Weapon_Storage)this.supply).handle_item_insertion( L, GlobalVars.TRUE );
					}
					return true;
				} else {
					return false;
				}
			} else if ( Convert.ToInt32( L.status ) == 2 || Convert.ToInt32( L.status ) == 3 ) {
				
				if ( Lang13.Bool( this.waste ) && ((Obj_Item_Weapon_Storage)this.waste).can_be_inserted( L, GlobalVars.TRUE ) ) {
					
					if ( L.loc is Obj_Item_Weapon_Storage ) {
						lsource2 = L.loc;
						((Obj_Item_Weapon_Storage)lsource2).remove_from_storage( L, this.waste );
					} else {
						((Obj_Item_Weapon_Storage)this.waste).handle_item_insertion( L, GlobalVars.TRUE );
					}
					return true;
				} else {
					return false;
				}
			}
			return false;
		}

		// Function from file: lightreplacer.dm
		public void Emag(  ) {
			this.emagged = !this.emagged;
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sparks", 100, 1 );

			if ( this.emagged ) {
				this.name = "Shortcircuited " + Lang13.Initial( this, "name" );
			} else {
				this.name = Lang13.Initial( this, "name" );
			}
			this.update_icon();
			return;
		}

		// Function from file: lightreplacer.dm
		public void ReplaceLight( Obj_Machinery_Light target = null, dynamic user = null ) {
			dynamic best_light = null;
			dynamic L1 = null;

			best_light = this.get_best_light( target );

			if ( best_light == 0 ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " has no supply container!</span>" ).ToString() );
				return;
			} else if ( !Lang13.Bool( best_light ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " has no compatible light!</span>" ).ToString() );
				return;
			}

			if ( !this.is_light_better( best_light, target ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>" ).The( this ).item().str( " has no light better than the one already in " ).the( target ).item().str( ".</span>" ).ToString() );
				return;
			}
			GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You replace the " ).item( target.fitting ).str( " with " ).the( this ).item().str( ".</span>" ).ToString() );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/click.ogg", 50, 1 );
			((Obj_Item_Weapon_Storage)this.supply).remove_from_storage( best_light );

			if ( target.status != 1 ) {
				L1 = Lang13.Call( target.light_type, target.loc );
				L1.status = target.status;
				L1.rigged = target.rigged;
				L1.brightness_range = target.brightness_range;
				L1.brightness_power = target.brightness_power;
				L1.brightness_color = target.brightness_color;
				L1.cost = target.cost;
				L1.base_state = target.base_state;
				L1.switchcount = target.switchcount;
				target.switchcount = 0;
				L1.update();
				target.status = 1;
				target.update();

				if ( !this.insert_if_possible( L1 ) ) {
					
					if ( this.waste is Obj_Item_Weapon_Storage_Box_Lights ) {
						GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( "'s waste container is full and it drops the removed light on the floor!</span>" ).ToString() );
					} else {
						GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( " has no waste container and it drops the removed light on the floor!</span>" ).ToString() );
					}
				}
			}
			target.status = Convert.ToInt32( best_light.status );
			target.switchcount = Convert.ToInt32( best_light.switchcount );
			target.rigged = this.emagged || Lang13.Bool( best_light.rigged );
			target.brightness_range = Convert.ToInt32( best_light.brightness_range );
			target.brightness_power = Lang13.Bool( best_light.brightness_power );
			target.brightness_color = best_light.brightness_color;
			target.cost = Convert.ToInt32( best_light.cost );
			target.base_state = best_light.base_state;
			target.light_type = best_light.type;
			target.on = target.has_power();
			target.update();
			GlobalFuncs.qdel( best_light );
			best_light = null;

			if ( target.on && target.rigged ) {
				target.explode();
			}
			return;
		}

		// Function from file: lightreplacer.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.icon_state = "lightreplacer" + this.emagged;
			return null;
		}

		// Function from file: lightreplacer.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			string dat = null;
			ByTable light_types = null;
			string lightname = null;
			Obj_Item_Weapon_Light L = null;
			ByTable light_type_cur = null;
			ByTable to_dump_5 = null;
			ByTable to_dump_all = null;
			dynamic T = null;
			dynamic light_to_ref = null;
			Browser popup = null;

			dat = "<TITLE>Light Replacer Interface</TITLE>\n\n	Glass storage: " + this.glass_stor + "/" + this.glass_stor_max + "<br>Cardboard Sheets: " + this.cardboard_stor + "/" + this.cardboard_stor_max + "<br>";

			if ( Lang13.Bool( this.supply ) ) {
				dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";build=tube'>Fabricate Tube</a>\n		<a href='?src=" ).Ref( this ).str( @";build=bulb'>Fabricate Bulb</a>



		<h3>Supply Container:</h3>" ).ToString();
				light_types = new ByTable();

				foreach (dynamic _a in Lang13.Enumerate( this.supply, typeof(Obj_Item_Weapon_Light) )) {
					L = _a;
					
					lightname = "";

					if ( L.status == 2 ) {
						lightname += "broken ";
					} else if ( L.status == 3 ) {
						lightname += "burned-out ";
					}
					lightname += L.name;

					if ( !Lang13.Bool( light_types[lightname] ) ) {
						light_types[lightname] = new ByTable();
					}
					light_types[lightname] += L;
				}
				light_type_cur = null;
				to_dump_5 = null;
				to_dump_all = null;

				foreach (dynamic _c in Lang13.Enumerate( light_types )) {
					T = _c;
					
					light_type_cur = light_types[T];
					to_dump_5 = new ByTable();
					to_dump_all = new ByTable();

					foreach (dynamic _b in Lang13.Enumerate( light_type_cur )) {
						light_to_ref = _b;
						
						to_dump_all.Add( new Txt().Ref( light_to_ref ).ToString() );
					}
					to_dump_5 = to_dump_all.Copy( 1, Num13.MinInt( 6, to_dump_all.len + 1 ) );
					dat += new Txt( "<br><b>" ).item( T ).str( ": </b>" ).item( light_type_cur.len ).str( " | Dump to Waste: <a href='?src=" ).Ref( this ).str( ";dump=" ).Ref( light_type_cur[1] ).str( "'>1</a><a href='?src=" ).Ref( this ).str( ";dump=" ).item( GlobalFuncs.list2text( to_dump_5, ", " ) ).str( "'>5</a><a href='?src=" ).Ref( this ).str( ";dump=" ).item( GlobalFuncs.list2text( to_dump_all, ", " ) ).str( "'>All</a>" ).ToString();
				}
				dat += new Txt( "<br><b><a href='?src=" ).Ref( this ).str( ";eject=supply'>Eject Supply Container</a></b>" ).ToString();
			} else {
				dat += new Txt( "<h3>No supply container inserted</h3><br><a href='?src=" ).Ref( this ).str( ";fold=supply'>Construct Supply Box</a>" ).ToString();
			}

			if ( Lang13.Bool( this.supply ) || Lang13.Bool( this.waste ) ) {
				dat += new Txt( "<br><br><a href='?src=" ).Ref( this ).str( ";swap=1'>Swap Supply and Waste Containers</a>" ).ToString();
			}

			if ( Lang13.Bool( this.waste ) ) {
				dat += new Txt( "<br><br><br><h3>Waste Container:</h3>\n\n		<b>Filled: </b>" ).item( this.waste.contents.len ).str( "/" ).item( this.waste.storage_slots ).str( "<br>\n		<b><a href='?src=" ).Ref( this ).str( ";eject=waste'>Eject Waste Container</a></b>\n		" ).ToString();
			} else {
				dat += new Txt( "<br><br><br><h3>No waste container inserted</h3><br><a href='?src=" ).Ref( this ).str( ";fold=waste'>Construct Waste Box</a>" ).ToString();
			}
			popup = new Browser( user, "lightreplacer", "", null, null, this );
			popup.set_content( dat );
			popup.open();
			return null;
		}

		// Function from file: lightreplacer.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic G = null;
			dynamic L = null;
			dynamic lsource = null;
			bool hasinserted = false;
			Obj_Item_Weapon_Light L2 = null;
			dynamic C = null;

			
			if ( a is Obj_Item_Weapon_Card_Emag && !this.emagged ) {
				this.Emag();
				return null;
			}

			if ( a is Obj_Item_Stack_Sheet_Glass_Glass ) {
				
				if ( !this.add_glass( 3750, 1 ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " can't hold any more glass!</span>" ).ToString() );
					return null;
				}
				G = a;
				G.use( 1 );
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You insert " ).the( G ).item().str( " into " ).the( this ).item().str( ".</span>" ).ToString() );
				return null;
			}

			if ( a is Obj_Item_Weapon_Light ) {
				L = a;

				switch ((bool)( this.insert_if_possible( L ) )) {
					case false:
						
						if ( ( Lang13.Bool( L.status ) ? this.waste is Obj_Item_Weapon_Storage_Box_Lights : this.supply is Obj_Item_Weapon_Storage_Box_Lights ) ) {
							GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( "'s " ).item( ( Lang13.Bool( L.status ) ? "waste" : "supply" ) ).str( " container is full!</span>" ).ToString() );
						} else {
							GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " has no " ).item( ( Lang13.Bool( L.status ) ? "waste" : "supply" ) ).str( " container!</span>" ).ToString() );
						}
						break;
					case true:
						((Ent_Static)b).visible_message( new Txt().item( b ).str( " inserts " ).a( L ).item().str( " into " ).the( this ).item().ToString(), new Txt( "You insert " ).the( L ).item().str( " into " ).the( this ).item().str( "'s " ).item( ( Lang13.Bool( L.status ) ? "waste" : "supply" ) ).str( " container." ).ToString() );
						break;
					default:
						GlobalFuncs.to_chat( b, "<span class='bnotice'>Something very strange has happened. Please adminhelp and ask someone to view the variables of that light, especially status.</span>" );
						break;
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_Storage_Box_Lights ) {
				
				if ( !Lang13.Bool( this.supply ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						((Ent_Static)b).visible_message( new Txt().item( b ).str( " inserts " ).a( a ).item().str( " into " ).the( this ).item().ToString(), new Txt( "You insert " ).the( a ).item().str( " into " ).the( this ).item().str( " to be used as the supply container." ).ToString() );
						this.supply = a;
						return null;
					}
				} else if ( !Lang13.Bool( this.waste ) ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						((Ent_Static)b).visible_message( new Txt().item( b ).str( " inserts " ).a( a ).item().str( " into " ).the( this ).item().ToString(), new Txt( "You insert " ).the( a ).item().str( " into " ).the( this ).item().str( " to be used as the waste container." ).ToString() );
						this.waste = a;
						return null;
					}
				} else {
					lsource = a;

					if ( !( lsource.contents.len != 0 ) ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " has both a supply box and a waste box and this box is empty. Remove one first if you want to insert a new one or use a light box with lights in it to insert them.</span>" ).ToString() );
						return null;
					}
					hasinserted = false;

					foreach (dynamic _b in Lang13.Enumerate( lsource, typeof(Obj_Item_Weapon_Light) )) {
						L2 = _b;
						

						if ( this.insert_if_possible( L2 ) ) {
							hasinserted = true;
						}
					}

					if ( hasinserted ) {
						GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>" ).The( this ).item().str( " accepts the lights in " ).the( lsource ).item().str( ".</span>" ).ToString() );
					} else {
						GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " cannot accept any of the lights in " ).the( lsource ).item().str( "!</span>" ).ToString() );
					}
					return null;
				}
			}

			if ( a is Obj_Item_Stack_Sheet_Cardboard ) {
				
				if ( this.cardboard_stor >= this.cardboard_stor_max ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='warning'>" ).The( this ).item().str( " cannot hold any more cardboard!</span>" ).ToString() );
					return null;
				}
				C = a;
				this.cardboard_stor++;
				C.use( 1 );
				GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You insert a cardboard sheet into " ).the( this ).item().str( ".</span>" ).ToString() );
				return null;
			}
			return null;
		}

		// Function from file: lightreplacer.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( Lang13.Bool( this.supply ) ) {
				
				if ( this.supply.contents.len != 0 ) {
					GlobalFuncs.to_chat( user, "<span class='info'>It has " + this.supply.contents.len + " light" + ( this.supply.contents.len == 1 ? "" : "s" ) + " remaining. Check its interface to see what type" + ( this.supply.contents.len == 1 ? "" : "s" ) + ".</span>" );
				} else {
					GlobalFuncs.to_chat( user, "<span class='info'>Its supply container is empty.</span>" );
				}
			} else {
				GlobalFuncs.to_chat( user, "<span class='info'>It has no supply container.</span>" );
			}

			if ( Lang13.Bool( this.waste ) ) {
				GlobalFuncs.to_chat( user, "<span class='info'>Its waste container has " + this.waste.contents.len + " slot" + ( this.waste.contents.len == 1 ? "" : "s" ) + " full.</span>" );
			} else {
				GlobalFuncs.to_chat( user, "<span class='info'>It has no waste container.</span>" );
			}
			GlobalFuncs.to_chat( user, "<span class='info'>Its glass storage contains " + this.glass_stor + " unit" + ( this.waste.contents.len == 1 ? "" : "s" ) + ".</span>" );
			return null;
		}

	}

}