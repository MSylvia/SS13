// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj : Ent_Dynamic {

		public dynamic req_access = null;
		public dynamic req_one_access = null;
		public string req_access_txt = "0";
		public string req_one_access_txt = "0";
		public dynamic explosion_resistance = null;
		public string origin_tech = null;
		public double reliability = 100;
		public bool crit_fail = false;
		public bool unacidable = false;
		public int throwforce = 1;
		public dynamic siemens_coefficient = 0;
		public dynamic sharpness = 0;
		public double? heat_production = 0;
		public bool edge = false;
		public bool in_use = false;
		public dynamic damtype = "brute";
		public dynamic force = 0;
		public bool log_reagents = true;
		public ByTable _using = null;
		public int? mech_flags = 0;

		public Obj ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: Airflow.dm
		public override dynamic airflow_hit( dynamic A = null ) {
			dynamic _default = null;

			dynamic M = null;

			
			if ( !this.sound_override ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( null, this ) )) {
					M = _a;
					
					M.show_message( new Txt( "<span class='danger'>" ).The( this ).item().str( " slams into " ).a( A ).item().str( "!</span>" ).ToString(), 1, "<span class='warning'>You hear a loud slam!</span>", 2 );
				}
			}
			_default = base.airflow_hit( (object)(A) );
			return _default;
		}

		// Function from file: objs.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			return null;
		}

		// Function from file: objs.dm
		public override bool singularity_pull( Obj S = null, double? current_size = null, int? radiations = null ) {
			
			if ( Lang13.Bool( this.anchored ) ) {
				
				if ( ( current_size ??0) >= 9 ) {
					this.anchored = 0;
					Map13.StepTowardsSimple( this, S );
				}
			} else {
				Map13.StepTowardsSimple( this, S );
			}
			return false;
		}

		// Function from file: objs.dm
		public override bool shuttle_act( Shuttle S = null ) {
			GlobalFuncs.qdel( this ); return false;
		}

		// Function from file: objs.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			this.ex_act( 1 );

			if ( this != null ) {
				GlobalFuncs.qdel( this );
			}
			return 2;
		}

		// Function from file: objs.dm
		public override GasMixture return_air(  ) {
			
			if ( this.loc != null ) {
				return this.loc.return_air();
			} else {
				return null;
			}
		}

		// Function from file: objs.dm
		public override dynamic remove_air( dynamic amount = null ) {
			
			if ( this.loc != null ) {
				return this.loc.remove_air( amount );
			} else {
				return null;
			}
		}

		// Function from file: objs.dm
		public override bool? assume_air( dynamic giver = null ) {
			
			if ( this.loc != null ) {
				return this.loc.assume_air( giver );
			} else {
				return null;
			}
		}

		// Function from file: objs.dm
		public override int recycle( Game_Data rec = null ) {
			
			if ( base.recycle( rec ) != 0 ) {
				return 1;
			}
			return this.w_type;
		}

		// Function from file: objs.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			dynamic user = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this._using )) {
				user = _a;
				
				((Mob)user).unset_machine();
			}

			if ( GlobalVars.processing_objects.Contains( this ) ) {
				GlobalVars.processing_objects.Remove( this );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: splash_simulation.dm
		public virtual bool liquid_pass(  ) {
			return true;
		}

		// Function from file: utils.dm
		public MoneyAccount get_card_account( dynamic I = null, dynamic user = null, string terminal_name = null, string transaction_purpose = null, bool? require_pin = null ) {
			terminal_name = terminal_name ?? "";
			transaction_purpose = transaction_purpose ?? "";
			require_pin = require_pin ?? false;

			dynamic C = null;
			dynamic attempt_pin = null;
			MoneyAccount D = null;

			
			if ( terminal_name == "" ) {
				terminal_name = this.name;
			}

			if ( I is Obj_Item_Weapon_Card_Id ) {
				C = I;
				attempt_pin = 0;
				D = GlobalFuncs.get_money_account( C.associated_account_number );

				if ( require_pin == true && Lang13.Bool( user ) ) {
					attempt_pin = Interface13.Input( user, "Enter pin code", "Transaction", null, null, InputType.Num );

					if ( D.remote_access_pin != attempt_pin ) {
						return null;
					}
				}

				if ( D != null ) {
					return D;
				}
			}
			return null;
		}

		// Function from file: helpers.dm
		public virtual bool IsAssemblyHolder(  ) {
			return false;
		}

		// Function from file: helpers.dm
		public bool IsSpecialAssembly(  ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual string give_tech_list(  ) {
			return null;
		}

		// Function from file: objs.dm
		public virtual void on_log(  ) {
			Ent_Static location = null;

			
			if ( this.loc is Obj ) {
				location = this.loc;
				((Obj)location).on_log();
			}
			return;
		}

		// Function from file: objs.dm
		public virtual bool verb_pickup( Mob user = null ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual bool can_pickup( Mob user = null ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual void container_resist(  ) {
			return;
		}

		// Function from file: objs.dm
		public virtual void hide( bool? h = null ) {
			return;
		}

		// Function from file: objs.dm
		public virtual dynamic alter_health( Mob_Living M = null ) {
			return 1;
		}

		// Function from file: objs.dm
		public bool update_multitool_menu( dynamic user = null ) {
			dynamic P = null;
			string dat = null;
			dynamic id = null;
			dynamic buffer = null;

			P = GlobalFuncs.get_multitool( user );

			if ( !( P is Obj_Item_Device_Multitool ) ) {
				return false;
			}

			if ( Lang13.Bool( P.clone ) && Lang13.Bool( P.buffer ) ) {
				
				if ( !this.canClone( P.buffer ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='attack'>A red light flashes on " ).the( P ).item().str( "; you cannot clone to this device!</span>" ).ToString() );
					return false;
				}

				if ( !this.clone( P.buffer ) ) {
					GlobalFuncs.to_chat( user, new Txt( "<span class='attack'>A red light flashes on " ).the( P ).item().str( "; something went wrong when cloning to this device!</span>" ).ToString() );
					return false;
				}
				GlobalFuncs.to_chat( user, new Txt( "<span class='confirm'>A green light flashes on " ).the( P ).item().str( ", confirming the device was cloned to.</span>" ).ToString() );
				return false;
			}
			dat = "<html>\n	<head>\n		<title>" + this.name + @" Configuration</title>
		<style type=""text/css"">
html,body {
	font-family:courier;
	background:#999999;
	color:#333333;
}

a {
	color:#000000;
	text-decoration:none;
	border-bottom:1px solid black;
}
		</style>
	</head>
	<body>
		<h3>" + this.name + "</h3>\n";
			dat += this.multitool_menu( user, P );

			if ( Lang13.Bool( P ) ) {
				
				if ( Lang13.Bool( P.buffer ) ) {
					id = null;

					if ( P.buffer is Obj_Machinery_Telecomms ) {
						buffer = P.buffer;
						id = buffer.id;
					} else if ( Lang13.Bool( P.buffer.vars["id_tag"] ) ) {
						id = P.buffer.id_tag;
					}
					dat += "<p><b>MULTITOOL BUFFER:</b> " + P.buffer + " " + ( Lang13.Bool( id ) ? "(" + id + ")" : "" );
					dat += this.linkMenu( P.buffer );

					if ( Lang13.Bool( P.buffer ) ) {
						dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";flush=1'>[Flush]</a>" ).ToString();
					}
					dat += "</p>";
				} else {
					dat += new Txt( "<p><b>MULTITOOL BUFFER:</b> <a href='?src=" ).Ref( this ).str( ";buffer=1'>[Add Machine]</a></p>" ).ToString();
				}
			}
			dat += "</body></html>";
			Interface13.Browse( user, dat, "window=mtcomputer" );
			((Mob)user).set_machine( this );
			GlobalFuncs.onclose( user, "mtcomputer" );
			return false;
		}

		// Function from file: objs.dm
		public string format_tag( string label = null, string varname = null, string act = null ) {
			act = act ?? "set_tag";

			string value = null;

			value = this.vars[varname];

			if ( !Lang13.Bool( value ) || value == "" ) {
				value = "-----";
			}
			return new Txt( "<b>" ).item( label ).str( ":</b> <a href=\"?src=" ).Ref( this ).str( ";" ).item( act ).str( "=" ).item( varname ).str( "\">" ).item( value ).str( "</a>" ).ToString();
		}

		// Function from file: objs.dm
		public virtual string linkMenu( Base_Data O = null ) {
			string dat = null;

			dat = "";

			if ( this.canLink( O, new ByTable() ) ) {
				dat += new Txt( " <a href='?src=" ).Ref( this ).str( ";link=1'>[Link]</a> " ).ToString();
			}
			return dat;
		}

		// Function from file: objs.dm
		public virtual bool clone( dynamic O = null ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual bool canClone( dynamic O = null ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual Base_Data getLink( double? idx = null ) {
			return null;
		}

		// Function from file: objs.dm
		public virtual bool isLinkedWith( Base_Data O = null ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual bool canLink( Base_Data O = null, ByTable context = null ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual bool unlinkFrom( Mob user = null, Base_Data buffer = null ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual bool linkWith( Mob user = null, Base_Data buffer = null, ByTable context = null ) {
			return false;
		}

		// Function from file: objs.dm
		public virtual string multitool_menu( dynamic user = null, dynamic P = null ) {
			return "<b>NO MULTITOOL_MENU!</b>";
		}

		// Function from file: objs.dm
		public virtual dynamic interact( dynamic user = null, bool? flag1 = null ) {
			return null;
		}

		// Function from file: objs.dm
		public void updateDialog(  ) {
			ByTable nearby = null;
			bool is_in_use = false;
			dynamic M = null;

			
			if ( this.in_use ) {
				nearby = Map13.FetchViewers( this, 1 );
				is_in_use = false;

				foreach (dynamic _a in Lang13.Enumerate( this._using )) {
					M = _a;
					

					if ( !Lang13.Bool( M ) || !Lang13.Bool( M.client ) || M.machine != this ) {
						this._using.Remove( M );
						continue;
					}

					if ( !( M is Mob_Living_Silicon_Ai ) && !( M is Mob_Living_Silicon_Robot ) && !nearby.Contains( M ) ) {
						this._using.Remove( M );
						continue;
					}
					is_in_use = true;
					this.interact( M );
				}
				this.in_use = is_in_use;
			}
			return;
		}

		// Function from file: objs.dm
		public virtual void updateUsrDialog(  ) {
			bool is_in_use = false;
			ByTable nearby = null;
			dynamic M = null;

			
			if ( this.in_use ) {
				is_in_use = false;

				if ( this._using != null && this._using.len != 0 ) {
					nearby = Map13.FetchViewers( this, 1 );

					foreach (dynamic _a in Lang13.Enumerate( this._using )) {
						M = _a;
						

						if ( !Lang13.Bool( M ) || !Lang13.Bool( M.client ) || M.machine != this ) {
							this._using.Remove( M );
							continue;
						}

						if ( nearby.Contains( !Lang13.Bool( M ) ) ) {
							
							if ( M is Mob_Living_Silicon_Ai || M is Mob_Living_Silicon_Robot ) {
								is_in_use = true;
								this.attack_ai( M );
							}

							if ( Lang13.Bool( M.mutations ) && M.mutations.len != 0 ) {
								
								if ( Lang13.Bool( M.mutations.Contains( 1 ) ) ) {
									is_in_use = true;
									this.attack_hand( M, GlobalVars.TRUE );
								}
							} else {
								this._using.Remove( M );
								continue;
							}
						} else {
							is_in_use = true;
							this.attack_hand( M, GlobalVars.TRUE );
						}
					}
				}
				this.in_use = is_in_use;
			}
			return;
		}

		// Function from file: objs.dm
		public dynamic handle_internal_lifeform( dynamic lifeform_inside_me = null, bool breath_request = false ) {
			
			if ( ( breath_request ?1:0) > 0 ) {
				return this.remove_air( breath_request );
			} else {
				return null;
			}
		}

		// Function from file: objs.dm
		public virtual dynamic process(  ) {
			GlobalVars.processing_objects.Remove( this );
			return null;
		}

		// Function from file: objs.dm
		public virtual double? is_hot(  ) {
			return this.heat_production;
		}

		// Function from file: objs.dm
		public virtual dynamic is_sharp(  ) {
			return this.sharpness;
		}

		// Function from file: objs.dm
		public virtual dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: objs.dm
		public bool is_conductor( double? siemens_min = null ) {
			siemens_min = siemens_min ?? 0.5;

			
			if ( Convert.ToDouble( this.siemens_coefficient ) >= ( siemens_min ??0) ) {
				return true;
			}
			return false;
		}

		// Function from file: access.dm
		public bool check_access_list( ByTable L = null ) {
			dynamic req = null;
			dynamic req2 = null;

			this.set_up_access();

			if ( !Lang13.Bool( this.req_access ) && !Lang13.Bool( this.req_one_access ) ) {
				return true;
			}

			if ( !( this.req_access is ByTable ) ) {
				return true;
			}

			if ( !( this.req_access.len != 0 ) && ( !Lang13.Bool( this.req_one_access ) || !( this.req_one_access.len != 0 ) ) ) {
				return true;
			}

			if ( !( L != null ) ) {
				return false;
			}

			if ( !( L is ByTable ) ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.req_access )) {
				req = _a;
				

				if ( !L.Contains( req ) ) {
					return false;
				}
			}

			if ( Lang13.Bool( this.req_one_access ) && this.req_one_access.len != 0 ) {
				
				foreach (dynamic _b in Lang13.Enumerate( this.req_one_access )) {
					req2 = _b;
					

					if ( L.Contains( req2 ) ) {
						return true;
					}
				}
				return false;
			}
			return true;
		}

		// Function from file: access.dm
		public virtual bool check_access( dynamic I = null, ByTable access_list = null ) {
			dynamic ACL = null;

			this.set_up_access();
			ACL = new ByTable();

			if ( Lang13.Bool( I ) ) {
				ACL = I.GetAccess();
			}
			return GlobalFuncs.can_access( ACL, this.req_access, this.req_one_access );
		}

		// Function from file: access.dm
		public void set_up_access(  ) {
			ByTable req_access_str = null;
			dynamic x = null;
			double? n = null;
			ByTable req_one_access_str = null;
			dynamic x2 = null;
			double? n2 = null;

			
			if ( !Lang13.Bool( this.req_access ) ) {
				this.req_access = new ByTable();

				if ( Lang13.Bool( this.req_access_txt ) ) {
					req_access_str = GlobalFuncs.text2list( this.req_access_txt, ";" );

					foreach (dynamic _a in Lang13.Enumerate( req_access_str )) {
						x = _a;
						
						n = String13.ParseNumber( x );

						if ( Lang13.Bool( n ) ) {
							this.req_access += n;
						}
					}
				}
			}

			if ( !Lang13.Bool( this.req_one_access ) ) {
				this.req_one_access = new ByTable();

				if ( Lang13.Bool( this.req_one_access_txt ) ) {
					req_one_access_str = GlobalFuncs.text2list( this.req_one_access_txt, ";" );

					foreach (dynamic _b in Lang13.Enumerate( req_one_access_str )) {
						x2 = _b;
						
						n2 = String13.ParseNumber( x2 );

						if ( Lang13.Bool( n2 ) ) {
							this.req_one_access += n2;
						}
					}
				}
			}
			return;
		}

		// Function from file: access.dm
		public virtual bool allowed( dynamic M = null ) {
			dynamic ACL = null;

			this.set_up_access();

			if ( !Lang13.Bool( M ) || !( M is Mob ) ) {
				return false;
			}

			if ( ((Mob)M).hasFullAccess() ) {
				return true;
			}
			ACL = M.GetAccess();
			return GlobalFuncs.can_access( ACL, this.req_access, this.req_one_access );
		}

		// Function from file: skincmd.dm
		public void SkinCmd( Mob user = null, string data = null ) {
			return;
		}

		// Function from file: communications.dm
		public virtual bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			return false;
		}

		// Function from file: telekinesis.dm
		public override void attack_tk( Mob user = null ) {
			Obj_Item_TkGrab O = null;

			
			if ( Lang13.Bool( user.stat ) ) {
				return;
			}

			if ( Lang13.Bool( this.anchored ) ) {
				base.attack_tk( user );
				return;
			}
			O = new Obj_Item_TkGrab( this );
			user.put_in_active_hand( O );
			O.host = user;
			O.focus_object( this );
			return;
		}

	}

}