// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Library_Public : Obj_Machinery_Computer_Library {

		public Obj_Machinery_Computer_Library_Public ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: public.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? pn = null;
			dynamic newtitle = null;
			dynamic newcategory = null;
			dynamic newauthor = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				Interface13.Browse( Task13.User, null, "window=publiclibrary" );
				GlobalFuncs.onclose( Task13.User, "publiclibrary" );
				return null;
			}

			if ( Lang13.Bool( href_list["pagenum"] ) ) {
				
				if ( !Lang13.Bool( this.num_pages ) ) {
					this.page_num = 0;
				} else {
					pn = String13.ParseNumber( href_list["pagenum"] );

					if ( !( pn == null ) ) {
						this.page_num = ( ( pn ??0) <= 0 ? 0 : ( ( pn ??0) >= ( this.num_pages ??0) ? this.num_pages : pn ) );
					}
				}
			}

			if ( Lang13.Bool( href_list["settitle"] ) ) {
				newtitle = Interface13.Input( "Enter a title to search for:", null, null, null, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( newtitle ) ) {
					this.query.title = GlobalFuncs.sanitize( newtitle );
				} else {
					this.query.title = null;
				}
			}

			if ( Lang13.Bool( href_list["setcategory"] ) ) {
				newcategory = Interface13.Input( "Choose a category to search for:", null, null, null, new ByTable(new object [] { "Any" }) + GlobalVars.library_section_names, InputType.Any );

				if ( Lang13.Bool( newcategory ) ) {
					this.query.category = GlobalFuncs.sanitize( newcategory );
				} else if ( newcategory == "Any" ) {
					this.query.category = null;
				}
			}

			if ( Lang13.Bool( href_list["setauthor"] ) ) {
				newauthor = Interface13.Input( "Enter an author to search for:", null, null, null, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( newauthor ) ) {
					this.query.author = GlobalFuncs.sanitize( newauthor );
				} else {
					this.query.author = null;
				}
			}

			if ( Lang13.Bool( href_list["page"] ) ) {
				
				if ( this.num_pages == 0 ) {
					this.page_num = 0;
				} else {
					this.page_num = ( ( String13.ParseNumber( href_list["page"] ) ??0) <= 0 ? 0 : ( ( String13.ParseNumber( href_list["page"] ) ??0) >= ( this.num_pages ??0) ? this.num_pages : String13.ParseNumber( href_list["page"] ) ) );
				}
			}

			if ( Lang13.Bool( href_list["search"] ) ) {
				this.num_results = this.get_num_results();
				this.num_pages = GlobalFuncs.Ceiling( ( this.num_results ??0) / 25 );
				this.page_num = 0;
				this.screenstate = 1;
			}

			if ( Lang13.Bool( href_list["back"] ) ) {
				this.screenstate = 0;
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: public.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			string pagelist = null;
			Cachedbook CB = null;
			Browser_Clean B = null;

			
			if ( this.interact_check( user ) == true ) {
				return null;
			}
			dat = "";

			switch ((int)( this.screenstate )) {
				case 0:
					dat += new Txt( "<h2>Search Settings</h2><br />\n				<A href='?src=" ).Ref( this ).str( ";settitle=1'>Filter by Title: " ).item( this.query.title ).str( "</A><br />\n				<A href='?src=" ).Ref( this ).str( ";setcategory=1'>Filter by Category: " ).item( this.query.category ).str( "</A><br />\n				<A href='?src=" ).Ref( this ).str( ";setauthor=1'>Filter by Author: " ).item( this.query.author ).str( "</A><br />\n				<A href='?src=" ).Ref( this ).str( ";search=1'>[Start Search]</A><br />" ).ToString();
					break;
				case 1:
					GlobalFuncs.establish_old_db_connection();

					if ( !GlobalVars.dbcon_old.IsConnected() ) {
						dat += "<font color=red><b>ERROR</b>: Unable to contact External Archive. Please contact your system administrator for assistance.</font><br />";
					} else if ( this.num_results == 0 ) {
						dat += "<em>No results found.</em>";
					} else {
						pagelist = this.get_pagelist();
						dat += pagelist;
						dat += new Txt( "<form name='pagenum' action='?src=" ).Ref( this ).str( "' method='get'>\n										<input type='hidden' name='src' value='" ).Ref( this ).str( "'>\n										<input type='text' name='pagenum' value='" ).item( this.page_num ).str( "' maxlength=\"5\" size=\"5\">\n										<input type='submit' value='Jump To Page'>\n							</form>" ).ToString();
						dat += @"<table border=""0"">
					<tr>
						<td>Author</td>
						<td>Title</td>
						<td>Category</td>
						<td>SS<sup>13</sup>BN</td>
					</tr>";

						foreach (dynamic _a in Lang13.Enumerate( this.get_page( this.page_num ), typeof(Cachedbook) )) {
							CB = _a;
							
							dat += "<tr>\n						<td>" + CB.author + "</td>\n						<td>" + CB.title + "</td>\n						<td>" + CB.category + "</td>\n						<td>" + CB.id + "</td>\n					</tr>";
						}
						dat += "</table><br />" + pagelist;
					}
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";back=1'>[Go Back]</A><br />" ).ToString();
					break;
			}
			B = new Browser_Clean( user, "library", "Library Visitor" );
			B.set_content( dat );
			B.open();
			return null;
		}

		// Function from file: public.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			this.interact( a );
			return null;
		}

	}

}