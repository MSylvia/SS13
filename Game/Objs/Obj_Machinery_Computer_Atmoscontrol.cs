// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Atmoscontrol : Obj_Machinery_Computer {

		public dynamic current = null;
		public ByTable filter = null;
		public bool overridden = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/atmoscontrol";
			this.req_one_access = new ByTable(new object [] { 56 });
			this.light_color = "#7DE1E1";
			this.icon_state = "tank";
		}

		// Function from file: atmos_control.dm
		public Obj_Machinery_Computer_Atmoscontrol ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.atmos_controllers.Or( this );
			return;
		}

		// Function from file: atmos_control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic device_id = null;
			dynamic val = null;
			dynamic newval = null;
			string env = null;
			double? threshold = null;
			dynamic selected = null;
			ByTable thresholds = null;
			dynamic newval2 = null;
			dynamic selected2 = null;
			int max_temperature = 0;
			int min_temperature = 0;
			dynamic input_temperature = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 0;
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				
				if ( Task13.User.machine == this ) {
					Task13.User.unset_machine();
				}
				return 1;
			}

			if ( Lang13.Bool( href_list["reset"] ) ) {
				this.current = null;
			}

			if ( Lang13.Bool( href_list["alarm"] ) ) {
				this.current = Lang13.FindObj( href_list["alarm"] );
				return 1;
			}

			if ( Lang13.Bool( this.current ) ) {
				
				if ( Lang13.Bool( href_list["command"] ) ) {
					device_id = href_list["id_tag"];

					dynamic _a = href_list["command"]; // Was a switch-case, sorry for the mess.
					if ( _a=="power" || _a=="adjust_external_pressure" || _a=="checks" || _a=="co2_scrub" || _a=="tox_scrub" || _a=="n2o_scrub" || _a=="o2_scrub" || _a=="n2_scrub" || _a=="panic_siphon" || _a=="scrubbing" ) {
						val = null;

						if ( Lang13.Bool( href_list["val"] ) ) {
							val = String13.ParseNumber( href_list["val"] );
						} else {
							newval = Interface13.Input( "Enter new value", null, null, null, null, InputType.Num | InputType.Null );

							if ( newval == null ) {
								return 0;
							}
							val = newval;
						}
						((Obj_Machinery_Alarm)this.current).send_signal( device_id, new ByTable().Set( href_list["command"], val ) );
						Task13.Schedule( 3, (Task13.Closure)(() => {
							return;
							return;
						}));
					} else if ( _a=="set_threshold" ) {
						env = href_list["env"];
						threshold = String13.ParseNumber( href_list["var"] );
						selected = this.current.TLV[env];
						thresholds = new ByTable(new object [] { "lower bound", "low warning", "high warning", "upper bound" });
						newval2 = Interface13.Input( "Enter " + thresholds[threshold] + " for " + env, "Alarm triggers", selected[threshold], null, null, InputType.Num | InputType.Null );

						if ( newval2 == null || Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) || Lang13.Bool( this.current.locked ) && Task13.User is Mob_Living_Silicon ) {
							return 0;
						}

						if ( Convert.ToDouble( newval2 ) < 0 ) {
							selected[threshold] = -1;
						} else if ( env == "temperature" && Convert.ToDouble( newval2 ) > 5000 ) {
							selected[threshold] = 5000;
						} else if ( env == "pressure" && Convert.ToDouble( newval2 ) > 5066.25 ) {
							selected[threshold] = 5066.25;
						} else if ( env != "temperature" && env != "pressure" && Convert.ToDouble( newval2 ) > 200 ) {
							selected[threshold] = 200;
						} else {
							newval2 = Num13.Round( Convert.ToDouble( newval2 ), 0.01 );
							selected[threshold] = newval2;
						}

						if ( threshold == 1 ) {
							
							if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[2] ) ) {
								selected[2] = selected[1];
							}

							if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[3] ) ) {
								selected[3] = selected[1];
							}

							if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[4] ) ) {
								selected[4] = selected[1];
							}
						}

						if ( threshold == 2 ) {
							
							if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[2] ) ) {
								selected[1] = selected[2];
							}

							if ( Convert.ToDouble( selected[2] ) > Convert.ToDouble( selected[3] ) ) {
								selected[3] = selected[2];
							}

							if ( Convert.ToDouble( selected[2] ) > Convert.ToDouble( selected[4] ) ) {
								selected[4] = selected[2];
							}
						}

						if ( threshold == 3 ) {
							
							if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[3] ) ) {
								selected[1] = selected[3];
							}

							if ( Convert.ToDouble( selected[2] ) > Convert.ToDouble( selected[3] ) ) {
								selected[2] = selected[3];
							}

							if ( Convert.ToDouble( selected[3] ) > Convert.ToDouble( selected[4] ) ) {
								selected[4] = selected[3];
							}
						}

						if ( threshold == 4 ) {
							
							if ( Convert.ToDouble( selected[1] ) > Convert.ToDouble( selected[4] ) ) {
								selected[1] = selected[4];
							}

							if ( Convert.ToDouble( selected[2] ) > Convert.ToDouble( selected[4] ) ) {
								selected[2] = selected[4];
							}

							if ( Convert.ToDouble( selected[3] ) > Convert.ToDouble( selected[4] ) ) {
								selected[3] = selected[4];
							}
						}

						if ( env == "temperature" ) {
							
							if ( Convert.ToDouble( this.current.target_temperature ) < Convert.ToDouble( selected[2] ) ) {
								this.current.target_temperature = selected[2];
							}

							if ( Convert.ToDouble( this.current.target_temperature ) > Convert.ToDouble( selected[3] ) ) {
								this.current.target_temperature = selected[3];
							}
						}
						Task13.Schedule( 1, (Task13.Closure)(() => {
							return;
							return;
						}));
					}
					return 0;
				}

				if ( Lang13.Bool( href_list["screen"] ) ) {
					this.current.screen = String13.ParseNumber( href_list["screen"] );
					return 1;
				}

				if ( Lang13.Bool( href_list["atmos_unlock"] ) ) {
					
					dynamic _b = href_list["atmos_unlock"]; // Was a switch-case, sorry for the mess.
					if ( _b=="0" ) {
						((Obj_Machinery_Alarm)this.current).air_doors_close( true );
					} else if ( _b=="1" ) {
						((Obj_Machinery_Alarm)this.current).air_doors_open( true );
					}
				}

				if ( Lang13.Bool( href_list["atmos_alarm"] ) ) {
					this.current.alarmActivated = true;
					((Zone)this.current.areaMaster).updateDangerLevel();
					this.current.update_icon();
					return 1;
				}

				if ( Lang13.Bool( href_list["atmos_reset"] ) ) {
					this.current.alarmActivated = false;
					((Zone)this.current.areaMaster).updateDangerLevel();
					this.current.update_icon();
					return 1;
				}

				if ( Lang13.Bool( href_list["mode"] ) ) {
					this.current.mode = String13.ParseNumber( href_list["mode"] );
					((Obj_Machinery_Alarm)this.current).apply_mode();
					return 1;
				}

				if ( Lang13.Bool( href_list["preset"] ) ) {
					this.current.preset = String13.ParseNumber( href_list["preset"] );
					((Obj_Machinery_Alarm)this.current).apply_preset();
					return 1;
				}

				if ( Lang13.Bool( href_list["temperature"] ) ) {
					selected2 = this.current.TLV["temperature"];
					max_temperature = Num13.MinInt( Convert.ToInt32( selected2[3] - 273.41 ), 90 );
					min_temperature = Num13.MaxInt( Convert.ToInt32( selected2[2] - 273.41 ), -40 );
					input_temperature = Interface13.Input( "What temperature would you like the system to maintain? (Capped between " + min_temperature + "C and " + max_temperature + "C)", "Thermostat Controls", null, null, null, InputType.Num | InputType.Null );

					if ( input_temperature == null ) {
						return 0;
					}

					if ( Convert.ToDouble( input_temperature ) > max_temperature || Convert.ToDouble( input_temperature ) < min_temperature ) {
						GlobalFuncs.to_chat( Task13.User, "Temperature must be between " + min_temperature + "C and " + max_temperature + "C" );
					} else {
						this.current.target_temperature = input_temperature + 273.41;
					}
					return 1;
				}
			}
			return 1;
		}

		// Function from file: atmos_control.dm
		public bool is_in_filter( Type typepath = null ) {
			
			if ( !( this.filter != null ) ) {
				return true;
			}
			return this.filter.Contains( typepath );
		}

		// Function from file: atmos_control.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;
			ByTable alarms = null;
			Obj_Machinery_Alarm alarm = null;
			dynamic pos = null;
			ByTable alarm_data = null;

			
			if ( Lang13.Bool( user.stat ) && !( user is Mob_Dead_Observer ) ) {
				return;
			}
			data = new ByTable( 0 );
			data["alarm"] = null;

			if ( Lang13.Bool( this.current ) ) {
				data.Add( ((Obj_Machinery_Alarm)this.current).get_nano_data( user, GlobalVars.TRUE ) );
				data["alarm"] = new Txt().Ref( this.current ).ToString();
			}
			alarms = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortNames( GlobalVars.machines ), typeof(Obj_Machinery_Alarm) )) {
				alarm = _a;
				

				if ( !this.is_in_filter( alarm.areaMaster.type ) ) {
					continue;
				}
				pos = GlobalFuncs.get_turf( alarm );
				alarm_data = new ByTable();
				alarm_data["ID"] = new Txt().Ref( alarm ).ToString();
				alarm_data["danger"] = Num13.MaxInt( alarm.local_danger_level, alarm.areaMaster.atmosalm - 1 );
				alarm_data["name"] = "" + alarm;
				alarm_data["area"] = GlobalFuncs.get_area( alarm );
				alarm_data["x"] = pos.x;
				alarm_data["y"] = pos.y;
				alarm_data["z"] = pos.z;
				alarms.Add( new ByTable(new object [] { alarm_data }) );
			}
			data["alarms"] = alarms;

			if ( !( ui != null ) ) {
				ui = GlobalVars.nanomanager.get_open_ui( user, this, ui_key );
			}

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "atmos_control.tmpl", this.name, 900, 800 );
				ui.add_template( "mapContent", "atmos_control_map_content.tmpl" );
				ui.add_template( "mapHeader", "atmos_control_map_header.tmpl" );
				ui.set_show_map( 1 );
				ui.set_initial_data( data );
				ui.open();

				if ( Lang13.Bool( this.current ) ) {
					ui.set_auto_update( true );
				}
			} else {
				ui.push_data( data );
				return;
			}
			return;
		}

		// Function from file: atmos_control.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Card_Emag && !( this.emagged != 0 ) ) {
				((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).The( b ).item().str( " swipes " ).a( a ).item().str( " through " ).the( this ).item().str( ", causing the screen to flash!</span>" ).ToString(), new Txt( "<span class='warning'>You swipe your " ).item( a ).str( " through " ).the( this ).item().str( ", the screen flashing as you gain full control.</span>" ).ToString(), "You hear the swipe of a card through a reader, and an electronic warble." );
				this.emagged = 1;
				this.overridden = true;
				return null;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: atmos_control.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			
			if ( this.allowed( user ) ) {
				this.overridden = true;
			} else if ( !( this.emagged != 0 ) ) {
				this.overridden = false;
			}
			this.ui_interact( user ); return null;
		}

		// Function from file: atmos_control.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			return this.interact( a );
		}

		// Function from file: atmos_control.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.interact( a );
		}

		// Function from file: atmos_control.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.interact( user );
		}

		// Function from file: atmos_control.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.atmos_controllers.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}