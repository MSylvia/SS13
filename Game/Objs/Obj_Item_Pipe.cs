// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Pipe : Obj_Item {

		public dynamic pipe_type = 0;
		public string pipename = null;
		public double? flipped = 0;
		public bool is_bent = false;
		public dynamic pipe_types = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 7;
			this.item_state = "buildpipe";
			this.icon = "icons/obj/atmospherics/pipes/pipe_item.dmi";
			this.icon_state = "simple";
		}

		// Function from file: construction.dm
		public Obj_Item_Pipe ( dynamic loc = null, dynamic pipe_type = null, double? dir = null, Obj_Machinery_Atmospherics make_from = null ) : base( (object)(loc) ) {
			dynamic P = null;
			Obj_Machinery_Atmospherics triP = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( make_from != null ) {
				this.dir = make_from.dir;
				this.pipename = make_from.name;
				this.color = make_from.color;

				if ( GlobalVars.pipe_types.Contains( make_from.type ) ) {
					this.pipe_type = make_from.type;
				} else {
					
					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.pipe_types )) {
						P = _a;
						

						if ( Lang13.Bool( P.IsInstanceOfType( make_from ) ) ) {
							this.pipe_type = P;
							break;
						}
					}
				}
				triP = make_from;

				if ( triP is Obj_Machinery_Atmospherics_Components_Trinary && Lang13.Bool( ((dynamic)triP).flipped ) ) {
					this.flipped = 1;
					this.dir = Num13.Rotate( this.dir, -45 );
				}
			} else {
				this.pipe_type = pipe_type;
				this.dir = ((int)( dir ??0 ));
			}

			if ( GlobalVars.diagonals.Contains( this.dir ) ) {
				this.is_bent = true;
			}
			this.update();
			this.pixel_x = Rand13.Int( -5, 5 );
			this.pixel_y = Rand13.Int( -5, 5 );
			return;
		}

		// Function from file: construction.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			Mob_Living_Carbon_Human C = null;
			double i = 0;
			Mob_Living_Carbon_Human H = null;

			
			if ( new ByTable(new object [] { 
				typeof(Obj_Machinery_Atmospherics_Components_Binary_Pump), 
				typeof(Obj_Machinery_Atmospherics_Components_Binary_PassiveGate), 
				typeof(Obj_Machinery_Atmospherics_Components_Binary_VolumePump)
			 }).Contains( this.pipe_type ) ) {
				user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " shoved the " ).item( this ).str( " in " ).his_her_its_their().str( " mouth and turned it on!  It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );

				if ( user is Mob_Living_Carbon ) {
					C = user;

					foreach (dynamic _a in Lang13.IterateRange( 1, 20 )) {
						i = _a;
						
						C.vomit( 0, true, false, 4, false );
						Task13.Sleep( 5 );
					}

					if ( user is Mob_Living_Carbon_Human ) {
						H = C;
						H.vessel.remove_reagent( "blood", 560 );
					}
				}
				return 9;
			} else {
				return base.suicide_act( user );
			}
		}

		// Function from file: construction.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic A2 = null;
			Obj_Machinery_Atmospherics M = null;
			dynamic T = null;

			
			if ( !( A is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}

			if ( !( this.loc is Tile ) ) {
				return 1;
			}
			this.fixdir();

			if ( new ByTable(new object [] { typeof(Obj_Machinery_Atmospherics_Components_Trinary_Mixer), typeof(Obj_Machinery_Atmospherics_Components_Trinary_Filter) }).Contains( this.pipe_type ) ) {
				this.dir = this.unflip( this.dir );
			}
			A2 = Lang13.Call( this.pipe_type, this.loc );
			A2.dir = this.dir;
			((Obj_Machinery_Atmospherics)A2).SetInitDirections();

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Machinery_Atmospherics) )) {
				M = _a;
				

				if ( M == A2 ) {
					continue;
				}

				if ( Lang13.Bool( M.GetInitDirections() & ((Obj_Machinery_Atmospherics)A2).GetInitDirections() ) ) {
					user.WriteMsg( "<span class='warning'>There is already a pipe at that location!</span>" );
					GlobalFuncs.qdel( A2 );
					return 1;
				}
			}

			if ( Lang13.Bool( this.pipename ) ) {
				A2.name = this.pipename;
			}
			T = A2;

			if ( T is Obj_Machinery_Atmospherics_Components_Trinary ) {
				T.flipped = this.flipped;
			}
			((Obj_Machinery)A2).construction( this.pipe_type, this.color );
			GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );
			((Ent_Static)user).visible_message( new Txt().item( user ).str( " fastens " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You fasten " ).the( this ).item().str( ".</span>" ).ToString(), "<span class='italics'>You hear ratchet.</span>" );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: construction.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			this.rotate(); return null;
		}

		// Function from file: construction.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			int old_dir = 0;

			old_dir = this.dir;
			base.Move( (object)(NewLoc), Dir, step_x, step_y );
			this.dir = old_dir;
			return false;
		}

		// Function from file: construction.dm
		public override bool AltClick( Mob user = null ) {
			base.AltClick( user );

			if ( user.incapacitated() ) {
				user.WriteMsg( "<span class='warning'>You can't do that right now!</span>" );
				return false;
			}

			if ( !( Map13.GetDistance( this, user ) <= 1 ) ) {
				return false;
			} else {
				this.__CallVerb("Rotate Pipe" );
			}
			return false;
		}

		// Function from file: construction.dm
		public void fixdir(  ) {
			
			if ( new ByTable(new object [] { 
				typeof(Obj_Machinery_Atmospherics_Pipe_Simple), 
				typeof(Obj_Machinery_Atmospherics_Pipe_HeatExchanging_Simple), 
				typeof(Obj_Machinery_Atmospherics_Components_Binary_Valve), 
				typeof(Obj_Machinery_Atmospherics_Components_Binary_Valve_Digital)
			 }).Contains( this.pipe_type ) && !this.is_bent ) {
				
				if ( this.dir == GlobalVars.SOUTH ) {
					this.dir = ((int)( GlobalVars.NORTH ));
				} else if ( this.dir == GlobalVars.WEST ) {
					this.dir = ((int)( GlobalVars.EAST ));
				}
			}
			return;
		}

		// Function from file: construction.dm
		public int unflip( int direction = 0 ) {
			
			if ( GlobalVars.diagonals.Contains( direction ) ) {
				return Num13.Rotate( direction, 45 );
			}
			return direction;
		}

		// Function from file: construction.dm
		public void update(  ) {
			ByTable nlist = null;

			nlist = new ByTable()
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_Simple), "pipe" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_Simple) + "_b", "bent pipe" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_Manifold), "manifold" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_Manifold4w), "4-way manifold" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_HeatExchanging_Simple), "h/e pipe" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_HeatExchanging_Simple) + "_b", "bent h/e pipe" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_HeatExchanging_Manifold), "h/e manifold" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_HeatExchanging_Manifold4w), "h/e 4-way manifold" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Pipe_HeatExchanging_Junction), "junction" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Unary_PortablesConnector), "connector" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Unary_VentPump), "vent" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Unary_VentScrubber), "scrubber" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Unary_HeatExchanger), "heat exchanger" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Binary_Pump), "pump" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Binary_PassiveGate), "passive gate" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Binary_VolumePump), "volume pump" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Binary_Valve), "manual valve" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Binary_Valve_Digital), "digital valve" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Trinary_Filter), "gas filter" )
				.Set( "" + typeof(Obj_Machinery_Atmospherics_Components_Trinary_Mixer), "gas mixer" )
			;
			this.name = nlist["" + this.pipe_type + ( this.is_bent ? "_b" : "" )] + " fitting";
			this.icon_state = GlobalVars.pipeID2State["" + this.pipe_type];
			return;
		}

		// Function from file: construction.dm
		public override double examine( dynamic user = null ) {
			base.examine( (object)(user) );
			user.WriteMsg( "<span class='notice'>Alt-click to rotate it clockwise.</span>" );
			return 0;
		}

		// Function from file: construction.dm
		[Verb]
		[VerbInfo( name: "Flip Pipe", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void flip(  ) {
			
			if ( Task13.User.stat != 0 || Task13.User.restrained() || !Task13.User.canmove ) {
				return;
			}

			if ( new ByTable(new object [] { typeof(Obj_Machinery_Atmospherics_Components_Trinary_Filter), typeof(Obj_Machinery_Atmospherics_Components_Trinary_Mixer) }).Contains( this.pipe_type ) ) {
				this.dir = Num13.Rotate( this.dir, ( Lang13.Bool( this.flipped ) ? 45 : -45 ) );
				this.flipped = !Lang13.Bool( this.flipped ) ?1:0;
				return;
			}
			this.dir = Num13.Rotate( this.dir, -180 );
			this.fixdir();
			return;
		}

		// Function from file: construction.dm
		[Verb]
		[VerbInfo( name: "Rotate Pipe", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate(  ) {
			
			if ( Task13.User.stat != 0 || Task13.User.restrained() || !Task13.User.canmove ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, -90 );
			this.fixdir();
			return;
		}

	}

}