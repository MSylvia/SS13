// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Pipe : Obj_Item {

		public int pipe_type = 0;
		public string pipename = null;
		public int? piping_layer = 3;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 7;
			this.item_state = "buildpipe";
			this.icon = "icons/obj/pipe-item.dmi";
			this.icon_state = "simple";
		}

		// Function from file: construction.dm
		public Obj_Item_Pipe ( dynamic loc = null, dynamic pipe_type = null, dynamic dir = null, Obj_Machinery_Atmospherics make_from = null ) : base( (object)(loc) ) {
			bool is_bent = false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( make_from != null ) {
				this.dir = make_from.dir;
				this.pipename = make_from.name;

				if ( GlobalVars.bent_dirs.Contains( make_from.initialize_directions ) ) {
					is_bent = false;
				} else {
					is_bent = true;
				}

				if ( make_from is Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging_Junction ) {
					this.pipe_type = 6;
				} else if ( make_from is Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging ) {
					this.pipe_type = ( is_bent ?1:0) + 2;
				} else if ( make_from is Obj_Machinery_Atmospherics_Pipe_Simple_Insulated ) {
					this.pipe_type = ( is_bent ?1:0) + 11;
				} else if ( make_from is Obj_Machinery_Atmospherics_Pipe_Simple ) {
					this.pipe_type = is_bent ?1:0;
				} else if ( make_from is Obj_Machinery_Atmospherics_Unary_PortablesConnector ) {
					this.pipe_type = 4;
				} else if ( make_from is Obj_Machinery_Atmospherics_Pipe_Manifold ) {
					
					if ( make_from is Obj_Machinery_Atmospherics_Pipe_Manifold_Insulated ) {
						this.pipe_type = 27;
					} else {
						this.pipe_type = 5;
					}
				} else if ( make_from is Obj_Machinery_Atmospherics_Pipe_LayerManifold ) {
					this.pipe_type = 29;
				} else if ( make_from is Obj_Machinery_Atmospherics_Unary_VentPump ) {
					this.pipe_type = 7;
				} else if ( make_from is Obj_Machinery_Atmospherics_Binary_Valve_Digital ) {
					this.pipe_type = 18;
				} else if ( make_from is Obj_Machinery_Atmospherics_Binary_Valve ) {
					this.pipe_type = 8;
				} else if ( make_from is Obj_Machinery_Atmospherics_Binary_Pump ) {
					this.pipe_type = 9;
				} else if ( make_from is Obj_Machinery_Atmospherics_Trinary_Filter ) {
					this.pipe_type = 13;

					if ( make_from is Obj_Machinery_Atmospherics_Trinary_Filter_Mirrored ) {
						this.dir = Num13.Rotate( this.dir, 45 );
					}
				} else if ( make_from is Obj_Machinery_Atmospherics_Trinary_Mixer ) {
					this.pipe_type = 14;

					if ( make_from is Obj_Machinery_Atmospherics_Trinary_Mixer_Mirrored ) {
						this.dir = Num13.Rotate( this.dir, 45 );
					}
				} else if ( make_from is Obj_Machinery_Atmospherics_Unary_VentScrubber ) {
					this.pipe_type = 10;
				} else if ( make_from is Obj_Machinery_Atmospherics_Binary_PassiveGate ) {
					this.pipe_type = 15;
				} else if ( make_from is Obj_Machinery_Atmospherics_Binary_VolumePump ) {
					this.pipe_type = 16;
				} else if ( make_from is Obj_Machinery_Atmospherics_Unary_HeatExchanger ) {
					this.pipe_type = 17;
				} else if ( make_from is Obj_Machinery_Atmospherics_Trinary_Tvalve ) {
					
					if ( make_from is Obj_Machinery_Atmospherics_Trinary_Tvalve_Digital ) {
						this.pipe_type = 26;
					} else {
						this.pipe_type = 19;
					}

					if ( make_from is Obj_Machinery_Atmospherics_Trinary_Tvalve_Mirrored || make_from is Obj_Machinery_Atmospherics_Trinary_Tvalve_Digital_Mirrored ) {
						this.dir = Num13.Rotate( this.dir, 45 );
					}
				} else if ( make_from is Obj_Machinery_Atmospherics_Pipe_Manifold4w ) {
					
					if ( make_from is Obj_Machinery_Atmospherics_Pipe_Manifold4w_Insulated ) {
						this.pipe_type = 28;
					} else {
						this.pipe_type = 20;
					}
				} else if ( make_from is Obj_Machinery_Atmospherics_Unary_Cap ) {
					this.pipe_type = 21;
				} else if ( make_from is Obj_Machinery_Atmospherics_Unary_ThermalPlate ) {
					this.pipe_type = 22;
				} else if ( make_from is Obj_Machinery_Atmospherics_Unary_OutletInjector ) {
					this.pipe_type = 23;
				} else if ( make_from is Obj_Machinery_Atmospherics_Binary_DpVentPump ) {
					this.pipe_type = 24;
				} else if ( make_from is Obj_Machinery_Atmospherics_Unary_Vent ) {
					this.pipe_type = 25;
				} else if ( make_from is Obj_Machinery_Atmospherics_Pipe_LayerAdapter ) {
					this.pipe_type = 30;
				}
				this.setPipingLayer( make_from.piping_layer );
			} else {
				this.pipe_type = Convert.ToInt32( pipe_type );
				this.dir = Convert.ToInt32( dir );
			}
			this.update();
			return;
		}

		// Function from file: construction.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			int pipe_dir = 0;
			Obj_Machinery_Atmospherics M = null;
			Obj_Machinery_Atmospherics P = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( !( a is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}

			if ( !( this.loc is Tile ) ) {
				return 1;
			}

			if ( GlobalVars.straight_pipes.Contains( this.pipe_type ) ) {
				this.dir = ((int)( GlobalFuncs.rotate_pipe_straight( this.dir ) ??0 ));
			} else if ( GlobalVars.manifold_pipes.Contains( this.pipe_type ) ) {
				this.dir = 2;
			}
			pipe_dir = this.get_pipe_dir();

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Machinery_Atmospherics) )) {
				M = _a;
				

				if ( M.piping_layer != this.piping_layer && !( ( M.pipe_flags & 2 ) != 0 || GlobalVars.unstackable_pipes.Contains( this.pipe_type ) ) ) {
					continue;
				}

				if ( ( ((int)( M.initialize_directions ??0 )) & pipe_dir ) != 0 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>There is already a pipe at that location.</span>" );
					return 1;
				}
			}
			P = null;

			switch ((int)( this.pipe_type )) {
				case 0:
				case 1:
					P = new Obj_Machinery_Atmospherics_Pipe_Simple( this.loc );
					break;
				case 2:
				case 3:
					P = new Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging( this.loc );
					this.investigation_log( "atmos", "was created by " + b + "/(" + b.ckey + ") at " + GlobalFuncs.formatJumpTo( this.loc ) + "." );
					break;
				case 4:
					P = new Obj_Machinery_Atmospherics_Unary_PortablesConnector( this.loc );
					break;
				case 5:
					P = new Obj_Machinery_Atmospherics_Pipe_Manifold( this.loc );
					break;
				case 20:
					P = new Obj_Machinery_Atmospherics_Pipe_Manifold4w( this.loc );
					break;
				case 6:
					P = new Obj_Machinery_Atmospherics_Pipe_Simple_HeatExchanging_Junction( this.loc );
					this.investigation_log( "atmos", "was created by " + b + "/(" + b.ckey + ") at " + GlobalFuncs.formatJumpTo( this.loc ) + "." );
					break;
				case 7:
					P = new Obj_Machinery_Atmospherics_Unary_VentPump( this.loc );
					break;
				case 8:
					P = new Obj_Machinery_Atmospherics_Binary_Valve( this.loc );
					break;
				case 18:
					P = new Obj_Machinery_Atmospherics_Binary_Valve_Digital( this.loc );
					break;
				case 9:
					P = new Obj_Machinery_Atmospherics_Binary_Pump( this.loc );
					break;
				case 13:
					P = new Obj_Machinery_Atmospherics_Trinary_Filter( this.loc );
					break;
				case 14:
					P = new Obj_Machinery_Atmospherics_Trinary_Mixer( this.loc );
					break;
				case 10:
					P = new Obj_Machinery_Atmospherics_Unary_VentScrubber( this.loc );
					break;
				case 11:
				case 12:
					P = new Obj_Machinery_Atmospherics_Pipe_Simple_Insulated( this.loc );
					break;
				case 19:
					P = new Obj_Machinery_Atmospherics_Trinary_Tvalve( this.loc );
					break;
				case 21:
					P = new Obj_Machinery_Atmospherics_Unary_Cap( this.loc );
					break;
				case 15:
					P = new Obj_Machinery_Atmospherics_Binary_PassiveGate( this.loc );
					break;
				case 16:
					P = new Obj_Machinery_Atmospherics_Binary_VolumePump( this.loc );
					break;
				case 17:
					P = new Obj_Machinery_Atmospherics_Unary_HeatExchanger( this.loc );
					break;
				case 22:
					P = new Obj_Machinery_Atmospherics_Unary_ThermalPlate( this.loc );
					break;
				case 23:
					P = new Obj_Machinery_Atmospherics_Unary_OutletInjector( this.loc );
					break;
				case 24:
					P = new Obj_Machinery_Atmospherics_Binary_DpVentPump( this.loc );
					break;
				case 25:
					P = new Obj_Machinery_Atmospherics_Unary_Vent( this.loc );
					break;
				case 26:
					P = new Obj_Machinery_Atmospherics_Trinary_Tvalve_Digital( this.loc );
					break;
				case 27:
					P = new Obj_Machinery_Atmospherics_Pipe_Manifold_Insulated( this.loc );
					break;
				case 28:
					P = new Obj_Machinery_Atmospherics_Pipe_Manifold4w_Insulated( this.loc );
					break;
				case 29:
					P = new Obj_Machinery_Atmospherics_Pipe_LayerManifold( this.loc );
					break;
				case 30:
					Game13.log.WriteMsg( "## TESTING: " + ( "src.loc = " + this.loc ) );
					P = new Obj_Machinery_Atmospherics_Pipe_LayerAdapter( this.loc );
					break;
			}
			P.setPipingLayer( this.piping_layer );

			if ( P.buildFrom( Task13.User, this ) == true ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 50, 1 );
				((Ent_Static)b).visible_message( new Txt().item( b ).str( " fastens " ).the( this ).item().str( "." ).ToString(), new Txt( "<span class='notice'>You have fastened " ).the( this ).item().str( ".</span>" ).ToString(), "You hear a ratchet." );
				GlobalFuncs.returnToPool( this );
				return 0;
			} else if ( P != null ) {
				GlobalFuncs.qdel( P );
				P = null;
			}
			return 1;
		}

		// Function from file: construction.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			return this.__CallVerb("Rotate Pipe" );
		}

		// Function from file: construction.dm
		public override bool Move( dynamic NewLoc = null, int? Dir = null, int step_x = 0, int step_y = 0 ) {
			base.Move( (object)(NewLoc), Dir, step_x, step_y );

			if ( GlobalVars.bent_pipes.Contains( this.pipe_type ) && GlobalVars.cardinal.Contains( this.dir ) ) {
				this.dir = this.dir | Num13.Rotate( this.dir, 90 );
			} else if ( GlobalVars.straight_pipes.Contains( this.pipe_type ) ) {
				this.dir = ((int)( GlobalFuncs.rotate_pipe_straight( this.dir ) ??0 ));
			}
			return false;
		}

		// Function from file: construction.dm
		public int get_hdir(  ) {
			
			switch ((int)( this.pipe_type )) {
				case 2:
					return this.get_pipe_dir();
					break;
				case 3:
					return this.get_pipe_dir();
					break;
				case 6:
					return this.dir;
					break;
				default:
					return 0;
					break;
			}
			return 0;
		}

		// Function from file: construction.dm
		public int get_pdir(  ) {
			int flip = 0;

			flip = Num13.Rotate( this.dir, 180 );

			if ( !GlobalVars.heat_pipes.Contains( this.pipe_type ) ) {
				return this.get_pipe_dir();
			}

			switch ((int)( this.pipe_type )) {
				case 2:
				case 3:
					return 0;
					break;
				case 6:
					return flip;
					break;
			}
			return 0;
		}

		// Function from file: construction.dm
		public int get_pipe_dir(  ) {
			int flip = 0;
			int cw = 0;
			int acw = 0;

			
			if ( !( this.dir != 0 ) ) {
				return 0;
			}
			flip = Num13.Rotate( this.dir, 180 );
			cw = Num13.Rotate( this.dir, -90 );
			acw = Num13.Rotate( this.dir, 90 );

			switch ((int)( this.pipe_type )) {
				case 0:
				case 11:
				case 2:
				case 6:
				case 9:
				case 16:
				case 15:
				case 8:
				case 18:
				case 24:
				case 29:
				case 30:
					return this.dir | flip;
					break;
				case 1:
				case 12:
				case 3:
					return this.dir;
					break;
				case 4:
				case 7:
				case 25:
				case 10:
				case 17:
				case 22:
				case 23:
					return this.dir;
					break;
				case 20:
				case 28:
					return this.dir | flip | cw | acw;
					break;
				case 5:
				case 27:
					return flip | cw | acw;
					break;
				case 13:
				case 14:
				case 19:
				case 26:
					return this.dir | flip | cw;
					break;
				case 21:
					return flip;
					break;
			}
			return 0;
		}

		// Function from file: construction.dm
		public void update(  ) {
			this.name = GlobalVars.nlist[this.pipe_type + 1] + " fitting";

			if ( this.pipe_type == 30 ) {
				this.icon_state = "adapter_" + this.piping_layer;
				this.icon = "icons/obj/atmospherics/pipe_adapter.dmi";
			} else {
				this.icon = "icons/obj/pipe-item.dmi";
				this.icon_state = GlobalVars.pipeID2State[this.pipe_type + 1];
			}
			return;
		}

		// Function from file: construction.dm
		public void setPipingLayer( int? new_layer = null ) {
			new_layer = new_layer ?? 3;

			this.piping_layer = new_layer;

			if ( this.pipe_type != 29 && this.pipe_type != 30 ) {
				this.pixel_x = ( ( this.piping_layer ??0) - 3 ) * 5;
				this.pixel_y = ( ( this.piping_layer ??0) - 3 ) * -5;
				this.layer = Convert.ToDouble( Lang13.Initial( this, "layer" ) + ( ( this.piping_layer ??0) - 3 ) * 0.05 );
			}
			return;
		}

		// Function from file: construction.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			GlobalFuncs.returnToPool( this );
			return 2;
		}

		// Function from file: construction.dm
		public override bool blob_act( dynamic severity = null ) {
			GlobalFuncs.returnToPool( this );
			return false;
		}

		// Function from file: construction.dm
		public override dynamic dropped( dynamic user = null ) {
			base.dropped( (object)(user) );

			if ( this.loc != null ) {
				this.setPipingLayer( this.piping_layer );
			}
			return null;
		}

		// Function from file: construction.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.returnToPool( this );
					break;
				case 2:
					
					if ( Rand13.PercentChance( 40 ) ) {
						GlobalFuncs.returnToPool( this );
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 10 ) ) {
						GlobalFuncs.returnToPool( this );
					}
					break;
			}
			return false;
		}

		// Function from file: construction.dm
		[Verb]
		[VerbInfo( name: "Rotate Pipe", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, -90 );

			if ( GlobalVars.straight_pipes.Contains( this.pipe_type ) ) {
				this.dir = ((int)( GlobalFuncs.rotate_pipe_straight( this.dir ) ??0 ));
			} else if ( GlobalVars.manifold_pipes.Contains( this.pipe_type ) ) {
				this.dir = 2;
			}
			return;
		}

	}

}