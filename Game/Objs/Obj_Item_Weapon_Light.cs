// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Light : Obj_Item_Weapon {

		public int status = 0;
		public string base_state = null;
		public bool switchcount = false;
		public bool rigged = false;
		public int brightness_range = 2;
		public int brightness_power = 1;
		public string brightness_color = null;
		public int cost = 2;
		public string fitting = "tube";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 2;
			this.throwforce = 5;
			this.w_class = 1;
			this.icon = "icons/obj/lighting.dmi";
		}

		// Function from file: lighting.dm
		public Obj_Item_Weapon_Light ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			switch ((string)( this.name )) {
				case "light tube":
					this.brightness_range = Rand13.Int( 6, 9 );
					break;
				case "light bulb":
					this.brightness_range = Rand13.Int( 4, 6 );
					break;
			}
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public override bool afterattack( dynamic A = null, dynamic user = null, bool? flag = null, dynamic _params = null, bool? struggle = null ) {
			
			if ( A is Obj_Machinery_Light ) {
				return false;
			}

			if ( user.a_intent != "hurt" ) {
				return false;
			}
			this.shatter();
			return false;
		}

		// Function from file: lighting.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic S = null;

			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( a is Obj_Item_Weapon_ReagentContainers_Syringe ) {
				S = a;
				GlobalFuncs.to_chat( b, "You inject the solution into the " + this + "." );

				if ( ((Reagents)S.reagents).has_reagent( "plasma", 5 ) ) {
					GlobalFuncs.log_admin( "LOG: " + b.name + " (" + b.ckey + ") injected a light with plasma, rigging it to explode." );
					GlobalFuncs.message_admins( "LOG: " + b.name + " (" + b.ckey + ") injected a light with plasma, rigging it to explode." );
					this.rigged = true;
				}
				((Reagents)S.reagents).clear_reagents();
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: lighting.dm
		public void shatter(  ) {
			
			if ( this.status == 0 || this.status == 3 ) {
				this.visible_message( "<span class='warning'>" + this.name + " shatters.</span>", "<span class='warning'>You hear a small glass object shatter.</span>" );
				this.status = 2;
				this.force = 5;
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/Glasshit.ogg", 75, 1 );
				this.update();
			}
			return;
		}

		// Function from file: lighting.dm
		public void update(  ) {
			
			switch ((int)( this.status )) {
				case 0:
					this.icon_state = this.base_state;
					this.desc = "A replacement " + this.name + ".";
					break;
				case 3:
					this.icon_state = "" + this.base_state + "-burned";
					this.desc = "A burnt-out " + this.name + ".";
					break;
				case 2:
					this.icon_state = "" + this.base_state + "-broken";
					this.desc = "A broken " + this.name + ".";
					break;
			}
			return;
		}

		// Function from file: lighting.dm
		public override dynamic throw_impact( dynamic hit_atom = null, dynamic speed = null, Mob user = null ) {
			base.throw_impact( (object)(hit_atom), (object)(speed), user );
			this.shatter();
			return null;
		}

	}

}