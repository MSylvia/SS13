// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Light : Obj_Item_Weapon {

		public int status = 0;
		public string base_state = null;
		public bool switchcount = false;
		public bool rigged = false;
		public int brightness = 2;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.force = 2;
			this.throwforce = 5;
			this.w_class = 1;
			this.materials = new ByTable().Set( "$metal", 60 );
			this.icon = "icons/obj/lighting.dmi";
		}

		// Function from file: lighting.dm
		public Obj_Item_Weapon_Light ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public override bool afterattack( dynamic target = null, dynamic user = null, bool? proximity_flag = null, string click_parameters = null ) {
			
			if ( !( proximity_flag == true ) ) {
				return false;
			}

			if ( target is Obj_Machinery_Light ) {
				return false;
			}

			if ( user.a_intent != "harm" ) {
				return false;
			}
			this.shatter();
			return false;
		}

		// Function from file: lighting.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic S = null;

			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );

			if ( A is Obj_Item_Weapon_ReagentContainers_Syringe ) {
				S = A;
				user.WriteMsg( new Txt( "<span class='notice'>You inject the solution into " ).the( this ).item().str( ".</span>" ).ToString() );

				if ( Lang13.Bool( ((Reagents)S.reagents).has_reagent( "plasma", 5 ) ) ) {
					this.rigged = true;
				}
				((Reagents)S.reagents).clear_reagents();
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: lighting.dm
		public void shatter(  ) {
			
			if ( this.status == 0 || this.status == 3 ) {
				this.visible_message( "<span class='danger'>" + this.name + " shatters.</span>", "<span class='italics'>You hear a small glass object shatter.</span>" );
				this.status = 2;
				this.force = 5;
				GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 75, 1 );
				this.update();
			}
			return;
		}

		// Function from file: lighting.dm
		public void update(  ) {
			
			switch ((int)( this.status )) {
				case 0:
					this.icon_state = this.base_state;
					this.desc = "A replacement " + this.name + ".";
					break;
				case 3:
					this.icon_state = "" + this.base_state + "-burned";
					this.desc = "A burnt-out " + this.name + ".";
					break;
				case 2:
					this.icon_state = "" + this.base_state + "-broken";
					this.desc = "A broken " + this.name + ".";
					break;
			}
			return;
		}

		// Function from file: lighting.dm
		public override bool throw_impact( dynamic target = null, Mob_Living_Carbon thrower = null ) {
			base.throw_impact( (object)(target), thrower );
			this.shatter();
			return false;
		}

	}

}