// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Shieldwallgen : Obj_Machinery {

		public int active = 0;
		public bool power = false;
		public bool steps = false;
		public bool last_check = false;
		public int check_delay = 10;
		public bool recalc = false;
		public bool locked = true;
		public bool destroyed = false;
		public dynamic attached = null;
		public double storedpower = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 17 });
			this.siemens_coefficient = 1;
			this.use_power = 0;
			this.machine_flags = 24;
			this.icon_state = "Shield_Gen";
		}

		public Obj_Machinery_Shieldwallgen ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: shieldgen.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			this.storedpower -= Convert.ToDouble( Proj.damage );
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return null;
		}

		// Function from file: shieldgen.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.cleanup( 1 );
			this.cleanup( 2 );
			this.cleanup( 4 );
			this.cleanup( 8 );
			this.attached = null;
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: shieldgen.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.allowed( b ) ) {
					this.locked = !this.locked;
					GlobalFuncs.to_chat( b, "Controls are now " + ( this.locked ? "locked." : "unlocked." ) );
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
			} else {
				this.add_fingerprint( b );
				this.visible_message( "<span class='warning'>The " + this.name + " has been hit with the " + a.name + " by " + b.name + "!</span>" );
			}
			return null;
		}

		// Function from file: shieldgen.dm
		public override dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			
			if ( GlobalFuncs.isAdminGhost( user ) ) {
				this.attack_hand( user );
			}
			return null;
		}

		// Function from file: shieldgen.dm
		public override int wrenchAnchor( dynamic user = null ) {
			
			if ( this.active != 0 ) {
				GlobalFuncs.to_chat( user, "Turn off the field generator first." );
				return 0;
			}

			if ( base.wrenchAnchor( (object)(user) ) != 0 ) {
				this.f_power();
				return 1;
			}
			return 0;
		}

		// Function from file: shieldgen.dm
		public override dynamic process(  ) {
			Task13.Schedule( 100, (Task13.Closure)(() => {
				this.f_power();

				if ( this.power ) {
					this.storedpower -= 50;
				}
				return;
			}));

			if ( this.storedpower >= 500 ) {
				this.storedpower = 500;
			}

			if ( this.storedpower <= 0 ) {
				this.storedpower = 0;
			}

			if ( this.active == 1 ) {
				
				if ( !Lang13.Bool( this.anchored ) ) {
					this.active = 0;
					return null;
				}
				Task13.Schedule( 1, (Task13.Closure)(() => {
					this.setup_field( 1 );
					return;
				}));
				Task13.Schedule( 2, (Task13.Closure)(() => {
					this.setup_field( 2 );
					return;
				}));
				Task13.Schedule( 3, (Task13.Closure)(() => {
					this.setup_field( 4 );
					return;
				}));
				Task13.Schedule( 4, (Task13.Closure)(() => {
					this.setup_field( 8 );
					return;
				}));
				this.active = 2;
			}

			if ( this.active == 1 ) {
				
				if ( !this.power ) {
					this.visible_message( "<span class='warning'>The " + this.name + " shuts down due to lack of power!</span>", "You hear heavy droning fade out" );
					this.icon_state = "Shield_Gen";
					this.active = 0;
					Task13.Schedule( 1, (Task13.Closure)(() => {
						this.cleanup( 1 );
						return;
					}));
					Task13.Schedule( 1, (Task13.Closure)(() => {
						this.cleanup( 2 );
						return;
					}));
					Task13.Schedule( 1, (Task13.Closure)(() => {
						this.cleanup( 4 );
						return;
					}));
					Task13.Schedule( 1, (Task13.Closure)(() => {
						this.cleanup( 8 );
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: shieldgen.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !Lang13.Bool( this.anchored ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>The shield generator needs to be firmly secured to the floor first.</span>" );
				return 1;
			}

			if ( this.locked && !( a is Mob_Living_Silicon ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>The controls are locked!</span>" );
				return 1;
			}

			if ( !this.power ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>The shield generator needs to be powered by wire underneath.</span>" );
				return 1;
			}

			if ( this.active != 0 ) {
				this.active = 0;
				this.icon_state = "Shield_Gen";
				((Ent_Static)a).visible_message( "" + a + " turned the shield generator off.", "You turn off the shield generator.", "You hear heavy droning fade out." );
				this.cleanup();
			} else {
				this.active = 1;
				this.icon_state = "Shield_Gen +a";
				((Ent_Static)a).visible_message( "" + a + " turned the shield generator on.", "You turn on the shield generator.", "You hear heavy droning." );
			}
			this.add_fingerprint( a );
			return null;
		}

		// Function from file: shieldgen.dm
		public void cleanup( int? NSEW = null ) {
			Ent_Static T = null;
			double dist = 0;
			Obj_Machinery_Shieldwall F = null;
			Obj_Machinery_Shieldwallgen G = null;

			T = this.loc;

			foreach (dynamic _c in Lang13.IterateRange( 0, 8 )) {
				dist = _c;
				
				T = Map13.GetStep( T, NSEW ??0 );

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Machinery_Shieldwall) )) {
					F = _a;
					
					GlobalFuncs.qdel( F );
				}

				foreach (dynamic _b in Lang13.Enumerate( T, typeof(Obj_Machinery_Shieldwallgen) )) {
					G = _b;
					

					if ( !( G.active != 0 ) ) {
						return;
					}
				}
			}
			return;
		}

		// Function from file: shieldgen.dm
		public void setup_field( int? NSEW = null ) {
			NSEW = NSEW ?? 0;

			Ent_Static T = null;
			Ent_Static T2 = null;
			dynamic G = null;
			int? steps = null;
			int? oNSEW = null;
			int? dist = null;
			int? dist2 = null;
			int field_dir = 0;
			Obj_Machinery_Shieldwall CF = null;

			T = this.loc;
			T2 = this.loc;
			steps = 0;
			oNSEW = 0;

			if ( !Lang13.Bool( NSEW ) ) {
				return;
			}

			if ( NSEW == 1 ) {
				oNSEW = 2;
			} else if ( NSEW == 2 ) {
				oNSEW = 1;
			} else if ( NSEW == 4 ) {
				oNSEW = 8;
			} else if ( NSEW == 8 ) {
				oNSEW = 4;
			}
			dist = null;
			dist = 0;

			while (( dist ??0) <= 9) {
				T = Map13.GetStep( T2, NSEW ??0 );
				T2 = T;
				steps += 1;

				if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Shieldwallgen), T ) ) ) {
					G = Lang13.FindIn( typeof(Obj_Machinery_Shieldwallgen), T );
					steps -= 1;

					if ( !Lang13.Bool( G.active ) ) {
						return;
					}
					((Obj_Machinery_Shieldwallgen)G).cleanup( oNSEW );
					break;
				}
				dist += 1;
			}

			if ( G == null ) {
				return;
			}
			T2 = this.loc;
			dist2 = null;
			dist2 = 0;

			while (( dist2 ??0) < ( steps ??0)) {
				field_dir = Map13.GetDistance( T2, Map13.GetStep( T2, NSEW ??0 ) );
				T = Map13.GetStep( T2, NSEW ??0 );
				T2 = T;
				CF = new Obj_Machinery_Shieldwall( this, G );
				CF.loc = T;
				CF.dir = field_dir;
				dist2 += 1;
			}
			return;
		}

		// Function from file: shieldgen.dm
		[VerbInfo( name: "power" )]
		public bool f_power(  ) {
			Ent_Static T = null;
			dynamic C = null;
			Powernet PN = null;
			int surplus = 0;
			int shieldload = 0;

			
			if ( !Lang13.Bool( this.anchored ) ) {
				this.power = false;
				return false;
			}
			T = this.loc;

			if ( !( T != null ) ) {
				return false;
			}
			C = ((dynamic)T).get_cable_node();

			if ( Lang13.Bool( C ) ) {
				PN = C.powernet;
			}

			if ( !( PN != null ) ) {
				this.power = false;
				return false;
			}
			surplus = Num13.MaxInt( ((int)( PN.avail - PN.load )), 0 );
			shieldload = Num13.MinInt( Rand13.Int( 50, 200 ), surplus );

			if ( shieldload == 0 && !( this.storedpower != 0 ) ) {
				this.power = false;
				return false;
			} else {
				this.power = true;

				if ( PN != null ) {
					this.storedpower += shieldload;
					PN.load += shieldload;
				}
			}
			return false;
		}

	}

}