// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Canister : Obj_Machinery_PortableAtmospherics {

		public double health = 100;
		public bool valve_open = false;
		public double release_pressure = 101.32499694824219;
		public string canister_color = "yellow";
		public dynamic old_color = 0;
		public bool can_label = true;
		public double filled = 0.5;
		public double? temperature_resistance = 1273.1500244140625;
		public string release_log = "";
		public bool busy = false;
		public bool status_overlays = false;
		public dynamic status_overlays_pressure = null;
		public dynamic status_overlays_other = null;
		public int overlay_status = 0;
		public string log = "";

		protected override void __FieldInit() {
			base.__FieldInit();

			this.siemens_coefficient = 1;
			this.pressure_resistance = 709.2749633789062;
			this.volume = 1000;
			this.starting_materials = new ByTable().Set( "$iron", 37500 );
			this.w_type = 4;
			this.melt_temperature = 1783.1500244140625;
			this.icon = "icons/obj/atmos.dmi";
			this.icon_state = "yellow";
		}

		// Function from file: canister.dm
		public Obj_Machinery_PortableAtmospherics_Canister ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.old_color = this.canister_color;
			return;
		}

		// Function from file: canister.dm
		public override bool handle_beams(  ) {
			Obj_Effect_Beam B = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.beams, typeof(Obj_Effect_Beam) )) {
				B = _a;
				
				this.apply_beam_damage( B );
			}
			this.healthcheck();
			return false;
		}

		// Function from file: canister.dm
		public override void beam_disconnect( Obj_Effect_Beam B = null ) {
			base.beam_disconnect( B );
			this.apply_beam_damage( B );
			this.last_beamchecks.Remove( new Txt().Ref( B ).ToString() );
			return;
		}

		// Function from file: canister.dm
		public override bool beam_connect( Obj_Effect_Beam B = null ) {
			base.beam_connect( B );
			this.last_beamchecks[new Txt().Ref( B ).ToString()] = Game13.time;
			return false;
		}

		// Function from file: canister.dm
		public override bool apply_beam_damage( Obj_Effect_Beam B = null ) {
			dynamic lastcheck = null;
			double damage = 0;

			lastcheck = this.last_beamchecks[new Txt().Ref( B ).ToString()];
			damage = ( Game13.time - Convert.ToDouble( lastcheck ) ) / 10 * ( B.get_damage() / 2 );
			this.health -= damage;
			this.last_beamchecks[new Txt().Ref( B ).ToString()] = Game13.time;
			return false;
		}

		// Function from file: canister.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			dynamic S = null;
			ByTable contents_l = null;
			string contents_str = null;
			dynamic S2 = null;
			double? diff = null;
			ByTable colors = null;
			dynamic label = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["toggle"] ) ) {
				S = Lang13.FindIn( typeof(Gas_SleepingAgent), this.air_contents.trace_gases );

				if ( this.valve_open ) {
					
					if ( Lang13.Bool( this.holding ) ) {
						this.investigation_log( "atmos", new Txt( "had its valve <b>closed</b> by " ).item( GlobalFuncs.key_name( Task13.User ) ).str( ", stopping transfer into " ).the( this.holding ).item().str( "." ).ToString() );
					} else {
						this.investigation_log( "atmos", "had its valve <b>closed</b> by " + GlobalFuncs.key_name( Task13.User ) + ", stopping transfer into the <font color='red'><b>air</b></font>" );
					}
				} else if ( Lang13.Bool( this.holding ) ) {
					this.investigation_log( "atmos", new Txt( "had its valve <b>OPENED</b> by " ).item( GlobalFuncs.key_name( Task13.User ) ).str( ", starting transfer into " ).the( this.holding ).item().ToString() );
				} else {
					contents_l = new ByTable();

					if ( Convert.ToDouble( this.air_contents.toxins ) > 0 ) {
						contents_l.Add( "<b><font color='red'>Plasma</font></b>" );
					}

					if ( Convert.ToDouble( this.air_contents.carbon_dioxide ) > 0 ) {
						contents_l.Add( "<b><font color='red'>CO<sub>2</sub></font></b>" );
					}

					if ( S is Gas_SleepingAgent ) {
						contents_l.Add( "N<sub>2</sub>O</font>" );
					}
					contents_str = GlobalFuncs.english_list( contents_l );
					this.investigation_log( "atmos", "had its valve <b>OPENED</b> by " + GlobalFuncs.key_name( Task13.User ) + ", starting transfer into the <font color='red'><b>air</b></font> (" + contents_str + ")" );

					if ( contents_l.len > 0 ) {
						GlobalFuncs.message_admins( "" + Task13.User.real_name + " (" + GlobalFuncs.formatPlayerPanel( Task13.User, Task13.User.ckey ) + ") opened a canister that contains " + contents_str + " at " + GlobalFuncs.formatJumpTo( this.loc ) + "!" );
						GlobalFuncs.log_admin( "" + Task13.User + "(" + String13.CKey( Task13.User.key ) + ") opened a canister that contains " + this.contents + " at " + this.loc.x + ", " + this.loc.y + ", " + this.loc.z );
					}
				}
				this.valve_open = !this.valve_open;
			}

			if ( Lang13.Bool( href_list["remove_tank"] ) ) {
				S2 = Lang13.FindIn( typeof(Gas_SleepingAgent), this.air_contents.trace_gases );

				if ( Lang13.Bool( this.holding ) ) {
					
					if ( this.valve_open ) {
						
						if ( Convert.ToDouble( this.air_contents.toxins ) > 0 || S2 is Gas_SleepingAgent ) {
							GlobalFuncs.message_admins( "" + Task13.User.real_name + " (" + GlobalFuncs.formatPlayerPanel( Task13.User, Task13.User.ckey ) + ") opened a canister that contains [" + ( Convert.ToDouble( this.air_contents.toxins ) > 0 ? "Toxins" : "" ) + " " + ( S2 is Gas_SleepingAgent ? " N2O" : "" ) + "] at " + GlobalFuncs.formatJumpTo( this.loc ) + "!" );
							GlobalFuncs.log_admin( "" + Task13.User + "(" + String13.CKey( Task13.User.key ) + ") opened a canister that contains [" + ( Convert.ToDouble( this.air_contents.toxins ) > 0 ? "Toxins" : "" ) + " " + ( S2 is Gas_SleepingAgent ? " N2O" : "" ) + "] at " + this.loc.x + ", " + this.loc.y + ", " + this.loc.z );
						}
					}

					if ( this.holding is Obj_Item_Weapon_Tank ) {
						this.holding.manipulated_by = Task13.User.real_name;
					}
					this.holding.loc = this.loc;
					this.holding = null;
				}
			}

			if ( Lang13.Bool( href_list["pressure_adj"] ) ) {
				diff = String13.ParseNumber( href_list["pressure_adj"] );

				if ( ( diff ??0) > 0 ) {
					this.release_pressure = Num13.MinInt( ((int)( 1013.25 )), ((int)( this.release_pressure + ( diff ??0) )) );
				} else {
					this.release_pressure = Num13.MaxInt( ((int)( 10.132499694824219 )), ((int)( this.release_pressure + ( diff ??0) )) );
				}
			}

			if ( Lang13.Bool( href_list["relabel"] ) ) {
				
				if ( this.can_label ) {
					colors = new ByTable().Set( "[N2O]", "redws" ).Set( "[N2]", "red" ).Set( "[O2]", "blue" ).Set( "[Plasma]", "orange" ).Set( "[CO2]", "black" ).Set( "[Air]", "grey" ).Set( "[CAUTION]", "yellow" );
					label = Interface13.Input( "Choose canister label", "Gas canister", null, null, colors, InputType.Null | InputType.Any );

					if ( Lang13.Bool( label ) ) {
						this.canister_color = colors[label];
						this.icon_state = colors[label];
						this.name = "Canister: " + label;
					}
				}
			}
			this.add_fingerprint( Task13.User );
			this.add_hiddenprint( Task13.User );
			this.update_icon();
			return 1;
		}

		// Function from file: canister.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;

			
			if ( this.destroyed || Lang13.Bool( this.gcDestroyed ) || !Lang13.Bool( GlobalFuncs.get_turf( this ) ) ) {
				
				if ( !( ui != null ) ) {
					ui = GlobalVars.nanomanager.get_open_ui( user, this, ui_key );
				}

				if ( ui != null ) {
					ui.close();
				}
				return;
			}
			data = new ByTable( 0 );
			data["name"] = this.name;
			data["canLabel"] = ( this.can_label ? true : false );
			data["portConnected"] = ( Lang13.Bool( this.connected_port ) ? true : false );
			data["tankPressure"] = Num13.Floor( Convert.ToDouble( ( Convert.ToDouble( this.air_contents.return_pressure() ) > 0 ? this.air_contents.return_pressure() : ((dynamic)( 0 )) ) ) );
			data["releasePressure"] = Num13.Floor( this.release_pressure );
			data["minReleasePressure"] = Num13.Floor( 10.132499694824219 );
			data["maxReleasePressure"] = Num13.Floor( 1013.25 );
			data["valveOpen"] = ( this.valve_open ? true : false );
			data["hasHoldingTank"] = ( Lang13.Bool( this.holding ) ? true : false );

			if ( Lang13.Bool( this.holding ) ) {
				data["holdingTank"] = new ByTable()
					.Set( "name", this.holding.name )
					.Set( "tankPressure", Num13.Floor( Convert.ToDouble( ( Convert.ToDouble( this.holding.air_contents.return_pressure() ) > 0 ? this.holding.air_contents.return_pressure() : ((dynamic)( 0 )) ) ) ) )
				;
			}
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "canister.tmpl", "Canister", 480, 400 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

		// Function from file: canister.dm
		public override dynamic attack_alien( Mob user = null ) {
			this.add_hiddenprint( user );
			this.health -= Rand13.Int( 15, 30 );
			user.visible_message( new Txt( "<span class='danger'>" ).The( user ).item().str( " slashes away at " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='danger'>You slash away at " ).the( this ).item().str( "!</span>" ).ToString() );
			user.delayNextAttack( 10 );
			this.investigation_log( "atmos", "<span style='danger'>was slashed at by alien " + GlobalFuncs.key_name( user ) + "</span>" );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/weapons/slice.ogg", 25, 1, -1 );
			this.healthcheck();
			return null;
		}

		// Function from file: canister.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.ui_interact( a ); return null;
		}

		// Function from file: canister.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: canister.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: canister.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Game_Data M = null;
			dynamic thejetpack = null;
			dynamic env_pressure = null;
			int pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;

			
			if ( a is Obj_Item_Weapon_Weldingtool && this.destroyed ) {
				
				if ( this.weld( a, b ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You salvage what's left of " ).the( this ).item().str( ".</span>" ).ToString() );
					M = GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Metal), GlobalFuncs.get_turf( this ) );
					((dynamic)M).amount = 3;
					GlobalFuncs.qdel( this );
				}
				return null;
			}

			if ( !( a is Obj_Item_Weapon_Wrench ) && !( a is Obj_Item_Weapon_Tank ) && !( a is Obj_Item_Device_Analyzer ) && !( a is Obj_Item_Device_Pda ) ) {
				this.visible_message( "<span class='warning'>" + b + " hits the " + this + " with a " + a + "!</span>" );
				this.investigation_log( "atmos", new Txt( "<span style='danger'>was smacked with " ).a( a ).item().str( " by " ).item( GlobalFuncs.key_name( b ) ).str( "</span>" ).ToString() );
				this.health -= Convert.ToDouble( a.force );
				this.add_fingerprint( b );
				this.healthcheck();
			}

			if ( b is Mob_Living_Silicon_Robot && a is Obj_Item_Weapon_Tank_Jetpack ) {
				thejetpack = a.air_contents;
				env_pressure = thejetpack.return_pressure();
				pressure_delta = Num13.MinInt( ((int)( 1013.25 - Convert.ToDouble( env_pressure ) )), Convert.ToInt32( ( this.air_contents.return_pressure() - env_pressure ) / 2 ) );
				transfer_moles = 0;

				if ( ( this.air_contents.temperature ??0) > 0 && pressure_delta > 0 ) {
					transfer_moles = pressure_delta * Convert.ToDouble( thejetpack.volume ) / ( ( this.air_contents.temperature ??0) * 8.314 );
					removed = this.air_contents.remove( transfer_moles );
					thejetpack.merge( removed );
					GlobalFuncs.to_chat( b, "You pulse-pressurize your jetpack from the tank." );
				}
				return null;
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			GlobalVars.nanomanager.update_uis( this );
			return null;
		}

		// Function from file: canister.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Lang13.Bool( Proj.damage ) ) {
				this.health -= Num13.Floor( Convert.ToDouble( Proj.damage / 2 ) );
				this.healthcheck();
			}
			base.bullet_act( (object)(Proj), (object)(def_zone) );
			return null;
		}

		// Function from file: canister.dm
		public override bool blob_act( dynamic severity = null ) {
			this.health -= 200;
			this.healthcheck();
			return false;
		}

		// Function from file: canister.dm
		public override GasMixture return_air(  ) {
			return this.air_contents;
		}

		// Function from file: canister.dm
		public override dynamic process(  ) {
			GasMixture environment = null;
			dynamic env_pressure = null;
			int pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;

			
			if ( this.destroyed ) {
				return null;
			}
			base.process();
			this.handle_beams();

			if ( this.valve_open ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					environment = this.holding.air_contents;
				} else {
					environment = this.loc.return_air();
				}
				env_pressure = environment.return_pressure();
				pressure_delta = Num13.MinInt( ((int)( this.release_pressure - Convert.ToDouble( env_pressure ) )), Convert.ToInt32( ( this.air_contents.return_pressure() - env_pressure ) / 2 ) );
				transfer_moles = 0;

				if ( ( this.air_contents.temperature ??0) > 0 && pressure_delta > 0 ) {
					transfer_moles = pressure_delta * ( environment.volume ??0) / ( ( this.air_contents.temperature ??0) * 8.314 );
					removed = this.air_contents.remove( transfer_moles );

					if ( Lang13.Bool( this.holding ) ) {
						environment.merge( removed );
					} else {
						this.loc.assume_air( removed );
					}
					this.update_icon();
				}
				GlobalVars.nanomanager.update_uis( this );
			}

			if ( Convert.ToDouble( this.air_contents.return_pressure() ) < 1 ) {
				this.can_label = true;
			} else {
				this.can_label = false;
			}

			if ( ( this.air_contents.temperature ??0) > 519.1500244140625 ) {
				this.air_contents.zburn();
				GlobalVars.nanomanager.update_uis( this );
			}
			return null;
		}

		// Function from file: canister.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( ( exposed_temperature ??0) > ( this.temperature_resistance ??0) ) {
				this.health -= 5;
				this.healthcheck();
			}
			return false;
		}

		// Function from file: canister.dm
		public bool weld( dynamic WT = null, dynamic user = null ) {
			
			if ( this.busy ) {
				return false;
			}

			if ( !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
				return false;
			}
			GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You start to slice away at " ).the( this ).item().str( "...</span>" ).ToString() );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder.ogg", 50, 1 );
			WT.eyecheck( user );
			this.busy = true;

			if ( GlobalFuncs.do_after( user, this, 50 ) ) {
				this.busy = false;

				if ( !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
					return false;
				}
				return true;
			}
			this.busy = false;
			return false;
		}

		// Function from file: canister.dm
		public dynamic return_pressure(  ) {
			GasMixture GM = null;

			GM = this.return_air();

			if ( GM != null && ( GM.volume ??0) > 0 ) {
				return GM.return_pressure();
			}
			return 0;
		}

		// Function from file: canister.dm
		public double? return_temperature(  ) {
			GasMixture GM = null;

			GM = this.return_air();

			if ( GM != null && ( GM.volume ??0) > 0 ) {
				return GM.temperature;
			}
			return 0;
		}

		// Function from file: canister.dm
		public bool healthcheck(  ) {
			Ent_Static location = null;

			
			if ( this.destroyed ) {
				return true;
			}

			if ( this.health <= 10 ) {
				location = this.loc;
				location.assume_air( this.air_contents );
				this.destroyed = true;
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/spray.ogg", 10, 1, -3 );
				this.density = false;
				this.update_icon();
				this.investigation_log( "atmos", "was destoyed by excessive damage." );

				if ( Lang13.Bool( this.holding ) ) {
					this.holding.loc = this.loc;
					this.holding = null;
				}

				if ( this.on_destroyed is _Event ) {
					this.on_destroyed.Invoke( new ByTable() );
				}
				GlobalVars.nanomanager.update_uis( this );
				return true;
			} else {
				return true;
			}
		}

		// Function from file: canister.dm
		public bool check_updates( dynamic tank_pressure = null ) {
			tank_pressure = tank_pressure ?? 0;

			
			if ( ( this.overlay_status & 1 ) != this.holding ) {
				return true;
			}

			if ( ( this.overlay_status & 2 ) != this.connected_port ) {
				return true;
			}

			if ( ( this.overlay_status & 32 ) != 0 && Convert.ToDouble( tank_pressure ) < 1519.875 ) {
				return true;
			}

			if ( ( this.overlay_status & 16 ) != 0 && ( Convert.ToDouble( tank_pressure ) < 101.32499694824219 || Convert.ToDouble( tank_pressure ) > 1519.875 ) ) {
				return true;
			}

			if ( ( this.overlay_status & 8 ) != 0 && ( Convert.ToDouble( tank_pressure ) < 10 || Convert.ToDouble( tank_pressure ) > 101.32499694824219 ) ) {
				return true;
			}

			if ( ( this.overlay_status & 4 ) != 0 && Convert.ToDouble( tank_pressure ) > 10 ) {
				return true;
			}
			return false;
		}

		// Function from file: canister.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			dynamic tank_pressure = null;

			
			if ( this.destroyed ) {
				this.icon_state = "" + this.canister_color + "-1";
				this.overlays.len = 0;
				return null;
			}

			if ( !GlobalVars.status_overlays ) {
				GlobalVars.status_overlays = true;
				GlobalVars.status_overlays_pressure = new ByTable();
				GlobalVars.status_overlays_other = new ByTable();
				GlobalVars.status_overlays_pressure.len = 4;
				GlobalVars.status_overlays_other.len = 2;
				GlobalVars.status_overlays_pressure[1] = new Image( this.icon, "can-o0" );
				GlobalVars.status_overlays_pressure[2] = new Image( this.icon, "can-o1" );
				GlobalVars.status_overlays_pressure[3] = new Image( this.icon, "can-o2" );
				GlobalVars.status_overlays_pressure[4] = new Image( this.icon, "can-o3" );
				GlobalVars.status_overlays_other[1] = new Image( this.icon, "can-open" );
				GlobalVars.status_overlays_other[2] = new Image( this.icon, "can-connector" );
			}

			if ( this.canister_color != this.old_color ) {
				this.icon_state = "" + this.canister_color;
				this.old_color = this.canister_color;
			}
			tank_pressure = this.air_contents.return_pressure();

			if ( this.check_updates( tank_pressure ) ) {
				
				if ( this.overlays.len != 0 ) {
					this.overlays = 0;
				}
				this.overlay_status = 0;

				if ( Lang13.Bool( this.holding ) ) {
					this.overlays.Add( GlobalVars.status_overlays_other[1] );
					this.overlay_status |= 1;
				}

				if ( Lang13.Bool( this.connected_port ) ) {
					this.overlays.Add( GlobalVars.status_overlays_other[2] );
					this.overlay_status |= 2;
				}

				dynamic _a = tank_pressure; // Was a switch-case, sorry for the mess.
				if ( 1519.875<=_a&&_a<=Double.PositiveInfinity ) {
					this.overlays.Add( GlobalVars.status_overlays_pressure[4] );
					this.overlay_status |= 32;
				} else if ( 101.32499694824219<=_a&&_a<=1519.875 ) {
					this.overlays.Add( GlobalVars.status_overlays_pressure[3] );
					this.overlay_status |= 16;
				} else if ( 10<=_a&&_a<=101.32499694824219 ) {
					this.overlays.Add( GlobalVars.status_overlays_pressure[2] );
					this.overlay_status |= 8;
				} else {
					this.overlays.Add( GlobalVars.status_overlays_pressure[1] );
					this.overlay_status |= 4;
				}
			}
			return null;
		}

	}

}