// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Canister : Obj_Machinery_PortableAtmospherics {

		public bool valve_open = false;
		public Obj_Machinery_Atmospherics_Components_Binary_PassiveGate pump = null;
		public string release_log = "";
		public double filled = 0.5;
		public string gas_type = "";
		public double release_pressure = 101.32499694824219;
		public double health = 100;
		public double temperature_resistance = 1273.1500244140625;
		public int update = 0;
		public dynamic label2types = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 1000;
			this.pressure_resistance = 709.2749633789062;
			this.icon_state = "yellow";
		}

		// Function from file: canister.dm
		public Obj_Machinery_PortableAtmospherics_Canister ( dynamic loc = null, GasMixture existing_mixture = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( existing_mixture != null ) {
				this.air_contents.copy_from( existing_mixture );
			} else {
				this.create_gas();
			}
			this.pump = new Obj_Machinery_Atmospherics_Components_Binary_PassiveGate( this, GlobalVars.FALSE );
			this.pump.on = GlobalVars.TRUE;
			this.pump.stat = 0;
			this.pump.build_network();
			this.update_icon();
			return;
		}

		// Function from file: canister.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic label = null;
			dynamic newtype = null;
			dynamic replacement = null;
			dynamic pressure = null;
			string logmsg = null;
			dynamic plasma = null;
			dynamic n2o = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "relabel":
					label = Interface13.Input( "New canister label:", this.name, null, null, GlobalVars.label2types, InputType.Null | InputType.Any );

					if ( Lang13.Bool( label ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
						newtype = GlobalVars.label2types[label];

						if ( Lang13.Bool( newtype ) ) {
							replacement = Lang13.Call( newtype, this.loc, this.air_contents );
							replacement.interact( Task13.User );
							GlobalFuncs.qdel( this );
						}
					}
					break;
				case "pressure":
					pressure = _params["pressure"];

					if ( pressure == "reset" ) {
						pressure = 101.32499694824219;
						_default = GlobalVars.TRUE;
					} else if ( pressure == "min" ) {
						pressure = 10.132499694824219;
						_default = GlobalVars.TRUE;
					} else if ( pressure == "max" ) {
						pressure = 1013.25;
						_default = GlobalVars.TRUE;
					} else if ( pressure == "input" ) {
						pressure = Interface13.Input( "New release pressure (" + 10.132499694824219 + "-" + 1013.25 + " kPa):", this.name, this.release_pressure, null, null, InputType.Num | InputType.Null );

						if ( !( pressure == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
							_default = GlobalVars.TRUE;
						}
					} else if ( String13.ParseNumber( pressure ) != null ) {
						pressure = String13.ParseNumber( pressure );
						_default = GlobalVars.TRUE;
					}

					if ( Lang13.Bool( _default ) ) {
						this.release_pressure = Num13.MaxInt( ((int)( 10.132499694824219 )), Num13.MinInt( Num13.Floor( Convert.ToDouble( pressure ) ), ((int)( 1013.25 )) ) );
						this.investigate_log( "was set to " + this.release_pressure + " kPa by " + GlobalFuncs.key_name( Task13.User ) + ".", "atmos" );
					}
					break;
				case "valve":
					logmsg = null;
					this.valve_open = !this.valve_open;

					if ( this.valve_open ) {
						logmsg = new Txt( "Valve was <b>opened</b> by " ).item( GlobalFuncs.key_name( Task13.User ) ).str( ", starting a transfer into " ).the( Lang13.Bool( this.holding ) || Lang13.Bool( "air" ) ).item().str( ".<br>" ).ToString();

						if ( !Lang13.Bool( this.holding ) ) {
							plasma = this.air_contents.gases["plasma"];
							n2o = this.air_contents.gases["n2o"];

							if ( Lang13.Bool( n2o ) || Lang13.Bool( plasma ) ) {
								GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( Task13.User ) ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( Task13.User ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( Task13.User ).str( "'>FLW</A>) opened a canister that contains " ).item( ( Lang13.Bool( n2o ) ? "N2O" : "" ) ).item( ( Lang13.Bool( n2o ) && Lang13.Bool( plasma ) ? " & " : "" ) ).item( ( Lang13.Bool( plasma ) ? "Plasma" : "" ) ).str( "! (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( this.x ).str( ";Y=" ).item( this.y ).str( ";Z=" ).item( this.z ).str( "'>JMP</a>)" ).ToString() );
								GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " opened a canister that contains " + ( Lang13.Bool( n2o ) ? "N2O" : "" ) + ( Lang13.Bool( n2o ) && Lang13.Bool( plasma ) ? " & " : "" ) + ( Lang13.Bool( plasma ) ? "Plasma" : "" ) + " at " + this.x + ", " + this.y + ", " + this.z );
							}
						}
					} else {
						logmsg = new Txt( "Valve was <b>closed</b> by " ).item( GlobalFuncs.key_name( Task13.User ) ).str( ", stopping the transfer into " ).the( Lang13.Bool( this.holding ) || Lang13.Bool( "air" ) ).item().str( ".<br>" ).ToString();
					}
					this.investigate_log( logmsg, "atmos" );
					this.release_log += logmsg;
					_default = GlobalVars.TRUE;
					break;
				case "eject":
					
					if ( Lang13.Bool( this.holding ) ) {
						
						if ( this.valve_open ) {
							this.investigate_log( "" + GlobalFuncs.key_name( Task13.User ) + " removed the " + this.holding + ", leaving the valve open and transfering into the <span class='boldannounce'>air</span><br>", "atmos" );
						}
						this.holding.loc = GlobalFuncs.get_turf( this );
						this.holding = null;
						_default = GlobalVars.TRUE;
					}
					break;
			}
			this.update_icon();
			return _default;
		}

		// Function from file: canister.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable();
			data["portConnected"] = ( Lang13.Bool( this.connected_port ) ? true : false );
			data["tankPressure"] = Num13.Floor( ( this.air_contents.return_pressure() != 0 ? this.air_contents.return_pressure() : 0 ) );
			data["releasePressure"] = Num13.Floor( ( this.release_pressure != 0 ? this.release_pressure : 0 ) );
			data["defaultReleasePressure"] = Num13.Floor( 101.32499694824219 );
			data["minReleasePressure"] = Num13.Floor( 10.132499694824219 );
			data["maxReleasePressure"] = Num13.Floor( 1013.25 );
			data["valveOpen"] = ( this.valve_open ? true : false );
			data["hasHoldingTank"] = ( Lang13.Bool( this.holding ) ? true : false );

			if ( Lang13.Bool( this.holding ) ) {
				data["holdingTank"] = new ByTable();
				data["holdingTank"]["name"] = this.holding.name;
				data["holdingTank"]["tankPressure"] = Num13.Floor( Convert.ToDouble( this.holding.air_contents.return_pressure() ) );
			}
			return data;
		}

		// Function from file: canister.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.physical_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "canister", this.name, 420, 405, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: canister.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( !( A is Obj_Item_Weapon_Wrench ) && !( A is Obj_Item_Weapon_Tank ) && !( A is Obj_Item_Device_Analyzer ) && !( A is Obj_Item_Device_Pda ) ) {
				this.investigate_log( new Txt( "was smacked with " ).a( A ).item().str( " by " ).item( GlobalFuncs.key_name( user ) ).str( "." ).ToString(), "atmos" );
				this.health -= Convert.ToDouble( A.force );
				this.add_fingerprint( user );
				this.healthcheck();
			} else {
				base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			}
			return null;
		}

		// Function from file: canister.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					
					if ( Lang13.Bool( this.destroyed ) || Rand13.PercentChance( 30 ) ) {
						GlobalFuncs.qdel( this );
						return false;
					} else {
						this.health = 0;
					}
					break;
				case 2:
					
					if ( Lang13.Bool( this.destroyed ) ) {
						GlobalFuncs.qdel( this );
						return false;
					} else {
						this.health -= Rand13.Int( 40, 100 );
					}
					break;
				case 3:
					this.health -= Rand13.Int( 15, 40 );
					break;
			}
			this.healthcheck();
			return false;
		}

		// Function from file: canister.dm
		public override dynamic bullet_act( dynamic P = null, dynamic def_zone = null ) {
			
			if ( P.damage_type == "brute" || P.damage_type == "fire" ) {
				
				if ( Lang13.Bool( P.damage ) ) {
					this.health -= Num13.Floor( Convert.ToDouble( P.damage / 2 ) );
					this.healthcheck();
				}
			}
			base.bullet_act( (object)(P), (object)(def_zone) );
			return null;
		}

		// Function from file: canister.dm
		public override bool blob_act( dynamic severity = null ) {
			this.health = 0;
			this.healthcheck();
			return false;
		}

		// Function from file: canister.dm
		public override int? process_atmos(  ) {
			dynamic T = null;

			base.process_atmos();

			if ( Lang13.Bool( this.destroyed ) ) {
				return 26;
			}

			if ( !this.valve_open ) {
				this.pump.airs[1] = null;
				this.pump.airs[2] = null;
				return null;
			}
			T = GlobalFuncs.get_turf( this );
			this.pump.airs[1] = this.air_contents;
			this.pump.airs[2] = ( Lang13.Bool( this.holding ) ? this.holding.air_contents : ((Ent_Static)T).return_air() );
			this.pump.target_pressure = this.release_pressure;
			this.pump.process_atmos();

			if ( !Lang13.Bool( this.holding ) ) {
				this.air_update_turf();
			}
			this.update_icon();
			return null;
		}

		// Function from file: canister.dm
		public override dynamic temperature_expose( GasMixture air = null, dynamic exposed_temperature = null, int? exposed_volume = null ) {
			
			if ( Convert.ToDouble( exposed_temperature ) > this.temperature_resistance ) {
				this.health -= 5;
				this.healthcheck();
			}
			return null;
		}

		// Function from file: canister.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			int last_update = 0;
			double pressure = 0;

			
			if ( Lang13.Bool( this.destroyed ) ) {
				this.overlays.Cut();
				this.icon_state = "" + Lang13.Initial( this, "icon_state" ) + "-1";
				return false;
			}
			last_update = this.update;
			this.update = 0;

			if ( Lang13.Bool( this.holding ) ) {
				this.update |= 1;
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				this.update |= 2;
			}
			pressure = this.air_contents.return_pressure();

			if ( pressure < 10 ) {
				this.update |= 4;
			} else if ( pressure < 101.32499694824219 ) {
				this.update |= 8;
			} else if ( pressure < 1519.875 ) {
				this.update |= 16;
			} else {
				this.update |= 32;
			}

			if ( this.update == last_update ) {
				return false;
			}
			this.overlays.Cut();

			if ( ( this.update & 1 ) != 0 ) {
				this.overlays.Add( "can-open" );
			}

			if ( ( this.update & 2 ) != 0 ) {
				this.overlays.Add( "can-connector" );
			}

			if ( ( this.update & 4 ) != 0 ) {
				this.overlays.Add( "can-o0" );
			} else if ( ( this.update & 8 ) != 0 ) {
				this.overlays.Add( "can-o1" );
			} else if ( ( this.update & 16 ) != 0 ) {
				this.overlays.Add( "can-o2" );
			} else if ( ( this.update & 32 ) != 0 ) {
				this.overlays.Add( "can-o3" );
			}
			return false;
		}

		// Function from file: canister.dm
		public void healthcheck(  ) {
			dynamic T = null;

			
			if ( Lang13.Bool( this.destroyed ) ) {
				return;
			}

			if ( this.health <= 10 ) {
				T = GlobalFuncs.get_turf( this );
				((Ent_Static)T).assume_air( this.air_contents );
				this.air_update_turf();
				this.destroyed = GlobalVars.TRUE;
				this.density = false;
				GlobalFuncs.playsound( this.loc, "sound/effects/spray.ogg", 10, 1, -3 );
				this.update_icon();
				this.investigate_log( "was destroyed.", "atmos" );

				if ( Lang13.Bool( this.holding ) ) {
					this.holding.loc = T;
					this.holding = null;
				}
			}
			return;
		}

		// Function from file: canister.dm
		public virtual void create_gas(  ) {
			
			if ( Lang13.Bool( this.gas_type ) ) {
				this.air_contents.add_gas( this.gas_type );
				this.air_contents.gases[this.gas_type][1] = this.maximum_pressure * this.filled * ( this.air_contents.volume ??0) / Convert.ToDouble( this.air_contents.temperature * 8.31 );
			}
			return;
		}

		// Function from file: canister.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.pump );
			this.pump = null;
			return base.Destroy();
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.WriteMsg( "<span class='warning'>An inhospitable area may be created as a result of destroying this object. Aborting.</span>" );
			return;
		}

	}

}