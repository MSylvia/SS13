// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_PrisonShuttle : Obj_Machinery_Computer {

		public dynamic temp = null;
		public bool allowedtocall = false;
		public bool prison_break = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 1 });
			this.circuit = "/obj/item/weapon/circuitboard/prison_shuttle";
			this.light_color = "#7DE1E1";
			this.icon_state = "shuttle";
		}

		public Obj_Machinery_Computer_PrisonShuttle ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: prisonshuttle.dm
		public void prison_process(  ) {
			int ticksleft = 0;
			dynamic start_location = null;
			dynamic end_location = null;
			ByTable dstturfs = null;
			int throwy = 0;
			dynamic T = null;
			dynamic T2 = null;
			Tile D = null;
			dynamic AM = null;
			dynamic start_location2 = null;
			dynamic end_location2 = null;
			ByTable dstturfs2 = null;
			int throwy2 = 0;
			dynamic T3 = null;
			dynamic T4 = null;
			Tile D2 = null;
			dynamic AM2 = null;

			
			while (GlobalVars.prison_shuttle_time - Game13.timeofday > 0) {
				ticksleft = GlobalVars.prison_shuttle_time - Game13.timeofday;

				if ( ticksleft > 100000 ) {
					GlobalVars.prison_shuttle_time = Game13.timeofday + 10;
				}
				GlobalVars.prison_shuttle_timeleft = ticksleft / 10;
				Task13.Sleep( 5 );
			}
			GlobalVars.prison_shuttle_moving_to_station = false;
			GlobalVars.prison_shuttle_moving_to_prison = false;

			switch ((bool)( GlobalVars.prison_shuttle_at_station )) {
				case false:
					GlobalVars.prison_shuttle_at_station = true;

					if ( GlobalVars.prison_shuttle_moving_to_station || GlobalVars.prison_shuttle_moving_to_prison ) {
						return;
					}

					if ( !this.prison_can_move() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The prison shuttle is unable to leave.</span>" );
						return;
					}
					start_location = Lang13.FindObj( typeof(Zone_Shuttle_Prison_Prison) );
					end_location = Lang13.FindObj( typeof(Zone_Shuttle_Prison_Station) );
					dstturfs = new ByTable();
					throwy = Game13.map_size_y;

					foreach (dynamic _a in Lang13.Enumerate( end_location )) {
						T = _a;
						
						dstturfs.Add( T );

						if ( Convert.ToDouble( T.y ) < throwy ) {
							throwy = Convert.ToInt32( T.y );
						}
					}

					foreach (dynamic _c in Lang13.Enumerate( dstturfs )) {
						T2 = _c;
						
						D = Map13.GetTile( Convert.ToInt32( T2.x ), throwy - 1, 1 );

						foreach (dynamic _b in Lang13.Enumerate( T2 )) {
							AM = _b;
							
							AM.Move( D );
						}

						if ( T2 is Tile_Simulated ) {
							GlobalFuncs.qdel( T2 );
							T2 = null;
						}
					}
					((Zone)start_location).move_contents_to( end_location );
					break;
				case true:
					GlobalVars.prison_shuttle_at_station = false;

					if ( GlobalVars.prison_shuttle_moving_to_station || GlobalVars.prison_shuttle_moving_to_prison ) {
						return;
					}

					if ( !this.prison_can_move() ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The prison shuttle is unable to leave.</span>" );
						return;
					}
					start_location2 = Lang13.FindObj( typeof(Zone_Shuttle_Prison_Station) );
					end_location2 = Lang13.FindObj( typeof(Zone_Shuttle_Prison_Prison) );
					dstturfs2 = new ByTable();
					throwy2 = Game13.map_size_y;

					foreach (dynamic _d in Lang13.Enumerate( end_location2 )) {
						T3 = _d;
						
						dstturfs2.Add( T3 );

						if ( Convert.ToDouble( T3.y ) < throwy2 ) {
							throwy2 = Convert.ToInt32( T3.y );
						}
					}

					foreach (dynamic _f in Lang13.Enumerate( dstturfs2 )) {
						T4 = _f;
						
						D2 = Map13.GetTile( Convert.ToInt32( T4.x ), throwy2 - 1, 1 );

						foreach (dynamic _e in Lang13.Enumerate( T4 )) {
							AM2 = _e;
							
							AM2.Move( D2 );
						}

						if ( T4 is Tile_Simulated ) {
							GlobalFuncs.qdel( T4 );
						}
					}
					((Zone)start_location2).move_contents_to( end_location2 );
					break;
			}
			return;
		}

		// Function from file: prisonshuttle.dm
		public void post_signal( string command = null ) {
			dynamic frequency = null;
			Game_Data status_signal = null;

			frequency = GlobalVars.radio_controller.return_frequency( 1311 );

			if ( !Lang13.Bool( frequency ) ) {
				return;
			}
			status_signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)status_signal).source = this;
			((dynamic)status_signal).transmission_method = 1;
			((dynamic)status_signal).data["command"] = command;
			frequency.post_signal( this, status_signal );
			return;
		}

		// Function from file: prisonshuttle.dm
		[VerbInfo( name: "prison break" )]
		public void f_prison_break(  ) {
			
			switch ((bool)( this.prison_break )) {
				case false:
					
					if ( !GlobalVars.prison_shuttle_at_station || GlobalVars.prison_shuttle_moving_to_prison ) {
						return;
					}
					GlobalVars.prison_shuttle_moving_to_prison = true;
					GlobalVars.prison_shuttle_at_station = GlobalVars.prison_shuttle_at_station;

					if ( !GlobalVars.prison_shuttle_moving_to_prison || !GlobalVars.prison_shuttle_moving_to_station ) {
						GlobalVars.prison_shuttle_time = Game13.timeofday + 150;
					}
					Task13.Schedule( 0, (Task13.Closure)(() => {
						this.prison_process();
						return;
					}));
					this.prison_break = true;
					break;
				case true:
					this.prison_break = false;
					break;
			}
			return;
		}

		// Function from file: prisonshuttle.dm
		public bool prison_can_move(  ) {
			
			if ( GlobalVars.prison_shuttle_moving_to_station || GlobalVars.prison_shuttle_moving_to_prison ) {
				return false;
			} else {
				return true;
			}
		}

		// Function from file: prisonshuttle.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			} else {
				Task13.User.set_machine( this );
			}

			if ( Lang13.Bool( href_list["sendtodock"] ) ) {
				
				if ( !this.prison_can_move() ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The prison shuttle is unable to leave.</span>" );
					return null;
				}

				if ( !GlobalVars.prison_shuttle_at_station || GlobalVars.prison_shuttle_moving_to_station || GlobalVars.prison_shuttle_moving_to_prison ) {
					return null;
				}
				this.post_signal( "prison" );
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The prison shuttle has been called and will arrive in " + 15 + " seconds.</span>" );
				this.temp += new Txt( "Shuttle sent.<BR><BR><A href='?src=" ).Ref( this ).str( ";mainmenu=1'>OK</A>" ).ToString();
				this.updateUsrDialog();
				GlobalVars.prison_shuttle_moving_to_prison = true;
				GlobalVars.prison_shuttle_time = Game13.timeofday + 150;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.prison_process();
					return;
				}));
			} else if ( Lang13.Bool( href_list["sendtostation"] ) ) {
				
				if ( !this.prison_can_move() ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The prison shuttle is unable to leave.</span>" );
					return null;
				}

				if ( GlobalVars.prison_shuttle_at_station || GlobalVars.prison_shuttle_moving_to_station || GlobalVars.prison_shuttle_moving_to_prison ) {
					return null;
				}
				this.post_signal( "prison" );
				GlobalFuncs.to_chat( Task13.User, "<span class='notice'>The prison shuttle has been called and will arrive in " + 15 + " seconds.</span>" );
				this.temp += new Txt( "Shuttle sent.<BR><BR><A href='?src=" ).Ref( this ).str( ";mainmenu=1'>OK</A>" ).ToString();
				this.updateUsrDialog();
				GlobalVars.prison_shuttle_moving_to_station = true;
				GlobalVars.prison_shuttle_time = Game13.timeofday + 150;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.prison_process();
					return;
				}));
			} else if ( Lang13.Bool( href_list["mainmenu"] ) ) {
				this.temp = null;
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: prisonshuttle.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic dat = null;

			
			if ( !this.allowed( a ) && !( this.emagged != 0 ) ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>Access Denied.</span>" );
				return null;
			}

			if ( this.prison_break ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>Unable to locate shuttle.</span>" );
				return null;
			}

			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			((Mob)a).set_machine( this );
			this.post_signal( "prison" );

			if ( Lang13.Bool( this.temp ) ) {
				dat = this.temp;
			} else {
				dat += new Txt( "<BR><B>Prison Shuttle</B><HR>\n			\nLocation: " ).item( ( GlobalVars.prison_shuttle_moving_to_station || GlobalVars.prison_shuttle_moving_to_prison ? "Moving to station (" + GlobalVars.prison_shuttle_timeleft + " Secs.)" : ( GlobalVars.prison_shuttle_at_station ? "Station" : "Dock" ) ) ).str( "<BR>\n			" ).item( ( GlobalVars.prison_shuttle_moving_to_station || GlobalVars.prison_shuttle_moving_to_prison ? "\n*Shuttle already called*<BR>\n<BR>" : ( GlobalVars.prison_shuttle_at_station ? new Txt( "\n<A href='?src=" ).Ref( this ).str( ";sendtodock=1'>Send to Dock</A><BR>\n<BR>" ).ToString() : new Txt( "\n<A href='?src=" ).Ref( this ).str( ";sendtostation=1'>Send to station</A><BR>\n<BR>" ).ToString() ) ) ).str( "\n			\n<A href='?src=" ).Ref( a ).str( ";mach_close=computer'>Close</A>" ).ToString();
			}
			Interface13.Browse( a, dat, "window=computer;size=575x450" );
			GlobalFuncs.onclose( a, "computer" );
			return null;
		}

		// Function from file: prisonshuttle.dm
		public override int emag( dynamic user = null ) {
			this.emagged = 1;
			GlobalFuncs.to_chat( user, "<span class='notice'>You disable the lock.</span>" );
			return 0;
		}

		// Function from file: prisonshuttle.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: prisonshuttle.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: prisonshuttle.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( !Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				this.attack_hand( b );
			}
			return null;
		}

	}

}