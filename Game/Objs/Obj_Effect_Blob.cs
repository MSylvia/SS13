// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_Blob : Obj_Effect {

		public double health = 20;
		public bool health_timestamp = false;
		public int brute_resist = 4;
		public int fire_resist = 1;
		public bool custom_process = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 3;
			this.anchored = 1;
			this.penetration_dampening = 17;
			this.icon = "icons/mob/blob.dmi";
		}

		// Function from file: theblob.dm
		public Obj_Effect_Blob ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic blobmode = null;
			Ent_Static A = null;

			GlobalVars.blobs.Add( this );

			if ( GlobalVars.ticker.mode is GameMode_Blob ) {
				blobmode = GlobalVars.ticker.mode;

				if ( GlobalVars.blobs.len >= blobmode.blobnukeposs && Rand13.PercentChance( 3 ) && !blobmode.nuclear ) {
					((GameMode_Blob)blobmode).stage( 2 );
					blobmode.nuclear = true;
				}
			}
			this.dir = Convert.ToInt32( Rand13.PickFromTable( GlobalVars.cardinal ) );
			this.update_icon();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			foreach (dynamic _a in Lang13.Enumerate( loc, typeof(Ent_Static) )) {
				A = _a;
				
				A.blob_act();
			}
			return;
		}

		// Function from file: theblob.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic damage = null;

			((Mob)b).delayNextAttack( 10 );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/attackblob.ogg", 50, 1 );
			this.visible_message( new Txt( "<span class='warning'><B>The " ).item( this.name ).str( " has been attacked with " ).the( a ).item().item( ( Lang13.Bool( b ) ? " by " + b + "." : "." ) ).str( "</span>" ).ToString() );
			damage = 0;

			dynamic _a = a.damtype; // Was a switch-case, sorry for the mess.
			if ( _a=="fire" ) {
				damage = a.force / Num13.MaxInt( this.fire_resist, 1 );

				if ( a is Obj_Item_Weapon_Weldingtool ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/blobweld.ogg", 100, 1 );
				}
			} else if ( _a=="brute" ) {
				damage = a.force / Num13.MaxInt( this.brute_resist, 1 );
			}
			this.health -= Convert.ToDouble( damage );
			this.update_icon();
			return null;
		}

		// Function from file: theblob.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			base.bullet_act( (object)(Proj), (object)(def_zone) );

			dynamic _a = Proj.damage_type; // Was a switch-case, sorry for the mess.
			if ( _a=="brute" ) {
				this.health -= Convert.ToDouble( Proj.damage / this.brute_resist );
			} else if ( _a=="fire" ) {
				this.health -= Convert.ToDouble( Proj.damage / this.fire_resist );
			}
			this.update_icon();
			return 0;
		}

		// Function from file: theblob.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			int damage = 0;

			damage = 150;
			this.health -= damage / this.brute_resist - ( severity ??0) * 5;
			this.update_icon();
			return false;
		}

		// Function from file: theblob.dm
		public virtual void Delete(  ) {
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: theblob.dm
		public void change_to( Type type = null, Mob_Camera_Blob M = null ) {
			
			if ( !( type is Type ) ) {
				GlobalFuncs.error( "" + type + " is an invalid type for the blob." );
			}

			if ( "" + type == "/obj/effect/blob/core" ) {
				Lang13.Call( type, this.loc, 200, null, 1, M );
			} else {
				Lang13.Call( type, this.loc );
			}
			this.Delete();
			return;
		}

		// Function from file: theblob.dm
		public bool expand( dynamic T = null, bool? prob = null ) {
			prob = prob ?? true;

			ByTable dirs = null;
			double i = 0;
			int dirn = 0;
			Obj_Effect_Blob_Normal B = null;
			Ent_Static A = null;

			
			if ( prob == true && !Rand13.PercentChance( ((int)( this.health )) ) ) {
				return false;
			}

			if ( T is Tile_Space && Rand13.PercentChance( 75 ) ) {
				return false;
			}

			if ( !Lang13.Bool( T ) ) {
				dirs = GlobalVars.cardinal.Copy();

				foreach (dynamic _a in Lang13.IterateRange( 1, 4 )) {
					i = _a;
					
					dirn = Convert.ToInt32( GlobalFuncs.pick_n_take( dirs ) );
					T = Map13.GetStep( this, dirn );

					if ( !Lang13.Bool( Lang13.FindIn( typeof(Obj_Effect_Blob), T ) ) ) {
						break;
					} else {
						T = null;
					}
				}
			}

			if ( !Lang13.Bool( T ) ) {
				return false;
			}
			B = new Obj_Effect_Blob_Normal( this.loc );
			B.density = true;

			if ( ((Base_Static)T).Enter( B, this ) ) {
				B.density = Lang13.Bool( Lang13.Initial( B, "density" ) );
				B.loc = T;
			} else {
				((Ent_Static)T).blob_act();
				B.Delete();
			}

			foreach (dynamic _b in Lang13.Enumerate( T, typeof(Ent_Static) )) {
				A = _b;
				
				A.blob_act();
			}
			return true;
		}

		// Function from file: theblob.dm
		public virtual bool run_action(  ) {
			return false;
		}

		// Function from file: theblob.dm
		public void Pulse( int? pulse = null, int? origin_dir = null ) {
			pulse = pulse ?? 0;
			origin_dir = origin_dir ?? 0;

			ByTable dirs = null;
			double i = 0;
			int dirn = 0;
			Tile T = null;
			dynamic B = null;

			
			if ( this.run_action() ) {
				return;
			}

			if ( ( pulse ??0) > 30 ) {
				return;
			}
			dirs = GlobalVars.cardinal.Copy();
			dirs.Remove( origin_dir );

			foreach (dynamic _a in Lang13.IterateRange( 1, 4 )) {
				i = _a;
				

				if ( !( dirs.len != 0 ) ) {
					break;
				}
				dirn = Convert.ToInt32( GlobalFuncs.pick_n_take( dirs ) );
				T = Map13.GetStep( this, dirn );
				B = Lang13.FindIn( typeof(Obj_Effect_Blob), T );

				if ( !Lang13.Bool( B ) ) {
					this.expand( T );
					return;
				}
				((Obj_Effect_Blob)B).Pulse( ( pulse ??0) + 1, Map13.GetDistance( this.loc, T ) );
				return;
			}
			return;
		}

		// Function from file: theblob.dm
		public virtual bool Life(  ) {
			return false;
		}

		// Function from file: theblob.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			double damage = 0;

			base.fire_act( air, exposed_temperature, exposed_volume );
			damage = ( ( exposed_temperature ??0) * 0.01 / this.fire_resist <= 0 ? 0 : ( ( exposed_temperature ??0) * 0.01 / this.fire_resist >= 4 - this.fire_resist ? 4 - this.fire_resist : ( exposed_temperature ??0) * 0.01 / this.fire_resist ) );

			if ( damage != 0 ) {
				this.health -= damage;
				this.update_icon();
			}
			return false;
		}

		// Function from file: theblob.dm
		public override dynamic process(  ) {
			this.handle_beams();
			this.Life();
			return null;
		}

		// Function from file: theblob.dm
		public override bool handle_beams(  ) {
			Obj_Effect_Beam B = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.beams, typeof(Obj_Effect_Beam) )) {
				B = _a;
				
				this.apply_beam_damage( B );
			}
			this.update_icon();
			return false;
		}

		// Function from file: theblob.dm
		public override bool apply_beam_damage( Obj_Effect_Beam B = null ) {
			dynamic lastcheck = null;
			double damage = 0;

			lastcheck = this.last_beamchecks[new Txt().Ref( B ).ToString()];
			damage = ( Game13.time - Convert.ToDouble( lastcheck ) ) / 10 * ( B.get_damage() / 2 );
			this.health -= damage;
			this.last_beamchecks[new Txt().Ref( B ).ToString()] = Game13.time;
			return false;
		}

		// Function from file: theblob.dm
		public override void beam_disconnect( Obj_Effect_Beam B = null ) {
			base.beam_disconnect( B );
			this.apply_beam_damage( B );
			this.last_beamchecks.Remove( new Txt().Ref( B ).ToString() );
			this.update_icon();

			if ( this.beams.len == 0 ) {
				Interface13.Stat( null, GlobalVars.processing_objects.Contains( !this.custom_process && this != null ) );

				if ( false ) {
					GlobalVars.processing_objects.Remove( this );
				}
			}
			return;
		}

		// Function from file: theblob.dm
		public override bool beam_connect( Obj_Effect_Beam B = null ) {
			base.beam_connect( B );
			this.last_beamchecks[new Txt().Ref( B ).ToString()] = Game13.time + 1;
			this.apply_beam_damage( B );

			if ( !this.custom_process && !false ) {
				GlobalVars.processing_objects.Add( this );
			}
			return false;
		}

		// Function from file: theblob.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true || height == 0 ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 8 ) != 0 ) {
				return true;
			}
			return false;
		}

		// Function from file: theblob.dm
		public override int projectile_check(  ) {
			return 16;
		}

		// Function from file: theblob.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.blobs.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}