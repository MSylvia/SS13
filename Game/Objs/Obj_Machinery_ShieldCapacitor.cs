// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_ShieldCapacitor : Obj_Machinery {

		public bool active = true;
		public double stored_charge = 0;
		public int time_since_fail = 100;
		public double max_charge = 1000000;
		public double max_charge_rate = 100000;
		public double min_charge_rate = 0;
		public bool locked = false;
		public double charge_rate = 100;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.idle_power_usage = 10;
			this.active_power_usage = 100;
			this.ghost_read = false;
			this.machine_flags = 25;
			this.icon = "code/WorkInProgress/Cael_Aislinn/ShieldGen/shielding.dmi";
			this.icon_state = "capacitor";
		}

		// Function from file: shield_capacitor.dm
		public Obj_Machinery_ShieldCapacitor ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Machinery_ShieldGen possible_gen = null;

			Task13.Schedule( 10, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 1 ), typeof(Obj_Machinery_ShieldGen) )) {
					possible_gen = _a;
					

					if ( Map13.GetDistance( this, possible_gen ) == this.dir ) {
						possible_gen.owned_capacitor = this;
						break;
					}
				}
				return;
			}));
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: shield_capacitor.dm
		public override dynamic power_change(  ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "broke";
			} else if ( Lang13.Bool( this.powered() ) ) {
				
				if ( this.active ) {
					this.icon_state = "capacitor";
				} else {
					this.icon_state = "capacitor";
				}
				this.stat &= 65533;
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.icon_state = "capacitor";
					this.stat |= 2;
					return;
				}));
			}
			return null;
		}

		// Function from file: shield_capacitor.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( !( Task13.User is Mob_Living_Silicon_Ai ) && Task13.User.z != this.z ) {
				return 1;
			}
			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=shield_capacitor" );
				Task13.User.unset_machine();
				return null;
			}

			if ( Lang13.Bool( href_list["toggle"] ) ) {
				this.active = !this.active;

				if ( this.active ) {
					this.use_power = 2;
				} else {
					this.use_power = 1;
				}
			}

			if ( Lang13.Bool( href_list["charge_rate"] ) ) {
				this.charge_rate += String13.ParseNumber( href_list["charge_rate"] ) ??0;

				if ( this.charge_rate > this.max_charge_rate ) {
					this.charge_rate = this.max_charge_rate;
				} else if ( this.charge_rate < this.min_charge_rate ) {
					this.charge_rate = this.min_charge_rate;
				}
			}
			this.updateDialog();
			return null;
		}

		// Function from file: shield_capacitor.dm
		public override dynamic process(  ) {
			
			if ( this.active ) {
				this.use_power = 2;

				if ( this.stored_charge + this.charge_rate > this.max_charge ) {
					this.active_power_usage = this.max_charge - this.stored_charge;
				} else {
					this.active_power_usage = this.charge_rate;
				}
				this.stored_charge += Convert.ToDouble( this.active_power_usage );
			} else {
				this.use_power = 1;
			}
			this.time_since_fail++;

			if ( this.stored_charge < Convert.ToDouble( this.active_power_usage * 1.5 ) ) {
				this.time_since_fail = 0;
			}
			return null;
		}

		// Function from file: shield_capacitor.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string t = null;

			
			if ( Map13.GetDistance( this, user ) > 1 || ( this.stat & 3 ) != 0 ) {
				
				if ( !( user is Mob_Living_Silicon ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=shield_capacitor" );
					return null;
				}
			}
			t = "<B>Shield Capacitor Control Console</B><br><br>";

			if ( this.locked ) {
				t += "<i>Swipe your ID card to begin.</i>";
			} else {
				t += new Txt( "This capacitor is: " ).item( ( this.active ? "<font color=green>Online</font>" : "<font color=red>Offline</font>" ) ).str( " <a href='?src=" ).Ref( this ).str( ";toggle=1'>" ).item( ( this.active ? "[Deactivate]" : "[Activate]" ) ).str( "</a><br>\n			" ).item( ( this.time_since_fail > 2 ? "<font color=green>Charging stable.</font>" : "<font color=red>Warning, low charge!</font>" ) ).str( "<br>\n			Charge: " ).item( this.stored_charge ).str( " Watts (" ).item( this.stored_charge * 100 / this.max_charge ).str( "%)<br>\n			Charge rate:\n		<a href='?src=" ).Ref( this ).str( ";charge_rate=" ).item( -this.max_charge_rate ).str( "'>[min]</a>\n		<a href='?src=" ).Ref( this ).str( ";charge_rate=-1000'>[--]</a>\n		<a href='?src=" ).Ref( this ).str( ";charge_rate=-100'>[-]</a>" ).item( this.charge_rate ).str( " Watts/sec\n		<a href='?src=" ).Ref( this ).str( ";charge_rate=100'>[+]</a>\n		<a href='?src=" ).Ref( this ).str( ";charge_rate=1000'>[++]</a>\n		<a href='?src=" ).Ref( this ).str( ";charge_rate=" ).item( this.max_charge_rate ).str( "'>[max]</a><br>" ).ToString();
			}
			t += new Txt( "<hr>\n		<A href='?src=" ).Ref( this ).str( "'>Refresh</A>\n		<A href='?src=" ).Ref( this ).str( ";close=1'>Close</A><BR>" ).ToString();
			Interface13.Browse( user, t, "window=shield_capacitor;size=500x800" );
			((Mob)user).set_machine( this );
			return null;
		}

		// Function from file: shield_capacitor.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			this.interact( a );
			return null;
		}

		// Function from file: shield_capacitor.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: shield_capacitor.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: shield_capacitor.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic C = null;

			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			} else if ( a is Obj_Item_Weapon_Card_Id ) {
				C = a;

				if ( Lang13.Bool( C.access.Contains( ((dynamic)( Lang13.Bool( C.access ) || GlobalVars.access_engine != 0 )).Contains( ((dynamic)( Lang13.Bool( C.access ) || GlobalVars.access_security )).Contains( GlobalVars.access_captain ) ) ) ) ) {
					this.locked = !this.locked;
					GlobalFuncs.to_chat( b, "Controls are now " + ( this.locked ? "locked." : "unlocked." ) );
					this.updateDialog();
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
			}
			return null;
		}

		// Function from file: shield_capacitor.dm
		public override int wrenchAnchor( dynamic user = null ) {
			Obj_Machinery_ShieldGen gen = null;

			
			if ( base.wrenchAnchor( (object)(user) ) != 0 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 1 ), typeof(Obj_Machinery_ShieldGen) )) {
					gen = _a;
					

					if ( !Lang13.Bool( this.anchored ) && gen.owned_capacitor == this ) {
						gen.owned_capacitor = null;
						break;
					} else if ( Lang13.Bool( this.anchored ) && !( gen.owned_capacitor != null ) ) {
						gen.owned_capacitor = this;
						break;
					}
					gen.updateDialog();
					this.updateDialog();
				}
				return 1;
			}
			return 0;
		}

		// Function from file: shield_capacitor.dm
		public override int emag( dynamic user = null ) {
			Effect_Effect_System_SparkSpread s = null;

			
			if ( Rand13.PercentChance( 75 ) ) {
				this.locked = !this.locked;
				GlobalFuncs.to_chat( user, "Controls are now " + ( this.locked ? "locked." : "unlocked." ) );
				this.updateDialog();
				s = new Effect_Effect_System_SparkSpread();
				s.set_up( 5, 1, this );
				s.start();
				return 1;
			}
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/sparks4.ogg", 75, 1 );
			return 0;
		}

		// Function from file: shield_capacitor.dm
		[Verb]
		[VerbInfo( name: "Rotate capacitor clockwise", group: "Object", access: VerbAccess.InViewExcludeThis, range: 1 )]
		public void rotate(  ) {
			
			if ( Lang13.Bool( this.anchored ) ) {
				GlobalFuncs.to_chat( Task13.User, "It is fastened to the floor!" );
				return;
			}
			this.dir = Num13.Rotate( this.dir, 270 );
			return;
		}

	}

}