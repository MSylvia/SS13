// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_AutopsyScanner : Obj_Item_Weapon {

		public ByTable wdata = new ByTable();
		public ByTable chemtraces = new ByTable();
		public string target_name = null;
		public int? timeofdeath = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.w_class = 1;
			this.origin_tech = "materials=1;biotech=1";
			this.icon = "icons/obj/autopsy_scanner.dmi";
		}

		public Obj_Item_Weapon_AutopsyScanner ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: autopsy.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			dynamic S = null;
			dynamic O = null;

			
			if ( !( M is Mob_Living_Carbon_Human ) ) {
				return null;
			}

			if ( !GlobalFuncs.can_operate( M ) ) {
				return null;
			}

			if ( this.target_name != M.name ) {
				this.target_name = M.name;
				this.wdata = new ByTable();
				this.chemtraces = new ByTable();
				this.timeofdeath = null;
				GlobalFuncs.to_chat( user, "<span class='warning'>A new patient has been registered.. Purging data for previous patient.</span>" );
			}
			this.timeofdeath = Lang13.IntNullable( M.timeofdeath );
			S = ((Mob_Living_Carbon_Human)M).get_organ( ((dynamic)user.zone_sel).selecting );

			if ( !Lang13.Bool( S ) ) {
				GlobalFuncs.to_chat( Task13.User, "<b>You can't scan this body part.</b>" );
				return null;
			}

			if ( !Lang13.Bool( S.open ) ) {
				GlobalFuncs.to_chat( Task13.User, "<b>You have to cut the limb open first!</b>" );
				return null;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, M ) )) {
				O = _a;
				
				O.show_message( new Txt( "<span class='warning'>" ).item( user.name ).str( " scans the wounds on " ).item( M.name ).str( "'s " ).item( S.display_name ).str( " with " ).the( this.name ).item().str( "</span>" ).ToString(), 1 );
			}
			this.add_data( S );
			return true;
		}

		// Function from file: autopsy.dm
		public void add_data( dynamic O = null ) {
			dynamic V = null;
			AutopsyData W = null;
			AutopsyDataScanner D = null;
			dynamic V2 = null;

			
			if ( !( O.autopsy_data.len != 0 ) && !( O.trace_chemicals.len != 0 ) ) {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( O.autopsy_data )) {
				V = _a;
				
				W = O.autopsy_data[V];

				if ( !Lang13.Bool( W.pretend_weapon ) ) {
					W.pretend_weapon = W.weapon;
				}
				D = this.wdata[V];

				if ( !( D != null ) ) {
					D = new AutopsyDataScanner();
					D.weapon = W.weapon;
					this.wdata[V] = D;
				}

				if ( !Lang13.Bool( D.organs_scanned[O.name] ) ) {
					
					if ( D.organ_names == "" ) {
						D.organ_names = O.display_name;
					} else {
						D.organ_names += ", " + O.display_name;
					}
				}
				GlobalFuncs.qdel( D.organs_scanned[O.name] );
				D.organs_scanned[O.name] = W.copy();
			}

			foreach (dynamic _b in Lang13.Enumerate( O.trace_chemicals )) {
				V2 = _b;
				

				if ( Convert.ToDouble( O.trace_chemicals[V2] ) > 0 && !( this.chemtraces.Find( V2 ) != 0 ) ) {
					this.chemtraces.Add( V2 );
				}
			}
			return;
		}

		// Function from file: autopsy.dm
		[Verb]
		[VerbInfo( name: "Print Data", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void print_data(  ) {
			string scan_data = null;
			int n = 0;
			dynamic wdata_idx = null;
			AutopsyDataScanner D = null;
			int total_hits = 0;
			double total_score = 0;
			ByTable weapon_chances = null;
			int? age = null;
			dynamic wound_idx = null;
			AutopsyData W = null;
			string wname = null;
			int wound_age = 0;
			string damage_desc = null;
			bool damaging_weapon = false;
			dynamic weapon_name = null;
			dynamic chemID = null;
			dynamic O = null;
			Obj_Item_Weapon_Paper P = null;

			
			if ( Task13.User.isUnconscious() || !( Task13.User is Mob_Living_Carbon_Human ) ) {
				GlobalFuncs.to_chat( Task13.User, "No." );
				return;
			}
			scan_data = "";

			if ( Lang13.Bool( this.timeofdeath ) ) {
				scan_data += "<b>Time of death:</b> " + GlobalFuncs.worldtime2text( this.timeofdeath ) + "<br><br>";
			}
			n = 1;

			foreach (dynamic _d in Lang13.Enumerate( this.wdata )) {
				wdata_idx = _d;
				
				D = this.wdata[wdata_idx];
				total_hits = 0;
				total_score = 0;
				weapon_chances = new ByTable();
				age = 0;

				foreach (dynamic _a in Lang13.Enumerate( D.organs_scanned )) {
					wound_idx = _a;
					
					W = D.organs_scanned[wound_idx];
					total_hits += W.hits;
					wname = W.pretend_weapon;

					if ( weapon_chances.Contains( wname ) ) {
						weapon_chances[wname] += W.damage;
					} else {
						weapon_chances[wname] = Num13.MaxInt( ((int)( W.damage )), 1 );
					}
					total_score += W.damage;
					wound_age = W.time_inflicted;
					age = Num13.MaxInt( age ??0, wound_age );
				}
				damage_desc = null;
				damaging_weapon = total_score != 0;

				dynamic _b = total_score; // Was a switch-case, sorry for the mess.
				if ( 1<=_b&&_b<=5 ) {
					damage_desc = "<font color='green'>negligible</font>";
				} else if ( 5<=_b&&_b<=15 ) {
					damage_desc = "<font color='green'>light</font>";
				} else if ( 15<=_b&&_b<=30 ) {
					damage_desc = "<font color='orange'>moderate</font>";
				} else if ( 30<=_b&&_b<=1000 ) {
					damage_desc = "<font color='red'>severe</font>";
				} else if ( _b==0 ) {
					damage_desc = "Unknown";
				}

				if ( !( total_score != 0 ) ) {
					total_score = D.organs_scanned.len;
				}
				scan_data += "<b>Weapon #" + n + "</b><br>";

				if ( damaging_weapon ) {
					scan_data += "Severity: " + damage_desc + "<br>";
					scan_data += "Hits by weapon: " + total_hits + "<br>";
				}
				scan_data += "Approximate time of wound infliction: " + GlobalFuncs.worldtime2text( age ) + "<br>";
				scan_data += "Affected limbs: " + D.organ_names + "<br>";
				scan_data += "Possible weapons:<br>";

				foreach (dynamic _c in Lang13.Enumerate( weapon_chances )) {
					weapon_name = _c;
					
					scan_data += "	" + weapon_chances[weapon_name] * 100 / total_score + "% " + weapon_name + "<br>";
				}
				scan_data += "<br>";
				n++;
			}

			if ( this.chemtraces.len != 0 ) {
				scan_data += "<b>Trace Chemicals: </b><br>";

				foreach (dynamic _e in Lang13.Enumerate( this.chemtraces )) {
					chemID = _e;
					
					scan_data += chemID;
					scan_data += "<br>";
				}
			}

			foreach (dynamic _f in Lang13.Enumerate( Map13.FetchViewers( null, Task13.User ) )) {
				O = _f;
				
				O.show_message( new Txt( "<span class='warning'>" ).the( this ).item().str( " rattles and prints out a sheet of paper.</span>" ).ToString(), 1 );
			}
			Task13.Sleep( 10 );
			P = new Obj_Item_Weapon_Paper( Task13.User.loc );
			P.name = "Autopsy Data (" + this.target_name + ")";
			P.info = "<tt>" + scan_data + "</tt>";
			P.overlays.Add( "paper_words" );

			if ( Task13.User is Mob_Living_Carbon ) {
				
				if ( !Lang13.Bool( Task13.User.r_hand ) ) {
					P.loc = Task13.User;
					Task13.User.r_hand = P;
					P.layer = 20;
				} else if ( !Lang13.Bool( Task13.User.l_hand ) ) {
					P.loc = Task13.User;
					Task13.User.l_hand = P;
					P.layer = 20;
				}
			}

			if ( Task13.User is Mob_Living_Carbon_Human ) {
				Task13.User.update_inv_l_hand();
				Task13.User.update_inv_r_hand();
			}
			return;
		}

	}

}