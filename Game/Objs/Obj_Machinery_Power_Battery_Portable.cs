// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_Battery_Portable : Obj_Machinery_Power_Battery {

		public Obj_Machinery_Power_BatteryPort connected_to = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.capacity = 3000000;
			this.machine_flags = 14;
			this.icon_state = "port_smes";
		}

		// Function from file: battery_ion.dm
		public Obj_Machinery_Power_Battery_Portable ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable(new object [] { 
				new Obj_Item_Weapon_Circuitboard_PortSmes(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				new Obj_Item_Weapon_StockParts_Capacitor(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_MicroLaser(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen(), 
				new Obj_Item_Weapon_StockParts_ConsoleScreen()
			 });
			this.RefreshParts();
			return;
		}

		// Function from file: battery_ion.dm
		public override void restore(  ) {
			int _chargedisplay = 0;
			double excess = 0;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return;
			}

			if ( !( this.connected_to != null ) ) {
				return;
			}
			_chargedisplay = this.chargedisplay();
			excess = this.connected_to.powernet.netexcess;
			excess = Num13.MinInt( this.lastout, ((int)( excess )) );
			excess = Num13.MinInt( Convert.ToInt32( ( this.capacity - this.charge ) / 0.05 ), ((int)( excess )) );
			this.charge += excess * 0.05;
			this.connected_to.powernet.netexcess -= excess;
			this.loaddemand = this.lastout - excess;

			if ( _chargedisplay != this.chargedisplay() ) {
				this.update_icon();
			}
			return;
		}

		// Function from file: battery_ion.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			base.update_icon( (object)(location), (object)(target) );

			if ( this.connected_to != null ) {
				this.connected_to.update_icon();
			}
			return null;
		}

		// Function from file: battery_ion.dm
		public override int wrenchAnchor( dynamic user = null ) {
			dynamic port = null;

			
			if ( base.wrenchAnchor( (object)(user) ) == 1 ) {
				
				if ( Lang13.Bool( this.anchored ) ) {
					port = Lang13.FindIn( typeof(Obj_Machinery_Power_BatteryPort), this.loc );

					if ( Lang13.Bool( port ) ) {
						((Obj_Machinery_Power_BatteryPort)port).connect_battery( this );
					}
				} else if ( this.connected_to != null ) {
					this.connected_to.disconnect_battery();
				}
				return 1;
			}
			return -1;
		}

		// Function from file: battery_ion.dm
		public override dynamic surplus(  ) {
			
			if ( this.connected_to != null ) {
				return this.connected_to.surplus();
			}
			return 0;
		}

		// Function from file: battery_ion.dm
		public override bool add_load( dynamic amount = null ) {
			
			if ( this.connected_to != null ) {
				this.connected_to.add_load( amount );
			}
			return false;
		}

		// Function from file: battery_ion.dm
		public override void add_avail( dynamic amount = null ) {
			
			if ( this.connected_to != null ) {
				this.connected_to.add_avail( amount );
			}
			return;
		}

		// Function from file: battery_ion.dm
		public override dynamic get_powernet(  ) {
			
			if ( this.connected_to != null ) {
				return this.connected_to.get_powernet();
			}
			return null;
		}

		// Function from file: battery_ion.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			dynamic port = null;

			base.initialize( suppress_icon_check );

			if ( Lang13.Bool( this.anchored ) ) {
				port = Lang13.FindIn( typeof(Obj_Machinery_Power_BatteryPort), this.loc );

				if ( Lang13.Bool( port ) ) {
					((Obj_Machinery_Power_BatteryPort)port).connect_battery( this );
				}
			}
			return false;
		}

		// Function from file: battery_ion.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( this.connected_to != null ) {
				this.connected_to.disconnect_battery();
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}