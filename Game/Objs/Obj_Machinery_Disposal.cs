// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Disposal : Obj_Machinery {

		public GasMixture air_contents = null;
		public int mode = 1;
		public double? flush = 0;
		public dynamic trunk = null;
		public bool flushing = false;
		public int flush_every_ticks = 30;
		public int flush_count = 0;
		public int last_sound = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/pipes/disposal.dmi";
			this.icon_state = "disposal";
		}

		// Function from file: disposal.dm
		public Obj_Machinery_Disposal ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Structure_Disposalpipe_Trunk O = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			Task13.Schedule( 5, (Task13.Closure)(() => {
				
				foreach (dynamic _a in Lang13.Enumerate( this.loc.contents, typeof(Obj_Structure_Disposalpipe_Trunk) )) {
					O = _a;
					
					this.trunk = O;
				}

				if ( Lang13.Bool( this.trunk ) ) {
					
					if ( this.trunk.disposal != this ) {
						this.trunk.disposal = this;
					}

					if ( this.trunk.linked != this.trunk.disposal ) {
						this.trunk.linked = this.trunk.disposal;
					}
				} else {
					this.mode = 0;
					this.flush = 0;
				}
				this.air_contents = new GasMixture();
				return;
			}));
			this.update_icon();
			return;
		}

		// Function from file: disposal.dm
		public override bool MouseDrop_T( Ent_Static O = null, dynamic user = null, bool? needs_opened = null, bool? show_message = null, bool? move_them = null ) {
			Ent_Static locHolder = null;
			Ent_Static target = null;

			
			if ( user is Mob_Living_Silicon_Ai ) {
				return false;
			}

			if ( !( O is Mob ) ) {
				
				if ( O is Obj_Item ) {
					
					if ( !((Mob)user).restrained() && user.canmove ) {
						this.attackby( O, user );
					}
				}
				return false;
			}
			locHolder = O.loc;
			target = O;

			if ( target == user ) {
				
				if ( !((Mob)user).restrained() && user.canmove ) {
					target.visible_message( "" + target + " starts climbing into the " + this + ".", "You start climbing into the " + this + "." );
				} else {
					return false;
				}
			} else {
				
				if ( user is Mob_Living_SimpleAnimal ) {
					return false;
				}

				if ( !((Mob)user).restrained() && user.canmove ) {
					
					if ( Lang13.Bool( ((dynamic)target).locked_to ) ) {
						return false;
					}
					((Ent_Static)user).visible_message( "" + user + " starts stuffing " + target + " into the " + this + ".", "You start stuffing " + target + " into the " + this + "." );
				} else {
					return false;
				}
			}

			if ( !GlobalFuncs.do_after( user, this, 20 ) ) {
				return false;
			}

			if ( locHolder != target.loc ) {
				return false;
			}

			if ( target == user ) {
				
				if ( !((Mob)user).restrained() && user.canmove ) {
					target.visible_message( "" + target + " climbed into the " + this + ".", "You climbed into the " + this + "." );
				} else {
					return false;
				}
			} else if ( !((Mob)user).restrained() && user.canmove ) {
				
				if ( Lang13.Bool( ((dynamic)target).locked_to ) ) {
					return false;
				}
				((Ent_Static)user).visible_message( "" + user + " stuffed " + target + " into the " + this + "!", "You stuffed " + target + " into the " + this + "!" );
				GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<SPAN CLASS='warning'>" + GlobalFuncs.key_name( user ) + " placed " + GlobalFuncs.key_name( target ) + " in a disposals unit/(" + this + ").</SPAN>" ) ) );
			} else {
				return false;
			}
			this.add_fingerprint( user );

			if ( Lang13.Bool( ((dynamic)target).client ) ) {
				((dynamic)target).client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
				((dynamic)target).client.eye = this;
			}
			target.loc = this;
			this.update_icon();
			return false;
		}

		// Function from file: disposal.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			dynamic I = null;
			dynamic M = null;
			dynamic M2 = null;

			
			if ( mover is Obj_Item && mover.throwing != 0 ) {
				I = mover;

				if ( I is Obj_Item_Weapon_Dummy || I is Obj_Item_Projectile ) {
					return false;
				}

				if ( Rand13.PercentChance( 75 ) ) {
					I.loc = this;

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						M = _a;
						
						M.show_message( new Txt().the( I ).item().str( " lands in " ).the( this ).item().str( "." ).ToString(), 1 );
					}
				} else {
					
					foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						M2 = _b;
						
						M2.show_message( new Txt().the( I ).item().str( " bounces off of " ).the( this ).item().str( "'s rim!." ).ToString(), 1 );
					}
				}
				return false;
			} else {
				return base.CanPass( (object)(mover), (object)(target), height, air_group );
			}
		}

		// Function from file: disposal.dm
		public override dynamic power_change(  ) {
			base.power_change();
			this.update_icon();
			return null;
		}

		// Function from file: disposal.dm
		public override dynamic process(  ) {
			Ent_Static L = null;
			GasMixture env = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( !( this.air_contents != null ) ) {
				return null;
			}
			this.flush_count++;

			if ( this.flush_count >= this.flush_every_ticks ) {
				
				if ( this.contents.len != 0 ) {
					
					if ( this.mode == 2 ) {
						Task13.Schedule( 0, (Task13.Closure)(() => {
							GlobalFuncs.feedback_inc( "disposal_auto_flush", 1 );
							this.f_flush();
							return;
						}));
					}
				}
				this.flush_count = 0;
			}
			this.updateDialog();

			if ( Lang13.Bool( this.flush ) && Convert.ToDouble( this.air_contents.return_pressure() ) >= 5.066249847412109 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					this.f_flush();
					return;
				}));
			}

			if ( ( this.stat & 2 ) != 0 ) {
				return null;
			}
			this.f_use_power( 100 );

			if ( this.mode != 1 ) {
				return null;
			}
			this.f_use_power( 500 );
			L = this.loc;
			env = L.return_air();
			pressure_delta = 5.116912364959717 - Convert.ToDouble( this.air_contents.return_pressure() );

			if ( ( env.temperature ??0) > 0 ) {
				transfer_moles = pressure_delta * ( this.air_contents.volume ??0) * 0.1 / ( ( env.temperature ??0) * 8.314 );
				removed = env.remove( transfer_moles );
				this.air_contents.merge( removed );
			}

			if ( Convert.ToDouble( this.air_contents.return_pressure() ) >= 5.066249847412109 ) {
				this.mode = 2;
				this.update_icon();
			}
			return null;
		}

		// Function from file: disposal.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays.len = 0;

			if ( ( this.stat & 1 ) != 0 ) {
				this.icon_state = "disposal-broken";
				this.mode = 0;
				this.flush = 0;
				return null;
			}

			if ( Lang13.Bool( this.flush ) ) {
				this.overlays.Add( new Image( "icons/obj/pipes/disposal.dmi", "dispover-handle" ) );
			}

			if ( ( this.stat & 2 ) != 0 || this.mode == -1 ) {
				return null;
			}

			if ( this.contents.len > 0 ) {
				this.overlays.Add( new Image( "icons/obj/pipes/disposal.dmi", "dispover-full" ) );
			}

			if ( this.mode == 1 ) {
				this.overlays.Add( new Image( "icons/obj/pipes/disposal.dmi", "dispover-charge" ) );
			} else if ( this.mode == 2 ) {
				this.overlays.Add( new Image( "icons/obj/pipes/disposal.dmi", "dispover-ready" ) );
			}
			return null;
		}

		// Function from file: disposal.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Task13.User.loc == this ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You cannot reach the controls from inside.</span>" );
				return null;
			}

			if ( this.mode == -1 && !Lang13.Bool( href_list["eject"] ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>The disposal units power is disabled.</span>" );
				return null;
			}

			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				Interface13.Browse( Task13.User, null, "window=disposal" );
				Task13.User.unset_machine();
				return 1;
			} else {
				this.add_fingerprint( Task13.User );
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["close"] ) ) {
					Task13.User.unset_machine();
					Interface13.Browse( Task13.User, null, "window=disposal" );
					return null;
				}

				if ( Lang13.Bool( href_list["pump"] ) ) {
					
					if ( Lang13.Bool( String13.ParseNumber( href_list["pump"] ) ) ) {
						this.mode = 1;
					} else {
						this.mode = 0;
					}
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["handle"] ) ) {
					this.flush = String13.ParseNumber( href_list["handle"] );
					this.update_icon();
				}

				if ( Lang13.Bool( href_list["eject"] ) ) {
					this.eject();
				}
				GlobalVars.nanomanager.update_uis( this );
			}
			return null;
		}

		// Function from file: disposal.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? true;

			ByTable data = null;

			data = new ByTable( 0 );
			data["pressure"] = Num13.Floor( Convert.ToDouble( this.air_contents.return_pressure() * 100 / 5.066249847412109 ) );
			data["flush"] = this.flush;
			data["mode"] = this.mode;
			data["isAI"] = user is Mob_Living_Silicon_Ai;
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data, force_open );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "disposalsbin.tmpl", "Waste Disposal Unit", 430, 150 );
				ui.set_initial_data( data );
				ui.open();
				ui.set_auto_update( true );
			}
			return;
		}

		// Function from file: disposal.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( a ) && a.loc == this ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You cannot reach the controls from inside.</span>" );
				return null;
			}
			this.add_fingerprint( a );
			this.ui_interact( a );
			return null;
		}

		// Function from file: disposal.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			this.ui_interact( user );
			return null;
		}

		// Function from file: disposal.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}
			this.flush = !Lang13.Bool( this.flush ) ?1:0;
			this.update_icon();
			return null;
		}

		// Function from file: disposal.dm
		public void expel( Obj_Structure_Disposalholder H = null ) {
			Tile target = null;
			Ent_Dynamic AM = null;

			GlobalFuncs.playsound( this, "sound/machines/hiss.ogg", 50, 0, 0 );

			if ( H != null ) {
				H.active = false;

				foreach (dynamic _a in Lang13.Enumerate( H, typeof(Ent_Dynamic) )) {
					AM = _a;
					
					target = GlobalFuncs.get_offset_target_turf( this.loc, Rand13.Int( 5 ) - Rand13.Int( 5 ), Rand13.Int( 5 ) - Rand13.Int( 5 ) );
					AM.loc = this.loc;
					AM.pipe_eject( 0 );
					Task13.Schedule( 1, (Task13.Closure)(() => {
						
						if ( AM != null ) {
							AM.throw_at( target, 5, 1 );
						}
						return;
					}));
				}
				H.vent_gas( this.loc );
				GlobalFuncs.qdel( H );
			}
			return;
		}

		// Function from file: disposal.dm
		[VerbInfo( name: "flush" )]
		public virtual void f_flush(  ) {
			bool wrapcheck = false;
			Obj_Structure_Disposalholder H = null;
			Obj_Item_Delivery O = null;

			this.flushing = true;
			Icon13.Flick( "" + this.icon_state + "-flush", this );
			wrapcheck = false;
			H = new Obj_Structure_Disposalholder();

			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Obj_Item_Delivery) )) {
				O = _a;
				
				wrapcheck = true;
			}

			if ( wrapcheck ) {
				H.tomail = true;
			}
			this.air_contents = new GasMixture();
			Task13.Sleep( 10 );

			if ( this.last_sound < Game13.time + 1 ) {
				GlobalFuncs.playsound( this, "sound/machines/disposalflush.ogg", 50, 0, 0 );
				this.last_sound = Game13.time;
			}
			Task13.Sleep( 5 );
			H.init( this );
			H.start( this );
			this.flushing = false;
			this.flush = 0;

			if ( this.mode == 2 ) {
				this.mode = 1;
			}
			this.update_icon();
			return;
		}

		// Function from file: disposal.dm
		public void eject(  ) {
			Ent_Dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				AM = _a;
				
				AM.loc = this.loc;
				AM.pipe_eject( 0 );
			}
			this.update_icon();
			return;
		}

		// Function from file: disposal.dm
		public void go_out( Mob user = null ) {
			
			if ( user.client != null ) {
				user.client.eye = user.client.mob;
				user.client.perspective = GlobalVars.MOB_PERSPECTIVE ?1:0;
			}
			user.loc = this.loc;
			this.update_icon();
			return;
		}

		// Function from file: disposal.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			
			if ( Lang13.Bool( M.stat ) || this.flushing ) {
				return null;
			}
			this.go_out( M );
			return null;
		}

		// Function from file: disposal.dm
		public override dynamic alter_health( Mob_Living M = null ) {
			return GlobalFuncs.get_turf( this );
		}

		// Function from file: disposal.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic W = null;
			Obj_Structure_Disposalconstruct C = null;
			dynamic B = null;
			dynamic G = null;
			Mob GM = null;

			
			if ( ( this.stat & 1 ) != 0 || !Lang13.Bool( a ) || !Lang13.Bool( b ) ) {
				return null;
			}

			if ( b is Mob_Living_Silicon_Robot && !( a is Obj_Item_Weapon_Storage_Bag_Trash ) && !( b is Mob_Living_Silicon_Robot_Mommi ) ) {
				return null;
			}
			this.add_fingerprint( b );

			if ( this.mode <= 0 ) {
				
				if ( a is Obj_Item_Weapon_Screwdriver ) {
					
					if ( this.contents.len > 0 ) {
						GlobalFuncs.to_chat( b, "Eject the items first!" );
						return null;
					}

					if ( this.mode == 0 ) {
						this.mode = -1;
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
						GlobalFuncs.to_chat( b, "You remove the screws around the power connection." );
						return null;
					} else if ( this.mode == -1 ) {
						this.mode = 0;
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 50, 1 );
						GlobalFuncs.to_chat( b, "You attach the screws around the power connection." );
						return null;
					}
				} else if ( a is Obj_Item_Weapon_Weldingtool && this.mode == -1 ) {
					
					if ( this.contents.len > 0 ) {
						GlobalFuncs.to_chat( b, "Eject the items first!" );
						return null;
					}
					W = a;

					if ( Lang13.Bool( W.remove_fuel( 0, b ) ) ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder2.ogg", 100, 1 );
						GlobalFuncs.to_chat( b, "You start slicing the floorweld off the disposal unit." );

						if ( GlobalFuncs.do_after( b, this, 20 ) ) {
							
							if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)W).isOn() ) {
								return null;
							}
							GlobalFuncs.to_chat( b, "You sliced the floorweld off the disposal unit." );
							C = new Obj_Structure_Disposalconstruct( this.loc );
							this.transfer_fingerprints_to( C );
							C.ptype = 6;
							C.anchored = 1;
							C.density = true;
							C.update_icon();
							GlobalFuncs.qdel( this );
						}
						return null;
					} else {
						GlobalFuncs.to_chat( b, "You need more welding fuel to complete this task." );
						return null;
					}
				}
			}

			if ( a is Obj_Item_Weapon_Storage_Bag ) {
				B = a;

				if ( B.contents.len == 0 ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>You throw away the empty " + B + ".</span>" );
						return null;
					}
				}
				GlobalFuncs.to_chat( b, "<span class='notice'>You empty the " + B + ".</span>" );
				((Obj_Item_Weapon_Storage)B).mass_remove( this );
				B.update_icon();
				this.update_icon();
				return null;
			}
			G = a;

			if ( G is Obj_Item_Weapon_Grab ) {
				
				if ( G.affecting is Mob ) {
					GM = G.affecting;
					b.attack_log.Add( "<span class='warning'> " + b + "(" + b.ckey + ") has attempted to put " + GM + "(" + GM.ckey + ") in disposals.</span>" );
					GM.attack_log.Add( "<span class='warning'> " + b + "(" + b.ckey + ") has attempted to put " + GM + "(" + GM.ckey + ") in disposals.</span>" );
					((Ent_Static)b).visible_message( new Txt().item( Task13.User ).str( " starts putting " ).item( GM.name ).str( " into " ).the( this ).item().str( "." ).ToString(), new Txt( "You start putting " ).the( GM.name ).item().str( " into the " ).item( this ).str( "." ).ToString(), "You hear some clunking." );

					if ( GlobalFuncs.do_after( Task13.User, this, 20 ) ) {
						
						if ( GM.client != null ) {
							GM.client.perspective = GlobalVars.EYE_PERSPECTIVE ?1:0;
							GM.client.eye = this;
						}
						GM.loc = this;
						((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( GM.name ).str( " has been placed in " ).the( this ).item().str( " by " ).item( b ).str( ".</span>" ).ToString(), new Txt( "<span class='warning'>" ).item( GM.name ).str( " has been placed in " ).the( this ).item().str( " by you.</span>" ).ToString(), "<span class='warning'>You hear a loud clunk.</span>" );
						GlobalFuncs.qdel( G );
						GlobalVars.diaryofmeanpeople.WriteMsg( String13.HtmlDecode( "[" + GlobalFuncs.time_stamp() + "]ATTACK: " + ( "<font color='red'>" + Task13.User + " (" + Task13.User.ckey + ") placed " + GM + " (" + GM.ckey + ") in a disposals unit.</font>" ) ) );
					}
				}
				return null;
			}

			if ( !Lang13.Bool( a ) ) {
				return null;
			}

			if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
				((Ent_Static)b).visible_message( new Txt().item( b.name ).str( " places " ).the( a ).item().str( " into the " ).item( this ).str( "." ).ToString(), new Txt( "You place " ).the( a ).item().str( " into the " ).item( this ).str( "." ).ToString() );
			}
			this.update_icon();
			return null;
		}

		// Function from file: disposal.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			double? child_severity = null;
			Obj O = null;

			child_severity = severity;

			if ( !Lang13.Bool( child ) ) {
				child_severity++;
			}

			if ( ( child_severity ??0) <= 3 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.contents, typeof(Obj) )) {
					O = _a;
					
					O.ex_act( child_severity );
				}
			}

			dynamic _b = severity; // Was a switch-case, sorry for the mess.
			if ( 2<=_b&&_b<=Double.PositiveInfinity ) {
				
				if ( Rand13.PercentChance( 50 ) ) {
					this.eject();

					if ( severity == 2 ) {
						GlobalFuncs.qdel( this );
					}
				}
			} else if ( _b==1 ) {
				this.eject();
				GlobalFuncs.qdel( this );
			}
			return false;
		}

		// Function from file: disposal.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( Lang13.Bool( this.trunk ) ) {
				
				if ( Lang13.Bool( this.trunk.disposal ) ) {
					this.trunk.disposal = null;
				}

				if ( Lang13.Bool( this.trunk.linked ) ) {
					this.trunk.linked = null;
				}
				this.trunk = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}