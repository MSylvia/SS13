// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Implant_Uplink : Obj_Item_Weapon_Implant {

		public dynamic activation_emote = "chuckle";

		// Function from file: implantuplink.dm
		public Obj_Item_Weapon_Implant_Uplink ( dynamic loc = null ) : base( (object)(loc) ) {
			this.activation_emote = Rand13.Pick(new object [] { "blink", "blink_r", "eyebrow", "chuckle", "twitch_s", "frown", "nod", "blush", "giggle", "grin", "groan", "shrug", "smile", "pale", "sniff", "whimper", "wink" });
			this.hidden_uplink = new Obj_Item_Device_Uplink_Hidden( this );
			this.hidden_uplink.uses = 5;
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: vgstation13.dme
		public override bool trigger( dynamic emote = null, Mob_Living_Carbon_Human source = null ) {
			
			if ( this.hidden_uplink != null && Task13.User == source ) {
				this.hidden_uplink.check_trigger( source, emote, this.activation_emote );
			}
			return false;
		}

		// Function from file: implantuplink.dm
		[VerbInfo( name: "implanted" )]
		[VerbArg( 1, InputType.Mob )]
		public override bool f_implanted( dynamic M = null, dynamic user = null ) {
			this.activation_emote = Interface13.Input( "Choose activation emote:", null, null, null, new ByTable(new object [] { "blink", "blink_r", "eyebrow", "chuckle", "twitch_s", "frown", "nod", "blush", "giggle", "grin", "groan", "shrug", "smile", "pale", "sniff", "whimper", "wink" }), InputType.Any );
			M.mind.store_memory( "Uplink implant can be activated by using the " + this.activation_emote + " emote, <B>say *" + this.activation_emote + "</B> to attempt to activate.", 0, 0 );
			GlobalFuncs.to_chat( M, "The implanted uplink implant can be activated by using the " + this.activation_emote + " emote, <B>say *" + this.activation_emote + "</B> to attempt to activate." );
			return true;
		}

	}

}