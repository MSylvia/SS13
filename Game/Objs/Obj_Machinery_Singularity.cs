// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Singularity : Obj_Machinery {

		public double? current_size = 1;
		public double? allowed_size = 1;
		public bool contained = true;
		public double? energy = 100;
		public bool dissipate = true;
		public int dissipate_delay = 10;
		public int dissipate_track = 0;
		public int dissipate_strength = 1;
		public bool move_self = true;
		public int grav_pull = 4;
		public int consume_range = 0;
		public int event_chance = 15;
		public dynamic target = null;
		public dynamic last_movement_dir = 0;
		public dynamic last_failed_movement = 0;
		public int last_warning = 0;
		public bool chained = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 6;
			this.anchored = 1;
			this.unacidable = true;
			this.use_power = 0;
			this.icon = "icons/obj/singularity.dmi";
			this.icon_state = "singularity_s1";
			this.layer = 6;
		}

		// Function from file: singularity.dm
		public Obj_Machinery_Singularity ( dynamic loc = null, int? starting_energy = null, bool? temp = null ) : base( (object)(loc) ) {
			starting_energy = starting_energy ?? 50;
			temp = temp ?? false;

			Obj_Machinery_SingularityBeacon singubeacon = null;

			this.admin_investigate_setup();
			this.energy = starting_energy;

			if ( temp == true ) {
				Task13.Schedule( temp == true ?1:0, (Task13.Closure)(() => {
					GlobalFuncs.qdel( this );
					return;
				}));
			}
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.machines.Remove( this );
			GlobalVars.power_machines.Add( this );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_SingularityBeacon) )) {
				singubeacon = _a;
				

				if ( singubeacon.active ) {
					this.target = singubeacon;
					break;
				}
			}
			return;
		}

		// Function from file: singularity.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			base.Destroy( (object)(brokenup) );
			GlobalVars.power_machines.Remove( this );
			return null;
		}

		// Function from file: singularity.dm
		public override bool shuttle_act( Shuttle S = null ) {
			return false;
		}

		// Function from file: singularity.dm
		public override double singularity_act( double? current_size = null, Obj_Machinery_Singularity S = null ) {
			current_size = current_size ?? 0;

			double gain = 0;
			int dist = 0;

			
			if ( ( current_size ??0) >= ( this.current_size ??0) ) {
				gain = ( this.energy ??0) / 2;
				dist = Num13.MaxInt( ((int)( ( this.current_size ??0) - 2 )), 1 );
				GlobalFuncs.explosion( this.loc, dist, dist * 2, dist * 4 );
				GlobalFuncs.qdel( this );
				return gain;
			}
			return 0;
		}

		// Function from file: singularity.dm
		public override dynamic cultify(  ) {
			int dist = 0;

			dist = Num13.MaxInt( ((int)( ( this.current_size ??0) - 2 )), 1 );
			GlobalFuncs.explosion( GlobalFuncs.get_turf( this ), dist, dist * 2, dist * 4 );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: singularity.dm
		public virtual void on_release(  ) {
			this.chained = false;
			this.overlays = 0;
			this.move_self = true;
			return;
		}

		// Function from file: singularity.dm
		public virtual void on_capture(  ) {
			this.chained = true;
			this.overlays = 0;
			this.move_self = false;

			switch ((int?)( this.current_size )) {
				case 1:
					this.overlays.Add( new Image( "icons/obj/singularity.dmi", "chain_s1" ) );
					break;
				case 3:
					this.overlays.Add( new Image( "icons/effects/96x96.dmi", "chain_s3" ) );
					break;
				case 5:
					this.overlays.Add( new Image( "icons/effects/160x160.dmi", "chain_s5" ) );
					break;
				case 7:
					this.overlays.Add( new Image( "icons/effects/224x224.dmi", "chain_s7" ) );
					break;
				case 9:
					this.overlays.Add( new Image( "icons/effects/288x288.dmi", "chain_s9" ) );
					break;
			}
			return;
		}

		// Function from file: singularity.dm
		public void pulse(  ) {
			Obj_Machinery_Power_RadCollector R = null;

			
			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.rad_collectors, typeof(Obj_Machinery_Power_RadCollector) )) {
				R = _a;
				

				if ( Map13.GetDistance( R, this ) <= 15 ) {
					R.receive_pulse( this.energy );
				}
			}
			return;
		}

		// Function from file: singularity.dm
		public void smwave(  ) {
			Mob_Living M = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this.loc, 10 ), typeof(Mob_Living) )) {
				M = _a;
				

				if ( Rand13.PercentChance( 67 ) ) {
					M.apply_effect( Rand13.Int( ((int)( this.energy ??0 )) ), "irradiate" );
					GlobalFuncs.to_chat( M, "<span class='warning'>You hear an uneartly ringing, then what sounds like a shrilling kettle as you are washed with a wave of heat.</span>" );
					GlobalFuncs.to_chat( M, "<span class='notice'>Miraculously, it fails to kill you.</span>" );
				} else {
					GlobalFuncs.to_chat( M, "<span class='danger'>You hear an uneartly ringing, then what sounds like a shrilling kettle as you are washed with a wave of heat.</span>" );
					GlobalFuncs.to_chat( M, "<span class='danger'>You don't even have a moment to react as you are reduced to ashes by the intense radiation.</span>" );
					M.dust();
				}
			}
			return;
		}

		// Function from file: singularity.dm
		public void emp_area(  ) {
			
			if ( this.current_size != 11 ) {
				GlobalFuncs.empulse( this, 8, 10 );
			} else {
				GlobalFuncs.empulse( this, 12, 16 );
			}
			return;
		}

		// Function from file: singularity.dm
		public virtual void mezzer(  ) {
			Mob_Living_Carbon M = null;
			Mob_Living_Carbon H = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewersExcludeThis( this, 8 ), typeof(Mob_Living_Carbon) )) {
				M = _a;
				

				if ( M is Mob_Living_Carbon_Brain ) {
					continue;
				}

				if ( Lang13.Bool( M.flags & 128 ) ) {
					continue;
				}

				if ( M.stat == 0 ) {
					
					if ( M is Mob_Living_Carbon_Human ) {
						H = M;

						if ( ((dynamic)H).glasses is Obj_Item_Clothing_Glasses_Meson && this.current_size != 11 ) {
							GlobalFuncs.to_chat( H, new Txt( "<span class='notice'>You stare directly into " ).the( this ).item().str( ", good thing you had your protective eyewear on!</span>" ).ToString() );
							return;
						} else {
							GlobalFuncs.to_chat( H, new Txt( "<span class='warning'>You stare directly into " ).the( this ).item().str( " but your eyewear does absolutely nothing to protect you from it!</span>" ).ToString() );
						}
						M.visible_message( new Txt( "<span class='danger'>" ).item( M ).str( " stares blankly at " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='danger'>You stare directly into " ).the( this ).item().str( " and feel " ).item( ( this.current_size == 11 ? "helpless" : "weak" ) ).str( ".</span>" ).ToString() );
						M.apply_effect( 3, "stun" );
					}
				}
			}
			return;
		}

		// Function from file: singularity.dm
		public void toxmob(  ) {
			int toxrange = 0;
			double toxdamage = 0;
			double radiation = 0;
			double radiationmin = 0;
			Mob_Living M = null;

			toxrange = 10;
			toxdamage = 4;
			radiation = 15;
			radiationmin = 3;

			if ( ( this.energy ??0) > 200 ) {
				toxdamage = Num13.Round( ( ( this.energy ??0) - 150 ) / 50 * 4, 1 );
				radiation = Num13.Round( ( ( this.energy ??0) - 150 ) / 50 * 5, 1 );
				radiationmin = Num13.Round( radiation / 5, 1 );
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInView( this.loc, toxrange ), typeof(Mob_Living) )) {
				M = _a;
				

				if ( Lang13.Bool( M.flags & 128 ) ) {
					continue;
				}
				M.apply_effect( Rand13.Int( ((int)( radiationmin )), ((int)( radiation )) ), "irradiate" );
				toxdamage = toxdamage - toxdamage * M.getarmor( null, "rad" );
				M.apply_effect( toxdamage, "tox" );
			}
			return;
		}

		// Function from file: singularity.dm
		[VerbInfo( name: "event" )]
		public bool f_event(  ) {
			dynamic numb = null;

			numb = Rand13.Pick(new object [] { 1, 2, 3, 4, 5, 6 });

			dynamic _a = numb; // Was a switch-case, sorry for the mess.
			if ( _a==1 ) {
				this.emp_area();
			} else if ( _a==2 || _a==3 ) {
				this.toxmob();
			} else if ( _a==4 ) {
				this.mezzer();
			} else {
				return false;
			}

			if ( this.current_size == 11 ) {
				this.smwave();
			}
			return true;
		}

		// Function from file: singularity.dm
		public bool can_move( dynamic T = null ) {
			dynamic G = null;
			dynamic S = null;

			
			if ( !( T is Tile ) ) {
				return false;
			}

			if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_ContainmentField), T ) ) || Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Shieldwall), T ) ) ) {
				return false;
			} else if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_FieldGenerator), T ) ) ) {
				G = Lang13.FindIn( typeof(Obj_Machinery_FieldGenerator), T );

				if ( Lang13.Bool( G ) && Lang13.Bool( G.active ) ) {
					return false;
				}
			} else if ( Lang13.Bool( Lang13.FindIn( typeof(Obj_Machinery_Shieldwallgen), T ) ) ) {
				S = Lang13.FindIn( typeof(Obj_Machinery_Shieldwallgen), T );

				if ( Lang13.Bool( S ) && Lang13.Bool( S.active ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: singularity.dm
		public bool check_turfs_in( dynamic direction = null, int? step = null ) {
			direction = direction ?? 0;
			step = step ?? 0;

			int? steps = null;
			ByTable turfs = null;
			Ent_Static T = null;
			double i = 0;
			int dir2 = 0;
			int dir3 = 0;
			Ent_Static T2 = null;
			double j = 0;
			double k = 0;
			dynamic T3 = null;

			
			if ( !Lang13.Bool( direction ) ) {
				return false;
			}
			steps = 0;

			if ( !Lang13.Bool( step ) ) {
				
				switch ((int?)( this.current_size )) {
					case 1:
						steps = 1;
						break;
					case 3:
						steps = 3;
						break;
					case 5:
						steps = 3;
						break;
					case 7:
						steps = 4;
						break;
					case 9:
						steps = 5;
						break;
					case 11:
						steps = 6;
						break;
				}
			} else {
				steps = step;
			}
			turfs = new ByTable();
			T = this.loc;

			foreach (dynamic _b in Lang13.IterateRange( 1, steps )) {
				i = _b;
				
				T = Map13.GetStep( T, Convert.ToInt32( direction ) );
			}

			if ( !( T is Tile ) ) {
				return false;
			}
			turfs.Add( T );
			dir2 = 0;
			dir3 = 0;

			dynamic _c = direction; // Was a switch-case, sorry for the mess.
			if ( _c==1 ) {
				dir2 = 4;
				dir3 = 8;
			} else if ( _c==4 ) {
				dir2 = 1;
				dir3 = 2;
			}
			T2 = T;

			foreach (dynamic _d in Lang13.IterateRange( 1, steps )) {
				j = _d;
				
				T2 = Map13.GetStep( T2, dir2 );

				if ( !( T2 is Tile ) ) {
					return false;
				}
				turfs.Add( T2 );
			}

			foreach (dynamic _e in Lang13.IterateRange( 1, steps )) {
				k = _e;
				
				T = Map13.GetStep( T, dir3 );

				if ( !( T is Tile ) ) {
					return false;
				}
				turfs.Add( T );
			}

			foreach (dynamic _f in Lang13.Enumerate( turfs )) {
				T3 = _f;
				

				if ( T3 == null ) {
					continue;
				}

				if ( !this.can_move( T3 ) ) {
					return false;
				}
			}
			return true;
		}

		// Function from file: singularity.dm
		public virtual bool move( bool? force_move = null ) {
			force_move = force_move ?? false;

			dynamic movement_dir = null;

			
			if ( !this.move_self ) {
				return false;
			}
			movement_dir = Rand13.PickFromTable( GlobalVars.alldirs - this.last_failed_movement );

			if ( force_move == true ) {
				movement_dir = force_move;
			}

			if ( !( force_move == true ) && Lang13.Bool( this.target ) && Rand13.PercentChance( 66 ) ) {
				movement_dir = Map13.GetDistance( this, this.target );
			}

			if ( !( force_move == true ) && !Lang13.Bool( this.target ) && this.last_failed_movement != this.last_movement_dir && Rand13.PercentChance( 66 ) ) {
				movement_dir = this.last_movement_dir;
			}
			this.last_movement_dir = movement_dir;

			if ( ( this.current_size ??0) >= 9 ) {
				Task13.Schedule( 0, (Task13.Closure)(() => {
					Map13.Step( this, Convert.ToInt32( movement_dir ) );
					return;
				}));
				Task13.Schedule( 1, (Task13.Closure)(() => {
					Map13.Step( this, Convert.ToInt32( movement_dir ) );
					return;
				}));
				return true;
			} else if ( this.check_turfs_in( movement_dir ) ) {
				this.last_failed_movement = 0;
				Task13.Schedule( 0, (Task13.Closure)(() => {
					Map13.Step( this, Convert.ToInt32( movement_dir ) );
					return;
				}));
				return true;
			} else {
				this.last_failed_movement = movement_dir;
			}
			return false;
		}

		// Function from file: singularity.dm
		public virtual bool consume( dynamic A = null ) {
			double gain = 0;

			gain = ((Ent_Static)A).singularity_act( this.current_size, this );
			this.energy += gain;
			return false;
		}

		// Function from file: singularity.dm
		public bool canPull( Ent_Dynamic A = null ) {
			
			if ( A != null && !Lang13.Bool( A.anchored ) ) {
				
				if ( A.canSingulothPull( this ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: singularity.dm
		public virtual void eat(  ) {
			Ent_Static X = null;
			int dist = 0;
			Obj_Machinery_Singularity S = null;
			Exception e = null;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRangeExcludeThis( this, this.grav_pull ), typeof(Ent_Static) )) {
				X = _a;
				

				if ( X.type == typeof(Dynamic_LightingOverlay) ) {
					continue;
				}

				try {
					dist = Map13.GetDistance( X, this );
					S = this;

					if ( !( this is Obj_Machinery_Singularity ) ) {
						return;
					}

					if ( dist > this.consume_range ) {
						X.singularity_pull( S, this.current_size );
					} else if ( dist <= this.consume_range ) {
						this.consume( X );
					}
				} catch (Exception __) {
					e = __;
					GlobalFuncs.error( "Singularity eat() caught exception:" );
					GlobalFuncs.error( e.ToString() );
					continue;
				}
			}
			return;
		}

		// Function from file: singularity.dm
		public bool check_energy(  ) {
			
			if ( ( this.energy ??0) <= 0 ) {
				this.investigation_log( "singulo", "collapsed." );
				GlobalFuncs.qdel( this );
				return false;
			}

			dynamic _a = this.energy; // Was a switch-case, sorry for the mess.
			if ( 1<=_a&&_a<=199 ) {
				this.allowed_size = 1;
			} else if ( 200<=_a&&_a<=499 ) {
				this.allowed_size = 3;
			} else if ( 500<=_a&&_a<=999 ) {
				this.allowed_size = 5;
			} else if ( 1000<=_a&&_a<=1999 ) {
				this.allowed_size = 7;
			} else if ( 2000<=_a&&_a<=Double.PositiveInfinity ) {
				this.allowed_size = 9;
			}

			if ( this.current_size != this.allowed_size && this.current_size != 11 ) {
				
				if ( ( this.current_size ??0) > ( this.allowed_size ??0) ) {
					this.expand( null, false );
				} else {
					this.expand( null, true );
				}
			}
			return true;
		}

		// Function from file: singularity.dm
		public bool expand( double? force_size = null, bool? growing = null ) {
			force_size = force_size ?? 0;
			growing = growing ?? true;

			double? temp_allowed_size = null;

			
			if ( this.current_size == 11 ) {
				GlobalFuncs.message_admins( "expand() was called on a super singulo. This should not happen." );
				return false;
			}
			temp_allowed_size = this.allowed_size;

			if ( Lang13.Bool( force_size ) ) {
				temp_allowed_size = force_size;
			}

			switch ((int?)( temp_allowed_size )) {
				case 1:
					this.current_size = 1;
					this.icon = "icons/obj/singularity.dmi";
					this.icon_state = "singularity_s1";
					this.pixel_x = 0;
					this.pixel_y = 0;
					this.grav_pull = 4;
					this.consume_range = 0;
					this.dissipate_delay = 10;
					this.dissipate_track = 0;
					this.dissipate_strength = 1;
					this.overlays = 0;

					if ( this.chained ) {
						this.overlays.Add( "chain_s1" );
					}
					this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " shrinks to a rather pitiful size.</span>" ).ToString() );
					break;
				case 3:
					this.current_size = 3;
					this.icon = "icons/effects/96x96.dmi";
					this.icon_state = "singularity_s3";
					this.pixel_x = -32;
					this.pixel_y = -32;
					this.grav_pull = 6;
					this.consume_range = 1;
					this.dissipate_delay = 5;
					this.dissipate_track = 0;
					this.dissipate_strength = 5;
					this.overlays = 0;

					if ( this.chained ) {
						this.overlays.Add( "chain_s3" );
					}

					if ( growing == true ) {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " noticeably grows in size.</span>" ).ToString() );
					} else {
						this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " shrinks to a less powerful size.</span>" ).ToString() );
					}
					break;
				case 5:
					
					if ( this.check_turfs_in( 1, 2 ) && this.check_turfs_in( 2, 2 ) && this.check_turfs_in( 4, 2 ) && this.check_turfs_in( 8, 2 ) ) {
						this.current_size = 5;
						this.icon = "icons/effects/160x160.dmi";
						this.icon_state = "singularity_s5";
						this.pixel_x = -64;
						this.pixel_y = -64;
						this.grav_pull = 8;
						this.consume_range = 2;
						this.dissipate_delay = 4;
						this.dissipate_track = 0;
						this.dissipate_strength = 20;
						this.overlays = 0;

						if ( this.chained ) {
							this.overlays.Add( "chain_s5" );
						}

						if ( growing == true ) {
							this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " expands to a reasonable size.</span>" ).ToString() );
						} else {
							this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( " has returned to a safe size.</span>" ).ToString() );
						}
					}
					break;
				case 7:
					
					if ( this.check_turfs_in( 1, 3 ) && this.check_turfs_in( 2, 3 ) && this.check_turfs_in( 4, 3 ) && this.check_turfs_in( 8, 3 ) ) {
						this.current_size = 7;
						this.icon = "icons/effects/224x224.dmi";
						this.icon_state = "singularity_s7";
						this.pixel_x = -96;
						this.pixel_y = -96;
						this.grav_pull = 10;
						this.consume_range = 3;
						this.dissipate_delay = 10;
						this.dissipate_track = 0;
						this.dissipate_strength = 10;
						this.overlays = 0;

						if ( this.chained ) {
							this.overlays.Add( "chain_s7" );
						}

						if ( growing == true ) {
							this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " expands to a dangerous size.</span>" ).ToString() );
						} else {
							this.visible_message( new Txt( "<span class='notice'>Miraculously, " ).the( this ).item().str( " shrinks back to a containable size.</span>" ).ToString() );
						}
					}
					break;
				case 9:
					this.current_size = 9;
					this.icon = "icons/effects/288x288.dmi";
					this.icon_state = "singularity_s9";
					this.pixel_x = -128;
					this.pixel_y = -128;
					this.grav_pull = 10;
					this.consume_range = 4;
					this.dissipate = false;
					this.overlays = 0;

					if ( this.chained ) {
						this.overlays.Add( "chain_s9" );
					}

					if ( growing == true ) {
						this.visible_message( new Txt( "<span class='danger'><font size='2'>" ).The( this ).item().str( " has grown out of control!</font></span>" ).ToString() );
					} else {
						this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( " miraculously shrinks and loses its supermatter properties.</span>" ).ToString() );
						this.name = Lang13.Initial( this, "name" );
						this.desc = Lang13.Initial( this, "desc" );
					}
					break;
				case 11:
					this.name = "super " + this.name;
					this.desc = "The final form of Lord Singuloth. <b>It has the power to destroy worlds.</b> It can most likely still be used to power arcades too, <b>if you dare.</b>";
					this.current_size = 11;
					this.icon = "icons/effects/352x352.dmi";
					this.icon_state = "singularity_s11";
					this.pixel_x = -160;
					this.pixel_y = -160;
					this.grav_pull = 16;
					this.consume_range = 5;
					this.dissipate = false;
					this.event_chance = 25;

					if ( this.chained ) {
						this.overlays.Add( "chain_s9" );
					}
					this.visible_message( "<span class='sinister'><font size='3'>You witness the creation of a destructive force that cannot possibly be stopped by human hands.</font></span>" );
					break;
			}

			if ( this.current_size == this.allowed_size ) {
				this.investigation_log( "singulo", "<font color='red'>grew to size " + this.current_size + ".</font>" );
				return true;
			} else if ( ( this.current_size ??0) < ( --temp_allowed_size ??0) && this.current_size != 11 ) {
				this.expand( temp_allowed_size );
			} else {
				return false;
			}
			return false;
		}

		// Function from file: singularity.dm
		[VerbInfo( name: "dissipate" )]
		public void f_dissipate(  ) {
			
			if ( !this.dissipate ) {
				return;
			}

			if ( this.dissipate_track >= this.dissipate_delay ) {
				this.energy -= this.dissipate_strength;
				this.dissipate_track = 0;
			} else {
				this.dissipate_track++;
			}
			return;
		}

		// Function from file: singularity.dm
		public virtual void admin_investigate_setup(  ) {
			dynamic count = null;

			this.last_warning = Game13.time;
			count = Lang13.FindIn( typeof(Obj_Machinery_ContainmentField), Map13.FetchInRangeExcludeThis( this, 30 ) );

			if ( !Lang13.Bool( count ) ) {
				GlobalFuncs.message_admins( "A singulo has been created without containment fields active (" + this.x + ", " + this.y + ", " + this.z + " - <A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" + this.x + ";Y=" + this.y + ";Z=" + this.z + "'>JMP</a>)." );
			}
			this.investigation_log( "singulo", "was created. " + ( Lang13.Bool( count ) ? "" : "<font color='red'>No containment fields were active.</font>" ) );
			return;
		}

		// Function from file: singularity.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return null;
		}

		// Function from file: singularity.dm
		public override dynamic process(  ) {
			this.eat();
			this.f_dissipate();
			this.check_energy();

			if ( ( this.current_size ??0) >= 3 ) {
				this.move();
				this.pulse();

				if ( Rand13.PercentChance( this.event_chance ) ) {
					this.f_event();
				}
			}
			return null;
		}

		// Function from file: singularity.dm
		public override bool Bumped( Ent_Static AM = null, dynamic yes = null ) {
			this.consume( AM );
			return false;
		}

		// Function from file: singularity.dm
		public override dynamic Bump(Ent_Static Obstacle = null, dynamic yes = null) {
			this.consume( Obstacle );
			return null;
		}

		// Function from file: singularity.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			return 0;
		}

		// Function from file: singularity.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			if ( this.current_size == 11 ) {
				return false;
			}

			dynamic _a = severity; // Was a switch-case, sorry for the mess.
			if ( 2<=_a&&_a<=3 ) {
				this.energy += Num13.Round( Rand13.Int( 20, 60 ) / 2, 1 );
				return false;
			} else if ( _a==1 ) {
				
				if ( Rand13.PercentChance( 25 ) ) {
					this.investigation_log( "singulo", "has been destroyed by an explosion." );
					GlobalFuncs.qdel( this );
					return false;
				} else {
					this.energy += 50;
				}
			}
			return false;
		}

		// Function from file: singularity.dm
		public override bool blob_act( dynamic severity = null ) {
			return false;
		}

		// Function from file: singularity.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.consume( a );
			return 1;
		}

	}

}