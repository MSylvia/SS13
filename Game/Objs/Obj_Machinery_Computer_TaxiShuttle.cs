// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_TaxiShuttle : Obj_Machinery_Computer {

		public Shuttle_Taxi shuttle = null;
		public string id_tag = "";
		public string letter = "";
		public ByTable connected_buttons = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 67 });
			this.machine_flags = 1153;
			this.light_color = "#FA8282";
			this.icon_state = "syndishuttle";
		}

		// Function from file: taxi_shuttle.dm
		public Obj_Machinery_Computer_TaxiShuttle ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.taxi_computers.Add( this );
			return;
		}

		// Function from file: taxi_shuttle.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			this.visible_message( "" + Proj + " ricochets off " + this + "!" );
			return null;
		}

		// Function from file: taxi_shuttle.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob user = null;
			dynamic place = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}
			user = Task13.User;
			user.set_machine( this );

			foreach (dynamic _a in Lang13.Enumerate( href_list )) {
				place = _a;
				

				if ( Lang13.Bool( href_list[place] ) ) {
					
					if ( !this.allowed( user ) ) {
						this.callTo( place, this.shuttle.move_time_no_access );
					} else {
						this.callTo( place, this.shuttle.move_time_access );
					}
				}
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: taxi_shuttle.dm
		public override dynamic power_change(  ) {
			return null;
		}

		// Function from file: taxi_shuttle.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				this.emagged = 1;
				this.req_access = new ByTable();
				return 1;
			}
			return 0;
		}

		// Function from file: taxi_shuttle.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;

			((Mob)a).set_machine( this );

			if ( Lang13.Bool( this.shuttle.lockdown ) ) {
				dat += "<h2><font color='red'>THIS TAXI IS LOCKED DOWN</font></h2><br>";

				if ( this.shuttle.lockdown is string ) {
					dat += this.shuttle.lockdown;
				} else {
					dat += "Additional information has not been provided.";
				}
			} else if ( !Lang13.Bool( this.shuttle.linked_area ) ) {
				dat = "<h2><font color='red'>UNABLE TO FIND " + String13.ToUpper( this.shuttle.name ) + "</font></h2>";
			} else if ( !( this.shuttle.linked_port != null ) ) {
				dat += "<h2><font color='red'>ERROR: Unable to find the docking port. Please contact tech support.</font></h2><br>";
			} else if ( this.shuttle.moving ) {
				dat += "<center><h3>Currently moving " + ( Lang13.Bool( this.shuttle.destination_port.areaname ) ? "to " + this.shuttle.destination_port.areaname : "" ) + "</h3></center>";
			} else {
				dat = new Txt().item( ( Lang13.Bool( this.shuttle.current_port ) ? "Location: " + this.shuttle.current_port.areaname : "Location: UNKNOWN" ) ).str( "<br>\n			Ready to move" ).item( ( Num13.MaxInt( ((int)( this.shuttle.last_moved + Convert.ToDouble( this.shuttle.cooldown ) - Game13.time )), 0 ) != 0 ? " in " + Num13.MaxInt( Num13.Floor( ( this.shuttle.last_moved + Convert.ToDouble( this.shuttle.cooldown ) - Game13.time ) * 0.1 ), 0 ) + " seconds" : ": now" ) ).str( "<br><br>\n			<a href='?src=" ).Ref( this ).str( ";med_sili=1'>" ).item( this.shuttle.dock_medical_silicon.areaname ).str( "</a><br>\n			<a href='?src=" ).Ref( this ).str( ";engi_cargo=1'>" ).item( this.shuttle.dock_engineering_cargo.areaname ).str( "</a><br>\n			<a href='?src=" ).Ref( this ).str( ";sec_sci=1'>" ).item( this.shuttle.dock_security_science.areaname ).str( "</a><br>\n			" ).item( ( this.emagged != 0 ? new Txt( "<a href='?src=" ).Ref( this ).str( ";abandoned=1'>Abandoned Station</a><br>" ).ToString() : "" ) ).ToString();
			}
			Interface13.Browse( a, dat, "window=computer;size=575x450" );
			GlobalFuncs.onclose( a, "computer" );
			return null;
		}

		// Function from file: taxi_shuttle.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: taxi_shuttle.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: taxi_shuttle.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}
			return this.attack_hand( b );
		}

		// Function from file: taxi_shuttle.dm
		public bool callTo( dynamic place = null, int wait_time = 0 ) {
			place = place ?? "";

			
			dynamic _a = place; // Was a switch-case, sorry for the mess.
			if ( _a=="med_sili" ) {
				
				if ( this.taxi_move_to( this.shuttle.dock_medical_silicon, wait_time ) ) {
					return true;
				}
			} else if ( _a=="engi_cargo" ) {
				
				if ( this.taxi_move_to( this.shuttle.dock_engineering_cargo, wait_time ) ) {
					return true;
				}
			} else if ( _a=="sec_sci" ) {
				
				if ( this.taxi_move_to( this.shuttle.dock_security_science, wait_time ) ) {
					return true;
				}
			} else if ( _a=="abandoned" ) {
				
				if ( this.taxi_move_to( this.shuttle.dock_abandoned, wait_time ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: taxi_shuttle.dm
		public void broadcast( string message = null ) {
			message = message ?? "";

			Obj_Machinery_DoorControl_Taxi TB = null;

			
			if ( Lang13.Bool( message ) ) {
				this.visible_message( new Txt( " " ).icon( this ).ToString() + message );
			} else {
				return;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.connected_buttons, typeof(Obj_Machinery_DoorControl_Taxi) )) {
				TB = _a;
				
				TB.visible_message( new Txt( " " ).icon( TB ).ToString() + message );
			}
			return;
		}

		// Function from file: taxi_shuttle.dm
		public bool taxi_move_to( dynamic destination = null, int wait_time = 0 ) {
			
			if ( this.shuttle.moving ) {
				return false;
			}

			if ( !this.shuttle.can_move() ) {
				return false;
			}

			if ( this.shuttle.current_port == destination ) {
				return false;
			}
			this.shuttle.pre_flight_delay = wait_time;
			this.broadcast( new Txt().item( GlobalFuncs.capitalize( this.shuttle.name ) ).str( " will move in " ).item( wait_time / 10 ).str( " second" ).s().str( "." ).ToString() );
			return this.shuttle.travel_to( destination );
		}

		// Function from file: taxi_shuttle.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );
			this.icon_state = "syndishuttle";
			return null;
		}

		// Function from file: taxi_shuttle.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.taxi_computers.Remove( this );
			this.connected_buttons = new ByTable();
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}