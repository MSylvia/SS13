// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_MedData : Obj_Machinery_Computer {

		public dynamic scan = null;
		public string authenticated = null;
		public dynamic rank = null;
		public double? screen = null;
		public dynamic active1 = null;
		public dynamic active2 = null;
		public dynamic a_id = null;
		public string temp = null;
		public bool? printing = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_one_access = new ByTable(new object [] { 5, 4 });
			this.circuit = "/obj/item/weapon/circuitboard/med_data";
			this.light_color = "#6496FA";
			this.icon_state = "medcomp";
		}

		public Obj_Machinery_Computer_MedData ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: medical.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: medical.dm
		public override dynamic emp_act( int severity = 0 ) {
			Data_Record R = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return null;
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
				R = _b;
				

				if ( Rand13.PercentChance( ((int)( 10 / severity )) ) ) {
					
					switch ((int)( Rand13.Int( 1, 6 ) )) {
						case 1:
							R.fields["name"] = "" + Rand13.Pick(new object [] { Rand13.PickFromTable( GlobalVars.first_names_male ), Rand13.PickFromTable( GlobalVars.first_names_female ) }) + " " + Rand13.PickFromTable( GlobalVars.last_names );
							break;
						case 2:
							R.fields["sex"] = Rand13.Pick(new object [] { "Male", "Female" });
							break;
						case 3:
							R.fields["age"] = Rand13.Int( 5, 85 );
							break;
						case 4:
							R.fields["b_type"] = Rand13.Pick(new object [] { "A-", "B-", "AB-", "O-", "A+", "B+", "AB+", "O+" });
							break;
						case 5:
							R.fields["p_stat"] = Rand13.Pick(new object [] { "*SSD*", "Active", "Physically Unfit", "Disabled" });
							break;
						case 6:
							R.fields["m_stat"] = Rand13.Pick(new object [] { "*Insane*", "*Unstable*", "*Watch*", "Stable" });
							break;
					}
					continue;
				} else if ( Rand13.PercentChance( 1 ) ) {
					GlobalFuncs.qdel( R );
					R = null;
					continue;
				}
			}
			base.emp_act( severity );
			return null;
		}

		// Function from file: medical.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic I = null;
			Mob R = null;
			dynamic v = null;
			Data_Record R2 = null;
			dynamic a1 = null;
			dynamic a2 = null;
			string t1 = null;
			dynamic t12 = null;
			string t13 = null;
			string t14 = null;
			string t15 = null;
			string t16 = null;
			string t17 = null;
			string t18 = null;
			string t19 = null;
			string t110 = null;
			string t111 = null;
			string t112 = null;
			dynamic v2 = null;
			string t113 = null;
			dynamic v3 = null;
			string t114 = null;
			dynamic R3 = null;
			dynamic M = null;
			Data_Record E = null;
			Data_Record R4 = null;
			dynamic a22 = null;
			string t115 = null;
			int counter = 0;
			bool norange = false;
			string t116 = null;
			Data_Record R5 = null;
			Data_Record E2 = null;
			Obj_Item_Weapon_Paper P = null;
			int counter2 = 0;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( !( GlobalVars.data_core.general.Find( this.active1 ) != 0 ) ) {
				this.active1 = null;
			}

			if ( !( GlobalVars.data_core.medical.Find( this.active2 ) != 0 ) ) {
				this.active2 = null;
			}

			if ( Task13.User.contents.Find( this ) != 0 || GlobalFuncs.in_range( this, Task13.User ) && this.loc is Tile || Task13.User is Mob_Living_Silicon ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["temp"] ) ) {
					this.temp = null;
				}

				if ( Lang13.Bool( href_list["scan"] ) ) {
					
					if ( Lang13.Bool( this.scan ) ) {
						
						if ( Task13.User is Mob_Living_Carbon_Human ) {
							this.scan.loc = Task13.User.loc;

							if ( !Lang13.Bool( Task13.User.get_active_hand() ) ) {
								Task13.User.put_in_hands( this.scan );
							}
							this.scan = null;
						} else {
							this.scan.loc = this.loc;
							this.scan = null;
						}
					} else {
						I = Task13.User.get_active_hand();

						if ( I is Obj_Item_Weapon_Card_Id ) {
							
							if ( Task13.User.drop_item( I, this ) ) {
								this.scan = I;
							}
						}
					}
				} else if ( Lang13.Bool( href_list["logout"] ) ) {
					this.authenticated = null;
					this.screen = null;
					this.active1 = null;
					this.active2 = null;
				} else if ( Lang13.Bool( href_list["login"] ) ) {
					
					if ( Task13.User is Mob_Living_Silicon_Ai ) {
						this.active1 = null;
						this.active2 = null;
						this.authenticated = Task13.User.name;
						this.rank = "AI";
						this.screen = 1;
					} else if ( Task13.User is Mob_Living_Silicon_Robot ) {
						this.active1 = null;
						this.active2 = null;
						this.authenticated = Task13.User.name;
						R = Task13.User;
						this.rank = "" + ((dynamic)R).modtype + " " + ((dynamic)R).braintype;
						this.screen = 1;
					} else if ( this.scan is Obj_Item_Weapon_Card_Id ) {
						this.active1 = null;
						this.active2 = null;

						if ( this.check_access( this.scan ) ) {
							this.authenticated = this.scan.registered_name;
							this.rank = this.scan.assignment;
							this.screen = 1;
						}
					}
				}

				if ( Lang13.Bool( this.authenticated ) ) {
					
					if ( Lang13.Bool( href_list["screen"] ) ) {
						this.screen = String13.ParseNumber( href_list["screen"] );

						if ( ( this.screen ??0) < 1 ) {
							this.screen = 1;
						}
						this.active1 = null;
						this.active2 = null;
					}

					if ( Lang13.Bool( href_list["vir"] ) ) {
						v = Lang13.FindObj( href_list["vir"] );
						this.temp = "<center>GNAv2 based virus lifeform V-" + v.fields["id"] + "</center>";
						this.temp += new Txt( "<br><b>Name:</b> <A href='?src=" ).Ref( this ).str( ";field=vir_name;edit_vir=" ).Ref( v ).str( "'>" ).item( v.fields["name"] ).str( "</A>" ).ToString();
						this.temp += "<br><b>Antigen:</b> " + v.fields["antigen"];
						this.temp += "<br><b>Spread:</b> " + v.fields["spread type"] + " ";
						this.temp += new Txt( "<br><b>Details:</b><br> <A href='?src=" ).Ref( this ).str( ";field=vir_desc;edit_vir=" ).Ref( v ).str( "'>" ).item( v.fields["description"] ).str( "</A>" ).ToString();
					}

					if ( Lang13.Bool( href_list["del_all"] ) ) {
						this.temp = new Txt( "Are you sure you wish to delete all records?<br>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;del_all2=1'>Yes</A><br>\n	<A href='?src=" ).Ref( this ).str( ";temp=1'>No</A><br>" ).ToString();
					}

					if ( Lang13.Bool( href_list["del_all2"] ) ) {
						
						foreach (dynamic _a in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
							R2 = _a;
							
							GlobalFuncs.qdel( R2 );
							R2 = null;
						}
						this.temp = "All records deleted.";
					}

					if ( Lang13.Bool( href_list["field"] ) ) {
						a1 = this.active1;
						a2 = this.active2;

						dynamic _b = href_list["field"]; // Was a switch-case, sorry for the mess.
						if ( _b=="fingerprint" ) {
							
							if ( this.active1 is Data_Record ) {
								t1 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please input fingerprint hash:", "Med. records", this.active1.fields["fingerprint"], null, null, InputType.Str ) ), 1, 1024 );

								if ( !Lang13.Bool( t1 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active1 != a1 ) {
									return null;
								}
								this.active1.fields["fingerprint"] = t1;
							}
						} else if ( _b=="sex" ) {
							
							if ( this.active1 is Data_Record ) {
								
								if ( this.active1.fields["sex"] == "Male" ) {
									this.active1.fields["sex"] = "Female";
								} else {
									this.active1.fields["sex"] = "Male";
								}
							}
						} else if ( _b=="age" ) {
							
							if ( this.active1 is Data_Record ) {
								t12 = Interface13.Input( "Please input age:", "Med. records", this.active1.fields["age"], null, null, InputType.Num );

								if ( !Lang13.Bool( t12 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active1 != a1 ) {
									return null;
								}
								this.active1.fields["age"] = t12;
							}
						} else if ( _b=="mi_dis" ) {
							
							if ( this.active2 is Data_Record ) {
								t13 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please input minor disabilities list:", "Med. records", this.active2.fields["mi_dis"], null, null, InputType.Str ) ), 1, 1024 );

								if ( !Lang13.Bool( t13 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["mi_dis"] = t13;
							}
						} else if ( _b=="mi_dis_d" ) {
							
							if ( this.active2 is Data_Record ) {
								t14 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please summarize minor dis.:", "Med. records", this.active2.fields["mi_dis_d"], null, null, InputType.StrMultiline ) ), 1, 1024 );

								if ( !Lang13.Bool( t14 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["mi_dis_d"] = t14;
							}
						} else if ( _b=="ma_dis" ) {
							
							if ( this.active2 is Data_Record ) {
								t15 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please input major diabilities list:", "Med. records", this.active2.fields["ma_dis"], null, null, InputType.Str ) ), 1, 1024 );

								if ( !Lang13.Bool( t15 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["ma_dis"] = t15;
							}
						} else if ( _b=="ma_dis_d" ) {
							
							if ( this.active2 is Data_Record ) {
								t16 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please summarize major dis.:", "Med. records", this.active2.fields["ma_dis_d"], null, null, InputType.StrMultiline ) ), 1, 1024 );

								if ( !Lang13.Bool( t16 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["ma_dis_d"] = t16;
							}
						} else if ( _b=="alg" ) {
							
							if ( this.active2 is Data_Record ) {
								t17 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please state allergies:", "Med. records", this.active2.fields["alg"], null, null, InputType.Str ) ), 1, 1024 );

								if ( !Lang13.Bool( t17 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["alg"] = t17;
							}
						} else if ( _b=="alg_d" ) {
							
							if ( this.active2 is Data_Record ) {
								t18 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please summarize allergies:", "Med. records", this.active2.fields["alg_d"], null, null, InputType.StrMultiline ) ), 1, 1024 );

								if ( !Lang13.Bool( t18 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["alg_d"] = t18;
							}
						} else if ( _b=="cdi" ) {
							
							if ( this.active2 is Data_Record ) {
								t19 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please state diseases:", "Med. records", this.active2.fields["cdi"], null, null, InputType.Str ) ), 1, 1024 );

								if ( !Lang13.Bool( t19 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["cdi"] = t19;
							}
						} else if ( _b=="cdi_d" ) {
							
							if ( this.active2 is Data_Record ) {
								t110 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please summarize diseases:", "Med. records", this.active2.fields["cdi_d"], null, null, InputType.StrMultiline ) ), 1, 1024 );

								if ( !Lang13.Bool( t110 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["cdi_d"] = t110;
							}
						} else if ( _b=="notes" ) {
							
							if ( this.active2 is Data_Record ) {
								t111 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please summarize notes:", "Med. records", this.active2.fields["notes"], null, null, InputType.StrMultiline ) ), 1, 1024 );

								if ( !Lang13.Bool( t111 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a2 ) {
									return null;
								}
								this.active2.fields["notes"] = t111;
							}
						} else if ( _b=="p_stat" ) {
							
							if ( this.active1 is Data_Record ) {
								this.temp = new Txt( "<B>Physical Condition:</B><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;p_stat=deceased'>*Deceased*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;p_stat=unconscious'>*Unconscious*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;p_stat=active'>Active</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;p_stat=unfit'>Physically Unfit</A><BR>" ).ToString();
							}
						} else if ( _b=="m_stat" ) {
							
							if ( this.active1 is Data_Record ) {
								this.temp = new Txt( "<B>Mental Condition:</B><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;m_stat=insane'>*Insane*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;m_stat=unstable'>*Unstable*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;m_stat=watch'>*Watch*</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;m_stat=stable'>Stable</A><BR>" ).ToString();
							}
						} else if ( _b=="b_type" ) {
							
							if ( this.active2 is Data_Record ) {
								this.temp = new Txt( "<B>Blood Type:</B><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;b_type=an'>A-</A> <A href='?src=" ).Ref( this ).str( ";temp=1;b_type=ap'>A+</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;b_type=bn'>B-</A> <A href='?src=" ).Ref( this ).str( ";temp=1;b_type=bp'>B+</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;b_type=abn'>AB-</A> <A href='?src=" ).Ref( this ).str( ";temp=1;b_type=abp'>AB+</A><BR>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;b_type=on'>O-</A> <A href='?src=" ).Ref( this ).str( ";temp=1;b_type=op'>O+</A><BR>" ).ToString();
							}
						} else if ( _b=="b_dna" ) {
							
							if ( this.active1 is Data_Record ) {
								t112 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please input DNA hash:", "Med. records", this.active1.fields["dna"], null, null, InputType.Str ) ), 1, 1024 );

								if ( !Lang13.Bool( t112 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active1 != a1 ) {
									return null;
								}
								this.active1.fields["dna"] = t112;
							}
						} else if ( _b=="vir_name" ) {
							v2 = Lang13.FindObj( href_list["edit_vir"] );

							if ( Lang13.Bool( v2 ) ) {
								t113 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please input pathogen name:", "VirusDB", v2.fields["name"], null, null, InputType.Str ) ), 1, 1024 );

								if ( !Lang13.Bool( t113 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active1 != a1 ) {
									return null;
								}
								v2.fields["name"] = t113;
							}
						} else if ( _b=="vir_desc" ) {
							v3 = Lang13.FindObj( href_list["edit_vir"] );

							if ( Lang13.Bool( v3 ) ) {
								t114 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Please input information about pathogen:", "VirusDB", v3.fields["description"], null, null, InputType.StrMultiline ) ), 1, 1024 );

								if ( !Lang13.Bool( t114 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active1 != a1 ) {
									return null;
								}
								v3.fields["description"] = t114;
							}
						}
					}

					if ( Lang13.Bool( href_list["p_stat"] ) ) {
						
						if ( Lang13.Bool( this.active1 ) ) {
							
							dynamic _c = href_list["p_stat"]; // Was a switch-case, sorry for the mess.
							if ( _c=="deceased" ) {
								this.active1.fields["p_stat"] = "*Deceased*";
							} else if ( _c=="ssd" ) {
								this.active1.fields["p_stat"] = "*SSD*";
							} else if ( _c=="active" ) {
								this.active1.fields["p_stat"] = "Active";
							} else if ( _c=="unfit" ) {
								this.active1.fields["p_stat"] = "Physically Unfit";
							} else if ( _c=="disabled" ) {
								this.active1.fields["p_stat"] = "Disabled";
							}
						}
					}

					if ( Lang13.Bool( href_list["m_stat"] ) ) {
						
						if ( Lang13.Bool( this.active1 ) ) {
							
							dynamic _d = href_list["m_stat"]; // Was a switch-case, sorry for the mess.
							if ( _d=="insane" ) {
								this.active1.fields["m_stat"] = "*Insane*";
							} else if ( _d=="unstable" ) {
								this.active1.fields["m_stat"] = "*Unstable*";
							} else if ( _d=="watch" ) {
								this.active1.fields["m_stat"] = "*Watch*";
							} else if ( _d=="stable" ) {
								this.active1.fields["m_stat"] = "Stable";
							}
						}
					}

					if ( Lang13.Bool( href_list["b_type"] ) ) {
						
						if ( Lang13.Bool( this.active2 ) ) {
							
							dynamic _e = href_list["b_type"]; // Was a switch-case, sorry for the mess.
							if ( _e=="an" ) {
								this.active2.fields["b_type"] = "A-";
							} else if ( _e=="bn" ) {
								this.active2.fields["b_type"] = "B-";
							} else if ( _e=="abn" ) {
								this.active2.fields["b_type"] = "AB-";
							} else if ( _e=="on" ) {
								this.active2.fields["b_type"] = "O-";
							} else if ( _e=="ap" ) {
								this.active2.fields["b_type"] = "A+";
							} else if ( _e=="bp" ) {
								this.active2.fields["b_type"] = "B+";
							} else if ( _e=="abp" ) {
								this.active2.fields["b_type"] = "AB+";
							} else if ( _e=="op" ) {
								this.active2.fields["b_type"] = "O+";
							}
						}
					}

					if ( Lang13.Bool( href_list["del_r"] ) ) {
						
						if ( Lang13.Bool( this.active2 ) ) {
							this.temp = new Txt( "Are you sure you wish to delete the record (Medical Portion Only)?<br>\n	<A href='?src=" ).Ref( this ).str( ";temp=1;del_r2=1'>Yes</A><br>\n	<A href='?src=" ).Ref( this ).str( ";temp=1'>No</A><br>" ).ToString();
						}
					}

					if ( Lang13.Bool( href_list["del_r2"] ) ) {
						
						if ( Lang13.Bool( this.active2 ) ) {
							GlobalFuncs.qdel( this.active2 );
							this.active2 = null;
						}
					}

					if ( Lang13.Bool( href_list["d_rec"] ) ) {
						R3 = Lang13.FindObj( href_list["d_rec"] );
						M = Lang13.FindObj( href_list["d_rec"] );

						if ( !( GlobalVars.data_core.general.Find( R3 ) != 0 ) ) {
							this.temp = "Record Not Found!";
							return null;
						}

						foreach (dynamic _f in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
							E = _f;
							

							if ( E.fields["name"] == R3.fields["name"] || E.fields["id"] == R3.fields["id"] ) {
								M = E;
							}
						}
						this.active1 = R3;
						this.active2 = M;
						this.screen = 4;
					}

					if ( Lang13.Bool( href_list["new"] ) ) {
						
						if ( this.active1 is Data_Record && !( this.active2 is Data_Record ) ) {
							R4 = new Data_Record();
							R4.fields["name"] = this.active1.fields["name"];
							R4.fields["id"] = this.active1.fields["id"];
							R4.name = "Medical Record #" + R4.fields["id"];
							R4.fields["b_type"] = "Unknown";
							R4.fields["b_dna"] = "Unknown";
							R4.fields["mi_dis"] = "None";
							R4.fields["mi_dis_d"] = "No minor disabilities have been declared.";
							R4.fields["ma_dis"] = "None";
							R4.fields["ma_dis_d"] = "No major disabilities have been diagnosed.";
							R4.fields["alg"] = "None";
							R4.fields["alg_d"] = "No allergies have been detected in this patient.";
							R4.fields["cdi"] = "None";
							R4.fields["cdi_d"] = "No diseases have been diagnosed at the moment.";
							R4.fields["notes"] = "No notes.";
							GlobalVars.data_core.medical.Add( R4 );
							this.active2 = R4;
							this.screen = 4;
						}
					}

					if ( Lang13.Bool( href_list["add_c"] ) ) {
						
						if ( !( this.active2 is Data_Record ) ) {
							return null;
						}
						a22 = this.active2;
						t115 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Add Comment:", "Med. records", null, null, null, InputType.StrMultiline ) ), 1, 1024 );

						if ( !Lang13.Bool( t115 ) || !Lang13.Bool( this.authenticated ) || Lang13.Bool( Task13.User.stat ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) || this.active2 != a22 ) {
							return null;
						}
						counter = 1;

						while (Lang13.Bool( this.active2.fields["com_" + counter] )) {
							counter++;
						}
						this.active2.fields["com_" + counter] = "Made by " + this.authenticated + " (" + this.rank + ") on " + String13.FormatTime( Game13.realtime, "DDD MMM DD hh:mm:ss" ) + "<BR>" + t115;
					}

					if ( Lang13.Bool( href_list["del_c"] ) ) {
						
						if ( this.active2 is Data_Record && Lang13.Bool( this.active2.fields["com_" + href_list["del_c"]] ) ) {
							this.active2.fields["com_" + href_list["del_c"]] = "<B>Deleted</B>";
						}
					}

					if ( Lang13.Bool( href_list["search"] ) ) {
						norange = Task13.User.mutations != null && Task13.User.mutations.len != 0 && false;
						t116 = String13.SubStr( GlobalFuncs.sanitize( Interface13.Input( "Search String: (Name, DNA, or ID)", "Med. records", null, null, null, InputType.Str ) ), 1, 1024 );

						if ( !Lang13.Bool( t116 ) || Lang13.Bool( Task13.User.stat ) || !Lang13.Bool( this.authenticated ) || Task13.User.restrained() || !GlobalFuncs.in_range( this, Task13.User ) && !( Task13.User is Mob_Living_Silicon ) && !norange ) {
							return null;
						}
						this.active1 = null;
						this.active2 = null;
						t116 = String13.ToLower( t116 );

						foreach (dynamic _g in Lang13.Enumerate( GlobalVars.data_core.medical, typeof(Data_Record) )) {
							R5 = _g;
							

							if ( String13.ToLower( R5.fields["name"] ) == t116 || t116 == String13.ToLower( R5.fields["id"] ) || t116 == String13.ToLower( R5.fields["b_dna"] ) ) {
								this.active2 = R5;
							}
						}

						if ( !Lang13.Bool( this.active2 ) ) {
							this.temp = "Could not locate record " + GlobalFuncs.sanitize( t116 ) + ".";
						} else {
							
							foreach (dynamic _h in Lang13.Enumerate( GlobalVars.data_core.general, typeof(Data_Record) )) {
								E2 = _h;
								

								if ( E2.fields["name"] == this.active2.fields["name"] || E2.fields["id"] == this.active2.fields["id"] ) {
									this.active1 = E2;
								}
							}
							this.screen = 4;
						}
					}

					if ( Lang13.Bool( href_list["print_p"] ) ) {
						
						if ( !( this.printing == true ) ) {
							this.printing = true;
							Task13.Sleep( 50 );
							P = new Obj_Item_Weapon_Paper( this.loc );
							P.info = "<CENTER><B>Medical Record</B></CENTER><BR>";

							if ( this.active1 is Data_Record && GlobalVars.data_core.general.Find( this.active1 ) != 0 ) {
								P.info += "Name: " + this.active1.fields["name"] + " ID: " + this.active1.fields["id"] + "<BR>\nSex: " + this.active1.fields["sex"] + "<BR>\nAge: " + this.active1.fields["age"] + "<BR>\nFingerprint: " + this.active1.fields["fingerprint"] + "<BR>\nPhysical Status: " + this.active1.fields["p_stat"] + "<BR>\nMental Status: " + this.active1.fields["m_stat"] + "<BR>";
							} else {
								P.info += "<B>General Record Lost!</B><BR>";
							}

							if ( this.active2 is Data_Record && GlobalVars.data_core.medical.Find( this.active2 ) != 0 ) {
								P.info += "<BR>\n<CENTER><B>Medical Data</B></CENTER><BR>\nBlood Type: " + this.active2.fields["b_type"] + "<BR>\nDNA: " + this.active2.fields["b_dna"] + "<BR>\n<BR>\nMinor Disabilities: " + this.active2.fields["mi_dis"] + "<BR>\nDetails: " + this.active2.fields["mi_dis_d"] + "<BR>\n<BR>\nMajor Disabilities: " + this.active2.fields["ma_dis"] + "<BR>\nDetails: " + this.active2.fields["ma_dis_d"] + "<BR>\n<BR>\nAllergies: " + this.active2.fields["alg"] + "<BR>\nDetails: " + this.active2.fields["alg_d"] + "<BR>\n<BR>\nCurrent Diseases: " + this.active2.fields["cdi"] + " (per disease info placed in log/comment section)<BR>\nDetails: " + this.active2.fields["cdi_d"] + "<BR>\n<BR>\nImportant Notes:<BR>\n	" + this.active2.fields["notes"] + "<BR>\n<BR>\n<CENTER><B>Comments/Log</B></CENTER><BR>";
								counter2 = 1;

								while (Lang13.Bool( this.active2.fields["com_" + counter2] )) {
									P.info += "" + this.active2.fields["com_" + counter2] + "<BR>";
									counter2++;
								}
							} else {
								P.info += "<B>Medical Record Lost!</B><BR>";
							}
							P.info += "</TT>";
							P.name = "paper- 'Medical Record'";
							this.printing = null;
						}
					}
				}
			}
			this.add_fingerprint( Task13.User );
			this.updateUsrDialog();
			return null;
		}

		// Function from file: medical.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			Data_Record R = null;
			Icon front = null;
			Icon side = null;
			int counter = 0;
			dynamic ID = null;
			dynamic v = null;
			dynamic bdat = null;
			Obj_Machinery_Bot_Medbot M = null;
			dynamic bl = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( this.temp ) ) {
				dat = new Txt( "<TT>" ).item( this.temp ).str( "</TT><BR><BR><A href='?src=" ).Ref( this ).str( ";temp=1'>Clear Screen</A>" ).ToString();
			} else {
				dat = new Txt( "Confirm Identity: <A href='?src=" ).Ref( this ).str( ";scan=1'>" ).item( ( Lang13.Bool( this.scan ) ? "" + this.scan.name : "----------" ) ).str( "</A><HR>" ).ToString();

				if ( Lang13.Bool( this.authenticated ) ) {
					
					switch ((double?)( this.screen )) {
						case 1:
							dat += new Txt( "\n<A href='?src=" ).Ref( this ).str( ";search=1'>Search Records</A>\n<BR><A href='?src=" ).Ref( this ).str( ";screen=2'>List Records</A>\n<BR>\n<BR><A href='?src=" ).Ref( this ).str( ";screen=5'>Virus Database</A>\n<BR><A href='?src=" ).Ref( this ).str( ";screen=6'>Medbot Tracking</A>\n<BR>\n<BR><A href='?src=" ).Ref( this ).str( ";screen=3'>Record Maintenance</A>\n<BR><A href='?src=" ).Ref( this ).str( ";logout=1'>{Log Out}</A><BR>\n" ).ToString();
							break;
						case 2:
							dat += "<B>Record List</B>:<HR>";

							if ( !( GlobalVars.data_core.general == null ) ) {
								
								foreach (dynamic _a in Lang13.Enumerate( GlobalFuncs.sortRecord( GlobalVars.data_core.general ), typeof(Data_Record) )) {
									R = _a;
									
									dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";d_rec=" ).Ref( R ).str( "'>" ).item( R.fields["id"] ).str( ": " ).item( R.fields["name"] ).str( "<BR>" ).ToString();
								}
							}
							dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";screen=1'>Back</A>" ).ToString();
							break;
						case 3:
							dat += new Txt( "<B>Records Maintenance</B><HR>\n<A href='?src=" ).Ref( this ).str( ";back=1'>Backup To Disk</A><BR>\n<A href='?src=" ).Ref( this ).str( ";u_load=1'>Upload From disk</A><BR>\n<A href='?src=" ).Ref( this ).str( ";del_all=1'>Delete All Records</A><BR>\n<BR>\n<A href='?src=" ).Ref( this ).str( ";screen=1'>Back</A>" ).ToString();
							break;
						case 4:
							front = new Icon( this.active1.fields["photo"], null, GlobalVars.SOUTH );
							side = new Icon( this.active1.fields["photo"], null, GlobalVars.WEST );
							Interface13.CacheBrowseResource( a, front, "front.png" );
							Interface13.CacheBrowseResource( a, side, "side.png" );
							dat += "<CENTER><B>Medical Record</B></CENTER><BR>";

							if ( this.active1 is Data_Record && GlobalVars.data_core.general.Find( this.active1 ) != 0 ) {
								dat += new Txt( "<table><tr><td>Name: " ).item( this.active1.fields["name"] ).str( " ID: " ).item( this.active1.fields["id"] ).str( "<BR>\n	Sex: <A href='?src=" ).Ref( this ).str( ";field=sex'>" ).item( this.active1.fields["sex"] ).str( "</A><BR>\n	Age: <A href='?src=" ).Ref( this ).str( ";field=age'>" ).item( this.active1.fields["age"] ).str( "</A><BR>\n	Fingerprint: <A href='?src=" ).Ref( this ).str( ";field=fingerprint'>" ).item( this.active1.fields["fingerprint"] ).str( "</A><BR>\n	Physical Status: <A href='?src=" ).Ref( this ).str( ";field=p_stat'>" ).item( this.active1.fields["p_stat"] ).str( "</A><BR>\n	Mental Status: <A href='?src=" ).Ref( this ).str( ";field=m_stat'>" ).item( this.active1.fields["m_stat"] ).str( "</A><BR></td><td align = center valign = top> Photo:<br><img src=front.png height=64 width=64 border=5><img src=side.png height=64 width=64 border=5></td></tr></table>" ).ToString();
							} else {
								dat += "<B>General Record Lost!</B><BR>";
							}

							if ( this.active2 is Data_Record && GlobalVars.data_core.medical.Find( this.active2 ) != 0 ) {
								dat += new Txt( "<BR>\n<CENTER><B>Medical Data</B></CENTER><BR>\nBlood Type: <A href='?src=" ).Ref( this ).str( ";field=b_type'>" ).item( this.active2.fields["b_type"] ).str( "</A><BR>\nDNA: <A href='?src=" ).Ref( this ).str( ";field=b_dna'>" ).item( this.active2.fields["b_dna"] ).str( "</A><BR>\n<BR>\nMinor Disabilities: <A href='?src=" ).Ref( this ).str( ";field=mi_dis'>" ).item( this.active2.fields["mi_dis"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=mi_dis_d'>" ).item( this.active2.fields["mi_dis_d"] ).str( "</A><BR>\n<BR>\nMajor Disabilities: <A href='?src=" ).Ref( this ).str( ";field=ma_dis'>" ).item( this.active2.fields["ma_dis"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=ma_dis_d'>" ).item( this.active2.fields["ma_dis_d"] ).str( "</A><BR>\n<BR>\nAllergies: <A href='?src=" ).Ref( this ).str( ";field=alg'>" ).item( this.active2.fields["alg"] ).str( "</A><BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=alg_d'>" ).item( this.active2.fields["alg_d"] ).str( "</A><BR>\n<BR>\nCurrent Diseases: <A href='?src=" ).Ref( this ).str( ";field=cdi'>" ).item( this.active2.fields["cdi"] ).str( "</A> (per disease info placed in log/comment section)<BR>\nDetails: <A href='?src=" ).Ref( this ).str( ";field=cdi_d'>" ).item( this.active2.fields["cdi_d"] ).str( "</A><BR>\n<BR>\nImportant Notes:<BR>\n	<A href='?src=" ).Ref( this ).str( ";field=notes'>" ).item( this.active2.fields["notes"] ).str( "</A><BR>\n<BR>\n<CENTER><B>Comments/Log</B></CENTER><BR>" ).ToString();
								counter = 1;

								while (Lang13.Bool( this.active2.fields["com_" + counter] )) {
									dat += new Txt().item( this.active2.fields["com_" + counter] ).str( "<BR><A href='?src=" ).Ref( this ).str( ";del_c=" ).item( counter ).str( "'>Delete Entry</A><BR><BR>" ).ToString();
									counter++;
								}
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";add_c=1'>Add Entry</A><BR><BR>" ).ToString();
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";del_r=1'>Delete Record (Medical Only)</A><BR><BR>" ).ToString();
							} else {
								dat += "<B>Medical Record Lost!</B><BR>";
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";new=1'>New Record</A><BR><BR>" ).ToString();
							}
							dat += new Txt( "\n<A href='?src=" ).Ref( this ).str( ";print_p=1'>Print Record</A><BR>\n<A href='?src=" ).Ref( this ).str( ";screen=2'>Back</A><BR>" ).ToString();
							break;
						case 5:
							dat += "<CENTER><B>Virus Database</B></CENTER>";

							foreach (dynamic _b in Lang13.Enumerate( GlobalVars.virusDB )) {
								ID = _b;
								
								v = GlobalVars.virusDB[ID];
								dat += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";vir=" ).Ref( v ).str( "'>" ).item( v.fields["name"] ).str( "</a>" ).ToString();
							}
							dat += new Txt( "<br><a href='?src=" ).Ref( this ).str( ";screen=1'>Back</a>" ).ToString();
							break;
						case 6:
							dat += new Txt( "<center><b>Medical Robot Monitor</b></center>\n						<a href='?src=" ).Ref( this ).str( ";screen=1'>Back</a>\n						<br><b>Medical Robots:</b>" ).ToString();
							bdat = null;

							foreach (dynamic _c in Lang13.Enumerate( GlobalVars.machines, typeof(Obj_Machinery_Bot_Medbot) )) {
								M = _c;
								

								if ( M.z != this.z ) {
									continue;
								}
								bl = GlobalFuncs.get_turf( M );

								if ( Lang13.Bool( bl ) ) {
									bdat += "" + M.name + " - <b>[" + ( bl.x - GlobalVars.WORLD_X_OFFSET[bl.z] ) + "," + ( bl.y - GlobalVars.WORLD_Y_OFFSET[bl.z] ) + "]</b> - " + ( M.on ? "Online" : "Offline" ) + "<br>";

									if ( !( M.reagent_glass == null ) && M.use_beaker ) {
										bdat += "Reservoir: [" + M.reagent_glass.reagents.total_volume + "/" + M.reagent_glass.reagents.maximum_volume + "]<br>";
									} else {
										bdat += "Using Internal Synthesizer.<br>";
									}
								}
							}

							if ( !Lang13.Bool( bdat ) ) {
								dat += "<br><center>None detected</center>";
							} else {
								dat += "<br>" + bdat;
							}
							break;
					}
				} else {
					dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";login=1'>{Log In}</A>" ).ToString();
				}
			}
			Interface13.Browse( a, "<HEAD><TITLE>Medical Records</TITLE></HEAD><TT>" + dat + "</TT>", "window=med_rec" );
			GlobalFuncs.onclose( a, "med_rec" );
			return null;
		}

		// Function from file: medical.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

	}

}