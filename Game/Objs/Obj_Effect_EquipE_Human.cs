// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Effect_EquipE_Human : Obj_Effect_EquipE {

		public dynamic target = null;

		public Obj_Effect_EquipE_Human ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: inventory.dm
		public override void done(  ) {
			int slot_to_process = 0;
			dynamic strip_item = null;
			dynamic organ = null;
			dynamic o = null;
			Obj_Item_Stack_Medical_Splint W = null;
			int suff = 0;
			dynamic O = null;
			dynamic S = null;
			dynamic O2 = null;
			dynamic M = null;
			dynamic M2 = null;
			dynamic M3 = null;
			dynamic W2 = null;

			this.target.cpr_time = true;

			if ( this.source is Mob_Living_SimpleAnimal ) {
				return;
			}

			if ( !Lang13.Bool( this.source ) || !Lang13.Bool( this.target ) ) {
				return;
			}

			if ( this.source.loc != this.s_loc ) {
				return;
			}

			if ( this.target.loc != this.t_loc ) {
				return;
			}

			if ( !((Ent_Static)this.source).Adjacent( this.target ) ) {
				return;
			}

			if ( Lang13.Bool( this.item ) ) {
				
				if ( ((Mob)this.source).get_active_hand() != this.item ) {
					return;
				}

				if ( this.item.cant_drop > 0 ) {
					return;
				}
			}

			if ( ((Mob)this.source).restrained() || Lang13.Bool( this.source.stat ) ) {
				return;
			}

			switch ((string)( this.place )) {
				case "mask":
					slot_to_process = 2;

					if ( Lang13.Bool( this.target.wear_mask ) && this.target.wear_mask.canremove ) {
						strip_item = this.target.wear_mask;
					}
					break;
				case "gloves":
					slot_to_process = 10;

					if ( Lang13.Bool( this.target.gloves ) && this.target.gloves.canremove ) {
						strip_item = this.target.gloves;
					}
					break;
				case "eyes":
					slot_to_process = 9;

					if ( Lang13.Bool( this.target.glasses ) ) {
						strip_item = this.target.glasses;
					}
					break;
				case "belt":
					slot_to_process = 6;

					if ( Lang13.Bool( this.target.belt ) ) {
						strip_item = this.target.belt;
					}
					break;
				case "s_store":
					slot_to_process = 17;

					if ( Lang13.Bool( this.target.s_store ) ) {
						strip_item = this.target.s_store;
					}
					break;
				case "head":
					slot_to_process = 11;

					if ( Lang13.Bool( this.target.head ) && this.target.head.canremove ) {
						strip_item = this.target.head;
					}
					break;
				case "ears":
					slot_to_process = 8;

					if ( Lang13.Bool( this.target.ears ) ) {
						strip_item = this.target.ears;
					}
					break;
				case "shoes":
					slot_to_process = 12;

					if ( Lang13.Bool( this.target.shoes ) && this.target.shoes.canremove ) {
						strip_item = this.target.shoes;
					}
					break;
				case "l_hand":
					
					if ( this.target is Obj_Item_Clothing_Suit_StraightJacket ) {
						GlobalFuncs.qdel( this );
					}
					slot_to_process = 4;

					if ( Lang13.Bool( this.target.l_hand ) ) {
						strip_item = this.target.l_hand;
					}
					break;
				case "r_hand":
					
					if ( this.target is Obj_Item_Clothing_Suit_StraightJacket ) {
						GlobalFuncs.qdel( this );
					}
					slot_to_process = 5;

					if ( Lang13.Bool( this.target.r_hand ) ) {
						strip_item = this.target.r_hand;
					}
					break;
				case "uniform":
					slot_to_process = 14;

					if ( Lang13.Bool( this.target.w_uniform ) && this.target.w_uniform.canremove ) {
						strip_item = this.target.w_uniform;
					}
					break;
				case "suit":
					slot_to_process = 13;

					if ( Lang13.Bool( this.target.wear_suit ) && this.target.wear_suit.canremove ) {
						strip_item = this.target.wear_suit;
					}
					break;
				case "id":
					slot_to_process = 7;

					if ( Lang13.Bool( this.target.wear_id ) ) {
						strip_item = this.target.wear_id;
					}
					break;
				case "back":
					slot_to_process = 1;

					if ( Lang13.Bool( this.target.back ) ) {
						strip_item = this.target.back;
					}
					break;
				case "handcuff":
					slot_to_process = 3;

					if ( Lang13.Bool( this.target.handcuffed ) ) {
						strip_item = this.target.handcuffed;
					}
					break;
				case "legcuff":
					slot_to_process = 19;

					if ( Lang13.Bool( this.target.legcuffed ) ) {
						strip_item = this.target.legcuffed;
					}
					break;
				case "splints":
					
					foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { "l_leg", "r_leg", "l_arm", "r_arm" }) )) {
						organ = _a;
						
						o = ((Mob_Living_Carbon_Human)this.target).get_organ( organ );

						if ( Lang13.Bool( o ) && Lang13.Bool( o.status & 256 ) ) {
							W = new Obj_Item_Stack_Medical_Splint( null, 1 );
							o.status &= 65279;

							if ( W != null ) {
								W.loc = this.target.loc;
								W.layer = Convert.ToDouble( Lang13.Initial( W, "layer" ) );
								W.add_fingerprint( this.source );
							}
						}
					}
					break;
				case "CPR":
					
					if ( Convert.ToDouble( this.target.health ) > Convert.ToDouble( GlobalVars.config.health_threshold_dead ) && Convert.ToDouble( this.target.health ) < Convert.ToDouble( GlobalVars.config.health_threshold_crit ) ) {
						suff = Num13.MinInt( Convert.ToInt32( ((Mob_Living)this.target).getOxyLoss() ), 7 );
						((Mob_Living)this.target).adjustOxyLoss( -suff );
						((Mob_Living)this.target).updatehealth();

						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchViewers( null, this.source ) )) {
							O = _b;
							
							O.show_message( "<span class='warning'>" + this.source + " performs CPR on " + this.target + "!</span>", 1 );
						}
						GlobalFuncs.to_chat( this.target, "<span class='notice'><b>You feel a breath of fresh air enter your lungs. It feels good.</b></span>" );
						GlobalFuncs.to_chat( this.source, "<span class='warning'>Repeat at least every 7 seconds.</span>" );
					}
					break;
				case "dnainjector":
					S = this.item;

					if ( Lang13.Bool( S ) ) {
						((Ent_Static)S).add_fingerprint( this.source );

						if ( !( S is Obj_Item_Weapon_Dnainjector ) ) {
							S.inuse = 0;
							GlobalFuncs.qdel( this );
						}
						S.inject( this.target, this.source );

						if ( S.s_time >= Game13.time + 30 ) {
							S.inuse = 0;
							GlobalFuncs.qdel( this );
						}
						S.s_time = Game13.time;

						foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this.source ) )) {
							O2 = _c;
							
							O2.show_message( "<span class='warning'>" + this.source + " injects " + this.target + " with the DNA Injector!</span>", 1 );
						}
						S.inuse = 0;
					}
					break;
				case "pockets":
					slot_to_process = 15;
					strip_item = this.target.l_store;
					break;
				case "internal":
					
					if ( Lang13.Bool( this.target.v_internal ) ) {
						((Ent_Static)this.target.v_internal).add_fingerprint( this.source );
						this.target.v_internal = null;

						if ( this.target.internals != null ) {
							((dynamic)this.target.internals).icon_state = "internal0";
						}
					} else if ( !( this.target.wear_mask is Obj_Item_Clothing_Mask ) ) {
						return;
					} else {
						
						if ( this.target.back is Obj_Item_Weapon_Tank ) {
							this.target.v_internal = this.target.back;
						} else if ( this.target.s_store is Obj_Item_Weapon_Tank ) {
							this.target.v_internal = this.target.s_store;
						} else if ( this.target.belt is Obj_Item_Weapon_Tank ) {
							this.target.v_internal = this.target.belt;
						}

						if ( Lang13.Bool( this.target.v_internal ) ) {
							
							foreach (dynamic _d in Lang13.Enumerate( Map13.FetchViewers( 1, this.target ) )) {
								M = _d;
								
								M.show_message( "" + this.target + " is now running on internals.", 1 );
							}
							((Ent_Static)this.target.v_internal).add_fingerprint( this.source );

							if ( this.target.internals != null ) {
								((dynamic)this.target.internals).icon_state = "internal1";
							}
						}
					}
					break;
				case "internal1":
					
					if ( Lang13.Bool( this.target.v_internal ) ) {
						((Ent_Static)this.target.v_internal).add_fingerprint( this.source );
						this.target.v_internal = null;

						if ( this.target.internals != null ) {
							((dynamic)this.target.internals).icon_state = "internal0";
						}
					} else if ( !( this.target.wear_mask is Obj_Item_Clothing_Mask ) ) {
						return;
					} else {
						
						if ( this.target.belt is Obj_Item_Weapon_Tank ) {
							this.target.v_internal = this.target.belt;
						}

						if ( Lang13.Bool( this.target.v_internal ) ) {
							
							foreach (dynamic _e in Lang13.Enumerate( Map13.FetchViewers( 1, this.target ) )) {
								M2 = _e;
								
								M2.show_message( "" + this.target + " is now running on internals.", 1 );
							}
							((Ent_Static)this.target.v_internal).add_fingerprint( this.source );

							if ( this.target.internals != null ) {
								((dynamic)this.target.internals).icon_state = "internal1";
							}
						}
					}
					break;
				case "internal2":
					
					if ( Lang13.Bool( this.target.v_internal ) ) {
						((Ent_Static)this.target.v_internal).add_fingerprint( this.source );
						this.target.v_internal = null;

						if ( this.target.internals != null ) {
							((dynamic)this.target.internals).icon_state = "internal0";
						}
					} else if ( !( this.target.wear_mask is Obj_Item_Clothing_Mask ) ) {
						return;
					} else {
						
						if ( this.target.s_store is Obj_Item_Weapon_Tank ) {
							this.target.v_internal = this.target.s_store;
						}

						if ( Lang13.Bool( this.target.v_internal ) ) {
							
							foreach (dynamic _f in Lang13.Enumerate( Map13.FetchViewers( 1, this.target ) )) {
								M3 = _f;
								
								M3.show_message( "" + this.target + " is now running on internals.", 1 );
							}
							((Ent_Static)this.target.v_internal).add_fingerprint( this.source );

							if ( this.target.internals != null ) {
								((dynamic)this.target.internals).icon_state = "internal1";
							}
						}
					}
					break;
			}

			if ( slot_to_process != 0 ) {
				
				if ( Lang13.Bool( strip_item ) ) {
					W2 = strip_item;

					if ( W2.cant_drop > 0 && ( this.target.r_hand == W2 || this.target.l_hand == W2 ) ) {
						this.source.WriteMsg( new Txt( "<span class='notice'>" ).The( W2 ).item().str( " is stuck to " ).the( this.target ).item().str( "!</span>" ).ToString() );
						return;
					}
					((Mob)this.target).u_equip( W2, true );

					if ( Lang13.Bool( this.target.client ) ) {
						this.target.client.screen -= W2;
					}

					if ( Lang13.Bool( W2 ) ) {
						W2.loc = this.target.loc;
						W2.layer = Lang13.Initial( W2, "layer" );
					}
					((Obj_Item)W2).stripped( this.target, this.source );
					((Ent_Static)W2).add_fingerprint( this.source );

					if ( slot_to_process == 15 ) {
						
						if ( Lang13.Bool( this.target.r_store ) ) {
							((Mob)this.target).u_equip( this.target.r_store, false );
						}
					}
				} else if ( Lang13.Bool( this.item ) && ((Mob_Living_Carbon_Human)this.target).has_organ_for_slot( slot_to_process ) ) {
					
					if ( ((Obj_Item)this.item).mob_can_equip( this.target, slot_to_process, false ) != 0 ) {
						((Mob)this.source).u_equip( this.item, true );
						((Mob)this.target).equip_to_slot_if_possible( this.item, slot_to_process, 0, true, true );
						this.source.update_icons();
						this.target.update_icons();
					}
				}
			}

			if ( Lang13.Bool( this.source ) && Lang13.Bool( this.target ) ) {
				
				if ( this.source.machine == this.target ) {
					((Mob)this.target).show_inv( this.source );
				}
			}
			GlobalFuncs.qdel( this );
			return;
		}

		// Function from file: inventory.dm
		public override dynamic process(  ) {
			bool count = false;
			dynamic organ = null;
			dynamic o = null;
			ByTable L = null;
			dynamic O = null;
			string message = null;
			Obj_Item I = null;
			Obj_Item I2 = null;
			dynamic M = null;

			
			if ( Lang13.Bool( this.item ) ) {
				((Ent_Static)this.item).add_fingerprint( this.source );
			} else {
				
				switch ((string)( this.place )) {
					case "mask":
						
						if ( !Lang13.Bool( this.target.wear_mask ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "l_hand":
						
						if ( !Lang13.Bool( this.target.l_hand ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "r_hand":
						
						if ( !Lang13.Bool( this.target.r_hand ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "suit":
						
						if ( !Lang13.Bool( this.target.wear_suit ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "uniform":
						
						if ( !Lang13.Bool( this.target.w_uniform ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "back":
						
						if ( !Lang13.Bool( this.target.back ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "syringe":
						return null;
						break;
					case "pill":
						return null;
						break;
					case "fuel":
						return null;
						break;
					case "drink":
						return null;
						break;
					case "dnainjector":
						return null;
						break;
					case "handcuff":
						
						if ( !Lang13.Bool( this.target.handcuffed ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "id":
						
						if ( !Lang13.Bool( this.target.wear_id ) || !Lang13.Bool( this.target.w_uniform ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "splints":
						count = false;

						foreach (dynamic _a in Lang13.Enumerate( new ByTable(new object [] { "l_leg", "r_leg", "l_arm", "r_arm" }) )) {
							organ = _a;
							
							o = this.target.organs_by_name[organ];

							if ( Lang13.Bool( o.status & 256 ) ) {
								count = true;
								break;
							}
						}

						if ( !count ) {
							GlobalFuncs.qdel( this );
							return null;
						}
						break;
					case "internal":
						
						if ( !( this.target.wear_mask is Obj_Item_Clothing_Mask && this.target.back is Obj_Item_Weapon_Tank && !Lang13.Bool( this.target.v_internal ) ) && !Lang13.Bool( this.target.v_internal ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "internal1":
						
						if ( !( this.target.wear_mask is Obj_Item_Clothing_Mask && this.target.belt is Obj_Item_Weapon_Tank && !Lang13.Bool( this.target.v_internal ) ) && !Lang13.Bool( this.target.v_internal ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
					case "internal2":
						
						if ( !( this.target.wear_mask is Obj_Item_Clothing_Mask && this.target.s_store is Obj_Item_Weapon_Tank && !Lang13.Bool( this.target.v_internal ) ) && !Lang13.Bool( this.target.v_internal ) ) {
							GlobalFuncs.qdel( this );
						}
						break;
				}
			}
			L = new ByTable(new object [] { "syringe", "pill", "drink", "dnainjector", "fuel" });

			if ( Lang13.Bool( this.item ) && !( L.Find( this.place ) != 0 ) ) {
				
				if ( this.source is Mob_Living_Silicon_Robot && this.place != "handcuff" ) {
					GlobalFuncs.qdel( this );
				}

				foreach (dynamic _c in Lang13.Enumerate( Map13.FetchViewers( null, this.target ) )) {
					O = _c;
					
					O.show_message( new Txt( "<span class='danger'>" ).item( this.source ).str( " is trying to put " ).a( this.item ).item().str( " on " ).item( this.target ).str( "</span>" ).ToString(), 1 );
				}
			} else {
				message = null;

				switch ((string)( this.place )) {
					case "syringe":
						message = "<span class='danger'>" + this.source + " is trying to inject " + this.target + "!</span>";
						break;
					case "pill":
						message = "<span class='danger'>" + this.source + " is trying to force " + this.target + " to swallow " + this.item + "!</span>";
						break;
					case "drink":
						message = "<span class='danger'>" + this.source + " is trying to force " + this.target + " to swallow a gulp of " + this.item + "!</span>";
						break;
					case "dnainjector":
						message = "<span class='danger'>" + this.source + " is trying to inject " + this.target + " with the " + this.item + "!</span>";
						break;
					case "mask":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Had their mask removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") mask</font>" );

						if ( Lang13.Bool( this.target.wear_mask ) && !this.target.wear_mask.canremove ) {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " fails to take off " ).a( this.target.wear_mask ).item().str( " from " ).item( this.target ).str( "'s head!</span>" ).ToString();
							return null;
						} else {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " is trying to take off " ).a( this.target.wear_mask ).item().str( " from " ).item( this.target ).str( "'s head!</span>" ).ToString();
						}
						break;
					case "l_hand":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their left hand item (" + this.target.l_hand + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") left hand item (" + this.target.l_hand + ")</font>" );
						message = new Txt( "<span class='danger'>" ).item( this.source ).str( " is trying to take off " ).a( this.target.l_hand ).item().str( " from " ).item( this.target ).str( "'s left hand!</span>" ).ToString();
						break;
					case "r_hand":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their right hand item (" + this.target.r_hand + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") right hand item (" + this.target.r_hand + ")</font>" );
						message = new Txt( "<span class='danger'>" ).item( this.source ).str( " is trying to take off " ).a( this.target.r_hand ).item().str( " from " ).item( this.target ).str( "'s right hand!</span>" ).ToString();
						break;
					case "gloves":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their gloves (" + this.target.gloves + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") gloves (" + this.target.gloves + ")</font>" );

						if ( Lang13.Bool( this.target.gloves ) && !this.target.gloves.canremove ) {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " fails to take off " ).a( this.target.gloves ).item().str( " from " ).item( this.target ).str( "'s hands!</span>" ).ToString();
							return null;
						} else {
							message = "<span class='danger'>" + this.source + " is trying to take off the " + this.target.gloves + " from " + this.target + "'s hands!</span>";
						}
						break;
					case "eyes":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their eyewear (" + this.target.glasses + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") eyewear (" + this.target.glasses + ")</font>" );

						if ( Lang13.Bool( this.target.glasses ) && !this.target.glasses.canremove ) {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " fails to take off " ).a( this.target.glasses ).item().str( " from " ).item( this.target ).str( "'s eyes!</span>" ).ToString();
							return null;
						} else {
							message = "<span class='danger'>" + this.source + " is trying to take off the " + this.target.glasses + " from " + this.target + "'s eyes!</span>";
						}
						break;
					case "ears":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their ear item (" + this.target.ears + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") ear item (" + this.target.ears + ")</font>" );

						if ( Lang13.Bool( this.target.ears ) && !this.target.ears.canremove ) {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " fails to take off " ).a( this.target.ears ).item().str( " from " ).item( this.target ).str( "'s ears!</span>" ).ToString();
							return null;
						} else {
							message = "<span class='danger'>" + this.source + " is trying to take off the " + this.target.ears + " from " + this.target + "'s ears!</span>";
						}
						break;
					case "head":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their hat (" + this.target.head + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") hat (" + this.target.head + ")</font>" );

						if ( Lang13.Bool( this.target.head ) && !this.target.head.canremove ) {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " fails to take off " ).a( this.target.head ).item().str( " from " ).item( this.target ).str( "'s head!</span>" ).ToString();
							return null;
						} else {
							message = "<span class='danger'>" + this.source + " is trying to take off the " + this.target.head + " from " + this.target + "'s head!</span>";
						}
						break;
					case "shoes":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their shoes (" + this.target.shoes + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") shoes (" + this.target.shoes + ")</font>" );

						if ( Lang13.Bool( this.target.shoes ) && !this.target.shoes.canremove ) {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " fails to take off " ).a( this.target.shoes ).item().str( " from " ).item( this.target ).str( "'s feet!</span>" ).ToString();
							return null;
						} else {
							message = "<span class='danger'>" + this.source + " is trying to take off the " + this.target.shoes + " from " + this.target + "'s feet!</span>";
						}
						break;
					case "belt":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their belt item (" + this.target.belt + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") belt item (" + this.target.belt + ")</font>" );

						if ( !this.pickpocket ) {
							message = "<span class='danger'>" + this.source + " is trying to take off the " + this.target.belt + " from " + this.target + "'s belt!</span>";
						} else {
							GlobalFuncs.to_chat( this.source, "<span class='notice'>You try to take off the " + this.target.belt + " from " + this.target + "'s belt!</span>" );
						}
						break;
					case "suit":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their suit (" + this.target.wear_suit + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") suit (" + this.target.wear_suit + ")</font>" );

						if ( Lang13.Bool( this.target.wear_suit ) && !this.target.wear_suit.canremove ) {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " fails to take off " ).a( this.target.wear_suit ).item().str( " from " ).item( this.target ).str( "'s body!</span>" ).ToString();
							return null;
						} else {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " is trying to take off " ).a( this.target.wear_suit ).item().str( " from " ).item( this.target ).str( "'s body!</span>" ).ToString();
						}
						break;
					case "back":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their back item (" + this.target.back + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") back item (" + this.target.back + ")</font>" );
						message = new Txt( "<span class='danger'>" ).item( this.source ).str( " is trying to take off " ).a( this.target.back ).item().str( " from " ).item( this.target ).str( "'s back!</span>" ).ToString();
						break;
					case "handcuff":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Was unhandcuffed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to unhandcuff " + this.target.name + "'s (" + this.target.ckey + ")</font>" );
						message = "<span class='danger'>" + this.source + " is trying to unhandcuff " + this.target + "!</span>";
						break;
					case "legcuff":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Was unlegcuffed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to unlegcuff " + this.target.name + "'s (" + this.target.ckey + ")</font>" );
						message = "<span class='danger'>" + this.source + " is trying to unlegcuff " + this.target + "!</span>";
						break;
					case "uniform":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their uniform (" + this.target.w_uniform + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") uniform (" + this.target.w_uniform + ")</font>" );

						foreach (dynamic _d in Lang13.Enumerate( new ByTable(new object [] { this.target.l_store, this.target.r_store }), typeof(Obj_Item) )) {
							I = _d;
							

							if ( I.on_found( this.source ) ) {
								return null;
							}
						}

						if ( Lang13.Bool( this.target.w_uniform ) && !this.target.w_uniform.canremove ) {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " fails to take off " ).a( this.target.w_uniform ).item().str( " from " ).item( this.target ).str( "'s body!</span>" ).ToString();
							return null;
						} else {
							message = new Txt( "<span class='danger'>" ).item( this.source ).str( " is trying to take off " ).a( this.target.w_uniform ).item().str( " from " ).item( this.target ).str( "'s body!</span>" ).ToString();
						}
						break;
					case "s_store":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their suit storage item (" + this.target.s_store + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") suit storage item (" + this.target.s_store + ")</font>" );
						message = new Txt( "<span class='danger'>" ).item( this.source ).str( " is trying to take off " ).a( this.target.s_store ).item().str( " from " ).item( this.target ).str( "'s suit!</span>" ).ToString();
						break;
					case "pockets":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their pockets emptied by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to empty " + this.target.name + "'s (" + this.target.ckey + ") pockets</font>" );

						foreach (dynamic _e in Lang13.Enumerate( new ByTable(new object [] { this.target.l_store, this.target.r_store }), typeof(Obj_Item) )) {
							I2 = _e;
							

							if ( I2.on_found( this.source ) ) {
								return null;
							}
						}
						message = "<span class='danger'>" + this.source + " is trying to empty " + this.target + "'s pockets.</span>";
						break;
					case "CPR":
						
						if ( !this.target.cpr_time ) {
							GlobalFuncs.qdel( this );
						}
						this.target.cpr_time = false;
						message = "<span class='danger'>" + this.source + " is trying perform CPR on " + this.target + "!</span>";
						break;
					case "id":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their ID (" + this.target.wear_id + ") removed by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to remove " + this.target.name + "'s (" + this.target.ckey + ") ID (" + this.target.wear_id + ")</font>" );

						if ( !this.pickpocket ) {
							message = "<span class='danger'>" + this.source + " is trying to take off " + this.target.wear_id + " from " + this.target + "'s uniform!</span>";
						} else {
							GlobalFuncs.to_chat( this.source, "<span class='notice'>You try to take off " + this.target.wear_id + " from " + this.target + "'s uniform!</span>" );
						}
						break;
					case "internal":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their internals toggled by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to toggle " + this.target.name + "'s (" + this.target.ckey + ") internals</font>" );

						if ( Lang13.Bool( this.target.v_internal ) ) {
							message = "<span class='danger'>" + this.source + " is trying to remove " + this.target + "'s internals</span>";
						} else {
							message = "<span class='danger'>" + this.source + " is trying to set on " + this.target + "'s internals.</span>";
						}
						break;
					case "internal1":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their internals toggled by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to toggle " + this.target.name + "'s (" + this.target.ckey + ") internals</font>" );

						if ( Lang13.Bool( this.target.v_internal ) ) {
							message = "<span class='danger'>" + this.source + " is trying to remove " + this.target + "'s internals</span>";
						} else {
							message = "<span class='danger'>" + this.source + " is trying to set on " + this.target + "'s internals.</span>";
						}
						break;
					case "internal2":
						this.target.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='orange'>Has had their internals toggled by " + this.source.name + " (" + this.source.ckey + ")</font>" );
						this.source.attack_log.Add( "[" + GlobalFuncs.time_stamp() + "] <font color='red'>Attempted to toggle " + this.target.name + "'s (" + this.target.ckey + ") internals</font>" );

						if ( Lang13.Bool( this.target.v_internal ) ) {
							message = "<span class='danger'>" + this.source + " is trying to remove " + this.target + "'s internals</span>";
						} else {
							message = "<span class='danger'>" + this.source + " is trying to set on " + this.target + "'s internals.</span>";
						}
						break;
					case "splints":
						message = "<span class='danger'>" + this.source + " is trying to remove " + this.target + "'s splints!</span>";
						break;
				}

				foreach (dynamic _g in Lang13.Enumerate( Map13.FetchViewers( null, this.target ) )) {
					M = _g;
					
					M.show_message( message, 1 );
				}
			}
			Task13.Schedule( 40, (Task13.Closure)(() => {
				this.done();
				return;
				return;
			}));
			return null;
		}

		// Function from file: inventory.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( Lang13.Bool( this.target ) ) {
				this.target.requests.Remove( this );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

	}

}