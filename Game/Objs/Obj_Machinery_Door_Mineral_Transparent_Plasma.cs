// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Door_Mineral_Transparent_Plasma : Obj_Machinery_Door_Mineral_Transparent {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.prefix = "plasma";
			this.hardness = 4;
		}

		public Obj_Machinery_Door_Mineral_Transparent_Plasma ( dynamic location = null ) : base( (object)(location) ) {
			
		}

		// Function from file: mineral.dm
		public void TemperatureAct( double? temperature = null ) {
			Tile_Simulated_Floor target_tile = null;
			GasMixture napalm = null;
			double toxinsToDeduce = 0;

			
			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this.loc, 2 ), typeof(Tile_Simulated_Floor) )) {
				target_tile = _a;
				
				napalm = new GasMixture();
				toxinsToDeduce = ( temperature ??0) / 10;
				napalm.toxins = toxinsToDeduce;
				napalm.temperature = 473.41;
				target_tile.assume_air( napalm );
				Task13.Schedule( 0, (Task13.Closure)(() => {
					target_tile.hotspot_expose( temperature, 400, null, true );
					return;
				}));
				this.hardness -= toxinsToDeduce / 100;
				this.CheckHardness();
			}
			return;
		}

		// Function from file: mineral.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( ( exposed_temperature ??0) > 300 ) {
				this.TemperatureAct( exposed_temperature );
			}
			return false;
		}

		// Function from file: mineral.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;

			
			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 0, b ) ) ) {
					this.TemperatureAct( 100 );
				}
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

	}

}