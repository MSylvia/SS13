// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Turretid : Obj_Machinery {

		public bool enabled = true;
		public bool lethal = false;
		public bool locked = true;
		public dynamic control_area = null;
		public bool ailock = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.req_access = new ByTable(new object [] { 16 });
			this.ghost_read = false;
			this.machine_flags = 1;
			this.icon = "icons/obj/device.dmi";
			this.icon_state = "motion3";
		}

		// Function from file: turrets.dm
		public Obj_Machinery_Turretid ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic A = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !Lang13.Bool( this.control_area ) ) {
				this.control_area = GlobalFuncs.get_area( this );
			} else if ( this.control_area is string ) {
				
				foreach (dynamic _a in Lang13.Enumerate( GlobalVars.areas )) {
					A = _a;
					

					if ( Lang13.Bool( A.name ) && A.name == this.control_area ) {
						this.control_area = A;
						break;
					}
				}
			} else if ( this.control_area is Type ) {
				this.control_area = Lang13.FindObj( this.control_area );
			}
			return;
		}

		// Function from file: turrets.dm
		public void update_icons(  ) {
			
			if ( this.enabled ) {
				
				if ( this.lethal ) {
					this.icon_state = "motion1";
				} else {
					this.icon_state = "motion3";
				}
			} else {
				this.icon_state = "motion0";
			}
			return;
		}

		// Function from file: turrets.dm
		public void updateTurrets(  ) {
			Obj_Machinery_Turret aTurret = null;

			
			if ( Lang13.Bool( this.control_area ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.control_area.contents, typeof(Obj_Machinery_Turret) )) {
					aTurret = _a;
					
					aTurret.setState( this.enabled, this.lethal );
				}
			}
			this.update_icons();
			return;
		}

		// Function from file: turrets.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( this.locked ) {
				
				if ( !( Task13.User is Mob_Living_Silicon ) ) {
					GlobalFuncs.to_chat( Task13.User, "Control panel is locked!" );
					return null;
				}
			}

			if ( Map13.GetDistance( this, Task13.User ) == 0 || Task13.User is Mob_Living_Silicon ) {
				
				if ( Lang13.Bool( href_list["toggleOn"] ) ) {
					this.enabled = !this.enabled;
					this.updateTurrets();
				} else if ( Lang13.Bool( href_list["toggleLethal"] ) ) {
					this.lethal = !this.lethal;
					this.updateTurrets();
				}
			}
			this.attack_hand( Task13.User );
			return null;
		}

		// Function from file: turrets.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			Ent_Static loc = null;
			Ent_Static area = null;
			string t = null;

			
			if ( Map13.GetDistance( this, a ) > 0 ) {
				
				if ( !( a is Mob_Living_Silicon ) ) {
					GlobalFuncs.to_chat( a, "<span class='notice'>You are too far away.</span>" );
					((Mob)a).unset_machine();
					Interface13.Browse( a, null, "window=turretid" );
					return null;
				}
			}
			((Mob)a).set_machine( this );
			loc = this.loc;

			if ( loc is Tile ) {
				loc = loc.loc;
			}

			if ( !( loc is Zone ) ) {
				GlobalFuncs.to_chat( a, "Turret badly positioned - loc.loc is " + loc + "." );
				return null;
			}
			area = loc;
			t = "<TT><B>Turret Control Panel</B> (" + area.name + ")<HR>";

			if ( this.locked && !( a is Mob_Living_Silicon ) ) {
				t += "<I>(Swipe ID card to unlock control panel.)</I><BR>";
			} else {
				t += new Txt( "Turrets " ).item( ( this.enabled ? "activated" : "deactivated" ) ).str( " - <A href='?src=" ).Ref( this ).str( ";toggleOn=1'>" ).item( ( this.enabled ? "Disable" : "Enable" ) ).str( "?</a><br>\n" ).ToString();
				t += new Txt( "Currently set for " ).item( ( this.lethal ? "lethal" : "stun repeatedly" ) ).str( " - <A href='?src=" ).Ref( this ).str( ";toggleLethal=1'>Change to " ).item( ( this.lethal ? "Stun repeatedly" : "Lethal" ) ).str( "?</a><br>\n" ).ToString();
			}
			Interface13.Browse( a, t, "window=turretid" );
			GlobalFuncs.onclose( a, "turretid" );
			return null;
		}

		// Function from file: turrets.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );

			if ( !this.ailock ) {
				return this.attack_hand( user );
			} else {
				GlobalFuncs.to_chat( user, "<span class='notice'>There seems to be a firewall preventing you from accessing this device.</span>" );
			}
			return null;
		}

		// Function from file: turrets.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( b is Mob_Living_Silicon ) {
				return this.attack_hand( b );
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );

			if ( Map13.GetDistance( this, b ) == 0 ) {
				
				if ( this.allowed( Task13.User ) ) {
					
					if ( this.emagged != 0 ) {
						GlobalFuncs.to_chat( b, "<span class='notice'>The turret control is unresponsive.</span>" );
						return null;
					}
					this.locked = !this.locked;
					GlobalFuncs.to_chat( b, "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the panel.</span>" );

					if ( this.locked ) {
						
						if ( b.machine == this ) {
							((Mob)b).unset_machine();
							Interface13.Browse( b, null, "window=turretid" );
						}
					} else if ( b.machine == this ) {
						this.attack_hand( b );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
			}
			return null;
		}

		// Function from file: turrets.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>You short out the turret controls' access analysis module.</span>" );
				this.emagged = 1;
				this.locked = false;

				if ( user.machine == this ) {
					this.attack_hand( user );
				}
				return 1;
			}
			return 0;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}