// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Turretid : Obj_Machinery {

		public bool enabled = true;
		public bool lethal = false;
		public bool locked = true;
		public dynamic control_area = null;
		public bool ailock = false;
		public ByTable turrets = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.req_access = new ByTable(new object [] { 16 });
			this.icon = "icons/obj/machines/turret_control.dmi";
			this.icon_state = "control_standby";
		}

		// Function from file: portable_turret.dm
		public Obj_Machinery_Turretid ( dynamic loc = null, bool? ndir = null, bool? built = null ) : base( (object)(loc) ) {
			ndir = ndir ?? false;
			built = built ?? false;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( built == true ) {
				this.dir = ndir == true ?1:0;
				this.locked = false;
				this.pixel_x = ( ( this.dir & 3 ) != 0 ? 0 : ( this.dir == 4 ? -24 : 24 ) );
				this.pixel_y = ( ( this.dir & 3 ) != 0 ? ( this.dir == 1 ? -24 : 24 ) : 0 );
			}
			this.power_change();
			return;
		}

		// Function from file: portable_turret.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			base.update_icon( (object)(new_state), (object)(new_icon), new_px, new_py );

			if ( ( this.stat & 2 ) != 0 ) {
				this.icon_state = "control_off";
			} else if ( this.enabled ) {
				
				if ( this.lethal ) {
					this.icon_state = "control_kill";
				} else {
					this.icon_state = "control_stun";
				}
			} else {
				this.icon_state = "control_standby";
			}
			return false;
		}

		// Function from file: portable_turret.dm
		public override void power_change(  ) {
			base.power_change();
			this.update_icon();
			return;
		}

		// Function from file: portable_turret.dm
		public void updateTurrets(  ) {
			Obj_Machinery_PortaTurret aTurret = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this.turrets, typeof(Obj_Machinery_PortaTurret) )) {
				aTurret = _a;
				
				aTurret.setState( this.enabled, this.lethal );
			}
			this.update_icon();
			return;
		}

		// Function from file: portable_turret.dm
		public void toggle_on(  ) {
			this.enabled = !this.enabled;
			this.updateTurrets();
			return;
		}

		// Function from file: portable_turret.dm
		public void toggle_lethal(  ) {
			this.lethal = !this.lethal;
			this.updateTurrets();
			return;
		}

		// Function from file: portable_turret.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( this.locked ) {
				
				if ( !( Task13.User is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( Task13.User ) ) ) ) {
					Task13.User.WriteMsg( "Control panel is locked!" );
					return null;
				}
			}

			if ( Lang13.Bool( href_list["toggleOn"] ) ) {
				this.toggle_on();
			} else if ( Lang13.Bool( href_list["toggleLethal"] ) ) {
				this.toggle_lethal();
			}
			this.attack_hand( Task13.User );
			return null;
		}

		// Function from file: portable_turret.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			Ent_Static loc = null;
			Ent_Static area = null;
			string t = null;
			Browser popup = null;

			
			if ( Map13.GetDistance( this, a ) > 0 ) {
				
				if ( !( a is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( a ) ) ) ) {
					a.WriteMsg( "<span class='notice'>You are too far away.</span>" );
					((Mob)a).unset_machine();
					Interface13.Browse( a, null, "window=turretid" );
					return null;
				}
			}
			((Mob)a).set_machine( this );
			loc = this.loc;

			if ( loc is Tile ) {
				loc = loc.loc;
			}

			if ( !( loc is Zone ) ) {
				a.WriteMsg( "Turret badly positioned - loc.loc is " + loc + "." );
				return null;
			}
			area = loc;
			t = "";

			if ( this.locked && !( a is Mob_Living_Silicon || Lang13.Bool( GlobalFuncs.IsAdminGhost( a ) ) ) ) {
				t += "<div class='notice icon'>Swipe ID card to unlock interface</div>";
			} else {
				
				if ( !( a is Mob_Living_Silicon ) && !Lang13.Bool( GlobalFuncs.IsAdminGhost( a ) ) ) {
					t += "<div class='notice icon'>Swipe ID card to lock interface</div>";
				}
				t += new Txt( "Turrets " ).item( ( this.enabled ? "activated" : "deactivated" ) ).str( " - <A href='?src=" ).Ref( this ).str( ";toggleOn=1'>" ).item( ( this.enabled ? "Disable" : "Enable" ) ).str( "?</a><br>\n" ).ToString();
				t += new Txt( "Currently set for " ).item( ( this.lethal ? "lethal" : "stun repeatedly" ) ).str( " - <A href='?src=" ).Ref( this ).str( ";toggleLethal=1'>Change to " ).item( ( this.lethal ? "Stun repeatedly" : "Lethal" ) ).str( "?</a><br>\n" ).ToString();
			}
			popup = new Browser( a, "turretid", "Turret Control Panel (" + area.name + ")" );
			popup.set_content( t );
			popup.set_title_image( ((Mob)a).browse_rsc_icon( this.icon, this.icon_state ) );
			popup.open();
			return null;
		}

		// Function from file: portable_turret.dm
		public override dynamic attack_ai( dynamic user = null ) {
			
			if ( !this.ailock || Lang13.Bool( GlobalFuncs.IsAdminGhost( user ) ) ) {
				return this.attack_hand( user );
			} else {
				user.WriteMsg( "<span class='notice'>There seems to be a firewall preventing you from accessing this device.</span>" );
			}
			return null;
		}

		// Function from file: portable_turret.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !Lang13.Bool( this.emagged ) ) {
				user.WriteMsg( "<span class='danger'>You short out the turret controls' access analysis module.</span>" );
				this.emagged = 1;
				this.locked = false;

				if ( Lang13.Bool( user ) && user.machine == this ) {
					this.attack_hand( user );
				}
			}
			return false;
		}

		// Function from file: portable_turret.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic M = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( A is Obj_Item_Device_Multitool ) {
				M = A;

				if ( Lang13.Bool( M.buffer ) && M.buffer is Obj_Machinery_PortaTurret ) {
					this.turrets.Or( M.buffer );
					user.WriteMsg( new Txt( "You link " ).the( M.buffer ).item().str( " with " ).the( this ).item().ToString() );
					return null;
				}
			}

			if ( user is Mob_Living_Silicon ) {
				return this.attack_hand( user );
			}

			if ( Map13.GetDistance( this, user ) == 0 ) {
				
				if ( this.allowed( Task13.User ) ) {
					
					if ( Lang13.Bool( this.emagged ) ) {
						user.WriteMsg( "<span class='notice'>The turret control is unresponsive.</span>" );
						return null;
					}
					this.locked = !this.locked;
					user.WriteMsg( "<span class='notice'>You " + ( this.locked ? "lock" : "unlock" ) + " the panel.</span>" );

					if ( this.locked ) {
						
						if ( user.machine == this ) {
							((Mob)user).unset_machine();
							Interface13.Browse( user, null, "window=turretid" );
						}
					} else if ( user.machine == this ) {
						this.attack_hand( user );
					}
				} else {
					user.WriteMsg( "<span class='warning'>Access denied.</span>" );
				}
			}
			return null;
		}

		// Function from file: portable_turret.dm
		public override void initialize(  ) {
			dynamic A = null;
			dynamic CA = null;
			Obj_Machinery_PortaTurret T = null;

			
			if ( Lang13.Bool( this.control_area ) && this.control_area is string ) {
				
				foreach (dynamic _a in Lang13.Enumerate( typeof(Game13) )) {
					A = _a;
					

					if ( A.name == this.control_area ) {
						this.control_area = A;
						break;
					}
				}
			}

			if ( !Lang13.Bool( this.control_area ) ) {
				CA = GlobalFuncs.get_area( this );

				if ( Lang13.Bool( CA.master ) && CA.master != CA ) {
					this.control_area = CA.master;
				} else {
					this.control_area = CA;
				}
			}

			foreach (dynamic _b in Lang13.Enumerate( GlobalFuncs.get_area_all_atoms( this.control_area ), typeof(Obj_Machinery_PortaTurret) )) {
				T = _b;
				
				this.turrets.Or( T );
			}
			return;
		}

		// Function from file: swarmer.dm
		public override void swarmer_act( Mob_Living_SimpleAnimal_Hostile_Swarmer S = null ) {
			S.DisIntegrate( this );
			return;
		}

		// Function from file: cyborg.dm
		public override void BorgAltClick( Mob_Living_Silicon_Robot user = null ) {
			this.AIAltClick();
			return;
		}

		// Function from file: cyborg.dm
		public override void BorgCtrlClick( Mob_Living_Silicon_Robot user = null ) {
			this.AICtrlClick();
			return;
		}

		// Function from file: ai.dm
		public override void AICtrlClick(  ) {
			this.toggle_on();
			this.add_fingerprint( Task13.User );
			return;
		}

		// Function from file: ai.dm
		public override void AIAltClick( Mob_Living_Silicon_Ai user = null ) {
			this.toggle_lethal();
			this.add_fingerprint( Task13.User );
			return;
		}

	}

}