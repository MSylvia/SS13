// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_RND_Protolathe : Obj_Machinery_RND {

		public MaterialContainer materials = null;
		public int efficiency_coeff = 0;
		public ByTable categories = new ByTable(new object [] { "Power Designs", "Medical Designs", "Bluespace Designs", "Stock Parts", "Equipment", "Mining Designs", "Electronics", "Weapons", "Ammo", "Firing Pins" });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 4096;
			this.reagents = new Reagents();
			this.icon_state = "protolathe";
		}

		// Function from file: protolathe.dm
		public Obj_Machinery_RND_Protolathe ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.component_parts = new ByTable();
			this.component_parts.Add( new Obj_Item_Weapon_Circuitboard_Protolathe( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_MatterBin( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_StockParts_Manipulator( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_ReagentContainers_Glass_Beaker( this ) );
			this.component_parts.Add( new Obj_Item_Weapon_ReagentContainers_Glass_Beaker( this ) );
			this.materials = new MaterialContainer( this, new ByTable().Set( "$metal", 1 ).Set( "$glass", 1 ).Set( "$silver", 1 ).Set( "$gold", 1 ).Set( "$diamond", 1 ).Set( "$plasma", 1 ).Set( "$uranium", 1 ).Set( "$bananium", 1 ) );
			this.RefreshParts();
			this.reagents.my_atom = this;
			return;
		}

		// Function from file: protolathe.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			Obj_Item_Weapon_ReagentContainers_Glass G = null;
			dynamic stack = null;
			double? amount = null;
			double? amount_inserted = null;
			dynamic stack_name = null;

			
			if ( this.shocked ) {
				this.shock( user, 50 );
			}

			if ( this.default_deconstruction_screwdriver( user, "protolathe_t", "protolathe", A ) ) {
				
				if ( Lang13.Bool( this.linked_console ) ) {
					this.linked_console.linked_lathe = null;
					this.linked_console = null;
				}
				return null;
			}

			if ( this.exchange_parts( user, A ) ) {
				return null;
			}

			if ( Lang13.Bool( this.panel_open ) ) {
				
				if ( A is Obj_Item_Weapon_Crowbar ) {
					
					foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_ReagentContainers_Glass) )) {
						G = _a;
						
						this.reagents.trans_to( G, G.reagents.maximum_volume );
					}
					this.materials.retrieve_all();
					this.default_deconstruction_crowbar( A );
					return 1;
				} else {
					user.WriteMsg( "<span class='warning'>You can't load the " + this.name + " while it's opened!</span>" );
					return 1;
				}
			}

			if ( this.disabled ) {
				return null;
			}

			if ( !Lang13.Bool( this.linked_console ) ) {
				user.WriteMsg( "<span class='warning'>The " + this.name + " must be linked to an R&D console first!</span>" );
				return 1;
			}

			if ( this.busy ) {
				user.WriteMsg( "<span class='warning'>The " + this.name + " is busy! Please wait for completion of previous operation.</span>" );
				return 1;
			}

			if ( Lang13.Bool( ((Ent_Static)A).is_open_container() ) ) {
				return null;
			}

			if ( this.stat != 0 ) {
				return 1;
			}

			if ( !( A is Obj_Item_Stack_Sheet ) ) {
				return 1;
			}

			if ( !this.materials.has_space( this.materials.get_item_material_amount( A ) ) ) {
				user.WriteMsg( "<span class='warning'>The " + this.name + "'s material bin is full! Please remove material before adding more.</span>" );
				return 1;
			}
			stack = A;
			amount = Num13.Floor( Convert.ToDouble( Interface13.Input( "How many sheets do you want to add?", null, null, null, null, InputType.Num ) ) );

			if ( !( Map13.GetDistance( this, stack ) <= 1 ) || !((Ent_Static)user).Adjacent( this ) ) {
				return null;
			}
			amount_inserted = this.materials.insert_stack( A, amount );

			if ( !Lang13.Bool( amount_inserted ) ) {
				return 1;
			} else {
				stack_name = stack.name;
				this.busy = true;
				this.f_use_power( Num13.MaxInt( 1000, ((int)( ( amount_inserted ??0) * 2000 / 10 )) ) );
				user.WriteMsg( "<span class='notice'>You add " + amount_inserted + " sheets to the " + this.name + ".</span>" );
				this.overlays.Add( "protolathe_" + stack_name );
				Task13.Sleep( 10 );
				this.overlays.Remove( "protolathe_" + stack_name );
				this.busy = false;
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: protolathe.dm
		public double check_mat( dynamic being_built = null, string M = null ) {
			double A = 0;

			A = this.materials.amount( M ) ?1:0;

			if ( !( A != 0 ) ) {
				A = this.reagents.get_reagent_amount( M ) ?1:0;
				A = A / Num13.MaxInt( 1, Convert.ToInt32( being_built.reagents[M] / this.efficiency_coeff ) );
			} else {
				A = A / Num13.MaxInt( 1, Convert.ToInt32( being_built.materials[M] / this.efficiency_coeff ) );
			}
			return A;
		}

		// Function from file: protolathe.dm
		public override void RefreshParts(  ) {
			double T = 0;
			Obj_Item_Weapon_ReagentContainers_Glass G = null;
			Obj_Item_Weapon_StockParts_MatterBin M = null;
			Obj_Item_Weapon_StockParts_Manipulator M2 = null;

			T = 0;

			foreach (dynamic _a in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_ReagentContainers_Glass) )) {
				G = _a;
				
				G.reagents.trans_to( this, G.reagents.total_volume );
			}

			foreach (dynamic _b in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_MatterBin) )) {
				M = _b;
				
				T += Convert.ToDouble( M.rating );
			}
			this.materials.max_amount = T * 75000;
			T = 0;

			foreach (dynamic _c in Lang13.Enumerate( this.component_parts, typeof(Obj_Item_Weapon_StockParts_Manipulator) )) {
				M2 = _c;
				
				T += Convert.ToDouble( M2.rating / 3 );
			}
			this.efficiency_coeff = Num13.MaxInt( ((int)( T )), 1 );
			return;
		}

		// Function from file: protolathe.dm
		public override dynamic Destroy(  ) {
			GlobalFuncs.qdel( this.materials );
			return base.Destroy();
		}

	}

}