// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_DockingPort_Mobile_Supply : Obj_DockingPort_Mobile {

		public ByTable blacklist = new ByTable(new object [] { 
											typeof(Mob_Living), 
											typeof(Obj_Effect_Blob), 
											typeof(Obj_Effect_Rune), 
											typeof(Obj_Effect_Spider_Spiderling), 
											typeof(Obj_Item_Weapon_Disk_Nuclear), 
											typeof(Obj_Machinery_Nuclearbomb), 
											typeof(Obj_Item_Device_Radio_Beacon), 
											typeof(Obj_Machinery_TheSingularitygen), 
											typeof(Obj_Singularity), 
											typeof(Obj_Machinery_Teleport_Station), 
											typeof(Obj_Machinery_Teleport_Hub), 
											typeof(Obj_Machinery_Telepad), 
											typeof(Obj_Machinery_Clonepod)
										 });

		protected override void __FieldInit() {
			base.__FieldInit();

			this.id = "supply";
			this.callTime = 1200;
			this.travelDir = 90;
			this.width = 12;
			this.dwidth = 5;
			this.height = 7;
			this.roundstart_move = "supply_away";
			this.dir = 8;
		}

		// Function from file: supply.dm
		public Obj_DockingPort_Mobile_Supply ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.SSshuttle.supply = this;
			return;
		}

		// Function from file: supply.dm
		public override int dock( dynamic S1 = null ) {
			
			if ( this.getDockedId() == "supply_away" ) {
				this.buy();
			}

			if ( base.dock( (object)(S1) ) != 0 ) {
				return 0;
			}

			if ( this.getDockedId() == "supply_away" ) {
				this.sell();
			}
			return 0;
		}

		// Function from file: supply.dm
		public override int request( Obj_DockingPort_Stationary S = null, double? coefficient = null, dynamic signalOrigin = null, string reason = null, bool? redAlert = null ) {
			
			if ( this.mode != 0 ) {
				return 2;
			}
			return base.request( S, coefficient, (object)(signalOrigin), reason, redAlert );
		}

		// Function from file: supply.dm
		public void sell(  ) {
			double presale_points = 0;
			int pointsEarned = 0;
			int crates = 0;
			double plasma = 0;
			int intel = 0;
			string msg = null;
			string sold_atoms = null;
			Ent_Dynamic AM = null;
			int? manifest_found = null;
			Ent_Dynamic thing = null;
			Ent_Dynamic manifest = null;
			int? denied = null;
			dynamic stamp = null;
			Ent_Dynamic P = null;
			Ent_Dynamic disk = null;
			Tech tech = null;
			double cost = 0;
			Ent_Dynamic disk2 = null;
			dynamic design = null;
			Ent_Dynamic S = null;
			bool potDiff = false;

			presale_points = GlobalVars.SSshuttle.points;
			pointsEarned = 0;
			crates = 0;
			plasma = 0;
			intel = 0;
			msg = "";
			sold_atoms = "";

			foreach (dynamic _c in Lang13.Enumerate( this.areaInstance, typeof(Ent_Dynamic) )) {
				AM = _c;
				

				if ( Lang13.Bool( AM.anchored ) ) {
					continue;
				}
				sold_atoms += " " + AM.name;

				if ( AM is Obj_Structure_Closet_Crate ) {
					crates++;
					sold_atoms += ":";

					if ( !( AM.contents.len != 0 ) ) {
						sold_atoms += " (empty).";
					} else {
						manifest_found = GlobalVars.FALSE;

						foreach (dynamic _b in Lang13.Enumerate( AM, typeof(Ent_Dynamic) )) {
							thing = _b;
							
							sold_atoms += " " + thing.name + ",";

							if ( !Lang13.Bool( manifest_found ) && thing is Obj_Item_Weapon_Paper_Manifest ) {
								manifest = thing;

								if ( Lang13.Bool( ((dynamic)manifest).stamped ) && ((dynamic)manifest).stamped.len != 0 ) {
									manifest_found = GlobalVars.TRUE;
									denied = GlobalVars.FALSE;

									foreach (dynamic _a in Lang13.Enumerate( ((dynamic)manifest).stamped )) {
										stamp = _a;
										

										if ( stamp == typeof(Obj_Item_Weapon_Stamp_Denied) ) {
											denied = GlobalVars.TRUE;
											break;
										}
									}

									if ( Lang13.Bool( ((dynamic)manifest).errors ) && Lang13.Bool( denied ) ) {
										pointsEarned = Convert.ToInt32( ((dynamic)manifest).order_cost - GlobalVars.SSshuttle.points_per_crate );
										GlobalVars.SSshuttle.points += pointsEarned;
										msg += "+" + pointsEarned + ": Station correctly denied package #" + ((dynamic)manifest).order_id + ": ";

										if ( Lang13.Bool( ((dynamic)manifest).errors & 1 ) ) {
											msg += "Destination station incorrect. ";
										} else if ( Lang13.Bool( ((dynamic)manifest).errors & 2 ) ) {
											msg += "Contents incorrectly counted. ";
										} else if ( Lang13.Bool( ((dynamic)manifest).errors & 4 ) ) {
											msg += "Package incomplete. ";
										}
										msg += "Points refunded.";
									} else if ( !Lang13.Bool( ((dynamic)manifest).errors ) && !Lang13.Bool( denied ) ) {
										pointsEarned = GlobalVars.SSshuttle.points_per_manifest;
										GlobalVars.SSshuttle.points += pointsEarned;
										msg += "+" + pointsEarned + ": Package " + ((dynamic)manifest).order_id + " accorded.";
									} else if ( Lang13.Bool( ((dynamic)manifest).errors ) ) {
										pointsEarned = -GlobalVars.SSshuttle.points_per_manifest;
										GlobalVars.SSshuttle.points += pointsEarned;
										msg += "" + pointsEarned + ": Station erroneously approved package #" + ((dynamic)manifest).order_id + ": ";

										if ( Lang13.Bool( ((dynamic)manifest).errors & 1 ) ) {
											msg += "Destination station incorrect.";
										} else if ( Lang13.Bool( ((dynamic)manifest).errors & 2 ) ) {
											msg += "Contents incorrectly counted. ";
										} else if ( Lang13.Bool( ((dynamic)manifest).errors & 4 ) ) {
											msg += "We found unshipped items on our dock.";
										}
										msg += " Be more vigilant.";
									} else {
										pointsEarned = Num13.Floor( GlobalVars.SSshuttle.points_per_crate - Convert.ToDouble( ((dynamic)manifest).order_cost ) );
										GlobalVars.SSshuttle.points += pointsEarned;
										msg += "" + pointsEarned + ": Station erroneously denied package #" + ((dynamic)manifest).order_id + ".";
									}
								}
							}

							if ( thing is Obj_Item_Stack_Sheet_Mineral_Plasma ) {
								P = thing;
								plasma += Convert.ToDouble( ((dynamic)P).amount );
							}

							if ( thing is Obj_Item_Documents_Syndicate ) {
								intel++;
							}

							if ( thing is Obj_Item_Weapon_Disk_TechDisk ) {
								disk = thing;

								if ( !Lang13.Bool( ((dynamic)disk).stored ) ) {
									continue;
								}
								tech = ((dynamic)disk).stored;
								cost = tech.getCost( GlobalVars.SSshuttle.techLevels[tech.id] );

								if ( cost != 0 ) {
									GlobalVars.SSshuttle.techLevels[tech.id] = tech.level;
									GlobalVars.SSshuttle.points += cost;
									msg += "+" + cost + ": Data: " + tech.name + ".";
								}
							}

							if ( thing is Obj_Item_Weapon_Disk_DesignDisk ) {
								disk2 = thing;

								if ( !Lang13.Bool( ((dynamic)disk2).blueprint ) ) {
									continue;
								}
								design = ((dynamic)disk2).blueprint;

								if ( GlobalVars.SSshuttle.researchDesigns.Contains( design.id ) ) {
									continue;
								}

								if ( Convert.ToDouble( Lang13.Initial( design, "reliability" ) ) < 100 && Convert.ToDouble( design.reliability ) >= 100 ) {
									GlobalVars.SSshuttle.points += GlobalVars.SSshuttle.points_per_design;
									GlobalVars.SSshuttle.researchDesigns.Add( design.id );
									msg += "+" + GlobalVars.SSshuttle.points_per_design + ": Design: " + design.name + ".";
								}
							}

							if ( thing is Obj_Item_Seeds ) {
								S = thing;

								if ( Lang13.Bool( ((dynamic)S).rarity ) == false ) {
									msg += "+0: We don't need samples of mundane species \"" + GlobalFuncs.capitalize( ((dynamic)S).species ) + "\".";
								} else if ( Lang13.Bool( GlobalVars.SSshuttle.discoveredPlants[S.type] ) ) {
									potDiff = Lang13.Bool( ((dynamic)S).potency - GlobalVars.SSshuttle.discoveredPlants[S.type] );

									if ( ( potDiff ?1:0) > 0 ) {
										GlobalVars.SSshuttle.discoveredPlants[S.type] = ((dynamic)S).potency;
										msg += "+" + potDiff + ": New sample of \"" + GlobalFuncs.capitalize( ((dynamic)S).species ) + "\" is superior.  Good work.";
										GlobalVars.SSshuttle.points += potDiff ?1:0;
									} else {
										msg += "+0: New sample of \"" + GlobalFuncs.capitalize( ((dynamic)S).species ) + "\" is not more potent than existing sample (" + GlobalVars.SSshuttle.discoveredPlants[S.type] + " potency).";
									}
								} else {
									GlobalVars.SSshuttle.discoveredPlants[S.type] = ((dynamic)S).potency;
									msg += "" + ((dynamic)S).rarity + ": New species discovered: \"" + GlobalFuncs.capitalize( ((dynamic)S).species ) + "\".  Excellent work.";
									GlobalVars.SSshuttle.points += Convert.ToDouble( ((dynamic)S).rarity );
								}
							}
							GlobalFuncs.qdel( thing );
						}
					}
				}
				GlobalFuncs.qdel( AM );
				sold_atoms += ".";
			}

			if ( plasma > 0 ) {
				pointsEarned = Num13.Floor( plasma * GlobalVars.SSshuttle.points_per_plasma );
				msg += "" + pointsEarned + ": Received " + plasma + " unit(s) of exotic material.";
				GlobalVars.SSshuttle.points += pointsEarned;
			}

			if ( intel > 0 ) {
				pointsEarned = Num13.Floor( intel * GlobalVars.SSshuttle.points_per_intel );
				msg += "" + pointsEarned + ": Received " + intel + " article(s) of enemy intelligence.";
				GlobalVars.SSshuttle.points += pointsEarned;
			}

			if ( crates > 0 ) {
				pointsEarned = Num13.Floor( crates * GlobalVars.SSshuttle.points_per_crate );
				msg += "+" + pointsEarned + ": Received " + crates + " crate(s).";
				GlobalVars.SSshuttle.points += pointsEarned;
			}
			GlobalVars.SSshuttle.centcom_message = msg;
			this.investigate_log( "Shuttle contents sold for " + ( GlobalVars.SSshuttle.points - presale_points ) + " points. Contents: " + ( Lang13.Bool( sold_atoms ) || Lang13.Bool( "none." ) ) + " Message: " + ( Lang13.Bool( GlobalVars.SSshuttle.centcom_message ) || Lang13.Bool( "none." ) ), "cargo" );
			return;
		}

		// Function from file: supply.dm
		public void buy(  ) {
			ByTable empty_turfs = null;
			Tile_Simulated_Floor T = null;
			double value = 0;
			int purchases = 0;
			SupplyOrder SO = null;

			
			if ( !( GlobalVars.SSshuttle.shoppinglist.len != 0 ) ) {
				return;
			}
			empty_turfs = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.areaInstance, typeof(Tile_Simulated_Floor) )) {
				T = _a;
				

				if ( T.density || T.contents.len != 0 ) {
					continue;
				}
				empty_turfs.Add( T );
			}
			value = 0;
			purchases = 0;

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.SSshuttle.shoppinglist, typeof(SupplyOrder) )) {
				SO = _b;
				

				if ( !( empty_turfs.len != 0 ) ) {
					break;
				}

				if ( SO.pack.cost > GlobalVars.SSshuttle.points ) {
					continue;
				}
				GlobalVars.SSshuttle.points -= SO.pack.cost;
				value += SO.pack.cost;
				GlobalVars.SSshuttle.shoppinglist.Remove( SO );
				GlobalVars.SSshuttle.orderhistory.Add( SO );
				SO.generate( GlobalFuncs.pick_n_take( empty_turfs ) );
				this.investigate_log( "Order #" + SO.id + " (" + SO.pack.name + ", placed by " + GlobalFuncs.key_name( SO.orderer_ckey ) + ") has shipped.", "cargo" );

				if ( SO.pack.dangerous ) {
					GlobalFuncs.message_admins( new Txt().A( SO.pack.name ).item().str( " ordered by " ).item( GlobalFuncs.key_name_admin( SO.orderer_ckey ) ).str( " has shipped." ).ToString() );
				}
				purchases++;
			}
			this.investigate_log( "" + purchases + " orders in this shipment, worth " + value + " points. " + GlobalVars.SSshuttle.points + " points left.", "cargo" );
			return;
		}

		// Function from file: supply.dm
		public bool check_blacklist( dynamic A = null ) {
			dynamic thing = null;

			
			if ( GlobalFuncs.is_type_in_list( A, this.blacklist ) ) {
				return true;
			}

			foreach (dynamic _a in Lang13.Enumerate( A )) {
				thing = _a;
				

				if ( this.check_blacklist( thing ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: supply.dm
		public override bool canMove(  ) {
			
			if ( this.z == 1 ) {
				return this.check_blacklist( this.areaInstance );
			}
			return base.canMove();
		}

	}

}