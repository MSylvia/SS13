// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Newscaster : Obj_Machinery {

		public bool isbroken = false;
		public bool ispowered = true;
		public double? screen = 0;
		public int paper_remaining = 15;
		public bool securityCaster = false;
		public int unit_no = 0;
		public int alert_delay = 500;
		public int alert = 0;
		public string scanned_user = "Unknown";
		public string msg = "";
		public dynamic photo = null;
		public dynamic channel_name = "";
		public bool c_locked = false;
		public int hitstaken = 0;
		public dynamic viewing_channel = null;
		public int? allow_comments = 1;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 0;
			this.verb_say = "beeps";
			this.verb_ask = "beeps";
			this.verb_exclaim = "beeps";
			this.anchored = 1;
			this.icon = "icons/obj/terminals.dmi";
			this.icon_state = "newscaster_normal";
		}

		// Function from file: newscaster.dm
		public Obj_Machinery_Newscaster ( dynamic loc = null, dynamic ndir = null, dynamic building = null ) : base( (object)(loc) ) {
			Obj_Machinery_Newscaster NEWSCASTER = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( Lang13.Bool( building ) ) {
				this.dir = Convert.ToInt32( ndir );
				this.pixel_x = ( ( this.dir & 3 ) != 0 ? 0 : ( this.dir == 4 ? -32 : 32 ) );
				this.pixel_y = ( ( this.dir & 3 ) != 0 ? ( this.dir == 1 ? -32 : 32 ) : 0 );
			}
			GlobalVars.allCasters.Add( this );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
				NEWSCASTER = _a;
				
				this.unit_no++;
			}
			this.update_icon();
			return;
		}

		// Function from file: newscaster.dm
		public void newsAlert( dynamic channel = null ) {
			
			if ( Lang13.Bool( channel ) ) {
				this.say( "Breaking news from " + channel + "!" );
				this.alert++;
				this.update_icon();
				Task13.Schedule( this.alert_delay, (Task13.Closure)(() => {
					this.alert--;
					this.update_icon();
					return;
				}));
				GlobalFuncs.playsound( this.loc, "sound/machines/twobeep.ogg", 75, 1 );
			} else {
				this.say( "Attention! Wanted issue distributed!" );
				GlobalFuncs.playsound( this.loc, "sound/machines/warning-buzzer.ogg", 75, 1 );
			}
			return;
		}

		// Function from file: newscaster.dm
		public void print_paper(  ) {
			Obj_Item_Weapon_Newspaper NEWSPAPER = null;
			Newscaster_FeedChannel FC = null;

			GlobalFuncs.feedback_inc( "newscaster_newspapers_printed", 1 );
			NEWSPAPER = new Obj_Item_Weapon_Newspaper();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
				FC = _a;
				
				NEWSPAPER.news_content.Add( FC );
			}

			if ( GlobalVars.news_network.wanted_issue.active ) {
				NEWSPAPER.wantedAuthor = GlobalVars.news_network.wanted_issue.scannedUser;
				NEWSPAPER.wantedCriminal = GlobalVars.news_network.wanted_issue.criminal;
				NEWSPAPER.wantedBody = GlobalVars.news_network.wanted_issue.body;

				if ( GlobalVars.news_network.wanted_issue.img != null ) {
					NEWSPAPER.wantedPhoto = GlobalVars.news_network.wanted_issue.img;
				}
			}
			NEWSPAPER.loc = GlobalFuncs.get_turf( this );
			NEWSPAPER.creationTime = GlobalVars.news_network.lastAction;
			this.paper_remaining--;
			return;
		}

		// Function from file: newscaster.dm
		public void scan_user( dynamic user = null ) {
			dynamic human_user = null;
			dynamic P = null;
			Obj_Item_Weapon_Card_Id ID = null;
			dynamic ai_user = null;

			
			if ( user is Mob_Living_Carbon_Human ) {
				human_user = user;

				if ( Lang13.Bool( human_user.wear_id ) ) {
					
					if ( human_user.wear_id is Obj_Item_Device_Pda ) {
						P = human_user.wear_id;

						if ( Lang13.Bool( P.id ) ) {
							this.scanned_user = "" + P.id.registered_name + " (" + P.id.assignment + ")";
						} else {
							this.scanned_user = "Unknown";
						}
					} else if ( human_user.wear_id is Obj_Item_Weapon_Card_Id ) {
						ID = human_user.wear_id;
						this.scanned_user = "" + ID.registered_name + " (" + ID.assignment + ")";
					} else {
						this.scanned_user = "Unknown";
					}
				} else {
					this.scanned_user = "Unknown";
				}
			} else if ( user is Mob_Living_Silicon ) {
				ai_user = user;
				this.scanned_user = "" + ai_user.name + " (" + ai_user.job + ")";
			} else {
				throw new Exception( "Invalid user for this proc" );
				return;
			}
			return;
		}

		// Function from file: newscaster.dm
		public void AttachPhoto( Mob user = null ) {
			ByTable nametemp = null;
			dynamic find = null;
			Picture selection = null;
			Obj_Item_Device_Camera_Siliconcam targetcam = null;
			Mob R = null;
			Mob R2 = null;
			Picture t = null;
			Obj_Item_Weapon_Photo P = null;
			Picture q = null;

			
			if ( Lang13.Bool( this.photo ) ) {
				
				if ( !this.photo.sillynewscastervar ) {
					this.photo.loc = this.loc;

					if ( !( user is Mob_Living_Silicon ) ) {
						user.put_in_inactive_hand( this.photo );
					}
				} else {
					GlobalFuncs.qdel( this.photo );
				}
				this.photo = null;
			}

			if ( user.get_active_hand() is Obj_Item_Weapon_Photo ) {
				this.photo = user.get_active_hand();

				if ( !user.drop_item() ) {
					return;
				}
				this.photo.loc = this;
			}

			if ( user is Mob_Living_Silicon ) {
				nametemp = new ByTable();
				targetcam = null;

				if ( user is Mob_Living_Silicon_Ai ) {
					R = user;
					targetcam = ((dynamic)R).aicamera;
				} else if ( user is Mob_Living_Silicon_Robot ) {
					R2 = user;

					if ( Lang13.Bool( ((dynamic)R2).connected_ai ) ) {
						targetcam = ((dynamic)R2).connected_ai.aicamera;
					} else {
						targetcam = ((dynamic)R2).aicamera;
					}
				} else {
					user.WriteMsg( "<span class='warning'>You cannot interface with silicon photo uploading!</span>" );
				}

				if ( targetcam.aipictures.len == 0 ) {
					Task13.User.WriteMsg( "<span class='boldannounce'>No images saved</span>" );
					return;
				}

				foreach (dynamic _a in Lang13.Enumerate( targetcam.aipictures, typeof(Picture) )) {
					t = _a;
					
					nametemp.Add( t.fields["name"] );
				}
				find = Interface13.Input( "Select image (numbered in order taken)", null, null, null, nametemp, InputType.Any );
				P = new Obj_Item_Weapon_Photo();

				foreach (dynamic _b in Lang13.Enumerate( targetcam.aipictures, typeof(Picture) )) {
					q = _b;
					

					if ( q.fields["name"] == find ) {
						selection = q;
						break;
					}
				}
				P.photocreate( selection.fields["icon"], selection.fields["img"], selection.fields["desc"] );
				P.sillynewscastervar = true;
				this.photo = P;
				GlobalFuncs.qdel( P );
			}
			return;
		}

		// Function from file: newscaster.dm
		public override dynamic attack_paw( dynamic a = null, dynamic b = null, dynamic c = null ) {
			a.WriteMsg( "<span class='warning'>The newscaster controls are far too complicated for your tiny brain!</span>" );
			return null;
		}

		// Function from file: newscaster.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			dynamic W = null;

			
			if ( A is Obj_Item_Weapon_Wrench ) {
				user.WriteMsg( "<span class='notice'>You start " + ( Lang13.Bool( this.anchored ) ? "un" : "" ) + "securing " + this.name + "...</span>" );
				GlobalFuncs.playsound( this.loc, "sound/items/ratchet.ogg", 50, 1 );

				if ( GlobalFuncs.do_after( user, 60 / A.toolspeed, null, this ) ) {
					user.WriteMsg( "<span class='notice'>You " + ( Lang13.Bool( this.anchored ) ? "un" : "" ) + "secure " + this.name + ".</span>" );
					new Obj_Item_Wallframe_Newscaster( this.loc );
					GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 50, 1 );
					GlobalFuncs.qdel( this );
				}
				return null;
			}

			if ( this.isbroken ) {
				GlobalFuncs.playsound( this.loc, "sound/effects/hit_on_shattered_glass.ogg", 100, 1 );
				this.audible_message( "<span class='danger'>" + user.name + " further abuses the shattered " + this.name + ".</span>", null, 5 );
			} else if ( A is Obj_Item_Weapon ) {
				((Ent_Dynamic)user).do_attack_animation( this );
				W = A;

				if ( W.damtype == "stamina" ) {
					return null;
				}

				if ( Convert.ToDouble( W.force ) < 15 ) {
					this.audible_message( "<span class='danger'>" + user.name + " hits the " + this.name + " with the " + W.name + " with no visible effect.</span>", null, 5 );
					GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 100, 1 );
				} else {
					this.hitstaken++;

					if ( this.hitstaken == 3 ) {
						this.audible_message( "<span class='danger'>" + user.name + " smashes the " + this.name + "!</span>", null, 5 );
						this.isbroken = true;
						GlobalFuncs.playsound( this.loc, "sound/effects/Glassbr3.ogg", 100, 1 );
					} else {
						this.audible_message( "<span class='danger'>" + user.name + " forcefully slams the " + this.name + " with the " + A.name + "!</span>", null, 5 );
						GlobalFuncs.playsound( this.loc, "sound/effects/Glasshit.ogg", 100, 1 );
					}
				}
			} else {
				user.WriteMsg( "<span class='warning'>This does nothing!</span>" );
			}
			this.update_icon();
			return null;
		}

		// Function from file: newscaster.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			ByTable existing_authors = null;
			Newscaster_FeedChannel FC = null;
			bool check = false;
			Newscaster_FeedChannel FC2 = null;
			string choice = null;
			ByTable available_channels = null;
			Newscaster_FeedChannel F = null;
			string temp_message = null;
			bool already_wanted = false;
			double? input_param = null;
			string choice2 = null;
			string choice3 = null;
			dynamic FC3 = null;
			dynamic MSG = null;
			dynamic MSG2 = null;
			dynamic FC4 = null;
			dynamic FC5 = null;
			dynamic FC6 = null;
			dynamic FC7 = null;
			dynamic FM = null;
			string cominput = null;
			Newscaster_FeedComment FC8 = null;
			dynamic FC9 = null;
			dynamic FM2 = null;
			dynamic FM3 = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hsrc) ) ) ) {
				return null;
			}

			if ( Task13.User.contents.Find( this ) != 0 || Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile || Task13.User is Mob_Living_Silicon ) {
				Task13.User.set_machine( this );
				this.scan_user( Task13.User );

				if ( Lang13.Bool( href_list["set_channel_name"] ) ) {
					this.channel_name = GlobalFuncs.stripped_input( Task13.User, "Provide a Feed Channel Name", "Network Channel Handler", "", 26 );

					while (String13.FindIgnoreCase( this.channel_name, " ", 1, 0 ) == 1) {
						this.channel_name = String13.SubStr( this.channel_name, 2, Lang13.Length( this.channel_name ) + 1 );
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_channel_lock"] ) ) {
					this.c_locked = !this.c_locked;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["submit_new_channel"] ) ) {
					existing_authors = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
						FC = _a;
						

						if ( FC.authorCensor ) {
							existing_authors.Add( GlobalVars.news_network.redactedText );
						} else {
							existing_authors.Add( FC.author );
						}
					}
					check = false;

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
						FC2 = _b;
						

						if ( FC2.channel_name == this.channel_name ) {
							check = true;
							break;
						}
					}

					if ( this.channel_name == "" || this.channel_name == "[REDACTED]" || this.scanned_user == "Unknown" || check || existing_authors.Contains( this.scanned_user ) ) {
						this.screen = 7;
					} else {
						choice = Interface13.Alert( "Please confirm Feed channel creation", "Network Channel Handler", "Confirm", "Cancel" );

						if ( choice == "Confirm" ) {
							this.scan_user( Task13.User );
							GlobalVars.news_network.CreateFeedChannel( this.channel_name, this.scanned_user, this.c_locked );
							GlobalFuncs.feedback_inc( "newscaster_channels", 1 );
							this.screen = 5;
						}
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_channel_receiving"] ) ) {
					available_channels = new ByTable();

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
						F = _c;
						

						if ( ( !F.locked || F.author == this.scanned_user ) && !F.censored ) {
							available_channels.Add( F.channel_name );
						}
					}
					this.channel_name = Interface13.Input( Task13.User, "Choose receiving Feed Channel", "Network Channel Handler", null, available_channels, InputType.Any );
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_new_message"] ) ) {
					temp_message = GlobalFuncs.trim( GlobalFuncs.stripped_multiline_input( Task13.User, "Write your Feed story", "Network Channel Handler", this.msg ) );

					if ( Lang13.Bool( temp_message ) ) {
						this.msg = temp_message;
						this.updateUsrDialog();
					}
				} else if ( Lang13.Bool( href_list["set_attachment"] ) ) {
					this.AttachPhoto( Task13.User );
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["submit_new_message"] ) ) {
					
					if ( this.msg == "" || this.msg == "[REDACTED]" || this.scanned_user == "Unknown" || this.channel_name == "" ) {
						this.screen = 6;
					} else {
						GlobalVars.news_network.SubmitArticle( "<font face=\"" + "Verdana" + "\">" + GlobalFuncs.parsepencode( this.msg, Task13.User, "Times New Roman" ) + "</font>", this.scanned_user, this.channel_name, this.photo, false, this.allow_comments );
						GlobalFuncs.feedback_inc( "newscaster_stories", 1 );
						this.screen = 4;
						this.msg = "";
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["create_channel"] ) ) {
					this.screen = 2;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["create_feed_story"] ) ) {
					this.screen = 3;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["menu_paper"] ) ) {
					this.screen = 8;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["print_paper"] ) ) {
					
					if ( !( this.paper_remaining != 0 ) ) {
						this.screen = 21;
					} else {
						this.print_paper();
						this.screen = 20;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["menu_censor_story"] ) ) {
					this.screen = 10;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["menu_censor_channel"] ) ) {
					this.screen = 11;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["menu_wanted"] ) ) {
					already_wanted = false;

					if ( GlobalVars.news_network.wanted_issue.active ) {
						already_wanted = true;
					}

					if ( already_wanted ) {
						this.channel_name = GlobalVars.news_network.wanted_issue.criminal;
						this.msg = GlobalVars.news_network.wanted_issue.body;
					}
					this.screen = 14;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_wanted_name"] ) ) {
					this.channel_name = GlobalFuncs.trim( GlobalFuncs.stripped_input( Task13.User, "Provide the name of the Wanted person", "Network Security Handler" ) );
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_wanted_desc"] ) ) {
					this.msg = GlobalFuncs.trim( GlobalFuncs.stripped_input( Task13.User, "Provide the a description of the Wanted person and any other details you deem important", "Network Security Handler" ) );
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["submit_wanted"] ) ) {
					input_param = String13.ParseNumber( href_list["submit_wanted"] );

					if ( this.msg == "" || this.channel_name == "" || this.scanned_user == "Unknown" ) {
						this.screen = 16;
					} else {
						choice2 = Interface13.Alert( "Please confirm Wanted Issue " + ( input_param == 1 ? "creation." : "edit." ), "Network Security Handler", "Confirm", "Cancel" );

						if ( choice2 == "Confirm" ) {
							this.scan_user( Task13.User );

							if ( input_param == 1 ) {
								GlobalVars.news_network.submitWanted( this.channel_name, this.msg, this.scanned_user, this.photo, false, true );
								this.screen = 15;
							} else {
								
								if ( GlobalVars.news_network.wanted_issue.isAdminMsg == true ) {
									Interface13.Alert( "The wanted issue has been distributed by a Nanotrasen higherup. You cannot edit it.", "Ok" );
									return null;
								}
								GlobalVars.news_network.submitWanted( this.channel_name, this.msg, this.scanned_user, this.photo );
								this.screen = 19;
							}
						}
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["cancel_wanted"] ) ) {
					
					if ( GlobalVars.news_network.wanted_issue.isAdminMsg == true ) {
						Interface13.Alert( "The wanted issue has been distributed by a Nanotrasen higherup. You cannot take it down.", "Ok" );
						return null;
					}
					choice3 = Interface13.Alert( "Please confirm Wanted Issue removal", "Network Security Handler", "Confirm", "Cancel" );

					if ( choice3 == "Confirm" ) {
						GlobalVars.news_network.deleteWanted();
						this.screen = 17;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["view_wanted"] ) ) {
					this.screen = 18;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["censor_channel_author"] ) ) {
					FC3 = Lang13.FindObj( href_list["censor_channel_author"] );

					if ( FC3.is_admin_channel == true ) {
						Interface13.Alert( "This channel was created by a Nanotrasen Officer. You cannot censor it.", "Ok" );
						return null;
					}
					FC3.toggleCensorAuthor();
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["censor_channel_story_author"] ) ) {
					MSG = Lang13.FindObj( href_list["censor_channel_story_author"] );

					if ( MSG.is_admin_message == true ) {
						Interface13.Alert( "This message was created by a Nanotrasen Officer. You cannot censor its author.", "Ok" );
						return null;
					}
					MSG.toggleCensorAuthor();
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["censor_channel_story_body"] ) ) {
					MSG2 = Lang13.FindObj( href_list["censor_channel_story_body"] );

					if ( MSG2.is_admin_message == true ) {
						Interface13.Alert( "This channel was created by a Nanotrasen Officer. You cannot censor it.", "Ok" );
						return null;
					}
					((Newscaster_FeedMessage)MSG2).toggleCensorBody();
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["pick_d_notice"] ) ) {
					FC4 = Lang13.FindObj( href_list["pick_d_notice"] );
					this.viewing_channel = FC4;
					this.screen = 13;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["toggle_d_notice"] ) ) {
					FC5 = Lang13.FindObj( href_list["toggle_d_notice"] );

					if ( FC5.is_admin_channel == true ) {
						Interface13.Alert( "This channel was created by a Nanotrasen Officer. You cannot place a D-Notice upon it.", "Ok" );
						return null;
					}
					((Newscaster_FeedChannel)FC5).toggleCensorDclass();
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["view"] ) ) {
					this.screen = 1;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["setScreen"] ) ) {
					this.screen = String13.ParseNumber( href_list["setScreen"] );

					if ( this.screen == 0 ) {
						this.scanned_user = "Unknown";
						this.msg = "";
						this.c_locked = false;
						this.channel_name = "";
						this.viewing_channel = null;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["show_channel"] ) ) {
					FC6 = Lang13.FindObj( href_list["show_channel"] );
					this.viewing_channel = FC6;
					this.screen = 9;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["pick_censor_channel"] ) ) {
					FC7 = Lang13.FindObj( href_list["pick_censor_channel"] );
					this.viewing_channel = FC7;
					this.screen = 12;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["new_comment"] ) ) {
					FM = Lang13.FindObj( href_list["new_comment"] );
					cominput = String13.SubStr( GlobalFuncs.stripped_input( Task13.User, "Write your message:", "New comment", null ), 1, 141 );

					if ( Lang13.Bool( cominput ) ) {
						this.scan_user( Task13.User );
						FC8 = new Newscaster_FeedComment();
						FC8.author = this.scanned_user;
						FC8.body = cominput;
						FC8.time_stamp = GlobalFuncs.worldtime2text();
						FM.comments += FC8;
						GlobalFuncs.log_comment( "" + Task13.User + "/(" + Task13.User.ckey + ") as " + this.scanned_user + " commented on message " + ((Newscaster_FeedMessage)FM).returnBody( -1 ) + " -- " + FC8.body );
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["del_comment"] ) ) {
					FC9 = Lang13.FindObj( href_list["del_comment"] );
					FM2 = Lang13.FindObj( href_list["del_comment_msg"] );
					FM2.comments -= FC9;
					GlobalFuncs.qdel( FC9 );
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["lock_comment"] ) ) {
					FM3 = Lang13.FindObj( href_list["lock_comment"] );
					FM3.locked ^= 1;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_comment"] ) ) {
					this.allow_comments ^= 1;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["refresh"] ) ) {
					this.updateUsrDialog();
				}
			}
			return null;
		}

		// Function from file: newscaster.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic human_or_robot_user = null;
			dynamic dat = null;
			bool wanted_already = false;
			Newscaster_FeedChannel CHANNEL = null;
			ByTable existing_authors = null;
			Newscaster_FeedChannel FC = null;
			bool check = false;
			Newscaster_FeedChannel FC2 = null;
			int total_num = 0;
			int active_num = 0;
			int message_num = 0;
			Newscaster_FeedChannel FC3 = null;
			int i = 0;
			Newscaster_FeedMessage MESSAGE = null;
			Newscaster_FeedComment comment = null;
			Newscaster_FeedChannel CHANNEL2 = null;
			Newscaster_FeedChannel CHANNEL3 = null;
			Newscaster_FeedMessage MESSAGE2 = null;
			Newscaster_FeedComment comment2 = null;
			Newscaster_FeedMessage MESSAGE3 = null;
			bool wanted_already2 = false;
			int end_param = 0;
			Browser popup = null;

			
			if ( !this.ispowered || this.isbroken ) {
				return null;
			}

			if ( a is Mob_Living_Carbon_Human || a is Mob_Living_Silicon ) {
				human_or_robot_user = a;
				this.scan_user( human_or_robot_user );

				switch ((int?)( this.screen )) {
					case 0:
						dat += "Welcome to Newscasting Unit #" + this.unit_no + ".<BR> Interface & News networks Operational.";
						dat += "<BR><FONT SIZE=1>Property of Nanotransen Inc</FONT>";

						if ( GlobalVars.news_network.wanted_issue.active ) {
							dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";view_wanted=1'>Read Wanted Issue</A>" ).ToString();
						}
						dat += new Txt( "<HR><BR><A href='?src=" ).Ref( this ).str( ";create_channel=1'>Create Feed Channel</A>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";view=1'>View Feed Channels</A>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";create_feed_story=1'>Submit new Feed story</A>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";menu_paper=1'>Print newspaper</A>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Re-scan User</A>" ).ToString();
						dat += new Txt( "<BR><BR><A href='?src=" ).Ref( human_or_robot_user ).str( ";mach_close=newscaster_main'>Exit</A>" ).ToString();

						if ( this.securityCaster ) {
							wanted_already = false;

							if ( GlobalVars.news_network.wanted_issue.active ) {
								wanted_already = true;
							}
							dat += "<HR><B>Feed Security functions:</B><BR>";
							dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";menu_wanted=1'>" ).item( ( wanted_already ? "Manage" : "Publish" ) ).str( " \"Wanted\" Issue</A>" ).ToString();
							dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";menu_censor_story=1'>Censor Feed Stories</A>" ).ToString();
							dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";menu_censor_channel=1'>Mark Feed Channel with Nanotrasen D-Notice</A>" ).ToString();
						}
						dat += "<BR><HR>The newscaster recognises you as: <FONT COLOR='green'>" + this.scanned_user + "</FONT>";
						break;
					case 1:
						dat += "Station Feed Channels<HR>";

						if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
							dat += "<I>No active channels found...</I>";
						} else {
							
							foreach (dynamic _a in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
								CHANNEL = _a;
								

								if ( CHANNEL.is_admin_channel == true ) {
									dat += new Txt( "<B><FONT style='BACKGROUND-COLOR: LightGreen '><A href='?src=" ).Ref( this ).str( ";show_channel=" ).Ref( CHANNEL ).str( "'>" ).item( CHANNEL.channel_name ).str( "</A></FONT></B><BR>" ).ToString();
								} else {
									dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";show_channel=" ).Ref( CHANNEL ).str( "'>" ).item( CHANNEL.channel_name ).str( "</A> " ).item( ( CHANNEL.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR></B>" ).ToString();
								}
							}
						}
						dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Back</A>" ).ToString();
						break;
					case 2:
						dat += "Creating new Feed Channel...";
						dat += new Txt( "<HR><B><A href='?src=" ).Ref( this ).str( ";set_channel_name=1'>Channel Name</A>:</B> " ).item( this.channel_name ).str( "<BR>" ).ToString();
						dat += "<B>Channel Author:</B> <FONT COLOR='green'>" + this.scanned_user + "</FONT><BR>";
						dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";set_channel_lock=1'>Will Accept Public Feeds</A>:</B> " ).item( ( this.c_locked ? "NO" : "YES" ) ).str( "<BR><BR>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";submit_new_channel=1'>Submit</A><BR><BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A><BR>" ).ToString();
						break;
					case 3:
						dat += "Creating new Feed Message...";
						dat += new Txt( "<HR><B><A href='?src=" ).Ref( this ).str( ";set_channel_receiving=1'>Receiving Channel</A>:</B> " ).item( this.channel_name ).str( "<BR>" ).ToString();
						dat += "<B>Message Author:</B> <FONT COLOR='green'>" + this.scanned_user + "</FONT><BR>";
						dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";set_new_message=1'>Message Body</A>:</B> <BR><font face=\"" ).item( "Verdana" ).str( "\">" ).item( GlobalFuncs.parsepencode( this.msg, a, "Times New Roman" ) ).str( "</font><BR>" ).ToString();
						dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";set_attachment=1'>Attach Photo</A>:</B>  " ).item( ( Lang13.Bool( this.photo ) ? "Photo Attached" : "No Photo" ) ).str( "</BR>" ).ToString();
						dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";set_comment=1'>Comments " ).item( ( Lang13.Bool( this.allow_comments ) ? "Enabled" : "Disabled" ) ).str( "</A></B><BR>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";submit_new_message=1'>Submit</A><BR><BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A><BR>" ).ToString();
						break;
					case 4:
						dat += "Feed story successfully submitted to " + this.channel_name + ".<BR><BR>";
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 5:
						dat += "Feed Channel " + this.channel_name + " created successfully.<BR><BR>";
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 6:
						dat += "<B><FONT COLOR='maroon'>ERROR: Could not submit Feed story to Network.</B></FONT><HR><BR>";

						if ( this.channel_name == "" ) {
							dat += "<FONT COLOR='maroon'>Invalid receiving channel name.</FONT><BR>";
						}

						if ( this.scanned_user == "Unknown" ) {
							dat += "<FONT COLOR='maroon'>Channel author unverified.</FONT><BR>";
						}

						if ( this.msg == "" || this.msg == "[REDACTED]" ) {
							dat += "<FONT COLOR='maroon'>Invalid message body.</FONT><BR>";
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 3 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 7:
						dat += "<B><FONT COLOR='maroon'>ERROR: Could not submit Feed Channel to Network.</B></FONT><HR><BR>";
						existing_authors = new ByTable();

						foreach (dynamic _b in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
							FC = _b;
							

							if ( FC.authorCensor ) {
								existing_authors.Add( GlobalVars.news_network.redactedText );
							} else {
								existing_authors.Add( FC.author );
							}
						}

						if ( existing_authors.Contains( this.scanned_user ) ) {
							dat += "<FONT COLOR='maroon'>There already exists a Feed channel under your name.</FONT><BR>";
						}

						if ( this.channel_name == "" || this.channel_name == "[REDACTED]" ) {
							dat += "<FONT COLOR='maroon'>Invalid channel name.</FONT><BR>";
						}
						check = false;

						foreach (dynamic _c in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
							FC2 = _c;
							

							if ( FC2.channel_name == this.channel_name ) {
								check = true;
								break;
							}
						}

						if ( check ) {
							dat += "<FONT COLOR='maroon'>Channel name already in use.</FONT><BR>";
						}

						if ( this.scanned_user == "Unknown" ) {
							dat += "<FONT COLOR='maroon'>Channel author unverified.</FONT><BR>";
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 2 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 8:
						total_num = Lang13.Length( GlobalVars.news_network.network_channels );
						active_num = total_num;
						message_num = 0;

						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
							FC3 = _d;
							

							if ( !FC3.censored ) {
								message_num += Lang13.Length( FC3.messages );
							} else {
								active_num--;
							}
						}
						dat += "Network currently serves a total of " + total_num + " Feed channels, " + active_num + " of which are active, and a total of " + message_num + " Feed Stories.";
						dat += "<BR><BR><B>Liquid Paper remaining:</B> " + this.paper_remaining * 100 + " cm^3";
						dat += new Txt( "<BR><BR><A href='?src=" ).Ref( this ).str( ";print_paper=" ).item( 0 ).str( "'>Print Paper</A>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
						break;
					case 9:
						dat += "<B>" + this.viewing_channel.channel_name + ": </B><FONT SIZE=1>[created by: <FONT COLOR='maroon'>" + this.viewing_channel.returnAuthor( -1 ) + "</FONT>]</FONT><HR>";

						if ( this.viewing_channel.censored ) {
							dat += "<FONT COLOR='red'><B>ATTENTION: </B></FONT>This channel has been deemed as threatening to the welfare of the station, and marked with a Nanotrasen D-Notice.<BR>";
							dat += "No further feed story additions are allowed while the D-Notice is in effect.</FONT><BR><BR>";
						} else if ( GlobalFuncs.isemptylist( this.viewing_channel.messages ) ) {
							dat += "<I>No feed messages found in channel...</I><BR>";
						} else {
							i = 0;

							foreach (dynamic _f in Lang13.Enumerate( this.viewing_channel.messages, typeof(Newscaster_FeedMessage) )) {
								MESSAGE = _f;
								
								i++;
								dat += "-" + MESSAGE.returnBody( -1 ) + " <BR>";

								if ( MESSAGE.img != null ) {
									Interface13.CacheBrowseResource( Task13.User, MESSAGE.img, "tmp_photo" + i + ".png" );
									dat += "<img src='tmp_photo" + i + ".png' width = '180'><BR>";

									if ( Lang13.Bool( MESSAGE.caption ) ) {
										dat += "" + MESSAGE.caption + "<BR>";
									}
									dat += "<BR>";
								}
								dat += "<FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE.returnAuthor( -1 ) + " </FONT>] - (" + MESSAGE.time_stamp + ")</FONT><BR>";
								dat += "<b><font size=1>" + MESSAGE.comments.len + " comment" + ( MESSAGE.comments.len > 1 ? "s" : "" ) + "</font></b><br>";

								foreach (dynamic _e in Lang13.Enumerate( MESSAGE.comments, typeof(Newscaster_FeedComment) )) {
									comment = _e;
									
									dat += "<font size=1><small>" + comment.body + "</font><br><font size=1><small><small><small>" + comment.author + " " + comment.time_stamp + "</small></small></small></small></font><br>";
								}

								if ( MESSAGE.locked ) {
									dat += "<b>Comments locked</b><br>";
								} else {
									dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";new_comment=" ).Ref( MESSAGE ).str( "'>Comment</a><br>" ).ToString();
								}
							}
						}
						dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>" ).ToString();
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 1 ).str( "'>Back</A>" ).ToString();
						break;
					case 10:
						dat += "<B>Nanotrasen Feed Censorship Tool</B><BR>";
						dat += "<FONT SIZE=1>NOTE: Due to the nature of news Feeds, total deletion of a Feed Story is not possible.<BR>";
						dat += "Keep in mind that users attempting to view a censored feed will instead see the [REDACTED] tag above it.</FONT>";
						dat += "<HR>Select Feed channel to get Stories from:<BR>";

						if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
							dat += "<I>No feed channels found active...</I><BR>";
						} else {
							
							foreach (dynamic _g in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
								CHANNEL2 = _g;
								
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";pick_censor_channel=" ).Ref( CHANNEL2 ).str( "'>" ).item( CHANNEL2.channel_name ).str( "</A> " ).item( ( CHANNEL2.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR>" ).ToString();
							}
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
						break;
					case 11:
						dat += "<B>Nanotrasen D-Notice Handler</B><HR>";
						dat += "<FONT SIZE=1>A D-Notice is to be bestowed upon the channel if the handling Authority deems it as harmful for the station's";
						dat += "morale, integrity or disciplinary behaviour. A D-Notice will render a channel unable to be updated by anyone, without deleting any feed";
						dat += "stories it might contain at the time. You can lift a D-Notice if you have the required access at any time.</FONT><HR>";

						if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
							dat += "<I>No feed channels found active...</I><BR>";
						} else {
							
							foreach (dynamic _h in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(Newscaster_FeedChannel) )) {
								CHANNEL3 = _h;
								
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";pick_d_notice=" ).Ref( CHANNEL3 ).str( "'>" ).item( CHANNEL3.channel_name ).str( "</A> " ).item( ( CHANNEL3.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR>" ).ToString();
							}
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Back</A>" ).ToString();
						break;
					case 12:
						dat += "<B>" + this.viewing_channel.channel_name + ": </B><FONT SIZE=1>[ created by: <FONT COLOR='maroon'>" + this.viewing_channel.returnAuthor( -1 ) + "</FONT> ]</FONT><BR>";
						dat += new Txt( "<FONT SIZE=2><A href='?src=" ).Ref( this ).str( ";censor_channel_author=" ).Ref( this.viewing_channel ).str( "'>" ).item( ( Lang13.Bool( this.viewing_channel.authorCensor ) ? "Undo Author censorship" : "Censor channel Author" ) ).str( "</A></FONT><HR>" ).ToString();

						if ( GlobalFuncs.isemptylist( this.viewing_channel.messages ) ) {
							dat += "<I>No feed messages found in channel...</I><BR>";
						} else {
							
							foreach (dynamic _j in Lang13.Enumerate( this.viewing_channel.messages, typeof(Newscaster_FeedMessage) )) {
								MESSAGE2 = _j;
								
								dat += "-" + MESSAGE2.returnBody( -1 ) + " <BR><FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE2.returnAuthor( -1 ) + "</FONT>]</FONT><BR>";
								dat += new Txt( "<FONT SIZE=2><A href='?src=" ).Ref( this ).str( ";censor_channel_story_body=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.bodyCensor ? "Undo story censorship" : "Censor story" ) ).str( "</A>  -  <A href='?src=" ).Ref( this ).str( ";censor_channel_story_author=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.authorCensor ? "Undo Author Censorship" : "Censor message Author" ) ).str( "</A></FONT><BR>" ).ToString();
								dat += new Txt().item( MESSAGE2.comments.len ).str( " comment" ).item( ( MESSAGE2.comments.len > 1 ? "s" : "" ) ).str( ": <a href='?src=" ).Ref( this ).str( ";lock_comment=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.locked ? "Unlock" : "Lock" ) ).str( "</a><br>" ).ToString();

								foreach (dynamic _i in Lang13.Enumerate( MESSAGE2.comments, typeof(Newscaster_FeedComment) )) {
									comment2 = _i;
									
									dat += new Txt().item( comment2.body ).str( " <a href='?src=" ).Ref( this ).str( ";del_comment=" ).Ref( comment2 ).str( ";del_comment_msg=" ).Ref( MESSAGE2 ).str( "'>X</a><br><font size=1>" ).item( comment2.author ).str( " " ).item( comment2.time_stamp ).str( "</font><br>" ).ToString();
								}
							}
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 10 ).str( "'>Back</A>" ).ToString();
						break;
					case 13:
						dat += "<B>" + this.viewing_channel.channel_name + ": </B><FONT SIZE=1>[ created by: <FONT COLOR='maroon'>" + this.viewing_channel.returnAuthor( -1 ) + "</FONT> ]</FONT><BR>";
						dat += new Txt( "Channel messages listed below. If you deem them dangerous to the station, you can <A href='?src=" ).Ref( this ).str( ";toggle_d_notice=" ).Ref( this.viewing_channel ).str( "'>Bestow a D-Notice upon the channel</A>.<HR>" ).ToString();

						if ( this.viewing_channel.censored ) {
							dat += "<FONT COLOR='red'><B>ATTENTION: </B></FONT>This channel has been deemed as threatening to the welfare of the station, and marked with a Nanotrasen D-Notice.<BR>";
							dat += "No further feed story additions are allowed while the D-Notice is in effect.</FONT><BR><BR>";
						} else if ( GlobalFuncs.isemptylist( this.viewing_channel.messages ) ) {
							dat += "<I>No feed messages found in channel...</I><BR>";
						} else {
							
							foreach (dynamic _k in Lang13.Enumerate( this.viewing_channel.messages, typeof(Newscaster_FeedMessage) )) {
								MESSAGE3 = _k;
								
								dat += "-" + MESSAGE3.returnBody( -1 ) + " <BR><FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE3.returnAuthor( -1 ) + "</FONT>]</FONT><BR>";
							}
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 11 ).str( "'>Back</A>" ).ToString();
						break;
					case 14:
						dat += "<B>Wanted Issue Handler:</B>";
						wanted_already2 = false;
						end_param = 1;

						if ( GlobalVars.news_network.wanted_issue.active ) {
							wanted_already2 = true;
							end_param = 2;
						}

						if ( wanted_already2 ) {
							dat += "<FONT SIZE=2><BR><I>A wanted issue is already in Feed Circulation. You can edit or cancel it below.</FONT></I>";
						}
						dat += "<HR>";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";set_wanted_name=1'>Criminal Name</A>: " ).item( this.channel_name ).str( " <BR>" ).ToString();
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";set_wanted_desc=1'>Description</A>: " ).item( this.msg ).str( " <BR>" ).ToString();
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";set_attachment=1'>Attach Photo</A>: " ).item( ( Lang13.Bool( this.photo ) ? "Photo Attached" : "No Photo" ) ).str( "</BR>" ).ToString();

						if ( wanted_already2 ) {
							dat += "<B>Wanted Issue created by:</B><FONT COLOR='green'>" + GlobalVars.news_network.wanted_issue.scannedUser + "</FONT><BR>";
						} else {
							dat += "<B>Wanted Issue will be created under prosecutor:</B><FONT COLOR='green'>" + this.scanned_user + "</FONT><BR>";
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";submit_wanted=" ).item( end_param ).str( "'>" ).item( ( wanted_already2 ? "Edit Issue" : "Submit" ) ).str( "</A>" ).ToString();

						if ( wanted_already2 ) {
							dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";cancel_wanted=1'>Take down Issue</A>" ).ToString();
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
						break;
					case 15:
						dat += "<FONT COLOR='green'>Wanted issue for " + this.channel_name + " is now in Network Circulation.</FONT><BR><BR>";
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 16:
						dat += "<B><FONT COLOR='maroon'>ERROR: Wanted Issue rejected by Network.</B></FONT><HR><BR>";

						if ( this.channel_name == "" || this.channel_name == "[REDACTED]" ) {
							dat += "<FONT COLOR='maroon'>Invalid name for person wanted.</FONT><BR>";
						}

						if ( this.scanned_user == "Unknown" ) {
							dat += "<FONT COLOR='maroon'>Issue author unverified.</FONT><BR>";
						}

						if ( this.msg == "" || this.msg == "[REDACTED]" ) {
							dat += "<FONT COLOR='maroon'>Invalid description.</FONT><BR>";
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 17:
						dat += "<B>Wanted Issue successfully deleted from Circulation</B><BR>";
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 18:
						
						if ( GlobalVars.news_network.wanted_issue.active ) {
							dat += "<B><FONT COLOR ='maroon'>-- STATIONWIDE WANTED ISSUE --</B></FONT><BR><FONT SIZE=2>[Submitted by: <FONT COLOR='green'>" + GlobalVars.news_network.wanted_issue.scannedUser + "</FONT>]</FONT><HR>";
							dat += "<B>Criminal</B>: " + GlobalVars.news_network.wanted_issue.criminal + "<BR>";
							dat += "<B>Description</B>: " + GlobalVars.news_network.wanted_issue.body + "<BR>";
							dat += "<B>Photo:</B>: ";

							if ( GlobalVars.news_network.wanted_issue.img != null ) {
								Interface13.CacheBrowseResource( Task13.User, GlobalVars.news_network.wanted_issue.img, "tmp_photow.png" );
								dat += "<BR><img src='tmp_photow.png' width = '180'>";
							} else {
								dat += "None";
							}
						} else {
							dat += "No current wanted issue found.<BR><BR>";
						}
						dat += new Txt( "<BR><BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Back</A><BR>" ).ToString();
						break;
					case 19:
						dat += "<FONT COLOR='green'>Wanted issue for " + this.channel_name + " successfully edited.</FONT><BR><BR>";
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 20:
						dat += "<FONT COLOR='green'>Printing successful. Please receive your newspaper from the bottom of the machine.</FONT><BR><BR>";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A>" ).ToString();
						break;
					case 21:
						dat += "<FONT COLOR='maroon'>Unable to print newspaper. Insufficient paper. Please notify maintenance personnel to refill machine storage.</FONT><BR><BR>";
						dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A>" ).ToString();
						break;
				}
				popup = new Browser( human_or_robot_user, "newscaster_main", "Newscaster Unit #" + this.unit_no, 400, 600 );
				popup.set_content( dat );
				popup.set_title_image( ((Mob)human_or_robot_user).browse_rsc_icon( this.icon, this.icon_state ) );
				popup.open();
			}
			return null;
		}

		// Function from file: newscaster.dm
		public override dynamic attack_ai( dynamic user = null ) {
			return this.attack_hand( user );
		}

		// Function from file: newscaster.dm
		public override bool ex_act( double? severity = null, dynamic target = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					break;
				case 2:
					this.isbroken = true;

					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						this.update_icon();
					}
					break;
				default:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.isbroken = true;
					}
					this.update_icon();
					break;
			}
			return false;
		}

		// Function from file: newscaster.dm
		public override void power_change(  ) {
			
			if ( this.isbroken ) {
				return;
			}

			if ( Lang13.Bool( this.powered() ) ) {
				this.ispowered = true;
				this.stat &= 65533;
				this.update_icon();
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.ispowered = false;
					this.stat |= 2;
					this.update_icon();
					return;
				}));
			}
			return;
		}

		// Function from file: newscaster.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			
			if ( !this.ispowered || this.isbroken ) {
				this.icon_state = "newscaster_off";

				if ( this.isbroken ) {
					this.overlays.Cut();
					this.overlays.Add( new Image( this.icon, "crack3" ) );
				}
				return false;
			}
			this.overlays.Cut();

			if ( GlobalVars.news_network.wanted_issue.active ) {
				this.icon_state = "newscaster_wanted";
				return false;
			}

			if ( this.alert != 0 ) {
				this.overlays.Add( "newscaster_alert" );
			}

			if ( this.hitstaken > 0 ) {
				this.overlays.Add( new Image( this.icon, "crack" + this.hitstaken ) );
			}
			this.icon_state = "newscaster_normal";
			return false;
		}

		// Function from file: newscaster.dm
		public override dynamic Destroy(  ) {
			GlobalVars.allCasters.Remove( this );
			this.viewing_channel = null;
			this.photo = null;
			return base.Destroy();
		}

	}

}