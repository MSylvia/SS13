// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Newscaster : Obj_Machinery {

		public bool? buildstage = true;
		public double? screen = 0;
		public int paper_remaining = 15;
		public bool securityCaster = false;
		public int unit_no = 0;
		public int alert_delay = 500;
		public bool alert = false;
		public string scanned_user = "Unknown";
		public dynamic masterController = null;
		public dynamic msg = "";
		public dynamic photo = null;
		public dynamic channel_name = "";
		public bool c_locked = false;
		public int hitstaken = 0;
		public dynamic viewing_channel = new ByTable();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.luminosity = 0;
			this.ghost_write = true;
			this.custom_aghost_alerts = true;
			this.anchored = 1;
			this.icon = "icons/obj/terminals.dmi";
			this.icon_state = "newscaster_normal";
		}

		// Function from file: newscaster.dm
		public Obj_Machinery_Newscaster ( dynamic loc = null, int ndir = 0, bool? building = null ) : base( (object)(loc) ) {
			building = building ?? true;

			Obj_Machinery_Newscaster NEWSCASTER = null;

			this.buildstage = building;

			if ( !( this.buildstage == true ) ) {
				this.pixel_x = ( ( ndir & 3 ) != 0 ? 0 : ( ndir == 4 ? 28 : -28 ) );
				this.pixel_y = ( ( ndir & 3 ) != 0 ? ( ndir == 1 ? 28 : -28 ) : 0 );
				this.dir = ndir;
			}
			GlobalVars.allCasters.Add( this );

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
				NEWSCASTER = _a;
				
				this.unit_no++;
			}
			this.update_icon();
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			return;
		}

		// Function from file: newscaster.dm
		public override string say_quote( dynamic text = null ) {
			return "beeps, " + text;
		}

		// Function from file: newscaster.dm
		public void newsAlert( dynamic channel = null ) {
			dynamic T = null;
			dynamic O = null;

			T = GlobalFuncs.get_turf( this );

			if ( Lang13.Bool( channel ) ) {
				this.say( "Breaking news from " + channel + "!" );
				this.alert = true;
				this.update_icon();
				Task13.Schedule( 300, (Task13.Closure)(() => {
					this.alert = false;
					this.update_icon();
					return;
				}));
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/twobeep.ogg", 75, 1 );
			} else {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchHearers( T, Game13.view - 1 ) )) {
					O = _a;
					
				}
				this.say( "Attention! Wanted issue distributed!" );
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/machines/warning-buzzer.ogg", 75, 1 );
			}
			return;
		}

		// Function from file: newscaster.dm
		public void print_paper(  ) {
			Obj_Item_Weapon_Newspaper NEWSPAPER = null;
			FeedChannel FC = null;

			GlobalFuncs.feedback_inc( "newscaster_newspapers_printed", 1 );
			NEWSPAPER = new Obj_Item_Weapon_Newspaper();

			foreach (dynamic _a in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
				FC = _a;
				
				NEWSPAPER.news_content.Add( FC );
			}

			if ( GlobalVars.news_network.wanted_issue != null ) {
				NEWSPAPER.important_message = GlobalVars.news_network.wanted_issue;
			}
			NEWSPAPER.loc = GlobalFuncs.get_turf( this );
			this.paper_remaining--;
			return;
		}

		// Function from file: newscaster.dm
		public void scan_user( dynamic user = null ) {
			dynamic human_user = null;
			dynamic P = null;
			Obj_Item_Weapon_Card_Id ID = null;
			dynamic ai_user = null;

			
			if ( Lang13.Bool( this.masterController ) ) {
				
				if ( this.masterController != user ) {
					
					if ( Map13.GetDistance( this.masterController, this ) <= 1 ) {
						
						if ( !( this.masterController is Mob_Dead_Observer ) ) {
							GlobalFuncs.to_chat( user, "<span class='warning'>Wait for " + this.masterController + " to finish and move away.</span>" );
							return;
						}
					}
				}
			}

			if ( user is Mob_Living_Carbon_Human ) {
				human_user = user;

				if ( Lang13.Bool( human_user.wear_id ) ) {
					
					if ( human_user.wear_id is Obj_Item_Device_Pda ) {
						P = human_user.wear_id;

						if ( Lang13.Bool( P.id ) ) {
							this.scanned_user = "" + P.id.registered_name + " (" + P.id.assignment + ")";
						} else {
							this.scanned_user = "Unknown";
						}
					} else if ( human_user.wear_id is Obj_Item_Weapon_Card_Id ) {
						ID = human_user.wear_id;
						this.scanned_user = "" + ID.registered_name + " (" + ID.assignment + ")";
					} else {
						this.scanned_user = "Unknown";
					}
				} else {
					this.scanned_user = "Unknown";
				}
			} else if ( user is Mob_Living_Silicon_Ai ) {
				ai_user = user;
				this.scanned_user = "" + ai_user.name + " (" + ai_user.job + ")";
			} else if ( GlobalFuncs.isAdminGhost( user ) ) {
				this.scanned_user = "Nanotrasen Officer #" + Rand13.Int( 0, 9 ) + Rand13.Int( 0, 9 ) + Rand13.Int( 0, 9 );
			} else if ( user is Mob_Dead_Observer ) {
				this.scanned_user = "Space-Time Anomaly #" + Rand13.Int( 0, 9 ) + Rand13.Int( 0, 9 ) + Rand13.Int( 0, 9 );
			}
			this.masterController = user;
			return;
		}

		// Function from file: newscaster.dm
		public string AttachPhotoButton( dynamic user = null ) {
			string name = null;
			string href = null;
			dynamic P = null;

			name = "Attach Photo";
			href = "set_attachment=1";

			if ( user is Mob_Living_Silicon_Ai ) {
				name = "Upload Photo";
				href = "upload_photo=1";
			}

			if ( Lang13.Bool( this.photo ) ) {
				
				if ( this.photo is Picture ) {
					P = this.photo;
					name = "Delete Photo (" + P.fields["name"] + ")";
				} else {
					name = "Eject Photo";
				}
			}
			return new Txt( "<B><A href='?src=" ).Ref( this ).str( ";" ).item( href ).str( "'>" ).item( name ).str( "</A></B><BR>" ).ToString();
		}

		// Function from file: newscaster.dm
		public void EjectPhoto( Mob user = null ) {
			dynamic P = null;

			
			if ( !Lang13.Bool( this.photo ) ) {
				return;
			}

			if ( this.photo is Obj_Item_Weapon_Photo ) {
				P = this.photo;
				P.loc = this.loc;
				this.photo = null;
			} else if ( this.photo is Picture ) {
				this.photo = null;
			}
			return;
		}

		// Function from file: newscaster.dm
		public void AttachPhoto( Mob user = null ) {
			dynamic P = null;

			
			if ( Lang13.Bool( this.photo ) ) {
				this.EjectPhoto( user ); return;
			}
			P = user.get_active_hand();

			if ( P is Obj_Item_Weapon_Photo && user.drop_item( P, this ) ) {
				this.photo = P;
			}
			return;
		}

		// Function from file: newscaster.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			GlobalFuncs.to_chat( a, "<font color='blue'>The newscaster controls are far too complicated for your tiny brain!</font>" );
			return null;
		}

		// Function from file: newscaster.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: newscaster.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic stack = null;
			dynamic W = null;

			
			switch ((bool?)( this.buildstage )) {
				case 0:
					
					if ( a is Obj_Item_Weapon_Crowbar ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 50, 1 );
						((Ent_Static)b).visible_message( "<span class='notice'>" + b + " begins prying off the " + this + "!</span>", "<span class='notice'>You begin prying off the " + this + "</span>" );

						if ( GlobalFuncs.do_after( b, this, 10 ) ) {
							GlobalFuncs.to_chat( b, "<span class='notice'>You pry off the " + this + "!.</span>" );
							new Obj_Item_Mounted_Frame_Newscaster( this.loc );
							GlobalFuncs.qdel( this );
							return null;
						}
					}

					if ( a is Obj_Item_Weapon_Screwdriver && !( ( this.stat & 1 ) != 0 ) ) {
						((Ent_Static)b).visible_message( "<span class='notice'>" + b + " screws in the " + this + "!</span>", "<span class='notice'>You screw in the " + this + "</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 100, 1 );
						this.buildstage = true;
					}
					break;
				case 1:
					
					if ( a is Obj_Item_Weapon_Screwdriver && !( ( this.stat & 1 ) != 0 ) ) {
						((Ent_Static)b).visible_message( "<span class='notice'>" + b + " unscrews the " + this + "!</span>", "<span class='notice'>You unscrew the " + this + "</span>" );
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Screwdriver.ogg", 100, 1 );
						this.buildstage = false;
						this.update_icon();
						return null;
					}

					if ( ( this.stat & 1 ) != 0 && a is Obj_Item_Stack_Sheet_Glass_Glass ) {
						stack = a;

						if ( Convert.ToDouble( stack.amount - 2 ) < 0 ) {
							GlobalFuncs.to_chat( b, "<span class='warning'>You need more glass to do that.</span>" );
						} else {
							stack.use( 2 );
							this.hitstaken = 0;
							this.stat &= 65534;
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Deconstruct.ogg", 80, 1 );
						}
					} else if ( ( this.stat & 1 ) != 0 ) {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/hit_on_shattered_glass.ogg", 100, 1 );
						this.visible_message( "<EM>" + b.name + "</EM> further abuses the shattered " + this + "." );
					} else if ( a is Obj_Item_Weapon ) {
						W = a;

						if ( Convert.ToDouble( W.force ) < 15 ) {
							this.visible_message( "" + b.name + " hits the " + this + " with the " + W + " with no visible effect." );
							GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/Glasshit.ogg", 100, 1 );
						} else {
							this.hitstaken++;

							if ( this.hitstaken == 3 ) {
								this.visible_message( "" + b.name + " smashes the " + this + "!" );
								this.stat |= 1;
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/Glassbr3.ogg", 100, 1 );
							} else {
								this.visible_message( "" + b.name + " forcefully slams the " + this.name + " with the " + a.name + "!" );
								GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/Glasshit.ogg", 100, 1 );
							}
						}
					} else {
						GlobalFuncs.to_chat( b, "<span class='notice'>This does nothing.</span>" );
					}
					break;
			}
			this.update_icon();
			return null;
		}

		// Function from file: newscaster.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			ByTable existing_authors = null;
			FeedChannel FC = null;
			bool check = false;
			FeedChannel FC2 = null;
			string choice = null;
			FeedChannel newChannel = null;
			ByTable available_channels = null;
			FeedChannel F = null;
			Mob A = null;
			ByTable nametemp = null;
			dynamic find = null;
			Picture t = null;
			Picture q = null;
			FeedMessage newMsg = null;
			dynamic P = null;
			dynamic P2 = null;
			FeedChannel FC3 = null;
			Obj_Machinery_Newscaster NEWSCASTER = null;
			bool already_wanted = false;
			double? input_param = null;
			string choice2 = null;
			FeedMessage WANTED = null;
			dynamic P3 = null;
			dynamic P4 = null;
			Obj_Machinery_Newscaster NEWSCASTER2 = null;
			dynamic P5 = null;
			dynamic P6 = null;
			string choice3 = null;
			Obj_Machinery_Newscaster NEWSCASTER3 = null;
			dynamic FC4 = null;
			dynamic MSG = null;
			dynamic MSG2 = null;
			dynamic FC5 = null;
			dynamic FC6 = null;
			dynamic FC7 = null;
			dynamic FC8 = null;
			dynamic FM = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( this.masterController ) && !( this.masterController is Mob_Dead_Observer ) && Map13.GetDistance( this.masterController, this ) <= 1 && Task13.User != this.masterController ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You must wait for " + this.masterController + " to finish and move away.</span>" );
				return null;
			}

			if ( Task13.User.contents.Find( this ) != 0 || Map13.GetDistance( this, Task13.User ) <= 1 && this.loc is Tile || Task13.User is Mob_Living_Silicon || Task13.User is Mob_Dead_Observer ) {
				Task13.User.set_machine( this );

				if ( Lang13.Bool( href_list["set_channel_name"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "set a channel's name" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.channel_name = GlobalFuncs.strip_html_simple( Interface13.Input( Task13.User, "Provide a Feed Channel Name", "Network Channel Handler", "", null, InputType.Any ) );

					while (String13.FindIgnoreCase( this.channel_name, " ", 1, 0 ) == 1) {
						this.channel_name = String13.SubStr( this.channel_name, 2, Lang13.Length( this.channel_name ) + 1 );
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_channel_lock"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "locked a channel" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.c_locked = !this.c_locked;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["submit_new_channel"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "created a new channel" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					existing_authors = new ByTable();

					foreach (dynamic _a in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
						FC = _a;
						

						if ( FC.author == "[REDACTED]" ) {
							existing_authors.Add( FC.backup_author );
						} else {
							existing_authors.Add( FC.author );
						}
					}
					check = false;

					foreach (dynamic _b in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
						FC2 = _b;
						

						if ( FC2.channel_name == this.channel_name ) {
							check = true;
							break;
						}
					}

					if ( this.channel_name == "" || this.channel_name == "[REDACTED]" || this.scanned_user == "Unknown" || check || false ) {
						this.screen = 7;
					} else {
						choice = Interface13.Alert( "Please confirm Feed channel creation", "Network Channel Handler", "Confirm", "Cancel" );

						if ( choice == "Confirm" ) {
							newChannel = new FeedChannel();
							newChannel.channel_name = this.channel_name;
							newChannel.author = this.scanned_user;
							newChannel.locked = this.c_locked;
							GlobalFuncs.feedback_inc( "newscaster_channels", 1 );
							GlobalVars.news_network.network_channels.Add( newChannel );
							this.screen = 5;
						}
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_channel_receiving"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "tried to set the receiving channel" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					available_channels = new ByTable();

					foreach (dynamic _c in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
						F = _c;
						

						if ( ( !F.locked || F.author == this.scanned_user ) && !F.censored ) {
							available_channels.Add( F.channel_name );
						}
					}
					this.channel_name = GlobalFuncs.strip_html_simple( Interface13.Input( Task13.User, "Choose receiving Feed Channel", "Network Channel Handler", null, available_channels, InputType.Any ) );
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_new_message"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "set the message of a new feed story" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}

					if ( this.msg == null ) {
						this.msg = "";
					}
					this.msg = GlobalFuncs.strip_html( Interface13.Input( Task13.User, "Write your Feed story", "Network Channel Handler", this.msg, null, InputType.Any ) );

					while (String13.FindIgnoreCase( this.msg, " ", 1, 0 ) == 1) {
						this.msg = String13.SubStr( this.msg, 2, Lang13.Length( this.msg ) + 1 );
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_attachment"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.AttachPhoto( Task13.User );
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["upload_photo"] ) ) {
					
					if ( !( Task13.User is Mob_Living_Silicon_Ai ) ) {
						return null;
					}

					if ( Lang13.Bool( this.photo ) ) {
						this.EjectPhoto();
						this.updateUsrDialog();
						return null;
					}
					A = Task13.User;
					nametemp = new ByTable();
					find = null;

					if ( ((dynamic)A).aicamera.aipictures.len == 0 ) {
						GlobalFuncs.to_chat( Task13.User, "<FONT COLOR=red><B>No images saved<B>" );
						return null;
					}

					foreach (dynamic _d in Lang13.Enumerate( ((dynamic)A).aicamera.aipictures, typeof(Picture) )) {
						t = _d;
						
						nametemp.Add( t.fields["name"] );
					}
					find = Interface13.Input( "Select image", null, null, null, nametemp, InputType.Any );

					foreach (dynamic _e in Lang13.Enumerate( ((dynamic)A).aicamera.aipictures, typeof(Picture) )) {
						q = _e;
						

						if ( q.fields["name"] == find ) {
							this.photo = q;
							break;
						}
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["submit_new_message"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "added a new story" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}

					if ( this.msg == "" || this.msg == "[REDACTED]" || this.scanned_user == "Unknown" || this.channel_name == "" ) {
						this.screen = 6;
					} else {
						newMsg = new FeedMessage();
						newMsg.author = this.scanned_user;
						newMsg.body = this.msg;

						if ( Lang13.Bool( this.photo ) ) {
							
							if ( this.photo is Obj_Item_Weapon_Photo ) {
								P = this.photo;
								newMsg.img = P.img;
								newMsg.img_info = P.info;
							} else if ( this.photo is Picture ) {
								P2 = this.photo;
								newMsg.img = P2.fields["img"];
								newMsg.img_info = P2.fields["info"];
							}
						}
						GlobalFuncs.feedback_inc( "newscaster_stories", 1 );

						foreach (dynamic _f in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
							FC3 = _f;
							

							if ( FC3.channel_name == this.channel_name ) {
								FC3.messages.Add( newMsg );
								break;
							}
						}
						this.screen = 4;

						foreach (dynamic _g in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
							NEWSCASTER = _g;
							
							NEWSCASTER.newsAlert( this.channel_name );
						}
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["create_channel"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "created a channel" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.screen = 2;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["create_feed_story"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "created a feed story" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.screen = 3;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["menu_paper"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.screen = 8;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["print_paper"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "printed a paper" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}

					if ( !( this.paper_remaining != 0 ) ) {
						this.screen = 21;
					} else {
						this.print_paper();
						this.screen = 20;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["menu_censor_story"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "censored a story" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.screen = 10;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["menu_censor_channel"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "censored a channel" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.screen = 11;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["menu_wanted"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					already_wanted = false;

					if ( GlobalVars.news_network.wanted_issue != null ) {
						already_wanted = true;
					}

					if ( already_wanted ) {
						this.channel_name = GlobalVars.news_network.wanted_issue.author;
						this.msg = GlobalVars.news_network.wanted_issue.body;
					}
					this.screen = 14;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_wanted_name"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "tried to set the name of a wanted person" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.channel_name = GlobalFuncs.strip_html( Interface13.Input( Task13.User, "Provide the name of the Wanted person", "Network Security Handler", "", null, InputType.Any ) );

					while (String13.FindIgnoreCase( this.channel_name, " ", 1, 0 ) == 1) {
						this.channel_name = String13.SubStr( this.channel_name, 2, Lang13.Length( this.channel_name ) + 1 );
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["set_wanted_desc"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "tried to set the description of a wanted person" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					this.msg = GlobalFuncs.strip_html( Interface13.Input( Task13.User, "Provide the a description of the Wanted person and any other details you deem important", "Network Security Handler", "", null, InputType.Any ) );

					while (String13.FindIgnoreCase( this.msg, " ", 1, 0 ) == 1) {
						this.msg = String13.SubStr( this.msg, 2, Lang13.Length( this.msg ) + 1 );
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["submit_wanted"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "submitted a wanted poster" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					input_param = String13.ParseNumber( href_list["submit_wanted"] );

					if ( this.msg == "" || this.channel_name == "" || this.scanned_user == "Unknown" ) {
						this.screen = 16;
					} else {
						choice2 = Interface13.Alert( "Please confirm Wanted Issue " + ( input_param == 1 ? "creation." : "edit." ), "Network Security Handler", "Confirm", "Cancel" );

						if ( choice2 == "Confirm" ) {
							
							if ( input_param == 1 ) {
								WANTED = new FeedMessage();
								WANTED.author = this.channel_name;
								WANTED.body = this.msg;
								WANTED.backup_author = this.scanned_user;

								if ( Lang13.Bool( this.photo ) ) {
									
									if ( this.photo is Obj_Item_Weapon_Photo ) {
										P3 = this.photo;
										WANTED.img = P3.img;
									} else if ( this.photo is Picture ) {
										P4 = this.photo;
										WANTED.img = P4.fields["img"];
									}
								}
								GlobalVars.news_network.wanted_issue = WANTED;

								foreach (dynamic _h in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
									NEWSCASTER2 = _h;
									
									NEWSCASTER2.newsAlert();
									NEWSCASTER2.update_icon();
								}
								this.screen = 15;
							} else {
								
								if ( GlobalVars.news_network.wanted_issue.is_admin_message ) {
									Interface13.Alert( "The wanted issue has been distributed by a Nanotrasen higherup. You cannot edit it.", "Ok" );
									return null;
								}
								GlobalVars.news_network.wanted_issue.author = this.channel_name;
								GlobalVars.news_network.wanted_issue.body = this.msg;
								GlobalVars.news_network.wanted_issue.backup_author = this.scanned_user;

								if ( Lang13.Bool( this.photo ) ) {
									
									if ( this.photo is Obj_Item_Weapon_Photo ) {
										P5 = this.photo;
										GlobalVars.news_network.wanted_issue.img = P5.img;
									} else if ( this.photo is Picture ) {
										P6 = this.photo;
										GlobalVars.news_network.wanted_issue.img = P6.fields["img"];
									}
								}
								this.screen = 19;
							}
						}
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["cancel_wanted"] ) ) {
					
					if ( GlobalVars.news_network.wanted_issue.is_admin_message ) {
						Interface13.Alert( "The wanted issue has been distributed by a Nanotrasen higherup. You cannot take it down.", "Ok" );
						return null;
					}
					choice3 = Interface13.Alert( "Please confirm Wanted Issue removal", "Network Security Handler", "Confirm", "Cancel" );

					if ( choice3 == "Confirm" ) {
						GlobalVars.news_network.wanted_issue = null;

						foreach (dynamic _i in Lang13.Enumerate( GlobalVars.allCasters, typeof(Obj_Machinery_Newscaster) )) {
							NEWSCASTER3 = _i;
							
							NEWSCASTER3.update_icon();
						}
						this.screen = 17;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["view_wanted"] ) ) {
					this.screen = 18;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["censor_channel_author"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "tried to censor an author" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					FC4 = Lang13.FindObj( href_list["censor_channel_author"] );

					if ( FC4.is_admin_channel ) {
						Interface13.Alert( "This channel was created by a Nanotrasen Officer. You cannot censor it.", "Ok" );
						return null;
					}

					if ( FC4.author != "<B>[REDACTED]</B>" ) {
						FC4.backup_author = FC4.author;
						FC4.author = "<B>[REDACTED]</B>";
					} else {
						FC4.author = FC4.backup_author;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["censor_channel_story_author"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "tried to censor a story's author" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					MSG = Lang13.FindObj( href_list["censor_channel_story_author"] );

					if ( MSG.is_admin_message ) {
						Interface13.Alert( "This message was created by a Nanotrasen Officer. You cannot censor its author.", "Ok" );
						return null;
					}

					if ( MSG.author != "<B>[REDACTED]</B>" ) {
						MSG.backup_author = MSG.author;
						MSG.author = "<B>[REDACTED]</B>";
					} else {
						MSG.author = MSG.backup_author;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["censor_channel_story_body"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "tried to censor a story" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					MSG2 = Lang13.FindObj( href_list["censor_channel_story_body"] );

					if ( MSG2.is_admin_message ) {
						Interface13.Alert( "This channel was created by a Nanotrasen Officer. You cannot censor it.", "Ok" );
						return null;
					}

					if ( MSG2.img != null ) {
						MSG2.backup_img = MSG2.img;
						MSG2.img = null;
					} else {
						MSG2.img = MSG2.backup_img;
					}

					if ( MSG2.body != "<B>[REDACTED]</B>" ) {
						MSG2.backup_body = MSG2.body;
						MSG2.body = "<B>[REDACTED]</B>";
					} else {
						MSG2.body = MSG2.backup_body;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["pick_d_notice"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					FC5 = Lang13.FindObj( href_list["pick_d_notice"] );
					this.viewing_channel = FC5;
					this.screen = 13;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["toggle_d_notice"] ) ) {
					
					if ( Task13.User is Mob_Dead_Observer && !GlobalFuncs.canGhostWrite( Task13.User, this, "tried to set a D-notice" ) ) {
						GlobalFuncs.to_chat( Task13.User, "<span class='warning'>You can't do that.</span>" );
						return null;
					}
					FC6 = Lang13.FindObj( href_list["toggle_d_notice"] );

					if ( FC6.is_admin_channel ) {
						Interface13.Alert( "This channel was created by a Nanotrasen Officer. You cannot place a D-Notice upon it.", "Ok" );
						return null;
					}
					FC6.censored = !FC6.censored;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["view"] ) ) {
					this.screen = 1;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["setScreen"] ) ) {
					this.screen = String13.ParseNumber( href_list["setScreen"] );

					if ( this.screen == 0 ) {
						this.scanned_user = "Unknown";
						this.msg = "";
						this.c_locked = false;
						this.channel_name = "";
						this.viewing_channel = null;
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["show_channel"] ) ) {
					FC7 = Lang13.FindObj( href_list["show_channel"] );
					this.viewing_channel = FC7;
					this.screen = 9;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["pick_censor_channel"] ) ) {
					FC8 = Lang13.FindObj( href_list["pick_censor_channel"] );
					this.viewing_channel = FC8;
					this.screen = 12;
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["show_photo_info"] ) ) {
					FM = Lang13.FindObj( href_list["show_photo_info"] );

					if ( FM is FeedMessage && Lang13.Bool( FM.img_info ) ) {
						Task13.User.show_message( "<span class='info'>" + FM.img_info + "</span>", 1 );
					}
					this.updateUsrDialog();
				} else if ( Lang13.Bool( href_list["refresh"] ) ) {
					this.updateUsrDialog();
				}
			}
			return null;
		}

		// Function from file: newscaster.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic _default = null;

			dynamic M = null;
			string dat = null;
			bool wanted_already = false;
			FeedChannel CHANNEL = null;
			ByTable existing_authors = null;
			FeedChannel FC = null;
			bool check = false;
			FeedChannel FC2 = null;
			int total_num = 0;
			int active_num = 0;
			int message_num = 0;
			FeedChannel FC3 = null;
			int i = 0;
			FeedMessage MESSAGE = null;
			FeedChannel CHANNEL2 = null;
			FeedChannel CHANNEL3 = null;
			FeedMessage MESSAGE2 = null;
			FeedMessage MESSAGE3 = null;
			bool wanted_already2 = false;
			int end_param = 0;

			
			if ( this.buildstage != true ) {
				return _default;
			}
			_default = base.attack_hand( (object)(a), (object)(b), (object)(c) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( a is Mob_Living_Carbon_Human || a is Mob_Living_Silicon || a is Mob_Dead_Observer ) {
				M = a;
				dat = "<HEAD><TITLE>Newscaster</TITLE></HEAD><H3>Newscaster Unit #" + this.unit_no + "</H3>";
				this.scan_user( M );

				switch ((double?)( this.screen )) {
					case 0:
						dat += "Welcome to Newscasting Unit #" + this.unit_no + ".<BR> Interface & News networks Operational.\n					<BR><FONT SIZE=1>property of Nanotrasen Inc</FONT>";

						if ( GlobalVars.news_network.wanted_issue != null ) {
							dat += new Txt( "<HR><A href='?src=" ).Ref( this ).str( ";view_wanted=1'>Read Wanted Issue</A>" ).ToString();
						}
						dat += new Txt( "<HR><BR><A href='?src=" ).Ref( this ).str( ";create_channel=1'>Create Feed Channel</A>\n					<BR><A href='?src=" ).Ref( this ).str( ";view=1'>View Feed Channels</A>\n					<BR><A href='?src=" ).Ref( this ).str( ";create_feed_story=1'>Submit new Feed story</A>\n					<BR><A href='?src=" ).Ref( this ).str( ";menu_paper=1'>Print newspaper</A>\n					<BR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Re-scan User</A>\n					<BR><BR><A href='?src=" ).Ref( M ).str( ";mach_close=newscaster_main'>Exit</A>" ).ToString();

						if ( this.securityCaster ) {
							wanted_already = false;

							if ( GlobalVars.news_network.wanted_issue != null ) {
								wanted_already = true;
							}
							dat += new Txt( "<HR><B>Feed Security functions:</B><BR>\n						<BR><A href='?src=" ).Ref( this ).str( ";menu_wanted=1'>" ).item( ( wanted_already ? "Manage" : "Publish" ) ).str( " \"Wanted\" Issue</A>\n						<BR><A href='?src=" ).Ref( this ).str( ";menu_censor_story=1'>Censor Feed Stories</A>\n						<BR><A href='?src=" ).Ref( this ).str( ";menu_censor_channel=1'>Mark Feed Channel with Nanotrasen D-Notice</A>" ).ToString();
						}
						dat += "<BR><HR>The newscaster recognises you as: <FONT COLOR='green'>" + this.scanned_user + "</FONT>";
						break;
					case 1:
						dat += "Station Feed Channels<HR>";

						if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
							dat += "<I>No active channels found...</I>";
						} else {
							
							foreach (dynamic _a in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
								CHANNEL = _a;
								

								if ( CHANNEL.is_admin_channel ) {
									dat += new Txt( "<B><FONT style='BACKGROUND-COLOR: LightGreen '><A href='?src=" ).Ref( this ).str( ";show_channel=" ).Ref( CHANNEL ).str( "'>" ).item( CHANNEL.channel_name ).str( "</A></FONT></B><BR>" ).ToString();
								} else {
									dat += new Txt( "<B><A href='?src=" ).Ref( this ).str( ";show_channel=" ).Ref( CHANNEL ).str( "'>" ).item( CHANNEL.channel_name ).str( "</A> " ).item( ( CHANNEL.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR></B>" ).ToString();
								}
							}
						}
						dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>\n					<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Back</A>" ).ToString();
						break;
					case 2:
						dat += new Txt( "Creating new Feed Channel...\n					<HR><B><A href='?src=" ).Ref( this ).str( ";set_channel_name=1'>Channel Name</A>:</B> " ).item( this.channel_name ).str( "<BR>\n					<B>Channel Author:</B> <FONT COLOR='green'>" ).item( this.scanned_user ).str( "</FONT><BR>\n					<B><A href='?src=" ).Ref( this ).str( ";set_channel_lock=1'>Will Accept Public Feeds</A>:</B> " ).item( ( this.c_locked ? "NO" : "YES" ) ).str( "<BR><BR>\n					<BR><A href='?src=" ).Ref( this ).str( ";submit_new_channel=1'>Submit</A><BR><BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A><BR>" ).ToString();
						break;
					case 3:
						dat += new Txt( "Creating new Feed Message...\n					<HR><B><A href='?src=" ).Ref( this ).str( ";set_channel_receiving=1'>Receiving Channel</A>:</B> " ).item( this.channel_name ).str( "<BR>\n					<B>Message Author:</B> <FONT COLOR='green'>" ).item( this.scanned_user ).str( "</FONT><BR>\n					<B><A href='?src=" ).Ref( this ).str( ";set_new_message=1'>Message Body</A>:</B> " ).item( this.msg ).str( " <BR>" ).ToString();
						dat += this.AttachPhotoButton( a );
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";submit_new_message=1'>Submit</A><BR><BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A><BR>" ).ToString();
						break;
					case 4:
						dat += new Txt( "Feed story successfully submitted to " ).item( this.channel_name ).str( ".<BR><BR>\n					<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 5:
						dat += new Txt( "Feed Channel " ).item( this.channel_name ).str( " created successfully.<BR><BR>\n					<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 6:
						dat += "<B><FONT COLOR='maroon'>ERROR: Could not submit Feed story to Network.</B></FONT><HR><BR>";

						if ( this.channel_name == "" ) {
							dat += "<FONT COLOR='maroon'>ï¿½Invalid receiving channel name.</FONT><BR>";
						}

						if ( this.scanned_user == "Unknown" ) {
							dat += "<FONT COLOR='maroon'>ï¿½Channel author unverified.</FONT><BR>";
						}

						if ( this.msg == "" || this.msg == "[REDACTED]" ) {
							dat += "<FONT COLOR='maroon'>ï¿½Invalid message body.</FONT><BR>";
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 3 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 7:
						dat += "<B><FONT COLOR='maroon'>ERROR: Could not submit Feed Channel to Network.</B></FONT><HR><BR>";
						existing_authors = new ByTable();

						foreach (dynamic _b in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
							FC = _b;
							

							if ( FC.author == "[REDACTED]" ) {
								existing_authors.Add( FC.backup_author );
							} else {
								existing_authors.Add( FC.author );
							}
						}
						Interface13.Stat( null, existing_authors.Contains( this.scanned_user ) );

						if ( false ) {
							dat += "<FONT COLOR='maroon'>ï¿½There already exists a Feed channel under your name.</FONT><BR>";
						}

						if ( this.channel_name == "" || this.channel_name == "[REDACTED]" ) {
							dat += "<FONT COLOR='maroon'>ï¿½Invalid channel name.</FONT><BR>";
						}
						check = false;

						foreach (dynamic _c in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
							FC2 = _c;
							

							if ( FC2.channel_name == this.channel_name ) {
								check = true;
								break;
							}
						}

						if ( check ) {
							dat += "<FONT COLOR='maroon'>ï¿½Channel name already in use.</FONT><BR>";
						}

						if ( this.scanned_user == "Unknown" ) {
							dat += "<FONT COLOR='maroon'>ï¿½Channel author unverified.</FONT><BR>";
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 2 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 8:
						total_num = Lang13.Length( GlobalVars.news_network.network_channels );
						active_num = total_num;
						message_num = 0;

						foreach (dynamic _d in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
							FC3 = _d;
							

							if ( !FC3.censored ) {
								message_num += Lang13.Length( FC3.messages );
							} else {
								active_num--;
							}
						}
						dat += new Txt( "Network currently serves a total of " ).item( total_num ).str( " Feed channels, " ).item( active_num ).str( " of which are active, and a total of " ).item( message_num ).str( " Feed Stories.\" //TODO: CONTINU\n					<BR><BR><B>Liquid Paper remaining:</B> " ).item( this.paper_remaining * 100 ).str( " cm^3\n					<BR><BR><A href='?src=" ).Ref( this ).str( ";print_paper=" ).item( 0 ).str( "'>Print Paper</A>\n					<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
						break;
					case 9:
						dat += "<B>" + this.viewing_channel.channel_name + ": </B><FONT SIZE=1>[created by: <FONT COLOR='maroon'>" + this.viewing_channel.author + "</FONT>]</FONT><HR>";

						if ( this.viewing_channel.censored ) {
							dat += "<FONT COLOR='red'><B>ATTENTION: </B></FONT>This channel has been deemed as threatening to the welfare of the station, and marked with a Nanotrasen D-Notice.<BR>\n						No further feed story additions are allowed while the D-Notice is in effect.</FONT><BR><BR>";
						} else if ( GlobalFuncs.isemptylist( this.viewing_channel.messages ) ) {
							dat += "<I>No feed messages found in channel...</I><BR>";
						} else {
							i = 0;

							foreach (dynamic _e in Lang13.Enumerate( this.viewing_channel.messages, typeof(FeedMessage) )) {
								MESSAGE = _e;
								
								i++;
								dat += "-" + MESSAGE.body + " <BR>";

								if ( Lang13.Bool( MESSAGE.img ) ) {
									Interface13.CacheBrowseResource( Task13.User, MESSAGE.img, "tmp_photo" + i + ".png" );
									dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";show_photo_info=" ).Ref( MESSAGE ).str( "'><img src='tmp_photo" ).item( i ).str( ".png' width = '180'></a><BR><BR>" ).ToString();
								}
								dat += "<FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE.author + "</FONT>]</FONT><BR>";
							}
						}
						dat += new Txt( "<BR><HR><A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>\n					<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 1 ).str( "'>Back</A>" ).ToString();
						break;
					case 10:
						dat += "<B>Nanotrasen Feed Censorship Tool</B><BR>\n					<FONT SIZE=1>NOTE: Due to the nature of news Feeds, total deletion of a Feed Story is not possible.<BR>\n					Keep in mind that users attempting to view a censored feed will instead see the [REDACTED] tag above it.</FONT>\n					<HR>Select Feed channel to get Stories from:<BR>";

						if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
							dat += "<I>No feed channels found active...</I><BR>";
						} else {
							
							foreach (dynamic _f in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
								CHANNEL2 = _f;
								
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";pick_censor_channel=" ).Ref( CHANNEL2 ).str( "'>" ).item( CHANNEL2.channel_name ).str( "</A> " ).item( ( CHANNEL2.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR>" ).ToString();
							}
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
						break;
					case 11:
						dat += "<B>Nanotrasen D-Notice Handler</B><HR>\n					<FONT SIZE=1>A D-Notice is to be bestowed upon the channel if the handling Authority deems it as harmful for the station's\n					morale, integrity or disciplinary behaviour. A D-Notice will render a channel unable to be updated by anyone, without deleting any feed\n					stories it might contain at the time. You can lift a D-Notice if you have the required access at any time.</FONT><HR>";

						if ( GlobalFuncs.isemptylist( GlobalVars.news_network.network_channels ) ) {
							dat += "<I>No feed channels found active...</I><BR>";
						} else {
							
							foreach (dynamic _g in Lang13.Enumerate( GlobalVars.news_network.network_channels, typeof(FeedChannel) )) {
								CHANNEL3 = _g;
								
								dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";pick_d_notice=" ).Ref( CHANNEL3 ).str( "'>" ).item( CHANNEL3.channel_name ).str( "</A> " ).item( ( CHANNEL3.censored ? "<FONT COLOR='red'>***</FONT>" : null ) ).str( "<BR>" ).ToString();
							}
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Back</A>" ).ToString();
						break;
					case 12:
						dat += new Txt( "<B>" ).item( this.viewing_channel.channel_name ).str( ": </B><FONT SIZE=1>[ created by: <FONT COLOR='maroon'>" ).item( this.viewing_channel.author ).str( "</FONT> ]</FONT><BR>\n					<FONT SIZE=2><A href='?src=" ).Ref( this ).str( ";censor_channel_author=" ).Ref( this.viewing_channel ).str( "'>" ).item( ( this.viewing_channel.author == "[REDACTED]" ? "Undo Author censorship" : "Censor channel Author" ) ).str( "</A></FONT><HR>" ).ToString();

						if ( GlobalFuncs.isemptylist( this.viewing_channel.messages ) ) {
							dat += "<I>No feed messages found in channel...</I><BR>";
						} else {
							
							foreach (dynamic _h in Lang13.Enumerate( this.viewing_channel.messages, typeof(FeedMessage) )) {
								MESSAGE2 = _h;
								
								dat += new Txt( "-" ).item( MESSAGE2.body ).str( " <BR><FONT SIZE=1>[Story by <FONT COLOR='maroon'>" ).item( MESSAGE2.author ).str( "</FONT>]</FONT><BR>\n							<FONT SIZE=2><A href='?src=" ).Ref( this ).str( ";censor_channel_story_body=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.body == "[REDACTED]" ? "Undo story censorship" : "Censor story" ) ).str( "</A>  -  <A href='?src=" ).Ref( this ).str( ";censor_channel_story_author=" ).Ref( MESSAGE2 ).str( "'>" ).item( ( MESSAGE2.author == "[REDACTED]" ? "Undo Author Censorship" : "Censor message Author" ) ).str( "</A></FONT><BR>" ).ToString();
							}
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 10 ).str( "'>Back</A>" ).ToString();
						break;
					case 13:
						dat += new Txt( "<B>" ).item( this.viewing_channel.channel_name ).str( ": </B><FONT SIZE=1>[ created by: <FONT COLOR='maroon'>" ).item( this.viewing_channel.author ).str( "</FONT> ]</FONT><BR>\n					Channel messages listed below. If you deem them dangerous to the station, you can <A href='?src=" ).Ref( this ).str( ";toggle_d_notice=" ).Ref( this.viewing_channel ).str( "'>Bestow a D-Notice upon the channel</A>.<HR>" ).ToString();

						if ( this.viewing_channel.censored ) {
							dat += "<FONT COLOR='red'><B>ATTENTION: </B></FONT>This channel has been deemed as threatening to the welfare of the station, and marked with a Nanotrasen D-Notice.<BR>\n						No further feed story additions are allowed while the D-Notice is in effect.</FONT><BR><BR>";
						} else if ( GlobalFuncs.isemptylist( this.viewing_channel.messages ) ) {
							dat += "<I>No feed messages found in channel...</I><BR>";
						} else {
							
							foreach (dynamic _i in Lang13.Enumerate( this.viewing_channel.messages, typeof(FeedMessage) )) {
								MESSAGE3 = _i;
								
								dat += "-" + MESSAGE3.body + " <BR><FONT SIZE=1>[Story by <FONT COLOR='maroon'>" + MESSAGE3.author + "</FONT>]</FONT><BR>";
							}
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 11 ).str( "'>Back</A>" ).ToString();
						break;
					case 14:
						dat += "<B>Wanted Issue Handler:</B>";
						wanted_already2 = false;
						end_param = 1;

						if ( GlobalVars.news_network.wanted_issue != null ) {
							wanted_already2 = true;
							end_param = 2;
						}

						if ( wanted_already2 ) {
							dat += "<FONT SIZE=2><BR><I>A wanted issue is already in Feed Circulation. You can edit or cancel it below.</FONT></I>";
						}
						dat += new Txt( "<HR>\n					<A href='?src=" ).Ref( this ).str( ";set_wanted_name=1'>Criminal Name</A>: " ).item( this.channel_name ).str( " <BR>\n					<A href='?src=" ).Ref( this ).str( ";set_wanted_desc=1'>Description</A>: " ).item( this.msg ).str( " <BR>" ).ToString();
						dat += this.AttachPhotoButton( a );

						if ( wanted_already2 ) {
							dat += "<B>Wanted Issue created by:</B><FONT COLOR='green'> " + GlobalVars.news_network.wanted_issue.backup_author + "</FONT><BR>";
						} else {
							dat += "<B>Wanted Issue will be created under prosecutor:</B><FONT COLOR='green'> " + this.scanned_user + "</FONT><BR>";
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";submit_wanted=" ).item( end_param ).str( "'>" ).item( ( wanted_already2 ? "Edit Issue" : "Submit" ) ).str( "</A>" ).ToString();

						if ( wanted_already2 ) {
							dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";cancel_wanted=1'>Take down Issue</A>" ).ToString();
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Cancel</A>" ).ToString();
						break;
					case 15:
						dat += new Txt( "<FONT COLOR='green'>Wanted issue for " ).item( this.channel_name ).str( " is now in Network Circulation.</FONT><BR><BR>\n					<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 16:
						dat += "<B><FONT COLOR='maroon'>ERROR: Wanted Issue rejected by Network.</B></FONT><HR><BR>";

						if ( this.channel_name == "" || this.channel_name == "[REDACTED]" ) {
							dat += "<FONT COLOR='maroon'>ï¿½Invalid name for person wanted.</FONT><BR>";
						}

						if ( this.scanned_user == "Unknown" ) {
							dat += "<FONT COLOR='maroon'>ï¿½Issue author unverified.</FONT><BR>";
						}

						if ( this.msg == "" || this.msg == "[REDACTED]" ) {
							dat += "<FONT COLOR='maroon'>ï¿½Invalid description.</FONT><BR>";
						}
						dat += new Txt( "<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 17:
						dat += new Txt( "<B>Wanted Issue successfully deleted from Circulation</B><BR>\n					<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 18:
						dat += "<B><FONT COLOR ='maroon'>-- STATIONWIDE WANTED ISSUE --</B></FONT><BR><FONT SIZE=2>[Submitted by: <FONT COLOR='green'>" + GlobalVars.news_network.wanted_issue.backup_author + "</FONT>]</FONT><HR>\n					<B>Criminal</B>: " + GlobalVars.news_network.wanted_issue.author + "<BR>\n					<B>Description</B>: " + GlobalVars.news_network.wanted_issue.body + "<BR>\n					<B>Photo:</B>: ";

						if ( Lang13.Bool( GlobalVars.news_network.wanted_issue.img ) ) {
							Interface13.CacheBrowseResource( Task13.User, GlobalVars.news_network.wanted_issue.img, "tmp_photow.png" );
							dat += "<BR><img src='tmp_photow.png' width = '180'>";
						} else {
							dat += "None";
						}
						dat += new Txt( "<BR><BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Back</A><BR>" ).ToString();
						break;
					case 19:
						dat += new Txt( "<FONT COLOR='green'>Wanted issue for " ).item( this.channel_name ).str( " successfully edited.</FONT><BR><BR>\n					<BR><A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A><BR>" ).ToString();
						break;
					case 20:
						dat += new Txt( "<FONT COLOR='green'>Printing successfull. Please receive your newspaper from the bottom of the machine.</FONT><BR><BR>\n					<A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A>" ).ToString();
						break;
					case 21:
						dat += new Txt( "<FONT COLOR='maroon'>Unable to print newspaper. Insufficient paper. Please notify maintenance personnell to refill machine storage.</FONT><BR><BR>\n					<A href='?src=" ).Ref( this ).str( ";setScreen=" ).item( 0 ).str( "'>Return</A>" ).ToString();
						break;
					default:
						dat += "I'm sorry to break your immersion. This shit's bugged. Report this bug to Agouri, polyxenitopalidou@gmail.com";
						break;
				}
				Interface13.Browse( M, dat, "window=newscaster_main;size=400x600" );
				GlobalFuncs.onclose( M, "newscaster_main" );
			}
			return _default;
		}

		// Function from file: newscaster.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Proj is Obj_Item_Projectile_Beam || Proj is Obj_Item_Projectile_Bullet || Proj is Obj_Item_Projectile_Ricochet ) {
				
				if ( !( Proj is Obj_Item_Projectile_Beam_Lastertag ) && !( Proj is Obj_Item_Projectile_Beam_Practice ) ) {
					this.hitstaken++;

					if ( this.hitstaken >= 3 && !( ( this.stat & 1 ) != 0 ) ) {
						this.stat |= 1;
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/Glassbr3.ogg", 100, 1 );
					} else {
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/Glasshit.ogg", 100, 1 );
					}
					this.update_icon();
				}
			}
			return null;
		}

		// Function from file: newscaster.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((double?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					this.stat |= 1;

					if ( Rand13.PercentChance( 50 ) ) {
						GlobalFuncs.qdel( this );
					} else {
						this.update_icon();
					}
					return false;
					break;
				default:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.stat |= 1;
					}
					this.update_icon();
					return false;
					break;
			}
			return false;
		}

		// Function from file: newscaster.dm
		public override dynamic power_change(  ) {
			
			if ( ( this.stat & 1 ) != 0 || this.buildstage != true ) {
				return null;
			}

			if ( Lang13.Bool( this.powered() ) ) {
				this.stat &= 65533;
				this.update_icon();
			} else {
				Task13.Schedule( Rand13.Int( 0, 15 ), (Task13.Closure)(() => {
					this.stat |= 2;
					this.update_icon();
					return;
				}));
			}
			return null;
		}

		// Function from file: newscaster.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			if ( this.buildstage != true ) {
				this.icon_state = "newscaster_0";
				return null;
			}

			if ( ( this.stat & 2 ) != 0 || ( this.stat & 1 ) != 0 ) {
				this.icon_state = "newscaster_off";

				if ( ( this.stat & 1 ) != 0 ) {
					this.overlays.len = 0;
					this.overlays.Add( new Image( this.icon, "crack3" ) );
				}
				return null;
			}
			this.overlays.len = 0;

			if ( GlobalVars.news_network.wanted_issue != null ) {
				this.icon_state = "newscaster_wanted";
				return null;
			}

			if ( this.alert ) {
				this.overlays.Add( "newscaster_alert" );
			}

			if ( this.hitstaken > 0 ) {
				this.overlays.Add( new Image( this.icon, "crack" + this.hitstaken ) );
			}
			this.icon_state = "newscaster_normal";
			return null;
		}

		// Function from file: newscaster.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			GlobalVars.allCasters.Remove( this );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}