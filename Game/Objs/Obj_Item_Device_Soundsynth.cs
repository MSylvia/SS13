// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Device_Soundsynth : Obj_Item_Device {

		public int spam_flag = 0;
		public string selected_sound = "sound/items/bikehorn.ogg";
		public double? shiftpitch = 1;
		public double? volume = 50;
		public ByTable sound_list = new ByTable()
											.Set( "Honk", "selected_sound=sound/items/bikehorn.ogg&shiftpitch=1&volume=50" )
											.Set( "Applause", "selected_sound=sound/effects/applause.ogg&shiftpitch=1&volume=65" )
											.Set( "Laughter", "selected_sound=sound/effects/laughtrack.ogg&shiftpitch=1&volume=65" )
											.Set( "Rimshot", "selected_sound=sound/effects/rimshot.ogg&shiftpitch=1&volume=65" )
											.Set( "Trombone", "selected_sound=sound/misc/sadtrombone.ogg&shiftpitch=1&volume=50" )
											.Set( "Airhorn", "selected_sound=sound/items/AirHorn.ogg&shiftpitch=1&volume=50" )
											.Set( "Alert", "selected_sound=sound/effects/alert.ogg&shiftpitch=1&volume=50" )
											.Set( "Awooga", "selected_sound=sound/effects/awooga.ogg&shiftpitch=1&volume=50" )
											.Set( "Boom", "selected_sound=sound/effects/Explosion1.ogg&shiftpitch=1&volume=50" )
											.Set( "Boom from Afar", "selected_sound=sound/effects/explosionfar.ogg&shiftpitch=1&volume=50" )
											.Set( "Bubbles", "selected_sound=sound/effects/bubbles.ogg&shiftpitch=1&volume=50" )
											.Set( "Construction Noises", "selected_sound=sound/items/Deconstruct.ogg&shiftpitch=1&volume=60" )
											.Set( "Countdown", "selected_sound=sound/ambience/countdown.ogg&shiftpitch=0&volume=55" )
											.Set( "Creepy Whisper", "selected_sound=sound/hallucinations/turn_around1.ogg&shiftpitch=1&volume=50" )
											.Set( "Ding", "selected_sound=sound/machines/ding.ogg&shiftpitch=1&volume=50" )
											.Set( "Double Beep", "selected_sound=sound/machines/twobeep.ogg&shiftpitch=1&volume=50" )
											.Set( "Flush", "selected_sound=sound/machines/disposalflush.ogg&shiftpitch=1&volume=40" )
											.Set( "Kawaii", "selected_sound=sound/AI/animes.ogg&shiftpitch=0&volume=60" )
											.Set( "Startup", "selected_sound=sound/mecha/nominal.ogg&shiftpitch=0&volume=50" )
											.Set( "Welding Noises", "selected_sound=sound/items/Welder.ogg&shiftpitch=1&volume=55" )
											.Set( "Quack", "selected_sound=sound/items/quack.ogg&shiftpitch=1&volume=50" )
										;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.item_state = "radio";
			this.w_class = 1;
			this.icon_state = "soundsynth";
		}

		public Obj_Item_Device_Soundsynth ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: sound_synth.dm
		public override bool? attack( dynamic M = null, dynamic user = null, string def_zone = null, bool? eat_override = null ) {
			
			if ( M == user ) {
				this.__CallVerb("Select Sound Playback" );
			} else if ( this.spam_flag + 20 < Game13.timeofday ) {
				((Mob)M).playsound_local( GlobalFuncs.get_turf( this ), this.selected_sound, this.volume, this.shiftpitch );
				this.spam_flag = Game13.timeofday;
			}
			return null;
		}

		// Function from file: sound_synth.dm
		public override dynamic attack_self( dynamic user = null, dynamic flag = null, bool? emp = null ) {
			
			if ( this.spam_flag + 20 < Game13.timeofday ) {
				GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), this.selected_sound, this.volume, this.shiftpitch );
				this.spam_flag = Game13.timeofday;
			}
			return null;
		}

		// Function from file: sound_synth.dm
		[Verb]
		[VerbInfo( name: "Select Sound Playback", group: "Object" )]
		public void pick_sound(  ) {
			dynamic thesoundthatwewant = null;
			ByTable assblast = null;

			thesoundthatwewant = Interface13.Input( "Pick a sound:", null, null, null, this.sound_list, InputType.Null | InputType.Any );

			if ( !Lang13.Bool( thesoundthatwewant ) ) {
				return;
			}
			GlobalFuncs.to_chat( Task13.User, "Sound playback set to: " + thesoundthatwewant + "!" );
			assblast = String13.ParseUrlParams( this.sound_list[thesoundthatwewant] );
			this.selected_sound = assblast["selected_sound"];
			this.shiftpitch = String13.ParseNumber( assblast["shiftpitch"] );
			this.volume = String13.ParseNumber( assblast["volume"] );
			return;
		}

	}

}