// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Mineral_LaborClaimConsole : Obj_Machinery_Mineral {

		public dynamic machine = null;
		public int machinedir = 2;
		public dynamic inserted_id = null;
		public Obj_Machinery_Door_Airlock release_door = null;
		public string door_tag = "prisonshuttle";
		public Obj_Item_Device_Radio Radio = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/machines/mining_machines.dmi";
			this.icon_state = "console";
		}

		// Function from file: laborstacker.dm
		public Obj_Machinery_Mineral_LaborClaimConsole ( dynamic loc = null ) : base( (object)(loc) ) {
			string t = null;
			Obj_Machinery_Door_Airlock d = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.Radio = new Obj_Item_Device_Radio( this );
			this.Radio.listening = false;
			Task13.Schedule( 7, (Task13.Closure)(() => {
				this.machine = Lang13.FindIn( typeof(Obj_Machinery_Mineral_StackingMachine), Map13.GetStep( this, this.machinedir ) );

				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( this, 5 ), typeof(Obj_Machinery_Door_Airlock) )) {
					d = _a;
					
					t = d.id_tag;

					if ( t == this.door_tag ) {
						this.release_door = d;
					}
				}

				if ( Lang13.Bool( this.machine ) && this.release_door != null ) {
					this.machine.CONSOLE = this;
				} else {
					GlobalFuncs.qdel( this );
				}
				return;
			}));
			return;
		}

		// Function from file: laborstacker.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hsrc = null ) {
			dynamic I = null;
			Obj_DockingPort_Stationary S = null;

			Task13.User.set_machine( this );
			this.add_fingerprint( Task13.User );

			if ( Lang13.Bool( href_list["choice"] ) ) {
				
				if ( this.inserted_id is Obj_Item_Weapon_Card_Id_Prisoner ) {
					
					if ( href_list["choice"] == "eject" ) {
						this.inserted_id.loc = this.loc;
						this.inserted_id.__CallVerb("Pick up" );
						this.inserted_id = null;
					}

					if ( href_list["choice"] == "claim" ) {
						this.inserted_id.points += this.machine.points;
						this.machine.points = 0;
						((dynamic)this).WriteMsg( "Points transferred." );
					}
				} else if ( href_list["choice"] == "insert" ) {
					I = Task13.User.get_active_hand();

					if ( I is Obj_Item_Weapon_Card_Id_Prisoner ) {
						
						if ( !Task13.User.drop_item() ) {
							return null;
						}
						I.loc = this;
						this.inserted_id = I;
					} else {
						Task13.User.WriteMsg( "<span class='warning'>Invalid ID.</span>" );
					}
				}

				if ( this.check_auth() ) {
					
					if ( href_list["choice"] == "station" ) {
						
						if ( !GlobalFuncs.alone_in_area( GlobalFuncs.get_area( this ), Task13.User ) ) {
							Task13.User.WriteMsg( "<span class='warning'>Prisoners are only allowed to be released while alone.</span>" );
						} else {
							
							switch ((int)( GlobalVars.SSshuttle.moveShuttle( "laborcamp", "laborcamp_home" ) )) {
								case 1:
									Task13.User.WriteMsg( "<span class='notice'>Shuttle not found</span>" );
									break;
								case 2:
									Task13.User.WriteMsg( "<span class='notice'>Shuttle already at station</span>" );
									break;
								case 3:
									Task13.User.WriteMsg( "<span class='notice'>No permission to dock could be granted.</span>" );
									break;
								default:
									this.Radio.set_frequency( GlobalVars.SEC_FREQ );
									this.Radio.talk_into( this, "" + this.inserted_id.registered_name + " has returned to the station. Minerals and Prisoner ID card ready for retrieval.", GlobalVars.SEC_FREQ );
									Task13.User.WriteMsg( "<span class='notice'>Shuttle received message and will be sent shortly.</span>" );
									break;
							}
						}
					}

					if ( href_list["choice"] == "release" ) {
						
						if ( GlobalFuncs.alone_in_area( GlobalFuncs.get_area( this.loc ), Task13.User ) ) {
							S = GlobalVars.SSshuttle.getDock( "laborcamp_home" );

							if ( S != null && Lang13.Bool( S.get_docked() ) ) {
								
								if ( this.release_door != null && this.release_door.density ) {
									this.release_door.open();
								}
							} else {
								Task13.User.WriteMsg( "<span class='warning'>Prisoners can only be released while docked with the station.</span>" );
							}
						} else {
							Task13.User.WriteMsg( "<span class='warning'>Prisoners are only allowed to be released while alone.</span>" );
						}
					}
				}
				this.updateUsrDialog();
			}
			return null;
		}

		// Function from file: laborstacker.dm
		public override bool emag_act( dynamic user = null ) {
			
			if ( !Lang13.Bool( this.emagged ) ) {
				this.emagged = 1;
				user.WriteMsg( "<span class='warning'>PZZTTPFFFT</span>" );
			}
			return false;
		}

		// Function from file: laborstacker.dm
		public override dynamic attackby( dynamic A = null, dynamic user = null, string _params = null, bool? silent = null, bool? replace_spent = null ) {
			
			if ( A is Obj_Item_Weapon_Card_Id ) {
				return this.attack_hand( user );
			}
			base.attackby( (object)(A), (object)(user), _params, silent, replace_spent );
			return null;
		}

		// Function from file: laborstacker.dm
		public override dynamic attack_hand( dynamic a = null, bool? b = null, bool? c = null ) {
			dynamic dat = null;

			dat += "<b>Point Claim Console</b><br><br>";

			if ( Lang13.Bool( this.emagged ) ) {
				dat += "<b>QU&#t0A In%aL*D</b><br>";
			} else if ( this.inserted_id is Obj_Item_Weapon_Card_Id_Prisoner ) {
				dat += new Txt( "ID: " ).item( this.inserted_id.registered_name ).str( " <A href='?src=" ).Ref( this ).str( ";choice=eject'>Eject ID.</A><br>" ).ToString();
				dat += "Points Collected:" + this.inserted_id.points + "<br>";
				dat += "Point Quota: " + this.inserted_id.goal + " - Reach your quota to earn your release<br>";
				dat += new Txt( "Unclaimed Collection Points: " ).item( this.machine.points ).str( ".  <A href='?src=" ).Ref( this ).str( ";choice=claim'>Claim points.</A><br>" ).ToString();
			} else {
				dat += new Txt( "No ID inserted.  <A href='?src=" ).Ref( this ).str( ";choice=insert'>Insert ID.</A><br>" ).ToString();
			}

			if ( this.check_auth() ) {
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choice=station'>Proceed to Station.</A><br>" ).ToString();
				dat += new Txt( "<A href='?src=" ).Ref( this ).str( ";choice=release'>Open release door.</A><br>" ).ToString();
			}

			if ( Lang13.Bool( this.machine ) ) {
				dat += "<HR><b>Mineral Value List:</b><BR>" + this.machine.get_ore_values();
			}
			Interface13.Browse( a, "" + dat, "window=console_stacking_machine" );
			return null;
		}

		// Function from file: laborstacker.dm
		public bool check_auth(  ) {
			
			if ( Lang13.Bool( this.emagged ) ) {
				return true;
			}
			return this.inserted_id is Obj_Item_Weapon_Card_Id_Prisoner && Convert.ToDouble( this.inserted_id.points ) >= Convert.ToDouble( this.inserted_id.goal );
		}

	}

}