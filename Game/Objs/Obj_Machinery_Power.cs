// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power : Obj_Machinery {

		public dynamic powernet = null;
		public bool build_status = false;
		public Obj_Machinery_Power_Terminal terminal = null;
		public bool starting_terminal = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.use_power = 0;
			this.icon = "icons/obj/power.dmi";
		}

		// Function from file: power.dm
		public Obj_Machinery_Power ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.machines.Remove( this );
			GlobalVars.power_machines.Or( this );
			return;
		}

		// Function from file: power.dm
		public override bool check_rebuild(  ) {
			Obj_Structure_Cable C = null;

			
			if ( !this.build_status ) {
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_Cable) )) {
				C = _a;
				

				if ( Lang13.Bool( C.check_rebuild() ) ) {
					return true;
				}
			}
			return false;
		}

		// Function from file: terminal.dm
		public virtual bool can_attach_terminal( dynamic user = null ) {
			return user.loc != this.loc && false && !( this.terminal != null );
		}

		// Function from file: terminal.dm
		public virtual void finalise_terminal( dynamic newloc = null ) {
			this.terminal = new Obj_Machinery_Power_Terminal( newloc );
			this.terminal.dir = Map13.GetDistance( newloc, this );
			this.terminal.master = this;
			return;
		}

		// Function from file: terminal.dm
		public bool make_terminal( dynamic user = null ) {
			dynamic T = null;
			dynamic N = null;
			Effect_Effect_System_SparkSpread s = null;

			
			if ( !this.can_attach_terminal( user ) ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>You can't wire " ).the( this ).item().str( " like that!</span>" ).ToString() );
				return false;
			}
			T = GlobalFuncs.get_turf( user );

			if ( T.intact == true ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>The floor plating must be removed first.</span>" );
				return false;
			}
			GlobalFuncs.to_chat( user, new Txt( "<span class='notice'>You start adding cable to " ).the( this ).item().str( ".</span>" ).ToString() );
			GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/zip.ogg", 100, 1 );

			if ( GlobalFuncs.do_after( user, this, 100 ) && !( T.intact == true ) && this.can_attach_terminal( user ) ) {
				N = ((Tile)T).get_cable_node();

				if ( Rand13.PercentChance( 50 ) && Lang13.Bool( GlobalFuncs.electrocute_mob( user, N, N ) ) ) {
					s = new Effect_Effect_System_SparkSpread();
					s.set_up( 5, 1, this );
					s.start();
					return false;
				}
				this.finalise_terminal( GlobalFuncs.get_turf( user ) );
				return true;
			}
			return false;
		}

		// Function from file: power.dm
		public ByTable get_indirect_connections(  ) {
			ByTable _default = null;

			Obj_Structure_Cable C = null;

			_default = new ByTable();

			foreach (dynamic _a in Lang13.Enumerate( this.loc, typeof(Obj_Structure_Cable) )) {
				C = _a;
				

				if ( C.get_powernet() != null ) {
					continue;
				}

				if ( C.d1 == 0 ) {
					_default.Add( C );
				}
			}
			return _default;
		}

		// Function from file: power.dm
		public ByTable get_marked_connections(  ) {
			ByTable _default = null;

			double? cdir = null;
			Tile T = null;
			dynamic card = null;
			Obj_Structure_Cable C = null;

			_default = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				card = _b;
				
				T = Map13.GetStep( this.loc, Convert.ToInt32( card ) );
				cdir = Map13.GetDistance( T, this.loc );

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Structure_Cable) )) {
					C = _a;
					

					if ( C.d1 == cdir || C.d2 == cdir ) {
						_default.Add( C );
					}
				}
			}
			return _default;
		}

		// Function from file: power.dm
		public ByTable get_connections(  ) {
			ByTable _default = null;

			double? cdir = null;
			Tile T = null;
			dynamic card = null;
			Obj_Structure_Cable C = null;

			_default = new ByTable();

			foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
				card = _b;
				
				T = Map13.GetStep( this.loc, Convert.ToInt32( card ) );
				cdir = Map13.GetDistance( T, this.loc );

				foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Structure_Cable) )) {
					C = _a;
					

					if ( C.get_powernet() != null ) {
						continue;
					}

					if ( C.d1 == cdir || C.d2 == cdir ) {
						_default.Add( C );
					}
				}
			}
			return _default;
		}

		// Function from file: power.dm
		public virtual bool disconnect_from_network(  ) {
			
			if ( !Lang13.Bool( this.get_powernet() ) ) {
				this.build_status = false;
				return false;
			}
			((Powernet)this.powernet).remove_machine( this );
			return true;
		}

		// Function from file: power.dm
		public bool connect_to_network(  ) {
			dynamic T = null;
			dynamic C = null;

			T = GlobalFuncs.get_turf( this );
			C = ((Tile)T).get_cable_node();

			if ( !Lang13.Bool( C ) || !( ((Obj_Structure_Cable)C).get_powernet() != null ) ) {
				return false;
			}
			((Powernet)C.powernet).add_machine( this );
			return true;
		}

		// Function from file: power.dm
		public void disconnect_terminal(  ) {
			return;
		}

		// Function from file: power.dm
		public ByTable getPowernetNodes(  ) {
			
			if ( !Lang13.Bool( this.get_powernet() ) ) {
				return new ByTable();
			}
			return this.powernet.nodes;
		}

		// Function from file: power.dm
		public virtual dynamic get_powernet(  ) {
			this.check_rebuild();
			return this.powernet;
		}

		// Function from file: power.dm
		public bool load(  ) {
			
			if ( Lang13.Bool( this.get_powernet() ) ) {
				return Lang13.Bool( this.powernet.load );
			} else {
				return false;
			}
		}

		// Function from file: power.dm
		public virtual dynamic avail(  ) {
			
			if ( Lang13.Bool( this.get_powernet() ) ) {
				return this.powernet.avail;
			} else {
				return 0;
			}
		}

		// Function from file: power.dm
		public virtual dynamic surplus(  ) {
			
			if ( Lang13.Bool( this.get_powernet() ) ) {
				return this.powernet.avail - Convert.ToDouble( this.powernet.load );
			} else {
				return 0;
			}
		}

		// Function from file: power.dm
		public virtual bool add_load( dynamic amount = null ) {
			
			if ( Lang13.Bool( this.get_powernet() ) ) {
				this.powernet.load += amount;
			}
			return false;
		}

		// Function from file: power.dm
		public virtual void add_avail( dynamic amount = null ) {
			
			if ( Lang13.Bool( this.get_powernet() ) ) {
				this.powernet.newavail += Convert.ToDouble( amount );
			}
			return;
		}

		// Function from file: power.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.disconnect_from_network();
			GlobalVars.power_machines.Remove( this );

			if ( this.terminal != null ) {
				this.terminal.master = null;
				this.terminal = null;
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: power.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			dynamic d = null;
			Tile T = null;
			Obj_Machinery_Power_Terminal term = null;

			base.initialize( suppress_icon_check );

			if ( this.starting_terminal ) {
				
				foreach (dynamic _b in Lang13.Enumerate( GlobalVars.cardinal )) {
					d = _b;
					
					T = Map13.GetStep( this, Convert.ToInt32( d ) );

					foreach (dynamic _a in Lang13.Enumerate( T, typeof(Obj_Machinery_Power_Terminal) )) {
						term = _a;
						

						if ( term != null && term.dir == Num13.Rotate( d, 180 ) ) {
							this.terminal = term;
							break;
						}
					}

					if ( this.terminal != null ) {
						break;
					}
				}

				if ( this.terminal != null ) {
					this.terminal.master = this;
					this.update_icon();
				}
			}
			return false;
		}

		// Function from file: trash_machinery.dm
		public override dynamic cultify(  ) {
			GlobalFuncs.qdel( this );
			return null;
		}

	}

}