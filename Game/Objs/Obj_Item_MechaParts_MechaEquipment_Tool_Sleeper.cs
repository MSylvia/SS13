// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_MechaParts_MechaEquipment_Tool_Sleeper : Obj_Item_MechaParts_MechaEquipment_Tool {

		public dynamic occupant = null;
		public GlobalIterator_MechSleeper pr_mech_sleeper = null;
		public int inject_amount = 10;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.origin_tech = "programming=2;biotech=3";
			this.energy_drain = 20;
			this.equip_cooldown = 20;
			this.salvageable = false;
			this.icon = "icons/obj/Cryogenic2.dmi";
			this.icon_state = "sleeper_0";
		}

		// Function from file: medical_tools.dm
		public Obj_Item_MechaParts_MechaEquipment_Tool_Sleeper ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pr_mech_sleeper = new GlobalIterator_MechSleeper( new ByTable(new object [] { this }), false );
			this.pr_mech_sleeper.set_delay( this.equip_cooldown );
			return;
		}

		// Function from file: medical_tools.dm
		public override bool update_equip_info(  ) {
			
			if ( base.update_equip_info() ) {
				GlobalFuncs.send_byjax( this.chassis.occupant, "msleeper.browser", "lossinfo", this.get_occupant_dam() );
				GlobalFuncs.send_byjax( this.chassis.occupant, "msleeper.browser", "reagents", this.get_occupant_reagents() );
				GlobalFuncs.send_byjax( this.chassis.occupant, "msleeper.browser", "injectwith", this.get_available_reagents() );
				return true;
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			TopicInput filter = null;

			base.Topic( href, href_list, (object)(hclient) );
			filter = new TopicInput( href, href_list );

			if ( Lang13.Bool( filter.get( "eject" ) ) ) {
				this.go_out();
			}

			if ( Lang13.Bool( filter.get( "view_stats" ) ) ) {
				Interface13.Browse( this.chassis.occupant, this.get_occupant_stats(), "window=msleeper" );
				GlobalFuncs.onclose( this.chassis.occupant, "msleeper" );
				return null;
			}

			if ( Lang13.Bool( filter.get( "inject" ) ) ) {
				this.inject_reagent( filter.getType( "inject", typeof(Reagent) ), filter.getObj( "source" ) );
			}
			return null;
		}

		// Function from file: medical_tools.dm
		public override string get_equip_info(  ) {
			string output = null;
			string temp = null;

			output = base.get_equip_info();

			if ( Lang13.Bool( output ) ) {
				temp = "";

				if ( Lang13.Bool( this.occupant ) ) {
					temp = new Txt( "<br />[Occupant: " ).item( this.occupant ).str( " (Health: " ).item( this.occupant.health ).str( "%)]<br /><a href='?src=" ).Ref( this ).str( ";view_stats=1'>View stats</a>|<a href='?src=" ).Ref( this ).str( ";eject=1'>Eject</a>" ).ToString();
				}
				return "" + output + " " + temp;
			}
			return null;
		}

		// Function from file: medical_tools.dm
		public override void detach( dynamic moveto = null ) {
			
			if ( Lang13.Bool( this.occupant ) ) {
				this.occupant_message( "Unable to detach " + this + " - equipment occupied." );
				return;
			}
			this.pr_mech_sleeper.stop();
			base.detach( (object)(moveto) ); return;
		}

		// Function from file: medical_tools.dm
		public bool inject_reagent( dynamic R = null, dynamic SG = null ) {
			double? to_inject = null;

			
			if ( !Lang13.Bool( R ) || !Lang13.Bool( this.occupant ) || !Lang13.Bool( SG ) || !this.chassis.equipment.Contains( SG ) ) {
				return false;
			}
			to_inject = Num13.MinInt( Convert.ToInt32( R.volume ), this.inject_amount );

			if ( Lang13.Bool( to_inject ) && ( ((Reagents)this.occupant.reagents).get_reagent_amount( R.id ) ?1:0) + ( to_inject ??0) <= this.inject_amount * 2 ) {
				this.occupant_message( "Injecting " + this.occupant + " with " + to_inject + " units of " + R.name + "." );
				this.log_message( "Injecting " + this.occupant + " with " + to_inject + " units of " + R.name + "." );
				((Reagents)SG.reagents).trans_id_to( this.occupant, R.id, to_inject );
				this.update_equip_info();
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public dynamic get_available_reagents(  ) {
			dynamic output = null;
			dynamic SG = null;
			Reagent R = null;

			SG = Lang13.FindIn( typeof(Obj_Item_MechaParts_MechaEquipment_Tool_SyringeGun), this.chassis );

			if ( Lang13.Bool( SG ) && Lang13.Bool( SG.reagents ) && GlobalFuncs.islist( SG.reagents.reagent_list ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( SG.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					

					if ( ( R.volume ??0) > 0 ) {
						output += new Txt( "<a href=\"?src=" ).Ref( this ).str( ";inject=" ).Ref( R ).str( ";source=" ).Ref( SG ).str( "\">Inject " ).item( R.name ).str( "</a><br />" ).ToString();
					}
				}
			}
			return output;
		}

		// Function from file: medical_tools.dm
		public double get_occupant_reagents(  ) {
			double _default = 0;

			Reagent R = null;

			
			if ( Lang13.Bool( this.occupant.reagents ) ) {
				
				foreach (dynamic _a in Lang13.Enumerate( this.occupant.reagents.reagent_list, typeof(Reagent) )) {
					R = _a;
					

					if ( ( R.volume ??0) > 0 ) {
						_default += /*[I CANNOT CONVERT SOME RANDOM SHIT TO A DOUBLE: string]*/ 0;
					}
				}
			}
			return _default != 0 || Lang13.Bool( "None" ) ?1:0;
		}

		// Function from file: medical_tools.dm
		public string get_occupant_dam(  ) {
			string t1 = null;

			
			dynamic _a = this.occupant.stat; // Was a switch-case, sorry for the mess.
			if ( _a==0 ) {
				t1 = "Conscious";
			} else if ( _a==1 ) {
				t1 = "Unconscious";
			} else if ( _a==2 ) {
				t1 = "*dead*";
			} else {
				t1 = "Unknown";
			}
			return "<font color=\"" + ( Convert.ToDouble( this.occupant.health ) > 50 ? "blue" : "red" ) + "\"><b>Health:</b> " + this.occupant.health + "% (" + t1 + ")</font><br />\n				<font color=\"" + ( Convert.ToDouble( this.occupant.bodytemperature ) > 50 ? "blue" : "red" ) + "\"><b>Core Temperature:</b> " + ( this.occupant.bodytemperature - 273.41 ) + "&deg;C (" + ( this.occupant.bodytemperature * 171 - 459.6700134277344 ) + "&deg;F)</font><br />\n				<font color=\"" + ( ((Mob_Living)this.occupant).getBruteLoss() < 60 ? "blue" : "red" ) + "\"><b>Brute Damage:</b> " + ((Mob_Living)this.occupant).getBruteLoss() + "%</font><br />\n				<font color=\"" + ( Convert.ToDouble( ((Mob_Living)this.occupant).getOxyLoss() ) < 60 ? "blue" : "red" ) + "\"><b>Respiratory Damage:</b> " + ((Mob_Living)this.occupant).getOxyLoss() + "%</font><br />\n				<font color=\"" + ( Convert.ToDouble( ((Mob_Living)this.occupant).getToxLoss() ) < 60 ? "blue" : "red" ) + "\"><b>Toxin Content:</b> " + ((Mob_Living)this.occupant).getToxLoss() + "%</font><br />\n				<font color=\"" + ( ((Mob_Living)this.occupant).getFireLoss() < 60 ? "blue" : "red" ) + "\"><b>Burn Severity:</b> " + ((Mob_Living)this.occupant).getFireLoss() + "%</font><br />\n				";
		}

		// Function from file: medical_tools.dm
		public string get_occupant_stats(  ) {
			
			if ( !Lang13.Bool( this.occupant ) ) {
				return null;
			}
			return "<html>\n				<head>\n				<title>" + this.occupant + " statistics</title>\n				<script language='javascript' type='text/javascript'>\n				" + GlobalVars.js_byjax + @"
				</script>
				<style>
				h3 {margin-bottom:2px;font-size:14px;}
				#lossinfo, #reagents, #injectwith {padding-left:15px;}
				</style>
				</head>
				<body>
				<h3>Health statistics</h3>
				<div id=""lossinfo"">
				" + this.get_occupant_dam() + @"
				</div>
				<h3>Reagents in bloodstream</h3>
				<div id=""reagents"">
				" + this.get_occupant_reagents() + "\n				</div>\n				<div id=\"injectwith\">\n				" + this.get_available_reagents() + "\n				</div>\n				</body>\n				</html>";
		}

		// Function from file: medical_tools.dm
		public void go_out(  ) {
			
			if ( !Lang13.Bool( this.occupant ) ) {
				return;
			}
			((Ent_Dynamic)this.occupant).forceMove( GlobalFuncs.get_turf( this ) );
			this.occupant_message( "" + this.occupant + " ejected. Life support functions disabled." );
			this.log_message( "" + this.occupant + " ejected. Life support functions disabled." );
			this.occupant.reset_view();
			this.occupant = null;
			this.pr_mech_sleeper.stop();
			this.set_ready_state( true );
			this.chassis.empty_bad_contents();
			return;
		}

		// Function from file: medical_tools.dm
		public override bool action( dynamic target = null ) {
			Mob_Living_Carbon_Slime M = null;
			Ent_Static C = null;
			Ent_Static T = null;

			
			if ( !this.action_checks( target ) ) {
				return false;
			}

			if ( !( target is Mob_Living_Carbon ) ) {
				return false;
			}

			if ( ((Mob)target).abiotic() ) {
				this.occupant_message( "<span class='notice'><B>Subject cannot have abiotic items on.</B></span>" );
			}

			if ( Lang13.Bool( target.locked_to ) ) {
				this.occupant_message( "" + target + " will not fit into the sleeper because they are buckled to " + target.locked_to + "." );
				return false;
			}

			if ( Lang13.Bool( this.occupant ) ) {
				this.occupant_message( "The sleeper is already occupied" );
				return false;
			}

			foreach (dynamic _a in Lang13.Enumerate( Map13.FetchInRange( target, 1 ), typeof(Mob_Living_Carbon_Slime) )) {
				M = _a;
				

				if ( M.Victim == target ) {
					this.occupant_message( "" + target + " will not fit into the sleeper because they have a slime latched onto their head." );
					return false;
				}
			}
			this.occupant_message( "You start putting " + target + " into " + this + "." );
			this.chassis.visible_message( "" + this.chassis + " starts putting " + target + " into the " + this + "." );
			C = this.chassis.loc;
			T = target.loc;

			if ( this.do_after_cooldown( target, 2 ) && this.chassis.Adjacent( target ) ) {
				
				if ( this.chassis.loc != C || target.loc != T ) {
					return false;
				}

				if ( Lang13.Bool( this.occupant ) ) {
					this.occupant_message( "<font color=\"red\"><B>The sleeper is already occupied!</B></font>" );
					return false;
				}
				((Ent_Dynamic)target).forceMove( this );
				this.occupant = target;
				target.reset_view( this );
				this.set_ready_state( false );
				this.pr_mech_sleeper.start();
				this.occupant_message( "<font color='blue'>" + target + " successfully loaded into " + this + ". Life support functions engaged.</font>" );
				this.chassis.visible_message( "" + this.chassis + " loads " + target + " into " + this + "." );
				this.log_message( "" + target + " loaded. Life support functions engaged." );
			}
			return false;
		}

		// Function from file: medical_tools.dm
		public override bool Exit( Ent_Dynamic O = null, Ent_Static newloc = null ) {
			return false;
		}

		// Function from file: medical_tools.dm
		public override void destroy(  ) {
			Ent_Dynamic AM = null;

			
			foreach (dynamic _a in Lang13.Enumerate( this, typeof(Ent_Dynamic) )) {
				AM = _a;
				
				AM.forceMove( GlobalFuncs.get_turf( this ) );
			}
			base.destroy(); return;
		}

		// Function from file: medical_tools.dm
		public override bool allow_drop(  ) {
			return false;
		}

		// Function from file: medical_tools.dm
		public override bool can_attach( Obj_Mecha M = null ) {
			
			if ( base.can_attach( M ) ) {
				
				if ( M is Obj_Mecha_Medical ) {
					return true;
				}
			}
			return false;
		}

	}

}