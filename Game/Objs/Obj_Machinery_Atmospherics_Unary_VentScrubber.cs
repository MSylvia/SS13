// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Atmospherics_Unary_VentScrubber : Obj_Machinery_Atmospherics_Unary {

		public string id_tag = null;
		public int frequency = 1439;
		public RadioFrequency radio_connection = null;
		public double? on = 0;
		public double? scrubbing = 1;
		public double? scrub_CO2 = 1;
		public double? scrub_Toxins = 1;
		public double? scrub_N2O = 0;
		public double? scrub_O2 = 0;
		public double? scrub_N2 = 0;
		public dynamic volume_rate = 1000;
		public double? panic = 0;
		public bool welded = false;
		public dynamic area_uid = null;
		public string radio_filter_out = null;
		public string radio_filter_in = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.level = 1;
			this.machine_flags = 128;
			this.icon = "icons/obj/atmospherics/vent_scrubber.dmi";
			this.icon_state = "hoff";
		}

		// Function from file: vent_scrubber.dm
		public Obj_Machinery_Atmospherics_Unary_VentScrubber ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.area_uid = this.areaMaster.uid;

			if ( !Lang13.Bool( this.id_tag ) ) {
				this.assign_uid();
				this.id_tag = String13.NumberToString( this.uid );
			}

			if ( GlobalVars.ticker != null && GlobalVars.ticker.current_state == 3 ) {
				this.broadcast_status();
			}
			return;
		}

		// Function from file: vent_scrubber.dm
		public override bool clone( dynamic O = null ) {
			
			if ( this.frequency == 1439 ) {
				this.areaMaster.air_scrub_info.Remove( this.id_tag );
				this.areaMaster.air_scrub_names.Remove( this.id_tag );
			}
			this.id_tag = O.id_tag;
			this.set_frequency( Convert.ToInt32( O.frequency ) );
			return true;
		}

		// Function from file: vent_scrubber.dm
		public override bool canClone( dynamic O = null ) {
			return O is Obj_Machinery_Atmospherics_Unary_VentScrubber;
		}

		// Function from file: vent_scrubber.dm
		public override void change_area( dynamic oldarea = null, dynamic newarea = null ) {
			this.areaMaster.air_scrub_info.Remove( this.id_tag );
			this.areaMaster.air_scrub_names.Remove( this.id_tag );
			base.change_area( (object)(oldarea), (object)(newarea) );
			this.name = GlobalFuncs.replacetext( this.name, newarea, oldarea );
			this.area_uid = this.areaMaster.uid;
			this.broadcast_status();
			return;
		}

		// Function from file: vent_scrubber.dm
		public override int multitool_topic( Mob user = null, ByTable href_list = null, dynamic O = null ) {
			string newid = null;

			Interface13.Stat( null, href_list.Contains( "set_id" ) );

			if ( false ) {
				newid = String13.SubStr( GlobalFuncs.reject_bad_text( Interface13.Input( Task13.User, "Specify the new ID tag for this machine", this, this.id_tag, null, InputType.Str | InputType.Null ) ), 1, 1024 );

				if ( !Lang13.Bool( newid ) ) {
					return 0;
				}

				if ( this.frequency == 1439 ) {
					this.areaMaster.air_scrub_info.Remove( this.id_tag );
					this.areaMaster.air_scrub_names.Remove( this.id_tag );
				}
				this.id_tag = newid;
				this.broadcast_status();
				return 1;
			}
			return base.multitool_topic( user, href_list, (object)(O) );
		}

		// Function from file: vent_scrubber.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.areaMaster.air_scrub_info.Remove( this.id_tag );
			this.areaMaster.air_scrub_names.Remove( this.id_tag );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: vent_scrubber.dm
		public override string multitool_menu( dynamic user = null, dynamic P = null ) {
			return new Txt( "\n	<ul>\n		<li><b>Frequency:</b> <a href=\"?src=" ).Ref( this ).str( ";set_freq=-1\">" ).item( GlobalFuncs.format_frequency( this.frequency ) ).str( " GHz</a> (<a href=\"?src=" ).Ref( this ).str( ";set_freq=" ).item( 1439 ).str( "\">Reset</a>)</li>\n		<li>" ).item( this.format_tag( "ID Tag", "id_tag", "set_id" ) ).str( "</li>\n	</ul>\n	" ).ToString();
		}

		// Function from file: vent_scrubber.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic WT = null;

			
			if ( a is Obj_Item_Weapon_Weldingtool ) {
				WT = a;

				if ( Lang13.Bool( WT.remove_fuel( 1, b ) ) ) {
					GlobalFuncs.to_chat( b, "<span class='notice'>Now welding the scrubber.</span>" );

					if ( GlobalFuncs.do_after( b, this, 20 ) ) {
						
						if ( !( this != null ) || !((Obj_Item_Weapon_Weldingtool)WT).isOn() ) {
							return null;
						}
						GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/welder2.ogg", 50, 1 );

						if ( !this.welded ) {
							((Ent_Static)b).visible_message( "" + b + " welds the scrubber shut.", "You weld the vent scrubber.", "You hear welding." );
							this.welded = true;
							this.update_icon();
						} else {
							((Ent_Static)b).visible_message( "" + b + " unwelds the scrubber.", "You unweld the scrubber.", "You hear welding." );
							this.welded = false;
							this.update_icon();
						}
					} else {
						GlobalFuncs.to_chat( b, "<span class='notice'>The welding tool needs to be on to start this task.</span>" );
					}
				} else {
					GlobalFuncs.to_chat( b, "<span class='notice'>You need more welding fuel to complete this task.</span>" );
					return 1;
				}
			}

			if ( !( a is Obj_Item_Weapon_Wrench ) ) {
				return base.attackby( (object)(a), (object)(b), (object)(c) );
			}

			if ( !( ( this.stat & 2 ) != 0 ) && Lang13.Bool( this.on ) ) {
				GlobalFuncs.to_chat( b, "<span class='warning'>You cannot unwrench this " + this + ", turn it off first.</span>" );
				return 1;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: vent_scrubber.dm
		public override bool can_crawl_through(  ) {
			return !this.welded;
		}

		// Function from file: vent_scrubber.dm
		public override dynamic power_change(  ) {
			
			if ( Lang13.Bool( this.powered( this.power_channel ) ) ) {
				this.stat &= 65533;
			} else {
				this.stat |= 2;
			}
			this.update_icon();
			return null;
		}

		// Function from file: vent_scrubber.dm
		public override bool receive_signal( Game_Data signal = null, bool? receive_method = null, dynamic receive_param = null ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				return false;
			}

			if ( !Lang13.Bool( ((dynamic)signal).data["tag"] ) || ((dynamic)signal).data["tag"] != this.id_tag || ((dynamic)signal).data["sigtype"] != "command" || Lang13.Bool( ((dynamic)signal).data["type"] ) && ((dynamic)signal).data["type"] != "scrubber" ) {
				return false;
			}

			if ( ((dynamic)signal).data["power"] != null ) {
				this.on = String13.ParseNumber( ((dynamic)signal).data["power"] );
			}

			if ( ((dynamic)signal).data["power_toggle"] != null ) {
				this.on = !Lang13.Bool( this.on ) ?1:0;
			}

			if ( Lang13.Bool( ((dynamic)signal).data["panic_siphon"] ) ) {
				this.panic = String13.ParseNumber( ((dynamic)signal).data["panic_siphon"] );

				if ( Lang13.Bool( this.panic ) ) {
					this.on = 1;
					this.scrubbing = 0;
					this.volume_rate = 2000;
				} else {
					this.scrubbing = 1;
					this.volume_rate = Lang13.Initial( this, "volume_rate" );
				}
			}

			if ( ((dynamic)signal).data["toggle_panic_siphon"] != null ) {
				this.panic = !Lang13.Bool( this.panic ) ?1:0;

				if ( Lang13.Bool( this.panic ) ) {
					this.on = 1;
					this.scrubbing = 0;
					this.volume_rate = 2000;
				} else {
					this.scrubbing = 1;
					this.volume_rate = Lang13.Initial( this, "volume_rate" );
				}
			}

			if ( ((dynamic)signal).data["scrubbing"] != null ) {
				this.scrubbing = String13.ParseNumber( ((dynamic)signal).data["scrubbing"] );
			}

			if ( Lang13.Bool( ((dynamic)signal).data["toggle_scrubbing"] ) ) {
				this.scrubbing = !Lang13.Bool( this.scrubbing ) ?1:0;
			}

			if ( ((dynamic)signal).data["co2_scrub"] != null ) {
				this.scrub_CO2 = String13.ParseNumber( ((dynamic)signal).data["co2_scrub"] );
			}

			if ( Lang13.Bool( ((dynamic)signal).data["toggle_co2_scrub"] ) ) {
				this.scrub_CO2 = !Lang13.Bool( this.scrub_CO2 ) ?1:0;
			}

			if ( ((dynamic)signal).data["tox_scrub"] != null ) {
				this.scrub_Toxins = String13.ParseNumber( ((dynamic)signal).data["tox_scrub"] );
			}

			if ( Lang13.Bool( ((dynamic)signal).data["toggle_tox_scrub"] ) ) {
				this.scrub_Toxins = !Lang13.Bool( this.scrub_Toxins ) ?1:0;
			}

			if ( ((dynamic)signal).data["n2o_scrub"] != null ) {
				this.scrub_N2O = String13.ParseNumber( ((dynamic)signal).data["n2o_scrub"] );
			}

			if ( Lang13.Bool( ((dynamic)signal).data["toggle_n2o_scrub"] ) ) {
				this.scrub_N2O = !Lang13.Bool( this.scrub_N2O ) ?1:0;
			}

			if ( ((dynamic)signal).data["o2_scrub"] != null ) {
				this.scrub_O2 = String13.ParseNumber( ((dynamic)signal).data["o2_scrub"] );
			}

			if ( Lang13.Bool( ((dynamic)signal).data["toggle_o2_scrub"] ) ) {
				this.scrub_O2 = !Lang13.Bool( this.scrub_O2 ) ?1:0;
			}

			if ( ((dynamic)signal).data["n2_scrub"] != null ) {
				this.scrub_N2 = String13.ParseNumber( ((dynamic)signal).data["n2_scrub"] );
			}

			if ( Lang13.Bool( ((dynamic)signal).data["toggle_n2_scrub"] ) ) {
				this.scrub_N2 = !Lang13.Bool( this.scrub_N2 ) ?1:0;
			}

			if ( ((dynamic)signal).data["init"] != null ) {
				this.name = ((dynamic)signal).data["init"];
				return false;
			}

			if ( ((dynamic)signal).data["status"] != null ) {
				Task13.Schedule( 2, (Task13.Closure)(() => {
					this.broadcast_status();
					return;
				}));
				return false;
			}
			Task13.Schedule( 2, (Task13.Closure)(() => {
				this.broadcast_status();
				return;
			}));
			this.update_icon();
			return false;
		}

		// Function from file: vent_scrubber.dm
		public override void hide( bool? h = null ) {
			this.update_icon();
			return;
		}

		// Function from file: vent_scrubber.dm
		public override dynamic process(  ) {
			dynamic _default = null;

			GasMixture environment = null;
			double transfer_moles = 0;
			dynamic removed = null;
			GasMixture filtered_out = null;
			Gas trace_gas = null;
			dynamic transfer_moles2 = null;
			dynamic removed2 = null;

			_default = base.process();

			if ( GlobalVars.disable_scrubbers ) {
				return _default;
			}

			if ( ( this.stat & 3 ) != 0 ) {
				return _default;
			}

			if ( !( this.node != null ) ) {
				return _default;
			}

			if ( this.welded ) {
				return _default;
			}

			if ( !Lang13.Bool( this.on ) ) {
				return _default;
			}

			if ( !( this.loc != null ) ) {
				return _default;
			}
			environment = this.loc.return_air();

			if ( Lang13.Bool( this.scrubbing ) ) {
				
				if ( Lang13.Bool( this.scrub_Toxins ) && Convert.ToDouble( environment.toxins ) > 0 || Lang13.Bool( this.scrub_CO2 ) && Convert.ToDouble( environment.carbon_dioxide ) > 0 || Lang13.Bool( this.scrub_N2O ) && environment.trace_gases.len > 0 || Lang13.Bool( this.scrub_O2 ) && Convert.ToDouble( environment.oxygen ) > 0 || Lang13.Bool( this.scrub_N2 ) && Convert.ToDouble( environment.nitrogen ) > 0 ) {
					transfer_moles = Num13.MinInt( 1, Convert.ToInt32( this.volume_rate / environment.volume ) ) * Convert.ToDouble( environment.f_total_moles() );
					removed = this.loc.remove_air( transfer_moles );

					if ( removed == null ) {
						return _default;
					}
					filtered_out = new GasMixture();
					filtered_out.temperature = Lang13.DoubleNullable( removed.temperature );

					if ( Lang13.Bool( this.scrub_Toxins ) ) {
						filtered_out.toxins = removed.toxins;
						removed.toxins = 0;
					}

					if ( Lang13.Bool( this.scrub_CO2 ) ) {
						filtered_out.carbon_dioxide = removed.carbon_dioxide;
						removed.carbon_dioxide = 0;
					}

					if ( Lang13.Bool( this.scrub_O2 ) ) {
						filtered_out.oxygen = removed.oxygen;
						removed.oxygen = 0;
					}

					if ( Lang13.Bool( this.scrub_N2 ) ) {
						filtered_out.nitrogen = removed.nitrogen;
						removed.nitrogen = 0;
					}

					if ( removed.trace_gases.len > 0 ) {
						
						foreach (dynamic _a in Lang13.Enumerate( removed.trace_gases, typeof(Gas) )) {
							trace_gas = _a;
							

							if ( trace_gas is Gas_OxygenAgentB ) {
								removed.trace_gases.Remove( trace_gas );
								filtered_out.trace_gases.Add( trace_gas );
							} else if ( trace_gas is Gas_SleepingAgent && Lang13.Bool( this.scrub_N2O ) ) {
								removed.trace_gases.Remove( trace_gas );
								filtered_out.trace_gases.Add( trace_gas );
							}
						}
					}
					this.air_contents.merge( filtered_out );
					this.loc.assume_air( removed );

					if ( this.network != null ) {
						((dynamic)this.network).update = 1;
					}
				}
			} else {
				
				if ( Convert.ToDouble( this.air_contents.return_pressure() ) >= 5066.25 ) {
					return _default;
				}
				transfer_moles2 = environment.f_total_moles() * ( this.volume_rate / environment.volume );
				removed2 = this.loc.remove_air( transfer_moles2 );
				this.air_contents.merge( removed2 );

				if ( this.network != null ) {
					((dynamic)this.network).update = 1;
				}
			}
			return 1;
		}

		// Function from file: vent_scrubber.dm
		public override bool initialize( bool? suppress_icon_check = null ) {
			base.initialize( suppress_icon_check );
			this.radio_filter_in = ( this.frequency == Lang13.Initial( this, "frequency" ) ? GlobalVars.RADIO_FROM_AIRALARM : null );
			this.radio_filter_out = ( this.frequency == Lang13.Initial( this, "frequency" ) ? GlobalVars.RADIO_TO_AIRALARM : null );

			if ( this.frequency != 0 ) {
				this.set_frequency( this.frequency );
			}
			return false;
		}

		// Function from file: vent_scrubber.dm
		public override bool? buildFrom( Mob usr = null, Obj_Item_Pipe pipe = null ) {
			base.buildFrom( usr, pipe );
			this.broadcast_status();
			return true;
		}

		// Function from file: vent_scrubber.dm
		public bool broadcast_status(  ) {
			Game_Data signal = null;
			string new_name = null;

			
			if ( !( this.radio_connection != null ) ) {
				return false;
			}
			signal = GlobalFuncs.getFromPool( typeof(Signal) );
			((dynamic)signal).transmission_method = 1;
			((dynamic)signal).source = this;
			((dynamic)signal).data = new ByTable()
				.Set( "area", this.area_uid )
				.Set( "tag", this.id_tag )
				.Set( "device", "AScr" )
				.Set( "timestamp", Game13.time )
				.Set( "power", this.on )
				.Set( "scrubbing", this.scrubbing )
				.Set( "panic", this.panic )
				.Set( "filter_co2", this.scrub_CO2 )
				.Set( "filter_tox", this.scrub_Toxins )
				.Set( "filter_n2o", this.scrub_N2O )
				.Set( "filter_o2", this.scrub_O2 )
				.Set( "filter_n2", this.scrub_N2 )
				.Set( "sigtype", "status" )
			;

			if ( this.frequency == 1439 ) {
				
				if ( !Lang13.Bool( this.areaMaster.air_scrub_names[this.id_tag] ) ) {
					new_name = "" + this.areaMaster.name + " Air Scrubber #" + ( this.areaMaster.air_scrub_names.len + 1 );
					this.areaMaster.air_scrub_names[this.id_tag] = new_name;
					this.name = new_name;
				}
				this.areaMaster.air_scrub_info[this.id_tag] = ((dynamic)signal).data;
			}
			this.radio_connection.post_signal( this, signal, this.radio_filter_out );
			return true;
		}

		// Function from file: vent_scrubber.dm
		public void set_frequency( int new_frequency = 0 ) {
			GlobalVars.radio_controller.remove_object( this, this.frequency );
			this.frequency = new_frequency;
			this.radio_connection = GlobalVars.radio_controller.add_object( this, this.frequency, this.radio_filter_in );

			if ( this.frequency != 1439 ) {
				this.areaMaster.air_scrub_info.Remove( this.id_tag );
				this.areaMaster.air_scrub_names.Remove( this.id_tag );
				this.name = "Air Scrubber";
			} else {
				this.broadcast_status();
			}
			return;
		}

		// Function from file: vent_scrubber.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			string suffix = null;
			Ent_Static floor = null;

			
			if ( this.welded ) {
				this.icon_state = "hweld";
				return null;
			}
			suffix = "";

			if ( Lang13.Bool( this.scrub_O2 ) ) {
				suffix = "1";
			}

			if ( this.node != null && Lang13.Bool( this.on ) && !( ( this.stat & 3 ) != 0 ) ) {
				
				if ( Lang13.Bool( this.scrubbing ) ) {
					this.icon_state = "hon" + suffix;
				} else {
					this.icon_state = "hin";
				}
			} else {
				this.icon_state = "hoff";
			}
			base.update_icon( (object)(location), (object)(target) );

			if ( this.loc is Tile_Simulated_Floor && this.node != null ) {
				floor = this.loc;

				if ( Lang13.Bool( ((dynamic)floor).floor_tile ) && this.node.alpha == 128 ) {
					this.underlays.Cut();
				}
			}
			return null;
		}

	}

}