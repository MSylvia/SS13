// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Power_RustFuelInjector : Obj_Machinery_Power {

		public bool locked = false;
		public dynamic cur_assembly = null;
		public double fuel_usage = 0.0;
		public dynamic id_tag = "One";
		public bool injecting = false;
		public bool trying_to_swap_fuel = false;
		public bool remote_access_enabled = true;
		public dynamic cached_power_avail = 0;
		public bool emergency_insert_ready = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 10 });
			this.idle_power_usage = 10;
			this.active_power_usage = 500;
			this.machine_flags = 89;
			this.icon = "code/WorkInProgress/Cael_Aislinn/Rust/rust.dmi";
			this.icon_state = "injector0";
		}

		public Obj_Machinery_Power_RustFuelInjector ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: fuel_injector.dm
		public void attempt_fuel_swap(  ) {
			double? rev_dir = null;
			Tile mid = null;
			bool success = false;
			Obj_Machinery_RustFuelAssemblyPort check_port = null;

			rev_dir = GlobalFuncs.reverse_direction( this.dir );
			mid = Map13.GetStep( this, ((int)( rev_dir ??0 )) );
			success = false;

			foreach (dynamic _a in Lang13.Enumerate( Map13.GetStep( mid, ((int)( rev_dir ??0 )) ), typeof(Obj_Machinery_RustFuelAssemblyPort) )) {
				check_port = _a;
				

				if ( Lang13.Bool( this.cur_assembly ) ) {
					
					if ( !Lang13.Bool( check_port.cur_assembly ) ) {
						check_port.cur_assembly = this.cur_assembly;
						this.cur_assembly.loc = check_port;
						this.cur_assembly = null;
						check_port.icon_state = "port1";
						success = true;
					}
				} else if ( Lang13.Bool( check_port.cur_assembly ) ) {
					this.cur_assembly = check_port.cur_assembly;
					this.cur_assembly.loc = this;
					check_port.cur_assembly = null;
					check_port.icon_state = "port0";
					success = true;
				}
				break;
			}

			if ( success ) {
				this.visible_message( new Txt( "<span class='notice'>" ).icon( this ).str( " a green light flashes on " ).item( this ).str( ".</span>" ).ToString() );
				this.updateDialog();
			} else {
				this.visible_message( new Txt( "<span class='warning'>" ).icon( this ).str( " a red light flashes on " ).item( this ).str( ".</span>" ).ToString() );
			}
			return;
		}

		// Function from file: fuel_injector.dm
		public void Inject(  ) {
			double amount_left = 0;
			dynamic reagent = null;
			dynamic amount = null;
			int numparticles = 0;
			Obj_Effect_AcceleratedParticle A = null;

			
			if ( !this.injecting ) {
				return;
			}

			if ( Lang13.Bool( this.cur_assembly ) ) {
				amount_left = 0;

				foreach (dynamic _a in Lang13.Enumerate( this.cur_assembly.rod_quantities )) {
					reagent = _a;
					

					if ( Convert.ToDouble( this.cur_assembly.rod_quantities[reagent] ) > 0 ) {
						amount = this.cur_assembly.rod_quantities[reagent] * this.fuel_usage;
						numparticles = Num13.Floor( Convert.ToDouble( amount * 1000 ) );

						if ( numparticles < 1 ) {
							numparticles = 1;
						}
						A = new Obj_Effect_AcceleratedParticle( GlobalFuncs.get_turf( this ), this.dir );
						A.particle_type = reagent;
						A.additional_particles = numparticles - 1;
						A.startMove( true );
						this.cur_assembly.rod_quantities[reagent] -= amount;
						amount_left += Convert.ToDouble( this.cur_assembly.rod_quantities[reagent] );
					}
				}
				this.cur_assembly.percent_depleted = amount_left / 300;
				Icon13.Flick( "injector-emitting", this );
			} else {
				this.StopInjecting();
			}
			return;
		}

		// Function from file: fuel_injector.dm
		public void StopInjecting(  ) {
			
			if ( this.injecting ) {
				this.injecting = false;
				this.icon_state = "injector0";
				this.use_power = 0;
			}
			return;
		}

		// Function from file: fuel_injector.dm
		public void BeginInjecting(  ) {
			
			if ( !this.injecting && Lang13.Bool( this.cur_assembly ) ) {
				this.icon_state = "injector1";
				this.injecting = true;
				this.use_power = 1;
			}
			return;
		}

		// Function from file: fuel_injector.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			double? new_usage = null;
			dynamic C = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return 1;
			}

			if ( Lang13.Bool( href_list["modify_tag"] ) ) {
				this.id_tag = Interface13.Input( "Enter new ID tag", "Modifying ID tag", null, null, null, InputType.Str | InputType.Null );
			}

			if ( Lang13.Bool( href_list["fuel_assembly"] ) ) {
				this.attempt_fuel_swap();
			}

			if ( Lang13.Bool( href_list["emergency_fuel_assembly"] ) ) {
				
				if ( Lang13.Bool( this.cur_assembly ) ) {
					this.cur_assembly.loc = this.loc;
					this.cur_assembly = null;
				} else {
					this.emergency_insert_ready = !this.emergency_insert_ready;
				}
			}

			if ( Lang13.Bool( href_list["toggle_injecting"] ) ) {
				
				if ( this.injecting ) {
					this.StopInjecting();
				} else {
					this.BeginInjecting();
				}
			}

			if ( Lang13.Bool( href_list["toggle_remote"] ) ) {
				this.remote_access_enabled = !this.remote_access_enabled;
			}

			if ( Lang13.Bool( href_list["fuel_usage"] ) ) {
				new_usage = String13.ParseNumber( Interface13.Input( "Enter new fuel usage (0.01% - 100%)", "Modifying fuel usage", this.fuel_usage * 100, null, null, InputType.Any ) );

				if ( !Lang13.Bool( new_usage ) ) {
					GlobalFuncs.to_chat( Task13.User, "<span class='warning'>That's not a valid number.</span>" );
					return null;
				}
				new_usage = Num13.MaxInt( ((int)( new_usage ??0 )), ((int)( 0.01 )) );
				new_usage = Num13.MinInt( ((int)( new_usage ??0 )), 100 );
				this.fuel_usage = ( new_usage ??0) / 100;
				this.active_power_usage = this.fuel_usage * 1000 + 500;
			}

			if ( Lang13.Bool( href_list["update_extern"] ) ) {
				C = Lang13.FindObj( href_list["update_extern"] );

				if ( Lang13.Bool( C ) ) {
					((Obj)C).updateDialog();
				}
			}

			if ( Lang13.Bool( href_list["close"] ) ) {
				Interface13.Browse( Task13.User, null, "window=fuel_injector" );
				Task13.User.unset_machine();
			}
			this.updateDialog();
			return null;
		}

		// Function from file: fuel_injector.dm
		public override dynamic interact( dynamic user = null, bool? flag1 = null ) {
			string dat = null;
			string font_colour = null;

			
			if ( ( this.stat & 1 ) != 0 ) {
				((Mob)user).unset_machine();
				Interface13.Browse( user, null, "window=fuel_injector" );
				return null;
			}

			if ( Map13.GetDistance( this, user ) > 1 ) {
				
				if ( !( user is Mob_Living_Silicon ) ) {
					((Mob)user).unset_machine();
					Interface13.Browse( user, null, "window=fuel_injector" );
					return null;
				}
			}
			dat = "";

			if ( ( this.stat & 2 ) != 0 || this.locked || this.state != 2 ) {
				dat += "<i>The console is dark and nonresponsive.</i>";
			} else {
				dat += new Txt( "<B>Reactor Core Fuel Injector</B><hr>\n			<b>Device ID tag:</b> " ).item( this.id_tag ).str( " <a href='?src=" ).Ref( this ).str( ";modify_tag=1'>[Modify]</a><br>\n			<b>Status:</b> " ).item( ( this.injecting ? new Txt( "<font color=green>Active</font> <a href='?src=" ).Ref( this ).str( ";toggle_injecting=1'>[Disable]</a>" ).ToString() : new Txt( "<font color=blue>Standby</font> <a href='?src=" ).Ref( this ).str( ";toggle_injecting=1'>[Enable]</a>" ).ToString() ) ).str( "<br>\n			<b>Fuel usage:</b> " ).item( this.fuel_usage * 100 ).str( "% <a href='?src=" ).Ref( this ).str( ";fuel_usage=1'>[Modify]</a><br>\n			<b>Fuel assembly port:</b>\n			<a href='?src=" ).Ref( this ).str( ";fuel_assembly=1'>[" ).item( ( Lang13.Bool( this.cur_assembly ) ? "Eject assembly to port" : "Draw assembly from port" ) ).str( "]</a> " ).ToString();

				if ( Lang13.Bool( this.cur_assembly ) ) {
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";emergency_fuel_assembly=1'>[Emergency eject]</a><br>" ).ToString();
				} else {
					dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";emergency_fuel_assembly=1'>[" ).item( ( this.emergency_insert_ready ? "Cancel emergency insertion" : "Emergency insert" ) ).str( "]</a><br>" ).ToString();
				}
				font_colour = "green";

				if ( Convert.ToDouble( this.cached_power_avail ) < Convert.ToDouble( this.active_power_usage ) ) {
					font_colour = "red";
				} else if ( Convert.ToDouble( this.cached_power_avail ) < Convert.ToDouble( this.active_power_usage * 2 ) ) {
					font_colour = "orange";
				}
				dat += new Txt( "<b>Power status:</b> <font color=" ).item( font_colour ).str( ">" ).item( this.active_power_usage ).str( "/" ).item( this.cached_power_avail ).str( " W</font><br>\n			<a href='?src=" ).Ref( this ).str( ";toggle_remote=1'>[" ).item( ( this.remote_access_enabled ? "Disable remote access" : "Enable remote access" ) ).str( "]</a><br>\n			<hr>\n			<A href='?src=" ).Ref( this ).str( ";refresh=1'>Refresh</A>\n			<A href='?src=" ).Ref( this ).str( ";close=1'>Close</A><BR>" ).ToString();
			}
			Interface13.Browse( user, dat, "window=fuel_injector;size=500x300" );
			GlobalFuncs.onclose( user, "fuel_injector" );
			((Mob)user).set_machine( this );
			return null;
		}

		// Function from file: fuel_injector.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.add_fingerprint( a );
			this.interact( a );
			return null;
		}

		// Function from file: fuel_injector.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.attack_hand( user );
			return null;
		}

		// Function from file: fuel_injector.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Lang13.Bool( base.attackby( (object)(a), (object)(b), (object)(c) ) ) ) {
				return 1;
			}

			if ( a is Obj_Item_Weapon_Card_Id || a is Obj_Item_Device_Pda ) {
				
				if ( this.emagged != 0 ) {
					GlobalFuncs.to_chat( b, "<span class='warning'>The lock seems to be broken</span>" );
					return null;
				}

				if ( this.allowed( b ) ) {
					this.locked = !this.locked;
					GlobalFuncs.to_chat( b, "The controls are now " + ( this.locked ? "locked." : "unlocked." ) );
				} else {
					GlobalFuncs.to_chat( b, "<span class='warning'>Access denied.</span>" );
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_FuelAssembly && !Lang13.Bool( this.cur_assembly ) ) {
				
				if ( this.emergency_insert_ready ) {
					
					if ( Lang13.Bool( b.drop_item( a, this ) ) ) {
						this.cur_assembly = a;
						this.emergency_insert_ready = false;
						return null;
					}
				}
			}
			base.attackby( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: fuel_injector.dm
		public override int emag( dynamic user = null ) {
			
			if ( !( this.emagged != 0 ) ) {
				this.locked = false;
				this.emagged = 1;
				((Ent_Static)user).visible_message( "" + user.name + " emags the " + this.name + ".", "<span class='warning'>You short out the lock.</span>" );
				return 1;
			}
			return -1;
		}

		// Function from file: fuel_injector.dm
		public override int weldToFloor( dynamic WT = null, dynamic user = null ) {
			
			if ( base.weldToFloor( (object)(WT), (object)(user) ) == 1 ) {
				
				dynamic _a = this.state; // Was a switch-case, sorry for the mess.
				if ( _a==1 ) {
					this.disconnect_from_network();
				} else if ( _a==2 ) {
					this.connect_to_network();
				}
				return 1;
			}
			return -1;
		}

		// Function from file: fuel_injector.dm
		public override int wrenchAnchor( dynamic user = null ) {
			
			if ( this.injecting ) {
				GlobalFuncs.to_chat( user, "Turn off the " + this + " first." );
				return -1;
			}
			return base.wrenchAnchor( (object)(user) );
		}

		// Function from file: fuel_injector.dm
		public override dynamic process(  ) {
			
			if ( this.injecting ) {
				
				if ( ( this.stat & 3 ) != 0 ) {
					this.StopInjecting();
				} else {
					this.Inject();
				}
			}
			this.cached_power_avail = this.avail();
			return null;
		}

		// Function from file: fuel_injector.dm
		[Verb]
		[VerbInfo( name: "Rotate Generator (Counter-clockwise)", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_anticlock(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() || Lang13.Bool( this.anchored ) ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, 90 );
			return;
		}

		// Function from file: fuel_injector.dm
		[Verb]
		[VerbInfo( name: "Rotate Generator (Clockwise)", group: "Object", access: VerbAccess.InView, range: 1 )]
		public void rotate_clock(  ) {
			
			if ( Task13.User.isUnconscious() || Task13.User.restrained() || Lang13.Bool( this.anchored ) ) {
				return;
			}
			this.dir = Num13.Rotate( this.dir, -90 );
			return;
		}

	}

}