// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Pump : Obj_Machinery_PortableAtmospherics {

		public bool on = false;
		public bool direction_out = false;
		public double target_pressure = 100;
		public double pressuremax = 1013.25;
		public double pressuremin = 0;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 1000;
			this.icon = "icons/obj/atmos.dmi";
			this.icon_state = "psiphon:0";
		}

		public Obj_Machinery_PortableAtmospherics_Pump ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: pump.dm
		public override void AltClick( Mob user = null ) {
			
			if ( !Task13.User.incapacitated() && this.Adjacent( Task13.User ) && Lang13.Bool( Task13.User.dexterity_check() ) ) {
				this.eject_holding();
				return;
			}
			base.AltClick( user ); return;
		}

		// Function from file: pump.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			dynamic _default = null;

			double? diff = null;

			_default = base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( _default ) ) {
				return _default;
			}

			if ( Lang13.Bool( href_list["power"] ) ) {
				this.on = !this.on;
				this.update_icon();
			}

			if ( Lang13.Bool( href_list["direction"] ) ) {
				this.direction_out = !this.direction_out;
			}

			if ( Lang13.Bool( href_list["remove_tank"] ) ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					this.eject_holding();
					this.update_icon();
				}
			}

			if ( Lang13.Bool( href_list["pressure_adj"] ) ) {
				diff = String13.ParseNumber( href_list["pressure_adj"] );
				this.target_pressure = ( this.target_pressure + ( diff ??0) <= this.pressuremin ? this.pressuremin : ( this.target_pressure + ( diff ??0) >= this.pressuremax ? this.pressuremax : this.target_pressure + ( diff ??0) ) );
				this.update_icon();
			}
			this.add_fingerprint( Task13.User );
			return 1;
		}

		// Function from file: pump.dm
		public override void ui_interact( dynamic user = null, string ui_key = null, Nanoui ui = null, bool? force_open = null ) {
			ui_key = ui_key ?? "main";

			ByTable data = null;

			data = new ByTable( 0 );
			data["portConnected"] = ( Lang13.Bool( this.connected_port ) ? true : false );
			data["tankPressure"] = Num13.Floor( Convert.ToDouble( ( Convert.ToDouble( this.air_contents.return_pressure() ) > 0 ? this.air_contents.return_pressure() : ((dynamic)( 0 )) ) ) );
			data["targetpressure"] = Num13.Floor( this.target_pressure );
			data["pump_dir"] = this.direction_out;
			data["minpressure"] = Num13.Floor( this.pressuremin );
			data["maxpressure"] = Num13.Floor( this.pressuremax );
			data["on"] = ( this.on ? true : false );
			data["hasHoldingTank"] = ( Lang13.Bool( this.holding ) ? true : false );

			if ( Lang13.Bool( this.holding ) ) {
				data["holdingTank"] = new ByTable()
					.Set( "name", this.holding.name )
					.Set( "tankPressure", Num13.Floor( Convert.ToDouble( ( Convert.ToDouble( this.holding.air_contents.return_pressure() ) > 0 ? this.holding.air_contents.return_pressure() : ((dynamic)( 0 )) ) ) ) )
				;
			}
			ui = GlobalVars.nanomanager.try_update_ui( user, this, ui_key, ui, data );

			if ( !( ui != null ) ) {
				ui = new Nanoui( user, this, ui_key, "portpump.tmpl", "Portable Pump", 480, 400 );
				ui.set_initial_data( data );
				ui.open();
			}
			return;
		}

		// Function from file: pump.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			this.ui_interact( a );
			return null;
		}

		// Function from file: pump.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: pump.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: pump.dm
		public override GasMixture return_air(  ) {
			return this.air_contents;
		}

		// Function from file: pump.dm
		public override dynamic process(  ) {
			GasMixture environment = null;
			double pressure_delta = 0;
			double transfer_moles = 0;
			GasMixture removed = null;
			double pressure_delta2 = 0;
			double transfer_moles2 = 0;
			dynamic removed2 = null;

			base.process();

			if ( this.on ) {
				
				if ( Lang13.Bool( this.holding ) ) {
					environment = this.holding.air_contents;
				} else {
					environment = this.loc.return_air();
				}

				if ( this.direction_out ) {
					pressure_delta = this.target_pressure - Convert.ToDouble( environment.return_pressure() );
					transfer_moles = 0;

					if ( ( this.air_contents.temperature ??0) > 0 ) {
						transfer_moles = pressure_delta * ( environment.volume ??0) / ( ( this.air_contents.temperature ??0) * 8.314 );
						removed = this.air_contents.remove( transfer_moles );

						if ( Lang13.Bool( this.holding ) ) {
							environment.merge( removed );
						} else {
							this.loc.assume_air( removed );
						}
					}
				} else {
					pressure_delta2 = this.target_pressure - Convert.ToDouble( this.air_contents.return_pressure() );
					transfer_moles2 = 0;

					if ( ( environment.temperature ??0) > 0 ) {
						transfer_moles2 = pressure_delta2 * ( this.air_contents.volume ??0) / ( ( environment.temperature ??0) * 8.314 );

						if ( Lang13.Bool( this.holding ) ) {
							removed2 = environment.remove( transfer_moles2 );
						} else {
							removed2 = this.loc.remove_air( transfer_moles2 );
						}
						this.air_contents.merge( removed2 );
					}
				}
				GlobalVars.nanomanager.update_uis( this );
			}
			return null;
		}

		// Function from file: pump.dm
		public override dynamic emp_act( int severity = 0 ) {
			
			if ( ( this.stat & 3 ) != 0 ) {
				base.emp_act( severity );
				return null;
			}

			if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
				this.on = !this.on;
			}

			if ( Rand13.PercentChance( ((int)( 100 / severity )) ) ) {
				this.direction_out = !this.direction_out;
			}
			this.target_pressure = Rand13.Int( 0, 1300 );
			this.update_icon();
			GlobalVars.nanomanager.update_uis( this );
			base.emp_act( severity );
			return null;
		}

		// Function from file: pump.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			this.overlays = 0;

			if ( this.on ) {
				this.icon_state = "psiphon:1";
			} else {
				this.icon_state = "psiphon:0";
			}

			if ( Lang13.Bool( this.holding ) ) {
				this.overlays.Add( "siphon-open" );
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				this.overlays.Add( "siphon-connector" );
			}
			return null;
		}

	}

}