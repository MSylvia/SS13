// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_PortableAtmospherics_Pump : Obj_Machinery_PortableAtmospherics {

		public bool on = false;
		public string direction = "out";
		public Obj_Machinery_Atmospherics_Components_Binary_Pump pump = null;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.volume = 1000;
			this.icon_state = "psiphon:0";
		}

		// Function from file: pump.dm
		public Obj_Machinery_PortableAtmospherics_Pump ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.pump = new Obj_Machinery_Atmospherics_Components_Binary_Pump( this, GlobalVars.FALSE );
			this.pump.on = GlobalVars.TRUE;
			this.pump.stat = 0;
			this.pump.build_network();
			return;
		}

		// Function from file: pump.dm
		public override int? ui_act( string action = null, ByTable _params = null, Tgui ui = null, UiState state = null ) {
			int? _default = null;

			dynamic plasma = null;
			dynamic n2o = null;
			dynamic pressure = null;

			
			if ( Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
				return _default;
			}

			switch ((string)( action )) {
				case "power":
					this.on = !this.on;

					if ( this.on && !Lang13.Bool( this.holding ) ) {
						plasma = this.air_contents.gases["plasma"];
						n2o = this.air_contents.gases["n2o"];

						if ( Lang13.Bool( n2o ) || Lang13.Bool( plasma ) ) {
							GlobalFuncs.message_admins( new Txt().item( GlobalFuncs.key_name_admin( Task13.User ) ).str( " (<A HREF='?_src_=holder;adminmoreinfo=" ).Ref( Task13.User ).str( "'>?</A>) (<A HREF='?_src_=holder;adminplayerobservefollow=" ).Ref( Task13.User ).str( "'>FLW</A>) turned on a pump that contains " ).item( ( Lang13.Bool( n2o ) ? "N2O" : "" ) ).item( ( Lang13.Bool( n2o ) && Lang13.Bool( plasma ) ? " & " : "" ) ).item( ( Lang13.Bool( plasma ) ? "Plasma" : "" ) ).str( "! (<A HREF='?_src_=holder;adminplayerobservecoodjump=1;X=" ).item( this.x ).str( ";Y=" ).item( this.y ).str( ";Z=" ).item( this.z ).str( "'>JMP</a>)" ).ToString() );
							GlobalFuncs.log_admin( "" + GlobalFuncs.key_name( Task13.User ) + " turned on a pump that contains " + ( Lang13.Bool( n2o ) ? "N2O" : "" ) + ( Lang13.Bool( n2o ) && Lang13.Bool( plasma ) ? " & " : "" ) + ( Lang13.Bool( plasma ) ? "Plasma" : "" ) + " at " + this.x + ", " + this.y + ", " + this.z );
						}
					}
					_default = GlobalVars.TRUE;
					break;
				case "direction":
					
					if ( this.direction == "out" ) {
						this.direction = "in";
					} else {
						this.direction = "out";
					}
					_default = GlobalVars.TRUE;
					break;
				case "pressure":
					pressure = _params["pressure"];

					if ( pressure == "reset" ) {
						pressure = 101.32499694824219;
						_default = GlobalVars.TRUE;
					} else if ( pressure == "min" ) {
						pressure = 10.132499694824219;
						_default = GlobalVars.TRUE;
					} else if ( pressure == "max" ) {
						pressure = 1013.25;
						_default = GlobalVars.TRUE;
					} else if ( pressure == "input" ) {
						pressure = Interface13.Input( "New release pressure (" + 10.132499694824219 + "-" + 1013.25 + " kPa):", this.name, this.pump.target_pressure, null, null, InputType.Num | InputType.Null );

						if ( !( pressure == null ) && !Lang13.Bool( base.ui_act( action, _params, ui, state ) ) ) {
							_default = GlobalVars.TRUE;
						}
					} else if ( String13.ParseNumber( pressure ) != null ) {
						pressure = String13.ParseNumber( pressure );
						_default = GlobalVars.TRUE;
					}

					if ( Lang13.Bool( _default ) ) {
						this.pump.target_pressure = Num13.MaxInt( ((int)( 10.132499694824219 )), Num13.MinInt( Num13.Floor( Convert.ToDouble( pressure ) ), ((int)( 1013.25 )) ) );
						this.investigate_log( "was set to " + this.pump.target_pressure + " kPa by " + GlobalFuncs.key_name( Task13.User ) + ".", "atmos" );
					}
					break;
				case "eject":
					
					if ( Lang13.Bool( this.holding ) ) {
						this.holding.loc = GlobalFuncs.get_turf( this );
						this.holding = null;
						_default = GlobalVars.TRUE;
					}
					break;
			}
			this.update_icon();
			return _default;
		}

		// Function from file: pump.dm
		public override ByTable ui_data( dynamic user = null ) {
			ByTable data = null;

			data = new ByTable();
			data["on"] = this.on;
			data["direction"] = this.direction;
			data["connected"] = ( Lang13.Bool( this.connected_port ) ? true : false );
			data["pressure"] = Num13.Floor( ( this.air_contents.return_pressure() != 0 ? this.air_contents.return_pressure() : 0 ) );
			data["target_pressure"] = Num13.Floor( ( this.pump.target_pressure != 0 ? this.pump.target_pressure : 0 ) );
			data["default_pressure"] = Num13.Floor( 101.32499694824219 );
			data["min_pressure"] = Num13.Floor( 10.132499694824219 );
			data["max_pressure"] = Num13.Floor( 1013.25 );

			if ( Lang13.Bool( this.holding ) ) {
				data["holding"] = new ByTable();
				data["holding"]["name"] = this.holding.name;
				data["holding"]["pressure"] = Num13.Floor( Convert.ToDouble( this.holding.air_contents.return_pressure() ) );
			}
			return data;
		}

		// Function from file: pump.dm
		public override int ui_interact( dynamic user = null, string ui_key = null, Tgui ui = null, bool? force_open = null, Tgui master_ui = null, UiState state = null ) {
			ui_key = ui_key ?? "main";
			force_open = force_open ?? false;
			state = state ?? GlobalVars.physical_state;

			ui = GlobalVars.SStgui.try_update_ui( user, this, ui_key, ui, force_open );

			if ( !( ui != null ) ) {
				ui = new Tgui( user, this, ui_key, "portable_pump", this.name, 420, 415, master_ui, state );
				ui.open();
			}
			return 0;
		}

		// Function from file: pump.dm
		public override double emp_act( int severity = 0 ) {
			
			if ( this.is_operational() ) {
				
				if ( Rand13.PercentChance( ((int)( 50 / severity )) ) ) {
					this.on = !this.on;
				}

				if ( Rand13.PercentChance( ((int)( 100 / severity )) ) ) {
					this.direction = "out";
				}
				this.pump.target_pressure = Rand13.Int( 0, ((int)( 10132.5 )) );
				this.update_icon();
			}
			base.emp_act( severity );
			return 0;
		}

		// Function from file: pump.dm
		public override int? process_atmos(  ) {
			dynamic T = null;

			base.process_atmos();

			if ( !this.on ) {
				this.pump.airs[1] = null;
				this.pump.airs[2] = null;
				return null;
			}
			T = GlobalFuncs.get_turf( this );

			if ( this.direction == "out" ) {
				this.pump.airs[1] = ( Lang13.Bool( this.holding ) ? this.holding.air_contents : this.air_contents );
				this.pump.airs[2] = ( Lang13.Bool( this.holding ) ? this.air_contents : ((Ent_Static)T).return_air() );
			} else {
				this.pump.airs[1] = ( Lang13.Bool( this.holding ) ? this.air_contents : ((Ent_Static)T).return_air() );
				this.pump.airs[2] = ( Lang13.Bool( this.holding ) ? this.holding.air_contents : this.air_contents );
			}
			this.pump.process_atmos();

			if ( !Lang13.Bool( this.holding ) ) {
				this.air_update_turf();
			}
			return null;
		}

		// Function from file: pump.dm
		public override bool update_icon( dynamic new_state = null, dynamic new_icon = null, int? new_px = null, int? new_py = null ) {
			this.icon_state = "psiphon:" + this.on;
			this.overlays.Cut();

			if ( Lang13.Bool( this.holding ) ) {
				this.overlays.Add( "siphon-open" );
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				this.overlays.Add( "siphon-connector" );
			}
			return false;
		}

		// Function from file: pump.dm
		public override dynamic Destroy(  ) {
			dynamic T = null;

			T = GlobalFuncs.get_turf( this );
			((Ent_Static)T).assume_air( this.air_contents );
			this.air_update_turf();
			GlobalFuncs.qdel( this.pump );
			this.pump = null;
			return base.Destroy();
		}

	}

}