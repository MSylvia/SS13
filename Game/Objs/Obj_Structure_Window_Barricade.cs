// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Window_Barricade : Obj_Structure_Window {

		public bool busy = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.health = 60;
			this.fire_temp_threshold = 100;
			this.fire_volume_mod = 10;
			this.icon = "icons/obj/barricade.dmi";
			this.icon_state = "barricade";
		}

		public Obj_Structure_Window_Barricade ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: barricade.dm
		public override bool update_nearby_icons( dynamic T = null ) {
			return false;
		}

		// Function from file: barricade.dm
		public override bool update_nearby_tiles( dynamic T = null ) {
			return false;
		}

		// Function from file: barricade.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			return null;
		}

		// Function from file: barricade.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.density = false;
			GlobalFuncs.getFromPool( typeof(Obj_Item_Stack_Sheet_Wood), this.loc, this.sheetamount );
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: barricade.dm
		public override bool CanPass( dynamic mover = null, dynamic target = null, double? height = null, bool? air_group = null ) {
			height = height ?? 1.5;
			air_group = air_group ?? false;

			
			if ( air_group == true || !Lang13.Bool( height ) ) {
				return true;
			}

			if ( mover is Ent_Dynamic && ((Ent_Static)mover).checkpass( 2 ) != 0 ) {
				return true;
			}

			if ( Map13.GetDistance( this.loc, target ) == this.dir ) {
				return !this.density;
			}
			return true;
		}

		// Function from file: barricade.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Weapon_Crowbar && b.a_intent == "hurt" && !this.busy ) {
				GlobalFuncs.playsound( this.loc, "sound/items/Crowbar.ogg", 75, 1 );
				((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " starts struggling to pry " ).the( this ).item().str( " back into planks.</span>" ).ToString(), new Txt( "<span class='notice'>You start struggling to pry " ).the( this ).item().str( " back into planks.</span>" ).ToString() );
				this.busy = true;

				if ( GlobalFuncs.do_after( b, this, 50 ) ) {
					GlobalFuncs.playsound( this.loc, "sound/items/Deconstruct.ogg", 75, 1 );
					((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " finishes turning " ).the( this ).item().str( " back into planks.</span>" ).ToString(), new Txt( "<span class='notice'>You finish turning " ).the( this ).item().str( " back into planks.</span>" ).ToString() );
					this.busy = false;
					GlobalFuncs.qdel( this );
					return null;
				} else {
					this.busy = false;
				}
			}

			if ( a.damtype == "brute" || a.damtype == "fire" ) {
				((Mob)b).delayNextAttack( 10 );
				this.health -= Convert.ToDouble( a.force );
				((Ent_Static)b).visible_message( new Txt( "<span class='warning'>" ).The( b ).item().str( " hits " ).the( this ).item().str( " with " ).the( a ).item().str( ".</span>" ).ToString(), new Txt( "<span class='warning'>You hit " ).the( this ).item().str( " with " ).the( a ).item().str( ".</span>" ).ToString() );
				this.healthcheck( b );
				return null;
			} else {
				base.attackby( (object)(a), (object)(b), (object)(c) );
			}
			return null;
		}

		// Function from file: barricade.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( Task13.User.a_intent == "hurt" ) {
				((Mob)a).delayNextAttack( 10 );
				this.health -= 2;
				this.healthcheck();
				((Ent_Static)a).visible_message( new Txt( "<span class='warning'>" ).item( a ).str( " bangs against " ).the( this ).item().str( "!</span>" ).ToString(), new Txt( "<span class='warning'>You bang against " ).the( this ).item().str( "!</span>" ).ToString(), "You hear banging." );
			} else {
				((Mob)a).delayNextAttack( 10 );
				((Ent_Static)a).visible_message( new Txt( "<span class='notice'>" ).item( a ).str( " knocks on " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You knock on " ).the( this ).item().str( ".</span>" ).ToString(), "You hear knocking." );
			}
			base.attack_hand( (object)(a), (object)(b), (object)(c) );
			return null;
		}

		// Function from file: barricade.dm
		public override void healthcheck( dynamic M = null, bool? sound = null ) {
			sound = sound ?? true;

			
			if ( this.health <= 0 ) {
				this.Destroy();
			}
			return;
		}

		// Function from file: barricade.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.health >= Convert.ToDouble( Lang13.Initial( this, "health" ) ) ) {
				GlobalFuncs.to_chat( user, "It's in perfect shape, not even a scratch." );
			} else if ( this.health >= Convert.ToDouble( Lang13.Initial( this, "health" ) * 0.8 ) ) {
				GlobalFuncs.to_chat( user, "It has a few splinters and a plank is broken." );
			} else if ( this.health >= Convert.ToDouble( Lang13.Initial( this, "health" ) * 0.5 ) ) {
				GlobalFuncs.to_chat( user, "It has a fair amount of splinters and broken plants." );
			} else if ( this.health >= Convert.ToDouble( Lang13.Initial( this, "health" ) * 0.2 ) ) {
				GlobalFuncs.to_chat( user, "It has most of its planks broken, you can barely tell how much weight the support beams are bearing." );
			} else {
				GlobalFuncs.to_chat( user, "It has only one or two planks still in shape, it's a miracle it's even standing." );
			}
			return null;
		}

	}

}