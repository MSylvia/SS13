// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Mecha_Combat_Marauder : Obj_Mecha_Combat {

		public bool zoom = false;
		public bool thrusters = false;
		public int smoke = 5;
		public bool smoke_ready = true;
		public int smoke_cooldown = 100;
		public Effect_Effect_System_SmokeSpread smoke_system = new Effect_Effect_System_SmokeSpread();

		protected override void __FieldInit() {
			base.__FieldInit();

			this.infra_luminosity = 3;
			this.initial_icon = "marauder";
			this.step_in = 5;
			this.health = 500;
			this.deflect_chance = 25;
			this.damage_absorption = new ByTable().Set( "brute", 0.5 ).Set( "fire", 061 ).Set( "bullet", 0.41 ).Set( "laser", 0.6 ).Set( "energy", 061 ).Set( "bomb", 061 );
			this.max_temperature = 60000;
			this.operation_req_access = new ByTable(new object [] { 103 });
			this.wreckage = typeof(Obj_Effect_Decal_MechaWreckage_Marauder);
			this.add_req_access = false;
			this.internal_damage_threshold = 25;
			this.force = 45;
			this.max_equip = 4;
			this.icon_state = "marauder";
		}

		// Function from file: marauder.dm
		public Obj_Mecha_Combat_Marauder ( dynamic loc = null ) : base( (object)(loc) ) {
			Obj_Item_MechaParts_MechaEquipment ME = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			ME = new Obj_Item_MechaParts_MechaEquipment_Weapon_Energy_Pulse();
			ME.attach( this );
			ME = new Obj_Item_MechaParts_MechaEquipment_Weapon_Ballistic_MissileRack();
			ME.attach( this );
			ME = new Obj_Item_MechaParts_MechaEquipment_TeslaEnergyRelay( this );
			ME.attach( this );
			ME = new Obj_Item_MechaParts_MechaEquipment_AntiprojArmorBooster( this );
			ME.attach( this );
			this.smoke_system.set_up( 3, 0, this );
			this.smoke_system.attach( this );
			return;
		}

		// Function from file: marauder.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			base.Topic( href, href_list, (object)(hclient) );

			if ( Lang13.Bool( href_list["toggle_thrusters"] ) ) {
				this.__CallVerb("Toggle thrusters" );
			}

			if ( Lang13.Bool( href_list["smoke"] ) ) {
				this.__CallVerb("Smoke" );
			}

			if ( Lang13.Bool( href_list["toggle_zoom"] ) ) {
				this.__CallVerb("Zoom" );
			}
			return null;
		}

		// Function from file: marauder.dm
		public override string get_commands(  ) {
			string output = null;

			output = new Txt( "<div class='wr'>\n						<div class='header'>Special</div>\n						<div class='links'>\n						<a href='?src=" ).Ref( this ).str( ";toggle_thrusters=1'>Toggle thrusters</a><br>\n						<a href='?src=" ).Ref( this ).str( ";toggle_zoom=1'>Toggle zoom mode</a><br>\n						<a href='?src=" ).Ref( this ).str( ";smoke=1'>Smoke</a>\n						</div>\n						</div>\n						" ).ToString();
			output += base.get_commands();
			return output;
		}

		// Function from file: marauder.dm
		public override string get_stats_part(  ) {
			string output = null;

			output = base.get_stats_part();
			output += "<b>Smoke:</b> " + this.smoke + "\n					<br>\n					<b>Thrusters:</b> " + ( this.thrusters ? "on" : "off" ) + "\n					";
			return output;
		}

		// Function from file: marauder.dm
		public override void go_out( Ent_Static exit = null ) {
			
			if ( this.occupant != null && Lang13.Bool( ((dynamic)this.occupant).client ) ) {
				((dynamic)this.occupant).client.view = Convert.ToInt32( Game13.view );
				this.zoom = false;
			}
			base.go_out( exit );
			return;
		}

		// Function from file: marauder.dm
		public override dynamic relaymove( Mob M = null, double? direction = null ) {
			dynamic tmp_step_in = null;
			dynamic tmp_step_energy_drain = null;
			bool move_result = false;

			
			if ( M != this.occupant ) {
				M.loc = GlobalFuncs.get_turf( this );
				GlobalFuncs.to_chat( M, "You climb out from " + this );
				return 0;
			}

			if ( !this.can_move ) {
				return 0;
			}

			if ( this.zoom ) {
				
				if ( Game13.time - this.last_message > 20 ) {
					this.occupant_message( "Unable to move while in zoom mode." );
					this.last_message = Game13.time;
				}
				return 0;
			}

			if ( Lang13.Bool( this.connected_port ) ) {
				
				if ( Game13.time - this.last_message > 20 ) {
					this.occupant_message( "Unable to move while connected to the air system port" );
					this.last_message = Game13.time;
				}
				return 0;
			}

			if ( !this.thrusters && this.pr_inertial_movement.active() ) {
				return 0;
			}

			if ( this.state != 0 || !this.has_charge( this.step_energy_drain ) ) {
				return 0;
			}
			tmp_step_in = this.step_in;
			tmp_step_energy_drain = this.step_energy_drain;
			move_result = false;

			if ( ( this.internal_damage & 16 ) != 0 ) {
				move_result = Lang13.Bool( this.mechsteprand() );
			} else if ( this.dir != direction ) {
				move_result = this.mechturn( direction );
			} else {
				move_result = Lang13.Bool( this.mechstep( direction ) );
			}

			if ( move_result ) {
				
				if ( this.loc is Tile_Space ) {
					
					if ( !this.check_for_support() ) {
						this.pr_inertial_movement.start( new ByTable(new object [] { this, direction }) );

						if ( this.thrusters ) {
							this.pr_inertial_movement.set_process_args( new ByTable(new object [] { this, direction }) );
							tmp_step_energy_drain = this.step_energy_drain * 2;
						}
					}
				}
				this.can_move = false;
				Task13.Schedule( Convert.ToInt32( tmp_step_in ), (Task13.Closure)(() => {
					this.can_move = true;
					return;
				}));
				this.use_power( tmp_step_energy_drain );
				return 1;
			}
			return 0;
		}

		// Function from file: marauder.dm
		[Verb]
		[VerbInfo( name: "Zoom", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void f_zoom(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}

			if ( Lang13.Bool( ((dynamic)this.occupant).client ) ) {
				this.zoom = !this.zoom;
				this.log_message( "Toggled zoom mode." );
				this.occupant_message( "<font color='" + ( this.zoom ? "blue" : "red" ) + "'>Zoom mode " + ( this.zoom ? "en" : "dis" ) + "abled.</font>" );

				if ( this.zoom ) {
					((dynamic)this.occupant).client.view = 12;
					GlobalFuncs.to_chat( this.occupant, new Sound( "sound/mecha/imag_enh.ogg", null, null, null, 50 ) );
				} else {
					((dynamic)this.occupant).client.view = Convert.ToInt32( Game13.view );
				}
			}
			return;
		}

		// Function from file: marauder.dm
		[Verb]
		[VerbInfo( name: "Smoke", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void f_smoke(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}

			if ( this.smoke_ready && this.smoke > 0 ) {
				this.smoke_system.start();
				this.smoke--;
				this.smoke_ready = false;
				Task13.Schedule( this.smoke_cooldown, (Task13.Closure)(() => {
					this.smoke_ready = true;
					return;
				}));
			}
			return;
		}

		// Function from file: marauder.dm
		[Verb]
		[VerbInfo( name: "Toggle thrusters", group: "Exosuit Interface", access: VerbAccess.InUserLocation )]
		public void toggle_thrusters(  ) {
			
			if ( Task13.User != this.occupant ) {
				return;
			}

			if ( this.occupant != null ) {
				
				if ( Convert.ToDouble( this.get_charge() ) > 0 ) {
					this.thrusters = !this.thrusters;
					this.log_message( "Toggled thrusters." );
					this.occupant_message( "<font color='" + ( this.thrusters ? "blue" : "red" ) + "'>Thrusters " + ( this.thrusters ? "en" : "dis" ) + "abled." );
				}
			}
			return;
		}

	}

}