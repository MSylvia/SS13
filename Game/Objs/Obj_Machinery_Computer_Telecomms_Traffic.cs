// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Telecomms_Traffic : Obj_Machinery_Computer_Telecomms {

		public bool screen = false;
		public ByTable servers = new ByTable();
		public dynamic editingcode = null;
		public Mob lasteditor = null;
		public ByTable viewingcode = new ByTable();
		public Obj_Machinery_Telecomms SelectedServer = null;
		public dynamic network = "NULL";
		public string temp = "";
		public string storedcode = "";
		public dynamic auth = null;
		public ByTable access_log = new ByTable();
		public bool v_process = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.circuit = "/obj/item/weapon/circuitboard/comm_traffic";
			this.req_access = new ByTable(new object [] { 61 });
			this.icon_state = "computer_generic";
		}

		public Obj_Machinery_Computer_Telecomms_Traffic ( dynamic loc = null ) : base( (object)(loc) ) {
			
		}

		// Function from file: traffic_control.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

		// Function from file: traffic_control.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			Mob C = null;
			dynamic I = null;
			Obj_Machinery_Telecomms T = null;
			Obj_Machinery_Telecomms_Server T2 = null;
			string showcode = null;
			string showcode2 = null;
			dynamic newnet = null;

			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}
			this.add_fingerprint( Task13.User );
			Task13.User.set_machine( this );

			if ( Lang13.Bool( href_list["auth"] ) ) {
				
				if ( Task13.User is Mob_Living_Carbon ) {
					C = Task13.User;

					if ( !Lang13.Bool( this.auth ) ) {
						I = C.get_active_hand();

						if ( I is Obj_Item_Weapon_Card_Id ) {
							
							if ( this.check_access( I ) ) {
								
								if ( C.drop_item( I, this ) ) {
									this.auth = I;
									this.create_log( "has logged in.", Task13.User );
								}
							}
						}
					} else {
						this.create_log( "has logged out.", Task13.User );
						this.auth.loc = this.loc;
						C.put_in_hands( this.auth );
						this.auth = null;
					}
					this.updateUsrDialog();
					return null;
				}
			}

			if ( Lang13.Bool( href_list["print"] ) ) {
				Interface13.Browse( Task13.User, this.print_logs(), "window=traffic_logs" );
				return null;
			}

			if ( !Lang13.Bool( this.auth ) && !( Task13.User is Mob_Living_Silicon ) && !( this.emagged != 0 ) ) {
				GlobalFuncs.to_chat( Task13.User, "<span class='warning'>ACCESS DENIED.</span>" );
				return null;
			}

			if ( Lang13.Bool( href_list["viewserver"] ) ) {
				this.screen = true;

				foreach (dynamic _a in Lang13.Enumerate( this.servers, typeof(Obj_Machinery_Telecomms) )) {
					T = _a;
					

					if ( T.id == href_list["viewserver"] ) {
						this.SelectedServer = T;
						this.create_log( "selected server " + T.name, Task13.User );
						break;
					}
				}
			}

			if ( Lang13.Bool( href_list["operation"] ) ) {
				this.create_log( "has performed action: " + href_list["operation"] + ".", Task13.User );

				dynamic _c = href_list["operation"]; // Was a switch-case, sorry for the mess.
				if ( _c=="release" ) {
					this.servers = new ByTable();
					this.screen = false;
				} else if ( _c=="mainmenu" ) {
					this.screen = false;
				} else if ( _c=="scan" ) {
					
					if ( this.servers.len > 0 ) {
						this.temp = "<font color = #D70B00>- FAILED: CANNOT PROBE WHEN BUFFER FULL -</font color>";
					} else {
						
						foreach (dynamic _b in Lang13.Enumerate( Map13.FetchInRange( this, 25 ), typeof(Obj_Machinery_Telecomms_Server) )) {
							T2 = _b;
							

							if ( T2.network == this.network ) {
								this.servers.Add( T2 );
							}
						}

						if ( !( this.servers.len != 0 ) ) {
							this.temp = "<font color = #D70B00>- FAILED: UNABLE TO LOCATE SERVERS IN [" + this.network + "] -</font color>";
						} else {
							this.temp = "<font color = #336699>- " + this.servers.len + " SERVERS PROBED & BUFFERED -</font color>";
						}
						this.screen = false;
					}
				} else if ( _c=="editcode" ) {
					
					if ( this.editingcode == Task13.User ) {
						return null;
					}

					if ( this.viewingcode.Contains( Task13.User ) ) {
						return null;
					}

					if ( !Lang13.Bool( this.editingcode ) ) {
						this.lasteditor = Task13.User;
						this.editingcode = Task13.User;
						Interface13.WindowShow( this.editingcode, "Telecomms IDE", 1 );
						Interface13.WindowSet( this.editingcode, "tcscode", "is-disabled=false" );
						Interface13.WindowSet( this.editingcode, "tcscode", "text=\"\"" );
						showcode = GlobalFuncs.replacetext( this.storedcode, "\\\"", "\\\\\"" );
						showcode = GlobalFuncs.replacetext( this.storedcode, "\"", "\\\"" );
						Interface13.WindowSet( this.editingcode, "tcscode", "text=\"" + showcode + "\"" );
					} else {
						this.viewingcode.Add( Task13.User );
						Interface13.WindowShow( Task13.User, "Telecomms IDE", 1 );
						Interface13.WindowSet( Task13.User, "tcscode", "is-disabled=true" );
						Interface13.WindowSet( this.editingcode, "tcscode", "text=\"\"" );
						showcode2 = GlobalFuncs.replacetext( this.storedcode, "\"", "\\\"" );
						Interface13.WindowSet( Task13.User, "tcscode", "text=\"" + showcode2 + "\"" );
					}
				} else if ( _c=="togglerun" ) {
					((dynamic)this.SelectedServer).autoruncode = !Lang13.Bool( ((dynamic)this.SelectedServer).autoruncode );
				}
			}

			if ( Lang13.Bool( href_list["network"] ) ) {
				newnet = Interface13.Input( Task13.User, "Which network do you want to view?", "Comm Monitor", this.network, null, InputType.Str | InputType.Null );

				if ( Lang13.Bool( newnet ) && this.canAccess( Task13.User ) ) {
					
					if ( Lang13.Length( newnet ) > 15 ) {
						this.temp = "<font color = #D70B00>- FAILED: NETWORK TAG STRING TOO LENGHTLY -</font color>";
					} else {
						this.network = newnet;
						this.screen = false;
						this.servers = new ByTable();
						this.temp = "<font color = #336699>- NEW NETWORK TAG SET IN ADDRESS [" + this.network + "] -</font color>";
						this.create_log( "has set the network to " + this.network + ".", Task13.User );
					}
				}
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: traffic_control.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			Obj_Machinery_Telecomms T = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}
			((Mob)a).set_machine( this );
			dat = "<TITLE>Telecommunication Traffic Control</TITLE><center><b>Telecommunications Traffic Control</b></center>";
			dat += new Txt( "<br><b><font color='" ).item( ( Lang13.Bool( this.auth ) ? "green" : "red" ) ).str( "'>" ).item( ( Lang13.Bool( this.auth ) ? "AUTHED" : "NOT AUTHED" ) ).str( ":</font></b> <A href='?src=" ).Ref( this ).str( ";auth=1'>" ).item( ( !Lang13.Bool( this.auth ) ? "Insert ID" : this.auth.registered_name ) ).str( "</A><BR>\n		<A href='?src=" ).Ref( this ).str( ";print=1'>View System Log</A><HR>" ).ToString();

			if ( a is Mob_Living_Silicon || Lang13.Bool( this.auth ) ) {
				
				switch ((bool)( this.screen )) {
					case false:
						dat += new Txt( "<br>" ).item( this.temp ).str( "<br>\n					<br>Current Network: <a href='?src=" ).Ref( this ).str( ";network=1'>" ).item( this.network ).str( "</a><br>" ).ToString();

						if ( this.servers.len != 0 ) {
							dat += "<br>Detected Telecommunication Servers:<ul>";

							foreach (dynamic _a in Lang13.Enumerate( this.servers, typeof(Obj_Machinery_Telecomms) )) {
								T = _a;
								
								dat += new Txt( "<li><a href='?src=" ).Ref( this ).str( ";viewserver=" ).item( T.id ).str( "'>" ).Ref( T ).str( " " ).item( T.name ).str( "</a> (" ).item( T.id ).str( ")</li>" ).ToString();
							}
							dat += new Txt( "</ul>\n						<br><a href='?src=" ).Ref( this ).str( ";operation=release'>[Flush Buffer]</a>" ).ToString();
						} else {
							dat += new Txt( "<br>No servers detected. Scan for servers: <a href='?src=" ).Ref( this ).str( ";operation=scan'>[Scan]</a>" ).ToString();
						}
						break;
					case true:
						
						if ( this.SelectedServer != null ) {
							dat += new Txt( "<br>" ).item( this.temp ).str( "<br>\n						<center><a href='?src=" ).Ref( this ).str( ";operation=mainmenu'>[Main Menu]</a>     <a href='?src=" ).Ref( this ).str( ";operation=refresh'>[Refresh]</a></center>\n						<br>Current Network: " ).item( this.network ).str( "\n						<br>Selected Server: " ).item( this.SelectedServer.id ).str( "<br><br>\n						<br><a href='?src=" ).Ref( this ).str( ";operation=editcode'>[Edit Code]</a>\n						<br>Signal Execution: " ).ToString();

							if ( Lang13.Bool( ((dynamic)this.SelectedServer).autoruncode ) ) {
								dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=togglerun'>ALWAYS</a>" ).ToString();
							} else {
								dat += new Txt( "<a href='?src=" ).Ref( this ).str( ";operation=togglerun'>NEVER</a>" ).ToString();
							}
						} else {
							this.screen = false;
							return null;
						}
						break;
				}
			}
			Interface13.Browse( a, dat, "window=traffic_control;size=575x400" );
			GlobalFuncs.onclose( a, "server_control" );
			this.temp = "";
			return null;
		}

		// Function from file: traffic_control.dm
		public override dynamic process(  ) {
			string showcode = null;
			dynamic M = null;

			
			if ( ( this.stat & 3 ) != 0 ) {
				this.stop_editing();
				return null;
			}

			if ( Lang13.Bool( this.editingcode ) && this.editingcode.machine != this ) {
				this.stop_editing();
				return null;
			}

			if ( !Lang13.Bool( this.editingcode ) ) {
				
				if ( Lang13.Length( this.viewingcode ) > 0 ) {
					this.editingcode = Rand13.PickFromTable( this.viewingcode );
					this.viewingcode.Remove( this.editingcode );
				}
				return null;
			}
			this.v_process = !this.v_process;

			if ( !this.v_process ) {
				return null;
			}

			if ( !Lang13.Bool( this.editingcode.client ) ) {
				this.stop_editing();
				return null;
			}

			if ( !( this.editingcode is Mob ) ) {
				return null;
			}
			this.storedcode = "" + Interface13.WindowGet( this.editingcode, "tcscode", "text" );
			Interface13.WindowSet( this.editingcode, "tcscode", "is-disabled=false" );

			if ( !GlobalFuncs.in_range( this, this.editingcode ) && !( this.editingcode is Mob_Living_Silicon ) || this.editingcode.machine != this ) {
				Interface13.WindowShow( this.editingcode, "Telecomms IDE", 0 );
				this.editingcode = null;
				return null;
			}

			if ( Lang13.Length( this.viewingcode ) != 0 ) {
				showcode = GlobalFuncs.replacetext( this.storedcode, "\\\"", "\\\\\"" );
				showcode = GlobalFuncs.replacetext( this.storedcode, "\"", "\\\"" );

				foreach (dynamic _a in Lang13.Enumerate( this.viewingcode )) {
					M = _a;
					

					if ( M.machine == this && GlobalFuncs.in_range( this, M ) || M is Mob_Living_Silicon ) {
						Interface13.WindowSet( M, "tcscode", "is-disabled=true" );
						Interface13.WindowSet( M, "tcscode", "text=\"" + showcode + "\"" );
					} else {
						this.viewingcode.Remove( M );
						Interface13.WindowShow( M, "Telecomms IDE", 0 );
					}
				}
			}
			return null;
		}

		// Function from file: traffic_control.dm
		public bool canAccess( Mob user = null ) {
			
			if ( user is Mob_Living_Silicon || GlobalFuncs.in_range( this, user ) ) {
				return true;
			}
			return false;
		}

		// Function from file: traffic_control.dm
		public string print_logs(  ) {
			string _default = null;

			dynamic entry = null;

			_default = "<center><h2>Traffic Control Telecomms System Log</h2></center><HR>";

			foreach (dynamic _a in Lang13.Enumerate( this.access_log )) {
				entry = _a;
				
				_default += entry + "<BR>";
			}
			return _default;
		}

		// Function from file: traffic_control.dm
		public void create_log( string entry = null, Mob user = null ) {
			string id = null;

			id = null;

			if ( user is Mob_Living_Silicon ) {
				id = "System Administrator";
			} else if ( Lang13.Bool( this.auth ) ) {
				id = "" + this.auth.registered_name + " (" + this.auth.assignment + ")";
			} else {
				GlobalFuncs.error( "There is a null auth while the user isn't a silicon! (" + user.name + ", " + user.type + ")" );
				return;
			}
			this.access_log.Add( "[" + GlobalFuncs.get_timestamp() + "] " + id + " " + entry );
			return;
		}

		// Function from file: traffic_control.dm
		public void stop_editing(  ) {
			
			if ( Lang13.Bool( this.editingcode ) ) {
				
				if ( Lang13.Bool( this.editingcode.client ) ) {
					Interface13.WindowShow( this.editingcode, "Telecomms IDE", 0 );
				}
				((Mob)this.editingcode).unset_machine();
				this.editingcode = null;
			}
			return;
		}

	}

}