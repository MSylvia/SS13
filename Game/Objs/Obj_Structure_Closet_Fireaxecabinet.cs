// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Structure_Closet_Fireaxecabinet : Obj_Structure_Closet {

		public dynamic fireaxe = new Obj_Item_Weapon_Fireaxe();
		public bool localopened = false;
		public int hitstaken = 0;
		public bool smashed = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.icon_closed = "fireaxe1000";
			this.icon_opened = "fireaxe1100";
			this.anchored = 1;
			this.opened = true;
			this.locked = true;
			this.icon_state = "fireaxe1000";
			this.layer = 2.1;
		}

		// Function from file: fireaxe.dm
		public Obj_Structure_Closet_Fireaxecabinet ( dynamic loc = null, int ndir = 0 ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( ndir != 0 ) {
				this.pixel_x = ( ( ndir & 3 ) != 0 ? 0 : ( ndir == 4 ? 32 : -32 ) );
				this.pixel_y = ( ( ndir & 3 ) != 0 ? ( ndir == 1 ? 32 : -32 ) : 0 );
				this.dir = ndir;
			}
			this.update_icon();
			return;
		}

		// Function from file: fireaxe.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			
			if ( Lang13.Bool( this.fireaxe ) ) {
				this.visible_message( new Txt( "<span class='notice'>The fireaxe noisily ricochets off the ground as it slides out of " ).the( this ).item().str( ".</span>" ).ToString() );
				this.fireaxe.loc = GlobalFuncs.get_turf( this );
			}
			base.Destroy( (object)(brokenup) );
			return null;
		}

		// Function from file: fireaxe.dm
		public override bool close(  ) {
			return false;
		}

		// Function from file: fireaxe.dm
		public override bool open(  ) {
			return false;
		}

		// Function from file: fireaxe.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			bool hasaxe = false;

			hasaxe = false;

			if ( Lang13.Bool( this.fireaxe ) ) {
				hasaxe = true;
			}
			this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed;
			return null;
		}

		// Function from file: fireaxe.dm
		public override dynamic attack_ai( dynamic user = null ) {
			
			if ( user is Mob_Dead_Observer ) {
				return null;
			}

			if ( this.smashed ) {
				GlobalFuncs.to_chat( user, new Txt( "<span class='warning'>" ).The( this ).item().str( "'s security protocols have locked down its electronic systems. Might have to do with the smashed glass.</span>" ).ToString() );
				return null;
			} else {
				this.locked = !this.locked;

				if ( this.locked ) {
					this.visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " locks " ).the( this ).item().str( "</span>" ).ToString(), "<span class='notice'>You lock " + this + "</span>" );
				} else {
					this.visible_message( new Txt( "<span class='notice'>" ).item( user ).str( " unlocks " ).the( this ).item().str( "</span>" ).ToString(), "<span class='notice'>You unlock " + this + "</span>" );
				}
				return null;
			}
		}

		// Function from file: fireaxe.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			this.attack_hand( a );
			return null;
		}

		// Function from file: fireaxe.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			bool hasaxe = false;

			hasaxe = false;

			if ( Lang13.Bool( this.fireaxe ) ) {
				hasaxe = true;
			}

			if ( this.locked ) {
				GlobalFuncs.to_chat( a, "<span class='warning'>" + this + " is locked tight!</span>" );
				return null;
			}

			if ( this.localopened ) {
				
				if ( Lang13.Bool( this.fireaxe ) ) {
					((Mob)a).put_in_hands( this.fireaxe );
					this.visible_message( "<span class='notice'>" + a + " takes " + this.fireaxe + " from " + this + ".</span>", "<span class='notice'>You take " + this.fireaxe + " from " + this + ".</span>" );
					this.fireaxe = null;
					this.add_fingerprint( a );
					this.update_icon();
				} else if ( this.smashed ) {
					return null;
				} else {
					this.localopened = !this.localopened;

					if ( this.localopened ) {
						this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "opening";
						Task13.Schedule( 10, (Task13.Closure)(() => {
							this.update_icon();
							return;
						}));
					} else {
						this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "closing";
						Task13.Schedule( 10, (Task13.Closure)(() => {
							this.update_icon();
							return;
						}));
					}
				}
			} else {
				this.localopened = !this.localopened;

				if ( this.localopened ) {
					this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "opening";
					Task13.Schedule( 10, (Task13.Closure)(() => {
						this.update_icon();
						return;
					}));
				} else {
					this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "closing";
					Task13.Schedule( 10, (Task13.Closure)(() => {
						this.update_icon();
						return;
					}));
				}
			}
			return null;
		}

		// Function from file: fireaxe.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			bool hasaxe = false;
			dynamic W = null;
			dynamic F = null;

			((Mob)b).delayNextAttack( 10 );
			hasaxe = false;

			if ( Lang13.Bool( this.fireaxe ) ) {
				hasaxe = true;
			}

			if ( Task13.User is Mob_Living_Silicon_Robot || this.locked ) {
				
				if ( a is Obj_Item_Device_Multitool ) {
					this.visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " starts fiddling with " ).the( this ).item().str( "'s locking module</span>" ).ToString(), new Txt( "<span class='notice'>You start disabling " ).the( this ).item().str( "'s locking module</span>" ).ToString() );
					GlobalFuncs.playsound( b, "sound/machines/lockreset.ogg", 50, 1 );

					if ( GlobalFuncs.do_after( b, this, 50 ) ) {
						this.locked = false;
						this.visible_message( new Txt( "<span class='notice'>" ).item( b ).str( " disables " ).the( this ).item().str( "'s locking module.</span>" ).ToString(), new Txt( "<span class='notice'>You disable " ).the( this ).item().str( "'s locking module.</span>" ).ToString() );
						this.update_icon();
					}
				}

				if ( a is Obj_Item_Weapon ) {
					W = a;

					if ( this.smashed || this.localopened ) {
						
						if ( this.localopened ) {
							this.localopened = false;
							this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "closing";
							Task13.Schedule( 10, (Task13.Closure)(() => {
								this.update_icon();
								return;
							}));
						}
						return null;
					} else {
						
						if ( Convert.ToDouble( W.force ) < 15 ) {
							GlobalFuncs.playsound( b, "sound/effects/Glasshit.ogg", 100, 1 );
							this.visible_message( new Txt( "<span class='notice'>" ).The( this ).item().str( "'s protective glass glances off " ).item( b ).str( "'s hit with " ).the( a ).item().str( "." ).ToString() );
						} else {
							this.hitstaken++;

							if ( this.hitstaken == 4 ) {
								GlobalFuncs.playsound( b, "sound/effects/Glassbr3.ogg", 100, 1 );
								this.visible_message( new Txt( "<span class='warning'>" ).The( this ).item().str( "'s protective glass shatters, exposing its content." ).ToString() );
								this.smashed = true;
								this.locked = false;
								this.localopened = true;
							} else {
								this.visible_message( new Txt( "<span class='warning'>" ).item( b ).str( " damages " ).the( this ).item().str( "'s protective glass with " ).the( a ).item().str( "." ).ToString() );
								GlobalFuncs.playsound( b, "sound/effects/Glasshit.ogg", 100, 1 );
							}
						}
						this.update_icon();
					}
				}
				return null;
			}

			if ( a is Obj_Item_Weapon_Fireaxe && this.localopened ) {
				
				if ( !Lang13.Bool( this.fireaxe ) ) {
					F = a;

					if ( Lang13.Bool( F.wielded ) ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>Unwield " + F + " first!</span>" );
						return null;
					}
					new ByTable().Set( 1, F ).Set( 2, this ).Set( "force_drop", 1 ).Apply( Lang13.BindFunc( b, "drop_item" ) );
					this.fireaxe = a;
					this.visible_message( "<span class='notice'>" + b + " places " + F + " back into " + this + ".</span>", "<span class='notice'>You place " + F + " back into " + this + ".</span>" );
					this.update_icon();
				} else {
					
					if ( this.smashed ) {
						GlobalFuncs.to_chat( b, "<span class='warning'>" + this + "'s protective glass is broken. Cutting hazard right there!</span>" );
						return null;
					}

					if ( a is Obj_Item_Device_Multitool ) {
						
						if ( this.localopened ) {
							this.localopened = false;
							this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "closing";
							Task13.Schedule( 10, (Task13.Closure)(() => {
								this.update_icon();
								return;
							}));
							return null;
						} else {
							this.visible_message( "<span class='notice'>" + b + " starts to fiddle with " + this + "'s locking module</span>", "<span class='notice'>You start to re-enable " + this + "'s locking module</span>" );

							if ( GlobalFuncs.do_after( b, this, 50 ) ) {
								this.locked = true;
								this.visible_message( "<span class='notice'>" + b + " re-enables " + this + "'s locking module.</span>", "<span class='notice'>You re-enable " + this + "'s locking module.</span>" );
								GlobalFuncs.playsound( b, "sound/machines/lockenable.ogg", 50, 1 );
								this.update_icon();
							}
						}
					} else {
						this.localopened = !this.localopened;

						if ( this.localopened ) {
							this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "opening";
							Task13.Schedule( 10, (Task13.Closure)(() => {
								this.update_icon();
								return;
							}));
						} else {
							this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "closing";
							Task13.Schedule( 10, (Task13.Closure)(() => {
								this.update_icon();
								return;
							}));
						}
					}
				}
			} else {
				
				if ( a is Obj_Item_Weapon_Wrench && this.localopened && !Lang13.Bool( this.fireaxe ) ) {
					GlobalFuncs.to_chat( b, new Txt( "<span class='notice'>You disassemble " ).the( this ).item().str( ".</span>" ).ToString() );
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Ratchet.ogg", 100, 1 );
					new Obj_Item_Stack_Sheet_Plasteel( this.loc, 2 );
					GlobalFuncs.qdel( this );
				}

				if ( this.smashed ) {
					return null;
				} else {
					this.localopened = !this.localopened;

					if ( this.localopened ) {
						this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "opening";
						Task13.Schedule( 10, (Task13.Closure)(() => {
							this.update_icon();
							return;
						}));
					} else {
						this.icon_state = "fireaxe" + hasaxe + this.localopened + this.hitstaken + this.smashed + "closing";
						Task13.Schedule( 10, (Task13.Closure)(() => {
							this.update_icon();
							return;
						}));
					}
				}
			}
			return null;
		}

		// Function from file: fireaxe.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			if ( this.smashed ) {
				GlobalFuncs.to_chat( user, "The protective glass shield has been damaged beyond repair" );
			} else if ( this.hitstaken != 0 ) {
				GlobalFuncs.to_chat( user, "You count " + this.hitstaken + " impacts on the protective glass shield" );
			} else {
				GlobalFuncs.to_chat( user, "The protective glass shield appears intact" );
			}

			if ( !Lang13.Bool( this.fireaxe ) ) {
				GlobalFuncs.to_chat( user, "The fireaxe is gone from the cabinet" );
			} else {
				GlobalFuncs.to_chat( user, "The fireaxe is still in the cabinet " + ( this.localopened ? "and up for grabs" : "behind the protective glass" ) );
			}
			GlobalFuncs.to_chat( user, "A small " + ( this.locked ? "red" : "green" ) + " light indicates the cabinet is " + ( this.locked ? "" : "un" ) + "locked" );
			return null;
		}

		// Function from file: fireaxe.dm
		[Verb]
		[VerbInfo( name: "Remove Fire Axe", group: "Object" )]
		public void remove_fire_axe(  ) {
			
			if ( Task13.User is Mob_Living_Silicon_Robot ) {
				return;
			}

			if ( this.localopened ) {
				
				if ( Lang13.Bool( this.fireaxe ) ) {
					Task13.User.put_in_hands( this.fireaxe );
					this.visible_message( new Txt( "<span class='notice'>" ).item( Task13.User ).str( " takes " ).item( this.fireaxe ).str( " from " ).the( this ).item().str( ".</span>" ).ToString(), new Txt( "<span class='notice'>You take " ).item( this.fireaxe ).str( " from " ).the( this ).item().str( ".</span>" ).ToString() );
					this.fireaxe = null;
				} else {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " is empty.</span>" ).ToString() );
				}
			} else {
				GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( " is closed.</span>" ).ToString() );
			}
			this.update_icon();
			return;
		}

		// Function from file: fireaxe.dm
		[Verb]
		[VerbInfo( name: "Open/Close", group: "Object" )]
		public void toggle_openness(  ) {
			
			if ( Task13.User is Mob_Living_Silicon_Robot || this.locked || this.smashed ) {
				
				if ( this.locked ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='warning'>" ).The( this ).item().str( " is locked tight!</span>" ).ToString() );
				} else if ( this.smashed ) {
					GlobalFuncs.to_chat( Task13.User, new Txt( "<span class='notice'>" ).The( this ).item().str( "'s protective glass is broken!</span>" ).ToString() );
				}
				return;
			}
			this.localopened = !this.localopened;
			this.update_icon();
			return;
		}

	}

}