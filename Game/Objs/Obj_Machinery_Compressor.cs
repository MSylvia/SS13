// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Compressor : Obj_Machinery {

		public dynamic turbine = null;
		public GasMixture gas_contained = null;
		public Tile inturf = null;
		public bool starter = false;
		public double rpm = 0;
		public double rpmtarget = 0;
		public int capacity = 1000000;
		public bool comp_id = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.icon = "icons/obj/pipes.dmi";
			this.icon_state = "compressor";
		}

		// Function from file: turbine.dm
		public Obj_Machinery_Compressor ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.gas_contained = new GasMixture();
			this.inturf = Map13.GetStep( this, this.dir );
			Task13.Schedule( 5, (Task13.Closure)(() => {
				this.turbine = Lang13.FindIn( typeof(Obj_Machinery_Power_Turbine), Map13.GetStep( this, Map13.GetDistance( this.inturf, this ) ) );

				if ( !Lang13.Bool( this.turbine ) ) {
					this.stat |= 1;
				}
				return;
			}));
			return;
		}

		// Function from file: turbine.dm
		public override dynamic process(  ) {
			GasMixture environment = null;
			dynamic transfer_moles = null;
			dynamic removed = null;

			
			if ( !this.starter ) {
				return null;
			}
			this.overlays.len = 0;

			if ( ( this.stat & 1 ) != 0 ) {
				return null;
			}

			if ( !Lang13.Bool( this.turbine ) ) {
				this.stat |= 1;
				return null;
			}
			this.rpm = this.rpm * 081 + this.rpmtarget * 0.1;
			environment = this.inturf.return_air();
			transfer_moles = environment.f_total_moles() / 10;
			removed = this.inturf.remove_air( transfer_moles );
			this.gas_contained.merge( removed );
			this.rpm = Num13.MaxInt( 0, ((int)( this.rpm - this.rpm * this.rpm / 500000 )) );

			if ( this.starter && !( ( this.stat & 2 ) != 0 ) ) {
				this.f_use_power( 2800 );

				if ( this.rpm < 1000 ) {
					this.rpmtarget = 1000;
				}
			} else if ( this.rpm < 1000 ) {
				this.rpmtarget = 0;
			}

			if ( this.rpm > 50000 ) {
				this.overlays.Add( new Image( "icons/obj/pipes.dmi", "comp-o4", GlobalVars.FLY_LAYER ) );
			} else if ( this.rpm > 10000 ) {
				this.overlays.Add( new Image( "icons/obj/pipes.dmi", "comp-o3", GlobalVars.FLY_LAYER ) );
			} else if ( this.rpm > 2000 ) {
				this.overlays.Add( new Image( "icons/obj/pipes.dmi", "comp-o2", GlobalVars.FLY_LAYER ) );
			} else if ( this.rpm > 500 ) {
				this.overlays.Add( new Image( "icons/obj/pipes.dmi", "comp-o1", GlobalVars.FLY_LAYER ) );
			}
			return null;
		}

	}

}