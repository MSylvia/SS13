// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Light : Obj_Machinery {

		public string base_state = "tube";
		public int cost = 8;
		public bool on = false;
		public bool on_gs = false;
		public int static_power_used = 0;
		public int brightness_range = 8;
		public bool brightness_power = true;
		public string brightness_color = null;
		public int status = 0;
		public bool flickering = false;
		public Type light_type = typeof(Obj_Item_Weapon_Light_Tube);
		public string fitting = "tube";
		public int switchcount = 0;
		public bool rigged = false;
		public bool idle = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.anchored = 1;
			this.use_power = 2;
			this.idle_power_usage = 2;
			this.active_power_usage = 20;
			this.power_channel = 2;
			this.ghost_read = false;
			this.icon = "icons/obj/lighting.dmi";
			this.icon_state = "ltube1";
			this.layer = 5;
		}

		// Function from file: lighting.dm
		public Obj_Machinery_Light ( dynamic loc = null ) : base( (object)(loc) ) {
			dynamic A = null;

			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			GlobalVars.alllights.Add( this );
			Task13.Schedule( 2, (Task13.Closure)(() => {
				A = GlobalFuncs.get_area( this );

				if ( Lang13.Bool( A ) && !A.requires_power ) {
					this.on = true;
				}

				switch ((string)( this.fitting )) {
					case "tube":
						
						if ( Rand13.PercentChance( 2 ) ) {
							this.broken( true );
						}
						break;
					case "bulb":
						
						if ( Rand13.PercentChance( 5 ) ) {
							this.broken( true );
						}
						break;
				}
				Task13.Schedule( 1, (Task13.Closure)(() => {
					this.update( false );
					return;
				}));
				return;
			}));
			return;
		}

		// Function from file: lighting.dm
		public override bool fire_act( GasMixture air = null, double? exposed_temperature = null, int exposed_volume = 0 ) {
			
			if ( Rand13.PercentChance( Num13.MaxInt( 0, ((int)( ( exposed_temperature ??0) - 673 )) ) ) ) {
				this.broken();
			}
			return false;
		}

		// Function from file: lighting.dm
		public override dynamic power_change(  ) {
			Task13.Schedule( 10, (Task13.Closure)(() => {
				this.seton( this.areaMaster.lightswitch && this.areaMaster.power_light );
				return;
			}));
			return null;
		}

		// Function from file: lighting.dm
		public override bool blob_act( dynamic severity = null ) {
			
			if ( Rand13.PercentChance( 75 ) ) {
				this.broken();
			}
			return false;
		}

		// Function from file: lighting.dm
		public override bool ex_act( double? severity = null, dynamic child = null ) {
			
			switch ((int?)( severity )) {
				case 1:
					GlobalFuncs.qdel( this );
					return false;
					break;
				case 2:
					
					if ( Rand13.PercentChance( 75 ) ) {
						this.broken();
					}
					break;
				case 3:
					
					if ( Rand13.PercentChance( 50 ) ) {
						this.broken();
					}
					break;
			}
			return false;
		}

		// Function from file: lighting.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			bool prot = false;
			dynamic H = null;
			dynamic G = null;
			dynamic L = null;

			
			if ( a is Mob_Dead_Observer ) {
				return null;
			}

			if ( !this.Adjacent( a ) ) {
				return null;
			}
			this.add_fingerprint( a );

			if ( this.status == 1 ) {
				GlobalFuncs.to_chat( a, "There is no " + this.fitting + " in this light." );
				return null;
			}

			if ( this.on ) {
				prot = false;

				if ( a is Mob_Living_Carbon_Human ) {
					H = a;

					if ( Lang13.Bool( H.gloves ) ) {
						G = H.gloves;

						if ( Lang13.Bool( G.max_heat_protection_temperature ) ) {
							prot = ( G.max_heat_protection_temperature ??0) > 360;
						}
					}
				} else {
					prot = true;
				}

				if ( ( prot ?1:0) > 0 || Lang13.Bool( a.mutations.Contains( 106 ) ) ) {
					GlobalFuncs.to_chat( a, "You remove the light " + this.fitting );
				} else {
					GlobalFuncs.to_chat( a, "You try to remove the light " + this.fitting + ", but it's too hot and you don't want to burn your hand." );
					return null;
				}
			}
			L = Lang13.Call( this.light_type );
			L.status = this.status;
			L.rigged = this.rigged;
			L.brightness_range = this.brightness_range;
			L.brightness_power = this.brightness_power;
			L.brightness_color = this.brightness_color;
			L.switchcount = this.switchcount;
			this.switchcount = 0;
			L.update();
			((Ent_Static)L).add_fingerprint( a );
			((Mob)a).put_in_active_hand( L );
			this.status = 1;
			this.update();
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic attack_animal( Mob_Living user = null ) {
			dynamic O = null;

			
			if ( Lang13.Bool( ((dynamic)user).melee_damage_upper ) == false ) {
				return null;
			}

			if ( this.status == 1 || this.status == 2 ) {
				GlobalFuncs.to_chat( user, "<span class='warning'>That object is useless to you.</span>" );
				return null;
			} else if ( this.status == 0 || this.status == 3 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					O = _a;
					
					O.show_message( "<span class='attack'>" + user.name + " smashed the light!</span>", 1, "You hear a tinkle of breaking glass", 2 );
				}
				this.broken();
			}
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic attack_alien( Mob user = null ) {
			dynamic M = null;

			
			if ( this.status == 1 || this.status == 2 ) {
				GlobalFuncs.to_chat( user, "<span class='good'>That object is useless to you.</span>" );
				return null;
			} else if ( this.status == 0 || this.status == 3 ) {
				
				foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
					M = _a;
					
					M.show_message( "<span class='attack'>" + user.name + " smashed the light!</span>", 1, "You hear a tinkle of breaking glass", 2 );
				}
				this.broken();
			}
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic attack_robot( Mob_Living_Silicon_Robot user = null ) {
			
			if ( user is Mob_Living_Silicon_Robot_Mommi ) {
				return this.attack_hand( user );
			} else {
				return this.attack_ai( user );
			}
		}

		// Function from file: lighting.dm
		public override dynamic attack_ai( dynamic user = null ) {
			
			if ( user is Mob_Living_Silicon_Robot_Mommi ) {
				return this.attack_hand( user );
			}
			this.add_hiddenprint( user );
			this.flicker( 1 );
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic attack_ghost( Mob_Dead_Observer user = null ) {
			
			if ( this.blessed ) {
				return null;
			}
			this.add_hiddenprint( user );
			this.flicker( 1 );
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			dynamic LR = null;
			dynamic U = null;
			dynamic L = null;
			dynamic M = null;
			Obj_Machinery_LightConstruct newlight = null;
			Effect_Effect_System_SparkSpread s = null;

			((Mob)b).delayNextAttack( 8 );

			if ( a is Obj_Item_Device_Lightreplacer ) {
				LR = a;

				if ( b is Mob_Living ) {
					U = b;
					((Obj_Item_Device_Lightreplacer)LR).ReplaceLight( this, U );
					return null;
				}
			}

			if ( a is Obj_Item_Weapon_Light ) {
				
				if ( this.status != 1 ) {
					GlobalFuncs.to_chat( b, "There is a " + this.fitting + " already inserted." );
					return null;
				} else {
					this.add_fingerprint( b );
					L = a;

					if ( L.fitting == this.fitting ) {
						
						if ( !Lang13.Bool( b.drop_item( L ) ) ) {
							b.WriteMsg( new Txt( "<span class='warning'>You can't let go of " ).the( L ).item().str( "!</span>" ).ToString() );
							return null;
						}
						this.status = Convert.ToInt32( L.status );
						GlobalFuncs.to_chat( b, new Txt( "You insert " ).the( L.name ).item().str( "." ).ToString() );
						this.switchcount = Convert.ToInt32( L.switchcount );
						this.rigged = Lang13.Bool( L.rigged );
						this.brightness_range = Convert.ToInt32( L.brightness_range );
						this.brightness_power = Lang13.Bool( L.brightness_power );
						this.brightness_color = L.brightness_color;
						this.cost = Convert.ToInt32( L.cost );
						this.base_state = L.base_state;
						this.light_type = L.type;
						this.on = this.has_power();
						this.update();
						GlobalFuncs.qdel( L );

						if ( this.on && this.rigged ) {
							GlobalFuncs.log_admin( "LOG: Rigged light explosion, last touched by " + this.fingerprintslast );
							GlobalFuncs.message_admins( "LOG: Rigged light explosion, last touched by " + this.fingerprintslast );
							this.explode();
						}
					} else {
						GlobalFuncs.to_chat( b, "This type of light requires a " + this.fitting + "." );
						return null;
					}
				}
			} else if ( this.status != 2 && this.status != 1 ) {
				
				if ( Rand13.PercentChance( Convert.ToInt32( a.force * 5 + 1 ) ) ) {
					GlobalFuncs.to_chat( b, "You hit the light, and it smashes!" );

					foreach (dynamic _a in Lang13.Enumerate( Map13.FetchViewers( null, this ) )) {
						M = _a;
						

						if ( M == b ) {
							continue;
						}
						M.show_message( "" + b.name + " smashed the light!", 1, "You hear a tinkle of breaking glass", 2 );
					}

					if ( this.on && ((Obj)a).is_conductor() ) {
						
						if ( Rand13.PercentChance( 12 ) ) {
							GlobalFuncs.electrocute_mob( b, GlobalFuncs.get_area( this ), this, 0.3 );
						}
					}
					this.broken();
				} else {
					GlobalFuncs.to_chat( b, "You hit the light!" );
				}
			} else if ( this.status == 1 ) {
				
				if ( a is Obj_Item_Weapon_Wirecutters ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/items/Wirecutter.ogg", 75, 1 );
					((Ent_Static)b).visible_message( new Txt().item( b.name ).str( " removes " ).the( this ).item().str( "'s wires." ).ToString(), new Txt( "You remove " ).the( this ).item().str( "'s wires." ).ToString(), "You hear a noise." );
					newlight = null;

					switch ((string)( this.fitting )) {
						case "tube":
							newlight = new Obj_Machinery_LightConstruct( this.loc );
							newlight.icon_state = "tube-construct-stage1";
							break;
						case "bulb":
							newlight = new Obj_Machinery_LightConstruct_Small( this.loc );
							newlight.icon_state = "bulb-construct-stage1";
							break;
					}
					new Obj_Item_Stack_CableCoil( GlobalFuncs.get_turf( this.loc ), 1, "red" );
					newlight.dir = this.dir;
					newlight.stage = 1;
					newlight.fingerprints = this.fingerprints;
					newlight.fingerprintshidden = this.fingerprintshidden;
					newlight.fingerprintslast = this.fingerprintslast;
					GlobalFuncs.qdel( this );
					return null;
				}
				GlobalFuncs.to_chat( b, new Txt( "You stick " ).the( a ).item().str( " into the light socket!" ).ToString() );

				if ( this.has_power() && ((Obj)a).is_conductor() ) {
					s = new Effect_Effect_System_SparkSpread();
					s.set_up( 3, 1, this );
					s.start();

					if ( Rand13.PercentChance( 75 ) ) {
						GlobalFuncs.electrocute_mob( b, GlobalFuncs.get_area( this ), this, Rand13.Int( ((int)( 061 )), 1 ) );
					}
				}
			}
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic examine( dynamic user = null, string size = null ) {
			base.examine( (object)(user), size );

			switch ((int)( this.status )) {
				case 0:
					GlobalFuncs.to_chat( user, "<span class='info'>" + this.desc + " It is turned " + ( this.on ? "on" : "off" ) + ".</span>" );
					break;
				case 1:
					GlobalFuncs.to_chat( user, "<span class='info'>" + this.desc + " The " + this.fitting + " has been removed.</span>" );
					break;
				case 3:
					GlobalFuncs.to_chat( user, "<span class='info'>" + this.desc + " The " + this.fitting + " is burnt out.</span>" );
					break;
				case 2:
					GlobalFuncs.to_chat( user, "<span class='info'>" + this.desc + " The " + this.fitting + " has been smashed.</span>" );
					break;
			}
			return null;
		}

		// Function from file: lighting.dm
		public void explode(  ) {
			Task13.Schedule( 0, (Task13.Closure)(() => {
				this.broken();
				Task13.Sleep( 2 );
				GlobalFuncs.explosion( GlobalFuncs.get_turf( this ), 0, 0, 2, 2 );
				Task13.Sleep( 1 );
				GlobalFuncs.qdel( this );
				return;
			}));
			return;
		}

		// Function from file: lighting.dm
		public void fix(  ) {
			
			if ( this.status == 0 ) {
				return;
			}
			this.status = 0;
			this.on = true;
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public void broken( bool? skip_sound_and_sparks = null ) {
			skip_sound_and_sparks = skip_sound_and_sparks ?? false;

			Effect_Effect_System_SparkSpread s = null;

			
			if ( this.status == 1 ) {
				return;
			}

			if ( !( skip_sound_and_sparks == true ) ) {
				
				if ( this.status == 0 || this.status == 3 ) {
					GlobalFuncs.playsound( GlobalFuncs.get_turf( this ), "sound/effects/Glasshit.ogg", 75, 1 );
				}

				if ( this.on ) {
					s = new Effect_Effect_System_SparkSpread();
					s.set_up( 3, 1, this );
					s.start();
				}
			}
			this.status = 2;
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public void flicker( int? amount = null ) {
			amount = amount ?? Rand13.Int( 10, 20 );

			int? i = null;

			
			if ( this.flickering ) {
				return;
			}
			this.flickering = true;
			Task13.Schedule( 0, (Task13.Closure)(() => {
				
				if ( this.on && this.status == 0 ) {
					i = null;
					i = 0;

					while (( i ??0) < ( amount ??0)) {
						
						if ( this.status != 0 ) {
							break;
						}
						this.on = !this.on;
						this.update( false );
						Task13.Sleep( Rand13.Int( 5, 15 ) );
						i++;
					}
					this.on = this.status == 0;
					this.update( false );
				}
				this.flickering = false;
				this.on = this.has_power();
				this.update( false );
				return;
			}));
			return;
		}

		// Function from file: lighting.dm
		public bool has_power(  ) {
			return this.areaMaster.lightswitch && this.areaMaster.power_light;
		}

		// Function from file: lighting.dm
		public void seton( bool s = false ) {
			this.on = s && 0 == this.status;
			this.update();
			return;
		}

		// Function from file: lighting.dm
		public void update( bool? trigger = null ) {
			trigger = trigger ?? true;

			this.update_icon();

			if ( this.on ) {
				
				if ( this.light_range != this.brightness_range || this.light_power != this.brightness_power || this.light_color != this.brightness_color ) {
					this.switchcount++;

					if ( this.rigged ) {
						
						if ( this.status == 0 && trigger == true ) {
							GlobalFuncs.log_admin( "LOG: Rigged light explosion, last touched by " + this.fingerprintslast );
							GlobalFuncs.message_admins( "LOG: Rigged light explosion, last touched by " + this.fingerprintslast );
							this.explode();
						}
					} else if ( Rand13.PercentChance( Num13.MinInt( 60, ((int)( this.switchcount * this.switchcount * 0.01 )) ) ) ) {
						
						if ( this.status == 0 && trigger == true ) {
							this.status = 3;
							this.icon_state = "l" + this.base_state + "-burned";
							this.on = false;
							this.set_light( 0 );
						}
					} else {
						this.use_power = 2;
						this.set_light( this.brightness_range, this.brightness_power, this.brightness_color );
					}
				}
			} else {
				this.use_power = 1;
				this.set_light( 0 );
			}
			this.active_power_usage = this.cost * 10;

			if ( this.on != this.on_gs ) {
				this.on_gs = this.on;

				if ( this.on ) {
					this.static_power_used = this.cost * 20;
					this.addStaticPower( this.static_power_used, 6 );
				} else {
					this.removeStaticPower( this.static_power_used, 6 );
				}
			}
			return;
		}

		// Function from file: lighting.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			
			switch ((int)( this.status )) {
				case 0:
					this.icon_state = "l" + this.base_state + this.on;
					break;
				case 1:
					this.icon_state = "l" + this.base_state + "-empty";
					this.on = false;
					break;
				case 3:
					this.icon_state = "l" + this.base_state + "-burned";
					this.on = false;
					break;
				case 2:
					this.icon_state = "l" + this.base_state + "-broken";
					this.on = false;
					break;
			}
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic Destroy( dynamic brokenup = null ) {
			this.seton( false );
			base.Destroy( (object)(brokenup) );
			GlobalVars.alllights.Remove( this );
			return null;
		}

		// Function from file: lighting.dm
		public override int? bullet_act( dynamic Proj = null, dynamic def_zone = null ) {
			
			if ( Proj is Obj_Item_Projectile_Beam || Proj is Obj_Item_Projectile_Bullet || Proj is Obj_Item_Projectile_Ricochet ) {
				
				if ( !( Proj is Obj_Item_Projectile_Beam_Lastertag ) && !( Proj is Obj_Item_Projectile_Beam_Practice ) ) {
					this.broken();
				}
			}
			return null;
		}

		// Function from file: lighting.dm
		public override dynamic cultify(  ) {
			new Obj_Structure_Cult_Pylon( this.loc );
			GlobalFuncs.qdel( this );
			return null;
		}

		// Function from file: lighting.dm
		public override bool spook(  ) {
			
			if ( base.spook() ) {
				this.flicker();
			}
			return false;
		}

	}

}