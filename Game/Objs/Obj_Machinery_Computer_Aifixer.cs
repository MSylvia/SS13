// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Machinery_Computer_Aifixer : Obj_Machinery_Computer {

		public Mob_Living occupant = null;
		public bool active = false;

		protected override void __FieldInit() {
			base.__FieldInit();

			this.req_access = new ByTable(new object [] { 20, 29, 19 });
			this.light_color = "#E17DE1";
			this.icon_state = "ai-fixer";
		}

		// Function from file: aifixer.dm
		public Obj_Machinery_Computer_Aifixer ( dynamic loc = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;
			this.update_icon();
			return;
		}

		// Function from file: aifixer.dm
		public override bool? update_icon( dynamic location = null, dynamic target = null ) {
			base.update_icon( (object)(location), (object)(target) );
			this.overlays = 0;

			if ( ( this.stat & 3 ) != 0 ) {
				return null;
			}

			if ( this.occupant != null ) {
				
				switch ((int?)( this.occupant.stat )) {
					case 0:
						this.overlays.Add( new Image( "icons/obj/computer.dmi", "ai-fixer-full" ) );
						break;
					case 2:
						this.overlays.Add( new Image( "icons/obj/computer.dmi", "ai-fixer-404" ) );
						break;
				}
			} else {
				this.overlays.Add( new Image( "icons/obj/computer.dmi", "ai-fixer-empty" ) );
			}
			return null;
		}

		// Function from file: aifixer.dm
		public override dynamic Topic( string href = null, ByTable href_list = null, dynamic hclient = null, HtmlInterface currui = null ) {
			
			if ( Lang13.Bool( base.Topic( href, href_list, (object)(hclient) ) ) ) {
				return null;
			}

			if ( Lang13.Bool( href_list["fix"] ) ) {
				this.active = true;
				this.overlays.Add( new Image( "icons/obj/computer.dmi", "ai-fixer-on" ) );

				while (Convert.ToDouble( this.occupant.health ) < 100) {
					this.occupant.adjustOxyLoss( -1 );
					this.occupant.adjustFireLoss( -1 );
					this.occupant.adjustToxLoss( -1 );
					this.occupant.adjustBruteLoss( -1 );
					this.occupant.updatehealth();

					if ( Convert.ToDouble( this.occupant.health ) >= 0 && this.occupant.stat == 2 ) {
						this.occupant.stat = 0;
						this.occupant.lying = false;
						this.occupant.resurrect();
						this.overlays.Remove( new Image( "icons/obj/computer.dmi", "ai-fixer-404" ) );
						this.overlays.Add( new Image( "icons/obj/computer.dmi", "ai-fixer-full" ) );
					}
					this.updateUsrDialog();
					Task13.Sleep( 10 );
				}
				this.active = false;
				this.overlays.Remove( new Image( "icons/obj/computer.dmi", "ai-fixer-on" ) );
				this.add_fingerprint( Task13.User );
			}
			this.updateUsrDialog();
			return null;
		}

		// Function from file: aifixer.dm
		public override dynamic process(  ) {
			
			if ( Lang13.Bool( base.process() ) ) {
				this.updateUsrDialog();
				return null;
			}
			return null;
		}

		// Function from file: aifixer.dm
		public override dynamic attack_hand( dynamic a = null, dynamic b = null, dynamic c = null ) {
			string dat = null;
			dynamic laws = null;
			int number = 0;
			int? index = null;
			dynamic law = null;
			int? index2 = null;
			dynamic law2 = null;

			
			if ( Lang13.Bool( base.attack_hand( (object)(a), (object)(b), (object)(c) ) ) ) {
				return null;
			}
			dat = "<h3>AI System Integrity Restorer</h3><br><br>";

			if ( this.occupant != null ) {
				dat += "Stored AI: " + this.occupant.name + "<br>System integrity: " + ((dynamic)this.occupant).system_integrity() + "%<br>";

				if ( Lang13.Bool( ((dynamic)this.occupant).laws.zeroth ) ) {
					laws += "0: " + ((dynamic)this.occupant).laws.zeroth + "<BR>";
				}
				number = 1;
				index = null;
				index = 1;

				while (( index ??0) <= ((dynamic)this.occupant).laws.inherent.len) {
					law = ((dynamic)this.occupant).laws.inherent[index];

					if ( Lang13.Length( law ) > 0 ) {
						laws += "" + number + ": " + law + "<BR>";
						number++;
					}
					index++;
				}
				index2 = null;
				index2 = 1;

				while (( index2 ??0) <= ((dynamic)this.occupant).laws.supplied.len) {
					law2 = ((dynamic)this.occupant).laws.supplied[index2];

					if ( Lang13.Length( law2 ) > 0 ) {
						laws += "" + number + ": " + law2 + "<BR>";
						number++;
					}
					index2++;
				}
				dat += "Laws:<br>" + laws + "<br>";

				if ( this.occupant.stat == 2 ) {
					dat += "<b>AI nonfunctional</b>";
				} else {
					dat += "<b>AI functional</b>";
				}

				if ( !this.active ) {
					dat += new Txt( "<br><br><A href='byond://?src=" ).Ref( this ).str( ";fix=1'>Begin Reconstruction</A>" ).ToString();
				} else {
					dat += "<br><br>Reconstruction in process, please wait.<br>";
				}
			}
			dat += new Txt( " <A href='?src=" ).Ref( a ).str( ";mach_close=computer'>Close</A>" ).ToString();
			((Mob)a).set_machine( this );
			Interface13.Browse( a, dat, "window=computer;size=400x500" );
			GlobalFuncs.onclose( a, "computer" );
			return null;
		}

		// Function from file: aifixer.dm
		public override dynamic attack_paw( Mob a = null, dynamic b = null, dynamic c = null ) {
			return this.attack_hand( a );
		}

		// Function from file: aifixer.dm
		public override dynamic attack_ai( dynamic user = null ) {
			this.add_hiddenprint( user );
			return this.attack_hand( user );
		}

		// Function from file: aifixer.dm
		public override dynamic attackby( dynamic a = null, dynamic b = null, dynamic c = null ) {
			
			if ( a is Obj_Item_Device_Aicard ) {
				
				if ( ( this.stat & 3 ) != 0 ) {
					GlobalFuncs.to_chat( b, "This terminal isn't functioning right now, get it working!" );
					return null;
				}
				((Obj_Item)a).transfer_ai( "AIFIXER", "AICARD", this, b );
				return null;
			}
			return base.attackby( (object)(a), (object)(b), (object)(c) );
		}

	}

}