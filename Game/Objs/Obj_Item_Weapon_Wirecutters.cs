// FILE AUTOGENERATED BY SOMNIUM13.

using System;
using Somnium.Engine.ByImpl;

namespace Somnium.Game {
	class Obj_Item_Weapon_Wirecutters : Obj_Item_Weapon {

		protected override void __FieldInit() {
			base.__FieldInit();

			this.flags = 64;
			this.slot_flags = 512;
			this.force = 6;
			this.throw_speed = 3;
			this.w_class = 2;
			this.materials = new ByTable().Set( "$metal", 80 );
			this.origin_tech = "materials=1;engineering=1";
			this.attack_verb = new ByTable(new object [] { "pinched", "nipped" });
			this.hitsound = "sound/items/Wirecutter.ogg";
			this.icon_state = "cutters";
		}

		// Function from file: tools.dm
		public Obj_Item_Weapon_Wirecutters ( dynamic loc = null, string param_color = null ) : base( (object)(loc) ) {
			// Warning: Super call was HERE! If anything above HERE is needed by the super call, it might break!;

			if ( !Lang13.Bool( param_color ) && Rand13.PercentChance( 50 ) || param_color == "yellow" ) {
				this.icon_state = "cutters-y";
				this.item_state = "cutters_yellow";
			}
			return;
		}

		// Function from file: tools.dm
		public override int suicide_act( Mob_Living_Carbon_Human user = null ) {
			user.visible_message( new Txt( "<span class='suicide'>" ).item( user ).str( " is cutting at " ).his_her_its_their().str( " arteries with the " ).item( this.name ).str( "! It looks like " ).he_she_it_they().str( "'s trying to commit suicide.</span>" ).ToString() );
			GlobalFuncs.playsound( this.loc, "sound/items/Wirecutter.ogg", 50, 1, -1 );
			return 1;
		}

		// Function from file: tools.dm
		public override bool attack( dynamic M = null, dynamic user = null, bool? def_zone = null ) {
			
			if ( M is Mob_Living_Carbon && Lang13.Bool( M.handcuffed ) && M.handcuffed is Obj_Item_Weapon_Restraints_Handcuffs_Cable ) {
				((Ent_Static)user).visible_message( "<span class='notice'>" + user + " cuts " + M + "'s restraints with " + this + "!</span>" );
				GlobalFuncs.qdel( M.handcuffed );
				M.handcuffed = null;

				if ( M.buckled != null && M.buckled.buckle_requires_restraints ) {
					M.buckled.unbuckle_mob();
				}
				((Mob_Living_Carbon)M).update_handcuffed();
				return false;
			} else {
				base.attack( (object)(M), (object)(user), def_zone );
			}
			return false;
		}

	}

}